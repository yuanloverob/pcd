{
  "cve_id": "CVE-2021-37686",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. In affected versions the strided slice implementation in TFLite has a logic bug which can allow an attacker to trigger an infinite loop. This arises from newly introduced support for [ellipsis in axis definition](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/strided_slice.cc#L103-L122). An attacker can craft a model such that `ellipsis_end_idx` is smaller than `i` (e.g., always negative). In this case, the inner loop does not increase `i` and the `continue` statement causes execution to skip over the preincrement at the end of the outer loop. We have patched the issue in GitHub commit dfa22b348b70bb89d6d6ec0ff53973bacb4f4695. TensorFlow 2.6.0 is the only affected version.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "dfa22b348b70bb89d6d6ec0ff53973bacb4f4695",
  "patch_info": {
    "commit_hash": "dfa22b348b70bb89d6d6ec0ff53973bacb4f4695",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/dfa22b348b70bb89d6d6ec0ff53973bacb4f4695",
    "files": [
      "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
      "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
      "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
      "tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
      "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
      "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
      "tensorflow/lite/kernels/internal/reference/pooling.h",
      "tensorflow/lite/kernels/pooling.cc"
    ],
    "message": "Prevent a division by 0 in average ops.\n\nPiperOrigin-RevId: 385184660\nChange-Id: I7affd4554f9b336fca29ac68f633232c094d0bd3",
    "before_after_code_files": [
      "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
      "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
      "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
      "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
      "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
      "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
      "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h",
      "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc": [
      "File: tensorflow/lite/kernels/internal/averagepool_quantized_test.cc -> tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:   std::vector<int8> optimized_averagePool_output(buffer_size);",
      "41:   std::vector<int8> reference_averagePool_output(buffer_size);",
      "50:   for (int i = 0; i < buffer_size; i++) {",
      "51:     EXPECT_TRUE(reference_averagePool_output[i] ==",
      "",
      "[Removed Lines]",
      "43:   reference_integer_ops::AveragePool(params, input_shape, input_data,",
      "44:                                      output_shape,",
      "45:                                      reference_averagePool_output.data());",
      "46:   optimized_integer_ops::AveragePool(params, input_shape, input_data,",
      "47:                                      output_shape,",
      "48:                                      optimized_averagePool_output.data());",
      "",
      "[Added Lines]",
      "43:   bool reference_success = reference_integer_ops::AveragePool(",
      "44:       params, input_shape, input_data, output_shape,",
      "45:       reference_averagePool_output.data());",
      "46:   bool optimized_success = optimized_integer_ops::AveragePool(",
      "47:       params, input_shape, input_data, output_shape,",
      "48:       optimized_averagePool_output.data());",
      "49:   EXPECT_TRUE(reference_success);",
      "50:   EXPECT_TRUE(optimized_success);",
      "",
      "---------------"
    ],
    "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h": [
      "File: tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h -> tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "144:   }",
      "145: }",
      "148:                         const RuntimeShape& input_shape, const int8* input_data,",
      "149:                         const RuntimeShape& output_shape, int8* output_data) {",
      "150:   ruy::profiler::ScopeLabel label(\"AveragePool/8bitWith32bitAccumulator\");",
      "",
      "[Removed Lines]",
      "147: inline void AveragePool(const PoolParams& params,",
      "",
      "[Added Lines]",
      "147: inline bool AveragePool(const PoolParams& params,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "192:               std::min(params.filter_height, input_height - in_y_origin);",
      "193:           const int filter_count =",
      "194:               (filter_x_end - filter_x_start) * (filter_y_end - filter_y_start);",
      "195:           memset(acc, 0, tranche_depth * sizeof(acc[0]));",
      "196:           const int8* input_ptr =",
      "197:               input_data + depth_base +",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "195:           if (filter_count == 0) return false;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "267:       }",
      "268:     }",
      "269:   }",
      "270: }",
      "272: }  // namespace optimized_integer_ops",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "271:   return true;",
      "",
      "---------------"
    ],
    "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h": [
      "File: tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h -> tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "3761:                output_data, output_dims);",
      "3762: }",
      "3765:                         int stride_width, int stride_height, int pad_width,",
      "3766:                         int pad_height, int kwidth, int kheight,",
      "3767:                         float output_activation_min,",
      "",
      "[Removed Lines]",
      "3764: inline void AveragePool(const float* input_data, const Dims<4>& input_dims,",
      "",
      "[Added Lines]",
      "3764: inline bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3776:   params.padding_values.width = pad_width;",
      "3777:   params.float_activation_min = output_activation_min;",
      "3778:   params.float_activation_max = output_activation_max;",
      "3781: }",
      "3784: template <FusedActivationFunctionType Ac>",
      "3786:                  int stride_width, int stride_height, int pad_width,",
      "3787:                  int pad_height, int kwidth, int kheight, float* output_data,",
      "3788:                  const Dims<4>& output_dims) {",
      "3789:   float output_activation_min, output_activation_max;",
      "3790:   GetActivationMinMax(Ac, &output_activation_min, &output_activation_max);",
      "3795: }",
      "3798: template <FusedActivationFunctionType Ac>",
      "3800:                  int pad_width, int pad_height, int filter_width,",
      "3801:                  int filter_height, float* output_data,",
      "3802:                  const Dims<4>& output_dims) {",
      "3805: }",
      "3808:                         int stride_width, int stride_height, int pad_width,",
      "3809:                         int pad_height, int filter_width, int filter_height,",
      "3810:                         int32 output_activation_min,",
      "",
      "[Removed Lines]",
      "3779:   AveragePool(params, DimsToShape(input_dims), input_data,",
      "3780:               DimsToShape(output_dims), output_data);",
      "3785: void AveragePool(const float* input_data, const Dims<4>& input_dims,",
      "3792:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
      "3793:               pad_height, kwidth, kheight, output_activation_min,",
      "3794:               output_activation_max, output_data, output_dims);",
      "3799: void AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
      "3803:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
      "3804:                   filter_width, filter_height, output_data, output_dims);",
      "3807: inline void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
      "",
      "[Added Lines]",
      "3779:   return AveragePool(params, DimsToShape(input_dims), input_data,",
      "3780:                      DimsToShape(output_dims), output_data);",
      "3785: bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
      "3792:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
      "3793:                      pad_width, pad_height, kwidth, kheight,",
      "3794:                      output_activation_min, output_activation_max, output_data,",
      "3795:                      output_dims);",
      "3800: bool AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
      "3804:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
      "3805:                          pad_height, filter_width, filter_height, output_data,",
      "3806:                          output_dims);",
      "3809: inline bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3819:   params.padding_values.width = pad_width;",
      "3820:   params.quantized_activation_min = output_activation_min;",
      "3821:   params.quantized_activation_max = output_activation_max;",
      "3824: }",
      "3827: template <FusedActivationFunctionType Ac>",
      "3829:                  int stride_width, int stride_height, int pad_width,",
      "3830:                  int pad_height, int filter_width, int filter_height,",
      "3831:                  int32 output_activation_min, int32 output_activation_max,",
      "",
      "[Removed Lines]",
      "3822:   AveragePool(params, DimsToShape(input_dims), input_data,",
      "3823:               DimsToShape(output_dims), output_data);",
      "3828: void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
      "",
      "[Added Lines]",
      "3824:   return AveragePool(params, DimsToShape(input_dims), input_data,",
      "3825:                      DimsToShape(output_dims), output_data);",
      "3830: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3839:     TFLITE_DCHECK_EQ(output_activation_min, 0);",
      "3840:     TFLITE_DCHECK_EQ(output_activation_max, 255);",
      "3841:   }",
      "3845: }",
      "3848: template <FusedActivationFunctionType Ac>",
      "3850:                  int pad_width, int pad_height, int filter_width,",
      "3851:                  int filter_height, int32 output_activation_min,",
      "3852:                  int32 output_activation_max, uint8* output_data,",
      "3853:                  const Dims<4>& output_dims) {",
      "3857: }",
      "3859: inline void MaxPool(const float* input_data, const Dims<4>& input_dims,",
      "",
      "[Removed Lines]",
      "3842:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
      "3843:               pad_height, filter_width, filter_height, output_activation_min,",
      "3844:               output_activation_max, output_data, output_dims);",
      "3849: void AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
      "3854:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
      "3855:                   filter_width, filter_height, output_activation_min,",
      "3856:                   output_activation_max, output_data, output_dims);",
      "",
      "[Added Lines]",
      "3844:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
      "3845:                      pad_width, pad_height, filter_width, filter_height,",
      "3846:                      output_activation_min, output_activation_max, output_data,",
      "3847:                      output_dims);",
      "3852: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
      "3857:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
      "3858:                          pad_height, filter_width, filter_height,",
      "3859:                          output_activation_min, output_activation_max,",
      "3860:                          output_data, output_dims);",
      "",
      "---------------"
    ],
    "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h": [
      "File: tensorflow/lite/kernels/internal/optimized/optimized_ops.h -> tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "3172:   return (b * height + h) * width + w;",
      "3173: }",
      "3176:                         const RuntimeShape& input_shape,",
      "3177:                         const float* input_data,",
      "3178:                         const RuntimeShape& output_shape, float* output_data) {",
      "",
      "[Removed Lines]",
      "3175: inline void AveragePool(const PoolParams& params,",
      "",
      "[Added Lines]",
      "3175: inline bool AveragePool(const PoolParams& params,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3187:   const int stride_height = params.stride_height;",
      "3188:   const int stride_width = params.stride_width;",
      "3191:   const auto in_mat = MapAsMatrixWithLastDimAsRows(input_data, input_shape);",
      "3192:   auto out_mat = MapAsMatrixWithLastDimAsRows(output_data, output_shape);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3190:   if (stride_height == 0) return false;",
      "3191:   if (stride_width == 0) return false;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3232:                                                   params.float_activation_min,",
      "3233:                                                   params.float_activation_max);",
      "3234:   }",
      "3235: }",
      "3238:                         const RuntimeShape& input_shape,",
      "3239:                         const uint8* input_data,",
      "3240:                         const RuntimeShape& output_shape, uint8* output_data) {",
      "",
      "[Removed Lines]",
      "3237: inline void AveragePool(const PoolParams& params,",
      "",
      "[Added Lines]",
      "3239:   return true;",
      "3242: inline bool AveragePool(const PoolParams& params,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3283:               std::min(params.filter_height, input_height - in_y_origin);",
      "3284:           const int filter_count =",
      "3285:               (filter_x_end - filter_x_start) * (filter_y_end - filter_y_start);",
      "3286:           memset(acc, 0, tranche_depth * sizeof(acc[0]));",
      "3287:           const uint8* input_ptr =",
      "3288:               input_data + depth_base +",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3291:           if (filter_count == 0) return false;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3369:       }",
      "3370:     }",
      "3371:   }",
      "3372: }",
      "3374: inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3378:   return true;",
      "",
      "---------------"
    ],
    "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h": [
      "File: tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h -> tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "21: namespace tflite {",
      "22: namespace reference_integer_ops {",
      "25:                         const RuntimeShape& input_shape,",
      "26:                         const int8_t* input_data,",
      "27:                         const RuntimeShape& output_shape, int8_t* output_data) {",
      "",
      "[Removed Lines]",
      "24: inline void AveragePool(const PoolParams& params,",
      "",
      "[Added Lines]",
      "24: inline bool AveragePool(const PoolParams& params,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:               filter_count++;",
      "67:             }",
      "68:           }",
      "70:           acc = acc > 0 ? (acc + filter_count / 2) / filter_count",
      "71:                         : (acc - filter_count / 2) / filter_count;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69:           if (filter_count == 0) return false;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "77:       }",
      "78:     }",
      "79:   }",
      "80: }",
      "82: inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "81:   return true;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "136:   }",
      "137: }",
      "140:                         const RuntimeShape& input_shape,",
      "141:                         const int16_t* input_data,",
      "142:                         const RuntimeShape& output_shape,",
      "",
      "[Removed Lines]",
      "139: inline void AveragePool(const PoolParams& params,",
      "",
      "[Added Lines]",
      "141: inline bool AveragePool(const PoolParams& params,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "182:               filter_count++;",
      "183:             }",
      "184:           }",
      "186:           acc = acc > 0 ? (acc + filter_count / 2) / filter_count",
      "187:                         : (acc - filter_count / 2) / filter_count;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "187:           if (filter_count == 0) return false;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "193:       }",
      "194:     }",
      "195:   }",
      "196: }",
      "198: inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "199:   return true;",
      "",
      "---------------"
    ],
    "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h": [
      "File: tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h -> tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1487:       output_data);",
      "1488: }",
      "1491:                         int stride_width, int stride_height, int pad_width,",
      "1492:                         int pad_height, int kwidth, int kheight,",
      "1493:                         float output_activation_min,",
      "",
      "[Removed Lines]",
      "1490: inline void AveragePool(const float* input_data, const Dims<4>& input_dims,",
      "",
      "[Added Lines]",
      "1490: inline bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1502:   params.padding_values.width = pad_width;",
      "1503:   params.float_activation_min = output_activation_min;",
      "1504:   params.float_activation_max = output_activation_max;",
      "1507: }",
      "",
      "[Removed Lines]",
      "1505:   AveragePool(params, DimsToShape(input_dims), input_data,",
      "1506:               DimsToShape(output_dims), output_data);",
      "",
      "[Added Lines]",
      "1505:   return AveragePool(params, DimsToShape(input_dims), input_data,",
      "1506:                      DimsToShape(output_dims), output_data);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1564: template <FusedActivationFunctionType Ac>",
      "1566:                  int stride_width, int stride_height, int pad_width,",
      "1567:                  int pad_height, int kwidth, int kheight, float* output_data,",
      "1568:                  const Dims<4>& output_dims) {",
      "1569:   float output_activation_min, output_activation_max;",
      "1570:   GetActivationMinMax(Ac, &output_activation_min, &output_activation_max);",
      "1575: }",
      "1578: template <FusedActivationFunctionType Ac>",
      "1580:                  int pad_width, int pad_height, int filter_width,",
      "1581:                  int filter_height, float* output_data,",
      "1582:                  const Dims<4>& output_dims) {",
      "1585: }",
      "1588:                         int stride_width, int stride_height, int pad_width,",
      "1589:                         int pad_height, int filter_width, int filter_height,",
      "1590:                         int32 output_activation_min,",
      "",
      "[Removed Lines]",
      "1565: void AveragePool(const float* input_data, const Dims<4>& input_dims,",
      "1572:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
      "1573:               pad_height, kwidth, kheight, output_activation_min,",
      "1574:               output_activation_max, output_data, output_dims);",
      "1579: void AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
      "1583:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
      "1584:                   filter_width, filter_height, output_data, output_dims);",
      "1587: inline void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
      "",
      "[Added Lines]",
      "1565: bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
      "1572:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
      "1573:                      pad_width, pad_height, kwidth, kheight,",
      "1574:                      output_activation_min, output_activation_max, output_data,",
      "1575:                      output_dims);",
      "1580: bool AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
      "1584:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
      "1585:                          pad_height, filter_width, filter_height, output_data,",
      "1586:                          output_dims);",
      "1589: inline bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1599:   params.padding_values.width = pad_width;",
      "1600:   params.quantized_activation_min = output_activation_min;",
      "1601:   params.quantized_activation_max = output_activation_max;",
      "1604: }",
      "1607: template <FusedActivationFunctionType Ac>",
      "1609:                  int stride_width, int stride_height, int pad_width,",
      "1610:                  int pad_height, int filter_width, int filter_height,",
      "1611:                  int32 output_activation_min, int32 output_activation_max,",
      "",
      "[Removed Lines]",
      "1602:   AveragePool(params, DimsToShape(input_dims), input_data,",
      "1603:               DimsToShape(output_dims), output_data);",
      "1608: void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
      "",
      "[Added Lines]",
      "1604:   return AveragePool(params, DimsToShape(input_dims), input_data,",
      "1605:                      DimsToShape(output_dims), output_data);",
      "1610: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1619:     TFLITE_DCHECK_EQ(output_activation_min, 0);",
      "1620:     TFLITE_DCHECK_EQ(output_activation_max, 255);",
      "1621:   }",
      "1625: }",
      "1628: template <FusedActivationFunctionType Ac>",
      "1630:                  int pad_width, int pad_height, int filter_width,",
      "1631:                  int filter_height, int32 output_activation_min,",
      "1632:                  int32 output_activation_max, uint8* output_data,",
      "1633:                  const Dims<4>& output_dims) {",
      "1637: }",
      "1639: inline void MaxPool(const float* input_data, const Dims<4>& input_dims,",
      "",
      "[Removed Lines]",
      "1622:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
      "1623:               pad_height, filter_width, filter_height, output_activation_min,",
      "1624:               output_activation_max, output_data, output_dims);",
      "1629: void AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
      "1634:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
      "1635:                   filter_width, filter_height, output_activation_min,",
      "1636:                   output_activation_max, output_data, output_dims);",
      "",
      "[Added Lines]",
      "1624:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
      "1625:                      pad_width, pad_height, filter_width, filter_height,",
      "1626:                      output_activation_min, output_activation_max, output_data,",
      "1627:                      output_dims);",
      "1632: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
      "1637:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
      "1638:                          pad_height, filter_width, filter_height,",
      "1639:                          output_activation_min, output_activation_max,",
      "1640:                          output_data, output_dims);",
      "",
      "---------------"
    ],
    "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h": [
      "File: tensorflow/lite/kernels/internal/reference/pooling.h -> tensorflow/lite/kernels/internal/reference/pooling.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "23: namespace tflite {",
      "24: namespace reference_ops {",
      "27:                         const RuntimeShape& input_shape,",
      "28:                         const float* input_data,",
      "29:                         const RuntimeShape& output_shape, float* output_data) {",
      "",
      "[Removed Lines]",
      "26: inline void AveragePool(const PoolParams& params,",
      "",
      "[Added Lines]",
      "26: inline bool AveragePool(const PoolParams& params,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66:               filter_count++;",
      "67:             }",
      "68:           }",
      "69:           const float average = total / filter_count;",
      "70:           output_data[Offset(output_shape, batch, out_y, out_x, channel)] =",
      "71:               ActivationFunctionWithMinMax(average, params.float_activation_min,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69:           if (filter_count == 0) return false;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "74:       }",
      "75:     }",
      "76:   }",
      "77: }",
      "80:                         const RuntimeShape& input_shape,",
      "81:                         const uint8_t* input_data,",
      "82:                         const RuntimeShape& output_shape,",
      "",
      "[Removed Lines]",
      "79: inline void AveragePool(const PoolParams& params,",
      "",
      "[Added Lines]",
      "78:   return true;",
      "81: inline bool AveragePool(const PoolParams& params,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "122:               filter_count++;",
      "123:             }",
      "124:           }",
      "125:           acc = (acc + filter_count / 2) / filter_count;",
      "126:           acc = std::max(acc, params.quantized_activation_min);",
      "127:           acc = std::min(acc, params.quantized_activation_max);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "127:           if (filter_count == 0) return false;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "131:       }",
      "132:     }",
      "133:   }",
      "134: }",
      "136: inline void L2Pool(const PoolParams& params, const RuntimeShape& input_shape,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "137:   return true;",
      "",
      "---------------"
    ],
    "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc": [
      "File: tensorflow/lite/kernels/pooling.cc -> tensorflow/lite/kernels/pooling.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "117: }",
      "119: template <KernelType kernel_type>",
      "123:   float activation_min, activation_max;",
      "124:   CalculateActivationRange(params->activation, &activation_min,",
      "125:                            &activation_max);",
      "139:   if (kernel_type == kReference) {",
      "140:     TF_LITE_AVERAGE_POOL(reference_ops);",
      "141:   } else {",
      "142:     TF_LITE_AVERAGE_POOL(optimized_ops);",
      "143:   }",
      "144: #undef TF_LITE_AVERAGE_POOL",
      "145: }",
      "147: template <KernelType kernel_type>",
      "152:   int32_t activation_min;",
      "153:   int32_t activation_max;",
      "154:   (void)CalculateActivationRangeQuantized(context, params->activation, output,",
      "155:                                           &activation_min, &activation_max);",
      "169:   if (kernel_type == kReference) {",
      "170:     TF_LITE_AVERAGE_POOL(reference_ops);",
      "171:   } else {",
      "172:     TF_LITE_AVERAGE_POOL(optimized_ops);",
      "173:   }",
      "174: #undef TF_LITE_AVERAGE_POOL",
      "175: }",
      "177: template <KernelType kernel_type>",
      "181:   int32_t activation_min;",
      "182:   int32_t activation_max;",
      "184:   (void)CalculateActivationRangeQuantized(context, params->activation, output,",
      "185:                                           &activation_min, &activation_max);",
      "199:   if (kernel_type == kReference) {",
      "200:     TF_LITE_AVERAGE_POOL(reference_integer_ops);",
      "201:   } else {",
      "202:     TF_LITE_AVERAGE_POOL(optimized_integer_ops);",
      "203:   }",
      "204: #undef TF_LITE_AVERAGE_POOL",
      "205: }",
      "207: template <KernelType kernel_type>",
      "212:   int32_t activation_min;",
      "213:   int32_t activation_max;",
      "214:   CalculateActivationRangeQuantized(context, params->activation, output,",
      "215:                                     &activation_min, &activation_max);",
      "229:   TF_LITE_AVERAGE_POOL(reference_integer_ops);",
      "230: #undef TF_LITE_AVERAGE_POOL",
      "231: }",
      "233: template <KernelType kernel_type>",
      "",
      "[Removed Lines]",
      "120: void AverageEvalFloat(TfLiteContext* context, TfLiteNode* node,",
      "121:                       TfLitePoolParams* params, OpData* data,",
      "122:                       const TfLiteTensor* input, TfLiteTensor* output) {",
      "126: #define TF_LITE_AVERAGE_POOL(type)                                       \\",
      "127:   tflite::PoolParams op_params;                                          \\",
      "128:   op_params.stride_height = params->stride_height;                       \\",
      "129:   op_params.stride_width = params->stride_width;                         \\",
      "130:   op_params.filter_height = params->filter_height;                       \\",
      "131:   op_params.filter_width = params->filter_width;                         \\",
      "132:   op_params.padding_values.height = data->padding.height;                \\",
      "133:   op_params.padding_values.width = data->padding.width;                  \\",
      "134:   op_params.float_activation_min = activation_min;                       \\",
      "135:   op_params.float_activation_max = activation_max;                       \\",
      "136:   type::AveragePool(op_params, GetTensorShape(input),                    \\",
      "137:                     GetTensorData<float>(input), GetTensorShape(output), \\",
      "138:                     GetTensorData<float>(output))",
      "148: void AverageEvalQuantizedUint8(TfLiteContext* context, TfLiteNode* node,",
      "149:                                TfLitePoolParams* params, OpData* data,",
      "150:                                const TfLiteTensor* input,",
      "151:                                TfLiteTensor* output) {",
      "156: #define TF_LITE_AVERAGE_POOL(type)                                         \\",
      "157:   tflite::PoolParams op_params;                                            \\",
      "158:   op_params.stride_height = params->stride_height;                         \\",
      "159:   op_params.stride_width = params->stride_width;                           \\",
      "160:   op_params.filter_height = params->filter_height;                         \\",
      "161:   op_params.filter_width = params->filter_width;                           \\",
      "162:   op_params.padding_values.height = data->padding.height;                  \\",
      "163:   op_params.padding_values.width = data->padding.width;                    \\",
      "164:   op_params.quantized_activation_min = activation_min;                     \\",
      "165:   op_params.quantized_activation_max = activation_max;                     \\",
      "166:   type::AveragePool(op_params, GetTensorShape(input),                      \\",
      "167:                     GetTensorData<uint8_t>(input), GetTensorShape(output), \\",
      "168:                     GetTensorData<uint8_t>(output))",
      "178: void AverageEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,",
      "179:                               TfLitePoolParams* params, OpData* data,",
      "180:                               const TfLiteTensor* input, TfLiteTensor* output) {",
      "186: #define TF_LITE_AVERAGE_POOL(type)                                        \\",
      "187:   tflite::PoolParams op_params;                                           \\",
      "188:   op_params.stride_height = params->stride_height;                        \\",
      "189:   op_params.stride_width = params->stride_width;                          \\",
      "190:   op_params.filter_height = params->filter_height;                        \\",
      "191:   op_params.filter_width = params->filter_width;                          \\",
      "192:   op_params.padding_values.height = data->padding.height;                 \\",
      "193:   op_params.padding_values.width = data->padding.width;                   \\",
      "194:   op_params.quantized_activation_min = activation_min;                    \\",
      "195:   op_params.quantized_activation_max = activation_max;                    \\",
      "196:   type::AveragePool(op_params, GetTensorShape(input),                     \\",
      "197:                     GetTensorData<int8_t>(input), GetTensorShape(output), \\",
      "198:                     GetTensorData<int8_t>(output))",
      "208: void AverageEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,",
      "209:                                TfLitePoolParams* params, OpData* data,",
      "210:                                const TfLiteTensor* input,",
      "211:                                TfLiteTensor* output) {",
      "216: #define TF_LITE_AVERAGE_POOL(type)                                         \\",
      "217:   tflite::PoolParams op_params;                                            \\",
      "218:   op_params.stride_height = params->stride_height;                         \\",
      "219:   op_params.stride_width = params->stride_width;                           \\",
      "220:   op_params.filter_height = params->filter_height;                         \\",
      "221:   op_params.filter_width = params->filter_width;                           \\",
      "222:   op_params.padding_values.height = data->padding.height;                  \\",
      "223:   op_params.padding_values.width = data->padding.width;                    \\",
      "224:   op_params.quantized_activation_min = activation_min;                     \\",
      "225:   op_params.quantized_activation_max = activation_max;                     \\",
      "226:   type::AveragePool(op_params, GetTensorShape(input),                      \\",
      "227:                     GetTensorData<int16_t>(input), GetTensorShape(output), \\",
      "228:                     GetTensorData<int16_t>(output))",
      "",
      "[Added Lines]",
      "120: TfLiteStatus AverageEvalFloat(TfLiteContext* context, TfLiteNode* node,",
      "121:                               TfLitePoolParams* params, OpData* data,",
      "122:                               const TfLiteTensor* input, TfLiteTensor* output) {",
      "126: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
      "127:   tflite::PoolParams op_params;                                               \\",
      "128:   op_params.stride_height = params->stride_height;                            \\",
      "129:   op_params.stride_width = params->stride_width;                              \\",
      "130:   op_params.filter_height = params->filter_height;                            \\",
      "131:   op_params.filter_width = params->filter_width;                              \\",
      "132:   op_params.padding_values.height = data->padding.height;                     \\",
      "133:   op_params.padding_values.width = data->padding.width;                       \\",
      "134:   op_params.float_activation_min = activation_min;                            \\",
      "135:   op_params.float_activation_max = activation_max;                            \\",
      "136:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
      "137:                                             GetTensorData<float>(input),      \\",
      "138:                                             GetTensorShape(output),           \\",
      "139:                                             GetTensorData<float>(output)))",
      "146:   return kTfLiteOk;",
      "150: TfLiteStatus AverageEvalQuantizedUint8(TfLiteContext* context, TfLiteNode* node,",
      "151:                                        TfLitePoolParams* params, OpData* data,",
      "152:                                        const TfLiteTensor* input,",
      "153:                                        TfLiteTensor* output) {",
      "158: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
      "159:   tflite::PoolParams op_params;                                               \\",
      "160:   op_params.stride_height = params->stride_height;                            \\",
      "161:   op_params.stride_width = params->stride_width;                              \\",
      "162:   op_params.filter_height = params->filter_height;                            \\",
      "163:   op_params.filter_width = params->filter_width;                              \\",
      "164:   op_params.padding_values.height = data->padding.height;                     \\",
      "165:   op_params.padding_values.width = data->padding.width;                       \\",
      "166:   op_params.quantized_activation_min = activation_min;                        \\",
      "167:   op_params.quantized_activation_max = activation_max;                        \\",
      "168:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
      "169:                                             GetTensorData<uint8_t>(input),    \\",
      "170:                                             GetTensorShape(output),           \\",
      "171:                                             GetTensorData<uint8_t>(output)))",
      "178:   return kTfLiteOk;",
      "182: TfLiteStatus AverageEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,",
      "183:                                       TfLitePoolParams* params, OpData* data,",
      "184:                                       const TfLiteTensor* input,",
      "185:                                       TfLiteTensor* output) {",
      "191: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
      "192:   tflite::PoolParams op_params;                                               \\",
      "193:   op_params.stride_height = params->stride_height;                            \\",
      "194:   op_params.stride_width = params->stride_width;                              \\",
      "195:   op_params.filter_height = params->filter_height;                            \\",
      "196:   op_params.filter_width = params->filter_width;                              \\",
      "197:   op_params.padding_values.height = data->padding.height;                     \\",
      "198:   op_params.padding_values.width = data->padding.width;                       \\",
      "199:   op_params.quantized_activation_min = activation_min;                        \\",
      "200:   op_params.quantized_activation_max = activation_max;                        \\",
      "201:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
      "202:                                             GetTensorData<int8_t>(input),     \\",
      "203:                                             GetTensorShape(output),           \\",
      "204:                                             GetTensorData<int8_t>(output)))",
      "211:   return kTfLiteOk;",
      "215: TfLiteStatus AverageEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,",
      "216:                                        TfLitePoolParams* params, OpData* data,",
      "217:                                        const TfLiteTensor* input,",
      "218:                                        TfLiteTensor* output) {",
      "223: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
      "224:   tflite::PoolParams op_params;                                               \\",
      "225:   op_params.stride_height = params->stride_height;                            \\",
      "226:   op_params.stride_width = params->stride_width;                              \\",
      "227:   op_params.filter_height = params->filter_height;                            \\",
      "228:   op_params.filter_width = params->filter_width;                              \\",
      "229:   op_params.padding_values.height = data->padding.height;                     \\",
      "230:   op_params.padding_values.width = data->padding.width;                       \\",
      "231:   op_params.quantized_activation_min = activation_min;                        \\",
      "232:   op_params.quantized_activation_max = activation_max;                        \\",
      "233:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
      "234:                                             GetTensorData<int16_t>(input),    \\",
      "235:                                             GetTensorShape(output),           \\",
      "236:                                             GetTensorData<int16_t>(output)))",
      "239:   return kTfLiteOk;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "380:   TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));",
      "381:   switch (input->type) {  // Already know in/out types are same.",
      "382:     case kTfLiteFloat32:",
      "385:     case kTfLiteUInt8:",
      "389:     case kTfLiteInt8:",
      "393:     case kTfLiteInt16:",
      "397:     default:",
      "398:       TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",",
      "399:                          TfLiteTypeGetName(input->type));",
      "",
      "[Removed Lines]",
      "383:       AverageEvalFloat<kernel_type>(context, node, params, data, input, output);",
      "384:       break;",
      "386:       AverageEvalQuantizedUint8<kernel_type>(context, node, params, data, input,",
      "387:                                              output);",
      "388:       break;",
      "390:       AverageEvalQuantizedInt8<kernel_type>(context, node, params, data, input,",
      "391:                                             output);",
      "392:       break;",
      "394:       AverageEvalQuantizedInt16<kernel_type>(context, node, params, data, input,",
      "395:                                              output);",
      "396:       break;",
      "",
      "[Added Lines]",
      "392:       return AverageEvalFloat<kernel_type>(context, node, params, data, input,",
      "393:                                            output);",
      "395:       return AverageEvalQuantizedUint8<kernel_type>(context, node, params, data,",
      "396:                                                     input, output);",
      "398:       return AverageEvalQuantizedInt8<kernel_type>(context, node, params, data,",
      "399:                                                    input, output);",
      "401:       return AverageEvalQuantizedInt16<kernel_type>(context, node, params, data,",
      "402:                                                     input, output);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d29c99439d2c1498dabaae4fcaa505890bf2351b",
      "candidate_info": {
        "commit_hash": "d29c99439d2c1498dabaae4fcaa505890bf2351b",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/d29c99439d2c1498dabaae4fcaa505890bf2351b",
        "files": [
          "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h"
        ],
        "message": "Neon acceleration applied on kernel module.\n\nPiperOrigin-RevId: 347588687\nChange-Id: Ieda280ecf7cb872feea481140856485fde0a9ca7",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h"
          ],
          "candidate": [
            "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h": [
          "File: tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h -> tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"tensorflow/lite/kernels/internal/optimized/im2col_utils.h\"",
          "27: #include \"tensorflow/lite/kernels/internal/optimized/neon_check.h\"",
          "28: #include \"tensorflow/lite/kernels/internal/quantization_util.h\"",
          "30: #include \"tensorflow/lite/kernels/internal/reference/reference_ops.h\"",
          "31: #include \"tensorflow/lite/kernels/internal/strided_slice_logic.h\"",
          "32: #include \"tensorflow/lite/kernels/internal/tensor_utils.h\"",
          "",
          "[Removed Lines]",
          "29: #include \"tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145:   }",
          "146: }",
          "",
          "[Removed Lines]",
          "148: inline void AveragePool16(const PoolParams& params,",
          "149:                           const RuntimeShape& input_shape,",
          "150:                           const int8* input_data,",
          "151:                           const RuntimeShape& output_shape, int8* output_data) {",
          "152:   ruy::profiler::ScopeLabel label(\"AveragePool/8bitWith16bitAccumulator\");",
          "",
          "[Added Lines]",
          "147: inline void AveragePool(const PoolParams& params,",
          "148:                         const RuntimeShape& input_shape, const int8* input_data,",
          "149:                         const RuntimeShape& output_shape, int8* output_data) {",
          "150:   ruy::profiler::ScopeLabel label(\"AveragePool/8bitWith32bitAccumulator\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "171:   const int stride_height = params.stride_height;",
          "172:   const int stride_width = params.stride_width;",
          "175:   for (int batch = 0; batch < batches; ++batch) {",
          "",
          "[Removed Lines]",
          "174:   int16 acc[kPoolingAccTrancheSize];",
          "",
          "[Added Lines]",
          "172:   int32 acc[kPoolingAccTrancheSize];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "207:               int channel = 0;",
          "208: #ifdef USE_NEON",
          "209:               for (; channel <= tranche_depth - 16; channel += 16) {",
          "214:                 int8x16_t input_reg = vld1q_s8(input_channel_ptr);",
          "215:                 input_channel_ptr += 16;",
          "220:                 }",
          "221:               }",
          "222:               for (; channel <= tranche_depth - 8; channel += 8) {",
          "225:                 input_channel_ptr += 8;",
          "228:               }",
          "229: #endif",
          "230:               for (; channel < tranche_depth; ++channel) {",
          "",
          "[Removed Lines]",
          "210:                 int16x8_t acc_reg[2];",
          "211:                 for (int i = 0; i < 2; i++) {",
          "212:                   acc_reg[i] = vld1q_s16(acc + channel + 8 * i);",
          "213:                 }",
          "216:                 acc_reg[0] = vaddw_s8(acc_reg[0], vget_low_s8(input_reg));",
          "217:                 acc_reg[1] = vaddw_s8(acc_reg[1], vget_high_s8(input_reg));",
          "218:                 for (int i = 0; i < 2; i++) {",
          "219:                   vst1q_s16(acc + channel + 8 * i, acc_reg[i]);",
          "223:                 int16x8_t acc_reg = vld1q_s16(acc + channel);",
          "224:                 int8x8_t input_reg = vld1_s8(input_channel_ptr);",
          "226:                 acc_reg = vaddw_s8(acc_reg, input_reg);",
          "227:                 vst1q_s16(acc + channel, acc_reg);",
          "",
          "[Added Lines]",
          "208:                 int16x4_t acc_reg[4];",
          "211:                 acc_reg[0] = vget_low_s16(vmovl_s8(vget_low_s8(input_reg)));",
          "212:                 acc_reg[1] = vget_high_s16(vmovl_s8(vget_low_s8(input_reg)));",
          "213:                 acc_reg[2] = vget_low_s16(vmovl_s8(vget_high_s8(input_reg)));",
          "214:                 acc_reg[3] = vget_high_s16(vmovl_s8(vget_high_s8(input_reg)));",
          "215:                 for (int i = 0; i < 4; i++) {",
          "216:                   vst1q_s32(",
          "217:                       acc + channel + 4 * i,",
          "218:                       vaddw_s16(vld1q_s32(acc + channel + 4 * i), acc_reg[i]));",
          "222:                 int16x4_t acc_reg[2];",
          "223:                 int16x8_t input_reg = vmovl_s8(vld1_s8(input_channel_ptr));",
          "225:                 acc_reg[0] = vget_low_s16(input_reg);",
          "226:                 acc_reg[1] = vget_high_s16(input_reg);",
          "227:                 for (int i = 0; i < 2; i++) {",
          "228:                   vst1q_s32(",
          "229:                       acc + channel + 4 * i,",
          "230:                       vaddw_s16(vld1q_s32(acc + channel + 4 * i), acc_reg[i]));",
          "231:                 }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "237:                                                   out_x, depth_base);",
          "238:           int channel = 0;",
          "239: #ifdef USE_NEON",
          "258:           for (; channel <= tranche_depth - 8; channel += 8) {",
          "259:             int16 buf[8];",
          "260:             for (int i = 0; i < 8; i++) {",
          "",
          "[Removed Lines]",
          "240: #define AVGPOOL_DIVIDING_BY(FILTER_COUNT)                                    \\",
          "241:   if (filter_count == FILTER_COUNT) {                                        \\",
          "242:     for (; channel <= tranche_depth - 8; channel += 8) {                     \\",
          "243:       int16 buf[8];                                                          \\",
          "244:       for (int i = 0; i < 8; i++) {                                          \\",
          "245:         buf[i] = acc[channel + i] > 0                                        \\",
          "246:                      ? (acc[channel + i] + FILTER_COUNT / 2) / FILTER_COUNT  \\",
          "247:                      : (acc[channel + i] - FILTER_COUNT / 2) / FILTER_COUNT; \\",
          "248:       }                                                                      \\",
          "249:       int8x8_t buf8 = vqmovn_s16(vld1q_s16(buf));                            \\",
          "250:       buf8 = vmin_s8(buf8, vdup_n_s8(params.quantized_activation_max));      \\",
          "251:       buf8 = vmax_s8(buf8, vdup_n_s8(params.quantized_activation_min));      \\",
          "252:       vst1_s8(output_ptr + channel, buf8);                                   \\",
          "253:     }                                                                        \\",
          "254:   }",
          "255:           AVGPOOL_DIVIDING_BY(9)",
          "256:           AVGPOOL_DIVIDING_BY(15)",
          "257: #undef AVGPOOL_DIVIDING_BY",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "283:   }",
          "284: }",
          "297: }  // namespace optimized_integer_ops",
          "298: }  // namespace tflite",
          "",
          "[Removed Lines]",
          "286: inline void AveragePool(const PoolParams& params,",
          "287:                         const RuntimeShape& input_shape, const int8* input_data,",
          "288:                         const RuntimeShape& output_shape, int8* output_data) {",
          "289:   if (params.filter_height * params.filter_width > 16 * 16) {",
          "290:     reference_integer_ops::AveragePool(params, input_shape, input_data,",
          "291:                                        output_shape, output_data);",
          "292:   } else {",
          "293:     AveragePool16(params, input_shape, input_data, output_shape, output_data);",
          "294:   }",
          "295: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c576f2cbc69c3d1aee6493b9cbbd6db5631f35cd",
      "candidate_info": {
        "commit_hash": "c576f2cbc69c3d1aee6493b9cbbd6db5631f35cd",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c576f2cbc69c3d1aee6493b9cbbd6db5631f35cd",
        "files": [
          "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
          "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
          "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
          "tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
          "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
          "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
          "tensorflow/lite/kernels/internal/reference/pooling.h",
          "tensorflow/lite/kernels/pooling.cc"
        ],
        "message": "Prevent a division by 0 in average ops.\n\nPiperOrigin-RevId: 385184660\nChange-Id: I7affd4554f9b336fca29ac68f633232c094d0bd3",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
          "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
          "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
          "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
          "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
          "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
          "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h",
          "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
            "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
            "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
            "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
            "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
            "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
            "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h",
            "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
            "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
            "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
            "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
            "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
            "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
            "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h",
            "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc": [
          "File: tensorflow/lite/kernels/internal/averagepool_quantized_test.cc -> tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   std::vector<int8> optimized_averagePool_output(buffer_size);",
          "41:   std::vector<int8> reference_averagePool_output(buffer_size);",
          "50:   for (int i = 0; i < buffer_size; i++) {",
          "51:     EXPECT_TRUE(reference_averagePool_output[i] ==",
          "",
          "[Removed Lines]",
          "43:   reference_integer_ops::AveragePool(params, input_shape, input_data,",
          "44:                                      output_shape,",
          "45:                                      reference_averagePool_output.data());",
          "46:   optimized_integer_ops::AveragePool(params, input_shape, input_data,",
          "47:                                      output_shape,",
          "48:                                      optimized_averagePool_output.data());",
          "",
          "[Added Lines]",
          "43:   bool reference_success = reference_integer_ops::AveragePool(",
          "44:       params, input_shape, input_data, output_shape,",
          "45:       reference_averagePool_output.data());",
          "46:   bool optimized_success = optimized_integer_ops::AveragePool(",
          "47:       params, input_shape, input_data, output_shape,",
          "48:       optimized_averagePool_output.data());",
          "49:   EXPECT_TRUE(reference_success);",
          "50:   EXPECT_TRUE(optimized_success);",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h": [
          "File: tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h -> tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   }",
          "145: }",
          "148:                         const RuntimeShape& input_shape, const int8* input_data,",
          "149:                         const RuntimeShape& output_shape, int8* output_data) {",
          "150:   ruy::profiler::ScopeLabel label(\"AveragePool/8bitWith32bitAccumulator\");",
          "",
          "[Removed Lines]",
          "147: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "147: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:               std::min(params.filter_height, input_height - in_y_origin);",
          "193:           const int filter_count =",
          "194:               (filter_x_end - filter_x_start) * (filter_y_end - filter_y_start);",
          "195:           memset(acc, 0, tranche_depth * sizeof(acc[0]));",
          "196:           const int8* input_ptr =",
          "197:               input_data + depth_base +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "267:       }",
          "268:     }",
          "269:   }",
          "270: }",
          "272: }  // namespace optimized_integer_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:   return true;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h": [
          "File: tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h -> tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3761:                output_data, output_dims);",
          "3762: }",
          "3765:                         int stride_width, int stride_height, int pad_width,",
          "3766:                         int pad_height, int kwidth, int kheight,",
          "3767:                         float output_activation_min,",
          "",
          "[Removed Lines]",
          "3764: inline void AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "3764: inline bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3776:   params.padding_values.width = pad_width;",
          "3777:   params.float_activation_min = output_activation_min;",
          "3778:   params.float_activation_max = output_activation_max;",
          "3781: }",
          "3784: template <FusedActivationFunctionType Ac>",
          "3786:                  int stride_width, int stride_height, int pad_width,",
          "3787:                  int pad_height, int kwidth, int kheight, float* output_data,",
          "3788:                  const Dims<4>& output_dims) {",
          "3789:   float output_activation_min, output_activation_max;",
          "3790:   GetActivationMinMax(Ac, &output_activation_min, &output_activation_max);",
          "3795: }",
          "3798: template <FusedActivationFunctionType Ac>",
          "3800:                  int pad_width, int pad_height, int filter_width,",
          "3801:                  int filter_height, float* output_data,",
          "3802:                  const Dims<4>& output_dims) {",
          "3805: }",
          "3808:                         int stride_width, int stride_height, int pad_width,",
          "3809:                         int pad_height, int filter_width, int filter_height,",
          "3810:                         int32 output_activation_min,",
          "",
          "[Removed Lines]",
          "3779:   AveragePool(params, DimsToShape(input_dims), input_data,",
          "3780:               DimsToShape(output_dims), output_data);",
          "3785: void AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "3792:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
          "3793:               pad_height, kwidth, kheight, output_activation_min,",
          "3794:               output_activation_max, output_data, output_dims);",
          "3799: void AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
          "3803:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
          "3804:                   filter_width, filter_height, output_data, output_dims);",
          "3807: inline void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "3779:   return AveragePool(params, DimsToShape(input_dims), input_data,",
          "3780:                      DimsToShape(output_dims), output_data);",
          "3785: bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "3792:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
          "3793:                      pad_width, pad_height, kwidth, kheight,",
          "3794:                      output_activation_min, output_activation_max, output_data,",
          "3795:                      output_dims);",
          "3800: bool AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
          "3804:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
          "3805:                          pad_height, filter_width, filter_height, output_data,",
          "3806:                          output_dims);",
          "3809: inline bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3819:   params.padding_values.width = pad_width;",
          "3820:   params.quantized_activation_min = output_activation_min;",
          "3821:   params.quantized_activation_max = output_activation_max;",
          "3824: }",
          "3827: template <FusedActivationFunctionType Ac>",
          "3829:                  int stride_width, int stride_height, int pad_width,",
          "3830:                  int pad_height, int filter_width, int filter_height,",
          "3831:                  int32 output_activation_min, int32 output_activation_max,",
          "",
          "[Removed Lines]",
          "3822:   AveragePool(params, DimsToShape(input_dims), input_data,",
          "3823:               DimsToShape(output_dims), output_data);",
          "3828: void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "3824:   return AveragePool(params, DimsToShape(input_dims), input_data,",
          "3825:                      DimsToShape(output_dims), output_data);",
          "3830: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3839:     TFLITE_DCHECK_EQ(output_activation_min, 0);",
          "3840:     TFLITE_DCHECK_EQ(output_activation_max, 255);",
          "3841:   }",
          "3845: }",
          "3848: template <FusedActivationFunctionType Ac>",
          "3850:                  int pad_width, int pad_height, int filter_width,",
          "3851:                  int filter_height, int32 output_activation_min,",
          "3852:                  int32 output_activation_max, uint8* output_data,",
          "3853:                  const Dims<4>& output_dims) {",
          "3857: }",
          "3859: inline void MaxPool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "[Removed Lines]",
          "3842:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
          "3843:               pad_height, filter_width, filter_height, output_activation_min,",
          "3844:               output_activation_max, output_data, output_dims);",
          "3849: void AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
          "3854:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
          "3855:                   filter_width, filter_height, output_activation_min,",
          "3856:                   output_activation_max, output_data, output_dims);",
          "",
          "[Added Lines]",
          "3844:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
          "3845:                      pad_width, pad_height, filter_width, filter_height,",
          "3846:                      output_activation_min, output_activation_max, output_data,",
          "3847:                      output_dims);",
          "3852: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
          "3857:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
          "3858:                          pad_height, filter_width, filter_height,",
          "3859:                          output_activation_min, output_activation_max,",
          "3860:                          output_data, output_dims);",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h": [
          "File: tensorflow/lite/kernels/internal/optimized/optimized_ops.h -> tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3168:   return (b * height + h) * width + w;",
          "3169: }",
          "3172:                         const RuntimeShape& input_shape,",
          "3173:                         const float* input_data,",
          "3174:                         const RuntimeShape& output_shape, float* output_data) {",
          "",
          "[Removed Lines]",
          "3171: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "3171: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3183:   const int stride_height = params.stride_height;",
          "3184:   const int stride_width = params.stride_width;",
          "3187:   const auto in_mat = MapAsMatrixWithLastDimAsRows(input_data, input_shape);",
          "3188:   auto out_mat = MapAsMatrixWithLastDimAsRows(output_data, output_shape);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3186:   if (stride_height == 0) return false;",
          "3187:   if (stride_width == 0) return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3228:                                                   params.float_activation_min,",
          "3229:                                                   params.float_activation_max);",
          "3230:   }",
          "3231: }",
          "3234:                         const RuntimeShape& input_shape,",
          "3235:                         const uint8* input_data,",
          "3236:                         const RuntimeShape& output_shape, uint8* output_data) {",
          "",
          "[Removed Lines]",
          "3233: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "3235:   return true;",
          "3238: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3279:               std::min(params.filter_height, input_height - in_y_origin);",
          "3280:           const int filter_count =",
          "3281:               (filter_x_end - filter_x_start) * (filter_y_end - filter_y_start);",
          "3282:           memset(acc, 0, tranche_depth * sizeof(acc[0]));",
          "3283:           const uint8* input_ptr =",
          "3284:               input_data + depth_base +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3287:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3365:       }",
          "3366:     }",
          "3367:   }",
          "3368: }",
          "3370: inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3374:   return true;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h": [
          "File: tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h -> tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: namespace tflite {",
          "22: namespace reference_integer_ops {",
          "25:                         const RuntimeShape& input_shape,",
          "26:                         const int8_t* input_data,",
          "27:                         const RuntimeShape& output_shape, int8_t* output_data) {",
          "",
          "[Removed Lines]",
          "24: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "24: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:               filter_count++;",
          "67:             }",
          "68:           }",
          "70:           acc = acc > 0 ? (acc + filter_count / 2) / filter_count",
          "71:                         : (acc - filter_count / 2) / filter_count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:       }",
          "78:     }",
          "79:   }",
          "80: }",
          "82: inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:   return true;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:   }",
          "137: }",
          "140:                         const RuntimeShape& input_shape,",
          "141:                         const int16_t* input_data,",
          "142:                         const RuntimeShape& output_shape,",
          "",
          "[Removed Lines]",
          "139: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "141: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:               filter_count++;",
          "183:             }",
          "184:           }",
          "186:           acc = acc > 0 ? (acc + filter_count / 2) / filter_count",
          "187:                         : (acc - filter_count / 2) / filter_count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "193:       }",
          "194:     }",
          "195:   }",
          "196: }",
          "198: inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:   return true;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h": [
          "File: tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h -> tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1487:       output_data);",
          "1488: }",
          "1491:                         int stride_width, int stride_height, int pad_width,",
          "1492:                         int pad_height, int kwidth, int kheight,",
          "1493:                         float output_activation_min,",
          "",
          "[Removed Lines]",
          "1490: inline void AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "1490: inline bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1502:   params.padding_values.width = pad_width;",
          "1503:   params.float_activation_min = output_activation_min;",
          "1504:   params.float_activation_max = output_activation_max;",
          "1507: }",
          "",
          "[Removed Lines]",
          "1505:   AveragePool(params, DimsToShape(input_dims), input_data,",
          "1506:               DimsToShape(output_dims), output_data);",
          "",
          "[Added Lines]",
          "1505:   return AveragePool(params, DimsToShape(input_dims), input_data,",
          "1506:                      DimsToShape(output_dims), output_data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1564: template <FusedActivationFunctionType Ac>",
          "1566:                  int stride_width, int stride_height, int pad_width,",
          "1567:                  int pad_height, int kwidth, int kheight, float* output_data,",
          "1568:                  const Dims<4>& output_dims) {",
          "1569:   float output_activation_min, output_activation_max;",
          "1570:   GetActivationMinMax(Ac, &output_activation_min, &output_activation_max);",
          "1575: }",
          "1578: template <FusedActivationFunctionType Ac>",
          "1580:                  int pad_width, int pad_height, int filter_width,",
          "1581:                  int filter_height, float* output_data,",
          "1582:                  const Dims<4>& output_dims) {",
          "1585: }",
          "1588:                         int stride_width, int stride_height, int pad_width,",
          "1589:                         int pad_height, int filter_width, int filter_height,",
          "1590:                         int32 output_activation_min,",
          "",
          "[Removed Lines]",
          "1565: void AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "1572:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
          "1573:               pad_height, kwidth, kheight, output_activation_min,",
          "1574:               output_activation_max, output_data, output_dims);",
          "1579: void AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
          "1583:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
          "1584:                   filter_width, filter_height, output_data, output_dims);",
          "1587: inline void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "1565: bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "1572:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
          "1573:                      pad_width, pad_height, kwidth, kheight,",
          "1574:                      output_activation_min, output_activation_max, output_data,",
          "1575:                      output_dims);",
          "1580: bool AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
          "1584:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
          "1585:                          pad_height, filter_width, filter_height, output_data,",
          "1586:                          output_dims);",
          "1589: inline bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1599:   params.padding_values.width = pad_width;",
          "1600:   params.quantized_activation_min = output_activation_min;",
          "1601:   params.quantized_activation_max = output_activation_max;",
          "1604: }",
          "1607: template <FusedActivationFunctionType Ac>",
          "1609:                  int stride_width, int stride_height, int pad_width,",
          "1610:                  int pad_height, int filter_width, int filter_height,",
          "1611:                  int32 output_activation_min, int32 output_activation_max,",
          "",
          "[Removed Lines]",
          "1602:   AveragePool(params, DimsToShape(input_dims), input_data,",
          "1603:               DimsToShape(output_dims), output_data);",
          "1608: void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "1604:   return AveragePool(params, DimsToShape(input_dims), input_data,",
          "1605:                      DimsToShape(output_dims), output_data);",
          "1610: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1619:     TFLITE_DCHECK_EQ(output_activation_min, 0);",
          "1620:     TFLITE_DCHECK_EQ(output_activation_max, 255);",
          "1621:   }",
          "1625: }",
          "1628: template <FusedActivationFunctionType Ac>",
          "1630:                  int pad_width, int pad_height, int filter_width,",
          "1631:                  int filter_height, int32 output_activation_min,",
          "1632:                  int32 output_activation_max, uint8* output_data,",
          "1633:                  const Dims<4>& output_dims) {",
          "1637: }",
          "1639: inline void MaxPool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "[Removed Lines]",
          "1622:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
          "1623:               pad_height, filter_width, filter_height, output_activation_min,",
          "1624:               output_activation_max, output_data, output_dims);",
          "1629: void AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
          "1634:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
          "1635:                   filter_width, filter_height, output_activation_min,",
          "1636:                   output_activation_max, output_data, output_dims);",
          "",
          "[Added Lines]",
          "1624:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
          "1625:                      pad_width, pad_height, filter_width, filter_height,",
          "1626:                      output_activation_min, output_activation_max, output_data,",
          "1627:                      output_dims);",
          "1632: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
          "1637:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
          "1638:                          pad_height, filter_width, filter_height,",
          "1639:                          output_activation_min, output_activation_max,",
          "1640:                          output_data, output_dims);",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h": [
          "File: tensorflow/lite/kernels/internal/reference/pooling.h -> tensorflow/lite/kernels/internal/reference/pooling.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: namespace tflite {",
          "24: namespace reference_ops {",
          "27:                         const RuntimeShape& input_shape,",
          "28:                         const float* input_data,",
          "29:                         const RuntimeShape& output_shape, float* output_data) {",
          "",
          "[Removed Lines]",
          "26: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "26: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:               filter_count++;",
          "67:             }",
          "68:           }",
          "69:           const float average = total / filter_count;",
          "70:           output_data[Offset(output_shape, batch, out_y, out_x, channel)] =",
          "71:               ActivationFunctionWithMinMax(average, params.float_activation_min,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:       }",
          "75:     }",
          "76:   }",
          "77: }",
          "80:                         const RuntimeShape& input_shape,",
          "81:                         const uint8_t* input_data,",
          "82:                         const RuntimeShape& output_shape,",
          "",
          "[Removed Lines]",
          "79: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "78:   return true;",
          "81: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "122:               filter_count++;",
          "123:             }",
          "124:           }",
          "125:           acc = (acc + filter_count / 2) / filter_count;",
          "126:           acc = std::max(acc, params.quantized_activation_min);",
          "127:           acc = std::min(acc, params.quantized_activation_max);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131:       }",
          "132:     }",
          "133:   }",
          "134: }",
          "136: inline void L2Pool(const PoolParams& params, const RuntimeShape& input_shape,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:   return true;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc": [
          "File: tensorflow/lite/kernels/pooling.cc -> tensorflow/lite/kernels/pooling.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "117: }",
          "119: template <KernelType kernel_type>",
          "123:   float activation_min, activation_max;",
          "124:   CalculateActivationRange(params->activation, &activation_min,",
          "125:                            &activation_max);",
          "139:   if (kernel_type == kReference) {",
          "140:     TF_LITE_AVERAGE_POOL(reference_ops);",
          "141:   } else {",
          "142:     TF_LITE_AVERAGE_POOL(optimized_ops);",
          "143:   }",
          "144: #undef TF_LITE_AVERAGE_POOL",
          "145: }",
          "147: template <KernelType kernel_type>",
          "152:   int32_t activation_min;",
          "153:   int32_t activation_max;",
          "154:   (void)CalculateActivationRangeQuantized(context, params->activation, output,",
          "155:                                           &activation_min, &activation_max);",
          "169:   if (kernel_type == kReference) {",
          "170:     TF_LITE_AVERAGE_POOL(reference_ops);",
          "171:   } else {",
          "172:     TF_LITE_AVERAGE_POOL(optimized_ops);",
          "173:   }",
          "174: #undef TF_LITE_AVERAGE_POOL",
          "175: }",
          "177: template <KernelType kernel_type>",
          "181:   int32_t activation_min;",
          "182:   int32_t activation_max;",
          "184:   (void)CalculateActivationRangeQuantized(context, params->activation, output,",
          "185:                                           &activation_min, &activation_max);",
          "199:   if (kernel_type == kReference) {",
          "200:     TF_LITE_AVERAGE_POOL(reference_integer_ops);",
          "201:   } else {",
          "202:     TF_LITE_AVERAGE_POOL(optimized_integer_ops);",
          "203:   }",
          "204: #undef TF_LITE_AVERAGE_POOL",
          "205: }",
          "207: template <KernelType kernel_type>",
          "212:   int32_t activation_min;",
          "213:   int32_t activation_max;",
          "214:   CalculateActivationRangeQuantized(context, params->activation, output,",
          "215:                                     &activation_min, &activation_max);",
          "229:   TF_LITE_AVERAGE_POOL(reference_integer_ops);",
          "230: #undef TF_LITE_AVERAGE_POOL",
          "231: }",
          "233: template <KernelType kernel_type>",
          "",
          "[Removed Lines]",
          "120: void AverageEvalFloat(TfLiteContext* context, TfLiteNode* node,",
          "121:                       TfLitePoolParams* params, OpData* data,",
          "122:                       const TfLiteTensor* input, TfLiteTensor* output) {",
          "126: #define TF_LITE_AVERAGE_POOL(type)                                       \\",
          "127:   tflite::PoolParams op_params;                                          \\",
          "128:   op_params.stride_height = params->stride_height;                       \\",
          "129:   op_params.stride_width = params->stride_width;                         \\",
          "130:   op_params.filter_height = params->filter_height;                       \\",
          "131:   op_params.filter_width = params->filter_width;                         \\",
          "132:   op_params.padding_values.height = data->padding.height;                \\",
          "133:   op_params.padding_values.width = data->padding.width;                  \\",
          "134:   op_params.float_activation_min = activation_min;                       \\",
          "135:   op_params.float_activation_max = activation_max;                       \\",
          "136:   type::AveragePool(op_params, GetTensorShape(input),                    \\",
          "137:                     GetTensorData<float>(input), GetTensorShape(output), \\",
          "138:                     GetTensorData<float>(output))",
          "148: void AverageEvalQuantizedUint8(TfLiteContext* context, TfLiteNode* node,",
          "149:                                TfLitePoolParams* params, OpData* data,",
          "150:                                const TfLiteTensor* input,",
          "151:                                TfLiteTensor* output) {",
          "156: #define TF_LITE_AVERAGE_POOL(type)                                         \\",
          "157:   tflite::PoolParams op_params;                                            \\",
          "158:   op_params.stride_height = params->stride_height;                         \\",
          "159:   op_params.stride_width = params->stride_width;                           \\",
          "160:   op_params.filter_height = params->filter_height;                         \\",
          "161:   op_params.filter_width = params->filter_width;                           \\",
          "162:   op_params.padding_values.height = data->padding.height;                  \\",
          "163:   op_params.padding_values.width = data->padding.width;                    \\",
          "164:   op_params.quantized_activation_min = activation_min;                     \\",
          "165:   op_params.quantized_activation_max = activation_max;                     \\",
          "166:   type::AveragePool(op_params, GetTensorShape(input),                      \\",
          "167:                     GetTensorData<uint8_t>(input), GetTensorShape(output), \\",
          "168:                     GetTensorData<uint8_t>(output))",
          "178: void AverageEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,",
          "179:                               TfLitePoolParams* params, OpData* data,",
          "180:                               const TfLiteTensor* input, TfLiteTensor* output) {",
          "186: #define TF_LITE_AVERAGE_POOL(type)                                        \\",
          "187:   tflite::PoolParams op_params;                                           \\",
          "188:   op_params.stride_height = params->stride_height;                        \\",
          "189:   op_params.stride_width = params->stride_width;                          \\",
          "190:   op_params.filter_height = params->filter_height;                        \\",
          "191:   op_params.filter_width = params->filter_width;                          \\",
          "192:   op_params.padding_values.height = data->padding.height;                 \\",
          "193:   op_params.padding_values.width = data->padding.width;                   \\",
          "194:   op_params.quantized_activation_min = activation_min;                    \\",
          "195:   op_params.quantized_activation_max = activation_max;                    \\",
          "196:   type::AveragePool(op_params, GetTensorShape(input),                     \\",
          "197:                     GetTensorData<int8_t>(input), GetTensorShape(output), \\",
          "198:                     GetTensorData<int8_t>(output))",
          "208: void AverageEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,",
          "209:                                TfLitePoolParams* params, OpData* data,",
          "210:                                const TfLiteTensor* input,",
          "211:                                TfLiteTensor* output) {",
          "216: #define TF_LITE_AVERAGE_POOL(type)                                         \\",
          "217:   tflite::PoolParams op_params;                                            \\",
          "218:   op_params.stride_height = params->stride_height;                         \\",
          "219:   op_params.stride_width = params->stride_width;                           \\",
          "220:   op_params.filter_height = params->filter_height;                         \\",
          "221:   op_params.filter_width = params->filter_width;                           \\",
          "222:   op_params.padding_values.height = data->padding.height;                  \\",
          "223:   op_params.padding_values.width = data->padding.width;                    \\",
          "224:   op_params.quantized_activation_min = activation_min;                     \\",
          "225:   op_params.quantized_activation_max = activation_max;                     \\",
          "226:   type::AveragePool(op_params, GetTensorShape(input),                      \\",
          "227:                     GetTensorData<int16_t>(input), GetTensorShape(output), \\",
          "228:                     GetTensorData<int16_t>(output))",
          "",
          "[Added Lines]",
          "120: TfLiteStatus AverageEvalFloat(TfLiteContext* context, TfLiteNode* node,",
          "121:                               TfLitePoolParams* params, OpData* data,",
          "122:                               const TfLiteTensor* input, TfLiteTensor* output) {",
          "126: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
          "127:   tflite::PoolParams op_params;                                               \\",
          "128:   op_params.stride_height = params->stride_height;                            \\",
          "129:   op_params.stride_width = params->stride_width;                              \\",
          "130:   op_params.filter_height = params->filter_height;                            \\",
          "131:   op_params.filter_width = params->filter_width;                              \\",
          "132:   op_params.padding_values.height = data->padding.height;                     \\",
          "133:   op_params.padding_values.width = data->padding.width;                       \\",
          "134:   op_params.float_activation_min = activation_min;                            \\",
          "135:   op_params.float_activation_max = activation_max;                            \\",
          "136:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
          "137:                                             GetTensorData<float>(input),      \\",
          "138:                                             GetTensorShape(output),           \\",
          "139:                                             GetTensorData<float>(output)))",
          "146:   return kTfLiteOk;",
          "150: TfLiteStatus AverageEvalQuantizedUint8(TfLiteContext* context, TfLiteNode* node,",
          "151:                                        TfLitePoolParams* params, OpData* data,",
          "152:                                        const TfLiteTensor* input,",
          "153:                                        TfLiteTensor* output) {",
          "158: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
          "159:   tflite::PoolParams op_params;                                               \\",
          "160:   op_params.stride_height = params->stride_height;                            \\",
          "161:   op_params.stride_width = params->stride_width;                              \\",
          "162:   op_params.filter_height = params->filter_height;                            \\",
          "163:   op_params.filter_width = params->filter_width;                              \\",
          "164:   op_params.padding_values.height = data->padding.height;                     \\",
          "165:   op_params.padding_values.width = data->padding.width;                       \\",
          "166:   op_params.quantized_activation_min = activation_min;                        \\",
          "167:   op_params.quantized_activation_max = activation_max;                        \\",
          "168:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
          "169:                                             GetTensorData<uint8_t>(input),    \\",
          "170:                                             GetTensorShape(output),           \\",
          "171:                                             GetTensorData<uint8_t>(output)))",
          "178:   return kTfLiteOk;",
          "182: TfLiteStatus AverageEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,",
          "183:                                       TfLitePoolParams* params, OpData* data,",
          "184:                                       const TfLiteTensor* input,",
          "185:                                       TfLiteTensor* output) {",
          "191: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
          "192:   tflite::PoolParams op_params;                                               \\",
          "193:   op_params.stride_height = params->stride_height;                            \\",
          "194:   op_params.stride_width = params->stride_width;                              \\",
          "195:   op_params.filter_height = params->filter_height;                            \\",
          "196:   op_params.filter_width = params->filter_width;                              \\",
          "197:   op_params.padding_values.height = data->padding.height;                     \\",
          "198:   op_params.padding_values.width = data->padding.width;                       \\",
          "199:   op_params.quantized_activation_min = activation_min;                        \\",
          "200:   op_params.quantized_activation_max = activation_max;                        \\",
          "201:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
          "202:                                             GetTensorData<int8_t>(input),     \\",
          "203:                                             GetTensorShape(output),           \\",
          "204:                                             GetTensorData<int8_t>(output)))",
          "211:   return kTfLiteOk;",
          "215: TfLiteStatus AverageEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,",
          "216:                                        TfLitePoolParams* params, OpData* data,",
          "217:                                        const TfLiteTensor* input,",
          "218:                                        TfLiteTensor* output) {",
          "223: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
          "224:   tflite::PoolParams op_params;                                               \\",
          "225:   op_params.stride_height = params->stride_height;                            \\",
          "226:   op_params.stride_width = params->stride_width;                              \\",
          "227:   op_params.filter_height = params->filter_height;                            \\",
          "228:   op_params.filter_width = params->filter_width;                              \\",
          "229:   op_params.padding_values.height = data->padding.height;                     \\",
          "230:   op_params.padding_values.width = data->padding.width;                       \\",
          "231:   op_params.quantized_activation_min = activation_min;                        \\",
          "232:   op_params.quantized_activation_max = activation_max;                        \\",
          "233:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
          "234:                                             GetTensorData<int16_t>(input),    \\",
          "235:                                             GetTensorShape(output),           \\",
          "236:                                             GetTensorData<int16_t>(output)))",
          "239:   return kTfLiteOk;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "380:   TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));",
          "381:   switch (input->type) {  // Already know in/out types are same.",
          "382:     case kTfLiteFloat32:",
          "385:     case kTfLiteUInt8:",
          "389:     case kTfLiteInt8:",
          "393:     case kTfLiteInt16:",
          "397:     default:",
          "398:       TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",",
          "399:                          TfLiteTypeGetName(input->type));",
          "",
          "[Removed Lines]",
          "383:       AverageEvalFloat<kernel_type>(context, node, params, data, input, output);",
          "384:       break;",
          "386:       AverageEvalQuantizedUint8<kernel_type>(context, node, params, data, input,",
          "387:                                              output);",
          "388:       break;",
          "390:       AverageEvalQuantizedInt8<kernel_type>(context, node, params, data, input,",
          "391:                                             output);",
          "392:       break;",
          "394:       AverageEvalQuantizedInt16<kernel_type>(context, node, params, data, input,",
          "395:                                              output);",
          "396:       break;",
          "",
          "[Added Lines]",
          "392:       return AverageEvalFloat<kernel_type>(context, node, params, data, input,",
          "393:                                            output);",
          "395:       return AverageEvalQuantizedUint8<kernel_type>(context, node, params, data,",
          "396:                                                     input, output);",
          "398:       return AverageEvalQuantizedInt8<kernel_type>(context, node, params, data,",
          "399:                                                    input, output);",
          "401:       return AverageEvalQuantizedInt16<kernel_type>(context, node, params, data,",
          "402:                                                     input, output);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "04be3e5d617ae46e5d9ec27396419d5916b81d2d",
      "candidate_info": {
        "commit_hash": "04be3e5d617ae46e5d9ec27396419d5916b81d2d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/04be3e5d617ae46e5d9ec27396419d5916b81d2d",
        "files": [
          "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
          "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
          "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
          "tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
          "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
          "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
          "tensorflow/lite/kernels/internal/reference/pooling.h",
          "tensorflow/lite/kernels/pooling.cc"
        ],
        "message": "Prevent a division by 0 in average ops.\n\nPiperOrigin-RevId: 385184660\nChange-Id: I7affd4554f9b336fca29ac68f633232c094d0bd3",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
          "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
          "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
          "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
          "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
          "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
          "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h",
          "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
            "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
            "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
            "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
            "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
            "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
            "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h",
            "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
            "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
            "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
            "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
            "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
            "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
            "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h",
            "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc": [
          "File: tensorflow/lite/kernels/internal/averagepool_quantized_test.cc -> tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   std::vector<int8> optimized_averagePool_output(buffer_size);",
          "41:   std::vector<int8> reference_averagePool_output(buffer_size);",
          "50:   for (int i = 0; i < buffer_size; i++) {",
          "51:     EXPECT_TRUE(reference_averagePool_output[i] ==",
          "",
          "[Removed Lines]",
          "43:   reference_integer_ops::AveragePool(params, input_shape, input_data,",
          "44:                                      output_shape,",
          "45:                                      reference_averagePool_output.data());",
          "46:   optimized_integer_ops::AveragePool(params, input_shape, input_data,",
          "47:                                      output_shape,",
          "48:                                      optimized_averagePool_output.data());",
          "",
          "[Added Lines]",
          "43:   bool reference_success = reference_integer_ops::AveragePool(",
          "44:       params, input_shape, input_data, output_shape,",
          "45:       reference_averagePool_output.data());",
          "46:   bool optimized_success = optimized_integer_ops::AveragePool(",
          "47:       params, input_shape, input_data, output_shape,",
          "48:       optimized_averagePool_output.data());",
          "49:   EXPECT_TRUE(reference_success);",
          "50:   EXPECT_TRUE(optimized_success);",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h": [
          "File: tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h -> tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:   }",
          "145: }",
          "148:                         const RuntimeShape& input_shape, const int8* input_data,",
          "149:                         const RuntimeShape& output_shape, int8* output_data) {",
          "150:   ruy::profiler::ScopeLabel label(\"AveragePool/8bitWith32bitAccumulator\");",
          "",
          "[Removed Lines]",
          "147: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "147: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "192:               std::min(params.filter_height, input_height - in_y_origin);",
          "193:           const int filter_count =",
          "194:               (filter_x_end - filter_x_start) * (filter_y_end - filter_y_start);",
          "195:           memset(acc, 0, tranche_depth * sizeof(acc[0]));",
          "196:           const int8* input_ptr =",
          "197:               input_data + depth_base +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "267:       }",
          "268:     }",
          "269:   }",
          "270: }",
          "272: }  // namespace optimized_integer_ops",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "271:   return true;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h": [
          "File: tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h -> tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3761:                output_data, output_dims);",
          "3762: }",
          "3765:                         int stride_width, int stride_height, int pad_width,",
          "3766:                         int pad_height, int kwidth, int kheight,",
          "3767:                         float output_activation_min,",
          "",
          "[Removed Lines]",
          "3764: inline void AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "3764: inline bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3776:   params.padding_values.width = pad_width;",
          "3777:   params.float_activation_min = output_activation_min;",
          "3778:   params.float_activation_max = output_activation_max;",
          "3781: }",
          "3784: template <FusedActivationFunctionType Ac>",
          "3786:                  int stride_width, int stride_height, int pad_width,",
          "3787:                  int pad_height, int kwidth, int kheight, float* output_data,",
          "3788:                  const Dims<4>& output_dims) {",
          "3789:   float output_activation_min, output_activation_max;",
          "3790:   GetActivationMinMax(Ac, &output_activation_min, &output_activation_max);",
          "3795: }",
          "3798: template <FusedActivationFunctionType Ac>",
          "3800:                  int pad_width, int pad_height, int filter_width,",
          "3801:                  int filter_height, float* output_data,",
          "3802:                  const Dims<4>& output_dims) {",
          "3805: }",
          "3808:                         int stride_width, int stride_height, int pad_width,",
          "3809:                         int pad_height, int filter_width, int filter_height,",
          "3810:                         int32 output_activation_min,",
          "",
          "[Removed Lines]",
          "3779:   AveragePool(params, DimsToShape(input_dims), input_data,",
          "3780:               DimsToShape(output_dims), output_data);",
          "3785: void AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "3792:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
          "3793:               pad_height, kwidth, kheight, output_activation_min,",
          "3794:               output_activation_max, output_data, output_dims);",
          "3799: void AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
          "3803:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
          "3804:                   filter_width, filter_height, output_data, output_dims);",
          "3807: inline void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "3779:   return AveragePool(params, DimsToShape(input_dims), input_data,",
          "3780:                      DimsToShape(output_dims), output_data);",
          "3785: bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "3792:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
          "3793:                      pad_width, pad_height, kwidth, kheight,",
          "3794:                      output_activation_min, output_activation_max, output_data,",
          "3795:                      output_dims);",
          "3800: bool AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
          "3804:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
          "3805:                          pad_height, filter_width, filter_height, output_data,",
          "3806:                          output_dims);",
          "3809: inline bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3819:   params.padding_values.width = pad_width;",
          "3820:   params.quantized_activation_min = output_activation_min;",
          "3821:   params.quantized_activation_max = output_activation_max;",
          "3824: }",
          "3827: template <FusedActivationFunctionType Ac>",
          "3829:                  int stride_width, int stride_height, int pad_width,",
          "3830:                  int pad_height, int filter_width, int filter_height,",
          "3831:                  int32 output_activation_min, int32 output_activation_max,",
          "",
          "[Removed Lines]",
          "3822:   AveragePool(params, DimsToShape(input_dims), input_data,",
          "3823:               DimsToShape(output_dims), output_data);",
          "3828: void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "3824:   return AveragePool(params, DimsToShape(input_dims), input_data,",
          "3825:                      DimsToShape(output_dims), output_data);",
          "3830: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3839:     TFLITE_DCHECK_EQ(output_activation_min, 0);",
          "3840:     TFLITE_DCHECK_EQ(output_activation_max, 255);",
          "3841:   }",
          "3845: }",
          "3848: template <FusedActivationFunctionType Ac>",
          "3850:                  int pad_width, int pad_height, int filter_width,",
          "3851:                  int filter_height, int32 output_activation_min,",
          "3852:                  int32 output_activation_max, uint8* output_data,",
          "3853:                  const Dims<4>& output_dims) {",
          "3857: }",
          "3859: inline void MaxPool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "[Removed Lines]",
          "3842:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
          "3843:               pad_height, filter_width, filter_height, output_activation_min,",
          "3844:               output_activation_max, output_data, output_dims);",
          "3849: void AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
          "3854:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
          "3855:                   filter_width, filter_height, output_activation_min,",
          "3856:                   output_activation_max, output_data, output_dims);",
          "",
          "[Added Lines]",
          "3844:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
          "3845:                      pad_width, pad_height, filter_width, filter_height,",
          "3846:                      output_activation_min, output_activation_max, output_data,",
          "3847:                      output_dims);",
          "3852: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
          "3857:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
          "3858:                          pad_height, filter_width, filter_height,",
          "3859:                          output_activation_min, output_activation_max,",
          "3860:                          output_data, output_dims);",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h": [
          "File: tensorflow/lite/kernels/internal/optimized/optimized_ops.h -> tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3172:   return (b * height + h) * width + w;",
          "3173: }",
          "3176:                         const RuntimeShape& input_shape,",
          "3177:                         const float* input_data,",
          "3178:                         const RuntimeShape& output_shape, float* output_data) {",
          "",
          "[Removed Lines]",
          "3175: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "3175: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3187:   const int stride_height = params.stride_height;",
          "3188:   const int stride_width = params.stride_width;",
          "3191:   const auto in_mat = MapAsMatrixWithLastDimAsRows(input_data, input_shape);",
          "3192:   auto out_mat = MapAsMatrixWithLastDimAsRows(output_data, output_shape);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3190:   if (stride_height == 0) return false;",
          "3191:   if (stride_width == 0) return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3232:                                                   params.float_activation_min,",
          "3233:                                                   params.float_activation_max);",
          "3234:   }",
          "3235: }",
          "3238:                         const RuntimeShape& input_shape,",
          "3239:                         const uint8* input_data,",
          "3240:                         const RuntimeShape& output_shape, uint8* output_data) {",
          "",
          "[Removed Lines]",
          "3237: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "3239:   return true;",
          "3242: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3283:               std::min(params.filter_height, input_height - in_y_origin);",
          "3284:           const int filter_count =",
          "3285:               (filter_x_end - filter_x_start) * (filter_y_end - filter_y_start);",
          "3286:           memset(acc, 0, tranche_depth * sizeof(acc[0]));",
          "3287:           const uint8* input_ptr =",
          "3288:               input_data + depth_base +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3291:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3369:       }",
          "3370:     }",
          "3371:   }",
          "3372: }",
          "3374: inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3378:   return true;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h": [
          "File: tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h -> tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: namespace tflite {",
          "22: namespace reference_integer_ops {",
          "25:                         const RuntimeShape& input_shape,",
          "26:                         const int8_t* input_data,",
          "27:                         const RuntimeShape& output_shape, int8_t* output_data) {",
          "",
          "[Removed Lines]",
          "24: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "24: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:               filter_count++;",
          "67:             }",
          "68:           }",
          "70:           acc = acc > 0 ? (acc + filter_count / 2) / filter_count",
          "71:                         : (acc - filter_count / 2) / filter_count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:       }",
          "78:     }",
          "79:   }",
          "80: }",
          "82: inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:   return true;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:   }",
          "137: }",
          "140:                         const RuntimeShape& input_shape,",
          "141:                         const int16_t* input_data,",
          "142:                         const RuntimeShape& output_shape,",
          "",
          "[Removed Lines]",
          "139: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "141: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:               filter_count++;",
          "183:             }",
          "184:           }",
          "186:           acc = acc > 0 ? (acc + filter_count / 2) / filter_count",
          "187:                         : (acc - filter_count / 2) / filter_count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "193:       }",
          "194:     }",
          "195:   }",
          "196: }",
          "198: inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:   return true;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h": [
          "File: tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h -> tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1487:       output_data);",
          "1488: }",
          "1491:                         int stride_width, int stride_height, int pad_width,",
          "1492:                         int pad_height, int kwidth, int kheight,",
          "1493:                         float output_activation_min,",
          "",
          "[Removed Lines]",
          "1490: inline void AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "1490: inline bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1502:   params.padding_values.width = pad_width;",
          "1503:   params.float_activation_min = output_activation_min;",
          "1504:   params.float_activation_max = output_activation_max;",
          "1507: }",
          "",
          "[Removed Lines]",
          "1505:   AveragePool(params, DimsToShape(input_dims), input_data,",
          "1506:               DimsToShape(output_dims), output_data);",
          "",
          "[Added Lines]",
          "1505:   return AveragePool(params, DimsToShape(input_dims), input_data,",
          "1506:                      DimsToShape(output_dims), output_data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1564: template <FusedActivationFunctionType Ac>",
          "1566:                  int stride_width, int stride_height, int pad_width,",
          "1567:                  int pad_height, int kwidth, int kheight, float* output_data,",
          "1568:                  const Dims<4>& output_dims) {",
          "1569:   float output_activation_min, output_activation_max;",
          "1570:   GetActivationMinMax(Ac, &output_activation_min, &output_activation_max);",
          "1575: }",
          "1578: template <FusedActivationFunctionType Ac>",
          "1580:                  int pad_width, int pad_height, int filter_width,",
          "1581:                  int filter_height, float* output_data,",
          "1582:                  const Dims<4>& output_dims) {",
          "1585: }",
          "1588:                         int stride_width, int stride_height, int pad_width,",
          "1589:                         int pad_height, int filter_width, int filter_height,",
          "1590:                         int32 output_activation_min,",
          "",
          "[Removed Lines]",
          "1565: void AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "1572:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
          "1573:               pad_height, kwidth, kheight, output_activation_min,",
          "1574:               output_activation_max, output_data, output_dims);",
          "1579: void AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
          "1583:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
          "1584:                   filter_width, filter_height, output_data, output_dims);",
          "1587: inline void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "1565: bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "1572:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
          "1573:                      pad_width, pad_height, kwidth, kheight,",
          "1574:                      output_activation_min, output_activation_max, output_data,",
          "1575:                      output_dims);",
          "1580: bool AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
          "1584:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
          "1585:                          pad_height, filter_width, filter_height, output_data,",
          "1586:                          output_dims);",
          "1589: inline bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1599:   params.padding_values.width = pad_width;",
          "1600:   params.quantized_activation_min = output_activation_min;",
          "1601:   params.quantized_activation_max = output_activation_max;",
          "1604: }",
          "1607: template <FusedActivationFunctionType Ac>",
          "1609:                  int stride_width, int stride_height, int pad_width,",
          "1610:                  int pad_height, int filter_width, int filter_height,",
          "1611:                  int32 output_activation_min, int32 output_activation_max,",
          "",
          "[Removed Lines]",
          "1602:   AveragePool(params, DimsToShape(input_dims), input_data,",
          "1603:               DimsToShape(output_dims), output_data);",
          "1608: void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "1604:   return AveragePool(params, DimsToShape(input_dims), input_data,",
          "1605:                      DimsToShape(output_dims), output_data);",
          "1610: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1619:     TFLITE_DCHECK_EQ(output_activation_min, 0);",
          "1620:     TFLITE_DCHECK_EQ(output_activation_max, 255);",
          "1621:   }",
          "1625: }",
          "1628: template <FusedActivationFunctionType Ac>",
          "1630:                  int pad_width, int pad_height, int filter_width,",
          "1631:                  int filter_height, int32 output_activation_min,",
          "1632:                  int32 output_activation_max, uint8* output_data,",
          "1633:                  const Dims<4>& output_dims) {",
          "1637: }",
          "1639: inline void MaxPool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "[Removed Lines]",
          "1622:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
          "1623:               pad_height, filter_width, filter_height, output_activation_min,",
          "1624:               output_activation_max, output_data, output_dims);",
          "1629: void AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
          "1634:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
          "1635:                   filter_width, filter_height, output_activation_min,",
          "1636:                   output_activation_max, output_data, output_dims);",
          "",
          "[Added Lines]",
          "1624:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
          "1625:                      pad_width, pad_height, filter_width, filter_height,",
          "1626:                      output_activation_min, output_activation_max, output_data,",
          "1627:                      output_dims);",
          "1632: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
          "1637:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
          "1638:                          pad_height, filter_width, filter_height,",
          "1639:                          output_activation_min, output_activation_max,",
          "1640:                          output_data, output_dims);",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h": [
          "File: tensorflow/lite/kernels/internal/reference/pooling.h -> tensorflow/lite/kernels/internal/reference/pooling.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: namespace tflite {",
          "24: namespace reference_ops {",
          "27:                         const RuntimeShape& input_shape,",
          "28:                         const float* input_data,",
          "29:                         const RuntimeShape& output_shape, float* output_data) {",
          "",
          "[Removed Lines]",
          "26: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "26: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:               filter_count++;",
          "67:             }",
          "68:           }",
          "69:           const float average = total / filter_count;",
          "70:           output_data[Offset(output_shape, batch, out_y, out_x, channel)] =",
          "71:               ActivationFunctionWithMinMax(average, params.float_activation_min,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:       }",
          "75:     }",
          "76:   }",
          "77: }",
          "80:                         const RuntimeShape& input_shape,",
          "81:                         const uint8_t* input_data,",
          "82:                         const RuntimeShape& output_shape,",
          "",
          "[Removed Lines]",
          "79: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "78:   return true;",
          "81: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "122:               filter_count++;",
          "123:             }",
          "124:           }",
          "125:           acc = (acc + filter_count / 2) / filter_count;",
          "126:           acc = std::max(acc, params.quantized_activation_min);",
          "127:           acc = std::min(acc, params.quantized_activation_max);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131:       }",
          "132:     }",
          "133:   }",
          "134: }",
          "136: inline void L2Pool(const PoolParams& params, const RuntimeShape& input_shape,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:   return true;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc": [
          "File: tensorflow/lite/kernels/pooling.cc -> tensorflow/lite/kernels/pooling.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "117: }",
          "119: template <KernelType kernel_type>",
          "123:   float activation_min, activation_max;",
          "124:   CalculateActivationRange(params->activation, &activation_min,",
          "125:                            &activation_max);",
          "139:   if (kernel_type == kReference) {",
          "140:     TF_LITE_AVERAGE_POOL(reference_ops);",
          "141:   } else {",
          "142:     TF_LITE_AVERAGE_POOL(optimized_ops);",
          "143:   }",
          "144: #undef TF_LITE_AVERAGE_POOL",
          "145: }",
          "147: template <KernelType kernel_type>",
          "152:   int32_t activation_min;",
          "153:   int32_t activation_max;",
          "154:   (void)CalculateActivationRangeQuantized(context, params->activation, output,",
          "155:                                           &activation_min, &activation_max);",
          "169:   if (kernel_type == kReference) {",
          "170:     TF_LITE_AVERAGE_POOL(reference_ops);",
          "171:   } else {",
          "172:     TF_LITE_AVERAGE_POOL(optimized_ops);",
          "173:   }",
          "174: #undef TF_LITE_AVERAGE_POOL",
          "175: }",
          "177: template <KernelType kernel_type>",
          "181:   int32_t activation_min;",
          "182:   int32_t activation_max;",
          "184:   (void)CalculateActivationRangeQuantized(context, params->activation, output,",
          "185:                                           &activation_min, &activation_max);",
          "199:   if (kernel_type == kReference) {",
          "200:     TF_LITE_AVERAGE_POOL(reference_integer_ops);",
          "201:   } else {",
          "202:     TF_LITE_AVERAGE_POOL(optimized_integer_ops);",
          "203:   }",
          "204: #undef TF_LITE_AVERAGE_POOL",
          "205: }",
          "207: template <KernelType kernel_type>",
          "212:   int32_t activation_min;",
          "213:   int32_t activation_max;",
          "214:   CalculateActivationRangeQuantized(context, params->activation, output,",
          "215:                                     &activation_min, &activation_max);",
          "229:   TF_LITE_AVERAGE_POOL(reference_integer_ops);",
          "230: #undef TF_LITE_AVERAGE_POOL",
          "231: }",
          "233: template <KernelType kernel_type>",
          "",
          "[Removed Lines]",
          "120: void AverageEvalFloat(TfLiteContext* context, TfLiteNode* node,",
          "121:                       TfLitePoolParams* params, OpData* data,",
          "122:                       const TfLiteTensor* input, TfLiteTensor* output) {",
          "126: #define TF_LITE_AVERAGE_POOL(type)                                       \\",
          "127:   tflite::PoolParams op_params;                                          \\",
          "128:   op_params.stride_height = params->stride_height;                       \\",
          "129:   op_params.stride_width = params->stride_width;                         \\",
          "130:   op_params.filter_height = params->filter_height;                       \\",
          "131:   op_params.filter_width = params->filter_width;                         \\",
          "132:   op_params.padding_values.height = data->padding.height;                \\",
          "133:   op_params.padding_values.width = data->padding.width;                  \\",
          "134:   op_params.float_activation_min = activation_min;                       \\",
          "135:   op_params.float_activation_max = activation_max;                       \\",
          "136:   type::AveragePool(op_params, GetTensorShape(input),                    \\",
          "137:                     GetTensorData<float>(input), GetTensorShape(output), \\",
          "138:                     GetTensorData<float>(output))",
          "148: void AverageEvalQuantizedUint8(TfLiteContext* context, TfLiteNode* node,",
          "149:                                TfLitePoolParams* params, OpData* data,",
          "150:                                const TfLiteTensor* input,",
          "151:                                TfLiteTensor* output) {",
          "156: #define TF_LITE_AVERAGE_POOL(type)                                         \\",
          "157:   tflite::PoolParams op_params;                                            \\",
          "158:   op_params.stride_height = params->stride_height;                         \\",
          "159:   op_params.stride_width = params->stride_width;                           \\",
          "160:   op_params.filter_height = params->filter_height;                         \\",
          "161:   op_params.filter_width = params->filter_width;                           \\",
          "162:   op_params.padding_values.height = data->padding.height;                  \\",
          "163:   op_params.padding_values.width = data->padding.width;                    \\",
          "164:   op_params.quantized_activation_min = activation_min;                     \\",
          "165:   op_params.quantized_activation_max = activation_max;                     \\",
          "166:   type::AveragePool(op_params, GetTensorShape(input),                      \\",
          "167:                     GetTensorData<uint8_t>(input), GetTensorShape(output), \\",
          "168:                     GetTensorData<uint8_t>(output))",
          "178: void AverageEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,",
          "179:                               TfLitePoolParams* params, OpData* data,",
          "180:                               const TfLiteTensor* input, TfLiteTensor* output) {",
          "186: #define TF_LITE_AVERAGE_POOL(type)                                        \\",
          "187:   tflite::PoolParams op_params;                                           \\",
          "188:   op_params.stride_height = params->stride_height;                        \\",
          "189:   op_params.stride_width = params->stride_width;                          \\",
          "190:   op_params.filter_height = params->filter_height;                        \\",
          "191:   op_params.filter_width = params->filter_width;                          \\",
          "192:   op_params.padding_values.height = data->padding.height;                 \\",
          "193:   op_params.padding_values.width = data->padding.width;                   \\",
          "194:   op_params.quantized_activation_min = activation_min;                    \\",
          "195:   op_params.quantized_activation_max = activation_max;                    \\",
          "196:   type::AveragePool(op_params, GetTensorShape(input),                     \\",
          "197:                     GetTensorData<int8_t>(input), GetTensorShape(output), \\",
          "198:                     GetTensorData<int8_t>(output))",
          "208: void AverageEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,",
          "209:                                TfLitePoolParams* params, OpData* data,",
          "210:                                const TfLiteTensor* input,",
          "211:                                TfLiteTensor* output) {",
          "216: #define TF_LITE_AVERAGE_POOL(type)                                         \\",
          "217:   tflite::PoolParams op_params;                                            \\",
          "218:   op_params.stride_height = params->stride_height;                         \\",
          "219:   op_params.stride_width = params->stride_width;                           \\",
          "220:   op_params.filter_height = params->filter_height;                         \\",
          "221:   op_params.filter_width = params->filter_width;                           \\",
          "222:   op_params.padding_values.height = data->padding.height;                  \\",
          "223:   op_params.padding_values.width = data->padding.width;                    \\",
          "224:   op_params.quantized_activation_min = activation_min;                     \\",
          "225:   op_params.quantized_activation_max = activation_max;                     \\",
          "226:   type::AveragePool(op_params, GetTensorShape(input),                      \\",
          "227:                     GetTensorData<int16_t>(input), GetTensorShape(output), \\",
          "228:                     GetTensorData<int16_t>(output))",
          "",
          "[Added Lines]",
          "120: TfLiteStatus AverageEvalFloat(TfLiteContext* context, TfLiteNode* node,",
          "121:                               TfLitePoolParams* params, OpData* data,",
          "122:                               const TfLiteTensor* input, TfLiteTensor* output) {",
          "126: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
          "127:   tflite::PoolParams op_params;                                               \\",
          "128:   op_params.stride_height = params->stride_height;                            \\",
          "129:   op_params.stride_width = params->stride_width;                              \\",
          "130:   op_params.filter_height = params->filter_height;                            \\",
          "131:   op_params.filter_width = params->filter_width;                              \\",
          "132:   op_params.padding_values.height = data->padding.height;                     \\",
          "133:   op_params.padding_values.width = data->padding.width;                       \\",
          "134:   op_params.float_activation_min = activation_min;                            \\",
          "135:   op_params.float_activation_max = activation_max;                            \\",
          "136:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
          "137:                                             GetTensorData<float>(input),      \\",
          "138:                                             GetTensorShape(output),           \\",
          "139:                                             GetTensorData<float>(output)))",
          "146:   return kTfLiteOk;",
          "150: TfLiteStatus AverageEvalQuantizedUint8(TfLiteContext* context, TfLiteNode* node,",
          "151:                                        TfLitePoolParams* params, OpData* data,",
          "152:                                        const TfLiteTensor* input,",
          "153:                                        TfLiteTensor* output) {",
          "158: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
          "159:   tflite::PoolParams op_params;                                               \\",
          "160:   op_params.stride_height = params->stride_height;                            \\",
          "161:   op_params.stride_width = params->stride_width;                              \\",
          "162:   op_params.filter_height = params->filter_height;                            \\",
          "163:   op_params.filter_width = params->filter_width;                              \\",
          "164:   op_params.padding_values.height = data->padding.height;                     \\",
          "165:   op_params.padding_values.width = data->padding.width;                       \\",
          "166:   op_params.quantized_activation_min = activation_min;                        \\",
          "167:   op_params.quantized_activation_max = activation_max;                        \\",
          "168:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
          "169:                                             GetTensorData<uint8_t>(input),    \\",
          "170:                                             GetTensorShape(output),           \\",
          "171:                                             GetTensorData<uint8_t>(output)))",
          "178:   return kTfLiteOk;",
          "182: TfLiteStatus AverageEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,",
          "183:                                       TfLitePoolParams* params, OpData* data,",
          "184:                                       const TfLiteTensor* input,",
          "185:                                       TfLiteTensor* output) {",
          "191: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
          "192:   tflite::PoolParams op_params;                                               \\",
          "193:   op_params.stride_height = params->stride_height;                            \\",
          "194:   op_params.stride_width = params->stride_width;                              \\",
          "195:   op_params.filter_height = params->filter_height;                            \\",
          "196:   op_params.filter_width = params->filter_width;                              \\",
          "197:   op_params.padding_values.height = data->padding.height;                     \\",
          "198:   op_params.padding_values.width = data->padding.width;                       \\",
          "199:   op_params.quantized_activation_min = activation_min;                        \\",
          "200:   op_params.quantized_activation_max = activation_max;                        \\",
          "201:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
          "202:                                             GetTensorData<int8_t>(input),     \\",
          "203:                                             GetTensorShape(output),           \\",
          "204:                                             GetTensorData<int8_t>(output)))",
          "211:   return kTfLiteOk;",
          "215: TfLiteStatus AverageEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,",
          "216:                                        TfLitePoolParams* params, OpData* data,",
          "217:                                        const TfLiteTensor* input,",
          "218:                                        TfLiteTensor* output) {",
          "223: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
          "224:   tflite::PoolParams op_params;                                               \\",
          "225:   op_params.stride_height = params->stride_height;                            \\",
          "226:   op_params.stride_width = params->stride_width;                              \\",
          "227:   op_params.filter_height = params->filter_height;                            \\",
          "228:   op_params.filter_width = params->filter_width;                              \\",
          "229:   op_params.padding_values.height = data->padding.height;                     \\",
          "230:   op_params.padding_values.width = data->padding.width;                       \\",
          "231:   op_params.quantized_activation_min = activation_min;                        \\",
          "232:   op_params.quantized_activation_max = activation_max;                        \\",
          "233:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
          "234:                                             GetTensorData<int16_t>(input),    \\",
          "235:                                             GetTensorShape(output),           \\",
          "236:                                             GetTensorData<int16_t>(output)))",
          "239:   return kTfLiteOk;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "380:   TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));",
          "381:   switch (input->type) {  // Already know in/out types are same.",
          "382:     case kTfLiteFloat32:",
          "385:     case kTfLiteUInt8:",
          "389:     case kTfLiteInt8:",
          "393:     case kTfLiteInt16:",
          "397:     default:",
          "398:       TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",",
          "399:                          TfLiteTypeGetName(input->type));",
          "",
          "[Removed Lines]",
          "383:       AverageEvalFloat<kernel_type>(context, node, params, data, input, output);",
          "384:       break;",
          "386:       AverageEvalQuantizedUint8<kernel_type>(context, node, params, data, input,",
          "387:                                              output);",
          "388:       break;",
          "390:       AverageEvalQuantizedInt8<kernel_type>(context, node, params, data, input,",
          "391:                                             output);",
          "392:       break;",
          "394:       AverageEvalQuantizedInt16<kernel_type>(context, node, params, data, input,",
          "395:                                              output);",
          "396:       break;",
          "",
          "[Added Lines]",
          "392:       return AverageEvalFloat<kernel_type>(context, node, params, data, input,",
          "393:                                            output);",
          "395:       return AverageEvalQuantizedUint8<kernel_type>(context, node, params, data,",
          "396:                                                     input, output);",
          "398:       return AverageEvalQuantizedInt8<kernel_type>(context, node, params, data,",
          "399:                                                    input, output);",
          "401:       return AverageEvalQuantizedInt16<kernel_type>(context, node, params, data,",
          "402:                                                     input, output);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "afede8ba593670931834b29fae7ad66c4f240ca6",
      "candidate_info": {
        "commit_hash": "afede8ba593670931834b29fae7ad66c4f240ca6",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/afede8ba593670931834b29fae7ad66c4f240ca6",
        "files": [
          "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
          "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
          "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
          "tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
          "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
          "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
          "tensorflow/lite/kernels/internal/reference/pooling.h",
          "tensorflow/lite/kernels/pooling.cc"
        ],
        "message": "Prevent a division by 0 in average ops.\n\nPiperOrigin-RevId: 385184660\nChange-Id: I7affd4554f9b336fca29ac68f633232c094d0bd3",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
          "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
          "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
          "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
          "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
          "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
          "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h",
          "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
            "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
            "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
            "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
            "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
            "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
            "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h",
            "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
            "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
            "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
            "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
            "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
            "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
            "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h",
            "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc": [
          "File: tensorflow/lite/kernels/internal/averagepool_quantized_test.cc -> tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   std::vector<int8> optimized_averagePool_output(buffer_size);",
          "41:   std::vector<int8> reference_averagePool_output(buffer_size);",
          "50:   for (int i = 0; i < buffer_size; i++) {",
          "51:     EXPECT_TRUE(reference_averagePool_output[i] ==",
          "",
          "[Removed Lines]",
          "43:   reference_integer_ops::AveragePool(params, input_shape, input_data,",
          "44:                                      output_shape,",
          "45:                                      reference_averagePool_output.data());",
          "46:   optimized_integer_ops::AveragePool(params, input_shape, input_data,",
          "47:                                      output_shape,",
          "48:                                      optimized_averagePool_output.data());",
          "",
          "[Added Lines]",
          "43:   bool reference_success = reference_integer_ops::AveragePool(",
          "44:       params, input_shape, input_data, output_shape,",
          "45:       reference_averagePool_output.data());",
          "46:   bool optimized_success = optimized_integer_ops::AveragePool(",
          "47:       params, input_shape, input_data, output_shape,",
          "48:       optimized_averagePool_output.data());",
          "49:   EXPECT_TRUE(reference_success);",
          "50:   EXPECT_TRUE(optimized_success);",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h": [
          "File: tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h -> tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   }",
          "146: }",
          "149:                           const RuntimeShape& input_shape,",
          "150:                           const int8* input_data,",
          "151:                           const RuntimeShape& output_shape, int8* output_data) {",
          "",
          "[Removed Lines]",
          "148: inline void AveragePool16(const PoolParams& params,",
          "",
          "[Added Lines]",
          "148: inline bool AveragePool16(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:               std::min(params.filter_height, input_height - in_y_origin);",
          "195:           const int filter_count =",
          "196:               (filter_x_end - filter_x_start) * (filter_y_end - filter_y_start);",
          "197:           memset(acc, 0, tranche_depth * sizeof(acc[0]));",
          "198:           const int8* input_ptr =",
          "199:               input_data + depth_base +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:       }",
          "282:     }",
          "283:   }",
          "284: }",
          "286: inline void AveragePool(const PoolParams& params,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285:   return true;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h": [
          "File: tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h -> tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3763:                output_data, output_dims);",
          "3764: }",
          "3767:                         int stride_width, int stride_height, int pad_width,",
          "3768:                         int pad_height, int kwidth, int kheight,",
          "3769:                         float output_activation_min,",
          "",
          "[Removed Lines]",
          "3766: inline void AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "3766: inline bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3778:   params.padding_values.width = pad_width;",
          "3779:   params.float_activation_min = output_activation_min;",
          "3780:   params.float_activation_max = output_activation_max;",
          "3783: }",
          "3786: template <FusedActivationFunctionType Ac>",
          "3788:                  int stride_width, int stride_height, int pad_width,",
          "3789:                  int pad_height, int kwidth, int kheight, float* output_data,",
          "3790:                  const Dims<4>& output_dims) {",
          "3791:   float output_activation_min, output_activation_max;",
          "3792:   GetActivationMinMax(Ac, &output_activation_min, &output_activation_max);",
          "3797: }",
          "3800: template <FusedActivationFunctionType Ac>",
          "3802:                  int pad_width, int pad_height, int filter_width,",
          "3803:                  int filter_height, float* output_data,",
          "3804:                  const Dims<4>& output_dims) {",
          "3807: }",
          "3810:                         int stride_width, int stride_height, int pad_width,",
          "3811:                         int pad_height, int filter_width, int filter_height,",
          "3812:                         int32 output_activation_min,",
          "",
          "[Removed Lines]",
          "3781:   AveragePool(params, DimsToShape(input_dims), input_data,",
          "3782:               DimsToShape(output_dims), output_data);",
          "3787: void AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "3794:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
          "3795:               pad_height, kwidth, kheight, output_activation_min,",
          "3796:               output_activation_max, output_data, output_dims);",
          "3801: void AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
          "3805:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
          "3806:                   filter_width, filter_height, output_data, output_dims);",
          "3809: inline void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "3781:   return AveragePool(params, DimsToShape(input_dims), input_data,",
          "3782:                      DimsToShape(output_dims), output_data);",
          "3787: bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "3794:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
          "3795:                      pad_width, pad_height, kwidth, kheight,",
          "3796:                      output_activation_min, output_activation_max, output_data,",
          "3797:                      output_dims);",
          "3802: bool AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
          "3806:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
          "3807:                          pad_height, filter_width, filter_height, output_data,",
          "3808:                          output_dims);",
          "3811: inline bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3821:   params.padding_values.width = pad_width;",
          "3822:   params.quantized_activation_min = output_activation_min;",
          "3823:   params.quantized_activation_max = output_activation_max;",
          "3826: }",
          "3829: template <FusedActivationFunctionType Ac>",
          "3831:                  int stride_width, int stride_height, int pad_width,",
          "3832:                  int pad_height, int filter_width, int filter_height,",
          "3833:                  int32 output_activation_min, int32 output_activation_max,",
          "",
          "[Removed Lines]",
          "3824:   AveragePool(params, DimsToShape(input_dims), input_data,",
          "3825:               DimsToShape(output_dims), output_data);",
          "3830: void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "3826:   return AveragePool(params, DimsToShape(input_dims), input_data,",
          "3827:                      DimsToShape(output_dims), output_data);",
          "3832: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3841:     TFLITE_DCHECK_EQ(output_activation_min, 0);",
          "3842:     TFLITE_DCHECK_EQ(output_activation_max, 255);",
          "3843:   }",
          "3847: }",
          "3850: template <FusedActivationFunctionType Ac>",
          "3852:                  int pad_width, int pad_height, int filter_width,",
          "3853:                  int filter_height, int32 output_activation_min,",
          "3854:                  int32 output_activation_max, uint8* output_data,",
          "3855:                  const Dims<4>& output_dims) {",
          "3859: }",
          "3861: inline void MaxPool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "[Removed Lines]",
          "3844:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
          "3845:               pad_height, filter_width, filter_height, output_activation_min,",
          "3846:               output_activation_max, output_data, output_dims);",
          "3851: void AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
          "3856:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
          "3857:                   filter_width, filter_height, output_activation_min,",
          "3858:                   output_activation_max, output_data, output_dims);",
          "",
          "[Added Lines]",
          "3846:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
          "3847:                      pad_width, pad_height, filter_width, filter_height,",
          "3848:                      output_activation_min, output_activation_max, output_data,",
          "3849:                      output_dims);",
          "3854: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
          "3859:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
          "3860:                          pad_height, filter_width, filter_height,",
          "3861:                          output_activation_min, output_activation_max,",
          "3862:                          output_data, output_dims);",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h": [
          "File: tensorflow/lite/kernels/internal/optimized/optimized_ops.h -> tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3223:   return (b * height + h) * width + w;",
          "3224: }",
          "3227:                         const RuntimeShape& input_shape,",
          "3228:                         const float* input_data,",
          "3229:                         const RuntimeShape& output_shape, float* output_data) {",
          "",
          "[Removed Lines]",
          "3226: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "3226: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3238:   const int stride_height = params.stride_height;",
          "3239:   const int stride_width = params.stride_width;",
          "3242:   const auto in_mat = MapAsMatrixWithLastDimAsRows(input_data, input_shape);",
          "3243:   auto out_mat = MapAsMatrixWithLastDimAsRows(output_data, output_shape);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3241:   if (stride_height == 0) return false;",
          "3242:   if (stride_width == 0) return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3283:                                                   params.float_activation_min,",
          "3284:                                                   params.float_activation_max);",
          "3285:   }",
          "3286: }",
          "3289:                           const RuntimeShape& input_shape,",
          "3290:                           const uint8* input_data,",
          "3291:                           const RuntimeShape& output_shape,",
          "",
          "[Removed Lines]",
          "3288: inline void AveragePool16(const PoolParams& params,",
          "",
          "[Added Lines]",
          "3290:   return true;",
          "3293: inline bool AveragePool16(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3335:               std::min(params.filter_height, input_height - in_y_origin);",
          "3336:           const int filter_count =",
          "3337:               (filter_x_end - filter_x_start) * (filter_y_end - filter_y_start);",
          "3338:           memset(acc, 0, tranche_depth * sizeof(acc[0]));",
          "3339:           const uint8* input_ptr =",
          "3340:               input_data + depth_base +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3343:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3417:   }",
          "3418: }",
          "3421:                           const RuntimeShape& input_shape,",
          "3422:                           const uint8* input_data,",
          "3423:                           const RuntimeShape& output_shape,",
          "",
          "[Removed Lines]",
          "3420: inline void AveragePool32(const PoolParams& params,",
          "",
          "[Added Lines]",
          "3426: inline bool AveragePool32(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3467:               std::min(params.filter_height, input_height - in_y_origin);",
          "3468:           const int filter_count =",
          "3469:               (filter_x_end - filter_x_start) * (filter_y_end - filter_y_start);",
          "3470:           memset(acc, 0, tranche_depth * sizeof(acc[0]));",
          "3471:           const uint8* input_ptr =",
          "3472:               input_data + depth_base +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3476:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3553:       }",
          "3554:     }",
          "3555:   }",
          "3556: }",
          "3558: inline void AveragePool(const PoolParams& params,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3563:   return true;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h": [
          "File: tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h -> tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: namespace tflite {",
          "22: namespace reference_integer_ops {",
          "25:                         const RuntimeShape& input_shape, const int8* input_data,",
          "26:                         const RuntimeShape& output_shape, int8* output_data) {",
          "27:   TFLITE_DCHECK_LE(params.quantized_activation_min,",
          "",
          "[Removed Lines]",
          "24: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "24: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:               filter_count++;",
          "66:             }",
          "67:           }",
          "69:           acc = acc > 0 ? (acc + filter_count / 2) / filter_count",
          "70:                         : (acc - filter_count / 2) / filter_count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:       }",
          "77:     }",
          "78:   }",
          "79: }",
          "81: inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:   return true;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "135:   }",
          "136: }",
          "139:                         const RuntimeShape& input_shape,",
          "140:                         const int16* input_data,",
          "141:                         const RuntimeShape& output_shape, int16* output_data) {",
          "",
          "[Removed Lines]",
          "138: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "140: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "180:               filter_count++;",
          "181:             }",
          "182:           }",
          "184:           acc = acc > 0 ? (acc + filter_count / 2) / filter_count",
          "185:                         : (acc - filter_count / 2) / filter_count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "191:       }",
          "192:     }",
          "193:   }",
          "194: }",
          "196: inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:   return true;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h": [
          "File: tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h -> tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1528:       output_data);",
          "1529: }",
          "1532:                         int stride_width, int stride_height, int pad_width,",
          "1533:                         int pad_height, int kwidth, int kheight,",
          "1534:                         float output_activation_min,",
          "",
          "[Removed Lines]",
          "1531: inline void AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "1531: inline bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1543:   params.padding_values.width = pad_width;",
          "1544:   params.float_activation_min = output_activation_min;",
          "1545:   params.float_activation_max = output_activation_max;",
          "1548: }",
          "",
          "[Removed Lines]",
          "1546:   AveragePool(params, DimsToShape(input_dims), input_data,",
          "1547:               DimsToShape(output_dims), output_data);",
          "",
          "[Added Lines]",
          "1546:   return AveragePool(params, DimsToShape(input_dims), input_data,",
          "1547:                      DimsToShape(output_dims), output_data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1605: template <FusedActivationFunctionType Ac>",
          "1607:                  int stride_width, int stride_height, int pad_width,",
          "1608:                  int pad_height, int kwidth, int kheight, float* output_data,",
          "1609:                  const Dims<4>& output_dims) {",
          "1610:   float output_activation_min, output_activation_max;",
          "1611:   GetActivationMinMax(Ac, &output_activation_min, &output_activation_max);",
          "1616: }",
          "1619: template <FusedActivationFunctionType Ac>",
          "1621:                  int pad_width, int pad_height, int filter_width,",
          "1622:                  int filter_height, float* output_data,",
          "1623:                  const Dims<4>& output_dims) {",
          "1626: }",
          "1629:                         int stride_width, int stride_height, int pad_width,",
          "1630:                         int pad_height, int filter_width, int filter_height,",
          "1631:                         int32 output_activation_min,",
          "",
          "[Removed Lines]",
          "1606: void AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "1613:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
          "1614:               pad_height, kwidth, kheight, output_activation_min,",
          "1615:               output_activation_max, output_data, output_dims);",
          "1620: void AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
          "1624:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
          "1625:                   filter_width, filter_height, output_data, output_dims);",
          "1628: inline void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "1606: bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "1613:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
          "1614:                      pad_width, pad_height, kwidth, kheight,",
          "1615:                      output_activation_min, output_activation_max, output_data,",
          "1616:                      output_dims);",
          "1621: bool AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
          "1625:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
          "1626:                          pad_height, filter_width, filter_height, output_data,",
          "1627:                          output_dims);",
          "1630: inline bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1640:   params.padding_values.width = pad_width;",
          "1641:   params.quantized_activation_min = output_activation_min;",
          "1642:   params.quantized_activation_max = output_activation_max;",
          "1645: }",
          "1648: template <FusedActivationFunctionType Ac>",
          "1650:                  int stride_width, int stride_height, int pad_width,",
          "1651:                  int pad_height, int filter_width, int filter_height,",
          "1652:                  int32 output_activation_min, int32 output_activation_max,",
          "",
          "[Removed Lines]",
          "1643:   AveragePool(params, DimsToShape(input_dims), input_data,",
          "1644:               DimsToShape(output_dims), output_data);",
          "1649: void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "1645:   return AveragePool(params, DimsToShape(input_dims), input_data,",
          "1646:                      DimsToShape(output_dims), output_data);",
          "1651: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1660:     TFLITE_DCHECK_EQ(output_activation_min, 0);",
          "1661:     TFLITE_DCHECK_EQ(output_activation_max, 255);",
          "1662:   }",
          "1666: }",
          "1669: template <FusedActivationFunctionType Ac>",
          "1671:                  int pad_width, int pad_height, int filter_width,",
          "1672:                  int filter_height, int32 output_activation_min,",
          "1673:                  int32 output_activation_max, uint8* output_data,",
          "1674:                  const Dims<4>& output_dims) {",
          "1678: }",
          "1680: inline void MaxPool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "[Removed Lines]",
          "1663:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
          "1664:               pad_height, filter_width, filter_height, output_activation_min,",
          "1665:               output_activation_max, output_data, output_dims);",
          "1670: void AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
          "1675:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
          "1676:                   filter_width, filter_height, output_activation_min,",
          "1677:                   output_activation_max, output_data, output_dims);",
          "",
          "[Added Lines]",
          "1665:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
          "1666:                      pad_width, pad_height, filter_width, filter_height,",
          "1667:                      output_activation_min, output_activation_max, output_data,",
          "1668:                      output_dims);",
          "1673: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
          "1678:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
          "1679:                          pad_height, filter_width, filter_height,",
          "1680:                          output_activation_min, output_activation_max,",
          "1681:                          output_data, output_dims);",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h": [
          "File: tensorflow/lite/kernels/internal/reference/pooling.h -> tensorflow/lite/kernels/internal/reference/pooling.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: namespace tflite {",
          "24: namespace reference_ops {",
          "27:                         const RuntimeShape& input_shape,",
          "28:                         const float* input_data,",
          "29:                         const RuntimeShape& output_shape, float* output_data) {",
          "",
          "[Removed Lines]",
          "26: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "26: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:               filter_count++;",
          "67:             }",
          "68:           }",
          "69:           const float average = total / filter_count;",
          "70:           output_data[Offset(output_shape, batch, out_y, out_x, channel)] =",
          "71:               ActivationFunctionWithMinMax(average, params.float_activation_min,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:       }",
          "75:     }",
          "76:   }",
          "77: }",
          "80:                         const RuntimeShape& input_shape,",
          "81:                         const uint8* input_data,",
          "82:                         const RuntimeShape& output_shape, uint8* output_data) {",
          "",
          "[Removed Lines]",
          "79: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "78:   return true;",
          "81: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "121:               filter_count++;",
          "122:             }",
          "123:           }",
          "124:           acc = (acc + filter_count / 2) / filter_count;",
          "125:           acc = std::max(acc, params.quantized_activation_min);",
          "126:           acc = std::min(acc, params.quantized_activation_max);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "130:       }",
          "131:     }",
          "132:   }",
          "133: }",
          "135: inline void L2Pool(const PoolParams& params, const RuntimeShape& input_shape,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:   return true;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc": [
          "File: tensorflow/lite/kernels/pooling.cc -> tensorflow/lite/kernels/pooling.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: }",
          "117: template <KernelType kernel_type>",
          "121:   float activation_min, activation_max;",
          "122:   CalculateActivationRange(params->activation, &activation_min,",
          "123:                            &activation_max);",
          "137:   if (kernel_type == kReference) {",
          "138:     TF_LITE_AVERAGE_POOL(reference_ops);",
          "139:   } else {",
          "140:     TF_LITE_AVERAGE_POOL(optimized_ops);",
          "141:   }",
          "142: #undef TF_LITE_AVERAGE_POOL",
          "143: }",
          "145: template <KernelType kernel_type>",
          "150:   int32_t activation_min;",
          "151:   int32_t activation_max;",
          "152:   (void)CalculateActivationRangeQuantized(context, params->activation, output,",
          "153:                                           &activation_min, &activation_max);",
          "167:   if (kernel_type == kReference) {",
          "168:     TF_LITE_AVERAGE_POOL(reference_ops);",
          "169:   } else {",
          "170:     TF_LITE_AVERAGE_POOL(optimized_ops);",
          "171:   }",
          "172: #undef TF_LITE_AVERAGE_POOL",
          "173: }",
          "175: template <KernelType kernel_type>",
          "179:   int32_t activation_min;",
          "180:   int32_t activation_max;",
          "182:   (void)CalculateActivationRangeQuantized(context, params->activation, output,",
          "183:                                           &activation_min, &activation_max);",
          "197:   if (kernel_type == kReference) {",
          "198:     TF_LITE_AVERAGE_POOL(reference_integer_ops);",
          "199:   } else {",
          "200:     TF_LITE_AVERAGE_POOL(optimized_integer_ops);",
          "201:   }",
          "202: #undef TF_LITE_AVERAGE_POOL",
          "203: }",
          "205: template <KernelType kernel_type>",
          "210:   int32_t activation_min;",
          "211:   int32_t activation_max;",
          "212:   CalculateActivationRangeQuantized(context, params->activation, output,",
          "213:                                     &activation_min, &activation_max);",
          "227:   TF_LITE_AVERAGE_POOL(reference_integer_ops);",
          "228: #undef TF_LITE_AVERAGE_POOL",
          "229: }",
          "231: template <KernelType kernel_type>",
          "",
          "[Removed Lines]",
          "118: void AverageEvalFloat(TfLiteContext* context, TfLiteNode* node,",
          "119:                       TfLitePoolParams* params, OpData* data,",
          "120:                       const TfLiteTensor* input, TfLiteTensor* output) {",
          "124: #define TF_LITE_AVERAGE_POOL(type)                                       \\",
          "125:   tflite::PoolParams op_params;                                          \\",
          "126:   op_params.stride_height = params->stride_height;                       \\",
          "127:   op_params.stride_width = params->stride_width;                         \\",
          "128:   op_params.filter_height = params->filter_height;                       \\",
          "129:   op_params.filter_width = params->filter_width;                         \\",
          "130:   op_params.padding_values.height = data->padding.height;                \\",
          "131:   op_params.padding_values.width = data->padding.width;                  \\",
          "132:   op_params.float_activation_min = activation_min;                       \\",
          "133:   op_params.float_activation_max = activation_max;                       \\",
          "134:   type::AveragePool(op_params, GetTensorShape(input),                    \\",
          "135:                     GetTensorData<float>(input), GetTensorShape(output), \\",
          "136:                     GetTensorData<float>(output))",
          "146: void AverageEvalQuantizedUint8(TfLiteContext* context, TfLiteNode* node,",
          "147:                                TfLitePoolParams* params, OpData* data,",
          "148:                                const TfLiteTensor* input,",
          "149:                                TfLiteTensor* output) {",
          "154: #define TF_LITE_AVERAGE_POOL(type)                                         \\",
          "155:   tflite::PoolParams op_params;                                            \\",
          "156:   op_params.stride_height = params->stride_height;                         \\",
          "157:   op_params.stride_width = params->stride_width;                           \\",
          "158:   op_params.filter_height = params->filter_height;                         \\",
          "159:   op_params.filter_width = params->filter_width;                           \\",
          "160:   op_params.padding_values.height = data->padding.height;                  \\",
          "161:   op_params.padding_values.width = data->padding.width;                    \\",
          "162:   op_params.quantized_activation_min = activation_min;                     \\",
          "163:   op_params.quantized_activation_max = activation_max;                     \\",
          "164:   type::AveragePool(op_params, GetTensorShape(input),                      \\",
          "165:                     GetTensorData<uint8_t>(input), GetTensorShape(output), \\",
          "166:                     GetTensorData<uint8_t>(output))",
          "176: void AverageEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,",
          "177:                               TfLitePoolParams* params, OpData* data,",
          "178:                               const TfLiteTensor* input, TfLiteTensor* output) {",
          "184: #define TF_LITE_AVERAGE_POOL(type)                                        \\",
          "185:   tflite::PoolParams op_params;                                           \\",
          "186:   op_params.stride_height = params->stride_height;                        \\",
          "187:   op_params.stride_width = params->stride_width;                          \\",
          "188:   op_params.filter_height = params->filter_height;                        \\",
          "189:   op_params.filter_width = params->filter_width;                          \\",
          "190:   op_params.padding_values.height = data->padding.height;                 \\",
          "191:   op_params.padding_values.width = data->padding.width;                   \\",
          "192:   op_params.quantized_activation_min = activation_min;                    \\",
          "193:   op_params.quantized_activation_max = activation_max;                    \\",
          "194:   type::AveragePool(op_params, GetTensorShape(input),                     \\",
          "195:                     GetTensorData<int8_t>(input), GetTensorShape(output), \\",
          "196:                     GetTensorData<int8_t>(output))",
          "206: void AverageEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,",
          "207:                                TfLitePoolParams* params, OpData* data,",
          "208:                                const TfLiteTensor* input,",
          "209:                                TfLiteTensor* output) {",
          "214: #define TF_LITE_AVERAGE_POOL(type)                                         \\",
          "215:   tflite::PoolParams op_params;                                            \\",
          "216:   op_params.stride_height = params->stride_height;                         \\",
          "217:   op_params.stride_width = params->stride_width;                           \\",
          "218:   op_params.filter_height = params->filter_height;                         \\",
          "219:   op_params.filter_width = params->filter_width;                           \\",
          "220:   op_params.padding_values.height = data->padding.height;                  \\",
          "221:   op_params.padding_values.width = data->padding.width;                    \\",
          "222:   op_params.quantized_activation_min = activation_min;                     \\",
          "223:   op_params.quantized_activation_max = activation_max;                     \\",
          "224:   type::AveragePool(op_params, GetTensorShape(input),                      \\",
          "225:                     GetTensorData<int16_t>(input), GetTensorShape(output), \\",
          "226:                     GetTensorData<int16_t>(output))",
          "",
          "[Added Lines]",
          "118: TfLiteStatus AverageEvalFloat(TfLiteContext* context, TfLiteNode* node,",
          "119:                               TfLitePoolParams* params, OpData* data,",
          "120:                               const TfLiteTensor* input, TfLiteTensor* output) {",
          "124: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
          "125:   tflite::PoolParams op_params;                                               \\",
          "126:   op_params.stride_height = params->stride_height;                            \\",
          "127:   op_params.stride_width = params->stride_width;                              \\",
          "128:   op_params.filter_height = params->filter_height;                            \\",
          "129:   op_params.filter_width = params->filter_width;                              \\",
          "130:   op_params.padding_values.height = data->padding.height;                     \\",
          "131:   op_params.padding_values.width = data->padding.width;                       \\",
          "132:   op_params.float_activation_min = activation_min;                            \\",
          "133:   op_params.float_activation_max = activation_max;                            \\",
          "134:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
          "135:                                             GetTensorData<float>(input),      \\",
          "136:                                             GetTensorShape(output),           \\",
          "137:                                             GetTensorData<float>(output)))",
          "144:   return kTfLiteOk;",
          "148: TfLiteStatus AverageEvalQuantizedUint8(TfLiteContext* context, TfLiteNode* node,",
          "149:                                        TfLitePoolParams* params, OpData* data,",
          "150:                                        const TfLiteTensor* input,",
          "151:                                        TfLiteTensor* output) {",
          "156: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
          "157:   tflite::PoolParams op_params;                                               \\",
          "158:   op_params.stride_height = params->stride_height;                            \\",
          "159:   op_params.stride_width = params->stride_width;                              \\",
          "160:   op_params.filter_height = params->filter_height;                            \\",
          "161:   op_params.filter_width = params->filter_width;                              \\",
          "162:   op_params.padding_values.height = data->padding.height;                     \\",
          "163:   op_params.padding_values.width = data->padding.width;                       \\",
          "164:   op_params.quantized_activation_min = activation_min;                        \\",
          "165:   op_params.quantized_activation_max = activation_max;                        \\",
          "166:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
          "167:                                             GetTensorData<uint8_t>(input),    \\",
          "168:                                             GetTensorShape(output),           \\",
          "169:                                             GetTensorData<uint8_t>(output)))",
          "176:   return kTfLiteOk;",
          "180: TfLiteStatus AverageEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,",
          "181:                                       TfLitePoolParams* params, OpData* data,",
          "182:                                       const TfLiteTensor* input,",
          "183:                                       TfLiteTensor* output) {",
          "189: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
          "190:   tflite::PoolParams op_params;                                               \\",
          "191:   op_params.stride_height = params->stride_height;                            \\",
          "192:   op_params.stride_width = params->stride_width;                              \\",
          "193:   op_params.filter_height = params->filter_height;                            \\",
          "194:   op_params.filter_width = params->filter_width;                              \\",
          "195:   op_params.padding_values.height = data->padding.height;                     \\",
          "196:   op_params.padding_values.width = data->padding.width;                       \\",
          "197:   op_params.quantized_activation_min = activation_min;                        \\",
          "198:   op_params.quantized_activation_max = activation_max;                        \\",
          "199:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
          "200:                                             GetTensorData<int8_t>(input),     \\",
          "201:                                             GetTensorShape(output),           \\",
          "202:                                             GetTensorData<int8_t>(output)))",
          "209:   return kTfLiteOk;",
          "213: TfLiteStatus AverageEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,",
          "214:                                        TfLitePoolParams* params, OpData* data,",
          "215:                                        const TfLiteTensor* input,",
          "216:                                        TfLiteTensor* output) {",
          "221: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
          "222:   tflite::PoolParams op_params;                                               \\",
          "223:   op_params.stride_height = params->stride_height;                            \\",
          "224:   op_params.stride_width = params->stride_width;                              \\",
          "225:   op_params.filter_height = params->filter_height;                            \\",
          "226:   op_params.filter_width = params->filter_width;                              \\",
          "227:   op_params.padding_values.height = data->padding.height;                     \\",
          "228:   op_params.padding_values.width = data->padding.width;                       \\",
          "229:   op_params.quantized_activation_min = activation_min;                        \\",
          "230:   op_params.quantized_activation_max = activation_max;                        \\",
          "231:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
          "232:                                             GetTensorData<int16_t>(input),    \\",
          "233:                                             GetTensorShape(output),           \\",
          "234:                                             GetTensorData<int16_t>(output)))",
          "237:   return kTfLiteOk;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "376:   const TfLiteTensor* input = GetInput(context, node, 0);",
          "377:   switch (input->type) {  // Already know in/out types are same.",
          "378:     case kTfLiteFloat32:",
          "381:     case kTfLiteUInt8:",
          "385:     case kTfLiteInt8:",
          "389:     case kTfLiteInt16:",
          "393:     default:",
          "394:       TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",",
          "395:                          TfLiteTypeGetName(input->type));",
          "",
          "[Removed Lines]",
          "379:       AverageEvalFloat<kernel_type>(context, node, params, data, input, output);",
          "380:       break;",
          "382:       AverageEvalQuantizedUint8<kernel_type>(context, node, params, data, input,",
          "383:                                              output);",
          "384:       break;",
          "386:       AverageEvalQuantizedInt8<kernel_type>(context, node, params, data, input,",
          "387:                                             output);",
          "388:       break;",
          "390:       AverageEvalQuantizedInt16<kernel_type>(context, node, params, data, input,",
          "391:                                              output);",
          "392:       break;",
          "",
          "[Added Lines]",
          "388:       return AverageEvalFloat<kernel_type>(context, node, params, data, input,",
          "389:                                            output);",
          "391:       return AverageEvalQuantizedUint8<kernel_type>(context, node, params, data,",
          "392:                                                     input, output);",
          "394:       return AverageEvalQuantizedInt8<kernel_type>(context, node, params, data,",
          "395:                                                    input, output);",
          "397:       return AverageEvalQuantizedInt16<kernel_type>(context, node, params, data,",
          "398:                                                     input, output);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5ceb2445d37d9d89a13de3fd0d0d991f4962522",
      "candidate_info": {
        "commit_hash": "a5ceb2445d37d9d89a13de3fd0d0d991f4962522",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/a5ceb2445d37d9d89a13de3fd0d0d991f4962522",
        "files": [
          "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
          "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
          "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
          "tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
          "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
          "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
          "tensorflow/lite/kernels/internal/reference/pooling.h",
          "tensorflow/lite/kernels/pooling.cc"
        ],
        "message": "Prevent a division by 0 in average ops.\n\nPiperOrigin-RevId: 385184660\nChange-Id: I7affd4554f9b336fca29ac68f633232c094d0bd3",
        "before_after_code_files": [
          "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
          "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
          "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
          "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
          "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
          "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
          "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h",
          "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
            "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
            "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
            "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
            "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
            "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
            "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h",
            "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
            "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
            "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
            "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
            "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
            "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
            "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h",
            "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/internal/averagepool_quantized_test.cc||tensorflow/lite/kernels/internal/averagepool_quantized_test.cc": [
          "File: tensorflow/lite/kernels/internal/averagepool_quantized_test.cc -> tensorflow/lite/kernels/internal/averagepool_quantized_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   std::vector<int8> optimized_averagePool_output(buffer_size);",
          "41:   std::vector<int8> reference_averagePool_output(buffer_size);",
          "50:   for (int i = 0; i < buffer_size; i++) {",
          "51:     EXPECT_TRUE(reference_averagePool_output[i] ==",
          "",
          "[Removed Lines]",
          "43:   reference_integer_ops::AveragePool(params, input_shape, input_data,",
          "44:                                      output_shape,",
          "45:                                      reference_averagePool_output.data());",
          "46:   optimized_integer_ops::AveragePool(params, input_shape, input_data,",
          "47:                                      output_shape,",
          "48:                                      optimized_averagePool_output.data());",
          "",
          "[Added Lines]",
          "43:   bool reference_success = reference_integer_ops::AveragePool(",
          "44:       params, input_shape, input_data, output_shape,",
          "45:       reference_averagePool_output.data());",
          "46:   bool optimized_success = optimized_integer_ops::AveragePool(",
          "47:       params, input_shape, input_data, output_shape,",
          "48:       optimized_averagePool_output.data());",
          "49:   EXPECT_TRUE(reference_success);",
          "50:   EXPECT_TRUE(optimized_success);",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h||tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h": [
          "File: tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h -> tensorflow/lite/kernels/internal/optimized/integer_ops/pooling.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   }",
          "146: }",
          "149:                           const RuntimeShape& input_shape,",
          "150:                           const int8* input_data,",
          "151:                           const RuntimeShape& output_shape, int8* output_data) {",
          "",
          "[Removed Lines]",
          "148: inline void AveragePool16(const PoolParams& params,",
          "",
          "[Added Lines]",
          "148: inline bool AveragePool16(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "194:               std::min(params.filter_height, input_height - in_y_origin);",
          "195:           const int filter_count =",
          "196:               (filter_x_end - filter_x_start) * (filter_y_end - filter_y_start);",
          "197:           memset(acc, 0, tranche_depth * sizeof(acc[0]));",
          "198:           const int8* input_ptr =",
          "199:               input_data + depth_base +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:       }",
          "282:     }",
          "283:   }",
          "284: }",
          "286: inline void AveragePool(const PoolParams& params,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "285:   return true;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h||tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h": [
          "File: tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h -> tensorflow/lite/kernels/internal/optimized/legacy_optimized_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3763:                output_data, output_dims);",
          "3764: }",
          "3767:                         int stride_width, int stride_height, int pad_width,",
          "3768:                         int pad_height, int kwidth, int kheight,",
          "3769:                         float output_activation_min,",
          "",
          "[Removed Lines]",
          "3766: inline void AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "3766: inline bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3778:   params.padding_values.width = pad_width;",
          "3779:   params.float_activation_min = output_activation_min;",
          "3780:   params.float_activation_max = output_activation_max;",
          "3783: }",
          "3786: template <FusedActivationFunctionType Ac>",
          "3788:                  int stride_width, int stride_height, int pad_width,",
          "3789:                  int pad_height, int kwidth, int kheight, float* output_data,",
          "3790:                  const Dims<4>& output_dims) {",
          "3791:   float output_activation_min, output_activation_max;",
          "3792:   GetActivationMinMax(Ac, &output_activation_min, &output_activation_max);",
          "3797: }",
          "3800: template <FusedActivationFunctionType Ac>",
          "3802:                  int pad_width, int pad_height, int filter_width,",
          "3803:                  int filter_height, float* output_data,",
          "3804:                  const Dims<4>& output_dims) {",
          "3807: }",
          "3810:                         int stride_width, int stride_height, int pad_width,",
          "3811:                         int pad_height, int filter_width, int filter_height,",
          "3812:                         int32 output_activation_min,",
          "",
          "[Removed Lines]",
          "3781:   AveragePool(params, DimsToShape(input_dims), input_data,",
          "3782:               DimsToShape(output_dims), output_data);",
          "3787: void AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "3794:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
          "3795:               pad_height, kwidth, kheight, output_activation_min,",
          "3796:               output_activation_max, output_data, output_dims);",
          "3801: void AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
          "3805:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
          "3806:                   filter_width, filter_height, output_data, output_dims);",
          "3809: inline void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "3781:   return AveragePool(params, DimsToShape(input_dims), input_data,",
          "3782:                      DimsToShape(output_dims), output_data);",
          "3787: bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "3794:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
          "3795:                      pad_width, pad_height, kwidth, kheight,",
          "3796:                      output_activation_min, output_activation_max, output_data,",
          "3797:                      output_dims);",
          "3802: bool AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
          "3806:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
          "3807:                          pad_height, filter_width, filter_height, output_data,",
          "3808:                          output_dims);",
          "3811: inline bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3821:   params.padding_values.width = pad_width;",
          "3822:   params.quantized_activation_min = output_activation_min;",
          "3823:   params.quantized_activation_max = output_activation_max;",
          "3826: }",
          "3829: template <FusedActivationFunctionType Ac>",
          "3831:                  int stride_width, int stride_height, int pad_width,",
          "3832:                  int pad_height, int filter_width, int filter_height,",
          "3833:                  int32 output_activation_min, int32 output_activation_max,",
          "",
          "[Removed Lines]",
          "3824:   AveragePool(params, DimsToShape(input_dims), input_data,",
          "3825:               DimsToShape(output_dims), output_data);",
          "3830: void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "3826:   return AveragePool(params, DimsToShape(input_dims), input_data,",
          "3827:                      DimsToShape(output_dims), output_data);",
          "3832: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3841:     TFLITE_DCHECK_EQ(output_activation_min, 0);",
          "3842:     TFLITE_DCHECK_EQ(output_activation_max, 255);",
          "3843:   }",
          "3847: }",
          "3850: template <FusedActivationFunctionType Ac>",
          "3852:                  int pad_width, int pad_height, int filter_width,",
          "3853:                  int filter_height, int32 output_activation_min,",
          "3854:                  int32 output_activation_max, uint8* output_data,",
          "3855:                  const Dims<4>& output_dims) {",
          "3859: }",
          "3861: inline void MaxPool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "[Removed Lines]",
          "3844:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
          "3845:               pad_height, filter_width, filter_height, output_activation_min,",
          "3846:               output_activation_max, output_data, output_dims);",
          "3851: void AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
          "3856:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
          "3857:                   filter_width, filter_height, output_activation_min,",
          "3858:                   output_activation_max, output_data, output_dims);",
          "",
          "[Added Lines]",
          "3846:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
          "3847:                      pad_width, pad_height, filter_width, filter_height,",
          "3848:                      output_activation_min, output_activation_max, output_data,",
          "3849:                      output_dims);",
          "3854: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
          "3859:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
          "3860:                          pad_height, filter_width, filter_height,",
          "3861:                          output_activation_min, output_activation_max,",
          "3862:                          output_data, output_dims);",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/optimized/optimized_ops.h||tensorflow/lite/kernels/internal/optimized/optimized_ops.h": [
          "File: tensorflow/lite/kernels/internal/optimized/optimized_ops.h -> tensorflow/lite/kernels/internal/optimized/optimized_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3223:   return (b * height + h) * width + w;",
          "3224: }",
          "3227:                         const RuntimeShape& input_shape,",
          "3228:                         const float* input_data,",
          "3229:                         const RuntimeShape& output_shape, float* output_data) {",
          "",
          "[Removed Lines]",
          "3226: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "3226: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3238:   const int stride_height = params.stride_height;",
          "3239:   const int stride_width = params.stride_width;",
          "3242:   const auto in_mat = MapAsMatrixWithLastDimAsRows(input_data, input_shape);",
          "3243:   auto out_mat = MapAsMatrixWithLastDimAsRows(output_data, output_shape);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3241:   if (stride_height == 0) return false;",
          "3242:   if (stride_width == 0) return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3283:                                                   params.float_activation_min,",
          "3284:                                                   params.float_activation_max);",
          "3285:   }",
          "3286: }",
          "3289:                           const RuntimeShape& input_shape,",
          "3290:                           const uint8* input_data,",
          "3291:                           const RuntimeShape& output_shape,",
          "",
          "[Removed Lines]",
          "3288: inline void AveragePool16(const PoolParams& params,",
          "",
          "[Added Lines]",
          "3290:   return true;",
          "3293: inline bool AveragePool16(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3335:               std::min(params.filter_height, input_height - in_y_origin);",
          "3336:           const int filter_count =",
          "3337:               (filter_x_end - filter_x_start) * (filter_y_end - filter_y_start);",
          "3338:           memset(acc, 0, tranche_depth * sizeof(acc[0]));",
          "3339:           const uint8* input_ptr =",
          "3340:               input_data + depth_base +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3343:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3417:   }",
          "3418: }",
          "3421:                           const RuntimeShape& input_shape,",
          "3422:                           const uint8* input_data,",
          "3423:                           const RuntimeShape& output_shape,",
          "",
          "[Removed Lines]",
          "3420: inline void AveragePool32(const PoolParams& params,",
          "",
          "[Added Lines]",
          "3426: inline bool AveragePool32(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3467:               std::min(params.filter_height, input_height - in_y_origin);",
          "3468:           const int filter_count =",
          "3469:               (filter_x_end - filter_x_start) * (filter_y_end - filter_y_start);",
          "3470:           memset(acc, 0, tranche_depth * sizeof(acc[0]));",
          "3471:           const uint8* input_ptr =",
          "3472:               input_data + depth_base +",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3476:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3553:       }",
          "3554:     }",
          "3555:   }",
          "3556: }",
          "3558: inline void AveragePool(const PoolParams& params,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3563:   return true;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h||tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h": [
          "File: tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h -> tensorflow/lite/kernels/internal/reference/integer_ops/pooling.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: namespace tflite {",
          "22: namespace reference_integer_ops {",
          "25:                         const RuntimeShape& input_shape,",
          "26:                         const int8_t* input_data,",
          "27:                         const RuntimeShape& output_shape, int8_t* output_data) {",
          "",
          "[Removed Lines]",
          "24: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "24: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:               filter_count++;",
          "67:             }",
          "68:           }",
          "70:           acc = acc > 0 ? (acc + filter_count / 2) / filter_count",
          "71:                         : (acc - filter_count / 2) / filter_count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "77:       }",
          "78:     }",
          "79:   }",
          "80: }",
          "82: inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:   return true;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:   }",
          "137: }",
          "140:                         const RuntimeShape& input_shape,",
          "141:                         const int16_t* input_data,",
          "142:                         const RuntimeShape& output_shape,",
          "",
          "[Removed Lines]",
          "139: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "141: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "182:               filter_count++;",
          "183:             }",
          "184:           }",
          "186:           acc = acc > 0 ? (acc + filter_count / 2) / filter_count",
          "187:                         : (acc - filter_count / 2) / filter_count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "193:       }",
          "194:     }",
          "195:   }",
          "196: }",
          "198: inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:   return true;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h||tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h": [
          "File: tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h -> tensorflow/lite/kernels/internal/reference/legacy_reference_ops.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1486:       output_data);",
          "1487: }",
          "1490:                         int stride_width, int stride_height, int pad_width,",
          "1491:                         int pad_height, int kwidth, int kheight,",
          "1492:                         float output_activation_min,",
          "",
          "[Removed Lines]",
          "1489: inline void AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "1489: inline bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1501:   params.padding_values.width = pad_width;",
          "1502:   params.float_activation_min = output_activation_min;",
          "1503:   params.float_activation_max = output_activation_max;",
          "1506: }",
          "",
          "[Removed Lines]",
          "1504:   AveragePool(params, DimsToShape(input_dims), input_data,",
          "1505:               DimsToShape(output_dims), output_data);",
          "",
          "[Added Lines]",
          "1504:   return AveragePool(params, DimsToShape(input_dims), input_data,",
          "1505:                      DimsToShape(output_dims), output_data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1563: template <FusedActivationFunctionType Ac>",
          "1565:                  int stride_width, int stride_height, int pad_width,",
          "1566:                  int pad_height, int kwidth, int kheight, float* output_data,",
          "1567:                  const Dims<4>& output_dims) {",
          "1568:   float output_activation_min, output_activation_max;",
          "1569:   GetActivationMinMax(Ac, &output_activation_min, &output_activation_max);",
          "1574: }",
          "1577: template <FusedActivationFunctionType Ac>",
          "1579:                  int pad_width, int pad_height, int filter_width,",
          "1580:                  int filter_height, float* output_data,",
          "1581:                  const Dims<4>& output_dims) {",
          "1584: }",
          "1587:                         int stride_width, int stride_height, int pad_width,",
          "1588:                         int pad_height, int filter_width, int filter_height,",
          "1589:                         int32 output_activation_min,",
          "",
          "[Removed Lines]",
          "1564: void AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "1571:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
          "1572:               pad_height, kwidth, kheight, output_activation_min,",
          "1573:               output_activation_max, output_data, output_dims);",
          "1578: void AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
          "1582:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
          "1583:                   filter_width, filter_height, output_data, output_dims);",
          "1586: inline void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "1564: bool AveragePool(const float* input_data, const Dims<4>& input_dims,",
          "1571:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
          "1572:                      pad_width, pad_height, kwidth, kheight,",
          "1573:                      output_activation_min, output_activation_max, output_data,",
          "1574:                      output_dims);",
          "1579: bool AveragePool(const float* input_data, const Dims<4>& input_dims, int stride,",
          "1583:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
          "1584:                          pad_height, filter_width, filter_height, output_data,",
          "1585:                          output_dims);",
          "1588: inline bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1598:   params.padding_values.width = pad_width;",
          "1599:   params.quantized_activation_min = output_activation_min;",
          "1600:   params.quantized_activation_max = output_activation_max;",
          "1603: }",
          "1606: template <FusedActivationFunctionType Ac>",
          "1608:                  int stride_width, int stride_height, int pad_width,",
          "1609:                  int pad_height, int filter_width, int filter_height,",
          "1610:                  int32 output_activation_min, int32 output_activation_max,",
          "",
          "[Removed Lines]",
          "1601:   AveragePool(params, DimsToShape(input_dims), input_data,",
          "1602:               DimsToShape(output_dims), output_data);",
          "1607: void AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "[Added Lines]",
          "1603:   return AveragePool(params, DimsToShape(input_dims), input_data,",
          "1604:                      DimsToShape(output_dims), output_data);",
          "1609: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1618:     TFLITE_DCHECK_EQ(output_activation_min, 0);",
          "1619:     TFLITE_DCHECK_EQ(output_activation_max, 255);",
          "1620:   }",
          "1624: }",
          "1627: template <FusedActivationFunctionType Ac>",
          "1629:                  int pad_width, int pad_height, int filter_width,",
          "1630:                  int filter_height, int32 output_activation_min,",
          "1631:                  int32 output_activation_max, uint8* output_data,",
          "1632:                  const Dims<4>& output_dims) {",
          "1636: }",
          "1638: inline void MaxPool(const float* input_data, const Dims<4>& input_dims,",
          "",
          "[Removed Lines]",
          "1621:   AveragePool(input_data, input_dims, stride_width, stride_height, pad_width,",
          "1622:               pad_height, filter_width, filter_height, output_activation_min,",
          "1623:               output_activation_max, output_data, output_dims);",
          "1628: void AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
          "1633:   AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width, pad_height,",
          "1634:                   filter_width, filter_height, output_activation_min,",
          "1635:                   output_activation_max, output_data, output_dims);",
          "",
          "[Added Lines]",
          "1623:   return AveragePool(input_data, input_dims, stride_width, stride_height,",
          "1624:                      pad_width, pad_height, filter_width, filter_height,",
          "1625:                      output_activation_min, output_activation_max, output_data,",
          "1626:                      output_dims);",
          "1631: bool AveragePool(const uint8* input_data, const Dims<4>& input_dims, int stride,",
          "1636:   return AveragePool<Ac>(input_data, input_dims, stride, stride, pad_width,",
          "1637:                          pad_height, filter_width, filter_height,",
          "1638:                          output_activation_min, output_activation_max,",
          "1639:                          output_data, output_dims);",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/internal/reference/pooling.h||tensorflow/lite/kernels/internal/reference/pooling.h": [
          "File: tensorflow/lite/kernels/internal/reference/pooling.h -> tensorflow/lite/kernels/internal/reference/pooling.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: namespace tflite {",
          "24: namespace reference_ops {",
          "27:                         const RuntimeShape& input_shape,",
          "28:                         const float* input_data,",
          "29:                         const RuntimeShape& output_shape, float* output_data) {",
          "",
          "[Removed Lines]",
          "26: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "26: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:               filter_count++;",
          "67:             }",
          "68:           }",
          "69:           const float average = total / filter_count;",
          "70:           output_data[Offset(output_shape, batch, out_y, out_x, channel)] =",
          "71:               ActivationFunctionWithMinMax(average, params.float_activation_min,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:       }",
          "75:     }",
          "76:   }",
          "77: }",
          "80:                         const RuntimeShape& input_shape,",
          "81:                         const uint8_t* input_data,",
          "82:                         const RuntimeShape& output_shape,",
          "",
          "[Removed Lines]",
          "79: inline void AveragePool(const PoolParams& params,",
          "",
          "[Added Lines]",
          "78:   return true;",
          "81: inline bool AveragePool(const PoolParams& params,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "122:               filter_count++;",
          "123:             }",
          "124:           }",
          "125:           acc = (acc + filter_count / 2) / filter_count;",
          "126:           acc = std::max(acc, params.quantized_activation_min);",
          "127:           acc = std::min(acc, params.quantized_activation_max);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:           if (filter_count == 0) return false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "131:       }",
          "132:     }",
          "133:   }",
          "134: }",
          "136: inline void L2Pool(const PoolParams& params, const RuntimeShape& input_shape,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:   return true;",
          "",
          "---------------"
        ],
        "tensorflow/lite/kernels/pooling.cc||tensorflow/lite/kernels/pooling.cc": [
          "File: tensorflow/lite/kernels/pooling.cc -> tensorflow/lite/kernels/pooling.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "117: }",
          "119: template <KernelType kernel_type>",
          "123:   float activation_min, activation_max;",
          "124:   CalculateActivationRange(params->activation, &activation_min,",
          "125:                            &activation_max);",
          "139:   if (kernel_type == kReference) {",
          "140:     TF_LITE_AVERAGE_POOL(reference_ops);",
          "141:   } else {",
          "142:     TF_LITE_AVERAGE_POOL(optimized_ops);",
          "143:   }",
          "144: #undef TF_LITE_AVERAGE_POOL",
          "145: }",
          "147: template <KernelType kernel_type>",
          "152:   int32_t activation_min;",
          "153:   int32_t activation_max;",
          "154:   (void)CalculateActivationRangeQuantized(context, params->activation, output,",
          "155:                                           &activation_min, &activation_max);",
          "169:   if (kernel_type == kReference) {",
          "170:     TF_LITE_AVERAGE_POOL(reference_ops);",
          "171:   } else {",
          "172:     TF_LITE_AVERAGE_POOL(optimized_ops);",
          "173:   }",
          "174: #undef TF_LITE_AVERAGE_POOL",
          "175: }",
          "177: template <KernelType kernel_type>",
          "181:   int32_t activation_min;",
          "182:   int32_t activation_max;",
          "184:   (void)CalculateActivationRangeQuantized(context, params->activation, output,",
          "185:                                           &activation_min, &activation_max);",
          "199:   if (kernel_type == kReference) {",
          "200:     TF_LITE_AVERAGE_POOL(reference_integer_ops);",
          "201:   } else {",
          "202:     TF_LITE_AVERAGE_POOL(optimized_integer_ops);",
          "203:   }",
          "204: #undef TF_LITE_AVERAGE_POOL",
          "205: }",
          "207: template <KernelType kernel_type>",
          "212:   int32_t activation_min;",
          "213:   int32_t activation_max;",
          "214:   CalculateActivationRangeQuantized(context, params->activation, output,",
          "215:                                     &activation_min, &activation_max);",
          "229:   TF_LITE_AVERAGE_POOL(reference_integer_ops);",
          "230: #undef TF_LITE_AVERAGE_POOL",
          "231: }",
          "233: template <KernelType kernel_type>",
          "",
          "[Removed Lines]",
          "120: void AverageEvalFloat(TfLiteContext* context, TfLiteNode* node,",
          "121:                       TfLitePoolParams* params, OpData* data,",
          "122:                       const TfLiteTensor* input, TfLiteTensor* output) {",
          "126: #define TF_LITE_AVERAGE_POOL(type)                                       \\",
          "127:   tflite::PoolParams op_params;                                          \\",
          "128:   op_params.stride_height = params->stride_height;                       \\",
          "129:   op_params.stride_width = params->stride_width;                         \\",
          "130:   op_params.filter_height = params->filter_height;                       \\",
          "131:   op_params.filter_width = params->filter_width;                         \\",
          "132:   op_params.padding_values.height = data->padding.height;                \\",
          "133:   op_params.padding_values.width = data->padding.width;                  \\",
          "134:   op_params.float_activation_min = activation_min;                       \\",
          "135:   op_params.float_activation_max = activation_max;                       \\",
          "136:   type::AveragePool(op_params, GetTensorShape(input),                    \\",
          "137:                     GetTensorData<float>(input), GetTensorShape(output), \\",
          "138:                     GetTensorData<float>(output))",
          "148: void AverageEvalQuantizedUint8(TfLiteContext* context, TfLiteNode* node,",
          "149:                                TfLitePoolParams* params, OpData* data,",
          "150:                                const TfLiteTensor* input,",
          "151:                                TfLiteTensor* output) {",
          "156: #define TF_LITE_AVERAGE_POOL(type)                                         \\",
          "157:   tflite::PoolParams op_params;                                            \\",
          "158:   op_params.stride_height = params->stride_height;                         \\",
          "159:   op_params.stride_width = params->stride_width;                           \\",
          "160:   op_params.filter_height = params->filter_height;                         \\",
          "161:   op_params.filter_width = params->filter_width;                           \\",
          "162:   op_params.padding_values.height = data->padding.height;                  \\",
          "163:   op_params.padding_values.width = data->padding.width;                    \\",
          "164:   op_params.quantized_activation_min = activation_min;                     \\",
          "165:   op_params.quantized_activation_max = activation_max;                     \\",
          "166:   type::AveragePool(op_params, GetTensorShape(input),                      \\",
          "167:                     GetTensorData<uint8_t>(input), GetTensorShape(output), \\",
          "168:                     GetTensorData<uint8_t>(output))",
          "178: void AverageEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,",
          "179:                               TfLitePoolParams* params, OpData* data,",
          "180:                               const TfLiteTensor* input, TfLiteTensor* output) {",
          "186: #define TF_LITE_AVERAGE_POOL(type)                                        \\",
          "187:   tflite::PoolParams op_params;                                           \\",
          "188:   op_params.stride_height = params->stride_height;                        \\",
          "189:   op_params.stride_width = params->stride_width;                          \\",
          "190:   op_params.filter_height = params->filter_height;                        \\",
          "191:   op_params.filter_width = params->filter_width;                          \\",
          "192:   op_params.padding_values.height = data->padding.height;                 \\",
          "193:   op_params.padding_values.width = data->padding.width;                   \\",
          "194:   op_params.quantized_activation_min = activation_min;                    \\",
          "195:   op_params.quantized_activation_max = activation_max;                    \\",
          "196:   type::AveragePool(op_params, GetTensorShape(input),                     \\",
          "197:                     GetTensorData<int8_t>(input), GetTensorShape(output), \\",
          "198:                     GetTensorData<int8_t>(output))",
          "208: void AverageEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,",
          "209:                                TfLitePoolParams* params, OpData* data,",
          "210:                                const TfLiteTensor* input,",
          "211:                                TfLiteTensor* output) {",
          "216: #define TF_LITE_AVERAGE_POOL(type)                                         \\",
          "217:   tflite::PoolParams op_params;                                            \\",
          "218:   op_params.stride_height = params->stride_height;                         \\",
          "219:   op_params.stride_width = params->stride_width;                           \\",
          "220:   op_params.filter_height = params->filter_height;                         \\",
          "221:   op_params.filter_width = params->filter_width;                           \\",
          "222:   op_params.padding_values.height = data->padding.height;                  \\",
          "223:   op_params.padding_values.width = data->padding.width;                    \\",
          "224:   op_params.quantized_activation_min = activation_min;                     \\",
          "225:   op_params.quantized_activation_max = activation_max;                     \\",
          "226:   type::AveragePool(op_params, GetTensorShape(input),                      \\",
          "227:                     GetTensorData<int16_t>(input), GetTensorShape(output), \\",
          "228:                     GetTensorData<int16_t>(output))",
          "",
          "[Added Lines]",
          "120: TfLiteStatus AverageEvalFloat(TfLiteContext* context, TfLiteNode* node,",
          "121:                               TfLitePoolParams* params, OpData* data,",
          "122:                               const TfLiteTensor* input, TfLiteTensor* output) {",
          "126: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
          "127:   tflite::PoolParams op_params;                                               \\",
          "128:   op_params.stride_height = params->stride_height;                            \\",
          "129:   op_params.stride_width = params->stride_width;                              \\",
          "130:   op_params.filter_height = params->filter_height;                            \\",
          "131:   op_params.filter_width = params->filter_width;                              \\",
          "132:   op_params.padding_values.height = data->padding.height;                     \\",
          "133:   op_params.padding_values.width = data->padding.width;                       \\",
          "134:   op_params.float_activation_min = activation_min;                            \\",
          "135:   op_params.float_activation_max = activation_max;                            \\",
          "136:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
          "137:                                             GetTensorData<float>(input),      \\",
          "138:                                             GetTensorShape(output),           \\",
          "139:                                             GetTensorData<float>(output)))",
          "146:   return kTfLiteOk;",
          "150: TfLiteStatus AverageEvalQuantizedUint8(TfLiteContext* context, TfLiteNode* node,",
          "151:                                        TfLitePoolParams* params, OpData* data,",
          "152:                                        const TfLiteTensor* input,",
          "153:                                        TfLiteTensor* output) {",
          "158: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
          "159:   tflite::PoolParams op_params;                                               \\",
          "160:   op_params.stride_height = params->stride_height;                            \\",
          "161:   op_params.stride_width = params->stride_width;                              \\",
          "162:   op_params.filter_height = params->filter_height;                            \\",
          "163:   op_params.filter_width = params->filter_width;                              \\",
          "164:   op_params.padding_values.height = data->padding.height;                     \\",
          "165:   op_params.padding_values.width = data->padding.width;                       \\",
          "166:   op_params.quantized_activation_min = activation_min;                        \\",
          "167:   op_params.quantized_activation_max = activation_max;                        \\",
          "168:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
          "169:                                             GetTensorData<uint8_t>(input),    \\",
          "170:                                             GetTensorShape(output),           \\",
          "171:                                             GetTensorData<uint8_t>(output)))",
          "178:   return kTfLiteOk;",
          "182: TfLiteStatus AverageEvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,",
          "183:                                       TfLitePoolParams* params, OpData* data,",
          "184:                                       const TfLiteTensor* input,",
          "185:                                       TfLiteTensor* output) {",
          "191: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
          "192:   tflite::PoolParams op_params;                                               \\",
          "193:   op_params.stride_height = params->stride_height;                            \\",
          "194:   op_params.stride_width = params->stride_width;                              \\",
          "195:   op_params.filter_height = params->filter_height;                            \\",
          "196:   op_params.filter_width = params->filter_width;                              \\",
          "197:   op_params.padding_values.height = data->padding.height;                     \\",
          "198:   op_params.padding_values.width = data->padding.width;                       \\",
          "199:   op_params.quantized_activation_min = activation_min;                        \\",
          "200:   op_params.quantized_activation_max = activation_max;                        \\",
          "201:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
          "202:                                             GetTensorData<int8_t>(input),     \\",
          "203:                                             GetTensorShape(output),           \\",
          "204:                                             GetTensorData<int8_t>(output)))",
          "211:   return kTfLiteOk;",
          "215: TfLiteStatus AverageEvalQuantizedInt16(TfLiteContext* context, TfLiteNode* node,",
          "216:                                        TfLitePoolParams* params, OpData* data,",
          "217:                                        const TfLiteTensor* input,",
          "218:                                        TfLiteTensor* output) {",
          "223: #define TF_LITE_AVERAGE_POOL(type)                                            \\",
          "224:   tflite::PoolParams op_params;                                               \\",
          "225:   op_params.stride_height = params->stride_height;                            \\",
          "226:   op_params.stride_width = params->stride_width;                              \\",
          "227:   op_params.filter_height = params->filter_height;                            \\",
          "228:   op_params.filter_width = params->filter_width;                              \\",
          "229:   op_params.padding_values.height = data->padding.height;                     \\",
          "230:   op_params.padding_values.width = data->padding.width;                       \\",
          "231:   op_params.quantized_activation_min = activation_min;                        \\",
          "232:   op_params.quantized_activation_max = activation_max;                        \\",
          "233:   TF_LITE_ENSURE(context, type::AveragePool(op_params, GetTensorShape(input), \\",
          "234:                                             GetTensorData<int16_t>(input),    \\",
          "235:                                             GetTensorShape(output),           \\",
          "236:                                             GetTensorData<int16_t>(output)))",
          "239:   return kTfLiteOk;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "380:   TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &input));",
          "381:   switch (input->type) {  // Already know in/out types are same.",
          "382:     case kTfLiteFloat32:",
          "385:     case kTfLiteUInt8:",
          "389:     case kTfLiteInt8:",
          "393:     case kTfLiteInt16:",
          "397:     default:",
          "398:       TF_LITE_KERNEL_LOG(context, \"Type %s not currently supported.\",",
          "399:                          TfLiteTypeGetName(input->type));",
          "",
          "[Removed Lines]",
          "383:       AverageEvalFloat<kernel_type>(context, node, params, data, input, output);",
          "384:       break;",
          "386:       AverageEvalQuantizedUint8<kernel_type>(context, node, params, data, input,",
          "387:                                              output);",
          "388:       break;",
          "390:       AverageEvalQuantizedInt8<kernel_type>(context, node, params, data, input,",
          "391:                                             output);",
          "392:       break;",
          "394:       AverageEvalQuantizedInt16<kernel_type>(context, node, params, data, input,",
          "395:                                              output);",
          "396:       break;",
          "",
          "[Added Lines]",
          "392:       return AverageEvalFloat<kernel_type>(context, node, params, data, input,",
          "393:                                            output);",
          "395:       return AverageEvalQuantizedUint8<kernel_type>(context, node, params, data,",
          "396:                                                     input, output);",
          "398:       return AverageEvalQuantizedInt8<kernel_type>(context, node, params, data,",
          "399:                                                    input, output);",
          "401:       return AverageEvalQuantizedInt16<kernel_type>(context, node, params, data,",
          "402:                                                     input, output);",
          "",
          "---------------"
        ]
      }
    }
  ]
}