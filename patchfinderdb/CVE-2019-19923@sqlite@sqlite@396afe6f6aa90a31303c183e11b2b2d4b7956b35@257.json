{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5198ff5767c4367124c3aecbb483c209c2f0b17b",
      "candidate_info": {
        "commit_hash": "5198ff5767c4367124c3aecbb483c209c2f0b17b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5198ff5767c4367124c3aecbb483c209c2f0b17b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/autoindex1.test",
          "test/eqp.test",
          "test/rowvalue4.test"
        ],
        "message": "Do not generate subroutines for non-static SELECT and EXISTS expressions. Fix up some test cases to account for the minor changes in EXPLAIN QUERY PLAN output.\n\nFossilOrigin-Name: 06de44ec9e173992ca9afb89dd2b4e40d2a7e35512c7959603cdceb606f5dfbd",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/autoindex1.test||test/autoindex1.test",
          "test/eqp.test||test/eqp.test",
          "test/rowvalue4.test||test/rowvalue4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b24d3fb94e787d25e49501714780dfb0c0c99077102056aa68445f4808cdd57",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2865:   Vdbe *v = pParse->pVdbe;",
          "2866:   assert( v!=0 );",
          "",
          "[Removed Lines]",
          "2869:   if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2870:     sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn, pExpr->y.sub.iAddr);",
          "2871:     return pExpr->iTable;",
          "2872:   }",
          "2875:   ExprSetProperty(pExpr, EP_Subrtn);",
          "2876:   pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2877:   pExpr->y.sub.iAddr =",
          "2878:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2879:   VdbeComment((v, \"return address\"));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2891:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "2892:     addrOnce = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "2893:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2881:     if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2882:       sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn,",
          "2883:                         pExpr->y.sub.iAddr);",
          "2884:       return pExpr->iTable;",
          "2885:     }",
          "2888:     ExprSetProperty(pExpr, EP_Subrtn);",
          "2889:     pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2890:     pExpr->y.sub.iAddr =",
          "2891:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2892:     VdbeComment((v, \"return address\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2939:   ExprSetVVAProperty(pExpr, EP_NoReduce);",
          "2940:   if( addrOnce ){",
          "2941:     sqlite3VdbeJumpHere(v, addrOnce);",
          "2948:   return rReg;",
          "2949: }",
          "",
          "[Removed Lines]",
          "2942:   }",
          "2945:   sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2946:   sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "",
          "[Added Lines]",
          "2946:     sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2947:     sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "2948:   }",
          "",
          "---------------"
        ],
        "test/autoindex1.test||test/autoindex1.test": [
          "File: test/autoindex1.test -> test/autoindex1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: } {",
          "185:   QUERY PLAN",
          "186:   |--SEARCH TABLE t501 USING INTEGER PRIMARY KEY (rowid=?)",
          "188:      `--SCAN TABLE t502",
          "189: }",
          "190: do_eqp_test autoindex1-501 {",
          "",
          "[Removed Lines]",
          "187:   `--LIST SUBQUERY",
          "",
          "[Added Lines]",
          "187:   `--LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "193: } {",
          "194:   QUERY PLAN",
          "195:   |--SCAN TABLE t501",
          "197:      `--SEARCH TABLE t502 USING AUTOMATIC COVERING INDEX (y=?)",
          "198: }",
          "199: do_eqp_test autoindex1-502 {",
          "",
          "[Removed Lines]",
          "196:   `--CORRELATED LIST SUBQUERY",
          "",
          "[Added Lines]",
          "196:   `--CORRELATED LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203: } {",
          "204:   QUERY PLAN",
          "205:   |--SEARCH TABLE t501 USING INTEGER PRIMARY KEY (rowid=?)",
          "207:      `--SCAN TABLE t502",
          "208: }",
          "",
          "[Removed Lines]",
          "206:   `--CORRELATED LIST SUBQUERY",
          "",
          "[Added Lines]",
          "206:   `--CORRELATED LIST SUBQUERY xxxxxx",
          "",
          "---------------"
        ],
        "test/eqp.test||test/eqp.test": [
          "File: test/eqp.test -> test/eqp.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "286: } {",
          "287:   QUERY PLAN",
          "288:   |--SCAN TABLE t1",
          "290:      `--SCAN TABLE t2",
          "291: }",
          "292: det 3.3.2 {",
          "",
          "[Removed Lines]",
          "289:   `--LIST SUBQUERY",
          "",
          "[Added Lines]",
          "289:   `--LIST SUBQUERY xxxxxx",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "294: } {",
          "295:   QUERY PLAN",
          "296:   |--SCAN TABLE t1",
          "298:      `--SCAN TABLE t2",
          "299: }",
          "300: det 3.3.3 {",
          "",
          "[Removed Lines]",
          "297:   `--CORRELATED LIST SUBQUERY",
          "",
          "[Added Lines]",
          "297:   `--CORRELATED LIST SUBQUERY xxxxxx",
          "",
          "---------------"
        ],
        "test/rowvalue4.test||test/rowvalue4.test": [
          "File: test/rowvalue4.test -> test/rowvalue4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "235: } {",
          "236:   QUERY PLAN",
          "237:   |--SEARCH TABLE d2 USING INDEX d2ab (a=? AND b=?)",
          "239:   |  `--SCAN TABLE d1",
          "241:      `--SCAN TABLE d1",
          "242: }",
          "",
          "[Removed Lines]",
          "238:   |--LIST SUBQUERY",
          "240:   `--LIST SUBQUERY",
          "",
          "[Added Lines]",
          "238:   |--LIST SUBQUERY xxxxxx",
          "240:   `--LIST SUBQUERY xxxxxx",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9101623a320a83ed5bcbc3086b6f4b3517d5a70",
      "candidate_info": {
        "commit_hash": "f9101623a320a83ed5bcbc3086b6f4b3517d5a70",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f9101623a320a83ed5bcbc3086b6f4b3517d5a70",
        "files": [
          "ext/misc/vfsstat.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Register the \"vfsstat\" virtual table immediately when loading the vfsstat.c extension.\n\nFossilOrigin-Name: 9bd92afd0cb0a958441e861c7006b77027125b1ceea0868958ec948b6b3c7bc9",
        "before_after_code_files": [
          "ext/misc/vfsstat.c||ext/misc/vfsstat.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/vfsstat.c||ext/misc/vfsstat.c": [
          "File: ext/misc/vfsstat.c -> ext/misc/vfsstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "784: static int vstatRegister(",
          "785:   sqlite3 *db,",
          "788: ){",
          "789:   return sqlite3_create_module(db, \"vfsstat\", &VfsStatModule, 0);",
          "790: }",
          "",
          "[Removed Lines]",
          "786:   const char **pzErrMsg,",
          "787:   const struct sqlite3_api_routines *pThunk",
          "",
          "[Added Lines]",
          "786:   char **pzErrMsg,",
          "787:   const sqlite3_api_routines *pThunk",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "809:   vstat_vfs.base.szOsFile = sizeof(VStatFile) + vstat_vfs.pVfs->szOsFile;",
          "810:   rc = sqlite3_vfs_register(&vstat_vfs.base, 1);",
          "811:   if( rc==SQLITE_OK ){",
          "813:   }",
          "814:   if( rc==SQLITE_OK ) rc = SQLITE_OK_LOAD_PERMANENTLY;",
          "815:   return rc;",
          "",
          "[Removed Lines]",
          "812:     rc = sqlite3_auto_extension(vstatRegister);",
          "",
          "[Added Lines]",
          "812:     rc = vstatRegister(db, pzErrMsg, pApi);",
          "813:     if( rc==SQLITE_OK ){",
          "814:       rc = sqlite3_auto_extension(vstatRegister);",
          "815:     }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ab2356f580384e4b40d128fc04fd6bc4dfcf50109df77d05d59adcc20f339066",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a31d3554c5daaff3c9e8d411879c6185b75073a0",
      "candidate_info": {
        "commit_hash": "a31d3554c5daaff3c9e8d411879c6185b75073a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a31d3554c5daaff3c9e8d411879c6185b75073a0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Revise the VDBE comments for NULL-scan so that they also work make sense when reading a NULLS FIRST plan.\n\nFossilOrigin-Name: bfe793780fa6fc7a1e7d0ee60606dda272985de9573887dca118e9510fc609f2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1383680d927d7d703933be7653c0019199845e7f7e82bcc76d9ca3808093e9d8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1691:       }",
          "1692:       if( regBignull ){",
          "1693:         sqlite3VdbeAddOp2(v, OP_Integer, 1, regBignull);",
          "1695:       }",
          "1697:       op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "",
          "[Removed Lines]",
          "1694:         VdbeComment((v, \"NULL-scan needed flag\"));",
          "",
          "[Added Lines]",
          "1694:         VdbeComment((v, \"NULL-scan pass ctr\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1769:       if( regBignull ){",
          "1771:         sqlite3VdbeAddOp2(v, OP_IfNot, regBignull, sqlite3VdbeCurrentAddr(v)+3);",
          "1773:         VdbeCoverage(v);",
          "1774:       }",
          "1775:       op = aEndOp[bRev*2 + endEq];",
          "",
          "[Removed Lines]",
          "1772:         VdbeComment((v, \"If NULL-scan active\"));",
          "",
          "[Added Lines]",
          "1772:         VdbeComment((v, \"If NULL-scan 2nd pass\"));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1786:       assert( bSeekPastNull+bStopAtNull==1 );",
          "1787:       assert( nConstraint+bSeekPastNull>0 );",
          "1788:       sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1790:       VdbeCoverage(v);",
          "1791:       op = aEndOp[bRev*2 + bSeekPastNull];",
          "1792:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase,",
          "",
          "[Removed Lines]",
          "1789:       VdbeComment((v, \"If NULL-scan pending\"));",
          "",
          "[Added Lines]",
          "1789:       VdbeComment((v, \"If NULL-scan 1st pass\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1c70f71e12bfaf07d851d1263ff872eb46bc8501",
      "candidate_info": {
        "commit_hash": "1c70f71e12bfaf07d851d1263ff872eb46bc8501",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1c70f71e12bfaf07d851d1263ff872eb46bc8501",
        "files": [
          "ext/misc/fossildelta.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid redefining types u32 and u16 when fossildelta.c is compiled as part of the amalgamation.\n\nFossilOrigin-Name: d8e88248e3204b5f2b95b9b8921ee7ee2f7574ae81e6abd5b4f2ddf187f7d71b",
        "before_after_code_files": [
          "ext/misc/fossildelta.c||ext/misc/fossildelta.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fossildelta.c||ext/misc/fossildelta.c": [
          "File: ext/misc/fossildelta.c -> ext/misc/fossildelta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include \"sqlite3ext.h\"",
          "37: SQLITE_EXTENSION_INIT1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: #ifndef SQLITE_AMALGAMATION",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f60a83069168899dcfd706b4d0901084c7ce92d85277950317e962a8a98ec668",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8614259c17898e60a8f8da73d14bc404c0ebded",
      "candidate_info": {
        "commit_hash": "a8614259c17898e60a8f8da73d14bc404c0ebded",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a8614259c17898e60a8f8da73d14bc404c0ebded",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/index_usage.c"
        ],
        "message": "Add the --progress, --using, and -q options to the index_usage utility program.\n\nFossilOrigin-Name: a5e6be7cbc5d931308ddcc073c9cd6275c9711cae055d72a7c4aa71c1d15914c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/index_usage.c||tool/index_usage.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 19c739b4a8a43d894e37a99fa34838f3e3fa1fe0d019aefbc33f1d38d76af1a4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/index_usage.c||tool/index_usage.c": [
          "File: tool/index_usage.c -> tool/index_usage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <string.h>",
          "23: static void usage(const char *argv0){",
          "25:   printf(",
          "26:     \"DATABASE is an SQLite database against which various statements\\n\"",
          "27:     \"have been run.  The SQL text is stored in LOG.  LOG is an SQLite\\n\"",
          "",
          "[Removed Lines]",
          "24:   printf(\"Usage: %s DATABASE LOG\\n\\n\", argv0);",
          "",
          "[Added Lines]",
          "24:   printf(\"Usage: %s [OPTIONS] DATABASE LOG\\n\\n\", argv0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     \"DATABASE only needs to contain the schema used by the statements in\\n\"",
          "37:     \"LOG. The content can be removed from DATABASE.\\n\"",
          "38:   );",
          "39:   printf(\"\\nAnalysis will be done by SQLite version %s dated %.20s\\n\"",
          "40:          \"checkin number %.40s. Different versions\\n\"",
          "41:          \"of SQLite might use different indexes.\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:   printf(",
          "40:     \"\\nOPTIONS:\\n\\n\"",
          "41:     \"    --progress N   Show a progress message after every N input rows\\n\"",
          "42:     \"    -q             Omit error message when parsing log entries\\n\"",
          "43:     \"    --using NAME   Print SQL statements that use index NAME\\n\"",
          "44:   );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:   char *zSql;",
          "50:   int nErr = 0;",
          "51:   int rc;",
          "53:   if( argc!=3 ) usage(argv[0]);",
          "54:   rc = sqlite3_open_v2(argv[1], &db, SQLITE_OPEN_READONLY, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:   int bQuiet = 0;",
          "59:   int i, j;",
          "60:   const char *zUsing = 0;",
          "61:   sqlite3_stmt *pIncrCnt = 0;",
          "62:   int nRow = 0;",
          "63:   int iProgress = 0;",
          "65:   for(i=j=1; i<argc; i++){",
          "66:     const char *z = argv[i];",
          "67:     if( z[0]=='-' ){",
          "68:       z++;",
          "69:       if( z[0]=='-' ) z++;",
          "70:       if( strcmp(z,\"progress\")==0 ){",
          "71:         if( i+1<argc ){",
          "72:           iProgress = strtol(argv[++i],0,0);",
          "73:           continue;",
          "74:         }",
          "75:         printf(\"The --progress option requires an argument\\n\");",
          "76:         exit(0);",
          "77:       }",
          "78:       if( strcmp(z,\"q\")==0 ){",
          "79:         bQuiet = 1;",
          "80:         continue;",
          "81:       }",
          "82:       if( strcmp(z,\"using\")==0 ){",
          "83:         if( i+1<argc ){",
          "84:           zUsing = argv[++i];",
          "85:           continue;",
          "86:         }",
          "87:         printf(\"The --using option requires an argument\\n\");",
          "88:         exit(0);",
          "89:       }",
          "90:       if( strcmp(z, \"help\")==0 || strcmp(z, \"?\")==0 ){",
          "91:         usage(argv[0]);",
          "92:       }",
          "93:       printf(\"Unknown command-line option: \\\"%s\\\"\\n\", argv[i]);",
          "94:       exit(0);",
          "95:     }else{",
          "96:       if( j<i ) argv[j++] = argv[i];",
          "97:     }",
          "98:   }",
          "99:   argc = j;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66:   pStmt = 0;",
          "67:   rc = sqlite3_exec(db,",
          "68:      \"CREATE TABLE temp.idxu(\\n\"",
          "71:      \"  cnt INT,\\n\"",
          "72:      \"  PRIMARY KEY(idx)\\n\"",
          "73:      \") WITHOUT ROWID;\", 0, 0, 0);",
          "",
          "[Removed Lines]",
          "69:      \"  tbl TEXT,\\n\"",
          "70:      \"  idx TEXT,\\n\"",
          "",
          "[Added Lines]",
          "117:      \"  tbl TEXT COLLATE nocase,\\n\"",
          "118:      \"  idx TEXT COLLATE nocase,\\n\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100:     goto errorOut;",
          "101:   }",
          "104:   while( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "105:     const char *zLog = (const char*)sqlite3_column_text(pStmt, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:   rc = sqlite3_prepare_v2(db,",
          "152:     \"UPDATE temp.idxu SET cnt=cnt+1 WHERE idx=?1\",",
          "153:     -1, &pIncrCnt, 0);",
          "154:   if( rc ){",
          "155:     printf(\"Cannot prepare a statement to increment a counter for \"",
          "156:            \"indexes used\\n\");",
          "157:     goto errorOut;",
          "158:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "109:     rc = sqlite3_prepare_v2(db, zSql, -1, &pS2, 0);",
          "110:     sqlite3_free(zSql);",
          "111:     if( rc ){",
          "113:              sqlite3_column_int(pStmt, 1), zLog, sqlite3_errmsg(db));",
          "114:       nErr++;",
          "115:     }else{",
          "116:       while( sqlite3_step(pS2)==SQLITE_ROW ){",
          "117:         const char *zExplain = (const char*)sqlite3_column_text(pS2,3);",
          "118:         const char *z1, *z2;",
          "",
          "[Removed Lines]",
          "112:       printf(\"Cannot compile LOG entry %d (%s): %s\\n\",",
          "",
          "[Added Lines]",
          "169:       if( !bQuiet ){",
          "170:         printf(\"Cannot compile LOG entry %d (%s): %s\\n\",",
          "172:         fflush(stdout);",
          "173:       }",
          "176:       nRow++;",
          "177:       if( iProgress>0 && (nRow%iProgress)==0 ){",
          "178:         printf(\"%d...\\n\", nRow);",
          "179:         fflush(stdout);",
          "180:       }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "123:         z1 += 13;",
          "124:         for(z2=z1+1; z2[1] && z2[1]!='('; z2++){}",
          "125:         n = z2 - z1;",
          "132:       }",
          "133:     }",
          "134:     sqlite3_finalize(pS2);",
          "",
          "[Removed Lines]",
          "126:         zSql = sqlite3_mprintf(",
          "127:           \"UPDATE temp.idxu SET cnt=cnt+1 WHERE idx='%.*q'\", n, z1",
          "128:         );",
          "130:         sqlite3_exec(db, zSql, 0, 0, 0);",
          "131:         sqlite3_free(zSql);",
          "",
          "[Added Lines]",
          "191:         if( zUsing && sqlite3_strnicmp(zUsing, z1, n)==0 ){",
          "192:           printf(\"Using %s:\\n%s\\n\", zUsing, zLog);",
          "193:           fflush(stdout);",
          "194:         }",
          "195:         sqlite3_bind_text(pIncrCnt,1,z1,n,SQLITE_STATIC);",
          "196:         sqlite3_step(pIncrCnt);",
          "197:         sqlite3_reset(pIncrCnt);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "160:   pStmt = 0;",
          "162: errorOut:",
          "163:   sqlite3_finalize(pStmt);",
          "164:   sqlite3_close(db);",
          "165:   return nErr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229:   sqlite3_finalize(pIncrCnt);",
          "",
          "---------------"
        ]
      }
    }
  ]
}