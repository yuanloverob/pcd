{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0b277a980a799a4fc3e17d8f44fce6a3ea1eb8d8",
      "candidate_info": {
        "commit_hash": "0b277a980a799a4fc3e17d8f44fce6a3ea1eb8d8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0b277a980a799a4fc3e17d8f44fce6a3ea1eb8d8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/altertab3.test"
        ],
        "message": "Have the ALTER TABLE code handle the case where an entire expression that includes a sub-select is excluded from a view, trigger or index.\n\nFossilOrigin-Name: f2c8179f3c0b77f10da3f9b0771db4dec30d0bbf0b7f4751ce439bfb08da8f6f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36ea13e0a851a749c9ef292377ecd82dbd4797d38df907b362487fa234c98ca5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "727:   return WRC_Continue;",
          "728: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "733: static int renameUnmapSelectCb(Walker *pWalker, Select *p){",
          "734:   if( p->pSrc ){",
          "735:     Parse *pParse = pWalker->pParse;",
          "736:     int i;",
          "737:     for(i=0; i<p->pSrc->nSrc; i++){",
          "738:       sqlite3RenameTokenRemap(pParse, 0, (void*)p->pSrc->a[0].zName);",
          "739:     }",
          "740:   }",
          "741:   return WRC_Continue;",
          "742: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "735:   memset(&sWalker, 0, sizeof(Walker));",
          "736:   sWalker.pParse = pParse;",
          "737:   sWalker.xExprCallback = renameUnmapExprCb;",
          "738:   sqlite3WalkExpr(&sWalker, pExpr);",
          "739: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "752:   sWalker.xSelectCallback = renameUnmapSelectCb;",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:   db close",
          "207: } {}",
          "211: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "208: #-------------------------------------------------------------------------",
          "209: reset_db",
          "210: do_execsql_test 9.1 {",
          "211:   CREATE TABLE t1(a,b,c);",
          "212:   CREATE TRIGGER AFTER INSERT ON t1 WHEN new.a NOT NULL BEGIN",
          "213:     SELECT true WHERE (SELECT a, b FROM (t1)) IN ();",
          "214:   END;",
          "215: }",
          "217: do_execsql_test 9.2 {",
          "218:   ALTER TABLE t1 RENAME TO t1x;",
          "219: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7e48dc629f2703f1130ee792705374f8b72622c",
      "candidate_info": {
        "commit_hash": "e7e48dc629f2703f1130ee792705374f8b72622c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7e48dc629f2703f1130ee792705374f8b72622c",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest_data.tcl"
        ],
        "message": "Add \"set TMP=%CD%\" to the start of each msvc script output by releasetest_data.tcl. Otherwise, since binaries compiled with SQLITE_TEST all choose the same sequence of pseudo-random numbers, collisions between temp file names cause errors when running multiple tests in parallel.\n\nFossilOrigin-Name: f5d0436d8dc650cadb61a5fe76fd1a0d68dabba54ff0c2a8c138f9dfbdab1c3f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest_data.tcl||test/releasetest_data.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8158d2aca68c5a253054376fdf1b8eaab2db874f4b93524742be7340e9c50dd5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "546:     set makecmd    \"nmake /f %SRCDIR%\\\\Makefile.msc TOP=%SRCDIR% $target \"",
          "547:     append makecmd \"\\\"CFLAGS=$cflags\\\" \\\"OPTS=$opts\\\" $makeOpts\"",
          "549:     puts $makecmd",
          "550:   }",
          "551: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "549:     puts \"set TMP=%CD%\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "505ae9def80b7b45e37a454064f1cf23df26bdf1",
      "candidate_info": {
        "commit_hash": "505ae9def80b7b45e37a454064f1cf23df26bdf1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/505ae9def80b7b45e37a454064f1cf23df26bdf1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Add additional VDBE coverage marcros.\n\nFossilOrigin-Name: d3531f5be7d3769689e2cd8bdc9bab5608759de027d44cc123996f32a4a89583",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 63e625c8eb06720eef30573aa562e38c90d228a9cf493f8bb59f09e50f0e3168",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1710:           start_constraints = (nConstraint>1);",
          "1711:           op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "1712:           sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint-1);",
          "1713:         }else{",
          "1714:           op = aStartOp[(start_constraints<<2) + ((!startEq)<<1) + bRev];",
          "1715:           sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1716:         }",
          "1717:       }",
          "1718:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1713:           VdbeCoverage(v);",
          "1714:           VdbeCoverageIf(v, op==OP_Rewind);  testcase( op==OP_Rewind );",
          "1715:           VdbeCoverageIf(v, op==OP_Last);    testcase( op==OP_Last );",
          "1716:           VdbeCoverageIf(v, op==OP_SeekGT);  testcase( op==OP_SeekGT );",
          "1717:           VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1718:           VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1719:           VdbeCoverageIf(v, op==OP_SeekLT);  testcase( op==OP_SeekLT );",
          "1723:           VdbeCoverage(v);",
          "1724:           VdbeCoverageIf(v, op==OP_Rewind);  testcase( op==OP_Rewind );",
          "1725:           VdbeCoverageIf(v, op==OP_Last);    testcase( op==OP_Last );",
          "1726:           VdbeCoverageIf(v, op==OP_SeekGT);  testcase( op==OP_SeekGT );",
          "1727:           VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1728:           VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1729:           VdbeCoverageIf(v, op==OP_SeekLT);  testcase( op==OP_SeekLT );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1762:     if( nConstraint ){",
          "1763:       if( regBignull ){",
          "1764:         sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+3);",
          "1765:       }",
          "1766:       op = aEndOp[bRev*2 + endEq];",
          "1767:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1779:         VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1772:     }",
          "1773:     if( regBignull ){",
          "1774:       sqlite3VdbeAddOp2(v, OP_IfNot, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1775:       if( bStopAtNull ){",
          "1776:         op = aEndOp[bRev*2 + 0];",
          "1777:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1778:       }else{",
          "1779:         op = aEndOp[bRev*2 + endEq];",
          "1780:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint+1);",
          "1781:       }",
          "1782:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1790:       VdbeCoverage(v);",
          "1793:         assert( op==OP_IdxGE || op==OP_IdxLE );",
          "1795:         testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1796:         testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1800:         testcase( op==OP_IdxGT );  VdbeCoverageIf(v, op==OP_IdxGT );",
          "1801:         testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1802:         testcase( op==OP_IdxLT );  VdbeCoverageIf(v, op==OP_IdxLT );",
          "1803:         testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1757fed87f0705c8df065e5d697e989acd295a29",
      "candidate_info": {
        "commit_hash": "1757fed87f0705c8df065e5d697e989acd295a29",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1757fed87f0705c8df065e5d697e989acd295a29",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pcache1.c"
        ],
        "message": "Adjustments to the page cache to try to avoid harmless TSAN warnings.\n\nFossilOrigin-Name: 383437be276719ac1c72688ae81017c63907ac561f2ffb8e42c43b012248f294",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pcache1.c||src/pcache1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fc5ecc88f8a0855ba90039177ee284721b2035e4de56a1024e323216f011f0af",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "785:       pGroup->mxPinned = pGroup->nMaxPage + 10 - pGroup->nMinPage;",
          "786:       pCache->pnPurgeable = &pGroup->nPurgeable;",
          "787:     }else{",
          "790:     }",
          "791:     pcache1LeaveMutex(pGroup);",
          "792:     if( pCache->nHash==0 ){",
          "",
          "[Removed Lines]",
          "788:       static unsigned int dummyCurrentPage;",
          "789:       pCache->pnPurgeable = &dummyCurrentPage;",
          "",
          "[Added Lines]",
          "789:       pCache->pnPurgeable = &pCache->nPurgeableDummy;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c24585570269bd4712ec13e747aa7f26739dd792",
      "candidate_info": {
        "commit_hash": "c24585570269bd4712ec13e747aa7f26739dd792",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c24585570269bd4712ec13e747aa7f26739dd792",
        "files": [
          "ext/rbu/rbu_common.tcl",
          "ext/rbu/rbupartial.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Optimize some cases of restarting an RBU vacuum.\n\nFossilOrigin-Name: cdc09867ed6522026ae7bfac1f59cd79b60fba6d07d49b99b030a501a7059ee4",
        "before_after_code_files": [
          "ext/rbu/rbu_common.tcl||ext/rbu/rbu_common.tcl",
          "ext/rbu/rbupartial.test||ext/rbu/rbupartial.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbu_common.tcl||ext/rbu/rbu_common.tcl": [
          "File: ext/rbu/rbu_common.tcl -> ext/rbu/rbu_common.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "89: proc do_rbu_vacuum_test {tn step {statedb state.db}} {",
          "90:   forcedelete $statedb",
          "91:   if {$statedb==\"\" && $step==1} breakpoint",
          "94:     while 1 {",
          "96:       set state [rbu state]",
          "97:       check_prestep_state test.db $state",
          "98:       set rc [rbu step]",
          "99:       check_poststep_state $rc test.db $state",
          "100:       if {$rc!=\"SQLITE_OK\"} break",
          "102:     }",
          "103:     rbu close",
          "104:   }] {SQLITE_DONE}]",
          "",
          "[Removed Lines]",
          "92:   uplevel [list do_test $tn.1 [string map [list %state% $statedb] {",
          "93:     if {$step==0} { sqlite3rbu_vacuum rbu test.db {%state%}}",
          "95:       if {$step==1} { sqlite3rbu_vacuum rbu test.db {%state%}}",
          "101:       if {$step==1} { rbu close }",
          "",
          "[Added Lines]",
          "92:   uplevel [list do_test $tn.1 [string map [list %state% $statedb %step% $step] {",
          "93:     if {%step%==0} { sqlite3rbu_vacuum rbu test.db {%state%}}",
          "95:       if {%step%==1} { sqlite3rbu_vacuum rbu test.db {%state%}}",
          "101:       if {%step%==1} { rbu close }",
          "",
          "---------------"
        ],
        "ext/rbu/rbupartial.test||ext/rbu/rbupartial.test": [
          "File: ext/rbu/rbupartial.test -> ext/rbu/rbupartial.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   set step 0",
          "82:   do_rbu_vacuum_test $tn.1.5 0",
          "83:   }]",
          "84: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:   do_test $tn.1.6 {",
          "85:     execsql { PRAGMA integrity_check }",
          "86:   } {ok}",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1381:         }",
          "1383:         pIter->azTblType[iOrder] = rbuStrndup(zType, &p->rc);",
          "1385:         pIter->abNotNull[iOrder] = (u8)bNotNull || (iPk!=0);",
          "1386:         iOrder++;",
          "1387:       }",
          "",
          "[Removed Lines]",
          "1384:         pIter->abTblPk[iOrder] = (iPk!=0);",
          "",
          "[Added Lines]",
          "1384:         assert( iPk>=0 );",
          "1385:         pIter->abTblPk[iOrder] = (u8)iPk;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1416:   return zList;",
          "1417: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1420: static char *rbuObjIterGetPkList(",
          "1423:   const char *zExtra",
          "1424: ){",
          "1425:   int iPk = 1;",
          "1426:   char *zRet = 0;",
          "1427:   const char *zSep = \"\";",
          "1428:   while( 1 ){",
          "1429:     int i;",
          "1430:     for(i=0; i<pIter->nTblCol; i++){",
          "1431:       if( (int)pIter->abTblPk[i]==iPk ){",
          "1432:         const char *zCol = pIter->azTblCol[i];",
          "1433:         zRet = rbuMPrintf(p, \"%z%s\\\"%w\\\"%s\", zRet, zSep, zCol, zExtra);",
          "1434:         zSep = \", \";",
          "1435:       }",
          "1436:     }",
          "1437:     if( i==pIter->nTblCol ) break;",
          "1438:     iPk++;",
          "1439:   }",
          "1440:   return zRet;",
          "1441: }",
          "1443: static char *rbuVacuumTableStart(",
          "1444:   sqlite3rbu *p,",
          "1445:   RbuObjIter *pIter,",
          "1446:   int bRowid,",
          "1447:   const char *zWrite",
          "1448: ){",
          "1449:   sqlite3_stmt *pMax = 0;",
          "1450:   char *zRet = 0;",
          "1451:   if( bRowid ){",
          "1452:     p->rc = prepareFreeAndCollectError(p->dbMain, &pMax, &p->zErrmsg,",
          "1453:         sqlite3_mprintf(",
          "1454:           \"SELECT max(_rowid_) FROM \\\"%s%w\\\"\", zWrite, pIter->zTbl",
          "1455:         )",
          "1456:     );",
          "1457:     if( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pMax) ){",
          "1458:       sqlite3_int64 iMax = sqlite3_column_int64(pMax, 0);",
          "1459:       zRet = rbuMPrintf(p, \" WHERE _rowid_ > %lld \", iMax);",
          "1460:     }",
          "1461:     rbuFinalize(p, pMax);",
          "1462:   }else{",
          "1463:     char *zOrder = 0;",
          "1464:     char *zSelect = 0;",
          "1465:     char *zList = 0;",
          "1466:     int iPk = 1;",
          "1467:     const char *zSep = \"\";",
          "1468:     const char *zSep2 = \"\";",
          "1469:     while( 1 ){",
          "1470:       int i;",
          "1471:       for(i=0; i<pIter->nTblCol; i++){",
          "1472:         if( (int)pIter->abTblPk[i]==iPk ){",
          "1473:           const char *zCol = pIter->azTblCol[i];",
          "1474:           zOrder = rbuMPrintf(p, \"%z%s\\\"%w\\\" DESC\", zOrder, zSep, zCol);",
          "1475:           zList = rbuMPrintf(p, \"%z%s\\\"%w\\\"\", zList, zSep, zCol);",
          "1476:           zSelect = rbuMPrintf(p, \"%z%squote(\\\"%w\\\")\", zSelect, zSep2, zCol);",
          "1477:           zSep = \", \";",
          "1478:           zSep2 = \"||','||\";",
          "1479:         }",
          "1480:       }",
          "1481:       if( i==pIter->nTblCol ) break;",
          "1482:       iPk++;",
          "1483:     }",
          "1485:     if( p->rc==SQLITE_OK ){",
          "1486:       p->rc = prepareFreeAndCollectError(p->dbMain, &pMax, &p->zErrmsg,",
          "1487:           sqlite3_mprintf(",
          "1488:             \"SELECT %s FROM \\\"%s%w\\\" ORDER BY %s LIMIT 1\",",
          "1489:                 zSelect, zWrite, pIter->zTbl, zOrder",
          "1490:           )",
          "1491:       );",
          "1492:       if( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pMax) ){",
          "1493:         const char *zVal = (const char*)sqlite3_column_text(pMax, 0);",
          "1494:         zRet = rbuMPrintf(p, \" WHERE (%s) > (%s) \", zList, zVal);",
          "1495:       }",
          "1496:       rbuFinalize(p, pMax);",
          "1497:     }",
          "1499:     sqlite3_free(zOrder);",
          "1500:     sqlite3_free(zSelect);",
          "1501:     sqlite3_free(zList);",
          "1502:   }",
          "1503:   return zRet;",
          "1504: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2221:       if( p->rc==SQLITE_OK ){",
          "2222:         const char *zRbuRowid = \"\";",
          "2223:         if( bRbuRowid ){",
          "2224:           zRbuRowid = rbuIsVacuum(p) ? \",_rowid_ \" : \",rbu_rowid\";",
          "2225:         }",
          "2235:       }",
          "2237:       sqlite3_free(zWhere);",
          "",
          "[Removed Lines]",
          "2226:         p->rc = prepareFreeAndCollectError(p->dbRbu, &pIter->pSelect, pz,",
          "2227:             sqlite3_mprintf(",
          "2228:               \"SELECT %s,%s rbu_control%s FROM '%q'%s\",",
          "2229:               zCollist,",
          "2230:               (rbuIsVacuum(p) ? \"0 AS \" : \"\"),",
          "2231:               zRbuRowid,",
          "2232:               pIter->zDataTbl, zLimit",
          "2233:             )",
          "2234:         );",
          "",
          "[Added Lines]",
          "2310:         char *zStart = 0;",
          "2311:         char *zOrder = 0;",
          "2316:         if( rbuIsVacuum(p) ){",
          "2317:           if( nOffset ){",
          "2318:             zStart = rbuVacuumTableStart(p, pIter, bRbuRowid, zWrite);",
          "2319:             if( zStart ){",
          "2320:               sqlite3_free(zLimit);",
          "2321:               zLimit = 0;",
          "2322:             }",
          "2323:           }",
          "2324:           if( bRbuRowid ){",
          "2325:             zOrder = rbuMPrintf(p, \"_rowid_\");",
          "2326:           }else{",
          "2327:             zOrder = rbuObjIterGetPkList(p, pIter, \"\");",
          "2328:           }",
          "2329:         }",
          "2331:         if( p->rc==SQLITE_OK ){",
          "2332:           p->rc = prepareFreeAndCollectError(p->dbRbu, &pIter->pSelect, pz,",
          "2333:               sqlite3_mprintf(",
          "2334:                 \"SELECT %s,%s rbu_control%s FROM '%q'%s %s %s %s\",",
          "2335:                 zCollist,",
          "2336:                 (rbuIsVacuum(p) ? \"0 AS \" : \"\"),",
          "2337:                 zRbuRowid,",
          "2338:                 pIter->zDataTbl, (zStart ? zStart : \"\"),",
          "2339:                 (zOrder ? \"ORDER BY\" : \"\"), zOrder,",
          "2340:                 zLimit",
          "2341:               )",
          "2342:           );",
          "2343:         }",
          "2344:         sqlite3_free(zStart);",
          "2345:         sqlite3_free(zOrder);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c2e439bccc40825e211bfa9a88e6a251ff066ca7453d4e7cb5eab56ce7332635",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}