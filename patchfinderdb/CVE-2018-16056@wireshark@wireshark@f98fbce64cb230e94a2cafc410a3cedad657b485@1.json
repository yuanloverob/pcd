{
  "cve_id": "CVE-2018-16056",
  "cve_desc": "In Wireshark 2.6.0 to 2.6.2, 2.4.0 to 2.4.8, and 2.2.0 to 2.2.16, the Bluetooth Attribute Protocol dissector could crash. This was addressed in epan/dissectors/packet-btatt.c by verifying that a dissector for a specific UUID exists.",
  "repo": "wireshark/wireshark",
  "patch_hash": "f98fbce64cb230e94a2cafc410a3cedad657b485",
  "patch_info": {
    "commit_hash": "f98fbce64cb230e94a2cafc410a3cedad657b485",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/f98fbce64cb230e94a2cafc410a3cedad657b485",
    "files": [
      "epan/dissectors/packet-btatt.c"
    ],
    "message": "Don't assume a given btgatt.uuid0xXXXX dissector exists.\n\nThey're not guaranteed to have been registered.\n\nBug: 14994\nChange-Id: I11c2b2d4d8a7dd020a0ef3d700b29b0859bc68ca\nReviewed-on: https://code.wireshark.org/review/28805\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
    "before_after_code_files": [
      "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c": [
      "File: epan/dissectors/packet-btatt.c -> epan/dissectors/packet-btatt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4275: static gint",
      "4276: btatt_dissect_attribute_handle(guint16 handle, tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, btatt_data_t *att_data);",
      "4278: static gint",
      "4279: dissect_attribute_value(proto_tree *tree, proto_item *patron_item, packet_info *pinfo, tvbuff_t *old_tvb,",
      "4280:         gint old_offset, gint length, guint16 handle, bluetooth_uuid_t uuid, btatt_data_t *att_data)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4278: static int",
      "4279: btatt_call_dissector_by_dissector_name_with_data(const char *dissector_name,",
      "4280:         tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
      "4281: {",
      "4282:  dissector_handle_t handle;",
      "4284:  handle = find_dissector(dissector_name);",
      "4285:  if (handle != NULL)",
      "4286:   return call_dissector_with_data(handle, tvb, pinfo, tree, data);",
      "4287:  else",
      "4288:   return call_data_dissector(tvb, pinfo, tree);",
      "4289: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4828:             proto_tree_add_item(tree, hf_btatt_value_trigger_setting_analog, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
      "4829:             offset += 2;",
      "4830:         } else if (value == 4) {",
      "4832:             offset += 1;",
      "4833:         } else if (value == 5 || value == 6) {",
      "4834:             proto_tree_add_item(tree, hf_btatt_value_trigger_setting_analog_one, tvb, offset, 2, ENC_LITTLE_ENDIAN);",
      "",
      "[Removed Lines]",
      "4831:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a56\"), tvb_new_subset_length_caplen(tvb, offset, 1, 1), pinfo, tree, att_data);",
      "",
      "[Added Lines]",
      "4844:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a56\", tvb_new_subset_length_caplen(tvb, offset, 1, 1), pinfo, tree, att_data);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5283:         if (bluetooth_gatt_has_no_parameter(att_data->opcode))",
      "5284:             break;",
      "5287:         offset += 9;",
      "5290:         offset += 2;",
      "5293:         offset += 4;",
      "5295:         break;",
      "",
      "[Removed Lines]",
      "5286:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2A0C\"), tvb_new_subset_length_caplen(tvb, offset, 9, 9), pinfo, tree, att_data);",
      "5289:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2A0F\"), tvb_new_subset_length_caplen(tvb, offset, 2, 2), pinfo, tree, att_data);",
      "5292:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2A14\"), tvb_new_subset_length_caplen(tvb, offset, 4, 4), pinfo, tree, att_data);",
      "",
      "[Added Lines]",
      "5299:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2A0C\", tvb_new_subset_length_caplen(tvb, offset, 9, 9), pinfo, tree, att_data);",
      "5302:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2A0F\", tvb_new_subset_length_caplen(tvb, offset, 2, 2), pinfo, tree, att_data);",
      "5305:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2A14\", tvb_new_subset_length_caplen(tvb, offset, 4, 4), pinfo, tree, att_data);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "6596:         if (bluetooth_gatt_has_no_parameter(att_data->opcode))",
      "6597:             break;",
      "6600:         offset += 1;",
      "6603:         offset += 2;",
      "6605:         break;",
      "",
      "[Removed Lines]",
      "6599:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a56\"), tvb_new_subset_length_caplen(tvb, offset, 1, 1), pinfo, tree, att_data);",
      "6602:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a58\"), tvb_new_subset_length_caplen(tvb, offset, 2, 2), pinfo, tree, att_data);",
      "",
      "[Added Lines]",
      "6612:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a56\", tvb_new_subset_length_caplen(tvb, offset, 1, 1), pinfo, tree, att_data);",
      "6615:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a58\", tvb_new_subset_length_caplen(tvb, offset, 2, 2), pinfo, tree, att_data);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "6696:             sub_item = proto_tree_add_item(tree, hf_btatt_plx_spot_check_measurement_timestamp, tvb, offset, 7, ENC_NA);",
      "6697:             sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
      "6700:             offset += 7;",
      "6701:         }",
      "",
      "[Removed Lines]",
      "6699:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
      "",
      "[Added Lines]",
      "6712:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "9269:         sub_item = proto_tree_add_item(tree, hf_btatt_ots_object_first_created, tvb, offset, 7, ENC_NA);",
      "9270:         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
      "9273:         offset += 7;",
      "9275:         break;",
      "",
      "[Removed Lines]",
      "9272:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
      "",
      "[Added Lines]",
      "9285:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "9288:         sub_item = proto_tree_add_item(tree, hf_btatt_ots_object_last_modified, tvb, offset, 7, ENC_NA);",
      "9289:         sub_tree = proto_item_add_subtree(sub_item, ett_btatt_value);",
      "9292:         offset += 7;",
      "9294:         break;",
      "",
      "[Removed Lines]",
      "9291:         call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
      "",
      "[Added Lines]",
      "9304:         btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, sub_tree, att_data);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "9495:             break;",
      "9499:             offset += 7;",
      "9502:             offset += 7;",
      "9504:             break;",
      "",
      "[Removed Lines]",
      "9498:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, tree, att_data);",
      "9501:             call_dissector_with_data(find_dissector(\"btgatt.uuid0x2a08\"), tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, tree, att_data);",
      "",
      "[Added Lines]",
      "9511:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, tree, att_data);",
      "9514:             btatt_call_dissector_by_dissector_name_with_data(\"btgatt.uuid0x2a08\", tvb_new_subset_length_caplen(tvb, offset, 7, 7), pinfo, tree, att_data);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a8df0c0e13cb76450a3843abf4d529c7b224709f",
      "candidate_info": {
        "commit_hash": "a8df0c0e13cb76450a3843abf4d529c7b224709f",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a8df0c0e13cb76450a3843abf4d529c7b224709f",
        "files": [
          "epan/dissectors/CMakeLists.txt",
          "epan/dissectors/packet-btatt.c",
          "epan/dissectors/packet-bthci_cmd.c",
          "epan/dissectors/packet-btmesh-beacon.c",
          "epan/dissectors/packet-btmesh-pbadv.c",
          "epan/dissectors/packet-btmesh-provisioning.c",
          "epan/dissectors/packet-btmesh-proxy.c",
          "epan/dissectors/packet-btmesh.c",
          "epan/dissectors/packet-btmesh.h"
        ],
        "message": "Expanding Bluetooth Mesh Profile dissector\n\nAdded support for Bluetooth Mesh beacons\nAdded support for Bluetooth Mesh Provisioning protocol\nAdded support for Bluetooth Mesh Proxy protocol\nAdded support for Bluetooth Mesh PB-ADV provisioning bearer\nAdded support for Bluetooth Mesh PB-GATT provisioning bearer\n\nLink to Bluetooth Mesh Profile specification\nhttps://www.bluetooth.org/docman/handlers/downloaddoc.ashx?doc_id=457092\n\nBug: 15523\nChange-Id: I408726c0bc7e1d81077539d451c2047f540dd865\nReviewed-on: https://code.wireshark.org/review/32076\nPetri-Dish: Anders Broman <a.broman58@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c",
          "epan/dissectors/packet-bthci_cmd.c||epan/dissectors/packet-bthci_cmd.c",
          "epan/dissectors/packet-btmesh-beacon.c||epan/dissectors/packet-btmesh-beacon.c",
          "epan/dissectors/packet-btmesh-pbadv.c||epan/dissectors/packet-btmesh-pbadv.c",
          "epan/dissectors/packet-btmesh-provisioning.c||epan/dissectors/packet-btmesh-provisioning.c",
          "epan/dissectors/packet-btmesh-proxy.c||epan/dissectors/packet-btmesh-proxy.c",
          "epan/dissectors/packet-btmesh.c||epan/dissectors/packet-btmesh.c",
          "epan/dissectors/packet-btmesh.h||epan/dissectors/packet-btmesh.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ],
          "candidate": [
            "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-btatt.c||epan/dissectors/packet-btatt.c": [
          "File: epan/dissectors/packet-btatt.c -> epan/dissectors/packet-btatt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"packet-btsdp.h\"",
          "31: #include \"packet-http.h\"",
          "32: #include \"packet-usb-hid.h\"",
          "34: #define HANDLE_TVB -1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33: #include \"packet-btmesh.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2133: static dissector_handle_t usb_hid_boot_keyboard_input_report_handle;",
          "2134: static dissector_handle_t usb_hid_boot_keyboard_output_report_handle;",
          "2135: static dissector_handle_t usb_hid_boot_mouse_input_report_handle;",
          "2137: static dissector_table_t att_handle_dissector_table;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2137: static dissector_handle_t btmesh_proxy_handle;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4582: btatt_call_dissector_by_dissector_name_with_data(const char *dissector_name,",
          "4583:         tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "4584: {",
          "4592: }",
          "4594: static gint",
          "",
          "[Removed Lines]",
          "4585:  dissector_handle_t handle;",
          "4587:  handle = find_dissector(dissector_name);",
          "4588:  if (handle != NULL)",
          "4589:   return call_dissector_with_data(handle, tvb, pinfo, tree, data);",
          "4590:  else",
          "4591:   REPORT_DISSECTOR_BUG(\"Dissector %s not registered\", dissector_name);",
          "",
          "[Added Lines]",
          "4587:     dissector_handle_t handle;",
          "4589:     handle = find_dissector(dissector_name);",
          "4590:     if (handle != NULL)",
          "4591:         return call_dissector_with_data(handle, tvb, pinfo, tree, data);",
          "4592:     else",
          "4593:         REPORT_DISSECTOR_BUG(\"Dissector %s not registered\", dissector_name);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10351:         }",
          "10352:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10359:         if (btmesh_proxy_handle) {",
          "10360:             btle_mesh_proxy_ctx_t *proxy_ctx;",
          "10361:             proxy_ctx = wmem_new0(wmem_packet_scope(), btle_mesh_proxy_ctx_t);",
          "10363:             proxy_ctx->interface_id = bluetooth_data->interface_id;",
          "10364:             proxy_ctx->adapter_id = bluetooth_data->adapter_id;",
          "10365:             proxy_ctx->chandle = 0; //TODO",
          "10366:             proxy_ctx->bt_uuid = uuid.bt_uuid;",
          "10367:             proxy_ctx->access_address = 0; //TODO",
          "10369:             switch (att_data->opcode) {",
          "10370:                 case ATT_OPCODE_WRITE_COMMAND:",
          "10371:                     proxy_ctx->proxy_side = E_BTMESH_PROXY_SIDE_CLIENT;",
          "10373:                     break;",
          "10374:                 case ATT_OPCODE_HANDLE_VALUE_NOTIFICATION:",
          "10375:                     proxy_ctx->proxy_side = E_BTMESH_PROXY_SIDE_SERVER;",
          "10377:                     break;",
          "10378:                 default:",
          "10379:                     proxy_ctx->proxy_side = E_BTMESH_PROXY_SIDE_UNKNOWN;",
          "10381:                 break;",
          "10382:             }",
          "10384:             call_dissector_with_data(btmesh_proxy_handle, tvb_new_subset_length(tvb, offset, length),",
          "10385:                 pinfo, proto_tree_get_root(tree), proxy_ctx);",
          "10386:             offset += length;",
          "10387:         } else {",
          "10388:             if (bluetooth_gatt_has_no_parameter(att_data->opcode))",
          "10389:                 break;",
          "10391:             proto_tree_add_item(tree, hf_btatt_value, tvb, offset, -1, ENC_NA);",
          "10392:             offset = tvb_captured_length(tvb);",
          "10393:         }",
          "10395:         break;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "17290:     usb_hid_boot_keyboard_input_report_handle  = find_dissector_add_dependency(\"usbhid.boot_report.keyboard.input\", proto_btatt);",
          "17291:     usb_hid_boot_keyboard_output_report_handle = find_dissector_add_dependency(\"usbhid.boot_report.keyboard.output\", proto_btatt);",
          "17292:     usb_hid_boot_mouse_input_report_handle     = find_dissector_add_dependency(\"usbhid.boot_report.mouse.input\", proto_btatt);",
          "17294:     dissector_add_uint(\"btl2cap.psm\", BTL2CAP_PSM_ATT, btatt_handle);",
          "17295:     dissector_add_uint(\"btl2cap.cid\", BTL2CAP_FIXED_CID_ATT, btatt_handle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17332:     btmesh_proxy_handle                        = find_dissector_add_dependency(\"btmesh.proxy\", proto_btatt);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-bthci_cmd.c||epan/dissectors/packet-bthci_cmd.c": [
          "File: epan/dissectors/packet-bthci_cmd.c -> epan/dissectors/packet-bthci_cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "834: static gint hf_btcommon_le_channel_map_38 = -1;",
          "835: static gint hf_btcommon_le_channel_map_39 = -1;",
          "836: static gint hf_btcommon_eir_ad_mesh_msg = -1;",
          "839: static const int *hfx_btcommon_eir_ad_ips_flags[] = {",
          "840:     &hf_btcommon_eir_ad_ips_flags_reserved,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "837: static gint hf_btcommon_eir_ad_mesh_pbadv = -1;",
          "838: static gint hf_btcommon_eir_ad_mesh_beacon = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "926: static dissector_handle_t btcommon_le_channel_map_handle;",
          "927: static dissector_handle_t bthci_cmd_handle;",
          "928: static dissector_handle_t btmesh_handle;",
          "930: static dissector_table_t  bluetooth_eir_ad_manufacturer_company_id;",
          "931: static dissector_table_t  bluetooth_eir_ad_tds_organization_id;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "930: static dissector_handle_t btmesh_pbadv_handle;",
          "931: static dissector_handle_t btmesh_beacon_handle;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7894:             offset += 1;",
          "7896:             break;",
          "7898:             if (btmesh_handle) {",
          "7899:                 call_dissector(btmesh_handle, tvb_new_subset_length(tvb, offset, length), pinfo, proto_tree_get_root(tree));",
          "7900:             } else {",
          "7901:                 proto_tree_add_item(entry_tree, hf_btcommon_eir_ad_mesh_msg, tvb, offset, length, ENC_NA);",
          "7902:             }",
          "7903:             offset += length;",
          "7904:             break;",
          "7905:         case 0xFF: /* Manufacturer Specific */ {",
          "7906:             guint16  company_id;",
          "",
          "[Removed Lines]",
          "7897:         case 0x2a:",
          "",
          "[Added Lines]",
          "7901:             if (btmesh_pbadv_handle) {",
          "7902:                 call_dissector(btmesh_pbadv_handle, tvb_new_subset_length(tvb, offset, length), pinfo, proto_tree_get_root(tree));",
          "7903:             } else {",
          "7904:                 proto_tree_add_item(entry_tree, hf_btcommon_eir_ad_mesh_pbadv, tvb, offset, length, ENC_NA);",
          "7905:             }",
          "7906:             offset += length;",
          "7908:             break;",
          "7917:             break;",
          "7919:             if (btmesh_beacon_handle) {",
          "7920:                 call_dissector(btmesh_beacon_handle, tvb_new_subset_length(tvb, offset, length), pinfo, proto_tree_get_root(tree));",
          "7921:             } else {",
          "7922:                 proto_tree_add_item(entry_tree, hf_btcommon_eir_ad_mesh_beacon, tvb, offset, length, ENC_NA);",
          "7923:             }",
          "7924:             offset += length;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9104:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "9105:             NULL, HFILL }",
          "9106:         },",
          "9108:     };",
          "9110:     static gint *ett[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9129:  { &hf_btcommon_eir_ad_mesh_pbadv,",
          "9130:         { \"Mesh PB-ADV message content\",        \"btcommon.eir_ad.entry.mesh_pbadv\",",
          "9131:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "9132:             NULL, HFILL }",
          "9133:         },",
          "9134:         { &hf_btcommon_eir_ad_mesh_beacon,",
          "9135:         { \"Mesh Beacon message content\",        \"btcommon.eir_ad.entry.mesh_beacon\",",
          "9136:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "9137:             NULL, HFILL }",
          "9138:         },",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "9155: proto_reg_handoff_btcommon(void)",
          "9156: {",
          "9157:     btmesh_handle = find_dissector(\"btmesh.msg\");",
          "9158: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9189:     btmesh_pbadv_handle = find_dissector(\"btmesh.pbadv\");",
          "9190:     btmesh_beacon_handle = find_dissector(\"btmesh.beacon\");",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-btmesh-beacon.c||epan/dissectors/packet-btmesh-beacon.c": [
          "File: epan/dissectors/packet-btmesh-beacon.c -> epan/dissectors/packet-btmesh-beacon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include <epan/packet.h>",
          "17: #include <epan/prefs.h>",
          "18: #include <epan/expert.h>",
          "20: #include \"packet-btmesh.h\"",
          "22: #define BEACON_UNPROVISION 0x00",
          "23: #define BEACON_SECURE      0x01",
          "25: void proto_register_btmesh_beacon(void);",
          "27: static int proto_btmesh_beacon = -1;",
          "29: static int hf_btmesh_beacon_type = -1;",
          "30: static int hf_btmesh_beacon_uuid = -1;",
          "31: static int hf_btmesh_beacon_oob = -1;",
          "32: static int hf_btmesh_beacon_oob_other = -1;",
          "33: static int hf_btmesh_beacon_oob_electronic = -1;",
          "34: static int hf_btmesh_beacon_oob_2d_code = -1;",
          "35: static int hf_btmesh_beacon_oob_bar_code = -1;",
          "36: static int hf_btmesh_beacon_oob_nfc= -1;",
          "37: static int hf_btmesh_beacon_oob_number = -1;",
          "38: static int hf_btmesh_beacon_oob_string = -1;",
          "39: static int hf_btmesh_beacon_oob_rfu = -1;",
          "40: static int hf_btmesh_beacon_oob_on_box = -1;",
          "41: static int hf_btmesh_beacon_oob_inside_box = -1;",
          "42: static int hf_btmesh_beacon_oob_on_paper = -1;",
          "43: static int hf_btmesh_beacon_oob_inside_manual = -1;",
          "44: static int hf_btmesh_beacon_oob_on_device = -1;",
          "45: static int hf_btmesh_beacon_uri_hash = -1;",
          "46: static int hf_btmesh_beacon_flags = -1;",
          "47: static int hf_btmesh_beacon_flags_key_refresh = -1;",
          "48: static int hf_btmesh_beacon_flags_iv_update = -1;",
          "49: static int hf_btmesh_beacon_flags_rfu = -1;",
          "50: static int hf_btmesh_beacon_network_id = -1;",
          "51: static int hf_btmesh_beacon_ivindex = -1;",
          "53: static int hf_btmesh_beacon_authentication_value = -1;",
          "54: static int hf_btmesh_beacon_unknown_data = -1;",
          "56: static int ett_btmesh_beacon = -1;",
          "57: static int ett_btmesh_beacon_oob = -1;",
          "58: static int ett_btmesh_beacon_flags = -1;",
          "60: static expert_field ei_btmesh_beacon_unknown_beacon_type = EI_INIT;",
          "61: static expert_field ei_btmesh_beacon_unknown_payload = EI_INIT;",
          "62: static expert_field ei_btmesh_beacon_rfu_not_zero = EI_INIT;",
          "64: static const value_string btmesh_beacon_type[] = {",
          "65:     { 0, \"Unprovisioned Device Beacon\" },",
          "66:     { 1, \"Secure Network Beacon\" },",
          "67:     { 0, NULL }",
          "68: };",
          "70: static const true_false_string available = {",
          "71:   \"available\",",
          "72:   \"not available\"",
          "73: };",
          "75: static const true_false_string flags_key_refresh = {",
          "76:   \"Key Refresh in progress\",",
          "77:   \"Key Refresh not in progress\"",
          "78: };",
          "80: static const true_false_string flags_iv_update = {",
          "81:   \"IV Update active\",",
          "82:   \"Normal operation\"",
          "83: };",
          "85: static gint",
          "86: dissect_btmesh_beacon_msg(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "87: {",
          "89:     proto_item *item, *oob_item, *flags_item;",
          "90:     proto_tree *sub_tree, *oob_tree, *flags_tree;",
          "91:     guint offset = 0;",
          "92:     guint data_size = 0;",
          "93:     btle_mesh_transport_ctx_t *tr_ctx;",
          "94:     btle_mesh_transport_ctx_t dummy_ctx = {E_BTMESH_TR_UNKNOWN, FALSE, 0};",
          "95:     guint16 rfu_bits16;",
          "96:     guint8 rfu_bits8;",
          "98:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"BT Mesh Beacon\");",
          "100:     if (data == NULL) {",
          "101:         tr_ctx = &dummy_ctx;",
          "102:     } else {",
          "103:         tr_ctx = (btle_mesh_transport_ctx_t *) data;",
          "104:     }",
          "106:     item = proto_tree_add_item(tree, proto_btmesh_beacon, tvb, offset, -1, ENC_NA);",
          "107:     sub_tree = proto_item_add_subtree(item, ett_btmesh_beacon);",
          "109:     guint8 beacon_type = tvb_get_guint8(tvb, offset);",
          "110:     proto_tree_add_item(sub_tree, hf_btmesh_beacon_type, tvb, offset, 1, ENC_NA);",
          "111:     offset += 1;",
          "113:     col_set_str(pinfo->cinfo, COL_INFO, val_to_str_const(beacon_type, btmesh_beacon_type, \"Unknown Beacon Type\"));",
          "114:     if (tr_ctx->fragmented) {",
          "115:         switch (tr_ctx->transport) {",
          "116:             case E_BTMESH_TR_PROXY:",
          "117:                 col_append_str(pinfo->cinfo, COL_INFO,\" (Last Segment)\");",
          "119:             break;",
          "120:             default:",
          "123:             break;",
          "124:         }",
          "125:     }",
          "127:     switch(beacon_type) {",
          "128:         case BEACON_UNPROVISION:",
          "129:             proto_tree_add_item(sub_tree, hf_btmesh_beacon_uuid, tvb, offset, 16, ENC_NA);",
          "130:             offset += 16;",
          "132:             oob_item = proto_tree_add_item(sub_tree, hf_btmesh_beacon_oob, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "133:             oob_tree = proto_item_add_subtree(oob_item, ett_btmesh_beacon_oob);",
          "135:             proto_tree_add_item(oob_tree, hf_btmesh_beacon_oob_other, tvb, offset, 2, ENC_NA);",
          "136:             proto_tree_add_item(oob_tree, hf_btmesh_beacon_oob_electronic, tvb, offset, 2, ENC_NA);",
          "137:             proto_tree_add_item(oob_tree, hf_btmesh_beacon_oob_2d_code, tvb, offset, 2, ENC_NA);",
          "138:             proto_tree_add_item(oob_tree, hf_btmesh_beacon_oob_bar_code, tvb, offset, 2, ENC_NA);",
          "139:             proto_tree_add_item(oob_tree, hf_btmesh_beacon_oob_nfc, tvb, offset, 2, ENC_NA);",
          "140:             proto_tree_add_item(oob_tree, hf_btmesh_beacon_oob_number, tvb, offset, 2, ENC_NA);",
          "141:             proto_tree_add_item(oob_tree, hf_btmesh_beacon_oob_string, tvb, offset, 2, ENC_NA);",
          "142:             proto_tree_add_item(oob_tree, hf_btmesh_beacon_oob_rfu, tvb, offset, 2, ENC_NA);",
          "143:             proto_tree_add_item(oob_tree, hf_btmesh_beacon_oob_on_box, tvb, offset, 2, ENC_NA);",
          "144:             proto_tree_add_item(oob_tree, hf_btmesh_beacon_oob_inside_box, tvb, offset, 2, ENC_NA);",
          "145:             proto_tree_add_item(oob_tree, hf_btmesh_beacon_oob_on_paper, tvb, offset, 2, ENC_NA);",
          "146:             proto_tree_add_item(oob_tree, hf_btmesh_beacon_oob_inside_manual, tvb, offset, 2, ENC_NA);",
          "147:             proto_tree_add_item(oob_tree, hf_btmesh_beacon_oob_on_device, tvb, offset, 2, ENC_NA);",
          "148:             rfu_bits16 = (tvb_get_guint16(tvb, offset, ENC_BIG_ENDIAN) & 0x0780) >> 7;",
          "149:             if (rfu_bits16 != 0) {",
          "151:                 proto_tree_add_expert(oob_tree, pinfo, &ei_btmesh_beacon_rfu_not_zero, tvb, offset, -1);",
          "152:             }",
          "153:             offset += 2;",
          "155:             data_size = tvb_reported_length(tvb);",
          "156:             if (data_size == offset + 4 ) {",
          "157:                 proto_tree_add_item(sub_tree, hf_btmesh_beacon_uri_hash, tvb, offset, 4, ENC_NA);",
          "158:                 offset += 4;",
          "159:             }",
          "162:         break;",
          "163:         case BEACON_SECURE:",
          "164:             flags_item = proto_tree_add_item(sub_tree, hf_btmesh_beacon_flags, tvb, offset, 1, ENC_NA);",
          "165:             flags_tree = proto_item_add_subtree(flags_item, ett_btmesh_beacon_flags);",
          "166:             proto_tree_add_item(flags_tree, hf_btmesh_beacon_flags_key_refresh, tvb, offset, 1, ENC_NA);",
          "167:             proto_tree_add_item(flags_tree, hf_btmesh_beacon_flags_iv_update, tvb, offset, 1, ENC_NA);",
          "168:             proto_tree_add_item(flags_tree, hf_btmesh_beacon_flags_rfu, tvb, offset, 1, ENC_NA);",
          "169:             rfu_bits8 = tvb_get_guint8(tvb, offset) >> 2;",
          "170:             if (rfu_bits8 != 0) {",
          "172:                 proto_tree_add_expert(flags_tree, pinfo, &ei_btmesh_beacon_rfu_not_zero, tvb, offset, -1);",
          "173:             }",
          "174:             offset += 1;",
          "175:             proto_tree_add_item(sub_tree, hf_btmesh_beacon_network_id, tvb, offset, 8, ENC_NA);",
          "176:             offset += 8;",
          "177:             proto_tree_add_item(sub_tree, hf_btmesh_beacon_ivindex, tvb, offset, 4, ENC_NA);",
          "178:             offset += 4;",
          "179:             proto_tree_add_item(sub_tree, hf_btmesh_beacon_authentication_value, tvb, offset, 8, ENC_NA);",
          "180:             offset += 8;",
          "181:         break;",
          "182:         default:",
          "184:             proto_tree_add_item(sub_tree, hf_btmesh_beacon_unknown_data, tvb, offset, -1, ENC_NA);",
          "185:             proto_tree_add_expert(sub_tree, pinfo, &ei_btmesh_beacon_unknown_beacon_type, tvb, offset, -1);",
          "186:             offset += tvb_captured_length_remaining(tvb, offset);",
          "187:         break;",
          "188:     }",
          "190:     if (tvb_captured_length_remaining(tvb, offset) != 0) {",
          "191:         proto_tree_add_expert(sub_tree, pinfo, &ei_btmesh_beacon_unknown_payload, tvb, offset, -1);",
          "192:     }",
          "194:     return tvb_reported_length(tvb);",
          "195: }",
          "197: void",
          "198: proto_register_btmesh_beacon(void)",
          "199: {",
          "200:     static hf_register_info hf[] = {",
          "201:         { &hf_btmesh_beacon_type,",
          "202:             { \"Type\", \"beacon.type\",",
          "203:                 FT_UINT8, BASE_DEC, VALS(btmesh_beacon_type), 0x0,",
          "204:                 NULL, HFILL }",
          "205:         },",
          "206:         { &hf_btmesh_beacon_uuid,",
          "207:             { \"Device UUID\", \"beacon.uuid\",",
          "208:                 FT_GUID, BASE_NONE, NULL, 0x0,",
          "209:                 NULL, HFILL }",
          "210:         },",
          "211:         { &hf_btmesh_beacon_oob,",
          "212:             { \"OOB Information\", \"beacon.oob\",",
          "213:                 FT_UINT16, BASE_HEX, NULL, 0x0,",
          "214:                 NULL, HFILL }",
          "215:         },",
          "216:         { &hf_btmesh_beacon_oob_other,",
          "217:             { \"Other\", \"beacon.oob.other\",",
          "218:                 FT_BOOLEAN, 16, TFS(&available), 0x0001,",
          "219:                 NULL, HFILL }",
          "220:         },",
          "221:        { &hf_btmesh_beacon_oob_electronic,",
          "222:             { \"Electronic / URI\", \"beacon.oob.electronic\",",
          "223:                 FT_BOOLEAN, 16, TFS(&available), 0x0002,",
          "224:                 NULL, HFILL }",
          "225:         },",
          "226:        { &hf_btmesh_beacon_oob_2d_code,",
          "227:             { \"2D machine-readable code\", \"beacon.oob.2d_code\",",
          "228:                 FT_BOOLEAN, 16, TFS(&available), 0x0004,",
          "229:                 NULL, HFILL }",
          "230:         },",
          "231:        { &hf_btmesh_beacon_oob_bar_code,",
          "232:             { \"Bar code\", \"beacon.oob.bar_code\",",
          "233:                 FT_BOOLEAN, 16, TFS(&available), 0x0008,",
          "234:                 NULL, HFILL }",
          "235:         },",
          "236:        { &hf_btmesh_beacon_oob_nfc,",
          "237:             { \"Near Field Communication (NFC)\", \"beacon.oob.nfc\",",
          "238:                 FT_BOOLEAN, 16, TFS(&available), 0x0010,",
          "239:                 NULL, HFILL }",
          "240:         },",
          "241:        { &hf_btmesh_beacon_oob_number,",
          "242:             { \"Number\", \"beacon.oob.number\",",
          "243:                 FT_BOOLEAN, 16, TFS(&available), 0x0020,",
          "244:                 NULL, HFILL }",
          "245:         },",
          "246:        { &hf_btmesh_beacon_oob_string,",
          "247:             { \"String\", \"beacon.oob.string\",",
          "248:                 FT_BOOLEAN, 16, TFS(&available), 0x0040,",
          "249:                 NULL, HFILL }",
          "250:         },",
          "251:        { &hf_btmesh_beacon_oob_rfu,",
          "252:             { \"Reserved for Future Use\", \"beacon.oob.rfu\",",
          "253:                 FT_UINT16, BASE_DEC, NULL, 0x0780,",
          "254:                 NULL, HFILL }",
          "255:         },",
          "256:        { &hf_btmesh_beacon_oob_on_box,",
          "257:             { \"On box\", \"beacon.oob.on_box\",",
          "258:                 FT_BOOLEAN, 16, TFS(&available), 0x0800,",
          "259:                 NULL, HFILL }",
          "260:         },",
          "261:        { &hf_btmesh_beacon_oob_inside_box,",
          "262:             { \"Inside box\", \"beacon.oob.inside_box\",",
          "263:                 FT_BOOLEAN, 16, TFS(&available), 0x1000,",
          "264:                 NULL, HFILL }",
          "265:         },",
          "266:        { &hf_btmesh_beacon_oob_on_paper,",
          "267:             { \"On piece of paper\", \"beacon.oob.on_paper\",",
          "268:                 FT_BOOLEAN, 16, TFS(&available), 0x2000,",
          "269:                 NULL, HFILL }",
          "270:         },",
          "271:        { &hf_btmesh_beacon_oob_inside_manual,",
          "272:             { \"Inside manual\", \"beacon.oob.inside_manual\",",
          "273:                 FT_BOOLEAN, 16, TFS(&available), 0x4000,",
          "274:                 NULL, HFILL }",
          "275:         },",
          "276:        { &hf_btmesh_beacon_oob_on_device,",
          "277:             { \"On device\", \"beacon.oob.on_device\",",
          "278:                 FT_BOOLEAN, 16, TFS(&available), 0x8000,",
          "279:                 NULL, HFILL }",
          "280:         },",
          "281:         { &hf_btmesh_beacon_uri_hash,",
          "282:             { \"URI Hash\", \"beacon.uri_hash\",",
          "283:                 FT_BYTES, BASE_NONE, NULL, 0x0,",
          "284:                 NULL, HFILL }",
          "285:         },",
          "286:         { &hf_btmesh_beacon_flags,",
          "287:             { \"Flags\", \"beacon.flags\",",
          "288:                 FT_UINT8, BASE_HEX, NULL, 0x0,",
          "289:                 NULL, HFILL }",
          "290:         },",
          "291:        { &hf_btmesh_beacon_flags_key_refresh,",
          "292:             { \"Key Refresh Flag\", \"beacon.flags.key_refresh\",",
          "293:                 FT_BOOLEAN, 8, TFS(&flags_key_refresh), 0x01,",
          "294:                 NULL, HFILL }",
          "295:         },",
          "296:        { &hf_btmesh_beacon_flags_iv_update,",
          "297:             { \"IV Update Flag\", \"beacon.flags.iv_update\",",
          "298:                 FT_BOOLEAN, 8, TFS(&flags_iv_update), 0x02,",
          "299:                 NULL, HFILL }",
          "300:         },",
          "301:        { &hf_btmesh_beacon_flags_rfu,",
          "302:             { \"Reserved for Future Use\", \"beacon.flags.rfu\",",
          "303:                 FT_UINT8, BASE_DEC, NULL, 0xFC,",
          "304:                 NULL, HFILL }",
          "305:         },",
          "306:        { &hf_btmesh_beacon_network_id,",
          "307:             { \"Network ID\", \"beacon.network_id\",",
          "308:                 FT_BYTES, BASE_NONE, NULL, 0x0,",
          "309:                 NULL, HFILL }",
          "310:         },",
          "311:         { &hf_btmesh_beacon_ivindex,",
          "312:             { \"IV Index\", \"beacon.ivindex\",",
          "313:                 FT_UINT32, BASE_DEC, NULL, 0x0,",
          "314:                 NULL, HFILL }",
          "315:         },",
          "316:         { &hf_btmesh_beacon_authentication_value,",
          "317:             { \"Authentication Value\", \"beacon.authentication_value\",",
          "318:                 FT_BYTES, BASE_NONE, NULL, 0x0,",
          "319:                 NULL, HFILL }",
          "320:         },",
          "321:         { &hf_btmesh_beacon_unknown_data,",
          "322:             { \"Unknown Data\", \"beacon.unknown_data\",",
          "323:                 FT_BYTES, BASE_NONE, NULL, 0x0,",
          "324:                 NULL, HFILL }",
          "325:         },",
          "326:     };",
          "328:     static gint *ett[] = {",
          "329:         &ett_btmesh_beacon,",
          "330:         &ett_btmesh_beacon_oob,",
          "331:         &ett_btmesh_beacon_flags,",
          "332:     };",
          "334:     static ei_register_info ei[] = {",
          "335:         { &ei_btmesh_beacon_unknown_beacon_type,{ \"beacon.unknown_beacon_type\", PI_PROTOCOL, PI_ERROR, \"Unknown Beacon Type\", EXPFILL } },",
          "336:         { &ei_btmesh_beacon_unknown_payload,{ \"beacon.unknown_payload\", PI_PROTOCOL, PI_ERROR, \"Unknown Payload\", EXPFILL } },",
          "337:         { &ei_btmesh_beacon_rfu_not_zero,{ \"beacon.rfu_not_zero\", PI_PROTOCOL, PI_WARN, \"Reserved for Future Use value not equal to 0\", EXPFILL } },",
          "338:     };",
          "340:     expert_module_t* expert_btmesh_beacon;",
          "342:     proto_btmesh_beacon = proto_register_protocol(\"Bluetooth Mesh Beacon\", \"BT Mesh beacon\", \"beacon\");",
          "344:     proto_register_field_array(proto_btmesh_beacon, hf, array_length(hf));",
          "345:     proto_register_subtree_array(ett, array_length(ett));",
          "347:     expert_btmesh_beacon = expert_register_protocol(proto_btmesh_beacon);",
          "348:     expert_register_field_array(expert_btmesh_beacon, ei, array_length(ei));",
          "350:     prefs_register_protocol_subtree(\"Bluetooth\", proto_btmesh_beacon, NULL);",
          "351:     register_dissector(\"btmesh.beacon\", dissect_btmesh_beacon_msg, proto_btmesh_beacon);",
          "352: }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-btmesh-pbadv.c||epan/dissectors/packet-btmesh-pbadv.c": [
          "File: epan/dissectors/packet-btmesh-pbadv.c -> epan/dissectors/packet-btmesh-pbadv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include <epan/packet.h>",
          "17: #include <epan/prefs.h>",
          "18: #include <epan/reassemble.h>",
          "19: #include <epan/expert.h>",
          "21: #include \"packet-btmesh.h\"",
          "23: #define BTMESH_PB_ADV_NOT_USED 0",
          "25: #define TRANSACTION_START           0x00",
          "26: #define TRANSACTION_ACKNOWLEDGMENT  0x01",
          "27: #define TRANSACTION_CONTINUATION    0x02",
          "28: #define PROVISIONING_BEARER_CONTROL 0x03",
          "30: #define LINK_OPEN  0x00",
          "31: #define LINK_ACK   0x01",
          "32: #define LINK_CLOSE 0x02",
          "34: void proto_register_btmesh_pbadv(void);",
          "36: static int proto_btmesh_pbadv = -1;",
          "38: static dissector_handle_t btmesh_provisioning_handle;",
          "40: static int hf_btmesh_pbadv_linkid = -1;",
          "41: static int hf_btmesh_pbadv_trnumber = -1;",
          "43: static int hf_btmesh_generic_provisioning_control_format = -1;",
          "44: static int hf_btmesh_gpcf_segn = -1;",
          "45: static int hf_btmesh_gpcf_total_length = -1;",
          "47: static int hf_btmesh_gpcf_fcs = -1;",
          "48: static int hf_btmesh_gpcf_padding = -1;",
          "49: static int hf_btmesh_gpcf_segment_index = -1;",
          "50: static int hf_btmesh_gpcf_bearer_opcode = -1;",
          "51: static int hf_btmesh_gpcf_bearer_opcode_device_UUID = -1;",
          "52: static int hf_btmesh_gpcf_bearer_opcode_reason = -1;",
          "53: static int hf_btmesh_gpcf_bearer_unknown_data = -1;",
          "55: static int hf_btmesh_gpp_payload = -1;",
          "56: static int hf_btmesh_gpp_payload_fragment = -1;",
          "57: static int hf_btmesh_gpp_fragments = -1;",
          "58: static int hf_btmesh_gpp_fragment = -1;",
          "59: static int hf_btmesh_gpp_fragment_overlap = -1;",
          "60: static int hf_btmesh_gpp_fragment_overlap_conflict = -1;",
          "61: static int hf_btmesh_gpp_fragment_multiple_tails = -1;",
          "62: static int hf_btmesh_gpp_fragment_too_long_fragment = -1;",
          "63: static int hf_btmesh_gpp_fragment_error = -1;",
          "64: static int hf_btmesh_gpp_fragment_count = -1;",
          "65: static int hf_btmesh_gpp_reassembled_length = -1;",
          "67: static int ett_btmesh_pbadv = -1;",
          "68: static int ett_btmesh_generic_provisioning = -1;",
          "69: static int ett_btmesh_gpp_fragments = -1;",
          "70: static int ett_btmesh_gpp_fragment = -1;",
          "72: static expert_field ei_btmesh_gpcf_unknown_opcode = EI_INIT;",
          "73: static expert_field ei_btmesh_gpcf_unknown_payload = EI_INIT;",
          "75: static const fragment_items btmesh_gpp_frag_items = {",
          "76:     &ett_btmesh_gpp_fragments,",
          "77:     &ett_btmesh_gpp_fragment,",
          "79:     &hf_btmesh_gpp_fragments,",
          "80:     &hf_btmesh_gpp_fragment,",
          "81:     &hf_btmesh_gpp_fragment_overlap,",
          "82:     &hf_btmesh_gpp_fragment_overlap_conflict,",
          "83:     &hf_btmesh_gpp_fragment_multiple_tails,",
          "84:     &hf_btmesh_gpp_fragment_too_long_fragment,",
          "85:     &hf_btmesh_gpp_fragment_error,",
          "86:     &hf_btmesh_gpp_fragment_count,",
          "87:     NULL,",
          "88:     &hf_btmesh_gpp_reassembled_length,",
          "90:     NULL,",
          "91:     \"fragments\"",
          "92: };",
          "94: static const value_string btmesh_generic_provisioning_control_format[] = {",
          "95:     { 0, \"Transaction Start\" },",
          "96:     { 1, \"Transaction Acknowledgment\" },",
          "97:     { 2, \"Transaction Continuation\" },",
          "98:     { 3, \"Provisioning Bearer Control\" },",
          "99:     { 0, NULL }",
          "100: };",
          "102: static const value_string btmesh_gpcf_bearer_opcode_format[] = {",
          "103:     { 0, \"Link Open\" },",
          "104:     { 1, \"Link ACK\" },",
          "105:     { 2, \"Link Close\" },",
          "106:     { 0, NULL }",
          "107: };",
          "109: static const value_string btmesh_gpcf_bearer_opcode_reason_format[] = {",
          "110:     { 0, \"Success\" },",
          "111:     { 1, \"Timeout\" },",
          "112:     { 2, \"Fail\" },",
          "113:     { 0, NULL }",
          "114: };",
          "117: static reassembly_table pbadv_reassembly_table;",
          "119: typedef struct _pbadv_fragment_key {",
          "120:     guint32 link_id;",
          "121:     guint8 transaction_number;",
          "122: } pbadv_fragment_key;",
          "124: static guint",
          "125: pbadv_fragment_hash(gconstpointer k)",
          "126: {",
          "127:     const pbadv_fragment_key* key = (const pbadv_fragment_key*) k;",
          "128:     guint hash_val;",
          "130:     hash_val = 0;",
          "132:     hash_val += key->link_id;",
          "133:     hash_val += key->transaction_number;",
          "134:     return hash_val;",
          "135: }",
          "137: static gint",
          "138: pbadv_fragment_equal(gconstpointer k1, gconstpointer k2)",
          "139: {",
          "140:     const pbadv_fragment_key* key1 = (const pbadv_fragment_key*) k1;",
          "141:     const pbadv_fragment_key* key2 = (const pbadv_fragment_key*) k2;",
          "143:     return ((key1->link_id == key2->link_id) && (key1->transaction_number == key2->transaction_number)",
          "144:             ? TRUE : FALSE);",
          "145: }",
          "147: static void *",
          "148: pbadv_fragment_temporary_key(const packet_info *pinfo _U_, const guint32 id _U_,",
          "149:                               const void *data)",
          "150: {",
          "151:     pbadv_fragment_key *key = g_slice_new(pbadv_fragment_key);",
          "152:     const pbadv_fragment_key *pbadv = (const pbadv_fragment_key *)data;",
          "154:     key->link_id = pbadv->link_id;",
          "155:     key->transaction_number = pbadv->transaction_number;",
          "157:     return key;",
          "158: }",
          "160: static void",
          "161: pbadv_fragment_free_temporary_key(gpointer ptr)",
          "162: {",
          "163:     pbadv_fragment_key *key = (pbadv_fragment_key *)ptr;",
          "165:     g_slice_free(pbadv_fragment_key, key);",
          "166: }",
          "168: static void *",
          "169: pbadv_fragment_persistent_key(const packet_info *pinfo _U_, const guint32 id _U_,",
          "170:                               const void *data)",
          "171: {",
          "172:     pbadv_fragment_key *key = g_slice_new(pbadv_fragment_key);",
          "173:     const pbadv_fragment_key *pbadv = (const pbadv_fragment_key *)data;",
          "175:     key->link_id = pbadv->link_id;",
          "176:     key->transaction_number = pbadv->transaction_number;",
          "178:     return key;",
          "179: }",
          "181: static void",
          "182: pbadv_fragment_free_persistent_key(gpointer ptr)",
          "183: {",
          "184:     pbadv_fragment_key *key = (pbadv_fragment_key *)ptr;",
          "185:     if (key) {",
          "186:         g_slice_free(pbadv_fragment_key, key);",
          "187:     }",
          "188: }",
          "190: static const reassembly_table_functions pbadv_reassembly_table_functions = {",
          "191:     pbadv_fragment_hash,",
          "192:     pbadv_fragment_equal,",
          "193:     pbadv_fragment_temporary_key,",
          "194:     pbadv_fragment_persistent_key,",
          "195:     pbadv_fragment_free_temporary_key,",
          "196:     pbadv_fragment_free_persistent_key",
          "197: };",
          "199: static gint",
          "200: dissect_btmesh_pbadv_msg(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data _U_)",
          "201: {",
          "203:     proto_item *item;",
          "204:     proto_tree *sub_tree, *sub_tree_generic_provisioning;",
          "205:     proto_item *ti;",
          "206:     gboolean defragment = FALSE;",
          "207:     int offset = 0;",
          "208:     btle_mesh_transport_ctx_t tr_ctx;",
          "209:     guint8 segn, length;",
          "210:     guint32 total_length;",
          "211:     guint8 gpcf_bearer_opcode;",
          "213:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"BT Mesh PB-ADV\");",
          "215:     item = proto_tree_add_item(tree, proto_btmesh_pbadv, tvb, offset, -1, ENC_NA);",
          "216:     sub_tree = proto_item_add_subtree(item, ett_btmesh_pbadv);",
          "218:     guint32 pbadv_link_id = tvb_get_guint32(tvb, offset, ENC_BIG_ENDIAN);",
          "219:     proto_tree_add_item(sub_tree, hf_btmesh_pbadv_linkid, tvb, offset, 4, ENC_NA);",
          "220:     offset += 4;",
          "222:     guint8 pbadv_trnumber = tvb_get_guint8(tvb, offset);",
          "223:     proto_tree_add_item(sub_tree, hf_btmesh_pbadv_trnumber, tvb, offset, 1, ENC_NA);",
          "224:     offset += 1;",
          "226:     pbadv_fragment_key frg_key;",
          "227:     frg_key.link_id = pbadv_link_id;",
          "228:     frg_key.transaction_number = pbadv_trnumber;",
          "230:     sub_tree_generic_provisioning = proto_tree_add_subtree(sub_tree, tvb, offset, -1, ett_btmesh_generic_provisioning, &ti, \"Generic Provisioning PDU\");",
          "232:     proto_tree_add_item(sub_tree_generic_provisioning, hf_btmesh_generic_provisioning_control_format, tvb, offset, 1, ENC_NA);",
          "233:     guint8 gpcf = tvb_get_guint8(tvb, offset) & 0x03;",
          "235:     col_set_str(pinfo->cinfo, COL_INFO, val_to_str_const(gpcf, btmesh_generic_provisioning_control_format, \"Unknown PDU\"));",
          "237:     fragment_head *fd_head = NULL;",
          "238:     gint segment_index = -1;",
          "240:     switch (gpcf) {",
          "242:         case TRANSACTION_START:",
          "243:             proto_tree_add_item(sub_tree_generic_provisioning, hf_btmesh_gpcf_segn, tvb, offset, 1, ENC_NA);",
          "244:             segn = (tvb_get_guint8(tvb, offset) & 0xFC) >> 2;",
          "245:             offset += 1;",
          "246:             total_length = (guint32)tvb_get_guint16(tvb, offset, ENC_BIG_ENDIAN);",
          "247:             proto_tree_add_item(sub_tree_generic_provisioning, hf_btmesh_gpcf_total_length, tvb, offset, 2, ENC_NA);",
          "248:             offset += 2;",
          "249:             proto_tree_add_item(sub_tree_generic_provisioning, hf_btmesh_gpcf_fcs, tvb, offset, 1, ENC_NA);",
          "250:             offset += 1;",
          "251:             segment_index = 0;",
          "252:             defragment = TRUE;",
          "253:             if (segn == 0) {",
          "254:                 if (btmesh_provisioning_handle) {",
          "255:                     length = tvb_reported_length(tvb);",
          "256:                     tr_ctx.transport = E_BTMESH_TR_ADV;",
          "257:                     tr_ctx.fragmented = FALSE;",
          "258:                     tr_ctx.segment_index = 0;",
          "259:                     call_dissector_with_data(btmesh_provisioning_handle, tvb_new_subset_length(tvb, offset, length),",
          "260:                         pinfo, proto_tree_get_root(sub_tree_generic_provisioning), &tr_ctx);",
          "261:                 } else {",
          "262:                     proto_tree_add_item(sub_tree_generic_provisioning, hf_btmesh_gpp_payload, tvb, offset, -1, ENC_NA);",
          "263:                 }",
          "264:             } else {",
          "266:                 if (!pinfo->fd->visited) {",
          "268:                     fd_head = fragment_get(&pbadv_reassembly_table, pinfo, BTMESH_PB_ADV_NOT_USED, &frg_key);",
          "269:                     if (fd_head) {",
          "270:                         fragment_set_tot_len(&pbadv_reassembly_table, pinfo, BTMESH_PB_ADV_NOT_USED, &frg_key, total_length);",
          "271:                     }",
          "272:                     fd_head = fragment_add(&pbadv_reassembly_table,",
          "273:                         tvb, offset, pinfo,",
          "274:                         BTMESH_PB_ADV_NOT_USED, &frg_key,",
          "275:                         0,",
          "276:                         tvb_captured_length_remaining(tvb, offset),",
          "277:                         TRUE);",
          "278:                     if (!fd_head) {",
          "280:                        fragment_set_tot_len(&pbadv_reassembly_table, pinfo, BTMESH_PB_ADV_NOT_USED, &frg_key, total_length);",
          "281:                     }",
          "282:                 } else {",
          "283:                     proto_tree_add_item(sub_tree_generic_provisioning, hf_btmesh_gpp_payload_fragment, tvb, offset, -1, ENC_NA);",
          "284:                 }",
          "285:             }",
          "287:         break;",
          "289:         case TRANSACTION_ACKNOWLEDGMENT:",
          "290:             proto_tree_add_item(sub_tree_generic_provisioning, hf_btmesh_gpcf_padding, tvb, offset, 1, ENC_NA);",
          "292:         break;",
          "294:         case TRANSACTION_CONTINUATION:",
          "295:             proto_tree_add_item(sub_tree_generic_provisioning, hf_btmesh_gpcf_segment_index, tvb, offset, 1, ENC_NA);",
          "296:             segment_index = (tvb_get_guint8(tvb, offset) & 0xFC) >> 2;",
          "297:             defragment = TRUE;",
          "298:             offset += 1;",
          "300:             if (!pinfo->fd->visited) {",
          "301:                 fd_head = fragment_add(&pbadv_reassembly_table,",
          "302:                     tvb, offset, pinfo,",
          "303:                     BTMESH_PB_ADV_NOT_USED, &frg_key,",
          "304:                     20 + (segment_index - 1) * 23,",
          "305:                     tvb_captured_length_remaining(tvb, offset),",
          "306:                     TRUE);",
          "307:             } else {",
          "308:                 proto_tree_add_item(sub_tree_generic_provisioning, hf_btmesh_gpp_payload_fragment, tvb, offset, -1, ENC_NA);",
          "309:             }",
          "311:         break;",
          "313:         case PROVISIONING_BEARER_CONTROL:",
          "314:             proto_tree_add_item(sub_tree_generic_provisioning, hf_btmesh_gpcf_bearer_opcode, tvb, offset, 1, ENC_NA);",
          "315:             gpcf_bearer_opcode = (tvb_get_guint8(tvb, offset) & 0xFC) >> 2;",
          "316:             offset += 1;",
          "317:             switch(gpcf_bearer_opcode) {",
          "318:                 case LINK_OPEN:",
          "319:                     proto_tree_add_item(sub_tree_generic_provisioning, hf_btmesh_gpcf_bearer_opcode_device_UUID, tvb, offset, 16, ENC_NA);",
          "320:                     offset += 16;",
          "322:                 break;",
          "323:                 case LINK_ACK:",
          "326:                 break;",
          "327:                 case LINK_CLOSE:",
          "328:                     proto_tree_add_item(sub_tree_generic_provisioning, hf_btmesh_gpcf_bearer_opcode_reason, tvb, offset, 1, ENC_NA);",
          "329:                     offset += 1;",
          "331:                 break;",
          "332:                 default:",
          "334:                     proto_tree_add_item(sub_tree_generic_provisioning, hf_btmesh_gpcf_bearer_unknown_data, tvb, offset, -1, ENC_NA);",
          "335:                     offset += tvb_captured_length_remaining(tvb, offset);",
          "336:                     proto_tree_add_expert(sub_tree, pinfo, &ei_btmesh_gpcf_unknown_opcode, tvb, offset, -1);",
          "337:                 break;",
          "338:             }",
          "340:             if (tvb_captured_length_remaining(tvb, offset) != 0) {",
          "341:                 proto_tree_add_expert(sub_tree, pinfo, &ei_btmesh_gpcf_unknown_payload, tvb, offset, -1);",
          "342:             }",
          "344:         break;",
          "345:     }",
          "347:     if (pinfo->fd->visited && defragment ) {",
          "348:         fd_head = fragment_get(&pbadv_reassembly_table, pinfo, BTMESH_PB_ADV_NOT_USED, &frg_key);",
          "349:         if (fd_head && (fd_head->flags&FD_DEFRAGMENTED)) {",
          "350:             tvbuff_t *next_tvb;",
          "351:             next_tvb = process_reassembled_data(tvb, offset, pinfo, \"Reassembled Provisioning PDU\", fd_head, &btmesh_gpp_frag_items, NULL, sub_tree_generic_provisioning);",
          "352:             if (next_tvb) {",
          "353:                 col_append_str(pinfo->cinfo, COL_INFO, \" (Message Reassembled)\");",
          "354:                 if (btmesh_provisioning_handle) {",
          "355:                     tr_ctx.transport = E_BTMESH_TR_ADV;",
          "356:                     tr_ctx.fragmented = TRUE;",
          "357:                     tr_ctx.segment_index = segment_index;",
          "358:                     call_dissector_with_data(btmesh_provisioning_handle, next_tvb, pinfo,",
          "359:                         proto_tree_get_root(sub_tree_generic_provisioning), &tr_ctx);",
          "360:                 } else {",
          "361:                     proto_tree_add_item(sub_tree_generic_provisioning, hf_btmesh_gpp_payload, next_tvb, 0, -1, ENC_NA);",
          "362:                 }",
          "363:             } else {",
          "364:                 col_append_fstr(pinfo->cinfo, COL_INFO,\" (Message fragment %u)\", segment_index);",
          "365:             }",
          "366:         }",
          "367:     }",
          "369:     return tvb_reported_length(tvb);",
          "370: }",
          "372: static void",
          "373: pbadv_init_routine(void)",
          "374: {",
          "375:     reassembly_table_register(&pbadv_reassembly_table, &pbadv_reassembly_table_functions);",
          "376: }",
          "378: void",
          "379: proto_register_btmesh_pbadv(void)",
          "380: {",
          "381:     static hf_register_info hf[] = {",
          "383:         { &hf_btmesh_pbadv_linkid,",
          "384:             { \"Link ID\", \"pbadv.linkid\",",
          "385:                 FT_UINT32, BASE_DEC, NULL, 0x0,",
          "386:                 NULL, HFILL }",
          "387:         },",
          "388:         { &hf_btmesh_pbadv_trnumber,",
          "389:             { \"Transaction Number\", \"pbadv.trnumber\",",
          "390:                 FT_UINT8, BASE_DEC, NULL, 0x0,",
          "391:                 NULL, HFILL }",
          "392:         },",
          "394:         { &hf_btmesh_generic_provisioning_control_format,",
          "395:             { \"Generic Provisioning Control Format\", \"pbadv.gen_prov.gpcf\",",
          "396:                 FT_UINT8, BASE_DEC, VALS(btmesh_generic_provisioning_control_format), 0x03,",
          "397:                 NULL, HFILL }",
          "398:         },",
          "399:         { &hf_btmesh_gpcf_segn,",
          "400:             { \"The last segment number\", \"pbadv.gen_prov.gpcf.segn\",",
          "401:                 FT_UINT8, BASE_DEC, NULL, 0xFC,",
          "402:                 NULL, HFILL }",
          "403:         },",
          "404:         { &hf_btmesh_gpcf_total_length,",
          "405:             { \"Total Length\", \"pbadv.gen_prov.gpcf.total_length\",",
          "406:                 FT_UINT16, BASE_DEC, NULL, 0x0,",
          "407:                 NULL, HFILL }",
          "408:         },",
          "409:         { &hf_btmesh_gpcf_fcs,",
          "410:             { \"Frame Check Sequence\", \"pbadv.gen_prov.gpcf.fcs\",",
          "411:                 FT_UINT8, BASE_HEX, NULL, 0x0,",
          "412:                 NULL, HFILL }",
          "413:         },",
          "414:         { &hf_btmesh_gpcf_padding,",
          "415:             { \"Padding\", \"pbadv.gen_prov.gpcf.padding\",",
          "416:                 FT_UINT8, BASE_DEC, NULL, 0xFC,",
          "417:                 NULL, HFILL }",
          "418:         },",
          "419:         { &hf_btmesh_gpcf_segment_index,",
          "420:             { \"Segment number of the transaction\", \"pbadv.gen_prov.gpcf.segment_index\",",
          "421:                 FT_UINT8, BASE_DEC, NULL, 0xFC,",
          "422:                 NULL, HFILL }",
          "423:         },",
          "424:         { &hf_btmesh_gpcf_bearer_opcode,",
          "425:             { \"Bearer Opcode\", \"pbadv.gen_prov.gpcf.bearer_opcode\",",
          "426:                 FT_UINT8, BASE_DEC, VALS(btmesh_gpcf_bearer_opcode_format), 0xFC,",
          "427:                 NULL, HFILL }",
          "428:         },",
          "429:         { &hf_btmesh_gpcf_bearer_opcode_device_UUID,",
          "430:             { \"Device UUID\", \"pbadv.gen_prov.gpcf.bearer_opcode.device_uuid\",",
          "431:                 FT_GUID, BASE_NONE, NULL, 0x00,",
          "432:                 NULL, HFILL }",
          "433:         },",
          "434:         { &hf_btmesh_gpcf_bearer_opcode_reason,",
          "435:             { \"Reason\", \"pbadv.gen_prov.gpcf.bearer_opcode.reason\",",
          "436:                 FT_UINT8, BASE_DEC, VALS(btmesh_gpcf_bearer_opcode_reason_format), 0x00,",
          "437:                 NULL, HFILL }",
          "438:         },",
          "439:         { &hf_btmesh_gpcf_bearer_unknown_data,",
          "440:             { \"Unknown Data\", \"pbadv.gen_prov.gpcf.unknown_data\",",
          "441:                 FT_BYTES, BASE_NONE, NULL, 0x0,",
          "442:                 NULL, HFILL }",
          "443:         },",
          "445:         { &hf_btmesh_gpp_payload,",
          "446:             { \"Generic Provisioning Payload\", \"pbadv.gen_prov.gpp.payload\",",
          "447:                 FT_BYTES, BASE_NONE, NULL, 0x0,",
          "448:                 NULL, HFILL }",
          "449:         },",
          "450:         { &hf_btmesh_gpp_payload_fragment,",
          "451:             { \"Generic Provisioning Payload Fragment\", \"pbadv.gen_prov.gpp.payload.fragment\",",
          "452:                 FT_BYTES, BASE_NONE, NULL, 0x0,",
          "453:                 NULL, HFILL }",
          "454:         },",
          "456:         { &hf_btmesh_gpp_fragments,",
          "457:             { \"Reassembled Generic Provisioning Payload Fragments\", \"pbadv.gen_prov.gpp.fragments\",",
          "458:                 FT_NONE, BASE_NONE, NULL, 0x0,",
          "459:                 \"Generic Provisioning Payload Fragments\", HFILL }",
          "460:         },",
          "461:         { &hf_btmesh_gpp_fragment,",
          "462:             { \"Generic Provisioning Payload Fragment\", \"pbadv.gen_prov.gpp.fragment\",",
          "463:                 FT_FRAMENUM, BASE_NONE, NULL, 0x0,",
          "464:                 NULL, HFILL }",
          "465:         },",
          "466:         { &hf_btmesh_gpp_fragment_overlap,",
          "467:             { \"Fragment overlap\", \"pbadv.gen_prov.gpp.fragment.overlap\",",
          "468:                 FT_BOOLEAN, BASE_NONE, NULL, 0x0,",
          "469:                 \"Fragment overlaps with other fragments\", HFILL }",
          "470:         },",
          "471:         { &hf_btmesh_gpp_fragment_overlap_conflict,",
          "472:             { \"Conflicting data in fragment overlap\", \"pbadv.gen_prov.gpp.fragment.overlap.conflict\",",
          "473:                 FT_BOOLEAN, BASE_NONE, NULL, 0x0,",
          "474:                 \"Overlapping fragments contained conflicting data\", HFILL }",
          "475:         },",
          "476:         { &hf_btmesh_gpp_fragment_multiple_tails,",
          "477:             { \"Multiple tail fragments found\", \"pbadv.gen_prov.gpp.fragment.multipletails\",",
          "478:                 FT_BOOLEAN, BASE_NONE, NULL, 0x0,",
          "479:                 \"Several tails were found when defragmenting the packet\", HFILL }",
          "480:         },",
          "481:         { &hf_btmesh_gpp_fragment_too_long_fragment,",
          "482:             { \"Fragment too long\", \"pbadv.gen_prov.gpp.fragment.toolongfragment\",",
          "483:                 FT_BOOLEAN, BASE_NONE, NULL, 0x0,",
          "484:                 \"Fragment contained data past end of packet\", HFILL }",
          "485:         },",
          "486:         { &hf_btmesh_gpp_fragment_error,",
          "487:             { \"Defragmentation error\", \"pbadv.gen_prov.gpp.fragment.error\",",
          "488:                 FT_FRAMENUM, BASE_NONE, NULL, 0x0,",
          "489:                 \"Defragmentation error due to illegal fragments\", HFILL }",
          "490:         },",
          "491:         { &hf_btmesh_gpp_fragment_count,",
          "492:             { \"Fragment count\", \"pbadv.gen_prov.gpp.fragment.count\",",
          "493:                 FT_UINT32, BASE_DEC, NULL, 0x0,",
          "494:                 NULL, HFILL }",
          "495:         },",
          "496:         { &hf_btmesh_gpp_reassembled_length,",
          "497:             { \"Reassembled Generic Provisioning Payload length\", \"pbadv.gen_prov.gpp.reassembled.length\",",
          "498:                 FT_UINT32, BASE_DEC, NULL, 0x0,",
          "499:                 \"The total length of the reassembled payload\", HFILL }",
          "500:         },",
          "501:     };",
          "503:     static gint *ett[] = {",
          "504:         &ett_btmesh_pbadv,",
          "505:         &ett_btmesh_generic_provisioning,",
          "506:         &ett_btmesh_gpp_fragments,",
          "507:         &ett_btmesh_gpp_fragment,",
          "508:     };",
          "510:     static ei_register_info ei[] = {",
          "511:         { &ei_btmesh_gpcf_unknown_opcode,{ \"pbadv.gpcf.unknown_opcode\", PI_PROTOCOL, PI_WARN, \"Unknown Opcode\", EXPFILL } },",
          "512:         { &ei_btmesh_gpcf_unknown_payload,{ \"pbadv.gpcf.unknown_payload\", PI_PROTOCOL, PI_ERROR, \"Unknown Payload\", EXPFILL } },",
          "513:     };",
          "515:     expert_module_t* expert_btmesh_pbadv;",
          "517:     proto_btmesh_pbadv = proto_register_protocol(\"Bluetooth Mesh PB-ADV\", \"BT Mesh PB-ADV\", \"pbadv\");",
          "519:     proto_register_field_array(proto_btmesh_pbadv, hf, array_length(hf));",
          "520:     proto_register_subtree_array(ett, array_length(ett));",
          "522:     expert_btmesh_pbadv = expert_register_protocol(proto_btmesh_pbadv);",
          "523:     expert_register_field_array(expert_btmesh_pbadv, ei, array_length(ei));",
          "526:     btmesh_pbadv_module = */prefs_register_protocol_subtree(\"Bluetooth\", proto_btmesh_pbadv, NULL);",
          "527:     register_dissector(\"btmesh.pbadv\", dissect_btmesh_pbadv_msg, proto_btmesh_pbadv);",
          "529:     register_init_routine(&pbadv_init_routine);",
          "530: }",
          "532: void",
          "533: proto_reg_handoff_btmesh_pbadv(void)",
          "534: {",
          "535:     btmesh_provisioning_handle = find_dissector(\"btmesh.provisioning\");",
          "536: }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-btmesh-provisioning.c||epan/dissectors/packet-btmesh-provisioning.c": [
          "File: epan/dissectors/packet-btmesh-provisioning.c -> epan/dissectors/packet-btmesh-provisioning.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include \"tfs.h\"",
          "18: #include <epan/packet.h>",
          "19: #include <epan/prefs.h>",
          "20: #include <epan/expert.h>",
          "22: #include \"packet-btmesh.h\"",
          "24: #define PROVISIONING_INVITE_PDU          0x00",
          "25: #define PROVISIONING_CAPABILITIES_PDU    0x01",
          "26: #define PROVISIONING_START_PDU           0x02",
          "27: #define PROVISIONING_PUBLIC_KEY_PDU      0x03",
          "28: #define PROVISIONING_INPUT_COMPLETE_PDU  0x04",
          "29: #define PROVISIONING_CONFIRMATION_PDU    0x05",
          "30: #define PROVISIONING_RANDOM_PDU          0x06",
          "31: #define PROVISIONING_DATA_PDU            0x07",
          "32: #define PROVISIONING_COMPLETE_PDU        0x08",
          "33: #define PROVISIONING_FAILED_PDU          0x09",
          "35: #define NO_OOB_AUTHENTICATION_IS_USED     0x00",
          "36: #define STATIC_OOB_AUTHENTICATION_IS_USED 0x01",
          "37: #define OUTPUT_OOB_AUTHENTICATION_IS_USED 0x02",
          "38: #define INPUT_OOB_AUTHENTICATION_IS_USED  0x03",
          "40: void proto_register_btmesh_provisioning(void);",
          "42: static int proto_btmesh_provisioning = -1;",
          "43: static int hf_btmesh_provisioning_pdu_type = -1;",
          "44: static int hf_btmesh_provisioning_pdu_padding = -1;",
          "46: static int hf_btmesh_provisioning_attention_duration = -1;",
          "48: static int hf_btmesh_provisioning_number_of_elements = -1;",
          "49: static int hf_btmesh_provisioning_algorithms = -1;",
          "50: static int hf_btmesh_provisioning_algorithms_p256 = -1;",
          "51: static int hf_btmesh_provisioning_algorithms_rfu = -1;",
          "52: static int hf_btmesh_provisioning_public_key_type = -1;",
          "53: static int hf_btmesh_provisioning_public_key_type_oob = -1;",
          "54: static int hf_btmesh_provisioning_public_key_type_rfu = -1;",
          "55: static int hf_btmesh_provisioning_static_oob_type = -1;",
          "56: static int hf_btmesh_provisioning_static_oob_type_static_oob_available = -1;",
          "57: static int hf_btmesh_provisioning_static_oob_type_rfu = -1;",
          "58: static int hf_btmesh_provisioning_output_oob_size = -1;",
          "59: static int hf_btmesh_provisioning_output_oob_action = -1;",
          "60: static int hf_btmesh_provisioning_output_oob_action_blink = -1;",
          "61: static int hf_btmesh_provisioning_output_oob_action_beep = -1;",
          "62: static int hf_btmesh_provisioning_output_oob_action_vibrate = -1;",
          "63: static int hf_btmesh_provisioning_output_oob_action_output_numeric = -1;",
          "64: static int hf_btmesh_provisioning_output_oob_action_output_alphanumeric = -1;",
          "65: static int hf_btmesh_provisioning_output_oob_action_output_rfu = -1;",
          "66: static int hf_btmesh_provisioning_input_oob_size = -1;",
          "67: static int hf_btmesh_provisioning_input_oob_action = -1;",
          "68: static int hf_btmesh_provisioning_input_oob_action_push = -1;",
          "69: static int hf_btmesh_provisioning_input_oob_action_twist = -1;",
          "70: static int hf_btmesh_provisioning_input_oob_action_input_numeric = -1;",
          "71: static int hf_btmesh_provisioning_input_oob_action_input_alphanumeric = -1;",
          "72: static int hf_btmesh_provisioning_input_oob_action_rfu = -1;",
          "73: static int hf_btmesh_provisioning_algorithm = -1;",
          "74: static int hf_btmesh_provisioning_public_key = -1;",
          "75: static int hf_btmesh_provisioning_authentication_method = -1;",
          "76: static int hf_btmesh_provisioning_authentication_action_no_oob_action = -1;",
          "77: static int hf_btmesh_provisioning_authentication_action_static_oob_action = -1;",
          "78: static int hf_btmesh_provisioning_authentication_action_output_oob_action = -1;",
          "79: static int hf_btmesh_provisioning_authentication_action_input_oob_action = -1;",
          "80: static int hf_btmesh_provisioning_authentication_size_no_oob_action = -1;",
          "81: static int hf_btmesh_provisioning_authentication_size_static_oob_action = -1;",
          "82: static int hf_btmesh_provisioning_authentication_size_output_oob_action = -1;",
          "83: static int hf_btmesh_provisioning_authentication_size_input_oob_action = -1;",
          "84: static int hf_btmesh_provisioning_public_key_x = -1;",
          "85: static int hf_btmesh_provisioning_public_key_y = -1;",
          "86: static int hf_btmesh_provisioning_confirmation = -1;",
          "87: static int hf_btmesh_provisioning_random = -1;",
          "88: static int hf_btmesh_provisioning_encrypted_provisioning_data = -1;",
          "89: static int hf_btmesh_provisioning_decrypted_provisioning_data_mic = -1;",
          "90: static int hf_btmesh_provisioning_error_code = -1;",
          "92: static int hf_btmesh_provisioning_unknown_data = -1;",
          "94: static int ett_btmesh_provisioning = -1;",
          "95: static int ett_btmesh_provisioning_algorithms = -1;",
          "96: static int ett_btmesh_provisioning_public_key_type = -1;",
          "97: static int ett_btmesh_provisioning_static_oob_type = -1;",
          "98: static int ett_btmesh_provisioning_output_oob_action = -1;",
          "99: static int ett_btmesh_provisioning_output_oob_size = -1;",
          "100: static int ett_btmesh_provisioning_input_oob_action = -1;",
          "101: static int ett_btmesh_provisioning_input_oob_size = -1;",
          "102: static int ett_btmesh_provisioning_algorithm = -1;",
          "103: static int ett_btmesh_provisioning_public_key = -1;",
          "104: static int ett_btmesh_provisioning_authentication_method = -1;",
          "105: static int ett_btmesh_provisioning_authentication_action = -1;",
          "106: static int ett_btmesh_provisioning_authentication_size = -1;",
          "107: static int ett_btmesh_provisioning_error_code = -1;",
          "109: static expert_field ei_btmesh_provisioning_unknown_opcode = EI_INIT;",
          "110: static expert_field ei_btmesh_provisioning_unknown_payload = EI_INIT;",
          "111: static expert_field ei_btmesh_provisioning_unknown_authentication_method = EI_INIT;",
          "112: static expert_field ei_btmesh_provisioning_rfu_not_zero = EI_INIT;",
          "113: static expert_field ei_btmesh_provisioning_in_rfu_range = EI_INIT;",
          "114: static expert_field ei_btmesh_provisioning_prohibited = EI_INIT;",
          "115: static expert_field ei_btmesh_provisioning_zero_elements = EI_INIT;",
          "117: static const value_string btmesh_provisioning_pdu_type_format[] = {",
          "118:     { 0, \"Provisioning Invite PDU\" },",
          "119:     { 1, \"Provisioning Capabilities PDU\" },",
          "120:     { 2, \"Provisioning Start PDU\" },",
          "121:     { 3, \"Provisioning Public Key PDU\" },",
          "122:     { 4, \"Provisioning Input Complete PDU\" },",
          "123:     { 5, \"Provisioning Confirmation PDU\" },",
          "124:     { 6, \"Provisioning Random PDU\" },",
          "125:     { 7, \"Provisioning Data PDU\" },",
          "126:     { 8, \"Provisioning Complete PDU\" },",
          "127:     { 9, \"Provisioning Failed PDU\" },",
          "128:     { 0, NULL }",
          "129: };",
          "131: static const value_string btmesh_provisioning_error_code_format[] = {",
          "132:     { 0, \"Prohibited\" },",
          "133:     { 1, \"Invalid PDU\" },",
          "134:     { 2, \"Invalid Format\" },",
          "135:     { 3, \"Unexpected PDU\" },",
          "136:     { 4, \"Confirmation Failed\" },",
          "137:     { 5, \"Out of Resources\" },",
          "138:     { 6, \"Decryption Failed\" },",
          "139:     { 7, \"Unexpected Error\" },",
          "140:     { 8, \"Cannot Assign Addresses\" },",
          "141:     { 0, NULL }",
          "142: };",
          "144: static const value_string btmesh_provisioning_algorithm_format[] = {",
          "145:     { 0, \"FIPS P-256 Elliptic Curve\" },",
          "146:     { 0, NULL }",
          "147: };",
          "149: static const value_string btmesh_provisioning_public_key_format[] = {",
          "150:     { 0, \"No OOB Public Key is used\" },",
          "151:     { 1, \"OOB Public Key is used\" },",
          "152:     { 0, NULL }",
          "153: };",
          "155: static const value_string btmesh_provisioning_authentication_method_format[] = {",
          "156:     { 0, \"No OOB authentication is used\" },",
          "157:     { 1, \"Static OOB authentication is used\" },",
          "158:     { 2, \"Output OOB authentication is used\" },",
          "159:     { 3, \"Input OOB authentication is used\" },",
          "160:     { 0, NULL }",
          "161: };",
          "163: static const value_string btmesh_provisioning_authentication_action_no_oob_action_format[] = {",
          "164:     { 0, \"None\" },",
          "165:     { 0, NULL }",
          "166: };",
          "168: static const value_string btmesh_provisioning_authentication_action_static_oob_action_format[] = {",
          "169:     { 0, \"None\" },",
          "170:     { 0, NULL }",
          "171: };",
          "173: static const value_string btmesh_provisioning_authentication_action_output_oob_action_format[] = {",
          "174:     { 0, \"Blink\" },",
          "175:     { 1, \"Beep\" },",
          "176:     { 2, \"Vibrate\" },",
          "177:     { 3, \"Output Numeric\" },",
          "178:     { 4, \"Output Alphanumeric\" },",
          "179:     { 0, NULL }",
          "180: };",
          "182: static const value_string btmesh_provisioning_authentication_action_input_oob_action_format[] = {",
          "183:     { 0, \"Push\" },",
          "184:     { 1, \"Twist\" },",
          "185:     { 2, \"Input Numeric\" },",
          "186:     { 3, \"Input Alphanumeric\" },",
          "187:     { 0, NULL }",
          "188: };",
          "190: static const value_string btmesh_provisioning_authentication_size_no_oob_action_format[] = {",
          "191:     { 0, \"None\" },",
          "192:     { 0, NULL }",
          "193: };",
          "195: static const value_string btmesh_provisioning_authentication_size_static_oob_action_format[] = {",
          "196:     { 0, \"None\" },",
          "197:     { 0, NULL }",
          "198: };",
          "200: static const value_string btmesh_provisioning_authentication_size_output_oob_action_format[] = {",
          "201:     { 0, \"Prohibited\" },",
          "202:     { 1, \"The Output OOB size in characters to be used\" },",
          "203:     { 2, \"The Output OOB size in characters to be used\" },",
          "204:     { 3, \"The Output OOB size in characters to be used\" },",
          "205:     { 4, \"The Output OOB size in characters to be used\" },",
          "206:     { 5, \"The Output OOB size in characters to be used\" },",
          "207:     { 6, \"The Output OOB size in characters to be used\" },",
          "208:     { 7, \"The Output OOB size in characters to be used\" },",
          "209:     { 8, \"The Output OOB size in characters to be used\" },",
          "210:     { 0, NULL }",
          "211: };",
          "213: static const value_string btmesh_provisioning_authentication_size_input_oob_action_format[] = {",
          "214:     { 0, \"Prohibited\" },",
          "215:     { 1, \"The Input OOB size in characters to be used\" },",
          "216:     { 2, \"The Input OOB size in characters to be used\" },",
          "217:     { 3, \"The Input OOB size in characters to be used\" },",
          "218:     { 4, \"The Input OOB size in characters to be used\" },",
          "219:     { 5, \"The Input OOB size in characters to be used\" },",
          "220:     { 6, \"The Input OOB size in characters to be used\" },",
          "221:     { 7, \"The Input OOB size in characters to be used\" },",
          "222:     { 8, \"The Input OOB size in characters to be used\" },",
          "223:     { 0, NULL }",
          "224: };",
          "226: static const value_string btmesh_provisioning_output_oob_size_format[] = {",
          "227:     { 0, \"The device does not support output OOB\" },",
          "228:     { 1, \"Maximum size in octets supported by the device\" },",
          "229:     { 2, \"Maximum size in octets supported by the device\" },",
          "230:     { 3, \"Maximum size in octets supported by the device\" },",
          "231:     { 4, \"Maximum size in octets supported by the device\" },",
          "232:     { 5, \"Maximum size in octets supported by the device\" },",
          "233:     { 6, \"Maximum size in octets supported by the device\" },",
          "234:     { 7, \"Maximum size in octets supported by the device\" },",
          "235:     { 8, \"Maximum size in octets supported by the device\" },",
          "236:     { 0, NULL }",
          "237: };",
          "239: static const value_string btmesh_provisioning_input_oob_size_format[] = {",
          "240:     { 0, \"The device does not support input OOB\" },",
          "241:     { 1, \"Maximum size in octets supported by the device\" },",
          "242:     { 2, \"Maximum size in octets supported by the device\" },",
          "243:     { 3, \"Maximum size in octets supported by the device\" },",
          "244:     { 4, \"Maximum size in octets supported by the device\" },",
          "245:     { 5, \"Maximum size in octets supported by the device\" },",
          "246:     { 6, \"Maximum size in octets supported by the device\" },",
          "247:     { 7, \"Maximum size in octets supported by the device\" },",
          "248:     { 8, \"Maximum size in octets supported by the device\" },",
          "249:     { 0, NULL }",
          "250: };",
          "252: static gint",
          "253: dissect_btmesh_provisioning_msg(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *data)",
          "254: {",
          "255:     proto_item *item, *algorithms_item, *public_key_type_item;",
          "256:     proto_item *static_oob_type_item, *output_oob_action_item, *input_oob_action_item;",
          "257:     proto_tree *sub_tree, *algorithms_tree, *public_key_type_tree;",
          "258:     proto_tree *static_oob_type_tree, *output_oob_action_tree, *input_oob_action_tree;",
          "259:     proto_item *expert_item;",
          "260:     proto_tree *expert_tree;",
          "261:     int offset = 0;",
          "262:     btle_mesh_transport_ctx_t *tr_ctx;",
          "263:     btle_mesh_transport_ctx_t dummy_ctx = {E_BTMESH_TR_UNKNOWN, FALSE, 0};",
          "264:     guint8 authentication_method, authentication_action, authentication_size;",
          "265:     guint8 provisioning_algorithm;",
          "266:     guint8 prohibited_value, output_oob_size, input_oob_size;",
          "267:     guint16 rfu_uint16;",
          "268:     guint8 no_of_elements;",
          "269:     guint8 error_code;",
          "270:     guint8 provisioning_public_key;",
          "272:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"BT Mesh Provisioning PDU\");",
          "274:     if (data == NULL) {",
          "275:         tr_ctx = &dummy_ctx;",
          "276:     } else {",
          "277:         tr_ctx = (btle_mesh_transport_ctx_t *) data;",
          "278:     }",
          "280:     item = proto_tree_add_item(tree, proto_btmesh_provisioning, tvb, offset, -1, ENC_NA);",
          "281:     sub_tree = proto_item_add_subtree(item, ett_btmesh_provisioning);",
          "283:     proto_tree_add_item(sub_tree, hf_btmesh_provisioning_pdu_type, tvb, offset, 1, ENC_NA);",
          "284:     guint8 pdu_type = tvb_get_guint8(tvb, offset) & 0x3F;",
          "285:     proto_tree_add_item(sub_tree, hf_btmesh_provisioning_pdu_padding, tvb, offset, 1, ENC_NA);",
          "286:     guint8 pdu_padding = (tvb_get_guint8(tvb, offset) & 0xC0) >> 6;",
          "287:     if (pdu_padding != 0) {",
          "289:         proto_tree_add_expert(sub_tree, pinfo, &ei_btmesh_provisioning_rfu_not_zero, tvb, offset, -1);",
          "290:     }",
          "291:     offset += 1;",
          "293:     col_set_str(pinfo->cinfo, COL_INFO, val_to_str_const(pdu_type, btmesh_provisioning_pdu_type_format, \"Unknown Provisioning PDU\"));",
          "294:     if (tr_ctx->fragmented) {",
          "295:         switch (tr_ctx->transport) {",
          "296:             case E_BTMESH_TR_ADV:",
          "297:                 col_append_fstr(pinfo->cinfo, COL_INFO,\" (Message fragment %u)\", tr_ctx->segment_index);",
          "299:             break;",
          "300:             case E_BTMESH_TR_PROXY:",
          "301:                 col_append_str(pinfo->cinfo, COL_INFO,\" (Last Segment)\");",
          "303:             break;",
          "304:             default:",
          "307:             break;",
          "308:         }",
          "309:     }",
          "311:     switch(pdu_type) {",
          "312:         case PROVISIONING_INVITE_PDU:",
          "313:             proto_tree_add_item(sub_tree, hf_btmesh_provisioning_attention_duration, tvb, offset, 1, ENC_NA);",
          "314:             offset += 1;",
          "316:         break;",
          "317:         case PROVISIONING_CAPABILITIES_PDU:",
          "318:             proto_tree_add_item(sub_tree, hf_btmesh_provisioning_number_of_elements, tvb, offset, 1, ENC_NA);",
          "319:             no_of_elements = tvb_get_guint8(tvb, offset);",
          "320:             if (no_of_elements == 0) {",
          "321:                 proto_tree_add_expert(sub_tree, pinfo, &ei_btmesh_provisioning_zero_elements, tvb, offset, -1);",
          "322:             }",
          "323:             offset += 1;",
          "325:             algorithms_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_algorithms, tvb, offset, 2, ENC_NA);",
          "326:             algorithms_tree = proto_item_add_subtree(algorithms_item, ett_btmesh_provisioning_algorithms);",
          "327:             proto_tree_add_item(algorithms_tree, hf_btmesh_provisioning_algorithms_p256, tvb, offset, 2, ENC_NA);",
          "328:             proto_tree_add_item(algorithms_tree, hf_btmesh_provisioning_algorithms_rfu, tvb, offset, 2, ENC_NA);",
          "329:             rfu_uint16 = tvb_get_guint16(tvb, offset, ENC_BIG_ENDIAN) >> 1;",
          "330:             if (rfu_uint16 != 0) {",
          "331:                 proto_tree_add_expert(algorithms_tree, pinfo, &ei_btmesh_provisioning_rfu_not_zero, tvb, offset, -1);",
          "332:             }",
          "333:             offset += 2;",
          "335:             public_key_type_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_public_key_type, tvb, offset, 1, ENC_NA);",
          "336:             public_key_type_tree = proto_item_add_subtree(public_key_type_item, ett_btmesh_provisioning_public_key_type);",
          "337:             proto_tree_add_item(public_key_type_tree, hf_btmesh_provisioning_public_key_type_oob, tvb, offset, 1, ENC_NA);",
          "338:             proto_tree_add_item(public_key_type_tree, hf_btmesh_provisioning_public_key_type_rfu, tvb, offset, 1, ENC_NA);",
          "339:             prohibited_value = tvb_get_guint8(tvb, offset) >> 1;",
          "340:             if (prohibited_value != 0) {",
          "341:                 proto_tree_add_expert(public_key_type_tree, pinfo, &ei_btmesh_provisioning_prohibited, tvb, offset, -1);",
          "342:             }",
          "343:             offset += 1;",
          "345:             static_oob_type_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_static_oob_type, tvb, offset, 1, ENC_NA);",
          "346:             static_oob_type_tree = proto_item_add_subtree(static_oob_type_item, ett_btmesh_provisioning_static_oob_type);",
          "347:             proto_tree_add_item(static_oob_type_tree, hf_btmesh_provisioning_static_oob_type_static_oob_available, tvb, offset, 1, ENC_NA);",
          "348:             proto_tree_add_item(static_oob_type_tree, hf_btmesh_provisioning_static_oob_type_rfu, tvb, offset, 1, ENC_NA);",
          "349:             prohibited_value = tvb_get_guint8(tvb, offset) >> 1;",
          "350:             if (prohibited_value != 0) {",
          "351:                 proto_tree_add_expert(static_oob_type_tree, pinfo, &ei_btmesh_provisioning_prohibited, tvb, offset, -1);",
          "352:             }",
          "353:             offset += 1;",
          "355:             expert_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_output_oob_size, tvb, offset, 1, ENC_NA);",
          "356:             output_oob_size = tvb_get_guint8(tvb, offset);",
          "357:             if (output_oob_size >= 9) {",
          "358:                 expert_tree = proto_item_add_subtree(expert_item, ett_btmesh_provisioning_output_oob_size);",
          "359:                 proto_tree_add_expert(expert_tree, pinfo, &ei_btmesh_provisioning_in_rfu_range, tvb, offset, -1);",
          "360:             }",
          "361:             offset += 1;",
          "363:             output_oob_action_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_output_oob_action, tvb, offset, 2, ENC_NA);",
          "364:             output_oob_action_tree = proto_item_add_subtree(output_oob_action_item, ett_btmesh_provisioning_output_oob_action);",
          "365:             proto_tree_add_item(output_oob_action_tree, hf_btmesh_provisioning_output_oob_action_blink, tvb, offset, 2, ENC_NA);",
          "366:             proto_tree_add_item(output_oob_action_tree, hf_btmesh_provisioning_output_oob_action_beep, tvb, offset, 2, ENC_NA);",
          "367:             proto_tree_add_item(output_oob_action_tree, hf_btmesh_provisioning_output_oob_action_vibrate, tvb, offset, 2, ENC_NA);",
          "368:             proto_tree_add_item(output_oob_action_tree, hf_btmesh_provisioning_output_oob_action_output_numeric, tvb, offset, 2, ENC_NA);",
          "369:             proto_tree_add_item(output_oob_action_tree, hf_btmesh_provisioning_output_oob_action_output_alphanumeric, tvb, offset, 2, ENC_NA);",
          "370:             proto_tree_add_item(output_oob_action_tree, hf_btmesh_provisioning_output_oob_action_output_rfu, tvb, offset, 2, ENC_NA);",
          "371:             rfu_uint16 = tvb_get_guint16(tvb, offset, ENC_BIG_ENDIAN) >> 5;",
          "372:             if (rfu_uint16 != 0) {",
          "373:                 proto_tree_add_expert(output_oob_action_tree, pinfo, &ei_btmesh_provisioning_rfu_not_zero, tvb, offset, -1);",
          "374:             }",
          "375:             offset += 2;",
          "377:             expert_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_input_oob_size, tvb, offset, 1, ENC_NA);",
          "378:             input_oob_size = tvb_get_guint8(tvb, offset);",
          "379:             if (input_oob_size >= 9) {",
          "380:                 expert_tree = proto_item_add_subtree(expert_item, ett_btmesh_provisioning_input_oob_size);",
          "381:                 proto_tree_add_expert(expert_tree, pinfo, &ei_btmesh_provisioning_in_rfu_range, tvb, offset, -1);",
          "382:             }",
          "383:             offset += 1;",
          "385:             input_oob_action_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_input_oob_action, tvb, offset, 2, ENC_NA);",
          "386:             input_oob_action_tree = proto_item_add_subtree(input_oob_action_item, ett_btmesh_provisioning_input_oob_action);",
          "387:             proto_tree_add_item(input_oob_action_tree, hf_btmesh_provisioning_input_oob_action_push, tvb, offset, 2, ENC_NA);",
          "388:             proto_tree_add_item(input_oob_action_tree, hf_btmesh_provisioning_input_oob_action_twist, tvb, offset, 2, ENC_NA);",
          "389:             proto_tree_add_item(input_oob_action_tree, hf_btmesh_provisioning_input_oob_action_input_numeric, tvb, offset, 2, ENC_NA);",
          "390:             proto_tree_add_item(input_oob_action_tree, hf_btmesh_provisioning_input_oob_action_input_alphanumeric, tvb, offset, 2, ENC_NA);",
          "391:             proto_tree_add_item(input_oob_action_tree, hf_btmesh_provisioning_input_oob_action_rfu, tvb, offset, 2, ENC_NA);",
          "392:             rfu_uint16 = tvb_get_guint16(tvb, offset, ENC_BIG_ENDIAN) >> 4;",
          "393:             if (rfu_uint16 != 0) {",
          "394:                 proto_tree_add_expert(input_oob_action_tree, pinfo, &ei_btmesh_provisioning_rfu_not_zero, tvb, offset, -1);",
          "395:             }",
          "396:             offset += 2;",
          "398:         break;",
          "399:         case PROVISIONING_START_PDU:",
          "400:             expert_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_algorithm, tvb, offset, 1, ENC_NA);",
          "401:             provisioning_algorithm = tvb_get_guint8(tvb, offset);",
          "402:             if (provisioning_algorithm >= 1) {",
          "403:                 expert_tree = proto_item_add_subtree(expert_item, ett_btmesh_provisioning_algorithm);",
          "404:                 proto_tree_add_expert(expert_tree, pinfo, &ei_btmesh_provisioning_in_rfu_range, tvb, offset, -1);",
          "405:             }",
          "406:             offset += 1;",
          "408:             expert_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_public_key, tvb, offset, 1, ENC_NA);",
          "409:             provisioning_public_key = tvb_get_guint8(tvb, offset);",
          "410:             if (provisioning_public_key >= 2) {",
          "411:                 expert_tree = proto_item_add_subtree(expert_item, ett_btmesh_provisioning_public_key);",
          "412:                 proto_tree_add_expert(expert_tree, pinfo, &ei_btmesh_provisioning_in_rfu_range, tvb, offset, -1);",
          "413:             }",
          "414:             offset += 1;",
          "416:             expert_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_authentication_method, tvb, offset, 1, ENC_NA);",
          "417:             authentication_method = tvb_get_guint8(tvb, offset);",
          "418:             authentication_action = 0;",
          "419:             authentication_size = 0;",
          "420:             offset += 1;",
          "422:             switch(authentication_method){",
          "423:                 case NO_OOB_AUTHENTICATION_IS_USED:",
          "424:                     expert_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_authentication_action_no_oob_action, tvb, offset, 1, ENC_NA);",
          "425:                     authentication_action = tvb_get_guint8(tvb, offset);",
          "426:                     if (authentication_action != 0) {",
          "427:                         expert_tree = proto_item_add_subtree(expert_item, ett_btmesh_provisioning_authentication_action);",
          "428:                         proto_tree_add_expert(expert_tree, pinfo, &ei_btmesh_provisioning_in_rfu_range, tvb, offset, -1);",
          "429:                     }",
          "430:                     offset += 1;",
          "432:                     expert_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_authentication_size_no_oob_action, tvb, offset, 1, ENC_NA);",
          "433:                     authentication_size = tvb_get_guint8(tvb, offset);",
          "434:                     if (authentication_size != 0) {",
          "435:                         expert_tree = proto_item_add_subtree(expert_item, ett_btmesh_provisioning_authentication_size);",
          "436:                         proto_tree_add_expert(expert_tree, pinfo, &ei_btmesh_provisioning_in_rfu_range, tvb, offset, -1);",
          "437:                     }",
          "438:                     offset += 1;",
          "440:                 break;",
          "441:                 case STATIC_OOB_AUTHENTICATION_IS_USED:",
          "442:                     expert_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_authentication_action_static_oob_action, tvb, offset, 1, ENC_NA);",
          "443:                     authentication_action = tvb_get_guint8(tvb, offset);",
          "444:                     if (authentication_action != 0) {",
          "445:                         expert_tree = proto_item_add_subtree(expert_item, ett_btmesh_provisioning_authentication_action);",
          "446:                         proto_tree_add_expert(expert_tree, pinfo, &ei_btmesh_provisioning_in_rfu_range, tvb, offset, -1);",
          "447:                     }",
          "448:                     offset += 1;",
          "450:                     expert_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_authentication_size_static_oob_action, tvb, offset, 1, ENC_NA);",
          "451:                     authentication_size = tvb_get_guint8(tvb, offset);",
          "452:                     if (authentication_size != 0) {",
          "453:                         expert_tree = proto_item_add_subtree(expert_item, ett_btmesh_provisioning_authentication_size);",
          "454:                         proto_tree_add_expert(expert_tree, pinfo, &ei_btmesh_provisioning_in_rfu_range, tvb, offset, -1);",
          "455:                     }",
          "456:                     offset += 1;",
          "458:                 break;",
          "459:                 case OUTPUT_OOB_AUTHENTICATION_IS_USED:",
          "460:                     expert_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_authentication_action_output_oob_action, tvb, offset, 1, ENC_NA);",
          "461:                     authentication_action = tvb_get_guint8(tvb, offset);",
          "462:                     if (authentication_action >= 5) {",
          "463:                         expert_tree = proto_item_add_subtree(expert_item, ett_btmesh_provisioning_authentication_action);",
          "464:                         proto_tree_add_expert(expert_tree, pinfo, &ei_btmesh_provisioning_in_rfu_range, tvb, offset, -1);",
          "465:                     }",
          "466:                     offset += 1;",
          "468:                     expert_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_authentication_size_output_oob_action, tvb, offset, 1, ENC_NA);",
          "469:                     authentication_size = tvb_get_guint8(tvb, offset);",
          "470:                     if (authentication_size >= 9) {",
          "471:                         expert_tree = proto_item_add_subtree(expert_item, ett_btmesh_provisioning_authentication_size);",
          "472:                         proto_tree_add_expert(expert_tree, pinfo, &ei_btmesh_provisioning_in_rfu_range, tvb, offset, -1);",
          "473:                     } else {",
          "474:                         if (authentication_size == 0) {",
          "475:                             expert_tree = proto_item_add_subtree(expert_item, ett_btmesh_provisioning_authentication_size);",
          "476:                             proto_tree_add_expert(expert_tree, pinfo, &ei_btmesh_provisioning_prohibited, tvb, offset, -1);",
          "477:                         }",
          "478:                     }",
          "479:                     offset += 1;",
          "481:                 break;",
          "482:                 case INPUT_OOB_AUTHENTICATION_IS_USED:",
          "483:                     expert_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_authentication_action_input_oob_action, tvb, offset, 1, ENC_NA);",
          "484:                     authentication_action = tvb_get_guint8(tvb, offset);",
          "485:                     if (authentication_action >= 4) {",
          "486:                         expert_tree = proto_item_add_subtree(expert_item, ett_btmesh_provisioning_authentication_action);",
          "487:                         proto_tree_add_expert(expert_tree, pinfo, &ei_btmesh_provisioning_in_rfu_range, tvb, offset, -1);",
          "488:                     }",
          "489:                     offset += 1;",
          "491:                     expert_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_authentication_size_input_oob_action, tvb, offset, 1, ENC_NA);",
          "492:                     authentication_size = tvb_get_guint8(tvb, offset);",
          "493:                     if (authentication_size >= 9) {",
          "494:                         expert_tree = proto_item_add_subtree(expert_item, ett_btmesh_provisioning_authentication_size);",
          "495:                         proto_tree_add_expert(expert_tree, pinfo, &ei_btmesh_provisioning_in_rfu_range, tvb, offset, -1);",
          "496:                     } else {",
          "497:                         if (authentication_size == 0) {",
          "498:                             expert_tree = proto_item_add_subtree(expert_item, ett_btmesh_provisioning_authentication_size);",
          "499:                             proto_tree_add_expert(expert_tree, pinfo, &ei_btmesh_provisioning_prohibited, tvb, offset, -1);",
          "500:                         }",
          "501:                     }",
          "502:                     offset += 1;",
          "504:                 break;",
          "505:                 default:",
          "507:                     expert_tree = proto_item_add_subtree(expert_item, ett_btmesh_provisioning_authentication_method);",
          "508:                     proto_tree_add_item(expert_tree, hf_btmesh_provisioning_unknown_data, tvb, offset, -1, ENC_NA);",
          "509:                     proto_tree_add_expert(expert_tree, pinfo, &ei_btmesh_provisioning_unknown_authentication_method, tvb, offset, -1);",
          "510:                     offset += tvb_captured_length_remaining(tvb, offset);",
          "512:                 break;",
          "513:             }",
          "515:         break;",
          "516:         case PROVISIONING_PUBLIC_KEY_PDU:",
          "517:             proto_tree_add_item(sub_tree, hf_btmesh_provisioning_public_key_x, tvb, offset, 32, ENC_NA);",
          "518:             offset += 32;",
          "519:             proto_tree_add_item(sub_tree, hf_btmesh_provisioning_public_key_y, tvb, offset, 32, ENC_NA);",
          "520:             offset += 32;",
          "522:         break;",
          "523:         case PROVISIONING_INPUT_COMPLETE_PDU:",
          "525:         break;",
          "526:         case PROVISIONING_CONFIRMATION_PDU:",
          "527:             proto_tree_add_item(sub_tree, hf_btmesh_provisioning_confirmation, tvb, offset, 16, ENC_NA);",
          "528:             offset += 16;",
          "530:         break;",
          "531:         case PROVISIONING_RANDOM_PDU:",
          "532:             proto_tree_add_item(sub_tree, hf_btmesh_provisioning_random, tvb, offset, 16, ENC_NA);",
          "533:             offset += 16;",
          "535:         break;",
          "536:         case PROVISIONING_DATA_PDU:",
          "537:             proto_tree_add_item(sub_tree, hf_btmesh_provisioning_encrypted_provisioning_data, tvb, offset, 25, ENC_NA);",
          "538:             offset += 25;",
          "539:             proto_tree_add_item(sub_tree, hf_btmesh_provisioning_decrypted_provisioning_data_mic, tvb, offset, 8, ENC_NA);",
          "540:             offset += 8;",
          "542:         break;",
          "543:         case PROVISIONING_COMPLETE_PDU:",
          "545:         break;",
          "546:         case PROVISIONING_FAILED_PDU:",
          "547:             expert_item = proto_tree_add_item(sub_tree, hf_btmesh_provisioning_error_code, tvb, offset, 1, ENC_NA);",
          "548:             error_code = tvb_get_guint8(tvb, offset);",
          "549:             if (error_code >= 9) {",
          "550:                 expert_tree = proto_item_add_subtree(expert_item, ett_btmesh_provisioning_error_code);",
          "551:                 proto_tree_add_expert(expert_tree, pinfo, &ei_btmesh_provisioning_in_rfu_range, tvb, offset, -1);",
          "552:             }",
          "553:             offset += 1;",
          "555:         break;",
          "556:         default:",
          "558:             proto_tree_add_item(sub_tree, hf_btmesh_provisioning_unknown_data, tvb, offset, -1, ENC_NA);",
          "559:             proto_tree_add_expert(sub_tree, pinfo, &ei_btmesh_provisioning_unknown_opcode, tvb, offset, -1);",
          "560:             offset += tvb_captured_length_remaining(tvb, offset);",
          "562:         break;",
          "563:     }",
          "565:     if (tvb_captured_length_remaining(tvb, offset) != 0) {",
          "566:         proto_tree_add_expert(sub_tree, pinfo, &ei_btmesh_provisioning_unknown_payload, tvb, offset, -1);",
          "567:     }",
          "569:     return tvb_reported_length(tvb);",
          "570: }",
          "572: void",
          "573: proto_register_btmesh_provisioning(void)",
          "574: {",
          "575:     static hf_register_info hf[] = {",
          "576:         { &hf_btmesh_provisioning_pdu_type,",
          "577:             { \"Provisioning PDU Type\", \"provisioning.pdu_type\",",
          "578:                 FT_UINT8, BASE_DEC, VALS(btmesh_provisioning_pdu_type_format), 0x3F,",
          "579:                 NULL, HFILL }",
          "580:         },",
          "581:         { &hf_btmesh_provisioning_pdu_padding,",
          "582:             { \"Provisioning PDU Padding\", \"provisioning.pdu_padding\",",
          "583:                 FT_UINT8, BASE_DEC, NULL, 0xC0,",
          "584:                 NULL, HFILL }",
          "585:         },",
          "586:         { &hf_btmesh_provisioning_attention_duration,",
          "587:             { \"Attention Duration\", \"provisioning.attention_duration\",",
          "588:                 FT_UINT8, BASE_DEC, NULL, 0x0,",
          "589:                 NULL, HFILL }",
          "590:         },",
          "591:         { &hf_btmesh_provisioning_number_of_elements,",
          "592:             { \"Number of Elements\", \"provisioning.number_of_elements\",",
          "593:                 FT_UINT8, BASE_DEC, NULL, 0x0,",
          "594:                 NULL, HFILL }",
          "595:         },",
          "596:         { &hf_btmesh_provisioning_algorithms,",
          "597:             { \"Algorithms\", \"provisioning.algorithms\",",
          "598:                 FT_UINT16, BASE_HEX, NULL, 0x0,",
          "599:                 NULL, HFILL }",
          "600:         },",
          "601:         { &hf_btmesh_provisioning_algorithms_p256,",
          "602:             { \"FIPS P-256 Elliptic Curve\", \"provisioning.algorithms.p256\",",
          "603:                 FT_BOOLEAN, 16, TFS(&tfs_available_not_available), 0x0001,",
          "604:                 NULL, HFILL }",
          "605:         },",
          "606:         { &hf_btmesh_provisioning_algorithms_rfu,",
          "607:             { \"RFU\", \"provisioning.algorithms.rfu\",",
          "608:                 FT_UINT16, BASE_DEC, NULL, 0xFFFE,",
          "609:                 NULL, HFILL }",
          "610:         },",
          "611:         { &hf_btmesh_provisioning_public_key_type,",
          "612:             { \"Public Key Type\", \"provisioning.public_key_type\",",
          "613:                 FT_UINT8, BASE_HEX, NULL, 0x0,",
          "614:                 NULL, HFILL }",
          "615:         },",
          "616:         { &hf_btmesh_provisioning_public_key_type_oob,",
          "617:             { \"Public Key Type OOB\", \"provisioning.public_key_type.oob\",",
          "618:                 FT_BOOLEAN, 8, TFS(&tfs_available_not_available), 0x01,",
          "619:                 NULL, HFILL }",
          "620:         },",
          "621:         { &hf_btmesh_provisioning_public_key_type_rfu,",
          "622:             { \"RFU\", \"provisioning.public_key_type.rfu\",",
          "623:                 FT_UINT8, BASE_DEC, NULL, 0xFE,",
          "624:                 NULL, HFILL }",
          "625:         },",
          "626:         { &hf_btmesh_provisioning_static_oob_type,",
          "627:             { \"Static OOB Type\", \"provisioning.static_oob_type\",",
          "628:                 FT_UINT8, BASE_HEX, NULL, 0x0,",
          "629:                 NULL, HFILL }",
          "630:         },",
          "631:         { &hf_btmesh_provisioning_static_oob_type_static_oob_available,",
          "632:             { \"Static OOB Information\", \"provisioning.static_oob_type.static_oob_available\",",
          "633:                 FT_BOOLEAN, 8, TFS(&tfs_available_not_available), 0x01,",
          "634:                 NULL, HFILL }",
          "635:         },",
          "636:         { &hf_btmesh_provisioning_static_oob_type_rfu,",
          "637:             { \"RFU\", \"provisioning.static_oob_type.rfu\",",
          "638:                 FT_UINT8, BASE_DEC, NULL, 0xFE,",
          "639:                 NULL, HFILL }",
          "640:         },",
          "641:         { &hf_btmesh_provisioning_output_oob_size,",
          "642:             { \"Output OOB Size\", \"provisioning.output_oob_size\",",
          "643:                 FT_UINT8, BASE_DEC, VALS(btmesh_provisioning_output_oob_size_format), 0x0,",
          "644:                 NULL, HFILL }",
          "645:         },",
          "646:         { &hf_btmesh_provisioning_output_oob_action,",
          "647:             { \"Static OOB Action\", \"provisioning.output_oob_action\",",
          "648:                 FT_UINT16, BASE_HEX, NULL, 0x0,",
          "649:                 NULL, HFILL }",
          "650:         },",
          "651:         { &hf_btmesh_provisioning_output_oob_action_blink,",
          "652:             { \"Blink\", \"provisioning.output_oob_action.blink\",",
          "653:                 FT_BOOLEAN, 16, TFS(&tfs_available_not_available), 0x0001,",
          "654:                 NULL, HFILL }",
          "655:         },",
          "656:         { &hf_btmesh_provisioning_output_oob_action_beep,",
          "657:             { \"Beep\", \"provisioning.output_oob_action.beep\",",
          "658:                 FT_BOOLEAN, 16, TFS(&tfs_available_not_available), 0x0002,",
          "659:                 NULL, HFILL }",
          "660:         },",
          "661:         { &hf_btmesh_provisioning_output_oob_action_vibrate,",
          "662:             { \"Vibrate\", \"provisioning.output_oob_action.vibrate\",",
          "663:                 FT_BOOLEAN, 16, TFS(&tfs_available_not_available), 0x0004,",
          "664:                 NULL, HFILL }",
          "665:         },",
          "666:         { &hf_btmesh_provisioning_output_oob_action_output_numeric,",
          "667:             { \"Output Numeric\", \"provisioning.output_oob_action.output_numeric\",",
          "668:                 FT_BOOLEAN, 16, TFS(&tfs_available_not_available), 0x0008,",
          "669:                 NULL, HFILL }",
          "670:         },",
          "671:         { &hf_btmesh_provisioning_output_oob_action_output_alphanumeric,",
          "672:             { \"Output Alphanumeric\", \"provisioning.output_oob_action.output_alphanumeric\",",
          "673:                 FT_BOOLEAN, 16, TFS(&tfs_available_not_available), 0x0010,",
          "674:                 NULL, HFILL }",
          "675:         },",
          "676:         { &hf_btmesh_provisioning_output_oob_action_output_rfu,",
          "677:             { \"RFU\", \"provisioning.output_oob_action.rfu\",",
          "678:                 FT_UINT16, BASE_DEC, NULL, 0xFFE0,",
          "679:                 NULL, HFILL }",
          "680:         },",
          "681:         { &hf_btmesh_provisioning_input_oob_size,",
          "682:             { \"Input OOB Size\", \"provisioning.input_oob_size\",",
          "683:                 FT_UINT8, BASE_DEC, VALS(btmesh_provisioning_input_oob_size_format), 0x0,",
          "684:                 NULL, HFILL }",
          "685:         },",
          "686:         { &hf_btmesh_provisioning_input_oob_action,",
          "687:             { \"Input OOB Action\", \"provisioning.input_oob_action\",",
          "688:                 FT_UINT16, BASE_HEX, NULL, 0x0,",
          "689:                 NULL, HFILL }",
          "690:         },",
          "691:         { &hf_btmesh_provisioning_input_oob_action_push,",
          "692:             { \"Push\", \"provisioning.input_oob_action.push\",",
          "693:                 FT_BOOLEAN, 16, TFS(&tfs_available_not_available), 0x0001,",
          "694:                 NULL, HFILL }",
          "695:         },",
          "696:         { &hf_btmesh_provisioning_input_oob_action_twist,",
          "697:             { \"Twist\", \"provisioning.input_oob_action.twist\",",
          "698:                 FT_BOOLEAN, 16, TFS(&tfs_available_not_available), 0x0002,",
          "699:                 NULL, HFILL }",
          "700:         },",
          "701:         { &hf_btmesh_provisioning_input_oob_action_input_numeric,",
          "702:             { \"Input Numeric\", \"provisioning.input_oob_action.input_numeric\",",
          "703:                 FT_BOOLEAN, 16, TFS(&tfs_available_not_available), 0x0004,",
          "704:                 NULL, HFILL }",
          "705:         },",
          "706:         { &hf_btmesh_provisioning_input_oob_action_input_alphanumeric,",
          "707:             { \"Input Alphanumeric\", \"provisioning.input_oob_action.input_alphanumeric\",",
          "708:                 FT_BOOLEAN, 16, TFS(&tfs_available_not_available), 0x0008,",
          "709:                 NULL, HFILL }",
          "710:         },",
          "711:         { &hf_btmesh_provisioning_input_oob_action_rfu,",
          "712:             { \"RFU\", \"provisioning.input_oob_action.rfc\",",
          "713:                 FT_UINT16, BASE_DEC, NULL, 0xFFF0,",
          "714:                 NULL, HFILL }",
          "715:         },",
          "716:         { &hf_btmesh_provisioning_algorithm,",
          "717:             { \"Algorithm\", \"provisioning.algorithm\",",
          "718:                 FT_UINT8, BASE_DEC, VALS(btmesh_provisioning_algorithm_format), 0x0,",
          "719:                 NULL, HFILL }",
          "720:         },",
          "721:         { &hf_btmesh_provisioning_public_key,",
          "722:             { \"Public Key\", \"provisioning.public_key\",",
          "723:                 FT_UINT8, BASE_DEC, VALS(btmesh_provisioning_public_key_format), 0x0,",
          "724:                 NULL, HFILL }",
          "725:         },",
          "726:         { &hf_btmesh_provisioning_authentication_method,",
          "727:             { \"Authentication Method\", \"provisioning.authentication_method\",",
          "728:                 FT_UINT8, BASE_DEC, VALS(btmesh_provisioning_authentication_method_format), 0x0,",
          "729:                 NULL, HFILL }",
          "730:         },",
          "731:         { &hf_btmesh_provisioning_authentication_action_no_oob_action,",
          "732:             { \"No OOB Authentication Action\", \"provisioning.authentication_action.no_oob_action\",",
          "733:                 FT_UINT8, BASE_DEC, VALS(btmesh_provisioning_authentication_action_no_oob_action_format), 0x0,",
          "734:                 NULL, HFILL }",
          "735:         },",
          "736:         { &hf_btmesh_provisioning_authentication_action_static_oob_action,",
          "737:             { \"Static OOB Authentication Action\", \"provisioning.authentication_action.static_oob_action\",",
          "738:                 FT_UINT8, BASE_DEC, VALS(btmesh_provisioning_authentication_action_static_oob_action_format), 0x0,",
          "739:                 NULL, HFILL }",
          "740:         },",
          "741:         { &hf_btmesh_provisioning_authentication_action_output_oob_action,",
          "742:             { \"Output OOB Authentication Action\", \"provisioning.authentication_action.output_oob_action\",",
          "743:                 FT_UINT8, BASE_DEC, VALS(btmesh_provisioning_authentication_action_output_oob_action_format), 0x0,",
          "744:                 NULL, HFILL }",
          "745:         },",
          "746:         { &hf_btmesh_provisioning_authentication_action_input_oob_action,",
          "747:             { \"Input OOB Authentication Action\", \"provisioning.authentication_action.input_oob_action\",",
          "748:                 FT_UINT8, BASE_DEC, VALS(btmesh_provisioning_authentication_action_input_oob_action_format), 0x0,",
          "749:                 NULL, HFILL }",
          "750:         },",
          "751:         { &hf_btmesh_provisioning_authentication_size_no_oob_action,",
          "752:             { \"No OOB Authentication Size\", \"provisioning.authentication_size.no_oob_action\",",
          "753:                 FT_UINT8, BASE_DEC, VALS(btmesh_provisioning_authentication_size_no_oob_action_format), 0x0,",
          "754:                 NULL, HFILL }",
          "755:         },",
          "756:         { &hf_btmesh_provisioning_authentication_size_static_oob_action,",
          "757:             { \"Static OOB Authentication Size\", \"provisioning.authentication_size.static_oob_action\",",
          "758:                 FT_UINT8, BASE_DEC, VALS(btmesh_provisioning_authentication_size_static_oob_action_format), 0x0,",
          "759:                 NULL, HFILL }",
          "760:         },",
          "761:         { &hf_btmesh_provisioning_authentication_size_output_oob_action,",
          "762:             { \"Output OOB Authentication Size\", \"provisioning.authentication_size.output_oob_action\",",
          "763:                 FT_UINT8, BASE_DEC, VALS(btmesh_provisioning_authentication_size_output_oob_action_format), 0x0,",
          "764:                 NULL, HFILL }",
          "765:         },",
          "766:         { &hf_btmesh_provisioning_authentication_size_input_oob_action,",
          "767:             { \"Input OOB Authentication Size\", \"provisioning.authentication_size.input_oob_action\",",
          "768:                 FT_UINT8, BASE_DEC, VALS(btmesh_provisioning_authentication_size_input_oob_action_format), 0x0,",
          "769:                 NULL, HFILL }",
          "770:         },",
          "771:         { &hf_btmesh_provisioning_public_key_x,",
          "772:             { \"Public Key X\", \"provisioning.public_key_x\",",
          "773:                 FT_BYTES, BASE_NONE, NULL, 0x0,",
          "774:                 NULL, HFILL }",
          "775:         },",
          "776:         { &hf_btmesh_provisioning_public_key_y,",
          "777:             { \"Public Key Y\", \"provisioning.public_key_y\",",
          "778:                 FT_BYTES, BASE_NONE, NULL, 0x0,",
          "779:                 NULL, HFILL }",
          "780:         },",
          "781:         { &hf_btmesh_provisioning_confirmation,",
          "782:             { \"Confirmation\", \"provisioning.confirmation\",",
          "783:                 FT_BYTES, BASE_NONE, NULL, 0x0,",
          "784:                 NULL, HFILL }",
          "785:         },",
          "786:         { &hf_btmesh_provisioning_random,",
          "787:             { \"Random\", \"provisioning.random\",",
          "788:                 FT_BYTES, BASE_NONE, NULL, 0x0,",
          "789:                 NULL, HFILL }",
          "790:         },",
          "791:         { &hf_btmesh_provisioning_encrypted_provisioning_data,",
          "792:             { \"Encrypted Provisioning Data\", \"provisioning.encrypted_provisioning_data\",",
          "793:                 FT_BYTES, BASE_NONE, NULL, 0x0,",
          "794:                 NULL, HFILL }",
          "795:         },",
          "796:         { &hf_btmesh_provisioning_decrypted_provisioning_data_mic,",
          "797:             { \"Decrypted Provisioning Data MIC\", \"provisioning.decrypted_provisioning_data_mic\",",
          "798:                 FT_BYTES, BASE_NONE, NULL, 0x0,",
          "799:                 NULL, HFILL }",
          "800:         },",
          "801:         { &hf_btmesh_provisioning_error_code,",
          "802:             { \"Error Code\", \"provisioning.error_code\",",
          "803:                 FT_UINT8, BASE_DEC, VALS(btmesh_provisioning_error_code_format), 0x0,",
          "804:                 NULL, HFILL }",
          "805:         },",
          "806:         { &hf_btmesh_provisioning_unknown_data,",
          "807:             { \"Unknown Data\", \"provisioning.unknown_data\",",
          "808:                 FT_BYTES, BASE_NONE, NULL, 0x0,",
          "809:                 NULL, HFILL }",
          "810:         },",
          "811:     };",
          "813:     static gint *ett[] = {",
          "814:         &ett_btmesh_provisioning,",
          "815:         &ett_btmesh_provisioning_algorithms,",
          "816:         &ett_btmesh_provisioning_public_key_type,",
          "817:         &ett_btmesh_provisioning_static_oob_type,",
          "818:         &ett_btmesh_provisioning_output_oob_action,",
          "819:         &ett_btmesh_provisioning_output_oob_size,",
          "820:         &ett_btmesh_provisioning_input_oob_action,",
          "821:         &ett_btmesh_provisioning_input_oob_size,",
          "822:         &ett_btmesh_provisioning_algorithm,",
          "823:         &ett_btmesh_provisioning_public_key,",
          "824:         &ett_btmesh_provisioning_authentication_method,",
          "825:         &ett_btmesh_provisioning_authentication_action,",
          "826:         &ett_btmesh_provisioning_authentication_size,",
          "827:         &ett_btmesh_provisioning_error_code,",
          "828:     };",
          "830:     static ei_register_info ei[] = {",
          "831:         { &ei_btmesh_provisioning_unknown_opcode,{ \"provisioning.unknown_opcode\", PI_PROTOCOL, PI_ERROR, \"Unknown Opcode\", EXPFILL } },",
          "832:         { &ei_btmesh_provisioning_unknown_payload,{ \"provisioning.unknown_payload\", PI_PROTOCOL, PI_ERROR, \"Unknown Payload\", EXPFILL } },",
          "833:         { &ei_btmesh_provisioning_unknown_authentication_method,{ \"provisioning.unknown_authentication_method\", PI_PROTOCOL, PI_ERROR, \"Unknown Authentication Method\", EXPFILL } },",
          "834:         { &ei_btmesh_provisioning_rfu_not_zero,{ \"provisioning.rfu_not_zero\", PI_PROTOCOL, PI_WARN, \"RFU value not equal to 0\", EXPFILL } },",
          "835:         { &ei_btmesh_provisioning_in_rfu_range,{ \"provisioning.in_rfu_range\", PI_PROTOCOL, PI_WARN, \"Value in RFU range\", EXPFILL } },",
          "836:         { &ei_btmesh_provisioning_prohibited,{ \"provisioning.prohibited\", PI_PROTOCOL, PI_ERROR, \"Prohibited value\", EXPFILL } },",
          "837:         { &ei_btmesh_provisioning_zero_elements,{ \"provisioning.zero_elements\", PI_PROTOCOL, PI_ERROR, \"Number of Elements equal to 0 is Prohibited\", EXPFILL } },",
          "838:     };",
          "840:     expert_module_t* expert_btmesh_provisioning;",
          "842:     proto_btmesh_provisioning = proto_register_protocol(\"Bluetooth Mesh Provisioning PDU\", \"BT Mesh Provisioning\", \"provisioning\");",
          "844:     proto_register_field_array(proto_btmesh_provisioning, hf, array_length(hf));",
          "845:     proto_register_subtree_array(ett, array_length(ett));",
          "847:     expert_btmesh_provisioning = expert_register_protocol(proto_btmesh_provisioning);",
          "848:     expert_register_field_array(expert_btmesh_provisioning, ei, array_length(ei));",
          "851:     btmesh_provisioning_module = */prefs_register_protocol_subtree(\"Bluetooth\", proto_btmesh_provisioning, NULL);",
          "852:     register_dissector(\"btmesh.provisioning\", dissect_btmesh_provisioning_msg, proto_btmesh_provisioning);",
          "853: }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-btmesh-proxy.c||epan/dissectors/packet-btmesh-proxy.c": [
          "File: epan/dissectors/packet-btmesh-proxy.c -> epan/dissectors/packet-btmesh-proxy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include <epan/packet.h>",
          "17: #include <epan/prefs.h>",
          "18: #include <epan/reassemble.h>",
          "19: #include <epan/tvbuff-int.h>",
          "21: #include \"packet-btmesh.h\"",
          "23: #define PROXY_COMPLETE_MESSAGE      0x00",
          "24: #define PROXY_FIRST_SEGMENT         0x01",
          "25: #define PROXY_CONTINUATION_SEGMENT  0x02",
          "26: #define PROXY_LAST_SEGMENT          0x03",
          "28: #define PROXY_PDU_NETWORK           0x00",
          "29: #define PROXY_PDU_MESH_BEACON       0x01",
          "30: #define PROXY_PDU_CONFIGURATION     0x02",
          "31: #define PROXY_PDU_PROVISIONING      0x03",
          "33: void proto_register_btmesh_proxy(void);",
          "35: static int proto_btmesh_proxy = -1;",
          "37: static int hf_btmesh_proxy_type = -1;",
          "38: static int hf_btmesh_proxy_sar = -1;",
          "39: static int hf_btmesh_proxy_data = -1;",
          "40: static int hf_btmesh_proxy_fragments = -1;",
          "41: static int hf_btmesh_proxy_fragment = -1;",
          "42: static int hf_btmesh_proxy_fragment_overlap = -1;",
          "43: static int hf_btmesh_proxy_fragment_overlap_conflict = -1;",
          "44: static int hf_btmesh_proxy_fragment_multiple_tails = -1;",
          "45: static int hf_btmesh_proxy_fragment_too_long_fragment = -1;",
          "46: static int hf_btmesh_proxy_fragment_error = -1;",
          "47: static int hf_btmesh_proxy_fragment_count = -1;",
          "48: static int hf_btmesh_proxy_reassembled_length = -1;",
          "50: static int ett_btmesh_proxy = -1;",
          "51: static int ett_btmesh_proxy_fragments = -1;",
          "52: static int ett_btmesh_proxy_fragment = -1;",
          "54: static dissector_handle_t btmesh_handle;",
          "55: static dissector_handle_t btmesh_provisioning_handle;",
          "56: static dissector_handle_t btmesh_beacon_handle;",
          "58: static wmem_tree_t *connection_info_tree;",
          "59: static wmem_allocator_t *pool;",
          "61: static const value_string btmesh_proxy_type[] = {",
          "62:     { 0, \"Network PDU\" },",
          "63:     { 1, \"Mesh Beacon\" },",
          "64:     { 2, \"Proxy Configuration\" },",
          "65:     { 3, \"Provisioning PDU\" },",
          "66:     { 0, NULL }",
          "67: };",
          "69: static const value_string btmesh_proxy_sar[] = {",
          "70:     { 0, \"Data field contains a complete message\" },",
          "71:     { 1, \"Data field contains the first segment of a message\" },",
          "72:     { 2, \"Data field contains a continuation segment of a message\" },",
          "73:     { 3, \"Data field contains the last segment of a message\" },",
          "74:     { 0, NULL }",
          "75: };",
          "77: static const fragment_items btmesh_proxy_frag_items = {",
          "78:     &ett_btmesh_proxy_fragments,",
          "79:     &ett_btmesh_proxy_fragment,",
          "81:     &hf_btmesh_proxy_fragments,",
          "82:     &hf_btmesh_proxy_fragment,",
          "83:     &hf_btmesh_proxy_fragment_overlap,",
          "84:     &hf_btmesh_proxy_fragment_overlap_conflict,",
          "85:     &hf_btmesh_proxy_fragment_multiple_tails,",
          "86:     &hf_btmesh_proxy_fragment_too_long_fragment,",
          "87:     &hf_btmesh_proxy_fragment_error,",
          "88:     &hf_btmesh_proxy_fragment_count,",
          "89:     NULL,",
          "90:     &hf_btmesh_proxy_reassembled_length,",
          "92:     NULL,",
          "93:     \"fragments\"",
          "94: };",
          "96: static reassembly_table proxy_reassembly_table;",
          "97: static guint32 sequence_counter[E_BTMESH_PROXY_SIDE_LAST];",
          "98: static guint32 fragment_counter[E_BTMESH_PROXY_SIDE_LAST];",
          "99: static gboolean first_pass;",
          "101: static gint",
          "102: dissect_btmesh_proxy_msg(tvbuff_t *tvb, packet_info *pinfo, proto_tree *tree, void *proxy_data)",
          "103: {",
          "104:     proto_item *item;",
          "105:     proto_tree *sub_tree;",
          "106:     tvbuff_t *next_tvb = NULL;",
          "107:     fragment_head *fd_head = NULL;",
          "108:     guint32 *sequence_counter_ptr;",
          "109:     void *storage;",
          "110:     btle_mesh_transport_ctx_t tr_ctx;",
          "111:     guint offset = 0;",
          "112:     btle_mesh_proxy_ctx_t *proxy_ctx = NULL;",
          "114:     DISSECTOR_ASSERT(proxy_data);",
          "115:     proxy_ctx = (btle_mesh_proxy_ctx_t *)proxy_data;",
          "116:     DISSECTOR_ASSERT(proxy_ctx->proxy_side < E_BTMESH_PROXY_SIDE_LAST);",
          "118:     if (pinfo->fd->visited && first_pass) {",
          "119:       first_pass=FALSE;",
          "120:       sequence_counter[proxy_ctx->proxy_side] = 0;",
          "121:       fragment_counter[proxy_ctx->proxy_side] = 0;",
          "122:     }",
          "124:     col_set_str(pinfo->cinfo, COL_PROTOCOL, \"BT Mesh Proxy\");",
          "126:     item = proto_tree_add_item(tree, proto_btmesh_proxy, tvb, offset, -1, ENC_NA);",
          "127:     sub_tree = proto_item_add_subtree(item, ett_btmesh_proxy);",
          "129:     proto_tree_add_item(sub_tree, hf_btmesh_proxy_type, tvb, offset, 1, ENC_NA);",
          "130:     proto_tree_add_item(sub_tree, hf_btmesh_proxy_sar, tvb, offset, 1, ENC_NA);",
          "132:     guint8 proxy_sar = (tvb_get_guint8(tvb, offset) & 0xC0 ) >> 6;",
          "133:     guint8 proxy_type = tvb_get_guint8(tvb, offset) & 0x3F;",
          "134:     offset += 1;",
          "135:     guint32 length = tvb_reported_length(tvb) - offset;",
          "137:     gboolean packetReassembledOrComplete = FALSE;",
          "138:     gboolean packetComplete = FALSE;",
          "140:     col_set_str(pinfo->cinfo, COL_INFO, val_to_str_const(proxy_type, btmesh_proxy_type, \"Unknown Proxy PDU\"));",
          "142:     switch (proxy_sar){",
          "143:         case PROXY_COMPLETE_MESSAGE:",
          "144:             packetReassembledOrComplete = TRUE;",
          "145:             packetComplete = TRUE;",
          "146:             next_tvb = tvb_new_subset_length_caplen(tvb, offset, -1, tvb_captured_length(tvb) - offset);",
          "147:             col_append_str(pinfo->cinfo, COL_INFO,\" (Complete)\");",
          "149:         break;",
          "150:         case PROXY_FIRST_SEGMENT:",
          "151:             proto_tree_add_item(sub_tree, hf_btmesh_proxy_data, tvb, offset, length, ENC_NA);",
          "152:             if (!pinfo->fd->visited) {",
          "153:               sequence_counter[proxy_ctx->proxy_side]++;",
          "154:               fragment_counter[proxy_ctx->proxy_side]=0;",
          "156:               fd_head = fragment_add_seq(&proxy_reassembly_table,",
          "157:                 tvb, offset, pinfo,",
          "158:                 sequence_counter[proxy_ctx->proxy_side], NULL,",
          "159:                 fragment_counter[proxy_ctx->proxy_side],",
          "160:                 tvb_captured_length_remaining(tvb, offset),",
          "161:                 TRUE, 0);",
          "163:               fragment_counter[proxy_ctx->proxy_side]++;",
          "164:             } else {",
          "165:               sequence_counter[proxy_ctx->proxy_side]++;",
          "166:             }",
          "167:             col_append_str(pinfo->cinfo, COL_INFO,\" (First Segment)\");",
          "169:         break;",
          "170:         case PROXY_CONTINUATION_SEGMENT:",
          "171:             proto_tree_add_item(sub_tree, hf_btmesh_proxy_data, tvb, offset, length, ENC_NA);",
          "172:             if (!pinfo->fd->visited) {",
          "173:               fd_head = fragment_add_seq(&proxy_reassembly_table,",
          "174:                 tvb, offset, pinfo,",
          "175:                 sequence_counter[proxy_ctx->proxy_side], NULL,",
          "176:                 fragment_counter[proxy_ctx->proxy_side],",
          "177:                 tvb_captured_length_remaining(tvb, offset),",
          "178:                 TRUE, 0);",
          "179:               fragment_counter[proxy_ctx->proxy_side]++;",
          "180:             }",
          "181:             col_append_str(pinfo->cinfo, COL_INFO,\" (Continuation Segment)\");",
          "183:         break;",
          "184:         case PROXY_LAST_SEGMENT:",
          "186:             proto_tree_add_item(sub_tree, hf_btmesh_proxy_data, tvb, offset, length, ENC_NA);",
          "187:             if (!pinfo->fd->visited) {",
          "188:               fd_head = fragment_add_seq(&proxy_reassembly_table,",
          "189:                 tvb, offset, pinfo,",
          "190:                 sequence_counter[proxy_ctx->proxy_side], NULL,",
          "191:                 fragment_counter[proxy_ctx->proxy_side],",
          "192:                 tvb_captured_length_remaining(tvb, offset),",
          "193:                 FALSE, 0);",
          "195:               fragment_counter[proxy_ctx->proxy_side]++;",
          "198:               storage = wmem_alloc0(pool, sizeof(sequence_counter[proxy_ctx->proxy_side]));",
          "200:               wmem_tree_insert32(connection_info_tree, pinfo->num, storage);",
          "202:               fd_head = fragment_get(&proxy_reassembly_table, pinfo, sequence_counter[proxy_ctx->proxy_side], NULL);",
          "204:            }",
          "205:            packetReassembledOrComplete = TRUE;",
          "206:            col_append_str(pinfo->cinfo, COL_INFO,\" (Last Segment)\");",
          "208:         break;",
          "210:     }",
          "212:     if (packetReassembledOrComplete && pinfo->fd->visited) {",
          "213:       if (next_tvb == NULL) {",
          "214:           sequence_counter_ptr = (guint32 *)wmem_tree_lookup32(connection_info_tree, pinfo->num);",
          "216:         if (sequence_counter_ptr != NULL) {",
          "217:           fd_head = fragment_get(&proxy_reassembly_table, pinfo, *sequence_counter_ptr, NULL);",
          "218:         }",
          "220:         if (fd_head) {",
          "221:             next_tvb = process_reassembled_data(tvb, offset, pinfo,",
          "222:               \"Reassembled Message\", fd_head, &btmesh_proxy_frag_items,",
          "223:               NULL, sub_tree);",
          "224:             col_append_str(pinfo->cinfo, COL_INFO, \" (Message Reassembled)\");",
          "225:         }",
          "226:       }",
          "228:     if (next_tvb){",
          "229:         offset = 0;",
          "230:         tr_ctx.transport = E_BTMESH_TR_PROXY;",
          "231:         if (packetComplete) {",
          "232:         tr_ctx.fragmented = FALSE;",
          "233:         } else {",
          "234:         tr_ctx.fragmented = TRUE;",
          "235:         }",
          "236:         tr_ctx.segment_index = 0;",
          "238:         switch(proxy_type) {",
          "239:           case PROXY_PDU_NETWORK:",
          "240:               if (btmesh_handle) {",
          "241:                   call_dissector(btmesh_handle, next_tvb, pinfo, proto_tree_get_root(tree));",
          "242:               } else {",
          "243:                   proto_tree_add_item(sub_tree, hf_btmesh_proxy_data, next_tvb, offset, length, ENC_NA);",
          "244:               }",
          "246:           break;",
          "248:           case PROXY_PDU_MESH_BEACON:",
          "249:               if (btmesh_beacon_handle) {",
          "250:                   call_dissector_with_data(btmesh_beacon_handle, next_tvb, pinfo, proto_tree_get_root(tree), &tr_ctx);",
          "251:               } else {",
          "252:                   proto_tree_add_item(sub_tree, hf_btmesh_proxy_data, next_tvb, offset, length, ENC_NA);",
          "253:               }",
          "255:           break;",
          "256:           case PROXY_PDU_CONFIGURATION:",
          "258:               proto_tree_add_item(sub_tree, hf_btmesh_proxy_data, next_tvb, offset, length, ENC_NA);",
          "260:           break;",
          "261:           case PROXY_PDU_PROVISIONING:",
          "262:               if (btmesh_provisioning_handle) {",
          "263:                   call_dissector_with_data(btmesh_provisioning_handle, next_tvb, pinfo, proto_tree_get_root(tree), &tr_ctx);",
          "264:               } else {",
          "265:                   proto_tree_add_item(sub_tree, hf_btmesh_proxy_data, next_tvb, offset, length, ENC_NA);",
          "266:               }",
          "268:           break;",
          "270:           }",
          "271:       }",
          "272:   }",
          "274:   return tvb_reported_length(tvb);",
          "275: }",
          "277: static void",
          "278: proxy_init_routine(void)",
          "279: {",
          "280:   reassembly_table_register(&proxy_reassembly_table, &addresses_reassembly_table_functions);",
          "281:   for (int i=0; i< E_BTMESH_PROXY_SIDE_LAST; i++ ){",
          "282:     sequence_counter[i] = 0;",
          "283:     fragment_counter[i] = 0;",
          "284:   }",
          "285:   first_pass = TRUE;",
          "286:   pool = wmem_allocator_new(WMEM_ALLOCATOR_SIMPLE);",
          "287: }",
          "289: static void",
          "290: proxy_cleanup_dissector(void)",
          "291: {",
          "292:   wmem_destroy_allocator(pool);",
          "293:   pool = NULL;",
          "294: }",
          "296: void",
          "297: proto_register_btmesh_proxy(void)",
          "298: {",
          "299:     static hf_register_info hf[] = {",
          "300:         { &hf_btmesh_proxy_type,",
          "301:             { \"Type\", \"btmproxy.type\",",
          "302:                 FT_UINT8, BASE_DEC, VALS(btmesh_proxy_type), 0x3F,",
          "303:                 NULL, HFILL }",
          "304:         },",
          "305:         { &hf_btmesh_proxy_sar,",
          "306:             { \"SAR\", \"btmproxy.sar\",",
          "307:                 FT_UINT8, BASE_DEC, VALS(btmesh_proxy_sar), 0xC0,",
          "308:                 NULL, HFILL }",
          "309:         },",
          "310:         { &hf_btmesh_proxy_data,",
          "311:             { \"Data\", \"btmproxy.data\",",
          "312:                 FT_BYTES, BASE_NONE, NULL, 0x00,",
          "313:                 NULL, HFILL }",
          "314:         },",
          "316:         { &hf_btmesh_proxy_fragments,",
          "317:             { \"Reassembled Proxy Payload Fragments\", \"btmproxy.fragments\",",
          "318:                 FT_NONE, BASE_NONE, NULL, 0x0,",
          "319:                 \"Proxy Payload Fragments\", HFILL }",
          "320:         },",
          "321:         { &hf_btmesh_proxy_fragment,",
          "322:             { \"Proxy Payload Fragment\", \"btmproxy.fragment\",",
          "323:                 FT_FRAMENUM, BASE_NONE, NULL, 0x0,",
          "324:                 NULL, HFILL }",
          "325:         },",
          "326:         { &hf_btmesh_proxy_fragment_overlap,",
          "327:             { \"Fragment overlap\", \"btmproxy.fragment.overlap\",",
          "328:                 FT_BOOLEAN, BASE_NONE, NULL, 0x0,",
          "329:                 \"Fragment overlaps with other fragments\", HFILL }",
          "330:         },",
          "331:         { &hf_btmesh_proxy_fragment_overlap_conflict,",
          "332:             { \"Conflicting data in fragment overlap\", \"btmproxy.fragment.overlap.conflict\",",
          "333:                 FT_BOOLEAN, BASE_NONE, NULL, 0x0,",
          "334:                 \"Overlapping fragments contained conflicting data\", HFILL }",
          "335:         },",
          "336:         { &hf_btmesh_proxy_fragment_multiple_tails,",
          "337:             { \"Multiple tail fragments found\", \"btmproxy.fragment.multipletails\",",
          "338:                 FT_BOOLEAN, BASE_NONE, NULL, 0x0,",
          "339:                 \"Several tails were found when defragmenting the packet\", HFILL }",
          "340:         },",
          "341:         { &hf_btmesh_proxy_fragment_too_long_fragment,",
          "342:             { \"Fragment too long\", \"btmproxy.fragment.toolongfragment\",",
          "343:                 FT_BOOLEAN, BASE_NONE, NULL, 0x0,",
          "344:                 \"Fragment contained data past end of packet\", HFILL }",
          "345:         },",
          "346:         { &hf_btmesh_proxy_fragment_error,",
          "347:             { \"Defragmentation error\", \"btmproxy.fragment.error\",",
          "348:                 FT_FRAMENUM, BASE_NONE, NULL, 0x0,",
          "349:                 \"Defragmentation error due to illegal fragments\", HFILL }",
          "350:         },",
          "351:         { &hf_btmesh_proxy_fragment_count,",
          "352:             { \"Fragment count\", \"btmproxy.fragment.count\",",
          "353:                 FT_UINT32, BASE_DEC, NULL, 0x0,",
          "354:                 NULL, HFILL }",
          "355:         },",
          "356:         { &hf_btmesh_proxy_reassembled_length,",
          "357:             { \"Reassembled Proxy Payload length\", \"btmproxy.reassembled.length\",",
          "358:                 FT_UINT32, BASE_DEC, NULL, 0x0,",
          "359:                 \"The total length of the reassembled payload\", HFILL }",
          "360:         },",
          "361:     };",
          "363:     static gint *ett[] = {",
          "364:         &ett_btmesh_proxy,",
          "365:         &ett_btmesh_proxy_fragments,",
          "366:         &ett_btmesh_proxy_fragment,",
          "367:     };",
          "369:     proto_btmesh_proxy = proto_register_protocol(\"Bluetooth Mesh Proxy\", \"BT Mesh proxy\", \"btmproxy\");",
          "371:     proto_register_field_array(proto_btmesh_proxy, hf, array_length(hf));",
          "372:     proto_register_subtree_array(ett, array_length(ett));",
          "374:     prefs_register_protocol_subtree(\"Bluetooth\", proto_btmesh_proxy, NULL);",
          "375:     register_dissector(\"btmesh.proxy\", dissect_btmesh_proxy_msg, proto_btmesh_proxy);",
          "377:     connection_info_tree = wmem_tree_new_autoreset(wmem_epan_scope(), wmem_file_scope());",
          "379:     register_init_routine(proxy_init_routine);",
          "380:     register_cleanup_routine(proxy_cleanup_dissector);",
          "381: }",
          "383: void",
          "384: proto_reg_handoff_btmesh_proxy(void)",
          "385: {",
          "386:     btmesh_handle = find_dissector(\"btmesh.msg\");",
          "387:     btmesh_provisioning_handle = find_dissector(\"btmesh.provisioning\");",
          "388:     btmesh_beacon_handle = find_dissector(\"btmesh.beacon\");",
          "389: }",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-btmesh.c||epan/dissectors/packet-btmesh.c": [
          "File: epan/dissectors/packet-btmesh.c -> epan/dissectors/packet-btmesh.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1250:             NULL, HFILL }",
          "1251:         },",
          "1252:         { &hf_btmesh_segment,",
          "1254:             FT_BYTES, BASE_NONE, NULL, 0x0,",
          "1255:             NULL, HFILL }",
          "1256:         },",
          "",
          "[Removed Lines]",
          "1253:         { \"Sewgment\", \"btmesh.segment\",",
          "",
          "[Added Lines]",
          "1251:         { \"Segment\", \"btmesh.segment\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1291:     btmesh_module = prefs_register_protocol_subtree(\"Bluetooth\", proto_btmesh, NULL);",
          "1293:     btmesh_uat = uat_new(\"BTMesh Network keys\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1291:     prefs_register_static_text_preference(btmesh_module, \"version\",",
          "1292:             \"Bluetooth Mesh Profile v1.0\",",
          "1293:             \"Version of protocol supported by this dissector.\");",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-btmesh.h||epan/dissectors/packet-btmesh.h": [
          "File: epan/dissectors/packet-btmesh.h -> epan/dissectors/packet-btmesh.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #ifndef __PACKET_BTMESH_H__",
          "13: #define __PACKET_BTMESH_H__",
          "15: typedef enum {",
          "16:     E_BTMESH_TR_UNKNOWN = 0,",
          "17:     E_BTMESH_TR_ADV,",
          "18:     E_BTMESH_TR_PB_ADV,",
          "19:     E_BTMESH_TR_PROXY",
          "20: } btle_mesh_tr_t;",
          "22: typedef enum {",
          "23:     E_BTMESH_PROXY_SIDE_UNKNOWN = 0,",
          "24:     E_BTMESH_PROXY_SIDE_SERVER,",
          "25:     E_BTMESH_PROXY_SIDE_CLIENT,",
          "26:     E_BTMESH_PROXY_SIDE_LAST",
          "27: } btle_mesh_proxy_side_t;",
          "29: typedef struct {",
          "30:     btle_mesh_tr_t transport;",
          "31:     gboolean fragmented;",
          "32:     guint segment_index;",
          "33: } btle_mesh_transport_ctx_t;",
          "35: typedef struct {",
          "36:     guint32 interface_id;",
          "37:     guint32 adapter_id;",
          "38:     guint16 chandle;",
          "39:     guint16 bt_uuid;",
          "40:     guint32 access_address;",
          "41:     btle_mesh_proxy_side_t proxy_side;",
          "42: } btle_mesh_proxy_ctx_t;",
          "",
          "---------------"
        ]
      }
    }
  ]
}