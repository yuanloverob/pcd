{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3ea557e0e7d289b28c05c1797f900ee224fc9471",
      "candidate_info": {
        "commit_hash": "3ea557e0e7d289b28c05c1797f900ee224fc9471",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3ea557e0e7d289b28c05c1797f900ee224fc9471",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/test1.c"
        ],
        "message": "Changes to the --hexdb decoder option in the shell (and also in the TCL test code) so that it works on systems where sscanf() does not recognize \"%hhx\" as wanting to delivery results into a character-size variable.\n\nFossilOrigin-Name: 4258e42d92b0113ba59f407197fc24f21734900e5b02952deed07818be3e3e5d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 69bad9257f8db6a2a761bdd298d972eb48d4f845ec11dedc802ba3bafb979915",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3858:   int j, k;",
          "3859:   int rc;",
          "3860:   FILE *in;",
          "3862:   char zLine[1000];",
          "3863:   if( p->zDbFilename ){",
          "3864:     in = fopen(p->zDbFilename, \"r\");",
          "",
          "[Removed Lines]",
          "3861:   unsigned char x[16];",
          "",
          "[Added Lines]",
          "3861:   unsigned int x[16];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3896:     if( strncmp(zLine, \"| end \", 6)==0 ){",
          "3897:       break;",
          "3898:     }",
          "3901:                 &j, &x[0], &x[1], &x[2], &x[3], &x[4], &x[5], &x[6], &x[7],",
          "3902:                 &x[8], &x[9], &x[10], &x[11], &x[12], &x[13], &x[14], &x[15]);",
          "3903:     if( rc==17 ){",
          "3904:       k = iOffset+j;",
          "3905:       if( k+16<=n ){",
          "3907:       }",
          "3908:     }",
          "3909:   }",
          "",
          "[Removed Lines]",
          "3899:     rc = sscanf(zLine,\"| %d: %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\"",
          "3900:                       \"  %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\",",
          "3906:         memcpy(a+k, x, 16);",
          "",
          "[Added Lines]",
          "3899:     rc = sscanf(zLine,\"| %d: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\",",
          "3905:         int ii;",
          "3906:         for(ii=0; ii<16; ii++) a[k+ii] = x[ii]&0xff;",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7699:   int iOffset = 0;",
          "7700:   int j, k;",
          "7701:   int rc;",
          "7703:   if( objc!=2 ){",
          "7704:     Tcl_WrongNumArgs(interp, 1, objv, \"HEXDB\");",
          "7705:     return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "7702:   unsigned char x[16];",
          "",
          "[Added Lines]",
          "7702:   unsigned int x[16];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7731:       iOffset = k;",
          "7732:       continue;",
          "7733:     }",
          "7736:                 &j, &x[0], &x[1], &x[2], &x[3], &x[4], &x[5], &x[6], &x[7],",
          "7737:                 &x[8], &x[9], &x[10], &x[11], &x[12], &x[13], &x[14], &x[15]);",
          "7738:     if( rc==17 ){",
          "7739:       k = iOffset+j;",
          "7740:       if( k+16<=n ){",
          "7742:       }",
          "7743:       continue;",
          "7744:     }",
          "",
          "[Removed Lines]",
          "7734:     rc = sscanf(zIn+i,\"| %d: %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\"",
          "7735:                       \"  %hhx %hhx %hhx %hhx %hhx %hhx %hhx %hhx\",",
          "7741:         memcpy(a+k, x, 16);",
          "",
          "[Added Lines]",
          "7734:     rc = sscanf(zIn+i,\"| %d: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x\",",
          "7740:         int ii;",
          "7741:         for(ii=0; ii<16; ii++) a[k+ii] = x[ii]&0xff;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db586e48432ac81c81d454af4f5e879743dd9f7b",
      "candidate_info": {
        "commit_hash": "db586e48432ac81c81d454af4f5e879743dd9f7b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db586e48432ac81c81d454af4f5e879743dd9f7b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Add a missing VdbeCoverage() macro.\n\nFossilOrigin-Name: 33da6092d3d04b6eb6ab396b8c4f668e3529e26bf11e26f5fcb9b61fe3470197",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 47cd634c98b502d40a493455ba6d73cbd0dae74944f9cf06fcbcd025f4b49d6e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5217:       if( pLevel->regBignull ){",
          "5218:         sqlite3VdbeResolveLabel(v, pLevel->addrBignull);",
          "5219:         sqlite3VdbeAddOp2(v, OP_IfNotZero, pLevel->regBignull, pLevel->p2-1);",
          "5220:       }",
          "5221: #ifndef SQLITE_DISABLE_SKIPAHEAD_DISTINCT",
          "5222:       if( addrSeek ) sqlite3VdbeJumpHere(v, addrSeek);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5220:         VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "060b7fa9745e1439ce1d9be96bb921b98b0a6da3",
      "candidate_info": {
        "commit_hash": "060b7fa9745e1439ce1d9be96bb921b98b0a6da3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/060b7fa9745e1439ce1d9be96bb921b98b0a6da3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/like3.test",
          "test/tkt-78e04e52ea.test",
          "test/vtab1.test",
          "test/vtabH.test"
        ],
        "message": "Refactor the LIKE optimization decision logic so that it uses sqlite3AtoF() on both boundary keys to determine if the optimization can be used when the LHS is something that might not have TEXT affinity. Ticket [ce8717f0885af975].  See also [c94369cae9b561b1], [b043a54c3de54b28], [fd76310a5e843e07], and [158290c0abafde67].\n\nFossilOrigin-Name: b4a9e09e60213ccff925d09f0b6e549e2a3e3862856c710f108779e2867dec76",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/like3.test||test/like3.test",
          "test/tkt-78e04e52ea.test||test/tkt-78e04e52ea.test",
          "test/vtab1.test||test/vtab1.test",
          "test/vtabH.test||test/vtabH.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c4b405687b010ee20ec02c42913a0540909d0155c88a4a56194fda99c704279e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "264:         zNew[iTo] = 0;",
          "265:         assert( iTo>0 );",
          "284:         ){",
          "289:             sqlite3ExprDelete(db, pPrefix);",
          "290:             sqlite3ValueFree(pVal);",
          "291:             return 0;",
          "",
          "[Removed Lines]",
          "279:         if( sqlite3Isdigit(zNew[0])",
          "280:          || sqlite3Isspace(zNew[0])",
          "281:          || zNew[0]=='-'",
          "282:          || zNew[0]=='+'",
          "283:          || zNew[iTo-1]=='0'-1",
          "285:           if( pLeft->op!=TK_COLUMN",
          "286:            || sqlite3ExprAffinity(pLeft)!=SQLITE_AFF_TEXT",
          "288:           ){",
          "",
          "[Added Lines]",
          "279:         if( pLeft->op!=TK_COLUMN",
          "280:          || sqlite3ExprAffinity(pLeft)!=SQLITE_AFF_TEXT",
          "283:           int isNum;",
          "284:           double rDummy;",
          "285:           isNum = sqlite3AtoF(zNew, &rDummy, iTo, SQLITE_UTF8);",
          "286:           if( isNum<=0 ){",
          "287:             zNew[iTo-1]++;",
          "288:             isNum = sqlite3AtoF(zNew, &rDummy, iTo, SQLITE_UTF8);",
          "289:             zNew[iTo-1]--;",
          "290:           }",
          "291:           if( isNum>0 ){",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:   SELECT * FROM t0 WHERE t0.c0 LIKE './';",
          "199: } {./}",
          "202: # 2019-02-27",
          "203: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "201: # 2019-06-14",
          "202: # Ticket https://www.sqlite.org/src/info/ce8717f0885af975",
          "203: do_execsql_test like3-5.410 {",
          "204:   DROP TABLE IF EXISTS t0;",
          "205:   CREATE TABLE t0(c0 INT UNIQUE COLLATE NOCASE);",
          "206:   INSERT INTO t0(c0) VALUES ('.1%');",
          "207:   SELECT * FROM t0 WHERE t0.c0 LIKE '.1%';",
          "208: } {.1%}",
          "",
          "---------------"
        ],
        "test/tkt-78e04e52ea.test||test/tkt-78e04e52ea.test": [
          "File: test/tkt-78e04e52ea.test -> test/tkt-78e04e52ea.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   }",
          "42: } {}",
          "43: do_test tkt-78e04-1.4 {",
          "45: } {/*SCAN TABLE  USING COVERING INDEX i1*/}",
          "46: do_test tkt-78e04-1.5 {",
          "47:   execsql {",
          "",
          "[Removed Lines]",
          "44:  db eval {EXPLAIN QUERY PLAN SELECT \"\" FROM \"\" WHERE \"\" LIKE '1abc%';}",
          "",
          "[Added Lines]",
          "44:  db eval {EXPLAIN QUERY PLAN SELECT \"\" FROM \"\" WHERE \"\" LIKE '1e5%';}",
          "",
          "---------------"
        ],
        "test/vtab1.test||test/vtab1.test": [
          "File: test/vtab1.test -> test/vtab1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1311:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ?} 8 9}",
          "1313:   1.3 \"SELECT a FROM e6 WHERE b LIKE '8J%'\" {3 4}",
          "1316:   1.4 \"SELECT a FROM e6 WHERE b LIKE '8j%'\" {3 4}",
          "1318: } {",
          "1319:   set echo_module {}",
          "1320:   do_execsql_test 18.$tn.1 $sql $res",
          "",
          "[Removed Lines]",
          "1314:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8J%}",
          "1317:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8j%}",
          "",
          "[Added Lines]",
          "1314:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8k 8J%}",
          "1317:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8k 8j%}",
          "1319:   1.5 \"SELECT a FROM e6 WHERE b LIKE '8%'\" {3 4}",
          "1320:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8%}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1324: do_execsql_test 18.2.0 {  PRAGMA case_sensitive_like = ON }",
          "1325: foreach {tn sql res filter} {",
          "1329:   2.2 \"SELECT a FROM e6 WHERE b LIKE '8j%'\" {}",
          "1331: } {",
          "1332:   set echo_module {}",
          "1333:   do_execsql_test 18.$tn.1 $sql $res",
          "",
          "[Removed Lines]",
          "1326:   2.1 \"SELECT a FROM e6 WHERE b LIKE '8J%'\" {3 4}",
          "1327:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8J%}",
          "1330:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8j%}",
          "",
          "[Added Lines]",
          "1329:   2.1 \"SELECT a FROM e6 WHERE b LIKE '8%'\" {3 4}",
          "1330:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8%}",
          "1333:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8j 8k 8j%}",
          "1335:   2.3 \"SELECT a FROM e6 WHERE b LIKE '8J%'\" {3 4}",
          "1336:     {xFilter {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?} 8J 8K 8J%}",
          "",
          "---------------"
        ],
        "test/vtabH.test||test/vtabH.test": [
          "File: test/vtabH.test -> test/vtabH.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: foreach {tn sql expect} {",
          "34:   1 \"SELECT * FROM e6 WHERE b LIKE '8abc'\" {",
          "37:   }",
          "39:   2 \"SELECT * FROM e6 WHERE b GLOB '8abc'\" {",
          "40:     xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b glob ?}",
          "42:   }",
          "43: } {",
          "44:   do_test 1.$tn {",
          "",
          "[Removed Lines]",
          "35:     xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b like ?}",
          "36:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8abc",
          "41:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b glob ?} 8abc",
          "",
          "[Added Lines]",
          "35:     xBestIndex",
          "36:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?}",
          "37:     xFilter",
          "38:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b like ?}",
          "39:        8ABC 8abd 8abc",
          "43:      xBestIndex",
          "44:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b glob ?}",
          "45:      xFilter",
          "46:        {SELECT rowid, a, b FROM 't6' WHERE b >= ? AND b < ? AND b glob ?}",
          "47:        8abc 8abd 8abc",
          "48:   }",
          "49:   3 \"SELECT * FROM e6 WHERE b LIKE '8e/'\" {",
          "50:     xBestIndex {SELECT rowid, a, b FROM 't6' WHERE b like ?}",
          "51:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b like ?} 8e/",
          "52:   }",
          "53:   4 \"SELECT * FROM e6 WHERE b GLOB '8e/'\" {",
          "55:     xFilter {SELECT rowid, a, b FROM 't6' WHERE b glob ?} 8e/",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "044388cf98a1e6c1ab61cbecf3e48f3c8f56d8a4",
      "candidate_info": {
        "commit_hash": "044388cf98a1e6c1ab61cbecf3e48f3c8f56d8a4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/044388cf98a1e6c1ab61cbecf3e48f3c8f56d8a4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.h",
          "src/vdbeaux.c"
        ],
        "message": "Modify signature of sqlite3VdbeChangeOpcode() to accept int instead of u32.\n\nFossilOrigin-Name: 68b7f2acf4d228f32250e37cbc0eb5d275b512d49071bbb38e1f5634b705f7d3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1b85442b614df0808c10c34ec281282e5dfd93d6d5f9737b51263ffaa4da5c72",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "223: #endif",
          "224: void sqlite3VdbeAddParseSchemaOp(Vdbe*,int,char*);",
          "226: void sqlite3VdbeChangeP1(Vdbe*, int addr, int P1);",
          "227: void sqlite3VdbeChangeP2(Vdbe*, int addr, int P2);",
          "228: void sqlite3VdbeChangeP3(Vdbe*, int addr, int P3);",
          "",
          "[Removed Lines]",
          "225: void sqlite3VdbeChangeOpcode(Vdbe*, u32 addr, u8);",
          "",
          "[Added Lines]",
          "225: void sqlite3VdbeChangeOpcode(Vdbe*, int addr, u8);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "981:   sqlite3VdbeGetOp(p,addr)->opcode = iNewOpcode;",
          "982: }",
          "983: void sqlite3VdbeChangeP1(Vdbe *p, int addr, int val){",
          "",
          "[Removed Lines]",
          "980: void sqlite3VdbeChangeOpcode(Vdbe *p, u32 addr, u8 iNewOpcode){",
          "",
          "[Added Lines]",
          "980: void sqlite3VdbeChangeOpcode(Vdbe *p, int addr, u8 iNewOpcode){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8a488bb6b89b1657badfff3e77add3be8fc9333",
      "candidate_info": {
        "commit_hash": "f8a488bb6b89b1657badfff3e77add3be8fc9333",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f8a488bb6b89b1657badfff3e77add3be8fc9333",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5vocab2.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a problem causing a crash if an fts5vocab table was created to query an fts3/4 FTS index.\n\nFossilOrigin-Name: 9cd64ce453e4435d80117b8610c22a0a4b53cd6e84b39815e70e684f6b0295c8",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5vocab2.test||ext/fts5/test/fts5vocab2.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2245: ){",
          "2246:   Fts5Cursor *pCsr;",
          "2249:   pCsr = fts5CursorFromCsrid(pGlobal, iCsrId);",
          "2254: }",
          "",
          "[Removed Lines]",
          "2247:   Fts5Table *pTab;",
          "2250:   pTab = (Fts5Table*)pCsr->base.pVtab;",
          "2253:   return pTab->pIndex;",
          "",
          "[Added Lines]",
          "2248:   if( pCsr ){",
          "2249:     Fts5Table *pTab = (Fts5Table*)pCsr->base.pVtab;",
          "2251:     return pTab->pIndex;",
          "2252:   }",
          "2253:   return 0;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5vocab2.test||ext/fts5/test/fts5vocab2.test": [
          "File: ext/fts5/test/fts5vocab2.test -> ext/fts5/test/fts5vocab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:   SELECT * FROM v1;",
          "203: } {}",
          "205: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: #-------------------------------------------------------------------------",
          "206: #",
          "207: reset_db",
          "208: do_execsql_test 4.0 {",
          "209:   CREATE VIRTUAL TABLE v1 USING fts5vocab(nosuchtable, col);",
          "210: }",
          "212: do_catchsql_test 4.1 {",
          "213:   SELECT * FROM v1 WHERE term=='nosuchterm';",
          "214: } {1 {no such fts5 table: main.nosuchtable}}",
          "216: do_execsql_test 4.2.1 {",
          "217:   CREATE TABLE nosuchtable(nosuchtable, y, z);",
          "218: }",
          "219: do_catchsql_test 4.2.2 {",
          "220:   SELECT * FROM v1 WHERE term=='nosuchterm';",
          "221: } {1 {no such fts5 table: main.nosuchtable}}",
          "223: ifcapable fts3 {",
          "224:   do_execsql_test 4.3.1 {",
          "225:     DROP TABLE nosuchtable;",
          "226:     CREATE VIRTUAL TABLE nosuchtable USING fts3(a, b);",
          "227:   } {}",
          "228:   do_catchsql_test 4.3.2 {",
          "229:     SELECT * FROM v1 WHERE term=='nosuchterm';",
          "230:   } {1 {no such fts5 table: main.nosuchtable}}",
          "231:   do_catchsql_test 4.3.3 {",
          "232:     INSERT INTO nosuchtable VALUES('id', '*id');",
          "233:     SELECT * FROM v1 WHERE term=='nosuchterm';",
          "234:   } {1 {no such fts5 table: main.nosuchtable}}",
          "235: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 65e50706a017751d72d0f9c7f575955194977decd0acf13aaca90c3cb925f20e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}