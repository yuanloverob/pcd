{
  "cve_id": "CVE-2017-13083",
  "cve_desc": "Akeo Consulting Rufus prior to version 2.17.1187 does not adequately validate the integrity of updates downloaded over HTTP, allowing an attacker to easily convince a user to execute arbitrary code",
  "repo": "pbatard/rufus",
  "patch_hash": "c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
  "patch_info": {
    "commit_hash": "c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
    "repo": "pbatard/rufus",
    "commit_url": "https://github.com/pbatard/rufus/commit/c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
    "files": [
      "res/localization/rufus.loc",
      "src/pki.c",
      "src/rufus.rc",
      "src/stdlg.c"
    ],
    "message": "[pki] fix https://www.kb.cert.org/vuls/id/403768\n\n* This commit effectively fixes https://www.kb.cert.org/vuls/id/403768 (CVE-2017-13083) as\n  it is described per its revision 11, which is the latest revision at the time of this commit,\n  by disabling Windows prompts, enacted during signature validation, that allow the user to\n  bypass the intended signature verification checks.\n* It needs to be pointed out that the vulnerability (\"allow(ing) the use of a self-signed\n  certificate\"), which relies on the end-user actively ignoring a Windows prompt that tells\n  them that the update failed the signature validation whilst also advising against running it,\n  is being fully addressed, even as the update protocol remains HTTP.\n* It also need to be pointed out that the extended delay (48 hours) between the time the\n  vulnerability was reported and the moment it is fixed in our codebase has to do with\n  the fact that the reporter chose to deviate from standard security practices by not\n  disclosing the details of the vulnerability with us, be it publicly or privately,\n  before creating the cert.org report. The only advance notification we received was a\n  generic note about the use of HTTP vs HTTPS, which, as have established, is not\n  immediately relevant to addressing the reported vulnerability.\n* Closes #1009\n* Note: The other vulnerability scenario described towards the end of #1009, which\n  doesn't have to do with the \"lack of CA checking\", will be addressed separately.",
    "before_after_code_files": [
      "res/localization/rufus.loc||res/localization/rufus.loc",
      "src/pki.c||src/pki.c",
      "src/rufus.rc||src/rufus.rc",
      "src/stdlg.c||src/stdlg.c"
    ]
  },
  "patch_diff": {
    "res/localization/rufus.loc||res/localization/rufus.loc": [
      "File: res/localization/rufus.loc -> res/localization/rufus.loc",
      "--- Hunk 1 ---",
      "[Context before]",
      "487: # eg. \"Partitioning (MBR)...\"",
      "488: t MSG_238 \"Partitioning (%s)...\"",
      "489: t MSG_239 \"Deleting partitions...\"",
      "490: t MSG_241 \"Downloading: %0.1f%%\"",
      "491: t MSG_242 \"Failed to download file.\"",
      "492: t MSG_243 \"Checking for Rufus updates...\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: t MSG_240 \"The signature for the downloaded update can not be validated. This could mean that your \"",
      "491:  \"system is improperly configured for signature validation or indicate a malicious download.\\n\\n\"",
      "492:  \"The download will be deleted. Please check the log for more details.\"",
      "",
      "---------------"
    ],
    "src/pki.c||src/pki.c": [
      "File: src/pki.c -> src/pki.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:  static char error_string[64];",
      "54:  DWORD error_code = GetLastError();",
      "57:   return WindowsErrorString();",
      "59:  switch (error_code) {",
      "",
      "[Removed Lines]",
      "56:  if ((error_code >> 16) != 0x8009)",
      "",
      "[Added Lines]",
      "56:  if (((error_code >> 16) != 0x8009) && ((error_code >> 16) != 0x800B))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "113:   return \"Cannot complete usage check.\";",
      "114:  case CRYPT_E_NO_TRUSTED_SIGNER:",
      "115:   return \"None of the signers of the cryptographic message or certificate trust list is trusted.\";",
      "116:  default:",
      "117:   static_sprintf(error_string, \"Unknown PKI error 0x%08lX\", error_code);",
      "118:   return error_string;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116:  case CERT_E_UNTRUSTEDROOT:",
      "117:   return \"The root certificate is not trusted.\";",
      "118:  case TRUST_E_NOSIGNATURE:",
      "119:   return \"Not digitally signed.\";",
      "120:  case TRUST_E_EXPLICIT_DISTRUST:",
      "121:   return \"One of the certificates used was marked as untrusted by the user.\";",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "268:  }",
      "270:  trust_data.cbStruct = sizeof(trust_data);",
      "273:  trust_data.fdwRevocationChecks = WTD_REVOKE_WHOLECHAIN;",
      "",
      "[Removed Lines]",
      "271:  trust_data.dwUIChoice = WTD_UI_ALL;",
      "",
      "[Added Lines]",
      "283:  trust_data.dwUIChoice = WTD_UI_NONE;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "279:  r = WinVerifyTrust(NULL, &guid_generic_verify, &trust_data);",
      "280:  safe_free(trust_file.pcwszFilePath);",
      "282:  return r;",
      "283: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "293:  switch (r) {",
      "294:  case ERROR_SUCCESS:",
      "295:   break;",
      "296:  case TRUST_E_NOSIGNATURE:",
      "298:   uprintf(\"PKI: File does not appear to be signed: %s\", WinPKIErrorString());",
      "299:   MessageBoxExU(hDlg, lmprintf(MSG_284), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
      "300:   break;",
      "301:  default:",
      "302:   uprintf(\"PKI: Failed to validate signature: %s\", WinPKIErrorString());",
      "303:   MessageBoxExU(hDlg, lmprintf(MSG_240), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
      "304:   break;",
      "305:  }",
      "",
      "---------------"
    ],
    "src/rufus.rc||src/rufus.rc": [
      "File: src/rufus.rc -> src/rufus.rc",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
      "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
      "35: EXSTYLE WS_EX_ACCEPTFILES",
      "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
      "38: BEGIN",
      "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
      "",
      "[Removed Lines]",
      "36: CAPTION \"Rufus 2.17.1186\"",
      "",
      "[Added Lines]",
      "36: CAPTION \"Rufus 2.17.1187\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "368: VS_VERSION_INFO VERSIONINFO",
      "371:  FILEFLAGSMASK 0x3fL",
      "372: #ifdef _DEBUG",
      "373:  FILEFLAGS 0x1L",
      "",
      "[Removed Lines]",
      "369:  FILEVERSION 2,17,1186,0",
      "370:  PRODUCTVERSION 2,17,1186,0",
      "",
      "[Added Lines]",
      "369:  FILEVERSION 2,17,1187,0",
      "370:  PRODUCTVERSION 2,17,1187,0",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "384:         BEGIN",
      "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
      "386:             VALUE \"FileDescription\", \"Rufus\"",
      "388:             VALUE \"InternalName\", \"Rufus\"",
      "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
      "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
      "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
      "392:             VALUE \"ProductName\", \"Rufus\"",
      "394:         END",
      "395:     END",
      "396:     BLOCK \"VarFileInfo\"",
      "",
      "[Removed Lines]",
      "387:             VALUE \"FileVersion\", \"2.17.1186\"",
      "393:             VALUE \"ProductVersion\", \"2.17.1186\"",
      "",
      "[Added Lines]",
      "387:             VALUE \"FileVersion\", \"2.17.1187\"",
      "393:             VALUE \"ProductVersion\", \"2.17.1187\"",
      "",
      "---------------"
    ],
    "src/stdlg.c||src/stdlg.c": [
      "File: src/stdlg.c -> src/stdlg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674:    case 2:  // Launch newer version and close this one",
      "1675:     Sleep(1000); // Add a delay on account of antivirus scanners",
      "1678:      break;",
      "1680:     memset(&si, 0, sizeof(si));",
      "1681:     memset(&pi, 0, sizeof(pi));",
      "",
      "[Removed Lines]",
      "1677:     if (ValidateSignature(hDlg, filepath) != NO_ERROR)",
      "",
      "[Added Lines]",
      "1677:     if (ValidateSignature(hDlg, filepath) != NO_ERROR) {",
      "1679:      _unlinkU(filepath);",
      "1680:      EnableWindow(GetDlgItem(hDlg, IDC_DOWNLOAD), FALSE);",
      "1682:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9cd04be52926b23ecfec6a7d95b88630fa17aa81",
      "candidate_info": {
        "commit_hash": "9cd04be52926b23ecfec6a7d95b88630fa17aa81",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/9cd04be52926b23ecfec6a7d95b88630fa17aa81",
        "files": [
          "ChangeLog.txt",
          "res/grub/grldr.mbr",
          "res/grub/readme.txt",
          "src/db.h",
          "src/ms-sys/inc/mbr_grub.h",
          "src/rufus.rc"
        ],
        "message": "[grub] update grub4dos to latest and add db entry for grub 2.03",
        "before_after_code_files": [
          "src/db.h||src/db.h",
          "src/ms-sys/inc/mbr_grub.h||src/ms-sys/inc/mbr_grub.h",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/db.h||src/db.h": [
          "File: src/db.h -> src/db.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: static uint8_t sha256db[] = {",
          "29:  0x12, 0xbd, 0x22, 0xd2, 0xb3, 0x69, 0x56, 0x0f, 0x89, 0xb8, 0x50, 0x7e, 0x7e, 0x74, 0xeb, 0xc5, 0xea, 0x44, 0x91, 0x48, 0x75, 0xf0, 0xa4, 0xcb, 0x1e, 0xa6, 0xfb, 0x4e, 0xc9, 0x89, 0x58, 0x17, // syslinux-6.03/pre6/ldlinux.sys",
          "30:  0x15, 0x5f, 0x36, 0x7b, 0xb1, 0x30, 0xfe, 0x05, 0x5c, 0x79, 0x9f, 0x88, 0xb3, 0xc0, 0xc1, 0xa0, 0x0a, 0x18, 0x05, 0x78, 0x22, 0x69, 0xcf, 0x7e, 0x54, 0xaa, 0x61, 0xbd, 0xe3, 0x8e, 0x05, 0x92, // syslinux-6.03/pre3/ldlinux.bss",
          "32:  0x1c, 0xb7, 0x8b, 0x98, 0xbc, 0xd6, 0x76, 0x7b, 0x01, 0x44, 0xf5, 0x00, 0xaf, 0x81, 0xef, 0x4f, 0x3c, 0x54, 0xea, 0xaf, 0xe3, 0xc9, 0x4e, 0x1f, 0xd6, 0x24, 0x68, 0x41, 0x4e, 0x98, 0x92, 0x25, // syslinux-6.03/pre20/ldlinux.bss",
          "33:  0x1c, 0xc6, 0x32, 0x21, 0xfd, 0xf4, 0x46, 0xfc, 0xda, 0xc6, 0xc0, 0x56, 0x35, 0x79, 0x54, 0xc1, 0x5b, 0x61, 0x75, 0xca, 0x1b, 0xc2, 0xa4, 0x9f, 0x85, 0x52, 0xec, 0xca, 0x28, 0xac, 0x3e, 0x51, // syslinux-6.02/ldlinux.bss",
          "34:  0x22, 0x96, 0x82, 0xac, 0x61, 0xb8, 0x8b, 0x11, 0x25, 0xfc, 0xd7, 0xe6, 0x9f, 0x4e, 0x7f, 0x46, 0x7f, 0x68, 0xc5, 0x14, 0x9e, 0xb9, 0x37, 0x1a, 0x98, 0xd8, 0xf2, 0x78, 0x41, 0x40, 0xad, 0x88, // syslinux-5.00/ldlinux.sys",
          "",
          "[Removed Lines]",
          "31:  0x16, 0xfa, 0x7a, 0xb6, 0x9b, 0x63, 0xc3, 0x79, 0xa1, 0x25, 0x7d, 0x6a, 0x1f, 0x1c, 0xf0, 0xc8, 0x17, 0xfe, 0x59, 0x67, 0xc0, 0x69, 0x66, 0xd8, 0x7e, 0x6c, 0x48, 0x0b, 0x87, 0x71, 0x1d, 0xf7, // grub4dos-0.4.6a/grldr",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:  0x42, 0x23, 0x03, 0x86, 0x6d, 0xa1, 0xf2, 0xaf, 0x28, 0x25, 0x92, 0x29, 0x17, 0x21, 0xc7, 0x61, 0x23, 0xcf, 0xe9, 0x84, 0x05, 0xb7, 0x60, 0x2a, 0xc7, 0xe3, 0xe9, 0x5b, 0xf3, 0xcb, 0xd4, 0xba, // syslinux-6.00/ldlinux.c32",
          "52:  0x46, 0x48, 0xe8, 0x13, 0xd7, 0x54, 0x20, 0x39, 0x4e, 0xe6, 0x35, 0xd2, 0xa4, 0x78, 0x44, 0xeb, 0xdc, 0xc9, 0x98, 0xd3, 0x45, 0x8f, 0x95, 0xf9, 0x50, 0x80, 0x50, 0x9b, 0x88, 0x80, 0x44, 0x4a, // syslinux-6.03/pre17/ldlinux.sys",
          "53:  0x47, 0x0c, 0x04, 0x6d, 0xe8, 0x53, 0x5d, 0x46, 0x0e, 0x05, 0x63, 0x99, 0xa8, 0x89, 0x28, 0x0b, 0x25, 0x55, 0xf2, 0xb7, 0xbf, 0x89, 0x84, 0x9a, 0x7f, 0x27, 0xa4, 0x32, 0x72, 0xb5, 0x3f, 0x12, // syslinux-6.01/ldlinux.sys",
          "54:  0x4d, 0xee, 0xc3, 0x47, 0xb0, 0xa3, 0x18, 0x46, 0x09, 0x42, 0xb2, 0xeb, 0x3e, 0xd1, 0x75, 0xcf, 0x3f, 0x8c, 0x3e, 0x8c, 0xe4, 0x3b, 0x14, 0xfc, 0x8e, 0x8f, 0x8c, 0x51, 0xcb, 0xa5, 0x5a, 0xdb, // syslinux-5.02/ldlinux.c32",
          "55:  0x4e, 0xfb, 0x8f, 0xde, 0xb9, 0xe1, 0xe2, 0xa2, 0xc3, 0xf0, 0x11, 0xca, 0x77, 0x3b, 0x95, 0xf4, 0xb9, 0x7f, 0xbc, 0x7f, 0x3d, 0x40, 0x4d, 0x7c, 0x60, 0xf3, 0x4a, 0x61, 0x43, 0x44, 0x7e, 0x7f, // syslinux-5.01/ldlinux.c32",
          "56:  0x50, 0xca, 0xe9, 0x94, 0x79, 0x68, 0xdf, 0xa6, 0xd7, 0x11, 0xcd, 0xb0, 0x7d, 0x84, 0xf2, 0x56, 0x78, 0xd6, 0x69, 0xbf, 0xb0, 0x29, 0xaa, 0x56, 0xa1, 0x04, 0x55, 0xb0, 0xcd, 0x06, 0xca, 0xd2, // syslinux-6.03/pre3/ldlinux.sys",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:  0x4c, 0x42, 0x56, 0x49, 0xae, 0xea, 0x45, 0xce, 0x84, 0x23, 0xc5, 0x14, 0xdf, 0x20, 0xf6, 0x86, 0x43, 0xeb, 0xcb, 0x42, 0xec, 0xa3, 0xd2, 0x9b, 0x70, 0x3a, 0x7c, 0xab, 0x1f, 0xe6, 0xc7, 0xd4, // grub4dos-0.4.6a/grldr",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:  0x77, 0x9a, 0x5e, 0xbd, 0x69, 0xd3, 0x28, 0x5e, 0xb9, 0xed, 0x4a, 0xc7, 0xc0, 0x4d, 0x2d, 0x15, 0xcb, 0xa1, 0x8a, 0x1f, 0x97, 0xc7, 0xc4, 0xbe, 0x62, 0x48, 0x93, 0xa9, 0xe1, 0xb0, 0x89, 0x2e, // syslinux-6.03/pre9/ldlinux.sys",
          "71:  0x78, 0x64, 0x8e, 0xf0, 0xc5, 0x00, 0x41, 0x75, 0xb9, 0xa8, 0xea, 0x33, 0x30, 0x14, 0xea, 0x02, 0xc9, 0x17, 0xf8, 0x23, 0xe7, 0x7a, 0x3e, 0xc9, 0xac, 0xd9, 0xd2, 0x2b, 0x46, 0x02, 0xf3, 0x6d, // syslinux-6.03/pre13/ldlinux.sys",
          "72:  0x7d, 0xa9, 0xc5, 0x21, 0x76, 0xb8, 0xaf, 0x01, 0x64, 0xea, 0x39, 0x21, 0x22, 0x44, 0xb1, 0x0a, 0xa0, 0xc7, 0x97, 0xe7, 0x65, 0xbb, 0x6b, 0x92, 0x69, 0xb5, 0x8b, 0xc9, 0xe5, 0x0a, 0x9f, 0x18, // syslinux-5.01/ldlinux.bss",
          "74:  0x82, 0x11, 0xfa, 0xe8, 0xaf, 0xf0, 0x23, 0x3f, 0x05, 0xa8, 0xb7, 0x8c, 0x58, 0x15, 0x25, 0xe2, 0x81, 0xac, 0x98, 0x23, 0x54, 0xa8, 0xc4, 0x3b, 0xb4, 0x96, 0x5e, 0x61, 0xdc, 0x98, 0xb4, 0x62, // syslinux-6.03/pre8/ldlinux.bss",
          "75:  0x83, 0x9b, 0xd0, 0x8a, 0xcb, 0x68, 0x47, 0xd6, 0x55, 0x07, 0xf1, 0x4e, 0x7a, 0x55, 0x6e, 0x91, 0xe6, 0x12, 0x9c, 0x47, 0x86, 0x3f, 0x7d, 0x61, 0xe2, 0xce, 0x6d, 0xb7, 0x8d, 0xf3, 0xd2, 0x3f, // syslinux-6.03/pre9/ldlinux.bss",
          "76:  0x87, 0xaa, 0x91, 0xf8, 0x7f, 0xba, 0x5f, 0x31, 0x79, 0x43, 0x08, 0xda, 0xa4, 0xa4, 0x8d, 0xad, 0x6c, 0xf6, 0xfa, 0x34, 0x26, 0x4d, 0x66, 0xb8, 0x84, 0xb8, 0xb9, 0xdc, 0x96, 0x42, 0xed, 0x86, // syslinux-5.02/ldlinux.sys",
          "",
          "[Removed Lines]",
          "73:  0x80, 0xea, 0x9a, 0xc3, 0xab, 0x09, 0xaf, 0x3f, 0xbe, 0x05, 0x6a, 0xf6, 0xd4, 0x8a, 0xf5, 0x2c, 0xdb, 0xa7, 0x36, 0xcb, 0xa5, 0xe2, 0x49, 0x63, 0x49, 0xd0, 0xe9, 0x31, 0xa7, 0x16, 0x9b, 0x11, // grub4dos-0.4.6a/grldr.mbr",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "78:  0x8b, 0x93, 0x7e, 0x5e, 0x8b, 0xae, 0x5a, 0xf8, 0xc8, 0x95, 0x63, 0xc0, 0x0e, 0x9c, 0xaf, 0xc6, 0xcd, 0x7c, 0x2c, 0x80, 0x8a, 0xda, 0x7b, 0xf4, 0xad, 0x51, 0x08, 0xda, 0x3e, 0x51, 0xcd, 0x70, // grub-2.00-22/core.img",
          "79:  0x8e, 0xc8, 0x42, 0x06, 0x94, 0x4c, 0xd4, 0x3d, 0xf6, 0xba, 0x83, 0x63, 0xc0, 0x81, 0xe4, 0xa0, 0x82, 0x9e, 0x71, 0x9a, 0xbf, 0x5a, 0x46, 0x6d, 0x7c, 0x81, 0x0c, 0x2f, 0x5b, 0x6d, 0x13, 0x75, // syslinux-6.03/pre5/ldlinux.sys",
          "80:  0x95, 0x8d, 0x10, 0xbb, 0x87, 0x28, 0xcc, 0x1f, 0xf1, 0x6a, 0x12, 0xee, 0x6a, 0x60, 0x62, 0x40, 0xa6, 0xb7, 0x4d, 0xab, 0xa0, 0x2b, 0x8c, 0xb8, 0xed, 0x2a, 0xe8, 0x1c, 0x2f, 0xb2, 0x5b, 0x97, // syslinux-6.00/ldlinux.bss",
          "81:  0x9a, 0x0b, 0xc4, 0x1b, 0xd7, 0x95, 0xed, 0xb0, 0x83, 0x0f, 0x1c, 0xc4, 0x82, 0x4b, 0xfa, 0x9d, 0xe0, 0x9d, 0x68, 0x63, 0x92, 0x09, 0x4f, 0x5a, 0xe7, 0xfb, 0xac, 0xfb, 0xb0, 0x17, 0x9d, 0xa6, // syslinux-6.03/pre1/ldlinux.bss",
          "82:  0x9b, 0xcc, 0x65, 0x92, 0xa7, 0xba, 0x7e, 0x73, 0x38, 0xf4, 0xbb, 0xba, 0x27, 0xc6, 0x30, 0x16, 0xb9, 0x5e, 0xcb, 0x1e, 0xc6, 0x8c, 0x0b, 0xe9, 0xb6, 0x99, 0xb2, 0xea, 0x69, 0xcb, 0xab, 0xb2, // syslinux-5.00/ldlinux.c32",
          "83:  0xa6, 0x82, 0x43, 0xa0, 0xf2, 0xe5, 0x90, 0xb8, 0x14, 0x02, 0xd6, 0xfa, 0x62, 0xd4, 0xfd, 0x30, 0x94, 0x8c, 0x00, 0x3d, 0xa1, 0x2b, 0xfe, 0xeb, 0x69, 0xba, 0x20, 0x34, 0x17, 0x27, 0x09, 0x4c, // syslinux-6.03/pre14/ldlinux.sys",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "80:  0x97, 0x34, 0xdc, 0x05, 0x5e, 0x3d, 0xa6, 0xd0, 0xec, 0xe8, 0x86, 0xa1, 0xde, 0x5a, 0xe2, 0xb4, 0x81, 0xd5, 0xd4, 0xdf, 0x61, 0x52, 0xf7, 0x1e, 0x82, 0x5c, 0x99, 0x44, 0x03, 0x92, 0x92, 0xf0, // grub-2.03/core.img",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "104:  0xec, 0xfd, 0xbc, 0x3f, 0x4f, 0x2e, 0x4d, 0x99, 0x16, 0x9c, 0xdd, 0xfb, 0x15, 0x2d, 0x92, 0x4d, 0x7d, 0xe6, 0x8a, 0xb6, 0x7f, 0x4d, 0x12, 0x54, 0x40, 0xfa, 0xbc, 0x9f, 0x00, 0x46, 0xd5, 0xbc, // syslinux-6.03/pre5/ldlinux.bss",
          "105:  0xee, 0xed, 0xc0, 0x4c, 0x13, 0x73, 0xb5, 0xc4, 0x04, 0x4d, 0x1f, 0xde, 0x0d, 0x2f, 0xb8, 0xe2, 0x8c, 0x74, 0xb1, 0x02, 0x9c, 0x99, 0xed, 0x67, 0x0a, 0x15, 0x98, 0x3f, 0x18, 0xa0, 0x4d, 0x36, // syslinux-6.02/ldlinux.c32",
          "106:  0xf5, 0x40, 0x26, 0x1c, 0x09, 0x7d, 0xbd, 0x8a, 0x8a, 0x12, 0x9b, 0x68, 0x99, 0x5f, 0x33, 0xab, 0xe7, 0x1c, 0x29, 0x40, 0xf8, 0x87, 0xc6, 0x68, 0x9b, 0xf8, 0xdc, 0x3f, 0x1a, 0xcf, 0x0b, 0x44, // syslinux-6.03/pre17/ldlinux.bss",
          "107:  0xfb, 0x0a, 0x23, 0xca, 0x4d, 0x22, 0xfd, 0xd2, 0xad, 0x4e, 0xfa, 0x1b, 0x21, 0x08, 0xb6, 0x60, 0xd2, 0xff, 0xa3, 0xf2, 0xfb, 0xdd, 0x25, 0x32, 0xdc, 0xf1, 0x3f, 0x49, 0x33, 0x28, 0x46, 0x7b, // syslinux-6.03/pre11/ldlinux.bss",
          "108:  0xfb, 0x49, 0xfd, 0x45, 0x8c, 0xaf, 0x47, 0x5a, 0x16, 0x05, 0x5e, 0x4a, 0x75, 0x5a, 0xc3, 0xe3, 0x95, 0x52, 0xf4, 0xe9, 0x6c, 0xa2, 0x0d, 0xea, 0x53, 0xf5, 0xc4, 0x09, 0x2b, 0x68, 0xfd, 0x4f, // syslinux-6.00/ldlinux.sys",
          "109: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:  0xf5, 0xc6, 0xe8, 0xe2, 0xc1, 0xeb, 0x73, 0x80, 0x28, 0x5f, 0xa9, 0xcb, 0x1c, 0x91, 0x68, 0xe9, 0x2d, 0x5b, 0x3b, 0x55, 0xcd, 0xe0, 0x52, 0xc0, 0x43, 0xba, 0x81, 0xed, 0x17, 0xb9, 0xac, 0xef, // grub4dos-0.4.6a/grldr.mbr",
          "",
          "---------------"
        ],
        "src/ms-sys/inc/mbr_grub.h||src/ms-sys/inc/mbr_grub.h": [
          "File: src/ms-sys/inc/mbr_grub.h -> src/ms-sys/inc/mbr_grub.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: unsigned char mbr_grub_0x0[] = {",
          "41: };",
          "",
          "[Removed Lines]",
          "5:  0xEB, 0x5E, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "6:  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "7:  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "8:  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "9:  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "10:  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "11:  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "12:  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x20, 0x39, 0xFF, 0xFF,",
          "13:  0x31, 0xDB, 0x8E, 0xD3, 0xBC, 0x80, 0x05, 0xE8, 0x00, 0x00, 0x5B, 0x81,",
          "14:  0xEB, 0x6A, 0x00, 0xC1, 0xEB, 0x04, 0x8C, 0xC8, 0x01, 0xC3, 0x53, 0x68,",
          "15:  0x7B, 0x00, 0xCB, 0x68, 0x00, 0x20, 0x17, 0xBC, 0x00, 0x90, 0x80, 0xFA,",
          "16:  0x00, 0x74, 0x02, 0xB2, 0x80, 0x16, 0x07, 0xB0, 0x10, 0x30, 0xF6, 0x31,",
          "17:  0xDB, 0xE8, 0xC2, 0x00, 0x72, 0x29, 0x0E, 0x1F, 0x31, 0xF6, 0x31, 0xFF,",
          "18:  0xB9, 0xDF, 0x00, 0xFC, 0xF3, 0xA5, 0xBB, 0xFC, 0x1F, 0x66, 0xB8, 0x47,",
          "19:  0x52, 0x55, 0xAA, 0x66, 0x39, 0x07, 0x75, 0x03, 0xE8, 0xA8, 0x19, 0xEA,",
          "20:  0xB8, 0x00, 0x00, 0x20, 0x16, 0x1F, 0x66, 0x39, 0x07, 0x74, 0x1F, 0x80,",
          "21:  0xF2, 0x80, 0x68, 0xC0, 0x07, 0x07, 0xB0, 0x10, 0x30, 0xF6, 0x31, 0xDB,",
          "22:  0xE8, 0x87, 0x00, 0x72, 0x05, 0xEA, 0x00, 0x00, 0xC0, 0x07, 0xBE, 0x92,",
          "23:  0x01, 0xE8, 0xAF, 0x00, 0xEB, 0xFE, 0xBE, 0xBE, 0x01, 0xE8, 0x14, 0x10,",
          "24:  0xF6, 0x06, 0xA4, 0x01, 0x80, 0x0F, 0x84, 0x7C, 0x19, 0x83, 0xC6, 0x0C,",
          "25:  0x81, 0xFE, 0xFE, 0x01, 0x72, 0xEB, 0x77, 0x2D, 0xF6, 0x06, 0xA7, 0x01,",
          "26:  0x01, 0x0F, 0x85, 0x2E, 0x17, 0x80, 0x0E, 0xA7, 0x01, 0x01, 0xF6, 0x06,",
          "27:  0xA7, 0x01, 0x02, 0x75, 0xD4, 0x68, 0x00, 0x0D, 0x07, 0xB0, 0x04, 0x31,",
          "28:  0xD2, 0x31, 0xDB, 0xE8, 0x3C, 0x00, 0x73, 0xC2, 0xBE, 0xBD, 0x1C, 0xE8,",
          "29:  0x69, 0x00, 0xE9, 0x0A, 0x17, 0xF6, 0x06, 0xA7, 0x01, 0x01, 0x0F, 0x85,",
          "30:  0x01, 0x17, 0x80, 0x0E, 0xA7, 0x01, 0x01, 0xE9, 0xE2, 0x16, 0x1E, 0x06,",
          "31:  0x52, 0x56, 0x57, 0x55, 0xF9, 0xCD, 0x13, 0x5D, 0x5F, 0x5E, 0x5A, 0x07,",
          "32:  0x1F, 0xC3, 0xFA, 0xB8, 0x00, 0x20, 0x8E, 0xD0, 0xBC, 0xDC, 0x8F, 0xFB,",
          "33:  0x66, 0x61, 0x07, 0x1F, 0xEB, 0x97, 0xB4, 0x02, 0xBF, 0x03, 0x00, 0xB9,",
          "34:  0x01, 0x00, 0x60, 0x50, 0x53, 0x51, 0xFE, 0xC8, 0x00, 0xC1, 0xD0, 0xE0,",
          "35:  0x00, 0xC7, 0xB0, 0x01, 0xE8, 0xC7, 0xFF, 0x59, 0x5B, 0x58, 0x72, 0x04,",
          "36:  0xFE, 0xC8, 0x75, 0xE7, 0x61, 0x73, 0x0B, 0x60, 0x31, 0xC0, 0xE8, 0xB5,",
          "37:  0xFF, 0x61, 0x4F, 0x75, 0xD9, 0xF9, 0xC3, 0xB4, 0x0E, 0xCD, 0x10, 0x2E,",
          "38:  0xAC, 0x3C, 0x00, 0x75, 0xF6, 0xC3, 0x0D, 0x0A, 0x4D, 0x69, 0x73, 0x73,",
          "39:  0x69, 0x6E, 0x67, 0x20, 0x68, 0x65, 0x6C, 0x70, 0x65, 0x72, 0x2E, 0x00,",
          "40:  0x00, 0x3F, 0xFF",
          "",
          "[Added Lines]",
          "5:     0xEB, 0x5E, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "6:     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "7:     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "8:     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "9:     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "10:     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "11:     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
          "12:     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x20, 0x39, 0xFF, 0xFF,",
          "13:     0x31, 0xDB, 0x8E, 0xD3, 0xBC, 0x80, 0x05, 0xE8, 0x00, 0x00, 0x5B, 0x81,",
          "14:     0xEB, 0x6A, 0x00, 0xC1, 0xEB, 0x04, 0x8C, 0xC8, 0x01, 0xC3, 0x53, 0x68,",
          "15:     0x7B, 0x00, 0xCB, 0x68, 0x00, 0x20, 0x17, 0xBC, 0x00, 0x90, 0x80, 0xFA,",
          "16:     0x00, 0x74, 0x02, 0xB2, 0x80, 0x16, 0x07, 0xB0, 0x10, 0x30, 0xF6, 0x31,",
          "17:     0xDB, 0xE8, 0xC2, 0x00, 0x72, 0x29, 0x0E, 0x1F, 0x31, 0xF6, 0x31, 0xFF,",
          "18:     0xB9, 0xDF, 0x00, 0xFC, 0xF3, 0xA5, 0xBB, 0xFC, 0x1F, 0x66, 0xB8, 0x47,",
          "19:     0x52, 0x55, 0xAA, 0x66, 0x39, 0x07, 0x75, 0x03, 0xE8, 0xB6, 0x19, 0xEA,",
          "20:     0xB8, 0x00, 0x00, 0x20, 0x16, 0x1F, 0x66, 0x39, 0x07, 0x74, 0x1F, 0x80,",
          "21:     0xF2, 0x80, 0x68, 0xC0, 0x07, 0x07, 0xB0, 0x10, 0x30, 0xF6, 0x31, 0xDB,",
          "22:     0xE8, 0x87, 0x00, 0x72, 0x05, 0xEA, 0x00, 0x00, 0xC0, 0x07, 0xBE, 0x92,",
          "23:     0x01, 0xE8, 0xAF, 0x00, 0xEB, 0xFE, 0xBE, 0xBE, 0x01, 0xE8, 0x14, 0x10,",
          "24:     0xF6, 0x06, 0xA4, 0x01, 0x80, 0x0F, 0x84, 0x8A, 0x19, 0x83, 0xC6, 0x0C,",
          "25:     0x81, 0xFE, 0xFE, 0x01, 0x72, 0xEB, 0x77, 0x2D, 0xF6, 0x06, 0xA7, 0x01,",
          "26:     0x01, 0x0F, 0x85, 0x3C, 0x17, 0x80, 0x0E, 0xA7, 0x01, 0x01, 0xF6, 0x06,",
          "27:     0xA7, 0x01, 0x02, 0x75, 0xD4, 0x68, 0x00, 0x0D, 0x07, 0xB0, 0x04, 0x31,",
          "28:     0xD2, 0x31, 0xDB, 0xE8, 0x3C, 0x00, 0x73, 0xC2, 0xBE, 0xCB, 0x1C, 0xE8,",
          "29:     0x69, 0x00, 0xE9, 0x18, 0x17, 0xF6, 0x06, 0xA7, 0x01, 0x01, 0x0F, 0x85,",
          "30:     0x0F, 0x17, 0x80, 0x0E, 0xA7, 0x01, 0x01, 0xE9, 0xF0, 0x16, 0x1E, 0x06,",
          "31:     0x52, 0x56, 0x57, 0x55, 0xF9, 0xCD, 0x13, 0x5D, 0x5F, 0x5E, 0x5A, 0x07,",
          "32:     0x1F, 0xC3, 0xFA, 0xB8, 0x00, 0x20, 0x8E, 0xD0, 0xBC, 0xDC, 0x8F, 0xFB,",
          "33:     0x66, 0x61, 0x07, 0x1F, 0xEB, 0x97, 0xB4, 0x02, 0xBF, 0x03, 0x00, 0xB9,",
          "34:     0x01, 0x00, 0x60, 0x50, 0x53, 0x51, 0xFE, 0xC8, 0x00, 0xC1, 0xD0, 0xE0,",
          "35:     0x00, 0xC7, 0xB0, 0x01, 0xE8, 0xC7, 0xFF, 0x59, 0x5B, 0x58, 0x72, 0x04,",
          "36:     0xFE, 0xC8, 0x75, 0xE7, 0x61, 0x73, 0x0B, 0x60, 0x31, 0xC0, 0xE8, 0xB5,",
          "37:     0xFF, 0x61, 0x4F, 0x75, 0xD9, 0xF9, 0xC3, 0xB4, 0x0E, 0xCD, 0x10, 0x2E,",
          "38:     0xAC, 0x3C, 0x00, 0x75, 0xF6, 0xC3, 0x0D, 0x0A, 0x4D, 0x69, 0x73, 0x73,",
          "39:     0x69, 0x6E, 0x67, 0x20, 0x68, 0x65, 0x6C, 0x70, 0x65, 0x72, 0x2E, 0x00,",
          "40:     0x00, 0x3F, 0xFF",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.18.1210\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.18.1211\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368: VS_VERSION_INFO VERSIONINFO",
          "371:  FILEFLAGSMASK 0x3fL",
          "372: #ifdef _DEBUG",
          "373:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "369:  FILEVERSION 2,18,1210,0",
          "370:  PRODUCTVERSION 2,18,1210,0",
          "",
          "[Added Lines]",
          "369:  FILEVERSION 2,18,1211,0",
          "370:  PRODUCTVERSION 2,18,1211,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:         BEGIN",
          "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "386:             VALUE \"FileDescription\", \"Rufus\"",
          "388:             VALUE \"InternalName\", \"Rufus\"",
          "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "392:             VALUE \"ProductName\", \"Rufus\"",
          "394:         END",
          "395:     END",
          "396:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "387:             VALUE \"FileVersion\", \"2.18.1210\"",
          "393:             VALUE \"ProductVersion\", \"2.18.1210\"",
          "",
          "[Added Lines]",
          "387:             VALUE \"FileVersion\", \"2.18.1211\"",
          "393:             VALUE \"ProductVersion\", \"2.18.1211\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39cb35e20c40ba9600397ba6390c5aea373fdafd",
      "candidate_info": {
        "commit_hash": "39cb35e20c40ba9600397ba6390c5aea373fdafd",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/39cb35e20c40ba9600397ba6390c5aea373fdafd",
        "files": [
          "src/drive.c",
          "src/rufus.rc"
        ],
        "message": "[core] improve UEFI:NTFS detection\n\n* Check the label for MBR partitions to avoid false positives (such as with Debian live)",
        "before_after_code_files": [
          "src/drive.c||src/drive.c",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/drive.c||src/drive.c": [
          "File: src/drive.c -> src/drive.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "708: {",
          "710:  const uint8_t mbr_mountable[] = { 0x01, 0x04, 0x06, 0x07, 0x0b, 0x0c, 0x0e, 0xef };",
          "712:  HANDLE hPhysical;",
          "714:  BYTE geometry[256] = {0}, layout[4096] = {0}, part_type;",
          "715:  PDISK_GEOMETRY_EX DiskGeometry = (PDISK_GEOMETRY_EX)(void*)geometry;",
          "716:  PDRIVE_LAYOUT_INFORMATION_EX DriveLayout = (PDRIVE_LAYOUT_INFORMATION_EX)(void*)layout;",
          "721:  if (FileSystemName == NULL)",
          "722:   return FALSE;",
          "",
          "[Removed Lines]",
          "711:  BOOL r, ret = FALSE, isUefiNtfs = FALSE;",
          "713:  DWORD size;",
          "717:  char* volume_name;",
          "718:  char tmp[256];",
          "719:  DWORD i, j, super_floppy_disk = FALSE;",
          "",
          "[Added Lines]",
          "711:  BOOL r, ret = FALSE, isUefiNtfs;",
          "713:  DWORD size, i, j, super_floppy_disk = FALSE;",
          "717:  char *volume_name, *buf, tmp[256];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "785:   } else {",
          "786:    suprintf(\"Partition type: MBR, NB Partitions: %d\", SelectedDrive.nPartitions);",
          "787:    SelectedDrive.has_mbr_uefi_marker = (DriveLayout->Mbr.Signature == MBR_UEFI_MARKER);",
          "789:    AnalyzeMBR(hPhysical, \"Drive\");",
          "790:   }",
          "791:   for (i=0; i<DriveLayout->PartitionCount; i++) {",
          "792:    if (DriveLayout->PartitionEntry[i].Mbr.PartitionType != PARTITION_ENTRY_UNUSED) {",
          "793:     part_type = DriveLayout->PartitionEntry[i].Mbr.PartitionType;",
          "796:     suprintf(\"Partition %d%s:\", i+(super_floppy_disk?0:1), isUefiNtfs?\" (UEFI:NTFS)\":\"\");",
          "797:     for (j=0; j<ARRAYSIZE(mbr_mountable); j++) {",
          "798:      if (part_type == mbr_mountable[j]) {",
          "",
          "[Removed Lines]",
          "788:    suprintf(\"Disk ID: 0x%08X %s\", DriveLayout->Mbr.Signature, SelectedDrive.has_mbr_uefi_marker ? \"(UEFI target)\" : \"\");",
          "794:     isUefiNtfs = (i == 1) && (part_type == 0xef) &&",
          "795:      (DriveLayout->PartitionEntry[i].PartitionLength.QuadPart <= 1*MB);",
          "",
          "[Added Lines]",
          "786:    suprintf(\"Disk ID: 0x%08X %s\", DriveLayout->Mbr.Signature, SelectedDrive.has_mbr_uefi_marker?\"(UEFI target)\":\"\");",
          "790:    isUefiNtfs = FALSE;",
          "793:     if (part_type == 0xef) {",
          "795:      buf = calloc(SelectedDrive.SectorSize, 1);",
          "796:      if (buf != NULL) {",
          "797:       SetFilePointerEx(hPhysical, DriveLayout->PartitionEntry[i].StartingOffset, NULL, FILE_BEGIN);",
          "798:       ReadFile(hPhysical, buf, SelectedDrive.SectorSize, &size, NULL);",
          "799:       isUefiNtfs = (strncmp(&buf[0x2B], \"UEFI_NTFS\", 9) == 0);",
          "800:       free(buf);",
          "801:      }",
          "802:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "827:    SelectedDrive.nPartitions++;",
          "828:    tmp[0] = 0;",
          "829:    wchar_to_utf8_no_alloc(DriveLayout->PartitionEntry[i].Gpt.Name, tmp, sizeof(tmp));",
          "831:     GuidToString(&DriveLayout->PartitionEntry[i].Gpt.PartitionType), tmp);",
          "832:    suprintf(\"  ID: %s\\r\\n  Size: %s (%\" PRIi64 \" bytes)\\r\\n  Start Sector: %\" PRIi64 \", Attributes: 0x%016\" PRIX64,",
          "833:     GuidToString(&DriveLayout->PartitionEntry[i].Gpt.PartitionId),",
          "",
          "[Removed Lines]",
          "830:    suprintf(\"Partition %d:\\r\\n  Type: %s\\r\\n  Name: '%s'\", i+1,",
          "",
          "[Added Lines]",
          "838:    isUefiNtfs = (strcmp(tmp, \"UEFI:NTFS\") == 0);",
          "839:    suprintf(\"Partition %d%s:\\r\\n  Type: %s\\r\\n  Name: '%s'\", i+1, isUefiNtfs ? \" (UEFI:NTFS)\" : \"\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "838:    SelectedDrive.FirstDataSector = min(SelectedDrive.FirstDataSector,",
          "839:     (DWORD)(DriveLayout->PartitionEntry[i].StartingOffset.QuadPart / SelectedDrive.SectorSize));",
          "842:      (CompareGUID(&DriveLayout->PartitionEntry[i].Gpt.PartitionType, &PARTITION_MSFT_RESERVED_GUID)) ||",
          "843:      (CompareGUID(&DriveLayout->PartitionEntry[i].Gpt.PartitionType, &PARTITION_SYSTEM_GUID)) )",
          "844:     --SelectedDrive.nPartitions;",
          "",
          "[Removed Lines]",
          "841:    if ( (strcmp(tmp, \"UEFI:NTFS\") == 0) ||",
          "",
          "[Added Lines]",
          "850:    if ( isUefiNtfs ||",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 232, 326",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 9, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Drive Properties\",IDS_DRIVE_PROPERTIES_TXT,8,6,53,12,NOT WS_GROUP",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 3.0.1267\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 3.0.1268\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "391: VS_VERSION_INFO VERSIONINFO",
          "394:  FILEFLAGSMASK 0x3fL",
          "395: #ifdef _DEBUG",
          "396:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "392:  FILEVERSION 3,0,1267,0",
          "393:  PRODUCTVERSION 3,0,1267,0",
          "",
          "[Added Lines]",
          "392:  FILEVERSION 3,0,1268,0",
          "393:  PRODUCTVERSION 3,0,1268,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "407:         BEGIN",
          "408:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "409:             VALUE \"FileDescription\", \"Rufus\"",
          "411:             VALUE \"InternalName\", \"Rufus\"",
          "412:             VALUE \"LegalCopyright\", \"\ufffd 2011-2018 Pete Batard (GPL v3)\"",
          "413:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "414:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "415:             VALUE \"ProductName\", \"Rufus\"",
          "417:         END",
          "418:     END",
          "419:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "410:             VALUE \"FileVersion\", \"3.0.1267\"",
          "416:             VALUE \"ProductVersion\", \"3.0.1267\"",
          "",
          "[Added Lines]",
          "410:             VALUE \"FileVersion\", \"3.0.1268\"",
          "416:             VALUE \"ProductVersion\", \"3.0.1268\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c12640b54743360ebf1c82cb03b9904da735bcca",
      "candidate_info": {
        "commit_hash": "c12640b54743360ebf1c82cb03b9904da735bcca",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/c12640b54743360ebf1c82cb03b9904da735bcca",
        "files": [
          "src/net.c",
          "src/rufus.c",
          "src/rufus.h",
          "src/rufus.rc"
        ],
        "message": "[ui] fix progress not being displayed for syslinux/grub downloads\n\n* Also make download of .sig files a bit less verbose",
        "before_after_code_files": [
          "src/net.c||src/net.c",
          "src/rufus.c||src/rufus.c",
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/net.c||src/net.c": [
          "File: src/net.c -> src/net.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:  short_name = (file != NULL) ? PathFindFileNameU(file) : PathFindFileNameU(url);",
          "278:   PrintInfo(0, MSG_085, short_name);",
          "281:  if ( (!pfInternetCrackUrlA(url, (DWORD)safe_strlen(url), 0, &UrlParts))",
          "282:    || (UrlParts.lpszHostName == NULL) || (UrlParts.lpszUrlPath == NULL)) {",
          "",
          "[Removed Lines]",
          "277:  if (hProgressDialog != NULL)",
          "279:  uprintf(\"Downloading %s\", url);",
          "",
          "[Added Lines]",
          "277:  if (hProgressDialog != NULL) {",
          "279:   uprintf(\"Downloading %s\", url);",
          "280:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "337:   uprintf(\"Unable to retrieve file length: %s\", WinInetErrorString());",
          "338:   goto out;",
          "339:  }",
          "342:  if (file != NULL) {",
          "343:   hFile = CreateFileU(file, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);",
          "",
          "[Removed Lines]",
          "340:  uprintf(\"File length: %d bytes\", dwTotalSize);",
          "",
          "[Added Lines]",
          "341:  if (hProgressDialog != NULL)",
          "342:   uprintf(\"File length: %d bytes\", dwTotalSize);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "390:  } else {",
          "391:   DownloadStatus = 200;",
          "392:   r = TRUE;",
          "394:   if (hProgressDialog != NULL) {",
          "395:    SendMessage(hProgressBar, PBM_SETPOS, (WPARAM)MAX_PROGRESS, 0);",
          "396:    PrintInfo(0, MSG_241, 100.0f);",
          "397:   }",
          "",
          "[Removed Lines]",
          "393:   uprintf(\"Successfully downloaded '%s'\", short_name);",
          "",
          "[Added Lines]",
          "396:    uprintf(\"Successfully downloaded '%s'\", short_name);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "439:   goto out;",
          "440:  sig_len = DownloadToFileOrBuffer(url_sig, NULL, &sig, NULL);",
          "441:  if ((sig_len != RSA_SIGNATURE_SIZE) || (!ValidateOpensslSignature(buf, buf_len, sig, sig_len))) {",
          "443:   DownloadStatus = 403; // Forbidden",
          "444:   FormatStatus = ERROR_SEVERITY_ERROR | FAC(FACILITY_STORAGE) | APPERR(ERROR_BAD_SIGNATURE);",
          "445:   goto out;",
          "446:  }",
          "449:  DownloadStatus = 206; // Partial content",
          "450:  hFile = CreateFileU(file, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);",
          "451:  if (hFile == INVALID_HANDLE_VALUE) {",
          "",
          "[Removed Lines]",
          "442:   uprintf(\"FATAL: Server signature is invalid!\");",
          "448:  uprintf(\"Download signature is valid\");",
          "",
          "[Added Lines]",
          "444:   uprintf(\"FATAL: Download signature is invalid \u2717\");",
          "450:  uprintf(\"Download signature is valid \u2713\");",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1443:  ExitThread(0);",
          "1444: }",
          "1447: {",
          "1448:  int i, r;",
          "1449:  FILE *fd;",
          "1450:  DWORD len;",
          "1451:  BOOL in_files_dir = FALSE;",
          "1452:  const char* grub = \"grub\";",
          "1453:  const char* core_img = \"core.img\";",
          "",
          "[Removed Lines]",
          "1446: static BOOL BootCheck(void)",
          "",
          "[Added Lines]",
          "1446: static DWORD WINAPI BootCheckThread(LPVOID param)",
          "1451:  WPARAM ret = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1459:  syslinux_ldlinux_len[0] = 0; syslinux_ldlinux_len[1] = 0;",
          "1460:  safe_free(grub2_buf);",
          "1461:  if (bt == BT_IMAGE) {",
          "1463:   assert(image_path != NULL);",
          "1464:   if (image_path == NULL)",
          "1466:   if ((size_check) && (img_report.projected_size > (uint64_t)SelectedDrive.DiskSize)) {",
          "1468:    MessageBoxExU(hMainDialog, lmprintf(MSG_089), lmprintf(MSG_088), MB_OK|MB_ICONERROR|MB_IS_RTL, selected_langid);",
          "1470:   }",
          "1471:   if (IS_DD_BOOTABLE(img_report) && !img_report.is_iso) {",
          "1474:   }",
          "1475:   if ((display_togo_option) && (ComboBox_GetCurSel(GetDlgItem(hMainDialog, IDC_IMAGE_OPTION)) == 1)) {",
          "1476:    if (fs != FS_NTFS) {",
          "1478:     MessageBoxExU(hMainDialog, lmprintf(MSG_097, \"Windows To Go\"), lmprintf(MSG_092), MB_OK|MB_ICONERROR|MB_IS_RTL, selected_langid);",
          "1480:    }",
          "1481:    if (SelectedDrive.MediaType != FixedMedia) {",
          "1482:     if ((tt == TT_UEFI) && (pt == PARTITION_STYLE_GPT) && (nWindowsBuildNumber < 15000)) {",
          "1485:      MessageBoxExU(hMainDialog, lmprintf(MSG_198), lmprintf(MSG_190), MB_OK|MB_ICONERROR|MB_IS_RTL, selected_langid);",
          "1487:     }",
          "1488:    }",
          "",
          "[Removed Lines]",
          "1465:    return FALSE;",
          "1469:    return FALSE;",
          "1473:    return TRUE;",
          "1479:     return FALSE;",
          "1486:      return FALSE;",
          "",
          "[Added Lines]",
          "1463:  if (ComboBox_GetCurSel(hDeviceList) == CB_ERR)",
          "1464:   goto out;",
          "1466:  if ((zero_drive) || (bt == BT_NON_BOOTABLE)) {",
          "1468:   ret = 0;",
          "1469:   goto out;",
          "1470:  }",
          "1475:    goto out;",
          "1479:    goto out;",
          "1483:    ret = 0;",
          "1484:    goto out;",
          "1490:     goto out;",
          "1497:      goto out;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1492:     MessageBoxExU(hMainDialog, lmprintf(MSG_073), lmprintf(MSG_291), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
          "1494:    case -2:",
          "1496:    default:",
          "1497:     break;",
          "1498:    }",
          "",
          "[Removed Lines]",
          "1495:     return FALSE;",
          "",
          "[Added Lines]",
          "1506:     goto out;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1500:    if (!IS_EFI_BOOTABLE(img_report)) {",
          "1502:     MessageBoxExU(hMainDialog, lmprintf(MSG_091), lmprintf(MSG_090), MB_OK|MB_ICONERROR|MB_IS_RTL, selected_langid);",
          "1504:    }",
          "1505:    if (HAS_WIN7_EFI(img_report) && (!WimExtractCheck())) {",
          "1507:     if (MessageBoxExU(hMainDialog, lmprintf(MSG_102), lmprintf(MSG_101), MB_YESNO|MB_ICONERROR|MB_IS_RTL, selected_langid) == IDYES)",
          "1508:      ShellExecuteA(hMainDialog, \"open\", SEVENZIP_URL, NULL, NULL, SW_SHOWNORMAL);",
          "1510:    }",
          "1511:   } else if ( ((fs == FS_NTFS) && !HAS_WINDOWS(img_report) && !HAS_GRUB(img_report) &&",
          "1512:       (!HAS_SYSLINUX(img_report) || (SL_MAJOR(img_report.sl_version) <= 5)))",
          "",
          "[Removed Lines]",
          "1503:     return FALSE;",
          "1509:     return FALSE;",
          "",
          "[Added Lines]",
          "1514:     goto out;",
          "1520:     goto out;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1515:      || ((IS_FAT(fs)) && (HAS_WINDOWS(img_report) || HAS_INSTALL_WIM(img_report)) && (!allow_dual_uefi_bios)) ) {",
          "1517:    MessageBoxExU(hMainDialog, lmprintf(MSG_096), lmprintf(MSG_092), MB_OK|MB_ICONERROR|MB_IS_RTL, selected_langid);",
          "1519:   } else if ((fs == FS_FAT16) && HAS_KOLIBRIOS(img_report)) {",
          "1521:    MessageBoxExU(hMainDialog, lmprintf(MSG_189), lmprintf(MSG_099), MB_OK|MB_ICONERROR|MB_IS_RTL, selected_langid);",
          "1523:   }",
          "1524:   if ((IS_FAT(fs)) && (img_report.has_4GB_file)) {",
          "1526:    MessageBoxExU(hMainDialog, lmprintf(MSG_100), lmprintf(MSG_099), MB_OK|MB_ICONERROR|MB_IS_RTL, selected_langid);",
          "1528:   }",
          "",
          "[Removed Lines]",
          "1518:    return FALSE;",
          "1522:    return FALSE;",
          "1527:    return FALSE;",
          "",
          "[Added Lines]",
          "1529:    goto out;",
          "1533:    goto out;",
          "1538:    goto out;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1559:     r = MessageBoxExU(hMainDialog, lmprintf(MSG_116, img_report.grub2_version, GRUB2_PACKAGE_VERSION),",
          "1560:      lmprintf(MSG_115), MB_YESNOCANCEL|MB_ICONWARNING|MB_IS_RTL, selected_langid);",
          "1561:     if (r == IDCANCEL)",
          "1563:     else if (r == IDYES) {",
          "1564:      static_sprintf(tmp, \"%s-%s\", grub, img_report.grub2_version);",
          "1565:      IGNORE_RETVAL(_mkdir(tmp));",
          "",
          "[Removed Lines]",
          "1562:      return FALSE;",
          "",
          "[Added Lines]",
          "1573:      goto out;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1622:         len = DownloadSignedFile(tmp, &tmp[sizeof(FILES_URL)], hMainDialog, TRUE);",
          "1623:         if (len == 0) {",
          "1624:          uprintf(\"Could not download file - cancelling\");",
          "1626:         }",
          "1627:         use_own_c32[i] = TRUE;",
          "1628:        }",
          "",
          "[Removed Lines]",
          "1625:          return FALSE;",
          "",
          "[Added Lines]",
          "1636:          goto out;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1655:       embedded_sl_version_str[1], embedded_sl_version_ext[1]),",
          "1656:       lmprintf(MSG_115), MB_YESNO|MB_ICONWARNING|MB_IS_RTL, selected_langid);",
          "1657:      if (r != IDYES)",
          "1659:      for (i=0; i<2; i++) {",
          "1660:       static_sprintf(tmp, \"%s-%s\", syslinux, img_report.sl_version_str);",
          "1661:       IGNORE_RETVAL(_mkdir(tmp));",
          "",
          "[Removed Lines]",
          "1658:       return FALSE;",
          "",
          "[Added Lines]",
          "1669:       goto out;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1689:         uprintf(\"Could not download the file - will try to use embedded %s version instead\", img_report.sl_version_str);",
          "1690:        } else {",
          "1691:         uprintf(\"Could not download the file - cancelling\");",
          "1693:        }",
          "1694:       }",
          "1695:      }",
          "",
          "[Removed Lines]",
          "1692:         return FALSE;",
          "",
          "[Added Lines]",
          "1703:         goto out;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1712:    r = MessageBoxExU(hMainDialog, lmprintf(MSG_104, \"Syslinux v5.0\", tmp, \"Syslinux v5+\", tmp),",
          "1713:     lmprintf(MSG_103, tmp), MB_YESNOCANCEL|MB_ICONWARNING|MB_IS_RTL, selected_langid);",
          "1714:    if (r == IDCANCEL)",
          "1716:    if (r == IDYES) {",
          "1717:     static_sprintf(tmp, \"%s-%s\", syslinux, embedded_sl_version_str[1]);",
          "1718:     IGNORE_RETVAL(_mkdir(tmp));",
          "1719:     static_sprintf(tmp, \"%s/%s-%s/%s.%s\", FILES_URL, syslinux, embedded_sl_version_str[1], ldlinux, ldlinux_ext[2]);",
          "1720:     if (DownloadSignedFile(tmp, &tmp[sizeof(FILES_URL)], hMainDialog, TRUE) == 0)",
          "1722:    }",
          "1723:   }",
          "1724:  } else if (bt == BT_MSDOS) {",
          "1725:   if ((size_check) && (ComboBox_GetItemData(hClusterSize, ComboBox_GetCurSel(hClusterSize)) >= 65536)) {",
          "1727:    MessageBoxExU(hMainDialog, lmprintf(MSG_110), lmprintf(MSG_111), MB_OK|MB_ICONERROR|MB_IS_RTL, selected_langid);",
          "1729:   }",
          "1730:  } else if (bt == BT_GRUB4DOS) {",
          "1731:   IGNORE_RETVAL(_chdirU(app_dir));",
          "",
          "[Removed Lines]",
          "1715:     return FALSE;",
          "1721:      return FALSE;",
          "1728:    return FALSE;",
          "",
          "[Added Lines]",
          "1726:     goto out;",
          "1732:      goto out;",
          "1739:    goto out;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1742:    r = MessageBoxExU(hMainDialog, lmprintf(MSG_104, \"Grub4DOS 0.4\", tmp, \"Grub4DOS\", tmp),",
          "1743:     lmprintf(MSG_103, tmp), MB_YESNOCANCEL|MB_ICONWARNING|MB_IS_RTL, selected_langid);",
          "1744:    if (r == IDCANCEL)",
          "1746:    if (r == IDYES) {",
          "1747:     static_sprintf(tmp, \"grub4dos-%s\", GRUB4DOS_VERSION);",
          "1748:     IGNORE_RETVAL(_mkdir(tmp));",
          "1749:     static_sprintf(tmp, \"%s/grub4dos-%s/grldr\", FILES_URL, GRUB4DOS_VERSION);",
          "1750:     if (DownloadSignedFile(tmp, &tmp[sizeof(FILES_URL)], hMainDialog, TRUE) == 0)",
          "1752:    }",
          "1753:   }",
          "1754:  }",
          "",
          "[Removed Lines]",
          "1745:     return FALSE;",
          "1751:      return FALSE;",
          "",
          "[Added Lines]",
          "1756:     goto out;",
          "1762:      goto out;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1758:   fs = (int)ComboBox_GetItemData(hFileSystem, ComboBox_GetCurSel(hFileSystem));",
          "1759:   if (fs != FS_NTFS) {",
          "1760:    MessageBoxExU(hMainDialog, lmprintf(MSG_097, \"UEFI:NTFS\"), lmprintf(MSG_092), MB_OK|MB_ICONERROR|MB_IS_RTL, selected_langid);",
          "1762:   }",
          "1763:  }",
          "1765: }",
          "1767: static __inline const char* IsAlphaOrBeta(void)",
          "",
          "[Removed Lines]",
          "1761:    return FALSE;",
          "1764:  return TRUE;",
          "",
          "[Added Lines]",
          "1772:    goto out;",
          "1775:  ret = 0;",
          "1777: out:",
          "1778:  PostMessage(hMainDialog, UM_FORMAT_START, ret, 0);",
          "1779:  return (DWORD)ret;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3254:    SetTaskbarProgressValue(0, MAX_PROGRESS);",
          "3255:    SendMessage(hProgress, PBM_SETPOS, 0, 0);",
          "3256:    selection_default = (int)ComboBox_GetItemData(hBootType, ComboBox_GetCurSel(hBootType));",
          "3327:    }",
          "3337:    break;",
          "3338:   case IDC_LANG:",
          "",
          "[Removed Lines]",
          "3257:    nDeviceIndex = ComboBox_GetCurSel(hDeviceList);",
          "3258:    if (nDeviceIndex != CB_ERR) {",
          "3259:     if (!zero_drive) {",
          "3260:      if ((bt != BT_NON_BOOTABLE) && (!BootCheck()))",
          "3261:       goto aborted_start;",
          "3264:      if (fs == FS_UDF) {",
          "3265:       dur_secs = (uint32_t)(((double)SelectedDrive.DiskSize) / 1073741824.0f / UDF_FORMAT_SPEED);",
          "3266:       if (dur_secs > UDF_FORMAT_WARN) {",
          "3267:        dur_mins = dur_secs / 60;",
          "3268:        dur_secs -= dur_mins * 60;",
          "3269:        MessageBoxExU(hMainDialog, lmprintf(MSG_112, dur_mins, dur_secs), lmprintf(MSG_113),",
          "3270:         MB_OK | MB_ICONASTERISK | MB_IS_RTL, selected_langid);",
          "3271:       } else {",
          "3272:        dur_secs = 0;",
          "3273:        dur_mins = 0;",
          "3274:       }",
          "3275:      }",
          "3277:      if ((bt == BT_IMAGE) && IS_DD_BOOTABLE(img_report)) {",
          "3278:       if (img_report.is_iso) {",
          "3280:        char* iso_image = lmprintf(MSG_036);",
          "3281:        char* dd_image = lmprintf(MSG_095);",
          "3282:        char* choices[2] = { lmprintf(MSG_276, iso_image), lmprintf(MSG_277, dd_image) };",
          "3283:        i = SelectionDialog(lmprintf(MSG_274), lmprintf(MSG_275, iso_image, dd_image, iso_image, dd_image),",
          "3284:         choices, 2);",
          "3285:        if (i < 0) // Cancel",
          "3286:         goto aborted_start;",
          "3287:        else if (i == 2)",
          "3288:         write_as_image = TRUE;",
          "3289:       } else {",
          "3290:        write_as_image = TRUE;",
          "3291:       }",
          "3292:      }",
          "3293:     }",
          "3295:     if (!CheckDriveAccess(2000))",
          "3296:      goto aborted_start;",
          "3298:     GetWindowTextU(hDeviceList, tmp, ARRAYSIZE(tmp));",
          "3299:     if (MessageBoxExU(hMainDialog, lmprintf(MSG_003, tmp),",
          "3300:      APPLICATION_NAME, MB_OKCANCEL|MB_ICONWARNING|MB_IS_RTL, selected_langid) == IDCANCEL)",
          "3301:      goto aborted_start;",
          "3302:     if ((SelectedDrive.nPartitions > 1) && (MessageBoxExU(hMainDialog, lmprintf(MSG_093),",
          "3303:      lmprintf(MSG_094), MB_OKCANCEL|MB_ICONWARNING|MB_IS_RTL, selected_langid) == IDCANCEL))",
          "3304:      goto aborted_start;",
          "3305:     if ((!zero_drive) && (bt != BT_NON_BOOTABLE) && (SelectedDrive.SectorSize != 512) &&",
          "3306:      (MessageBoxExU(hMainDialog, lmprintf(MSG_196, SelectedDrive.SectorSize),",
          "3307:       lmprintf(MSG_197), MB_OKCANCEL|MB_ICONWARNING|MB_IS_RTL, selected_langid) == IDCANCEL))",
          "3308:      goto aborted_start;",
          "3310:     DeviceNum = (DWORD)ComboBox_GetItemData(hDeviceList, nDeviceIndex);",
          "3311:     InitProgress(zero_drive || write_as_image);",
          "3312:     format_thid = CreateThread(NULL, 0, FormatThread, (LPVOID)(uintptr_t)DeviceNum, 0, NULL);",
          "3313:     if (format_thid == NULL) {",
          "3314:      uprintf(\"Unable to start formatting thread\");",
          "3315:      FormatStatus = ERROR_SEVERITY_ERROR|FAC(FACILITY_STORAGE)|APPERR(ERROR_CANT_START_THREAD);",
          "3316:      PostMessage(hMainDialog, UM_FORMAT_COMPLETED, (WPARAM)FALSE, 0);",
          "3317:     } else {",
          "3318:      uprintf(\"\\r\\nFormat operation started\");",
          "3319:      PrintInfo(0, -1);",
          "3320:      timer = 0;",
          "3321:      static_sprintf(szTimer, \"00:00:00\");",
          "3322:      SendMessageA(hStatus, SB_SETTEXTA, SBT_OWNERDRAW | SB_SECTION_RIGHT, (LPARAM)szTimer);",
          "3323:      SetTimer(hMainDialog, TID_APP_TIMER, 1000, ClockTimer);",
          "3325:      SendMessage(hMainDialog, WM_NEXTDLGCTL, (WPARAM)GetDlgItem(hMainDialog, IDCANCEL), TRUE);",
          "3326:     }",
          "3328:    if (format_thid != NULL)",
          "3329:     break;",
          "3330:   aborted_start:",
          "3331:    format_op_in_progress = FALSE;",
          "3332:    EnableControls(TRUE);",
          "3333:    zero_drive = FALSE;",
          "3334:    if (queued_hotplug_event)",
          "3335:     SendMessage(hDlg, UM_MEDIA_CHANGE, 0, 0);",
          "3336:    EnableWindow(GetDlgItem(hDlg, IDCANCEL), TRUE);",
          "",
          "[Added Lines]",
          "3274:    if (CreateThread(NULL, 0, BootCheckThread, NULL, 0, NULL) == NULL) {",
          "3275:     uprintf(\"Unable to start boot check thread\");",
          "3276:     FormatStatus = ERROR_SEVERITY_ERROR | FAC(FACILITY_STORAGE) | APPERR(ERROR_CANT_START_THREAD);",
          "3277:     PostMessage(hMainDialog, UM_FORMAT_COMPLETED, (WPARAM)FALSE, 0);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3610:   SendMessage(hUpdatesDlg, WM_NEXTDLGCTL, (WPARAM)GetDlgItem(hUpdatesDlg, IDC_CHECK_NOW), TRUE);",
          "3611:   break;",
          "3613:  case UM_FORMAT_COMPLETED:",
          "3614:   format_thid = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3555:  case UM_FORMAT_START:",
          "3556:   if (wParam != 0)",
          "3557:    goto aborted_start;",
          "3559:   if (!zero_drive) {",
          "3561:    if (fs == FS_UDF) {",
          "3562:     dur_secs = (uint32_t)(((double)SelectedDrive.DiskSize) / 1073741824.0f / UDF_FORMAT_SPEED);",
          "3563:     if (dur_secs > UDF_FORMAT_WARN) {",
          "3564:      dur_mins = dur_secs / 60;",
          "3565:      dur_secs -= dur_mins * 60;",
          "3566:      MessageBoxExU(hMainDialog, lmprintf(MSG_112, dur_mins, dur_secs), lmprintf(MSG_113),",
          "3567:       MB_OK | MB_ICONASTERISK | MB_IS_RTL, selected_langid);",
          "3568:     } else {",
          "3569:      dur_secs = 0;",
          "3570:      dur_mins = 0;",
          "3571:     }",
          "3572:    }",
          "3574:    if ((bt == BT_IMAGE) && IS_DD_BOOTABLE(img_report)) {",
          "3575:     if (img_report.is_iso) {",
          "3577:      char* iso_image = lmprintf(MSG_036);",
          "3578:      char* dd_image = lmprintf(MSG_095);",
          "3579:      char* choices[2] = { lmprintf(MSG_276, iso_image), lmprintf(MSG_277, dd_image) };",
          "3580:      i = SelectionDialog(lmprintf(MSG_274), lmprintf(MSG_275, iso_image, dd_image, iso_image, dd_image),",
          "3581:       choices, 2);",
          "3582:      if (i < 0) // Cancel",
          "3583:       goto aborted_start;",
          "3584:      else if (i == 2)",
          "3585:       write_as_image = TRUE;",
          "3586:     } else {",
          "3587:      write_as_image = TRUE;",
          "3588:     }",
          "3589:    }",
          "3590:   }",
          "3592:   if (!CheckDriveAccess(2000))",
          "3593:    goto aborted_start;",
          "3595:   GetWindowTextU(hDeviceList, tmp, ARRAYSIZE(tmp));",
          "3596:   if (MessageBoxExU(hMainDialog, lmprintf(MSG_003, tmp),",
          "3597:    APPLICATION_NAME, MB_OKCANCEL | MB_ICONWARNING | MB_IS_RTL, selected_langid) == IDCANCEL)",
          "3598:    goto aborted_start;",
          "3599:   if ((SelectedDrive.nPartitions > 1) && (MessageBoxExU(hMainDialog, lmprintf(MSG_093),",
          "3600:    lmprintf(MSG_094), MB_OKCANCEL | MB_ICONWARNING | MB_IS_RTL, selected_langid) == IDCANCEL))",
          "3601:    goto aborted_start;",
          "3602:   if ((!zero_drive) && (bt != BT_NON_BOOTABLE) && (SelectedDrive.SectorSize != 512) &&",
          "3603:    (MessageBoxExU(hMainDialog, lmprintf(MSG_196, SelectedDrive.SectorSize),",
          "3604:     lmprintf(MSG_197), MB_OKCANCEL | MB_ICONWARNING | MB_IS_RTL, selected_langid) == IDCANCEL))",
          "3605:    goto aborted_start;",
          "3607:   nDeviceIndex = ComboBox_GetCurSel(hDeviceList);",
          "3608:   DeviceNum = (DWORD)ComboBox_GetItemData(hDeviceList, nDeviceIndex);",
          "3609:   InitProgress(zero_drive || write_as_image);",
          "3610:   format_thid = CreateThread(NULL, 0, FormatThread, (LPVOID)(uintptr_t)DeviceNum, 0, NULL);",
          "3611:   if (format_thid == NULL) {",
          "3612:    uprintf(\"Unable to start formatting thread\");",
          "3613:    FormatStatus = ERROR_SEVERITY_ERROR | FAC(FACILITY_STORAGE) | APPERR(ERROR_CANT_START_THREAD);",
          "3614:    PostMessage(hMainDialog, UM_FORMAT_COMPLETED, (WPARAM)FALSE, 0);",
          "3615:   } else {",
          "3616:    uprintf(\"\\r\\nFormat operation started\");",
          "3617:    PrintInfo(0, -1);",
          "3618:    timer = 0;",
          "3619:    static_sprintf(szTimer, \"00:00:00\");",
          "3620:    SendMessageA(hStatus, SB_SETTEXTA, SBT_OWNERDRAW | SB_SECTION_RIGHT, (LPARAM)szTimer);",
          "3621:    SetTimer(hMainDialog, TID_APP_TIMER, 1000, ClockTimer);",
          "3623:    SendMessage(hMainDialog, WM_NEXTDLGCTL, (WPARAM)GetDlgItem(hMainDialog, IDCANCEL), TRUE);",
          "3624:   }",
          "3625:   if (format_thid != NULL)",
          "3626:    break;",
          "3627:  aborted_start:",
          "3628:   format_op_in_progress = FALSE;",
          "3629:   EnableControls(TRUE);",
          "3630:   zero_drive = FALSE;",
          "3631:   if (queued_hotplug_event)",
          "3632:    SendMessage(hDlg, UM_MEDIA_CHANGE, 0, 0);",
          "3633:   EnableWindow(GetDlgItem(hDlg, IDCANCEL), TRUE);",
          "3634:   break;",
          "",
          "---------------"
        ],
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "163:  UM_NO_UPDATE,",
          "164:  UM_UPDATE_CSM_TOOLTIP,",
          "165:  UM_RESIZE_BUTTONS,",
          "167:  UM_LANGUAGE_MENU = WM_APP + 0x100",
          "168: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "166:  UM_FORMAT_START,",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 232, 326",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 9, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Drive Properties\",IDS_DRIVE_PROPERTIES_TXT,8,6,53,12,NOT WS_GROUP",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 3.2.1326\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 3.2.1327\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "391: VS_VERSION_INFO VERSIONINFO",
          "394:  FILEFLAGSMASK 0x3fL",
          "395: #ifdef _DEBUG",
          "396:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "392:  FILEVERSION 3,2,1326,0",
          "393:  PRODUCTVERSION 3,2,1326,0",
          "",
          "[Added Lines]",
          "392:  FILEVERSION 3,2,1327,0",
          "393:  PRODUCTVERSION 3,2,1327,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "407:         BEGIN",
          "408:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "409:             VALUE \"FileDescription\", \"Rufus\"",
          "411:             VALUE \"InternalName\", \"Rufus\"",
          "412:             VALUE \"LegalCopyright\", \"\ufffd 2011-2018 Pete Batard (GPL v3)\"",
          "413:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "414:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "415:             VALUE \"ProductName\", \"Rufus\"",
          "417:         END",
          "418:     END",
          "419:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "410:             VALUE \"FileVersion\", \"3.2.1326\"",
          "416:             VALUE \"ProductVersion\", \"3.2.1326\"",
          "",
          "[Added Lines]",
          "410:             VALUE \"FileVersion\", \"3.2.1327\"",
          "416:             VALUE \"ProductVersion\", \"3.2.1327\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8cd59d7e6dfb3d1cc06f8a99d100eabaf2d75fe9",
      "candidate_info": {
        "commit_hash": "8cd59d7e6dfb3d1cc06f8a99d100eabaf2d75fe9",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/8cd59d7e6dfb3d1cc06f8a99d100eabaf2d75fe9",
        "files": [
          "res/localization/rufus.loc",
          "src/rufus.rc"
        ],
        "message": "[loc] fix missing messages for Portuguese and Russian translation",
        "before_after_code_files": [
          "res/localization/rufus.loc||res/localization/rufus.loc",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "res/localization/rufus.loc||res/localization/rufus.loc": [
          "File: res/localization/rufus.loc -> res/localization/rufus.loc",
          "--- Hunk 1 ---",
          "[Context before]",
          "12592:  \"Selecione o modo que realmente pretende para escrever esta imagem:\"",
          "12593: t MSG_276 \"Escrever no modo %s (Recomendado)\"",
          "12594: t MSG_277 \"Escrever no modo %s\"",
          "12595: t MSG_279 \"N\u00e3o inicializ\u00e1vel\"",
          "12596: t MSG_280 \"Disco ou imagem ISO\"",
          "12597: t MSG_281 \"%s (Por favor, selecione)\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12595: t MSG_278 \"A verificar processos em conflito...\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12616:  \"da Internet, deve tentar transferir uma nova c\u00f3pia e verificar se os checksums MD5 ou SHA correspondem aos oficiais.\\n\\n\"",
          "12617:  \"Rufus que pode calcular o MD5 ou SHA se clicar no bot\u00e3o (\u2713).\"",
          "12618: t MSG_299 \"Erro de valida\u00e7\u00e3o de data/hora\"",
          "12622: t MSG_301 \"Mostrar configura\u00e7\u00f5es da aplica\u00e7\u00e3o\"",
          "12623: t MSG_302 \"Mostrar informa\u00e7\u00f5es acerca da aplica\u00e7\u00e3o\"",
          "12624: t MSG_303 \"Mostrar registo de eventos\"",
          "",
          "[Removed Lines]",
          "12619: t MSG_300 \"Rufus could not validate that the timestamp of the downloaded update is more recent than the one for the \"",
          "12620:  \"current executable.\\n\\nIn order to prevent potential attack scenarios, the update process has been aborted and \"",
          "12621:  \"the download will be deleted. Please check the log for more details.\"",
          "",
          "[Added Lines]",
          "12620: t MSG_300 \"N\u00e3o foi poss\u00edvel ao Rufus confirmar que a data e hora da atualiza\u00e7\u00e3o transferida \u00e9 mais recente que a do \"",
          "12621:  \"execut\u00e1vel atual.\\n\\nPara evitar poss\u00edveis cen\u00e1rios de ataque inform\u00e1tico, o processo de atualiza\u00e7\u00e3o foi cancelado e \"",
          "12622:  \"o ficheiro transferido ser\u00e1 apagado. Por favor, verifique o registo para mais detalhes.\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "13423: t MSG_256 \"\u041e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d \u0444\u0430\u043b\u044c\u0448\u0438\u0432\u044b\u0439 \u0434\u0438\u0441\u043a\"",
          "13424: t MSG_257 \"Joliet \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430\"",
          "13425: t MSG_258 \"Rock Ridge \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430\"",
          "13426: t MSG_260 \"NTFS-\u043a\u043e\u043c\u043f\u0440\u0435\u0441\u0441\u0438\u044f\"",
          "13427: t MSG_261 \"\u0417\u0430\u043f\u0438\u0441\u044c \u043e\u0431\u0440\u0430\u0437\u0430: %0.1f%% \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e\"",
          "13428: t MSG_262 \"\u041e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 ISO\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13427: t MSG_259 \"\u041f\u0440\u0438\u043d\u0443\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435\"",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 232, 326",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 9, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Drive Properties\",IDS_DRIVE_PROPERTIES_TXT,8,6,53,12,NOT WS_GROUP",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 3.0.1265\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 3.0.1266\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "391: VS_VERSION_INFO VERSIONINFO",
          "394:  FILEFLAGSMASK 0x3fL",
          "395: #ifdef _DEBUG",
          "396:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "392:  FILEVERSION 3,0,1265,0",
          "393:  PRODUCTVERSION 3,0,1265,0",
          "",
          "[Added Lines]",
          "392:  FILEVERSION 3,0,1266,0",
          "393:  PRODUCTVERSION 3,0,1266,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "407:         BEGIN",
          "408:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "409:             VALUE \"FileDescription\", \"Rufus\"",
          "411:             VALUE \"InternalName\", \"Rufus\"",
          "412:             VALUE \"LegalCopyright\", \"\ufffd 2011-2018 Pete Batard (GPL v3)\"",
          "413:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "414:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "415:             VALUE \"ProductName\", \"Rufus\"",
          "417:         END",
          "418:     END",
          "419:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "410:             VALUE \"FileVersion\", \"3.0.1265\"",
          "416:             VALUE \"ProductVersion\", \"3.0.1265\"",
          "",
          "[Added Lines]",
          "410:             VALUE \"FileVersion\", \"3.0.1266\"",
          "416:             VALUE \"ProductVersion\", \"3.0.1266\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bed889718e2a17b10ca6fac89d33b2699d5faa93",
      "candidate_info": {
        "commit_hash": "bed889718e2a17b10ca6fac89d33b2699d5faa93",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/bed889718e2a17b10ca6fac89d33b2699d5faa93",
        "files": [
          "configure",
          "configure.ac",
          "res/appstore/AppxManifest.xml",
          "res/appstore/packme.cmd",
          "src/drive.c",
          "src/process.c",
          "src/rufus.h",
          "src/rufus.rc"
        ],
        "message": "[core] attempt to continue if the only conflicting handles we found are for read-only\n\n* Also clean-up the process code and update for rufus-next",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "res/appstore/packme.cmd||res/appstore/packme.cmd",
          "src/drive.c||src/drive.c",
          "src/process.c||src/process.c",
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: AM_INIT_AUTOMAKE([-Wno-portability foreign no-dist no-dependencies])",
          "3: AC_CONFIG_SRCDIR([src/rufus.c])",
          "4: AC_CONFIG_MACRO_DIR([m4])",
          "",
          "[Removed Lines]",
          "1: AC_INIT([rufus], [2.15], [https://github.com/pbatard/rufus/issues], [rufus], [https://rufus.akeo.ie])",
          "",
          "[Added Lines]",
          "1: AC_INIT([rufus], [2.16], [https://github.com/pbatard/rufus/issues], [rufus], [https://rufus.akeo.ie])",
          "",
          "---------------"
        ],
        "res/appstore/packme.cmd||res/appstore/packme.cmd": [
          "File: res/appstore/packme.cmd -> res/appstore/packme.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: @echo off",
          "4: rem Make sure you don't have anything you don't want included in the package, as anything residing in the",
          "5: rem current directory will be included, including any previous .appx, which makes for nice recursion...",
          "",
          "[Removed Lines]",
          "2: set VERSION=2.15",
          "",
          "[Added Lines]",
          "2: set VERSION=2.16",
          "",
          "---------------"
        ],
        "src/drive.c||src/drive.c": [
          "File: src/drive.c -> src/drive.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120: static HANDLE GetHandle(char* Path, BOOL bLockDrive, BOOL bWriteAccess, BOOL bWriteShare)",
          "121: {",
          "122:  int i;",
          "124:  DWORD size, EndTime;",
          "125:  HANDLE hDrive = INVALID_HANDLE_VALUE;",
          "126:  char DevPath[MAX_PATH];",
          "",
          "[Removed Lines]",
          "123:  BOOL bSearchProcess = FALSE;",
          "",
          "[Added Lines]",
          "123:  BYTE access_mask = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:    uprintf(\"Warning: Could not obtain exclusive rights. Retrying with write sharing enabled...\");",
          "153:    bWriteShare = TRUE;",
          "157:   }",
          "158:   Sleep(DRIVE_ACCESS_TIMEOUT / DRIVE_ACCESS_RETRIES);",
          "159:  }",
          "",
          "[Removed Lines]",
          "155:    SearchProcess(DevPath, TRUE, TRUE);",
          "156:    bSearchProcess = TRUE;",
          "",
          "[Added Lines]",
          "156:    access_mask = SearchProcess(DevPath, TRUE, TRUE, FALSE) | 0x40;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "182:   } while (GetTickCount() < EndTime);",
          "184:   uprintf(\"Could not lock access to %s: %s\", Path, WindowsErrorString());",
          "189:  }",
          "191: out:",
          "",
          "[Removed Lines]",
          "186:   if (!IS_ERROR(FormatStatus) && !bSearchProcess)",
          "187:    SearchProcess(DevPath, TRUE, TRUE);",
          "188:   safe_closehandle(hDrive);",
          "",
          "[Added Lines]",
          "186:   if (!IS_ERROR(FormatStatus) && (access_mask == 0))",
          "187:    access_mask = SearchProcess(DevPath, TRUE, TRUE, FALSE);",
          "189:   if ((access_mask & 0x07) != 0x01)",
          "190:    safe_closehandle(hDrive);",
          "",
          "---------------"
        ],
        "src/process.c||src/process.c": [
          "File: src/process.c -> src/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include \"missing.h\"",
          "35: #include \"msapi_utf8.h\"",
          "41: PF_TYPE_DECL(NTAPI, PVOID, RtlCreateHeap, (ULONG, PVOID, SIZE_T, SIZE_T, PVOID, PRTL_HEAP_PARAMETERS));",
          "42: PF_TYPE_DECL(NTAPI, PVOID, RtlDestroyHeap, (PVOID));",
          "43: PF_TYPE_DECL(NTAPI, PVOID, RtlAllocateHeap, (PVOID, ULONG, SIZE_T));",
          "44: PF_TYPE_DECL(NTAPI, BOOLEAN, RtlFreeHeap, (PVOID, ULONG, PVOID));",
          "50: PF_TYPE_DECL(NTAPI, NTSTATUS, NtQuerySystemInformation, (SYSTEM_INFORMATION_CLASS, PVOID, ULONG, PULONG));",
          "51: PF_TYPE_DECL(NTAPI, NTSTATUS, NtQueryInformationFile, (HANDLE, PIO_STATUS_BLOCK, PVOID, ULONG, FILE_INFORMATION_CLASS));",
          "",
          "[Removed Lines]",
          "45: #ifdef USE_OBJECT_TYPES",
          "46: PF_TYPE_DECL(NTAPI, VOID, RtlInitUnicodeString, (PUNICODE_STRING, PCWSTR));",
          "47: PF_TYPE_DECL(NTAPI, BOOLEAN, RtlEqualUnicodeString, (PCUNICODE_STRING, PCUNICODE_STRING, BOOLEAN));",
          "48: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264:  return status;",
          "265: }",
          "",
          "[Removed Lines]",
          "267: #ifdef USE_OBJECT_TYPES",
          "268: NTSTATUS PhEnumObjectTypes(POBJECT_TYPES_INFORMATION *ObjectTypes)",
          "269: {",
          "270:  NTSTATUS status = STATUS_SUCCESS;",
          "271:  PVOID buffer;",
          "272:  ULONG bufferSize;",
          "273:  ULONG returnLength;",
          "275:  PF_INIT_OR_SET_STATUS(NtQueryObject, Ntdll);",
          "276:  if (!NT_SUCCESS(status))",
          "277:   return status;",
          "279:  bufferSize = 0x1000;",
          "280:  buffer = PhAllocate(bufferSize);",
          "282:  while ((status = pfNtQueryObject(NULL, ObjectTypesInformation, buffer, bufferSize, &returnLength)) == STATUS_INFO_LENGTH_MISMATCH) {",
          "283:   PhFree(buffer);",
          "284:   bufferSize *= 2;",
          "287:   if (bufferSize > PH_LARGE_BUFFER_SIZE)",
          "288:    return STATUS_INSUFFICIENT_RESOURCES;",
          "290:   buffer = PhAllocate(bufferSize);",
          "291:  }",
          "293:  if (!NT_SUCCESS(status)) {",
          "294:   PhFree(buffer);",
          "295:   return status;",
          "296:  }",
          "300:  return status;",
          "301: }",
          "303: ULONG PhGetObjectTypeNumber(PUNICODE_STRING TypeName)",
          "304: {",
          "305:  NTSTATUS status = STATUS_SUCCESS;",
          "306:  POBJECT_TYPES_INFORMATION objectTypes;",
          "307:  POBJECT_TYPE_INFORMATION objectType;",
          "308:  ULONG objectIndex = -1;",
          "309:  ULONG i;",
          "311:  PF_INIT_OR_SET_STATUS(RtlEqualUnicodeString, NtDll);",
          "312:  if (!NT_SUCCESS(status))",
          "313:   return -1;",
          "315:  status = PhEnumObjectTypes(&objectTypes);",
          "316:  if (NT_SUCCESS(status)) {",
          "317:   objectType = PH_FIRST_OBJECT_TYPE(objectTypes);",
          "319:   for (i = 0; i < objectTypes->NumberOfTypes; i++) {",
          "320:    if (pfRtlEqualUnicodeString(&objectType->TypeName, TypeName, TRUE)) {",
          "321:     if (nWindowsVersion >= WINDOWS_8_1) {",
          "322:      objectIndex = objectType->TypeIndex;",
          "323:      break;",
          "324:     } else if (nWindowsVersion >= WINDOWS_7) {",
          "325:      objectIndex = i + 2;",
          "326:      break;",
          "327:     } else {",
          "328:      objectIndex = i + 1;",
          "329:      break;",
          "330:     }",
          "331:    }",
          "333:    objectType = PH_NEXT_OBJECT_TYPE(objectType);",
          "334:   }",
          "336:   PhFree(objectTypes);",
          "337:  }",
          "339:  return objectIndex;",
          "340: }",
          "341: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "401: {",
          "402:  const char *access_rights_str[8] = { \"n\", \"r\", \"w\", \"rw\", \"x\", \"rx\", \"wx\", \"rwx\" };",
          "403:  char tmp[MAX_PATH];",
          "404:  NTSTATUS status = STATUS_SUCCESS;",
          "405:  PSYSTEM_HANDLE_INFORMATION_EX handles = NULL;",
          "406:  POBJECT_NAME_INFORMATION buffer = NULL;",
          "411:  ULONG_PTR i;",
          "412:  ULONG_PTR pid[2];",
          "413:  ULONG_PTR last_access_denied_pid = 0;",
          "",
          "[Removed Lines]",
          "400: BOOL SearchProcess(char* HandleName, BOOL bPartialMatch, BOOL bIgnoreSelf)",
          "407: #ifdef USE_OBJECT_TYPES",
          "408:  UNICODE_STRING fileTypeName;",
          "409:  ULONG fileObjectTypeIndex = -1;",
          "410: #endif",
          "",
          "[Added Lines]",
          "318: BYTE SearchProcess(char* HandleName, BOOL bPartialMatch, BOOL bIgnoreSelf, BOOL bQuiet)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "416:  WCHAR *wHandleName = NULL;",
          "417:  HANDLE dupHandle = NULL;",
          "418:  HANDLE processHandle = NULL;",
          "420:  ULONG access_rights = 0;",
          "421:  char exe_path[MAX_PATH] = { 0 };",
          "422:  int cur_pid;",
          "424:  PF_INIT_OR_SET_STATUS(NtQueryObject, Ntdll);",
          "425:  PF_INIT_OR_SET_STATUS(NtDuplicateObject, NtDll);",
          "426:  PF_INIT_OR_SET_STATUS(NtClose, NtDll);",
          "431:  StrArrayClear(&BlockingProcess);",
          "",
          "[Removed Lines]",
          "419:  BOOLEAN bFound = FALSE;",
          "427: #ifdef USE_OBJECT_TYPES",
          "428:  PF_INIT_OR_SET_STATUS(RtlInitUnicodeString, NtDll);",
          "429: #endif",
          "",
          "[Added Lines]",
          "333:  BOOLEAN bFound = FALSE, verbose = !bQuiet;",
          "335:  BYTE access_mask = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "452:  if (buffer == NULL)",
          "453:   goto out;",
          "462:  for (i = 0; ; i++) {",
          "463:   ULONG attempts = 8;",
          "464:   PSYSTEM_HANDLE_TABLE_ENTRY_INFO_EX handleInfo =",
          "",
          "[Removed Lines]",
          "455: #ifdef USE_OBJECT_TYPES",
          "456:  pfRtlInitUnicodeString(&fileTypeName, L\"File\");",
          "457:  fileObjectTypeIndex = PhGetObjectTypeNumber(&fileTypeName);",
          "458:  if (fileObjectTypeIndex < 0)",
          "459:   uprintf(\"Warning: Could not get Object Index for file types\");",
          "460: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "469:    dupHandle = NULL;",
          "470:   }",
          "481:   pid[cur_pid] = (handleInfo != NULL) ? handleInfo->UniqueProcessId : -1;",
          "",
          "[Removed Lines]",
          "472: #ifdef USE_OBJECT_TYPES",
          "474:   if ((fileObjectTypeIndex >= 0 ) && (handleInfo != NULL) &&",
          "475:    (handleInfo->ObjectTypeIndex != (USHORT)fileObjectTypeIndex))",
          "476:    continue;",
          "477: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "487:    if (bFound) {",
          "489:     static_sprintf(tmp, \"\u25cf %s (pid %ld)\", exe_path, pid[cur_pid]);",
          "490:     StrArrayAdd(&BlockingProcess, tmp, TRUE);",
          "491:     bFound = FALSE;",
          "",
          "[Removed Lines]",
          "488:     uprintf(\"\u25cf '%s' (pid: %ld, access: %s)\", exe_path, pid[cur_pid], access_rights_str[access_rights & 0x7]);",
          "",
          "[Added Lines]",
          "386:     vuprintf(\"\u25cf '%s' (pid: %ld, access: %s)\", exe_path, pid[cur_pid], access_rights_str[access_rights & 0x7]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "586:   access_rights |= handleInfo->GrantedAccess;",
          "588:   if (access_rights & 0x20)",
          "592:   if (exe_path[0] == 0)",
          "595:   if (!GetModuleFileNameExU(processHandle, 0, exe_path, MAX_PATH - 1))",
          "596:    safe_sprintf(exe_path, MAX_PATH, \"Unknown_Process_%\" PRIu64,",
          "",
          "[Removed Lines]",
          "589:    access_rights = (access_rights & 0x3) | 0x4;",
          "593:    uprintf(\"WARNING: The following process(es) or service(s) are accessing %s:\", HandleName);",
          "",
          "[Added Lines]",
          "487:    access_rights = (access_rights & 0x03) | 0x04;",
          "488:   access_mask |= (BYTE) (access_rights & 0x7) + 0x80; // Bit 7 is always set if a process was found",
          "492:    vuprintf(\"WARNING: The following process(es) or service(s) are accessing %s:\", HandleName);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "600: out:",
          "601:  if (exe_path[0] != 0)",
          "603:  else",
          "606:  free(wHandleName);",
          "607:  PhFree(buffer);",
          "608:  PhFree(handles);",
          "609:  PhDestroyHeap();",
          "611: }",
          "",
          "[Removed Lines]",
          "602:   uprintf(\"You should try to close these applications before attempting to reformat the drive.\");",
          "604:   uprintf(\"NOTE: Could not identify the process(es) or service(s) accessing %s\", HandleName);",
          "610:  return bFound;",
          "",
          "[Added Lines]",
          "501:   vuprintf(\"You should close these applications before attempting to reformat the drive.\");",
          "503:   vuprintf(\"NOTE: Could not identify the process(es) or service(s) accessing %s\", HandleName);",
          "509:  return access_mask;",
          "",
          "---------------"
        ],
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "495: extern char* GetCurrentMUI(void);",
          "496: extern BOOL SetFormatPromptHook(void);",
          "497: extern void ClrFormatPromptHook(void);",
          "499: extern BOOL EnablePrivileges(void);",
          "500: extern void FlashTaskbar(HANDLE handle);",
          "",
          "[Removed Lines]",
          "498: extern BOOL SearchProcess(char* HandleName, BOOL bPartialMatch, BOOL bIgnoreSelf);",
          "",
          "[Added Lines]",
          "498: extern BYTE SearchProcess(char* HandleName, BOOL bPartialMatch, BOOL bIgnoreSelf, BOOL bQuiet);",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.15.1125\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.16.1126\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368: VS_VERSION_INFO VERSIONINFO",
          "371:  FILEFLAGSMASK 0x3fL",
          "372: #ifdef _DEBUG",
          "373:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "369:  FILEVERSION 2,15,1125,0",
          "370:  PRODUCTVERSION 2,15,1125,0",
          "",
          "[Added Lines]",
          "369:  FILEVERSION 2,16,1126,0",
          "370:  PRODUCTVERSION 2,16,1126,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:         BEGIN",
          "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "386:             VALUE \"FileDescription\", \"Rufus\"",
          "388:             VALUE \"InternalName\", \"Rufus\"",
          "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "392:             VALUE \"ProductName\", \"Rufus\"",
          "394:         END",
          "395:     END",
          "396:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "387:             VALUE \"FileVersion\", \"2.15.1125\"",
          "393:             VALUE \"ProductVersion\", \"2.15.1125\"",
          "",
          "[Added Lines]",
          "387:             VALUE \"FileVersion\", \"2.16.1126\"",
          "393:             VALUE \"ProductVersion\", \"2.16.1126\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}