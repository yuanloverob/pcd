{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "300596526647adc9da8db2615b3e70258de9e1bd",
      "candidate_info": {
        "commit_hash": "300596526647adc9da8db2615b3e70258de9e1bd",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/300596526647adc9da8db2615b3e70258de9e1bd",
        "files": [
          "src/node_stat_watcher.cc"
        ],
        "message": "stat_watcher: root JS objects in HandleScope with Local<>",
        "before_after_code_files": [
          "src/node_stat_watcher.cc||src/node_stat_watcher.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_stat_watcher.cc||src/node_stat_watcher.cc": [
          "File: src/node_stat_watcher.cc -> src/node_stat_watcher.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   StatWatcher *handler = static_cast<StatWatcher*>(watcher->data);",
          "52:   assert(watcher == &handler->watcher_);",
          "53:   HandleScope scope;",
          "57:   MakeCallback(handler->handle_, \"onchange\", 2, argv);",
          "58: }",
          "",
          "[Removed Lines]",
          "54:   Handle<Value> argv[2];",
          "55:   argv[0] = Handle<Value>(BuildStatsObject(&watcher->attr));",
          "56:   argv[1] = Handle<Value>(BuildStatsObject(&watcher->prev));",
          "",
          "[Added Lines]",
          "54:   Local<Value> argv[2];",
          "55:   argv[0] = BuildStatsObject(&watcher->attr);",
          "56:   argv[1] = BuildStatsObject(&watcher->prev);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8c5ba21854cd45a1bcb898ccb9d6a574c3fd4ee",
      "candidate_info": {
        "commit_hash": "d8c5ba21854cd45a1bcb898ccb9d6a574c3fd4ee",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/d8c5ba21854cd45a1bcb898ccb9d6a574c3fd4ee",
        "files": [
          "test/fixtures/a1.js"
        ],
        "message": "Change test fixture from symlink to regular file\n\nThe only test using this is test/simple/test-fs-chmod.js, and it was\ntreating a.js and a1.js as two separate files, resulting in a race\ncondition.  (Interestingly enough, it was *not* using the symlink file to\ntest lchmod, which uses a different temp file.)",
        "before_after_code_files": [
          "test/fixtures/a1.js||test/fixtures/a1.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/fixtures/a1.js||test/fixtures/a1.js": [
          "File: test/fixtures/a1.js -> test/fixtures/a1.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var c = require('./b/c');",
          "24: console.error('load fixtures/a.js');",
          "26: var string = 'A';",
          "28: exports.SomeClass = c.SomeClass;",
          "30: exports.A = function() {",
          "31:   return string;",
          "32: };",
          "34: exports.C = function() {",
          "35:   return c.C();",
          "36: };",
          "38: exports.D = function() {",
          "39:   return c.D();",
          "40: };",
          "42: exports.number = 42;",
          "44: process.on('exit', function() {",
          "45:   string = 'A done';",
          "46: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9c5eee7d9ad8d720c6f28dc78ab288c7b0e004c",
      "candidate_info": {
        "commit_hash": "b9c5eee7d9ad8d720c6f28dc78ab288c7b0e004c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b9c5eee7d9ad8d720c6f28dc78ab288c7b0e004c",
        "files": [
          "src/node.h"
        ],
        "message": "add NODE_EXTERN to node::Start",
        "before_after_code_files": [
          "src/node.h||src/node.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.h||src/node.h": [
          "File: src/node.h -> src/node.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "86: namespace node {",
          "90: char** Init(int argc, char *argv[]);",
          "91: v8::Handle<v8::Object> SetupProcessObject(int argc, char *argv[]);",
          "",
          "[Removed Lines]",
          "88: int Start(int argc, char *argv[]);",
          "",
          "[Added Lines]",
          "88: NODE_EXTERN int Start(int argc, char *argv[]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26bfb6bea45348d6aaa213b4ee38ac002c429394",
      "candidate_info": {
        "commit_hash": "26bfb6bea45348d6aaa213b4ee38ac002c429394",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/26bfb6bea45348d6aaa213b4ee38ac002c429394",
        "files": [
          "src/node_file.cc"
        ],
        "message": "more specific fs error messages",
        "before_after_code_files": [
          "src/node_file.cc||src/node_file.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_file.cc||src/node_file.cc": [
          "File: src/node_file.cc -> src/node_file.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: using namespace v8;",
          "72: #define MIN(a,b) ((a) < (b) ? (a) : (b))",
          "76: typedef class ReqWrap<uv_fs_t> FSReqWrap;",
          "",
          "[Removed Lines]",
          "73: #define THROW_BAD_ARGS \\",
          "74:   ThrowException(Exception::TypeError(String::New(\"Bad argument\")))",
          "",
          "[Added Lines]",
          "74: #define TYPE_ERROR(msg) \\",
          "75:     ThrowException(Exception::TypeError(String::New(msg)));",
          "77: #define THROW_BAD_ARGS TYPE_ERROR(\"Bad argument\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339: static Handle<Value> Stat(const Arguments& args) {",
          "340:   HandleScope scope;",
          "346:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Removed Lines]",
          "342:   if (args.Length() < 1 || !args[0]->IsString()) {",
          "343:     return THROW_BAD_ARGS;",
          "344:   }",
          "",
          "[Added Lines]",
          "345:   if (args.Length() < 1) return TYPE_ERROR(\"path required\");",
          "346:   if (!args[0]->IsString()) return TYPE_ERROR(\"path must be a string\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "356: static Handle<Value> LStat(const Arguments& args) {",
          "357:   HandleScope scope;",
          "363:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Removed Lines]",
          "359:   if (args.Length() < 1 || !args[0]->IsString()) {",
          "360:     return THROW_BAD_ARGS;",
          "361:   }",
          "",
          "[Added Lines]",
          "361:   if (args.Length() < 1) return TYPE_ERROR(\"path required\");",
          "362:   if (!args[0]->IsString()) return TYPE_ERROR(\"path must be a string\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "390: static Handle<Value> Symlink(const Arguments& args) {",
          "391:   HandleScope scope;",
          "397:   String::Utf8Value dest(args[0]->ToString());",
          "398:   String::Utf8Value path(args[1]->ToString());",
          "",
          "[Removed Lines]",
          "393:   if (args.Length() < 2 || !args[0]->IsString() || !args[1]->IsString()) {",
          "394:     return THROW_BAD_ARGS;",
          "395:   }",
          "",
          "[Added Lines]",
          "394:   int len = args.Length();",
          "395:   if (len < 1) return TYPE_ERROR(\"dest path required\");",
          "396:   if (len < 2) return TYPE_ERROR(\"src path required\");",
          "397:   if (!args[0]->IsString()) return TYPE_ERROR(\"dest path must be a string\");",
          "398:   if (!args[1]->IsString()) return TYPE_ERROR(\"src path must be a string\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "416: static Handle<Value> Link(const Arguments& args) {",
          "417:   HandleScope scope;",
          "423:   String::Utf8Value orig_path(args[0]->ToString());",
          "424:   String::Utf8Value new_path(args[1]->ToString());",
          "",
          "[Removed Lines]",
          "419:   if (args.Length() < 2 || !args[0]->IsString() || !args[1]->IsString()) {",
          "420:     return THROW_BAD_ARGS;",
          "421:   }",
          "",
          "[Added Lines]",
          "422:   int len = args.Length();",
          "423:   if (len < 1) return TYPE_ERROR(\"dest path required\");",
          "424:   if (len < 2) return TYPE_ERROR(\"src path required\");",
          "425:   if (!args[0]->IsString()) return TYPE_ERROR(\"dest path must be a string\");",
          "426:   if (!args[1]->IsString()) return TYPE_ERROR(\"src path must be a string\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "434: static Handle<Value> ReadLink(const Arguments& args) {",
          "435:   HandleScope scope;",
          "441:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Removed Lines]",
          "437:   if (args.Length() < 1 || !args[0]->IsString()) {",
          "438:     return THROW_BAD_ARGS;",
          "439:   }",
          "",
          "[Added Lines]",
          "442:   if (args.Length() < 1) return TYPE_ERROR(\"path required\");",
          "443:   if (!args[0]->IsString()) return TYPE_ERROR(\"path must be a string\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "451: static Handle<Value> Rename(const Arguments& args) {",
          "452:   HandleScope scope;",
          "458:   String::Utf8Value old_path(args[0]->ToString());",
          "459:   String::Utf8Value new_path(args[1]->ToString());",
          "",
          "[Removed Lines]",
          "454:   if (args.Length() < 2 || !args[0]->IsString() || !args[1]->IsString()) {",
          "455:     return THROW_BAD_ARGS;",
          "456:   }",
          "",
          "[Added Lines]",
          "458:   int len = args.Length();",
          "459:   if (len < 1) return TYPE_ERROR(\"old path required\");",
          "460:   if (len < 2) return TYPE_ERROR(\"new path required\");",
          "461:   if (!args[0]->IsString()) return TYPE_ERROR(\"old path must be a string\");",
          "462:   if (!args[1]->IsString()) return TYPE_ERROR(\"new path must be a string\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "537: static Handle<Value> Unlink(const Arguments& args) {",
          "538:   HandleScope scope;",
          "544:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Removed Lines]",
          "540:   if (args.Length() < 1 || !args[0]->IsString()) {",
          "541:     return THROW_BAD_ARGS;",
          "542:   }",
          "",
          "[Added Lines]",
          "546:   if (args.Length() < 1) return TYPE_ERROR(\"path required\");",
          "547:   if (!args[0]->IsString()) return TYPE_ERROR(\"path must be a string\");",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "554: static Handle<Value> RMDir(const Arguments& args) {",
          "555:   HandleScope scope;",
          "561:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Removed Lines]",
          "557:   if (args.Length() < 1 || !args[0]->IsString()) {",
          "558:     return THROW_BAD_ARGS;",
          "559:   }",
          "",
          "[Added Lines]",
          "562:   if (args.Length() < 1) return TYPE_ERROR(\"path required\");",
          "563:   if (!args[0]->IsString()) return TYPE_ERROR(\"path must be a string\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "613: static Handle<Value> ReadDir(const Arguments& args) {",
          "614:   HandleScope scope;",
          "620:   String::Utf8Value path(args[0]->ToString());",
          "",
          "[Removed Lines]",
          "616:   if (args.Length() < 1 || !args[0]->IsString()) {",
          "617:     return THROW_BAD_ARGS;",
          "618:   }",
          "",
          "[Added Lines]",
          "620:   if (args.Length() < 1) return TYPE_ERROR(\"path required\");",
          "621:   if (!args[0]->IsString()) return TYPE_ERROR(\"path must be a string\");",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "647: static Handle<Value> Open(const Arguments& args) {",
          "648:   HandleScope scope;",
          "657:   String::Utf8Value path(args[0]->ToString());",
          "658:   int flags = args[1]->Int32Value();",
          "",
          "[Removed Lines]",
          "650:   if (args.Length() < 3 ||",
          "651:       !args[0]->IsString() ||",
          "652:       !args[1]->IsInt32() ||",
          "653:       !args[2]->IsInt32()) {",
          "654:     return THROW_BAD_ARGS;",
          "655:   }",
          "",
          "[Added Lines]",
          "653:   int len = args.Length();",
          "654:   if (len < 1) return TYPE_ERROR(\"path required\");",
          "655:   if (len < 2) return TYPE_ERROR(\"flags required\");",
          "656:   if (len < 3) return TYPE_ERROR(\"mode required\");",
          "657:   if (!args[0]->IsString()) return TYPE_ERROR(\"path must be a string\");",
          "658:   if (!args[1]->IsInt32()) return TYPE_ERROR(\"flags must be an int\");",
          "659:   if (!args[2]->IsInt32()) return TYPE_ERROR(\"mode must be an int\");",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "847: static Handle<Value> Chown(const Arguments& args) {",
          "848:   HandleScope scope;",
          "858:   String::Utf8Value path(args[0]->ToString());",
          "859:   int uid = static_cast<int>(args[1]->Int32Value());",
          "",
          "[Removed Lines]",
          "850:   if (args.Length() < 3 || !args[0]->IsString()) {",
          "851:     return THROW_BAD_ARGS;",
          "852:   }",
          "854:   if (!args[1]->IsInt32() || !args[2]->IsInt32()) {",
          "855:     return ThrowException(Exception::Error(String::New(\"User and Group IDs must be an integer.\")));",
          "856:   }",
          "",
          "[Added Lines]",
          "854:   int len = args.Length();",
          "855:   if (len < 1) return TYPE_ERROR(\"path required\");",
          "856:   if (len < 2) return TYPE_ERROR(\"uid required\");",
          "857:   if (len < 3) return TYPE_ERROR(\"gid required\");",
          "858:   if (!args[0]->IsString()) return TYPE_ERROR(\"path must be a string\");",
          "859:   if (!args[1]->IsInt32()) return TYPE_ERROR(\"uid must be an int\");",
          "860:   if (!args[2]->IsInt32()) return TYPE_ERROR(\"gid must be an int\");",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "874: static Handle<Value> FChown(const Arguments& args) {",
          "875:   HandleScope scope;",
          "885:   int fd = args[0]->Int32Value();",
          "886:   int uid = static_cast<int>(args[1]->Int32Value());",
          "",
          "[Removed Lines]",
          "877:   if (args.Length() < 3 || !args[0]->IsInt32()) {",
          "878:     return THROW_BAD_ARGS;",
          "879:   }",
          "881:   if (!args[1]->IsInt32() || !args[2]->IsInt32()) {",
          "882:     return ThrowException(Exception::Error(String::New(\"User and Group IDs must be an integer.\")));",
          "883:   }",
          "",
          "[Added Lines]",
          "881:   int len = args.Length();",
          "882:   if (len < 1) return TYPE_ERROR(\"path required\");",
          "883:   if (len < 2) return TYPE_ERROR(\"uid required\");",
          "884:   if (len < 3) return TYPE_ERROR(\"gid required\");",
          "885:   if (!args[0]->IsString()) return TYPE_ERROR(\"path must be a string\");",
          "886:   if (!args[1]->IsInt32()) return TYPE_ERROR(\"uid must be an int\");",
          "887:   if (!args[2]->IsInt32()) return TYPE_ERROR(\"gid must be an int\");",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "898: static Handle<Value> UTimes(const Arguments& args) {",
          "899:   HandleScope scope;",
          "909:   const String::Utf8Value path(args[0]->ToString());",
          "910:   const double atime = static_cast<double>(args[1]->NumberValue());",
          "",
          "[Removed Lines]",
          "901:   if (args.Length() < 3",
          "902:       || !args[0]->IsString()",
          "903:       || !args[1]->IsNumber()",
          "904:       || !args[2]->IsNumber())",
          "905:   {",
          "906:     return THROW_BAD_ARGS;",
          "907:   }",
          "",
          "[Added Lines]",
          "905:   int len = args.Length();",
          "906:   if (len < 1) return TYPE_ERROR(\"path required\");",
          "907:   if (len < 2) return TYPE_ERROR(\"atime required\");",
          "908:   if (len < 3) return TYPE_ERROR(\"mtime required\");",
          "909:   if (!args[0]->IsString()) return TYPE_ERROR(\"path must be a string\");",
          "910:   if (!args[1]->IsNumber()) return TYPE_ERROR(\"atime must be a number\");",
          "911:   if (!args[2]->IsNumber()) return TYPE_ERROR(\"mtime must be a number\");",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "921: static Handle<Value> FUTimes(const Arguments& args) {",
          "922:   HandleScope scope;",
          "932:   const int fd = args[0]->Int32Value();",
          "933:   const double atime = static_cast<double>(args[1]->NumberValue());",
          "",
          "[Removed Lines]",
          "924:   if (args.Length() < 3",
          "925:       || !args[0]->IsInt32()",
          "926:       || !args[1]->IsNumber()",
          "927:       || !args[2]->IsNumber())",
          "928:   {",
          "929:     return THROW_BAD_ARGS;",
          "930:   }",
          "",
          "[Added Lines]",
          "928:   int len = args.Length();",
          "929:   if (len < 1) return TYPE_ERROR(\"fd required\");",
          "930:   if (len < 2) return TYPE_ERROR(\"atime required\");",
          "931:   if (len < 3) return TYPE_ERROR(\"mtime required\");",
          "932:   if (!args[0]->IsInt32()) return TYPE_ERROR(\"fd must be an int\");",
          "933:   if (!args[1]->IsNumber()) return TYPE_ERROR(\"atime must be a number\");",
          "934:   if (!args[2]->IsNumber()) return TYPE_ERROR(\"mtime must be a number\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17524432ff50c7e2ba53aa71b61c2f7409d5e02a",
      "candidate_info": {
        "commit_hash": "17524432ff50c7e2ba53aa71b61c2f7409d5e02a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/17524432ff50c7e2ba53aa71b61c2f7409d5e02a",
        "files": [
          "src/node_crypto.cc",
          "src/node_file.cc",
          "src/node_http_parser.cc"
        ],
        "message": "Fix Engrish in error messages.",
        "before_after_code_files": [
          "src/node_crypto.cc||src/node_crypto.cc",
          "src/node_file.cc||src/node_file.cc",
          "src/node_http_parser.cc||src/node_http_parser.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "src/node_http_parser.cc||src/node_http_parser.cc"
          ],
          "candidate": [
            "src/node_http_parser.cc||src/node_http_parser.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/node_crypto.cc||src/node_crypto.cc": [
          "File: src/node_crypto.cc -> src/node_crypto.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1015:   size_t len = args[2]->Int32Value();",
          "1016:   if (off + len > buffer_length) {",
          "1017:     return ThrowException(Exception::Error(",
          "1019:   }",
          "1021:   int bytes_written = BIO_write(ss->bio_read_, buffer_data + off, len);",
          "",
          "[Removed Lines]",
          "1018:           String::New(\"Length is extends beyond buffer\")));",
          "",
          "[Added Lines]",
          "1018:           String::New(\"off + len > buffer.length\")));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1054:   size_t len = args[2]->Int32Value();",
          "1055:   if (off + len > buffer_length) {",
          "1056:     return ThrowException(Exception::Error(",
          "1058:   }",
          "1060:   if (!SSL_is_init_finished(ss->ssl_)) {",
          "",
          "[Removed Lines]",
          "1057:           String::New(\"Length is extends beyond buffer\")));",
          "",
          "[Added Lines]",
          "1057:           String::New(\"off + len > buffer.length\")));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1127:   size_t len = args[2]->Int32Value();",
          "1128:   if (off + len > buffer_length) {",
          "1129:     return ThrowException(Exception::Error(",
          "1131:   }",
          "1133:   int bytes_read = BIO_read(ss->bio_write_, buffer_data + off, len);",
          "",
          "[Removed Lines]",
          "1130:           String::New(\"Length is extends beyond buffer\")));",
          "",
          "[Added Lines]",
          "1130:           String::New(\"off + len > buffer.length\")));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1167:   size_t len = args[2]->Int32Value();",
          "1168:   if (off + len > buffer_length) {",
          "1169:     return ThrowException(Exception::Error(",
          "1171:   }",
          "1173:   if (!SSL_is_init_finished(ss->ssl_)) {",
          "",
          "[Removed Lines]",
          "1170:           String::New(\"Length is extends beyond buffer\")));",
          "",
          "[Added Lines]",
          "1170:           String::New(\"off + len > buffer.length\")));",
          "",
          "---------------"
        ],
        "src/node_file.cc||src/node_file.cc": [
          "File: src/node_file.cc -> src/node_file.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "730:   ssize_t len = args[3]->Int32Value();",
          "731:   if (off + len > buffer_length) {",
          "732:     return ThrowException(Exception::Error(",
          "734:   }",
          "736:   ASSERT_OFFSET(args[4]);",
          "",
          "[Removed Lines]",
          "733:           String::New(\"Length is extends beyond buffer\")));",
          "",
          "[Added Lines]",
          "733:           String::New(\"off + len > buffer.length\")));",
          "",
          "---------------"
        ],
        "src/node_http_parser.cc||src/node_http_parser.cc": [
          "File: src/node_http_parser.cc -> src/node_http_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "406:     size_t len = args[2]->Int32Value();",
          "407:     if (off+len > buffer_len) {",
          "408:       return ThrowException(Exception::Error(",
          "410:     }",
          "",
          "[Removed Lines]",
          "409:             String::New(\"Length is extends beyond buffer\")));",
          "",
          "[Added Lines]",
          "409:             String::New(\"off + len > buffer.length\")));",
          "",
          "---------------"
        ]
      }
    }
  ]
}