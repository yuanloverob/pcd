{
  "cve_id": "CVE-2015-1331",
  "cve_desc": "lxclock.c in LXC 1.1.2 and earlier allows local users to create arbitrary files via a symlink attack on /run/lock/lxc/*.",
  "repo": "lxc/lxc",
  "patch_hash": "72cf81f6a3404e35028567db2c99a90406e9c6e6",
  "patch_info": {
    "commit_hash": "72cf81f6a3404e35028567db2c99a90406e9c6e6",
    "repo": "lxc/lxc",
    "commit_url": "https://github.com/lxc/lxc/commit/72cf81f6a3404e35028567db2c99a90406e9c6e6",
    "files": [
      "src/lxc/lxclock.c",
      "src/tests/locktests.c"
    ],
    "message": "CVE-2015-1331: lxclock: use /run/lxc/lock rather than /run/lock/lxc\n\nThis prevents an unprivileged user to use LXC to create arbitrary file\non the filesystem.\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>\nSigned-off-by: Tyler Hicks <tyhicks@canonical.com>\nAcked-by: St\u00e9phane Graber <stgraber@ubuntu.com>",
    "before_after_code_files": [
      "src/lxc/lxclock.c||src/lxc/lxclock.c",
      "src/tests/locktests.c||src/tests/locktests.c"
    ]
  },
  "patch_diff": {
    "src/lxc/lxclock.c||src/lxc/lxclock.c": [
      "File: src/lxc/lxclock.c -> src/lxc/lxclock.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "103:  char *rundir;",
      "113:  rundir = get_rundir();",
      "114:  if (!rundir)",
      "115:   return NULL;",
      "",
      "[Removed Lines]",
      "112:  len = strlen(\"/lock/lxc/\") + strlen(n) + strlen(p) + 3;",
      "",
      "[Added Lines]",
      "112:  len = strlen(\"/lxc/lock/\") + strlen(n) + strlen(p) + 3;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "120:   return NULL;",
      "121:  }",
      "124:  if (ret < 0 || ret >= len) {",
      "125:   free(dest);",
      "126:   free(rundir);",
      "",
      "[Removed Lines]",
      "123:  ret = snprintf(dest, len, \"%s/lock/lxc/%s\", rundir, p);",
      "",
      "[Added Lines]",
      "123:  ret = snprintf(dest, len, \"%s/lxc/lock/%s\", rundir, p);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "128:  }",
      "129:  ret = mkdir_p(dest, 0755);",
      "130:  if (ret < 0) {",
      "163:  free(rundir);",
      "165:  if (ret < 0 || ret >= len) {",
      "166:   free(dest);",
      "167:   return NULL;",
      "",
      "[Removed Lines]",
      "135:   int l2 = 22 + strlen(n) + strlen(p);",
      "136:   if (l2 > len) {",
      "137:    char *d;",
      "138:    d = realloc(dest, l2);",
      "139:    if (!d) {",
      "140:     free(dest);",
      "141:     free(rundir);",
      "142:     return NULL;",
      "143:    }",
      "144:    len = l2;",
      "145:    dest = d;",
      "146:   }",
      "147:   ret = snprintf(dest, len, \"/tmp/%d/lxc%s\", geteuid(), p);",
      "148:   if (ret < 0 || ret >= len) {",
      "149:    free(dest);",
      "150:    free(rundir);",
      "151:    return NULL;",
      "152:   }",
      "153:   ret = mkdir_p(dest, 0755);",
      "154:   if (ret < 0) {",
      "155:    free(dest);",
      "156:    free(rundir);",
      "157:    return NULL;",
      "158:   }",
      "159:   ret = snprintf(dest, len, \"/tmp/%d/lxc%s/.%s\", geteuid(), p, n);",
      "160:  } else",
      "161:   ret = snprintf(dest, len, \"%s/lock/lxc/%s/.%s\", rundir, p, n);",
      "",
      "[Added Lines]",
      "131:   free(dest);",
      "132:   free(rundir);",
      "133:   return NULL;",
      "134:  }",
      "136:  ret = snprintf(dest, len, \"%s/lxc/lock/%s/.%s\", rundir, p, n);",
      "",
      "---------------"
    ],
    "src/tests/locktests.c||src/tests/locktests.c": [
      "File: src/tests/locktests.c -> src/tests/locktests.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:   exit(1);",
      "123:  }",
      "124:  struct stat sb;",
      "126:  ret = stat(pathname, &sb);",
      "127:  if (ret != 0) {",
      "128:   fprintf(stderr, \"%d: filename %s not created\\n\", __LINE__,",
      "",
      "[Removed Lines]",
      "125:  char *pathname = RUNTIME_PATH \"/lock/lxc/var/lib/lxc/\";",
      "",
      "[Added Lines]",
      "125:  char *pathname = RUNTIME_PATH \"/lxc/lock/var/lib/lxc/\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "61ecf69d7834921cc078e14d1b36c459ad8f91c7",
      "candidate_info": {
        "commit_hash": "61ecf69d7834921cc078e14d1b36c459ad8f91c7",
        "repo": "lxc/lxc",
        "commit_url": "https://github.com/lxc/lxc/commit/61ecf69d7834921cc078e14d1b36c459ad8f91c7",
        "files": [
          "src/lxc/lxclock.c",
          "src/tests/locktests.c"
        ],
        "message": "CVE-2015-1331: lxclock: use /run/lxc/lock rather than /run/lock/lxc\n\nThis prevents an unprivileged user to use LXC to create arbitrary file\non the filesystem.\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>\nSigned-off-by: Tyler Hicks <tyhicks@canonical.com>\nAcked-by: St\u00e9phane Graber <stgraber@ubuntu.com>",
        "before_after_code_files": [
          "src/lxc/lxclock.c||src/lxc/lxclock.c",
          "src/tests/locktests.c||src/tests/locktests.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "src/lxc/lxclock.c||src/lxc/lxclock.c",
            "src/tests/locktests.c||src/tests/locktests.c"
          ],
          "candidate": [
            "src/lxc/lxclock.c||src/lxc/lxclock.c",
            "src/tests/locktests.c||src/tests/locktests.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lxc/lxclock.c||src/lxc/lxclock.c": [
          "File: src/lxc/lxclock.c -> src/lxc/lxclock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:  char *rundir;",
          "113:  rundir = get_rundir();",
          "114:  if (!rundir)",
          "115:   return NULL;",
          "",
          "[Removed Lines]",
          "112:  len = strlen(\"/lock/lxc/\") + strlen(n) + strlen(p) + 3;",
          "",
          "[Added Lines]",
          "112:  len = strlen(\"/lxc/lock/\") + strlen(n) + strlen(p) + 3;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   return NULL;",
          "121:  }",
          "124:  if (ret < 0 || ret >= len) {",
          "125:   free(dest);",
          "126:   free(rundir);",
          "",
          "[Removed Lines]",
          "123:  ret = snprintf(dest, len, \"%s/lock/lxc/%s\", rundir, p);",
          "",
          "[Added Lines]",
          "123:  ret = snprintf(dest, len, \"%s/lxc/lock/%s\", rundir, p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:  }",
          "129:  ret = mkdir_p(dest, 0755);",
          "130:  if (ret < 0) {",
          "163:  free(rundir);",
          "165:  if (ret < 0 || ret >= len) {",
          "166:   free(dest);",
          "167:   return NULL;",
          "",
          "[Removed Lines]",
          "135:   int l2 = 22 + strlen(n) + strlen(p);",
          "136:   if (l2 > len) {",
          "137:    char *d;",
          "138:    d = realloc(dest, l2);",
          "139:    if (!d) {",
          "140:     free(dest);",
          "141:     free(rundir);",
          "142:     return NULL;",
          "143:    }",
          "144:    len = l2;",
          "145:    dest = d;",
          "146:   }",
          "147:   ret = snprintf(dest, len, \"/tmp/%d/lxc%s\", geteuid(), p);",
          "148:   if (ret < 0 || ret >= len) {",
          "149:    free(dest);",
          "150:    free(rundir);",
          "151:    return NULL;",
          "152:   }",
          "153:   ret = mkdir_p(dest, 0755);",
          "154:   if (ret < 0) {",
          "155:    free(dest);",
          "156:    free(rundir);",
          "157:    return NULL;",
          "158:   }",
          "159:   ret = snprintf(dest, len, \"/tmp/%d/lxc%s/.%s\", geteuid(), p, n);",
          "160:  } else",
          "161:   ret = snprintf(dest, len, \"%s/lock/lxc/%s/.%s\", rundir, p, n);",
          "",
          "[Added Lines]",
          "131:   free(dest);",
          "132:   free(rundir);",
          "133:   return NULL;",
          "134:  }",
          "136:  ret = snprintf(dest, len, \"%s/lxc/lock/%s/.%s\", rundir, p, n);",
          "",
          "---------------"
        ],
        "src/tests/locktests.c||src/tests/locktests.c": [
          "File: src/tests/locktests.c -> src/tests/locktests.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   exit(1);",
          "123:  }",
          "124:  struct stat sb;",
          "126:  ret = stat(pathname, &sb);",
          "127:  if (ret != 0) {",
          "128:   fprintf(stderr, \"%d: filename %s not created\\n\", __LINE__,",
          "",
          "[Removed Lines]",
          "125:  char *pathname = RUNTIME_PATH \"/lock/lxc/var/lib/lxc/\";",
          "",
          "[Added Lines]",
          "125:  char *pathname = RUNTIME_PATH \"/lxc/lock/var/lib/lxc/\";",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f547349ea7ef3a6eae6965a95cb5986cd921bd99",
      "candidate_info": {
        "commit_hash": "f547349ea7ef3a6eae6965a95cb5986cd921bd99",
        "repo": "lxc/lxc",
        "commit_url": "https://github.com/lxc/lxc/commit/f547349ea7ef3a6eae6965a95cb5986cd921bd99",
        "files": [
          "src/lxc/lxclock.c",
          "src/tests/locktests.c"
        ],
        "message": "CVE-2015-1331: lxclock: use /run/lxc/lock rather than /run/lock/lxc\n\nThis prevents an unprivileged user to use LXC to create arbitrary file\non the filesystem.\n\nSigned-off-by: Serge Hallyn <serge.hallyn@ubuntu.com>\nSigned-off-by: Tyler Hicks <tyhicks@canonical.com>\nAcked-by: St\u00e9phane Graber <stgraber@ubuntu.com>",
        "before_after_code_files": [
          "src/lxc/lxclock.c||src/lxc/lxclock.c",
          "src/tests/locktests.c||src/tests/locktests.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "src/lxc/lxclock.c||src/lxc/lxclock.c",
            "src/tests/locktests.c||src/tests/locktests.c"
          ],
          "candidate": [
            "src/lxc/lxclock.c||src/lxc/lxclock.c",
            "src/tests/locktests.c||src/tests/locktests.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lxc/lxclock.c||src/lxc/lxclock.c": [
          "File: src/lxc/lxclock.c -> src/lxc/lxclock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:  char *rundir;",
          "113:  rundir = get_rundir();",
          "114:  if (!rundir)",
          "115:   return NULL;",
          "",
          "[Removed Lines]",
          "112:  len = strlen(\"/lock/lxc/\") + strlen(n) + strlen(p) + 2;",
          "",
          "[Added Lines]",
          "112:  len = strlen(\"/lxc/lock/\") + strlen(n) + strlen(p) + 2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "120:   return NULL;",
          "121:  }",
          "124:  if (ret < 0 || ret >= len) {",
          "125:   free(dest);",
          "126:   free(rundir);",
          "",
          "[Removed Lines]",
          "123:  ret = snprintf(dest, len, \"%s/lock/lxc/%s\", rundir, p);",
          "",
          "[Added Lines]",
          "123:  ret = snprintf(dest, len, \"%s/lxc/lock/%s\", rundir, p);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:  }",
          "129:  ret = mkdir_p(dest, 0755);",
          "130:  if (ret < 0) {",
          "154:  free(rundir);",
          "156:  if (ret < 0 || ret >= len) {",
          "157:   free(dest);",
          "158:   return NULL;",
          "",
          "[Removed Lines]",
          "132:   int l2 = 33 + strlen(n) + strlen(p);",
          "133:   if (l2 > len) {",
          "134:    char *d;",
          "135:    d = realloc(dest, l2);",
          "136:    if (!d) {",
          "137:     free(dest);",
          "138:     free(rundir);",
          "139:     return NULL;",
          "140:    }",
          "141:    len = l2;",
          "142:    dest = d;",
          "143:   }",
          "144:   ret = snprintf(dest, len, \"/tmp/%d/lxc/%s\", geteuid(), p);",
          "145:   if (ret < 0 || ret >= len) {",
          "146:    free(dest);",
          "147:    free(rundir);",
          "148:    return NULL;",
          "149:   }",
          "150:   ret = snprintf(dest, len, \"/tmp/%d/lxc/%s/%s\", geteuid(), p, n);",
          "151:  } else",
          "152:   ret = snprintf(dest, len, \"%s/lock/lxc/%s/%s\", rundir, p, n);",
          "",
          "[Added Lines]",
          "131:   free(dest);",
          "132:   free(rundir);",
          "133:   return NULL;",
          "134:  }",
          "136:  ret = snprintf(dest, len, \"%s/lxc/lock/%s/%s\", rundir, p, n);",
          "",
          "---------------"
        ],
        "src/tests/locktests.c||src/tests/locktests.c": [
          "File: src/tests/locktests.c -> src/tests/locktests.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:   exit(1);",
          "123:  }",
          "124:  struct stat sb;",
          "126:  ret = stat(pathname, &sb);",
          "127:  if (ret != 0) {",
          "128:   fprintf(stderr, \"%d: filename %s not created\\n\", __LINE__,",
          "",
          "[Removed Lines]",
          "125:  char *pathname = RUNTIME_PATH \"/lock/lxc/var/lib/lxc/\";",
          "",
          "[Added Lines]",
          "125:  char *pathname = RUNTIME_PATH \"/lxc/lock/var/lib/lxc/\";",
          "",
          "---------------"
        ]
      }
    }
  ]
}