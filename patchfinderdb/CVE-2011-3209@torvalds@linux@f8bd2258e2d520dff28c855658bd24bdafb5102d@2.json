{
  "cve_id": "CVE-2011-3209",
  "cve_desc": "The div_long_long_rem implementation in include/asm-x86/div64.h in the Linux kernel before 2.6.26 on the x86 platform allows local users to cause a denial of service (Divide Error Fault and panic) via a clock_gettime system call.",
  "repo": "torvalds/linux",
  "patch_hash": "f8bd2258e2d520dff28c855658bd24bdafb5102d",
  "patch_info": {
    "commit_hash": "f8bd2258e2d520dff28c855658bd24bdafb5102d",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/f8bd2258e2d520dff28c855658bd24bdafb5102d",
    "files": [
      "arch/mips/kernel/binfmt_elfn32.c",
      "arch/mips/kernel/binfmt_elfo32.c",
      "drivers/char/mmtimer.c",
      "include/asm-x86/div64.h",
      "include/linux/calc64.h",
      "include/linux/jiffies.h",
      "kernel/posix-cpu-timers.c",
      "kernel/time.c",
      "kernel/time/ntp.c",
      "mm/slub.c"
    ],
    "message": "remove div_long_long_rem\n\nx86 is the only arch right now, which provides an optimized for\ndiv_long_long_rem and it has the downside that one has to be very careful that\nthe divide doesn't overflow.\n\nThe API is a little akward, as the arguments for the unsigned divide are\nsigned.  The signed version also doesn't handle a negative divisor and\nproduces worse code on 64bit archs.\n\nThere is little incentive to keep this API alive, so this converts the few\nusers to the new API.\n\nSigned-off-by: Roman Zippel <zippel@linux-m68k.org>\nCc: Ralf Baechle <ralf@linux-mips.org>\nCc: Ingo Molnar <mingo@elte.hu>\nCc: Thomas Gleixner <tglx@linutronix.de>\nCc: john stultz <johnstul@us.ibm.com>\nCc: Christoph Lameter <clameter@sgi.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
    "before_after_code_files": [
      "arch/mips/kernel/binfmt_elfn32.c||arch/mips/kernel/binfmt_elfn32.c",
      "arch/mips/kernel/binfmt_elfo32.c||arch/mips/kernel/binfmt_elfo32.c",
      "drivers/char/mmtimer.c||drivers/char/mmtimer.c",
      "include/asm-x86/div64.h||include/asm-x86/div64.h",
      "include/linux/calc64.h||include/linux/calc64.h",
      "include/linux/jiffies.h||include/linux/jiffies.h",
      "kernel/posix-cpu-timers.c||kernel/posix-cpu-timers.c",
      "kernel/time.c||kernel/time.c",
      "kernel/time/ntp.c||kernel/time/ntp.c",
      "mm/slub.c||mm/slub.c"
    ]
  },
  "patch_diff": {
    "arch/mips/kernel/binfmt_elfn32.c||arch/mips/kernel/binfmt_elfn32.c": [
      "File: arch/mips/kernel/binfmt_elfn32.c -> arch/mips/kernel/binfmt_elfn32.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "54: #include <linux/module.h>",
      "55: #include <linux/elfcore.h>",
      "56: #include <linux/compat.h>",
      "58: #define elf_prstatus elf_prstatus32",
      "59: struct elf_prstatus32",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "57: #include <linux/math64.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "104:  u64 nsec = (u64)jiffies * TICK_NSEC;",
      "107:  value->tv_usec = rem / NSEC_PER_USEC;",
      "108: }",
      "",
      "[Removed Lines]",
      "105:  long rem;",
      "106:  value->tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &rem);",
      "",
      "[Added Lines]",
      "106:  u32 rem;",
      "107:  value->tv_sec = div_u64_rem(nsec, NSEC_PER_SEC, &rem);",
      "",
      "---------------"
    ],
    "arch/mips/kernel/binfmt_elfo32.c||arch/mips/kernel/binfmt_elfo32.c": [
      "File: arch/mips/kernel/binfmt_elfo32.c -> arch/mips/kernel/binfmt_elfo32.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "56: #include <linux/module.h>",
      "57: #include <linux/elfcore.h>",
      "58: #include <linux/compat.h>",
      "60: #define elf_prstatus elf_prstatus32",
      "61: struct elf_prstatus32",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59: #include <linux/math64.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "106:  u64 nsec = (u64)jiffies * TICK_NSEC;",
      "109:  value->tv_usec = rem / NSEC_PER_USEC;",
      "110: }",
      "",
      "[Removed Lines]",
      "107:  long rem;",
      "108:  value->tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &rem);",
      "",
      "[Added Lines]",
      "108:  u32 rem;",
      "109:  value->tv_sec = div_u64_rem(nsec, NSEC_PER_SEC, &rem);",
      "",
      "---------------"
    ],
    "drivers/char/mmtimer.c||drivers/char/mmtimer.c": [
      "File: drivers/char/mmtimer.c -> drivers/char/mmtimer.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: #include <linux/miscdevice.h>",
      "31: #include <linux/posix-timers.h>",
      "32: #include <linux/interrupt.h>",
      "34: #include <asm/uaccess.h>",
      "35: #include <asm/sn/addrs.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "33: #include <linux/time.h>",
      "34: #include <linux/math64.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "473:  nsec = rtc_time() * sgi_clock_period",
      "474:    + sgi_clock_offset.tv_nsec;",
      "477:  return 0;",
      "478: };",
      "",
      "[Removed Lines]",
      "475:  tp->tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &tp->tv_nsec)",
      "476:    + sgi_clock_offset.tv_sec;",
      "",
      "[Added Lines]",
      "478:  tp->tv_sec += sgi_clock_offset.tv_sec;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "481: {",
      "483:  u64 nsec;",
      "486:  nsec = rtc_time() * sgi_clock_period;",
      "490:  if (rem <= tp->tv_nsec)",
      "491:   sgi_clock_offset.tv_nsec = tp->tv_sec - rem;",
      "",
      "[Removed Lines]",
      "484:  u64 rem;",
      "488:  sgi_clock_offset.tv_sec = tp->tv_sec - div_long_long_rem(nsec, NSEC_PER_SEC, &rem);",
      "",
      "[Added Lines]",
      "486:  u32 rem;",
      "490:  sgi_clock_offset.tv_sec = tp->tv_sec - div_u64_rem(nsec, NSEC_PER_SEC, &rem);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "644:  return 0;",
      "645: }",
      "651: static void sgi_timer_get(struct k_itimer *timr, struct itimerspec *cur_setting)",
      "652: {",
      "",
      "[Removed Lines]",
      "647: #define timespec_to_ns(x) ((x).tv_nsec + (x).tv_sec * NSEC_PER_SEC)",
      "648: #define ns_to_timespec(ts, nsec) (ts).tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &(ts).tv_nsec)",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "659:   return;",
      "660:  }",
      "665: }",
      "",
      "[Removed Lines]",
      "662:  ns_to_timespec(cur_setting->it_interval, timr->it.mmtimer.incr * sgi_clock_period);",
      "663:  ns_to_timespec(cur_setting->it_value, (timr->it.mmtimer.expires - rtc_time())* sgi_clock_period);",
      "664:  return;",
      "",
      "[Added Lines]",
      "661:  cur_setting->it_interval = ns_to_timespec(timr->it.mmtimer.incr * sgi_clock_period);",
      "662:  cur_setting->it_value = ns_to_timespec((timr->it.mmtimer.expires - rtc_time()) * sgi_clock_period);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "679:   sgi_timer_get(timr, old_setting);",
      "681:  sgi_timer_del(timr);",
      "685:  if (when == 0)",
      "",
      "[Removed Lines]",
      "682:  when = timespec_to_ns(new_setting->it_value);",
      "683:  period = timespec_to_ns(new_setting->it_interval);",
      "",
      "[Added Lines]",
      "680:  when = timespec_to_ns(&new_setting->it_value);",
      "681:  period = timespec_to_ns(&new_setting->it_interval);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "695:   unsigned long now;",
      "697:   getnstimeofday(&n);",
      "699:   if (when > now)",
      "700:    when -= now;",
      "701:   else",
      "",
      "[Removed Lines]",
      "698:   now = timespec_to_ns(n);",
      "",
      "[Added Lines]",
      "696:   now = timespec_to_ns(&n);",
      "",
      "---------------"
    ],
    "include/asm-x86/div64.h||include/asm-x86/div64.h": [
      "File: include/asm-x86/div64.h -> include/asm-x86/div64.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "33:  __mod;       \\",
      "34: })",
      "54: static inline u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)",
      "55: {",
      "56:  union {",
      "",
      "[Removed Lines]",
      "42: #define div_long_long_rem(a, b, c) div_ll_X_l_rem(a, b, c)",
      "44: static inline long div_ll_X_l_rem(long long divs, long div, long *rem)",
      "45: {",
      "46:  long dum2;",
      "47:  asm(\"divl %2\":\"=a\"(dum2), \"=d\"(*rem)",
      "48:      : \"rm\"(div), \"A\"(divs));",
      "50:  return dum2;",
      "52: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "include/linux/calc64.h||include/linux/calc64.h": [
      "File: include/linux/calc64.h -> include/linux/calc64.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "include/linux/jiffies.h||include/linux/jiffies.h": [
      "File: include/linux/jiffies.h -> include/linux/jiffies.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #ifndef _LINUX_JIFFIES_H",
      "2: #define _LINUX_JIFFIES_H",
      "5: #include <linux/kernel.h>",
      "6: #include <linux/types.h>",
      "7: #include <linux/time.h>",
      "",
      "[Removed Lines]",
      "4: #include <linux/calc64.h>",
      "",
      "[Added Lines]",
      "4: #include <linux/math64.h>",
      "",
      "---------------"
    ],
    "kernel/posix-cpu-timers.c||kernel/posix-cpu-timers.c": [
      "File: kernel/posix-cpu-timers.c -> kernel/posix-cpu-timers.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #include <linux/sched.h>",
      "6: #include <linux/posix-timers.h>",
      "8: #include <linux/errno.h>",
      "10: static int check_clock(const clockid_t which_clock)",
      "11: {",
      "",
      "[Removed Lines]",
      "7: #include <asm/uaccess.h>",
      "",
      "[Added Lines]",
      "8: #include <linux/math64.h>",
      "9: #include <asm/uaccess.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:           union cpu_time_count cpu,",
      "48:           struct timespec *tp)",
      "49: {",
      "54:   cputime_to_timespec(cpu.cpu, tp);",
      "56: }",
      "58: static inline int cpu_time_before(const clockid_t which_clock,",
      "",
      "[Removed Lines]",
      "50:  if (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED) {",
      "51:   tp->tv_sec = div_long_long_rem(cpu.sched,",
      "52:             NSEC_PER_SEC, &tp->tv_nsec);",
      "53:  } else {",
      "55:  }",
      "",
      "[Added Lines]",
      "51:  if (CPUCLOCK_WHICH(which_clock) == CPUCLOCK_SCHED)",
      "53:  else",
      "",
      "---------------"
    ],
    "kernel/time.c||kernel/time.c": [
      "File: kernel/time.c -> kernel/time.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "392: struct timespec ns_to_timespec(const s64 nsec)",
      "393: {",
      "394:  struct timespec ts;",
      "396:  if (!nsec)",
      "397:   return (struct timespec) {0, 0};",
      "403:  return ts;",
      "404: }",
      "",
      "[Removed Lines]",
      "399:  ts.tv_sec = div_long_long_rem_signed(nsec, NSEC_PER_SEC, &ts.tv_nsec);",
      "400:  if (unlikely(nsec < 0))",
      "401:   set_normalized_timespec(&ts, ts.tv_sec, ts.tv_nsec);",
      "",
      "[Added Lines]",
      "395:  s32 rem;",
      "400:  ts.tv_sec = div_s64_rem(nsec, NSEC_PER_SEC, &rem);",
      "401:  if (unlikely(rem < 0)) {",
      "402:   ts.tv_sec--;",
      "403:   rem += NSEC_PER_SEC;",
      "404:  }",
      "405:  ts.tv_nsec = rem;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "533: }",
      "534: EXPORT_SYMBOL(jiffies_to_timespec);",
      "",
      "[Removed Lines]",
      "531:  u64 nsec = (u64)jiffies * TICK_NSEC;",
      "532:  value->tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &value->tv_nsec);",
      "",
      "[Added Lines]",
      "535:  u32 rem;",
      "536:  value->tv_sec = div_u64_rem((u64)jiffies * TICK_NSEC,",
      "537:         NSEC_PER_SEC, &rem);",
      "538:  value->tv_nsec = rem;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "576: }",
      "577: EXPORT_SYMBOL(jiffies_to_timeval);",
      "",
      "[Removed Lines]",
      "570:  u64 nsec = (u64)jiffies * TICK_NSEC;",
      "571:  long tv_usec;",
      "573:  value->tv_sec = div_long_long_rem(nsec, NSEC_PER_SEC, &tv_usec);",
      "574:  tv_usec /= NSEC_PER_USEC;",
      "575:  value->tv_usec = tv_usec;",
      "",
      "[Added Lines]",
      "576:  u32 rem;",
      "578:  value->tv_sec = div_u64_rem((u64)jiffies * TICK_NSEC,",
      "579:         NSEC_PER_SEC, &rem);",
      "580:  value->tv_usec = rem / NSEC_PER_USEC;",
      "",
      "---------------"
    ],
    "kernel/time/ntp.c||kernel/time/ntp.c": [
      "File: kernel/time/ntp.c -> kernel/time/ntp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "235: int do_adjtimex(struct timex *txc)",
      "236: {",
      "238:  s64 freq_adj;",
      "239:  int result;",
      "",
      "[Removed Lines]",
      "237:  long mtemp, save_adjust, rem;",
      "",
      "[Added Lines]",
      "237:  long mtemp, save_adjust;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "345:       freq_adj += time_freq;",
      "346:       freq_adj = min(freq_adj, (s64)MAXFREQ_NSEC);",
      "347:       time_freq = max(freq_adj, (s64)-MAXFREQ_NSEC);",
      "351:       time_offset <<= SHIFT_UPDATE;",
      "",
      "[Removed Lines]",
      "348:       time_offset = div_long_long_rem_signed(time_offset,",
      "349:           NTP_INTERVAL_FREQ,",
      "350:           &rem);",
      "",
      "[Added Lines]",
      "348:       time_offset = div_s64(time_offset, NTP_INTERVAL_FREQ);",
      "",
      "---------------"
    ],
    "mm/slub.c||mm/slub.c": [
      "File: mm/slub.c -> mm/slub.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "22: #include <linux/debugobjects.h>",
      "23: #include <linux/kallsyms.h>",
      "24: #include <linux/memory.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: #include <linux/math64.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3621:    len += sprintf(buf + len, \"<not-available>\");",
      "3623:   if (l->sum_time != l->min_time) {",
      "3626:    len += sprintf(buf + len, \" age=%ld/%ld/%ld\",",
      "3630:   } else",
      "3631:    len += sprintf(buf + len, \" age=%ld\",",
      "3632:     l->min_time);",
      "",
      "[Removed Lines]",
      "3624:    unsigned long remainder;",
      "3627:    l->min_time,",
      "3628:    div_long_long_rem(l->sum_time, l->count, &remainder),",
      "3629:    l->max_time);",
      "",
      "[Added Lines]",
      "3626:     l->min_time,",
      "3627:     (long)div_u64(l->sum_time, l->count),",
      "3628:     l->max_time);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2418f4f28f8467b92a6177af32d05737ebf6206c",
      "candidate_info": {
        "commit_hash": "2418f4f28f8467b92a6177af32d05737ebf6206c",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2418f4f28f8467b92a6177af32d05737ebf6206c",
        "files": [
          "include/asm-x86/div64.h",
          "include/linux/math64.h",
          "lib/div64.c"
        ],
        "message": "introduce explicit signed/unsigned 64bit divide\n\nThe current do_div doesn't explicitly say that it's unsigned and the signed\ncounterpart is missing, which is e.g.  needed when dealing with time values.\n\nThis introduces 64bit signed/unsigned divide functions which also attempts to\ncleanup the somewhat awkward calling API, which often requires the use of\ntemporary variables for the dividend.  To avoid the need for temporary\nvariables everywhere for the remainder, each divide variant also provides a\nversion which doesn't return the remainder.\n\nEach architecture can now provide optimized versions of these function,\notherwise generic fallback implementations will be used.\n\nAs an example I provided an alternative for the current x86 divide, which\navoids the asm casts and using an union allows gcc to generate better code.\nIt also avoids the upper divde in a few more cases, where the result is known\n(i.e.  upper quotient is zero).\n\nSigned-off-by: Roman Zippel <zippel@linux-m68k.org>\nCc: john stultz <johnstul@us.ibm.com>\nCc: Thomas Gleixner <tglx@linutronix.de>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "include/asm-x86/div64.h||include/asm-x86/div64.h",
          "include/linux/math64.h||include/linux/math64.h",
          "lib/div64.c||lib/div64.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/asm-x86/div64.h||include/asm-x86/div64.h"
          ],
          "candidate": [
            "include/asm-x86/div64.h||include/asm-x86/div64.h"
          ]
        }
      },
      "candidate_diff": {
        "include/asm-x86/div64.h||include/asm-x86/div64.h": [
          "File: include/asm-x86/div64.h -> include/asm-x86/div64.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: }",
          "54: extern uint64_t div64_64(uint64_t dividend, uint64_t divisor);",
          "56: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: static inline u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)",
          "55: {",
          "56:  union {",
          "57:   u64 v64;",
          "58:   u32 v32[2];",
          "59:  } d = { dividend };",
          "60:  u32 upper;",
          "62:  upper = d.v32[1];",
          "63:  d.v32[1] = 0;",
          "64:  if (upper >= divisor) {",
          "65:   d.v32[1] = upper / divisor;",
          "66:   upper %= divisor;",
          "67:  }",
          "68:  asm (\"divl %2\" : \"=a\" (d.v32[0]), \"=d\" (*remainder) :",
          "69:   \"rm\" (divisor), \"0\" (d.v32[0]), \"1\" (upper));",
          "70:  return d.v64;",
          "71: }",
          "72: #define div_u64_rem div_u64_rem",
          "",
          "---------------"
        ],
        "include/linux/math64.h||include/linux/math64.h": [
          "File: include/linux/math64.h -> include/linux/math64.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #ifndef _LINUX_MATH64_H",
          "2: #define _LINUX_MATH64_H",
          "4: #include <linux/types.h>",
          "5: #include <asm/div64.h>",
          "7: #if BITS_PER_LONG == 64",
          "15: static inline u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)",
          "16: {",
          "18:  return dividend / divisor;",
          "19: }",
          "24: static inline s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder)",
          "25: {",
          "27:  return dividend / divisor;",
          "28: }",
          "30: #elif BITS_PER_LONG == 32",
          "32: #ifndef div_u64_rem",
          "33: static inline u64 div_u64_rem(u64 dividend, u32 divisor, u32 *remainder)",
          "34: {",
          "36:  return dividend;",
          "37: }",
          "38: #endif",
          "40: #ifndef div_s64_rem",
          "41: extern s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder);",
          "42: #endif",
          "53: #ifndef div_u64",
          "54: static inline u64 div_u64(u64 dividend, u32 divisor)",
          "55: {",
          "56:  u32 remainder;",
          "57:  return div_u64_rem(dividend, divisor, &remainder);",
          "58: }",
          "59: #endif",
          "64: #ifndef div_s64",
          "65: static inline s64 div_s64(s64 dividend, s32 divisor)",
          "66: {",
          "67:  s32 remainder;",
          "68:  return div_s64_rem(dividend, divisor, &remainder);",
          "69: }",
          "70: #endif",
          "",
          "---------------"
        ],
        "lib/div64.c||lib/div64.c": [
          "File: lib/div64.c -> lib/div64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include <linux/module.h>",
          "24: #if BITS_PER_LONG == 32",
          "",
          "[Removed Lines]",
          "19: #include <linux/types.h>",
          "21: #include <asm/div64.h>",
          "",
          "[Added Lines]",
          "20: #include <linux/math64.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: EXPORT_SYMBOL(__div64_32);",
          "62: uint64_t div64_64(uint64_t dividend, uint64_t divisor)",
          "63: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: #ifndef div_s64_rem",
          "61: s64 div_s64_rem(s64 dividend, s32 divisor, s32 *remainder)",
          "62: {",
          "63:  u64 quotient;",
          "65:  if (dividend < 0) {",
          "66:   quotient = div_u64_rem(-dividend, abs(divisor), (u32 *)remainder);",
          "68:   if (divisor > 0)",
          "69:    quotient = -quotient;",
          "70:  } else {",
          "71:   quotient = div_u64_rem(dividend, abs(divisor), (u32 *)remainder);",
          "72:   if (divisor < 0)",
          "73:    quotient = -quotient;",
          "74:  }",
          "75:  return quotient;",
          "76: }",
          "77: EXPORT_SYMBOL(div_s64_rem);",
          "78: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}