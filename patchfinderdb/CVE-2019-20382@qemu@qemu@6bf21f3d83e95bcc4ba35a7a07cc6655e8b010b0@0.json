{
  "cve_id": "CVE-2019-20382",
  "cve_desc": "QEMU 4.1.0 has a memory leak in zrle_compress_data in ui/vnc-enc-zrle.c during a VNC disconnect operation because libz is misused, resulting in a situation where memory allocated in deflateInit2 is not freed in deflateEnd.",
  "repo": "qemu/qemu",
  "patch_hash": "6bf21f3d83e95bcc4ba35a7a07cc6655e8b010b0",
  "patch_info": {
    "commit_hash": "6bf21f3d83e95bcc4ba35a7a07cc6655e8b010b0",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/6bf21f3d83e95bcc4ba35a7a07cc6655e8b010b0",
    "files": [
      "ui/vnc-enc-tight.c",
      "ui/vnc-enc-zlib.c",
      "ui/vnc-enc-zrle.c",
      "ui/vnc-enc-zrle.inc.c",
      "ui/vnc.c",
      "ui/vnc.h"
    ],
    "message": "vnc: fix memory leak when vnc disconnect\n\nCurrently when qemu receives a vnc connect, it creates a 'VncState' to\nrepresent this connection. In 'vnc_worker_thread_loop' it creates a\nlocal 'VncState'. The connection 'VcnState' and local 'VncState' exchange\ndata in 'vnc_async_encoding_start' and 'vnc_async_encoding_end'.\nIn 'zrle_compress_data' it calls 'deflateInit2' to allocate the libz library\nopaque data. The 'VncState' used in 'zrle_compress_data' is the local\n'VncState'. In 'vnc_zrle_clear' it calls 'deflateEnd' to free the libz\nlibrary opaque data. The 'VncState' used in 'vnc_zrle_clear' is the connection\n'VncState'. In currently implementation there will be a memory leak when the\nvnc disconnect. Following is the asan output backtrack:\n\nDirect leak of 29760 byte(s) in 5 object(s) allocated from:\n    0 0xffffa67ef3c3 in __interceptor_calloc (/lib64/libasan.so.4+0xd33c3)\n    1 0xffffa65071cb in g_malloc0 (/lib64/libglib-2.0.so.0+0x571cb)\n    2 0xffffa5e968f7 in deflateInit2_ (/lib64/libz.so.1+0x78f7)\n    3 0xaaaacec58613 in zrle_compress_data ui/vnc-enc-zrle.c:87\n    4 0xaaaacec58613 in zrle_send_framebuffer_update ui/vnc-enc-zrle.c:344\n    5 0xaaaacec34e77 in vnc_send_framebuffer_update ui/vnc.c:919\n    6 0xaaaacec5e023 in vnc_worker_thread_loop ui/vnc-jobs.c:271\n    7 0xaaaacec5e5e7 in vnc_worker_thread ui/vnc-jobs.c:340\n    8 0xaaaacee4d3c3 in qemu_thread_start util/qemu-thread-posix.c:502\n    9 0xffffa544e8bb in start_thread (/lib64/libpthread.so.0+0x78bb)\n    10 0xffffa53965cb in thread_start (/lib64/libc.so.6+0xd55cb)\n\nThis is because the opaque allocated in 'deflateInit2' is not freed in\n'deflateEnd'. The reason is that the 'deflateEnd' calls 'deflateStateCheck'\nand in the latter will check whether 's->strm != strm'(libz's data structure).\nThis check will be true so in 'deflateEnd' it just return 'Z_STREAM_ERROR' and\nnot free the data allocated in 'deflateInit2'.\n\nThe reason this happens is that the 'VncState' contains the whole 'VncZrle',\nso when calling 'deflateInit2', the 's->strm' will be the local address.\nSo 's->strm != strm' will be true.\n\nTo fix this issue, we need to make 'zrle' of 'VncState' to be a pointer.\nThen the connection 'VncState' and local 'VncState' exchange mechanism will\nwork as expection. The 'tight' of 'VncState' has the same issue, let's also turn\nit to a pointer.\n\nReported-by: Ying Fang <fangying1@huawei.com>\nSigned-off-by: Li Qiang <liq3ea@163.com>\nMessage-id: 20190831153922.121308-1-liq3ea@163.com\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>",
    "before_after_code_files": [
      "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c",
      "ui/vnc-enc-zlib.c||ui/vnc-enc-zlib.c",
      "ui/vnc-enc-zrle.c||ui/vnc-enc-zrle.c",
      "ui/vnc-enc-zrle.inc.c||ui/vnc-enc-zrle.inc.c",
      "ui/vnc.c||ui/vnc.c",
      "ui/vnc.h||ui/vnc.h"
    ]
  },
  "patch_diff": {
    "ui/vnc-enc-tight.c||ui/vnc-enc-tight.c": [
      "File: ui/vnc-enc-tight.c -> ui/vnc-enc-tight.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "117: static bool tight_can_send_png_rect(VncState *vs, int w, int h)",
      "118: {",
      "120:         return false;",
      "121:     }",
      "",
      "[Removed Lines]",
      "119:     if (vs->tight.type != VNC_ENCODING_TIGHT_PNG) {",
      "",
      "[Added Lines]",
      "119:     if (vs->tight->type != VNC_ENCODING_TIGHT_PNG) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "144:     int pixels = 0;",
      "145:     int pix, left[3];",
      "146:     unsigned int errors;",
      "",
      "[Removed Lines]",
      "147:     unsigned char *buf = vs->tight.tight.buffer;",
      "",
      "[Added Lines]",
      "147:     unsigned char *buf = vs->tight->tight.buffer;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "215:         int pixels = 0;                                                 \\",
      "216:         int sample, sum, left[3];                                       \\",
      "217:         unsigned int errors;                                            \\",
      "219:                                                                         \\",
      "220:         endian = 0; /* FIXME */                                         \\",
      "221:                                                                         \\",
      "",
      "[Removed Lines]",
      "218:         unsigned char *buf = vs->tight.tight.buffer;                    \\",
      "",
      "[Added Lines]",
      "218:         unsigned char *buf = vs->tight->tight.buffer;                    \\",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "296: tight_detect_smooth_image(VncState *vs, int w, int h)",
      "297: {",
      "298:     unsigned int errors;",
      "302:     if (!vs->vd->lossy) {",
      "303:         return 0;",
      "",
      "[Removed Lines]",
      "299:     int compression = vs->tight.compression;",
      "300:     int quality = vs->tight.quality;",
      "",
      "[Added Lines]",
      "299:     int compression = vs->tight->compression;",
      "300:     int quality = vs->tight->quality;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "309:         return 0;",
      "310:     }",
      "313:         if (w * h < VNC_TIGHT_JPEG_MIN_RECT_SIZE) {",
      "314:             return 0;",
      "315:         }",
      "",
      "[Removed Lines]",
      "312:     if (vs->tight.quality != (uint8_t)-1) {",
      "",
      "[Added Lines]",
      "312:     if (vs->tight->quality != (uint8_t)-1) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "320:     }",
      "322:     if (vs->client_pf.bytes_per_pixel == 4) {",
      "324:             errors = tight_detect_smooth_image24(vs, w, h);",
      "326:                 return (errors < tight_conf[quality].jpeg_threshold24);",
      "327:             }",
      "328:             return (errors < tight_conf[compression].gradient_threshold24);",
      "",
      "[Removed Lines]",
      "323:         if (vs->tight.pixel24) {",
      "325:             if (vs->tight.quality != (uint8_t)-1) {",
      "",
      "[Added Lines]",
      "323:         if (vs->tight->pixel24) {",
      "325:             if (vs->tight->quality != (uint8_t)-1) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "352:         uint##bpp##_t c0, c1, ci;                                       \\",
      "353:         int i, n0, n1;                                                  \\",
      "354:                                                                         \\",
      "356:                                                                         \\",
      "357:         c0 = data[0];                                                   \\",
      "358:         i = 1;                                                          \\",
      "",
      "[Removed Lines]",
      "355:         data = (uint##bpp##_t *)vs->tight.tight.buffer;                 \\",
      "",
      "[Added Lines]",
      "355:         data = (uint##bpp##_t *)vs->tight->tight.buffer;                \\",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "423: {",
      "424:     int max;",
      "427:     if (max < 2 &&",
      "429:         max = 2;",
      "430:     }",
      "431:     if (max >= 256) {",
      "",
      "[Removed Lines]",
      "426:     max = count / tight_conf[vs->tight.compression].idx_max_colors_divisor;",
      "428:         count >= tight_conf[vs->tight.compression].mono_min_rect_size) {",
      "",
      "[Added Lines]",
      "426:     max = count / tight_conf[vs->tight->compression].idx_max_colors_divisor;",
      "428:         count >= tight_conf[vs->tight->compression].mono_min_rect_size) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "558:     int x, y, c;",
      "560:     buf32 = (uint32_t *)buf;",
      "563:     if (1 /* FIXME */) {",
      "564:         shift[0] = vs->client_pf.rshift;",
      "",
      "[Removed Lines]",
      "561:     memset(vs->tight.gradient.buffer, 0, w * 3 * sizeof(int));",
      "",
      "[Added Lines]",
      "561:     memset(vs->tight->gradient.buffer, 0, w * 3 * sizeof(int));",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "575:             upper[c] = 0;",
      "576:             here[c] = 0;",
      "577:         }",
      "579:         for (x = 0; x < w; x++) {",
      "580:             pix32 = *buf32++;",
      "581:             for (c = 0; c < 3; c++) {",
      "",
      "[Removed Lines]",
      "578:         prev = (int *)vs->tight.gradient.buffer;",
      "",
      "[Added Lines]",
      "578:         prev = (int *)vs->tight->gradient.buffer;",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "615:         int prediction;                                                 \\",
      "616:         int x, y, c;                                                    \\",
      "617:                                                                         \\",
      "619:                                                                         \\",
      "620:         endian = 0; /* FIXME */                                         \\",
      "621:                                                                         \\",
      "",
      "[Removed Lines]",
      "618:         memset (vs->tight.gradient.buffer, 0, w * 3 * sizeof(int));     \\",
      "",
      "[Added Lines]",
      "618:         memset(vs->tight->gradient.buffer, 0, w * 3 * sizeof(int));     \\",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "631:                 upper[c] = 0;                                           \\",
      "632:                 here[c] = 0;                                            \\",
      "633:             }                                                           \\",
      "635:             for (x = 0; x < w; x++) {                                   \\",
      "636:                 pix = *buf;                                             \\",
      "637:                 if (endian) {                                           \\",
      "",
      "[Removed Lines]",
      "634:             prev = (int *)vs->tight.gradient.buffer;                    \\",
      "",
      "[Added Lines]",
      "634:             prev = (int *)vs->tight->gradient.buffer;                    \\",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "785: static int tight_init_stream(VncState *vs, int stream_id,",
      "786:                              int level, int strategy)",
      "787: {",
      "790:     if (zstream->opaque == NULL) {",
      "791:         int err;",
      "",
      "[Removed Lines]",
      "788:     z_streamp zstream = &vs->tight.stream[stream_id];",
      "",
      "[Added Lines]",
      "788:     z_streamp zstream = &vs->tight->stream[stream_id];",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "803:             return -1;",
      "804:         }",
      "807:         zstream->opaque = vs;",
      "808:     }",
      "811:         if (deflateParams(zstream, level, strategy) != Z_OK) {",
      "812:             return -1;",
      "813:         }",
      "815:     }",
      "816:     return 0;",
      "817: }",
      "",
      "[Removed Lines]",
      "806:         vs->tight.levels[stream_id] = level;",
      "810:     if (vs->tight.levels[stream_id] != level) {",
      "814:         vs->tight.levels[stream_id] = level;",
      "",
      "[Added Lines]",
      "806:         vs->tight->levels[stream_id] = level;",
      "810:     if (vs->tight->levels[stream_id] != level) {",
      "814:         vs->tight->levels[stream_id] = level;",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "839: static int tight_compress_data(VncState *vs, int stream_id, size_t bytes,",
      "840:                                int level, int strategy)",
      "841: {",
      "843:     int previous_out;",
      "845:     if (bytes < VNC_TIGHT_MIN_TO_COMPRESS) {",
      "847:         return bytes;",
      "848:     }",
      "",
      "[Removed Lines]",
      "842:     z_streamp zstream = &vs->tight.stream[stream_id];",
      "846:         vnc_write(vs, vs->tight.tight.buffer, vs->tight.tight.offset);",
      "",
      "[Added Lines]",
      "842:     z_streamp zstream = &vs->tight->stream[stream_id];",
      "846:         vnc_write(vs, vs->tight->tight.buffer, vs->tight->tight.offset);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "852:     }",
      "862:     previous_out = zstream->avail_out;",
      "863:     zstream->data_type = Z_BINARY;",
      "",
      "[Removed Lines]",
      "855:     buffer_reserve(&vs->tight.zlib, bytes + 64);",
      "858:     zstream->next_in = vs->tight.tight.buffer;",
      "859:     zstream->avail_in = vs->tight.tight.offset;",
      "860:     zstream->next_out = vs->tight.zlib.buffer + vs->tight.zlib.offset;",
      "861:     zstream->avail_out = vs->tight.zlib.capacity - vs->tight.zlib.offset;",
      "",
      "[Added Lines]",
      "855:     buffer_reserve(&vs->tight->zlib, bytes + 64);",
      "858:     zstream->next_in = vs->tight->tight.buffer;",
      "859:     zstream->avail_in = vs->tight->tight.offset;",
      "860:     zstream->next_out = vs->tight->zlib.buffer + vs->tight->zlib.offset;",
      "861:     zstream->avail_out = vs->tight->zlib.capacity - vs->tight->zlib.offset;",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "868:         return -1;",
      "869:     }",
      "873:     bytes = previous_out - zstream->avail_out;",
      "875:     tight_send_compact_size(vs, bytes);",
      "880:     return bytes;",
      "881: }",
      "",
      "[Removed Lines]",
      "871:     vs->tight.zlib.offset = vs->tight.zlib.capacity - zstream->avail_out;",
      "876:     vnc_write(vs, vs->tight.zlib.buffer, bytes);",
      "878:     buffer_reset(&vs->tight.zlib);",
      "",
      "[Added Lines]",
      "871:     vs->tight->zlib.offset = vs->tight->zlib.capacity - zstream->avail_out;",
      "876:     vnc_write(vs, vs->tight->zlib.buffer, bytes);",
      "878:     buffer_reset(&vs->tight->zlib);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "932:         bytes = 3;",
      "933:     } else {",
      "934:         bytes = vs->client_pf.bytes_per_pixel;",
      "935:     }",
      "937:     bytes = tight_compress_data(vs, stream, w * h * bytes,",
      "941:     return (bytes >= 0);",
      "942: }",
      "",
      "[Removed Lines]",
      "930:     if (vs->tight.pixel24) {",
      "931:         tight_pack24(vs, vs->tight.tight.buffer, w * h, &vs->tight.tight.offset);",
      "938:                                 tight_conf[vs->tight.compression].raw_zlib_level,",
      "939:                                 Z_DEFAULT_STRATEGY);",
      "",
      "[Added Lines]",
      "930:     if (vs->tight->pixel24) {",
      "931:         tight_pack24(vs, vs->tight->tight.buffer, w * h,",
      "932:                      &vs->tight->tight.offset);",
      "939:                             tight_conf[vs->tight->compression].raw_zlib_level,",
      "940:                             Z_DEFAULT_STRATEGY);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "952:         bytes = 3;",
      "953:     } else {",
      "954:         bytes = vs->client_pf.bytes_per_pixel;",
      "955:     }",
      "958:     return 1;",
      "959: }",
      "",
      "[Removed Lines]",
      "950:     if (vs->tight.pixel24) {",
      "951:         tight_pack24(vs, vs->tight.tight.buffer, 1, &vs->tight.tight.offset);",
      "957:     vnc_write(vs, vs->tight.tight.buffer, bytes);",
      "",
      "[Added Lines]",
      "951:     if (vs->tight->pixel24) {",
      "952:         tight_pack24(vs, vs->tight->tight.buffer, 1, &vs->tight->tight.offset);",
      "958:     vnc_write(vs, vs->tight->tight.buffer, bytes);",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "963: {",
      "964:     ssize_t bytes;",
      "965:     int stream = 1;",
      "968: #ifdef CONFIG_VNC_PNG",
      "969:     if (tight_can_send_png_rect(vs, w, h)) {",
      "",
      "[Removed Lines]",
      "966:     int level = tight_conf[vs->tight.compression].mono_zlib_level;",
      "",
      "[Added Lines]",
      "967:     int level = tight_conf[vs->tight->compression].mono_zlib_level;",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "991:         uint32_t buf[2] = {bg, fg};",
      "992:         size_t ret = sizeof (buf);",
      "995:             tight_pack24(vs, (unsigned char*)buf, 2, &ret);",
      "996:         }",
      "997:         vnc_write(vs, buf, ret);",
      "1000:         break;",
      "1001:     }",
      "1002:     case 2:",
      "1003:         vnc_write(vs, &bg, 2);",
      "1004:         vnc_write(vs, &fg, 2);",
      "1006:         break;",
      "1007:     default:",
      "1008:         vnc_write_u8(vs, bg);",
      "1009:         vnc_write_u8(vs, fg);",
      "1011:         break;",
      "1012:     }",
      "1015:     bytes = tight_compress_data(vs, stream, bytes, level, Z_DEFAULT_STRATEGY);",
      "1016:     return (bytes >= 0);",
      "",
      "[Removed Lines]",
      "994:         if (vs->tight.pixel24) {",
      "999:         tight_encode_mono_rect32(vs->tight.tight.buffer, w, h, bg, fg);",
      "1005:         tight_encode_mono_rect16(vs->tight.tight.buffer, w, h, bg, fg);",
      "1010:         tight_encode_mono_rect8(vs->tight.tight.buffer, w, h, bg, fg);",
      "1013:     vs->tight.tight.offset = bytes;",
      "",
      "[Added Lines]",
      "995:         if (vs->tight->pixel24) {",
      "1000:         tight_encode_mono_rect32(vs->tight->tight.buffer, w, h, bg, fg);",
      "1006:         tight_encode_mono_rect16(vs->tight->tight.buffer, w, h, bg, fg);",
      "1011:         tight_encode_mono_rect8(vs->tight->tight.buffer, w, h, bg, fg);",
      "1014:     vs->tight->tight.offset = bytes;",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "1040: static bool send_gradient_rect(VncState *vs, int x, int y, int w, int h)",
      "1041: {",
      "1042:     int stream = 3;",
      "1044:     ssize_t bytes;",
      "1046:     if (vs->client_pf.bytes_per_pixel == 1) {",
      "",
      "[Removed Lines]",
      "1043:     int level = tight_conf[vs->tight.compression].gradient_zlib_level;",
      "",
      "[Added Lines]",
      "1044:     int level = tight_conf[vs->tight->compression].gradient_zlib_level;",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "1050:     vnc_write_u8(vs, (stream | VNC_TIGHT_EXPLICIT_FILTER) << 4);",
      "1051:     vnc_write_u8(vs, VNC_TIGHT_FILTER_GRADIENT);",
      "1057:         bytes = 3;",
      "1058:     } else if (vs->client_pf.bytes_per_pixel == 4) {",
      "1060:         bytes = 4;",
      "1061:     } else {",
      "1063:         bytes = 2;",
      "1064:     }",
      "1068:     bytes = w * h * bytes;",
      "1071:     bytes = tight_compress_data(vs, stream, bytes,",
      "1072:                                 level, Z_FILTERED);",
      "",
      "[Removed Lines]",
      "1053:     buffer_reserve(&vs->tight.gradient, w * 3 * sizeof (int));",
      "1055:     if (vs->tight.pixel24) {",
      "1056:         tight_filter_gradient24(vs, vs->tight.tight.buffer, w, h);",
      "1059:         tight_filter_gradient32(vs, (uint32_t *)vs->tight.tight.buffer, w, h);",
      "1062:         tight_filter_gradient16(vs, (uint16_t *)vs->tight.tight.buffer, w, h);",
      "1066:     buffer_reset(&vs->tight.gradient);",
      "1069:     vs->tight.tight.offset = bytes;",
      "",
      "[Added Lines]",
      "1054:     buffer_reserve(&vs->tight->gradient, w * 3 * sizeof(int));",
      "1056:     if (vs->tight->pixel24) {",
      "1057:         tight_filter_gradient24(vs, vs->tight->tight.buffer, w, h);",
      "1060:         tight_filter_gradient32(vs, (uint32_t *)vs->tight->tight.buffer, w, h);",
      "1063:         tight_filter_gradient16(vs, (uint16_t *)vs->tight->tight.buffer, w, h);",
      "1067:     buffer_reset(&vs->tight->gradient);",
      "1070:     vs->tight->tight.offset = bytes;",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "1077:                              int w, int h, VncPalette *palette)",
      "1078: {",
      "1079:     int stream = 2;",
      "1081:     int colors;",
      "1082:     ssize_t bytes;",
      "",
      "[Removed Lines]",
      "1080:     int level = tight_conf[vs->tight.compression].idx_zlib_level;",
      "",
      "[Added Lines]",
      "1081:     int level = tight_conf[vs->tight->compression].idx_zlib_level;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "1104:         palette_iter(palette, write_palette, &priv);",
      "1105:         vnc_write(vs, header, sizeof(header));",
      "1108:             tight_pack24(vs, vs->output.buffer + old_offset, colors, &offset);",
      "1109:             vs->output.offset = old_offset + offset;",
      "1110:         }",
      "1113:         break;",
      "1114:     }",
      "1115:     case 2:",
      "",
      "[Removed Lines]",
      "1107:         if (vs->tight.pixel24) {",
      "1112:         tight_encode_indexed_rect32(vs->tight.tight.buffer, w * h, palette);",
      "",
      "[Added Lines]",
      "1108:         if (vs->tight->pixel24) {",
      "1113:         tight_encode_indexed_rect32(vs->tight->tight.buffer, w * h, palette);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "1120:         palette_iter(palette, write_palette, &priv);",
      "1121:         vnc_write(vs, header, sizeof(header));",
      "1123:         break;",
      "1124:     }",
      "1125:     default:",
      "",
      "[Removed Lines]",
      "1122:         tight_encode_indexed_rect16(vs->tight.tight.buffer, w * h, palette);",
      "",
      "[Added Lines]",
      "1123:         tight_encode_indexed_rect16(vs->tight->tight.buffer, w * h, palette);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "1127:         break;",
      "1128:     }",
      "1129:     bytes = w * h;",
      "1132:     bytes = tight_compress_data(vs, stream, bytes,",
      "1133:                                 level, Z_DEFAULT_STRATEGY);",
      "",
      "[Removed Lines]",
      "1130:     vs->tight.tight.offset = bytes;",
      "",
      "[Added Lines]",
      "1131:     vs->tight->tight.offset = bytes;",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "1146: static void jpeg_init_destination(j_compress_ptr cinfo)",
      "1147: {",
      "1148:     VncState *vs = cinfo->client_data;",
      "1151:     cinfo->dest->next_output_byte = (JOCTET *)buffer->buffer + buffer->offset;",
      "1152:     cinfo->dest->free_in_buffer = (size_t)(buffer->capacity - buffer->offset);",
      "",
      "[Removed Lines]",
      "1149:     Buffer *buffer = &vs->tight.jpeg;",
      "",
      "[Added Lines]",
      "1150:     Buffer *buffer = &vs->tight->jpeg;",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "1156: static boolean jpeg_empty_output_buffer(j_compress_ptr cinfo)",
      "1157: {",
      "1158:     VncState *vs = cinfo->client_data;",
      "1161:     buffer->offset = buffer->capacity;",
      "1162:     buffer_reserve(buffer, 2048);",
      "",
      "[Removed Lines]",
      "1159:     Buffer *buffer = &vs->tight.jpeg;",
      "",
      "[Added Lines]",
      "1160:     Buffer *buffer = &vs->tight->jpeg;",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "1168: static void jpeg_term_destination(j_compress_ptr cinfo)",
      "1169: {",
      "1170:     VncState *vs = cinfo->client_data;",
      "1173:     buffer->offset = buffer->capacity - cinfo->dest->free_in_buffer;",
      "1174: }",
      "",
      "[Removed Lines]",
      "1171:     Buffer *buffer = &vs->tight.jpeg;",
      "",
      "[Added Lines]",
      "1172:     Buffer *buffer = &vs->tight->jpeg;",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "1187:         return send_full_color_rect(vs, x, y, w, h);",
      "1188:     }",
      "1192:     cinfo.err = jpeg_std_error(&jerr);",
      "1193:     jpeg_create_compress(&cinfo);",
      "",
      "[Removed Lines]",
      "1190:     buffer_reserve(&vs->tight.jpeg, 2048);",
      "",
      "[Added Lines]",
      "1191:     buffer_reserve(&vs->tight->jpeg, 2048);",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "1223:     vnc_write_u8(vs, VNC_TIGHT_JPEG << 4);",
      "1229:     return 1;",
      "1230: }",
      "",
      "[Removed Lines]",
      "1225:     tight_send_compact_size(vs, vs->tight.jpeg.offset);",
      "1226:     vnc_write(vs, vs->tight.jpeg.buffer, vs->tight.jpeg.offset);",
      "1227:     buffer_reset(&vs->tight.jpeg);",
      "",
      "[Added Lines]",
      "1226:     tight_send_compact_size(vs, vs->tight->jpeg.offset);",
      "1227:     vnc_write(vs, vs->tight->jpeg.buffer, vs->tight->jpeg.offset);",
      "1228:     buffer_reset(&vs->tight->jpeg);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "1240:     VncState *vs = priv->vs;",
      "1241:     png_colorp color = &priv->png_palette[idx];",
      "1244:     {",
      "1245:         color->red = (pix >> vs->client_pf.rshift) & vs->client_pf.rmax;",
      "1246:         color->green = (pix >> vs->client_pf.gshift) & vs->client_pf.gmax;",
      "",
      "[Removed Lines]",
      "1243:     if (vs->tight.pixel24)",
      "",
      "[Added Lines]",
      "1244:     if (vs->tight->pixel24)",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1267: {",
      "1268:     VncState *vs = png_get_io_ptr(png_ptr);",
      "1274: }",
      "1276: static void png_flush_data(png_structp png_ptr)",
      "",
      "[Removed Lines]",
      "1270:     buffer_reserve(&vs->tight.png, vs->tight.png.offset + length);",
      "1271:     memcpy(vs->tight.png.buffer + vs->tight.png.offset, data, length);",
      "1273:     vs->tight.png.offset += length;",
      "",
      "[Added Lines]",
      "1271:     buffer_reserve(&vs->tight->png, vs->tight->png.offset + length);",
      "1272:     memcpy(vs->tight->png.buffer + vs->tight->png.offset, data, length);",
      "1274:     vs->tight->png.offset += length;",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1295:     png_infop info_ptr;",
      "1296:     png_colorp png_palette = NULL;",
      "1297:     pixman_image_t *linebuf;",
      "1300:     uint8_t *buf;",
      "1301:     int dy;",
      "",
      "[Removed Lines]",
      "1298:     int level = tight_png_conf[vs->tight.compression].png_zlib_level;",
      "1299:     int filters = tight_png_conf[vs->tight.compression].png_filters;",
      "",
      "[Added Lines]",
      "1299:     int level = tight_png_conf[vs->tight->compression].png_zlib_level;",
      "1300:     int filters = tight_png_conf[vs->tight->compression].png_filters;",
      "",
      "---------------",
      "--- Hunk 36 ---",
      "[Context before]",
      "1340:         png_set_PLTE(png_ptr, info_ptr, png_palette, palette_size(palette));",
      "1342:         if (vs->client_pf.bytes_per_pixel == 4) {",
      "1344:         } else {",
      "1346:         }",
      "1347:     }",
      "1349:     png_write_info(png_ptr, info_ptr);",
      "1352:     linebuf = qemu_pixman_linebuf_create(PIXMAN_BE_r8g8b8, w);",
      "1353:     buf = (uint8_t *)pixman_image_get_data(linebuf);",
      "1354:     for (dy = 0; dy < h; dy++)",
      "1355:     {",
      "1356:         if (color_type == PNG_COLOR_TYPE_PALETTE) {",
      "1358:         } else {",
      "1359:             qemu_pixman_linebuf_fill(linebuf, vs->vd->server, w, x, y + dy);",
      "1360:         }",
      "",
      "[Removed Lines]",
      "1343:             tight_encode_indexed_rect32(vs->tight.tight.buffer, w * h, palette);",
      "1345:             tight_encode_indexed_rect16(vs->tight.tight.buffer, w * h, palette);",
      "1351:     buffer_reserve(&vs->tight.png, 2048);",
      "1357:             memcpy(buf, vs->tight.tight.buffer + (dy * w), w);",
      "",
      "[Added Lines]",
      "1344:             tight_encode_indexed_rect32(vs->tight->tight.buffer, w * h,",
      "1345:                                         palette);",
      "1347:             tight_encode_indexed_rect16(vs->tight->tight.buffer, w * h,",
      "1348:                                         palette);",
      "1354:     buffer_reserve(&vs->tight->png, 2048);",
      "1360:             memcpy(buf, vs->tight->tight.buffer + (dy * w), w);",
      "",
      "---------------",
      "--- Hunk 37 ---",
      "[Context before]",
      "1373:     vnc_write_u8(vs, VNC_TIGHT_PNG << 4);",
      "1378:     return 1;",
      "1379: }",
      "1382: static void vnc_tight_start(VncState *vs)",
      "1383: {",
      "1389: }",
      "1391: static void vnc_tight_stop(VncState *vs)",
      "1392: {",
      "1396: }",
      "1398: static int send_sub_rect_nojpeg(VncState *vs, int x, int y, int w, int h,",
      "",
      "[Removed Lines]",
      "1375:     tight_send_compact_size(vs, vs->tight.png.offset);",
      "1376:     vnc_write(vs, vs->tight.png.buffer, vs->tight.png.offset);",
      "1377:     buffer_reset(&vs->tight.png);",
      "1384:     buffer_reset(&vs->tight.tight);",
      "1387:     vs->tight.tmp = vs->output;",
      "1388:     vs->output = vs->tight.tight;",
      "1394:     vs->tight.tight = vs->output;",
      "1395:     vs->output = vs->tight.tmp;",
      "",
      "[Added Lines]",
      "1378:     tight_send_compact_size(vs, vs->tight->png.offset);",
      "1379:     vnc_write(vs, vs->tight->png.buffer, vs->tight->png.offset);",
      "1380:     buffer_reset(&vs->tight->png);",
      "1387:     buffer_reset(&vs->tight->tight);",
      "1390:     vs->tight->tmp = vs->output;",
      "1391:     vs->output = vs->tight->tight;",
      "1397:     vs->tight->tight = vs->output;",
      "1398:     vs->output = vs->tight->tmp;",
      "",
      "---------------",
      "--- Hunk 38 ---",
      "[Context before]",
      "1426:     int ret;",
      "1428:     if (colors == 0) {",
      "1430:                       tight_detect_smooth_image(vs, w, h))) {",
      "1433:             ret = send_jpeg_rect(vs, x, y, w, h, quality);",
      "1434:         } else {",
      "",
      "[Removed Lines]",
      "1429:         if (force || (tight_jpeg_conf[vs->tight.quality].jpeg_full &&",
      "1431:             int quality = tight_conf[vs->tight.quality].jpeg_quality;",
      "",
      "[Added Lines]",
      "1432:         if (force || (tight_jpeg_conf[vs->tight->quality].jpeg_full &&",
      "1434:             int quality = tight_conf[vs->tight->quality].jpeg_quality;",
      "",
      "---------------",
      "--- Hunk 39 ---",
      "[Context before]",
      "1440:         ret = send_mono_rect(vs, x, y, w, h, bg, fg);",
      "1441:     } else if (colors <= 256) {",
      "1442:         if (force || (colors > 96 &&",
      "1444:                       tight_detect_smooth_image(vs, w, h))) {",
      "1447:             ret = send_jpeg_rect(vs, x, y, w, h, quality);",
      "1448:         } else {",
      "",
      "[Removed Lines]",
      "1443:                       tight_jpeg_conf[vs->tight.quality].jpeg_idx &&",
      "1445:             int quality = tight_conf[vs->tight.quality].jpeg_quality;",
      "",
      "[Added Lines]",
      "1446:                       tight_jpeg_conf[vs->tight->quality].jpeg_idx &&",
      "1448:             int quality = tight_conf[vs->tight->quality].jpeg_quality;",
      "",
      "---------------",
      "--- Hunk 40 ---",
      "[Context before]",
      "1480:         qemu_thread_atexit_add(&vnc_tight_cleanup_notifier);",
      "1481:     }",
      "1485:     vnc_tight_start(vs);",
      "1486:     vnc_raw_send_framebuffer_update(vs, x, y, w, h);",
      "1487:     vnc_tight_stop(vs);",
      "1489: #ifdef CONFIG_VNC_JPEG",
      "1491:         double freq = vnc_update_freq(vs, x, y, w, h);",
      "1494:             allow_jpeg = false;",
      "1495:         }",
      "1497:             force_jpeg = true;",
      "1498:             vnc_sent_lossy_rect(vs, x, y, w, h);",
      "1499:         }",
      "",
      "[Removed Lines]",
      "1483:     vnc_framebuffer_update(vs, x, y, w, h, vs->tight.type);",
      "1490:     if (!vs->vd->non_adaptive && vs->tight.quality != (uint8_t)-1) {",
      "1493:         if (freq < tight_jpeg_conf[vs->tight.quality].jpeg_freq_min) {",
      "1496:         if (freq >= tight_jpeg_conf[vs->tight.quality].jpeg_freq_threshold) {",
      "",
      "[Added Lines]",
      "1486:     vnc_framebuffer_update(vs, x, y, w, h, vs->tight->type);",
      "1493:     if (!vs->vd->non_adaptive && vs->tight->quality != (uint8_t)-1) {",
      "1496:         if (freq < tight_jpeg_conf[vs->tight->quality].jpeg_freq_min) {",
      "1499:         if (freq >= tight_jpeg_conf[vs->tight->quality].jpeg_freq_threshold) {",
      "",
      "---------------",
      "--- Hunk 41 ---",
      "[Context before]",
      "1503:     colors = tight_fill_palette(vs, x, y, w * h, &bg, &fg, color_count_palette);",
      "1505: #ifdef CONFIG_VNC_JPEG",
      "1507:         ret = send_sub_rect_jpeg(vs, x, y, w, h, bg, fg, colors,",
      "1508:                                  color_count_palette, force_jpeg);",
      "1509:     } else {",
      "",
      "[Removed Lines]",
      "1506:     if (allow_jpeg && vs->tight.quality != (uint8_t)-1) {",
      "",
      "[Added Lines]",
      "1509:     if (allow_jpeg && vs->tight->quality != (uint8_t)-1) {",
      "",
      "---------------",
      "--- Hunk 42 ---",
      "[Context before]",
      "1521: static int send_sub_rect_solid(VncState *vs, int x, int y, int w, int h)",
      "1522: {",
      "1525:     vnc_tight_start(vs);",
      "1526:     vnc_raw_send_framebuffer_update(vs, x, y, w, h);",
      "",
      "[Removed Lines]",
      "1523:     vnc_framebuffer_update(vs, x, y, w, h, vs->tight.type);",
      "",
      "[Added Lines]",
      "1526:     vnc_framebuffer_update(vs, x, y, w, h, vs->tight->type);",
      "",
      "---------------",
      "--- Hunk 43 ---",
      "[Context before]",
      "1538:     int rw, rh;",
      "1539:     int n = 0;",
      "1544:     if (split && (w > max_width || w * h > max_size)) {",
      "1545:         max_sub_width = (w > max_width) ? max_width : w;",
      "",
      "[Removed Lines]",
      "1541:     max_size = tight_conf[vs->tight.compression].max_rect_size;",
      "1542:     max_width = tight_conf[vs->tight.compression].max_rect_width;",
      "",
      "[Added Lines]",
      "1544:     max_size = tight_conf[vs->tight->compression].max_rect_size;",
      "1545:     max_width = tight_conf[vs->tight->compression].max_rect_width;",
      "",
      "---------------",
      "--- Hunk 44 ---",
      "[Context before]",
      "1649:     if (vs->client_pf.bytes_per_pixel == 4 && vs->client_pf.rmax == 0xFF &&",
      "1650:         vs->client_pf.bmax == 0xFF && vs->client_pf.gmax == 0xFF) {",
      "1652:     } else {",
      "1654:     }",
      "1656: #ifdef CONFIG_VNC_JPEG",
      "1658:         double freq = vnc_update_freq(vs, x, y, w, h);",
      "1661:             return send_rect_simple(vs, x, y, w, h, false);",
      "1662:         }",
      "1663:     }",
      "",
      "[Removed Lines]",
      "1651:         vs->tight.pixel24 = true;",
      "1653:         vs->tight.pixel24 = false;",
      "1657:     if (vs->tight.quality != (uint8_t)-1) {",
      "1660:         if (freq > tight_jpeg_conf[vs->tight.quality].jpeg_freq_threshold) {",
      "",
      "[Added Lines]",
      "1654:         vs->tight->pixel24 = true;",
      "1656:         vs->tight->pixel24 = false;",
      "1660:     if (vs->tight->quality != (uint8_t)-1) {",
      "1663:         if (freq > tight_jpeg_conf[vs->tight->quality].jpeg_freq_threshold) {",
      "",
      "---------------",
      "--- Hunk 45 ---",
      "[Context before]",
      "1675:     return find_large_solid_color_rect(vs, x, y, w, h, max_rows);",
      "1676: }",
      "",
      "[Removed Lines]",
      "1672:     max_rows = tight_conf[vs->tight.compression].max_rect_size;",
      "1673:     max_rows /= MIN(tight_conf[vs->tight.compression].max_rect_width, w);",
      "",
      "[Added Lines]",
      "1675:     max_rows = tight_conf[vs->tight->compression].max_rect_size;",
      "1676:     max_rows /= MIN(tight_conf[vs->tight->compression].max_rect_width, w);",
      "",
      "---------------",
      "--- Hunk 46 ---",
      "[Context before]",
      "1678: int vnc_tight_send_framebuffer_update(VncState *vs, int x, int y,",
      "1679:                                       int w, int h)",
      "1680: {",
      "1682:     return tight_send_framebuffer_update(vs, x, y, w, h);",
      "1683: }",
      "1685: int vnc_tight_png_send_framebuffer_update(VncState *vs, int x, int y,",
      "1686:                                           int w, int h)",
      "1687: {",
      "1689:     return tight_send_framebuffer_update(vs, x, y, w, h);",
      "1690: }",
      "1692: void vnc_tight_clear(VncState *vs)",
      "1693: {",
      "1694:     int i;",
      "1698:         }",
      "1699:     }",
      "1704: #ifdef CONFIG_VNC_JPEG",
      "1706: #endif",
      "1707: #ifdef CONFIG_VNC_PNG",
      "1709: #endif",
      "1710: }",
      "",
      "[Removed Lines]",
      "1681:     vs->tight.type = VNC_ENCODING_TIGHT;",
      "1688:     vs->tight.type = VNC_ENCODING_TIGHT_PNG;",
      "1695:     for (i=0; i<ARRAY_SIZE(vs->tight.stream); i++) {",
      "1696:         if (vs->tight.stream[i].opaque) {",
      "1697:             deflateEnd(&vs->tight.stream[i]);",
      "1701:     buffer_free(&vs->tight.tight);",
      "1702:     buffer_free(&vs->tight.zlib);",
      "1703:     buffer_free(&vs->tight.gradient);",
      "1705:     buffer_free(&vs->tight.jpeg);",
      "1708:     buffer_free(&vs->tight.png);",
      "",
      "[Added Lines]",
      "1684:     vs->tight->type = VNC_ENCODING_TIGHT;",
      "1691:     vs->tight->type = VNC_ENCODING_TIGHT_PNG;",
      "1698:     for (i = 0; i < ARRAY_SIZE(vs->tight->stream); i++) {",
      "1699:         if (vs->tight->stream[i].opaque) {",
      "1700:             deflateEnd(&vs->tight->stream[i]);",
      "1704:     buffer_free(&vs->tight->tight);",
      "1705:     buffer_free(&vs->tight->zlib);",
      "1706:     buffer_free(&vs->tight->gradient);",
      "1708:     buffer_free(&vs->tight->jpeg);",
      "1711:     buffer_free(&vs->tight->png);",
      "",
      "---------------"
    ],
    "ui/vnc-enc-zlib.c||ui/vnc-enc-zlib.c": [
      "File: ui/vnc-enc-zlib.c -> ui/vnc-enc-zlib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:         zstream->zalloc = vnc_zlib_zalloc;",
      "77:         zstream->zfree = vnc_zlib_zfree;",
      "80:                            MAX_MEM_LEVEL, Z_DEFAULT_STRATEGY);",
      "82:         if (err != Z_OK) {",
      "",
      "[Removed Lines]",
      "79:         err = deflateInit2(zstream, vs->tight.compression, Z_DEFLATED, MAX_WBITS,",
      "",
      "[Added Lines]",
      "79:         err = deflateInit2(zstream, vs->tight->compression, Z_DEFLATED,",
      "80:                            MAX_WBITS,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "84:             return -1;",
      "85:         }",
      "88:         zstream->opaque = vs;",
      "89:     }",
      "93:                           Z_DEFAULT_STRATEGY) != Z_OK) {",
      "94:             return -1;",
      "95:         }",
      "97:     }",
      "",
      "[Removed Lines]",
      "87:         vs->zlib.level = vs->tight.compression;",
      "91:     if (vs->tight.compression != vs->zlib.level) {",
      "92:         if (deflateParams(zstream, vs->tight.compression,",
      "96:         vs->zlib.level = vs->tight.compression;",
      "",
      "[Added Lines]",
      "88:         vs->zlib.level = vs->tight->compression;",
      "92:     if (vs->tight->compression != vs->zlib.level) {",
      "93:         if (deflateParams(zstream, vs->tight->compression,",
      "97:         vs->zlib.level = vs->tight->compression;",
      "",
      "---------------"
    ],
    "ui/vnc-enc-zrle.c||ui/vnc-enc-zrle.c": [
      "File: ui/vnc-enc-zrle.c -> ui/vnc-enc-zrle.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "38: static void vnc_zrle_start(VncState *vs)",
      "39: {",
      "45: }",
      "47: static void vnc_zrle_stop(VncState *vs)",
      "48: {",
      "52: }",
      "54: static void *zrle_convert_fb(VncState *vs, int x, int y, int w, int h,",
      "",
      "[Removed Lines]",
      "40:     buffer_reset(&vs->zrle.zrle);",
      "43:     vs->zrle.tmp = vs->output;",
      "44:     vs->output = vs->zrle.zrle;",
      "50:     vs->zrle.zrle = vs->output;",
      "51:     vs->output = vs->zrle.tmp;",
      "",
      "[Added Lines]",
      "40:     buffer_reset(&vs->zrle->zrle);",
      "43:     vs->zrle->tmp = vs->output;",
      "44:     vs->output = vs->zrle->zrle;",
      "50:     vs->zrle->zrle = vs->output;",
      "51:     vs->output = vs->zrle->tmp;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "56: {",
      "57:     Buffer tmp;",
      "62:     tmp = vs->output;",
      "65:     vnc_raw_send_framebuffer_update(vs, x, y, w, h);",
      "68:     vs->output = tmp;",
      "70: }",
      "72: static int zrle_compress_data(VncState *vs, int level)",
      "73: {",
      "78:     if (zstream->opaque != vs) {",
      "79:         int err;",
      "",
      "[Removed Lines]",
      "59:     buffer_reset(&vs->zrle.fb);",
      "60:     buffer_reserve(&vs->zrle.fb, w * h * bpp + bpp);",
      "63:     vs->output = vs->zrle.fb;",
      "67:     vs->zrle.fb = vs->output;",
      "69:     return vs->zrle.fb.buffer;",
      "74:     z_streamp zstream = &vs->zrle.stream;",
      "76:     buffer_reset(&vs->zrle.zlib);",
      "",
      "[Added Lines]",
      "59:     buffer_reset(&vs->zrle->fb);",
      "60:     buffer_reserve(&vs->zrle->fb, w * h * bpp + bpp);",
      "63:     vs->output = vs->zrle->fb;",
      "67:     vs->zrle->fb = vs->output;",
      "69:     return vs->zrle->fb.buffer;",
      "74:     z_streamp zstream = &vs->zrle->stream;",
      "76:     buffer_reset(&vs->zrle->zlib);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "93:     }",
      "103:     zstream->data_type = Z_BINARY;",
      "",
      "[Removed Lines]",
      "96:     buffer_reserve(&vs->zrle.zlib, vs->zrle.zrle.offset + 64);",
      "99:     zstream->next_in = vs->zrle.zrle.buffer;",
      "100:     zstream->avail_in = vs->zrle.zrle.offset;",
      "101:     zstream->next_out = vs->zrle.zlib.buffer + vs->zrle.zlib.offset;",
      "102:     zstream->avail_out = vs->zrle.zlib.capacity - vs->zrle.zlib.offset;",
      "",
      "[Added Lines]",
      "96:     buffer_reserve(&vs->zrle->zlib, vs->zrle->zrle.offset + 64);",
      "99:     zstream->next_in = vs->zrle->zrle.buffer;",
      "100:     zstream->avail_in = vs->zrle->zrle.offset;",
      "101:     zstream->next_out = vs->zrle->zlib.buffer + vs->zrle->zlib.offset;",
      "102:     zstream->avail_out = vs->zrle->zlib.capacity - vs->zrle->zlib.offset;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "108:         return -1;",
      "109:     }",
      "113: }",
      "",
      "[Removed Lines]",
      "111:     vs->zrle.zlib.offset = vs->zrle.zlib.capacity - zstream->avail_out;",
      "112:     return vs->zrle.zlib.offset;",
      "",
      "[Added Lines]",
      "111:     vs->zrle->zlib.offset = vs->zrle->zlib.capacity - zstream->avail_out;",
      "112:     return vs->zrle->zlib.offset;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "259:     size_t bytes;",
      "260:     int zywrle_level;",
      "265:             zywrle_level = 0;",
      "268:             zywrle_level = 3;",
      "270:             zywrle_level = 2;",
      "271:         } else {",
      "272:             zywrle_level = 1;",
      "",
      "[Removed Lines]",
      "262:     if (vs->zrle.type == VNC_ENCODING_ZYWRLE) {",
      "263:         if (!vs->vd->lossy || vs->tight.quality == (uint8_t)-1",
      "264:             || vs->tight.quality == 9) {",
      "266:             vs->zrle.type = VNC_ENCODING_ZRLE;",
      "267:         } else if (vs->tight.quality < 3) {",
      "269:         } else if (vs->tight.quality < 6) {",
      "",
      "[Added Lines]",
      "262:     if (vs->zrle->type == VNC_ENCODING_ZYWRLE) {",
      "263:         if (!vs->vd->lossy || vs->tight->quality == (uint8_t)-1",
      "264:             || vs->tight->quality == 9) {",
      "266:             vs->zrle->type = VNC_ENCODING_ZRLE;",
      "267:         } else if (vs->tight->quality < 3) {",
      "269:         } else if (vs->tight->quality < 6) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "338:     vnc_zrle_stop(vs);",
      "339:     bytes = zrle_compress_data(vs, Z_DEFAULT_COMPRESSION);",
      "341:     vnc_write_u32(vs, bytes);",
      "343:     return 1;",
      "344: }",
      "346: int vnc_zrle_send_framebuffer_update(VncState *vs, int x, int y, int w, int h)",
      "347: {",
      "349:     return zrle_send_framebuffer_update(vs, x, y, w, h);",
      "350: }",
      "352: int vnc_zywrle_send_framebuffer_update(VncState *vs, int x, int y, int w, int h)",
      "353: {",
      "355:     return zrle_send_framebuffer_update(vs, x, y, w, h);",
      "356: }",
      "358: void vnc_zrle_clear(VncState *vs)",
      "359: {",
      "362:     }",
      "366: }",
      "",
      "[Removed Lines]",
      "340:     vnc_framebuffer_update(vs, x, y, w, h, vs->zrle.type);",
      "342:     vnc_write(vs, vs->zrle.zlib.buffer, vs->zrle.zlib.offset);",
      "348:     vs->zrle.type = VNC_ENCODING_ZRLE;",
      "354:     vs->zrle.type = VNC_ENCODING_ZYWRLE;",
      "360:     if (vs->zrle.stream.opaque) {",
      "361:         deflateEnd(&vs->zrle.stream);",
      "363:     buffer_free(&vs->zrle.zrle);",
      "364:     buffer_free(&vs->zrle.fb);",
      "365:     buffer_free(&vs->zrle.zlib);",
      "",
      "[Added Lines]",
      "340:     vnc_framebuffer_update(vs, x, y, w, h, vs->zrle->type);",
      "342:     vnc_write(vs, vs->zrle->zlib.buffer, vs->zrle->zlib.offset);",
      "348:     vs->zrle->type = VNC_ENCODING_ZRLE;",
      "354:     vs->zrle->type = VNC_ENCODING_ZYWRLE;",
      "360:     if (vs->zrle->stream.opaque) {",
      "361:         deflateEnd(&vs->zrle->stream);",
      "363:     buffer_free(&vs->zrle->zrle);",
      "364:     buffer_free(&vs->zrle->fb);",
      "365:     buffer_free(&vs->zrle->zlib);",
      "",
      "---------------"
    ],
    "ui/vnc-enc-zrle.inc.c||ui/vnc-enc-zrle.inc.c": [
      "File: ui/vnc-enc-zrle.inc.c -> ui/vnc-enc-zrle.inc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "96: static void ZRLE_ENCODE_TILE(VncState *vs, ZRLE_PIXEL *data, int w, int h,",
      "97:                              int zywrle_level)",
      "98: {",
      "101:     int runs = 0;",
      "102:     int single_pixels = 0;",
      "",
      "[Removed Lines]",
      "99:     VncPalette *palette = &vs->zrle.palette;",
      "",
      "[Added Lines]",
      "99:     VncPalette *palette = &vs->zrle->palette;",
      "",
      "---------------"
    ],
    "ui/vnc.c||ui/vnc.c": [
      "File: ui/vnc.c -> ui/vnc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1307:     object_unref(OBJECT(vs->sioc));",
      "1308:     vs->sioc = NULL;",
      "1309:     vs->magic = 0;",
      "1310:     g_free(vs);",
      "1311: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1310:     g_free(vs->zrle);",
      "1311:     g_free(vs->tight);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2059:     vs->features = 0;",
      "2060:     vs->vnc_encoding = 0;",
      "2063:     vs->absolute = -1;",
      "",
      "[Removed Lines]",
      "2061:     vs->tight.compression = 9;",
      "",
      "[Added Lines]",
      "2063:     vs->tight->compression = 9;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2127:             vs->features |= VNC_FEATURE_LED_STATE_MASK;",
      "2128:             break;",
      "2129:         case VNC_ENCODING_COMPRESSLEVEL0 ... VNC_ENCODING_COMPRESSLEVEL0 + 9:",
      "2131:             break;",
      "2132:         case VNC_ENCODING_QUALITYLEVEL0 ... VNC_ENCODING_QUALITYLEVEL0 + 9:",
      "2133:             if (vs->vd->lossy) {",
      "2135:             }",
      "2136:             break;",
      "2137:         default:",
      "",
      "[Removed Lines]",
      "2130:             vs->tight.compression = (enc & 0x0F);",
      "2134:                 vs->tight.quality = (enc & 0x0F);",
      "",
      "[Added Lines]",
      "2132:             vs->tight->compression = (enc & 0x0F);",
      "2136:                 vs->tight->quality = (enc & 0x0F);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "3034:     int i;",
      "3036:     trace_vnc_client_connect(vs, sioc);",
      "3037:     vs->magic = VNC_MAGIC;",
      "3038:     vs->sioc = sioc;",
      "3039:     object_ref(OBJECT(vs->sioc));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3039:     vs->zrle = g_new0(VncZrle, 1);",
      "3040:     vs->tight = g_new0(VncTight, 1);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "3045:     buffer_init(&vs->output,         \"vnc-output/%p\", sioc);",
      "3046:     buffer_init(&vs->jobs_buffer,    \"vnc-jobs_buffer/%p\", sioc);",
      "3051: #ifdef CONFIG_VNC_JPEG",
      "3053: #endif",
      "3054: #ifdef CONFIG_VNC_PNG",
      "3056: #endif",
      "3057:     buffer_init(&vs->zlib.zlib,      \"vnc-zlib/%p\", sioc);",
      "3062:     if (skipauth) {",
      "3063:         vs->auth = VNC_AUTH_NONE;",
      "",
      "[Removed Lines]",
      "3048:     buffer_init(&vs->tight.tight,    \"vnc-tight/%p\", sioc);",
      "3049:     buffer_init(&vs->tight.zlib,     \"vnc-tight-zlib/%p\", sioc);",
      "3050:     buffer_init(&vs->tight.gradient, \"vnc-tight-gradient/%p\", sioc);",
      "3052:     buffer_init(&vs->tight.jpeg,     \"vnc-tight-jpeg/%p\", sioc);",
      "3055:     buffer_init(&vs->tight.png,      \"vnc-tight-png/%p\", sioc);",
      "3058:     buffer_init(&vs->zrle.zrle,      \"vnc-zrle/%p\", sioc);",
      "3059:     buffer_init(&vs->zrle.fb,        \"vnc-zrle-fb/%p\", sioc);",
      "3060:     buffer_init(&vs->zrle.zlib,      \"vnc-zrle-zlib/%p\", sioc);",
      "",
      "[Added Lines]",
      "3052:     buffer_init(&vs->tight->tight,    \"vnc-tight/%p\", sioc);",
      "3053:     buffer_init(&vs->tight->zlib,     \"vnc-tight-zlib/%p\", sioc);",
      "3054:     buffer_init(&vs->tight->gradient, \"vnc-tight-gradient/%p\", sioc);",
      "3056:     buffer_init(&vs->tight->jpeg,     \"vnc-tight-jpeg/%p\", sioc);",
      "3059:     buffer_init(&vs->tight->png,      \"vnc-tight-png/%p\", sioc);",
      "3062:     buffer_init(&vs->zrle->zrle,      \"vnc-zrle/%p\", sioc);",
      "3063:     buffer_init(&vs->zrle->fb,        \"vnc-zrle-fb/%p\", sioc);",
      "3064:     buffer_init(&vs->zrle->zlib,      \"vnc-zrle-zlib/%p\", sioc);",
      "",
      "---------------"
    ],
    "ui/vnc.h||ui/vnc.h": [
      "File: ui/vnc.h -> ui/vnc.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "342:     VncZlib zlib;",
      "343:     VncHextile hextile;",
      "345:     VncZywrle zywrle;",
      "347:     Notifier mouse_mode_notifier;",
      "",
      "[Removed Lines]",
      "341:     VncTight tight;",
      "344:     VncZrle zrle;",
      "",
      "[Added Lines]",
      "341:     VncTight *tight;",
      "344:     VncZrle *zrle;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "557ba0e57200014bd4f453f6516f02b61bdfc782",
      "candidate_info": {
        "commit_hash": "557ba0e57200014bd4f453f6516f02b61bdfc782",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/557ba0e57200014bd4f453f6516f02b61bdfc782",
        "files": [
          "ui/vnc-enc-zrle.c",
          "ui/vnc.c"
        ],
        "message": "vnc: prioritize ZRLE compression over ZLIB\n\nIn my investigation, ZRLE always compresses better than ZLIB so\nprioritize ZRLE over ZLIB, even if the client hints that ZLIB is\npreferred.\n\nzlib buffer is always reset in zrle_compress_data(), so using offset to\ncalculate next_out and avail_out is useless.\n\nSigned-off-by: Cameron Esfahani <dirty@apple.com>\nMessage-Id: <b5d129895d08a90d0a2a6183b95875bacfa998b8.1579582674.git.dirty@apple.com>\nSigned-off-by: Gerd Hoffmann <kraxel@redhat.com>",
        "before_after_code_files": [
          "ui/vnc-enc-zrle.c||ui/vnc-enc-zrle.c",
          "ui/vnc.c||ui/vnc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ui/vnc-enc-zrle.c||ui/vnc-enc-zrle.c",
            "ui/vnc.c||ui/vnc.c"
          ],
          "candidate": [
            "ui/vnc-enc-zrle.c||ui/vnc-enc-zrle.c",
            "ui/vnc.c||ui/vnc.c"
          ]
        }
      },
      "candidate_diff": {
        "ui/vnc-enc-zrle.c||ui/vnc-enc-zrle.c": [
          "File: ui/vnc-enc-zrle.c -> ui/vnc-enc-zrle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:     zstream->next_in = vs->zrle->zrle.buffer;",
          "100:     zstream->avail_in = vs->zrle->zrle.offset;",
          "103:     zstream->data_type = Z_BINARY;",
          "",
          "[Removed Lines]",
          "101:     zstream->next_out = vs->zrle->zlib.buffer + vs->zrle->zlib.offset;",
          "102:     zstream->avail_out = vs->zrle->zlib.capacity - vs->zrle->zlib.offset;",
          "",
          "[Added Lines]",
          "101:     zstream->next_out = vs->zrle->zlib.buffer;",
          "102:     zstream->avail_out = vs->zrle->zlib.capacity;",
          "",
          "---------------"
        ],
        "ui/vnc.c||ui/vnc.c": [
          "File: ui/vnc.c -> ui/vnc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2071:             break;",
          "2072: #endif",
          "2073:         case VNC_ENCODING_ZLIB:",
          "2076:             break;",
          "2077:         case VNC_ENCODING_ZRLE:",
          "2078:             vs->features |= VNC_FEATURE_ZRLE_MASK;",
          "",
          "[Removed Lines]",
          "2074:             vs->features |= VNC_FEATURE_ZLIB_MASK;",
          "2075:             vs->vnc_encoding = enc;",
          "",
          "[Added Lines]",
          "2079:             if ((vs->features & VNC_FEATURE_ZRLE_MASK) == 0) {",
          "2080:                 vs->features |= VNC_FEATURE_ZLIB_MASK;",
          "2081:                 vs->vnc_encoding = enc;",
          "2082:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}