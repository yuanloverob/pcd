{
  "cve_id": "CVE-2022-23581",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. The Grappler optimizer in TensorFlow can be used to cause a denial of service by altering a `SavedModel` such that `IsSimplifiableReshape` would trigger `CHECK` failures. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1",
  "patch_info": {
    "commit_hash": "ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/ebc1a2ffe5a7573d905e99bd0ee3568ee07c12c1",
    "files": [
      "tensorflow/core/grappler/optimizers/constant_folding.cc",
      "tensorflow/core/grappler/optimizers/constant_folding.h"
    ],
    "message": "Make `IsSimplifiableReshape` return `Status` instead of `bool`.\n\nThis is to allow remove `CHECK`-fails in subsequent commits.\n\nPiperOrigin-RevId: 409160987\nChange-Id: I3f050218a3832271395c4372a0b8ea05f1c03d80",
    "before_after_code_files": [
      "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc",
      "tensorflow/core/grappler/optimizers/constant_folding.h||tensorflow/core/grappler/optimizers/constant_folding.h"
    ]
  },
  "patch_diff": {
    "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc": [
      "File: tensorflow/core/grappler/optimizers/constant_folding.cc -> tensorflow/core/grappler/optimizers/constant_folding.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1684:   return Status::OK();",
      "1685: }",
      "1688:     const NodeDef& node, const GraphProperties& properties) const {",
      "1689:   if (!IsReshape(node)) {",
      "1691:   }",
      "1692:   CHECK_LE(2, node.input_size());",
      "1693:   const NodeDef* new_shape = node_map_->GetNode(node.input(1));",
      "1694:   if (!IsReallyConstant(*new_shape)) {",
      "1696:   }",
      "1697:   TensorVector outputs;",
      "1698:   auto outputs_cleanup = gtl::MakeCleanup([&outputs] {",
      "",
      "[Removed Lines]",
      "1687: bool ConstantFolding::IsSimplifiableReshape(",
      "1690:     return false;",
      "1695:     return false;",
      "",
      "[Added Lines]",
      "1687: Status ConstantFolding::IsSimplifiableReshape(",
      "1690:     return errors::Internal(\"Node \", node.name(), \" is not a Reshape node\");",
      "1695:     return errors::Internal(\"Node \", node.name(), \" has shape \",",
      "1696:                             new_shape->DebugString(),",
      "1697:                             \" which is not a constant\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1704:   Status s = EvaluateNode(*new_shape, TensorVector(), &outputs);",
      "1705:   if (!s.ok()) {",
      "1707:   }",
      "1708:   CHECK_EQ(1, outputs.size());",
      "1710:   const std::vector<OpInfo::TensorProperties>& props =",
      "1711:       properties.GetInputProperties(node.name());",
      "1712:   if (props.empty()) {",
      "1714:   }",
      "1715:   const OpInfo::TensorProperties& prop = props[0];",
      "1716:   if (prop.dtype() == DT_INVALID) {",
      "1718:   }",
      "1719:   const PartialTensorShape shape(prop.shape());",
      "1720:   if (!shape.IsFullyDefined()) {",
      "1722:   }",
      "1724:   PartialTensorShape new_dims;",
      "",
      "[Removed Lines]",
      "1706:     return false;",
      "1713:     return false;",
      "1717:     return false;",
      "1721:     return false;",
      "",
      "[Added Lines]",
      "1708:     return errors::Internal(\"Could not evaluate node \", node.name());",
      "1715:     return errors::Internal(\"Node \", node.name(), \" has no properties\");",
      "1719:     return errors::Internal(\"Node \", node.name(), \" has property \",",
      "1720:                             prop.DebugString(), \" with invalid dtype\");",
      "1724:     return errors::Internal(\"Node \", node.name(), \" has property \",",
      "1725:                             prop.DebugString(), \" with shape \",",
      "1726:                             shape.DebugString(), \" which is not fully defined\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1738:     TF_CHECK_OK(TensorShapeUtils::MakeShape(shp, &new_dims));",
      "1739:   }",
      "1742: }",
      "1744: #define IS_VALUE_CASE(DTYPE, VALUE)                   \\",
      "",
      "[Removed Lines]",
      "1741:   return shape.IsCompatibleWith(new_dims);",
      "",
      "[Added Lines]",
      "1746:   if (!shape.IsCompatibleWith(new_dims)) {",
      "1747:     return errors::Internal(\"Expected shape \", shape.DebugString(),",
      "1748:                             \"to be compatible with \", new_dims.DebugString());",
      "1749:   }",
      "1751:   return Status::OK();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2925: bool ConstantFolding::SimplifyReshape(const GraphProperties& properties,",
      "2926:                                       bool use_shape_info, NodeDef* node) {",
      "2927:   if (!use_shape_info || node->attr().count(\"T\") == 0 ||",
      "2929:     return false;",
      "2930:   }",
      "2931:   DataType output_type = node->attr().at(\"T\").type();",
      "",
      "[Removed Lines]",
      "2928:       !IsSimplifiableReshape(*node, properties)) {",
      "",
      "[Added Lines]",
      "2938:       !IsSimplifiableReshape(*node, properties).ok()) {",
      "",
      "---------------"
    ],
    "tensorflow/core/grappler/optimizers/constant_folding.h||tensorflow/core/grappler/optimizers/constant_folding.h": [
      "File: tensorflow/core/grappler/optimizers/constant_folding.h -> tensorflow/core/grappler/optimizers/constant_folding.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "129:   Status FoldGraph(const GraphProperties& properties, GraphDef* output,",
      "130:                    absl::flat_hash_set<string>* nodes_to_not_simplify);",
      "134:   Status SimplifyGraph(GraphDef* optimized_graph, GraphProperties* properties,",
      "135:                        absl::flat_hash_set<string>* nodes_to_not_simplify);",
      "136:   Status SimplifyNode(NodeDef* node, GraphDef* optimized_graph,",
      "",
      "[Removed Lines]",
      "132:   bool IsSimplifiableReshape(const NodeDef& node,",
      "133:                              const GraphProperties& properties) const;",
      "",
      "[Added Lines]",
      "132:   Status IsSimplifiableReshape(const NodeDef& node,",
      "133:                                const GraphProperties& properties) const;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b078d79e1dc814aecd80bfe44c839dcd735dacae",
      "candidate_info": {
        "commit_hash": "b078d79e1dc814aecd80bfe44c839dcd735dacae",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b078d79e1dc814aecd80bfe44c839dcd735dacae",
        "files": [
          "tensorflow/core/grappler/optimizers/constant_folding.cc",
          "tensorflow/core/grappler/optimizers/constant_folding.h"
        ],
        "message": "Make `IsSimplifiableReshape` return `Status` instead of `bool`.\n\nThis is to allow remove `CHECK`-fails in subsequent commits.\n\nPiperOrigin-RevId: 409160987\nChange-Id: I3f050218a3832271395c4372a0b8ea05f1c03d80",
        "before_after_code_files": [
          "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc",
          "tensorflow/core/grappler/optimizers/constant_folding.h||tensorflow/core/grappler/optimizers/constant_folding.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc",
            "tensorflow/core/grappler/optimizers/constant_folding.h||tensorflow/core/grappler/optimizers/constant_folding.h"
          ],
          "candidate": [
            "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc",
            "tensorflow/core/grappler/optimizers/constant_folding.h||tensorflow/core/grappler/optimizers/constant_folding.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc": [
          "File: tensorflow/core/grappler/optimizers/constant_folding.cc -> tensorflow/core/grappler/optimizers/constant_folding.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1665:   return Status::OK();",
          "1666: }",
          "1669:     const NodeDef& node, const GraphProperties& properties) const {",
          "1670:   if (!IsReshape(node)) {",
          "1672:   }",
          "1673:   if (2 > node.input_size()) {",
          "1674:     return errors::Internal(\"Node \", node.name(),",
          "",
          "[Removed Lines]",
          "1668: bool ConstantFolding::IsSimplifiableReshape(",
          "1671:     return false;",
          "",
          "[Added Lines]",
          "1668: Status ConstantFolding::IsSimplifiableReshape(",
          "1671:     return errors::Internal(\"Node \", node.name(), \" is not a Reshape node\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1677:   }",
          "1678:   const NodeDef* new_shape = node_map_->GetNode(node.input(1));",
          "1679:   if (!IsReallyConstant(*new_shape)) {",
          "1681:   }",
          "1682:   TensorVector outputs;",
          "1683:   auto outputs_cleanup = gtl::MakeCleanup([&outputs] {",
          "",
          "[Removed Lines]",
          "1680:     return false;",
          "",
          "[Added Lines]",
          "1680:     return errors::Internal(\"Node \", node.name(), \" has shape \",",
          "1681:                             new_shape->DebugString(),",
          "1682:                             \" which is not a constant\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1689:   Status s = EvaluateNode(*new_shape, TensorVector(), &outputs);",
          "1690:   if (!s.ok()) {",
          "1692:   }",
          "1693:   if (outputs.size() != 1) {",
          "1694:     return errors::Internal(\"Node \", node.name(),",
          "",
          "[Removed Lines]",
          "1691:     return false;",
          "",
          "[Added Lines]",
          "1693:     return errors::Internal(\"Could not evaluate node \", node.name());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1699:   const std::vector<OpInfo::TensorProperties>& props =",
          "1700:       properties.GetInputProperties(node.name());",
          "1701:   if (props.empty()) {",
          "1703:   }",
          "1704:   const OpInfo::TensorProperties& prop = props[0];",
          "1705:   if (prop.dtype() == DT_INVALID) {",
          "1707:   }",
          "1708:   const PartialTensorShape shape(prop.shape());",
          "1709:   if (!shape.IsFullyDefined()) {",
          "1711:   }",
          "1713:   PartialTensorShape new_dims;",
          "",
          "[Removed Lines]",
          "1702:     return false;",
          "1706:     return false;",
          "1710:     return false;",
          "",
          "[Added Lines]",
          "1704:     return errors::Internal(\"Node \", node.name(), \" has no properties\");",
          "1708:     return errors::Internal(\"Node \", node.name(), \" has property \",",
          "1709:                             prop.DebugString(), \" with invalid dtype\");",
          "1713:     return errors::Internal(\"Node \", node.name(), \" has property \",",
          "1714:                             prop.DebugString(), \" with shape \",",
          "1715:                             shape.DebugString(), \" which is not fully defined\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1729:     if (!s.ok()) return s;",
          "1730:   }",
          "1733: }",
          "1735: #define IS_VALUE_CASE(DTYPE, VALUE)                   \\",
          "",
          "[Removed Lines]",
          "1732:   return shape.IsCompatibleWith(new_dims);",
          "",
          "[Added Lines]",
          "1737:   if (!shape.IsCompatibleWith(new_dims)) {",
          "1738:     return errors::Internal(\"Expected shape \", shape.DebugString(),",
          "1739:                             \"to be compatible with \", new_dims.DebugString());",
          "1740:   }",
          "1742:   return Status::OK();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2915: bool ConstantFolding::SimplifyReshape(const GraphProperties& properties,",
          "2916:                                       bool use_shape_info, NodeDef* node) {",
          "2917:   if (!use_shape_info || node->attr().count(\"T\") == 0 ||",
          "2919:     return false;",
          "2920:   }",
          "2921:   DataType output_type = node->attr().at(\"T\").type();",
          "",
          "[Removed Lines]",
          "2918:       !IsSimplifiableReshape(*node, properties)) {",
          "",
          "[Added Lines]",
          "2928:       !IsSimplifiableReshape(*node, properties).ok()) {",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/optimizers/constant_folding.h||tensorflow/core/grappler/optimizers/constant_folding.h": [
          "File: tensorflow/core/grappler/optimizers/constant_folding.h -> tensorflow/core/grappler/optimizers/constant_folding.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   Status FoldGraph(const GraphProperties& properties, GraphDef* output,",
          "133:                    absl::flat_hash_set<string>* nodes_to_not_simplify);",
          "137:   Status SimplifyGraph(bool use_shape_info, GraphDef* optimized_graph,",
          "138:                        GraphProperties* properties,",
          "139:                        absl::flat_hash_set<string>* nodes_to_not_simplify);",
          "",
          "[Removed Lines]",
          "135:   bool IsSimplifiableReshape(const NodeDef& node,",
          "136:                              const GraphProperties& properties) const;",
          "",
          "[Added Lines]",
          "135:   Status IsSimplifiableReshape(const NodeDef& node,",
          "136:                                const GraphProperties& properties) const;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b28babd26787127a21d3d8214f9318ce59a2a2c4",
      "candidate_info": {
        "commit_hash": "b28babd26787127a21d3d8214f9318ce59a2a2c4",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b28babd26787127a21d3d8214f9318ce59a2a2c4",
        "files": [
          "tensorflow/core/grappler/optimizers/constant_folding.cc",
          "tensorflow/core/grappler/optimizers/constant_folding.h"
        ],
        "message": "Make `IsSimplifiableReshape` return `Status` instead of `bool`.\n\nThis is to allow remove `CHECK`-fails in subsequent commits.\n\nPiperOrigin-RevId: 409160987\nChange-Id: I3f050218a3832271395c4372a0b8ea05f1c03d80",
        "before_after_code_files": [
          "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc",
          "tensorflow/core/grappler/optimizers/constant_folding.h||tensorflow/core/grappler/optimizers/constant_folding.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc",
            "tensorflow/core/grappler/optimizers/constant_folding.h||tensorflow/core/grappler/optimizers/constant_folding.h"
          ],
          "candidate": [
            "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc",
            "tensorflow/core/grappler/optimizers/constant_folding.h||tensorflow/core/grappler/optimizers/constant_folding.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc": [
          "File: tensorflow/core/grappler/optimizers/constant_folding.cc -> tensorflow/core/grappler/optimizers/constant_folding.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1681:   return Status::OK();",
          "1682: }",
          "1685:     const NodeDef& node, const GraphProperties& properties) const {",
          "1686:   if (!IsReshape(node)) {",
          "1688:   }",
          "1689:   if (2 > node.input_size()) {",
          "1690:     return errors::Internal(\"Node \", node.name(),",
          "",
          "[Removed Lines]",
          "1684: bool ConstantFolding::IsSimplifiableReshape(",
          "1687:     return false;",
          "",
          "[Added Lines]",
          "1684: Status ConstantFolding::IsSimplifiableReshape(",
          "1687:     return errors::Internal(\"Node \", node.name(), \" is not a Reshape node\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1693:   }",
          "1694:   const NodeDef* new_shape = node_map_->GetNode(node.input(1));",
          "1695:   if (!IsReallyConstant(*new_shape)) {",
          "1697:   }",
          "1698:   TensorVector outputs;",
          "1699:   auto outputs_cleanup = gtl::MakeCleanup([&outputs] {",
          "",
          "[Removed Lines]",
          "1696:     return false;",
          "",
          "[Added Lines]",
          "1696:     return errors::Internal(\"Node \", node.name(), \" has shape \",",
          "1697:                             new_shape->DebugString(),",
          "1698:                             \" which is not a constant\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1705:   Status s = EvaluateNode(*new_shape, TensorVector(), &outputs);",
          "1706:   if (!s.ok()) {",
          "1708:   }",
          "1709:   if (outputs.size() != 1) {",
          "1710:     return errors::Internal(\"Node \", node.name(),",
          "",
          "[Removed Lines]",
          "1707:     return false;",
          "",
          "[Added Lines]",
          "1709:     return errors::Internal(\"Could not evaluate node \", node.name());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1715:   const std::vector<OpInfo::TensorProperties>& props =",
          "1716:       properties.GetInputProperties(node.name());",
          "1717:   if (props.empty()) {",
          "1719:   }",
          "1720:   const OpInfo::TensorProperties& prop = props[0];",
          "1721:   if (prop.dtype() == DT_INVALID) {",
          "1723:   }",
          "1724:   const PartialTensorShape shape(prop.shape());",
          "1725:   if (!shape.IsFullyDefined()) {",
          "1727:   }",
          "1729:   PartialTensorShape new_dims;",
          "",
          "[Removed Lines]",
          "1718:     return false;",
          "1722:     return false;",
          "1726:     return false;",
          "",
          "[Added Lines]",
          "1720:     return errors::Internal(\"Node \", node.name(), \" has no properties\");",
          "1724:     return errors::Internal(\"Node \", node.name(), \" has property \",",
          "1725:                             prop.DebugString(), \" with invalid dtype\");",
          "1729:     return errors::Internal(\"Node \", node.name(), \" has property \",",
          "1730:                             prop.DebugString(), \" with shape \",",
          "1731:                             shape.DebugString(), \" which is not fully defined\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1745:     if (!s.ok()) return s;",
          "1746:   }",
          "1749: }",
          "1751: #define IS_VALUE_CASE(DTYPE, VALUE)                   \\",
          "",
          "[Removed Lines]",
          "1748:   return shape.IsCompatibleWith(new_dims);",
          "",
          "[Added Lines]",
          "1753:   if (!shape.IsCompatibleWith(new_dims)) {",
          "1754:     return errors::Internal(\"Expected shape \", shape.DebugString(),",
          "1755:                             \"to be compatible with \", new_dims.DebugString());",
          "1756:   }",
          "1758:   return Status::OK();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2931: bool ConstantFolding::SimplifyReshape(const GraphProperties& properties,",
          "2932:                                       bool use_shape_info, NodeDef* node) {",
          "2933:   if (!use_shape_info || node->attr().count(\"T\") == 0 ||",
          "2935:     return false;",
          "2936:   }",
          "2937:   DataType output_type = node->attr().at(\"T\").type();",
          "",
          "[Removed Lines]",
          "2934:       !IsSimplifiableReshape(*node, properties)) {",
          "",
          "[Added Lines]",
          "2944:       !IsSimplifiableReshape(*node, properties).ok()) {",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/optimizers/constant_folding.h||tensorflow/core/grappler/optimizers/constant_folding.h": [
          "File: tensorflow/core/grappler/optimizers/constant_folding.h -> tensorflow/core/grappler/optimizers/constant_folding.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:   Status FoldGraph(const GraphProperties& properties, GraphDef* output,",
          "130:                    absl::flat_hash_set<string>* nodes_to_not_simplify);",
          "134:   Status SimplifyGraph(bool use_shape_info, GraphDef* optimized_graph,",
          "135:                        GraphProperties* properties,",
          "136:                        absl::flat_hash_set<string>* nodes_to_not_simplify);",
          "",
          "[Removed Lines]",
          "132:   bool IsSimplifiableReshape(const NodeDef& node,",
          "133:                              const GraphProperties& properties) const;",
          "",
          "[Added Lines]",
          "132:   Status IsSimplifiableReshape(const NodeDef& node,",
          "133:                                const GraphProperties& properties) const;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb4cfbaa0b9d62798b75052efc06bc498ea05b05",
      "candidate_info": {
        "commit_hash": "eb4cfbaa0b9d62798b75052efc06bc498ea05b05",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/eb4cfbaa0b9d62798b75052efc06bc498ea05b05",
        "files": [
          "tensorflow/core/grappler/optimizers/constant_folding.cc",
          "tensorflow/core/grappler/optimizers/constant_folding.h"
        ],
        "message": "Make `IsSimplifiableReshape` return `Status` instead of `bool`.\n\nThis is to allow remove `CHECK`-fails in subsequent commits.\n\nPiperOrigin-RevId: 409160987\nChange-Id: I3f050218a3832271395c4372a0b8ea05f1c03d80",
        "before_after_code_files": [
          "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc",
          "tensorflow/core/grappler/optimizers/constant_folding.h||tensorflow/core/grappler/optimizers/constant_folding.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc",
            "tensorflow/core/grappler/optimizers/constant_folding.h||tensorflow/core/grappler/optimizers/constant_folding.h"
          ],
          "candidate": [
            "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc",
            "tensorflow/core/grappler/optimizers/constant_folding.h||tensorflow/core/grappler/optimizers/constant_folding.h"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/grappler/optimizers/constant_folding.cc||tensorflow/core/grappler/optimizers/constant_folding.cc": [
          "File: tensorflow/core/grappler/optimizers/constant_folding.cc -> tensorflow/core/grappler/optimizers/constant_folding.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1684:   return Status::OK();",
          "1685: }",
          "1688:     const NodeDef& node, const GraphProperties& properties) const {",
          "1689:   if (!IsReshape(node)) {",
          "1691:   }",
          "1692:   CHECK_LE(2, node.input_size());",
          "1693:   const NodeDef* new_shape = node_map_->GetNode(node.input(1));",
          "1694:   if (!IsReallyConstant(*new_shape)) {",
          "1696:   }",
          "1697:   TensorVector outputs;",
          "1698:   auto outputs_cleanup = gtl::MakeCleanup([&outputs] {",
          "",
          "[Removed Lines]",
          "1687: bool ConstantFolding::IsSimplifiableReshape(",
          "1690:     return false;",
          "1695:     return false;",
          "",
          "[Added Lines]",
          "1687: Status ConstantFolding::IsSimplifiableReshape(",
          "1690:     return errors::Internal(\"Node \", node.name(), \" is not a Reshape node\");",
          "1695:     return errors::Internal(\"Node \", node.name(), \" has shape \",",
          "1696:                             new_shape->DebugString(),",
          "1697:                             \" which is not a constant\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1704:   Status s = EvaluateNode(*new_shape, TensorVector(), &outputs);",
          "1705:   if (!s.ok()) {",
          "1707:   }",
          "1708:   CHECK_EQ(1, outputs.size());",
          "1710:   const std::vector<OpInfo::TensorProperties>& props =",
          "1711:       properties.GetInputProperties(node.name());",
          "1712:   if (props.empty()) {",
          "1714:   }",
          "1715:   const OpInfo::TensorProperties& prop = props[0];",
          "1716:   if (prop.dtype() == DT_INVALID) {",
          "1718:   }",
          "1719:   const PartialTensorShape shape(prop.shape());",
          "1720:   if (!shape.IsFullyDefined()) {",
          "1722:   }",
          "1724:   PartialTensorShape new_dims;",
          "",
          "[Removed Lines]",
          "1706:     return false;",
          "1713:     return false;",
          "1717:     return false;",
          "1721:     return false;",
          "",
          "[Added Lines]",
          "1708:     return errors::Internal(\"Could not evaluate node \", node.name());",
          "1715:     return errors::Internal(\"Node \", node.name(), \" has no properties\");",
          "1719:     return errors::Internal(\"Node \", node.name(), \" has property \",",
          "1720:                             prop.DebugString(), \" with invalid dtype\");",
          "1724:     return errors::Internal(\"Node \", node.name(), \" has property \",",
          "1725:                             prop.DebugString(), \" with shape \",",
          "1726:                             shape.DebugString(), \" which is not fully defined\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1738:     TF_CHECK_OK(TensorShapeUtils::MakeShape(shp, &new_dims));",
          "1739:   }",
          "1742: }",
          "1744: #define IS_VALUE_CASE(DTYPE, VALUE)                   \\",
          "",
          "[Removed Lines]",
          "1741:   return shape.IsCompatibleWith(new_dims);",
          "",
          "[Added Lines]",
          "1746:   if (!shape.IsCompatibleWith(new_dims)) {",
          "1747:     return errors::Internal(\"Expected shape \", shape.DebugString(),",
          "1748:                             \"to be compatible with \", new_dims.DebugString());",
          "1749:   }",
          "1751:   return Status::OK();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2925: bool ConstantFolding::SimplifyReshape(const GraphProperties& properties,",
          "2926:                                       bool use_shape_info, NodeDef* node) {",
          "2927:   if (!use_shape_info || node->attr().count(\"T\") == 0 ||",
          "2929:     return false;",
          "2930:   }",
          "2931:   DataType output_type = node->attr().at(\"T\").type();",
          "",
          "[Removed Lines]",
          "2928:       !IsSimplifiableReshape(*node, properties)) {",
          "",
          "[Added Lines]",
          "2938:       !IsSimplifiableReshape(*node, properties).ok()) {",
          "",
          "---------------"
        ],
        "tensorflow/core/grappler/optimizers/constant_folding.h||tensorflow/core/grappler/optimizers/constant_folding.h": [
          "File: tensorflow/core/grappler/optimizers/constant_folding.h -> tensorflow/core/grappler/optimizers/constant_folding.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "129:   Status FoldGraph(const GraphProperties& properties, GraphDef* output,",
          "130:                    absl::flat_hash_set<string>* nodes_to_not_simplify);",
          "134:   Status SimplifyGraph(GraphDef* optimized_graph, GraphProperties* properties,",
          "135:                        absl::flat_hash_set<string>* nodes_to_not_simplify);",
          "136:   Status SimplifyNode(NodeDef* node, GraphDef* optimized_graph,",
          "",
          "[Removed Lines]",
          "132:   bool IsSimplifiableReshape(const NodeDef& node,",
          "133:                              const GraphProperties& properties) const;",
          "",
          "[Added Lines]",
          "132:   Status IsSimplifiableReshape(const NodeDef& node,",
          "133:                                const GraphProperties& properties) const;",
          "",
          "---------------"
        ]
      }
    }
  ]
}