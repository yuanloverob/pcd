{
  "cve_id": "CVE-2017-14032",
  "cve_desc": "ARM mbed TLS before 1.3.21 and 2.x before 2.1.9, if optional authentication is configured, allows remote attackers to bypass peer authentication via an X.509 certificate chain with many intermediates. NOTE: although mbed TLS was formerly known as PolarSSL, the releases shipped with the PolarSSL name are not affected.",
  "repo": "ARMmbed/mbedtls",
  "patch_hash": "d15795acd5074e0b44e71f7ede8bdfe1b48591fc",
  "patch_info": {
    "commit_hash": "d15795acd5074e0b44e71f7ede8bdfe1b48591fc",
    "repo": "ARMmbed/mbedtls",
    "commit_url": "https://github.com/ARMmbed/mbedtls/commit/d15795acd5074e0b44e71f7ede8bdfe1b48591fc",
    "files": [
      "ChangeLog",
      "library/x509_crt.c",
      "tests/suites/test_suite_x509parse.data"
    ],
    "message": "Improve behaviour on fatal errors\n\nIf we didn't walk the whole chain, then there may be any kind of errors in the\npart of the chain we didn't check, so setting all flags looks like the safe\nthing to do.",
    "before_after_code_files": [
      "library/x509_crt.c||library/x509_crt.c",
      "tests/suites/test_suite_x509parse.data||tests/suites/test_suite_x509parse.data"
    ]
  },
  "patch_diff": {
    "library/x509_crt.c||library/x509_crt.c": [
      "File: library/x509_crt.c -> library/x509_crt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2202:     mbedtls_x509_sequence *cur = NULL;",
      "2203:     mbedtls_pk_type_t pk_type;",
      "2210:     if( cn != NULL )",
      "2211:     {",
      "2212:         name = &crt->subject;",
      "",
      "[Removed Lines]",
      "2205:     if( profile == NULL )",
      "2206:         return( MBEDTLS_ERR_X509_BAD_INPUT_DATA );",
      "",
      "[Added Lines]",
      "2207:     if( profile == NULL )",
      "2208:     {",
      "2209:         ret = MBEDTLS_ERR_X509_BAD_INPUT_DATA;",
      "2210:         goto exit;",
      "2211:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2280:         ret = x509_crt_verify_top( crt, parent, ca_crl, profile,",
      "2281:                                    pathlen, selfsigned, flags, f_vrfy, p_vrfy );",
      "2282:         if( ret != 0 )",
      "2284:     }",
      "2285:     else",
      "2286:     {",
      "",
      "[Removed Lines]",
      "2283:             return( ret );",
      "",
      "[Added Lines]",
      "2286:             goto exit;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2295:             ret = x509_crt_verify_child( crt, parent, trust_ca, ca_crl, profile,",
      "2296:                                          pathlen, selfsigned, flags, f_vrfy, p_vrfy );",
      "2297:             if( ret != 0 )",
      "2299:         }",
      "2300:         else",
      "2301:         {",
      "2302:             ret = x509_crt_verify_top( crt, trust_ca, ca_crl, profile,",
      "2303:                                        pathlen, selfsigned, flags, f_vrfy, p_vrfy );",
      "2304:             if( ret != 0 )",
      "2306:         }",
      "2307:     }",
      "2309:     if( *flags != 0 )",
      "2310:         return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );",
      "",
      "[Removed Lines]",
      "2298:                 return( ret );",
      "2305:                 return( ret );",
      "",
      "[Added Lines]",
      "2301:                 goto exit;",
      "2308:                 goto exit;",
      "2312: exit:",
      "2313:     if( ret != 0 )",
      "2314:     {",
      "2316:         return( ret );",
      "2317:     }",
      "",
      "---------------"
    ],
    "tests/suites/test_suite_x509parse.data||tests/suites/test_suite_x509parse.data": [
      "File: tests/suites/test_suite_x509parse.data -> tests/suites/test_suite_x509parse.data",
      "--- Hunk 1 ---",
      "[Context before]",
      "1205: X509 CRT verify long chain (max intermediate CA + 1)",
      "1206: depends_on:MBEDTLS_SHA256_C:MBEDTLS_ECDSA_C:MBEDTLS_ECP_DP_SECP256R1_ENABLED",
      "1209: X509 CRT verify chain #1 (zero pathlen intermediate)",
      "1210: depends_on:MBEDTLS_SHA256_C:MBEDTLS_RSA_C",
      "",
      "[Removed Lines]",
      "1207: mbedtls_x509_crt_verify_max:\"data_files/dir-maxpath/00.crt\":\"data_files/dir-maxpath\":MBEDTLS_X509_MAX_INTERMEDIATE_CA+1:MBEDTLS_ERR_X509_CERT_VERIFY_FAILED:0",
      "",
      "[Added Lines]",
      "1207: mbedtls_x509_crt_verify_max:\"data_files/dir-maxpath/00.crt\":\"data_files/dir-maxpath\":MBEDTLS_X509_MAX_INTERMEDIATE_CA+1:MBEDTLS_ERR_X509_CERT_VERIFY_FAILED:-1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "31458a18788b0cf0b722acda9bb2f2fe13a3fb32",
      "candidate_info": {
        "commit_hash": "31458a18788b0cf0b722acda9bb2f2fe13a3fb32",
        "repo": "ARMmbed/mbedtls",
        "commit_url": "https://github.com/ARMmbed/mbedtls/commit/31458a18788b0cf0b722acda9bb2f2fe13a3fb32",
        "files": [
          "ChangeLog",
          "include/mbedtls/error.h",
          "include/mbedtls/ssl.h",
          "include/mbedtls/x509.h",
          "include/mbedtls/x509_crt.h",
          "library/error.c",
          "library/x509_crt.c",
          "tests/suites/test_suite_x509parse.data"
        ],
        "message": "Only return VERIFY_FAILED from a single point\n\nEverything else is a fatal error. Also improve documentation about that for\nthe vrfy callback.",
        "before_after_code_files": [
          "include/mbedtls/error.h||include/mbedtls/error.h",
          "include/mbedtls/ssl.h||include/mbedtls/ssl.h",
          "include/mbedtls/x509.h||include/mbedtls/x509.h",
          "include/mbedtls/x509_crt.h||include/mbedtls/x509_crt.h",
          "library/error.c||library/error.c",
          "library/x509_crt.c||library/x509_crt.c",
          "tests/suites/test_suite_x509parse.data||tests/suites/test_suite_x509parse.data"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "library/x509_crt.c||library/x509_crt.c",
            "tests/suites/test_suite_x509parse.data||tests/suites/test_suite_x509parse.data"
          ],
          "candidate": [
            "library/x509_crt.c||library/x509_crt.c",
            "tests/suites/test_suite_x509parse.data||tests/suites/test_suite_x509parse.data"
          ]
        }
      },
      "candidate_diff": {
        "include/mbedtls/error.h||include/mbedtls/error.h": [
          "File: include/mbedtls/error.h -> include/mbedtls/error.h"
        ],
        "include/mbedtls/ssl.h||include/mbedtls/ssl.h": [
          "File: include/mbedtls/ssl.h -> include/mbedtls/ssl.h"
        ],
        "include/mbedtls/x509.h||include/mbedtls/x509.h": [
          "File: include/mbedtls/x509.h -> include/mbedtls/x509.h"
        ],
        "include/mbedtls/x509_crt.h||include/mbedtls/x509_crt.h": [
          "File: include/mbedtls/x509_crt.h -> include/mbedtls/x509_crt.h"
        ],
        "library/error.c||library/error.c": [
          "File: library/error.c -> library/error.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "480:             mbedtls_snprintf( buf, buflen, \"X509 - Read/write of file failed\" );",
          "481:         if( use_ret == -(MBEDTLS_ERR_X509_BUFFER_TOO_SMALL) )",
          "482:             mbedtls_snprintf( buf, buflen, \"X509 - Destination buffer is too small\" );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "483:         if( use_ret == -(MBEDTLS_ERR_X509_FATAL_ERROR) )",
          "484:             mbedtls_snprintf( buf, buflen, \"X509 - A fatal error occured, eg the chain is too long or the vrfy callback failed\" );",
          "",
          "---------------"
        ],
        "library/x509_crt.c||library/x509_crt.c": [
          "File: library/x509_crt.c -> library/x509_crt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2058:     if( 1 + path_cnt > MBEDTLS_X509_MAX_INTERMEDIATE_CA )",
          "2059:     {",
          "2062:     }",
          "2064:     if( mbedtls_x509_time_is_past( &child->valid_to ) )",
          "",
          "[Removed Lines]",
          "2061:         return( MBEDTLS_ERR_X509_CERT_VERIFY_FAILED );",
          "",
          "[Added Lines]",
          "2061:         return( MBEDTLS_ERR_X509_FATAL_ERROR );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2310:     }",
          "2312: exit:",
          "2313:     if( ret != 0 )",
          "2314:     {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2314:     if( ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED )",
          "2315:         ret = MBEDTLS_ERR_X509_FATAL_ERROR;",
          "",
          "---------------"
        ],
        "tests/suites/test_suite_x509parse.data||tests/suites/test_suite_x509parse.data": [
          "File: tests/suites/test_suite_x509parse.data -> tests/suites/test_suite_x509parse.data",
          "--- Hunk 1 ---",
          "[Context before]",
          "1205: X509 CRT verify long chain (max intermediate CA + 1)",
          "1206: depends_on:MBEDTLS_SHA256_C:MBEDTLS_ECDSA_C:MBEDTLS_ECP_DP_SECP256R1_ENABLED",
          "1209: X509 CRT verify chain #1 (zero pathlen intermediate)",
          "1210: depends_on:MBEDTLS_SHA256_C:MBEDTLS_RSA_C",
          "",
          "[Removed Lines]",
          "1207: mbedtls_x509_crt_verify_max:\"data_files/dir-maxpath/00.crt\":\"data_files/dir-maxpath\":MBEDTLS_X509_MAX_INTERMEDIATE_CA+1:MBEDTLS_ERR_X509_CERT_VERIFY_FAILED:-1",
          "",
          "[Added Lines]",
          "1207: mbedtls_x509_crt_verify_max:\"data_files/dir-maxpath/00.crt\":\"data_files/dir-maxpath\":MBEDTLS_X509_MAX_INTERMEDIATE_CA+1:MBEDTLS_ERR_X509_FATAL_ERROR:-1",
          "",
          "---------------"
        ]
      }
    }
  ]
}