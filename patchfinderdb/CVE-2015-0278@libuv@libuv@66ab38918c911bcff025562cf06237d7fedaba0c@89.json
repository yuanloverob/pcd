{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "419c2ffae7b89b712637482b6375459ce87e2e6e",
      "candidate_info": {
        "commit_hash": "419c2ffae7b89b712637482b6375459ce87e2e6e",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/419c2ffae7b89b712637482b6375459ce87e2e6e",
        "files": [
          "Makefile.am",
          "test/test-udp-multicast-interface.c"
        ],
        "message": "test: fix udp multicast interface test",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "test/test-udp-multicast-interface.c||test/test-udp-multicast-interface.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:                          test/test-tty.c \\",
          "197:                          test/test-udp-dgram-too-big.c \\",
          "198:                          test/test-udp-ipv6.c \\",
          "199:                          test/test-udp-multicast-join.c \\",
          "200:                          test/test-udp-multicast-ttl.c \\",
          "201:                          test/test-udp-open.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:                          test/test-udp-multicast-interface.c \\",
          "",
          "---------------"
        ],
        "test/test-udp-multicast-interface.c||test/test-udp-multicast-interface.c": [
          "File: test/test-udp-multicast-interface.c -> test/test-udp-multicast-interface.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:   int r;",
          "58:   uv_udp_send_t req;",
          "59:   uv_buf_t buf;",
          "62:   r = uv_udp_init(uv_default_loop(), &server);",
          "63:   ASSERT(r == 0);",
          "66:   ASSERT(r == 0);",
          "68:   r = uv_udp_set_multicast_interface(&server, \"0.0.0.0\");",
          "",
          "[Removed Lines]",
          "60:   struct sockaddr_in addr = uv_ip4_addr(\"239.255.0.1\", TEST_PORT);",
          "65:   r = uv_udp_bind(&server, uv_ip4_addr(\"0.0.0.0\", 0), 0);",
          "",
          "[Added Lines]",
          "60:   struct sockaddr_in addr;",
          "61:   struct sockaddr_in baddr;",
          "63:   ASSERT(0 == uv_ip4_addr(\"239.255.0.1\", TEST_PORT, &addr));",
          "68:   ASSERT(0 == uv_ip4_addr(\"0.0.0.0\", 0, &baddr));",
          "69:   r = uv_udp_bind(&server, (const struct sockaddr*)&baddr, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:   buf = uv_buf_init(\"PING\", 4);",
          "74:   ASSERT(r == 0);",
          "76:   ASSERT(close_cb_called == 0);",
          "",
          "[Removed Lines]",
          "73:   r = uv_udp_send(&req, &server, &buf, 1, addr, sv_send_cb);",
          "",
          "[Added Lines]",
          "77:   r = uv_udp_send(&req,",
          "78:                   &server,",
          "79:                   &buf,",
          "80:                   1,",
          "81:                   (const struct sockaddr*)&addr,",
          "82:                   sv_send_cb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c9f28b4aca62f794bbadc0abca6cd83293566ec",
      "candidate_info": {
        "commit_hash": "8c9f28b4aca62f794bbadc0abca6cd83293566ec",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/8c9f28b4aca62f794bbadc0abca6cd83293566ec",
        "files": [
          "test/test-embed.c"
        ],
        "message": "test: fix epoll_wait() usage in test-embed.c\n\nPassing 0 as the `maxevents` argument fails with EINVAL, passing NULL as\nthe `events` argument fails with EFAULT.\n\nFixes #915.",
        "before_after_code_files": [
          "test/test-embed.c||test/test-embed.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/test-embed.c||test/test-embed.c": [
          "File: test/test-embed.c -> test/test-embed.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:       ts.tv_nsec = (timeout % 1000) * 1000000;",
          "79:       r = kevent(fd, NULL, 0, NULL, 0, &ts);",
          "80: #elif defined(HAVE_EPOLL)",
          "82: #endif",
          "83:     } while (r == -1 && errno == EINTR);",
          "84:     uv_async_send(&embed_async);",
          "",
          "[Removed Lines]",
          "81:       r = epoll_wait(fd, NULL, 0, timeout);",
          "",
          "[Added Lines]",
          "81:       {",
          "82:         struct epoll_event ev;",
          "83:         r = epoll_wait(fd, &ev, 1, timeout);",
          "84:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "451de61b72c57c8d10bcf1c91072018e865bd6a0",
      "candidate_info": {
        "commit_hash": "451de61b72c57c8d10bcf1c91072018e865bd6a0",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/451de61b72c57c8d10bcf1c91072018e865bd6a0",
        "files": [
          "include/uv.h",
          "src/unix/udp.c",
          "src/win/udp.c",
          "test/test-list.h",
          "test/test-udp-multicast-interface.c",
          "uv.gyp"
        ],
        "message": "unix, win: add uv_udp_set_multicast_interface()",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/udp.c||src/unix/udp.c",
          "src/win/udp.c||src/win/udp.c",
          "test/test-list.h||test/test-list.h",
          "test/test-udp-multicast-interface.c||test/test-udp-multicast-interface.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "979: UV_EXTERN int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "993: UV_EXTERN int uv_udp_set_multicast_interface(uv_udp_t* handle, const char* interface_addr);",
          "",
          "---------------"
        ],
        "src/unix/udp.c||src/unix/udp.c": [
          "File: src/unix/udp.c -> src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "539:   return uv__setsockopt_maybe_char(handle, IP_MULTICAST_LOOP, on);",
          "540: }",
          "543: int uv_udp_getsockname(uv_udp_t* handle, struct sockaddr* name, int* namelen) {",
          "544:   socklen_t socklen;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542: int uv_udp_set_multicast_interface(uv_udp_t* handle, const char* interface_addr) {",
          "543:   struct in_addr addr;",
          "544:   int err;",
          "546:   memset(&addr, 0, sizeof addr);",
          "548:   if (interface_addr) {",
          "549:     err = uv_inet_pton(AF_INET, interface_addr, &addr.s_addr);",
          "550:     if (err)",
          "551:       return err;",
          "552:   } else {",
          "553:     addr.s_addr = htonl(INADDR_ANY);",
          "554:   }",
          "556:   if (setsockopt(handle->io_watcher.fd,",
          "557:                  IPPROTO_IP,",
          "558:                  IP_MULTICAST_IF,",
          "559:                  (void*) &addr,",
          "560:                  sizeof addr) == -1) {",
          "561:     return -errno;",
          "562:   }",
          "564:   return 0;",
          "565: }",
          "",
          "---------------"
        ],
        "src/win/udp.c||src/win/udp.c": [
          "File: src/win/udp.c -> src/win/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "585: }",
          "588: int uv_udp_set_broadcast(uv_udp_t* handle, int value) {",
          "589:   BOOL optval = (BOOL) value;",
          "590:   int err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "588: int uv_udp_set_multicast_interface(uv_udp_t* handle, const char* interface_addr) {",
          "589:   struct in_addr addr;",
          "590:   int err;",
          "592:   memset(&addr, 0, sizeof addr);",
          "594:   if (handle->flags & UV_HANDLE_IPV6) {",
          "595:     return UV_ENOSYS;",
          "596:   }",
          "599:   if (!(handle->flags & UV_HANDLE_BOUND)) {",
          "600:     err = uv_udp_try_bind(handle,",
          "601:                           (const struct sockaddr*) &uv_addr_ip4_any_,",
          "602:                           sizeof(uv_addr_ip4_any_),",
          "603:                           0);",
          "604:     if (err)",
          "605:       return uv_translate_sys_error(err);",
          "606:   }",
          "608:   if (interface_addr) {",
          "609:     err = uv_inet_pton(AF_INET, interface_addr, &addr.s_addr);",
          "610:     if (err)",
          "611:       return err;",
          "612:   } else {",
          "613:     addr.s_addr = htonl(INADDR_ANY);",
          "614:   }",
          "616:   if (setsockopt(handle->socket,",
          "617:                  IPPROTO_IP,",
          "618:                  IP_MULTICAST_IF,",
          "619:                  (char*) &addr,",
          "620:                  sizeof addr) == SOCKET_ERROR) {",
          "621:     return uv_translate_sys_error(WSAGetLastError());",
          "622:   }",
          "624:   return 0;",
          "625: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: TEST_DECLARE   (udp_send_and_recv)",
          "82: TEST_DECLARE   (udp_multicast_join)",
          "83: TEST_DECLARE   (udp_multicast_ttl)",
          "84: TEST_DECLARE   (udp_dgram_too_big)",
          "85: TEST_DECLARE   (udp_dual_stack)",
          "86: TEST_DECLARE   (udp_ipv6_only)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84: TEST_DECLARE   (udp_multicast_interface)",
          "",
          "---------------"
        ],
        "test/test-udp-multicast-interface.c||test/test-udp-multicast-interface.c": [
          "File: test/test-udp-multicast-interface.c -> test/test-udp-multicast-interface.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "25: #include <stdio.h>",
          "26: #include <stdlib.h>",
          "27: #include <string.h>",
          "29: #define CHECK_HANDLE(handle) \\",
          "30:   ASSERT((uv_udp_t*)(handle) == &server || (uv_udp_t*)(handle) == &client)",
          "32: static uv_udp_t server;",
          "33: static uv_udp_t client;",
          "35: static int sv_send_cb_called;",
          "36: static int close_cb_called;",
          "39: static void close_cb(uv_handle_t* handle) {",
          "40:   CHECK_HANDLE(handle);",
          "41:   close_cb_called++;",
          "42: }",
          "45: static void sv_send_cb(uv_udp_send_t* req, int status) {",
          "46:   ASSERT(req != NULL);",
          "47:   ASSERT(status == 0);",
          "48:   CHECK_HANDLE(req->handle);",
          "50:   sv_send_cb_called++;",
          "52:   uv_close((uv_handle_t*) req->handle, close_cb);",
          "53: }",
          "56: TEST_IMPL(udp_multicast_interface) {",
          "57:   int r;",
          "58:   uv_udp_send_t req;",
          "59:   uv_buf_t buf;",
          "60:   struct sockaddr_in addr = uv_ip4_addr(\"239.255.0.1\", TEST_PORT);",
          "62:   r = uv_udp_init(uv_default_loop(), &server);",
          "63:   ASSERT(r == 0);",
          "65:   r = uv_udp_bind(&server, uv_ip4_addr(\"0.0.0.0\", 0), 0);",
          "66:   ASSERT(r == 0);",
          "68:   r = uv_udp_set_multicast_interface(&server, \"0.0.0.0\");",
          "69:   ASSERT(r == 0);",
          "72:   buf = uv_buf_init(\"PING\", 4);",
          "73:   r = uv_udp_send(&req, &server, &buf, 1, addr, sv_send_cb);",
          "74:   ASSERT(r == 0);",
          "76:   ASSERT(close_cb_called == 0);",
          "77:   ASSERT(sv_send_cb_called == 0);",
          "80:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "82:   ASSERT(sv_send_cb_called == 1);",
          "83:   ASSERT(close_cb_called == 1);",
          "85:   MAKE_VALGRIND_HAPPY();",
          "86:   return 0;",
          "87: }",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:         'test/test-udp-multicast-ttl.c',",
          "388:         'test/test-ip4-addr.c',",
          "389:         'test/test-ip6-addr.c',",
          "390:       ],",
          "391:       'conditions': [",
          "392:         [ 'OS==\"win\"', {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:         'test/test-udp-multicast-interface.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0635e297148ae8cd4065013002de4bbaab72449f",
      "candidate_info": {
        "commit_hash": "0635e297148ae8cd4065013002de4bbaab72449f",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/0635e297148ae8cd4065013002de4bbaab72449f",
        "files": [
          "LICENSE",
          "config-unix.mk",
          "include/uv-private/ngx-queue.h",
          "include/uv-private/uv-darwin.h",
          "include/uv-private/uv-linux.h",
          "include/uv-private/uv-unix.h",
          "include/uv-private/uv-win.h",
          "include/uv.h",
          "src/queue.h",
          "src/unix/async.c",
          "src/unix/core.c",
          "src/unix/darwin.c",
          "src/unix/fsevents.c",
          "src/unix/kqueue.c",
          "src/unix/linux-core.c",
          "src/unix/linux-inotify.c",
          "src/unix/loop-watcher.c",
          "src/unix/loop.c",
          "src/unix/pipe.c",
          "src/unix/process.c",
          "src/unix/signal.c",
          "src/unix/stream.c",
          "src/unix/sunos.c",
          "src/unix/tcp.c",
          "src/unix/threadpool.c",
          "src/unix/udp.c",
          "src/uv-common.c",
          "src/uv-common.h",
          "src/win/core.c",
          "src/win/handle-inl.h",
          "uv.gyp"
        ],
        "message": "unix, windows: remove ngx-queue.h\n\nAvoids an extra #include in public headers and stops the ngx_queue_*\ntypes and macros from leaking into user code.",
        "before_after_code_files": [
          "config-unix.mk||config-unix.mk",
          "include/uv-private/ngx-queue.h||include/uv-private/ngx-queue.h",
          "include/uv-private/uv-darwin.h||include/uv-private/uv-darwin.h",
          "include/uv-private/uv-linux.h||include/uv-private/uv-linux.h",
          "include/uv-private/uv-unix.h||include/uv-private/uv-unix.h",
          "include/uv-private/uv-win.h||include/uv-private/uv-win.h",
          "include/uv.h||include/uv.h",
          "src/queue.h||src/queue.h",
          "src/unix/async.c||src/unix/async.c",
          "src/unix/core.c||src/unix/core.c",
          "src/unix/darwin.c||src/unix/darwin.c",
          "src/unix/fsevents.c||src/unix/fsevents.c",
          "src/unix/kqueue.c||src/unix/kqueue.c",
          "src/unix/linux-core.c||src/unix/linux-core.c",
          "src/unix/linux-inotify.c||src/unix/linux-inotify.c",
          "src/unix/loop-watcher.c||src/unix/loop-watcher.c",
          "src/unix/loop.c||src/unix/loop.c",
          "src/unix/pipe.c||src/unix/pipe.c",
          "src/unix/process.c||src/unix/process.c",
          "src/unix/signal.c||src/unix/signal.c",
          "src/unix/stream.c||src/unix/stream.c",
          "src/unix/sunos.c||src/unix/sunos.c",
          "src/unix/tcp.c||src/unix/tcp.c",
          "src/unix/threadpool.c||src/unix/threadpool.c",
          "src/unix/udp.c||src/unix/udp.c",
          "src/uv-common.c||src/uv-common.c",
          "src/uv-common.h||src/uv-common.h",
          "src/win/core.c||src/win/core.c",
          "src/win/handle-inl.h||src/win/handle-inl.h",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [
            "src/unix/process.c||src/unix/process.c"
          ],
          "candidate": [
            "src/unix/process.c||src/unix/process.c"
          ]
        }
      },
      "candidate_diff": {
        "config-unix.mk||config-unix.mk": [
          "File: config-unix.mk -> config-unix.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:  include/uv-private/uv-linux.h \\",
          "146:  include/uv-private/uv-sunos.h",
          "150: src/.buildstamp src/unix/.buildstamp test/.buildstamp:",
          "151:  mkdir -p $(@D)",
          "",
          "[Removed Lines]",
          "148: src/unix/internal.h: src/unix/linux-syscalls.h",
          "",
          "[Added Lines]",
          "148: src/unix/internal.h: src/unix/linux-syscalls.h src/uv-common.h",
          "149: src/uv-common.h: src/queue.h",
          "",
          "---------------"
        ],
        "include/uv-private/ngx-queue.h||include/uv-private/ngx-queue.h": [
          "File: include/uv-private/ngx-queue.h -> include/uv-private/ngx-queue.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/uv-private/uv-darwin.h||include/uv-private/uv-darwin.h": [
          "File: include/uv-private/uv-darwin.h -> include/uv-private/uv-darwin.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:   void* cf_loop;                                                              \\",
          "41:   uv_mutex_t cf_mutex;                                                        \\",
          "42:   uv_sem_t cf_sem;                                                            \\",
          "45: #define UV_PLATFORM_FS_EVENT_FIELDS                                           \\",
          "46:   uv__io_t event_watcher;                                                     \\",
          "",
          "[Removed Lines]",
          "43:   ngx_queue_t cf_signals;                                                     \\",
          "",
          "[Added Lines]",
          "43:   void* cf_signals[2];                                                        \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49:   int cf_flags;                                                               \\",
          "50:   void* cf_eventstream;                                                       \\",
          "51:   uv_async_t* cf_cb;                                                          \\",
          "53:   uv_sem_t cf_sem;                                                            \\",
          "54:   uv_mutex_t cf_mutex;                                                        \\",
          "",
          "[Removed Lines]",
          "52:   ngx_queue_t cf_events;                                                      \\",
          "",
          "[Added Lines]",
          "52:   void* cf_events[2];                                                         \\",
          "",
          "---------------"
        ],
        "include/uv-private/uv-linux.h||include/uv-private/uv-linux.h": [
          "File: include/uv-private/uv-linux.h -> include/uv-private/uv-linux.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:   int inotify_fd;                                                             \\",
          "30: #define UV_PLATFORM_FS_EVENT_FIELDS                                           \\",
          "32:   int wd;                                                                     \\",
          "",
          "[Removed Lines]",
          "31:   ngx_queue_t watchers;                                                       \\",
          "",
          "[Added Lines]",
          "31:   void* watchers[2];                                                          \\",
          "",
          "---------------"
        ],
        "include/uv-private/uv-unix.h||include/uv-private/uv-unix.h": [
          "File: include/uv-private/uv-unix.h -> include/uv-private/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #ifndef UV_UNIX_H",
          "23: #define UV_UNIX_H",
          "27: #include <sys/types.h>",
          "28: #include <sys/stat.h>",
          "29: #include <fcntl.h>",
          "",
          "[Removed Lines]",
          "25: #include \"ngx-queue.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73: struct uv__io_s {",
          "74:   uv__io_cb cb;",
          "79:   int fd;",
          "",
          "[Removed Lines]",
          "75:   ngx_queue_t pending_queue;",
          "76:   ngx_queue_t watcher_queue;",
          "",
          "[Added Lines]",
          "73:   void* pending_queue[2];",
          "74:   void* watcher_queue[2];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "94:   void (*work)(struct uv__work *w);",
          "95:   void (*done)(struct uv__work *w, int status);",
          "96:   struct uv_loop_s* loop;",
          "98: };",
          "100: #ifndef UV_PLATFORM_SEM_T",
          "",
          "[Removed Lines]",
          "97:   ngx_queue_t wq;",
          "",
          "[Added Lines]",
          "95:   void* wq[2];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "163: #define UV_LOOP_PRIVATE_FIELDS                                                \\",
          "164:   unsigned long flags;                                                        \\",
          "165:   int backend_fd;                                                             \\",
          "168:   uv__io_t** watchers;                                                        \\",
          "169:   unsigned int nwatchers;                                                     \\",
          "170:   unsigned int nfds;                                                          \\",
          "172:   uv_mutex_t wq_mutex;                                                        \\",
          "173:   uv_async_t wq_async;                                                        \\",
          "174:   uv_handle_t* closing_handles;                                               \\",
          "180:   struct uv__async async_watcher;                                             \\",
          "182:   struct uv__timers {                                                         \\",
          "",
          "[Removed Lines]",
          "166:   ngx_queue_t pending_queue;                                                  \\",
          "167:   ngx_queue_t watcher_queue;                                                  \\",
          "171:   ngx_queue_t wq;                                                             \\",
          "175:   ngx_queue_t process_handles[1];                                             \\",
          "176:   ngx_queue_t prepare_handles;                                                \\",
          "177:   ngx_queue_t check_handles;                                                  \\",
          "178:   ngx_queue_t idle_handles;                                                   \\",
          "179:   ngx_queue_t async_handles;                                                  \\",
          "",
          "[Added Lines]",
          "164:   void* pending_queue[2];                                                     \\",
          "165:   void* watcher_queue[2];                                                     \\",
          "169:   void* wq[2];                                                                \\",
          "173:   void* process_handles[1][2];                                                \\",
          "174:   void* prepare_handles[2];                                                   \\",
          "175:   void* check_handles[2];                                                     \\",
          "176:   void* idle_handles[2];                                                      \\",
          "177:   void* async_handles[2];                                                     \\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "199: #define UV_WRITE_PRIVATE_FIELDS                                               \\",
          "201:   int write_index;                                                            \\",
          "202:   uv_buf_t* bufs;                                                             \\",
          "203:   int bufcnt;                                                                 \\",
          "",
          "[Removed Lines]",
          "200:   ngx_queue_t queue;                                                          \\",
          "",
          "[Added Lines]",
          "198:   void* queue[2];                                                             \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "205:   uv_buf_t bufsml[4];                                                         \\",
          "207: #define UV_CONNECT_PRIVATE_FIELDS                                             \\",
          "212: #define UV_UDP_SEND_PRIVATE_FIELDS                                            \\",
          "214:   struct sockaddr_in6 addr;                                                   \\",
          "215:   int bufcnt;                                                                 \\",
          "216:   uv_buf_t* bufs;                                                             \\",
          "",
          "[Removed Lines]",
          "208:   ngx_queue_t queue;                                                          \\",
          "213:   ngx_queue_t queue;                                                          \\",
          "",
          "[Added Lines]",
          "206:   void* queue[2];                                                             \\",
          "211:   void* queue[2];                                                             \\",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "226:   uv_connect_t *connect_req;                                                  \\",
          "227:   uv_shutdown_t *shutdown_req;                                                \\",
          "228:   uv__io_t io_watcher;                                                        \\",
          "231:   uv_connection_cb connection_cb;                                             \\",
          "232:   int delayed_error;                                                          \\",
          "233:   int accepted_fd;                                                            \\",
          "",
          "[Removed Lines]",
          "229:   ngx_queue_t write_queue;                                                    \\",
          "230:   ngx_queue_t write_completed_queue;                                          \\",
          "",
          "[Added Lines]",
          "227:   void* write_queue[2];                                                       \\",
          "228:   void* write_completed_queue[2];                                             \\",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "239:   uv_alloc_cb alloc_cb;                                                       \\",
          "240:   uv_udp_recv_cb recv_cb;                                                     \\",
          "241:   uv__io_t io_watcher;                                                        \\",
          "245: #define UV_PIPE_PRIVATE_FIELDS                                                \\",
          "",
          "[Removed Lines]",
          "242:   ngx_queue_t write_queue;                                                    \\",
          "243:   ngx_queue_t write_completed_queue;                                          \\",
          "",
          "[Added Lines]",
          "240:   void* write_queue[2];                                                       \\",
          "241:   void* write_completed_queue[2];                                             \\",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "251: #define UV_PREPARE_PRIVATE_FIELDS                                             \\",
          "252:   uv_prepare_cb prepare_cb;                                                   \\",
          "255: #define UV_CHECK_PRIVATE_FIELDS                                               \\",
          "256:   uv_check_cb check_cb;                                                       \\",
          "259: #define UV_IDLE_PRIVATE_FIELDS                                                \\",
          "260:   uv_idle_cb idle_cb;                                                         \\",
          "263: #define UV_ASYNC_PRIVATE_FIELDS                                               \\",
          "264:   uv_async_cb async_cb;                                                       \\",
          "266:   int pending;                                                                \\",
          "268: #define UV_TIMER_PRIVATE_FIELDS                                               \\",
          "",
          "[Removed Lines]",
          "253:   ngx_queue_t queue;",
          "257:   ngx_queue_t queue;",
          "261:   ngx_queue_t queue;",
          "265:   ngx_queue_t queue;                                                          \\",
          "",
          "[Added Lines]",
          "251:   void* queue[2];                                                             \\",
          "255:   void* queue[2];                                                             \\",
          "259:   void* queue[2];                                                             \\",
          "263:   void* queue[2];                                                             \\",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "288:   int retcode;",
          "290: #define UV_PROCESS_PRIVATE_FIELDS                                             \\",
          "292:   int errorno;                                                                \\",
          "294: #define UV_FS_PRIVATE_FIELDS                                                  \\",
          "",
          "[Removed Lines]",
          "291:   ngx_queue_t queue;                                                          \\",
          "",
          "[Added Lines]",
          "289:   void* queue[2];                                                             \\",
          "",
          "---------------"
        ],
        "include/uv-private/uv-win.h||include/uv-private/uv-win.h": [
          "File: include/uv-private/uv-win.h -> include/uv-private/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #endif",
          "47: #include \"tree.h\"",
          "50: #define MAX_PIPENAME_LEN 256",
          "",
          "[Removed Lines]",
          "48: #include \"ngx-queue.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "435:   uv_req_type type;                                                           \\",
          "438:   UV_REQ_PRIVATE_FIELDS                                                       \\",
          "",
          "[Removed Lines]",
          "437:   ngx_queue_t active_queue;                                                   \\",
          "",
          "[Added Lines]",
          "437:   void* active_queue[2];                                                      \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "474:   uv_loop_t* loop;                                                            \\",
          "475:   uv_handle_type type;                                                        \\",
          "478:   UV_HANDLE_PRIVATE_FIELDS                                                    \\",
          "",
          "[Removed Lines]",
          "477:   ngx_queue_t handle_queue;                                                   \\",
          "",
          "[Added Lines]",
          "477:   void* handle_queue[2];                                                      \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1958:   uv_err_t last_err;",
          "1960:   unsigned int active_handles;",
          "1964:   unsigned int stop_flag;",
          "1965:   UV_LOOP_PRIVATE_FIELDS",
          "",
          "[Removed Lines]",
          "1961:   ngx_queue_t handle_queue;",
          "1962:   ngx_queue_t active_reqs;",
          "",
          "[Added Lines]",
          "1961:   void* handle_queue[2];",
          "1962:   void* active_reqs[2];",
          "",
          "---------------"
        ],
        "src/queue.h||src/queue.h": [
          "File: src/queue.h -> src/queue.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #ifndef QUEUE_H_",
          "17: #define QUEUE_H_",
          "19: typedef void *QUEUE[2];",
          "22: #define QUEUE_NEXT(q)       ((*(q))[0])",
          "23: #define QUEUE_PREV(q)       ((*(q))[1])",
          "24: #define QUEUE_PREV_NEXT(q)  (QUEUE_NEXT((QUEUE *) QUEUE_PREV(q)))",
          "25: #define QUEUE_NEXT_PREV(q)  (QUEUE_PREV((QUEUE *) QUEUE_NEXT(q)))",
          "28: #define QUEUE_DATA(ptr, type, field)                                          \\",
          "29:   ((type *) ((char *) (ptr) - ((long) &((type *) 0)->field)))",
          "31: #define QUEUE_FOREACH(q, h)                                                   \\",
          "32:   for ((q) = (*(h))[0]; (q) != (h); (q) = (*(q))[0])",
          "34: #define QUEUE_EMPTY(q)                                                        \\",
          "35:   (QUEUE_NEXT(q) == (q))",
          "37: #define QUEUE_HEAD(q)                                                         \\",
          "38:   (QUEUE_NEXT(q))",
          "40: #define QUEUE_INIT(q)                                                         \\",
          "41:   do {                                                                        \\",
          "42:     QUEUE_NEXT(q) = (q);                                                      \\",
          "43:     QUEUE_PREV(q) = (q);                                                      \\",
          "44:   }                                                                           \\",
          "45:   while (0)",
          "47: #define QUEUE_ADD(h, n)                                                       \\",
          "48:   do {                                                                        \\",
          "49:     QUEUE_PREV_NEXT(h) = QUEUE_NEXT(n);                                       \\",
          "50:     QUEUE_NEXT_PREV(n) = QUEUE_PREV(h);                                       \\",
          "51:     QUEUE_PREV(h) = QUEUE_PREV(n);                                            \\",
          "52:     QUEUE_PREV_NEXT(h) = (h);                                                 \\",
          "53:   }                                                                           \\",
          "54:   while (0)",
          "56: #define QUEUE_SPLIT(h, q, n)                                                  \\",
          "57:   do {                                                                        \\",
          "58:     QUEUE_PREV(n) = QUEUE_PREV(h);                                            \\",
          "59:     QUEUE_PREV_NEXT(n) = (n);                                                 \\",
          "60:     QUEUE_NEXT(n) = (q);                                                      \\",
          "61:     QUEUE_PREV(h) = QUEUE_PREV(q);                                            \\",
          "62:     QUEUE_PREV_NEXT(h) = (h);                                                 \\",
          "63:     QUEUE_PREV(q) = (n);                                                      \\",
          "64:   }                                                                           \\",
          "65:   while (0)",
          "67: #define QUEUE_INSERT_HEAD(h, q)                                               \\",
          "68:   do {                                                                        \\",
          "69:     QUEUE_NEXT(q) = QUEUE_NEXT(h);                                            \\",
          "70:     QUEUE_PREV(q) = (h);                                                      \\",
          "71:     QUEUE_NEXT_PREV(q) = (q);                                                 \\",
          "72:     QUEUE_NEXT(h) = (q);                                                      \\",
          "73:   }                                                                           \\",
          "74:   while (0)",
          "76: #define QUEUE_INSERT_TAIL(h, q)                                               \\",
          "77:   do {                                                                        \\",
          "78:     QUEUE_NEXT(q) = (h);                                                      \\",
          "79:     QUEUE_PREV(q) = QUEUE_PREV(h);                                            \\",
          "80:     QUEUE_PREV_NEXT(q) = (q);                                                 \\",
          "81:     QUEUE_PREV(h) = (q);                                                      \\",
          "82:   }                                                                           \\",
          "83:   while (0)",
          "85: #define QUEUE_REMOVE(q)                                                       \\",
          "86:   do {                                                                        \\",
          "87:     QUEUE_PREV_NEXT(q) = QUEUE_NEXT(q);                                       \\",
          "88:     QUEUE_NEXT_PREV(q) = QUEUE_PREV(q);                                       \\",
          "89:   }                                                                           \\",
          "90:   while (0)",
          "",
          "---------------"
        ],
        "src/unix/async.c||src/unix/async.c": [
          "File: src/unix/async.c -> src/unix/async.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46:   handle->async_cb = async_cb;",
          "47:   handle->pending = 0;",
          "50:   uv__handle_start(handle);",
          "52:   return 0;",
          "",
          "[Removed Lines]",
          "49:   ngx_queue_insert_tail(&loop->async_handles, &handle->queue);",
          "",
          "[Added Lines]",
          "49:   QUEUE_INSERT_TAIL(&loop->async_handles, &handle->queue);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "64: void uv__async_close(uv_async_t* handle) {",
          "66:   uv__handle_stop(handle);",
          "67: }",
          "",
          "[Removed Lines]",
          "65:   ngx_queue_remove(&handle->queue);",
          "",
          "[Added Lines]",
          "65:   QUEUE_REMOVE(&handle->queue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70: static void uv__async_event(uv_loop_t* loop,",
          "71:                             struct uv__async* w,",
          "72:                             unsigned int nevents) {",
          "74:   uv_async_t* h;",
          "78:     if (!h->pending) continue;",
          "79:     h->pending = 0;",
          "80:     h->async_cb(h, 0);",
          "",
          "[Removed Lines]",
          "73:   ngx_queue_t* q;",
          "76:   ngx_queue_foreach(q, &loop->async_handles) {",
          "77:     h = ngx_queue_data(q, uv_async_t, queue);",
          "",
          "[Added Lines]",
          "73:   QUEUE* q;",
          "76:   QUEUE_FOREACH(q, &loop->async_handles) {",
          "77:     h = QUEUE_DATA(q, uv_async_t, queue);",
          "",
          "---------------"
        ],
        "src/unix/core.c||src/unix/core.c": [
          "File: src/unix/core.c -> src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:   }",
          "200:   uv__handle_unref(handle);",
          "203:   if (handle->close_cb) {",
          "204:     handle->close_cb(handle);",
          "",
          "[Removed Lines]",
          "201:   ngx_queue_remove(&handle->handle_queue);",
          "",
          "[Added Lines]",
          "201:   QUEUE_REMOVE(&handle->handle_queue);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:   if (!uv__has_active_handles(loop) && !uv__has_active_reqs(loop))",
          "277:     return 0;",
          "280:     return 0;",
          "282:   if (loop->closing_handles)",
          "",
          "[Removed Lines]",
          "279:   if (!ngx_queue_empty(&loop->idle_handles))",
          "",
          "[Added Lines]",
          "279:   if (!QUEUE_EMPTY(&loop->idle_handles))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "568: static void uv__run_pending(uv_loop_t* loop) {",
          "570:   uv__io_t* w;",
          "578:     w->cb(loop, w, UV__POLLOUT);",
          "579:   }",
          "580: }",
          "",
          "[Removed Lines]",
          "569:   ngx_queue_t* q;",
          "572:   while (!ngx_queue_empty(&loop->pending_queue)) {",
          "573:     q = ngx_queue_head(&loop->pending_queue);",
          "574:     ngx_queue_remove(q);",
          "575:     ngx_queue_init(q);",
          "577:     w = ngx_queue_data(q, uv__io_t, pending_queue);",
          "",
          "[Added Lines]",
          "569:   QUEUE* q;",
          "572:   while (!QUEUE_EMPTY(&loop->pending_queue)) {",
          "573:     q = QUEUE_HEAD(&loop->pending_queue);",
          "574:     QUEUE_REMOVE(q);",
          "575:     QUEUE_INIT(q);",
          "577:     w = QUEUE_DATA(q, uv__io_t, pending_queue);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "616: void uv__io_init(uv__io_t* w, uv__io_cb cb, int fd) {",
          "617:   assert(cb != NULL);",
          "618:   assert(fd >= -1);",
          "621:   w->cb = cb;",
          "622:   w->fd = fd;",
          "623:   w->events = 0;",
          "",
          "[Removed Lines]",
          "619:   ngx_queue_init(&w->pending_queue);",
          "620:   ngx_queue_init(&w->watcher_queue);",
          "",
          "[Added Lines]",
          "619:   QUEUE_INIT(&w->pending_queue);",
          "620:   QUEUE_INIT(&w->watcher_queue);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "647:   if (w->events == w->pevents) {",
          "651:     }",
          "652:     return;",
          "653:   }",
          "654: #endif",
          "659:   if (loop->watchers[w->fd] == NULL) {",
          "660:     loop->watchers[w->fd] = w;",
          "",
          "[Removed Lines]",
          "648:     if (w->events == 0 && !ngx_queue_empty(&w->watcher_queue)) {",
          "649:       ngx_queue_remove(&w->watcher_queue);",
          "650:       ngx_queue_init(&w->watcher_queue);",
          "656:   if (ngx_queue_empty(&w->watcher_queue))",
          "657:     ngx_queue_insert_tail(&loop->watcher_queue, &w->watcher_queue);",
          "",
          "[Added Lines]",
          "648:     if (w->events == 0 && !QUEUE_EMPTY(&w->watcher_queue)) {",
          "649:       QUEUE_REMOVE(&w->watcher_queue);",
          "650:       QUEUE_INIT(&w->watcher_queue);",
          "656:   if (QUEUE_EMPTY(&w->watcher_queue))",
          "657:     QUEUE_INSERT_TAIL(&loop->watcher_queue, &w->watcher_queue);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "679:   w->pevents &= ~events;",
          "681:   if (w->pevents == 0) {",
          "685:     if (loop->watchers[w->fd] != NULL) {",
          "686:       assert(loop->watchers[w->fd] == w);",
          "",
          "[Removed Lines]",
          "682:     ngx_queue_remove(&w->watcher_queue);",
          "683:     ngx_queue_init(&w->watcher_queue);",
          "",
          "[Added Lines]",
          "682:     QUEUE_REMOVE(&w->watcher_queue);",
          "683:     QUEUE_INIT(&w->watcher_queue);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "690:       w->events = 0;",
          "691:     }",
          "692:   }",
          "695: }",
          "698: void uv__io_close(uv_loop_t* loop, uv__io_t* w) {",
          "699:   uv__io_stop(loop, w, UV__POLLIN | UV__POLLOUT);",
          "701: }",
          "704: void uv__io_feed(uv_loop_t* loop, uv__io_t* w) {",
          "707: }",
          "",
          "[Removed Lines]",
          "693:   else if (ngx_queue_empty(&w->watcher_queue))",
          "694:     ngx_queue_insert_tail(&loop->watcher_queue, &w->watcher_queue);",
          "700:   ngx_queue_remove(&w->pending_queue);",
          "705:   if (ngx_queue_empty(&w->pending_queue))",
          "706:     ngx_queue_insert_tail(&loop->pending_queue, &w->pending_queue);",
          "",
          "[Added Lines]",
          "693:   else if (QUEUE_EMPTY(&w->watcher_queue))",
          "694:     QUEUE_INSERT_TAIL(&loop->watcher_queue, &w->watcher_queue);",
          "700:   QUEUE_REMOVE(&w->pending_queue);",
          "705:   if (QUEUE_EMPTY(&w->pending_queue))",
          "706:     QUEUE_INSERT_TAIL(&loop->pending_queue, &w->pending_queue);",
          "",
          "---------------"
        ],
        "src/unix/darwin.c||src/unix/darwin.c": [
          "File: src/unix/darwin.c -> src/unix/darwin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: struct uv__cf_loop_signal_s {",
          "46:   void* arg;",
          "47:   cf_loop_signal_cb cb;",
          "49: };",
          "",
          "[Removed Lines]",
          "48:   ngx_queue_t member;",
          "",
          "[Added Lines]",
          "48:   QUEUE member;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "61:     return r;",
          "62:   if ((r = uv_sem_init(&loop->cf_sem, 0)))",
          "63:     return r;",
          "66:   memset(&ctx, 0, sizeof(ctx));",
          "67:   ctx.info = loop;",
          "",
          "[Removed Lines]",
          "64:   ngx_queue_init(&loop->cf_signals);",
          "",
          "[Added Lines]",
          "64:   QUEUE_INIT(&loop->cf_signals);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "82: void uv__platform_loop_delete(uv_loop_t* loop) {",
          "84:   uv__cf_loop_signal_t* s;",
          "86:   assert(loop->cf_loop != NULL);",
          "",
          "[Removed Lines]",
          "83:   ngx_queue_t* item;",
          "",
          "[Added Lines]",
          "83:   QUEUE* item;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "92:   uv_mutex_destroy(&loop->cf_mutex);",
          "101:     free(s);",
          "102:   }",
          "103: }",
          "",
          "[Removed Lines]",
          "95:   while (!ngx_queue_empty(&loop->cf_signals)) {",
          "96:     item = ngx_queue_head(&loop->cf_signals);",
          "98:     s = ngx_queue_data(item, uv__cf_loop_signal_t, member);",
          "100:     ngx_queue_remove(item);",
          "",
          "[Added Lines]",
          "95:   while (!QUEUE_EMPTY(&loop->cf_signals)) {",
          "96:     item = QUEUE_HEAD(&loop->cf_signals);",
          "98:     s = QUEUE_DATA(item, uv__cf_loop_signal_t, member);",
          "100:     QUEUE_REMOVE(item);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "128: void uv__cf_loop_cb(void* arg) {",
          "129:   uv_loop_t* loop;",
          "132:   uv__cf_loop_signal_t* s;",
          "134:   loop = arg;",
          "136:   uv_mutex_lock(&loop->cf_mutex);",
          "141:   }",
          "142:   uv_mutex_unlock(&loop->cf_mutex);",
          "148:     s->cb(s->arg);",
          "151:     free(s);",
          "152:   }",
          "153: }",
          "",
          "[Removed Lines]",
          "130:   ngx_queue_t* item;",
          "131:   ngx_queue_t split_head;",
          "137:   ngx_queue_init(&split_head);",
          "138:   if (!ngx_queue_empty(&loop->cf_signals)) {",
          "139:     ngx_queue_t* split_pos = ngx_queue_next(&loop->cf_signals);",
          "140:     ngx_queue_split(&loop->cf_signals, split_pos, &split_head);",
          "144:   while (!ngx_queue_empty(&split_head)) {",
          "145:     item = ngx_queue_head(&split_head);",
          "147:     s = ngx_queue_data(item, uv__cf_loop_signal_t, member);",
          "150:     ngx_queue_remove(item);",
          "",
          "[Added Lines]",
          "130:   QUEUE* item;",
          "131:   QUEUE split_head;",
          "137:   QUEUE_INIT(&split_head);",
          "138:   if (!QUEUE_EMPTY(&loop->cf_signals)) {",
          "139:     QUEUE* split_pos = QUEUE_HEAD(&loop->cf_signals);",
          "140:     QUEUE_SPLIT(&loop->cf_signals, split_pos, &split_head);",
          "144:   while (!QUEUE_EMPTY(&split_head)) {",
          "145:     item = QUEUE_HEAD(&split_head);",
          "147:     s = QUEUE_DATA(item, uv__cf_loop_signal_t, member);",
          "150:     QUEUE_REMOVE(item);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "165:   item->cb = cb;",
          "167:   uv_mutex_lock(&loop->cf_mutex);",
          "169:   uv_mutex_unlock(&loop->cf_mutex);",
          "171:   assert(loop->cf_loop != NULL);",
          "",
          "[Removed Lines]",
          "168:   ngx_queue_insert_tail(&loop->cf_signals, &item->member);",
          "",
          "[Added Lines]",
          "168:   QUEUE_INSERT_TAIL(&loop->cf_signals, &item->member);",
          "",
          "---------------"
        ],
        "src/unix/fsevents.c||src/unix/fsevents.c": [
          "File: src/unix/fsevents.c -> src/unix/fsevents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: struct uv__fsevents_event_s {",
          "46:   int events;",
          "48:   char path[1];",
          "49: };",
          "52: #define UV__FSEVENTS_WALK(handle, block)                                      \\",
          "53:     {                                                                         \\",
          "56:       uv__fsevents_event_t* event;                                            \\",
          "57:       uv_mutex_lock(&(handle)->cf_mutex);                                     \\",
          "62:       }                                                                       \\",
          "63:       uv_mutex_unlock(&(handle)->cf_mutex);                                   \\",
          "70:         if (((handle)->flags & (UV_CLOSING | UV_CLOSED)) == 0)                \\",
          "71:           block                                                               \\",
          "",
          "[Removed Lines]",
          "47:   ngx_queue_t member;",
          "54:       ngx_queue_t* curr;                                                      \\",
          "55:       ngx_queue_t split_head;                                                 \\",
          "58:       ngx_queue_init(&split_head);                                            \\",
          "59:       if (!ngx_queue_empty(&(handle)->cf_events)) {                           \\",
          "60:         ngx_queue_t* split_pos = ngx_queue_next(&(handle)->cf_events);        \\",
          "61:         ngx_queue_split(&(handle)->cf_events, split_pos, &split_head);        \\",
          "64:       while (!ngx_queue_empty(&split_head)) {                                 \\",
          "65:         curr = ngx_queue_head(&split_head);                                   \\",
          "67:         event = ngx_queue_data(curr, uv__fsevents_event_t, member);           \\",
          "68:         ngx_queue_remove(curr);                                               \\",
          "",
          "[Added Lines]",
          "47:   QUEUE member;",
          "54:       QUEUE* curr;                                                            \\",
          "55:       QUEUE split_head;                                                       \\",
          "58:       QUEUE_INIT(&split_head);                                                \\",
          "59:       if (!QUEUE_EMPTY(&(handle)->cf_events)) {                               \\",
          "60:         QUEUE* split_pos = QUEUE_HEAD(&(handle)->cf_events);                  \\",
          "61:         QUEUE_SPLIT(&(handle)->cf_events, split_pos, &split_head);            \\",
          "64:       while (!QUEUE_EMPTY(&split_head)) {                                     \\",
          "65:         curr = QUEUE_HEAD(&split_head);                                       \\",
          "67:         event = QUEUE_DATA(curr, uv__fsevents_event_t, member);               \\",
          "68:         QUEUE_REMOVE(curr);                                                   \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:   char* pos;",
          "106:   uv_fs_event_t* handle;",
          "107:   uv__fsevents_event_t* event;",
          "109:   int kFSEventsModified;",
          "110:   int kFSEventsRenamed;",
          "",
          "[Removed Lines]",
          "108:   ngx_queue_t add_list;",
          "",
          "[Added Lines]",
          "108:   QUEUE add_list;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "121:   handle = info;",
          "122:   paths = eventPaths;",
          "125:   for (i = 0; i < numEvents; i++) {",
          "",
          "[Removed Lines]",
          "123:   ngx_queue_init(&add_list);",
          "",
          "[Added Lines]",
          "123:   QUEUE_INIT(&add_list);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "180:     else",
          "181:       event->events = UV_RENAME;",
          "184:   }",
          "185:   uv_mutex_lock(&handle->cf_mutex);",
          "187:   uv_mutex_unlock(&handle->cf_mutex);",
          "189:   uv_async_send(handle->cf_cb);",
          "",
          "[Removed Lines]",
          "183:     ngx_queue_insert_tail(&add_list, &event->member);",
          "186:   ngx_queue_add(&handle->cf_events, &add_list);",
          "",
          "[Added Lines]",
          "183:     QUEUE_INSERT_TAIL(&add_list, &event->member);",
          "186:   QUEUE_ADD(&handle->cf_events, &add_list);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "258:   uv_mutex_init(&handle->cf_mutex);",
          "259:   uv_sem_init(&handle->cf_sem, 0);",
          "262:   uv__cf_loop_signal(handle->loop, uv__fsevents_schedule, handle);",
          "",
          "[Removed Lines]",
          "260:   ngx_queue_init(&handle->cf_events);",
          "",
          "[Added Lines]",
          "260:   QUEUE_INIT(&handle->cf_events);",
          "",
          "---------------"
        ],
        "src/unix/kqueue.c||src/unix/kqueue.c": [
          "File: src/unix/kqueue.c -> src/unix/kqueue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   struct timespec spec;",
          "56:   unsigned int nevents;",
          "57:   unsigned int revents;",
          "59:   uint64_t base;",
          "60:   uint64_t diff;",
          "61:   uv__io_t* w;",
          "",
          "[Removed Lines]",
          "58:   ngx_queue_t* q;",
          "",
          "[Added Lines]",
          "58:   QUEUE* q;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68:   int i;",
          "70:   if (loop->nfds == 0) {",
          "72:     return;",
          "73:   }",
          "75:   nevents = 0;",
          "83:     assert(w->pevents != 0);",
          "84:     assert(w->fd >= 0);",
          "85:     assert(w->fd < (int) loop->nwatchers);",
          "",
          "[Removed Lines]",
          "71:     assert(ngx_queue_empty(&loop->watcher_queue));",
          "77:   while (!ngx_queue_empty(&loop->watcher_queue)) {",
          "78:     q = ngx_queue_head(&loop->watcher_queue);",
          "79:     ngx_queue_remove(q);",
          "80:     ngx_queue_init(q);",
          "82:     w = ngx_queue_data(q, uv__io_t, watcher_queue);",
          "",
          "[Added Lines]",
          "71:     assert(QUEUE_EMPTY(&loop->watcher_queue));",
          "77:   while (!QUEUE_EMPTY(&loop->watcher_queue)) {",
          "78:     q = QUEUE_HEAD(&loop->watcher_queue);",
          "79:     QUEUE_REMOVE(q);",
          "80:     QUEUE_INIT(q);",
          "82:     w = QUEUE_DATA(q, uv__io_t, watcher_queue);",
          "",
          "---------------"
        ],
        "src/unix/linux-core.c||src/unix/linux-core.c": [
          "File: src/unix/linux-core.c -> src/unix/linux-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:   struct uv__epoll_event events[1024];",
          "102:   struct uv__epoll_event* pe;",
          "103:   struct uv__epoll_event e;",
          "105:   uv__io_t* w;",
          "106:   uint64_t base;",
          "107:   uint64_t diff;",
          "",
          "[Removed Lines]",
          "104:   ngx_queue_t* q;",
          "",
          "[Added Lines]",
          "104:   QUEUE* q;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:   int i;",
          "115:   if (loop->nfds == 0) {",
          "117:     return;",
          "118:   }",
          "126:     assert(w->pevents != 0);",
          "127:     assert(w->fd >= 0);",
          "128:     assert(w->fd < (int) loop->nwatchers);",
          "",
          "[Removed Lines]",
          "116:     assert(ngx_queue_empty(&loop->watcher_queue));",
          "120:   while (!ngx_queue_empty(&loop->watcher_queue)) {",
          "121:     q = ngx_queue_head(&loop->watcher_queue);",
          "122:     ngx_queue_remove(q);",
          "123:     ngx_queue_init(q);",
          "125:     w = ngx_queue_data(q, uv__io_t, watcher_queue);",
          "",
          "[Added Lines]",
          "116:     assert(QUEUE_EMPTY(&loop->watcher_queue));",
          "120:   while (!QUEUE_EMPTY(&loop->watcher_queue)) {",
          "121:     q = QUEUE_HEAD(&loop->watcher_queue);",
          "122:     QUEUE_REMOVE(q);",
          "123:     QUEUE_INIT(q);",
          "125:     w = QUEUE_DATA(q, uv__io_t, watcher_queue);",
          "",
          "---------------"
        ],
        "src/unix/linux-inotify.c||src/unix/linux-inotify.c": [
          "File: src/unix/linux-inotify.c -> src/unix/linux-inotify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: struct watcher_list {",
          "36:   RB_ENTRY(watcher_list) entry;",
          "38:   char* path;",
          "39:   int wd;",
          "40: };",
          "",
          "[Removed Lines]",
          "37:   ngx_queue_t watchers;",
          "",
          "[Added Lines]",
          "37:   QUEUE watchers;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:   const struct uv__inotify_event* e;",
          "120:   struct watcher_list* w;",
          "121:   uv_fs_event_t* h;",
          "123:   const char* path;",
          "124:   ssize_t size;",
          "125:   const char *p;",
          "",
          "[Removed Lines]",
          "122:   ngx_queue_t* q;",
          "",
          "[Added Lines]",
          "122:   QUEUE* q;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "159:       path = e->len ? (const char*) (e + 1) : basename_r(w->path);",
          "163:         h->cb(h, path, events, 0);",
          "164:       }",
          "165:     }",
          "",
          "[Removed Lines]",
          "161:       ngx_queue_foreach(q, &w->watchers) {",
          "162:         h = ngx_queue_data(q, uv_fs_event_t, watchers);",
          "",
          "[Added Lines]",
          "161:       QUEUE_FOREACH(q, &w->watchers) {",
          "162:         h = QUEUE_DATA(q, uv_fs_event_t, watchers);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "202:   w->wd = wd;",
          "203:   w->path = strcpy((char*)(w + 1), path);",
          "205:   RB_INSERT(watcher_root, CAST(&loop->inotify_watchers), w);",
          "207: no_insert:",
          "208:   uv__handle_init(loop, (uv_handle_t*)handle, UV_FS_EVENT);",
          "211:   handle->filename = w->path;",
          "212:   handle->cb = cb;",
          "213:   handle->wd = wd;",
          "",
          "[Removed Lines]",
          "204:   ngx_queue_init(&w->watchers);",
          "210:   ngx_queue_insert_tail(&w->watchers, &handle->watchers);",
          "",
          "[Added Lines]",
          "204:   QUEUE_INIT(&w->watchers);",
          "210:   QUEUE_INSERT_TAIL(&w->watchers, &handle->watchers);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "225:   handle->wd = -1;",
          "226:   handle->filename = NULL;",
          "227:   uv__handle_stop(handle);",
          "232:     RB_REMOVE(watcher_root, CAST(&handle->loop->inotify_watchers), w);",
          "233:     uv__inotify_rm_watch(handle->loop->inotify_fd, w->wd);",
          "",
          "[Removed Lines]",
          "228:   ngx_queue_remove(&handle->watchers);",
          "230:   if (ngx_queue_empty(&w->watchers)) {",
          "",
          "[Added Lines]",
          "228:   QUEUE_REMOVE(&handle->watchers);",
          "230:   if (QUEUE_EMPTY(&w->watchers)) {",
          "",
          "---------------"
        ],
        "src/unix/loop-watcher.c||src/unix/loop-watcher.c": [
          "File: src/unix/loop-watcher.c -> src/unix/loop-watcher.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     if (uv__is_active(handle)) return 0;                                      \\",
          "34:     if (cb == NULL)                                                           \\",
          "35:       return uv__set_artificial_error(handle->loop, UV_EINVAL);               \\",
          "37:     handle->name##_cb = cb;                                                   \\",
          "38:     uv__handle_start(handle);                                                 \\",
          "39:     return 0;                                                                 \\",
          "",
          "[Removed Lines]",
          "36:     ngx_queue_insert_head(&handle->loop->name##_handles, &handle->queue);     \\",
          "",
          "[Added Lines]",
          "36:     QUEUE_INSERT_HEAD(&handle->loop->name##_handles, &handle->queue);         \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "41:                                                                               \\",
          "42:   int uv_##name##_stop(uv_##name##_t* handle) {                               \\",
          "43:     if (!uv__is_active(handle)) return 0;                                     \\",
          "45:     uv__handle_stop(handle);                                                  \\",
          "46:     return 0;                                                                 \\",
          "47:   }                                                                           \\",
          "48:                                                                               \\",
          "49:   void uv__run_##name(uv_loop_t* loop) {                                      \\",
          "50:     uv_##name##_t* h;                                                         \\",
          "54:       h->name##_cb(h, 0);                                                     \\",
          "55:     }                                                                         \\",
          "56:   }                                                                           \\",
          "",
          "[Removed Lines]",
          "44:     ngx_queue_remove(&handle->queue);                                         \\",
          "51:     ngx_queue_t* q;                                                           \\",
          "52:     ngx_queue_foreach(q, &loop->name##_handles) {                             \\",
          "53:       h = ngx_queue_data(q, uv_##name##_t, queue);                            \\",
          "",
          "[Added Lines]",
          "44:     QUEUE_REMOVE(&handle->queue);                                             \\",
          "51:     QUEUE* q;                                                                 \\",
          "52:     QUEUE_FOREACH(q, &loop->name##_handles) {                                 \\",
          "53:       h = QUEUE_DATA(q, uv_##name##_t, queue);                                \\",
          "",
          "---------------"
        ],
        "src/unix/loop.c||src/unix/loop.c": [
          "File: src/unix/loop.c -> src/unix/loop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   memset(loop, 0, sizeof(*loop));",
          "36:   RB_INIT(&loop->timer_handles);",
          "45:   loop->nfds = 0;",
          "46:   loop->watchers = NULL;",
          "47:   loop->nwatchers = 0;",
          "51:   loop->closing_handles = NULL;",
          "52:   loop->time = uv__hrtime() / 1000000;",
          "",
          "[Removed Lines]",
          "37:   ngx_queue_init(&loop->wq);",
          "38:   ngx_queue_init(&loop->active_reqs);",
          "39:   ngx_queue_init(&loop->idle_handles);",
          "40:   ngx_queue_init(&loop->async_handles);",
          "41:   ngx_queue_init(&loop->check_handles);",
          "42:   ngx_queue_init(&loop->prepare_handles);",
          "43:   ngx_queue_init(&loop->handle_queue);",
          "48:   ngx_queue_init(&loop->pending_queue);",
          "49:   ngx_queue_init(&loop->watcher_queue);",
          "",
          "[Added Lines]",
          "37:   QUEUE_INIT(&loop->wq);",
          "38:   QUEUE_INIT(&loop->active_reqs);",
          "39:   QUEUE_INIT(&loop->idle_handles);",
          "40:   QUEUE_INIT(&loop->async_handles);",
          "41:   QUEUE_INIT(&loop->check_handles);",
          "42:   QUEUE_INIT(&loop->prepare_handles);",
          "43:   QUEUE_INIT(&loop->handle_queue);",
          "48:   QUEUE_INIT(&loop->pending_queue);",
          "49:   QUEUE_INIT(&loop->watcher_queue);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   loop->child_watcher.flags |= UV__HANDLE_INTERNAL;",
          "69:   for (i = 0; i < ARRAY_SIZE(loop->process_handles); i++)",
          "72:   if (uv_mutex_init(&loop->wq_mutex))",
          "73:     abort();",
          "",
          "[Removed Lines]",
          "70:     ngx_queue_init(loop->process_handles + i);",
          "",
          "[Added Lines]",
          "70:     QUEUE_INIT(loop->process_handles + i);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98:   }",
          "100:   uv_mutex_lock(&loop->wq_mutex);",
          "102:   uv_mutex_unlock(&loop->wq_mutex);",
          "103:   uv_mutex_destroy(&loop->wq_mutex);",
          "105: #if 0",
          "108:   assert(loop->nfds == 0);",
          "109: #endif",
          "",
          "[Removed Lines]",
          "101:   assert(ngx_queue_empty(&loop->wq) && \"thread pool work queue not empty!\");",
          "106:   assert(ngx_queue_empty(&loop->pending_queue));",
          "107:   assert(ngx_queue_empty(&loop->watcher_queue));",
          "",
          "[Added Lines]",
          "101:   assert(QUEUE_EMPTY(&loop->wq) && \"thread pool work queue not empty!\");",
          "106:   assert(QUEUE_EMPTY(&loop->pending_queue));",
          "107:   assert(QUEUE_EMPTY(&loop->watcher_queue));",
          "",
          "---------------"
        ],
        "src/unix/pipe.c||src/unix/pipe.c": [
          "File: src/unix/pipe.c -> src/unix/pipe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:   uv__req_init(handle->loop, req, UV_CONNECT);",
          "215:   req->handle = (uv_stream_t*)handle;",
          "216:   req->cb = cb;",
          "220:   if (err != 0)",
          "",
          "[Removed Lines]",
          "217:   ngx_queue_init(&req->queue);",
          "",
          "[Added Lines]",
          "217:   QUEUE_INIT(&req->queue);",
          "",
          "---------------"
        ],
        "src/unix/process.c||src/unix/process.c": [
          "File: src/unix/process.c -> src/unix/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41: #endif",
          "45:   assert(pid > 0);",
          "46:   return loop->process_handles + pid % ARRAY_SIZE(loop->process_handles);",
          "47: }",
          "",
          "[Removed Lines]",
          "44: static ngx_queue_t* uv__process_queue(uv_loop_t* loop, int pid) {",
          "",
          "[Added Lines]",
          "44: static QUEUE* uv__process_queue(uv_loop_t* loop, int pid) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50: static uv_process_t* uv__process_find(uv_loop_t* loop, int pid) {",
          "51:   uv_process_t* handle;",
          "55:   h = uv__process_queue(loop, pid);",
          "59:     if (handle->pid == pid) return handle;",
          "60:   }",
          "",
          "[Removed Lines]",
          "52:   ngx_queue_t* h;",
          "53:   ngx_queue_t* q;",
          "57:   ngx_queue_foreach(q, h) {",
          "58:     handle = ngx_queue_data(q, uv_process_t, queue);",
          "",
          "[Added Lines]",
          "52:   QUEUE* h;",
          "53:   QUEUE* q;",
          "57:   QUEUE_FOREACH(q, h) {",
          "58:     handle = QUEUE_DATA(q, uv_process_t, queue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "351:   int signal_pipe[2] = { -1, -1 };",
          "352:   int (*pipes)[2];",
          "353:   int stdio_count;",
          "355:   ssize_t r;",
          "356:   pid_t pid;",
          "357:   int i;",
          "",
          "[Removed Lines]",
          "354:   ngx_queue_t* q;",
          "",
          "[Added Lines]",
          "354:   QUEUE* q;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "364:                              UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS)));",
          "366:   uv__handle_init(loop, (uv_handle_t*)process, UV_PROCESS);",
          "369:   stdio_count = options.stdio_count;",
          "370:   if (stdio_count < 3)",
          "",
          "[Removed Lines]",
          "367:   ngx_queue_init(&process->queue);",
          "",
          "[Added Lines]",
          "367:   QUEUE_INIT(&process->queue);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "449:   }",
          "451:   q = uv__process_queue(loop, pid);",
          "454:   process->pid = pid;",
          "455:   process->exit_cb = options.exit_cb;",
          "",
          "[Removed Lines]",
          "452:   ngx_queue_insert_tail(q, &process->queue);",
          "",
          "[Added Lines]",
          "452:   QUEUE_INSERT_TAIL(q, &process->queue);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "497: void uv__process_close(uv_process_t* handle) {",
          "500:   uv__handle_stop(handle);",
          "501: }",
          "",
          "[Removed Lines]",
          "499:   ngx_queue_remove(&handle->queue);",
          "",
          "[Added Lines]",
          "499:   QUEUE_REMOVE(&handle->queue);",
          "",
          "---------------"
        ],
        "src/unix/signal.c||src/unix/signal.c": [
          "File: src/unix/signal.c -> src/unix/signal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "225: void uv__signal_loop_cleanup(uv_loop_t* loop) {",
          "235:     if (handle->type == UV_SIGNAL)",
          "236:       uv__signal_stop((uv_signal_t*) handle);",
          "",
          "[Removed Lines]",
          "226:   ngx_queue_t* q;",
          "232:   ngx_queue_foreach(q, &loop->handle_queue) {",
          "233:     uv_handle_t* handle = ngx_queue_data(q, uv_handle_t, handle_queue);",
          "",
          "[Added Lines]",
          "226:   QUEUE* q;",
          "232:   QUEUE_FOREACH(q, &loop->handle_queue) {",
          "233:     uv_handle_t* handle = QUEUE_DATA(q, uv_handle_t, handle_queue);",
          "",
          "---------------"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:   stream->shutdown_req = NULL;",
          "110:   stream->accepted_fd = -1;",
          "111:   stream->delayed_error = 0;",
          "114:   stream->write_queue_size = 0;",
          "116:   if (loop->emfile_fd == -1)",
          "",
          "[Removed Lines]",
          "112:   ngx_queue_init(&stream->write_queue);",
          "113:   ngx_queue_init(&stream->write_completed_queue);",
          "",
          "[Added Lines]",
          "112:   QUEUE_INIT(&stream->write_queue);",
          "113:   QUEUE_INIT(&stream->write_completed_queue);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "378: void uv__stream_destroy(uv_stream_t* stream) {",
          "379:   uv_write_t* req;",
          "382:   assert(!uv__io_active(&stream->io_watcher, UV__POLLIN | UV__POLLOUT));",
          "383:   assert(stream->flags & UV_CLOSED);",
          "",
          "[Removed Lines]",
          "380:   ngx_queue_t* q;",
          "",
          "[Added Lines]",
          "380:   QUEUE* q;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "389:     stream->connect_req = NULL;",
          "390:   }",
          "397:     uv__req_unregister(stream->loop, req);",
          "399:     if (req->bufs != req->bufsml)",
          "",
          "[Removed Lines]",
          "392:   while (!ngx_queue_empty(&stream->write_queue)) {",
          "393:     q = ngx_queue_head(&stream->write_queue);",
          "394:     ngx_queue_remove(q);",
          "396:     req = ngx_queue_data(q, uv_write_t, queue);",
          "",
          "[Added Lines]",
          "392:   while (!QUEUE_EMPTY(&stream->write_queue)) {",
          "393:     q = QUEUE_HEAD(&stream->write_queue);",
          "394:     QUEUE_REMOVE(q);",
          "396:     req = QUEUE_DATA(q, uv_write_t, queue);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "405:     }",
          "406:   }",
          "413:     uv__req_unregister(stream->loop, req);",
          "415:     if (req->cb) {",
          "",
          "[Removed Lines]",
          "408:   while (!ngx_queue_empty(&stream->write_completed_queue)) {",
          "409:     q = ngx_queue_head(&stream->write_completed_queue);",
          "410:     ngx_queue_remove(q);",
          "412:     req = ngx_queue_data(q, uv_write_t, queue);",
          "",
          "[Added Lines]",
          "408:   while (!QUEUE_EMPTY(&stream->write_completed_queue)) {",
          "409:     q = QUEUE_HEAD(&stream->write_completed_queue);",
          "410:     QUEUE_REMOVE(q);",
          "412:     req = QUEUE_DATA(q, uv_write_t, queue);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "642: static void uv__drain(uv_stream_t* stream) {",
          "643:   uv_shutdown_t* req;",
          "646:   assert(stream->write_queue_size == 0);",
          "648:   uv__io_stop(stream->loop, &stream->io_watcher, UV__POLLOUT);",
          "",
          "[Removed Lines]",
          "645:   assert(ngx_queue_empty(&stream->write_queue));",
          "",
          "[Added Lines]",
          "645:   assert(QUEUE_EMPTY(&stream->write_queue));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "689:   uv_stream_t* stream = req->handle;",
          "693:   if (req->bufs != req->bufsml) {",
          "694:     free(req->bufs);",
          "695:   }",
          "",
          "[Removed Lines]",
          "692:   ngx_queue_remove(&req->queue);",
          "",
          "[Added Lines]",
          "692:   QUEUE_REMOVE(&req->queue);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "702:   uv__io_feed(stream->loop, &stream->io_watcher);",
          "703: }",
          "",
          "[Removed Lines]",
          "701:   ngx_queue_insert_tail(&stream->write_completed_queue, &req->queue);",
          "",
          "[Added Lines]",
          "701:   QUEUE_INSERT_TAIL(&stream->write_completed_queue, &req->queue);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "721: static void uv__write(uv_stream_t* stream) {",
          "722:   struct iovec* iov;",
          "724:   uv_write_t* req;",
          "725:   int iovcnt;",
          "726:   ssize_t n;",
          "",
          "[Removed Lines]",
          "723:   ngx_queue_t* q;",
          "",
          "[Added Lines]",
          "723:   QUEUE* q;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "730:   assert(uv__stream_fd(stream) >= 0);",
          "733:     assert(stream->write_queue_size == 0);",
          "734:     return;",
          "735:   }",
          "739:   assert(req->handle == stream);",
          "",
          "[Removed Lines]",
          "732:   if (ngx_queue_empty(&stream->write_queue)) {",
          "737:   q = ngx_queue_head(&stream->write_queue);",
          "738:   req = ngx_queue_data(q, uv_write_t, queue);",
          "",
          "[Added Lines]",
          "732:   if (QUEUE_EMPTY(&stream->write_queue)) {",
          "737:   q = QUEUE_HEAD(&stream->write_queue);",
          "738:   req = QUEUE_DATA(q, uv_write_t, queue);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "868: static void uv__write_callbacks(uv_stream_t* stream) {",
          "869:   uv_write_t* req;",
          "877:     uv__req_unregister(stream->loop, req);",
          "",
          "[Removed Lines]",
          "870:   ngx_queue_t* q;",
          "872:   while (!ngx_queue_empty(&stream->write_completed_queue)) {",
          "874:     q = ngx_queue_head(&stream->write_completed_queue);",
          "875:     req = ngx_queue_data(q, uv_write_t, queue);",
          "876:     ngx_queue_remove(q);",
          "",
          "[Added Lines]",
          "870:   QUEUE* q;",
          "872:   while (!QUEUE_EMPTY(&stream->write_completed_queue)) {",
          "874:     q = QUEUE_HEAD(&stream->write_completed_queue);",
          "875:     req = QUEUE_DATA(q, uv_write_t, queue);",
          "876:     QUEUE_REMOVE(q);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "883:     }",
          "884:   }",
          "890:     uv__drain(stream);",
          "891: }",
          "",
          "[Removed Lines]",
          "886:   assert(ngx_queue_empty(&stream->write_completed_queue));",
          "889:   if (ngx_queue_empty(&stream->write_queue))",
          "",
          "[Added Lines]",
          "886:   assert(QUEUE_EMPTY(&stream->write_completed_queue));",
          "889:   if (QUEUE_EMPTY(&stream->write_queue))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1204:   req->handle = stream;",
          "1205:   req->error = 0;",
          "1206:   req->send_handle = send_handle;",
          "1209:   if (bufcnt <= (int) ARRAY_SIZE(req->bufsml))",
          "1210:     req->bufs = req->bufsml;",
          "",
          "[Removed Lines]",
          "1207:   ngx_queue_init(&req->queue);",
          "",
          "[Added Lines]",
          "1207:   QUEUE_INIT(&req->queue);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1217:   stream->write_queue_size += uv__buf_count(bufs, bufcnt);",
          "",
          "[Removed Lines]",
          "1220:   ngx_queue_insert_tail(&stream->write_queue, &req->queue);",
          "",
          "[Added Lines]",
          "1220:   QUEUE_INSERT_TAIL(&stream->write_queue, &req->queue);",
          "",
          "---------------"
        ],
        "src/unix/sunos.c||src/unix/sunos.c": [
          "File: src/unix/sunos.c -> src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:   struct port_event events[1024];",
          "92:   struct port_event* pe;",
          "93:   struct timespec spec;",
          "95:   uv__io_t* w;",
          "96:   uint64_t base;",
          "97:   uint64_t diff;",
          "",
          "[Removed Lines]",
          "94:   ngx_queue_t* q;",
          "",
          "[Added Lines]",
          "94:   QUEUE* q;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:   int fd;",
          "105:   if (loop->nfds == 0) {",
          "107:     return;",
          "108:   }",
          "116:     assert(w->pevents != 0);",
          "118:     if (port_associate(loop->backend_fd, PORT_SOURCE_FD, w->fd, w->pevents, 0))",
          "",
          "[Removed Lines]",
          "106:     assert(ngx_queue_empty(&loop->watcher_queue));",
          "110:   while (!ngx_queue_empty(&loop->watcher_queue)) {",
          "111:     q = ngx_queue_head(&loop->watcher_queue);",
          "112:     ngx_queue_remove(q);",
          "113:     ngx_queue_init(q);",
          "115:     w = ngx_queue_data(q, uv__io_t, watcher_queue);",
          "",
          "[Added Lines]",
          "106:     assert(QUEUE_EMPTY(&loop->watcher_queue));",
          "110:   while (!QUEUE_EMPTY(&loop->watcher_queue)) {",
          "111:     q = QUEUE_HEAD(&loop->watcher_queue);",
          "112:     QUEUE_REMOVE(q);",
          "113:     QUEUE_INIT(q);",
          "115:     w = QUEUE_DATA(q, uv__io_t, watcher_queue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "190:       nevents++;",
          "195:     }",
          "197:     if (nevents != 0) {",
          "",
          "[Removed Lines]",
          "193:       if (w->pevents != 0 && ngx_queue_empty(&w->watcher_queue))",
          "194:         ngx_queue_insert_tail(&loop->watcher_queue, &w->watcher_queue);",
          "",
          "[Added Lines]",
          "193:       if (w->pevents != 0 && QUEUE_EMPTY(&w->watcher_queue))",
          "194:         QUEUE_INSERT_TAIL(&loop->watcher_queue, &w->watcher_queue);",
          "",
          "---------------"
        ],
        "src/unix/tcp.c||src/unix/tcp.c": [
          "File: src/unix/tcp.c -> src/unix/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:   uv__req_init(handle->loop, req, UV_CONNECT);",
          "117:   req->cb = cb;",
          "118:   req->handle = (uv_stream_t*) handle;",
          "120:   handle->connect_req = req;",
          "122:   uv__io_start(handle->loop, &handle->io_watcher, UV__POLLOUT);",
          "",
          "[Removed Lines]",
          "119:   ngx_queue_init(&req->queue);",
          "",
          "[Added Lines]",
          "119:   QUEUE_INIT(&req->queue);",
          "",
          "---------------"
        ],
        "src/unix/threadpool.c||src/unix/threadpool.c": [
          "File: src/unix/threadpool.c -> src/unix/threadpool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: static unsigned int nthreads;",
          "31: static uv_thread_t* threads;",
          "32: static uv_thread_t default_threads[4];",
          "35: static volatile int initialized;",
          "",
          "[Removed Lines]",
          "33: static ngx_queue_t exit_message;",
          "34: static ngx_queue_t wq;",
          "",
          "[Added Lines]",
          "33: static QUEUE exit_message;",
          "34: static QUEUE wq;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: static void worker(void* arg) {",
          "47:   struct uv__work* w;",
          "50:   (void) arg;",
          "52:   for (;;) {",
          "53:     uv_mutex_lock(&mutex);",
          "56:       uv_cond_wait(&cond, &mutex);",
          "60:     if (q == &exit_message)",
          "61:       uv_cond_signal(&cond);",
          "62:     else {",
          "66:     }",
          "",
          "[Removed Lines]",
          "48:   ngx_queue_t* q;",
          "55:     while (ngx_queue_empty(&wq))",
          "58:     q = ngx_queue_head(&wq);",
          "63:       ngx_queue_remove(q);",
          "64:       ngx_queue_init(q);  /* Signal uv_cancel() that the work req is",
          "",
          "[Added Lines]",
          "48:   QUEUE* q;",
          "55:     while (QUEUE_EMPTY(&wq))",
          "58:     q = QUEUE_HEAD(&wq);",
          "63:       QUEUE_REMOVE(q);",
          "64:       QUEUE_INIT(q);  /* Signal uv_cancel() that the work req is",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:     if (q == &exit_message)",
          "71:       break;",
          "74:     w->work(w);",
          "76:     uv_mutex_lock(&w->loop->wq_mutex);",
          "77:     w->work = NULL;  /* Signal uv_cancel() that the work req is done",
          "80:     uv_async_send(&w->loop->wq_async);",
          "81:     uv_mutex_unlock(&w->loop->wq_mutex);",
          "82:   }",
          "83: }",
          "87:   uv_mutex_lock(&mutex);",
          "89:   uv_cond_signal(&cond);",
          "90:   uv_mutex_unlock(&mutex);",
          "91: }",
          "",
          "[Removed Lines]",
          "73:     w = ngx_queue_data(q, struct uv__work, wq);",
          "79:     ngx_queue_insert_tail(&w->loop->wq, &w->wq);",
          "86: static void post(ngx_queue_t* q) {",
          "88:   ngx_queue_insert_tail(&wq, q);",
          "",
          "[Added Lines]",
          "73:     w = QUEUE_DATA(q, struct uv__work, wq);",
          "79:     QUEUE_INSERT_TAIL(&w->loop->wq, &w->wq);",
          "86: static void post(QUEUE* q) {",
          "88:   QUEUE_INSERT_TAIL(&wq, q);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "119:   if (uv_mutex_init(&mutex))",
          "120:     abort();",
          "124:   for (i = 0; i < nthreads; i++)",
          "125:     if (uv_thread_create(threads + i, worker, NULL))",
          "",
          "[Removed Lines]",
          "122:   ngx_queue_init(&wq);",
          "",
          "[Added Lines]",
          "122:   QUEUE_INIT(&wq);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "174:   uv_mutex_lock(&mutex);",
          "175:   uv_mutex_lock(&w->loop->wq_mutex);",
          "178:   if (cancelled)",
          "181:   uv_mutex_unlock(&w->loop->wq_mutex);",
          "182:   uv_mutex_unlock(&mutex);",
          "",
          "[Removed Lines]",
          "177:   cancelled = !ngx_queue_empty(&w->wq) && w->work != NULL;",
          "179:     ngx_queue_remove(&w->wq);",
          "",
          "[Added Lines]",
          "177:   cancelled = !QUEUE_EMPTY(&w->wq) && w->work != NULL;",
          "179:     QUEUE_REMOVE(&w->wq);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "187:   w->work = uv__cancelled;",
          "188:   uv_mutex_lock(&loop->wq_mutex);",
          "190:   uv_async_send(&loop->wq_async);",
          "191:   uv_mutex_unlock(&loop->wq_mutex);",
          "",
          "[Removed Lines]",
          "189:   ngx_queue_insert_tail(&loop->wq, &w->wq);",
          "",
          "[Added Lines]",
          "189:   QUEUE_INSERT_TAIL(&loop->wq, &w->wq);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "197: void uv__work_done(uv_async_t* handle, int status) {",
          "198:   struct uv__work* w;",
          "199:   uv_loop_t* loop;",
          "202:   int err;",
          "204:   loop = container_of(handle, uv_loop_t, wq_async);",
          "207:   uv_mutex_lock(&loop->wq_mutex);",
          "211:   }",
          "212:   uv_mutex_unlock(&loop->wq_mutex);",
          "218:     w = container_of(q, struct uv__work, wq);",
          "219:     err = (w->work == uv__cancelled) ? -UV_ECANCELED : 0;",
          "",
          "[Removed Lines]",
          "200:   ngx_queue_t* q;",
          "201:   ngx_queue_t wq;",
          "205:   ngx_queue_init(&wq);",
          "208:   if (!ngx_queue_empty(&loop->wq)) {",
          "209:     q = ngx_queue_head(&loop->wq);",
          "210:     ngx_queue_split(&loop->wq, q, &wq);",
          "214:   while (!ngx_queue_empty(&wq)) {",
          "215:     q = ngx_queue_head(&wq);",
          "216:     ngx_queue_remove(q);",
          "",
          "[Added Lines]",
          "200:   QUEUE* q;",
          "201:   QUEUE wq;",
          "205:   QUEUE_INIT(&wq);",
          "208:   if (!QUEUE_EMPTY(&loop->wq)) {",
          "209:     q = QUEUE_HEAD(&loop->wq);",
          "210:     QUEUE_SPLIT(&loop->wq, q, &wq);",
          "214:   while (!QUEUE_EMPTY(&wq)) {",
          "215:     q = QUEUE_HEAD(&wq);",
          "216:     QUEUE_REMOVE(q);",
          "",
          "---------------"
        ],
        "src/unix/udp.c||src/unix/udp.c": [
          "File: src/unix/udp.c -> src/unix/udp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: void uv__udp_finish_close(uv_udp_t* handle) {",
          "56:   uv_udp_send_t* req;",
          "59:   assert(!uv__io_active(&handle->io_watcher, UV__POLLIN | UV__POLLOUT));",
          "60:   assert(handle->io_watcher.fd == -1);",
          "62:   uv__udp_run_completed(handle);",
          "69:     uv__req_unregister(handle->loop, req);",
          "71:     if (req->bufs != req->bufsml)",
          "",
          "[Removed Lines]",
          "57:   ngx_queue_t* q;",
          "64:   while (!ngx_queue_empty(&handle->write_queue)) {",
          "65:     q = ngx_queue_head(&handle->write_queue);",
          "66:     ngx_queue_remove(q);",
          "68:     req = ngx_queue_data(q, uv_udp_send_t, queue);",
          "",
          "[Added Lines]",
          "57:   QUEUE* q;",
          "64:   while (!QUEUE_EMPTY(&handle->write_queue)) {",
          "65:     q = QUEUE_HEAD(&handle->write_queue);",
          "66:     QUEUE_REMOVE(q);",
          "68:     req = QUEUE_DATA(q, uv_udp_send_t, queue);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89: static void uv__udp_run_pending(uv_udp_t* handle) {",
          "90:   uv_udp_send_t* req;",
          "92:   struct msghdr h;",
          "93:   ssize_t size;",
          "97:     assert(q != NULL);",
          "100:     assert(req != NULL);",
          "102:     memset(&h, 0, sizeof h);",
          "",
          "[Removed Lines]",
          "91:   ngx_queue_t* q;",
          "95:   while (!ngx_queue_empty(&handle->write_queue)) {",
          "96:     q = ngx_queue_head(&handle->write_queue);",
          "99:     req = ngx_queue_data(q, uv_udp_send_t, queue);",
          "",
          "[Added Lines]",
          "91:   QUEUE* q;",
          "95:   while (!QUEUE_EMPTY(&handle->write_queue)) {",
          "96:     q = QUEUE_HEAD(&handle->write_queue);",
          "99:     req = QUEUE_DATA(q, uv_udp_send_t, queue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "142:   }",
          "143: }",
          "146: static void uv__udp_run_completed(uv_udp_t* handle) {",
          "147:   uv_udp_send_t* req;",
          "155:     uv__req_unregister(handle->loop, req);",
          "157:     if (req->bufs != req->bufsml)",
          "",
          "[Removed Lines]",
          "140:     ngx_queue_remove(&req->queue);",
          "141:     ngx_queue_insert_tail(&handle->write_completed_queue, &req->queue);",
          "148:   ngx_queue_t* q;",
          "150:   while (!ngx_queue_empty(&handle->write_completed_queue)) {",
          "151:     q = ngx_queue_head(&handle->write_completed_queue);",
          "152:     ngx_queue_remove(q);",
          "154:     req = ngx_queue_data(q, uv_udp_send_t, queue);",
          "",
          "[Added Lines]",
          "140:     QUEUE_REMOVE(&req->queue);",
          "141:     QUEUE_INSERT_TAIL(&handle->write_completed_queue, &req->queue);",
          "148:   QUEUE* q;",
          "150:   while (!QUEUE_EMPTY(&handle->write_completed_queue)) {",
          "151:     q = QUEUE_HEAD(&handle->write_completed_queue);",
          "152:     QUEUE_REMOVE(q);",
          "154:     req = QUEUE_DATA(q, uv_udp_send_t, queue);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "264:   assert(handle->type == UV_UDP);",
          "265:   assert(revents & UV__POLLOUT);",
          "271:   uv__udp_run_pending(handle);",
          "",
          "[Removed Lines]",
          "267:   assert(!ngx_queue_empty(&handle->write_queue)",
          "268:       || !ngx_queue_empty(&handle->write_completed_queue));",
          "",
          "[Added Lines]",
          "267:   assert(!QUEUE_EMPTY(&handle->write_queue)",
          "268:       || !QUEUE_EMPTY(&handle->write_completed_queue));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "274:   uv__udp_run_completed(handle);",
          "278:     uv__io_feed(handle->loop, &handle->io_watcher);",
          "279:   }",
          "282:     uv__io_stop(loop, &handle->io_watcher, UV__POLLOUT);",
          "",
          "[Removed Lines]",
          "276:   if (!ngx_queue_empty(&handle->write_completed_queue)) {",
          "280:   else if (ngx_queue_empty(&handle->write_queue)) {",
          "",
          "[Added Lines]",
          "276:   if (!QUEUE_EMPTY(&handle->write_completed_queue)) {",
          "280:   else if (QUEUE_EMPTY(&handle->write_queue)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "442:   }",
          "444:   memcpy(req->bufs, bufs, bufcnt * sizeof(bufs[0]));",
          "446:   uv__io_start(handle->loop, &handle->io_watcher, UV__POLLOUT);",
          "447:   uv__handle_start(handle);",
          "",
          "[Removed Lines]",
          "445:   ngx_queue_insert_tail(&handle->write_queue, &req->queue);",
          "",
          "[Added Lines]",
          "445:   QUEUE_INSERT_TAIL(&handle->write_queue, &req->queue);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "455:   handle->alloc_cb = NULL;",
          "456:   handle->recv_cb = NULL;",
          "457:   uv__io_init(&handle->io_watcher, uv__udp_io, -1);",
          "460:   return 0;",
          "461: }",
          "",
          "[Removed Lines]",
          "458:   ngx_queue_init(&handle->write_queue);",
          "459:   ngx_queue_init(&handle->write_completed_queue);",
          "",
          "[Added Lines]",
          "458:   QUEUE_INIT(&handle->write_queue);",
          "459:   QUEUE_INIT(&handle->write_completed_queue);",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363: void uv_walk(uv_loop_t* loop, uv_walk_cb walk_cb, void* arg) {",
          "365:   uv_handle_t* h;",
          "369:     if (h->flags & UV__HANDLE_INTERNAL) continue;",
          "370:     walk_cb(h, arg);",
          "371:   }",
          "",
          "[Removed Lines]",
          "364:   ngx_queue_t* q;",
          "367:   ngx_queue_foreach(q, &loop->handle_queue) {",
          "368:     h = ngx_queue_data(q, uv_handle_t, handle_queue);",
          "",
          "[Added Lines]",
          "364:   QUEUE* q;",
          "367:   QUEUE_FOREACH(q, &loop->handle_queue) {",
          "368:     h = QUEUE_DATA(q, uv_handle_t, handle_queue);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "375: #ifndef NDEBUG",
          "376: static void uv__print_handles(uv_loop_t* loop, int only_active) {",
          "377:   const char* type;",
          "379:   uv_handle_t* h;",
          "381:   if (loop == NULL)",
          "382:     loop = uv_default_loop();",
          "387:     if (only_active && !uv__is_active(h))",
          "388:       continue;",
          "",
          "[Removed Lines]",
          "378:   ngx_queue_t* q;",
          "384:   ngx_queue_foreach(q, &loop->handle_queue) {",
          "385:     h = ngx_queue_data(q, uv_handle_t, handle_queue);",
          "",
          "[Added Lines]",
          "378:   QUEUE* q;",
          "384:   QUEUE_FOREACH(q, &loop->handle_queue) {",
          "385:     h = QUEUE_DATA(q, uv_handle_t, handle_queue);",
          "",
          "---------------"
        ],
        "src/uv-common.h||src/uv-common.h": [
          "File: src/uv-common.h -> src/uv-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include \"uv.h\"",
          "40: #include \"tree.h\"",
          "43: #define ARRAY_SIZE(a) (sizeof(a) / sizeof((a)[0]))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: #include \"queue.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118: #define uv__has_active_reqs(loop)                                             \\",
          "121: #define uv__req_register(loop, req)                                           \\",
          "122:   do {                                                                        \\",
          "124:   }                                                                           \\",
          "125:   while (0)",
          "127: #define uv__req_unregister(loop, req)                                         \\",
          "128:   do {                                                                        \\",
          "129:     assert(uv__has_active_reqs(loop));                                        \\",
          "131:   }                                                                           \\",
          "132:   while (0)",
          "",
          "[Removed Lines]",
          "119:   (ngx_queue_empty(&(loop)->active_reqs) == 0)",
          "123:     ngx_queue_insert_tail(&(loop)->active_reqs, &(req)->active_queue);        \\",
          "130:     ngx_queue_remove(&(req)->active_queue);                                   \\",
          "",
          "[Added Lines]",
          "120:   (QUEUE_EMPTY(&(loop)->active_reqs) == 0)",
          "124:     QUEUE_INSERT_TAIL(&(loop)->active_reqs, &(req)->active_queue);            \\",
          "131:     QUEUE_REMOVE(&(req)->active_queue);                                       \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196:     (h)->loop = (loop_);                                                      \\",
          "197:     (h)->type = (type_);                                                      \\",
          "198:     (h)->flags = UV__HANDLE_REF;  /* Ref the loop when active. */             \\",
          "200:     uv__handle_platform_init(h);                                              \\",
          "201:   }                                                                           \\",
          "202:   while (0)",
          "",
          "[Removed Lines]",
          "199:     ngx_queue_insert_tail(&(loop_)->handle_queue, &(h)->handle_queue);        \\",
          "",
          "[Added Lines]",
          "200:     QUEUE_INSERT_TAIL(&(loop_)->handle_queue, &(h)->handle_queue);            \\",
          "",
          "---------------"
        ],
        "src/win/core.c||src/win/core.c": [
          "File: src/win/core.c -> src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:   loop->time = 0;",
          "93:   uv_update_time(loop);",
          "97:   loop->active_handles = 0;",
          "99:   loop->pending_reqs_tail = NULL;",
          "",
          "[Removed Lines]",
          "95:   ngx_queue_init(&loop->handle_queue);",
          "96:   ngx_queue_init(&loop->active_reqs);",
          "",
          "[Added Lines]",
          "95:   QUEUE_INIT(&loop->handle_queue);",
          "96:   QUEUE_INIT(&loop->active_reqs);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254: static int uv__loop_alive(uv_loop_t* loop) {",
          "255:   return loop->active_handles > 0 ||",
          "257:          loop->endgame_handles != NULL;",
          "258: }",
          "",
          "[Removed Lines]",
          "256:          !ngx_queue_empty(&loop->active_reqs) ||",
          "",
          "[Added Lines]",
          "256:          !QUEUE_EMPTY(&loop->active_reqs) ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "291:                   loop->endgame_handles == NULL &&",
          "292:                   !loop->stop_flag &&",
          "293:                   (loop->active_handles > 0 ||",
          "295:                   !(mode & UV_RUN_NOWAIT));",
          "297:     uv_check_invoke(loop);",
          "",
          "[Removed Lines]",
          "294:                    !ngx_queue_empty(&loop->active_reqs)) &&",
          "",
          "[Added Lines]",
          "294:                    !QUEUE_EMPTY(&loop->active_reqs)) &&",
          "",
          "---------------"
        ],
        "src/win/handle-inl.h||src/win/handle-inl.h": [
          "File: src/win/handle-inl.h -> src/win/handle-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: #define uv__handle_close(handle)                                        \\",
          "76:   do {                                                                  \\",
          "78:     uv__active_handle_rm((uv_handle_t*) (handle));                      \\",
          "79:                                                                         \\",
          "80:     (handle)->flags |= UV_HANDLE_CLOSED;                                \\",
          "",
          "[Removed Lines]",
          "77:     ngx_queue_remove(&(handle)->handle_queue);                          \\",
          "",
          "[Added Lines]",
          "77:     QUEUE_REMOVE(&(handle)->handle_queue);                              \\",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:       'sources': [",
          "51:         'common.gypi',",
          "52:         'include/uv.h',",
          "54:         'include/uv-private/tree.h',",
          "55:         'src/fs-poll.c',",
          "56:         'src/inet.c',",
          "57:         'src/uv-common.c',",
          "58:         'src/uv-common.h',",
          "59:         'src/version.c'",
          "",
          "[Removed Lines]",
          "53:         'include/uv-private/ngx-queue.h',",
          "",
          "[Added Lines]",
          "56:         'src/queue.h',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a4f03504ceb7c7db6f05cc176bb37cd4b632bda3",
      "candidate_info": {
        "commit_hash": "a4f03504ceb7c7db6f05cc176bb37cd4b632bda3",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a4f03504ceb7c7db6f05cc176bb37cd4b632bda3",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "Now working on v0.11.30",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: # OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.",
          "15: AC_PREREQ(2.57)",
          "17: AC_CONFIG_MACRO_DIR([m4])",
          "18: m4_include([m4/libuv-extra-automake-flags.m4])",
          "19: m4_include([m4/as_case.m4])",
          "",
          "[Removed Lines]",
          "16: AC_INIT([libuv], [0.11.29], [https://github.com/joyent/libuv/issues])",
          "",
          "[Added Lines]",
          "16: AC_INIT([libuv], [0.11.30], [https://github.com/joyent/libuv/issues])",
          "",
          "---------------"
        ]
      }
    }
  ]
}