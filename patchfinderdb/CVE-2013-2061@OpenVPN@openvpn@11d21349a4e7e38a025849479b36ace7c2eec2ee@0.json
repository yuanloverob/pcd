{
  "cve_id": "CVE-2013-2061",
  "cve_desc": "The openvpn_decrypt function in crypto.c in OpenVPN 2.3.0 and earlier, when running in UDP mode, allows remote attackers to obtain sensitive information via a timing attack involving an HMAC comparison function that does not run in constant time and a padding oracle attack on the CBC mode cipher.",
  "repo": "OpenVPN/openvpn",
  "patch_hash": "11d21349a4e7e38a025849479b36ace7c2eec2ee",
  "patch_info": {
    "commit_hash": "11d21349a4e7e38a025849479b36ace7c2eec2ee",
    "repo": "OpenVPN/openvpn",
    "commit_url": "https://github.com/OpenVPN/openvpn/commit/11d21349a4e7e38a025849479b36ace7c2eec2ee",
    "files": [
      "src/openvpn/buffer.h",
      "src/openvpn/crypto.c"
    ],
    "message": "Use constant time memcmp when comparing HMACs in openvpn_decrypt.\n\nSigned-off-by: Steffan Karger <steffan.karger@fox-it.com>\nAcked-by: Gert Doering <gert@greenie.muc.de>\nSigned-off-by: Gert Doering <gert@greenie.muc.de>",
    "before_after_code_files": [
      "src/openvpn/buffer.h||src/openvpn/buffer.h",
      "src/openvpn/crypto.c||src/openvpn/crypto.c"
    ]
  },
  "patch_diff": {
    "src/openvpn/buffer.h||src/openvpn/buffer.h": [
      "File: src/openvpn/buffer.h -> src/openvpn/buffer.h"
    ],
    "src/openvpn/crypto.c||src/openvpn/crypto.c": [
      "File: src/openvpn/crypto.c -> src/openvpn/crypto.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "65: #define CRYPT_ERROR(format) \\",
      "66:   do { msg (D_CRYPT_ERRORS, \"%s: \" format, error_prefix); goto error_exit; } while (false)",
      "68: void",
      "69: openvpn_encrypt (struct buffer *buf, struct buffer work,",
      "70:    const struct crypto_options *opt,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72: static int",
      "73: memcmp_constant_time (const void *a, const void *b, size_t size) {",
      "74:   const uint8_t * a1 = a;",
      "75:   const uint8_t * b1 = b;",
      "76:   int ret = 0;",
      "77:   size_t i;",
      "79:   for (i = 0; i < size; i++) {",
      "80:       ret |= *a1++ ^ *b1++;",
      "81:   }",
      "83:   return ret;",
      "84: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "244:    hmac_ctx_final (ctx->hmac, local_hmac);",
      "248:      CRYPT_ERROR (\"packet HMAC authentication failed\");",
      "250:    ASSERT (buf_advance (buf, hmac_len));",
      "",
      "[Removed Lines]",
      "247:    if (memcmp (local_hmac, BPTR (buf), hmac_len))",
      "",
      "[Added Lines]",
      "265:    if (memcmp_constant_time (local_hmac, BPTR (buf), hmac_len))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d106cf240f1c8f4c0e279c3e242a5bd17803b8e8",
      "candidate_info": {
        "commit_hash": "d106cf240f1c8f4c0e279c3e242a5bd17803b8e8",
        "repo": "OpenVPN/openvpn",
        "commit_url": "https://github.com/OpenVPN/openvpn/commit/d106cf240f1c8f4c0e279c3e242a5bd17803b8e8",
        "files": [
          "buffer.h",
          "crypto.c"
        ],
        "message": "Use constant time memcmp when comparing HMACs in openvpn_decrypt.\n\nSigned-off-by: Steffan Karger <steffan.karger@fox-it.com>\nAcked-by: Gert Doering <gert@greenie.muc.de>\nSigned-off-by: Gert Doering <gert@greenie.muc.de>\n(cherry picked from commit 11d21349a4e7e38a025849479b36ace7c2eec2ee)",
        "before_after_code_files": [
          "buffer.h||buffer.h",
          "crypto.c||crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "buffer.h||buffer.h": [
          "File: buffer.h -> buffer.h"
        ],
        "crypto.c||crypto.c": [
          "File: crypto.c -> crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70: #define CRYPT_ERROR(format) \\",
          "71:   do { msg (D_CRYPT_ERRORS, \"%s: \" format, error_prefix); goto error_exit; } while (false)",
          "73: void",
          "74: openvpn_encrypt (struct buffer *buf, struct buffer work,",
          "75:    const struct crypto_options *opt,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77: static int",
          "78: memcmp_constant_time (const void *a, const void *b, size_t size) {",
          "79:   const uint8_t * a1 = a;",
          "80:   const uint8_t * b1 = b;",
          "81:   int ret = 0;",
          "82:   size_t i;",
          "84:   for (i = 0; i < size; i++) {",
          "85:       ret |= *a1++ ^ *b1++;",
          "86:   }",
          "88:   return ret;",
          "89: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:    ASSERT (hmac_len == in_hmac_len);",
          "258:      CRYPT_ERROR (\"packet HMAC authentication failed\");",
          "260:    ASSERT (buf_advance (buf, hmac_len));",
          "",
          "[Removed Lines]",
          "257:    if (memcmp (local_hmac, BPTR (buf), hmac_len))",
          "",
          "[Added Lines]",
          "275:    if (memcmp_constant_time (local_hmac, BPTR (buf), hmac_len))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f375aa67cc5e8c7e9639b8f020b192f948050eef",
      "candidate_info": {
        "commit_hash": "f375aa67cc5e8c7e9639b8f020b192f948050eef",
        "repo": "OpenVPN/openvpn",
        "commit_url": "https://github.com/OpenVPN/openvpn/commit/f375aa67cc5e8c7e9639b8f020b192f948050eef",
        "files": [
          "src/openvpn/buffer.h",
          "src/openvpn/crypto.c"
        ],
        "message": "Use constant time memcmp when comparing HMACs in openvpn_decrypt.\n\nSigned-off-by: Steffan Karger <steffan.karger@fox-it.com>\nAcked-by: Gert Doering <gert@greenie.muc.de>\nSigned-off-by: Gert Doering <gert@greenie.muc.de>\n(cherry picked from commit 11d21349a4e7e38a025849479b36ace7c2eec2ee)",
        "before_after_code_files": [
          "src/openvpn/buffer.h||src/openvpn/buffer.h",
          "src/openvpn/crypto.c||src/openvpn/crypto.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/openvpn/buffer.h||src/openvpn/buffer.h",
            "src/openvpn/crypto.c||src/openvpn/crypto.c"
          ],
          "candidate": [
            "src/openvpn/buffer.h||src/openvpn/buffer.h",
            "src/openvpn/crypto.c||src/openvpn/crypto.c"
          ]
        }
      },
      "candidate_diff": {
        "src/openvpn/buffer.h||src/openvpn/buffer.h": [
          "File: src/openvpn/buffer.h -> src/openvpn/buffer.h"
        ],
        "src/openvpn/crypto.c||src/openvpn/crypto.c": [
          "File: src/openvpn/crypto.c -> src/openvpn/crypto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: #define CRYPT_ERROR(format) \\",
          "66:   do { msg (D_CRYPT_ERRORS, \"%s: \" format, error_prefix); goto error_exit; } while (false)",
          "68: void",
          "69: openvpn_encrypt (struct buffer *buf, struct buffer work,",
          "70:    const struct crypto_options *opt,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: static int",
          "73: memcmp_constant_time (const void *a, const void *b, size_t size) {",
          "74:   const uint8_t * a1 = a;",
          "75:   const uint8_t * b1 = b;",
          "76:   int ret = 0;",
          "77:   size_t i;",
          "79:   for (i = 0; i < size; i++) {",
          "80:       ret |= *a1++ ^ *b1++;",
          "81:   }",
          "83:   return ret;",
          "84: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:    hmac_ctx_final (ctx->hmac, local_hmac);",
          "248:      CRYPT_ERROR (\"packet HMAC authentication failed\");",
          "250:    ASSERT (buf_advance (buf, hmac_len));",
          "",
          "[Removed Lines]",
          "247:    if (memcmp (local_hmac, BPTR (buf), hmac_len))",
          "",
          "[Added Lines]",
          "265:    if (memcmp_constant_time (local_hmac, BPTR (buf), hmac_len))",
          "",
          "---------------"
        ]
      }
    }
  ]
}