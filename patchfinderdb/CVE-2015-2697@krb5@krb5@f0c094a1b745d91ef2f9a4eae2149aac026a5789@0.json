{
  "cve_id": "CVE-2015-2697",
  "cve_desc": "The build_principal_va function in lib/krb5/krb/bld_princ.c in MIT Kerberos 5 (aka krb5) before 1.14 allows remote authenticated users to cause a denial of service (out-of-bounds read and KDC crash) via an initial '\\0' character in a long realm field within a TGS request.",
  "repo": "krb5/krb5",
  "patch_hash": "f0c094a1b745d91ef2f9a4eae2149aac026a5789",
  "patch_info": {
    "commit_hash": "f0c094a1b745d91ef2f9a4eae2149aac026a5789",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/f0c094a1b745d91ef2f9a4eae2149aac026a5789",
    "files": [
      "src/lib/krb5/krb/bld_princ.c"
    ],
    "message": "Fix build_principal memory bug [CVE-2015-2697]\n\nIn build_principal_va(), use k5memdup0() instead of strdup() to make a\ncopy of the realm, to ensure that we allocate the correct number of\nbytes and do not read past the end of the input string.  This bug\naffects krb5_build_principal(), krb5_build_principal_va(), and\nkrb5_build_principal_alloc_va().  krb5_build_principal_ext() is not\naffected.\n\nCVE-2015-2697:\n\nIn MIT krb5 1.7 and later, an authenticated attacker may be able to\ncause a KDC to crash using a TGS request with a large realm field\nbeginning with a null byte.  If the KDC attempts to find a referral to\nanswer the request, it constructs a principal name for lookup using\nkrb5_build_principal() with the requested realm.  Due to a bug in this\nfunction, the null byte causes only one byte be allocated for the\nrealm field of the constructed principal, far less than its length.\nSubsequent operations on the lookup principal may cause a read beyond\nthe end of the mapped memory region, causing the KDC process to crash.\n\nCVSSv2: AV:N/AC:L/Au:S/C:N/I:N/A:C/E:POC/RL:OF/RC:C\n\nticket: 8252 (new)\ntarget_version: 1.14\ntags: pullup",
    "before_after_code_files": [
      "src/lib/krb5/krb/bld_princ.c||src/lib/krb5/krb/bld_princ.c"
    ]
  },
  "patch_diff": {
    "src/lib/krb5/krb/bld_princ.c||src/lib/krb5/krb/bld_princ.c": [
      "File: src/lib/krb5/krb/bld_princ.c -> src/lib/krb5/krb/bld_princ.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "40:     data = malloc(size * sizeof(krb5_data));",
      "41:     if (!data) { retval = ENOMEM; }",
      "48:     while (!retval && (component = va_arg(ap, char *))) {",
      "49:         if (count == size) {",
      "",
      "[Removed Lines]",
      "43:     if (!retval) {",
      "44:         r = strdup(realm);",
      "45:         if (!r) { retval = ENOMEM; }",
      "46:     }",
      "",
      "[Added Lines]",
      "43:     if (!retval)",
      "44:         r = k5memdup0(realm, rlen, &retval);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "41d987867a29a8a8fa6f99de63d9e05b8792e91a",
      "candidate_info": {
        "commit_hash": "41d987867a29a8a8fa6f99de63d9e05b8792e91a",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/41d987867a29a8a8fa6f99de63d9e05b8792e91a",
        "files": [
          "src/lib/krb5/krb/bld_princ.c"
        ],
        "message": "Fix build_principal memory bug [CVE-2015-2697]\n\nIn build_principal_va(), use k5memdup0() instead of strdup() to make a\ncopy of the realm, to ensure that we allocate the correct number of\nbytes and do not read past the end of the input string.  This bug\naffects krb5_build_principal(), krb5_build_principal_va(), and\nkrb5_build_principal_alloc_va().  krb5_build_principal_ext() is not\naffected.\n\nCVE-2015-2697:\n\nIn MIT krb5 1.7 and later, an authenticated attacker may be able to\ncause a KDC to crash using a TGS request with a large realm field\nbeginning with a null byte.  If the KDC attempts to find a referral to\nanswer the request, it constructs a principal name for lookup using\nkrb5_build_principal() with the requested realm.  Due to a bug in this\nfunction, the null byte causes only one byte be allocated for the\nrealm field of the constructed principal, far less than its length.\nSubsequent operations on the lookup principal may cause a read beyond\nthe end of the mapped memory region, causing the KDC process to crash.\n\nCVSSv2: AV:N/AC:L/Au:S/C:N/I:N/A:C/E:POC/RL:OF/RC:C\n\n(cherry picked from commit f0c094a1b745d91ef2f9a4eae2149aac026a5789)\n(cherry picked from commit 67bdf8189b24efca8a244316e7d51bd52d0dbda9)\n\nticket: 8283 (new)\nversion_fixed: 1.13.3\nstatus: resolved",
        "before_after_code_files": [
          "src/lib/krb5/krb/bld_princ.c||src/lib/krb5/krb/bld_princ.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/krb5/krb/bld_princ.c||src/lib/krb5/krb/bld_princ.c"
          ],
          "candidate": [
            "src/lib/krb5/krb/bld_princ.c||src/lib/krb5/krb/bld_princ.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/krb5/krb/bld_princ.c||src/lib/krb5/krb/bld_princ.c": [
          "File: src/lib/krb5/krb/bld_princ.c -> src/lib/krb5/krb/bld_princ.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     data = malloc(size * sizeof(krb5_data));",
          "41:     if (!data) { retval = ENOMEM; }",
          "48:     while (!retval && (component = va_arg(ap, char *))) {",
          "49:         if (count == size) {",
          "",
          "[Removed Lines]",
          "43:     if (!retval) {",
          "44:         r = strdup(realm);",
          "45:         if (!r) { retval = ENOMEM; }",
          "46:     }",
          "",
          "[Added Lines]",
          "43:     if (!retval)",
          "44:         r = k5memdup0(realm, rlen, &retval);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67bdf8189b24efca8a244316e7d51bd52d0dbda9",
      "candidate_info": {
        "commit_hash": "67bdf8189b24efca8a244316e7d51bd52d0dbda9",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/67bdf8189b24efca8a244316e7d51bd52d0dbda9",
        "files": [
          "src/lib/krb5/krb/bld_princ.c"
        ],
        "message": "Fix build_principal memory bug [CVE-2015-2697]\n\nIn build_principal_va(), use k5memdup0() instead of strdup() to make a\ncopy of the realm, to ensure that we allocate the correct number of\nbytes and do not read past the end of the input string.  This bug\naffects krb5_build_principal(), krb5_build_principal_va(), and\nkrb5_build_principal_alloc_va().  krb5_build_principal_ext() is not\naffected.\n\nCVE-2015-2697:\n\nIn MIT krb5 1.7 and later, an authenticated attacker may be able to\ncause a KDC to crash using a TGS request with a large realm field\nbeginning with a null byte.  If the KDC attempts to find a referral to\nanswer the request, it constructs a principal name for lookup using\nkrb5_build_principal() with the requested realm.  Due to a bug in this\nfunction, the null byte causes only one byte be allocated for the\nrealm field of the constructed principal, far less than its length.\nSubsequent operations on the lookup principal may cause a read beyond\nthe end of the mapped memory region, causing the KDC process to crash.\n\nCVSSv2: AV:N/AC:L/Au:S/C:N/I:N/A:C/E:POC/RL:OF/RC:C\n\n(cherry picked from commit f0c094a1b745d91ef2f9a4eae2149aac026a5789)\n\nticket: 8252\nversion_fixed: 1.14\nstatus: resolved",
        "before_after_code_files": [
          "src/lib/krb5/krb/bld_princ.c||src/lib/krb5/krb/bld_princ.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/krb5/krb/bld_princ.c||src/lib/krb5/krb/bld_princ.c"
          ],
          "candidate": [
            "src/lib/krb5/krb/bld_princ.c||src/lib/krb5/krb/bld_princ.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/krb5/krb/bld_princ.c||src/lib/krb5/krb/bld_princ.c": [
          "File: src/lib/krb5/krb/bld_princ.c -> src/lib/krb5/krb/bld_princ.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:     data = malloc(size * sizeof(krb5_data));",
          "41:     if (!data) { retval = ENOMEM; }",
          "48:     while (!retval && (component = va_arg(ap, char *))) {",
          "49:         if (count == size) {",
          "",
          "[Removed Lines]",
          "43:     if (!retval) {",
          "44:         r = strdup(realm);",
          "45:         if (!r) { retval = ENOMEM; }",
          "46:     }",
          "",
          "[Added Lines]",
          "43:     if (!retval)",
          "44:         r = k5memdup0(realm, rlen, &retval);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "073fbe18f102cb135ba5d3f9e6b7d84d20c125f2",
      "candidate_info": {
        "commit_hash": "073fbe18f102cb135ba5d3f9e6b7d84d20c125f2",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/073fbe18f102cb135ba5d3f9e6b7d84d20c125f2",
        "files": [
          "src/lib/krb5/krb/bld_princ.c"
        ],
        "message": "Fix build_principal memory bug [CVE-2015-2697]\n\nIn build_principal_va(), use k5memdup0() instead of strdup() to make a\ncopy of the realm, to ensure that we allocate the correct number of\nbytes and do not read past the end of the input string.  This bug\naffects krb5_build_principal(), krb5_build_principal_va(), and\nkrb5_build_principal_alloc_va().  krb5_build_principal_ext() is not\naffected.\n\nCVE-2015-2697:\n\nIn MIT krb5 1.7 and later, an authenticated attacker may be able to\ncause a KDC to crash using a TGS request with a large realm field\nbeginning with a null byte.  If the KDC attempts to find a referral to\nanswer the request, it constructs a principal name for lookup using\nkrb5_build_principal() with the requested realm.  Due to a bug in this\nfunction, the null byte causes only one byte be allocated for the\nrealm field of the constructed principal, far less than its length.\nSubsequent operations on the lookup principal may cause a read beyond\nthe end of the mapped memory region, causing the KDC process to crash.\n\nCVSSv2: AV:N/AC:L/Au:S/C:N/I:N/A:C/E:POC/RL:OF/RC:C\n\n(cherry picked from commit f0c094a1b745d91ef2f9a4eae2149aac026a5789)\n\nticket: 8315 (new)\nversion_fixed: 1.12.5\nstatus: resolved",
        "before_after_code_files": [
          "src/lib/krb5/krb/bld_princ.c||src/lib/krb5/krb/bld_princ.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/krb5/krb/bld_princ.c||src/lib/krb5/krb/bld_princ.c"
          ],
          "candidate": [
            "src/lib/krb5/krb/bld_princ.c||src/lib/krb5/krb/bld_princ.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/krb5/krb/bld_princ.c||src/lib/krb5/krb/bld_princ.c": [
          "File: src/lib/krb5/krb/bld_princ.c -> src/lib/krb5/krb/bld_princ.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:     data = malloc(size * sizeof(krb5_data));",
          "42:     if (!data) { retval = ENOMEM; }",
          "49:     while (!retval && (component = va_arg(ap, char *))) {",
          "50:         if (count == size) {",
          "",
          "[Removed Lines]",
          "44:     if (!retval) {",
          "45:         r = strdup(realm);",
          "46:         if (!r) { retval = ENOMEM; }",
          "47:     }",
          "",
          "[Added Lines]",
          "44:     if (!retval)",
          "45:         r = k5memdup0(realm, rlen, &retval);",
          "",
          "---------------"
        ]
      }
    }
  ]
}