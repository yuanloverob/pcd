{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7cd5e856e55c64ed7109595c7dd154d65861ec03",
      "candidate_info": {
        "commit_hash": "7cd5e856e55c64ed7109595c7dd154d65861ec03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7cd5e856e55c64ed7109595c7dd154d65861ec03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/select6.test"
        ],
        "message": "Fix the query flattener optimization so that it preserve the \"SF_Compound\" bit when flattening a compound subquery into a non-compound outer query. Failure to preserve that bit could allow subsequent flattenings which are not valid. Fix for ticket [c41afac34f15781fe09cd].\n\nFossilOrigin-Name: 523b42371122d9e1b3185425745f1490138bff7f7cc941ee26ee81df7ade5bf4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/select6.test||test/select6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c736c40aab071a69bd5c5347b7c116d87ea3954019e967ca8ff7bdb4b518e5bf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4045:       substSelect(&x, pParent, 0);",
          "4046:     }",
          "",
          "[Removed Lines]",
          "4051:     pParent->selFlags |= pSub->selFlags & SF_Distinct;",
          "",
          "[Added Lines]",
          "4050:     pParent->selFlags |= pSub->selFlags & SF_Compound;",
          "",
          "---------------"
        ],
        "test/select6.test||test/select6.test": [
          "File: test/select6.test -> test/select6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: # focus of this file is testing SELECT statements that contain",
          "13: # subqueries in their FROM clause.",
          "14: #",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "",
          "[Removed Lines]",
          "15: # $Id: select6.test,v 1.29 2009/01/09 01:12:28 drh Exp $",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "613:     FROM ( SELECT count(*) AS cnt FROM t1 );",
          "614: } {{}}",
          "617: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "615: # 2019-05-29 ticket https://www.sqlite.org/src/info/c41afac34f15781f",
          "616: # A LIMIT clause in a subquery is incorrectly applied to a subquery.",
          "617: #",
          "618: do_execsql_test 12.100 {",
          "619:   DROP TABLE t1;",
          "620:   DROP TABLE t2;",
          "621:   CREATE TABLE t1(a);",
          "622:   INSERT INTO t1 VALUES(1);",
          "623:   INSERT INTO t1 VALUES(2);",
          "624:   CREATE TABLE t2(b);",
          "625:   INSERT INTO t2 VALUES(3);",
          "626:   SELECT * FROM (",
          "627:     SELECT * FROM (SELECT * FROM t1 LIMIT 1)",
          "628:     UNION ALL",
          "629:     SELECT * from t2);",
          "630: } {1 3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e7800a9dbfc516a4041dbea010830f75cae617d",
      "candidate_info": {
        "commit_hash": "3e7800a9dbfc516a4041dbea010830f75cae617d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3e7800a9dbfc516a4041dbea010830f75cae617d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btreeInt.h",
          "test/corrupt2.test",
          "test/corruptD.test",
          "test/corruptK.test"
        ],
        "message": "Defer computing the number of bytes of free space on a btree page until that value is actually needed.\n\nFossilOrigin-Name: 177f5f40eabfcfd229ac7f291dfed9e9ee35762e86923a0f356915f389da177d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btreeInt.h||src/btreeInt.h",
          "test/corrupt2.test||test/corrupt2.test",
          "test/corruptD.test||test/corruptD.test",
          "test/corruptK.test||test/corruptK.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 09e337386beb2008eba969f79601d1b8ed953951ce6e43782586e168140d78d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1506:   data[hdr+7] = 0;",
          "1508:  defragment_out:",
          "1509:   if( data[hdr+7]+cbrk-iCellFirst!=pPage->nFree ){",
          "1510:     return SQLITE_CORRUPT_PAGE(pPage);",
          "1511:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1509:   assert( pPage->nFree>=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1657:   testcase( gap+2+nByte==top );",
          "1658:   if( gap+2+nByte>top ){",
          "1659:     assert( pPage->nCell>0 || CORRUPT_DB );",
          "1660:     rc = defragmentPage(pPage, MIN(4, pPage->nFree - (2+nByte)));",
          "1661:     if( rc ) return rc;",
          "1662:     top = get2byteNotZero(&data[hdr+5]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1661:     assert( pPage->nFree>=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1845:   return SQLITE_OK;",
          "1846: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1854: static int btreeComputeFreeSpace(MemPage *pPage){",
          "1864:   assert( pPage->pBt!=0 );",
          "1865:   assert( pPage->pBt->db!=0 );",
          "1866:   assert( sqlite3_mutex_held(pPage->pBt->mutex) );",
          "1867:   assert( pPage->pgno==sqlite3PagerPagenumber(pPage->pDbPage) );",
          "1868:   assert( pPage == sqlite3PagerGetExtra(pPage->pDbPage) );",
          "1869:   assert( pPage->aData == sqlite3PagerGetData(pPage->pDbPage) );",
          "1870:   assert( pPage->isInit==1 );",
          "1871:   assert( pPage->nFree<0 );",
          "1873:   usableSize = pPage->pBt->usableSize;",
          "1874:   hdr = pPage->hdrOffset;",
          "1875:   data = pPage->aData;",
          "1879:   top = get2byteNotZero(&data[hdr+5]);",
          "1880:   iCellFirst = hdr + 8 + pPage->childPtrSize + 2*pPage->nCell;",
          "1881:   iCellLast = usableSize - 4;",
          "1887:   pc = get2byte(&data[hdr+1]);",
          "1889:   if( pc>0 ){",
          "1890:     u32 next, size;",
          "1891:     if( pc<iCellFirst ){",
          "1895:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1896:     }",
          "1897:     while( 1 ){",
          "1898:       if( pc>iCellLast ){",
          "1900:         return SQLITE_CORRUPT_PAGE(pPage);",
          "1901:       }",
          "1902:       next = get2byte(&data[pc]);",
          "1903:       size = get2byte(&data[pc+2]);",
          "1904:       nFree = nFree + size;",
          "1905:       if( next<=pc+size+3 ) break;",
          "1906:       pc = next;",
          "1907:     }",
          "1908:     if( next>0 ){",
          "1910:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1911:     }",
          "1912:     if( pc+size>(unsigned int)usableSize ){",
          "1914:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1915:     }",
          "1916:   }",
          "1925:   if( nFree>usableSize ){",
          "1926:     return SQLITE_CORRUPT_PAGE(pPage);",
          "1927:   }",
          "1928:   pPage->nFree = (u16)(nFree - iCellFirst);",
          "1929:   return SQLITE_OK;",
          "1930: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1890:   pPage->aDataEnd = &data[usableSize];",
          "1891:   pPage->aCellIdx = &data[cellOffset];",
          "1892:   pPage->aDataOfst = &data[pPage->childPtrSize];",
          "1899:   pPage->nCell = get2byte(&data[hdr+3]);",
          "",
          "[Removed Lines]",
          "1896:   top = get2byteNotZero(&data[hdr+5]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1909:   assert( pPage->nCell>0 || top==usableSize || CORRUPT_DB );",
          "",
          "[Added Lines]",
          "1987:   assert( pPage->nCell>0",
          "1988:        || get2byteNotZero(&data[hdr+5])==usableSize",
          "1989:        || CORRUPT_DB );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1937:     }",
          "1938:     if( !pPage->leaf ) iCellLast++;",
          "1939:   }",
          "1987:   pPage->isInit = 1;",
          "1988:   return SQLITE_OK;",
          "1989: }",
          "",
          "[Removed Lines]",
          "1945:   pc = get2byte(&data[hdr+1]);",
          "1947:   if( pc>0 ){",
          "1948:     u32 next, size;",
          "1949:     if( pc<iCellFirst ){",
          "1953:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1954:     }",
          "1955:     while( 1 ){",
          "1956:       if( pc>iCellLast ){",
          "1958:         return SQLITE_CORRUPT_PAGE(pPage);",
          "1959:       }",
          "1960:       next = get2byte(&data[pc]);",
          "1961:       size = get2byte(&data[pc+2]);",
          "1962:       nFree = nFree + size;",
          "1963:       if( next<=pc+size+3 ) break;",
          "1964:       pc = next;",
          "1965:     }",
          "1966:     if( next>0 ){",
          "1968:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1969:     }",
          "1970:     if( pc+size>(unsigned int)usableSize ){",
          "1972:       return SQLITE_CORRUPT_PAGE(pPage);",
          "1973:     }",
          "1974:   }",
          "1983:   if( nFree>usableSize ){",
          "1984:     return SQLITE_CORRUPT_PAGE(pPage);",
          "1985:   }",
          "1986:   pPage->nFree = (u16)(nFree - iCellFirst);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2128:   if( pgno>btreePagecount(pBt) ){",
          "2129:     rc = SQLITE_CORRUPT_BKPT;",
          "2131:   }",
          "2132:   rc = sqlite3PagerGet(pBt->pPager, pgno, (DbPage**)&pDbPage, bReadOnly);",
          "2133:   if( rc ){",
          "2135:   }",
          "2137:   if( (*ppPage)->isInit==0 ){",
          "2138:     btreePageFromDbPage(pDbPage, pgno, pBt);",
          "2139:     rc = btreeInitPage(*ppPage);",
          "2140:     if( rc!=SQLITE_OK ){",
          "2143:     }",
          "2144:   }",
          "2145:   assert( (*ppPage)->pgno==pgno );",
          "",
          "[Removed Lines]",
          "2130:     goto getAndInitPage_error;",
          "2134:     goto getAndInitPage_error;",
          "2141:       releasePage(*ppPage);",
          "2142:       goto getAndInitPage_error;",
          "",
          "[Added Lines]",
          "2164:     goto getAndInitPage_error1;",
          "2168:     goto getAndInitPage_error1;",
          "2175:       goto getAndInitPage_error2;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2150:   if( pCur && ((*ppPage)->nCell<1 || (*ppPage)->intKey!=pCur->curIntKey) ){",
          "2151:     rc = SQLITE_CORRUPT_PGNO(pgno);",
          "2154:   }",
          "2155:   return SQLITE_OK;",
          "2158:   if( pCur ){",
          "2159:     pCur->iPage--;",
          "2160:     pCur->pPage = pCur->apPage[pCur->iPage];",
          "",
          "[Removed Lines]",
          "2152:     releasePage(*ppPage);",
          "2153:     goto getAndInitPage_error;",
          "2157: getAndInitPage_error:",
          "",
          "[Added Lines]",
          "2185:     goto getAndInitPage_error2;",
          "2189: getAndInitPage_error2:",
          "2190:   releasePage(*ppPage);",
          "2191: getAndInitPage_error1:",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6566:   assert( CORRUPT_DB || sz==cellSize(pPage, idx) );",
          "6567:   assert( sqlite3PagerIswriteable(pPage->pDbPage) );",
          "6568:   assert( sqlite3_mutex_held(pPage->pBt->mutex) );",
          "6569:   data = pPage->aData;",
          "6570:   ptr = &pPage->aCellIdx[2*idx];",
          "6571:   pc = get2byte(ptr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6603:   assert( pPage->nFree>=0 );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6638:   assert( sz==pPage->xCellSize(pPage, pCell) || (sz==8 && iChild>0) );",
          "6639:   if( pPage->nOverflow || sz+2>pPage->nFree ){",
          "6640:     if( pTemp ){",
          "6641:       memcpy(pTemp, pCell, sz);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6674:   assert( pPage->nFree>=0 );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "7187:   assert( sqlite3_mutex_held(pPage->pBt->mutex) );",
          "7188:   assert( sqlite3PagerIswriteable(pParent->pDbPage) );",
          "7189:   assert( pPage->nOverflow==1 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7228:   assert( pPage->nFree>=0 );",
          "7229:   assert( pParent->nFree>=0 );",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "7359:     pTo->isInit = 0;",
          "7360:     rc = btreeInitPage(pTo);",
          "7361:     if( rc!=SQLITE_OK ){",
          "7363:       return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7399:     if( rc==SQLITE_OK ) rc = btreeComputeFreeSpace(pTo);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "7466:   if( !aOvflSpace ){",
          "7467:     return SQLITE_NOMEM_BKPT;",
          "7468:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7508:   assert( pParent->nFree>=0 );",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "7505:       memset(apOld, 0, (i+1)*sizeof(MemPage*));",
          "7506:       goto balance_cleanup;",
          "7507:     }",
          "7508:     nMaxCells += 1+apOld[i]->nCell+apOld[i]->nOverflow;",
          "7509:     if( (i--)==0 ) break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7548:     if( apOld[i]->nFree<0 ){",
          "7549:       rc = btreeComputeFreeSpace(apOld[i]);",
          "7550:       if( rc ){",
          "7551:         memset(apOld, 0, (i)*sizeof(MemPage*));",
          "7552:         goto balance_cleanup;",
          "7553:       }",
          "7554:     }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "7704:       b.apEnd[k] = pParent->aDataEnd;",
          "7705:       b.ixNx[k] = cntOld[i]+1;",
          "7706:     }",
          "7707:     szNew[i] = usableSpace - p->nFree;",
          "7708:     for(j=0; j<p->nOverflow; j++){",
          "7709:       szNew[i] += 2 + p->xCellSize(p, p->apOvfl[j]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7754:     assert( p->nFree>=0 );",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "8247:     int iPage = pCur->iPage;",
          "8248:     MemPage *pPage = pCur->pPage;",
          "8250:     if( iPage==0 ){",
          "8251:       if( pPage->nOverflow ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8298:     if( NEVER(pPage->nFree<0) && btreeComputeFreeSpace(pPage) ) break;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "8275:       int const iIdx = pCur->aiIdx[iPage-1];",
          "8277:       rc = sqlite3PagerWrite(pParent->pDbPage);",
          "8278:       if( rc==SQLITE_OK ){",
          "8279: #ifndef SQLITE_OMIT_QUICKBALANCE",
          "8280:         if( pPage->intKeyLeaf",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8327:       if( rc==SQLITE_OK && pParent->nFree<0 ){",
          "8328:         rc = btreeComputeFreeSpace(pParent);",
          "8329:       }",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "8621:   pPage = pCur->pPage;",
          "8622:   assert( pPage->intKey || pX->nKey>=0 );",
          "8623:   assert( pPage->leaf || !pPage->intKey );",
          "8625:   TRACE((\"INSERT: table=%d nkey=%lld ndata=%d page=%d %s\\n\",",
          "8626:           pCur->pgnoRoot, pX->nKey, pX->nData, pPage->pgno,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8676:   if( pPage->nFree<0 ){",
          "8677:     rc = btreeComputeFreeSpace(pPage);",
          "8678:     if( rc ) return rc;",
          "8679:   }",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "8771:   iCellIdx = pCur->ix;",
          "8772:   pPage = pCur->pPage;",
          "8773:   pCell = findCell(pPage, iCellIdx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8830:   if( pPage->nFree<0 && btreeComputeFreeSpace(pPage) ) return SQLITE_CORRUPT;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "8841:     Pgno n;",
          "8842:     unsigned char *pTmp;",
          "8844:     if( iCellDepth<pCur->iPage-1 ){",
          "8845:       n = pCur->apPage[iCellDepth+1]->pgno;",
          "8846:     }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8901:     if( pLeaf->nFree<0 ){",
          "8902:       rc = btreeComputeFreeSpace(pLeaf);",
          "8903:       if( rc ) return rc;",
          "8904:     }",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "9732:                    \"btreeInitPage() returns error code %d\", rc);",
          "9733:     goto end_of_check;",
          "9734:   }",
          "9735:   data = pPage->aData;",
          "9736:   hdr = pPage->hdrOffset;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9796:   if( (rc = btreeComputeFreeSpace(pPage))!=0 ){",
          "9797:     assert( rc==SQLITE_CORRUPT );",
          "9798:     checkAppendMsg(pCheck, \"free space corruption\", rc);",
          "9799:     goto end_of_check;",
          "9800:   }",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h"
        ],
        "test/corrupt2.test||test/corrupt2.test": [
          "File: test/corrupt2.test -> test/corrupt2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   close $f",
          "97:   sqlite3 db2 corrupt.db",
          "104: do_test corrupt2-1.5 {",
          "105:   db2 close",
          "",
          "[Removed Lines]",
          "98:   catchsql \"",
          "99:     $::presql",
          "100:     SELECT * FROM sqlite_master;",
          "101:   \" db2",
          "102: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "98:   # Note: This test is no longer meaningful due to the deferred computation",
          "99:   # of MemPage.nFree",
          "100:   catchsql {PRAGMA quick_check} db2",
          "101: } {0 {{*** in database main ***",
          "102: Page 1: free space corruption}}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:   close $f",
          "120:   sqlite3 db2 corrupt.db",
          "126: db2 close",
          "128: # Corrupt a database by having 2 indices of the same name:",
          "",
          "[Removed Lines]",
          "121:   catchsql \"",
          "122:     $::presql",
          "123:     SELECT * FROM sqlite_master;",
          "124:   \" db2",
          "125: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "121:   catchsql {PRAGMA quick_check} db2",
          "122: } {0 {{*** in database main ***",
          "123: Page 1: free space corruption}}}",
          "",
          "---------------"
        ],
        "test/corruptD.test||test/corruptD.test": [
          "File: test/corruptD.test -> test/corruptD.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: do_test corruptD-1.1.1 {",
          "112:   incr_change_counter",
          "113:   hexio_write test.db [expr 1024+1] FFFF",
          "116: do_test corruptD-1.1.2 {",
          "117:   incr_change_counter",
          "118:   hexio_write test.db [expr 1024+1] [hexio_render_int32 1021]",
          "",
          "[Removed Lines]",
          "114:   catchsql { SELECT * FROM t1 ORDER BY rowid }",
          "115: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "114:   catchsql { PRAGMA quick_check }",
          "115: } {0 {{*** in database main ***",
          "116: Page 2: free space corruption}}}",
          "",
          "---------------"
        ],
        "test/corruptK.test||test/corruptK.test": [
          "File: test/corruptK.test -> test/corruptK.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: do_execsql_test 1.3 {",
          "69:   INSERT INTO t1 VALUES(randomblob(20));",
          "70: }",
          "71: do_catchsql_test 1.4 {",
          "72:   INSERT INTO t1 VALUES(randomblob(90));",
          "73: } {1 {database disk image is malformed}}",
          "75: #-------------------------------------------------------------------------",
          "76: reset_db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: # This test no longer functions due to the deferred computation of",
          "73: # MemPage.nFree.",
          "74: #",
          "75: if 0 {",
          "79: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f10ce63651927b471a965adfd7519d4d14d09392",
      "candidate_info": {
        "commit_hash": "f10ce63651927b471a965adfd7519d4d14d09392",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f10ce63651927b471a965adfd7519d4d14d09392",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Fix PRAGMA integrity_check so that it does not cancel the PRAGMA vdbe_debug setting.\n\nFossilOrigin-Name: aaa3a19f8cf5ba7003634e4610abc7832354af91d7c7f65469218678f66bcd46",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 599b4df43c64ce295517c804b6bb4c3ab77d77e0ba585dc0657274f55489a3b1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9804:   Pgno i;",
          "9805:   IntegrityCk sCheck;",
          "9806:   BtShared *pBt = p->pBt;",
          "9808:   char zErr[100];",
          "9809:   VVA_ONLY( int nRef );",
          "",
          "[Removed Lines]",
          "9807:   int savedDbFlags = pBt->db->flags;",
          "",
          "[Added Lines]",
          "9807:   u64 savedDbFlags = pBt->db->flags;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "130dbc3d96d2f673c75864b032fa7e24a08cb3a4",
      "candidate_info": {
        "commit_hash": "130dbc3d96d2f673c75864b032fa7e24a08cb3a4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/130dbc3d96d2f673c75864b032fa7e24a08cb3a4",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Add recent interesting cases from dbsqlfuzz.\n\nFossilOrigin-Name: f06ef3d75d85545dd58c6dda10f7ad04fafbb7ae8706b3821be21f86a94795f1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5beb6dc9bc2d3d0003e33488df9c01aaf28c41c30fd9ca35543cbe3ec5a8d9ce",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac6627327c01a1f9655e7ac33cb3adab45abc761",
      "candidate_info": {
        "commit_hash": "ac6627327c01a1f9655e7ac33cb3adab45abc761",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ac6627327c01a1f9655e7ac33cb3adab45abc761",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/windowA.test"
        ],
        "message": "New test cases for window functions with RANGE BETWEEN and DESC NULLS FIRST.\n\nFossilOrigin-Name: f7002f86c780e279c9f8a6268f317586519c059c9de2115ff6f1cad272570c29",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/windowA.test||test/windowA.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 39b4cad4a51bb5116d62ffb16ac36d96a9280321b049eb2d008605392f52a459",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/windowA.test||test/windowA.test": [
          "File: test/windowA.test -> test/windowA.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-08-30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # Test cases for RANGE BETWEEN and especially with NULLS LAST",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix windowA",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b CHAR(1), d FLOAT);",
          "25:   INSERT INTO t1 VALUES",
          "26:    (1, 'A', 5.4),",
          "27:    (2, 'B', 5.55),",
          "28:    (3, 'C', 8.0),",
          "29:    (4, 'D', 10.25),",
          "30:    (5, 'E', 10.26),",
          "31:    (6, 'N', NULL),",
          "32:    (7, 'N', NULL);",
          "33: } {}",
          "35: do_execsql_test 1.1 {",
          "36:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "37:   WINDOW w1 AS",
          "38:      (ORDER BY d DESC NULLS LAST",
          "39:       RANGE BETWEEN 2.50 PRECEDING AND 2.25 FOLLOWING)",
          "40:   ORDER BY +d DESC NULLS LAST, +a;",
          "41: } [list \\",
          "42:   5 E 10.26 ED   \\",
          "43:   4 D 10.25 EDC  \\",
          "44:   3 C   8.0 EDC  \\",
          "45:   2 B  5.55 CBA  \\",
          "46:   1 A   5.4 BA   \\",
          "47:   6 N  NULL NN   \\",
          "48:   7 N  NULL NN   \\",
          "49: ]",
          "51: do_execsql_test 1.2 {",
          "52:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "53:   WINDOW w1 AS",
          "54:      (ORDER BY d DESC NULLS FIRST",
          "55:       RANGE BETWEEN 2.50 PRECEDING AND 2.25 FOLLOWING)",
          "56:   ORDER BY +d DESC NULLS FIRST, +a;",
          "57: } [list \\",
          "58:   6 N  NULL NN   \\",
          "59:   7 N  NULL NN   \\",
          "60:   5 E 10.26 ED   \\",
          "61:   4 D 10.25 EDC  \\",
          "62:   3 C   8.0 EDC  \\",
          "63:   2 B  5.55 CBA  \\",
          "64:   1 A   5.4 BA   \\",
          "65: ]",
          "67: do_execsql_test 1.3 {",
          "68:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "69:   WINDOW w1 AS",
          "70:      (ORDER BY d DESC NULLS LAST",
          "71:       RANGE BETWEEN 2.50 PRECEDING AND UNBOUNDED FOLLOWING)",
          "72:   ORDER BY +d DESC NULLS LAST, +a;",
          "73: } [list \\",
          "74:   5 E 10.26 EDCBANN  \\",
          "75:   4 D 10.25 EDCBANN  \\",
          "76:   3 C   8.0 EDCBANN  \\",
          "77:   2 B  5.55 CBANN    \\",
          "78:   1 A   5.4 BANN     \\",
          "79:   6 N  NULL NN       \\",
          "80:   7 N  NULL NN       \\",
          "81: ]",
          "83: do_execsql_test 1.4 {",
          "84:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "85:   WINDOW w1 AS",
          "86:      (ORDER BY d DESC NULLS FIRST",
          "87:       RANGE BETWEEN 2.50 PRECEDING AND UNBOUNDED FOLLOWING)",
          "88:   ORDER BY +d DESC NULLS FIRST, +a;",
          "89: } [list \\",
          "90:   6 N  NULL NNEDCBA  \\",
          "91:   7 N  NULL NNEDCBA  \\",
          "92:   5 E 10.26 EDCBA    \\",
          "93:   4 D 10.25 EDCBA    \\",
          "94:   3 C   8.0 EDCBA    \\",
          "95:   2 B  5.55 CBA      \\",
          "96:   1 A   5.4 BA       \\",
          "97: ]",
          "99: do_execsql_test 1.5 {",
          "100:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "101:   WINDOW w1 AS",
          "102:      (ORDER BY d DESC NULLS LAST",
          "103:       RANGE BETWEEN 2.50 PRECEDING AND CURRENT ROW)",
          "104:   ORDER BY +d DESC NULLS LAST, +a;",
          "105: } [list \\",
          "106:   5 E 10.26 E    \\",
          "107:   4 D 10.25 ED   \\",
          "108:   3 C   8.0 EDC  \\",
          "109:   2 B  5.55 CB   \\",
          "110:   1 A   5.4 BA   \\",
          "111:   6 N  NULL NN   \\",
          "112:   7 N  NULL NN   \\",
          "113: ]",
          "115: do_execsql_test 1.6 {",
          "116:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "117:   WINDOW w1 AS",
          "118:      (ORDER BY d DESC NULLS FIRST",
          "119:       RANGE BETWEEN 2.50 PRECEDING AND CURRENT ROW)",
          "120:   ORDER BY +d DESC NULLS FIRST, +a;",
          "121: } [list \\",
          "122:   6 N  NULL NN   \\",
          "123:   7 N  NULL NN   \\",
          "124:   5 E 10.26 E    \\",
          "125:   4 D 10.25 ED   \\",
          "126:   3 C   8.0 EDC  \\",
          "127:   2 B  5.55 CB   \\",
          "128:   1 A   5.4 BA   \\",
          "129: ]",
          "131: do_execsql_test 2.1 {",
          "132:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "133:   WINDOW w1 AS",
          "134:      (ORDER BY d DESC NULLS LAST",
          "135:       RANGE BETWEEN UNBOUNDED PRECEDING AND 2.25 FOLLOWING)",
          "136:   ORDER BY +d DESC NULLS LAST, +a;",
          "137: } [list \\",
          "138:   5 E 10.26 ED       \\",
          "139:   4 D 10.25 EDC      \\",
          "140:   3 C   8.0 EDC      \\",
          "141:   2 B  5.55 EDCBA    \\",
          "142:   1 A   5.4 EDCBA    \\",
          "143:   6 N  NULL EDCBANN  \\",
          "144:   7 N  NULL EDCBANN  \\",
          "145: ]",
          "147: do_execsql_test 2.2 {",
          "148:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "149:   WINDOW w1 AS",
          "150:      (ORDER BY d DESC NULLS FIRST",
          "151:       RANGE BETWEEN UNBOUNDED PRECEDING AND 2.25 FOLLOWING)",
          "152:   ORDER BY +d DESC NULLS FIRST, +a;",
          "153: } [list \\",
          "154:   6 N  NULL NN         \\",
          "155:   7 N  NULL NN         \\",
          "156:   5 E 10.26 NNED       \\",
          "157:   4 D 10.25 NNEDC      \\",
          "158:   3 C   8.0 NNEDC      \\",
          "159:   2 B  5.55 NNEDCBA    \\",
          "160:   1 A   5.4 NNEDCBA    \\",
          "161: ]",
          "163: do_execsql_test 2.3 {",
          "164:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "165:   WINDOW w1 AS",
          "166:      (ORDER BY d DESC NULLS LAST",
          "167:       RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)",
          "168:   ORDER BY +d DESC NULLS LAST, +a;",
          "169: } [list \\",
          "170:   5 E 10.26 EDCBANN  \\",
          "171:   4 D 10.25 EDCBANN  \\",
          "172:   3 C   8.0 EDCBANN  \\",
          "173:   2 B  5.55 EDCBANN  \\",
          "174:   1 A   5.4 EDCBANN  \\",
          "175:   6 N  NULL EDCBANN  \\",
          "176:   7 N  NULL EDCBANN  \\",
          "177: ]",
          "179: do_execsql_test 2.4 {",
          "180:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "181:   WINDOW w1 AS",
          "182:      (ORDER BY d DESC NULLS FIRST",
          "183:       RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)",
          "184:   ORDER BY +d DESC NULLS FIRST, +a;",
          "185: } [list \\",
          "186:   6 N  NULL NNEDCBA  \\",
          "187:   7 N  NULL NNEDCBA  \\",
          "188:   5 E 10.26 NNEDCBA  \\",
          "189:   4 D 10.25 NNEDCBA  \\",
          "190:   3 C   8.0 NNEDCBA  \\",
          "191:   2 B  5.55 NNEDCBA  \\",
          "192:   1 A   5.4 NNEDCBA  \\",
          "193: ]",
          "195: do_execsql_test 2.5 {",
          "196:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "197:   WINDOW w1 AS",
          "198:      (ORDER BY d DESC NULLS LAST",
          "199:       RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)",
          "200:   ORDER BY +d DESC NULLS LAST, +a;",
          "201: } [list \\",
          "202:   5 E 10.26 E        \\",
          "203:   4 D 10.25 ED       \\",
          "204:   3 C   8.0 EDC      \\",
          "205:   2 B  5.55 EDCB     \\",
          "206:   1 A   5.4 EDCBA    \\",
          "207:   6 N  NULL EDCBANN  \\",
          "208:   7 N  NULL EDCBANN  \\",
          "209: ]",
          "211: do_execsql_test 2.6 {",
          "212:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "213:   WINDOW w1 AS",
          "214:      (ORDER BY d DESC NULLS FIRST",
          "215:       RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)",
          "216:   ORDER BY +d DESC NULLS FIRST, +a;",
          "217: } [list \\",
          "218:   6 N  NULL NN       \\",
          "219:   7 N  NULL NN       \\",
          "220:   5 E 10.26 NNE      \\",
          "221:   4 D 10.25 NNED     \\",
          "222:   3 C   8.0 NNEDC    \\",
          "223:   2 B  5.55 NNEDCB   \\",
          "224:   1 A   5.4 NNEDCBA  \\",
          "225: ]",
          "228: do_execsql_test 3.1 {",
          "229:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "230:   WINDOW w1 AS",
          "231:      (ORDER BY d DESC NULLS LAST",
          "232:       RANGE BETWEEN CURRENT ROW AND 2.25 FOLLOWING)",
          "233:   ORDER BY +d DESC NULLS LAST, +a;",
          "234: } [list \\",
          "235:   5 E 10.26 ED       \\",
          "236:   4 D 10.25 DC       \\",
          "237:   3 C   8.0 C        \\",
          "238:   2 B  5.55 BA       \\",
          "239:   1 A   5.4 A        \\",
          "240:   6 N  NULL NN       \\",
          "241:   7 N  NULL NN       \\",
          "242: ]",
          "244: do_execsql_test 3.2 {",
          "245:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "246:   WINDOW w1 AS",
          "247:      (ORDER BY d DESC NULLS FIRST",
          "248:       RANGE BETWEEN CURRENT ROW AND 2.25 FOLLOWING)",
          "249:   ORDER BY +d DESC NULLS FIRST, +a;",
          "250: } [list \\",
          "251:   6 N  NULL NN       \\",
          "252:   7 N  NULL NN       \\",
          "253:   5 E 10.26 ED       \\",
          "254:   4 D 10.25 DC       \\",
          "255:   3 C   8.0 C        \\",
          "256:   2 B  5.55 BA       \\",
          "257:   1 A   5.4 A        \\",
          "258: ]",
          "260: do_execsql_test 3.3 {",
          "261:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "262:   WINDOW w1 AS",
          "263:      (ORDER BY d DESC NULLS LAST",
          "264:       RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)",
          "265:   ORDER BY +d DESC NULLS LAST, +a;",
          "266: } [list \\",
          "267:   5 E 10.26 EDCBANN  \\",
          "268:   4 D 10.25 DCBANN   \\",
          "269:   3 C   8.0 CBANN    \\",
          "270:   2 B  5.55 BANN     \\",
          "271:   1 A   5.4 ANN      \\",
          "272:   6 N  NULL NN       \\",
          "273:   7 N  NULL NN       \\",
          "274: ]",
          "276: do_execsql_test 3.4 {",
          "277:   SELECT a, b, quote(d), group_concat(b,'') OVER w1 FROM t1",
          "278:   WINDOW w1 AS",
          "279:      (ORDER BY d DESC NULLS FIRST",
          "280:       RANGE BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)",
          "281:   ORDER BY +d DESC NULLS FIRST, +a;",
          "282: } [list \\",
          "283:   6 N  NULL NNEDCBA  \\",
          "284:   7 N  NULL NNEDCBA  \\",
          "285:   5 E 10.26 EDCBA    \\",
          "286:   4 D 10.25 DCBA     \\",
          "287:   3 C   8.0 CBA      \\",
          "288:   2 B  5.55 BA       \\",
          "289:   1 A   5.4 A        \\",
          "290: ]",
          "292: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}