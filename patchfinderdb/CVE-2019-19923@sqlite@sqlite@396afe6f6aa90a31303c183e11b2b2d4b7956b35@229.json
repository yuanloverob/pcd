{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
      "candidate_info": {
        "commit_hash": "9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9df385ec3d1167d6abba905f39fc7cc84a2d24b8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Always use the symbolic name SQLITE_IDXTYPE_PRIMARYKEY rather than a hard-coded magic number 2.\n\nFossilOrigin-Name: 55d43adc894a6b1e0f77bf481dad6dd604a0dc0022e72bbf2e3037f97351971e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a6509ca3dc2602c7d0376230ee63c1bb4c4066f007e77e9ac20d8eee966e5e13",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1669:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regIdx, pIdx->nColumn, aRegIdx[ix]);",
          "1670:     VdbeComment((v, \"for %s\", pIdx->zName));",
          "1671: #ifdef SQLITE_ENABLE_NULL_TRIM",
          "1673: #endif",
          "",
          "[Removed Lines]",
          "1672:     if( pIdx->idxType==2 ) sqlite3SetMakeRecordP5(v, pIdx->pTable);",
          "",
          "[Added Lines]",
          "1672:     if( pIdx->idxType==SQLITE_IDXTYPE_PRIMARYKEY ){",
          "1673:       sqlite3SetMakeRecordP5(v, pIdx->pTable);",
          "1674:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2410:         sqlite3VdbeAddOp1(v, OP_SeekEnd, iDest);",
          "2411:       }",
          "2412:     }",
          "2414:       idxInsFlags |= OPFLAG_NCHANGE;",
          "2415:     }",
          "2416:     sqlite3VdbeAddOp2(v, OP_IdxInsert, iDest, regData);",
          "",
          "[Removed Lines]",
          "2413:     if( !HasRowid(pSrc) && pDestIdx->idxType==2 ){",
          "",
          "[Added Lines]",
          "2415:     if( !HasRowid(pSrc) && pDestIdx->idxType==SQLITE_IDXTYPE_PRIMARYKEY ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ff37c4078729e5d24fa80aa803a1e2c7baf1b25d",
      "candidate_info": {
        "commit_hash": "ff37c4078729e5d24fa80aa803a1e2c7baf1b25d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ff37c4078729e5d24fa80aa803a1e2c7baf1b25d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c",
          "test/gencol1.test"
        ],
        "message": "Correctly generate pre-UPDATE content for virtual columns that are used by foreign key constraints.  Ticket [b9befa4b83a660cc]\n\nFossilOrigin-Name: 40d3282ec285d9f724f6548283f48b601510cf5284da17485723fd650a68f436",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: acedb5c7f7dc1d68bef62098d42ca59e1be7a5083bb03dc07c03b9f9d817158b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:     oldmask |= sqlite3TriggerColmask(pParse,",
          "662:         pTrigger, pChanges, 0, TRIGGER_BEFORE|TRIGGER_AFTER, pTab, onError",
          "663:     );",
          "665:       u32 colFlags = pTab->aCol[i].colFlags;",
          "670:       if( oldmask==0xffffffff",
          "671:        || (i<32 && (oldmask & MASKBIT32(i))!=0)",
          "672:        || (colFlags & COLFLAG_PRIMKEY)!=0",
          "",
          "[Removed Lines]",
          "664:     for(i=0, k=regOld; i<pTab->nCol; i++, k++){",
          "666:       if( colFlags & COLFLAG_VIRTUAL ){",
          "667:         k--;",
          "668:         continue;",
          "669:       }",
          "",
          "[Added Lines]",
          "664:     for(i=0; i<pTab->nCol; i++){",
          "666:       k = sqlite3TableColumnToStorage(pTab, i) + regOld;",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   } {30 null ntalo | 40 text balaya | 150 integer {} | 1010 real {} |}",
          "146: }",
          "148: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: # 2019-10-31 ticket b9befa4b83a660cc",
          "149: db close",
          "150: sqlite3 db :memory:",
          "151: do_execsql_test gencol1-3.100 {",
          "152:   PRAGMA foreign_keys = true;",
          "153:   CREATE TABLE t0(c0 PRIMARY KEY, c1, c2 AS (c0+c1-c3) REFERENCES t0, c3);",
          "154:   INSERT INTO t0 VALUES (0, 0, 0), (11, 5, 5);",
          "155:   UPDATE t0 SET c1 = c0, c3 = c0;",
          "156:   SELECT *, '|' FROM t0 ORDER BY +c0;",
          "157: } {0 0 0 0 | 11 11 11 11 |}",
          "158: do_catchsql_test gencol1-3.110 {",
          "159:   UPDATE t0 SET c1 = c0, c3 = c0+1;",
          "160: } {1 {FOREIGN KEY constraint failed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55469bbafb242b9b3c0b844e26a199d5c53b6f87",
      "candidate_info": {
        "commit_hash": "55469bbafb242b9b3c0b844e26a199d5c53b6f87",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/55469bbafb242b9b3c0b844e26a199d5c53b6f87",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata7.db"
        ],
        "message": "Use memmove() instead of memcpy() in a place where buffers might overlap if the database file is badly corrupted, to prevent warnings from ASAN and valgrind.\n\nFossilOrigin-Name: 65ad6c55f1ba9bc2f75afffa3adaf19f145fad7ac9a00ccce6372e9a2cc4341b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4c976f171342ba2d39779279c28f3bc088572c440922e3e4421a3bf541263360",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8351:     if( memcmp(pDest, ((u8*)pX->pData) + iOffset, iAmt)!=0 ){",
          "8352:       int rc = sqlite3PagerWrite(pPage->pDbPage);",
          "8353:       if( rc ) return rc;",
          "8355:     }",
          "8356:   }",
          "8357:   return SQLITE_OK;",
          "",
          "[Removed Lines]",
          "8354:       memcpy(pDest, ((u8*)pX->pData) + iOffset, iAmt);",
          "",
          "[Added Lines]",
          "8358:       memmove(pDest, ((u8*)pX->pData) + iOffset, iAmt);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f1bf4c1acb724d0a90c4ecc8fea76f9406719f9",
      "candidate_info": {
        "commit_hash": "0f1bf4c1acb724d0a90c4ecc8fea76f9406719f9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f1bf4c1acb724d0a90c4ecc8fea76f9406719f9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Improved detection of database corruption while balancing pages from an auto_vacuum database with overflow pages.  Test cases in TH3.\n\nFossilOrigin-Name: 35f04235c477501390acea126d07a730d81d03cdf7abcd82d861e397b3f75b0f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ac3b6021d9437ab1c027850d321f0a3e575b008763d8d515e2347f7d4e7c294b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1067:   #define ptrmapPut(w,x,y,z,rc)",
          "1068:   #define ptrmapGet(w,x,y,z) SQLITE_OK",
          "1070: #endif",
          "",
          "[Removed Lines]",
          "1069:   #define ptrmapPutOvflPtr(x, y, rc)",
          "",
          "[Added Lines]",
          "1069:   #define ptrmapPutOvflPtr(x, y, z, rc)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1360: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "1367:   CellInfo info;",
          "1368:   if( *pRC ) return;",
          "1369:   assert( pCell!=0 );",
          "1370:   pPage->xParseCell(pPage, pCell, &info);",
          "1371:   if( info.nLocal<info.nPayload ){",
          "1372:     Pgno ovfl;",
          "1375:       return;",
          "1376:     }",
          "",
          "[Removed Lines]",
          "1366: static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){",
          "1373:     if( SQLITE_WITHIN(pPage->aDataEnd, pCell, pCell+info.nLocal) ){",
          "",
          "[Added Lines]",
          "1367: static void ptrmapPutOvflPtr(MemPage *pPage, MemPage *pSrc, u8 *pCell,int *pRC){",
          "1374:     if( SQLITE_WITHIN(pSrc->aDataEnd, pCell, pCell+info.nLocal) ){",
          "1375:       testcase( pSrc!=pPage );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3491:   for(i=0; i<nCell; i++){",
          "3492:     u8 *pCell = findCell(pPage, i);",
          "3496:     if( !pPage->leaf ){",
          "3497:       Pgno childPgno = get4byte(pCell);",
          "",
          "[Removed Lines]",
          "3494:     ptrmapPutOvflPtr(pPage, pCell, &rc);",
          "",
          "[Added Lines]",
          "3496:     ptrmapPutOvflPtr(pPage, pPage, pCell, &rc);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6681:     }",
          "6682: #endif",
          "6683:   }",
          "",
          "[Removed Lines]",
          "6680:       ptrmapPutOvflPtr(pPage, pCell, pRC);",
          "",
          "[Added Lines]",
          "6682:       ptrmapPutOvflPtr(pPage, pPage, pCell, pRC);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7093:     if( ISAUTOVACUUM ){",
          "7094:       ptrmapPut(pBt, pgnoNew, PTRMAP_BTREE, pParent->pgno, &rc);",
          "7095:       if( szCell>pNew->minLocal ){",
          "7097:       }",
          "7098:     }",
          "",
          "[Removed Lines]",
          "7096:         ptrmapPutOvflPtr(pNew, pCell, &rc);",
          "",
          "[Added Lines]",
          "7098:         ptrmapPutOvflPtr(pNew, pNew, pCell, &rc);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7316:   assert( sqlite3_mutex_held(pBt->mutex) );",
          "7317:   assert( sqlite3PagerIswriteable(pParent->pDbPage) );",
          "",
          "[Removed Lines]",
          "7319: #if 0",
          "7320:   TRACE((\"BALANCE: begin page %d child of %d\\n\", pPage->pgno, pParent->pgno));",
          "7321: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "7787:   if( ISAUTOVACUUM ){",
          "7789:     u8 *aOld = pNew->aData;",
          "7790:     int cntOldNext = pNew->nCell + pNew->nOverflow;",
          "7791:     int usableSize = pBt->usableSize;",
          "",
          "[Removed Lines]",
          "7788:     MemPage *pNew = apNew[0];",
          "",
          "[Added Lines]",
          "7786:     MemPage *pOld;",
          "7787:     MemPage *pNew = pOld = apNew[0];",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "7795:     for(i=0; i<b.nCell; i++){",
          "7796:       u8 *pCell = b.apCell[i];",
          "7797:       if( i==cntOldNext ){",
          "7799:         cntOldNext += pOld->nCell + pOld->nOverflow + !leafData;",
          "7800:         aOld = pOld->aData;",
          "7801:       }",
          "",
          "[Removed Lines]",
          "7798:         MemPage *pOld = (++iOld)<nNew ? apNew[iOld] : apOld[iOld];",
          "",
          "[Added Lines]",
          "7797:         pOld = (++iOld)<nNew ? apNew[iOld] : apOld[iOld];",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "7818:           ptrmapPut(pBt, get4byte(pCell), PTRMAP_BTREE, pNew->pgno, &rc);",
          "7819:         }",
          "7820:         if( cachedCellSize(&b,i)>pNew->minLocal ){",
          "7822:         }",
          "7823:         if( rc ) goto balance_cleanup;",
          "7824:       }",
          "",
          "[Removed Lines]",
          "7821:           ptrmapPutOvflPtr(pNew, pCell, &rc);",
          "",
          "[Added Lines]",
          "7820:           ptrmapPutOvflPtr(pNew, pOld, pCell, &rc);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "03199343222fdf2db1ee4b264e79e52d251eb483",
      "candidate_info": {
        "commit_hash": "03199343222fdf2db1ee4b264e79e52d251eb483",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/03199343222fdf2db1ee4b264e79e52d251eb483",
        "files": [
          "ext/misc/fileio.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the readfile() UDF so that it returns an empty BLOB, not an OOM error, when reading an empty file.\n\nFossilOrigin-Name: 0edad5339e36d69aed9289bb3e60d35f9930386d76a62bb0194c4fdf420d16fb",
        "before_after_code_files": [
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "152:     fclose(in);",
          "153:     return;",
          "154:   }",
          "156:   if( pBuf==0 ){",
          "157:     sqlite3_result_error_nomem(ctx);",
          "158:     fclose(in);",
          "159:     return;",
          "160:   }",
          "162:     sqlite3_result_blob64(ctx, pBuf, nIn, sqlite3_free);",
          "163:   }else{",
          "164:     sqlite3_result_error_code(ctx, SQLITE_IOERR);",
          "",
          "[Removed Lines]",
          "155:   pBuf = sqlite3_malloc64( nIn );",
          "161:   if( 1==fread(pBuf, nIn, 1, in) ){",
          "",
          "[Added Lines]",
          "155:   pBuf = sqlite3_malloc64( nIn ? nIn : 1 );",
          "161:   if( nIn==fread(pBuf, 1, nIn, in) ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 789a492b68c353e2b763d67d399722b7ab61bfe09b472466df2821f65cab1be9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}