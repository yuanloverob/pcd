{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "57e73ef3943638a6a3e937f86789f391e5593b83",
      "candidate_info": {
        "commit_hash": "57e73ef3943638a6a3e937f86789f391e5593b83",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/57e73ef3943638a6a3e937f86789f391e5593b83",
        "files": [
          "apps/enc.c"
        ],
        "message": "Make the output of enc -ciphers identical\n\neven if run several times in a session.\n\nThis amounts to moving the column counter so it isn't a function local\nstatic variable and reinitialising it each time.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2884)\n(cherry picked from commit 2b305ab02e0977ed71c255cc386ff75c397d7820)",
        "before_after_code_files": [
          "apps/enc.c||apps/enc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "apps/enc.c||apps/enc.c": [
          "File: apps/enc.c -> apps/enc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: static int set_hex(char *in, unsigned char *out, int size);",
          "33: static void show_ciphers(const OBJ_NAME *name, void *bio_);",
          "35: typedef enum OPTION_choice {",
          "36:     OPT_ERR = -1, OPT_EOF = 0, OPT_HELP,",
          "37:     OPT_LIST,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: struct doall_enc_ciphers {",
          "36:     BIO *bio;",
          "37:     int n;",
          "38: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:     unsigned char key[EVP_MAX_KEY_LENGTH], iv[EVP_MAX_IV_LENGTH];",
          "101:     unsigned char *buff = NULL, salt[PKCS5_SALT_LEN];",
          "102:     long n;",
          "103: #ifdef ZLIB",
          "104:     int do_zlib = 0;",
          "105:     BIO *bzl = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:     struct doall_enc_ciphers dec;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "135:             goto end;",
          "136:         case OPT_LIST:",
          "137:             BIO_printf(bio_out, \"Supported ciphers:\\n\");",
          "138:             OBJ_NAME_do_all_sorted(OBJ_NAME_TYPE_CIPHER_METH,",
          "140:             BIO_printf(bio_out, \"\\n\");",
          "141:             ret = 0;",
          "142:             goto end;",
          "",
          "[Removed Lines]",
          "139:                                    show_ciphers, bio_out);",
          "",
          "[Added Lines]",
          "144:             dec.bio = bio_out;",
          "145:             dec.n = 0;",
          "147:                                    show_ciphers, &dec);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "559:     return (ret);",
          "560: }",
          "563: {",
          "566:     const EVP_CIPHER *cipher;",
          "568:     if (!islower((unsigned char)*name->name))",
          "",
          "[Removed Lines]",
          "562: static void show_ciphers(const OBJ_NAME *name, void *bio_)",
          "564:     BIO *bio = bio_;",
          "565:     static int n;",
          "",
          "[Added Lines]",
          "570: static void show_ciphers(const OBJ_NAME *name, void *arg)",
          "572:     struct doall_enc_ciphers *dec = (struct doall_enc_ciphers *)arg;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "575:             EVP_CIPHER_mode(cipher) == EVP_CIPH_XTS_MODE)",
          "576:         return;",
          "582:     } else",
          "584: }",
          "586: static int set_hex(char *in, unsigned char *out, int size)",
          "",
          "[Removed Lines]",
          "578:     BIO_printf(bio, \"-%-25s\", name->name);",
          "579:     if (++n == 3) {",
          "580:         BIO_printf(bio, \"\\n\");",
          "581:         n = 0;",
          "583:         BIO_printf(bio, \" \");",
          "",
          "[Added Lines]",
          "585:     BIO_printf(dec->bio, \"-%-25s\", name->name);",
          "586:     if (++dec->n == 3) {",
          "587:         BIO_printf(dec->bio, \"\\n\");",
          "588:         dec->n = 0;",
          "590:         BIO_printf(dec->bio, \" \");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2198b3a55de681e1f3c23edb0586afe13f438051",
      "candidate_info": {
        "commit_hash": "2198b3a55de681e1f3c23edb0586afe13f438051",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2198b3a55de681e1f3c23edb0586afe13f438051",
        "files": [
          "crypto/evp/e_aes.c",
          "crypto/evp/e_chacha20_poly1305.c"
        ],
        "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
          "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
            "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
          ],
          "candidate": [
            "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
            "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
          "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
          "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
          "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
          "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
          "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
          "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
          "1397:         }",
          "",
          "[Removed Lines]",
          "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
          "",
          "[Added Lines]",
          "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
          "1392:                 return 0;",
          "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
          "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
          "1397:                     return 0;",
          "1399:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
          "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
          "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
          "1952:                 len -= cctx->M;",
          "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
          "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
          "1955:         }",
          "",
          "[Removed Lines]",
          "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
          "",
          "[Added Lines]",
          "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
          "1955:                 return 0;",
          "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
          "1959:                 if (len < cctx->M)",
          "1960:                     return 0;",
          "1962:             }",
          "",
          "---------------"
        ],
        "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
          "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
          "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
          "400:             if (!ctx->encrypt) {",
          "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
          "403:                 aad = temp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401:                 if (len < POLY1305_BLOCK_SIZE)",
          "402:                     return 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}