{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7da29a3ad30ba28070f48c300633325a13b6eb8e",
      "candidate_info": {
        "commit_hash": "7da29a3ad30ba28070f48c300633325a13b6eb8e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7da29a3ad30ba28070f48c300633325a13b6eb8e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Improvements to help text for the CLI.\n\nFossilOrigin-Name: 6a01e4c444b072e31a320121a6810d7c986c2c54ce45f9b11683233b1e7af8da",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 71bfbbcc1a8d0e02073a381a5b31a5ccd5477011b22904b9989b6129d81f02e7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3791:   \".log FILE|off            Turn logging on or off.  FILE can be stderr/stdout\",",
          "3792:   \".mode MODE ?TABLE?       Set output mode\",",
          "3793:   \"   MODE is one of:\",",
          "3804:   \".nullvalue STRING        Use STRING in place of NULL values\",",
          "3805:   \".once ?OPTIONS? ?FILE?   Output for the next SQL command only to FILE\",",
          "3806:   \"     If FILE begins with '|' then open as a pipe\",",
          "",
          "[Removed Lines]",
          "3794:   \"     ascii    Columns/rows delimited by 0x1F and 0x1E\",",
          "3795:   \"     csv      Comma-separated values\",",
          "3796:   \"     column   Left-aligned columns.  (See .width)\",",
          "3797:   \"     html     HTML <table> code\",",
          "3798:   \"     insert   SQL insert statements for TABLE\",",
          "3799:   \"     line     One value per line\",",
          "3800:   \"     list     Values delimited by \\\"|\\\"\",",
          "3801:   \"     quote    Escape answers as for SQL\",",
          "3802:   \"     tabs     Tab-separated values\",",
          "3803:   \"     tcl      TCL list elements\",",
          "",
          "[Added Lines]",
          "3794:   \"     ascii     Columns/rows delimited by 0x1F and 0x1E\",",
          "3795:   \"     csv       Comma-separated values\",",
          "3796:   \"     column    Output in columns.  (See .width)\",",
          "3797:   \"     html      HTML <table> code\",",
          "3798:   \"     insert    SQL insert statements for TABLE\",",
          "3799:   \"     json      Results in a JSON array\",",
          "3800:   \"     line      One value per line\",",
          "3801:   \"     list      Values delimited by \\\"|\\\"\",",
          "3802:   \"     markdown  Markdown table format\",",
          "3803:   \"     quote     Escape answers as for SQL\",",
          "3804:   \"     table     ASCII-art table\",",
          "3805:   \"     tabs      Tab-separated values\",",
          "3806:   \"     tcl       TCL list elements\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3925:   \".vfsinfo ?AUX?           Information about the top-level VFS\",",
          "3926:   \".vfslist                 List all available VFSes\",",
          "3927:   \".vfsname ?AUX?           Print the name of the VFS stack\",",
          "3929:   \"     Negative values right-justify\",",
          "3930: };",
          "",
          "[Removed Lines]",
          "3928:   \".width NUM1 NUM2 ...     Set column widths for \\\"column\\\" mode\",",
          "",
          "[Added Lines]",
          "3931:   \".width NUM1 NUM2 ...     Set minimum column widths for columnar output\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e44f265a7e855a41f3a5507685b4cfd29f6dd57",
      "candidate_info": {
        "commit_hash": "9e44f265a7e855a41f3a5507685b4cfd29f6dd57",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9e44f265a7e855a41f3a5507685b4cfd29f6dd57",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/speedtest1.c"
        ],
        "message": "Enhance the --testset option on speedtest1 so that it can accept a comma-separated list of test modules to run in order.\n\nFossilOrigin-Name: 780e8aaa231b2b585505c3886d5a13d39dba546fdd8020331ad4de2ae92922b0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/speedtest1.c||test/speedtest1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: be3e7814e4cdbc09eaa5112d7d4135b3a2cedbfe66217d9973b1b39a44464e93",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/speedtest1.c||test/speedtest1.c": [
          "File: test/speedtest1.c -> test/speedtest1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "372:   speedtest1_shrink_memory();",
          "373: }",
          "376: void speedtest1_prepare(const char *zFormat, ...){",
          "377:   va_list ap;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "379: char *speedtest1_once(const char *zFormat, ...){",
          "380:   va_list ap;",
          "381:   char *zSql;",
          "382:   sqlite3_stmt *pStmt;",
          "383:   char *zResult = 0;",
          "384:   va_start(ap, zFormat);",
          "385:   zSql = sqlite3_vmprintf(zFormat, ap);",
          "386:   va_end(ap);",
          "387:   if( g.bSqlOnly ){",
          "388:     printSql(zSql);",
          "389:   }else{",
          "390:     int rc = sqlite3_prepare_v2(g.db, zSql, -1, &pStmt, 0);",
          "391:     if( rc ){",
          "392:       fatal_error(\"SQL error: %s\\n\", sqlite3_errmsg(g.db));",
          "393:     }",
          "394:     if( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "395:       const char *z = (const char*)sqlite3_column_text(pStmt, 0);",
          "396:       if( z ) zResult = sqlite3_mprintf(\"%s\", z);",
          "397:     }",
          "398:     sqlite3_finalize(pStmt);",
          "399:   }",
          "400:   sqlite3_free(zSql);",
          "401:   speedtest1_shrink_memory();",
          "402:   return zResult;",
          "403: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2197:   }",
          "2199:   if( g.bExplain ) printf(\".explain\\n.echo on\\n\");",
          "2213: #ifdef SQLITE_ENABLE_RTREE",
          "2215: #else",
          "2218: #endif",
          "2224:   speedtest1_final();",
          "2226:   if( showStats ){",
          "",
          "[Removed Lines]",
          "2200:   if( strcmp(zTSet,\"main\")==0 ){",
          "2201:     testset_main();",
          "2202:   }else if( strcmp(zTSet,\"debug1\")==0 ){",
          "2203:     testset_debug1();",
          "2204:   }else if( strcmp(zTSet,\"orm\")==0 ){",
          "2205:     testset_orm();",
          "2206:   }else if( strcmp(zTSet,\"cte\")==0 ){",
          "2207:     testset_cte();",
          "2208:   }else if( strcmp(zTSet,\"fp\")==0 ){",
          "2209:     testset_fp();",
          "2210:   }else if( strcmp(zTSet,\"trigger\")==0 ){",
          "2211:     testset_trigger();",
          "2212:   }else if( strcmp(zTSet,\"rtree\")==0 ){",
          "2214:     testset_rtree(6, 147);",
          "2216:     fatal_error(\"compile with -DSQLITE_ENABLE_RTREE to enable \"",
          "2217:                 \"the R-Tree tests\\n\");",
          "2219:   }else{",
          "2220:     fatal_error(\"unknown testset: \\\"%s\\\"\\n\"",
          "2221:                 \"Choices: cte debug1 fp main orm rtree trigger\\n\",",
          "2222:                  zTSet);",
          "2223:   }",
          "",
          "[Added Lines]",
          "2230:   do{",
          "2231:     char *zThisTest = zTSet;",
          "2232:     char *zComma = strchr(zThisTest,',');",
          "2233:     if( zComma ){",
          "2235:       zTSet = zComma+1;",
          "2236:     }else{",
          "2237:       zTSet = \"\";",
          "2238:     }",
          "2239:     if( strcmp(zThisTest,\"main\")==0 ){",
          "2240:       testset_main();",
          "2241:     }else if( strcmp(zThisTest,\"debug1\")==0 ){",
          "2242:       testset_debug1();",
          "2243:     }else if( strcmp(zThisTest,\"orm\")==0 ){",
          "2244:       testset_orm();",
          "2245:     }else if( strcmp(zThisTest,\"cte\")==0 ){",
          "2246:       testset_cte();",
          "2247:     }else if( strcmp(zThisTest,\"fp\")==0 ){",
          "2248:       testset_fp();",
          "2249:     }else if( strcmp(zThisTest,\"trigger\")==0 ){",
          "2250:       testset_trigger();",
          "2251:     }else if( strcmp(zThisTest,\"rtree\")==0 ){",
          "2253:       testset_rtree(6, 147);",
          "2255:       fatal_error(\"compile with -DSQLITE_ENABLE_RTREE to enable \"",
          "2256:                   \"the R-Tree tests\\n\");",
          "2258:     }else{",
          "2259:       fatal_error(\"unknown testset: \\\"%s\\\"\\n\"",
          "2260:                   \"Choices: cte debug1 fp main orm rtree trigger\\n\",",
          "2261:                    zThisTest);",
          "2262:     }",
          "2263:     if( zTSet[0] ){",
          "2264:       char *zSql, *zObj;",
          "2265:       speedtest1_begin_test(999, \"Reset the database\");",
          "2266:       while( 1 ){",
          "2267:         zObj = speedtest1_once(",
          "2268:              \"SELECT name FROM main.sqlite_master\"",
          "2269:              \" WHERE sql LIKE 'CREATE %%TABLE%%'\");",
          "2270:         if( zObj==0 ) break;",
          "2271:         zSql = sqlite3_mprintf(\"DROP TABLE main.\\\"%w\\\"\", zObj);",
          "2272:         speedtest1_exec(zSql);",
          "2273:         sqlite3_free(zSql);",
          "2274:         sqlite3_free(zObj);",
          "2275:       }",
          "2276:       while( 1 ){",
          "2277:         zObj = speedtest1_once(",
          "2278:              \"SELECT name FROM temp.sqlite_master\"",
          "2279:              \" WHERE sql LIKE 'CREATE %%TABLE%%'\");",
          "2280:         if( zObj==0 ) break;",
          "2281:         zSql = sqlite3_mprintf(\"DROP TABLE main.\\\"%w\\\"\", zObj);",
          "2282:         speedtest1_exec(zSql);",
          "2283:         sqlite3_free(zSql);",
          "2284:         sqlite3_free(zObj);",
          "2285:       }",
          "2286:       speedtest1_end_test();",
          "2287:     }",
          "2288:   }while( zTSet[0] );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "804725a6b9ea8ba9ef507866b1d8d2628d1e4356",
      "candidate_info": {
        "commit_hash": "804725a6b9ea8ba9ef507866b1d8d2628d1e4356",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/804725a6b9ea8ba9ef507866b1d8d2628d1e4356",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3_snippet.c",
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid",
          "test/fts3auto.test"
        ],
        "message": "Improvements to detection of corruption in the %_stat shadow table of FTS4.\n\nFossilOrigin-Name: 6b67eba54e7b4887a8cdab7537b12a95e9f17bcdaa0b423af5ed5bd91f69f2c6",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3auto.test||test/fts3auto.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4895:     rc = sqlite3Fts3SelectDoctotal(p, &pStmt);",
          "4896:     if( rc!=SQLITE_OK ) return rc;",
          "4897:     a = sqlite3_column_blob(pStmt, 0);",
          "4904:     }",
          "4905:     if( nDoc==0 || nByte==0 ){",
          "4906:       sqlite3_reset(pStmt);",
          "",
          "[Removed Lines]",
          "4898:     assert( a );",
          "4900:     pEnd = &a[sqlite3_column_bytes(pStmt, 0)];",
          "4901:     a += sqlite3Fts3GetVarint(a, &nDoc);",
          "4902:     while( a<pEnd ){",
          "4903:       a += sqlite3Fts3GetVarint(a, &nByte);",
          "",
          "[Added Lines]",
          "4899:     if( a ){",
          "4900:       pEnd = &a[sqlite3_column_bytes(pStmt, 0)];",
          "4901:       a += sqlite3Fts3GetVarintBounded(a, pEnd, &nDoc);",
          "4902:       while( a<pEnd ){",
          "4903:         a += sqlite3Fts3GetVarintBounded(a, pEnd, &nByte);",
          "4904:       }",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1056:   assert( sqlite3_data_count(pStmt)==1 );",
          "1058:   n = sqlite3_column_bytes(pStmt, 0);",
          "1062:   a = sqlite3_column_blob(pStmt, 0);",
          "1063:   if( a==0 ){",
          "1065:   }",
          "1066:   pEnd = a + n;",
          "1067:   a += sqlite3Fts3GetVarintBounded(a, pEnd, &nDoc);",
          "",
          "[Removed Lines]",
          "1059:   if( n==0 ){",
          "1060:     return FTS_CORRUPT_VTAB;",
          "1061:   }",
          "1064:     return SQLITE_NOMEM;",
          "",
          "[Added Lines]",
          "1061:     return FTS_CORRUPT_VTAB;",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:   sqlite3_bind_text(pStmt, 1, zName, -1, SQLITE_STATIC);",
          "392:   if( SQLITE_ROW==sqlite3_step(pStmt) ){",
          "394:       memcpy((void *)pp, sqlite3_column_blob(pStmt, 0), sizeof(*pp));",
          "395:     }",
          "396:   }",
          "",
          "[Removed Lines]",
          "393:     if( sqlite3_column_type(pStmt, 0)==SQLITE_BLOB ){",
          "",
          "[Added Lines]",
          "393:     if( sqlite3_column_type(pStmt, 0)==SQLITE_BLOB",
          "394:      && sqlite3_column_bytes(pStmt, 0)==sizeof(*pp)",
          "395:     ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e35d8c76aae59f57cc5193f79b21b4298029bea78e1aab7af67432162ce63e00",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3auto.test||test/fts3auto.test": [
          "File: test/fts3auto.test -> test/fts3auto.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "570:   do_fts3query_test 4.$tn.4.3 -deferred fi* t1 {on* NEAR/1 fi*}",
          "571:   do_fts3query_test 4.$tn.4.4 -deferred fi* t1 {on* NEAR/2 fi*}",
          "572:   do_fts3query_test 4.$tn.4.5 -deferred fi* t1 {on* NEAR/3 fi*}",
          "573: }",
          "575: #--------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "574:   db eval {UPDATE t1_stat SET value=x'' WHERE id=0}",
          "575:   do_catchsql_test 4.$tn.4.6 {",
          "576:     SELECT docid FROM t1 WHERE t1 MATCH 'on* NEAR/3 fi*'",
          "577:   } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f09a14fbc34a130a9508707e435e24318ae07364",
      "candidate_info": {
        "commit_hash": "f09a14fbc34a130a9508707e435e24318ae07364",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f09a14fbc34a130a9508707e435e24318ae07364",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/delete.c",
          "src/fkey.c",
          "test/gencol1.test"
        ],
        "message": "Add missing column translations to foreign key logic. Ticket [c28a01da72f8957c]\n\nFossilOrigin-Name: bc6a43e7ee6353b9ef3dea4309c77e170a1c798eefcfaa7636bf5a93e51c47ee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/delete.c||src/delete.c",
          "src/fkey.c||src/fkey.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc6a40818387f78f89499f09e3f1c4655c7396af1cba2596c7fb2f23f3e9755f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:       testcase( mask!=0xffffffff && iCol==31 );",
          "738:       testcase( mask!=0xffffffff && iCol==32 );",
          "739:       if( mask==0xffffffff || (iCol<=31 && (mask & MASKBIT32(iCol))!=0) ){",
          "741:       }",
          "742:     }",
          "",
          "[Removed Lines]",
          "740:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, iCol, iOld+iCol+1);",
          "",
          "[Added Lines]",
          "740:         int kk = sqlite3TableColumnToStorage(pTab, iCol);",
          "741:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, iCol, iOld+kk+1);",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "483:   if( pExpr ){",
          "484:     if( iCol>=0 && iCol!=pTab->iPKey ){",
          "485:       pCol = &pTab->aCol[iCol];",
          "487:       pExpr->affExpr = pCol->affinity;",
          "488:       zColl = pCol->zColl;",
          "489:       if( zColl==0 ) zColl = db->pDfltColl->zName;",
          "",
          "[Removed Lines]",
          "486:       pExpr->iTable = regBase + iCol + 1;",
          "",
          "[Added Lines]",
          "486:       pExpr->iTable = regBase + sqlite3TableColumnToStorage(pTab,iCol) + 1;",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:   UPDATE t0 SET c1 = c0, c3 = c0+1;",
          "160: } {1 {FOREIGN KEY constraint failed}}",
          "162: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162: # 2019-11-01 ticket c28a01da72f8957c",
          "163: db close",
          "164: sqlite3 db :memory:",
          "165: do_execsql_test gencol1-4.100 {",
          "166:   CREATE TABLE t0 (",
          "167:     c0,",
          "168:     c1 a UNIQUE AS (1),",
          "169:     c2,",
          "170:     c3 REFERENCES t0(c1)",
          "171:   );",
          "172:   PRAGMA foreign_keys = true;",
          "173:   INSERT INTO t0(c0,c2,c3) VALUES(0,0,1);",
          "174: } {}",
          "175: do_catchsql_test gencol1-4.110 {",
          "176:   REPLACE INTO t0(c0,c2,c3) VALUES(0,0,0),(0,0,0);",
          "177: } {1 {FOREIGN KEY constraint failed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42ae633ab92023e93c0c4b1f365595f9b88e2b3b",
      "candidate_info": {
        "commit_hash": "42ae633ab92023e93c0c4b1f365595f9b88e2b3b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/42ae633ab92023e93c0c4b1f365595f9b88e2b3b",
        "files": [
          "ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5integrity.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix two more cases in fts5 where sqlite3_value_bytes() was being called before sqlite3_value_text(). Fix for e431c355.\n\nFossilOrigin-Name: a1ba9a37d7a68a6d31f8197c6350589ebe6a12f4e3c193a178dd7ead8bcd565a",
        "before_after_code_files": [
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5integrity.test||ext/fts5/test/fts5integrity.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "613:     for(ctx.iCol=0; rc==SQLITE_OK && ctx.iCol<pConfig->nCol; ctx.iCol++){",
          "614:       ctx.szCol = 0;",
          "615:       if( pConfig->abUnindexed[ctx.iCol]==0 ){",
          "616:         rc = sqlite3Fts5Tokenize(pConfig,",
          "617:             FTS5_TOKENIZE_DOCUMENT,",
          "620:             (void*)&ctx,",
          "621:             fts5StorageInsertCallback",
          "622:         );",
          "",
          "[Removed Lines]",
          "618:             (const char*)sqlite3_column_text(pScan, ctx.iCol+1),",
          "619:             sqlite3_column_bytes(pScan, ctx.iCol+1),",
          "",
          "[Added Lines]",
          "616:         const char *zText = (const char*)sqlite3_column_text(pScan, ctx.iCol+1);",
          "617:         int nText = sqlite3_column_bytes(pScan, ctx.iCol+1);",
          "620:             zText, nText,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "911:           rc = sqlite3Fts5TermsetNew(&ctx.pTermset);",
          "912:         }",
          "913:         if( rc==SQLITE_OK ){",
          "914:           rc = sqlite3Fts5Tokenize(pConfig,",
          "915:               FTS5_TOKENIZE_DOCUMENT,",
          "918:               (void*)&ctx,",
          "919:               fts5StorageIntegrityCallback",
          "920:           );",
          "",
          "[Removed Lines]",
          "916:               (const char*)sqlite3_column_text(pScan, i+1),",
          "917:               sqlite3_column_bytes(pScan, i+1),",
          "",
          "[Added Lines]",
          "915:           const char *zText = (const char*)sqlite3_column_text(pScan, i+1);",
          "916:           int nText = sqlite3_column_bytes(pScan, i+1);",
          "919:               zText, nText,",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5integrity.test||ext/fts5/test/fts5integrity.test": [
          "File: ext/fts5/test/fts5integrity.test -> ext/fts5/test/fts5integrity.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:   INSERT INTO vt0 VALUES (x'46f0');",
          "219:   SELECT quote(c0) FROM vt0;",
          "220: } {X'46F0'}",
          "222: do_execsql_test 7.1 {",
          "224: }",
          "226: do_execsql_test 7.2 {",
          "227:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "228: }",
          "",
          "[Removed Lines]",
          "223:   UPDATE vt0 SET c0='';",
          "",
          "[Added Lines]",
          "222:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "225:   INSERT INTO vt0(vt0) VALUES('rebuild');",
          "226: }",
          "227: do_execsql_test 7.3 {",
          "228:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "229: }",
          "230: do_execsql_test 7.4 {",
          "231:   UPDATE vt0 SET c0='';",
          "232: }",
          "233: do_execsql_test 7.5 {",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e62d1791f428b7a9bb14a59483f12d8ee08afbf4061a5e3be8f64787444301e7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}