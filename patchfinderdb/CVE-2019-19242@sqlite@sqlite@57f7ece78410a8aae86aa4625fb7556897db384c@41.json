{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8ac02a94ab5ee7496c053c417a77bc620bb548fb",
      "candidate_info": {
        "commit_hash": "8ac02a94ab5ee7496c053c417a77bc620bb548fb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8ac02a94ab5ee7496c053c417a77bc620bb548fb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h",
          "test/expr2.test",
          "test/index7.test"
        ],
        "message": "Update the sqlite3ExprCompare() routine so that it does not think \"? IS NOT TRUE\" is the same as \"? IS TRUE\". Fix for [d3e7f2ba5b3].\n\nFossilOrigin-Name: 99eba69b3a64741c69d167bf7a05dbe138c9e7faecc54a1b8d8220cb23902830",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "test/expr2.test||test/expr2.test",
          "test/index7.test||test/index7.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 778b1224a318d0137c7dab8361128f593506d3677267898119b934b4d66dfe38",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4862:      && (combinedFlags & EP_Reduced)==0",
          "4863:     ){",
          "4864:       if( pA->iColumn!=pB->iColumn ) return 2;",
          "4865:       if( pA->iTable!=pB->iTable",
          "4866:        && (pA->iTable!=iTab || NEVER(pB->iTable>=0)) ) return 2;",
          "4867:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4865:       if( pA->op2!=pB->op2 ) return 2;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "2484:   u8 op2;                /* TK_REGISTER: original value of Expr.op",
          "",
          "[Added Lines]",
          "2484:   u8 op2;                /* TK_REGISTER/TK_TRUTH: original value of Expr.op",
          "",
          "---------------"
        ],
        "test/expr2.test||test/expr2.test": [
          "File: test/expr2.test -> test/expr2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 May 20",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing expressions.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix expr2",
          "19: do_execsql_test 1.0 {",
          "20:   CREATE TABLE t0(c0);",
          "21:   INSERT INTO t0(c0) VALUES ('val');",
          "22: }",
          "24: do_execsql_test 1.1 {",
          "25:   SELECT * FROM t0 WHERE (",
          "26:       ( (0 IS NOT FALSE) OR NOT (0 IS FALSE OR (t0.c0 = 1)) ) IS 0",
          "27:   )",
          "28: } {val}",
          "30: do_execsql_test 1.2.1 {",
          "31:   SELECT",
          "32:       ( (0 IS NOT FALSE) OR NOT (0 IS FALSE OR (t0.c0 = 1)) ) IS 0",
          "33:   FROM t0",
          "34: } {1}",
          "36: do_execsql_test 1.2.2 {",
          "37:   SELECT",
          "38:       ( (0 IS NOT FALSE) OR NOT (0 IS 0 OR (t0.c0 = 1)) ) IS 0",
          "39:   FROM t0",
          "40: } {1}",
          "42: do_execsql_test 1.3 {",
          "43:   SELECT ( (0 IS NOT FALSE) OR NOT (0 IS FALSE OR (t0.c0 = 1)) ) FROM t0",
          "44: } {0}",
          "46: do_execsql_test 1.4.1 {",
          "47:   SELECT (0 IS NOT FALSE) FROM t0",
          "48: } {0}",
          "49: do_execsql_test 1.4.2 {",
          "50:   SELECT NOT (0 IS FALSE OR (t0.c0 = 1)) FROM t0",
          "51: } {0}",
          "54: finish_test",
          "",
          "---------------"
        ],
        "test/index7.test||test/index7.test": [
          "File: test/index7.test -> test/index7.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "327:   CREATE INDEX t5a ON t5(a) WHERE a=#1;",
          "328: } {1 {near \"#1\": syntax error}}",
          "331: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330: do_execsql_test index7-7.0 {",
          "331:   CREATE TABLE t6(x, y);",
          "332:   INSERT INTO t6 VALUES(1, 1);",
          "333:   INSERT INTO t6 VALUES(0, 0);",
          "334:   SELECT * FROM t6 WHERE y IS TRUE ORDER BY x;",
          "335: } {1 1}",
          "337: do_execsql_test index7-7.1 {",
          "338:   CREATE INDEX i6 ON t6(x) WHERE y IS NOT TRUE;",
          "339:   SELECT * FROM t6 WHERE y IS TRUE ORDER BY x;",
          "340: } {1 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e4079e1fc52e5bf55fcb261bcbf536005787036c",
      "candidate_info": {
        "commit_hash": "e4079e1fc52e5bf55fcb261bcbf536005787036c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e4079e1fc52e5bf55fcb261bcbf536005787036c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c"
        ],
        "message": "Allow compile-time options -DHAVE_GETHOSTUUID=0 and -DHAVE_GETHOSTUUID=1.\n\nFossilOrigin-Name: 3bcb9cc104e0265a600b03415ad955187fc6445ea8e46dc656412cba5bc1d621",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 102ef64462cf0d78395ccc7ebb8e3bf6b7647c06b7657a037e051697bc08d6b7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105: # include <sys/param.h>",
          "115: #  endif",
          "116: #endif",
          "",
          "[Removed Lines]",
          "108: #if defined(__APPLE__) && ((__MAC_OS_X_VERSION_MIN_REQUIRED > 1050) || \\",
          "109:                            (__IPHONE_OS_VERSION_MIN_REQUIRED > 2000))",
          "110: #  if (!defined(TARGET_OS_EMBEDDED) || (TARGET_OS_EMBEDDED==0)) \\",
          "111:        && (!defined(TARGET_IPHONE_SIMULATOR) || (TARGET_IPHONE_SIMULATOR==0))",
          "112: #    define HAVE_GETHOSTUUID 1",
          "113: #  else",
          "114: #    warning \"gethostuuid() is disabled.\"",
          "",
          "[Added Lines]",
          "120: #ifndef HAVE_GETHOSTUUID",
          "121: # define HAVE_GETHOSTUUID 0",
          "122: # if defined(__APPLE__) && ((__MAC_OS_X_VERSION_MIN_REQUIRED > 1050) || \\",
          "123:                             (__IPHONE_OS_VERSION_MIN_REQUIRED > 2000))",
          "124: #    if (!defined(TARGET_OS_EMBEDDED) || (TARGET_OS_EMBEDDED==0)) \\",
          "125:          && (!defined(TARGET_IPHONE_SIMULATOR) || (TARGET_IPHONE_SIMULATOR==0))",
          "126: #      undef HAVE_GETHOSTUUID",
          "127: #      define HAVE_GETHOSTUUID 1",
          "128: #    else",
          "129: #      warning \"gethostuuid() is disabled.\"",
          "130: #    endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6934: extern int gethostuuid(uuid_t id, const struct timespec *wait);",
          "6935: #endif",
          "",
          "[Removed Lines]",
          "6932: #ifdef HAVE_GETHOSTUUID",
          "",
          "[Added Lines]",
          "6948: #if HAVE_GETHOSTUUID",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6940: static int proxyGetHostID(unsigned char *pHostID, int *pError){",
          "6941:   assert(PROXY_HOSTIDLEN == sizeof(uuid_t));",
          "6942:   memset(pHostID, 0, PROXY_HOSTIDLEN);",
          "6944:   {",
          "6946:     if( gethostuuid(pHostID, &timeout) ){",
          "",
          "[Removed Lines]",
          "6943: #ifdef HAVE_GETHOSTUUID",
          "",
          "[Added Lines]",
          "6959: #if HAVE_GETHOSTUUID",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0f6b83300ecc6abf83e6cfad20a50d4406cde9b",
      "candidate_info": {
        "commit_hash": "a0f6b83300ecc6abf83e6cfad20a50d4406cde9b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a0f6b83300ecc6abf83e6cfad20a50d4406cde9b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/window.c",
          "test/window8.tcl",
          "test/window8.test"
        ],
        "message": "Add things to this branch that will be required to support the EXCLUDE clause.\n\nFossilOrigin-Name: 7d66cd2013206ebad50c7cdb7dab9211fa8b47f5cb7067dcb314b3e0180875f8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/window.c||src/window.c",
          "test/window8.tcl||test/window8.tcl",
          "test/window8.test||test/window8.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b904517bd6c4c59082381577246d3d2351b4265fc9151438ee4c33cf16f2eb1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3564:   u8 eExclude;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3578:   int regFirst;",
          "3579: };",
          "3581: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3581:   int regStartRowid;",
          "3582:   int regEndRowid;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3612:   pCx->pKeyInfo = pOrig->pKeyInfo;",
          "3613:   pCx->isTable = pOrig->isTable;",
          "3614:   pCx->pgnoRoot = pOrig->pgnoRoot;",
          "3615:   rc = sqlite3BtreeCursor(pOrig->pBtx, pCx->pgnoRoot, BTREE_WRCSR,",
          "3616:                           pCx->pKeyInfo, pCx->uc.pCursor);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3615:   pCx->isOrdered = pOrig->isOrdered;",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:   }",
          "199: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206: struct NthValueCtx {",
          "207:   i64 nStep;",
          "208:   sqlite3_value *pValue;",
          "209: };",
          "210: static void nth_valueStepFunc(",
          "211:   sqlite3_context *pCtx,",
          "212:   int nArg,",
          "213:   sqlite3_value **apArg",
          "214: ){",
          "215:   struct NthValueCtx *p;",
          "216:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "217:   if( p ){",
          "218:     i64 iVal = sqlite3_value_int64(apArg[1]);",
          "219:     p->nStep++;",
          "220:     if( iVal==p->nStep ){",
          "221:       p->pValue = sqlite3_value_dup(apArg[0]);",
          "222:     }",
          "223:   }",
          "224:   UNUSED_PARAMETER(nArg);",
          "225:   UNUSED_PARAMETER(apArg);",
          "226: }",
          "227: static void nth_valueValueFunc(sqlite3_context *pCtx){",
          "228:   struct NthValueCtx *p;",
          "229:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "230:   if( p && p->pValue ){",
          "231:     sqlite3_result_value(pCtx, p->pValue);",
          "232:   }",
          "233: }",
          "234: static void nth_valueFinalizeFunc(sqlite3_context *pCtx){",
          "235:   struct NthValueCtx *p;",
          "236:   p = (struct NthValueCtx*)sqlite3_aggregate_context(pCtx, sizeof(*p));",
          "237:   if( p && p->pValue ){",
          "238:     sqlite3_result_value(pCtx, p->pValue);",
          "239:     sqlite3_value_free(p->pValue);",
          "240:     p->pValue = 0;",
          "241:   }",
          "242: }",
          "243: #define nth_valueInvFunc noopStepFunc",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:     WINDOWFUNCX(row_number, 0, 0),",
          "518:     WINDOWFUNCX(dense_rank, 0, 0),",
          "519:     WINDOWFUNCX(rank, 0, 0),",
          "521:     WINDOWFUNCALL(percent_rank, 0, 0),",
          "522:     WINDOWFUNCALL(cume_dist, 0, 0),",
          "523:     WINDOWFUNCALL(ntile, 1, 0),",
          "526:     WINDOWFUNCALL(last_value, 1, 0),",
          "528:     WINDOWFUNCNOOP(first_value, 1, 0),",
          "529:     WINDOWFUNCNOOP(lead, 1, 0),",
          "530:     WINDOWFUNCNOOP(lead, 2, 0),",
          "",
          "[Removed Lines]",
          "527:     WINDOWFUNCNOOP(nth_value, 2, 0),",
          "",
          "[Added Lines]",
          "568:     WINDOWFUNCALL(nth_value, 2, 0),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "622:           pWin->eType = aUp[i].eType;",
          "623:           pWin->eStart = aUp[i].eStart;",
          "624:           pWin->eEnd = aUp[i].eEnd;",
          "625:           if( pWin->eStart==TK_FOLLOWING ){",
          "626:             pWin->pStart = sqlite3Expr(db, TK_INTEGER, \"1\");",
          "627:           }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "666:           pWin->eExclude = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1102:   if( p1->eType!=p2->eType ) return 1;",
          "1103:   if( p1->eStart!=p2->eStart ) return 1;",
          "1104:   if( p1->eEnd!=p2->eEnd ) return 1;",
          "1105:   if( sqlite3ExprCompare(pParse, p1->pStart, p2->pStart, -1) ) return 1;",
          "1106:   if( sqlite3ExprCompare(pParse, p1->pEnd, p2->pEnd, -1) ) return 1;",
          "1107:   if( sqlite3ExprListCompare(p1->pPartition, p2->pPartition, -1) ) return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1148:   if( p1->eExclude!=p2->eExclude ) return 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1131:   pMWin->regFirst = ++pParse->nMem;",
          "1132:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "1134:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1135:     FuncDef *p = pWin->pFunc;",
          "1136:     if( (p->funcFlags & SQLITE_FUNC_MINMAX) && pWin->eStart!=TK_UNBOUNDED ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1178:   if( pMWin->eExclude ){",
          "1179:     pMWin->regStartRowid = ++pParse->nMem;",
          "1180:     pMWin->regEndRowid = ++pParse->nMem;",
          "1181:     pMWin->csrApp = pParse->nTab++;",
          "1182:     sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regStartRowid);",
          "1183:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regEndRowid);",
          "1184:     sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->csrApp, pMWin->iEphCsr);",
          "1185:     return;",
          "1186:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1250: ){",
          "1251:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1252:   Window *pWin;",
          "1253:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1254:     int regArg;",
          "1255:     int nArg = windowArgCount(pWin);",
          "1265:     }",
          "1269:     ){",
          "1270:       int addrIsNull = sqlite3VdbeAddOp1(v, OP_IsNull, regArg);",
          "1271:       VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "1257:     if( csr>=0 ){",
          "1258:       int i;",
          "1259:       for(i=0; i<nArg; i++){",
          "1260:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+i, reg+i);",
          "1261:       }",
          "1262:       regArg = reg;",
          "1263:     }else{",
          "1264:       regArg = reg + pWin->iArgCol;",
          "1267:     if( (pWin->pFunc->funcFlags & SQLITE_FUNC_MINMAX)",
          "1268:       && pWin->eStart!=TK_UNBOUNDED",
          "",
          "[Added Lines]",
          "1307:     FuncDef *pFunc = pWin->pFunc;",
          "1310:     int i;",
          "1312:     for(i=0; i<nArg; i++){",
          "1313:       sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+i, reg+i);",
          "1315:     regArg = reg;",
          "1317:     if( pMWin->regStartRowid==0",
          "1318:      && (pFunc->funcFlags & SQLITE_FUNC_MINMAX)",
          "1319:      && (pWin->eStart!=TK_UNBOUNDED)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1282:       }",
          "1283:       sqlite3VdbeJumpHere(v, addrIsNull);",
          "1284:     }else if( pWin->regApp ){",
          "1287:       );",
          "1288:       assert( bInverse==0 || bInverse==1 );",
          "1289:       sqlite3VdbeAddOp2(v, OP_AddImm, pWin->regApp+1-bInverse, 1);",
          "1295:       int addrIf = 0;",
          "1296:       if( pWin->pFilter ){",
          "1297:         int regTmp;",
          "1298:         assert( nArg==0 || nArg==pWin->pOwner->x.pList->nExpr );",
          "1299:         assert( nArg || pWin->pOwner->x.pList==0 );",
          "1306:         addrIf = sqlite3VdbeAddOp3(v, OP_IfNot, regTmp, 0, 1);",
          "1307:         VdbeCoverage(v);",
          "1311:       }",
          "1313:         CollSeq *pColl;",
          "1314:         assert( nArg>0 );",
          "1315:         pColl = sqlite3ExprNNCollSeq(pParse, pWin->pOwner->x.pList->a[0].pExpr);",
          "",
          "[Removed Lines]",
          "1285:       assert( pWin->pFunc->zName==nth_valueName",
          "1286:            || pWin->pFunc->zName==first_valueName",
          "1290:     }else if( pWin->pFunc->zName==leadName",
          "1291:            || pWin->pFunc->zName==lagName",
          "1292:     ){",
          "1294:     }else{",
          "1300:         if( csr>0 ){",
          "1301:           regTmp = sqlite3GetTempReg(pParse);",
          "1302:           sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+nArg,regTmp);",
          "1303:         }else{",
          "1304:           regTmp = regArg + nArg;",
          "1305:         }",
          "1308:         if( csr>0 ){",
          "1309:           sqlite3ReleaseTempReg(pParse, regTmp);",
          "1310:         }",
          "1312:       if( pWin->pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL ){",
          "",
          "[Added Lines]",
          "1336:       assert( pFunc->zName==nth_valueName",
          "1337:            || pFunc->zName==first_valueName",
          "1341:     }else if( pFunc->zName==leadName || pFunc->zName==lagName ){",
          "1343:     }else if( pFunc->xSFunc!=noopStepFunc ){",
          "1349:         regTmp = sqlite3GetTempReg(pParse);",
          "1350:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+nArg,regTmp);",
          "1353:         sqlite3ReleaseTempReg(pParse, regTmp);",
          "1355:       if( pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1317:       }",
          "1318:       sqlite3VdbeAddOp3(v, bInverse? OP_AggInverse : OP_AggStep,",
          "1319:                         bInverse, regArg, pWin->regAccum);",
          "1321:       sqlite3VdbeChangeP5(v, (u8)nArg);",
          "1322:       if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1323:     }",
          "",
          "[Removed Lines]",
          "1320:       sqlite3VdbeAppendP4(v, pWin->pFunc, P4_FUNCDEF);",
          "",
          "[Added Lines]",
          "1363:       sqlite3VdbeAppendP4(v, pFunc, P4_FUNCDEF);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1325: }",
          "1334:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1335:   Window *pWin;",
          "1337:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1340:     ){",
          "1341:       sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regResult);",
          "1342:       sqlite3VdbeAddOp1(v, OP_Last, pWin->csrApp);",
          "1343:       VdbeCoverage(v);",
          "1344:       sqlite3VdbeAddOp3(v, OP_Column, pWin->csrApp, 0, pWin->regResult);",
          "1345:       sqlite3VdbeJumpHere(v, sqlite3VdbeCurrentAddr(v)-2);",
          "1347:         sqlite3VdbeAddOp1(v, OP_ResetSorter, pWin->csrApp);",
          "1348:       }",
          "1349:     }else if( pWin->regApp ){",
          "1350:     }else{",
          "1353:         sqlite3VdbeAppendP4(v, pWin->pFunc, P4_FUNCDEF);",
          "1354:         sqlite3VdbeAddOp2(v, OP_Copy, pWin->regAccum, pWin->regResult);",
          "1355:         sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regAccum);",
          "1356:       }else{",
          "1359:         sqlite3VdbeAppendP4(v, pWin->pFunc, P4_FUNCDEF);",
          "1360:       }",
          "1361:     }",
          "",
          "[Removed Lines]",
          "1333: static void windowAggFinal(Parse *pParse, Window *pMWin, int bFinal){",
          "1338:     if( (pWin->pFunc->funcFlags & SQLITE_FUNC_MINMAX)",
          "1339:      && pWin->eStart!=TK_UNBOUNDED",
          "1346:       if( bFinal ){",
          "1351:       if( bFinal ){",
          "1352:         sqlite3VdbeAddOp2(v, OP_AggFinal, pWin->regAccum, windowArgCount(pWin));",
          "1357:         sqlite3VdbeAddOp3(v, OP_AggValue, pWin->regAccum, windowArgCount(pWin),",
          "1358:                              pWin->regResult);",
          "",
          "[Added Lines]",
          "1376: static void windowAggFinal(Parse *pParse, Window *pMWin, int regArg, int bFin){",
          "1380:   if( pMWin->regStartRowid ){",
          "1381:     int addrNext;",
          "1382:     int regRowid = sqlite3GetTempReg(pParse);",
          "1383:     assert( pMWin->csrApp );",
          "1384:     for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1385:       sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regAccum);",
          "1386:     }",
          "1387:     sqlite3VdbeAddOp3(v, OP_SeekGE, pMWin->csrApp, 0, pMWin->regStartRowid);",
          "1388:     addrNext = sqlite3VdbeCurrentAddr(v);",
          "1389:     sqlite3VdbeAddOp2(v, OP_Rowid, pMWin->csrApp, regRowid);",
          "1390:     sqlite3VdbeAddOp3(v, OP_Gt, pMWin->regEndRowid, 0, regRowid);",
          "1391:     windowAggStep(pParse, pMWin, pMWin->csrApp, 0, regArg);",
          "1392:     sqlite3VdbeAddOp2(v, OP_Next, pMWin->csrApp, addrNext);",
          "1393:     sqlite3VdbeJumpHere(v, addrNext-1);",
          "1394:     sqlite3VdbeJumpHere(v, addrNext+1);",
          "1395:     sqlite3ReleaseTempReg(pParse, regRowid);",
          "1396:   }",
          "1399:     if( pMWin->regStartRowid==0",
          "1400:      && (pWin->pFunc->funcFlags & SQLITE_FUNC_MINMAX)",
          "1401:      && (pWin->eStart!=TK_UNBOUNDED)",
          "1408:       if( bFin ){",
          "1412:       assert( pMWin->regStartRowid==0 );",
          "1414:       int nArg = windowArgCount(pWin);",
          "1415:       if( bFin ){",
          "1416:         sqlite3VdbeAddOp2(v, OP_AggFinal, pWin->regAccum, nArg);",
          "1421:         sqlite3VdbeAddOp3(v, OP_AggValue,pWin->regAccum,nArg,pWin->regResult);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1388:     if( pFunc->zName==nth_valueName",
          "1389:      || pFunc->zName==first_valueName",
          "1390:     ){",
          "1392:       int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1393:       int tmpReg = sqlite3GetTempReg(pParse);",
          "1394:       sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regResult);",
          "1396:       if( pFunc->zName==nth_valueName ){",
          "1398:         windowCheckValue(pParse, tmpReg, 2);",
          "1399:       }else{",
          "1400:         sqlite3VdbeAddOp2(v, OP_Integer, 1, tmpReg);",
          "1401:       }",
          "1408:       sqlite3VdbeResolveLabel(v, lbl);",
          "1409:       sqlite3ReleaseTempReg(pParse, tmpReg);",
          "1410:     }",
          "",
          "[Removed Lines]",
          "1391:       int csr = pWin->csrApp;",
          "1397:         sqlite3VdbeAddOp3(v, OP_Column, pMWin->iEphCsr, pWin->iArgCol+1,tmpReg);",
          "1402:       sqlite3VdbeAddOp3(v, OP_Add, tmpReg, pWin->regApp, tmpReg);",
          "1403:       sqlite3VdbeAddOp3(v, OP_Gt, pWin->regApp+1, lbl, tmpReg);",
          "1404:       VdbeCoverageNeverNull(v);",
          "1405:       sqlite3VdbeAddOp3(v, OP_SeekRowid, csr, 0, tmpReg);",
          "1406:       VdbeCoverageNeverTaken(v);",
          "1407:       sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol, pWin->regResult);",
          "",
          "[Added Lines]",
          "1459:         sqlite3VdbeAddOp3(v, OP_Column,pMWin->iEphCsr,pWin->iArgCol+1,tmpReg);",
          "1464:       if( pWin->eExclude==0 ){",
          "1465:         int csr = pWin->csrApp;",
          "1466:         sqlite3VdbeAddOp3(v, OP_Add, tmpReg, pWin->regApp, tmpReg);",
          "1467:         sqlite3VdbeAddOp3(v, OP_Gt, pWin->regApp+1, lbl, tmpReg);",
          "1468:         VdbeCoverageNeverNull(v);",
          "1469:         sqlite3VdbeAddOp3(v, OP_SeekRowid, csr, 0, tmpReg);",
          "1470:         VdbeCoverageNeverTaken(v);",
          "1471:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol, pWin->regResult);",
          "1472:       }else{",
          "1473:         int regRowid = sqlite3GetTempReg(pParse);",
          "1474:         int csr = pMWin->csrApp;",
          "1475:         int addrNext;",
          "1476:         sqlite3VdbeAddOp3(v, OP_IfPos, tmpReg, sqlite3VdbeCurrentAddr(v)+1, 1);",
          "1477:         sqlite3VdbeAddOp3(v, OP_SeekGE, csr, lbl, pMWin->regStartRowid);",
          "1478:         addrNext = sqlite3VdbeAddOp2(v, OP_Rowid, csr, regRowid);",
          "1479:         sqlite3VdbeAddOp3(v, OP_Gt, pMWin->regEndRowid, lbl, regRowid);",
          "1480:         sqlite3VdbeAddOp3(v, OP_IfPos, tmpReg, sqlite3VdbeCurrentAddr(v)+3, 1);",
          "1481:         sqlite3VdbeAddOp3(v, OP_Column, csr, pMWin->iArgCol, pWin->regResult);",
          "1482:         sqlite3VdbeAddOp2(v, OP_Goto, 0, lbl);",
          "1483:         sqlite3VdbeAddOp2(v, OP_Next, csr, addrNext);",
          "1484:         sqlite3ReleaseTempReg(pParse, regRowid);",
          "1485:       }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1457:     FuncDef *pFunc = pWin->pFunc;",
          "1458:     sqlite3VdbeAddOp2(v, OP_Null, 0, pWin->regAccum);",
          "1459:     nArg = MAX(nArg, windowArgCount(pWin));",
          "1471:     }",
          "1472:   }",
          "1473:   regArg = pParse->nMem+1;",
          "",
          "[Removed Lines]",
          "1460:     if( pFunc->zName==nth_valueName",
          "1461:      || pFunc->zName==first_valueName",
          "1462:     ){",
          "1463:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp);",
          "1464:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "1465:     }",
          "1467:     if( (pFunc->funcFlags & SQLITE_FUNC_MINMAX) && pWin->csrApp ){",
          "1468:       assert( pWin->eStart!=TK_UNBOUNDED );",
          "1469:       sqlite3VdbeAddOp1(v, OP_ResetSorter, pWin->csrApp);",
          "1470:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "",
          "[Added Lines]",
          "1538:     if( pWin->eExclude==0 ){",
          "1539:       if( pFunc->zName==nth_valueName || pFunc->zName==first_valueName ){",
          "1540:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp);",
          "1541:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "1542:       }",
          "1544:       if( (pFunc->funcFlags & SQLITE_FUNC_MINMAX) && pWin->csrApp ){",
          "1545:         assert( pWin->eStart!=TK_UNBOUNDED );",
          "1546:         sqlite3VdbeAddOp1(v, OP_ResetSorter, pWin->csrApp);",
          "1547:         sqlite3VdbeAddOp2(v, OP_Integer, 0, pWin->regApp+1);",
          "1548:       }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1482: static int windowCacheFrame(Window *pMWin){",
          "1483:   Window *pWin;",
          "1484:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "1485:     FuncDef *pFunc = pWin->pFunc;",
          "1486:     if( (pFunc->zName==nth_valueName)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1562:   if( pMWin->regStartRowid ) return 1;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1684:   }",
          "1686:   if( op==WINDOW_RETURN_ROW ){",
          "1688:   }",
          "1689:   addrContinue = sqlite3VdbeCurrentAddr(v);",
          "1690:   switch( op ){",
          "",
          "[Removed Lines]",
          "1687:     windowAggFinal(pParse, pMWin, 0);",
          "",
          "[Added Lines]",
          "1766:     windowAggFinal(pParse, pMWin, p->regArg, 0);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1697:     case WINDOW_AGGINVERSE:",
          "1698:       csr = p->start.csr;",
          "1699:       reg = p->start.reg;",
          "1701:       break;",
          "1703:     case WINDOW_AGGSTEP:",
          "1704:       csr = p->end.csr;",
          "1705:       reg = p->end.reg;",
          "1707:       break;",
          "1708:   }",
          "",
          "[Removed Lines]",
          "1700:       windowAggStep(pParse, pMWin, csr, 1, p->regArg, 0);",
          "1706:       windowAggStep(pParse, pMWin, csr, 0, p->regArg, 0);",
          "",
          "[Added Lines]",
          "1779:       if( pMWin->regStartRowid ){",
          "1780:         assert( pMWin->regEndRowid );",
          "1781:         sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regStartRowid, 1);",
          "1782:       }else{",
          "1783:         windowAggStep(pParse, pMWin, csr, 1, p->regArg);",
          "1784:       }",
          "1790:       if( pMWin->regStartRowid ){",
          "1791:         assert( pMWin->regEndRowid );",
          "1792:         sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regEndRowid, 1);",
          "1793:       }else{",
          "1794:         windowAggStep(pParse, pMWin, csr, 0, p->regArg);",
          "1795:       }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2279:   if( pMWin->eStart==pMWin->eEnd && regStart && regEnd ){",
          "2280:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2281:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2283:     sqlite3VdbeAddOp2(v, OP_Rewind, s.current.csr, 1);",
          "2284:     windowReturnOneRow(pParse, pMWin, regGosub, addrGosub);",
          "2285:     sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "",
          "[Removed Lines]",
          "2282:     windowAggFinal(pParse, pMWin, 0);",
          "",
          "[Added Lines]",
          "2371:     windowAggFinal(pParse, pMWin, s.regArg, 0);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2414:   sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2415:   sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "2416:   if( pMWin->pPartition ){",
          "2417:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "2418:     sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "2419:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2506:     if( pMWin->regStartRowid ){",
          "2507:       sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regStartRowid);",
          "2508:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regEndRowid);",
          "2509:     }",
          "",
          "---------------"
        ],
        "test/window8.tcl||test/window8.tcl": [
          "File: test/window8.tcl -> test/window8.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:   \"",
          "90: }",
          "92: ==========",
          "95:   DROP TABLE IF EXISTS t1;",
          "96:   CREATE TABLE t1(a REAL, b INTEGER);",
          "97:   INSERT INTO t1 VALUES",
          "",
          "[Removed Lines]",
          "94: execsql_test 2.0 {",
          "",
          "[Added Lines]",
          "93: foreach {tn ex} {",
          "94:   1  { EXCLUDE NO OTHERS }",
          "95:   2  { EXCLUDE CURRENT ROW }",
          "96:   3  { EXCLUDE GROUP }",
          "97:   4  { EXCLUDE TIES }",
          "98: } {",
          "99:   execsql_test 2.$tn.1 \"",
          "100:     SELECT row_number() OVER win",
          "101:     FROM t3",
          "102:     WINDOW win AS (",
          "103:       ORDER BY c, b, a",
          "104:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING $ex",
          "105:     )",
          "106:   \"",
          "108:   execsql_test 2.$tn.2 \"",
          "109:     SELECT nth_value(c, 14) OVER win",
          "110:     FROM t3",
          "111:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING $ex)",
          "112:   \"",
          "113: }",
          "117: execsql_test 3.0 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:   11 { ORDER BY a DESC RANGE BETWEEN UNBOUNDED PRECEDING AND 5.9 PRECEDING }",
          "115:   12 { ORDER BY a DESC RANGE BETWEEN 2.1 FOLLOWING AND UNBOUNDED FOLLOWING }",
          "116: } {",
          "118:     SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ($frame)",
          "119:   \"",
          "120: }",
          "",
          "[Removed Lines]",
          "117:   execsql_test 2.$tn \"",
          "",
          "[Added Lines]",
          "140:   execsql_test 3.$tn \"",
          "",
          "---------------"
        ],
        "test/window8.test||test/window8.test": [
          "File: test/window8.test -> test/window8.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "433:   SELECT a, b, min(c) OVER (ORDER BY a,b  GROUPS BETWEEN 1 FOLLOWING         AND UNBOUNDED FOLLOWING ) FROM t3 ORDER BY 1, 2, 3;",
          "434: } {AA aa 102   AA aa 102   AA aa 102   AA aa 102   AA bb 102   AA bb 102   AA bb 102   AA bb 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB aa 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   BB bb 102   CC aa 102   CC aa 102   CC aa 102   CC aa 102   CC bb 102   CC bb 102   DD aa 102   DD aa 102   DD aa 102   DD bb 102   DD bb 102   DD bb 102   DD bb 102   EE aa 102   EE aa 102   EE bb 102   EE bb 102   EE bb 102   FF aa 102   FF aa 102   FF aa 102   FF aa 102   FF bb 113   FF bb 113   FF bb 113   FF bb 113   FF bb 113   FF bb 113   GG aa 113   GG aa 113   GG aa 113   GG aa 113   GG bb 113   GG bb 113   GG bb 113   GG bb 113   HH aa 113   HH aa 113   HH aa 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   HH bb 113   II aa 113   II aa 113   II bb 113   II bb 113   II bb 113   II bb 113   II bb 113   JJ aa 257   JJ aa 257   JJ aa 257   JJ aa 257   JJ bb {}   JJ bb {}   JJ bb {}   JJ bb {}}",
          "436: #==========================================================================",
          "439:   DROP TABLE IF EXISTS t1;",
          "440:   CREATE TABLE t1(a REAL, b INTEGER);",
          "441:   INSERT INTO t1 VALUES",
          "",
          "[Removed Lines]",
          "438: do_execsql_test 2.0 {",
          "",
          "[Added Lines]",
          "436: do_execsql_test 2.1.1 {",
          "437:   SELECT row_number() OVER win",
          "438:     FROM t3",
          "439:     WINDOW win AS (",
          "440:       ORDER BY c, b, a",
          "441:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE NO OTHERS",
          "442:     )",
          "443: } {1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80}",
          "445: do_execsql_test 2.1.2 {",
          "446:   SELECT nth_value(c, 14) OVER win",
          "447:     FROM t3",
          "448:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE NO OTHERS )",
          "449: } {938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938}",
          "451: do_execsql_test 2.2.1 {",
          "452:   SELECT row_number() OVER win",
          "453:     FROM t3",
          "454:     WINDOW win AS (",
          "455:       ORDER BY c, b, a",
          "456:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE CURRENT ROW",
          "457:     )",
          "458: } {1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80}",
          "460: do_execsql_test 2.2.2 {",
          "461:   SELECT nth_value(c, 14) OVER win",
          "462:     FROM t3",
          "463:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE CURRENT ROW )",
          "464: } {660   660   660   660   660   660   660   660   660   660   660   660   660   660   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938   938}",
          "466: do_execsql_test 2.3.1 {",
          "467:   SELECT row_number() OVER win",
          "468:     FROM t3",
          "469:     WINDOW win AS (",
          "470:       ORDER BY c, b, a",
          "471:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE GROUP",
          "472:     )",
          "473: } {1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80}",
          "475: do_execsql_test 2.3.2 {",
          "476:   SELECT nth_value(c, 14) OVER win",
          "477:     FROM t3",
          "478:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE GROUP )",
          "479: } {{}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}}",
          "481: do_execsql_test 2.4.1 {",
          "482:   SELECT row_number() OVER win",
          "483:     FROM t3",
          "484:     WINDOW win AS (",
          "485:       ORDER BY c, b, a",
          "486:       ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE TIES",
          "487:     )",
          "488: } {1   2   3   4   5   6   7   8   9   10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48   49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64   65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80}",
          "490: do_execsql_test 2.4.2 {",
          "491:   SELECT nth_value(c, 14) OVER win",
          "492:     FROM t3",
          "493:     WINDOW win AS (ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING  EXCLUDE TIES )",
          "494: } {{}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}   {}}",
          "498: do_execsql_test 3.0 {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "443:       (15, 30), (20, 40), (22,80), (30, 90);",
          "444: } {}",
          "447:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "448: } {5 30   10 112   13 102   13 102   15 142   20 150   22 120   30 90}",
          "451:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "452: } {5 {}   10 10   13 10   13 10   15 30   20 102   22 82   30 120}",
          "455:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "456: } {5 {}   10 52   13 30   13 30   15 {}   20 80   22 {}   30 {}}",
          "459:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING )",
          "460: } {30 90   22 120   20 150   15 142   13 102   13 102   10 112   5 30}",
          "463:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 10 PRECEDING AND 5 PRECEDING )",
          "464: } {30 {}   22 90   20 90   15 120   13 120   13 120   10 70   5 102}",
          "467:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 2 FOLLOWING AND 3 FOLLOWING )",
          "468: } {30 {}   22 40   20 {}   15 52   13 20   13 20   10 {}   5 {}}",
          "471:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 5.1 PRECEDING AND 5.3 FOLLOWING )",
          "472: } {5 30   10 112   13 102   13 102   15 142   20 150   22 120   30 90}",
          "475:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 10.2 PRECEDING AND 5.4 PRECEDING )",
          "476: } {5 {}   10 {}   13 10   13 10   15 10   20 72   22 82   30 120}",
          "479:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a RANGE BETWEEN 2.6 FOLLOWING AND 3.5 FOLLOWING )",
          "480: } {5 {}   10 52   13 {}   13 {}   15 {}   20 {}   22 {}   30 {}}",
          "483:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 5.7 PRECEDING AND 5.8 FOLLOWING )",
          "484: } {30 90   22 120   20 150   15 142   13 102   13 102   10 112   5 30}",
          "487:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN UNBOUNDED PRECEDING AND 5.9 PRECEDING )",
          "488: } {30 {}   22 90   20 90   15 170   13 210   13 210   10 210   5 292}",
          "491:   SELECT CAST(a AS INTEGER), sum(b) OVER win FROM t1 WINDOW win AS ( ORDER BY a DESC RANGE BETWEEN 2.1 FOLLOWING AND UNBOUNDED FOLLOWING )",
          "492: } {30 232   22 112   20 112   15 30   13 30   13 30   10 10   5 {}}",
          "",
          "[Removed Lines]",
          "446: do_execsql_test 2.1 {",
          "450: do_execsql_test 2.2 {",
          "454: do_execsql_test 2.3 {",
          "458: do_execsql_test 2.4 {",
          "462: do_execsql_test 2.5 {",
          "466: do_execsql_test 2.6 {",
          "470: do_execsql_test 2.7 {",
          "474: do_execsql_test 2.8 {",
          "478: do_execsql_test 2.9 {",
          "482: do_execsql_test 2.10 {",
          "486: do_execsql_test 2.11 {",
          "490: do_execsql_test 2.12 {",
          "",
          "[Added Lines]",
          "506: do_execsql_test 3.1 {",
          "510: do_execsql_test 3.2 {",
          "514: do_execsql_test 3.3 {",
          "518: do_execsql_test 3.4 {",
          "522: do_execsql_test 3.5 {",
          "526: do_execsql_test 3.6 {",
          "530: do_execsql_test 3.7 {",
          "534: do_execsql_test 3.8 {",
          "538: do_execsql_test 3.9 {",
          "542: do_execsql_test 3.10 {",
          "546: do_execsql_test 3.11 {",
          "550: do_execsql_test 3.12 {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1a01ffb5e06c70610e34d9401ce8ca6eb6e0a7e",
      "candidate_info": {
        "commit_hash": "a1a01ffb5e06c70610e34d9401ce8ca6eb6e0a7e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a1a01ffb5e06c70610e34d9401ce8ca6eb6e0a7e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/fkey.c"
        ],
        "message": "Fix the foreign key logic to be compatible with generated columns.\n\nFossilOrigin-Name: 3de57145a18c62ff9b556c7218d8b276000d0052e4890212fa9335235f22d03c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/fkey.c||src/fkey.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9e04ba22dfce3998e61331ac229ff543ecccc590284c9dd5def21efbe594fba0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "349:     VdbeCoverage(v);",
          "350:   }",
          "351:   for(i=0; i<pFKey->nCol; i++){",
          "353:     sqlite3VdbeAddOp2(v, OP_IsNull, iReg, iOk); VdbeCoverage(v);",
          "354:   }",
          "",
          "[Removed Lines]",
          "352:     int iReg = aiCol[i] + regData + 1;",
          "",
          "[Added Lines]",
          "352:     int iReg = sqlite3TableColumnToStorage(pFKey->pFrom,aiCol[i]) + regData + 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "369:       iMustBeInt = sqlite3VdbeAddOp2(v, OP_MustBeInt, regTemp, 0);",
          "370:       VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "368:       sqlite3VdbeAddOp2(v, OP_SCopy, aiCol[0]+1+regData, regTemp);",
          "",
          "[Added Lines]",
          "368:       sqlite3VdbeAddOp2(v, OP_SCopy,",
          "369:         sqlite3TableColumnToStorage(pFKey->pFrom,aiCol[0])+1+regData, regTemp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "392:       sqlite3VdbeAddOp3(v, OP_OpenRead, iCur, pIdx->tnum, iDb);",
          "393:       sqlite3VdbeSetP4KeyInfo(pParse, pIdx);",
          "394:       for(i=0; i<nCol; i++){",
          "396:       }",
          "",
          "[Removed Lines]",
          "395:         sqlite3VdbeAddOp2(v, OP_Copy, aiCol[i]+1+regData, regTemp+i);",
          "",
          "[Added Lines]",
          "396:         sqlite3VdbeAddOp2(v, OP_Copy,",
          "397:                sqlite3TableColumnToStorage(pFKey->pFrom, aiCol[i])+1+regData,",
          "398:                regTemp+i);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "408:       if( pTab==pFKey->pFrom && nIncr==1 ){",
          "409:         int iJump = sqlite3VdbeCurrentAddr(v) + nCol + 1;",
          "410:         for(i=0; i<nCol; i++){",
          "413:           assert( pIdx->aiColumn[i]>=0 );",
          "414:           assert( aiCol[i]!=pTab->iPKey );",
          "415:           if( pIdx->aiColumn[i]==pTab->iPKey ){",
          "",
          "[Removed Lines]",
          "411:           int iChild = aiCol[i]+1+regData;",
          "412:           int iParent = pIdx->aiColumn[i]+1+regData;",
          "",
          "[Added Lines]",
          "414:           int iChild = sqlite3TableColumnToStorage(pFKey->pFrom,aiCol[i])",
          "415:                               +1+regData;",
          "416:           int iParent = 1+regData;",
          "417:           iParent += sqlite3TableColumnToStorage(pIdx->pTable,",
          "418:                                                  pIdx->aiColumn[i]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "648d62995355ddc1a578d2fc1babd283f1186fe1",
      "candidate_info": {
        "commit_hash": "648d62995355ddc1a578d2fc1babd283f1186fe1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/648d62995355ddc1a578d2fc1babd283f1186fe1",
        "files": [
          "VERSION",
          "configure",
          "ext/fts3/fts3_write.c",
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/main.c",
          "src/pcache1.c",
          "src/select.c",
          "src/sqlite.h.in",
          "src/test_devsym.c",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbeaux.c",
          "src/vdbemem.c",
          "src/window.c",
          "test/dbfuzz2.c",
          "test/permutations.test",
          "test/quote.test",
          "test/releasetest.tcl",
          "test/releasetest_data.tcl",
          "test/wapptest.tcl",
          "test/window9.test",
          "test/windowfault.test"
        ],
        "message": "Merge latest trunk changes into this branch.\n\nFossilOrigin-Name: 86ab963cc5743867e0535b78a5776e18c13835aa44bf2009f77642df8407cb3f",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/main.c||src/main.c",
          "src/pcache1.c||src/pcache1.c",
          "src/select.c||src/select.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test_devsym.c||src/test_devsym.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbemem.c||src/vdbemem.c",
          "src/window.c||src/window.c",
          "test/dbfuzz2.c||test/dbfuzz2.c",
          "test/permutations.test||test/permutations.test",
          "test/quote.test||test/quote.test",
          "test/releasetest.tcl||test/releasetest.tcl",
          "test/releasetest_data.tcl||test/releasetest_data.tcl",
          "test/wapptest.tcl||test/wapptest.tcl",
          "test/window9.test||test/window9.test",
          "test/windowfault.test||test/windowfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4283:       pNode = &pWriter->aNodeWriter[nHeight];",
          "4284:       pNode->iBlock = pWriter->iStart + pWriter->nLeafEst*nHeight;",
          "4286:       if( rc==SQLITE_OK ){",
          "4287:         memcpy(pNode->block.a, aRoot, nRoot);",
          "4288:         pNode->block.n = nRoot;",
          "4289:       }",
          "4291:       for(i=nHeight; i>=0 && rc==SQLITE_OK; i--){",
          "",
          "[Removed Lines]",
          "4285:       blobGrowBuffer(&pNode->block, MAX(nRoot, p->nNodeSize), &rc);",
          "",
          "[Added Lines]",
          "4285:       blobGrowBuffer(&pNode->block,",
          "4286:           MAX(nRoot, p->nNodeSize)+FTS3_NODE_PADDING, &rc",
          "4287:       );",
          "4291:         memset(&pNode->block.a[nRoot], 0, FTS3_NODE_PADDING);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4305:               pNode = &pWriter->aNodeWriter[i-1];",
          "4306:               pNode->iBlock = reader.iChild;",
          "4307:               rc = sqlite3Fts3ReadBlock(p, reader.iChild, &aBlock, &nBlock, 0);",
          "4309:               if( rc==SQLITE_OK ){",
          "4310:                 memcpy(pNode->block.a, aBlock, nBlock);",
          "4311:                 pNode->block.n = nBlock;",
          "4312:               }",
          "4313:               sqlite3_free(aBlock);",
          "4314:             }",
          "",
          "[Removed Lines]",
          "4308:               blobGrowBuffer(&pNode->block, MAX(nBlock, p->nNodeSize), &rc);",
          "",
          "[Added Lines]",
          "4311:               blobGrowBuffer(&pNode->block,",
          "4312:                   MAX(nBlock, p->nNodeSize)+FTS3_NODE_PADDING, &rc",
          "4313:               );",
          "4317:                 memset(&pNode->block.a[nBlock], 0, FTS3_NODE_PADDING);",
          "",
          "---------------"
        ],
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   #include \"sqlite3.h\"",
          "64: #endif",
          "70: #ifndef SQLITE_AMALGAMATION",
          "71: #include \"sqlite3rtree.h\"",
          "72: typedef sqlite3_int64 i64;",
          "",
          "[Removed Lines]",
          "66: #include <string.h>",
          "67: #include <assert.h>",
          "68: #include <stdio.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: typedef unsigned char u8;",
          "75: typedef unsigned short u16;",
          "76: typedef unsigned int u32;",
          "77: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: #if !defined(NDEBUG) && !defined(SQLITE_DEBUG)",
          "74: # define NDEBUG 1",
          "75: #endif",
          "76: #if defined(NDEBUG) && defined(SQLITE_DEBUG)",
          "77: # undef NDEBUG",
          "79: #endif",
          "81: #include <string.h>",
          "82: #include <stdio.h>",
          "83: #include <assert.h>",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c7920f5569022f645ec4dbfce8c228880263785c708c2c0ac065e770c438b1d9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "619: #ifdef SQLITE_DEBUG",
          "623:   int nLookaside = 0;",
          "625:     nLookaside = sqlite3LookasideUsed(db, 0);",
          "626:   }",
          "627: #endif",
          "",
          "[Removed Lines]",
          "624:   if( db && (pTable->tabFlags & TF_Ephemeral)==0 ){",
          "",
          "[Added Lines]",
          "628:   if( db && !db->mallocFailed && (pTable->tabFlags & TF_Ephemeral)==0 ){",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3073:   db->szMmap = sqlite3GlobalConfig.szMmap;",
          "3074:   db->nextPagesize = 0;",
          "3075:   db->nMaxSorterMmap = 0x7FFFFFFF;",
          "3077:                  | SQLITE_DqsDML",
          "3078: #if !defined(SQLITE_DEFAULT_AUTOMATIC_INDEX) || SQLITE_DEFAULT_AUTOMATIC_INDEX",
          "3079:                  | SQLITE_AutoIndex",
          "3080: #endif",
          "",
          "[Removed Lines]",
          "3076:   db->flags |= SQLITE_ShortColNames | SQLITE_EnableTrigger | SQLITE_CacheSpill",
          "",
          "[Added Lines]",
          "3076:   db->flags |= SQLITE_ShortColNames",
          "3077:                  | SQLITE_EnableTrigger",
          "3078:                  | SQLITE_CacheSpill",
          "3095: #if !defined(SQLITE_DQS)",
          "3096: # define SQLITE_DQS 3",
          "3097: #endif",
          "3098: #if (SQLITE_DQS&1)==1",
          "3100: #endif",
          "3101: #if (SQLITE_DQS&2)==2",
          "3102:                  | SQLITE_DqsDDL",
          "3103: #endif",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:     }else{",
          "779:       pGroup = &pcache1.grp;",
          "780:     }",
          "781:     if( pGroup->lru.isAnchor==0 ){",
          "782:       pGroup->lru.isAnchor = 1;",
          "783:       pGroup->lru.pLruPrev = pGroup->lru.pLruNext = &pGroup->lru;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781:     pcache1EnterMutex(pGroup);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "787:     pCache->szExtra = szExtra;",
          "788:     pCache->szAlloc = szPage + szExtra + ROUND8(sizeof(PgHdr1));",
          "789:     pCache->bPurgeable = (bPurgeable ? 1 : 0);",
          "791:     pcache1ResizeHash(pCache);",
          "792:     if( bPurgeable ){",
          "793:       pCache->nMin = 10;",
          "",
          "[Removed Lines]",
          "790:     pcache1EnterMutex(pGroup);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2096:   if( pTab==0 ){",
          "2097:     return 0;",
          "2098:   }",
          "2102:   pTab->nTabRef = 1;",
          "2103:   pTab->zName = 0;",
          "2104:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "",
          "[Removed Lines]",
          "2101:   assert( db->lookaside.bDisable );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/test_devsym.c||src/test_devsym.c": [
          "File: src/test_devsym.c -> src/test_devsym.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "506: void devsym_unregister(){",
          "507:   sqlite3_vfs_unregister(&devsym_vfs);",
          "508:   g.pVfs = 0;",
          "509:   g.iDeviceChar = 0;",
          "510:   g.iSectorSize = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:   sqlite3_vfs_unregister(&writecrash_vfs);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2927: #endif",
          "2932:   pRec = pLast;",
          "2933:   do{",
          "2934:     assert( memIsValid(pRec) );",
          "",
          "[Removed Lines]",
          "2935:     serial_type = sqlite3VdbeSerialType(pRec, file_format, &len);",
          "2936:     if( pRec->flags & MEM_Zero ){",
          "2937:       if( serial_type==0 ){",
          "",
          "[Added Lines]",
          "2958:     if( pRec->flags & MEM_Null ){",
          "2959:       if( pRec->flags & MEM_Zero ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2944:         assert( pOp->p5==OPFLAG_NOCHNG_MAGIC || CORRUPT_DB );",
          "2948:       }else{",
          "2951:       }",
          "2952:     }",
          "2958:     if( pRec==pData0 ) break;",
          "2959:     pRec--;",
          "2960:   }while(1);",
          "",
          "[Removed Lines]",
          "2945:         serial_type = 10;",
          "2946:       }else if( nData ){",
          "2947:         if( sqlite3VdbeMemExpandBlob(pRec) ) goto no_mem;",
          "2949:         nZero += pRec->u.nZero;",
          "2950:         len -= pRec->u.nZero;",
          "2953:     nData += len;",
          "2954:     testcase( serial_type==127 );",
          "2955:     testcase( serial_type==128 );",
          "2956:     nHdr += serial_type<=127 ? 1 : sqlite3VarintLen(serial_type);",
          "2957:     pRec->uTemp = serial_type;",
          "",
          "[Added Lines]",
          "2967:         pRec->uTemp = 10;",
          "2968:       }else{",
          "2969:         pRec->uTemp = 0;",
          "2970:       }",
          "2971:       nHdr++;",
          "2972:     }else if( pRec->flags & (MEM_Int|MEM_IntReal) ){",
          "2974:       i64 i = pRec->u.i;",
          "2975:       u64 u;",
          "2976:       testcase( pRec->flags & MEM_Int );",
          "2977:       testcase( pRec->flags & MEM_IntReal );",
          "2978:       if( i<0 ){",
          "2979:         u = ~i;",
          "2980:       }else{",
          "2981:         u = i;",
          "2982:       }",
          "2983:       nHdr++;",
          "2984:       testcase( u==127 );               testcase( u==128 );",
          "2985:       testcase( u==32767 );             testcase( u==32768 );",
          "2986:       testcase( u==8388607 );           testcase( u==8388608 );",
          "2987:       testcase( u==2147483647 );        testcase( u==2147483648 );",
          "2988:       testcase( u==140737488355327LL ); testcase( u==140737488355328LL );",
          "2989:       if( u<=127 ){",
          "2990:         if( (i&1)==i && file_format>=4 ){",
          "2991:           pRec->uTemp = 8+(u32)u;",
          "2992:         }else{",
          "2993:           nData++;",
          "2994:           pRec->uTemp = 1;",
          "2995:         }",
          "2996:       }else if( u<=32767 ){",
          "2997:         nData += 2;",
          "2998:         pRec->uTemp = 2;",
          "2999:       }else if( u<=8388607 ){",
          "3000:         nData += 3;",
          "3001:         pRec->uTemp = 3;",
          "3002:       }else if( u<=2147483647 ){",
          "3003:         nData += 4;",
          "3004:         pRec->uTemp = 4;",
          "3005:       }else if( u<=140737488355327LL ){",
          "3006:         nData += 6;",
          "3007:         pRec->uTemp = 5;",
          "3009:         nData += 8;",
          "3010:         if( pRec->flags & MEM_IntReal ){",
          "3014:           pRec->u.r = (double)pRec->u.i;",
          "3015:           pRec->flags &= ~MEM_IntReal;",
          "3016:           pRec->flags |= MEM_Real;",
          "3017:           pRec->uTemp = 7;",
          "3018:         }else{",
          "3019:           pRec->uTemp = 6;",
          "3020:         }",
          "3021:       }",
          "3022:     }else if( pRec->flags & MEM_Real ){",
          "3023:       nHdr++;",
          "3024:       nData += 8;",
          "3025:       pRec->uTemp = 7;",
          "3026:     }else{",
          "3027:       assert( db->mallocFailed || pRec->flags&(MEM_Str|MEM_Blob) );",
          "3028:       assert( pRec->n>=0 );",
          "3029:       len = (u32)pRec->n;",
          "3030:       serial_type = (len*2) + 12 + ((pRec->flags & MEM_Str)!=0);",
          "3031:       if( pRec->flags & MEM_Zero ){",
          "3032:         serial_type += pRec->u.nZero*2;",
          "3033:         if( nData ){",
          "3034:           if( sqlite3VdbeMemExpandBlob(pRec) ) goto no_mem;",
          "3035:           len += pRec->u.nZero;",
          "3036:         }else{",
          "3037:           nZero += pRec->u.nZero;",
          "3038:         }",
          "3040:       nData += len;",
          "3041:       nHdr += sqlite3VarintLen(serial_type);",
          "3042:       pRec->uTemp = serial_type;",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "486: int sqlite3VdbeCursorRestore(VdbeCursor*);",
          "487: u32 sqlite3VdbeSerialTypeLen(u32);",
          "488: u8 sqlite3VdbeOneByteSerialTypeLen(u8);",
          "489: u32 sqlite3VdbeSerialType(Mem*, int, u32*);",
          "490: u32 sqlite3VdbeSerialPut(unsigned char*, Mem*, u32);",
          "491: u32 sqlite3VdbeSerialGet(const unsigned char*, u32, Mem*);",
          "492: void sqlite3VdbeDeleteAuxData(sqlite3*, AuxData**, int, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489: #ifdef SQLITE_ENABLE_STAT3_OR_STAT4",
          "491: #endif",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3438: u32 sqlite3VdbeSerialType(Mem *pMem, int file_format, u32 *pLen){",
          "3439:   int flags = pMem->flags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3433: #ifdef SQLITE_ENABLE_STAT3_OR_STAT4",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "703:   double r2 = (double)i;",
          "704:   return r1==0.0",
          "705:       || (memcmp(&r1, &r2, sizeof(r1))==0",
          "707: }",
          "",
          "[Removed Lines]",
          "706:           && i >= -2251799813685248 && i < 2251799813685248);",
          "",
          "[Added Lines]",
          "706:           && i >= -2251799813685248LL && i < 2251799813685248LL);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "736:   Window *pWin;",
          "737:   SrcList *pSrc;",
          "738:   ExprList *pSub;",
          "740: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:   Table *pTab;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "796:         pExpr->op = TK_COLUMN;",
          "797:         pExpr->iColumn = p->pSub->nExpr-1;",
          "798:         pExpr->iTable = p->pWin->iEphCsr;",
          "799:       }",
          "801:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800:         pExpr->y.pTab = p->pTab;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "839:   Window *pWin,",
          "840:   SrcList *pSrc,",
          "843: ){",
          "844:   Walker sWalker;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "844:   Table *pTab,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "850:   sRewrite.pSub = *ppSub;",
          "851:   sRewrite.pWin = pWin;",
          "852:   sRewrite.pSrc = pSrc;",
          "854:   sWalker.pParse = pParse;",
          "855:   sWalker.xExprCallback = selectWindowRewriteExprCb;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "856:   sRewrite.pTab = pTab;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "913:     p->pSrc = 0;",
          "914:     p->pWhere = 0;",
          "915:     p->pGroupBy = 0;",
          "916:     p->pHaving = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916:     Table *pTab;",
          "918:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
          "919:     if( pTab==0 ){",
          "920:       return SQLITE_NOMEM;",
          "921:     }",
          "927:     p->selFlags &= ~SF_Aggregate;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "933:     pMWin->iEphCsr = pParse->nTab++;",
          "934:     pParse->nTab += 3;",
          "938:     pMWin->nBufferCol = (pSublist ? pSublist->nExpr : 0);",
          "",
          "[Removed Lines]",
          "936:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pEList, &pSublist);",
          "937:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pOrderBy, &pSublist);",
          "",
          "[Added Lines]",
          "947:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pEList, pTab, &pSublist);",
          "948:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pOrderBy, pTab, &pSublist);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "976:     );",
          "977:     p->pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "978:     if( p->pSrc ){",
          "979:       p->pSrc->a[0].pSelect = pSub;",
          "980:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "982:         rc = SQLITE_NOMEM;",
          "983:       }else{",
          "987:       }",
          "989:       sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pMWin->iEphCsr, pSublist->nExpr);",
          "990:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+1, pMWin->iEphCsr);",
          "991:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+2, pMWin->iEphCsr);",
          "",
          "[Removed Lines]",
          "981:       if( sqlite3ExpandSubquery(pParse, &p->pSrc->a[0]) ){",
          "984:         pSub->selFlags |= SF_Expanded;",
          "985:         p->selFlags &= ~SF_Aggregate;",
          "986:         sqlite3SelectPrep(pParse, pSub, 0);",
          "",
          "[Added Lines]",
          "990:       Table *pTab2;",
          "993:       pSub->selFlags |= SF_Expanded;",
          "994:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub);",
          "995:       if( pTab2==0 ){",
          "998:         memcpy(pTab, pTab2, sizeof(Table));",
          "999:         pTab->tabFlags |= TF_Ephemeral;",
          "1000:         p->pSrc->a[0].pTab = pTab;",
          "1001:         pTab = pTab2;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "994:       sqlite3SelectDelete(db, pSub);",
          "995:     }",
          "996:     if( db->mallocFailed ) rc = SQLITE_NOMEM;",
          "997:   }",
          "999:   return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:     sqlite3DbFree(db, pTab);",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "377:       free(pIn);",
          "378:     }",
          "379:   }",
          "380:   if( eVerbosity>0 ){",
          "381:     struct rusage x;",
          "382:     printf(\"SQLite %s\\n\", sqlite3_sourceid());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "380: #ifdef RUSAGE_SELF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:       printf(\"Maximum RSS = %ld KB\\n\", x.ru_maxrss);",
          "386:     }",
          "387:   }",
          "388:   return 0;",
          "389: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389: #endif",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "966:   async4.test bigfile.test backcompat.test e_wal* fstat.test mmap2.test",
          "967:   pager1.test syscall.test tkt3457.test *malloc* mmap* multiplex* nolock*",
          "968:   pager2.test *fault* rowal* snapshot* superlock* symlink.test",
          "970: }]",
          "972: if {[info commands register_demovfs] != \"\"} {",
          "",
          "[Removed Lines]",
          "969:   delete_db.test shmlock.test",
          "",
          "[Added Lines]",
          "969:   delete_db.test shmlock.test chunksize.test",
          "",
          "---------------"
        ],
        "test/quote.test||test/quote.test": [
          "File: test/quote.test -> test/quote.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: # SQLite can load such a schema from disk.",
          "93: #",
          "94: reset_db",
          "95: do_execsql_test 2.0 {",
          "96:   CREATE TABLE t1(x, y, z);",
          "97: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: sqlite3_db_config db SQLITE_DBCONFIG_DQS_DDL 0",
          "96: sqlite3_db_config db SQLITE_DBCONFIG_DQS_DML 1",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:     \"User-Auth\"               tcltest",
          "282:     \"Update-Delete-Limit\"     test",
          "283:     \"Extra-Robustness\"        test",
          "285:     \"No-lookaside\"            test",
          "286:     \"Devkit\"                  test",
          "287:     \"Apple\"                   test",
          "",
          "[Removed Lines]",
          "284:     \"Device-Two\"              test",
          "",
          "[Added Lines]",
          "284:     \"Device-Two\"              \"threadtest test\"",
          "",
          "---------------"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:     \"User-Auth\"               tcltest",
          "247:     \"Update-Delete-Limit\"     test",
          "248:     \"Extra-Robustness\"        test",
          "250:     \"No-lookaside\"            test",
          "251:     \"Devkit\"                  test",
          "252:     \"Apple\"                   test",
          "",
          "[Removed Lines]",
          "249:     \"Device-Two\"              test",
          "",
          "[Added Lines]",
          "249:     \"Device-Two\"              \"threadtest test\"",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   wapptest_output $msg",
          "290:   if {[info exists G(test.$name.errmsg)] && $G(test.$name.errmsg)!=\"\"} {",
          "292:   }",
          "293: }",
          "",
          "[Removed Lines]",
          "291:     wapptest_output \"    $G(test.$config.errmsg)\"",
          "",
          "[Added Lines]",
          "291:     wapptest_output \"    $G(test.$name.errmsg)\"",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 June 8",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix window9",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE fruits(",
          "25:      name TEXT COLLATE NOCASE,",
          "26:      color TEXT COLLATE NOCASE",
          "27:   );",
          "28: }",
          "30: do_execsql_test 1.1 {",
          "31:   INSERT INTO fruits (name, color) VALUES ('apple', 'RED');",
          "32:   INSERT INTO fruits (name, color) VALUES ('APPLE', 'yellow');",
          "33:   INSERT INTO fruits (name, color) VALUES ('pear', 'YELLOW');",
          "34:   INSERT INTO fruits (name, color) VALUES ('PEAR', 'green');",
          "35: }",
          "37: do_execsql_test 1.2 {",
          "38:   SELECT name, color, dense_rank() OVER (ORDER BY name) FROM fruits;",
          "39: } {",
          "40:   apple RED    1",
          "41:   APPLE yellow 1",
          "42:   pear  YELLOW 2",
          "43:   PEAR  green  2",
          "44: }",
          "46: do_execsql_test 1.3 {",
          "47:   SELECT name, color,",
          "48:     dense_rank() OVER (PARTITION BY name ORDER BY color)",
          "49:   FROM fruits;",
          "50: } {",
          "51:   apple RED    1",
          "52:   APPLE yellow 2",
          "53:   PEAR green   1",
          "54:   pear YELLOW  2",
          "55: }",
          "57: do_execsql_test 1.4 {",
          "58:   SELECT name, color,",
          "59:     dense_rank() OVER (ORDER BY name),",
          "60:     dense_rank() OVER (PARTITION BY name ORDER BY color)",
          "61:   FROM fruits;",
          "62: } {",
          "63:   apple RED    1 1",
          "64:   APPLE yellow 1 2",
          "65:   PEAR  green  2 1",
          "66:   pear  YELLOW 2 2",
          "67: }",
          "69: do_execsql_test 1.5 {",
          "70:   SELECT name, color,",
          "71:     dense_rank() OVER (ORDER BY name),",
          "72:     dense_rank() OVER (PARTITION BY name ORDER BY color)",
          "73:   FROM fruits ORDER BY color;",
          "74: } {",
          "75:   PEAR  green  2 1",
          "76:   apple RED    1 1",
          "77:   APPLE yellow 1 2",
          "78:   pear  YELLOW 2 2",
          "79: }",
          "81: do_execsql_test 2.0 {",
          "82:   CREATE TABLE t1(a BLOB, b INTEGER, c COLLATE nocase);",
          "83:   INSERT INTO t1 VALUES(1, 2, 'abc');",
          "84:   INSERT INTO t1 VALUES(3, 4, 'ABC');",
          "85: }",
          "87: do_execsql_test 2.1.1 {",
          "88:   SELECT c=='Abc' FROM t1",
          "89: } {1     1}",
          "90: do_execsql_test 2.1.2 {",
          "91:   SELECT c=='Abc', rank() OVER (ORDER BY b) FROM t1",
          "92: } {1 1   1 2}",
          "94: do_execsql_test 2.2.1 {",
          "95:   SELECT b=='2' FROM t1",
          "96: } {1     0}",
          "97: do_execsql_test 2.2.2 {",
          "98:   SELECT b=='2', rank() OVER (ORDER BY a) FROM t1",
          "99: } {1 1   0 2}",
          "101: finish_test",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:   return $ret",
          "210: }",
          "212: do_faultsim_test 9 -end 25 -faults tmpread -body {",
          "213:   execsql {",
          "214:     SELECT sum(y) OVER win FROM t",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212: set L [db eval {SELECT 0.0 FROM t}]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     )",
          "218:   }",
          "219: } -test {",
          "221: }",
          "223: catch {db close}",
          "",
          "[Removed Lines]",
          "220:   faultsim_test_result {0 {}}",
          "",
          "[Added Lines]",
          "221:   faultsim_test_result [list 0 $::L]",
          "",
          "---------------"
        ]
      }
    }
  ]
}