{
  "cve_id": "CVE-2013-5634",
  "cve_desc": "arch/arm/kvm/arm.c in the Linux kernel before 3.10 on the ARM platform, when KVM is used, allows host OS users to cause a denial of service (NULL pointer dereference, OOPS, and host OS crash) or possibly have unspecified other impact by omitting vCPU initialization before a KVM_GET_REG_LIST ioctl call.",
  "repo": "torvalds/linux",
  "patch_hash": "e8180dcaa8470ceca21109f143876fdcd9fe050a",
  "patch_info": {
    "commit_hash": "e8180dcaa8470ceca21109f143876fdcd9fe050a",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/e8180dcaa8470ceca21109f143876fdcd9fe050a",
    "files": [
      "arch/arm/kvm/arm.c"
    ],
    "message": "ARM: KVM: prevent NULL pointer dereferences with KVM VCPU ioctl\n\nSome ARM KVM VCPU ioctls require the vCPU to be properly initialized\nwith the KVM_ARM_VCPU_INIT ioctl before being used with further\nrequests. KVM_RUN checks whether this initialization has been\ndone, but other ioctls do not.\nNamely KVM_GET_REG_LIST will dereference an array with index -1\nwithout initialization and thus leads to a kernel oops.\nFix this by adding checks before executing the ioctl handlers.\n\n [ Removed superflous comment from static function - Christoffer ]\n\nChanges from v1:\n * moved check into a static function with a meaningful name\n\nSigned-off-by: Andre Przywara <andre.przywara@linaro.org>\nSigned-off-by: Christoffer Dall <cdall@cs.columbia.edu>",
    "before_after_code_files": [
      "arch/arm/kvm/arm.c||arch/arm/kvm/arm.c"
    ]
  },
  "patch_diff": {
    "arch/arm/kvm/arm.c||arch/arm/kvm/arm.c": [
      "File: arch/arm/kvm/arm.c -> arch/arm/kvm/arm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "492:  wait_event_interruptible(*wq, !vcpu->arch.pause);",
      "493: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "495: static int kvm_vcpu_initialized(struct kvm_vcpu *vcpu)",
      "496: {",
      "497:  return vcpu->arch.target >= 0;",
      "498: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "508:  int ret;",
      "509:  sigset_t sigsaved;",
      "513:   return -ENOEXEC;",
      "515:  ret = kvm_vcpu_first_run_init(vcpu);",
      "",
      "[Removed Lines]",
      "512:  if (unlikely(vcpu->arch.target < 0))",
      "",
      "[Added Lines]",
      "516:  if (unlikely(!kvm_vcpu_initialized(vcpu)))",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "710:  case KVM_SET_ONE_REG:",
      "711:  case KVM_GET_ONE_REG: {",
      "712:   struct kvm_one_reg reg;",
      "713:   if (copy_from_user(&reg, argp, sizeof(reg)))",
      "714:    return -EFAULT;",
      "715:   if (ioctl == KVM_SET_ONE_REG)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "718:   if (unlikely(!kvm_vcpu_initialized(vcpu)))",
      "719:    return -ENOEXEC;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "722:   struct kvm_reg_list reg_list;",
      "723:   unsigned n;",
      "725:   if (copy_from_user(&reg_list, user_list, sizeof(reg_list)))",
      "726:    return -EFAULT;",
      "727:   n = reg_list.n;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "733:   if (unlikely(!kvm_vcpu_initialized(vcpu)))",
      "734:    return -ENOEXEC;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "749cf76c5a363e1383108a914ea09530bfa0bd43",
      "candidate_info": {
        "commit_hash": "749cf76c5a363e1383108a914ea09530bfa0bd43",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/749cf76c5a363e1383108a914ea09530bfa0bd43",
        "files": [
          "Documentation/virtual/kvm/api.txt",
          "arch/arm/Kconfig",
          "arch/arm/Makefile",
          "arch/arm/include/asm/kvm_arm.h",
          "arch/arm/include/asm/kvm_asm.h",
          "arch/arm/include/asm/kvm_coproc.h",
          "arch/arm/include/asm/kvm_emulate.h",
          "arch/arm/include/asm/kvm_host.h",
          "arch/arm/include/uapi/asm/kvm.h",
          "arch/arm/kvm/Kconfig",
          "arch/arm/kvm/Makefile",
          "arch/arm/kvm/arm.c",
          "arch/arm/kvm/coproc.c",
          "arch/arm/kvm/emulate.c",
          "arch/arm/kvm/guest.c",
          "arch/arm/kvm/init.S",
          "arch/arm/kvm/interrupts.S",
          "arch/arm/kvm/mmu.c",
          "arch/arm/kvm/reset.c",
          "arch/arm/kvm/trace.h",
          "include/uapi/linux/kvm.h"
        ],
        "message": "KVM: ARM: Initial skeleton to compile KVM support\n\nTargets KVM support for Cortex A-15 processors.\n\nContains all the framework components, make files, header files, some\ntracing functionality, and basic user space API.\n\nOnly supported core is Cortex-A15 for now.\n\nMost functionality is in arch/arm/kvm/* or arch/arm/include/asm/kvm_*.h.\n\nReviewed-by: Will Deacon <will.deacon@arm.com>\nReviewed-by: Marcelo Tosatti <mtosatti@redhat.com>\nSigned-off-by: Rusty Russell <rusty@rustcorp.com.au>\nSigned-off-by: Marc Zyngier <marc.zyngier@arm.com>\nSigned-off-by: Christoffer Dall <c.dall@virtualopensystems.com>",
        "before_after_code_files": [
          "arch/arm/include/asm/kvm_arm.h||arch/arm/include/asm/kvm_arm.h",
          "arch/arm/include/asm/kvm_asm.h||arch/arm/include/asm/kvm_asm.h",
          "arch/arm/include/asm/kvm_coproc.h||arch/arm/include/asm/kvm_coproc.h",
          "arch/arm/include/asm/kvm_emulate.h||arch/arm/include/asm/kvm_emulate.h",
          "arch/arm/include/asm/kvm_host.h||arch/arm/include/asm/kvm_host.h",
          "arch/arm/include/uapi/asm/kvm.h||arch/arm/include/uapi/asm/kvm.h",
          "arch/arm/kvm/arm.c||arch/arm/kvm/arm.c",
          "arch/arm/kvm/coproc.c||arch/arm/kvm/coproc.c",
          "arch/arm/kvm/emulate.c||arch/arm/kvm/emulate.c",
          "arch/arm/kvm/guest.c||arch/arm/kvm/guest.c",
          "arch/arm/kvm/init.S||arch/arm/kvm/init.S",
          "arch/arm/kvm/interrupts.S||arch/arm/kvm/interrupts.S",
          "arch/arm/kvm/mmu.c||arch/arm/kvm/mmu.c",
          "arch/arm/kvm/reset.c||arch/arm/kvm/reset.c",
          "arch/arm/kvm/trace.h||arch/arm/kvm/trace.h",
          "include/uapi/linux/kvm.h||include/uapi/linux/kvm.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/arm/kvm/arm.c||arch/arm/kvm/arm.c"
          ],
          "candidate": [
            "arch/arm/kvm/arm.c||arch/arm/kvm/arm.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/arm/include/asm/kvm_arm.h||arch/arm/include/asm/kvm_arm.h": [
          "File: arch/arm/include/asm/kvm_arm.h -> arch/arm/include/asm/kvm_arm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #ifndef __ARM_KVM_ARM_H__",
          "20: #define __ARM_KVM_ARM_H__",
          "22: #include <linux/types.h>",
          "",
          "---------------"
        ],
        "arch/arm/include/asm/kvm_asm.h||arch/arm/include/asm/kvm_asm.h": [
          "File: arch/arm/include/asm/kvm_asm.h -> arch/arm/include/asm/kvm_asm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #ifndef __ARM_KVM_ASM_H__",
          "20: #define __ARM_KVM_ASM_H__",
          "50: #define ARM_EXCEPTION_RESET   0",
          "51: #define ARM_EXCEPTION_UNDEFINED   1",
          "52: #define ARM_EXCEPTION_SOFTWARE    2",
          "53: #define ARM_EXCEPTION_PREF_ABORT  3",
          "54: #define ARM_EXCEPTION_DATA_ABORT  4",
          "55: #define ARM_EXCEPTION_IRQ   5",
          "56: #define ARM_EXCEPTION_FIQ   6",
          "",
          "---------------"
        ],
        "arch/arm/include/asm/kvm_coproc.h||arch/arm/include/asm/kvm_coproc.h": [
          "File: arch/arm/include/asm/kvm_coproc.h -> arch/arm/include/asm/kvm_coproc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #ifndef __ARM_KVM_COPROC_H__",
          "19: #define __ARM_KVM_COPROC_H__",
          "20: #include <linux/kvm_host.h>",
          "22: void kvm_reset_coprocs(struct kvm_vcpu *vcpu);",
          "",
          "---------------"
        ],
        "arch/arm/include/asm/kvm_emulate.h||arch/arm/include/asm/kvm_emulate.h": [
          "File: arch/arm/include/asm/kvm_emulate.h -> arch/arm/include/asm/kvm_emulate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #ifndef __ARM_KVM_EMULATE_H__",
          "20: #define __ARM_KVM_EMULATE_H__",
          "22: #include <linux/kvm_host.h>",
          "23: #include <asm/kvm_asm.h>",
          "25: u32 *vcpu_reg(struct kvm_vcpu *vcpu, u8 reg_num);",
          "26: u32 *vcpu_spsr(struct kvm_vcpu *vcpu);",
          "28: static inline u32 *vcpu_pc(struct kvm_vcpu *vcpu)",
          "29: {",
          "30:  return (u32 *)&vcpu->arch.regs.usr_regs.ARM_pc;",
          "31: }",
          "33: static inline u32 *vcpu_cpsr(struct kvm_vcpu *vcpu)",
          "34: {",
          "35:  return (u32 *)&vcpu->arch.regs.usr_regs.ARM_cpsr;",
          "36: }",
          "38: static inline bool mode_has_spsr(struct kvm_vcpu *vcpu)",
          "39: {",
          "40:  unsigned long cpsr_mode = vcpu->arch.regs.usr_regs.ARM_cpsr & MODE_MASK;",
          "41:  return (cpsr_mode > USR_MODE && cpsr_mode < SYSTEM_MODE);",
          "42: }",
          "44: static inline bool vcpu_mode_priv(struct kvm_vcpu *vcpu)",
          "45: {",
          "46:  unsigned long cpsr_mode = vcpu->arch.regs.usr_regs.ARM_cpsr & MODE_MASK;",
          "47:  return cpsr_mode > USR_MODE;;",
          "48: }",
          "",
          "---------------"
        ],
        "arch/arm/include/asm/kvm_host.h||arch/arm/include/asm/kvm_host.h": [
          "File: arch/arm/include/asm/kvm_host.h -> arch/arm/include/asm/kvm_host.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #ifndef __ARM_KVM_HOST_H__",
          "20: #define __ARM_KVM_HOST_H__",
          "22: #include <asm/kvm.h>",
          "23: #include <asm/kvm_asm.h>",
          "25: #define KVM_MAX_VCPUS CONFIG_KVM_ARM_MAX_VCPUS",
          "26: #define KVM_MEMORY_SLOTS 32",
          "27: #define KVM_PRIVATE_MEM_SLOTS 4",
          "28: #define KVM_COALESCED_MMIO_PAGE_OFFSET 1",
          "30: #define KVM_VCPU_MAX_FEATURES 0",
          "33: #define KVM_HPAGE_GFN_SHIFT(x) 0",
          "34: #define KVM_NR_PAGE_SIZES 1",
          "35: #define KVM_PAGES_PER_HPAGE(x) (1UL<<31)",
          "37: struct kvm_vcpu;",
          "38: u32 *kvm_vcpu_reg(struct kvm_vcpu *vcpu, u8 reg_num, u32 mode);",
          "39: int kvm_target_cpu(void);",
          "40: int kvm_reset_vcpu(struct kvm_vcpu *vcpu);",
          "41: void kvm_reset_coprocs(struct kvm_vcpu *vcpu);",
          "43: struct kvm_arch {",
          "45:  u64    vttbr;",
          "53:  u64    vmid_gen;",
          "54:  u32    vmid;",
          "57:  pgd_t *pgd;",
          "58: };",
          "60: #define KVM_NR_MEM_OBJS     40",
          "66: struct kvm_mmu_memory_cache {",
          "67:  int nobjs;",
          "68:  void *objects[KVM_NR_MEM_OBJS];",
          "69: };",
          "71: struct kvm_vcpu_arch {",
          "72:  struct kvm_regs regs;",
          "75:  DECLARE_BITMAP(features, KVM_VCPU_MAX_FEATURES);",
          "78:  u32 cp15[NR_CP15_REGS];",
          "81:  u32 midr;",
          "95:  struct kvm_mmu_memory_cache mmu_page_cache;",
          "96: };",
          "98: struct kvm_vm_stat {",
          "99:  u32 remote_tlb_flush;",
          "100: };",
          "102: struct kvm_vcpu_stat {",
          "103:  u32 halt_wakeup;",
          "104: };",
          "106: struct kvm_vcpu_init;",
          "107: int kvm_vcpu_set_target(struct kvm_vcpu *vcpu,",
          "108:    const struct kvm_vcpu_init *init);",
          "109: unsigned long kvm_arm_num_regs(struct kvm_vcpu *vcpu);",
          "110: int kvm_arm_copy_reg_indices(struct kvm_vcpu *vcpu, u64 __user *indices);",
          "111: struct kvm_one_reg;",
          "112: int kvm_arm_get_reg(struct kvm_vcpu *vcpu, const struct kvm_one_reg *reg);",
          "113: int kvm_arm_set_reg(struct kvm_vcpu *vcpu, const struct kvm_one_reg *reg);",
          "",
          "---------------"
        ],
        "arch/arm/include/uapi/asm/kvm.h||arch/arm/include/uapi/asm/kvm.h": [
          "File: arch/arm/include/uapi/asm/kvm.h -> arch/arm/include/uapi/asm/kvm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #ifndef __ARM_KVM_H__",
          "20: #define __ARM_KVM_H__",
          "22: #include <linux/types.h>",
          "23: #include <asm/ptrace.h>",
          "25: #define __KVM_HAVE_GUEST_DEBUG",
          "27: #define KVM_REG_SIZE(id)      \\",
          "28:  (1U << (((id) & KVM_REG_SIZE_MASK) >> KVM_REG_SIZE_SHIFT))",
          "31: #define KVM_ARM_SVC_sp  svc_regs[0]",
          "32: #define KVM_ARM_SVC_lr  svc_regs[1]",
          "33: #define KVM_ARM_SVC_spsr svc_regs[2]",
          "34: #define KVM_ARM_ABT_sp  abt_regs[0]",
          "35: #define KVM_ARM_ABT_lr  abt_regs[1]",
          "36: #define KVM_ARM_ABT_spsr abt_regs[2]",
          "37: #define KVM_ARM_UND_sp  und_regs[0]",
          "38: #define KVM_ARM_UND_lr  und_regs[1]",
          "39: #define KVM_ARM_UND_spsr und_regs[2]",
          "40: #define KVM_ARM_IRQ_sp  irq_regs[0]",
          "41: #define KVM_ARM_IRQ_lr  irq_regs[1]",
          "42: #define KVM_ARM_IRQ_spsr irq_regs[2]",
          "45: #define KVM_ARM_FIQ_r8  fiq_regs[0]",
          "46: #define KVM_ARM_FIQ_r9  fiq_regs[1]",
          "47: #define KVM_ARM_FIQ_r10  fiq_regs[2]",
          "48: #define KVM_ARM_FIQ_fp  fiq_regs[3]",
          "49: #define KVM_ARM_FIQ_ip  fiq_regs[4]",
          "50: #define KVM_ARM_FIQ_sp  fiq_regs[5]",
          "51: #define KVM_ARM_FIQ_lr  fiq_regs[6]",
          "52: #define KVM_ARM_FIQ_spsr fiq_regs[7]",
          "54: struct kvm_regs {",
          "61: };",
          "64: #define KVM_ARM_TARGET_CORTEX_A15 0",
          "65: #define KVM_ARM_NUM_TARGETS  1",
          "67: struct kvm_vcpu_init {",
          "68:  __u32 target;",
          "69:  __u32 features[7];",
          "70: };",
          "72: struct kvm_sregs {",
          "73: };",
          "75: struct kvm_fpu {",
          "76: };",
          "78: struct kvm_guest_debug_arch {",
          "79: };",
          "81: struct kvm_debug_exit_arch {",
          "82: };",
          "84: struct kvm_sync_regs {",
          "85: };",
          "87: struct kvm_arch_memory_slot {",
          "88: };",
          "91: #define KVM_REG_ARM_COPROC_MASK  0x000000000FFF0000",
          "92: #define KVM_REG_ARM_COPROC_SHIFT 16",
          "93: #define KVM_REG_ARM_32_OPC2_MASK 0x0000000000000007",
          "94: #define KVM_REG_ARM_32_OPC2_SHIFT 0",
          "95: #define KVM_REG_ARM_OPC1_MASK  0x0000000000000078",
          "96: #define KVM_REG_ARM_OPC1_SHIFT  3",
          "97: #define KVM_REG_ARM_CRM_MASK  0x0000000000000780",
          "98: #define KVM_REG_ARM_CRM_SHIFT  7",
          "99: #define KVM_REG_ARM_32_CRN_MASK  0x0000000000007800",
          "100: #define KVM_REG_ARM_32_CRN_SHIFT 11",
          "103: #define KVM_REG_ARM_CORE  (0x0010 << KVM_REG_ARM_COPROC_SHIFT)",
          "104: #define KVM_REG_ARM_CORE_REG(name) (offsetof(struct kvm_regs, name) / 4)",
          "",
          "---------------"
        ],
        "arch/arm/kvm/arm.c||arch/arm/kvm/arm.c": [
          "File: arch/arm/kvm/arm.c -> arch/arm/kvm/arm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <linux/errno.h>",
          "20: #include <linux/err.h>",
          "21: #include <linux/kvm_host.h>",
          "22: #include <linux/module.h>",
          "23: #include <linux/vmalloc.h>",
          "24: #include <linux/fs.h>",
          "25: #include <linux/mman.h>",
          "26: #include <linux/sched.h>",
          "27: #include <trace/events/kvm.h>",
          "29: #define CREATE_TRACE_POINTS",
          "30: #include \"trace.h\"",
          "32: #include <asm/unified.h>",
          "33: #include <asm/uaccess.h>",
          "34: #include <asm/ptrace.h>",
          "35: #include <asm/mman.h>",
          "36: #include <asm/cputype.h>",
          "38: #ifdef REQUIRES_VIRT",
          "39: __asm__(\".arch_extension virt\");",
          "40: #endif",
          "42: int kvm_arch_hardware_enable(void *garbage)",
          "43: {",
          "44:  return 0;",
          "45: }",
          "47: int kvm_arch_vcpu_should_kick(struct kvm_vcpu *vcpu)",
          "48: {",
          "49:  return kvm_vcpu_exiting_guest_mode(vcpu) == IN_GUEST_MODE;",
          "50: }",
          "52: void kvm_arch_hardware_disable(void *garbage)",
          "53: {",
          "54: }",
          "56: int kvm_arch_hardware_setup(void)",
          "57: {",
          "58:  return 0;",
          "59: }",
          "61: void kvm_arch_hardware_unsetup(void)",
          "62: {",
          "63: }",
          "65: void kvm_arch_check_processor_compat(void *rtn)",
          "66: {",
          "68: }",
          "70: void kvm_arch_sync_events(struct kvm *kvm)",
          "71: {",
          "72: }",
          "74: int kvm_arch_init_vm(struct kvm *kvm, unsigned long type)",
          "75: {",
          "76:  if (type)",
          "77:   return -EINVAL;",
          "79:  return 0;",
          "80: }",
          "82: int kvm_arch_vcpu_fault(struct kvm_vcpu *vcpu, struct vm_fault *vmf)",
          "83: {",
          "84:  return VM_FAULT_SIGBUS;",
          "85: }",
          "87: void kvm_arch_free_memslot(struct kvm_memory_slot *free,",
          "88:       struct kvm_memory_slot *dont)",
          "89: {",
          "90: }",
          "92: int kvm_arch_create_memslot(struct kvm_memory_slot *slot, unsigned long npages)",
          "93: {",
          "94:  return 0;",
          "95: }",
          "97: void kvm_arch_destroy_vm(struct kvm *kvm)",
          "98: {",
          "99:  int i;",
          "101:  for (i = 0; i < KVM_MAX_VCPUS; ++i) {",
          "102:   if (kvm->vcpus[i]) {",
          "103:    kvm_arch_vcpu_free(kvm->vcpus[i]);",
          "104:    kvm->vcpus[i] = NULL;",
          "105:   }",
          "106:  }",
          "107: }",
          "109: int kvm_dev_ioctl_check_extension(long ext)",
          "110: {",
          "111:  int r;",
          "112:  switch (ext) {",
          "113:  case KVM_CAP_USER_MEMORY:",
          "114:  case KVM_CAP_SYNC_MMU:",
          "115:  case KVM_CAP_DESTROY_MEMORY_REGION_WORKS:",
          "116:  case KVM_CAP_ONE_REG:",
          "117:   r = 1;",
          "118:   break;",
          "119:  case KVM_CAP_COALESCED_MMIO:",
          "120:   r = KVM_COALESCED_MMIO_PAGE_OFFSET;",
          "121:   break;",
          "122:  case KVM_CAP_NR_VCPUS:",
          "123:   r = num_online_cpus();",
          "124:   break;",
          "125:  case KVM_CAP_MAX_VCPUS:",
          "126:   r = KVM_MAX_VCPUS;",
          "127:   break;",
          "128:  default:",
          "129:   r = 0;",
          "130:   break;",
          "131:  }",
          "132:  return r;",
          "133: }",
          "135: long kvm_arch_dev_ioctl(struct file *filp,",
          "136:    unsigned int ioctl, unsigned long arg)",
          "137: {",
          "138:  return -EINVAL;",
          "139: }",
          "141: int kvm_arch_set_memory_region(struct kvm *kvm,",
          "142:           struct kvm_userspace_memory_region *mem,",
          "143:           struct kvm_memory_slot old,",
          "144:           int user_alloc)",
          "145: {",
          "146:  return 0;",
          "147: }",
          "149: int kvm_arch_prepare_memory_region(struct kvm *kvm,",
          "150:        struct kvm_memory_slot *memslot,",
          "151:        struct kvm_memory_slot old,",
          "152:        struct kvm_userspace_memory_region *mem,",
          "153:        int user_alloc)",
          "154: {",
          "155:  return 0;",
          "156: }",
          "158: void kvm_arch_commit_memory_region(struct kvm *kvm,",
          "159:        struct kvm_userspace_memory_region *mem,",
          "160:        struct kvm_memory_slot old,",
          "161:        int user_alloc)",
          "162: {",
          "163: }",
          "165: void kvm_arch_flush_shadow_all(struct kvm *kvm)",
          "166: {",
          "167: }",
          "169: void kvm_arch_flush_shadow_memslot(struct kvm *kvm,",
          "170:        struct kvm_memory_slot *slot)",
          "171: {",
          "172: }",
          "174: struct kvm_vcpu *kvm_arch_vcpu_create(struct kvm *kvm, unsigned int id)",
          "175: {",
          "176:  int err;",
          "177:  struct kvm_vcpu *vcpu;",
          "179:  vcpu = kmem_cache_zalloc(kvm_vcpu_cache, GFP_KERNEL);",
          "180:  if (!vcpu) {",
          "181:   err = -ENOMEM;",
          "182:   goto out;",
          "183:  }",
          "185:  err = kvm_vcpu_init(vcpu, kvm, id);",
          "186:  if (err)",
          "187:   goto free_vcpu;",
          "189:  return vcpu;",
          "190: free_vcpu:",
          "191:  kmem_cache_free(kvm_vcpu_cache, vcpu);",
          "192: out:",
          "193:  return ERR_PTR(err);",
          "194: }",
          "196: int kvm_arch_vcpu_postcreate(struct kvm_vcpu *vcpu)",
          "197: {",
          "198:  return 0;",
          "199: }",
          "201: void kvm_arch_vcpu_free(struct kvm_vcpu *vcpu)",
          "202: {",
          "203: }",
          "205: void kvm_arch_vcpu_destroy(struct kvm_vcpu *vcpu)",
          "206: {",
          "207:  kvm_arch_vcpu_free(vcpu);",
          "208: }",
          "210: int kvm_cpu_has_pending_timer(struct kvm_vcpu *vcpu)",
          "211: {",
          "212:  return 0;",
          "213: }",
          "215: int __attribute_const__ kvm_target_cpu(void)",
          "216: {",
          "217:  unsigned long implementor = read_cpuid_implementor();",
          "218:  unsigned long part_number = read_cpuid_part_number();",
          "220:  if (implementor != ARM_CPU_IMP_ARM)",
          "221:   return -EINVAL;",
          "223:  switch (part_number) {",
          "224:  case ARM_CPU_PART_CORTEX_A15:",
          "225:   return KVM_ARM_TARGET_CORTEX_A15;",
          "226:  default:",
          "227:   return -EINVAL;",
          "228:  }",
          "229: }",
          "231: int kvm_arch_vcpu_init(struct kvm_vcpu *vcpu)",
          "232: {",
          "233:  return 0;",
          "234: }",
          "236: void kvm_arch_vcpu_uninit(struct kvm_vcpu *vcpu)",
          "237: {",
          "238: }",
          "240: void kvm_arch_vcpu_load(struct kvm_vcpu *vcpu, int cpu)",
          "241: {",
          "242: }",
          "244: void kvm_arch_vcpu_put(struct kvm_vcpu *vcpu)",
          "245: {",
          "246: }",
          "248: int kvm_arch_vcpu_ioctl_set_guest_debug(struct kvm_vcpu *vcpu,",
          "249:      struct kvm_guest_debug *dbg)",
          "250: {",
          "251:  return -EINVAL;",
          "252: }",
          "255: int kvm_arch_vcpu_ioctl_get_mpstate(struct kvm_vcpu *vcpu,",
          "256:         struct kvm_mp_state *mp_state)",
          "257: {",
          "258:  return -EINVAL;",
          "259: }",
          "261: int kvm_arch_vcpu_ioctl_set_mpstate(struct kvm_vcpu *vcpu,",
          "262:         struct kvm_mp_state *mp_state)",
          "263: {",
          "264:  return -EINVAL;",
          "265: }",
          "267: int kvm_arch_vcpu_runnable(struct kvm_vcpu *v)",
          "268: {",
          "269:  return 0;",
          "270: }",
          "272: int kvm_arch_vcpu_ioctl_run(struct kvm_vcpu *vcpu, struct kvm_run *run)",
          "273: {",
          "274:  return -EINVAL;",
          "275: }",
          "277: long kvm_arch_vcpu_ioctl(struct file *filp,",
          "278:     unsigned int ioctl, unsigned long arg)",
          "279: {",
          "280:  struct kvm_vcpu *vcpu = filp->private_data;",
          "281:  void __user *argp = (void __user *)arg;",
          "283:  switch (ioctl) {",
          "284:  case KVM_ARM_VCPU_INIT: {",
          "285:   struct kvm_vcpu_init init;",
          "287:   if (copy_from_user(&init, argp, sizeof(init)))",
          "288:    return -EFAULT;",
          "290:   return kvm_vcpu_set_target(vcpu, &init);",
          "292:  }",
          "293:  case KVM_SET_ONE_REG:",
          "294:  case KVM_GET_ONE_REG: {",
          "295:   struct kvm_one_reg reg;",
          "296:   if (copy_from_user(&reg, argp, sizeof(reg)))",
          "297:    return -EFAULT;",
          "298:   if (ioctl == KVM_SET_ONE_REG)",
          "299:    return kvm_arm_set_reg(vcpu, &reg);",
          "300:   else",
          "301:    return kvm_arm_get_reg(vcpu, &reg);",
          "302:  }",
          "303:  case KVM_GET_REG_LIST: {",
          "304:   struct kvm_reg_list __user *user_list = argp;",
          "305:   struct kvm_reg_list reg_list;",
          "306:   unsigned n;",
          "308:   if (copy_from_user(&reg_list, user_list, sizeof(reg_list)))",
          "309:    return -EFAULT;",
          "310:   n = reg_list.n;",
          "311:   reg_list.n = kvm_arm_num_regs(vcpu);",
          "312:   if (copy_to_user(user_list, &reg_list, sizeof(reg_list)))",
          "313:    return -EFAULT;",
          "314:   if (n < reg_list.n)",
          "315:    return -E2BIG;",
          "316:   return kvm_arm_copy_reg_indices(vcpu, user_list->reg);",
          "317:  }",
          "318:  default:",
          "319:   return -EINVAL;",
          "320:  }",
          "321: }",
          "323: int kvm_vm_ioctl_get_dirty_log(struct kvm *kvm, struct kvm_dirty_log *log)",
          "324: {",
          "325:  return -EINVAL;",
          "326: }",
          "328: long kvm_arch_vm_ioctl(struct file *filp,",
          "329:          unsigned int ioctl, unsigned long arg)",
          "330: {",
          "331:  return -EINVAL;",
          "332: }",
          "334: int kvm_arch_init(void *opaque)",
          "335: {",
          "336:  return 0;",
          "337: }",
          "340: void kvm_arch_exit(void)",
          "341: {",
          "342: }",
          "344: static int arm_init(void)",
          "345: {",
          "346:  int rc = kvm_init(NULL, sizeof(struct kvm_vcpu), 0, THIS_MODULE);",
          "347:  return rc;",
          "348: }",
          "350: module_init(arm_init);",
          "",
          "---------------"
        ],
        "arch/arm/kvm/coproc.c||arch/arm/kvm/coproc.c": [
          "File: arch/arm/kvm/coproc.c -> arch/arm/kvm/coproc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <linux/kvm_host.h>",
          "21: void kvm_reset_coprocs(struct kvm_vcpu *vcpu)",
          "22: {",
          "23: }",
          "",
          "---------------"
        ],
        "arch/arm/kvm/emulate.c||arch/arm/kvm/emulate.c": [
          "File: arch/arm/kvm/emulate.c -> arch/arm/kvm/emulate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <asm/kvm_emulate.h>",
          "21: #define VCPU_NR_MODES  6",
          "22: #define VCPU_REG_OFFSET_USR 0",
          "23: #define VCPU_REG_OFFSET_FIQ 1",
          "24: #define VCPU_REG_OFFSET_IRQ 2",
          "25: #define VCPU_REG_OFFSET_SVC 3",
          "26: #define VCPU_REG_OFFSET_ABT 4",
          "27: #define VCPU_REG_OFFSET_UND 5",
          "28: #define REG_OFFSET(_reg) \\",
          "29:  (offsetof(struct kvm_regs, _reg) / sizeof(u32))",
          "31: #define USR_REG_OFFSET(_num) REG_OFFSET(usr_regs.uregs[_num])",
          "33: static const unsigned long vcpu_reg_offsets[VCPU_NR_MODES][15] = {",
          "35:  [VCPU_REG_OFFSET_USR] = {",
          "36:   USR_REG_OFFSET(0), USR_REG_OFFSET(1), USR_REG_OFFSET(2),",
          "37:   USR_REG_OFFSET(3), USR_REG_OFFSET(4), USR_REG_OFFSET(5),",
          "38:   USR_REG_OFFSET(6), USR_REG_OFFSET(7), USR_REG_OFFSET(8),",
          "39:   USR_REG_OFFSET(9), USR_REG_OFFSET(10), USR_REG_OFFSET(11),",
          "40:   USR_REG_OFFSET(12), USR_REG_OFFSET(13), USR_REG_OFFSET(14),",
          "41:  },",
          "44:  [VCPU_REG_OFFSET_FIQ] = {",
          "45:   USR_REG_OFFSET(0), USR_REG_OFFSET(1), USR_REG_OFFSET(2),",
          "46:   USR_REG_OFFSET(3), USR_REG_OFFSET(4), USR_REG_OFFSET(5),",
          "47:   USR_REG_OFFSET(6), USR_REG_OFFSET(7),",
          "55:  },",
          "58:  [VCPU_REG_OFFSET_IRQ] = {",
          "59:   USR_REG_OFFSET(0), USR_REG_OFFSET(1), USR_REG_OFFSET(2),",
          "60:   USR_REG_OFFSET(3), USR_REG_OFFSET(4), USR_REG_OFFSET(5),",
          "61:   USR_REG_OFFSET(6), USR_REG_OFFSET(7), USR_REG_OFFSET(8),",
          "62:   USR_REG_OFFSET(9), USR_REG_OFFSET(10), USR_REG_OFFSET(11),",
          "63:   USR_REG_OFFSET(12),",
          "66:  },",
          "69:  [VCPU_REG_OFFSET_SVC] = {",
          "70:   USR_REG_OFFSET(0), USR_REG_OFFSET(1), USR_REG_OFFSET(2),",
          "71:   USR_REG_OFFSET(3), USR_REG_OFFSET(4), USR_REG_OFFSET(5),",
          "72:   USR_REG_OFFSET(6), USR_REG_OFFSET(7), USR_REG_OFFSET(8),",
          "73:   USR_REG_OFFSET(9), USR_REG_OFFSET(10), USR_REG_OFFSET(11),",
          "74:   USR_REG_OFFSET(12),",
          "77:  },",
          "80:  [VCPU_REG_OFFSET_ABT] = {",
          "81:   USR_REG_OFFSET(0), USR_REG_OFFSET(1), USR_REG_OFFSET(2),",
          "82:   USR_REG_OFFSET(3), USR_REG_OFFSET(4), USR_REG_OFFSET(5),",
          "83:   USR_REG_OFFSET(6), USR_REG_OFFSET(7), USR_REG_OFFSET(8),",
          "84:   USR_REG_OFFSET(9), USR_REG_OFFSET(10), USR_REG_OFFSET(11),",
          "85:   USR_REG_OFFSET(12),",
          "88:  },",
          "91:  [VCPU_REG_OFFSET_UND] = {",
          "92:   USR_REG_OFFSET(0), USR_REG_OFFSET(1), USR_REG_OFFSET(2),",
          "93:   USR_REG_OFFSET(3), USR_REG_OFFSET(4), USR_REG_OFFSET(5),",
          "94:   USR_REG_OFFSET(6), USR_REG_OFFSET(7), USR_REG_OFFSET(8),",
          "95:   USR_REG_OFFSET(9), USR_REG_OFFSET(10), USR_REG_OFFSET(11),",
          "96:   USR_REG_OFFSET(12),",
          "99:  },",
          "100: };",
          "106: u32 *vcpu_reg(struct kvm_vcpu *vcpu, u8 reg_num)",
          "107: {",
          "108:  u32 *reg_array = (u32 *)&vcpu->arch.regs;",
          "109:  u32 mode = *vcpu_cpsr(vcpu) & MODE_MASK;",
          "111:  switch (mode) {",
          "112:  case USR_MODE...SVC_MODE:",
          "114:   break;",
          "116:  case ABT_MODE:",
          "117:   mode = VCPU_REG_OFFSET_ABT;",
          "118:   break;",
          "120:  case UND_MODE:",
          "121:   mode = VCPU_REG_OFFSET_UND;",
          "122:   break;",
          "124:  case SYSTEM_MODE:",
          "125:   mode = VCPU_REG_OFFSET_USR;",
          "126:   break;",
          "128:  default:",
          "129:   BUG();",
          "130:  }",
          "132:  return reg_array + vcpu_reg_offsets[mode][reg_num];",
          "133: }",
          "138: u32 *vcpu_spsr(struct kvm_vcpu *vcpu)",
          "139: {",
          "140:  u32 mode = *vcpu_cpsr(vcpu) & MODE_MASK;",
          "141:  switch (mode) {",
          "142:  case SVC_MODE:",
          "143:   return &vcpu->arch.regs.KVM_ARM_SVC_spsr;",
          "144:  case ABT_MODE:",
          "145:   return &vcpu->arch.regs.KVM_ARM_ABT_spsr;",
          "146:  case UND_MODE:",
          "147:   return &vcpu->arch.regs.KVM_ARM_UND_spsr;",
          "148:  case IRQ_MODE:",
          "149:   return &vcpu->arch.regs.KVM_ARM_IRQ_spsr;",
          "150:  case FIQ_MODE:",
          "151:   return &vcpu->arch.regs.KVM_ARM_FIQ_spsr;",
          "152:  default:",
          "153:   BUG();",
          "154:  }",
          "155: }",
          "",
          "---------------"
        ],
        "arch/arm/kvm/guest.c||arch/arm/kvm/guest.c": [
          "File: arch/arm/kvm/guest.c -> arch/arm/kvm/guest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <linux/errno.h>",
          "20: #include <linux/err.h>",
          "21: #include <linux/kvm_host.h>",
          "22: #include <linux/module.h>",
          "23: #include <linux/vmalloc.h>",
          "24: #include <linux/fs.h>",
          "25: #include <asm/uaccess.h>",
          "26: #include <asm/kvm.h>",
          "27: #include <asm/kvm_asm.h>",
          "28: #include <asm/kvm_emulate.h>",
          "30: #define VM_STAT(x) { #x, offsetof(struct kvm, stat.x), KVM_STAT_VM }",
          "31: #define VCPU_STAT(x) { #x, offsetof(struct kvm_vcpu, stat.x), KVM_STAT_VCPU }",
          "33: struct kvm_stats_debugfs_item debugfs_entries[] = {",
          "34:  { NULL }",
          "35: };",
          "37: int kvm_arch_vcpu_setup(struct kvm_vcpu *vcpu)",
          "38: {",
          "39:  return 0;",
          "40: }",
          "42: static u64 core_reg_offset_from_id(u64 id)",
          "43: {",
          "44:  return id & ~(KVM_REG_ARCH_MASK | KVM_REG_SIZE_MASK | KVM_REG_ARM_CORE);",
          "45: }",
          "47: static int get_core_reg(struct kvm_vcpu *vcpu, const struct kvm_one_reg *reg)",
          "48: {",
          "49:  u32 __user *uaddr = (u32 __user *)(long)reg->addr;",
          "50:  struct kvm_regs *regs = &vcpu->arch.regs;",
          "51:  u64 off;",
          "53:  if (KVM_REG_SIZE(reg->id) != 4)",
          "54:   return -ENOENT;",
          "57:  off = core_reg_offset_from_id(reg->id);",
          "58:  if (off >= sizeof(*regs) / KVM_REG_SIZE(reg->id))",
          "59:   return -ENOENT;",
          "61:  return put_user(((u32 *)regs)[off], uaddr);",
          "62: }",
          "64: static int set_core_reg(struct kvm_vcpu *vcpu, const struct kvm_one_reg *reg)",
          "65: {",
          "66:  u32 __user *uaddr = (u32 __user *)(long)reg->addr;",
          "67:  struct kvm_regs *regs = &vcpu->arch.regs;",
          "68:  u64 off, val;",
          "70:  if (KVM_REG_SIZE(reg->id) != 4)",
          "71:   return -ENOENT;",
          "74:  off = core_reg_offset_from_id(reg->id);",
          "75:  if (off >= sizeof(*regs) / KVM_REG_SIZE(reg->id))",
          "76:   return -ENOENT;",
          "78:  if (get_user(val, uaddr) != 0)",
          "79:   return -EFAULT;",
          "81:  if (off == KVM_REG_ARM_CORE_REG(usr_regs.ARM_cpsr)) {",
          "82:   unsigned long mode = val & MODE_MASK;",
          "83:   switch (mode) {",
          "84:   case USR_MODE:",
          "85:   case FIQ_MODE:",
          "86:   case IRQ_MODE:",
          "87:   case SVC_MODE:",
          "88:   case ABT_MODE:",
          "89:   case UND_MODE:",
          "90:    break;",
          "91:   default:",
          "92:    return -EINVAL;",
          "93:   }",
          "94:  }",
          "96:  ((u32 *)regs)[off] = val;",
          "97:  return 0;",
          "98: }",
          "100: int kvm_arch_vcpu_ioctl_get_regs(struct kvm_vcpu *vcpu, struct kvm_regs *regs)",
          "101: {",
          "102:  return -EINVAL;",
          "103: }",
          "105: int kvm_arch_vcpu_ioctl_set_regs(struct kvm_vcpu *vcpu, struct kvm_regs *regs)",
          "106: {",
          "107:  return -EINVAL;",
          "108: }",
          "110: static unsigned long num_core_regs(void)",
          "111: {",
          "112:  return sizeof(struct kvm_regs) / sizeof(u32);",
          "113: }",
          "120: unsigned long kvm_arm_num_regs(struct kvm_vcpu *vcpu)",
          "121: {",
          "122:  return num_core_regs();",
          "123: }",
          "130: int kvm_arm_copy_reg_indices(struct kvm_vcpu *vcpu, u64 __user *uindices)",
          "131: {",
          "132:  unsigned int i;",
          "133:  const u64 core_reg = KVM_REG_ARM | KVM_REG_SIZE_U32 | KVM_REG_ARM_CORE;",
          "135:  for (i = 0; i < sizeof(struct kvm_regs)/sizeof(u32); i++) {",
          "136:   if (put_user(core_reg | i, uindices))",
          "137:    return -EFAULT;",
          "138:   uindices++;",
          "139:  }",
          "141:  return 0;",
          "142: }",
          "144: int kvm_arm_get_reg(struct kvm_vcpu *vcpu, const struct kvm_one_reg *reg)",
          "145: {",
          "147:  if ((reg->id & ~KVM_REG_SIZE_MASK) >> 32 != KVM_REG_ARM >> 32)",
          "148:   return -EINVAL;",
          "151:  if ((reg->id & KVM_REG_ARM_COPROC_MASK) == KVM_REG_ARM_CORE)",
          "152:   return get_core_reg(vcpu, reg);",
          "154:  return -EINVAL;",
          "155: }",
          "157: int kvm_arm_set_reg(struct kvm_vcpu *vcpu, const struct kvm_one_reg *reg)",
          "158: {",
          "160:  if ((reg->id & ~KVM_REG_SIZE_MASK) >> 32 != KVM_REG_ARM >> 32)",
          "161:   return -EINVAL;",
          "164:  if ((reg->id & KVM_REG_ARM_COPROC_MASK) == KVM_REG_ARM_CORE)",
          "165:   return set_core_reg(vcpu, reg);",
          "167:  return -EINVAL;",
          "168: }",
          "170: int kvm_arch_vcpu_ioctl_get_sregs(struct kvm_vcpu *vcpu,",
          "171:       struct kvm_sregs *sregs)",
          "172: {",
          "173:  return -EINVAL;",
          "174: }",
          "176: int kvm_arch_vcpu_ioctl_set_sregs(struct kvm_vcpu *vcpu,",
          "177:       struct kvm_sregs *sregs)",
          "178: {",
          "179:  return -EINVAL;",
          "180: }",
          "182: int kvm_vcpu_set_target(struct kvm_vcpu *vcpu,",
          "183:    const struct kvm_vcpu_init *init)",
          "184: {",
          "185:  unsigned int i;",
          "188:  if (init->target != kvm_target_cpu())",
          "189:   return -EINVAL;",
          "191:  vcpu->arch.target = init->target;",
          "192:  bitmap_zero(vcpu->arch.features, KVM_VCPU_MAX_FEATURES);",
          "195:  for (i = 0; i < sizeof(init->features) * 8; i++) {",
          "196:   if (test_bit(i, (void *)init->features)) {",
          "197:    if (i >= KVM_VCPU_MAX_FEATURES)",
          "198:     return -ENOENT;",
          "199:    set_bit(i, vcpu->arch.features);",
          "200:   }",
          "201:  }",
          "204:  return kvm_reset_vcpu(vcpu);",
          "205: }",
          "207: int kvm_arch_vcpu_ioctl_get_fpu(struct kvm_vcpu *vcpu, struct kvm_fpu *fpu)",
          "208: {",
          "209:  return -EINVAL;",
          "210: }",
          "212: int kvm_arch_vcpu_ioctl_set_fpu(struct kvm_vcpu *vcpu, struct kvm_fpu *fpu)",
          "213: {",
          "214:  return -EINVAL;",
          "215: }",
          "217: int kvm_arch_vcpu_ioctl_translate(struct kvm_vcpu *vcpu,",
          "218:       struct kvm_translation *tr)",
          "219: {",
          "220:  return -EINVAL;",
          "221: }",
          "",
          "---------------"
        ],
        "arch/arm/kvm/init.S||arch/arm/kvm/init.S": [
          "File: arch/arm/kvm/init.S -> arch/arm/kvm/init.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <asm/asm-offsets.h>",
          "19: #include <asm/kvm_asm.h>",
          "",
          "---------------"
        ],
        "arch/arm/kvm/interrupts.S||arch/arm/kvm/interrupts.S": [
          "File: arch/arm/kvm/interrupts.S -> arch/arm/kvm/interrupts.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <asm/asm-offsets.h>",
          "19: #include <asm/kvm_asm.h>",
          "",
          "---------------"
        ],
        "arch/arm/kvm/mmu.c||arch/arm/kvm/mmu.c": [
          "File: arch/arm/kvm/mmu.c -> arch/arm/kvm/mmu.c"
        ],
        "arch/arm/kvm/reset.c||arch/arm/kvm/reset.c": [
          "File: arch/arm/kvm/reset.c -> arch/arm/kvm/reset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "18: #include <linux/compiler.h>",
          "19: #include <linux/errno.h>",
          "20: #include <linux/sched.h>",
          "21: #include <linux/kvm_host.h>",
          "22: #include <linux/kvm.h>",
          "24: #include <asm/unified.h>",
          "25: #include <asm/ptrace.h>",
          "26: #include <asm/cputype.h>",
          "27: #include <asm/kvm_arm.h>",
          "28: #include <asm/kvm_coproc.h>",
          "34: static const int a15_max_cpu_idx = 3;",
          "36: static struct kvm_regs a15_regs_reset = {",
          "37:  .usr_regs.ARM_cpsr = SVC_MODE | PSR_A_BIT | PSR_I_BIT | PSR_F_BIT,",
          "38: };",
          "52: int kvm_reset_vcpu(struct kvm_vcpu *vcpu)",
          "53: {",
          "54:  struct kvm_regs *cpu_reset;",
          "56:  switch (vcpu->arch.target) {",
          "57:  case KVM_ARM_TARGET_CORTEX_A15:",
          "58:   if (vcpu->vcpu_id > a15_max_cpu_idx)",
          "59:    return -EINVAL;",
          "60:   cpu_reset = &a15_regs_reset;",
          "61:   vcpu->arch.midr = read_cpuid_id();",
          "62:   break;",
          "63:  default:",
          "64:   return -ENODEV;",
          "65:  }",
          "68:  memcpy(&vcpu->arch.regs, cpu_reset, sizeof(vcpu->arch.regs));",
          "71:  kvm_reset_coprocs(vcpu);",
          "73:  return 0;",
          "74: }",
          "",
          "---------------"
        ],
        "arch/arm/kvm/trace.h||arch/arm/kvm/trace.h": [
          "File: arch/arm/kvm/trace.h -> arch/arm/kvm/trace.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #if !defined(_TRACE_KVM_H) || defined(TRACE_HEADER_MULTI_READ)",
          "2: #define _TRACE_KVM_H",
          "4: #include <linux/tracepoint.h>",
          "6: #undef TRACE_SYSTEM",
          "7: #define TRACE_SYSTEM kvm",
          "12: TRACE_EVENT(kvm_entry,",
          "13:  TP_PROTO(unsigned long vcpu_pc),",
          "14:  TP_ARGS(vcpu_pc),",
          "16:  TP_STRUCT__entry(",
          "17:   __field( unsigned long, vcpu_pc  )",
          "18:  ),",
          "20:  TP_fast_assign(",
          "21:   __entry->vcpu_pc  = vcpu_pc;",
          "22:  ),",
          "24:  TP_printk(\"PC: 0x%08lx\", __entry->vcpu_pc)",
          "25: );",
          "27: TRACE_EVENT(kvm_exit,",
          "28:  TP_PROTO(unsigned long vcpu_pc),",
          "29:  TP_ARGS(vcpu_pc),",
          "31:  TP_STRUCT__entry(",
          "32:   __field( unsigned long, vcpu_pc  )",
          "33:  ),",
          "35:  TP_fast_assign(",
          "36:   __entry->vcpu_pc  = vcpu_pc;",
          "37:  ),",
          "39:  TP_printk(\"PC: 0x%08lx\", __entry->vcpu_pc)",
          "40: );",
          "46: #undef TRACE_INCLUDE_PATH",
          "47: #define TRACE_INCLUDE_PATH arch/arm/kvm",
          "48: #undef TRACE_INCLUDE_FILE",
          "49: #define TRACE_INCLUDE_FILE trace",
          "52: #include <trace/define_trace.h>",
          "",
          "---------------"
        ],
        "include/uapi/linux/kvm.h||include/uapi/linux/kvm.h": [
          "File: include/uapi/linux/kvm.h -> include/uapi/linux/kvm.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "764: #define KVM_REG_SIZE_U512 0x0060000000000000ULL",
          "765: #define KVM_REG_SIZE_U1024 0x0070000000000000ULL",
          "767: struct kvm_one_reg {",
          "768:  __u64 id;",
          "769:  __u64 addr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "767: struct kvm_reg_list {",
          "769:  __u64 reg[0];",
          "770: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "932: #define KVM_SET_ONE_REG    _IOW(KVMIO,  0xac, struct kvm_one_reg)",
          "934: #define KVM_KVMCLOCK_CTRL   _IO(KVMIO,   0xad)",
          "936: #define KVM_DEV_ASSIGN_ENABLE_IOMMU (1 << 0)",
          "937: #define KVM_DEV_ASSIGN_PCI_2_3  (1 << 1)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "940: #define KVM_ARM_VCPU_INIT   _IOW(KVMIO,  0xae, struct kvm_vcpu_init)",
          "941: #define KVM_GET_REG_LIST   _IOWR(KVMIO, 0xb0, struct kvm_reg_list)",
          "",
          "---------------"
        ]
      }
    }
  ]
}