{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "746a1515b2e32fb90afe722f79d85c15d7b04346",
      "candidate_info": {
        "commit_hash": "746a1515b2e32fb90afe722f79d85c15d7b04346",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/746a1515b2e32fb90afe722f79d85c15d7b04346",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c",
          "src/pager.h"
        ],
        "message": "Remove the sqlite3PagerUseWal() routine which was made obsolete by the [81629ba91475938b6ad] change.\n\nFossilOrigin-Name: 4331b4990cbc1221d94fadd376dfc6efe83f67836aef00912126da4c924bf659",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c",
          "src/pager.h||src/pager.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9c9c46dcbe92aeabe3d5675bb69681b6dfd53798bc67e6a2ceba67ed3c4fb0af",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "849: }",
          "850: #endif",
          "865: #ifndef SQLITE_OMIT_WAL",
          "866: # define pagerUseWal(x) ((x)->pWal!=0)",
          "867: #else",
          "",
          "[Removed Lines]",
          "856: #if !defined(SQLITE_OMIT_WAL) && defined(SQLITE_DIRECT_OVERFLOW_READ)",
          "857: int sqlite3PagerUseWal(Pager *pPager, Pgno pgno){",
          "858:   u32 iRead = 0;",
          "859:   int rc;",
          "860:   if( pPager->pWal==0 ) return 0;",
          "861:   rc = sqlite3WalFindFrame(pPager->pWal, pgno, &iRead);",
          "862:   return rc || iRead;",
          "863: }",
          "864: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.h||src/pager.h": [
          "File: src/pager.h -> src/pager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:   int sqlite3PagerWalCallback(Pager *pPager);",
          "180:   int sqlite3PagerOpenWal(Pager *pPager, int *pisOpen);",
          "181:   int sqlite3PagerCloseWal(Pager *pPager, sqlite3*);",
          "185: # ifdef SQLITE_ENABLE_SNAPSHOT",
          "186:   int sqlite3PagerSnapshotGet(Pager *pPager, sqlite3_snapshot **ppSnapshot);",
          "187:   int sqlite3PagerSnapshotOpen(Pager *pPager, sqlite3_snapshot *pSnapshot);",
          "",
          "[Removed Lines]",
          "182: # ifdef SQLITE_DIRECT_OVERFLOW_READ",
          "183:   int sqlite3PagerUseWal(Pager *pPager, Pgno);",
          "184: # endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:   int sqlite3PagerSnapshotCheck(Pager *pPager, sqlite3_snapshot *pSnapshot);",
          "190:   void sqlite3PagerSnapshotUnlock(Pager *pPager);",
          "191: # endif",
          "194: #endif",
          "196: #ifdef SQLITE_DIRECT_OVERFLOW_READ",
          "",
          "[Removed Lines]",
          "192: #else",
          "193: # define sqlite3PagerUseWal(x,y) 0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56b99ebc3245ce03f4242849284656c9d32aba05",
      "candidate_info": {
        "commit_hash": "56b99ebc3245ce03f4242849284656c9d32aba05",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/56b99ebc3245ce03f4242849284656c9d32aba05",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/corruptL.test"
        ],
        "message": "Add test case for the previous commit.\n\nFossilOrigin-Name: 197edb235b785c68fda7be788efbc61137d9452886599415a927b959ade93c65",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f21c6f1343edc4ba68f9f8e68caac34da0d1c651526ecaf61c0e2d66593a555e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "578:   INSERT INTO t1(b) VALUES(zeroblob(40000));",
          "579: } {1 {database disk image is malformed}}",
          "583: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "581: #-------------------------------------------------------------------------",
          "582: reset_db",
          "583: do_test 6.0 {",
          "584:   sqlite3 db {}",
          "585:   db deserialize [decode_hexdb {",
          "586: | size 20480 pagesize 4096 filename crash-d260f001fa015c.db",
          "587: | page 1 offset 0",
          "588: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "589: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 05   .....@  ........",
          "590: |     32: 00 00 00 00 00 ff ff f0 00 00 00 02 00 00 00 04   ................",
          "591: |     48: 00 00 00 00 00 00 00 64 00 00 00 01 00 00 00 00   .......d........",
          "592: |     96: 00 00 00 00 0d 0f f8 00 04 0e ce 00 0f 4c 0f d3   .............L..",
          "593: |    112: 0e fa 0e ce 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "594: |   3776: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2a 04   ..............*.",
          "595: |   3792: 06 17 13 11 01 3f 69 6e 64 65 78 74 31 62 74 31   .....?indext1bt1",
          "596: |   3808: 05 43 52 45 41 54 45 20 49 4e 44 45 58 20 74 31   .CREATE INDEX t1",
          "597: |   3824: 62 20 4f 4e 20 74 31 28 62 29 50 03 06 17 2b 2b   b ON t1(b)P...++",
          "598: |   3840: 01 59 74 61 62 6c 65 73 71 6c 69 74 65 5f 73 65   .Ytablesqlite_se",
          "599: |   3856: 71 75 65 6e 63 65 73 71 6c 69 74 65 5f 73 65 71   quencesqlite_seq",
          "600: |   3872: 75 65 6e 63 65 04 43 52 45 41 54 45 20 54 41 42   uence.CREATE TAB",
          "601: |   3888: 4c 45 20 73 71 6c 69 74 65 5f 73 65 71 75 65 6e   LE sqlite_sequen",
          "602: |   3904: 63 65 28 6e 61 6d 65 2c 73 65 71 29 81 04 01 07   ce(name,seq)....",
          "603: |   3920: 17 11 11 01 81 73 74 61 c2 6c 65 74 31 74 31 02   .....sta.let1t1.",
          "604: |   3936: 43 52 45 41 54 45 20 54 41 42 4c 45 20 74 31 28   CREATE TABLE t1(",
          "605: |   3952: 61 20 52 45 41 4c 20 4e 4f 54 20 4e 55 4c 4c 20   a REAL NOT NULL",
          "606: |   3968: 44 45 46 41 55 4c 54 28 32 35 2b 33 32 29 2c 62   DEFAULT(25+32),b",
          "607: |   3984: 20 46 4c 4f 41 54 2c 63 20 44 4f 55 42 4c 45 20    FLOAT,c DOUBLE",
          "608: |   4000: 55 4e 49 51 55 45 2c 0a 64 20 43 4c 4f 42 2c 65   UNIQUE,.d CLOB,e",
          "609: |   4016: 20 49 4e 54 45 47 45 52 20 50 52 49 4d 41 52 59    INTEGER PRIMARY",
          "610: |   4032: 20 4b 45 59 20 41 55 54 4f 49 4e 43 52 45 4d 45    KEY AUTOINCREME",
          "611: |   4048: 4e 54 29 23 02 06 17 37 11 01 00 69 6e 64 65 78   NT)#...7...index",
          "612: |   4064: 73 71 6c 69 74 65 5f 61 75 74 6f 69 6e 64 65 78   sqlite_autoindex",
          "613: |   4080: 5f 74 31 5f 31 74 31 05 00 00 00 08 00 00 00 00   _t1_1t1.........",
          "614: | page 2 offset 4096",
          "615: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "616: | page 3 offset 8192",
          "617: |      0: 0a 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "618: | page 4 offset 12288",
          "619: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "620: | page 5 offset 16384",
          "621: |      0: 0a 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "622: | end crash-d260f001fa015c.db",
          "623: }]} {}",
          "625: do_catchsql_test 6.1 {",
          "626:   BEGIN;",
          "627:     INSERT INTO t1(b) VALUES(1);",
          "628:     INSERT INTO t1(b) VALUES(2);",
          "629:   COMMIT;",
          "630: } {1 {malformed database schema (t1b) - invalid root page}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07891f0294f0678f5ef6b92aa903336bcdcf725c",
      "candidate_info": {
        "commit_hash": "07891f0294f0678f5ef6b92aa903336bcdcf725c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/07891f0294f0678f5ef6b92aa903336bcdcf725c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeapi.c"
        ],
        "message": "Remove a stray tab from the source code.\n\nFossilOrigin-Name: 0ada58e9303d53aba8bdc37abe5904aa40e91f80e247eb51cb1192387b0d661c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeapi.c||src/vdbeapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cd084427319394386844d6651479256a2fd57a412fccb79ba53172ce76693eb1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:   assert( p->zSql!=0 );",
          "68:   sqlite3OsCurrentTimeInt64(db->pVfs, &iNow);",
          "69:   iElapse = (iNow - p->startTime)*1000000;",
          "71:   if( db->xProfile ){",
          "72:     db->xProfile(db->pProfileArg, p->zSql, iElapse);",
          "73:   }",
          "",
          "[Removed Lines]",
          "70: #ifndef SQLITE_OMIT_DEPRECATED",
          "",
          "[Added Lines]",
          "70: #ifndef SQLITE_OMIT_DEPRECATED",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "de7109e61b4ff3b632250cdcd962a1a440609549",
      "candidate_info": {
        "commit_hash": "de7109e61b4ff3b632250cdcd962a1a440609549",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/de7109e61b4ff3b632250cdcd962a1a440609549",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h",
          "src/vdbeapi.c",
          "test/index.test"
        ],
        "message": "Ensure that the typeof() function always returns SQLITE_FLOAT for floating point values even when the value is stored as an integer to save space.\n\nFossilOrigin-Name: 48889530a9de22fee536edfd1627be62396ed18d842d5fd6d91e010b4337be95",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeapi.c||src/vdbeapi.c",
          "test/index.test||test/index.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 005a169406ccea6e3cc42271620870d985e8bada1ad49a63656003db4911cb51",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:   };",
          "270:   return aType[pVal->flags&MEM_AffMask];",
          "271: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "302: #ifdef SQLITE_DEBUG",
          "303:   {",
          "304:     int eType = SQLITE_BLOB;",
          "305:     if( pVal->flags & MEM_Null ){",
          "306:       eType = SQLITE_NULL;",
          "307:     }else if( pVal->flags & MEM_Int ){",
          "308:       eType = (pVal->flags & MEM_IntReal) ? SQLITE_FLOAT : SQLITE_INTEGER;",
          "309:     }else if( pVal->flags & MEM_Real ){",
          "310:       eType = SQLITE_FLOAT;",
          "311:     }else if( pVal->flags & MEM_Str ){",
          "312:       eType = SQLITE_TEXT;",
          "313:     }",
          "314:     assert( eType == aType[pVal->flags&MEM_AffMask] );",
          "315:   }",
          "316: #endif",
          "",
          "---------------"
        ],
        "test/index.test||test/index.test": [
          "File: test/index.test -> test/index.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "757:   SELECT * FROM t1;",
          "758:   REINDEX;",
          "759: } {0.0 1.0 1.0 1.0}",
          "761: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "760: do_execsql_test index-23.1 {",
          "761:   DROP TABLE t1;",
          "762:   CREATE TABLE t1(a REAL);",
          "763:   CREATE UNIQUE INDEX index_0 ON t1(TYPEOF(a));",
          "764:   INSERT OR IGNORE INTO t1(a) VALUES (0.1),(FALSE);",
          "765:   SELECT * FROM t1;",
          "766:   REINDEX;",
          "767: } {0.1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "169f077e07f312172cb0e5d6cb291b91b61d9164",
      "candidate_info": {
        "commit_hash": "169f077e07f312172cb0e5d6cb291b91b61d9164",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/169f077e07f312172cb0e5d6cb291b91b61d9164",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbeapi.c",
          "src/vdbeaux.c",
          "src/vdbemem.c",
          "src/vdbetrace.c"
        ],
        "message": "Make MEM_IntReal a completely independent type, meaning a floating point value stored as an integer.  This fixes a problem with arithmetic within arguments to string functions on indexes of expressions.  But it is a big change and needs lots of new testcase() macros for MC/DC and so it is initially put on this branch.\n\nFossilOrigin-Name: dba836e31cb29d339b4520acb06188a892a52e45c50aba9742966b01108e251a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeapi.c||src/vdbeapi.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbemem.c||src/vdbemem.c",
          "src/vdbetrace.c||src/vdbetrace.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 48889530a9de22fee536edfd1627be62396ed18d842d5fd6d91e010b4337be95",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "295:   double rValue;",
          "296:   i64 iValue;",
          "297:   u8 enc = pRec->enc;",
          "299:   if( sqlite3AtoF(pRec->z, &rValue, pRec->n, enc)==0 ) return;",
          "300:   if( 0==sqlite3Atoi64(pRec->z, &iValue, pRec->n, enc) ){",
          "301:     pRec->u.i = iValue;",
          "",
          "[Removed Lines]",
          "298:   assert( (pRec->flags & (MEM_Str|MEM_Int|MEM_Real))==MEM_Str );",
          "",
          "[Added Lines]",
          "298:   assert( (pRec->flags & (MEM_Str|MEM_Int|MEM_Real|MEM_IntReal))==MEM_Str );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "356:         sqlite3VdbeMemStringify(pRec, enc, 1);",
          "357:       }",
          "358:     }",
          "360:   }",
          "361: }",
          "",
          "[Removed Lines]",
          "355:       if( (pRec->flags&(MEM_Real|MEM_Int)) ){",
          "359:     pRec->flags &= ~(MEM_Real|MEM_Int);",
          "",
          "[Added Lines]",
          "355:       if( (pRec->flags&(MEM_Real|MEM_Int|MEM_IntReal)) ){",
          "359:     pRec->flags &= ~(MEM_Real|MEM_Int|MEM_IntReal);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "397: static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){",
          "399:   assert( (pMem->flags & (MEM_Str|MEM_Blob))!=0 );",
          "400:   ExpandBlob(pMem);",
          "401:   if( sqlite3AtoF(pMem->z, &pMem->u.r, pMem->n, pMem->enc)==0 ){",
          "",
          "[Removed Lines]",
          "398:   assert( (pMem->flags & (MEM_Int|MEM_Real))==0 );",
          "",
          "[Added Lines]",
          "398:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal))==0 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "417: static u16 numericType(Mem *pMem){",
          "420:   }",
          "421:   if( pMem->flags & (MEM_Str|MEM_Blob) ){",
          "422:     return computeNumericType(pMem);",
          "",
          "[Removed Lines]",
          "418:   if( pMem->flags & (MEM_Int|MEM_Real) ){",
          "419:     return pMem->flags & (MEM_Int|MEM_Real);",
          "",
          "[Added Lines]",
          "418:   if( pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal) ){",
          "419:     return pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "514:     printf(p->flags & MEM_Zero ? \" NULL-nochng\" : \" NULL\");",
          "515:   }else if( (p->flags & (MEM_Int|MEM_Str))==(MEM_Int|MEM_Str) ){",
          "516:     printf(\" si:%lld\", p->u.i);",
          "518:     printf(\" ir:%lld\", p->u.i);",
          "519:   }else if( p->flags & MEM_Int ){",
          "520:     printf(\" i:%lld\", p->u.i);",
          "",
          "[Removed Lines]",
          "517:   }else if( (p->flags & (MEM_Int|MEM_IntReal))==(MEM_Int|MEM_IntReal) ){",
          "",
          "[Added Lines]",
          "517:   }else if( (p->flags & (MEM_IntReal))!=0 ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1630:     }",
          "1631:     pOut->u.r = rB;",
          "1632:     MemSetTypeFlag(pOut, MEM_Real);",
          "1634:       sqlite3VdbeIntegerAffinity(pOut);",
          "1635:     }",
          "1636: #endif",
          "",
          "[Removed Lines]",
          "1633:     if( ((type1|type2)&MEM_Real)==0 && !bIntint ){",
          "",
          "[Added Lines]",
          "1633:     if( ((type1|type2)&(MEM_Real|MEM_IntReal))==0 && !bIntint ){",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1803:   pIn1 = &aMem[pOp->p1];",
          "1805:     sqlite3VdbeMemRealify(pIn1);",
          "1806:   }",
          "1807:   break;",
          "",
          "[Removed Lines]",
          "1804:   if( pIn1->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "1804:   if( pIn1->flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1993:     affinity = pOp->p5 & SQLITE_AFF_MASK;",
          "1994:     if( affinity>=SQLITE_AFF_NUMERIC ){",
          "1995:       if( (flags1 | flags3)&MEM_Str ){",
          "1997:           applyNumericAffinity(pIn1,0);",
          "1998:           assert( flags3==pIn3->flags );",
          "",
          "[Removed Lines]",
          "1996:         if( (flags1 & (MEM_Int|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "[Added Lines]",
          "1996:         if( (flags1 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2004:           flags3 = pIn3->flags;",
          "2005:         }",
          "2007:           applyNumericAffinity(pIn3,0);",
          "2008:         }",
          "2009:       }",
          "",
          "[Removed Lines]",
          "2006:         if( (flags3 & (MEM_Int|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "[Added Lines]",
          "2006:         if( (flags3 & (MEM_Int|MEM_IntReal|MEM_Real|MEM_Str))==MEM_Str ){",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2016:         goto compare_op;",
          "2017:       }",
          "2018:     }else if( affinity==SQLITE_AFF_TEXT ){",
          "2020:         testcase( pIn1->flags & MEM_Int );",
          "2021:         testcase( pIn1->flags & MEM_Real );",
          "2022:         sqlite3VdbeMemStringify(pIn1, encoding, 1);",
          "2023:         testcase( (flags1&MEM_Dyn) != (pIn1->flags&MEM_Dyn) );",
          "2024:         flags1 = (pIn1->flags & ~MEM_TypeMask) | (flags1 & MEM_TypeMask);",
          "2025:         assert( pIn1!=pIn3 );",
          "2026:       }",
          "2028:         testcase( pIn3->flags & MEM_Int );",
          "2029:         testcase( pIn3->flags & MEM_Real );",
          "2030:         sqlite3VdbeMemStringify(pIn3, encoding, 1);",
          "2031:         testcase( (flags3&MEM_Dyn) != (pIn3->flags&MEM_Dyn) );",
          "2032:         flags3 = (pIn3->flags & ~MEM_TypeMask) | (flags3 & MEM_TypeMask);",
          "",
          "[Removed Lines]",
          "2019:       if( (flags1 & MEM_Str)==0 && (flags1 & (MEM_Int|MEM_Real))!=0 ){",
          "2027:       if( (flags3 & MEM_Str)==0 && (flags3 & (MEM_Int|MEM_Real))!=0 ){",
          "",
          "[Added Lines]",
          "2019:       if( (flags1 & MEM_Str)==0 && (flags1&(MEM_Int|MEM_Real|MEM_IntReal))!=0 ){",
          "2022:         testcase( pIn1->flags & MEM_IntReal );",
          "2028:       if( (flags3 & MEM_Str)==0 && (flags3&(MEM_Int|MEM_Real|MEM_IntReal))!=0 ){",
          "2031:         testcase( pIn3->flags & MEM_IntReal );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2792:       pIn1->flags |= MEM_IntReal;",
          "2793:     }",
          "2794:     REGISTER_TRACE((int)(pIn1-aMem), pIn1);",
          "2795:     zAffinity++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2795:       pIn1->flags &= ~MEM_Int;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3989:     pIn3 = &aMem[pOp->p3];",
          "3991:       applyNumericAffinity(pIn3, 0);",
          "3992:     }",
          "3993:     iKey = sqlite3VdbeIntValue(pIn3);",
          "3998:       if( (pIn3->flags & MEM_Real)==0 ){",
          "",
          "[Removed Lines]",
          "3990:     if( (pIn3->flags & (MEM_Int|MEM_Real|MEM_Str))==MEM_Str ){",
          "3997:     if( (pIn3->flags & MEM_Int)==0 ){",
          "",
          "[Added Lines]",
          "3993:     if( (pIn3->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4000:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4379:   u64 iKey;",
          "4381:   pIn3 = &aMem[pOp->p3];",
          "",
          "[Removed Lines]",
          "4382:   if( (pIn3->flags & MEM_Int)==0 ){",
          "",
          "[Added Lines]",
          "4385:   if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:     int eType = SQLITE_BLOB;",
          "305:     if( pVal->flags & MEM_Null ){",
          "306:       eType = SQLITE_NULL;",
          "310:       eType = SQLITE_FLOAT;",
          "311:     }else if( pVal->flags & MEM_Str ){",
          "312:       eType = SQLITE_TEXT;",
          "313:     }",
          "",
          "[Removed Lines]",
          "307:     }else if( pVal->flags & MEM_Int ){",
          "308:       eType = (pVal->flags & MEM_IntReal) ? SQLITE_FLOAT : SQLITE_INTEGER;",
          "309:     }else if( pVal->flags & MEM_Real ){",
          "",
          "[Added Lines]",
          "307:     }else if( pVal->flags & (MEM_Real|MEM_IntReal) ){",
          "309:     }else if( pVal->flags & MEM_Int ){",
          "310:       eType = SQLITE_INTEGER;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1849:   }else if( iIdx>=p->pUnpacked->nField ){",
          "1851:   }else if( p->pTab->aCol[iIdx].affinity==SQLITE_AFF_REAL ){",
          "1853:       sqlite3VdbeMemRealify(pMem);",
          "1854:     }",
          "1855:   }",
          "",
          "[Removed Lines]",
          "1852:     if( pMem->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "1852:     if( pMem->flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1534:       Mem *pMem = pOp->p4.pMem;",
          "1535:       if( pMem->flags & MEM_Str ){",
          "1536:         zP4 = pMem->z;",
          "1538:         sqlite3_str_appendf(&x, \"%lld\", pMem->u.i);",
          "1539:       }else if( pMem->flags & MEM_Real ){",
          "1540:         sqlite3_str_appendf(&x, \"%.16g\", pMem->u.r);",
          "",
          "[Removed Lines]",
          "1537:       }else if( pMem->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "1537:       }else if( pMem->flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3433:     return 0;",
          "3434:   }",
          "3437: #   define MAX_6BYTE ((((i64)0x00008000)<<32)-1)",
          "3438:     i64 i = pMem->u.i;",
          "",
          "[Removed Lines]",
          "3435:   if( flags&MEM_Int ){",
          "",
          "[Added Lines]",
          "3435:   if( flags&(MEM_Int|MEM_IntReal) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4116:       if( pMem1->u.i < pMem2->u.i ) return -1;",
          "4117:       if( pMem1->u.i > pMem2->u.i ) return +1;",
          "4118:       return 0;",
          "",
          "[Removed Lines]",
          "4114:   if( combined_flags&(MEM_Int|MEM_Real) ){",
          "4115:     if( (f1 & f2 & MEM_Int)!=0 ){",
          "",
          "[Added Lines]",
          "4114:   if( combined_flags&(MEM_Int|MEM_Real|MEM_IntReal) ){",
          "4115:     if( (f1 & f2 & (MEM_Int|MEM_IntReal))!=0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4122:       if( pMem1->u.r > pMem2->u.r ) return +1;",
          "4123:       return 0;",
          "4124:     }",
          "4126:       if( (f2&MEM_Real)!=0 ){",
          "4127:         return sqlite3IntFloatCompare(pMem1->u.i, pMem2->u.r);",
          "4128:       }else{",
          "4129:         return -1;",
          "4130:       }",
          "4131:     }",
          "4132:     if( (f1&MEM_Real)!=0 ){",
          "4134:         return -sqlite3IntFloatCompare(pMem2->u.i, pMem1->u.r);",
          "4135:       }else{",
          "4136:         return -1;",
          "",
          "[Removed Lines]",
          "4125:     if( (f1&MEM_Int)!=0 ){",
          "4133:       if( (f2&MEM_Int)!=0 ){",
          "",
          "[Added Lines]",
          "4125:     if( (f1&(MEM_Int|MEM_IntReal))!=0 ){",
          "4128:       }else if( (f2&(MEM_Int|MEM_IntReal))!=0 ){",
          "4129:         if( pMem1->u.i < pMem2->u.i ) return -1;",
          "4130:         if( pMem1->u.i > pMem2->u.i ) return +1;",
          "4131:         return 0;",
          "4137:       if( (f2&(MEM_Int|MEM_IntReal))!=0 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4279:     u32 serial_type;",
          "4283:       serial_type = aKey1[idx1];",
          "4284:       testcase( serial_type==12 );",
          "4285:       if( serial_type>=10 ){",
          "",
          "[Removed Lines]",
          "4282:     if( pRhs->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "4286:     if( pRhs->flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4624:     testcase( flags & MEM_Real );",
          "4625:     testcase( flags & MEM_Null );",
          "4626:     testcase( flags & MEM_Blob );",
          "4628:       assert( flags & MEM_Str );",
          "4629:       return vdbeRecordCompareString;",
          "4630:     }",
          "",
          "[Removed Lines]",
          "4627:     if( (flags & (MEM_Real|MEM_Null|MEM_Blob))==0 && p->pKeyInfo->aColl[0]==0 ){",
          "",
          "[Added Lines]",
          "4631:     if( (flags & (MEM_Real|MEM_IntReal|MEM_Null|MEM_Blob))==0",
          "4632:      && p->pKeyInfo->aColl[0]==0",
          "4633:     ){",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: #include \"sqliteInt.h\"",
          "19: #include \"vdbeInt.h\"",
          "21: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #define ISPOWEROF2(X)  (((X)&((X)-1))==0)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:   assert( (p->flags & MEM_Dyn)==0 || p->szMalloc==0 );",
          "43:   if( p->flags & MEM_Null ){",
          "",
          "[Removed Lines]",
          "41:   assert( (p->flags & (MEM_Int|MEM_Real))!=(MEM_Int|MEM_Real) );",
          "",
          "[Added Lines]",
          "46:   assert( ISPOWEROF2(p->flags & (MEM_Int|MEM_Real|MEM_IntReal)) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "93: #endif",
          "99: static void vdbeMemRenderNum(int sz, char *zBuf, Mem *p){",
          "100:   StrAccum acc;",
          "102:   sqlite3StrAccumInit(&acc, 0, zBuf, sz, 0);",
          "106:     sqlite3_str_appendf(&acc, \"%lld\", p->u.i);",
          "107:   }else{",
          "108:     sqlite3_str_appendf(&acc, \"%!.15g\", p->u.r);",
          "109:   }",
          "",
          "[Removed Lines]",
          "101:   assert( p->flags & (MEM_Int|MEM_Real) );",
          "103:   if( p->flags & MEM_IntReal ){",
          "104:     sqlite3_str_appendf(&acc, \"%!.15g\", (double)p->u.i);",
          "105:   }else if( p->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "106:   assert( p->flags & (MEM_Int|MEM_Real|MEM_IntReal) );",
          "108:   if( p->flags & MEM_Int ){",
          "110:   }else if( p->flags & MEM_IntReal ){",
          "111:     sqlite3_str_appendf(&acc, \"%!.15g\", (double)p->u.i);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:   char *z;",
          "137:   int i, j, incr;",
          "138:   if( (p->flags & MEM_Str)==0 ) return 1;",
          "140:   vdbeMemRenderNum(sizeof(zBuf), zBuf, p);",
          "141:   z = p->z;",
          "142:   i = j = 0;",
          "",
          "[Removed Lines]",
          "139:   if( (p->flags & (MEM_Int|MEM_Real))==0 ) return 1;",
          "",
          "[Added Lines]",
          "144:   if( (p->flags & (MEM_Int|MEM_Real|MEM_IntReal))==0 ) return 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "369:   assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "370:   assert( !(pMem->flags&MEM_Zero) );",
          "371:   assert( !(pMem->flags&(MEM_Str|MEM_Blob)) );",
          "373:   assert( !sqlite3VdbeMemIsRowSet(pMem) );",
          "374:   assert( EIGHT_BYTE_ALIGNMENT(pMem) );",
          "",
          "[Removed Lines]",
          "372:   assert( pMem->flags&(MEM_Int|MEM_Real) );",
          "",
          "[Added Lines]",
          "377:   assert( pMem->flags&(MEM_Int|MEM_Real|MEM_IntReal) );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "558:   assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "559:   assert( EIGHT_BYTE_ALIGNMENT(pMem) );",
          "560:   flags = pMem->flags;",
          "562:     return pMem->u.i;",
          "563:   }else if( flags & MEM_Real ){",
          "564:     return doubleToInt64(pMem->u.r);",
          "",
          "[Removed Lines]",
          "561:   if( flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "566:   if( flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "587:   assert( EIGHT_BYTE_ALIGNMENT(pMem) );",
          "588:   if( pMem->flags & MEM_Real ){",
          "589:     return pMem->u.r;",
          "591:     return (double)pMem->u.i;",
          "592:   }else if( pMem->flags & (MEM_Str|MEM_Blob) ){",
          "593:     return memRealValue(pMem);",
          "",
          "[Removed Lines]",
          "590:   }else if( pMem->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "595:   }else if( pMem->flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "604: int sqlite3VdbeBooleanValue(Mem *pMem, int ifNull){",
          "606:   if( pMem->flags & MEM_Null ) return ifNull;",
          "607:   return sqlite3VdbeRealValue(pMem)!=0.0;",
          "608: }",
          "",
          "[Removed Lines]",
          "605:   if( pMem->flags & MEM_Int ) return pMem->u.i!=0;",
          "",
          "[Added Lines]",
          "610:   if( pMem->flags & (MEM_Int|MEM_IntReal) ) return pMem->u.i!=0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "685: int sqlite3VdbeMemNumerify(Mem *pMem){",
          "687:     int rc;",
          "688:     assert( (pMem->flags & (MEM_Blob|MEM_Str))!=0 );",
          "689:     assert( pMem->db==0 || sqlite3_mutex_held(pMem->db->mutex) );",
          "",
          "[Removed Lines]",
          "686:   if( (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))==0 ){",
          "",
          "[Added Lines]",
          "691:   if( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))==0 ){",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "701:       }",
          "702:     }",
          "703:   }",
          "705:   pMem->flags &= ~(MEM_Str|MEM_Blob|MEM_Zero);",
          "706:   return SQLITE_OK;",
          "707: }",
          "",
          "[Removed Lines]",
          "704:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_Null))!=0 );",
          "",
          "[Added Lines]",
          "709:   assert( (pMem->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Null))!=0 );",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "930:       u16 mFlags = pMem->flags & pX->flags & pX->mScopyFlags;",
          "932:       assert( (mFlags&MEM_Real)==0 || pMem->u.r==pX->u.r );",
          "933:       assert( (mFlags&MEM_Str)==0  || (pMem->n==pX->n && pMem->z==pX->z) );",
          "934:       assert( (mFlags&MEM_Blob)==0  || sqlite3BlobCompare(pMem,pX)==0 );",
          "",
          "[Removed Lines]",
          "931:       assert( (mFlags&MEM_Int)==0 || pMem->u.i==pX->u.i );",
          "",
          "[Added Lines]",
          "936:       assert( (mFlags&(MEM_Int|MEM_IntReal))==0 || pMem->u.i==pX->u.i );",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1491:     }else{",
          "1492:       sqlite3ValueApplyAffinity(pVal, affinity, SQLITE_UTF8);",
          "1493:     }",
          "1495:     if( enc!=SQLITE_UTF8 ){",
          "1496:       rc = sqlite3VdbeChangeEncoding(pVal, enc);",
          "1497:     }",
          "",
          "[Removed Lines]",
          "1494:     if( pVal->flags & (MEM_Int|MEM_Real) ) pVal->flags &= ~MEM_Str;",
          "",
          "[Added Lines]",
          "1499:     if( pVal->flags & (MEM_Int|MEM_IntReal|MEM_Real) ) pVal->flags &= ~MEM_Str;",
          "",
          "---------------"
        ],
        "src/vdbetrace.c||src/vdbetrace.c": [
          "File: src/vdbetrace.c -> src/vdbetrace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "130:       pVar = &p->aVar[idx-1];",
          "131:       if( pVar->flags & MEM_Null ){",
          "132:         sqlite3_str_append(&out, \"NULL\", 4);",
          "134:         sqlite3_str_appendf(&out, \"%lld\", pVar->u.i);",
          "135:       }else if( pVar->flags & MEM_Real ){",
          "136:         sqlite3_str_appendf(&out, \"%!.15g\", pVar->u.r);",
          "",
          "[Removed Lines]",
          "133:       }else if( pVar->flags & MEM_Int ){",
          "",
          "[Added Lines]",
          "133:       }else if( pVar->flags & (MEM_Int|MEM_IntReal) ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}