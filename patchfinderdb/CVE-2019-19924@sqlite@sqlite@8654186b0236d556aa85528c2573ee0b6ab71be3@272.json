{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cf1747b78259462caad907eecb10750993ee7e4e",
      "candidate_info": {
        "commit_hash": "cf1747b78259462caad907eecb10750993ee7e4e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cf1747b78259462caad907eecb10750993ee7e4e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/like3.test"
        ],
        "message": "The collating sequence of the column must be TEXT if the LIKE or GLOB pattern starts with a \"+\" sign.  This is another case of ticket [c94369cae9b561b1f996d005] that was discovered by Manuel Rigger.\n\nFossilOrigin-Name: b043a54c3de54b286c4eae564eab6b99118a410d99bdb63480faba3123d2ca11",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/like3.test||test/like3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3e897702f8f789fe5119b9042fb93eca3fbfcc44564fbfa66c65628725b1157d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:         if( sqlite3Isdigit(zNew[0])",
          "279:          || zNew[0]=='-'",
          "280:          || (zNew[0]+1=='0' && iTo==1)",
          "281:         ){",
          "282:           if( pLeft->op!=TK_COLUMN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:          || zNew[0]=='+'",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:   `--SEARCH TABLE t5b USING COVERING INDEX sqlite_autoindex_t5b_1 (x>? AND x<?)",
          "179: }",
          "181: # 2019-02-27",
          "182: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "183: # using PRAGMA case_sensitive_like=ON.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: # 2019-05-01",
          "182: # another case of the above reported on the mailing list by Manual Rigger.",
          "183: #",
          "184: do_execsql_test like3-5.300 {",
          "185:   CREATE TABLE t5c (c0 REAL);",
          "186:   CREATE INDEX t5c_0 ON t5c(c0 COLLATE NOCASE);",
          "187:   INSERT INTO t5c(rowid, c0) VALUES (99,'+/');",
          "188:   SELECT * FROM t5c WHERE (c0 LIKE '+/');",
          "189: } {+/}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0f1fa5de045a3f1b8c08373ace7adea04ab81021",
      "candidate_info": {
        "commit_hash": "0f1fa5de045a3f1b8c08373ace7adea04ab81021",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f1fa5de045a3f1b8c08373ace7adea04ab81021",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pcache1.c"
        ],
        "message": "Patch to the page cache to avoid harmless pointer arithmetic that due to bugs in the STD-C spec is technically UB.  This is to fix a harmless UBSAN complaint that OSSFuzz is hitting.\n\nFossilOrigin-Name: c29fc21288e37f81a1617c5e2961c575d3bca6a1d1b013b2e0a99774afb1dcdb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pcache1.c||src/pcache1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c1014e80b26131200a115beb86929a8f0ded2dd65b075e47373346c0f170576a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:     }",
          "449: #else",
          "450:     pPg = pcache1Alloc(pCache->szAlloc);",
          "452: #endif",
          "453:     if( benignMalloc ){ sqlite3EndBenignMalloc(); }",
          "454: #ifdef SQLITE_ENABLE_MEMORY_MANAGEMENT",
          "455:     pcache1EnterMutex(pCache->pGroup);",
          "456: #endif",
          "457:     if( pPg==0 ) return 0;",
          "458:     p->page.pBuf = pPg;",
          "459:     p->page.pExtra = &p[1];",
          "460:     p->isBulkLocal = 0;",
          "",
          "[Removed Lines]",
          "451:     p = (PgHdr1 *)&((u8 *)pPg)[pCache->szPage];",
          "",
          "[Added Lines]",
          "457: #ifndef SQLITE_PCACHE_SEPARATE_HEADER",
          "458:     p = (PgHdr1 *)&((u8 *)pPg)[pCache->szPage];",
          "459: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d4e720579192f378a3e407e390010de38bfcdcd",
      "candidate_info": {
        "commit_hash": "2d4e720579192f378a3e407e390010de38bfcdcd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2d4e720579192f378a3e407e390010de38bfcdcd",
        "files": [
          "ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5update.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Have fts5 reject attempts to insert a non-integer, non-null value into a rowid column with SQLITE_MISMATCH.\n\nFossilOrigin-Name: 4a9483f81e9ca1aa41d6ca33cb3171370418ccc71fdee9741bbf6f694bf4fbaa",
        "before_after_code_files": [
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/test/fts5update.test||ext/fts5/test/fts5update.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1498:   assert( pVtab->zErrMsg==0 );",
          "1499:   assert( nArg==1 || nArg==(2+pConfig->nCol+2) );",
          "1503:   );",
          "1504:   assert( pTab->pConfig->pzErrmsg==0 );",
          "1505:   pTab->pConfig->pzErrmsg = &pTab->base.zErrMsg;",
          "",
          "[Removed Lines]",
          "1500:   assert( nArg==1",
          "1501:       || sqlite3_value_type(apVal[1])==SQLITE_INTEGER",
          "1502:       || sqlite3_value_type(apVal[1])==SQLITE_NULL",
          "",
          "[Added Lines]",
          "1500:   assert( sqlite3_value_type(apVal[0])==SQLITE_INTEGER",
          "1501:        || sqlite3_value_type(apVal[0])==SQLITE_NULL",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1556:       rc = sqlite3Fts5StorageDelete(pTab->pStorage, iDel, 0);",
          "1557:     }",
          "1567:       }",
          "1585:             rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1586:           }",
          "1590:         }",
          "1594:       }",
          "1595:     }",
          "1596:   }",
          "",
          "[Removed Lines]",
          "1560:     else if( eType0!=SQLITE_INTEGER ){",
          "1562:       if( eConflict==SQLITE_REPLACE",
          "1563:        && sqlite3_value_type(apVal[1])==SQLITE_INTEGER",
          "1564:       ){",
          "1566:         rc = sqlite3Fts5StorageDelete(pTab->pStorage, iNew, 0);",
          "1568:       fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "1569:     }",
          "1572:     else{",
          "1575:       if( iOld!=iNew ){",
          "1576:         if( eConflict==SQLITE_REPLACE ){",
          "1577:           rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1578:           if( rc==SQLITE_OK ){",
          "1579:             rc = sqlite3Fts5StorageDelete(pTab->pStorage, iNew, 0);",
          "1580:           }",
          "1581:           fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "1582:         }else{",
          "1583:           rc = sqlite3Fts5StorageContentInsert(pTab->pStorage, apVal, pRowid);",
          "1584:           if( rc==SQLITE_OK ){",
          "1587:           if( rc==SQLITE_OK ){",
          "1588:             rc = sqlite3Fts5StorageIndexInsert(pTab->pStorage, apVal, *pRowid);",
          "1589:           }",
          "1591:       }else{",
          "1592:         rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1593:         fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "",
          "[Added Lines]",
          "1559:     else{",
          "1560:       int eType1 = sqlite3_value_numeric_type(apVal[1]);",
          "1562:       if( eType1!=SQLITE_INTEGER && eType1!=SQLITE_NULL ){",
          "1563:         rc = SQLITE_MISMATCH;",
          "1566:       else if( eType0!=SQLITE_INTEGER ){",
          "1568:         if( eConflict==SQLITE_REPLACE && eType1==SQLITE_INTEGER ){",
          "1570:           rc = sqlite3Fts5StorageDelete(pTab->pStorage, iNew, 0);",
          "1571:         }",
          "1572:         fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "1573:       }",
          "1576:       else{",
          "1579:         if( eType1==SQLITE_INTEGER && iOld!=iNew ){",
          "1580:           if( eConflict==SQLITE_REPLACE ){",
          "1582:             if( rc==SQLITE_OK ){",
          "1583:               rc = sqlite3Fts5StorageDelete(pTab->pStorage, iNew, 0);",
          "1584:             }",
          "1585:             fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "1586:           }else{",
          "1587:             rc = sqlite3Fts5StorageContentInsert(pTab->pStorage, apVal, pRowid);",
          "1588:             if( rc==SQLITE_OK ){",
          "1589:               rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1590:             }",
          "1591:             if( rc==SQLITE_OK ){",
          "1592:               rc = sqlite3Fts5StorageIndexInsert(pTab->pStorage, apVal,*pRowid);",
          "1593:             }",
          "1595:         }else{",
          "1596:           rc = sqlite3Fts5StorageDelete(pTab->pStorage, iOld, 0);",
          "1597:           fts5StorageInsert(&rc, pTab, apVal, pRowid);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5update.test||ext/fts5/test/fts5update.test": [
          "File: ext/fts5/test/fts5update.test -> ext/fts5/test/fts5update.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:   }",
          "135: } {}",
          "138: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137: do_execsql_test 4.0 {",
          "138:   CREATE VIRTUAL TABLE x4 USING fts5(a, detail=%DETAIL%);",
          "139:   INSERT INTO x4 VALUES('one two three');",
          "140:   INSERT INTO x4(rowid, a) VALUES('2', 'one two three');",
          "141:   INSERT INTO x4(rowid, a) VALUES('3.0', 'one two three');",
          "142: }",
          "143: do_catchsql_test 4.1 {",
          "144:   INSERT INTO x4(rowid, a) VALUES('four', 'one two three');",
          "145: } {1 {datatype mismatch}}",
          "147: do_catchsql_test 4.2 {",
          "148:   UPDATE x4 SET rowid = 'four' WHERE rowid=1;",
          "149: } {1 {datatype mismatch}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1caff0fb0b2051e205e7a8cfd5dadf92680c52a88a441ded95b1ea6542db5f83",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d44c617ad444717fbf9f213c8a654d2661fc64e7",
      "candidate_info": {
        "commit_hash": "d44c617ad444717fbf9f213c8a654d2661fc64e7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d44c617ad444717fbf9f213c8a654d2661fc64e7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h"
        ],
        "message": "Extra comments on fields of the Window object.\n\nFossilOrigin-Name: 3dbed162518a73213bbfb137c763064518fdc2daeae3952cfab39ce0e6813d3f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f464d847af490dd3ec45565dcc4c2e6ff4ed1ebb65036f30ca0b3ce2e73080e6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "3604:   int regAccum;",
          "3605:   int regResult;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3613:   int regStartRowid;",
          "3614:   int regEndRowid;",
          "3616: };",
          "3618: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "",
          "[Removed Lines]",
          "3615:   u8 bExprArgs;",
          "",
          "[Added Lines]",
          "3615:   u8 bExprArgs;           /* Defer evaluation of window function arguments",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "750c6ba5e5ab75e15f660d82d5428c78a44eda4e",
      "candidate_info": {
        "commit_hash": "750c6ba5e5ab75e15f660d82d5428c78a44eda4e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/750c6ba5e5ab75e15f660d82d5428c78a44eda4e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/walker.c",
          "test/altertab3.test"
        ],
        "message": "Fix a problem with renaming tables when the schema contains WINDOW definitions with (illegal) non-numeric expressions as part of a PRECEDING or FOLLOWING clause.\n\nFossilOrigin-Name: 348e7f193a963390a0595183d603541f85c5d1a911c98ed2e06599691ffe98f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/walker.c||src/walker.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ee076c28d8ee0f5b099cdef83ae6cea6ef5aa209ab528d7c49949dd653ce019c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28:     if( sqlite3WalkExprList(pWalker, pWin->pOrderBy) ) return WRC_Abort;",
          "29:     if( sqlite3WalkExprList(pWalker, pWin->pPartition) ) return WRC_Abort;",
          "30:     if( sqlite3WalkExpr(pWalker, pWin->pFilter) ) return WRC_Abort;",
          "31:   }",
          "32:   return WRC_Continue;",
          "33: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:     if( sqlite3WalkExpr(pWalker, pWin->pStart) ) return WRC_Abort;",
          "32:     if( sqlite3WalkExpr(pWalker, pWin->pEnd) ) return WRC_Abort;",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:   END}",
          "274: }",
          "276: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "277: #-------------------------------------------------------------------------",
          "278: reset_db",
          "279: do_execsql_test 12.1 {",
          "280: CREATE TABLE t1(a,b,c,d,e,f,g,h,j,jj,Zjj,k,aQ,bb,cc,dd,ee DEFAULT 3.14,",
          "281: ff DEFAULT('hiccup'),gg NOD NULL DEFAULT(false));",
          "282: CREATE TRIGGER AFTER INSERT ON t1 WHEN new.a NOT NULL BEGIN",
          "284: SELECT b () OVER , dense_rank() OVER d, d () OVER w1",
          "285: FROM t1",
          "286: WINDOW",
          "287: w1 AS",
          "288: ( w1 ORDER BY d",
          "289: ROWS BETWEEN 2 NOT IN(SELECT a, sum(d) w2,max(d)OVER FROM t1",
          "290: WINDOW",
          "291: w1 AS",
          "292: (PARTITION BY d",
          "293: ROWS BETWEEN '' PRECEDING AND false FOLLOWING),",
          "294: d AS",
          "295: (PARTITION BY b ORDER BY d",
          "296: ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)",
          "297: ) PRECEDING AND 1 FOLLOWING),",
          "298: w2 AS",
          "299: (PARTITION BY b ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),",
          "300: w3 AS",
          "301: (PARTITION BY b ORDER BY d",
          "302: ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)",
          "303: ;",
          "304: SELECT a, sum(d) w2,max(d)OVER FROM t1",
          "305: WINDOW",
          "306: w1 AS",
          "307: (PARTITION BY d",
          "308: ROWS BETWEEN '' PRECEDING AND false FOLLOWING),",
          "309: d AS",
          "310: (PARTITION BY b ORDER BY d",
          "311: ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)",
          "312: ;",
          "314: END;",
          "315: }",
          "317: do_execsql_test 12.2 {",
          "318:   ALTER TABLE t1 RENAME TO t1x;",
          "319: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}