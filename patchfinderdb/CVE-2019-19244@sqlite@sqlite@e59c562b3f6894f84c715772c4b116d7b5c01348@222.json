{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b29ef5ef032e6da71785b49709a967737be352c4",
      "candidate_info": {
        "commit_hash": "b29ef5ef032e6da71785b49709a967737be352c4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b29ef5ef032e6da71785b49709a967737be352c4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix the OP_SeekRowid opcode so that it works correctly with a Real argument without damaging the value in the register that is the argument. Ticket [b2d4edaffdc156cc].  Test cases in TH3.\n\nFossilOrigin-Name: 3cde82c86b963fa75192907d548febd3882c7d8fc7daf1903fadd5ca46623be1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b73a09270dfafb27f8d1762b547ef8178c9da66f45e7153ff0b76272dfa92f5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4539:   pIn3 = &aMem[pOp->p3];",
          "4540:   testcase( pIn3->flags & MEM_Int );",
          "4541:   testcase( pIn3->flags & MEM_IntReal );",
          "4542:   if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4553:   }",
          "4556:   pIn3 = &aMem[pOp->p3];",
          "4557:   assert( (pIn3->flags & MEM_Int)!=0 || pOp->opcode==OP_SeekRowid );",
          "4558:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "4559:   pC = p->apCsr[pOp->p1];",
          "4560:   assert( pC!=0 );",
          "4561: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "4547:     u16 origFlags = pIn3->flags;",
          "4548:     int isNotInt;",
          "4549:     applyAffinity(pIn3, SQLITE_AFF_NUMERIC, encoding);",
          "4550:     isNotInt = (pIn3->flags & MEM_Int)==0;",
          "4551:     pIn3->flags = origFlags;",
          "4552:     if( isNotInt ) goto jump_to_p2;",
          "",
          "[Added Lines]",
          "4542:   testcase( pIn3->flags & MEM_Real );",
          "4543:   testcase( (pIn3->flags & (MEM_Str|MEM_Int))==MEM_Str );",
          "4550:     Mem x = pIn3[0];",
          "4551:     applyAffinity(&x, SQLITE_AFF_NUMERIC, encoding);",
          "4552:     if( (x.flags & MEM_Int)==0 ) goto jump_to_p2;",
          "4553:     iKey = x.u.i;",
          "4554:     goto notExistsWithKey;",
          "4561:   iKey = pIn3->u.i;",
          "4562: notExistsWithKey:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4566:   pCrsr = pC->uc.pCursor;",
          "4567:   assert( pCrsr!=0 );",
          "4568:   res = 0;",
          "4570:   rc = sqlite3BtreeMovetoUnpacked(pCrsr, 0, iKey, 0, &res);",
          "4571:   assert( rc==SQLITE_OK || res==0 );",
          "",
          "[Removed Lines]",
          "4569:   iKey = pIn3->u.i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f26b1453855dc4d651b59239ef39b43e9447ab15",
      "candidate_info": {
        "commit_hash": "f26b1453855dc4d651b59239ef39b43e9447ab15",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f26b1453855dc4d651b59239ef39b43e9447ab15",
        "files": [
          "ext/fts5/test/fts5aux.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Verify that fts5 auxiliary functions cannot be used in aggregate queries.\n\nFossilOrigin-Name: 122330dba3eb2492875bd02a46442306f73e251408447af5e5914ee0c8d6a110",
        "before_after_code_files": [
          "ext/fts5/test/fts5aux.test||ext/fts5/test/fts5aux.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5aux.test||ext/fts5/test/fts5aux.test": [
          "File: ext/fts5/test/fts5aux.test -> ext/fts5/test/fts5aux.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:   9 10",
          "276: }",
          "280: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "278: #-------------------------------------------------------------------------",
          "279: # Test that aux. functions may not be used in aggregate queries.",
          "280: #",
          "281: reset_db",
          "282: do_execsql_test 10.0 {",
          "283:   CREATE VIRTUAL TABLE t1 USING fts5(x, y, z);",
          "284:   INSERT INTO t1 VALUES('a', 'one two', 1);",
          "285:   INSERT INTO t1 VALUES('b', 'two three', 2);",
          "286:   INSERT INTO t1 VALUES('c', 'three four', 1);",
          "287:   INSERT INTO t1 VALUES('d', 'four five', 2);",
          "288:   INSERT INTO t1 VALUES('e', 'five six', 1);",
          "289:   INSERT INTO t1 VALUES('f', 'six seven', 2);",
          "290: }",
          "292: proc firstcol {cmd} { $cmd xColumnText 0 }",
          "293: sqlite3_fts5_create_function db firstcol firstcol",
          "295: do_execsql_test 10.1.1 {",
          "296:   SELECT firstcol(t1) FROM t1",
          "297: } {a b c d e f}",
          "298: do_execsql_test 10.1.2 {",
          "299:   SELECT group_concat(x, '.') FROM t1",
          "300: } {a.b.c.d.e.f}",
          "302: do_catchsql_test 10.1.3 {",
          "303:   SELECT group_concat(firstcol(t1), '.') FROM t1",
          "304: } {1 {unable to use function firstcol in the requested context}}",
          "306: do_catchsql_test 10.1.4 {",
          "307:   SELECT group_concat(firstcol(t1), '.') FROM t1 GROUP BY rowid",
          "308: } {1 {unable to use function firstcol in the requested context}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 29d02bf2fa9ecacbcc3e862ca70382f5875da8c1dc7fd27366190045fcc42b15",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea38f4f4ccd5354fd47f5419c84ddef4d2f0c2c6",
      "candidate_info": {
        "commit_hash": "ea38f4f4ccd5354fd47f5419c84ddef4d2f0c2c6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ea38f4f4ccd5354fd47f5419c84ddef4d2f0c2c6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a double-quoted string literal used in the \".schema\" command of the CLI.\n\nFossilOrigin-Name: fcd937d9786a82ef4147e657d54ea0beb6ac87e2eb1677186b318493d473077b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ee293e5aeac0b05a8b809095610fd8b4fdaf8e68cd368de90ec0d45e3582ffe5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8388:         zDiv = \" UNION ALL \";",
          "8389:         appendText(&sSelect, \"SELECT shell_add_schema(sql,\", 0);",
          "8390:         if( sqlite3_stricmp(zDb, \"main\")!=0 ){",
          "8392:         }else{",
          "8393:           appendText(&sSelect, \"NULL\", 0);",
          "8394:         }",
          "",
          "[Removed Lines]",
          "8391:           appendText(&sSelect, zDb, '\"');",
          "",
          "[Added Lines]",
          "8391:           appendText(&sSelect, zDb, '\\'');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8397:         appendText(&sSelect, \" AS snum, \", 0);",
          "8398:         appendText(&sSelect, zDb, '\\'');",
          "8399:         appendText(&sSelect, \" AS sname FROM \", 0);",
          "8401:         appendText(&sSelect, \".sqlite_master\", 0);",
          "8402:       }",
          "8403:       sqlite3_finalize(pStmt);",
          "",
          "[Removed Lines]",
          "8400:         appendText(&sSelect, zDb, '\"');",
          "",
          "[Added Lines]",
          "8400:         appendText(&sSelect, zDb, quoteChar(zDb));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0578084507ee2d5f951409b61029093e1408ec7b",
      "candidate_info": {
        "commit_hash": "0578084507ee2d5f951409b61029093e1408ec7b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0578084507ee2d5f951409b61029093e1408ec7b",
        "files": [
          "ext/fts3/fts3Int.h",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the assert_fts3_nc() macro so that it works for test builds that omit SQLITE_DEBUG.\n\nFossilOrigin-Name: b10df2b569e356551cf51ca179f307e4f8827413ee9feb886db1f1e0650e6c5f",
        "before_after_code_files": [
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "138: extern int sqlite3_fts3_may_be_corrupt;",
          "139: # define assert_fts3_nc(x) assert(sqlite3_fts3_may_be_corrupt || (x))",
          "140: #else",
          "",
          "[Removed Lines]",
          "137: #ifdef SQLITE_DEBUG",
          "",
          "[Added Lines]",
          "137: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a82539665718c8183d9d0bb7bcb3adcb1a23294b8c30f364829a982dab89a332",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5f6a4ea2e2b5a12bc425615a8a01af920c1bc65d",
      "candidate_info": {
        "commit_hash": "5f6a4ea2e2b5a12bc425615a8a01af920c1bc65d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5f6a4ea2e2b5a12bc425615a8a01af920c1bc65d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Additional simplifications of the WHERE loop code generator logic for NULLS LAST.\n\nFossilOrigin-Name: 1383680d927d7d703933be7653c0019199845e7f7e82bcc76d9ca3808093e9d8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e3ed2f496f51234a8f81d90d47ba603b06dbed38b8bd8f1934294379cde74d3a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1708:       assert( bSeekPastNull==0 || bStopAtNull==0 );",
          "1709:       if( regBignull ){",
          "1710:         assert( bSeekPastNull==1 || bStopAtNull==1 );",
          "1711:         assert( bStopAtNull==startEq );",
          "1712:         sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "1713:         op = aStartOp[(nConstraint>1)*4 + 2 + bRev];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1711:         assert( bSeekPastNull==!bStopAtNull );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1778:       testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1779:     }",
          "1780:     if( regBignull ){",
          "1781:       sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1782:       VdbeComment((v, \"If NULL-scan pending\"));",
          "1783:       VdbeCoverage(v);",
          "1798:     }",
          "1800:     if( pLoop->wsFlags & WHERE_IN_EARLYOUT ){",
          "",
          "[Removed Lines]",
          "1784:       if( bStopAtNull ){",
          "1785:         op = aEndOp[bRev*2 + 0];",
          "1786:         assert( op==OP_IdxGE || op==OP_IdxLE );",
          "1787:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1788:         testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1789:         testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1790:       }else{",
          "1791:         op = aEndOp[bRev*2 + endEq];",
          "1792:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint+1);",
          "1793:         testcase( op==OP_IdxGT );  VdbeCoverageIf(v, op==OP_IdxGT );",
          "1794:         testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1795:         testcase( op==OP_IdxLT );  VdbeCoverageIf(v, op==OP_IdxLT );",
          "1796:         testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1797:       }",
          "",
          "[Added Lines]",
          "1785:       assert( bSeekPastNull==!bStopAtNull );",
          "1786:       assert( bSeekPastNull+bStopAtNull==1 );",
          "1787:       assert( nConstraint+bSeekPastNull>0 );",
          "1791:       op = aEndOp[bRev*2 + bSeekPastNull];",
          "1792:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase,",
          "1793:                            nConstraint+bSeekPastNull);",
          "1794:       testcase( op==OP_IdxGT );  VdbeCoverageIf(v, op==OP_IdxGT );",
          "1795:       testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1796:       testcase( op==OP_IdxLT );  VdbeCoverageIf(v, op==OP_IdxLT );",
          "1797:       testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "",
          "---------------"
        ]
      }
    }
  ]
}