{
  "cve_id": "CVE-2016-2045",
  "cve_desc": "Cross-site scripting (XSS) vulnerability in the SQL editor in phpMyAdmin 4.5.x before 4.5.4 allows remote authenticated users to inject arbitrary web script or HTML via a SQL query that triggers JSON data in a response.",
  "repo": "phpmyadmin/phpmyadmin",
  "patch_hash": "0a24f92d081033576bfdd9d4bdec1a54501734c1",
  "patch_info": {
    "commit_hash": "0a24f92d081033576bfdd9d4bdec1a54501734c1",
    "repo": "phpmyadmin/phpmyadmin",
    "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/0a24f92d081033576bfdd9d4bdec1a54501734c1",
    "files": [
      "import_status.php",
      "libraries/Response.class.php",
      "libraries/core.lib.php",
      "libraries/display_import_ajax.lib.php",
      "lint.php",
      "normalization.php",
      "setup/validate.php",
      "version_check.php"
    ],
    "message": "Set correct content type for JSON responses\n\nSigned-off-by: Michal \u010ciha\u0159 <michal@cihar.com>",
    "before_after_code_files": [
      "import_status.php||import_status.php",
      "libraries/Response.class.php||libraries/Response.class.php",
      "libraries/core.lib.php||libraries/core.lib.php",
      "libraries/display_import_ajax.lib.php||libraries/display_import_ajax.lib.php",
      "lint.php||lint.php",
      "normalization.php||normalization.php",
      "setup/validate.php||setup/validate.php",
      "version_check.php||version_check.php"
    ]
  },
  "patch_diff": {
    "import_status.php||import_status.php": [
      "File: import_status.php -> import_status.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "75: }",
      "82: if (isset($_GET[\"message\"]) && $_GET[\"message\"]) {",
      "84:     header('Content-type: text/html');",
      "",
      "[Removed Lines]",
      "79: PMA_noCacheHeader();",
      "",
      "[Added Lines]",
      "82:     PMA_noCacheHeader();",
      "",
      "---------------"
    ],
    "libraries/Response.class.php||libraries/Response.class.php": [
      "File: libraries/Response.class.php -> libraries/Response.class.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "377:         echo json_encode($this->_JSON);",
      "378:     }",
      "",
      "[Removed Lines]",
      "372:         if (! defined('TESTSUITE')) {",
      "373:             header('Cache-Control: no-cache');",
      "374:             header('Content-Type: application/json');",
      "375:         }",
      "",
      "[Added Lines]",
      "372:         PMA_headerJSON();",
      "",
      "---------------"
    ],
    "libraries/core.lib.php||libraries/core.lib.php": [
      "File: libraries/core.lib.php -> libraries/core.lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "630:     }",
      "631: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "638: function PMA_headerJSON()",
      "639: {",
      "640:     if (defined('TESTSUITE') && ! defined('PMA_TEST_HEADERS')) {",
      "641:         return;",
      "642:     }",
      "644:     PMA_noCacheHeader();",
      "646:     header('Content-Type: application/json; charset=UTF-8');",
      "650:     header('X-Content-Type-Options: nosniff');",
      "651: }",
      "",
      "---------------"
    ],
    "libraries/display_import_ajax.lib.php||libraries/display_import_ajax.lib.php": [
      "File: libraries/display_import_ajax.lib.php -> libraries/display_import_ajax.lib.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "122: function PMA_importAjaxStatus($id)",
      "123: {",
      "125:     echo json_encode(",
      "126:         $_SESSION[$GLOBALS['SESSION_KEY']]['handler']::getUploadStatus($id)",
      "127:     );",
      "",
      "[Removed Lines]",
      "124:     header('Content-type: application/json');",
      "",
      "[Added Lines]",
      "124:     PMA_headerJSON();",
      "",
      "---------------"
    ],
    "lint.php||lint.php": [
      "File: lint.php -> lint.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "31: $sql_query = !empty($_POST['sql_query']) ? $_POST['sql_query'] : '';",
      "37: echo json_encode(PMA_Linter::lint($sql_query));",
      "",
      "[Removed Lines]",
      "34: $response = PMA_Response::getInstance();",
      "35: $response->disable();",
      "",
      "[Added Lines]",
      "34: PMA_Response::getInstance()->disable();",
      "36: PMA_headerJSON();",
      "",
      "---------------"
    ],
    "normalization.php||normalization.php": [
      "File: normalization.php -> normalization.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "60:     $dependencies = json_decode($_REQUEST['pd']);",
      "61:     $tables = json_decode($_REQUEST['tables']);",
      "62:     $newTables = PMA_getHtmlForNewTables3NF($dependencies, $tables, $db);",
      "63:     echo json_encode($newTables);",
      "64:     exit;",
      "65: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "63:     PMA_Response::getInstance()->disable();",
      "64:     PMA_headerJSON();",
      "",
      "---------------"
    ],
    "setup/validate.php||setup/validate.php": [
      "File: setup/validate.php -> setup/validate.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "14: $validators = array();",
      "15: require './libraries/config/Validator.class.php';",
      "19: $ids = isset($_POST['id']) ? $_POST['id'] : null;",
      "20: $vids = explode(',', $ids);",
      "",
      "[Removed Lines]",
      "17: header('Content-type: application/json');",
      "",
      "[Added Lines]",
      "17: PMA_headerJSON();",
      "",
      "---------------"
    ],
    "version_check.php||version_check.php": [
      "File: version_check.php -> version_check.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: require_once 'libraries/VersionInformation.php';",
      "18: $versionInformation = new VersionInformation();",
      "19: $versionDetails = $versionInformation->getLatestVersion();",
      "",
      "[Removed Lines]",
      "16: header('Content-type: application/json; charset=UTF-8');",
      "",
      "[Added Lines]",
      "16: PMA_headerJSON();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "98a497e67c7e39ed1608b14222fd182f864b9195",
      "candidate_info": {
        "commit_hash": "98a497e67c7e39ed1608b14222fd182f864b9195",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/98a497e67c7e39ed1608b14222fd182f864b9195",
        "files": [
          "lint.php"
        ],
        "message": "Do not process unauthorized requests.\n\nSigned-off-by: Dan Ungureanu <udan1107@gmail.com>",
        "before_after_code_files": [
          "lint.php||lint.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lint.php||lint.php"
          ],
          "candidate": [
            "lint.php||lint.php"
          ]
        }
      },
      "candidate_diff": {
        "lint.php||lint.php": [
          "File: lint.php -> lint.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: define('PHPMYADMIN', true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: require_once 'libraries/core.lib.php';",
          "13: require_once 'libraries/Config.class.php';",
          "14: $GLOBALS['PMA_Config'] = new PMA_Config(CONFIG_FILE);",
          "15: require_once 'libraries/session.inc.php';",
          "19: if (empty($_SESSION['encryption_key'])) {",
          "21:     exit;",
          "22: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "43a4a042ceb3e5ae50313e7a7250f0513ab97e79",
      "candidate_info": {
        "commit_hash": "43a4a042ceb3e5ae50313e7a7250f0513ab97e79",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/43a4a042ceb3e5ae50313e7a7250f0513ab97e79",
        "files": [
          "ChangeLog",
          "normalization.php"
        ],
        "message": "Fixed error in 3NF step of normalization\n\nFixes #12121\n\nSigned-off-by: Michal \u010ciha\u0159 <michal@cihar.com>",
        "before_after_code_files": [
          "normalization.php||normalization.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "normalization.php||normalization.php"
          ],
          "candidate": [
            "normalization.php||normalization.php"
          ]
        }
      },
      "candidate_diff": {
        "normalization.php||normalization.php": [
          "File: normalization.php -> normalization.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:     $dependencies = json_decode($_REQUEST['pd']);",
          "60:     $tables = json_decode($_REQUEST['tables']);",
          "61:     $newTables = PMA_getHtmlForNewTables3NF($dependencies, $tables, $db);",
          "63:     PMA_headerJSON();",
          "64:     echo json_encode($newTables);",
          "65:     exit;",
          "",
          "[Removed Lines]",
          "62:     PMA_Response::getInstance()->disable();",
          "",
          "[Added Lines]",
          "62:     PMA\\libraries\\Response::getInstance()->disable();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b3febf65272edabaeeb7a7f0a5862fc87a1d4a2",
      "candidate_info": {
        "commit_hash": "2b3febf65272edabaeeb7a7f0a5862fc87a1d4a2",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/2b3febf65272edabaeeb7a7f0a5862fc87a1d4a2",
        "files": [
          "js/codemirror/addon/lint/sql-lint.js",
          "libraries/Linter.class.php",
          "libraries/config/messages.inc.php",
          "libraries/sql-parser/src/Component.php",
          "libraries/sql-parser/src/Components/AlterOperation.php",
          "libraries/sql-parser/src/Components/Array2d.php",
          "libraries/sql-parser/src/Components/ArrayObj.php",
          "libraries/sql-parser/src/Components/DataType.php",
          "libraries/sql-parser/src/Components/Expression.php",
          "libraries/sql-parser/src/Components/ExpressionArray.php",
          "libraries/sql-parser/src/Components/FieldDefinition.php",
          "libraries/sql-parser/src/Components/Limit.php",
          "libraries/sql-parser/src/Components/OptionsArray.php",
          "libraries/sql-parser/src/Components/RenameOperation.php",
          "libraries/sql-parser/src/Lexer.php",
          "libraries/sql-parser/src/Parser.php",
          "libraries/sql-parser/src/Statement.php",
          "libraries/sql-parser/src/Statements/CreateStatement.php",
          "lint.php",
          "test/libraries/PMA_Linter_Test.php"
        ],
        "message": "Localization. Updated sql-parser library to udan11/sql-parser@e1b91ed.\n\nSigned-off-by: Dan Ungureanu <udan1107@gmail.com>",
        "before_after_code_files": [
          "js/codemirror/addon/lint/sql-lint.js||js/codemirror/addon/lint/sql-lint.js",
          "libraries/Linter.class.php||libraries/Linter.class.php",
          "libraries/config/messages.inc.php||libraries/config/messages.inc.php",
          "libraries/sql-parser/src/Component.php||libraries/sql-parser/src/Component.php",
          "libraries/sql-parser/src/Components/AlterOperation.php||libraries/sql-parser/src/Components/AlterOperation.php",
          "libraries/sql-parser/src/Components/Array2d.php||libraries/sql-parser/src/Components/Array2d.php",
          "libraries/sql-parser/src/Components/ArrayObj.php||libraries/sql-parser/src/Components/ArrayObj.php",
          "libraries/sql-parser/src/Components/DataType.php||libraries/sql-parser/src/Components/DataType.php",
          "libraries/sql-parser/src/Components/Expression.php||libraries/sql-parser/src/Components/Expression.php",
          "libraries/sql-parser/src/Components/ExpressionArray.php||libraries/sql-parser/src/Components/ExpressionArray.php",
          "libraries/sql-parser/src/Components/FieldDefinition.php||libraries/sql-parser/src/Components/FieldDefinition.php",
          "libraries/sql-parser/src/Components/Limit.php||libraries/sql-parser/src/Components/Limit.php",
          "libraries/sql-parser/src/Components/OptionsArray.php||libraries/sql-parser/src/Components/OptionsArray.php",
          "libraries/sql-parser/src/Components/RenameOperation.php||libraries/sql-parser/src/Components/RenameOperation.php",
          "libraries/sql-parser/src/Lexer.php||libraries/sql-parser/src/Lexer.php",
          "libraries/sql-parser/src/Parser.php||libraries/sql-parser/src/Parser.php",
          "libraries/sql-parser/src/Statement.php||libraries/sql-parser/src/Statement.php",
          "libraries/sql-parser/src/Statements/CreateStatement.php||libraries/sql-parser/src/Statements/CreateStatement.php",
          "lint.php||lint.php",
          "test/libraries/PMA_Linter_Test.php||test/libraries/PMA_Linter_Test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lint.php||lint.php"
          ],
          "candidate": [
            "lint.php||lint.php"
          ]
        }
      },
      "candidate_diff": {
        "js/codemirror/addon/lint/sql-lint.js||js/codemirror/addon/lint/sql-lint.js": [
          "File: js/codemirror/addon/lint/sql-lint.js -> js/codemirror/addon/lint/sql-lint.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:         method: \"POST\",",
          "31:         url: \"lint.php\",",
          "32:         data: {",
          "34:         },",
          "35:         success: handleResponse",
          "36:     });",
          "",
          "[Removed Lines]",
          "33:             'sql_query': text",
          "",
          "[Added Lines]",
          "33:             sql_query: text,",
          "34:             token: PMA_commonParams.get('token'),",
          "",
          "---------------"
        ],
        "libraries/Linter.class.php||libraries/Linter.class.php": [
          "File: libraries/Linter.class.php -> libraries/Linter.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     {",
          "80:         if (/*overload*/mb_strlen($query) > 10000) {",
          "82:                 array(",
          "91:                 )",
          "92:             );",
          "94:         }",
          "",
          "[Removed Lines]",
          "81:             echo json_encode(",
          "83:                     array(",
          "84:                         'message' => 'Linting is disabled for this query because it exceeds the maximum length.',",
          "85:                         'fromLine' => 0,",
          "86:                         'fromColumn' => 0,",
          "87:                         'toLine' => 0,",
          "88:                         'toColumn' => 0,",
          "89:                         'severity' => 'warning',",
          "90:                     )",
          "93:             return;",
          "",
          "[Added Lines]",
          "81:             return array(",
          "83:                     'message' => __('Linting is disabled for this query because it exceeds the maximum length.'),",
          "84:                     'fromLine' => 0,",
          "85:                     'fromColumn' => 0,",
          "86:                     'toLine' => 0,",
          "87:                     'toColumn' => 0,",
          "88:                     'severity' => 'warning',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:             $response[] = array(",
          "150:                 'fromLine' => $fromLine,",
          "151:                 'fromColumn' => $fromColumn,",
          "152:                 'toLine' => $toLine,",
          "",
          "[Removed Lines]",
          "149:                 'message' => $error[0] . ' (near <code>' . $error[2] . '</code>)',",
          "",
          "[Added Lines]",
          "146:                 'message' => sprintf(",
          "147:                     __('%1$s (near <code>%2$s</code>)'),",
          "148:                     $error[0], $error[2]",
          "149:                 ),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "156:         }",
          "160:     }",
          "162: }",
          "",
          "[Removed Lines]",
          "159:         echo json_encode($response);",
          "",
          "[Added Lines]",
          "159:         return $response;",
          "",
          "---------------"
        ],
        "libraries/config/messages.inc.php||libraries/config/messages.inc.php": [
          "File: libraries/config/messages.inc.php -> libraries/config/messages.inc.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "58: );",
          "59: $strConfigCodemirrorEnable_name = __('Enable CodeMirror');",
          "60: $strConfigLintEnable_desc = __('Find any errors in the query before executing it.'",
          "62: $strConfigLintEnable_name = __('Enable linter');",
          "63: $strConfigMinSizeForInputField_desc = __(",
          "64:     'Defines the minimum size for input fields generated for CHAR and VARCHAR '",
          "",
          "[Removed Lines]",
          "61:     . ' Requires CodeMirror to be enabled.');",
          "",
          "[Added Lines]",
          "61:     . ' Requires CodeMirror to be enabled.'",
          "62: );",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Component.php||libraries/sql-parser/src/Component.php": [
          "File: libraries/sql-parser/src/Component.php -> libraries/sql-parser/src/Component.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:     public static function parse(",
          "41:     ) {",
          "",
          "[Removed Lines]",
          "38:         Parser $parser,",
          "39:         TokensList $list,",
          "40:         array $options = array()",
          "",
          "[Added Lines]",
          "38:         Parser $parser, TokensList $list, array $options = array()",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Components/AlterOperation.php||libraries/sql-parser/src/Components/AlterOperation.php": [
          "File: libraries/sql-parser/src/Components/AlterOperation.php -> libraries/sql-parser/src/Components/AlterOperation.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "187:         }",
          "189:         if ($ret->options->isEmpty()) {",
          "191:             return null;",
          "192:         }",
          "",
          "[Removed Lines]",
          "190:             $parser->error('Unrecognized alter operation.', $list->tokens[$list->idx]);",
          "",
          "[Added Lines]",
          "190:             $parser->error(",
          "191:                 __('Unrecognized alter operation.'),",
          "192:                 $list->tokens[$list->idx]",
          "193:             );",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Components/Array2d.php||libraries/sql-parser/src/Components/Array2d.php": [
          "File: libraries/sql-parser/src/Components/Array2d.php -> libraries/sql-parser/src/Components/Array2d.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "85:                     if ($count === -1) {",
          "86:                         $count = $arrCount;",
          "87:                     } elseif ($arrCount != $count) {",
          "89:                     }",
          "90:                     $ret[] = $arr;",
          "91:                     $state = 1;",
          "",
          "[Removed Lines]",
          "88:                         $parser->error(\"{$count} values were expected, but found {$arrCount}.\", $token);",
          "",
          "[Added Lines]",
          "88:                         $parser->error(",
          "89:                             sprintf(",
          "90:                                 __('%1$d values were expected, but found %2$d.'),",
          "91:                                 $count,",
          "92:                                 $arrCount",
          "93:                             ),",
          "94:                             $token",
          "95:                         );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:         if ($state === 0) {",
          "105:             $parser->error(",
          "107:                 $list->tokens[$list->idx]",
          "108:             );",
          "109:         }",
          "",
          "[Removed Lines]",
          "106:                 'An opening bracket followed by a set of values was expected.',",
          "",
          "[Added Lines]",
          "113:                 __('An opening bracket followed by a set of values was expected.'),",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Components/ArrayObj.php||libraries/sql-parser/src/Components/ArrayObj.php": [
          "File: libraries/sql-parser/src/Components/ArrayObj.php -> libraries/sql-parser/src/Components/ArrayObj.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:             if ($state === 0) {",
          "99:                 if (($token->type !== Token::TYPE_OPERATOR) || ($token->value !== '(')) {",
          "101:                     break;",
          "102:                 }",
          "103:                 $state = 1;",
          "",
          "[Removed Lines]",
          "100:                     $parser->error('An opening bracket was expected.', $token);",
          "",
          "[Added Lines]",
          "100:                     $parser->error(",
          "101:                         __('An opening bracket was expected.'),",
          "102:                         $token",
          "103:                     );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111:                 $state = 2;",
          "112:             } elseif ($state === 2) {",
          "113:                 if (($token->type !== Token::TYPE_OPERATOR) || (($token->value !== ',') && ($token->value !== ')'))) {",
          "115:                     break;",
          "116:                 }",
          "117:                 if ($token->value === ',') {",
          "",
          "[Removed Lines]",
          "114:                     $parser->error('A comma or a closing bracket was expected', $token);",
          "",
          "[Added Lines]",
          "117:                     $parser->error(",
          "118:                         __('A comma or a closing bracket was expected'),",
          "119:                         $token",
          "120:                     );",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Components/DataType.php||libraries/sql-parser/src/Components/DataType.php": [
          "File: libraries/sql-parser/src/Components/DataType.php -> libraries/sql-parser/src/Components/DataType.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "122:             if ($state === 0) {",
          "123:                 $ret->name = strtoupper($token->value);",
          "124:                 if (($token->type !== Token::TYPE_KEYWORD) || (!($token->flags & Token::FLAG_KEYWORD_DATA_TYPE))) {",
          "126:                 }",
          "127:                 $state = 1;",
          "128:             } elseif ($state === 1) {",
          "",
          "[Removed Lines]",
          "125:                     $parser->error('Unrecognized data type.', $token);",
          "",
          "[Added Lines]",
          "125:                     $parser->error(__('Unrecognized data type.'), $token);",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Components/Expression.php||libraries/sql-parser/src/Components/Expression.php": [
          "File: libraries/sql-parser/src/Components/Expression.php -> libraries/sql-parser/src/Components/Expression.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:                             break;",
          "220:                         }",
          "221:                     } elseif ($brackets < 0) {",
          "223:                         $brackets = 0;",
          "224:                     }",
          "225:                 } elseif ($token->value === ',') {",
          "",
          "[Removed Lines]",
          "222:                         $parser->error('Unexpected closing bracket.', $token);",
          "",
          "[Added Lines]",
          "222:                         $parser->error(__('Unexpected closing bracket.'), $token);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "240:             if ($alias) {",
          "242:                 if (!empty($ret->alias)) {",
          "244:                 }",
          "245:                 $ret->alias = $token->value;",
          "246:                 $alias = 0;",
          "",
          "[Removed Lines]",
          "243:                     $parser->error('An alias was previously found.', $token);",
          "",
          "[Added Lines]",
          "243:                     $parser->error(__('An alias was previously found.'), $token);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "253:                         if ((!empty($ret->database)) || ($dot)) {",
          "255:                         }",
          "256:                         $ret->database = $ret->table;",
          "257:                         $ret->table = $ret->column;",
          "",
          "[Removed Lines]",
          "254:                             $parser->error('Unexpected dot.', $token);",
          "",
          "[Added Lines]",
          "254:                             $parser->error(__('Unexpected dot.'), $token);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "277:                             ) {",
          "278:                                 if (!empty($ret->alias)) {",
          "279:                                     $parser->error(",
          "281:                                     );",
          "282:                                 }",
          "283:                                 $ret->alias = $token->value;",
          "",
          "[Removed Lines]",
          "280:                                         'An alias was previously found.', $token",
          "",
          "[Added Lines]",
          "280:                                         __('An alias was previously found.'),",
          "281:                                         $token",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "296:                         ) {",
          "297:                             if (!empty($ret->alias)) {",
          "298:                                 $parser->error(",
          "300:                                 );",
          "301:                             }",
          "302:                             $ret->alias = $token->value;",
          "",
          "[Removed Lines]",
          "299:                                     'An alias was previously found.', $token",
          "",
          "[Added Lines]",
          "300:                                     __('An alias was previously found.'),",
          "301:                                     $token",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "318:         }",
          "320:         if ($alias === 2) {",
          "322:         }",
          "",
          "[Removed Lines]",
          "321:             $parser->error('An alias was expected.', $list->tokens[$list->idx - 1]);",
          "",
          "[Added Lines]",
          "323:             $parser->error(",
          "324:                 __('An alias was expected.'),",
          "325:                 $list->tokens[$list->idx - 1]",
          "326:             );",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Components/ExpressionArray.php||libraries/sql-parser/src/Components/ExpressionArray.php": [
          "File: libraries/sql-parser/src/Components/ExpressionArray.php -> libraries/sql-parser/src/Components/ExpressionArray.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:     {",
          "37:         $ret = array();",
          "",
          "[Removed Lines]",
          "39:         $expr = null;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:         if ($state === 0) {",
          "94:             $parser->error(",
          "96:                 $list->tokens[$list->idx]",
          "97:             );",
          "98:         }",
          "",
          "[Removed Lines]",
          "95:                 'An expression was expected.',",
          "",
          "[Added Lines]",
          "93:                 __('An expression was expected.'),",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Components/FieldDefinition.php||libraries/sql-parser/src/Components/FieldDefinition.php": [
          "File: libraries/sql-parser/src/Components/FieldDefinition.php -> libraries/sql-parser/src/Components/FieldDefinition.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:                 if (($token->type === Token::TYPE_OPERATOR) && ($token->value === '(')) {",
          "199:                     $state = 1;",
          "200:                 } else {",
          "202:                     break;",
          "203:                 }",
          "204:             } elseif ($state === 1) {",
          "",
          "[Removed Lines]",
          "201:                     $parser->error('An opening bracket was expected.', $token);",
          "",
          "[Added Lines]",
          "201:                     $parser->error(",
          "202:                         __('An opening bracket was expected.'),",
          "203:                         $token",
          "204:                     );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:         }",
          "250:         if (($state !== 0) && ($state !== 6)) {",
          "252:         }",
          "254:         --$list->idx;",
          "",
          "[Removed Lines]",
          "251:             $parser->error('A closing bracket was expected.', $list->tokens[$list->idx - 1]);",
          "",
          "[Added Lines]",
          "254:             $parser->error(",
          "255:                 __('A closing bracket was expected.'),",
          "256:                 $list->tokens[$list->idx - 1]",
          "257:             );",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Components/Limit.php||libraries/sql-parser/src/Components/Limit.php": [
          "File: libraries/sql-parser/src/Components/Limit.php -> libraries/sql-parser/src/Components/Limit.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:             if (($token->type === Token::TYPE_KEYWORD) && ($token->value === 'OFFSET')) {",
          "89:                 if ($offset) {",
          "91:                 }",
          "92:                 $offset = true;",
          "93:                 continue;",
          "",
          "[Removed Lines]",
          "90:                     $parser->error('An offset was expected.', $token);",
          "",
          "[Added Lines]",
          "90:                     $parser->error(__('An offset was expected.'), $token);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:         }",
          "110:         if ($offset) {",
          "112:         }",
          "114:         --$list->idx;",
          "",
          "[Removed Lines]",
          "111:             $parser->error('An offset was expected.', $list->tokens[$list->idx - 1]);",
          "",
          "[Added Lines]",
          "111:             $parser->error(",
          "112:                 __('An offset was expected.'),",
          "113:                 $list->tokens[$list->idx - 1]",
          "114:             );",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Components/OptionsArray.php||libraries/sql-parser/src/Components/OptionsArray.php": [
          "File: libraries/sql-parser/src/Components/OptionsArray.php -> libraries/sql-parser/src/Components/OptionsArray.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "139:                     if (isset($ret->options[$lastOptionId])) {",
          "141:                         $lastOptionId = $lastAssignedId++;",
          "142:                     }",
          "143:                 } else {",
          "",
          "[Removed Lines]",
          "140:                         $parser->error('This option conflicts with \\'' . $ret->options[$lastOptionId] . '\\'.', $token);",
          "",
          "[Added Lines]",
          "140:                         $parser->error(",
          "141:                             sprintf(",
          "142:                                 __('This option conflicts with \"%1$s\".'),",
          "143:                                 $ret->options[$lastOptionId]",
          "144:                             ),",
          "145:                             $token",
          "146:                         );",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Components/RenameOperation.php||libraries/sql-parser/src/Components/RenameOperation.php": [
          "File: libraries/sql-parser/src/Components/RenameOperation.php -> libraries/sql-parser/src/Components/RenameOperation.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:                     )",
          "99:                 );",
          "100:                 if (empty($expr->old)) {",
          "102:                 }",
          "103:                 $state = 1;",
          "104:             } elseif ($state === 1) {",
          "105:                 if (($token->type === Token::TYPE_KEYWORD) && ($token->value === 'TO')) {",
          "106:                     $state = 2;",
          "107:                 } else {",
          "109:                     break;",
          "110:                 }",
          "111:             } elseif ($state === 2) {",
          "",
          "[Removed Lines]",
          "101:                     $parser->error('The old name of the table was expected.', $token);",
          "108:                     $parser->error('Keyword \"TO\" was expected.', $token);",
          "",
          "[Added Lines]",
          "101:                     $parser->error(",
          "102:                         __('The old name of the table was expected.'),",
          "103:                         $token",
          "104:                     );",
          "111:                     $parser->error(",
          "112:                         __('Keyword \"TO\" was expected.'),",
          "113:                         $token",
          "114:                     );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:                     )",
          "120:                 );",
          "121:                 if (empty($expr->new)) {",
          "123:                 }",
          "124:                 $state = 3;",
          "125:             } elseif ($state === 3) {",
          "",
          "[Removed Lines]",
          "122:                     $parser->error('The new name of the table was expected.', $token);",
          "",
          "[Added Lines]",
          "128:                     $parser->error(",
          "129:                         __('The new name of the table was expected.'),",
          "130:                         $token",
          "131:                     );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "134:         }",
          "136:         if ($state !== 3) {",
          "138:         }",
          "",
          "[Removed Lines]",
          "137:             $parser->error('A rename operation was expected.', $list->tokens[$list->idx - 1]);",
          "",
          "[Added Lines]",
          "146:             $parser->error(",
          "147:                 __('A rename operation was expected.'),",
          "148:                 $list->tokens[$list->idx - 1]",
          "149:             );",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Lexer.php||libraries/sql-parser/src/Lexer.php": [
          "File: libraries/sql-parser/src/Lexer.php -> libraries/sql-parser/src/Lexer.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: }",
          "",
          "[Removed Lines]",
          "12: namespace SqlParser;",
          "14: use SqlParser\\Exceptions\\LexerException;",
          "16: if (!defined('USE_UTF_STRINGS')) {",
          "23:     define('USE_UTF_STRINGS', true);",
          "29: if ((defined('USE_UTF_STRINGS')) && (USE_UTF_STRINGS)) {",
          "30:     mb_internal_encoding('UTF-8');",
          "31: }",
          "45: class Lexer",
          "46: {",
          "53:     public static $PARSER_METHODS = array(",
          "",
          "[Added Lines]",
          "13: namespace {",
          "15:     if (!function_exists('__')) {",
          "24:         function __($str)",
          "25:         {",
          "26:             return $str;",
          "27:         }",
          "28:     }",
          "31: namespace SqlParser {",
          "33:     use SqlParser\\Exceptions\\LexerException;",
          "35:     if (!defined('USE_UTF_STRINGS')) {",
          "42:         define('USE_UTF_STRINGS', true);",
          "43:     }",
          "48:     if ((defined('USE_UTF_STRINGS')) && (USE_UTF_STRINGS)) {",
          "49:         mb_internal_encoding('UTF-8');",
          "50:     }",
          "64:     class Lexer",
          "65:     {",
          "72:         public static $PARSER_METHODS = array(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:         'parseDelimiter', 'parseWhitespace', 'parseNumber', 'parseComment',",
          "78:         'parseOperator', 'parseBool', 'parseString', 'parseSymbol',",
          "79:         'parseKeyword', 'parseUnknown'",
          "178:             }",
          "226:                 }",
          "241:                 ) {",
          "247:                 }",
          "279:                 }",
          "287:             }",
          "316:         }",
          "354:                 } else {",
          "356:                 }",
          "368:                 }",
          "369:             }",
          "424:         }",
          "443:                 $token .= $this->str[$this->last];",
          "444:             }",
          "447:         }",
          "452:             if (Context::isComment($token)) {",
          "460:                     $token .= $this->str[$this->last];",
          "461:                 }",
          "462:                 $token .= $this->str[$this->last];",
          "464:             }",
          "475:                     }",
          "477:                         $token .= $this->str[$this->last];",
          "478:                     }",
          "479:                 }",
          "481:             }",
          "498:             return null;",
          "499:         }",
          "503:             . $this->str[++$this->last] . $this->str[++$this->last]; // _TRUE_ or _FALS_e",
          "509:             if (Context::isBool($token)) {",
          "511:             }",
          "599:                 }",
          "604:                 ) {",
          "606:                 } else {",
          "613:                 }",
          "614:             }",
          "646:             } else {",
          "650:                 $token .= $this->str[$this->last];",
          "651:             }",
          "652:         }",
          "683:             }",
          "688:         }",
          "706:         }",
          "723:             }",
          "729:     }",
          "730: }",
          "",
          "[Removed Lines]",
          "80:     );",
          "89:     public $strict = false;",
          "96:     public $str = '';",
          "106:     public $len = 0;",
          "113:     public $last = 0;",
          "120:     public $list;",
          "127:     public static $DEFAULT_DELIMITER = ';';",
          "135:     public $delimiter = ';';",
          "146:     public $delimiterLen = 1;",
          "159:     public $errors = array();",
          "167:     public function __construct($str, $strict = false)",
          "168:     {",
          "171:         $len = ($str instanceof UtfString) ? $str->length() : strlen($str);",
          "175:         if (!($str instanceof UtfString)) {",
          "176:             if ((USE_UTF_STRINGS) && ($len != mb_strlen($str))) {",
          "177:                 $str = new UtfString($str);",
          "179:         }",
          "181:         $this->str = $str;",
          "182:         $this->len = ($str instanceof UtfString) ? $str->length() : $len;",
          "184:         $this->strict = $strict;",
          "187:         $this->delimiter = static::$DEFAULT_DELIMITER;",
          "189:         $this->lex();",
          "190:     }",
          "197:     public function lex()",
          "198:     {",
          "208:         $list = new TokensList();",
          "214:         $lastToken = null;",
          "216:         for ($this->last = 0, $lastIdx = 0; $this->last < $this->len; $lastIdx = ++$this->last) {",
          "221:             $token = null;",
          "223:             foreach (static::$PARSER_METHODS as $method) {",
          "224:                 if (($token = $this->$method())) {",
          "225:                     break;",
          "227:             }",
          "229:             if ($token === null) {",
          "231:                 $token = new Token($this->str[$this->last]);",
          "232:                 $this->error('Unexpected character.', $this->str[$this->last], $this->last);",
          "233:             } elseif (($token->type === Token::TYPE_SYMBOL)",
          "234:                 && ($token->flags & Token::FLAG_SYMBOL_VARIABLE)",
          "235:                 && ($lastToken !== null)",
          "236:             ) {",
          "238:                 if ((($lastToken->type === Token::TYPE_SYMBOL)",
          "239:                     && ($lastToken->flags & Token::FLAG_SYMBOL_BACKTICK))",
          "240:                     || ($lastToken->type === Token::TYPE_STRING)",
          "242:                     $lastToken->token .= $token->token;",
          "243:                     $lastToken->type = Token::TYPE_SYMBOL;",
          "244:                     $lastToken->flags = Token::FLAG_SYMBOL_USER;",
          "245:                     $lastToken->value .= '@' . $token->value;",
          "246:                     continue;",
          "248:             }",
          "249:             $token->position = $lastIdx;",
          "251:             $list->tokens[$list->count++] = $token;",
          "254:             if (($token->type === Token::TYPE_NONE) && ($token->value === 'DELIMITER')) {",
          "255:                 if ($this->last + 1 >= $this->len) {",
          "256:                     $this->error('Expected whitespace(s) before delimiter.', '', $this->last + 1);",
          "257:                     continue;",
          "258:                 }",
          "262:                 $pos = ++$this->last;",
          "263:                 if (($token = $this->parseWhitespace()) !== null) {",
          "264:                     $token->position = $pos;",
          "265:                     $list->tokens[$list->count++] = $token;",
          "266:                 }",
          "269:                 if ($this->last + 1 >= $this->len) {",
          "270:                     $this->error('Expected delimiter.', '', $this->last + 1);",
          "271:                     continue;",
          "272:                 }",
          "273:                 $pos = $this->last + 1;",
          "276:                 $this->delimiter = '';",
          "277:                 while ((++$this->last < $this->len) && (!Context::isWhitespace($this->str[$this->last]))) {",
          "278:                     $this->delimiter .= $this->str[$this->last];",
          "280:                 --$this->last;",
          "283:                 $this->delimiterLen = strlen($this->delimiter);",
          "284:                 $token = new Token($this->delimiter, Token::TYPE_DELIMITER);",
          "285:                 $token->position = $pos;",
          "286:                 $list->tokens[$list->count++] = $token;",
          "289:             $lastToken = $token;",
          "290:         }",
          "293:         $list->tokens[$list->count++] = new Token(null, Token::TYPE_DELIMITER);",
          "296:         $this->list = $list;",
          "297:     }",
          "311:     public function error($msg = '', $str = '', $pos = 0, $code = 0)",
          "312:     {",
          "313:         $error = new LexerException($msg, $str, $pos, $code);",
          "314:         if ($this->strict) {",
          "315:             throw $error;",
          "317:         $this->errors[] = $error;",
          "318:     }",
          "325:     public function parseKeyword()",
          "326:     {",
          "327:         $token = '';",
          "333:         $ret = null;",
          "339:         $iEnd = $this->last;",
          "345:         $lastSpace = false;",
          "347:         for ($j = 1; $j < Context::KEYWORD_MAX_LENGTH && $this->last < $this->len; ++$j, ++$this->last) {",
          "350:             if (Context::isWhitespace($this->str[$this->last])) {",
          "351:                 if ($lastSpace) {",
          "352:                     --$j; // The size of the keyword didn't increase.",
          "353:                     continue;",
          "355:                     $lastSpace = true;",
          "357:             } else {",
          "358:                 $lastSpace = false;",
          "359:             }",
          "360:             $token .= $this->str[$this->last];",
          "361:             if (($this->last + 1 === $this->len) || (Context::isSeparator($this->str[$this->last + 1]))) {",
          "362:                 if (($flags = Context::isKeyword($token))) {",
          "363:                     $ret = new Token($token, Token::TYPE_KEYWORD, $flags);",
          "364:                     $iEnd = $this->last;",
          "370:         }",
          "372:         $this->last = $iEnd;",
          "373:         return $ret;",
          "374:     }",
          "381:     public function parseOperator()",
          "382:     {",
          "383:         $token = '';",
          "389:         $ret = null;",
          "395:         $iEnd = $this->last;",
          "397:         for ($j = 1; $j < Context::OPERATOR_MAX_LENGTH && $this->last < $this->len; ++$j, ++$this->last) {",
          "398:             $token .= $this->str[$this->last];",
          "399:             if ($flags = Context::isOperator($token)) {",
          "400:                 $ret = new Token($token, Token::TYPE_OPERATOR, $flags);",
          "401:                 $iEnd = $this->last;",
          "402:             }",
          "403:         }",
          "405:         $this->last = $iEnd;",
          "406:         return $ret;",
          "407:     }",
          "414:     public function parseWhitespace()",
          "415:     {",
          "416:         $token = $this->str[$this->last];",
          "418:         if (!Context::isWhitespace($token)) {",
          "419:             return null;",
          "420:         }",
          "422:         while ((++$this->last < $this->len) && (Context::isWhitespace($this->str[$this->last]))) {",
          "423:             $token .= $this->str[$this->last];",
          "426:         --$this->last;",
          "427:         return new Token($token, Token::TYPE_WHITESPACE);",
          "428:     }",
          "435:     public function parseComment()",
          "436:     {",
          "437:         $iBak = $this->last;",
          "438:         $token = $this->str[$this->last];",
          "441:         if (Context::isComment($token)) {",
          "442:             while ((++$this->last < $this->len) && ($this->str[$this->last] !== \"\\n\")) {",
          "445:             $token .= $this->str[$this->last];",
          "446:             return new Token($token, Token::TYPE_COMMENT, Token::FLAG_COMMENT_BASH);",
          "450:         if (++$this->last < $this->len) {",
          "451:             $token .= $this->str[$this->last];",
          "453:                 $flags = Token::FLAG_COMMENT_C;",
          "454:                 if (($this->last + 1 < $this->len) && ($this->str[$this->last + 1] === '!')) {",
          "456:                     $flags |= Token::FLAG_COMMENT_MYSQL_CMD;",
          "457:                 }",
          "458:                 while ((++$this->last < $this->len) &&",
          "459:                     (($this->str[$this->last - 1] !== '*') || ($this->str[$this->last] !== '/'))) {",
          "463:                 return new Token($token, Token::TYPE_COMMENT, $flags);",
          "465:         }",
          "468:         if (++$this->last < $this->len) {",
          "469:             $token .= $this->str[$this->last];",
          "470:             if (Context::isComment($token)) {",
          "471:                 if ($this->str[$this->last] !== \"\\n\") {",
          "473:                     while ((++$this->last < $this->len) && ($this->str[$this->last] !== \"\\n\")) {",
          "474:                         $token .= $this->str[$this->last];",
          "476:                     if ($this->last < $this->len) {",
          "480:                 return new Token($token, Token::TYPE_COMMENT, Token::FLAG_COMMENT_SQL);",
          "482:         }",
          "484:         $this->last = $iBak;",
          "485:         return null;",
          "486:     }",
          "493:     public function parseBool()",
          "494:     {",
          "495:         if ($this->last + 3 >= $this->len) {",
          "501:         $iBak = $this->last;",
          "502:         $token = $this->str[$this->last] . $this->str[++$this->last]",
          "505:         if (Context::isBool($token)) {",
          "506:             return new Token($token, Token::TYPE_BOOL);",
          "507:         } elseif (++$this->last < $this->len) {",
          "508:             $token .= $this->str[$this->last]; // fals_E_",
          "510:                 return new Token($token, Token::TYPE_BOOL, 1);",
          "512:         }",
          "514:         $this->last = $iBak;",
          "515:         return null;",
          "516:     }",
          "523:     public function parseNumber()",
          "524:     {",
          "554:         $iBak = $this->last;",
          "555:         $token = '';",
          "556:         $flags = 0;",
          "557:         $state = 1;",
          "558:         for (; $this->last < $this->len; ++$this->last) {",
          "559:             if ($state === 1) {",
          "560:                 if ($this->str[$this->last] === '-') {",
          "561:                     $flags |= Token::FLAG_NUMBER_NEGATIVE;",
          "562:                 } elseif (($this->str[$this->last] === '0') && ($this->last + 1 < $this->len)",
          "563:                     && (($this->str[$this->last + 1] === 'x') || ($this->str[$this->last + 1] === 'X'))",
          "564:                 ) {",
          "565:                     $token .= $this->str[$this->last++];",
          "566:                     $state = 2;",
          "567:                 } elseif (($this->str[$this->last] >= '0') && ($this->str[$this->last] <= '9')) {",
          "568:                     $state = 3;",
          "569:                 } elseif ($this->str[$this->last] === '.') {",
          "570:                     $state = 4;",
          "571:                 } elseif ($this->str[$this->last] !== '+') {",
          "573:                     break;",
          "574:                 }",
          "575:             } elseif ($state === 2) {",
          "576:                 $flags |= Token::FLAG_NUMBER_HEX;",
          "577:                 if (!((($this->str[$this->last] >= '0') && ($this->str[$this->last] <= '9'))",
          "578:                     || (($this->str[$this->last] >= 'A') && ($this->str[$this->last] <= 'F'))",
          "579:                     || (($this->str[$this->last] >= 'a') && ($this->str[$this->last] <= 'f')))",
          "580:                 ) {",
          "581:                     break;",
          "582:                 }",
          "583:             } elseif ($state === 3) {",
          "584:                 if ($this->str[$this->last] === '.') {",
          "585:                     $state = 4;",
          "586:                 } elseif (($this->str[$this->last] === 'e') || ($this->str[$this->last] === 'E')) {",
          "587:                     $state = 5;",
          "588:                 } elseif (($this->str[$this->last] < '0') || ($this->str[$this->last] > '9')) {",
          "590:                     break;",
          "591:                 }",
          "592:             } elseif ($state === 4) {",
          "593:                 $flags |= Token::FLAG_NUMBER_FLOAT;",
          "594:                 if (($this->str[$this->last] === 'e') || ($this->str[$this->last] === 'E')) {",
          "595:                     $state = 5;",
          "596:                 } elseif (($this->str[$this->last] < '0') || ($this->str[$this->last] > '9')) {",
          "598:                     break;",
          "600:             } elseif ($state === 5) {",
          "601:                 $flags |= Token::FLAG_NUMBER_APPROXIMATE;",
          "602:                 if (($this->str[$this->last] === '+') || ($this->str[$this->last] === '-')",
          "603:                     || ((($this->str[$this->last] >= '0') && ($this->str[$this->last] <= '9')))",
          "605:                     $state = 6;",
          "607:                     break;",
          "608:                 }",
          "609:             } elseif ($state === 6) {",
          "610:                 if (($this->str[$this->last] < '0') || ($this->str[$this->last] > '9')) {",
          "612:                     break;",
          "615:             $token .= $this->str[$this->last];",
          "616:         }",
          "617:         if (($state === 2) || ($state === 3) || (($token !== '.') && ($state === 4)) || ($state === 6)) {",
          "618:             --$this->last;",
          "619:             return new Token($token, Token::TYPE_NUMBER, $flags);",
          "620:         }",
          "621:         $this->last = $iBak;",
          "622:         return null;",
          "623:     }",
          "632:     public function parseString($quote = '')",
          "633:     {",
          "634:         $token = $this->str[$this->last];",
          "635:         if ((!($flags = Context::isString($token))) && ($token !== $quote)) {",
          "636:             return null;",
          "637:         }",
          "638:         $quote = $token;",
          "640:         while (++$this->last < $this->len) {",
          "641:             if (($this->last + 1 < $this->len)",
          "642:                 && ((($this->str[$this->last] === $quote) && ($this->str[$this->last + 1] === $quote))",
          "643:                 || (($this->str[$this->last] === '\\\\') && ($quote !== '`')))",
          "644:             ) {",
          "645:                 $token .= $this->str[$this->last] . $this->str[++$this->last];",
          "647:                 if ($this->str[$this->last] === $quote) {",
          "648:                     break;",
          "649:                 }",
          "654:         if (($this->last >= $this->len) || ($this->str[$this->last] !== $quote)) {",
          "655:             $this->error('Ending quote ' . $quote . ' was expected.', '', $this->last);",
          "656:         } else {",
          "657:             $token .= $this->str[$this->last];",
          "658:         }",
          "659:         return new Token($token, Token::TYPE_STRING, $flags);",
          "660:     }",
          "667:     public function parseSymbol()",
          "668:     {",
          "669:         $token = $this->str[$this->last];",
          "670:         if (!($flags = Context::isSymbol($token))) {",
          "671:             return null;",
          "672:         }",
          "674:         if ($flags & Token::FLAG_SYMBOL_VARIABLE) {",
          "675:             ++$this->last;",
          "676:         } else {",
          "677:             $token = '';",
          "678:         }",
          "680:         if (($str = $this->parseString('`')) === null) {",
          "681:             if (($str = static::parseUnknown()) === null) {",
          "682:                 $this->error('Variable name was expected.', $this->str[$this->last], $this->last);",
          "684:         }",
          "686:         if ($str !== null) {",
          "687:             $token .= $str->token;",
          "690:         return new Token($token, Token::TYPE_SYMBOL, $flags);",
          "691:     }",
          "698:     public function parseUnknown()",
          "699:     {",
          "700:         $token = $this->str[$this->last];",
          "701:         if (Context::isSeparator($token)) {",
          "702:             return null;",
          "703:         }",
          "704:         while ((++$this->last < $this->len) && (!Context::isSeparator($this->str[$this->last]))) {",
          "705:             $token .= $this->str[$this->last];",
          "707:         --$this->last;",
          "708:         return new Token($token);",
          "709:     }",
          "716:     public function parseDelimiter()",
          "717:     {",
          "718:         $idx = 0;",
          "720:         while ($idx < $this->delimiterLen) {",
          "721:             if ($this->delimiter[$idx] !== $this->str[$this->last + $idx]) {",
          "722:                 return null;",
          "724:             ++$idx;",
          "725:         }",
          "727:         $this->last += $this->delimiterLen - 1;",
          "728:         return new Token($this->delimiter, Token::TYPE_DELIMITER);",
          "",
          "[Added Lines]",
          "99:         );",
          "108:         public $strict = false;",
          "115:         public $str = '';",
          "125:         public $len = 0;",
          "132:         public $last = 0;",
          "139:         public $list;",
          "146:         public static $DEFAULT_DELIMITER = ';';",
          "154:         public $delimiter = ';';",
          "165:         public $delimiterLen = 1;",
          "178:         public $errors = array();",
          "186:         public function __construct($str, $strict = false)",
          "187:         {",
          "190:             $len = ($str instanceof UtfString) ? $str->length() : strlen($str);",
          "194:             if (!($str instanceof UtfString)) {",
          "195:                 if ((USE_UTF_STRINGS) && ($len != mb_strlen($str))) {",
          "196:                     $str = new UtfString($str);",
          "197:                 }",
          "200:             $this->str = $str;",
          "201:             $this->len = ($str instanceof UtfString) ? $str->length() : $len;",
          "203:             $this->strict = $strict;",
          "206:             $this->delimiter = static::$DEFAULT_DELIMITER;",
          "208:             $this->lex();",
          "209:         }",
          "216:         public function lex()",
          "217:         {",
          "227:             $list = new TokensList();",
          "233:             $lastToken = null;",
          "235:             for ($this->last = 0, $lastIdx = 0; $this->last < $this->len; $lastIdx = ++$this->last) {",
          "240:                 $token = null;",
          "242:                 foreach (static::$PARSER_METHODS as $method) {",
          "243:                     if (($token = $this->$method())) {",
          "244:                         break;",
          "245:                     }",
          "248:                 if ($token === null) {",
          "250:                     $token = new Token($this->str[$this->last]);",
          "251:                     $this->error(",
          "252:                         __('Unexpected character.'),",
          "253:                         $this->str[$this->last],",
          "254:                         $this->last",
          "255:                     );",
          "256:                 } elseif (($token->type === Token::TYPE_SYMBOL)",
          "257:                     && ($token->flags & Token::FLAG_SYMBOL_VARIABLE)",
          "258:                     && ($lastToken !== null)",
          "261:                     if ((($lastToken->type === Token::TYPE_SYMBOL)",
          "262:                         && ($lastToken->flags & Token::FLAG_SYMBOL_BACKTICK))",
          "263:                         || ($lastToken->type === Token::TYPE_STRING)",
          "264:                     ) {",
          "265:                         $lastToken->token .= $token->token;",
          "266:                         $lastToken->type = Token::TYPE_SYMBOL;",
          "267:                         $lastToken->flags = Token::FLAG_SYMBOL_USER;",
          "268:                         $lastToken->value .= '@' . $token->value;",
          "269:                         continue;",
          "270:                     }",
          "272:                 $token->position = $lastIdx;",
          "274:                 $list->tokens[$list->count++] = $token;",
          "277:                 if (($token->type === Token::TYPE_NONE) && ($token->value === 'DELIMITER')) {",
          "278:                     if ($this->last + 1 >= $this->len) {",
          "279:                         $this->error(",
          "280:                             __('Expected whitespace(s) before delimiter.'),",
          "281:                             '',",
          "282:                             $this->last + 1",
          "283:                         );",
          "284:                         continue;",
          "285:                     }",
          "289:                     $pos = ++$this->last;",
          "290:                     if (($token = $this->parseWhitespace()) !== null) {",
          "291:                         $token->position = $pos;",
          "292:                         $list->tokens[$list->count++] = $token;",
          "293:                     }",
          "296:                     if ($this->last + 1 >= $this->len) {",
          "297:                         $this->error(",
          "298:                             __('Expected delimiter.'),",
          "299:                             '',",
          "300:                             $this->last + 1",
          "301:                         );",
          "302:                         continue;",
          "303:                     }",
          "304:                     $pos = $this->last + 1;",
          "307:                     $this->delimiter = '';",
          "308:                     while ((++$this->last < $this->len) && (!Context::isWhitespace($this->str[$this->last]))) {",
          "309:                         $this->delimiter .= $this->str[$this->last];",
          "310:                     }",
          "311:                     --$this->last;",
          "314:                     $this->delimiterLen = strlen($this->delimiter);",
          "315:                     $token = new Token($this->delimiter, Token::TYPE_DELIMITER);",
          "316:                     $token->position = $pos;",
          "317:                     $list->tokens[$list->count++] = $token;",
          "320:                 $lastToken = $token;",
          "324:             $list->tokens[$list->count++] = new Token(null, Token::TYPE_DELIMITER);",
          "327:             $this->list = $list;",
          "342:         public function error($msg = '', $str = '', $pos = 0, $code = 0)",
          "343:         {",
          "344:             $error = new LexerException($msg, $str, $pos, $code);",
          "345:             if ($this->strict) {",
          "346:                 throw $error;",
          "347:             }",
          "348:             $this->errors[] = $error;",
          "349:         }",
          "356:         public function parseKeyword()",
          "357:         {",
          "358:             $token = '';",
          "364:             $ret = null;",
          "370:             $iEnd = $this->last;",
          "376:             $lastSpace = false;",
          "378:             for ($j = 1; $j < Context::KEYWORD_MAX_LENGTH && $this->last < $this->len; ++$j, ++$this->last) {",
          "381:                 if (Context::isWhitespace($this->str[$this->last])) {",
          "382:                     if ($lastSpace) {",
          "383:                         --$j; // The size of the keyword didn't increase.",
          "384:                         continue;",
          "385:                     } else {",
          "386:                         $lastSpace = true;",
          "387:                     }",
          "389:                     $lastSpace = false;",
          "391:                 $token .= $this->str[$this->last];",
          "392:                 if (($this->last + 1 === $this->len) || (Context::isSeparator($this->str[$this->last + 1]))) {",
          "393:                     if (($flags = Context::isKeyword($token))) {",
          "394:                         $ret = new Token($token, Token::TYPE_KEYWORD, $flags);",
          "395:                         $iEnd = $this->last;",
          "399:                     }",
          "403:             $this->last = $iEnd;",
          "404:             return $ret;",
          "405:         }",
          "412:         public function parseOperator()",
          "413:         {",
          "414:             $token = '';",
          "420:             $ret = null;",
          "426:             $iEnd = $this->last;",
          "428:             for ($j = 1; $j < Context::OPERATOR_MAX_LENGTH && $this->last < $this->len; ++$j, ++$this->last) {",
          "429:                 $token .= $this->str[$this->last];",
          "430:                 if ($flags = Context::isOperator($token)) {",
          "431:                     $ret = new Token($token, Token::TYPE_OPERATOR, $flags);",
          "432:                     $iEnd = $this->last;",
          "433:                 }",
          "434:             }",
          "436:             $this->last = $iEnd;",
          "437:             return $ret;",
          "445:         public function parseWhitespace()",
          "446:         {",
          "447:             $token = $this->str[$this->last];",
          "449:             if (!Context::isWhitespace($token)) {",
          "450:                 return null;",
          "451:             }",
          "453:             while ((++$this->last < $this->len) && (Context::isWhitespace($this->str[$this->last]))) {",
          "457:             --$this->last;",
          "458:             return new Token($token, Token::TYPE_WHITESPACE);",
          "466:         public function parseComment()",
          "467:         {",
          "468:             $iBak = $this->last;",
          "469:             $token = $this->str[$this->last];",
          "473:                 while ((++$this->last < $this->len) && ($this->str[$this->last] !== \"\\n\")) {",
          "477:                 return new Token($token, Token::TYPE_COMMENT, Token::FLAG_COMMENT_BASH);",
          "481:             if (++$this->last < $this->len) {",
          "482:                 $token .= $this->str[$this->last];",
          "483:                 if (Context::isComment($token)) {",
          "484:                     $flags = Token::FLAG_COMMENT_C;",
          "485:                     if (($this->last + 1 < $this->len) && ($this->str[$this->last + 1] === '!')) {",
          "487:                         $flags |= Token::FLAG_COMMENT_MYSQL_CMD;",
          "489:                     while ((++$this->last < $this->len) &&",
          "490:                     (($this->str[$this->last - 1] !== '*') || ($this->str[$this->last] !== '/'))) {",
          "493:                     $token .= $this->str[$this->last];",
          "494:                     return new Token($token, Token::TYPE_COMMENT, $flags);",
          "499:             if (++$this->last < $this->len) {",
          "500:                 $token .= $this->str[$this->last];",
          "501:                 if (Context::isComment($token)) {",
          "502:                     if ($this->str[$this->last] !== \"\\n\") {",
          "504:                         while ((++$this->last < $this->len) && ($this->str[$this->last] !== \"\\n\")) {",
          "505:                             $token .= $this->str[$this->last];",
          "506:                         }",
          "507:                         if ($this->last < $this->len) {",
          "508:                             $token .= $this->str[$this->last];",
          "509:                         }",
          "510:                     }",
          "511:                     return new Token($token, Token::TYPE_COMMENT, Token::FLAG_COMMENT_SQL);",
          "512:                 }",
          "513:             }",
          "515:             $this->last = $iBak;",
          "524:         public function parseBool()",
          "525:         {",
          "526:             if ($this->last + 3 >= $this->len) {",
          "529:                 return null;",
          "530:             }",
          "532:             $iBak = $this->last;",
          "533:             $token = $this->str[$this->last] . $this->str[++$this->last]",
          "537:                 return new Token($token, Token::TYPE_BOOL);",
          "538:             } elseif (++$this->last < $this->len) {",
          "539:                 $token .= $this->str[$this->last]; // fals_E_",
          "540:                 if (Context::isBool($token)) {",
          "541:                     return new Token($token, Token::TYPE_BOOL, 1);",
          "542:                 }",
          "545:             $this->last = $iBak;",
          "546:             return null;",
          "547:         }",
          "554:         public function parseNumber()",
          "555:         {",
          "585:             $iBak = $this->last;",
          "586:             $token = '';",
          "587:             $flags = 0;",
          "588:             $state = 1;",
          "589:             for (; $this->last < $this->len; ++$this->last) {",
          "590:                 if ($state === 1) {",
          "591:                     if ($this->str[$this->last] === '-') {",
          "592:                         $flags |= Token::FLAG_NUMBER_NEGATIVE;",
          "593:                     } elseif (($this->str[$this->last] === '0') && ($this->last + 1 < $this->len)",
          "594:                         && (($this->str[$this->last + 1] === 'x') || ($this->str[$this->last + 1] === 'X'))",
          "595:                     ) {",
          "596:                         $token .= $this->str[$this->last++];",
          "597:                         $state = 2;",
          "598:                     } elseif (($this->str[$this->last] >= '0') && ($this->str[$this->last] <= '9')) {",
          "599:                         $state = 3;",
          "600:                     } elseif ($this->str[$this->last] === '.') {",
          "601:                         $state = 4;",
          "602:                     } elseif ($this->str[$this->last] !== '+') {",
          "604:                         break;",
          "605:                     }",
          "606:                 } elseif ($state === 2) {",
          "607:                     $flags |= Token::FLAG_NUMBER_HEX;",
          "608:                     if (!((($this->str[$this->last] >= '0') && ($this->str[$this->last] <= '9'))",
          "609:                         || (($this->str[$this->last] >= 'A') && ($this->str[$this->last] <= 'F'))",
          "610:                         || (($this->str[$this->last] >= 'a') && ($this->str[$this->last] <= 'f')))",
          "611:                     ) {",
          "612:                         break;",
          "613:                     }",
          "614:                 } elseif ($state === 3) {",
          "615:                     if ($this->str[$this->last] === '.') {",
          "616:                         $state = 4;",
          "617:                     } elseif (($this->str[$this->last] === 'e') || ($this->str[$this->last] === 'E')) {",
          "618:                         $state = 5;",
          "619:                     } elseif (($this->str[$this->last] < '0') || ($this->str[$this->last] > '9')) {",
          "621:                         break;",
          "622:                     }",
          "623:                 } elseif ($state === 4) {",
          "624:                     $flags |= Token::FLAG_NUMBER_FLOAT;",
          "625:                     if (($this->str[$this->last] === 'e') || ($this->str[$this->last] === 'E')) {",
          "626:                         $state = 5;",
          "627:                     } elseif (($this->str[$this->last] < '0') || ($this->str[$this->last] > '9')) {",
          "629:                         break;",
          "630:                     }",
          "631:                 } elseif ($state === 5) {",
          "632:                     $flags |= Token::FLAG_NUMBER_APPROXIMATE;",
          "633:                     if (($this->str[$this->last] === '+') || ($this->str[$this->last] === '-')",
          "634:                         || ((($this->str[$this->last] >= '0') && ($this->str[$this->last] <= '9')))",
          "635:                     ) {",
          "636:                         $state = 6;",
          "637:                     } else {",
          "638:                         break;",
          "639:                     }",
          "640:                 } elseif ($state === 6) {",
          "641:                     if (($this->str[$this->last] < '0') || ($this->str[$this->last] > '9')) {",
          "643:                         break;",
          "644:                     }",
          "646:                 $token .= $this->str[$this->last];",
          "647:             }",
          "648:             if (($state === 2) || ($state === 3) || (($token !== '.') && ($state === 4)) || ($state === 6)) {",
          "649:                 --$this->last;",
          "650:                 return new Token($token, Token::TYPE_NUMBER, $flags);",
          "651:             }",
          "652:             $this->last = $iBak;",
          "653:             return null;",
          "654:         }",
          "663:         public function parseString($quote = '')",
          "664:         {",
          "665:             $token = $this->str[$this->last];",
          "666:             if ((!($flags = Context::isString($token))) && ($token !== $quote)) {",
          "667:                 return null;",
          "668:             }",
          "669:             $quote = $token;",
          "671:             while (++$this->last < $this->len) {",
          "672:                 if (($this->last + 1 < $this->len)",
          "673:                     && ((($this->str[$this->last] === $quote) && ($this->str[$this->last + 1] === $quote))",
          "674:                     || (($this->str[$this->last] === '\\\\') && ($quote !== '`')))",
          "676:                     $token .= $this->str[$this->last] . $this->str[++$this->last];",
          "678:                     if ($this->str[$this->last] === $quote) {",
          "679:                         break;",
          "680:                     }",
          "681:                     $token .= $this->str[$this->last];",
          "685:             if (($this->last >= $this->len) || ($this->str[$this->last] !== $quote)) {",
          "686:                 $this->error(",
          "687:                     sprintf(",
          "688:                         __('Ending quote %1$s was expected.'),",
          "689:                         $quote",
          "690:                     ),",
          "691:                     '',",
          "692:                     $this->last",
          "693:                 );",
          "697:             return new Token($token, Token::TYPE_STRING, $flags);",
          "705:         public function parseSymbol()",
          "706:         {",
          "707:             $token = $this->str[$this->last];",
          "708:             if (!($flags = Context::isSymbol($token))) {",
          "709:                 return null;",
          "710:             }",
          "712:             if ($flags & Token::FLAG_SYMBOL_VARIABLE) {",
          "713:                 ++$this->last;",
          "714:             } else {",
          "715:                 $token = '';",
          "716:             }",
          "718:             if (($str = $this->parseString('`')) === null) {",
          "719:                 if (($str = static::parseUnknown()) === null) {",
          "720:                     $this->error(",
          "721:                         __('Variable name was expected.'),",
          "722:                         $this->str[$this->last],",
          "723:                         $this->last",
          "724:                     );",
          "725:                 }",
          "726:             }",
          "728:             if ($str !== null) {",
          "729:                 $token .= $str->token;",
          "732:             return new Token($token, Token::TYPE_SYMBOL, $flags);",
          "740:         public function parseUnknown()",
          "741:         {",
          "742:             $token = $this->str[$this->last];",
          "743:             if (Context::isSeparator($token)) {",
          "744:                 return null;",
          "745:             }",
          "746:             while ((++$this->last < $this->len) && (!Context::isSeparator($this->str[$this->last]))) {",
          "747:                 $token .= $this->str[$this->last];",
          "748:             }",
          "749:             --$this->last;",
          "750:             return new Token($token);",
          "758:         public function parseDelimiter()",
          "759:         {",
          "760:             $idx = 0;",
          "762:             while ($idx < $this->delimiterLen) {",
          "763:                 if ($this->delimiter[$idx] !== $this->str[$this->last + $idx]) {",
          "764:                     return null;",
          "765:                 }",
          "766:                 ++$idx;",
          "769:             $this->last += $this->delimiterLen - 1;",
          "770:             return new Token($this->delimiter, Token::TYPE_DELIMITER);",
          "771:         }",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Parser.php||libraries/sql-parser/src/Parser.php": [
          "File: libraries/sql-parser/src/Parser.php -> libraries/sql-parser/src/Parser.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "272:     {",
          "338:             }",
          "394:         }",
          "413:         }",
          "415:     }",
          "416: }",
          "",
          "[Removed Lines]",
          "10: namespace SqlParser;",
          "12: use SqlParser\\Statements\\SelectStatement;",
          "13: use SqlParser\\Exceptions\\ParserException;",
          "24: class Parser",
          "25: {",
          "32:     public static $STATEMENT_PARSERS = array(",
          "34:         'EXPLAIN'       => 'SqlParser\\\\Statements\\\\ExplainStatement',",
          "38:         'ANALYZE'       => 'SqlParser\\\\Statements\\\\AnalyzeStatement',",
          "39:         'BACKUP'        => 'SqlParser\\\\Statements\\\\BackupStatement',",
          "40:         'CHECK'         => 'SqlParser\\\\Statements\\\\CheckStatement',",
          "41:         'CHECKSUM'      => 'SqlParser\\\\Statements\\\\ChecksumStatement',",
          "42:         'OPTIMIZE'      => 'SqlParser\\\\Statements\\\\OptimizeStatement',",
          "43:         'REPAIR'        => 'SqlParser\\\\Statements\\\\RepairStatement',",
          "44:         'RESTORE'       => 'SqlParser\\\\Statements\\\\RestoreStatement',",
          "48:         'SET'           => '',",
          "49:         'SHOW'          => 'SqlParser\\\\Statements\\\\ShowStatement',",
          "53:         'ALTER'         => 'SqlParser\\\\Statements\\\\AlterStatement',",
          "54:         'CREATE'        => 'SqlParser\\\\Statements\\\\CreateStatement',",
          "55:         'DROP'          => 'SqlParser\\\\Statements\\\\DropStatement',",
          "56:         'RENAME'        => 'SqlParser\\\\Statements\\\\RenameStatement',",
          "57:         'TRUNCATE'      => 'SqlParser\\\\Statements\\\\TruncateStatement',",
          "61:         'CALL'          => 'SqlParser\\\\Statements\\\\CallStatement',",
          "62:         'DELETE'        => 'SqlParser\\\\Statements\\\\DeleteStatement',",
          "63:         'DO'            => '',",
          "64:         'HANDLER'       => '',",
          "65:         'INSERT'        => 'SqlParser\\\\Statements\\\\InsertStatement',",
          "66:         'LOAD'          => '',",
          "67:         'REPLACE'       => 'SqlParser\\\\Statements\\\\ReplaceStatement',",
          "68:         'SELECT'        => 'SqlParser\\\\Statements\\\\SelectStatement',",
          "69:         'UPDATE'        => 'SqlParser\\\\Statements\\\\UpdateStatement',",
          "73:         'PREPARE'       => '',",
          "74:         'EXECUTE'       => '',",
          "75:     );",
          "82:     public static $KEYWORD_PARSERS = array(",
          "85:         '_OPTIONS'      => array(",
          "86:             'class'     => 'SqlParser\\\\Components\\\\OptionsArray',",
          "87:             'field'     => 'options',",
          "88:         ),",
          "90:         'ALTER'         => array(",
          "91:             'class'     => 'SqlParser\\\\Components\\\\Expression',",
          "92:             'field'     => 'table',",
          "93:             'options'   => array('skipColumn' => true),",
          "94:         ),",
          "95:         'ANALYZE'       => array(",
          "96:             'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "97:             'field'     => 'tables',",
          "98:             'options'   => array('skipColumn' => true),",
          "99:         ),",
          "100:         'BACKUP'        => array(",
          "101:             'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "102:             'field'     => 'tables',",
          "103:             'options'   => array('skipColumn' => true),",
          "104:         ),",
          "105:         'CALL'          => array(",
          "106:             'class'     => 'SqlParser\\\\Components\\\\FunctionCall',",
          "107:             'field'     => 'call',",
          "108:         ),",
          "109:         'CHECK'         => array(",
          "110:             'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "111:             'field'     => 'tables',",
          "112:             'options'   => array('skipColumn' => true),",
          "113:         ),",
          "114:         'CHECKSUM'      => array(",
          "115:             'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "116:             'field'     => 'tables',",
          "117:             'options'   => array('skipColumn' => true),",
          "118:         ),",
          "119:         'DROP'          => array(",
          "120:             'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "121:             'field'     => 'fields',",
          "122:             'options'   => array('skipColumn' => true),",
          "123:         ),",
          "124:         'FROM'          => array(",
          "125:             'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "126:             'field'     => 'from',",
          "127:             'options'   => array('skipColumn' => true),",
          "128:         ),",
          "129:         'GROUP BY'      => array(",
          "130:             'class'     => 'SqlParser\\\\Components\\\\OrderKeyword',",
          "131:             'field'     => 'group',",
          "132:         ),",
          "133:         'HAVING'        => array(",
          "134:             'class'     => 'SqlParser\\\\Components\\\\Condition',",
          "135:             'field'     => 'having',",
          "136:         ),",
          "137:         'INTO'          => array(",
          "138:             'class'     => 'SqlParser\\\\Components\\\\IntoKeyword',",
          "139:             'field'     => 'into',",
          "140:         ),",
          "141:         'JOIN'          => array(",
          "142:             'class'     => 'SqlParser\\\\Components\\\\JoinKeyword',",
          "143:             'field'     => 'join',",
          "144:         ),",
          "145:         'LEFT JOIN'     => array(",
          "146:             'class'     => 'SqlParser\\\\Components\\\\JoinKeyword',",
          "147:             'field'     => 'join',",
          "148:         ),",
          "149:         'RIGHT JOIN'    => array(",
          "150:             'class'     => 'SqlParser\\\\Components\\\\JoinKeyword',",
          "151:             'field'     => 'join',",
          "152:         ),",
          "153:         'INNER JOIN'    => array(",
          "154:             'class'     => 'SqlParser\\\\Components\\\\JoinKeyword',",
          "155:             'field'     => 'join',",
          "156:         ),",
          "157:         'FULL JOIN'     => array(",
          "158:             'class'     => 'SqlParser\\\\Components\\\\JoinKeyword',",
          "159:             'field'     => 'join',",
          "160:         ),",
          "161:         'LIMIT'         => array(",
          "162:             'class'     => 'SqlParser\\\\Components\\\\Limit',",
          "163:             'field'     => 'limit',",
          "164:         ),",
          "165:         'OPTIMIZE'      => array(",
          "166:             'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "167:             'field'     => 'tables',",
          "168:             'options'   => array('skipColumn' => true),",
          "169:         ),",
          "170:         'ORDER BY'      => array(",
          "171:             'class'     => 'SqlParser\\\\Components\\\\OrderKeyword',",
          "172:             'field'     => 'order',",
          "173:         ),",
          "174:         'PARTITION'     => array(",
          "175:             'class'     => 'SqlParser\\\\Components\\\\ArrayObj',",
          "176:             'field'     => 'partition',",
          "177:         ),",
          "178:         'PROCEDURE'     => array(",
          "179:             'class'     => 'SqlParser\\\\Components\\\\FunctionCall',",
          "180:             'field'     => 'procedure',",
          "181:         ),",
          "182:         'RENAME'        => array(",
          "183:             'class'     => 'SqlParser\\\\Components\\\\RenameOperation',",
          "184:             'field'     => 'renames',",
          "185:         ),",
          "186:         'REPAIR'        => array(",
          "187:             'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "188:             'field'     => 'tables',",
          "189:             'options'   => array('skipColumn' => true),",
          "190:         ),",
          "191:         'RESTORE'       => array(",
          "192:             'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "193:             'field'     => 'tables',",
          "194:             'options'   => array('skipColumn' => true),",
          "195:         ),",
          "196:         'SET'           => array(",
          "197:             'class'     => 'SqlParser\\\\Components\\\\SetOperation',",
          "198:             'field'     => 'set',",
          "199:         ),",
          "200:         'SELECT'        => array(",
          "201:             'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "202:             'field'     => 'expr',",
          "203:         ),",
          "204:         'TRUNCATE'      => array(",
          "205:             'class'     => 'SqlParser\\\\Components\\\\Expression',",
          "206:             'field'     => 'table',",
          "207:             'options'   => array('skipColumn' => true),",
          "208:         ),",
          "209:         'UPDATE'        => array(",
          "210:             'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "211:             'field'     => 'tables',",
          "212:             'options'   => array('skipColumn' => true),",
          "213:         ),",
          "214:         'VALUE'         => array(",
          "215:             'class'     => 'SqlParser\\\\Components\\\\Array2d',",
          "216:             'field'     => 'values',",
          "217:         ),",
          "218:         'VALUES'        => array(",
          "219:             'class'     => 'SqlParser\\\\Components\\\\Array2d',",
          "220:             'field'     => 'values',",
          "221:         ),",
          "222:         'WHERE'         => array(",
          "223:             'class'     => 'SqlParser\\\\Components\\\\Condition',",
          "224:             'field'     => 'where',",
          "225:         ),",
          "227:     );",
          "234:     public $list;",
          "243:     public $strict = false;",
          "256:     public $errors = array();",
          "263:     public $statements = array();",
          "271:     public function __construct($list = null, $strict = false)",
          "273:         if ((is_string($list)) || ($list instanceof UtfString)) {",
          "274:             $lexer = new Lexer($list, $strict);",
          "275:             $this->list = $lexer->list;",
          "276:         } elseif ($list instanceof TokensList) {",
          "277:             $this->list = $list;",
          "278:         }",
          "280:         $this->strict = $strict;",
          "282:         if ($list !== null) {",
          "283:             $this->parse();",
          "284:         }",
          "285:     }",
          "292:     public function parse()",
          "293:     {",
          "299:         $lastStatement = null;",
          "305:         $inUnion = true;",
          "311:         $prevLastIdx = -1;",
          "317:         $list = &$this->list;",
          "319:         for (; $list->idx < $list->count; ++$list->idx) {",
          "325:             $token = $list->tokens[$list->idx];",
          "329:             if ($token->type !== Token::TYPE_KEYWORD) {",
          "330:                 if (($token->type !== TOKEN::TYPE_COMMENT)",
          "331:                     && ($token->type !== Token::TYPE_WHITESPACE)",
          "332:                     && ($token->type !== Token::TYPE_OPERATOR) // `(` and `)`",
          "333:                     && ($token->type !== Token::TYPE_DELIMITER)",
          "334:                 ) {",
          "335:                     $this->error('Unexpected beginning of statement.', $token);",
          "336:                 }",
          "337:                 continue;",
          "340:             if ($token->value === 'UNION') {",
          "341:                 $inUnion = true;",
          "342:                 continue;",
          "343:             }",
          "346:             if (empty(static::$STATEMENT_PARSERS[$token->value])) {",
          "347:                 $this->error('Unrecognized statement type.', $token);",
          "349:                 $list->getNextOfType(Token::TYPE_DELIMITER);",
          "351:                 $prevLastIdx = $list->idx;",
          "352:                 continue;",
          "353:             }",
          "359:             $class = static::$STATEMENT_PARSERS[$token->value];",
          "365:             $statement = new $class($this, $this->list);",
          "371:             $statement->first = $prevLastIdx + 1;",
          "375:             $statement->last = $list->idx;",
          "376:             $prevLastIdx = $list->idx;",
          "379:             if (($inUnion)",
          "380:                 && ($lastStatement instanceof SelectStatement)",
          "381:                 && ($statement instanceof SelectStatement)",
          "382:             ) {",
          "387:                 $lastStatement->union[] = $statement;",
          "388:                 $inUnion = false;",
          "389:             } else {",
          "390:                 $this->statements[] = $statement;",
          "391:                 $lastStatement = $statement;",
          "392:             }",
          "395:     }",
          "408:     public function error($msg = '', Token $token = null, $code = 0)",
          "409:     {",
          "410:         $error = new ParserException($msg, $token, $code);",
          "411:         if ($this->strict) {",
          "412:             throw $error;",
          "414:         $this->errors[] = $error;",
          "",
          "[Added Lines]",
          "11: namespace {",
          "13:     if (!function_exists('__')) {",
          "22:         function __($str)",
          "23:         {",
          "24:             return $str;",
          "25:         }",
          "26:     }",
          "27: }",
          "29: namespace SqlParser {",
          "31:     use SqlParser\\Statements\\SelectStatement;",
          "32:     use SqlParser\\Exceptions\\ParserException;",
          "43:     class Parser",
          "51:         public static $STATEMENT_PARSERS = array(",
          "53:             'EXPLAIN'       => 'SqlParser\\\\Statements\\\\ExplainStatement',",
          "57:             'ANALYZE'       => 'SqlParser\\\\Statements\\\\AnalyzeStatement',",
          "58:             'BACKUP'        => 'SqlParser\\\\Statements\\\\BackupStatement',",
          "59:             'CHECK'         => 'SqlParser\\\\Statements\\\\CheckStatement',",
          "60:             'CHECKSUM'      => 'SqlParser\\\\Statements\\\\ChecksumStatement',",
          "61:             'OPTIMIZE'      => 'SqlParser\\\\Statements\\\\OptimizeStatement',",
          "62:             'REPAIR'        => 'SqlParser\\\\Statements\\\\RepairStatement',",
          "63:             'RESTORE'       => 'SqlParser\\\\Statements\\\\RestoreStatement',",
          "67:             'SET'           => '',",
          "68:             'SHOW'          => 'SqlParser\\\\Statements\\\\ShowStatement',",
          "72:             'ALTER'         => 'SqlParser\\\\Statements\\\\AlterStatement',",
          "73:             'CREATE'        => 'SqlParser\\\\Statements\\\\CreateStatement',",
          "74:             'DROP'          => 'SqlParser\\\\Statements\\\\DropStatement',",
          "75:             'RENAME'        => 'SqlParser\\\\Statements\\\\RenameStatement',",
          "76:             'TRUNCATE'      => 'SqlParser\\\\Statements\\\\TruncateStatement',",
          "80:             'CALL'          => 'SqlParser\\\\Statements\\\\CallStatement',",
          "81:             'DELETE'        => 'SqlParser\\\\Statements\\\\DeleteStatement',",
          "82:             'DO'            => '',",
          "83:             'HANDLER'       => '',",
          "84:             'INSERT'        => 'SqlParser\\\\Statements\\\\InsertStatement',",
          "85:             'LOAD'          => '',",
          "86:             'REPLACE'       => 'SqlParser\\\\Statements\\\\ReplaceStatement',",
          "87:             'SELECT'        => 'SqlParser\\\\Statements\\\\SelectStatement',",
          "88:             'UPDATE'        => 'SqlParser\\\\Statements\\\\UpdateStatement',",
          "92:             'PREPARE'       => '',",
          "93:             'EXECUTE'       => '',",
          "94:         );",
          "101:         public static $KEYWORD_PARSERS = array(",
          "104:             '_OPTIONS'      => array(",
          "105:                 'class'     => 'SqlParser\\\\Components\\\\OptionsArray',",
          "106:                 'field'     => 'options',",
          "107:             ),",
          "109:             'ALTER'         => array(",
          "110:                 'class'     => 'SqlParser\\\\Components\\\\Expression',",
          "111:                 'field'     => 'table',",
          "112:                 'options'   => array('skipColumn' => true),",
          "113:             ),",
          "114:             'ANALYZE'       => array(",
          "115:                 'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "116:                 'field'     => 'tables',",
          "117:                 'options'   => array('skipColumn' => true),",
          "118:             ),",
          "119:             'BACKUP'        => array(",
          "120:                 'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "121:                 'field'     => 'tables',",
          "122:                 'options'   => array('skipColumn' => true),",
          "123:             ),",
          "124:             'CALL'          => array(",
          "125:                 'class'     => 'SqlParser\\\\Components\\\\FunctionCall',",
          "126:                 'field'     => 'call',",
          "127:             ),",
          "128:             'CHECK'         => array(",
          "129:                 'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "130:                 'field'     => 'tables',",
          "131:                 'options'   => array('skipColumn' => true),",
          "132:             ),",
          "133:             'CHECKSUM'      => array(",
          "134:                 'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "135:                 'field'     => 'tables',",
          "136:                 'options'   => array('skipColumn' => true),",
          "137:             ),",
          "138:             'DROP'          => array(",
          "139:                 'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "140:                 'field'     => 'fields',",
          "141:                 'options'   => array('skipColumn' => true),",
          "142:             ),",
          "143:             'FROM'          => array(",
          "144:                 'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "145:                 'field'     => 'from',",
          "146:                 'options'   => array('skipColumn' => true),",
          "147:             ),",
          "148:             'GROUP BY'      => array(",
          "149:                 'class'     => 'SqlParser\\\\Components\\\\OrderKeyword',",
          "150:                 'field'     => 'group',",
          "151:             ),",
          "152:             'HAVING'        => array(",
          "153:                 'class'     => 'SqlParser\\\\Components\\\\Condition',",
          "154:                 'field'     => 'having',",
          "155:             ),",
          "156:             'INTO'          => array(",
          "157:                 'class'     => 'SqlParser\\\\Components\\\\IntoKeyword',",
          "158:                 'field'     => 'into',",
          "159:             ),",
          "160:             'JOIN'          => array(",
          "161:                 'class'     => 'SqlParser\\\\Components\\\\JoinKeyword',",
          "162:                 'field'     => 'join',",
          "163:             ),",
          "164:             'LEFT JOIN'     => array(",
          "165:                 'class'     => 'SqlParser\\\\Components\\\\JoinKeyword',",
          "166:                 'field'     => 'join',",
          "167:             ),",
          "168:             'RIGHT JOIN'    => array(",
          "169:                 'class'     => 'SqlParser\\\\Components\\\\JoinKeyword',",
          "170:                 'field'     => 'join',",
          "171:             ),",
          "172:             'INNER JOIN'    => array(",
          "173:                 'class'     => 'SqlParser\\\\Components\\\\JoinKeyword',",
          "174:                 'field'     => 'join',",
          "175:             ),",
          "176:             'FULL JOIN'     => array(",
          "177:                 'class'     => 'SqlParser\\\\Components\\\\JoinKeyword',",
          "178:                 'field'     => 'join',",
          "179:             ),",
          "180:             'LIMIT'         => array(",
          "181:                 'class'     => 'SqlParser\\\\Components\\\\Limit',",
          "182:                 'field'     => 'limit',",
          "183:             ),",
          "184:             'OPTIMIZE'      => array(",
          "185:                 'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "186:                 'field'     => 'tables',",
          "187:                 'options'   => array('skipColumn' => true),",
          "188:             ),",
          "189:             'ORDER BY'      => array(",
          "190:                 'class'     => 'SqlParser\\\\Components\\\\OrderKeyword',",
          "191:                 'field'     => 'order',",
          "192:             ),",
          "193:             'PARTITION'     => array(",
          "194:                 'class'     => 'SqlParser\\\\Components\\\\ArrayObj',",
          "195:                 'field'     => 'partition',",
          "196:             ),",
          "197:             'PROCEDURE'     => array(",
          "198:                 'class'     => 'SqlParser\\\\Components\\\\FunctionCall',",
          "199:                 'field'     => 'procedure',",
          "200:             ),",
          "201:             'RENAME'        => array(",
          "202:                 'class'     => 'SqlParser\\\\Components\\\\RenameOperation',",
          "203:                 'field'     => 'renames',",
          "204:             ),",
          "205:             'REPAIR'        => array(",
          "206:                 'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "207:                 'field'     => 'tables',",
          "208:                 'options'   => array('skipColumn' => true),",
          "209:             ),",
          "210:             'RESTORE'       => array(",
          "211:                 'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "212:                 'field'     => 'tables',",
          "213:                 'options'   => array('skipColumn' => true),",
          "214:             ),",
          "215:             'SET'           => array(",
          "216:                 'class'     => 'SqlParser\\\\Components\\\\SetOperation',",
          "217:                 'field'     => 'set',",
          "218:             ),",
          "219:             'SELECT'        => array(",
          "220:                 'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "221:                 'field'     => 'expr',",
          "222:             ),",
          "223:             'TRUNCATE'      => array(",
          "224:                 'class'     => 'SqlParser\\\\Components\\\\Expression',",
          "225:                 'field'     => 'table',",
          "226:                 'options'   => array('skipColumn' => true),",
          "227:             ),",
          "228:             'UPDATE'        => array(",
          "229:                 'class'     => 'SqlParser\\\\Components\\\\ExpressionArray',",
          "230:                 'field'     => 'tables',",
          "231:                 'options'   => array('skipColumn' => true),",
          "232:             ),",
          "233:             'VALUE'         => array(",
          "234:                 'class'     => 'SqlParser\\\\Components\\\\Array2d',",
          "235:                 'field'     => 'values',",
          "236:             ),",
          "237:             'VALUES'        => array(",
          "238:                 'class'     => 'SqlParser\\\\Components\\\\Array2d',",
          "239:                 'field'     => 'values',",
          "240:             ),",
          "241:             'WHERE'         => array(",
          "242:                 'class'     => 'SqlParser\\\\Components\\\\Condition',",
          "243:                 'field'     => 'where',",
          "244:             ),",
          "246:         );",
          "253:         public $list;",
          "262:         public $strict = false;",
          "275:         public $errors = array();",
          "282:         public $statements = array();",
          "290:         public function __construct($list = null, $strict = false)",
          "291:         {",
          "292:             if ((is_string($list)) || ($list instanceof UtfString)) {",
          "293:                 $lexer = new Lexer($list, $strict);",
          "294:                 $this->list = $lexer->list;",
          "295:             } elseif ($list instanceof TokensList) {",
          "296:                 $this->list = $list;",
          "297:             }",
          "299:             $this->strict = $strict;",
          "301:             if ($list !== null) {",
          "302:                 $this->parse();",
          "304:         }",
          "311:         public function parse()",
          "312:         {",
          "318:             $lastStatement = null;",
          "324:             $inUnion = true;",
          "330:             $prevLastIdx = -1;",
          "336:             $list = &$this->list;",
          "338:             for (; $list->idx < $list->count; ++$list->idx) {",
          "344:                 $token = $list->tokens[$list->idx];",
          "348:                 if ($token->type !== Token::TYPE_KEYWORD) {",
          "349:                     if (($token->type !== TOKEN::TYPE_COMMENT)",
          "350:                         && ($token->type !== Token::TYPE_WHITESPACE)",
          "351:                         && ($token->type !== Token::TYPE_OPERATOR) // `(` and `)`",
          "352:                         && ($token->type !== Token::TYPE_DELIMITER)",
          "353:                     ) {",
          "354:                         $this->error(",
          "355:                             __('Unexpected beginning of statement.'),",
          "356:                             $token",
          "357:                         );",
          "358:                     }",
          "359:                     continue;",
          "360:                 }",
          "362:                 if ($token->value === 'UNION') {",
          "363:                     $inUnion = true;",
          "364:                     continue;",
          "365:                 }",
          "368:                 if (empty(static::$STATEMENT_PARSERS[$token->value])) {",
          "369:                     $this->error(",
          "370:                         __('Unrecognized statement type.'),",
          "371:                         $token",
          "372:                     );",
          "374:                     $list->getNextOfType(Token::TYPE_DELIMITER);",
          "376:                     $prevLastIdx = $list->idx;",
          "377:                     continue;",
          "378:                 }",
          "384:                 $class = static::$STATEMENT_PARSERS[$token->value];",
          "390:                 $statement = new $class($this, $this->list);",
          "396:                 $statement->first = $prevLastIdx + 1;",
          "400:                 $statement->last = $list->idx;",
          "401:                 $prevLastIdx = $list->idx;",
          "404:                 if (($inUnion)",
          "405:                     && ($lastStatement instanceof SelectStatement)",
          "406:                     && ($statement instanceof SelectStatement)",
          "407:                 ) {",
          "412:                     $lastStatement->union[] = $statement;",
          "413:                     $inUnion = false;",
          "414:                 } else {",
          "415:                     $this->statements[] = $statement;",
          "416:                     $lastStatement = $statement;",
          "417:                 }",
          "419:             }",
          "433:         public function error($msg = '', Token $token = null, $code = 0)",
          "434:         {",
          "435:             $error = new ParserException($msg, $token, $code);",
          "436:             if ($this->strict) {",
          "437:                 throw $error;",
          "438:             }",
          "439:             $this->errors[] = $error;",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Statement.php||libraries/sql-parser/src/Statement.php": [
          "File: libraries/sql-parser/src/Statement.php -> libraries/sql-parser/src/Statement.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "198:                 if (($token->type !== TOKEN::TYPE_COMMENT)",
          "199:                     && ($token->type !== Token::TYPE_WHITESPACE)",
          "200:                 ) {",
          "202:                 }",
          "203:                 continue;",
          "204:             }",
          "",
          "[Removed Lines]",
          "201:                     $parser->error('Unexpected token.', $token);",
          "",
          "[Added Lines]",
          "201:                     $parser->error(__('Unexpected token.'), $token);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:             } elseif ($class === null) {",
          "255:                 continue;",
          "256:             }",
          "",
          "[Removed Lines]",
          "251:                 $parser->error(",
          "252:                     'Unrecognized keyword.',",
          "253:                     $token",
          "254:                 );",
          "",
          "[Added Lines]",
          "251:                 $parser->error(__('Unrecognized keyword.'), $token);",
          "",
          "---------------"
        ],
        "libraries/sql-parser/src/Statements/CreateStatement.php||libraries/sql-parser/src/Statements/CreateStatement.php": [
          "File: libraries/sql-parser/src/Statements/CreateStatement.php -> libraries/sql-parser/src/Statements/CreateStatement.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "291:         if (empty($this->name)) {",
          "292:             $parser->error(",
          "294:                 $list->tokens[$list->idx]",
          "295:             );",
          "296:         } else {",
          "",
          "[Removed Lines]",
          "293:                 'The name of the entity was expected.',",
          "",
          "[Added Lines]",
          "293:                 __('The name of the entity was expected.'),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:             $this->fields = FieldDefinition::parse($parser, $list);",
          "308:             if (empty($this->fields)) {",
          "309:                 $parser->error(",
          "311:                     $list->tokens[$list->idx]",
          "312:                 );",
          "313:             }",
          "",
          "[Removed Lines]",
          "310:                     'At least one field definition was expected.',",
          "",
          "[Added Lines]",
          "310:                     __('At least one field definition was expected.'),",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "326:                 $token = $list->getNextOfType(Token::TYPE_KEYWORD);",
          "327:                 if ($token->value !== 'RETURNS') {",
          "328:                     $parser->error(",
          "330:                         $token",
          "331:                     );",
          "332:                 } else {",
          "",
          "[Removed Lines]",
          "329:                         'A \\'RETURNS\\' keyword was expected.',",
          "",
          "[Added Lines]",
          "329:                         __('A \"RETURNS\" keyword was expected.'),",
          "",
          "---------------"
        ],
        "lint.php||lint.php": [
          "File: lint.php -> lint.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: define('PHPMYADMIN', true);",
          "32: require_once 'libraries/Linter.class.php';",
          "",
          "[Removed Lines]",
          "12: require_once 'libraries/core.lib.php';",
          "13: require_once 'libraries/Config.class.php';",
          "14: $GLOBALS['PMA_Config'] = new PMA_Config(CONFIG_FILE);",
          "15: require_once 'libraries/session.inc.php';",
          "19: if (empty($_SESSION['encryption_key'])) {",
          "21:     exit;",
          "22: }",
          "27: require_once 'libraries/sql-parser/autoload.php';",
          "38: PMA_Linter::lint($_REQUEST['sql_query']);",
          "",
          "[Added Lines]",
          "22: $sql_query = $_REQUEST['sql_query'];",
          "28: require_once 'libraries/common.inc.php';",
          "36: $response = PMA_Response::getInstance();",
          "37: $response->disable();",
          "39: echo json_encode(PMA_Linter::lint($sql_query));",
          "",
          "---------------"
        ],
        "test/libraries/PMA_Linter_Test.php||test/libraries/PMA_Linter_Test.php": [
          "File: test/libraries/PMA_Linter_Test.php -> test/libraries/PMA_Linter_Test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:     public function testLintEmpty()",
          "76:     {",
          "79:     }",
          "",
          "[Removed Lines]",
          "77:         $this->expectOutputString('[]');",
          "78:         PMA_Linter::lint('');",
          "",
          "[Added Lines]",
          "77:         $this->assertEquals(array(), PMA_Linter::lint(''));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:     public function testLintNoErrors()",
          "87:     {",
          "90:     }",
          "",
          "[Removed Lines]",
          "88:         $this->expectOutputString('[]');",
          "89:         PMA_Linter::lint('SELECT * FROM tbl');",
          "",
          "[Added Lines]",
          "87:         $this->assertEquals(array(), PMA_Linter::lint('SELECT * FROM tbl'));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "97:     public function testLintErrors()",
          "98:     {",
          "101:                 array(",
          "118:                 )",
          "120:         );",
          "122:     }",
          "",
          "[Removed Lines]",
          "99:         $this->expectOutputString(",
          "100:             json_encode(",
          "102:                     array(",
          "103:                         'message' => 'Unrecognized data type. (near <code>IN</code>)',",
          "104:                         'fromLine' => 0,",
          "105:                         'fromColumn' => 22,",
          "106:                         'toLine' => 0,",
          "107:                         'toColumn' => 24,",
          "108:                         'severity' => 'error',",
          "109:                     ),",
          "110:                     array(",
          "111:                         'message' => 'A closing bracket was expected. (near <code>IN</code>)',",
          "112:                         'fromLine' => 0,",
          "113:                         'fromColumn' => 22,",
          "114:                         'toLine' => 0,",
          "115:                         'toColumn' => 24,",
          "116:                         'severity' => 'error',",
          "117:                     )",
          "119:             )",
          "121:         PMA_Linter::lint('CREATE TABLE tbl ( id IN');",
          "",
          "[Added Lines]",
          "97:         $this->assertEquals(",
          "98:             array(",
          "99:                 array(",
          "100:                     'message' => 'Unrecognized data type. (near <code>IN</code>)',",
          "101:                     'fromLine' => 0,",
          "102:                     'fromColumn' => 22,",
          "103:                     'toLine' => 0,",
          "104:                     'toColumn' => 24,",
          "105:                     'severity' => 'error',",
          "106:                 ),",
          "108:                     'message' => 'A closing bracket was expected. (near <code>IN</code>)',",
          "109:                     'fromLine' => 0,",
          "110:                     'fromColumn' => 22,",
          "111:                     'toLine' => 0,",
          "112:                     'toColumn' => 24,",
          "113:                     'severity' => 'error',",
          "115:             ),",
          "116:             PMA_Linter::lint('CREATE TABLE tbl ( id IN')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "129:     public function testLongQuery()",
          "130:     {",
          "133:                 array(",
          "142:                 )",
          "144:         );",
          "146:     }",
          "147: }",
          "",
          "[Removed Lines]",
          "131:         $this->expectOutputString(",
          "132:             json_encode(",
          "134:                     array(",
          "135:                         'message' => 'Linting is disabled for this query because it exceeds the maximum length.',",
          "136:                         'fromLine' => 0,",
          "137:                         'fromColumn' => 0,",
          "138:                         'toLine' => 0,",
          "139:                         'toColumn' => 0,",
          "140:                         'severity' => 'warning',",
          "141:                     )",
          "143:             )",
          "145:         PMA_Linter::lint(str_repeat(\";\", 10001));",
          "",
          "[Added Lines]",
          "127:         $this->assertEquals(",
          "128:             array(",
          "130:                     'message' => 'Linting is disabled for this query because it exceeds the maximum length.',",
          "131:                     'fromLine' => 0,",
          "132:                     'fromColumn' => 0,",
          "133:                     'toLine' => 0,",
          "134:                     'toColumn' => 0,",
          "135:                     'severity' => 'warning',",
          "137:             ),",
          "138:             PMA_Linter::lint(str_repeat(\";\", 10001))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "024d96700d7aa8601687ebbc5a14bfbd103d7d56",
      "candidate_info": {
        "commit_hash": "024d96700d7aa8601687ebbc5a14bfbd103d7d56",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/024d96700d7aa8601687ebbc5a14bfbd103d7d56",
        "files": [
          "libraries/Linter.class.php",
          "lint.php",
          "test/libraries/PMA_Linter_Test.php"
        ],
        "message": "Reorganized code. Fixed a bug that miscalculated the position of the tokens. Added tests.\n\nSigned-off-by: Dan Ungureanu <udan1107@gmail.com>",
        "before_after_code_files": [
          "libraries/Linter.class.php||libraries/Linter.class.php",
          "lint.php||lint.php",
          "test/libraries/PMA_Linter_Test.php||test/libraries/PMA_Linter_Test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lint.php||lint.php"
          ],
          "candidate": [
            "lint.php||lint.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/Linter.class.php||libraries/Linter.class.php": [
          "File: libraries/Linter.class.php -> libraries/Linter.class.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "8: if (! defined('PHPMYADMIN')) {",
          "9:     exit;",
          "10: }",
          "17: class PMA_Linter {",
          "26:     public static function getLines($str)",
          "27:     {",
          "28:         $lines = array(0);",
          "29:         for ($i = 0, $len = strlen($str); $i < $len; ++$i) {",
          "30:             if ($str[$i] === \"\\n\") {",
          "31:                 $lines[] = $i + 1;",
          "32:             }",
          "33:         }",
          "34:         return $lines;",
          "35:     }",
          "45:     public static function findLineNumberAndColumn($lines, $pos)",
          "46:     {",
          "47:         $line = 0;",
          "48:         foreach ($lines as $lineNo => $lineStart) {",
          "49:             if ($lineStart > $pos) {",
          "50:                 break;",
          "51:             }",
          "52:             $line = $lineNo;",
          "53:         }",
          "54:         return array($line, $pos - $lines[$line]);",
          "55:     }",
          "64:     public static function lint($query)",
          "65:     {",
          "67:         if (strlen($query) > 10000) {",
          "68:             echo json_encode(",
          "69:                 array(",
          "70:                     array(",
          "71:                         'message' => 'The linting is disabled for this query because it exceededs the maxmimum length.',",
          "72:                         'fromLine' => 0,",
          "73:                         'fromColumn' => 0,",
          "74:                         'toLine' => 0,",
          "75:                         'toColumn' => 0,",
          "76:                         'severity' => 'warning',",
          "77:                     )",
          "78:                 )",
          "79:             );",
          "80:             return;",
          "81:         }",
          "88:         $lexer = new SqlParser\\Lexer($query);",
          "95:         $parser = new SqlParser\\Parser($lexer->list);",
          "102:         $errors = SqlParser\\Utils\\Error::get(array($lexer, $parser));",
          "109:         $response = array();",
          "119:         $lines = static::getLines($query);",
          "122:         foreach ($errors as $idx => $error) {",
          "125:             list($fromLine, $fromColumn) = static::findLineNumberAndColumn(",
          "126:                 $lines, $error[3]",
          "127:             );",
          "130:             list($toLine, $toColumn) = static::findLineNumberAndColumn(",
          "131:                 $lines, $error[3] + strlen($error[2])",
          "132:             );",
          "135:             $response[] = array(",
          "136:                 'message' => $error[0] . ' (near <code>' . $error[2] . '</code>)',",
          "137:                 'fromLine' => $fromLine,",
          "138:                 'fromColumn' => $fromColumn,",
          "139:                 'toLine' => $toLine,",
          "140:                 'toColumn' => $toColumn,",
          "141:                 'severity' => 'error',",
          "142:             );",
          "143:         }",
          "146:         echo json_encode($response);",
          "147:     }",
          "149: }",
          "",
          "---------------"
        ],
        "lint.php||lint.php": [
          "File: lint.php -> lint.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <?php",
          "",
          "[Removed Lines]",
          "5: require_once 'libraries/sql-parser/autoload.php';",
          "14: function getLines($str)",
          "15: {",
          "16:     $lines = array(0);",
          "17:     for ($i = 0, $len = strlen($str); $i < $len; ++$i) {",
          "18:         if ($str[$i] === \"\\n\") {",
          "19:             $lines[] = $i;",
          "20:         }",
          "21:     }",
          "22:     return $lines;",
          "23: }",
          "33: function findLineNumberAndColumn($lines, $pos)",
          "34: {",
          "35:     $line = 0;",
          "36:     foreach ($lines as $lineNo => $lineStart) {",
          "37:         if ($lineStart >= $pos) {",
          "38:             break;",
          "39:         }",
          "40:         $line = $lineNo;",
          "41:     }",
          "42:     return array($line, $pos - $lines[$line]);",
          "43: }",
          "52: function linter($query)",
          "53: {",
          "55:     if (strlen($query) > 10000) {",
          "56:         echo json_encode(",
          "57:             array(",
          "58:                 array(",
          "59:                     'message' => 'The linting is disabled for this query because it exceededs the maxmimum length',",
          "60:                     'fromLine' => 0,",
          "61:                     'fromColumn' => 0,",
          "62:                     'toLine' => 0,",
          "63:                     'toColumn' => 0,",
          "64:                     'severity' => 'warning',",
          "65:                 )",
          "66:             )",
          "67:         );",
          "68:         return;",
          "69:     }",
          "76:     $lexer = new SqlParser\\Lexer($query);",
          "83:     $parser = new SqlParser\\Parser($lexer->list);",
          "90:     $errors = SqlParser\\Utils\\Error::get(array($lexer, $parser));",
          "97:     $response = array();",
          "107:     $lines = getLines($query);",
          "110:     foreach ($errors as $idx => $error) {",
          "113:         list($fromLine, $fromColumn) = findLineNumberAndColumn(",
          "114:             $lines, $error[3]",
          "115:         );",
          "118:         list($toLine, $toColumn) = findLineNumberAndColumn(",
          "119:             $lines, $error[3] + strlen($error[2])",
          "120:         );",
          "123:         $response[] = array(",
          "124:             'message' => $error[0] . ' (near <code>' . $error[2] . '</code>)',",
          "125:             'fromLine' => $fromLine,",
          "126:             'fromColumn' => $fromColumn,",
          "127:             'toLine' => $toLine,",
          "128:             'toColumn' => $toColumn,",
          "129:             'severity' => 'error',",
          "130:         );",
          "131:     }",
          "134:     echo json_encode($response);",
          "135: }",
          "137: linter($_REQUEST['sql_query']);",
          "",
          "[Added Lines]",
          "9: define('PHPMYADMIN', true);",
          "14: require_once 'libraries/sql-parser/autoload.php';",
          "19: require_once 'libraries/Linter.class.php';",
          "21: PMA_Linter::lint($_REQUEST['sql_query']);",
          "",
          "---------------"
        ],
        "test/libraries/PMA_Linter_Test.php||test/libraries/PMA_Linter_Test.php": [
          "File: test/libraries/PMA_Linter_Test.php -> test/libraries/PMA_Linter_Test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <?php",
          "12: require_once 'libraries/Linter.class.php';",
          "19: class PMA_Linter_Test extends PHPUnit_Framework_TestCase",
          "20: {",
          "27:     public function testGetLines()",
          "28:     {",
          "29:         $this->assertEquals(array(0), PMA_Linter::getLines(''));",
          "30:         $this->assertEquals(array(0, 2), PMA_Linter::getLines(\"a\\nb\"));",
          "31:         $this->assertEquals(array(0, 4, 7), PMA_Linter::getLines(\"abc\\nde\\n\"));",
          "32:     }",
          "39:     public function testFindLineNumberAndColumn()",
          "40:     {",
          "52:         $this->assertEquals(",
          "53:             array(1, 0),",
          "54:             PMA_Linter::findLineNumberAndColumn(array(0, 4, 7), 4)",
          "55:         );",
          "56:         $this->assertEquals(",
          "57:             array(1, 1),",
          "58:             PMA_Linter::findLineNumberAndColumn(array(0, 4, 7), 5)",
          "59:         );",
          "60:         $this->assertEquals(",
          "61:             array(1, 2),",
          "62:             PMA_Linter::findLineNumberAndColumn(array(0, 4, 7), 6)",
          "63:         );",
          "64:         $this->assertEquals(",
          "65:             array(2, 0),",
          "66:             PMA_Linter::findLineNumberAndColumn(array(0, 4, 7), 7)",
          "67:         );",
          "68:     }",
          "75:     public function testLintEmpty()",
          "76:     {",
          "77:         $this->expectOutputString('[]');",
          "78:         PMA_Linter::lint('');",
          "79:     }",
          "86:     public function testLintNoErrors()",
          "87:     {",
          "88:         $this->expectOutputString('[]');",
          "89:         PMA_Linter::lint('SELECT * FROM tbl');",
          "90:     }",
          "97:     public function testLintErrors()",
          "98:     {",
          "99:         $this->expectOutputString(",
          "100:             json_encode(",
          "101:                 array(",
          "102:                     array(",
          "103:                         'message' => 'Unrecognized data type. (near <code>IN</code>)',",
          "104:                         'fromLine' => 0,",
          "105:                         'fromColumn' => 22,",
          "106:                         'toLine' => 0,",
          "107:                         'toColumn' => 24,",
          "108:                         'severity' => 'error',",
          "109:                     ),",
          "110:                     array(",
          "111:                         'message' => 'A closing bracket was expected. (near <code>IN</code>)',",
          "112:                         'fromLine' => 0,",
          "113:                         'fromColumn' => 22,",
          "114:                         'toLine' => 0,",
          "115:                         'toColumn' => 24,",
          "116:                         'severity' => 'error',",
          "117:                     )",
          "118:                 )",
          "119:             )",
          "120:         );",
          "121:         PMA_Linter::lint('CREATE TABLE tbl ( id IN');",
          "122:     }",
          "129:     public function testLongQuery() {",
          "130:         $this->expectOutputString(",
          "131:             json_encode(",
          "132:                 array(",
          "133:                     array(",
          "134:                         'message' => 'The linting is disabled for this query because it exceededs the maxmimum length.',",
          "135:                         'fromLine' => 0,",
          "136:                         'fromColumn' => 0,",
          "137:                         'toLine' => 0,",
          "138:                         'toColumn' => 0,",
          "139:                         'severity' => 'warning',",
          "140:                     )",
          "141:                 )",
          "142:             )",
          "143:         );",
          "144:         PMA_Linter::lint(str_repeat(\";\", 10001));",
          "145:     }",
          "146: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8633f44db08fba25edfc75409819741feae8c5eb",
      "candidate_info": {
        "commit_hash": "8633f44db08fba25edfc75409819741feae8c5eb",
        "repo": "phpmyadmin/phpmyadmin",
        "commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/8633f44db08fba25edfc75409819741feae8c5eb",
        "files": [
          "libraries/Header.php",
          "libraries/core.lib.php",
          "test/bootstrap-dist.php"
        ],
        "message": "Remove code for PMA_TEST_HEADERS\n\nIt's no longer necessary.\n\nIssue #12079\n\nSigned-off-by: Michal \u010ciha\u0159 <michal@cihar.com>",
        "before_after_code_files": [
          "libraries/Header.php||libraries/Header.php",
          "libraries/core.lib.php||libraries/core.lib.php",
          "test/bootstrap-dist.php||test/bootstrap-dist.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libraries/core.lib.php||libraries/core.lib.php"
          ],
          "candidate": [
            "libraries/core.lib.php||libraries/core.lib.php"
          ]
        }
      },
      "candidate_diff": {
        "libraries/Header.php||libraries/Header.php": [
          "File: libraries/Header.php -> libraries/Header.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "513:     public function sendHttpHeaders()",
          "514:     {",
          "516:             return;",
          "517:         }",
          "518:         $map_tile_urls = ' *.tile.openstreetmap.org';",
          "",
          "[Removed Lines]",
          "515:         if (defined('TESTSUITE') && ! defined('PMA_TEST_HEADERS')) {",
          "",
          "[Added Lines]",
          "515:         if (defined('TESTSUITE')) {",
          "",
          "---------------"
        ],
        "libraries/core.lib.php||libraries/core.lib.php": [
          "File: libraries/core.lib.php -> libraries/core.lib.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "508: function PMA_headerJSON()",
          "509: {",
          "511:         return;",
          "512:     }",
          "",
          "[Removed Lines]",
          "510:     if (defined('TESTSUITE') && ! defined('PMA_TEST_HEADERS')) {",
          "",
          "[Added Lines]",
          "510:     if (defined('TESTSUITE')) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "528: function PMA_noCacheHeader()",
          "529: {",
          "531:         return;",
          "532:     }",
          "",
          "[Removed Lines]",
          "530:     if (defined('TESTSUITE') && ! defined('PMA_TEST_HEADERS')) {",
          "",
          "[Added Lines]",
          "530:     if (defined('TESTSUITE')) {",
          "",
          "---------------"
        ],
        "test/bootstrap-dist.php||test/bootstrap-dist.php": [
          "File: test/bootstrap-dist.php -> test/bootstrap-dist.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "97: $GLOBALS['runkit_internal_override'] = ini_get('runkit.internal_override');",
          "",
          "[Removed Lines]",
          "109: function test_header($string, $replace = true, $http_response_code = 200)",
          "110: {",
          "111:     if (! isset($GLOBALS['header'])) {",
          "112:         $GLOBALS['header'] = array();",
          "113:     }",
          "115:     $GLOBALS['header'][] = $string;",
          "116: }",
          "123: function test_headers_sent()",
          "124: {",
          "125:     return false;",
          "126: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:     return '0000-00-00 00:00:00';",
          "138: }",
          "",
          "[Removed Lines]",
          "140: if (PMA_HAS_RUNKIT && $GLOBALS['runkit_internal_override']) {",
          "141:     echo \"Enabling headers testing using runkit...\\n\";",
          "142:     runkit_function_rename('header', 'test_header_override');",
          "143:     runkit_function_rename('headers_sent', 'test_headers_sent_override');",
          "144:     runkit_function_rename('test_header', 'header');",
          "145:     runkit_function_rename('test_headers_sent', 'headers_sent');",
          "146:     define('PMA_TEST_HEADERS', true);",
          "147: } else {",
          "148:     echo \"No headers testing.\\n\";",
          "149:     echo \"Please install runkit and enable runkit.internal_override!\\n\";",
          "150: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}