{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "168a5557803b40b4930c3b4f9587b67a6d566b13",
      "candidate_info": {
        "commit_hash": "168a5557803b40b4930c3b4f9587b67a6d566b13",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/168a5557803b40b4930c3b4f9587b67a6d566b13",
        "files": [
          "doc/api/fs.markdown",
          "lib/fs.js",
          "src/node_file.cc",
          "test/fixtures/create-file.js",
          "test/simple/test-fs-truncate.js"
        ],
        "message": "fs: fix naming of truncate/ftruncate functions\n\nFor backwards compatibility, fs.truncate(<number>) will proxy to\nfs.ftruncate.\n\nFix #3805",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "src/node_file.cc||src/node_file.cc",
          "test/fixtures/create-file.js||test/fixtures/create-file.js",
          "test/simple/test-fs-truncate.js||test/simple/test-fs-truncate.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:                         pathModule._makeLong(newPath));",
          "441: };",
          "445: };",
          "449: };",
          "451: fs.rmdir = function(path, callback) {",
          "",
          "[Removed Lines]",
          "443: fs.truncate = function(fd, len, callback) {",
          "444:   binding.truncate(fd, len, makeCallback(callback));",
          "447: fs.truncateSync = function(fd, len) {",
          "448:   return binding.truncate(fd, len);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_file.cc||src/node_file.cc": [
          "File: src/node_file.cc -> src/node_file.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:   }",
          "487: }",
          "490:   HandleScope scope;",
          "492:   if (args.Length() < 2 || !args[0]->IsInt32()) {",
          "",
          "[Removed Lines]",
          "489: static Handle<Value> Truncate(const Arguments& args) {",
          "",
          "[Added Lines]",
          "489: static Handle<Value> FTruncate(const Arguments& args) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "941:   NODE_SET_METHOD(target, \"fdatasync\", Fdatasync);",
          "942:   NODE_SET_METHOD(target, \"fsync\", Fsync);",
          "943:   NODE_SET_METHOD(target, \"rename\", Rename);",
          "945:   NODE_SET_METHOD(target, \"rmdir\", RMDir);",
          "946:   NODE_SET_METHOD(target, \"mkdir\", MKDir);",
          "947:   NODE_SET_METHOD(target, \"sendfile\", SendFile);",
          "",
          "[Removed Lines]",
          "944:   NODE_SET_METHOD(target, \"truncate\", Truncate);",
          "",
          "[Added Lines]",
          "944:   NODE_SET_METHOD(target, \"ftruncate\", FTruncate);",
          "",
          "---------------"
        ],
        "test/fixtures/create-file.js||test/fixtures/create-file.js": [
          "File: test/fixtures/create-file.js -> test/fixtures/create-file.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: var file_name = process.argv[2];",
          "25: var file_size = parseInt(process.argv[3]);",
          "",
          "[Removed Lines]",
          "27: var fd = fs.openSync(file_name, 'w');",
          "28: fs.truncateSync(fd, file_size);",
          "29: fs.closeSync(fd);",
          "",
          "[Added Lines]",
          "27: fs.truncateSync(file_name, file_size);",
          "",
          "---------------"
        ],
        "test/simple/test-fs-truncate.js||test/simple/test-fs-truncate.js": [
          "File: test/simple/test-fs-truncate.js -> test/simple/test-fs-truncate.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var path = require('path');",
          "25: var fs = require('fs');",
          "26: var tmp = common.tmpDir;",
          "27: var filename = path.resolve(tmp, 'truncate-file.txt');",
          "28: var data = new Buffer(1024 * 16);",
          "29: data.fill('x');",
          "31: var stat;",
          "34: fs.writeFileSync(filename, data);",
          "35: stat = fs.statSync(filename);",
          "36: assert.equal(stat.size, 1024 * 16);",
          "38: fs.truncateSync(filename, 1024);",
          "39: stat = fs.statSync(filename);",
          "40: assert.equal(stat.size, 1024);",
          "42: fs.truncateSync(filename);",
          "43: stat = fs.statSync(filename);",
          "44: assert.equal(stat.size, 0);",
          "47: fs.writeFileSync(filename, data);",
          "48: var fd = fs.openSync(filename, 'a');",
          "50: stat = fs.statSync(filename);",
          "51: assert.equal(stat.size, 1024 * 16);",
          "53: fs.ftruncateSync(fd, 1024);",
          "54: stat = fs.statSync(filename);",
          "55: assert.equal(stat.size, 1024);",
          "57: fs.ftruncateSync(fd);",
          "58: stat = fs.statSync(filename);",
          "59: assert.equal(stat.size, 0);",
          "61: fs.closeSync(fd);",
          "64: var success = 0;",
          "65: testTruncate(function(er) {",
          "66:   if (er) throw er;",
          "67:   success++;",
          "68:   testFtruncate(function(er) {",
          "69:     if (er) throw er;",
          "70:     success++;",
          "71:   });",
          "72: });",
          "74: process.on('exit', function() {",
          "75:   assert.equal(success, 2);",
          "76:   console.log('ok');",
          "77: });",
          "79: function testTruncate(cb) {",
          "80:   fs.writeFile(filename, data, function(er) {",
          "81:     if (er) return cb(er);",
          "82:     fs.stat(filename, function(er, stat) {",
          "83:       if (er) return cb(er);",
          "84:       assert.equal(stat.size, 1024 * 16);",
          "86:       fs.truncate(filename, 1024, function(er) {",
          "87:         if (er) return cb(er);",
          "88:         fs.stat(filename, function(er, stat) {",
          "89:           if (er) return cb(er);",
          "90:           assert.equal(stat.size, 1024);",
          "92:           fs.truncate(filename, function(er) {",
          "93:             if (er) return cb(er);",
          "94:             fs.stat(filename, function(er, stat) {",
          "95:               if (er) return cb(er);",
          "96:               assert.equal(stat.size, 0);",
          "97:               cb();",
          "98:             });",
          "99:           });",
          "100:         });",
          "101:       });",
          "102:     });",
          "103:   });",
          "104: }",
          "107: function testFtruncate(cb) {",
          "108:   fs.writeFile(filename, data, function(er) {",
          "109:     if (er) return cb(er);",
          "110:     fs.stat(filename, function(er, stat) {",
          "111:       if (er) return cb(er);",
          "112:       assert.equal(stat.size, 1024 * 16);",
          "114:       fs.open(filename, 'w', function(er, fd) {",
          "115:         if (er) return cb(er);",
          "116:         fs.ftruncate(fd, 1024, function(er) {",
          "117:           if (er) return cb(er);",
          "118:           fs.stat(filename, function(er, stat) {",
          "119:             if (er) return cb(er);",
          "120:             assert.equal(stat.size, 1024);",
          "122:             fs.ftruncate(fd, function(er) {",
          "123:               if (er) return cb(er);",
          "124:               fs.stat(filename, function(er, stat) {",
          "125:                 if (er) return cb(er);",
          "126:                 assert.equal(stat.size, 0);",
          "127:                 fs.close(fd, cb);",
          "128:               });",
          "129:             });",
          "130:           });",
          "131:         });",
          "132:       });",
          "133:     });",
          "134:   });",
          "135: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d8af39accc6e1a863aa60ed80289508f3df50e8",
      "candidate_info": {
        "commit_hash": "2d8af39accc6e1a863aa60ed80289508f3df50e8",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2d8af39accc6e1a863aa60ed80289508f3df50e8",
        "files": [
          "src/node_zlib.cc"
        ],
        "message": "Fix memory leak in node_zlib",
        "before_after_code_files": [
          "src/node_zlib.cc||src/node_zlib.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_zlib.cc||src/node_zlib.cc": [
          "File: src/node_zlib.cc -> src/node_zlib.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:     ctx->chunk_size_ = out_len;",
          "129:     work_req->data = req_wrap;",
          "131:     uv_queue_work(uv_default_loop(),",
          "",
          "[Removed Lines]",
          "128:     uv_work_t* work_req = new uv_work_t();",
          "",
          "[Added Lines]",
          "128:     uv_work_t* work_req = &req_wrap->req_;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d49469d0df0730b16630d8f32fbfc55aaaa0952",
      "candidate_info": {
        "commit_hash": "4d49469d0df0730b16630d8f32fbfc55aaaa0952",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/4d49469d0df0730b16630d8f32fbfc55aaaa0952",
        "files": [
          "lib/child_process.js"
        ],
        "message": "child_process: fix typo in internal message event name",
        "before_after_code_files": [
          "lib/child_process.js||lichild_process.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/child_process.js||lichild_process.js": [
          "File: lib/child_process.js -> lichild_process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "107:             typeof message === 'object' &&",
          "108:             typeof message.cmd === 'string' &&",
          "109:             message.cmd.indexOf('NODE_') === 0) {",
          "111:         }",
          "113:         else {",
          "",
          "[Removed Lines]",
          "110:           target.emit('inernalMessage', message, recvHandle);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90587b1ccbb740e603c5cc5f3222a3c25247fc07",
      "candidate_info": {
        "commit_hash": "90587b1ccbb740e603c5cc5f3222a3c25247fc07",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/90587b1ccbb740e603c5cc5f3222a3c25247fc07",
        "files": [
          "deps/v8/src/platform-solaris.cc"
        ],
        "message": "v8: implement VirtualMemory class on SunOS\n\nUnbreaks build on SunOS. Re-applies 4908e5bf7a9c8014eefcf344e958bf0dad95d907.",
        "before_after_code_files": [
          "deps/v8/src/platform-solaris.cc||deps/v8/src/platform-solaris.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/v8/src/platform-solaris.cc||deps/v8/src/platform-solaris.cc": [
          "File: deps/v8/src/platform-solaris.cc -> deps/v8/src/platform-solaris.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: #include \"platform.h\"",
          "56: #include \"vm-state-inl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: #include \"v8threads.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83: static const pthread_t kNoThread = (pthread_t) 0;",
          "86: double ceiling(double x) {",
          "87:   return ceil(x);",
          "88: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: static void* GetRandomMmapAddr() {",
          "88:   Isolate* isolate = Isolate::UncheckedCurrent();",
          "92:   if (isolate != NULL) {",
          "93: #ifdef V8_TARGET_ARCH_X64",
          "94:     uint64_t rnd1 = V8::RandomPrivate(isolate);",
          "95:     uint64_t rnd2 = V8::RandomPrivate(isolate);",
          "96:     uint64_t raw_addr = (rnd1 << 32) ^ rnd2;",
          "100:     raw_addr &= V8_UINT64_C(0x3ffffffff000);",
          "101: #else",
          "102:     uint32_t raw_addr = V8::RandomPrivate(isolate);",
          "105:     raw_addr &= 0x3ffff000;",
          "106:     raw_addr += 0x20000000;",
          "107: #endif",
          "108:     return reinterpret_cast<void*>(raw_addr);",
          "109:   }",
          "110:   return NULL;",
          "111: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "322: static const int kMmapFdOffset = 0;",
          "325: VirtualMemory::VirtualMemory(size_t size) {",
          "329:   size_ = size;",
          "330: }",
          "333: VirtualMemory::~VirtualMemory() {",
          "334:   if (IsReserved()) {",
          "336:   }",
          "337: }",
          "340: bool VirtualMemory::IsReserved() {",
          "342: }",
          "350:     return false;",
          "351:   }",
          "354:   return true;",
          "355: }",
          "362: }",
          "",
          "[Removed Lines]",
          "326:   address_ = mmap(NULL, size, PROT_NONE,",
          "327:                   MAP_PRIVATE | MAP_ANON | MAP_NORESERVE,",
          "328:                   kMmapFd, kMmapFdOffset);",
          "335:     if (0 == munmap(address(), size())) address_ = MAP_FAILED;",
          "341:   return address_ != MAP_FAILED;",
          "345: bool VirtualMemory::Commit(void* address, size_t size, bool executable) {",
          "346:   int prot = PROT_READ | PROT_WRITE | (executable ? PROT_EXEC : 0);",
          "347:   if (MAP_FAILED == mmap(address, size, prot,",
          "348:                          MAP_PRIVATE | MAP_ANON | MAP_FIXED,",
          "349:                          kMmapFd, kMmapFdOffset)) {",
          "353:   UpdateAllocatedSpaceLimits(address, size);",
          "358: bool VirtualMemory::Uncommit(void* address, size_t size) {",
          "359:   return mmap(address, size, PROT_NONE,",
          "360:               MAP_PRIVATE | MAP_ANON | MAP_NORESERVE | MAP_FIXED,",
          "361:               kMmapFd, kMmapFdOffset) != MAP_FAILED;",
          "",
          "[Added Lines]",
          "353: VirtualMemory::VirtualMemory() : address_(NULL), size_(0) { }",
          "356:   address_ = ReserveRegion(size);",
          "361: VirtualMemory::VirtualMemory(size_t size, size_t alignment)",
          "362:     : address_(NULL), size_(0) {",
          "363:   ASSERT(IsAligned(alignment, static_cast<intptr_t>(OS::AllocateAlignment())));",
          "364:   size_t request_size = RoundUp(size + alignment,",
          "365:                                 static_cast<intptr_t>(OS::AllocateAlignment()));",
          "366:   void* reservation = mmap(GetRandomMmapAddr(),",
          "367:                            request_size,",
          "368:                            PROT_NONE,",
          "369:                            MAP_PRIVATE | MAP_ANONYMOUS | MAP_NORESERVE,",
          "370:                            kMmapFd,",
          "371:                            kMmapFdOffset);",
          "372:   if (reservation == MAP_FAILED) return;",
          "374:   Address base = static_cast<Address>(reservation);",
          "375:   Address aligned_base = RoundUp(base, alignment);",
          "376:   ASSERT_LE(base, aligned_base);",
          "379:   if (aligned_base != base) {",
          "380:     size_t prefix_size = static_cast<size_t>(aligned_base - base);",
          "381:     OS::Free(base, prefix_size);",
          "382:     request_size -= prefix_size;",
          "383:   }",
          "385:   size_t aligned_size = RoundUp(size, OS::AllocateAlignment());",
          "386:   ASSERT_LE(aligned_size, request_size);",
          "388:   if (aligned_size != request_size) {",
          "389:     size_t suffix_size = request_size - aligned_size;",
          "390:     OS::Free(aligned_base + aligned_size, suffix_size);",
          "391:     request_size -= suffix_size;",
          "392:   }",
          "394:   ASSERT(aligned_size == request_size);",
          "396:   address_ = static_cast<void*>(aligned_base);",
          "397:   size_ = aligned_size;",
          "398: }",
          "403:     bool result = ReleaseRegion(address(), size());",
          "404:     ASSERT(result);",
          "405:     USE(result);",
          "411:   return address_ != NULL;",
          "412: }",
          "415: void VirtualMemory::Reset() {",
          "416:   address_ = NULL;",
          "417:   size_ = 0;",
          "421: bool VirtualMemory::Commit(void* address, size_t size, bool is_executable) {",
          "422:   return CommitRegion(address, size, is_executable);",
          "423: }",
          "426: bool VirtualMemory::Uncommit(void* address, size_t size) {",
          "427:   return UncommitRegion(address, size);",
          "428: }",
          "431: void* VirtualMemory::ReserveRegion(size_t size) {",
          "432:   void* result = mmap(GetRandomMmapAddr(),",
          "433:                       size,",
          "434:                       PROT_NONE,",
          "435:                       MAP_PRIVATE | MAP_ANONYMOUS | MAP_NORESERVE,",
          "436:                       kMmapFd,",
          "437:                       kMmapFdOffset);",
          "439:   if (result == MAP_FAILED) return NULL;",
          "441:   return result;",
          "442: }",
          "445: bool VirtualMemory::CommitRegion(void* base, size_t size, bool is_executable) {",
          "446:   int prot = PROT_READ | PROT_WRITE | (is_executable ? PROT_EXEC : 0);",
          "447:   if (MAP_FAILED == mmap(base,",
          "448:                          size,",
          "449:                          prot,",
          "450:                          MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,",
          "451:                          kMmapFd,",
          "452:                          kMmapFdOffset)) {",
          "456:   UpdateAllocatedSpaceLimits(base, size);",
          "461: bool VirtualMemory::UncommitRegion(void* base, size_t size) {",
          "462:   return mmap(base,",
          "463:               size,",
          "464:               PROT_NONE,",
          "465:               MAP_PRIVATE | MAP_ANONYMOUS | MAP_NORESERVE | MAP_FIXED,",
          "466:               kMmapFd,",
          "467:               kMmapFdOffset) != MAP_FAILED;",
          "468: }",
          "471: bool VirtualMemory::ReleaseRegion(void* base, size_t size) {",
          "472:   return munmap(base, size) == 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38542f76a97e5c424aeada2e2dc8371797449335",
      "candidate_info": {
        "commit_hash": "38542f76a97e5c424aeada2e2dc8371797449335",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/38542f76a97e5c424aeada2e2dc8371797449335",
        "files": [
          "lib/buffer.js"
        ],
        "message": "buffer: make SlowBuffer inherit from Buffer\n\nThis frees us from manually having to copy over functions to SlowBuffer's\nprototype (which has bitten us multiple times in the past).\n\nAs an added bonus, the `inspect()` function is now shared between Buffer\nand SlowBuffer, removing some duplicate code.\n\nCloses #3228.",
        "before_after_code_files": [
          "lib/buffer.js||libuffer.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/buffer.js||libuffer.js": [
          "File: lib/buffer.js -> libuffer.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: exports.INSPECT_MAX_BYTES = 50;",
          "37: function toHex(n) {",
          "38:   if (n < 16) return '0' + n.toString(16);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: }",
          "57: SlowBuffer.prototype.hexSlice = function(start, end) {",
          "58:   var len = this.length;",
          "",
          "[Removed Lines]",
          "43: SlowBuffer.prototype.inspect = function() {",
          "44:   var out = [],",
          "45:       len = this.length;",
          "46:   for (var i = 0; i < len; i++) {",
          "47:     out[i] = toHex(this[i]);",
          "48:     if (i == exports.INSPECT_MAX_BYTES) {",
          "49:       out[i + 1] = '...';",
          "50:       break;",
          "51:     }",
          "52:   }",
          "53:   return '<SlowBuffer ' + out.join(' ') + '>';",
          "54: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "304: Buffer.isBuffer = function isBuffer(b) {",
          "306: };",
          "310: Buffer.prototype.inspect = function inspect() {",
          "311:   var out = [],",
          "314:   for (var i = 0; i < len; i++) {",
          "316:     if (i == exports.INSPECT_MAX_BYTES) {",
          "317:       out[i + 1] = '...';",
          "318:       break;",
          "319:     }",
          "320:   }",
          "323: };",
          "",
          "[Removed Lines]",
          "305:   return b instanceof Buffer || b instanceof SlowBuffer;",
          "312:       len = this.length;",
          "315:     out[i] = toHex(this.parent[i + this.offset]);",
          "322:   return '<Buffer ' + out.join(' ') + '>';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1143: Buffer.prototype.writeDoubleBE = function(value, offset, noAssert) {",
          "1144:   writeDouble(this, value, offset, true, noAssert);",
          "1145: };",
          "",
          "[Removed Lines]",
          "1147: SlowBuffer.prototype.readUInt8 = Buffer.prototype.readUInt8;",
          "1148: SlowBuffer.prototype.readUInt16LE = Buffer.prototype.readUInt16LE;",
          "1149: SlowBuffer.prototype.readUInt16BE = Buffer.prototype.readUInt16BE;",
          "1150: SlowBuffer.prototype.readUInt32LE = Buffer.prototype.readUInt32LE;",
          "1151: SlowBuffer.prototype.readUInt32BE = Buffer.prototype.readUInt32BE;",
          "1152: SlowBuffer.prototype.readInt8 = Buffer.prototype.readInt8;",
          "1153: SlowBuffer.prototype.readInt16LE = Buffer.prototype.readInt16LE;",
          "1154: SlowBuffer.prototype.readInt16BE = Buffer.prototype.readInt16BE;",
          "1155: SlowBuffer.prototype.readInt32LE = Buffer.prototype.readInt32LE;",
          "1156: SlowBuffer.prototype.readInt32BE = Buffer.prototype.readInt32BE;",
          "1157: SlowBuffer.prototype.readFloatLE = Buffer.prototype.readFloatLE;",
          "1158: SlowBuffer.prototype.readFloatBE = Buffer.prototype.readFloatBE;",
          "1159: SlowBuffer.prototype.readDoubleLE = Buffer.prototype.readDoubleLE;",
          "1160: SlowBuffer.prototype.readDoubleBE = Buffer.prototype.readDoubleBE;",
          "1161: SlowBuffer.prototype.writeUInt8 = Buffer.prototype.writeUInt8;",
          "1162: SlowBuffer.prototype.writeUInt16LE = Buffer.prototype.writeUInt16LE;",
          "1163: SlowBuffer.prototype.writeUInt16BE = Buffer.prototype.writeUInt16BE;",
          "1164: SlowBuffer.prototype.writeUInt32LE = Buffer.prototype.writeUInt32LE;",
          "1165: SlowBuffer.prototype.writeUInt32BE = Buffer.prototype.writeUInt32BE;",
          "1166: SlowBuffer.prototype.writeInt8 = Buffer.prototype.writeInt8;",
          "1167: SlowBuffer.prototype.writeInt16LE = Buffer.prototype.writeInt16LE;",
          "1168: SlowBuffer.prototype.writeInt16BE = Buffer.prototype.writeInt16BE;",
          "1169: SlowBuffer.prototype.writeInt32LE = Buffer.prototype.writeInt32LE;",
          "1170: SlowBuffer.prototype.writeInt32BE = Buffer.prototype.writeInt32BE;",
          "1171: SlowBuffer.prototype.writeFloatLE = Buffer.prototype.writeFloatLE;",
          "1172: SlowBuffer.prototype.writeFloatBE = Buffer.prototype.writeFloatBE;",
          "1173: SlowBuffer.prototype.writeDoubleLE = Buffer.prototype.writeDoubleLE;",
          "1174: SlowBuffer.prototype.writeDoubleBE = Buffer.prototype.writeDoubleBE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}