{
  "cve_id": "CVE-2021-21323",
  "cve_desc": "Brave is an open source web browser with a focus on privacy and security. In Brave versions 1.17.73-1.20.103, the CNAME adblocking feature added in Brave 1.17.73 accidentally initiated DNS requests that bypassed the Brave Tor proxy. Users with adblocking enabled would leak DNS requests from Tor windows to their DNS provider. (DNS requests that were not initiated by CNAME adblocking would go through Tor as expected.) This is fixed in Brave version 1.20.108",
  "repo": "brave/brave-core",
  "patch_hash": "12fe321eaad8acc1cbd1d70b4128f687777bcf15",
  "patch_info": {
    "commit_hash": "12fe321eaad8acc1cbd1d70b4128f687777bcf15",
    "repo": "brave/brave-core",
    "commit_url": "https://github.com/brave/brave-core/commit/12fe321eaad8acc1cbd1d70b4128f687777bcf15",
    "files": [
      "browser/net/BUILD.gn",
      "browser/net/brave_ad_block_tp_network_delegate_helper.cc",
      "android/brave_java_resources.gni",
      "android/brave_java_sources.gni",
      "android/java/org/chromium/chrome/browser/BraveRewardsBalance.java",
      "android/java/org/chromium/chrome/browser/BraveRewardsHelper.java",
      "android/java/org/chromium/chrome/browser/BraveRewardsPanelPopup.java",
      "android/java/org/chromium/chrome/browser/DeprecateBAPModalDialogFragment.java",
      "android/java/org/chromium/chrome/browser/app/BraveActivity.java",
      "android/java/org/chromium/chrome/browser/shields/ShieldsTooltipEnum.java",
      "android/java/org/chromium/chrome/browser/toolbar/top/BraveToolbarLayout.java",
      "android/java/res/drawable/ic_warning_triangle.xml",
      "android/java/res/drawable/ic_warning_triangle_2.xml",
      "android/java/res/drawable/rewards_modal_background.xml",
      "android/java/res/drawable/rewards_tooltip_background.xml",
      "android/java/res/layout/brave_shields_tooltip_layout.xml",
      "android/java/res/layout/fragment_deprecate_bap_modal_dialog.xml",
      "android/java/res/values/brave_colors.xml",
      "browser/farbling/brave_offscreencanvas_farbling_browsertest.cc",
      "browser/ui/android/strings/android_brave_strings.grd",
      "chromium_src/third_party/blink/renderer/core/execution_context/execution_context.cc",
      "components/content_settings/renderer/brave_content_settings_agent_impl_browsertest.cc",
      "components/cosmetic_filters/renderer/cosmetic_filters_js_handler.cc",
      "components/cosmetic_filters/renderer/cosmetic_filters_js_handler.h",
      "ui/webui/resources/br_elements/br_toolbar/br_toolbar.html"
    ],
    "message": "Merge pull request #7769 from brave/tor-dns-leak\n\nFix Tor dns leak",
    "before_after_code_files": [
      "browser/net/BUILD.gn||browser/net/BUILD.gn",
      "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc"
    ]
  },
  "patch_diff": {
    "browser/net/BUILD.gn||browser/net/BUILD.gn": [
      "File: browser/net/BUILD.gn -> browser/net/BUILD.gn",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     \"//brave/components/brave_webtorrent/browser/buildflags\",",
      "55:     \"//brave/components/ipfs/buildflags\",",
      "56:     \"//brave/extensions:common\",",
      "57:     \"//components/prefs\",",
      "58:     \"//components/user_prefs\",",
      "59:     \"//content/public/browser\",",
      "60:     \"//content/public/common\",",
      "62:     \"//extensions/common:common_constants\",",
      "63:     \"//mojo/public/cpp/bindings\",",
      "64:     \"//mojo/public/cpp/system\",",
      "",
      "[Removed Lines]",
      "61:     \"//components/content_settings/core/browser\",",
      "",
      "[Added Lines]",
      "57:     \"//components/content_settings/core/browser\",",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "88:       \"brave_referrals_network_delegate_helper.h\",",
      "89:     ]",
      "94:   }",
      "96:   if (enable_brave_webtorrent) {",
      "",
      "[Removed Lines]",
      "91:     deps += [",
      "92:       \"//brave/components/brave_referrals/browser\",",
      "93:     ]",
      "",
      "[Added Lines]",
      "91:     deps += [ \"//brave/components/brave_referrals/browser\" ]",
      "",
      "---------------"
    ],
    "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc": [
      "File: browser/net/brave_ad_block_tp_network_delegate_helper.cc -> browser/net/brave_ad_block_tp_network_delegate_helper.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "65:   std::string source_host = ctx->initiator_url.host();",
      "67:   g_brave_browser_process->ad_block_service()->ShouldStartRequest(",
      "71:   if (did_match_important) {",
      "72:     ctx->blocked_by = kAdBlocked;",
      "73:     return;",
      "74:   }",
      "78:     GURL::Replacements replacements = GURL::Replacements();",
      "79:     replacements.SetHost(",
      "80:         canonical_name->c_str(),",
      "",
      "[Removed Lines]",
      "68:         ctx->request_url, ctx->resource_type, source_host,",
      "69:         &did_match_rule, &did_match_exception, &did_match_important,",
      "70:         &ctx->mock_data_url);",
      "76:   if (canonical_name.has_value() && ctx->request_url.host() != *canonical_name",
      "77:       && *canonical_name != \"\") {",
      "",
      "[Added Lines]",
      "68:       ctx->request_url, ctx->resource_type, source_host, &did_match_rule,",
      "69:       &did_match_exception, &did_match_important, &ctx->mock_data_url);",
      "75:   if (canonical_name.has_value() &&",
      "76:       ctx->request_url.host() != *canonical_name && *canonical_name != \"\") {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "82:     const GURL canonical_url = ctx->request_url.ReplaceComponents(replacements);",
      "84:     g_brave_browser_process->ad_block_service()->ShouldStartRequest(",
      "88:   }",
      "90:   if (did_match_important || (did_match_rule && !did_match_exception)) {",
      "",
      "[Removed Lines]",
      "85:         ctx->request_url, ctx->resource_type, source_host,",
      "86:         &did_match_rule, &did_match_exception, &did_match_important,",
      "87:         &ctx->mock_data_url);",
      "",
      "[Added Lines]",
      "84:         ctx->request_url, ctx->resource_type, source_host, &did_match_rule,",
      "85:         &did_match_exception, &did_match_important, &ctx->mock_data_url);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "206:   scoped_refptr<base::SequencedTaskRunner> task_runner =",
      "207:       g_brave_browser_process->ad_block_service()->GetTaskRunner();",
      "210: }",
      "212: int OnBeforeURLRequest_AdBlockTPPreWork(const ResponseCallback& next_callback,",
      "",
      "[Removed Lines]",
      "209:   new AdblockCnameResolveHostClient(std::move(next_callback), task_runner, ctx);",
      "",
      "[Added Lines]",
      "207:   DCHECK(ctx->browser_context);",
      "210:   if (ctx->browser_context->IsTor()) {",
      "211:     ShouldBlockAdWithOptionalCname(task_runner, std::move(next_callback), ctx,",
      "212:                                    base::nullopt);",
      "213:   } else {",
      "214:     new AdblockCnameResolveHostClient(std::move(next_callback), task_runner,",
      "215:                                       ctx);",
      "216:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "47118d97c8561bd455da9ff72f4cb42cdac6be03",
      "candidate_info": {
        "commit_hash": "47118d97c8561bd455da9ff72f4cb42cdac6be03",
        "repo": "brave/brave-core",
        "commit_url": "https://github.com/brave/brave-core/commit/47118d97c8561bd455da9ff72f4cb42cdac6be03",
        "files": [
          "browser/net/BUILD.gn",
          "browser/net/brave_ad_block_tp_network_delegate_helper.cc",
          "browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc"
        ],
        "message": "Bypass CNAME adblocking for Tor when DoH is not enabled by users",
        "before_after_code_files": [
          "browser/net/BUILD.gn||browser/net/BUILD.gn",
          "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc",
          "browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc||browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/brave/brave-core/pull/7769"
        ],
        "olp_code_files": {
          "patch": [
            "browser/net/BUILD.gn||browser/net/BUILD.gn",
            "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc"
          ],
          "candidate": [
            "browser/net/BUILD.gn||browser/net/BUILD.gn",
            "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc"
          ]
        }
      },
      "candidate_diff": {
        "browser/net/BUILD.gn||browser/net/BUILD.gn": [
          "File: browser/net/BUILD.gn -> browser/net/BUILD.gn",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:     \"//brave/components/ipfs/buildflags\",",
          "56:     \"//brave/extensions:common\",",
          "57:     \"//components/content_settings/core/browser\",",
          "59:     \"//components/prefs\",",
          "60:     \"//components/user_prefs\",",
          "61:     \"//content/public/browser\",",
          "",
          "[Removed Lines]",
          "58:     \"//components/country_codes\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc": [
          "File: browser/net/brave_ad_block_tp_network_delegate_helper.cc -> browser/net/brave_ad_block_tp_network_delegate_helper.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"brave/components/brave_shields/browser/brave_shields_web_contents_observer.h\"",
          "21: #include \"brave/components/brave_shields/common/brave_shield_constants.h\"",
          "22: #include \"brave/grit/brave_generated_resources.h\"",
          "25: #include \"content/public/browser/browser_context.h\"",
          "26: #include \"content/public/browser/browser_thread.h\"",
          "27: #include \"content/public/browser/render_frame_host.h\"",
          "",
          "[Removed Lines]",
          "23: #include \"chrome/browser/net/secure_dns_util.h\"",
          "24: #include \"components/country_codes/country_codes.h\"",
          "",
          "[Added Lines]",
          "23: #include \"chrome/browser/net/secure_dns_config.h\"",
          "24: #include \"chrome/browser/net/system_network_context_manager.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: #include \"content/public/browser/web_contents.h\"",
          "30: #include \"extensions/common/url_pattern.h\"",
          "31: #include \"mojo/public/cpp/bindings/remote.h\"",
          "33: #include \"services/network/network_context.h\"",
          "34: #include \"ui/base/resource/resource_bundle.h\"",
          "35: #include \"url/url_canon.h\"",
          "39: namespace brave {",
          "41: namespace {",
          "",
          "[Removed Lines]",
          "32: #include \"net/dns/public/doh_provider_entry.h\"",
          "37: namespace secure_dns = chrome_browser_net::secure_dns;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:   return web_contents;",
          "58: }",
          "67: }  // namespace",
          "69: void ShouldBlockAdOnTaskRunner(std::shared_ptr<BraveRequestInfo> ctx,",
          "",
          "[Removed Lines]",
          "60: net::DohProviderEntry::List GetFilteredProviders() {",
          "61:   const auto local_providers = secure_dns::ProvidersForCountry(",
          "62:       net::DohProviderEntry::GetList(), country_codes::GetCurrentCountryID());",
          "63:   return secure_dns::RemoveDisabledProviders(",
          "64:       local_providers, secure_dns::GetDisabledProviders());",
          "65: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:   std::string source_host = ctx->initiator_url.host();",
          "79:   g_brave_browser_process->ad_block_service()->ShouldStartRequest(",
          "83:   if (did_match_important) {",
          "84:     ctx->blocked_by = kAdBlocked;",
          "85:     return;",
          "86:   }",
          "90:     GURL::Replacements replacements = GURL::Replacements();",
          "91:     replacements.SetHost(",
          "92:         canonical_name->c_str(),",
          "",
          "[Removed Lines]",
          "80:         ctx->request_url, ctx->resource_type, source_host,",
          "81:         &did_match_rule, &did_match_exception, &did_match_important,",
          "82:         &ctx->mock_data_url);",
          "88:   if (canonical_name.has_value() && ctx->request_url.host() != *canonical_name",
          "89:       && *canonical_name != \"\") {",
          "",
          "[Added Lines]",
          "70:       ctx->request_url, ctx->resource_type, source_host, &did_match_rule,",
          "71:       &did_match_exception, &did_match_important, &ctx->mock_data_url);",
          "77:   if (canonical_name.has_value() &&",
          "78:       ctx->request_url.host() != *canonical_name && *canonical_name != \"\") {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "94:     const GURL canonical_url = ctx->request_url.ReplaceComponents(replacements);",
          "96:     g_brave_browser_process->ad_block_service()->ShouldStartRequest(",
          "100:   }",
          "102:   if (did_match_important || (did_match_rule && !did_match_exception)) {",
          "",
          "[Removed Lines]",
          "97:         ctx->request_url, ctx->resource_type, source_host,",
          "98:         &did_match_rule, &did_match_exception, &did_match_important,",
          "99:         &ctx->mock_data_url);",
          "",
          "[Added Lines]",
          "86:         ctx->request_url, ctx->resource_type, source_host, &did_match_rule,",
          "87:         &did_match_exception, &did_match_important, &ctx->mock_data_url);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "129: class AdblockCnameResolveHostClient : public network::mojom::ResolveHostClient {",
          "130:  private:",
          "131:   mojo::Receiver<network::mojom::ResolveHostClient> receiver_{this};",
          "133:   base::OnceCallback<void(base::Optional<std::string>)> cb_;",
          "134:   base::TimeTicks start_time_;",
          "",
          "[Removed Lines]",
          "132:   mojo::Remote<network::mojom::HostResolver> host_resolver_;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "162:     optional_parameters->source = net::HostResolverSource::DNS;",
          "178:     network::mojom::NetworkContext* network_context =",
          "179:         content::BrowserContext::GetDefaultStoragePartition(context)",
          "180:             ->GetNetworkContext();",
          "182:     start_time_ = base::TimeTicks::Now();",
          "193:         net::HostPortPair::FromURL(ctx->request_url), network_isolation_key,",
          "194:         std::move(optional_parameters), receiver_.BindNewPipeAndPassRemote());",
          "",
          "[Removed Lines]",
          "164:     net::DnsConfigOverrides dns_config_overrides;",
          "165:     if (context->IsTor()) {",
          "170:       dns_config_overrides.secure_dns_mode = net::SecureDnsMode::kSecure;",
          "171:       std::vector<net::DnsOverHttpsServerConfig> doh_servers;",
          "172:       for (const auto* entry : GetFilteredProviders()) {",
          "173:         doh_servers.emplace_back(entry->dns_over_https_template, true);",
          "174:       }",
          "175:       dns_config_overrides.dns_over_https_servers.emplace(doh_servers);",
          "176:     }",
          "184:     host_resolver_.reset();",
          "185:     network_context->CreateHostResolver(",
          "186:         dns_config_overrides, host_resolver_.BindNewPipeAndPassReceiver());",
          "188:     if (!host_resolver_) {",
          "189:       this->OnComplete(net::ERR_FAILED, net::ResolveErrorInfo(), base::nullopt);",
          "190:       return;",
          "191:     }",
          "192:     host_resolver_->ResolveHost(",
          "",
          "[Added Lines]",
          "157:     network_context->ResolveHost(",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "258:     return net::OK;",
          "259:   }",
          "261:   OnBeforeURLRequestAdBlockTP(next_callback, ctx);",
          "263:   return net::ERR_IO_PENDING;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:   DCHECK(ctx->browser_context);",
          "227:   if (ctx->browser_context->IsTor()) {",
          "228:     SecureDnsConfig secure_dns_config =",
          "229:         SystemNetworkContextManager::GetStubResolverConfigReader()",
          "230:             ->GetSecureDnsConfiguration(false);",
          "234:     if (secure_dns_config.mode() != net::SecureDnsMode::kSecure ||",
          "235:         secure_dns_config.servers().empty()) {",
          "236:       return net::OK;",
          "237:     }",
          "238:   }",
          "",
          "---------------"
        ],
        "browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc||browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc": [
          "File: browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc -> browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include \"brave/browser/net/url_context.h\"",
          "13: #include \"brave/common/network_constants.h\"",
          "14: #include \"net/base/net_errors.h\"",
          "15: #include \"testing/gtest/include/gtest/gtest.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: #include \"chrome/browser/net/secure_dns_config.h\"",
          "15: #include \"chrome/browser/net/stub_resolver_config_reader.h\"",
          "16: #include \"chrome/browser/net/system_network_context_manager.h\"",
          "17: #include \"chrome/common/pref_names.h\"",
          "18: #include \"chrome/test/base/scoped_testing_local_state.h\"",
          "19: #include \"chrome/test/base/testing_browser_process.h\"",
          "20: #include \"content/public/test/browser_task_environment.h\"",
          "21: #include \"content/public/test/test_browser_context.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:   EXPECT_TRUE(request_info->new_url_spec.empty());",
          "33:   EXPECT_EQ(rc, net::OK);",
          "34: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: namespace {",
          "45: class TestTorBrowserContext : public content::TestBrowserContext {",
          "46:  public:",
          "47:   TestTorBrowserContext() : content::TestBrowserContext() {}",
          "48:   ~TestTorBrowserContext() override = default;",
          "50:   bool IsTor() const override { return true; }",
          "51: };",
          "52: }  // namespace",
          "54: class BraveCNAMEAdBlockTest : public testing::Test {",
          "55:  public:",
          "56:   BraveCNAMEAdBlockTest() : tor_browser_context_(new TestTorBrowserContext()) {",
          "57:     local_state_ = std::make_unique<ScopedTestingLocalState>(",
          "58:         TestingBrowserProcess::GetGlobal());",
          "63:     stub_resolver_config_reader_ =",
          "64:         std::make_unique<StubResolverConfigReader>(local_state_->Get());",
          "65:     SystemNetworkContextManager::set_stub_resolver_config_reader_for_testing(",
          "66:         stub_resolver_config_reader_.get());",
          "67:   }",
          "68:   ~BraveCNAMEAdBlockTest() override = default;",
          "70:   content::BrowserContext* tor_context() { return tor_browser_context_.get(); }",
          "72:   TestingPrefServiceSimple* local_state() { return local_state_->Get(); }",
          "74:  private:",
          "75:   content::BrowserTaskEnvironment task_environment_;",
          "76:   std::unique_ptr<content::BrowserContext> tor_browser_context_;",
          "77:   std::unique_ptr<ScopedTestingLocalState> local_state_;",
          "78:   std::unique_ptr<StubResolverConfigReader> stub_resolver_config_reader_;",
          "79: };",
          "81: TEST_F(BraveCNAMEAdBlockTest, DisableInsecureRequestsOverTor) {",
          "82:   const GURL url(\"https://wow.brave.com\");",
          "83:   auto request_info = std::make_shared<brave::BraveRequestInfo>(url);",
          "84:   request_info->tab_origin = GURL(\"https://brave.com\");",
          "85:   request_info->resource_type = blink::mojom::ResourceType::kMainFrame;",
          "86:   request_info->browser_context = tor_context();",
          "89:   local_state()->SetManagedPref(",
          "90:       prefs::kDnsOverHttpsMode,",
          "91:       std::make_unique<base::Value>(SecureDnsConfig::kModeAutomatic));",
          "92:   int rc =",
          "93:       OnBeforeURLRequest_AdBlockTPPreWork(ResponseCallback(), request_info);",
          "94:   EXPECT_EQ(rc, net::OK);",
          "97:   local_state()->SetManagedPref(",
          "98:       prefs::kDnsOverHttpsMode,",
          "99:       std::make_unique<base::Value>(SecureDnsConfig::kModeOff));",
          "100:   rc = OnBeforeURLRequest_AdBlockTPPreWork(ResponseCallback(), request_info);",
          "101:   EXPECT_EQ(rc, net::OK);",
          "104:   local_state()->SetManagedPref(",
          "105:       prefs::kDnsOverHttpsMode,",
          "106:       std::make_unique<base::Value>(SecureDnsConfig::kModeSecure));",
          "107:   rc = OnBeforeURLRequest_AdBlockTPPreWork(ResponseCallback(), request_info);",
          "108:   EXPECT_EQ(rc, net::OK);",
          "109: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e099e88e02907d4553adf4eb04590113f703233",
      "candidate_info": {
        "commit_hash": "5e099e88e02907d4553adf4eb04590113f703233",
        "repo": "brave/brave-core",
        "commit_url": "https://github.com/brave/brave-core/commit/5e099e88e02907d4553adf4eb04590113f703233",
        "files": [
          "chromium_src/net/dns/dns_transaction.cc"
        ],
        "message": "DoH requests should respect proxy config Tested on Firefox: When DoH is enabled, the requests will route through proxy",
        "before_after_code_files": [
          "chromium_src/net/dns/dns_transaction.cc||chromium_src/net/dns/dns_transaction.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/brave/brave-core/pull/7769"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "chromium_src/net/dns/dns_transaction.cc||chromium_src/net/dns/dns_transaction.cc": [
          "File: chromium_src/net/dns/dns_transaction.cc -> chromium_src/net/dns/dns_transaction.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include \"net/base/load_flags.h\"",
          "8: #define LOAD_BYPASS_PROXY LOAD_DISABLE_CACHE",
          "9: #include \"../../../../net/dns/dns_transaction.cc\"",
          "10: #undef LOAD_BYPASS_PROXY",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "745570427b6e49e9764eb34156300abbc24efb31",
      "candidate_info": {
        "commit_hash": "745570427b6e49e9764eb34156300abbc24efb31",
        "repo": "brave/brave-core",
        "commit_url": "https://github.com/brave/brave-core/commit/745570427b6e49e9764eb34156300abbc24efb31",
        "files": [
          "browser/net/BUILD.gn",
          "browser/net/brave_ad_block_tp_network_delegate_helper.cc"
        ],
        "message": "Enforce DoH for the CNAME adblock DNS query for Tor context because we currently have no better way to route insecure DNS query through proxy like \"Proxy DNS when using SOCKS v5\" (network.proxy.socks_remote_dns) that Firefox has",
        "before_after_code_files": [
          "browser/net/BUILD.gn||browser/net/BUILD.gn",
          "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/brave/brave-core/pull/7769"
        ],
        "olp_code_files": {
          "patch": [
            "browser/net/BUILD.gn||browser/net/BUILD.gn",
            "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc"
          ],
          "candidate": [
            "browser/net/BUILD.gn||browser/net/BUILD.gn",
            "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc"
          ]
        }
      },
      "candidate_diff": {
        "browser/net/BUILD.gn||browser/net/BUILD.gn": [
          "File: browser/net/BUILD.gn -> browser/net/BUILD.gn",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     \"//brave/components/brave_webtorrent/browser/buildflags\",",
          "55:     \"//brave/components/ipfs/buildflags\",",
          "56:     \"//brave/extensions:common\",",
          "57:     \"//components/prefs\",",
          "58:     \"//components/user_prefs\",",
          "59:     \"//content/public/browser\",",
          "60:     \"//content/public/common\",",
          "62:     \"//extensions/common:common_constants\",",
          "63:     \"//mojo/public/cpp/bindings\",",
          "64:     \"//mojo/public/cpp/system\",",
          "",
          "[Removed Lines]",
          "61:     \"//components/content_settings/core/browser\",",
          "",
          "[Added Lines]",
          "57:     \"//components/content_settings/core/browser\",",
          "58:     \"//components/country_codes\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:       \"brave_referrals_network_delegate_helper.h\",",
          "89:     ]",
          "94:   }",
          "96:   if (enable_brave_webtorrent) {",
          "",
          "[Removed Lines]",
          "91:     deps += [",
          "92:       \"//brave/components/brave_referrals/browser\",",
          "93:     ]",
          "",
          "[Added Lines]",
          "92:     deps += [ \"//brave/components/brave_referrals/browser\" ]",
          "",
          "---------------"
        ],
        "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc": [
          "File: browser/net/brave_ad_block_tp_network_delegate_helper.cc -> browser/net/brave_ad_block_tp_network_delegate_helper.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"brave/components/brave_shields/browser/brave_shields_web_contents_observer.h\"",
          "21: #include \"brave/components/brave_shields/common/brave_shield_constants.h\"",
          "22: #include \"brave/grit/brave_generated_resources.h\"",
          "23: #include \"content/public/browser/browser_context.h\"",
          "24: #include \"content/public/browser/browser_thread.h\"",
          "25: #include \"content/public/browser/render_frame_host.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "23: #include \"chrome/browser/net/secure_dns_util.h\"",
          "24: #include \"components/country_codes/country_codes.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: #include \"content/public/browser/web_contents.h\"",
          "28: #include \"extensions/common/url_pattern.h\"",
          "29: #include \"mojo/public/cpp/bindings/remote.h\"",
          "30: #include \"services/network/network_context.h\"",
          "31: #include \"ui/base/resource/resource_bundle.h\"",
          "32: #include \"url/url_canon.h\"",
          "34: namespace brave {",
          "36: namespace {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include \"net/dns/public/doh_provider_entry.h\"",
          "37: namespace secure_dns = chrome_browser_net::secure_dns;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "52:   return web_contents;",
          "53: }",
          "55: }  // namespace",
          "57: void ShouldBlockAdOnTaskRunner(std::shared_ptr<BraveRequestInfo> ctx,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "60: net::DohProviderEntry::List GetFilteredProviders() {",
          "61:   const auto local_providers = secure_dns::ProvidersForCountry(",
          "62:       net::DohProviderEntry::GetList(), country_codes::GetCurrentCountryID());",
          "63:   return secure_dns::RemoveDisabledProviders(",
          "64:       local_providers, secure_dns::GetDisabledProviders());",
          "65: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "117: class AdblockCnameResolveHostClient : public network::mojom::ResolveHostClient {",
          "118:  private:",
          "119:   mojo::Receiver<network::mojom::ResolveHostClient> receiver_{this};",
          "120:   base::OnceCallback<void(base::Optional<std::string>)> cb_;",
          "121:   base::TimeTicks start_time_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132:   mojo::Remote<network::mojom::HostResolver> host_resolver_;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "149:     optional_parameters->source = net::HostResolverSource::DNS;",
          "151:     network::mojom::NetworkContext* network_context =",
          "152:         content::BrowserContext::GetDefaultStoragePartition(context)",
          "153:             ->GetNetworkContext();",
          "155:     start_time_ = base::TimeTicks::Now();",
          "158:         net::HostPortPair::FromURL(ctx->request_url), network_isolation_key,",
          "159:         std::move(optional_parameters), receiver_.BindNewPipeAndPassRemote());",
          "",
          "[Removed Lines]",
          "157:     network_context->ResolveHost(",
          "",
          "[Added Lines]",
          "164:     net::DnsConfigOverrides dns_config_overrides;",
          "165:     if (context->IsTor()) {",
          "170:       dns_config_overrides.secure_dns_mode = net::SecureDnsMode::kSecure;",
          "171:       std::vector<net::DnsOverHttpsServerConfig> doh_servers;",
          "172:       for (const auto* entry : GetFilteredProviders()) {",
          "173:         doh_servers.emplace_back(entry->dns_over_https_template, true);",
          "174:       }",
          "175:       dns_config_overrides.dns_over_https_servers.emplace(doh_servers);",
          "176:     }",
          "184:     host_resolver_.reset();",
          "185:     network_context->CreateHostResolver(",
          "186:         dns_config_overrides, host_resolver_.BindNewPipeAndPassReceiver());",
          "188:     if (!host_resolver_) {",
          "189:       this->OnComplete(net::ERR_FAILED, net::ResolveErrorInfo(), base::nullopt);",
          "190:       return;",
          "191:     }",
          "192:     host_resolver_->ResolveHost(",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a148c43124434ca5440c9fef1a99b9b712c966a0",
      "candidate_info": {
        "commit_hash": "a148c43124434ca5440c9fef1a99b9b712c966a0",
        "repo": "brave/brave-core",
        "commit_url": "https://github.com/brave/brave-core/commit/a148c43124434ca5440c9fef1a99b9b712c966a0",
        "files": [
          "browser/net/brave_ad_block_tp_network_delegate_helper.cc",
          "browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc",
          "chromium_src/net/dns/dns_transaction.cc"
        ],
        "message": "Disable CNAME adblock for Tor",
        "before_after_code_files": [
          "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc",
          "browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc||browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc",
          "chromium_src/net/dns/dns_transaction.cc||chromium_src/net/dns/dns_transaction.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/brave/brave-core/pull/7769"
        ],
        "olp_code_files": {
          "patch": [
            "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc"
          ],
          "candidate": [
            "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc"
          ]
        }
      },
      "candidate_diff": {
        "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc": [
          "File: browser/net/brave_ad_block_tp_network_delegate_helper.cc -> browser/net/brave_ad_block_tp_network_delegate_helper.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include \"brave/components/brave_shields/browser/brave_shields_web_contents_observer.h\"",
          "21: #include \"brave/components/brave_shields/common/brave_shield_constants.h\"",
          "22: #include \"brave/grit/brave_generated_resources.h\"",
          "25: #include \"content/public/browser/browser_context.h\"",
          "26: #include \"content/public/browser/browser_thread.h\"",
          "27: #include \"content/public/browser/render_frame_host.h\"",
          "",
          "[Removed Lines]",
          "23: #include \"chrome/browser/net/secure_dns_config.h\"",
          "24: #include \"chrome/browser/net/system_network_context_manager.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:   scoped_refptr<base::SequencedTaskRunner> task_runner =",
          "207:       g_brave_browser_process->ad_block_service()->GetTaskRunner();",
          "210: }",
          "212: int OnBeforeURLRequest_AdBlockTPPreWork(const ResponseCallback& next_callback,",
          "",
          "[Removed Lines]",
          "209:   new AdblockCnameResolveHostClient(std::move(next_callback), task_runner, ctx);",
          "",
          "[Added Lines]",
          "207:   DCHECK(ctx->browser_context);",
          "210:   if (ctx->browser_context->IsTor()) {",
          "211:     ShouldBlockAdWithOptionalCname(task_runner, std::move(next_callback), ctx,",
          "212:                                    base::nullopt);",
          "213:   } else {",
          "214:     new AdblockCnameResolveHostClient(std::move(next_callback), task_runner,",
          "215:                                       ctx);",
          "216:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "223:     return net::OK;",
          "224:   }",
          "239:   OnBeforeURLRequestAdBlockTP(next_callback, ctx);",
          "241:   return net::ERR_IO_PENDING;",
          "",
          "[Removed Lines]",
          "226:   DCHECK(ctx->browser_context);",
          "227:   if (ctx->browser_context->IsTor()) {",
          "228:     SecureDnsConfig secure_dns_config =",
          "229:         SystemNetworkContextManager::GetStubResolverConfigReader()",
          "230:             ->GetSecureDnsConfiguration(false);",
          "234:     if (secure_dns_config.mode() != net::SecureDnsMode::kSecure ||",
          "235:         secure_dns_config.servers().empty()) {",
          "236:       return net::OK;",
          "237:     }",
          "238:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc||browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc": [
          "File: browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc -> browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include \"brave/browser/net/url_context.h\"",
          "13: #include \"brave/common/network_constants.h\"",
          "22: #include \"net/base/net_errors.h\"",
          "23: #include \"testing/gtest/include/gtest/gtest.h\"",
          "",
          "[Removed Lines]",
          "14: #include \"chrome/browser/net/secure_dns_config.h\"",
          "15: #include \"chrome/browser/net/stub_resolver_config_reader.h\"",
          "16: #include \"chrome/browser/net/system_network_context_manager.h\"",
          "17: #include \"chrome/common/pref_names.h\"",
          "18: #include \"chrome/test/base/scoped_testing_local_state.h\"",
          "19: #include \"chrome/test/base/testing_browser_process.h\"",
          "20: #include \"content/public/test/browser_task_environment.h\"",
          "21: #include \"content/public/test/test_browser_context.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:   EXPECT_TRUE(request_info->new_url_spec.empty());",
          "41:   EXPECT_EQ(rc, net::OK);",
          "42: }",
          "",
          "[Removed Lines]",
          "44: namespace {",
          "45: class TestTorBrowserContext : public content::TestBrowserContext {",
          "46:  public:",
          "47:   TestTorBrowserContext() : content::TestBrowserContext() {}",
          "48:   ~TestTorBrowserContext() override = default;",
          "50:   bool IsTor() const override { return true; }",
          "51: };",
          "52: }  // namespace",
          "54: class BraveCNAMEAdBlockTest : public testing::Test {",
          "55:  public:",
          "56:   BraveCNAMEAdBlockTest() : tor_browser_context_(new TestTorBrowserContext()) {",
          "57:     local_state_ = std::make_unique<ScopedTestingLocalState>(",
          "58:         TestingBrowserProcess::GetGlobal());",
          "63:     stub_resolver_config_reader_ =",
          "64:         std::make_unique<StubResolverConfigReader>(local_state_->Get());",
          "65:     SystemNetworkContextManager::set_stub_resolver_config_reader_for_testing(",
          "66:         stub_resolver_config_reader_.get());",
          "67:   }",
          "68:   ~BraveCNAMEAdBlockTest() override = default;",
          "70:   content::BrowserContext* tor_context() { return tor_browser_context_.get(); }",
          "72:   TestingPrefServiceSimple* local_state() { return local_state_->Get(); }",
          "74:  private:",
          "75:   content::BrowserTaskEnvironment task_environment_;",
          "76:   std::unique_ptr<content::BrowserContext> tor_browser_context_;",
          "77:   std::unique_ptr<ScopedTestingLocalState> local_state_;",
          "78:   std::unique_ptr<StubResolverConfigReader> stub_resolver_config_reader_;",
          "79: };",
          "81: TEST_F(BraveCNAMEAdBlockTest, DisableInsecureRequestsOverTor) {",
          "82:   const GURL url(\"https://wow.brave.com\");",
          "83:   auto request_info = std::make_shared<brave::BraveRequestInfo>(url);",
          "84:   request_info->tab_origin = GURL(\"https://brave.com\");",
          "85:   request_info->resource_type = blink::mojom::ResourceType::kMainFrame;",
          "86:   request_info->browser_context = tor_context();",
          "89:   local_state()->SetManagedPref(",
          "90:       prefs::kDnsOverHttpsMode,",
          "91:       std::make_unique<base::Value>(SecureDnsConfig::kModeAutomatic));",
          "92:   int rc =",
          "93:       OnBeforeURLRequest_AdBlockTPPreWork(ResponseCallback(), request_info);",
          "94:   EXPECT_EQ(rc, net::OK);",
          "97:   local_state()->SetManagedPref(",
          "98:       prefs::kDnsOverHttpsMode,",
          "99:       std::make_unique<base::Value>(SecureDnsConfig::kModeOff));",
          "100:   rc = OnBeforeURLRequest_AdBlockTPPreWork(ResponseCallback(), request_info);",
          "101:   EXPECT_EQ(rc, net::OK);",
          "104:   local_state()->SetManagedPref(",
          "105:       prefs::kDnsOverHttpsMode,",
          "106:       std::make_unique<base::Value>(SecureDnsConfig::kModeSecure));",
          "107:   rc = OnBeforeURLRequest_AdBlockTPPreWork(ResponseCallback(), request_info);",
          "108:   EXPECT_EQ(rc, net::OK);",
          "109: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "chromium_src/net/dns/dns_transaction.cc||chromium_src/net/dns/dns_transaction.cc": [
          "File: chromium_src/net/dns/dns_transaction.cc -> chromium_src/net/dns/dns_transaction.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91e9db544d33b95a60fcdeb8691d9989d0b49295",
      "candidate_info": {
        "commit_hash": "91e9db544d33b95a60fcdeb8691d9989d0b49295",
        "repo": "brave/brave-core",
        "commit_url": "https://github.com/brave/brave-core/commit/91e9db544d33b95a60fcdeb8691d9989d0b49295",
        "files": [
          "browser/net/BUILD.gn",
          "browser/net/brave_ad_block_tp_network_delegate_helper.cc"
        ],
        "message": "Uplift of #7769 (squashed) to beta",
        "before_after_code_files": [
          "browser/net/BUILD.gn||browser/net/BUILD.gn",
          "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "browser/net/BUILD.gn||browser/net/BUILD.gn",
            "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc"
          ],
          "candidate": [
            "browser/net/BUILD.gn||browser/net/BUILD.gn",
            "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc"
          ]
        }
      },
      "candidate_diff": {
        "browser/net/BUILD.gn||browser/net/BUILD.gn": [
          "File: browser/net/BUILD.gn -> browser/net/BUILD.gn",
          "--- Hunk 1 ---",
          "[Context before]",
          "54:     \"//brave/components/brave_webtorrent/browser/buildflags\",",
          "55:     \"//brave/components/ipfs/buildflags\",",
          "56:     \"//brave/extensions:common\",",
          "57:     \"//components/prefs\",",
          "58:     \"//components/user_prefs\",",
          "59:     \"//content/public/browser\",",
          "60:     \"//content/public/common\",",
          "62:     \"//extensions/common:common_constants\",",
          "63:     \"//mojo/public/cpp/bindings\",",
          "64:     \"//mojo/public/cpp/system\",",
          "",
          "[Removed Lines]",
          "61:     \"//components/content_settings/core/browser\",",
          "",
          "[Added Lines]",
          "57:     \"//components/content_settings/core/browser\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88:       \"brave_referrals_network_delegate_helper.h\",",
          "89:     ]",
          "94:   }",
          "96:   if (enable_brave_webtorrent) {",
          "",
          "[Removed Lines]",
          "91:     deps += [",
          "92:       \"//brave/components/brave_referrals/browser\",",
          "93:     ]",
          "",
          "[Added Lines]",
          "91:     deps += [ \"//brave/components/brave_referrals/browser\" ]",
          "",
          "---------------"
        ],
        "browser/net/brave_ad_block_tp_network_delegate_helper.cc||browser/net/brave_ad_block_tp_network_delegate_helper.cc": [
          "File: browser/net/brave_ad_block_tp_network_delegate_helper.cc -> browser/net/brave_ad_block_tp_network_delegate_helper.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   std::string source_host = ctx->initiator_url.host();",
          "67:   g_brave_browser_process->ad_block_service()->ShouldStartRequest(",
          "71:   if (did_match_important) {",
          "72:     ctx->blocked_by = kAdBlocked;",
          "73:     return;",
          "74:   }",
          "78:     GURL::Replacements replacements = GURL::Replacements();",
          "79:     replacements.SetHost(",
          "80:         canonical_name->c_str(),",
          "",
          "[Removed Lines]",
          "68:         ctx->request_url, ctx->resource_type, source_host,",
          "69:         &did_match_rule, &did_match_exception, &did_match_important,",
          "70:         &ctx->mock_data_url);",
          "76:   if (canonical_name.has_value() && ctx->request_url.host() != *canonical_name",
          "77:       && *canonical_name != \"\") {",
          "",
          "[Added Lines]",
          "68:       ctx->request_url, ctx->resource_type, source_host, &did_match_rule,",
          "69:       &did_match_exception, &did_match_important, &ctx->mock_data_url);",
          "75:   if (canonical_name.has_value() &&",
          "76:       ctx->request_url.host() != *canonical_name && *canonical_name != \"\") {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:     const GURL canonical_url = ctx->request_url.ReplaceComponents(replacements);",
          "84:     g_brave_browser_process->ad_block_service()->ShouldStartRequest(",
          "88:   }",
          "90:   if (did_match_important || (did_match_rule && !did_match_exception)) {",
          "",
          "[Removed Lines]",
          "85:         ctx->request_url, ctx->resource_type, source_host,",
          "86:         &did_match_rule, &did_match_exception, &did_match_important,",
          "87:         &ctx->mock_data_url);",
          "",
          "[Added Lines]",
          "84:         ctx->request_url, ctx->resource_type, source_host, &did_match_rule,",
          "85:         &did_match_exception, &did_match_important, &ctx->mock_data_url);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:   scoped_refptr<base::SequencedTaskRunner> task_runner =",
          "207:       g_brave_browser_process->ad_block_service()->GetTaskRunner();",
          "210: }",
          "212: int OnBeforeURLRequest_AdBlockTPPreWork(const ResponseCallback& next_callback,",
          "",
          "[Removed Lines]",
          "209:   new AdblockCnameResolveHostClient(std::move(next_callback), task_runner, ctx);",
          "",
          "[Added Lines]",
          "207:   DCHECK(ctx->browser_context);",
          "210:   if (ctx->browser_context->IsTor()) {",
          "211:     ShouldBlockAdWithOptionalCname(task_runner, std::move(next_callback), ctx,",
          "212:                                    base::nullopt);",
          "213:   } else {",
          "214:     new AdblockCnameResolveHostClient(std::move(next_callback), task_runner,",
          "215:                                       ctx);",
          "216:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}