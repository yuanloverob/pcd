{
  "cve_id": "CVE-2020-22873",
  "cve_desc": "Buffer overflow vulnerability in function NumberToPrecisionCmd in jsish before 3.0.7, allows remote attackers to execute arbitrary code.",
  "repo": "pcmacdon/jsish",
  "patch_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
  "patch_info": {
    "commit_hash": "430ea27accd4d4ffddc946c9402e7c9064835a18",
    "repo": "pcmacdon/jsish",
    "commit_url": "https://github.com/pcmacdon/jsish/commit/430ea27accd4d4ffddc946c9402e7c9064835a18",
    "files": [
      "src/jsi.h",
      "src/jsiCmds.c",
      "src/jsiCode.c",
      "src/jsiEval.c",
      "src/jsiFilesys.c",
      "src/jsiFunc.c",
      "src/jsiHash.c",
      "src/jsiInterp.c",
      "src/jsiJSON.c",
      "src/jsiMySql.c",
      "src/jsiNumber.c",
      "src/jsiOptions.c",
      "src/jsiPstate.c",
      "src/jsiRegexp.c",
      "src/jsiSqlite.c",
      "src/jsiString.c",
      "src/jsiTree.c",
      "src/jsiUtils.c",
      "src/jsiValue.c",
      "src/jsiWebSocket.c"
    ],
    "message": "Release \"3.0.7\": Fix toPrecision bug \"stack overflow #4\".\n\nFossilOrigin-Name: 6c7f0c37027d7f890b57cb38f776af39b8f81f03e60ceeb0a231a1d21e24b5de",
    "before_after_code_files": [
      "src/jsi.h||src/jsi.h",
      "src/jsiCmds.c||src/jsiCmds.c",
      "src/jsiCode.c||src/jsiCode.c",
      "src/jsiEval.c||src/jsiEval.c",
      "src/jsiFilesys.c||src/jsiFilesys.c",
      "src/jsiFunc.c||src/jsiFunc.c",
      "src/jsiHash.c||src/jsiHash.c",
      "src/jsiInterp.c||src/jsiInterp.c",
      "src/jsiJSON.c||src/jsiJSON.c",
      "src/jsiMySql.c||src/jsiMySql.c",
      "src/jsiNumber.c||src/jsiNumber.c",
      "src/jsiOptions.c||src/jsiOptions.c",
      "src/jsiPstate.c||src/jsiPstate.c",
      "src/jsiRegexp.c||src/jsiRegexp.c",
      "src/jsiSqlite.c||src/jsiSqlite.c",
      "src/jsiString.c||src/jsiString.c",
      "src/jsiTree.c||src/jsiTree.c",
      "src/jsiUtils.c||src/jsiUtils.c",
      "src/jsiValue.c||src/jsiValue.c",
      "src/jsiWebSocket.c||src/jsiWebSocket.c"
    ]
  },
  "patch_diff": {
    "src/jsi.h||src/jsi.h": [
      "File: src/jsi.h -> src/jsi.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "5: #define JSI_VERSION_MAJOR   3",
      "6: #define JSI_VERSION_MINOR   0",
      "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
      "",
      "[Removed Lines]",
      "7: #define JSI_VERSION_RELEASE 6",
      "",
      "[Added Lines]",
      "7: #define JSI_VERSION_RELEASE 7",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "217:     JSI_BUFSIZ=8192",
      "",
      "[Removed Lines]",
      "216:     JSI_MAX_NUMBER_STRING=50,",
      "",
      "[Added Lines]",
      "216:     JSI_MAX_NUMBER_STRING=100,",
      "",
      "---------------"
    ],
    "src/jsiCmds.c||src/jsiCmds.c": [
      "File: src/jsiCmds.c -> src/jsiCmds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "845:         Jsi_ObjInsert(interp, nobj, \"name\", Jsi_ValueNewStringDup(interp, name), 0);",
      "846:         Jsi_ObjInsert(interp, nobj, \"version\", Jsi_ValueNewNumber(interp, ptr->version), 0);",
      "847:         Jsi_ObjInsert(interp, nobj, \"lastReq\", Jsi_ValueNewNumber(interp, ptr->lastReq), 0);",
      "849:         jsi_VersionNormalize(ptr->version, buf, sizeof(buf));",
      "850:         Jsi_ObjInsert(interp, nobj, \"verStr\", Jsi_ValueNewStringDup(interp, buf), 0);",
      "851:         const char *cp = (ptr->loadFile?ptr->loadFile:\"\");",
      "",
      "[Removed Lines]",
      "848:         char buf[200];",
      "",
      "[Added Lines]",
      "848:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1192:     Jsi_Value *vres;",
      "1193:     Jsi_Obj  *ores = Jsi_ObjNew(interp);",
      "1194:     Jsi_Value *nnv;",
      "1197:     vres = Jsi_ValueMakeObject(interp, NULL, ores);",
      "",
      "[Removed Lines]",
      "1195:     char *val, nam[200];",
      "",
      "[Added Lines]",
      "1195:     char *val, nam[JSI_BUFSIZ/2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2700:     }",
      "2701:     if (bp.line<=0 && !bp.func)",
      "2702:         return Jsi_LogError(\"bad number\");",
      "2704:     bp.id = ++interp->debugOpts.breakIdx;",
      "2705:     bp.enabled = 1;",
      "2706:     snprintf(nbuf, sizeof(nbuf), \"%d\", bp.id);",
      "",
      "[Removed Lines]",
      "2703:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2703:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2718:     if (interp->breakpointHash)",
      "2719:     {",
      "2720:         int num;",
      "2722:         if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2723:             return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2721:         char nbuf[100];",
      "",
      "[Added Lines]",
      "2721:         char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2766:         return Jsi_HashKeysDump(interp, interp->breakpointHash, ret, 0);",
      "2767:     Jsi_Value *val = Jsi_ValueArrayIndex(interp, args, 0);",
      "2768:     int num;",
      "2770:     if (Jsi_GetIntFromValue(interp, val, &num) != JSI_OK)",
      "2771:         return Jsi_LogError(\"bad number\");",
      "",
      "[Removed Lines]",
      "2769:     char nbuf[100];",
      "",
      "[Added Lines]",
      "2769:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3800:     Jsi_Value *flag = Jsi_ValueArrayIndex(interp, args, 1);",
      "3801:     if (!val) goto bail;",
      "3802:     if (Jsi_ValueIsNumber(interp, val)) {",
      "3804:         Jsi_Number n;",
      "3805:         if (Jsi_GetNumberFromValue(interp, val, &n) != JSI_OK)",
      "3806:             goto bail;",
      "",
      "[Removed Lines]",
      "3803:         char buf[200];",
      "",
      "[Added Lines]",
      "3803:         char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3953:         if (bv)",
      "3954:             interp->timesStart = now;",
      "3955:         else {",
      "3957:             snprintf(buf, sizeof(buf), \" (times = %.6f sec)\\n\", (now-interp->timesStart));",
      "3958:             Jsi_Puts(interp, jsi_Stderr, buf, -1);",
      "3959:         }",
      "",
      "[Removed Lines]",
      "3956:             char buf[100];",
      "",
      "[Added Lines]",
      "3956:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiCode.c||src/jsiCode.c": [
      "File: src/jsiCode.c -> src/jsiCode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "436:     if (_JSICASTINT(op->op) < 0 || op->op >= OP_LASTOP) {",
      "437:         snprintf(buf, bsiz, \"Bad opcode[%d] at %d\", op->op, currentip);",
      "438:     }",
      "440:     snprintf(nbuf, sizeof(nbuf), \"%d#%d\", currentip, op->Line);",
      "441:     snprintf(buf, bsiz, \"%-8s %s \", nbuf, jsi_op_names[op->op]);",
      "",
      "[Removed Lines]",
      "439:     char nbuf[100];",
      "",
      "[Added Lines]",
      "439:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiEval.c||src/jsiEval.c": [
      "File: src/jsiEval.c -> src/jsiEval.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "288: static const char *jsi_evalprint(Jsi_Value *v)",
      "289: {",
      "291:     if (!v)",
      "292:         return \"nil\";",
      "293:     if (v->vt == JSI_VT_NUMBER) {",
      "295:     } else if (v->vt == JSI_VT_BOOL) {",
      "297:     } else if (v->vt == JSI_VT_STRING) {",
      "299:     } else if (v->vt == JSI_VT_VARIABLE) {",
      "301:     } else if (v->vt == JSI_VT_NULL) {",
      "303:     } else if (v->vt == JSI_VT_OBJECT) {",
      "305:     } else if (v->vt == JSI_VT_UNDEF) {",
      "307:     }",
      "308:     return buf;",
      "309: }",
      "",
      "[Removed Lines]",
      "290:     static char buf[100];",
      "294:         snprintf(buf, 100, \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, 100, \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, 100, \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, 100, \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, 100, \"NULL\");",
      "304:         snprintf(buf, 100, \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, 100, \"UNDEFINED\");",
      "",
      "[Added Lines]",
      "290:     static char buf[JSI_MAX_NUMBER_STRING];",
      "294:         snprintf(buf, sizeof(buf), \"NUM:%\" JSI_NUMGFMT \" \", v->d.num);",
      "296:         snprintf(buf, sizeof(buf), \"BOO:%d\", v->d.val);",
      "298:         snprintf(buf, sizeof(buf), \"STR:'%s'\", v->d.s.str);",
      "300:         snprintf(buf, sizeof(buf), \"VAR:%p\", v->d.lval);",
      "302:         snprintf(buf, sizeof(buf), \"NULL\");",
      "304:         snprintf(buf, sizeof(buf), \"OBJ:%p\", v->d.obj);",
      "306:         snprintf(buf, sizeof(buf), \"UNDEFINED\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "403:     jsi_TryList *trylist, jsi_OpCode *ip, Jsi_OpCodes *opcodes)",
      "404: {",
      "405:     int i;",
      "407:     jsi_code_decode(interp, ip, ip - opcodes->codes, buf, sizeof(buf));",
      "408:     Jsi_Printf(interp, jsi_Stderr, \"%p: %-30.200s : THIS=%s, STACK=[\", ip, buf, jsi_evalprint(_this));",
      "409:     for (i = 0; i < interp->framePtr->Sp; ++i) {",
      "",
      "[Removed Lines]",
      "406:     char buf[200];",
      "",
      "[Added Lines]",
      "406:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1538:                     break;",
      "1539:                 }",
      "1540:                 int bval = 0;",
      "1542:                 Jsi_Value *vv;",
      "1543:                 Jsi_Obj *obj = v->d.obj;",
      "1544:                 if (!cp) {",
      "",
      "[Removed Lines]",
      "1541:                 char nbuf[100];",
      "",
      "[Added Lines]",
      "1541:                 char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2155:     Jsi_IncrRefCount(interp, fargs);",
      "2156:     rc = jsi_evalcode_sub(ps, opcodes, scope, fargs, _this, *vret);",
      "2157:     Jsi_DecrRefCount(interp, fargs);",
      "2159:         if ((interp->evalFlags&JSI_EVAL_RETURN)==0)",
      "2160:             Jsi_ValueMakeUndef(interp, vret);",
      "",
      "[Removed Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited) {",
      "",
      "[Added Lines]",
      "2158:     if (interp->didReturn == 0 && !interp->exited && rc == JSI_OK) {",
      "",
      "---------------"
    ],
    "src/jsiFilesys.c||src/jsiFilesys.c": [
      "File: src/jsiFilesys.c -> src/jsiFilesys.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1178:     if ((str = getenv(\"HOME\")) == NULL) {",
      "1179:         struct passwd pwd, *pw;",
      "1181:         if (getpwuid_r(getuid(), &pwd, buf, sizeof(buf), &pw) == 0 && pw->pw_dir)",
      "1182:             str = pw->pw_dir;",
      "1183:     }",
      "",
      "[Removed Lines]",
      "1180:         char buf[20000];",
      "",
      "[Added Lines]",
      "1180:         char buf[JSI_BUFSIZ*3];",
      "",
      "---------------"
    ],
    "src/jsiFunc.c||src/jsiFunc.c": [
      "File: src/jsiFunc.c -> src/jsiFunc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "189: Jsi_RC jsi_ArgTypeCheck(Jsi_Interp *interp, int typ,  Jsi_Value *arg, const char *p1,",
      "190:     const char *p2, int index, Jsi_Func *func, bool isdefault) {",
      "191:     Jsi_RC rc = JSI_OK;",
      "193:     idxBuf[0] = 0;",
      "194:     if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&JSI_TT_UNDEFINED)) {",
      "195:         snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "192:     char idxBuf[200];",
      "",
      "[Added Lines]",
      "192:     char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "295:         Jsi_DString dStr = {};",
      "296:         const char *exp = jsi_typeName(interp, typ, &dStr);",
      "297:         const char *vtyp = jsi_TypeName(interp, (Jsi_ttype)atyp);",
      "299:         idxBuf[0] = 0;",
      "300:         if (index>0)",
      "301:             snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);",
      "",
      "[Removed Lines]",
      "298:         char idxBuf[200];",
      "",
      "[Added Lines]",
      "298:         char idxBuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "339:     if (ss==NULL && spec == NULL)",
      "340:         return JSI_OK;",
      "341:     int i, minArgs, maxArgs, mis = 0, varargs = 0;",
      "343:     if (func->type == FC_BUILDIN) {",
      "344:         varargs =  (spec->maxArgs<0);",
      "345:         maxArgs = spec->maxArgs + func->callflags.bits.addargs;",
      "",
      "[Removed Lines]",
      "342:     char nbuf[100];",
      "",
      "[Added Lines]",
      "342:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiHash.c||src/jsiHash.c": [
      "File: src/jsiHash.c -> src/jsiHash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "623:     void *key = Jsi_HashKeyGet(hPtr);",
      "624:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "625:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "627:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "628:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "629: }",
      "",
      "[Removed Lines]",
      "626:     char nbuf[100];",
      "",
      "[Added Lines]",
      "626:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiInterp.c||src/jsiInterp.c": [
      "File: src/jsiInterp.c -> src/jsiInterp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "701: Jsi_Interp* Jsi_Main(Jsi_InterpOpts *opts)",
      "702: {",
      "704:     Jsi_Interp* interp = NULL;",
      "705:     int argc = 0, first = 1;",
      "706:     char **argv = NULL;",
      "",
      "[Removed Lines]",
      "703:     int rc = 0;",
      "",
      "[Added Lines]",
      "703:     Jsi_RC rc = JSI_OK;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "929:     }",
      "930:     if (jsi_deleted) //TODO: rationalize jsi_deleted, jsi_exitCode, etc",
      "931:         return jsi_DoExit(rc==JSI_EXIT?NULL:interp, jsi_exitCode);",
      "934:         Jsi_Value *ret = Jsi_ReturnValue(interp);",
      "935:         if (!Jsi_ValueIsType(interp, ret, JSI_VT_UNDEF)) {",
      "",
      "[Removed Lines]",
      "932:     if (rc == 0) {",
      "",
      "[Added Lines]",
      "932:     if (rc == JSI_OK) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "940:         }",
      "941:     } else {",
      "942:         if (!interp->parent && !interp->isHelp)",
      "944:         return jsi_DoExit(interp, 1);",
      "945:     }",
      "",
      "[Removed Lines]",
      "943:             fputs(\"ERROR\\n\", stderr);",
      "",
      "[Added Lines]",
      "943:             fprintf(stderr, \"ERROR: %s\\n\", interp->errMsgBuf);",
      "",
      "---------------"
    ],
    "src/jsiJSON.c||src/jsiJSON.c": [
      "File: src/jsiJSON.c -> src/jsiJSON.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "7: static void jsonNewDString(Jsi_Interp *interp, Jsi_DString *dStr, const char* str, int len)",
      "8: {",
      "10:     const char *cp = str;",
      "11:     int ulen;",
      "",
      "[Removed Lines]",
      "9:     char buf[100], *dp = buf;",
      "",
      "[Added Lines]",
      "9:     char buf[JSI_MAX_NUMBER_STRING], *dp = buf;",
      "",
      "---------------"
    ],
    "src/jsiMySql.c||src/jsiMySql.c": [
      "File: src/jsiMySql.c -> src/jsiMySql.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1170: static void mdbEvalSetColumnJSON(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1171:     Jsi_Interp *interp = p->jdb->interp;",
      "1173:     MysqlPrep *prep = p->prep;",
      "1174:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1175:     if (field->isnull) {",
      "",
      "[Removed Lines]",
      "1172:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1172:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1220: static void mdbEvalSetColumn(MyDbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1223:     MysqlPrep *prep = p->prep;",
      "1224:     SqlFieldResults *field = prep->fieldResult+iCol;",
      "1225:     Jsi_Interp *interp = p->jdb->interp;",
      "",
      "[Removed Lines]",
      "1222:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1222:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiNumber.c||src/jsiNumber.c": [
      "File: src/jsiNumber.c -> src/jsiNumber.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "123: static Jsi_RC NumberToFixedCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "124:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "125: {",
      "127:     int prec = 0, skip = 0;",
      "128:     Jsi_Number num;",
      "129:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "126:     char buf[100];",
      "",
      "[Added Lines]",
      "126:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141: static Jsi_RC NumberToPrecisionCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "142:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "143: {",
      "145:     int prec = 0, skip = 0;",
      "146:     Jsi_Number num;",
      "147:     Jsi_Value *v;",
      "148:     ChkStringN(_this, funcPtr, v);",
      "149:     if (Jsi_GetIntFromValue(interp, Jsi_ValueArrayIndex(interp, args, skip), &prec) != JSI_OK)",
      "150:         return JSI_ERROR;",
      "152:     Jsi_GetDoubleFromValue(interp, v, &num);",
      "153:     snprintf(buf, sizeof(buf),\"%.*\" JSI_NUMFFMT, prec, num);",
      "154:     if (num<0)",
      "",
      "[Removed Lines]",
      "144:     char buf[100];",
      "151:     if (prec<=0) return JSI_ERROR;",
      "",
      "[Added Lines]",
      "144:     char buf[JSI_MAX_NUMBER_STRING*2];",
      "151:     if (prec<=0 || prec>JSI_MAX_NUMBER_STRING) return Jsi_LogError(\"precision must be between 1 and %d\", JSI_MAX_NUMBER_STRING);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "163: static Jsi_RC NumberToExponentialCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "164:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "165: {",
      "167:     int prec = 0, skip = 0;",
      "168:     Jsi_Number num;",
      "169:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "166:     char buf[100];",
      "",
      "[Added Lines]",
      "166:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "191: static Jsi_RC NumberToStringCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
      "192:     Jsi_Value **ret, Jsi_Func *funcPtr)",
      "193: {",
      "195:     int radix = 10, skip = 0, argc = Jsi_ValueGetLength(interp, args);",
      "196:     Jsi_Number num;",
      "197:     Jsi_Value *v;",
      "",
      "[Removed Lines]",
      "194:     char buf[500];",
      "",
      "[Added Lines]",
      "194:     char buf[JSI_MAX_NUMBER_STRING+1];",
      "",
      "---------------"
    ],
    "src/jsiOptions.c||src/jsiOptions.c": [
      "File: src/jsiOptions.c -> src/jsiOptions.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1876:         if (JSI_OK != jsi_EnumToValue(interp, eSpec, outValue, outStr, (void*)&nval, flags))",
      "1877:             return JSI_ERROR;",
      "1878:     } else if (outStr) {",
      "1880:         snprintf(obuf, sizeof(obuf), \"%\" PRId64, inum);",
      "1881:         Jsi_DSAppend(outStr, obuf, NULL);",
      "1882:     } else {",
      "",
      "[Removed Lines]",
      "1879:         char obuf[100];",
      "",
      "[Added Lines]",
      "1879:         char obuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiPstate.c||src/jsiPstate.c": [
      "File: src/jsiPstate.c -> src/jsiPstate.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "239:     l->d.fp = fp;",
      "240:     Jsi_Rewind(ps->interp, fp);",
      "241:     if (skipbang) {",
      "244:             Jsi_Rewind(ps->interp, fp);",
      "245:         }",
      "246:     }",
      "",
      "[Removed Lines]",
      "242:         char buf[1000];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, 1000) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "[Added Lines]",
      "242:         char buf[JSI_BUFSIZ];",
      "243:         if (Jsi_Gets(ps->interp, fp, buf, sizeof(buf)) && (buf[0] != '#' || buf[1] != '!')) {",
      "",
      "---------------"
    ],
    "src/jsiRegexp.c||src/jsiRegexp.c": [
      "File: src/jsiRegexp.c -> src/jsiRegexp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "162:     int r  = regexec(reg, v, 1, &pos, regexec_flags);",
      "164:     if (r >= REG_BADPAT) {",
      "167:         regerror(r, reg, buf, sizeof(buf));",
      "168:         return Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "165:         char buf[100];",
      "",
      "[Added Lines]",
      "165:         char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiSqlite.c||src/jsiSqlite.c": [
      "File: src/jsiSqlite.c -> src/jsiSqlite.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1396:     bool b;",
      "1397:     if( rc != JSI_OK) {",
      "1399:         snprintf(buf, sizeof(buf), \"error in function: %.200s\", p->zName);",
      "1400:         sqlite3_result_error(context, buf, -1);",
      "",
      "[Removed Lines]",
      "1398:         char buf[250];",
      "",
      "[Added Lines]",
      "1398:         char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1761: static void dbEvalSetColumnJSON(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1762:     Jsi_Interp *interp = p->jdb->interp;",
      "1765:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1763:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1763:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1811: static void dbEvalSetColumn(DbEvalContext *p, int iCol, Jsi_DString *dStr) {",
      "1812:     Jsi_Interp *interp = p->jdb->interp;",
      "1815:     sqlite3_stmt *pStmt = p->pPreStmt->pStmt;",
      "",
      "[Removed Lines]",
      "1813:     char nbuf[200];",
      "",
      "[Added Lines]",
      "1813:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2561: static void dbOutputHexBlob(Jsi_DString *dStr, const void *pBlob, int nBlob){",
      "2562:   int i;",
      "2564:   Jsi_DSAppend(dStr, \"X'\", NULL);",
      "2565:   for(i=0; i<nBlob; i++){ snprintf(out, sizeof(out),\"%02x\",zBlob[i]&0xff);Jsi_DSAppend(dStr, out, NULL); }",
      "2566:   Jsi_DSAppend(dStr, \"'\", NULL);",
      "",
      "[Removed Lines]",
      "2563:   char out[100], *zBlob = (char *)pBlob;",
      "",
      "[Added Lines]",
      "2563:   char out[JSI_MAX_NUMBER_STRING], *zBlob = (char *)pBlob;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "4394:     DbEvalContext sEval = {};",
      "4395:     int insert = 0, replace = 0, update = 0;",
      "4397: #ifdef JSI_DB_DSTRING_SIZE",
      "4398:     JSI_DSTRING_VAR(dStr, JSI_DB_DSTRING_SIZE);",
      "4399: #else",
      "",
      "[Removed Lines]",
      "4396:     char nbuf[100], *bPtr;",
      "",
      "[Added Lines]",
      "4396:     char nbuf[JSI_MAX_NUMBER_STRING], *bPtr;",
      "",
      "---------------"
    ],
    "src/jsiString.c||src/jsiString.c": [
      "File: src/jsiString.c -> src/jsiString.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "724:         int match = regexec(regex, p, MAX_SUBREGEX, pmatch, regexec_flags);",
      "726:         if (match >= REG_BADPAT) {",
      "729:             regerror(match, regex, buf, sizeof(buf));",
      "730:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "727:             char buf[100];",
      "",
      "[Added Lines]",
      "727:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "895:             return JSI_OK;",
      "896:         }",
      "897:         if (r >= REG_BADPAT) {",
      "900:             regerror(r, reg, buf, sizeof(buf));",
      "901:             Jsi_LogError(\"error while matching pattern: %s\", buf);",
      "",
      "[Removed Lines]",
      "898:             char buf[100];",
      "",
      "[Added Lines]",
      "898:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiTree.c||src/jsiTree.c": [
      "File: src/jsiTree.c -> src/jsiTree.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "946:         int n;",
      "947:         int m;",
      "948:     } t1, t2;",
      "951:     wt = Jsi_TreeNew(interp, JSI_KEYS_ONEWORD, NULL);",
      "952:     mt = Jsi_TreeNew(interp, sizeof(struct tdata), NULL);",
      "",
      "[Removed Lines]",
      "949:     char nbuf[100];",
      "",
      "[Added Lines]",
      "949:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1038:     void *key = Jsi_TreeKeyGet(hPtr);",
      "1039:     if (opts->keyType == JSI_KEYS_ONEWORD)",
      "1040:         return Jsi_ValueNewNumber(opts->interp, (Jsi_Number)(intptr_t)key);",
      "1042:     snprintf(nbuf, sizeof(nbuf), \"%p\", key);",
      "1043:     return Jsi_ValueNewStringDup(opts->interp, nbuf);",
      "1044: }",
      "",
      "[Removed Lines]",
      "1041:     char nbuf[100];",
      "",
      "[Added Lines]",
      "1041:     char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiUtils.c||src/jsiUtils.c": [
      "File: src/jsiUtils.c -> src/jsiUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "626: static Jsi_RC jsiValueGetString(Jsi_Interp *interp, Jsi_Value* v, Jsi_DString *dStr, objwalker *owPtr)",
      "627: {",
      "629:     Jsi_DString eStr;",
      "630:     Jsi_DSInit(&eStr);",
      "631:     if (interp->maxDepth>0 && owPtr->depth > interp->maxDepth)",
      "",
      "[Removed Lines]",
      "628:     char buf[100], *str;",
      "",
      "[Added Lines]",
      "628:     char buf[JSI_MAX_NUMBER_STRING], *str;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "943: }",
      "945: static void jsiLNGetMatches(const char *str, linenoiseCompletions *lc) {",
      "947:     const char *cp, *fnam = \"Info.completions\";",
      "948:     int i = 0, len;",
      "949:     int rc, isfile = 0, start = 0, end = Jsi_Strlen(str);",
      "",
      "[Removed Lines]",
      "946:     char buf[1000], pre[1000], hpre[6] = {};",
      "",
      "[Added Lines]",
      "946:     char buf[JSI_BUFSIZ], pre[JSI_BUFSIZ], hpre[6] = {};",
      "",
      "---------------"
    ],
    "src/jsiValue.c||src/jsiValue.c": [
      "File: src/jsiValue.c -> src/jsiValue.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "401:     assert(args->vt == JSI_VT_OBJECT);",
      "402:     if (obj->isarrlist && obj->arr)",
      "403:         return ((index < 0 || (uint)index >= obj->arrCnt) ? NULL : obj->arr[index]);",
      "405:     Jsi_NumberItoA10(index, unibuf, sizeof(unibuf));",
      "406:     v = Jsi_TreeObjGetValue(args->d.obj, unibuf, 0);",
      "407:     return v;",
      "",
      "[Removed Lines]",
      "404:     char unibuf[100];",
      "",
      "[Added Lines]",
      "404:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "531:     if (!v)",
      "532:         goto done;",
      "533:     if (lenPtr) *lenPtr = 0;",
      "535:     switch(v->vt) {",
      "536:         case JSI_VT_STRING:",
      "537:             ntxt = v->d.s.str;",
      "",
      "[Removed Lines]",
      "534:     char unibuf[200];",
      "",
      "[Added Lines]",
      "534:     char unibuf[JSI_MAX_NUMBER_STRING*2];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1182:             if (Jsi_ValueIsString(interp, key)) {",
      "1183:                 char *kstr = Jsi_ValueString(interp, key, NULL);",
      "1184:                 if (!Jsi_Strcmp(kstr,\"call\") || !Jsi_Strcmp(kstr,\"apply\") || !Jsi_Strcmp(kstr,\"bind\")) {",
      "1186:                     snprintf(fbuf, sizeof(fbuf), \"Function.%s\", kstr);",
      "1187:                     Jsi_Value *vv = Jsi_NameLookup(interp, fbuf);",
      "1188:                     if (vv)",
      "",
      "[Removed Lines]",
      "1185:                     char fbuf[100];",
      "",
      "[Added Lines]",
      "1185:                     char fbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1379:         }",
      "1380:         return JSI_ERROR;",
      "1381:     }",
      "1383:     Jsi_NumberItoA10(key, unibuf, sizeof(unibuf));",
      "1384:     Jsi_ObjInsert(interp, obj, unibuf, val, flags);",
      "1385:     return JSI_OK;",
      "",
      "[Removed Lines]",
      "1382:     char unibuf[100];",
      "",
      "[Added Lines]",
      "1382:     char unibuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------"
    ],
    "src/jsiWebSocket.c||src/jsiWebSocket.c": [
      "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "208:     Jsi_DString recvBuf; // To buffer recv when recvJSON is true.",
      "209:     Jsi_Value *onClose, *onFilter, *onRecv, *onUpload, *onGet, *onUnknown, *rootdir, *headers;",
      "210:     char *lastData;",
      "212: #if (LWS_LIBRARY_VERSION_MAJOR>1)",
      "213:     char filename[PATH_MAX];",
      "214:     long file_length;",
      "",
      "[Removed Lines]",
      "211:     char key[100]; // Lookup key.",
      "",
      "[Added Lines]",
      "211:     char key[JSI_MAX_NUMBER_STRING]; // Lookup key.",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "569: jsi_wsGetHeaders(jsi_wsPss *pss, struct lws *wsi, Jsi_DString* dStr, int lens[], int hmax)",
      "570: {",
      "571:     int n = 0, i = 0, nlen;",
      "573:     const char *cp;",
      "574:     while ((cp = (char*)lws_token_to_string((enum lws_token_indexes)n))) {",
      "575:         int len = lws_hdr_copy(wsi, buf, sizeof(buf), ( enum lws_token_indexes)n);",
      "",
      "[Removed Lines]",
      "572:     char buf[1000];",
      "",
      "[Added Lines]",
      "572:     char buf[JSI_BUFSIZ];",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1344:     Jsi_DSFree(&sStr);",
      "1345:     if (cmdPtr->debug>1)",
      "1346:         fprintf(stderr, \"FILE: %s in %s | %s\\n\", buf, cmdPtr->curRoot, Jsi_ValueString(interp, cmdPtr->rootdir, NULL));",
      "1348:     isJsiWeb = (cpde && cmdPtr->jsiFnPattern && Jsi_GlobMatch(cmdPtr->jsiFnPattern, cpde+1, 0));",
      "1349:     bool isgzip = 0;",
      "1350:     if (!ext || !ext[1])",
      "",
      "[Removed Lines]",
      "1347:     char extBuf[100], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "[Added Lines]",
      "1347:     char extBuf[JSI_BUFSIZ], *cpde = Jsi_Strrchr(buf, '/');",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1836:         if (cmdPtr->post) {",
      "1837:             unsigned char **p = (unsigned char **)in, *end = (*p) + len;",
      "1838:             int n = 0;",
      "1840:             Jsi_ValueString(interp, cmdPtr->post, &n);",
      "1841:             snprintf(buf, sizeof(buf), \"%d\", n);",
      "",
      "[Removed Lines]",
      "1839:             char buf[100];",
      "",
      "[Added Lines]",
      "1839:             char buf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2228:     case LWS_CALLBACK_CLIENT_ESTABLISHED:",
      "2229:     case LWS_CALLBACK_ESTABLISHED:",
      "2230:         if (cmdPtr->bufferPwr2>0) {",
      "2232:             snprintf(nbuf, sizeof(nbuf), \"%d\", cmdPtr->bufferPwr2);",
      "2233:             lws_set_extension_option(wsi, \"permessage-deflate\", \"rx_buf_size\", nbuf);",
      "2234:             lws_set_extension_option(wsi, \"permessage-deflate\", \"tx_buf_size\", nbuf);",
      "",
      "[Removed Lines]",
      "2231:             char nbuf[100];",
      "",
      "[Added Lines]",
      "2231:             char nbuf[JSI_MAX_NUMBER_STRING];",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2870:     const char *verStr = NULL;",
      "2871:     verStr = lws_get_library_version();",
      "2872:     if (verStr) {",
      "2874:         snprintf(buf, sizeof(buf), \"%s\", verStr);",
      "2875:         cp = Jsi_Strchr(buf, ' ');",
      "2876:         if (cp) *cp = 0;",
      "",
      "[Removed Lines]",
      "2873:         char buf[100], *cp;",
      "",
      "[Added Lines]",
      "2873:         char buf[JSI_MAX_NUMBER_STRING], *cp;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f46c1c26ddda9b6a7206669deefc504fd009ce47",
      "candidate_info": {
        "commit_hash": "f46c1c26ddda9b6a7206669deefc504fd009ce47",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/f46c1c26ddda9b6a7206669deefc504fd009ce47",
        "files": [
          "js-demos/shtml/index.shtml",
          "lib/GenDeep.jsi",
          "lib/Websrv.jsi",
          "lib/autoload.jsi",
          "lib/web/jsi.js",
          "lib/web/markdeep.js",
          "lib/web/markdeep/DeepDoc.md",
          "lib/web/markdeep/apidoc.css",
          "lib/web/markdeep/apidoc.md.html",
          "lib/web/markdeep/dark.css",
          "lib/web/markdeep/dark.md.html",
          "lib/web/markdeep/include.shtml",
          "lib/web/markdeep/jsistyle.css",
          "lib/web/markdeep/latex.css",
          "lib/web/markdeep/latex.md.html",
          "lib/web/markdeep/nginx_deepdoc.conf",
          "lib/web/markdeep/slides.css",
          "lib/web/markdeep/slides.md.html",
          "lib/web/markdeep/starter.md.html",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFunc.c",
          "src/jsiInt.h",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/jsiWebSocket.c",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.0.28\": Prepare to remove curFile bloat.  Fix logTrace bug. Ready to move to Vue. WebSocket fixes.\n\nFossilOrigin-Name: 9dc3a45b1f96e7966b961bc11986dea9da313140922a815363489a10c66790b6",
        "before_after_code_files": [
          "js-demos/shtml/index.shtml||js-demos/shtml/index.shtml",
          "lib/GenDeep.jsi||lib/GenDeep.jsi",
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "lib/web/jsi.js||lib/web/jsi.js",
          "lib/web/markdeep.js||lib/web/markdeep.js",
          "lib/web/markdeep/apidoc.css||lib/web/markdeep/apidoc.css",
          "lib/web/markdeep/apidoc.md.html||lib/web/markdeep/apidoc.md.html",
          "lib/web/markdeep/dark.css||lib/web/markdeep/dark.css",
          "lib/web/markdeep/dark.md.html||lib/web/markdeep/dark.md.html",
          "lib/web/markdeep/include.shtml||lib/web/markdeep/include.shtml",
          "lib/web/markdeep/jsistyle.css||lib/web/markdeep/jsistyle.css",
          "lib/web/markdeep/latex.css||lib/web/markdeep/latex.css",
          "lib/web/markdeep/latex.md.html||lib/web/markdeep/latex.md.html",
          "lib/web/markdeep/nginx_deepdoc.conf||lib/web/markdeep/nginx_deepdoc.conf",
          "lib/web/markdeep/slides.css||lib/web/markdeep/slides.css",
          "lib/web/markdeep/slides.md.html||lib/web/markdeep/slides.md.html",
          "lib/web/markdeep/starter.md.html||lib/web/markdeep/starter.md.html",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ]
        }
      },
      "candidate_diff": {
        "js-demos/shtml/index.shtml||js-demos/shtml/index.shtml": [
          "File: js-demos/shtml/index.shtml -> js-demos/shtml/index.shtml",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: <!-- File: index.shtml -->",
          "2: <!--#include file=\"header.html\"-->",
          "3: <!--#include file=\"body.shtml\"-->",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: <!--#set pig='METOO'-->",
          "2: <!--#echo 'Echo Me'-->",
          "3: <!--#echo 'Echo Me ${pig}'-->",
          "",
          "---------------"
        ],
        "lib/GenDeep.jsi||lib/GenDeep.jsi": [
          "File: lib/GenDeep.jsi -> lib/GenDeep.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:         url         :\"\",        // The file/url to serve out and clears timeout.",
          "45:         urlPrefix   :'/Websrv', // Prefix for urls",
          "46:         useridPass  :'',        // USER:PASS for web GUI.",
          "47:         wsdebug     :0,         // Debug option for websockets.",
          "48:         wsOpts      :{},        // Websocket options.",
          "49:         zip         :'',        // A .zip, .sqlar, or .fossil file to mount and use as rootdir.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:         vueConvert  :false,     // Util to convert file .vue files to .js, output in -rootdir",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:         return true;",
          "110:     }",
          "113:         if (!opts) opts = {};",
          "115:         data = JSON.stringify(data);",
          "117:         LogTrace(\"SENDING: \"+data);",
          "118:         self.ws.send(id, data);",
          "119:     }",
          "",
          "[Removed Lines]",
          "112:     function wsSend(chan:string, id:number, cmd:string, obj:object, opts:object=void) {",
          "114:         var data = { chan:chan, cmd:cmd, data:obj, opts:opts };",
          "116:         puts(\"SEND:\",data);",
          "",
          "[Added Lines]",
          "113:     function wsSend(mod:string, id:number, cmd:string, obj:object, opts:object=void) {",
          "115:         var data = { mod:mod, cmd:cmd, data:obj, opts:opts };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "297:     }",
          "299:     function onModify(ws:userobj, fname:string) {",
          "302:     }",
          "304:     function WebAdmin(ws:userobj, id:number, url:string, query:array) {",
          "",
          "[Removed Lines]",
          "300:         puts(\"MODIFY\");",
          "301:         setTimeout(function() { wsSend('!', -1, 'reload', {}); }, 300);",
          "",
          "[Added Lines]",
          "300:         LogDebug(\"onModify\", fname);",
          "301:         setTimeout(function() { wsSend('!', -1, 'reload', {fname:fname}); }, 300);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "349:         self.done = 1;",
          "350:     }",
          "352:     function main() {",
          "353:         var urlarg, urlOrig = self.url;",
          "354:         if (typeof args === 'string')",
          "355:             args = [args];",
          "356:         urlarg = args[0];",
          "357:         args.shift();",
          "358:         if (urlarg) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:     function ConvertVue(fn:string) { // Now builtin.",
          "354:         var s = File.read(fn);",
          "355:         var ts = s.indexOf('<template>');",
          "356:         var te = s.lastIndexOf('\\n</template>');",
          "357:         var sxs = '<script>\\nexport default {';",
          "358:         var sx = s.indexOf(sxs);",
          "359:         var se = s.lastIndexOf('\\n</script>');",
          "360:         if (ts<0||te<0||se<0||sx<0) puts('bad template:',fn);",
          "361:         var tmpl = s.substr(ts+10, te-ts-9);",
          "362:         var sxb = sx+sxs.length;",
          "363:         var scr = s.substr(sxb, se-sxb);",
          "364:         var out = s.substr(0, ts)+'let template=`' + tmpl + '`;\\n\\nexport default {\\n  template, '+scr + s.substr(se+10);",
          "365:         return out;",
          "366:     }",
          "368:     function vueConvAll(args:array) {",
          "369:         for (var f of args) {",
          "370:             var fb = File.rootname(f);",
          "371:             if (File.extension(f) !== '.vue')",
          "372:                 throw('file extension must be .vue'+f);",
          "373:             var to = fb+'.js';",
          "374:             if (self.rootdir)",
          "375:                 to = File.join(self.rootdir, File.tail(to));",
          "376:             var out = ConvertVue(f);",
          "377:             File.write(to, out);",
          "378:         }",
          "379:     }",
          "385:         if (self.vueConvert) {",
          "386:             return vueConvAll(args);",
          "387:         }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "465:         for (var i in self.wsOpts)",
          "466:             wo[i] = self.wsOpts[i];",
          "469:         LogTrace(\"Listening on port:\",self.port);",
          "471:         if (!self.noGui && self.url && self.url.length) {",
          "",
          "[Removed Lines]",
          "468:         OpenWebsock();",
          "",
          "[Added Lines]",
          "500:         OpenWebsock();",
          "501:         if (!self.ws.conf('extHandlers'))",
          "502:             self.ws.handler('vue', ConvertVue); // VUE BUILTIN NOW",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: Jsi_Auto.Archive    = 'source(\"'+Info.scriptDir()+'/Archive.jsi\")';",
          "33: Jsi_Auto.Module     = 'source(\"'+Info.scriptDir()+'/Module.jsi\")';",
          "34: Jsi_Auto.Help       = 'source(\"'+Info.scriptDir()+'/Help.jsi\")';",
          "36: Jsi_Auto.DebugUI        = 'source(\"'+Info.scriptDir()+'/DebugUI/DebugUI.jsi\")';",
          "37: Jsi_Auto.SqliteUI       = 'source(\"'+Info.scriptDir()+'/SqliteUI/SqliteUI.jsi\")';",
          "",
          "[Removed Lines]",
          "35: Jsi_Auto.GenDeep    = 'source(\"'+Info.scriptDir()+'/GenDeep.jsi\")';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/jsi.js||lib/web/jsi.js": [
          "File: lib/web/jsi.js -> lib/web/jsi.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "288:         return (function() {});",
          "289:     },",
          "291:     jsigImpl: function(sig, args) { // Check function arguments",
          "292:         function ArgCheckType(o, aind, val) {",
          "293:             var af = o.args[aind];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291:     gettype:gettype,",
          "292:     matchType: function(v1, v2) {",
          "293:         return gettype(v1) === getype(v2);",
          "294:     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "631:     websock:function(opts) { // Create websocket connection.",
          "632:         var ws;",
          "640:                 }",
          "648:         if (self.wsstarted) {",
          "649:             console.log('websock already started');",
          "650:             return;",
          "651:         }",
          "652:         self.wsstarted = 1;",
          "654:         if (opts) {",
          "655:             for (var i in opts) {",
          "658:                 w[i] = opts[i];",
          "659:             }",
          "660:         }",
          "",
          "[Removed Lines]",
          "633:         function onmessage(obj) {",
          "635:             var msg=JSON.parse(obj.data);",
          "636:             if (msg.mod === '!') {",
          "637:                 switch (msg.cmd) {",
          "638:                     case 'reload': location.reload(); return;",
          "639:                     default: puts('unknown * cmd');",
          "641:                 return;",
          "642:             }",
          "643:             if (msg.mod === '*') {",
          "644:                 puts('TODO: broadcast');",
          "645:                 return;",
          "646:             }",
          "647:         }",
          "653:         var w = {prot:'ws', onmessage:onmessage};",
          "656:                 if (w[opts[i]]===undefined)",
          "657:                     throw('expected: '+Object.keys(w));",
          "",
          "[Added Lines]",
          "637:         var w = {",
          "638:             prot:'ws',",
          "639:             debug:false,",
          "640:             noreloadexts:'',",
          "641:             onchange(fname) {",
          "642:                 location.reload();",
          "643:             },",
          "644:             onmessage(obj) {",
          "646:                 var msg=JSON.parse(obj.data);",
          "647:                 if (msg.mod === '!') {",
          "648:                     switch (msg.cmd) {",
          "649:                         case 'reload':",
          "650:                             var fname = msg.data.fname, fext, fia;",
          "651:                             if (fname)",
          "652:                                 fia = fname.lastIndexOf('.');",
          "653:                             if (fia && fia>0)",
          "654:                                 fext = fname.substr(fia+1);",
          "655:                             if (w.noreloadexts != '' && fname) {",
          "656:                                 if (typeof(w.noreloadexts)==='string')",
          "657:                                     w.noreloadexts = w.noreloadexts.split(',');",
          "658:                                 if (fext && w.noreloadexts.indexOf(fext)>=0) {",
          "659:                                     if (w.debug)",
          "660:                                         puts('ignoring changed file: '+fname);",
          "661:                                     return;",
          "662:                                 }",
          "663:                             }",
          "664:                             if (w.onchange)",
          "665:                                 w.onchange(fname, fext)",
          "666:                         return;",
          "667:                         default: puts('unknown * cmd');",
          "668:                     }",
          "669:                     return;",
          "671:                 if (msg.mod === '*') {",
          "672:                     puts('TODO: broadcast');",
          "673:                     return;",
          "674:                 }",
          "675:             },",
          "676:         };",
          "683:             if (typeof(opts) === 'string') {",
          "684:                 var nops = {}, flst = opts.split('|');",
          "685:                 for (var fli in flst) {",
          "686:                     var fnn = flst[fli].split(':');",
          "687:                     nops[fnn[0]] = fnn[1];",
          "688:                 }",
          "689:                 opts = nops;",
          "690:             }",
          "692:                 if (w[i]===undefined)",
          "693:                     puts('expected: '+Object.keys(w));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "664:         puts('Websock Started');",
          "665:         return ws;",
          "666:     },",
          "668:         function validate(msg, match, partial) { //msg:object,match:string=void,partial=false",
          "669:             function typeGet(msg) {",
          "670:                 var tt = gettype(msg);",
          "671:                 if (tt !== 'object')",
          "672:                     throw('expected object');",
          "673:                 var pat = '{', pre = '';",
          "676:                     pre = ',';",
          "677:                 }",
          "678:                 pat += '}';",
          "",
          "[Removed Lines]",
          "667:     matchObj:function(msg, match, partial, noerror) { //msg:object,match:string=void,partial=false,noerror=false",
          "674:                 for (var i in msg) {",
          "675:                     pat += pre + i + ':' + gettype(msg[i]);",
          "",
          "[Added Lines]",
          "703:     matchObj:function(msg, match, partial, noerror, pfx) { //msg:object,match:string=void,partial=false,noerror=false",
          "710:                 var keys = Object.keys(msg).sort();",
          "711:                 for (var i=0; i<keys.length; i++) {",
          "712:                     var nni = keys[i];",
          "713:                     pat += pre + nni + ':' + gettype(msg[nni]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "700:                 throw('matchOjb failed: expected \"'+match+'\", not \"'+pat+'\"');",
          "701:             }",
          "702:         }",
          "704:         if (!match)",
          "705:             return validate(msg, match, partial);",
          "706:         try {",
          "707:             validate(msg, match, partial);",
          "708:         } catch(e) {",
          "709:             if (config.interp.asserts && console.assert && !noerror)",
          "711:             else if (console.warn)",
          "713:             else",
          "715:         }",
          "716:         return (function() {});",
          "717:     },",
          "",
          "[Removed Lines]",
          "710:                 return console.assert.bind(console.window, false, 'ASSERT:'+e);",
          "712:                 return console.warn.bind(console.window, 'WARN: '+e);",
          "714:                 return console.log.bind(console.window, 'LOG: '+e);",
          "",
          "[Added Lines]",
          "741:         if (!pfx) pfx = '';",
          "748:                 return console.assert.bind(console.window, false, 'ASSERT:'+pfx+e);",
          "750:                 return console.warn.bind(console.window, 'WARN: '+pfx+e);",
          "752:                 return console.log.bind(console.window, 'LOG: '+pfx+e);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "740:         if (jsi.config.onload)",
          "741:             jsi.config.onload();",
          "745:     }",
          "746: };",
          "",
          "[Removed Lines]",
          "742:         var scr = $('script[src$=\"/jsi.js?websock=true')[0];",
          "743:         if (scr)",
          "744:             jsi.websock();",
          "",
          "[Added Lines]",
          "780:         var scr = $('script[src*=\"/jsi.js?websock=\"]')[0];",
          "781:         if (scr) {",
          "782:             var ss = scr.src.indexOf('=');",
          "783:             var ssv;",
          "784:             if (ss>0) {",
          "785:                 ssv = scr.src.substr(ss+1);",
          "786:                 if (ssv==='false') return;",
          "787:                 if (ssv==='true') ssv = undefined;",
          "788:             }",
          "789:             jsi.websock(ssv);",
          "790:         }",
          "",
          "---------------"
        ],
        "lib/web/markdeep.js||lib/web/markdeep.js": [
          "File: lib/web/markdeep.js -> lib/web/markdeep.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/apidoc.css||lib/web/markdeep/apidoc.css": [
          "File: lib/web/markdeep/apidoc.css -> lib/web/markdeep/apidoc.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/apidoc.md.html||lib/web/markdeep/apidoc.md.html": [
          "File: lib/web/markdeep/apidoc.md.html -> lib/web/markdeep/apidoc.md.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/dark.css||lib/web/markdeep/dark.css": [
          "File: lib/web/markdeep/dark.css -> lib/web/markdeep/dark.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/dark.md.html||lib/web/markdeep/dark.md.html": [
          "File: lib/web/markdeep/dark.md.html -> lib/web/markdeep/dark.md.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/include.shtml||lib/web/markdeep/include.shtml": [
          "File: lib/web/markdeep/include.shtml -> lib/web/markdeep/include.shtml",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/jsistyle.css||lib/web/markdeep/jsistyle.css": [
          "File: lib/web/markdeep/jsistyle.css -> lib/web/markdeep/jsistyle.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/latex.css||lib/web/markdeep/latex.css": [
          "File: lib/web/markdeep/latex.css -> lib/web/markdeep/latex.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/latex.md.html||lib/web/markdeep/latex.md.html": [
          "File: lib/web/markdeep/latex.md.html -> lib/web/markdeep/latex.md.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/nginx_deepdoc.conf||lib/web/markdeep/nginx_deepdoc.conf": [
          "File: lib/web/markdeep/nginx_deepdoc.conf -> lib/web/markdeep/nginx_deepdoc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/slides.css||lib/web/markdeep/slides.css": [
          "File: lib/web/markdeep/slides.css -> lib/web/markdeep/slides.css",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/slides.md.html||lib/web/markdeep/slides.md.html": [
          "File: lib/web/markdeep/slides.md.html -> lib/web/markdeep/slides.md.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/web/markdeep/starter.md.html||lib/web/markdeep/starter.md.html": [
          "File: lib/web/markdeep/starter.md.html -> lib/web/markdeep/starter.md.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 27",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 28",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4712:         }",
          "4713:         Jsi_TreeSearchDone(&search);",
          "4714:     }",
          "4716:         jsi_Frame *fptr = interp->framePtr;",
          "4717:         Jsi_Func *pf = interp->prevActiveFunc;",
          "4718:         Jsi_ModuleConf *mo = NULL;",
          "4719:         if (pf && pf->pkg)",
          "4720:             mo = &pf->pkg->popts.modConf;",
          "4721:         if (jsi_ModLogEnabled(interp, v1, \"Debug\") || (mo && mo->Debug)) {",
          "4722:             jsi_evalStrFile(interp, NULL, \"this.LogDebug = console.log.bind(null, 'DEBUG:');\", 0, fptr->level);",
          "4724:         }",
          "4725:         if (jsi_ModLogEnabled(interp, v1, \"Trace\") || (mo && mo->Trace)) {",
          "4726:             jsi_evalStrFile(interp, NULL, \"this.LogTrace = console.log.bind(null, 'TRACE:');\", 0, fptr->level);",
          "4728:         }",
          "4729:         if (jsi_ModLogEnabled(interp, v1, \"Test\") || (mo && mo->Test)) {",
          "4730:             jsi_evalStrFile(interp, NULL, \"this.LogTest = console.log.bind(null, 'TEST: ');\", 0, fptr->level);",
          "4732:         }",
          "4733:     }",
          "4734:     return rc;",
          "",
          "[Removed Lines]",
          "4715:     if (rc == JSI_OK) {",
          "4723:             fptr->logflag |= (1<<jsi_Oplf_debug);",
          "4727:             fptr->logflag |= (1<<jsi_Oplf_trace);",
          "4731:             fptr->logflag |= (1<<jsi_Oplf_test);",
          "",
          "[Added Lines]",
          "4715:     if (rc == JSI_OK && interp->framePtr->filePtr) {",
          "4717:         jsi_FileInfo *cptr = fptr->filePtr;",
          "4724:             cptr->logflag |= (1<<jsi_Oplf_debug);",
          "4728:             cptr->logflag |= (1<<jsi_Oplf_trace);",
          "4732:             cptr->logflag |= (1<<jsi_Oplf_test);",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:         int oef = newps->eval_flag;",
          "70:         newps->eval_flag = 1;",
          "71:         interp->ps = newps;",
          "73:         if (r) {",
          "74:             Jsi_ValueDup2(interp, &ps->last_exception, newps->last_exception);",
          "75:         }",
          "",
          "[Removed Lines]",
          "72:         r = jsi_evalcode(newps, NULL, newps->opcodes, scope, currentScope, _this, ret);",
          "",
          "[Added Lines]",
          "72:         r = jsi_evalcode(newps, NULL, newps->opcodes, scope, currentScope, _this, ret, interp->framePtr->filePtr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1069:       }}\\",
          "1070:     continue;\\",
          "1071: }",
          "1074:         if (ip->logflag) { // Mask out LogDebug, etc if not enabled.",
          "1075:             interp->curIp = ip;",
          "",
          "[Removed Lines]",
          "1072: #define _JSI_BI_OP_SKIP(N,n)  if (!interp->logOpts.N && !(interp->framePtr->logflag &(1<<n))) _JSI_BI_OP_SKIP_SUB(n)",
          "",
          "[Added Lines]",
          "1072: #define _JSI_BI_OP_SKIP(N,n)  if (!interp->logOpts.N && (interp->framePtr->filePtr && !(interp->framePtr->filePtr->logflag &(1<<n)))) _JSI_BI_OP_SKIP_SUB(n)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2017: Jsi_RC jsi_evalcode(jsi_Pstate *ps, Jsi_Func *func, Jsi_OpCodes *opcodes,",
          "2018:          jsi_ScopeChain *scope, Jsi_Value *fargs,",
          "2019:          Jsi_Value *_this,",
          "2021: {",
          "2022:     Jsi_Interp *interp = ps->interp;",
          "2023:     if (interp->exited)",
          "",
          "[Removed Lines]",
          "2020:          Jsi_Value **vret)",
          "",
          "[Added Lines]",
          "2020:          Jsi_Value **vret, jsi_FileInfo* fi)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2032:     frame.incsc = fargs;",
          "2033:     frame.inthis = _this;",
          "2034:     frame.opcodes = opcodes;",
          "2035:     frame.fileName = ((func && func->script)?func->script:interp->curFile);",
          "2036:     frame.funcName = interp->curFunction;",
          "2037:     frame.dirName = interp->curDir;",
          "2042:     frame.level = frame.parent->level+1;",
          "2043:     frame.evalFuncPtr = func;",
          "2044:     frame.arguments = NULL;",
          "",
          "[Removed Lines]",
          "2038:     if (frame.fileName && frame.fileName == frame.parent->fileName)",
          "2039:         frame.logflag = frame.parent->logflag;",
          "2040:     else",
          "2041:         frame.logflag = 0;",
          "",
          "[Added Lines]",
          "2035:     frame.filePtr = fi;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2161:     int oldSp, uskip = 0, fncOfs = 0, fnLen;",
          "2162:     int oldef = interp->evalFlags;",
          "2163:     jsi_Pstate *oldps = interp->ps;",
          "2164:     const char *oldFile = interp->curFile;",
          "2165:     char *origFile = Jsi_ValueString(interp, path, &fnLen);",
          "2166:     const char *fname = origFile;",
          "2167:     char *oldDir = interp->curDir, *cp;",
          "2168:     char dirBuf[PATH_MAX];",
          "2169:     jsi_Pstate *ps = NULL;",
          "2171:     int exists = (flags&JSI_EVAL_EXISTS);",
          "2172:     int ignore = (flags&JSI_EVAL_ERRIGNORE);",
          "2173:     if (flags & JSI_EVAL_GLOBAL)",
          "",
          "[Removed Lines]",
          "2170:     jsi_FileInfo *fi = NULL;",
          "",
          "[Added Lines]",
          "2161:     jsi_FileInfo *fi = interp->framePtr->filePtr;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2364:         const char *curFile = interp->curFile;",
          "2366:         if (level <= 0)",
          "2368:         else {",
          "2369:             jsi_Frame *fptr = interp->framePtr;",
          "2370:             while (fptr && fptr->level > level)",
          "",
          "[Removed Lines]",
          "2367:             rc = jsi_evalcode(ps, NULL, ps->opcodes, interp->gsc, interp->csc, interp->csc, &retValue);",
          "",
          "[Added Lines]",
          "2364:             rc = jsi_evalcode(ps, NULL, ps->opcodes, interp->gsc, interp->csc, interp->csc, &retValue, fi);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2372:             if (!fptr)",
          "2373:                 rc = JSI_ERROR;",
          "2374:             else",
          "2376:         }",
          "2377:         interp->curFile = curFile;",
          "2378:         if (rc != JSI_OK)",
          "",
          "[Removed Lines]",
          "2375:                 rc = jsi_evalcode(ps, NULL, ps->opcodes, fptr->ingsc, fptr->incsc, fptr->inthis, &retValue);",
          "",
          "[Added Lines]",
          "2372:                 rc = jsi_evalcode(ps, NULL, ps->opcodes, fptr->ingsc, fptr->incsc, fptr->inthis, &retValue, fi);",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1076:      SIGINIT(func, FUNC);",
          "1077:      func->hPtr = Jsi_HashSet(interp->funcsTbl, func, func);",
          "1078:      func->refCnt = 1;",
          "1079:      interp->funcCnt++;",
          "1080:      return func;",
          "1081: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1079:      func->filePtr = interp->framePtr->filePtr;",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "680:     int retType;",
          "681: } Jsi_ScopeStrs;",
          "684: typedef struct jsi_Frame {",
          "685:     int level;",
          "686:     const char *fileName;",
          "687:     const char *funcName;",
          "688:     const char *dirName;",
          "689:     int line;",
          "690:     jsi_OpCode *ip;",
          "691:     int Sp;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "683: typedef struct {",
          "688:     int useCnt;",
          "689:     int logflag;",
          "690: } jsi_FileInfo;",
          "698:     jsi_FileInfo *filePtr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "696:     Jsi_Value *inthis;",
          "697:     Jsi_OpCodes *opcodes;",
          "698:     struct jsi_Pstate *ps;",
          "700:     Jsi_Func *evalFuncPtr;",
          "701:     struct jsi_Frame *parent, *child;",
          "702:     Jsi_Value *arguments; // Set when arguments are accessed.",
          "",
          "[Removed Lines]",
          "699:     int logflag;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "849:     Jsi_FuncObj *fobj;",
          "850:     struct jsi_PkgInfo *pkg;",
          "851:     bool isArrow;",
          "852: };",
          "862: enum {",
          "863:     STACK_INIT_SIZE=1024, STACK_INCR_SIZE=1024, STACK_MIN_PAD=100,",
          "",
          "[Removed Lines]",
          "854: typedef struct {",
          "859:     int useCnt;",
          "860: } jsi_FileInfo;",
          "",
          "[Added Lines]",
          "861:     jsi_FileInfo* filePtr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1189:     Jsi_Value *console;",
          "1191:     const char *scriptStr;",
          "1192:     const char *curFile;",
          "1193:     const char *curFunction;",
          "1194:     const char *homeDir;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1194:     jsi_Frame topFrame;",
          "1195:     jsi_FileInfo topFile;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1400: extern Jsi_RC jsi_evalcode(jsi_Pstate *ps, Jsi_Func *func, Jsi_OpCodes *opcodes,",
          "1401:         jsi_ScopeChain *scope, Jsi_Value *currentScope,",
          "1402:         Jsi_Value *_this,",
          "1405: typedef Jsi_RC (*Jsi_Constructor)(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1406:     Jsi_Value **ret, int flags, void *privData);",
          "",
          "[Removed Lines]",
          "1403:         Jsi_Value **vret);",
          "",
          "[Added Lines]",
          "1407:         Jsi_Value **vret, jsi_FileInfo* fi);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "782:           \"  -c\\t\\tCData: generate .c or JSON output from a .jsc description.\\n\"",
          "783:           \"  -d\\t\\tDebug: console script debugger.\\n\"",
          "784:           \"  -e CODE ...\\tEvaluate javascript CODE.\\n\"",
          "786:           \"  -h ?CMD?\\tHelp: show help for jsish or its commands.\\n\"",
          "787:           \"  -m\\t\\tModule: utility create/manage/invoke a Module.\\n\"",
          "788:           \"  -s\\t\\tSafe: runs script in safe sub-interp.\\n\"",
          "",
          "[Removed Lines]",
          "785:           \"  -g\\t\\tGendeep: generate html output from markdeep source.\\n\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "829:                     }",
          "830:                 }",
          "831:                 break;",
          "835:             case 'h':",
          "836:                 goto dohelp;",
          "837:             case 'J':",
          "",
          "[Removed Lines]",
          "832:             case 'g':",
          "833:                 rc = Jsi_EvalString(interp, \"runModule('GenDeep');\", JSI_EVAL_ISMAIN);",
          "834:                 break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1132:     if (opts && parent && (Jsi_ValueIsObjType(parent, opts, JSI_OT_OBJECT)==0 ||",
          "1133:         Jsi_TreeSize(opts->d.obj->tree)<=0))",
          "1134:         opts = NULL;",
          "1137:     if (!parent)",
          "1138:         interp->maxInterpDepth = JSI_MAX_SUBINTERP_DEPTH;",
          "1139:     else {",
          "",
          "[Removed Lines]",
          "1135:     interp = (Jsi_Interp *)Jsi_Calloc(1,sizeof(*interp) + sizeof(jsi_Frame));",
          "1136:     interp->framePtr = (jsi_Frame*)(((uchar*)interp)+sizeof(*interp));",
          "",
          "[Added Lines]",
          "1131:     interp = (Jsi_Interp *)Jsi_Calloc(1,sizeof(*interp));",
          "1132:     interp->framePtr = &interp->topFrame;",
          "1133:     interp->framePtr->filePtr = &interp->topFile;",
          "1134:     interp->topFile.fileName = interp->topFile.dirName = interp->topFile.origFile =\"\";",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "213:         int as_cons = funcPtr->callflags.bits.iscons;",
          "214:         if (funcPtr->type == FC_NORMAL) {",
          "215:             rc = jsi_evalcode(interp->ps, funcPtr, funcPtr->opcodes, callee->d.obj->d.fobj->scope,",
          "217:             interp->funcCallCnt++;",
          "218:         } else if (!funcPtr->callback) {",
          "219:             rc = Jsi_LogError(\"can not call:\\\"%s()\\\"\", funcPtr->name);",
          "",
          "[Removed Lines]",
          "216:                        args, fthis, ret);",
          "",
          "[Added Lines]",
          "216:                        args, fthis, ret, funcPtr->filePtr);",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:     int unused;",
          "227: } jsi_wsUser;",
          "229: typedef struct {",
          "230:     Jsi_Value *val, *objVar;",
          "231:     int triedLoad;",
          "232:     int flags;",
          "233: } jsi_wsHander;",
          "235: typedef struct {",
          "236:     Jsi_Value *fileVal;",
          "237:     time_t loadLast, loadFirst;",
          "238:     int flags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229: typedef Jsi_RC (*jsi_wsHandlerCmd)(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, jsi_wsPss *pss, Jsi_Value *fn, Jsi_DString *tStr);",
          "232:     jsi_wsHandlerCmd proc;",
          "239:     const char *fname;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "861:             else {",
          "862:                 fPtr = (jsi_wsFile *)Jsi_Calloc(1, sizeof(*fPtr));",
          "863:                 fPtr->fileVal = name;",
          "864:                 fPtr->loadFirst = time(NULL);",
          "865:                 Jsi_IncrRefCount(interp, name);",
          "866:                 fPtr->flags = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "868:                 fPtr->fname = sname;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "948:     }",
          "950:     char *cp, *se, pref[] = \"<!--#\", suffix[] = \"-->\";",
          "952:     struct {",
          "953:         int inif, inelse, matched, elide;",
          "954:     } II[11] = {};",
          "",
          "[Removed Lines]",
          "951:     const char *sp, *msg = NULL;",
          "",
          "[Added Lines]",
          "956:     const char *sp, *msg = NULL, *seq;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1002:                     rc = JSI_OK;",
          "1003:                 Jsi_DecrRefCount(interp, fval);",
          "1004:             }",
          "1021:                 }",
          "1022:             }",
          "1024:         } else if (!Jsi_Strncmp(cp, \"#if expr=\\\"\", 10) || !Jsi_Strncmp(cp, \"#elif expr=\\\"\", 12)) {",
          "1025:             if (llen<11 || cp[llen-1] != '\"' || cp[llen-2] == '=') { msg = \"missing end quote\"; break; }",
          "1026:             Jsi_DSSetLength(&lStr, llen-1);",
          "",
          "[Removed Lines]",
          "1005:         } else if (!Jsi_Strncmp(cp, \"#echo \\\"${\", 9)) {",
          "1006:             if (cp[llen-1] != '\"' || cp[llen-2] != '}') { msg = \"missing end quote\"; break; }",
          "1007:             Jsi_DSSetLength(&lStr, llen-2);",
          "1008:             cp += 9;",
          "1009:             llen -= 9;",
          "1010:             if (!Jsi_Strcmp(cp, \"#\")) {",
          "1011:                 if (!pss->key[0])",
          "1012:                     snprintf(pss->key, sizeof(pss->key), \"%d%p%d\", pss->wid, pss, (int)cmdPtr->startTime);",
          "1013:                 Jsi_DSPrintf(dStr, \"'%s'\", pss->key);",
          "1014:             } else {",
          "1015:                 Jsi_Value *val = NULL;",
          "1016:                 if (!cmdPtr->udata) {",
          "1017:                     val = Jsi_ValueObjLookup(interp, cmdPtr->udata, cp, 0);",
          "1018:                     if (!val) { msg = \"udata lookup failure\"; break; }",
          "1019:                     cp = Jsi_ValueString(interp, val, NULL);",
          "1020:                     Jsi_DSPrintf(dStr, \"'%s'\", cp);",
          "",
          "[Added Lines]",
          "1010:         } else if (cmdPtr->udata && !Jsi_Strncmp(cp, \"#set \", 5) && cp[5] != '=' && ((seq=Jsi_Strchr(cp,'='))) && (seq[1]=='\\'' || seq[1]=='\\\"') && cp[llen-1]==seq[1] ) {",
          "1011:             Jsi_DSSetLength(&lStr, llen-1);",
          "1012:             Jsi_Value *val = Jsi_ValueNewStringDup(interp, (seq+2));",
          "1013:             Jsi_DString tStr = {};",
          "1014:             const char *key = Jsi_DSAppendLen(&tStr, cp+5, seq-cp-5);",
          "1015:             Jsi_ValueInsert(interp, cmdPtr->udata, key, val, 0);",
          "1016:             Jsi_DSFree(&tStr);",
          "1017:         } else if (!Jsi_Strncmp(cp, \"#echo \", 6) && (cp[6]=='\\'' || cp[6]=='\\\"') && cp[llen-1]==cp[6] ) {",
          "1018:             char *esq, *vsq = Jsi_Strstr(cp,\"${\");",
          "1019:             int ptlen = (vsq?((vsq-cp)-7):llen-8);",
          "1020:             if (vsq && !(esq=Jsi_Strchr(vsq+2,'}'))) { msg = \"'${' missing end brace '}'\"; break; }",
          "1021:             Jsi_DSAppendLen(dStr, cp+7, ptlen);",
          "1022:             if (vsq) {",
          "1023:                 Jsi_DSSetLength(&lStr, llen-1);",
          "1024:                 cp = vsq+2;",
          "1026:                 if (cp[0]== '#' && !cp[1]) {",
          "1027:                     if (!pss->key[0])",
          "1028:                         snprintf(pss->key, sizeof(pss->key), \"%d%p%d\", pss->wid, pss, (int)cmdPtr->startTime);",
          "1029:                     Jsi_DSPrintf(dStr, \"'%s'\", pss->key);",
          "1030:                 } else {",
          "1031:                     Jsi_Value *val = NULL;",
          "1032:                     if (cmdPtr->udata) {",
          "1033:                         val = Jsi_ValueObjLookup(interp, cmdPtr->udata, cp, 0);",
          "1034:                         if (!val) { msg = \"udata lookup failure\"; break; }",
          "1035:                         cp = Jsi_ValueString(interp, val, NULL);",
          "1036:                         Jsi_DSAppend(dStr, cp, NULL);",
          "1037:                     }",
          "1039:                 Jsi_DSAppend(dStr, esq+1, NULL);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1101:             if (ii>0)",
          "1102:                 ii--;",
          "1103:         } else {",
          "1105:             break;",
          "1106:         }",
          "1107:         cs = se + 3;",
          "",
          "[Removed Lines]",
          "1104:             msg = \"expected directive #include/#if/#elif/#else/#endif\";",
          "",
          "[Added Lines]",
          "1122:             msg = \"expected directive #include/#if/#elif/#else/#endif/#echo/#set\";",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1206:     \"jsi\", \"application/x-javascript\", \"cssi\", \"text/css\",",
          "1207:     \"shtml\", \"text/html\",  \"scss\", \"text/css\", \"vtt\", \"text/vtt\",",
          "1208:     \"sjs\", \"application/x-javascript\",",
          "1209:     0, 0",
          "1210: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1227:     \"vue\", \"application/x-javascript\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1451:         isSSI = jsi_wsIsSSIExt(interp, cmdPtr, pss, eext);",
          "1455:             Jsi_DString jStr = {};",
          "1456:             Jsi_Value *vrc = NULL;",
          "",
          "[Removed Lines]",
          "1453:         if ((hPtr = Jsi_HashEntryFind(cmdPtr->handlers, ext)) && !cmdPtr->deleted) {",
          "",
          "[Added Lines]",
          "1472:         if (eext && (hPtr = Jsi_HashEntryFind(cmdPtr->handlers, eext)) && !cmdPtr->deleted) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1463:                 jsi_wsServeString(pss, wsi, \"Can not handle quotes in url\", 404, NULL, NULL);",
          "1464:                 return -1;",
          "1465:             }",
          "1466:             cmdPtr->handlersPkg=1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1485:             if (hdlPtr->proc) {",
          "1486:                 fname = Jsi_ValueNewStringDup(interp, buf);",
          "1487:                 Jsi_IncrRefCount(interp, fname);",
          "1488:                 Jsi_DString tStr = {};",
          "1489:                 rc = hdlPtr->proc(interp, cmdPtr, pss, fname, &tStr);",
          "1490:                 if (rc != JSI_OK)",
          "1491:                     hrc = -1;",
          "1492:                 else {",
          "1493:                     hrc = jsi_wsServeString(pss, wsi, Jsi_DSValue(&tStr), 0, NULL, mime);",
          "1494:                     jsi_wsFileAdd(interp, cmdPtr, fname);",
          "1495:                 }",
          "1496:                 Jsi_DecrRefCount(interp, fname);",
          "1497:                 return hrc;",
          "1498:             }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1548:                 Jsi_DecrRefCount(interp, vrc);",
          "1549:             if (hrc<=0)",
          "1550:                 return -1;",
          "1551:             return 1;",
          "1552:         }",
          "1553:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1584:             if (cmdPtr->onModify) {",
          "1585:                 fname = Jsi_ValueNewStringDup(interp, buf);",
          "1586:                 Jsi_IncrRefCount(interp, fname);",
          "1587:                 jsi_wsFileAdd(interp, cmdPtr, fname);",
          "1588:                 Jsi_DecrRefCount(interp, fname);",
          "1589:             }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2547:     return rc;",
          "2548: }",
          "2552: {",
          "2553:     Jsi_HashEntry *hPtr;",
          "2554:     jsi_wsHander *hdlPtr;",
          "2556:     hPtr = Jsi_HashEntryNew(cmdPtr->handlers, ext, NULL);",
          "2557:     if (!hPtr)",
          "2558:         return JSI_ERROR;",
          "2559:     hdlPtr = (jsi_wsHander *)Jsi_Calloc(1, sizeof(*hdlPtr));",
          "2560:     hdlPtr->val = valPtr;",
          "2561:     hdlPtr->flags = flags;",
          "2562:     Jsi_HashValueSet(hPtr, hdlPtr);",
          "2563:     Jsi_IncrRefCount(interp, valPtr);",
          "2564:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "2551: static Jsi_RC jsi_wsHandlerAdd(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, const char *ext, const char *cmd, int flags)",
          "2555:     Jsi_Value *valPtr = Jsi_ValueNewStringDup(interp, cmd);",
          "",
          "[Added Lines]",
          "2589: static Jsi_RC jsi_wsHandleVue(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, jsi_wsPss *pss, Jsi_Value *fn, Jsi_DString *tStr) {",
          "2591:     Jsi_DString dStr = {};",
          "2592:     Jsi_RC rc = jsi_wsFileRead(interp, fn, &dStr, cmdPtr, pss);",
          "2593:     if (rc != JSI_OK)",
          "2594:         return JSI_ERROR;",
          "2595:     char *s = Jsi_DSValue(&dStr),",
          "2601:     if (ts<0||te<0||se<0||sx<0)",
          "2602:         rc = Jsi_LogError(\"bad template: %s\", Jsi_ValueString(interp, fn, NULL));",
          "2603:     else {",
          "2604:         Jsi_DSAppendLen(tStr, s, ts-s);",
          "2605:         Jsi_DSAppend(tStr, \"let template=`\", NULL);",
          "2606:         Jsi_DSAppendLen(tStr, ts+10, te-ts-9);",
          "2607:         Jsi_DSAppend(tStr, \"`;\\n\\nexport default {\\n  template, \", NULL);",
          "2608:         sxb = sx+Jsi_Strlen(sxs);",
          "2609:         Jsi_DSAppendLen(tStr, sxb, se-sxb);",
          "2610:         Jsi_DSAppend(tStr, se+10, NULL);",
          "2611:     }",
          "2612:     return rc;",
          "2613: }",
          "2615: static Jsi_RC jsi_wsHandlerAdd(Jsi_Interp *interp, jsi_wsCmdObj *cmdPtr, const char *ext, const char *cmd, int flags, jsi_wsHandlerCmd proc)",
          "2619:     Jsi_Value *valPtr = Jsi_ValueNewStringDup(interp, (cmd?cmd:\"\"));",
          "2626:     hdlPtr->proc = proc;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2598:         return JSI_OK;",
          "2599:     }",
          "2600:     const char *key = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "2601:     Jsi_Value *valPtr = Jsi_ValueArrayIndex(interp, args, 1);",
          "2602:     if (Jsi_ValueIsNull(interp, valPtr)) {",
          "2603:         hPtr = Jsi_HashEntryFind(cmdPtr->handlers, key);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2666:     if (!key || !*key)",
          "2667:         return Jsi_LogError(\"handler: extension key must not be empty: %s\", key);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2625:     if (!hPtr)",
          "2626:         return JSI_ERROR;",
          "2627:     hdlPtr = (jsi_wsHander *)Jsi_Calloc(1, sizeof(*hdlPtr));",
          "2629:     Jsi_Number fl = 0;",
          "2630:     if (flagPtr && Jsi_ValueIsNumber(interp, flagPtr))",
          "2631:         Jsi_ValueGetNumber(interp, flagPtr, &fl);",
          "",
          "[Removed Lines]",
          "2628:     Jsi_Value *flagPtr = Jsi_ValueArrayIndex(interp, args, 1);",
          "",
          "[Added Lines]",
          "2695:     Jsi_Value *flagPtr = Jsi_ValueArrayIndex(interp, args, 3);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2729:             int n = Jsi_Stat(interp, fPtr->fileVal, &sb);",
          "2730:             if (!n && sb.st_mtime > ll) {",
          "2731:                 changed = fPtr->fileVal;",
          "2732:                 break;",
          "2733:             }",
          "2734:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2799:                 cmdPtr->lastModifyNotify = sb.st_mtime;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2755:         cmdPtr->onModify = NULL;",
          "2756:     }",
          "2757:     cmdPtr->lastModifyCheck = time(NULL);",
          "2759: }",
          "2761: static int jsi_wsService(jsi_wsCmdObj *cmdPtr)",
          "",
          "[Removed Lines]",
          "2758:     cmdPtr->lastModifyNotify = time(NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3209:     cmdPtr->handlers = Jsi_HashNew(interp, JSI_KEYS_STRING, jsi_wsfreeHandlers);",
          "3210:     if (cmdPtr->extHandlers) {",
          "3214:     }",
          "3215:     cmdPtr->fobj = fobj;",
          "3216: #ifdef LWS_LIBRARY_VERSION_NUMBER",
          "",
          "[Removed Lines]",
          "3211:         jsi_wsHandlerAdd(interp, cmdPtr, \".jsi\",   \"Jspp\",     1);",
          "3212:         jsi_wsHandlerAdd(interp, cmdPtr, \".htmli\", \"Htmlpp\",   1);",
          "3213:         jsi_wsHandlerAdd(interp, cmdPtr, \".cssi\",  \"Csspp\",    1);",
          "",
          "[Added Lines]",
          "3279:         jsi_wsHandlerAdd(interp, cmdPtr, \"jsi\",   \"Jspp\",     1, NULL);",
          "3280:         jsi_wsHandlerAdd(interp, cmdPtr, \"htmli\", \"Htmlpp\",   1, NULL);",
          "3281:         jsi_wsHandlerAdd(interp, cmdPtr, \"cssi\",  \"Csspp\",    1, NULL);",
          "3282:         jsi_wsHandlerAdd(interp, cmdPtr, \"vue\",   NULL,       1, jsi_wsHandleVue);",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ]
      }
    },
    {
      "candidate_hash": "95b734ff7d172ad5645ca9e7a4af06eb4875f731",
      "candidate_info": {
        "commit_hash": "95b734ff7d172ad5645ca9e7a4af06eb4875f731",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/95b734ff7d172ad5645ca9e7a4af06eb4875f731",
        "files": [
          "lib/Module.jsi",
          "lib/Websrv.jsi",
          "lib/www/js/httpVueLoader.js",
          "lib/www/md/Misc.md",
          "lib/www/md/Reference.md",
          "lib/www/md/index.json",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiZvfs.c",
          "tests/json2.jsi",
          "tests/utf.jsi",
          "tools/protos.jsi"
        ],
        "message": "Release \"3.4.7\": fix unzip hang, add jsonify/es5lint\n\nFossilOrigin-Name: af3732676198b6641b7fb06b41dfa73d922e1ab67db4a3a31232892554c4cbc2",
        "before_after_code_files": [
          "lib/Module.jsi||lib/Module.jsi",
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/www/js/httpVueLoader.js||lib/www/js/httpVueLoader.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiZvfs.c||src/jsiZvfs.c",
          "tests/json2.jsi||tests/json2.jsi",
          "tests/utf.jsi||tests/utf.jsi",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Module.jsi||lib/Module.jsi": [
          "File: lib/Module.jsi -> lib/Module.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "7:     const options = { // Run or create a Jsi module.",
          "8:         create  :'',        // Create a Jsi module template with this name.",
          "9:         force   :false,     // Remove output if exists.",
          "10:         output  :'',        // Override the output filename default of create + .jsi.",
          "11:         quiet   :false,     // No messages.",
          "12:         setup   :'',        // Download and setup fossil repos from jsish.org.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:         es5lint :'',        // For a .js file or dir of files recursively do parse-only with es6 features disabled.",
          "11:         json    :'',        // Json file to normalize",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27:         File.write('run_'+app+'.sh', \"#!\\njsish -a -update true \"+app+'.fossil $*\\n');",
          "28:     }",
          "30:     function main() {",
          "31:         LogTrace('Starting');",
          "32:         if (self.rootdir === '')",
          "33:             self.rootdir=Info.scriptDir();",
          "34:         debugger;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     function jsonify(name) {",
          "33:         var d = File.read(name);",
          "34:         d = JSON.parse(d, false);",
          "35:         d = JSON.stringify(d, null, 4);",
          "36:         if (self.output == '-')",
          "37:             puts(d);",
          "38:         else if (self.output == '.')",
          "39:             File.write(name, d);",
          "40:         else if (self.output)",
          "41:             File.write(self.output, d);",
          "42:         else",
          "43:             return d;",
          "44:     }",
          "46:     function es5lint(d) {",
          "47:         var i, lst;",
          "48:         if (File.isdir(d))",
          "49:             lst = File.glob('*.js', {dir:d, recurse:true});",
          "50:         else",
          "51:             lst = [d];",
          "52:         for (i of lst) {",
          "53:             var int = new Interp({noEval:true, noES6:true, scriptFile:i});",
          "54:             delete int;",
          "55:         }",
          "56:     }",
          "60:         if (self.json)",
          "61:             return jsonify(self.json);",
          "62:         if (self.es5lint)",
          "63:             return es5lint(self.es5lint);",
          "",
          "---------------"
        ],
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "28:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "29:         docs        :'',        // Display markdown docs from this directory.",
          "31:         hist        :false,     // Let Vue employ history mode, short for urlFallback=url: useful for -docs/-app.",
          "32:         ignoreExit  :false,     // Ignore exit request.",
          "33:         initArg     :[],        // List of app modules to run.",
          "",
          "[Removed Lines]",
          "30:         es5lint     :'',        // Parse-only a .js file or dir of files recursively disabling es6 features.",
          "",
          "[Added Lines]",
          "30:         es5lint     :'',        // For a .js file or dir of files recursively do parse-only with es6 features disabled.",
          "",
          "---------------"
        ],
        "lib/www/js/httpVueLoader.js||lib/www/js/httpVueLoader.js": [
          "File: lib/www/js/httpVueLoader.js -> lib/www/js/httpVueLoader.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 6",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 7",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1172:   char *pstr = str, *buf = (char*)Jsi_Malloc(Jsi_Strlen(str) * 3 + 1), *pbuf = buf;",
          "1173:   while (*pstr) {",
          "1176:     else if (*pstr == ' ')",
          "",
          "[Removed Lines]",
          "1171: static char *url_encode(char *str) {",
          "1174:     if (isalnum(*pstr) || *pstr == '-' || *pstr == '_' || *pstr == '.' || *pstr == '~')",
          "",
          "[Added Lines]",
          "1171: static char *url_encode(char *str, bool comp) {",
          "1172:   const char *ncomps = \"-_.!~*'()\", *comps = \";,/?:@&=+$#\";",
          "1176:     if (isalnum(*pstr) || (!Jsi_Strchr(ncomps, *pstr) && (!comp || !Jsi_Strchr(comps, *pstr))))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1183:   return buf;",
          "1184: }",
          "1189:   char *pstr = str, *buf = (char*)Jsi_Malloc(Jsi_Strlen(str) + 1), *pbuf = buf;",
          "1190:   while (*pstr) {",
          "1191:     if (*pstr == '%') {",
          "1192:       if (pstr[1] && pstr[2]) {",
          "1195:       }",
          "1196:     } else if (*pstr == '+') {",
          "",
          "[Removed Lines]",
          "1188: static char *url_decode(char *str, int *len) {",
          "1194:         pstr += 2;",
          "",
          "[Added Lines]",
          "1190: static char *url_decode(char *str, int *len, bool comp) {",
          "1191:   char *comps = \";,/?:@&=+$#\", cc;",
          "1196:         cc = jsi_fromHexChar(pstr[1]) << 4 | jsi_fromHexChar(pstr[2]);",
          "1197:         if (!comp && Jsi_Strchr(comps, cc))",
          "1199:         else {",
          "1200:             pstr += 2;",
          "1202:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1209:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1210: {",
          "1211:     char *cp, *str = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1213:     Jsi_ValueMakeString(interp, ret, cp);",
          "1214:     return JSI_OK;",
          "1215: }",
          "",
          "[Removed Lines]",
          "1212:     cp = url_encode(str);",
          "",
          "[Added Lines]",
          "1220:     cp = url_encode(str,0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1219: {",
          "1220:     char *cp, *str = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1221:     int len;",
          "1223:     Jsi_ValueMakeBlob(interp, ret, (uchar*)cp, len);",
          "1224:     return JSI_OK;",
          "1225: }",
          "",
          "[Removed Lines]",
          "1222:     cp = url_decode(str, &len);",
          "",
          "[Added Lines]",
          "1230:     cp = url_decode(str, &len,0);",
          "1231:     Jsi_ValueMakeBlob(interp, ret, (uchar*)cp, len);",
          "1232:     return JSI_OK;",
          "1233: }",
          "1235: static Jsi_RC EncodeURIComponentCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1236:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1237: {",
          "1238:     char *cp, *str = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1239:     cp = url_encode(str,1);",
          "1240:     Jsi_ValueMakeString(interp, ret, cp);",
          "1241:     return JSI_OK;",
          "1242: }",
          "1244: static Jsi_RC DecodeURIComponentCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "1245:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "1246: {",
          "1247:     char *cp, *str = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);",
          "1248:     int len;",
          "1249:     cp = url_decode(str, &len,1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5083:     { \"clearInterval\",clearIntervalCmd,1,1, \"id:number\", .help=\"Delete event id returned from setInterval/setTimeout/info.events()\", .retType=(uint)JSI_TT_VOID },",
          "5084: #endif",
          "5085:     { \"decodeURI\",  DecodeURICmd,    1,  1, \"val:string\", .help=\"Decode an HTTP URL\", .retType=(uint)JSI_TT_STRING },",
          "5086:     { \"encodeURI\",  EncodeURICmd,    1,  1, \"val:string\", .help=\"Encode an HTTP URL\", .retType=(uint)JSI_TT_STRING },",
          "5087:     { \"exec\",       SysExecCmd,      1,  2, \"val:string, options:string|object=void\", .help=\"Execute an OS command\", .retType=(uint)JSI_TT_ANY, .flags=0, .info=FN_exec, .opts=ExecOptions},",
          "5088:     { \"exit\",       SysExitCmd,      0,  1, \"code:number=0\", .help=\"Exit the current interpreter\", .retType=(uint)JSI_TT_VOID },",
          "5089:     { \"format\",     SysFormatCmd,    1, -1, \"format:string, ...\", .help=\"Printf style formatting: adds %q and %S\", .retType=(uint)JSI_TT_STRING },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5113:     { \"decodeURIComponent\",  DecodeURIComponentCmd,    1,  1, \"val:string\", .help=\"Decode an HTTP URL\", .retType=(uint)JSI_TT_STRING },",
          "5115:     { \"encodeURIComponent\",  EncodeURIComponentCmd,    1,  1, \"val:string\", .help=\"Encode an HTTP URL\", .retType=(uint)JSI_TT_STRING },",
          "",
          "---------------"
        ],
        "src/jsiZvfs.c||src/jsiZvfs.c": [
          "File: src/jsiZvfs.c -> src/jsiZvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:         pZvfs->hPtr = pEntry;",
          "624:         Jsi_HashValueSet(pEntry, (void*) pZvfs);",
          "626:         if (nFile < 0)",
          "627:             break;",
          "633:         Jsi_Seek(interp, chan, lenExtra, SEEK_CUR);",
          "634:     }",
          "635:     pArchive->chan = chan;",
          "",
          "[Removed Lines]",
          "632: skip:",
          "",
          "[Added Lines]",
          "626: skip:",
          "",
          "---------------"
        ],
        "tests/json2.jsi||tests/json2.jsi": [
          "File: tests/json2.jsi -> tests/json2.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #!/usr/local/bin/jsish -u %s",
          "5: ;JSON.check(x,false);",
          "6: ;JSON.check(x);",
          "7: ;JSON.check(x2,false);",
          "",
          "[Removed Lines]",
          "3: var x = '{\"type\":\"\", \"label\":\"editTran\", \"data\" : [6,2961]}';",
          "4: var x2 = '{\"type\":\"\", \"label\":\"editTran\", data : [6,2961]}';",
          "",
          "[Added Lines]",
          "3: var x, x2, o;",
          "4: ;x = '{\"type\":\"\", \"label\":\"editTran\", \"data\" : [6,2961]}';",
          "5: ;x2 = '{\"type\":\"\", \"label\":\"editTran\", data : [6,2961]}';",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25: x = JSON.parse('{ \"Columns\": [ 1, 2, {\"ABC\":1, \"B\":[2,3]}, 2], \"A\" : 1 }');",
          "26: ;x.toString();",
          "29: =!EXPECTSTART!=",
          "30: JSON.check(x,false) ==> true",
          "31: JSON.check(x) ==> true",
          "32: JSON.check(x2,false) ==> true",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: ;o = {a:1,b:2,c:{d:1,e:{a:1},g:[1,2]},d:9};",
          "30: ;JSON.stringify(o);",
          "31: ;JSON.stringify(o, null);",
          "32: ;JSON.stringify(o, false, 4);",
          "36: x = '{\"type\":\"\", \"label\":\"editTran\", \"data\" : [6,2961]}' ==> {\"type\":\"\", \"label\":\"editTran\", \"data\" : [6,2961]}",
          "37: x2 = '{\"type\":\"\", \"label\":\"editTran\", data : [6,2961]}' ==> {\"type\":\"\", \"label\":\"editTran\", data : [6,2961]}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "38: JSON.stringify(dat) ==> { \"able\":1 }",
          "39: x.toString() ==> [ \"ABC\", 1 ]",
          "40: x.toString() ==> { A:1, Columns:[ 1, 2, { ABC:1, B:[ 2, 3 ] }, 2 ] }",
          "41: =!EXPECTEND!=",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: o = {a:1,b:2,c:{d:1,e:{a:1},g:[1,2]},d:9} ==> { a:1, b:2, c:{ d:1, e:{ a:1 }, g:[ 1, 2 ] }, d:9 }",
          "50: JSON.stringify(o) ==> { \"a\":1, \"b\":2, \"c\":{ \"d\":1, \"e\":{ \"a\":1 }, \"g\":[ 1, 2 ] }, \"d\":9 }",
          "51: JSON.stringify(o, null) ==> {",
          "52:   \"a\":1,",
          "53:   \"b\":2,",
          "54:   \"c\":{",
          "55:     \"d\":1,",
          "56:     \"e\":{",
          "57:       \"a\":1",
          "58:     },",
          "59:     \"g\":[ 1, 2 ]",
          "60:   },",
          "61:   \"d\":9",
          "62: }",
          "63: JSON.stringify(o, false, 4) ==> {",
          "64:     a:1,",
          "65:     b:2,",
          "66:     c:{",
          "67:         d:1,",
          "68:         e:{",
          "69:             a:1",
          "70:         },",
          "71:         g:[ 1, 2 ]",
          "72:     },",
          "73:     d:9",
          "74: }",
          "",
          "---------------"
        ],
        "tests/utf.jsi||tests/utf.jsi": [
          "File: tests/utf.jsi -> tests/utf.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: ;d[9];",
          "31: b = '\u2665' ==> \u2665",
          "32: b.length ==> 1",
          "33: b+'a' ==> \u2665a",
          "35: c = '\u2764' ==> \u2764",
          "36: c.length ==> 1",
          "37: c+'a' ==> \u2764a",
          "",
          "[Removed Lines]",
          "30: =!EXPECTSTART!=",
          "34: encodeURI(b) ==> %e2%99%a5",
          "",
          "[Added Lines]",
          "30: =!EX=!EXPECTSTART!=",
          "34: encodeURI(b) ==> \u2665",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48: d[2] ==> c",
          "49: d[3] ==> undefined",
          "50: d[9] ==> undefined",
          "",
          "[Removed Lines]",
          "51: =!EXPECTEND!=",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "267: System.prototype.assert = function(expr:boolean|number|function, msg:string=void, options:object=void):void {};",
          "268: System.prototype.clearInterval = function(id:number):void {};",
          "269: System.prototype.decodeURI = function(val:string):string {};",
          "270: System.prototype.encodeURI = function(val:string):string {};",
          "271: System.prototype.exec = function(val:string, options:string|object=void):any {};",
          "272: System.prototype.exit = function(code:number=0):void {};",
          "273: System.prototype.format = function(format:string, ...):string {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "270: System.prototype.decodeURIComponent = function(val:string):string {};",
          "272: System.prototype.encodeURIComponent = function(val:string):string {};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "367: console.prototype.puts = function(val:any, ...):void {};",
          "368: console.prototype.warn = function(val, ...):void {};",
          "369: var decodeURI = function(val:string):string {};",
          "370: var encodeURI = function(val:string):string {};",
          "371: var exec = function(val:string, options:string|object=void):any {};",
          "372: var exit = function(code:number=0):void {};",
          "373: var format = function(format:string, ...):string {};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372: var decodeURIComponent = function(val:string):string {};",
          "374: var encodeURIComponent = function(val:string):string {};",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56677efa0cba8467ff0082ee409e71dacf3fc13c",
      "candidate_info": {
        "commit_hash": "56677efa0cba8467ff0082ee409e71dacf3fc13c",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/56677efa0cba8467ff0082ee409e71dacf3fc13c",
        "files": [
          "lib/Htmlpp.jsi",
          "lib/Websrv.jsi",
          "lib/autoload.jsi",
          "lib/www/js/Jsish.js",
          "lib/www/md/Reference.md",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiCode.c",
          "src/jsiEval.c",
          "src/jsiInt.h",
          "src/jsiObj.c",
          "src/jsiSqlite.c",
          "src/jsiValue.c",
          "src/parser.y",
          "tools/protos.jsi",
          "tools/testsys.sh"
        ],
        "message": "Release \"3.4.3\": add check for duplicates in objects\n\nFossilOrigin-Name: 9e70b043b48f51f13e250b6285eb4cf979820040f07705ff6f89d0589bfaca4d",
        "before_after_code_files": [
          "lib/Htmlpp.jsi||lib/Htmlpp.jsi",
          "lib/Websrv.jsi||lib/Websrv.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "lib/www/js/Jsish.js||lib/www/js/Jsish.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiCode.c||src/jsiCode.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiInt.h||src/jsiInt.h",
          "src/jsiObj.c||src/jsiObj.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiValue.c||src/jsiValue.c",
          "src/parser.y||src/parser.y",
          "tools/protos.jsi||tools/protos.jsi",
          "tools/testsys.sh||tools/testsys.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiCode.c||src/jsiCode.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiSqlite.c||src/jsiSqlite.c",
            "src/jsiValue.c||src/jsiValue.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiCode.c||src/jsiCode.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiSqlite.c||src/jsiSqlite.c",
            "src/jsiValue.c||src/jsiValue.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Htmlpp.jsi||lib/Htmlpp.jsi": [
          "File: lib/Htmlpp.jsi -> lib/Htmlpp.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:     var self = {",
          "26:         package:\"Htmlpp\",",
          "27:         intOpts:{},",
          "29:         jsifiles:[], cssfiles:[], mdfiles:[],",
          "30:         Trace       :false,",
          "31:     };",
          "",
          "[Removed Lines]",
          "28:         rc:'', files:[], files:[], chpos:0, rootdir:'', curdir:'', data:'', errs:'', dir:'',",
          "",
          "[Added Lines]",
          "28:         rc:'', files:[], chpos:0, rootdir:'', curdir:'', data:'', errs:'', dir:'',",
          "",
          "---------------"
        ],
        "lib/Websrv.jsi||lib/Websrv.jsi": [
          "File: lib/Websrv.jsi -> lib/Websrv.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:         closeTimeout:0,         // Time til exit after close of final client websocket (ms).",
          "28:         confFile    :'',        // JSON file of options (eg. for useridPass or wsOpts).",
          "29:         docs        :'',        // Display markdown docs from this directory.",
          "31:         hist        :false,     // Let Vue employ history mode, short for urlFallback=url: useful for -docs/-app.",
          "32:         ignoreExit  :false,     // Ignore exit request.",
          "33:         initArg     :[],        // List of app modules to run.",
          "",
          "[Removed Lines]",
          "30:         es5test     :'',        // Verify as parsable-es5 all .js scripts within dir and below, then exit.",
          "",
          "[Added Lines]",
          "30:         es5test     :'',        // Verify as parsable-es5 .js scripts in file or dir and below, then exit.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "403:     function es5test() {",
          "404:         var d = self.es5test;",
          "408:         for (i of lst) {",
          "409:             var int = new Interp({noEval:true, noES6:true, scriptFile:i});",
          "410:             delete int;",
          "",
          "[Removed Lines]",
          "405:         if (!File.isdir(d))",
          "406:             throw 'not a directory: '+d;",
          "407:         var i, lst = File.glob('*.js', {dir:d, recurse:true});",
          "",
          "[Added Lines]",
          "405:         var i, lst;",
          "406:         if (File.isdir(d))",
          "407:             lst = File.glob('*.js', {dir:d, recurse:true});",
          "408:         else",
          "409:             lst = [d];",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: Jsi_Auto.MySql          = 'require(\"MySql\");';",
          "34: Jsi_Auto.WebSocket      = 'require(\"WebSocket\");';",
          "35: Jsi_Auto.Socket         = 'require(\"Socket\");';",
          "38: source(Info.scriptDir()+'/user/autoload.jsi', {exists:true, once:true});",
          "",
          "[Removed Lines]",
          "36: Jsi_Auto.DebugUI        = 'require(\"DebugUI\");';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/www/js/Jsish.js||lib/www/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> lib/www/js/Jsish.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "499:     },",
          "500:     htmladd: function(str) { output(str) },",
          "503:         var f=document.createElement('script');",
          "504:         f.setAttribute(\"type\",\"text/javascript\");",
          "505:         f.setAttribute(\"src\", fn);",
          "",
          "[Removed Lines]",
          "502:     inc: function(fn, onload, onerror) { $jsig('fn:string, success:function, error:function', arguments)();",
          "",
          "[Added Lines]",
          "502:     inc: function(fn, onload, onerror) {",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   4",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 2",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 3",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4708:     return \"\";",
          "4709: }",
          "4711: static Jsi_RC SysModuleOptsCmdEx(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "4712:     Jsi_Value **ret, Jsi_Func *funcPtr, bool parse)",
          "4713: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4711: bool jsi_isDebugKey(const char *key) {",
          "4712:     return (!Jsi_Strcmp(key, \"Debug\") || !Jsi_Strcmp(key, \"Test\") || !Jsi_Strcmp(key, \"Trace\")  || !Jsi_Strcmp(key, \"Assert\"));",
          "4713: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4833:                 break;",
          "4834:             }",
          "4835:             Jsi_vtype oTyp, vTyp = jsi_getValType(val);",
          "4837:                 oTyp = JSI_VT_BOOL; // Accept these as builtin options.",
          "4838:                 oVal = NULL;",
          "4839:             } else if (!v2) {",
          "",
          "[Removed Lines]",
          "4836:             if (!parse && (!Jsi_Strcmp(key, \"Debug\") || !Jsi_Strcmp(key, \"Test\") || !Jsi_Strcmp(key, \"Trace\")  || !Jsi_Strcmp(key, \"Assert\"))) {",
          "",
          "[Added Lines]",
          "4840:             if (!parse && jsi_isDebugKey(key)) {",
          "",
          "---------------"
        ],
        "src/jsiCode.c||src/jsiCode.c": [
          "File: src/jsiCode.c -> src/jsiCode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:     jsiOpCodesCnt[2]-=2;",
          "187:     return ret;",
          "188: }",
          "190: static Jsi_OpCodes *codes_join3(Jsi_OpCodes *a, Jsi_OpCodes *b, Jsi_OpCodes *c)",
          "191: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "189: static Jsi_OpCodes *codes_join_item(Jsi_OpCodes *a, Jsi_OpCodes *b)",
          "190: {",
          "191:     if (a->code_len == 1 && a->codes[0].op == OP_PUSHSTR &&",
          "192:         b->code_len>1)",
          "193:         b->codes[0].itemLen = b->code_len;",
          "194:     return codes_join(a,b);",
          "195: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "330: static Jsi_OpCodes *code_jfalse_np(int off) { JSI_NEW_CODES(0,OP_JFALSE_NP, off); }",
          "331: static Jsi_OpCodes *code_jtrue_np(int off) { JSI_NEW_CODES(0,OP_JTRUE_NP, off); }",
          "332: static Jsi_OpCodes *code_jmp(int off) { JSI_NEW_CODES(0,OP_JMP, off); }",
          "334: static Jsi_OpCodes *code_array(jsi_Pstate *p, jsi_Pline *line, int c) { JSI_NEW_CODESLN(0,OP_ARRAY, c); }",
          "335: static Jsi_OpCodes *code_key() { JSI_NEW_CODES(0,OP_KEY, 0); }",
          "336: static Jsi_OpCodes *code_next() { JSI_NEW_CODES(0,OP_NEXT, 0); }",
          "",
          "[Removed Lines]",
          "333: static Jsi_OpCodes *code_object(jsi_Pstate *p, jsi_Pline *line, int c) { JSI_NEW_CODESLN(0,OP_OBJECT, c); }",
          "",
          "[Added Lines]",
          "340: static Jsi_OpCodes *code_object(jsi_Pstate *p, jsi_Pline *line, Jsi_OpCodes* cv) {",
          "341:     int c = cv->expr_counter, nested = (c*2 != cv->code_len);",
          "342:     Jsi_Interp *interp = p->interp;",
          "343:     if (c>0 && interp->noEval) {",
          "344:         int i, n;",
          "345:         bool isNew;",
          "346:         const char *cp;",
          "347:         Jsi_Hash *h = Jsi_HashNew(interp, JSI_KEYS_STRINGKEY, NULL);",
          "348:         for (i=0, n=0; i<c; i++, n+=2) {",
          "349:             if (cv->codes[n].op == OP_PUSHSTR && !cv->codes[n].setget",
          "350:                 && Jsi_HashEntryNew(h, cp=(char*)cv->codes[n].data, &isNew) && !isNew) {",
          "351:                 Jsi_LogWarn(\"duplicate key: %s\", cp);",
          "352:             }",
          "353:             if (nested && cv->codes[n+1].itemLen)",
          "354:                 n += cv->codes[n+1].itemLen-1;",
          "355:         }",
          "356:         Jsi_HashDelete(h);",
          "357:     }",
          "358:     JSI_NEW_CODESLN(0, OP_OBJECT, c);",
          "359: }",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "992:         Jsi_ValueMakeUndef(interp, &src);",
          "993:         if (obj && obj->freeze && obj->freezeReadCheck) {",
          "994:             const char *keyStr = Jsi_ValueToString(interp, idx, NULL);",
          "996:         }",
          "997:     }",
          "998:     else {",
          "",
          "[Removed Lines]",
          "995:             rc = Jsi_LogError(\"object freeze: read undefined \\\"%s\\\"\", keyStr);",
          "",
          "[Added Lines]",
          "995:             if (!jsi_isDebugKey(keyStr))",
          "996:                 rc = Jsi_LogError(\"object freeze: read undefined \\\"%s\\\"\", keyStr);",
          "",
          "---------------"
        ],
        "src/jsiInt.h||src/jsiInt.h": [
          "File: src/jsiInt.h -> src/jsiInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "439: typedef struct jsi_OpCode {",
          "440:     jsi_Eopcode op;",
          "442:     unsigned int Line:16;",
          "443:     unsigned int Lofs:7;",
          "444:     unsigned int  readonly:1;",
          "",
          "[Removed Lines]",
          "441:     void *data;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "448:     unsigned char isof:1;",
          "449:     unsigned char local:1;",
          "450:     unsigned char logidx:3;",
          "451:     jsi_FileInfo* filePtr;",
          "452: } jsi_OpCode;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450:     unsigned char setget:1;",
          "451:     unsigned int itemLen:24;",
          "452:     void *data;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1013:     bool full;    // Show full file path.",
          "1014:     bool ftail;   // Show tail of file only, even in LogWarn, etc.",
          "1015:     bool func;    // Ouput function at end.",
          "1022:     bool time;    // Prefix with time",
          "1023:     bool date;    // Prefix with date",
          "1024:     bool before;  // Print file:line before message instead of at end.",
          "",
          "[Removed Lines]",
          "1017:     bool Trace;",
          "1018:     bool Test;",
          "1019:     bool Info;",
          "1020:     bool Warn;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1506: extern Jsi_RC jsi_ObjSetFlag(Jsi_Interp *interp, Jsi_Obj *obj, int flag, int on);",
          "1507: extern Jsi_RC jsi_SetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value *val, Jsi_Value *_this, int flags);",
          "1508: extern Jsi_RC jsi_GetterCall(Jsi_Interp *interp, Jsi_HashEntry *hPtr, Jsi_Value **vres, Jsi_Value *_this, int flags);",
          "1510: #if !defined(_JSI_MEMCLEAR) && defined(JSI_MEM_DEBUG)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1505: extern bool jsi_isDebugKey(const char *key);",
          "1506: extern Jsi_TreeEntry *jsi_TreeObjSetValue(Jsi_Obj *obj, const char *key, Jsi_Value *val, int isstrkey, bool unique);",
          "",
          "---------------"
        ],
        "src/jsiObj.c||src/jsiObj.c": [
          "File: src/jsiObj.c -> src/jsiObj.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20:     return v;",
          "21: }",
          "24:     Jsi_Tree *treePtr = obj->tree;",
          "25:     bool isNew;",
          "26:     Jsi_TreeEntry *hPtr;",
          "",
          "[Removed Lines]",
          "23: Jsi_TreeEntry *Jsi_TreeObjSetValue(Jsi_Obj *obj, const char *key, Jsi_Value *val, int isstrkey) {",
          "",
          "[Added Lines]",
          "23: Jsi_TreeEntry *jsi_TreeObjSetValue(Jsi_Obj *obj, const char *key, Jsi_Value *val, int isstrkey, bool unique) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38:     hPtr = Jsi_TreeEntryNew(treePtr, key, &isNew);",
          "39:     if (!hPtr)",
          "40:         return NULL;",
          "41:     if (val)",
          "42:         SIGASSERT(val,VALUE);",
          "43:     if (!isNew)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     if (unique && !isNew)",
          "42:         Jsi_LogWarn(\"add duplicate key: %s\", key);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "62:     return hPtr;",
          "63: }",
          "67: bool Jsi_ObjIsArray(Jsi_Interp *interp, Jsi_Obj *o)  {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: Jsi_TreeEntry *Jsi_TreeObjSetValue(Jsi_Obj *obj, const char *key, Jsi_Value *val, int isstrkey) {",
          "68:     return jsi_TreeObjSetValue(obj, key, val, isstrkey, 0);",
          "69: }",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:     JSI_OPT(INT,    Jsi_Db, timeout,    .help=\"Amount of time to wait when file is locked, in ms\"),",
          "364:     JSI_OPT(OBJ,    Jsi_Db, udata,      .help=\"User data\" ),",
          "365:     JSI_OPT(OBJ,    Jsi_Db, version,    .help=\"Sqlite version info\", jsi_IIRO),",
          "367:     JSI_OPT(STRING, Jsi_Db, vfs,        .help=\"VFS to use\", jsi_IIOF),",
          "368:     JSI_OPT_END(Jsi_Db, .help=\"Options for source command\")",
          "369: };",
          "",
          "[Removed Lines]",
          "366:     JSI_OPT(INT,    Jsi_Db, timeout,    .help=\"Amount of time to wait when file is locked, in ms\"),",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiValue.c||src/jsiValue.c": [
          "File: src/jsiValue.c -> src/jsiValue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1399:     return rc;",
          "1400: }",
          "1403: {",
          "1404:     Jsi_TreeEntry *hPtr;",
          "1405:     SIGASSERT(val, VALUE);",
          "",
          "[Removed Lines]",
          "1402: static Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags)",
          "",
          "[Added Lines]",
          "1402: static Jsi_RC jsi_ObjValInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, Jsi_Value *_this, int flags, bool unique)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1420:     if (val->vt == JSI_VT_OBJECT)",
          "1421:         jsi_ObjInsertObjCheck(interp, obj, val, 1);",
          "1423:     if ((flags&JSI_OM_DONTDEL))",
          "1424:         val->f.bits.dontdel = hPtr->f.bits.dontdel = 1;",
          "1425:     if ((flags&JSI_OM_READONLY))",
          "",
          "[Removed Lines]",
          "1422:     hPtr = Jsi_TreeObjSetValue(obj, key, val, 0);",
          "",
          "[Added Lines]",
          "1422:     hPtr = jsi_TreeObjSetValue(obj, key, val, 0, unique);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1435:     if (target->vt != JSI_VT_OBJECT)",
          "1436:         return Jsi_LogError(\"Target is not object\");",
          "1437:     target->f.flag |= flags;",
          "1439: }",
          "1441: Jsi_RC Jsi_ObjInsert(Jsi_Interp *interp, Jsi_Obj *obj, const char *key, Jsi_Value *val, int flags)",
          "1442: {",
          "1444: }",
          "1446: static Jsi_RC IterGetKeysCallback(Jsi_Tree* tree, Jsi_TreeEntry *hPtr, void *data)",
          "",
          "[Removed Lines]",
          "1438:     return jsi_ObjValInsert(interp, target->d.obj, key, val, target, flags);",
          "1443:     return jsi_ObjValInsert(interp, obj, key, val, NULL, flags);",
          "",
          "[Added Lines]",
          "1438:     return jsi_ObjValInsert(interp, target->d.obj, key, val, target, flags, 0);",
          "1443:     return jsi_ObjValInsert(interp, obj, key, val, NULL, flags, 1);",
          "",
          "---------------"
        ],
        "src/parser.y||src/parser.y": [
          "File: src/parser.y -> src/parser.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "839: ;",
          "841: object:",
          "843: ;",
          "845: itemfunc:",
          "",
          "[Removed Lines]",
          "842:     '{' items '}'   { $$ = codes_join($2, code_object(pstate, &@2, ($2)->expr_counter)); }",
          "",
          "[Added Lines]",
          "842:     '{' items '}'   { $$ = codes_join($2, code_object(pstate, &@2, $2)); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "848:         lval->lvalue_flag = 1;",
          "849:         lval->lvalue_name = $1;",
          "850:         code_es6(pstate, \"object shorthand func\");",
          "852:         jsi_PstatePop(pstate);",
          "853:     }",
          "854: ;",
          "",
          "[Removed Lines]",
          "851:         $$ = codes_join(code_push_string(pstate,&@1, $1), lval);",
          "",
          "[Added Lines]",
          "851:         $$ = codes_join_item(code_push_string(pstate,&@1, $1), lval);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "860:         Jsi_OpCodes *lval = code_push_index(pstate, &@1, $1, 0);",
          "861:         lval->lvalue_flag = 1;",
          "862:         lval->lvalue_name = $1;",
          "864:     }",
          "865:     | item  { $$ = $1; }",
          "",
          "[Removed Lines]",
          "863:         $$ = codes_join(code_push_string(pstate,&@1, $1), lval);",
          "",
          "[Added Lines]",
          "863:         $$ = codes_join_item(code_push_string(pstate,&@1, $1), lval);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "914: ;",
          "916: item:",
          "925:     | OBJSET IDENTIFIER '(' IDENTIFIER ')' func_statement_block {",
          "926:         Jsi_ScopeStrs *args = jsi_argInsert(pstate, NULL, $4, NULL, &@4, 0 );",
          "928:             code_push_func(pstate,  &@3, jsi_FuncMake(pstate, args, $6, &@1, $2, 2)));",
          "929:     }",
          "930:     | OBJGET IDENTIFIER '(' ')' func_statement_block {",
          "931:         Jsi_ScopeStrs *args = jsi_ArgsOptAdd(pstate, jsi_ScopeStrsNew());",
          "933:             code_push_func(pstate,  &@3, jsi_FuncMake(pstate, args, $5, &@1, $2, 4)));",
          "934:     }",
          "935: ;",
          "",
          "[Removed Lines]",
          "917:     IDENTIFIER ':' expr { $$ = codes_join(code_push_string(pstate,&@1, $1), $3); }",
          "918:     | strlit ':' expr   { $$ = codes_join(code_push_vstring(pstate,&@1, $1), $3); }",
          "919:     | itemres':' expr   { $$ = codes_join($1, $3); }",
          "920:     | FNUMBER ':' expr { $$ = codes_join(code_push_num($1), $3);  }",
          "921:     | _TRUE ':' expr { $$ = codes_join(code_push_bool(1), $3);  }",
          "922:     | _FALSE ':' expr { $$ = codes_join(code_push_bool(0), $3);  }",
          "923:     | UNDEF ':' expr { $$ = codes_join(code_push_undef(), $3);  }",
          "924:     | TYPENULL ':' expr { $$ = codes_join(code_push_null(), $3);  }",
          "927:         $$ = codes_join(code_push_string(pstate,&@2, $2),",
          "932:         $$ = codes_join(code_push_string(pstate,&@2, $2),",
          "",
          "[Added Lines]",
          "917:     IDENTIFIER ':' expr { $$ = codes_join_item(code_push_string(pstate,&@1, $1), $3); }",
          "918:     | strlit ':' expr   { $$ = codes_join_item(code_push_vstring(pstate,&@1, $1), $3); }",
          "919:     | itemres':' expr   { $$ = codes_join_item($1, $3); }",
          "920:     | FNUMBER ':' expr { $$ = codes_join_item(code_push_num($1), $3);  }",
          "921:     | _TRUE ':' expr { $$ = codes_join_item(code_push_bool(1), $3);  }",
          "922:     | _FALSE ':' expr { $$ = codes_join_item(code_push_bool(0), $3);  }",
          "923:     | UNDEF ':' expr { $$ = codes_join_item(code_push_undef(), $3);  }",
          "924:     | TYPENULL ':' expr { $$ = codes_join_item(code_push_null(), $3);  }",
          "927:         $$ = codes_join_item(code_push_string(pstate,&@2, $2),",
          "932:         $$ = codes_join_item(code_push_string(pstate,&@2, $2),",
          "934:         $$->codes[0].setget = 1;",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "tools/testsys.sh||tools/testsys.sh": [
          "File: tools/testsys.sh -> tools/testsys.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:         #echo $i",
          "14:         continue",
          "15:     fi",
          "16:     jsish --I noEval=true $i",
          "17: done",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16:     echo $i",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20ff8e2f6f66493b65f20c00c53d4f1e9f426631",
      "candidate_info": {
        "commit_hash": "20ff8e2f6f66493b65f20c00c53d4f1e9f426631",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/20ff8e2f6f66493b65f20c00c53d4f1e9f426631",
        "files": [
          "lib/Jsish.jsi",
          "lib/autoload.jsi",
          "md/Reference.md",
          "src/jsi.h",
          "src/jsiArray.c",
          "src/jsiFunc.c",
          "src/jsiMySql.c",
          "src/jsiSqlite.c",
          "src/jsiString.c",
          "src/jsiStubs.h",
          "src/jsiUtils.c",
          "tools/protos.jsi",
          "www/reference.wiki"
        ],
        "message": "Release \"3.0.10\": Fix issues #12, #13, and #14.\n\nFossilOrigin-Name: 70747c8d1c4e7bf176bec8cfb9d3cac3e64a696e7df0b1e3712d3f6b952164c3",
        "before_after_code_files": [
          "lib/Jsish.jsi||lib/Jsish.jsi",
          "lib/autoload.jsi||lib/autoload.jsi",
          "src/jsi.h||src/jsi.h",
          "src/jsiArray.c||src/jsiArray.c",
          "src/jsiFunc.c||src/jsiFunc.c",
          "src/jsiMySql.c||src/jsiMySql.c",
          "src/jsiSqlite.c||src/jsiSqlite.c",
          "src/jsiString.c||src/jsiString.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiUtils.c||src/jsiUtils.c",
          "tools/protos.jsi||tools/protos.jsi",
          "www/reference.wiki||www/reference.wiki"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiMySql.c||src/jsiMySql.c",
            "src/jsiSqlite.c||src/jsiSqlite.c",
            "src/jsiString.c||src/jsiString.c",
            "src/jsiUtils.c||src/jsiUtils.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiFunc.c||src/jsiFunc.c",
            "src/jsiMySql.c||src/jsiMySql.c",
            "src/jsiSqlite.c||src/jsiSqlite.c",
            "src/jsiString.c||src/jsiString.c",
            "src/jsiUtils.c||src/jsiUtils.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Jsish.jsi||lib/Jsish.jsi": [
          "File: lib/Jsish.jsi -> lib/Jsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "257:     return 'VALUES($'+name+'('+val.keys().join('),$'+name+'(')+'))';",
          "258: }",
          "262:     var self = {};",
          "263:     var options = {",
          "264:         objOpts     :{},        // Options for objOpts",
          "265:         verbose     :false",
          "266:     };",
          "267:     parseOpts(self, options, conf);",
          "268:     var cl = {}, cols = db.query('PRAGMA table_info(\"'+table+'\")');",
          "270:         return true;",
          "271:     for (var c=0; c<cols.length; c++)",
          "272:         cl[cols[c].name] = cols[c];",
          "273:     var oo = self.objOpts;",
          "274:     oo.getSql = true;",
          "276:     s = ','+s.substr( s.indexOf('(')+1);",
          "277:     s = s.substr(0, s.length-2);",
          "278:     s +=',';",
          "",
          "[Removed Lines]",
          "261: function Jsi_SchemaUpdate(db:userobj, table:string, data:object, conf:object=void) {",
          "269:     if (!cols.length)",
          "275:     var s = db.query('CREATE TABLE '+table+' %s', {objName:'data', objOpts:oo});",
          "",
          "[Added Lines]",
          "261: function Jsi_ObjToSchema(db:userobj, table:string, data:object, conf:object=void) {",
          "264:         noCreate    :false,     // Create table, if not exists.",
          "270:     if (!cols.length) {",
          "271:         if (!self.noCreate)",
          "272:             db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data'});",
          "274:     }",
          "280:     var fs = db.query(\"CREATE TABLE '\"+table+\"' %s\", {objName:'data', objOpts:oo});",
          "281:     var s = fs;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:         var rec = s.substr( s.indexOf(','+i+' '));",
          "282:         if (!rec) throw('failed to find schema: '+i);",
          "283:         rec = rec.substr(1);",
          "286:         if (self.verbose)",
          "287:             LogInfo('SCHEMA:',sql);",
          "288:         db.eval(sql);",
          "289:         cl[i] = rec;",
          "290:     }",
          "302:         return true;",
          "304:     return false;",
          "305: }",
          "",
          "[Removed Lines]",
          "284:         rec = rec.substr(0, rec.indexOf(','));",
          "285:         var sql = 'ALTER TABLE '+table+' ADD COLUMN '+rec;",
          "292:     var t = '';",
          "293:     for (i in cl) {",
          "294:         t += ',';",
          "295:         if (typeof(cl[i])==='string')",
          "296:             t += cl[i];",
          "297:         else",
          "298:             t += (i+' '+cl[i].type+' DEFAULT '+cl[i].dflt_value);",
          "299:     }",
          "300:     t += ',';",
          "301:     if (s === t)",
          "303:     LogWarn('Schema mismatch (possible downgrade?) in table \"'+table+'\":\\n\"'+s+'\" !=\\n\"'+t+'\"');",
          "",
          "[Added Lines]",
          "290:         var re = rec.indexOf(',');",
          "291:         if (rec[re+1] == ' ' && ((re = rec.indexOf(')', re))>=0))",
          "292:             re = rec.indexOf(',', re);",
          "293:         rec = rec.substr(0, re);",
          "294:         var sql = 'ALTER TABLE \"'+table+'\" ADD COLUMN '+rec;",
          "295:         puts(\"RR: \",sql);",
          "303:     if (fs === t)",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||lib/autoload.jsi": [
          "File: lib/autoload.jsi -> lib/autoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: Jsi_Auto.Jsi_LogFile    =",
          "16: Jsi_Auto.Jsi_Opts       =",
          "17: Jsi_Auto.Jsi_SqlValues  =",
          "19: Jsi_Auto.Jsi_Conf       = 'source(\"'+Info.scriptDir()+'/Jsish.jsi\")';",
          "20: Jsi_Auto.Htmlpp     = 'source(\"'+Info.scriptDir()+'/Htmlpp.jsi\")';",
          "21: Jsi_Auto.Csspp      = 'source(\"'+Info.scriptDir()+'/Csspp.jsi\")';",
          "",
          "[Removed Lines]",
          "18: Jsi_Auto.Jsi_SchemaUpdate =",
          "",
          "[Added Lines]",
          "18: Jsi_Auto.Jsi_ObjToSchema =",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define JSI_VERSION_MAJOR   3",
          "6: #define JSI_VERSION_MINOR   0",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "7: #define JSI_VERSION_RELEASE 10",
          "",
          "[Added Lines]",
          "7: #define JSI_VERSION_RELEASE 11",
          "",
          "---------------"
        ],
        "src/jsiArray.c||src/jsiArray.c": [
          "File: src/jsiArray.c -> src/jsiArray.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "392:     fptr = func->d.obj->d.fobj->func;",
          "393:     maa = (fptr->argnames?fptr->argnames->argCnt:0);",
          "395:         maa = 3;",
          "396:     for (i = 0; i < curlen; i++) {",
          "397:         if (!obj->arr[i]) continue;",
          "398:         vobjs[0] = obj->arr[i];",
          "400:         vobjs[2] = _this;",
          "401:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vobjs, maa, 0));",
          "402:         Jsi_IncrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "394:     if (maa>3)",
          "399:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):NULL);",
          "",
          "[Added Lines]",
          "394:     if (maa>3 || fptr->type == FC_BUILDIN)",
          "399:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):interp->NullValue);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "452:     fptr = func->d.obj->d.fobj->func;",
          "453:     maa = (fptr->argnames?fptr->argnames->argCnt:0);",
          "455:         maa = 3;",
          "456:     for (i = 0; i < curlen; i++) {",
          "457:         if (!obj->arr[i]) continue;",
          "458:         vobjs[0] = obj->arr[i];",
          "460:         vobjs[2] = _this;",
          "461:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vobjs, maa, 0));",
          "462:         Jsi_IncrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "454:     if (maa>3)",
          "459:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):NULL);",
          "",
          "[Added Lines]",
          "454:     if (maa>3 || fptr->type == FC_BUILDIN)",
          "459:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):interp->NullValue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "533:     Jsi_Value *vobjs[3];",
          "534:     Jsi_Func *fptr = func->d.obj->d.fobj->func;",
          "535:     int maa = (fptr->argnames?fptr->argnames->argCnt:0);",
          "537:         maa = 3;",
          "538:     for (i = 0; i < obj->arrCnt && rc == JSI_OK; i++) {",
          "539:         if (!obj->arr[i]) continue;",
          "540:         vobjs[0] = obj->arr[i];",
          "542:         vobjs[2] = _this;",
          "543:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vobjs, maa, 0));",
          "544:         Jsi_IncrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "536:     if (maa>3)",
          "541:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):NULL);",
          "",
          "[Added Lines]",
          "536:     if (maa>3 || fptr->type == FC_BUILDIN)",
          "541:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):interp->NullValue);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "572:     Jsi_Value *vobjs[3];",
          "573:     Jsi_Func *fptr = func->d.obj->d.fobj->func;",
          "574:     int maa = (fptr->argnames?fptr->argnames->argCnt:0);",
          "576:         maa = 3;",
          "577:     for (i = 0; i < obj->arrCnt && rc == JSI_OK; i++) {",
          "578:         if (!obj->arr[i]) continue;",
          "579:         vobjs[0] = obj->arr[i];",
          "581:         vobjs[2] = _this;",
          "582:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vobjs, maa, 0));",
          "583:         Jsi_IncrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "575:     if (maa>3)",
          "580:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):NULL);",
          "",
          "[Added Lines]",
          "575:     if (maa>3 || fptr->type == FC_BUILDIN)",
          "580:         vobjs[1] = (maa>1?Jsi_ValueNewNumber(interp, i):interp->NullValue);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "626:     int n, rev = (op==2);",
          "627:     Jsi_Func *fptr = func->d.obj->d.fobj->func;",
          "628:     int maa = (fptr->argnames?fptr->argnames->argCnt:0);",
          "630:         maa = 4;",
          "632:     for (n = 0, i = (rev?obj->arrCnt-1:0); (rev?i>=0:i < (int)obj->arrCnt) && rc == JSI_OK; n++, i = (rev?i-1:i+1)) {",
          "",
          "[Removed Lines]",
          "629:     if (maa>4)",
          "",
          "[Added Lines]",
          "629:     if (maa>4 || fptr->type == FC_BUILDIN)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "639:         vobjs[0] = ini;",
          "640:         vobjs[1] = obj->arr[i];",
          "642:         vobjs[3] = _this;",
          "643:         vpargs = Jsi_ValueMakeObject(interp, NULL, Jsi_ObjNewArray(interp, vobjs, maa, 0));",
          "644:         Jsi_IncrRefCount(interp, vpargs);",
          "",
          "[Removed Lines]",
          "641:         vobjs[2] = (maa>2?Jsi_ValueNewNumber(interp, i):NULL);",
          "",
          "[Added Lines]",
          "641:         vobjs[2] = (maa>2?Jsi_ValueNewNumber(interp, i):interp->NullValue);",
          "",
          "---------------"
        ],
        "src/jsiFunc.c||src/jsiFunc.c": [
          "File: src/jsiFunc.c -> src/jsiFunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "764:     Jsi_Func *funcPtr = tocall->d.obj->d.fobj->func;",
          "765:     SIGASSERT(funcPtr, FUNC);",
          "768:     if (args->vt != JSI_VT_OBJECT || !Jsi_ObjIsArray(interp, args->d.obj))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "766:     if (funcPtr->type == FC_BUILDIN) {",
          "767:         Jsi_CmdSpec *cs  = funcPtr->cmdSpec;",
          "768:         int argc = (args ? Jsi_ValueGetLength(interp, args) : 0);",
          "769:         if (cs && cs->minArgs>=0 && argc<cs->minArgs)",
          "770:             return Jsi_LogError(\"too few args: expected %d\", cs->minArgs);",
          "771:     }",
          "",
          "---------------"
        ],
        "src/jsiMySql.c||src/jsiMySql.c": [
          "File: src/jsiMySql.c -> src/jsiMySql.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "184: static const char *trcModeStrs[] = {\"eval\", \"delete\", \"prepare\", \"step\", NULL}; // Bit-set packed into an int.",
          "185: static const char *objSqlModeStrs[] = { \"getSql\", \"noTypes\", \"noDefaults\", \"nullDefaults\", NULL };",
          "186: enum {mdbTMODE_EVAL=0x1, mdbTMODE_DELETE=0x2, mdbTMODE_PREPARE=0x4, mdbTMODE_STEP=0x4};",
          "190: typedef struct MySqlObj {",
          "",
          "[Removed Lines]",
          "187: enum {OBJMODE_SQLONLY=0x1, OBJMODE_NOTYPES=0x2, OBJMODE_NODEFAULTS=0x4, OBJMODE_NULLDEFAULTS=0x8};",
          "",
          "[Added Lines]",
          "187: enum {OBJMODE_SQLONLY=0x1, OBJMODE_NOTYPES=0x2, OBJMODE_NODEFAULTS=0x4, OBJMODE_NULLDEFAULTS=0x8, OBJMODE_NOCHECKS=0x8};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1624:     if (opts.objName) {",
          "1625:         if (Jsi_SqlObjBinds(interp, &eStr, opts.objName,  !(opts.objOpts&OBJMODE_NOTYPES),",
          "1627:             goto bail;",
          "1628:         zSql = Jsi_DSValue(&eStr);",
          "1629:     }",
          "",
          "[Removed Lines]",
          "1626:         !(opts.objOpts&OBJMODE_NODEFAULTS), (opts.objOpts&OBJMODE_NULLDEFAULTS)!=0) != JSI_OK)",
          "",
          "[Added Lines]",
          "1626:         !(opts.objOpts&OBJMODE_NODEFAULTS), (opts.objOpts&OBJMODE_NULLDEFAULTS)!=0,",
          "1627:         !(opts.objOpts&OBJMODE_NOCHECKS)) != JSI_OK)",
          "",
          "---------------"
        ],
        "src/jsiSqlite.c||src/jsiSqlite.c": [
          "File: src/jsiSqlite.c -> src/jsiSqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173: static const char *mtxStrs[] = { \"default\", \"none\", \"full\", NULL };",
          "174: static const char *trcModeStrs[] = {\"eval\", \"delete\", \"prepare\", \"step\", NULL}; // Bit-set packed into an int.",
          "175: static const char *dbTypeChkStrs[] = { \"convert\", \"warn\", \"error\", \"disable\", NULL };",
          "177: #endif",
          "180: enum {TMODE_EVAL=0x1, TMODE_DELETE=0x2, TMODE_PREPARE=0x4, TMODE_STEP=0x4};",
          "181: typedef enum { MUTEX_DEFAULT, MUTEX_NONE, MUTEX_FULL } Mutex_Type;",
          "182: typedef enum { dbTypeCheck_Cast, dbTypeCheck_Warn, dbTypeCheck_Error, dbTypeCheck_None } dbTypeCheck_Mode;",
          "",
          "[Removed Lines]",
          "176: static const char *objSqlModeStrs[] = { \"getSql\", \"noTypes\", \"noDefaults\", \"nullDefaults\", NULL };",
          "179: enum {OBJMODE_SQLONLY=0x1, OBJMODE_NOTYPES=0x2, OBJMODE_NODEFAULTS=0x4, OBJMODE_NULLDEFAULTS=0x8};",
          "",
          "[Added Lines]",
          "176: static const char *objSqlModeStrs[] = { \"getSql\", \"noTypes\", \"noDefaults\", \"nullDefaults\", \"noChecks\", NULL };",
          "179: enum {OBJMODE_SQLONLY=0x1, OBJMODE_NOTYPES=0x2, OBJMODE_NODEFAULTS=0x4, OBJMODE_NULLDEFAULTS=0x8, OBJMODE_NOCHECKS=0x16};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2648:     }",
          "2649:     if (opts.objName) {",
          "2650:         if (Jsi_SqlObjBinds(interp, &eStr, opts.objName, !(opts.objOpts&OBJMODE_NOTYPES),",
          "2652:             goto bail;",
          "2653:         zSql = Jsi_DSValue(&eStr);",
          "2654:     }",
          "",
          "[Removed Lines]",
          "2651:             !(opts.objOpts&OBJMODE_NODEFAULTS), (opts.objOpts&OBJMODE_NULLDEFAULTS)!=0) != JSI_OK)",
          "",
          "[Added Lines]",
          "2651:             !(opts.objOpts&OBJMODE_NODEFAULTS), (opts.objOpts&OBJMODE_NULLDEFAULTS)!=0,",
          "2652:             !(opts.objOpts&OBJMODE_NOCHECKS)) != JSI_OK)",
          "",
          "---------------"
        ],
        "src/jsiString.c||src/jsiString.c": [
          "File: src/jsiString.c -> src/jsiString.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "652:     Jsi_Value *repVal = Jsi_ValueArrayIndex(interp, args, 1+skip);",
          "653:     if (!Jsi_ValueIsFunction(interp, repVal))",
          "654:         replace_str = Jsi_ValueToString(interp, repVal, &replace_len);",
          "657:     Jsi_DSInit(&dStr);",
          "659:     if (Jsi_ValueIsString(interp, seq)) {",
          "",
          "[Removed Lines]",
          "655:     else",
          "656:         maxArgs = repVal->d.obj->d.fobj->func->argnames->argCnt;",
          "",
          "[Added Lines]",
          "655:     else {",
          "656:         Jsi_Func *fptr = repVal->d.obj->d.fobj->func;",
          "657:         maxArgs = (fptr->argnames?fptr->argnames->argCnt:0);",
          "658:     }",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"d32d2f3a25ef2f1bb91a706989687883\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"245bfc701de9f6aaafbe9462645dc362\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "445:     void(*_Jsi_IterGetKeys)(Jsi_Interp *interp, Jsi_Value *target, Jsi_IterObj *iterobj, int depth);",
          "446:     bool(*_Jsi_IsReserved)(Jsi_Interp *interp, const char* str, bool sql);",
          "447:     bool(*_Jsi_StrIsAlnum)(const char *cp);",
          "449:     Jsi_RC(*_Jsi_UserObjName)(Jsi_Interp *interp, Jsi_Value *v, Jsi_DString *dStr);",
          "450:     void *endPtr;",
          "451: } Jsi_Stubs;",
          "",
          "[Removed Lines]",
          "448:     Jsi_RC(*_Jsi_SqlObjBinds)(Jsi_Interp* interp, Jsi_DString* zStr, const char *varName, bool addTypes, bool addDefaults, bool nullDefaults);",
          "",
          "[Added Lines]",
          "448:     Jsi_RC(*_Jsi_SqlObjBinds)(Jsi_Interp* interp, Jsi_DString* zStr, const char *varName, bool addTypes, bool addDefaults, bool nullDefaults, bool addCheck);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1293: #define Jsi_IterGetKeys(n0,n1,n2,n3) JSISTUBCALL(jsiStubsPtr, _Jsi_IterGetKeys(n0,n1,n2,n3))",
          "1294: #define Jsi_IsReserved(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_IsReserved(n0,n1,n2))",
          "1295: #define Jsi_StrIsAlnum(n0) JSISTUBCALL(jsiStubsPtr, _Jsi_StrIsAlnum(n0))",
          "1297: #define Jsi_UserObjName(n0,n1,n2) JSISTUBCALL(jsiStubsPtr, _Jsi_UserObjName(n0,n1,n2))",
          "1299: #endif",
          "",
          "[Removed Lines]",
          "1296: #define Jsi_SqlObjBinds(n0,n1,n2,n3,n4,n5) JSISTUBCALL(jsiStubsPtr, _Jsi_SqlObjBinds(n0,n1,n2,n3,n4,n5))",
          "",
          "[Added Lines]",
          "1296: #define Jsi_SqlObjBinds(n0,n1,n2,n3,n4,n5,n6) JSISTUBCALL(jsiStubsPtr, _Jsi_SqlObjBinds(n0,n1,n2,n3,n4,n5,n6))",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "495: }",
          "499:     Jsi_Value *v, *vnPtr = Jsi_VarLookup(interp, varName);",
          "500:     if (!vnPtr || !Jsi_ValueIsObjType(interp, vnPtr, JSI_OT_OBJECT))",
          "501:         return Jsi_LogError(\"varName must be an Object: %s\", varName);",
          "",
          "[Removed Lines]",
          "498: Jsi_RC Jsi_SqlObjBinds(Jsi_Interp* interp, Jsi_DString* zStr, const char *varName, bool addTypes, bool addDefaults, bool nullDefaults) {",
          "",
          "[Added Lines]",
          "498: Jsi_RC Jsi_SqlObjBinds(Jsi_Interp* interp, Jsi_DString* zStr, const char *varName,",
          "499:     bool addTypes, bool addDefaults, bool nullDefaults, bool addCheck) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:     const char *pre = \"\", *kstr;",
          "518:     if (!create)",
          "519:         Jsi_DSAppend(&vStr, \" VALUES(\", NULL);",
          "520:     for (i=0; i<io->count; i++) {",
          "521:         kstr = io->keys[i];",
          "528:             const char *typ = NULL, *dflt=(nullDefaults?\"NULL\":NULL);",
          "529:             if (addTypes && ((v = Jsi_ValueObjLookup(interp, vnPtr, kstr, 1)))) {",
          "530:                 if (Jsi_ValueIsBoolean(interp, v)) {",
          "531:                     typ = \"BOOLEAN\";",
          "533:                         bool bv = 0;",
          "534:                         Jsi_ValueGetBoolean(interp, v, &bv);",
          "535:                         dflt = (bv?\"1\":\"0\");",
          "536:                     }",
          "537:                 } else if (Jsi_ValueIsNumber(interp, v)) {",
          "538:                     typ = \"NUMERIC\";",
          "539:                     if (!Jsi_Strcmp(kstr,\"rowid\"))",
          "540:                         typ = \"INTEGER PRIMARY KEY\";",
          "546:                     }",
          "547:                 } else if (Jsi_ValueIsArray(interp, v) || Jsi_ValueIsObjType(interp, v, JSI_OT_OBJECT)) {",
          "548:                     typ = \"CHARJSON\";",
          "550:                         Jsi_DSFree(&jStr);",
          "551:                         Jsi_DSAppend(&jStr, \"'\", NULL);",
          "552:                         Jsi_ValueGetDString(interp, v, &jStr, JSI_OUTPUT_JSON|JSI_JSON_STRICT);",
          "",
          "[Removed Lines]",
          "522:         const char *qs = \"\", *qe = \"\";",
          "523:         if (!Jsi_StrIsAlnum(kstr) || Jsi_IsReserved(interp, kstr, 1)) {",
          "524:             qe = qs = \"'\";",
          "525:         }",
          "526:         Jsi_DSAppend(&sStr, pre, qs, kstr, qe, NULL);",
          "527:         if (create) {",
          "532:                     if (!nullDefaults && addDefaults) {",
          "541:                     else if (!nullDefaults && addDefaults) {",
          "542:                         Jsi_Number nv = 0;",
          "543:                         Jsi_DSFree(&jStr);",
          "544:                         Jsi_ValueGetNumber(interp, v, &nv);",
          "545:                         dflt = Jsi_DSPrintf(&jStr, \"%\" JSI_NUMGFMT, nv);",
          "549:                     if (!nullDefaults && addDefaults) {",
          "",
          "[Added Lines]",
          "521:     if (nullDefaults)",
          "522:         addDefaults = 0;",
          "525:         const char *chk = NULL, *chk2 = NULL;",
          "526:         Jsi_DSAppend(&sStr, pre, \"[\", kstr, \"]\", NULL);",
          "527:         if (!create) {",
          "528:             Jsi_DSAppend(&vStr, pre, \"$\", varName, \"(\", kstr, \")\", NULL);",
          "529:         } else {",
          "534:                     if (addDefaults) {",
          "539:                     if (addCheck) {",
          "540:                         chk = \"== 'integer'\";",
          "541:                         chk2 = \"(0,1)\";",
          "542:                     }",
          "547:                     else {",
          "548:                         if (addDefaults) {",
          "549:                             Jsi_Number nv = 0;",
          "550:                             Jsi_DSFree(&jStr);",
          "551:                             Jsi_ValueGetNumber(interp, v, &nv);",
          "552:                             dflt = Jsi_DSPrintf(&jStr, \"%\" JSI_NUMGFMT, nv);",
          "553:                         }",
          "554:                         if (addCheck)",
          "555:                             chk = \"IN ('real','integer')\";",
          "559:                     if (addDefaults) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "555:                     }",
          "556:                 } else {",
          "557:                     typ = \"TEXT\";",
          "559:                         if ((cp=Jsi_ValueString(interp, v, NULL))) {",
          "560:                             Jsi_DSFree(&jStr);",
          "561:                             dflt = Jsi_DSAppend(&jStr, \"'\", cp, \"'\", NULL);",
          "562:                         } else",
          "564:                     }",
          "565:                 }",
          "566:             }",
          "567:             if (typ)",
          "571:         }",
          "572:         pre = \",\";",
          "573:     }",
          "",
          "[Removed Lines]",
          "558:                     if (!nullDefaults && addDefaults) {",
          "563:                         dflt = \"NULL\";",
          "568:                 Jsi_DSAppend(&sStr, \" \", typ, (dflt?\" DEFAULT \":\"\"), dflt, NULL);",
          "569:         } else {",
          "570:             Jsi_DSAppend(&vStr, pre, \"$\", varName, \"(\", kstr, \")\", NULL);",
          "",
          "[Added Lines]",
          "568:                     if (addDefaults) {",
          "573:                             dflt = \"NULL\";",
          "574:                     }",
          "575:                     if (addCheck) {",
          "576:                         if (dflt && !Jsi_Strcmp(dflt,\"NULL\"))",
          "577:                             chk = \"IN ('text','null')\";",
          "578:                         else",
          "579:                             chk = \"== 'text'\";",
          "584:                 Jsi_DSAppend(&sStr, \" \", typ, NULL);",
          "585:             if (dflt)",
          "586:                 Jsi_DSAppend(&sStr,\" DEFAULT \", dflt, NULL);",
          "587:             if (chk) {",
          "588:                 Jsi_DSPrintf(&sStr,\" CONSTRAINT '%s Invalid' CHECK(typeof(%s) %s\", kstr, kstr, chk);",
          "589:                 if (chk2)",
          "590:                     Jsi_DSPrintf(&sStr,\" AND %s IN %s\", kstr, chk2);",
          "591:                 Jsi_DSAppend(&sStr,\")\", NULL);",
          "592:             }",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi"
        ],
        "www/reference.wiki||www/reference.wiki": [
          "File: www/reference.wiki -> www/reference.wiki",
          "--- Hunk 1 ---",
          "[Context before]",
          "1229: <tr><td>nocache</td><td><i>BOOL</i></td><td>Disable query cache.</td><td><i></i></td></tr>",
          "1230: <tr><td>nullvalue</td><td><i>STRKEY</i></td><td>Null string output (for non js/json mode).</td><td><i></i></td></tr>",
          "1231: <tr><td>objName</td><td><i>STRKEY</i></td><td>Object var name for CREATE/INSERT: replaces %s with fields in query.</td><td><i></i></td></tr>",
          "1233: <tr><td>retChanged</td><td><i>BOOL</i></td><td>Query returns value of sqlite3_changed().</td><td><i></i></td></tr>",
          "1234: <tr><td>separator</td><td><i>STRKEY</i></td><td>Separator string (for csv and text mode).</td><td><i></i></td></tr>",
          "1235: <tr><td>typeCheck</td><td><i>STRKEY</i></td><td>Type check mode (warn). (one of: <b>convert</b>, <b>warn</b>, <b>error</b>, <b>disable</b>)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1232: <tr><td>objOpts</td><td><i>ARRAY</i></td><td>Options for objName. (zero or more of: <b>getSql</b>, <b>noTypes</b>, <b>noDefaults</b>, <b>nullDefaults</b>)</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1232: <tr><td>objOpts</td><td><i>ARRAY</i></td><td>Options for objName. (zero or more of: <b>getSql</b>, <b>noTypes</b>, <b>noDefaults</b>, <b>nullDefaults</b>, <b>noChecks</b>)</td><td><i></i></td></tr>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1268: <tr><td>nocache</td><td><i>BOOL</i></td><td>Disable query cache.</td><td><i></i></td></tr>",
          "1269: <tr><td>nullvalue</td><td><i>STRKEY</i></td><td>Null string output (for non js/json mode).</td><td><i></i></td></tr>",
          "1270: <tr><td>objName</td><td><i>STRKEY</i></td><td>Object var name for CREATE/INSERT: replaces %s with fields in query.</td><td><i></i></td></tr>",
          "1272: <tr><td>retChanged</td><td><i>BOOL</i></td><td>Query returns value of sqlite3_changed().</td><td><i></i></td></tr>",
          "1273: <tr><td>separator</td><td><i>STRKEY</i></td><td>Separator string (for csv and text mode).</td><td><i></i></td></tr>",
          "1274: <tr><td>typeCheck</td><td><i>STRKEY</i></td><td>Type check mode (warn). (one of: <b>convert</b>, <b>warn</b>, <b>error</b>, <b>disable</b>)</td><td><i></i></td></tr>",
          "",
          "[Removed Lines]",
          "1271: <tr><td>objOpts</td><td><i>ARRAY</i></td><td>Options for objName. (zero or more of: <b>getSql</b>, <b>noTypes</b>, <b>noDefaults</b>, <b>nullDefaults</b>)</td><td><i></i></td></tr>",
          "",
          "[Added Lines]",
          "1271: <tr><td>objOpts</td><td><i>ARRAY</i></td><td>Options for objName. (zero or more of: <b>getSql</b>, <b>noTypes</b>, <b>noDefaults</b>, <b>nullDefaults</b>, <b>noChecks</b>)</td><td><i></i></td></tr>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27239bdfee26ad83bd0a17223bd0a04d91e21d9b",
      "candidate_info": {
        "commit_hash": "27239bdfee26ad83bd0a17223bd0a04d91e21d9b",
        "repo": "pcmacdon/jsish",
        "commit_url": "https://github.com/pcmacdon/jsish/commit/27239bdfee26ad83bd0a17223bd0a04d91e21d9b",
        "files": [
          "Makefile",
          "lib/Jsi_Vfs.jsi",
          "lib/Jsish.jsi",
          "lib/Manage.jsi",
          "lib/Module.jsi",
          "lib/Wget.jsi",
          "lib/Zip.jsi",
          "lib/autoload.jsi",
          "lib/www/js/Jsish.js",
          "lib/www/md/Reference.md",
          "lib/www/version.json",
          "src/jsi.h",
          "src/jsiCmds.c",
          "src/jsiEval.c",
          "src/jsiFileCmds.c",
          "src/jsiFilesys.c",
          "src/jsiInterp.c",
          "src/jsiProto.c",
          "src/jsiStubs.h",
          "src/jsiTree.c",
          "src/jsiUtils.c",
          "src/jsiWebSocket.c",
          "src/jsiZvfs.c",
          "src/main.c",
          "tools/protos.jsi",
          "zhash.txt"
        ],
        "message": "Pre 3.5\n\nFossilOrigin-Name: 84000d3a84a0d2dccf0981281d324bb569f659464727eab6e8f6c5cf4bde0df5",
        "before_after_code_files": [
          "lib/Jsi_Vfs.jsi||liJsi_Vfs.jsi",
          "lib/Jsish.jsi||liJsish.jsi",
          "lib/Module.jsi||liManage.jsi",
          "lib/Wget.jsi||liWget.jsi",
          "lib/Zip.jsi||liZip.jsi",
          "lib/autoload.jsi||liautoload.jsi",
          "lib/www/js/Jsish.js||liwww/js/Jsish.js",
          "src/jsi.h||src/jsi.h",
          "src/jsiCmds.c||src/jsiCmds.c",
          "src/jsiEval.c||src/jsiEval.c",
          "src/jsiFileCmds.c||src/jsiFileCmds.c",
          "src/jsiFilesys.c||src/jsiFilesys.c",
          "src/jsiInterp.c||src/jsiInterp.c",
          "src/jsiProto.c||src/jsiProto.c",
          "src/jsiStubs.h||src/jsiStubs.h",
          "src/jsiTree.c||src/jsiTree.c",
          "src/jsiUtils.c||src/jsiUtils.c",
          "src/jsiWebSocket.c||src/jsiWebSocket.c",
          "src/jsiZvfs.c||src/jsiZvfs.c",
          "src/main.c||src/main.c",
          "tools/protos.jsi||tools/protos.jsi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFilesys.c||src/jsiFilesys.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiTree.c||src/jsiTree.c",
            "src/jsiUtils.c||src/jsiUtils.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ],
          "candidate": [
            "src/jsi.h||src/jsi.h",
            "src/jsiCmds.c||src/jsiCmds.c",
            "src/jsiEval.c||src/jsiEval.c",
            "src/jsiFilesys.c||src/jsiFilesys.c",
            "src/jsiInterp.c||src/jsiInterp.c",
            "src/jsiTree.c||src/jsiTree.c",
            "src/jsiUtils.c||src/jsiUtils.c",
            "src/jsiWebSocket.c||src/jsiWebSocket.c"
          ]
        }
      },
      "candidate_diff": {
        "lib/Jsi_Vfs.jsi||liJsi_Vfs.jsi": [
          "File: lib/Jsi_Vfs.jsi -> liJsi_Vfs.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:                 }",
          "135:             }",
          "136:             if (!ver || ver === '') ver = 'tip';",
          "139:             info = dosplit(self.exec('fossil info \"' + ver + '\" ' + sfx), info);",
          "140:             info.mntTag = ver;",
          "141:             if (ver.match(/^ver-[0-9]+\\.[0-9]+$/))",
          "",
          "[Removed Lines]",
          "137:             if (!self.quiet && ver !== '')",
          "138:                 puts('Fossil mount:', ver, mount, repoFile);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Jsish.jsi||liJsish.jsi": [
          "File: lib/Jsish.jsi -> liJsish.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "285:         return true;",
          "286:     var cln = cl.length, fln=fl.length;",
          "287:     if (cln > fln) {",
          "289:         return false;",
          "290:     }",
          "291:     var fadds = cl.filter( n => !fl.includes(n) );",
          "292:     if (fadds.length) {",
          "294:         return false;",
          "295:     }",
          "296:     var cadds = fl.filter( n => !cl.includes(n) );",
          "",
          "[Removed Lines]",
          "288:         LogWarn('Can not sync obj with fewer fields than table: \"'+table+'\"');",
          "293:         LogWarn('Can not sync, obj is missing fields in table: \"'+table+'\"\\n'+fadds.join('\\n|'));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "322:     }",
          "323: }",
          "329:     if (args.length > 0) {",
          "331:         if (!alen) throw 'null length';",
          "336:             if (sn.substr(0,alen) == a0) {",
          "337:                 if (sub) { emsg = 'Error: prefix not unique\\n'; sub=null; break; }",
          "339:             }",
          "340:         }",
          "341:         if (sub)",
          "343:     }",
          "344:     emsg += 'Arg 1 must be unique prefix of:\\n';",
          "345:     var len = 0;",
          "352:     throw emsg;",
          "353: }",
          "",
          "[Removed Lines]",
          "325: function Jsi_CmdTable(args:array, cmdList:array) {",
          "326:     if (typeof(cmdList[0]) != 'array' || cmdList[0].length != 3)",
          "327:         throw 'expected list of [string, func, string]';",
          "328:     var emsg = '';",
          "330:         var sub, a0 = args[0], alen = a0.length;",
          "332:         for (var i of cmdList) {",
          "333:             var sn = i[0];",
          "334:             if (sn == a0)",
          "335:                 return i[1].apply(null, args.slice(1));",
          "338:                 sub = i;",
          "342:             return sub[1].apply(null, args.slice(1));",
          "346:     for (i of cmdList)",
          "347:         if (i[0].length>len)",
          "348:             len = i[0].length;",
          "349:     for (i of cmdList)",
          "350:         emsg += format(\"  %-*s - %s\\n\", len, i[0], i[2]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Module.jsi||liManage.jsi": [
          "File: lib/Module.jsi -> liManage.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: require('Jsi', '2.4');",
          "7:     const options = { // Run or create a Jsi module.",
          "8:         output  :'',        // Override the output filename default of create + .jsi.",
          "9:         quiet   :false,     // No messages.",
          "10:         repo    :'https://jsish.org/afossil',        // Repo source for parent of subproject",
          "11:     };",
          "12:     var self = {",
          "13:         rootdir      :'',   // Root directory.",
          "",
          "[Removed Lines]",
          "5: function Module(args:array, conf:object=void) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:         File.chmod(out, 0755);",
          "27:     }",
          "30:     function sclone(app:string='pdq', name:string='') {",
          "31:         var ver;",
          "32:         if (Info.platform().platform == 'unix')",
          "33:             ver = exec('which fossil');",
          "34:         else",
          "36:         if (!ver)",
          "37:             throw 'install fossil first, eg. use \"sudo apt install fossil\" or \"sudo jsish -M getfossil\"';",
          "38:         var cnt = File.glob('*', {retCount:true});",
          "39:         if (cnt)",
          "40:             throw 'setup must be used in an empty directory';",
          "44:             throw 'sorry: already in open fossil: '+ver.split('\\n')[0];",
          "46:         var dname = File.tail(File.pwd());",
          "48:         if (!name)",
          "",
          "[Removed Lines]",
          "35:             ver = exec('fossil version', {noError:true});",
          "42:         if (File.exists('.fslckout')) {",
          "43:             ver = exec('fossil info', {noError:true});",
          "45:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:         var pfn = name+'.fossil';",
          "62:         if (url[0] == '/' && File.exists(url+'.fossil'))",
          "63:             url += '.fossil';",
          "65:         if (!self.quiet)",
          "66:             puts(ccmd);",
          "68:         if (!self.quiet)",
          "69:             puts(cval);",
          "70:         var db = new Sqlite(pfn);",
          "71:         var now = parseInt(strptime()/1000);",
          "73:             \"UPDATE config SET name='parent-project-name' WHERE name='project-name';\");",
          "74:         db.query(\"INSERT INTO config(name,mtime,value) VALUES('project-code',@now, lower(hex(randomblob(20))));\");",
          "75:         db.query(\"INSERT INTO config(name,mtime,value) VALUES('parent-project-url', @now,(SELECT value FROM config WHERE name == 'last-sync-url'));\");",
          "76:         db.query(\"INSERT INTO config(name,mtime,value)  VALUES('project-name', @now, @proj);\");",
          "77:         if (self.quiet)",
          "78:             return;",
          "82:             Jsi_CopyDir('/zvfs/lib/www', 'jsi');",
          "85:         var dfn = 'html/index.html';",
          "86:         if (!File.exists('index.html') && File.exists(dfn)) {",
          "87:             var idat = File.read(dfn);",
          "88:             idat = idat.map(['\"../', '\"']);",
          "89:             File.write('index.html', idat);",
          "90:         }",
          "92:         if (File.exists('main.jsi'))",
          "93:             puts('DONE! To finish setup run: \"jsish .\"');",
          "94:         else",
          "95:             puts('DONE! Change password with: fossil user password '+Util.getuser().user+' NEWPASS');",
          "96:     }",
          "100:         if (!url)",
          "102:         if (url[0] == \"'\" && url.length>3)",
          "103:             url = url.substr(1,url.length-3);",
          "105:         if (dif)",
          "106:             throw 'must run \"fossil commit\" first';",
          "108:     }",
          "110:     function jsonify(name) {",
          "",
          "[Removed Lines]",
          "64:         var ccmd = 'fossil clone '+url+' '+pfn;",
          "67:         var cval = exec(ccmd);",
          "72:         db.eval(\"UPDATE config SET name='parent-project-code' WHERE name='project-code';\"+",
          "79:         exec('fossil open '+pfn);",
          "80:         exec('fossil remote-url off');",
          "81:         if (!File.isdir('jsi')) {",
          "83:             exec('fossil add jsi');",
          "84:         }",
          "91:         exec('fossil commit -m sclone --no-warnings');",
          "98:     function supdate() {",
          "99:         var url = exec(`fossil sql \"SELECT value FROM config WHERE name = 'parent-project-url'\"`);",
          "101:             throw 'not a subproject';",
          "104:         var dif = exec('fossil diff');",
          "107:         return exec('fossil pull --from-parent-project '+url);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155:         return moduleRun(fn);",
          "156:     }",
          "158:     function createmod(fn:string, tmpname='Module') {",
          "159:         if (self.rootdir === '')",
          "160:             self.rootdir=Info.scriptDir();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "178:             console.printf(\"Created module '%s' in %s\\n\", pat, fn);",
          "179:     }",
          "191:     return Jsi_CmdTable(args, cmdList);",
          "192: }",
          "",
          "[Removed Lines]",
          "181:     var cmdList = [",
          "182:         [\"createmod\",   createmod,  \"Create a .jsi module from template\" ],",
          "183:         [\"es5lint\",     es5lint,    \"Perform lint check with ES6 features disabled\"],",
          "184:         [\"getfossil\",   getfossil,  \"Download fossil executable\"],",
          "185:         [\"jsonify\",     jsonify,    \"Normalize a json file\"],",
          "186:         [\"run\",         run,        \"Run a module\" ],",
          "187:         [\"sclone\",      sclone,     \"Clone a sub-project from fossil parent (pdq)\"],",
          "188:         [\"supdate\",     supdate,    \"Update a sub-project created with sclone: pulls changes\"]",
          "189:     ];",
          "194: module(Module);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Wget.jsi||liWget.jsi": [
          "File: lib/Wget.jsi -> liWget.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:             self.response += str;",
          "46:             return;",
          "47:         }",
          "51:     }",
          "53:     function WsClose(ws:userobj|null, id:number, isError:boolean) {",
          "",
          "[Removed Lines]",
          "48:         if (!self.fd)",
          "49:             self.fd = new Channel((self.O==='-'?\"stdout\":self.O), 'wb+');",
          "50:         self.fd.write(str);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/Zip.jsi||liZip.jsi": [
          "File: lib/Zip.jsi -> liZip.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:     function list(fname:string) {",
          "58:         fname = File.realpath(fname);",
          "59:         if (fname === Info.executable())",
          "60:             zdir = '/zvfs';",
          "61:         else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "127:         return create.apply(null, args);",
          "128:     }",
          "139:     var zdir, rc = 0;",
          "140:     if (!args || args.length < 1) {",
          "141:         usage('');",
          "",
          "[Removed Lines]",
          "130:     var cmdList = [",
          "131:         [\"create\",  create,  \"Create standalone executable\"],",
          "132:         [\"fuse\",    fuse,    \"Use .zip file to produce a standalone executable\"],",
          "133:         [\"list\",    list,    \"List files in zip\"],",
          "134:         [\"trunc\",   trunc,   \"Truncate zip files off of executable\"],",
          "135:         [\"unzip\",   unzip,   \"Unpack files from zip archive, optionally into dest dir\"],",
          "136:         [\"zip\",     zip,     \"Create zip File\"],",
          "137:         [\"zvfs\",    zvfs,    \"Add zvfs files from jsish to a standalone executable\"]",
          "138:     ];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/autoload.jsi||liautoload.jsi": [
          "File: lib/autoload.jsi -> liautoload.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: Jsi_Auto.Testing    = 'source(\"'+Info.scriptDir()+'/Testing.jsi\")';",
          "27: Jsi_Auto.Vfs        = 'source(\"'+Info.scriptDir()+'/Jsi_VFS.jsi\")';",
          "28: Jsi_Auto.Archive    = 'source(\"'+Info.scriptDir()+'/Archive.jsi\")';",
          "30: Jsi_Auto.Help       = 'source(\"'+Info.scriptDir()+'/Help.jsi\")';",
          "31: Jsi_Auto.DebugUI        = 'source(\"'+Info.scriptDir()+'/DebugUI/DebugUI.jsi\")';",
          "32: Jsi_Auto.SqliteUI       = 'source(\"'+Info.scriptDir()+'/SqliteUI/SqliteUI.jsi\")';",
          "",
          "[Removed Lines]",
          "29: Jsi_Auto.Module     = 'source(\"'+Info.scriptDir()+'/Module.jsi\")';",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/www/js/Jsish.js||liwww/js/Jsish.js": [
          "File: lib/www/js/Jsish.js -> liwww/js/Jsish.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "444:                         window.onerror = (vals[i]?errHandler:undefined);",
          "445:                         break;",
          "446:                     case 'interp':",
          "450:                         break;",
          "451:                 }",
          "452:                 if (jsi.config[i] !== null && tt !== (ti=gettype(vals[i])))",
          "",
          "[Removed Lines]",
          "447:                         if (vv.logOpts.Debug) Log.conf('debug', true);",
          "448:                         if (vv.logOpts.Trace) Log.conf('trace', true);",
          "449:                         if (vv.logOpts.Test)  Log.conf('test', true);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsi.h||src/jsi.h": [
          "File: src/jsi.h -> src/jsi.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define __JSI_H__",
          "5: #define JSI_VERSION_MAJOR   3",
          "9: #define JSI_VERSION (JSI_VERSION_MAJOR + ((Jsi_Number)JSI_VERSION_MINOR/100.0) + ((Jsi_Number)JSI_VERSION_RELEASE/10000.0))",
          "",
          "[Removed Lines]",
          "6: #define JSI_VERSION_MINOR   4",
          "7: #define JSI_VERSION_RELEASE 9",
          "",
          "[Added Lines]",
          "6: #define JSI_VERSION_MINOR   5",
          "7: #define JSI_VERSION_RELEASE 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "287:     uint reserved:11;           // Reserved for future use.",
          "288:     int exitCode:16;            // Call exit with this code.",
          "289:     Jsi_Interp* interp;         // Jsi_InterpNew sets this to let Jsi_Main use this interp.",
          "291: } Jsi_InterpOpts;",
          "",
          "[Removed Lines]",
          "290:     void *reserved2[8];         // Reserved for future",
          "",
          "[Added Lines]",
          "290:     const char *zhash;          // Zvfs sha code for appended zip files.",
          "291:     void *reserved2[7];         // Reserved for future",
          "",
          "---------------"
        ],
        "src/jsiCmds.c||src/jsiCmds.c": [
          "File: src/jsiCmds.c -> src/jsiCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1192: static char *url_decode(char *str, int *len, bool comp) {",
          "1195:   while (*pstr) {",
          "1196:     if (*pstr == '%') {",
          "1197:       if (pstr[1] && pstr[2]) {",
          "",
          "[Removed Lines]",
          "1193:   char *comps = \";,/?:@&=+$#\", cc;",
          "1194:   char *pstr = str, *buf = (char*)Jsi_Malloc(Jsi_Strlen(str) + 1), *pbuf = buf;",
          "",
          "[Added Lines]",
          "1193:   const char *comps = \";,/?:@&=+$#\";",
          "1194:   char cc = 0, *pstr = str, *buf = (char*)Jsi_Malloc(Jsi_Strlen(str) + 1), *pbuf = buf;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1495:             if (rc)",
          "1496:                 no = 0;",
          "1497:             restricted = 1;",
          "1498:         }",
          "1499:         if (no)",
          "1500:             return Jsi_LogError(\"no exec in safe mode\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1498:         } else if (interp->lockDown && !Jsi_Strcmp(interp->lockDown, \".\") && !Jsi_Strncmp(cp, \"fossil \", 7)) {",
          "1499:             no = 0;",
          "1500:             restricted = 1;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2757:             release = n;",
          "2758:         }",
          "2759:         snprintf(buf, sizeof(buf),",
          "2762:         return Jsi_JSONParse(interp, buf, ret, 0);",
          "2763:     }",
          "2764:     return JSI_OK;",
          "",
          "[Removed Lines]",
          "2760:             \"{major:%d, minor:%d, release:%d, verStr:\\\"%d.%d.%d\\\", version:%g}\",",
          "2761:             major, minor, release, major, minor, release, v);",
          "",
          "[Added Lines]",
          "2763:             \"{major:%d, minor:%d, release:%d, verStr:\\\"%d.%d.%d\\\", version:%g, zhash:\\\"%s\\\"}\",",
          "2764:             major, minor, release, major, minor, release, v, interp->opts.zhash);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4591:     uint i, n = 0, siz, anum = 0, acnt=0;",
          "4592:     Jsi_Value **arr, *oargs;",
          "4593:     Jsi_Obj *obj;",
          "4594:     const char *anam;",
          "4595:     bool oisMain = interp->isMain, isMain = jsi_isMain(interp);",
          "4596:     if (interp->isMain) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4597:     Jsi_Func *func;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4629:         rc = Jsi_LogError(\"unknown command: %s\", (mod?mod:\"\"));",
          "4630:         goto done;",
          "4631:     }",
          "4633:     if (!isMain && func->filePtr->fileName == interp->framePtr->filePtr->fileName) {",
          "4634:         interp->framePtr->filePtr->pkg->loadLine = interp->curIp->Line; // for backtrace.",
          "4635:         goto done;",
          "",
          "[Removed Lines]",
          "4632:     Jsi_Func *func = cmd->d.obj->d.fobj->func;",
          "",
          "[Added Lines]",
          "4636:     func = cmd->d.obj->d.fobj->func;",
          "",
          "---------------"
        ],
        "src/jsiEval.c||src/jsiEval.c": [
          "File: src/jsiEval.c -> src/jsiEval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "630:     jsi_OpCode *ip = (iPtr ? iPtr : interp->curIp);",
          "631:     if (!ip)",
          "632:         return;",
          "634:     if ((tc&jsi_callTraceFullPath)==0 && ((ff=Jsi_Strrchr(fname,'/'))))",
          "635:         fname = ff+1;",
          "636:     if (interp->traceHook)",
          "",
          "[Removed Lines]",
          "633:     const char *ff, *fname = ip->filePtr->fileName;",
          "",
          "[Added Lines]",
          "633:     const char *ff, *fname = (ip->filePtr?ip->filePtr->fileName:\"\");",
          "",
          "---------------"
        ],
        "src/jsiFileCmds.c||src/jsiFileCmds.c": [
          "File: src/jsiFileCmds.c -> src/jsiFileCmds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:         || (create && Jsi_InterpAccess(interp, fname, JSI_INTACCESS_CREATE) != JSI_OK))) \\",
          "53:         return Jsi_LogError(\"%s access denied by safe interp: %s\", writ?\"write\":\"read\", GSVal(fname));",
          "55: static char* getFileTypeCh(int mode, char smode[])",
          "56: {",
          "57:     char c = '-';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: static Jsi_RC jsi_SAFEACCESS(Jsi_Interp *interp, Jsi_Value *fname, bool write, bool create)",
          "56: {",
          "57:     SAFEACCESS(fname, write, create);",
          "58:     return JSI_OK;",
          "59: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98: {",
          "99:     int rc;",
          "100:     Jsi_StatBuf st;",
          "102:     int islstat = flags&1;",
          "103:     int isshort = flags&2;",
          "104:     if (islstat)",
          "",
          "[Removed Lines]",
          "101:     SAFEACCESS(fnam, 0, 1)",
          "",
          "[Added Lines]",
          "107:     SAFEACCESS(fnam, 0, 0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306:     return JSI_OK;",
          "307: }",
          "315: static Jsi_RC FileTempfileCmd(Jsi_Interp *interp, Jsi_Value *args, Jsi_Value *_this,",
          "316:     Jsi_Value **ret, Jsi_Func *funcPtr)",
          "",
          "[Removed Lines]",
          "309: static Jsi_RC jsi_SAFEACCESS(Jsi_Interp *interp, Jsi_Value *fname, bool write)",
          "310: {",
          "311:     SAFEACCESS(fname, write, 1);",
          "312:     return JSI_OK;",
          "313: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "327:     if (Jsi_InterpSafe(interp)) {",
          "328:         Jsi_Value *fname = Jsi_ValueNewStringConst(interp, templ, -1);",
          "329:         Jsi_IncrRefCount(interp, fname);",
          "331:         Jsi_DecrRefCount(interp, fname);",
          "332:         if (rc != JSI_OK)",
          "333:             return rc;",
          "",
          "[Removed Lines]",
          "330:         Jsi_RC rc = jsi_SAFEACCESS(interp, fname, 1);",
          "",
          "[Added Lines]",
          "331:         Jsi_RC rc = jsi_SAFEACCESS(interp, fname, 1, 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "347:     if (Jsi_InterpSafe(interp)) {",
          "348:         Jsi_Value *fname = Jsi_ValueNewStringConst(interp, name, -1);",
          "349:         Jsi_IncrRefCount(interp, fname);",
          "351:         Jsi_DecrRefCount(interp, fname);",
          "352:         if (rc != JSI_OK)",
          "353:             return rc;",
          "",
          "[Removed Lines]",
          "350:         Jsi_RC rc = jsi_SAFEACCESS(interp, fname, 1);",
          "",
          "[Added Lines]",
          "351:         Jsi_RC rc = jsi_SAFEACCESS(interp, fname, 1, 1);",
          "",
          "---------------"
        ],
        "src/jsiFilesys.c||src/jsiFilesys.c": [
          "File: src/jsiFilesys.c -> src/jsiFilesys.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:             || (Jsi_InterpAccess(interp, file, aflag) != JSI_OK",
          "525:                 && (aflag || !interp->opts.argv[0] || Jsi_Strcmp(fileName, Jsi_FileRealpathStr(interp, interp->opts.argv[0], pbuf))))",
          "526:             ) {",
          "529:             }",
          "530:         }",
          "531:         FILE *fp = fopen(fileName, Mode);",
          "",
          "[Removed Lines]",
          "527:                 Jsi_LogError(\"%s access denied: %s\", writ?\"write\":\"read\", fileName);",
          "528:                 goto done;",
          "",
          "[Added Lines]",
          "527:                 if (writ || Jsi_Strcmp(fileName, jsiIntData.execName)) {",
          "528:                     Jsi_LogError(\"%s access denied: %s\", writ?\"write\":\"read\", fileName);",
          "529:                     goto done;",
          "530:                 }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "618:     void *data;",
          "619:     int rc = 0;",
          "620:     const char *pathPtr = Jsi_ValueToString(interp, path, NULL);",
          "623:     Jsi_Filesystem *fsPtr = Jsi_FilesystemForPath(interp, path, &data);",
          "624:     if (fsPtr == &jsiFilesystem) {",
          "625:         rc = chdir(pathPtr);",
          "",
          "[Removed Lines]",
          "621:     if (interp->isSafe && Jsi_InterpAccess(interp, path, JSI_INTACCESS_READ) != JSI_OK)",
          "622:         return Jsi_LogError(\"read access denied\");",
          "",
          "[Added Lines]",
          "623:     if (interp->isSafe && Jsi_InterpAccess(interp, path, JSI_INTACCESS_READ) != JSI_OK)",
          "624:         return Jsi_LogError(\"read access denied: %s\", pathPtr);",
          "",
          "---------------"
        ],
        "src/jsiInterp.c||src/jsiInterp.c": [
          "File: src/jsiInterp.c -> src/jsiInterp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "788:           \"  -e CODE\\tEvaluate javascript and exit.\\n\"",
          "789:           \"  -h ?CMD?\\tHelp: show help for jsish or its commands.\\n\"",
          "790:           \"  -i MOD\\tInvoke named Module.\\n\"",
          "792:           \"  -s\\t\\tSafe: runs script in safe sub-interp.\\n\"",
          "793:           \"  -t\\t\\tTesting of scripts or directories of scripts with .js/.jsi extension.\\n\"",
          "794:           \"  -w\\t\\tWget: web client to download file from url.\\n\"",
          "",
          "[Removed Lines]",
          "791:           \"  -m\\t\\tModule utilities\\n\"",
          "",
          "[Added Lines]",
          "791:           \"  -m\\t\\tManagement operatoins and utilities\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "834:                 rc = Jsi_EvalString(interp, \"moduleRun('Jspp');\", JSI_EVAL_ISMAIN);",
          "835:                 break;",
          "836:             case 'm':",
          "838:                 break;",
          "839:             case 'i':",
          "840:                 if (argc <= 2)",
          "",
          "[Removed Lines]",
          "837:                 rc = Jsi_EvalString(interp, \"moduleRun('Module');\", JSI_EVAL_ISMAIN);",
          "",
          "[Added Lines]",
          "837:                 rc = Jsi_EvalString(interp, \"moduleRun('Manage');\", JSI_EVAL_ISMAIN);",
          "",
          "---------------"
        ],
        "src/jsiProto.c||src/jsiProto.c": [
          "File: src/jsiProto.c -> src/jsiProto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:         return Jsi_LogError(\"must call via Object.assign\");",
          "534:     Jsi_Value *v = Jsi_ValueArrayIndex(interp, args,0);",
          "536:         return Jsi_LogError(\"arg1: expected object\");",
          "537:     Jsi_Obj *obj = v->d.obj;",
          "538:     Jsi_RC rc = JSI_OK;",
          "",
          "[Removed Lines]",
          "535:     if (!v || !Jsi_ValueIsObjType(interp, v, JSI_VT_OBJECT))",
          "",
          "[Added Lines]",
          "535:     if (!v || !Jsi_ValueIsObjType(interp, v, JSI_OT_OBJECT))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "542:         Jsi_TreeEntry *tPtr;",
          "543:         Jsi_TreeSearch search;",
          "544:         Jsi_Value *vs = Jsi_ValueArrayIndex(interp, args, i);",
          "546:             return Jsi_LogError(\"arg%d: expected object\", i+1);",
          "547:         for (tPtr = Jsi_TreeSearchFirst(vs->d.obj->tree, &search, 0, NULL);",
          "548:             tPtr && rc == JSI_OK; tPtr = Jsi_TreeSearchNext(&search)) {",
          "",
          "[Removed Lines]",
          "545:         if (!vs || !Jsi_ValueIsObjType(interp, vs, JSI_VT_OBJECT))",
          "",
          "[Added Lines]",
          "545:         if (!vs || !Jsi_ValueIsObjType(interp, vs, JSI_OT_OBJECT))",
          "",
          "---------------"
        ],
        "src/jsiStubs.h||src/jsiStubs.h": [
          "File: src/jsiStubs.h -> src/jsiStubs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #endif",
          "10: #undef JSI_EXTENSION_INI",
          "11: #define JSI_EXTENSION_INI Jsi_Stubs *jsiStubsPtr = NULL;",
          "",
          "[Removed Lines]",
          "8: #define JSI_STUBS_MD5 \"71408ed876f077893cd984b2f9f21794\"",
          "",
          "[Added Lines]",
          "8: #define JSI_STUBS_MD5 \"66a604e16467a7a4ac605486b9ae23fc\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:     Jsi_TreeEntry*(*_Jsi_TreeSearchFirst)(Jsi_Tree *treePtr, Jsi_TreeSearch *searchPtr, int flags, const void *startKey);",
          "309:     Jsi_TreeEntry*(*_Jsi_TreeSearchNext)(Jsi_TreeSearch *searchPtr);",
          "310:     void(*_Jsi_TreeSearchDone)(Jsi_TreeSearch *searchPtr);",
          "312:     Jsi_TreeEntry*(*_Jsi_TreeSet)(Jsi_Tree *treePtr, const void *key, void *value);",
          "313:     void*(*_Jsi_TreeGet)(Jsi_Tree *treePtr, void *key, int flags);",
          "314:     bool(*_Jsi_TreeUnset)(Jsi_Tree *treePtr, void *key);",
          "",
          "[Removed Lines]",
          "311:     int(*_Jsi_TreeWalk)(Jsi_Tree* treePtr, Jsi_TreeWalkProc* callback, void *data, int flags);",
          "",
          "[Added Lines]",
          "311:     Jsi_RC(*_Jsi_TreeWalk)(Jsi_Tree* treePtr, Jsi_TreeWalkProc* callback, void *data, int flags);",
          "",
          "---------------"
        ],
        "src/jsiTree.c||src/jsiTree.c": [
          "File: src/jsiTree.c -> src/jsiTree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "826:     return true;",
          "827: }",
          "830:     uint epoch = treePtr->epoch;",
          "831:     if (hPtr == NULL) return JSI_OK;",
          "832:     if (hPtr->right != NULL) {",
          "",
          "[Removed Lines]",
          "829: static int tree_inorder(Jsi_Tree *treePtr, Jsi_TreeEntry *hPtr, Jsi_TreeWalkProc *callback, void *data) {",
          "",
          "[Added Lines]",
          "829: static Jsi_RC tree_inorder(Jsi_Tree *treePtr, Jsi_TreeEntry *hPtr, Jsi_TreeWalkProc *callback, void *data) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "844: }",
          "848:     uint epoch = treePtr->epoch;",
          "849:     if (hPtr == NULL) return JSI_OK;",
          "850:     if (callback(treePtr, hPtr, data) != JSI_OK || epoch != treePtr->epoch)",
          "",
          "[Removed Lines]",
          "847: static int tree_preorder(Jsi_Tree *treePtr, Jsi_TreeEntry *hPtr, Jsi_TreeWalkProc *callback, void *data) {",
          "",
          "[Added Lines]",
          "847: static Jsi_RC tree_preorder(Jsi_Tree *treePtr, Jsi_TreeEntry *hPtr, Jsi_TreeWalkProc *callback, void *data) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "861: }",
          "865:     uint epoch = treePtr->epoch;",
          "866:     if (hPtr == NULL) return JSI_OK;",
          "867:     if (hPtr->right != NULL) {",
          "",
          "[Removed Lines]",
          "864: static int tree_postorder(Jsi_Tree *treePtr, Jsi_TreeEntry *hPtr, Jsi_TreeWalkProc *callback, void *data) {",
          "",
          "[Added Lines]",
          "864: static Jsi_RC tree_postorder(Jsi_Tree *treePtr, Jsi_TreeEntry *hPtr, Jsi_TreeWalkProc *callback, void *data) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "878: }",
          "882:     void *data, int curlev, int level, int *cnt) {",
          "883:     uint epoch = treePtr->epoch;",
          "884:     if (hPtr == NULL) return JSI_OK;",
          "",
          "[Removed Lines]",
          "881: static int tree_levelorder(Jsi_Tree *treePtr, Jsi_TreeEntry *hPtr, Jsi_TreeWalkProc *callback,",
          "",
          "[Added Lines]",
          "881: static Jsi_RC tree_levelorder(Jsi_Tree *treePtr, Jsi_TreeEntry *hPtr, Jsi_TreeWalkProc *callback,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "900: }",
          "904:     Jsi_Interp *interp = treePtr->opts.interp;",
          "905:     JSI_NOTUSED(interp);",
          "906:     int n = 0, m = -1, lastm, order;",
          "",
          "[Removed Lines]",
          "903: int Jsi_TreeWalk(Jsi_Tree* treePtr, Jsi_TreeWalkProc* callback, void *data, int flags) {",
          "",
          "[Added Lines]",
          "903: Jsi_RC Jsi_TreeWalk(Jsi_Tree* treePtr, Jsi_TreeWalkProc* callback, void *data, int flags) {",
          "",
          "---------------"
        ],
        "src/jsiUtils.c||src/jsiUtils.c": [
          "File: src/jsiUtils.c -> src/jsiUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "984:     }",
          "985:     res = Jsi_Strdup(Jsi_DSValue(&dStr));",
          "986:     Jsi_DSFree(&dStr);",
          "988:     return res;",
          "989: }",
          "",
          "[Removed Lines]",
          "987:     printf(\"READ: %s\\n\", res);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsiWebSocket.c||src/jsiWebSocket.c": [
          "File: src/jsiWebSocket.c -> src/jsiWebSocket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1471:     bool isJsiWeb = 0, isSSI = 0, fallbackTry = 0;",
          "1472:     cmdPtr->stats.httpLast = now;",
          "1473:     Jsi_DString hStr = {};",
          "1476:     if (lws_hdr_total_length(wsi, WSI_TOKEN_POST_URI))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1474:     char extBuf[JSI_BUFSIZ], *cpde;",
          "1475:     bool isgzip = 0, native = 0;",
          "1476:     Jsi_Value *rdir;",
          "1477:     Jsi_DString sStr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1590:     }",
          "1591:     ext = Jsi_Strrchr(inPtr, '.');",
          "1594:     cmdPtr->curRoot = (rdir?Jsi_ValueString(cmdPtr->interp, rdir, NULL):\"./\");",
          "1596:     Jsi_DSInit(&sStr);",
          "1597:     jsi_wsPathAlias(interp, cmdPtr, &inPtr, &sStr);",
          "1598:     snprintf(buf, sizeof(buf), \"%s/%s\", cmdPtr->curRoot, inPtr);",
          "",
          "[Removed Lines]",
          "1593:     Jsi_Value *rdir = (pss->rootdir?pss->rootdir:cmdPtr->rootdir);",
          "1595:     Jsi_DString sStr;",
          "",
          "[Added Lines]",
          "1597:     rdir = (pss->rootdir?pss->rootdir:cmdPtr->rootdir);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1602:     Jsi_DSFree(&sStr);",
          "1603:     if (cmdPtr->debug>1)",
          "1604:         fprintf(stderr, \"FILE: %s in %s | %s\\n\", buf, cmdPtr->curRoot, Jsi_ValueString(interp, cmdPtr->rootdir, NULL));",
          "1606:     isJsiWeb = (cpde && cmdPtr->jsiFnPattern && Jsi_GlobMatch(cmdPtr->jsiFnPattern, cpde+1, 0));",
          "1608:     if (!ext || !ext[1])",
          "1609:         mime = \"text/html\";",
          "1610:     else {",
          "",
          "[Removed Lines]",
          "1605:     char extBuf[JSI_BUFSIZ], *cpde = Jsi_Strrchr(buf, '/');",
          "1607:     bool isgzip = 0;",
          "",
          "[Added Lines]",
          "1608:     cpde = Jsi_Strrchr(buf, '/');",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1806:     Jsi_IncrRefCount(interp, fname);",
          "1808:     Jsi_StatBuf jsb;",
          "1810:     if ((native && Jsi_InterpSafe(interp) && Jsi_InterpAccess(interp, fname, JSI_INTACCESS_READ) != JSI_OK) ||",
          "1811:         (Jsi_Stat(interp, fname, &jsb) || (jsb.st_size<=0 && !S_ISDIR(jsb.st_mode)))) {",
          "1812: nofile:",
          "",
          "[Removed Lines]",
          "1809:     bool native = Jsi_FSNative(interp, fname);",
          "",
          "[Added Lines]",
          "1811:     native = Jsi_FSNative(interp, fname);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1980:         return JSI_OK;",
          "1981:     vargs[n++] = (cmdPtr->deleted || !cmdPtr->fobj?Jsi_ValueNewNull(interp):Jsi_ValueNewObj(interp, cmdPtr->fobj));",
          "1982:     vargs[n++] = Jsi_ValueNewNumber(interp, (Jsi_Number)(pss?pss->wid:0));",
          "1983:     if (isClose)",
          "1984:         vargs[n++] = Jsi_ValueNewBoolean(interp, isError);",
          "1985:     else {",
          "1986:         if (nlen<=0)",
          "1987:             return JSI_OK;",
          "1988:         vargs[n++]  = Jsi_ValueNewBlob(interp, (uchar*)inPtr, nlen);",
          "1990:             Jsi_LogInfo(\"WS-RECV: %s\", inPtr);",
          "1991:         Jsi_LogTraceExt(\"WS-RECV: %s\", inPtr);",
          "1992:     }",
          "",
          "[Removed Lines]",
          "1989:         if ((cmdPtr->echo||(pss && pss->echo)) && inPtr)",
          "",
          "[Added Lines]",
          "1985:     int echo = (cmdPtr->echo||(pss && pss->echo));",
          "1992:         if (echo && inPtr)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1996:     Jsi_Value *ret = Jsi_ValueNew1(interp);",
          "1997:     Jsi_RC rc = Jsi_FunctionInvoke(interp, func, vpargs, &ret, NULL);",
          "1998:     if (rc == JSI_OK && Jsi_ValueIsUndef(interp, ret)==0 && !isClose) {",
          "2000:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2001:     if (rc != JSI_OK && echo && !Jsi_InterpGone(interp))",
          "2002:         Jsi_LogWarn(\"WS-RECV ERROR\");",
          "",
          "---------------"
        ],
        "src/jsiZvfs.c||src/jsiZvfs.c": [
          "File: src/jsiZvfs.c -> src/jsiZvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:         p->nByteCompr = INT32(zBuf, 20);",
          "353:         p->nByte = INT32(zBuf, 24);",
          "354:         p->nExtra = INT32(zBuf, 28);",
          "357:         if (nFile < 0)",
          "358:             break;",
          "",
          "[Removed Lines]",
          "355:         p->iCRC = INT32(zBuf, 32);",
          "",
          "[Added Lines]",
          "355:         p->iCRC = INT32(zBuf, 16);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1623:     Jsi_Obj *sobj;",
          "1624:     Jsi_Value *sval;",
          "1627:     chan = Jsi_Open(interp, Filename, \"rb\");",
          "1628:     if (chan==0)",
          "1629:         return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "1626:     Jsi_Value *Filename = Jsi_ValueArrayIndex(interp, args, 0);;",
          "",
          "[Added Lines]",
          "1626:     Jsi_Value *Filename = Jsi_ValueArrayIndex(interp, args, 0);",
          "1627:     if (!Filename)",
          "1628:         Filename = jsiIntData.execValue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1637:     Jsi_ValueMakeArrayObject(interp, ret, nobj);",
          "1638:     sobj = Jsi_ObjNew(interp);",
          "1639:     sval = Jsi_ValueMakeArrayObject(interp, NULL, sobj);",
          "1641:     int i;",
          "1642:     for (i=0; keys[i]; i++)",
          "1643:         Jsi_ObjArrayAdd(interp, sobj, Jsi_ValueNewStringKey(interp, keys[i]));",
          "",
          "[Removed Lines]",
          "1640:     static const char *keys[] = {\"Name\", \"Special\", \"Offset\", \"Bytes\", \"BytesCompressed\", 0 };",
          "",
          "[Added Lines]",
          "1642:     static const char *keys[] = {\"Name\", \"Special\", \"Offset\", \"Bytes\", \"BytesCompressed\", \"CRC\", 0 };",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1654:         Jsi_ObjArrayAdd(interp, sobj, Jsi_ValueNewNumber(interp, (Jsi_Number)pList->iOffset));",
          "1655:         Jsi_ObjArrayAdd(interp, sobj, Jsi_ValueNewNumber(interp, (Jsi_Number)pList->nByte));",
          "1656:         Jsi_ObjArrayAdd(interp, sobj, Jsi_ValueNewNumber(interp, (Jsi_Number)pList->nByteCompr));",
          "1657:         pNext = pList->pNext;",
          "1658:         Jsi_Free((char*)pList);",
          "1659:         pList = pNext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1659:         char sbuf[100];",
          "1660:         snprintf(sbuf, sizeof(sbuf), \"%x\", pList->iCRC);",
          "1661:         Jsi_ObjArrayAdd(interp, sobj, Jsi_ValueNewStringDup(interp, sbuf));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2168:     int zipStart;",
          "2170:     Jsi_Value *Archive = Jsi_ValueArrayIndex(interp, args, 0);",
          "2171:     chan = Jsi_Open(interp, Archive, \"rb\");",
          "2172:     if( chan==0 ) return JSI_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2176:     if (!Archive)",
          "2177:         Archive = jsiIntData.execValue;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2349: static Jsi_CmdSpec zvfsCmds[] = {",
          "2350:     { \"append\",     ZvfsAppendCmd,      2, -1, \"archive:string, filelist:array, path:string|null=void, filelist2:array=void, path2:string|null=void, ...\",  .help=\"Like 'create()', but appends to an existing archive (with no dup checking)\", .retType=(uint)JSI_TT_VOID },",
          "2351:     { \"create\",     ZvfsCreateCmd,      2, -1, \"archive:string, filelist:array, path:string|null=void, filelist2:array=void, path2:string|null=void, ...\",  .help=\"Create a zip with the given files in prefix path\", .retType=(uint)JSI_TT_VOID, .flags=0, .info=FN_create },",
          "2353:     { \"mount\",      ZvfsMountCmd,       1,  2, \"archive:string, mountdir:string=void\",  .help=\"Mount zip on mount point\", .retType=(uint)JSI_TT_STRING, .flags=0, .info=FN_mount },",
          "2354:     { \"names\",      ZvfsNamesCmd,       0,  1, \"mountdir:string=void\",  .help=\"Return all zvfs mounted zips, or archive for specified mount\", .retType=(uint)JSI_TT_ARRAY, .flags=0, .info=FN_info },",
          "2356:     { \"stat\",       ZvfsStatCmd,        1,  1, \"filename:string\",  .help=\"Return details on file in zvfs mount\", .retType=(uint)JSI_TT_OBJECT, .flags=0, .info=FN_stat },",
          "2357:     { \"truncate\",   ZvfsTruncateCmd,    1,  2, \"archive:string, noerror:boolean=false\",  .help=\"Truncate zip data from archive\", .retType=(uint)JSI_TT_NUMBER, .flags=0, .info=FN_truncate },",
          "2358:     { \"unmount\",    ZvfsUnmountCmd,     1,  1, \"archive:string\",  .help=\"Unmount zip\", .retType=(uint)JSI_TT_VOID },",
          "",
          "[Removed Lines]",
          "2352:     { \"list\",       ZvfsListCmd,        1,  1, \"archive:string\",  .help=\"List files in archive\", .retType=(uint)JSI_TT_ARRAY, .flags=0, .info=FN_list },",
          "2355:     { \"offset\",     ZvfsOffsetCmd,      1,  1, \"archive:string\",  .help=\"Return the start offset of zip data\", .retType=(uint)JSI_TT_NUMBER, .flags=0, .info=FN_truncate },",
          "",
          "[Added Lines]",
          "2359:     { \"list\",       ZvfsListCmd,        0,  1, \"archive:string=void\",  .help=\"List files in archive\", .retType=(uint)JSI_TT_ARRAY, .flags=0, .info=FN_list },",
          "2362:     { \"offset\",     ZvfsOffsetCmd,      0,  1, \"archive:string=void\",  .help=\"Return the start offset of zip data\", .retType=(uint)JSI_TT_NUMBER, .flags=0, .info=FN_truncate },",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         }",
          "42:     }",
          "43:     Jsi_InterpOpts opts = {.argc=argc, .argv=argv};",
          "44:     Jsi_Interp *interp = Jsi_Main(&opts);",
          "45:     if (interp)",
          "46:         Jsi_InterpDelete(interp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "44: #ifdef JSI__ZHASH",
          "45:     opts.zhash = JSI__ZHASH;",
          "46: #endif",
          "",
          "---------------"
        ],
        "tools/protos.jsi||tools/protos.jsi": [
          "File: tools/protos.jsi -> tools/protos.jsi",
          "--- Hunk 1 ---",
          "[Context before]",
          "350: Zvfs.prototype.create = function(archive:string, filelist:array, path:string|null=void, filelist2:array=void, path2:string|null=void, ...):void {};",
          "351: Zvfs.prototype.deflate = function(data:string):string {};",
          "352: Zvfs.prototype.inflate = function(data:string):string {};",
          "354: Zvfs.prototype.mount = function(archive:string, mountdir:string=void):string {};",
          "355: Zvfs.prototype.names = function(mountdir:string=void):array {};",
          "357: Zvfs.prototype.stat = function(filename:string):object {};",
          "358: Zvfs.prototype.truncate = function(archive:string, noerror:boolean=false):number {};",
          "359: Zvfs.prototype.unmount = function(archive:string):void {};",
          "",
          "[Removed Lines]",
          "353: Zvfs.prototype.list = function(archive:string):array {};",
          "356: Zvfs.prototype.offset = function(archive:string):number {};",
          "",
          "[Added Lines]",
          "353: Zvfs.prototype.list = function(archive:string=void):array {};",
          "356: Zvfs.prototype.offset = function(archive:string=void):number {};",
          "",
          "---------------"
        ]
      }
    }
  ]
}