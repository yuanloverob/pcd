{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "99744fa4ab7696f090e6fd8615b12e9b7e9792e6",
      "candidate_info": {
        "commit_hash": "99744fa4ab7696f090e6fd8615b12e9b7e9792e6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/99744fa4ab7696f090e6fd8615b12e9b7e9792e6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/backup.c",
          "src/btree.c",
          "src/btree.h",
          "src/btreeInt.h",
          "src/main.c",
          "src/pragma.c",
          "src/prepare.c",
          "src/sqlite.h.in",
          "src/test1.c",
          "src/vacuum.c",
          "src/vdbe.c",
          "src/vdbeaux.c",
          "test/trans.test"
        ],
        "message": "Add support for the sqlite3_txn_state() interface.\n\nFossilOrigin-Name: ad195e3dd89d0f33b50070c18fb8f43c4eb24162515dfdd7c04d9e7d96b902a2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/backup.c||src/backup.c",
          "src/btree.c||src/btree.c",
          "src/btree.h||src/btree.h",
          "src/btreeInt.h||src/btreeInt.h",
          "src/main.c||src/main.c",
          "src/pragma.c||src/pragma.c",
          "src/prepare.c||src/prepare.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test1.c||src/test1.c",
          "src/vacuum.c||src/vacuum.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/trans.test||test/trans.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8787417ec1da8071d84c6ff0d7a90b5fd458ab6baba871327f36bc4e1bceca61",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:     sqlite3_snprintf(sizeof(zErr),zErr, \"cannot detach database %s\", zName);",
          "294:     goto detach_error;",
          "295:   }",
          "297:     sqlite3_snprintf(sizeof(zErr),zErr, \"database %s is locked\", zName);",
          "298:     goto detach_error;",
          "299:   }",
          "",
          "[Removed Lines]",
          "296:   if( sqlite3BtreeIsInReadTrans(pDb->pBt) || sqlite3BtreeIsInBackup(pDb->pBt) ){",
          "",
          "[Added Lines]",
          "296:   if( sqlite3BtreeTxnState(pDb->pBt)!=SQLITE_TXN_NONE",
          "297:    || sqlite3BtreeIsInBackup(pDb->pBt)",
          "298:   ){",
          "",
          "---------------"
        ],
        "src/backup.c||src/backup.c": [
          "File: src/backup.c -> src/backup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125: static int checkReadTransaction(sqlite3 *db, Btree *p){",
          "127:     sqlite3ErrorWithMsg(db, SQLITE_ERROR, \"destination database is in use\");",
          "128:     return SQLITE_ERROR;",
          "129:   }",
          "",
          "[Removed Lines]",
          "126:   if( sqlite3BtreeIsInReadTrans(p) ){",
          "",
          "[Added Lines]",
          "126:   if( sqlite3BtreeTxnState(p)!=SQLITE_TXN_NONE ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "358:       rc = sqlite3BtreeBeginTrans(p->pSrc, 0, 0);",
          "359:       bCloseTrans = 1;",
          "360:     }",
          "",
          "[Removed Lines]",
          "357:     if( rc==SQLITE_OK && 0==sqlite3BtreeIsInReadTrans(p->pSrc) ){",
          "",
          "[Added Lines]",
          "357:     if( rc==SQLITE_OK && SQLITE_TXN_NONE==sqlite3BtreeTxnState(p->pSrc) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "726:   sqlite3BtreeEnter(pTo);",
          "727:   sqlite3BtreeEnter(pFrom);",
          "730:   pFd = sqlite3PagerFile(sqlite3BtreePager(pTo));",
          "731:   if( pFd->pMethods ){",
          "732:     i64 nByte = sqlite3BtreeGetPageSize(pFrom)*(i64)sqlite3BtreeLastPage(pFrom);",
          "",
          "[Removed Lines]",
          "729:   assert( sqlite3BtreeIsInTrans(pTo) );",
          "",
          "[Added Lines]",
          "729:   assert( sqlite3BtreeTxnState(pTo)==SQLITE_TXN_WRITE );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "762:     sqlite3PagerClearCache(sqlite3BtreePager(b.pDest));",
          "763:   }",
          "766: copy_finished:",
          "767:   sqlite3BtreeLeave(pFrom);",
          "768:   sqlite3BtreeLeave(pTo);",
          "",
          "[Removed Lines]",
          "765:   assert( sqlite3BtreeIsInTrans(pTo)==0 );",
          "",
          "[Added Lines]",
          "765:   assert( sqlite3BtreeTxnState(pTo)!=SQLITE_TXN_WRITE );",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10310: }",
          "10316:   assert( p==0 || sqlite3_mutex_held(p->db->mutex) );",
          "10318: }",
          "10320: #ifndef SQLITE_OMIT_WAL",
          "",
          "[Removed Lines]",
          "10315: int sqlite3BtreeIsInTrans(Btree *p){",
          "10317:   return (p && (p->inTrans==TRANS_WRITE));",
          "",
          "[Added Lines]",
          "10316: int sqlite3BtreeTxnState(Btree *p){",
          "10318:   return p ? p->inTrans : 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10343: #endif",
          "10354: int sqlite3BtreeIsInBackup(Btree *p){",
          "10355:   assert( p );",
          "10356:   assert( sqlite3_mutex_held(p->db->mutex) );",
          "",
          "[Removed Lines]",
          "10348: int sqlite3BtreeIsInReadTrans(Btree *p){",
          "10349:   assert( p );",
          "10350:   assert( sqlite3_mutex_held(p->db->mutex) );",
          "10351:   return p->inTrans!=TRANS_NONE;",
          "10352: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.h||src/btree.h": [
          "File: src/btree.h -> src/btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: int sqlite3BtreeRollback(Btree*,int,int);",
          "86: int sqlite3BtreeBeginStmt(Btree*,int);",
          "87: int sqlite3BtreeCreateTable(Btree*, Pgno*, int flags);",
          "90: int sqlite3BtreeIsInBackup(Btree*);",
          "91: void *sqlite3BtreeSchema(Btree *, int, void(*)(void *));",
          "92: int sqlite3BtreeSchemaLocked(Btree *pBtree);",
          "",
          "[Removed Lines]",
          "88: int sqlite3BtreeIsInTrans(Btree*);",
          "89: int sqlite3BtreeIsInReadTrans(Btree*);",
          "",
          "[Added Lines]",
          "88: int sqlite3BtreeTxnState(Btree*);",
          "",
          "---------------"
        ],
        "src/btreeInt.h||src/btreeInt.h": [
          "File: src/btreeInt.h -> src/btreeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "368: #define TRANS_NONE  0",
          "369: #define TRANS_READ  1",
          "370: #define TRANS_WRITE 2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375: #if TRANS_NONE!=SQLITE_TXN_NONE",
          "376: # error wrong numeric code for no-transaction",
          "377: #endif",
          "378: #if TRANS_READ!=SQLITE_TXN_READ",
          "379: # error wrong numeric code for read-transaction",
          "380: #endif",
          "381: #if TRANS_WRITE!=SQLITE_TXN_WRITE",
          "382: # error wrong numeric code for write-transaction",
          "383: #endif",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "897:   sqlite3BtreeEnterAll(db);",
          "898:   for(i=0; rc==SQLITE_OK && i<db->nDb; i++){",
          "899:     Btree *pBt = db->aDb[i].pBt;",
          "901:       Pager *pPager = sqlite3BtreePager(pBt);",
          "902:       rc = sqlite3PagerFlush(pPager);",
          "903:       if( rc==SQLITE_BUSY ){",
          "",
          "[Removed Lines]",
          "900:     if( pBt && sqlite3BtreeIsInTrans(pBt) ){",
          "",
          "[Added Lines]",
          "900:     if( pBt && sqlite3BtreeTxnState(pBt)==SQLITE_TXN_WRITE ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1241:   return SQLITE_OK;",
          "1242: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1248: int sqlite3_txn_state(sqlite3 *db, const char *zSchema){",
          "1249:   int iDb, nDb;",
          "1250:   int iTxn = -1;",
          "1251: #ifdef SQLITE_ENABLE_API_ARMOR",
          "1252:   if( !sqlite3SafetyCheckOk(db) ){",
          "1253:     (void)SQLITE_MISUSE_BKPT;",
          "1254:     return -1;",
          "1255:   }",
          "1256: #endif",
          "1257:   sqlite3_mutex_enter(db->mutex);",
          "1258:   if( zSchema ){",
          "1259:     nDb = iDb = sqlite3FindDbName(db, zSchema);",
          "1260:     if( iDb<0 ) nDb--;",
          "1261:   }else{",
          "1262:     iDb = 0;",
          "1263:     nDb = db->nDb-1;",
          "1264:   }",
          "1265:   for(; iDb<=nDb; iDb++){",
          "1266:     Btree *pBt = db->aDb[iDb].pBt;",
          "1267:     int x = pBt!=0 ? sqlite3BtreeTxnState(pBt) : SQLITE_TXN_NONE;",
          "1268:     if( x>iTxn ) iTxn = x;",
          "1269:   }",
          "1270:   sqlite3_mutex_leave(db->mutex);",
          "1271:   return iTxn;",
          "1272: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1401:   for(i=0; i<db->nDb; i++){",
          "1402:     Btree *p = db->aDb[i].pBt;",
          "1403:     if( p ){",
          "1405:         inTrans = 1;",
          "1406:       }",
          "1407:       sqlite3BtreeRollback(p, tripCode, !schemaChange);",
          "",
          "[Removed Lines]",
          "1404:       if( sqlite3BtreeIsInTrans(p) ){",
          "",
          "[Added Lines]",
          "1434:       if( sqlite3BtreeTxnState(p)==SQLITE_TXN_WRITE ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4440:     int iDb = sqlite3FindDbName(db, zDb);",
          "4441:     if( iDb==0 || iDb>1 ){",
          "4442:       Btree *pBt = db->aDb[iDb].pBt;",
          "4444:         rc = sqlite3BtreeBeginTrans(pBt, 0, 0);",
          "4445:         if( rc==SQLITE_OK ){",
          "4446:           rc = sqlite3PagerSnapshotGet(sqlite3BtreePager(pBt), ppSnapshot);",
          "",
          "[Removed Lines]",
          "4443:       if( 0==sqlite3BtreeIsInTrans(pBt) ){",
          "",
          "[Added Lines]",
          "4473:       if( SQLITE_TXN_WRITE!=sqlite3BtreeTxnState(pBt) ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4476:     iDb = sqlite3FindDbName(db, zDb);",
          "4477:     if( iDb==0 || iDb>1 ){",
          "4478:       Btree *pBt = db->aDb[iDb].pBt;",
          "4480:         Pager *pPager = sqlite3BtreePager(pBt);",
          "4481:         int bUnlock = 0;",
          "4483:           if( db->nVdbeActive==0 ){",
          "4484:             rc = sqlite3PagerSnapshotCheck(pPager, pSnapshot);",
          "4485:             if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "4479:       if( sqlite3BtreeIsInTrans(pBt)==0 ){",
          "4482:         if( sqlite3BtreeIsInReadTrans(pBt) ){",
          "",
          "[Added Lines]",
          "4509:       if( sqlite3BtreeTxnState(pBt)!=SQLITE_TXN_WRITE ){",
          "4512:         if( sqlite3BtreeTxnState(pBt)!=SQLITE_TXN_NONE ){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4528:   iDb = sqlite3FindDbName(db, zDb);",
          "4529:   if( iDb==0 || iDb>1 ){",
          "4530:     Btree *pBt = db->aDb[iDb].pBt;",
          "4532:       rc = sqlite3BtreeBeginTrans(pBt, 0, 0);",
          "4533:       if( rc==SQLITE_OK ){",
          "4534:         rc = sqlite3PagerSnapshotRecover(sqlite3BtreePager(pBt));",
          "",
          "[Removed Lines]",
          "4531:     if( 0==sqlite3BtreeIsInReadTrans(pBt) ){",
          "",
          "[Added Lines]",
          "4561:     if( SQLITE_TXN_NONE==sqlite3BtreeTxnState(pBt) ){",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: static int invalidateTempStorage(Parse *pParse){",
          "132:   sqlite3 *db = pParse->db;",
          "133:   if( db->aDb[1].pBt!=0 ){",
          "135:       sqlite3ErrorMsg(pParse, \"temporary storage cannot be changed \"",
          "136:         \"from within a transaction\");",
          "137:       return SQLITE_ERROR;",
          "",
          "[Removed Lines]",
          "134:     if( !db->autoCommit || sqlite3BtreeIsInReadTrans(db->aDb[1].pBt) ){",
          "",
          "[Added Lines]",
          "134:     if( !db->autoCommit",
          "135:      || sqlite3BtreeTxnState(db->aDb[1].pBt)!=SQLITE_TXN_NONE",
          "136:     ){",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:   sqlite3BtreeEnter(pDb->pBt);",
          "244:     rc = sqlite3BtreeBeginTrans(pDb->pBt, 0, 0);",
          "245:     if( rc!=SQLITE_OK ){",
          "246:       sqlite3SetString(pzErrMsg, db, sqlite3ErrStr(rc));",
          "",
          "[Removed Lines]",
          "243:   if( !sqlite3BtreeIsInReadTrans(pDb->pBt) ){",
          "",
          "[Added Lines]",
          "243:   if( sqlite3BtreeTxnState(pDb->pBt)==SQLITE_TXN_NONE ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "487:       rc = sqlite3BtreeBeginTrans(pBt, 0, 0);",
          "488:       if( rc==SQLITE_NOMEM || rc==SQLITE_IOERR_NOMEM ){",
          "489:         sqlite3OomFault(db);",
          "",
          "[Removed Lines]",
          "486:     if( !sqlite3BtreeIsInReadTrans(pBt) ){",
          "",
          "[Added Lines]",
          "486:     if( sqlite3BtreeTxnState(pBt)==SQLITE_TXN_NONE ){",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6187: int sqlite3_db_readonly(sqlite3 *db, const char *zDbName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6205: int sqlite3_txn_state(sqlite3*,const char *zSchema);",
          "6236: #define SQLITE_TXN_NONE  0",
          "6237: #define SQLITE_TXN_READ  1",
          "6238: #define SQLITE_TXN_WRITE 2",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7749:   Tcl_SetObjResult(interp, Tcl_NewIntObj(v));",
          "7750:   return TCL_OK;",
          "7751: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7759: static int SQLITE_TCLAPI test_sqlite3_txn_state(",
          "7760:   void *clientData,",
          "7761:   Tcl_Interp *interp,",
          "7762:   int objc,",
          "7763:   Tcl_Obj *CONST objv[]",
          "7764: ){",
          "7765:   sqlite3 *db;",
          "7766:   const char *zSchema;",
          "7767:   int iTxn;",
          "7769:   if( objc!=2 && objc!=3 ){",
          "7770:     Tcl_WrongNumArgs(interp, 1, objv, \"DB ?SCHEMA?\");",
          "7771:     return TCL_ERROR;",
          "7772:   }",
          "7773:   if( getDbPointer(interp, Tcl_GetString(objv[1]), &db) ) return TCL_ERROR;",
          "7774:   zSchema = objc==3 ? Tcl_GetString(objv[2]) : 0;",
          "7775:   iTxn = sqlite3_txn_state(db, zSchema);",
          "7776:   Tcl_SetObjResult(interp, Tcl_NewIntObj(iTxn));",
          "7777:   return TCL_OK;",
          "7778: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7985:      void *clientData;",
          "7986:   } aObjCmd[] = {",
          "7987:      { \"sqlite3_db_config\",             test_sqlite3_db_config, 0 },",
          "7988:      { \"bad_behavior\",                  test_bad_behavior,  (void*)&iZero },",
          "7989:      { \"register_dbstat_vtab\",          test_register_dbstat_vtab  },",
          "7990:      { \"sqlite3_connection_pointer\",    get_sqlite_pointer, 0 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8015:      { \"sqlite3_txn_state\",             test_sqlite3_txn_state, 0 },",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:     };",
          "346:     for(i=0; i<ArraySize(aCopy); i+=2){",
          "",
          "[Removed Lines]",
          "342:     assert( 1==sqlite3BtreeIsInTrans(pTemp) );",
          "343:     assert( pOut!=0 || 1==sqlite3BtreeIsInTrans(pMain) );",
          "",
          "[Added Lines]",
          "342:     assert( SQLITE_TXN_WRITE==sqlite3BtreeTxnState(pTemp) );",
          "343:     assert( pOut!=0 || SQLITE_TXN_WRITE==sqlite3BtreeTxnState(pMain) );",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3546:      && pOp->p2",
          "3547:      && (db->autoCommit==0 || db->nVdbeRead>1)",
          "3548:     ){",
          "3550:       if( p->iStatement==0 ){",
          "3551:         assert( db->nStatement>=0 && db->nSavepoint>=0 );",
          "3552:         db->nStatement++;",
          "",
          "[Removed Lines]",
          "3549:       assert( sqlite3BtreeIsInTrans(pBt) );",
          "",
          "[Added Lines]",
          "3549:       assert( sqlite3BtreeTxnState(pBt)==SQLITE_TXN_WRITE );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7042:       if( rc==SQLITE_OK ){",
          "7043:         rc = sqlite3BtreeSetVersion(pBt, (eNew==PAGER_JOURNALMODE_WAL ? 2 : 1));",
          "7044:       }",
          "",
          "[Removed Lines]",
          "7041:       assert( sqlite3BtreeIsInTrans(pBt)==0 );",
          "",
          "[Added Lines]",
          "7041:       assert( sqlite3BtreeTxnState(pBt)!=SQLITE_TXN_WRITE );",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2664:   for(i=0; rc==SQLITE_OK && i<db->nDb; i++){",
          "2665:     Btree *pBt = db->aDb[i].pBt;",
          "",
          "[Removed Lines]",
          "2666:     if( sqlite3BtreeIsInTrans(pBt) ){",
          "",
          "[Added Lines]",
          "2666:     if( sqlite3BtreeTxnState(pBt)==SQLITE_TXN_WRITE ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2799:     for(i=0; i<db->nDb; i++){",
          "2800:       Btree *pBt = db->aDb[i].pBt;",
          "2802:         char const *zFile = sqlite3BtreeGetJournalname(pBt);",
          "2803:         if( zFile==0 ){",
          "",
          "[Removed Lines]",
          "2801:       if( sqlite3BtreeIsInTrans(pBt) ){",
          "",
          "[Added Lines]",
          "2801:       if( sqlite3BtreeTxnState(pBt)==SQLITE_TXN_WRITE ){",
          "",
          "---------------"
        ],
        "test/trans.test||test/trans.test": [
          "File: test/trans.test -> test/trans.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is database locks.",
          "13: #",
          "17: set testdir [file dirname $argv0]",
          "",
          "[Removed Lines]",
          "14: # $Id: trans.test,v 1.41 2009/04/28 16:37:59 danielk1977 Exp $",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:     SELECT b FROM two ORDER BY a;",
          "40:   }",
          "41: } {I V X}",
          "42: do_test trans-1.9 {",
          "43:   sqlite3 altdb test.db",
          "44:   execsql {SELECT b FROM one ORDER BY a} altdb",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: do_test trans-1.2.1 {",
          "42:   sqlite3_txn_state db",
          "43: } {0}",
          "44: do_test trans-1.2.2 {",
          "45:   sqlite3_txn_state db main",
          "46: } {0}",
          "47: do_test trans-1.2.3 {",
          "48:   sqlite3_txn_state db temp",
          "49: } {0}",
          "50: do_test trans-1.2.4 {",
          "51:   sqlite3_txn_state db no-such-schema",
          "52: } {-1}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:   set v [catch {execsql {BEGIN}} msg]",
          "56:   lappend v $msg",
          "57: } {0 {}}",
          "58: do_test trans-2.2 {",
          "59:   set v [catch {execsql {END}} msg]",
          "60:   lappend v $msg",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: do_test trans-2.1b {",
          "71:   sqlite3_txn_state db",
          "72: } {0}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:     SELECT a FROM one ORDER BY a;",
          "96:   }",
          "97: } {1 2 3}",
          "98: do_test trans-3.2 {",
          "99:   catchsql {",
          "100:     SELECT a FROM two ORDER BY a;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113: do_test trans-3.1b {",
          "114:   sqlite3_txn_state db",
          "115: } {2}",
          "116: do_test trans-3.1c {",
          "117:   sqlite3_txn_state db main",
          "118: } {2}",
          "119: do_test trans-3.1d {",
          "120:   sqlite3_txn_state db temp",
          "121: } {0}",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139: do_test trans-3.10 {",
          "140:   execsql {END TRANSACTION}",
          "141: } {}",
          "143: do_test trans-3.11 {",
          "144:   set v [catch {execsql {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: do_test trans-3.10b {",
          "168:   sqlite3_txn_state db",
          "169: } {0}",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "252:   execsql {BEGIN TRANSACTION}",
          "253:   execsql {SELECT name FROM sqlite_master WHERE type='table' ORDER BY name}",
          "254: } {}",
          "255: do_test trans-5.3 {",
          "256:   execsql {CREATE TABLE one(a text, b int)}",
          "257:   execsql {SELECT name FROM sqlite_master WHERE type='table' ORDER BY name}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284: do_test trans-5.2b {",
          "285:   sqlite3_txn_state db",
          "286: } {1}",
          "287: do_test trans-5.2c {",
          "288:   sqlite3_txn_state db main",
          "289: } {1}",
          "290: do_test trans-5.2d {",
          "291:   sqlite3_txn_state db temp",
          "292: } {0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8c5163a697789879f46d6b5db9a99d08d6ccb343",
      "candidate_info": {
        "commit_hash": "8c5163a697789879f46d6b5db9a99d08d6ccb343",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8c5163a697789879f46d6b5db9a99d08d6ccb343",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h",
          "src/vdbeaux.c",
          "src/vdbevtab.c"
        ],
        "message": "The bytecode() function now runs and sometimes works, but it untested and there are known problems.\n\nFossilOrigin-Name: 6819b86eb2de516c445655a83f9b2ba5ae0bff660cffaf84f1345d9be79b051e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbevtab.c||src/vdbevtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aee1c12f4227cea9e8c6295cee3ec11797422c31b48c9468f176eb52f8261fe8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #if !defined(SQLITE_OMIT_EXPLAIN) || !defined(NDEBUG) \\",
          "35: # define VDBE_DISPLAY_P4 1",
          "36: #else",
          "37: # define VDBE_DISPLAY_P4 0",
          "",
          "[Removed Lines]",
          "34:      || defined(VDBE_PROFILE) || defined(SQLITE_DEBUG)",
          "",
          "[Added Lines]",
          "34:      || defined(VDBE_PROFILE) || defined(SQLITE_DEBUG) \\",
          "35:      || defined(SQLITE_ENABLE_BYTECODE_VTAB)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "496: int sqlite3VdbeIdxKeyCompare(sqlite3*,VdbeCursor*,UnpackedRecord*,int*);",
          "497: int sqlite3VdbeIdxRowid(sqlite3*, BtCursor*, i64*);",
          "498: int sqlite3VdbeExec(Vdbe*);",
          "500: int sqlite3VdbeNextOpcode(Vdbe*,Mem*,int,int*,int*,Op**);",
          "501: int sqlite3VdbeList(Vdbe*);",
          "502: #endif",
          "503: int sqlite3VdbeHalt(Vdbe*);",
          "",
          "[Removed Lines]",
          "499: #ifndef SQLITE_OMIT_EXPLAIN",
          "",
          "[Added Lines]",
          "500: #if !defined(SQLITE_OMIT_EXPLAIN) || defined(SQLITE_ENABLE_BYTECODE_VTAB)",
          "502: char *sqlite3VdbeDisplayP4(sqlite3*,Op*);",
          "503: char *sqlite3VdbeDisplayComment(sqlite3*,const Op*,const char*);",
          "504: #endif",
          "505: #if !defined(SQLITE_OMIT_EXPLAIN)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "539: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "540: int sqlite3VdbeMemAggValue(Mem*, Mem*, FuncDef*);",
          "541: #endif",
          "543: const char *sqlite3OpcodeName(int);",
          "544: #endif",
          "545: int sqlite3VdbeMemGrow(Mem *pMem, int n, int preserve);",
          "",
          "[Removed Lines]",
          "542: #ifndef SQLITE_OMIT_EXPLAIN",
          "",
          "[Added Lines]",
          "547: #if !defined(SQLITE_OMIT_EXPLAIN) || defined(SQLITE_ENABLE_BYTECODE_VTAB)",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1467: static char *displayComment(",
          "",
          "[Added Lines]",
          "1467: char *sqlite3VdbeDisplayComment(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1633:   char *zP4 = 0;",
          "1634:   StrAccum x;",
          "",
          "[Removed Lines]",
          "1632: static char *displayP4(sqlite3 *db, Op *pOp){",
          "",
          "[Added Lines]",
          "1632: char *sqlite3VdbeDisplayP4(sqlite3 *db, Op *pOp){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1836:   char *zCom;",
          "1837:   static const char *zFormat1 = \"%4d %-13s %4d %4d %4d %-13s %.2X %s\\n\";",
          "1838:   if( pOut==0 ) pOut = stdout;",
          "1840: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "1842: #else",
          "1843:   zCom = 0;",
          "1844: #endif",
          "",
          "[Removed Lines]",
          "1839:   zP4 = displayP4(0, pOp);",
          "1841:   zCom = displayComment(0, pOp, zP4);",
          "",
          "[Added Lines]",
          "1839:   zP4 = sqlite3VdbeDisplayP4(0, pOp);",
          "1841:   zCom = sqlite3VdbeDisplayComment(0, pOp, zP4);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1942:   pFrame->v->pDelFrame = pFrame;",
          "1943: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1945: #if defined(SQLITE_ENABLE_BYTECODE_VTAB) || !defined(SQLITE_OMIT_EXPLAIN)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2132:       rc = SQLITE_ERROR;",
          "2133:       sqlite3VdbeError(p, sqlite3ErrStr(p->rc));",
          "2134:     }else{",
          "2136:       if( p->explain==2 ){",
          "2137:         sqlite3VdbeMemSetInt64(pMem, pOp->p1);",
          "2138:         sqlite3VdbeMemSetInt64(pMem+1, pOp->p2);",
          "",
          "[Removed Lines]",
          "2135:       char *zP4 = displayP4(db, pOp);",
          "",
          "[Added Lines]",
          "2137:       char *zP4 = sqlite3VdbeDisplayP4(db, pOp);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2150:         sqlite3VdbeMemSetInt64(pMem+6, pOp->p5);",
          "2151: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "2152:         {",
          "2154:           sqlite3VdbeMemSetStr(pMem+7, zCom, -1, SQLITE_UTF8, sqlite3_free);",
          "2155:         }",
          "2156: #else",
          "",
          "[Removed Lines]",
          "2153:           char *zCom = displayComment(db, pOp, zP4);",
          "",
          "[Added Lines]",
          "2155:           char *zCom = sqlite3VdbeDisplayComment(db, pOp, zP4);",
          "",
          "---------------"
        ],
        "src/vdbevtab.c||src/vdbevtab.c": [
          "File: src/vdbevtab.c -> src/vdbevtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: };",
          "",
          "[Removed Lines]",
          "22: typedef struct bytecodevtab_vtab bytecodevtab_vtab;",
          "23: struct bytecodevtab_vtab {",
          "",
          "[Added Lines]",
          "22: typedef struct bytecodevtab bytecodevtab;",
          "23: struct bytecodevtab {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:   sqlite3_vtab **ppVtab,",
          "44:   char **pzErr",
          "45: ){",
          "47:   int rc;",
          "49:   rc = sqlite3_declare_vtab(db,",
          "",
          "[Removed Lines]",
          "46:   bytecodevtab_vtab *pNew;",
          "",
          "[Added Lines]",
          "52:   bytecodevtab *pNew;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "66:     if( pNew==0 ) return SQLITE_NOMEM;",
          "67:     memset(pNew, 0, sizeof(*pNew));",
          "68:   }",
          "69:   return rc;",
          "70: }",
          "75: static int bytecodevtabDisconnect(sqlite3_vtab *pVtab){",
          "77:   sqlite3_free(p);",
          "78:   return SQLITE_OK;",
          "79: }",
          "",
          "[Removed Lines]",
          "76:   bytecodevtab_vtab *p = (bytecodevtab_vtab*)pVtab;",
          "",
          "[Added Lines]",
          "74:     pNew->db = db;",
          "83:   bytecodevtab *p = (bytecodevtab*)pVtab;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84: static int bytecodevtabOpen(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){",
          "85:   bytecodevtab_cursor *pCur;",
          "86:   pCur = sqlite3_malloc( sizeof(*pCur) );",
          "87:   if( pCur==0 ) return SQLITE_NOMEM;",
          "88:   memset(pCur, 0, sizeof(*pCur));",
          "90:   return SQLITE_OK;",
          "91: }",
          "96: static int bytecodevtabClose(sqlite3_vtab_cursor *cur){",
          "97:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor*)cur;",
          "98:   sqlite3_free(pCur);",
          "99:   return SQLITE_OK;",
          "100: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:   bytecodevtab *pVTab = (bytecodevtab*)p;",
          "97:   sqlite3VdbeMemInit(&pCur->sub, pVTab->db, 1);",
          "105: static void bytecodevtabCursorClear(bytecodevtab_cursor *pCur){",
          "106:   sqlite3_free(pCur->zP4);",
          "107:   pCur->zP4 = 0;",
          "108:   sqlite3VdbeMemSetNull(&pCur->sub);",
          "109:   if( pCur->needFinalize ){",
          "110:     sqlite3_finalize(pCur->pStmt);",
          "111:   }",
          "112:   pCur->pStmt = 0;",
          "113:   pCur->needFinalize = 0;",
          "114: }",
          "121:   bytecodevtabCursorClear(pCur);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "106: static int bytecodevtabNext(sqlite3_vtab_cursor *cur){",
          "107:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor*)cur;",
          "109:   return SQLITE_OK;",
          "110: }",
          "",
          "[Removed Lines]",
          "108:   pCur->iRowid++;",
          "",
          "[Added Lines]",
          "132:   int rc;",
          "133:   if( pCur->zP4 ){",
          "134:     sqlite3_free(pCur->zP4);",
          "135:     pCur->zP4 = 0;",
          "136:   }",
          "137:   rc = sqlite3VdbeNextOpcode((Vdbe*)pCur->pStmt, &pCur->sub, 0,",
          "138:                              &pCur->iRowid, &pCur->iAddr, &pCur->aOp);",
          "139:   if( rc!=SQLITE_OK ){",
          "140:     sqlite3VdbeMemSetNull(&pCur->sub);",
          "141:     pCur->aOp = 0;",
          "142:   }",
          "150: static int bytecodevtabEof(sqlite3_vtab_cursor *cur){",
          "151:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor*)cur;",
          "152:   return pCur->aOp==0;",
          "153: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "120: ){",
          "121:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor*)cur;",
          "123:   switch( i ){",
          "126:       break;",
          "130:       break;",
          "131:   }",
          "133:   return SQLITE_OK;",
          "134: }",
          "",
          "[Removed Lines]",
          "122: #if 0",
          "124:     case TEMPLATEVTAB_A:",
          "125:       sqlite3_result_int(ctx, 1000 + pCur->iRowid);",
          "127:     default:",
          "128:       assert( i==TEMPLATEVTAB_B );",
          "129:       sqlite3_result_int(ctx, 2000 + pCur->iRowid);",
          "132: #endif",
          "",
          "[Added Lines]",
          "165:   bytecodevtab *pVTab;",
          "166:   Op *pOp = pCur->aOp + pCur->iAddr;",
          "168:     case 0:",
          "169:       sqlite3_result_int(ctx, pCur->iAddr);",
          "170:       break;",
          "171:     case 1:",
          "172:       sqlite3_result_text(ctx, (char*)sqlite3OpcodeName(pOp->opcode),",
          "173:                           -1, SQLITE_STATIC);",
          "174:       break;",
          "175:     case 2:",
          "176:       sqlite3_result_int(ctx, pOp->p1);",
          "177:       break;",
          "178:     case 3:",
          "179:       sqlite3_result_int(ctx, pOp->p2);",
          "181:     case 4:",
          "182:       sqlite3_result_int(ctx, pOp->p3);",
          "183:       break;",
          "184:     case 5:",
          "185:     case 7:",
          "186:       pVTab = (bytecodevtab*)cur->pVtab;",
          "187:       if( pCur->zP4==0 ){",
          "188:         pCur->zP4 = sqlite3VdbeDisplayP4(pVTab->db, pOp);",
          "189:       }",
          "190:       if( i==5 ){",
          "191:         sqlite3_result_text(ctx, pCur->zP4, -1, SQLITE_STATIC);",
          "192:       }else{",
          "193:         char *zCom = sqlite3VdbeDisplayComment(pVTab->db, pOp, pCur->zP4);",
          "194:         sqlite3_result_text(ctx, zCom, -1, sqlite3_free);",
          "195:       }",
          "196:       break;",
          "197:     case 6:",
          "198:       sqlite3_result_int(ctx, pOp->p5);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "144: }",
          "",
          "[Removed Lines]",
          "150: static int bytecodevtabEof(sqlite3_vtab_cursor *cur){",
          "151:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor*)cur;",
          "152:   return pCur->iRowid>=10;",
          "153: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "164:   int argc, sqlite3_value **argv",
          "165: ){",
          "166:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor *)pVtabCursor;",
          "169: }",
          "177: static int bytecodevtabBestIndex(",
          "178:   sqlite3_vtab *tab,",
          "179:   sqlite3_index_info *pIdxInfo",
          "180: ){",
          "184: }",
          "",
          "[Removed Lines]",
          "167:   pCur->iRowid = 1;",
          "168:   return SQLITE_OK;",
          "181:   pIdxInfo->estimatedCost = (double)10;",
          "182:   pIdxInfo->estimatedRows = 10;",
          "183:   return SQLITE_OK;",
          "",
          "[Added Lines]",
          "226:   bytecodevtab *pVTab = (bytecodevtab *)pVtabCursor->pVtab;",
          "227:   int rc = SQLITE_OK;",
          "229:   bytecodevtabCursorClear(pCur);",
          "230:   pCur->iRowid = 0;",
          "231:   pCur->iAddr = 0;",
          "232:   assert( argc==1 );",
          "233:   if( sqlite3_value_type(argv[0])==SQLITE_TEXT ){",
          "234:     const char *zSql = (const char*)sqlite3_value_text(argv[0]);",
          "235:     if( zSql==0 ){",
          "236:       rc = SQLITE_NOMEM;",
          "237:     }else{",
          "238:       rc = sqlite3_prepare_v2(pVTab->db, zSql, -1, &pCur->pStmt, 0);",
          "239:       pCur->needFinalize = 1;",
          "240:     }",
          "241:   }else{",
          "242:     pCur->pStmt = (sqlite3_stmt*)sqlite3_value_pointer(argv[0],\"stmt-pointer\");",
          "243:   }",
          "244:   if( pCur->pStmt==0 ){",
          "245:     pVTab->base.zErrMsg = sqlite3_mprintf(",
          "246:        \"argument to bytecode() is not a valid SQL statement\"",
          "247:     );",
          "248:     rc = SQLITE_ERROR;",
          "249:   }else{",
          "250:     bytecodevtabNext(pVtabCursor);",
          "251:   }",
          "252:   return rc;",
          "264:   int i;",
          "265:   int rc = SQLITE_CONSTRAINT;",
          "266:   pIdxInfo->estimatedCost = (double)100;",
          "267:   pIdxInfo->estimatedRows = 100;",
          "268:   for(i=0; i<pIdxInfo->nConstraint; i++){",
          "269:     if( pIdxInfo->aConstraint[i].usable==0 ) continue;",
          "270:     if( pIdxInfo->aConstraint[i].op!=SQLITE_INDEX_CONSTRAINT_EQ ) continue;",
          "271:     if( pIdxInfo->aConstraint[i].iColumn!=9 ) continue;",
          "272:     rc = SQLITE_OK;",
          "273:     pIdxInfo->aConstraintUsage[i].omit = 1;",
          "274:     pIdxInfo->aConstraintUsage[i].argvIndex = 1;",
          "275:     break;",
          "276:   }",
          "277:   return rc;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "218: int sqlite3VdbeBytecodeVtabInit(sqlite3 *db){",
          "219:   int rc;",
          "221:   return rc;",
          "222: }",
          "",
          "[Removed Lines]",
          "220:   rc = sqlite3_create_module(db, \"bytecodevtab\", &bytecodevtabModule, 0);",
          "",
          "[Added Lines]",
          "314:   rc = sqlite3_create_module(db, \"bytecode\", &bytecodevtabModule, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "94d6f3f836c45be780c897278d19467c03236a15",
      "candidate_info": {
        "commit_hash": "94d6f3f836c45be780c897278d19467c03236a15",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94d6f3f836c45be780c897278d19467c03236a15",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Fix an incorrect table ref-count in the new recursive CTE logic that might result in a reference to freed memory following a syntax error.\n\nFossilOrigin-Name: 75a0288871ccb2a69a636cbb328fe19045a0d0ef96a193ecd118b9a196784d2d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 77e64647ec429c6e0d884abbd00dabebe738f89544a4984d6fd7a702b928ccfd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4861:          && 0==sqlite3StrICmp(pItem->zName, pCte->zName)",
          "4862:         ){",
          "4863:           pItem->pTab = pTab;",
          "4864:           pItem->fg.isRecursive = 1;",
          "4865:           if( pRecTerm->selFlags & SF_Recursive ){",
          "4866:             sqlite3ErrorMsg(pParse,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4864:           pTab->nTabRef++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4868:             );",
          "4869:             return SQLITE_ERROR;",
          "4870:           }",
          "4872:           pRecTerm->selFlags |= SF_Recursive;",
          "4873:           if( iRecTab<0 ) iRecTab = pParse->nTab++;",
          "4874:           pItem->iCursor = iRecTab;",
          "",
          "[Removed Lines]",
          "4871:           pTab->nTabRef++;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "584e8b76303ff2146c5eb831ace29993f00ef510",
      "candidate_info": {
        "commit_hash": "584e8b76303ff2146c5eb831ace29993f00ef510",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/584e8b76303ff2146c5eb831ace29993f00ef510",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btree.h",
          "test/corrupt3.test"
        ],
        "message": "All TCL tests now passing.\n\nFossilOrigin-Name: 4c5f3c6cacf84a36d0347790d98d82d1f584cd1537a13a2736348405c4d20367",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btree.h||src/btree.h",
          "test/corrupt3.test||test/corrupt3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 92e2ab38930c76811dbf5abfe6b9ea9e12562a4bb4bb06cdb0cf49ac30da0bc3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2141: static Pgno btreePagecount(BtShared *pBt){",
          "2143:   return pBt->nPage;",
          "2144: }",
          "2146:   assert( sqlite3BtreeHoldsMutex(p) );",
          "2148: }",
          "",
          "[Removed Lines]",
          "2142:   assert( (pBt->nPage & 0x80000000)==0 || CORRUPT_DB );",
          "2145: u32 sqlite3BtreeLastPage(Btree *p){",
          "2147:   return btreePagecount(p->pBt) & 0x7fffffff;",
          "",
          "[Added Lines]",
          "2144: Pgno sqlite3BtreeLastPage(Btree *p){",
          "2146:   return btreePagecount(p->pBt);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4875:     assert( rc==SQLITE_OK && amt>0 );",
          "4876:     while( nextPage ){",
          "4878:       assert( pCur->aOverflow[iIdx]==0",
          "4879:               || pCur->aOverflow[iIdx]==nextPage",
          "4880:               || CORRUPT_DB );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4877:       if( nextPage > pBt->nPage ) return SQLITE_CORRUPT_BKPT;",
          "",
          "---------------"
        ],
        "src/btree.h||src/btree.h": [
          "File: src/btree.h -> src/btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: int sqlite3BtreeSetPageSize(Btree *p, int nPagesize, int nReserve, int eFix);",
          "73: int sqlite3BtreeGetPageSize(Btree*);",
          "74: Pgno sqlite3BtreeMaxPageCount(Btree*,Pgno);",
          "76: int sqlite3BtreeSecureDelete(Btree*,int);",
          "77: int sqlite3BtreeGetRequestedReserve(Btree*);",
          "78: int sqlite3BtreeGetReserveNoMutex(Btree *p);",
          "",
          "[Removed Lines]",
          "75: u32 sqlite3BtreeLastPage(Btree*);",
          "",
          "[Added Lines]",
          "75: Pgno sqlite3BtreeLastPage(Btree*);",
          "",
          "---------------"
        ],
        "test/corrupt3.test||test/corrupt3.test": [
          "File: test/corrupt3.test -> test/corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:   catchsql {",
          "95:     SELECT substr(x,1,10) FROM t1",
          "96:   }",
          "98: do_test corrupt3-1.10 {",
          "99:   catchsql {",
          "100:     PRAGMA integrity_check",
          "",
          "[Removed Lines]",
          "97: } [list 0 0123456789]",
          "",
          "[Added Lines]",
          "97: } [list 1 {database disk image is malformed}]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "27da907f8eea868f6eae12f39b7d489bd1c11866",
      "candidate_info": {
        "commit_hash": "27da907f8eea868f6eae12f39b7d489bd1c11866",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/27da907f8eea868f6eae12f39b7d489bd1c11866",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/window1.test"
        ],
        "message": "Fix a problem causing queries containing window functions to ignore collation sequences under some circumstances.\n\nFossilOrigin-Name: e6c2192ef88e9990c8b91755c8e779f09e23f936a17123d8e42059257b756ed7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 49da8bdce17ced910b414d50e8df79800513dcf03a196197dc1ea8e47deeda92",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "803:         p->pSub = sqlite3ExprListAppend(pParse, p->pSub, pDup);",
          "804:       }",
          "805:       if( p->pSub ){",
          "806:         assert( ExprHasProperty(pExpr, EP_Static)==0 );",
          "807:         ExprSetProperty(pExpr, EP_Static);",
          "808:         sqlite3ExprDelete(pParse->db, pExpr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "806:         int f = pExpr->flags & EP_Collate;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "813:         pExpr->iColumn = (iCol<0 ? p->pSub->nExpr-1: iCol);",
          "814:         pExpr->iTable = p->pWin->iEphCsr;",
          "815:         pExpr->y.pTab = p->pTab;",
          "816:       }",
          "817:       if( pParse->db->mallocFailed ) return WRC_Abort;",
          "818:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "817:         pExpr->flags = f;",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1947:   FROM t1;",
          "1948: } {{}}",
          "1950: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1950: #-------------------------------------------------------------------------",
          "1951: reset_db",
          "1952: do_execsql_test 64.1 {",
          "1953:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b);",
          "1954:   INSERT INTO t1 VALUES(1, 'abcd');",
          "1955:   INSERT INTO t1 VALUES(2, 'BCDE');",
          "1956:   INSERT INTO t1 VALUES(3, 'cdef');",
          "1957:   INSERT INTO t1 VALUES(4, 'DEFG');",
          "1958: }",
          "1960: do_execsql_test 64.2 {",
          "1961:   SELECT rowid, max(b COLLATE nocase)||''",
          "1962:   FROM t1",
          "1963:   GROUP BY rowid",
          "1964:   ORDER BY max(b COLLATE nocase)||'';",
          "1965: } {1 abcd 2 BCDE 3 cdef 4 DEFG}",
          "1967: do_execsql_test 64.3 {",
          "1968:   SELECT count() OVER (), rowid, max(b COLLATE nocase)||''",
          "1969:   FROM t1",
          "1970:   GROUP BY rowid",
          "1971:   ORDER BY max(b COLLATE nocase)||'';",
          "1972: } {4 1 abcd   4 2 BCDE   4 3 cdef   4 4 DEFG}",
          "1974: do_execsql_test 64.4 {",
          "1975:   SELECT count() OVER (), rowid, max(b COLLATE nocase)",
          "1976:   FROM t1",
          "1977:   GROUP BY rowid",
          "1978:   ORDER BY max(b COLLATE nocase);",
          "1979: } {4 1 abcd   4 2 BCDE   4 3 cdef   4 4 DEFG}",
          "1981: #-------------------------------------------------------------------------",
          "1982: reset_db",
          "1983: do_execsql_test 65.1 {",
          "1984:   CREATE TABLE t1(c1);",
          "1985:   INSERT INTO t1 VALUES('abcd');",
          "1986: }",
          "1987: do_execsql_test 65.2 {",
          "1988:   SELECT max(c1 COLLATE nocase) IN (SELECT 'aBCd') FROM t1;",
          "1989: } {1}",
          "1991: do_execsql_test 65.3 {",
          "1992:   SELECT",
          "1993:      count() OVER (),",
          "1994:      group_concat(c1 COLLATE nocase) IN (SELECT 'aBCd') FROM t1;",
          "1995: } {1 1}",
          "1997: do_execsql_test 65.4 {",
          "1998:   SELECT COUNT() OVER () LIKE lead(102030) OVER(",
          "1999:       ORDER BY sum('abcdef' COLLATE nocase) IN (SELECT 54321)",
          "2000:   )",
          "2001:   FROM t1;",
          "2002: } {{}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}