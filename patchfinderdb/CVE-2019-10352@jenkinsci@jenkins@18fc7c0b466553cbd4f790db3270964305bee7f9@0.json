{
  "cve_id": "CVE-2019-10352",
  "cve_desc": "A path traversal vulnerability in Jenkins 2.185 and earlier, LTS 2.176.1 and earlier in core/src/main/java/hudson/model/FileParameterValue.java allowed attackers with Job/Configure permission to define a file parameter with a file name outside the intended directory, resulting in an arbitrary file write on the Jenkins master when scheduling a build.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "18fc7c0b466553cbd4f790db3270964305bee7f9",
  "patch_info": {
    "commit_hash": "18fc7c0b466553cbd4f790db3270964305bee7f9",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/18fc7c0b466553cbd4f790db3270964305bee7f9",
    "files": [
      "core/src/main/java/hudson/model/FileParameterValue.java",
      "test/src/test/java/hudson/model/FileParameterValueTest.java"
    ],
    "message": "[SECURITY-1424]",
    "before_after_code_files": [
      "core/src/main/java/hudson/model/FileParameterValue.java||core/src/main/java/hudson/model/FileParameterValue.java",
      "test/src/test/java/hudson/model/FileParameterValueTest.java||test/src/test/java/hudson/model/FileParameterValueTest.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/model/FileParameterValue.java||core/src/main/java/hudson/model/FileParameterValue.java": [
      "File: core/src/main/java/hudson/model/FileParameterValue.java -> core/src/main/java/hudson/model/FileParameterValue.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: import java.nio.file.Files;",
      "38: import java.nio.file.InvalidPathException;",
      "39: import java.nio.file.Path;",
      "40: import javax.servlet.ServletException;",
      "42: import org.apache.commons.fileupload.FileItem;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40: import java.util.regex.Pattern;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "66: public class FileParameterValue extends ParameterValue {",
      "67:     private static final String FOLDER_NAME = \"fileParameters\";",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "69:     private static final Pattern PROHIBITED_DOUBLE_DOT = Pattern.compile(\".*[\\\\\\\\/]\\\\.\\\\.[\\\\\\\\/].*\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "162:                     if (ws == null) {",
      "163:                         throw new IllegalStateException(\"The workspace should be created when setUp method is called\");",
      "164:                     }",
      "166:                         listener.error(\"Rejecting file path escaping base directory with relative path: \" + location);",
      "168:                         return null;",
      "",
      "[Removed Lines]",
      "165:                     if (!ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE && !ws.isDescendant(location)) {",
      "",
      "[Added Lines]",
      "167:                     if (!ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE && (PROHIBITED_DOUBLE_DOT.matcher(location).matches() || !ws.isDescendant(location))) {",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/model/FileParameterValueTest.java||test/src/test/java/hudson/model/FileParameterValueTest.java": [
      "File: test/src/test/java/hudson/model/FileParameterValueTest.java -> test/src/test/java/hudson/model/FileParameterValueTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "95:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%afroot-level.txt/uploaded-file.txt\", uploadedContent);",
      "96:     }",
      "98:     private void checkUrlNot200AndNotContains(JenkinsRule.WebClient wc, String url, String contentNotPresent) throws Exception {",
      "99:         Page pageForEncoded = wc.goTo(url, null);",
      "100:         assertThat(pageForEncoded.getWebResponse().getStatusCode(), not(equalTo(200)));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "98:     @Test",
      "99:     @Issue(\"SECURITY-1424\")",
      "100:     public void fileParameter_cannotCreateFile_outsideOfBuildFolder_SEC1424() throws Exception {",
      "103:         FilePath root = j.jenkins.getRootPath();",
      "105:         FreeStyleProject p = j.createFreeStyleProject();",
      "106:         p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(",
      "107:                 new FileParameterDefinition(\"dir/../../../pwned\", null)",
      "108:         )));",
      "110:         assertThat(root.child(\"pwned\").exists(), equalTo(false));",
      "112:         String uploadedContent = \"test-content\";",
      "113:         File uploadedFile = tmp.newFile();",
      "114:         FileUtils.write(uploadedFile, uploadedContent);",
      "116:         FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(",
      "117:                 new FileParameterValue(\"dir/../../../pwned\", uploadedFile, \"uploaded-file.txt\")",
      "118:         )).get();",
      "120:         assertThat(build.getResult(), equalTo(Result.FAILURE));",
      "121:         assertThat(root.child(\"pwned\").exists(), equalTo(false));",
      "124:         JenkinsRule.WebClient wc = j.createWebClient();",
      "125:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
      "126:     }",
      "128:     @Test",
      "129:     public void fileParameter_cannotCreateFile_outsideOfBuildFolder_LeadingDoubleDot() throws Exception {",
      "130:         FilePath root = j.jenkins.getRootPath();",
      "132:         FreeStyleProject p = j.createFreeStyleProject();",
      "133:         p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(",
      "134:                 new FileParameterDefinition(\"../pwned\", null)",
      "135:         )));",
      "137:         assertThat(root.child(\"pwned\").exists(), equalTo(false));",
      "139:         String uploadedContent = \"test-content\";",
      "140:         File uploadedFile = tmp.newFile();",
      "141:         FileUtils.write(uploadedFile, uploadedContent);",
      "143:         FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(",
      "144:                 new FileParameterValue(\"../pwned\", uploadedFile, \"uploaded-file.txt\")",
      "145:         )).get();",
      "147:         assertThat(build.getResult(), equalTo(Result.FAILURE));",
      "148:         assertThat(root.child(\"pwned\").exists(), equalTo(false));",
      "151:         JenkinsRule.WebClient wc = j.createWebClient();",
      "152:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
      "153:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "104:     @Test",
      "105:     @Issue(\"SECURITY-1074\")",
      "106:     public void fileParameter_cannotCreateFile_outsideOfBuildFolder_backslashEdition() throws Exception {",
      "",
      "[Removed Lines]",
      "107:         Assume.assumeTrue(\"Backslash are only dangerous on Windows\", Functions.isWindows());",
      "",
      "[Added Lines]",
      "164:         Assume.assumeTrue(\"Backslashes are only dangerous on Windows\", Functions.isWindows());",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "267:         String workspaceParentContent = workspaceParentPage.getWebResponse().getContentAsString();",
      "268:         assertThat(workspaceParentContent, containsString(\"child2.txt\"));",
      "269:     }",
      "270: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "328:     @Test",
      "329:     public void fileParameter_canStillUse_doubleDotsInFileName() throws Exception {",
      "330:         FreeStyleProject p = j.createFreeStyleProject();",
      "331:         p.addProperty(new ParametersDefinitionProperty(Arrays.asList(",
      "332:                 new FileParameterDefinition(\"weird..name.txt\", null)",
      "333:         )));",
      "335:         File uploadedFile = tmp.newFile();",
      "336:         FileUtils.write(uploadedFile, \"test1\");",
      "338:         FreeStyleBuild build = j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(",
      "339:                 new FileParameterValue(\"weird..name.txt\", uploadedFile, \"uploaded-file.txt\")",
      "340:         )));",
      "343:         File directChild = new File(build.getRootDir(), \"fileParameters/weird..name.txt\");",
      "344:         assertTrue(directChild.exists());",
      "347:         assertTrue(build.getWorkspace().child(\"weird..name.txt\").exists());",
      "350:         JenkinsRule.WebClient wc = j.createWebClient();",
      "351:         HtmlPage workspacePage = wc.goTo(p.getUrl() + \"ws\");",
      "352:         String workspaceContent = workspacePage.getWebResponse().getContentAsString();",
      "353:         assertThat(workspaceContent, containsString(\"weird..name.txt\"));",
      "354:     }",
      "356:     @Test",
      "357:     public void fileParameter_canStillUse_TildeInFileName() throws Exception {",
      "358:         FreeStyleProject p = j.createFreeStyleProject();",
      "359:         p.addProperty(new ParametersDefinitionProperty(Arrays.asList(",
      "360:                 new FileParameterDefinition(\"~name\", null)",
      "361:         )));",
      "363:         File uploadedFile = tmp.newFile();",
      "364:         FileUtils.write(uploadedFile, \"test1\");",
      "366:         FreeStyleBuild build = j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(",
      "367:                 new FileParameterValue(\"~name\", uploadedFile, \"uploaded-file.txt\")",
      "368:         )));",
      "371:         File directChild = new File(build.getRootDir(), \"fileParameters/~name\");",
      "372:         assertTrue(directChild.exists());",
      "375:         assertTrue(build.getWorkspace().child(\"~name\").exists());",
      "378:         JenkinsRule.WebClient wc = j.createWebClient();",
      "379:         HtmlPage workspacePage = wc.goTo(p.getUrl() + \"ws\");",
      "380:         String workspaceContent = workspacePage.getWebResponse().getContentAsString();",
      "381:         assertThat(workspaceContent, containsString(\"~name\"));",
      "382:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c3351d2e7c3edfee82b9470e9aa1168982296072",
      "candidate_info": {
        "commit_hash": "c3351d2e7c3edfee82b9470e9aa1168982296072",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/c3351d2e7c3edfee82b9470e9aa1168982296072",
        "files": [
          "core/src/main/java/hudson/FilePath.java",
          "core/src/main/java/hudson/model/FileParameterValue.java",
          "test/src/test/java/hudson/model/FileParameterValueTest.java"
        ],
        "message": "[SECURITY-1074]",
        "before_after_code_files": [
          "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java",
          "core/src/main/java/hudson/model/FileParameterValue.java||core/src/main/java/hudson/model/FileParameterValue.java",
          "test/src/test/java/hudson/model/FileParameterValueTest.java||test/src/test/java/hudson/model/FileParameterValueTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/model/FileParameterValue.java||core/src/main/java/hudson/model/FileParameterValue.java",
            "test/src/test/java/hudson/model/FileParameterValueTest.java||test/src/test/java/hudson/model/FileParameterValueTest.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/model/FileParameterValue.java||core/src/main/java/hudson/model/FileParameterValue.java",
            "test/src/test/java/hudson/model/FileParameterValueTest.java||test/src/test/java/hudson/model/FileParameterValueTest.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java": [
          "File: core/src/main/java/hudson/FilePath.java -> core/src/main/java/hudson/FilePath.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: import java.net.URLConnection;",
          "80: import java.nio.file.Files;",
          "81: import java.nio.file.InvalidPathException;",
          "82: import java.util.ArrayList;",
          "83: import java.util.Arrays;",
          "84: import java.util.Comparator;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: import java.nio.file.Path;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2949:         return IOUtils.mkdirs(dir);",
          "2950:     }",
          "2952:     private static final SoloFilePathFilter UNRESTRICTED = SoloFilePathFilter.wrap(FilePathFilter.UNRESTRICTED);",
          "2953: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2958:     @Restricted(NoExternalUse.class)",
          "2959:     public boolean isDescendant(@Nonnull String potentialChildRelativePath) throws IOException, InterruptedException {",
          "2960:         return act(new IsDescendant(potentialChildRelativePath));",
          "2961:     }",
          "2963:     private class IsDescendant extends SecureFileCallable<Boolean> {",
          "2964:         private static final long serialVersionUID = 1L;",
          "2965:         private String potentialChildRelativePath;",
          "2967:         private IsDescendant(@Nonnull String potentialChildRelativePath){",
          "2968:             this.potentialChildRelativePath = potentialChildRelativePath;",
          "2969:         }",
          "2971:         @Override",
          "2972:         public Boolean invoke(@Nonnull File parentFile, @Nonnull VirtualChannel channel) throws IOException, InterruptedException {",
          "2973:             if (new File(potentialChildRelativePath).isAbsolute()) {",
          "2974:                 throw new IllegalArgumentException(\"Only a relative path is supported, the given path is absolute: \" + potentialChildRelativePath);",
          "2975:             }",
          "2977:             Path parent = parentFile.getAbsoluteFile().toPath().normalize();",
          "2979:             String remainingPath = potentialChildRelativePath;",
          "2980:             File currentFile = parentFile;",
          "2981:             while (!remainingPath.isEmpty()) {",
          "2982:                 File directChild = this.getDirectChild(currentFile, remainingPath);",
          "2983:                 File childUsingFullPath = new File(currentFile, remainingPath);",
          "2984:                 remainingPath = childUsingFullPath.getAbsolutePath().substring(directChild.getAbsolutePath().length());",
          "2986:                 File childFileSymbolic = Util.resolveSymlinkToFile(directChild);",
          "2987:                 if (childFileSymbolic == null) {",
          "2988:                     currentFile = directChild;",
          "2989:                 } else {",
          "2990:                     currentFile = childFileSymbolic;",
          "2991:                 }",
          "2992:             }",
          "2995:             Path child = currentFile.getAbsoluteFile().toPath().normalize();",
          "2996:             return child.startsWith(parent);",
          "2997:         }",
          "2999:         private @CheckForNull File getDirectChild(File parentFile, String childPath){",
          "3000:             File current = new File(parentFile, childPath);",
          "3001:             while (current != null && !parentFile.equals(current.getParentFile())) {",
          "3002:                 current = current.getParentFile();",
          "3003:             }",
          "3004:             return current;",
          "3005:         }",
          "3006:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/FileParameterValue.java||core/src/main/java/hudson/model/FileParameterValue.java": [
          "File: core/src/main/java/hudson/model/FileParameterValue.java -> core/src/main/java/hudson/model/FileParameterValue.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import java.io.UnsupportedEncodingException;",
          "37: import java.nio.file.Files;",
          "38: import java.nio.file.InvalidPathException;",
          "39: import javax.servlet.ServletException;",
          "41: import org.apache.commons.fileupload.FileItem;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import java.nio.file.Path;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: import org.apache.commons.io.FilenameUtils;",
          "46: import org.apache.commons.io.IOUtils;",
          "47: import org.apache.commons.lang.StringUtils;",
          "48: import org.kohsuke.stapler.DataBoundConstructor;",
          "49: import org.kohsuke.stapler.StaplerRequest;",
          "50: import org.kohsuke.stapler.StaplerResponse;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: import org.kohsuke.accmod.Restricted;",
          "50: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63: public class FileParameterValue extends ParameterValue {",
          "64:     private transient final FileItem file;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:     private static final String FOLDER_NAME = \"fileParameters\";",
          "73:     @Restricted(NoExternalUse.class)",
          "74:     public static /* Script Console modifiable */ boolean ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE =",
          "75:             Boolean.getBoolean(FileParameterValue.class.getName() + \".allowFolderTraversalOutsideWorkspace\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "142:             public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {",
          "143:              if (!StringUtils.isEmpty(location) && !StringUtils.isEmpty(file.getName())) {",
          "144:                  listener.getLogger().println(\"Copying file to \"+location);",
          "146:                     locationFilePath.getParent().mkdirs();",
          "147:                  locationFilePath.copyFrom(file);",
          "148:                     locationFilePath.copyTo(new FilePath(getLocationUnderBuild(build)));",
          "",
          "[Removed Lines]",
          "145:                     FilePath locationFilePath = build.getWorkspace().child(location);",
          "",
          "[Added Lines]",
          "161:                     FilePath ws = build.getWorkspace();",
          "162:                     if (ws == null) {",
          "163:                         throw new IllegalStateException(\"The workspace should be created when setUp method is called\");",
          "164:                     }",
          "165:                     if (!ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE && !ws.isDescendant(location)) {",
          "166:                         listener.error(\"Rejecting file path escaping base directory with relative path: \" + location);",
          "168:                         return null;",
          "169:                     }",
          "170:                     FilePath locationFilePath = ws.child(location);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "204:         if ((\"/\" + originalFileName).equals(request.getRestOfPath())) {",
          "205:             AbstractBuild build = (AbstractBuild)request.findAncestor(AbstractBuild.class).getObject();",
          "206:             File fileParameter = getLocationUnderBuild(build);",
          "207:             if (fileParameter.isFile()) {",
          "208:                 try (InputStream data = Files.newInputStream(fileParameter.toPath())) {",
          "209:                     long lastModified = fileParameter.lastModified();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233:             if (!ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE) {",
          "234:                 File fileParameterFolder = getFileParameterFolderUnderBuild(build);",
          "237:                 Path child = fileParameter.getAbsoluteFile().toPath().normalize();",
          "238:                 Path parent = fileParameterFolder.getAbsoluteFile().toPath().normalize();",
          "239:                 if (!child.startsWith(parent)) {",
          "240:                     throw new IllegalStateException(\"The fileParameter tried to escape the expected folder: \" + location);",
          "241:                 }",
          "242:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "229:     private File getLocationUnderBuild(AbstractBuild build) {",
          "231:     }",
          "",
          "[Removed Lines]",
          "230:         return new File(build.getRootDir(), \"fileParameters/\" + location);",
          "",
          "[Added Lines]",
          "267:         return new File(getFileParameterFolderUnderBuild(build), location);",
          "268:     }",
          "270:     private File getFileParameterFolderUnderBuild(AbstractBuild<?, ?> build){",
          "271:         return new File(build.getRootDir(), FOLDER_NAME);",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/model/FileParameterValueTest.java||test/src/test/java/hudson/model/FileParameterValueTest.java": [
          "File: test/src/test/java/hudson/model/FileParameterValueTest.java -> test/src/test/java/hudson/model/FileParameterValueTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package hudson.model;",
          "26: import com.gargoylesoftware.htmlunit.Page;",
          "27: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "28: import hudson.FilePath;",
          "29: import hudson.Functions;",
          "30: import org.apache.commons.io.FileUtils;",
          "31: import org.junit.Assume;",
          "32: import org.junit.Rule;",
          "33: import org.junit.Test;",
          "34: import org.junit.rules.TemporaryFolder;",
          "35: import org.jvnet.hudson.test.Issue;",
          "36: import org.jvnet.hudson.test.JenkinsRule;",
          "37: import org.kohsuke.stapler.Function;",
          "39: import java.io.File;",
          "40: import java.nio.charset.StandardCharsets;",
          "41: import java.util.Arrays;",
          "42: import java.util.Collections;",
          "44: import static org.hamcrest.CoreMatchers.allOf;",
          "45: import static org.hamcrest.CoreMatchers.containsString;",
          "46: import static org.hamcrest.CoreMatchers.equalTo;",
          "47: import static org.hamcrest.CoreMatchers.not;",
          "48: import static org.junit.Assert.assertThat;",
          "49: import static org.junit.Assert.assertTrue;",
          "51: public class FileParameterValueTest {",
          "52:     @Rule",
          "53:     public JenkinsRule j = new JenkinsRule();",
          "55:     @Rule",
          "56:     public TemporaryFolder tmp = new TemporaryFolder();",
          "58:     @Test",
          "59:     @Issue(\"SECURITY-1074\")",
          "60:     public void fileParameter_cannotCreateFile_outsideOfBuildFolder() throws Exception {",
          "63:         FilePath root = j.jenkins.getRootPath();",
          "65:         FreeStyleProject p = j.createFreeStyleProject();",
          "66:         p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(",
          "67:                 new FileParameterDefinition(\"../../../../../root-level.txt\", null)",
          "68:         )));",
          "70:         assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));",
          "72:         String uploadedContent = \"test-content\";",
          "73:         File uploadedFile = tmp.newFile();",
          "74:         FileUtils.write(uploadedFile, uploadedContent);",
          "76:         FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(",
          "77:                 new FileParameterValue(\"../../../../../root-level.txt\", uploadedFile, \"uploaded-file.txt\")",
          "78:         )).get();",
          "80:         assertThat(build.getResult(), equalTo(Result.FAILURE));",
          "81:         assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));",
          "84:         JenkinsRule.WebClient wc = j.createWebClient();",
          "85:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
          "87:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt\", uploadedContent);",
          "89:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2Froot-level.txt/uploaded-file.txt\", uploadedContent);",
          "91:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215root-level.txt/uploaded-file.txt\", uploadedContent);",
          "93:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252froot-level.txt/uploaded-file.txt\", uploadedContent);",
          "95:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%afroot-level.txt/uploaded-file.txt\", uploadedContent);",
          "96:     }",
          "98:     private void checkUrlNot200AndNotContains(JenkinsRule.WebClient wc, String url, String contentNotPresent) throws Exception {",
          "99:         Page pageForEncoded = wc.goTo(url, null);",
          "100:         assertThat(pageForEncoded.getWebResponse().getStatusCode(), not(equalTo(200)));",
          "101:         assertThat(pageForEncoded.getWebResponse().getContentAsString(), not(containsString(contentNotPresent)));",
          "102:     }",
          "104:     @Test",
          "105:     @Issue(\"SECURITY-1074\")",
          "106:     public void fileParameter_cannotCreateFile_outsideOfBuildFolder_backslashEdition() throws Exception {",
          "107:         Assume.assumeTrue(\"Backslash are only dangerous on Windows\", Functions.isWindows());",
          "111:         FilePath root = j.jenkins.getRootPath();",
          "113:         FreeStyleProject p = j.createFreeStyleProject();",
          "114:         p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(",
          "115:                 new FileParameterDefinition(\"..\\\\..\\\\..\\\\..\\\\..\\\\root-level.txt\", null)",
          "116:         )));",
          "118:         assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));",
          "120:         String uploadedContent = \"test-content\";",
          "121:         File uploadedFile = tmp.newFile();",
          "122:         FileUtils.write(uploadedFile, uploadedContent);",
          "124:         FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(",
          "125:                 new FileParameterValue(\"..\\\\..\\\\..\\\\..\\\\..\\\\root-level.txt\", uploadedFile, \"uploaded-file.txt\")",
          "126:         )).get();",
          "128:         assertThat(build.getResult(), equalTo(Result.FAILURE));",
          "129:         assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));",
          "132:         JenkinsRule.WebClient wc = j.createWebClient();",
          "133:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
          "135:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/..\\\\..\\\\..\\\\..\\\\..\\\\root-level.txt/uploaded-file.txt\", uploadedContent);",
          "136:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt\", uploadedContent);",
          "137:     }",
          "139:     @Test",
          "140:     @Issue(\"SECURITY-1074\")",
          "141:     public void fileParameter_withSingleDot() throws Exception {",
          "144:         FreeStyleProject p = j.createFreeStyleProject();",
          "145:         p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(",
          "146:                 new FileParameterDefinition(\".\", null)",
          "147:         )));",
          "149:         String uploadedContent = \"test-content\";",
          "150:         File uploadedFile = tmp.newFile();",
          "151:         FileUtils.write(uploadedFile, uploadedContent);",
          "153:         FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(",
          "154:                 new FileParameterValue(\".\", uploadedFile, \"uploaded-file.txt\")",
          "155:         )).get();",
          "157:         assertThat(build.getResult(), equalTo(Result.FAILURE));",
          "160:         JenkinsRule.WebClient wc = j.createWebClient();",
          "161:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
          "163:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/uploaded-file.txt\", uploadedContent);",
          "164:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/./uploaded-file.txt\", uploadedContent);",
          "165:     }",
          "167:     @Test",
          "168:     @Issue(\"SECURITY-1074\")",
          "169:     public void fileParameter_withDoubleDot() throws Exception {",
          "172:         FreeStyleProject p = j.createFreeStyleProject();",
          "173:         p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(",
          "174:                 new FileParameterDefinition(\"..\", null)",
          "175:         )));",
          "177:         String uploadedContent = \"test-content\";",
          "178:         File uploadedFile = tmp.newFile();",
          "179:         FileUtils.write(uploadedFile, uploadedContent);",
          "181:         FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(",
          "182:                 new FileParameterValue(\"..\", uploadedFile, \"uploaded-file.txt\")",
          "183:         )).get();",
          "185:         assertThat(build.getResult(), equalTo(Result.FAILURE));",
          "188:         JenkinsRule.WebClient wc = j.createWebClient();",
          "189:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
          "191:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/uploaded-file.txt\", uploadedContent);",
          "192:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/../uploaded-file.txt\", uploadedContent);",
          "193:     }",
          "195:     @Test",
          "196:     @Issue(\"SECURITY-1074\")",
          "197:     public void fileParameter_cannotEraseFile_outsideOfBuildFolder() throws Exception {",
          "200:         FilePath root = j.jenkins.getRootPath();",
          "202:         FreeStyleProject p = j.createFreeStyleProject();",
          "203:         p.addProperty(new ParametersDefinitionProperty(Collections.singletonList(",
          "204:                 new FileParameterDefinition(\"../../../../../root-level.txt\", null)",
          "205:         )));",
          "207:         assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));",
          "208:         String initialContent = \"do-not-erase-me\";",
          "209:         root.child(\"root-level.txt\").write(initialContent, StandardCharsets.UTF_8.name());",
          "211:         String uploadedContent = \"test-content\";",
          "212:         File uploadedFile = tmp.newFile();",
          "213:         FileUtils.write(uploadedFile, uploadedContent);",
          "215:         FreeStyleBuild build = p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(",
          "216:                 new FileParameterValue(\"../../../../../root-level.txt\", uploadedFile, \"uploaded-file.txt\")",
          "217:         )).get();",
          "219:         assertThat(build.getResult(), equalTo(Result.FAILURE));",
          "220:         assertThat(root.child(\"root-level.txt\").readToString(), equalTo(initialContent));",
          "223:         JenkinsRule.WebClient wc = j.createWebClient();",
          "224:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
          "226:         checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt\", uploadedContent);",
          "227:     }",
          "229:     @Test",
          "230:     public void fileParameter_canStillUse_internalHierarchy() throws Exception {",
          "231:         FreeStyleProject p = j.createFreeStyleProject();",
          "232:         p.addProperty(new ParametersDefinitionProperty(Arrays.asList(",
          "233:                 new FileParameterDefinition(\"direct-child1.txt\", null),",
          "234:                 new FileParameterDefinition(\"parent/child2.txt\", null)",
          "235:         )));",
          "237:         File uploadedFile1 = tmp.newFile();",
          "238:         FileUtils.write(uploadedFile1, \"test1\");",
          "239:         File uploadedFile2 = tmp.newFile();",
          "240:         FileUtils.write(uploadedFile2, \"test2\");",
          "242:         FreeStyleBuild build = j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(",
          "243:                 new FileParameterValue(\"direct-child1.txt\", uploadedFile1, \"uploaded-file-1.txt\"),",
          "244:                 new FileParameterValue(\"parent/child2.txt\", uploadedFile2, \"uploaded-file-2.txt\")",
          "245:         )));",
          "248:         File directChild = new File(build.getRootDir(), \"fileParameters/\" + \"direct-child1.txt\");",
          "249:         assertTrue(directChild.exists());",
          "251:         File parentChild = new File(build.getRootDir(), \"fileParameters/\" + \"parent/child2.txt\");",
          "252:         assertTrue(parentChild.exists());",
          "255:         assertTrue(build.getWorkspace().child(\"direct-child1.txt\").exists());",
          "256:         assertTrue(build.getWorkspace().child(\"parent\").child(\"child2.txt\").exists());",
          "259:         JenkinsRule.WebClient wc = j.createWebClient();",
          "260:         HtmlPage workspacePage = wc.goTo(p.getUrl() + \"ws\");",
          "261:         String workspaceContent = workspacePage.getWebResponse().getContentAsString();",
          "262:         assertThat(workspaceContent, allOf(",
          "263:                 containsString(\"direct-child1.txt\"),",
          "264:                 containsString(\"parent\")",
          "265:         ));",
          "266:         HtmlPage workspaceParentPage = wc.goTo(p.getUrl() + \"ws\" + \"/parent\");",
          "267:         String workspaceParentContent = workspaceParentPage.getWebResponse().getContentAsString();",
          "268:         assertThat(workspaceParentContent, containsString(\"child2.txt\"));",
          "269:     }",
          "270: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}