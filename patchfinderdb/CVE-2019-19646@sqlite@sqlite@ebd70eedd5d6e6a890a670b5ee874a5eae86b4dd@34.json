{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5cb1ffc1bd1cae42c5846b10e6cb23c53290bdad",
      "candidate_info": {
        "commit_hash": "5cb1ffc1bd1cae42c5846b10e6cb23c53290bdad",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5cb1ffc1bd1cae42c5846b10e6cb23c53290bdad",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "Allocate a few extra bytes for the pager temp page as an overrun buffer while processing corrupt database files.\n\nFossilOrigin-Name: e7aca0714bc475e04b16e9db78722ce025d2a1382f80cfc0a49cff2af904eae5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 05b87e0755638d31f6d8918f8758362f8c3981661449b5171180a8498f66bd9d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3786:       rc = sqlite3OsFileSize(pPager->fd, &nByte);",
          "3787:     }",
          "3788:     if( rc==SQLITE_OK ){",
          "3791:     }",
          "3793:     if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "3789:       pNew = (char *)sqlite3PageMalloc(pageSize);",
          "3790:       if( !pNew ) rc = SQLITE_NOMEM_BKPT;",
          "",
          "[Added Lines]",
          "3791:       pNew = (char *)sqlite3PageMalloc(pageSize+8);",
          "3792:       if( !pNew ){",
          "3793:         rc = SQLITE_NOMEM_BKPT;",
          "3794:       }else{",
          "3795:         memset(pNew+pageSize, 0, 8);",
          "3796:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc4974c81bd4cda9900185a655b577f19a894e03",
      "candidate_info": {
        "commit_hash": "bc4974c81bd4cda9900185a655b577f19a894e03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bc4974c81bd4cda9900185a655b577f19a894e03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/fkey.c"
        ],
        "message": "The SET DEFAULT and SET NULL conflict resolution actions for foreign key constraints should cause an error when they appear on a generated column.\n\nFossilOrigin-Name: b47513d2b32b61ba42c1e9b59287d28f6fee231e6c65de2a3aa19effbbaf1e7f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/fkey.c||src/fkey.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0a2eb949f8a759e5745d9468c8183d3c0b4b30e0fa2a14b3062620eb9e1d5c1d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1269:             sqlite3ExprAlloc(db, TK_ID, &tNew, 0),",
          "1270:             sqlite3ExprAlloc(db, TK_ID, &tToCol, 0));",
          "1271:         }else if( action==OE_SetDflt ){",
          "1273:           if( pDflt ){",
          "1274:             pNew = sqlite3ExprDup(db, pDflt, 0);",
          "1275:           }else{",
          "",
          "[Removed Lines]",
          "1272:           Expr *pDflt = pFKey->pFrom->aCol[iFromCol].pDflt;",
          "",
          "[Added Lines]",
          "1272:           Column *pCol = pFKey->pFrom->aCol + iFromCol;",
          "1273:           Expr *pDflt;",
          "1274:           if( pCol->colFlags & COLFLAG_GENERATED ){",
          "1275:             testcase( pCol->colFlags & COLFLAG_VIRTUAL );",
          "1276:             testcase( pCol->colFlags & COLFLAG_STORED );",
          "1277:             pDflt = 0;",
          "1278:           }else{",
          "1279:             pDflt = pCol->pDflt;",
          "1280:           }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c27ea2ae8df4207e6b2479b46904c73d7cd1775f",
      "candidate_info": {
        "commit_hash": "c27ea2ae8df4207e6b2479b46904c73d7cd1775f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c27ea2ae8df4207e6b2479b46904c73d7cd1775f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/insert.c",
          "src/sqliteInt.h"
        ],
        "message": "ALTER TABLE is able to add a VIRTUAL column.\n\nFossilOrigin-Name: 120c6b78cb51532f783014605f1107d40b2e4f54e3852fb1f8f167d0c0b78c69",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7f9f90b1b885fa9905b296f2e0fcc9b2341019b42fc839722a93cf60e49a9252",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:   }",
          "299: #endif",
          "",
          "[Removed Lines]",
          "305:   assert( pDflt==0 || pDflt->op==TK_SPAN );",
          "306:   if( pDflt && pDflt->pLeft->op==TK_NULL ){",
          "307:     pDflt = 0;",
          "308:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319:     sqlite3ErrorMsg(pParse, \"Cannot add a UNIQUE column\");",
          "320:     return;",
          "321:   }",
          "343:       return;",
          "344:     }",
          "347:       return;",
          "348:     }",
          "350:   }",
          "353:   zCol = sqlite3DbStrNDup(db, (char*)pColDef->z, pColDef->n);",
          "354:   if( zCol ){",
          "",
          "[Removed Lines]",
          "322:   if( (db->flags&SQLITE_ForeignKeys) && pNew->pFKey && pDflt ){",
          "323:     sqlite3ErrorMsg(pParse,",
          "324:         \"Cannot add a REFERENCES column with non-NULL default value\");",
          "325:     return;",
          "326:   }",
          "327:   if( pCol->notNull && !pDflt ){",
          "328:     sqlite3ErrorMsg(pParse,",
          "329:         \"Cannot add a NOT NULL column with default value NULL\");",
          "330:     return;",
          "331:   }",
          "336:   if( pDflt ){",
          "337:     sqlite3_value *pVal = 0;",
          "338:     int rc;",
          "339:     rc = sqlite3ValueFromExpr(db, pDflt, SQLITE_UTF8, SQLITE_AFF_BLOB, &pVal);",
          "340:     assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );",
          "341:     if( rc!=SQLITE_OK ){",
          "342:       assert( db->mallocFailed == 1 );",
          "345:     if( !pVal ){",
          "346:       sqlite3ErrorMsg(pParse, \"Cannot add a column with non-constant default\");",
          "349:     sqlite3ValueFree(pVal);",
          "",
          "[Added Lines]",
          "314:   if( (pCol->colFlags & COLFLAG_GENERATED)==0 ){",
          "319:     assert( pDflt==0 || pDflt->op==TK_SPAN );",
          "320:     if( pDflt && pDflt->pLeft->op==TK_NULL ){",
          "321:       pDflt = 0;",
          "322:     }",
          "323:     if( (db->flags&SQLITE_ForeignKeys) && pNew->pFKey && pDflt ){",
          "324:       sqlite3ErrorMsg(pParse,",
          "325:           \"Cannot add a REFERENCES column with non-NULL default value\");",
          "328:     if( pCol->notNull && !pDflt ){",
          "329:       sqlite3ErrorMsg(pParse,",
          "330:           \"Cannot add a NOT NULL column with default value NULL\");",
          "337:     if( pDflt ){",
          "338:       sqlite3_value *pVal = 0;",
          "339:       int rc;",
          "340:       rc = sqlite3ValueFromExpr(db, pDflt, SQLITE_UTF8, SQLITE_AFF_BLOB, &pVal);",
          "341:       assert( rc==SQLITE_OK || rc==SQLITE_NOMEM );",
          "342:       if( rc!=SQLITE_OK ){",
          "343:         assert( db->mallocFailed == 1 );",
          "344:         return;",
          "345:       }",
          "346:       if( !pVal ){",
          "347:         sqlite3ErrorMsg(pParse,\"Cannot add a column with non-constant default\");",
          "348:         return;",
          "349:       }",
          "350:       sqlite3ValueFree(pVal);",
          "351:     }",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1570:   goto generated_done;",
          "1572: generated_error:",
          "1574:                   pCol->zName);",
          "1575: generated_done:",
          "1576:   sqlite3ExprDelete(pParse->db, pExpr);",
          "",
          "[Removed Lines]",
          "1573:   sqlite3ErrorMsg(pParse, \"bad GENERATED ALWAYS AS clause on column \\\"%s\\\"\",",
          "",
          "[Added Lines]",
          "1573:   sqlite3ErrorMsg(pParse, \"incorrect GENERATED ALWAYS AS on column \\\"%s\\\"\",",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1005:     nHidden = 0;",
          "1008:       if( i==pTab->iPKey ){",
          "",
          "[Removed Lines]",
          "1006:     for(i=0; i<pTab->nCol; i++){",
          "1007:       int iRegStore = regRowid+1+i;",
          "",
          "[Added Lines]",
          "1007:     iRegStore = regRowid+1;",
          "1008:     for(i=0; i<pTab->nCol; i++, iRegStore++){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1019:           j = -1;",
          "1020:           nHidden++;",
          "1021:           if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1022:             continue;",
          "1023:           }",
          "1024:         }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1023:             iRegStore--;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "3de52e8fa0032ebe22940cc8d58b879e65a06ba0",
      "candidate_info": {
        "commit_hash": "3de52e8fa0032ebe22940cc8d58b879e65a06ba0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3de52e8fa0032ebe22940cc8d58b879e65a06ba0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "Including the phrase EXCLUDE NO OTHERS in the frame-spec of a window function (which is the default setting for EXCLUDE) silently disables the xInverse optimization.  This is a feature, but we will keep it undocumented for now in case we later decide it is a bad idea.\n\nFossilOrigin-Name: 10aedce3dd2c0c9f0ee9e0aefd0b4d2c2eb17c4ca72003c4db9768ea5cdafcf4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ac98b23b34632fbc654a34a8b3d842ce65603e4c04d89c589b46f4d48a61152d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1717: frame_exclude_opt(A) ::= EXCLUDE frame_exclude(X). { A = X; }",
          "1719: %type frame_exclude {u8}",
          "1721: frame_exclude(A) ::= CURRENT ROW. { A = TK_CURRENT; }",
          "1722: frame_exclude(A) ::= GROUP.       { A = TK_GROUP; }",
          "1723: frame_exclude(A) ::= TIES.        { A = TK_TIES; }",
          "",
          "[Removed Lines]",
          "1720: frame_exclude(A) ::= NO OTHERS.   { A = 0; }",
          "",
          "[Added Lines]",
          "1720: frame_exclude(A) ::= NO OTHERS.   { A = TK_NO; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c3017e7b4a1829f3e8bc4f26f5b05b31836120e0",
      "candidate_info": {
        "commit_hash": "c3017e7b4a1829f3e8bc4f26f5b05b31836120e0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c3017e7b4a1829f3e8bc4f26f5b05b31836120e0",
        "files": [
          "ext/misc/fossildelta.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update comments on the fossildelta extension.  No changes to code.\n\nFossilOrigin-Name: 9da4fb59b28686630d63a79988b458726332cf06cc0e6e84d7c0a7600f5fcab0",
        "before_after_code_files": [
          "ext/misc/fossildelta.c||ext/misc/fossildelta.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fossildelta.c||ext/misc/fossildelta.c": [
          "File: ext/misc/fossildelta.c -> ext/misc/fossildelta.c"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8474c1560e0c3a28c6a7ed360202a8e7caae3c8259f60bbfa6d2948ab7876f51",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}