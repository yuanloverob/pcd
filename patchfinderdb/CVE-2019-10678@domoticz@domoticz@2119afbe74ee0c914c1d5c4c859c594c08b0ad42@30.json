{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2046806c827af69a8ad6c06189c64c42d82fd814",
      "candidate_info": {
        "commit_hash": "2046806c827af69a8ad6c06189c64c42d82fd814",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/2046806c827af69a8ad6c06189c64c42d82fd814",
        "files": [
          "hardware/plugins/PluginProtocols.cpp",
          "hardware/plugins/PluginProtocols.h"
        ],
        "message": "HTTP Protocol: Datatypes Bytes and ByteArray now supported for outbound messages (allows sending binary data)",
        "before_after_code_files": [
          "hardware/plugins/PluginProtocols.cpp||hardware/plugins/PluginProtocols.cpp",
          "hardware/plugins/PluginProtocols.h||hardware/plugins/PluginProtocols.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/plugins/PluginProtocols.cpp||hardware/plugins/PluginProtocols.cpp": [
          "File: hardware/plugins/PluginProtocols.cpp -> hardware/plugins/PluginProtocols.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:    pProtocol->AuthenticationDetails(sUsername, sPassword);",
          "35:    return (CPluginProtocol*)pProtocol;",
          "36:   }",
          "37:   else return new CPluginProtocol();",
          "38:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37:   else if ((sProtocol == \"WS\") || (sProtocol == \"WSS\"))",
          "38:   {",
          "39:    CPluginProtocolWS* pProtocol = new CPluginProtocolWS(sProtocol == \"WSS\");",
          "40:    pProtocol->AuthenticationDetails(sUsername, sPassword);",
          "41:    return (CPluginProtocol*)pProtocol;",
          "42:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "745:   PyObject *pLength = NULL;",
          "746:   if (pHeaders)",
          "747:    pLength = PyDict_GetItemString(pHeaders, \"Content-Length\");",
          "749:   {",
          "751:    sHttp += \"Content-Length: \" + std::to_string(iLength) + \"\\r\\n\";",
          "752:   }",
          "754:   sHttp += \"\\r\\n\";",
          "757:   if (pData && PyUnicode_Check(pData))",
          "758:   {",
          "759:    sHttp += PyUnicode_AsUTF8(pData);",
          "760:   }",
          "764:   return retVal;",
          "765:  }",
          "",
          "[Removed Lines]",
          "748:   if (!pLength && pData && PyUnicode_Check(pData))",
          "750:    Py_ssize_t iLength = PyUnicode_GetLength(pData);",
          "762:   retVal.assign(sHttp.c_str(), sHttp.c_str() + sHttp.length());",
          "",
          "[Added Lines]",
          "754:   if (!pLength && pData)",
          "756:    Py_ssize_t iLength = 0;",
          "757:    if (PyUnicode_Check(pData))",
          "758:     iLength = PyUnicode_GetLength(pData);",
          "759:    else if (pData->ob_type->tp_name == std::string(\"bytearray\"))",
          "760:     iLength = PyByteArray_Size(pData);",
          "761:    else if (PyBytes_Check(pData))",
          "762:     iLength = PyBytes_Size(pData);",
          "772:    retVal.assign(sHttp.c_str(), sHttp.c_str() + sHttp.length());",
          "774:   else if (pData && (pData->ob_type->tp_name == std::string(\"bytearray\")))",
          "775:   {",
          "776:    retVal.reserve(sHttp.length() + PyByteArray_Size(pData));",
          "777:    retVal.assign(sHttp.c_str(), sHttp.c_str() + sHttp.length());",
          "778:    const char* pByteArray = PyByteArray_AsString(pData);",
          "779:    int iStop = PyByteArray_Size(pData);",
          "780:    for (int i = 0; i < iStop; i++)",
          "781:    {",
          "782:     retVal.push_back(pByteArray[i]);",
          "783:    }",
          "784:   }",
          "785:   else if (pData && PyBytes_Check(pData))",
          "786:   {",
          "787:    retVal.reserve(sHttp.length() + PyBytes_Size(pData));",
          "788:    retVal.assign(sHttp.c_str(), sHttp.c_str() + sHttp.length());",
          "789:    const char* pBytes = PyBytes_AsString(pData);",
          "790:    int iStop = PyBytes_Size(pData);",
          "791:    for (int i = 0; i < iStop; i++)",
          "792:    {",
          "793:     retVal.push_back(pBytes[i]);",
          "794:    }",
          "795:   }",
          "796:   else",
          "797:    retVal.assign(sHttp.c_str(), sHttp.c_str() + sHttp.length());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1558:   return retVal;",
          "1559:  }",
          "1560: }",
          "1561: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1598:  See: https://tools.ietf.org/html/rfc6455#section-5.2",
          "1600:    0                   1                   2                   3",
          "1601:    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1",
          "1602:   +-+-+-+-+-------+-+-------------+-------------------------------+",
          "1603:   |F|R|R|R| opcode|M| Payload len |    Extended payload length    |",
          "1604:   |I|S|S|S|  (4)  |A|     (7)     |             (16/64)           |",
          "1605:   |N|V|V|V|       |S|             |   (if payload len==126/127)   |",
          "1606:   | |1|2|3|       |K|             |                               |",
          "1607:   +-+-+-+-+-------+-+-------------+ - - - - - - - - - - - - - - - +",
          "1608:   |     Extended payload length continued, if payload len == 127  |",
          "1609:   + - - - - - - - - - - - - - - - +-------------------------------+",
          "1610:   |                               |Masking-key, if MASK set to 1  |",
          "1611:   +-------------------------------+-------------------------------+",
          "1612:   | Masking-key (continued)       |          Payload Data         |",
          "1613:   +-------------------------------- - - - - - - - - - - - - - - - +",
          "1614:   :                     Payload Data continued ...                :",
          "1615:   + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +",
          "1616:   |                     Payload Data continued ...                |",
          "1617:   +---------------------------------------------------------------+",
          "1620:  void CPluginProtocolWS::ProcessInbound(const ReadEvent * Message)",
          "1621:  {",
          "1622:  }",
          "1624:  std::vector<byte> CPluginProtocolWS::ProcessOutbound(const WriteDirective * WriteMessage)",
          "1625:  {",
          "1626:   return std::vector<byte>();",
          "1627:  }",
          "",
          "---------------"
        ],
        "hardware/plugins/PluginProtocols.h||hardware/plugins/PluginProtocols.h": [
          "File: hardware/plugins/PluginProtocols.h -> hardware/plugins/PluginProtocols.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:   };",
          "89:  };",
          "91: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:  class CPluginProtocolWS : CPluginProtocol",
          "92:  {",
          "93:  private:",
          "94:   std::string  m_Username;",
          "95:   std::string  m_Password;",
          "96:  public:",
          "97:   CPluginProtocolWS(bool Secure) { m_Secure = Secure; };",
          "98:   virtual void    ProcessInbound(const ReadEvent* Message);",
          "99:   virtual std::vector<byte> ProcessOutbound(const WriteDirective* WriteMessage);",
          "100:   void      AuthenticationDetails(const std::string &Username, const std::string &Password)",
          "101:   {",
          "102:    m_Username = Username;",
          "103:    m_Password = Password;",
          "104:   };",
          "105:  };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d7f35da2cf50547bb296b06824b15961fb6ca6d",
      "candidate_info": {
        "commit_hash": "4d7f35da2cf50547bb296b06824b15961fb6ca6d",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/4d7f35da2cf50547bb296b06824b15961fb6ca6d",
        "files": [
          "main/SQLHelper.h"
        ],
        "message": "Remove ghost functions from header",
        "before_after_code_files": [
          "main/SQLHelper.h||main/SQLHelper.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/SQLHelper.h||main/SQLHelper.h": [
          "File: main/SQLHelper.h -> main/SQLHelper.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "380:  std::string DeleteUserVariable(const std::string &idx);",
          "381:  std::string SaveUserVariable(const std::string &varname, const std::string &vartype, const std::string &varvalue);",
          "382:  std::string UpdateUserVariable(const std::string &idx, const std::string &varname, const std::string &vartype, const std::string &varvalue, const bool eventtrigger);",
          "384:  std::vector<std::vector<std::string> > GetUserVariables();",
          "386:  uint64_t CreateDevice(const int HardwareID, const int SensorType, const int SensorSubType, std::string &devname, const unsigned long nid, const std::string &soptions);",
          "",
          "[Removed Lines]",
          "383:  bool SetUserVariable(const uint64_t idx, const std::string &varvalue, const bool eventtrigger);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "388:  void UpdateDeviceValue(const char * FieldName , std::string &Value , std::string &Idx );",
          "389:  void UpdateDeviceValue(const char * FieldName , int Value , std::string &Idx )   ;",
          "390:  void UpdateDeviceValue(const char * FieldName , float Value , std::string &Idx ) ;",
          "393:  std::string GetDeviceValue(const char * FieldName , const char *Idx );",
          "395:  float getTemperatureFromSValue(const char * sValue);",
          "",
          "[Removed Lines]",
          "391:  double ConvertTemperature(double tempcelcius);",
          "392:  double ConvertTemperatureUnit(double tempcelcius);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb0468c641b83ae3f0735efd28f9d6ed3e196dc8",
      "candidate_info": {
        "commit_hash": "fb0468c641b83ae3f0735efd28f9d6ed3e196dc8",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/fb0468c641b83ae3f0735efd28f9d6ed3e196dc8",
        "files": [
          "www/js/domoticz.js"
        ],
        "message": "Fixed water graph display",
        "before_after_code_files": [
          "www/js/domoticz.js||www/js/domoticz.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "www/js/domoticz.js||www/js/domoticz.js": [
          "File: www/js/domoticz.js -> www/js/domoticz.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "5841:      datatableUsage1.push([cdate, fValue]);",
          "5842:     }",
          "5843:     else {",
          "5845:     }",
          "5846:    }",
          "5847:    if (typeof item.v2 != 'undefined') {",
          "",
          "[Removed Lines]",
          "5844:      datatableUsage1.push([cdate, parseFloat(item.v) * $.DividerWater]);",
          "",
          "[Added Lines]",
          "5844:      datatableUsage1.push([cdate, parseFloat(item.v) * 1000]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5866:     datatableUsage1.push([cdate, parseFloat(item.v)]);",
          "5867:    }",
          "5868:    else {",
          "5870:    }",
          "5871:    if (typeof item.v2 != 'undefined') {",
          "5872:     datatableUsage2.push([cdate, parseFloat(item.v2)]);",
          "",
          "[Removed Lines]",
          "5869:     datatableUsage1.push([cdate, parseFloat(item.v) * $.DividerWater]);",
          "",
          "[Added Lines]",
          "5869:     datatableUsage1.push([cdate, parseFloat(item.v) * 1000]);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a7873a8bd6bedc5414559f6bdfacd1c2e8127b65",
      "candidate_info": {
        "commit_hash": "a7873a8bd6bedc5414559f6bdfacd1c2e8127b65",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/a7873a8bd6bedc5414559f6bdfacd1c2e8127b65",
        "files": [
          "hardware/P1MeterBase.cpp"
        ],
        "message": "Removed inaccurate current sensor from P1 Smart Meter",
        "before_after_code_files": [
          "hardware/P1MeterBase.cpp||hardware/P1MeterBase.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/P1MeterBase.cpp||hardware/P1MeterBase.cpp": [
          "File: hardware/P1MeterBase.cpp -> hardware/P1MeterBase.cpp"
        ]
      }
    },
    {
      "candidate_hash": "1cae667820533598bf1e9f193440567eda5c404d",
      "candidate_info": {
        "commit_hash": "1cae667820533598bf1e9f193440567eda5c404d",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/1cae667820533598bf1e9f193440567eda5c404d",
        "files": [
          "hardware/Rtl433.cpp"
        ],
        "message": "RTL433, corrected char* mistake",
        "before_after_code_files": [
          "hardware/Rtl433.cpp||hardware/Rtl433.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/Rtl433.cpp||hardware/Rtl433.cpp": [
          "File: hardware/Rtl433.cpp -> hardware/Rtl433.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "464:     if (!bHaveSend)",
          "465:     {",
          "468:     }",
          "469:     else",
          "470:     {",
          "",
          "[Removed Lines]",
          "467:      _log.Log(LOG_STATUS, \"Rtl433: Unhandled sensor reading, please report: (%s|%s)\", headerLine.c_str(), line.c_str());",
          "",
          "[Added Lines]",
          "467:      _log.Log(LOG_STATUS, \"Rtl433: Unhandled sensor reading, please report: (%s|%s)\", headerLine.c_str(), line);",
          "",
          "---------------"
        ]
      }
    }
  ]
}