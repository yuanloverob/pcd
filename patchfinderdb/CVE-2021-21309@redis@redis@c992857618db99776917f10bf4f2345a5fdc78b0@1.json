{
  "cve_id": "CVE-2021-21309",
  "cve_desc": "Redis is an open-source, in-memory database that persists on disk. In affected versions of Redis an integer overflow bug in 32-bit Redis version 4.0 or newer could be exploited to corrupt the heap and potentially result with remote code execution. Redis 4.0 or newer uses a configurable limit for the maximum supported bulk input size. By default, it is 512MB which is a safe value for all platforms. If the limit is significantly increased, receiving a large request from a client may trigger several integer overflow scenarios, which would result with buffer overflow and heap corruption. We believe this could in certain conditions be exploited for remote code execution. By default, authenticated Redis users have access to all configuration parameters and can therefore use the \u201cCONFIG SET proto-max-bulk-len\u201d to change the safe default, making the system vulnerable. **This problem only affects 32-bit Redis (on a 32-bit system, or as a 32-bit executable running on a 64-bit system).** The problem is fixed in version 6.2, and the fix is back ported to 6.0.11 and 5.0.11. Make sure you use one of these versions if you are running 32-bit Redis. An additional workaround to mitigate the problem without patching the redis-server executable is to prevent clients from directly executing `CONFIG SET`: Using Redis 6.0 or newer, ACL configuration can be used to block the command. Using older versions, the `rename-command` configuration directive can be used to rename the command to a random string unknown to users, rendering it inaccessible. Please note that this workaround may have an additional impact on users or operational systems that expect `CONFIG SET` to behave in certain ways.",
  "repo": "redis/redis",
  "patch_hash": "c992857618db99776917f10bf4f2345a5fdc78b0",
  "patch_info": {
    "commit_hash": "c992857618db99776917f10bf4f2345a5fdc78b0",
    "repo": "redis/redis",
    "commit_url": "https://github.com/redis/redis/commit/c992857618db99776917f10bf4f2345a5fdc78b0",
    "files": [
      "src/config.c",
      "src/sds.c",
      "src/zmalloc.c"
    ],
    "message": "Fix integer overflow (CVE-2021-21309). (#8522)\n\nOn 32-bit systems, setting the proto-max-bulk-len config parameter to a high value may result with integer overflow and a subsequent heap overflow when parsing an input bulk (CVE-2021-21309).\n\nThis fix has two parts:\n\nSet a reasonable limit to the config parameter.\nAdd additional checks to prevent the problem in other potential but unknown code paths.\n\n(cherry picked from commit d32f2e9999ce003bad0bd2c3bca29f64dcce4433)",
    "before_after_code_files": [
      "src/config.c||src/config.c",
      "src/sds.c||src/sds.c",
      "src/zmalloc.c||src/zmalloc.c"
    ]
  },
  "patch_diff": {
    "src/config.c||src/config.c": [
      "File: src/config.c -> src/config.c"
    ],
    "src/sds.c||src/sds.c": [
      "File: src/sds.c -> src/sds.c"
    ],
    "src/zmalloc.c||src/zmalloc.c": [
      "File: src/zmalloc.c -> src/zmalloc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "56: #endif",
      "57: #endif",
      "60: #if defined(USE_TCMALLOC)",
      "61: #define malloc(size) tc_malloc(size)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "59: #if PREFIX_SIZE > 0",
      "60: #define ASSERT_NO_SIZE_OVERFLOW(sz) assert((sz) + PREFIX_SIZE > (sz))",
      "61: #else",
      "62: #define ASSERT_NO_SIZE_OVERFLOW(sz)",
      "63: #endif",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "96: static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;",
      "98: void *zmalloc(size_t size) {",
      "99:     void *ptr = malloc(size+PREFIX_SIZE);",
      "101:     if (!ptr) zmalloc_oom_handler(size);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "105:     ASSERT_NO_SIZE_OVERFLOW(size);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "115: #ifdef HAVE_DEFRAG",
      "116: void *zmalloc_no_tcache(size_t size) {",
      "117:     void *ptr = mallocx(size+PREFIX_SIZE, MALLOCX_TCACHE_NONE);",
      "118:     if (!ptr) zmalloc_oom_handler(size);",
      "119:     update_zmalloc_stat_alloc(zmalloc_size(ptr));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "124:     ASSERT_NO_SIZE_OVERFLOW(size);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "128: #endif",
      "130: void *zcalloc(size_t size) {",
      "131:     void *ptr = calloc(1, size+PREFIX_SIZE);",
      "133:     if (!ptr) zmalloc_oom_handler(size);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "139:     ASSERT_NO_SIZE_OVERFLOW(size);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "142: }",
      "144: void *zrealloc(void *ptr, size_t size) {",
      "145: #ifndef HAVE_MALLOC_SIZE",
      "146:     void *realptr;",
      "147: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "154:     ASSERT_NO_SIZE_OVERFLOW(size);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cde69883a1fefb6b8f0699d94a1836b805f767c2",
      "candidate_info": {
        "commit_hash": "cde69883a1fefb6b8f0699d94a1836b805f767c2",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/cde69883a1fefb6b8f0699d94a1836b805f767c2",
        "files": [
          "src/Makefile",
          "src/dict.c",
          "src/dict.h",
          "src/mt19937-64.c",
          "src/mt19937-64.h",
          "src/redis-benchmark.c",
          "src/redis-check-rdb.c",
          "src/redis-cli.c",
          "src/server.c"
        ],
        "message": "Fix random element selection for large hash tables. (#8133)\n\nWhen a database on a 64 bit build grows past 2^31 keys, the underlying hash table expands to 2^32 buckets. After this point, the algorithms for selecting random elements only return elements from half of the available buckets because they use random() which has a range of 0 to 2^31 - 1. This causes problems for eviction policies which use dictGetSomeKeys or dictGetRandomKey. Over time they cause the hash table to become unbalanced because, while new keys are spread out evenly across all buckets, evictions come from only half of the available buckets. Eventually this half of the table starts to run out of keys and it takes longer and longer to find candidates for eviction. This continues until no more evictions can happen.\n\nThis solution addresses this by using a 64 bit PRNG instead of libc random().\n\nCo-authored-by: Greg Femec <gfemec@google.com>\n(cherry picked from commit 266949c7fcfab9d10f81314fd7480a00638ced80)",
        "before_after_code_files": [
          "src/dict.c||src/dict.c",
          "src/dict.h||src/dict.h",
          "src/mt19937-64.c||src/mt19937-64.c",
          "src/mt19937-64.h||src/mt19937-64.h",
          "src/redis-benchmark.c||src/redis-benchmark.c",
          "src/redis-check-rdb.c||src/redis-check-rdb.c",
          "src/redis-cli.c||src/redis-cli.c",
          "src/server.c||src/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/redis/redis/pull/8527"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/dict.c||src/dict.c": [
          "File: src/dict.c -> src/dict.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:         do {",
          "627:             he = (h >= d->ht[0].size) ? d->ht[1].table[h - d->ht[0].size] :",
          "628:                                       d->ht[0].table[h];",
          "629:         } while(he == NULL);",
          "630:     } else {",
          "631:         do {",
          "633:             he = d->ht[0].table[h];",
          "634:         } while(he == NULL);",
          "635:     }",
          "",
          "[Removed Lines]",
          "624:             h = d->rehashidx + (random() % (d->ht[0].size +",
          "625:                                             d->ht[1].size -",
          "626:                                             d->rehashidx));",
          "632:             h = random() & d->ht[0].sizemask;",
          "",
          "[Added Lines]",
          "624:             h = d->rehashidx + (randomULong() % (dictSlots(d) - d->rehashidx));",
          "630:             h = randomULong() & d->ht[0].sizemask;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "695:         maxsizemask = d->ht[1].sizemask;",
          "700:     while(stored < count && maxsteps--) {",
          "701:         for (j = 0; j < tables; j++) {",
          "",
          "[Removed Lines]",
          "698:     unsigned long i = random() & maxsizemask;",
          "",
          "[Added Lines]",
          "696:     unsigned long i = randomULong() & maxsizemask;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "720:             if (he == NULL) {",
          "721:                 emptylen++;",
          "722:                 if (emptylen >= 5 && emptylen > count) {",
          "724:                     emptylen = 0;",
          "725:                 }",
          "726:             } else {",
          "",
          "[Removed Lines]",
          "723:                     i = random() & maxsizemask;",
          "",
          "[Added Lines]",
          "721:                     i = randomULong() & maxsizemask;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1235:     }",
          "1236:     end_benchmark(\"Random access of existing elements\");",
          "1238:     start_benchmark();",
          "1239:     for (j = 0; j < count; j++) {",
          "1240:         sds key = sdsfromlonglong(rand() % count);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1236:     start_benchmark();",
          "1237:     for (j = 0; j < count; j++) {",
          "1238:         dictEntry *de = dictGetRandomKey(dict);",
          "1239:         assert(de != NULL);",
          "1240:     }",
          "1241:     end_benchmark(\"Accessing random keys\");",
          "",
          "---------------"
        ],
        "src/dict.h||src/dict.h": [
          "File: src/dict.h -> src/dict.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: #ifndef __DICT_H",
          "39: #define __DICT_H",
          "41: #define DICT_OK 0",
          "42: #define DICT_ERR 1",
          "",
          "[Removed Lines]",
          "36: #include <stdint.h>",
          "",
          "[Added Lines]",
          "39: #include \"mt19937-64.h\"",
          "40: #include <limits.h>",
          "41: #include <stdint.h>",
          "42: #include <stdlib.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147: #define dictSize(d) ((d)->ht[0].used+(d)->ht[1].used)",
          "148: #define dictIsRehashing(d) ((d)->rehashidx != -1)",
          "151: dict *dictCreate(dictType *type, void *privDataPtr);",
          "152: int dictExpand(dict *d, unsigned long size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154: #if ULONG_MAX >= 0xffffffffffffffff",
          "155: #define randomULong() ((unsigned long) genrand64_int64())",
          "156: #else",
          "157: #define randomULong() random()",
          "158: #endif",
          "",
          "---------------"
        ],
        "src/mt19937-64.c||src/mt19937-64.c": [
          "File: src/mt19937-64.c -> src/mt19937-64.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:    A C-program for MT19937-64 (2004/9/29 version).",
          "3:    Coded by Takuji Nishimura and Makoto Matsumoto.",
          "5:    This is a 64-bit version of Mersenne Twister pseudorandom number",
          "6:    generator.",
          "8:    Before using, initialize the state by using init_genrand64(seed)",
          "9:    or init_by_array64(init_key, key_length).",
          "11:    Copyright (C) 2004, Makoto Matsumoto and Takuji Nishimura,",
          "12:    All rights reserved.",
          "14:    Redistribution and use in source and binary forms, with or without",
          "15:    modification, are permitted provided that the following conditions",
          "16:    are met:",
          "18:      1. Redistributions of source code must retain the above copyright",
          "19:         notice, this list of conditions and the following disclaimer.",
          "21:      2. Redistributions in binary form must reproduce the above copyright",
          "22:         notice, this list of conditions and the following disclaimer in the",
          "23:         documentation and/or other materials provided with the distribution.",
          "25:      3. The names of its contributors may not be used to endorse or promote",
          "26:         products derived from this software without specific prior written",
          "27:         permission.",
          "29:    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
          "30:    \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
          "31:    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",
          "32:    A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR",
          "33:    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,",
          "34:    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,",
          "35:    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR",
          "36:    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
          "37:    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING",
          "38:    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS",
          "39:    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
          "41:    References:",
          "42:    T. Nishimura, ``Tables of 64-bit Mersenne Twisters''",
          "43:      ACM Transactions on Modeling and",
          "44:      Computer Simulation 10. (2000) 348--357.",
          "45:    M. Matsumoto and T. Nishimura,",
          "46:      ``Mersenne Twister: a 623-dimensionally equidistributed",
          "47:        uniform pseudorandom number generator''",
          "48:      ACM Transactions on Modeling and",
          "49:      Computer Simulation 8. (Jan. 1998) 3--30.",
          "51:    Any feedback is very welcome.",
          "52:    http://www.math.hiroshima-u.ac.jp/~m-mat/MT/emt.html",
          "53:    email: m-mat @ math.sci.hiroshima-u.ac.jp (remove spaces)",
          "57: #include \"mt19937-64.h\"",
          "58: #include <stdio.h>",
          "60: #define NN 312",
          "61: #define MM 156",
          "62: #define MATRIX_A 0xB5026F5AA96619E9ULL",
          "68: static unsigned long long mt[NN];",
          "70: static int mti=NN+1;",
          "73: void init_genrand64(unsigned long long seed)",
          "74: {",
          "75:     mt[0] = seed;",
          "76:     for (mti=1; mti<NN; mti++)",
          "77:         mt[mti] =  (6364136223846793005ULL * (mt[mti-1] ^ (mt[mti-1] >> 62)) + mti);",
          "78: }",
          "83: void init_by_array64(unsigned long long init_key[],",
          "84:                      unsigned long long key_length)",
          "85: {",
          "86:     unsigned long long i, j, k;",
          "87:     init_genrand64(19650218ULL);",
          "88:     i=1; j=0;",
          "89:     k = (NN>key_length ? NN : key_length);",
          "90:     for (; k; k--) {",
          "91:         mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 62)) * 3935559000370003845ULL))",
          "93:         i++; j++;",
          "94:         if (i>=NN) { mt[0] = mt[NN-1]; i=1; }",
          "95:         if (j>=key_length) j=0;",
          "96:     }",
          "97:     for (k=NN-1; k; k--) {",
          "98:         mt[i] = (mt[i] ^ ((mt[i-1] ^ (mt[i-1] >> 62)) * 2862933555777941757ULL))",
          "100:         i++;",
          "101:         if (i>=NN) { mt[0] = mt[NN-1]; i=1; }",
          "102:     }",
          "105: }",
          "108: unsigned long long genrand64_int64(void)",
          "109: {",
          "110:     int i;",
          "111:     unsigned long long x;",
          "112:     static unsigned long long mag01[2]={0ULL, MATRIX_A};",
          "118:         if (mti == NN+1)",
          "119:             init_genrand64(5489ULL);",
          "121:         for (i=0;i<NN-MM;i++) {",
          "122:             x = (mt[i]&UM)|(mt[i+1]&LM);",
          "123:             mt[i] = mt[i+MM] ^ (x>>1) ^ mag01[(int)(x&1ULL)];",
          "124:         }",
          "125:         for (;i<NN-1;i++) {",
          "126:             x = (mt[i]&UM)|(mt[i+1]&LM);",
          "127:             mt[i] = mt[i+(MM-NN)] ^ (x>>1) ^ mag01[(int)(x&1ULL)];",
          "128:         }",
          "129:         x = (mt[NN-1]&UM)|(mt[0]&LM);",
          "130:         mt[NN-1] = mt[MM-1] ^ (x>>1) ^ mag01[(int)(x&1ULL)];",
          "132:         mti = 0;",
          "133:     }",
          "135:     x = mt[mti++];",
          "137:     x ^= (x >> 29) & 0x5555555555555555ULL;",
          "138:     x ^= (x << 17) & 0x71D67FFFEDA60000ULL;",
          "139:     x ^= (x << 37) & 0xFFF7EEE000000000ULL;",
          "140:     x ^= (x >> 43);",
          "142:     return x;",
          "143: }",
          "146: long long genrand64_int63(void)",
          "147: {",
          "148:     return (long long)(genrand64_int64() >> 1);",
          "149: }",
          "152: double genrand64_real1(void)",
          "153: {",
          "154:     return (genrand64_int64() >> 11) * (1.0/9007199254740991.0);",
          "155: }",
          "158: double genrand64_real2(void)",
          "159: {",
          "160:     return (genrand64_int64() >> 11) * (1.0/9007199254740992.0);",
          "161: }",
          "164: double genrand64_real3(void)",
          "165: {",
          "166:     return ((genrand64_int64() >> 12) + 0.5) * (1.0/4503599627370496.0);",
          "167: }",
          "169: #ifdef MT19937_64_MAIN",
          "170: int main(void)",
          "171: {",
          "172:     int i;",
          "173:     unsigned long long init[4]={0x12345ULL, 0x23456ULL, 0x34567ULL, 0x45678ULL}, length=4;",
          "174:     init_by_array64(init, length);",
          "175:     printf(\"1000 outputs of genrand64_int64()\\n\");",
          "176:     for (i=0; i<1000; i++) {",
          "177:       printf(\"%20llu \", genrand64_int64());",
          "178:       if (i%5==4) printf(\"\\n\");",
          "179:     }",
          "180:     printf(\"\\n1000 outputs of genrand64_real2()\\n\");",
          "181:     for (i=0; i<1000; i++) {",
          "182:       printf(\"%10.8f \", genrand64_real2());",
          "183:       if (i%5==4) printf(\"\\n\");",
          "184:     }",
          "185:     return 0;",
          "186: }",
          "187: #endif",
          "",
          "---------------"
        ],
        "src/mt19937-64.h||src/mt19937-64.h": [
          "File: src/mt19937-64.h -> src/mt19937-64.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2:    A C-program for MT19937-64 (2004/9/29 version).",
          "3:    Coded by Takuji Nishimura and Makoto Matsumoto.",
          "5:    This is a 64-bit version of Mersenne Twister pseudorandom number",
          "6:    generator.",
          "8:    Before using, initialize the state by using init_genrand64(seed)",
          "9:    or init_by_array64(init_key, key_length).",
          "11:    Copyright (C) 2004, Makoto Matsumoto and Takuji Nishimura,",
          "12:    All rights reserved.",
          "14:    Redistribution and use in source and binary forms, with or without",
          "15:    modification, are permitted provided that the following conditions",
          "16:    are met:",
          "18:      1. Redistributions of source code must retain the above copyright",
          "19:         notice, this list of conditions and the following disclaimer.",
          "21:      2. Redistributions in binary form must reproduce the above copyright",
          "22:         notice, this list of conditions and the following disclaimer in the",
          "23:         documentation and/or other materials provided with the distribution.",
          "25:      3. The names of its contributors may not be used to endorse or promote",
          "26:         products derived from this software without specific prior written",
          "27:         permission.",
          "29:    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS",
          "30:    \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT",
          "31:    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR",
          "32:    A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR",
          "33:    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,",
          "34:    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,",
          "35:    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR",
          "36:    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF",
          "37:    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING",
          "38:    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS",
          "39:    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
          "41:    References:",
          "42:    T. Nishimura, ``Tables of 64-bit Mersenne Twisters''",
          "43:      ACM Transactions on Modeling and",
          "44:      Computer Simulation 10. (2000) 348--357.",
          "45:    M. Matsumoto and T. Nishimura,",
          "46:      ``Mersenne Twister: a 623-dimensionally equidistributed",
          "47:        uniform pseudorandom number generator''",
          "48:      ACM Transactions on Modeling and",
          "49:      Computer Simulation 8. (Jan. 1998) 3--30.",
          "51:    Any feedback is very welcome.",
          "52:    http://www.math.hiroshima-u.ac.jp/~m-mat/MT/emt.html",
          "53:    email: m-mat @ math.sci.hiroshima-u.ac.jp (remove spaces)",
          "56: #ifndef __MT19937_64_H",
          "57: #define __MT19937_64_H",
          "60: void init_genrand64(unsigned long long seed);",
          "65: void init_by_array64(unsigned long long init_key[],",
          "66:                      unsigned long long key_length);",
          "69: unsigned long long genrand64_int64(void);",
          "73: long long genrand64_int63(void);",
          "76: double genrand64_real1(void);",
          "79: double genrand64_real2(void);",
          "82: double genrand64_real3(void);",
          "85: double genrand64_real4(void);",
          "87: #endif",
          "",
          "---------------"
        ],
        "src/redis-benchmark.c||src/redis-benchmark.c": [
          "File: src/redis-benchmark.c -> src/redis-benchmark.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50: #include \"zmalloc.h\"",
          "51: #include \"atomicvar.h\"",
          "52: #include \"crc16_slottable.h\"",
          "54: #define UNUSED(V) ((void) V)",
          "55: #define RANDPTR_INITIAL_SIZE 8",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53: #include \"mt19937-64.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1524:     client c;",
          "1527:     signal(SIGHUP, SIG_IGN);",
          "1528:     signal(SIGPIPE, SIG_IGN);",
          "",
          "[Removed Lines]",
          "1526:     srandom(time(NULL));",
          "",
          "[Added Lines]",
          "1527:     srandom(time(NULL) ^ getpid());",
          "1528:     init_genrand64(ustime() ^ getpid());",
          "",
          "---------------"
        ],
        "src/redis-check-rdb.c||src/redis-check-rdb.c": [
          "File: src/redis-check-rdb.c -> src/redis-check-rdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: #include \"server.h\"",
          "31: #include \"rdb.h\"",
          "33: #include <stdarg.h>",
          "35: void createSharedObjects(void);",
          "36: void rdbLoadProgressCallback(rio *r, const void *buf, size_t len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30: #include \"mt19937-64.h\"",
          "35: #include <sys/time.h>",
          "36: #include <unistd.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "363: int redis_check_rdb_main(int argc, char **argv, FILE *fp) {",
          "364:     if (argc != 2 && fp == NULL) {",
          "365:         fprintf(stderr, \"Usage: %s <rdb-file-name>\\n\", argv[0]);",
          "366:         exit(1);",
          "367:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "367:     struct timeval tv;",
          "374:     gettimeofday(&tv, NULL);",
          "375:     init_genrand64(((long long) tv.tv_sec * 1000000 + tv.tv_usec) ^ getpid());",
          "",
          "---------------"
        ],
        "src/redis-cli.c||src/redis-cli.c": [
          "File: src/redis-cli.c -> src/redis-cli.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "60: #include \"help.h\"",
          "61: #include \"anet.h\"",
          "62: #include \"ae.h\"",
          "64: #define UNUSED(V) ((void) V)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "63: #include \"mt19937-64.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8067: int main(int argc, char **argv) {",
          "8068:     int firstarg;",
          "8070:     config.hostip = sdsnew(\"127.0.0.1\");",
          "8071:     config.hostport = 6379;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8070:     struct timeval tv;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8151:     }",
          "8152: #endif",
          "8155:     if (CLUSTER_MANAGER_MODE()) {",
          "8156:         clusterManagerCommandProc *proc = validateClusterManagerCommand();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8156:     gettimeofday(&tv, NULL);",
          "8157:     init_genrand64(((long long) tv.tv_sec * 1000000 + tv.tv_usec) ^ getpid());",
          "",
          "---------------"
        ],
        "src/server.c||src/server.c": [
          "File: src/server.c -> src/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #include \"bio.h\"",
          "34: #include \"latency.h\"",
          "35: #include \"atomicvar.h\"",
          "37: #include <time.h>",
          "38: #include <signal.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include \"mt19937-64.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5340:     zmalloc_set_oom_handler(redisOutOfMemoryHandler);",
          "5341:     srand(time(NULL)^getpid());",
          "5342:     gettimeofday(&tv,NULL);",
          "5343:     crc64_init();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5344:     init_genrand64(((long long) tv.tv_sec * 1000000 + tv.tv_usec) ^ getpid());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6a94aa5690b5dd2ed0c9caa9ec2577a9c5a4e2b",
      "candidate_info": {
        "commit_hash": "e6a94aa5690b5dd2ed0c9caa9ec2577a9c5a4e2b",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/e6a94aa5690b5dd2ed0c9caa9ec2577a9c5a4e2b",
        "files": [
          "src/tracking.c"
        ],
        "message": "Client tracking tracking-redir-broken push len is 2 not 3 (#8456)\n\nWhen redis responds with tracking-redir-broken push message (RESP3),\nit was responding with a broken protocol: an array of 3 elements, but only\npushes 2 elements.\n\n(cherry picked from commit f687ac0c32e3857aff56ddc4711be18dd87c336c)",
        "before_after_code_files": [
          "src/tracking.c||src/tracking.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/redis/redis/pull/8527"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/tracking.c||src/tracking.c": [
          "File: src/tracking.c -> src/tracking.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:             if (c->resp > 2) {",
          "222:                 addReplyBulkCBuffer(c,\"tracking-redir-broken\",21);",
          "223:                 addReplyLongLong(c,c->client_tracking_redirection);",
          "224:             }",
          "",
          "[Removed Lines]",
          "221:                 addReplyPushLen(c,3);",
          "",
          "[Added Lines]",
          "221:                 addReplyPushLen(c,2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91ffe99e03edee658b1e3129344f1f4d633f3104",
      "candidate_info": {
        "commit_hash": "91ffe99e03edee658b1e3129344f1f4d633f3104",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/91ffe99e03edee658b1e3129344f1f4d633f3104",
        "files": [
          "00-RELEASENOTES",
          "src/version.h"
        ],
        "message": "Redis 6.0.11",
        "before_after_code_files": [
          "src/version.h||src/version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/redis/redis/pull/8527"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.h||src/version.h": [
          "File: src/version.h -> src/version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: #define REDIS_VERSION \"6.0.10\"",
          "2: #define REDIS_VERSION_NUM 0x0006000a",
          "",
          "[Added Lines]",
          "1: #define REDIS_VERSION \"6.0.11\"",
          "2: #define REDIS_VERSION_NUM 0x0006000b",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "17c3ac89e7cf15f299927fc5638177421ae3afe8",
      "candidate_info": {
        "commit_hash": "17c3ac89e7cf15f299927fc5638177421ae3afe8",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/17c3ac89e7cf15f299927fc5638177421ae3afe8",
        "files": [
          "runtest-moduleapi",
          "src/module.c",
          "tests/modules/Makefile",
          "tests/modules/zset.c",
          "tests/unit/moduleapi/zset.tcl"
        ],
        "message": "RM_ZsetRem: Delete key if empty (#8453)\n\nWithout this fix, RM_ZsetRem can leave empty sorted sets which are\nnot allowed to exist.\n\nRemoving from a sorted set while iterating seems to work (while\ninserting causes failed assetions). RM_ZsetRangeEndReached is\nmodified to return 1 if the key doesn't exist, to terminate\niteration when the last element has been removed.\n\n(cherry picked from commit aea6e71ef82701e07177744e600e1ef20d60b7d0)",
        "before_after_code_files": [
          "src/module.c||src/module.c",
          "tests/modules/zset.c||tests/modules/zset.c",
          "tests/unit/moduleapi/zset.tcl||tests/unit/moduleapi/zset.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/redis/redis/pull/8527"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/module.c||src/module.c": [
          "File: src/module.c -> src/module.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2508:     if (key->value && key->value->type != OBJ_ZSET) return REDISMODULE_ERR;",
          "2509:     if (key->value != NULL && zsetDel(key->value,ele->ptr)) {",
          "2510:         if (deleted) *deleted = 1;",
          "2511:     } else {",
          "2512:         if (deleted) *deleted = 0;",
          "2513:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2511:         moduleDelKeyIfEmpty(key);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2554: int RM_ZsetRangeEndReached(RedisModuleKey *key) {",
          "2555:     return key->zer;",
          "2556: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2556:     if (!key->value || key->value->type != OBJ_ZSET) return 1;",
          "",
          "---------------"
        ],
        "tests/modules/zset.c||tests/modules/zset.c": [
          "File: tests/modules/zset.c -> tests/modules/zset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"redismodule.h\"",
          "8: int zset_rem(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {",
          "9:     if (argc != 3) return RedisModule_WrongArity(ctx);",
          "10:     RedisModule_AutoMemory(ctx);",
          "11:     int keymode = REDISMODULE_READ | REDISMODULE_WRITE;",
          "12:     RedisModuleKey *key = RedisModule_OpenKey(ctx, argv[1], keymode);",
          "13:     int deleted;",
          "14:     if (RedisModule_ZsetRem(key, argv[2], &deleted) == REDISMODULE_OK)",
          "15:         return RedisModule_ReplyWithLongLong(ctx, deleted);",
          "16:     else",
          "17:         return RedisModule_ReplyWithError(ctx, \"ERR ZsetRem failed\");",
          "18: }",
          "20: int RedisModule_OnLoad(RedisModuleCtx *ctx, RedisModuleString **argv, int argc) {",
          "21:     REDISMODULE_NOT_USED(argv);",
          "22:     REDISMODULE_NOT_USED(argc);",
          "23:     if (RedisModule_Init(ctx, \"zset\", 1, REDISMODULE_APIVER_1) ==",
          "24:         REDISMODULE_OK &&",
          "25:         RedisModule_CreateCommand(ctx, \"zset.rem\", zset_rem, \"\",",
          "26:                                   1, 1, 1) == REDISMODULE_OK)",
          "27:         return REDISMODULE_OK;",
          "28:     else",
          "29:         return REDISMODULE_ERR;",
          "30: }",
          "",
          "---------------"
        ],
        "tests/unit/moduleapi/zset.tcl||tests/unit/moduleapi/zset.tcl": [
          "File: tests/unit/moduleapi/zset.tcl -> tests/unit/moduleapi/zset.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: set testmodule [file normalize tests/modules/zset.so]",
          "3: start_server {tags {\"modules\"}} {",
          "4:     r module load $testmodule",
          "6:     test {Module zset rem} {",
          "7:         r del k",
          "8:         r zadd k 100 hello 200 world",
          "9:         assert_equal 1 [r zset.rem k hello]",
          "10:         assert_equal 0 [r zset.rem k hello]",
          "11:         assert_equal 1 [r exists k]",
          "12:         # Check that removing the last element deletes the key",
          "13:         assert_equal 1 [r zset.rem k world]",
          "14:         assert_equal 0 [r exists k]",
          "15:     }",
          "16: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "56ef0aa7c8416fbba833c85227332dcd5c7be611",
      "candidate_info": {
        "commit_hash": "56ef0aa7c8416fbba833c85227332dcd5c7be611",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/56ef0aa7c8416fbba833c85227332dcd5c7be611",
        "files": [
          "src/t_stream.c"
        ],
        "message": "XINFO should use lookupKeyReadOrReply (#8436)\n\nThis bug would have let users observe logically expired keys on replicas and\nduring CLIENT PAUSE WRITE.\n\n(cherry picked from commit f2a5fe36789b50dab76851233966aaac44f9048c)",
        "before_after_code_files": [
          "src/t_stream.c||src/t_stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/redis/redis/pull/8527"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/t_stream.c||src/t_stream.c": [
          "File: src/t_stream.c -> src/t_stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2716:     key = c->argv[2];",
          "2720:     if (o == NULL || checkType(c,o,OBJ_STREAM)) return;",
          "2721:     s = o->ptr;",
          "",
          "[Removed Lines]",
          "2719:     robj *o = lookupKeyWriteOrReply(c,key,shared.nokeyerr);",
          "",
          "[Added Lines]",
          "2719:     robj *o = lookupKeyReadOrReply(c,key,shared.nokeyerr);",
          "",
          "---------------"
        ]
      }
    }
  ]
}