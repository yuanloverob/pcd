{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "72d1eac673f66ddc68b6716fe21e6147d07afff7",
      "candidate_info": {
        "commit_hash": "72d1eac673f66ddc68b6716fe21e6147d07afff7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/72d1eac673f66ddc68b6716fe21e6147d07afff7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/altertab3.test"
        ],
        "message": "Fix a problem with renaming a table when a view or trigger within the schema uses a FILTER with an aggregate function that is not currently registered with the database.\n\nFossilOrigin-Name: 2ac0e42f8ab7a9184c2a2efd13bd50ab51bc01f9f34e9e63591fd18db02dff54",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b6d52c9364767ff4ab7279ae981afb97799299dcfaf38a0110c40ca82c72a825",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:             pExpr->op2++;",
          "935:             pNC2 = pNC2->pNext;",
          "936:           }",
          "939:             assert( SQLITE_FUNC_MINMAX==NC_MinMaxAgg );",
          "940:             testcase( (pDef->funcFlags & SQLITE_FUNC_MINMAX)!=0 );",
          "941:             pNC2->ncFlags |= NC_HasAgg | (pDef->funcFlags & SQLITE_FUNC_MINMAX);",
          "",
          "[Removed Lines]",
          "937:           assert( pDef!=0 );",
          "938:           if( pNC2 ){",
          "",
          "[Added Lines]",
          "937:           assert( pDef!=0 || IN_RENAME_OBJECT );",
          "938:           if( pNC2 && pDef ){",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "358:     WITH t4 AS (SELECT * FROM t1) SELECT 33;",
          "359:   END;",
          "360: }",
          "362: do_execsql_test 16.2 {",
          "363:   ALTER TABLE t1 RENAME TO t1x;",
          "364: }",
          "366: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365: #-------------------------------------------------------------------------",
          "366: reset_db",
          "367: do_execsql_test 17.1 {",
          "368:   CREATE TABLE t1(a,b,c);",
          "369:   CREATE TRIGGER AFTER INSERT ON t1 WHEN new.a NOT NULL BEGIN",
          "370:     SELECT a () FILTER (WHERE a>0) FROM t1;",
          "371:   END;",
          "372: }",
          "374: do_execsql_test 17.2 {",
          "375:   ALTER TABLE t1 RENAME TO t1x;",
          "376:   ALTER TABLE t1x RENAME a TO aaa;",
          "377:   SELECT sql FROM sqlite_master WHERE type='trigger';",
          "378: } {",
          "379: {CREATE TRIGGER AFTER INSERT ON \"t1x\" WHEN new.aaa NOT NULL BEGIN",
          "380:     SELECT a () FILTER (WHERE aaa>0) FROM \"t1x\";",
          "381:   END}",
          "382: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a58dbde30bf17497aaf77711496bf01cf72b90e",
      "candidate_info": {
        "commit_hash": "2a58dbde30bf17497aaf77711496bf01cf72b90e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2a58dbde30bf17497aaf77711496bf01cf72b90e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c",
          "test/fuzzdata7.db"
        ],
        "message": "Improved detection of cell corruption in sqlite3VdbeRecordCompareWithSkip().\n\nFossilOrigin-Name: fa47f4c6589c431cf678560ac33dea6b695052012bea2096b2c92869ed51c688",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aaa3a19f8cf5ba7003634e4610abc7832354af91d7c7f65469218678f66bcd46",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4251:   }else{",
          "4252:     idx1 = getVarint32(aKey1, szHdr1);",
          "4253:     d1 = szHdr1;",
          "4258:     i = 0;",
          "4259:   }",
          "4262:   assert( pPKey2->pKeyInfo->nAllField>=pPKey2->nField",
          "",
          "[Removed Lines]",
          "4254:     if( d1>(unsigned)nKey1 ){",
          "4255:       pPKey2->errCode = (u8)SQLITE_CORRUPT_BKPT;",
          "4257:     }",
          "",
          "[Added Lines]",
          "4256:   if( d1>(unsigned)nKey1 ){",
          "4257:     pPKey2->errCode = (u8)SQLITE_CORRUPT_BKPT;",
          "4259:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "46b341530e03b54d9c4ae31b81abb719f4b5f0e2",
      "candidate_info": {
        "commit_hash": "46b341530e03b54d9c4ae31b81abb719f4b5f0e2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/46b341530e03b54d9c4ae31b81abb719f4b5f0e2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c"
        ],
        "message": "Fix a problem with the user-auth extension and deserializing in-memory databases.\n\nFossilOrigin-Name: 09fa0b3c4adf7f81a777975762029ad43dbdc76b02dc32d2307e1c42465213c9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 734192d876e0489cb34e454aaa4a9c6858145791a49959b31dee2917a8e41a7d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:     assert( zErrDyn==0 || rc!=SQLITE_OK );",
          "242:   }",
          "243: #ifdef SQLITE_USER_AUTHENTICATION",
          "245:     u8 newAuth = 0;",
          "246:     rc = sqlite3UserAuthCheckLogin(db, zName, &newAuth);",
          "247:     if( newAuth<db->auth.authLevel ){",
          "",
          "[Removed Lines]",
          "244:   if( rc==SQLITE_OK ){",
          "",
          "[Added Lines]",
          "244:   if( rc==SQLITE_OK && !REOPEN_AS_MEMDB(db) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f6239ed4e7d8e152de77d00aae4678d62d7e4f3",
      "candidate_info": {
        "commit_hash": "2f6239ed4e7d8e152de77d00aae4678d62d7e4f3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2f6239ed4e7d8e152de77d00aae4678d62d7e4f3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "src/sqliteInt.h",
          "src/vacuum.c",
          "src/vdbe.c",
          "test/vacuum-into.test"
        ],
        "message": "Allow the INTO clause of VACUUM to be a text-valued expression.\n\nFossilOrigin-Name: af172b53b46759f491f522356e14c5e2374d3f25ec70fbc1e100cadded8f9b22",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vacuum.c||src/vacuum.c",
          "src/vdbe.c||src/vdbe.c",
          "test/vacuum-into.test||test/vacuum-into.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 92f70e0fa3c9de7fde046f11cc0a7c2800511bb5ace8e68c845133931607616e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1368: %ifndef SQLITE_OMIT_VACUUM",
          "1369: %ifndef SQLITE_OMIT_ATTACH",
          "1375: %endif  SQLITE_OMIT_ATTACH",
          "1376: %endif  SQLITE_OMIT_VACUUM",
          "",
          "[Removed Lines]",
          "1370: %type vinto {Token}",
          "1371: cmd ::= VACUUM vinto(Y).                {sqlite3Vacuum(pParse,0,&Y);}",
          "1372: cmd ::= VACUUM nm(X) vinto(Y).          {sqlite3Vacuum(pParse,&X,&Y);}",
          "1373: vinto(A) ::= INTO nm(X).                {A = X;}",
          "1374: vinto(A) ::= .                          {A.z = 0;}",
          "",
          "[Added Lines]",
          "1370: %type vinto {Expr*}",
          "1371: %destructor vinto {sqlite3ExprDelete(pParse->db, $$);}",
          "1372: cmd ::= VACUUM vinto(Y).                {sqlite3Vacuum(pParse,0,Y);}",
          "1373: cmd ::= VACUUM nm(X) vinto(Y).          {sqlite3Vacuum(pParse,&X,Y);}",
          "1374: vinto(A) ::= INTO expr(X).              {A = X;}",
          "1375: vinto(A) ::= .                          {A = 0;}",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3985: Index *sqlite3FindIndex(sqlite3*,const char*, const char*);",
          "3986: void sqlite3UnlinkAndDeleteTable(sqlite3*,int,const char*);",
          "3987: void sqlite3UnlinkAndDeleteIndex(sqlite3*,int,const char*);",
          "3990: char *sqlite3NameFromToken(sqlite3*, Token*);",
          "3991: int sqlite3ExprCompare(Parse*,Expr*, Expr*, int);",
          "3992: int sqlite3ExprCompareSkip(Expr*, Expr*, int);",
          "",
          "[Removed Lines]",
          "3988: void sqlite3Vacuum(Parse*,Token*,Token*);",
          "3989: int sqlite3RunVacuum(char**, sqlite3*, int, const char*);",
          "",
          "[Added Lines]",
          "3988: void sqlite3Vacuum(Parse*,Token*,Expr*);",
          "3989: int sqlite3RunVacuum(char**, sqlite3*, int, sqlite3_value*);",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "107:   int iDb = 0;",
          "110:   if( pNm ){",
          "111: #ifndef SQLITE_BUG_COMPATIBLE_20160819",
          "114:     iDb = sqlite3TwoPartName(pParse, pNm, pNm, &pNm);",
          "116: #else",
          "",
          "[Removed Lines]",
          "105: void sqlite3Vacuum(Parse *pParse, Token *pNm, Token *pInto){",
          "108:   assert( pInto!=0 );",
          "109:   if( v==0 ) return;",
          "115:     if( iDb<0 ) return;",
          "",
          "[Added Lines]",
          "105: void sqlite3Vacuum(Parse *pParse, Token *pNm, Expr *pInto){",
          "108:   if( v==0 ) goto build_vacuum_end;",
          "114:     if( iDb<0 ) goto build_vacuum_end;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124: #endif",
          "125:   }",
          "126:   if( iDb!=1 ){",
          "132:     }",
          "133:   }",
          "134:   return;",
          "135: }",
          "",
          "[Removed Lines]",
          "127:     sqlite3VdbeAddOp1(v, OP_Vacuum, iDb);",
          "128:     sqlite3VdbeUsesBtree(v, iDb);",
          "129:     if( pInto->z ){",
          "130:       char *zName = sqlite3NameFromToken(pParse->db, pInto);",
          "131:       sqlite3VdbeChangeP4(v, -1, zName, P4_DYNAMIC);",
          "140: int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db, int iDb, const char *zOut){",
          "",
          "[Added Lines]",
          "126:     int iIntoReg = 0;",
          "127:     if( pInto ){",
          "128:       iIntoReg = ++pParse->nMem;",
          "129:       sqlite3ExprCode(pParse, pInto, iIntoReg);",
          "131:     sqlite3VdbeAddOp2(v, OP_Vacuum, iDb, iIntoReg);",
          "132:     sqlite3VdbeUsesBtree(v, iDb);",
          "134: build_vacuum_end:",
          "135:   sqlite3ExprDelete(pParse->db, pInto);",
          "142: int sqlite3RunVacuum(",
          "147: ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:     sqlite3SetString(pzErrMsg, db,\"cannot VACUUM - SQL statements in progress\");",
          "161:     return SQLITE_ERROR;",
          "162:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:   if( pOut ){",
          "172:     if( sqlite3_value_type(pOut)!=SQLITE_TEXT ){",
          "173:       sqlite3SetString(pzErrMsg, db, \"non-text filename\");",
          "174:       return SQLITE_ERROR;",
          "175:     }",
          "176:     zOut = (const char*)sqlite3_value_text(pOut);",
          "177:   }else{",
          "178:     zOut = \"\";",
          "179:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "196:   nDb = db->nDb;",
          "198:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "199:   assert( (db->nDb-1)==nDb );",
          "200:   pDb = &db->aDb[nDb];",
          "201:   assert( strcmp(pDb->zDbSName,\"vacuum_db\")==0 );",
          "202:   pTemp = pDb->pBt;",
          "204:     sqlite3_file *id = sqlite3PagerFile(sqlite3BtreePager(pTemp));",
          "205:     i64 sz = 0;",
          "206:     if( id->pMethods!=0 && (sqlite3OsFileSize(id, &sz)!=SQLITE_OK || sz>0) ){",
          "",
          "[Removed Lines]",
          "197:   rc = execSqlF(db, pzErrMsg, \"ATTACH %Q AS vacuum_db\", zOut ? zOut : \"\");",
          "203:   if( zOut!=0 ){",
          "",
          "[Added Lines]",
          "214:   rc = execSqlF(db, pzErrMsg, \"ATTACH %Q AS vacuum_db\", zOut);",
          "220:   if( pOut ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "233:   rc = execSql(db, pzErrMsg, \"BEGIN\");",
          "234:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "236:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "",
          "[Removed Lines]",
          "235:   rc = sqlite3BtreeBeginTrans(pMain, zOut==0 ? 2 : 0, 0);",
          "",
          "[Added Lines]",
          "252:   rc = sqlite3BtreeBeginTrans(pMain, pOut==0 ? 2 : 0, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "327:     };",
          "329:     assert( 1==sqlite3BtreeIsInTrans(pTemp) );",
          "333:     for(i=0; i<ArraySize(aCopy); i+=2){",
          "",
          "[Removed Lines]",
          "330:     assert( zOut!=0 || 1==sqlite3BtreeIsInTrans(pMain) );",
          "",
          "[Added Lines]",
          "347:     assert( pOut!=0 || 1==sqlite3BtreeIsInTrans(pMain) );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "338:       if( NEVER(rc!=SQLITE_OK) ) goto end_of_vacuum;",
          "339:     }",
          "342:       rc = sqlite3BtreeCopyFile(pMain, pTemp);",
          "345:     }",
          "346:     if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "347:     rc = sqlite3BtreeCommit(pTemp);",
          "348:     if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "349: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "351:       sqlite3BtreeSetAutoVacuum(pMain, sqlite3BtreeGetAutoVacuum(pTemp));",
          "352:     }",
          "353: #endif",
          "354:   }",
          "356:   assert( rc==SQLITE_OK );",
          "358:     rc = sqlite3BtreeSetPageSize(pMain, sqlite3BtreeGetPageSize(pTemp), nRes,1);",
          "359:   }",
          "",
          "[Removed Lines]",
          "341:     if( zOut==0 ){",
          "343:     }else{",
          "344:       rc = sqlite3BtreeCommit(pMain);",
          "350:     if( zOut==0 ){",
          "357:   if( zOut==0 ){",
          "",
          "[Added Lines]",
          "358:     if( pOut==0 ){",
          "365:     if( pOut==0 ){",
          "372:   if( pOut==0 ){",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6686: #if !defined(SQLITE_OMIT_VACUUM) && !defined(SQLITE_OMIT_ATTACH)",
          "6696: case OP_Vacuum: {",
          "6697:   assert( p->readOnly==0 );",
          "6699:   if( rc ) goto abort_due_to_error;",
          "6700:   break;",
          "6701: }",
          "",
          "[Removed Lines]",
          "6698:   rc = sqlite3RunVacuum(&p->zErrMsg, db, pOp->p1, pOp->p4.z);",
          "",
          "[Added Lines]",
          "6698:   rc = sqlite3RunVacuum(&p->zErrMsg, db, pOp->p1,",
          "6699:                         pOp->p2 ? &aMem[pOp->p2] : 0);",
          "",
          "---------------"
        ],
        "test/vacuum-into.test||test/vacuum-into.test": [
          "File: test/vacuum-into.test -> test/vacuum-into.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "55:   VACUUM main INTO ':memory:';",
          "56: } {0 {}}",
          "58: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: # The INTO argument can be an arbitrary expression.",
          "59: #",
          "60: do_execsql_test vacuum-into-300 {",
          "61:   CREATE TABLE t2(name TEXT);",
          "62:   INSERT INTO t2 VALUES(':memory:');",
          "63:   VACUUM main INTO (SELECT name FROM t2);",
          "64: } {}",
          "65: do_catchsql_test vacuum-into-310 {",
          "66:   VACUUM INTO null;",
          "67: } {1 {non-text filename}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb0e04f9295fa954559b5893484b0e23c48d63a6",
      "candidate_info": {
        "commit_hash": "cb0e04f9295fa954559b5893484b0e23c48d63a6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cb0e04f9295fa954559b5893484b0e23c48d63a6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/fuzz4.test"
        ],
        "message": "Fix another problem found by Matthew Denton's new fuzzer.\n\nFossilOrigin-Name: 2b690dbdffe144bd69ca0aa291c230faf3d9d73f7a2985d50f016fe54003f9a9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/fuzz4.test||test/fuzz4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5c7dab85535ac42c021977dbd4a39cef5a72e3d9dccff1c5ca5570a1780516cd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "141:   while( p ){",
          "142:     int op = p->op;",
          "143:     if( p->flags & EP_Generic ) break;",
          "146:      && p->y.pTab!=0",
          "147:     ){",
          "",
          "[Removed Lines]",
          "144:     if( (op==TK_AGG_COLUMN || op==TK_COLUMN",
          "145:           || op==TK_REGISTER || op==TK_TRIGGER)",
          "",
          "[Added Lines]",
          "144:     if( op==TK_REGISTER ) op = p->op2;",
          "145:     if( (op==TK_AGG_COLUMN || op==TK_COLUMN || op==TK_TRIGGER)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:       p = p->pLeft;",
          "159:       continue;",
          "160:     }",
          "162:       pColl = sqlite3GetCollSeq(pParse, ENC(db), 0, p->u.zToken);",
          "163:       break;",
          "164:     }",
          "",
          "[Removed Lines]",
          "161:     if( op==TK_COLLATE || (op==TK_REGISTER && p->op2==TK_COLLATE) ){",
          "",
          "[Added Lines]",
          "161:     if( op==TK_COLLATE ){",
          "",
          "---------------"
        ],
        "test/fuzz4.test||test/fuzz4.test": [
          "File: test/fuzz4.test -> test/fuzz4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018-12-12",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Test cases found by Matthew Denton's fuzzer at Chrome.",
          "13: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "19: do_execsql_test fuzz4-100 {",
          "20:   CREATE TABLE Table0 (Col0  NOT NULL DEFAULT (CURRENT_TIME IS 1 > 1));",
          "21:   INSERT OR REPLACE INTO Table0 DEFAULT VALUES ;",
          "22:   SELECT * FROM Table0;",
          "23: } {0}",
          "25: do_execsql_test fuzz4-110 {",
          "26:   CREATE TABLE Table1(",
          "27:     Col0 TEXT DEFAULT (CASE WHEN 1 IS 3530822107858468864",
          "28:                             THEN 1 ELSE quote(1) IS 3530822107858468864 END)",
          "29:   );",
          "30:   INSERT INTO Table1 DEFAULT VALUES;",
          "31:   SELECT * FROM Table1;",
          "32: } {0}",
          "34: do_execsql_test fuzz4-200 {",
          "35:   CREATE TABLE Table2a(",
          "36:      Col0  NOT NULL   DEFAULT (CURRENT_TIME IS 1  IS NOT 1  > 1)",
          "37:   );",
          "38:   INSERT OR REPLACE INTO Table2a DEFAULT VALUES;",
          "39:   SELECT * FROM Table2a;",
          "40: } {0}",
          "42: do_execsql_test fuzz4-210 {",
          "43:   CREATE TABLE Table2b (Col0  NOT NULL  DEFAULT (CURRENT_TIME  IS NOT FALSE)) ;",
          "44:   INSERT OR REPLACE INTO Table2b DEFAULT VALUES ;",
          "45:   SELECT * FROM Table2b;",
          "46: } {1}",
          "48: do_execsql_test fuzz4-300 {",
          "49:   CREATE TABLE Table3 (Col0 DEFAULT (CURRENT_TIMESTAMP BETWEEN 1 AND 1));",
          "50:   INSERT INTO Table3 DEFAULT VALUES;",
          "51:   SELECT * FROM Table3;",
          "52: } {0}",
          "54: do_execsql_test fuzz4-400 {",
          "55:   CREATE TABLE Table4 (Col0 DEFAULT (1 BETWEEN CURRENT_TIMESTAMP AND 1));",
          "56:   INSERT INTO Table4 DEFAULT VALUES;",
          "57:   SELECT * FROM Table4;",
          "58: } {0}",
          "60: do_execsql_test fuzz4-500 {",
          "61:   CREATE TABLE Table5 (Col0 DEFAULT (1 BETWEEN 1 AND CURRENT_TIMESTAMP));",
          "62:   INSERT INTO Table5 DEFAULT VALUES;",
          "63:   SELECT * FROM Table5;",
          "64: } {1}",
          "66: do_execsql_test fuzz4-600 {",
          "67:   CREATE TEMPORARY TABLE Table6(",
          "68:     Col0 DEFAULT (CASE x'5d' WHEN 1 THEN",
          "69:         CASE CURRENT_TIMESTAMP WHEN 1 THEN 1 ELSE 1 END",
          "70:         ELSE CASE WHEN 1 THEN FALSE END  END )",
          "71:   );",
          "72:   INSERT INTO temp.Table6 DEFAULT VALUES ;",
          "73:   SELECT * FROM Table6;",
          "74: } {0}",
          "75: do_execsql_test fuzz4-610 {",
          "76:   WITH TableX AS (SELECT DISTINCT * ORDER BY 1  , 1 COLLATE RTRIM)",
          "77:       DELETE FROM Table6  WHERE Col0 || +8388608  ;",
          "78:   SELECT * FROM Table6;",
          "79: } {}",
          "82: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}