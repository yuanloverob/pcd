{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "94febb3a77a8c79bc090119585fc7878f44bbf38",
      "candidate_info": {
        "commit_hash": "94febb3a77a8c79bc090119585fc7878f44bbf38",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/94febb3a77a8c79bc090119585fc7878f44bbf38",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Improved detection of corrupt shadow tables in FTS3.  Enable the debugging special-inserts for FTS3 for both SQLITE_DEBUG and SQLITE_TEST.\n\nFossilOrigin-Name: 04b2873be5aedeb1c4325cf36c4b5d180f929a641caf1e3829c03778adb29c8e",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4337:   int bIncrOk = (bOptOk",
          "4338:    && pCsr->bDesc==pTab->bDescIdx",
          "4339:    && p->nToken<=MAX_INCR_PHRASE_TOKENS && p->nToken>0",
          "4341:    && pTab->bNoIncrDoclist==0",
          "4342: #endif",
          "4343:   );",
          "",
          "[Removed Lines]",
          "4340: #ifdef SQLITE_TEST",
          "",
          "[Added Lines]",
          "4340: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "298: #endif",
          "303:   int bNoIncrDoclist;",
          "",
          "[Removed Lines]",
          "300: #ifdef SQLITE_TEST",
          "",
          "[Added Lines]",
          "300: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <string.h>",
          "24: #include <assert.h>",
          "25: #include <stdlib.h>",
          "28: #define FTS_MAX_APPENDABLE_HEIGHT 16",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "26: #include <stdio.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2030:     nPrefix = fts3PrefixCompress(pTree->zTerm, pTree->nTerm, zTerm, nTerm);",
          "2031:     nSuffix = nTerm-nPrefix;",
          "2033:     nReq += sqlite3Fts3VarintLen(nPrefix)+sqlite3Fts3VarintLen(nSuffix)+nSuffix;",
          "2034:     if( nReq<=p->nNodeSize || !pTree->zTerm ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2036:     if( nSuffix<=0 ) return FTS_CORRUPT_VTAB;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2324:   nData += sqlite3Fts3PutVarint(&pWriter->aData[nData], nPrefix);",
          "2325:   nData += sqlite3Fts3PutVarint(&pWriter->aData[nData], nSuffix);",
          "2326:   memcpy(&pWriter->aData[nData], &zTerm[nPrefix], nSuffix);",
          "2327:   nData += nSuffix;",
          "2328:   nData += sqlite3Fts3PutVarint(&pWriter->aData[nData], nDoclist);",
          "2329:   memcpy(&pWriter->aData[nData], aDoclist, nDoclist);",
          "2330:   pWriter->nData = nData + nDoclist;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2331:   assert( nSuffix>0 );",
          "2335:   assert( nDoclist>0 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2345:       pWriter->zTerm = zNew;",
          "2346:     }",
          "2347:     assert( pWriter->zTerm==pWriter->zMalloc );",
          "2348:     memcpy(pWriter->zTerm, zTerm, nTerm);",
          "2349:   }else{",
          "2350:     pWriter->zTerm = (char *)zTerm;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2355:     assert( nTerm>0 );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2653:     pMsr->aBuffer = pNew;",
          "2654:   }",
          "2656:   memcpy(pMsr->aBuffer, pList, nList);",
          "2657:   return SQLITE_OK;",
          "2658: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2664:   assert( nList>0 );",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3842:     nPrefix = fts3PrefixCompress(pNode->key.a, pNode->key.n, zTerm, nTerm);",
          "3843:     nSuffix = nTerm - nPrefix;",
          "3844:     nSpace  = sqlite3Fts3VarintLen(nPrefix);",
          "3845:     nSpace += sqlite3Fts3VarintLen(nSuffix) + nSuffix;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3853:     if( NEVER(nSuffix<=0) ) return FTS_CORRUPT_VTAB;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "5360:     rc = fts3DoIncrmerge(p, &zVal[6]);",
          "5361:   }else if( nVal>10 && 0==sqlite3_strnicmp(zVal, \"automerge=\", 10) ){",
          "5362:     rc = fts3DoAutoincrmerge(p, &zVal[10]);",
          "5374:   }else{",
          "5376:   }",
          "5378:   return rc;",
          "5379: }",
          "",
          "[Removed Lines]",
          "5363: #ifdef SQLITE_TEST",
          "5364:   }else if( nVal>9 && 0==sqlite3_strnicmp(zVal, \"nodesize=\", 9) ){",
          "5365:     p->nNodeSize = atoi(&zVal[9]);",
          "5366:     rc = SQLITE_OK;",
          "5367:   }else if( nVal>11 && 0==sqlite3_strnicmp(zVal, \"maxpending=\", 9) ){",
          "5368:     p->nMaxPendingData = atoi(&zVal[11]);",
          "5369:     rc = SQLITE_OK;",
          "5370:   }else if( nVal>21 && 0==sqlite3_strnicmp(zVal, \"test-no-incr-doclist=\", 21) ){",
          "5371:     p->bNoIncrDoclist = atoi(&zVal[21]);",
          "5372:     rc = SQLITE_OK;",
          "5373: #endif",
          "5375:     rc = SQLITE_ERROR;",
          "",
          "[Added Lines]",
          "5373: #if defined(SQLITE_DEBUG) || defined(SQLITE_TEST)",
          "5375:     int v;",
          "5376:     if( nVal>9 && 0==sqlite3_strnicmp(zVal, \"nodesize=\", 9) ){",
          "5377:       v = atoi(&zVal[9]);",
          "5378:       if( v>=24 && v<=p->nPgsz-35 ) p->nNodeSize = v;",
          "5379:       rc = SQLITE_OK;",
          "5380:     }else if( nVal>11 && 0==sqlite3_strnicmp(zVal, \"maxpending=\", 9) ){",
          "5381:       v = atoi(&zVal[11]);",
          "5382:       if( v>=64 && v<=FTS3_MAX_PENDING_DATA ) p->nMaxPendingData = v;",
          "5383:       rc = SQLITE_OK;",
          "5384:     }else if( nVal>21 && 0==sqlite3_strnicmp(zVal,\"test-no-incr-doclist=\",21) ){",
          "5385:       p->bNoIncrDoclist = atoi(&zVal[21]);",
          "5386:       rc = SQLITE_OK;",
          "5387:     }",
          "5388: #endif",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bae76a5c40703871e5ce4cd23d6fae5a3836606f524a63b01ac828c7a602c5e9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "119e1ffc5eb7783dbee1553f0239c3fea587a11d",
      "candidate_info": {
        "commit_hash": "119e1ffc5eb7783dbee1553f0239c3fea587a11d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/119e1ffc5eb7783dbee1553f0239c3fea587a11d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "The defragmentPage() routine detects corruption in the first-free-slot fields at offset 1 in the header and throws an error, rather than asserting.\n\nFossilOrigin-Name: fb125bd338ab32b33d02fe61b76497b6d4a2a160056d6e759e15c94903e61a41",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e3fde56da46e9592143b8beeee5eba4d74b8ef67edb7bf73a85edd2e0f7a8d21",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1433:   if( (int)data[hdr+7]<=nMaxFrag ){",
          "1434:     int iFree = get2byte(&data[hdr+1]);",
          "1440:     if( iFree ){",
          "1441:       int iFree2 = get2byte(&data[iFree]);",
          "1442:       if( iFree2>usableSize-4 ) return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "[Removed Lines]",
          "1439:     assert( iFree<=usableSize-4 );",
          "",
          "[Added Lines]",
          "1435:     if( iFree>usableSize-4 ) return SQLITE_CORRUPT_PAGE(pPage);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fcb02429ecf97820b363f4ad505afa2f3d779dc5",
      "candidate_info": {
        "commit_hash": "fcb02429ecf97820b363f4ad505afa2f3d779dc5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fcb02429ecf97820b363f4ad505afa2f3d779dc5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "test/corruptL.test",
          "test/memdb1.test"
        ],
        "message": "When deserializing a database (sqlite3_deserialize()), do not attempt to parse the schema before the data is loaded.\n\nFossilOrigin-Name: 4e1b005e8b397a22161a6b89cbd3f17bda70a6e0a86d8abdc61856edf2a74da4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "test/corruptL.test||test/corruptL.test",
          "test/memdb1.test||test/memdb1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c4f0568fde1d4070e7522ec36c0958be7426076002a7fa2da12a46411ab2e92d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:     sqlite3BtreeEnterAll(db);",
          "235:     db->init.iDb = 0;",
          "236:     db->mDbFlags &= ~(DBFLAG_SchemaKnownOk);",
          "238:     sqlite3BtreeLeaveAll(db);",
          "239:     assert( zErrDyn==0 || rc!=SQLITE_OK );",
          "240:   }",
          "",
          "[Removed Lines]",
          "237:     rc = sqlite3Init(db, &zErrDyn);",
          "",
          "[Added Lines]",
          "237:     if( !REOPEN_AS_MEMDB(db) ){",
          "238:       rc = sqlite3Init(db, &zErrDyn);",
          "239:     }",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "123: do_catchsql_test 1.1 {",
          "124:   PRAGMA cell_size_check = off;",
          "125:   DROP INDEX t1x1;",
          "128: do_catchsql_test 1.2 {",
          "129:   SELECT sum(s+length(b)) FROM t1 WHERE a IN (110,10,150) AND q IS NULL;",
          "132: do_catchsql_test 1.3 {",
          "133:   REINDEX t1;",
          "136: #-------------------------------------------------------------------------",
          "137: reset_db",
          "",
          "[Removed Lines]",
          "126: } {1 {no such index: t1x1}}",
          "130: } {1 {no such table: t1}}",
          "134: } {1 {unable to identify the object to be reindexed}}",
          "",
          "[Added Lines]",
          "126: } {1 {database disk image is malformed}}",
          "130: } {1 {database disk image is malformed}}",
          "134: } {1 {database disk image is malformed}}",
          "136: do_catchsql_test 1.4 {",
          "137:   PRAGMA integrity_check",
          "138: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "test/memdb1.test||test/memdb1.test": [
          "File: test/memdb1.test -> test/memdb1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:   lappend rc $msg",
          "186: } {1 {wrong # args: should be \"db serialize ?DATABASE?\"}}",
          "188: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188: #-------------------------------------------------------------------------",
          "189: reset_db",
          "190: do_execsql_test 700 {",
          "191:   CREATE TABLE t1(a, b);",
          "192:   PRAGMA schema_version = 0;",
          "193: }",
          "194: do_test 710 {",
          "195:   set ser [db serialize main]",
          "196:   db close",
          "197:   sqlite3 db",
          "198:   db deserialize main $ser",
          "199:   catchsql {",
          "200:     CREATE VIRTUAL TABLE t1 USING rtree(id, a, b, c, d);",
          "201:   }",
          "202: } {1 {table t1 already exists}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bcb0e64c82f21787a1996eac3539fba1d9fc690f",
      "candidate_info": {
        "commit_hash": "bcb0e64c82f21787a1996eac3539fba1d9fc690f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bcb0e64c82f21787a1996eac3539fba1d9fc690f",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Performance optimizations in the rtreeStepToLeaf() routine of RTree.\n\nFossilOrigin-Name: 4e34e3615ff31f4a6432033797b2e1a6604007ea0e501d714ecb362632776150",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1565:   eInt = pRtree->eCoordType==RTREE_COORD_INT32;",
          "1566:   while( (p = rtreeSearchPointFirst(pCur))!=0 && p->iLevel>0 ){",
          "1567:     pNode = rtreeNodeOfFirstSearchPoint(pCur, &rc);",
          "1568:     if( rc ) return rc;",
          "1569:     nCell = NCELL(pNode);",
          "1570:     assert( nCell<200 );",
          "1571:     while( p->iCell<nCell ){",
          "1572:       sqlite3_rtree_dbl rScore = (sqlite3_rtree_dbl)-1;",
          "1574:       eWithin = FULLY_WITHIN;",
          "1575:       for(ii=0; ii<nConstraint; ii++){",
          "1576:         RtreeConstraint *pConstraint = pCur->aConstraint + ii;",
          "",
          "[Removed Lines]",
          "1573:       u8 *pCellData = pNode->zData + (4+pRtree->nBytesPerCell*p->iCell);",
          "",
          "[Added Lines]",
          "1567:     u8 *pCellData;",
          "1572:     pCellData = pNode->zData + (4+pRtree->nBytesPerCell*p->iCell);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1583:         }else{",
          "1584:           rtreeNonleafConstraint(pConstraint, eInt, pCellData, &eWithin);",
          "1585:         }",
          "1587:       }",
          "1589:       if( eWithin==NOT_WITHIN ) continue;",
          "1590:       x.iLevel = p->iLevel - 1;",
          "1591:       if( x.iLevel ){",
          "1592:         x.id = readInt64(pCellData);",
          "",
          "[Removed Lines]",
          "1586:         if( eWithin==NOT_WITHIN ) break;",
          "1588:       p->iCell++;",
          "",
          "[Added Lines]",
          "1587:         if( eWithin==NOT_WITHIN ){",
          "1588:           p->iCell++;",
          "1589:           pCellData += pRtree->nBytesPerCell;",
          "1590:           break;",
          "1591:         }",
          "1594:       p->iCell++;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 39be3c61bd809cc89bdfdba90afc391ac9c2f81dfd8bb68a9b085b0ca8cd1fba",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7579a53fb91ec9c0a473bc928518239671235a2",
      "candidate_info": {
        "commit_hash": "e7579a53fb91ec9c0a473bc928518239671235a2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7579a53fb91ec9c0a473bc928518239671235a2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Further simplifications to window-function code.\n\nFossilOrigin-Name: 5fe15c1d8383989257e11d1806e6b035acacd1b504ae385ba58d20db10f26eee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 77b0db22d6c7a031f332bfcf1c8fcd94e464de9f2396f0327ee761a30ebc8b60",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1599:         VdbeCoverage(v);",
          "1600:         sqlite3ReleaseTempReg(pParse, regTmp);",
          "1601:       }",
          "1634:       if( pWin->bExprArgs ){",
          "1635:         int iStart = sqlite3VdbeCurrentAddr(v);",
          "1636:         VdbeOp *pOp, *pEnd;",
          "",
          "[Removed Lines]",
          "1611:       if( pWin->eFrmType==TK_RANGE",
          "1612:        && pWin->eStart==pWin->eEnd",
          "1613:        && pWin->eStart==TK_PRECEDING",
          "1614:       ){",
          "1615:         int regPeer = sqlite3GetTempReg(pParse);",
          "1616:         int regString = sqlite3GetTempReg(pParse);",
          "1617:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1618:         VdbeModuleComment((v, \"windowAggStep \\\"peer is numeric?\\\" test\"));",
          "1620:         sqlite3VdbeAddOp3(v, OP_Le, p->regStart, lbl, p->regEnd);",
          "1622:         windowReadPeerValues(p, csr, regPeer);",
          "1623:         sqlite3VdbeAddOp2(v, OP_IsNull, regPeer, lbl);",
          "1624:         sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1625:         addrIf2 = sqlite3VdbeAddOp3(v, OP_Lt, regString, 0, regPeer);",
          "1626:         sqlite3ReleaseTempReg(pParse, regPeer);",
          "1627:         sqlite3ReleaseTempReg(pParse, regString);",
          "1628:         sqlite3VdbeResolveLabel(v, lbl);",
          "1629:         VdbeModuleComment((v, \"windowAggStep end \\\"peer is numeric?\\\"\"));",
          "1630:         assert( pWin->eStart==TK_PRECEDING || pWin->eStart==TK_FOLLOWING );",
          "1631:         assert( pMWin->pOrderBy && pMWin->pOrderBy->nExpr==1 );",
          "1632:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2180:     windowAggFinal(p, 0);",
          "2181:   }",
          "2182:   addrContinue = sqlite3VdbeCurrentAddr(v);",
          "2183:   switch( op ){",
          "2184:     case WINDOW_RETURN_ROW:",
          "2185:       csr = p->current.csr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2155:   if( pMWin->eStart==pMWin->eEnd && regCountdown",
          "2156:    && pMWin->eFrmType==TK_RANGE && op==WINDOW_AGGINVERSE",
          "2157:   ){",
          "2158:     int regRowid1 = sqlite3GetTempReg(pParse);",
          "2159:     int regRowid2 = sqlite3GetTempReg(pParse);",
          "2160:     sqlite3VdbeAddOp2(v, OP_Rowid, p->start.csr, regRowid1);",
          "2161:     sqlite3VdbeAddOp2(v, OP_Rowid, p->end.csr, regRowid2);",
          "2162:     sqlite3VdbeAddOp3(v, OP_Ge, regRowid2, lblDone, regRowid1);",
          "2163:     sqlite3ReleaseTempReg(pParse, regRowid1);",
          "2164:     sqlite3ReleaseTempReg(pParse, regRowid2);",
          "2165:     assert( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING );",
          "2166:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2231:   if( bPeer ){",
          "2232:     int nReg = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "2250:     windowReadPeerValues(p, csr, regTmp);",
          "2251:     windowIfNewPeer(pParse, pMWin->pOrderBy, regTmp, reg, addrContinue);",
          "2252:     sqlite3ReleaseTempRange(pParse, regTmp, nReg);",
          "",
          "[Removed Lines]",
          "2233:     int regTmp;",
          "2238:     if( pMWin->eStart==TK_FOLLOWING && pMWin->eEnd==TK_FOLLOWING",
          "2239:      && pMWin->eFrmType==TK_RANGE && op==WINDOW_AGGINVERSE",
          "2240:     ){",
          "2241:       int regRowid1 = sqlite3GetTempReg(pParse);",
          "2242:       int regRowid2 = sqlite3GetTempReg(pParse);",
          "2243:       sqlite3VdbeAddOp2(v, OP_Rowid, p->start.csr, regRowid1);",
          "2244:       sqlite3VdbeAddOp2(v, OP_Rowid, p->end.csr, regRowid2);",
          "2245:       sqlite3VdbeAddOp3(v, OP_Ge, regRowid2, lblDone, regRowid1);",
          "2246:       sqlite3ReleaseTempReg(pParse, regRowid1);",
          "2247:       sqlite3ReleaseTempReg(pParse, regRowid2);",
          "2248:     }",
          "2249:     regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "",
          "[Added Lines]",
          "2218:     int regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2761:   if( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING ){",
          "2763:   }",
          "2764:   if( pMWin->eEnd==TK_PRECEDING || pMWin->eEnd==TK_FOLLOWING ){",
          "2766:   }",
          "",
          "[Removed Lines]",
          "2762:     s.regStart = ++pParse->nMem;",
          "2765:     s.regEnd = ++pParse->nMem;",
          "",
          "[Added Lines]",
          "2733:     regStart = ++pParse->nMem;",
          "2736:     regEnd = ++pParse->nMem;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2818:   s.regArg = windowInitAccum(pParse, pMWin);",
          "2823:   }",
          "2827:   }",
          "2830:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2834:     windowAggFinal(&s, 0);",
          "",
          "[Removed Lines]",
          "2820:   if( s.regStart ){",
          "2821:     sqlite3ExprCode(pParse, pMWin->pStart, s.regStart);",
          "2822:     windowCheckValue(pParse, s.regStart, 0 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2824:   if( s.regEnd ){",
          "2825:     sqlite3ExprCode(pParse, pMWin->pEnd, s.regEnd);",
          "2826:     windowCheckValue(pParse, s.regEnd, 1 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2829:   if( pMWin->eFrmType!=TK_RANGE && pMWin->eStart==pMWin->eEnd && s.regStart ){",
          "2831:     int addrGe = sqlite3VdbeAddOp3(v, op, s.regStart, 0, s.regEnd);",
          "",
          "[Added Lines]",
          "2791:   if( regStart ){",
          "2792:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "2793:     windowCheckValue(pParse, regStart, 0 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2795:   if( regEnd ){",
          "2796:     sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "2797:     windowCheckValue(pParse, regEnd, 1 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2800:   if( pMWin->eFrmType!=TK_RANGE && pMWin->eStart==pMWin->eEnd && regStart ){",
          "2802:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2839:     sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "2840:     sqlite3VdbeJumpHere(v, addrGe);",
          "2841:   }",
          "2843:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "2845:   }",
          "2847:   if( pMWin->eStart!=TK_UNBOUNDED ){",
          "",
          "[Removed Lines]",
          "2842:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eFrmType!=TK_RANGE && s.regEnd ){",
          "2844:     sqlite3VdbeAddOp3(v, OP_Subtract, s.regStart, s.regEnd, s.regStart);",
          "",
          "[Added Lines]",
          "2813:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eFrmType!=TK_RANGE && regEnd ){",
          "2815:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2873:       if( pMWin->eFrmType==TK_RANGE ){",
          "2874:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "2875:         int addrNext = sqlite3VdbeCurrentAddr(v);",
          "2878:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2879:         sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNext);",
          "2880:         sqlite3VdbeResolveLabel(v, lbl);",
          "2881:       }else{",
          "2884:       }",
          "2885:     }",
          "2886:   }else",
          "2887:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2888:     int bRPS = (pMWin->eStart==TK_PRECEDING && pMWin->eFrmType==TK_RANGE);",
          "2891:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2893:   }else{",
          "2894:     int addr = 0;",
          "2895:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "",
          "[Removed Lines]",
          "2876:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, s.regEnd, s.end.csr, lbl);",
          "2877:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2882:         windowCodeOp(&s, WINDOW_RETURN_ROW, s.regEnd, 0);",
          "2883:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2889:     windowCodeOp(&s, WINDOW_AGGSTEP, s.regEnd, 0);",
          "2890:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2892:     if( !bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "[Added Lines]",
          "2847:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "2848:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2853:         windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 0);",
          "2854:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2860:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "2861:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2863:     if( !bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2897:       if( pMWin->eFrmType==TK_RANGE ){",
          "2898:         int lbl = 0;",
          "2899:         addr = sqlite3VdbeCurrentAddr(v);",
          "2901:           lbl = sqlite3VdbeMakeLabel(pParse);",
          "2903:         }",
          "2904:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2907:           sqlite3VdbeAddOp2(v, OP_Goto, 0, addr);",
          "2908:           sqlite3VdbeResolveLabel(v, lbl);",
          "2909:         }",
          "2910:       }else{",
          "2913:           VdbeCoverage(v);",
          "2914:         }",
          "2915:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2918:       }",
          "2919:     }",
          "2920:   }",
          "",
          "[Removed Lines]",
          "2900:         if( s.regEnd ){",
          "2902:           windowCodeRangeTest(&s, OP_Ge, s.current.csr,s.regEnd,s.end.csr,lbl);",
          "2905:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2906:         if( s.regEnd ){",
          "2911:         if( s.regEnd ){",
          "2912:           addr = sqlite3VdbeAddOp3(v, OP_IfPos, s.regEnd, 0, 1);",
          "2916:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2917:         if( s.regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Added Lines]",
          "2871:         if( regEnd ){",
          "2873:           windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "2876:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2877:         if( regEnd ){",
          "2882:         if( regEnd ){",
          "2883:           addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2887:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2888:         if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2933:   VdbeCoverage(v);",
          "2934:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2935:     int bRPS = (pMWin->eStart==TK_PRECEDING && pMWin->eFrmType==TK_RANGE);",
          "2938:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2939:   }else if( pMWin->eStart==TK_FOLLOWING ){",
          "2940:     int addrStart;",
          "",
          "[Removed Lines]",
          "2936:     windowCodeOp(&s, WINDOW_AGGSTEP, s.regEnd, 0);",
          "2937:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "[Added Lines]",
          "2907:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "2908:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2944:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2945:     if( pMWin->eFrmType==TK_RANGE ){",
          "2946:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2948:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "2949:     }else",
          "2950:     if( pMWin->eEnd==TK_UNBOUNDED ){",
          "2951:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2953:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, 0, 1);",
          "2954:     }else{",
          "2955:       assert( pMWin->eEnd==TK_FOLLOWING );",
          "2956:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2959:     }",
          "2960:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2961:     sqlite3VdbeJumpHere(v, addrBreak2);",
          "",
          "[Removed Lines]",
          "2947:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 1);",
          "2952:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, s.regStart, 1);",
          "2957:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, s.regEnd, 1);",
          "2958:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 1);",
          "",
          "[Added Lines]",
          "2918:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "2923:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, regStart, 1);",
          "2928:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 1);",
          "2929:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2970:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2971:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "2972:     addrBreak = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "2974:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2975:     sqlite3VdbeJumpHere(v, addrBreak);",
          "2976:   }",
          "",
          "[Removed Lines]",
          "2973:     windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "[Added Lines]",
          "2944:     windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:   ) FROM t1;",
          "298: } {7 {} 8 {} abc 1001}",
          "300: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300: #-------------------------------------------------------------------------",
          "301: reset_db",
          "302: do_execsql_test 7.0 {",
          "303:   CREATE TABLE t1(a, c);",
          "304:   CREATE INDEX i1 ON t1(a);",
          "306:   INSERT INTO t1 VALUES(NULL, 46);",
          "307:   INSERT INTO t1 VALUES(NULL, 45);",
          "308:   INSERT INTO t1 VALUES(7,  997);",
          "309:   INSERT INTO t1 VALUES(7,  1000);",
          "310:   INSERT INTO t1 VALUES(8,  997);",
          "311:   INSERT INTO t1 VALUES(8,  1000);",
          "312:   INSERT INTO t1 VALUES('abc', 1001);",
          "313:   INSERT INTO t1 VALUES('abc', 1004);",
          "314:   INSERT INTO t1 VALUES('xyz', 3333);",
          "315: }",
          "317: do_execsql_test 7.1 {",
          "318:   SELECT a, max(c) OVER (",
          "319:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING",
          "320:   ) FROM t1;",
          "321: } {{} 46 {} 46  7 {} 7 {} 8 {} 8 {}  abc 1004 abc 1004 xyz 3333}",
          "322: do_execsql_test 7.2 {",
          "323:   SELECT a, min(c) OVER (",
          "324:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING",
          "325:   ) FROM t1;",
          "326: } {{} 45 {} 45  7 {} 7 {} 8 {} 8 {}  abc 1001 abc 1001 xyz 3333}",
          "328: do_execsql_test 7.3 {",
          "329:   SELECT a, max(c) OVER (",
          "330:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 2 PRECEDING",
          "331:   ) FROM t1;",
          "332: } {{} 46 {} 46  7 {} 7 {} 8 {} 8 {}  abc 1004 abc 1004 xyz 3333}",
          "333: do_execsql_test 7.4 {",
          "334:   SELECT a, min(c) OVER (",
          "335:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 2 PRECEDING",
          "336:   ) FROM t1;",
          "337: } {{} 45 {} 45  7 {} 7 {} 8 {} 8 {}  abc 1001 abc 1001 xyz 3333}",
          "",
          "---------------"
        ]
      }
    }
  ]
}