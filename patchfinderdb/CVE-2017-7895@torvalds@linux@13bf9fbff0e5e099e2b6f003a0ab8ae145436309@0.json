{
  "cve_id": "CVE-2017-7895",
  "cve_desc": "The NFSv2 and NFSv3 server implementations in the Linux kernel through 4.10.13 lack certain checks for the end of a buffer, which allows remote attackers to trigger pointer-arithmetic errors or possibly have unspecified other impact via crafted requests, related to fs/nfsd/nfs3xdr.c and fs/nfsd/nfsxdr.c.",
  "repo": "torvalds/linux",
  "patch_hash": "13bf9fbff0e5e099e2b6f003a0ab8ae145436309",
  "patch_info": {
    "commit_hash": "13bf9fbff0e5e099e2b6f003a0ab8ae145436309",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/13bf9fbff0e5e099e2b6f003a0ab8ae145436309",
    "files": [
      "fs/nfsd/nfs3xdr.c",
      "fs/nfsd/nfsxdr.c"
    ],
    "message": "nfsd: stricter decoding of write-like NFSv2/v3 ops\n\nThe NFSv2/v3 code does not systematically check whether we decode past\nthe end of the buffer.  This generally appears to be harmless, but there\nare a few places where we do arithmetic on the pointers involved and\ndon't account for the possibility that a length could be negative.  Add\nchecks to catch these.\n\nReported-by: Tuomas Haanp\u00e4\u00e4 <thaan@synopsys.com>\nReported-by: Ari Kauppi <ari@synopsys.com>\nReviewed-by: NeilBrown <neilb@suse.com>\nCc: stable@vger.kernel.org\nSigned-off-by: J. Bruce Fields <bfields@redhat.com>",
    "before_after_code_files": [
      "fs/nfsd/nfs3xdr.c||fs/nfsd/nfs3xdr.c",
      "fs/nfsd/nfsxdr.c||fs/nfsd/nfsxdr.c"
    ]
  },
  "patch_diff": {
    "fs/nfsd/nfs3xdr.c||fs/nfsd/nfs3xdr.c": [
      "File: fs/nfsd/nfs3xdr.c -> fs/nfsd/nfs3xdr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "369:  args->count = ntohl(*p++);",
      "370:  args->stable = ntohl(*p++);",
      "371:  len = args->len = ntohl(*p++);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "372:  if ((void *)p > head->iov_base + head->iov_len)",
      "373:   return 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "473:  old = (char*)p;",
      "474:  vec = &rqstp->rq_arg.head[0];",
      "475:  avail = vec->iov_len - (old - (char*)vec->iov_base);",
      "476:  while (len && avail && *old) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "477:  if ((void *)old > vec->iov_base + vec->iov_len)",
      "478:   return 0;",
      "",
      "---------------"
    ],
    "fs/nfsd/nfsxdr.c||fs/nfsd/nfsxdr.c": [
      "File: fs/nfsd/nfsxdr.c -> fs/nfsd/nfsxdr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "304:  hdr = (void*)p - head->iov_base;",
      "305:  dlen = head->iov_len + rqstp->rq_arg.page_len - hdr;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "305:  if (hdr > head->iov_len)",
      "306:   return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "38a70315599dedacd9ff3bd1016f9048c9d0ad12",
      "candidate_info": {
        "commit_hash": "38a70315599dedacd9ff3bd1016f9048c9d0ad12",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/38a70315599dedacd9ff3bd1016f9048c9d0ad12",
        "files": [
          "fs/nfsd/nfs3proc.c",
          "fs/nfsd/nfs3xdr.c",
          "fs/nfsd/nfsproc.c",
          "fs/nfsd/nfsxdr.c",
          "fs/nfsd/xdr.h",
          "fs/nfsd/xdr3.h",
          "fs/nfsd/xdr4.h",
          "include/linux/sunrpc/svc.h",
          "net/sunrpc/svc.c"
        ],
        "message": "NFSD: Clean up legacy NFS SYMLINK argument XDR decoders\n\nMove common code in NFSD's legacy SYMLINK decoders into a helper.\nThe immediate benefits include:\n\n - one fewer data copies on transports that support DDP\n - consistent error checking across all versions\n - reduction of code duplication\n - support for both legal forms of SYMLINK requests on RDMA\n   transports for all versions of NFS (in particular, NFSv2, for\n   completeness)\n\nIn the long term, this helper is an appropriate spot to perform a\nper-transport call-out to fill the pathname argument using, say,\nRDMA Reads.\n\nFilling the pathname in the proc function also means that eventually\nthe incoming filehandle can be interpreted so that filesystem-\nspecific memory can be allocated as a sink for the pathname\nargument, rather than using anonymous pages.\n\nSigned-off-by: Chuck Lever <chuck.lever@oracle.com>\nSigned-off-by: J. Bruce Fields <bfields@redhat.com>",
        "before_after_code_files": [
          "fs/nfsd/nfs3proc.c||fs/nfsd/nfs3proc.c",
          "fs/nfsd/nfs3xdr.c||fs/nfsd/nfs3xdr.c",
          "fs/nfsd/nfsproc.c||fs/nfsd/nfsproc.c",
          "fs/nfsd/nfsxdr.c||fs/nfsd/nfsxdr.c",
          "fs/nfsd/xdr.h||fs/nfsd/xdr.h",
          "fs/nfsd/xdr3.h||fs/nfsd/xdr3.h",
          "fs/nfsd/xdr4.h||fs/nfsd/xdr4.h",
          "include/linux/sunrpc/svc.h||include/linux/sunrpc/svc.h",
          "net/sunrpc/svc.c||net/sunrpc/svc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/nfsd/nfs3xdr.c||fs/nfsd/nfs3xdr.c",
            "fs/nfsd/nfsxdr.c||fs/nfsd/nfsxdr.c"
          ],
          "candidate": [
            "fs/nfsd/nfs3xdr.c||fs/nfsd/nfs3xdr.c",
            "fs/nfsd/nfsxdr.c||fs/nfsd/nfsxdr.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/nfsd/nfs3proc.c||fs/nfsd/nfs3proc.c": [
          "File: fs/nfsd/nfs3proc.c -> fs/nfsd/nfs3proc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "283:  struct nfsd3_diropres *resp = rqstp->rq_resp;",
          "284:  __be32 nfserr;",
          "286:  dprintk(\"nfsd: SYMLINK(3)  %s %.*s -> %.*s\\n\",",
          "287:     SVCFH_fmt(&argp->ffh),",
          "288:     argp->flen, argp->fname,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "286:  if (argp->tlen == 0)",
          "287:   RETURN_STATUS(nfserr_inval);",
          "288:  if (argp->tlen > NFS3_MAXPATHLEN)",
          "289:   RETURN_STATUS(nfserr_nametoolong);",
          "291:  argp->tname = svc_fill_symlink_pathname(rqstp, &argp->first,",
          "292:       argp->tlen);",
          "293:  if (IS_ERR(argp->tname))",
          "294:   RETURN_STATUS(nfserrno(PTR_ERR(argp->tname)));",
          "",
          "---------------"
        ],
        "fs/nfsd/nfs3xdr.c||fs/nfsd/nfs3xdr.c": [
          "File: fs/nfsd/nfs3xdr.c -> fs/nfsd/nfs3xdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "481: nfs3svc_decode_symlinkargs(struct svc_rqst *rqstp, __be32 *p)",
          "482: {",
          "483:  struct nfsd3_symlinkargs *args = rqstp->rq_argp;",
          "488:  if (!(p = decode_fh(p, &args->ffh)) ||",
          "491:   return 0;",
          "492:  p = decode_sattr3(p, &args->attrs);",
          "529:  return 1;",
          "530: }",
          "",
          "[Removed Lines]",
          "484:  unsigned int len, avail;",
          "485:  char *old, *new;",
          "486:  struct kvec *vec;",
          "489:      !(p = decode_filename(p, &args->fname, &args->flen))",
          "490:   )",
          "499:  len = ntohl(*p++);",
          "500:  if (len == 0 || len > NFS3_MAXPATHLEN || len >= PAGE_SIZE)",
          "501:   return 0;",
          "502:  args->tname = new = page_address(*(rqstp->rq_next_page++));",
          "503:  args->tlen = len;",
          "505:  old = (char*)p;",
          "506:  vec = &rqstp->rq_arg.head[0];",
          "507:  if ((void *)old > vec->iov_base + vec->iov_len)",
          "508:   return 0;",
          "509:  avail = vec->iov_len - (old - (char*)vec->iov_base);",
          "510:  while (len && avail && *old) {",
          "512:   len--;",
          "513:   avail--;",
          "514:  }",
          "516:  if (len && !avail && rqstp->rq_arg.page_len) {",
          "517:   avail = min_t(unsigned int, rqstp->rq_arg.page_len, PAGE_SIZE);",
          "518:   old = page_address(rqstp->rq_arg.pages[0]);",
          "519:  }",
          "520:  while (len && avail && *old) {",
          "522:   len--;",
          "523:   avail--;",
          "524:  }",
          "526:  if (len)",
          "527:   return 0;",
          "",
          "[Added Lines]",
          "484:  char *base = (char *)p;",
          "485:  size_t dlen;",
          "488:      !(p = decode_filename(p, &args->fname, &args->flen)))",
          "492:  args->tlen = ntohl(*p++);",
          "494:  args->first.iov_base = p;",
          "495:  args->first.iov_len = rqstp->rq_arg.head[0].iov_len;",
          "496:  args->first.iov_len -= (char *)p - base;",
          "498:  dlen = args->first.iov_len + rqstp->rq_arg.page_len +",
          "499:         rqstp->rq_arg.tail[0].iov_len;",
          "500:  if (dlen < XDR_QUADLEN(args->tlen) << 2)",
          "501:   return 0;",
          "",
          "---------------"
        ],
        "fs/nfsd/nfsproc.c||fs/nfsd/nfsproc.c": [
          "File: fs/nfsd/nfsproc.c -> fs/nfsd/nfsproc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "449:  struct svc_fh newfh;",
          "450:  __be32  nfserr;",
          "452:  dprintk(\"nfsd: SYMLINK  %s %.*s -> %.*s\\n\",",
          "453:   SVCFH_fmt(&argp->ffh), argp->flen, argp->fname,",
          "454:   argp->tlen, argp->tname);",
          "456:  fh_init(&newfh, NFS_FHSIZE);",
          "463:  nfserr = nfsd_symlink(rqstp, &argp->ffh, argp->fname, argp->flen,",
          "464:        argp->tname, &newfh);",
          "",
          "[Removed Lines]",
          "462:  argp->tname[argp->tlen] = '\\0';",
          "",
          "[Added Lines]",
          "452:  if (argp->tlen > NFS_MAXPATHLEN)",
          "453:   return nfserr_nametoolong;",
          "455:  argp->tname = svc_fill_symlink_pathname(rqstp, &argp->first,",
          "456:       argp->tlen);",
          "457:  if (IS_ERR(argp->tname))",
          "458:   return nfserrno(PTR_ERR(argp->tname));",
          "",
          "---------------"
        ],
        "fs/nfsd/nfsxdr.c||fs/nfsd/nfsxdr.c": [
          "File: fs/nfsd/nfsxdr.c -> fs/nfsd/nfsxdr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:  return p;",
          "71: }",
          "89: static __be32 *",
          "90: decode_sattr(__be32 *p, struct iattr *iap)",
          "91: {",
          "",
          "[Removed Lines]",
          "73: static __be32 *",
          "74: decode_pathname(__be32 *p, char **namp, unsigned int *lenp)",
          "75: {",
          "76:  char  *name;",
          "77:  unsigned int i;",
          "79:  if ((p = xdr_decode_string_inplace(p, namp, lenp, NFS_MAXPATHLEN)) != NULL) {",
          "80:   for (i = 0, name = *namp; i < *lenp; i++, name++) {",
          "81:    if (*name == '\\0')",
          "82:     return NULL;",
          "83:   }",
          "84:  }",
          "86:  return p;",
          "87: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "384: nfssvc_decode_symlinkargs(struct svc_rqst *rqstp, __be32 *p)",
          "385: {",
          "386:  struct nfsd_symlinkargs *args = rqstp->rq_argp;",
          "388:  if (   !(p = decode_fh(p, &args->ffh))",
          "391:   return 0;",
          "395: }",
          "397: int",
          "",
          "[Removed Lines]",
          "389:      || !(p = decode_filename(p, &args->fname, &args->flen))",
          "390:      || !(p = decode_pathname(p, &args->tname, &args->tlen)))",
          "392:  p = decode_sattr(p, &args->attrs);",
          "394:  return xdr_argsize_check(rqstp, p);",
          "",
          "[Added Lines]",
          "371:  char *base = (char *)p;",
          "372:  size_t xdrlen;",
          "375:      || !(p = decode_filename(p, &args->fname, &args->flen)))",
          "378:  args->tlen = ntohl(*p++);",
          "379:  if (args->tlen == 0)",
          "380:   return 0;",
          "382:  args->first.iov_base = p;",
          "383:  args->first.iov_len = rqstp->rq_arg.head[0].iov_len;",
          "384:  args->first.iov_len -= (char *)p - base;",
          "391:  if (rqstp->rq_arg.page_len) {",
          "392:   if (args->tlen != rqstp->rq_arg.page_len)",
          "393:    return 0;",
          "394:   p = rqstp->rq_arg.tail[0].iov_base;",
          "395:  } else {",
          "396:   xdrlen = XDR_QUADLEN(args->tlen);",
          "397:   if (xdrlen > args->first.iov_len - (8 * sizeof(__be32)))",
          "398:    return 0;",
          "399:   p += xdrlen;",
          "400:  }",
          "401:  decode_sattr(p, &args->attrs);",
          "403:  return 1;",
          "",
          "---------------"
        ],
        "fs/nfsd/xdr.h||fs/nfsd/xdr.h": [
          "File: fs/nfsd/xdr.h -> fs/nfsd/xdr.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:  char *   tname;",
          "73:  unsigned int  tlen;",
          "74:  struct iattr  attrs;",
          "75: };",
          "77: struct nfsd_readdirargs {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75:  struct kvec  first;",
          "",
          "---------------"
        ],
        "fs/nfsd/xdr3.h||fs/nfsd/xdr3.h": [
          "File: fs/nfsd/xdr3.h -> fs/nfsd/xdr3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:  char *   tname;",
          "91:  unsigned int  tlen;",
          "92:  struct iattr  attrs;",
          "93: };",
          "95: struct nfsd3_readdirargs {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:  struct kvec  first;",
          "",
          "---------------"
        ],
        "fs/nfsd/xdr4.h||fs/nfsd/xdr4.h": [
          "File: fs/nfsd/xdr4.h -> fs/nfsd/xdr4.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   struct {",
          "111:    u32 datalen;",
          "112:    char *data;",
          "114:   struct {",
          "115:    u32 specdata1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "113:    struct kvec first;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124: };",
          "125: #define cr_datalen u.link.datalen",
          "126: #define cr_data  u.link.data",
          "127: #define cr_specdata1 u.dev.specdata1",
          "128: #define cr_specdata2 u.dev.specdata2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128: #define cr_first u.link.first",
          "",
          "---------------"
        ],
        "include/linux/sunrpc/svc.h||include/linux/sunrpc/svc.h": [
          "File: include/linux/sunrpc/svc.h -> include/linux/sunrpc/svc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "497: char *     svc_print_addr(struct svc_rqst *, char *, size_t);",
          "498: unsigned int    svc_fill_write_vector(struct svc_rqst *rqstp,",
          "499:       struct kvec *first, size_t total);",
          "501: #define RPC_MAX_ADDRBUFLEN (63U)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "500: char    *svc_fill_symlink_pathname(struct svc_rqst *rqstp,",
          "501:           struct kvec *first, size_t total);",
          "",
          "---------------"
        ],
        "net/sunrpc/svc.c||net/sunrpc/svc.c": [
          "File: net/sunrpc/svc.c -> net/sunrpc/svc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1575:  return i;",
          "1576: }",
          "1577: EXPORT_SYMBOL_GPL(svc_fill_write_vector);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1588: char *svc_fill_symlink_pathname(struct svc_rqst *rqstp, struct kvec *first,",
          "1589:     size_t total)",
          "1590: {",
          "1591:  struct xdr_buf *arg = &rqstp->rq_arg;",
          "1592:  struct page **pages;",
          "1593:  char *result;",
          "1602:  if (total > PAGE_SIZE - 1)",
          "1603:   return ERR_PTR(-ENAMETOOLONG);",
          "1609:  pages = arg->pages;",
          "1610:  WARN_ON_ONCE(arg->page_base != 0);",
          "1611:  if (first->iov_base == 0) {",
          "1612:   result = page_address(*pages);",
          "1613:   result[total] = '\\0';",
          "1614:  } else {",
          "1615:   size_t len, remaining;",
          "1616:   char *dst;",
          "1618:   result = page_address(*(rqstp->rq_next_page++));",
          "1619:   dst = result;",
          "1620:   remaining = total;",
          "1622:   len = min_t(size_t, total, first->iov_len);",
          "1623:   memcpy(dst, first->iov_base, len);",
          "1624:   dst += len;",
          "1625:   remaining -= len;",
          "1628:   if (remaining) {",
          "1629:    len = min_t(size_t, remaining, PAGE_SIZE);",
          "1630:    memcpy(dst, page_address(*pages), len);",
          "1631:    dst += len;",
          "1632:   }",
          "1635:  }",
          "1640:  if (strlen(result) != total)",
          "1641:   return ERR_PTR(-EINVAL);",
          "1642:  return result;",
          "1643: }",
          "1644: EXPORT_SYMBOL_GPL(svc_fill_symlink_pathname);",
          "",
          "---------------"
        ]
      }
    }
  ]
}