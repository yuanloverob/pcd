{
  "cve_id": "CVE-2017-5509",
  "cve_desc": "coders/psd.c in ImageMagick allows remote attackers to have unspecified impact via a crafted PSD file, which triggers an out-of-bounds write.",
  "repo": "ImageMagick/ImageMagick",
  "patch_hash": "d4ec73f866a7c42a2e7f301fcd696e5cb7a7d3ab",
  "patch_info": {
    "commit_hash": "d4ec73f866a7c42a2e7f301fcd696e5cb7a7d3ab",
    "repo": "ImageMagick/ImageMagick",
    "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/d4ec73f866a7c42a2e7f301fcd696e5cb7a7d3ab",
    "files": [
      "coders/psd.c"
    ],
    "message": "https://github.com/ImageMagick/ImageMagick/issues/350",
    "before_after_code_files": [
      "coders/psd.c||coders/psd.c"
    ]
  },
  "patch_diff": {
    "coders/psd.c||coders/psd.c": [
      "File: coders/psd.c -> coders/psd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1118:   length=0;",
      "1119:   for (y=0; y < (ssize_t) image->rows; y++)",
      "1120:     if ((MagickOffsetType) length < sizes[y])",
      "1123:   if (length > row_size + 256) // arbitrary number",
      "1124:     {",
      "1125:       pixels=(unsigned char *) RelinquishMagickMemory(pixels);",
      "",
      "[Removed Lines]",
      "1121:       length=(size_t) sizes[y];",
      "",
      "[Added Lines]",
      "1121:       length=(size_t) sizes[y];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1660:                     (double) layer_info[i].mask.page.height,(double)",
      "1661:                     ((MagickOffsetType) length)-18);",
      "1665:                 if (DiscardBlobBytes(image,(MagickSizeType) (length-18)) == MagickFalse)",
      "1666:                   {",
      "1667:                     layer_info=DestroyLayerInfo(layer_info,number_layers);",
      "",
      "[Removed Lines]",
      "1663:                   Skip over the rest of the layer mask information.",
      "",
      "[Added Lines]",
      "1662:                   Skip over the rest of the layer mask information.",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2602:     packet_size;",
      "2604:   unsigned char",
      "2607:   packet_size=image->depth > 8UL ? 2UL : 1UL;",
      "2608:   compact_pixels=(unsigned char *) AcquireQuantumMemory((9*",
      "2609:     image->columns)+1,packet_size*sizeof(*compact_pixels));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2634:     offset_length;",
      "2636:   unsigned char",
      "2639:   count=0;",
      "2640:   offset_length=0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cb613e9727c63201aeb043564383bd5b740909a4",
      "candidate_info": {
        "commit_hash": "cb613e9727c63201aeb043564383bd5b740909a4",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/cb613e9727c63201aeb043564383bd5b740909a4",
        "files": [
          "coders/psd.c"
        ],
        "message": "Some refactoring.",
        "before_after_code_files": [
          "coders/psd.c||coders/psd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/psd.c||coders/psd.c"
          ],
          "candidate": [
            "coders/psd.c||coders/psd.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/psd.c||coders/psd.c": [
          "File: coders/psd.c -> coders/psd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1249:   {",
          "1250:     if (status != MagickFalse)",
          "1251:       {",
          "1252:         PixelInfo",
          "1253:           color;",
          "1258:         GetPixelInfo(layer_info->mask.image,&color);",
          "1259:         color.red=layer_info->mask.background == 0 ? 0 : QuantumRange;",
          "1260:         color.green=color.red;",
          "",
          "[Removed Lines]",
          "1255:         layer_info->mask.image=CloneImage(image,image->columns,image->rows,",
          "1256:           MagickTrue,exception);",
          "1257:         layer_info->mask.image->alpha_trait=UndefinedPixelTrait;",
          "",
          "[Added Lines]",
          "1252:         PixelInfo",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2172:   MagickSizeType",
          "2173:     current_offset;",
          "2176:     result;",
          "2178:   current_offset=TellBlob(image);",
          "",
          "[Removed Lines]",
          "2175:   ssize_t",
          "",
          "[Added Lines]",
          "2173:   ssize_t",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2229:   unsigned char",
          "2233:     Compress pixels with Packbits encoding.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2400:       {",
          "2401:         length=PSDPackbitsEncodeImage(image,length,pixels,compact_pixels,",
          "2402:           exception);",
          "2403:         count+=WriteBlob(image,length,compact_pixels);",
          "2404:         size_offset+=WritePSDOffset(psd_info,image,length,size_offset);",
          "2405:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2402:         count+=WriteBlob(image,length,compact_pixels);",
          "2403:         size_offset+=WritePSDOffset(psd_info,image,length,size_offset);",
          "2404:       }",
          "2405:   }",
          "2406:   quantum_info=DestroyQuantumInfo(quantum_info);",
          "2407:   return(count);",
          "2408: }",
          "2410: static unsigned char *AcquireCompactPixels(const Image *image,",
          "2411:   ExceptionInfo *exception)",
          "2412: {",
          "2413:   size_t",
          "2414:     packet_size;",
          "2416:   unsigned char",
          "2419:   packet_size=image->depth > 8UL ? 2UL : 1UL;",
          "2420:   compact_pixels=(unsigned char *) AcquireQuantumMemory((9*",
          "2421:     image->columns)+1,packet_size*sizeof(*compact_pixels));",
          "2422:   if (compact_pixels == (unsigned char *) NULL)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2426:     offset_length;",
          "2428:   unsigned char",
          "2435:   if (next_image->compression == RLECompression)",
          "2442:         next_image->columns)+1,packet_size*sizeof(*compact_pixels));",
          "2443:       if (compact_pixels == (unsigned char *) NULL)",
          "2444:         {",
          "",
          "[Removed Lines]",
          "2431:   count=0;",
          "2432:   offset_length=0;",
          "2433:   rows_offset=0;",
          "2434:   compact_pixels=(unsigned char *) NULL;",
          "2436:     {",
          "2437:       size_t",
          "2438:         packet_size;",
          "2440:       packet_size=next_image->depth > 8UL ? 2UL : 1UL;",
          "2441:       compact_pixels=(unsigned char *) AcquireQuantumMemory((9*",
          "",
          "[Added Lines]",
          "2451:   count=0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2525:     }",
          "2526:   if (next_image->alpha_trait != UndefinedPixelTrait)",
          "2527:     {",
          "2528:       length=WriteOneChannel(psd_info,image_info,image,next_image,AlphaQuantum,",
          "2529:         compact_pixels,rows_offset,separate,exception);",
          "2530:       if (separate != MagickFalse)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2538:       length=WriteOneChannel(psd_info,image_info,image,next_image,AlphaQuantum,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2594:   (void) WriteBlobMSBShort(image,0);",
          "2596:   (void) WriteBlobMSBLong(image,(unsigned int) (x_resolution+0.5));",
          "2599:   (void) WriteBlobMSBLong(image,(unsigned int) (y_resolution+0.5));",
          "2604: static inline size_t WriteChannelSize(const PSDInfo *psd_info,Image *image,",
          "2605:   const unsigned short channel)",
          "",
          "[Removed Lines]",
          "2602: }",
          "",
          "[Added Lines]",
          "2613: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3038:     size+=WriteBlobMSBLong(image,(unsigned int) (next_image->page.x+",
          "3039:       next_image->columns));",
          "3040:     channels=1U;",
          "3042:       channels=next_image->colorspace == CMYKColorspace ? 4U : 3U;",
          "3044:     if (next_image->alpha_trait != UndefinedPixelTrait)",
          "3045:       total_channels++;",
          "3046:     size+=WriteBlobMSBShort(image,total_channels);",
          "",
          "[Removed Lines]",
          "3041:     if (IsImageGray(next_image) == MagickFalse)",
          "3043:     total_channels=channels;",
          "",
          "[Added Lines]",
          "3052:     if (IsImageGray(next_image) == MagickFalse)",
          "3054:     total_channels=channels;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed7cd70a3fbd8fbe657d5d5a18cd70a01c5d5858",
      "candidate_info": {
        "commit_hash": "ed7cd70a3fbd8fbe657d5d5a18cd70a01c5d5858",
        "repo": "ImageMagick/ImageMagick",
        "commit_url": "https://github.com/ImageMagick/ImageMagick/commit/ed7cd70a3fbd8fbe657d5d5a18cd70a01c5d5858",
        "files": [
          "coders/psd.c"
        ],
        "message": "Fixed layer RLE compression.",
        "before_after_code_files": [
          "coders/psd.c||coders/psd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "coders/psd.c||coders/psd.c"
          ],
          "candidate": [
            "coders/psd.c||coders/psd.c"
          ]
        }
      },
      "candidate_diff": {
        "coders/psd.c||coders/psd.c": [
          "File: coders/psd.c -> coders/psd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "945:     if (status == MagickFalse)",
          "946:       break;",
          "947:   }",
          "949:   pixels=(unsigned char *) RelinquishMagickMemory(pixels);",
          "950:   return(status);",
          "951: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "969:         else",
          "970:           offsets[y]=(MagickOffsetType) ReadBlobLong(image);",
          "971:       }",
          "973:   return offsets;",
          "974: }",
          "",
          "[Removed Lines]",
          "972:     }",
          "",
          "[Added Lines]",
          "972:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "998:   row_size=GetPSDRowSize(image);",
          "999:   pixels=(unsigned char *) AcquireQuantumMemory(row_size,sizeof(*pixels));",
          "1000:   if (pixels == (unsigned char *) NULL)",
          "1004:   length=0;",
          "1005:   for (y=0; y < (ssize_t) image->rows; y++)",
          "",
          "[Removed Lines]",
          "1001:     ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",",
          "1002:       image->filename);",
          "",
          "[Added Lines]",
          "1001:     ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",",
          "1002:       image->filename);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1024:   (void) ResetMagickMemory(compact_pixels,0,length*sizeof(*compact_pixels));",
          "1028:   {",
          "1029:     status=MagickFalse;",
          "1031:     count=ReadBlob(image,(size_t) offsets[y],compact_pixels);",
          "1032:     if (count != (ssize_t) offsets[y])",
          "1033:       break;",
          "",
          "[Removed Lines]",
          "1026:   status=MagickTrue;",
          "1027:   for (y=0; y < (ssize_t) image->rows; y++)",
          "",
          "[Added Lines]",
          "1026:   status=MagickTrue;",
          "1027:   for (y=0; y < (ssize_t) image->rows; y++)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1203:   {",
          "1204:     case Raw:",
          "1205:       status=ReadPSDChannelRaw(channel_image,psd_info->channels,",
          "1206:         layer_info->channel_info[channel].type,exception);",
          "1207:       break;",
          "1210:         MagickOffsetType",
          "1215:           ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",",
          "1216:             image->filename);",
          "1217:         status=ReadPSDChannelRLE(channel_image,psd_info,",
          "",
          "[Removed Lines]",
          "1208:     case RLE:",
          "1209:       {",
          "1213:         offsets=ReadPSDRLEOffsets(channel_image,psd_info,channel_image->rows);",
          "1214:         if (offsets == (MagickOffsetType *) NULL)",
          "",
          "[Added Lines]",
          "1208:     case RLE:",
          "1209:       {",
          "1213:         sizes=ReadPSDRLESizes(channel_image,psd_info,channel_image->rows);",
          "1214:         if (sizes == (MagickOffsetType *) NULL)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1741:   if (compression != Raw && compression != RLE)",
          "1742:     {",
          "1744:         TypeWarning,\"CompressionNotSupported\",\"'%.20g'\",(double) compression);",
          "1745:       return(MagickFalse);",
          "1748:   offsets=(MagickOffsetType *) NULL;",
          "1749:   if (compression == RLE)",
          "1750:   {",
          "",
          "[Removed Lines]",
          "1743:       (void) ThrowMagickException(exception,GetMagickModule(),",
          "1746:     }",
          "",
          "[Added Lines]",
          "1743:       (void) ThrowMagickException(exception,GetMagickModule(),",
          "1746:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1753:       ThrowBinaryException(ResourceLimitError,\"MemoryAllocationFailed\",",
          "1754:         image->filename);",
          "1755:   }",
          "1757:   status=MagickTrue;",
          "1758:   for (i=0; i < (ssize_t) psd_info->channels; i++)",
          "1759:   {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1771:   }",
          "1773:   if ((status != MagickFalse) && (image->colorspace == CMYKColorspace))",
          "1776:   if (status != MagickFalse)",
          "1777:     status=CorrectPSDAlphaBlend(image_info,image,exception);",
          "",
          "[Removed Lines]",
          "1774:     status=NegateCMYK(image,exception);",
          "",
          "[Added Lines]",
          "1774:     status=NegateCMYK(image,exception);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2159: %",
          "2162: static inline ssize_t SetPSDOffset(const PSDInfo *psd_info,Image *image,",
          "2163:   const size_t offset)",
          "2164: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2161: static inline ssize_t SetPSDOffset(const PSDInfo *psd_info,Image *image,",
          "2162:   const size_t offset)",
          "2163: {",
          "2164:   if (psd_info->version == 1)",
          "2165:     return(WriteBlobMSBShort(image,(unsigned short) offset));",
          "2166:   return(WriteBlobMSBLong(image,(unsigned short) offset));",
          "2167: }",
          "2169: static inline ssize_t WritePSDOffset(const PSDInfo *psd_info,Image *image,",
          "2170:   const MagickSizeType size,const MagickSizeType offset)",
          "2171: {",
          "2172:   MagickSizeType",
          "2173:     current_offset;",
          "2175:   ssize_t",
          "2176:     result;",
          "2178:   current_offset=TellBlob(image);",
          "2179:   SeekBlob(image,offset,SEEK_SET);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2167:   return(WriteBlobMSBLong(image,(unsigned short) offset));",
          "2168: }",
          "2170: static inline ssize_t SetPSDSize(const PSDInfo *psd_info,Image *image,",
          "2171:   const MagickSizeType size)",
          "2172: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2188: static inline ssize_t SetPSDSize(const PSDInfo *psd_info,Image *image,",
          "2189:   const MagickSizeType size)",
          "2190: {",
          "2191:   if (psd_info->version == 1)",
          "2192:     return(WriteBlobMSBLong(image,(unsigned int) size));",
          "2193:   return(WriteBlobMSBLongLong(image,size));",
          "2194: }",
          "2196: static inline ssize_t WritePSDSize(const PSDInfo *psd_info,Image *image,",
          "2197:   const MagickSizeType size,const MagickSizeType offset)",
          "2198: {",
          "2199:   MagickSizeType",
          "2200:     current_offset;",
          "2202:   ssize_t",
          "2203:     result;",
          "2205:   current_offset=TellBlob(image);",
          "2206:   SeekBlob(image,offset,SEEK_SET);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2278:         pixels+=count;",
          "2279:         break;",
          "2284:   packbits=(unsigned char *) RelinquishMagickMemory(packbits);",
          "2291:   ExceptionInfo *exception)",
          "2296:   register const Quantum",
          "2319:       break;",
          "2320:     length=ExportQuantumPixels(next_image,(CacheView *) NULL,quantum_info,",
          "2324:     (void) SetPSDOffset(psd_info,image,length);",
          "2325:   }",
          "2326:   quantum_info=DestroyQuantumInfo(quantum_info);",
          "",
          "[Removed Lines]",
          "2280:       }",
          "2281:     }",
          "2282:   }",
          "2285:   return((size_t) (q-compact_pixels));",
          "2286: }",
          "2288: static void WritePackbitsLength(const PSDInfo *psd_info,",
          "2289:   const ImageInfo *image_info,Image *image,Image *next_image,",
          "2290:   unsigned char *compact_pixels,const QuantumType quantum_type,",
          "2292: {",
          "2293:   QuantumInfo",
          "2299:   size_t",
          "2300:     length,",
          "2301:     packet_size;",
          "2303:   ssize_t",
          "2304:     y;",
          "2306:   unsigned char",
          "2309:   if (next_image->depth > 8)",
          "2310:     next_image->depth=16;",
          "2311:   packet_size=next_image->depth > 8UL ? 2UL : 1UL;",
          "2312:   (void) packet_size;",
          "2313:   quantum_info=AcquireQuantumInfo(image_info,image);",
          "2314:   pixels=(unsigned char *) GetQuantumPixels(quantum_info);",
          "2315:   for (y=0; y < (ssize_t) next_image->rows; y++)",
          "2316:   {",
          "2317:     p=GetVirtualPixels(next_image,0,y,next_image->columns,1,exception);",
          "2318:     if (p == (const Quantum *) NULL)",
          "2321:       quantum_type,pixels,exception);",
          "2322:     length=PSDPackbitsEncodeImage(image,length,pixels,compact_pixels,",
          "2323:       exception);",
          "",
          "[Added Lines]",
          "2317:       }",
          "2318:     }",
          "2321:   packbits=(unsigned char *) RelinquishMagickMemory(packbits);",
          "2327: {",
          "2328:   size_t",
          "2329:     length;",
          "2331:   ssize_t",
          "2332:     i,",
          "2333:     y;",
          "2335:   if (next_image->compression == RLECompression)",
          "2336:     {",
          "2339:         for (y=0; y < (ssize_t) next_image->rows; y++)",
          "2340:           length+=SetPSDOffset(psd_info,image,0);",
          "2341:     }",
          "2342:   else",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2340:   QuantumInfo",
          "2346:   register ssize_t",
          "2347:     i;",
          "2351:     packet_size;",
          "2353:   unsigned char",
          "2357:       (next_image->compression != RLECompression))",
          "2358:     (void) WriteBlobMSBShort(image,0);",
          "2359:   if (next_image->depth > 8)",
          "",
          "[Removed Lines]",
          "2343:   register const Quantum",
          "2349:   size_t",
          "2350:     length,",
          "2356:   if ((compression_flag != MagickFalse) &&",
          "",
          "[Added Lines]",
          "2362:   register const Quantum",
          "2368:   size_t",
          "2369:     count,",
          "2370:     length;",
          "2372:   unsigned char",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2367:   for (y=0; y < (ssize_t) next_image->rows; y++)",
          "2368:   {",
          "2369:     p=GetVirtualPixels(next_image,0,y,next_image->columns,1,exception);",
          "2371:       break;",
          "2372:     length=ExportQuantumPixels(next_image,(CacheView *) NULL,quantum_info,",
          "2373:       quantum_type,pixels,exception);",
          "2374:     if (monochrome != MagickFalse)",
          "2376:         pixels[i]=(~pixels[i]);",
          "2377:     if (next_image->compression != RLECompression)",
          "2378:       (void) WriteBlob(image,length,pixels);",
          "2379:     else",
          "2380:       {",
          "2381:         length=PSDPackbitsEncodeImage(image,length,pixels,compact_pixels,",
          "2382:           exception);",
          "2384:       }",
          "2385:   }",
          "2386:   quantum_info=DestroyQuantumInfo(quantum_info);",
          "2389: static MagickBooleanType WriteImageChannels(const PSDInfo *psd_info,",
          "2390:   const ImageInfo *image_info,Image *image,Image *next_image,",
          "2391:   const MagickBooleanType separate,ExceptionInfo *exception)",
          "2392: {",
          "2397:   unsigned char",
          "2401:     Write uncompressed pixels as separate planes.",
          "2408:       compact_pixels=(unsigned char *) AcquireQuantumMemory((9*channels*",
          "2409:         next_image->columns)+1,packet_size*sizeof(*compact_pixels));",
          "2418:             Packbits compression.",
          "2421:           WritePackbitsLength(psd_info,image_info,image,next_image,",
          "2425:               compact_pixels,AlphaQuantum,exception);",
          "2426:         }",
          "2495:             AlphaQuantum,separate,exception);",
          "2496:         (void) SetImageProgress(image,SaveImagesTag,5,6);",
          "2498:           (void) NegateCMYK(next_image,exception);",
          "2499:       }",
          "2500:   if (next_image->compression == RLECompression)",
          "2501:     compact_pixels=(unsigned char *) RelinquishMagickMemory(compact_pixels);",
          "2502:   return(MagickTrue);",
          "",
          "[Removed Lines]",
          "2370:     if (p == (const Quantum *) NULL)",
          "2375:       for (i=0; i < (ssize_t) length; i++)",
          "2383:         (void) WriteBlob(image,length,compact_pixels);",
          "2387: }",
          "2393:   size_t",
          "2394:     channels,",
          "2395:     packet_size;",
          "2403:   channels=1;",
          "2404:   packet_size=next_image->depth > 8UL ? 2UL : 1UL;",
          "2405:   compact_pixels=(unsigned char *) NULL;",
          "2406:   if (next_image->compression == RLECompression)",
          "2407:     {",
          "2410:       if (compact_pixels == (unsigned char *) NULL)",
          "2411:         ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "2412:     }",
          "2413:   if (IsImageGray(next_image) != MagickFalse)",
          "2414:     {",
          "2415:       if (next_image->compression == RLECompression)",
          "2416:         {",
          "2420:           (void) WriteBlobMSBShort(image,1);",
          "2422:             compact_pixels,GrayQuantum,exception);",
          "2423:           if (next_image->alpha_trait != UndefinedPixelTrait)",
          "2424:             WritePackbitsLength(psd_info,image_info,image,next_image,",
          "2427:       WriteOneChannel(image_info,image,next_image,compact_pixels,GrayQuantum,",
          "2428:         MagickTrue,exception);",
          "2429:       if (next_image->alpha_trait != UndefinedPixelTrait)",
          "2430:         WriteOneChannel(image_info,image,next_image,compact_pixels,",
          "2431:           AlphaQuantum,separate,exception);",
          "2432:       (void) SetImageProgress(image,SaveImagesTag,0,1);",
          "2433:     }",
          "2434:   else",
          "2435:     if (next_image->storage_class == PseudoClass)",
          "2436:       {",
          "2437:         if (next_image->compression == RLECompression)",
          "2438:           {",
          "2440:               Packbits compression.",
          "2442:             (void) WriteBlobMSBShort(image,1);",
          "2443:             WritePackbitsLength(psd_info,image_info,image,next_image,",
          "2444:               compact_pixels,IndexQuantum,exception);",
          "2445:             if (next_image->alpha_trait != UndefinedPixelTrait)",
          "2446:               WritePackbitsLength(psd_info,image_info,image,next_image,",
          "2447:                 compact_pixels,AlphaQuantum,exception);",
          "2448:           }",
          "2449:         WriteOneChannel(image_info,image,next_image,compact_pixels,",
          "2450:           IndexQuantum,MagickTrue,exception);",
          "2451:         if (next_image->alpha_trait != UndefinedPixelTrait)",
          "2452:           WriteOneChannel(image_info,image,next_image,compact_pixels,",
          "2453:             AlphaQuantum,separate,exception);",
          "2454:         (void) SetImageProgress(image,SaveImagesTag,0,1);",
          "2455:       }",
          "2456:     else",
          "2457:       {",
          "2458:         if (next_image->colorspace == CMYKColorspace)",
          "2459:           (void) NegateCMYK(next_image,exception);",
          "2460:         if (next_image->compression == RLECompression)",
          "2461:           {",
          "2463:               Packbits compression.",
          "2465:             (void) WriteBlobMSBShort(image,1);",
          "2466:             WritePackbitsLength(psd_info,image_info,image,next_image,",
          "2467:               compact_pixels,RedQuantum,exception);",
          "2468:             WritePackbitsLength(psd_info,image_info,image,next_image,",
          "2469:               compact_pixels,GreenQuantum,exception);",
          "2470:             WritePackbitsLength(psd_info,image_info,image,next_image,",
          "2471:               compact_pixels,BlueQuantum,exception);",
          "2472:             if (next_image->colorspace == CMYKColorspace)",
          "2473:               WritePackbitsLength(psd_info,image_info,image,next_image,",
          "2474:                 compact_pixels,BlackQuantum,exception);",
          "2475:             if (next_image->alpha_trait != UndefinedPixelTrait)",
          "2476:               WritePackbitsLength(psd_info,image_info,image,next_image,",
          "2477:                 compact_pixels,AlphaQuantum,exception);",
          "2478:           }",
          "2479:         (void) SetImageProgress(image,SaveImagesTag,0,6);",
          "2480:         WriteOneChannel(image_info,image,next_image,compact_pixels,RedQuantum,",
          "2481:           MagickTrue,exception);",
          "2482:         (void) SetImageProgress(image,SaveImagesTag,1,6);",
          "2483:         WriteOneChannel(image_info,image,next_image,compact_pixels,",
          "2484:           GreenQuantum,separate,exception);",
          "2485:         (void) SetImageProgress(image,SaveImagesTag,2,6);",
          "2486:         WriteOneChannel(image_info,image,next_image,compact_pixels,BlueQuantum,",
          "2487:           separate,exception);",
          "2488:         (void) SetImageProgress(image,SaveImagesTag,3,6);",
          "2489:         if (next_image->colorspace == CMYKColorspace)",
          "2490:           WriteOneChannel(image_info,image,next_image,compact_pixels,",
          "2491:             BlackQuantum,separate,exception);",
          "2492:         (void) SetImageProgress(image,SaveImagesTag,4,6);",
          "2493:         if (next_image->alpha_trait != UndefinedPixelTrait)",
          "2494:           WriteOneChannel(image_info,image,next_image,compact_pixels,",
          "2497:         if (next_image->colorspace == CMYKColorspace)",
          "",
          "[Added Lines]",
          "2390:     if (p == (const Quantum *) NULL)",
          "2395:       for (i=0; i < (ssize_t) length; i++)",
          "2396:         pixels[i]=(~pixels[i]);",
          "2400:       {",
          "2405:       }",
          "2406:   }",
          "2408:   return(count);",
          "2409: }",
          "2411: static MagickBooleanType WriteImageChannels(const PSDInfo *psd_info,",
          "2412:   const ImageInfo *image_info,Image *image,Image *next_image,",
          "2413:   MagickOffsetType size_offset,const MagickBooleanType separate,",
          "2416:   Image",
          "2423:     channels,",
          "2424:     count,",
          "2425:     length,",
          "2431:   count=0;",
          "2432:   offset_length=0;",
          "2433:   rows_offset=0;",
          "2437:       size_t",
          "2438:         packet_size;",
          "2440:       packet_size=next_image->depth > 8UL ? 2UL : 1UL;",
          "2442:         next_image->columns)+1,packet_size*sizeof(*compact_pixels));",
          "2443:       if (compact_pixels == (unsigned char *) NULL)",
          "2444:         {",
          "2445:           (void) ThrowMagickException(exception,GetMagickModule(),",
          "2446:             ResourceLimitError,\"MemoryAllocationFailed\",\"`%s'\",",
          "2447:             image->filename);",
          "2449:         }",
          "2450:     }",
          "2451:   channels=1;",
          "2452:   if (separate == MagickFalse)",
          "2453:     {",
          "2454:       if (IsImageGray(next_image) == MagickFalse)",
          "2455:         channels=next_image->colorspace == CMYKColorspace ? 4 : 3;",
          "2456:       if (next_image->alpha_trait != UndefinedPixelTrait)",
          "2457:         channels++;",
          "2458:       rows_offset=TellBlob(image)+2;",
          "2459:       count+=WriteCompressionStart(psd_info,image,next_image,channels);",
          "2460:       offset_length=(next_image->rows*(psd_info->version == 1 ? 2 : 4));",
          "2461:     }",
          "2462:   size_offset+=2;",
          "2463:   if (next_image->storage_class == PseudoClass)",
          "2466:         IndexQuantum,compact_pixels,rows_offset,separate,exception);",
          "2467:       if (separate != MagickFalse)",
          "2468:         size_offset+=WritePSDSize(psd_info,image,length,size_offset)+2;",
          "2469:       else",
          "2470:         rows_offset+=offset_length;",
          "2471:       count+=length;",
          "2472:     }",
          "2473:   else",
          "2474:     {",
          "2475:       if (IsImageGray(next_image) != MagickFalse)",
          "2476:         {",
          "2477:           length=WriteOneChannel(psd_info,image_info,image,next_image,",
          "2478:             GrayQuantum,compact_pixels,rows_offset,separate,exception);",
          "2479:           if (separate != MagickFalse)",
          "2480:             size_offset+=WritePSDSize(psd_info,image,length,size_offset)+2;",
          "2481:           else",
          "2482:             rows_offset+=offset_length;",
          "2483:           count+=length;",
          "2484:         }",
          "2485:       else",
          "2486:         {",
          "2487:           if (next_image->colorspace == CMYKColorspace)",
          "2488:             (void) NegateCMYK(next_image,exception);",
          "2490:           length=WriteOneChannel(psd_info,image_info,image,next_image,",
          "2491:             RedQuantum,compact_pixels,rows_offset,separate,exception);",
          "2492:           if (separate != MagickFalse)",
          "2493:             size_offset+=WritePSDSize(psd_info,image,length,size_offset)+2;",
          "2494:           else",
          "2495:             rows_offset+=offset_length;",
          "2496:           count+=length;",
          "2498:           length=WriteOneChannel(psd_info,image_info,image,next_image,",
          "2499:             GreenQuantum,compact_pixels,rows_offset,separate,exception);",
          "2500:           if (separate != MagickFalse)",
          "2501:             size_offset+=WritePSDSize(psd_info,image,length,size_offset)+2;",
          "2502:           else",
          "2503:             rows_offset+=offset_length;",
          "2504:           count+=length;",
          "2506:           length=WriteOneChannel(psd_info,image_info,image,next_image,",
          "2507:             BlueQuantum,compact_pixels,rows_offset,separate,exception);",
          "2508:           if (separate != MagickFalse)",
          "2509:             size_offset+=WritePSDSize(psd_info,image,length,size_offset)+2;",
          "2510:           else",
          "2511:             rows_offset+=offset_length;",
          "2512:           count+=length;",
          "2514:           if (next_image->colorspace == CMYKColorspace)",
          "2515:             {",
          "2516:               length=WriteOneChannel(psd_info,image_info,image,next_image,",
          "2517:                 BlackQuantum,compact_pixels,rows_offset,separate,exception);",
          "2518:               if (separate != MagickFalse)",
          "2519:                 size_offset+=WritePSDSize(psd_info,image,length,size_offset)+2;",
          "2520:               else",
          "2521:                 rows_offset+=offset_length;",
          "2522:               count+=length;",
          "2523:             }",
          "2524:         }",
          "2525:     }",
          "2526:   if (next_image->alpha_trait != UndefinedPixelTrait)",
          "2527:     {",
          "2528:       length=WriteOneChannel(psd_info,image_info,image,next_image,AlphaQuantum,",
          "2529:         compact_pixels,rows_offset,separate,exception);",
          "2530:       if (separate != MagickFalse)",
          "2531:         size_offset+=WritePSDSize(psd_info,image,length,size_offset)+2;",
          "2534:       count+=length;",
          "2537:     (void) NegateCMYK(next_image,exception);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2505: static void WritePascalString(Image* inImage,const char *inString,int inPad)",
          "2506: {",
          "2507:   size_t",
          "2511:     i;",
          "2516:   length=(strlen(inString) > 255UL ) ? 255UL : strlen(inString);",
          "2521:       (void) WriteBlobByte(inImage,(unsigned char) length);",
          "2522:       (void) WriteBlob(inImage, length, (const unsigned char *) inString);",
          "2523:     }",
          "",
          "[Removed Lines]",
          "2508:     length;",
          "2510:   register ssize_t",
          "2514:     Max length is 255.",
          "2517:   if (length ==  0)",
          "2518:     (void) WriteBlobByte(inImage,0);",
          "2519:   else",
          "2520:     {",
          "",
          "[Added Lines]",
          "2546:     length;",
          "2549:     i;",
          "2552:     Max length is 255.",
          "2556:   if (length ==  0)",
          "2557:     count+=WriteBlobByte(image,0);",
          "2558:   else",
          "2559:     {",
          "2560:       count+=WriteBlobByte(image,(unsigned char) length);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2553:   (void) WriteBlobMSBShort(image,0x03ED);",
          "2554:   (void) WriteBlobMSBShort(image,0);",
          "2556:   (void) WriteBlobMSBLong(image,(unsigned int) (x_resolution+0.5));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2596:   (void) WriteBlobMSBLong(image,(unsigned int) (x_resolution+0.5));",
          "2599:   (void) WriteBlobMSBLong(image,(unsigned int) (y_resolution+0.5));",
          "2602: }",
          "2604: static inline size_t WriteChannelSize(const PSDInfo *psd_info,Image *image,",
          "2605:   const unsigned short channel)",
          "2606: {",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2781:   const StringInfo",
          "2785:   Image",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2836:   Image",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2792:   PSDInfo",
          "2793:     psd_info;",
          "2795:   register ssize_t",
          "2796:     i;",
          "2798:   size_t",
          "2800:     channelLength,",
          "2801:     layer_count,",
          "2802:     layer_info_size,",
          "",
          "[Removed Lines]",
          "2799:     channel_size,",
          "",
          "[Added Lines]",
          "2854:     channel_size,",
          "2855:     channelLength,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2939:       (void) WriteBlob(image,4,(const unsigned char *) \"8BIM\");",
          "2940:       (void) WriteBlobMSBShort(image,0x0000040F);",
          "2941:       (void) WriteBlobMSBShort(image,0);",
          "2944:       (void) WriteBlob(image,GetStringInfoLength(icc_profile),",
          "2945:         GetStringInfoDatum(icc_profile));",
          "2946:       if ((MagickOffsetType) GetStringInfoLength(icc_profile) !=",
          "2949:     }",
          "2964:       else",
          "2965:         if (next_image->colorspace != CMYKColorspace)",
          "2966:           num_channels=next_image->alpha_trait != UndefinedPixelTrait ? 4UL : 3UL;",
          "2967:         else",
          "2969:     channelLength=(size_t) (next_image->columns*next_image->rows*packet_size+2);",
          "2970:     layer_info_size+=(size_t) (4*4+2+num_channels*6+(psd_info.version == 1 ? 8 :",
          "2971:       16)+4*1+4+num_channels*channelLength);",
          "2972:     property=(const char *) GetImageProperty(next_image,\"label\",exception);",
          "2973:     if (property == (const char *) NULL)",
          "2976:           (double) layer_count+1);",
          "2979:     name_length=strlen(property)+1;",
          "2980:     if ((name_length % 4) != 0)",
          "3095:           (void) WriteBlob(image,GetStringInfoLength(info),GetStringInfoDatum(info));",
          "3099:         Now the image data!",
          "3103:       {",
          "3104:         status=WriteImageChannels(&psd_info,image_info,image,next_image,",
          "3105:           MagickTrue,exception);",
          "3106:         next_image=GetNextImageInList(next_image);",
          "3109:       base_image->compression=compression;",
          "3110:     }",
          "",
          "[Removed Lines]",
          "2942:       (void) WriteBlobMSBLong(image,(unsigned int) GetStringInfoLength(",
          "2943:         icc_profile));",
          "2947:           PSDQuantum(GetStringInfoLength(icc_profile)))",
          "2948:         (void) WriteBlobByte(image,0);",
          "2950:   layer_count=0;",
          "2951:   layer_info_size=2;",
          "2952:   base_image=GetNextImageInList(image);",
          "2953:   if (base_image == (Image *) NULL)",
          "2954:     base_image=image;",
          "2955:   next_image=base_image;",
          "2956:   while (next_image != (Image *) NULL)",
          "2957:   {",
          "2958:     packet_size=next_image->depth > 8 ? 2UL : 1UL;",
          "2959:     if (IsImageGray(next_image) != MagickFalse)",
          "2960:       num_channels=next_image->alpha_trait != UndefinedPixelTrait ? 2UL : 1UL;",
          "2961:     else",
          "2962:       if (next_image->storage_class == PseudoClass)",
          "2963:         num_channels=next_image->alpha_trait != UndefinedPixelTrait ? 2UL : 1UL;",
          "2968:           num_channels=next_image->alpha_trait != UndefinedPixelTrait ? 5UL : 4UL;",
          "2974:       {",
          "2975:         (void) FormatLocaleString(layer_name,MagickPathExtent,\"L%.20g\",",
          "2977:         property=layer_name;",
          "2978:       }",
          "2981:       name_length+=(4-(name_length % 4));",
          "2982:     layer_info_size+=8+name_length;",
          "2983:     info=GetAdditionalInformation(image_info,next_image,exception);",
          "2984:     if (info != (const StringInfo *) NULL)",
          "2985:       layer_info_size+=GetStringInfoLength(info);",
          "2986:     layer_count++;",
          "2987:     next_image=GetNextImageInList(next_image);",
          "2988:   }",
          "2989:   if (layer_count == 0)",
          "2990:     (void) SetPSDSize(&psd_info,image,0);",
          "2991:   else",
          "2992:     {",
          "2993:       CompressionType",
          "2994:         compression;",
          "2996:       (void) SetPSDSize(&psd_info,image,layer_info_size+",
          "2997:         (psd_info.version == 1 ? 8 : 16));",
          "2998:       if ((layer_info_size/2) != ((layer_info_size+1)/2))",
          "2999:         rounded_layer_info_size=layer_info_size+1;",
          "3000:       else",
          "3001:         rounded_layer_info_size=layer_info_size;",
          "3002:       (void) SetPSDSize(&psd_info,image,rounded_layer_info_size);",
          "3003:       if (image->alpha_trait != UndefinedPixelTrait)",
          "3004:         (void) WriteBlobMSBShort(image,-(unsigned short) layer_count);",
          "3005:       else",
          "3006:         (void) WriteBlobMSBShort(image,(unsigned short) layer_count);",
          "3007:       layer_count=1;",
          "3008:       compression=base_image->compression;",
          "3009:       for (next_image=base_image; next_image != NULL; )",
          "3010:       {",
          "3011:         next_image->compression=NoCompression;",
          "3012:         (void) WriteBlobMSBLong(image,(unsigned int) next_image->page.y);",
          "3013:         (void) WriteBlobMSBLong(image,(unsigned int) next_image->page.x);",
          "3014:         (void) WriteBlobMSBLong(image,(unsigned int) (next_image->page.y+",
          "3015:           next_image->rows));",
          "3016:         (void) WriteBlobMSBLong(image,(unsigned int) (next_image->page.x+",
          "3017:           next_image->columns));",
          "3018:         packet_size=next_image->depth > 8 ? 2UL : 1UL;",
          "3019:         channel_size=(unsigned int) ((packet_size*next_image->rows*",
          "3020:           next_image->columns)+2);",
          "3021:         if ((IsImageGray(next_image) != MagickFalse) ||",
          "3022:             (next_image->storage_class == PseudoClass))",
          "3023:           {",
          "3024:              (void) WriteBlobMSBShort(image,(unsigned short)",
          "3025:                (next_image->alpha_trait != UndefinedPixelTrait ? 2 : 1));",
          "3026:              (void) WriteBlobMSBShort(image,0);",
          "3027:              (void) SetPSDSize(&psd_info,image,channel_size);",
          "3028:              if (next_image->alpha_trait != UndefinedPixelTrait)",
          "3029:                {",
          "3030:                  (void) WriteBlobMSBShort(image,(unsigned short) -1);",
          "3031:                  (void) SetPSDSize(&psd_info,image,channel_size);",
          "3032:                }",
          "3033:            }",
          "3034:           else",
          "3035:             if (next_image->colorspace != CMYKColorspace)",
          "3036:               {",
          "3037:                 (void) WriteBlobMSBShort(image,(unsigned short)",
          "3038:                   (next_image->alpha_trait != UndefinedPixelTrait ? 4 : 3));",
          "3039:                (void) WriteBlobMSBShort(image,0);",
          "3040:                (void) SetPSDSize(&psd_info,image,channel_size);",
          "3041:                (void) WriteBlobMSBShort(image,1);",
          "3042:                (void) SetPSDSize(&psd_info,image,channel_size);",
          "3043:                (void) WriteBlobMSBShort(image,2);",
          "3044:                (void) SetPSDSize(&psd_info,image,channel_size);",
          "3045:                if (next_image->alpha_trait != UndefinedPixelTrait)",
          "3046:                  {",
          "3047:                    (void) WriteBlobMSBShort(image,(unsigned short) -1);",
          "3048:                    (void) SetPSDSize(&psd_info,image,channel_size);",
          "3049:                  }",
          "3050:              }",
          "3051:            else",
          "3052:              {",
          "3053:                (void) WriteBlobMSBShort(image,(unsigned short)",
          "3054:                  (next_image->alpha_trait ? 5 : 4));",
          "3055:                (void) WriteBlobMSBShort(image,0);",
          "3056:                (void) SetPSDSize(&psd_info,image,channel_size);",
          "3057:                (void) WriteBlobMSBShort(image,1);",
          "3058:                (void) SetPSDSize(&psd_info,image,channel_size);",
          "3059:                (void) WriteBlobMSBShort(image,2);",
          "3060:                (void) SetPSDSize(&psd_info,image,channel_size);",
          "3061:                (void) WriteBlobMSBShort(image,3);",
          "3062:                (void) SetPSDSize(&psd_info,image,channel_size);",
          "3063:                if (next_image->alpha_trait)",
          "3064:                  {",
          "3065:                    (void) WriteBlobMSBShort(image,(unsigned short) -1);",
          "3066:                    (void) SetPSDSize(&psd_info,image,channel_size);",
          "3067:                  }",
          "3068:              }",
          "3069:         (void) WriteBlob(image,4,(const unsigned char *) \"8BIM\");",
          "3070:         (void) WriteBlob(image,4,(const unsigned char *)",
          "3071:           CompositeOperatorToPSDBlendMode(next_image->compose));",
          "3073:         (void) WriteBlobByte(image,0);",
          "3074:         (void) WriteBlobByte(image,next_image->compose==NoCompositeOp ?",
          "3076:         (void) WriteBlobByte(image,0);",
          "3077:         info=GetImageProfile(next_image,PSDAdditionalInfo);",
          "3078:         property=(const char *) GetImageProperty(next_image,\"label\",exception);",
          "3079:         if (property == (const char *) NULL)",
          "3080:           {",
          "3081:             (void) FormatLocaleString(layer_name,MagickPathExtent,\"L%.20g\",",
          "3082:               (double) layer_count++);",
          "3083:             property=layer_name;",
          "3084:           }",
          "3085:         name_length=strlen(property)+1;",
          "3086:         if ((name_length % 4) != 0)",
          "3087:           name_length+=(4-(name_length % 4));",
          "3088:         if (info != (const StringInfo *) NULL)",
          "3089:           name_length+=GetStringInfoLength(info);",
          "3090:         (void) WriteBlobMSBLong(image,(unsigned int)name_length+8);",
          "3091:         (void) WriteBlobMSBLong(image,0);",
          "3092:         (void) WriteBlobMSBLong(image,0);",
          "3093:         WritePascalString(image,property,4);",
          "3094:         if (info != (const StringInfo *) NULL)",
          "3096:         next_image=GetNextImageInList(next_image);",
          "3097:       }",
          "3101:       next_image=base_image;",
          "3102:       while (next_image != NULL)",
          "3107:       }",
          "",
          "[Added Lines]",
          "3001:         GetStringInfoDatum(icc_profile));",
          "3002:       if ((MagickOffsetType) GetStringInfoLength(icc_profile) !=",
          "3003:           PSDQuantum(GetStringInfoLength(icc_profile)))",
          "3004:         (void) WriteBlobByte(image,0);",
          "3005:     }",
          "3006:   base_image=GetNextImageInList(image);",
          "3008:     base_image=image;",
          "3009:   size=0;",
          "3010:   size_offset=TellBlob(image);",
          "3011:   SetPSDSize(&psd_info,image,0);",
          "3012:   SetPSDSize(&psd_info,image,0);",
          "3013:   layer_count=0;",
          "3014:   for (next_image=base_image; next_image != NULL; )",
          "3015:   {",
          "3016:     layer_count++;",
          "3017:     next_image=GetNextImageInList(next_image);",
          "3018:   }",
          "3019:   if (image->alpha_trait != UndefinedPixelTrait)",
          "3020:     size+=WriteBlobMSBShort(image,-(unsigned short) layer_count);",
          "3021:   else",
          "3022:     size+=WriteBlobMSBShort(image,(unsigned short) layer_count);",
          "3023:   layer_size_offsets=(MagickOffsetType *) AcquireQuantumMemory(",
          "3024:     (size_t) layer_count,sizeof(MagickOffsetType));",
          "3025:   if (layer_size_offsets == (MagickOffsetType *) NULL)",
          "3026:     ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");",
          "3027:   layer_index=0;",
          "3028:   for (next_image=base_image; next_image != NULL; )",
          "3029:   {",
          "3030:     unsigned short",
          "3031:       channels,",
          "3032:       total_channels;",
          "3034:     size+=WriteBlobMSBLong(image,(unsigned int) next_image->page.y);",
          "3035:     size+=WriteBlobMSBLong(image,(unsigned int) next_image->page.x);",
          "3036:     size+=WriteBlobMSBLong(image,(unsigned int) (next_image->page.y+",
          "3037:       next_image->rows));",
          "3038:     size+=WriteBlobMSBLong(image,(unsigned int) (next_image->page.x+",
          "3039:       next_image->columns));",
          "3040:     channels=1U;",
          "3041:     if (IsImageGray(next_image) == MagickFalse)",
          "3042:       channels=next_image->colorspace == CMYKColorspace ? 4U : 3U;",
          "3043:     total_channels=channels;",
          "3044:     if (next_image->alpha_trait != UndefinedPixelTrait)",
          "3045:       total_channels++;",
          "3046:     size+=WriteBlobMSBShort(image,total_channels);",
          "3047:     layer_size_offsets[layer_index++]=TellBlob(image);",
          "3048:     for (i=0; i < (ssize_t) channels; i++)",
          "3049:       size+=WriteChannelSize(&psd_info,image,(unsigned short) i);",
          "3050:     if (next_image->alpha_trait != UndefinedPixelTrait)",
          "3051:       size+=WriteChannelSize(&psd_info,image,(unsigned short) -1);",
          "3052:     size+=WriteBlob(image,4,(const unsigned char *) \"8BIM\");",
          "3057:     size+=WriteBlobByte(image,next_image->compose==NoCompositeOp ?",
          "3064:         (void) FormatLocaleString(layer_name,MagickPathExtent,\"L%.20g\",",
          "3065:           (double) layer_index);",
          "3066:         property=layer_name;",
          "3067:       }",
          "3068:     name_length=strlen(property)+1;",
          "3069:     if ((name_length % 4) != 0)",
          "3070:       name_length+=(4-(name_length % 4));",
          "3071:     if (info != (const StringInfo *) NULL)",
          "3075:     size+=WriteBlobMSBLong(image,0);",
          "3076:     size+=WritePascalString(image,property,4);",
          "3077:     if (info != (const StringInfo *) NULL)",
          "3078:       size+=WriteBlob(image,GetStringInfoLength(info),",
          "3079:         GetStringInfoDatum(info));",
          "3080:     next_image=GetNextImageInList(next_image);",
          "3081:   }",
          "3083:     Now the image data!",
          "3085:   next_image=base_image;",
          "3086:   layer_index=0;",
          "3088:   {",
          "3089:     length=WriteImageChannels(&psd_info,image_info,image,next_image,",
          "3090:       layer_size_offsets[layer_index++],MagickTrue,exception);",
          "3091:     if (length == 0)",
          "3092:       {",
          "3093:         status=MagickFalse;",
          "3094:         break;",
          "3095:       }",
          "3096:     size+=length;",
          "3097:     next_image=GetNextImageInList(next_image);",
          "3098:   }",
          "3101:     Write the total size",
          "3107:   else",
          "3108:     rounded_size=size;",
          "3109:   (void) WritePSDSize(&psd_info,image,rounded_size,size_offset);",
          "3110:   layer_size_offsets=RelinquishMagickMemory(layer_size_offsets);",
          "",
          "---------------"
        ]
      }
    }
  ]
}