{
  "cve_id": "CVE-2021-38597",
  "cve_desc": "wolfSSL before 4.8.1 incorrectly skips OCSP verification in certain situations of irrelevant response data that contains the NoCheck extension.",
  "repo": "wolfSSL/wolfssl",
  "patch_hash": "f93083be72a3b3d956b52a7ec13f307a27b6e093",
  "patch_info": {
    "commit_hash": "f93083be72a3b3d956b52a7ec13f307a27b6e093",
    "repo": "wolfSSL/wolfssl",
    "commit_url": "https://github.com/wolfSSL/wolfssl/commit/f93083be72a3b3d956b52a7ec13f307a27b6e093",
    "files": [
      "wolfcrypt/src/asn.c",
      "wolfssl/wolfcrypt/asn.h"
    ],
    "message": "OCSP: improve handling of OCSP no check extension",
    "before_after_code_files": [
      "wolfcrypt/src/asn.c||wolfcrypt/src/asn.c",
      "wolfssl/wolfcrypt/asn.h||wolfssl/wolfcrypt/asn.h"
    ]
  },
  "patch_diff": {
    "wolfcrypt/src/asn.c||wolfcrypt/src/asn.c": [
      "File: wolfcrypt/src/asn.c -> wolfcrypt/src/asn.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "10212:             }",
      "10214:         #ifdef HAVE_OCSP",
      "10218:         #endif",
      "10220:             cert->srcIdx = cert->sigIndex;",
      "",
      "[Removed Lines]",
      "10216:             if (cert->ocspNoCheckSet && verify == VERIFY_OCSP)",
      "10217:                 verify = NO_VERIFY;",
      "",
      "[Added Lines]",
      "10215:             if (verify == VERIFY_OCSP_CERT) {",
      "10217:                 if (cert->ocspNoCheckSet)",
      "10218:                     verify = VERIFY;",
      "10219:                 else",
      "10220:                     verify = VERIFY_OCSP;",
      "10221:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "17959:         ret = ParseCertRelative(&cert, CERT_TYPE,",
      "17961:         if (ret < 0) {",
      "17962:             WOLFSSL_MSG(\"\\tOCSP Responder certificate parsing failed\");",
      "17963:             FreeDecodedCert(&cert);",
      "",
      "[Removed Lines]",
      "17960:                                 noVerify ? NO_VERIFY : VERIFY_OCSP, cm);",
      "",
      "[Added Lines]",
      "17964:                                 noVerify ? NO_VERIFY : VERIFY_OCSP_CERT, cm);",
      "",
      "---------------"
    ],
    "wolfssl/wolfcrypt/asn.h||wolfssl/wolfcrypt/asn.h": [
      "File: wolfssl/wolfcrypt/asn.h -> wolfssl/wolfcrypt/asn.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "599:     VERIFY_OCSP = 3,",
      "600:     VERIFY_NAME = 4,",
      "601:     VERIFY_SKIP_DATE = 5,",
      "602: };",
      "604: #ifdef WOLFSSL_CERT_EXT",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "602:     VERIFY_OCSP_CERT = 6,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a4bfa0dec78d2e427480a550b45c172e3a69c107",
      "candidate_info": {
        "commit_hash": "a4bfa0dec78d2e427480a550b45c172e3a69c107",
        "repo": "wolfSSL/wolfssl",
        "commit_url": "https://github.com/wolfSSL/wolfssl/commit/a4bfa0dec78d2e427480a550b45c172e3a69c107",
        "files": [
          "examples/client/client.c",
          "wolfcrypt/src/asn.c",
          "wolfssl/wolfcrypt/asn.h"
        ],
        "message": "Add support for id-pkix-ocsp-nocheck",
        "before_after_code_files": [
          "examples/client/client.c||examples/client/client.c",
          "wolfcrypt/src/asn.c||wolfcrypt/src/asn.c",
          "wolfssl/wolfcrypt/asn.h||wolfssl/wolfcrypt/asn.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wolfcrypt/src/asn.c||wolfcrypt/src/asn.c",
            "wolfssl/wolfcrypt/asn.h||wolfssl/wolfcrypt/asn.h"
          ],
          "candidate": [
            "wolfcrypt/src/asn.c||wolfcrypt/src/asn.c",
            "wolfssl/wolfcrypt/asn.h||wolfssl/wolfcrypt/asn.h"
          ]
        }
      },
      "candidate_diff": {
        "examples/client/client.c||examples/client/client.c": [
          "File: examples/client/client.c -> examples/client/client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "838:     return WOLFSSL_SUCCESS;",
          "839: }",
          "842:     int exitWithRet)",
          "843: {",
          "844:     int ret, err;",
          "",
          "[Removed Lines]",
          "841: static int ClientWrite(WOLFSSL* ssl, const char* msg, int msgSz, const char* str,",
          "",
          "[Added Lines]",
          "841: static int ClientWrite(WOLFSSL* ssl, const char* msg, int msgSz, const char* str,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1088: #endif",
          "1089: #ifdef HAVE_CURVE448",
          "1091: #endif",
          "1092:         NULL,",
          "1093:     },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1091: #endif",
          "1092: #ifdef HAVE_CRL",
          "1093:         \"-C          Disable CRL\\n\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2522:         }",
          "2524:     }",
          "2526:             myVerifyAction == VERIFY_USE_PREVERFIY) {",
          "2527:         wolfSSL_CTX_set_verify(ctx, WOLFSSL_VERIFY_PEER, myVerify);",
          "2528:     }",
          "",
          "[Removed Lines]",
          "2525:     if (useVerifyCb || myVerifyAction == VERIFY_FORCE_FAIL ||",
          "",
          "[Added Lines]",
          "2528:     if (useVerifyCb || myVerifyAction == VERIFY_FORCE_FAIL ||",
          "",
          "---------------"
        ],
        "wolfcrypt/src/asn.c||wolfcrypt/src/asn.c": [
          "File: wolfcrypt/src/asn.c -> wolfcrypt/src/asn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1618: #ifdef HAVE_OCSP",
          "",
          "[Removed Lines]",
          "1619:     static const byte ocspBasicOid[] = {43, 6, 1, 5, 5, 7, 48, 1, 1};",
          "1620:     static const byte ocspNonceOid[] = {43, 6, 1, 5, 5, 7, 48, 1, 2};",
          "",
          "[Added Lines]",
          "1619:     static const byte ocspBasicOid[]    = {43, 6, 1, 5, 5, 7, 48, 1, 1};",
          "1620:     static const byte ocspNonceOid[]    = {43, 6, 1, 5, 5, 7, 48, 1, 2};",
          "1621:     static const byte ocspNoCheckOid[]  = {43, 6, 1, 5, 5, 7, 48, 1, 5};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2038:                     break;",
          "2039:             #endif",
          "2040:             }",
          "2041:             break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2040:             #ifdef HAVE_OCSP",
          "2041:                 case OCSP_NOCHECK_OID:",
          "2042:                     oid = ocspNoCheckOid;",
          "2044:                     break;",
          "2045:             #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8875:                 }",
          "8876:                 break;",
          "8877:         #endif",
          "8879:             default:",
          "8880:             #ifndef WOLFSSL_NO_ASN_STRICT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8884:         #ifdef HAVE_OCSP",
          "8885:             case OCSP_NOCHECK_OID:",
          "8886:                 VERIFY_AND_SET_OID(cert->ocspNoCheckSet);",
          "8887:                 ret = GetASNNull(input, &idx, sz);",
          "8888:                 if (ret != 0)",
          "8889:                     return ASN_PARSE_E;",
          "8890:                 break;",
          "8891:         #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9347:                     return ret;",
          "9348:             }",
          "9351:             cert->srcIdx = cert->sigIndex;",
          "9352:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9363:         #ifdef HAVE_OCSP",
          "9365:             if (cert->ocspNoCheckSet && verify == VERIFY_OCSP)",
          "9366:                 verify = NO_VERIFY;",
          "9367:         #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "17248:         WOLFSSL_MSG(\"\\tReq missing\");",
          "17249:         return -1;",
          "17250:     }",
          "17252:             resp->issuerKeyHash == NULL || resp->status == NULL) {",
          "17253:         WOLFSSL_MSG(\"\\tResp missing\");",
          "17254:         return 1;",
          "",
          "[Removed Lines]",
          "17251:     if (resp == NULL || resp->issuerHash == NULL ||",
          "",
          "[Added Lines]",
          "17269:     if (resp == NULL || resp->issuerHash == NULL ||",
          "",
          "---------------"
        ],
        "wolfssl/wolfcrypt/asn.h||wolfssl/wolfcrypt/asn.h": [
          "File: wolfssl/wolfcrypt/asn.h -> wolfssl/wolfcrypt/asn.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "538:     POLICY_CONST_OID          = 150,",
          "539:     ISSUE_ALT_NAMES_OID       = 132,",
          "542: };",
          "544: enum CertificatePolicy_Sum {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542:     OCSP_NOCHECK_OID          = 121  /* 1.3.6.1.5.5.7.48.1.5",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "910:     byte extKeyUsageSet : 1;",
          "912:     byte extCRLdistSet : 1;",
          "913:     byte extAuthInfoSet : 1;",
          "914:     byte extBasicConstSet : 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "914: #ifdef HAVE_OCSP",
          "916: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2e9f5349f6a8d70933500bab0183e568d3d8907",
      "candidate_info": {
        "commit_hash": "f2e9f5349f6a8d70933500bab0183e568d3d8907",
        "repo": "wolfSSL/wolfssl",
        "commit_url": "https://github.com/wolfSSL/wolfssl/commit/f2e9f5349f6a8d70933500bab0183e568d3d8907",
        "files": [
          "wolfcrypt/src/asn.c"
        ],
        "message": "wolfcrypt/src/asn.c: refactor DecodeBasicOcspResponse() to keep DecodedCert off the stack in WOLFSSL_SMALL_STACK builds.",
        "before_after_code_files": [
          "wolfcrypt/src/asn.c||wolfcrypt/src/asn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wolfcrypt/src/asn.c||wolfcrypt/src/asn.c"
          ],
          "candidate": [
            "wolfcrypt/src/asn.c||wolfcrypt/src/asn.c"
          ]
        }
      },
      "candidate_diff": {
        "wolfcrypt/src/asn.c||wolfcrypt/src/asn.c": [
          "File: wolfcrypt/src/asn.c -> wolfcrypt/src/asn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "30407: #ifndef WOLFSSL_NO_OCSP_OPTIONAL_CERTS",
          "30408:     if (idx < end_index)",
          "30409:     {",
          "30426: #ifndef WOLFSSL_NO_OCSP_ISSUER_CHECK",
          "30434:     #ifdef OPENSSL_EXTRA",
          "30436:     #else",
          "30439:     #endif",
          "30440:             }",
          "30442: #endif",
          "30456:     }",
          "30457:     else",
          "",
          "[Removed Lines]",
          "30410:         DecodedCert cert;",
          "30412:         if (DecodeCerts(source, &idx, resp, size) < 0)",
          "30413:             return ASN_PARSE_E;",
          "30415:         InitDecodedCert(&cert, resp->cert, resp->certSz, heap);",
          "30418:         ret = ParseCertRelative(&cert, CERT_TYPE,",
          "30419:                                 noVerify ? NO_VERIFY : VERIFY_OCSP_CERT, cm);",
          "30420:         if (ret < 0) {",
          "30421:             WOLFSSL_MSG(\"\\tOCSP Responder certificate parsing failed\");",
          "30422:             FreeDecodedCert(&cert);",
          "30423:             return ret;",
          "30424:         }",
          "30427:         if ((cert.extExtKeyUsage & EXTKEYUSE_OCSP_SIGN) == 0) {",
          "30428:             if (XMEMCMP(cert.subjectHash,",
          "30429:                         resp->single->issuerHash, OCSP_DIGEST_SIZE) == 0) {",
          "30430:                 WOLFSSL_MSG(\"\\tOCSP Response signed by issuer\");",
          "30431:             }",
          "30432:             else {",
          "30433:                 WOLFSSL_MSG(\"\\tOCSP Responder key usage check failed\");",
          "30435:                 resp->verifyError = OCSP_BAD_ISSUER;",
          "30437:                 FreeDecodedCert(&cert);",
          "30438:                 return BAD_OCSP_RESPONDER;",
          "30441:         }",
          "30445:         ret = ConfirmSignature(&cert.sigCtx,",
          "30446:             resp->response, resp->responseSz,",
          "30447:             cert.publicKey, cert.pubKeySize, cert.keyOID,",
          "30448:             resp->sig, resp->sigSz, resp->sigOID, NULL);",
          "30450:         FreeDecodedCert(&cert);",
          "30452:         if (ret != 0) {",
          "30453:             WOLFSSL_MSG(\"\\tOCSP Confirm signature failed\");",
          "30454:             return ASN_OCSP_CONFIRM_E;",
          "30455:         }",
          "",
          "[Added Lines]",
          "30410:         int cert_inited = 0;",
          "30411: #ifdef WOLFSSL_SMALL_STACK",
          "30412:         DecodedCert *cert = (DecodedCert*)XMALLOC(sizeof(DecodedCert), NULL,",
          "30413:                                                   DYNAMIC_TYPE_TMP_BUFFER);",
          "30414:         if (cert == NULL)",
          "30415:             return MEMORY_E;",
          "30416: #else",
          "30417:         DecodedCert cert[1];",
          "30418: #endif",
          "30420:         do {",
          "30421:             if (DecodeCerts(source, &idx, resp, size) < 0) {",
          "30422:                 ret = ASN_PARSE_E;",
          "30423:                 break;",
          "30424:             }",
          "30426:             InitDecodedCert(cert, resp->cert, resp->certSz, heap);",
          "30427:             cert_inited = 1;",
          "30430:             ret = ParseCertRelative(cert, CERT_TYPE,",
          "30431:                                     noVerify ? NO_VERIFY : VERIFY_OCSP_CERT,",
          "30432:                                     cm);",
          "30433:             if (ret < 0) {",
          "30434:                 WOLFSSL_MSG(\"\\tOCSP Responder certificate parsing failed\");",
          "30435:                 break;",
          "30436:             }",
          "30439:             if ((cert->extExtKeyUsage & EXTKEYUSE_OCSP_SIGN) == 0) {",
          "30440:                 if (XMEMCMP(cert->subjectHash,",
          "30441:                             resp->single->issuerHash, OCSP_DIGEST_SIZE) == 0) {",
          "30442:                     WOLFSSL_MSG(\"\\tOCSP Response signed by issuer\");",
          "30443:                 }",
          "30444:                 else {",
          "30445:                     WOLFSSL_MSG(\"\\tOCSP Responder key usage check failed\");",
          "30447:                     resp->verifyError = OCSP_BAD_ISSUER;",
          "30449:                     ret = BAD_OCSP_RESPONDER;",
          "30450:                     break;",
          "30452:                 }",
          "30457:             ret = ConfirmSignature(",
          "30458:                 &cert->sigCtx,",
          "30459:                 resp->response, resp->responseSz,",
          "30460:                 cert->publicKey, cert->pubKeySize, cert->keyOID,",
          "30461:                 resp->sig, resp->sigSz, resp->sigOID, NULL);",
          "30463:             if (ret != 0) {",
          "30464:                 WOLFSSL_MSG(\"\\tOCSP Confirm signature failed\");",
          "30465:                 ret = ASN_OCSP_CONFIRM_E;",
          "30466:                 break;",
          "30467:             }",
          "30468:         } while(0);",
          "30470:         if (cert_inited)",
          "30471:             FreeDecodedCert(cert);",
          "30472: #ifdef WOLFSSL_SMALL_STACK",
          "30473:         XFREE(cert, NULL, DYNAMIC_TYPE_TMP_BUFFER);",
          "30474: #endif",
          "30476:         if (ret != 0)",
          "30477:             return ret;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21ea34282a812e64730cd1294811d5dd90a7a375",
      "candidate_info": {
        "commit_hash": "21ea34282a812e64730cd1294811d5dd90a7a375",
        "repo": "wolfSSL/wolfssl",
        "commit_url": "https://github.com/wolfSSL/wolfssl/commit/21ea34282a812e64730cd1294811d5dd90a7a375",
        "files": [
          "wolfcrypt/src/asn.c",
          "wolfssl/wolfcrypt/asn.h"
        ],
        "message": "Merge pull request #4211 from SparkiDev/ocsp_no_check\n\nOCSP: improve handling of OCSP no check extension",
        "before_after_code_files": [
          "wolfcrypt/src/asn.c||wolfcrypt/src/asn.c",
          "wolfssl/wolfcrypt/asn.h||wolfssl/wolfcrypt/asn.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "wolfcrypt/src/asn.c||wolfcrypt/src/asn.c",
            "wolfssl/wolfcrypt/asn.h||wolfssl/wolfcrypt/asn.h"
          ],
          "candidate": [
            "wolfcrypt/src/asn.c||wolfcrypt/src/asn.c",
            "wolfssl/wolfcrypt/asn.h||wolfssl/wolfcrypt/asn.h"
          ]
        }
      },
      "candidate_diff": {
        "wolfcrypt/src/asn.c||wolfcrypt/src/asn.c": [
          "File: wolfcrypt/src/asn.c -> wolfcrypt/src/asn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10212:             }",
          "10214:         #ifdef HAVE_OCSP",
          "10218:         #endif",
          "10220:             cert->srcIdx = cert->sigIndex;",
          "",
          "[Removed Lines]",
          "10216:             if (cert->ocspNoCheckSet && verify == VERIFY_OCSP)",
          "10217:                 verify = NO_VERIFY;",
          "",
          "[Added Lines]",
          "10215:             if (verify == VERIFY_OCSP_CERT) {",
          "10217:                 if (cert->ocspNoCheckSet)",
          "10218:                     verify = VERIFY;",
          "10219:                 else",
          "10220:                     verify = VERIFY_OCSP;",
          "10221:             }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17959:         ret = ParseCertRelative(&cert, CERT_TYPE,",
          "17961:         if (ret < 0) {",
          "17962:             WOLFSSL_MSG(\"\\tOCSP Responder certificate parsing failed\");",
          "17963:             FreeDecodedCert(&cert);",
          "",
          "[Removed Lines]",
          "17960:                                 noVerify ? NO_VERIFY : VERIFY_OCSP, cm);",
          "",
          "[Added Lines]",
          "17964:                                 noVerify ? NO_VERIFY : VERIFY_OCSP_CERT, cm);",
          "",
          "---------------"
        ],
        "wolfssl/wolfcrypt/asn.h||wolfssl/wolfcrypt/asn.h": [
          "File: wolfssl/wolfcrypt/asn.h -> wolfssl/wolfcrypt/asn.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "595:     VERIFY_OCSP = 3,",
          "596:     VERIFY_NAME = 4,",
          "597:     VERIFY_SKIP_DATE = 5,",
          "598: };",
          "600: #ifdef WOLFSSL_CERT_EXT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598:     VERIFY_OCSP_CERT = 6,",
          "",
          "---------------"
        ]
      }
    }
  ]
}