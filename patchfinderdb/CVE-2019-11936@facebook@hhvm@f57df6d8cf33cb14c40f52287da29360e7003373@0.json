{
  "cve_id": "CVE-2019-11936",
  "cve_desc": "Various APC functions accept keys containing null bytes as input, leading to premature truncation of input. This issue affects HHVM versions prior to 3.30.12, all versions between 4.0.0 and 4.8.5, all versions between 4.9.0 and 4.23.1, as well as 4.24.0, 4.25.0, 4.26.0, 4.27.0, 4.28.0, and 4.28.1.",
  "repo": "facebook/hhvm",
  "patch_hash": "f57df6d8cf33cb14c40f52287da29360e7003373",
  "patch_info": {
    "commit_hash": "f57df6d8cf33cb14c40f52287da29360e7003373",
    "repo": "facebook/hhvm",
    "commit_url": "https://github.com/facebook/hhvm/commit/f57df6d8cf33cb14c40f52287da29360e7003373",
    "files": [
      "hphp/runtime/ext/apc/ext_apc.cpp",
      "hphp/test/quick/apc.php",
      "hphp/test/quick/apc.php.expectf"
    ],
    "message": "Prevent APC keys with nulls\n\nSummary:\nThis diff prevents storing APC keys that contain the null byte.\nAPC uses a backing data structure ConcurrentTableSharedStore that uses const char* as its key type. This leads to situations where inserting APC keys with null bytes will cause key truncation, like so...\nlocalhost> p apc_clear_cache();\ntrue\nlocalhost> p apc_fetch(\"test\")\nfalse\nlocalhost> p apc_fetch(\"test\\x00suffix\")\nfalse\nlocalhost> p apc_add(\"test\\x00suffix\", 5)\ntrue\nlocalhost> p apc_fetch(\"test\")\n5\nlocalhost> p apc_fetch(\"test\\x00suffix\")\nfalse\nThis change will make APC throw an error if a key containing a null byte is passed to the store/add methods.\n\nReviewed By: markw65\n\nDifferential Revision: D17608626\n\nfbshipit-source-id: 915e179f41e66c99c718364ec4a8639d204c4ea2",
    "before_after_code_files": [
      "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp",
      "hphp/test/quick/apc.php||hphp/test/quick/apc.php",
      "hphp/test/quick/apc.php.expectf||hphp/test/quick/apc.php.expectf"
    ]
  },
  "patch_diff": {
    "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp": [
      "File: hphp/runtime/ext/apc/ext_apc.cpp -> hphp/runtime/ext/apc/ext_apc.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "95:   return *static_cast<ConcurrentTableSharedStore*>(vpStore);",
      "96: }",
      "98: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "98: bool isKeyInvalid(const String &key) {",
      "100:   return key.find('\\0') != -1;",
      "101: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "307:         return Variant(false);",
      "308:       }",
      "309:       Variant v = iter.second();",
      "313:     return Variant(ArrayData::Create());",
      "314:   }",
      "",
      "[Removed Lines]",
      "310:       apc_store().set(key.toString(), v, ttl);",
      "311:     }",
      "",
      "[Added Lines]",
      "316:       auto const& strKey = key.toCStrRef();",
      "317:       if (isKeyInvalid(strKey)) {",
      "318:         throw_invalid_argument(\"apc key: (contains invalid characters)\");",
      "319:         return Variant(false);",
      "320:       }",
      "321:       apc_store().set(strKey, v, ttl);",
      "322:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "318:     return Variant(false);",
      "319:   }",
      "320:   String strKey = key_or_array.toString();",
      "321:   apc_store().set(strKey, var, ttl);",
      "322:   return Variant(true);",
      "323: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "332:   if (isKeyInvalid(strKey)) {",
      "333:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
      "334:     return Variant(false);",
      "335:   }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "330:                    const String& key,",
      "331:                    const Variant& var) {",
      "332:   if (!apcExtension::Enable) return false;",
      "333:   apc_store().setWithoutTTL(key, var);",
      "334:   return true;",
      "335: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "348:   if (isKeyInvalid(key)) {",
      "349:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
      "350:     return false;",
      "351:   }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "353:         return false;",
      "354:       }",
      "355:       Variant v = iter.second();",
      "358:       }",
      "359:     }",
      "360:     return errors.toVariant();",
      "",
      "[Removed Lines]",
      "356:       if (!apc_store().add(key.toString(), v, ttl)) {",
      "357:         errors.add(key, -1);",
      "",
      "[Added Lines]",
      "376:       auto const& strKey = key.toCStrRef();",
      "377:       if (isKeyInvalid(strKey)) {",
      "378:         throw_invalid_argument(\"apc key: (contains invalid characters)\");",
      "379:         return false;",
      "380:       }",
      "382:       if (!apc_store().add(strKey, v, ttl)) {",
      "383:         errors.add(strKey, -1);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "365:     return false;",
      "366:   }",
      "367:   String strKey = key_or_array.toString();",
      "368:   return apc_store().add(strKey, var, ttl);",
      "369: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "394:   if (isKeyInvalid(strKey)) {",
      "395:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
      "396:     return false;",
      "397:   }",
      "",
      "---------------"
    ],
    "hphp/test/quick/apc.php||hphp/test/quick/apc.php": [
      "File: hphp/test/quick/apc.php -> hphp/test/quick/apc.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "61:   }",
      "62: }",
      "64: <<__EntryPoint>> function main(): void {",
      "65:   testApc(array(7, 4, 1776));",
      "66:   testApc(array(\"sv0\", \"sv1\"));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "64: function testInvalidKeys() {",
      "66:     apc_add(\"bar\\x00baz\", 10);",
      "67:     apc_store(\"test\\x00xyz\", \"hello\");",
      "68:     apc_store(array(\"validkey\" => \"validvalue\", \"invalid\\x00key\" => \"value\"));",
      "69:     foreach (array('bar', 'test', 'validkey', 'invalid') as $k) {",
      "70:         var_dump(__hhvm_intrinsics\\apc_fetch_no_check($k));",
      "71:     }",
      "72: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "73:   var_dump($b);",
      "75:   testKeyTypes();",
      "76: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "86:   testInvalidKeys();",
      "",
      "---------------"
    ],
    "hphp/test/quick/apc.php.expectf||hphp/test/quick/apc.php.expectf": [
      "File: hphp/test/quick/apc.php.expectf -> hphp/test/quick/apc.php.expectf",
      "--- Hunk 1 ---",
      "[Context before]",
      "72: Undefined index: 3",
      "73: Undefined index: 2",
      "74: string(5) \"three\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "76: Warning: Invalid argument: apc key: (contains invalid characters)%S",
      "78: Warning: Invalid argument: apc key: (contains invalid characters)%S",
      "80: Warning: Invalid argument: apc key: (contains invalid characters)%S",
      "81: bool(false)",
      "82: bool(false)",
      "83: string(10) \"validvalue\"",
      "84: bool(false)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c3ebf6e8cee485056e9f915ed504df327e13ef39",
      "candidate_info": {
        "commit_hash": "c3ebf6e8cee485056e9f915ed504df327e13ef39",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/c3ebf6e8cee485056e9f915ed504df327e13ef39",
        "files": [
          "hphp/runtime/ext/apc/ext_apc.cpp",
          "hphp/test/quick/apc.php",
          "hphp/test/quick/apc.php.expectf"
        ],
        "message": "Prevent APC keys with null bytes\n\nSummary:\nThis diff prevents storing APC keys that contain the null byte.\n\nAPC uses a backing data structure `ConcurrentTableSharedStore` that uses `const char*` as its key type. This leads to situations where inserting APC keys with null bytes will cause key truncation, like so...\n\n```\nlocalhost> p apc_clear_cache();\ntrue\nlocalhost> p apc_fetch(\"test\")\nfalse\nlocalhost> p apc_fetch(\"test\\x00suffix\")\nfalse\nlocalhost> p apc_add(\"test\\x00suffix\", 5)\ntrue\nlocalhost> p apc_fetch(\"test\")\n5\nlocalhost> p apc_fetch(\"test\\x00suffix\")\nfalse\n```\n\nThis change will make APC throw an error if a key containing a null byte is passed to the store/add methods.\n\nReviewed By: markw65\n\nDifferential Revision: D17608626",
        "before_after_code_files": [
          "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp",
          "hphp/test/quick/apc.php||hphp/test/quick/apc.php",
          "hphp/test/quick/apc.php.expectf||hphp/test/quick/apc.php.expectf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp",
            "hphp/test/quick/apc.php||hphp/test/quick/apc.php",
            "hphp/test/quick/apc.php.expectf||hphp/test/quick/apc.php.expectf"
          ],
          "candidate": [
            "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp",
            "hphp/test/quick/apc.php||hphp/test/quick/apc.php",
            "hphp/test/quick/apc.php.expectf||hphp/test/quick/apc.php.expectf"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp": [
          "File: hphp/runtime/ext/apc/ext_apc.cpp -> hphp/runtime/ext/apc/ext_apc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   return *static_cast<ConcurrentTableSharedStore*>(vpStore);",
          "96: }",
          "98: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: bool isKeyInvalid(const String &key) {",
          "100:   return key.find('\\0') != -1;",
          "101: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:         return Variant(false);",
          "308:       }",
          "309:       Variant v = iter.second();",
          "313:     return Variant(ArrayData::Create());",
          "314:   }",
          "",
          "[Removed Lines]",
          "310:       apc_store().set(key.toString(), v, ttl);",
          "311:     }",
          "",
          "[Added Lines]",
          "316:       auto const& strKey = key.toCStrRef();",
          "317:       if (isKeyInvalid(strKey)) {",
          "318:         throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "319:         return Variant(false);",
          "320:       }",
          "321:       apc_store().set(strKey, v, ttl);",
          "322:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:     return Variant(false);",
          "319:   }",
          "320:   String strKey = key_or_array.toString();",
          "321:   apc_store().set(strKey, var, ttl);",
          "322:   return Variant(true);",
          "323: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "332:   if (isKeyInvalid(strKey)) {",
          "333:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "334:     return Variant(false);",
          "335:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "330:                    const String& key,",
          "331:                    const Variant& var) {",
          "332:   if (!apcExtension::Enable) return false;",
          "333:   apc_store().setWithoutTTL(key, var);",
          "334:   return true;",
          "335: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:   if (isKeyInvalid(key)) {",
          "349:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "350:     return false;",
          "351:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "353:         return false;",
          "354:       }",
          "355:       Variant v = iter.second();",
          "358:       }",
          "359:     }",
          "360:     return errors.toVariant();",
          "",
          "[Removed Lines]",
          "356:       if (!apc_store().add(key.toString(), v, ttl)) {",
          "357:         errors.add(key, -1);",
          "",
          "[Added Lines]",
          "376:       auto const& strKey = key.toCStrRef();",
          "377:       if (isKeyInvalid(strKey)) {",
          "378:         throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "379:         return false;",
          "380:       }",
          "382:       if (!apc_store().add(strKey, v, ttl)) {",
          "383:         errors.add(strKey, -1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "365:     return false;",
          "366:   }",
          "367:   String strKey = key_or_array.toString();",
          "368:   return apc_store().add(strKey, var, ttl);",
          "369: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394:   if (isKeyInvalid(strKey)) {",
          "395:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "396:     return false;",
          "397:   }",
          "",
          "---------------"
        ],
        "hphp/test/quick/apc.php||hphp/test/quick/apc.php": [
          "File: hphp/test/quick/apc.php -> hphp/test/quick/apc.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   }",
          "62: }",
          "64: <<__EntryPoint>> function main(): void {",
          "65:   testApc(array(7, 4, 1776));",
          "66:   testApc(array(\"sv0\", \"sv1\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: function testInvalidKeys() {",
          "66:     apc_add(\"bar\\x00baz\", 10);",
          "67:     apc_store(\"test\\x00xyz\", \"hello\");",
          "68:     apc_store(array(\"validkey\" => \"validvalue\", \"invalid\\x00key\" => \"value\"));",
          "69:     foreach (array('bar', 'test', 'validkey', 'invalid') as $k) {",
          "70:         var_dump(__hhvm_intrinsics\\apc_fetch_no_check($k));",
          "71:     }",
          "72: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:   var_dump($b);",
          "75:   testKeyTypes();",
          "76: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   testInvalidKeys();",
          "",
          "---------------"
        ],
        "hphp/test/quick/apc.php.expectf||hphp/test/quick/apc.php.expectf": [
          "File: hphp/test/quick/apc.php.expectf -> hphp/test/quick/apc.php.expectf",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: Undefined index: 3",
          "73: Undefined index: 2",
          "74: string(5) \"three\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: Warning: Invalid argument: apc key: (contains invalid characters)%S",
          "78: Warning: Invalid argument: apc key: (contains invalid characters)%S",
          "80: Warning: Invalid argument: apc key: (contains invalid characters)%S",
          "81: bool(false)",
          "82: bool(false)",
          "83: string(10) \"validvalue\"",
          "84: bool(false)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a990c9e31ed29006c9209fc896e359c913f2af41",
      "candidate_info": {
        "commit_hash": "a990c9e31ed29006c9209fc896e359c913f2af41",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/a990c9e31ed29006c9209fc896e359c913f2af41",
        "files": [
          "hphp/runtime/ext/apc/ext_apc.cpp"
        ],
        "message": "Prevent APC keys with null bytes\n\nSummary:\nThis diff prevents storing APC keys that contain the null byte.\n\nAPC uses a backing data structure `ConcurrentTableSharedStore` that uses `const char*` as its key type. This leads to situations where inserting APC keys with null bytes will cause key truncation, like so...\n\n```\nlocalhost> p apc_clear_cache();\ntrue\nlocalhost> p apc_fetch(\"test\")\nfalse\nlocalhost> p apc_fetch(\"test\\x00suffix\")\nfalse\nlocalhost> p apc_add(\"test\\x00suffix\", 5)\ntrue\nlocalhost> p apc_fetch(\"test\")\n5\nlocalhost> p apc_fetch(\"test\\x00suffix\")\nfalse\n```\n\nThis change will make APC throw an error if a key containing a null byte is passed to the store/add methods.\n\nReviewed By: markw65\n\nDifferential Revision: D17608626",
        "before_after_code_files": [
          "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp"
          ],
          "candidate": [
            "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp": [
          "File: hphp/runtime/ext/apc/ext_apc.cpp -> hphp/runtime/ext/apc/ext_apc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   return *static_cast<ConcurrentTableSharedStore*>(vpStore);",
          "96: }",
          "98: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: bool isKeyInvalid(const String &key) {",
          "100:   return key.find('\\0') != -1;",
          "101: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:         return Variant(false);",
          "308:       }",
          "309:       Variant v = iter.second();",
          "313:     return Variant(staticEmptyArray());",
          "314:   }",
          "",
          "[Removed Lines]",
          "310:       apc_store().set(key.toString(), v, ttl);",
          "311:     }",
          "",
          "[Added Lines]",
          "316:       auto const& strKey = key.toCStrRef();",
          "317:       if (isKeyInvalid(strKey)) {",
          "318:         throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "319:         return Variant(false);",
          "320:       }",
          "321:       apc_store().set(strKey, v, ttl);",
          "322:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:     return Variant(false);",
          "319:   }",
          "320:   String strKey = key_or_array.toString();",
          "321:   apc_store().set(strKey, var, ttl);",
          "322:   return Variant(true);",
          "323: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "332:   if (isKeyInvalid(strKey)) {",
          "333:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "334:     return Variant(false);",
          "335:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "330:                    const String& key,",
          "331:                    const Variant& var) {",
          "332:   if (!apcExtension::Enable) return false;",
          "333:   apc_store().setWithoutTTL(key, var);",
          "334:   return true;",
          "335: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:   if (isKeyInvalid(key)) {",
          "349:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "350:     return false;",
          "351:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "353:         return false;",
          "354:       }",
          "355:       Variant v = iter.second();",
          "358:       }",
          "359:     }",
          "360:     return errors.toVariant();",
          "",
          "[Removed Lines]",
          "356:       if (!apc_store().add(key.toString(), v, ttl)) {",
          "357:         errors.add(key, -1);",
          "",
          "[Added Lines]",
          "376:       auto const& strKey = key.toCStrRef();",
          "377:       if (isKeyInvalid(strKey)) {",
          "378:         throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "379:         return false;",
          "380:       }",
          "382:       if (!apc_store().add(strKey, v, ttl)) {",
          "383:         errors.add(strKey, -1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "365:     return false;",
          "366:   }",
          "367:   String strKey = key_or_array.toString();",
          "368:   return apc_store().add(strKey, var, ttl);",
          "369: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394:   if (isKeyInvalid(strKey)) {",
          "395:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "396:     return false;",
          "397:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c63adf4f56027e99c39af54bb39f841271ff84d4",
      "candidate_info": {
        "commit_hash": "c63adf4f56027e99c39af54bb39f841271ff84d4",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/c63adf4f56027e99c39af54bb39f841271ff84d4",
        "files": [
          "hphp/runtime/ext/apc/ext_apc.cpp",
          "hphp/test/quick/apc.php",
          "hphp/test/quick/apc.php.expectf"
        ],
        "message": "Prevent APC keys with null bytes\n\nSummary:\nThis diff prevents storing APC keys that contain the null byte.\n\nAPC uses a backing data structure `ConcurrentTableSharedStore` that uses `const char*` as its key type. This leads to situations where inserting APC keys with null bytes will cause key truncation, like so...\n\n```\nlocalhost> p apc_clear_cache();\ntrue\nlocalhost> p apc_fetch(\"test\")\nfalse\nlocalhost> p apc_fetch(\"test\\x00suffix\")\nfalse\nlocalhost> p apc_add(\"test\\x00suffix\", 5)\ntrue\nlocalhost> p apc_fetch(\"test\")\n5\nlocalhost> p apc_fetch(\"test\\x00suffix\")\nfalse\n```\n\nThis change will make APC throw an error if a key containing a null byte is passed to the store/add methods.\n\nReviewed By: markw65\n\nDifferential Revision: D17608626",
        "before_after_code_files": [
          "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp",
          "hphp/test/quick/apc.php||hphp/test/quick/apc.php",
          "hphp/test/quick/apc.php.expectf||hphp/test/quick/apc.php.expectf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp",
            "hphp/test/quick/apc.php||hphp/test/quick/apc.php",
            "hphp/test/quick/apc.php.expectf||hphp/test/quick/apc.php.expectf"
          ],
          "candidate": [
            "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp",
            "hphp/test/quick/apc.php||hphp/test/quick/apc.php",
            "hphp/test/quick/apc.php.expectf||hphp/test/quick/apc.php.expectf"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp": [
          "File: hphp/runtime/ext/apc/ext_apc.cpp -> hphp/runtime/ext/apc/ext_apc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   return *static_cast<ConcurrentTableSharedStore*>(vpStore);",
          "96: }",
          "98: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: bool isKeyInvalid(const String &key) {",
          "100:   return key.find('\\0') != -1;",
          "101: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:         return Variant(false);",
          "308:       }",
          "309:       Variant v = iter.second();",
          "313:     return Variant(ArrayData::Create());",
          "314:   }",
          "",
          "[Removed Lines]",
          "310:       apc_store().set(key.toString(), v, ttl);",
          "311:     }",
          "",
          "[Added Lines]",
          "316:       auto const& strKey = key.toCStrRef();",
          "317:       if (isKeyInvalid(strKey)) {",
          "318:         throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "319:         return Variant(false);",
          "320:       }",
          "321:       apc_store().set(strKey, v, ttl);",
          "322:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:     return Variant(false);",
          "319:   }",
          "320:   String strKey = key_or_array.toString();",
          "321:   apc_store().set(strKey, var, ttl);",
          "322:   return Variant(true);",
          "323: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "332:   if (isKeyInvalid(strKey)) {",
          "333:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "334:     return Variant(false);",
          "335:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "330:                    const String& key,",
          "331:                    const Variant& var) {",
          "332:   if (!apcExtension::Enable) return false;",
          "333:   apc_store().setWithoutTTL(key, var);",
          "334:   return true;",
          "335: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:   if (isKeyInvalid(key)) {",
          "349:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "350:     return false;",
          "351:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "353:         return false;",
          "354:       }",
          "355:       Variant v = iter.second();",
          "358:       }",
          "359:     }",
          "360:     return errors.toVariant();",
          "",
          "[Removed Lines]",
          "356:       if (!apc_store().add(key.toString(), v, ttl)) {",
          "357:         errors.add(key, -1);",
          "",
          "[Added Lines]",
          "376:       auto const& strKey = key.toCStrRef();",
          "377:       if (isKeyInvalid(strKey)) {",
          "378:         throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "379:         return false;",
          "380:       }",
          "382:       if (!apc_store().add(strKey, v, ttl)) {",
          "383:         errors.add(strKey, -1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "365:     return false;",
          "366:   }",
          "367:   String strKey = key_or_array.toString();",
          "368:   return apc_store().add(strKey, var, ttl);",
          "369: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394:   if (isKeyInvalid(strKey)) {",
          "395:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "396:     return false;",
          "397:   }",
          "",
          "---------------"
        ],
        "hphp/test/quick/apc.php||hphp/test/quick/apc.php": [
          "File: hphp/test/quick/apc.php -> hphp/test/quick/apc.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   }",
          "62: }",
          "64: <<__EntryPoint>> function main(): void {",
          "65:   testApc(array(7, 4, 1776));",
          "66:   testApc(array(\"sv0\", \"sv1\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: function testInvalidKeys() {",
          "66:     apc_add(\"bar\\x00baz\", 10);",
          "67:     apc_store(\"test\\x00xyz\", \"hello\");",
          "68:     apc_store(array(\"validkey\" => \"validvalue\", \"invalid\\x00key\" => \"value\"));",
          "69:     foreach (array('bar', 'test', 'validkey', 'invalid') as $k) {",
          "70:         var_dump(__hhvm_intrinsics\\apc_fetch_no_check($k));",
          "71:     }",
          "72: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:   var_dump($b);",
          "75:   testKeyTypes();",
          "76: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   testInvalidKeys();",
          "",
          "---------------"
        ],
        "hphp/test/quick/apc.php.expectf||hphp/test/quick/apc.php.expectf": [
          "File: hphp/test/quick/apc.php.expectf -> hphp/test/quick/apc.php.expectf",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: Undefined index: 3",
          "73: Undefined index: 2",
          "74: string(5) \"three\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: Warning: Invalid argument: apc key: (contains invalid characters)%S",
          "78: Warning: Invalid argument: apc key: (contains invalid characters)%S",
          "80: Warning: Invalid argument: apc key: (contains invalid characters)%S",
          "81: bool(false)",
          "82: bool(false)",
          "83: string(10) \"validvalue\"",
          "84: bool(false)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "999b2884cfff25628ff74e9b98e73be3e55216c5",
      "candidate_info": {
        "commit_hash": "999b2884cfff25628ff74e9b98e73be3e55216c5",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/999b2884cfff25628ff74e9b98e73be3e55216c5",
        "files": [
          "hphp/runtime/ext/apc/ext_apc.cpp"
        ],
        "message": "Prevent APC keys with null bytes\n\nSummary:\nThis diff prevents storing APC keys that contain the null byte.\n\nAPC uses a backing data structure `ConcurrentTableSharedStore` that uses `const char*` as its key type. This leads to situations where inserting APC keys with null bytes will cause key truncation, like so...\n\n```\nlocalhost> p apc_clear_cache();\ntrue\nlocalhost> p apc_fetch(\"test\")\nfalse\nlocalhost> p apc_fetch(\"test\\x00suffix\")\nfalse\nlocalhost> p apc_add(\"test\\x00suffix\", 5)\ntrue\nlocalhost> p apc_fetch(\"test\")\n5\nlocalhost> p apc_fetch(\"test\\x00suffix\")\nfalse\n```\n\nThis change will make APC throw an error if a key containing a null byte is passed to the store/add methods.\n\nReviewed By: markw65\n\nDifferential Revision: D17608626",
        "before_after_code_files": [
          "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp"
          ],
          "candidate": [
            "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp": [
          "File: hphp/runtime/ext/apc/ext_apc.cpp -> hphp/runtime/ext/apc/ext_apc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   return *static_cast<ConcurrentTableSharedStore*>(vpStore);",
          "96: }",
          "98: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: bool isKeyInvalid(const String &key) {",
          "100:   return key.find('\\0') != -1;",
          "101: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "328:         return Variant(false);",
          "329:       }",
          "330:       Variant v = iter.second();",
          "334:     return Variant(staticEmptyArray());",
          "335:   }",
          "",
          "[Removed Lines]",
          "331:       apc_store().set(key.toString(), v, ttl);",
          "332:     }",
          "",
          "[Added Lines]",
          "337:       auto const& strKey = key.toCStrRef();",
          "338:       if (isKeyInvalid(strKey)) {",
          "339:         throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "340:         return Variant(false);",
          "341:       }",
          "342:       apc_store().set(strKey, v, ttl);",
          "343:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "339:     return Variant(false);",
          "340:   }",
          "341:   String strKey = key_or_array.toString();",
          "342:   apc_store().set(strKey, var, ttl);",
          "343:   return Variant(true);",
          "344: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:   if (isKeyInvalid(strKey)) {",
          "354:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "355:     return Variant(false);",
          "356:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "351:                    const String& key,",
          "352:                    const Variant& var) {",
          "353:   if (!apcExtension::Enable) return false;",
          "354:   apc_store().setWithoutTTL(key, var);",
          "355:   return true;",
          "356: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369:   if (isKeyInvalid(key)) {",
          "370:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "371:     return false;",
          "372:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "374:         return false;",
          "375:       }",
          "376:       Variant v = iter.second();",
          "379:       }",
          "380:     }",
          "381:     return errors.toVariant();",
          "",
          "[Removed Lines]",
          "377:       if (!apc_store().add(key.toString(), v, ttl)) {",
          "378:         errors.add(key, -1);",
          "",
          "[Added Lines]",
          "397:       auto const& strKey = key.toCStrRef();",
          "398:       if (isKeyInvalid(strKey)) {",
          "399:         throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "400:         return false;",
          "401:       }",
          "403:       if (!apc_store().add(strKey, v, ttl)) {",
          "404:         errors.add(strKey, -1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "386:     return false;",
          "387:   }",
          "388:   String strKey = key_or_array.toString();",
          "389:   return apc_store().add(strKey, var, ttl);",
          "390: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "415:   if (isKeyInvalid(strKey)) {",
          "416:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "417:     return false;",
          "418:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74b949df1cb004f3fe0513269ba3ac2b3202eb86",
      "candidate_info": {
        "commit_hash": "74b949df1cb004f3fe0513269ba3ac2b3202eb86",
        "repo": "facebook/hhvm",
        "commit_url": "https://github.com/facebook/hhvm/commit/74b949df1cb004f3fe0513269ba3ac2b3202eb86",
        "files": [
          "hphp/runtime/ext/apc/ext_apc.cpp",
          "hphp/test/quick/apc.php",
          "hphp/test/quick/apc.php.expectf"
        ],
        "message": "Prevent APC keys with null bytes\n\nSummary:\nThis diff prevents storing APC keys that contain the null byte.\n\nAPC uses a backing data structure `ConcurrentTableSharedStore` that uses `const char*` as its key type. This leads to situations where inserting APC keys with null bytes will cause key truncation, like so...\n\n```\nlocalhost> p apc_clear_cache();\ntrue\nlocalhost> p apc_fetch(\"test\")\nfalse\nlocalhost> p apc_fetch(\"test\\x00suffix\")\nfalse\nlocalhost> p apc_add(\"test\\x00suffix\", 5)\ntrue\nlocalhost> p apc_fetch(\"test\")\n5\nlocalhost> p apc_fetch(\"test\\x00suffix\")\nfalse\n```\n\nThis change will make APC throw an error if a key containing a null byte is passed to the store/add methods.\n\nReviewed By: markw65\n\nDifferential Revision: D17608626",
        "before_after_code_files": [
          "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp",
          "hphp/test/quick/apc.php||hphp/test/quick/apc.php",
          "hphp/test/quick/apc.php.expectf||hphp/test/quick/apc.php.expectf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp",
            "hphp/test/quick/apc.php||hphp/test/quick/apc.php",
            "hphp/test/quick/apc.php.expectf||hphp/test/quick/apc.php.expectf"
          ],
          "candidate": [
            "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp",
            "hphp/test/quick/apc.php||hphp/test/quick/apc.php",
            "hphp/test/quick/apc.php.expectf||hphp/test/quick/apc.php.expectf"
          ]
        }
      },
      "candidate_diff": {
        "hphp/runtime/ext/apc/ext_apc.cpp||hphp/runtime/ext/apc/ext_apc.cpp": [
          "File: hphp/runtime/ext/apc/ext_apc.cpp -> hphp/runtime/ext/apc/ext_apc.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   return *static_cast<ConcurrentTableSharedStore*>(vpStore);",
          "96: }",
          "98: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "98: bool isKeyInvalid(const String &key) {",
          "100:   return key.find('\\0') != -1;",
          "101: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "307:         return Variant(false);",
          "308:       }",
          "309:       Variant v = iter.second();",
          "313:     return Variant(ArrayData::Create());",
          "314:   }",
          "",
          "[Removed Lines]",
          "310:       apc_store().set(key.toString(), v, ttl);",
          "311:     }",
          "",
          "[Added Lines]",
          "316:       auto const& strKey = key.toCStrRef();",
          "317:       if (isKeyInvalid(strKey)) {",
          "318:         throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "319:         return Variant(false);",
          "320:       }",
          "321:       apc_store().set(strKey, v, ttl);",
          "322:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "318:     return Variant(false);",
          "319:   }",
          "320:   String strKey = key_or_array.toString();",
          "321:   apc_store().set(strKey, var, ttl);",
          "322:   return Variant(true);",
          "323: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "332:   if (isKeyInvalid(strKey)) {",
          "333:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "334:     return Variant(false);",
          "335:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "330:                    const String& key,",
          "331:                    const Variant& var) {",
          "332:   if (!apcExtension::Enable) return false;",
          "333:   apc_store().setWithoutTTL(key, var);",
          "334:   return true;",
          "335: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "348:   if (isKeyInvalid(key)) {",
          "349:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "350:     return false;",
          "351:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "353:         return false;",
          "354:       }",
          "355:       Variant v = iter.second();",
          "358:       }",
          "359:     }",
          "360:     return errors.toVariant();",
          "",
          "[Removed Lines]",
          "356:       if (!apc_store().add(key.toString(), v, ttl)) {",
          "357:         errors.add(key, -1);",
          "",
          "[Added Lines]",
          "376:       auto const& strKey = key.toCStrRef();",
          "377:       if (isKeyInvalid(strKey)) {",
          "378:         throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "379:         return false;",
          "380:       }",
          "382:       if (!apc_store().add(strKey, v, ttl)) {",
          "383:         errors.add(strKey, -1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "365:     return false;",
          "366:   }",
          "367:   String strKey = key_or_array.toString();",
          "368:   return apc_store().add(strKey, var, ttl);",
          "369: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394:   if (isKeyInvalid(strKey)) {",
          "395:     throw_invalid_argument(\"apc key: (contains invalid characters)\");",
          "396:     return false;",
          "397:   }",
          "",
          "---------------"
        ],
        "hphp/test/quick/apc.php||hphp/test/quick/apc.php": [
          "File: hphp/test/quick/apc.php -> hphp/test/quick/apc.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:   }",
          "62: }",
          "64: <<__EntryPoint>> function main(): void {",
          "65:   testApc(array(7, 4, 1776));",
          "66:   testApc(array(\"sv0\", \"sv1\"));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: function testInvalidKeys() {",
          "66:     apc_add(\"bar\\x00baz\", 10);",
          "67:     apc_store(\"test\\x00xyz\", \"hello\");",
          "68:     apc_store(array(\"validkey\" => \"validvalue\", \"invalid\\x00key\" => \"value\"));",
          "69:     foreach (array('bar', 'test', 'validkey', 'invalid') as $k) {",
          "70:         var_dump(__hhvm_intrinsics\\apc_fetch_no_check($k));",
          "71:     }",
          "72: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:   var_dump($b);",
          "75:   testKeyTypes();",
          "76: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   testInvalidKeys();",
          "",
          "---------------"
        ],
        "hphp/test/quick/apc.php.expectf||hphp/test/quick/apc.php.expectf": [
          "File: hphp/test/quick/apc.php.expectf -> hphp/test/quick/apc.php.expectf",
          "--- Hunk 1 ---",
          "[Context before]",
          "72: Undefined index: 3",
          "73: Undefined index: 2",
          "74: string(5) \"three\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: Warning: Invalid argument: apc key: (contains invalid characters)%S",
          "78: Warning: Invalid argument: apc key: (contains invalid characters)%S",
          "80: Warning: Invalid argument: apc key: (contains invalid characters)%S",
          "81: bool(false)",
          "82: bool(false)",
          "83: string(10) \"validvalue\"",
          "84: bool(false)",
          "",
          "---------------"
        ]
      }
    }
  ]
}