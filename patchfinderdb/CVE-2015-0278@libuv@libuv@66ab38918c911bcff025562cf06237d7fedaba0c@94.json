{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b03192ed6f1ad6f1978d91a4e1d0d7fdda01a6da",
      "candidate_info": {
        "commit_hash": "b03192ed6f1ad6f1978d91a4e1d0d7fdda01a6da",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b03192ed6f1ad6f1978d91a4e1d0d7fdda01a6da",
        "files": [
          "src/unix/darwin-proctitle.c"
        ],
        "message": "darwin: fix ios build error\n\nInclude <errno.h> and <stdlib.h>.  They're being pulled in implicitly\non OS X but apparently that's not the case with iOS builds.\n\nBuild breakage introduced in 5ff6f85 by yours truly. Mea culpa.\n\nFixes #885 and #891.",
        "before_after_code_files": [
          "src/unix/darwin-proctitle.c||src/unix/darwin-proctitle.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/darwin-proctitle.c||src/unix/darwin-proctitle.c": [
          "File: src/unix/darwin-proctitle.c -> src/unix/darwin-proctitle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <dlfcn.h>",
          "24: #if !TARGET_OS_IPHONE",
          "25: # include <CoreFoundation/CoreFoundation.h>",
          "",
          "[Removed Lines]",
          "21: #include <TargetConditionals.h>",
          "",
          "[Added Lines]",
          "22: #include <errno.h>",
          "23: #include <stdlib.h>",
          "25: #include <TargetConditionals.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "777019b76864d140de9e5b401bca38570805c4d5",
      "candidate_info": {
        "commit_hash": "777019b76864d140de9e5b401bca38570805c4d5",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/777019b76864d140de9e5b401bca38570805c4d5",
        "files": [
          "include/uv.h",
          "src/unix/tty.c",
          "src/win/tty.c"
        ],
        "message": "unix: make uv_tty_reset_mode() async signal-safe\n\nMake it possible to call uv_tty_reset_mode() from inside a signal\nhandler.  The primary motivation is to make it possible to restore\nthe TTY from inside a SIGINT or SIGTERM signal handler.\n\nFixes #954.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/tty.c||src/unix/tty.c",
          "src/win/tty.c||src/win/tty.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1078: UV_EXTERN void uv_tty_reset_mode(void);",
          "",
          "[Added Lines]",
          "1081: UV_EXTERN int uv_tty_reset_mode(void);",
          "",
          "---------------"
        ],
        "src/unix/tty.c||src/unix/tty.c": [
          "File: src/unix/tty.c -> src/unix/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include \"uv.h\"",
          "23: #include \"internal.h\"",
          "25: #include <assert.h>",
          "26: #include <unistd.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include \"spinlock.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: #include <errno.h>",
          "29: #include <sys/ioctl.h>",
          "32: static int orig_termios_fd = -1;",
          "33: static struct termios orig_termios;",
          "36: int uv_tty_init(uv_loop_t* loop, uv_tty_t* tty, int fd, int readable) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: static uv_spinlock_t termios_spinlock = UV_SPINLOCK_INITIALIZER;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "69:       return -errno;",
          "72:     if (orig_termios_fd == -1) {",
          "73:       orig_termios = tty->orig_termios;",
          "74:       orig_termios_fd = fd;",
          "75:     }",
          "77:     raw = tty->orig_termios;",
          "78:     raw.c_iflag &= ~(BRKINT | ICRNL | INPCK | ISTRIP | IXON);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73:     uv_spinlock_lock(&termios_spinlock);",
          "78:     uv_spinlock_unlock(&termios_spinlock);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "161: }",
          "168: }",
          "",
          "[Removed Lines]",
          "164: void uv_tty_reset_mode(void) {",
          "165:   if (orig_termios_fd >= 0) {",
          "166:     tcsetattr(orig_termios_fd, TCSANOW, &orig_termios);",
          "167:   }",
          "",
          "[Added Lines]",
          "171: int uv_tty_reset_mode(void) {",
          "172:   int err;",
          "174:   if (!uv_spinlock_trylock(&termios_spinlock))",
          "177:   err = 0;",
          "178:   if (orig_termios_fd != -1)",
          "179:     if (tcsetattr(orig_termios_fd, TCSANOW, &orig_termios))",
          "180:       err = -errno;",
          "182:   uv_spinlock_unlock(&termios_spinlock);",
          "183:   return err;",
          "",
          "---------------"
        ],
        "src/win/tty.c||src/win/tty.c": [
          "File: src/win/tty.c -> src/win/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1866: }",
          "1872: }",
          "",
          "[Removed Lines]",
          "1869: void uv_tty_reset_mode(void) {",
          "1871:   ;",
          "",
          "[Added Lines]",
          "1869: int uv_tty_reset_mode(void) {",
          "1871:   return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8da229f848284ebe112795ad76bc0a43b40b00f",
      "candidate_info": {
        "commit_hash": "a8da229f848284ebe112795ad76bc0a43b40b00f",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/a8da229f848284ebe112795ad76bc0a43b40b00f",
        "files": [
          "config-unix.mk"
        ],
        "message": "build: remove CSTDFLAG, use only CFLAGS",
        "before_after_code_files": [
          "config-unix.mk||config-unix.mk"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "config-unix.mk||config-unix.mk": [
          "File: config-unix.mk -> config-unix.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: # IN THE SOFTWARE.",
          "21: E=",
          "24: CPPFLAGS += -I$(SRCDIR)/src",
          "25: LDFLAGS=-lm",
          "",
          "[Removed Lines]",
          "22: CSTDFLAG=--std=c89 -pedantic -Wall -Wextra -Wno-unused-parameter",
          "23: CFLAGS += -g",
          "",
          "[Added Lines]",
          "22: CFLAGS += -g -Wall -Wextra -Wno-unused-parameter -std=c89",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: endif",
          "98: ifeq (linux,$(PLATFORM))",
          "100: LDFLAGS+=-ldl -lrt",
          "101: RUNNER_CFLAGS += -D_GNU_SOURCE",
          "102: OBJS += src/unix/linux-core.o \\",
          "",
          "[Removed Lines]",
          "99: CSTDFLAG += -D_GNU_SOURCE",
          "",
          "[Added Lines]",
          "98: CFLAGS += -D_GNU_SOURCE",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170:  touch $@",
          "172: src/unix/%.o src/unix/%.pic.o: src/unix/%.c include/uv.h include/uv-private/uv-unix.h src/unix/internal.h src/unix/.buildstamp $(DTRACE_HEADER)",
          "175: src/%.o src/%.pic.o: src/%.c include/uv.h include/uv-private/uv-unix.h src/.buildstamp",
          "178: test/%.o: test/%.c include/uv.h test/.buildstamp",
          "181: clean-platform:",
          "182:  $(RM) test/run-{tests,benchmarks}.dSYM $(OBJS) $(OBJS:%.o=%.pic.o) src/unix/uv-dtrace.h",
          "",
          "[Removed Lines]",
          "173:  $(CC) $(CSTDFLAG) $(CPPFLAGS) $(CFLAGS) -c $< -o $@",
          "176:  $(CC) $(CSTDFLAG) $(CPPFLAGS) $(CFLAGS) -c $< -o $@",
          "179:  $(CC) $(CSTDFLAG) $(CPPFLAGS) $(CFLAGS) -c $< -o $@",
          "",
          "[Added Lines]",
          "172:  $(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@",
          "175:  $(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@",
          "178:  $(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5ccdfc568dc6b2d44542c45d347c0020631dcb3e",
      "candidate_info": {
        "commit_hash": "5ccdfc568dc6b2d44542c45d347c0020631dcb3e",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/5ccdfc568dc6b2d44542c45d347c0020631dcb3e",
        "files": [
          "Makefile.am",
          "test/test-default-loop-close.c",
          "test/test-list.h",
          "uv.gyp"
        ],
        "message": "test: add test for closing and recreating default loop",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "test/test-default-loop-close.c||test/test-default-loop-close.c",
          "test/test-list.h||test/test-list.h",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:                          test/test-condvar.c \\",
          "128:                          test/test-connection-fail.c \\",
          "129:                          test/test-cwd-and-chdir.c \\",
          "130:                          test/test-delayed-accept.c \\",
          "131:                          test/test-dlerror.c \\",
          "132:                          test/test-embed.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:                          test/test-default-loop-close.c \\",
          "",
          "---------------"
        ],
        "test/test-default-loop-close.c||test/test-default-loop-close.c": [
          "File: test/test-default-loop-close.c -> test/test-default-loop-close.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: #include \"uv.h\"",
          "23: #include \"task.h\"",
          "26: static int timer_cb_called;",
          "29: static void timer_cb(uv_timer_t* timer) {",
          "30:   timer_cb_called++;",
          "31:   uv_close((uv_handle_t*) timer, NULL);",
          "32: }",
          "35: TEST_IMPL(default_loop_close) {",
          "36:   uv_loop_t* loop;",
          "37:   uv_timer_t timer_handle;",
          "39:   loop = uv_default_loop();",
          "40:   ASSERT(loop != NULL);",
          "42:   ASSERT(0 == uv_timer_init(loop, &timer_handle));",
          "43:   ASSERT(0 == uv_timer_start(&timer_handle, timer_cb, 1, 0));",
          "44:   ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));",
          "45:   ASSERT(1 == timer_cb_called);",
          "46:   ASSERT(0 == uv_loop_close(loop));",
          "48:   loop = uv_default_loop();",
          "49:   ASSERT(loop != NULL);",
          "51:   ASSERT(0 == uv_timer_init(loop, &timer_handle));",
          "52:   ASSERT(0 == uv_timer_start(&timer_handle, timer_cb, 1, 0));",
          "53:   ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));",
          "54:   ASSERT(2 == timer_cb_called);",
          "55:   ASSERT(0 == uv_loop_close(loop));",
          "57:   MAKE_VALGRIND_HAPPY();",
          "58:   return 0;",
          "59: }",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: TEST_DECLARE   (loop_stop)",
          "30: TEST_DECLARE   (loop_update_time)",
          "31: TEST_DECLARE   (loop_backend_timeout)",
          "32: TEST_DECLARE   (barrier_1)",
          "33: TEST_DECLARE   (barrier_2)",
          "34: TEST_DECLARE   (barrier_3)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: TEST_DECLARE   (default_loop_close)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:   TEST_ENTRY  (loop_stop)",
          "309:   TEST_ENTRY  (loop_update_time)",
          "310:   TEST_ENTRY  (loop_backend_timeout)",
          "311:   TEST_ENTRY  (barrier_1)",
          "312:   TEST_ENTRY  (barrier_2)",
          "313:   TEST_ENTRY  (barrier_3)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312:   TEST_ENTRY  (default_loop_close)",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:         'test/test-close-order.c',",
          "311:         'test/test-connection-fail.c',",
          "312:         'test/test-cwd-and-chdir.c',",
          "313:         'test/test-delayed-accept.c',",
          "314:         'test/test-error.c',",
          "315:         'test/test-embed.c',",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313:         'test/test-default-loop-close.c',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40ad12e5bedb7f328328f5fb634203e3b84b9af9",
      "candidate_info": {
        "commit_hash": "40ad12e5bedb7f328328f5fb634203e3b84b9af9",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/40ad12e5bedb7f328328f5fb634203e3b84b9af9",
        "files": [
          "include/uv.h",
          "src/unix/stream.c",
          "test/test-tcp-try-write.c"
        ],
        "message": "unix: return UV_EAGAIN if uv_try_write cannot write any data",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/stream.c||src/unix/stream.c",
          "test/test-tcp-try-write.c||test/test-tcp-try-write.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1376:   if (stream->connect_req != NULL || stream->write_queue_size != 0)",
          "1379:   has_pollout = uv__io_active(&stream->io_watcher, UV__POLLOUT);",
          "",
          "[Removed Lines]",
          "1377:     return 0;",
          "",
          "[Added Lines]",
          "1377:     return -EAGAIN;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1404:     uv__stream_osx_interrupt_select(stream);",
          "1405:   }",
          "1408: }",
          "",
          "[Removed Lines]",
          "1407:   return (int) written;",
          "",
          "[Added Lines]",
          "1407:   if (written == 0)",
          "1408:     return -EAGAIN;",
          "1409:   else",
          "1410:     return written;",
          "",
          "---------------"
        ],
        "test/test-tcp-try-write.c||test/test-tcp-try-write.c": [
          "File: test/test-tcp-try-write.c -> test/test-tcp-try-write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   do {",
          "64:     buf = uv_buf_init(zeroes, sizeof(zeroes));",
          "65:     r = uv_try_write((uv_stream_t*) &client, &buf, 1);",
          "72:   } while (1);",
          "73:   uv_close((uv_handle_t*) &client, close_cb);",
          "74: }",
          "",
          "[Removed Lines]",
          "66:     ASSERT(r >= 0);",
          "67:     bytes_written += r;",
          "70:     if (r != (int) sizeof(zeroes))",
          "71:       break;",
          "",
          "[Added Lines]",
          "66:     ASSERT(r > 0 || r == UV_EAGAIN);",
          "67:     if (r > 0) {",
          "68:       bytes_written += r;",
          "71:       if (r != (int) sizeof(zeroes))",
          "72:         break;",
          "73:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}