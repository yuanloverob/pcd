{
  "cve_id": "CVE-2016-9919",
  "cve_desc": "The icmp6_send function in net/ipv6/icmp.c in the Linux kernel through 4.8.12 omits a certain check of the dst data structure, which allows remote attackers to cause a denial of service (panic) via a fragmented IPv6 packet.",
  "repo": "torvalds/linux",
  "patch_hash": "79dc7e3f1cd323be4c81aa1a94faa1b3ed987fb2",
  "patch_info": {
    "commit_hash": "79dc7e3f1cd323be4c81aa1a94faa1b3ed987fb2",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/79dc7e3f1cd323be4c81aa1a94faa1b3ed987fb2",
    "files": [
      "net/ipv6/icmp.c"
    ],
    "message": "net: handle no dst on skb in icmp6_send\n\nAndrey reported the following while fuzzing the kernel with syzkaller:\n\nkasan: CONFIG_KASAN_INLINE enabled\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN\nModules linked in:\nCPU: 0 PID: 3859 Comm: a.out Not tainted 4.9.0-rc6+ #429\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011\ntask: ffff8800666d4200 task.stack: ffff880067348000\nRIP: 0010:[<ffffffff833617ec>]  [<ffffffff833617ec>]\nicmp6_send+0x5fc/0x1e30 net/ipv6/icmp.c:451\nRSP: 0018:ffff88006734f2c0  EFLAGS: 00010206\nRAX: ffff8800666d4200 RBX: 0000000000000000 RCX: 0000000000000000\nRDX: 0000000000000000 RSI: dffffc0000000000 RDI: 0000000000000018\nRBP: ffff88006734f630 R08: ffff880064138418 R09: 0000000000000003\nR10: dffffc0000000000 R11: 0000000000000005 R12: 0000000000000000\nR13: ffffffff84e7e200 R14: ffff880064138484 R15: ffff8800641383c0\nFS:  00007fb3887a07c0(0000) GS:ffff88006cc00000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000020000000 CR3: 000000006b040000 CR4: 00000000000006f0\nStack:\n ffff8800666d4200 ffff8800666d49f8 ffff8800666d4200 ffffffff84c02460\n ffff8800666d4a1a 1ffff1000ccdaa2f ffff88006734f498 0000000000000046\n ffff88006734f440 ffffffff832f4269 ffff880064ba7456 0000000000000000\nCall Trace:\n [<ffffffff83364ddc>] icmpv6_param_prob+0x2c/0x40 net/ipv6/icmp.c:557\n [<     inline     >] ip6_tlvopt_unknown net/ipv6/exthdrs.c:88\n [<ffffffff83394405>] ip6_parse_tlv+0x555/0x670 net/ipv6/exthdrs.c:157\n [<ffffffff8339a759>] ipv6_parse_hopopts+0x199/0x460 net/ipv6/exthdrs.c:663\n [<ffffffff832ee773>] ipv6_rcv+0xfa3/0x1dc0 net/ipv6/ip6_input.c:191\n ...\n\nicmp6_send / icmpv6_send is invoked for both rx and tx paths. In both\ncases the dst->dev should be preferred for determining the L3 domain\nif the dst has been set on the skb. Fallback to the skb->dev if it has\nnot. This covers the case reported here where icmp6_send is invoked on\nRx before the route lookup.\n\nFixes: 5d41ce29e (\"net: icmp6_send should use dst dev to determine L3 domain\")\nReported-by: Andrey Konovalov <andreyknvl@google.com>\nSigned-off-by: David Ahern <dsa@cumulusnetworks.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/ipv6/icmp.c||net/ipv6/icmp.c"
    ]
  },
  "patch_diff": {
    "net/ipv6/icmp.c||net/ipv6/icmp.c": [
      "File: net/ipv6/icmp.c -> net/ipv6/icmp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "448:  if (__ipv6_addr_needs_scope_id(addr_type))",
      "449:   iif = skb->dev->ifindex;",
      "",
      "[Removed Lines]",
      "450:  else",
      "451:   iif = l3mdev_master_ifindex(skb_dst(skb)->dev);",
      "",
      "[Added Lines]",
      "450:  else {",
      "451:   dst = skb_dst(skb);",
      "452:   iif = l3mdev_master_ifindex(dst ? dst->dev : skb->dev);",
      "453:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1a41741fd60b0a2d1102c3d1ff9d58cb324a8d29",
      "candidate_info": {
        "commit_hash": "1a41741fd60b0a2d1102c3d1ff9d58cb324a8d29",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1a41741fd60b0a2d1102c3d1ff9d58cb324a8d29",
        "files": [
          "drivers/mfd/wm8994-core.c"
        ],
        "message": "mfd: wm8994-core: Don't use managed regulator bulk get API\n\nThe kernel WARNs and then crashes today if wm8994_device_init() fails\nafter calling devm_regulator_bulk_get().\n\nThat happens because there are multiple devices involved here and the\norder in which managed resources are freed isn't correct.\n\nThe regulators are added as children of wm8994->dev.  Whereas,\ndevm_regulator_bulk_get() receives wm8994->dev as the device, though it\ngets the same regulators which were added as children of wm8994->dev\nearlier.\n\nDuring failures, the children are removed first and the core eventually\ncalls regulator_unregister() for them. As regulator_put() was never done\nfor them (opposite of devm_regulator_bulk_get()), the kernel WARNs at\n\n\tWARN_ON(rdev->open_count);\n\nAnd eventually it crashes from debugfs_remove_recursive().\n\n--------x------------------x----------------\n\n wm8994 3-001a: Device is not a WM8994, ID is 0\n ------------[ cut here ]------------\n WARNING: CPU: 0 PID: 1 at /mnt/ssd/all/work/repos/devel/linux/drivers/regulator/core.c:4072 regulator_unregister+0xc8/0xd0\n Modules linked in:\n CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.8.0-rc6-00154-g54fe84cbd50b #41\n Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)\n [<c010e24c>] (unwind_backtrace) from [<c010af38>] (show_stack+0x10/0x14)\n [<c010af38>] (show_stack) from [<c032a1c4>] (dump_stack+0x88/0x9c)\n [<c032a1c4>] (dump_stack) from [<c011a98c>] (__warn+0xe8/0x100)\n [<c011a98c>] (__warn) from [<c011aa54>] (warn_slowpath_null+0x20/0x28)\n [<c011aa54>] (warn_slowpath_null) from [<c0384a0c>] (regulator_unregister+0xc8/0xd0)\n [<c0384a0c>] (regulator_unregister) from [<c0406434>] (release_nodes+0x16c/0x1dc)\n [<c0406434>] (release_nodes) from [<c04039c4>] (__device_release_driver+0x8c/0x110)\n [<c04039c4>] (__device_release_driver) from [<c0403a64>] (device_release_driver+0x1c/0x28)\n [<c0403a64>] (device_release_driver) from [<c0402b24>] (bus_remove_device+0xd8/0x104)\n [<c0402b24>] (bus_remove_device) from [<c03ffcd8>] (device_del+0x10c/0x218)\n [<c03ffcd8>] (device_del) from [<c0404e4c>] (platform_device_del+0x1c/0x88)\n [<c0404e4c>] (platform_device_del) from [<c0404ec4>] (platform_device_unregister+0xc/0x20)\n [<c0404ec4>] (platform_device_unregister) from [<c0428bc0>] (mfd_remove_devices_fn+0x5c/0x64)\n [<c0428bc0>] (mfd_remove_devices_fn) from [<c03ff9d8>] (device_for_each_child_reverse+0x4c/0x78)\n [<c03ff9d8>] (device_for_each_child_reverse) from [<c04288c4>] (mfd_remove_devices+0x20/0x30)\n [<c04288c4>] (mfd_remove_devices) from [<c042758c>] (wm8994_device_init+0x2ac/0x7f0)\n [<c042758c>] (wm8994_device_init) from [<c04f14a8>] (i2c_device_probe+0x178/0x1fc)\n [<c04f14a8>] (i2c_device_probe) from [<c04036fc>] (driver_probe_device+0x214/0x2c0)\n [<c04036fc>] (driver_probe_device) from [<c0403854>] (__driver_attach+0xac/0xb0)\n [<c0403854>] (__driver_attach) from [<c0401a74>] (bus_for_each_dev+0x68/0x9c)\n [<c0401a74>] (bus_for_each_dev) from [<c0402cf0>] (bus_add_driver+0x1a0/0x218)\n [<c0402cf0>] (bus_add_driver) from [<c040406c>] (driver_register+0x78/0xf8)\n [<c040406c>] (driver_register) from [<c04f20a0>] (i2c_register_driver+0x34/0x84)\n [<c04f20a0>] (i2c_register_driver) from [<c01017d0>] (do_one_initcall+0x40/0x170)\n [<c01017d0>] (do_one_initcall) from [<c0a00dbc>] (kernel_init_freeable+0x15c/0x1fc)\n [<c0a00dbc>] (kernel_init_freeable) from [<c06e07b0>] (kernel_init+0x8/0x114)\n [<c06e07b0>] (kernel_init) from [<c0107978>] (ret_from_fork+0x14/0x3c)\n ---[ end trace 0919d3d0bc998260 ]---\n\n [snip..]\n\n Unable to handle kernel NULL pointer dereference at virtual address 00000078\n pgd = c0004000\n [00000078] *pgd=00000000\n Internal error: Oops: 5 [#1] PREEMPT SMP ARM\n Modules linked in:\n CPU: 0 PID: 1 Comm: swapper/0 Tainted: G        W       4.8.0-rc6-00154-g54fe84cbd50b #41\n Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)\n task: ee874000 task.stack: ee878000\n PC is at down_write+0x14/0x54\n LR is at debugfs_remove_recursive+0x30/0x150\n\n [snip..]\n\n [<c06e489c>] (down_write) from [<c02e9954>] (debugfs_remove_recursive+0x30/0x150)\n [<c02e9954>] (debugfs_remove_recursive) from [<c0382b78>] (_regulator_put+0x24/0xac)\n [<c0382b78>] (_regulator_put) from [<c0382c1c>] (regulator_put+0x1c/0x2c)\n [<c0382c1c>] (regulator_put) from [<c0406434>] (release_nodes+0x16c/0x1dc)\n [<c0406434>] (release_nodes) from [<c04035d4>] (driver_probe_device+0xec/0x2c0)\n [<c04035d4>] (driver_probe_device) from [<c0403854>] (__driver_attach+0xac/0xb0)\n [<c0403854>] (__driver_attach) from [<c0401a74>] (bus_for_each_dev+0x68/0x9c)\n [<c0401a74>] (bus_for_each_dev) from [<c0402cf0>] (bus_add_driver+0x1a0/0x218)\n [<c0402cf0>] (bus_add_driver) from [<c040406c>] (driver_register+0x78/0xf8)\n [<c040406c>] (driver_register) from [<c04f20a0>] (i2c_register_driver+0x34/0x84)\n [<c04f20a0>] (i2c_register_driver) from [<c01017d0>] (do_one_initcall+0x40/0x170)\n [<c01017d0>] (do_one_initcall) from [<c0a00dbc>] (kernel_init_freeable+0x15c/0x1fc)\n [<c0a00dbc>] (kernel_init_freeable) from [<c06e07b0>] (kernel_init+0x8/0x114)\n [<c06e07b0>] (kernel_init) from [<c0107978>] (ret_from_fork+0x14/0x3c)\n Code: e1a04000 f590f000 e3a03001 e34f3fff (e1902f9f)\n ---[ end trace 0919d3d0bc998262 ]---\n\n--------x------------------x----------------\n\nFix the kernel warnings and crashes by using regulator_bulk_get()\ninstead of devm_regulator_bulk_get() and explicitly freeing the supplies\nin exit paths.\n\nTested on Exynos 5250, dual core ARM A15 machine.\n\nSigned-off-by: Viresh Kumar <viresh.kumar@linaro.org>\nAcked-by: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>\nSigned-off-by: Lee Jones <lee.jones@linaro.org>",
        "before_after_code_files": [
          "drivers/mfd/wm8994-core.c||drivers/mfd/wm8994-core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/mfd/wm8994-core.c||drivers/mfd/wm8994-core.c": [
          "File: drivers/mfd/wm8994-core.c -> drivers/mfd/wm8994-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "393:   BUG();",
          "394:   goto err;",
          "395:  }",
          "398:      wm8994->supplies);",
          "399:  if (ret != 0) {",
          "400:   dev_err(wm8994->dev, \"Failed to get supplies: %d\\n\", ret);",
          "",
          "[Removed Lines]",
          "397:  ret = devm_regulator_bulk_get(wm8994->dev, wm8994->num_supplies,",
          "",
          "[Added Lines]",
          "402:  ret = regulator_bulk_get(wm8994->dev, wm8994->num_supplies,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "405:         wm8994->supplies);",
          "406:  if (ret != 0) {",
          "407:   dev_err(wm8994->dev, \"Failed to enable supplies: %d\\n\", ret);",
          "409:  }",
          "411:  ret = wm8994_reg_read(wm8994, WM8994_SOFTWARE_RESET);",
          "",
          "[Removed Lines]",
          "408:   goto err;",
          "",
          "[Added Lines]",
          "413:   goto err_regulator_free;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "596: err_enable:",
          "597:  regulator_bulk_disable(wm8994->num_supplies,",
          "598:           wm8994->supplies);",
          "599: err:",
          "600:  mfd_remove_devices(wm8994->dev);",
          "601:  return ret;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "604: err_regulator_free:",
          "605:  regulator_bulk_free(wm8994->num_supplies, wm8994->supplies);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "607:  wm8994_irq_exit(wm8994);",
          "608:  regulator_bulk_disable(wm8994->num_supplies,",
          "609:           wm8994->supplies);",
          "610:  mfd_remove_devices(wm8994->dev);",
          "611: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "617:  regulator_bulk_free(wm8994->num_supplies, wm8994->supplies);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "40bea976c72b9ee60f8d097852deb53ccbeaffbe",
      "candidate_info": {
        "commit_hash": "40bea976c72b9ee60f8d097852deb53ccbeaffbe",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/40bea976c72b9ee60f8d097852deb53ccbeaffbe",
        "files": [
          "drivers/net/wireless/ath/ath9k/common-spectral.c"
        ],
        "message": "ath9k: fix NULL pointer dereference\n\nrelay_open() may return NULL, check the return value to avoid the crash.\n\nBUG: unable to handle kernel NULL pointer dereference at 0000000000000040\nIP: [<ffffffffa01a95c5>] ath_cmn_process_fft+0xd5/0x700 [ath9k_common]\nPGD 41cf28067 PUD 41be92067 PMD 0\nOops: 0000 [#1] SMP\nCPU: 0 PID: 0 Comm: swapper/0 Not tainted 4.8.6+ #35\nHardware name: Hewlett-Packard h8-1080t/2A86, BIOS 6.15    07/04/2011\ntask: ffffffff81e0c4c0 task.stack: ffffffff81e00000\nRIP: 0010:[<ffffffffa01a95c5>] [<ffffffffa01a95c5>] ath_cmn_process_fft+0xd5/0x700 [ath9k_common]\nRSP: 0018:ffff88041f203ca0 EFLAGS: 00010293\nRAX: 0000000000000000 RBX: 000000000000059f RCX: 0000000000000000\nRDX: 0000000000000000 RSI: 0000000000000040 RDI: ffffffff81f0ca98\nRBP: ffff88041f203dc8 R08: ffffffffffffffff R09: 00000000000000ff\nR10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000\nR13: ffffffff81f0ca98 R14: 0000000000000000 R15: 0000000000000000\nFS:  0000000000000000(0000) GS:ffff88041f200000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000000000040 CR3: 000000041b6ec000 CR4: 00000000000006f0\nStack:\n0000000000000363 00000000000003f3 00000000000003f3 00000000000001f9\n000000000000049a 0000000001252c04 ffff88041f203e44 ffff880417b4bfd0\n0000000000000008 ffff88041785b9c0 0000000000000002 ffff88041613dc60\n\nCall Trace:\n<IRQ>\n[<ffffffffa01b6441>] ath9k_tasklet+0x1b1/0x220 [ath9k]\n[<ffffffff8105d8dd>] tasklet_action+0x4d/0xf0\n[<ffffffff8105dde2>] __do_softirq+0x92/0x2a0\n\nReported-by: Devin Tuchsen <devin.tuchsen@gmail.com>\nTested-by: Devin Tuchsen <devin.tuchsen@gmail.com>\nSigned-off-by: Miaoqing Pan <miaoqing@codeaurora.org>\nSigned-off-by: Kalle Valo <kvalo@qca.qualcomm.com>",
        "before_after_code_files": [
          "drivers/net/wireless/ath/ath9k/common-spectral.c||drivers/net/wireless/ath/ath9k/common-spectral.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/net/wireless/ath/ath9k/common-spectral.c||drivers/net/wireless/ath/ath9k/common-spectral.c": [
          "File: drivers/net/wireless/ath/ath9k/common-spectral.c -> drivers/net/wireless/ath/ath9k/common-spectral.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "528:  if (!(radar_info->pulse_bw_info & SPECTRAL_SCAN_BITMASK))",
          "529:   return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "531:  if (!spec_priv->rfs_chan_spec_scan)",
          "532:   return 1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1073: void ath9k_cmn_spectral_deinit_debug(struct ath_spec_scan_priv *spec_priv)",
          "1074: {",
          "1076:   relay_close(spec_priv->rfs_chan_spec_scan);",
          "1077:   spec_priv->rfs_chan_spec_scan = NULL;",
          "1078:  }",
          "",
          "[Removed Lines]",
          "1075:  if (IS_ENABLED(CONFIG_ATH9K_DEBUGFS)) {",
          "",
          "[Added Lines]",
          "1078:  if (IS_ENABLED(CONFIG_ATH9K_DEBUGFS) && spec_priv->rfs_chan_spec_scan) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1086:          debugfs_phy,",
          "1087:          1024, 256, &rfs_spec_scan_cb,",
          "1088:          NULL);",
          "1089:  debugfs_create_file(\"spectral_scan_ctl\",",
          "1090:        S_IRUSR | S_IWUSR,",
          "1091:        debugfs_phy, spec_priv,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1092:  if (!spec_priv->rfs_chan_spec_scan)",
          "1093:   return;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b70d792cf6775fb5d0737524387893daeb5374a",
      "candidate_info": {
        "commit_hash": "1b70d792cf6775fb5d0737524387893daeb5374a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1b70d792cf6775fb5d0737524387893daeb5374a",
        "files": [
          "include/net/ip6_route.h",
          "net/ipv6/icmp.c"
        ],
        "message": "ipv6: Use rt6i_idev index for echo replies to a local address\n\nTariq repored local pings to linklocal address is failing:\n$ ifconfig ens8\nens8: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n        inet 11.141.16.6  netmask 255.255.0.0  broadcast 11.141.255.255\n        inet6 fe80::7efe:90ff:fecb:7502  prefixlen 64  scopeid 0x20<link>\n        ether 7c:fe:90:cb:75:02  txqueuelen 1000  (Ethernet)\n        RX packets 12  bytes 1164 (1.1 KiB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 30  bytes 2484 (2.4 KiB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\n$  /bin/ping6 -c 3 fe80::7efe:90ff:fecb:7502%ens8\nPING fe80::7efe:90ff:fecb:7502%ens8(fe80::7efe:90ff:fecb:7502) 56 data bytes\n\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "include/net/ip6_route.h||include/net/ip6_route.h",
          "net/ipv6/icmp.c||net/ipv6/icmp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv6/icmp.c||net/ipv6/icmp.c"
          ],
          "candidate": [
            "net/ipv6/icmp.c||net/ipv6/icmp.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/ip6_route.h||include/net/ip6_route.h": [
          "File: include/net/ip6_route.h -> include/net/ip6_route.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "164: void rt6_remove_prefsrc(struct inet6_ifaddr *ifp);",
          "165: void rt6_clean_tohost(struct net *net, struct in6_addr *gateway);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167: static inline const struct rt6_info *skb_rt6_info(const struct sk_buff *skb)",
          "168: {",
          "169:  const struct dst_entry *dst = skb_dst(skb);",
          "170:  const struct rt6_info *rt6 = NULL;",
          "172:  if (dst)",
          "173:   rt6 = container_of(dst, struct rt6_info, dst);",
          "175:  return rt6;",
          "176: }",
          "",
          "---------------"
        ],
        "net/ipv6/icmp.c||net/ipv6/icmp.c": [
          "File: net/ipv6/icmp.c -> net/ipv6/icmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "399:  return ERR_PTR(err);",
          "400: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "402: static int icmp6_iif(const struct sk_buff *skb)",
          "403: {",
          "404:  int iif = skb->dev->ifindex;",
          "410:  if (unlikely(iif == LOOPBACK_IFINDEX)) {",
          "411:   const struct rt6_info *rt6 = skb_rt6_info(skb);",
          "413:   if (rt6)",
          "414:    iif = rt6->rt6i_idev->dev->ifindex;",
          "415:  }",
          "417:  return iif;",
          "418: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "462:  if (__ipv6_addr_needs_scope_id(addr_type)) {",
          "475:  } else {",
          "476:   dst = skb_dst(skb);",
          "477:   iif = l3mdev_master_ifindex(dst ? dst->dev : skb->dev);",
          "",
          "[Removed Lines]",
          "463:   iif = skb->dev->ifindex;",
          "466:   if (iif == LOOPBACK_IFINDEX) {",
          "467:    dst = skb_dst(skb);",
          "468:    if (dst) {",
          "469:     struct rt6_info *rt;",
          "471:     rt = container_of(dst, struct rt6_info, dst);",
          "472:     iif = rt->rt6i_idev->dev->ifindex;",
          "473:    }",
          "474:   }",
          "",
          "[Added Lines]",
          "481:   iif = icmp6_iif(skb);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "694:  fl6.daddr = ipv6_hdr(skb)->saddr;",
          "695:  if (saddr)",
          "696:   fl6.saddr = *saddr;",
          "698:  fl6.fl6_icmp_type = ICMPV6_ECHO_REPLY;",
          "699:  fl6.flowi6_mark = mark;",
          "700:  fl6.flowi6_uid = sock_net_uid(net, NULL);",
          "",
          "[Removed Lines]",
          "697:  fl6.flowi6_oif = skb->dev->ifindex;",
          "",
          "[Added Lines]",
          "704:  fl6.flowi6_oif = icmp6_iif(skb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1d2f7b2d956e242179aaf4a08f3545f99c81f9a3",
      "candidate_info": {
        "commit_hash": "1d2f7b2d956e242179aaf4a08f3545f99c81f9a3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1d2f7b2d956e242179aaf4a08f3545f99c81f9a3",
        "files": [
          "net/ipv6/icmp.c",
          "net/ipv6/tcp_ipv6.c"
        ],
        "message": "net: ipv6: tcp reset, icmp need to consider L3 domain\n\nResponses for packets to unused ports are getting lost with L3 domains.\n\nIPv4 has ip_send_unicast_reply for sending TCP responses which accounts\nfor L3 domains; update the IPv6 counterpart tcp_v6_send_response.\nFor icmp the L3 master check needs to be moved up in icmp6_send\nto properly respond to UDP packets to a port with no listener.\n\nFixes: ca254490c8df (\"net: Add VRF support to IPv6 stack\")\nSigned-off-by: David Ahern <dsa@cumulusnetworks.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv6/icmp.c||net/ipv6/icmp.c",
          "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv6/icmp.c||net/ipv6/icmp.c"
          ],
          "candidate": [
            "net/ipv6/icmp.c||net/ipv6/icmp.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv6/icmp.c||net/ipv6/icmp.c": [
          "File: net/ipv6/icmp.c -> net/ipv6/icmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:  if (__ipv6_addr_needs_scope_id(addr_type))",
          "447:   iif = skb->dev->ifindex;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448:  else",
          "449:   iif = l3mdev_master_ifindex(skb->dev);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "499:  else if (!fl6.flowi6_oif)",
          "500:   fl6.flowi6_oif = np->ucast_oif;",
          "505:  dst = icmpv6_route_lookup(net, skb, sk, &fl6);",
          "506:  if (IS_ERR(dst))",
          "507:   goto out;",
          "",
          "[Removed Lines]",
          "502:  if (!fl6.flowi6_oif)",
          "503:   fl6.flowi6_oif = l3mdev_master_ifindex(skb->dev);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/ipv6/tcp_ipv6.c||net/ipv6/tcp_ipv6.c": [
          "File: net/ipv6/tcp_ipv6.c -> net/ipv6/tcp_ipv6.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "810:  fl6.flowi6_proto = IPPROTO_TCP;",
          "811:  if (rt6_need_strict(&fl6.daddr) && !oif)",
          "812:   fl6.flowi6_oif = tcp_v6_iif(skb);",
          "814:   fl6.flowi6_oif = oif;",
          "815:  fl6.flowi6_mark = IP6_REPLY_MARK(net, skb->mark);",
          "816:  fl6.fl6_dport = t1->dest;",
          "817:  fl6.fl6_sport = t1->source;",
          "",
          "[Removed Lines]",
          "813:  else",
          "",
          "[Added Lines]",
          "813:  else {",
          "814:   if (!oif && netif_index_is_l3_master(net, skb->skb_iif))",
          "815:    oif = skb->skb_iif;",
          "818:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4832c30d5458387ff2533ff66fbde26ad8bb5a2d",
      "candidate_info": {
        "commit_hash": "4832c30d5458387ff2533ff66fbde26ad8bb5a2d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/4832c30d5458387ff2533ff66fbde26ad8bb5a2d",
        "files": [
          "net/ipv6/addrconf.c",
          "net/ipv6/icmp.c",
          "net/ipv6/route.c"
        ],
        "message": "net: ipv6: put host and anycast routes on device with address\n\nOne nagging difference between ipv4 and ipv6 is host routes for ipv6\naddresses are installed using the loopback device or VRF / L3 Master\ndevice. e.g.,\n\n    2001:db8:1::/120 dev veth0 proto kernel metric 256 pref medium\n    local 2001:db8:1::1 dev lo table local proto kernel metric 0 pref medium\n\nUsing the loopback device is convenient -- necessary for local tx, but\nhas some nasty side effects, most notably setting the 'lo' device down\ncauses all host routes for all local IPv6 address to be removed from the\nFIB and completely breaks IPv6 networking across all interfaces.\n\nThis patch puts FIB entries for IPv6 routes against the device. This\nsimplifies the routes in the FIB, for example by making dst->dev and\nrt6i_idev->dev the same (a future patch can look at removing the device\nreference taken for rt6i_idev for FIB entries).\n\nWhen copies are made on FIB lookups, the cloned route has dst->dev\nset to loopback (or the L3 master device). This is needed for the\nlocal Tx of packets to local addresses.\n\nWith fib entries allocated against the real network device, the addrconf\ncode that reinserts host routes on admin up of 'lo' is no longer needed.\n\nSigned-off-by: David Ahern <dsahern@gmail.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/ipv6/addrconf.c||net/ipv6/addrconf.c",
          "net/ipv6/icmp.c||net/ipv6/icmp.c",
          "net/ipv6/route.c||net/ipv6/route.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv6/icmp.c||net/ipv6/icmp.c"
          ],
          "candidate": [
            "net/ipv6/icmp.c||net/ipv6/icmp.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv6/addrconf.c||net/ipv6/addrconf.c": [
          "File: net/ipv6/addrconf.c -> net/ipv6/addrconf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3030: static void init_loopback(struct net_device *dev)",
          "3031: {",
          "3032:  struct inet6_dev  *idev;",
          "",
          "[Removed Lines]",
          "3033:  struct net_device *sp_dev;",
          "3034:  struct inet6_ifaddr *sp_ifa;",
          "3035:  struct rt6_info *sp_rt;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3045:  }",
          "3047:  add_addr(idev, &in6addr_loopback, 128, IFA_HOST);",
          "3087: }",
          "3089: void addrconf_add_linklocal(struct inet6_dev *idev,",
          "",
          "[Removed Lines]",
          "3050:  for_each_netdev(dev_net(dev), sp_dev) {",
          "3051:   if (!strcmp(sp_dev->name, dev->name))",
          "3052:    continue;",
          "3054:   idev = __in6_dev_get(sp_dev);",
          "3055:   if (!idev)",
          "3056:    continue;",
          "3058:   read_lock_bh(&idev->lock);",
          "3059:   list_for_each_entry(sp_ifa, &idev->addr_list, if_list) {",
          "3061:    if (sp_ifa->flags & (IFA_F_DADFAILED | IFA_F_TENTATIVE))",
          "3062:     continue;",
          "3064:    if (sp_ifa->rt) {",
          "3069:     if (!sp_ifa->rt->rt6i_node) {",
          "3070:      ip6_rt_put(sp_ifa->rt);",
          "3071:      sp_ifa->rt = NULL;",
          "3072:     } else {",
          "3073:      continue;",
          "3074:     }",
          "3075:    }",
          "3077:    sp_rt = addrconf_dst_alloc(idev, &sp_ifa->addr, false);",
          "3080:    if (!IS_ERR(sp_rt)) {",
          "3081:     sp_ifa->rt = sp_rt;",
          "3082:     ip6_ins_rt(sp_rt);",
          "3083:    }",
          "3084:   }",
          "3085:   read_unlock_bh(&idev->lock);",
          "3086:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "net/ipv6/icmp.c||net/ipv6/icmp.c": [
          "File: net/ipv6/icmp.c -> net/ipv6/icmp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:   iif = skb->dev->ifindex;",
          "465:   dst = skb_dst(skb);",
          "466:   iif = l3mdev_master_ifindex(dst ? dst->dev : skb->dev);",
          "467:  }",
          "",
          "[Removed Lines]",
          "462:  if (__ipv6_addr_needs_scope_id(addr_type))",
          "464:  else {",
          "",
          "[Added Lines]",
          "462:  if (__ipv6_addr_needs_scope_id(addr_type)) {",
          "466:   if (iif == LOOPBACK_IFINDEX) {",
          "467:    dst = skb_dst(skb);",
          "468:    if (dst) {",
          "469:     struct rt6_info *rt;",
          "471:     rt = container_of(dst, struct rt6_info, dst);",
          "472:     iif = rt->rt6i_idev->dev->ifindex;",
          "473:    }",
          "474:   }",
          "475:  } else {",
          "",
          "---------------"
        ],
        "net/ipv6/route.c||net/ipv6/route.c": [
          "File: net/ipv6/route.c -> net/ipv6/route.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "958:  return __ip6_ins_rt(rt, &info, &mxc, NULL);",
          "959: }",
          "961: static struct rt6_info *ip6_rt_cache_alloc(struct rt6_info *ort,",
          "962:         const struct in6_addr *daddr,",
          "963:         const struct in6_addr *saddr)",
          "964: {",
          "965:  struct rt6_info *rt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "962: static struct net_device *ip6_rt_get_dev_rcu(struct rt6_info *rt)",
          "963: {",
          "964:  struct net_device *dev = rt->dst.dev;",
          "966:  if (rt->rt6i_flags & RTF_LOCAL) {",
          "971:   if (netif_is_l3_slave(dev) &&",
          "972:       !rt6_need_strict(&rt->rt6i_dst.addr))",
          "973:    dev = l3mdev_master_dev_rcu(dev);",
          "974:   else if (!netif_is_l3_master(dev))",
          "975:    dev = dev_net(dev)->loopback_dev;",
          "979:  }",
          "981:  return dev;",
          "982: }",
          "988:  struct net_device *dev;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "971:  if (ort->rt6i_flags & (RTF_CACHE | RTF_PCPU))",
          "972:   ort = (struct rt6_info *)ort->dst.from;",
          "976:  if (!rt)",
          "977:   return NULL;",
          "",
          "[Removed Lines]",
          "974:  rt = __ip6_dst_alloc(dev_net(ort->dst.dev), ort->dst.dev, 0);",
          "",
          "[Added Lines]",
          "998:  rcu_read_lock();",
          "999:  dev = ip6_rt_get_dev_rcu(ort);",
          "1000:  rt = __ip6_dst_alloc(dev_net(dev), dev, 0);",
          "1001:  rcu_read_unlock();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1001: static struct rt6_info *ip6_rt_pcpu_alloc(struct rt6_info *rt)",
          "1002: {",
          "1003:  struct rt6_info *pcpu_rt;",
          "1008:  if (!pcpu_rt)",
          "1009:   return NULL;",
          "1010:  ip6_rt_copy_init(pcpu_rt, rt);",
          "",
          "[Removed Lines]",
          "1005:  pcpu_rt = __ip6_dst_alloc(dev_net(rt->dst.dev),",
          "1006:       rt->dst.dev, rt->dst.flags);",
          "",
          "[Added Lines]",
          "1029:  struct net_device *dev;",
          "1032:  rcu_read_lock();",
          "1033:  dev = ip6_rt_get_dev_rcu(rt);",
          "1034:  pcpu_rt = __ip6_dst_alloc(dev_net(dev), dev, rt->dst.flags);",
          "1035:  rcu_read_unlock();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2688: {",
          "2689:  u32 tb_id;",
          "2690:  struct net *net = dev_net(idev->dev);",
          "2692:  struct rt6_info *rt;",
          "2700:  rt = ip6_dst_alloc(net, dev, DST_NOCOUNT);",
          "2701:  if (!rt)",
          "2702:   return ERR_PTR(-ENOMEM);",
          "",
          "[Removed Lines]",
          "2691:  struct net_device *dev = net->loopback_dev;",
          "2697:  if (!rt6_need_strict(addr))",
          "2698:   dev = l3mdev_master_dev_rcu(idev->dev) ? : dev;",
          "",
          "[Added Lines]",
          "2719:  struct net_device *dev = idev->dev;",
          "",
          "---------------"
        ]
      }
    }
  ]
}