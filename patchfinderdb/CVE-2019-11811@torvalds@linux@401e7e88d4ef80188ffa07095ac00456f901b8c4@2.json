{
  "cve_id": "CVE-2019-11811",
  "cve_desc": "An issue was discovered in the Linux kernel before 5.0.4. There is a use-after-free upon attempted read access to /proc/ioports after the ipmi_si module is removed, related to drivers/char/ipmi/ipmi_si_intf.c, drivers/char/ipmi/ipmi_si_mem_io.c, and drivers/char/ipmi/ipmi_si_port_io.c.",
  "repo": "torvalds/linux",
  "patch_hash": "401e7e88d4ef80188ffa07095ac00456f901b8c4",
  "patch_info": {
    "commit_hash": "401e7e88d4ef80188ffa07095ac00456f901b8c4",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/401e7e88d4ef80188ffa07095ac00456f901b8c4",
    "files": [
      "drivers/char/ipmi/ipmi_si_intf.c",
      "drivers/char/ipmi/ipmi_si_mem_io.c",
      "drivers/char/ipmi/ipmi_si_port_io.c"
    ],
    "message": "ipmi_si: fix use-after-free of resource->name\n\nWhen we excute the following commands, we got oops\nrmmod ipmi_si\ncat /proc/ioports\n\n[ 1623.482380] Unable to handle kernel paging request at virtual address ffff00000901d478\n[ 1623.482382] Mem abort info:\n[ 1623.482383]   ESR = 0x96000007\n[ 1623.482385]   Exception class = DABT (current EL), IL = 32 bits\n[ 1623.482386]   SET = 0, FnV = 0\n[ 1623.482387]   EA = 0, S1PTW = 0\n[ 1623.482388] Data abort info:\n[ 1623.482389]   ISV = 0, ISS = 0x00000007\n[ 1623.482390]   CM = 0, WnR = 0\n[ 1623.482393] swapper pgtable: 4k pages, 48-bit VAs, pgdp = 00000000d7d94a66\n[ 1623.482395] [ffff00000901d478] pgd=000000dffbfff003, pud=000000dffbffe003, pmd=0000003f5d06e003, pte=0000000000000000\n[ 1623.482399] Internal error: Oops: 96000007 [#1] SMP\n[ 1623.487407] Modules linked in: ipmi_si(E) nls_utf8 isofs rpcrdma ib_iser ib_srpt target_core_mod ib_srp scsi_transport_srp ib_ipoib rdma_ucm ib_umad rdma_cm ib_cm dm_mirror dm_region_hash dm_log iw_cm dm_mod aes_ce_blk crypto_simd cryptd aes_ce_cipher ses ghash_ce sha2_ce enclosure sha256_arm64 sg sha1_ce hisi_sas_v2_hw hibmc_drm sbsa_gwdt hisi_sas_main ip_tables mlx5_ib ib_uverbs marvell ib_core mlx5_core ixgbe mdio hns_dsaf ipmi_devintf hns_enet_drv ipmi_msghandler hns_mdio [last unloaded: ipmi_si]\n[ 1623.532410] CPU: 30 PID: 11438 Comm: cat Kdump: loaded Tainted: G            E     5.0.0-rc3+ #168\n[ 1623.541498] Hardware name: Huawei TaiShan 2280 /BC11SPCD, BIOS 1.37 11/21/2017\n[ 1623.548822] pstate: a0000005 (NzCv daif -PAN -UAO)\n[ 1623.553684] pc : string+0x28/0x98\n[ 1623.557040] lr : vsnprintf+0x368/0x5e8\n[ 1623.560837] sp : ffff000013213a80\n[ 1623.564191] x29: ffff000013213a80 x28: ffff00001138abb5\n[ 1623.569577] x27: ffff000013213c18 x26: ffff805f67d06049\n[ 1623.574963] x25: 0000000000000000 x24: ffff00001138abb5\n[ 1623.580349] x23: 0000000000000fb7 x22: ffff0000117ed000\n[ 1623.585734] x21: ffff000011188fd8 x20: ffff805f67d07000\n[ 1623.591119] x19: ffff805f67d06061 x18: ffffffffffffffff\n[ 1623.596505] x17: 0000000000000200 x16: 0000000000000000\n[ 1623.601890] x15: ffff0000117ed748 x14: ffff805f67d07000\n[ 1623.607276] x13: ffff805f67d0605e x12: 0000000000000000\n[ 1623.612661] x11: 0000000000000000 x10: 0000000000000000\n[ 1623.618046] x9 : 0000000000000000 x8 : 000000000000000f\n[ 1623.623432] x7 : ffff805f67d06061 x6 : fffffffffffffffe\n[ 1623.628817] x5 : 0000000000000012 x4 : ffff00000901d478\n[ 1623.634203] x3 : ffff0a00ffffff04 x2 : ffff805f67d07000\n[ 1623.639588] x1 : ffff805f67d07000 x0 : ffffffffffffffff\n[ 1623.644974] Process cat (pid: 11438, stack limit = 0x000000008d4cbc10)\n[ 1623.651592] Call trace:\n[ 1623.654068]  string+0x28/0x98\n[ 1623.657071]  vsnprintf+0x368/0x5e8\n[ 1623.660517]  seq_vprintf+0x70/0x98\n[ 1623.668009]  seq_printf+0x7c/0xa0\n[ 1623.675530]  r_show+0xc8/0xf8\n[ 1623.682558]  seq_read+0x330/0x440\n[ 1623.689877]  proc_reg_read+0x78/0xd0\n[ 1623.697346]  __vfs_read+0x60/0x1a0\n[ 1623.704564]  vfs_read+0x94/0x150\n[ 1623.711339]  ksys_read+0x6c/0xd8\n[ 1623.717939]  __arm64_sys_read+0x24/0x30\n[ 1623.725077]  el0_svc_common+0x120/0x148\n[ 1623.732035]  el0_svc_handler+0x30/0x40\n[ 1623.738757]  el0_svc+0x8/0xc\n[ 1623.744520] Code: d1000406 aa0103e2 54000149 b4000080 (39400085)\n[ 1623.753441] ---[ end trace f91b6a4937de9835 ]---\n[ 1623.760871] Kernel panic - not syncing: Fatal exception\n[ 1623.768935] SMP: stopping secondary CPUs\n[ 1623.775718] Kernel Offset: disabled\n[ 1623.781998] CPU features: 0x002,21006008\n[ 1623.788777] Memory Limit: none\n[ 1623.798329] Starting crashdump kernel...\n[ 1623.805202] Bye!\n\nIf io_setup is called successful in try_smi_init() but try_smi_init()\ngoes out_err before calling ipmi_register_smi(), so ipmi_unregister_smi()\nwill not be called while removing module. It leads to the resource that\nallocated in io_setup() can not be freed, but the name(DEVICE_NAME) of\nresource is freed while removing the module. It causes use-after-free\nwhen cat /proc/ioports.\n\nFix this by calling io_cleanup() while try_smi_init() goes to out_err.\nand don't call io_cleanup() until io_setup() returns successful to avoid\nwarning prints.\n\nFixes: 93c303d2045b (\"ipmi_si: Clean up shutdown a bit\")\nCc: stable@vger.kernel.org\nReported-by: NuoHan Qiao <qiaonuohan@huawei.com>\nSuggested-by: Corey Minyard <cminyard@mvista.com>\nSigned-off-by: Yang Yingliang <yangyingliang@huawei.com>\nSigned-off-by: Corey Minyard <cminyard@mvista.com>",
    "before_after_code_files": [
      "drivers/char/ipmi/ipmi_si_intf.c||drivers/char/ipmi/ipmi_si_intf.c",
      "drivers/char/ipmi/ipmi_si_mem_io.c||drivers/char/ipmi/ipmi_si_mem_io.c",
      "drivers/char/ipmi/ipmi_si_port_io.c||drivers/char/ipmi/ipmi_si_port_io.c"
    ]
  },
  "patch_diff": {
    "drivers/char/ipmi/ipmi_si_intf.c||drivers/char/ipmi/ipmi_si_intf.c": [
      "File: drivers/char/ipmi/ipmi_si_intf.c -> drivers/char/ipmi/ipmi_si_intf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2085:  WARN_ON(new_smi->io.dev->init_name != NULL);",
      "2087:  out_err:",
      "2088:  kfree(init_name);",
      "2089:  return rv;",
      "2090: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2088:  if (rv && new_smi->io.io_cleanup) {",
      "2089:   new_smi->io.io_cleanup(&new_smi->io);",
      "2090:   new_smi->io.io_cleanup = NULL;",
      "2091:  }",
      "",
      "---------------"
    ],
    "drivers/char/ipmi/ipmi_si_mem_io.c||drivers/char/ipmi/ipmi_si_mem_io.c": [
      "File: drivers/char/ipmi/ipmi_si_mem_io.c -> drivers/char/ipmi/ipmi_si_mem_io.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "81:  if (!addr)",
      "82:   return -ENODEV;",
      "",
      "[Removed Lines]",
      "84:  io->io_cleanup = mem_cleanup;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "141:   mem_region_cleanup(io, io->io_size);",
      "142:   return -EIO;",
      "143:  }",
      "144:  return 0;",
      "145: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "143:  io->io_cleanup = mem_cleanup;",
      "",
      "---------------"
    ],
    "drivers/char/ipmi/ipmi_si_port_io.c||drivers/char/ipmi/ipmi_si_port_io.c": [
      "File: drivers/char/ipmi/ipmi_si_port_io.c -> drivers/char/ipmi/ipmi_si_port_io.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "68:  if (!addr)",
      "69:   return -ENODEV;",
      "",
      "[Removed Lines]",
      "71:  io->io_cleanup = port_cleanup;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "109:    return -EIO;",
      "110:   }",
      "111:  }",
      "112:  return 0;",
      "113: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "111:  io->io_cleanup = port_cleanup;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "860b454c2c0cbda6892954f5cdbbb48931b3c8db",
      "candidate_info": {
        "commit_hash": "860b454c2c0cbda6892954f5cdbbb48931b3c8db",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/860b454c2c0cbda6892954f5cdbbb48931b3c8db",
        "files": [
          "sound/soc/samsung/i2s.c"
        ],
        "message": "ASoC: samsung: Prevent clk_get_rate() calls in atomic context\n\nThis patch moves clk_get_rate() call from trigger() to hw_params()\ncallback to avoid calling sleeping clk API from atomic context\nand prevent deadlock as indicated below.\n\nBefore this change clk_get_rate() was being called with same\nspinlock held as the one passed to the clk API when registering\nclocks exposed by the I2S driver.\n\n[   82.109780] BUG: sleeping function called from invalid context at kernel/locking/mutex.c:908\n[   82.117009] in_atomic(): 1, irqs_disabled(): 128, pid: 1554, name: speaker-test\n[   82.124235] 3 locks held by speaker-test/1554:\n[   82.128653]  #0: cc8c5328 (snd_pcm_link_rwlock){...-}, at: snd_pcm_stream_lock_irq+0x20/0x38\n[   82.137058]  #1: ec9eda17 (&(&substream->self_group.lock)->rlock){..-.}, at: snd_pcm_ioctl+0x900/0x1268\n[   82.146417]  #2: 6ac279bf (&(&pri_dai->spinlock)->rlock){..-.}, at: i2s_trigger+0x64/0x6d4\n[   82.154650] irq event stamp: 8144\n[   82.157949] hardirqs last  enabled at (8143): [<c0a0f574>] _raw_read_unlock_irq+0x24/0x5c\n[   82.166089] hardirqs last disabled at (8144): [<c0a0f6a8>] _raw_read_lock_irq+0x18/0x58\n[   82.174063] softirqs last  enabled at (8004): [<c01024e4>] __do_softirq+0x3a4/0x66c\n[   82.181688] softirqs last disabled at (7997): [<c012d730>] irq_exit+0x140/0x168\n[   82.188964] Preemption disabled at:\n[   82.188967] [<00000000>]   (null)\n[   82.195728] CPU: 6 PID: 1554 Comm: speaker-test Not tainted 5.0.0-rc5-00192-ga6e6caca8f03 #191\n[   82.204302] Hardware name: SAMSUNG EXYNOS (Flattened Device Tree)\n[   82.210376] [<c0111a54>] (unwind_backtrace) from [<c010d8f4>] (show_stack+0x10/0x14)\n[   82.218084] [<c010d8f4>] (show_stack) from [<c09ef004>] (dump_stack+0x90/0xc8)\n[   82.225278] [<c09ef004>] (dump_stack) from [<c0152980>] (___might_sleep+0x22c/0x2c8)\n[   82.232990] [<c0152980>] (___might_sleep) from [<c0a0a2e4>] (__mutex_lock+0x28/0xa3c)\n[   82.240788] [<c0a0a2e4>] (__mutex_lock) from [<c0a0ad80>] (mutex_lock_nested+0x1c/0x24)\n[   82.248763] [<c0a0ad80>] (mutex_lock_nested) from [<c04923dc>] (clk_prepare_lock+0x78/0xec)\n[   82.257079] [<c04923dc>] (clk_prepare_lock) from [<c049538c>] (clk_core_get_rate+0xc/0x5c)\n[   82.265309] [<c049538c>] (clk_core_get_rate) from [<c0766b18>] (i2s_trigger+0x490/0x6d4)\n[   82.273369] [<c0766b18>] (i2s_trigger) from [<c074fec4>] (soc_pcm_trigger+0x100/0x140)\n[   82.281254] [<c074fec4>] (soc_pcm_trigger) from [<c07378a0>] (snd_pcm_do_start+0x2c/0x30)\n[   82.289400] [<c07378a0>] (snd_pcm_do_start) from [<c07376cc>] (snd_pcm_action_single+0x38/0x78)\n[   82.298065] [<c07376cc>] (snd_pcm_action_single) from [<c073a450>] (snd_pcm_ioctl+0x910/0x1268)\n[   82.306734] [<c073a450>] (snd_pcm_ioctl) from [<c0292344>] (do_vfs_ioctl+0x90/0x9ec)\n[   82.314443] [<c0292344>] (do_vfs_ioctl) from [<c0292cd4>] (ksys_ioctl+0x34/0x60)\n[   82.321808] [<c0292cd4>] (ksys_ioctl) from [<c0101000>] (ret_fast_syscall+0x0/0x28)\n[   82.329431] Exception stack(0xeb875fa8 to 0xeb875ff0)\n[   82.334459] 5fa0:                   00033c18 b6e31000 00000004 00004142 00033d80 00033d80\n[   82.342605] 5fc0: 00033c18 b6e31000 00008000 00000036 00008000 00000000 beea38a8 00008000\n[   82.350748] 5fe0: b6e3142c beea384c b6da9a30 b6c9212c\n[   82.355789]\n[   82.357245] ======================================================\n[   82.363397] WARNING: possible circular locking dependency detected\n[   82.369551] 5.0.0-rc5-00192-ga6e6caca8f03 #191 Tainted: G        W\n[   82.376395] ------------------------------------------------------\n[   82.382548] speaker-test/1554 is trying to acquire lock:\n[   82.387834] 6d2007f4 (prepare_lock){+.+.}, at: clk_prepare_lock+0x78/0xec\n[   82.394593]\n[   82.394593] but task is already holding lock:\n[   82.400398] 6ac279bf (&(&pri_dai->spinlock)->rlock){..-.}, at: i2s_trigger+0x64/0x6d4\n[   82.408197]\n[   82.408197] which lock already depends on the new lock.\n[   82.416343]\n[   82.416343] the existing dependency chain (in reverse order) is:\n[   82.423795]\n[   82.423795] -> #1 (&(&pri_dai->spinlock)->rlock){..-.}:\n[   82.430472]        clk_mux_set_parent+0x34/0xb8\n[   82.434975]        clk_core_set_parent_nolock+0x1c4/0x52c\n[   82.440347]        clk_set_parent+0x38/0x6c\n[   82.444509]        of_clk_set_defaults+0xc8/0x308\n[   82.449186]        of_clk_add_provider+0x84/0xd0\n[   82.453779]        samsung_i2s_probe+0x408/0x5f8\n[   82.458376]        platform_drv_probe+0x48/0x98\n[   82.462879]        really_probe+0x224/0x3f4\n[   82.467037]        driver_probe_device+0x70/0x1c4\n[   82.471716]        bus_for_each_drv+0x44/0x8c\n[   82.476049]        __device_attach+0xa0/0x138\n[   82.480382]        bus_probe_device+0x88/0x90\n[   82.484715]        deferred_probe_work_func+0x6c/0xbc\n[   82.489741]        process_one_work+0x200/0x740\n[   82.494246]        worker_thread+0x2c/0x4c8\n[   82.498408]        kthread+0x128/0x164\n[   82.502131]        ret_from_fork+0x14/0x20\n[   82.506204]          (null)\n[   82.508976]\n[   82.508976] -> #0 (prepare_lock){+.+.}:\n[   82.514264]        __mutex_lock+0x60/0xa3c\n[   82.518336]        mutex_lock_nested+0x1c/0x24\n[   82.522756]        clk_prepare_lock+0x78/0xec\n[   82.527088]        clk_core_get_rate+0xc/0x5c\n[   82.531421]        i2s_trigger+0x490/0x6d4\n[   82.535494]        soc_pcm_trigger+0x100/0x140\n[   82.539913]        snd_pcm_do_start+0x2c/0x30\n[   82.544246]        snd_pcm_action_single+0x38/0x78\n[   82.549012]        snd_pcm_ioctl+0x910/0x1268\n[   82.553345]        do_vfs_ioctl+0x90/0x9ec\n[   82.557417]        ksys_ioctl+0x34/0x60\n[   82.561229]        ret_fast_syscall+0x0/0x28\n[   82.565477]        0xbeea384c\n[   82.568421]\n[   82.568421] other info that might help us debug this:\n[   82.568421]\n[   82.576394]  Possible unsafe locking scenario:\n[   82.576394]\n[   82.582285]        CPU0                    CPU1\n[   82.586792]        ----                    ----\n[   82.591297]   lock(&(&pri_dai->spinlock)->rlock);\n[   82.595977]                                lock(prepare_lock);\n[   82.601782]                                lock(&(&pri_dai->spinlock)->rlock);\n[   82.608975]   lock(prepare_lock);\n[   82.612268]\n[   82.612268]  *** DEADLOCK ***\n\nFixes: 647d04f8e07a (\"ASoC: samsung: i2s: Ensure the RCLK rate is properly determined\")\nReported-by: Krzysztof Koz\u0142owski <krzk@kernel.org>\nSigned-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>\nSigned-off-by: Mark Brown <broonie@kernel.org>",
        "before_after_code_files": [
          "sound/soc/samsung/i2s.c||sound/soc/samsung/i2s.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "sound/soc/samsung/i2s.c||sound/soc/samsung/i2s.c": [
          "File: sound/soc/samsung/i2s.c -> sound/soc/samsung/i2s.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: {",
          "701:  struct i2s_dai *i2s = to_info(dai);",
          "702:  u32 mod, mask = 0, val = 0;",
          "703:  unsigned long flags;",
          "705:  WARN_ON(!pm_runtime_active(dai->dev));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:  struct clk *rclksrc;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "783:  i2s->frmclk = params_rate(params);",
          "785:  return 0;",
          "786: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "786:  rclksrc = i2s->clk_table[CLK_I2S_RCLK_SRC];",
          "787:  if (rclksrc && !IS_ERR(rclksrc))",
          "788:   i2s->rclk_srcrate = clk_get_rate(rclksrc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "886:   return 0;",
          "888:  if (!(i2s->quirks & QUIRK_NO_MUXPSR)) {",
          "894:   psr = i2s->rclk_srcrate / i2s->frmclk / rfs;",
          "895:   writel(((psr - 1) << 8) | PSR_PSREN, i2s->addr + I2SPSR);",
          "896:   dev_dbg(&i2s->pdev->dev,",
          "",
          "[Removed Lines]",
          "889:   struct clk *rclksrc = i2s->clk_table[CLK_I2S_RCLK_SRC];",
          "891:   if (rclksrc && !IS_ERR(rclksrc))",
          "892:    i2s->rclk_srcrate = clk_get_rate(rclksrc);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}