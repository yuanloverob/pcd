{
  "cve_id": "CVE-2022-25297",
  "cve_desc": "This affects the package drogonframework/drogon before 1.7.5. The unsafe handling of file names during upload using HttpFile::save() method may enable attackers to write files to arbitrary locations outside the designated target folder.",
  "repo": "drogonframework/drogon",
  "patch_hash": "3c785326c63a34aa1799a639ae185bc9453cb447",
  "patch_info": {
    "commit_hash": "3c785326c63a34aa1799a639ae185bc9453cb447",
    "repo": "drogonframework/drogon",
    "commit_url": "https://github.com/drogonframework/drogon/commit/3c785326c63a34aa1799a639ae185bc9453cb447",
    "files": [
      "lib/src/HttpFileImpl.cc",
      "lib/tests/CMakeLists.txt",
      "lib/tests/unittests/HttpFileTest.cc"
    ],
    "message": "Prevent malformed upload path causing arbitrary write (#1174)",
    "before_after_code_files": [
      "lib/src/HttpFileImpl.cc||lib/src/HttpFileImpl.cc",
      "lib/tests/unittests/HttpFileTest.cc||lib/tests/unittests/HttpFileTest.cc"
    ]
  },
  "patch_diff": {
    "lib/src/HttpFileImpl.cc||lib/src/HttpFileImpl.cc": [
      "File: lib/src/HttpFileImpl.cc -> lib/src/HttpFileImpl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "18: #include <drogon/MultiPart.h>",
      "19: #include <fstream>",
      "20: #include <iostream>",
      "22: using namespace drogon;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "21: #include <algorithm>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "31:     assert(!path.empty());",
      "32:     if (fileName_.empty())",
      "33:         return -1;",
      "38:     {",
      "42:     }",
      "45:     {",
      "47:         drogon::error_code err;",
      "49:         if (err)",
      "50:         {",
      "51:             LOG_SYSERR;",
      "52:             return -1;",
      "53:         }",
      "54:     }",
      "56: }",
      "57: int HttpFileImpl::saveAs(const std::string &fileName) const",
      "58: {",
      "",
      "[Removed Lines]",
      "34:     filesystem::path fsPath(utils::toNativePath(path));",
      "35:     if (!fsPath.is_absolute() &&",
      "36:         (!fsPath.has_parent_path() ||",
      "37:          (fsPath.begin()->string() != \".\" && fsPath.begin()->string() != \"..\")))",
      "39:         filesystem::path fsUploadPath(utils::toNativePath(",
      "40:             HttpAppFrameworkImpl::instance().getUploadPath()));",
      "41:         fsPath = fsUploadPath / fsPath;",
      "43:     filesystem::path fsFileName(utils::toNativePath(fileName_));",
      "44:     if (!filesystem::exists(fsPath))",
      "46:         LOG_TRACE << \"create path:\" << fsPath;",
      "48:         filesystem::create_directories(fsPath, err);",
      "55:     return saveTo(fsPath / fsFileName);",
      "",
      "[Added Lines]",
      "35:     filesystem::path fsUploadDir(utils::toNativePath(path));",
      "37:     if (!fsUploadDir.is_absolute() && (!fsUploadDir.has_parent_path() ||",
      "38:                                        (fsUploadDir.begin()->string() != \".\" &&",
      "39:                                         fsUploadDir.begin()->string() != \"..\")))",
      "41:         fsUploadDir = utils::toNativePath(",
      "42:                           HttpAppFrameworkImpl::instance().getUploadPath()) /",
      "43:                       fsUploadDir;",
      "46:     fsUploadDir = filesystem::weakly_canonical(fsUploadDir);",
      "48:     if (!filesystem::exists(fsUploadDir))",
      "50:         LOG_TRACE << \"create path:\" << fsUploadDir;",
      "52:         filesystem::create_directories(fsUploadDir, err);",
      "60:     filesystem::path fsSaveToPath(filesystem::weakly_canonical(",
      "61:         fsUploadDir / utils::toNativePath(fileName_)));",
      "63:     if (!std::equal(fsUploadDir.begin(),",
      "64:                     fsUploadDir.end(),",
      "65:                     fsSaveToPath.begin()))",
      "66:     {",
      "67:         LOG_ERROR",
      "68:             << \"Attempt writing outside of upload directory detected. Path: \"",
      "69:             << fileName_;",
      "70:         return -1;",
      "71:     }",
      "73:     return saveTo(fsSaveToPath);",
      "",
      "---------------"
    ],
    "lib/tests/unittests/HttpFileTest.cc||lib/tests/unittests/HttpFileTest.cc": [
      "File: lib/tests/unittests/HttpFileTest.cc -> lib/tests/unittests/HttpFileTest.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #include \"../../lib/src/HttpFileImpl.h\"",
      "2: #include <drogon/drogon_test.h>",
      "3: #include <filesystem>",
      "5: using namespace drogon;",
      "6: using namespace std;",
      "8: DROGON_TEST(HttpFile)",
      "9: {",
      "10:     SUBSECTION(Save)",
      "11:     {",
      "12:         HttpFileImpl file;",
      "13:         file.setFileName(\"test_file_name\");",
      "14:         file.setFile(\"test\", 4);",
      "15:         auto out = file.save(\"./test_uploads_dir\");",
      "17:         CHECK(out == 0);",
      "18:         CHECK(filesystem::exists(\"./test_uploads_dir/test_file_name\"));",
      "20:         filesystem::remove_all(\"./test_uploads_dir\");",
      "21:     }",
      "23:     SUBSECTION(SavePathRelativeTraversal)",
      "24:     {",
      "25:         auto uploadPath = filesystem::current_path() / \"test_uploads_dir\";",
      "27:         HttpFileImpl file;",
      "28:         file.setFileName(\"../test_malicious_file_name\");",
      "29:         file.setFile(\"test\", 4);",
      "30:         auto out = file.save(uploadPath.string());",
      "32:         CHECK(out == -1);",
      "33:         CHECK(!filesystem::exists(uploadPath / \"../test_malicious_file_name\"));",
      "35:         filesystem::remove_all(uploadPath);",
      "36:         filesystem::remove(uploadPath / \"../test_malicious_file_name\");",
      "37:     }",
      "39:     SUBSECTION(SavePathAbsoluteTraversal)",
      "40:     {",
      "41:         HttpFileImpl file;",
      "42:         file.setFileName(\"/tmp/test_malicious_file_name\");",
      "43:         file.setFile(\"test\", 4);",
      "44:         auto out = file.save(\"./test_uploads_dir\");",
      "46:         CHECK(out == -1);",
      "47:         CHECK(!filesystem::exists(\"/tmp/test_malicious_file_name\"));",
      "49:         filesystem::remove_all(\"test_uploads_dir\");",
      "50:         filesystem::remove_all(\"/tmp/test_malicious_file_name\");",
      "51:     }",
      "52: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3b0fd3d676040fc8715d710bc85feb659b948c45",
      "candidate_info": {
        "commit_hash": "3b0fd3d676040fc8715d710bc85feb659b948c45",
        "repo": "drogonframework/drogon",
        "commit_url": "https://github.com/drogonframework/drogon/commit/3b0fd3d676040fc8715d710bc85feb659b948c45",
        "files": [
          "lib/src/HttpFileImpl.cc",
          "lib/tests/unittests/HttpFileTest.cc"
        ],
        "message": "Fix HttpFile unittest error on Windows (#1191)",
        "before_after_code_files": [
          "lib/src/HttpFileImpl.cc||lib/src/HttpFileImpl.cc",
          "lib/tests/unittests/HttpFileTest.cc||lib/tests/unittests/HttpFileTest.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/src/HttpFileImpl.cc||lib/src/HttpFileImpl.cc",
            "lib/tests/unittests/HttpFileTest.cc||lib/tests/unittests/HttpFileTest.cc"
          ],
          "candidate": [
            "lib/src/HttpFileImpl.cc||lib/src/HttpFileImpl.cc",
            "lib/tests/unittests/HttpFileTest.cc||lib/tests/unittests/HttpFileTest.cc"
          ]
        }
      },
      "candidate_diff": {
        "lib/src/HttpFileImpl.cc||lib/src/HttpFileImpl.cc": [
          "File: lib/src/HttpFileImpl.cc -> lib/src/HttpFileImpl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:         return -1;",
          "35:     filesystem::path fsUploadDir(utils::toNativePath(path));",
          "40:     {",
          "41:         fsUploadDir = utils::toNativePath(",
          "42:                           HttpAppFrameworkImpl::instance().getUploadPath()) /",
          "43:                       fsUploadDir;",
          "44:     }",
          "46:     fsUploadDir = filesystem::weakly_canonical(fsUploadDir);",
          "",
          "[Removed Lines]",
          "37:     if (!fsUploadDir.is_absolute() && (!fsUploadDir.has_parent_path() ||",
          "38:                                        (fsUploadDir.begin()->string() != \".\" &&",
          "39:                                         fsUploadDir.begin()->string() != \"..\")))",
          "",
          "[Added Lines]",
          "37:     if (fsUploadDir.is_absolute())",
          "38:     {  // do nothing",
          "39:     }",
          "40:     else if ((!fsUploadDir.has_parent_path() ||",
          "41:               (fsUploadDir.begin()->string() != \".\" &&",
          "42:                fsUploadDir.begin()->string() != \"..\")))",
          "48:     else",
          "49:     {",
          "50:         fsUploadDir = filesystem::current_path() / fsUploadDir;",
          "51:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:     filesystem::path fsSaveToPath(filesystem::weakly_canonical(",
          "61:         fsUploadDir / utils::toNativePath(fileName_)));",
          "63:     if (!std::equal(fsUploadDir.begin(),",
          "64:                     fsUploadDir.end(),",
          "65:                     fsSaveToPath.begin()))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69:     LOG_TRACE << \"save to path:\" << fsSaveToPath;",
          "",
          "---------------"
        ],
        "lib/tests/unittests/HttpFileTest.cc||lib/tests/unittests/HttpFileTest.cc": [
          "File: lib/tests/unittests/HttpFileTest.cc -> lib/tests/unittests/HttpFileTest.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: DROGON_TEST(HttpFile)",
          "9: {",
          "11:     {",
          "12:         HttpFileImpl file;",
          "13:         file.setFileName(\"test_file_name\");",
          "",
          "[Removed Lines]",
          "10:     SUBSECTION(Save)",
          "",
          "[Added Lines]",
          "10:     SUBSECTION(SavePathUsingDefaultConfigPath)",
          "11:     {",
          "12:         HttpFileImpl file;",
          "13:         file.setFileName(\"test_file_name\");",
          "14:         file.setFile(\"test\", 4);",
          "15:         auto out = file.save();",
          "17:         CHECK(out == 0);",
          "18:         CHECK(filesystem::exists(\"./uploads/test_file_name\"));",
          "20:         filesystem::remove_all(\"./uploads/test_file_name\");",
          "21:     }",
          "23:     SUBSECTION(SavePathWithSpecificRelativePath)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "20:         filesystem::remove_all(\"./test_uploads_dir\");",
          "21:     }",
          "24:     {",
          "25:         auto uploadPath = filesystem::current_path() / \"test_uploads_dir\";",
          "",
          "[Removed Lines]",
          "23:     SUBSECTION(SavePathRelativeTraversal)",
          "",
          "[Added Lines]",
          "36:     SUBSECTION(SavePathWithSpecificAbsolutePath)",
          "37:     {",
          "38:         auto uploadPath = filesystem::current_path() / \"test_uploads_dir\";",
          "40:         HttpFileImpl file;",
          "41:         file.setFileName(\"test_file_name\");",
          "42:         file.setFile(\"test\", 4);",
          "43:         auto out = file.save(uploadPath.string());",
          "45:         CHECK(out == 0);",
          "46:         CHECK(filesystem::exists(uploadPath / \"test_file_name\"));",
          "48:         filesystem::remove_all(uploadPath.string());",
          "49:     }",
          "51:     SUBSECTION(FileNameWithRelativePath)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36:         filesystem::remove(uploadPath / \"../test_malicious_file_name\");",
          "37:     }",
          "40:     {",
          "41:         HttpFileImpl file;",
          "43:         file.setFile(\"test\", 4);",
          "44:         auto out = file.save(\"./test_uploads_dir\");",
          "46:         CHECK(out == -1);",
          "49:         filesystem::remove_all(\"test_uploads_dir\");",
          "51:     }",
          "52: }",
          "",
          "[Removed Lines]",
          "39:     SUBSECTION(SavePathAbsoluteTraversal)",
          "42:         file.setFileName(\"/tmp/test_malicious_file_name\");",
          "47:         CHECK(!filesystem::exists(\"/tmp/test_malicious_file_name\"));",
          "50:         filesystem::remove_all(\"/tmp/test_malicious_file_name\");",
          "",
          "[Added Lines]",
          "67:     SUBSECTION(FileNameWithAbsolutePath)",
          "69:         auto fileName = filesystem::current_path() / \"test_malicious_file_name\";",
          "72:         file.setFileName(fileName.string());",
          "77:         CHECK(!filesystem::exists(fileName.string()));",
          "80:         filesystem::remove(fileName.string());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f522d2d70efeb5e1e7e027322e4ca1379322de6b",
      "candidate_info": {
        "commit_hash": "f522d2d70efeb5e1e7e027322e4ca1379322de6b",
        "repo": "drogonframework/drogon",
        "commit_url": "https://github.com/drogonframework/drogon/commit/f522d2d70efeb5e1e7e027322e4ca1379322de6b",
        "files": [
          "lib/src/HttpFileImpl.cc"
        ],
        "message": "Create path if it doesn't exist (#1095)",
        "before_after_code_files": [
          "lib/src/HttpFileImpl.cc||lisrc/HttpFileImpl.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/src/HttpFileImpl.cc||lib/src/HttpFileImpl.cc"
          ],
          "candidate": [
            "lib/src/HttpFileImpl.cc||lisrc/HttpFileImpl.cc"
          ]
        }
      },
      "candidate_diff": {
        "lib/src/HttpFileImpl.cc||lisrc/HttpFileImpl.cc": [
          "File: lib/src/HttpFileImpl.cc -> lisrc/HttpFileImpl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:         fsPath = fsUploadPath / fsPath;",
          "42:     }",
          "43:     filesystem::path fsFileName(utils::toNativePath(fileName_));",
          "44:     return saveTo(fsPath / fsFileName);",
          "45: }",
          "46: int HttpFileImpl::saveAs(const std::string &fileName) const",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:             HttpAppFrameworkImpl::instance().getUploadPath()));",
          "56:         fsFileName = fsUploadPath / fsFileName;",
          "57:     }",
          "59:     {",
          "60:         drogon::error_code err;",
          "61:         filesystem::create_directories(fsFileName.parent_path(), err);",
          "62:         if (err)",
          "63:             return -1;",
          "64:     }",
          "65:     return saveTo(fsFileName);",
          "66: }",
          "",
          "[Removed Lines]",
          "58:     if (fsFileName.has_parent_path())",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "df516747922fc5b1ff3f611b688eb01a5103dd01",
      "candidate_info": {
        "commit_hash": "df516747922fc5b1ff3f611b688eb01a5103dd01",
        "repo": "drogonframework/drogon",
        "commit_url": "https://github.com/drogonframework/drogon/commit/df516747922fc5b1ff3f611b688eb01a5103dd01",
        "files": [
          "examples/simple_example/api_Attachment.cc",
          "examples/simple_example/api_Attachment.h",
          "examples/simple_example_test/main.cc",
          "lib/inc/drogon/HttpTypes.h",
          "lib/inc/drogon/MultiPart.h",
          "lib/src/HttpFileImpl.cc",
          "lib/src/HttpFileImpl.h",
          "lib/src/HttpUtils.cc",
          "lib/src/HttpUtils.h",
          "unittest/CMakeLists.txt",
          "unittest/FileTypeUnittest.cpp"
        ],
        "message": "Enhancements on files part. (#803)\n\nCo-authored-by: an-tao <antao2002@gmail.com>",
        "before_after_code_files": [
          "examples/simple_example/api_Attachment.cc||examples/simple_example/api_Attachment.cc",
          "examples/simple_example/api_Attachment.h||examples/simple_example/api_Attachment.h",
          "examples/simple_example_test/main.cc||examples/simple_example_test/main.cc",
          "lib/inc/drogon/HttpTypes.h||liinc/drogon/HttpTypes.h",
          "lib/inc/drogon/MultiPart.h||liinc/drogon/MultiPart.h",
          "lib/src/HttpFileImpl.cc||lisrc/HttpFileImpl.cc",
          "lib/src/HttpFileImpl.h||lisrc/HttpFileImpl.h",
          "lib/src/HttpUtils.cc||lisrc/HttpUtils.cc",
          "lib/src/HttpUtils.h||lisrc/HttpUtils.h",
          "unittest/FileTypeUnittest.cpp||unittest/FileTypeUnittest.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/src/HttpFileImpl.cc||lib/src/HttpFileImpl.cc"
          ],
          "candidate": [
            "lib/src/HttpFileImpl.cc||lisrc/HttpFileImpl.cc"
          ]
        }
      },
      "candidate_diff": {
        "examples/simple_example/api_Attachment.cc||examples/simple_example/api_Attachment.cc": [
          "File: examples/simple_example/api_Attachment.cc -> examples/simple_example/api_Attachment.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22:         for (auto const &file : files)",
          "23:         {",
          "24:             LOG_DEBUG << \"file:\" << file.getFileName()",
          "26:                       << \",md5=\" << file.getMd5() << \")\";",
          "27:             file.save();",
          "28:             file.save(\"123\");",
          "",
          "[Removed Lines]",
          "25:                       << \"(len=\" << file.fileLength()",
          "",
          "[Added Lines]",
          "25:                       << \"(extension=\" << file.getFileExtension()",
          "26:                       << \",type=\" << file.getFileType()",
          "27:                       << \",len=\" << file.fileLength()",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43:         return;",
          "44:     }",
          "45:     LOG_DEBUG << \"upload error!\";",
          "47:     Json::Value json;",
          "48:     json[\"result\"] = \"failed\";",
          "49:     auto resp = HttpResponse::newHttpJsonResponse(json);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49:     Json::Value json;",
          "50:     json[\"result\"] = \"failed\";",
          "51:     auto resp = HttpResponse::newHttpJsonResponse(json);",
          "52:     callback(resp);",
          "53: }",
          "55: void Attachment::uploadImage(",
          "56:     const HttpRequestPtr &req,",
          "57:     std::function<void(const HttpResponsePtr &)> &&callback)",
          "58: {",
          "59:     MultiPartParser fileUpload;",
          "62:     if (fileUpload.parse(req) == 0 && fileUpload.getFiles().size() == 1)",
          "63:     {",
          "65:         Json::Value json;",
          "68:         auto &file = fileUpload.getFiles()[0];",
          "72:         if (file.getFileType() == FT_IMAGE)",
          "73:         {",
          "74:             json[\"isImage\"] = true;",
          "75:         }",
          "77:         auto fileExtension = file.getFileExtension();",
          "78:         if (fileExtension == \"png\" || fileExtension == \"jpeg\" ||",
          "79:             fileExtension == \"jpg\" || fileExtension == \"ico\" /* || etc... */)",
          "80:         {",
          "81:             json[\"isImage\"] = true;",
          "82:         }",
          "83:         else",
          "84:         {",
          "85:             json[\"isImage\"] = false;",
          "86:         }",
          "88:         json[\"result\"] = \"ok\";",
          "89:         for (auto &param : fileUpload.getParameters())",
          "90:         {",
          "91:             json[param.first] = param.second;",
          "92:         }",
          "93:         auto resp = HttpResponse::newHttpJsonResponse(json);",
          "94:         callback(resp);",
          "95:         return;",
          "96:     }",
          "97:     LOG_DEBUG << \"upload image error!\";",
          "",
          "---------------"
        ],
        "examples/simple_example/api_Attachment.h||examples/simple_example/api_Attachment.h": [
          "File: examples/simple_example/api_Attachment.h -> examples/simple_example/api_Attachment.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     METHOD_ADD(Attachment::get, \"\", Get);  // Path is '/api/attachment'",
          "12:     METHOD_ADD(Attachment::upload, \"/upload\", Post);",
          "13:     METHOD_ADD(Attachment::download, \"/download\", Get);",
          "14:     METHOD_LIST_END",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:     METHOD_ADD(Attachment::uploadImage, \"/uploadImage\", Post);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17:              std::function<void(const HttpResponsePtr &)> &&callback);",
          "18:     void upload(const HttpRequestPtr &req,",
          "19:                 std::function<void(const HttpResponsePtr &)> &&callback);",
          "20:     void download(const HttpRequestPtr &req,",
          "21:                   std::function<void(const HttpResponsePtr &)> &&callback);",
          "22: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21:     void uploadImage(const HttpRequestPtr &req,",
          "22:                      std::function<void(const HttpResponsePtr &)> &&callback);",
          "",
          "---------------"
        ],
        "examples/simple_example_test/main.cc||examples/simple_example_test/main.cc": [
          "File: examples/simple_example_test/main.cc -> examples/simple_example_test/main.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1303:                 exit(1);",
          "1304:             }",
          "1305:         });",
          "1306:     req = HttpRequest::newHttpRequest();",
          "1307:     req->setMethod(drogon::Get);",
          "1308:     req->setPath(\"/api/v1/this_will_fail\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1309:     UploadFile image(\"./drogon.jpg\");",
          "1310:     req = HttpRequest::newFileUploadRequest({image});",
          "1311:     req->setPath(\"/api/attachment/uploadImage\");",
          "1312:     req->setParameter(\"P1\", \"upload\");",
          "1313:     req->setParameter(\"P2\", \"test\");",
          "1314:     client->sendRequest(",
          "1315:         req, [req, isHttps](ReqResult result, const HttpResponsePtr &resp) {",
          "1316:             if (result == ReqResult::Ok)",
          "1317:             {",
          "1318:                 auto json = resp->getJsonObject();",
          "1319:                 if (json && (*json)[\"isImage\"].asBool() &&",
          "1320:                     (*json)[\"P1\"] == \"upload\" && (*json)[\"P2\"] == \"test\")",
          "1321:                 {",
          "1322:                     outputGood(req, isHttps);",
          "1324:                 }",
          "1325:                 else",
          "1326:                 {",
          "1327:                     LOG_DEBUG << resp->getBody().length();",
          "1328:                     LOG_DEBUG << resp->getBody();",
          "1329:                     LOG_ERROR << \"Error!\";",
          "1330:                     exit(1);",
          "1331:                 }",
          "1332:             }",
          "1333:             else",
          "1334:             {",
          "1335:                 LOG_ERROR << \"Error!\";",
          "1336:                 exit(1);",
          "1337:             }",
          "1338:         });",
          "",
          "---------------"
        ],
        "lib/inc/drogon/HttpTypes.h||liinc/drogon/HttpTypes.h": [
          "File: lib/inc/drogon/HttpTypes.h -> liinc/drogon/HttpTypes.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:     CT_CUSTOM",
          "114: };",
          "116: enum HttpMethod",
          "117: {",
          "118:     Get = 0,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/inc/drogon/MultiPart.h||liinc/drogon/MultiPart.h": [
          "File: lib/inc/drogon/MultiPart.h -> liinc/drogon/MultiPart.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <drogon/exports.h>",
          "18: #include <drogon/HttpRequest.h>",
          "19: #include <map>",
          "20: #include <unordered_map>",
          "21: #include <string>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     const std::string &getFileName() const;",
          "40:     const std::string &getItemName() const;",
          "",
          "[Removed Lines]",
          "43:     void setFileName(const std::string &filename);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "71:     int saveAs(const std::string &filename) const;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/src/HttpFileImpl.cc||lisrc/HttpFileImpl.cc": [
          "File: lib/src/HttpFileImpl.cc -> lisrc/HttpFileImpl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "19: #include <iostream>",
          "21: using namespace drogon;",
          "23: int HttpFileImpl::save(const std::string &path) const",
          "24: {",
          "25:     assert(!path.empty());",
          "27:         return -1;",
          "30:     if (path[0] == '/' ||",
          "31:         (path.length() >= 2 && path[0] == '.' && path[1] == '/') ||",
          "32:         (path.length() >= 3 && path[0] == '.' && path[1] == '.' &&",
          "",
          "[Removed Lines]",
          "26:     if (fileName_ == \"\")",
          "28:     std::string filename;",
          "29:     auto tmpPath = path;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34:         path == \".\" || path == \"..\")",
          "35:     {",
          "37:     }",
          "38:     else",
          "39:     {",
          "45:     }",
          "48:         return -1;",
          "72:     {",
          "74:     }",
          "75:     else",
          "76:     {",
          "82:     }",
          "83:     auto pathPos = pathAndFileName.rfind('/');",
          "84:     if (pathPos != std::string::npos)",
          "",
          "[Removed Lines]",
          "40:         auto &uploadPath = HttpAppFrameworkImpl::instance().getUploadPath();",
          "41:         if (uploadPath[uploadPath.length() - 1] == '/')",
          "42:             tmpPath = uploadPath + path;",
          "43:         else",
          "44:             tmpPath = uploadPath + \"/\" + path;",
          "47:     if (utils::createPath(tmpPath) < 0)",
          "50:     if (tmpPath[tmpPath.length() - 1] != '/')",
          "51:     {",
          "52:         filename = tmpPath + \"/\";",
          "53:         filename.append(fileName_.data(), fileName_.length());",
          "54:     }",
          "55:     else",
          "56:         filename = tmpPath.append(fileName_.data(), fileName_.length());",
          "58:     return saveTo(filename);",
          "59: }",
          "60: int HttpFileImpl::save() const",
          "61: {",
          "62:     return save(HttpAppFrameworkImpl::instance().getUploadPath());",
          "63: }",
          "64: int HttpFileImpl::saveAs(const std::string &filename) const",
          "65: {",
          "66:     assert(!filename.empty());",
          "67:     auto pathAndFileName = filename;",
          "68:     if (filename[0] == '/' ||",
          "69:         (filename.length() >= 2 && filename[0] == '.' && filename[1] == '/') ||",
          "70:         (filename.length() >= 3 && filename[0] == '.' && filename[1] == '.' &&",
          "71:          filename[2] == '/'))",
          "77:         auto &uploadPath = HttpAppFrameworkImpl::instance().getUploadPath();",
          "78:         if (uploadPath[uploadPath.length() - 1] == '/')",
          "79:             pathAndFileName = uploadPath + filename;",
          "80:         else",
          "81:             pathAndFileName = uploadPath + \"/\" + filename;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "89:     }",
          "90:     return saveTo(pathAndFileName);",
          "91: }",
          "93: {",
          "96:     if (file.is_open())",
          "97:     {",
          "98:         file.write(fileContent_.data(), fileContent_.size());",
          "",
          "[Removed Lines]",
          "92: int HttpFileImpl::saveTo(const std::string &pathAndFilename) const",
          "94:     LOG_TRACE << \"save uploaded file:\" << pathAndFilename;",
          "95:     std::ofstream file(pathAndFilename, std::ios::binary);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "115:     return implPtr_->getFileName();",
          "116: }",
          "119: {",
          "121: }",
          "123: void HttpFile::setFile(const char *data, size_t length)",
          "",
          "[Removed Lines]",
          "118: void HttpFile::setFileName(const std::string &filename)",
          "120:     implPtr_->setFileName(filename);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "135:     return implPtr_->save(path);",
          "136: }",
          "139: {",
          "141: }",
          "143: size_t HttpFile::fileLength() const noexcept",
          "",
          "[Removed Lines]",
          "138: int HttpFile::saveAs(const std::string &filename) const",
          "140:     return implPtr_->saveAs(filename);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/src/HttpFileImpl.h||lisrc/HttpFileImpl.h": [
          "File: lib/src/HttpFileImpl.h -> lisrc/HttpFileImpl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #pragma once",
          "16: #include <drogon/utils/string_view.h>",
          "17: #include <drogon/HttpRequest.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     const std::string &getFileName() const",
          "30:     {",
          "31:         return fileName_;",
          "36:     {",
          "42:     void setFile(const char *data, size_t length)",
          "43:     {",
          "44:         fileContent_ = string_view{data, length};",
          "",
          "[Removed Lines]",
          "32:     };",
          "35:     void setFileName(const std::string &filename)",
          "37:         fileName_ = filename;",
          "38:     };",
          "45:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:     size_t fileLength() const noexcept",
          "73:     {",
          "74:         return fileContent_.length();",
          "77:     const char *fileData() const noexcept",
          "78:     {",
          "",
          "[Removed Lines]",
          "69:     int saveAs(const std::string &filename) const;",
          "75:     };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:         itemName_ = itemName;",
          "96:     }",
          "99:     std::string getMd5() const;",
          "101:     void setRequest(const HttpRequestPtr &req)",
          "102:     {",
          "103:         requestPtr_ = req;",
          "",
          "[Removed Lines]",
          "100:     int saveTo(const std::string &pathAndFilename) const;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/src/HttpUtils.cc||lisrc/HttpUtils.cc": [
          "File: lib/src/HttpUtils.cc -> lisrc/HttpUtils.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "603:     return iter->second;",
          "604: }",
          "606: }  // namespace drogon",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/src/HttpUtils.h||lisrc/HttpUtils.h": [
          "File: lib/src/HttpUtils.h -> lisrc/HttpUtils.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: namespace drogon",
          "23: {",
          "25: const string_view &webContentTypeToString(ContentType contenttype);",
          "26: const string_view &statusCodeToString(int code);",
          "27: ContentType getContentType(const std::string &fileName);",
          "28: template <typename T>",
          "29: inline constexpr const char *contentLengthFormatString()",
          "30: {",
          "",
          "[Removed Lines]",
          "24: ContentType parseContentType(const string_view &contentType);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "unittest/FileTypeUnittest.cpp||unittest/FileTypeUnittest.cpp": [
          "File: unittest/FileTypeUnittest.cpp -> unittest/FileTypeUnittest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"../lib/src/HttpUtils.h\"",
          "2: #include <gtest/gtest.h>",
          "3: #include <string>",
          "4: using namespace drogon;",
          "6: TEST(ExtensionTest, normal)",
          "7: {",
          "8:     std::string str{\"drogon.jpg\"};",
          "9:     EXPECT_TRUE(getFileExtension(str) == \"jpg\");",
          "10: }",
          "12: TEST(ExtensionTest, negative)",
          "13: {",
          "14:     std::string str{\"drogon.\"};",
          "15:     EXPECT_TRUE(getFileExtension(str) == \"\");",
          "16:     str = \"drogon\";",
          "17:     EXPECT_TRUE(getFileExtension(str) == \"\");",
          "18:     str = \"\";",
          "19:     EXPECT_TRUE(getFileExtension(str) == \"\");",
          "20:     str = \"....\";",
          "21:     EXPECT_TRUE(getFileExtension(str) == \"\");",
          "22: }",
          "24: TEST(FileTypeTest, normal)",
          "25: {",
          "26:     EXPECT_EQ(parseFileType(\"jpg\"), FT_IMAGE);",
          "27:     EXPECT_EQ(parseFileType(\"mp4\"), FT_MEDIA);",
          "28:     EXPECT_EQ(parseFileType(\"csp\"), FT_CUSTOM);",
          "29:     EXPECT_EQ(parseFileType(\"html\"), FT_DOCUMENT);",
          "30: }",
          "32: TEST(FileTypeTest, negative)",
          "33: {",
          "34:     EXPECT_EQ(parseFileType(\"\"), FT_UNKNOWN);",
          "35:     EXPECT_EQ(parseFileType(\"don'tknow\"), FT_CUSTOM);",
          "36: }",
          "38: int main(int argc, char **argv)",
          "39: {",
          "40:     testing::InitGoogleTest(&argc, argv);",
          "41:     return RUN_ALL_TESTS();",
          "42: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d888816997969435b907bec3881df7f4229f3583",
      "candidate_info": {
        "commit_hash": "d888816997969435b907bec3881df7f4229f3583",
        "repo": "drogonframework/drogon",
        "commit_url": "https://github.com/drogonframework/drogon/commit/d888816997969435b907bec3881df7f4229f3583",
        "files": [
          ".gitignore",
          "CMakeLists.txt",
          "cmake/tests/check_has_std_filesystem_path.cc",
          "drogon_ctl/templates/cmake.csp",
          "lib/inc/drogon/utils/Utilities.h",
          "lib/src/CacheFile.cc",
          "lib/src/ConfigLoader.cc",
          "lib/src/HttpAppFrameworkImpl.cc",
          "lib/src/HttpFileImpl.cc",
          "lib/src/HttpFileImpl.h",
          "lib/src/HttpRequestImpl.cc",
          "lib/src/HttpResponseImpl.cc",
          "lib/src/StaticFileRouter.cc",
          "lib/src/Utilities.cc",
          "lib/src/filesystem.h",
          "trantor"
        ],
        "message": "Added support for paths containing unicode characters on Windows (#921)\n\nCo-authored-by: Christophe Greisberger <christophe@greisberger.fr>\nCo-authored-by: an-tao <antao2002@gmail.com>\nCo-authored-by: marty1885 <marty188586@gmail.com>",
        "before_after_code_files": [
          "cmake/tests/check_has_std_filesystem_path.cc||cmake/tests/check_has_std_filesystem_path.cc",
          "drogon_ctl/templates/cmake.csp||drogon_ctl/templates/cmake.csp",
          "lib/inc/drogon/utils/Utilities.h||liinc/drogon/utils/Utilities.h",
          "lib/src/CacheFile.cc||lisrc/CacheFile.cc",
          "lib/src/ConfigLoader.cc||lisrc/ConfigLoader.cc",
          "lib/src/HttpAppFrameworkImpl.cc||lisrc/HttpAppFrameworkImpl.cc",
          "lib/src/HttpFileImpl.cc||lisrc/HttpFileImpl.cc",
          "lib/src/HttpFileImpl.h||lisrc/HttpFileImpl.h",
          "lib/src/HttpRequestImpl.cc||lisrc/HttpRequestImpl.cc",
          "lib/src/HttpResponseImpl.cc||lisrc/HttpResponseImpl.cc",
          "lib/src/StaticFileRouter.cc||lisrc/StaticFileRouter.cc",
          "lib/src/Utilities.cc||lisrc/Utilities.cc",
          "lib/src/filesystem.h||lisrc/filesystem.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/src/HttpFileImpl.cc||lib/src/HttpFileImpl.cc"
          ],
          "candidate": [
            "lib/src/HttpFileImpl.cc||lisrc/HttpFileImpl.cc"
          ]
        }
      },
      "candidate_diff": {
        "cmake/tests/check_has_std_filesystem_path.cc||cmake/tests/check_has_std_filesystem_path.cc": [
          "File: cmake/tests/check_has_std_filesystem_path.cc -> cmake/tests/check_has_std_filesystem_path.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <filesystem>",
          "3: int main()",
          "4: {",
          "5:     std::filesystem::path aPath(\"../\");",
          "6:     return 0;",
          "7: }",
          "",
          "---------------"
        ],
        "drogon_ctl/templates/cmake.csp||drogon_ctl/templates/cmake.csp": [
          "File: drogon_ctl/templates/cmake.csp -> drogon_ctl/templates/cmake.csp",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: # ##############################################################################",
          "34: if (CMAKE_CXX_STANDARD LESS 17)",
          "36:     message(STATUS \"use c++14\")",
          "37:     find_package(Boost 1.61.0 REQUIRED)",
          "39: elseif (CMAKE_CXX_STANDARD LESS 20)",
          "40:     message(STATUS \"use c++17\")",
          "41: else ()",
          "",
          "[Removed Lines]",
          "35:     # With C++14, use boost to support any and string_view",
          "38:     target_include_directories(${PROJECT_NAME} PRIVATE ${Boost_INCLUDE_DIRS})",
          "",
          "[Added Lines]",
          "35:     # With C++14, use boost to support any, string_view and filesystem",
          "38:     find_package(Boost 1.61.0 REQUIRED COMPONENTS filesystem)",
          "39:     target_link_libraries(${PROJECT_NAME} PUBLIC Boost::boost)",
          "40:     target_link_libraries(${PROJECT_NAME} PUBLIC Boost::filesystem)",
          "",
          "---------------"
        ],
        "lib/inc/drogon/utils/Utilities.h||liinc/drogon/utils/Utilities.h": [
          "File: lib/inc/drogon/utils/Utilities.h -> liinc/drogon/utils/Utilities.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: DROGON_EXPORT int createPath(const std::string &path);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/src/CacheFile.cc||lisrc/CacheFile.cc": [
          "File: lib/src/CacheFile.cc -> lisrc/CacheFile.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include <trantor/utils/Logger.h>",
          "17: #ifdef _WIN32",
          "18: #include <mman.h>",
          "19: #else",
          "20: #include <unistd.h>",
          "21: #include <sys/mman.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29: #ifndef _MSC_VER",
          "30:     file_ = fopen(path_.data(), \"wb+\");",
          "31: #else",
          "33:     {",
          "34:         file_ = nullptr;",
          "35:     }",
          "",
          "[Removed Lines]",
          "32:     if (fopen_s(&file_, path_.data(), \"wb+\") != 0)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "46:     {",
          "47:         fclose(file_);",
          "48: #ifdef _WIN32",
          "50: #else",
          "51:         unlink(path_.data());",
          "52: #endif",
          "",
          "[Removed Lines]",
          "49:         _unlink(path_.data());",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/src/ConfigLoader.cc||lisrc/ConfigLoader.cc": [
          "File: lib/src/ConfigLoader.cc -> lisrc/ConfigLoader.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <trantor/utils/Logger.h>",
          "23: #ifndef _WIN32",
          "24: #include <unistd.h>",
          "25: #else",
          "26: #include <io.h>",
          "27: #endif",
          "29: using namespace drogon;",
          "30: static bool bytesSize(std::string &sizeStr, size_t &size)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94: }",
          "95: ConfigLoader::ConfigLoader(const std::string &configFile)",
          "96: {",
          "102:     {",
          "103:         std::cerr << \"Config file \" << configFile << \" not found!\" << std::endl;",
          "104:         exit(1);",
          "105:     }",
          "111:     {",
          "112:         std::cerr << \"No permission to read config file \" << configFile",
          "113:                   << std::endl;",
          "114:         exit(1);",
          "115:     }",
          "116:     configFile_ = configFile;",
          "118:     if (infile)",
          "119:     {",
          "120:         try",
          "",
          "[Removed Lines]",
          "97: #ifdef _WIN32",
          "98:     if (_access(configFile.c_str(), 0) != 0)",
          "99: #else",
          "100:     if (access(configFile.c_str(), 0) != 0)",
          "101: #endif",
          "106: #ifdef _WIN32",
          "107:     if (_access(configFile.c_str(), 04) != 0)",
          "108: #else",
          "109:     if (access(configFile.c_str(), R_OK) != 0)",
          "110: #endif",
          "117:     std::ifstream infile(configFile.c_str(), std::ifstream::in);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/src/HttpAppFrameworkImpl.cc||lisrc/HttpAppFrameworkImpl.cc": [
          "File: lib/src/HttpAppFrameworkImpl.cc -> lisrc/HttpAppFrameworkImpl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include <drogon/HttpTypes.h>",
          "41: #include <drogon/Session.h>",
          "42: #include <drogon/utils/Utilities.h>",
          "43: #include <trantor/utils/AsyncFileLogger.h>",
          "44: #include <json/json.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58: #include <sys/file.h>",
          "59: #include <uuid.h>",
          "60: #include <unistd.h>",
          "61: #else",
          "62: #include <io.h>",
          "63: #endif",
          "65: using namespace drogon;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "393: {",
          "394:     if (logPath.empty())",
          "395:         return *this;",
          "401:     {",
          "402:         std::cerr << \"Log path does not exist!\\n\";",
          "403:         exit(1);",
          "404:     }",
          "410:     {",
          "411:         std::cerr << \"Unable to access log path!\\n\";",
          "412:         exit(1);",
          "",
          "[Removed Lines]",
          "396: #ifdef _WIN32",
          "397:     if (_access(logPath.c_str(), 0) != 0)",
          "398: #else",
          "399:     if (access(logPath.c_str(), 0) != 0)",
          "400: #endif",
          "405: #ifdef _WIN32",
          "406:     if (_access(logPath.c_str(), 06) != 0)",
          "407: #else",
          "408:     if (access(logPath.c_str(), R_OK | W_OK) != 0)",
          "409: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "494:     if (!logPath_.empty())",
          "495:     {",
          "501:         {",
          "502:             LOG_ERROR << \"log file path not exist\";",
          "503:             abort();",
          "",
          "[Removed Lines]",
          "496: #ifdef _WIN32",
          "497:         if (_access(logPath_.c_str(), 06) != 0)",
          "498: #else",
          "499:         if (access(logPath_.c_str(), R_OK | W_OK) != 0)",
          "500: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "666:     const std::string &uploadPath)",
          "667: {",
          "668:     assert(!uploadPath.empty());",
          "679:     {",
          "684:     }",
          "685:     return *this;",
          "686: }",
          "687: void HttpAppFrameworkImpl::findSessionForRequest(const HttpRequestImplPtr &req)",
          "",
          "[Removed Lines]",
          "669:     if (uploadPath[0] == '/' ||",
          "670:         (uploadPath.length() >= 2 && uploadPath[0] == '.' &&",
          "671:          uploadPath[1] == '/') ||",
          "672:         (uploadPath.length() >= 3 && uploadPath[0] == '.' &&",
          "673:          uploadPath[1] == '.' && uploadPath[2] == '/') ||",
          "674:         uploadPath == \".\" || uploadPath == \"..\")",
          "675:     {",
          "676:         uploadPath_ = uploadPath;",
          "677:     }",
          "678:     else",
          "680:         if (rootPath_[rootPath_.length() - 1] == '/')",
          "681:             uploadPath_ = rootPath_ + uploadPath;",
          "682:         else",
          "683:             uploadPath_ = rootPath_ + \"/\" + uploadPath;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/src/HttpFileImpl.cc||lisrc/HttpFileImpl.cc": [
          "File: lib/src/HttpFileImpl.cc -> lisrc/HttpFileImpl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include <drogon/MultiPart.h>",
          "18: #include <fstream>",
          "19: #include <iostream>",
          "21: using namespace drogon;",
          "29: int HttpFileImpl::save() const",
          "30: {",
          "",
          "[Removed Lines]",
          "23: static inline void ensureSlashPostfix(std::string &path)",
          "24: {",
          "25:     if (path[path.length() - 1] != '/')",
          "26:         path += '/';",
          "27: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     assert(!path.empty());",
          "37:     if (fileName_.empty())",
          "38:         return -1;",
          "50:     {",
          "54:     }",
          "60: }",
          "61: int HttpFileImpl::saveAs(const std::string &fileName) const",
          "62: {",
          "63:     assert(!fileName.empty());",
          "69:     {",
          "72:     }",
          "74:     {",
          "84:             return -1;",
          "85:     }",
          "87: }",
          "89: {",
          "90:     LOG_TRACE << \"save uploaded file:\" << pathAndFileName;",
          "92:     if (file.is_open())",
          "93:     {",
          "94:         file.write(fileContent_.data(), fileContent_.size());",
          "",
          "[Removed Lines]",
          "39:     std::string fileName;",
          "40:     if (path[0] == '/' ||",
          "41:         (path.length() >= 2 && path[0] == '.' && path[1] == '/') ||",
          "42:         (path.length() >= 3 && path[0] == '.' && path[1] == '.' &&",
          "43:          path[2] == '/') ||",
          "44:         path == \".\" || path == \"..\")",
          "45:     {",
          "47:         fileName = path;",
          "48:     }",
          "49:     else",
          "51:         fileName = HttpAppFrameworkImpl::instance().getUploadPath();",
          "52:         ensureSlashPostfix(fileName);",
          "53:         fileName += path;",
          "55:     if (utils::createPath(fileName) < 0)",
          "56:         return -1;",
          "57:     ensureSlashPostfix(fileName);",
          "58:     fileName += fileName_;",
          "59:     return saveTo(fileName);",
          "64:     std::string pathAndFileName;",
          "65:     if (fileName[0] == '/' ||",
          "66:         (fileName.length() >= 2 && fileName[0] == '.' && fileName[1] == '/') ||",
          "67:         (fileName.length() >= 3 && fileName[0] == '.' && fileName[1] == '.' &&",
          "68:          fileName[2] == '/'))",
          "71:         pathAndFileName = fileName;",
          "73:     else",
          "75:         pathAndFileName = HttpAppFrameworkImpl::instance().getUploadPath();",
          "76:         ensureSlashPostfix(pathAndFileName);",
          "77:         pathAndFileName += fileName;",
          "78:     }",
          "79:     auto pathPos = pathAndFileName.rfind('/');",
          "80:     if (pathPos != std::string::npos)",
          "81:     {",
          "82:         std::string path = pathAndFileName.substr(0, pathPos);",
          "83:         if (utils::createPath(path) < 0)",
          "86:     return saveTo(pathAndFileName);",
          "88: int HttpFileImpl::saveTo(const std::string &pathAndFileName) const",
          "91:     std::ofstream file(pathAndFileName, std::ios::binary);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/src/HttpFileImpl.h||lisrc/HttpFileImpl.h": [
          "File: lib/src/HttpFileImpl.h -> lisrc/HttpFileImpl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #pragma once",
          "16: #include \"HttpUtils.h\"",
          "17: #include <drogon/utils/string_view.h>",
          "18: #include <drogon/HttpRequest.h>",
          "20: #include <map>",
          "21: #include <string>",
          "22: #include <vector>",
          "23: #include <memory>",
          "24: namespace drogon",
          "25: {",
          "26: class HttpFileImpl",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "112:     std::string getMd5() const;",
          "114:     void setRequest(const HttpRequestPtr &req)",
          "115:     {",
          "116:         requestPtr_ = req;",
          "",
          "[Removed Lines]",
          "113:     int saveTo(const std::string &pathAndFileName) const;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "122:     string_view fileContent_;",
          "123:     HttpRequestPtr requestPtr_;",
          "124: };",
          "",
          "[Removed Lines]",
          "125: }  // namespace drogon",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/src/HttpRequestImpl.cc||lisrc/HttpRequestImpl.cc": [
          "File: lib/src/HttpRequestImpl.cc -> lisrc/HttpRequestImpl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "287:                 content.append(\"\\\"; filename=\\\"\");",
          "288:                 content.append(file.fileName());",
          "289:                 content.append(\"\\\"\\r\\n\\r\\n\");",
          "291:                 if (!infile)",
          "292:                 {",
          "293:                     LOG_ERROR << file.path() << \" not found\";",
          "",
          "[Removed Lines]",
          "290:                 std::ifstream infile(file.path(), std::ifstream::binary);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/src/HttpResponseImpl.cc||lisrc/HttpResponseImpl.cc": [
          "File: lib/src/HttpResponseImpl.cc -> lisrc/HttpResponseImpl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include \"HttpUtils.h\"",
          "18: #include <drogon/HttpViewData.h>",
          "19: #include <drogon/IOThreadStorage.h>",
          "20: #include <fstream>",
          "21: #include <memory>",
          "22: #include <cstdio>",
          "23: #include <sys/stat.h>",
          "24: #include <trantor/utils/Logger.h>",
          "27: #endif",
          "28: using namespace trantor;",
          "29: using namespace drogon;",
          "",
          "[Removed Lines]",
          "25: #ifdef _WIN32",
          "26: #define stat _stati64",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:     const std::string &attachmentFileName,",
          "236:     ContentType type)",
          "237: {",
          "239:     LOG_TRACE << \"send http file:\" << fullPath;",
          "240:     if (!infile)",
          "241:     {",
          "",
          "[Removed Lines]",
          "238:     std::ifstream infile(fullPath, std::ifstream::binary);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "345:         }",
          "346:         else",
          "347:         {",
          "352:             {",
          "354:                 return;",
          "355:             }",
          "361:         }",
          "362:         buffer.hasWritten(len);",
          "363:         if (headers_.find(\"connection\") == headers_.end())",
          "",
          "[Removed Lines]",
          "348:             struct stat filestat",
          "349:             {",
          "350:             };",
          "351:             if (stat(sendfileName_.data(), &filestat) < 0)",
          "353:                 LOG_SYSERR << sendfileName_ << \" stat error\";",
          "356:             len = snprintf(",
          "357:                 buffer.beginWrite(),",
          "358:                 buffer.writableBytes(),",
          "359:                 contentLengthFormatString<decltype(filestat.st_size)>(),",
          "360:                 filestat.st_size);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/src/StaticFileRouter.cc||lisrc/StaticFileRouter.cc": [
          "File: lib/src/StaticFileRouter.cc -> lisrc/StaticFileRouter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #ifndef _WIN32",
          "24: #include <sys/file.h>",
          "25: #else",
          "27: #define S_ISREG(m) (((m)&0170000) == (0100000))",
          "28: #define S_ISDIR(m) (((m)&0170000) == (0040000))",
          "29: #endif",
          "30: #include <sys/stat.h>",
          "32: using namespace drogon;",
          "",
          "[Removed Lines]",
          "26: #define stat _stati64",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:             std::string filePath =",
          "138:                 location.realLocation_ +",
          "139:                 std::string{restOfThePath.data(), restOfThePath.length()};",
          "142:             {",
          "143:                 defaultHandler_(req, std::move(callback));",
          "144:                 return;",
          "145:             }",
          "147:             {",
          "149:                 if (implicitPageEnable_)",
          "",
          "[Removed Lines]",
          "140:             struct stat fileStat;",
          "141:             if (stat(filePath.c_str(), &fileStat) != 0)",
          "146:             if (S_ISDIR(fileStat.st_mode))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "216:     std::string directoryPath =",
          "217:         HttpAppFrameworkImpl::instance().getDocumentRoot() + path;",
          "220:     {",
          "222:         {",
          "224:             if (implicitPageEnable_)",
          "",
          "[Removed Lines]",
          "218:     struct stat fileStat;",
          "219:     if (stat(directoryPath.c_str(), &fileStat) == 0)",
          "221:         if (S_ISDIR(fileStat.st_mode))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "299:         }",
          "300:         else",
          "301:         {",
          "303:             LOG_TRACE << \"enabled LastModify\";",
          "305:                 S_ISREG(fileStat.st_mode))",
          "306:             {",
          "307:                 fileExists = true;",
          "",
          "[Removed Lines]",
          "302:             struct stat fileStat;",
          "304:             if (stat(filePath.c_str(), &fileStat) == 0 &&",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "361:     }",
          "362:     if (!fileExists)",
          "363:     {",
          "367:         {",
          "368:             defaultHandler_(req, std::move(callback));",
          "369:             return;",
          "",
          "[Removed Lines]",
          "364:         struct stat fileStat;",
          "365:         if (stat(filePath.c_str(), &fileStat) != 0 ||",
          "366:             !S_ISREG(fileStat.st_mode))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "383:     {",
          "385:         auto brFileName = filePath + \".br\";",
          "389:         {",
          "390:             resp =",
          "391:                 HttpResponse::newFileResponse(brFileName,",
          "",
          "[Removed Lines]",
          "386:         struct stat filestat;",
          "387:         if (stat(brFileName.c_str(), &filestat) == 0 &&",
          "388:             S_ISREG(filestat.st_mode))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "399:     {",
          "401:         auto gzipFileName = filePath + \".gz\";",
          "405:         {",
          "406:             resp =",
          "407:                 HttpResponse::newFileResponse(gzipFileName,",
          "",
          "[Removed Lines]",
          "402:         struct stat filestat;",
          "403:         if (stat(gzipFileName.c_str(), &filestat) == 0 &&",
          "404:             S_ISREG(filestat.st_mode))",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/src/Utilities.cc||lisrc/Utilities.cc": [
          "File: lib/src/Utilities.cc -> lisrc/Utilities.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: #include <drogon/utils/Utilities.h>",
          "16: #include <trantor/utils/Logger.h>",
          "17: #include <drogon/config.h>",
          "18: #ifdef OpenSSL_FOUND",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51: #include <fcntl.h>",
          "52: #include <stdarg.h>",
          "54: #ifdef _WIN32",
          "55: char *strptime(const char *s, const char *f, struct tm *tm)",
          "56: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1043:     return strBuffer;",
          "1044: }",
          "1046: int createPath(const std::string &path)",
          "1047: {",
          "1074:     {",
          "1101:     }",
          "1102:     return 0;",
          "1103: }",
          "",
          "[Removed Lines]",
          "1048:     auto tmpPath = path;",
          "1049:     std::stack<std::string> pathStack;",
          "1050: #ifdef _WIN32",
          "1051:     while (_access(tmpPath.c_str(), 06) != 0)",
          "1052: #else",
          "1053:     while (access(tmpPath.c_str(), F_OK) != 0)",
          "1054: #endif",
          "1055:     {",
          "1056:         if (tmpPath == \"./\" || tmpPath == \"/\")",
          "1057:             return -1;",
          "1058:         while (tmpPath[tmpPath.length() - 1] == '/')",
          "1059:             tmpPath.resize(tmpPath.length() - 1);",
          "1060:         auto pos = tmpPath.rfind('/');",
          "1061:         if (pos != std::string::npos)",
          "1062:         {",
          "1063:             pathStack.push(tmpPath.substr(pos));",
          "1064:             tmpPath = tmpPath.substr(0, pos + 1);",
          "1065:         }",
          "1066:         else",
          "1067:         {",
          "1068:             pathStack.push(tmpPath);",
          "1069:             tmpPath.clear();",
          "1070:             break;",
          "1071:         }",
          "1072:     }",
          "1073:     while (pathStack.size() > 0)",
          "1075:         if (tmpPath.empty())",
          "1076:         {",
          "1077:             tmpPath = pathStack.top();",
          "1078:         }",
          "1079:         else",
          "1080:         {",
          "1081:             if (tmpPath[tmpPath.length() - 1] == '/')",
          "1082:             {",
          "1083:                 tmpPath.append(pathStack.top());",
          "1084:             }",
          "1085:             else",
          "1086:             {",
          "1087:                 tmpPath.append(\"/\").append(pathStack.top());",
          "1088:             }",
          "1089:         }",
          "1090:         pathStack.pop();",
          "1092: #ifdef _WIN32",
          "1093:         if (_mkdir(tmpPath.c_str()) == -1)",
          "1094: #else",
          "1095:         if (mkdir(tmpPath.c_str(), 0755) == -1)",
          "1096: #endif",
          "1097:         {",
          "1098:             LOG_ERROR << \"Can't create path:\" << path;",
          "1099:             return -1;",
          "1100:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/src/filesystem.h||lisrc/filesystem.h": [
          "File: lib/src/filesystem.h -> lisrc/filesystem.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}