{
  "cve_id": "CVE-2014-8545",
  "cve_desc": "libavcodec/pngdec.c in FFmpeg before 2.4.2 accepts the monochrome-black format without verifying that the bits-per-pixel value is 1, which allows remote attackers to cause a denial of service (out-of-bounds access) or possibly have unspecified other impact via crafted PNG data.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "3e2b745020c2dbf0201fe7df3dad9e7e0b2e1bb6",
  "patch_info": {
    "commit_hash": "3e2b745020c2dbf0201fe7df3dad9e7e0b2e1bb6",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/3e2b745020c2dbf0201fe7df3dad9e7e0b2e1bb6",
    "files": [
      "libavcodec/pngdec.c"
    ],
    "message": "avcodec/pngdec: Check bits per pixel before setting monoblack pixel format\n\nFixes out of array accesses\nFixes: asan_heap-oob_14dbfcf_4_asan_heap-oob_1ce5767_179_add_method_small.png\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
    "before_after_code_files": [
      "libavcodec/pngdec.c||libavcodec/pngdec.c"
    ]
  },
  "patch_diff": {
    "libavcodec/pngdec.c||libavcodec/pngdec.c": [
      "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "650:                 } else if ((s->bits_per_pixel == 1 || s->bits_per_pixel == 2 || s->bits_per_pixel == 4 || s->bits_per_pixel == 8) &&",
      "651:                            s->color_type == PNG_COLOR_TYPE_PALETTE) {",
      "652:                     avctx->pix_fmt = AV_PIX_FMT_PAL8;",
      "654:                     avctx->pix_fmt = AV_PIX_FMT_MONOBLACK;",
      "655:                 } else if (s->bit_depth == 8 &&",
      "656:                            s->color_type == PNG_COLOR_TYPE_GRAY_ALPHA) {",
      "",
      "[Removed Lines]",
      "653:                 } else if (s->bit_depth == 1) {",
      "",
      "[Added Lines]",
      "653:                 } else if (s->bit_depth == 1 && s->bits_per_pixel == 1) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7a5590ef4282e19d48d70cba0bc4628c13ec6fd8",
      "candidate_info": {
        "commit_hash": "7a5590ef4282e19d48d70cba0bc4628c13ec6fd8",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/7a5590ef4282e19d48d70cba0bc4628c13ec6fd8",
        "files": [
          "libavcodec/pngdec.c"
        ],
        "message": "avcodec/pngdec: Check bits per pixel before setting monoblack pixel format\n\nFixes out of array accesses\nFixes: asan_heap-oob_14dbfcf_4_asan_heap-oob_1ce5767_179_add_method_small.png\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 3e2b745020c2dbf0201fe7df3dad9e7e0b2e1bb6)\n\nConflicts:\n\n\tlibavcodec/pngdec.c",
        "before_after_code_files": [
          "libavcodec/pngdec.c||libavcodec/pngdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ],
          "candidate": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/pngdec.c||libavcodec/pngdec.c": [
          "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:                 } else if (s->bit_depth == 16 &&",
          "464:                            s->color_type == PNG_COLOR_TYPE_RGB) {",
          "465:                     avctx->pix_fmt = PIX_FMT_RGB48BE;",
          "467:                     avctx->pix_fmt = PIX_FMT_MONOBLACK;",
          "468:                 } else if (s->bit_depth == 8 &&",
          "469:                            s->color_type == PNG_COLOR_TYPE_PALETTE) {",
          "",
          "[Removed Lines]",
          "466:                 } else if (s->bit_depth == 1) {",
          "",
          "[Added Lines]",
          "466:                 } else if (s->bit_depth == 1 && s->bits_per_pixel == 1) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0b99a18ebc4109574ae4a619ba3716208d367e70",
      "candidate_info": {
        "commit_hash": "0b99a18ebc4109574ae4a619ba3716208d367e70",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/0b99a18ebc4109574ae4a619ba3716208d367e70",
        "files": [
          "libavcodec/pngdec.c"
        ],
        "message": "avcodec/pngdec: Check bits per pixel before setting monoblack pixel format\n\nFixes out of array accesses\nFixes: asan_heap-oob_14dbfcf_4_asan_heap-oob_1ce5767_179_add_method_small.png\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 3e2b745020c2dbf0201fe7df3dad9e7e0b2e1bb6)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/pngdec.c||libavcodec/pngdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ],
          "candidate": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/pngdec.c||libavcodec/pngdec.c": [
          "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "634:                 } else if ((s->bits_per_pixel == 1 || s->bits_per_pixel == 2 || s->bits_per_pixel == 4 || s->bits_per_pixel == 8) &&",
          "635:                            s->color_type == PNG_COLOR_TYPE_PALETTE) {",
          "636:                     avctx->pix_fmt = AV_PIX_FMT_PAL8;",
          "638:                     avctx->pix_fmt = AV_PIX_FMT_MONOBLACK;",
          "639:                 } else if (s->bit_depth == 8 &&",
          "640:                            s->color_type == PNG_COLOR_TYPE_GRAY_ALPHA) {",
          "",
          "[Removed Lines]",
          "637:                 } else if (s->bit_depth == 1) {",
          "",
          "[Added Lines]",
          "637:                 } else if (s->bit_depth == 1 && s->bits_per_pixel == 1) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5d852f338d5b7f57126666ba8f8f27b02597686f",
      "candidate_info": {
        "commit_hash": "5d852f338d5b7f57126666ba8f8f27b02597686f",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/5d852f338d5b7f57126666ba8f8f27b02597686f",
        "files": [
          "libavcodec/pngdec.c"
        ],
        "message": "avcodec/pngdec: Check bits per pixel before setting monoblack pixel format\n\nFixes out of array accesses\nFixes: asan_heap-oob_14dbfcf_4_asan_heap-oob_1ce5767_179_add_method_small.png\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 3e2b745020c2dbf0201fe7df3dad9e7e0b2e1bb6)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/pngdec.c||libavcodec/pngdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ],
          "candidate": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/pngdec.c||libavcodec/pngdec.c": [
          "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "633:                 } else if ((s->bits_per_pixel == 1 || s->bits_per_pixel == 2 || s->bits_per_pixel == 4 || s->bits_per_pixel == 8) &&",
          "634:                            s->color_type == PNG_COLOR_TYPE_PALETTE) {",
          "635:                     avctx->pix_fmt = AV_PIX_FMT_PAL8;",
          "637:                     avctx->pix_fmt = AV_PIX_FMT_MONOBLACK;",
          "638:                 } else if (s->bit_depth == 8 &&",
          "639:                            s->color_type == PNG_COLOR_TYPE_GRAY_ALPHA) {",
          "",
          "[Removed Lines]",
          "636:                 } else if (s->bit_depth == 1) {",
          "",
          "[Added Lines]",
          "636:                 } else if (s->bit_depth == 1 && s->bits_per_pixel == 1) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae81d9a7da10ee51e229b7e28da4a862888fbdde",
      "candidate_info": {
        "commit_hash": "ae81d9a7da10ee51e229b7e28da4a862888fbdde",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/ae81d9a7da10ee51e229b7e28da4a862888fbdde",
        "files": [
          "libavcodec/pngdec.c"
        ],
        "message": "avcodec/pngdec: Check bits per pixel before setting monoblack pixel format\n\nFixes out of array accesses\nFixes: asan_heap-oob_14dbfcf_4_asan_heap-oob_1ce5767_179_add_method_small.png\n\nFound-by: Mateusz \"j00ru\" Jurczyk and Gynvael Coldwind\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>\n(cherry picked from commit 3e2b745020c2dbf0201fe7df3dad9e7e0b2e1bb6)\n\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/pngdec.c||libavcodec/pngdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ],
          "candidate": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/pngdec.c||libavcodec/pngdec.c": [
          "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "623:                 } else if ((s->bits_per_pixel == 1 || s->bits_per_pixel == 2 || s->bits_per_pixel == 4 || s->bits_per_pixel == 8) &&",
          "624:                            s->color_type == PNG_COLOR_TYPE_PALETTE) {",
          "625:                     avctx->pix_fmt = AV_PIX_FMT_PAL8;",
          "627:                     avctx->pix_fmt = AV_PIX_FMT_MONOBLACK;",
          "628:                 } else if (s->bit_depth == 8 &&",
          "629:                            s->color_type == PNG_COLOR_TYPE_GRAY_ALPHA) {",
          "",
          "[Removed Lines]",
          "626:                 } else if (s->bit_depth == 1) {",
          "",
          "[Added Lines]",
          "626:                 } else if (s->bit_depth == 1 && s->bits_per_pixel == 1) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8f760be4d312bb6e78f80d39b9d0062253332e08",
      "candidate_info": {
        "commit_hash": "8f760be4d312bb6e78f80d39b9d0062253332e08",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/8f760be4d312bb6e78f80d39b9d0062253332e08",
        "files": [
          "libavcodec/pngdec.c"
        ],
        "message": "pngdec: return correct error code from decode_frame_common\n\nDuring the loop ret can get changed. Since it is not set on all failure\npaths, decode_frame_common can return 0 even though an error occurred.\n\nSigned-off-by: Andreas Cadhalpun <Andreas.Cadhalpun@googlemail.com>\nSigned-off-by: Michael Niedermayer <michaelni@gmx.at>",
        "before_after_code_files": [
          "libavcodec/pngdec.c||libavcodec/pngdec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ],
          "candidate": [
            "libavcodec/pngdec.c||libavcodec/pngdec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/pngdec.c||libavcodec/pngdec.c": [
          "File: libavcodec/pngdec.c -> libavcodec/pngdec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "968:     AVDictionary *metadata  = NULL;",
          "969:     uint32_t tag, length;",
          "970:     int decode_next_dat = 0;",
          "972:     AVFrame *ref;",
          "974:     for (;;) {",
          "",
          "[Removed Lines]",
          "971:     int ret = AVERROR_INVALIDDATA;",
          "",
          "[Added Lines]",
          "971:     int ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "984:             if (   s->state & PNG_ALLIMAGE",
          "985:                 && avctx->strict_std_compliance <= FF_COMPLIANCE_NORMAL)",
          "986:                 goto exit_loop;",
          "987:             goto fail;",
          "988:         }",
          "990:         length = bytestream2_get_be32(&s->gb);",
          "991:         if (length > 0x7fffffff || length > bytestream2_get_bytes_left(&s->gb)) {",
          "992:             av_log(avctx, AV_LOG_ERROR, \"chunk too big\\n\");",
          "993:             goto fail;",
          "994:         }",
          "995:         tag = bytestream2_get_le32(&s->gb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "987:             ret = AVERROR_INVALIDDATA;",
          "994:             ret = AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1001:                 ((tag >> 24) & 0xff), length);",
          "1002:         switch (tag) {",
          "1003:         case MKTAG('I', 'H', 'D', 'R'):",
          "1005:                 goto fail;",
          "1006:             break;",
          "1007:         case MKTAG('p', 'H', 'Y', 's'):",
          "1009:                 goto fail;",
          "1010:             break;",
          "1011:         case MKTAG('f', 'c', 'T', 'L'):",
          "",
          "[Removed Lines]",
          "1004:             if (decode_ihdr_chunk(avctx, s, length) < 0)",
          "1008:             if (decode_phys_chunk(avctx, s) < 0)",
          "",
          "[Added Lines]",
          "1006:             if ((ret = decode_ihdr_chunk(avctx, s, length)) < 0)",
          "1010:             if ((ret = decode_phys_chunk(avctx, s)) < 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1018:         case MKTAG('f', 'd', 'A', 'T'):",
          "1019:             if (!CONFIG_APNG_DECODER || avctx->codec_id != AV_CODEC_ID_APNG)",
          "1020:                 goto skip_tag;",
          "1022:                 goto fail;",
          "1023:             bytestream2_get_be32(&s->gb);",
          "1024:             length -= 4;",
          "1026:         case MKTAG('I', 'D', 'A', 'T'):",
          "1027:             if (CONFIG_APNG_DECODER && avctx->codec_id == AV_CODEC_ID_APNG && !decode_next_dat)",
          "1028:                 goto skip_tag;",
          "1030:                 goto fail;",
          "1031:             break;",
          "1032:         case MKTAG('P', 'L', 'T', 'E'):",
          "",
          "[Removed Lines]",
          "1021:             if (!decode_next_dat)",
          "1029:             if (decode_idat_chunk(avctx, s, length, p) < 0)",
          "",
          "[Added Lines]",
          "1023:             if (!decode_next_dat) {",
          "1024:                 ret = AVERROR_INVALIDDATA;",
          "1026:             }",
          "1033:             if ((ret = decode_idat_chunk(avctx, s, length, p)) < 0)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1051:             if (!(s->state & PNG_ALLIMAGE))",
          "1052:                 av_log(avctx, AV_LOG_ERROR, \"IEND without all image\\n\");",
          "1053:             if (!(s->state & (PNG_ALLIMAGE|PNG_IDAT))) {",
          "1054:                 goto fail;",
          "1055:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1058:                 ret = AVERROR_INVALIDDATA;",
          "",
          "---------------"
        ]
      }
    }
  ]
}