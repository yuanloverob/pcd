{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0f31327eeef9b039f6154fe8930b73e2989a7c29",
      "candidate_info": {
        "commit_hash": "0f31327eeef9b039f6154fe8930b73e2989a7c29",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0f31327eeef9b039f6154fe8930b73e2989a7c29",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/json105.test"
        ],
        "message": "Enhance the path arguments in JSON functions to access \"#-N\" array indexes.\n\nFossilOrigin-Name: ffeec62cb5223ae70bc1889df4c0b241f5d17b1a10156362ca59953028741480",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/json105.test||test/json105.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1176:       }",
          "1177:       return pNode;",
          "1178:     }",
          "1181:     i = 0;",
          "1182:     j = 1;",
          "1183:     while( safe_isdigit(zPath[j]) ){",
          "1184:       i = i*10 + zPath[j] - '0';",
          "1185:       j++;",
          "1186:     }",
          "1190:     }",
          "1191:     zPath += j + 1;",
          "1192:     j = 1;",
          "1193:     for(;;){",
          "",
          "[Removed Lines]",
          "1179:   }else if( zPath[0]=='[' && safe_isdigit(zPath[1]) ){",
          "1180:     if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "1187:     if( zPath[j]!=']' ){",
          "1189:       return 0;",
          "",
          "[Added Lines]",
          "1179:   }else if( zPath[0]=='[' ){",
          "1186:     if( j<2 || zPath[j]!=']' ){",
          "1187:       if( zPath[1]=='#' ){",
          "1188:         JsonNode *pBase = pRoot;",
          "1189:         int iBase = iRoot;",
          "1190:         if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "1191:         for(;;){",
          "1192:           while( j<=pBase->n ){",
          "1193:             if( (pBase[j].jnFlags & JNODE_REMOVE)==0 ) i++;",
          "1194:             j += jsonNodeSize(&pBase[j]);",
          "1195:           }",
          "1196:           if( (pBase->jnFlags & JNODE_APPEND)==0 ) break;",
          "1197:           iBase += pBase->u.iAppend;",
          "1198:           pBase = &pParse->aNode[iBase];",
          "1199:           j = 1;",
          "1200:         }",
          "1201:         j = 2;",
          "1202:         if( zPath[2]=='-' && safe_isdigit(zPath[3]) ){",
          "1203:           unsigned int x = 0;",
          "1204:           j = 3;",
          "1205:           do{",
          "1206:             x = x*10 + zPath[j] - '0';",
          "1207:             j++;",
          "1208:           }while( safe_isdigit(zPath[j]) );",
          "1209:           if( x>i ) return 0;",
          "1210:           i -= x;",
          "1211:         }",
          "1212:         if( zPath[j]!=']' ){",
          "1214:           return 0;",
          "1215:         }",
          "1216:       }else{",
          "1218:         return 0;",
          "1219:       }",
          "1221:     if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: de6637e15d95b7aee2caea8b8d5b9865f276cbbf152ecf0401c4c7bfdf6dee6f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/json105.test||test/json105.test": [
          "File: test/json105.test -> test/json105.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-11-22",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements tests for \"[#]\" extension to json-path",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix json104",
          "18: ifcapable !json1 {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: # This is the example from pages 2 and 3 of RFC-7396",
          "24: db eval {",
          "25:   CREATE TABLE t1(j);",
          "26:   INSERT INTO t1(j) VALUES('{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}');",
          "27: }",
          "28: proc json_extract_test {testnum path result} {",
          "29:   do_execsql_test json105-1.$testnum \"SELECT quote(json_extract(j,$path)) FROM t1\" $result",
          "30: }",
          "31: json_extract_test 10 {'$.b[#]'}   NULL",
          "32: json_extract_test 20 {'$.b[#-1]'} 4",
          "33: json_extract_test 30 {'$.b[#-2]'} {'[2,3]'}",
          "34: json_extract_test 31 {'$.b[#-02]'} {'[2,3]'}",
          "35: json_extract_test 40 {'$.b[#-3]'} 1",
          "36: json_extract_test 50 {'$.b[#-4]'} NULL",
          "37: json_extract_test 60 {'$.b[#-2][#-1]'} 3",
          "38: json_extract_test 70 {'$.b[0]','$.b[#-1]'} {'[1,4]'}",
          "40: json_extract_test 100 {'$.a[#-1]'} NULL",
          "41: json_extract_test 110 {'$.b[#-000001]'} 4",
          "43: proc json_remove_test {testnum path result} {",
          "44:   do_execsql_test json105-2.$testnum \"SELECT quote(json_remove(j,$path)) FROM t1\" $result",
          "45: }",
          "46: json_remove_test 10 {'$.b[#]'}    {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "47: json_remove_test 20 {'$.b[#-0]'}  {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "48: json_remove_test 30 {'$.b[#-1]'}  {'{\"a\":1,\"b\":[1,[2,3]],\"c\":99}'}",
          "49: json_remove_test 40 {'$.b[#-2]'}  {'{\"a\":1,\"b\":[1,4],\"c\":99}'}",
          "50: json_remove_test 50 {'$.b[#-3]'}  {'{\"a\":1,\"b\":[[2,3],4],\"c\":99}'}",
          "51: json_remove_test 60 {'$.b[#-4]'}  {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "52: json_remove_test 70 {'$.b[#-2][#-1]'}  {'{\"a\":1,\"b\":[1,[2],4],\"c\":99}'}",
          "54: json_remove_test 100 {'$.b[0]','$.b[#-1]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "55: json_remove_test 110 {'$.b[#-1]','$.b[0]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "56: json_remove_test 120 {'$.b[#-1]','$.b[#-2]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "57: json_remove_test 130 {'$.b[#-1]','$.b[#-1]'} {'{\"a\":1,\"b\":[1],\"c\":99}'}",
          "58: json_remove_test 140 {'$.b[#-2]','$.b[#-1]'} {'{\"a\":1,\"b\":[1],\"c\":99}'}",
          "60: proc json_insert_test {testnum x result} {",
          "61:   do_execsql_test json105-3.$testnum \"SELECT quote(json_insert(j,$x)) FROM t1\" $result",
          "62: }",
          "63: json_insert_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\"],\"c\":99}'}",
          "64: json_insert_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4],\"c\":99}'}",
          "65: json_insert_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "66:      {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4,\"BBB\"],\"c\":99}'}",
          "67: json_insert_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "68:      {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\",\"BBB\"],\"c\":99}'}",
          "70: proc json_set_test {testnum x result} {",
          "71:   do_execsql_test json105-4.$testnum \"SELECT quote(json_set(j,$x)) FROM t1\" $result",
          "72: }",
          "73: json_set_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\"],\"c\":99}'}",
          "74: json_set_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4],\"c\":99}'}",
          "75: json_set_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "76:      {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4,\"BBB\"],\"c\":99}'}",
          "77: json_set_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "78:      {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\",\"BBB\"],\"c\":99}'}",
          "79: json_set_test 50 {'$.b[#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],\"AAA\"],\"c\":99}'}",
          "80: json_set_test 60 {'$.b[1][#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,\"AAA\"],4],\"c\":99}'}",
          "81: json_set_test 70 {'$.b[1][#-1]','AAA','$.b[#-1]','BBB'} \\",
          "82:      {'{\"a\":1,\"b\":[1,[2,\"AAA\"],\"BBB\"],\"c\":99}'}",
          "83: json_set_test 80 {'$.b[#-1]','AAA','$.b[#-1]','BBB'} \\",
          "84:      {'{\"a\":1,\"b\":[1,[2,3],\"BBB\"],\"c\":99}'}",
          "86: proc json_replace_test {testnum x result} {",
          "87:   do_execsql_test json105-5.$testnum \"SELECT quote(json_replace(j,$x)) FROM t1\" $result",
          "88: }",
          "89: json_replace_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "90: json_replace_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "91: json_replace_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "92:      {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "93: json_replace_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "94:      {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "95: json_replace_test 50 {'$.b[#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],\"AAA\"],\"c\":99}'}",
          "96: json_replace_test 60 {'$.b[1][#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,\"AAA\"],4],\"c\":99}'}",
          "97: json_replace_test 70 {'$.b[1][#-1]','AAA','$.b[#-1]','BBB'} \\",
          "98:      {'{\"a\":1,\"b\":[1,[2,\"AAA\"],\"BBB\"],\"c\":99}'}",
          "99: json_replace_test 80 {'$.b[#-1]','AAA','$.b[#-1]','BBB'} \\",
          "100:      {'{\"a\":1,\"b\":[1,[2,3],\"BBB\"],\"c\":99}'}",
          "102: do_catchsql_test json105-6.10 {",
          "103:   SELECT json_extract(j, '$.b[#-]') FROM t1;",
          "104: } {1 {JSON path error near '[#-]'}}",
          "105: do_catchsql_test json105-6.20 {",
          "106:   SELECT json_extract(j, '$.b[#9]') FROM t1;",
          "107: } {1 {JSON path error near '[#9]'}}",
          "108: do_catchsql_test json105-6.30 {",
          "109:   SELECT json_extract(j, '$.b[#+2]') FROM t1;",
          "110: } {1 {JSON path error near '[#+2]'}}",
          "111: do_catchsql_test json105-6.40 {",
          "112:   SELECT json_extract(j, '$.b[#-1') FROM t1;",
          "113: } {1 {JSON path error near '[#-1'}}",
          "114: do_catchsql_test json105-6.50 {",
          "115:   SELECT json_extract(j, '$.b[#-1x]') FROM t1;",
          "116: } {1 {JSON path error near '[#-1x]'}}",
          "118: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "648d62995355ddc1a578d2fc1babd283f1186fe1",
      "candidate_info": {
        "commit_hash": "648d62995355ddc1a578d2fc1babd283f1186fe1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/648d62995355ddc1a578d2fc1babd283f1186fe1",
        "files": [
          "VERSION",
          "configure",
          "ext/fts3/fts3_write.c",
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/main.c",
          "src/pcache1.c",
          "src/select.c",
          "src/sqlite.h.in",
          "src/test_devsym.c",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbeaux.c",
          "src/vdbemem.c",
          "src/window.c",
          "test/dbfuzz2.c",
          "test/permutations.test",
          "test/quote.test",
          "test/releasetest.tcl",
          "test/releasetest_data.tcl",
          "test/wapptest.tcl",
          "test/window9.test",
          "test/windowfault.test"
        ],
        "message": "Merge latest trunk changes into this branch.\n\nFossilOrigin-Name: 86ab963cc5743867e0535b78a5776e18c13835aa44bf2009f77642df8407cb3f",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/main.c||src/main.c",
          "src/pcache1.c||src/pcache1.c",
          "src/select.c||src/select.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/test_devsym.c||src/test_devsym.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbemem.c||src/vdbemem.c",
          "src/window.c||src/window.c",
          "test/dbfuzz2.c||test/dbfuzz2.c",
          "test/permutations.test||test/permutations.test",
          "test/quote.test||test/quote.test",
          "test/releasetest.tcl||test/releasetest.tcl",
          "test/releasetest_data.tcl||test/releasetest_data.tcl",
          "test/wapptest.tcl||test/wapptest.tcl",
          "test/window9.test||test/window9.test",
          "test/windowfault.test||test/windowfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4283:       pNode = &pWriter->aNodeWriter[nHeight];",
          "4284:       pNode->iBlock = pWriter->iStart + pWriter->nLeafEst*nHeight;",
          "4286:       if( rc==SQLITE_OK ){",
          "4287:         memcpy(pNode->block.a, aRoot, nRoot);",
          "4288:         pNode->block.n = nRoot;",
          "4289:       }",
          "4291:       for(i=nHeight; i>=0 && rc==SQLITE_OK; i--){",
          "",
          "[Removed Lines]",
          "4285:       blobGrowBuffer(&pNode->block, MAX(nRoot, p->nNodeSize), &rc);",
          "",
          "[Added Lines]",
          "4285:       blobGrowBuffer(&pNode->block,",
          "4286:           MAX(nRoot, p->nNodeSize)+FTS3_NODE_PADDING, &rc",
          "4287:       );",
          "4291:         memset(&pNode->block.a[nRoot], 0, FTS3_NODE_PADDING);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4305:               pNode = &pWriter->aNodeWriter[i-1];",
          "4306:               pNode->iBlock = reader.iChild;",
          "4307:               rc = sqlite3Fts3ReadBlock(p, reader.iChild, &aBlock, &nBlock, 0);",
          "4309:               if( rc==SQLITE_OK ){",
          "4310:                 memcpy(pNode->block.a, aBlock, nBlock);",
          "4311:                 pNode->block.n = nBlock;",
          "4312:               }",
          "4313:               sqlite3_free(aBlock);",
          "4314:             }",
          "",
          "[Removed Lines]",
          "4308:               blobGrowBuffer(&pNode->block, MAX(nBlock, p->nNodeSize), &rc);",
          "",
          "[Added Lines]",
          "4311:               blobGrowBuffer(&pNode->block,",
          "4312:                   MAX(nBlock, p->nNodeSize)+FTS3_NODE_PADDING, &rc",
          "4313:               );",
          "4317:                 memset(&pNode->block.a[nBlock], 0, FTS3_NODE_PADDING);",
          "",
          "---------------"
        ],
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:   #include \"sqlite3.h\"",
          "64: #endif",
          "70: #ifndef SQLITE_AMALGAMATION",
          "71: #include \"sqlite3rtree.h\"",
          "72: typedef sqlite3_int64 i64;",
          "",
          "[Removed Lines]",
          "66: #include <string.h>",
          "67: #include <assert.h>",
          "68: #include <stdio.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: typedef unsigned char u8;",
          "75: typedef unsigned short u16;",
          "76: typedef unsigned int u32;",
          "77: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: #if !defined(NDEBUG) && !defined(SQLITE_DEBUG)",
          "74: # define NDEBUG 1",
          "75: #endif",
          "76: #if defined(NDEBUG) && defined(SQLITE_DEBUG)",
          "77: # undef NDEBUG",
          "79: #endif",
          "81: #include <string.h>",
          "82: #include <stdio.h>",
          "83: #include <assert.h>",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c7920f5569022f645ec4dbfce8c228880263785c708c2c0ac065e770c438b1d9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "619: #ifdef SQLITE_DEBUG",
          "623:   int nLookaside = 0;",
          "625:     nLookaside = sqlite3LookasideUsed(db, 0);",
          "626:   }",
          "627: #endif",
          "",
          "[Removed Lines]",
          "624:   if( db && (pTable->tabFlags & TF_Ephemeral)==0 ){",
          "",
          "[Added Lines]",
          "628:   if( db && !db->mallocFailed && (pTable->tabFlags & TF_Ephemeral)==0 ){",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3073:   db->szMmap = sqlite3GlobalConfig.szMmap;",
          "3074:   db->nextPagesize = 0;",
          "3075:   db->nMaxSorterMmap = 0x7FFFFFFF;",
          "3077:                  | SQLITE_DqsDML",
          "3078: #if !defined(SQLITE_DEFAULT_AUTOMATIC_INDEX) || SQLITE_DEFAULT_AUTOMATIC_INDEX",
          "3079:                  | SQLITE_AutoIndex",
          "3080: #endif",
          "",
          "[Removed Lines]",
          "3076:   db->flags |= SQLITE_ShortColNames | SQLITE_EnableTrigger | SQLITE_CacheSpill",
          "",
          "[Added Lines]",
          "3076:   db->flags |= SQLITE_ShortColNames",
          "3077:                  | SQLITE_EnableTrigger",
          "3078:                  | SQLITE_CacheSpill",
          "3095: #if !defined(SQLITE_DQS)",
          "3096: # define SQLITE_DQS 3",
          "3097: #endif",
          "3098: #if (SQLITE_DQS&1)==1",
          "3100: #endif",
          "3101: #if (SQLITE_DQS&2)==2",
          "3102:                  | SQLITE_DqsDDL",
          "3103: #endif",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "778:     }else{",
          "779:       pGroup = &pcache1.grp;",
          "780:     }",
          "781:     if( pGroup->lru.isAnchor==0 ){",
          "782:       pGroup->lru.isAnchor = 1;",
          "783:       pGroup->lru.pLruPrev = pGroup->lru.pLruNext = &pGroup->lru;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "781:     pcache1EnterMutex(pGroup);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "787:     pCache->szExtra = szExtra;",
          "788:     pCache->szAlloc = szPage + szExtra + ROUND8(sizeof(PgHdr1));",
          "789:     pCache->bPurgeable = (bPurgeable ? 1 : 0);",
          "791:     pcache1ResizeHash(pCache);",
          "792:     if( bPurgeable ){",
          "793:       pCache->nMin = 10;",
          "",
          "[Removed Lines]",
          "790:     pcache1EnterMutex(pGroup);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2096:   if( pTab==0 ){",
          "2097:     return 0;",
          "2098:   }",
          "2102:   pTab->nTabRef = 1;",
          "2103:   pTab->zName = 0;",
          "2104:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "",
          "[Removed Lines]",
          "2101:   assert( db->lookaside.bDisable );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/test_devsym.c||src/test_devsym.c": [
          "File: src/test_devsym.c -> src/test_devsym.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "506: void devsym_unregister(){",
          "507:   sqlite3_vfs_unregister(&devsym_vfs);",
          "508:   g.pVfs = 0;",
          "509:   g.iDeviceChar = 0;",
          "510:   g.iSectorSize = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "508:   sqlite3_vfs_unregister(&writecrash_vfs);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2927: #endif",
          "2932:   pRec = pLast;",
          "2933:   do{",
          "2934:     assert( memIsValid(pRec) );",
          "",
          "[Removed Lines]",
          "2935:     serial_type = sqlite3VdbeSerialType(pRec, file_format, &len);",
          "2936:     if( pRec->flags & MEM_Zero ){",
          "2937:       if( serial_type==0 ){",
          "",
          "[Added Lines]",
          "2958:     if( pRec->flags & MEM_Null ){",
          "2959:       if( pRec->flags & MEM_Zero ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2944:         assert( pOp->p5==OPFLAG_NOCHNG_MAGIC || CORRUPT_DB );",
          "2948:       }else{",
          "2951:       }",
          "2952:     }",
          "2958:     if( pRec==pData0 ) break;",
          "2959:     pRec--;",
          "2960:   }while(1);",
          "",
          "[Removed Lines]",
          "2945:         serial_type = 10;",
          "2946:       }else if( nData ){",
          "2947:         if( sqlite3VdbeMemExpandBlob(pRec) ) goto no_mem;",
          "2949:         nZero += pRec->u.nZero;",
          "2950:         len -= pRec->u.nZero;",
          "2953:     nData += len;",
          "2954:     testcase( serial_type==127 );",
          "2955:     testcase( serial_type==128 );",
          "2956:     nHdr += serial_type<=127 ? 1 : sqlite3VarintLen(serial_type);",
          "2957:     pRec->uTemp = serial_type;",
          "",
          "[Added Lines]",
          "2967:         pRec->uTemp = 10;",
          "2968:       }else{",
          "2969:         pRec->uTemp = 0;",
          "2970:       }",
          "2971:       nHdr++;",
          "2972:     }else if( pRec->flags & (MEM_Int|MEM_IntReal) ){",
          "2974:       i64 i = pRec->u.i;",
          "2975:       u64 u;",
          "2976:       testcase( pRec->flags & MEM_Int );",
          "2977:       testcase( pRec->flags & MEM_IntReal );",
          "2978:       if( i<0 ){",
          "2979:         u = ~i;",
          "2980:       }else{",
          "2981:         u = i;",
          "2982:       }",
          "2983:       nHdr++;",
          "2984:       testcase( u==127 );               testcase( u==128 );",
          "2985:       testcase( u==32767 );             testcase( u==32768 );",
          "2986:       testcase( u==8388607 );           testcase( u==8388608 );",
          "2987:       testcase( u==2147483647 );        testcase( u==2147483648 );",
          "2988:       testcase( u==140737488355327LL ); testcase( u==140737488355328LL );",
          "2989:       if( u<=127 ){",
          "2990:         if( (i&1)==i && file_format>=4 ){",
          "2991:           pRec->uTemp = 8+(u32)u;",
          "2992:         }else{",
          "2993:           nData++;",
          "2994:           pRec->uTemp = 1;",
          "2995:         }",
          "2996:       }else if( u<=32767 ){",
          "2997:         nData += 2;",
          "2998:         pRec->uTemp = 2;",
          "2999:       }else if( u<=8388607 ){",
          "3000:         nData += 3;",
          "3001:         pRec->uTemp = 3;",
          "3002:       }else if( u<=2147483647 ){",
          "3003:         nData += 4;",
          "3004:         pRec->uTemp = 4;",
          "3005:       }else if( u<=140737488355327LL ){",
          "3006:         nData += 6;",
          "3007:         pRec->uTemp = 5;",
          "3009:         nData += 8;",
          "3010:         if( pRec->flags & MEM_IntReal ){",
          "3014:           pRec->u.r = (double)pRec->u.i;",
          "3015:           pRec->flags &= ~MEM_IntReal;",
          "3016:           pRec->flags |= MEM_Real;",
          "3017:           pRec->uTemp = 7;",
          "3018:         }else{",
          "3019:           pRec->uTemp = 6;",
          "3020:         }",
          "3021:       }",
          "3022:     }else if( pRec->flags & MEM_Real ){",
          "3023:       nHdr++;",
          "3024:       nData += 8;",
          "3025:       pRec->uTemp = 7;",
          "3026:     }else{",
          "3027:       assert( db->mallocFailed || pRec->flags&(MEM_Str|MEM_Blob) );",
          "3028:       assert( pRec->n>=0 );",
          "3029:       len = (u32)pRec->n;",
          "3030:       serial_type = (len*2) + 12 + ((pRec->flags & MEM_Str)!=0);",
          "3031:       if( pRec->flags & MEM_Zero ){",
          "3032:         serial_type += pRec->u.nZero*2;",
          "3033:         if( nData ){",
          "3034:           if( sqlite3VdbeMemExpandBlob(pRec) ) goto no_mem;",
          "3035:           len += pRec->u.nZero;",
          "3036:         }else{",
          "3037:           nZero += pRec->u.nZero;",
          "3038:         }",
          "3040:       nData += len;",
          "3041:       nHdr += sqlite3VarintLen(serial_type);",
          "3042:       pRec->uTemp = serial_type;",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "486: int sqlite3VdbeCursorRestore(VdbeCursor*);",
          "487: u32 sqlite3VdbeSerialTypeLen(u32);",
          "488: u8 sqlite3VdbeOneByteSerialTypeLen(u8);",
          "489: u32 sqlite3VdbeSerialType(Mem*, int, u32*);",
          "490: u32 sqlite3VdbeSerialPut(unsigned char*, Mem*, u32);",
          "491: u32 sqlite3VdbeSerialGet(const unsigned char*, u32, Mem*);",
          "492: void sqlite3VdbeDeleteAuxData(sqlite3*, AuxData**, int, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "489: #ifdef SQLITE_ENABLE_STAT3_OR_STAT4",
          "491: #endif",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3438: u32 sqlite3VdbeSerialType(Mem *pMem, int file_format, u32 *pLen){",
          "3439:   int flags = pMem->flags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3433: #ifdef SQLITE_ENABLE_STAT3_OR_STAT4",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "703:   double r2 = (double)i;",
          "704:   return r1==0.0",
          "705:       || (memcmp(&r1, &r2, sizeof(r1))==0",
          "707: }",
          "",
          "[Removed Lines]",
          "706:           && i >= -2251799813685248 && i < 2251799813685248);",
          "",
          "[Added Lines]",
          "706:           && i >= -2251799813685248LL && i < 2251799813685248LL);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "736:   Window *pWin;",
          "737:   SrcList *pSrc;",
          "738:   ExprList *pSub;",
          "740: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739:   Table *pTab;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "796:         pExpr->op = TK_COLUMN;",
          "797:         pExpr->iColumn = p->pSub->nExpr-1;",
          "798:         pExpr->iTable = p->pWin->iEphCsr;",
          "799:       }",
          "801:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "800:         pExpr->y.pTab = p->pTab;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "839:   Window *pWin,",
          "840:   SrcList *pSrc,",
          "843: ){",
          "844:   Walker sWalker;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "844:   Table *pTab,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "850:   sRewrite.pSub = *ppSub;",
          "851:   sRewrite.pWin = pWin;",
          "852:   sRewrite.pSrc = pSrc;",
          "854:   sWalker.pParse = pParse;",
          "855:   sWalker.xExprCallback = selectWindowRewriteExprCb;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "856:   sRewrite.pTab = pTab;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "913:     p->pSrc = 0;",
          "914:     p->pWhere = 0;",
          "915:     p->pGroupBy = 0;",
          "916:     p->pHaving = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916:     Table *pTab;",
          "918:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
          "919:     if( pTab==0 ){",
          "920:       return SQLITE_NOMEM;",
          "921:     }",
          "927:     p->selFlags &= ~SF_Aggregate;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "933:     pMWin->iEphCsr = pParse->nTab++;",
          "934:     pParse->nTab += 3;",
          "938:     pMWin->nBufferCol = (pSublist ? pSublist->nExpr : 0);",
          "",
          "[Removed Lines]",
          "936:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pEList, &pSublist);",
          "937:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pOrderBy, &pSublist);",
          "",
          "[Added Lines]",
          "947:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pEList, pTab, &pSublist);",
          "948:     selectWindowRewriteEList(pParse, pMWin, pSrc, p->pOrderBy, pTab, &pSublist);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "976:     );",
          "977:     p->pSrc = sqlite3SrcListAppend(pParse, 0, 0, 0);",
          "978:     if( p->pSrc ){",
          "979:       p->pSrc->a[0].pSelect = pSub;",
          "980:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "982:         rc = SQLITE_NOMEM;",
          "983:       }else{",
          "987:       }",
          "989:       sqlite3VdbeAddOp2(v, OP_OpenEphemeral, pMWin->iEphCsr, pSublist->nExpr);",
          "990:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+1, pMWin->iEphCsr);",
          "991:       sqlite3VdbeAddOp2(v, OP_OpenDup, pMWin->iEphCsr+2, pMWin->iEphCsr);",
          "",
          "[Removed Lines]",
          "981:       if( sqlite3ExpandSubquery(pParse, &p->pSrc->a[0]) ){",
          "984:         pSub->selFlags |= SF_Expanded;",
          "985:         p->selFlags &= ~SF_Aggregate;",
          "986:         sqlite3SelectPrep(pParse, pSub, 0);",
          "",
          "[Added Lines]",
          "990:       Table *pTab2;",
          "993:       pSub->selFlags |= SF_Expanded;",
          "994:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub);",
          "995:       if( pTab2==0 ){",
          "998:         memcpy(pTab, pTab2, sizeof(Table));",
          "999:         pTab->tabFlags |= TF_Ephemeral;",
          "1000:         p->pSrc->a[0].pTab = pTab;",
          "1001:         pTab = pTab2;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "994:       sqlite3SelectDelete(db, pSub);",
          "995:     }",
          "996:     if( db->mallocFailed ) rc = SQLITE_NOMEM;",
          "997:   }",
          "999:   return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1011:     sqlite3DbFree(db, pTab);",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "377:       free(pIn);",
          "378:     }",
          "379:   }",
          "380:   if( eVerbosity>0 ){",
          "381:     struct rusage x;",
          "382:     printf(\"SQLite %s\\n\", sqlite3_sourceid());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "380: #ifdef RUSAGE_SELF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "385:       printf(\"Maximum RSS = %ld KB\\n\", x.ru_maxrss);",
          "386:     }",
          "387:   }",
          "388:   return 0;",
          "389: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "389: #endif",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "966:   async4.test bigfile.test backcompat.test e_wal* fstat.test mmap2.test",
          "967:   pager1.test syscall.test tkt3457.test *malloc* mmap* multiplex* nolock*",
          "968:   pager2.test *fault* rowal* snapshot* superlock* symlink.test",
          "970: }]",
          "972: if {[info commands register_demovfs] != \"\"} {",
          "",
          "[Removed Lines]",
          "969:   delete_db.test shmlock.test",
          "",
          "[Added Lines]",
          "969:   delete_db.test shmlock.test chunksize.test",
          "",
          "---------------"
        ],
        "test/quote.test||test/quote.test": [
          "File: test/quote.test -> test/quote.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "92: # SQLite can load such a schema from disk.",
          "93: #",
          "94: reset_db",
          "95: do_execsql_test 2.0 {",
          "96:   CREATE TABLE t1(x, y, z);",
          "97: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: sqlite3_db_config db SQLITE_DBCONFIG_DQS_DDL 0",
          "96: sqlite3_db_config db SQLITE_DBCONFIG_DQS_DML 1",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:     \"User-Auth\"               tcltest",
          "282:     \"Update-Delete-Limit\"     test",
          "283:     \"Extra-Robustness\"        test",
          "285:     \"No-lookaside\"            test",
          "286:     \"Devkit\"                  test",
          "287:     \"Apple\"                   test",
          "",
          "[Removed Lines]",
          "284:     \"Device-Two\"              test",
          "",
          "[Added Lines]",
          "284:     \"Device-Two\"              \"threadtest test\"",
          "",
          "---------------"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "246:     \"User-Auth\"               tcltest",
          "247:     \"Update-Delete-Limit\"     test",
          "248:     \"Extra-Robustness\"        test",
          "250:     \"No-lookaside\"            test",
          "251:     \"Devkit\"                  test",
          "252:     \"Apple\"                   test",
          "",
          "[Removed Lines]",
          "249:     \"Device-Two\"              test",
          "",
          "[Added Lines]",
          "249:     \"Device-Two\"              \"threadtest test\"",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   wapptest_output $msg",
          "290:   if {[info exists G(test.$name.errmsg)] && $G(test.$name.errmsg)!=\"\"} {",
          "292:   }",
          "293: }",
          "",
          "[Removed Lines]",
          "291:     wapptest_output \"    $G(test.$config.errmsg)\"",
          "",
          "[Added Lines]",
          "291:     wapptest_output \"    $G(test.$name.errmsg)\"",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 June 8",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix window9",
          "18: ifcapable !windowfunc {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: do_execsql_test 1.0 {",
          "24:   CREATE TABLE fruits(",
          "25:      name TEXT COLLATE NOCASE,",
          "26:      color TEXT COLLATE NOCASE",
          "27:   );",
          "28: }",
          "30: do_execsql_test 1.1 {",
          "31:   INSERT INTO fruits (name, color) VALUES ('apple', 'RED');",
          "32:   INSERT INTO fruits (name, color) VALUES ('APPLE', 'yellow');",
          "33:   INSERT INTO fruits (name, color) VALUES ('pear', 'YELLOW');",
          "34:   INSERT INTO fruits (name, color) VALUES ('PEAR', 'green');",
          "35: }",
          "37: do_execsql_test 1.2 {",
          "38:   SELECT name, color, dense_rank() OVER (ORDER BY name) FROM fruits;",
          "39: } {",
          "40:   apple RED    1",
          "41:   APPLE yellow 1",
          "42:   pear  YELLOW 2",
          "43:   PEAR  green  2",
          "44: }",
          "46: do_execsql_test 1.3 {",
          "47:   SELECT name, color,",
          "48:     dense_rank() OVER (PARTITION BY name ORDER BY color)",
          "49:   FROM fruits;",
          "50: } {",
          "51:   apple RED    1",
          "52:   APPLE yellow 2",
          "53:   PEAR green   1",
          "54:   pear YELLOW  2",
          "55: }",
          "57: do_execsql_test 1.4 {",
          "58:   SELECT name, color,",
          "59:     dense_rank() OVER (ORDER BY name),",
          "60:     dense_rank() OVER (PARTITION BY name ORDER BY color)",
          "61:   FROM fruits;",
          "62: } {",
          "63:   apple RED    1 1",
          "64:   APPLE yellow 1 2",
          "65:   PEAR  green  2 1",
          "66:   pear  YELLOW 2 2",
          "67: }",
          "69: do_execsql_test 1.5 {",
          "70:   SELECT name, color,",
          "71:     dense_rank() OVER (ORDER BY name),",
          "72:     dense_rank() OVER (PARTITION BY name ORDER BY color)",
          "73:   FROM fruits ORDER BY color;",
          "74: } {",
          "75:   PEAR  green  2 1",
          "76:   apple RED    1 1",
          "77:   APPLE yellow 1 2",
          "78:   pear  YELLOW 2 2",
          "79: }",
          "81: do_execsql_test 2.0 {",
          "82:   CREATE TABLE t1(a BLOB, b INTEGER, c COLLATE nocase);",
          "83:   INSERT INTO t1 VALUES(1, 2, 'abc');",
          "84:   INSERT INTO t1 VALUES(3, 4, 'ABC');",
          "85: }",
          "87: do_execsql_test 2.1.1 {",
          "88:   SELECT c=='Abc' FROM t1",
          "89: } {1     1}",
          "90: do_execsql_test 2.1.2 {",
          "91:   SELECT c=='Abc', rank() OVER (ORDER BY b) FROM t1",
          "92: } {1 1   1 2}",
          "94: do_execsql_test 2.2.1 {",
          "95:   SELECT b=='2' FROM t1",
          "96: } {1     0}",
          "97: do_execsql_test 2.2.2 {",
          "98:   SELECT b=='2', rank() OVER (ORDER BY a) FROM t1",
          "99: } {1 1   0 2}",
          "101: finish_test",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:   return $ret",
          "210: }",
          "212: do_faultsim_test 9 -end 25 -faults tmpread -body {",
          "213:   execsql {",
          "214:     SELECT sum(y) OVER win FROM t",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212: set L [db eval {SELECT 0.0 FROM t}]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     )",
          "218:   }",
          "219: } -test {",
          "221: }",
          "223: catch {db close}",
          "",
          "[Removed Lines]",
          "220:   faultsim_test_result {0 {}}",
          "",
          "[Added Lines]",
          "221:   faultsim_test_result [list 0 $::L]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4102deb962c3d4586fed5b371aa4bf4f8e916ffc",
      "candidate_info": {
        "commit_hash": "4102deb962c3d4586fed5b371aa4bf4f8e916ffc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4102deb962c3d4586fed5b371aa4bf4f8e916ffc",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/shell.c.in",
          "src/tokenize.c",
          "src/update.c",
          "test/fts4merge.test",
          "test/insert.test",
          "test/normalize.test"
        ],
        "message": "Merge trunk enhancements into the generated-columns branch.\n\nFossilOrigin-Name: 85bc4524d76999080faa4474e8880d2b6a2ac3a7f6a76239af4de1a42f8138c8",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/shell.c.in||src/shell.c.in",
          "src/tokenize.c||src/tokenize.c",
          "src/update.c||src/update.c",
          "test/fts4merge.test||test/fts4merge.test",
          "test/insert.test||test/insert.test",
          "test/normalize.test||test/normalize.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4950:     }",
          "4951:     if( SQLITE_OK==rc && pCsr->nSegment==nSeg",
          "4952:      && SQLITE_OK==(rc = sqlite3Fts3SegReaderStart(p, pCsr, pFilter))",
          "4954:     ){",
          "4955:       if( bUseHint && iIdx>0 ){",
          "4956:         const char *zKey = pCsr->zTerm;",
          "4957:         int nKey = pCsr->nTerm;",
          "",
          "[Removed Lines]",
          "4953:      && SQLITE_ROW==(rc = sqlite3Fts3SegReaderStep(p, pCsr))",
          "",
          "[Added Lines]",
          "4954:       int bEmpty = 0;",
          "4955:       rc = sqlite3Fts3SegReaderStep(p, pCsr);",
          "4956:       if( rc==SQLITE_OK ){",
          "4957:         bEmpty = 1;",
          "4958:       }else if( rc!=SQLITE_ROW ){",
          "4959:         sqlite3Fts3SegReaderFinish(pCsr);",
          "4960:         break;",
          "4961:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4963:       if( rc==SQLITE_OK && pWriter->nLeafEst ){",
          "4964:         fts3LogMerge(nSeg, iAbsLevel);",
          "4972:         if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "4965:         do {",
          "4966:           rc = fts3IncrmergeAppend(p, pWriter, pCsr);",
          "4967:           if( rc==SQLITE_OK ) rc = sqlite3Fts3SegReaderStep(p, pCsr);",
          "4968:           if( pWriter->nWork>=nRem && rc==SQLITE_ROW ) rc = SQLITE_OK;",
          "4969:         }while( rc==SQLITE_ROW );",
          "",
          "[Added Lines]",
          "4972:         if( bEmpty==0 ){",
          "4973:           do {",
          "4974:             rc = fts3IncrmergeAppend(p, pWriter, pCsr);",
          "4975:             if( rc==SQLITE_OK ) rc = sqlite3Fts3SegReaderStep(p, pCsr);",
          "4976:             if( pWriter->nWork>=nRem && rc==SQLITE_ROW ) rc = SQLITE_OK;",
          "4977:           }while( rc==SQLITE_ROW );",
          "4978:         }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9f409649ec4282a47f0a8b079b419f1922e0c24779b297f477ced168d5b7910d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1680:           sqlite3MultiWrite(pParse);",
          "1681:           sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1682:                                    regNewData, 1, 0, OE_Replace, 1, -1);",
          "1683:         }else{",
          "1684: #ifdef SQLITE_ENABLE_PREUPDATE_HOOK",
          "1685:           assert( HasRowid(pTab) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1683:           sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, addrRowidOk, regNewData);",
          "1684:           sqlite3RowidConstraint(pParse, OE_Abort, pTab);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1934:       }",
          "1935:       default: {",
          "1936:         Trigger *pTrigger = 0;",
          "1937:         assert( onError==OE_Replace );",
          "1938:         if( db->flags&SQLITE_RecTriggers ){",
          "1939:           pTrigger = sqlite3TriggersExist(pParse, pTab, TK_DELETE, 0, 0);",
          "1940:         }",
          "1941:         if( pTrigger || sqlite3FkRequired(pParse, pTab, 0, 0) ){",
          "1942:           sqlite3MultiWrite(pParse);",
          "1943:         }",
          "1944:         sqlite3GenerateRowDelete(pParse, pTab, pTrigger, iDataCur, iIdxCur,",
          "1945:             regR, nPkField, 0, OE_Replace,",
          "1946:             (pIdx==pPk ? ONEPASS_SINGLE : ONEPASS_OFF), iThisCur);",
          "1947:         seenReplace = 1;",
          "1948:         break;",
          "1949:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1939:         int bRetryConstraintCheck = 0;",
          "1946:           bRetryConstraintCheck = 1;",
          "1951:         if( bRetryConstraintCheck ){",
          "1952:           sqlite3VdbeAddOp4Int(v, OP_NoConflict, iThisCur, addrUniqueOk,",
          "1953:                                regIdx, pIdx->nKeyCol); VdbeCoverage(v);",
          "1954:           sqlite3UniqueConstraint(pParse, OE_Abort, pIdx);",
          "1955:         }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7770:       sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->db, \"main\", 0, 1);",
          "7771:       goto meta_command_exit;",
          "7772:     }",
          "7775:     sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "7776:     sqlite3_free(zSql);",
          "7777:     if( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7778:       tnum = sqlite3_column_int(pStmt, 0);",
          "7779:     }",
          "7780:     sqlite3_finalize(pStmt);",
          "7786:     zSql = sqlite3_mprintf(\"PRAGMA index_xinfo='%q'\", azArg[1]);",
          "7787:     rc = sqlite3_prepare_v2(p->db, zSql, -1, &pStmt, 0);",
          "7788:     sqlite3_free(zSql);",
          "",
          "[Removed Lines]",
          "7773:     zSql = sqlite3_mprintf(\"SELECT rootpage FROM sqlite_master\"",
          "7774:                            \" WHERE name='%q' AND type='index'\", azArg[1]);",
          "7781:     if( tnum==0 ){",
          "7782:       utf8_printf(stderr, \"no such index: \\\"%s\\\"\\n\", azArg[1]);",
          "7783:       rc = 1;",
          "7784:       goto meta_command_exit;",
          "7785:     }",
          "",
          "[Added Lines]",
          "7782:     zSql = sqlite3_mprintf(",
          "7783:       \"SELECT rootpage, 0 FROM sqlite_master\"",
          "7784:       \" WHERE name='%q' AND type='index'\"",
          "7785:       \"UNION ALL \"",
          "7786:       \"SELECT rootpage, 1 FROM sqlite_master\"",
          "7787:       \" WHERE name='%q' AND type='table'\"",
          "7788:       \"   AND sql LIKE '%%without%%rowid%%'\",",
          "7789:       azArg[1], azArg[1]",
          "7790:     );",
          "7795:       isWO = sqlite3_column_int(pStmt, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7799:           zCol = zLabel;",
          "7800:         }",
          "7801:       }",
          "7802:       if( zCollist==0 ){",
          "7803:         zCollist = sqlite3_mprintf(\"\\\"%w\\\"\", zCol);",
          "7804:       }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7814:       if( isWO && lenPK==0 && sqlite3_column_int(pStmt,5)==0 && zCollist ){",
          "7815:         lenPK = (int)strlen(zCollist);",
          "7816:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7806:       }",
          "7807:     }",
          "7808:     sqlite3_finalize(pStmt);",
          "7809:     zSql = sqlite3_mprintf(",
          "7812:     sqlite3_free(zCollist);",
          "7813:     rc = sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->db, \"main\", 1, tnum);",
          "7814:     if( rc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "7810:           \"CREATE TABLE \\\"%w\\\"(%s,PRIMARY KEY(%s))WITHOUT ROWID\",",
          "7811:           azArg[2], zCollist, zCollist);",
          "",
          "[Added Lines]",
          "7824:     if( i==0 || tnum==0 ){",
          "7825:       utf8_printf(stderr, \"no such index: \\\"%s\\\"\\n\", azArg[1]);",
          "7826:       rc = 1;",
          "7827:       sqlite3_free(zCollist);",
          "7828:       goto meta_command_exit;",
          "7829:     }",
          "7830:     if( lenPK==0 ) lenPK = 100000;",
          "7832:           \"CREATE TABLE \\\"%w\\\"(%s,PRIMARY KEY(%.*s))WITHOUT ROWID\",",
          "7833:           azArg[2], zCollist, lenPK, zCollist);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7819:       }else{",
          "7820:         utf8_printf(stdout, \"%s;\\n\", zSql);",
          "7821:         raw_printf(stdout,",
          "7823:         );",
          "7824:       }",
          "7825:     }else{",
          "",
          "[Removed Lines]",
          "7822:            \"WARNING: writing to an imposter table will corrupt the index!\\n\"",
          "",
          "[Added Lines]",
          "7844:           \"WARNING: writing to an imposter table will corrupt the \\\"%s\\\" %s!\\n\",",
          "7845:           azArg[1], isWO ? \"table\" : \"index\"",
          "",
          "---------------"
        ],
        "src/tokenize.c||src/tokenize.c": [
          "File: src/tokenize.c -> src/tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "801:       }",
          "802:       case TK_RP: {",
          "803:         if( iStartIN>0 && nParen==nParenAtIN ){",
          "805:           pStr->nChar = iStartIN+1;",
          "806:           sqlite3_str_append(pStr, \"?,?,?\", 5);",
          "807:           iStartIN = 0;",
          "",
          "[Removed Lines]",
          "804:           assert( pStr->nChar>=iStartIN );",
          "",
          "[Added Lines]",
          "804:           assert( pStr->nChar>=(u32)iStartIN );",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   sNC.uNC.pUpsert = pUpsert;",
          "290:   sNC.ncFlags = NC_UUpsert;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:   v = sqlite3GetVdbe(pParse);",
          "294:   if( v==0 ) goto update_cleanup;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "394:     memset(aToOpen, 1, nIdx+1);",
          "395:   }",
          "400:   if( pParse->nested==0 ) sqlite3VdbeCountChanges(v);",
          "401:   sqlite3BeginWriteOperation(pParse, pTrigger || hasFK, iDb);",
          "",
          "[Removed Lines]",
          "398:   v = sqlite3GetVdbe(pParse);",
          "399:   if( v==0 ) goto update_cleanup;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4merge.test||test/fts4merge.test": [
          "File: test/fts4merge.test -> test/fts4merge.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:     execsql { INSERT INTO t1(t1) VALUES('merge=200,10') }",
          "327:     expr { ([db total_changes] - $x)>1 }",
          "328:   } {0}",
          "330: }",
          "332: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "329: }",
          "331: #-------------------------------------------------------------------------",
          "332: # Test cases 8.* - ticket [bf1aab89].",
          "333: #",
          "334: set testprefix fts4merge",
          "335: reset_db",
          "336: do_execsql_test 8.0 {",
          "337:   CREATE VIRTUAL TABLE t1 USING fts4(a, order=DESC);",
          "338:   INSERT INTO t1(a) VALUES (0);",
          "339:   INSERT INTO t1(a) VALUES (0);",
          "340:   UPDATE t1 SET a = NULL;",
          "341: }",
          "343: do_execsql_test 8.1 {",
          "344:   INSERT INTO t1(t1) VALUES('merge=1,4');",
          "",
          "---------------"
        ],
        "test/insert.test||test/insert.test": [
          "File: test/insert.test -> test/insert.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "",
          "[Removed Lines]",
          "1: # 2001 September 15",
          "",
          "[Added Lines]",
          "1: # 2001-09-15",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the INSERT statement.",
          "13: #",
          "16: set testdir [file dirname $argv0]",
          "17: source $testdir/tester.tcl",
          "",
          "[Removed Lines]",
          "14: # $Id: insert.test,v 1.31 2007/04/05 11:25:59 drh Exp $",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "458:   SELECT x FROM t14;",
          "459: } {1}",
          "463: # 2019-08-12.",
          "464: #",
          "",
          "[Removed Lines]",
          "461: integrity_check insert-99.0",
          "",
          "[Added Lines]",
          "460: integrity_check insert-14.2",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "475:   SELECT a, length(b) FROM t1;",
          "476: } {4 33000}",
          "479: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "477: # 2019-10-16",
          "478: # ticket https://www.sqlite.org/src/info/a8a4847a2d96f5de",
          "479: # On a REPLACE INTO, if an AFTER trigger adds back the conflicting",
          "480: # row, you can end up with the wrong number of rows in an index.",
          "481: #",
          "482: db close",
          "483: sqlite3 db :memory:",
          "484: do_catchsql_test insert-16.1 {",
          "485:   PRAGMA recursive_triggers = true;",
          "486:   CREATE TABLE t0(c0,c1);",
          "487:   CREATE UNIQUE INDEX i0 ON t0(c0);",
          "488:   INSERT INTO t0(c0,c1) VALUES(123,1);",
          "489:   CREATE TRIGGER tr0 AFTER DELETE ON t0",
          "490:   BEGIN",
          "491:     INSERT INTO t0 VALUES(123,2);",
          "492:   END;",
          "493:   REPLACE INTO t0(c0,c1) VALUES(123,3);",
          "494: } {1 {UNIQUE constraint failed: t0.c0}}",
          "495: do_execsql_test insert-16.2 {",
          "496:   SELECT * FROM t0;",
          "497: } {123 1}",
          "498: integrity_check insert-16.3",
          "499: do_catchsql_test insert-16.4 {",
          "500:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b);",
          "501:   CREATE INDEX t1b ON t1(b);",
          "502:   INSERT INTO t1 VALUES(1, 'one');",
          "503:   CREATE TRIGGER tr3 AFTER DELETE ON t1 BEGIN",
          "504:     INSERT INTO t1 VALUES(1, 'three');",
          "505:   END;",
          "506:   REPLACE INTO t1 VALUES(1, 'two');",
          "507: } {1 {UNIQUE constraint failed: t1.a}}",
          "508: integrity_check insert-16.5",
          "509: do_catchsql_test insert-16.6 {",
          "510:   PRAGMA foreign_keys = 1;",
          "511:   CREATE TABLE p1(a, b UNIQUE);",
          "512:   CREATE TABLE c1(c, d REFERENCES p1(b) ON DELETE CASCADE);",
          "513:   CREATE TRIGGER tr6 AFTER DELETE ON c1 BEGIN",
          "514:     INSERT INTO p1 VALUES(4, 1);",
          "515:   END;",
          "516:   INSERT INTO p1 VALUES(1, 1);",
          "517:   INSERT INTO c1 VALUES(2, 1);",
          "518:   REPLACE INTO p1 VALUES(3, 1);",
          "519: } {1 {UNIQUE constraint failed: p1.b}}",
          "520: integrity_check insert-16.7",
          "",
          "---------------"
        ],
        "test/normalize.test||test/normalize.test": [
          "File: test/normalize.test -> test/normalize.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:   {SELECT x FROM t1 WHERE x IN ([x] IS NOT NULL, NULL, 1, 'a', \"b\", x'00');}",
          "348:   0x2",
          "349:   {0 {SELECT x FROM t1 WHERE x IN(x IS NOT NULL,?,?,?,b,?);}}",
          "350: } {",
          "351:   do_test $tnum {",
          "352:     set code [catch {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:   800",
          "352:   {ATTACH \"normalize800.db\" AS somefile;}",
          "353:   0x2",
          "354:   {0 {ATTACH\"normalize800.db\"AS somefile;}}",
          "356:   810",
          "357:   {ATTACH DATABASE \"normalize810.db\" AS somefile;}",
          "358:   0x2",
          "359:   {0 {ATTACH DATABASE\"normalize810.db\"AS somefile;}}",
          "361:   900",
          "362:   {INSERT INTO t1 (x) VALUES(\"sl1\"), (1), (\"sl2\"), ('i');}",
          "363:   0x2",
          "364:   {0 {INSERT INTO t1(x)VALUES(?),(?),(?),(?);}}",
          "366:   910",
          "367:   {UPDATE t1 SET x = \"sl1\" WHERE x IN (1, \"sl2\", 'i');}",
          "368:   0x2",
          "369:   {0 {UPDATE t1 SET x=?WHERE x IN(?,?,?);}}",
          "371:   920",
          "372:   {UPDATE t1 SET x = \"y\" WHERE x IN (1, \"sl1\", 'i');}",
          "373:   0x2",
          "374:   {0 {UPDATE t1 SET x=y WHERE x IN(?,?,?);}}",
          "376:   930",
          "377:   {DELETE FROM t1 WHERE x IN (1, \"sl1\", 'i');}",
          "378:   0x2",
          "379:   {0 {DELETE FROM t1 WHERE x IN(?,?,?);}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97c8cb3ed8adb0867db29dbc24b2df9d35fb1d88",
      "candidate_info": {
        "commit_hash": "97c8cb3ed8adb0867db29dbc24b2df9d35fb1d88",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/97c8cb3ed8adb0867db29dbc24b2df9d35fb1d88",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/vdbe.c",
          "test/window1.test"
        ],
        "message": "Ensure that when a new cursor is opened by OP_OpenDup, any existing cursor with the same id opened by a previous OP_OpenDup is closed first.\n\nFossilOrigin-Name: 5c188361a91407805c0feb4bf6d3214522ce3e55013efcf63a4613ecd416bcbc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/vdbe.c||src/vdbe.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f7e6cdc5625664f449d0edbe39af2d45910c4137bfd856ae1f770dd826c138ff",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4416:     sqlite3_free(pCur->aOverflow);",
          "4417:     sqlite3_free(pCur->pKey);",
          "4418:     sqlite3BtreeLeave(pBtree);",
          "4419:   }",
          "4420:   return SQLITE_OK;",
          "4421: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4419:     pCur->pBtree = 0;",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:   assert( iCur>=0 && iCur<p->nCursor );",
          "243:     sqlite3VdbeFreeCursor(p, p->apCsr[iCur]);",
          "244:     p->apCsr[iCur] = 0;",
          "245:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "247:     p->apCsr[iCur]->isEphemeral = 0;",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "665:   ) FROM t1;",
          "666: } {a 3 b 3 c 3}",
          "668: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "668: do_execsql_test 15.2 {",
          "669:   SELECT(",
          "670:     WITH c AS(",
          "671:       VALUES(1)",
          "672:     ) SELECT '' FROM c,c",
          "673:   ) x WHERE x+x;",
          "674: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f78d0f426c2ce84904823a087e3950e343c8e6ec",
      "candidate_info": {
        "commit_hash": "f78d0f426c2ce84904823a087e3950e343c8e6ec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f78d0f426c2ce84904823a087e3950e343c8e6ec",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Take collating sequence into account when removing redundant columns from indexes on WITHOUT ROWID tables.  This is the first proof-of-concept fix for ticket [3182d3879020ef3]. More testing needed.\n\nFossilOrigin-Name: b34fa5bff40d3d364bd8c80e7de55c606ef3caac47b14b5265ebcb38857eb85e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 50fe48458942fa7a6bcc76316c6321f95b23dc34f2f8e0a483826483b2fb16f6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1726:   pIdx->szIdxRow = sqlite3LogEst(wIndex*4);",
          "1727: }",
          "1731: static int hasColumn(const i16 *aiCol, int nCol, int x){",
          "1733:   return 0;",
          "1734: }",
          "",
          "[Removed Lines]",
          "1732:   while( nCol-- > 0 ) if( x==*(aiCol++) ) return 1;",
          "",
          "[Added Lines]",
          "1734:   while( nCol-- > 0 ){",
          "1735:     assert( aiCol[0]>=0 );",
          "1736:     if( x==*(aiCol++) ){",
          "1737:       return 1;",
          "1738:     }",
          "1739:   }",
          "1740:   return 0;",
          "1741: }",
          "1754: static int isDupColumn(Index *pIdx1, int nKey, Index *pIdx2, int iCol){",
          "1755:   int i, j;",
          "1756:   assert( nKey<=pIdx1->nColumn );",
          "1757:   assert( iCol<MAX(pIdx2->nColumn,pIdx2->nKeyCol) );",
          "1758:   j = pIdx2->aiColumn[iCol];",
          "1759:   testcase( j==XN_EXPR );",
          "1760:   assert( j!=XN_ROWID );",
          "1761:   for(i=0; i<nKey; i++){",
          "1762:     assert( pIdx1->aiColumn[i]>=0 || j>=0 );",
          "1763:     if( pIdx1->aiColumn[i]==j",
          "1764:      && sqlite3StrICmp(pIdx1->azColl[i],pIdx2->azColl[iCol])==0",
          "1765:     ){",
          "1766:       return 1;",
          "1767:     }",
          "1768:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1837:     for(i=j=1; i<pPk->nKeyCol; i++){",
          "1839:         pPk->nColumn--;",
          "1840:       }else{",
          "1841:         pPk->aiColumn[j++] = pPk->aiColumn[i];",
          "1842:       }",
          "1843:     }",
          "",
          "[Removed Lines]",
          "1838:       if( hasColumn(pPk->aiColumn, j, pPk->aiColumn[i]) ){",
          "",
          "[Added Lines]",
          "1874:       if( isDupColumn(pPk, j, pPk, i) ){",
          "1877:         testcase( hasColumn(pPk->aiColumn, j, pPk->aiColumn[i]) );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1867:     int n;",
          "1868:     if( IsPrimaryKeyIndex(pIdx) ) continue;",
          "1869:     for(i=n=0; i<nPk; i++){",
          "1871:     }",
          "1872:     if( n==0 ){",
          "",
          "[Removed Lines]",
          "1870:       if( !hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) ) n++;",
          "",
          "[Added Lines]",
          "1907:       if( !isDupColumn(pIdx, pIdx->nKeyCol, pPk, i) ){",
          "1908:         testcase( hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) );",
          "1909:         n++;",
          "1910:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1876:     }",
          "1877:     if( resizeIndexObject(db, pIdx, pIdx->nKeyCol+n) ) return;",
          "1878:     for(i=0, j=pIdx->nKeyCol; i<nPk; i++){",
          "1880:         pIdx->aiColumn[j] = pPk->aiColumn[i];",
          "1881:         pIdx->azColl[j] = pPk->azColl[i];",
          "1882:         j++;",
          "",
          "[Removed Lines]",
          "1879:       if( !hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) ){",
          "",
          "[Added Lines]",
          "1919:       if( !isDupColumn(pIdx, pIdx->nKeyCol, pPk, i) ){",
          "1920:         testcase( hasColumn(pIdx->aiColumn, pIdx->nKeyCol, pPk->aiColumn[i]) );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3392:     for(j=0; j<pPk->nKeyCol; j++){",
          "3393:       int x = pPk->aiColumn[j];",
          "3394:       assert( x>=0 );",
          "3396:         pIndex->nColumn--;",
          "3397:       }else{",
          "3398:         pIndex->aiColumn[i] = x;",
          "3399:         pIndex->azColl[i] = pPk->azColl[j];",
          "3400:         pIndex->aSortOrder[i] = pPk->aSortOrder[j];",
          "",
          "[Removed Lines]",
          "3395:       if( hasColumn(pIndex->aiColumn, pIndex->nKeyCol, x) ){",
          "",
          "[Added Lines]",
          "3436:       if( isDupColumn(pIndex, pIndex->nKeyCol, pPk, j) ){",
          "3439:         testcase( hasColumn(pIndex->aiColumn,pIndex->nKeyCol,x) );",
          "",
          "---------------"
        ]
      }
    }
  ]
}