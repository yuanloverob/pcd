{
  "cve_id": "CVE-2017-7539",
  "cve_desc": "An assertion-failure flaw was found in Qemu before 2.10.1, in the Network Block Device (NBD) server's initial connection negotiation, where the I/O coroutine was undefined. This could crash the qemu-nbd server if a client sent unexpected data during connection negotiation. A remote user or process could use this flaw to crash the qemu-nbd server resulting in denial of service.",
  "repo": "qemu/qemu",
  "patch_hash": "2b0bbc4f8809c972bad134bc1a2570dbb01dea0b",
  "patch_info": {
    "commit_hash": "2b0bbc4f8809c972bad134bc1a2570dbb01dea0b",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/2b0bbc4f8809c972bad134bc1a2570dbb01dea0b",
    "files": [
      "nbd/server.c"
    ],
    "message": "nbd/server: get rid of nbd_negotiate_read and friends\n\nFunctions nbd_negotiate_{read,write,drop_sync} were introduced in\n1a6245a5b, when nbd_rwv (was nbd_wr_sync) was working through\nqemu_co_sendv_recvv (the path is nbd_wr_sync -> qemu_co_{recv/send} ->\nqemu_co_send_recv -> qemu_co_sendv_recvv), which just yields, without\nsetting any handlers. But starting from ff82911cd nbd_rwv (was\nnbd_wr_syncv) works through qio_channel_yield() which sets handlers, so\nwatchers are redundant in nbd_negotiate_{read,write,drop_sync}, then,\nlet's just use nbd_{read,write,drop} functions.\n\nFunctions nbd_{read,write,drop} has errp parameter, which is unused in\nthis patch. This will be fixed later.\n\nSigned-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>\nReviewed-by: Eric Blake <eblake@redhat.com>\nMessage-Id: <20170602150150.258222-4-vsementsov@virtuozzo.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
    "before_after_code_files": [
      "nbd/server.c||nbd/server.c"
    ]
  },
  "patch_diff": {
    "nbd/server.c||nbd/server.c": [
      "File: nbd/server.c -> nbd/server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "105: static void nbd_client_receive_next_request(NBDClient *client);",
      "172:    Server         Client",
      "",
      "[Removed Lines]",
      "107: static gboolean nbd_negotiate_continue(QIOChannel *ioc,",
      "108:                                        GIOCondition condition,",
      "109:                                        void *opaque)",
      "110: {",
      "111:     qemu_coroutine_enter(opaque);",
      "112:     return TRUE;",
      "113: }",
      "115: static int nbd_negotiate_read(QIOChannel *ioc, void *buffer, size_t size)",
      "116: {",
      "117:     ssize_t ret;",
      "118:     guint watch;",
      "120:     assert(qemu_in_coroutine());",
      "122:     watch = qio_channel_add_watch(ioc,",
      "123:                                   G_IO_IN,",
      "124:                                   nbd_negotiate_continue,",
      "125:                                   qemu_coroutine_self(),",
      "126:                                   NULL);",
      "127:     ret = nbd_read(ioc, buffer, size, NULL);",
      "128:     g_source_remove(watch);",
      "129:     return ret;",
      "131: }",
      "133: static int nbd_negotiate_write(QIOChannel *ioc, const void *buffer, size_t size)",
      "134: {",
      "135:     ssize_t ret;",
      "136:     guint watch;",
      "138:     assert(qemu_in_coroutine());",
      "140:     watch = qio_channel_add_watch(ioc,",
      "141:                                   G_IO_OUT,",
      "142:                                   nbd_negotiate_continue,",
      "143:                                   qemu_coroutine_self(),",
      "144:                                   NULL);",
      "145:     ret = nbd_write(ioc, buffer, size, NULL);",
      "146:     g_source_remove(watch);",
      "147:     return ret;",
      "148: }",
      "150: static int nbd_negotiate_drop_sync(QIOChannel *ioc, size_t size)",
      "151: {",
      "152:     ssize_t ret;",
      "153:     uint8_t *buffer = g_malloc(MIN(65536, size));",
      "155:     while (size > 0) {",
      "156:         size_t count = MIN(65536, size);",
      "157:         ret = nbd_negotiate_read(ioc, buffer, count);",
      "158:         if (ret < 0) {",
      "159:             g_free(buffer);",
      "160:             return ret;",
      "161:         }",
      "163:         size -= count;",
      "164:     }",
      "166:     g_free(buffer);",
      "167:     return 0;",
      "168: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "205:           type, opt, len);",
      "207:     magic = cpu_to_be64(NBD_REP_MAGIC);",
      "209:         LOG(\"write failed (rep magic)\");",
      "210:         return -EINVAL;",
      "211:     }",
      "212:     opt = cpu_to_be32(opt);",
      "214:         LOG(\"write failed (rep opt)\");",
      "215:         return -EINVAL;",
      "216:     }",
      "217:     type = cpu_to_be32(type);",
      "219:         LOG(\"write failed (rep type)\");",
      "220:         return -EINVAL;",
      "221:     }",
      "222:     len = cpu_to_be32(len);",
      "224:         LOG(\"write failed (rep data length)\");",
      "225:         return -EINVAL;",
      "226:     }",
      "",
      "[Removed Lines]",
      "208:     if (nbd_negotiate_write(ioc, &magic, sizeof(magic)) < 0) {",
      "213:     if (nbd_negotiate_write(ioc, &opt, sizeof(opt)) < 0) {",
      "218:     if (nbd_negotiate_write(ioc, &type, sizeof(type)) < 0) {",
      "223:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) < 0) {",
      "",
      "[Added Lines]",
      "145:     if (nbd_write(ioc, &magic, sizeof(magic), NULL) < 0) {",
      "150:     if (nbd_write(ioc, &opt, sizeof(opt), NULL) < 0) {",
      "155:     if (nbd_write(ioc, &type, sizeof(type), NULL) < 0) {",
      "160:     if (nbd_write(ioc, &len, sizeof(len), NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:     if (ret < 0) {",
      "256:         goto out;",
      "257:     }",
      "259:         LOG(\"write failed (error message)\");",
      "260:         ret = -EIO;",
      "261:     } else {",
      "",
      "[Removed Lines]",
      "258:     if (nbd_negotiate_write(ioc, msg, len) < 0) {",
      "",
      "[Added Lines]",
      "195:     if (nbd_write(ioc, msg, len, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "286:     }",
      "288:     len = cpu_to_be32(name_len);",
      "290:         LOG(\"write failed (name length)\");",
      "291:         return -EINVAL;",
      "292:     }",
      "294:         LOG(\"write failed (name buffer)\");",
      "295:         return -EINVAL;",
      "296:     }",
      "298:         LOG(\"write failed (description buffer)\");",
      "299:         return -EINVAL;",
      "300:     }",
      "",
      "[Removed Lines]",
      "289:     if (nbd_negotiate_write(ioc, &len, sizeof(len)) < 0) {",
      "293:     if (nbd_negotiate_write(ioc, name, name_len) < 0) {",
      "297:     if (nbd_negotiate_write(ioc, desc, desc_len) < 0) {",
      "",
      "[Added Lines]",
      "226:     if (nbd_write(ioc, &len, sizeof(len), NULL) < 0) {",
      "230:     if (nbd_write(ioc, name, name_len, NULL) < 0) {",
      "234:     if (nbd_write(ioc, desc, desc_len, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "308:     NBDExport *exp;",
      "310:     if (length) {",
      "312:             return -EIO;",
      "313:         }",
      "314:         return nbd_negotiate_send_rep_err(client->ioc,",
      "",
      "[Removed Lines]",
      "311:         if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "248:         if (nbd_drop(client->ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "339:         LOG(\"Bad length received\");",
      "340:         goto fail;",
      "341:     }",
      "343:         LOG(\"read failed\");",
      "344:         goto fail;",
      "345:     }",
      "",
      "[Removed Lines]",
      "342:     if (nbd_negotiate_read(client->ioc, name, length) < 0) {",
      "",
      "[Added Lines]",
      "279:     if (nbd_read(client->ioc, name, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372:     TRACE(\"Setting up TLS\");",
      "373:     ioc = client->ioc;",
      "374:     if (length) {",
      "376:             return NULL;",
      "377:         }",
      "378:         nbd_negotiate_send_rep_err(ioc, NBD_REP_ERR_INVALID, NBD_OPT_STARTTLS,",
      "",
      "[Removed Lines]",
      "375:         if (nbd_negotiate_drop_sync(ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "312:         if (nbd_drop(ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "436:         ...           Rest of request",
      "440:         LOG(\"read failed\");",
      "441:         return -EIO;",
      "442:     }",
      "",
      "[Removed Lines]",
      "439:     if (nbd_negotiate_read(client->ioc, &flags, sizeof(flags)) < 0) {",
      "",
      "[Added Lines]",
      "376:     if (nbd_read(client->ioc, &flags, sizeof(flags), NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "462:         uint32_t clientflags, length;",
      "463:         uint64_t magic;",
      "466:             LOG(\"read failed\");",
      "467:             return -EINVAL;",
      "468:         }",
      "",
      "[Removed Lines]",
      "465:         if (nbd_negotiate_read(client->ioc, &magic, sizeof(magic)) < 0) {",
      "",
      "[Added Lines]",
      "402:         if (nbd_read(client->ioc, &magic, sizeof(magic), NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "472:             return -EINVAL;",
      "473:         }",
      "477:         {",
      "478:             LOG(\"read failed\");",
      "479:             return -EINVAL;",
      "480:         }",
      "481:         clientflags = be32_to_cpu(clientflags);",
      "484:             LOG(\"read failed\");",
      "485:             return -EINVAL;",
      "486:         }",
      "",
      "[Removed Lines]",
      "475:         if (nbd_negotiate_read(client->ioc, &clientflags,",
      "476:                                sizeof(clientflags)) < 0)",
      "483:         if (nbd_negotiate_read(client->ioc, &length, sizeof(length)) < 0) {",
      "",
      "[Added Lines]",
      "412:         if (nbd_read(client->ioc, &clientflags,",
      "413:                       sizeof(clientflags), NULL) < 0)",
      "420:         if (nbd_read(client->ioc, &length, sizeof(length), NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "510:                 return -EINVAL;",
      "512:             default:",
      "514:                     return -EIO;",
      "515:                 }",
      "516:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
      "",
      "[Removed Lines]",
      "513:                 if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "450:                 if (nbd_drop(client->ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "548:                 return nbd_negotiate_handle_export_name(client, length);",
      "550:             case NBD_OPT_STARTTLS:",
      "552:                     return -EIO;",
      "553:                 }",
      "554:                 if (client->tlscreds) {",
      "",
      "[Removed Lines]",
      "551:                 if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "488:                 if (nbd_drop(client->ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "567:                 }",
      "568:                 break;",
      "569:             default:",
      "571:                     return -EIO;",
      "572:                 }",
      "573:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
      "",
      "[Removed Lines]",
      "570:                 if (nbd_negotiate_drop_sync(client->ioc, length) < 0) {",
      "",
      "[Added Lines]",
      "507:                 if (nbd_drop(client->ioc, length, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "656:             TRACE(\"TLS cannot be enabled with oldstyle protocol\");",
      "657:             goto fail;",
      "658:         }",
      "660:             LOG(\"write failed\");",
      "661:             goto fail;",
      "662:         }",
      "663:     } else {",
      "665:             LOG(\"write failed\");",
      "666:             goto fail;",
      "667:         }",
      "",
      "[Removed Lines]",
      "659:         if (nbd_negotiate_write(client->ioc, buf, sizeof(buf)) < 0) {",
      "664:         if (nbd_negotiate_write(client->ioc, buf, 18) < 0) {",
      "",
      "[Added Lines]",
      "596:         if (nbd_write(client->ioc, buf, sizeof(buf), NULL) < 0) {",
      "601:         if (nbd_write(client->ioc, buf, 18, NULL) < 0) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "676:         stq_be_p(buf + 18, client->exp->size);",
      "677:         stw_be_p(buf + 26, client->exp->nbdflags | myflags);",
      "678:         len = client->no_zeroes ? 10 : sizeof(buf) - 18;",
      "680:             LOG(\"write failed\");",
      "681:             goto fail;",
      "682:         }",
      "",
      "[Removed Lines]",
      "679:         if (nbd_negotiate_write(client->ioc, buf + 18, len) < 0) {",
      "",
      "[Added Lines]",
      "616:         if (nbd_write(client->ioc, buf + 18, len, NULL) < 0) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "28fb494f9b8827c6087d515e20a3c78baaf443cc",
      "candidate_info": {
        "commit_hash": "28fb494f9b8827c6087d515e20a3c78baaf443cc",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/28fb494f9b8827c6087d515e20a3c78baaf443cc",
        "files": [
          "nbd/client.c",
          "nbd/server.c",
          "nbd/trace-events"
        ],
        "message": "nbd/client: fix error messages in nbd_handle_reply_err\n\n1. NBD_REP_ERR_INVALID is not only about length, so, make message more\n   general\n\n2. hex format is not very good: it's hard to read something like\n   \"option a (set meta context)\", so switch to dec.\n\nSigned-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>\nMessage-Id: <1518702707-7077-6-git-send-email-vsementsov@virtuozzo.com>\n[eblake: expand scope of patch: ALL uses of nbd_opt_lookup and\nnbd_rep_lookup are now decimal]\nSigned-off-by: Eric Blake <eblake@redhat.com>",
        "before_after_code_files": [
          "nbd/client.c||nbd/client.c",
          "nbd/server.c||nbd/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "nbd/client.c||nbd/client.c": [
          "File: nbd/client.c -> nbd/client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:     if (reply->length) {",
          "160:         if (reply->length > NBD_MAX_BUFFER_SIZE) {",
          "162:                        \" (%s) message is too long\",",
          "163:                        reply->type, nbd_rep_lookup(reply->type));",
          "164:             goto cleanup;",
          "165:         }",
          "166:         msg = g_malloc(reply->length + 1);",
          "167:         if (nbd_read(ioc, msg, reply->length, errp) < 0) {",
          "169:                           \" (%s) message: \",",
          "170:                           reply->type, nbd_rep_lookup(reply->type));",
          "171:             goto cleanup;",
          "",
          "[Removed Lines]",
          "161:             error_setg(errp, \"server error 0x%\" PRIx32",
          "168:             error_prepend(errp, \"failed to read option error 0x%\" PRIx32",
          "",
          "[Added Lines]",
          "161:             error_setg(errp, \"server error %\" PRIu32",
          "168:             error_prepend(errp, \"failed to read option error %\" PRIu32",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "180:         goto cleanup;",
          "182:     case NBD_REP_ERR_POLICY:",
          "184:                    reply->option, nbd_opt_lookup(reply->option));",
          "185:         break;",
          "187:     case NBD_REP_ERR_INVALID:",
          "189:                    reply->option, nbd_opt_lookup(reply->option));",
          "190:         break;",
          "192:     case NBD_REP_ERR_PLATFORM:",
          "194:                    reply->option, nbd_opt_lookup(reply->option));",
          "195:         break;",
          "197:     case NBD_REP_ERR_TLS_REQD:",
          "199:                    \" (%s)\", reply->option, nbd_opt_lookup(reply->option));",
          "200:         break;",
          "",
          "[Removed Lines]",
          "183:         error_setg(errp, \"Denied by server for option %\" PRIx32 \" (%s)\",",
          "188:         error_setg(errp, \"Invalid data length for option %\" PRIx32 \" (%s)\",",
          "193:         error_setg(errp, \"Server lacks support for option %\" PRIx32 \" (%s)\",",
          "198:         error_setg(errp, \"TLS negotiation required before option %\" PRIx32",
          "",
          "[Added Lines]",
          "183:         error_setg(errp, \"Denied by server for option %\" PRIu32 \" (%s)\",",
          "188:         error_setg(errp, \"Invalid parameters for option %\" PRIu32 \" (%s)\",",
          "193:         error_setg(errp, \"Server lacks support for option %\" PRIu32 \" (%s)\",",
          "198:         error_setg(errp, \"TLS negotiation required before option %\" PRIu32",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "204:         break;",
          "206:     case NBD_REP_ERR_SHUTDOWN:",
          "208:                    reply->option, nbd_opt_lookup(reply->option));",
          "209:         break;",
          "211:     case NBD_REP_ERR_BLOCK_SIZE_REQD:",
          "213:                    \" (%s)\", reply->option, nbd_opt_lookup(reply->option));",
          "214:         break;",
          "216:     default:",
          "218:                    \" (%s)\", reply->option, nbd_opt_lookup(reply->option));",
          "219:         break;",
          "220:     }",
          "",
          "[Removed Lines]",
          "207:         error_setg(errp, \"Server shutting down before option %\" PRIx32 \" (%s)\",",
          "212:         error_setg(errp, \"Server requires INFO_BLOCK_SIZE for option %\" PRIx32",
          "217:         error_setg(errp, \"Unknown error code when asking for option %\" PRIx32",
          "",
          "[Added Lines]",
          "207:         error_setg(errp, \"Server shutting down before option %\" PRIu32 \" (%s)\",",
          "212:         error_setg(errp, \"Server requires INFO_BLOCK_SIZE for option %\" PRIu32",
          "217:         error_setg(errp, \"Unknown error code when asking for option %\" PRIu32",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "378:             return 1;",
          "379:         }",
          "380:         if (reply.type != NBD_REP_INFO) {",
          "383:                        reply.type, nbd_rep_lookup(reply.type), NBD_REP_INFO);",
          "384:             nbd_send_opt_abort(ioc);",
          "385:             return -1;",
          "",
          "[Removed Lines]",
          "381:             error_setg(errp, \"unexpected reply type %\" PRIx32",
          "382:                        \" (%s), expected %x\",",
          "",
          "[Added Lines]",
          "381:             error_setg(errp, \"unexpected reply type %\" PRIu32",
          "382:                        \" (%s), expected %u\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "535:     if (reply.type != NBD_REP_ACK) {",
          "536:         error_setg(errp, \"Server answered option %d (%s) with unexpected \"",
          "538:                    reply.type, nbd_rep_lookup(reply.type));",
          "539:         nbd_send_opt_abort(ioc);",
          "540:         return -1;",
          "",
          "[Removed Lines]",
          "537:                    \"reply %\" PRIx32 \" (%s)\", opt, nbd_opt_lookup(opt),",
          "",
          "[Added Lines]",
          "537:                    \"reply %\" PRIu32 \" (%s)\", opt, nbd_opt_lookup(opt),",
          "",
          "---------------"
        ],
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "807:             default:",
          "808:                 ret = nbd_opt_drop(client, NBD_REP_ERR_UNSUP, errp,",
          "810:                                    option, nbd_opt_lookup(option));",
          "811:                 break;",
          "812:             }",
          "",
          "[Removed Lines]",
          "809:                                    \"Unsupported option 0x%\" PRIx32 \" (%s)\",",
          "",
          "[Added Lines]",
          "809:                                    \"Unsupported option %\" PRIu32 \" (%s)\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "822:                                                         errp);",
          "824:             default:",
          "826:                            option, nbd_opt_lookup(option));",
          "827:                 return -EINVAL;",
          "828:             }",
          "",
          "[Removed Lines]",
          "825:                 error_setg(errp, \"Unsupported option 0x%\" PRIx32 \" (%s)\",",
          "",
          "[Added Lines]",
          "825:                 error_setg(errp, \"Unsupported option %\" PRIu32 \" (%s)\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e68c35cfb8088a11300371751e3987f67cac15b1",
      "candidate_info": {
        "commit_hash": "e68c35cfb8088a11300371751e3987f67cac15b1",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/e68c35cfb8088a11300371751e3987f67cac15b1",
        "files": [
          "nbd/server.c"
        ],
        "message": "nbd/server: Refactor zero-length option check\n\nConsolidate the response for a non-zero-length option payload\ninto a new function, nbd_reject_length().  This check will\nalso be used when introducing support for structured replies.\n\nNote that STARTTLS response differs based on time: if the connection\nis still unencrypted, we set fatal to true (a client that can't\nrequest TLS correctly may still think that we are ready to start\nthe TLS handshake, so we must disconnect); while if the connection\nis already encrypted, the client is sending a bogus request but\nis no longer at risk of being confused by continuing the connection.\n\nSigned-off-by: Eric Blake <eblake@redhat.com>\nMessage-Id: <20171027104037.8319-7-eblake@redhat.com>\n[eblake: correct return value on STARTTLS]\nReviewed-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>",
        "before_after_code_files": [
          "nbd/server.c||nbd/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "258: {",
          "259:     NBDExport *exp;",
          "272:     QTAILQ_FOREACH(exp, &exports, next) {",
          "273:         if (nbd_negotiate_send_rep_list(client->ioc, exp, errp)) {",
          "",
          "[Removed Lines]",
          "256: static int nbd_negotiate_handle_list(NBDClient *client, uint32_t length,",
          "257:                                      Error **errp)",
          "261:     if (length) {",
          "262:         if (nbd_drop(client->ioc, length, errp) < 0) {",
          "263:             return -EIO;",
          "264:         }",
          "265:         return nbd_negotiate_send_rep_err(client->ioc,",
          "266:                                           NBD_REP_ERR_INVALID, NBD_OPT_LIST,",
          "267:                                           errp,",
          "268:                                           \"OPT_LIST should not have length\");",
          "269:     }",
          "",
          "[Added Lines]",
          "256: static int nbd_negotiate_handle_list(NBDClient *client, Error **errp)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "533: static QIOChannel *nbd_negotiate_handle_starttls(NBDClient *client,",
          "535:                                                  Error **errp)",
          "536: {",
          "537:     QIOChannel *ioc;",
          "",
          "[Removed Lines]",
          "534:                                                  uint32_t length,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "541:     trace_nbd_negotiate_handle_starttls();",
          "542:     ioc = client->ioc;",
          "553:     if (nbd_negotiate_send_rep(client->ioc, NBD_REP_ACK,",
          "554:                                NBD_OPT_STARTTLS, errp) < 0) {",
          "",
          "[Removed Lines]",
          "543:     if (length) {",
          "544:         if (nbd_drop(ioc, length, errp) < 0) {",
          "545:             return NULL;",
          "546:         }",
          "547:         nbd_negotiate_send_rep_err(ioc, NBD_REP_ERR_INVALID, NBD_OPT_STARTTLS,",
          "548:                                    errp,",
          "549:                                    \"OPT_STARTTLS should not have length\");",
          "550:         return NULL;",
          "551:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "584:     return QIO_CHANNEL(tioc);",
          "585: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573: static int nbd_reject_length(NBDClient *client, uint32_t length,",
          "574:                              uint32_t option, bool fatal, Error **errp)",
          "575: {",
          "576:     int ret;",
          "578:     assert(length);",
          "579:     if (nbd_drop(client->ioc, length, errp) < 0) {",
          "580:         return -EIO;",
          "581:     }",
          "582:     ret = nbd_negotiate_send_rep_err(client->ioc, NBD_REP_ERR_INVALID,",
          "583:                                      option, errp,",
          "584:                                      \"option '%s' should have zero length\",",
          "585:                                      nbd_opt_lookup(option));",
          "586:     if (fatal && !ret) {",
          "587:         error_setg(errp, \"option '%s' should have zero length\",",
          "588:                    nbd_opt_lookup(option));",
          "589:         return -EINVAL;",
          "590:     }",
          "591:     return ret;",
          "592: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "674:             }",
          "675:             switch (option) {",
          "676:             case NBD_OPT_STARTTLS:",
          "678:                 if (!tioc) {",
          "679:                     return -EIO;",
          "680:                 }",
          "",
          "[Removed Lines]",
          "677:                 tioc = nbd_negotiate_handle_starttls(client, length, errp);",
          "",
          "[Added Lines]",
          "684:                 if (length) {",
          "687:                     return nbd_reject_length(client, length, option, true,",
          "688:                                              errp);",
          "689:                 }",
          "690:                 tioc = nbd_negotiate_handle_starttls(client, errp);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "710:         } else if (fixedNewstyle) {",
          "711:             switch (option) {",
          "712:             case NBD_OPT_LIST:",
          "714:                 break;",
          "716:             case NBD_OPT_ABORT:",
          "",
          "[Removed Lines]",
          "713:                 ret = nbd_negotiate_handle_list(client, length, errp);",
          "",
          "[Added Lines]",
          "726:                 if (length) {",
          "727:                     ret = nbd_reject_length(client, length, option, false,",
          "728:                                             errp);",
          "729:                 } else {",
          "730:                     ret = nbd_negotiate_handle_list(client, errp);",
          "731:                 }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "736:                 break;",
          "738:             case NBD_OPT_STARTTLS:",
          "743:                     ret = nbd_negotiate_send_rep_err(client->ioc,",
          "744:                                                      NBD_REP_ERR_INVALID,",
          "745:                                                      option, errp,",
          "",
          "[Removed Lines]",
          "739:                 if (nbd_drop(client->ioc, length, errp) < 0) {",
          "740:                     return -EIO;",
          "741:                 }",
          "742:                 if (client->tlscreds) {",
          "",
          "[Added Lines]",
          "757:                 if (length) {",
          "758:                     ret = nbd_reject_length(client, length, option, false,",
          "759:                                             errp);",
          "760:                 } else if (client->tlscreds) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e5c9ad6f4cf164b098312ffe2f07396a5d994d3",
      "candidate_info": {
        "commit_hash": "2e5c9ad6f4cf164b098312ffe2f07396a5d994d3",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/2e5c9ad6f4cf164b098312ffe2f07396a5d994d3",
        "files": [
          "nbd/server.c"
        ],
        "message": "nbd/server: rename rc to ret\n\nFor consistency use 'ret' name for saving return code everywhere\nin the file.\n\nSigned-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>\nReviewed-by: Eric Blake <eblake@redhat.com>\nMessage-Id: <20170602150150.258222-12-vsementsov@virtuozzo.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "nbd/server.c||nbd/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:     uint32_t len;",
          "212:     const char *name = exp->name ? exp->name : \"\";",
          "213:     const char *desc = exp->description ? exp->description : \"\";",
          "216:     TRACE(\"Advertising export name '%s' description '%s'\", name, desc);",
          "217:     name_len = strlen(name);",
          "218:     desc_len = strlen(desc);",
          "219:     len = name_len + desc_len + sizeof(len);",
          "223:     }",
          "225:     len = cpu_to_be32(name_len);",
          "",
          "[Removed Lines]",
          "214:     int rc;",
          "220:     rc = nbd_negotiate_send_rep_len(ioc, NBD_REP_SERVER, NBD_OPT_LIST, len);",
          "221:     if (rc < 0) {",
          "222:         return rc;",
          "",
          "[Added Lines]",
          "214:     int ret;",
          "220:     ret = nbd_negotiate_send_rep_len(ioc, NBD_REP_SERVER, NBD_OPT_LIST, len);",
          "221:     if (ret < 0) {",
          "222:         return ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "536: static coroutine_fn int nbd_negotiate(NBDClient *client)",
          "537: {",
          "538:     char buf[8 + 8 + 8 + 128];",
          "540:     const uint16_t myflags = (NBD_FLAG_HAS_FLAGS | NBD_FLAG_SEND_TRIM |",
          "541:                               NBD_FLAG_SEND_FLUSH | NBD_FLAG_SEND_FUA |",
          "542:                               NBD_FLAG_SEND_WRITE_ZEROES);",
          "",
          "[Removed Lines]",
          "539:     int rc;",
          "",
          "[Added Lines]",
          "539:     int ret;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "593:             LOG(\"write failed\");",
          "594:             return -EINVAL;",
          "595:         }",
          "598:             LOG(\"option negotiation failed\");",
          "600:         }",
          "602:         TRACE(\"advertising size %\" PRIu64 \" and flags %x\",",
          "",
          "[Removed Lines]",
          "596:         rc = nbd_negotiate_options(client);",
          "597:         if (rc != 0) {",
          "599:             return rc;",
          "",
          "[Added Lines]",
          "596:         ret = nbd_negotiate_options(client);",
          "597:         if (ret != 0) {",
          "599:             return ret;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "604:         stq_be_p(buf + 18, client->exp->size);",
          "605:         stw_be_p(buf + 26, client->exp->nbdflags | myflags);",
          "606:         len = client->no_zeroes ? 10 : sizeof(buf) - 18;",
          "609:             LOG(\"write failed\");",
          "611:         }",
          "612:     }",
          "",
          "[Removed Lines]",
          "607:         rc = nbd_write(client->ioc, buf + 18, len, NULL);",
          "608:         if (rc < 0) {",
          "610:             return rc;",
          "",
          "[Added Lines]",
          "607:         ret = nbd_write(client->ioc, buf + 18, len, NULL);",
          "608:         if (ret < 0) {",
          "610:             return ret;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "963: static int nbd_co_send_reply(NBDRequestData *req, NBDReply *reply, int len)",
          "964: {",
          "965:     NBDClient *client = req->client;",
          "968:     g_assert(qemu_in_coroutine());",
          "969:     qemu_co_mutex_lock(&client->send_lock);",
          "970:     client->send_coroutine = qemu_coroutine_self();",
          "972:     if (!len) {",
          "974:     } else {",
          "975:         qio_channel_set_cork(client->ioc, true);",
          "981:             }",
          "982:         }",
          "983:         qio_channel_set_cork(client->ioc, false);",
          "",
          "[Removed Lines]",
          "966:     int rc;",
          "973:         rc = nbd_send_reply(client->ioc, reply);",
          "976:         rc = nbd_send_reply(client->ioc, reply);",
          "977:         if (rc == 0) {",
          "978:             rc = nbd_write(client->ioc, req->data, len, NULL);",
          "979:             if (rc < 0) {",
          "980:                 rc = -EIO;",
          "",
          "[Added Lines]",
          "966:     int ret;",
          "973:         ret = nbd_send_reply(client->ioc, reply);",
          "976:         ret = nbd_send_reply(client->ioc, reply);",
          "977:         if (ret == 0) {",
          "978:             ret = nbd_write(client->ioc, req->data, len, NULL);",
          "979:             if (ret < 0) {",
          "980:                 ret = -EIO;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "986:     client->send_coroutine = NULL;",
          "987:     qemu_co_mutex_unlock(&client->send_lock);",
          "989: }",
          "",
          "[Removed Lines]",
          "988:     return rc;",
          "",
          "[Added Lines]",
          "988:     return ret;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f9039cdaa43f7d93d60e739ce9436ff0788cbb4",
      "candidate_info": {
        "commit_hash": "7f9039cdaa43f7d93d60e739ce9436ff0788cbb4",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/7f9039cdaa43f7d93d60e739ce9436ff0788cbb4",
        "files": [
          "nbd/server.c"
        ],
        "message": "nbd/server: rename clientflags var in nbd_negotiate_options\n\nRename 'clientflags' to just 'option'. This variable has nothing to do\nwith flags, but is a single integer representing the option requested\nby the client.\n\nSigned-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>\nMessage-Id: <20170707152918.23086-9-vsementsov@virtuozzo.com>\nSigned-off-by: Eric Blake <eblake@redhat.com>",
        "before_after_code_files": [
          "nbd/server.c||nbd/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "416:     while (1) {",
          "417:         int ret;",
          "419:         uint64_t magic;",
          "421:         if (nbd_read(client->ioc, &magic, sizeof(magic), errp) < 0) {",
          "",
          "[Removed Lines]",
          "418:         uint32_t clientflags, length;",
          "",
          "[Added Lines]",
          "418:         uint32_t option, length;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "428:             return -EINVAL;",
          "429:         }",
          "433:             error_prepend(errp, \"read failed: \");",
          "434:             return -EINVAL;",
          "435:         }",
          "438:         if (nbd_read(client->ioc, &length, sizeof(length), errp) < 0) {",
          "439:             error_prepend(errp, \"read failed: \");",
          "",
          "[Removed Lines]",
          "431:         if (nbd_read(client->ioc, &clientflags,",
          "432:                      sizeof(clientflags), errp) < 0) {",
          "436:         clientflags = be32_to_cpu(clientflags);",
          "",
          "[Added Lines]",
          "431:         if (nbd_read(client->ioc, &option,",
          "432:                      sizeof(option), errp) < 0) {",
          "436:         option = be32_to_cpu(option);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "441:         }",
          "442:         length = be32_to_cpu(length);",
          "445:         if (client->tlscreds &&",
          "446:             client->ioc == (QIOChannel *)client->sioc) {",
          "447:             QIOChannel *tioc;",
          "448:             if (!fixedNewstyle) {",
          "450:                 return -EINVAL;",
          "451:             }",
          "453:             case NBD_OPT_STARTTLS:",
          "454:                 tioc = nbd_negotiate_handle_starttls(client, length, errp);",
          "455:                 if (!tioc) {",
          "",
          "[Removed Lines]",
          "444:         TRACE(\"Checking option 0x%\" PRIx32, clientflags);",
          "449:                 error_setg(errp, \"Unsupported option 0x%\" PRIx32, clientflags);",
          "452:             switch (clientflags) {",
          "",
          "[Added Lines]",
          "444:         TRACE(\"Checking option 0x%\" PRIx32, option);",
          "449:                 error_setg(errp, \"Unsupported option 0x%\" PRIx32, option);",
          "452:             switch (option) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "462:             case NBD_OPT_EXPORT_NAME:",
          "464:                 error_setg(errp, \"Option 0x%x not permitted before TLS\",",
          "466:                 return -EINVAL;",
          "468:             default:",
          "",
          "[Removed Lines]",
          "465:                            clientflags);",
          "",
          "[Added Lines]",
          "465:                            option);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "471:                 }",
          "472:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
          "473:                                                  NBD_REP_ERR_TLS_REQD,",
          "475:                                                  \"Option 0x%\" PRIx32",
          "476:                                                  \"not permitted before TLS\",",
          "478:                 if (ret < 0) {",
          "479:                     return ret;",
          "480:                 }",
          "483:                     return 1;",
          "484:                 }",
          "485:                 break;",
          "486:             }",
          "487:         } else if (fixedNewstyle) {",
          "489:             case NBD_OPT_LIST:",
          "490:                 ret = nbd_negotiate_handle_list(client, length, errp);",
          "491:                 if (ret < 0) {",
          "",
          "[Removed Lines]",
          "474:                                                  clientflags, errp,",
          "477:                                                  clientflags);",
          "482:                 if (clientflags == NBD_OPT_ABORT) {",
          "488:             switch (clientflags) {",
          "",
          "[Added Lines]",
          "474:                                                  option, errp,",
          "477:                                                  option);",
          "482:                 if (option == NBD_OPT_ABORT) {",
          "488:             switch (option) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "501:                                        &local_err);",
          "503:                 if (local_err != NULL) {",
          "",
          "[Removed Lines]",
          "500:                 nbd_negotiate_send_rep(client->ioc, NBD_REP_ACK, clientflags,",
          "",
          "[Added Lines]",
          "500:                 nbd_negotiate_send_rep(client->ioc, NBD_REP_ACK, option,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "518:                 if (client->tlscreds) {",
          "519:                     ret = nbd_negotiate_send_rep_err(client->ioc,",
          "520:                                                      NBD_REP_ERR_INVALID,",
          "522:                                                      \"TLS already enabled\");",
          "523:                 } else {",
          "524:                     ret = nbd_negotiate_send_rep_err(client->ioc,",
          "525:                                                      NBD_REP_ERR_POLICY,",
          "527:                                                      \"TLS not configured\");",
          "528:                 }",
          "529:                 if (ret < 0) {",
          "",
          "[Removed Lines]",
          "521:                                                      clientflags, errp,",
          "526:                                                      clientflags, errp,",
          "",
          "[Added Lines]",
          "521:                                                      option, errp,",
          "526:                                                      option, errp,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "536:                 }",
          "537:                 ret = nbd_negotiate_send_rep_err(client->ioc,",
          "538:                                                  NBD_REP_ERR_UNSUP,",
          "540:                                                  \"Unsupported option 0x%\"",
          "541:                                                  PRIx32,",
          "543:                 if (ret < 0) {",
          "544:                     return ret;",
          "545:                 }",
          "",
          "[Removed Lines]",
          "539:                                                  clientflags, errp,",
          "542:                                                  clientflags);",
          "",
          "[Added Lines]",
          "539:                                                  option, errp,",
          "542:                                                  option);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "554:             case NBD_OPT_EXPORT_NAME:",
          "555:                 return nbd_negotiate_handle_export_name(client, length, errp);",
          "557:             default:",
          "559:                 return -EINVAL;",
          "560:             }",
          "561:         }",
          "",
          "[Removed Lines]",
          "553:             switch (clientflags) {",
          "558:                 error_setg(errp, \"Unsupported option 0x%\" PRIx32, clientflags);",
          "",
          "[Added Lines]",
          "553:             switch (option) {",
          "558:                 error_setg(errp, \"Unsupported option 0x%\" PRIx32, option);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7798d3aab981b1ccb29ba7343368a55a32a26d30",
      "candidate_info": {
        "commit_hash": "7798d3aab981b1ccb29ba7343368a55a32a26d30",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/7798d3aab981b1ccb29ba7343368a55a32a26d30",
        "files": [
          "nbd/server.c"
        ],
        "message": "nbd/server: nbd_negotiate: fix error path\n\nCurrent code will return 0 on this nbd_write fail, as rc is 0\nafter successful nbd_negotiate_options. Fix this.\n\nSigned-off-by: Vladimir Sementsov-Ogievskiy <vsementsov@virtuozzo.com>\nReviewed-by: Eric Blake <eblake@redhat.com>\nMessage-Id: <20170602150150.258222-10-vsementsov@virtuozzo.com>\nSigned-off-by: Paolo Bonzini <pbonzini@redhat.com>",
        "before_after_code_files": [
          "nbd/server.c||nbd/server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "nbd/server.c||nbd/server.c"
          ],
          "candidate": [
            "nbd/server.c||nbd/server.c"
          ]
        }
      },
      "candidate_diff": {
        "nbd/server.c||nbd/server.c": [
          "File: nbd/server.c -> nbd/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "607:         stq_be_p(buf + 18, client->exp->size);",
          "608:         stw_be_p(buf + 26, client->exp->nbdflags | myflags);",
          "609:         len = client->no_zeroes ? 10 : sizeof(buf) - 18;",
          "611:             LOG(\"write failed\");",
          "612:             goto fail;",
          "613:         }",
          "",
          "[Removed Lines]",
          "610:         if (nbd_write(client->ioc, buf + 18, len, NULL) < 0) {",
          "",
          "[Added Lines]",
          "610:         rc = nbd_write(client->ioc, buf + 18, len, NULL);",
          "611:         if (rc < 0) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}