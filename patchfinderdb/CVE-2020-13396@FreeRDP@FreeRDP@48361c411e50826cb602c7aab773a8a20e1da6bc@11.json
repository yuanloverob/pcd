{
  "cve_id": "CVE-2020-13396",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in ntlm_read_ChallengeMessage in winpr/libwinpr/sspi/NTLM/ntlm_message.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
  "patch_info": {
    "commit_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/48361c411e50826cb602c7aab773a8a20e1da6bc",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed GHSL-2020-100: oob read in ntlm_read_ChallengeMessage\n\n* Added length checks for data read from stream\n* Unified function resource cleanup\n\n(cherry picked from commit 8357dedbbf7213b7d0d18f1026145b9a5b92235a)",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "368: SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "369: {",
      "370:  wStream* s;",
      "374:  NTLM_AV_PAIR* AvTimestamp;",
      "375:  NTLM_CHALLENGE_MESSAGE* message;",
      "376:  ntlm_generate_client_challenge(context);",
      "377:  message = &context->CHALLENGE_MESSAGE;",
      "378:  ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));",
      "",
      "[Removed Lines]",
      "371:  int length;",
      "372:  PBYTE StartOffset;",
      "373:  PBYTE PayloadOffset;",
      "",
      "[Added Lines]",
      "370:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
      "372:  size_t length;",
      "373:  size_t StartOffset;",
      "374:  size_t PayloadOffset;",
      "377:  if (!context || !buffer)",
      "378:   return SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "381:  if (!s)",
      "382:   return SEC_E_INTERNAL_ERROR;",
      "386:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
      "392:  if (message->MessageType != MESSAGE_TYPE_CHALLENGE)",
      "404:  if (Stream_GetRemainingLength(s) < 4)",
      "411:  context->NegotiateFlags = message->NegotiateFlags;",
      "413:  if (Stream_GetRemainingLength(s) < 8)",
      "420:  CopyMemory(context->ServerChallenge, message->ServerChallenge, 8);",
      "422:  if (Stream_GetRemainingLength(s) < 8)",
      "436:  if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
      "437:  {",
      "443:  }",
      "448:  if (message->TargetName.Len > 0)",
      "449:  {",
      "450:   if (ntlm_read_message_fields_buffer(s, &(message->TargetName)) < 0)",
      "455:  }",
      "457:  if (message->TargetInfo.Len > 0)",
      "",
      "[Removed Lines]",
      "384:  StartOffset = Stream_Pointer(s);",
      "387:  {",
      "388:   Stream_Free(s, FALSE);",
      "389:   return SEC_E_INVALID_TOKEN;",
      "390:  }",
      "393:  {",
      "394:   Stream_Free(s, FALSE);",
      "395:   return SEC_E_INVALID_TOKEN;",
      "396:  }",
      "399:  {",
      "400:   Stream_Free(s, FALSE);",
      "401:   return SEC_E_INVALID_TOKEN;",
      "402:  }",
      "405:  {",
      "406:   Stream_Free(s, FALSE);",
      "407:   return SEC_E_INVALID_TOKEN;",
      "408:  }",
      "414:  {",
      "415:   Stream_Free(s, FALSE);",
      "416:   return SEC_E_INVALID_TOKEN;",
      "417:  }",
      "423:  {",
      "424:   Stream_Free(s, FALSE);",
      "425:   return SEC_E_INVALID_TOKEN;",
      "426:  }",
      "431:  {",
      "432:   Stream_Free(s, FALSE);",
      "433:   return SEC_E_INVALID_TOKEN;",
      "434:  }",
      "439:   {",
      "440:    Stream_Free(s, FALSE);",
      "441:    return SEC_E_INVALID_TOKEN;",
      "442:   }",
      "446:  PayloadOffset = Stream_Pointer(s);",
      "451:   {",
      "452:    Stream_Free(s, FALSE);",
      "453:    return SEC_E_INTERNAL_ERROR;",
      "454:   }",
      "",
      "[Added Lines]",
      "388:  StartOffset = Stream_GetPosition(s);",
      "391:   goto fail;",
      "394:   goto fail;",
      "397:   goto fail;",
      "400:   goto fail;",
      "406:   goto fail;",
      "412:   goto fail;",
      "417:   goto fail;",
      "422:    goto fail;",
      "426:  PayloadOffset = Stream_GetPosition(s);",
      "428:  status = SEC_E_INTERNAL_ERROR;",
      "432:    goto fail;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "459:   size_t cbAvTimestamp;",
      "461:   if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)",
      "467:   context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;",
      "468:   context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;",
      "",
      "[Removed Lines]",
      "462:   {",
      "463:    Stream_Free(s, FALSE);",
      "464:    return SEC_E_INTERNAL_ERROR;",
      "465:   }",
      "",
      "[Added Lines]",
      "440:    goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "474:    PBYTE ptr = ntlm_av_pair_get_value_pointer(AvTimestamp);",
      "476:    if (!ptr)",
      "479:    if (context->NTLMv2)",
      "480:     context->UseMIC = TRUE;",
      "",
      "[Removed Lines]",
      "477:     return SEC_E_INTERNAL_ERROR;",
      "",
      "[Added Lines]",
      "452:     goto fail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "484:  }",
      "486:  length = (PayloadOffset - StartOffset) + message->TargetName.Len + message->TargetInfo.Len;",
      "488:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))",
      "495: #ifdef WITH_DEBUG_NTLM",
      "496:  WLog_DBG(TAG, \"CHALLENGE_MESSAGE (length = %d)\", length);",
      "497:  winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,",
      "",
      "[Removed Lines]",
      "489:  {",
      "490:   Stream_Free(s, FALSE);",
      "491:   return SEC_E_INTERNAL_ERROR;",
      "492:  }",
      "494:  CopyMemory(context->ChallengeMessage.pvBuffer, StartOffset, length);",
      "",
      "[Added Lines]",
      "462:  if (length > buffer->cbBuffer)",
      "463:   goto fail;",
      "466:   goto fail;",
      "468:  if (context->ChallengeMessage.pvBuffer)",
      "469:   CopyMemory(context->ChallengeMessage.pvBuffer, Stream_Buffer(s) + StartOffset, length);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "517:  if (context->NTLMv2)",
      "518:  {",
      "519:   if (ntlm_construct_authenticate_target_info(context) < 0)",
      "525:   sspi_SecBufferFree(&context->ChallengeTargetInfo);",
      "526:   context->ChallengeTargetInfo.pvBuffer = context->AuthenticateTargetInfo.pvBuffer;",
      "",
      "[Removed Lines]",
      "520:   {",
      "521:    Stream_Free(s, FALSE);",
      "522:    return SEC_E_INTERNAL_ERROR;",
      "523:   }",
      "",
      "[Added Lines]",
      "495:    goto fail;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "533:  {",
      "534:   Stream_Free(s, FALSE);",
      "535:   return SEC_E_INTERNAL_ERROR;",
      "536:  }",
      "539:  {",
      "540:   Stream_Free(s, FALSE);",
      "541:   return SEC_E_INTERNAL_ERROR;",
      "542:  }",
      "",
      "[Added Lines]",
      "505:   goto fail;",
      "508:   goto fail;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "579: #endif",
      "580:  context->state = NTLM_STATE_AUTHENTICATE;",
      "581:  ntlm_free_message_fields_buffer(&(message->TargetName));",
      "582:  Stream_Free(s, FALSE);",
      "584: }",
      "586: SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "",
      "[Removed Lines]",
      "583:  return SEC_I_CONTINUE_NEEDED;",
      "",
      "[Added Lines]",
      "548:  status = SEC_I_CONTINUE_NEEDED;",
      "549: fail:",
      "551:  return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "64bec7586d047fe24e47c7d9ebb39fbf495f9994",
      "candidate_info": {
        "commit_hash": "64bec7586d047fe24e47c7d9ebb39fbf495f9994",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/64bec7586d047fe24e47c7d9ebb39fbf495f9994",
        "files": [
          "client/X11/xf_event.c",
          "client/X11/xf_keyboard.c",
          "client/common/cmdline.c",
          "libfreerdp/crypto/tls.c",
          "winpr/libwinpr/smartcard/smartcard_pcsc.c"
        ],
        "message": "Replaced strtok with strtok_s\n\n(cherry picked from commit 7890833af8a891765a475bd7ae2a756aeddd4977)",
        "before_after_code_files": [
          "client/X11/xf_event.c||client/X11/xf_event.c",
          "client/X11/xf_keyboard.c||client/X11/xf_keyboard.c",
          "client/common/cmdline.c||client/common/cmdline.c",
          "libfreerdp/crypto/tls.c||libfreerdp/crypto/tls.c",
          "winpr/libwinpr/smartcard/smartcard_pcsc.c||winpr/libwinpr/smartcard/smartcard_pcsc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/X11/xf_event.c||client/X11/xf_event.c": [
          "File: client/X11/xf_event.c -> client/X11/xf_event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:  while (fgets(buffer, sizeof(buffer), actionScript))",
          "187:  {",
          "189:   xevent = _strdup(buffer);",
          "191:   if (!xevent || ArrayList_Add(xfc->xevents, xevent) < 0)",
          "",
          "[Removed Lines]",
          "188:   strtok(buffer, \"\\n\");",
          "",
          "[Added Lines]",
          "188:   char* context = NULL;",
          "189:   strtok_s(buffer, \"\\n\", &context);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:  while (fgets(buffer, sizeof(buffer), actionScript))",
          "255:  {",
          "257:  }",
          "259:  pclose(actionScript);",
          "",
          "[Removed Lines]",
          "256:   strtok(buffer, \"\\n\");",
          "",
          "[Added Lines]",
          "257:   char* context = NULL;",
          "258:   strtok_s(buffer, \"\\n\", &context);",
          "",
          "---------------"
        ],
        "client/X11/xf_keyboard.c||client/X11/xf_keyboard.c": [
          "File: client/X11/xf_keyboard.c -> client/X11/xf_keyboard.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75:  while (fgets(buffer, sizeof(buffer), keyScript) != NULL)",
          "76:  {",
          "78:   keyCombination = _strdup(buffer);",
          "80:   if (!keyCombination || ArrayList_Add(xfc->keyCombinations, keyCombination) < 0)",
          "",
          "[Removed Lines]",
          "77:   strtok(buffer, \"\\n\");",
          "",
          "[Added Lines]",
          "77:   char* context = NULL;",
          "78:   strtok_s(buffer, \"\\n\", &context);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "434:  while (fgets(buffer, sizeof(buffer), keyScript) != NULL)",
          "435:  {",
          "438:   if (strcmp(buffer, \"key-local\") == 0)",
          "439:    status = 0;",
          "",
          "[Removed Lines]",
          "436:   strtok(buffer, \"\\n\");",
          "",
          "[Added Lines]",
          "437:   char* context = NULL;",
          "438:   strtok_s(buffer, \"\\n\", &context);",
          "",
          "---------------"
        ],
        "client/common/cmdline.c||client/common/cmdline.c": [
          "File: client/common/cmdline.c -> client/common/cmdline.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3500:    BOOL success;",
          "3501:    const char* name = NULL;",
          "3502:    const char* drive = tok;",
          "3505:    if (start && end)",
          "3506:     name = end;",
          "",
          "[Removed Lines]",
          "3503:    char* start = strtok(tok, \"(\");",
          "3504:    char* end = strtok(NULL, \")\");",
          "",
          "[Added Lines]",
          "3503:    char* subcontext = NULL;",
          "3504:    char* start = strtok_s(tok, \"(\", &subcontext);",
          "3505:    char* end = strtok_s(NULL, \")\", &subcontext);",
          "",
          "---------------"
        ],
        "libfreerdp/crypto/tls.c||libfreerdp/crypto/tls.c": [
          "File: libfreerdp/crypto/tls.c -> libfreerdp/crypto/tls.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1198:   char* cur = strtok_s(copy, \",\", &context);",
          "1199:   while (cur)",
          "1200:   {",
          "1201:    BOOL equal;",
          "1202:    char* strhash;",
          "1204:    const char* fp;",
          "1206:    if (!h)",
          "",
          "[Removed Lines]",
          "1203:    const char* h = strtok(cur, \":\");",
          "",
          "[Added Lines]",
          "1201:    char* subcontext = NULL;",
          "1204:    const char* h = strtok_s(cur, \":\", &subcontext);",
          "",
          "---------------"
        ],
        "winpr/libwinpr/smartcard/smartcard_pcsc.c||winpr/libwinpr/smartcard/smartcard_pcsc.c": [
          "File: winpr/libwinpr/smartcard/smartcard_pcsc.c -> winpr/libwinpr/smartcard/smartcard_pcsc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2930:  long minorVersion = 0;",
          "2931:  long patchVersion = 0;",
          "2932:  int count = 0;",
          "2933:  mib[0] = CTL_KERN;",
          "2934:  mib[1] = KERN_OSRELEASE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2933:  char* context = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2947:   return 0;",
          "2948:  }",
          "2951:  errno = 0;",
          "2953:  while (tok)",
          "",
          "[Removed Lines]",
          "2950:  tok = strtok(kernelVersion, \".\");",
          "",
          "[Added Lines]",
          "2951:  tok = strtok_s(kernelVersion, \".\", &context);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2979:     break;",
          "2980:   }",
          "2983:   count++;",
          "2984:  }",
          "",
          "[Removed Lines]",
          "2982:   tok = strtok(NULL, \".\");",
          "",
          "[Added Lines]",
          "2983:   tok = strtok_s(NULL, \".\", &context);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a2ce9b8bdd53b4ccfb16d795d75c42396070a72",
      "candidate_info": {
        "commit_hash": "3a2ce9b8bdd53b4ccfb16d795d75c42396070a72",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/3a2ce9b8bdd53b4ccfb16d795d75c42396070a72",
        "files": [
          "channels/rail/client/rail_orders.c",
          "channels/rail/rail_common.c",
          "channels/rail/rail_common.h",
          "channels/rail/server/rail_main.c"
        ],
        "message": "Fixed rails debug string warnings.\n\n(cherry picked from commit e58ea30305e8754ada82018c4f2042ec1b72337c)",
        "before_after_code_files": [
          "channels/rail/client/rail_orders.c||channels/rail/client/rail_orders.c",
          "channels/rail/rail_common.c||channels/rail/rail_common.c",
          "channels/rail/rail_common.h||channels/rail/rail_common.h",
          "channels/rail/server/rail_main.c||channels/rail/server/rail_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/rail/client/rail_orders.c||channels/rail/client/rail_orders.c": [
          "File: channels/rail/client/rail_orders.c -> channels/rail/client/rail_orders.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "49:  rail_write_pdu_header(s, orderType, orderLength);",
          "50:  Stream_SetPosition(s, orderLength);",
          "51:  WLog_Print(rail->log, WLOG_DEBUG, \"Sending %s PDU, length: %\" PRIu16 \"\",",
          "54:  return rail_send_channel_data(rail, s);",
          "55: }",
          "",
          "[Removed Lines]",
          "52:             RAIL_ORDER_TYPE_STRINGS[((orderType & 0xF0) >> 3) + (orderType & 0x0F)],",
          "53:             orderLength);",
          "",
          "[Added Lines]",
          "52:             rail_get_order_type_string(orderType), orderLength);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "926:  }",
          "928:  WLog_Print(rail->log, WLOG_DEBUG, \"Received %s PDU, length:%\" PRIu16 \"\",",
          "932:  switch (orderType)",
          "933:  {",
          "",
          "[Removed Lines]",
          "929:             RAIL_ORDER_TYPE_STRINGS[((orderType & 0xF0) >> 3) + (orderType & 0x0F)],",
          "930:             orderLength);",
          "",
          "[Added Lines]",
          "928:             rail_get_order_type_string(orderType), orderLength);",
          "",
          "---------------"
        ],
        "channels/rail/rail_common.c||channels/rail/rail_common.c": [
          "File: channels/rail/rail_common.c -> channels/rail/rail_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #define TAG CHANNELS_TAG(\"rail.common\")",
          "",
          "[Removed Lines]",
          "30: const char* const RAIL_ORDER_TYPE_STRINGS[] = { \"\",",
          "31:                                              \"Execute\",",
          "32:                                              \"Activate\",",
          "33:                                              \"System Parameters Update\",",
          "34:                                              \"System Command\",",
          "35:                                              \"Handshake\",",
          "36:                                              \"Notify Event\",",
          "37:                                              \"\",",
          "38:                                              \"Window Move\",",
          "39:                                              \"Local Move/Size\",",
          "40:                                              \"Min Max Info\",",
          "41:                                              \"Client Status\",",
          "42:                                              \"System Menu\",",
          "43:                                              \"Language Bar Info\",",
          "44:                                              \"Get Application ID Request\",",
          "45:                                              \"Get Application ID Response\",",
          "46:                                              \"Execute Result\",",
          "47:                                              \"\",",
          "48:                                              \"\",",
          "49:                                              \"\",",
          "50:                                              \"\",",
          "51:                                              \"\",",
          "52:                                              \"\" };",
          "",
          "[Added Lines]",
          "30: static const char* const RAIL_ORDER_TYPE_STRINGS[] = { \"\",",
          "31:                                                     \"Execute\",",
          "32:                                                     \"Activate\",",
          "33:                                                     \"System Parameters Update\",",
          "34:                                                     \"System Command\",",
          "35:                                                     \"Handshake\",",
          "36:                                                     \"Notify Event\",",
          "37:                                                     \"\",",
          "38:                                                     \"Window Move\",",
          "39:                                                     \"Local Move/Size\",",
          "40:                                                     \"Min Max Info\",",
          "41:                                                     \"Client Status\",",
          "42:                                                     \"System Menu\",",
          "43:                                                     \"Language Bar Info\",",
          "44:                                                     \"Get Application ID Request\",",
          "45:                                                     \"Get Application ID Response\",",
          "46:                                                     \"Execute Result\",",
          "47:                                                     \"\",",
          "48:                                                     \"\",",
          "49:                                                     \"\",",
          "50:                                                     \"\",",
          "51:                                                     \"\",",
          "52:                                                     \"\" };",
          "54: const char* rail_get_order_type_string(BYTE orderType)",
          "55: {",
          "56:  return RAIL_ORDER_TYPE_STRINGS[((orderType & 0xF0) >> 3) + (orderType & 0x0F)];",
          "57: }",
          "",
          "---------------"
        ],
        "channels/rail/rail_common.h||channels/rail/rail_common.h": [
          "File: channels/rail/rail_common.h -> channels/rail/rail_common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include <freerdp/rail.h>",
          "31: #define RAIL_PDU_HEADER_LENGTH 4",
          "",
          "[Removed Lines]",
          "29: extern const char* const RAIL_ORDER_TYPE_STRINGS[];",
          "",
          "[Added Lines]",
          "29: const char* rail_get_order_type_string(BYTE orderType);",
          "",
          "---------------"
        ],
        "channels/rail/server/rail_main.c||channels/rail/server/rail_main.c": [
          "File: channels/rail/server/rail_main.c -> channels/rail/server/rail_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:  Stream_SetPosition(s, 0);",
          "72:  rail_write_pdu_header(s, orderType, orderLength);",
          "73:  Stream_SetPosition(s, orderLength);",
          "76:  return rail_send(context, s, orderLength);",
          "77: }",
          "",
          "[Removed Lines]",
          "74:  WLog_DBG(TAG, \"Sending %s PDU, length: %\" PRIu16 \"\",",
          "75:           RAIL_ORDER_TYPE_STRINGS[((orderType & 0xF0) >> 3) + (orderType & 0x0F)], orderLength);",
          "",
          "[Added Lines]",
          "74:  WLog_DBG(TAG, \"Sending %s PDU, length: %\" PRIu16 \"\", rail_get_order_type_string(orderType),",
          "75:           orderLength);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1573:   return ERROR_INTERNAL_ERROR;",
          "1574:  }",
          "1579:  switch (orderType)",
          "1580:  {",
          "",
          "[Removed Lines]",
          "1576:  WLog_DBG(TAG, \"Received %s PDU, length:%\" PRIu16 \"\",",
          "1577:           RAIL_ORDER_TYPE_STRINGS[((orderType & 0xF0) >> 3) + (orderType & 0x0F)], orderLength);",
          "",
          "[Added Lines]",
          "1576:  WLog_DBG(TAG, \"Received %s PDU, length:%\" PRIu16 \"\", rail_get_order_type_string(orderType),",
          "1577:           orderLength);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2897576c3dee3b8d21e41792aeabae1f12437d95",
      "candidate_info": {
        "commit_hash": "2897576c3dee3b8d21e41792aeabae1f12437d95",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/2897576c3dee3b8d21e41792aeabae1f12437d95",
        "files": [
          "winpr/libwinpr/sspi/test/TestNTLM.c"
        ],
        "message": "Fixed memory leak in NTLM test\n\n(cherry picked from commit 135458cf27160d50e6294f87ef80f27f1f65d319)",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/test/TestNTLM.c||winpr/libwinpr/sspi/test/TestNTLM.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/test/TestNTLM.c||winpr/libwinpr/sspi/test/TestNTLM.c": [
          "File: winpr/libwinpr/sspi/test/TestNTLM.c -> winpr/libwinpr/sspi/test/TestNTLM.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "470: int TestNTLM(int argc, char* argv[])",
          "471: {",
          "472:  int status;",
          "473:  PSecBuffer pSecBuffer;",
          "476:  BOOL DynamicTest = TRUE;",
          "",
          "[Removed Lines]",
          "474:  TEST_NTLM_CLIENT* client;",
          "475:  TEST_NTLM_SERVER* server;",
          "",
          "[Added Lines]",
          "473:  int rc = -1;",
          "475:  TEST_NTLM_CLIENT* client = NULL;",
          "476:  TEST_NTLM_SERVER* server = NULL;",
          "479:  WINPR_UNUSED(argc);",
          "480:  WINPR_UNUSED(argv);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "482:  if (!client)",
          "483:  {",
          "484:   printf(\"Memory allocation failed\");",
          "486:  }",
          "488:  status = test_ntlm_client_init(client, TEST_NTLM_USER, TEST_NTLM_DOMAIN, TEST_NTLM_PASSWORD);",
          "",
          "[Removed Lines]",
          "485:   return -1;",
          "",
          "[Added Lines]",
          "490:   goto fail;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "490:  if (status < 0)",
          "491:  {",
          "492:   printf(\"test_ntlm_client_init failure\\n\");",
          "494:  }",
          "",
          "[Removed Lines]",
          "493:   return -1;",
          "",
          "[Added Lines]",
          "498:   goto fail;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "501:  if (!server)",
          "502:  {",
          "503:   printf(\"Memory allocation failed\\n\");",
          "505:  }",
          "507:  status = test_ntlm_server_init(server);",
          "",
          "[Removed Lines]",
          "504:   return -1;",
          "",
          "[Added Lines]",
          "509:   goto fail;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "509:  if (status < 0)",
          "510:  {",
          "511:   printf(\"test_ntlm_server_init failure\\n\");",
          "513:  }",
          "",
          "[Removed Lines]",
          "512:   return -1;",
          "",
          "[Added Lines]",
          "517:   goto fail;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "520:  if (status < 0)",
          "521:  {",
          "522:   printf(\"test_ntlm_client_authenticate failure\\n\");",
          "524:  }",
          "526:  if (!DynamicTest)",
          "",
          "[Removed Lines]",
          "523:   return -1;",
          "",
          "[Added Lines]",
          "528:   goto fail;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "557:   if (!pSecBuffer->pvBuffer)",
          "558:   {",
          "559:    printf(\"Memory allocation failed\\n\");",
          "561:   }",
          "563:   CopyMemory(pSecBuffer->pvBuffer, TEST_NTLM_NEGOTIATE, pSecBuffer->cbBuffer);",
          "",
          "[Removed Lines]",
          "560:    return -1;",
          "",
          "[Added Lines]",
          "565:    goto fail;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "578:  if (status < 0)",
          "579:  {",
          "580:   printf(\"test_ntlm_server_authenticate failure\\n\");",
          "582:  }",
          "584:  if (!DynamicTest)",
          "",
          "[Removed Lines]",
          "581:   return -1;",
          "",
          "[Added Lines]",
          "586:   goto fail;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "616:   if (!pSecBuffer->pvBuffer)",
          "617:   {",
          "618:    printf(\"Memory allocation failed\\n\");",
          "620:   }",
          "622:   CopyMemory(pSecBuffer->pvBuffer, TEST_NTLM_CHALLENGE, pSecBuffer->cbBuffer);",
          "",
          "[Removed Lines]",
          "619:    return -1;",
          "",
          "[Added Lines]",
          "624:    goto fail;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "643:  if (status < 0)",
          "644:  {",
          "645:   printf(\"test_ntlm_client_authenticate failure\\n\");",
          "647:  }",
          "649:  pSecBuffer = &(client->outputBuffer[0]);",
          "",
          "[Removed Lines]",
          "646:   return -1;",
          "",
          "[Added Lines]",
          "651:   goto fail;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "656:   if (!pSecBuffer->pvBuffer)",
          "657:   {",
          "658:    printf(\"Memory allocation failed\\n\");",
          "660:   }",
          "662:   CopyMemory(pSecBuffer->pvBuffer, TEST_NTLM_AUTHENTICATE, pSecBuffer->cbBuffer);",
          "",
          "[Removed Lines]",
          "659:    return -1;",
          "",
          "[Added Lines]",
          "664:    goto fail;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "676:  if (status < 0)",
          "677:  {",
          "678:   printf(\"test_ntlm_server_authenticate failure\\n\");",
          "680:  }",
          "685:  test_ntlm_client_free(client);",
          "686:  test_ntlm_server_free(server);",
          "688: }",
          "",
          "[Removed Lines]",
          "679:   return -1;",
          "687:  return 0;",
          "",
          "[Added Lines]",
          "684:   goto fail;",
          "687:  rc = 0;",
          "689: fail:",
          "695:  return rc;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3fe4650b2c4d09852fc5339f6e1d91fa24213c15",
      "candidate_info": {
        "commit_hash": "3fe4650b2c4d09852fc5339f6e1d91fa24213c15",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/3fe4650b2c4d09852fc5339f6e1d91fa24213c15",
        "files": [
          "channels/audin/client/audin_main.c",
          "channels/disp/client/disp_main.c",
          "channels/drdynvc/client/drdynvc_main.c",
          "channels/echo/client/echo_main.c",
          "channels/geometry/client/geometry_main.c",
          "channels/rdpei/client/rdpei_main.c",
          "channels/rdpgfx/client/rdpgfx_main.c",
          "channels/rdpsnd/client/rdpsnd_main.c",
          "channels/urbdrc/client/urbdrc_main.c",
          "channels/urbdrc/client/urbdrc_main.h",
          "channels/video/client/video_main.c"
        ],
        "message": "Fixed DestroyListener arguments and call order\n\n(cherry picked from commit 0e08727d4ecff2777884a23bc33961f63d52465e)",
        "before_after_code_files": [
          "channels/audin/client/audin_main.c||channels/audin/client/audin_main.c",
          "channels/disp/client/disp_main.c||channels/disp/client/disp_main.c",
          "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c",
          "channels/echo/client/echo_main.c||channels/echo/client/echo_main.c",
          "channels/geometry/client/geometry_main.c||channels/geometry/client/geometry_main.c",
          "channels/rdpei/client/rdpei_main.c||channels/rdpei/client/rdpei_main.c",
          "channels/rdpgfx/client/rdpgfx_main.c||channels/rdpgfx/client/rdpgfx_main.c",
          "channels/rdpsnd/client/rdpsnd_main.c||channels/rdpsnd/client/rdpsnd_main.c",
          "channels/urbdrc/client/urbdrc_main.c||channels/urbdrc/client/urbdrc_main.c",
          "channels/urbdrc/client/urbdrc_main.h||channels/urbdrc/client/urbdrc_main.h",
          "channels/video/client/video_main.c||channels/video/client/video_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/audin/client/audin_main.c||channels/audin/client/audin_main.c": [
          "File: channels/audin/client/audin_main.c -> channels/audin/client/audin_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:  FREERDP_DSP_CONTEXT* dsp_context;",
          "102:  wLog* log;",
          "103: };",
          "105: static BOOL audin_process_addin_args(AUDIN_PLUGIN* audin, ADDIN_ARGV* args);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "104:  IWTSListener* listener;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "687:  audin->listener_callback->plugin = pPlugin;",
          "688:  audin->listener_callback->channel_mgr = pChannelMgr;",
          "689:  return pChannelMgr->CreateListener(pChannelMgr, \"AUDIO_INPUT\", 0,",
          "691: }",
          "",
          "[Removed Lines]",
          "690:                                     &audin->listener_callback->iface, NULL);",
          "",
          "[Added Lines]",
          "692:                                     &audin->listener_callback->iface, &audin->listener);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "709:  {",
          "710:   IWTSVirtualChannelManager* mgr = audin->listener_callback->channel_mgr;",
          "711:   if (mgr)",
          "713:  }",
          "714:  audio_formats_free(audin->fixed_format, 1);",
          "",
          "[Removed Lines]",
          "712:    IFCALL(mgr->DestroyListener, mgr, &audin->iface);",
          "",
          "[Added Lines]",
          "714:    IFCALL(mgr->DestroyListener, mgr, audin->listener);",
          "",
          "---------------"
        ],
        "channels/disp/client/disp_main.c||channels/disp/client/disp_main.c": [
          "File: channels/disp/client/disp_main.c -> channels/disp/client/disp_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "326:  {",
          "327:   IWTSVirtualChannelManager* mgr = disp->listener_callback->channel_mgr;",
          "328:   if (mgr)",
          "330:  }",
          "332:  free(disp->listener_callback);",
          "",
          "[Removed Lines]",
          "329:    IFCALL(mgr->DestroyListener, mgr, &disp->iface);",
          "",
          "[Added Lines]",
          "329:    IFCALL(mgr->DestroyListener, mgr, disp->listener);",
          "",
          "---------------"
        ],
        "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c": [
          "File: channels/drdynvc/client/drdynvc_main.c -> channels/drdynvc/client/drdynvc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:   WLog_ERR(TAG, \"Terminated failed with error %\" PRIu32 \"!\", error);",
          "218: }",
          "220: static IWTSVirtualChannelManager* dvcman_new(drdynvcPlugin* plugin)",
          "221: {",
          "222:  wObject* obj;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: static void wts_listener_free(void* arg)",
          "222: {",
          "223:  DVCMAN_LISTENER* listener = (DVCMAN_LISTENER*)arg;",
          "224:  dvcman_wtslistener_free(listener);",
          "225: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:  if (!dvcman->listeners)",
          "249:   goto fail;",
          "250:  obj = ArrayList_Object(dvcman->listeners);",
          "253:  dvcman->plugin_names = ArrayList_New(TRUE);",
          "254:  if (!dvcman->plugin_names)",
          "",
          "[Removed Lines]",
          "251:  obj->fnObjectFree = dvcman_wtslistener_free;",
          "",
          "[Added Lines]",
          "257:  obj->fnObjectFree = wts_listener_free;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "378: {",
          "379:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "382:  ArrayList_Free(dvcman->channels);",
          "383:  ArrayList_Free(dvcman->plugin_names);",
          "386:  StreamPool_Free(dvcman->pool);",
          "387:  free(dvcman);",
          "",
          "[Removed Lines]",
          "381:  ArrayList_Free(dvcman->listeners);",
          "384:  ArrayList_Free(dvcman->plugins);",
          "",
          "[Added Lines]",
          "387:  ArrayList_Free(dvcman->plugins);",
          "390:  ArrayList_Free(dvcman->listeners);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "580: static UINT dvcman_close_channel(IWTSVirtualChannelManager* pChannelMgr, UINT32 ChannelId,",
          "581:                                  BOOL bSendClosePDU)",
          "582: {",
          "584:  DVCMAN_CHANNEL* channel;",
          "585:  UINT error = CHANNEL_RC_OK;",
          "586:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "",
          "[Removed Lines]",
          "583:  size_t i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "614:   }",
          "615:  }",
          "625:  ArrayList_Remove(dvcman->channels, channel);",
          "626:  return error;",
          "627: }",
          "",
          "[Removed Lines]",
          "617:  ArrayList_Lock(dvcman->listeners);",
          "618:  for (i = ArrayList_Count(dvcman->listeners); i > 0; i--)",
          "619:  {",
          "620:   DVCMAN_LISTENER* listener = ArrayList_GetItem(dvcman->listeners, i - 1);",
          "621:   if (strcmp(listener->channel_name, channel->channel_name) == 0)",
          "622:    ArrayList_Remove(dvcman->listeners, listener);",
          "623:  }",
          "624:  ArrayList_Unlock(dvcman->listeners);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "channels/echo/client/echo_main.c||channels/echo/client/echo_main.c": [
          "File: channels/echo/client/echo_main.c -> channels/echo/client/echo_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:  IWTSPlugin iface;",
          "61:  ECHO_LISTENER_CALLBACK* listener_callback;",
          "62: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:  IWTSListener* listener;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:  echo->listener_callback->channel_mgr = pChannelMgr;",
          "145:  return pChannelMgr->CreateListener(pChannelMgr, \"ECHO\", 0, &echo->listener_callback->iface,",
          "147: }",
          "",
          "[Removed Lines]",
          "146:                                     NULL);",
          "",
          "[Added Lines]",
          "147:                                     &echo->listener);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "158:  {",
          "159:   IWTSVirtualChannelManager* mgr = echo->listener_callback->channel_mgr;",
          "160:   if (mgr)",
          "162:  }",
          "163:  free(echo);",
          "",
          "[Removed Lines]",
          "161:    IFCALL(mgr->DestroyListener, mgr, &echo->iface);",
          "",
          "[Added Lines]",
          "162:    IFCALL(mgr->DestroyListener, mgr, echo->listener);",
          "",
          "---------------"
        ],
        "channels/geometry/client/geometry_main.c||channels/geometry/client/geometry_main.c": [
          "File: channels/geometry/client/geometry_main.c -> channels/geometry/client/geometry_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:  {",
          "432:   IWTSVirtualChannelManager* mgr = geometry->listener_callback->channel_mgr;",
          "433:   if (mgr)",
          "435:  }",
          "437:  if (context)",
          "",
          "[Removed Lines]",
          "434:    IFCALL(mgr->DestroyListener, mgr, &geometry->iface);",
          "",
          "[Added Lines]",
          "434:    IFCALL(mgr->DestroyListener, mgr, geometry->listener);",
          "",
          "---------------"
        ],
        "channels/rdpei/client/rdpei_main.c||channels/rdpei/client/rdpei_main.c": [
          "File: channels/rdpei/client/rdpei_main.c -> channels/rdpei/client/rdpei_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "601:  {",
          "602:   IWTSVirtualChannelManager* mgr = rdpei->listener_callback->channel_mgr;",
          "603:   if (mgr)",
          "605:  }",
          "606:  free(rdpei->listener_callback);",
          "607:  free(rdpei->context);",
          "",
          "[Removed Lines]",
          "604:    IFCALL(mgr->DestroyListener, mgr, &rdpei->iface);",
          "",
          "[Added Lines]",
          "604:    IFCALL(mgr->DestroyListener, mgr, rdpei->listener);",
          "",
          "---------------"
        ],
        "channels/rdpgfx/client/rdpgfx_main.c||channels/rdpgfx/client/rdpgfx_main.c": [
          "File: channels/rdpgfx/client/rdpgfx_main.c -> channels/rdpgfx/client/rdpgfx_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1916:  {",
          "1917:   IWTSVirtualChannelManager* mgr = gfx->listener_callback->channel_mgr;",
          "1918:   if (mgr)",
          "1920:  }",
          "1921:  rdpgfx_client_context_free(context);",
          "1922:  return CHANNEL_RC_OK;",
          "",
          "[Removed Lines]",
          "1919:    IFCALL(mgr->DestroyListener, mgr, &gfx->iface);",
          "",
          "[Added Lines]",
          "1919:    IFCALL(mgr->DestroyListener, mgr, gfx->listener);",
          "",
          "---------------"
        ],
        "channels/rdpsnd/client/rdpsnd_main.c||channels/rdpsnd/client/rdpsnd_main.c": [
          "File: channels/rdpsnd/client/rdpsnd_main.c -> channels/rdpsnd/client/rdpsnd_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1560:   {",
          "1561:    IWTSVirtualChannelManager* mgr = rdpsnd->listener_callback->channel_mgr;",
          "1562:    if (mgr)",
          "1564:   }",
          "1565:   free(rdpsnd->listener_callback);",
          "1566:   free(rdpsnd->iface.pInterface);",
          "",
          "[Removed Lines]",
          "1563:     IFCALL(mgr->DestroyListener, mgr, &rdpsnd->iface);",
          "",
          "[Added Lines]",
          "1563:     IFCALL(mgr->DestroyListener, mgr, rdpsnd->listener);",
          "",
          "---------------"
        ],
        "channels/urbdrc/client/urbdrc_main.c||channels/urbdrc/client/urbdrc_main.c": [
          "File: channels/urbdrc/client/urbdrc_main.c -> channels/urbdrc/client/urbdrc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "688:  CharUpperA(channelName);",
          "689:  status = pChannelMgr->CreateListener(pChannelMgr, channelName, 0,",
          "691:  if (status != CHANNEL_RC_OK)",
          "692:   return status;",
          "",
          "[Removed Lines]",
          "690:                                       &urbdrc->listener_callback->iface, NULL);",
          "",
          "[Added Lines]",
          "690:                                       &urbdrc->listener_callback->iface, &urbdrc->listener);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "713:  {",
          "714:   IWTSVirtualChannelManager* mgr = urbdrc->listener_callback->channel_mgr;",
          "715:   if (mgr)",
          "717:  }",
          "718:  udevman = urbdrc->udevman;",
          "",
          "[Removed Lines]",
          "716:    IFCALL(mgr->DestroyListener, mgr, &urbdrc->iface);",
          "",
          "[Added Lines]",
          "716:    IFCALL(mgr->DestroyListener, mgr, urbdrc->listener);",
          "",
          "---------------"
        ],
        "channels/urbdrc/client/urbdrc_main.h||channels/urbdrc/client/urbdrc_main.h": [
          "File: channels/urbdrc/client/urbdrc_main.h -> channels/urbdrc/client/urbdrc_main.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:  char* subsystem;",
          "86:  wLog* log;",
          "87: };",
          "89: typedef BOOL (*PREGISTERURBDRCSERVICE)(IWTSPlugin* plugin, IUDEVMAN* udevman);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:  IWTSListener* listener;",
          "",
          "---------------"
        ],
        "channels/video/client/video_main.c||channels/video/client/video_main.c": [
          "File: channels/video/client/video_main.c -> channels/video/client/video_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1088:  {",
          "1089:   IWTSVirtualChannelManager* mgr = video->control_callback->channel_mgr;",
          "1090:   if (mgr)",
          "1092:  }",
          "1093:  if (video->data_callback)",
          "1094:  {",
          "1095:   IWTSVirtualChannelManager* mgr = video->data_callback->channel_mgr;",
          "1096:   if (mgr)",
          "1098:  }",
          "1100:  if (video->context)",
          "",
          "[Removed Lines]",
          "1091:    IFCALL(mgr->DestroyListener, mgr, &video->control_callback->iface);",
          "1097:    IFCALL(mgr->DestroyListener, mgr, &video->data_callback->iface);",
          "",
          "[Added Lines]",
          "1091:    IFCALL(mgr->DestroyListener, mgr, video->controlListener);",
          "1097:    IFCALL(mgr->DestroyListener, mgr, video->dataListener);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ca246a6bfd3b085b61695f458b863f2d60e082c2",
      "candidate_info": {
        "commit_hash": "ca246a6bfd3b085b61695f458b863f2d60e082c2",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/ca246a6bfd3b085b61695f458b863f2d60e082c2",
        "files": [
          "channels/drdynvc/client/drdynvc_main.c"
        ],
        "message": "Clear dynamic channel lists on disconnect.\n\n(cherry picked from commit a1eb3e66b31579d3d878dee67913962140f75255)",
        "before_after_code_files": [
          "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "channels/drdynvc/client/drdynvc_main.c||channels/drdynvc/client/drdynvc_main.c": [
          "File: channels/drdynvc/client/drdynvc_main.c -> channels/drdynvc/client/drdynvc_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:  free(channel);",
          "382: }",
          "384: static void dvcman_free(drdynvcPlugin* drdynvc, IWTSVirtualChannelManager* pChannelMgr)",
          "385: {",
          "386:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "388:  ArrayList_Free(dvcman->plugins);",
          "389:  ArrayList_Free(dvcman->channels);",
          "390:  ArrayList_Free(dvcman->plugin_names);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "384: static void dvcman_clear(drdynvcPlugin* drdynvc, IWTSVirtualChannelManager* pChannelMgr)",
          "385: {",
          "386:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "388:  WINPR_UNUSED(drdynvc);",
          "390:  ArrayList_Clear(dvcman->plugins);",
          "391:  ArrayList_Clear(dvcman->channels);",
          "392:  ArrayList_Clear(dvcman->plugin_names);",
          "393:  ArrayList_Clear(dvcman->listeners);",
          "394: }",
          "400:  WINPR_UNUSED(drdynvc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473:  BOOL bAccept;",
          "474:  DVCMAN_CHANNEL* channel;",
          "475:  DrdynvcClientContext* context;",
          "477:  DVCMAN* dvcman = (DVCMAN*)pChannelMgr;",
          "478:  UINT error;",
          "",
          "[Removed Lines]",
          "476:  IWTSVirtualChannelCallback* pCallback;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "495:   if (strcmp(listener->channel_name, ChannelName) == 0)",
          "496:   {",
          "497:    channel->iface.Write = dvcman_write_channel;",
          "498:    channel->iface.Close = dvcman_close_channel_iface;",
          "499:    bAccept = TRUE;",
          "502:    if ((error = listener->listener_callback->OnNewChannelConnection(",
          "503:             listener->listener_callback, &channel->iface, NULL, &bAccept, &pCallback)) ==",
          "",
          "[Removed Lines]",
          "500:    pCallback = NULL;",
          "",
          "[Added Lines]",
          "510:    IWTSVirtualChannelCallback* pCallback = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1547:              WTSErrorToString(status), status);",
          "1548:  }",
          "1550:  drdynvc->OpenHandle = 0;",
          "1552:  if (drdynvc->data_in)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1563:  dvcman_clear(drdynvc, drdynvc->channel_mgr);",
          "1564:  MessageQueue_Clear(drdynvc->queue);",
          "",
          "---------------"
        ]
      }
    }
  ]
}