{
  "cve_id": "CVE-2020-10767",
  "cve_desc": "A flaw was found in the Linux kernel before 5.8-rc1 in the implementation of the Enhanced IBPB (Indirect Branch Prediction Barrier). The IBPB mitigation will be disabled when STIBP is not available or when the Enhanced Indirect Branch Restricted Speculation (IBRS) is available. This flaw allows a local attacker to perform a Spectre V2 style attack when this configuration is active. The highest threat from this vulnerability is to confidentiality.",
  "repo": "torvalds/linux",
  "patch_hash": "21998a351512eba4ed5969006f0c55882d995ada",
  "patch_info": {
    "commit_hash": "21998a351512eba4ed5969006f0c55882d995ada",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/21998a351512eba4ed5969006f0c55882d995ada",
    "files": [
      "arch/x86/kernel/cpu/bugs.c"
    ],
    "message": "x86/speculation: Avoid force-disabling IBPB based on STIBP and enhanced IBRS.\n\nWhen STIBP is unavailable or enhanced IBRS is available, Linux\nforce-disables the IBPB mitigation of Spectre-BTB even when simultaneous\nmultithreading is disabled. While attempts to enable IBPB using\nprctl(PR_SET_SPECULATION_CTRL, PR_SPEC_INDIRECT_BRANCH, ...) fail with\nEPERM, the seccomp syscall (or its prctl(PR_SET_SECCOMP, ...) equivalent)\nwhich are used e.g. by Chromium or OpenSSH succeed with no errors but the\napplication remains silently vulnerable to cross-process Spectre v2 attacks\n(classical BTB poisoning). At the same time the SYSFS reporting\n(/sys/devices/system/cpu/vulnerabilities/spectre_v2) displays that IBPB is\nconditionally enabled when in fact it is unconditionally disabled.\n\nSTIBP is useful only when SMT is enabled. When SMT is disabled and STIBP is\nunavailable, it makes no sense to force-disable also IBPB, because IBPB\nprotects against cross-process Spectre-BTB attacks regardless of the SMT\nstate. At the same time since missing STIBP was only observed on AMD CPUs,\nAMD does not recommend using STIBP, but recommends using IBPB, so disabling\nIBPB because of missing STIBP goes directly against AMD's advice:\nhttps://developer.amd.com/wp-content/resources/Architecture_Guidelines_Update_Indirect_Branch_Control.pdf\n\nSimilarly, enhanced IBRS is designed to protect cross-core BTB poisoning\nand BTB-poisoning attacks from user space against kernel (and\nBTB-poisoning attacks from guest against hypervisor), it is not designed\nto prevent cross-process (or cross-VM) BTB poisoning between processes (or\nVMs) running on the same core. Therefore, even with enhanced IBRS it is\nnecessary to flush the BTB during context-switches, so there is no reason\nto force disable IBPB when enhanced IBRS is available.\n\nEnable the prctl control of IBPB even when STIBP is unavailable or enhanced\nIBRS is available.\n\nFixes: 7cc765a67d8e (\"x86/speculation: Enable prctl mode for spectre_v2_user\")\nSigned-off-by: Anthony Steinhauser <asteinhauser@google.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: stable@vger.kernel.org",
    "before_after_code_files": [
      "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
    ]
  },
  "patch_diff": {
    "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c": [
      "File: arch/x86/kernel/cpu/bugs.c -> arch/x86/kernel/cpu/bugs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "495: static enum spectre_v2_mitigation spectre_v2_enabled __ro_after_init =",
      "496:  SPECTRE_V2_NONE;",
      "499:  SPECTRE_V2_USER_NONE;",
      "501: #ifdef CONFIG_RETPOLINE",
      "",
      "[Removed Lines]",
      "498: static enum spectre_v2_user_mitigation spectre_v2_user __ro_after_init =",
      "",
      "[Added Lines]",
      "498: static enum spectre_v2_user_mitigation spectre_v2_user_stibp __ro_after_init =",
      "499:  SPECTRE_V2_USER_NONE;",
      "500: static enum spectre_v2_user_mitigation spectre_v2_user_ibpb __ro_after_init =",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "641:   break;",
      "642:  }",
      "654:  if (boot_cpu_has(X86_FEATURE_IBPB)) {",
      "655:   setup_force_cpu_cap(X86_FEATURE_USE_IBPB);",
      "",
      "[Removed Lines]",
      "649:  if (mode != SPECTRE_V2_USER_STRICT &&",
      "650:      boot_cpu_has(X86_FEATURE_AMD_STIBP_ALWAYS_ON))",
      "651:   mode = SPECTRE_V2_USER_STRICT_PREFERRED;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "672:   pr_info(\"mitigation: Enabling %s Indirect Branch Prediction Barrier\\n\",",
      "673:    static_key_enabled(&switch_mm_always_ibpb) ?",
      "674:    \"always-on\" : \"conditional\");",
      "675:  }",
      "679:   return;",
      "686:   mode = SPECTRE_V2_USER_NONE;",
      "687: set_mode:",
      "692: }",
      "694: static const char * const spectre_v2_strings[] = {",
      "",
      "[Removed Lines]",
      "678:  if (spectre_v2_enabled == SPECTRE_V2_IBRS_ENHANCED)",
      "685:  if (!smt_possible || !boot_cpu_has(X86_FEATURE_STIBP))",
      "688:  spectre_v2_user = mode;",
      "690:  if (smt_possible)",
      "691:   pr_info(\"%s\\n\", spectre_v2_user_strings[mode]);",
      "",
      "[Added Lines]",
      "669:   spectre_v2_user_ibpb = mode;",
      "676:  if (!smt_possible || spectre_v2_enabled == SPECTRE_V2_IBRS_ENHANCED)",
      "684:  if (mode != SPECTRE_V2_USER_STRICT &&",
      "685:      boot_cpu_has(X86_FEATURE_AMD_STIBP_ALWAYS_ON))",
      "686:   mode = SPECTRE_V2_USER_STRICT_PREFERRED;",
      "691:  if (!boot_cpu_has(X86_FEATURE_STIBP))",
      "694:  spectre_v2_user_stibp = mode;",
      "697:  pr_info(\"%s\\n\", spectre_v2_user_strings[mode]);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "921: {",
      "922:  mutex_lock(&spec_ctrl_mutex);",
      "925:  case SPECTRE_V2_USER_NONE:",
      "926:   break;",
      "927:  case SPECTRE_V2_USER_STRICT:",
      "",
      "[Removed Lines]",
      "924:  switch (spectre_v2_user) {",
      "",
      "[Added Lines]",
      "930:  switch (spectre_v2_user_stibp) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1164: {",
      "1165:  switch (ctrl) {",
      "1166:  case PR_SPEC_ENABLE:",
      "1168:    return 0;",
      "1175:    return -EPERM;",
      "1176:   task_clear_spec_ib_disable(task);",
      "1177:   task_update_spec_tif(task);",
      "",
      "[Removed Lines]",
      "1167:   if (spectre_v2_user == SPECTRE_V2_USER_NONE)",
      "1173:   if (spectre_v2_user == SPECTRE_V2_USER_STRICT ||",
      "1174:       spectre_v2_user == SPECTRE_V2_USER_STRICT_PREFERRED)",
      "",
      "[Added Lines]",
      "1173:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_NONE &&",
      "1174:       spectre_v2_user_stibp == SPECTRE_V2_USER_NONE)",
      "1180:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||",
      "1181:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||",
      "1182:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1186:    return -EPERM;",
      "1189:    return 0;",
      "1190:   task_set_spec_ib_disable(task);",
      "1191:   if (ctrl == PR_SPEC_FORCE_DISABLE)",
      "",
      "[Removed Lines]",
      "1185:   if (spectre_v2_user == SPECTRE_V2_USER_NONE)",
      "1187:   if (spectre_v2_user == SPECTRE_V2_USER_STRICT ||",
      "1188:       spectre_v2_user == SPECTRE_V2_USER_STRICT_PREFERRED)",
      "",
      "[Added Lines]",
      "1193:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_NONE &&",
      "1194:       spectre_v2_user_stibp == SPECTRE_V2_USER_NONE)",
      "1196:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||",
      "1197:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||",
      "1198:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED)",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1216: {",
      "1217:  if (ssb_mode == SPEC_STORE_BYPASS_SECCOMP)",
      "1218:   ssb_prctl_set(task, PR_SPEC_FORCE_DISABLE);",
      "1220:   ib_prctl_set(task, PR_SPEC_FORCE_DISABLE);",
      "1221: }",
      "1222: #endif",
      "",
      "[Removed Lines]",
      "1219:  if (spectre_v2_user == SPECTRE_V2_USER_SECCOMP)",
      "",
      "[Added Lines]",
      "1229:  if (spectre_v2_user_ibpb == SPECTRE_V2_USER_SECCOMP ||",
      "1230:      spectre_v2_user_stibp == SPECTRE_V2_USER_SECCOMP)",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1247:  if (!boot_cpu_has_bug(X86_BUG_SPECTRE_V2))",
      "1248:   return PR_SPEC_NOT_AFFECTED;",
      "1252:   return PR_SPEC_ENABLE;",
      "1255:   if (task_spec_ib_force_disable(task))",
      "1256:    return PR_SPEC_PRCTL | PR_SPEC_FORCE_DISABLE;",
      "1257:   if (task_spec_ib_disable(task))",
      "1258:    return PR_SPEC_PRCTL | PR_SPEC_DISABLE;",
      "1259:   return PR_SPEC_PRCTL | PR_SPEC_ENABLE;",
      "1264:   return PR_SPEC_NOT_AFFECTED;",
      "1266: }",
      "1268: int arch_prctl_spec_ctrl_get(struct task_struct *task, unsigned long which)",
      "",
      "[Removed Lines]",
      "1250:  switch (spectre_v2_user) {",
      "1251:  case SPECTRE_V2_USER_NONE:",
      "1253:  case SPECTRE_V2_USER_PRCTL:",
      "1254:  case SPECTRE_V2_USER_SECCOMP:",
      "1260:  case SPECTRE_V2_USER_STRICT:",
      "1261:  case SPECTRE_V2_USER_STRICT_PREFERRED:",
      "1262:   return PR_SPEC_DISABLE;",
      "1263:  default:",
      "1265:  }",
      "",
      "[Added Lines]",
      "1261:  if (spectre_v2_user_ibpb == SPECTRE_V2_USER_NONE &&",
      "1262:      spectre_v2_user_stibp == SPECTRE_V2_USER_NONE)",
      "1264:  else if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||",
      "1265:      spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||",
      "1266:      spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED)",
      "1267:   return PR_SPEC_DISABLE;",
      "1268:  else if (spectre_v2_user_ibpb == SPECTRE_V2_USER_PRCTL ||",
      "1269:      spectre_v2_user_ibpb == SPECTRE_V2_USER_SECCOMP ||",
      "1270:      spectre_v2_user_stibp == SPECTRE_V2_USER_PRCTL ||",
      "1271:      spectre_v2_user_stibp == SPECTRE_V2_USER_SECCOMP) {",
      "1277:  } else",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1501:  if (spectre_v2_enabled == SPECTRE_V2_IBRS_ENHANCED)",
      "1502:   return \"\";",
      "1505:  case SPECTRE_V2_USER_NONE:",
      "1506:   return \", STIBP: disabled\";",
      "1507:  case SPECTRE_V2_USER_STRICT:",
      "",
      "[Removed Lines]",
      "1504:  switch (spectre_v2_user) {",
      "",
      "[Added Lines]",
      "1517:  switch (spectre_v2_user_stibp) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1b42f017415b46c317e71d41c34ec088417a1883",
      "candidate_info": {
        "commit_hash": "1b42f017415b46c317e71d41c34ec088417a1883",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1b42f017415b46c317e71d41c34ec088417a1883",
        "files": [
          "arch/x86/include/asm/cpufeatures.h",
          "arch/x86/include/asm/msr-index.h",
          "arch/x86/include/asm/nospec-branch.h",
          "arch/x86/include/asm/processor.h",
          "arch/x86/kernel/cpu/bugs.c",
          "arch/x86/kernel/cpu/common.c"
        ],
        "message": "x86/speculation/taa: Add mitigation for TSX Async Abort\n\nTSX Async Abort (TAA) is a side channel vulnerability to the internal\nbuffers in some Intel processors similar to Microachitectural Data\nSampling (MDS). In this case, certain loads may speculatively pass\ninvalid data to dependent operations when an asynchronous abort\ncondition is pending in a TSX transaction.\n\nThis includes loads with no fault or assist condition. Such loads may\nspeculatively expose stale data from the uarch data structures as in\nMDS. Scope of exposure is within the same-thread and cross-thread. This\nissue affects all current processors that support TSX, but do not have\nARCH_CAP_TAA_NO (bit 8) set in MSR_IA32_ARCH_CAPABILITIES.\n\nOn CPUs which have their IA32_ARCH_CAPABILITIES MSR bit MDS_NO=0,\nCPUID.MD_CLEAR=1 and the MDS mitigation is clearing the CPU buffers\nusing VERW or L1D_FLUSH, there is no additional mitigation needed for\nTAA. On affected CPUs with MDS_NO=1 this issue can be mitigated by\ndisabling the Transactional Synchronization Extensions (TSX) feature.\n\nA new MSR IA32_TSX_CTRL in future and current processors after a\nmicrocode update can be used to control the TSX feature. There are two\nbits in that MSR:\n\n* TSX_CTRL_RTM_DISABLE disables the TSX sub-feature Restricted\nTransactional Memory (RTM).\n\n* TSX_CTRL_CPUID_CLEAR clears the RTM enumeration in CPUID. The other\nTSX sub-feature, Hardware Lock Elision (HLE), is unconditionally\ndisabled with updated microcode but still enumerated as present by\nCPUID(EAX=7).EBX{bit4}.\n\nThe second mitigation approach is similar to MDS which is clearing the\naffected CPU buffers on return to user space and when entering a guest.\nRelevant microcode update is required for the mitigation to work.  More\ndetails on this approach can be found here:\n\n  https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/mds.html\n\nThe TSX feature can be controlled by the \"tsx\" command line parameter.\nIf it is force-enabled then \"Clear CPU buffers\" (MDS mitigation) is\ndeployed. The effective mitigation state can be read from sysfs.\n\n [ bp:\n   - massage + comments cleanup\n   - s/TAA_MITIGATION_TSX_DISABLE/TAA_MITIGATION_TSX_DISABLED/g - Josh.\n   - remove partial TAA mitigation in update_mds_branch_idle() - Josh.\n   - s/tsx_async_abort_cmdline/tsx_async_abort_parse_cmdline/g\n ]\n\nSigned-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>\nSigned-off-by: Borislav Petkov <bp@suse.de>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nReviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>",
        "before_after_code_files": [
          "arch/x86/include/asm/cpufeatures.h||arch/x86/include/asm/cpufeatures.h",
          "arch/x86/include/asm/msr-index.h||arch/x86/include/asm/msr-index.h",
          "arch/x86/include/asm/nospec-branch.h||arch/x86/include/asm/nospec-branch.h",
          "arch/x86/include/asm/processor.h||arch/x86/include/asm/processor.h",
          "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c",
          "arch/x86/kernel/cpu/common.c||arch/x86/kernel/cpu/common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ],
          "candidate": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/include/asm/cpufeatures.h||arch/x86/include/asm/cpufeatures.h": [
          "File: arch/x86/include/asm/cpufeatures.h -> arch/x86/include/asm/cpufeatures.h"
        ],
        "arch/x86/include/asm/msr-index.h||arch/x86/include/asm/msr-index.h": [
          "File: arch/x86/include/asm/msr-index.h -> arch/x86/include/asm/msr-index.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "98: #define MSR_IA32_FLUSH_CMD  0x0000010b",
          "99: #define L1D_FLUSH   BIT(0) /*",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97: #define ARCH_CAP_TAA_NO   BIT(8) /*",
          "",
          "---------------"
        ],
        "arch/x86/include/asm/nospec-branch.h||arch/x86/include/asm/nospec-branch.h": [
          "File: arch/x86/include/asm/nospec-branch.h -> arch/x86/include/asm/nospec-branch.h"
        ],
        "arch/x86/include/asm/processor.h||arch/x86/include/asm/processor.h": [
          "File: arch/x86/include/asm/processor.h -> arch/x86/include/asm/processor.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "988:  MDS_MITIGATION_VMWERV,",
          "989: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "991: enum taa_mitigations {",
          "992:  TAA_MITIGATION_OFF,",
          "993:  TAA_MITIGATION_UCODE_NEEDED,",
          "994:  TAA_MITIGATION_VERW,",
          "995:  TAA_MITIGATION_TSX_DISABLED,",
          "996: };",
          "",
          "---------------"
        ],
        "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c": [
          "File: arch/x86/kernel/cpu/bugs.c -> arch/x86/kernel/cpu/bugs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: static void __init ssb_select_mitigation(void);",
          "40: static void __init l1tf_select_mitigation(void);",
          "41: static void __init mds_select_mitigation(void);",
          "44: u64 x86_spec_ctrl_base;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: static void __init taa_select_mitigation(void);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:  ssb_select_mitigation();",
          "106:  l1tf_select_mitigation();",
          "107:  mds_select_mitigation();",
          "109:  arch_smt_update();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109:  taa_select_mitigation();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "268: }",
          "269: early_param(\"mds\", mds_cmdline);",
          "271: #undef pr_fmt",
          "272: #define pr_fmt(fmt)     \"Spectre V1 : \" fmt",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "273: #undef pr_fmt",
          "274: #define pr_fmt(fmt) \"TAA: \" fmt",
          "277: static enum taa_mitigations taa_mitigation __ro_after_init = TAA_MITIGATION_VERW;",
          "278: static bool taa_nosmt __ro_after_init;",
          "280: static const char * const taa_strings[] = {",
          "281:  [TAA_MITIGATION_OFF]  = \"Vulnerable\",",
          "282:  [TAA_MITIGATION_UCODE_NEEDED] = \"Vulnerable: Clear CPU buffers attempted, no microcode\",",
          "283:  [TAA_MITIGATION_VERW]  = \"Mitigation: Clear CPU buffers\",",
          "284:  [TAA_MITIGATION_TSX_DISABLED] = \"Mitigation: TSX disabled\",",
          "285: };",
          "287: static void __init taa_select_mitigation(void)",
          "288: {",
          "289:  u64 ia32_cap;",
          "291:  if (!boot_cpu_has_bug(X86_BUG_TAA)) {",
          "292:   taa_mitigation = TAA_MITIGATION_OFF;",
          "293:   return;",
          "294:  }",
          "297:  if (!boot_cpu_has(X86_FEATURE_RTM)) {",
          "298:   taa_mitigation = TAA_MITIGATION_TSX_DISABLED;",
          "299:   goto out;",
          "300:  }",
          "302:  if (cpu_mitigations_off()) {",
          "303:   taa_mitigation = TAA_MITIGATION_OFF;",
          "304:   return;",
          "305:  }",
          "308:  if (taa_mitigation == TAA_MITIGATION_OFF)",
          "309:   goto out;",
          "311:  if (boot_cpu_has(X86_FEATURE_MD_CLEAR))",
          "312:   taa_mitigation = TAA_MITIGATION_VERW;",
          "313:  else",
          "314:   taa_mitigation = TAA_MITIGATION_UCODE_NEEDED;",
          "325:  ia32_cap = x86_read_arch_cap_msr();",
          "326:  if ( (ia32_cap & ARCH_CAP_MDS_NO) &&",
          "327:      !(ia32_cap & ARCH_CAP_TSX_CTRL_MSR))",
          "328:   taa_mitigation = TAA_MITIGATION_UCODE_NEEDED;",
          "337:  static_branch_enable(&mds_user_clear);",
          "339:  if (taa_nosmt || cpu_mitigations_auto_nosmt())",
          "340:   cpu_smt_disable(false);",
          "342: out:",
          "343:  pr_info(\"%s\\n\", taa_strings[taa_mitigation]);",
          "344: }",
          "346: static int __init tsx_async_abort_parse_cmdline(char *str)",
          "347: {",
          "348:  if (!boot_cpu_has_bug(X86_BUG_TAA))",
          "349:   return 0;",
          "351:  if (!str)",
          "352:   return -EINVAL;",
          "354:  if (!strcmp(str, \"off\")) {",
          "355:   taa_mitigation = TAA_MITIGATION_OFF;",
          "356:  } else if (!strcmp(str, \"full\")) {",
          "357:   taa_mitigation = TAA_MITIGATION_VERW;",
          "358:  } else if (!strcmp(str, \"full,nosmt\")) {",
          "359:   taa_mitigation = TAA_MITIGATION_VERW;",
          "360:   taa_nosmt = true;",
          "361:  }",
          "363:  return 0;",
          "364: }",
          "365: early_param(\"tsx_async_abort\", tsx_async_abort_parse_cmdline);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "786: }",
          "788: #define MDS_MSG_SMT \"MDS CPU bug present and SMT on, data leak possible. See https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/mds.html for more details.\\n\"",
          "790: void cpu_bugs_smt_update(void)",
          "791: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "885: #define TAA_MSG_SMT \"TAA CPU bug present and SMT on, data leak possible. See https://www.kernel.org/doc/html/latest/admin-guide/hw-vuln/tsx_async_abort.html for more details.\\n\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "819:   break;",
          "820:  }",
          "822:  mutex_unlock(&spec_ctrl_mutex);",
          "823: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "919:  switch (taa_mitigation) {",
          "920:  case TAA_MITIGATION_VERW:",
          "921:  case TAA_MITIGATION_UCODE_NEEDED:",
          "922:   if (sched_smt_active())",
          "923:    pr_warn_once(TAA_MSG_SMT);",
          "924:   break;",
          "925:  case TAA_MITIGATION_TSX_DISABLED:",
          "926:  case TAA_MITIGATION_OFF:",
          "927:   break;",
          "928:  }",
          "",
          "---------------"
        ],
        "arch/x86/kernel/cpu/common.c||arch/x86/kernel/cpu/common.c": [
          "File: arch/x86/kernel/cpu/common.c -> arch/x86/kernel/cpu/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1128:  if (!cpu_matches(NO_SWAPGS))",
          "1129:   setup_force_cpu_bug(X86_BUG_SWAPGS);",
          "1131:  if (cpu_matches(NO_MELTDOWN))",
          "1132:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1141:  if (!(ia32_cap & ARCH_CAP_TAA_NO) &&",
          "1142:      (cpu_has(c, X86_FEATURE_RTM) ||",
          "1143:       (ia32_cap & ARCH_CAP_TSX_CTRL_MSR)))",
          "1144:   setup_force_cpu_bug(X86_BUG_TAA);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1978b3a53a74e3230cd46932b149c6e62e832e9a",
      "candidate_info": {
        "commit_hash": "1978b3a53a74e3230cd46932b149c6e62e832e9a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1978b3a53a74e3230cd46932b149c6e62e832e9a",
        "files": [
          "arch/x86/kernel/cpu/bugs.c"
        ],
        "message": "x86/speculation: Allow IBPB to be conditionally enabled on CPUs with always-on STIBP\n\nOn AMD CPUs which have the feature X86_FEATURE_AMD_STIBP_ALWAYS_ON,\nSTIBP is set to on and\n\n  spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED\n\nAt the same time, IBPB can be set to conditional.\n\nHowever, this leads to the case where it's impossible to turn on IBPB\nfor a process because in the PR_SPEC_DISABLE case in ib_prctl_set() the\n\n  spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED\n\ncondition leads to a return before the task flag is set. Similarly,\nib_prctl_get() will return PR_SPEC_DISABLE even though IBPB is set to\nconditional.\n\nMore generally, the following cases are possible:\n\n1. STIBP = conditional && IBPB = on for spectre_v2_user=seccomp,ibpb\n2. STIBP = on && IBPB = conditional for AMD CPUs with\n   X86_FEATURE_AMD_STIBP_ALWAYS_ON\n\nThe first case functions correctly today, but only because\nspectre_v2_user_ibpb isn't updated to reflect the IBPB mode.\n\nAt a high level, this change does one thing. If either STIBP or IBPB\nis set to conditional, allow the prctl to change the task flag.\nAlso, reflect that capability when querying the state. This isn't\nperfect since it doesn't take into account if only STIBP or IBPB is\nunconditionally on. But it allows the conditional feature to work as\nexpected, without affecting the unconditional one.\n\n [ bp: Massage commit message and comment; space out statements for\n   better readability. ]\n\nFixes: 21998a351512 (\"x86/speculation: Avoid force-disabling IBPB based on STIBP and enhanced IBRS.\")\nSigned-off-by: Anand K Mistry <amistry@google.com>\nSigned-off-by: Borislav Petkov <bp@suse.de>\nAcked-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: Tom Lendacky <thomas.lendacky@amd.com>\nLink: https://lkml.kernel.org/r/20201105163246.v2.1.Ifd7243cd3e2c2206a893ad0a5b9a4f19549e22c6@changeid",
        "before_after_code_files": [
          "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ],
          "candidate": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c": [
          "File: arch/x86/kernel/cpu/bugs.c -> arch/x86/kernel/cpu/bugs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1254:  return 0;",
          "1255: }",
          "1257: static int ib_prctl_set(struct task_struct *task, unsigned long ctrl)",
          "1258: {",
          "1259:  switch (ctrl) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1257: static bool is_spec_ib_user_controlled(void)",
          "1258: {",
          "1259:  return spectre_v2_user_ibpb == SPECTRE_V2_USER_PRCTL ||",
          "1260:   spectre_v2_user_ibpb == SPECTRE_V2_USER_SECCOMP ||",
          "1261:   spectre_v2_user_stibp == SPECTRE_V2_USER_PRCTL ||",
          "1262:   spectre_v2_user_stibp == SPECTRE_V2_USER_SECCOMP;",
          "1263: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1261:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_NONE &&",
          "1262:       spectre_v2_user_stibp == SPECTRE_V2_USER_NONE)",
          "1263:    return 0;",
          "1272:       task_spec_ib_force_disable(task))",
          "1273:    return -EPERM;",
          "1274:   task_clear_spec_ib_disable(task);",
          "1275:   task_update_spec_tif(task);",
          "1276:   break;",
          "",
          "[Removed Lines]",
          "1269:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||",
          "1270:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||",
          "1271:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED ||",
          "",
          "[Added Lines]",
          "1288:   if (!is_spec_ib_user_controlled() ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1283:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_NONE &&",
          "1284:       spectre_v2_user_stibp == SPECTRE_V2_USER_NONE)",
          "1285:    return -EPERM;",
          "1289:    return 0;",
          "1290:   task_set_spec_ib_disable(task);",
          "1291:   if (ctrl == PR_SPEC_FORCE_DISABLE)",
          "1292:    task_set_spec_ib_force_disable(task);",
          "",
          "[Removed Lines]",
          "1286:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||",
          "1287:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||",
          "1288:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED)",
          "",
          "[Added Lines]",
          "1305:   if (!is_spec_ib_user_controlled())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1351:  if (spectre_v2_user_ibpb == SPECTRE_V2_USER_NONE &&",
          "1352:      spectre_v2_user_stibp == SPECTRE_V2_USER_NONE)",
          "1353:   return PR_SPEC_ENABLE;",
          "1362:   if (task_spec_ib_force_disable(task))",
          "1363:    return PR_SPEC_PRCTL | PR_SPEC_FORCE_DISABLE;",
          "1364:   if (task_spec_ib_disable(task))",
          "1365:    return PR_SPEC_PRCTL | PR_SPEC_DISABLE;",
          "1366:   return PR_SPEC_PRCTL | PR_SPEC_ENABLE;",
          "1368:   return PR_SPEC_NOT_AFFECTED;",
          "1369: }",
          "",
          "[Removed Lines]",
          "1354:  else if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||",
          "1355:      spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||",
          "1356:      spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED)",
          "1357:   return PR_SPEC_DISABLE;",
          "1358:  else if (spectre_v2_user_ibpb == SPECTRE_V2_USER_PRCTL ||",
          "1359:      spectre_v2_user_ibpb == SPECTRE_V2_USER_SECCOMP ||",
          "1360:      spectre_v2_user_stibp == SPECTRE_V2_USER_PRCTL ||",
          "1361:      spectre_v2_user_stibp == SPECTRE_V2_USER_SECCOMP) {",
          "1367:  } else",
          "",
          "[Added Lines]",
          "1372:  else if (is_spec_ib_user_controlled()) {",
          "1378:  } else if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||",
          "1379:      spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||",
          "1380:      spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED)",
          "1381:   return PR_SPEC_DISABLE;",
          "1382:  else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6608b45ac5ecb56f9e171252229c39580cc85f0f",
      "candidate_info": {
        "commit_hash": "6608b45ac5ecb56f9e171252229c39580cc85f0f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6608b45ac5ecb56f9e171252229c39580cc85f0f",
        "files": [
          "arch/x86/kernel/cpu/bugs.c",
          "drivers/base/cpu.c",
          "include/linux/cpu.h"
        ],
        "message": "x86/speculation/taa: Add sysfs reporting for TSX Async Abort\n\nAdd the sysfs reporting file for TSX Async Abort. It exposes the\nvulnerability and the mitigation state similar to the existing files for\nthe other hardware vulnerabilities.\n\nSysfs file path is:\n/sys/devices/system/cpu/vulnerabilities/tsx_async_abort\n\nSigned-off-by: Pawan Gupta <pawan.kumar.gupta@linux.intel.com>\nSigned-off-by: Borislav Petkov <bp@suse.de>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nTested-by: Neelima Krishnan <neelima.krishnan@intel.com>\nReviewed-by: Mark Gross <mgross@linux.intel.com>\nReviewed-by: Tony Luck <tony.luck@intel.com>\nReviewed-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nReviewed-by: Josh Poimboeuf <jpoimboe@redhat.com>",
        "before_after_code_files": [
          "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c",
          "drivers/base/cpu.c||drivers/base/cpu.c",
          "include/linux/cpu.h||include/linux/cpu.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ],
          "candidate": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c": [
          "File: arch/x86/kernel/cpu/bugs.c -> arch/x86/kernel/cpu/bugs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1436:          sched_smt_active() ? \"vulnerable\" : \"disabled\");",
          "1437: }",
          "1439: static char *stibp_state(void)",
          "1440: {",
          "1441:  if (spectre_v2_enabled == SPECTRE_V2_IBRS_ENHANCED)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1439: static ssize_t tsx_async_abort_show_state(char *buf)",
          "1440: {",
          "1441:  if ((taa_mitigation == TAA_MITIGATION_TSX_DISABLED) ||",
          "1442:      (taa_mitigation == TAA_MITIGATION_OFF))",
          "1443:   return sprintf(buf, \"%s\\n\", taa_strings[taa_mitigation]);",
          "1445:  if (boot_cpu_has(X86_FEATURE_HYPERVISOR)) {",
          "1446:   return sprintf(buf, \"%s; SMT Host state unknown\\n\",",
          "1447:           taa_strings[taa_mitigation]);",
          "1448:  }",
          "1450:  return sprintf(buf, \"%s; SMT %s\\n\", taa_strings[taa_mitigation],",
          "1451:          sched_smt_active() ? \"vulnerable\" : \"disabled\");",
          "1452: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1506:  case X86_BUG_MDS:",
          "1507:   return mds_show_state(buf);",
          "1509:  default:",
          "1510:   break;",
          "1511:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1524:  case X86_BUG_TAA:",
          "1525:   return tsx_async_abort_show_state(buf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1542: {",
          "1543:  return cpu_show_common(dev, attr, buf, X86_BUG_MDS);",
          "1544: }",
          "1545: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1564: ssize_t cpu_show_tsx_async_abort(struct device *dev, struct device_attribute *attr, char *buf)",
          "1565: {",
          "1566:  return cpu_show_common(dev, attr, buf, X86_BUG_TAA);",
          "1567: }",
          "",
          "---------------"
        ],
        "drivers/base/cpu.c||drivers/base/cpu.c": [
          "File: drivers/base/cpu.c -> drivers/base/cpu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "554:  return sprintf(buf, \"Not affected\\n\");",
          "555: }",
          "557: static DEVICE_ATTR(meltdown, 0444, cpu_show_meltdown, NULL);",
          "558: static DEVICE_ATTR(spectre_v1, 0444, cpu_show_spectre_v1, NULL);",
          "559: static DEVICE_ATTR(spectre_v2, 0444, cpu_show_spectre_v2, NULL);",
          "560: static DEVICE_ATTR(spec_store_bypass, 0444, cpu_show_spec_store_bypass, NULL);",
          "561: static DEVICE_ATTR(l1tf, 0444, cpu_show_l1tf, NULL);",
          "562: static DEVICE_ATTR(mds, 0444, cpu_show_mds, NULL);",
          "564: static struct attribute *cpu_root_vulnerabilities_attrs[] = {",
          "565:  &dev_attr_meltdown.attr,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "557: ssize_t __weak cpu_show_tsx_async_abort(struct device *dev,",
          "558:      struct device_attribute *attr,",
          "559:      char *buf)",
          "560: {",
          "561:  return sprintf(buf, \"Not affected\\n\");",
          "562: }",
          "570: static DEVICE_ATTR(tsx_async_abort, 0444, cpu_show_tsx_async_abort, NULL);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "568:  &dev_attr_spec_store_bypass.attr,",
          "569:  &dev_attr_l1tf.attr,",
          "570:  &dev_attr_mds.attr,",
          "571:  NULL",
          "572: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "579:  &dev_attr_tsx_async_abort.attr,",
          "",
          "---------------"
        ],
        "include/linux/cpu.h||include/linux/cpu.h": [
          "File: include/linux/cpu.h -> include/linux/cpu.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "59:         struct device_attribute *attr, char *buf);",
          "60: extern ssize_t cpu_show_mds(struct device *dev,",
          "61:        struct device_attribute *attr, char *buf);",
          "63: extern __printf(4, 5)",
          "64: struct device *cpu_device_create(struct device *parent, void *drvdata,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: extern ssize_t cpu_show_tsx_async_abort(struct device *dev,",
          "63:      struct device_attribute *attr,",
          "64:      char *buf);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a5ce9f2bb665d1d2b31f139a02dbaa2dfbb62fa6",
      "candidate_info": {
        "commit_hash": "a5ce9f2bb665d1d2b31f139a02dbaa2dfbb62fa6",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a5ce9f2bb665d1d2b31f139a02dbaa2dfbb62fa6",
        "files": [
          "arch/x86/kernel/cpu/bugs.c"
        ],
        "message": "x86/speculation: Merge one test in spectre_v2_user_select_mitigation()\n\nMerge the test whether the CPU supports STIBP into the test which\ndetermines whether STIBP is required. Thus try to simplify what is\nalready an insane logic.\n\nRemove a superfluous newline in a comment, while at it.\n\nSigned-off-by: Borislav Petkov <bp@suse.de>\nCc: Anthony Steinhauser <asteinhauser@google.com>\nLink: https://lkml.kernel.org/r/20200615065806.GB14668@zn.tnic",
        "before_after_code_files": [
          "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ],
          "candidate": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c": [
          "File: arch/x86/kernel/cpu/bugs.c -> arch/x86/kernel/cpu/bugs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "763:  }",
          "770:   return;",
          "",
          "[Removed Lines]",
          "769:  if (!smt_possible || spectre_v2_enabled == SPECTRE_V2_IBRS_ENHANCED)",
          "",
          "[Added Lines]",
          "769:  if (!boot_cpu_has(X86_FEATURE_STIBP) ||",
          "770:      !smt_possible ||",
          "771:      spectre_v2_enabled == SPECTRE_V2_IBRS_ENHANCED)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "778:      boot_cpu_has(X86_FEATURE_AMD_STIBP_ALWAYS_ON))",
          "779:   mode = SPECTRE_V2_USER_STRICT_PREFERRED;",
          "787:  spectre_v2_user_stibp = mode;",
          "789: set_mode:",
          "",
          "[Removed Lines]",
          "784:  if (!boot_cpu_has(X86_FEATURE_STIBP))",
          "785:   mode = SPECTRE_V2_USER_NONE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d8df8cbb9156b0a0ab3f802b80cb5db57acc0bf",
      "candidate_info": {
        "commit_hash": "4d8df8cbb9156b0a0ab3f802b80cb5db57acc0bf",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/4d8df8cbb9156b0a0ab3f802b80cb5db57acc0bf",
        "files": [
          "arch/x86/kernel/cpu/bugs.c"
        ],
        "message": "x86/speculation: PR_SPEC_FORCE_DISABLE enforcement for indirect branches.\n\nCurrently, it is possible to enable indirect branch speculation even after\nit was force-disabled using the PR_SPEC_FORCE_DISABLE option. Moreover, the\nPR_GET_SPECULATION_CTRL command gives afterwards an incorrect result\n(force-disabled when it is in fact enabled). This also is inconsistent\nvs. STIBP and the documention which cleary states that\nPR_SPEC_FORCE_DISABLE cannot be undone.\n\nFix this by actually enforcing force-disabled indirect branch\nspeculation. PR_SPEC_ENABLE called after PR_SPEC_FORCE_DISABLE now fails\nwith -EPERM as described in the documentation.\n\nFixes: 9137bb27e60e (\"x86/speculation: Add prctl() control for indirect branch speculation\")\nSigned-off-by: Anthony Steinhauser <asteinhauser@google.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: stable@vger.kernel.org",
        "before_after_code_files": [
          "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ],
          "candidate": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c": [
          "File: arch/x86/kernel/cpu/bugs.c -> arch/x86/kernel/cpu/bugs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1175:    return 0;",
          "1180:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||",
          "1181:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||",
          "1183:    return -EPERM;",
          "1184:   task_clear_spec_ib_disable(task);",
          "1185:   task_update_spec_tif(task);",
          "",
          "[Removed Lines]",
          "1182:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED)",
          "",
          "[Added Lines]",
          "1184:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED ||",
          "1185:       task_spec_ib_force_disable(task))",
          "",
          "---------------"
        ]
      }
    }
  ]
}