{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5155b75be2dd49bdc87cdc4e7b093b68a6298f7c",
      "candidate_info": {
        "commit_hash": "5155b75be2dd49bdc87cdc4e7b093b68a6298f7c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5155b75be2dd49bdc87cdc4e7b093b68a6298f7c",
        "files": [
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid",
          "test/fts3atoken.test"
        ],
        "message": "The two-argument version of fts3_tokenizer() works regardless of the value of SQLITE_DBCONFIG_ENABLE_FT3_TOKENIZER as long as the second argument is a bind parameter.\n\nFossilOrigin-Name: ab76e3a90e56bd36a17ded9c7a77e88632ca12d3bd73f197df747a634c81e0cf",
        "before_after_code_files": [
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3atoken.test||test/fts3atoken.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:   nName = sqlite3_value_bytes(argv[0])+1;",
          "81:   if( argc==2 ){",
          "83:       void *pOld;",
          "84:       int n = sqlite3_value_bytes(argv[1]);",
          "85:       if( zName==0 || n!=sizeof(pPtr) ){",
          "",
          "[Removed Lines]",
          "82:     if( fts3TokenizerEnabled(context) ){",
          "",
          "[Added Lines]",
          "82:     if( fts3TokenizerEnabled(context) || sqlite3_value_frombind(argv[1]) ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 98da62dfdacc6b3c490c387d1f8a74cc5daa978776967e264ad4800c380b0ddf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3atoken.test||test/fts3atoken.test": [
          "File: test/fts3atoken.test -> test/fts3atoken.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   }",
          "87: } {{There was movement at the station}}",
          "89: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 0",
          "90: do_catchsql_test 1.6 {",
          "91:   SELECT fts3_tokenizer('blah', fts3_tokenizer('simple')) IS NULL;",
          "92: } {1 {fts3tokenize disabled}}",
          "95: #--------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "89: unset -nocomplain simple",
          "90: set simple [db one {SELECT fts3_tokenizer('simple')}]",
          "95: do_test fts3atoken-1.7 {",
          "96:   execsql {",
          "97:     SELECT fts3_tokenizer('blah2', $simple) IS NULL;",
          "98:   }",
          "99: } {1}",
          "100: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1",
          "101: do_test fts3atoken-1.8 {",
          "102:   execsql {",
          "103:     SELECT fts3_tokenizer('blah2') == fts3_tokenizer('simple');",
          "104:   }",
          "105: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9b13365bbadb5e16da3579fcb8941799760817c1",
      "candidate_info": {
        "commit_hash": "9b13365bbadb5e16da3579fcb8941799760817c1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9b13365bbadb5e16da3579fcb8941799760817c1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Ensure that a key comparison does not read a collating sequence past the end of the KeyInfo, even if the key field of an index is corrupted by having a string in the last column instead of the ROWID.\n\nFossilOrigin-Name: 058a8006dceda78a894ea9446f057aa60b6d38e96506d4d91bda0ee2f9314ba3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3ecaaee69f49e43d38047b7d53b82689eba7f7d33541fcac3c32b6dc8a568458",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3906:     if( rc!=0 ){",
          "3908:       if( pKeyInfo->aSortOrder[i] ){",
          "",
          "[Removed Lines]",
          "3905:     rc = sqlite3MemCompare(&mem1, &pPKey2->aMem[i], pKeyInfo->aColl[i]);",
          "",
          "[Added Lines]",
          "3905:     rc = sqlite3MemCompare(&mem1, &pPKey2->aMem[i],",
          "3906:                            pKeyInfo->nAllField>i ? pKeyInfo->aColl[i] : 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4333:         mem1.n = (serial_type - 12) / 2;",
          "4334:         testcase( (d1+mem1.n)==(unsigned)nKey1 );",
          "4335:         testcase( (d1+mem1.n+1)==(unsigned)nKey1 );",
          "4337:           pPKey2->errCode = (u8)SQLITE_CORRUPT_BKPT;",
          "4340:           mem1.enc = pKeyInfo->enc;",
          "4341:           mem1.db = pKeyInfo->db;",
          "4342:           mem1.flags = MEM_Str;",
          "",
          "[Removed Lines]",
          "4336:         if( (d1+mem1.n) > (unsigned)nKey1 ){",
          "4339:         }else if( (pKeyInfo = pPKey2->pKeyInfo)->aColl[i] ){",
          "",
          "[Added Lines]",
          "4337:         if( (d1+mem1.n) > (unsigned)nKey1",
          "4338:          || (pKeyInfo = pPKey2->pKeyInfo)->nAllField<=i",
          "4339:         ){",
          "4342:         }else if( pKeyInfo->aColl[i] ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a6873bfd65233d242fd17ec818ac57593f25540",
      "candidate_info": {
        "commit_hash": "0a6873bfd65233d242fd17ec818ac57593f25540",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0a6873bfd65233d242fd17ec818ac57593f25540",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/resolve.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/test1.c"
        ],
        "message": "Add SQLITE_DBCONFIG options LEGACY_ALTER_TABLE, NO_DQS_SCHEMA, and NO_DQS.\n\nFossilOrigin-Name: 1fad20925efa70d0c242e9cba8fa55456fb07a81229c1068da84c6e27d0c0be8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/resolve.c||src/resolve.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 23e49f9984f74f242602c6e56bfc645585c7c86bcdd585c322ab0d8e20958d86",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "845:         { SQLITE_DBCONFIG_DEFENSIVE,             SQLITE_Defensive      },",
          "846:         { SQLITE_DBCONFIG_WRITABLE_SCHEMA,       SQLITE_WriteSchema|",
          "847:                                                  SQLITE_NoSchemaError  },",
          "848:       };",
          "849:       unsigned int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "848:         { SQLITE_DBCONFIG_LEGACY_ALTER_TABLE,    SQLITE_LegacyAlter    },",
          "849:         { SQLITE_DBCONFIG_NO_DQS_SCHEMA,         SQLITE_NoDQSSchema    },",
          "850:         { SQLITE_DBCONFIG_NO_DQS,                SQLITE_NoDQS          },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3071:   db->nextPagesize = 0;",
          "3072:   db->nMaxSorterMmap = 0x7FFFFFFF;",
          "3073:   db->flags |= SQLITE_ShortColNames | SQLITE_EnableTrigger | SQLITE_CacheSpill",
          "3074: #if !defined(SQLITE_DEFAULT_AUTOMATIC_INDEX) || SQLITE_DEFAULT_AUTOMATIC_INDEX",
          "3075:                  | SQLITE_AutoIndex",
          "3076: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3077:                  | SQLITE_NoDQSSchema",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "477:   if( cnt==0 && zTab==0 ){",
          "478:     assert( pExpr->op==TK_ID );",
          "479:     if( ExprHasProperty(pExpr,EP_DblQuoted)",
          "481:     ){",
          "",
          "[Removed Lines]",
          "480:      && 0==(pTopNC->ncFlags&NC_NoDblQStr)",
          "",
          "[Added Lines]",
          "480:      && 0==(pTopNC->ncFlags&NC_NoDblQStr)",
          "481:      && 0==(db->flags & SQLITE_NoDQS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1771:   sNC.pParse = pParse;",
          "1772:   sNC.pSrcList = &sSrc;",
          "1773:   sNC.ncFlags = type;",
          "1775:     sNC.ncFlags |= NC_NoDblQStr;",
          "1776:   }",
          "1777:   if( (rc = sqlite3ResolveExprNames(&sNC, pExpr))!=SQLITE_OK ) return rc;",
          "",
          "[Removed Lines]",
          "1774:   if( !pParse->db->init.busy && !sqlite3WritableSchema(pParse->db) ){",
          "",
          "[Added Lines]",
          "1775:   if( (pParse->db->flags & SQLITE_NoDQS)!=0",
          "1776:    || (!pParse->db->init.busy",
          "1777:         && !sqlite3WritableSchema(pParse->db)",
          "1778:         && (pParse->db->flags & SQLITE_NoDQSSchema)!=0",
          "1779:       )",
          "1780:   ){",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7075:       const char *zName;",
          "7076:       int op;",
          "7077:     } aDbConfig[] = {",
          "7087:     };",
          "7088:     int ii, v;",
          "7089:     open_db(p, 0);",
          "",
          "[Removed Lines]",
          "7078:         { \"enable_fkey\",      SQLITE_DBCONFIG_ENABLE_FKEY            },",
          "7079:         { \"enable_trigger\",   SQLITE_DBCONFIG_ENABLE_TRIGGER         },",
          "7080:         { \"fts3_tokenizer\",   SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER  },",
          "7081:         { \"load_extension\",   SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION  },",
          "7082:         { \"no_ckpt_on_close\", SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE       },",
          "7083:         { \"enable_qpsg\",      SQLITE_DBCONFIG_ENABLE_QPSG            },",
          "7084:         { \"trigger_eqp\",      SQLITE_DBCONFIG_TRIGGER_EQP            },",
          "7085:         { \"reset_database\",   SQLITE_DBCONFIG_RESET_DATABASE         },",
          "7086:         { \"defensive\",        SQLITE_DBCONFIG_DEFENSIVE              },",
          "",
          "[Added Lines]",
          "7078:         { \"enable_fkey\",        SQLITE_DBCONFIG_ENABLE_FKEY           },",
          "7079:         { \"enable_trigger\",     SQLITE_DBCONFIG_ENABLE_TRIGGER        },",
          "7080:         { \"fts3_tokenizer\",     SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "7081:         { \"load_extension\",     SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },",
          "7082:         { \"no_ckpt_on_close\",   SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE      },",
          "7083:         { \"enable_qpsg\",        SQLITE_DBCONFIG_ENABLE_QPSG           },",
          "7084:         { \"trigger_eqp\",        SQLITE_DBCONFIG_TRIGGER_EQP           },",
          "7085:         { \"reset_database\",     SQLITE_DBCONFIG_RESET_DATABASE        },",
          "7086:         { \"defensive\",          SQLITE_DBCONFIG_DEFENSIVE             },",
          "7087:         { \"wriable_schema\",     SQLITE_DBCONFIG_WRITABLE_SCHEMA       },",
          "7088:         { \"legacy_alter_table\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE    },",
          "7089:         { \"no_dqs_schema\",      SQLITE_DBCONFIG_NO_DQS_SCHEMA         },",
          "7090:         { \"no_dqs\",             SQLITE_DBCONFIG_NO_DQS                },",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7608:     const char *zName;",
          "7609:     int eVal;",
          "7610:   } aSetting[] = {",
          "7620:   };",
          "7621:   int i;",
          "7622:   int v;",
          "",
          "[Removed Lines]",
          "7611:     { \"FKEY\",            SQLITE_DBCONFIG_ENABLE_FKEY },",
          "7612:     { \"TRIGGER\",         SQLITE_DBCONFIG_ENABLE_TRIGGER },",
          "7613:     { \"FTS3_TOKENIZER\",  SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "7614:     { \"LOAD_EXTENSION\",  SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },",
          "7615:     { \"NO_CKPT_ON_CLOSE\",SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE },",
          "7616:     { \"QPSG\",            SQLITE_DBCONFIG_ENABLE_QPSG },",
          "7617:     { \"TRIGGER_EQP\",     SQLITE_DBCONFIG_TRIGGER_EQP },",
          "7618:     { \"RESET_DB\",        SQLITE_DBCONFIG_RESET_DATABASE },",
          "7619:     { \"DEFENSIVE\",       SQLITE_DBCONFIG_DEFENSIVE },",
          "",
          "[Added Lines]",
          "7611:     { \"FKEY\",               SQLITE_DBCONFIG_ENABLE_FKEY },",
          "7612:     { \"TRIGGER\",            SQLITE_DBCONFIG_ENABLE_TRIGGER },",
          "7613:     { \"FTS3_TOKENIZER\",     SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER },",
          "7614:     { \"LOAD_EXTENSION\",     SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION },",
          "7615:     { \"NO_CKPT_ON_CLOSE\",   SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE },",
          "7616:     { \"QPSG\",               SQLITE_DBCONFIG_ENABLE_QPSG },",
          "7617:     { \"TRIGGER_EQP\",        SQLITE_DBCONFIG_TRIGGER_EQP },",
          "7618:     { \"RESET_DB\",           SQLITE_DBCONFIG_RESET_DATABASE },",
          "7619:     { \"DEFENSIVE\",          SQLITE_DBCONFIG_DEFENSIVE },",
          "7620:     { \"WRITABLE_SCHEMA\",    SQLITE_DBCONFIG_WRITABLE_SCHEMA },",
          "7621:     { \"LEGACY_ALTER_TABLE\", SQLITE_DBCONFIG_LEGACY_ALTER_TABLE },",
          "7622:     { \"NO_DQS_SCHEMA\",      SQLITE_DBCONFIG_NO_DQS_SCHEMA },",
          "7623:     { \"NO_DQS\",             SQLITE_DBCONFIG_NO_DQS },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35a38e0836e64f9df6ab487a6844724e94fadce3",
      "candidate_info": {
        "commit_hash": "35a38e0836e64f9df6ab487a6844724e94fadce3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/35a38e0836e64f9df6ab487a6844724e94fadce3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Fix a harmless compiler warning.\n\nFossilOrigin-Name: 63c67a54b4d3e501f3059dcdfc6bb50c6b8dad63a34eb773e4408d9e4e780d7a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 83c2adffbfb6dcdddb38ad9f888647b0e39fa24dc0bff344238e1f75a6c7d2ed",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c"
        ]
      }
    },
    {
      "candidate_hash": "25050f26206456c62f400bdd95215701095b00a0",
      "candidate_info": {
        "commit_hash": "25050f26206456c62f400bdd95215701095b00a0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/25050f26206456c62f400bdd95215701095b00a0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Use an unsigned integer to count free pages in btree.c:freePage2().\n\nFossilOrigin-Name: 8820408597341344b308277ce6ef41b47c7514d6c613520789b05ee52cbedae8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 80704a16f6dbbeacc65fa36a3623df10292a28aeacf9e2c1d2891258479e3b89",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c"
        ]
      }
    }
  ]
}