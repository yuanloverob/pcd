{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3ad07ed0b8c8e350934bb07bdd2fffa5c129011f",
      "candidate_info": {
        "commit_hash": "3ad07ed0b8c8e350934bb07bdd2fffa5c129011f",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3ad07ed0b8c8e350934bb07bdd2fffa5c129011f",
        "files": [
          "lib/tls.js"
        ],
        "message": "lint",
        "before_after_code_files": [
          "lib/tls.js||litls.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: function SlabBuffer() {",
          "82:   this.create();",
          "86: SlabBuffer.prototype.create = function create() {",
          "",
          "[Removed Lines]",
          "83: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2775c0e97ebdeed64743e4f56741118fdcfd8dda",
      "candidate_info": {
        "commit_hash": "2775c0e97ebdeed64743e4f56741118fdcfd8dda",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2775c0e97ebdeed64743e4f56741118fdcfd8dda",
        "files": [
          "lib/dgram.js",
          "src/udp_wrap.cc",
          "test/simple/test-dgram-multicast-multi-process.js"
        ],
        "message": "dgram: bring back setTTL()",
        "before_after_code_files": [
          "lib/dgram.js||lidgram.js",
          "src/udp_wrap.cc||src/udp_wrap.cc",
          "test/simple/test-dgram-multicast-multi-process.js||test/simple/test-dgram-multicast-multi-process.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/dgram.js||lidgram.js": [
          "File: lib/dgram.js -> lidgram.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "232: Socket.prototype.setTTL = function(arg) {",
          "234: };",
          "",
          "[Removed Lines]",
          "233:   throw new Error('not yet implemented');",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/udp_wrap.cc||src/udp_wrap.cc": [
          "File: src/udp_wrap.cc -> src/udp_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:   static Handle<Value> SetMulticastTTL(const Arguments& args);",
          "97:   static Handle<Value> SetMulticastLoopback(const Arguments& args);",
          "98:   static Handle<Value> SetBroadcast(const Arguments& args);",
          "100: private:",
          "101:   static inline char* NewSlab(v8::Handle<v8::Object> global, v8::Handle<v8::Object> wrap_obj);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99:   static Handle<Value> SetTTL(const Arguments& args);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:   NODE_SET_PROTOTYPE_METHOD(t, \"setMulticastTTL\", SetMulticastTTL);",
          "160:   NODE_SET_PROTOTYPE_METHOD(t, \"setMulticastLoopback\", SetMulticastLoopback);",
          "161:   NODE_SET_PROTOTYPE_METHOD(t, \"setBroadcast\", SetBroadcast);",
          "163:   target->Set(String::NewSymbol(\"UDP\"),",
          "164:               Persistent<FunctionTemplate>::New(t)->GetFunction());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:   NODE_SET_PROTOTYPE_METHOD(t, \"setTTL\", SetTTL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215:   return DoBind(args, AF_INET6);",
          "216: }",
          "233: Handle<Value> UDPWrap::SetMembership(const Arguments& args,",
          "234:                                      uv_membership membership) {",
          "",
          "[Removed Lines]",
          "218: Handle<Value> UDPWrap::SetBroadcast(const Arguments& args) {",
          "219:   HandleScope scope;",
          "220:   UNWRAP",
          "222:   assert(args.Length() == 1);",
          "224:   int on = args[0]->Uint32Value();",
          "225:   int r = uv_udp_set_broadcast(&wrap->handle_, on);",
          "227:   if (r)",
          "228:     SetErrno(uv_last_error(uv_default_loop()));",
          "230:   return scope.Close(Integer::New(r));",
          "231: }",
          "",
          "[Added Lines]",
          "221: #define X(name, fn)                                                           \\",
          "222:   Handle<Value> UDPWrap::name(const Arguments& args) {                        \\",
          "223:     HandleScope scope;                                                        \\",
          "224:     UNWRAP                                                                    \\",
          "225:     assert(args.Length() == 1);                                               \\",
          "226:     int flag = args[0]->Int32Value();                                         \\",
          "227:     int r = fn(&wrap->handle_, flag);                                         \\",
          "228:     if (r) SetErrno(uv_last_error(uv_default_loop()));                        \\",
          "229:     return scope.Close(Integer::New(r));                                      \\",
          "230:   }",
          "232: X(SetTTL, uv_udp_set_ttl)",
          "233: X(SetBroadcast, uv_udp_set_broadcast)",
          "234: X(SetMulticastTTL, uv_udp_set_multicast_ttl)",
          "235: X(SetMulticastLoopback, uv_udp_set_multicast_loop)",
          "237: #undef X",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "265: }",
          "300: Handle<Value> UDPWrap::DoSend(const Arguments& args, int family) {",
          "301:   HandleScope scope;",
          "302:   int r;",
          "",
          "[Removed Lines]",
          "268: Handle<Value> UDPWrap::SetMulticastTTL(const Arguments& args) {",
          "269:   HandleScope scope;",
          "270:   UNWRAP",
          "272:   assert(args.Length() == 1);",
          "274:   int ttl = args[0]->Uint32Value();",
          "275:   int r = uv_udp_set_multicast_ttl(&wrap->handle_, ttl);",
          "277:   if (r)",
          "278:     SetErrno(uv_last_error(uv_default_loop()));",
          "280:   return scope.Close(Integer::New(r));",
          "281: }",
          "284: Handle<Value> UDPWrap::SetMulticastLoopback(const Arguments& args) {",
          "285:   HandleScope scope;",
          "286:   UNWRAP",
          "288:   assert(args.Length() == 1);",
          "290:   int on = args[0]->Int32Value();",
          "291:   int r = uv_udp_set_multicast_loop(&wrap->handle_, on);",
          "293:   if (r)",
          "294:     SetErrno(uv_last_error(uv_default_loop()));",
          "296:   return scope.Close(Integer::New(r));",
          "297: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-dgram-multicast-multi-process.js||test/simple/test-dgram-multicast-multi-process.js": [
          "File: test/simple/test-dgram-multicast-multi-process.js -> test/simple/test-dgram-multicast-multi-process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:   sendSocket.setBroadcast(true);",
          "106:   sendSocket.setMulticastTTL(1);",
          "107:   sendSocket.setMulticastLoopback(true);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105:   sendSocket.setTTL(1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b07acb38086c3ad16817743391b7520d27032b2a",
      "candidate_info": {
        "commit_hash": "b07acb38086c3ad16817743391b7520d27032b2a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/b07acb38086c3ad16817743391b7520d27032b2a",
        "files": [
          "src/process_wrap.cc"
        ],
        "message": "child_process: fix segfault after failed spawn\n\nThe process handle is uninitialized when uv_spawn() fails so don't export the\nhandle to JS land when that happens. Attempts to close the uninitialized handle\nresulted in segmentation faults and memory corruption.\n\nFixes #2481.",
        "before_after_code_files": [
          "src/process_wrap.cc||src/process_wrap.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/process_wrap.cc||src/process_wrap.cc": [
          "File: src/process_wrap.cc -> src/process_wrap.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:     int r = uv_spawn(uv_default_loop(), &wrap->process_, options);",
          "185:     if (options.args) {",
          "186:       for (int i = 0; options.args[i]; i++) free(options.args[i]);",
          "",
          "[Removed Lines]",
          "180:     wrap->SetHandle((uv_handle_t*)&wrap->process_);",
          "181:     assert(wrap->process_.data == wrap);",
          "183:     wrap->object_->Set(String::New(\"pid\"), Integer::New(wrap->process_.pid));",
          "",
          "[Added Lines]",
          "180:     if (r) {",
          "181:       SetErrno(uv_last_error(uv_default_loop()));",
          "182:     }",
          "183:     else {",
          "184:       wrap->SetHandle((uv_handle_t*)&wrap->process_);",
          "185:       assert(wrap->process_.data == wrap);",
          "186:       wrap->object_->Set(String::New(\"pid\"), Integer::New(wrap->process_.pid));",
          "187:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "195:       delete [] options.env;",
          "196:     }",
          "200:     return scope.Close(Integer::New(r));",
          "201:   }",
          "",
          "[Removed Lines]",
          "198:     if (r) SetErrno(uv_last_error(uv_default_loop()));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0cf235410dfa621668c34b5e70c6b7fb2dab2787",
      "candidate_info": {
        "commit_hash": "0cf235410dfa621668c34b5e70c6b7fb2dab2787",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0cf235410dfa621668c34b5e70c6b7fb2dab2787",
        "files": [
          "lib/tls.js",
          "test/simple/test-tls-check-server-identity.js"
        ],
        "message": "tls: localhost is valid against identity-check",
        "before_after_code_files": [
          "lib/tls.js||litls.js",
          "test/simple/test-tls-check-server-identity.js||test/simple/test-tls-check-server-identity.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/tls.js||litls.js": [
          "File: lib/tls.js -> litls.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     if (!/\\.$/.test(host)) host += '.';",
          "",
          "[Removed Lines]",
          "90:     if (!/^.+\\..+$/.test(host)) return /$./;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-tls-check-server-identity.js||test/simple/test-tls-check-server-identity.js": [
          "File: test/simple/test-tls-check-server-identity.js -> test/simple/test-tls-check-server-identity.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:     },",
          "181:     result: false",
          "182:   },",
          "183: ];",
          "185: tests.forEach(function(test, i) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:   {",
          "184:     host: 'localhost', cert: {",
          "185:       subjectaltname: 'DNS:a.com',",
          "186:       subject: { CN: 'localhost' }",
          "187:     },",
          "188:     result: true",
          "189:   },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1f3e4a76f9cb06fae57f7c81371cc5e1351a7977",
      "candidate_info": {
        "commit_hash": "1f3e4a76f9cb06fae57f7c81371cc5e1351a7977",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1f3e4a76f9cb06fae57f7c81371cc5e1351a7977",
        "files": [
          "lib/fs.js",
          "test/simple/test-fs-empty-readStream.js"
        ],
        "message": "fs: no end emit after createReadStream.pause()\n\nIn case a fd option is given to fs.createReadStream a read will instantly\nhappen. But in the edge case where fd point to an empty file and .pause()\nwas executed instantly, the end event would emit since no async wait was\nbetween fs.createReadStream and the file read there emits end.",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-empty-readStream.js||test/simple/test-fs-empty-readStream.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1156:   }",
          "1158:   if (this.fd !== null) {",
          "1160:     return;",
          "1161:   }",
          "",
          "[Removed Lines]",
          "1159:     this._read();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-empty-readStream.js||test/simple/test-fs-empty-readStream.js": [
          "File: test/simple/test-fs-empty-readStream.js -> test/simple/test-fs-empty-readStream.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var path = require('path');",
          "25: var fs = require('fs');",
          "27: var emptyFile = path.join(common.fixturesDir, 'empty.txt');",
          "29: fs.open(emptyFile, 'r', function (error, fd) {",
          "30:   assert.ifError(error);",
          "32:   var read = fs.createReadStream(emptyFile, { 'fd': fd });",
          "34:   read.once('data', function () {",
          "35:     throw new Error(\"data event should not emit\");",
          "36:   });",
          "38:   var readEmit = false;",
          "39:   read.once('end', function () {",
          "40:     readEmit = true;",
          "41:   });",
          "43:   setTimeout(function () {",
          "44:     assert.equal(readEmit, true);",
          "45:   }, 50);",
          "46: });",
          "48: fs.open(emptyFile, 'r', function (error, fd) {",
          "49:   assert.ifError(error);",
          "51:   var read = fs.createReadStream(emptyFile, { 'fd': fd });",
          "52:   read.pause();",
          "54:   read.once('data', function () {",
          "55:     throw new Error(\"data event should not emit\");",
          "56:   });",
          "58:   var readEmit = false;",
          "59:   read.once('end', function () {",
          "60:     readEmit = true;",
          "61:   });",
          "63:   setTimeout(function () {",
          "64:     assert.equal(readEmit, false);",
          "65:   }, 50);",
          "66: });",
          "",
          "---------------"
        ]
      }
    }
  ]
}