{
  "cve_id": "CVE-2014-9903",
  "cve_desc": "The sched_read_attr function in kernel/sched/core.c in the Linux kernel 3.14-rc before 3.14-rc4 uses an incorrect size, which allows local users to obtain sensitive information from kernel stack memory via a crafted sched_getattr system call.",
  "repo": "torvalds/linux",
  "patch_hash": "4efbc454ba68def5ef285b26ebfcfdb605b52755",
  "patch_info": {
    "commit_hash": "4efbc454ba68def5ef285b26ebfcfdb605b52755",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/4efbc454ba68def5ef285b26ebfcfdb605b52755",
    "files": [
      "kernel/sched/core.c"
    ],
    "message": "sched: Fix information leak in sys_sched_getattr()\n\nWe're copying the on-stack structure to userspace, but forgot to give\nthe right number of bytes to copy. This allows the calling process to\nobtain up to PAGE_SIZE bytes from the stack (and possibly adjacent\nkernel memory).\n\nThis fix copies only as much as we actually have on the stack\n(attr->size defaults to the size of the struct) and leaves the rest of\nthe userspace-provided buffer untouched.\n\nFound using kmemcheck + trinity.\n\nFixes: d50dde5a10f30 (\"sched: Add new scheduler syscalls to support an extended scheduling parameters ABI\")\nCc: Dario Faggioli <raistlin@linux.it>\nCc: Juri Lelli <juri.lelli@gmail.com>\nCc: Ingo Molnar <mingo@kernel.org>\nSigned-off-by: Vegard Nossum <vegard.nossum@oracle.com>\nSigned-off-by: Peter Zijlstra <peterz@infradead.org>\nLink: http://lkml.kernel.org/r/1392585857-10725-1-git-send-email-vegard.nossum@oracle.com\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>",
    "before_after_code_files": [
      "kernel/sched/core.c||kernel/sched/core.c"
    ]
  },
  "patch_diff": {
    "kernel/sched/core.c||kernel/sched/core.c": [
      "File: kernel/sched/core.c -> kernel/sched/core.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3786:   attr->size = usize;",
      "3787:  }",
      "3790:  if (ret)",
      "3791:   return -EFAULT;",
      "",
      "[Removed Lines]",
      "3789:  ret = copy_to_user(uattr, attr, usize);",
      "",
      "[Added Lines]",
      "3789:  ret = copy_to_user(uattr, attr, attr->size);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d50dde5a10f305253cbc3855307f608f8a3c5f73",
      "candidate_info": {
        "commit_hash": "d50dde5a10f305253cbc3855307f608f8a3c5f73",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d50dde5a10f305253cbc3855307f608f8a3c5f73",
        "files": [
          "arch/arm/include/asm/unistd.h",
          "arch/arm/include/uapi/asm/unistd.h",
          "arch/arm/kernel/calls.S",
          "arch/x86/syscalls/syscall_32.tbl",
          "arch/x86/syscalls/syscall_64.tbl",
          "include/linux/sched.h",
          "include/linux/syscalls.h",
          "kernel/sched/core.c",
          "kernel/sched/sched.h"
        ],
        "message": "sched: Add new scheduler syscalls to support an extended scheduling parameters ABI\n\nAdd the syscalls needed for supporting scheduling algorithms\nwith extended scheduling parameters (e.g., SCHED_DEADLINE).\n\nIn general, it makes possible to specify a periodic/sporadic task,\nthat executes for a given amount of runtime at each instance, and is\nscheduled according to the urgency of their own timing constraints,\ni.e.:\n\n - a (maximum/typical) instance execution time,\n - a minimum interval between consecutive instances,\n - a time constraint by which each instance must be completed.\n\nThus, both the data structure that holds the scheduling parameters of\nthe tasks and the system calls dealing with it must be extended.\nUnfortunately, modifying the existing struct sched_param would break\nthe ABI and result in potentially serious compatibility issues with\nlegacy binaries.\n\nFor these reasons, this patch:\n\n - defines the new struct sched_attr, containing all the fields\n   that are necessary for specifying a task in the computational\n   model described above;\n\n - defines and implements the new scheduling related syscalls that\n   manipulate it, i.e., sched_setattr() and sched_getattr().\n\nSyscalls are introduced for x86 (32 and 64 bits) and ARM only, as a\nproof of concept and for developing and testing purposes. Making them\navailable on other architectures is straightforward.\n\nSince no \"user\" for these new parameters is introduced in this patch,\nthe implementation of the new system calls is just identical to their\nalready existing counterpart. Future patches that implement scheduling\npolicies able to exploit the new data structure must also take care of\nmodifying the sched_*attr() calls accordingly with their own purposes.\n\nSigned-off-by: Dario Faggioli <raistlin@linux.it>\n[ Rewrote to use sched_attr. ]\nSigned-off-by: Juri Lelli <juri.lelli@gmail.com>\n[ Removed sched_setscheduler2() for now. ]\nSigned-off-by: Peter Zijlstra <peterz@infradead.org>\nLink: http://lkml.kernel.org/r/1383831828-15501-3-git-send-email-juri.lelli@gmail.com\nSigned-off-by: Ingo Molnar <mingo@kernel.org>",
        "before_after_code_files": [
          "arch/arm/include/asm/unistd.h||arch/arm/include/asm/unistd.h",
          "arch/arm/include/uapi/asm/unistd.h||arch/arm/include/uapi/asm/unistd.h",
          "arch/arm/kernel/calls.S||arch/arm/kernel/calls.S",
          "arch/x86/syscalls/syscall_32.tbl||arch/x86/syscalls/syscall_32.tbl",
          "arch/x86/syscalls/syscall_64.tbl||arch/x86/syscalls/syscall_64.tbl",
          "include/linux/sched.h||include/linux/sched.h",
          "include/linux/syscalls.h||include/linux/syscalls.h",
          "kernel/sched/core.c||kernel/sched/core.c",
          "kernel/sched/sched.h||kernel/sched/sched.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "kernel/sched/core.c||kernel/sched/core.c"
          ],
          "candidate": [
            "kernel/sched/core.c||kernel/sched/core.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/arm/include/asm/unistd.h||arch/arm/include/asm/unistd.h": [
          "File: arch/arm/include/asm/unistd.h -> arch/arm/include/asm/unistd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #include <uapi/asm/unistd.h>",
          "19: #define __ARM_NR_cmpxchg  (__ARM_NR_BASE+0x00fff0)",
          "21: #define __ARCH_WANT_STAT64",
          "",
          "[Removed Lines]",
          "18: #define __NR_syscalls  (380)",
          "",
          "[Added Lines]",
          "18: #define __NR_syscalls  (384)",
          "",
          "---------------"
        ],
        "arch/arm/include/uapi/asm/unistd.h||arch/arm/include/uapi/asm/unistd.h": [
          "File: arch/arm/include/uapi/asm/unistd.h -> arch/arm/include/uapi/asm/unistd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "406: #define __NR_process_vm_writev  (__NR_SYSCALL_BASE+377)",
          "407: #define __NR_kcmp   (__NR_SYSCALL_BASE+378)",
          "408: #define __NR_finit_module  (__NR_SYSCALL_BASE+379)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "409: #define __NR_sched_setattr  (__NR_SYSCALL_BASE+380)",
          "410: #define __NR_sched_getattr  (__NR_SYSCALL_BASE+381)",
          "",
          "---------------"
        ],
        "arch/arm/kernel/calls.S||arch/arm/kernel/calls.S": [
          "File: arch/arm/kernel/calls.S -> arch/arm/kernel/calls.S",
          "--- Hunk 1 ---",
          "[Context before]",
          "389:   CALL(sys_process_vm_writev)",
          "390:   CALL(sys_kcmp)",
          "391:   CALL(sys_finit_module)",
          "392: #ifndef syscalls_counted",
          "393: .equ syscalls_padding, ((NR_syscalls + 3) & ~3) - NR_syscalls",
          "394: #define syscalls_counted",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "393:   CALL(sys_sched_getattr)",
          "",
          "---------------"
        ],
        "arch/x86/syscalls/syscall_32.tbl||arch/x86/syscalls/syscall_32.tbl": [
          "File: arch/x86/syscalls/syscall_32.tbl -> arch/x86/syscalls/syscall_32.tbl",
          "--- Hunk 1 ---",
          "[Context before]",
          "357: 348 i386 process_vm_writev sys_process_vm_writev  compat_sys_process_vm_writev",
          "358: 349 i386 kcmp   sys_kcmp",
          "359: 350 i386 finit_module  sys_finit_module",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "360: 351 i386 sched_setattr  sys_sched_setattr",
          "361: 352 i386 sched_getattr  sys_sched_getattr",
          "",
          "---------------"
        ],
        "arch/x86/syscalls/syscall_64.tbl||arch/x86/syscalls/syscall_64.tbl": [
          "File: arch/x86/syscalls/syscall_64.tbl -> arch/x86/syscalls/syscall_64.tbl",
          "--- Hunk 1 ---",
          "[Context before]",
          "320: 311 64 process_vm_writev sys_process_vm_writev",
          "321: 312 common kcmp   sys_kcmp",
          "322: 313 common finit_module  sys_finit_module",
          "324: #",
          "325: # x32-specific system call numbers start at 512 to avoid cache impact",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323: 314 common sched_setattr  sys_sched_setattr",
          "324: 315 common sched_getattr  sys_sched_getattr",
          "",
          "---------------"
        ],
        "include/linux/sched.h||include/linux/sched.h": [
          "File: include/linux/sched.h -> include/linux/sched.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: #include <asm/processor.h>",
          "59: struct exec_domain;",
          "60: struct futex_pi_state;",
          "61: struct robust_list_head;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "101: struct sched_attr {",
          "102:  u32 size;",
          "104:  u32 sched_policy;",
          "105:  u64 sched_flags;",
          "108:  s32 sched_nice;",
          "111:  u32 sched_priority;",
          "114:  u64 sched_runtime;",
          "115:  u64 sched_deadline;",
          "116:  u64 sched_period;",
          "117: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1958:          const struct sched_param *);",
          "1959: extern int sched_setscheduler_nocheck(struct task_struct *, int,",
          "1960:           const struct sched_param *);",
          "1961: extern struct task_struct *idle_task(int cpu);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2021: extern int sched_setattr(struct task_struct *,",
          "2022:     const struct sched_attr *);",
          "",
          "---------------"
        ],
        "include/linux/syscalls.h||include/linux/syscalls.h": [
          "File: include/linux/syscalls.h -> include/linux/syscalls.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: struct rlimit64;",
          "39: struct rusage;",
          "40: struct sched_param;",
          "41: struct sel_arg_struct;",
          "42: struct semaphore;",
          "43: struct sembuf;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: struct sched_attr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "279:      struct sched_param __user *param);",
          "280: asmlinkage long sys_sched_setparam(pid_t pid,",
          "281:      struct sched_param __user *param);",
          "282: asmlinkage long sys_sched_getscheduler(pid_t pid);",
          "283: asmlinkage long sys_sched_getparam(pid_t pid,",
          "284:      struct sched_param __user *param);",
          "285: asmlinkage long sys_sched_setaffinity(pid_t pid, unsigned int len,",
          "286:      unsigned long __user *user_mask_ptr);",
          "287: asmlinkage long sys_sched_getaffinity(pid_t pid, unsigned int len,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283: asmlinkage long sys_sched_setattr(pid_t pid,",
          "284:      struct sched_attr __user *attr);",
          "288: asmlinkage long sys_sched_getattr(pid_t pid,",
          "289:      struct sched_attr __user *attr,",
          "290:      unsigned int size);",
          "",
          "---------------"
        ],
        "kernel/sched/core.c||kernel/sched/core.c": [
          "File: kernel/sched/core.c -> kernel/sched/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2991:  return pid ? find_task_by_vpid(pid) : current;",
          "2992: }",
          "2997: {",
          "2998:  p->policy = policy;",
          "3000:  p->normal_prio = normal_prio(p);",
          "3002:  p->prio = rt_mutex_getprio(p);",
          "3003:  if (rt_prio(p->prio))",
          "3004:   p->sched_class = &rt_sched_class;",
          "3005:  else",
          "3006:   p->sched_class = &fair_sched_class;",
          "3007:  set_load_weight(p);",
          "3008: }",
          "",
          "[Removed Lines]",
          "2995: static void",
          "2996: __setscheduler(struct rq *rq, struct task_struct *p, int policy, int prio)",
          "2999:  p->rt_priority = prio;",
          "",
          "[Added Lines]",
          "2996: static void __setscheduler(struct rq *rq, struct task_struct *p,",
          "2997:       const struct sched_attr *attr)",
          "2999:  int policy = attr->sched_policy;",
          "3003:  if (rt_policy(policy))",
          "3004:   p->rt_priority = attr->sched_priority;",
          "3005:  else",
          "3006:   p->static_prio = NICE_TO_PRIO(attr->sched_nice);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3023:  return match;",
          "3024: }",
          "3028: {",
          "3029:  int retval, oldprio, oldpolicy = -1, on_rq, running;",
          "3030:  unsigned long flags;",
          "3031:  const struct sched_class *prev_class;",
          "3032:  struct rq *rq;",
          "",
          "[Removed Lines]",
          "3026: static int __sched_setscheduler(struct task_struct *p, int policy,",
          "3027:     const struct sched_param *param, bool user)",
          "",
          "[Added Lines]",
          "3034: static int __sched_setscheduler(struct task_struct *p,",
          "3035:     const struct sched_attr *attr,",
          "3036:     bool user)",
          "3039:  int policy = attr->sched_policy;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3060:   return -EINVAL;",
          "3062:   return -EINVAL;",
          "3067:  if (user && !capable(CAP_SYS_NICE)) {",
          "3068:   if (rt_policy(policy)) {",
          "3069:    unsigned long rlim_rtprio =",
          "3070:      task_rlimit(p, RLIMIT_RTPRIO);",
          "",
          "[Removed Lines]",
          "3057:  if (param->sched_priority < 0 ||",
          "3058:      (p->mm && param->sched_priority > MAX_USER_RT_PRIO-1) ||",
          "3059:      (!p->mm && param->sched_priority > MAX_RT_PRIO-1))",
          "3061:  if (rt_policy(policy) != (param->sched_priority != 0))",
          "",
          "[Added Lines]",
          "3067:  if (attr->sched_priority < 0 ||",
          "3068:      (p->mm && attr->sched_priority > MAX_USER_RT_PRIO-1) ||",
          "3069:      (!p->mm && attr->sched_priority > MAX_RT_PRIO-1))",
          "3071:  if (rt_policy(policy) != (attr->sched_priority != 0))",
          "3078:   if (fair_policy(policy)) {",
          "3079:    if (!can_nice(p, attr->sched_nice))",
          "3080:     return -EPERM;",
          "3081:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3074:     return -EPERM;",
          "3079:     return -EPERM;",
          "3080:   }",
          "",
          "[Removed Lines]",
          "3077:    if (param->sched_priority > p->rt_priority &&",
          "3078:        param->sched_priority > rlim_rtprio)",
          "",
          "[Added Lines]",
          "3092:    if (attr->sched_priority > p->rt_priority &&",
          "3093:        attr->sched_priority > rlim_rtprio)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3128:   task_rq_unlock(rq, p, &flags);",
          "3129:   return 0;",
          "3130:  }",
          "3132: #ifdef CONFIG_RT_GROUP_SCHED",
          "3133:  if (user) {",
          "",
          "[Removed Lines]",
          "3126:  if (unlikely(policy == p->policy && (!rt_policy(policy) ||",
          "3127:    param->sched_priority == p->rt_priority))) {",
          "",
          "[Added Lines]",
          "3141:  if (unlikely(policy == p->policy)) {",
          "3142:   if (fair_policy(policy) && attr->sched_nice != TASK_NICE(p))",
          "3143:    goto change;",
          "3144:   if (rt_policy(policy) && attr->sched_priority != p->rt_priority)",
          "3145:    goto change;",
          "3150: change:",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3162:  oldprio = p->prio;",
          "3163:  prev_class = p->sched_class;",
          "3166:  if (running)",
          "3167:   p->sched_class->set_curr_task(rq);",
          "",
          "[Removed Lines]",
          "3164:  __setscheduler(rq, p, policy, param->sched_priority);",
          "",
          "[Added Lines]",
          "3184:  __setscheduler(rq, p, attr);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3189: int sched_setscheduler(struct task_struct *p, int policy,",
          "3190:          const struct sched_param *param)",
          "3191: {",
          "3193: }",
          "3194: EXPORT_SYMBOL_GPL(sched_setscheduler);",
          "",
          "[Removed Lines]",
          "3192:  return __sched_setscheduler(p, policy, param, true);",
          "",
          "[Added Lines]",
          "3212:  struct sched_attr attr = {",
          "3213:   .sched_policy   = policy,",
          "3214:   .sched_priority = param->sched_priority",
          "3215:  };",
          "3216:  return __sched_setscheduler(p, &attr, true);",
          "3220: int sched_setattr(struct task_struct *p, const struct sched_attr *attr)",
          "3221: {",
          "3222:  return __sched_setscheduler(p, attr, true);",
          "3223: }",
          "3224: EXPORT_SYMBOL_GPL(sched_setattr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3209: int sched_setscheduler_nocheck(struct task_struct *p, int policy,",
          "3210:           const struct sched_param *param)",
          "3211: {",
          "3213: }",
          "3215: static int",
          "",
          "[Removed Lines]",
          "3212:  return __sched_setscheduler(p, policy, param, false);",
          "",
          "[Added Lines]",
          "3242:  struct sched_attr attr = {",
          "3243:   .sched_policy   = policy,",
          "3244:   .sched_priority = param->sched_priority",
          "3245:  };",
          "3246:  return __sched_setscheduler(p, &attr, false);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3234:  return retval;",
          "3235: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3274: static int sched_copy_attr(struct sched_attr __user *uattr,",
          "3275:       struct sched_attr *attr)",
          "3276: {",
          "3277:  u32 size;",
          "3278:  int ret;",
          "3280:  if (!access_ok(VERIFY_WRITE, uattr, SCHED_ATTR_SIZE_VER0))",
          "3281:   return -EFAULT;",
          "3286:  memset(attr, 0, sizeof(*attr));",
          "3288:  ret = get_user(size, &uattr->size);",
          "3289:  if (ret)",
          "3290:   return ret;",
          "3293:   goto err_size;",
          "3296:   size = SCHED_ATTR_SIZE_VER0;",
          "3298:  if (size < SCHED_ATTR_SIZE_VER0)",
          "3299:   goto err_size;",
          "3307:  if (size > sizeof(*attr)) {",
          "3308:   unsigned char __user *addr;",
          "3309:   unsigned char __user *end;",
          "3310:   unsigned char val;",
          "3312:   addr = (void __user *)uattr + sizeof(*attr);",
          "3313:   end  = (void __user *)uattr + size;",
          "3315:   for (; addr < end; addr++) {",
          "3316:    ret = get_user(val, addr);",
          "3317:    if (ret)",
          "3318:     return ret;",
          "3319:    if (val)",
          "3320:     goto err_size;",
          "3321:   }",
          "3322:   size = sizeof(*attr);",
          "3323:  }",
          "3325:  ret = copy_from_user(attr, uattr, size);",
          "3326:  if (ret)",
          "3327:   return -EFAULT;",
          "3333:  attr->sched_nice = clamp(attr->sched_nice, -20, 19);",
          "3335: out:",
          "3336:  return ret;",
          "3338: err_size:",
          "3339:  put_user(sizeof(*attr), &uattr->size);",
          "3340:  ret = -E2BIG;",
          "3341:  goto out;",
          "3342: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3264:  return do_sched_setscheduler(pid, -1, param);",
          "3265: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3379: SYSCALL_DEFINE2(sched_setattr, pid_t, pid, struct sched_attr __user *, uattr)",
          "3380: {",
          "3381:  struct sched_attr attr;",
          "3382:  struct task_struct *p;",
          "3383:  int retval;",
          "3385:  if (!uattr || pid < 0)",
          "3386:   return -EINVAL;",
          "3388:  if (sched_copy_attr(uattr, &attr))",
          "3389:   return -EFAULT;",
          "3391:  rcu_read_lock();",
          "3392:  retval = -ESRCH;",
          "3393:  p = find_process_by_pid(pid);",
          "3394:  if (p != NULL)",
          "3395:   retval = sched_setattr(p, &attr);",
          "3396:  rcu_read_unlock();",
          "3398:  return retval;",
          "3399: }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3334:  return retval;",
          "3335: }",
          "3337: long sched_setaffinity(pid_t pid, const struct cpumask *in_mask)",
          "3338: {",
          "3339:  cpumask_var_t cpus_allowed, new_mask;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3471: static int sched_read_attr(struct sched_attr __user *uattr,",
          "3472:       struct sched_attr *attr,",
          "3473:       unsigned int usize)",
          "3474: {",
          "3475:  int ret;",
          "3477:  if (!access_ok(VERIFY_WRITE, uattr, usize))",
          "3478:   return -EFAULT;",
          "3485:  if (usize < sizeof(*attr)) {",
          "3486:   unsigned char *addr;",
          "3487:   unsigned char *end;",
          "3489:   addr = (void *)attr + usize;",
          "3490:   end  = (void *)attr + sizeof(*attr);",
          "3492:   for (; addr < end; addr++) {",
          "3493:    if (*addr)",
          "3494:     goto err_size;",
          "3495:   }",
          "3497:   attr->size = usize;",
          "3498:  }",
          "3500:  ret = copy_to_user(uattr, attr, usize);",
          "3501:  if (ret)",
          "3502:   return -EFAULT;",
          "3504: out:",
          "3505:  return ret;",
          "3507: err_size:",
          "3508:  ret = -E2BIG;",
          "3509:  goto out;",
          "3510: }",
          "3518: SYSCALL_DEFINE3(sched_getattr, pid_t, pid, struct sched_attr __user *, uattr,",
          "3519:   unsigned int, size)",
          "3520: {",
          "3521:  struct sched_attr attr = {",
          "3522:   .size = sizeof(struct sched_attr),",
          "3523:  };",
          "3524:  struct task_struct *p;",
          "3525:  int retval;",
          "3527:  if (!uattr || pid < 0 || size > PAGE_SIZE ||",
          "3528:      size < SCHED_ATTR_SIZE_VER0)",
          "3529:   return -EINVAL;",
          "3531:  rcu_read_lock();",
          "3532:  p = find_process_by_pid(pid);",
          "3533:  retval = -ESRCH;",
          "3534:  if (!p)",
          "3535:   goto out_unlock;",
          "3537:  retval = security_task_getscheduler(p);",
          "3538:  if (retval)",
          "3539:   goto out_unlock;",
          "3541:  attr.sched_policy = p->policy;",
          "3542:  if (task_has_rt_policy(p))",
          "3543:   attr.sched_priority = p->rt_priority;",
          "3544:  else",
          "3545:   attr.sched_nice = TASK_NICE(p);",
          "3547:  rcu_read_unlock();",
          "3549:  retval = sched_read_attr(uattr, &attr, size);",
          "3550:  return retval;",
          "3552: out_unlock:",
          "3553:  rcu_read_unlock();",
          "3554:  return retval;",
          "3555: }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "6400: static void normalize_task(struct rq *rq, struct task_struct *p)",
          "6401: {",
          "6402:  const struct sched_class *prev_class = p->sched_class;",
          "6403:  int old_prio = p->prio;",
          "6404:  int on_rq;",
          "6406:  on_rq = p->on_rq;",
          "6407:  if (on_rq)",
          "6408:   dequeue_task(rq, p, 0);",
          "6410:  if (on_rq) {",
          "6411:   enqueue_task(rq, p, 0);",
          "6412:   resched_task(rq->curr);",
          "",
          "[Removed Lines]",
          "6409:  __setscheduler(rq, p, SCHED_NORMAL, 0);",
          "",
          "[Added Lines]",
          "6623:  struct sched_attr attr = {",
          "6624:   .sched_policy = SCHED_NORMAL,",
          "6625:  };",
          "6632:  __setscheduler(rq, p, &attr);",
          "",
          "---------------"
        ],
        "kernel/sched/sched.h||kernel/sched/sched.h": [
          "File: kernel/sched/sched.h -> kernel/sched/sched.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82: #define RUNTIME_INF ((u64)~0ULL)",
          "84: static inline int rt_policy(int policy)",
          "85: {",
          "89: }",
          "91: static inline int task_has_rt_policy(struct task_struct *p)",
          "",
          "[Removed Lines]",
          "86:  if (policy == SCHED_FIFO || policy == SCHED_RR)",
          "87:   return 1;",
          "88:  return 0;",
          "",
          "[Added Lines]",
          "84: static inline int fair_policy(int policy)",
          "85: {",
          "86:  return policy == SCHED_NORMAL || policy == SCHED_BATCH;",
          "87: }",
          "91:  return policy == SCHED_FIFO || policy == SCHED_RR;",
          "",
          "---------------"
        ]
      }
    }
  ]
}