{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "46a31cdf6b7c1197e01627f91af601479cd99940",
      "candidate_info": {
        "commit_hash": "46a31cdf6b7c1197e01627f91af601479cd99940",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/46a31cdf6b7c1197e01627f91af601479cd99940",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/util.c",
          "test/with3.test"
        ],
        "message": "Make sure the WITH stack in the Parse object is disabled following an error.\n\nFossilOrigin-Name: de6e6d6846d6a41c4821454dfdc042096234df753be08c5567b79fe535d9b6ea",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/util.c||src/util.c",
          "test/with3.test||test/with3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b59f94e4da9b1653f2004b214407a50340dd476b27e6ec7e29e501a95db9c963",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4670:   assert( pFrom->pTab==0 );",
          "4672:   pCte = searchWith(pParse->pWith, pFrom, &pWith);",
          "4673:   if( pCte ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4671:   if( pParse->nErr ){",
          "4672:     return SQLITE_ERROR;",
          "4673:   }",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "192:     sqlite3DbFree(db, pParse->zErrMsg);",
          "193:     pParse->zErrMsg = zMsg;",
          "194:     pParse->rc = SQLITE_ERROR;",
          "195:   }",
          "196: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195:     pParse->pWith = 0;",
          "",
          "---------------"
        ],
        "test/with3.test||test/with3.test": [
          "File: test/with3.test -> test/with3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:     SELECT 5 FROM t0 UNION SELECT 8 FROM m",
          "31:   )",
          "32:   SELECT * FROM i;",
          "35: # Additional test cases that came out of the work to",
          "36: # fix for Kostya's problem.",
          "",
          "[Removed Lines]",
          "33: } {1 {no such table: m}}",
          "",
          "[Added Lines]",
          "33: } {1 {no such table: t0}}",
          "35: # 2019-11-09 dbfuzzcheck find",
          "36: do_catchsql_test 1.1 {",
          "37:   CREATE VIEW v1(x,y) AS",
          "38:     WITH t1(a,b) AS (VALUES(1,2))",
          "39:     SELECT * FROM nosuchtable JOIN t1;",
          "40:   SELECT * FROM v1;",
          "41: } {1 {no such table: main.nosuchtable}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "595d9f5f3c19995b6ad1860c164b9aeb41b57000",
      "candidate_info": {
        "commit_hash": "595d9f5f3c19995b6ad1860c164b9aeb41b57000",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/595d9f5f3c19995b6ad1860c164b9aeb41b57000",
        "files": [
          "ext/session/sqlite3session.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a segfault that could occur in sqlite3session_diff() if NULL were passed as the pzErrMsg argument.\n\nFossilOrigin-Name: aee73fd28f031a2568ac723de0826be7f1dca6be3b049e4a04fb47af75dcf4bf",
        "before_after_code_files": [
          "ext/session/sqlite3session.c||ext/session/sqlite3session.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sqlite3session.c||ext/session/sqlite3session.c": [
          "File: ext/session/sqlite3session.c -> ext/session/sqlite3session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1624:       }",
          "1625:       sqlite3_free((char*)azCol);",
          "1626:       if( bMismatch ){",
          "1628:         rc = SQLITE_SCHEMA;",
          "1629:       }",
          "1630:       if( bHasPk==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1627:         if( pzErrMsg ){",
          "1629:         }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b7aad929619f7043b1685a6477d50f6b4436e85511eb365eceae3dd4dbab571a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f83f591541b562b39c2b9cf8b9fcfab54d535e7",
      "candidate_info": {
        "commit_hash": "3f83f591541b562b39c2b9cf8b9fcfab54d535e7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3f83f591541b562b39c2b9cf8b9fcfab54d535e7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add the \".progress\" command to the CLI.\n\nFossilOrigin-Name: ad84ca24ff760f7a2b128f2eeb4d799a97f84b8b8a8bb8d9657c4c555f6ccf47",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14fba4cc5db2bc206f024bfa5dd82fffdbc7577162da2c3b15a91cc1c91f3846",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1090: #define PROGRESS_RESET   0x02         /* Reset the count when the progres",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1782:   }",
          "1783: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1798: static int progress_handler(void *pClientData) {",
          "1799:   ShellState *p = (ShellState*)pClientData;",
          "1800:   p->nProgress++;",
          "1801:   if( p->nProgress>=p->mxProgress && p->mxProgress>0 ){",
          "1802:     raw_printf(p->out, \"Progress limit reached (%u)\\n\", p->nProgress);",
          "1803:     if( p->flgProgress & PROGRESS_RESET ) p->nProgress = 0;",
          "1804:     if( p->flgProgress & PROGRESS_ONCE ) p->mxProgress = 0;",
          "1805:     return 1;",
          "1806:   }",
          "1807:   if( (p->flgProgress & PROGRESS_QUIET)==0 ){",
          "1808:     raw_printf(p->out, \"Progress %u\\n\", p->nProgress);",
          "1809:   }",
          "1810:   return 0;",
          "1811: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3468:   \".output ?FILE?           Send output to FILE or stdout if FILE is omitted\",",
          "3469:   \"     If FILE begins with '|' then open it as a pipe.\",",
          "3470:   \".print STRING...         Print literal STRING\",",
          "3471:   \".prompt MAIN CONTINUE    Replace the standard prompts\",",
          "3472:   \".quit                    Exit this program\",",
          "3473:   \".read FILE               Read input from FILE\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3499:   \".progress N              Invoke progress handler after every N opcodes\",",
          "3500:   \"   --limit N                 Interrupt after N progress callbacks\",",
          "3501:   \"   --once                    Do no more than one progress interrupt\",",
          "3502:   \"   --quiet|-q                No output except at interrupts\",",
          "3503:   \"   --reset                   Reset the count for each input and interrupt\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7000:     raw_printf(p->out, \"\\n\");",
          "7001:   }else",
          "7003:   if( c=='p' && strncmp(azArg[0], \"prompt\", n)==0 ){",
          "7004:     if( nArg >= 2) {",
          "7005:       strncpy(mainPrompt,azArg[1],(int)ArraySize(mainPrompt)-1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7036:   if( c=='p' && n>=3 && strncmp(azArg[0], \"progress\", n)==0 ){",
          "7037:     int i;",
          "7038:     int n = 0;",
          "7039:     p->flgProgress = 0;",
          "7040:     p->mxProgress = 0;",
          "7041:     p->nProgress = 0;",
          "7042:     for(i=1; i<nArg; i++){",
          "7043:       const char *z = azArg[i];",
          "7044:       if( z[0]=='-' ){",
          "7045:         z++;",
          "7046:         if( z[0]=='-' ) z++;",
          "7047:         if( strcmp(z,\"quiet\")==0 || strcmp(z,\"q\")==0 ){",
          "7048:           p->flgProgress |= PROGRESS_QUIET;",
          "7049:           continue;",
          "7050:         }",
          "7051:         if( strcmp(z,\"reset\")==0 ){",
          "7052:           p->flgProgress |= PROGRESS_RESET;",
          "7053:           continue;",
          "7054:         }",
          "7055:         if( strcmp(z,\"once\")==0 ){",
          "7056:           p->flgProgress |= PROGRESS_ONCE;",
          "7057:           continue;",
          "7058:         }",
          "7059:         if( strcmp(z,\"limit\")==0 ){",
          "7060:           if( i+1>=nArg ){",
          "7061:             utf8_printf(stderr, \"Error: missing argument on --limit\\n\");",
          "7062:             rc = 1;",
          "7063:             goto meta_command_exit;",
          "7064:           }else{",
          "7065:             p->mxProgress = (int)integerValue(azArg[++i]);",
          "7066:           }",
          "7067:           continue;",
          "7068:         }",
          "7069:         utf8_printf(stderr, \"Error: unknown option: \\\"%s\\\"\\n\", azArg[i]);",
          "7070:         rc = 1;",
          "7071:         goto meta_command_exit;",
          "7072:       }else{",
          "7073:         n = (int)integerValue(z);",
          "7074:       }",
          "7075:     }",
          "7076:     open_db(p, 0);",
          "7077:     sqlite3_progress_handler(p->db, n, progress_handler, p);",
          "7078:   }else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8336:   open_db(p, 0);",
          "8337:   if( ShellHasFlag(p,SHFLG_Backslash) ) resolve_backslashes(zSql);",
          "8338:   BEGIN_TIMER;",
          "8339:   rc = shell_exec(p, zSql, &zErrMsg);",
          "8340:   END_TIMER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8415:   if( p->flgProgress & PROGRESS_RESET ) p->nProgress = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f68bf5fbe61a8d848fa5fe187ea548ce27940103",
      "candidate_info": {
        "commit_hash": "f68bf5fbe61a8d848fa5fe187ea548ce27940103",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f68bf5fbe61a8d848fa5fe187ea548ce27940103",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/gencol1.test"
        ],
        "message": "Fix an incorrect NEVER() macro.\n\nFossilOrigin-Name: 96b6a76da09a94182414ec1a56da91728c37329d2b55f889e433054ca21605ce",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/gencol1.test||test/gencol1.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/gencol1.test||test/gencol1.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 92893b7980cbb0c6e26bc0b21390a717193205c9897fea5f26476462928897f9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1629:   u8 eType = COLFLAG_VIRTUAL;",
          "1630:   Table *pTab = pParse->pNewTable;",
          "1631:   Column *pCol;",
          "1633:   pCol = &(pTab->aCol[pTab->nCol-1]);",
          "1634:   if( IN_DECLARE_VTAB ){",
          "1635:     sqlite3ErrorMsg(pParse, \"virtual tables cannot use computed columns\");",
          "",
          "[Removed Lines]",
          "1632:   if( NEVER(pTab==0) ) goto generated_done;",
          "",
          "[Added Lines]",
          "1632:   if( pTab==0 ){",
          "1634:     goto generated_done;",
          "1635:   }",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:   SELECT 200, * FROM t3;",
          "263: } {100 1 1}",
          "265: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265: # 2019-12-04 Generated column in a CREATE TABLE IF NOT EXISTS that",
          "266: # does already exist.",
          "267: #",
          "268: sqlite3 db :memory:",
          "269: do_execsql_test gencol1-10.10 {",
          "270:   CREATE TABLE t1(aa,bb);",
          "271:   CREATE TABLE IF NOT EXISTS t1(aa, bb AS (aa+1));",
          "272:   PRAGMA integrity_check;",
          "273: } {ok}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fd15e18d7fe9bea571c52324a6eae25f3e2b4ebc",
      "candidate_info": {
        "commit_hash": "fd15e18d7fe9bea571c52324a6eae25f3e2b4ebc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fd15e18d7fe9bea571c52324a6eae25f3e2b4ebc",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h"
        ],
        "message": "Make sure any window definitions in an ORDER BY clause are removed from the SELECT statement if the ORDER BY clause gets optimized out.\n\nFossilOrigin-Name: 23b119671f0be3c6b72cf2dc5f7707a0626766db7aa56529ab00d33d1a0a1bee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2bf5a4c16457562dc942bcc6ec06d9b4e795ef3ea8e31550e18857bbebd08a76",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1323: }",
          "",
          "[Removed Lines]",
          "1317: static void resolveRemoveWindows(Select *pSelect, Expr *pExpr){",
          "1318:   Walker sWalker;",
          "1319:   memset(&sWalker, 0, sizeof(Walker));",
          "1320:   sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1321:   sWalker.u.pSelect = pSelect;",
          "1322:   sqlite3WalkExpr(&sWalker, pExpr);",
          "1324: #else",
          "1325: # define resolveRemoveWindows(x,y)",
          "1326: #endif",
          "",
          "[Added Lines]",
          "1318: void sqlite3WindowRemoveExprFromSelect(Select *pSelect, Expr *pExpr){",
          "1319:   if( pSelect->pWin ){",
          "1320:     Walker sWalker;",
          "1321:     memset(&sWalker, 0, sizeof(Walker));",
          "1322:     sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1323:     sWalker.u.pSelect = pSelect;",
          "1324:     sqlite3WalkExpr(&sWalker, pExpr);",
          "1325:   }",
          "1332: void sqlite3WindowRemoveExprListFromSelect(Select *pSelect, ExprList *pList){",
          "1333:   if( pList && pSelect->pWin ){",
          "1334:     int i;",
          "1335:     Walker sWalker;",
          "1336:     memset(&sWalker, 0, sizeof(Walker));",
          "1337:     sWalker.xExprCallback = resolveRemoveWindowsCb;",
          "1338:     sWalker.u.pSelect = pSelect;",
          "1339:     for(i=0; i<pList->nExpr; i++){",
          "1340:       sqlite3WalkExpr(&sWalker, pList->a[i].pExpr);",
          "1341:     }",
          "1342:   }",
          "1343: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1398:         pItem->u.x.iOrderByCol = j+1;",
          "1399:       }",
          "1400:     }",
          "",
          "[Removed Lines]",
          "1397:         resolveRemoveWindows(pSelect, pE);",
          "",
          "[Added Lines]",
          "1415:         sqlite3WindowRemoveExprFromSelect(pSelect, pE);",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5661:            pDest->eDest==SRT_DistQueue || pDest->eDest==SRT_Fifo);",
          "5664:     sqlite3ExprListDelete(db, p->pOrderBy);",
          "5665:     p->pOrderBy = 0;",
          "5666:     p->selFlags &= ~SF_Distinct;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5664:     sqlite3WindowRemoveExprListFromSelect(p, p->pOrderBy);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3627: void sqlite3WindowFunctions(void);",
          "3628: void sqlite3WindowChain(Parse*, Window*, Window*);",
          "3629: Window *sqlite3WindowAssemble(Parse*, Window*, ExprList*, ExprList*, Token*);",
          "3630: #else",
          "3631: # define sqlite3WindowDelete(a,b)",
          "3632: # define sqlite3WindowFunctions()",
          "3633: # define sqlite3WindowAttach(a,b,c)",
          "3634: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3630: void sqlite3WindowRemoveExprFromSelect(Select*,Expr*);",
          "3631: void sqlite3WindowRemoveExprListFromSelect(Select*,ExprList*);",
          "3636: # define sqlite3WindowRemoveExprFromSelect(Select*,Expr*);",
          "3637: # define sqlite3WindowRemoveExprListFromSelect(Select*,ExprList*);",
          "",
          "---------------"
        ]
      }
    }
  ]
}