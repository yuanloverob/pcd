{
  "cve_id": "CVE-2021-37653",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can trigger a crash via a floating point exception in `tf.raw_ops.ResourceGather`. The [implementation](https://github.com/tensorflow/tensorflow/blob/f24faa153ad31a4b51578f8181d3aaab77a1ddeb/tensorflow/core/kernels/resource_variable_ops.cc#L725-L731) computes the value of a value, `batch_size`, and then divides by it without checking that this value is not 0. We have patched the issue in GitHub commit ac117ee8a8ea57b73d34665cdf00ef3303bc0b11. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "ac117ee8a8ea57b73d34665cdf00ef3303bc0b11",
  "patch_info": {
    "commit_hash": "ac117ee8a8ea57b73d34665cdf00ef3303bc0b11",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/ac117ee8a8ea57b73d34665cdf00ef3303bc0b11",
    "files": [
      "tensorflow/core/kernels/resource_variable_ops.cc"
    ],
    "message": "Prevent division by 0 in `resource_variable_ops.cc`\n\nPiperOrigin-RevId: 387939939\nChange-Id: Ib04902d63756633999959a70613f2eaa30c2c151",
    "before_after_code_files": [
      "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc": [
      "File: tensorflow/core/kernels/resource_variable_ops.cc -> tensorflow/core/kernels/resource_variable_ops.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "710:         copy_functor(c->eigen_device<Device>(), tmp_indices.flat<Index>(),",
      "711:                      indices.flat<Index>());",
      "714:         op_indices = &tmp_indices;",
      "715:       }",
      "",
      "[Removed Lines]",
      "713:         AddBatchOffsets(&tmp_indices, params);",
      "",
      "[Added Lines]",
      "713:         AddBatchOffsets(c, &tmp_indices, params);",
      "714:         if (!c->status().ok()) return;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "746:     int64_t batch_size = 1;  // The size of all batch dimensions.",
      "747:     for (int idx = 0; idx < batch_dims_; ++idx) {",
      "748:       batch_size *= params.dim_size(idx);",
      "749:     }",
      "751:     auto indices_flat = indices->flat<Index>();",
      "752:     int64_t const index_inner_size = indices->NumElements() / batch_size;",
      "",
      "[Removed Lines]",
      "745:   void AddBatchOffsets(Tensor* indices, const Tensor& params) {",
      "",
      "[Added Lines]",
      "746:   void AddBatchOffsets(OpKernelContext* ctx, Tensor* indices,",
      "747:                        const Tensor& params) {",
      "752:     OP_REQUIRES(",
      "753:         ctx, batch_size != 0,",
      "754:         errors::InvalidArgument(",
      "755:             \"Inner size of indices would result in batch_size of 0 and a \",",
      "756:             \"division by 0 in the implementation. This is illegal\"));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "42828224443dac005f03aa593087f80990869417",
      "candidate_info": {
        "commit_hash": "42828224443dac005f03aa593087f80990869417",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/42828224443dac005f03aa593087f80990869417",
        "files": [
          "tensorflow/core/kernels/resource_variable_ops.cc"
        ],
        "message": "Prevent division by 0 in `resource_variable_ops.cc`\n\nPiperOrigin-RevId: 387939939\nChange-Id: Ib04902d63756633999959a70613f2eaa30c2c151",
        "before_after_code_files": [
          "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc": [
          "File: tensorflow/core/kernels/resource_variable_ops.cc -> tensorflow/core/kernels/resource_variable_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "688:         copy_functor(c->eigen_device<Device>(), tmp_indices.flat<Index>(),",
          "689:                      indices.flat<Index>());",
          "692:         op_indices = &tmp_indices;",
          "693:       }",
          "",
          "[Removed Lines]",
          "691:         AddBatchOffsets(&tmp_indices, params);",
          "",
          "[Added Lines]",
          "691:         AddBatchOffsets(c, &tmp_indices, params);",
          "692:         if (!c->status().ok()) return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "724:     int64 batch_size = 1;  // The size of all batch dimensions.",
          "725:     for (int idx = 0; idx < batch_dims_; ++idx) {",
          "726:       batch_size *= params.dim_size(idx);",
          "727:     }",
          "729:     auto indices_flat = indices->flat<Index>();",
          "730:     int64 const index_inner_size = indices->NumElements() / batch_size;",
          "",
          "[Removed Lines]",
          "723:   void AddBatchOffsets(Tensor* indices, const Tensor& params) {",
          "",
          "[Added Lines]",
          "724:   void AddBatchOffsets(OpKernelContext* ctx, Tensor* indices,",
          "725:                        const Tensor& params) {",
          "730:     OP_REQUIRES(",
          "731:         ctx, batch_size != 0,",
          "732:         errors::InvalidArgument(",
          "733:             \"Inner size of indices would result in batch_size of 0 and a \",",
          "734:             \"division by 0 in the implementation. This is illegal\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "357011b2f05904895be625cef3db87653c2681ed",
      "candidate_info": {
        "commit_hash": "357011b2f05904895be625cef3db87653c2681ed",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/357011b2f05904895be625cef3db87653c2681ed",
        "files": [
          "tensorflow/core/kernels/resource_variable_ops.cc"
        ],
        "message": "Prevent division by 0 in `resource_variable_ops.cc`\n\nPiperOrigin-RevId: 387939939\nChange-Id: Ib04902d63756633999959a70613f2eaa30c2c151",
        "before_after_code_files": [
          "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc": [
          "File: tensorflow/core/kernels/resource_variable_ops.cc -> tensorflow/core/kernels/resource_variable_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "687:         copy_functor(c->eigen_device<Device>(), tmp_indices.flat<Index>(),",
          "688:                      indices.flat<Index>());",
          "691:         op_indices = &tmp_indices;",
          "692:       }",
          "",
          "[Removed Lines]",
          "690:         AddBatchOffsets(&tmp_indices, params);",
          "",
          "[Added Lines]",
          "690:         AddBatchOffsets(c, &tmp_indices, params);",
          "691:         if (!c->status().ok()) return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "723:     int64 batch_size = 1;  // The size of all batch dimensions.",
          "724:     for (int idx = 0; idx < batch_dims_; ++idx) {",
          "725:       batch_size *= params.dim_size(idx);",
          "726:     }",
          "728:     auto indices_flat = indices->flat<Index>();",
          "729:     int64 const index_inner_size = indices->NumElements() / batch_size;",
          "",
          "[Removed Lines]",
          "722:   void AddBatchOffsets(Tensor* indices, const Tensor& params) {",
          "",
          "[Added Lines]",
          "723:   void AddBatchOffsets(OpKernelContext* ctx, Tensor* indices,",
          "724:                        const Tensor& params) {",
          "729:     OP_REQUIRES(",
          "730:         ctx, batch_size != 0,",
          "731:         errors::InvalidArgument(",
          "732:             \"Inner size of indices would result in batch_size of 0 and a \",",
          "733:             \"division by 0 in the implementation. This is illegal\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b53a127949d7846a1efbf779e7bfe297937bd4d",
      "candidate_info": {
        "commit_hash": "8b53a127949d7846a1efbf779e7bfe297937bd4d",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/8b53a127949d7846a1efbf779e7bfe297937bd4d",
        "files": [
          "tensorflow/core/kernels/resource_variable_ops.cc"
        ],
        "message": "Prevent division by 0 in `resource_variable_ops.cc`\n\nPiperOrigin-RevId: 387939939\nChange-Id: Ib04902d63756633999959a70613f2eaa30c2c151",
        "before_after_code_files": [
          "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc": [
          "File: tensorflow/core/kernels/resource_variable_ops.cc -> tensorflow/core/kernels/resource_variable_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "712:         copy_functor(c->eigen_device<Device>(), tmp_indices.flat<Index>(),",
          "713:                      indices.flat<Index>());",
          "716:         op_indices = &tmp_indices;",
          "717:       }",
          "",
          "[Removed Lines]",
          "715:         AddBatchOffsets(&tmp_indices, params);",
          "",
          "[Added Lines]",
          "715:         AddBatchOffsets(c, &tmp_indices, params);",
          "716:         if (!c->status().ok()) return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "748:     int64 batch_size = 1;  // The size of all batch dimensions.",
          "749:     for (int idx = 0; idx < batch_dims_; ++idx) {",
          "750:       batch_size *= params.dim_size(idx);",
          "751:     }",
          "753:     auto indices_flat = indices->flat<Index>();",
          "754:     int64 const index_inner_size = indices->NumElements() / batch_size;",
          "",
          "[Removed Lines]",
          "747:   void AddBatchOffsets(Tensor* indices, const Tensor& params) {",
          "",
          "[Added Lines]",
          "748:   void AddBatchOffsets(OpKernelContext* ctx, Tensor* indices,",
          "749:                        const Tensor& params) {",
          "754:     OP_REQUIRES(",
          "755:         ctx, batch_size != 0,",
          "756:         errors::InvalidArgument(",
          "757:             \"Inner size of indices would result in batch_size of 0 and a \",",
          "758:             \"division by 0 in the implementation. This is illegal\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ddc8bc66d00ccf78de9457ea4b8d6c866e324c3b",
      "candidate_info": {
        "commit_hash": "ddc8bc66d00ccf78de9457ea4b8d6c866e324c3b",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/ddc8bc66d00ccf78de9457ea4b8d6c866e324c3b",
        "files": [
          "tensorflow/core/kernels/resource_variable_ops.cc"
        ],
        "message": "Prevent division by 0 in `resource_variable_ops.cc`\n\nPiperOrigin-RevId: 387939939\nChange-Id: Ib04902d63756633999959a70613f2eaa30c2c151",
        "before_after_code_files": [
          "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/resource_variable_ops.cc||tensorflow/core/kernels/resource_variable_ops.cc": [
          "File: tensorflow/core/kernels/resource_variable_ops.cc -> tensorflow/core/kernels/resource_variable_ops.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "705:         copy_functor(c->eigen_device<Device>(), tmp_indices.flat<Index>(),",
          "706:                      indices.flat<Index>());",
          "709:         op_indices = &tmp_indices;",
          "710:       }",
          "",
          "[Removed Lines]",
          "708:         AddBatchOffsets(&tmp_indices, params);",
          "",
          "[Added Lines]",
          "708:         AddBatchOffsets(c, &tmp_indices, params);",
          "709:         if (!c->status().ok()) return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "741:     int64 batch_size = 1;  // The size of all batch dimensions.",
          "742:     for (int idx = 0; idx < batch_dims_; ++idx) {",
          "743:       batch_size *= params.dim_size(idx);",
          "744:     }",
          "746:     auto indices_flat = indices->flat<Index>();",
          "747:     int64 const index_inner_size = indices->NumElements() / batch_size;",
          "",
          "[Removed Lines]",
          "740:   void AddBatchOffsets(Tensor* indices, const Tensor& params) {",
          "",
          "[Added Lines]",
          "741:   void AddBatchOffsets(OpKernelContext* ctx, Tensor* indices,",
          "742:                        const Tensor& params) {",
          "747:     OP_REQUIRES(",
          "748:         ctx, batch_size != 0,",
          "749:         errors::InvalidArgument(",
          "750:             \"Inner size of indices would result in batch_size of 0 and a \",",
          "751:             \"division by 0 in the implementation. This is illegal\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}