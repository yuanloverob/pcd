{
  "cve_id": "CVE-2019-1010247",
  "cve_desc": "ZmartZone IAM mod_auth_openidc 2.3.10.1 and earlier is affected by: Cross Site Scripting (XSS). The impact is: Redirecting the user to a phishing page or interacting with the application on behalf of the user. The component is: File: src/mod_auth_openidc.c, Line: 3109. The fixed version is: 2.3.10.2.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
  "patch_info": {
    "commit_hash": "132a4111bf3791e76437619a66336dce2ce4c79b",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/132a4111bf3791e76437619a66336dce2ce4c79b",
    "files": [
      "ChangeLog",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "release 2.3.10.2: fix XSS vulnerability for poll parameter\n\nin OIDC Session Management RP iframe; CSNC-2019-001; thanks Mischa\nBachmann\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.1],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.3.10.2],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3106:    \"\\n\"",
      "3107:    \"      function setTimer() {\\n\"",
      "3108:    \"        checkSession();\\n\"",
      "3110:    \"      }\\n\"",
      "3111:    \"\\n\"",
      "3112:    \"      function receiveMessage(e) {\\n\"",
      "",
      "[Removed Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %s);\\n\"",
      "",
      "[Added Lines]",
      "3109:    \"        timerID = setInterval('checkSession()', %d);\\n\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3150:  char *s_poll_interval = NULL;",
      "3151:  oidc_util_get_request_parameter(r, \"poll\", &s_poll_interval);",
      "3155:  const char *redirect_uri = oidc_get_redirect_uri(r, c);",
      "3156:  java_script = apr_psprintf(r->pool, java_script, origin, client_id,",
      "3158:    redirect_uri);",
      "3160:  return oidc_util_html_send(r, NULL, java_script, \"setTimer\", NULL, DONE);",
      "",
      "[Removed Lines]",
      "3152:  if (s_poll_interval == NULL)",
      "3153:   s_poll_interval = \"3000\";",
      "3157:    session_state, op_iframe_id, s_poll_interval, redirect_uri,",
      "",
      "[Added Lines]",
      "3152:  int poll_interval = s_poll_interval ? strtol(s_poll_interval, NULL, 10) : 0;",
      "3153:  if ((poll_interval <= 0) || (poll_interval > 3600 * 24))",
      "3154:   poll_interval = 3000;",
      "3158:    session_state, op_iframe_id, poll_interval, redirect_uri,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "35a8fedb1efeaca0f71d74593b8130a989848d64",
      "candidate_info": {
        "commit_hash": "35a8fedb1efeaca0f71d74593b8130a989848d64",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/35a8fedb1efeaca0f71d74593b8130a989848d64",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/oauth.c"
        ],
        "message": "allow removing an access token from cache in OAuth 2.0 RS mode\n\nallow calling \"remove_at_cache\" on the OIDCRedirectURI handler\nwhen running in OAuth 2.0 RS mode only; bump to 2.4.0rc6\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/oauth.c||src/oauth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0rc6],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2043:  oidc_sdebug(s, \"enter\");",
          "2045:  if ((cfg->metadata_dir != NULL) || (cfg->provider.issuer != NULL)",
          "2048:   if (oidc_check_config_openid_openidc(s, cfg) != OK)",
          "2049:    return HTTP_INTERNAL_SERVER_ERROR;",
          "2050:  }",
          "",
          "[Removed Lines]",
          "2046:    || (cfg->provider.metadata_url != NULL)",
          "2047:    || (cfg->redirect_uri != NULL)) {",
          "",
          "[Added Lines]",
          "2046:    || (cfg->provider.metadata_url != NULL)) {",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3352:  char *access_token = NULL;",
          "3353:  oidc_util_get_request_parameter(r,",
          "3354:    OIDC_REDIRECT_URI_REQUEST_REMOVE_AT_CACHE, &access_token);",
          "",
          "[Removed Lines]",
          "3351: static int oidc_handle_remove_at_cache(request_rec *r, oidc_cfg *c) {",
          "",
          "[Added Lines]",
          "3351: int oidc_handle_remove_at_cache(request_rec *r, oidc_cfg *c) {",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "423: void oidc_request_state_set(request_rec *r, const char *key, const char *value);",
          "424: const char*oidc_request_state_get(request_rec *r, const char *key);",
          "425: int oidc_handle_jwks(request_rec *r, oidc_cfg *c);",
          "426: apr_byte_t oidc_post_preserve_javascript(request_rec *r, const char *location, char **javascript, char **javascript_method);",
          "427: void oidc_scrub_headers(request_rec *r);",
          "428: void oidc_strip_cookies(request_rec *r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "426: int oidc_handle_remove_at_cache(request_rec *r, oidc_cfg *c);",
          "",
          "---------------"
        ],
        "src/oauth.c||src/oauth.c": [
          "File: src/oauth.c -> src/oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "737:    return OK;",
          "738:   }",
          "741:  } else if (oidc_util_request_matches_url(r, oidc_get_redirect_uri(r, c))) {",
          "743:   if (oidc_util_request_has_parameter(r,",
          "744:     OIDC_REDIRECT_URI_REQUEST_JWKS)) {",
          "746:    return oidc_handle_jwks(r, c);",
          "750:  }",
          "",
          "[Removed Lines]",
          "748:   }",
          "",
          "[Added Lines]",
          "750:   } else if (oidc_util_request_has_parameter(r,",
          "751:     OIDC_REDIRECT_URI_REQUEST_REMOVE_AT_CACHE)) {",
          "754:    return oidc_handle_remove_at_cache(r, c);",
          "755:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6b95de3aa3fa5de651bc09b7286d0c3d96f65fe",
      "candidate_info": {
        "commit_hash": "e6b95de3aa3fa5de651bc09b7286d0c3d96f65fe",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/e6b95de3aa3fa5de651bc09b7286d0c3d96f65fe",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "tag 2.4.0.3: further logout URL validation improvement\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0.2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.0.3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01974403c3b162ff7c953f79f6285df8bde4227f",
      "candidate_info": {
        "commit_hash": "01974403c3b162ff7c953f79f6285df8bde4227f",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/01974403c3b162ff7c953f79f6285df8bde4227f",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/cache/cache.h",
          "src/cache/common.c",
          "src/cache/redis.c",
          "src/cache/shm.c",
          "src/config.c"
        ],
        "message": "2.3.7rc4: fix Redis concurrency issue when used with multiple vhosts\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/cache/cache.h||src/cache/cache.h",
          "src/cache/common.c||src/cache/common.c",
          "src/cache/redis.c||src/cache/redis.c",
          "src/cache/shm.c||src/cache/shm.c",
          "src/config.c||src/config.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.7rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.7rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/cache/cache.h||src/cache/cache.h": [
          "File: src/cache/cache.h -> src/cache/cache.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:   const char *type);",
          "90: apr_status_t oidc_cache_mutex_child_init(apr_pool_t *p, server_rec *s,",
          "91:   oidc_cache_mutex_t *m);",
          "94: apr_byte_t oidc_cache_mutex_destroy(server_rec *s, oidc_cache_mutex_t *m);",
          "96: apr_byte_t oidc_cache_get(request_rec *r, const char *section, const char *key,",
          "",
          "[Removed Lines]",
          "92: apr_byte_t oidc_cache_mutex_lock(request_rec *r, oidc_cache_mutex_t *m);",
          "93: apr_byte_t oidc_cache_mutex_unlock(request_rec *r, oidc_cache_mutex_t *m);",
          "",
          "[Added Lines]",
          "92: apr_byte_t oidc_cache_mutex_lock(server_rec *s, oidc_cache_mutex_t *m);",
          "93: apr_byte_t oidc_cache_mutex_unlock(server_rec *s, oidc_cache_mutex_t *m);",
          "",
          "---------------"
        ],
        "src/cache/common.c||src/cache/common.c": [
          "File: src/cache/common.c -> src/cache/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "165:   apr_global_mutex_unlock(m->mutex);",
          "166:  }",
          "170:  return rv;",
          "171: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "168:  oidc_sdebug(s, \"semaphore: %d (m=%pp,s=%pp)\", *m->sema, m, s);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:  apr_status_t rv = apr_global_mutex_lock(m->mutex);",
          "180:  if (rv != APR_SUCCESS)",
          "182:     oidc_cache_status2str(rv), rv);",
          "184:  return TRUE;",
          "",
          "[Removed Lines]",
          "176: apr_byte_t oidc_cache_mutex_lock(request_rec *r, oidc_cache_mutex_t *m) {",
          "181:   oidc_error(r, \"apr_global_mutex_lock() failed: %s (%d)\",",
          "",
          "[Added Lines]",
          "176: apr_byte_t oidc_cache_mutex_lock(server_rec *s, oidc_cache_mutex_t *m) {",
          "181:   oidc_serror(s, \"apr_global_mutex_lock() failed: %s (%d)\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "192:  apr_status_t rv = apr_global_mutex_unlock(m->mutex);",
          "194:  if (rv != APR_SUCCESS)",
          "196:     oidc_cache_status2str(rv), rv);",
          "198:  return TRUE;",
          "",
          "[Removed Lines]",
          "190: apr_byte_t oidc_cache_mutex_unlock(request_rec *r, oidc_cache_mutex_t *m) {",
          "195:   oidc_error(r, \"apr_global_mutex_unlock() failed: %s (%d)\",",
          "",
          "[Added Lines]",
          "190: apr_byte_t oidc_cache_mutex_unlock(server_rec *s, oidc_cache_mutex_t *m) {",
          "195:   oidc_serror(s, \"apr_global_mutex_unlock() failed: %s (%d)\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "210:   apr_global_mutex_lock(m->mutex);",
          "211:   (*m->sema)--;",
          "213:   apr_global_mutex_unlock(m->mutex);",
          "215:   if ((m->shm != NULL) && (*m->sema == 0)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212:   oidc_sdebug(s, \"semaphore: %d (m=%pp,s=%pp)\", *m->sema, m->mutex, s);",
          "",
          "---------------"
        ],
        "src/cache/redis.c||src/cache/redis.c": [
          "File: src/cache/redis.c -> src/cache/redis.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "69: typedef struct oidc_cache_cfg_redis_t {",
          "71:  oidc_cache_mutex_t *mutex;",
          "72:  char *host_str;",
          "73:  apr_port_t port;",
          "74:  char *passwd;",
          "75: } oidc_cache_cfg_redis_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:  redisContext *ctx;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:  oidc_cache_cfg_redis_t *context = apr_pcalloc(pool,",
          "80:    sizeof(oidc_cache_cfg_redis_t));",
          "81:  context->mutex = oidc_cache_mutex_create(pool);",
          "82:  context->passwd = NULL;",
          "83:  return context;",
          "84: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82:  context->host_str = NULL;",
          "84:  context->ctx = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:  return apr_psprintf(pool, \"%s:%s\", section, key);",
          "156: }",
          "176:  }",
          "177:  return APR_SUCCESS;",
          "178: }",
          "",
          "[Removed Lines]",
          "159: #define OIDC_CACHE_REDIS_CONTEXT \"oidc_cache_redis_context\"",
          "164: typedef struct {",
          "165:  redisContext *ctx;",
          "166: } oidc_cache_redis_ctx_t;",
          "171: static apr_status_t oidc_cache_redis_free(void *ptr) {",
          "172:  oidc_cache_redis_ctx_t *rctx = (oidc_cache_redis_ctx_t *) ptr;",
          "173:  if ((rctx != NULL) && (rctx->ctx != NULL)) {",
          "174:   redisFree(rctx->ctx);",
          "175:   rctx->ctx = NULL;",
          "",
          "[Added Lines]",
          "163: static apr_status_t oidc_cache_redis_free(oidc_cache_cfg_redis_t *context) {",
          "164:  if ((context != NULL) && (context->ctx != NULL)) {",
          "165:   redisFree(context->ctx);",
          "166:   context->ctx = NULL;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "184:   oidc_cache_cfg_redis_t *context) {",
          "209:    oidc_error(r, \"failed to connect to Redis server (%s:%d): '%s'\",",
          "210:      context->host_str, context->port,",
          "213:   } else {",
          "215:    oidc_debug(r, \"successfully connected to Redis server (%s:%d)\",",
          "",
          "[Removed Lines]",
          "183: static oidc_cache_redis_ctx_t * oidc_cache_redis_connect(request_rec *r,",
          "187:  oidc_cache_redis_ctx_t *rctx = NULL;",
          "189:  apr_pool_userdata_get((void **) &rctx, OIDC_CACHE_REDIS_CONTEXT,",
          "190:    r->server->process->pool);",
          "192:  if (rctx == NULL) {",
          "193:   rctx = apr_pcalloc(r->server->process->pool,",
          "194:     sizeof(oidc_cache_redis_ctx_t));",
          "195:   rctx->ctx = NULL;",
          "198:   apr_pool_userdata_set(rctx, OIDC_CACHE_REDIS_CONTEXT,",
          "199:     oidc_cache_redis_free, r->server->process->pool);",
          "200:  }",
          "202:  if (rctx->ctx == NULL) {",
          "205:   rctx->ctx = redisConnect(context->host_str, context->port);",
          "208:   if ((rctx->ctx == NULL) || (rctx->ctx->err != 0)) {",
          "211:      rctx->ctx != NULL ? rctx->ctx->errstr : \"\");",
          "212:    oidc_cache_redis_free(rctx);",
          "",
          "[Added Lines]",
          "174: static apr_status_t oidc_cache_redis_connect(request_rec *r,",
          "177:  if (context->ctx == NULL) {",
          "180:   context->ctx = redisConnect(context->host_str, context->port);",
          "183:   if ((context->ctx == NULL) || (context->ctx->err != 0)) {",
          "186:      context->ctx != NULL ? context->ctx->errstr : \"\");",
          "187:    oidc_cache_redis_free(context);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "217:   }",
          "218:  }",
          "221: }",
          "",
          "[Removed Lines]",
          "220:  return rctx;",
          "",
          "[Added Lines]",
          "195:  return (context->ctx != NULL) ? APR_SUCCESS : APR_EGENERAL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "238: static redisReply* oidc_cache_redis_command(request_rec *r,",
          "239:   oidc_cache_cfg_redis_t *context, const char *command) {",
          "242:  redisReply *reply = NULL;",
          "243:  int i = 0;",
          "",
          "[Removed Lines]",
          "241:  oidc_cache_redis_ctx_t *rctx = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "246:  for (i = 0; i < OIDC_REDIS_MAX_TRIES; i++) {",
          "251:    break;",
          "254:   if (context->passwd != NULL) {",
          "256:    if ((reply == NULL) || (reply->type == REDIS_REPLY_ERROR))",
          "257:     oidc_error(r,",
          "258:       \"Redis AUTH command (attempt=%d to %s:%d) failed: '%s' [%s]\",",
          "263:    oidc_cache_redis_reply_free(&reply);",
          "264:   }",
          "270:   if ((reply != NULL) && (reply->type != REDIS_REPLY_ERROR))",
          "",
          "[Removed Lines]",
          "249:   rctx = oidc_cache_redis_connect(r, context);",
          "250:   if ((rctx == NULL) || (rctx->ctx == NULL))",
          "255:    reply = redisCommand(rctx->ctx, \"AUTH %s\", context->passwd);",
          "259:       i, context->host_str, context->port, rctx->ctx->errstr,",
          "260:       reply ? reply->str : \"<n/a>\");",
          "267:   reply = redisCommand(rctx->ctx, command);",
          "",
          "[Added Lines]",
          "223:   if (oidc_cache_redis_connect(r, context) != APR_SUCCESS)",
          "228:    reply = redisCommand(context->ctx, \"AUTH %s\", context->passwd);",
          "232:       i, context->host_str, context->port,",
          "233:       context->ctx->errstr, reply ? reply->str : \"<n/a>\");",
          "240:   reply = redisCommand(context->ctx, command);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "275:   oidc_error(r,",
          "276:     \"Redis command (attempt=%d to %s:%d) failed, disconnecting: '%s' [%s]\",",
          "278:     reply ? reply->str : \"<n/a>\");",
          "281:   oidc_cache_redis_reply_free(&reply);",
          "285:  }",
          "287:  return reply;",
          "",
          "[Removed Lines]",
          "277:     i, context->host_str, context->port, rctx->ctx->errstr,",
          "284:   oidc_cache_redis_free(rctx);",
          "",
          "[Added Lines]",
          "250:     i, context->host_str, context->port, context->ctx->errstr,",
          "257:   oidc_cache_redis_free(context);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "300:  apr_byte_t rv = FALSE;",
          "304:   return FALSE;",
          "",
          "[Removed Lines]",
          "303:  if (oidc_cache_mutex_lock(r, context->mutex) == FALSE)",
          "",
          "[Added Lines]",
          "276:  if (oidc_cache_mutex_lock(r->server, context->mutex) == FALSE)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "336:  oidc_cache_redis_reply_free(&reply);",
          "342:  return rv;",
          "",
          "[Removed Lines]",
          "339:  oidc_cache_mutex_unlock(r, context->mutex);",
          "",
          "[Added Lines]",
          "312:  oidc_cache_mutex_unlock(r->server, context->mutex);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "356:  apr_uint32_t timeout;",
          "360:   return FALSE;",
          "",
          "[Removed Lines]",
          "359:  if (oidc_cache_mutex_lock(r, context->mutex) == FALSE)",
          "",
          "[Added Lines]",
          "332:  if (oidc_cache_mutex_lock(r->server, context->mutex) == FALSE)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "386:  oidc_cache_redis_reply_free(&reply);",
          "392:  return rv;",
          "",
          "[Removed Lines]",
          "389:  oidc_cache_mutex_unlock(r, context->mutex);",
          "",
          "[Added Lines]",
          "362:  oidc_cache_mutex_unlock(r->server, context->mutex);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "397:    &auth_openidc_module);",
          "398:  oidc_cache_cfg_redis_t *context = (oidc_cache_cfg_redis_t *) cfg->cache_cfg;",
          "402:  return APR_SUCCESS;",
          "403: }",
          "",
          "[Removed Lines]",
          "400:  oidc_cache_mutex_destroy(s, context->mutex);",
          "",
          "[Added Lines]",
          "373:  oidc_sdebug(s, \"enter: (%pp), (%pp)\", context,",
          "374:    ((context != NULL) ? context->ctx : 0));",
          "376:  if (context != NULL) {",
          "378:   if (context->ctx != NULL) {",
          "379:    oidc_cache_mutex_lock(s, context->mutex);",
          "380:    oidc_cache_redis_free(context);",
          "381:    oidc_cache_mutex_unlock(s, context->mutex);",
          "382:   }",
          "383:   oidc_cache_mutex_destroy(s, context->mutex);",
          "384:  }",
          "386:  oidc_sdebug(s, \"leave\");",
          "",
          "---------------"
        ],
        "src/cache/shm.c||src/cache/shm.c": [
          "File: src/cache/shm.c -> src/cache/shm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:   return FALSE;",
          "",
          "[Removed Lines]",
          "185:  if (oidc_cache_mutex_lock(r, context->mutex) == FALSE)",
          "",
          "[Added Lines]",
          "185:  if (oidc_cache_mutex_lock(r->server, context->mutex) == FALSE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:  }",
          "221:  return TRUE;",
          "222: }",
          "",
          "[Removed Lines]",
          "219:  oidc_cache_mutex_unlock(r, context->mutex);",
          "",
          "[Added Lines]",
          "219:  oidc_cache_mutex_unlock(r->server, context->mutex);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "255:  }",
          "259:   return FALSE;",
          "",
          "[Removed Lines]",
          "258:  if (oidc_cache_mutex_lock(r, context->mutex) == FALSE)",
          "",
          "[Added Lines]",
          "258:  if (oidc_cache_mutex_lock(r->server, context->mutex) == FALSE)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "328:  }",
          "333:  return TRUE;",
          "334: }",
          "",
          "[Removed Lines]",
          "331:  oidc_cache_mutex_unlock(r, context->mutex);",
          "",
          "[Added Lines]",
          "331:  oidc_cache_mutex_unlock(r->server, context->mutex);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "340:  apr_status_t rv = APR_SUCCESS;",
          "342:  if (context->shm) {",
          "344:   if (*context->mutex->sema == 1) {",
          "345:    rv = apr_shm_destroy(context->shm);",
          "346:    oidc_sdebug(s, \"apr_shm_destroy returned: %d\", rv);",
          "347:   }",
          "348:   context->shm = NULL;",
          "350:  }",
          "352:  oidc_cache_mutex_destroy(s, context->mutex);",
          "",
          "[Removed Lines]",
          "343:   apr_global_mutex_lock(context->mutex->mutex);",
          "349:   apr_global_mutex_unlock(context->mutex->mutex);",
          "",
          "[Added Lines]",
          "343:   oidc_cache_mutex_lock(s, context->mutex);",
          "349:   oidc_cache_mutex_unlock(s, context->mutex);",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2210:   }",
          "2211:   sp = sp->next;",
          "2212:  }",
          "2214: }",
          "",
          "[Removed Lines]",
          "2213:  apr_pool_cleanup_register(p, s, oidc_cleanup_child, apr_pool_cleanup_null);",
          "",
          "[Added Lines]",
          "2213:  apr_pool_cleanup_register(p, s, apr_pool_cleanup_null, oidc_cleanup_child);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6899ed67ec57b7ae69517b98197f566cc0b7f5e8",
      "candidate_info": {
        "commit_hash": "6899ed67ec57b7ae69517b98197f566cc0b7f5e8",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/6899ed67ec57b7ae69517b98197f566cc0b7f5e8",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/oauth.c"
        ],
        "message": "fix access_token POST parameter with AuthType auth-openidc; closes #376\n\nthanks Nicolas Salerno; bump to 2.3.8rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/oauth.c||src/oauth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.7],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.8rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3361:  const char *access_token = NULL;",
          "3362:  if (oidc_oauth_get_bearer_token(r, &access_token) == TRUE)",
          "3366:  return oidc_check_userid_openidc(r, c);",
          "",
          "[Removed Lines]",
          "3363:   return oidc_oauth_check_userid(r, c);",
          "",
          "[Added Lines]",
          "3363:   return oidc_oauth_check_userid(r, c, access_token);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3391:  if (apr_strnatcasecmp((const char *) ap_auth_type(r),",
          "3392:    OIDC_AUTH_TYPE_OPENID_OAUTH20) == 0)",
          "3396:  if (apr_strnatcasecmp((const char *) ap_auth_type(r),",
          "",
          "[Removed Lines]",
          "3393:   return oidc_oauth_check_userid(r, c);",
          "",
          "[Added Lines]",
          "3393:   return oidc_oauth_check_userid(r, c, NULL);",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "431: #define OIDC_REDIRECT_URI_REQUEST_REQUEST_URI      \"request_uri\"",
          "435: apr_byte_t oidc_oauth_get_bearer_token(request_rec *r, const char **access_token);",
          "",
          "[Removed Lines]",
          "434: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c);",
          "",
          "[Added Lines]",
          "434: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c, const char *access_token);",
          "",
          "---------------"
        ],
        "src/oauth.c||src/oauth.c": [
          "File: src/oauth.c -> src/oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "712:  if (!ap_is_initial_req(r)) {",
          "",
          "[Removed Lines]",
          "709: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c) {",
          "",
          "[Added Lines]",
          "709: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c, const char *access_token) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "747:  oidc_oauth_provider_config(r, c);",
          "755:   }",
          "758:  }",
          "",
          "[Removed Lines]",
          "750:  const char *access_token = NULL;",
          "751:  if (oidc_oauth_get_bearer_token(r, &access_token) == FALSE) {",
          "752:   if (r->method_number == M_OPTIONS) {",
          "753:    r->user = \"\";",
          "754:    return OK;",
          "756:   return oidc_oauth_return_www_authenticate(r,",
          "757:     OIDC_PROTO_ERR_INVALID_REQUEST, \"No bearer token found in the request\");",
          "",
          "[Added Lines]",
          "750:  if (access_token == NULL) {",
          "751:   if (oidc_oauth_get_bearer_token(r, &access_token) == FALSE) {",
          "752:    if (r->method_number == M_OPTIONS) {",
          "753:     r->user = \"\";",
          "754:     return OK;",
          "755:    }",
          "756:    return oidc_oauth_return_www_authenticate(r,",
          "757:      OIDC_PROTO_ERR_INVALID_REQUEST, \"No bearer token found in the request\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bfb336958b9214da8af0368d1694015561a463cf",
      "candidate_info": {
        "commit_hash": "bfb336958b9214da8af0368d1694015561a463cf",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/bfb336958b9214da8af0368d1694015561a463cf",
        "files": [
          "ChangeLog",
          "README.md",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/oauth.c",
          "src/proto.c",
          "src/util.c",
          "test/test.c"
        ],
        "message": "support Token Binding for OAuth 2.0 access tokens\n\n- for JWT or introspected, according to:\nhttps://tools.ietf.org/html/draft-ietf-oauth-token-binding\n- bump to 2.3.9rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/oauth.c||src/oauth.c",
          "src/proto.c||src/proto.c",
          "src/util.c||src/util.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "394: # When not defined the default \"header\" is used.",
          "395: #OIDCOAuthAcceptTokenAs [header|post|query|cookie[:<cookie-name>|basic]+",
          "397: ########################################################################################",
          "398: #",
          "399: # Cookie Settings",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "397: # The Token Binding policy used for OAuth 2.0 Access Tokens",
          "398: # see: https://tools.ietf.org/html/draft-ietf-oauth-token-binding",
          "399: # \"disabled\": no token binding ID will be verified in the access token, present or not",
          "400: # \"optional\": the \"cnf[\"tbh\"]\" claim is optional in the introspection result or the JWT access token, if it is present it will be verified",
          "401: # \"required\": the \"cnf[\"tbh\"]\" claim must be present when the Client supports Token Binding",
          "402: # \"enforced\": the \"cnf[\"tbh\"]\" claim must be present and the Client must support Token Binding",
          "403: # When not defined the default is \"optional\".",
          "404: #OIDCOAuthAccessTokenBindingPolicy [disabled|optional|required|enforced]",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.9rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.3.9rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: #define OIDC_DEFAULT_PROVIDER_METADATA_REFRESH_INTERVAL 0",
          "162: #define OIDC_DEFAULT_PROVIDER_TOKEN_BINDING_POLICY OIDC_TOKEN_BINDING_POLICY_OPTIONAL",
          "164: #define OIDC_DEFAULT_AUTH_REQUEST_METHOD OIDC_AUTH_REQUEST_METHOD_GET",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164: #define OIDC_DEFAULT_OAUTH_ACCESS_TOKEN_BINDING_POLICY OIDC_TOKEN_BINDING_POLICY_OPTIONAL",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259: #define OIDCProviderAuthRequestMethod        \"OIDCProviderAuthRequestMethod\"",
          "260: #define OIDCBlackListedClaims                \"OIDCBlackListedClaims\"",
          "261: #define OIDCOAuthServerMetadataURL           \"OIDCOAuthServerMetadataURL\"",
          "263: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "264: #define OIDCOAuthAccessTokenBindingPolicy    \"OIDCOAuthAccessTokenBindingPolicy\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "941:   void *struct_ptr, const char *arg) {",
          "942:  oidc_cfg *cfg = (oidc_cfg *) ap_get_module_config(",
          "943:    cmd->server->module_config, &auth_openidc_module);",
          "944:  const char *rv = oidc_parse_token_binding_policy(cmd->pool, arg,",
          "946:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "947: }",
          "",
          "[Removed Lines]",
          "945:    &cfg->provider.token_binding_policy);",
          "",
          "[Added Lines]",
          "947:  int offset = (int) (long) cmd->info;",
          "948:  int *token_binding_policy = (int *) ((char *) cfg + offset);",
          "950:    token_binding_policy);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1102:  c->oauth.verify_public_keys = NULL;",
          "1103:  c->oauth.verify_shared_keys = NULL;",
          "1105:  c->cache = &oidc_cache_shm;",
          "1106:  c->cache_cfg = NULL;",
          "1107:  c->cache_encrypt = OIDC_CONFIG_POS_INT_UNSET;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1110:  c->oauth.access_token_binding_policy =",
          "1111:    OIDC_DEFAULT_OAUTH_ACCESS_TOKEN_BINDING_POLICY;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1432:      add->oauth.verify_shared_keys :",
          "1433:      base->oauth.verify_shared_keys;",
          "1435:  c->http_timeout_long =",
          "1436:    add->http_timeout_long != OIDC_DEFAULT_HTTP_TIMEOUT_LONG ?",
          "1437:      add->http_timeout_long : base->http_timeout_long;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1443:  c->oauth.access_token_binding_policy =",
          "1444:    add->oauth.access_token_binding_policy",
          "1445:    != OIDC_DEFAULT_OAUTH_ACCESS_TOKEN_BINDING_POLICY ?",
          "1446:      add->oauth.access_token_binding_policy :",
          "1447:      base->oauth.access_token_binding_policy;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2849:     (void*)APR_OFFSETOF(oidc_cfg, oauth.metadata_url),",
          "2850:     RSRC_CONF,",
          "2851:     \"Authorization Server metadata URL.\"),",
          "2852:   { NULL }",
          "2853: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2866:   AP_INIT_TAKE1(OIDCOAuthAccessTokenBindingPolicy,",
          "2867:     oidc_set_token_binding_policy,",
          "2868:     (void *)APR_OFFSETOF(oidc_cfg, oauth.access_token_binding_policy),",
          "2869:     RSRC_CONF,",
          "2870:     \"The token binding policy used for access tokens; must be one of [disabled|optional|required|enforced]\"),",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "262:  apr_sha1_update(&sha1, nonce, strlen(nonce));",
          "",
          "[Removed Lines]",
          "255:  int remotehost_is_ip;",
          "256:  value = ap_get_remote_host(r->connection, r->per_dir_config,",
          "257:    REMOTE_NOLOOKUP, &remotehost_is_ip);",
          "258:  apr_sha1_update(&sha1, value, strlen(value));",
          "",
          "[Added Lines]",
          "255:   int remotehost_is_ip;",
          "256:   value = ap_get_remote_host(r->connection, r->per_dir_config,",
          "257:   REMOTE_NOLOOKUP, &remotehost_is_ip);",
          "258:   apr_sha1_update(&sha1, value, strlen(value));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "574:  if (oidc_proto_validate_jwt(r, jwt, provider->issuer, FALSE, FALSE,",
          "576:   oidc_jwt_destroy(jwt);",
          "577:   return FALSE;",
          "578:  }",
          "",
          "[Removed Lines]",
          "575:    provider->idtoken_iat_slack) == FALSE) {",
          "",
          "[Added Lines]",
          "575:    provider->idtoken_iat_slack,",
          "576:    OIDC_TOKEN_BINDING_POLICY_DISABLED) == FALSE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "849:   return HTTP_SERVICE_UNAVAILABLE;",
          "850:  }",
          "",
          "[Removed Lines]",
          "841:   return oidc_util_html_send_error(r, c->error_template,",
          "842:     \"Too Many Outstanding Requests\",",
          "843:     apr_psprintf(r->pool,",
          "844:       \"No authentication request could be generated since there are too many outstanding authentication requests already; you may have to wait up to %d seconds to be able to create a new request\",",
          "845:       c->state_timeout),",
          "846:       HTTP_SERVICE_UNAVAILABLE);",
          "",
          "[Added Lines]",
          "842:    return oidc_util_html_send_error(r, c->error_template,",
          "843:    \"Too Many Outstanding Requests\",",
          "844:    apr_psprintf(r->pool,",
          "845:    \"No authentication request could be generated since there are too many outstanding authentication requests already; you may have to wait up to %d seconds to be able to create a new request\",",
          "846:    c->state_timeout),",
          "847:    HTTP_SERVICE_UNAVAILABLE);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2983:   goto end;",
          "2984:  }",
          "2989:  if (error_code != NULL)",
          "",
          "[Removed Lines]",
          "2986: end:",
          "",
          "[Added Lines]",
          "2987:  end:",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "319:  apr_hash_t *verify_shared_keys;",
          "320:  char *verify_jwks_uri;",
          "321:  apr_hash_t *verify_public_keys;",
          "322: } oidc_oauth_t;",
          "324: typedef struct oidc_cfg {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:  int access_token_binding_policy;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "515: #define OIDC_CLAIM_C_HASH          \"c_hash\"",
          "516: #define OIDC_CLAIM_RFP             \"rfp\"",
          "517: #define OIDC_CLAIM_TARGET_LINK_URI \"target_link_uri\"",
          "519: #define OIDC_JWK_X5T       \"x5t\"",
          "520: #define OIDC_JWK_KEYS      \"keys\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "519: #define OIDC_CLAIM_CNF             \"cnf\"",
          "520: #define OIDC_CLAIM_CNF_TBH         \"tbh\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "619: apr_byte_t oidc_proto_flow_is_supported(apr_pool_t *pool, const char *flow);",
          "620: apr_byte_t oidc_proto_validate_authorization_response(request_rec *r, const char *response_type, const char *requested_response_mode, char **code, char **id_token, char **access_token, char **token_type, const char *used_response_mode);",
          "621: apr_byte_t oidc_proto_jwt_verify(request_rec *r, oidc_cfg *cfg, oidc_jwt_t *jwt, const oidc_jwks_uri_t *jwks_uri, apr_hash_t *symmetric_keys);",
          "623: apr_byte_t oidc_proto_generate_nonce(request_rec *r, char **nonce, int len);",
          "625: apr_byte_t oidc_proto_authorization_response_code_idtoken_token(request_rec *r, oidc_cfg *c, oidc_proto_state_t *proto_state, oidc_provider_t *provider, apr_table_t *params, const char *response_mode, oidc_jwt_t **jwt);",
          "",
          "[Removed Lines]",
          "622: apr_byte_t oidc_proto_validate_jwt(request_rec *r, oidc_jwt_t *jwt, const char *iss, apr_byte_t exp_is_mandatory, apr_byte_t iat_is_mandatory, int iat_slack);",
          "",
          "[Added Lines]",
          "625: apr_byte_t oidc_proto_validate_jwt(request_rec *r, oidc_jwt_t *jwt, const char *iss, apr_byte_t exp_is_mandatory, apr_byte_t iat_is_mandatory, int iat_slack, int token_binding_policy);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "793: const char *oidc_util_hdr_out_location_get(const request_rec *r);",
          "794: void oidc_util_hdr_err_out_add(const request_rec *r, const char *name, const char *value);",
          "795: apr_byte_t oidc_util_hdr_in_accept_contains(const request_rec *r, const char *needle);",
          "798: apr_byte_t oidc_metadata_provider_retrieve(request_rec *r, oidc_cfg *cfg, const char *issuer, const char *url, json_t **j_metadata, char **response);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "799: apr_byte_t oidc_util_json_validate_cnf(request_rec *r, json_t *jwt, int token_binding_policy);",
          "",
          "---------------"
        ],
        "src/oauth.c||src/oauth.c": [
          "File: src/oauth.c -> src/oauth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "480:   if (oidc_util_decode_json_and_check_error(r, s_json, &result) == FALSE)",
          "481:    return FALSE;",
          "483:   json_t *active = json_object_get(result, OIDC_PROTO_ACTIVE);",
          "484:   apr_time_t cache_until;",
          "485:   if (active != NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "484:   if (oidc_util_json_validate_cnf(r, result,",
          "485:     c->oauth.access_token_binding_policy) == FALSE)",
          "486:    return FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "619:   oidc_jwt_destroy(jwt);",
          "620:   return FALSE;",
          "621:  }",
          "",
          "[Removed Lines]",
          "618:  if (oidc_proto_validate_jwt(r, jwt, NULL, FALSE, FALSE, -1) == FALSE) {",
          "",
          "[Added Lines]",
          "625:  if (oidc_proto_validate_jwt(r, jwt, NULL, FALSE, FALSE, -1,",
          "626:    c->oauth.access_token_binding_policy) == FALSE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "711:  if (!ap_is_initial_req(r)) {",
          "",
          "[Removed Lines]",
          "708: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c, const char *access_token) {",
          "",
          "[Added Lines]",
          "716: int oidc_oauth_check_userid(request_rec *r, oidc_cfg *c,",
          "717:   const char *access_token) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "753:     return OK;",
          "754:    }",
          "755:    return oidc_oauth_return_www_authenticate(r,",
          "757:   }",
          "758:  }",
          "",
          "[Removed Lines]",
          "756:      OIDC_PROTO_ERR_INVALID_REQUEST, \"No bearer token found in the request\");",
          "",
          "[Added Lines]",
          "765:      OIDC_PROTO_ERR_INVALID_REQUEST,",
          "766:      \"No bearer token found in the request\");",
          "",
          "---------------"
        ],
        "src/proto.c||src/proto.c": [
          "File: src/proto.c -> src/proto.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1123:  return TRUE;",
          "1124: }",
          "",
          "[Removed Lines]",
          "1126: #define OIDC_CLAIM_CNF     \"cnf\"",
          "1127: #define OIDC_CLAIM_CNF_TBH \"tbh\"",
          "1132: static apr_byte_t oidc_proto_validate_cnf(request_rec *r, oidc_cfg *cfg,",
          "1133:   oidc_provider_t *provider, oidc_jwt_payload_t *id_token_payload) {",
          "1134:  char *tbh_str = NULL;",
          "1135:  char *tbh = NULL;",
          "1136:  int tbh_len = -1;",
          "1137:  const char *tbp_str = NULL;",
          "1138:  char *tbp = NULL;",
          "1139:  int tbp_len = -1;",
          "1140:  unsigned char *tbp_hash = NULL;",
          "1141:  unsigned int tbp_hash_len = -1;",
          "1143:  oidc_debug(r, \"enter: policy=%s\",",
          "1144:    oidc_token_binding_policy2str(r->pool,",
          "1145:      provider->token_binding_policy));",
          "1147:  if (provider->token_binding_policy == OIDC_TOKEN_BINDING_POLICY_DISABLED)",
          "1148:   return TRUE;",
          "1150:  tbp_str = oidc_util_get_provided_token_binding_id(r);",
          "1151:  if (tbp_str == NULL) {",
          "1152:   oidc_debug(r,",
          "1153:     \"no Provided Token Binding ID environment variable found\");",
          "1154:   goto out_err;",
          "1155:  }",
          "1157:  tbp_len = oidc_base64url_decode(r->pool, &tbp, tbp_str);",
          "1158:  if (tbp_len <= 0) {",
          "1159:   oidc_warn(r,",
          "1160:     \"Provided Token Binding ID environment variable could not be decoded\");",
          "1161:   return FALSE;",
          "1162:  }",
          "1164:  if (oidc_jose_hash_bytes(r->pool, OIDC_JOSE_ALG_SHA256,",
          "1165:    (const unsigned char *) tbp, tbp_len, &tbp_hash, &tbp_hash_len,",
          "1166:    NULL) == FALSE) {",
          "1167:   oidc_warn(r,",
          "1168:     \"hashing Provided Token Binding ID environment variable failed\");",
          "1169:   return FALSE;",
          "1170:  }",
          "1172:  json_t *cnf = json_object_get(id_token_payload->value.json, OIDC_CLAIM_CNF);",
          "1173:  if (cnf == NULL) {",
          "1174:   oidc_debug(r, \"no \\\"cnf\\\" claim found in id_token\");",
          "1175:   goto out_err;",
          "1176:  }",
          "1178:  oidc_jose_get_string(r->pool, cnf, OIDC_CLAIM_CNF_TBH, FALSE, &tbh_str,",
          "1179:    NULL);",
          "1180:  if (tbh_str == NULL) {",
          "1181:   oidc_debug(r,",
          "1182:     \" \\\"cnf\\\" claim found in id_token but no \\\"tbh\\\" claim inside found\");",
          "1183:   goto out_err;",
          "1184:  }",
          "1186:  tbh_len = oidc_base64url_decode(r->pool, &tbh, tbh_str);",
          "1187:  if (tbh_len <= 0) {",
          "1188:   oidc_warn(r, \"cnf[\\\"tbh\\\"] provided but it could not be decoded\");",
          "1189:   return FALSE;",
          "1190:  }",
          "1192:  if (tbp_hash_len != tbh_len) {",
          "1193:   oidc_warn(r,",
          "1194:     \"hash length of provided token binding ID environment variable: %d does not match length of cnf[\\\"tbh\\\"]: %d\",",
          "1195:     tbp_hash_len, tbh_len);",
          "1196:   return FALSE;",
          "1197:  }",
          "1199:  if (memcmp(tbp_hash, tbh, tbh_len) != 0) {",
          "1200:   oidc_warn(r,",
          "1201:     \"hash of provided token binding ID environment variable does not match cnf[\\\"tbh\\\"]\");",
          "1202:   return FALSE;",
          "1203:  }",
          "1205:  oidc_debug(r,",
          "1206:    \"hash of provided token binding ID environment variable matches cnf[\\\"tbh\\\"]\");",
          "1208:  return TRUE;",
          "1210: out_err:",
          "1212:  if (provider->token_binding_policy == OIDC_TOKEN_BINDING_POLICY_OPTIONAL)",
          "1213:   return TRUE;",
          "1214:  if (provider->token_binding_policy == OIDC_TOKEN_BINDING_POLICY_ENFORCED)",
          "1215:   return FALSE;",
          "1218:  return (tbp_str == NULL);",
          "1219: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1297: apr_byte_t oidc_proto_validate_jwt(request_rec *r, oidc_jwt_t *jwt,",
          "1298:   const char *iss, apr_byte_t exp_is_mandatory,",
          "1301:  if (iss != NULL) {",
          "",
          "[Removed Lines]",
          "1299:   apr_byte_t iat_is_mandatory, int iat_slack) {",
          "",
          "[Added Lines]",
          "1204:   apr_byte_t iat_is_mandatory, int iat_slack, int token_binding_policy) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1325:  if (oidc_proto_validate_iat(r, jwt, iat_is_mandatory, iat_slack) == FALSE)",
          "1326:   return FALSE;",
          "1328:  return TRUE;",
          "1329: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1234:  if (oidc_util_json_validate_cnf(r, jwt->payload.value.json,",
          "1235:    token_binding_policy) == FALSE)",
          "1236:   return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1351:  if (oidc_proto_validate_jwt(r, jwt, provider->issuer, TRUE, TRUE,",
          "1353:   return FALSE;",
          "",
          "[Removed Lines]",
          "1352:    provider->idtoken_iat_slack) == FALSE)",
          "",
          "[Added Lines]",
          "1262:    provider->idtoken_iat_slack,",
          "1263:    provider->token_binding_policy) == FALSE)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1365:    &jwt->payload) == FALSE)",
          "1366:   return FALSE;",
          "1372:  return TRUE;",
          "1373: }",
          "",
          "[Removed Lines]",
          "1369:  if (oidc_proto_validate_cnf(r, cfg, provider, &jwt->payload) == FALSE)",
          "1370:   return FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1873: apr_byte_t oidc_proto_token_endpoint_auth(request_rec *r, oidc_cfg *cfg,",
          "1874:   const char *token_endpoint_auth, const char *client_id,",
          "1875:   const char *client_secret, const char *audience, apr_table_t *params,",
          "1878:  oidc_debug(r, \"token_endpoint_auth=%s\", token_endpoint_auth);",
          "",
          "[Removed Lines]",
          "1876:   const char *bearer_access_token, char **basic_auth_str, char **bearer_auth_str) {",
          "",
          "[Added Lines]",
          "1783:   const char *bearer_access_token, char **basic_auth_str,",
          "1784:   char **bearer_auth_str) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1923:  if (apr_strnatcmp(token_endpoint_auth,",
          "1924:    OIDC_PROTO_BEARER_ACCESS_TOKEN) == 0) {",
          "1926:  }",
          "1928:  oidc_error(r, \"uhm, shouldn't be here...\");",
          "",
          "[Removed Lines]",
          "1925:   return oidc_proto_endpoint_access_token_bearer(r, cfg, bearer_access_token, bearer_auth_str);",
          "",
          "[Added Lines]",
          "1833:   return oidc_proto_endpoint_access_token_bearer(r, cfg,",
          "1834:     bearer_access_token, bearer_auth_str);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2373:   result = apr_table_get(r->subprocess_env, OIDC_TB_CFG_PROVIDED_ENV_VAR);",
          "2374:  return result;",
          "2375: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2380: apr_byte_t oidc_util_json_validate_cnf(request_rec *r, json_t *jwt,",
          "2381:   int token_binding_policy) {",
          "2382:  char *tbh_str = NULL;",
          "2383:  char *tbh = NULL;",
          "2384:  int tbh_len = -1;",
          "2385:  const char *tbp_str = NULL;",
          "2386:  char *tbp = NULL;",
          "2387:  int tbp_len = -1;",
          "2388:  unsigned char *tbp_hash = NULL;",
          "2389:  unsigned int tbp_hash_len = -1;",
          "2391:  oidc_debug(r, \"enter: policy=%s\",",
          "2392:    oidc_token_binding_policy2str(r->pool, token_binding_policy));",
          "2394:  if (token_binding_policy == OIDC_TOKEN_BINDING_POLICY_DISABLED)",
          "2395:   return TRUE;",
          "2397:  tbp_str = oidc_util_get_provided_token_binding_id(r);",
          "2398:  if (tbp_str == NULL) {",
          "2399:   oidc_debug(r,",
          "2400:     \"no Provided Token Binding ID environment variable found\");",
          "2401:   goto out_err;",
          "2402:  }",
          "2404:  tbp_len = oidc_base64url_decode(r->pool, &tbp, tbp_str);",
          "2405:  if (tbp_len <= 0) {",
          "2406:   oidc_warn(r,",
          "2407:     \"Provided Token Binding ID environment variable could not be decoded\");",
          "2408:   return FALSE;",
          "2409:  }",
          "2411:  if (oidc_jose_hash_bytes(r->pool, OIDC_JOSE_ALG_SHA256,",
          "2412:    (const unsigned char *) tbp, tbp_len, &tbp_hash, &tbp_hash_len,",
          "2413:    NULL) == FALSE) {",
          "2414:   oidc_warn(r,",
          "2415:     \"hashing Provided Token Binding ID environment variable failed\");",
          "2416:   return FALSE;",
          "2417:  }",
          "2419:  json_t *cnf = json_object_get(jwt, OIDC_CLAIM_CNF);",
          "2420:  if (cnf == NULL) {",
          "2421:   oidc_debug(r, \"no \\\"cnf\\\" claim found in id_token\");",
          "2422:   goto out_err;",
          "2423:  }",
          "2425:  oidc_jose_get_string(r->pool, cnf, OIDC_CLAIM_CNF_TBH, FALSE, &tbh_str,",
          "2426:    NULL);",
          "2427:  if (tbh_str == NULL) {",
          "2428:   oidc_debug(r,",
          "2429:     \" \\\"cnf\\\" claim found in id_token but no \\\"tbh\\\" claim inside found\");",
          "2430:   goto out_err;",
          "2431:  }",
          "2433:  tbh_len = oidc_base64url_decode(r->pool, &tbh, tbh_str);",
          "2434:  if (tbh_len <= 0) {",
          "2435:   oidc_warn(r, \"cnf[\\\"tbh\\\"] provided but it could not be decoded\");",
          "2436:   return FALSE;",
          "2437:  }",
          "2439:  if (tbp_hash_len != tbh_len) {",
          "2440:   oidc_warn(r,",
          "2441:     \"hash length of provided token binding ID environment variable: %d does not match length of cnf[\\\"tbh\\\"]: %d\",",
          "2442:     tbp_hash_len, tbh_len);",
          "2443:   return FALSE;",
          "2444:  }",
          "2446:  if (memcmp(tbp_hash, tbh, tbh_len) != 0) {",
          "2447:   oidc_warn(r,",
          "2448:     \"hash of provided token binding ID environment variable does not match cnf[\\\"tbh\\\"]\");",
          "2449:   return FALSE;",
          "2450:  }",
          "2452:  oidc_debug(r,",
          "2453:    \"hash of provided token binding ID environment variable matches cnf[\\\"tbh\\\"]\");",
          "2455:  return TRUE;",
          "2457:  out_err:",
          "2459:  if (token_binding_policy == OIDC_TOKEN_BINDING_POLICY_OPTIONAL)",
          "2460:   return TRUE;",
          "2461:  if (token_binding_policy == OIDC_TOKEN_BINDING_POLICY_ENFORCED)",
          "2462:   return FALSE;",
          "2465:  return (tbp_str == NULL);",
          "2466: }",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1181:    r->pool, err);",
          "1183:  TST_ASSERT_ERR(\"oidc_proto_validate_jwt\",",
          "1185:    err);",
          "1187:  oidc_jwk_destroy(jwk);",
          "",
          "[Removed Lines]",
          "1184:    oidc_proto_validate_jwt(r, jwt, s_issuer, TRUE, TRUE, 10), r->pool,",
          "",
          "[Added Lines]",
          "1184:    oidc_proto_validate_jwt(r, jwt, s_issuer, TRUE, TRUE, 10, OIDC_TOKEN_BINDING_POLICY_DISABLED), r->pool,",
          "",
          "---------------"
        ]
      }
    }
  ]
}