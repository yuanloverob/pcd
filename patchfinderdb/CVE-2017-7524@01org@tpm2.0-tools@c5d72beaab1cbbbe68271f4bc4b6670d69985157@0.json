{
  "cve_id": "CVE-2017-7524",
  "cve_desc": "tpm2-tools versions before 1.1.1 are vulnerable to a password leak due to transmitting password in plaintext from client to server when generating HMAC.",
  "repo": "01org/tpm2.0-tools",
  "patch_hash": "c5d72beaab1cbbbe68271f4bc4b6670d69985157",
  "patch_info": {
    "commit_hash": "c5d72beaab1cbbbe68271f4bc4b6670d69985157",
    "repo": "01org/tpm2.0-tools",
    "commit_url": "https://github.com/01org/tpm2.0-tools/commit/c5d72beaab1cbbbe68271f4bc4b6670d69985157",
    "files": [
      "Makefile.am",
      "configure.ac",
      "lib/tpm_kdfa.c",
      "lib/tpm_kdfa.h",
      "lib/tpm_session.c"
    ],
    "message": "kdfa: use openssl for hmac not tpm\n\nWhile not reachable in the current code base tools, a potential\nsecurity bug lurked in tpm_kdfa().\n\nIf using that routine for an hmac authorization, the hmac was\ncalculated using the tpm. A user of an object wishing to\nauthenticate via hmac, would expect that the password is never\nsent to the tpm. However, since the hmac calculation relies on\npassword, and is performed by the tpm, the password ends up\nbeing sent in plain text to the tpm.\n\nThe fix is to use openssl to generate the hmac on the host.\n\nFixes: CVE-2017-7524\n\nSigned-off-by: William Roberts <william.c.roberts@intel.com>",
    "before_after_code_files": [
      "Makefile.am||Makefile.am",
      "configure.ac||configure.ac",
      "lib/tpm_kdfa.c||lib/tpm_kdfa.c",
      "lib/tpm_kdfa.h||lib/tpm_kdfa.h",
      "lib/tpm_session.c||lib/tpm_session.c"
    ]
  },
  "patch_diff": {
    "Makefile.am||Makefile.am": [
      "File: Makefile.am -> Makefile.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: INCLUDE_DIRS = -I$(srcdir)/src -I$(srcdir)/lib",
      "36: LIB_COMMON := lib/libcommon.a",
      "39: AM_LDFLAGS   := $(EXTRA_LDFLAGS)",
      "43: sbin_PROGRAMS = \\",
      "44:     tools/tpm2_create \\",
      "",
      "[Removed Lines]",
      "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(TCTI_TABRMD_CFLAGS)",
      "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(TCTI_TABRMD_LIBS)",
      "",
      "[Added Lines]",
      "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(TCTI_TABRMD_CFLAGS) $(CRYPTO_CFLAGS)",
      "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(TCTI_TABRMD_LIBS) $(CRYPTO_LIBS)",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "69:     [AC_MSG_ERROR(",
      "70:         [no TCTIs: at least one TCTI library must be enabled],",
      "71:         [1])])",
      "73: AC_ARG_ENABLE([unit],",
      "74:             [AS_HELP_STRING([--enable-unit],",
      "75:                             [build cmocka unit tests (default is no)])],",
      "",
      "[Removed Lines]",
      "72: PKG_CHECK_MODULES([CURL],[libcurl libcrypto])",
      "",
      "[Added Lines]",
      "72: PKG_CHECK_MODULES([CRYPTO],[libcrypto])",
      "73: PKG_CHECK_MODULES([CURL],[libcurl])",
      "",
      "---------------"
    ],
    "lib/tpm_kdfa.c||lib/tpm_kdfa.c": [
      "File: lib/tpm_kdfa.c -> lib/tpm_kdfa.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: #include <sapi/tpm20.h>",
      "30: #include \"string-bytes.h\"",
      "31: #include \"tpm_hmac.h\"",
      "34:         TPM2B *key, char *label, TPM2B *contextU, TPM2B *contextV, UINT16 bits,",
      "35:         TPM2B_MAX_BUFFER  *resultKey )",
      "36: {",
      "38:     TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2;",
      "39:     UINT8 *tpm2bBitsPtr = &tpm2bBits.t.buffer[0];",
      "40:     UINT8 *tpm2b_i_2Ptr = &tpm2b_i_2.t.buffer[0];",
      "41:     TPM2B_DIGEST *bufferList[8];",
      "42:     UINT32 bitsSwizzled, i_Swizzled;",
      "44:     int i, j;",
      "45:     UINT16 bytes = bits / 8;",
      "",
      "[Removed Lines]",
      "33: TPM_RC tpm_kdfa(TSS2_SYS_CONTEXT *sapi_context, TPMI_ALG_HASH hashAlg,",
      "37:     TPM2B_DIGEST tmpResult;",
      "43:     TPM_RC rval;",
      "",
      "[Added Lines]",
      "30:  #include <openssl/err.h>",
      "31: #include <openssl/hmac.h>",
      "35: #include \"log.h\"",
      "37: static const EVP_MD *tpm_algorithm_to_openssl_digest(TPMI_ALG_HASH algorithm) {",
      "39:     switch(algorithm) {",
      "40:     case TPM_ALG_SHA1:",
      "41:         return EVP_sha1();",
      "42:     case ALG_SHA256_VALUE:",
      "43:         return EVP_sha256();",
      "44:     case TPM_ALG_SHA384:",
      "45:         return EVP_sha384();",
      "46:     case TPM_ALG_SHA512:",
      "47:         return EVP_sha512();",
      "48:     default:",
      "49:         return NULL;",
      "50:     }",
      "52: }",
      "54: TPM_RC tpm_kdfa(TPMI_ALG_HASH hashAlg,",
      "63:     TPM_RC rval = TPM_RC_SUCCESS;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:     i = 1;",
      "67:     while( resultKey->t.size < bytes )",
      "68:     {",
      "71:         i_Swizzled = string_bytes_endian_convert_32( i );",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:     const EVP_MD *md = tpm_algorithm_to_openssl_digest(hashAlg);",
      "88:     if (!md) {",
      "89:         LOG_ERR(\"Algorithm not supported for hmac: %x\", hashAlg);",
      "90:         return TPM_RC_HASH;",
      "91:     }",
      "93:     HMAC_CTX ctx;",
      "94:     HMAC_CTX_init(&ctx);",
      "95:     int rc = HMAC_Init_ex(&ctx, key->buffer, key->size, md, NULL);",
      "96:     if (!rc) {",
      "97:         LOG_ERR(\"HMAC Init failed: %s\", ERR_error_string(rc, NULL));",
      "98:         return TPM_RC_MEMORY;",
      "99:     }",
      "104:         TPM2B_DIGEST tmpResult;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "77:         bufferList[j++] = (TPM2B_DIGEST *)contextU;",
      "78:         bufferList[j++] = (TPM2B_DIGEST *)contextV;",
      "79:         bufferList[j++] = (TPM2B_DIGEST *)&(tpm2bBits.b);",
      "85:         }",
      "87:         bool res = string_bytes_concat_buffer(resultKey, &(tmpResult.b));",
      "88:         if (!res) {",
      "90:         }",
      "91:     }",
      "94:     resultKey->t.size = bytes;",
      "97: }",
      "",
      "[Removed Lines]",
      "80:         bufferList[j++] = (TPM2B_DIGEST *)0;",
      "81:         rval = tpm_hmac(sapi_context, hashAlg, key, (TPM2B **)&( bufferList[0] ), &tmpResult );",
      "82:         if( rval != TPM_RC_SUCCESS )",
      "83:         {",
      "84:             return( rval );",
      "89:             return TSS2_SYS_RC_BAD_VALUE;",
      "96:     return TPM_RC_SUCCESS;",
      "",
      "[Added Lines]",
      "116:         bufferList[j] = (TPM2B_DIGEST *)0;",
      "118:         int c;",
      "119:         for(c=0; c < j; c++) {",
      "120:             TPM2B_DIGEST *digest = bufferList[c];",
      "121:             int rc =  HMAC_Update(&ctx, digest->b.buffer, digest->b.size);",
      "122:             if (!rc) {",
      "123:                 LOG_ERR(\"HMAC Update failed: %s\", ERR_error_string(rc, NULL));",
      "124:                 rval = TPM_RC_MEMORY;",
      "125:                 goto err;",
      "126:             }",
      "127:         }",
      "129:         unsigned size = sizeof(tmpResult.t.buffer);",
      "130:         int rc = HMAC_Final(&ctx, tmpResult.t.buffer, &size);",
      "131:         if (!rc) {",
      "132:             LOG_ERR(\"HMAC Final failed: %s\", ERR_error_string(rc, NULL));",
      "133:             rval = TPM_RC_MEMORY;",
      "134:             goto err;",
      "137:         tmpResult.t.size = size;",
      "141:             rval = TSS2_SYS_RC_BAD_VALUE;",
      "142:             goto err;",
      "149: err:",
      "150:     HMAC_CTX_cleanup(&ctx);",
      "152:     return rval;",
      "",
      "---------------"
    ],
    "lib/tpm_kdfa.h||lib/tpm_kdfa.h": [
      "File: lib/tpm_kdfa.h -> lib/tpm_kdfa.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:         TPM2B *key, char *label, TPM2B *contextU, TPM2B *contextV,",
      "47:         UINT16 bits, TPM2B_MAX_BUFFER *resultKey );",
      "",
      "[Removed Lines]",
      "45: TPM_RC tpm_kdfa(TSS2_SYS_CONTEXT *sapi_context, TPMI_ALG_HASH hashAlg,",
      "",
      "[Added Lines]",
      "45: TPM_RC tpm_kdfa(TPMI_ALG_HASH hashAlg,",
      "",
      "---------------"
    ],
    "lib/tpm_session.c||lib/tpm_session.c": [
      "File: lib/tpm_session.c -> lib/tpm_session.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "198:             }",
      "199:             else",
      "200:             {",
      "202:                         &( session->nonceOlder.b ), bytes * 8, (TPM2B_MAX_BUFFER *)&( session->sessionKey ) );",
      "203:             }",
      "",
      "[Removed Lines]",
      "201:                 rval = tpm_kdfa(sapi_context, session->authHash, &(key.b), label, &( session->nonceNewer.b ),",
      "",
      "[Added Lines]",
      "201:                 rval = tpm_kdfa(session->authHash, &(key.b), label, &( session->nonceNewer.b ),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bd639e3dc217ca2a097f0707797dd5d0249c8488",
      "candidate_info": {
        "commit_hash": "bd639e3dc217ca2a097f0707797dd5d0249c8488",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/bd639e3dc217ca2a097f0707797dd5d0249c8488",
        "files": [
          "Makefile.am",
          "configure.ac"
        ],
        "message": "configure: add --enable-hardening support\n\nAdd CFLAGS/LDFLAGS by default to the build that are associated\nwith good security practices.\n\nThe configure scripts checks that all the flags are supported\nand if something is not supported, prints an error message\nindicating to configure with --disable-hardening.\n\nIf one configures with --disable-hardening an error message\nindicating that it is dangerous and that they should fix the\nconfigure script and post patches upstream is prevalent.\n\nSigned-off-by: William Roberts <william.c.roberts@intel.com>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: INCLUDE_DIRS = -I$(srcdir)/src -I$(srcdir)/lib",
          "36: LIB_COMMON := lib/libcommon.a",
          "38: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS)",
          "40: sbin_PROGRAMS = \\",
          "",
          "[Removed Lines]",
          "37: AM_CFLAGS   = -DSAPI_CLIENT $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS)",
          "",
          "[Added Lines]",
          "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(HARDENED_CFLAGS)",
          "39: AM_LDFLAGS   := $(HARDENED_LDFLAGS)",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:                          [AC_DEFINE([HAVE_CMOCKA],",
          "62:                                     [1])])])",
          "63: AM_CONDITIONAL([UNIT], [test \"x$enable_unit\" != xno])",
          "64: AC_OUTPUT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "65: AC_ARG_ENABLE([hardening],",
          "66:   [AS_HELP_STRING([--enable-hardening],",
          "67:     [Enable compiler and linker options to frustrate memory corruption exploits @<:@yes@:>@])],",
          "68:   [hardening=\"$enableval\"],",
          "69:   [hardening=\"yes\"])",
          "71: #",
          "72: # Good information on adding flags, and dealing with compilers can be found here:",
          "73: #   https://github.com/zcash/zcash/issues/1832",
          "74: #   https://github.com/kmcallister/autoharden/",
          "75: AS_IF([test x\"$hardening\" != x\"no\"], [",
          "77:   AC_DEFUN([add_hardened_c_flag], [",
          "78:     AX_CHECK_COMPILE_FLAG([$1],",
          "79:       [HARDENED_CFLAGS=\"$HARDENED_CFLAGS $1\"],",
          "80:       [AC_MSG_ERROR([Cannot enable $1, consider configuring with --disable-hardening])]",
          "81:     )",
          "82:   ])",
          "84:   AC_DEFUN([add_hardened_ld_flag], [",
          "85:     AX_CHECK_LINK_FLAG([$1],",
          "86:       [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS $1\"],",
          "87:       [AC_MSG_ERROR([Cannot enable $1, consider configuring with --disable-hardening])]",
          "88:     )",
          "89:   ])",
          "91:   AC_DEFUN([add_hardened_define_flag], [",
          "92:     AX_CHECK_PREPROC_FLAG([$1],",
          "93:       [HARDENED_CFLAGS=\"$HARDENED_CFLAGS $1\"],",
          "94:       [AC_MSG_ERROR([Cannot enable $1, consider configuring with --disable-hardening])]",
          "95:     )",
          "96:   ])",
          "98:   add_hardened_c_flag([-Wall])",
          "99:   add_hardened_c_flag([-Wextra])",
          "100:   add_hardened_c_flag([-Werror])",
          "102:   add_hardened_c_flag([-Wformat])",
          "103:   add_hardened_c_flag([-Wformat-security])",
          "104:   add_hardened_c_flag([-Wstack-protector])",
          "105:   add_hardened_c_flag([-fstack-protector-all])",
          "107:   add_hardened_define_flag([-D_FORTIFY_SOURCE=2])",
          "108:   add_hardened_define_flag([-U_FORTIFY_SOURCE])",
          "110:   add_hardened_c_flag([-fPIE])",
          "111:   add_hardened_ld_flag([[-pie]])",
          "113:   add_hardened_ld_flag([[-Wl,-z,relro]])",
          "114:   add_hardened_ld_flag([[-Wl,-z,now]])",
          "116:   AC_SUBST([HARDENED_CFLAGS])",
          "117:   AC_SUBST([HARDENED_LDFLAGS])",
          "118: ], [",
          "119:   AC_MSG_WARN([Compiling with --disable-hardening is dangerous!",
          "120: you should consider fixing the configure script compiler flags",
          "121: and submitting patches upstream!])",
          "122: ])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a72a4e03e4b53482deba1ef26addc4c6f7ac3acd",
      "candidate_info": {
        "commit_hash": "a72a4e03e4b53482deba1ef26addc4c6f7ac3acd",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/a72a4e03e4b53482deba1ef26addc4c6f7ac3acd",
        "files": [
          "Makefile.am",
          "configure.ac"
        ],
        "message": "configure: Use pkg-config to get info about libcurl and libcrypto.\n\nSigned-off-by: Philip Tricca <flihp@twobit.us>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: INCLUDE_DIRS = -I$(srcdir)",
          "41: noinst_LIBRARIES = src/libcommon.a",
          "42: sbin_PROGRAMS = src/tpm2_listpcrs \\",
          "",
          "[Removed Lines]",
          "37: AM_CFLAGS   = -DSAPI_CLIENT $(INCLUDE_DIRS)",
          "38: AM_CXXFLAGS = -DSAPI_CLIENT $(INCLUDE_DIRS)",
          "39: LDADD = src/libcommon.a -ltctisocket",
          "",
          "[Added Lines]",
          "37: AM_CFLAGS   = -DSAPI_CLIENT $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS)",
          "38: AM_CXXFLAGS = -DSAPI_CLIENT $(INCLUDE_DIRS) $(TPM20_TSS_CXXFLAGS)",
          "39: LDADD = src/libcommon.a $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96: src_tpm2_getpubek_SOURCES = src/tpm2_getpubek.cpp",
          "97: src_tpm2_getpubak_SOURCES = src/tpm2_getpubak.cpp",
          "98: src_tpm2_getmanufec_SOURCES = src/tpm2_getmanufec.cpp",
          "99: src_tpm2_akparse_SOURCES = src/tpm2_akparse.cpp",
          "100: src_tpm2_makecredential_SOURCES = src/tpm2_makecredential.cpp",
          "101: src_tpm2_activatecredential_SOURCES = src/tpm2_activatecredential.cpp",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99: src_tpm2_getmanufec_CFLAG = $(AM_CXXFLAGS) $(CURL_CFLAGS)",
          "100: src_tpm2_getmanufec_LDADD = $(LDADD) $(CURL_LIBS)",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: AM_INIT_AUTOMAKE([foreign",
          "7:                   subdir-objects])",
          "8: AC_CONFIG_FILES([Makefile])",
          "23: PKG_CHECK_MODULES([SAPI],[sapi])",
          "24: PKG_CHECK_MODULES([TCTI_SOCK],[tcti-socket])",
          "25: PKG_CHECK_MODULES([TCTI_DEV],[tcti-device])",
          "26: AC_OUTPUT",
          "",
          "[Removed Lines]",
          "9: AC_CHECK_HEADER([openssl/sha.h],",
          "10:                 [",
          "11:                  AC_DEFINE([HAVE_OPENSSL_H],",
          "12:                            [1],",
          "13:                            [Define if sha.h exists.])",
          "14:                  ],",
          "15:                 [AC_MSG_ERROR([Missing OPENSSL headers.])])",
          "16: AC_CHECK_HEADER([curl/curl.h],",
          "17:                 [",
          "18:                  AC_DEFINE([HAVE_CURL_H],",
          "19:                            [1],",
          "20:                            [Define if curl.h exists.])",
          "21:                  ],",
          "22:                 [AC_MSG_ERROR([Missing CURL headers.])])",
          "",
          "[Added Lines]",
          "12: PKG_CHECK_MODULES([CURL],[libcurl libcrypto])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eeccb68b72e3e75e9d2186375d8c70ed7eaca72e",
      "candidate_info": {
        "commit_hash": "eeccb68b72e3e75e9d2186375d8c70ed7eaca72e",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/eeccb68b72e3e75e9d2186375d8c70ed7eaca72e",
        "files": [
          "Makefile.am",
          "lib/base-types.c",
          "lib/conversion.c",
          "lib/tpm2_alg_util.h",
          "lib/tpm2_util.h",
          "lib/tpm2b-types.c",
          "lib/tpma-types.c",
          "lib/tpml-types.c",
          "lib/tpms-types.c",
          "lib/tpmt-types.c",
          "lib/tpmu-types.c",
          "lib/tss2_endian.h",
          "lib/tss2_mu.h",
          "test/system/test_tpm2_createprimary.sh",
          "tools/tpm2_getpubek.c",
          "tools/tpm2_makecredential.c",
          "tools/tpm2_readpublic.c"
        ],
        "message": "public: marshall the tss version of public\n\nDon't dump the tss version with structure padding. Use\nthe libmarshal marshal and unmarshal routines.\n\nThis adds a backport of libmu.\n\nFixes: #635\n\nSigned-off-by: William Roberts <william.c.roberts@intel.com>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "lib/base-types.c||lib/base-types.c",
          "lib/conversion.c||lib/conversion.c",
          "lib/tpm2_alg_util.h||lib/tpm2_alg_util.h",
          "lib/tpm2_util.h||lib/tpm2_util.h",
          "lib/tpm2b-types.c||lib/tpm2b-types.c",
          "lib/tpma-types.c||lib/tpma-types.c",
          "lib/tpml-types.c||lib/tpml-types.c",
          "lib/tpms-types.c||lib/tpms-types.c",
          "lib/tpmt-types.c||lib/tpmt-types.c",
          "lib/tpmu-types.c||lib/tpmu-types.c",
          "lib/tss2_endian.h||lib/tss2_endian.h",
          "lib/tss2_mu.h||lib/tss2_mu.h",
          "test/system/test_tpm2_createprimary.sh||test/system/test_tpm2_createprimary.sh",
          "tools/tpm2_getpubek.c||tools/tpm2_getpubek.c",
          "tools/tpm2_makecredential.c||tools/tpm2_makecredential.c",
          "tools/tpm2_readpublic.c||tools/tpm2_readpublic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am"
          ],
          "candidate": [
            "Makefile.am||Makefile.am"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: INCLUDE_DIRS = -I$(top_srcdir)/tools -I$(top_srcdir)/lib -I$(top_srcdir)/lib/tcti",
          "36: LIB_COMMON := lib/libcommon.a",
          "38: AM_CFLAGS := \\",
          "39:     $(INCLUDE_DIRS) $(EXTRA_CFLAGS) $(SAPI_CFLAGS) $(TCTI_SOCK_CFLAGS) \\",
          "42: AM_LDFLAGS   := $(EXTRA_LDFLAGS)",
          "",
          "[Removed Lines]",
          "40:     $(TCTI_TABRMD_CFLAGS) $(TCTI_DEV_CFLAGS) $(CRYPTO_CFLAGS)",
          "",
          "[Added Lines]",
          "38: LIBMARSHAL_CFLAGS = \\",
          "39:     -DALG_ECMQV=1",
          "43:     $(TCTI_TABRMD_CFLAGS) $(TCTI_DEV_CFLAGS) $(CRYPTO_CFLAGS) $(LIBMARSHAL_CFLAGS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:     lib/tpm_session.c \\",
          "144:     lib/tpm_session.h",
          "146: TOOL_SRC := tools/tpm2_tool.c tools/tpm2_tool.h",
          "148: tools_tpm2_create_SOURCES = tools/tpm2_create.c $(TOOL_SRC)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "149: # libmarshal port",
          "150: lib_libcommon_a_SOURCES += \\",
          "151:     lib/base-types.c \\",
          "152:  lib/tpm2b-types.c \\",
          "153:  lib/tpma-types.c \\",
          "154:  lib/tpml-types.c \\",
          "155:  lib/tpms-types.c \\",
          "156:  lib/tpmt-types.c \\",
          "157:  lib/tpmu-types.c \\",
          "158:  lib/tss2_endian.h \\",
          "159:  lib/tss2_mu.h",
          "",
          "---------------"
        ],
        "lib/base-types.c||lib/base-types.c": [
          "File: lib/base-types.c -> lib/base-types.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <inttypes.h>",
          "30: #include <string.h>",
          "32: #include \"tss2_mu.h\"",
          "33: #include \"sapi/tpm20.h\"",
          "34: #include \"tss2_endian.h\"",
          "35: #include \"log.h\"",
          "37: #define BASE_MARSHAL(type) \\",
          "38: TSS2_RC \\",
          "39: Tss2_MU_##type##_Marshal ( \\",
          "40:     type           src, \\",
          "41:     uint8_t        buffer [], \\",
          "42:     size_t         buffer_size, \\",
          "43:     size_t        *offset) \\",
          "44: { \\",
          "45:     size_t  local_offset = 0; \\",
          "46: \\",
          "47:     if (offset != NULL) { \\",
          "48:         LOG_INFO( \"offset non-NULL, initial value: %zu\", *offset); \\",
          "49:         local_offset = *offset; \\",
          "50:     } \\",
          "51: \\",
          "52:     if (buffer == NULL && offset == NULL) { \\",
          "53:         LOG_WARN( \"buffer and offset parameter are NULL\"); \\",
          "54:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "55:     } else if (buffer == NULL && offset != NULL) { \\",
          "57:         LOG_INFO( \"buffer NULL and offset non-NULL, updating offset to %zu\", \\",
          "59:         return TSS2_RC_SUCCESS; \\",
          "60:     } else if (buffer_size < local_offset || \\",
          "61:                buffer_size - local_offset < sizeof (src)) \\",
          "62:     { \\",
          "63:         LOG_WARN( \\",
          "64:              \"buffer_size: %zu with offset: %zu are insufficient for object \" \\",
          "65:              \"of size %zu\", \\",
          "66:              buffer_size, \\",
          "67:              local_offset, \\",
          "68:              sizeof (src)); \\",
          "69:         return TSS2_TYPES_RC_INSUFFICIENT_BUFFER; \\",
          "70:     } \\",
          "71: \\",
          "72:     LOG_INFO( \\",
          "73:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "74:          \" at index 0x%zx\", \\",
          "75:          (uintptr_t)&src, \\",
          "76:          (uintptr_t)buffer, \\",
          "77:          local_offset); \\",
          "78: \\",
          "79:     switch (sizeof (type)) { \\",
          "80:         case 1: \\",
          "81:             break; \\",
          "82:         case 2: \\",
          "83:             src = HOST_TO_BE_16(src); \\",
          "84:             break; \\",
          "85:         case 4: \\",
          "86:             src = HOST_TO_BE_32(src); \\",
          "87:             break; \\",
          "88:         case 8: \\",
          "89:             src = HOST_TO_BE_64(src); \\",
          "90:             break; \\",
          "91: \\",
          "92:     } \\",
          "93:     memcpy (&buffer [local_offset], &src, sizeof (src)); \\",
          "94:     if (offset != NULL) { \\",
          "96:         LOG_INFO( \"offset parameter non-NULL, updated to %zu\", *offset); \\",
          "97:     } \\",
          "98: \\",
          "99:     return TSS2_RC_SUCCESS; \\",
          "100: }",
          "102: #define BASE_UNMARSHAL(type) \\",
          "103: TSS2_RC \\",
          "104: Tss2_MU_##type##_Unmarshal ( \\",
          "105:     uint8_t const buffer[], \\",
          "106:     size_t        buffer_size, \\",
          "107:     size_t       *offset, \\",
          "108:     type         *dest) \\",
          "109: { \\",
          "110:     size_t  local_offset = 0; \\",
          "111:     type tmp = 0; \\",
          "112: \\",
          "113:     if (offset != NULL) { \\",
          "114:         LOG_INFO( \"offset non-NULL, initial value: %zu\", *offset); \\",
          "115:         local_offset = *offset; \\",
          "116:     } \\",
          "117: \\",
          "118:     if (buffer == NULL || (dest == NULL && offset == NULL)) { \\",
          "119:         LOG_WARN( \"buffer or dest and offset parameter are NULL\"); \\",
          "120:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "121:     } else if (dest == NULL && offset != NULL) { \\",
          "123:         LOG_INFO( \\",
          "124:              \"buffer NULL and offset non-NULL, updating offset to %zu\", \\",
          "126:         return TSS2_RC_SUCCESS; \\",
          "127:     } else if (buffer_size < local_offset || \\",
          "128:                sizeof (*dest) > buffer_size - local_offset) \\",
          "129:     { \\",
          "130:         LOG_WARN( \\",
          "131:              \"buffer_size: %zu with offset: %zu are insufficient for object \" \\",
          "132:              \"of size %zu\", \\",
          "133:              buffer_size, \\",
          "134:              local_offset, \\",
          "135:              sizeof (*dest)); \\",
          "136:         return TSS2_TYPES_RC_INSUFFICIENT_BUFFER; \\",
          "137:     } \\",
          "138: \\",
          "139:     LOG_INFO( \\",
          "140:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "141:          \" at index 0x%zx\", \\",
          "142:          (uintptr_t)buffer, \\",
          "143:          (uintptr_t)dest, \\",
          "144:          local_offset); \\",
          "145: \\",
          "146:     memcpy (&tmp, &buffer [local_offset], sizeof (tmp)); \\",
          "147: \\",
          "148:     switch (sizeof (type)) { \\",
          "149:         case 1: \\",
          "151:             break; \\",
          "152:         case 2: \\",
          "154:             break; \\",
          "155:         case 4: \\",
          "157:             break; \\",
          "158:         case 8: \\",
          "160:             break; \\",
          "161: \\",
          "162:     } \\",
          "163: \\",
          "164:     if (offset != NULL) { \\",
          "166:         LOG_INFO( \"offset parameter non-NULL, updated to %zu\", *offset); \\",
          "167:     } \\",
          "168: \\",
          "169:     return TSS2_RC_SUCCESS; \\",
          "170: }",
          "176: BASE_MARSHAL  (INT8);",
          "177: BASE_UNMARSHAL(INT8);",
          "178: BASE_MARSHAL  (INT16);",
          "179: BASE_UNMARSHAL(INT16);",
          "180: BASE_MARSHAL  (INT32);",
          "181: BASE_UNMARSHAL(INT32);",
          "182: BASE_MARSHAL  (INT64);",
          "183: BASE_UNMARSHAL(INT64);",
          "184: BASE_MARSHAL  (UINT8);",
          "185: BASE_UNMARSHAL(UINT8);",
          "186: BASE_MARSHAL  (UINT16);",
          "187: BASE_UNMARSHAL(UINT16);",
          "188: BASE_MARSHAL  (UINT32);",
          "189: BASE_UNMARSHAL(UINT32);",
          "190: BASE_MARSHAL  (UINT64);",
          "191: BASE_UNMARSHAL(UINT64);",
          "192: BASE_MARSHAL  (TPM_CC);",
          "193: BASE_UNMARSHAL(TPM_CC);",
          "194: BASE_MARSHAL  (TPM_ST);",
          "195: BASE_UNMARSHAL(TPM_ST);",
          "",
          "---------------"
        ],
        "lib/conversion.c||lib/conversion.c": [
          "File: lib/conversion.c -> lib/conversion.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #include \"log.h\"",
          "43: #include \"tpm2_alg_util.h\"",
          "44: #include \"tpm2_util.h\"",
          "46: static bool tpm2_convert_pubkey_ssl(TPMT_PUBLIC *public, pubkey_format format, const char *path);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: #include \"tss2_mu.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "89:     }",
          "90:     else if (format == pubkey_format_tss) {",
          "93:     }",
          "95:     LOG_ERR(\"Unsupported public key output format.\");",
          "",
          "[Removed Lines]",
          "92:         return files_save_bytes_to_file(path, (UINT8 *)public, sizeof(*public));",
          "",
          "[Added Lines]",
          "94:         size_t offset = 0;",
          "95:         UINT8 buffer[sizeof(TPM2B_PUBLIC)];",
          "96:         TSS2_RC rc = Tss2_MU_TPM2B_PUBLIC_Marshal(public, buffer, sizeof(buffer), &offset);",
          "97:         if (rc != TSS2_RC_SUCCESS) {",
          "98:             LOG_ERR(\"Error serializing public structure: 0x%x\", rc);",
          "99:             return false;",
          "100:         }",
          "102:         return files_save_bytes_to_file(path, buffer, offset);",
          "",
          "---------------"
        ],
        "lib/tpm2_alg_util.h||lib/tpm2_alg_util.h": [
          "File: lib/tpm2_alg_util.h -> lib/tpm2_alg_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <stdbool.h>",
          "41: #define  TPM_ALG_ECMQV               0x001D",
          "42: #define  TPM_ALG_KDF2                0x0021",
          "",
          "[Removed Lines]",
          "36: #include <sapi/tpm20.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "45: #define  TPM_ALG_SHA3_384            0x0028",
          "46: #define  TPM_ALG_SHA3_512            0x0029",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #include <sapi/tpm20.h>",
          "",
          "---------------"
        ],
        "lib/tpm2_util.h||lib/tpm2_util.h": [
          "File: lib/tpm2_util.h -> lib/tpm2_util.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "256: UINT32 tpm2_util_pop_count(UINT32 data);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263: void tpm2_util_public_to_yaml(TPM2B_PUBLIC *public);",
          "",
          "---------------"
        ],
        "lib/tpm2b-types.c||lib/tpm2b-types.c": [
          "File: lib/tpm2b-types.c -> lib/tpm2b-types.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <inttypes.h>",
          "30: #include <string.h>",
          "32: #include \"tss2_mu.h\"",
          "33: #include \"sapi/tpm20.h\"",
          "34: #include \"tss2_endian.h\"",
          "35: #include \"log.h\"",
          "37: #define TPM2B_MARSHAL(type) \\",
          "38: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "39:                                  size_t buffer_size, size_t *offset) \\",
          "40: { \\",
          "41:     size_t local_offset = 0; \\",
          "42:     TSS2_RC rc; \\",
          "43: \\",
          "44:     if (src == NULL) { \\",
          "45:         LOG_WARN( \"src param is NULL\"); \\",
          "46:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "47:     } \\",
          "48:     if (offset != NULL) { \\",
          "49:         LOG_INFO( \"offset non-NULL, initial value: %zu\", *offset); \\",
          "50:         local_offset = *offset; \\",
          "51:     } \\",
          "52:     if (buffer == NULL && offset == NULL) { \\",
          "53:         LOG_WARN( \"buffer and offset parameter are NULL\"); \\",
          "54:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "55:     } else if (buffer == NULL && offset != NULL) { \\",
          "57:         LOG_INFO( \"buffer NULL and offset non-NULL, updating offset to %zu\", \\",
          "59:         return TSS2_RC_SUCCESS; \\",
          "60:     } else if (buffer_size < local_offset || \\",
          "61:                buffer_size - local_offset < (sizeof(src->t.size) + src->t.size)) { \\",
          "62:         LOG_WARN( \\",
          "63:              \"buffer_size: %zu with offset: %zu are insufficient for object \" \\",
          "64:              \"of size %zu\", \\",
          "65:              buffer_size, \\",
          "66:              local_offset, \\",
          "67:              sizeof(src->t.size) + src->t.size); \\",
          "68:         return TSS2_TYPES_RC_INSUFFICIENT_BUFFER; \\",
          "69:     } \\",
          "70: \\",
          "71:     LOG_INFO( \\",
          "72:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "73:          \" at index 0x%zx\", \\",
          "74:          (uintptr_t)&src, \\",
          "75:          (uintptr_t)buffer, \\",
          "76:          local_offset); \\",
          "77: \\",
          "78:     rc = Tss2_MU_UINT16_Marshal(src->t.size, buffer, buffer_size, &local_offset); \\",
          "79:     if (rc) \\",
          "80:         return rc; \\",
          "81: \\",
          "82:     if (src->t.size) { \\",
          "83:         memcpy(&buffer[local_offset], ((TPM2B *)src)->buffer, src->t.size); \\",
          "84:         local_offset += src->t.size; \\",
          "85:     } \\",
          "86: \\",
          "87:     if (offset != NULL) { \\",
          "89:         LOG_INFO( \"offset parameter non-NULL, updated to %zu\", *offset); \\",
          "90:     } \\",
          "91: \\",
          "92:     return TSS2_RC_SUCCESS; \\",
          "93: }",
          "95: #define TPM2B_UNMARSHAL(type) \\",
          "96: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "97:                                    size_t *offset, type *dest) \\",
          "98: { \\",
          "99:     size_t  local_offset = 0; \\",
          "100:     UINT16 size = 0; \\",
          "101:     TSS2_RC rc; \\",
          "102: \\",
          "103:     if (offset != NULL) { \\",
          "104:         LOG_INFO( \"offset non-NULL, initial value: %zu\", *offset); \\",
          "105:         local_offset = *offset; \\",
          "106:     } \\",
          "107: \\",
          "108:     if (buffer == NULL || (dest == NULL && offset == NULL)) { \\",
          "109:         LOG_WARN( \"buffer or dest and offset parameter are NULL\"); \\",
          "110:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "111:     } else if (buffer_size < local_offset || \\",
          "112:                sizeof(size) > buffer_size - local_offset) \\",
          "113:     { \\",
          "114:         LOG_WARN( \\",
          "115:              \"buffer_size: %zu with offset: %zu are insufficient for object \" \\",
          "116:              \"of size %zu\", \\",
          "117:              buffer_size, \\",
          "118:              local_offset, \\",
          "119:              sizeof(size)); \\",
          "120:         return TSS2_TYPES_RC_INSUFFICIENT_BUFFER; \\",
          "121:     } \\",
          "122: \\",
          "123:     LOG_INFO( \\",
          "124:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "125:          \" at index 0x%zx\", \\",
          "126:          (uintptr_t)buffer, \\",
          "127:          (uintptr_t)dest, \\",
          "128:          local_offset); \\",
          "129: \\",
          "130:     rc = Tss2_MU_UINT16_Unmarshal(buffer, buffer_size, &local_offset, &size); \\",
          "131:     if (rc) \\",
          "132:         return rc; \\",
          "133: \\",
          "134:     if (size > buffer_size - local_offset) { \\",
          "135:         LOG_WARN( \\",
          "136:              \"buffer_size: %zu with offset: %zu are insufficient for object \" \\",
          "137:              \"of size %zu\", \\",
          "138:              buffer_size, \\",
          "139:              local_offset, \\",
          "140:              (size_t)size); \\",
          "141:         return TSS2_TYPES_RC_INSUFFICIENT_BUFFER; \\",
          "142:     } \\",
          "143:     if (dest != NULL) { \\",
          "144:         dest->t.size = size; \\",
          "145:         memcpy(((TPM2B *)dest)->buffer, &buffer[local_offset], size); \\",
          "146:     } \\",
          "147:     local_offset += size; \\",
          "148:     if (offset != NULL) { \\",
          "150:         LOG_INFO( \"offset parameter non-NULL, updated to %zu\", *offset); \\",
          "151:     } \\",
          "152: \\",
          "153:     return TSS2_RC_SUCCESS; \\",
          "154: }",
          "156: #define TPM2B_MARSHAL_SUBTYPE(type, subtype, member) \\",
          "157: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "158:                                  size_t buffer_size, size_t *offset) \\",
          "159: { \\",
          "160:     size_t local_offset = 0; \\",
          "161:     UINT8 *ptr; \\",
          "162:     TSS2_RC rc; \\",
          "163: \\",
          "164:     if (src == NULL) { \\",
          "165:         LOG_WARN( \"src param is NULL\"); \\",
          "166:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "167:     } \\",
          "168: \\",
          "169:     if (offset != NULL) { \\",
          "170:         LOG_INFO( \"offset non-NULL, initial value: %zu\", *offset); \\",
          "171:         local_offset = *offset; \\",
          "172:     } \\",
          "173: \\",
          "174:     if (buffer == NULL && offset == NULL) { \\",
          "175:         LOG_WARN( \"buffer and offset parameter are NULL\"); \\",
          "176:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "177:     } else if (buffer == NULL && offset != NULL) { \\",
          "179:         LOG_INFO( \"buffer NULL and offset non-NULL, updating offset to %zu\", \\",
          "181:         return TSS2_RC_SUCCESS; \\",
          "182:     } else if (buffer_size < local_offset || \\",
          "183:                buffer_size - local_offset < sizeof(src->t.size)) { \\",
          "184:         LOG_WARN( \\",
          "185:              \"buffer_size: %zu with offset: %zu are insufficient for object \" \\",
          "186:              \"of size %zu\", \\",
          "187:              buffer_size, \\",
          "188:              local_offset, \\",
          "189:              sizeof(src->t.size)); \\",
          "190:         return TSS2_TYPES_RC_INSUFFICIENT_BUFFER; \\",
          "191:     } \\",
          "192: \\",
          "193:     ptr = &buffer[local_offset]; \\",
          "194: \\",
          "195:     LOG_INFO( \\",
          "196:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "197:          \" at index 0x%zx\", \\",
          "198:          (uintptr_t)&src, \\",
          "199:          (uintptr_t)buffer, \\",
          "200:          local_offset); \\",
          "201: \\",
          "202:     rc = Tss2_MU_UINT16_Marshal(src->t.size, buffer, buffer_size, &local_offset); \\",
          "203:     if (rc) \\",
          "204:         return rc; \\",
          "205: \\",
          "206:     rc = Tss2_MU_##subtype##_Marshal(&src->t.member, buffer, buffer_size, &local_offset); \\",
          "207:     if (rc) \\",
          "208:         return rc; \\",
          "209: \\",
          "212: \\",
          "213:     if (offset != NULL) { \\",
          "215:         LOG_INFO( \"offset parameter non-NULL, updated to %zu\", *offset); \\",
          "216:     } \\",
          "217: \\",
          "218:     return TSS2_RC_SUCCESS; \\",
          "219: }",
          "221: #define TPM2B_UNMARSHAL_SUBTYPE(type, subtype, member) \\",
          "222: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "223:                                    size_t *offset, type *dest) \\",
          "224: { \\",
          "225:     size_t  local_offset = 0; \\",
          "226:     UINT16 size = 0; \\",
          "227:     TSS2_RC rc; \\",
          "228: \\",
          "229:     if (offset != NULL) { \\",
          "230:         LOG_INFO( \"offset non-NULL, initial value: %zu\", *offset); \\",
          "231:         local_offset = *offset; \\",
          "232:     } \\",
          "233: \\",
          "234:     if (buffer == NULL || (dest == NULL && offset == NULL)) { \\",
          "235:         LOG_WARN( \"buffer or dest and offset parameter are NULL\"); \\",
          "236:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "237:     } else if (buffer_size < local_offset || \\",
          "238:                sizeof(size) > buffer_size - local_offset) \\",
          "239:     { \\",
          "240:         LOG_WARN( \\",
          "241:              \"buffer_size: %zu with offset: %zu are insufficient for object \" \\",
          "242:              \"of size %zu\", \\",
          "243:              buffer_size, \\",
          "244:              local_offset, \\",
          "245:              sizeof(size)); \\",
          "246:         return TSS2_TYPES_RC_INSUFFICIENT_BUFFER; \\",
          "247:     } \\",
          "248:     if (dest && dest->t.size != 0) { \\",
          "249:         LOG_WARN( \"Size not zero\"); \\",
          "250:         return TSS2_SYS_RC_BAD_VALUE; \\",
          "251:     } \\",
          "252: \\",
          "253:     LOG_INFO( \\",
          "254:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "255:          \" at index 0x%zx\", \\",
          "256:          (uintptr_t)buffer, \\",
          "257:          (uintptr_t)dest, \\",
          "258:          local_offset); \\",
          "259: \\",
          "260:     rc = Tss2_MU_UINT16_Unmarshal(buffer, buffer_size, &local_offset, &size); \\",
          "261:     if (rc) \\",
          "262:         return rc; \\",
          "263: \\",
          "264:     if (size > buffer_size - local_offset) { \\",
          "265:         LOG_WARN( \\",
          "266:              \"buffer_size: %zu with offset: %zu are insufficient for object \" \\",
          "267:              \"of size %zu\", \\",
          "268:              buffer_size, \\",
          "269:              local_offset, \\",
          "270:              (size_t)size); \\",
          "271:         return TSS2_TYPES_RC_INSUFFICIENT_BUFFER; \\",
          "272:     } \\",
          "273:     if (dest != NULL) { \\",
          "274:         dest->t.size = size; \\",
          "275:         Tss2_MU_##subtype##_Unmarshal(buffer, buffer_size, &local_offset, &dest->t.member); \\",
          "276:         if (rc) \\",
          "277:             return rc; \\",
          "278:     } else { \\",
          "279:         local_offset += size; \\",
          "280:     } \\",
          "281: \\",
          "282:     if (offset != NULL) { \\",
          "284:         LOG_INFO( \"offset parameter non-NULL, updated to %zu\", *offset); \\",
          "285:     } \\",
          "286: \\",
          "287:     return TSS2_RC_SUCCESS; \\",
          "288: }",
          "294: TPM2B_MARSHAL  (TPM2B_DIGEST);",
          "295: TPM2B_UNMARSHAL(TPM2B_DIGEST);",
          "296: TPM2B_MARSHAL  (TPM2B_DATA);",
          "297: TPM2B_UNMARSHAL(TPM2B_DATA);",
          "298: TPM2B_MARSHAL  (TPM2B_EVENT);",
          "299: TPM2B_UNMARSHAL(TPM2B_EVENT);",
          "300: TPM2B_MARSHAL  (TPM2B_MAX_BUFFER);",
          "301: TPM2B_UNMARSHAL(TPM2B_MAX_BUFFER);",
          "302: TPM2B_MARSHAL  (TPM2B_MAX_NV_BUFFER);",
          "303: TPM2B_UNMARSHAL(TPM2B_MAX_NV_BUFFER);",
          "304: TPM2B_MARSHAL  (TPM2B_IV);",
          "305: TPM2B_UNMARSHAL(TPM2B_IV);",
          "306: TPM2B_MARSHAL  (TPM2B_NAME);",
          "307: TPM2B_UNMARSHAL(TPM2B_NAME);",
          "308: TPM2B_MARSHAL  (TPM2B_DIGEST_VALUES);",
          "309: TPM2B_UNMARSHAL(TPM2B_DIGEST_VALUES);",
          "310: TPM2B_MARSHAL  (TPM2B_ATTEST);",
          "311: TPM2B_UNMARSHAL(TPM2B_ATTEST);",
          "312: TPM2B_MARSHAL  (TPM2B_SYM_KEY);",
          "313: TPM2B_UNMARSHAL(TPM2B_SYM_KEY);",
          "314: TPM2B_MARSHAL  (TPM2B_SENSITIVE_DATA);",
          "315: TPM2B_UNMARSHAL(TPM2B_SENSITIVE_DATA);",
          "316: TPM2B_MARSHAL  (TPM2B_PUBLIC_KEY_RSA);",
          "317: TPM2B_UNMARSHAL(TPM2B_PUBLIC_KEY_RSA);",
          "318: TPM2B_MARSHAL  (TPM2B_PRIVATE_KEY_RSA);",
          "319: TPM2B_UNMARSHAL(TPM2B_PRIVATE_KEY_RSA);",
          "320: TPM2B_MARSHAL  (TPM2B_ECC_PARAMETER);",
          "321: TPM2B_UNMARSHAL(TPM2B_ECC_PARAMETER);",
          "322: TPM2B_MARSHAL  (TPM2B_ENCRYPTED_SECRET);",
          "323: TPM2B_UNMARSHAL(TPM2B_ENCRYPTED_SECRET);",
          "324: TPM2B_MARSHAL  (TPM2B_PRIVATE_VENDOR_SPECIFIC);",
          "325: TPM2B_UNMARSHAL(TPM2B_PRIVATE_VENDOR_SPECIFIC);",
          "326: TPM2B_MARSHAL  (TPM2B_PRIVATE);",
          "327: TPM2B_UNMARSHAL(TPM2B_PRIVATE);",
          "328: TPM2B_MARSHAL  (TPM2B_ID_OBJECT);",
          "329: TPM2B_UNMARSHAL(TPM2B_ID_OBJECT);",
          "330: TPM2B_MARSHAL  (TPM2B_CONTEXT_SENSITIVE);",
          "331: TPM2B_UNMARSHAL(TPM2B_CONTEXT_SENSITIVE);",
          "332: TPM2B_MARSHAL  (TPM2B_CONTEXT_DATA);",
          "333: TPM2B_UNMARSHAL(TPM2B_CONTEXT_DATA);",
          "334: TPM2B_MARSHAL  (TPM2B_NONCE);",
          "335: TPM2B_UNMARSHAL(TPM2B_NONCE);",
          "336: TPM2B_MARSHAL  (TPM2B_TIMEOUT);",
          "337: TPM2B_UNMARSHAL(TPM2B_TIMEOUT);",
          "338: TPM2B_MARSHAL  (TPM2B_AUTH);",
          "339: TPM2B_UNMARSHAL(TPM2B_AUTH);",
          "340: TPM2B_MARSHAL  (TPM2B_OPERAND);",
          "341: TPM2B_UNMARSHAL(TPM2B_OPERAND);",
          "342: TPM2B_MARSHAL_SUBTYPE(TPM2B_ECC_POINT, TPMS_ECC_POINT, point);",
          "343: TPM2B_UNMARSHAL_SUBTYPE(TPM2B_ECC_POINT, TPMS_ECC_POINT, point);",
          "344: TPM2B_MARSHAL_SUBTYPE(TPM2B_NV_PUBLIC, TPMS_NV_PUBLIC, nvPublic);",
          "345: TPM2B_UNMARSHAL_SUBTYPE(TPM2B_NV_PUBLIC, TPMS_NV_PUBLIC, nvPublic);",
          "346: TPM2B_MARSHAL_SUBTYPE(TPM2B_SENSITIVE, TPMT_SENSITIVE, sensitiveArea);",
          "347: TPM2B_UNMARSHAL_SUBTYPE(TPM2B_SENSITIVE, TPMT_SENSITIVE, sensitiveArea);",
          "348: TPM2B_MARSHAL_SUBTYPE(TPM2B_SENSITIVE_CREATE, TPMS_SENSITIVE_CREATE, sensitive);",
          "349: TPM2B_UNMARSHAL_SUBTYPE(TPM2B_SENSITIVE_CREATE, TPMS_SENSITIVE_CREATE, sensitive);",
          "350: TPM2B_MARSHAL_SUBTYPE(TPM2B_CREATION_DATA, TPMS_CREATION_DATA, creationData);",
          "351: TPM2B_UNMARSHAL_SUBTYPE(TPM2B_CREATION_DATA, TPMS_CREATION_DATA, creationData);",
          "352: TPM2B_MARSHAL_SUBTYPE(TPM2B_PUBLIC, TPMT_PUBLIC, publicArea);",
          "353: TPM2B_UNMARSHAL_SUBTYPE(TPM2B_PUBLIC, TPMT_PUBLIC, publicArea);",
          "",
          "---------------"
        ],
        "lib/tpma-types.c||lib/tpma-types.c": [
          "File: lib/tpma-types.c -> lib/tpma-types.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <inttypes.h>",
          "30: #include <string.h>",
          "32: #include \"tss2_mu.h\"",
          "33: #include \"sapi/tpm20.h\"",
          "34: #include \"tss2_endian.h\"",
          "35: #include \"log.h\"",
          "37: #define TPMA_MARSHAL(type) \\",
          "38: TSS2_RC Tss2_MU_##type##_Marshal(type src, uint8_t buffer[], \\",
          "39:                                  size_t buffer_size, size_t *offset) \\",
          "40: { \\",
          "41:     size_t  local_offset = 0; \\",
          "42: \\",
          "43:     if (offset != NULL) { \\",
          "44:         LOG_INFO( \"offset non-NULL, initial value: %zu\", *offset); \\",
          "45:         local_offset = *offset; \\",
          "46:     } \\",
          "47: \\",
          "48:     if (buffer == NULL && offset == NULL) { \\",
          "49:         LOG_WARN( \"buffer and offset parameter are NULL\"); \\",
          "50:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "51:     } else if (buffer == NULL && offset != NULL) { \\",
          "53:         LOG_INFO( \"buffer NULL and offset non-NULL, updating offset to %zu\", \\",
          "55:         return TSS2_RC_SUCCESS; \\",
          "56:     } else if (buffer_size < local_offset || \\",
          "57:                buffer_size - local_offset < sizeof (src)) \\",
          "58:     { \\",
          "59:         LOG_WARN( \\",
          "60:              \"buffer_size: %zu with offset: %zu are insufficient for object \" \\",
          "61:              \"of size %zu\", \\",
          "62:              buffer_size, \\",
          "63:              local_offset, \\",
          "64:              sizeof (src)); \\",
          "65:         return TSS2_TYPES_RC_INSUFFICIENT_BUFFER; \\",
          "66:     } \\",
          "67: \\",
          "68:     LOG_INFO( \\",
          "69:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "70:          \" at index 0x%zx\", \\",
          "71:          (uintptr_t)&src, \\",
          "72:          (uintptr_t)buffer, \\",
          "73:          local_offset); \\",
          "74: \\",
          "75:     switch (sizeof(src.val)) { \\",
          "76:         case 1: \\",
          "77:             break; \\",
          "78:         case 2: \\",
          "79:             src.val = HOST_TO_BE_16(src.val); \\",
          "80:             break; \\",
          "81:         case 4: \\",
          "82:             src.val = HOST_TO_BE_32(src.val); \\",
          "83:             break; \\",
          "84:         case 8: \\",
          "85:             src.val = HOST_TO_BE_64(src.val); \\",
          "86:             break; \\",
          "87: \\",
          "88:     } \\",
          "89:     memcpy (&buffer [local_offset], &src, sizeof(src.val)); \\",
          "90:     if (offset != NULL) { \\",
          "92:         LOG_INFO( \"offset parameter non-NULL, updated to %zu\", *offset); \\",
          "93:     } \\",
          "94: \\",
          "95:     return TSS2_RC_SUCCESS; \\",
          "96: }",
          "98: #define TPMA_UNMARSHAL(type) \\",
          "99: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "100:                                    size_t *offset, type *dest) \\",
          "101: { \\",
          "102:     size_t  local_offset = 0; \\",
          "103:     type tmp; \\",
          "104:     memset(&tmp, 0, sizeof(tmp)); \\",
          "105: \\",
          "106:     if (offset != NULL) { \\",
          "107:         LOG_INFO( \"offset non-NULL, initial value: %zu\", *offset); \\",
          "108:         local_offset = *offset; \\",
          "109:     } \\",
          "110: \\",
          "111:     if (buffer == NULL || (dest == NULL && offset == NULL)) { \\",
          "112:         LOG_WARN( \"buffer or dest and offset parameter are NULL\"); \\",
          "113:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "114:     } else if (dest == NULL && offset != NULL) { \\",
          "116:         LOG_INFO( \\",
          "117:              \"buffer NULL and offset non-NULL, updating offset to %zu\", \\",
          "119:         return TSS2_RC_SUCCESS; \\",
          "120:     } else if (buffer_size < local_offset || \\",
          "121:                sizeof (*dest) > buffer_size - local_offset) \\",
          "122:     { \\",
          "123:         LOG_WARN( \\",
          "124:              \"buffer_size: %zu with offset: %zu are insufficient for object \" \\",
          "125:              \"of size %zu\", \\",
          "126:              buffer_size, \\",
          "127:              local_offset, \\",
          "128:              sizeof (*dest)); \\",
          "129:         return TSS2_TYPES_RC_INSUFFICIENT_BUFFER; \\",
          "130:     } \\",
          "131: \\",
          "132:     LOG_INFO( \\",
          "133:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "134:          \" at index 0x%zx\", \\",
          "135:          (uintptr_t)buffer, \\",
          "136:          (uintptr_t)dest, \\",
          "137:          local_offset); \\",
          "138: \\",
          "139:     memcpy (&tmp, &buffer [local_offset], sizeof (tmp)); \\",
          "140: \\",
          "141:     switch (sizeof(tmp.val)) { \\",
          "142:         case 1: \\",
          "143:             dest->val = tmp.val; \\",
          "144:             break; \\",
          "145:         case 2: \\",
          "146:             dest->val = BE_TO_HOST_16(tmp.val); \\",
          "147:             break; \\",
          "148:         case 4: \\",
          "149:             dest->val = BE_TO_HOST_32(tmp.val); \\",
          "150:             break; \\",
          "151:         case 8: \\",
          "152:             dest->val = BE_TO_HOST_64(tmp.val); \\",
          "153:             break; \\",
          "154: \\",
          "155:     } \\",
          "156: \\",
          "157:     if (offset != NULL) { \\",
          "159:         LOG_INFO( \"offset parameter non-NULL, updated to %zu\", *offset); \\",
          "160:     } \\",
          "161:     return TSS2_RC_SUCCESS; \\",
          "162: }",
          "168: TPMA_MARSHAL  (TPMA_ALGORITHM);",
          "169: TPMA_UNMARSHAL(TPMA_ALGORITHM);",
          "170: TPMA_MARSHAL  (TPMA_CC);",
          "171: TPMA_UNMARSHAL(TPMA_CC);",
          "172: TPMA_MARSHAL  (TPMA_LOCALITY);",
          "173: TPMA_UNMARSHAL(TPMA_LOCALITY);",
          "174: TPMA_MARSHAL  (TPMA_NV);",
          "175: TPMA_UNMARSHAL(TPMA_NV);",
          "176: TPMA_MARSHAL  (TPMA_OBJECT);",
          "177: TPMA_UNMARSHAL(TPMA_OBJECT);",
          "178: TPMA_MARSHAL  (TPMA_PERMANENT);",
          "179: TPMA_UNMARSHAL(TPMA_PERMANENT);",
          "180: TPMA_MARSHAL  (TPMA_SESSION);",
          "181: TPMA_UNMARSHAL(TPMA_SESSION);",
          "182: TPMA_MARSHAL  (TPMA_STARTUP_CLEAR);",
          "183: TPMA_UNMARSHAL(TPMA_STARTUP_CLEAR);",
          "",
          "---------------"
        ],
        "lib/tpml-types.c||lib/tpml-types.c": [
          "File: lib/tpml-types.c -> lib/tpml-types.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <alloca.h>",
          "29: #include <inttypes.h>",
          "30: #include <string.h>",
          "32: #include \"tss2_mu.h\"",
          "33: #include \"sapi/tpm20.h\"",
          "34: #include \"tss2_endian.h\"",
          "35: #include \"log.h\"",
          "37: #define ADDR &",
          "38: #define VAL",
          "39: #define TAB_SIZE(tab) (sizeof(tab) / sizeof(tab[0]))",
          "41: #define MAX_LOCAL_BUFFER_SIZE 4096",
          "43: #define TPML_MARSHAL(type, marshal_func, buf_name, op) \\",
          "44: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "45:                                  size_t buffer_size, size_t *offset) \\",
          "46: { \\",
          "47:     size_t  local_offset = 0; \\",
          "48:     UINT32 i, count = 0; \\",
          "49:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "50:     uint8_t *buf_ptr = buffer; \\",
          "51:     uint8_t local_buffer[MAX_LOCAL_BUFFER_SIZE]; \\",
          "52:     \\",
          "53:     if (buffer_size > MAX_LOCAL_BUFFER_SIZE) { \\",
          "54:         LOG_WARN( \\",
          "55:          \"buffer_size too big\" \\",
          "56:         ); \\",
          "57:         return TSS2_TYPES_RC_INSUFFICIENT_BUFFER; \\",
          "58:     } \\",
          "59: \\",
          "60:     if (offset != NULL) { \\",
          "61:         LOG_INFO( \"offset non-NULL, initial value: %zu\", *offset); \\",
          "62:         local_offset = *offset; \\",
          "63:     } \\",
          "64: \\",
          "65:     if (src == NULL) { \\",
          "66:         LOG_WARN( \"src is NULL\"); \\",
          "67:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "68:     } \\",
          "69: \\",
          "70:     if (buffer == NULL && offset == NULL) { \\",
          "71:         LOG_WARN( \"buffer and offset parameter are NULL\"); \\",
          "72:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "73:     } else if (buffer_size < local_offset || \\",
          "74:                buffer_size - local_offset < sizeof(count)) { \\",
          "75:         LOG_WARN( \\",
          "76:              \"buffer_size: %zu with offset: %zu are insufficient for object \" \\",
          "77:              \"of size %zu\", \\",
          "78:              buffer_size, \\",
          "79:              local_offset, \\",
          "80:              sizeof(count)); \\",
          "81:         return TSS2_TYPES_RC_INSUFFICIENT_BUFFER; \\",
          "82:     } \\",
          "83: \\",
          "84:     if (src->count > TAB_SIZE(src->buf_name)) { \\",
          "85:         LOG_WARN( \"count too big\"); \\",
          "86:         return TSS2_SYS_RC_BAD_VALUE; \\",
          "87:     } \\",
          "88: \\",
          "89:     if (buf_ptr == NULL) \\",
          "90:         buf_ptr = local_buffer; \\",
          "91: \\",
          "92:     LOG_INFO( \\",
          "93:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "94:          \" at index 0x%zx\", \\",
          "95:          (uintptr_t)&src, \\",
          "96:          (uintptr_t)buf_ptr, \\",
          "97:          local_offset); \\",
          "98: \\",
          "99:     ret = Tss2_MU_UINT32_Marshal(src->count, buf_ptr, buffer_size, &local_offset); \\",
          "100:     if (ret) \\",
          "101:         return ret; \\",
          "102: \\",
          "103:     for (i = 0; i < src->count; i++) \\",
          "104:     { \\",
          "105:         ret = marshal_func(op src->buf_name[i], buf_ptr, buffer_size, &local_offset); \\",
          "106:         if (ret) \\",
          "107:             return ret; \\",
          "108:     } \\",
          "109:     if (offset != NULL) { \\",
          "111:         LOG_INFO( \"offset parameter non-NULL updated to %zu\", *offset); \\",
          "112:     } \\",
          "113: \\",
          "114:     return TSS2_RC_SUCCESS; \\",
          "115: }",
          "117: #define TPML_UNMARSHAL(type, unmarshal_func, buf_name) \\",
          "118: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "119:                                    size_t *offset, type *dest) \\",
          "120: { \\",
          "121:     size_t  local_offset = 0; \\",
          "122:     UINT32 i, count = 0; \\",
          "123:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "124:     type local_dst; \\",
          "125: \\",
          "126:     if (offset != NULL) { \\",
          "127:         LOG_INFO( \"offset non-NULL, initial value: %zu\", *offset); \\",
          "128:         local_offset = *offset; \\",
          "129:     } \\",
          "130: \\",
          "131:     if (buffer == NULL || (dest == NULL && offset == NULL)) { \\",
          "132:         LOG_WARN( \"buffer or dest and offset parameter are NULL\"); \\",
          "133:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "134:     } else if (buffer_size < local_offset || \\",
          "135:                sizeof(count) > buffer_size - local_offset) \\",
          "136:     { \\",
          "137:         LOG_WARN( \\",
          "138:              \"buffer_size: %zu with offset: %zu are insufficient for object \" \\",
          "139:              \"of size %zu\", \\",
          "140:              buffer_size, \\",
          "141:              local_offset, \\",
          "142:              sizeof(count)); \\",
          "143:         return TSS2_TYPES_RC_INSUFFICIENT_BUFFER; \\",
          "144:     } \\",
          "145: \\",
          "146:     LOG_INFO( \\",
          "147:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "148:          \" at index 0x%zx\", \\",
          "149:          (uintptr_t)buffer, \\",
          "150:          (uintptr_t)dest, \\",
          "151:          local_offset); \\",
          "152: \\",
          "153:     if (dest == NULL) \\",
          "154:         dest = &local_dst; \\",
          "155: \\",
          "156:     ret = Tss2_MU_UINT32_Unmarshal(buffer, buffer_size, &local_offset, &count); \\",
          "157:     if (ret) \\",
          "158:         return ret; \\",
          "159: \\",
          "160:     if (count > TAB_SIZE(dest->buf_name)) { \\",
          "161:         LOG_WARN( \"count too big\"); \\",
          "162:         return TSS2_SYS_RC_MALFORMED_RESPONSE; \\",
          "163:     } \\",
          "164: \\",
          "165:     dest->count = count; \\",
          "166: \\",
          "167:     for (i = 0; i < count; i++) \\",
          "168:     { \\",
          "169:         ret = unmarshal_func(buffer, buffer_size, &local_offset, &dest->buf_name[i]); \\",
          "170:         if (ret) \\",
          "171:             return ret; \\",
          "172:     } \\",
          "173: \\",
          "174:     if (offset != NULL) { \\",
          "176:         LOG_INFO( \"offset parameter non-NULL, updated to %zu\", *offset); \\",
          "177:     } \\",
          "178: \\",
          "179:     return TSS2_RC_SUCCESS; \\",
          "180: }",
          "186: TPML_MARSHAL(TPML_CC, Tss2_MU_TPM_CC_Marshal, commandCodes, VAL)",
          "187: TPML_UNMARSHAL(TPML_CC, Tss2_MU_TPM_CC_Unmarshal, commandCodes)",
          "188: TPML_MARSHAL(TPML_CCA, Tss2_MU_TPMA_CC_Marshal, commandAttributes, VAL)",
          "189: TPML_UNMARSHAL(TPML_CCA, Tss2_MU_TPMA_CC_Unmarshal, commandAttributes)",
          "190: TPML_MARSHAL(TPML_ALG, Tss2_MU_UINT16_Marshal, algorithms, VAL)",
          "191: TPML_UNMARSHAL(TPML_ALG, Tss2_MU_UINT16_Unmarshal, algorithms)",
          "192: TPML_MARSHAL(TPML_HANDLE, Tss2_MU_UINT32_Marshal, handle, VAL)",
          "193: TPML_UNMARSHAL(TPML_HANDLE, Tss2_MU_UINT32_Unmarshal, handle)",
          "194: TPML_MARSHAL(TPML_DIGEST, Tss2_MU_TPM2B_DIGEST_Marshal, digests, ADDR)",
          "195: TPML_UNMARSHAL(TPML_DIGEST, Tss2_MU_TPM2B_DIGEST_Unmarshal, digests)",
          "196: TPML_MARSHAL(TPML_ALG_PROPERTY, Tss2_MU_TPMS_ALG_PROPERTY_Marshal, algProperties, ADDR)",
          "197: TPML_UNMARSHAL(TPML_ALG_PROPERTY, Tss2_MU_TPMS_ALG_PROPERTY_Unmarshal, algProperties)",
          "198: TPML_MARSHAL(TPML_ECC_CURVE, Tss2_MU_UINT16_Marshal, eccCurves, VAL)",
          "199: TPML_UNMARSHAL(TPML_ECC_CURVE, Tss2_MU_UINT16_Unmarshal, eccCurves)",
          "200: TPML_MARSHAL(TPML_TAGGED_TPM_PROPERTY, Tss2_MU_TPMS_TAGGED_PROPERTY_Marshal, tpmProperty, ADDR)",
          "201: TPML_UNMARSHAL(TPML_TAGGED_TPM_PROPERTY, Tss2_MU_TPMS_TAGGED_PROPERTY_Unmarshal, tpmProperty)",
          "202: TPML_MARSHAL(TPML_TAGGED_PCR_PROPERTY, Tss2_MU_TPMS_TAGGED_PCR_SELECT_Marshal, pcrProperty, ADDR)",
          "203: TPML_UNMARSHAL(TPML_TAGGED_PCR_PROPERTY, Tss2_MU_TPMS_TAGGED_PCR_SELECT_Unmarshal, pcrProperty)",
          "204: TPML_MARSHAL(TPML_PCR_SELECTION, Tss2_MU_TPMS_PCR_SELECTION_Marshal, pcrSelections, ADDR)",
          "205: TPML_UNMARSHAL(TPML_PCR_SELECTION, Tss2_MU_TPMS_PCR_SELECTION_Unmarshal, pcrSelections)",
          "206: TPML_MARSHAL(TPML_DIGEST_VALUES, Tss2_MU_TPMT_HA_Marshal, digests, ADDR)",
          "207: TPML_UNMARSHAL(TPML_DIGEST_VALUES, Tss2_MU_TPMT_HA_Unmarshal, digests)",
          "",
          "---------------"
        ],
        "lib/tpms-types.c||lib/tpms-types.c": [
          "File: lib/tpms-types.c -> lib/tpms-types.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <inttypes.h>",
          "30: #include <string.h>",
          "32: #include \"tss2_mu.h\"",
          "33: #include \"sapi/tpm20.h\"",
          "34: #include \"tss2_endian.h\"",
          "35: #include \"log.h\"",
          "37: #define ADDR &",
          "38: #define VAL",
          "39: #define TAB_SIZE(tab) (sizeof(tab) / sizeof(tab[0]))",
          "41: static TSS2_RC marshal_pcr_select(const UINT8 *ptr, uint8_t buffer[],",
          "42:                                   size_t buffer_size, size_t *offset)",
          "43: {",
          "44:     TPMS_PCR_SELECT *pcrSelect = (TPMS_PCR_SELECT *)ptr;",
          "45:     UINT32 i;",
          "46:     TSS2_RC ret;",
          "48:     if (!ptr) {",
          "49:         LOG_WARN( \"src param is NULL\");",
          "50:         return TSS2_TYPES_RC_BAD_REFERENCE;",
          "51:     }",
          "53:     ret = Tss2_MU_UINT8_Marshal(pcrSelect->sizeofSelect, buffer, buffer_size, offset);",
          "54:     if (ret)",
          "55:         return ret;",
          "57:     if (pcrSelect->sizeofSelect > TAB_SIZE(pcrSelect->pcrSelect)) {",
          "58:         LOG_ERR(\"sizeofSelect value too big\");",
          "59:         return TSS2_SYS_RC_BAD_VALUE;",
          "60:     }",
          "62:     for (i = 0; i < pcrSelect->sizeofSelect; i++)",
          "63:     {",
          "64:         ret = Tss2_MU_UINT8_Marshal(pcrSelect->pcrSelect[i], buffer, buffer_size, offset);",
          "65:         if (ret)",
          "66:             return ret;",
          "67:     }",
          "69:     return TSS2_RC_SUCCESS;",
          "70: }",
          "72: static TSS2_RC unmarshal_pcr_select(uint8_t const buffer[], size_t buffer_size,",
          "73:                                     size_t *offset, UINT8 *ptr)",
          "74: {",
          "75:     TPMS_PCR_SELECT *pcrSelect = (TPMS_PCR_SELECT *)ptr;",
          "76:     UINT32 i;",
          "77:     TSS2_RC ret;",
          "79:     if (!ptr) {",
          "80:         LOG_WARN( \"dest param is NULL\");",
          "81:         return TSS2_TYPES_RC_BAD_REFERENCE;",
          "82:     }",
          "84:     ret = Tss2_MU_UINT8_Unmarshal(buffer, buffer_size, offset, &pcrSelect->sizeofSelect);",
          "85:     if (ret)",
          "86:         return ret;",
          "88:     if (pcrSelect->sizeofSelect > TAB_SIZE(pcrSelect->pcrSelect)) {",
          "89:         LOG_ERR(\"sizeofSelect value too big\");",
          "90:         return TSS2_SYS_RC_MALFORMED_RESPONSE;",
          "91:     }",
          "93:     for (i = 0; i < pcrSelect->sizeofSelect; i++)",
          "94:     {",
          "95:         ret = Tss2_MU_UINT8_Unmarshal(buffer, buffer_size, offset, &pcrSelect->pcrSelect[i]);",
          "97:         if (ret)",
          "98:             return ret;",
          "99:     }",
          "101:     return TSS2_RC_SUCCESS;",
          "102: }",
          "104: static TSS2_RC marshal_pcr_selection(const TPMI_ALG_HASH *ptr, uint8_t buffer[],",
          "105:                                      size_t buffer_size, size_t *offset)",
          "106: {",
          "107:     TPMS_PCR_SELECTION *pcrSelection = (TPMS_PCR_SELECTION *)ptr;",
          "108:     UINT32 i;",
          "109:     TSS2_RC ret;",
          "111:     if (!ptr) {",
          "112:         LOG_WARN( \"src param is NULL\");",
          "113:         return TSS2_TYPES_RC_BAD_REFERENCE;",
          "114:     }",
          "116:     if (pcrSelection->sizeofSelect > TAB_SIZE(pcrSelection->pcrSelect)) {",
          "117:         LOG_ERR(\"sizeofSelect value too big\");",
          "118:         return TSS2_SYS_RC_BAD_VALUE;",
          "119:     }",
          "121:     ret = Tss2_MU_UINT16_Marshal(pcrSelection->hash, buffer, buffer_size, offset);",
          "122:     if (ret)",
          "123:         return ret;",
          "125:     ret = Tss2_MU_UINT8_Marshal(pcrSelection->sizeofSelect, buffer, buffer_size, offset);",
          "126:     if (ret)",
          "127:         return ret;",
          "129:     for (i = 0; i < pcrSelection->sizeofSelect; i++)",
          "130:     {",
          "131:         ret = Tss2_MU_UINT8_Marshal(pcrSelection->pcrSelect[i], buffer, buffer_size, offset);",
          "133:         if (ret)",
          "134:             return ret;",
          "135:     }",
          "137:     return TSS2_RC_SUCCESS;",
          "138: }",
          "140: static TSS2_RC unmarshal_pcr_selection(uint8_t const buffer[], size_t buffer_size,",
          "141:                                        size_t *offset, TPMI_ALG_HASH *ptr)",
          "142: {",
          "143:     TPMS_PCR_SELECTION *pcrSelection = (TPMS_PCR_SELECTION *)ptr;",
          "144:     UINT32 i;",
          "145:     TSS2_RC ret;",
          "147:     if (!ptr) {",
          "148:         LOG_WARN( \"dest param is NULL\");",
          "149:         return TSS2_TYPES_RC_BAD_REFERENCE;",
          "150:     }",
          "152:     ret = Tss2_MU_UINT16_Unmarshal(buffer, buffer_size, offset, &pcrSelection->hash);",
          "153:     if (ret)",
          "154:         return ret;",
          "156:     ret = Tss2_MU_UINT8_Unmarshal(buffer, buffer_size, offset, &pcrSelection->sizeofSelect);",
          "157:     if (ret)",
          "158:         return ret;",
          "160:     if (pcrSelection->sizeofSelect > TAB_SIZE(pcrSelection->pcrSelect)) {",
          "161:         LOG_ERR(\"sizeofSelect value too big\");",
          "162:         return TSS2_SYS_RC_MALFORMED_RESPONSE;",
          "163:     }",
          "165:     for (i = 0; i < pcrSelection->sizeofSelect; i++)",
          "166:     {",
          "167:         ret = Tss2_MU_UINT8_Unmarshal(buffer, buffer_size, offset, &pcrSelection->pcrSelect[i]);",
          "169:         if (ret)",
          "170:             return ret;",
          "171:     }",
          "173:     return TSS2_RC_SUCCESS;",
          "174: }",
          "176: static TSS2_RC marshal_tagged_pcr_selection(const TPM_PT_PCR *ptr, uint8_t buffer[],",
          "177:                                             size_t buffer_size, size_t *offset)",
          "178: {",
          "179:     TPMS_TAGGED_PCR_SELECT *taggedPcrSelect = (TPMS_TAGGED_PCR_SELECT *)ptr;",
          "180:     UINT32 i;",
          "181:     TSS2_RC ret;",
          "183:     if (!ptr) {",
          "184:         LOG_WARN( \"src param is NULL\");",
          "185:         return TSS2_TYPES_RC_BAD_REFERENCE;",
          "186:     }",
          "188:     if (taggedPcrSelect->sizeofSelect > TAB_SIZE(taggedPcrSelect->pcrSelect)) {",
          "189:         LOG_ERR(\"sizeofSelect value too big\");",
          "190:         return TSS2_SYS_RC_BAD_VALUE;",
          "191:     }",
          "193:     ret = Tss2_MU_UINT32_Marshal(taggedPcrSelect->tag, buffer, buffer_size, offset);",
          "194:     if (ret)",
          "195:         return ret;",
          "197:     ret = Tss2_MU_UINT8_Marshal(taggedPcrSelect->sizeofSelect, buffer, buffer_size, offset);",
          "198:     if (ret)",
          "199:         return ret;",
          "201:     for (i = 0; i < taggedPcrSelect->sizeofSelect; i++)",
          "202:     {",
          "203:         ret = Tss2_MU_UINT8_Marshal(taggedPcrSelect->pcrSelect[i], buffer, buffer_size, offset);",
          "204:         if (ret)",
          "205:             return ret;",
          "206:     }",
          "208:     return TSS2_RC_SUCCESS;",
          "209: }",
          "211: static TSS2_RC unmarshal_tagged_pcr_selection(uint8_t const buffer[], size_t buffer_size,",
          "212:                                               size_t *offset, TPM_PT_PCR *ptr)",
          "213: {",
          "214:     TPMS_TAGGED_PCR_SELECT *taggedPcrSelect = (TPMS_TAGGED_PCR_SELECT *)ptr;",
          "215:     UINT32 i;",
          "216:     TSS2_RC ret;",
          "218:     if (!ptr) {",
          "219:         LOG_WARN( \"dest param is NULL\");",
          "220:         return TSS2_TYPES_RC_BAD_REFERENCE;",
          "221:     }",
          "223:     ret = Tss2_MU_UINT32_Unmarshal(buffer, buffer_size, offset, &taggedPcrSelect->tag);",
          "224:     if (ret)",
          "225:         return ret;",
          "227:     ret = Tss2_MU_UINT8_Unmarshal(buffer, buffer_size, offset, &taggedPcrSelect->sizeofSelect);",
          "228:     if (ret)",
          "229:         return ret;",
          "231:     if (taggedPcrSelect->sizeofSelect > TAB_SIZE(taggedPcrSelect->pcrSelect)) {",
          "232:         LOG_ERR(\"sizeofSelect value too big\");",
          "233:         return TSS2_SYS_RC_MALFORMED_RESPONSE;",
          "234:     }",
          "236:     for (i = 0; i < taggedPcrSelect->sizeofSelect; i++)",
          "237:     {",
          "238:         ret = Tss2_MU_UINT8_Unmarshal(buffer, buffer_size, offset, &taggedPcrSelect->pcrSelect[i]);",
          "239:         if (ret)",
          "240:             return ret;",
          "241:     }",
          "243:     return TSS2_RC_SUCCESS;",
          "244: }",
          "246: #define TPMS_MARSHAL_1(type, m, op, fn) \\",
          "247: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "248:                                  size_t buffer_size, size_t *offset) \\",
          "249: { \\",
          "250:     if (!src) { \\",
          "251:         LOG_WARN( \"src param is NULL\"); \\",
          "252:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "253:     } \\",
          "254: \\",
          "255:     LOG_INFO( \\",
          "256:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "257:          \" at index 0x%zx\", (uintptr_t)&src,  (uintptr_t)buffer, *offset); \\",
          "258: \\",
          "259:     return fn(op src->m, buffer, buffer_size, offset); \\",
          "260: }",
          "262: #define TPMS_UNMARSHAL_1(type, m, fn) \\",
          "263: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "264:                                    size_t *offset, type *dest) \\",
          "265: { \\",
          "266:     LOG_INFO( \\",
          "267:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "268:          \" at index 0x%zx\", (uintptr_t)dest,  (uintptr_t)buffer, *offset); \\",
          "269: \\",
          "270:     return fn(buffer, buffer_size, offset, dest ? &dest->m : NULL); \\",
          "271: }",
          "273: #define TPMS_MARSHAL_2_U(type, m1, op1, fn1, m2, op2, fn2) \\",
          "274: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "275:                                  size_t buffer_size, size_t *offset) \\",
          "276: { \\",
          "277:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "278:     size_t local_offset = 0; \\",
          "279: \\",
          "280:     if (!src) { \\",
          "281:         LOG_WARN( \"src param is NULL\"); \\",
          "282:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "283:     } \\",
          "284: \\",
          "285:     if (offset) {\\",
          "286:         local_offset = *offset; \\",
          "287:     } else if (!buffer) { \\",
          "288:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "289:     } \\",
          "290: \\",
          "291:     LOG_INFO( \\",
          "292:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "293:          \" at index 0x%zx\", (uintptr_t)&src,  (uintptr_t)buffer, *offset); \\",
          "294: \\",
          "295:     ret = fn1(op1 src->m1, buffer, buffer_size, &local_offset); \\",
          "296:     if (ret != TSS2_RC_SUCCESS) \\",
          "297:         return ret; \\",
          "298: \\",
          "299:     ret = fn2(op2 src->m2, src->m1, buffer, buffer_size, &local_offset); \\",
          "300: \\",
          "301:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "303:     } \\",
          "304:     return ret; \\",
          "305: }",
          "307: #define TPMS_UNMARSHAL_2_U(type, m1, fn1, m2, fn2) \\",
          "308: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "309:                                    size_t *offset, type *dest) \\",
          "310: { \\",
          "311:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "312:     size_t local_offset = 0; \\",
          "313:     type tmp_dest; \\",
          "314: \\",
          "315:     LOG_INFO( \\",
          "316:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "317:          \" at index 0x%zx\", (uintptr_t)dest,  (uintptr_t)buffer, *offset); \\",
          "318: \\",
          "319:     if (offset) { \\",
          "320:         local_offset = *offset; \\",
          "321:     } else if (!dest) { \\",
          "322:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "323:     } \\",
          "324: \\",
          "325:     ret = fn1(buffer, buffer_size, &local_offset, dest ? &dest->m1 : &tmp_dest.m1); \\",
          "326:     if (ret != TSS2_RC_SUCCESS) \\",
          "327:         return ret; \\",
          "328: \\",
          "329:     ret = fn2(buffer, buffer_size, &local_offset, dest ? dest->m1 : tmp_dest.m1, dest ? &dest->m2 : NULL); \\",
          "330: \\",
          "331:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "333:     } \\",
          "334:     return ret; \\",
          "335: }",
          "337: #define TPMS_MARSHAL_2(type, m1, op1, fn1, m2, op2, fn2) \\",
          "338: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "339:                                  size_t buffer_size, size_t *offset) \\",
          "340: { \\",
          "341:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "342:     size_t local_offset = 0; \\",
          "343: \\",
          "344:     if (!src) { \\",
          "345:         LOG_WARN( \"src param is NULL\"); \\",
          "346:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "347:     } \\",
          "348: \\",
          "349:     if (offset) { \\",
          "350:         local_offset = *offset; \\",
          "351:     } else if (!buffer) { \\",
          "352:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "353:     } \\",
          "354: \\",
          "355:     LOG_INFO( \\",
          "356:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "357:          \" at index 0x%zx\", (uintptr_t)&src,  (uintptr_t)buffer, *offset); \\",
          "358: \\",
          "359:     ret = fn1(op1 src->m1, buffer, buffer_size, &local_offset); \\",
          "360:     if (ret != TSS2_RC_SUCCESS) \\",
          "361:         return ret; \\",
          "362: \\",
          "363:     ret = fn2(op2 src->m2, buffer, buffer_size, &local_offset); \\",
          "364: \\",
          "365:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "367:     } \\",
          "368:     return ret; \\",
          "369: }",
          "371: #define TPMS_UNMARSHAL_2(type, m1, fn1, m2, fn2) \\",
          "372: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "373:                                    size_t *offset, type *dest) \\",
          "374: { \\",
          "375:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "376:     size_t local_offset = 0; \\",
          "377: \\",
          "378:     LOG_INFO( \\",
          "379:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "380:          \" at index 0x%zx\", (uintptr_t)dest,  (uintptr_t)buffer, *offset); \\",
          "381: \\",
          "382:     if (offset) { \\",
          "383:         local_offset = *offset; \\",
          "384:     } else if (!dest) { \\",
          "385:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "386:     } \\",
          "387: \\",
          "388:     ret = fn1(buffer, buffer_size, &local_offset, dest ? &dest->m1 : NULL); \\",
          "389:     if (ret != TSS2_RC_SUCCESS) \\",
          "390:         return ret; \\",
          "391: \\",
          "392:     ret = fn2(buffer, buffer_size, &local_offset, dest ? &dest->m2 : NULL); \\",
          "393: \\",
          "394:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "396:     } \\",
          "397:     return ret; \\",
          "398: }",
          "400: #define TPMS_MARSHAL_3(type, m1, op1, fn1, m2, op2, fn2, m3, op3, fn3) \\",
          "401: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "402:                                  size_t buffer_size, size_t *offset) \\",
          "403: { \\",
          "404:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "405:     size_t local_offset = 0; \\",
          "406: \\",
          "407:     if (!src) { \\",
          "408:         LOG_WARN( \"src param is NULL\"); \\",
          "409:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "410:     } \\",
          "411: \\",
          "412:     if (offset) { \\",
          "413:         local_offset = *offset; \\",
          "414:     } else if (!buffer) { \\",
          "415:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "416:     } \\",
          "417: \\",
          "418:     LOG_INFO( \\",
          "419:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "420:          \" at index 0x%zx\", (uintptr_t)&src,  (uintptr_t)buffer, *offset); \\",
          "421: \\",
          "422:     ret = fn1(op1 src->m1, buffer, buffer_size, &local_offset); \\",
          "423:     if (ret != TSS2_RC_SUCCESS) \\",
          "424:         return ret; \\",
          "425: \\",
          "426:     ret = fn2(op2 src->m2, buffer, buffer_size, &local_offset); \\",
          "427:     if (ret != TSS2_RC_SUCCESS) \\",
          "428:         return ret; \\",
          "429: \\",
          "430:     ret = fn3(op3 src->m3, buffer, buffer_size, &local_offset); \\",
          "431: \\",
          "432:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "434:     } \\",
          "435:     return ret; \\",
          "436: }",
          "438: #define TPMS_UNMARSHAL_3(type, m1, fn1, m2, fn2, m3, fn3) \\",
          "439: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "440:                                    size_t *offset, type *dest) \\",
          "441: { \\",
          "442:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "443:     size_t local_offset = 0; \\",
          "444: \\",
          "445:     LOG_INFO( \\",
          "446:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "447:          \" at index 0x%zx\", (uintptr_t)dest,  (uintptr_t)buffer, *offset); \\",
          "448: \\",
          "449:     if (offset) { \\",
          "450:         local_offset = *offset; \\",
          "451:     } else if (!dest) { \\",
          "452:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "453:     } \\",
          "454: \\",
          "455:     ret = fn1(buffer, buffer_size, &local_offset, dest ? &dest->m1 : NULL); \\",
          "456:     if (ret != TSS2_RC_SUCCESS) \\",
          "457:         return ret; \\",
          "458: \\",
          "459:     ret = fn2(buffer, buffer_size, &local_offset, dest ? &dest->m2 : NULL); \\",
          "460:     if (ret != TSS2_RC_SUCCESS) \\",
          "461:         return ret; \\",
          "462: \\",
          "463:     ret = fn3(buffer, buffer_size, &local_offset, dest ? &dest->m3 : NULL); \\",
          "464: \\",
          "465:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "467:     } \\",
          "468:     return ret; \\",
          "469: }",
          "471: #define TPMS_MARSHAL_4(type, m1, op1, fn1, m2, op2, fn2, m3, op3, fn3, m4, op4, fn4) \\",
          "472: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "473:                                  size_t buffer_size, size_t *offset) \\",
          "474: { \\",
          "475:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "476:     size_t local_offset = 0; \\",
          "477: \\",
          "478:     if (!src) { \\",
          "479:         LOG_WARN( \"src param is NULL\"); \\",
          "480:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "481:     } \\",
          "482: \\",
          "483:     if (offset) { \\",
          "484:         local_offset = *offset; \\",
          "485:     } else if (!buffer) { \\",
          "486:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "487:     } \\",
          "488: \\",
          "489:     LOG_INFO( \\",
          "490:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "491:          \" at index 0x%zx\", (uintptr_t)&src,  (uintptr_t)buffer, *offset); \\",
          "492: \\",
          "493:     ret = fn1(op1 src->m1, buffer, buffer_size, &local_offset); \\",
          "494:     if (ret != TSS2_RC_SUCCESS) \\",
          "495:         return ret; \\",
          "496: \\",
          "497:     ret = fn2(op2 src->m2, buffer, buffer_size, &local_offset); \\",
          "498:     if (ret != TSS2_RC_SUCCESS) \\",
          "499:         return ret; \\",
          "500: \\",
          "501:     ret = fn3(op3 src->m3, buffer, buffer_size, &local_offset); \\",
          "502:     if (ret != TSS2_RC_SUCCESS) \\",
          "503:         return ret; \\",
          "504: \\",
          "505:     ret = fn4(op4 src->m4, buffer, buffer_size, &local_offset); \\",
          "506: \\",
          "507:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "509:     } \\",
          "510:     return ret; \\",
          "511: }",
          "513: #define TPMS_UNMARSHAL_4(type, m1, fn1, m2, fn2, m3, fn3, m4, fn4) \\",
          "514: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "515:                                    size_t *offset, type *dest) \\",
          "516: { \\",
          "517:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "518:     size_t local_offset = 0; \\",
          "519: \\",
          "520:     if (offset) { \\",
          "521:         local_offset = *offset; \\",
          "522:     } else if (!dest) { \\",
          "523:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "524:     } \\",
          "525: \\",
          "526:     LOG_INFO( \\",
          "527:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "528:          \" at index 0x%zx\", (uintptr_t)dest,  (uintptr_t)buffer, *offset); \\",
          "529: \\",
          "530:     ret = fn1(buffer, buffer_size, &local_offset, dest ? &dest->m1 : NULL); \\",
          "531:     if (ret != TSS2_RC_SUCCESS) \\",
          "532:         return ret; \\",
          "533: \\",
          "534:     ret = fn2(buffer, buffer_size, &local_offset, dest ? &dest->m2 : NULL); \\",
          "535:     if (ret != TSS2_RC_SUCCESS) \\",
          "536:         return ret; \\",
          "537: \\",
          "538:     ret = fn3(buffer, buffer_size, &local_offset, dest ? &dest->m3 : NULL); \\",
          "539:     if (ret != TSS2_RC_SUCCESS) \\",
          "540:         return ret; \\",
          "541: \\",
          "542:     ret = fn4(buffer, buffer_size, &local_offset, dest ? &dest->m4 : NULL); \\",
          "543: \\",
          "544:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "546:     } \\",
          "547:     return ret; \\",
          "548: }",
          "550: #define TPMS_MARSHAL_5(type, m1, op1, fn1, m2, op2, fn2, m3, op3, fn3, \\",
          "551:                        m4, op4, fn4, m5, op5, fn5) \\",
          "552: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "553:                                  size_t buffer_size, size_t *offset) \\",
          "554: { \\",
          "555:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "556:     size_t local_offset = 0; \\",
          "557: \\",
          "558:     if (!src) { \\",
          "559:         LOG_WARN( \"src param is NULL\"); \\",
          "560:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "561:     } \\",
          "562: \\",
          "563:     if (offset) { \\",
          "564:         local_offset = *offset; \\",
          "565:     } else if (!buffer) { \\",
          "566:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "567:     } \\",
          "568: \\",
          "569:     LOG_INFO( \\",
          "570:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "571:          \" at index 0x%zx\", (uintptr_t)&src,  (uintptr_t)buffer, *offset); \\",
          "572: \\",
          "573:     ret = fn1(op1 src->m1, buffer, buffer_size, &local_offset); \\",
          "574:     if (ret != TSS2_RC_SUCCESS) \\",
          "575:         return ret; \\",
          "576: \\",
          "577:     ret = fn2(op2 src->m2, buffer, buffer_size, &local_offset); \\",
          "578:     if (ret != TSS2_RC_SUCCESS) \\",
          "579:         return ret; \\",
          "580: \\",
          "581:     ret = fn3(op3 src->m3, buffer, buffer_size, &local_offset); \\",
          "582:     if (ret != TSS2_RC_SUCCESS) \\",
          "583:         return ret; \\",
          "584: \\",
          "585:     ret = fn4(op4 src->m4, buffer, buffer_size, &local_offset); \\",
          "586:     if (ret != TSS2_RC_SUCCESS) \\",
          "587:         return ret; \\",
          "588: \\",
          "589:     ret = fn5(op5 src->m5, buffer, buffer_size, &local_offset); \\",
          "590: \\",
          "591:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "593:     } \\",
          "594:     return ret; \\",
          "595: }",
          "597: #define TPMS_UNMARSHAL_5(type, m1, fn1, m2, fn2, m3, fn3, m4, fn4, m5, fn5) \\",
          "598: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "599:                                    size_t *offset, type *dest) \\",
          "600: { \\",
          "601:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "602:     size_t local_offset = 0; \\",
          "603: \\",
          "604:     LOG_INFO( \\",
          "605:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "606:          \" at index 0x%zx\", (uintptr_t)dest,  (uintptr_t)buffer, *offset); \\",
          "607: \\",
          "608:     if (offset) { \\",
          "609:         local_offset = *offset; \\",
          "610:     } else if (!dest) { \\",
          "611:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "612:     } \\",
          "613: \\",
          "614:     ret = fn1(buffer, buffer_size, &local_offset, dest ? &dest->m1 : NULL); \\",
          "615:     if (ret != TSS2_RC_SUCCESS) \\",
          "616:         return ret; \\",
          "617: \\",
          "618:     ret = fn2(buffer, buffer_size, &local_offset, dest ? &dest->m2 : NULL); \\",
          "619:     if (ret != TSS2_RC_SUCCESS) \\",
          "620:         return ret; \\",
          "621: \\",
          "622:     ret = fn3(buffer, buffer_size, &local_offset, dest ? &dest->m3 : NULL); \\",
          "623:     if (ret != TSS2_RC_SUCCESS) \\",
          "624:         return ret; \\",
          "625: \\",
          "626:     ret = fn4(buffer, buffer_size, &local_offset, dest ? &dest->m4 : NULL); \\",
          "627:     if (ret != TSS2_RC_SUCCESS) \\",
          "628:         return ret; \\",
          "629: \\",
          "630:     ret = fn5(buffer, buffer_size, &local_offset, dest ? &dest->m5 : NULL); \\",
          "631: \\",
          "632:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "634:     } \\",
          "635:     return ret; \\",
          "636: }",
          "638: #define TPMS_MARSHAL_7(type, m1, op1, fn1, m2, op2, fn2, m3, op3, fn3, \\",
          "639:                        m4, op4, fn4, m5, op5, fn5, m6, op6, fn6, m7, op7, fn7) \\",
          "640: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "641:                                  size_t buffer_size, size_t *offset) \\",
          "642: { \\",
          "643:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "644:     size_t local_offset = 0; \\",
          "645: \\",
          "646:     if (!src) { \\",
          "647:         LOG_WARN( \"src param is NULL\"); \\",
          "648:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "649:     } \\",
          "650: \\",
          "651:     if (offset) { \\",
          "652:         local_offset = *offset; \\",
          "653:     } else if (!buffer) { \\",
          "654:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "655:     } \\",
          "656: \\",
          "657:     LOG_INFO( \\",
          "658:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "659:          \" at index 0x%zx\", (uintptr_t)&src,  (uintptr_t)buffer, *offset); \\",
          "660: \\",
          "661:     ret = fn1(op1 src->m1, buffer, buffer_size, &local_offset); \\",
          "662:     if (ret != TSS2_RC_SUCCESS) \\",
          "663:         return ret; \\",
          "664: \\",
          "665:     ret = fn2(op2 src->m2, buffer, buffer_size, &local_offset); \\",
          "666:     if (ret != TSS2_RC_SUCCESS) \\",
          "667:         return ret; \\",
          "668: \\",
          "669:     ret = fn3(op3 src->m3, buffer, buffer_size, &local_offset); \\",
          "670:     if (ret != TSS2_RC_SUCCESS) \\",
          "671:         return ret; \\",
          "672: \\",
          "673:     ret = fn4(op4 src->m4, buffer, buffer_size, &local_offset); \\",
          "674:     if (ret != TSS2_RC_SUCCESS) \\",
          "675:         return ret; \\",
          "676: \\",
          "677:     ret = fn5(op5 src->m5, buffer, buffer_size, &local_offset); \\",
          "678:     if (ret != TSS2_RC_SUCCESS) \\",
          "679:         return ret; \\",
          "680: \\",
          "681:     ret = fn6(op6 src->m6, buffer, buffer_size, &local_offset); \\",
          "682:     if (ret != TSS2_RC_SUCCESS) \\",
          "683:         return ret; \\",
          "684: \\",
          "685:     ret = fn7(op7 src->m7, buffer, buffer_size, &local_offset); \\",
          "686: \\",
          "687:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "689:     } \\",
          "690:     return ret; \\",
          "691: }",
          "693: #define TPMS_UNMARSHAL_7(type, m1, fn1, m2, fn2, m3, fn3, m4, fn4, m5, fn5, m6, fn6, m7, fn7) \\",
          "694: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "695:                                    size_t *offset, type *dest) \\",
          "696: { \\",
          "697:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "698:     size_t local_offset = 0; \\",
          "699: \\",
          "700:     LOG_INFO( \\",
          "701:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "702:          \" at index 0x%zx\", (uintptr_t)dest,  (uintptr_t)buffer, *offset); \\",
          "703: \\",
          "704:     if (offset) { \\",
          "705:         local_offset = *offset; \\",
          "706:     } else if (!dest) { \\",
          "707:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "708:     } \\",
          "709: \\",
          "710:     ret = fn1(buffer, buffer_size, &local_offset, dest ? &dest->m1 : NULL); \\",
          "711:     if (ret != TSS2_RC_SUCCESS) \\",
          "712:         return ret; \\",
          "713: \\",
          "714:     ret = fn2(buffer, buffer_size, &local_offset, dest ? &dest->m2 : NULL); \\",
          "715:     if (ret != TSS2_RC_SUCCESS) \\",
          "716:         return ret; \\",
          "717: \\",
          "718:     ret = fn3(buffer, buffer_size, &local_offset, dest ? &dest->m3 : NULL); \\",
          "719:     if (ret != TSS2_RC_SUCCESS) \\",
          "720:         return ret; \\",
          "721: \\",
          "722:     ret = fn4(buffer, buffer_size, &local_offset, dest ? &dest->m4 : NULL); \\",
          "723:     if (ret != TSS2_RC_SUCCESS) \\",
          "724:         return ret; \\",
          "725: \\",
          "726:     ret = fn5(buffer, buffer_size, &local_offset, dest ? &dest->m5 : NULL); \\",
          "727:     if (ret != TSS2_RC_SUCCESS) \\",
          "728:         return ret; \\",
          "729: \\",
          "730:     ret = fn6(buffer, buffer_size, &local_offset, dest ? &dest->m6 : NULL); \\",
          "731:     if (ret != TSS2_RC_SUCCESS) \\",
          "732:         return ret; \\",
          "733: \\",
          "734:     ret = fn7(buffer, buffer_size, &local_offset, dest ? &dest->m7 : NULL); \\",
          "735: \\",
          "736:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "738:     } \\",
          "739:     return ret; \\",
          "740: }",
          "742: #define TPMS_MARSHAL_7_U(type, m1, op1, fn1, m2, op2, fn2, m3, op3, fn3, \\",
          "743:                        m4, op4, fn4, m5, op5, fn5, m6, op6, fn6, m7, op7, fn7) \\",
          "744: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "745:                                  size_t buffer_size, size_t *offset) \\",
          "746: { \\",
          "747:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "748:     size_t local_offset = 0; \\",
          "749: \\",
          "750:     if (!src) { \\",
          "751:         LOG_WARN( \"src param is NULL\"); \\",
          "752:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "753:     } \\",
          "754: \\",
          "755:     if (offset) { \\",
          "756:         local_offset = *offset; \\",
          "757:     } else if (!buffer) { \\",
          "758:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "759:     } \\",
          "760: \\",
          "761:     LOG_INFO( \\",
          "762:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "763:          \" at index 0x%zx\", (uintptr_t)&src,  (uintptr_t)buffer, *offset); \\",
          "764: \\",
          "765:     ret = fn1(op1 src->m1, buffer, buffer_size, &local_offset); \\",
          "766:     if (ret != TSS2_RC_SUCCESS) \\",
          "767:         return ret; \\",
          "768: \\",
          "769:     ret = fn2(op2 src->m2, buffer, buffer_size, &local_offset); \\",
          "770:     if (ret != TSS2_RC_SUCCESS) \\",
          "771:         return ret; \\",
          "772: \\",
          "773:     ret = fn3(op3 src->m3, buffer, buffer_size, &local_offset); \\",
          "774:     if (ret != TSS2_RC_SUCCESS) \\",
          "775:         return ret; \\",
          "776: \\",
          "777:     ret = fn4(op4 src->m4, buffer, buffer_size, &local_offset); \\",
          "778:     if (ret != TSS2_RC_SUCCESS) \\",
          "779:         return ret; \\",
          "780: \\",
          "781:     ret = fn5(op5 src->m5, buffer, buffer_size, &local_offset); \\",
          "782:     if (ret != TSS2_RC_SUCCESS) \\",
          "783:         return ret; \\",
          "784: \\",
          "785:     ret = fn6(op6 src->m6, buffer, buffer_size, &local_offset); \\",
          "786:     if (ret != TSS2_RC_SUCCESS) \\",
          "787:         return ret; \\",
          "788: \\",
          "789:     ret = fn7(op7 src->m7, src->m2, buffer, buffer_size, &local_offset); \\",
          "790: \\",
          "791:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "793:     } \\",
          "794:     return ret; \\",
          "795: }",
          "797: #define TPMS_UNMARSHAL_7_U(type, m1, fn1, m2, fn2, m3, fn3, m4, fn4, m5, fn5, m6, fn6, m7, fn7) \\",
          "798: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "799:                                    size_t *offset, type *dest) \\",
          "800: { \\",
          "801:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "802:     size_t local_offset = 0; \\",
          "803: \\",
          "804:     LOG_INFO( \\",
          "805:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "806:          \" at index 0x%zx\", (uintptr_t)dest,  (uintptr_t)buffer, *offset); \\",
          "807: \\",
          "808:     if (offset) { \\",
          "809:         local_offset = *offset; \\",
          "810:     } else if (!dest) { \\",
          "811:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "812:     } \\",
          "813: \\",
          "814:     ret = fn1(buffer, buffer_size, &local_offset, dest ? &dest->m1 : NULL); \\",
          "815:     if (ret != TSS2_RC_SUCCESS) \\",
          "816:         return ret; \\",
          "817: \\",
          "818:     ret = fn2(buffer, buffer_size, &local_offset, dest ? &dest->m2 : NULL); \\",
          "819:     if (ret != TSS2_RC_SUCCESS) \\",
          "820:         return ret; \\",
          "821: \\",
          "822:     ret = fn3(buffer, buffer_size, &local_offset, dest ? &dest->m3 : NULL); \\",
          "823:     if (ret != TSS2_RC_SUCCESS) \\",
          "824:         return ret; \\",
          "825: \\",
          "826:     ret = fn4(buffer, buffer_size, &local_offset, dest ? &dest->m4 : NULL); \\",
          "827:     if (ret != TSS2_RC_SUCCESS) \\",
          "828:         return ret; \\",
          "829: \\",
          "830:     ret = fn5(buffer, buffer_size, &local_offset, dest ? &dest->m5 : NULL); \\",
          "831:     if (ret != TSS2_RC_SUCCESS) \\",
          "832:         return ret; \\",
          "833: \\",
          "834:     ret = fn6(buffer, buffer_size, &local_offset, dest ? &dest->m6 : NULL); \\",
          "835:     if (ret != TSS2_RC_SUCCESS) \\",
          "836:         return ret; \\",
          "837: \\",
          "838:     ret = fn7(buffer, buffer_size, &local_offset, dest ? dest->m2 : 0, dest ? &dest->m7 : NULL); \\",
          "839: \\",
          "840:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "842:     } \\",
          "843:     return ret; \\",
          "844: }",
          "846: #define TPMS_MARSHAL_11(type, m1, op1, fn1, m2, op2, fn2, m3, op3, fn3, \\",
          "847:                        m4, op4, fn4, m5, op5, fn5, m6, op6, fn6, m7, op7, fn7, \\",
          "848:                        m8, op8, fn8, m9, op9, fn9, m10, op10, fn10, m11, op11, fn11) \\",
          "849: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "850:                                  size_t buffer_size, size_t *offset) \\",
          "851: { \\",
          "852:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "853:     size_t local_offset = 0; \\",
          "854: \\",
          "855:     if (!src) { \\",
          "856:         LOG_WARN( \"src param is NULL\"); \\",
          "857:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "858:     } \\",
          "859: \\",
          "860:     if (offset) { \\",
          "861:         local_offset = *offset; \\",
          "862:     } else if (!buffer) { \\",
          "863:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "864:     } \\",
          "865: \\",
          "866:     LOG_INFO( \\",
          "867:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "868:          \" at index 0x%zx\", (uintptr_t)&src,  (uintptr_t)buffer, *offset); \\",
          "869: \\",
          "870:     ret = fn1(op1 src->m1, buffer, buffer_size, &local_offset); \\",
          "871:     if (ret != TSS2_RC_SUCCESS) \\",
          "872:         return ret; \\",
          "873: \\",
          "874:     ret = fn2(op2 src->m2, buffer, buffer_size, &local_offset); \\",
          "875:     if (ret != TSS2_RC_SUCCESS) \\",
          "876:         return ret; \\",
          "877: \\",
          "878:     ret = fn3(op3 src->m3, buffer, buffer_size, &local_offset); \\",
          "879:     if (ret != TSS2_RC_SUCCESS) \\",
          "880:         return ret; \\",
          "881: \\",
          "882:     ret = fn4(op4 src->m4, buffer, buffer_size, &local_offset); \\",
          "883:     if (ret != TSS2_RC_SUCCESS) \\",
          "884:         return ret; \\",
          "885: \\",
          "886:     ret = fn5(op5 src->m5, buffer, buffer_size, &local_offset); \\",
          "887:     if (ret != TSS2_RC_SUCCESS) \\",
          "888:         return ret; \\",
          "889: \\",
          "890:     ret = fn6(op6 src->m6, buffer, buffer_size, &local_offset); \\",
          "891:     if (ret != TSS2_RC_SUCCESS) \\",
          "892:         return ret; \\",
          "893: \\",
          "894:     ret = fn7(op7 src->m7, buffer, buffer_size, &local_offset); \\",
          "895:     if (ret != TSS2_RC_SUCCESS) \\",
          "896:         return ret; \\",
          "897: \\",
          "898:     ret = fn8(op8 src->m8, buffer, buffer_size, &local_offset); \\",
          "899:     if (ret != TSS2_RC_SUCCESS) \\",
          "900:         return ret; \\",
          "901: \\",
          "902:     ret = fn9(op9 src->m9, buffer, buffer_size, &local_offset); \\",
          "903:     if (ret != TSS2_RC_SUCCESS) \\",
          "904:         return ret; \\",
          "905: \\",
          "906:     ret = fn10(op10 src->m10, buffer, buffer_size, &local_offset); \\",
          "907:     if (ret != TSS2_RC_SUCCESS) \\",
          "908:         return ret; \\",
          "909: \\",
          "910:     ret = fn11(op11 src->m11, buffer, buffer_size, &local_offset); \\",
          "911: \\",
          "912:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "914:     } \\",
          "915:     return ret; \\",
          "916: }",
          "918: #define TPMS_UNMARSHAL_11(type, m1, fn1, m2, fn2, m3, fn3, m4, fn4, m5, fn5, m6, fn6, m7, fn7, \\",
          "919:                           m8, fn8, m9, fn9, m10, fn10, m11, fn11) \\",
          "920: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "921:                                    size_t *offset, type *dest) \\",
          "922: { \\",
          "923:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "924:     size_t local_offset = 0; \\",
          "925: \\",
          "926:     LOG_INFO( \\",
          "927:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "928:          \" at index 0x%zx\", (uintptr_t)dest,  (uintptr_t)buffer, *offset); \\",
          "929: \\",
          "930:     if (offset) { \\",
          "931:         local_offset = *offset; \\",
          "932:     } else if (!dest) { \\",
          "933:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "934:     } \\",
          "935: \\",
          "936:     ret = fn1(buffer, buffer_size, &local_offset, dest ? &dest->m1 : NULL); \\",
          "937:     if (ret != TSS2_RC_SUCCESS) \\",
          "938:         return ret; \\",
          "939: \\",
          "940:     ret = fn2(buffer, buffer_size, &local_offset, dest ? &dest->m2 : NULL); \\",
          "941:     if (ret != TSS2_RC_SUCCESS) \\",
          "942:         return ret; \\",
          "943: \\",
          "944:     ret = fn3(buffer, buffer_size, &local_offset, dest ? &dest->m3 : NULL); \\",
          "945:     if (ret != TSS2_RC_SUCCESS) \\",
          "946:         return ret; \\",
          "947: \\",
          "948:     ret = fn4(buffer, buffer_size, &local_offset, dest ? &dest->m4 : NULL); \\",
          "949:     if (ret != TSS2_RC_SUCCESS) \\",
          "950:         return ret; \\",
          "951: \\",
          "952:     ret = fn5(buffer, buffer_size, &local_offset, dest ? &dest->m5 : NULL); \\",
          "953:     if (ret != TSS2_RC_SUCCESS) \\",
          "954:         return ret; \\",
          "955: \\",
          "956:     ret = fn6(buffer, buffer_size, &local_offset, dest ? &dest->m6 : NULL); \\",
          "957:     if (ret != TSS2_RC_SUCCESS) \\",
          "958:         return ret; \\",
          "959: \\",
          "960:     ret = fn7(buffer, buffer_size, &local_offset, dest ? &dest->m7 : NULL); \\",
          "961:     if (ret != TSS2_RC_SUCCESS) \\",
          "962:         return ret; \\",
          "963: \\",
          "964:     ret = fn8(buffer, buffer_size, &local_offset, dest ? &dest->m8 : NULL); \\",
          "965:     if (ret != TSS2_RC_SUCCESS) \\",
          "966:         return ret; \\",
          "967: \\",
          "968:     ret = fn9(buffer, buffer_size, &local_offset, dest ? &dest->m9 : NULL); \\",
          "969:     if (ret != TSS2_RC_SUCCESS) \\",
          "970:         return ret; \\",
          "971: \\",
          "972:     ret = fn10(buffer, buffer_size, &local_offset, dest ? &dest->m10 : NULL); \\",
          "973:     if (ret != TSS2_RC_SUCCESS) \\",
          "974:         return ret; \\",
          "975: \\",
          "976:     ret = fn11(buffer, buffer_size, &local_offset, dest ? &dest->m11 : NULL); \\",
          "977: \\",
          "978:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "980:     } \\",
          "981:     return ret; \\",
          "982: }",
          "988: TPMS_MARSHAL_2(TPMS_ALG_PROPERTY,",
          "989:                alg, VAL, Tss2_MU_UINT16_Marshal,",
          "990:                algProperties, VAL, Tss2_MU_TPMA_ALGORITHM_Marshal)",
          "992: TPMS_UNMARSHAL_2(TPMS_ALG_PROPERTY,",
          "993:                  alg, Tss2_MU_UINT16_Unmarshal,",
          "994:                  algProperties, Tss2_MU_TPMA_ALGORITHM_Unmarshal)",
          "996: TPMS_MARSHAL_2(TPMS_ALGORITHM_DESCRIPTION,",
          "997:                alg, VAL, Tss2_MU_UINT16_Marshal,",
          "998:                attributes, VAL, Tss2_MU_TPMA_ALGORITHM_Marshal)",
          "1000: TPMS_UNMARSHAL_2(TPMS_ALGORITHM_DESCRIPTION,",
          "1001:                  alg, Tss2_MU_UINT16_Unmarshal,",
          "1002:                  attributes, Tss2_MU_TPMA_ALGORITHM_Unmarshal)",
          "1004: TPMS_MARSHAL_2(TPMS_TAGGED_PROPERTY,",
          "1005:                property, VAL, Tss2_MU_UINT32_Marshal,",
          "1006:                value, VAL, Tss2_MU_UINT32_Marshal)",
          "1008: TPMS_UNMARSHAL_2(TPMS_TAGGED_PROPERTY,",
          "1009:                  property, Tss2_MU_UINT32_Unmarshal,",
          "1010:                  value, Tss2_MU_UINT32_Unmarshal)",
          "1012: TPMS_MARSHAL_4(TPMS_CLOCK_INFO,",
          "1013:                clock, VAL, Tss2_MU_UINT64_Marshal,",
          "1014:                resetCount, VAL, Tss2_MU_UINT32_Marshal,",
          "1015:                restartCount, VAL, Tss2_MU_UINT32_Marshal,",
          "1016:                safe, VAL, Tss2_MU_UINT8_Marshal)",
          "1018: TPMS_UNMARSHAL_4(TPMS_CLOCK_INFO,",
          "1019:                  clock, Tss2_MU_UINT64_Unmarshal,",
          "1020:                  resetCount, Tss2_MU_UINT32_Unmarshal,",
          "1021:                  restartCount, Tss2_MU_UINT32_Unmarshal,",
          "1022:                  safe, Tss2_MU_UINT8_Unmarshal)",
          "1024: TPMS_MARSHAL_2(TPMS_TIME_INFO,",
          "1025:                time, VAL, Tss2_MU_UINT64_Marshal,",
          "1026:                clockInfo, ADDR, Tss2_MU_TPMS_CLOCK_INFO_Marshal)",
          "1028: TPMS_UNMARSHAL_2(TPMS_TIME_INFO,",
          "1029:                  time, Tss2_MU_UINT64_Unmarshal,",
          "1030:                  clockInfo, Tss2_MU_TPMS_CLOCK_INFO_Unmarshal)",
          "1032: TPMS_MARSHAL_2(TPMS_TIME_ATTEST_INFO,",
          "1033:                time, ADDR, Tss2_MU_TPMS_TIME_INFO_Marshal,",
          "1034:                firmwareVersion, VAL, Tss2_MU_UINT64_Marshal)",
          "1036: TPMS_UNMARSHAL_2(TPMS_TIME_ATTEST_INFO,",
          "1037:                  time, Tss2_MU_TPMS_TIME_INFO_Unmarshal,",
          "1038:                  firmwareVersion, Tss2_MU_UINT64_Unmarshal)",
          "1040: TPMS_MARSHAL_2(TPMS_CERTIFY_INFO,",
          "1041:                name, ADDR, Tss2_MU_TPM2B_NAME_Marshal,",
          "1042:                qualifiedName, ADDR, Tss2_MU_TPM2B_NAME_Marshal)",
          "1044: TPMS_UNMARSHAL_2(TPMS_CERTIFY_INFO,",
          "1045:                  name, Tss2_MU_TPM2B_NAME_Unmarshal,",
          "1046:                  qualifiedName, Tss2_MU_TPM2B_NAME_Unmarshal)",
          "1048: TPMS_MARSHAL_4(TPMS_COMMAND_AUDIT_INFO,",
          "1049:                auditCounter, VAL, Tss2_MU_UINT64_Marshal,",
          "1050:                digestAlg, VAL, Tss2_MU_UINT16_Marshal,",
          "1051:                auditDigest, ADDR, Tss2_MU_TPM2B_DIGEST_Marshal,",
          "1052:                commandDigest, ADDR, Tss2_MU_TPM2B_DIGEST_Marshal)",
          "1054: TPMS_UNMARSHAL_4(TPMS_COMMAND_AUDIT_INFO,",
          "1055:                  auditCounter, Tss2_MU_UINT64_Unmarshal,",
          "1056:                  digestAlg, Tss2_MU_UINT16_Unmarshal,",
          "1057:                  auditDigest, Tss2_MU_TPM2B_DIGEST_Unmarshal,",
          "1058:                  commandDigest, Tss2_MU_TPM2B_DIGEST_Unmarshal)",
          "1060: TPMS_MARSHAL_2(TPMS_SESSION_AUDIT_INFO,",
          "1061:                exclusiveSession, VAL, Tss2_MU_UINT8_Marshal,",
          "1062:                sessionDigest, ADDR, Tss2_MU_TPM2B_DIGEST_Marshal)",
          "1064: TPMS_UNMARSHAL_2(TPMS_SESSION_AUDIT_INFO,",
          "1065:                  exclusiveSession, Tss2_MU_UINT8_Unmarshal,",
          "1066:                  sessionDigest, Tss2_MU_TPM2B_DIGEST_Unmarshal)",
          "1068: TPMS_MARSHAL_2(TPMS_CREATION_INFO,",
          "1069:                objectName, ADDR, Tss2_MU_TPM2B_NAME_Marshal,",
          "1070:                creationHash, ADDR, Tss2_MU_TPM2B_DIGEST_Marshal)",
          "1072: TPMS_UNMARSHAL_2(TPMS_CREATION_INFO,",
          "1073:                  objectName, Tss2_MU_TPM2B_NAME_Unmarshal,",
          "1074:                  creationHash, Tss2_MU_TPM2B_DIGEST_Unmarshal)",
          "1076: TPMS_MARSHAL_3(TPMS_NV_CERTIFY_INFO,",
          "1077:                indexName, ADDR, Tss2_MU_TPM2B_NAME_Marshal,",
          "1078:                offset, VAL, Tss2_MU_UINT16_Marshal,",
          "1079:                nvContents, ADDR, Tss2_MU_TPM2B_MAX_NV_BUFFER_Marshal)",
          "1081: TPMS_UNMARSHAL_3(TPMS_NV_CERTIFY_INFO,",
          "1082:                  indexName, Tss2_MU_TPM2B_NAME_Unmarshal,",
          "1083:                  offset, Tss2_MU_UINT16_Unmarshal,",
          "1084:                  nvContents, Tss2_MU_TPM2B_MAX_NV_BUFFER_Unmarshal)",
          "1086: TPMS_MARSHAL_4(TPMS_AUTH_COMMAND,",
          "1087:                sessionHandle, VAL, Tss2_MU_UINT32_Marshal,",
          "1088:                nonce, ADDR, Tss2_MU_TPM2B_DIGEST_Marshal,",
          "1089:                sessionAttributes, VAL, Tss2_MU_TPMA_SESSION_Marshal,",
          "1090:                hmac, ADDR, Tss2_MU_TPM2B_DIGEST_Marshal)",
          "1092: TPMS_UNMARSHAL_4(TPMS_AUTH_COMMAND,",
          "1093:                  sessionHandle, Tss2_MU_UINT32_Unmarshal,",
          "1094:                  nonce, Tss2_MU_TPM2B_DIGEST_Unmarshal,",
          "1095:                  sessionAttributes, Tss2_MU_TPMA_SESSION_Unmarshal,",
          "1096:                  hmac, Tss2_MU_TPM2B_DIGEST_Unmarshal)",
          "1098: TPMS_MARSHAL_3(TPMS_AUTH_RESPONSE,",
          "1099:                nonce, ADDR, Tss2_MU_TPM2B_DIGEST_Marshal,",
          "1100:                sessionAttributes, VAL, Tss2_MU_TPMA_SESSION_Marshal,",
          "1101:                hmac, ADDR, Tss2_MU_TPM2B_DIGEST_Marshal)",
          "1103: TPMS_UNMARSHAL_3(TPMS_AUTH_RESPONSE,",
          "1104:                  nonce, Tss2_MU_TPM2B_DIGEST_Unmarshal,",
          "1105:                  sessionAttributes, Tss2_MU_TPMA_SESSION_Unmarshal,",
          "1106:                  hmac, Tss2_MU_TPM2B_DIGEST_Unmarshal)",
          "1108: TPMS_MARSHAL_2(TPMS_SENSITIVE_CREATE,",
          "1109:                userAuth, ADDR, Tss2_MU_TPM2B_DIGEST_Marshal,",
          "1110:                data, ADDR, Tss2_MU_TPM2B_SENSITIVE_DATA_Marshal)",
          "1112: TPMS_UNMARSHAL_2(TPMS_SENSITIVE_CREATE,",
          "1113:                  userAuth, Tss2_MU_TPM2B_DIGEST_Unmarshal,",
          "1114:                  data, Tss2_MU_TPM2B_SENSITIVE_DATA_Unmarshal)",
          "1116: TPMS_MARSHAL_1(TPMS_SCHEME_HASH,",
          "1117:                hashAlg, VAL, Tss2_MU_UINT16_Marshal)",
          "1119: TPMS_UNMARSHAL_1(TPMS_SCHEME_HASH,",
          "1120:                  hashAlg, Tss2_MU_UINT16_Unmarshal)",
          "1122: TPMS_MARSHAL_2(TPMS_SCHEME_ECDAA,",
          "1123:                hashAlg, VAL, Tss2_MU_UINT16_Marshal,",
          "1124:                count, VAL, Tss2_MU_UINT16_Marshal)",
          "1126: TPMS_UNMARSHAL_2(TPMS_SCHEME_ECDAA,",
          "1127:                  hashAlg, Tss2_MU_UINT16_Unmarshal,",
          "1128:                  count, Tss2_MU_UINT16_Unmarshal)",
          "1130: TPMS_MARSHAL_2(TPMS_SCHEME_XOR,",
          "1131:                hashAlg, VAL, Tss2_MU_UINT16_Marshal,",
          "1132:                kdf, VAL, Tss2_MU_UINT16_Marshal)",
          "1134: TPMS_UNMARSHAL_2(TPMS_SCHEME_XOR,",
          "1135:                  hashAlg, Tss2_MU_UINT16_Unmarshal,",
          "1136:                  kdf, Tss2_MU_UINT16_Unmarshal)",
          "1138: TPMS_MARSHAL_2(TPMS_ECC_POINT,",
          "1139:                x, ADDR, Tss2_MU_TPM2B_ECC_PARAMETER_Marshal,",
          "1140:                y, ADDR, Tss2_MU_TPM2B_ECC_PARAMETER_Marshal)",
          "1142: TPMS_UNMARSHAL_2(TPMS_ECC_POINT,",
          "1143:                  x, Tss2_MU_TPM2B_ECC_PARAMETER_Unmarshal,",
          "1144:                  y, Tss2_MU_TPM2B_ECC_PARAMETER_Unmarshal)",
          "1146: TPMS_MARSHAL_2(TPMS_SIGNATURE_RSA,",
          "1147:                hash, VAL, Tss2_MU_UINT16_Marshal,",
          "1148:                sig, ADDR, Tss2_MU_TPM2B_PUBLIC_KEY_RSA_Marshal)",
          "1150: TPMS_UNMARSHAL_2(TPMS_SIGNATURE_RSA,",
          "1151:                  hash, Tss2_MU_UINT16_Unmarshal,",
          "1152:                  sig, Tss2_MU_TPM2B_PUBLIC_KEY_RSA_Unmarshal)",
          "1154: TPMS_MARSHAL_3(TPMS_SIGNATURE_ECC,",
          "1155:                hash, VAL, Tss2_MU_UINT16_Marshal,",
          "1156:                signatureR, ADDR, Tss2_MU_TPM2B_ECC_PARAMETER_Marshal,",
          "1157:                signatureS, ADDR, Tss2_MU_TPM2B_ECC_PARAMETER_Marshal)",
          "1159: TPMS_UNMARSHAL_3(TPMS_SIGNATURE_ECC,",
          "1160:                  hash, Tss2_MU_UINT16_Unmarshal,",
          "1161:                  signatureR, Tss2_MU_TPM2B_ECC_PARAMETER_Unmarshal,",
          "1162:                  signatureS, Tss2_MU_TPM2B_ECC_PARAMETER_Unmarshal)",
          "1164: TPMS_MARSHAL_2(TPMS_NV_PIN_COUNTER_PARAMETERS,",
          "1165:                pinCount, VAL, Tss2_MU_UINT32_Marshal,",
          "1166:                pinLimit, VAL, Tss2_MU_UINT32_Marshal)",
          "1168: TPMS_UNMARSHAL_2(TPMS_NV_PIN_COUNTER_PARAMETERS,",
          "1169:                  pinCount, Tss2_MU_UINT32_Unmarshal,",
          "1170:                  pinLimit, Tss2_MU_UINT32_Unmarshal)",
          "1172: TPMS_MARSHAL_5(TPMS_NV_PUBLIC,",
          "1173:                nvIndex, VAL, Tss2_MU_UINT32_Marshal,",
          "1174:                nameAlg, VAL, Tss2_MU_UINT16_Marshal,",
          "1175:                attributes, VAL, Tss2_MU_TPMA_NV_Marshal,",
          "1176:                authPolicy, ADDR, Tss2_MU_TPM2B_DIGEST_Marshal,",
          "1177:                dataSize, VAL, Tss2_MU_UINT16_Marshal)",
          "1179: TPMS_UNMARSHAL_5(TPMS_NV_PUBLIC,",
          "1180:                  nvIndex, Tss2_MU_UINT32_Unmarshal,",
          "1181:                  nameAlg, Tss2_MU_UINT16_Unmarshal,",
          "1182:                  attributes, Tss2_MU_TPMA_NV_Unmarshal,",
          "1183:                  authPolicy, Tss2_MU_TPM2B_DIGEST_Unmarshal,",
          "1184:                  dataSize, Tss2_MU_UINT16_Unmarshal)",
          "1186: TPMS_MARSHAL_2(TPMS_CONTEXT_DATA,",
          "1187:                integrity, ADDR, Tss2_MU_TPM2B_DIGEST_Marshal,",
          "1188:                encrypted, ADDR, Tss2_MU_TPM2B_CONTEXT_SENSITIVE_Marshal)",
          "1190: TPMS_UNMARSHAL_2(TPMS_CONTEXT_DATA,",
          "1191:                  integrity, Tss2_MU_TPM2B_DIGEST_Unmarshal,",
          "1192:                  encrypted, Tss2_MU_TPM2B_CONTEXT_SENSITIVE_Unmarshal)",
          "1194: TPMS_MARSHAL_4(TPMS_CONTEXT,",
          "1195:                sequence, VAL, Tss2_MU_UINT64_Marshal,",
          "1196:                savedHandle, VAL, Tss2_MU_UINT32_Marshal,",
          "1197:                hierarchy, VAL, Tss2_MU_UINT32_Marshal,",
          "1198:                contextBlob, ADDR, Tss2_MU_TPM2B_CONTEXT_DATA_Marshal)",
          "1200: TPMS_UNMARSHAL_4(TPMS_CONTEXT,",
          "1201:                  sequence, Tss2_MU_UINT64_Unmarshal,",
          "1202:                  savedHandle, Tss2_MU_UINT32_Unmarshal,",
          "1203:                  hierarchy, Tss2_MU_UINT32_Unmarshal,",
          "1204:                  contextBlob, Tss2_MU_TPM2B_CONTEXT_DATA_Unmarshal)",
          "1206: TPMS_MARSHAL_1(TPMS_PCR_SELECT,",
          "1207:                sizeofSelect, ADDR, marshal_pcr_select)",
          "1209: TPMS_UNMARSHAL_1(TPMS_PCR_SELECT,",
          "1210:                  sizeofSelect, unmarshal_pcr_select)",
          "1212: TPMS_MARSHAL_1(TPMS_PCR_SELECTION,",
          "1213:                hash, ADDR, marshal_pcr_selection)",
          "1215: TPMS_UNMARSHAL_1(TPMS_PCR_SELECTION,",
          "1216:                  hash, unmarshal_pcr_selection)",
          "1218: TPMS_MARSHAL_1(TPMS_TAGGED_PCR_SELECT,",
          "1219:                tag, ADDR, marshal_tagged_pcr_selection)",
          "1221: TPMS_UNMARSHAL_1(TPMS_TAGGED_PCR_SELECT,",
          "1222:                  tag, unmarshal_tagged_pcr_selection)",
          "1224: TPMS_MARSHAL_2(TPMS_QUOTE_INFO,",
          "1225:                pcrSelect, ADDR, Tss2_MU_TPML_PCR_SELECTION_Marshal,",
          "1226:                pcrDigest, ADDR, Tss2_MU_TPM2B_DIGEST_Marshal)",
          "1228: TPMS_UNMARSHAL_2(TPMS_QUOTE_INFO,",
          "1229:                  pcrSelect, Tss2_MU_TPML_PCR_SELECTION_Unmarshal,",
          "1230:                  pcrDigest, Tss2_MU_TPM2B_DIGEST_Unmarshal)",
          "1232: TPMS_MARSHAL_7(TPMS_CREATION_DATA,",
          "1233:                pcrSelect, ADDR, Tss2_MU_TPML_PCR_SELECTION_Marshal,",
          "1234:                pcrDigest, ADDR, Tss2_MU_TPM2B_DIGEST_Marshal,",
          "1235:                locality, VAL, Tss2_MU_TPMA_LOCALITY_Marshal,",
          "1236:                parentNameAlg, VAL, Tss2_MU_UINT16_Marshal,",
          "1237:                parentName, ADDR, Tss2_MU_TPM2B_NAME_Marshal,",
          "1238:                parentQualifiedName, ADDR, Tss2_MU_TPM2B_NAME_Marshal,",
          "1239:                outsideInfo, ADDR, Tss2_MU_TPM2B_DATA_Marshal)",
          "1241: TPMS_UNMARSHAL_7(TPMS_CREATION_DATA,",
          "1242:                  pcrSelect, Tss2_MU_TPML_PCR_SELECTION_Unmarshal,",
          "1243:                  pcrDigest, Tss2_MU_TPM2B_DIGEST_Unmarshal,",
          "1244:                  locality, Tss2_MU_TPMA_LOCALITY_Unmarshal,",
          "1245:                  parentNameAlg, Tss2_MU_UINT16_Unmarshal,",
          "1246:                  parentName, Tss2_MU_TPM2B_NAME_Unmarshal,",
          "1247:                  parentQualifiedName, Tss2_MU_TPM2B_NAME_Unmarshal,",
          "1248:                  outsideInfo, Tss2_MU_TPM2B_DATA_Unmarshal)",
          "1250: TPMS_MARSHAL_4(TPMS_ECC_PARMS,",
          "1251:                symmetric, ADDR, Tss2_MU_TPMT_SYM_DEF_OBJECT_Marshal,",
          "1252:                scheme, ADDR, Tss2_MU_TPMT_ECC_SCHEME_Marshal,",
          "1253:                curveID, VAL, Tss2_MU_UINT16_Marshal,",
          "1254:                kdf, ADDR, Tss2_MU_TPMT_KDF_SCHEME_Marshal)",
          "1256: TPMS_UNMARSHAL_4(TPMS_ECC_PARMS,",
          "1257:                  symmetric, Tss2_MU_TPMT_SYM_DEF_OBJECT_Unmarshal,",
          "1258:                  scheme, Tss2_MU_TPMT_ECC_SCHEME_Unmarshal,",
          "1259:                  curveID, Tss2_MU_UINT16_Unmarshal,",
          "1260:                  kdf, Tss2_MU_TPMT_KDF_SCHEME_Unmarshal)",
          "1262: TPMS_MARSHAL_7_U(TPMS_ATTEST,",
          "1263:                  magic, VAL, Tss2_MU_UINT32_Marshal,",
          "1264:                  type, VAL, Tss2_MU_TPM_ST_Marshal,",
          "1265:                  qualifiedSigner, ADDR, Tss2_MU_TPM2B_NAME_Marshal,",
          "1266:                  extraData, ADDR, Tss2_MU_TPM2B_DATA_Marshal,",
          "1267:                  clockInfo, ADDR, Tss2_MU_TPMS_CLOCK_INFO_Marshal,",
          "1268:                  firmwareVersion, VAL, Tss2_MU_UINT64_Marshal,",
          "1269:                  attested, ADDR, Tss2_MU_TPMU_ATTEST_Marshal)",
          "1271: TPMS_UNMARSHAL_7_U(TPMS_ATTEST,",
          "1272:                    magic, Tss2_MU_UINT32_Unmarshal,",
          "1273:                    type, Tss2_MU_TPM_ST_Unmarshal,",
          "1274:                    qualifiedSigner, Tss2_MU_TPM2B_NAME_Unmarshal,",
          "1275:                    extraData, Tss2_MU_TPM2B_DATA_Unmarshal,",
          "1276:                    clockInfo, Tss2_MU_TPMS_CLOCK_INFO_Unmarshal,",
          "1277:                    firmwareVersion, Tss2_MU_UINT64_Unmarshal,",
          "1278:                    attested, Tss2_MU_TPMU_ATTEST_Unmarshal)",
          "1280: TPMS_MARSHAL_11(TPMS_ALGORITHM_DETAIL_ECC,",
          "1281:                 curveID, VAL, Tss2_MU_UINT16_Marshal,",
          "1282:                 keySize, VAL, Tss2_MU_UINT16_Marshal,",
          "1283:                 kdf, ADDR, Tss2_MU_TPMT_KDF_SCHEME_Marshal,",
          "1284:                 sign, ADDR, Tss2_MU_TPMT_ECC_SCHEME_Marshal,",
          "1285:                 p, ADDR, Tss2_MU_TPM2B_ECC_PARAMETER_Marshal,",
          "1286:                 a, ADDR, Tss2_MU_TPM2B_ECC_PARAMETER_Marshal,",
          "1287:                 b, ADDR, Tss2_MU_TPM2B_ECC_PARAMETER_Marshal,",
          "1288:                 gX, ADDR, Tss2_MU_TPM2B_ECC_PARAMETER_Marshal,",
          "1289:                 gY, ADDR, Tss2_MU_TPM2B_ECC_PARAMETER_Marshal,",
          "1290:                 n, ADDR, Tss2_MU_TPM2B_ECC_PARAMETER_Marshal,",
          "1291:                 h, ADDR, Tss2_MU_TPM2B_ECC_PARAMETER_Marshal)",
          "1293: TPMS_UNMARSHAL_11(TPMS_ALGORITHM_DETAIL_ECC,",
          "1294:                   curveID, Tss2_MU_UINT16_Unmarshal,",
          "1295:                   keySize, Tss2_MU_UINT16_Unmarshal,",
          "1296:                   kdf, Tss2_MU_TPMT_KDF_SCHEME_Unmarshal,",
          "1297:                   sign, Tss2_MU_TPMT_ECC_SCHEME_Unmarshal,",
          "1298:                   p, Tss2_MU_TPM2B_ECC_PARAMETER_Unmarshal,",
          "1299:                   a, Tss2_MU_TPM2B_ECC_PARAMETER_Unmarshal,",
          "1300:                   b, Tss2_MU_TPM2B_ECC_PARAMETER_Unmarshal,",
          "1301:                   gX, Tss2_MU_TPM2B_ECC_PARAMETER_Unmarshal,",
          "1302:                   gY, Tss2_MU_TPM2B_ECC_PARAMETER_Unmarshal,",
          "1303:                   n, Tss2_MU_TPM2B_ECC_PARAMETER_Unmarshal,",
          "1304:                   h, Tss2_MU_TPM2B_ECC_PARAMETER_Unmarshal)",
          "1306: TPMS_MARSHAL_2_U(TPMS_CAPABILITY_DATA,",
          "1307:                  capability, VAL, Tss2_MU_UINT32_Marshal,",
          "1308:                  data, ADDR, Tss2_MU_TPMU_CAPABILITIES_Marshal)",
          "1310: TPMS_UNMARSHAL_2_U(TPMS_CAPABILITY_DATA,",
          "1311:                    capability, Tss2_MU_UINT32_Unmarshal,",
          "1312:                    data, Tss2_MU_TPMU_CAPABILITIES_Unmarshal)",
          "1314: TPMS_MARSHAL_1(TPMS_KEYEDHASH_PARMS,",
          "1315:                scheme, ADDR, Tss2_MU_TPMT_KEYEDHASH_SCHEME_Marshal)",
          "1317: TPMS_UNMARSHAL_1(TPMS_KEYEDHASH_PARMS,",
          "1318:                  scheme, Tss2_MU_TPMT_KEYEDHASH_SCHEME_Unmarshal)",
          "1320: TPMS_MARSHAL_4(TPMS_RSA_PARMS,",
          "1321:                symmetric, ADDR, Tss2_MU_TPMT_SYM_DEF_OBJECT_Marshal,",
          "1322:                scheme, ADDR, Tss2_MU_TPMT_RSA_SCHEME_Marshal,",
          "1323:                keyBits, VAL, Tss2_MU_UINT16_Marshal,",
          "1324:                exponent, VAL, Tss2_MU_UINT32_Marshal)",
          "1326: TPMS_UNMARSHAL_4(TPMS_RSA_PARMS,",
          "1327:                  symmetric, Tss2_MU_TPMT_SYM_DEF_OBJECT_Unmarshal,",
          "1328:                  scheme, Tss2_MU_TPMT_RSA_SCHEME_Unmarshal,",
          "1329:                  keyBits, Tss2_MU_UINT16_Unmarshal,",
          "1330:                  exponent, Tss2_MU_UINT32_Unmarshal)",
          "1332: TPMS_MARSHAL_1(TPMS_SYMCIPHER_PARMS,",
          "1333:                sym, ADDR, Tss2_MU_TPMT_SYM_DEF_OBJECT_Marshal)",
          "1335: TPMS_UNMARSHAL_1(TPMS_SYMCIPHER_PARMS,",
          "1336:                  sym, Tss2_MU_TPMT_SYM_DEF_OBJECT_Unmarshal)",
          "",
          "---------------"
        ],
        "lib/tpmt-types.c||lib/tpmt-types.c": [
          "File: lib/tpmt-types.c -> lib/tpmt-types.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <inttypes.h>",
          "30: #include <string.h>",
          "32: #include \"tss2_mu.h\"",
          "33: #include \"sapi/tpm20.h\"",
          "34: #include \"tss2_endian.h\"",
          "35: #include \"log.h\"",
          "37: #define ADDR &",
          "38: #define VAL",
          "40: #define TPMT_MARSHAL_2(type, m1, op1, fn1, m2, op2, sel, fn2) \\",
          "41: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "42:                                  size_t buffer_size, size_t *offset) \\",
          "43: { \\",
          "44:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "45:     size_t local_offset = 0; \\",
          "46: \\",
          "47:     if (!src) \\",
          "48:         return TSS2_SYS_RC_BAD_REFERENCE; \\",
          "49: \\",
          "50:     if (offset) \\",
          "51:         local_offset = *offset; \\",
          "52:     else if (!buffer) \\",
          "53:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "54: \\",
          "55:     LOG_INFO( \\",
          "56:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "57:          \" at index 0x%zx\", (uintptr_t)src,  (uintptr_t)buffer, local_offset); \\",
          "58: \\",
          "59:     ret = fn1(op1 src->m1, buffer, buffer_size, &local_offset); \\",
          "60:     if (ret != TSS2_RC_SUCCESS) \\",
          "61:         return ret; \\",
          "62: \\",
          "63:     ret = fn2(op2 src->m2, src->sel, buffer, buffer_size, &local_offset); \\",
          "64: \\",
          "65:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "67:     } \\",
          "68: \\",
          "69:     return ret; \\",
          "70: }",
          "72: #define TPMT_UNMARSHAL_2(type, m1, fn1, m2, sel, fn2) \\",
          "73: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "74:                                    size_t *offset, type *dest) \\",
          "75: { \\",
          "76:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "77:     size_t local_offset = 0; \\",
          "78:     type tmp = {0}; \\",
          "79: \\",
          "80:     if (offset) \\",
          "81:         local_offset = *offset; \\",
          "82:     else if (!dest) \\",
          "83:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "84: \\",
          "85:     LOG_INFO( \\",
          "86:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "87:          \" at index 0x%zx\", (uintptr_t)dest,  (uintptr_t)buffer, local_offset); \\",
          "88: \\",
          "89:     ret = fn1(buffer, buffer_size, &local_offset, dest ? &dest->m1 : &tmp.m1); \\",
          "90:     if (ret != TSS2_RC_SUCCESS) \\",
          "91:         return ret; \\",
          "92: \\",
          "93:     ret = fn2(buffer, buffer_size, &local_offset, dest ? dest->sel : tmp.sel, dest ? &dest->m2 : NULL); \\",
          "94: \\",
          "95:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "97:     } \\",
          "98: \\",
          "99:     return ret; \\",
          "100: }",
          "102: #define TPMT_MARSHAL_3(type, m1, op1, fn1, m2, op2, sel2, fn2, m3, op3, sel3, fn3) \\",
          "103: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "104:                                  size_t buffer_size, size_t *offset) \\",
          "105: { \\",
          "106:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "107:     size_t local_offset = 0; \\",
          "108: \\",
          "109:     if (!src) \\",
          "110:         return TSS2_SYS_RC_BAD_REFERENCE; \\",
          "111: \\",
          "112:     if (offset) \\",
          "113:         local_offset = *offset; \\",
          "114:     else if (!buffer) \\",
          "115:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "116: \\",
          "117:     LOG_INFO( \\",
          "118:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "119:          \" at index 0x%zx\", (uintptr_t)src,  (uintptr_t)buffer, local_offset); \\",
          "120: \\",
          "121:     ret = fn1(op1 src->m1, buffer, buffer_size, &local_offset); \\",
          "122:     if (ret != TSS2_RC_SUCCESS) \\",
          "123:         return ret; \\",
          "124: \\",
          "125:     ret = fn2(op2 src->m2, src->sel2, buffer, buffer_size, &local_offset); \\",
          "126:     if (ret != TSS2_RC_SUCCESS) \\",
          "127:         return ret; \\",
          "128: \\",
          "129:     ret = fn3(op3 src->m3, src->sel3, buffer, buffer_size, &local_offset); \\",
          "130: \\",
          "131:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "133:     } \\",
          "134: \\",
          "135:     return ret; \\",
          "136: }",
          "138: #define TPMT_UNMARSHAL_3(type, m1, fn1, m2, sel2, fn2, m3, sel3, fn3) \\",
          "139: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "140:                                    size_t *offset, type *dest) \\",
          "141: { \\",
          "142:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "143:     size_t local_offset = 0; \\",
          "144:     type tmp = {0}; \\",
          "145: \\",
          "146:     if (offset) \\",
          "147:         local_offset = *offset; \\",
          "148:     else if (!dest) \\",
          "149:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "150: \\",
          "151:     LOG_INFO( \\",
          "152:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "153:          \" at index 0x%zx\", (uintptr_t)dest,  (uintptr_t)buffer, local_offset); \\",
          "154: \\",
          "155:     ret = fn1(buffer, buffer_size, &local_offset, dest ? &dest->m1 : &tmp.m1); \\",
          "156:     if (ret != TSS2_RC_SUCCESS) \\",
          "157:         return ret; \\",
          "158: \\",
          "159:     ret = fn2(buffer, buffer_size, &local_offset, dest ? dest->sel2 : tmp.sel2, dest ? &dest->m2 : NULL); \\",
          "160:     if (ret != TSS2_RC_SUCCESS) \\",
          "161:         return ret; \\",
          "162: \\",
          "163:     ret = fn3(buffer, buffer_size, &local_offset, dest ? dest->sel3 : tmp.sel3, dest ? &dest->m3 : NULL); \\",
          "164: \\",
          "165:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "167:     } \\",
          "168: \\",
          "169:     return ret; \\",
          "170: }",
          "172: #define TPMT_MARSHAL_TK(type, m1, fn1, m2, fn2, m3, fn3) \\",
          "173: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "174:                                  size_t buffer_size, size_t *offset) \\",
          "175: { \\",
          "176:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "177:     size_t local_offset = 0; \\",
          "178: \\",
          "179:     if (!src) \\",
          "180:         return TSS2_SYS_RC_BAD_REFERENCE; \\",
          "181: \\",
          "182:     if (offset) \\",
          "183:         local_offset = *offset; \\",
          "184:     else if (!buffer) \\",
          "185:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "186: \\",
          "187:     LOG_INFO( \\",
          "188:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "189:          \" at index 0x%zx\", (uintptr_t)src,  (uintptr_t)buffer, local_offset); \\",
          "190: \\",
          "191:     ret = fn1(src->m1, buffer, buffer_size, &local_offset); \\",
          "192:     if (ret != TSS2_RC_SUCCESS) \\",
          "193:         return ret; \\",
          "194: \\",
          "195:     ret = fn2(src->m2, buffer, buffer_size, &local_offset); \\",
          "196:     if (ret != TSS2_RC_SUCCESS) \\",
          "197:         return ret; \\",
          "198: \\",
          "199:     ret = fn3(&src->m3, buffer, buffer_size, &local_offset); \\",
          "200: \\",
          "201:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "203:     } \\",
          "204: \\",
          "205:     return ret; \\",
          "206: }",
          "208: #define TPMT_UNMARSHAL_TK(type, m1, fn1, m2, fn2, m3, fn3) \\",
          "209: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "210:                                    size_t *offset, type *dest) \\",
          "211: { \\",
          "212:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "213:     size_t local_offset = 0; \\",
          "214: \\",
          "215:     if (offset) \\",
          "216:         local_offset = *offset; \\",
          "217:     else if (!dest) \\",
          "218:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "219: \\",
          "220:     LOG_INFO( \\",
          "221:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "222:          \" at index 0x%zx\", (uintptr_t)dest,  (uintptr_t)buffer, local_offset); \\",
          "223: \\",
          "224:     ret = fn1(buffer, buffer_size, &local_offset, dest ? &dest->m1 : NULL); \\",
          "225:     if (ret != TSS2_RC_SUCCESS) \\",
          "226:         return ret; \\",
          "227: \\",
          "228:     ret = fn2(buffer, buffer_size, &local_offset, dest ? &dest->m2 : NULL); \\",
          "229:     if (ret != TSS2_RC_SUCCESS) \\",
          "230:         return ret; \\",
          "231: \\",
          "232:     ret = fn3(buffer, buffer_size, &local_offset, dest ? &dest->m3 : NULL); \\",
          "233: \\",
          "234:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "236:     } \\",
          "237: \\",
          "238:     return ret; \\",
          "239: }",
          "241: #define TPMT_MARSHAL_4(type, m1, op1, fn1, m2, op2, fn2, m3, op3, fn3, \\",
          "242:                        m4, sel4, op4, fn4) \\",
          "243: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "244:                                  size_t buffer_size, size_t *offset) \\",
          "245: { \\",
          "246:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "247:     size_t local_offset = 0; \\",
          "248: \\",
          "249:     if (!src) \\",
          "250:         return TSS2_SYS_RC_BAD_REFERENCE; \\",
          "251: \\",
          "252:     if (offset) \\",
          "253:         local_offset = *offset; \\",
          "254:     else if (!buffer) \\",
          "255:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "256: \\",
          "257:     LOG_INFO( \\",
          "258:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "259:          \" at index 0x%zx\", (uintptr_t)src,  (uintptr_t)buffer, local_offset); \\",
          "260: \\",
          "261:     ret = fn1(op1 src->m1, buffer, buffer_size, &local_offset); \\",
          "262:     if (ret != TSS2_RC_SUCCESS) \\",
          "263:         return ret; \\",
          "264: \\",
          "265:     ret = fn2(op2 src->m2, buffer, buffer_size, &local_offset); \\",
          "266:     if (ret != TSS2_RC_SUCCESS) \\",
          "267:         return ret; \\",
          "268: \\",
          "269:     ret = fn3(op3 src->m3, buffer, buffer_size, &local_offset); \\",
          "270:     if (ret != TSS2_RC_SUCCESS) \\",
          "271:         return ret; \\",
          "272: \\",
          "273:     ret = fn4(op4 src->m4, src->sel4, buffer, buffer_size, &local_offset); \\",
          "274: \\",
          "275:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "277:     } \\",
          "278: \\",
          "279:     return ret; \\",
          "280: }",
          "282: #define TPMT_UNMARSHAL_4(type, m1, fn1, m2, fn2, m3, fn3, m4, sel4, fn4) \\",
          "283: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "284:                                    size_t *offset, type *dest) \\",
          "285: { \\",
          "286:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "287:     size_t local_offset = 0; \\",
          "288:     type tmp = {0}; \\",
          "289: \\",
          "290:     if (offset) \\",
          "291:         local_offset = *offset; \\",
          "292:     else if (!dest) \\",
          "293:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "294: \\",
          "295:     LOG_INFO( \\",
          "296:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "297:          \" at index 0x%zx\", (uintptr_t)dest,  (uintptr_t)buffer, local_offset); \\",
          "298: \\",
          "299:     ret = fn1(buffer, buffer_size, &local_offset, dest ? &dest->m1 : &tmp.m1); \\",
          "300:     if (ret != TSS2_RC_SUCCESS) \\",
          "301:         return ret; \\",
          "302: \\",
          "303:     ret = fn2(buffer, buffer_size, &local_offset, dest ? &dest->m2 : &tmp.m2); \\",
          "304:     if (ret != TSS2_RC_SUCCESS) \\",
          "305:         return ret; \\",
          "306: \\",
          "307:     ret = fn3(buffer, buffer_size, &local_offset, dest ? &dest->m3 : &tmp.m3); \\",
          "308:     if (ret != TSS2_RC_SUCCESS) \\",
          "309:         return ret; \\",
          "310: \\",
          "311:     ret = fn4(buffer, buffer_size, &local_offset, dest ? dest->sel4 : tmp.sel4, dest ? &dest->m4 : NULL); \\",
          "312: \\",
          "313:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "315:     } \\",
          "316: \\",
          "317:     return ret; \\",
          "318: }",
          "320: #define TPMT_MARSHAL_5(type, m1, op1, fn1, m2, op2, fn2, m3, op3, fn3, \\",
          "321:                        m4, op4, fn4, m5, op5, fn5) \\",
          "322: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "323:                                  size_t buffer_size, size_t *offset) \\",
          "324: { \\",
          "325:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "326:     size_t local_offset = 0; \\",
          "327: \\",
          "328:     if (!src) \\",
          "329:         return TSS2_SYS_RC_BAD_REFERENCE; \\",
          "330: \\",
          "331:     if (offset) \\",
          "332:         local_offset = *offset; \\",
          "333:     else if (!buffer) \\",
          "334:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "335: \\",
          "336:     LOG_INFO( \\",
          "337:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "338:          \" at index 0x%zx\", (uintptr_t)src,  (uintptr_t)buffer, local_offset); \\",
          "339: \\",
          "340:     ret = fn1(op1 src->m1, buffer, buffer_size, &local_offset); \\",
          "341:     if (ret != TSS2_RC_SUCCESS) \\",
          "342:         return ret; \\",
          "343: \\",
          "344:     ret = fn2(op2 src->m2, buffer, buffer_size, &local_offset); \\",
          "345:     if (ret != TSS2_RC_SUCCESS) \\",
          "346:         return ret; \\",
          "347: \\",
          "348:     ret = fn3(op3 src->m3, buffer, buffer_size, &local_offset); \\",
          "349:     if (ret != TSS2_RC_SUCCESS) \\",
          "350:         return ret; \\",
          "351: \\",
          "352:     ret = fn4(op4 src->m4, buffer, buffer_size, &local_offset); \\",
          "353:     if (ret != TSS2_RC_SUCCESS) \\",
          "354:         return ret; \\",
          "355: \\",
          "356:     ret = fn5(op5 src->m5, buffer, buffer_size, &local_offset); \\",
          "357: \\",
          "358:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "360:     } \\",
          "361: \\",
          "362:     return ret; \\",
          "363: }",
          "365: #define TPMT_UNMARSHAL_5(type, m1, fn1, m2, fn2, m3, fn3, m4, fn4, m5, fn5) \\",
          "366: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "367:                                    size_t *offset, type *dest) \\",
          "368: { \\",
          "369:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "370:     size_t local_offset = 0; \\",
          "371: \\",
          "372:     if (offset) \\",
          "373:         local_offset = *offset; \\",
          "374:     else if (!dest) \\",
          "375:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "376: \\",
          "377:     LOG_INFO( \\",
          "378:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "379:          \" at index 0x%zx\", (uintptr_t)dest,  (uintptr_t)buffer, local_offset); \\",
          "380: \\",
          "381:     ret = fn1(buffer, buffer_size, &local_offset, dest ? &dest->m1 : NULL); \\",
          "382:     if (ret != TSS2_RC_SUCCESS) \\",
          "383:         return ret; \\",
          "384: \\",
          "385:     ret = fn2(buffer, buffer_size, &local_offset, dest ? &dest->m2 : NULL); \\",
          "386:     if (ret != TSS2_RC_SUCCESS) \\",
          "387:         return ret; \\",
          "388: \\",
          "389:     ret = fn3(buffer, buffer_size, &local_offset, dest ? &dest->m3 : NULL); \\",
          "390:     if (ret != TSS2_RC_SUCCESS) \\",
          "391:         return ret; \\",
          "392: \\",
          "393:     ret = fn4(buffer, buffer_size, &local_offset, dest ? &dest->m4 : NULL); \\",
          "394:     if (ret != TSS2_RC_SUCCESS) \\",
          "395:         return ret; \\",
          "396: \\",
          "397:     ret = fn5(buffer, buffer_size, &local_offset, dest ? &dest->m5 : NULL); \\",
          "398: \\",
          "399:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "401:     } \\",
          "402: \\",
          "403:     return ret; \\",
          "404: }",
          "406: #define TPMT_MARSHAL_6(type, m1, op1, fn1, m2, op2, fn2, m3, op3, fn3, \\",
          "407:                        m4, op4, fn4, m5, op5, sel5, fn5, m6, op6, sel6, fn6) \\",
          "408: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint8_t buffer[], \\",
          "409:                                  size_t buffer_size, size_t *offset) \\",
          "410: { \\",
          "411:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "412:     size_t local_offset = 0; \\",
          "413: \\",
          "414:     if (!src) \\",
          "415:         return TSS2_SYS_RC_BAD_REFERENCE; \\",
          "416: \\",
          "417:     if (offset) \\",
          "418:         local_offset = *offset; \\",
          "419:     else if (!buffer) \\",
          "420:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "421: \\",
          "422:     LOG_INFO( \\",
          "423:          \"Marshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "424:          \" at index 0x%zx\", (uintptr_t)src,  (uintptr_t)buffer, local_offset); \\",
          "425: \\",
          "426:     ret = fn1(op1 src->m1, buffer, buffer_size, &local_offset); \\",
          "427:     if (ret != TSS2_RC_SUCCESS) \\",
          "428:         return ret; \\",
          "429: \\",
          "430:     ret = fn2(op2 src->m2, buffer, buffer_size, &local_offset); \\",
          "431:     if (ret != TSS2_RC_SUCCESS) \\",
          "432:         return ret; \\",
          "433: \\",
          "434:     ret = fn3(op3 src->m3, buffer, buffer_size, &local_offset); \\",
          "435:     if (ret != TSS2_RC_SUCCESS) \\",
          "436:         return ret; \\",
          "437: \\",
          "438:     ret = fn4(op4 src->m4, buffer, buffer_size, &local_offset); \\",
          "439:     if (ret != TSS2_RC_SUCCESS) \\",
          "440:         return ret; \\",
          "441: \\",
          "442:     ret = fn5(op5 src->m5, src->sel5, buffer, buffer_size, &local_offset); \\",
          "443:     if (ret != TSS2_RC_SUCCESS) \\",
          "444:         return ret; \\",
          "445: \\",
          "446:     ret = fn6(op6 src->m6, src->sel6, buffer, buffer_size, &local_offset); \\",
          "447: \\",
          "448:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "450:     } \\",
          "451: \\",
          "452:     return ret; \\",
          "453: }",
          "455: #define TPMT_UNMARSHAL_6(type, m1, fn1, m2, fn2, m3, fn3, m4, fn4, m5, sel5, fn5, m6, sel6, fn6) \\",
          "456: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "457:                                    size_t *offset, type *dest) \\",
          "458: { \\",
          "459:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "460:     size_t local_offset = 0; \\",
          "461:     type tmp = {0}; \\",
          "462: \\",
          "463:     if (offset) \\",
          "464:         local_offset = *offset; \\",
          "465:     else if (!dest) \\",
          "466:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "467: \\",
          "468:     LOG_INFO( \\",
          "469:          \"Unmarshalling \" #type \" from 0x%\" PRIxPTR \" to buffer 0x%\" PRIxPTR \\",
          "470:          \" at index 0x%zx\", (uintptr_t)dest,  (uintptr_t)buffer, local_offset); \\",
          "471: \\",
          "472:     ret = fn1(buffer, buffer_size, &local_offset, dest ? &dest->m1 : &tmp.m1); \\",
          "473:     if (ret != TSS2_RC_SUCCESS) \\",
          "474:         return ret; \\",
          "475: \\",
          "476:     ret = fn2(buffer, buffer_size, &local_offset, dest ? &dest->m2 : &tmp.m2); \\",
          "477:     if (ret != TSS2_RC_SUCCESS) \\",
          "478:         return ret; \\",
          "479: \\",
          "480:     ret = fn3(buffer, buffer_size, &local_offset, dest ? &dest->m3 : &tmp.m3); \\",
          "481:     if (ret != TSS2_RC_SUCCESS) \\",
          "482:         return ret; \\",
          "483: \\",
          "484:     ret = fn4(buffer, buffer_size, &local_offset, dest ? &dest->m4 : &tmp.m4); \\",
          "485:     if (ret != TSS2_RC_SUCCESS) \\",
          "486:         return ret; \\",
          "487: \\",
          "488:     ret = fn5(buffer, buffer_size, &local_offset, dest ? dest->sel5 : tmp.sel5, dest ? &dest->m5 : NULL); \\",
          "489:     if (ret != TSS2_RC_SUCCESS) \\",
          "490:         return ret; \\",
          "491: \\",
          "492:     ret = fn6(buffer, buffer_size, &local_offset, dest ? dest->sel6 : tmp.sel6, dest ? &dest->m6 : NULL); \\",
          "493: \\",
          "494:     if (offset && ret == TSS2_RC_SUCCESS) { \\",
          "496:     } \\",
          "497: \\",
          "498:     return ret; \\",
          "499: }",
          "505: TPMT_MARSHAL_2(TPMT_HA, hashAlg, VAL, Tss2_MU_UINT16_Marshal,",
          "506:                digest, ADDR, hashAlg, Tss2_MU_TPMU_HA_Marshal)",
          "508: TPMT_UNMARSHAL_2(TPMT_HA, hashAlg, Tss2_MU_UINT16_Unmarshal,",
          "509:                  digest, hashAlg, Tss2_MU_TPMU_HA_Unmarshal)",
          "511: TPMT_MARSHAL_3(TPMT_SYM_DEF, algorithm, VAL, Tss2_MU_UINT16_Marshal,",
          "512:                keyBits, ADDR, algorithm, Tss2_MU_TPMU_SYM_KEY_BITS_Marshal,",
          "513:                mode, ADDR, algorithm, Tss2_MU_TPMU_SYM_MODE_Marshal)",
          "515: TPMT_UNMARSHAL_3(TPMT_SYM_DEF, algorithm, Tss2_MU_UINT16_Unmarshal,",
          "516:                  keyBits, algorithm, Tss2_MU_TPMU_SYM_KEY_BITS_Unmarshal,",
          "517:                  mode, algorithm, Tss2_MU_TPMU_SYM_MODE_Unmarshal)",
          "519: TPMT_MARSHAL_3(TPMT_SYM_DEF_OBJECT, algorithm, VAL, Tss2_MU_UINT16_Marshal,",
          "520:                keyBits, ADDR, algorithm, Tss2_MU_TPMU_SYM_KEY_BITS_Marshal,",
          "521:                mode, ADDR, algorithm, Tss2_MU_TPMU_SYM_MODE_Marshal)",
          "523: TPMT_UNMARSHAL_3(TPMT_SYM_DEF_OBJECT, algorithm, Tss2_MU_UINT16_Unmarshal,",
          "524:                  keyBits, algorithm, Tss2_MU_TPMU_SYM_KEY_BITS_Unmarshal,",
          "525:                  mode, algorithm, Tss2_MU_TPMU_SYM_MODE_Unmarshal)",
          "527: TPMT_MARSHAL_2(TPMT_KEYEDHASH_SCHEME, scheme, VAL, Tss2_MU_UINT16_Marshal,",
          "528:                details, ADDR, scheme, Tss2_MU_TPMU_SCHEME_KEYEDHASH_Marshal)",
          "530: TPMT_UNMARSHAL_2(TPMT_KEYEDHASH_SCHEME, scheme, Tss2_MU_UINT16_Unmarshal,",
          "531:                  details, scheme, Tss2_MU_TPMU_SCHEME_KEYEDHASH_Unmarshal)",
          "533: TPMT_MARSHAL_2(TPMT_SIG_SCHEME, scheme, VAL, Tss2_MU_UINT16_Marshal,",
          "534:                details, ADDR, scheme, Tss2_MU_TPMU_SIG_SCHEME_Marshal)",
          "536: TPMT_UNMARSHAL_2(TPMT_SIG_SCHEME, scheme, Tss2_MU_UINT16_Unmarshal,",
          "537:                  details, scheme, Tss2_MU_TPMU_SIG_SCHEME_Unmarshal)",
          "539: TPMT_MARSHAL_2(TPMT_KDF_SCHEME, scheme, VAL, Tss2_MU_UINT16_Marshal,",
          "540:                details, ADDR, scheme, Tss2_MU_TPMU_KDF_SCHEME_Marshal)",
          "542: TPMT_UNMARSHAL_2(TPMT_KDF_SCHEME, scheme, Tss2_MU_UINT16_Unmarshal,",
          "543:                  details, scheme, Tss2_MU_TPMU_KDF_SCHEME_Unmarshal)",
          "545: TPMT_MARSHAL_2(TPMT_ASYM_SCHEME, scheme, VAL, Tss2_MU_UINT16_Marshal,",
          "546:                details, ADDR, scheme, Tss2_MU_TPMU_ASYM_SCHEME_Marshal)",
          "548: TPMT_UNMARSHAL_2(TPMT_ASYM_SCHEME, scheme, Tss2_MU_UINT16_Unmarshal,",
          "549:                  details, scheme, Tss2_MU_TPMU_ASYM_SCHEME_Unmarshal)",
          "551: TPMT_MARSHAL_2(TPMT_RSA_SCHEME, scheme, VAL, Tss2_MU_UINT16_Marshal,",
          "552:                details, ADDR, scheme, Tss2_MU_TPMU_ASYM_SCHEME_Marshal)",
          "554: TPMT_UNMARSHAL_2(TPMT_RSA_SCHEME, scheme, Tss2_MU_UINT16_Unmarshal,",
          "555:                  details, scheme, Tss2_MU_TPMU_ASYM_SCHEME_Unmarshal)",
          "557: TPMT_MARSHAL_2(TPMT_RSA_DECRYPT, scheme, VAL, Tss2_MU_UINT16_Marshal,",
          "558:                details, ADDR, scheme, Tss2_MU_TPMU_ASYM_SCHEME_Marshal)",
          "560: TPMT_UNMARSHAL_2(TPMT_RSA_DECRYPT, scheme, Tss2_MU_UINT16_Unmarshal,",
          "561:                  details, scheme, Tss2_MU_TPMU_ASYM_SCHEME_Unmarshal)",
          "563: TPMT_MARSHAL_2(TPMT_ECC_SCHEME, scheme, VAL, Tss2_MU_UINT16_Marshal,",
          "564:                details, ADDR, scheme, Tss2_MU_TPMU_ASYM_SCHEME_Marshal)",
          "566: TPMT_UNMARSHAL_2(TPMT_ECC_SCHEME, scheme, Tss2_MU_UINT16_Unmarshal,",
          "567:                  details, scheme, Tss2_MU_TPMU_ASYM_SCHEME_Unmarshal)",
          "569: TPMT_MARSHAL_2(TPMT_SIGNATURE, sigAlg, VAL, Tss2_MU_UINT16_Marshal,",
          "570:                signature, ADDR, sigAlg, Tss2_MU_TPMU_SIGNATURE_Marshal)",
          "572: TPMT_UNMARSHAL_2(TPMT_SIGNATURE, sigAlg, Tss2_MU_UINT16_Unmarshal,",
          "573:                  signature, sigAlg, Tss2_MU_TPMU_SIGNATURE_Unmarshal)",
          "575: TPMT_MARSHAL_4(TPMT_SENSITIVE, sensitiveType, VAL, Tss2_MU_UINT16_Marshal,",
          "576:                authValue, ADDR, Tss2_MU_TPM2B_DIGEST_Marshal,",
          "577:                seedValue, ADDR, Tss2_MU_TPM2B_DIGEST_Marshal,",
          "578:                sensitive, sensitiveType, ADDR, Tss2_MU_TPMU_SENSITIVE_COMPOSITE_Marshal)",
          "580: TPMT_UNMARSHAL_4(TPMT_SENSITIVE, sensitiveType, Tss2_MU_UINT16_Unmarshal,",
          "581:                  authValue, Tss2_MU_TPM2B_DIGEST_Unmarshal,",
          "582:                  seedValue, Tss2_MU_TPM2B_DIGEST_Unmarshal,",
          "583:                  sensitive, sensitiveType, Tss2_MU_TPMU_SENSITIVE_COMPOSITE_Unmarshal)",
          "584: TPMT_MARSHAL_6(TPMT_PUBLIC, type, VAL, Tss2_MU_UINT16_Marshal,",
          "585:                nameAlg, VAL, Tss2_MU_UINT16_Marshal,",
          "586:                objectAttributes, VAL, Tss2_MU_TPMA_OBJECT_Marshal,",
          "587:                authPolicy, ADDR, Tss2_MU_TPM2B_DIGEST_Marshal,",
          "588:                parameters, ADDR, type, Tss2_MU_TPMU_PUBLIC_PARMS_Marshal,",
          "589:                unique, ADDR, type, Tss2_MU_TPMU_PUBLIC_ID_Marshal)",
          "591: TPMT_UNMARSHAL_6(TPMT_PUBLIC, type, Tss2_MU_UINT16_Unmarshal,",
          "592:                  nameAlg, Tss2_MU_UINT16_Unmarshal,",
          "593:                  objectAttributes, Tss2_MU_TPMA_OBJECT_Unmarshal,",
          "594:                  authPolicy, Tss2_MU_TPM2B_DIGEST_Unmarshal,",
          "595:                  parameters, type, Tss2_MU_TPMU_PUBLIC_PARMS_Unmarshal,",
          "596:                  unique, type, Tss2_MU_TPMU_PUBLIC_ID_Unmarshal)",
          "598: TPMT_MARSHAL_2(TPMT_PUBLIC_PARMS, type, VAL, Tss2_MU_UINT16_Marshal,",
          "599:                parameters, ADDR, type, Tss2_MU_TPMU_PUBLIC_PARMS_Marshal)",
          "601: TPMT_UNMARSHAL_2(TPMT_PUBLIC_PARMS, type, Tss2_MU_UINT16_Unmarshal,",
          "602:                  parameters, type, Tss2_MU_TPMU_PUBLIC_PARMS_Unmarshal)",
          "604: TPMT_MARSHAL_TK(TPMT_TK_CREATION, tag, Tss2_MU_UINT16_Marshal,",
          "605:                 hierarchy, Tss2_MU_UINT32_Marshal, digest, Tss2_MU_TPM2B_DIGEST_Marshal)",
          "607: TPMT_UNMARSHAL_TK(TPMT_TK_CREATION, tag, Tss2_MU_UINT16_Unmarshal,",
          "608:                   hierarchy, Tss2_MU_UINT32_Unmarshal, digest, Tss2_MU_TPM2B_DIGEST_Unmarshal)",
          "610: TPMT_MARSHAL_TK(TPMT_TK_VERIFIED, tag, Tss2_MU_UINT16_Marshal,",
          "611:                 hierarchy, Tss2_MU_UINT32_Marshal, digest, Tss2_MU_TPM2B_DIGEST_Marshal)",
          "613: TPMT_UNMARSHAL_TK(TPMT_TK_VERIFIED, tag, Tss2_MU_UINT16_Unmarshal,",
          "614:                   hierarchy, Tss2_MU_UINT32_Unmarshal, digest, Tss2_MU_TPM2B_DIGEST_Unmarshal)",
          "616: TPMT_MARSHAL_TK(TPMT_TK_AUTH, tag, Tss2_MU_UINT16_Marshal,",
          "617:                 hierarchy, Tss2_MU_UINT32_Marshal, digest, Tss2_MU_TPM2B_DIGEST_Marshal)",
          "619: TPMT_UNMARSHAL_TK(TPMT_TK_AUTH, tag, Tss2_MU_UINT16_Unmarshal,",
          "620:                   hierarchy, Tss2_MU_UINT32_Unmarshal, digest, Tss2_MU_TPM2B_DIGEST_Unmarshal)",
          "622: TPMT_MARSHAL_TK(TPMT_TK_HASHCHECK, tag, Tss2_MU_UINT16_Marshal,",
          "623:                 hierarchy, Tss2_MU_UINT32_Marshal, digest, Tss2_MU_TPM2B_DIGEST_Marshal)",
          "625: TPMT_UNMARSHAL_TK(TPMT_TK_HASHCHECK, tag, Tss2_MU_UINT16_Unmarshal,",
          "626:                   hierarchy, Tss2_MU_UINT32_Unmarshal, digest, Tss2_MU_TPM2B_DIGEST_Unmarshal)",
          "",
          "---------------"
        ],
        "lib/tpmu-types.c||lib/tpmu-types.c": [
          "File: lib/tpmu-types.c -> lib/tpmu-types.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <inttypes.h>",
          "30: #include <string.h>",
          "32: #include \"tpm2_alg_util.h\"",
          "33: #include <sapi/tpm20.h>",
          "35: #include \"tss2_mu.h\"",
          "36: #include \"tss2_endian.h\"",
          "37: #include \"log.h\"",
          "38: #include \"tpm2_util.h\"",
          "40: #define ADDR &",
          "41: #define VAL",
          "43: static TSS2_RC marshal_tab(BYTE const *src, uint8_t buffer[],",
          "44:                            size_t buffer_size, size_t *offset, size_t size)",
          "45: {",
          "46:     size_t local_offset = 0;",
          "48:     if (src == NULL) { \\",
          "49:         LOG_WARN( \"src param is NULL\"); \\",
          "50:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "51:     }",
          "53:     if (offset != NULL) {",
          "54:         LOG_INFO( \"offset non-NULL, initial value: %zu\", *offset);",
          "55:         local_offset = *offset;",
          "56:     }",
          "58:     if (buffer == NULL && offset == NULL) {",
          "59:         LOG_WARN( \"buffer and offset parameter are NULL\");",
          "60:         return TSS2_TYPES_RC_BAD_REFERENCE;",
          "61:     } else if (buffer == NULL && offset != NULL) {",
          "63:         LOG_INFO( \"buffer NULL and offset non-NULL, updating offset to %zu\",",
          "65:         return TSS2_RC_SUCCESS;",
          "66:     } else if (buffer_size < local_offset || buffer_size - local_offset < size) {",
          "67:         LOG_WARN( \"buffer_size: %zu with offset: %zu are insufficient for \"",
          "68:              \"object of size %zu\", buffer_size, local_offset, size);",
          "69:         return TSS2_TYPES_RC_INSUFFICIENT_BUFFER;",
          "70:     }",
          "72:     LOG_INFO( \"Marshalling TPMU tab of %d bytes from 0x%\" PRIxPTR \" to buffer 0x%\"",
          "73:          PRIxPTR \" at index 0x%zx\", (int)size, (uintptr_t)src, (uintptr_t)buffer,",
          "74:          local_offset);",
          "76:     memcpy(&buffer[local_offset], src, size);",
          "77:     local_offset += size;",
          "79:     if (offset) {",
          "81:         LOG_INFO( \"offset parameter non-NULL, updated to %zu\", *offset);",
          "82:     }",
          "83:     return TSS2_RC_SUCCESS;",
          "84: }",
          "86: static TSS2_RC marshal_hash_sha(BYTE const *src, uint8_t buffer[],",
          "87:                                 size_t buffer_size, size_t *offset)",
          "88: {",
          "89:     return marshal_tab(src, buffer, buffer_size, offset, SHA1_DIGEST_SIZE);",
          "90: }",
          "92: static TSS2_RC marshal_hash_sha256(BYTE const *src, uint8_t buffer[],",
          "93:                                    size_t buffer_size, size_t *offset)",
          "94: {",
          "95:     return marshal_tab(src, buffer, buffer_size, offset, SHA256_DIGEST_SIZE);",
          "96: }",
          "98: static TSS2_RC marshal_hash_sha384(BYTE const *src, uint8_t buffer[],",
          "99:                                    size_t buffer_size, size_t *offset)",
          "100: {",
          "101:     return marshal_tab(src, buffer, buffer_size, offset, SHA384_DIGEST_SIZE);",
          "102: }",
          "104: static TSS2_RC marshal_hash_sha512(BYTE const *src, uint8_t buffer[],",
          "105:                                    size_t buffer_size, size_t *offset)",
          "106: {",
          "107:     return marshal_tab(src, buffer, buffer_size, offset, SHA512_DIGEST_SIZE);",
          "108: }",
          "110: static TSS2_RC marshal_sm3_256(BYTE const *src, uint8_t buffer[],",
          "111:                                size_t buffer_size, size_t *offset)",
          "112: {",
          "113:     return marshal_tab(src, buffer, buffer_size, offset, SM3_256_DIGEST_SIZE);",
          "114: }",
          "116: static TSS2_RC marshal_ecc(BYTE const *src, uint8_t buffer[],",
          "117:                            size_t buffer_size, size_t *offset)",
          "118: {",
          "119:     return marshal_tab(src, buffer, buffer_size, offset, sizeof(TPMS_ECC_POINT));",
          "120: }",
          "122: static TSS2_RC marshal_rsa(BYTE const *src, uint8_t buffer[],",
          "123:                            size_t buffer_size, size_t *offset)",
          "124: {",
          "125:     return marshal_tab(src, buffer, buffer_size, offset, MAX_RSA_KEY_BYTES);",
          "126: }",
          "128: static TSS2_RC marshal_symmetric(BYTE const *src, uint8_t buffer[],",
          "129:                                  size_t buffer_size, size_t *offset)",
          "130: {",
          "131:     return marshal_tab(src, buffer, buffer_size, offset, sizeof(TPM2B_DIGEST));",
          "132: }",
          "134: static TSS2_RC marshal_keyedhash(BYTE const *src, uint8_t buffer[],",
          "135:                                  size_t buffer_size, size_t *offset)",
          "136: {",
          "137:     return marshal_tab(src, buffer, buffer_size, offset, sizeof(TPM2B_DIGEST));",
          "138: }",
          "141: static TSS2_RC marshal_null(void const *src, uint8_t buffer[],",
          "142:                             size_t buffer_size, size_t *offset)",
          "143: {",
          "144:     UNUSED(src);",
          "145:     UNUSED(buffer);",
          "146:     UNUSED(buffer_size);",
          "147:     UNUSED(offset);",
          "148:     return TSS2_RC_SUCCESS;",
          "149: }",
          "151: static TSS2_RC unmarshal_tab(uint8_t const buffer[], size_t buffer_size,",
          "152:                              size_t *offset, BYTE *dest, size_t size)",
          "153: {",
          "154:     size_t  local_offset = 0;",
          "156:     if (offset != NULL) {",
          "157:         LOG_INFO( \"offset non-NULL, initial value: %zu\", *offset);",
          "158:         local_offset = *offset;",
          "159:     }",
          "161:     if (buffer == NULL || (dest == NULL && offset == NULL)) {",
          "162:         LOG_WARN( \"buffer or dest and offset parameter are NULL\");",
          "163:         return TSS2_TYPES_RC_BAD_REFERENCE;",
          "164:     } else if (dest == NULL && offset != NULL) {",
          "166:         LOG_INFO( \"buffer NULL and offset non-NULL, updating offset to %zu\",",
          "168:         return TSS2_RC_SUCCESS;",
          "169:     } else if (buffer_size < local_offset || size > buffer_size - local_offset) {",
          "170:         LOG_WARN( \"buffer_size: %zu with offset: %zu are insufficient for \"",
          "171:              \"object of size %zu\", buffer_size, local_offset, size);",
          "172:         return TSS2_TYPES_RC_INSUFFICIENT_BUFFER;",
          "173:     }",
          "175:     LOG_INFO(",
          "176:          \"Marshalling TPMU tab of %d bytes from buffer 0x%\" PRIxPTR \" at index 0x%zx\"",
          "177:          \" to dest 0x%\" PRIxPTR, (int)size, (uintptr_t)buffer, local_offset,",
          "178:          (uintptr_t)dest);",
          "180:     memcpy(dest, &buffer[local_offset], size);",
          "181:     local_offset += size;",
          "183:     if (offset) {",
          "185:         LOG_INFO( \"offset parameter non-NULL, updated to %zu\", *offset);",
          "186:     }",
          "187:     return TSS2_RC_SUCCESS;",
          "188: }",
          "190: static TSS2_RC unmarshal_hash_sha(uint8_t const buffer[], size_t buffer_size,",
          "191:                                   size_t *offset, BYTE *dest)",
          "192: {",
          "193:     return unmarshal_tab(buffer, buffer_size, offset, dest, SHA1_DIGEST_SIZE);",
          "194: }",
          "196: static TSS2_RC unmarshal_hash_sha256(uint8_t const buffer[], size_t buffer_size,",
          "197:                                      size_t *offset, BYTE *dest)",
          "198: {",
          "199:     return unmarshal_tab(buffer, buffer_size, offset, dest, SHA256_DIGEST_SIZE);",
          "200: }",
          "202: static TSS2_RC unmarshal_hash_sha384(uint8_t const buffer[], size_t buffer_size,",
          "203:                                      size_t *offset, BYTE *dest)",
          "204: {",
          "205:     return unmarshal_tab(buffer, buffer_size, offset, dest, SHA384_DIGEST_SIZE);",
          "206: }",
          "208: static TSS2_RC unmarshal_hash_sha512(uint8_t const buffer[], size_t buffer_size,",
          "209:                                      size_t *offset, BYTE *dest)",
          "210: {",
          "211:     return unmarshal_tab(buffer, buffer_size, offset, dest, SHA512_DIGEST_SIZE);",
          "212: }",
          "214: static TSS2_RC unmarshal_sm3_256(uint8_t const buffer[], size_t buffer_size,",
          "215:                                  size_t *offset, BYTE *dest)",
          "216: {",
          "217:     return unmarshal_tab(buffer, buffer_size, offset, dest, SM3_256_DIGEST_SIZE);",
          "218: }",
          "220: static TSS2_RC unmarshal_ecc(uint8_t const buffer[], size_t buffer_size,",
          "221:                              size_t *offset, BYTE *dest)",
          "222: {",
          "223:     return unmarshal_tab(buffer, buffer_size, offset, dest, sizeof(TPMS_ECC_POINT));",
          "224: }",
          "226: static TSS2_RC unmarshal_rsa(uint8_t const buffer[], size_t buffer_size,",
          "227:                              size_t *offset, BYTE *dest)",
          "228: {",
          "229:     return unmarshal_tab(buffer, buffer_size, offset, dest, MAX_RSA_KEY_BYTES);",
          "230: }",
          "232: static TSS2_RC unmarshal_symmetric(uint8_t const buffer[], size_t buffer_size,",
          "233:                                    size_t *offset, BYTE *dest)",
          "234: {",
          "235:     return unmarshal_tab(buffer, buffer_size, offset, dest, sizeof(TPM2B_DIGEST));",
          "236: }",
          "238: static TSS2_RC unmarshal_keyedhash(uint8_t const buffer[], size_t buffer_size,",
          "239:                                    size_t *offset, BYTE *dest)",
          "240: {",
          "241:     return unmarshal_tab(buffer, buffer_size, offset, dest, sizeof(TPM2B_DIGEST));",
          "242: }",
          "244: static TSS2_RC unmarshal_null(uint8_t const buffer[], size_t buffer_size,",
          "245:                              size_t *offset, void *dest)",
          "246: {",
          "247:     UNUSED(buffer);",
          "248:     UNUSED(buffer_size);",
          "249:     UNUSED(offset);",
          "250:     UNUSED(dest);",
          "251:     return TSS2_RC_SUCCESS;",
          "252: }",
          "267: #define TPMU_MARSHAL(type, sel, op, m, fn, sel2, op2, m2, fn2, sel3, op3, m3, fn3, \\",
          "268:                      sel4, op4, m4, fn4, sel5, op5, m5, fn5, sel6, op6, m6, fn6, \\",
          "269:                      sel7, op7, m7, fn7, sel8, op8, m8, fn8, sel9, op9, m9, fn9, \\",
          "270:                      sel10, op10, m10, fn10, sel11, op11, m11, fn11, ...) \\",
          "271: TSS2_RC Tss2_MU_##type##_Marshal(type const *src, uint32_t selector, uint8_t buffer[], \\",
          "272:                                  size_t buffer_size, size_t *offset) \\",
          "273: { \\",
          "274:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "275: \\",
          "276:     if (src == NULL) { \\",
          "277:         LOG_WARN( \"src param is NULL\"); \\",
          "278:         return TSS2_TYPES_RC_BAD_REFERENCE; \\",
          "279:     } \\",
          "280: \\",
          "281:     switch (selector) { \\",
          "282:     case sel: \\",
          "283:     ret = fn(op src->m, buffer, buffer_size, offset); \\",
          "284:     break; \\",
          "285:     case sel2: \\",
          "286:     ret = fn2(op2 src->m2, buffer, buffer_size, offset); \\",
          "287:     break; \\",
          "288:     case sel3: \\",
          "289:     ret = fn3(op3 src->m3, buffer, buffer_size, offset); \\",
          "290:     break; \\",
          "291:     case sel4: \\",
          "292:     ret = fn4(op4 src->m4, buffer, buffer_size, offset); \\",
          "293:     break; \\",
          "294:     case sel5: \\",
          "295:     ret = fn5(op5 src->m5, buffer, buffer_size, offset); \\",
          "296:     break; \\",
          "297:     case sel6: \\",
          "298:     ret = fn6(op6 src->m6, buffer, buffer_size, offset); \\",
          "299:     break; \\",
          "300:     case sel7: \\",
          "301:     ret = fn7(op7 src->m7, buffer, buffer_size, offset); \\",
          "302:     break; \\",
          "303:     case sel8: \\",
          "304:     ret = fn8(op8 src->m8, buffer, buffer_size, offset); \\",
          "305:     break; \\",
          "306:     case sel9: \\",
          "307:     ret = fn9(op9 src->m9, buffer, buffer_size, offset); \\",
          "308:     break; \\",
          "309:     case sel10: \\",
          "310:     ret = fn10(op10 src->m10, buffer, buffer_size, offset); \\",
          "311:     break; \\",
          "312:     case sel11: \\",
          "313:     ret = fn11(op11 src->m11, buffer, buffer_size, offset); \\",
          "314:     break; \\",
          "315:     default: \\",
          "316:     break; \\",
          "317:     } \\",
          "318:     return ret; \\",
          "319: }",
          "321: #define TPMU_MARSHAL2(type, sel, op, m, fn, ...) \\",
          "322:     TPMU_MARSHAL(type, sel, op, m, fn, __VA_ARGS__, -1, ADDR, m, marshal_null, \\",
          "323:                  -2, ADDR, m, marshal_null, -3, ADDR, m, marshal_null, \\",
          "324:                  -4, ADDR, m, marshal_null, -5, ADDR, m, marshal_null, \\",
          "325:                  -6, ADDR, m, marshal_null, -7, ADDR, m, marshal_null, \\",
          "326:                  -8, ADDR, m, marshal_null, -9, ADDR, m, marshal_null)",
          "328: #define TPMU_UNMARSHAL(type, sel, m, fn, sel2, m2, fn2, sel3, m3, fn3, \\",
          "329:                        sel4, m4, fn4, sel5, m5, fn5, sel6, m6, fn6, sel7, m7, fn7, \\",
          "330:                        sel8, m8, fn8, sel9, m9, fn9, sel10, m10, fn10, sel11, m11, fn11, ...) \\",
          "331: TSS2_RC Tss2_MU_##type##_Unmarshal(uint8_t const buffer[], size_t buffer_size, \\",
          "332:                                    size_t *offset, uint32_t selector, type *dest) \\",
          "333: { \\",
          "334:     TSS2_RC ret = TSS2_RC_SUCCESS; \\",
          "335: \\",
          "336:     switch (selector) { \\",
          "337:     case sel: \\",
          "338:     ret = fn(buffer, buffer_size, offset, dest ? &dest->m : NULL); \\",
          "339:     break; \\",
          "340:     case sel2: \\",
          "341:     ret = fn2(buffer, buffer_size, offset, dest ? &dest->m2 : NULL); \\",
          "342:     break; \\",
          "343:     case sel3: \\",
          "344:     ret = fn3(buffer, buffer_size, offset, dest ? &dest->m3 : NULL); \\",
          "345:     break; \\",
          "346:     case sel4: \\",
          "347:     ret = fn4(buffer, buffer_size, offset, dest ? &dest->m4 : NULL); \\",
          "348:     break; \\",
          "349:     case sel5: \\",
          "350:     ret = fn5(buffer, buffer_size, offset, dest ? &dest->m5 : NULL); \\",
          "351:     break; \\",
          "352:     case sel6: \\",
          "353:     ret = fn6(buffer, buffer_size, offset, dest ? &dest->m6 : NULL); \\",
          "354:     break; \\",
          "355:     case sel7: \\",
          "356:     ret = fn7(buffer, buffer_size, offset, dest ? &dest->m7 : NULL); \\",
          "357:     break; \\",
          "358:     case sel8: \\",
          "359:     ret = fn8(buffer, buffer_size, offset, dest ? &dest->m8 : NULL); \\",
          "360:     break; \\",
          "361:     case sel9: \\",
          "362:     ret = fn9(buffer, buffer_size, offset, dest ? &dest->m9 : NULL); \\",
          "363:     break; \\",
          "364:     case sel10: \\",
          "365:     ret = fn10(buffer, buffer_size, offset, dest ? &dest->m10 : NULL); \\",
          "366:     break; \\",
          "367:     case sel11: \\",
          "368:     ret = fn11(buffer, buffer_size, offset, dest ? &dest->m11 : NULL); \\",
          "369:     break; \\",
          "370:     default: \\",
          "371:     break; \\",
          "372:     } \\",
          "373:     return ret; \\",
          "374: }",
          "376: #define TPMU_UNMARSHAL2(type, sel, m, fn, ...) \\",
          "377:     TPMU_UNMARSHAL(type, sel, m, fn, __VA_ARGS__, -1, m, unmarshal_null, \\",
          "378:             -2, m, unmarshal_null, -3, m, unmarshal_null, -4, m, unmarshal_null, \\",
          "379:             -5, m, unmarshal_null, -6, m, unmarshal_null, -7, m, unmarshal_null, \\",
          "380:             -8, m, unmarshal_null, -9, m, unmarshal_null)",
          "382: TPMU_MARSHAL2(TPMU_HA, TPM_ALG_SHA1, ADDR, sha1[0], marshal_hash_sha,",
          "383:               TPM_ALG_SHA256, ADDR, sha256[0], marshal_hash_sha256, TPM_ALG_SHA384, ADDR, sha384[0], marshal_hash_sha384,",
          "384:               TPM_ALG_SHA512, ADDR, sha512[0], marshal_hash_sha512, TPM_ALG_SM3_256, ADDR, sm3_256[0], marshal_sm3_256)",
          "386: TPMU_UNMARSHAL2(TPMU_HA, TPM_ALG_SHA1, sha1[0], unmarshal_hash_sha,",
          "387:                 TPM_ALG_SHA256, sha256[0], unmarshal_hash_sha256, TPM_ALG_SHA384, sha384[0], unmarshal_hash_sha384,",
          "388:                 TPM_ALG_SHA512, sha512[0], unmarshal_hash_sha512, TPM_ALG_SM3_256, sm3_256[0], unmarshal_sm3_256)",
          "390: TPMU_MARSHAL2(TPMU_CAPABILITIES, TPM_CAP_ALGS, ADDR, algorithms, Tss2_MU_TPML_ALG_PROPERTY_Marshal,",
          "391:               TPM_CAP_HANDLES, ADDR, handles, Tss2_MU_TPML_HANDLE_Marshal, TPM_CAP_COMMANDS, ADDR, command, Tss2_MU_TPML_CCA_Marshal,",
          "392:               TPM_CAP_PP_COMMANDS, ADDR, ppCommands, Tss2_MU_TPML_CC_Marshal, TPM_CAP_AUDIT_COMMANDS, ADDR, auditCommands, Tss2_MU_TPML_CC_Marshal,",
          "393:               TPM_CAP_PCRS, ADDR, assignedPCR, Tss2_MU_TPML_PCR_SELECTION_Marshal, TPM_CAP_TPM_PROPERTIES, ADDR, tpmProperties, Tss2_MU_TPML_TAGGED_TPM_PROPERTY_Marshal,",
          "394:               TPM_CAP_PCR_PROPERTIES, ADDR, pcrProperties, Tss2_MU_TPML_TAGGED_PCR_PROPERTY_Marshal, TPM_CAP_ECC_CURVES, ADDR, eccCurves, Tss2_MU_TPML_ECC_CURVE_Marshal,",
          "395:               TPM_CAP_VENDOR_PROPERTY, ADDR, intelPttProperty, Tss2_MU_TPML_INTEL_PTT_PROPERTY_Marshal)",
          "397: TPMU_UNMARSHAL2(TPMU_CAPABILITIES, TPM_CAP_ALGS, algorithms, Tss2_MU_TPML_ALG_PROPERTY_Unmarshal,",
          "398:                 TPM_CAP_HANDLES, handles, Tss2_MU_TPML_HANDLE_Unmarshal, TPM_CAP_COMMANDS, command, Tss2_MU_TPML_CCA_Unmarshal,",
          "399:                 TPM_CAP_PP_COMMANDS, ppCommands, Tss2_MU_TPML_CC_Unmarshal, TPM_CAP_AUDIT_COMMANDS, auditCommands, Tss2_MU_TPML_CC_Unmarshal,",
          "400:                 TPM_CAP_PCRS, assignedPCR, Tss2_MU_TPML_PCR_SELECTION_Unmarshal, TPM_CAP_TPM_PROPERTIES, tpmProperties, Tss2_MU_TPML_TAGGED_TPM_PROPERTY_Unmarshal,",
          "401:                 TPM_CAP_PCR_PROPERTIES, pcrProperties, Tss2_MU_TPML_TAGGED_PCR_PROPERTY_Unmarshal, TPM_CAP_ECC_CURVES, eccCurves, Tss2_MU_TPML_ECC_CURVE_Unmarshal,",
          "402:                 TPM_CAP_VENDOR_PROPERTY, intelPttProperty, Tss2_MU_TPML_INTEL_PTT_PROPERTY_Unmarshal)",
          "404: TPMU_MARSHAL2(TPMU_ATTEST, TPM_ST_ATTEST_CERTIFY, ADDR, certify, Tss2_MU_TPMS_CERTIFY_INFO_Marshal,",
          "405:               TPM_ST_ATTEST_CREATION, ADDR, creation, Tss2_MU_TPMS_CREATION_INFO_Marshal, TPM_ST_ATTEST_QUOTE, ADDR, quote, Tss2_MU_TPMS_QUOTE_INFO_Marshal,",
          "406:               TPM_ST_ATTEST_COMMAND_AUDIT, ADDR, commandAudit, Tss2_MU_TPMS_COMMAND_AUDIT_INFO_Marshal,",
          "407:               TPM_ST_ATTEST_SESSION_AUDIT, ADDR, sessionAudit, Tss2_MU_TPMS_SESSION_AUDIT_INFO_Marshal,",
          "408:               TPM_ST_ATTEST_TIME, ADDR, time, Tss2_MU_TPMS_TIME_ATTEST_INFO_Marshal, TPM_ST_ATTEST_NV, ADDR, nv, Tss2_MU_TPMS_NV_CERTIFY_INFO_Marshal)",
          "410: TPMU_UNMARSHAL2(TPMU_ATTEST, TPM_ST_ATTEST_CERTIFY, certify, Tss2_MU_TPMS_CERTIFY_INFO_Unmarshal,",
          "411:                 TPM_ST_ATTEST_CREATION, creation, Tss2_MU_TPMS_CREATION_INFO_Unmarshal, TPM_ST_ATTEST_QUOTE, quote, Tss2_MU_TPMS_QUOTE_INFO_Unmarshal,",
          "412:                 TPM_ST_ATTEST_COMMAND_AUDIT, commandAudit, Tss2_MU_TPMS_COMMAND_AUDIT_INFO_Unmarshal,",
          "413:                 TPM_ST_ATTEST_SESSION_AUDIT, sessionAudit, Tss2_MU_TPMS_SESSION_AUDIT_INFO_Unmarshal,",
          "414:                 TPM_ST_ATTEST_TIME, time, Tss2_MU_TPMS_TIME_ATTEST_INFO_Unmarshal, TPM_ST_ATTEST_NV, nv, Tss2_MU_TPMS_NV_CERTIFY_INFO_Unmarshal)",
          "416: TPMU_MARSHAL2(TPMU_SYM_KEY_BITS, TPM_ALG_AES, VAL, aes, Tss2_MU_UINT16_Marshal, TPM_ALG_SM4, VAL, sm4, Tss2_MU_UINT16_Marshal,",
          "417:               TPM_ALG_CAMELLIA, VAL, camellia, Tss2_MU_UINT16_Marshal, TPM_ALG_XOR, VAL, exclusiveOr, Tss2_MU_UINT16_Marshal)",
          "419: TPMU_UNMARSHAL2(TPMU_SYM_KEY_BITS, TPM_ALG_AES, aes, Tss2_MU_UINT16_Unmarshal, TPM_ALG_SM4, sm4, Tss2_MU_UINT16_Unmarshal,",
          "420:               TPM_ALG_CAMELLIA, camellia, Tss2_MU_UINT16_Unmarshal, TPM_ALG_XOR, exclusiveOr, Tss2_MU_UINT16_Unmarshal)",
          "422: TPMU_MARSHAL2(TPMU_SYM_MODE, TPM_ALG_AES, VAL, aes, Tss2_MU_UINT16_Marshal, TPM_ALG_SM4, VAL, sm4, Tss2_MU_UINT16_Marshal,",
          "423:               TPM_ALG_CAMELLIA, VAL, camellia, Tss2_MU_UINT16_Marshal)",
          "425: TPMU_UNMARSHAL2(TPMU_SYM_MODE, TPM_ALG_AES, aes, Tss2_MU_UINT16_Unmarshal, TPM_ALG_SM4, sm4, Tss2_MU_UINT16_Unmarshal,",
          "426:               TPM_ALG_CAMELLIA, camellia, Tss2_MU_UINT16_Unmarshal)",
          "428: TPMU_MARSHAL2(TPMU_SIG_SCHEME, TPM_ALG_RSASSA, ADDR, rsassa, Tss2_MU_TPMS_SCHEME_HASH_Marshal,",
          "429:               TPM_ALG_RSAPSS, ADDR, rsapss, Tss2_MU_TPMS_SCHEME_HASH_Marshal,",
          "430:               TPM_ALG_ECDSA, ADDR, ecdsa, Tss2_MU_TPMS_SCHEME_HASH_Marshal,",
          "431:               TPM_ALG_ECDAA, ADDR, ecdaa, Tss2_MU_TPMS_SCHEME_ECDAA_Marshal,",
          "432:               TPM_ALG_SM2, ADDR, sm2, Tss2_MU_TPMS_SCHEME_HASH_Marshal,",
          "433:               TPM_ALG_ECSCHNORR, ADDR, ecschnorr, Tss2_MU_TPMS_SCHEME_HASH_Marshal,",
          "434:               TPM_ALG_HMAC, ADDR, hmac, Tss2_MU_TPMS_SCHEME_HASH_Marshal)",
          "436: TPMU_UNMARSHAL2(TPMU_SIG_SCHEME, TPM_ALG_RSASSA, rsassa, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal,",
          "437:                 TPM_ALG_RSAPSS, rsapss, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal,",
          "438:                 TPM_ALG_ECDSA, ecdsa, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal,",
          "439:                 TPM_ALG_ECDAA, ecdaa, Tss2_MU_TPMS_SCHEME_ECDAA_Unmarshal,",
          "440:                 TPM_ALG_SM2, sm2, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal,",
          "441:                 TPM_ALG_ECSCHNORR, ecschnorr, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal,",
          "442:                 TPM_ALG_HMAC, hmac, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal)",
          "444: TPMU_MARSHAL2(TPMU_KDF_SCHEME, TPM_ALG_MGF1, ADDR, mgf1, Tss2_MU_TPMS_SCHEME_HASH_Marshal,",
          "445:               TPM_ALG_KDF1_SP800_56A, ADDR, kdf1_sp800_56a, Tss2_MU_TPMS_SCHEME_HASH_Marshal,",
          "446:               TPM_ALG_KDF1_SP800_108, ADDR, kdf1_sp800_108, Tss2_MU_TPMS_SCHEME_HASH_Marshal)",
          "448: TPMU_UNMARSHAL2(TPMU_KDF_SCHEME, TPM_ALG_MGF1, mgf1, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal,",
          "449:                 TPM_ALG_KDF1_SP800_56A, kdf1_sp800_56a, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal,",
          "450:                 TPM_ALG_KDF1_SP800_108, kdf1_sp800_108, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal)",
          "452: TPMU_MARSHAL2(TPMU_ASYM_SCHEME, TPM_ALG_ECDH, ADDR, ecdh, Tss2_MU_TPMS_SCHEME_HASH_Marshal,",
          "453:               TPM_ALG_ECMQV, ADDR, ecmqv, Tss2_MU_TPMS_SCHEME_HASH_Marshal,",
          "454:               TPM_ALG_RSASSA, ADDR, rsassa, Tss2_MU_TPMS_SCHEME_HASH_Marshal,",
          "455:               TPM_ALG_RSAPSS, ADDR, rsapss, Tss2_MU_TPMS_SCHEME_HASH_Marshal,",
          "456:               TPM_ALG_ECDSA, ADDR, ecdsa, Tss2_MU_TPMS_SCHEME_HASH_Marshal,",
          "457:               TPM_ALG_ECDAA, ADDR, ecdaa, Tss2_MU_TPMS_SCHEME_ECDAA_Marshal,",
          "458:               TPM_ALG_SM2, ADDR, sm2, Tss2_MU_TPMS_SCHEME_HASH_Marshal,",
          "459:               TPM_ALG_ECSCHNORR, ADDR, ecschnorr, Tss2_MU_TPMS_SCHEME_HASH_Marshal,",
          "460:               TPM_ALG_OAEP, ADDR, oaep, Tss2_MU_TPMS_SCHEME_HASH_Marshal)",
          "462: TPMU_UNMARSHAL2(TPMU_ASYM_SCHEME, TPM_ALG_ECDH, ecdh, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal,",
          "463:                 TPM_ALG_ECMQV, ecmqv, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal,",
          "464:                 TPM_ALG_RSASSA, rsassa, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal,",
          "465:                 TPM_ALG_RSAPSS, rsapss, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal,",
          "466:                 TPM_ALG_ECDSA, ecdsa, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal,",
          "467:                 TPM_ALG_ECDAA, ecdaa, Tss2_MU_TPMS_SCHEME_ECDAA_Unmarshal,",
          "468:                 TPM_ALG_SM2, sm2, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal,",
          "469:                 TPM_ALG_ECSCHNORR, ecschnorr, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal,",
          "470:                 TPM_ALG_OAEP, oaep, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal)",
          "472: TPMU_MARSHAL2(TPMU_SCHEME_KEYEDHASH, TPM_ALG_HMAC, ADDR, hmac, Tss2_MU_TPMS_SCHEME_HASH_Marshal,",
          "473:               TPM_ALG_XOR, ADDR, exclusiveOr, Tss2_MU_TPMS_SCHEME_XOR_Marshal)",
          "475: TPMU_UNMARSHAL2(TPMU_SCHEME_KEYEDHASH, TPM_ALG_HMAC, hmac, Tss2_MU_TPMS_SCHEME_HASH_Unmarshal,",
          "476:                 TPM_ALG_XOR, exclusiveOr, Tss2_MU_TPMS_SCHEME_XOR_Unmarshal)",
          "478: TPMU_MARSHAL2(TPMU_SIGNATURE, TPM_ALG_RSASSA, ADDR, rsassa, Tss2_MU_TPMS_SIGNATURE_RSA_Marshal,",
          "479:               TPM_ALG_RSAPSS, ADDR, rsapss, Tss2_MU_TPMS_SIGNATURE_RSA_Marshal,",
          "480:               TPM_ALG_ECDSA, ADDR, ecdsa, Tss2_MU_TPMS_SIGNATURE_ECC_Marshal,",
          "481:               TPM_ALG_ECDAA, ADDR, ecdaa, Tss2_MU_TPMS_SIGNATURE_ECC_Marshal,",
          "482:               TPM_ALG_SM2, ADDR, sm2, Tss2_MU_TPMS_SIGNATURE_ECC_Marshal,",
          "483:               TPM_ALG_ECSCHNORR, ADDR, ecschnorr, Tss2_MU_TPMS_SIGNATURE_ECC_Marshal,",
          "484:               TPM_ALG_HMAC, ADDR, hmac, Tss2_MU_TPMT_HA_Marshal)",
          "486: TPMU_UNMARSHAL2(TPMU_SIGNATURE, TPM_ALG_RSASSA, rsassa, Tss2_MU_TPMS_SIGNATURE_RSA_Unmarshal,",
          "487:                 TPM_ALG_RSAPSS, rsapss, Tss2_MU_TPMS_SIGNATURE_RSA_Unmarshal,",
          "488:                 TPM_ALG_ECDSA, ecdsa, Tss2_MU_TPMS_SIGNATURE_ECC_Unmarshal,",
          "489:                 TPM_ALG_ECDAA, ecdaa, Tss2_MU_TPMS_SIGNATURE_ECC_Unmarshal,",
          "490:                 TPM_ALG_SM2, sm2, Tss2_MU_TPMS_SIGNATURE_ECC_Unmarshal,",
          "491:                 TPM_ALG_ECSCHNORR, ecschnorr, Tss2_MU_TPMS_SIGNATURE_ECC_Unmarshal,",
          "492:                 TPM_ALG_HMAC, hmac, Tss2_MU_TPMT_HA_Unmarshal)",
          "494: TPMU_MARSHAL2(TPMU_SENSITIVE_COMPOSITE, TPM_ALG_RSA, ADDR, rsa, Tss2_MU_TPM2B_PRIVATE_KEY_RSA_Marshal,",
          "495:               TPM_ALG_ECC, ADDR, ecc, Tss2_MU_TPM2B_ECC_PARAMETER_Marshal,",
          "496:               TPM_ALG_KEYEDHASH, ADDR, bits, Tss2_MU_TPM2B_SENSITIVE_DATA_Marshal,",
          "497:               TPM_ALG_SYMCIPHER, ADDR, sym, Tss2_MU_TPM2B_SYM_KEY_Marshal)",
          "499: TPMU_UNMARSHAL2(TPMU_SENSITIVE_COMPOSITE, TPM_ALG_RSA, rsa, Tss2_MU_TPM2B_PRIVATE_KEY_RSA_Unmarshal,",
          "500:                 TPM_ALG_ECC, ecc, Tss2_MU_TPM2B_ECC_PARAMETER_Unmarshal,",
          "501:                 TPM_ALG_KEYEDHASH, bits, Tss2_MU_TPM2B_SENSITIVE_DATA_Unmarshal,",
          "502:                 TPM_ALG_SYMCIPHER, sym, Tss2_MU_TPM2B_SYM_KEY_Unmarshal)",
          "504: TPMU_MARSHAL2(TPMU_ENCRYPTED_SECRET, TPM_ALG_ECC, ADDR, ecc[0], marshal_ecc,",
          "505:               TPM_ALG_RSA, ADDR, rsa[0], marshal_rsa,",
          "506:               TPM_ALG_SYMCIPHER, ADDR, symmetric[0], marshal_symmetric,",
          "507:               TPM_ALG_KEYEDHASH, ADDR, keyedHash[0], marshal_keyedhash)",
          "509: TPMU_UNMARSHAL2(TPMU_ENCRYPTED_SECRET, TPM_ALG_ECC, ecc[0], unmarshal_ecc,",
          "510:                 TPM_ALG_RSA, rsa[0], unmarshal_rsa,",
          "511:                 TPM_ALG_SYMCIPHER, symmetric[0], unmarshal_symmetric,",
          "512:                 TPM_ALG_KEYEDHASH, keyedHash[0], unmarshal_keyedhash)",
          "513: TPMU_MARSHAL2(TPMU_PUBLIC_ID, TPM_ALG_KEYEDHASH, ADDR, keyedHash, Tss2_MU_TPM2B_DIGEST_Marshal,",
          "514:               TPM_ALG_SYMCIPHER, ADDR, sym, Tss2_MU_TPM2B_DIGEST_Marshal,",
          "515:               TPM_ALG_RSA, ADDR, rsa, Tss2_MU_TPM2B_PUBLIC_KEY_RSA_Marshal,",
          "516:               TPM_ALG_ECC, ADDR, ecc, Tss2_MU_TPMS_ECC_POINT_Marshal)",
          "518: TPMU_UNMARSHAL2(TPMU_PUBLIC_ID, TPM_ALG_KEYEDHASH, keyedHash, Tss2_MU_TPM2B_DIGEST_Unmarshal,",
          "519:                 TPM_ALG_SYMCIPHER, sym, Tss2_MU_TPM2B_DIGEST_Unmarshal,",
          "520:                 TPM_ALG_RSA, rsa, Tss2_MU_TPM2B_PUBLIC_KEY_RSA_Unmarshal,",
          "521:                 TPM_ALG_ECC, ecc, Tss2_MU_TPMS_ECC_POINT_Unmarshal)",
          "523: TPMU_MARSHAL2(TPMU_PUBLIC_PARMS, TPM_ALG_KEYEDHASH, ADDR, keyedHashDetail, Tss2_MU_TPMS_KEYEDHASH_PARMS_Marshal,",
          "524:               TPM_ALG_SYMCIPHER, ADDR, symDetail, Tss2_MU_TPMS_SYMCIPHER_PARMS_Marshal,",
          "525:               TPM_ALG_RSA, ADDR, rsaDetail, Tss2_MU_TPMS_RSA_PARMS_Marshal,",
          "526:               TPM_ALG_ECC, ADDR, eccDetail, Tss2_MU_TPMS_ECC_PARMS_Marshal)",
          "528: TPMU_UNMARSHAL2(TPMU_PUBLIC_PARMS, TPM_ALG_KEYEDHASH, keyedHashDetail, Tss2_MU_TPMS_KEYEDHASH_PARMS_Unmarshal,",
          "529:                 TPM_ALG_SYMCIPHER, symDetail, Tss2_MU_TPMS_SYMCIPHER_PARMS_Unmarshal,",
          "530:                 TPM_ALG_RSA, rsaDetail, Tss2_MU_TPMS_RSA_PARMS_Unmarshal,",
          "531:                 TPM_ALG_ECC, eccDetail, Tss2_MU_TPMS_ECC_PARMS_Unmarshal)",
          "",
          "---------------"
        ],
        "lib/tss2_endian.h||lib/tss2_endian.h": [
          "File: lib/tss2_endian.h -> lib/tss2_endian.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #ifndef TSS2_ENDIAN_H",
          "30: #define TSS2_ENDIAN_H",
          "32: #if defined(__linux__) || defined(__unix__)",
          "33: #include <endian.h>",
          "35: #define HOST_TO_BE_16(value) htobe16(value)",
          "36: #define HOST_TO_BE_32(value) htobe32(value)",
          "37: #define HOST_TO_BE_64(value) htobe64(value)",
          "38: #define BE_TO_HOST_16(value) be16toh(value)",
          "39: #define BE_TO_HOST_32(value) be32toh(value)",
          "40: #define BE_TO_HOST_64(value) be64toh(value)",
          "44: #if defined(WORDS_BIGENDIAN)",
          "46: #define HOST_TO_BE_16(value) (value)",
          "47: #define HOST_TO_BE_32(value) (value)",
          "48: #define HOST_TO_BE_64(value) (value)",
          "49: #define BE_TO_HOST_16(value) (value)",
          "50: #define BE_TO_HOST_32(value) (value)",
          "51: #define BE_TO_HOST_64(value) (value)",
          "53: #else",
          "55: static inline uint16_t endian_conv_16(UINT16 value)",
          "56: {",
          "57:     return ((value & (0xff))      << 8) | \\",
          "58:            ((value & (0xff << 8)) >> 8);",
          "59: }",
          "61: static inline uint32_t endian_conv_32(uint32_t value)",
          "62: {",
          "63:     return ((value & (0xff))       << 24) | \\",
          "64:            ((value & (0xff << 8))  << 8)  | \\",
          "65:            ((value & (0xff << 16)) >> 8)  | \\",
          "66:            ((value & (0xff << 24)) >> 24);",
          "67: }",
          "69: static inline uint64_t endian_conv_64(uint64_t value)",
          "70: {",
          "71:     return ((value & (0xffULL))       << 56) | \\",
          "72:            ((value & (0xffULL << 8))  << 40) | \\",
          "73:            ((value & (0xffULL << 16)) << 24) | \\",
          "74:            ((value & (0xffULL << 24)) << 8)  | \\",
          "75:            ((value & (0xffULL << 32)) >> 8)  | \\",
          "76:            ((value & (0xffULL << 40)) >> 24) | \\",
          "77:            ((value & (0xffULL << 48)) >> 40) | \\",
          "78:            ((value & (0xffULL << 56)) >> 56);",
          "79: }",
          "81: #define HOST_TO_BE_16(value) endian_conv_16(value)",
          "82: #define HOST_TO_BE_32(value) endian_conv_32(value)",
          "83: #define HOST_TO_BE_64(value) endian_conv_64(value)",
          "84: #define BE_TO_HOST_16(value) endian_conv_16(value)",
          "85: #define BE_TO_HOST_32(value) endian_conv_32(value)",
          "86: #define BE_TO_HOST_64(value) endian_conv_64(value)",
          "",
          "---------------"
        ],
        "lib/tss2_mu.h||lib/tss2_mu.h": [
          "File: lib/tss2_mu.h -> lib/tss2_mu.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #ifndef MARSHAL_H",
          "30: #define MARSHAL_H",
          "32: #include <stdlib.h>",
          "33: #include <sapi/tpm20.h>",
          "35: #define TSS2_TYPES_RC_LAYER TSS2_ERROR_LEVEL(14)",
          "36: #define TSS2_TYPES_RC_BAD_REFERENCE \\",
          "37:     ((TSS2_RC)(TSS2_TYPES_RC_LAYER | TSS2_BASE_RC_BAD_REFERENCE))",
          "38: #define TSS2_TYPES_RC_INSUFFICIENT_BUFFER \\",
          "39:     ((TSS2_RC)(TSS2_TYPES_RC_LAYER | TSS2_BASE_RC_INSUFFICIENT_BUFFER))",
          "41: #ifdef __cplusplus",
          "42: extern \"C\" {",
          "43: #endif",
          "45: TSS2_RC",
          "46: Tss2_MU_BYTE_Marshal(",
          "47:     BYTE           src,",
          "48:     uint8_t         buffer[],",
          "49:     size_t          buffer_size,",
          "50:     size_t         *offset);",
          "52: TSS2_RC",
          "53: Tss2_MU_BYTE_Unmarshal(",
          "54:     uint8_t const   buffer[],",
          "55:     size_t          buffer_size,",
          "56:     size_t         *offset,",
          "57:     BYTE           *dest);",
          "59: TSS2_RC",
          "60: Tss2_MU_INT8_Marshal(",
          "61:     INT8            src,",
          "62:     uint8_t         buffer[],",
          "63:     size_t          buffer_size,",
          "64:     size_t         *offset);",
          "66: TSS2_RC",
          "67: Tss2_MU_INT8_Unmarshal(",
          "68:     uint8_t const   buffer[],",
          "69:     size_t          buffer_size,",
          "70:     size_t         *offset,",
          "71:     INT8           *dest);",
          "73: TSS2_RC",
          "74: Tss2_MU_INT16_Marshal(",
          "75:     INT16           src,",
          "76:     uint8_t         buffer[],",
          "77:     size_t          buffer_size,",
          "78:     size_t         *offset);",
          "80: TSS2_RC",
          "81: Tss2_MU_INT16_Unmarshal(",
          "82:     uint8_t const   buffer[],",
          "83:     size_t          buffer_size,",
          "84:     size_t         *offset,",
          "85:     INT16          *dest);",
          "87: TSS2_RC",
          "88: Tss2_MU_INT32_Marshal(",
          "89:     INT32           src,",
          "90:     uint8_t         buffer[],",
          "91:     size_t          buffer_size,",
          "92:     size_t         *offset);",
          "94: TSS2_RC",
          "95: Tss2_MU_INT32_Unmarshal(",
          "96:     uint8_t const   buffer[],",
          "97:     size_t          buffer_size,",
          "98:     size_t         *offset,",
          "99:     INT32          *dest);",
          "101: TSS2_RC",
          "102: Tss2_MU_INT64_Marshal(",
          "103:     INT64           src,",
          "104:     uint8_t         buffer[],",
          "105:     size_t          buffer_size,",
          "106:     size_t         *offset);",
          "108: TSS2_RC",
          "109: Tss2_MU_INT64_Unmarshal(",
          "110:     uint8_t const   buffer[],",
          "111:     size_t          buffer_size,",
          "112:     size_t         *offset,",
          "113:     INT64          *dest);",
          "115: TSS2_RC",
          "116: Tss2_MU_UINT8_Marshal(",
          "117:     UINT8           src,",
          "118:     uint8_t         buffer[],",
          "119:     size_t          buffer_size,",
          "120:     size_t         *offset);",
          "122: TSS2_RC",
          "123: Tss2_MU_UINT8_Unmarshal(",
          "124:     uint8_t const   buffer[],",
          "125:     size_t          buffer_size,",
          "126:     size_t         *offset,",
          "127:     UINT8          *dest);",
          "129: TSS2_RC",
          "130: Tss2_MU_UINT16_Marshal(",
          "131:     UINT16          src,",
          "132:     uint8_t         buffer[],",
          "133:     size_t          buffer_size,",
          "134:     size_t         *offset);",
          "136: TSS2_RC",
          "137: Tss2_MU_UINT16_Unmarshal(",
          "138:     uint8_t const   buffer[],",
          "139:     size_t          buffer_size,",
          "140:     size_t         *offset,",
          "141:     UINT16         *dest);",
          "143: TSS2_RC",
          "144: Tss2_MU_UINT32_Marshal(",
          "145:     UINT32          src,",
          "146:     uint8_t         buffer[],",
          "147:     size_t          buffer_size,",
          "148:     size_t         *offset);",
          "150: TSS2_RC",
          "151: Tss2_MU_UINT32_Unmarshal(",
          "152:     uint8_t const   buffer[],",
          "153:     size_t          buffer_size,",
          "154:     size_t         *offset,",
          "155:     UINT32         *dest);",
          "157: TSS2_RC",
          "158: Tss2_MU_UINT64_Marshal(",
          "159:     UINT64          src,",
          "160:     uint8_t         buffer[],",
          "161:     size_t          buffer_size,",
          "162:     size_t         *offset);",
          "164: TSS2_RC",
          "165: Tss2_MU_UINT64_Unmarshal(",
          "166:     uint8_t const   buffer[],",
          "167:     size_t          buffer_size,",
          "168:     size_t         *offset,",
          "169:     UINT64         *dest);",
          "171: TSS2_RC",
          "172: Tss2_MU_TPM_CC_Marshal(",
          "173:     TPM_CC          src,",
          "174:     uint8_t         buffer[],",
          "175:     size_t          buffer_size,",
          "176:     size_t         *offset);",
          "178: TSS2_RC",
          "179: Tss2_MU_TPM_CC_Unmarshal(",
          "180:     uint8_t const   buffer[],",
          "181:     size_t          buffer_size,",
          "182:     size_t         *offset,",
          "183:     TPM_CC         *dest);",
          "185: TSS2_RC",
          "186: Tss2_MU_TPM_ST_Marshal(",
          "187:     TPM_ST          src,",
          "188:     uint8_t         buffer[],",
          "189:     size_t          buffer_size,",
          "190:     size_t         *offset);",
          "192: TSS2_RC",
          "193: Tss2_MU_TPM_ST_Unmarshal(",
          "194:     uint8_t const   buffer[],",
          "195:     size_t          buffer_size,",
          "196:     size_t         *offset,",
          "197:     TPM_ST         *dest);",
          "199: TSS2_RC",
          "200: Tss2_MU_TPMA_ALGORITHM_Marshal(",
          "201:     TPMA_ALGORITHM  src,",
          "202:     uint8_t         buffer[],",
          "203:     size_t          buffer_size,",
          "204:     size_t          *offset);",
          "206: TSS2_RC",
          "207: Tss2_MU_TPMA_ALGORITHM_Unmarshal(",
          "208:     uint8_t const   buffer[],",
          "209:     size_t          buffer_size,",
          "210:     size_t         *offset,",
          "211:     TPMA_ALGORITHM *dest);",
          "213: TSS2_RC",
          "214: Tss2_MU_TPMA_CC_Marshal(",
          "215:     TPMA_CC         src,",
          "216:     uint8_t         buffer[],",
          "217:     size_t          buffer_size,",
          "218:     size_t         *offset);",
          "220: TSS2_RC",
          "221: Tss2_MU_TPMA_CC_Unmarshal(",
          "222:     uint8_t const   buffer[],",
          "223:     size_t          buffer_size,",
          "224:     size_t         *offset,",
          "225:     TPMA_CC        *dest);",
          "227: TSS2_RC",
          "228: Tss2_MU_TPMA_LOCALITY_Marshal(",
          "229:     TPMA_LOCALITY   src,",
          "230:     uint8_t         buffer[],",
          "231:     size_t          buffer_size,",
          "232:     size_t         *offset);",
          "234: TSS2_RC",
          "235: Tss2_MU_TPMA_LOCALITY_Unmarshal(",
          "236:     uint8_t const   buffer[],",
          "237:     size_t          buffer_size,",
          "238:     size_t         *offset,",
          "239:     TPMA_LOCALITY  *dest);",
          "240: TSS2_RC",
          "242: Tss2_MU_TPMA_NV_Marshal(",
          "243:     TPMA_NV         src,",
          "244:     uint8_t         buffer[],",
          "245:     size_t          buffer_size,",
          "246:     size_t         *offset);",
          "248: TSS2_RC",
          "249: Tss2_MU_TPMA_NV_Unmarshal(",
          "250:     uint8_t const   buffer[],",
          "251:     size_t          buffer_size,",
          "252:     size_t         *offset,",
          "253:     TPMA_NV        *dest);",
          "255: TSS2_RC",
          "256: Tss2_MU_TPMA_OBJECT_Marshal(",
          "257:     TPMA_OBJECT     src,",
          "258:     uint8_t         buffer[],",
          "259:     size_t          buffer_size,",
          "260:     size_t         *offset);",
          "262: TSS2_RC",
          "263: Tss2_MU_TPMA_OBJECT_Unmarshal(",
          "264:     uint8_t const   buffer[],",
          "265:     size_t          buffer_size,",
          "266:     size_t         *offset,",
          "267:     TPMA_OBJECT    *dest);",
          "269: TSS2_RC",
          "270: Tss2_MU_TPMA_PERMANENT_Marshal(",
          "271:     TPMA_PERMANENT  src,",
          "272:     uint8_t         buffer[],",
          "273:     size_t          buffer_size,",
          "274:     size_t         *offset);",
          "276: TSS2_RC",
          "277: Tss2_MU_TPMA_PERMANENT_Unmarshal(",
          "278:     uint8_t const   buffer[],",
          "279:     size_t          buffer_size,",
          "280:     size_t         *offset,",
          "281:     TPMA_PERMANENT *dest);",
          "283: TSS2_RC",
          "284: Tss2_MU_TPMA_SESSION_Marshal(",
          "285:     TPMA_SESSION    src,",
          "286:     uint8_t         buffer[],",
          "287:     size_t          buffer_size,",
          "288:     size_t         *offset);",
          "290: TSS2_RC",
          "291: Tss2_MU_TPMA_SESSION_Unmarshal(",
          "292:     uint8_t const   buffer[],",
          "293:     size_t          buffer_size,",
          "294:     size_t         *offset,",
          "295:     TPMA_SESSION   *dest);",
          "297: TSS2_RC",
          "298: Tss2_MU_TPMA_STARTUP_CLEAR_Marshal(",
          "299:     TPMA_STARTUP_CLEAR src,",
          "300:     uint8_t         buffer[],",
          "301:     size_t          buffer_size,",
          "302:     size_t         *offset);",
          "304: TSS2_RC",
          "305: Tss2_MU_TPMA_STARTUP_CLEAR_Unmarshal(",
          "306:     uint8_t const   buffer[],",
          "307:     size_t          buffer_size,",
          "308:     size_t         *offset,",
          "309:     TPMA_STARTUP_CLEAR *dest);",
          "311: TSS2_RC",
          "312: Tss2_MU_TPM2B_DIGEST_Marshal(",
          "313:     TPM2B_DIGEST const *src,",
          "314:     uint8_t         buffer[],",
          "315:     size_t          buffer_size,",
          "316:     size_t         *offset);",
          "318: TSS2_RC",
          "319: Tss2_MU_TPM2B_DIGEST_Unmarshal(",
          "320:     uint8_t const   buffer[],",
          "321:     size_t          buffer_size,",
          "322:     size_t         *offset,",
          "323:     TPM2B_DIGEST   *dest);",
          "325: TSS2_RC",
          "326: Tss2_MU_TPM2B_ATTEST_Marshal(",
          "327:     TPM2B_ATTEST const *src,",
          "328:     uint8_t         buffer[],",
          "329:     size_t          buffer_size,",
          "330:     size_t         *offset);",
          "332: TSS2_RC",
          "333: Tss2_MU_TPM2B_ATTEST_Unmarshal(",
          "334:     uint8_t const   buffer[],",
          "335:     size_t          buffer_size,",
          "336:     size_t         *offset,",
          "337:     TPM2B_ATTEST   *dest);",
          "339: TSS2_RC",
          "340: Tss2_MU_TPM2B_NAME_Marshal(",
          "341:     TPM2B_NAME const *src,",
          "342:     uint8_t         buffer[],",
          "343:     size_t          buffer_size,",
          "344:     size_t         *offset);",
          "346: TSS2_RC",
          "347: Tss2_MU_TPM2B_NAME_Unmarshal(",
          "348:     uint8_t const   buffer[],",
          "349:     size_t          buffer_size,",
          "350:     size_t         *offset,",
          "351:     TPM2B_NAME     *dest);",
          "353: TSS2_RC",
          "354: Tss2_MU_TPM2B_MAX_NV_BUFFER_Marshal(",
          "355:     TPM2B_MAX_NV_BUFFER const *src,",
          "356:     uint8_t         buffer[],",
          "357:     size_t          buffer_size,",
          "358:     size_t         *offset);",
          "360: TSS2_RC",
          "361: Tss2_MU_TPM2B_MAX_NV_BUFFER_Unmarshal(",
          "362:     uint8_t const   buffer[],",
          "363:     size_t          buffer_size,",
          "364:     size_t         *offset,",
          "365:     TPM2B_MAX_NV_BUFFER *dest);",
          "367: TSS2_RC",
          "368: Tss2_MU_TPM2B_SENSITIVE_DATA_Marshal(",
          "369:     TPM2B_SENSITIVE_DATA const *src,",
          "370:     uint8_t         buffer[],",
          "371:     size_t          buffer_size,",
          "372:     size_t         *offset);",
          "374: TSS2_RC",
          "375: Tss2_MU_TPM2B_SENSITIVE_DATA_Unmarshal(",
          "376:     uint8_t const   buffer[],",
          "377:     size_t          buffer_size,",
          "378:     size_t         *offset,",
          "379:     TPM2B_SENSITIVE_DATA *dest);",
          "381: TSS2_RC",
          "382: Tss2_MU_TPM2B_ECC_PARAMETER_Marshal(",
          "383:     TPM2B_ECC_PARAMETER const *src,",
          "384:     uint8_t         buffer[],",
          "385:     size_t          buffer_size,",
          "386:     size_t         *offset);",
          "388: TSS2_RC",
          "389: Tss2_MU_TPM2B_ECC_PARAMETER_Unmarshal(",
          "390:     uint8_t const   buffer[],",
          "391:     size_t          buffer_size,",
          "392:     size_t         *offset,",
          "393:     TPM2B_ECC_PARAMETER *dest);",
          "395: TSS2_RC",
          "396: Tss2_MU_TPM2B_PUBLIC_KEY_RSA_Marshal(",
          "397:     TPM2B_PUBLIC_KEY_RSA const *src,",
          "398:     uint8_t         buffer[],",
          "399:     size_t          buffer_size,",
          "400:     size_t         *offset);",
          "402: TSS2_RC",
          "403: Tss2_MU_TPM2B_PUBLIC_KEY_RSA_Unmarshal(",
          "404:     uint8_t const   buffer[],",
          "405:     size_t          buffer_size,",
          "406:     size_t         *offset,",
          "407:     TPM2B_PUBLIC_KEY_RSA *dest);",
          "409: TSS2_RC",
          "410: Tss2_MU_TPM2B_PRIVATE_KEY_RSA_Marshal(",
          "411:     TPM2B_PRIVATE_KEY_RSA const *src,",
          "412:     uint8_t         buffer[],",
          "413:     size_t          buffer_size,",
          "414:     size_t         *offset);",
          "416: TSS2_RC",
          "417: Tss2_MU_TPM2B_PRIVATE_KEY_RSA_Unmarshal(",
          "418:     uint8_t const   buffer[],",
          "419:     size_t          buffer_size,",
          "420:     size_t         *offset,",
          "421:     TPM2B_PRIVATE_KEY_RSA *dest);",
          "423: TSS2_RC",
          "424: Tss2_MU_TPM2B_PRIVATE_Marshal(",
          "425:     TPM2B_PRIVATE const *src,",
          "426:     uint8_t         buffer[],",
          "427:     size_t          buffer_size,",
          "428:     size_t         *offset);",
          "430: TSS2_RC",
          "431: Tss2_MU_TPM2B_PRIVATE_Unmarshal(",
          "432:     uint8_t const   buffer[],",
          "433:     size_t          buffer_size,",
          "434:     size_t         *offset,",
          "435:     TPM2B_PRIVATE  *dest);",
          "437: TSS2_RC",
          "438: Tss2_MU_TPM2B_CONTEXT_SENSITIVE_Marshal(",
          "439:     TPM2B_CONTEXT_SENSITIVE const *src,",
          "440:     uint8_t         buffer[],",
          "441:     size_t          buffer_size,",
          "442:     size_t         *offset);",
          "444: TSS2_RC",
          "445: Tss2_MU_TPM2B_CONTEXT_SENSITIVE_Unmarshal(",
          "446:     uint8_t const   buffer[],",
          "447:     size_t          buffer_size,",
          "448:     size_t         *offset,",
          "449:     TPM2B_CONTEXT_SENSITIVE *dest);",
          "451: TSS2_RC",
          "452: Tss2_MU_TPM2B_CONTEXT_DATA_Marshal(",
          "453:     TPM2B_CONTEXT_DATA const *src,",
          "454:     uint8_t         buffer[],",
          "455:     size_t          buffer_size,",
          "456:     size_t         *offset);",
          "458: TSS2_RC",
          "459: Tss2_MU_TPM2B_CONTEXT_DATA_Unmarshal(",
          "460:     uint8_t const   buffer[],",
          "461:     size_t          buffer_size,",
          "462:     size_t         *offset,",
          "463:     TPM2B_CONTEXT_DATA *dest);",
          "465: TSS2_RC",
          "466: Tss2_MU_TPM2B_DATA_Marshal(",
          "467:     TPM2B_DATA      const *src,",
          "468:     uint8_t         buffer[],",
          "469:     size_t          buffer_size,",
          "470:     size_t         *offset);",
          "472: TSS2_RC",
          "473: Tss2_MU_TPM2B_DATA_Unmarshal(",
          "474:     uint8_t const   buffer[],",
          "475:     size_t          buffer_size,",
          "476:     size_t         *offset,",
          "477:     TPM2B_DATA     *dest);",
          "479: TSS2_RC",
          "480: Tss2_MU_TPM2B_SYM_KEY_Marshal(",
          "481:     TPM2B_SYM_KEY   const *src,",
          "482:     uint8_t         buffer[],",
          "483:     size_t          buffer_size,",
          "484:     size_t         *offset);",
          "486: TSS2_RC",
          "487: Tss2_MU_TPM2B_SYM_KEY_Unmarshal(",
          "488:     uint8_t const   buffer[],",
          "489:     size_t          buffer_size,",
          "490:     size_t         *offset,",
          "491:     TPM2B_SYM_KEY  *dest);",
          "493: TSS2_RC",
          "494: Tss2_MU_TPM2B_ECC_POINT_Marshal(",
          "495:     TPM2B_ECC_POINT const *src,",
          "496:     uint8_t         buffer[],",
          "497:     size_t          buffer_size,",
          "498:     size_t         *offset);",
          "500: TSS2_RC",
          "501: Tss2_MU_TPM2B_ECC_POINT_Unmarshal(",
          "502:     uint8_t const   buffer[],",
          "503:     size_t          buffer_size,",
          "504:     size_t          *offset,",
          "505:     TPM2B_ECC_POINT *dest);",
          "507: TSS2_RC",
          "508: Tss2_MU_TPM2B_NV_PUBLIC_Marshal(",
          "509:     TPM2B_NV_PUBLIC const *src,",
          "510:     uint8_t         buffer[],",
          "511:     size_t          buffer_size,",
          "512:     size_t         *offset);",
          "514: TSS2_RC",
          "515: Tss2_MU_TPM2B_NV_PUBLIC_Unmarshal(",
          "516:     uint8_t const   buffer[],",
          "517:     size_t          buffer_size,",
          "518:     size_t          *offset,",
          "519:     TPM2B_NV_PUBLIC *dest);",
          "521: TSS2_RC",
          "522: Tss2_MU_TPM2B_SENSITIVE_Marshal(",
          "523:     TPM2B_SENSITIVE const *src,",
          "524:     uint8_t         buffer[],",
          "525:     size_t          buffer_size,",
          "526:     size_t         *offset);",
          "528: TSS2_RC",
          "529: Tss2_MU_TPM2B_SENSITIVE_Unmarshal(",
          "530:     uint8_t const   buffer[],",
          "531:     size_t          buffer_size,",
          "532:     size_t          *offset,",
          "533:     TPM2B_SENSITIVE *dest);",
          "535: TSS2_RC",
          "536: Tss2_MU_TPM2B_SENSITIVE_CREATE_Marshal(",
          "537:     TPM2B_SENSITIVE_CREATE const *src,",
          "538:     uint8_t         buffer[],",
          "539:     size_t          buffer_size,",
          "540:     size_t         *offset);",
          "542: TSS2_RC",
          "543: Tss2_MU_TPM2B_SENSITIVE_CREATE_Unmarshal(",
          "544:     uint8_t const   buffer[],",
          "545:     size_t          buffer_size,",
          "546:     size_t          *offset,",
          "547:     TPM2B_SENSITIVE_CREATE *dest);",
          "549: TSS2_RC",
          "550: Tss2_MU_TPM2B_CREATION_DATA_Marshal(",
          "551:     TPM2B_CREATION_DATA const *src,",
          "552:     uint8_t         buffer[],",
          "553:     size_t          buffer_size,",
          "554:     size_t         *offset);",
          "556: TSS2_RC",
          "557: Tss2_MU_TPM2B_CREATION_DATA_Unmarshal(",
          "558:     uint8_t const   buffer[],",
          "559:     size_t          buffer_size,",
          "560:     size_t          *offset,",
          "561:     TPM2B_CREATION_DATA *dest);",
          "563: TSS2_RC",
          "564: Tss2_MU_TPM2B_PUBLIC_Marshal(",
          "565:     TPM2B_PUBLIC    const *src,",
          "566:     uint8_t         buffer[],",
          "567:     size_t          buffer_size,",
          "568:     size_t         *offset);",
          "570: TSS2_RC",
          "571: Tss2_MU_TPM2B_PUBLIC_Unmarshal(",
          "572:     uint8_t const   buffer[],",
          "573:     size_t          buffer_size,",
          "574:     size_t          *offset,",
          "575:     TPM2B_PUBLIC    *dest);",
          "577: TSS2_RC",
          "578: Tss2_MU_TPM2B_ENCRYPTED_SECRET_Marshal(",
          "579:     TPM2B_ENCRYPTED_SECRET  const *src,",
          "580:     uint8_t         buffer[],",
          "581:     size_t          buffer_size,",
          "582:     size_t         *offset);",
          "584: TSS2_RC",
          "585: Tss2_MU_TPM2B_ENCRYPTED_SECRET_Unmarshal(",
          "586:     uint8_t const  buffer[],",
          "587:     size_t          buffer_size,",
          "588:     size_t          *offset,",
          "589:     TPM2B_ENCRYPTED_SECRET *dest);",
          "591: TSS2_RC",
          "592: Tss2_MU_TPM2B_ID_OBJECT_Marshal(",
          "593:     TPM2B_ID_OBJECT const *src,",
          "594:     uint8_t         buffer[],",
          "595:     size_t          buffer_size,",
          "596:     size_t         *offset);",
          "598: TSS2_RC",
          "599: Tss2_MU_TPM2B_ID_OBJECT_Unmarshal(",
          "600:     uint8_t const  buffer[],",
          "601:     size_t          buffer_size,",
          "602:     size_t          *offset,",
          "603:     TPM2B_ID_OBJECT *dest);",
          "605: TSS2_RC",
          "606: Tss2_MU_TPM2B_IV_Marshal(",
          "607:     TPM2B_IV const *src,",
          "608:     uint8_t         buffer[],",
          "609:     size_t          buffer_size,",
          "610:     size_t         *offset);",
          "612: TSS2_RC",
          "613: Tss2_MU_TPM2B_IV_Unmarshal(",
          "614:     uint8_t const  buffer[],",
          "615:     size_t          buffer_size,",
          "616:     size_t          *offset,",
          "617:     TPM2B_IV        *dest);",
          "619: TSS2_RC",
          "620: Tss2_MU_TPM2B_AUTH_Marshal(",
          "621:     TPM2B_AUTH const *src,",
          "622:     uint8_t         buffer[],",
          "623:     size_t          buffer_size,",
          "624:     size_t         *offset);",
          "626: TSS2_RC",
          "627: Tss2_MU_TPM2B_AUTH_Unmarshal(",
          "628:     uint8_t const  buffer[],",
          "629:     size_t          buffer_size,",
          "630:     size_t          *offset,",
          "631:     TPM2B_AUTH      *dest);",
          "633: TSS2_RC",
          "634: Tss2_MU_TPM2B_EVENT_Marshal(",
          "635:     TPM2B_EVENT const *src,",
          "636:     uint8_t         buffer[],",
          "637:     size_t          buffer_size,",
          "638:     size_t         *offset);",
          "640: TSS2_RC",
          "641: Tss2_MU_TPM2B_EVENT_Unmarshal(",
          "642:     uint8_t const  buffer[],",
          "643:     size_t          buffer_size,",
          "644:     size_t          *offset,",
          "645:     TPM2B_EVENT     *dest);",
          "647: TSS2_RC",
          "648: Tss2_MU_TPM2B_MAX_BUFFER_Marshal(",
          "649:     TPM2B_MAX_BUFFER const *src,",
          "650:     uint8_t         buffer[],",
          "651:     size_t          buffer_size,",
          "652:     size_t         *offset);",
          "654: TSS2_RC",
          "655: Tss2_MU_TPM2B_MAX_BUFFER_Unmarshal(",
          "656:     uint8_t const   buffer[],",
          "657:     size_t          buffer_size,",
          "658:     size_t          *offset,",
          "659:     TPM2B_MAX_BUFFER *dest);",
          "661: TSS2_RC",
          "662: Tss2_MU_TPM2B_NONCE_Marshal(",
          "663:     TPM2B_NONCE const *src,",
          "664:     uint8_t         buffer[],",
          "665:     size_t          buffer_size,",
          "666:     size_t         *offset);",
          "668: TSS2_RC",
          "669: Tss2_MU_TPM2B_NONCE_Unmarshal(",
          "670:     uint8_t const   buffer[],",
          "671:     size_t          buffer_size,",
          "672:     size_t          *offset,",
          "673:     TPM2B_NONCE     *dest);",
          "675: TSS2_RC",
          "676: Tss2_MU_TPM2B_OPERAND_Marshal(",
          "677:     TPM2B_OPERAND const *src,",
          "678:     uint8_t         buffer[],",
          "679:     size_t          buffer_size,",
          "680:     size_t         *offset);",
          "682: TSS2_RC",
          "683: Tss2_MU_TPM2B_OPERAND_Unmarshal(",
          "684:     uint8_t const   buffer[],",
          "685:     size_t          buffer_size,",
          "686:     size_t          *offset,",
          "687:     TPM2B_OPERAND   *dest);",
          "689: TSS2_RC",
          "690: Tss2_MU_TPM2B_TIMEOUT_Marshal(",
          "691:     TPM2B_TIMEOUT const *src,",
          "692:     uint8_t         buffer[],",
          "693:     size_t          buffer_size,",
          "694:     size_t         *offset);",
          "696: TSS2_RC",
          "697: Tss2_MU_TPM2B_TIMEOUT_Unmarshal(",
          "698:     uint8_t const   buffer[],",
          "699:     size_t          buffer_size,",
          "700:     size_t          *offset,",
          "701:     TPM2B_TIMEOUT   *dest);",
          "703: TSS2_RC",
          "704: Tss2_MU_TPMS_CONTEXT_Marshal(",
          "705:     TPMS_CONTEXT    const *src,",
          "706:     uint8_t         buffer[],",
          "707:     size_t          buffer_size,",
          "708:     size_t         *offset);",
          "710: TSS2_RC",
          "711: Tss2_MU_TPMS_CONTEXT_Unmarshal(",
          "712:     uint8_t const   buffer[],",
          "713:     size_t          buffer_size,",
          "714:     size_t         *offset,",
          "715:     TPMS_CONTEXT   *dest);",
          "717: TSS2_RC",
          "718: Tss2_MU_TPMS_TIME_INFO_Marshal(",
          "719:     TPMS_TIME_INFO  const *src,",
          "720:     uint8_t         buffer[],",
          "721:     size_t          buffer_size,",
          "722:     size_t         *offset);",
          "724: TSS2_RC",
          "725: Tss2_MU_TPMS_TIME_INFO_Unmarshal(",
          "726:     uint8_t const   buffer[],",
          "727:     size_t          buffer_size,",
          "728:     size_t         *offset,",
          "729:     TPMS_TIME_INFO *dest);",
          "731: TSS2_RC",
          "732: Tss2_MU_TPMS_ECC_POINT_Marshal(",
          "733:     TPMS_ECC_POINT  const *src,",
          "734:     uint8_t         buffer[],",
          "735:     size_t          buffer_size,",
          "736:     size_t         *offset);",
          "738: TSS2_RC",
          "739: Tss2_MU_TPMS_ECC_POINT_Unmarshal(",
          "740:     uint8_t const   buffer[],",
          "741:     size_t          buffer_size,",
          "742:     size_t         *offset,",
          "743:     TPMS_ECC_POINT *dest);",
          "745: TSS2_RC",
          "746: Tss2_MU_TPMS_NV_PUBLIC_Marshal(",
          "747:     TPMS_NV_PUBLIC  const *src,",
          "748:     uint8_t         buffer[],",
          "749:     size_t          buffer_size,",
          "750:     size_t         *offset);",
          "752: TSS2_RC",
          "753: Tss2_MU_TPMS_NV_PUBLIC_Unmarshal(",
          "754:     uint8_t const   buffer[],",
          "755:     size_t          buffer_size,",
          "756:     size_t         *offset,",
          "757:     TPMS_NV_PUBLIC *dest);",
          "759: TSS2_RC",
          "760: Tss2_MU_TPMS_ALG_PROPERTY_Marshal(",
          "761:     TPMS_ALG_PROPERTY  const *src,",
          "762:     uint8_t         buffer[],",
          "763:     size_t          buffer_size,",
          "764:     size_t         *offset);",
          "766: TSS2_RC",
          "767: Tss2_MU_TPMS_ALG_PROPERTY_Unmarshal(",
          "768:     uint8_t const   buffer[],",
          "769:     size_t          buffer_size,",
          "770:     size_t         *offset,",
          "771:     TPMS_ALG_PROPERTY *dest);",
          "773: TSS2_RC",
          "774: Tss2_MU_TPMS_ALGORITHM_DESCRIPTION_Marshal(",
          "775:     TPMS_ALGORITHM_DESCRIPTION  const *src,",
          "776:     uint8_t         buffer[],",
          "777:     size_t          buffer_size,",
          "778:     size_t         *offset);",
          "780: TSS2_RC",
          "781: Tss2_MU_TPMS_ALGORITHM_DESCRIPTION_Unmarshal(",
          "782:     uint8_t const   buffer[],",
          "783:     size_t          buffer_size,",
          "784:     size_t         *offset,",
          "785:     TPMS_ALGORITHM_DESCRIPTION *dest);",
          "787: TSS2_RC",
          "788: Tss2_MU_TPMS_TAGGED_PROPERTY_Marshal(",
          "789:     TPMS_TAGGED_PROPERTY  const *src,",
          "790:     uint8_t         buffer[],",
          "791:     size_t          buffer_size,",
          "792:     size_t         *offset);",
          "794: TSS2_RC",
          "795: Tss2_MU_TPMS_TAGGED_PROPERTY_Unmarshal(",
          "796:     uint8_t const   buffer[],",
          "797:     size_t          buffer_size,",
          "798:     size_t         *offset,",
          "799:     TPMS_TAGGED_PROPERTY *dest);",
          "801: TSS2_RC",
          "802: Tss2_MU_TPMS_CLOCK_INFO_Marshal(",
          "803:     TPMS_CLOCK_INFO  const *src,",
          "804:     uint8_t         buffer[],",
          "805:     size_t          buffer_size,",
          "806:     size_t         *offset);",
          "808: TSS2_RC",
          "809: Tss2_MU_TPMS_CLOCK_INFO_Unmarshal(",
          "810:     uint8_t const   buffer[],",
          "811:     size_t          buffer_size,",
          "812:     size_t         *offset,",
          "813:     TPMS_CLOCK_INFO *dest);",
          "815: TSS2_RC",
          "816: Tss2_MU_TPMS_TIME_ATTEST_INFO_Marshal(",
          "817:     TPMS_TIME_ATTEST_INFO  const *src,",
          "818:     uint8_t         buffer[],",
          "819:     size_t          buffer_size,",
          "820:     size_t         *offset);",
          "822: TSS2_RC",
          "823: Tss2_MU_TPMS_TIME_ATTEST_INFO_Unmarshal(",
          "824:     uint8_t const   buffer[],",
          "825:     size_t          buffer_size,",
          "826:     size_t         *offset,",
          "827:     TPMS_TIME_ATTEST_INFO *dest);",
          "829: TSS2_RC",
          "830: Tss2_MU_TPMS_CERTIFY_INFO_Marshal(",
          "831:     TPMS_CERTIFY_INFO  const *src,",
          "832:     uint8_t         buffer[],",
          "833:     size_t          buffer_size,",
          "834:     size_t         *offset);",
          "836: TSS2_RC",
          "837: Tss2_MU_TPMS_CERTIFY_INFO_Unmarshal(",
          "838:     uint8_t const   buffer[],",
          "839:     size_t          buffer_size,",
          "840:     size_t         *offset,",
          "841:     TPMS_CERTIFY_INFO *dest);",
          "843: TSS2_RC",
          "844: Tss2_MU_TPMS_COMMAND_AUDIT_INFO_Marshal(",
          "845:     TPMS_COMMAND_AUDIT_INFO  const *src,",
          "846:     uint8_t         buffer[],",
          "847:     size_t          buffer_size,",
          "848:     size_t         *offset);",
          "850: TSS2_RC",
          "851: Tss2_MU_TPMS_COMMAND_AUDIT_INFO_Unmarshal(",
          "852:     uint8_t const   buffer[],",
          "853:     size_t          buffer_size,",
          "854:     size_t         *offset,",
          "855:     TPMS_COMMAND_AUDIT_INFO *dest);",
          "857: TSS2_RC",
          "858: Tss2_MU_TPMS_SESSION_AUDIT_INFO_Marshal(",
          "859:     TPMS_SESSION_AUDIT_INFO  const *src,",
          "860:     uint8_t         buffer[],",
          "861:     size_t          buffer_size,",
          "862:     size_t         *offset);",
          "864: TSS2_RC",
          "865: Tss2_MU_TPMS_SESSION_AUDIT_INFO_Unmarshal(",
          "866:     uint8_t const   buffer[],",
          "867:     size_t          buffer_size,",
          "868:     size_t         *offset,",
          "869:     TPMS_SESSION_AUDIT_INFO *dest);",
          "871: TSS2_RC",
          "872: Tss2_MU_TPMS_CREATION_INFO_Marshal(",
          "873:     TPMS_CREATION_INFO  const *src,",
          "874:     uint8_t         buffer[],",
          "875:     size_t          buffer_size,",
          "876:     size_t         *offset);",
          "878: TSS2_RC",
          "879: Tss2_MU_TPMS_CREATION_INFO_Unmarshal(",
          "880:     uint8_t const   buffer[],",
          "881:     size_t          buffer_size,",
          "882:     size_t         *offset,",
          "883:     TPMS_CREATION_INFO *dest);",
          "885: TSS2_RC",
          "886: Tss2_MU_TPMS_NV_CERTIFY_INFO_Marshal(",
          "887:     TPMS_NV_CERTIFY_INFO  const *src,",
          "888:     uint8_t         buffer[],",
          "889:     size_t          buffer_size,",
          "890:     size_t         *offset);",
          "892: TSS2_RC",
          "893: Tss2_MU_TPMS_NV_CERTIFY_INFO_Unmarshal(",
          "894:     uint8_t const   buffer[],",
          "895:     size_t          buffer_size,",
          "896:     size_t         *offset,",
          "897:     TPMS_NV_CERTIFY_INFO *dest);",
          "899: TSS2_RC",
          "900: Tss2_MU_TPMS_AUTH_COMMAND_Marshal(",
          "901:     TPMS_AUTH_COMMAND  const *src,",
          "902:     uint8_t         buffer[],",
          "903:     size_t          buffer_size,",
          "904:     size_t         *offset);",
          "906: TSS2_RC",
          "907: Tss2_MU_TPMS_AUTH_COMMAND_Unmarshal(",
          "908:     uint8_t const   buffer[],",
          "909:     size_t          buffer_size,",
          "910:     size_t         *offset,",
          "911:     TPMS_AUTH_COMMAND *dest);",
          "913: TSS2_RC",
          "914: Tss2_MU_TPMS_AUTH_RESPONSE_Marshal(",
          "915:     TPMS_AUTH_RESPONSE  const *src,",
          "916:     uint8_t         buffer[],",
          "917:     size_t          buffer_size,",
          "918:     size_t         *offset);",
          "920: TSS2_RC",
          "921: Tss2_MU_TPMS_AUTH_RESPONSE_Unmarshal(",
          "922:     uint8_t const   buffer[],",
          "923:     size_t          buffer_size,",
          "924:     size_t         *offset,",
          "925:     TPMS_AUTH_RESPONSE *dest);",
          "927: TSS2_RC",
          "928: Tss2_MU_TPMS_SENSITIVE_CREATE_Marshal(",
          "929:     TPMS_SENSITIVE_CREATE  const *src,",
          "930:     uint8_t         buffer[],",
          "931:     size_t          buffer_size,",
          "932:     size_t         *offset);",
          "934: TSS2_RC",
          "935: Tss2_MU_TPMS_SENSITIVE_CREATE_Unmarshal(",
          "936:     uint8_t const   buffer[],",
          "937:     size_t          buffer_size,",
          "938:     size_t         *offset,",
          "939:     TPMS_SENSITIVE_CREATE *dest);",
          "941: TSS2_RC",
          "942: Tss2_MU_TPMS_SCHEME_HASH_Marshal(",
          "943:     TPMS_SCHEME_HASH  const *src,",
          "944:     uint8_t         buffer[],",
          "945:     size_t          buffer_size,",
          "946:     size_t         *offset);",
          "948: TSS2_RC",
          "949: Tss2_MU_TPMS_SCHEME_HASH_Unmarshal(",
          "950:     uint8_t const   buffer[],",
          "951:     size_t          buffer_size,",
          "952:     size_t         *offset,",
          "953:     TPMS_SCHEME_HASH *dest);",
          "955: TSS2_RC",
          "956: Tss2_MU_TPMS_SCHEME_ECDAA_Marshal(",
          "957:     TPMS_SCHEME_ECDAA  const *src,",
          "958:     uint8_t         buffer[],",
          "959:     size_t          buffer_size,",
          "960:     size_t         *offset);",
          "962: TSS2_RC",
          "963: Tss2_MU_TPMS_SCHEME_ECDAA_Unmarshal(",
          "964:     uint8_t const   buffer[],",
          "965:     size_t          buffer_size,",
          "966:     size_t         *offset,",
          "967:     TPMS_SCHEME_ECDAA *dest);",
          "969: TSS2_RC",
          "970: Tss2_MU_TPMS_SCHEME_XOR_Marshal(",
          "971:     TPMS_SCHEME_XOR  const *src,",
          "972:     uint8_t         buffer[],",
          "973:     size_t          buffer_size,",
          "974:     size_t         *offset);",
          "976: TSS2_RC",
          "977: Tss2_MU_TPMS_SCHEME_XOR_Unmarshal(",
          "978:     uint8_t const   buffer[],",
          "979:     size_t          buffer_size,",
          "980:     size_t         *offset,",
          "981:     TPMS_SCHEME_XOR *dest);",
          "983: TSS2_RC",
          "984: Tss2_MU_TPMS_SIGNATURE_RSA_Marshal(",
          "985:     TPMS_SIGNATURE_RSA  const *src,",
          "986:     uint8_t         buffer[],",
          "987:     size_t          buffer_size,",
          "988:     size_t         *offset);",
          "990: TSS2_RC",
          "991: Tss2_MU_TPMS_SIGNATURE_RSA_Unmarshal(",
          "992:     uint8_t const   buffer[],",
          "993:     size_t          buffer_size,",
          "994:     size_t         *offset,",
          "995:     TPMS_SIGNATURE_RSA *dest);",
          "997: TSS2_RC",
          "998: Tss2_MU_TPMS_SIGNATURE_ECC_Marshal(",
          "999:     TPMS_SIGNATURE_ECC  const *src,",
          "1000:     uint8_t         buffer[],",
          "1001:     size_t          buffer_size,",
          "1002:     size_t         *offset);",
          "1004: TSS2_RC",
          "1005: Tss2_MU_TPMS_SIGNATURE_ECC_Unmarshal(",
          "1006:     uint8_t const   buffer[],",
          "1007:     size_t          buffer_size,",
          "1008:     size_t         *offset,",
          "1009:     TPMS_SIGNATURE_ECC *dest);",
          "1011: TSS2_RC",
          "1012: Tss2_MU_TPMS_NV_PIN_COUNTER_PARAMETERS_Marshal(",
          "1013:     TPMS_NV_PIN_COUNTER_PARAMETERS  const *src,",
          "1014:     uint8_t         buffer[],",
          "1015:     size_t          buffer_size,",
          "1016:     size_t         *offset);",
          "1018: TSS2_RC",
          "1019: Tss2_MU_TPMS_NV_PIN_COUNTER_PARAMETERS_Unmarshal(",
          "1020:     uint8_t const   buffer[],",
          "1021:     size_t          buffer_size,",
          "1022:     size_t         *offset,",
          "1023:     TPMS_NV_PIN_COUNTER_PARAMETERS *dest);",
          "1025: TSS2_RC",
          "1026: Tss2_MU_TPMS_CONTEXT_DATA_Marshal(",
          "1027:     TPMS_CONTEXT_DATA  const *src,",
          "1028:     uint8_t         buffer[],",
          "1029:     size_t          buffer_size,",
          "1030:     size_t         *offset);",
          "1032: TSS2_RC",
          "1033: Tss2_MU_TPMS_CONTEXT_DATA_Unmarshal(",
          "1034:     uint8_t const   buffer[],",
          "1035:     size_t          buffer_size,",
          "1036:     size_t         *offset,",
          "1037:     TPMS_CONTEXT_DATA *dest);",
          "1039: TSS2_RC",
          "1040: Tss2_MU_TPMS_PCR_SELECT_Marshal(",
          "1041:     TPMS_PCR_SELECT  const *src,",
          "1042:     uint8_t         buffer[],",
          "1043:     size_t          buffer_size,",
          "1044:     size_t         *offset);",
          "1046: TSS2_RC",
          "1047: Tss2_MU_TPMS_PCR_SELECT_Unmarshal(",
          "1048:     uint8_t const   buffer[],",
          "1049:     size_t          buffer_size,",
          "1050:     size_t         *offset,",
          "1051:     TPMS_PCR_SELECT *dest);",
          "1053: TSS2_RC",
          "1054: Tss2_MU_TPMS_PCR_SELECTION_Marshal(",
          "1055:     TPMS_PCR_SELECTION  const *src,",
          "1056:     uint8_t         buffer[],",
          "1057:     size_t          buffer_size,",
          "1058:     size_t         *offset);",
          "1060: TSS2_RC",
          "1061: Tss2_MU_TPMS_PCR_SELECTION_Unmarshal(",
          "1062:     uint8_t const   buffer[],",
          "1063:     size_t          buffer_size,",
          "1064:     size_t         *offset,",
          "1065:     TPMS_PCR_SELECTION *dest);",
          "1067: TSS2_RC",
          "1068: Tss2_MU_TPMS_TAGGED_PCR_SELECT_Marshal(",
          "1069:     TPMS_TAGGED_PCR_SELECT  const *src,",
          "1070:     uint8_t         buffer[],",
          "1071:     size_t          buffer_size,",
          "1072:     size_t         *offset);",
          "1074: TSS2_RC",
          "1075: Tss2_MU_TPMS_TAGGED_PCR_SELECT_Unmarshal(",
          "1076:     uint8_t const   buffer[],",
          "1077:     size_t          buffer_size,",
          "1078:     size_t         *offset,",
          "1079:     TPMS_TAGGED_PCR_SELECT *dest);",
          "1081: TSS2_RC",
          "1082: Tss2_MU_TPMS_QUOTE_INFO_Marshal(",
          "1083:     TPMS_QUOTE_INFO  const *src,",
          "1084:     uint8_t         buffer[],",
          "1085:     size_t          buffer_size,",
          "1086:     size_t         *offset);",
          "1088: TSS2_RC",
          "1089: Tss2_MU_TPMS_QUOTE_INFO_Unmarshal(",
          "1090:     uint8_t const   buffer[],",
          "1091:     size_t          buffer_size,",
          "1092:     size_t         *offset,",
          "1093:     TPMS_QUOTE_INFO *dest);",
          "1095: TSS2_RC",
          "1096: Tss2_MU_TPMS_CREATION_DATA_Marshal(",
          "1097:     TPMS_CREATION_DATA  const *src,",
          "1098:     uint8_t         buffer[],",
          "1099:     size_t          buffer_size,",
          "1100:     size_t         *offset);",
          "1102: TSS2_RC",
          "1103: Tss2_MU_TPMS_CREATION_DATA_Unmarshal(",
          "1104:     uint8_t const   buffer[],",
          "1105:     size_t          buffer_size,",
          "1106:     size_t         *offset,",
          "1107:     TPMS_CREATION_DATA *dest);",
          "1109: TSS2_RC",
          "1110: Tss2_MU_TPMS_ECC_PARMS_Marshal(",
          "1111:     TPMS_ECC_PARMS  const *src,",
          "1112:     uint8_t         buffer[],",
          "1113:     size_t          buffer_size,",
          "1114:     size_t         *offset);",
          "1116: TSS2_RC",
          "1117: Tss2_MU_TPMS_ECC_PARMS_Unmarshal(",
          "1118:     uint8_t const   buffer[],",
          "1119:     size_t          buffer_size,",
          "1120:     size_t         *offset,",
          "1121:     TPMS_ECC_PARMS *dest);",
          "1123: TSS2_RC",
          "1124: Tss2_MU_TPMS_ATTEST_Marshal(",
          "1125:     TPMS_ATTEST     const *src,",
          "1126:     uint8_t         buffer[],",
          "1127:     size_t          buffer_size,",
          "1128:     size_t         *offset);",
          "1130: TSS2_RC",
          "1131: Tss2_MU_TPMS_ATTEST_Unmarshal(",
          "1132:     uint8_t const   buffer[],",
          "1133:     size_t          buffer_size,",
          "1134:     size_t         *offset,",
          "1135:     TPMS_ATTEST *dest);",
          "1137: TSS2_RC",
          "1138: Tss2_MU_TPMS_ALGORITHM_DETAIL_ECC_Marshal(",
          "1139:     TPMS_ALGORITHM_DETAIL_ECC const *src,",
          "1140:     uint8_t         buffer[],",
          "1141:     size_t          buffer_size,",
          "1142:     size_t         *offset);",
          "1144: TSS2_RC",
          "1145: Tss2_MU_TPMS_ALGORITHM_DETAIL_ECC_Unmarshal(",
          "1146:     uint8_t const   buffer[],",
          "1147:     size_t          buffer_size,",
          "1148:     size_t         *offset,",
          "1149:     TPMS_ALGORITHM_DETAIL_ECC *dest);",
          "1151: TSS2_RC",
          "1152: Tss2_MU_TPMS_CAPABILITY_DATA_Marshal(",
          "1153:     TPMS_CAPABILITY_DATA const *src,",
          "1154:     uint8_t         buffer[],",
          "1155:     size_t          buffer_size,",
          "1156:     size_t         *offset);",
          "1158: TSS2_RC",
          "1159: Tss2_MU_TPMS_CAPABILITY_DATA_Unmarshal(",
          "1160:     uint8_t const   buffer[],",
          "1161:     size_t          buffer_size,",
          "1162:     size_t         *offset,",
          "1163:     TPMS_CAPABILITY_DATA *dest);",
          "1165: TSS2_RC",
          "1166: Tss2_MU_TPMS_KEYEDHASH_PARMS_Marshal(",
          "1167:     TPMS_KEYEDHASH_PARMS const *src,",
          "1168:     uint8_t         buffer[],",
          "1169:     size_t          buffer_size,",
          "1170:     size_t         *offset);",
          "1172: TSS2_RC",
          "1173: Tss2_MU_TPMS_KEYEDHASH_PARMS_Unmarshal(",
          "1174:     uint8_t const   buffer[],",
          "1175:     size_t          buffer_size,",
          "1176:     size_t         *offset,",
          "1177:     TPMS_KEYEDHASH_PARMS *dest);",
          "1179: TSS2_RC",
          "1180: Tss2_MU_TPMS_RSA_PARMS_Marshal(",
          "1181:     TPMS_RSA_PARMS  const *src,",
          "1182:     uint8_t         buffer[],",
          "1183:     size_t          buffer_size,",
          "1184:     size_t         *offset);",
          "1186: TSS2_RC",
          "1187: Tss2_MU_TPMS_RSA_PARMS_Unmarshal(",
          "1188:     uint8_t const   buffer[],",
          "1189:     size_t          buffer_size,",
          "1190:     size_t         *offset,",
          "1191:     TPMS_RSA_PARMS *dest);",
          "1193: TSS2_RC",
          "1194: Tss2_MU_TPMS_SYMCIPHER_PARMS_Marshal(",
          "1195:     TPMS_SYMCIPHER_PARMS const *src,",
          "1196:     uint8_t         buffer[],",
          "1197:     size_t          buffer_size,",
          "1198:     size_t         *offset);",
          "1200: TSS2_RC",
          "1201: Tss2_MU_TPMS_SYMCIPHER_PARMS_Unmarshal(",
          "1202:     uint8_t const   buffer[],",
          "1203:     size_t          buffer_size,",
          "1204:     size_t         *offset,",
          "1205:     TPMS_SYMCIPHER_PARMS *dest);",
          "1207: TSS2_RC",
          "1208: Tss2_MU_TPML_CC_Marshal(",
          "1209:     TPML_CC const *src,",
          "1210:     uint8_t      buffer[],",
          "1211:     size_t       buffer_size,",
          "1212:     size_t      *offset);",
          "1214: TSS2_RC",
          "1215: Tss2_MU_TPML_CC_Unmarshal(",
          "1216:     uint8_t const   buffer[],",
          "1217:     size_t          buffer_size,",
          "1218:     size_t         *offset,",
          "1219:     TPML_CC        *dest);",
          "1221: TSS2_RC",
          "1222: Tss2_MU_TPML_CCA_Marshal(",
          "1223:     TPML_CCA const *src,",
          "1224:     uint8_t      buffer[],",
          "1225:     size_t       buffer_size,",
          "1226:     size_t      *offset);",
          "1228: TSS2_RC",
          "1229: Tss2_MU_TPML_CCA_Unmarshal(",
          "1230:     uint8_t const   buffer[],",
          "1231:     size_t          buffer_size,",
          "1232:     size_t         *offset,",
          "1233:     TPML_CCA       *dest);",
          "1235: TSS2_RC",
          "1236: Tss2_MU_TPML_ALG_Marshal(",
          "1237:     TPML_ALG const *src,",
          "1238:     uint8_t      buffer[],",
          "1239:     size_t       buffer_size,",
          "1240:     size_t      *offset);",
          "1242: TSS2_RC",
          "1243: Tss2_MU_TPML_ALG_Unmarshal(",
          "1244:     uint8_t const   buffer[],",
          "1245:     size_t          buffer_size,",
          "1246:     size_t         *offset,",
          "1247:     TPML_ALG       *dest);",
          "1249: TSS2_RC",
          "1250: Tss2_MU_TPML_HANDLE_Marshal(",
          "1251:     TPML_HANDLE const *src,",
          "1252:     uint8_t      buffer[],",
          "1253:     size_t       buffer_size,",
          "1254:     size_t      *offset);",
          "1256: TSS2_RC",
          "1257: Tss2_MU_TPML_HANDLE_Unmarshal(",
          "1258:     uint8_t const   buffer[],",
          "1259:     size_t          buffer_size,",
          "1260:     size_t         *offset,",
          "1261:     TPML_HANDLE    *dest);",
          "1263: TSS2_RC",
          "1264: Tss2_MU_TPML_DIGEST_Marshal(",
          "1265:     TPML_DIGEST const *src,",
          "1266:     uint8_t      buffer[],",
          "1267:     size_t       buffer_size,",
          "1268:     size_t      *offset);",
          "1270: TSS2_RC",
          "1271: Tss2_MU_TPML_DIGEST_Unmarshal(",
          "1272:     uint8_t const   buffer[],",
          "1273:     size_t          buffer_size,",
          "1274:     size_t         *offset,",
          "1275:     TPML_DIGEST    *dest);",
          "1277: TSS2_RC",
          "1278: Tss2_MU_TPML_DIGEST_VALUES_Marshal(",
          "1279:     TPML_DIGEST_VALUES const *src,",
          "1280:     uint8_t      buffer[],",
          "1281:     size_t       buffer_size,",
          "1282:     size_t      *offset);",
          "1284: TSS2_RC",
          "1285: Tss2_MU_TPML_DIGEST_VALUES_Unmarshal(",
          "1286:     uint8_t const   buffer[],",
          "1287:     size_t          buffer_size,",
          "1288:     size_t         *offset,",
          "1289:     TPML_DIGEST_VALUES *dest);",
          "1291: TSS2_RC",
          "1292: Tss2_MU_TPML_PCR_SELECTION_Marshal(",
          "1293:     TPML_PCR_SELECTION const *src,",
          "1294:     uint8_t      buffer[],",
          "1295:     size_t       buffer_size,",
          "1296:     size_t      *offset);",
          "1298: TSS2_RC",
          "1299: Tss2_MU_TPML_PCR_SELECTION_Unmarshal(",
          "1300:     uint8_t const   buffer[],",
          "1301:     size_t          buffer_size,",
          "1302:     size_t         *offset,",
          "1303:     TPML_PCR_SELECTION *dest);",
          "1305: TSS2_RC",
          "1306: Tss2_MU_TPML_ALG_PROPERTY_Marshal(",
          "1307:     TPML_ALG_PROPERTY const *src,",
          "1308:     uint8_t      buffer[],",
          "1309:     size_t       buffer_size,",
          "1310:     size_t      *offset);",
          "1312: TSS2_RC",
          "1313: Tss2_MU_TPML_ALG_PROPERTY_Unmarshal(",
          "1314:     uint8_t const   buffer[],",
          "1315:     size_t          buffer_size,",
          "1316:     size_t         *offset,",
          "1317:     TPML_ALG_PROPERTY *dest);",
          "1319: TSS2_RC",
          "1320: Tss2_MU_TPML_ECC_CURVE_Marshal(",
          "1321:     TPML_ECC_CURVE const *src,",
          "1322:     uint8_t      buffer[],",
          "1323:     size_t       buffer_size,",
          "1324:     size_t      *offset);",
          "1326: TSS2_RC",
          "1327: Tss2_MU_TPML_ECC_CURVE_Unmarshal(",
          "1328:     uint8_t const   buffer[],",
          "1329:     size_t          buffer_size,",
          "1330:     size_t         *offset,",
          "1331:     TPML_ECC_CURVE *dest);",
          "1333: TSS2_RC",
          "1334: Tss2_MU_TPML_TAGGED_PCR_PROPERTY_Marshal(",
          "1335:     TPML_TAGGED_PCR_PROPERTY const *src,",
          "1336:     uint8_t      buffer[],",
          "1337:     size_t       buffer_size,",
          "1338:     size_t      *offset);",
          "1340: TSS2_RC",
          "1341: Tss2_MU_TPML_TAGGED_PCR_PROPERTY_Unmarshal(",
          "1342:     uint8_t const   buffer[],",
          "1343:     size_t          buffer_size,",
          "1344:     size_t         *offset,",
          "1345:     TPML_TAGGED_PCR_PROPERTY *dest);",
          "1347: TSS2_RC",
          "1348: Tss2_MU_TPML_TAGGED_TPM_PROPERTY_Marshal(",
          "1349:     TPML_TAGGED_TPM_PROPERTY const *src,",
          "1350:     uint8_t      buffer[],",
          "1351:     size_t       buffer_size,",
          "1352:     size_t      *offset);",
          "1354: TSS2_RC",
          "1355: Tss2_MU_TPML_TAGGED_TPM_PROPERTY_Unmarshal(",
          "1356:     uint8_t const   buffer[],",
          "1357:     size_t          buffer_size,",
          "1358:     size_t         *offset,",
          "1359:     TPML_TAGGED_TPM_PROPERTY *dest);",
          "1361: TSS2_RC",
          "1362: Tss2_MU_TPML_INTEL_PTT_PROPERTY_Marshal(",
          "1363:     TPML_INTEL_PTT_PROPERTY const *src,",
          "1364:     uint8_t      buffer[],",
          "1365:     size_t       buffer_size,",
          "1366:     size_t      *offset);",
          "1368: TSS2_RC",
          "1369: Tss2_MU_TPML_INTEL_PTT_PROPERTY_Unmarshal(",
          "1370:     uint8_t const   buffer[],",
          "1371:     size_t          buffer_size,",
          "1372:     size_t         *offset,",
          "1373:     TPML_INTEL_PTT_PROPERTY *dest);",
          "1375: TSS2_RC",
          "1376: Tss2_MU_TPMU_HA_Marshal(",
          "1377:     TPMU_HA const *src,",
          "1378:     uint32_t       selector_value,",
          "1379:     uint8_t        buffer[],",
          "1380:     size_t         buffer_size,",
          "1381:     size_t         *offset);",
          "1383: TSS2_RC",
          "1384: Tss2_MU_TPMU_HA_Unmarshal(",
          "1385:     uint8_t const  buffer[],",
          "1386:     size_t         buffer_size,",
          "1387:     size_t        *offset,",
          "1388:     uint32_t       selector_value,",
          "1389:     TPMU_HA       *dest);",
          "1391: TSS2_RC",
          "1392: Tss2_MU_TPMU_CAPABILITIES_Marshal(",
          "1393:     TPMU_CAPABILITIES const *src,",
          "1394:     uint32_t       selector_value,",
          "1395:     uint8_t        buffer[],",
          "1396:     size_t         buffer_size,",
          "1397:     size_t         *offset);",
          "1399: TSS2_RC",
          "1400: Tss2_MU_TPMU_CAPABILITIES_Unmarshal(",
          "1401:     uint8_t const  buffer[],",
          "1402:     size_t         buffer_size,",
          "1403:     size_t        *offset,",
          "1404:     uint32_t       selector_value,",
          "1405:     TPMU_CAPABILITIES *dest);",
          "1407: TSS2_RC",
          "1408: Tss2_MU_TPMU_ATTEST_Marshal(",
          "1409:     TPMU_ATTEST const *src,",
          "1410:     uint32_t       selector_value,",
          "1411:     uint8_t        buffer[],",
          "1412:     size_t         buffer_size,",
          "1413:     size_t         *offset);",
          "1415: TSS2_RC",
          "1416: Tss2_MU_TPMU_ATTEST_Unmarshal(",
          "1417:     uint8_t const  buffer[],",
          "1418:     size_t         buffer_size,",
          "1419:     size_t        *offset,",
          "1420:     uint32_t       selector_value,",
          "1421:     TPMU_ATTEST *dest);",
          "1423: TSS2_RC",
          "1424: Tss2_MU_TPMU_SYM_KEY_BITS_Marshal(",
          "1425:     TPMU_SYM_KEY_BITS const *src,",
          "1426:     uint32_t       selector_value,",
          "1427:     uint8_t        buffer[],",
          "1428:     size_t         buffer_size,",
          "1429:     size_t         *offset);",
          "1431: TSS2_RC",
          "1432: Tss2_MU_TPMU_SYM_KEY_BITS_Unmarshal(",
          "1433:     uint8_t const  buffer[],",
          "1434:     size_t         buffer_size,",
          "1435:     size_t        *offset,",
          "1436:     uint32_t       selector_value,",
          "1437:     TPMU_SYM_KEY_BITS *dest);",
          "1439: TSS2_RC",
          "1440: Tss2_MU_TPMU_SYM_MODE_Marshal(",
          "1441:     TPMU_SYM_MODE const *src,",
          "1442:     uint32_t       selector_value,",
          "1443:     uint8_t        buffer[],",
          "1444:     size_t         buffer_size,",
          "1445:     size_t         *offset);",
          "1447: TSS2_RC",
          "1448: Tss2_MU_TPMU_SYM_MODE_Unmarshal(",
          "1449:     uint8_t const  buffer[],",
          "1450:     size_t         buffer_size,",
          "1451:     size_t        *offset,",
          "1452:     uint32_t       selector_value,",
          "1453:     TPMU_SYM_MODE *dest);",
          "1455: TSS2_RC",
          "1456: Tss2_MU_TPMU_SIG_SCHEME_Marshal(",
          "1457:     TPMU_SIG_SCHEME const *src,",
          "1458:     uint32_t       selector_value,",
          "1459:     uint8_t        buffer[],",
          "1460:     size_t         buffer_size,",
          "1461:     size_t         *offset);",
          "1463: TSS2_RC",
          "1464: Tss2_MU_TPMU_SIG_SCHEME_Unmarshal(",
          "1465:     uint8_t const  buffer[],",
          "1466:     size_t         buffer_size,",
          "1467:     size_t        *offset,",
          "1468:     uint32_t       selector_value,",
          "1469:     TPMU_SIG_SCHEME *dest);",
          "1471: TSS2_RC",
          "1472: Tss2_MU_TPMU_KDF_SCHEME_Marshal(",
          "1473:     TPMU_KDF_SCHEME const *src,",
          "1474:     uint32_t       selector_value,",
          "1475:     uint8_t        buffer[],",
          "1476:     size_t         buffer_size,",
          "1477:     size_t         *offset);",
          "1479: TSS2_RC",
          "1480: Tss2_MU_TPMU_KDF_SCHEME_Unmarshal(",
          "1481:     uint8_t const  buffer[],",
          "1482:     size_t         buffer_size,",
          "1483:     size_t        *offset,",
          "1484:     uint32_t       selector_value,",
          "1485:     TPMU_KDF_SCHEME *dest);",
          "1487: TSS2_RC",
          "1488: Tss2_MU_TPMU_ASYM_SCHEME_Marshal(",
          "1489:     TPMU_ASYM_SCHEME const *src,",
          "1490:     uint32_t       selector_value,",
          "1491:     uint8_t        buffer[],",
          "1492:     size_t         buffer_size,",
          "1493:     size_t         *offset);",
          "1495: TSS2_RC",
          "1496: Tss2_MU_TPMU_ASYM_SCHEME_Unmarshal(",
          "1497:     uint8_t const  buffer[],",
          "1498:     size_t         buffer_size,",
          "1499:     size_t        *offset,",
          "1500:     uint32_t       selector_value,",
          "1501:     TPMU_ASYM_SCHEME *dest);",
          "1503: TSS2_RC",
          "1504: Tss2_MU_TPMU_SCHEME_KEYEDHASH_Marshal(",
          "1505:     TPMU_SCHEME_KEYEDHASH const *src,",
          "1506:     uint32_t       selector_value,",
          "1507:     uint8_t        buffer[],",
          "1508:     size_t         buffer_size,",
          "1509:     size_t         *offset);",
          "1511: TSS2_RC",
          "1512: Tss2_MU_TPMU_SCHEME_KEYEDHASH_Unmarshal(",
          "1513:     uint8_t const  buffer[],",
          "1514:     size_t         buffer_size,",
          "1515:     size_t        *offset,",
          "1516:     uint32_t       selector_value,",
          "1517:     TPMU_SCHEME_KEYEDHASH *dest);",
          "1519: TSS2_RC",
          "1520: Tss2_MU_TPMU_SIGNATURE_Marshal(",
          "1521:     TPMU_SIGNATURE const *src,",
          "1522:     uint32_t       selector_value,",
          "1523:     uint8_t        buffer[],",
          "1524:     size_t         buffer_size,",
          "1525:     size_t         *offset);",
          "1527: TSS2_RC",
          "1528: Tss2_MU_TPMU_SIGNATURE_Unmarshal(",
          "1529:     uint8_t const  buffer[],",
          "1530:     size_t         buffer_size,",
          "1531:     size_t        *offset,",
          "1532:     uint32_t       selector_value,",
          "1533:     TPMU_SIGNATURE *dest);",
          "1535: TSS2_RC",
          "1536: Tss2_MU_TPMU_SENSITIVE_COMPOSITE_Marshal(",
          "1537:     TPMU_SENSITIVE_COMPOSITE const *src,",
          "1538:     uint32_t       selector_value,",
          "1539:     uint8_t        buffer[],",
          "1540:     size_t         buffer_size,",
          "1541:     size_t         *offset);",
          "1543: TSS2_RC",
          "1544: Tss2_MU_TPMU_SENSITIVE_COMPOSITE_Unmarshal(",
          "1545:     uint8_t const  buffer[],",
          "1546:     size_t         buffer_size,",
          "1547:     size_t        *offset,",
          "1548:     uint32_t       selector_value,",
          "1549:     TPMU_SENSITIVE_COMPOSITE *dest);",
          "1551: TSS2_RC",
          "1552: Tss2_MU_TPMU_ENCRYPTED_SECRET_Marshal(",
          "1553:     TPMU_ENCRYPTED_SECRET const *src,",
          "1554:     uint32_t       selector_value,",
          "1555:     uint8_t        buffer[],",
          "1556:     size_t         buffer_size,",
          "1557:     size_t         *offset);",
          "1559: TSS2_RC",
          "1560: Tss2_MU_TPMU_ENCRYPTED_SECRET_Unmarshal(",
          "1561:     uint8_t const  buffer[],",
          "1562:     size_t         buffer_size,",
          "1563:     size_t        *offset,",
          "1564:     uint32_t       selector_value,",
          "1565:     TPMU_ENCRYPTED_SECRET *dest);",
          "1567: TSS2_RC",
          "1568: Tss2_MU_TPMU_PUBLIC_PARMS_Marshal(",
          "1569:     TPMU_PUBLIC_PARMS const *src,",
          "1570:     uint32_t       selector_value,",
          "1571:     uint8_t        buffer[],",
          "1572:     size_t         buffer_size,",
          "1573:     size_t         *offset);",
          "1575: TSS2_RC",
          "1576: Tss2_MU_TPMU_PUBLIC_PARMS_Unmarshal(",
          "1577:     uint8_t const  buffer[],",
          "1578:     size_t         buffer_size,",
          "1579:     size_t        *offset,",
          "1580:     uint32_t       selector_value,",
          "1581:     TPMU_PUBLIC_PARMS *dest);",
          "1583: TSS2_RC",
          "1584: Tss2_MU_TPMU_PUBLIC_ID_Marshal(",
          "1585:     TPMU_PUBLIC_ID const *src,",
          "1586:     uint32_t       selector_value,",
          "1587:     uint8_t        buffer[],",
          "1588:     size_t         buffer_size,",
          "1589:     size_t         *offset);",
          "1591: TSS2_RC",
          "1592: Tss2_MU_TPMU_PUBLIC_ID_Unmarshal(",
          "1593:     uint8_t const  buffer[],",
          "1594:     size_t         buffer_size,",
          "1595:     size_t        *offset,",
          "1596:     uint32_t       selector_value,",
          "1597:     TPMU_PUBLIC_ID *dest);",
          "1599: TSS2_RC",
          "1600: Tss2_MU_TPMT_HA_Marshal(",
          "1601:     TPMT_HA const *src,",
          "1602:     uint8_t        buffer[],",
          "1603:     size_t         buffer_size,",
          "1604:     size_t         *offset);",
          "1606: TSS2_RC",
          "1607: Tss2_MU_TPMT_HA_Unmarshal(",
          "1608:     uint8_t const  buffer[],",
          "1609:     size_t         buffer_size,",
          "1610:     size_t        *offset,",
          "1611:     TPMT_HA *dest);",
          "1613: TSS2_RC",
          "1614: Tss2_MU_TPMT_SYM_DEF_Marshal(",
          "1615:     TPMT_SYM_DEF const *src,",
          "1616:     uint8_t        buffer[],",
          "1617:     size_t         buffer_size,",
          "1618:     size_t         *offset);",
          "1620: TSS2_RC",
          "1621: Tss2_MU_TPMT_SYM_DEF_Unmarshal(",
          "1622:     uint8_t const  buffer[],",
          "1623:     size_t         buffer_size,",
          "1624:     size_t        *offset,",
          "1625:     TPMT_SYM_DEF  *dest);",
          "1627: TSS2_RC",
          "1628: Tss2_MU_TPMT_SYM_DEF_OBJECT_Marshal(",
          "1629:     TPMT_SYM_DEF_OBJECT const *src,",
          "1630:     uint8_t        buffer[],",
          "1631:     size_t         buffer_size,",
          "1632:     size_t         *offset);",
          "1634: TSS2_RC",
          "1635: Tss2_MU_TPMT_SYM_DEF_OBJECT_Unmarshal(",
          "1636:     uint8_t const  buffer[],",
          "1637:     size_t         buffer_size,",
          "1638:     size_t        *offset,",
          "1639:     TPMT_SYM_DEF_OBJECT *dest);",
          "1641: TSS2_RC",
          "1642: Tss2_MU_TPMT_KEYEDHASH_SCHEME_Marshal(",
          "1643:     TPMT_KEYEDHASH_SCHEME const *src,",
          "1644:     uint8_t        buffer[],",
          "1645:     size_t         buffer_size,",
          "1646:     size_t         *offset);",
          "1648: TSS2_RC",
          "1649: Tss2_MU_TPMT_KEYEDHASH_SCHEME_Unmarshal(",
          "1650:     uint8_t const  buffer[],",
          "1651:     size_t         buffer_size,",
          "1652:     size_t        *offset,",
          "1653:     TPMT_KEYEDHASH_SCHEME *dest);",
          "1655: TSS2_RC",
          "1656: Tss2_MU_TPMT_SIG_SCHEME_Marshal(",
          "1657:     TPMT_SIG_SCHEME const *src,",
          "1658:     uint8_t        buffer[],",
          "1659:     size_t         buffer_size,",
          "1660:     size_t         *offset);",
          "1662: TSS2_RC",
          "1663: Tss2_MU_TPMT_SIG_SCHEME_Unmarshal(",
          "1664:     uint8_t const  buffer[],",
          "1665:     size_t         buffer_size,",
          "1666:     size_t        *offset,",
          "1667:     TPMT_SIG_SCHEME *dest);",
          "1669: TSS2_RC",
          "1670: Tss2_MU_TPMT_KDF_SCHEME_Marshal(",
          "1671:     TPMT_KDF_SCHEME const *src,",
          "1672:     uint8_t        buffer[],",
          "1673:     size_t         buffer_size,",
          "1674:     size_t         *offset);",
          "1676: TSS2_RC",
          "1677: Tss2_MU_TPMT_KDF_SCHEME_Unmarshal(",
          "1678:     uint8_t const  buffer[],",
          "1679:     size_t         buffer_size,",
          "1680:     size_t        *offset,",
          "1681:     TPMT_KDF_SCHEME *dest);",
          "1683: TSS2_RC",
          "1684: Tss2_MU_TPMT_ASYM_SCHEME_Marshal(",
          "1685:     TPMT_ASYM_SCHEME const *src,",
          "1686:     uint8_t        buffer[],",
          "1687:     size_t         buffer_size,",
          "1688:     size_t         *offset);",
          "1690: TSS2_RC",
          "1691: Tss2_MU_TPMT_ASYM_SCHEME_Unmarshal(",
          "1692:     uint8_t const  buffer[],",
          "1693:     size_t         buffer_size,",
          "1694:     size_t        *offset,",
          "1695:     TPMT_ASYM_SCHEME *dest);",
          "1697: TSS2_RC",
          "1698: Tss2_MU_TPMT_RSA_SCHEME_Marshal(",
          "1699:     TPMT_RSA_SCHEME const *src,",
          "1700:     uint8_t        buffer[],",
          "1701:     size_t         buffer_size,",
          "1702:     size_t         *offset);",
          "1704: TSS2_RC",
          "1705: Tss2_MU_TPMT_RSA_SCHEME_Unmarshal(",
          "1706:     uint8_t const  buffer[],",
          "1707:     size_t         buffer_size,",
          "1708:     size_t        *offset,",
          "1709:     TPMT_RSA_SCHEME *dest);",
          "1711: TSS2_RC",
          "1712: Tss2_MU_TPMT_RSA_DECRYPT_Marshal(",
          "1713:     TPMT_RSA_DECRYPT const *src,",
          "1714:     uint8_t        buffer[],",
          "1715:     size_t         buffer_size,",
          "1716:     size_t         *offset);",
          "1718: TSS2_RC",
          "1719: Tss2_MU_TPMT_RSA_DECRYPT_Unmarshal(",
          "1720:     uint8_t const  buffer[],",
          "1721:     size_t         buffer_size,",
          "1722:     size_t        *offset,",
          "1723:     TPMT_RSA_DECRYPT *dest);",
          "1725: TSS2_RC",
          "1726: Tss2_MU_TPMT_ECC_SCHEME_Marshal(",
          "1727:     TPMT_ECC_SCHEME const *src,",
          "1728:     uint8_t        buffer[],",
          "1729:     size_t         buffer_size,",
          "1730:     size_t         *offset);",
          "1732: TSS2_RC",
          "1733: Tss2_MU_TPMT_ECC_SCHEME_Unmarshal(",
          "1734:     uint8_t const  buffer[],",
          "1735:     size_t         buffer_size,",
          "1736:     size_t        *offset,",
          "1737:     TPMT_ECC_SCHEME *dest);",
          "1739: TSS2_RC",
          "1740: Tss2_MU_TPMT_SIGNATURE_Marshal(",
          "1741:     TPMT_SIGNATURE const *src,",
          "1742:     uint8_t        buffer[],",
          "1743:     size_t         buffer_size,",
          "1744:     size_t         *offset);",
          "1746: TSS2_RC",
          "1747: Tss2_MU_TPMT_SIGNATURE_Unmarshal(",
          "1748:     uint8_t const  buffer[],",
          "1749:     size_t         buffer_size,",
          "1750:     size_t        *offset,",
          "1751:     TPMT_SIGNATURE *dest);",
          "1753: TSS2_RC",
          "1754: Tss2_MU_TPMT_SENSITIVE_Marshal(",
          "1755:     TPMT_SENSITIVE const *src,",
          "1756:     uint8_t        buffer[],",
          "1757:     size_t         buffer_size,",
          "1758:     size_t         *offset);",
          "1760: TSS2_RC",
          "1761: Tss2_MU_TPMT_SENSITIVE_Unmarshal(",
          "1762:     uint8_t const  buffer[],",
          "1763:     size_t         buffer_size,",
          "1764:     size_t        *offset,",
          "1765:     TPMT_SENSITIVE *dest);",
          "1767: TSS2_RC",
          "1768: Tss2_MU_TPMT_PUBLIC_Marshal(",
          "1769:     TPMT_PUBLIC    const *src,",
          "1770:     uint8_t        buffer[],",
          "1771:     size_t         buffer_size,",
          "1772:     size_t         *offset);",
          "1774: TSS2_RC",
          "1775: Tss2_MU_TPMT_PUBLIC_Unmarshal(",
          "1776:     uint8_t const  buffer[],",
          "1777:     size_t         buffer_size,",
          "1778:     size_t        *offset,",
          "1779:     TPMT_PUBLIC   *dest);",
          "1781: TSS2_RC",
          "1782: Tss2_MU_TPMT_PUBLIC_PARMS_Marshal(",
          "1783:     TPMT_PUBLIC_PARMS const *src,",
          "1784:     uint8_t        buffer[],",
          "1785:     size_t         buffer_size,",
          "1786:     size_t         *offset);",
          "1788: TSS2_RC",
          "1789: Tss2_MU_TPMT_PUBLIC_PARMS_Unmarshal(",
          "1790:     uint8_t const  buffer[],",
          "1791:     size_t         buffer_size,",
          "1792:     size_t        *offset,",
          "1793:     TPMT_PUBLIC_PARMS *dest);",
          "1795: TSS2_RC",
          "1796: Tss2_MU_TPMT_TK_CREATION_Marshal(",
          "1797:     TPMT_TK_CREATION const *src,",
          "1798:     uint8_t        buffer[],",
          "1799:     size_t         buffer_size,",
          "1800:     size_t         *offset);",
          "1802: TSS2_RC",
          "1803: Tss2_MU_TPMT_TK_CREATION_Unmarshal(",
          "1804:     uint8_t const  buffer[],",
          "1805:     size_t         buffer_size,",
          "1806:     size_t        *offset,",
          "1807:     TPMT_TK_CREATION *dest);",
          "1809: TSS2_RC",
          "1810: Tss2_MU_TPMT_TK_VERIFIED_Marshal(",
          "1811:     TPMT_TK_VERIFIED const *src,",
          "1812:     uint8_t        buffer[],",
          "1813:     size_t         buffer_size,",
          "1814:     size_t         *offset);",
          "1816: TSS2_RC",
          "1817: Tss2_MU_TPMT_TK_VERIFIED_Unmarshal(",
          "1818:     uint8_t const  buffer[],",
          "1819:     size_t         buffer_size,",
          "1820:     size_t        *offset,",
          "1821:     TPMT_TK_VERIFIED *dest);",
          "1823: TSS2_RC",
          "1824: Tss2_MU_TPMT_TK_AUTH_Marshal(",
          "1825:     TPMT_TK_AUTH   const *src,",
          "1826:     uint8_t        buffer[],",
          "1827:     size_t         buffer_size,",
          "1828:     size_t         *offset);",
          "1830: TSS2_RC",
          "1831: Tss2_MU_TPMT_TK_AUTH_Unmarshal(",
          "1832:     uint8_t const  buffer[],",
          "1833:     size_t         buffer_size,",
          "1834:     size_t        *offset,",
          "1835:     TPMT_TK_AUTH  *dest);",
          "1837: TSS2_RC",
          "1838: Tss2_MU_TPMT_TK_HASHCHECK_Marshal(",
          "1839:     TPMT_TK_HASHCHECK const *src,",
          "1840:     uint8_t        buffer[],",
          "1841:     size_t         buffer_size,",
          "1842:     size_t         *offset);",
          "1844: TSS2_RC",
          "1845: Tss2_MU_TPMT_TK_HASHCHECK_Unmarshal(",
          "1846:     uint8_t const  buffer[],",
          "1847:     size_t         buffer_size,",
          "1848:     size_t        *offset,",
          "1849:     TPMT_TK_HASHCHECK *dest);",
          "1851: #ifdef __cplusplus",
          "1852: }",
          "1853: #endif",
          "",
          "---------------"
        ],
        "test/system/test_tpm2_createprimary.sh||test/system/test_tpm2_createprimary.sh": [
          "File: test/system/test_tpm2_createprimary.sh -> test/system/test_tpm2_createprimary.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: cleanup() {",
          "46:   if [ \"$1\" != \"keep_context\" ]; then",
          "47:     rm -f context.out",
          "",
          "[Removed Lines]",
          "44:   rm -f policy.bin obj.pub",
          "",
          "[Added Lines]",
          "44:   rm -f policy.bin obj.pub pub.out",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:     done",
          "64: done",
          "66: #test for createprimary objects with policy authorization structures",
          "70: tpm2_createprimary -Q -H o -G rsa -g sha256 -C context.out -L policy.bin \\",
          "71:   -A 'restricted|decrypt|fixedtpm|fixedparent|sensitivedataorigin'",
          "77: exit 0",
          "",
          "[Removed Lines]",
          "67: echo \"f28230c080bbe417141199e36d18978228d8948fc10a6a24921b9eba6bb1d988\" \\",
          "68: | xxd -r -p > policy.bin",
          "73: tpm2_readpublic -Q -c context.out -o obj.pub",
          "75: cmp -i 14:0 -n 32 obj.pub policy.bin -s",
          "",
          "[Added Lines]",
          "66: function yaml_get() {",
          "68: python << pyscript",
          "69: from __future__ import print_function",
          "71: import sys",
          "72: import yaml",
          "74: with open(\"$2\") as f:",
          "75:  try:",
          "76:   y = yaml.load(f)",
          "77:   found = \"$1\" in y",
          "78:   if (not found):",
          "79:    sys.stderr.write('Could not find index 0x%X\\n' % (\"$1\"))",
          "80:   print(y[\"$1\"])",
          "81:   sys.exit(not found)",
          "82:  except yaml.YAMLError as exc:",
          "83:   sys.exit(exc)",
          "84: pyscript",
          "85: }",
          "87: policy_orig=\"f28230c080bbe417141199e36d18978228d8948fc10a6a24921b9eba6bb1d988\"",
          "90: echo -n \"$policy_orig\" | xxd -r -p > policy.bin",
          "95: tpm2_readpublic -c context.out > pub.out",
          "97: policy_new=$(yaml_get \"authorization policy\" pub.out)",
          "99: test \"$policy_orig\" == \"$policy_new\"",
          "",
          "---------------"
        ],
        "tools/tpm2_getpubek.c||tools/tpm2_getpubek.c": [
          "File: tools/tpm2_getpubek.c -> tools/tpm2_getpubek.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include <sapi/tpm20.h>",
          "39: #include \"tpm2_password_util.h\"",
          "40: #include \"files.h\"",
          "41: #include \"log.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: #include \"conversion.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:     LOG_INFO(\"Flush transient EK success.\");",
          "248: }",
          "250: static bool on_option(char key, char *value) {",
          "",
          "[Removed Lines]",
          "240:     if (!files_save_bytes_to_file(ctx.out_file_path, (UINT8 *) &outPublic,",
          "241:             sizeof(outPublic))) {",
          "242:         LOG_ERR(\"Failed to save EK pub key into file \\\"%s\\\"\",",
          "243:                 ctx.out_file_path);",
          "244:         return false;",
          "245:     }",
          "247:     return true;",
          "",
          "[Added Lines]",
          "240:     return tpm2_convert_pubkey(&outPublic, pubkey_format_tss, ctx.out_file_path);",
          "",
          "---------------"
        ],
        "tools/tpm2_makecredential.c||tools/tpm2_makecredential.c": [
          "File: tools/tpm2_makecredential.c -> tools/tpm2_makecredential.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: #include <sapi/tpm20.h>",
          "42: #include \"log.h\"",
          "43: #include \"files.h\"",
          "44: #include \"tpm2_tool.h\"",
          "45: #include \"tpm2_util.h\"",
          "",
          "[Removed Lines]",
          "41: #include \"tpm2_options.h\"",
          "",
          "[Added Lines]",
          "43: #include \"tss2_mu.h\"",
          "44: #include \"tpm2_options.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:     return write_cred_and_secret(ctx.out_file_path, &cred_blob, &secret);",
          "155: }",
          "161:     switch (key) {",
          "165:             return false;",
          "166:         }",
          "167:         ctx.flags.e = 1;",
          "169:     case 's':",
          "170:         ctx.credential.t.size = BUFFER_SIZE(TPM2B_DIGEST, buffer);",
          "171:         if (!files_load_bytes_from_path(value, ctx.credential.t.buffer,",
          "",
          "[Removed Lines]",
          "157: static bool on_option(char key, char *value) {",
          "159:     UINT16 size;",
          "162:     case 'e':",
          "163:         size = sizeof(ctx.public);",
          "164:         if (!files_load_bytes_from_path(value, (UINT8 *) &ctx.public, &size)) {",
          "168:         break;",
          "",
          "[Added Lines]",
          "158: static bool load_public(char *path,TPM2B_PUBLIC *public) {",
          "160:     UINT8 buffer[sizeof(*public)];",
          "161:     UINT16 size = sizeof(buffer);",
          "162:     bool res = files_load_bytes_from_path(path, buffer, &size);",
          "163:     if (!res) {",
          "164:         return false;",
          "165:     }",
          "167:     size_t offset = 0;",
          "168:     TSS2_RC rc = Tss2_MU_TPM2B_PUBLIC_Unmarshal(buffer, size, &offset, &ctx.public);",
          "170:     return rc == TPM_RC_SUCCESS;",
          "171: }",
          "173: static bool on_option(char key, char *value) {",
          "176:     case 'e': {",
          "177:         bool res = load_public(value, &ctx.public);",
          "178:         if (!res) {",
          "182:     } break;",
          "",
          "---------------"
        ],
        "tools/tpm2_readpublic.c||tools/tpm2_readpublic.c": [
          "File: tools/tpm2_readpublic.c -> tools/tpm2_readpublic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include <sapi/tpm20.h>",
          "39: #include \"files.h\"",
          "40: #include \"log.h\"",
          "42: #include \"tpm2_tool.h\"",
          "43: #include \"tpm2_util.h\"",
          "",
          "[Removed Lines]",
          "38: #include \"tpm2_options.h\"",
          "41: #include \"conversion.h\"",
          "",
          "[Added Lines]",
          "38: #include \"conversion.h\"",
          "41: #include \"tpm2_alg_util.h\"",
          "42: #include \"tpm2_attr_util.h\"",
          "43: #include \"tpm2_options.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46: struct tpm_readpub_ctx {",
          "47:     struct {",
          "48:         UINT8 H      : 1;",
          "50:         UINT8 c      : 1;",
          "51:         UINT8 f      : 1;",
          "53:     } flags;",
          "54:     TPMI_DH_OBJECT objectHandle;",
          "55:     char *outFilePath;",
          "",
          "[Removed Lines]",
          "49:         UINT8 o      : 1;",
          "52:         UINT8 unused : 4;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "84:         return false;",
          "85:     }",
          "88:     UINT16 i;",
          "89:     for (i = 0; i < name.t.size; i++) {",
          "90:         tpm2_tool_output(\"%02x\", name.t.name[i]);",
          "91:     }",
          "92:     tpm2_tool_output(\"\\n\");",
          "95:     for (i = 0; i < qualified_name.t.size; i++) {",
          "96:         tpm2_tool_output(\"%02x\", qualified_name.t.name[i]);",
          "97:     }",
          "98:     tpm2_tool_output(\"\\n\");",
          "101: }",
          "103: static bool on_option(char key, char *value) {",
          "",
          "[Removed Lines]",
          "87:     tpm2_tool_output(\"name:\");",
          "94:     tpm2_tool_output(\"qualified_name:\");",
          "100:     return tpm2_convert_pubkey(&public, ctx.format, ctx.outFilePath);",
          "",
          "[Added Lines]",
          "87:     tpm2_tool_output(\"name: \");",
          "94:     tpm2_tool_output(\"qualified name: \");",
          "100:     tpm2_util_public_to_yaml(&public);",
          "102:     return ctx.outFilePath ?",
          "103:             tpm2_convert_pubkey(&public, ctx.format, ctx.outFilePath) : true;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:         break;",
          "114:     case 'o':",
          "115:         ctx.outFilePath = optarg;",
          "117:         break;",
          "118:     case 'c':",
          "119:         ctx.context_file = optarg;",
          "",
          "[Removed Lines]",
          "116:         ctx.flags.o = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "149: static bool init(TSS2_SYS_CONTEXT *sapi_context) {",
          "152:         return false;",
          "153:     }",
          "",
          "[Removed Lines]",
          "151:     if (!((ctx.flags.H || ctx.flags.c) && ctx.flags.o)) {",
          "",
          "[Added Lines]",
          "153:     if (!((ctx.flags.H || ctx.flags.c))) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51f36286546c944c6e4041c34bad88353539cf46",
      "candidate_info": {
        "commit_hash": "51f36286546c944c6e4041c34bad88353539cf46",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/51f36286546c944c6e4041c34bad88353539cf46",
        "files": [
          "Makefile.am",
          "configure.ac",
          "lib/context-util.c",
          "lib/options.c",
          "lib/options.h",
          "man/tcti-options.troff"
        ],
        "message": "Add support for the tpm2-abrmd TCTI & make it the default.\n\nThis integrates the tabrmd TCTI into the common TCTI infrastructure. It\nalso updates the manpages to allow it to be selected explicitly.\n\nSigned-off-by: Philip Tricca <flihp@twobit.us>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac",
          "lib/context-util.c||lib/context-util.c",
          "lib/options.c||lib/options.c",
          "lib/options.h||lib/options.h",
          "man/tcti-options.troff||man/tcti-options.troff"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: INCLUDE_DIRS = -I$(srcdir)/src -I$(srcdir)/lib",
          "36: LIB_COMMON := lib/libcommon.a",
          "39: AM_LDFLAGS   := $(EXTRA_LDFLAGS)",
          "43: sbin_PROGRAMS = \\",
          "44:     tools/tpm2_create \\",
          "",
          "[Removed Lines]",
          "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS)",
          "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS)",
          "",
          "[Added Lines]",
          "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(TCTI_TABRMD_CFLAGS)",
          "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(TCTI_TABRMD_LIBS)",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:              AC_MSG_FAILURE([--with-tcti-socket option provided but libtcti-socket not detected.])",
          "44:          fi])])",
          "45: AM_CONDITIONAL([HAVE_TCTI_SOCK],[test \"x$with_tcti_socket\" = \"xyes\"])",
          "46: # ensure we have at least one TCTI enabled, can't do much without one",
          "47: AS_IF(",
          "49:     [AC_MSG_ERROR(",
          "50:         [no TCTIs: at least one TCTI library must be enabled],",
          "51:         [1])])",
          "",
          "[Removed Lines]",
          "48:     [test \"x$with_tcti_device\" != \"xyes\" -a \"x$with_tcti_socket\" != \"xyes\"],",
          "",
          "[Added Lines]",
          "46: # selectively disable libtcti-tabrmd",
          "47: AC_ARG_WITH(",
          "48:     [tcti-tabrmd],",
          "49:     [AS_HELP_STRING([--with-tcti-tabrmd],",
          "50:         [Build tools with support for the tabrmd TCTI.])],",
          "51:     [],",
          "52:     [with_tcti_tabrmd=check])",
          "53: AS_IF(",
          "54:     [test \"x$with_tcti_tabrmd\" != \"xno\"],",
          "55:     [PKG_CHECK_MODULES(",
          "56:         [TCTI_TABRMD],",
          "57:         [tcti-tabrmd],",
          "58:         [AC_DEFINE([HAVE_TCTI_TABRMD], [1])",
          "59:          with_tcti_tabrmd=yes],",
          "60:         [if test \"x$with_tcti_tabrmd\" = \"xyes\"; then",
          "61:              AC_MSG_FAILURE([--with-tcti-tabrmd option provided but libtcti-tabrmd not detected.])",
          "62:          fi])])",
          "63: AM_CONDITIONAL([HAVE_TCTI_TABRMD],[test \"x$with_tcti_tabrmd\" = \"xyes\"])",
          "66:     [test \"x$with_tcti_device\" != \"xyes\" -a \\",
          "67:           \"x$with_tcti_socket\" != \"xyes\" -a \\",
          "68:           \"x$with_tcti_tabrmd\" != \"xyes\"],",
          "",
          "---------------"
        ],
        "lib/context-util.c||lib/context-util.c": [
          "File: lib/context-util.c -> lib/context-util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <errno.h>",
          "32: #include <string.h>",
          "33: #ifdef HAVE_TCTI_DEV",
          "34: #include <tcti/tcti_device.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include <inttypes.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: #ifdef HAVE_TCTI_SOCK",
          "37: #include <tcti/tcti_socket.h>",
          "38: #endif",
          "40: #include \"context-util.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #ifdef HAVE_TCTI_TABRMD",
          "41: #include <tcti/tcti-tabrmd.h>",
          "42: #endif",
          "45: #include \"log.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:     return tcti_ctx;",
          "125: }",
          "126: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: #ifdef HAVE_TCTI_TABRMD",
          "133: TSS2_TCTI_CONTEXT*",
          "134: tcti_tabrmd_init (void)",
          "135: {",
          "136:     TSS2_TCTI_CONTEXT *tcti_ctx;",
          "137:     TSS2_RC rc;",
          "138:     size_t size;",
          "140:     rc = tss2_tcti_tabrmd_init(NULL, &size);",
          "141:     if (rc != TSS2_RC_SUCCESS) {",
          "142:         LOG_ERR (\"Failed to get size for TABRMD TCTI context: 0x%\" PRIx32, rc);",
          "143:         return NULL;",
          "144:     }",
          "145:     tcti_ctx = (TSS2_TCTI_CONTEXT*)calloc (1, size);",
          "146:     if (tcti_ctx == NULL) {",
          "147:         LOG_ERR (\"Allocation for TABRMD TCTI context failed: %s\",",
          "148:                  strerror (errno));",
          "149:         return NULL;",
          "150:     }",
          "151:     rc = tss2_tcti_tabrmd_init (tcti_ctx, &size);",
          "152:     if (rc != TSS2_RC_SUCCESS) {",
          "153:         LOG_ERR (\"Failed to initialize TABRMD TCTI context: 0x%\" PRIx32, rc);",
          "154:         free (tcti_ctx);",
          "155:         return NULL;",
          "156:     }",
          "157:     return tcti_ctx;",
          "158: }",
          "159: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193:     case SOCKET_TCTI:",
          "194:         return tcti_socket_init (options->socket_address,",
          "195:                                  options->socket_port);",
          "196: #endif",
          "197:     default:",
          "198:         return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229: #endif",
          "230: #ifdef HAVE_TCTI_TABRMD",
          "231:     case TABRMD_TCTI:",
          "232:         return tcti_tabrmd_init ();",
          "",
          "---------------"
        ],
        "lib/options.c||lib/options.c": [
          "File: lib/options.c -> lib/options.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:         .name = \"socket\",",
          "67:         .type = SOCKET_TCTI,",
          "68:     },",
          "69: #endif",
          "70:     {",
          "71:         .name = \"unknown\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: #endif",
          "70: #ifdef HAVE_TCTI_TABRMD",
          "71:     {",
          "72:         .name = \"tabrmd\",",
          "73:         .type = TABRMD_TCTI,",
          "74:     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:             return 2;",
          "136:         }",
          "137:         break;",
          "138: #endif",
          "139:     default:",
          "140:         fprintf (stderr, \"invalid TCTI, see --help\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144: #endif",
          "145: #ifdef HAVE_TCTI_TABRMD",
          "146:     case TABRMD_TCTI:",
          "148:         break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "243:             .flag    = NULL,",
          "244:             .val     = 'p',",
          "245:         },",
          "246: #endif",
          "247:         {",
          "248:             .name    = \"help\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257: #endif",
          "258: #ifdef HAVE_TCTI_TABRMD",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "321:                 return 2;",
          "322:             }",
          "323:         }   break;",
          "324: #endif",
          "325:         case 'h':",
          "326:             common_opts->help = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338: #endif",
          "339: #ifdef HAVE_TCTI_TABRMD",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362: #ifdef HAVE_TCTI_SOCK",
          "363:     printf (\"  address:          %s\\n\", opts->socket_address);",
          "364:     printf (\"  port:             %d\\n\", opts->socket_port);",
          "365: #endif",
          "366:     printf (\"  help:             %s\\n\", opts->help    ? \"true\" : \"false\");",
          "367:     printf (\"  verbose:          %s\\n\", opts->verbose ? \"true\" : \"false\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382: #endif",
          "383: #ifdef HAVE_TCTI_TABRMD",
          "",
          "---------------"
        ],
        "lib/options.h||lib/options.h": [
          "File: lib/options.h -> lib/options.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   #define TCTI_DEFAULT      SOCKET_TCTI",
          "49:   #define TCTI_DEFAULT_STR  \"socket\"",
          "50: #elif  HAVE_TCTI_DEV",
          "",
          "[Removed Lines]",
          "47: #ifdef HAVE_TCTI_SOCK",
          "",
          "[Added Lines]",
          "47: #ifdef HAVE_TCTI_TABRMD",
          "48:   #define TCTI_DEFAULT      TABRMD_TCTI",
          "49:   #define TCTI_DEFAULT_STR  \"tabrmd\"",
          "50: #elif HAVE_TCTI_SOCK",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: #endif",
          "82: #ifdef HAVE_TCTI_SOCK",
          "83:     SOCKET_TCTI,",
          "84: #endif",
          "85:     UNKNOWN_TCTI,",
          "86:     N_TCTI,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: #endif",
          "88: #ifdef HAVE_TCTI_TABRMD",
          "89:     TABRMD_TCTI,",
          "",
          "---------------"
        ],
        "man/tcti-options.troff||man/tcti-options.troff": [
          "File: man/tcti-options.troff -> man/tcti-options.troff",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: Supported TCTIs are",
          "12: .if (\\n[HAVE_TCTI_DEV]) or \\fB\\*(lqdevice\\*(rq\\fR",
          "13: .if (\\n[HAVE_TCTI_SOCK]) or \\fB\\*(lqsocket\\*(rq\\fR",
          "14: \\[char46]",
          "15: .TP",
          "16: .if (\\n[HAVE_TCTI_DEV]) \\{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: .if (\\n[HAVE_TCTI_TABRMD]) or \\fB\\*(lqtabrmd\\*(rq\\fR",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4019681908487bb26829f564d1384857de1ce012",
      "candidate_info": {
        "commit_hash": "4019681908487bb26829f564d1384857de1ce012",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/4019681908487bb26829f564d1384857de1ce012",
        "files": [
          "Makefile.am",
          "configure.ac",
          "lib/tcti/tpm2_tools_tcti_abrmd.c",
          "lib/tcti/tpm2_tools_tcti_device.c",
          "lib/tcti/tpm2_tools_tcti_device.h",
          "lib/tcti/tpm2_tools_tcti_socket.c",
          "lib/tcti/tpm2_tools_tcti_socket.h",
          "lib/tpm2_options.c",
          "lib/tpm2_tcti_ldr.c",
          "lib/tpm2_tcti_ldr.h",
          "tools/tpm2_tool.c"
        ],
        "message": "tcti: support dynamic tctis\n\nXXX\nRequires: https://github.com/intel/tpm2-abrmd/pull/290\n\n----\n\nUse the dynamic TCTI interface mechanism to remove the\nlink time dependency on tctis.\n\nNow, tcti's can be specified via the old, friendly name,\nand new tcti's can be added without relinking the tools.\n\nThe code performs a fixup of abrmd to tabrmd as to maintain\nbackwards compatibility with old users specifying it via\nabrmd.\n\nSigned-off-by: William Roberts <william.c.roberts@intel.com>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac",
          "lib/tcti/tpm2_tools_tcti_abrmd.c||lib/tcti/tpm2_tools_tcti_abrmd.c",
          "lib/tcti/tpm2_tools_tcti_device.c||lib/tcti/tpm2_tools_tcti_device.c",
          "lib/tcti/tpm2_tools_tcti_device.h||lib/tcti/tpm2_tools_tcti_device.h",
          "lib/tcti/tpm2_tools_tcti_socket.c||lib/tcti/tpm2_tools_tcti_socket.c",
          "lib/tcti/tpm2_tools_tcti_socket.h||lib/tcti/tpm2_tools_tcti_socket.h",
          "lib/tpm2_options.c||lib/tpm2_options.c",
          "lib/tpm2_tcti_ldr.c||lib/tpm2_tcti_ldr.c",
          "lib/tcti/tpm2_tools_tcti_abrmd.h||lib/tpm2_tcti_ldr.h",
          "tools/tpm2_tool.c||tools/tpm2_tool.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: ACLOCAL_AMFLAGS = -I m4",
          "37: LIB_COMMON := lib/libcommon.a",
          "39: AM_CFLAGS := \\",
          "43: AM_LDFLAGS   := $(EXTRA_LDFLAGS) $(CODE_COVERAGE_LIBS)",
          "45: LDADD = \\",
          "49: # keep me sorted",
          "50: bin_PROGRAMS = \\",
          "",
          "[Removed Lines]",
          "36: INCLUDE_DIRS = -I$(top_srcdir)/tools -I$(top_srcdir)/lib -I$(top_srcdir)/lib/tcti",
          "40:     $(INCLUDE_DIRS) $(EXTRA_CFLAGS) $(SAPI_CFLAGS) $(TCTI_SOCK_CFLAGS) \\",
          "41:     $(TCTI_TABRMD_CFLAGS) $(TCTI_DEV_CFLAGS) $(CRYPTO_CFLAGS) $(CODE_COVERAGE_CFLAGS)",
          "46:     $(LIB_COMMON) $(SAPI_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_TABRMD_LIBS) \\",
          "47:     $(TCTI_DEV_LIBS) $(CRYPTO_LIBS)",
          "",
          "[Added Lines]",
          "36: INCLUDE_DIRS = -I$(top_srcdir)/tools -I$(top_srcdir)/lib",
          "40:     $(INCLUDE_DIRS) $(EXTRA_CFLAGS) $(SAPI_CFLAGS) $(CRYPTO_CFLAGS) \\",
          "41:     $(CODE_COVERAGE_CFLAGS)",
          "46:     $(LIB_COMMON) $(SAPI_LIBS) $(CRYPTO_LIBS) -ldl",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:     tools/tpm2_unseal \\",
          "97:     tools/tpm2_verifysignature",
          "117: noinst_LIBRARIES = $(LIB_COMMON)",
          "118: lib_libcommon_a_SOURCES = \\",
          "120:     lib/conversion.c \\",
          "121:     lib/conversion.h \\",
          "122:     lib/files.c \\",
          "",
          "[Removed Lines]",
          "99: tcti_src =",
          "100: if HAVE_TCTI_DEV",
          "101: tcti_src += \\",
          "102:     lib/tcti/tpm2_tools_tcti_device.c \\",
          "103:     lib/tcti/tpm2_tools_tcti_device.h",
          "104: endif",
          "105: if HAVE_TCTI_SOCK",
          "106: tcti_src += \\",
          "107:     lib/tcti/tpm2_tools_tcti_socket.c \\",
          "108:     lib/tcti/tpm2_tools_tcti_socket.h",
          "109: endif",
          "110: if HAVE_TCTI_TABRMD",
          "111: tcti_src += \\",
          "112:     lib/tcti/tpm2_tools_tcti_abrmd.c \\",
          "113:     lib/tcti/tpm2_tools_tcti_abrmd.h",
          "114: endif",
          "119:  $(tcti_src) \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "152:     lib/tpm2_options.c \\",
          "153:     lib/tpm2_options.h \\",
          "154:     lib/tpm2_session.c \\",
          "157: TOOL_SRC := tools/tpm2_tool.c tools/tpm2_tool.h",
          "",
          "[Removed Lines]",
          "155:     lib/tpm2_session.h",
          "",
          "[Added Lines]",
          "135:     lib/tpm2_session.h \\",
          "136:     lib/tpm2_tcti_ldr.c \\",
          "137:     lib/tpm2_tcti_ldr.h",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "236: test_unit_test_string_bytes_SOURCES  = test/unit/test_string_bytes.c",
          "238: test_unit_test_files_CFLAGS   = $(AM_CFLAGS) $(CMOCKA_CFLAGS)",
          "241: test_unit_test_files_SOURCES  = test/unit/test_files.c",
          "243: test_unit_test_tpm2_header_CFLAGS   = $(AM_CFLAGS) $(CMOCKA_CFLAGS)",
          "",
          "[Removed Lines]",
          "239: test_unit_test_files_LDADD    = $(LIB_COMMON) $(CMOCKA_LIBS) $(TCTI_SOCK_LIBS) \\",
          "240:                                 $(TCTI_DEV_LIBS)",
          "",
          "[Added Lines]",
          "221: test_unit_test_files_LDADD    = $(LIB_COMMON) $(CMOCKA_LIBS)",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:     [AC_MSG_WARN([Required executable pandoc not found, man pages will not be built])])",
          "17: AM_CONDITIONAL([HAVE_PANDOC],[test \"x${PANDOC}\" = \"xyes\"])",
          "18: PKG_CHECK_MODULES([SAPI],[sapi])",
          "81: PKG_CHECK_MODULES([CRYPTO], [libcrypto >= 1.0.2g])",
          "82: PKG_CHECK_MODULES([CURL],[libcurl])",
          "83: AC_ARG_ENABLE([unit],",
          "84:             [AS_HELP_STRING([--enable-unit],",
          "85:                             [build cmocka unit tests (default is no)])],",
          "",
          "[Removed Lines]",
          "19: # disable libtcti-device selectively (enabled by default)",
          "20: AC_ARG_WITH(",
          "21:     [tcti-device],",
          "22:     [AS_HELP_STRING([--with-tcti-device],",
          "23:         [Build tools with support for the device TCTI.])],",
          "24:     [],",
          "25:     [with_tcti_device=check])",
          "26: AS_IF(",
          "27:     [test \"x$with_tcti_device\" != \"xno\"],",
          "28:     [PKG_CHECK_MODULES(",
          "29:         [TCTI_DEV],",
          "30:         [tcti-device],",
          "31:         [AC_DEFINE([HAVE_TCTI_DEV],[1])",
          "32:          with_tcti_device=yes],",
          "33:         [if test \"x$with_tcti_device\" = \"xyes\"; then",
          "34:              AC_MSG_FAILURE([--with-tcti-device option provided but libtcti-device not detected.])",
          "35:          fi])])",
          "36: AM_CONDITIONAL([HAVE_TCTI_DEV],[test \"x$with_tcti_device\" = \"xyes\"])",
          "37: # disable libtcti-socket selectively (enabled by default)",
          "38: AC_ARG_WITH(",
          "39:     [tcti-socket],",
          "40:     [AS_HELP_STRING([--with-tcti-socket],",
          "41:         [Build tools with support for the socket TCTI.])],",
          "42:     [],",
          "43:     [with_tcti_socket=check])",
          "44: AS_IF(",
          "45:     [test \"x$with_tcti_socket\" != \"xno\"],",
          "46:     [PKG_CHECK_MODULES(",
          "47:         [TCTI_SOCK],",
          "48:         [tcti-socket],",
          "49:         [AC_DEFINE([HAVE_TCTI_SOCK],[1])",
          "50:          with_tcti_socket=yes],",
          "51:         [if test \"x$with_tcti_socket\" = \"xyes\"; then",
          "52:              AC_MSG_FAILURE([--with-tcti-socket option provided but libtcti-socket not detected.])",
          "53:          fi])])",
          "54: AM_CONDITIONAL([HAVE_TCTI_SOCK],[test \"x$with_tcti_socket\" = \"xyes\"])",
          "55: # selectively disable libtcti-tabrmd",
          "56: AC_ARG_WITH(",
          "57:     [tcti-tabrmd],",
          "58:     [AS_HELP_STRING([--with-tcti-tabrmd],",
          "59:         [Build tools with support for the tabrmd TCTI.])],",
          "60:     [],",
          "61:     [with_tcti_tabrmd=check])",
          "62: AS_IF(",
          "63:     [test \"x$with_tcti_tabrmd\" != \"xno\"],",
          "64:     [PKG_CHECK_MODULES(",
          "65:         [TCTI_TABRMD],",
          "66:         [tcti-tabrmd],",
          "67:         [AC_DEFINE([HAVE_TCTI_TABRMD], [1])",
          "68:          with_tcti_tabrmd=yes],",
          "69:         [if test \"x$with_tcti_tabrmd\" = \"xyes\"; then",
          "70:              AC_MSG_FAILURE([--with-tcti-tabrmd option provided but libtcti-tabrmd not detected.])",
          "71:          fi])])",
          "72: AM_CONDITIONAL([HAVE_TCTI_TABRMD],[test \"x$with_tcti_tabrmd\" = \"xyes\"])",
          "73: # ensure we have at least one TCTI enabled, can't do much without one",
          "74: AS_IF(",
          "75:     [test \"x$with_tcti_device\" != \"xyes\" -a \\",
          "76:           \"x$with_tcti_socket\" != \"xyes\" -a \\",
          "77:           \"x$with_tcti_tabrmd\" != \"xyes\"],",
          "78:     [AC_MSG_ERROR(",
          "79:         [no TCTIs: at least one TCTI library must be enabled],",
          "80:         [1])])",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/tcti/tpm2_tools_tcti_abrmd.c||lib/tcti/tpm2_tools_tcti_abrmd.c": [
          "File: lib/tcti/tpm2_tools_tcti_abrmd.c -> lib/tcti/tpm2_tools_tcti_abrmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/tcti/tpm2_tools_tcti_device.c||lib/tcti/tpm2_tools_tcti_device.c": [
          "File: lib/tcti/tpm2_tools_tcti_device.c -> lib/tcti/tpm2_tools_tcti_device.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/tcti/tpm2_tools_tcti_device.h||lib/tcti/tpm2_tools_tcti_device.h": [
          "File: lib/tcti/tpm2_tools_tcti_device.h -> lib/tcti/tpm2_tools_tcti_device.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/tcti/tpm2_tools_tcti_socket.c||lib/tcti/tpm2_tools_tcti_socket.c": [
          "File: lib/tcti/tpm2_tools_tcti_socket.c -> lib/tcti/tpm2_tools_tcti_socket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/tcti/tpm2_tools_tcti_socket.h||lib/tcti/tpm2_tools_tcti_socket.h": [
          "File: lib/tcti/tpm2_tools_tcti_socket.h -> lib/tcti/tpm2_tools_tcti_socket.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/tpm2_options.c||lib/tpm2_options.c": [
          "File: lib/tpm2_options.c -> lib/tpm2_options.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include \"log.h\"",
          "44: #include \"tpm2_options.h\"",
          "45: #include \"tpm2_util.h\"",
          "75: #ifndef VERSION",
          "76:   #warning \"VERSION Not known at compile time, not embedding...\"",
          "77:   #define VERSION \"UNKNOWN\"",
          "",
          "[Removed Lines]",
          "47: #ifdef HAVE_TCTI_DEV",
          "48: #include \"tpm2_tools_tcti_device.h\"",
          "49: #endif",
          "50: #ifdef HAVE_TCTI_SOCK",
          "51: #include \"tpm2_tools_tcti_socket.h\"",
          "52: #endif",
          "53: #ifdef HAVE_TCTI_TABRMD",
          "54: #include \"tpm2_tools_tcti_abrmd.h\"",
          "55: #endif",
          "67: #ifdef HAVE_TCTI_TABRMD",
          "68:   #define TCTI_DEFAULT_STR  \"abrmd\"",
          "69: #elif HAVE_TCTI_SOCK",
          "70:   #define TCTI_DEFAULT_STR  \"socket\"",
          "71: #elif  HAVE_TCTI_DEV",
          "72:   #define TCTI_DEFAULT_STR  \"device\"",
          "73: #endif",
          "",
          "[Added Lines]",
          "45: #include \"tpm2_tcti_ldr.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:     free(opts);",
          "162: }",
          "185: static char *tcti_get_opts(char *optstr) {",
          "187:     char *split = strchr(optstr, ':');",
          "",
          "[Removed Lines]",
          "164: #define ADD_TCTI(xname, xinit) { .name = xname, .init = xinit }",
          "170: struct {",
          "171:     char       *name;",
          "172:     tcti_init   init;",
          "173: } tcti_map_table[] = {",
          "174: #ifdef HAVE_TCTI_DEV",
          "175:     ADD_TCTI(\"device\", tpm2_tools_tcti_device_init),",
          "176: #endif",
          "177: #ifdef HAVE_TCTI_SOCK",
          "178:     ADD_TCTI(\"socket\", tpm2_tools_tcti_socket_init),",
          "179: #endif",
          "180: #ifdef HAVE_TCTI_TABRMD",
          "181:     ADD_TCTI(\"abrmd\", tpm2_tools_tcti_abrmd_init)",
          "182: #endif",
          "183: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "230: }",
          "232: static void show_version (const char *name) {",
          "254: }",
          "256: void tpm2_print_usage(const char *command, struct tpm2_options *tool_opts) {",
          "",
          "[Removed Lines]",
          "233:     #ifdef HAVE_TCTI_TABRMD",
          "234:       #define TCTI_TABRMD_CONF \"tabrmd,\"",
          "235:     #else",
          "236:       #define TCTI_TABRMD_CONF \"\"",
          "237:     #endif",
          "239:     #ifdef HAVE_TCTI_SOCK",
          "240:       #define TCTI_SOCK_CONF \"socket,\"",
          "241:     #else",
          "242:       #define TCTI_SOCK_CONF \"\"",
          "243:     #endif",
          "245:     #ifdef HAVE_TCTI_DEV",
          "246:       #define TCTI_DEV_CONF \"device,\"",
          "247:     #else",
          "248:       #define TCTI_DEV_CONF \"\"",
          "249:     #endif",
          "251:     static const char *tcti_conf = TCTI_TABRMD_CONF TCTI_SOCK_CONF TCTI_DEV_CONF;",
          "252:     printf(\"tool=\\\"%s\\\" version=\\\"%s\\\" tctis=\\\"%s\\\"\\n\", name, VERSION,",
          "253:             tcti_conf);",
          "",
          "[Added Lines]",
          "185:     printf(\"tool=\\\"%s\\\" version=\\\"%s\\\" tctis=\\\"dynamic\\\"\\n\", name, VERSION);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "305:     };",
          "307:     char *tcti_opts = NULL;",
          "309:     char *env_str = getenv (TPM2TOOLS_ENV_TCTI_NAME);",
          "310:     tcti_name = env_str ? env_str : tcti_name;",
          "",
          "[Removed Lines]",
          "308:     char *tcti_name = TCTI_DEFAULT_STR;",
          "",
          "[Added Lines]",
          "240:     char *tcti_name = \"abrmd\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "392:         }",
          "393:  }",
          "415:     }",
          "417:     if (!flags->enable_errata) {",
          "",
          "[Removed Lines]",
          "395:     if (!(opts->flags & TPM2_OPTIONS_NO_SAPI)) {",
          "396:         size_t i;",
          "397:         bool found = false;",
          "398:         for(i=0; i < ARRAY_LEN(tcti_map_table); i++) {",
          "400:             char *name = tcti_map_table[i].name;",
          "401:             tcti_init init = tcti_map_table[i].init;",
          "402:             if (!strcmp(tcti_name, name)) {",
          "403:                 found = true;",
          "405:                 if (!*tcti) {",
          "406:                     goto out;",
          "407:                 }",
          "408:             }",
          "409:         }",
          "411:         if (!found) {",
          "412:             LOG_ERR(\"Unknown tcti, got: \\\"%s\\\"\", tcti_name);",
          "413:             goto out;",
          "414:         }",
          "",
          "[Added Lines]",
          "328:     if (!*tcti) {",
          "329:         LOG_ERR(\"Unknown tcti, got: \\\"%s\\\"\", tcti_name);",
          "330:         goto out;",
          "",
          "---------------"
        ],
        "lib/tpm2_tcti_ldr.c||lib/tpm2_tcti_ldr.c": [
          "File: lib/tpm2_tcti_ldr.c -> lib/tpm2_tcti_ldr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <limits.h>",
          "29: #include <stdlib.h>",
          "30: #include <stdio.h>",
          "31: #include <dlfcn.h>",
          "33: #include <sapi/tpm20.h>",
          "35: #include \"log.h\"",
          "36: #include \"tpm2_tcti_ldr.h\"",
          "38: static void *handle;",
          "40: void tpm2_tcti_ldr_unload(void) {",
          "41:     if (handle) {",
          "42:         dlclose(handle);",
          "43:     }",
          "44: }",
          "46: TSS2_TCTI_CONTEXT *tpm2_tcti_ldr_load(const char *path, char *opts) {",
          "48:     static const char tabrmd[7] = { 't', 'a', 'b', 'r', 'm', 'd', '\\0' };",
          "50:     TSS2_TCTI_CONTEXT *tcti_ctx = NULL;",
          "52:     if (handle) {",
          "53:         LOG_ERR(\"Attempting to load multiple tcti's simultaneously is not supported!\");",
          "54:         return NULL;",
          "55:     }",
          "61:     handle = dlopen (path, RTLD_LAZY);",
          "62:     if (!handle) {",
          "65:         path = !strcmp(path, \"abrmd\") ? tabrmd : path;",
          "67:         char buf[PATH_MAX];",
          "68:         size_t size = snprintf(buf, sizeof(buf), \"libtcti-%s.so\", path);",
          "69:         if (size >= sizeof(buf)) {",
          "70:             LOG_ERR(\"Truncated friendly name conversion, got: \\\"%s\\\", made: \\\"%s\\\"\",",
          "71:                     path, buf);",
          "72:             return NULL;",
          "73:         }",
          "75:         handle = dlopen (buf, RTLD_LAZY);",
          "76:         if (!handle) {",
          "77:             LOG_ERR(\"Could not dlopen library: \\\"%s\\\"\", buf);",
          "78:             return NULL;",
          "79:         }",
          "80:     }",
          "82:     TSS2_TCTI_INFO_FUNC infofn = (TSS2_TCTI_INFO_FUNC)dlsym(handle, TSS2_TCTI_INFO_SYMBOL);",
          "83:     if (!infofn) {",
          "84:         LOG_ERR(\"Symbol \\\"%s\\\"not found in library: \\\"%s\\\"\",",
          "85:                 TSS2_TCTI_INFO_SYMBOL, path);",
          "86:         goto err;",
          "87:     }",
          "89:     const TSS2_TCTI_INFO *info = infofn();",
          "91:     TSS2_TCTI_INIT_FUNC init = info->init;",
          "93:     size_t size;",
          "94:     TSS2_RC rc = init(NULL, &size, opts);",
          "95:     if (rc != TPM2_RC_SUCCESS) {",
          "96:         LOG_ERR(\"tcti init routine for getting size failed for library: \\\"%s\\\"\", path);",
          "97:         goto err;",
          "98:     }",
          "100:     tcti_ctx = (TSS2_TCTI_CONTEXT*) calloc(1, size);",
          "101:     if (tcti_ctx == NULL) {",
          "102:         LOG_ERR(\"oom\");",
          "103:         goto err;",
          "104:     }",
          "106:     rc = init(tcti_ctx, &size, opts);",
          "107:     if (rc != TPM2_RC_SUCCESS) {",
          "108:         LOG_ERR(\"tcti init routine for final initialization failed for library:\"",
          "109:                 \" \\\"%s\\\"\", path);",
          "110:         goto err;",
          "111:     }",
          "113:     return tcti_ctx;",
          "115: err:",
          "116:     free(tcti_ctx);",
          "117:     dlclose(handle);",
          "118:     return NULL;",
          "119: }",
          "",
          "---------------"
        ],
        "lib/tcti/tpm2_tools_tcti_abrmd.h||lib/tpm2_tcti_ldr.h": [
          "File: lib/tcti/tpm2_tools_tcti_abrmd.h -> lib/tpm2_tcti_ldr.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include <sapi/tpm20.h>",
          "",
          "[Removed Lines]",
          "31: #ifndef LIB_TCTI_TPM2_TOOLS_TCTI_ABRMD_H_",
          "32: #define LIB_TCTI_TPM2_TOOLS_TCTI_ABRMD_H_",
          "38:  @note",
          "46: TSS2_TCTI_CONTEXT *tpm2_tools_tcti_abrmd_init(char *opts);",
          "",
          "[Added Lines]",
          "30: #ifndef LIB_TPM2_TCTI_LDR_H_",
          "31: #define LIB_TPM2_TCTI_LDR_H_",
          "46: TSS2_TCTI_CONTEXT *tpm2_tcti_ldr_load(const char *path, char *opts);",
          "51: void tpm2_tcti_ldr_unload(void);",
          "",
          "---------------"
        ],
        "tools/tpm2_tool.c||tools/tpm2_tool.c": [
          "File: tools/tpm2_tool.c -> tools/tpm2_tool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:  #include <unistd.h>",
          "35: #include \"log.h\"",
          "36: #include \"tpm2_options.h\"",
          "37: #include \"tpm2_tool.h\"",
          "38: #include \"tpm2_util.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: #include \"tpm2_tcti_ldr.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:         tpm2_tool_onexit();",
          "172:     }",
          "174:     exit(ret);",
          "175: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "175:     tpm2_tcti_ldr_unload();",
          "",
          "---------------"
        ]
      }
    }
  ]
}