{
  "cve_id": "CVE-2017-18183",
  "cve_desc": "An issue was discovered in QPDF before 7.0.0. There is an infinite loop in the QPDFWriter::enqueueObject() function in libqpdf/QPDFWriter.cc.",
  "repo": "qpdf/qpdf",
  "patch_hash": "8249a26d69f72b9cda584c14cc3f12769985e481",
  "patch_info": {
    "commit_hash": "8249a26d69f72b9cda584c14cc3f12769985e481",
    "repo": "qpdf/qpdf",
    "commit_url": "https://github.com/qpdf/qpdf/commit/8249a26d69f72b9cda584c14cc3f12769985e481",
    "files": [
      "libqpdf/QPDFWriter.cc",
      "qpdf/qpdf.testcov",
      "qpdf/qtest/qpdf.test",
      "qpdf/qtest/qpdf/issue-143.out",
      "qpdf/qtest/qpdf/issue-143.pdf"
    ],
    "message": "Fix infinite loop in QPDFWriter (fixes #143)",
    "before_after_code_files": [
      "libqpdf/QPDFWriter.cc||libqpdf/QPDFWriter.cc",
      "qpdf/qpdf.testcov||qpdf/qpdf.testcov",
      "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test"
    ]
  },
  "patch_diff": {
    "libqpdf/QPDFWriter.cc||libqpdf/QPDFWriter.cc": [
      "File: libqpdf/QPDFWriter.cc -> libqpdf/QPDFWriter.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1056:   int stream_id = this->object_to_object_stream[og];",
      "1057:   enqueueObject(this->pdf.getObjectByID(stream_id, 0));",
      "1058:      }",
      "1059:      else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1059:                 obj_renumber[og] = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1079:   }",
      "1080:      }",
      "1081:  }",
      "1082:     }",
      "1083:     else if (object.isArray())",
      "1084:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1085:         else if (obj_renumber[og] == 0)",
      "1086:         {",
      "1089:             QTC::TC(\"qpdf\", \"QPDFWriter ignore self-referential object stream\");",
      "1090:         }",
      "",
      "---------------"
    ],
    "qpdf/qpdf.testcov||qpdf/qpdf.testcov": [
      "File: qpdf/qpdf.testcov -> qpdf/qpdf.testcov",
      "--- Hunk 1 ---",
      "[Context before]",
      "294: QPDF ignore second extra space in xref entry 0",
      "295: QPDF ignore length error xref entry 0",
      "296: QPDF_encryption pad short parameter 0",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "297: QPDFWriter ignore self-referential object stream 0",
      "",
      "---------------"
    ],
    "qpdf/qtest/qpdf.test||qpdf/qtest/qpdf.test": [
      "File: qpdf/qtest/qpdf.test -> qpdf/qtest/qpdf.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "220:     [\"106\", \"zlib data error\", 3],",
      "221:     [\"141a\", \"/W entry size 0\", 2],",
      "222:     [\"141b\", \"/W entry size 0\", 2],",
      "223:     );",
      "224: $n_tests += scalar(@bug_tests);",
      "225: foreach my $d (@bug_tests)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "223:     [\"143\", \"self-referential ostream\", 3],",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ce435222b2ae95645a1a0f79a8b1fca443ed3724",
      "candidate_info": {
        "commit_hash": "ce435222b2ae95645a1a0f79a8b1fca443ed3724",
        "repo": "qpdf/qpdf",
        "commit_url": "https://github.com/qpdf/qpdf/commit/ce435222b2ae95645a1a0f79a8b1fca443ed3724",
        "files": [
          "include/qpdf/QPDFWriter.hh",
          "libqpdf/QPDFWriter.cc"
        ],
        "message": "Push QPDFWriter member variables into a nested class",
        "before_after_code_files": [
          "include/qpdf/QPDFWriter.hh||include/qpdf/QPDFWriter.hh",
          "libqpdf/QPDFWriter.cc||libqpdf/QPDFWriter.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libqpdf/QPDFWriter.cc||libqpdf/QPDFWriter.cc"
          ],
          "candidate": [
            "libqpdf/QPDFWriter.cc||libqpdf/QPDFWriter.cc"
          ]
        }
      },
      "candidate_diff": {
        "include/qpdf/QPDFWriter.hh||include/qpdf/QPDFWriter.hh": [
          "File: include/qpdf/QPDFWriter.hh -> include/qpdf/QPDFWriter.hh",
          "--- Hunk 1 ---",
          "[Context before]",
          "375:     enum trailer_e { t_normal, t_lin_first, t_lin_second };",
          "378:     int bytesNeeded(unsigned long long n);",
          "379:     void writeBinary(unsigned long long val, unsigned int bytes);",
          "380:     void writeString(std::string const& str);",
          "",
          "[Removed Lines]",
          "377:     void init();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "483:     void discardGeneration(std::map<QPDFObjGen, int> const& in,",
          "484:                            std::map<int, int>& out);",
          "551: };",
          "553: #endif // __QPDFWRITER_HH__",
          "",
          "[Removed Lines]",
          "486:     QPDF& pdf;",
          "487:     char const* filename;",
          "488:     FILE* file;",
          "489:     bool close_file;",
          "490:     Pl_Buffer* buffer_pipeline;",
          "491:     Buffer* output_buffer;",
          "492:     bool normalize_content_set;",
          "493:     bool normalize_content;",
          "494:     bool compress_streams;",
          "495:     bool compress_streams_set;",
          "496:     qpdf_stream_decode_level_e stream_decode_level;",
          "497:     bool stream_decode_level_set;",
          "498:     bool qdf_mode;",
          "499:     bool preserve_unreferenced_objects;",
          "500:     bool newline_before_endstream;",
          "501:     bool static_id;",
          "502:     bool suppress_original_object_ids;",
          "503:     bool direct_stream_lengths;",
          "504:     bool encrypted;",
          "505:     bool preserve_encryption;",
          "506:     bool linearized;",
          "507:     bool pclm;",
          "508:     qpdf_object_stream_e object_stream_mode;",
          "509:     std::string encryption_key;",
          "510:     bool encrypt_metadata;",
          "511:     bool encrypt_use_aes;",
          "512:     std::map<std::string, std::string> encryption_dictionary;",
          "513:     int encryption_V;",
          "514:     int encryption_R;",
          "516:     std::string id1;  // for /ID key of",
          "517:     std::string id2;  // trailer dictionary",
          "518:     std::string final_pdf_version;",
          "519:     int final_extension_level;",
          "520:     std::string min_pdf_version;",
          "521:     int min_extension_level;",
          "522:     std::string forced_pdf_version;",
          "523:     int forced_extension_level;",
          "524:     std::string extra_header_text;",
          "525:     int encryption_dict_objid;",
          "526:     std::string cur_data_key;",
          "527:     std::list<PointerHolder<Pipeline> > to_delete;",
          "528:     Pl_Count* pipeline;",
          "529:     std::list<QPDFObjectHandle> object_queue;",
          "530:     std::map<QPDFObjGen, int> obj_renumber;",
          "531:     std::map<int, QPDFXRefEntry> xref;",
          "532:     std::map<int, qpdf_offset_t> lengths;",
          "533:     int next_objid;",
          "534:     int cur_stream_length_id;",
          "535:     size_t cur_stream_length;",
          "536:     bool added_newline;",
          "537:     int max_ostream_index;",
          "538:     std::set<QPDFObjGen> normalized_streams;",
          "539:     std::map<QPDFObjGen, int> page_object_to_seq;",
          "540:     std::map<QPDFObjGen, int> contents_to_page_seq;",
          "541:     std::map<QPDFObjGen, int> object_to_object_stream;",
          "542:     std::map<int, std::set<QPDFObjGen> > object_stream_to_objects;",
          "543:     std::list<Pipeline*> pipeline_stack;",
          "544:     bool deterministic_id;",
          "545:     Pl_MD5* md5_pipeline;",
          "546:     std::string deterministic_id_data;",
          "549:     std::map<int, int> obj_renumber_no_gen;",
          "550:     std::map<int, int> object_to_object_stream_no_gen;",
          "",
          "[Added Lines]",
          "485:     class Members",
          "486:     {",
          "487:         friend class QPDFWriter;",
          "489:       public:",
          "490:         ~Members();",
          "492:       private:",
          "493:         Members(QPDF& pdf);",
          "494:         Members(Members const&);",
          "496:         QPDF& pdf;",
          "497:         char const* filename;",
          "498:         FILE* file;",
          "499:         bool close_file;",
          "500:         Pl_Buffer* buffer_pipeline;",
          "501:         Buffer* output_buffer;",
          "502:         bool normalize_content_set;",
          "503:         bool normalize_content;",
          "504:         bool compress_streams;",
          "505:         bool compress_streams_set;",
          "506:         qpdf_stream_decode_level_e stream_decode_level;",
          "507:         bool stream_decode_level_set;",
          "508:         bool qdf_mode;",
          "509:         bool preserve_unreferenced_objects;",
          "510:         bool newline_before_endstream;",
          "511:         bool static_id;",
          "512:         bool suppress_original_object_ids;",
          "513:         bool direct_stream_lengths;",
          "514:         bool encrypted;",
          "515:         bool preserve_encryption;",
          "516:         bool linearized;",
          "517:         bool pclm;",
          "518:         qpdf_object_stream_e object_stream_mode;",
          "519:         std::string encryption_key;",
          "520:         bool encrypt_metadata;",
          "521:         bool encrypt_use_aes;",
          "522:         std::map<std::string, std::string> encryption_dictionary;",
          "523:         int encryption_V;",
          "524:         int encryption_R;",
          "526:         std::string id1;  // for /ID key of",
          "527:         std::string id2;  // trailer dictionary",
          "528:         std::string final_pdf_version;",
          "529:         int final_extension_level;",
          "530:         std::string min_pdf_version;",
          "531:         int min_extension_level;",
          "532:         std::string forced_pdf_version;",
          "533:         int forced_extension_level;",
          "534:         std::string extra_header_text;",
          "535:         int encryption_dict_objid;",
          "536:         std::string cur_data_key;",
          "537:         std::list<PointerHolder<Pipeline> > to_delete;",
          "538:         Pl_Count* pipeline;",
          "539:         std::list<QPDFObjectHandle> object_queue;",
          "540:         std::map<QPDFObjGen, int> obj_renumber;",
          "541:         std::map<int, QPDFXRefEntry> xref;",
          "542:         std::map<int, qpdf_offset_t> lengths;",
          "543:         int next_objid;",
          "544:         int cur_stream_length_id;",
          "545:         size_t cur_stream_length;",
          "546:         bool added_newline;",
          "547:         int max_ostream_index;",
          "548:         std::set<QPDFObjGen> normalized_streams;",
          "549:         std::map<QPDFObjGen, int> page_object_to_seq;",
          "550:         std::map<QPDFObjGen, int> contents_to_page_seq;",
          "551:         std::map<QPDFObjGen, int> object_to_object_stream;",
          "552:         std::map<int, std::set<QPDFObjGen> > object_stream_to_objects;",
          "553:         std::list<Pipeline*> pipeline_stack;",
          "554:         bool deterministic_id;",
          "555:         Pl_MD5* md5_pipeline;",
          "556:         std::string deterministic_id_data;",
          "559:         std::map<int, int> obj_renumber_no_gen;",
          "560:         std::map<int, int> object_to_object_stream_no_gen;",
          "561:     };",
          "566:     PointerHolder<Members> m;",
          "",
          "---------------"
        ],
        "libqpdf/QPDFWriter.cc||libqpdf/QPDFWriter.cc": [
          "File: libqpdf/QPDFWriter.cc -> libqpdf/QPDFWriter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <algorithm>",
          "24: #include <stdlib.h>",
          "26: QPDFWriter::QPDFWriter(QPDF& pdf) :",
          "28: {",
          "30: }",
          "32: QPDFWriter::QPDFWriter(QPDF& pdf, char const* filename) :",
          "34: {",
          "36:     setOutputFilename(filename);",
          "37: }",
          "39: QPDFWriter::QPDFWriter(QPDF& pdf, char const* description,",
          "40:                        FILE *file, bool close_file) :",
          "42: {",
          "44:     setOutputFile(description, file, close_file);",
          "45: }",
          "90: QPDFWriter::~QPDFWriter()",
          "91: {",
          "100: }",
          "102: void",
          "",
          "[Removed Lines]",
          "27:     pdf(pdf)",
          "29:     init();",
          "33:     pdf(pdf)",
          "35:     init();",
          "41:     pdf(pdf)",
          "43:     init();",
          "47: void",
          "48: QPDFWriter::init()",
          "49: {",
          "50:     filename = 0;",
          "51:     file = 0;",
          "52:     close_file = false;",
          "53:     buffer_pipeline = 0;",
          "54:     output_buffer = 0;",
          "55:     normalize_content_set = false;",
          "56:     normalize_content = false;",
          "57:     compress_streams = true;",
          "58:     compress_streams_set = false;",
          "59:     stream_decode_level = qpdf_dl_none;",
          "60:     stream_decode_level_set = false;",
          "61:     qdf_mode = false;",
          "62:     preserve_unreferenced_objects = false;",
          "63:     newline_before_endstream = false;",
          "64:     static_id = false;",
          "65:     suppress_original_object_ids = false;",
          "66:     direct_stream_lengths = true;",
          "67:     encrypted = false;",
          "68:     preserve_encryption = true;",
          "69:     linearized = false;",
          "70:     pclm = false;",
          "71:     object_stream_mode = qpdf_o_preserve;",
          "72:     encrypt_metadata = true;",
          "73:     encrypt_use_aes = false;",
          "74:     min_extension_level = 0;",
          "75:     final_extension_level = 0;",
          "76:     forced_extension_level = 0;",
          "77:     encryption_V = 0;",
          "78:     encryption_R = 0;",
          "79:     encryption_dict_objid = 0;",
          "80:     pipeline = 0;",
          "81:     next_objid = 1;",
          "82:     cur_stream_length_id = 0;",
          "83:     cur_stream_length = 0;",
          "84:     added_newline = false;",
          "85:     max_ostream_index = 0;",
          "86:     deterministic_id = false;",
          "87:     md5_pipeline = 0;",
          "88: }",
          "92:     if (file && close_file)",
          "93:     {",
          "94:  fclose(file);",
          "95:     }",
          "96:     if (output_buffer)",
          "97:     {",
          "98:  delete output_buffer;",
          "99:     }",
          "",
          "[Added Lines]",
          "26: QPDFWriter::Members::Members(QPDF& pdf) :",
          "27:     pdf(pdf),",
          "28:     filename(0),",
          "29:     file(0),",
          "30:     close_file(false),",
          "31:     buffer_pipeline(0),",
          "32:     output_buffer(0),",
          "33:     normalize_content_set(false),",
          "34:     normalize_content(false),",
          "35:     compress_streams(true),",
          "36:     compress_streams_set(false),",
          "37:     stream_decode_level(qpdf_dl_none),",
          "38:     stream_decode_level_set(false),",
          "39:     qdf_mode(false),",
          "40:     preserve_unreferenced_objects(false),",
          "41:     newline_before_endstream(false),",
          "42:     static_id(false),",
          "43:     suppress_original_object_ids(false),",
          "44:     direct_stream_lengths(true),",
          "45:     encrypted(false),",
          "46:     preserve_encryption(true),",
          "47:     linearized(false),",
          "48:     pclm(false),",
          "49:     object_stream_mode(qpdf_o_preserve),",
          "50:     encrypt_metadata(true),",
          "51:     encrypt_use_aes(false),",
          "52:     encryption_V(0),",
          "53:     encryption_R(0),",
          "54:     final_extension_level(0),",
          "55:     min_extension_level(0),",
          "56:     forced_extension_level(0),",
          "57:     encryption_dict_objid(0),",
          "58:     pipeline(0),",
          "59:     next_objid(1),",
          "60:     cur_stream_length_id(0),",
          "61:     cur_stream_length(0),",
          "62:     added_newline(false),",
          "63:     max_ostream_index(0),",
          "64:     deterministic_id(false),",
          "65:     md5_pipeline(0)",
          "66: {",
          "67: }",
          "69: QPDFWriter::Members::~Members()",
          "70: {",
          "71:     if (file && close_file)",
          "72:     {",
          "73:  fclose(file);",
          "74:     }",
          "75:     if (output_buffer)",
          "76:     {",
          "77:  delete output_buffer;",
          "78:     }",
          "79: }",
          "82:     m(new Members(pdf))",
          "87:     m(new Members(pdf))",
          "94:     m(new Members(pdf))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104: {",
          "105:     char const* description = filename;",
          "106:     FILE* f = 0;",
          "107:     if (filename == 0)",
          "108:     {",
          "109:  description = \"standard output\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "108:     bool close_file = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123: void",
          "124: QPDFWriter::setOutputFile(char const* description, FILE* file, bool close_file)",
          "125: {",
          "129:     Pipeline* p = new Pl_StdioFile(\"qpdf output\", file);",
          "131:     initializePipelineStack(p);",
          "132: }",
          "134: void",
          "135: QPDFWriter::setOutputMemory()",
          "136: {",
          "141: }",
          "143: Buffer*",
          "144: QPDFWriter::getBuffer()",
          "145: {",
          "148:     return result;",
          "149: }",
          "151: void",
          "152: QPDFWriter::setOutputPipeline(Pipeline* p)",
          "153: {",
          "155:     initializePipelineStack(p);",
          "156: }",
          "158: void",
          "159: QPDFWriter::setObjectStreamMode(qpdf_object_stream_e mode)",
          "160: {",
          "162: }",
          "164: void",
          "",
          "[Removed Lines]",
          "126:     this->filename = description;",
          "127:     this->file = file;",
          "128:     this->close_file = close_file;",
          "130:     to_delete.push_back(p);",
          "137:     this->filename = \"memory buffer\";",
          "138:     this->buffer_pipeline = new Pl_Buffer(\"qpdf output\");",
          "139:     to_delete.push_back(this->buffer_pipeline);",
          "140:     initializePipelineStack(this->buffer_pipeline);",
          "146:     Buffer* result = this->output_buffer;",
          "147:     this->output_buffer = 0;",
          "154:     this->filename = \"custom pipeline\";",
          "161:     this->object_stream_mode = mode;",
          "",
          "[Added Lines]",
          "128:     this->m->filename = description;",
          "129:     this->m->file = file;",
          "130:     this->m->close_file = close_file;",
          "132:     this->m->to_delete.push_back(p);",
          "139:     this->m->filename = \"memory buffer\";",
          "140:     this->m->buffer_pipeline = new Pl_Buffer(\"qpdf output\");",
          "141:     this->m->to_delete.push_back(this->m->buffer_pipeline);",
          "142:     initializePipelineStack(this->m->buffer_pipeline);",
          "148:     Buffer* result = this->m->output_buffer;",
          "149:     this->m->output_buffer = 0;",
          "156:     this->m->filename = \"custom pipeline\";",
          "163:     this->m->object_stream_mode = mode;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "167:     switch (mode)",
          "168:     {",
          "169:       case qpdf_s_uncompress:",
          "173:         break;",
          "175:       case qpdf_s_preserve:",
          "178:         break;",
          "180:       case qpdf_s_compress:",
          "184:         break;",
          "185:     }",
          "188: }",
          "191: void",
          "192: QPDFWriter::setCompressStreams(bool val)",
          "193: {",
          "196: }",
          "198: void",
          "199: QPDFWriter::setDecodeLevel(qpdf_stream_decode_level_e val)",
          "200: {",
          "203: }",
          "205: void",
          "206: QPDFWriter::setContentNormalization(bool val)",
          "207: {",
          "210: }",
          "212: void",
          "213: QPDFWriter::setQDFMode(bool val)",
          "214: {",
          "216: }",
          "218: void",
          "219: QPDFWriter::setPreserveUnreferencedObjects(bool val)",
          "220: {",
          "222: }",
          "224: void",
          "225: QPDFWriter::setNewlineBeforeEndstream(bool val)",
          "226: {",
          "228: }",
          "230: void",
          "",
          "[Removed Lines]",
          "170:         this->stream_decode_level =",
          "171:             std::max(qpdf_dl_generalized, this->stream_decode_level);",
          "172:         this->compress_streams = false;",
          "176:         this->stream_decode_level = qpdf_dl_none;",
          "177:         this->compress_streams = false;",
          "181:         this->stream_decode_level =",
          "182:             std::max(qpdf_dl_generalized, this->stream_decode_level);",
          "183:         this->compress_streams = true;",
          "186:     this->stream_decode_level_set = true;",
          "187:     this->compress_streams_set = true;",
          "194:     this->compress_streams = val;",
          "195:     this->compress_streams_set = true;",
          "201:     this->stream_decode_level = val;",
          "202:     this->stream_decode_level_set = true;",
          "208:     this->normalize_content_set = true;",
          "209:     this->normalize_content = val;",
          "215:     this->qdf_mode = val;",
          "221:     this->preserve_unreferenced_objects = val;",
          "227:     this->newline_before_endstream = val;",
          "",
          "[Added Lines]",
          "172:         this->m->stream_decode_level =",
          "173:             std::max(qpdf_dl_generalized, this->m->stream_decode_level);",
          "174:         this->m->compress_streams = false;",
          "178:         this->m->stream_decode_level = qpdf_dl_none;",
          "179:         this->m->compress_streams = false;",
          "183:         this->m->stream_decode_level =",
          "184:             std::max(qpdf_dl_generalized, this->m->stream_decode_level);",
          "185:         this->m->compress_streams = true;",
          "188:     this->m->stream_decode_level_set = true;",
          "189:     this->m->compress_streams_set = true;",
          "196:     this->m->compress_streams = val;",
          "197:     this->m->compress_streams_set = true;",
          "203:     this->m->stream_decode_level = val;",
          "204:     this->m->stream_decode_level_set = true;",
          "210:     this->m->normalize_content_set = true;",
          "211:     this->m->normalize_content = val;",
          "217:     this->m->qdf_mode = val;",
          "223:     this->m->preserve_unreferenced_objects = val;",
          "229:     this->m->newline_before_endstream = val;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "239: {",
          "240:     bool set_version = false;",
          "241:     bool set_extension_level = false;",
          "243:     {",
          "244:  set_version = true;",
          "245:         set_extension_level = true;",
          "",
          "[Removed Lines]",
          "242:     if (this->min_pdf_version.empty())",
          "",
          "[Added Lines]",
          "244:     if (this->m->min_pdf_version.empty())",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "251:  int min_major = 0;",
          "252:  int min_minor = 0;",
          "253:  parseVersion(version, old_major, old_minor);",
          "255:         int compare = compareVersions(",
          "256:             old_major, old_minor, min_major, min_minor);",
          "257:  if (compare > 0)",
          "",
          "[Removed Lines]",
          "254:  parseVersion(this->min_pdf_version, min_major, min_minor);",
          "",
          "[Added Lines]",
          "256:  parseVersion(this->m->min_pdf_version, min_major, min_minor);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "263:  }",
          "264:         else if (compare == 0)",
          "265:         {",
          "267:             {",
          "268:                 QTC::TC(\"qpdf\", \"QPDFWriter increasing extension level\");",
          "269:                 set_extension_level = true;",
          "",
          "[Removed Lines]",
          "266:             if (extension_level > this->min_extension_level)",
          "",
          "[Added Lines]",
          "268:             if (extension_level > this->m->min_extension_level)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "274:     if (set_version)",
          "275:     {",
          "277:     }",
          "278:     if (set_extension_level)",
          "279:     {",
          "281:     }",
          "282: }",
          "",
          "[Removed Lines]",
          "276:  this->min_pdf_version = version;",
          "280:         this->min_extension_level = extension_level;",
          "",
          "[Added Lines]",
          "278:  this->m->min_pdf_version = version;",
          "282:         this->m->min_extension_level = extension_level;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "291: QPDFWriter::forcePDFVersion(std::string const& version,",
          "292:                             int extension_level)",
          "293: {",
          "296: }",
          "298: void",
          "299: QPDFWriter::setExtraHeaderText(std::string const& text)",
          "300: {",
          "304:     {",
          "305:         QTC::TC(\"qpdf\", \"QPDFWriter extra header text add newline\");",
          "307:     }",
          "308:     else",
          "309:     {",
          "",
          "[Removed Lines]",
          "294:     this->forced_pdf_version = version;",
          "295:     this->forced_extension_level = extension_level;",
          "301:     this->extra_header_text = text;",
          "302:     if ((this->extra_header_text.length() > 0) &&",
          "303:         (*(this->extra_header_text.rbegin()) != '\\n'))",
          "306:         this->extra_header_text += \"\\n\";",
          "",
          "[Added Lines]",
          "296:     this->m->forced_pdf_version = version;",
          "297:     this->m->forced_extension_level = extension_level;",
          "303:     this->m->extra_header_text = text;",
          "304:     if ((this->m->extra_header_text.length() > 0) &&",
          "305:         (*(this->m->extra_header_text.rbegin()) != '\\n'))",
          "308:         this->m->extra_header_text += \"\\n\";",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "314: void",
          "315: QPDFWriter::setStaticID(bool val)",
          "316: {",
          "318: }",
          "320: void",
          "321: QPDFWriter::setDeterministicID(bool val)",
          "322: {",
          "324: }",
          "326: void",
          "",
          "[Removed Lines]",
          "317:     this->static_id = val;",
          "323:     this->deterministic_id = val;",
          "",
          "[Added Lines]",
          "319:     this->m->static_id = val;",
          "325:     this->m->deterministic_id = val;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "335: void",
          "336: QPDFWriter::setSuppressOriginalObjectIDs(bool val)",
          "337: {",
          "339: }",
          "341: void",
          "342: QPDFWriter::setPreserveEncryption(bool val)",
          "343: {",
          "345: }",
          "347: void",
          "348: QPDFWriter::setLinearization(bool val)",
          "349: {",
          "351:     if (val)",
          "352:     {",
          "354:     }",
          "355: }",
          "357: void",
          "358: QPDFWriter::setPCLm(bool val)",
          "359: {",
          "361:     if (val)",
          "362:     {",
          "364:     }",
          "365: }",
          "",
          "[Removed Lines]",
          "338:     this->suppress_original_object_ids = val;",
          "344:     this->preserve_encryption = val;",
          "350:     this->linearized = val;",
          "353:         this->pclm = false;",
          "360:     this->pclm = val;",
          "363:         this->linearized = false;",
          "",
          "[Added Lines]",
          "340:     this->m->suppress_original_object_ids = val;",
          "346:     this->m->preserve_encryption = val;",
          "352:     this->m->linearized = val;",
          "355:         this->m->pclm = false;",
          "362:     this->m->pclm = val;",
          "365:         this->m->linearized = false;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "415:     interpretR3EncryptionParameters(",
          "416:  clear, user_password, owner_password,",
          "417:  allow_accessibility, allow_extract, print, modify);",
          "420:     setEncryptionParameters(user_password, owner_password, 4, 4, 16, clear);",
          "421: }",
          "",
          "[Removed Lines]",
          "418:     this->encrypt_use_aes = use_aes;",
          "419:     this->encrypt_metadata = encrypt_metadata;",
          "",
          "[Added Lines]",
          "420:     this->m->encrypt_use_aes = use_aes;",
          "421:     this->m->encrypt_metadata = encrypt_metadata;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "431:     interpretR3EncryptionParameters(",
          "432:  clear, user_password, owner_password,",
          "433:  allow_accessibility, allow_extract, print, modify);",
          "436:     setEncryptionParameters(user_password, owner_password, 5, 5, 32, clear);",
          "437: }",
          "",
          "[Removed Lines]",
          "434:     this->encrypt_use_aes = true;",
          "435:     this->encrypt_metadata = encrypt_metadata;",
          "",
          "[Added Lines]",
          "436:     this->m->encrypt_use_aes = true;",
          "437:     this->m->encrypt_metadata = encrypt_metadata;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "447:     interpretR3EncryptionParameters(",
          "448:  clear, user_password, owner_password,",
          "449:  allow_accessibility, allow_extract, print, modify);",
          "452:     setEncryptionParameters(user_password, owner_password, 5, 6, 32, clear);",
          "453: }",
          "",
          "[Removed Lines]",
          "450:     this->encrypt_use_aes = true;",
          "451:     this->encrypt_metadata = encrypt_metadata;",
          "",
          "[Added Lines]",
          "452:     this->m->encrypt_use_aes = true;",
          "453:     this->m->encrypt_metadata = encrypt_metadata;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "563:     {",
          "564:         QPDF::compute_encryption_O_U(",
          "565:             user_password, owner_password, V, R, key_len, P,",
          "567:     }",
          "568:     else",
          "569:     {",
          "570:         QPDF::compute_encryption_parameters_V5(",
          "571:             user_password, owner_password, V, R, key_len, P,",
          "573:             encryption_key, O, U, OE, UE, Perms);",
          "574:     }",
          "575:     setEncryptionParametersInternal(",
          "576:  V, R, key_len, P, O, U, OE, UE, Perms,",
          "578: }",
          "580: void",
          "581: QPDFWriter::copyEncryptionParameters(QPDF& qpdf)",
          "582: {",
          "584:     QPDFObjectHandle trailer = qpdf.getTrailer();",
          "585:     if (trailer.hasKey(\"/Encrypt\"))",
          "586:     {",
          "587:         generateID();",
          "589:             trailer.getKey(\"/ID\").getArrayItem(0).getStringValue();",
          "590:  QPDFObjectHandle encrypt = trailer.getKey(\"/Encrypt\");",
          "591:  int V = encrypt.getKey(\"/V\").getIntValue();",
          "",
          "[Removed Lines]",
          "566:             this->encrypt_metadata, this->id1, O, U);",
          "572:             this->encrypt_metadata, this->id1,",
          "577:         this->id1, user_password, encryption_key);",
          "583:     this->preserve_encryption = false;",
          "588:         this->id1 =",
          "",
          "[Added Lines]",
          "568:             this->m->encrypt_metadata, this->m->id1, O, U);",
          "574:             this->m->encrypt_metadata, this->m->id1,",
          "579:         this->m->id1, user_password, encryption_key);",
          "585:     this->m->preserve_encryption = false;",
          "590:         this->m->id1 =",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "597:  if (encrypt.hasKey(\"/EncryptMetadata\") &&",
          "598:      encrypt.getKey(\"/EncryptMetadata\").isBool())",
          "599:  {",
          "601:   encrypt.getKey(\"/EncryptMetadata\").getBoolValue();",
          "602:  }",
          "603:         if (V >= 4)",
          "",
          "[Removed Lines]",
          "600:      this->encrypt_metadata =",
          "",
          "[Added Lines]",
          "602:      this->m->encrypt_metadata =",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "612:         }",
          "613:  QTC::TC(\"qpdf\", \"QPDFWriter copy encrypt metadata\",",
          "615:         QTC::TC(\"qpdf\", \"QPDFWriter copy use_aes\",",
          "617:         std::string OE;",
          "618:         std::string UE;",
          "619:         std::string Perms;",
          "",
          "[Removed Lines]",
          "611:             this->encrypt_use_aes = true;",
          "614:   this->encrypt_metadata ? 0 : 1);",
          "616:                 this->encrypt_use_aes ? 0 : 1);",
          "",
          "[Added Lines]",
          "613:             this->m->encrypt_use_aes = true;",
          "616:   this->m->encrypt_metadata ? 0 : 1);",
          "618:                 this->m->encrypt_use_aes ? 0 : 1);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "637:             OE,",
          "638:             UE,",
          "639:             Perms,",
          "641:      qpdf.getPaddedUserPassword(),",
          "642:             encryption_key);",
          "643:     }",
          "",
          "[Removed Lines]",
          "640:      this->id1,  // this->id1 == the other file's id1",
          "",
          "[Added Lines]",
          "642:      this->m->id1,  // this->m->id1 == the other file's id1",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "647: QPDFWriter::disableIncompatibleEncryption(int major, int minor,",
          "648:                                           int extension_level)",
          "649: {",
          "651:     {",
          "652:  return;",
          "653:     }",
          "",
          "[Removed Lines]",
          "650:     if (! this->encrypted)",
          "",
          "[Added Lines]",
          "652:     if (! this->m->encrypted)",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "659:     }",
          "660:     else",
          "661:     {",
          "664:  if (compareVersions(major, minor, 1, 4) < 0)",
          "665:  {",
          "666:      if ((V > 1) || (R > 2))",
          "",
          "[Removed Lines]",
          "662:  int V = atoi(encryption_dictionary[\"/V\"].c_str());",
          "663:  int R = atoi(encryption_dictionary[\"/R\"].c_str());",
          "",
          "[Added Lines]",
          "664:  int V = atoi(this->m->encryption_dictionary[\"/V\"].c_str());",
          "665:  int R = atoi(this->m->encryption_dictionary[\"/R\"].c_str());",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "677:  }",
          "678:  else if (compareVersions(major, minor, 1, 6) < 0)",
          "679:  {",
          "681:      {",
          "682:   disable = true;",
          "683:      }",
          "",
          "[Removed Lines]",
          "680:      if (this->encrypt_use_aes)",
          "",
          "[Added Lines]",
          "682:      if (this->m->encrypt_use_aes)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "695:     if (disable)",
          "696:     {",
          "697:  QTC::TC(\"qpdf\", \"QPDFWriter forced version disabled encryption\");",
          "699:     }",
          "700: }",
          "",
          "[Removed Lines]",
          "698:  this->encrypted = false;",
          "",
          "[Added Lines]",
          "700:  this->m->encrypted = false;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "754:     std::string const& id1, std::string const& user_password,",
          "755:     std::string const& encryption_key)",
          "756: {",
          "766:     if (V >= 5)",
          "767:     {",
          "771:     }",
          "772:     if (R >= 6)",
          "773:     {",
          "",
          "[Removed Lines]",
          "757:     this->encryption_V = V;",
          "758:     this->encryption_R = R;",
          "759:     encryption_dictionary[\"/Filter\"] = \"/Standard\";",
          "760:     encryption_dictionary[\"/V\"] = QUtil::int_to_string(V);",
          "761:     encryption_dictionary[\"/Length\"] = QUtil::int_to_string(key_len * 8);",
          "762:     encryption_dictionary[\"/R\"] = QUtil::int_to_string(R);",
          "763:     encryption_dictionary[\"/P\"] = QUtil::int_to_string(P);",
          "764:     encryption_dictionary[\"/O\"] = QPDF_String(O).unparse(true);",
          "765:     encryption_dictionary[\"/U\"] = QPDF_String(U).unparse(true);",
          "768:         encryption_dictionary[\"/OE\"] = QPDF_String(OE).unparse(true);",
          "769:         encryption_dictionary[\"/UE\"] = QPDF_String(UE).unparse(true);",
          "770:         encryption_dictionary[\"/Perms\"] = QPDF_String(Perms).unparse(true);",
          "",
          "[Added Lines]",
          "759:     this->m->encryption_V = V;",
          "760:     this->m->encryption_R = R;",
          "761:     this->m->encryption_dictionary[\"/Filter\"] = \"/Standard\";",
          "762:     this->m->encryption_dictionary[\"/V\"] = QUtil::int_to_string(V);",
          "763:     this->m->encryption_dictionary[\"/Length\"] =",
          "764:         QUtil::int_to_string(key_len * 8);",
          "765:     this->m->encryption_dictionary[\"/R\"] = QUtil::int_to_string(R);",
          "766:     this->m->encryption_dictionary[\"/P\"] = QUtil::int_to_string(P);",
          "767:     this->m->encryption_dictionary[\"/O\"] = QPDF_String(O).unparse(true);",
          "768:     this->m->encryption_dictionary[\"/U\"] = QPDF_String(U).unparse(true);",
          "771:         this->m->encryption_dictionary[\"/OE\"] = QPDF_String(OE).unparse(true);",
          "772:         this->m->encryption_dictionary[\"/UE\"] = QPDF_String(UE).unparse(true);",
          "773:         this->m->encryption_dictionary[\"/Perms\"] =",
          "774:             QPDF_String(Perms).unparse(true);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "779:     }",
          "780:     else if (R == 4)",
          "781:     {",
          "783:     }",
          "784:     else if (R == 3)",
          "785:     {",
          "",
          "[Removed Lines]",
          "782:         setMinimumPDFVersion(this->encrypt_use_aes ? \"1.6\" : \"1.5\");",
          "",
          "[Added Lines]",
          "786:         setMinimumPDFVersion(this->m->encrypt_use_aes ? \"1.6\" : \"1.5\");",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "790:         setMinimumPDFVersion(\"1.3\");",
          "791:     }",
          "794:     {",
          "796:     }",
          "797:     if ((V == 4) || (V == 5))",
          "798:     {",
          "805:                               ? ((V < 5) ? \"/AESV2\" : \"/AESV3\")",
          "806:                               : \"/V2\");",
          "811:      \"<< /StdCF << /AuthEvent /DocOpen /CFM \" + method +",
          "812:             \" /Length \" + std::string((V < 5) ? \"16\" : \"32\") + \" >> >>\";",
          "813:     }",
          "816:     QPDF::EncryptionData encryption_data(",
          "818:     if (V < 5)",
          "819:     {",
          "821:             user_password, encryption_data);",
          "822:     }",
          "823:     else",
          "824:     {",
          "826:     }",
          "827: }",
          "829: void",
          "830: QPDFWriter::setDataKey(int objid)",
          "831: {",
          "835: }",
          "837: int",
          "",
          "[Removed Lines]",
          "793:     if ((R >= 4) && (! encrypt_metadata))",
          "795:  encryption_dictionary[\"/EncryptMetadata\"] = \"false\";",
          "802:  encryption_dictionary[\"/StmF\"] = \"/StdCF\";",
          "803:  encryption_dictionary[\"/StrF\"] = \"/StdCF\";",
          "804:  std::string method = (this->encrypt_use_aes",
          "810:  encryption_dictionary[\"/CF\"] =",
          "815:     this->encrypted = true;",
          "817:  V, R, key_len, P, O, U, OE, UE, Perms, id1, this->encrypt_metadata);",
          "820:         this->encryption_key = QPDF::compute_encryption_key(",
          "825:         this->encryption_key = encryption_key;",
          "832:     this->cur_data_key = QPDF::compute_data_key(",
          "833:  this->encryption_key, objid, 0,",
          "834:         this->encrypt_use_aes, this->encryption_V, this->encryption_R);",
          "",
          "[Added Lines]",
          "797:     if ((R >= 4) && (! this->m->encrypt_metadata))",
          "799:  this->m->encryption_dictionary[\"/EncryptMetadata\"] = \"false\";",
          "806:  this->m->encryption_dictionary[\"/StmF\"] = \"/StdCF\";",
          "807:  this->m->encryption_dictionary[\"/StrF\"] = \"/StdCF\";",
          "808:  std::string method = (this->m->encrypt_use_aes",
          "814:  this->m->encryption_dictionary[\"/CF\"] =",
          "819:     this->m->encrypted = true;",
          "821:  V, R, key_len, P, O, U, OE, UE, Perms, id1, this->m->encrypt_metadata);",
          "824:         this->m->encryption_key = QPDF::compute_encryption_key(",
          "829:         this->m->encryption_key = encryption_key;",
          "836:     this->m->cur_data_key = QPDF::compute_data_key(",
          "837:  this->m->encryption_key, objid, 0,",
          "838:         this->m->encrypt_use_aes, this->m->encryption_V, this->m->encryption_R);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "860:  data[bytes - i - 1] = static_cast<unsigned char>(val & 0xff);",
          "861:  val >>= 8;",
          "862:     }",
          "864: }",
          "866: void",
          "867: QPDFWriter::writeString(std::string const& str)",
          "868: {",
          "870: }",
          "872: void",
          "873: QPDFWriter::writeBuffer(PointerHolder<Buffer>& b)",
          "874: {",
          "876: }",
          "878: void",
          "879: QPDFWriter::writeStringQDF(std::string const& str)",
          "880: {",
          "882:     {",
          "883:  writeString(str);",
          "884:     }",
          "",
          "[Removed Lines]",
          "863:     this->pipeline->write(data, bytes);",
          "869:     this->pipeline->write(QUtil::unsigned_char_pointer(str), str.length());",
          "875:     this->pipeline->write(b->getBuffer(), b->getSize());",
          "881:     if (this->qdf_mode)",
          "",
          "[Added Lines]",
          "867:     this->m->pipeline->write(data, bytes);",
          "873:     this->m->pipeline->write(QUtil::unsigned_char_pointer(str), str.length());",
          "879:     this->m->pipeline->write(b->getBuffer(), b->getSize());",
          "885:     if (this->m->qdf_mode)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "887: void",
          "888: QPDFWriter::writeStringNoQDF(std::string const& str)",
          "889: {",
          "891:     {",
          "892:  writeString(str);",
          "893:     }",
          "",
          "[Removed Lines]",
          "890:     if (! this->qdf_mode)",
          "",
          "[Added Lines]",
          "894:     if (! this->m->qdf_mode)",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "906: QPDFWriter::pushPipeline(Pipeline* p)",
          "907: {",
          "908:     assert(dynamic_cast<Pl_Count*>(p) == 0);",
          "910:     return p;",
          "911: }",
          "913: void",
          "914: QPDFWriter::initializePipelineStack(Pipeline *p)",
          "915: {",
          "919: }",
          "921: void",
          "922: QPDFWriter::activatePipelineStack()",
          "923: {",
          "927: }",
          "929: void",
          "930: QPDFWriter::popPipelineStack(PointerHolder<Buffer>* bp)",
          "931: {",
          "939:     {",
          "942:         {",
          "944:         }",
          "946:  Pl_Buffer* buf = dynamic_cast<Pl_Buffer*>(p);",
          "947:  if (bp && buf)",
          "948:  {",
          "",
          "[Removed Lines]",
          "909:     this->pipeline_stack.push_back(p);",
          "916:     this->pipeline = new Pl_Count(\"qpdf count\", p);",
          "917:     to_delete.push_back(this->pipeline);",
          "918:     this->pipeline_stack.push_back(this->pipeline);",
          "924:     Pl_Count* c = new Pl_Count(\"count\", this->pipeline_stack.back());",
          "925:     this->pipeline_stack.push_back(c);",
          "926:     this->pipeline = c;",
          "932:     assert(this->pipeline_stack.size() >= 2);",
          "933:     this->pipeline->finish();",
          "934:     assert(dynamic_cast<Pl_Count*>(this->pipeline_stack.back()) ==",
          "935:     this->pipeline);",
          "936:     delete this->pipeline_stack.back();",
          "937:     this->pipeline_stack.pop_back();",
          "938:     while (dynamic_cast<Pl_Count*>(this->pipeline_stack.back()) == 0)",
          "940:  Pipeline* p = this->pipeline_stack.back();",
          "941:         if (dynamic_cast<Pl_MD5*>(p) == this->md5_pipeline)",
          "943:             this->md5_pipeline = 0;",
          "945:  this->pipeline_stack.pop_back();",
          "",
          "[Added Lines]",
          "913:     this->m->pipeline_stack.push_back(p);",
          "920:     this->m->pipeline = new Pl_Count(\"qpdf count\", p);",
          "921:     this->m->to_delete.push_back(this->m->pipeline);",
          "922:     this->m->pipeline_stack.push_back(this->m->pipeline);",
          "928:     Pl_Count* c = new Pl_Count(\"count\", this->m->pipeline_stack.back());",
          "929:     this->m->pipeline_stack.push_back(c);",
          "930:     this->m->pipeline = c;",
          "936:     assert(this->m->pipeline_stack.size() >= 2);",
          "937:     this->m->pipeline->finish();",
          "938:     assert(dynamic_cast<Pl_Count*>(this->m->pipeline_stack.back()) ==",
          "939:     this->m->pipeline);",
          "940:     delete this->m->pipeline_stack.back();",
          "941:     this->m->pipeline_stack.pop_back();",
          "942:     while (dynamic_cast<Pl_Count*>(this->m->pipeline_stack.back()) == 0)",
          "944:  Pipeline* p = this->m->pipeline_stack.back();",
          "945:         if (dynamic_cast<Pl_MD5*>(p) == this->m->md5_pipeline)",
          "947:             this->m->md5_pipeline = 0;",
          "949:  this->m->pipeline_stack.pop_back();",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "950:  }",
          "951:  delete p;",
          "952:     }",
          "954: }",
          "956: void",
          "957: QPDFWriter::adjustAESStreamLength(size_t& length)",
          "958: {",
          "961:     {",
          "",
          "[Removed Lines]",
          "953:     this->pipeline = dynamic_cast<Pl_Count*>(this->pipeline_stack.back());",
          "959:     if (this->encrypted && (! this->cur_data_key.empty()) &&",
          "960:  this->encrypt_use_aes)",
          "",
          "[Added Lines]",
          "957:     this->m->pipeline = dynamic_cast<Pl_Count*>(this->m->pipeline_stack.back());",
          "963:     if (this->m->encrypted && (! this->m->cur_data_key.empty()) &&",
          "964:  this->m->encrypt_use_aes)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "969: void",
          "970: QPDFWriter::pushEncryptionFilter()",
          "971: {",
          "973:     {",
          "974:  Pipeline* p = 0;",
          "976:  {",
          "977:      p = new Pl_AES_PDF(",
          "981:  }",
          "982:  else",
          "983:  {",
          "987:  }",
          "988:  pushPipeline(p);",
          "989:     }",
          "",
          "[Removed Lines]",
          "972:     if (this->encrypted && (! this->cur_data_key.empty()))",
          "975:  if (this->encrypt_use_aes)",
          "978:   \"aes stream encryption\", this->pipeline, true,",
          "979:   QUtil::unsigned_char_pointer(this->cur_data_key),",
          "980:                 this->cur_data_key.length());",
          "984:      p = new Pl_RC4(\"rc4 stream encryption\", this->pipeline,",
          "985:       QUtil::unsigned_char_pointer(this->cur_data_key),",
          "986:       this->cur_data_key.length());",
          "",
          "[Added Lines]",
          "976:     if (this->m->encrypted && (! this->m->cur_data_key.empty()))",
          "979:  if (this->m->encrypt_use_aes)",
          "982:   \"aes stream encryption\", this->m->pipeline, true,",
          "983:   QUtil::unsigned_char_pointer(this->m->cur_data_key),",
          "984:                 this->m->cur_data_key.length());",
          "988:      p = new Pl_RC4(\"rc4 stream encryption\", this->m->pipeline,",
          "989:       QUtil::unsigned_char_pointer(this->m->cur_data_key),",
          "990:       this->m->cur_data_key.length());",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1002: void",
          "1003: QPDFWriter::pushMD5Pipeline()",
          "1004: {",
          "1006:     {",
          "1008:         throw std::logic_error(",
          "1009:             \"Deterministic ID computation enabled after ID\"",
          "1010:             \" generation has already occurred.\");",
          "1011:     }",
          "1020:     activatePipelineStack();",
          "1021: }",
          "1023: void",
          "1024: QPDFWriter::computeDeterministicIDData()",
          "1025: {",
          "1030: }",
          "1032: int",
          "",
          "[Removed Lines]",
          "1005:     if (! this->id2.empty())",
          "1012:     assert(this->deterministic_id);",
          "1013:     assert(this->md5_pipeline == 0);",
          "1014:     assert(this->pipeline->getCount() == 0);",
          "1015:     this->md5_pipeline = new Pl_MD5(\"qpdf md5\", this->pipeline);",
          "1016:     this->md5_pipeline->persistAcrossFinish(true);",
          "1019:     pushPipeline(this->md5_pipeline);",
          "1026:     assert(this->md5_pipeline != 0);",
          "1027:     assert(this->deterministic_id_data.empty());",
          "1028:     this->deterministic_id_data = this->md5_pipeline->getHexDigest();",
          "1029:     this->md5_pipeline->enable(false);",
          "",
          "[Added Lines]",
          "1009:     if (! this->m->id2.empty())",
          "1016:     assert(this->m->deterministic_id);",
          "1017:     assert(this->m->md5_pipeline == 0);",
          "1018:     assert(this->m->pipeline->getCount() == 0);",
          "1019:     this->m->md5_pipeline = new Pl_MD5(\"qpdf md5\", this->m->pipeline);",
          "1020:     this->m->md5_pipeline->persistAcrossFinish(true);",
          "1023:     pushPipeline(this->m->md5_pipeline);",
          "1030:     assert(this->m->md5_pipeline != 0);",
          "1031:     assert(this->m->deterministic_id_data.empty());",
          "1032:     this->m->deterministic_id_data = this->m->md5_pipeline->getHexDigest();",
          "1033:     this->m->md5_pipeline->enable(false);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1034: {",
          "1035:     if (objid == 0)",
          "1036:     {",
          "1038:     }",
          "1040:     writeString(QUtil::int_to_string(objid));",
          "1041:     writeString(\" 0 obj\\n\");",
          "1042:     return objid;",
          "",
          "[Removed Lines]",
          "1037:  objid = this->next_objid++;",
          "1039:     this->xref[objid] = QPDFXRefEntry(1, pipeline->getCount(), 0);",
          "",
          "[Added Lines]",
          "1041:  objid = this->m->next_objid++;",
          "1043:     this->m->xref[objid] = QPDFXRefEntry(1, this->m->pipeline->getCount(), 0);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1050:     writeString(\"\\nendobj\\n\");",
          "1051:     writeStringQDF(\"\\n\");",
          "1053: }",
          "1055: void",
          "",
          "[Removed Lines]",
          "1052:     this->lengths[objid] = pipeline->getCount() - this->xref[objid].getOffset();",
          "",
          "[Added Lines]",
          "1056:     this->m->lengths[objid] = this->m->pipeline->getCount() -",
          "1057:         this->m->xref[objid].getOffset();",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1057: {",
          "1058:     int objid = og.getObj();",
          "1059:     if ((og.getGen() != 0) ||",
          "1061:     {",
          "1063:  return;",
          "",
          "[Removed Lines]",
          "1060:         (this->object_stream_to_objects.count(objid) == 0))",
          "",
          "[Added Lines]",
          "1065:         (this->m->object_stream_to_objects.count(objid) == 0))",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1068:     for (std::set<QPDFObjGen>::iterator iter =",
          "1071:   ++iter)",
          "1072:     {",
          "1074:     }",
          "1075: }",
          "",
          "[Removed Lines]",
          "1069:       this->object_stream_to_objects[objid].begin();",
          "1070:   iter != this->object_stream_to_objects[objid].end();",
          "1073:  obj_renumber[*iter] = next_objid++;",
          "",
          "[Added Lines]",
          "1074:       this->m->object_stream_to_objects[objid].begin();",
          "1075:   iter != this->m->object_stream_to_objects[objid].end();",
          "1078:  this->m->obj_renumber[*iter] = this->m->next_objid++;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1079: {",
          "1080:     if (object.isIndirect())",
          "1081:     {",
          "1083:         {",
          "1084:             QTC::TC(\"qpdf\", \"QPDFWriter foreign object\");",
          "1085:             throw std::logic_error(",
          "",
          "[Removed Lines]",
          "1082:         if (object.getOwningQPDF() != &(this->pdf))",
          "",
          "[Added Lines]",
          "1087:         if (object.getOwningQPDF() != &(this->m->pdf))",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1091:  QPDFObjGen og = object.getObjGen();",
          "1094:  {",
          "1096:      {",
          "1105:      }",
          "1106:      else",
          "1107:      {",
          "1111:   if ((og.getGen() == 0) &&",
          "1113:   {",
          "1118:       {",
          "1119:    assignCompressedObjectNumbers(og);",
          "1120:       }",
          "1121:   }",
          "1123:   {",
          "1126:   }",
          "1127:      }",
          "1128:  }",
          "1130:         {",
          "",
          "[Removed Lines]",
          "1093:  if (obj_renumber.count(og) == 0)",
          "1095:      if (this->object_to_object_stream.count(og))",
          "1100:   int stream_id = this->object_to_object_stream[og];",
          "1103:                 obj_renumber[og] = 0;",
          "1104:   enqueueObject(this->pdf.getObjectByID(stream_id, 0));",
          "1108:   object_queue.push_back(object);",
          "1109:   obj_renumber[og] = next_objid++;",
          "1112:                     this->object_stream_to_objects.count(og.getObj()))",
          "1117:       if (! this->linearized)",
          "1122:   else if ((! this->direct_stream_lengths) && object.isStream())",
          "1125:       ++next_objid;",
          "1129:         else if (obj_renumber[og] == 0)",
          "",
          "[Added Lines]",
          "1098:  if (this->m->obj_renumber.count(og) == 0)",
          "1100:      if (this->m->object_to_object_stream.count(og))",
          "1105:   int stream_id = this->m->object_to_object_stream[og];",
          "1108:                 this->m->obj_renumber[og] = 0;",
          "1109:   enqueueObject(this->m->pdf.getObjectByID(stream_id, 0));",
          "1113:   this->m->object_queue.push_back(object);",
          "1114:   this->m->obj_renumber[og] = this->m->next_objid++;",
          "1117:                     this->m->object_stream_to_objects.count(og.getObj()))",
          "1122:       if (! this->m->linearized)",
          "1127:   else if ((! this->m->direct_stream_lengths) &&",
          "1128:                          object.isStream())",
          "1131:       ++this->m->next_objid;",
          "1135:         else if (this->m->obj_renumber[og] == 0)",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1138:  int n = object.getArrayNItems();",
          "1139:  for (int i = 0; i < n; ++i)",
          "1140:  {",
          "1142:      {",
          "1143:   enqueueObject(object.getArrayItem(i));",
          "1144:      }",
          "",
          "[Removed Lines]",
          "1141:      if (! this->linearized)",
          "",
          "[Added Lines]",
          "1147:      if (! this->m->linearized)",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1150:  for (std::set<std::string>::iterator iter = keys.begin();",
          "1151:       iter != keys.end(); ++iter)",
          "1152:  {",
          "1154:      {",
          "1155:   enqueueObject(object.getKey(*iter));",
          "1156:      }",
          "",
          "[Removed Lines]",
          "1153:      if (! this->linearized)",
          "",
          "[Added Lines]",
          "1159:      if (! this->m->linearized)",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "1165: void",
          "1166: QPDFWriter::unparseChild(QPDFObjectHandle child, int level, int flags)",
          "1167: {",
          "1169:     {",
          "1170:  enqueueObject(child);",
          "1171:     }",
          "1172:     if (child.isIndirect())",
          "1173:     {",
          "1174:  QPDFObjGen old_og = child.getObjGen();",
          "1176:  writeString(QUtil::int_to_string(new_id));",
          "1177:  writeString(\" 0 R\");",
          "1178:     }",
          "",
          "[Removed Lines]",
          "1168:     if (! this->linearized)",
          "1175:  int new_id = obj_renumber[old_og];",
          "",
          "[Added Lines]",
          "1174:     if (! this->m->linearized)",
          "1181:  int new_id = this->m->obj_renumber[old_og];",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "1214:   if (which == t_lin_first)",
          "1215:   {",
          "1216:       writeString(\" /Prev \");",
          "1218:       writeString(QUtil::int_to_string(prev));",
          "1220:       if (nspaces < 0)",
          "1221:                     {",
          "1222:                         throw std::logic_error(",
          "",
          "[Removed Lines]",
          "1217:       qpdf_offset_t pos = this->pipeline->getCount();",
          "1219:       int nspaces = pos - this->pipeline->getCount() + 21;",
          "",
          "[Added Lines]",
          "1223:       qpdf_offset_t pos = this->m->pipeline->getCount();",
          "1225:       int nspaces = pos - this->m->pipeline->getCount() + 21;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "1243:     }",
          "1244:     else",
          "1245:     {",
          "1247:         {",
          "1248:             computeDeterministicIDData();",
          "1249:         }",
          "1250:         generateID();",
          "1253:     }",
          "1254:     writeString(\"]\");",
          "1256:     if (which != t_lin_second)",
          "1257:     {",
          "1260:  {",
          "1261:      writeString(\" /Encrypt \");",
          "1263:      writeString(\" 0 R\");",
          "1264:  }",
          "1265:     }",
          "",
          "[Removed Lines]",
          "1246:         if ((linearization_pass == 0) && (this->deterministic_id))",
          "1251:         writeString(QPDF_String(this->id1).unparse(true));",
          "1252:         writeString(QPDF_String(this->id2).unparse(true));",
          "1259:  if (this->encrypted)",
          "1262:      writeString(QUtil::int_to_string(this->encryption_dict_objid));",
          "",
          "[Added Lines]",
          "1252:         if ((linearization_pass == 0) && (this->m->deterministic_id))",
          "1257:         writeString(QPDF_String(this->m->id1).unparse(true));",
          "1258:         writeString(QPDF_String(this->m->id2).unparse(true));",
          "1265:  if (this->m->encrypted)",
          "1268:      writeString(QUtil::int_to_string(this->m->encryption_dict_objid));",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "1348:         bool have_extensions_adbe = false;",
          "1350:         QPDFObjectHandle extensions;",
          "1352:         {",
          "1353:             is_root = true;",
          "1354:             if (object.hasKey(\"/Extensions\") &&",
          "",
          "[Removed Lines]",
          "1351:         if (old_og == pdf.getRoot().getObjGen())",
          "",
          "[Added Lines]",
          "1357:         if (old_og == this->m->pdf.getRoot().getObjGen())",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "1372:             }",
          "1373:         }",
          "1377:         if (is_root)",
          "1378:         {",
          "",
          "[Removed Lines]",
          "1375:         bool need_extensions_adbe = (this->final_extension_level > 0);",
          "",
          "[Added Lines]",
          "1381:         bool need_extensions_adbe = (this->m->final_extension_level > 0);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "1385:                     QTC::TC(\"qpdf\", \"QPDFWriter create Extensions\",",
          "1387:                     extensions = QPDFObjectHandle::newDictionary();",
          "1388:                     object.replaceKey(\"/Extensions\", extensions);",
          "1389:                 }",
          "",
          "[Removed Lines]",
          "1386:                             this->qdf_mode ? 0 : 1);",
          "",
          "[Added Lines]",
          "1392:                             this->m->qdf_mode ? 0 : 1);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "1408:                 adbe.hasKey(\"/BaseVersion\") &&",
          "1409:                 adbe.getKey(\"/BaseVersion\").isName() &&",
          "1410:                 (adbe.getKey(\"/BaseVersion\").getName() ==",
          "1412:                 adbe.hasKey(\"/ExtensionLevel\") &&",
          "1413:                 adbe.getKey(\"/ExtensionLevel\").isInteger() &&",
          "1414:                 (adbe.getKey(\"/ExtensionLevel\").getIntValue() ==",
          "1416:             {",
          "1417:                 QTC::TC(\"qpdf\", \"QPDFWriter preserve ADBE\");",
          "1418:             }",
          "",
          "[Removed Lines]",
          "1411:                  \"/\" + this->final_pdf_version) &&",
          "1415:                  this->final_extension_level))",
          "",
          "[Added Lines]",
          "1417:                  \"/\" + this->m->final_pdf_version) &&",
          "1421:                  this->m->final_extension_level))",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "1423:                     extensions.replaceKey(",
          "1424:                         \"/ADBE\",",
          "1425:                         QPDFObjectHandle::parse(",
          "1427:                             \" /ExtensionLevel \" +",
          "1429:                             \" >>\"));",
          "1430:                 }",
          "1431:                 else",
          "",
          "[Removed Lines]",
          "1426:                             \"<< /BaseVersion /\" + this->final_pdf_version +",
          "1428:                             QUtil::int_to_string(this->final_extension_level) +",
          "",
          "[Added Lines]",
          "1432:                             \"<< /BaseVersion /\" + this->m->final_pdf_version +",
          "1434:                             QUtil::int_to_string(",
          "1435:                                 this->m->final_extension_level) +",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "1516:      writeStringQDF(\" \");",
          "1517:      writeString(\" /Length \");",
          "1520:      {",
          "1521:   writeString(QUtil::int_to_string(stream_length));",
          "1522:      }",
          "1523:      else",
          "1524:      {",
          "1525:   writeString(",
          "1527:   writeString(\" 0 R\");",
          "1528:      }",
          "1529:      writeStringQDF(\"\\n\");",
          "",
          "[Removed Lines]",
          "1519:      if (this->direct_stream_lengths)",
          "1526:       QUtil::int_to_string(this->cur_stream_length_id));",
          "",
          "[Added Lines]",
          "1526:      if (this->m->direct_stream_lengths)",
          "1533:       QUtil::int_to_string(this->m->cur_stream_length_id));",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "1543:     else if (object.isStream())",
          "1544:     {",
          "1548:  {",
          "1550:  }",
          "1551:  QPDFObjectHandle stream_dict = object.getDict();",
          "",
          "[Removed Lines]",
          "1546:  int new_id = obj_renumber[old_og];",
          "1547:  if (! this->direct_stream_lengths)",
          "1549:      this->cur_stream_length_id = new_id + 1;",
          "",
          "[Added Lines]",
          "1553:  int new_id = this->m->obj_renumber[old_og];",
          "1554:  if (! this->m->direct_stream_lengths)",
          "1556:      this->m->cur_stream_length_id = new_id + 1;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "1556:  {",
          "1557:      is_metadata = true;",
          "1558:  }",
          "1561:  {",
          "",
          "[Removed Lines]",
          "1559:  bool filter = (this->compress_streams || this->stream_decode_level);",
          "1560:  if (this->compress_streams)",
          "",
          "[Added Lines]",
          "1566:  bool filter = (this->m->compress_streams ||",
          "1567:                        this->m->stream_decode_level);",
          "1568:  if (this->m->compress_streams)",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "1578:  bool compress = false;",
          "1579:         bool uncompress = false;",
          "1580:  if (is_metadata &&",
          "1582:  {",
          "1583:      QTC::TC(\"qpdf\", \"QPDFWriter not compressing metadata\");",
          "1584:      filter = true;",
          "1585:      compress = false;",
          "1586:            uncompress = true;",
          "1587:  }",
          "1589:  {",
          "1590:      normalize = true;",
          "1591:      filter = true;",
          "1592:  }",
          "1594:  {",
          "1595:      compress = true;",
          "1596:      QTC::TC(\"qpdf\", \"QPDFWriter compressing uncompressed stream\");",
          "",
          "[Removed Lines]",
          "1581:      ((! this->encrypted) || (this->encrypt_metadata == false)))",
          "1588:  else if (this->normalize_content && normalized_streams.count(old_og))",
          "1593:  else if (filter && this->compress_streams)",
          "",
          "[Added Lines]",
          "1589:      ((! this->m->encrypted) || (this->m->encrypt_metadata == false)))",
          "1596:  else if (this->m->normalize_content &&",
          "1597:                  this->m->normalized_streams.count(old_og))",
          "1602:  else if (filter && this->m->compress_streams)",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "1608:             filtered =",
          "1609:                 object.pipeStreamData(",
          "1611:                     (((filter && normalize) ? qpdf_ef_normalize : 0) |",
          "1612:                      ((filter && compress) ? qpdf_ef_compress : 0)),",
          "1613:                     (filter",
          "1615:                      : qpdf_dl_none));",
          "1616:             popPipelineStack(&stream_data);",
          "1617:             if (filter && (! filtered))",
          "",
          "[Removed Lines]",
          "1610:                     this->pipeline,",
          "1614:                      ? (uncompress ? qpdf_dl_all : this->stream_decode_level)",
          "",
          "[Added Lines]",
          "1619:                     this->m->pipeline,",
          "1623:                      ? (uncompress ? qpdf_dl_all : this->m->stream_decode_level)",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "1633:      compress = false;",
          "1634:  }",
          "1638:  {",
          "1641:  }",
          "1644:  writeString(\"\\nstream\\n\");",
          "1645:  pushEncryptionFilter();",
          "1646:  writeBuffer(stream_data);",
          "1648:  popPipelineStack();",
          "1652:         {",
          "1653:             writeString(\"\\n\");",
          "1655:         }",
          "1656:         else",
          "1657:         {",
          "1659:         }",
          "1660:  writeString(\"endstream\");",
          "1661:     }",
          "1662:     else if (object.isString())",
          "1663:     {",
          "1664:  std::string val;",
          "1666:      (! (flags & f_in_ostream)) &&",
          "1668:  {",
          "1669:      val = object.getStringValue();",
          "1671:      {",
          "1672:   Pl_Buffer bufpl(\"encrypted string\");",
          "1673:   Pl_AES_PDF pl(",
          "1674:                     \"aes encrypt string\", &bufpl, true,",
          "1677:   pl.write(QUtil::unsigned_char_pointer(val), val.length());",
          "1678:   pl.finish();",
          "1679:   Buffer* buf = bufpl.getBuffer();",
          "",
          "[Removed Lines]",
          "1636:  this->cur_stream_length = stream_data->getSize();",
          "1637:  if (is_metadata && this->encrypted && (! this->encrypt_metadata))",
          "1640:      this->cur_data_key.clear();",
          "1642:  adjustAESStreamLength(this->cur_stream_length);",
          "1643:  unparseObject(stream_dict, 0, flags, this->cur_stream_length, compress);",
          "1647:  char last_char = this->pipeline->getLastChar();",
          "1650:         if (this->newline_before_endstream ||",
          "1651:             (this->qdf_mode && (last_char != '\\n')))",
          "1654:             this->added_newline = true;",
          "1658:             this->added_newline = false;",
          "1665:  if (this->encrypted &&",
          "1667:      (! this->cur_data_key.empty()))",
          "1670:      if (this->encrypt_use_aes)",
          "1675:                     QUtil::unsigned_char_pointer(this->cur_data_key),",
          "1676:                     this->cur_data_key.length());",
          "",
          "[Added Lines]",
          "1645:  this->m->cur_stream_length = stream_data->getSize();",
          "1646:  if (is_metadata && this->m->encrypted && (! this->m->encrypt_metadata))",
          "1649:      this->m->cur_data_key.clear();",
          "1651:  adjustAESStreamLength(this->m->cur_stream_length);",
          "1652:  unparseObject(stream_dict, 0, flags,",
          "1653:                       this->m->cur_stream_length, compress);",
          "1657:  char last_char = this->m->pipeline->getLastChar();",
          "1660:         if (this->m->newline_before_endstream ||",
          "1661:             (this->m->qdf_mode && (last_char != '\\n')))",
          "1664:             this->m->added_newline = true;",
          "1668:             this->m->added_newline = false;",
          "1675:  if (this->m->encrypted &&",
          "1677:      (! this->m->cur_data_key.empty()))",
          "1680:      if (this->m->encrypt_use_aes)",
          "1685:                     QUtil::unsigned_char_pointer(this->m->cur_data_key),",
          "1686:                     this->m->cur_data_key.length());",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "1686:      {",
          "1687:   char* tmp = QUtil::copy_string(val);",
          "1688:   size_t vlen = val.length();",
          "1691:   rc4.process(QUtil::unsigned_char_pointer(tmp), vlen);",
          "1692:   val = QPDF_String(std::string(tmp, vlen)).unparse();",
          "1693:   delete [] tmp;",
          "",
          "[Removed Lines]",
          "1689:   RC4 rc4(QUtil::unsigned_char_pointer(this->cur_data_key),",
          "1690:    this->cur_data_key.length());",
          "",
          "[Added Lines]",
          "1699:   RC4 rc4(QUtil::unsigned_char_pointer(this->m->cur_data_key),",
          "1700:    this->m->cur_data_key.length());",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "1732:     QPDFObjGen old_og = object.getObjGen();",
          "1733:     assert(old_og.getGen() == 0);",
          "1734:     int old_id = old_og.getObj();",
          "1737:     std::vector<qpdf_offset_t> offsets;",
          "1738:     qpdf_offset_t first = 0;",
          "",
          "[Removed Lines]",
          "1735:     int new_id = obj_renumber[old_og];",
          "",
          "[Added Lines]",
          "1745:     int new_id = this->m->obj_renumber[old_og];",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "1764:      pushDiscardFilter();",
          "1765:      writeObjectStreamOffsets(offsets, first_obj);",
          "1767:      popPipelineStack();",
          "1770:      Pipeline* next = pushPipeline(new Pl_Buffer(\"object stream\"));",
          "1772:      {",
          "1773:   compressed = true;",
          "1774:   next = pushPipeline(",
          "",
          "[Removed Lines]",
          "1766:      first += this->pipeline->getCount();",
          "1771:             if (! (this->stream_decode_level || this->qdf_mode))",
          "",
          "[Added Lines]",
          "1776:      first += this->m->pipeline->getCount();",
          "1781:             if (! (this->m->stream_decode_level || this->m->qdf_mode))",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "1782:  int count = 0;",
          "1783:  for (std::set<QPDFObjGen>::iterator iter =",
          "1786:       ++iter, ++count)",
          "1787:  {",
          "1788:      QPDFObjGen obj = *iter;",
          "1790:      if (first_obj == -1)",
          "1791:      {",
          "1792:   first_obj = new_obj;",
          "1793:      }",
          "1795:      {",
          "1796:   writeString(\"%% Object stream: object \" +",
          "1797:        QUtil::int_to_string(new_obj) + \", index \" +",
          "1798:        QUtil::int_to_string(count));",
          "1800:   {",
          "1801:       writeString(\"; original object ID: \" +",
          "1802:     QUtil::int_to_string(obj.getObj()));",
          "",
          "[Removed Lines]",
          "1784:    this->object_stream_to_objects[old_id].begin();",
          "1785:       iter != this->object_stream_to_objects[old_id].end();",
          "1789:      int new_obj = this->obj_renumber[obj];",
          "1794:      if (this->qdf_mode)",
          "1799:   if (! this->suppress_original_object_ids)",
          "",
          "[Added Lines]",
          "1794:    this->m->object_stream_to_objects[old_id].begin();",
          "1795:       iter != this->m->object_stream_to_objects[old_id].end();",
          "1799:      int new_obj = this->m->obj_renumber[obj];",
          "1804:      if (this->m->qdf_mode)",
          "1809:   if (! this->m->suppress_original_object_ids)",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "1815:      }",
          "1816:      if (pass == 1)",
          "1817:      {",
          "1819:      }",
          "1823:  }",
          "",
          "[Removed Lines]",
          "1818:   offsets.push_back(this->pipeline->getCount());",
          "1820:      writeObject(this->pdf.getObjectByObjGen(obj), count);",
          "1822:      this->xref[new_obj] = QPDFXRefEntry(2, new_id, count);",
          "",
          "[Added Lines]",
          "1828:   offsets.push_back(this->m->pipeline->getCount());",
          "1830:      writeObject(this->m->pdf.getObjectByObjGen(obj), count);",
          "1832:      this->m->xref[new_obj] = QPDFXRefEntry(2, new_id, count);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "1860:     writeStringQDF(\"\\n\");",
          "1861:     writeStringNoQDF(\" \");",
          "1862:     writeString(\">>\\nstream\\n\");",
          "1864:     {",
          "1865:  QTC::TC(\"qpdf\", \"QPDFWriter encrypt object stream\");",
          "1866:     }",
          "",
          "[Removed Lines]",
          "1863:     if (this->encrypted)",
          "",
          "[Added Lines]",
          "1873:     if (this->m->encrypted)",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "1868:     writeBuffer(stream_buffer);",
          "1869:     popPipelineStack();",
          "1870:     writeString(\"endstream\");",
          "1872:     closeObject(new_id);",
          "1873: }",
          "",
          "[Removed Lines]",
          "1871:     this->cur_data_key.clear();",
          "",
          "[Added Lines]",
          "1881:     this->m->cur_data_key.clear();",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "1880:     if ((object_stream_index == -1) &&",
          "1881:         (old_og.getGen() == 0) &&",
          "1883:     {",
          "1884:  writeObjectStream(object);",
          "1885:  return;",
          "1886:     }",
          "1890:     {",
          "1892:  {",
          "1893:      writeString(\"%% Page \");",
          "1894:      writeString(",
          "1895:   QUtil::int_to_string(",
          "1897:      writeString(\"\\n\");",
          "1898:  }",
          "1900:  {",
          "1901:      writeString(\"%% Contents for page \");",
          "1902:      writeString(",
          "1903:   QUtil::int_to_string(",
          "1905:      writeString(\"\\n\");",
          "1906:  }",
          "1907:     }",
          "1908:     if (object_stream_index == -1)",
          "1909:     {",
          "1911:  {",
          "1912:      writeString(\"%% Original object ID: \" +",
          "1913:    QUtil::int_to_string(object.getObjectID()) + \" \" +",
          "",
          "[Removed Lines]",
          "1882:  (this->object_stream_to_objects.count(old_og.getObj())))",
          "1888:     int new_id = obj_renumber[old_og];",
          "1889:     if (this->qdf_mode)",
          "1891:  if (this->page_object_to_seq.count(old_og))",
          "1896:       this->page_object_to_seq[old_og]));",
          "1899:  if (this->contents_to_page_seq.count(old_og))",
          "1904:       this->contents_to_page_seq[old_og]));",
          "1910:  if (this->qdf_mode && (! this->suppress_original_object_ids))",
          "",
          "[Added Lines]",
          "1892:  (this->m->object_stream_to_objects.count(old_og.getObj())))",
          "1898:     int new_id = this->m->obj_renumber[old_og];",
          "1899:     if (this->m->qdf_mode)",
          "1901:  if (this->m->page_object_to_seq.count(old_og))",
          "1906:       this->m->page_object_to_seq[old_og]));",
          "1909:  if (this->m->contents_to_page_seq.count(old_og))",
          "1914:       this->m->contents_to_page_seq[old_og]));",
          "1920:  if (this->m->qdf_mode && (! this->m->suppress_original_object_ids))",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "1916:  openObject(new_id);",
          "1917:  setDataKey(new_id);",
          "1918:  unparseObject(object, 0, 0);",
          "1920:  closeObject(new_id);",
          "1921:     }",
          "1922:     else",
          "",
          "[Removed Lines]",
          "1919:  this->cur_data_key.clear();",
          "",
          "[Added Lines]",
          "1929:  this->m->cur_data_key.clear();",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "1925:  writeString(\"\\n\");",
          "1926:     }",
          "1929:     {",
          "1931:  {",
          "1933:      {",
          "1934:   writeString(\"%QDF: ignore_newline\\n\");",
          "1935:      }",
          "1936:  }",
          "1937:  openObject(new_id + 1);",
          "1939:  closeObject(new_id + 1);",
          "1940:     }",
          "1941: }",
          "",
          "[Removed Lines]",
          "1928:     if ((! this->direct_stream_lengths) && object.isStream())",
          "1930:  if (this->qdf_mode)",
          "1932:      if (this->added_newline)",
          "1938:  writeString(QUtil::int_to_string(this->cur_stream_length));",
          "",
          "[Added Lines]",
          "1938:     if ((! this->m->direct_stream_lengths) && object.isStream())",
          "1940:  if (this->m->qdf_mode)",
          "1942:      if (this->m->added_newline)",
          "1948:  writeString(QUtil::int_to_string(this->m->cur_stream_length));",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "1950:     {",
          "1951:  return;",
          "1952:     }",
          "1956:     std::string result;",
          "1959:     {",
          "1961:  static unsigned char tmp[] = {0x31, 0x41, 0x59, 0x26,",
          "",
          "[Removed Lines]",
          "1949:     if (! this->id2.empty())",
          "1954:     QPDFObjectHandle trailer = pdf.getTrailer();",
          "1958:     if (this->static_id)",
          "",
          "[Added Lines]",
          "1959:     if (! this->m->id2.empty())",
          "1964:     QPDFObjectHandle trailer = this->m->pdf.getTrailer();",
          "1968:     if (this->m->static_id)",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "1983:  std::string seed;",
          "1985:         {",
          "1987:             {",
          "1988:                 QTC::TC(\"qpdf\", \"QPDFWriter deterministic with no data\");",
          "1989:                 throw std::logic_error(",
          "",
          "[Removed Lines]",
          "1984:         if (this->deterministic_id)",
          "1986:             if (this->deterministic_id_data.empty())",
          "",
          "[Added Lines]",
          "1994:         if (this->m->deterministic_id)",
          "1996:             if (this->m->deterministic_id_data.empty())",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "1992:                     \" deterministic ID and file encryption are requested\"",
          "1993:                     \" together.\");",
          "1994:             }",
          "1996:         }",
          "1997:         else",
          "1998:         {",
          "1999:             seed += QUtil::int_to_string(QUtil::get_current_time());",
          "2001:             seed += \" \";",
          "2002:         }",
          "2003:  seed += \" QPDF \";",
          "",
          "[Removed Lines]",
          "1995:             seed += this->deterministic_id_data;",
          "2000:             seed += this->filename;",
          "",
          "[Added Lines]",
          "2005:             seed += this->m->deterministic_id_data;",
          "2010:             seed += this->m->filename;",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "2033:     if (trailer.hasKey(\"/ID\"))",
          "2034:     {",
          "2037:     }",
          "2038:     else",
          "2039:     {",
          "2041:     }",
          "2042: }",
          "",
          "[Removed Lines]",
          "2032:     this->id2 = result;",
          "2036:  this->id1 = trailer.getKey(\"/ID\").getArrayItem(0).getStringValue();",
          "2040:  this->id1 = this->id2;",
          "",
          "[Added Lines]",
          "2042:     this->m->id2 = result;",
          "2046:  this->m->id1 = trailer.getKey(\"/ID\").getArrayItem(0).getStringValue();",
          "2050:  this->m->id1 = this->m->id2;",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "2046: {",
          "2050:     int num = 0;",
          "2051:     for (std::vector<QPDFObjectHandle>::iterator iter = pages.begin();",
          "2052:   iter != pages.end(); ++iter)",
          "2053:     {",
          "2054:  QPDFObjectHandle& page = *iter;",
          "2056:  QPDFObjectHandle contents = page.getKey(\"/Contents\");",
          "2057:  std::vector<QPDFObjGen> contents_objects;",
          "2058:  if (contents.isArray())",
          "",
          "[Removed Lines]",
          "2049:     std::vector<QPDFObjectHandle> pages = pdf.getAllPages();",
          "2055:  this->page_object_to_seq[page.getObjGen()] = ++num;",
          "",
          "[Added Lines]",
          "2059:     std::vector<QPDFObjectHandle> pages = this->m->pdf.getAllPages();",
          "2065:  this->m->page_object_to_seq[page.getObjGen()] = ++num;",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "2072:  for (std::vector<QPDFObjGen>::iterator iter = contents_objects.begin();",
          "2073:       iter != contents_objects.end(); ++iter)",
          "2074:  {",
          "2077:  }",
          "2078:     }",
          "2079: }",
          "",
          "[Removed Lines]",
          "2075:      this->contents_to_page_seq[*iter] = num;",
          "2076:      this->normalized_streams.insert(*iter);",
          "",
          "[Added Lines]",
          "2085:      this->m->contents_to_page_seq[*iter] = num;",
          "2086:      this->m->normalized_streams.insert(*iter);",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "2090:     std::map<int, int> omap;",
          "2092:     for (std::map<int, int>::iterator iter = omap.begin();",
          "2093:          iter != omap.end(); ++iter)",
          "2094:     {",
          "2096:             (*iter).second;",
          "2097:     }",
          "2098: }",
          "",
          "[Removed Lines]",
          "2091:     QPDF::Writer::getObjectStreamData(this->pdf, omap);",
          "2095:         this->object_to_object_stream[QPDFObjGen((*iter).first, 0)] =",
          "",
          "[Added Lines]",
          "2101:     QPDF::Writer::getObjectStreamData(this->m->pdf, omap);",
          "2105:         this->m->object_to_object_stream[QPDFObjGen((*iter).first, 0)] =",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "2113:     std::vector<QPDFObjGen> const& eligible =",
          "2115:     unsigned int n_object_streams = (eligible.size() + 99) / 100;",
          "2116:     if (n_object_streams == 0)",
          "2117:     {",
          "",
          "[Removed Lines]",
          "2114:         QPDF::Writer::getCompressibleObjGens(this->pdf);",
          "",
          "[Added Lines]",
          "2124:         QPDF::Writer::getCompressibleObjGens(this->m->pdf);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "2144:   QPDFObjectHandle::newNull()).getObjectID();",
          "2145:  }",
          "2147:  ++n;",
          "2148:     }",
          "2149: }",
          "",
          "[Removed Lines]",
          "2143:      cur_ostream = this->pdf.makeIndirectObject(",
          "2146:  this->object_to_object_stream[*iter] = cur_ostream;",
          "",
          "[Added Lines]",
          "2153:      cur_ostream = this->m->pdf.makeIndirectObject(",
          "2156:  this->m->object_to_object_stream[*iter] = cur_ostream;",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "2160:     trailer.removeKey(\"/ID\");",
          "",
          "[Removed Lines]",
          "2157:     QPDFObjectHandle trailer = pdf.getTrailer().shallowCopy();",
          "",
          "[Added Lines]",
          "2167:     QPDFObjectHandle trailer = this->m->pdf.getTrailer().shallowCopy();",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "2231:   dict = node.getDict();",
          "2233:                 filterable = node.pipeStreamData(",
          "2235:      }",
          "2237:             {",
          "2238:                 is_root = true;",
          "2239:             }",
          "",
          "[Removed Lines]",
          "2234:                     0, 0, this->stream_decode_level, true);",
          "2236:             else if (pdf.getRoot().getObjectID() == node.getObjectID())",
          "",
          "[Added Lines]",
          "2244:                     0, 0, this->m->stream_decode_level, true);",
          "2246:             else if (this->m->pdf.getRoot().getObjectID() == node.getObjectID())",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "2300: {",
          "2304:     {",
          "2306:     }",
          "2309:     {",
          "2313:     }",
          "2316:     {",
          "2318:  {",
          "2320:  }",
          "2322:  {",
          "2324:  }",
          "2326:         {",
          "2328:         }",
          "2329:     }",
          "2332:     {",
          "2335:     }",
          "2340:     {",
          "2344:     }",
          "2347:     {",
          "2349:     }",
          "2352:     {",
          "2353:  int major = 0;",
          "2354:  int minor = 0;",
          "2356:  disableIncompatibleEncryption(major, minor,",
          "2358:  if (compareVersions(major, minor, 1, 5) < 0)",
          "2359:  {",
          "2360:      QTC::TC(\"qpdf\", \"QPDFWriter forcing object stream disable\");",
          "2362:  }",
          "2363:     }",
          "2367:     {",
          "2368:  initializeSpecialStreams();",
          "2369:     }",
          "2372:     {",
          "2378:     }",
          "2381:     {",
          "2382:       case qpdf_o_disable:",
          "",
          "[Removed Lines]",
          "2303:     if (this->linearized)",
          "2305:  this->qdf_mode = false;",
          "2308:     if (this->pclm)",
          "2310:         this->stream_decode_level = qpdf_dl_none;",
          "2311:         this->compress_streams = false;",
          "2312:         this->encrypted = false;",
          "2315:     if (this->qdf_mode)",
          "2317:  if (! this->normalize_content_set)",
          "2319:      this->normalize_content = true;",
          "2321:  if (! this->compress_streams_set)",
          "2323:      this->compress_streams = false;",
          "2325:         if (! this->stream_decode_level_set)",
          "2327:             this->stream_decode_level = qpdf_dl_generalized;",
          "2331:     if (this->encrypted)",
          "2334:  this->preserve_encryption = false;",
          "2336:     else if (this->normalize_content ||",
          "2337:       this->stream_decode_level ||",
          "2338:              this->pclm ||",
          "2339:       this->qdf_mode)",
          "2343:  this->preserve_encryption = false;",
          "2346:     if (preserve_encryption)",
          "2348:  copyEncryptionParameters(this->pdf);",
          "2351:     if (! this->forced_pdf_version.empty())",
          "2355:  parseVersion(this->forced_pdf_version, major, minor);",
          "2357:                                       this->forced_extension_level);",
          "2361:      this->object_stream_mode = qpdf_o_disable;",
          "2365:     if (this->qdf_mode || this->normalize_content ||",
          "2366:         this->stream_decode_level)",
          "2371:     if (this->qdf_mode)",
          "2377:  this->direct_stream_lengths = false;",
          "2380:     switch (this->object_stream_mode)",
          "",
          "[Added Lines]",
          "2313:     if (this->m->linearized)",
          "2315:  this->m->qdf_mode = false;",
          "2318:     if (this->m->pclm)",
          "2320:         this->m->stream_decode_level = qpdf_dl_none;",
          "2321:         this->m->compress_streams = false;",
          "2322:         this->m->encrypted = false;",
          "2325:     if (this->m->qdf_mode)",
          "2327:  if (! this->m->normalize_content_set)",
          "2329:      this->m->normalize_content = true;",
          "2331:  if (! this->m->compress_streams_set)",
          "2333:      this->m->compress_streams = false;",
          "2335:         if (! this->m->stream_decode_level_set)",
          "2337:             this->m->stream_decode_level = qpdf_dl_generalized;",
          "2341:     if (this->m->encrypted)",
          "2344:  this->m->preserve_encryption = false;",
          "2346:     else if (this->m->normalize_content ||",
          "2347:       this->m->stream_decode_level ||",
          "2348:              this->m->pclm ||",
          "2349:       this->m->qdf_mode)",
          "2353:  this->m->preserve_encryption = false;",
          "2356:     if (this->m->preserve_encryption)",
          "2358:  copyEncryptionParameters(this->m->pdf);",
          "2361:     if (! this->m->forced_pdf_version.empty())",
          "2365:  parseVersion(this->m->forced_pdf_version, major, minor);",
          "2367:                                       this->m->forced_extension_level);",
          "2371:      this->m->object_stream_mode = qpdf_o_disable;",
          "2375:     if (this->m->qdf_mode || this->m->normalize_content ||",
          "2376:         this->m->stream_decode_level)",
          "2381:     if (this->m->qdf_mode)",
          "2387:  this->m->direct_stream_lengths = false;",
          "2390:     switch (this->m->object_stream_mode)",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "2395:     }",
          "2398:     {",
          "2401:  for (std::vector<QPDFObjectHandle>::iterator iter = pages.begin();",
          "2402:       iter != pages.end(); ++iter)",
          "2403:  {",
          "2404:      QPDFObjectHandle& page = *iter;",
          "2405:      QPDFObjGen og = page.getObjGen();",
          "2407:      {",
          "2408:   QTC::TC(\"qpdf\", \"QPDFWriter uncompressing page dictionary\");",
          "2410:      }",
          "2411:  }",
          "2412:     }",
          "2415:     {",
          "2423:  {",
          "2424:      QTC::TC(\"qpdf\", \"QPDFWriter uncompressing root\");",
          "2426:  }",
          "2427:     }",
          "2430:     for (std::map<QPDFObjGen, int>::iterator iter =",
          "2433:     {",
          "2434:  QPDFObjGen obj = (*iter).first;",
          "2435:  int stream = (*iter).second;",
          "2439:        static_cast<int>(",
          "2441:     }",
          "2444:     {",
          "2445:  setMinimumPDFVersion(\"1.5\");",
          "2446:     }",
          "2448:     prepareFileForWrite();",
          "2451:     {",
          "2452:  writeLinearized();",
          "2453:     }",
          "",
          "[Removed Lines]",
          "2397:     if (this->linearized)",
          "2400:  std::vector<QPDFObjectHandle> pages = pdf.getAllPages();",
          "2406:      if (this->object_to_object_stream.count(og))",
          "2409:   this->object_to_object_stream.erase(og);",
          "2414:     if (this->linearized || this->encrypted)",
          "2421:  QPDFObjGen og = pdf.getRoot().getObjGen();",
          "2422:  if (this->object_to_object_stream.count(og))",
          "2425:      this->object_to_object_stream.erase(og);",
          "2431:       this->object_to_object_stream.begin();",
          "2432:   iter != this->object_to_object_stream.end(); ++iter)",
          "2436:  this->object_stream_to_objects[stream].insert(obj);",
          "2437:  this->max_ostream_index =",
          "2438:      std::max(this->max_ostream_index,",
          "2440:                          this->object_stream_to_objects[stream].size()) - 1);",
          "2443:     if (! this->object_stream_to_objects.empty())",
          "2450:     if (this->linearized)",
          "",
          "[Added Lines]",
          "2407:     if (this->m->linearized)",
          "2410:  std::vector<QPDFObjectHandle> pages = this->m->pdf.getAllPages();",
          "2416:      if (this->m->object_to_object_stream.count(og))",
          "2419:   this->m->object_to_object_stream.erase(og);",
          "2424:     if (this->m->linearized || this->m->encrypted)",
          "2431:  QPDFObjGen og = this->m->pdf.getRoot().getObjGen();",
          "2432:  if (this->m->object_to_object_stream.count(og))",
          "2435:      this->m->object_to_object_stream.erase(og);",
          "2441:       this->m->object_to_object_stream.begin();",
          "2442:   iter != this->m->object_to_object_stream.end(); ++iter)",
          "2446:  this->m->object_stream_to_objects[stream].insert(obj);",
          "2447:  this->m->max_ostream_index =",
          "2448:      std::max(this->m->max_ostream_index,",
          "2450:                          this->m->object_stream_to_objects[stream].size()) - 1);",
          "2453:     if (! this->m->object_stream_to_objects.empty())",
          "2460:     if (this->m->linearized)",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "2456:  writeStandard();",
          "2457:     }",
          "2461:     {",
          "2463:     }",
          "2466:     {",
          "2469:     }",
          "2470: }",
          "",
          "[Removed Lines]",
          "2459:     this->pipeline->finish();",
          "2460:     if (this->close_file)",
          "2462:  fclose(this->file);",
          "2464:     this->file = 0;",
          "2465:     if (this->buffer_pipeline)",
          "2467:  this->output_buffer = this->buffer_pipeline->getBuffer();",
          "2468:  this->buffer_pipeline = 0;",
          "",
          "[Added Lines]",
          "2469:     this->m->pipeline->finish();",
          "2470:     if (this->m->close_file)",
          "2472:  fclose(this->m->file);",
          "2474:     this->m->file = 0;",
          "2475:     if (this->m->buffer_pipeline)",
          "2477:  this->m->output_buffer = this->m->buffer_pipeline->getBuffer();",
          "2478:  this->m->buffer_pipeline = 0;",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "2482: void",
          "2483: QPDFWriter::writeEncryptionDictionary()",
          "2484: {",
          "2486:     writeString(\"<<\");",
          "2487:     for (std::map<std::string, std::string>::iterator iter =",
          "2490:     {",
          "2491:  writeString(\" \");",
          "2492:  writeString((*iter).first);",
          "",
          "[Removed Lines]",
          "2485:     this->encryption_dict_objid = openObject(this->encryption_dict_objid);",
          "2488:       this->encryption_dictionary.begin();",
          "2489:   iter != this->encryption_dictionary.end(); ++iter)",
          "",
          "[Added Lines]",
          "2495:     this->m->encryption_dict_objid = openObject(this->m->encryption_dict_objid);",
          "2498:       this->m->encryption_dictionary.begin();",
          "2499:   iter != this->m->encryption_dictionary.end(); ++iter)",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "2494:  writeString((*iter).second);",
          "2495:     }",
          "2496:     writeString(\" >>\");",
          "2498: }",
          "2500: void",
          "2501: QPDFWriter::writeHeader()",
          "2502: {",
          "2507:     {",
          "2508:  QTC::TC(\"qpdf\", \"QPDFWriter using forced PDF version\");",
          "2511:     }",
          "2513:     writeString(\"%PDF-\");",
          "2516:     {",
          "2518:         writeString(\"\\n%PCLm 1.0\\n\");",
          "",
          "[Removed Lines]",
          "2497:     closeObject(this->encryption_dict_objid);",
          "2503:     setMinimumPDFVersion(pdf.getPDFVersion(), pdf.getExtensionLevel());",
          "2504:     this->final_pdf_version = this->min_pdf_version;",
          "2505:     this->final_extension_level = this->min_extension_level;",
          "2506:     if (! this->forced_pdf_version.empty())",
          "2509:  this->final_pdf_version = this->forced_pdf_version;",
          "2510:         this->final_extension_level = this->forced_extension_level;",
          "2514:     writeString(this->final_pdf_version);",
          "2515:     if (this->pclm)",
          "",
          "[Added Lines]",
          "2507:     closeObject(this->m->encryption_dict_objid);",
          "2513:     setMinimumPDFVersion(this->m->pdf.getPDFVersion(),",
          "2514:                          this->m->pdf.getExtensionLevel());",
          "2515:     this->m->final_pdf_version = this->m->min_pdf_version;",
          "2516:     this->m->final_extension_level = this->m->min_extension_level;",
          "2517:     if (! this->m->forced_pdf_version.empty())",
          "2520:  this->m->final_pdf_version = this->m->forced_pdf_version;",
          "2521:         this->m->final_extension_level = this->m->forced_extension_level;",
          "2525:     writeString(this->m->final_pdf_version);",
          "2526:     if (this->m->pclm)",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "2539:     int S = 0;",
          "2540:     int O = 0;",
          "2541:     QPDF::Writer::generateHintStream(",
          "2543:         hint_buffer, S, O);",
          "2545:     openObject(hint_id);",
          "",
          "[Removed Lines]",
          "2542:         this->pdf, this->xref, this->lengths, this->obj_renumber_no_gen,",
          "",
          "[Added Lines]",
          "2553:         this->m->pdf, this->m->xref, this->m->lengths,",
          "2554:         this->m->obj_renumber_no_gen,",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "2559:     writeString(QUtil::int_to_string(hlen));",
          "2560:     writeString(\" >>\\nstream\\n\");",
          "2563:     {",
          "2564:  QTC::TC(\"qpdf\", \"QPDFWriter encrypted hint stream\");",
          "2565:     }",
          "2566:     pushEncryptionFilter();",
          "2567:     writeBuffer(hint_buffer);",
          "2569:     popPipelineStack();",
          "2571:     if (last_char != '\\n')",
          "",
          "[Removed Lines]",
          "2562:     if (this->encrypted)",
          "2568:     char last_char = this->pipeline->getLastChar();",
          "",
          "[Added Lines]",
          "2574:     if (this->m->encrypted)",
          "2580:     char last_char = this->m->pipeline->getLastChar();",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "2592:     writeString(QUtil::int_to_string(first));",
          "2593:     writeString(\" \");",
          "2594:     writeString(QUtil::int_to_string(last - first + 1));",
          "2596:     writeString(\"\\n\");",
          "2597:     for (int i = first; i <= last; ++i)",
          "2598:     {",
          "",
          "[Removed Lines]",
          "2595:     qpdf_offset_t space_before_zero = this->pipeline->getCount();",
          "",
          "[Added Lines]",
          "2607:     qpdf_offset_t space_before_zero = this->m->pipeline->getCount();",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "2605:      qpdf_offset_t offset = 0;",
          "2606:      if (! suppress_offsets)",
          "2607:      {",
          "2609:   if ((hint_id != 0) &&",
          "2610:       (i != hint_id) &&",
          "2611:       (offset >= hint_offset))",
          "",
          "[Removed Lines]",
          "2608:   offset = this->xref[i].getOffset();",
          "",
          "[Added Lines]",
          "2620:   offset = this->m->xref[i].getOffset();",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "2639:        bool skip_compression,",
          "2640:                             int linearization_pass)",
          "2641: {",
          "2643:     qpdf_offset_t space_before_zero = xref_offset - 1;",
          "",
          "[Removed Lines]",
          "2642:     qpdf_offset_t xref_offset = this->pipeline->getCount();",
          "",
          "[Added Lines]",
          "2654:     qpdf_offset_t xref_offset = this->m->pipeline->getCount();",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "2647:       bytesNeeded(max_id));",
          "2652:     unsigned int esize = 1 + f1_size + f2_size;",
          "2658:     Pipeline* p = pushPipeline(new Pl_Buffer(\"xref stream\"));",
          "2659:     bool compressed = false;",
          "2661:     {",
          "2662:  compressed = true;",
          "2663:  if (! skip_compression)",
          "",
          "[Removed Lines]",
          "2650:     int f2_size = bytesNeeded(this->max_ostream_index);",
          "2656:     this->xref[xref_id] = QPDFXRefEntry(1, pipeline->getCount(), 0);",
          "2660:     if (! (this->stream_decode_level || this->qdf_mode))",
          "",
          "[Added Lines]",
          "2662:     int f2_size = bytesNeeded(this->m->max_ostream_index);",
          "2668:     this->m->xref[xref_id] = QPDFXRefEntry(1, this->m->pipeline->getCount(), 0);",
          "2672:     if (! (this->m->stream_decode_level || this->m->qdf_mode))",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "2675:     activatePipelineStack();",
          "2676:     for (int i = first; i <= last; ++i)",
          "2677:     {",
          "2679:  switch (e.getType())",
          "2680:  {",
          "2681:    case 0:",
          "",
          "[Removed Lines]",
          "2678:  QPDFXRefEntry& e = this->xref[i];",
          "",
          "[Added Lines]",
          "2690:  QPDFXRefEntry& e = this->m->xref[i];",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "2799: {",
          "2808:     std::vector<QPDFObjectHandle> part4;",
          "2809:     std::vector<QPDFObjectHandle> part6;",
          "",
          "[Removed Lines]",
          "2802:     discardGeneration(this->object_to_object_stream,",
          "2803:                       this->object_to_object_stream_no_gen);",
          "2805:     bool need_xref_stream = (! this->object_to_object_stream.empty());",
          "2806:     pdf.optimize(this->object_to_object_stream_no_gen);",
          "",
          "[Added Lines]",
          "2814:     discardGeneration(this->m->object_to_object_stream,",
          "2815:                       this->m->object_to_object_stream_no_gen);",
          "2817:     bool need_xref_stream = (! this->m->object_to_object_stream.empty());",
          "2818:     this->m->pdf.optimize(this->m->object_to_object_stream_no_gen);",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "2811:     std::vector<QPDFObjectHandle> part8;",
          "2812:     std::vector<QPDFObjectHandle> part9;",
          "2813:     QPDF::Writer::getLinearizedParts(",
          "2815:         part4, part6, part7, part8, part9);",
          "",
          "[Removed Lines]",
          "2814:         this->pdf, this->object_to_object_stream_no_gen,",
          "",
          "[Added Lines]",
          "2826:         this->m->pdf, this->m->object_to_object_stream_no_gen,",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "2834:     int second_half_uncompressed = part7.size() + part8.size() + part9.size();",
          "2835:     int second_half_first_obj = 1;",
          "2836:     int after_second_half = 1 + second_half_uncompressed;",
          "2838:     int second_half_xref = 0;",
          "2839:     if (need_xref_stream)",
          "2840:     {",
          "2842:     }",
          "2844:     std::vector<QPDFObjectHandle>* vecs2[] = {&part7, &part8, &part9};",
          "",
          "[Removed Lines]",
          "2837:     this->next_objid = after_second_half;",
          "2841:  second_half_xref = this->next_objid++;",
          "",
          "[Added Lines]",
          "2849:     this->m->next_objid = after_second_half;",
          "2853:  second_half_xref = this->m->next_objid++;",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "2850:      assignCompressedObjectNumbers((*iter).getObjGen());",
          "2851:  }",
          "2852:     }",
          "2859:     int first_half_xref = 0;",
          "2860:     if (need_xref_stream)",
          "2861:     {",
          "2863:     }",
          "2868:     {",
          "2870:     }",
          "2876:     std::vector<QPDFObjectHandle>* vecs1[] = {&part4, &part6};",
          "2877:     for (int i = 0; i < 2; ++i)",
          "",
          "[Removed Lines]",
          "2853:     int second_half_end = this->next_objid - 1;",
          "2854:     int second_trailer_size = this->next_objid;",
          "2857:     int first_half_start = this->next_objid;",
          "2858:     int lindict_id = this->next_objid++;",
          "2862:  first_half_xref = this->next_objid++;",
          "2864:     int part4_first_obj = this->next_objid;",
          "2865:     this->next_objid += part4.size();",
          "2866:     int after_part4 = this->next_objid;",
          "2867:     if (this->encrypted)",
          "2869:  this->encryption_dict_objid = this->next_objid++;",
          "2871:     int hint_id = this->next_objid++;",
          "2872:     int part6_first_obj = this->next_objid;",
          "2873:     this->next_objid += part6.size();",
          "2874:     int after_part6 = this->next_objid;",
          "",
          "[Added Lines]",
          "2865:     int second_half_end = this->m->next_objid - 1;",
          "2866:     int second_trailer_size = this->m->next_objid;",
          "2869:     int first_half_start = this->m->next_objid;",
          "2870:     int lindict_id = this->m->next_objid++;",
          "2874:  first_half_xref = this->m->next_objid++;",
          "2876:     int part4_first_obj = this->m->next_objid;",
          "2877:     this->m->next_objid += part4.size();",
          "2878:     int after_part4 = this->m->next_objid;",
          "2879:     if (this->m->encrypted)",
          "2881:  this->m->encryption_dict_objid = this->m->next_objid++;",
          "2883:     int hint_id = this->m->next_objid++;",
          "2884:     int part6_first_obj = this->m->next_objid;",
          "2885:     this->m->next_objid += part6.size();",
          "2886:     int after_part6 = this->m->next_objid;",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "2882:      assignCompressedObjectNumbers((*iter).getObjGen());",
          "2883:  }",
          "2884:     }",
          "2888:     int part4_end_marker = part4.back().getObjectID();",
          "2889:     int part6_end_marker = part6.back().getObjectID();",
          "",
          "[Removed Lines]",
          "2885:     int first_half_end = this->next_objid - 1;",
          "2886:     int first_trailer_size = this->next_objid;",
          "",
          "[Added Lines]",
          "2897:     int first_half_end = this->m->next_objid - 1;",
          "2898:     int first_trailer_size = this->m->next_objid;",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "2895:     qpdf_offset_t first_xref_end = 0;",
          "2896:     qpdf_offset_t second_xref_end = 0;",
          "2899:     enqueuePart(part4);",
          "2902:     enqueuePart(part6);",
          "2905:     enqueuePart(part7);",
          "2906:     enqueuePart(part8);",
          "2907:     enqueuePart(part9);",
          "2910:     qpdf_offset_t hint_length = 0;",
          "2911:     PointerHolder<Buffer> hint_buffer;",
          "",
          "[Removed Lines]",
          "2898:     this->next_objid = part4_first_obj;",
          "2900:     assert(this->next_objid == after_part4);",
          "2901:     this->next_objid = part6_first_obj;",
          "2903:     assert(this->next_objid == after_part6);",
          "2904:     this->next_objid = second_half_first_obj;",
          "2908:     assert(this->next_objid == after_second_half);",
          "",
          "[Added Lines]",
          "2910:     this->m->next_objid = part4_first_obj;",
          "2912:     assert(this->m->next_objid == after_part4);",
          "2913:     this->m->next_objid = part6_first_obj;",
          "2915:     assert(this->m->next_objid == after_part6);",
          "2916:     this->m->next_objid = second_half_first_obj;",
          "2920:     assert(this->m->next_objid == after_second_half);",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "2917:  if (pass == 1)",
          "2918:  {",
          "2919:      pushDiscardFilter();",
          "2921:             {",
          "2922:                 pushMD5Pipeline();",
          "2923:             }",
          "",
          "[Removed Lines]",
          "2920:             if (this->deterministic_id)",
          "",
          "[Added Lines]",
          "2932:             if (this->m->deterministic_id)",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "2939:  openObject(lindict_id);",
          "2940:  writeString(\"<<\");",
          "2941:  if (pass == 2)",
          "2942:  {",
          "2945:      int npages = pages.size();",
          "2947:      writeString(\" /Linearized 1 /L \");",
          "",
          "[Removed Lines]",
          "2938:  qpdf_offset_t pos = this->pipeline->getCount();",
          "2943:      std::vector<QPDFObjectHandle> const& pages = pdf.getAllPages();",
          "2944:      int first_page_object = obj_renumber[pages.at(0).getObjGen()];",
          "",
          "[Added Lines]",
          "2950:  qpdf_offset_t pos = this->m->pipeline->getCount();",
          "2955:      std::vector<QPDFObjectHandle> const& pages =",
          "2956:                 this->m->pdf.getAllPages();",
          "2957:      int first_page_object =",
          "2958:                 this->m->obj_renumber[pages.at(0).getObjGen()];",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "2951:      writeString(\" /H [ \");",
          "2953:      writeString(\" \");",
          "2954:      writeString(QUtil::int_to_string(hint_length));",
          "2955:      writeString(\" ] /O \");",
          "",
          "[Removed Lines]",
          "2952:      writeString(QUtil::int_to_string(this->xref[hint_id].getOffset()));",
          "",
          "[Added Lines]",
          "2966:      writeString(QUtil::int_to_string(",
          "2967:                             this->m->xref[hint_id].getOffset()));",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "2964:  writeString(\" >>\");",
          "2965:  closeObject(lindict_id);",
          "2966:  static int const pad = 200;",
          "2968:  assert(spaces >= 0);",
          "2969:  writePad(spaces);",
          "2970:  writeString(\"\\n\");",
          "2979:  qpdf_offset_t hint_offset = 0;",
          "2980:  if (pass == 2)",
          "2981:  {",
          "2983:  }",
          "2984:  if (need_xref_stream)",
          "2985:  {",
          "",
          "[Removed Lines]",
          "2967:  int spaces = (pos - this->pipeline->getCount() + pad);",
          "2974:         writeString(this->extra_header_text);",
          "2978:  qpdf_offset_t first_xref_offset = this->pipeline->getCount();",
          "2982:      hint_offset = this->xref[hint_id].getOffset();",
          "",
          "[Added Lines]",
          "2982:  int spaces = (pos - this->m->pipeline->getCount() + pad);",
          "2989:         writeString(this->m->extra_header_text);",
          "2993:  qpdf_offset_t first_xref_offset = this->m->pipeline->getCount();",
          "2997:      hint_offset = this->m->xref[hint_id].getOffset();",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "2997:   first_half_max_obj_offset = 1 << 25;",
          "2998:      }",
          "3000:      writeXRefStream(first_half_xref, first_half_end,",
          "3001:        first_half_max_obj_offset,",
          "3002:        t_lin_first, first_half_start, first_half_end,",
          "",
          "[Removed Lines]",
          "2999:      pos = this->pipeline->getCount();",
          "",
          "[Added Lines]",
          "3014:      pos = this->m->pipeline->getCount();",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "3004:        hint_length + second_xref_offset,",
          "3005:        hint_id, hint_offset, hint_length,",
          "3006:        (pass == 1), pass);",
          "3008:      if (pass == 1)",
          "3009:      {",
          "3012:   writePad(calculateXrefStreamPadding(endpos - pos));",
          "3014:      }",
          "3015:      else",
          "3016:      {",
          "",
          "[Removed Lines]",
          "3007:      qpdf_offset_t endpos = this->pipeline->getCount();",
          "3013:   first_xref_end = this->pipeline->getCount();",
          "",
          "[Added Lines]",
          "3022:      qpdf_offset_t endpos = this->m->pipeline->getCount();",
          "3028:   first_xref_end = this->m->pipeline->getCount();",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "3019:   writePad(first_xref_end - endpos);",
          "3022:                 {",
          "3023:                     throw std::logic_error(",
          "3024:                         \"insufficient padding for first pass xref stream\");",
          "",
          "[Removed Lines]",
          "3021:   if (this->pipeline->getCount() != first_xref_end)",
          "",
          "[Added Lines]",
          "3036:   if (this->m->pipeline->getCount() != first_xref_end)",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "3040:  for (std::list<QPDFObjectHandle>::iterator iter =",
          "3043:  {",
          "3044:      QPDFObjectHandle cur_object = (*iter);",
          "3045:      if (cur_object.getObjectID() == part6_end_marker)",
          "3046:      {",
          "3048:      }",
          "3049:      writeObject(cur_object);",
          "3050:      if (cur_object.getObjectID() == part4_end_marker)",
          "3051:      {",
          "3053:   {",
          "3054:       writeEncryptionDictionary();",
          "3055:   }",
          "3056:   if (pass == 1)",
          "3057:   {",
          "3060:   }",
          "3061:   else",
          "3062:   {",
          "",
          "[Removed Lines]",
          "3041:    this->object_queue.begin();",
          "3042:       iter != this->object_queue.end(); ++iter)",
          "3047:   first_half_max_obj_offset = this->pipeline->getCount();",
          "3052:   if (this->encrypted)",
          "3058:       this->xref[hint_id] =",
          "3059:    QPDFXRefEntry(1, this->pipeline->getCount(), 0);",
          "",
          "[Added Lines]",
          "3056:    this->m->object_queue.begin();",
          "3057:       iter != this->m->object_queue.end(); ++iter)",
          "3062:   first_half_max_obj_offset = this->m->pipeline->getCount();",
          "3067:   if (this->m->encrypted)",
          "3073:       this->m->xref[hint_id] =",
          "3074:    QPDFXRefEntry(1, this->m->pipeline->getCount(), 0);",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "3066:      }",
          "3067:      if (cur_object.getObjectID() == part6_end_marker)",
          "3068:      {",
          "3070:      }",
          "3071:  }",
          "",
          "[Removed Lines]",
          "3069:   part6_end_offset = this->pipeline->getCount();",
          "",
          "[Added Lines]",
          "3084:   part6_end_offset = this->m->pipeline->getCount();",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "3078:  if (need_xref_stream)",
          "3079:  {",
          "3081:      space_before_zero =",
          "3082:   writeXRefStream(second_half_xref,",
          "3083:     second_half_end, second_xref_offset,",
          "3084:     t_lin_second, 0, second_half_end,",
          "3085:     second_trailer_size,",
          "3086:     0, 0, 0, 0, (pass == 1), pass);",
          "3089:      if (pass == 1)",
          "3090:      {",
          "",
          "[Removed Lines]",
          "3077:  second_xref_offset = this->pipeline->getCount();",
          "3080:      pos = this->pipeline->getCount();",
          "3087:      qpdf_offset_t endpos = this->pipeline->getCount();",
          "",
          "[Added Lines]",
          "3092:  second_xref_offset = this->m->pipeline->getCount();",
          "3095:      pos = this->m->pipeline->getCount();",
          "3102:      qpdf_offset_t endpos = this->m->pipeline->getCount();",
          "",
          "---------------",
          "--- Hunk 103 ---",
          "[Context before]",
          "3094:   writePad(calculateXrefStreamPadding(endpos - pos));",
          "3095:   writeString(\"\\n\");",
          "3097:      }",
          "3098:      else",
          "3099:      {",
          "3102:   writePad(second_xref_end + hint_length - 1 - pos);",
          "3103:   writeString(\"\\n\");",
          "3108:                     second_xref_end + hint_length)",
          "3109:                 {",
          "3110:                     throw std::logic_error(",
          "",
          "[Removed Lines]",
          "3096:   second_xref_end = this->pipeline->getCount();",
          "3101:   qpdf_offset_t pos = this->pipeline->getCount();",
          "3107:   if (this->pipeline->getCount() !=",
          "",
          "[Added Lines]",
          "3111:   second_xref_end = this->m->pipeline->getCount();",
          "3116:   qpdf_offset_t pos = this->m->pipeline->getCount();",
          "3122:   if (this->m->pipeline->getCount() !=",
          "",
          "---------------",
          "--- Hunk 104 ---",
          "[Context before]",
          "3123:  writeString(QUtil::int_to_string(first_xref_offset));",
          "3124:  writeString(\"\\n%%EOF\\n\");",
          "3128:  if (pass == 1)",
          "3129:  {",
          "3131:             {",
          "3132:                 QTC::TC(\"qpdf\", \"QPDFWriter linearized deterministic ID\",",
          "3133:                         need_xref_stream ? 0 : 1);",
          "3134:                 computeDeterministicIDData();",
          "3135:                 popPipelineStack();",
          "3137:             }",
          "3141:      popPipelineStack();",
          "3148:      pushPipeline(new Pl_Buffer(\"hint buffer\"));",
          "",
          "[Removed Lines]",
          "3126:         discardGeneration(this->obj_renumber, this->obj_renumber_no_gen);",
          "3130:             if (this->deterministic_id)",
          "3136:                 assert(this->md5_pipeline == 0);",
          "3140:      file_size = this->pipeline->getCount();",
          "3145:      qpdf_offset_t hint_offset = this->xref[hint_id].getOffset();",
          "",
          "[Added Lines]",
          "3141:         discardGeneration(this->m->obj_renumber, this->m->obj_renumber_no_gen);",
          "3145:             if (this->m->deterministic_id)",
          "3151:                 assert(this->m->md5_pipeline == 0);",
          "3155:      file_size = this->m->pipeline->getCount();",
          "3160:      qpdf_offset_t hint_offset = this->m->xref[hint_id].getOffset();",
          "",
          "---------------",
          "--- Hunk 105 ---",
          "[Context before]",
          "3152:      hint_length = hint_buffer->getSize();",
          "3156:  }",
          "3157:     }",
          "3158: }",
          "",
          "[Removed Lines]",
          "3155:      this->xref[hint_id] = QPDFXRefEntry(1, hint_offset, 0);",
          "",
          "[Added Lines]",
          "3170:      this->m->xref[hint_id] = QPDFXRefEntry(1, hint_offset, 0);",
          "",
          "---------------",
          "--- Hunk 106 ---",
          "[Context before]",
          "3160: void",
          "3161: QPDFWriter::enqueueObjectsStandard()",
          "3162: {",
          "3164:     {",
          "3165:         QTC::TC(\"qpdf\", \"QPDFWriter preserve unreferenced standard\");",
          "3167:         for (std::vector<QPDFObjectHandle>::iterator iter = all.begin();",
          "3168:              iter != all.end(); ++iter)",
          "3169:         {",
          "",
          "[Removed Lines]",
          "3163:     if (this->preserve_unreferenced_objects)",
          "3166:         std::vector<QPDFObjectHandle> all = this->pdf.getAllObjects();",
          "",
          "[Added Lines]",
          "3178:     if (this->m->preserve_unreferenced_objects)",
          "3181:         std::vector<QPDFObjectHandle> all = this->m->pdf.getAllObjects();",
          "",
          "---------------",
          "--- Hunk 107 ---",
          "[Context before]",
          "3196:     std::string image_transform_content = \"q /image Do Q\\n\";",
          "3200:     for (std::vector<QPDFObjectHandle>::iterator iter = all.begin();",
          "3201:          iter != all.end(); ++iter)",
          "3202:     {",
          "",
          "[Removed Lines]",
          "3199:     std::vector<QPDFObjectHandle> all = this->pdf.getAllPages();",
          "",
          "[Added Lines]",
          "3214:     std::vector<QPDFObjectHandle> all = this->m->pdf.getAllPages();",
          "",
          "---------------",
          "--- Hunk 108 ---",
          "[Context before]",
          "3215:         {",
          "3216:             enqueueObject(strips.getKey(*image));",
          "3217:             enqueueObject(QPDFObjectHandle::newStream(",
          "3219:         }",
          "3220:     }",
          "",
          "[Removed Lines]",
          "3218:                               &pdf, image_transform_content));",
          "",
          "[Added Lines]",
          "3233:                               &this->m->pdf, image_transform_content));",
          "",
          "---------------",
          "--- Hunk 109 ---",
          "[Context before]",
          "3227: void",
          "3228: QPDFWriter::writeStandard()",
          "3229: {",
          "3231:     {",
          "3232:         pushMD5Pipeline();",
          "3233:     }",
          "",
          "[Removed Lines]",
          "3230:     if (this->deterministic_id)",
          "",
          "[Added Lines]",
          "3245:     if (this->m->deterministic_id)",
          "",
          "---------------",
          "--- Hunk 110 ---",
          "[Context before]",
          "3237:     writeHeader();",
          "3241:     {",
          "3242:         enqueueObjectsPCLm();",
          "3243:     }",
          "",
          "[Removed Lines]",
          "3238:     writeString(this->extra_header_text);",
          "3240:     if (this->pclm)",
          "",
          "[Added Lines]",
          "3253:     writeString(this->m->extra_header_text);",
          "3255:     if (this->m->pclm)",
          "",
          "---------------",
          "--- Hunk 111 ---",
          "[Context before]",
          "3253:     {",
          "3256:  writeObject(cur_object);",
          "3257:     }",
          "3261:     {",
          "3262:  writeEncryptionDictionary();",
          "3263:     }",
          "3268:     {",
          "3271:     }",
          "3272:     else",
          "3273:     {",
          "3276:  writeXRefStream(xref_id, xref_id, xref_offset, t_normal,",
          "3278:     }",
          "3279:     writeString(\"startxref\\n\");",
          "3280:     writeString(QUtil::int_to_string(xref_offset));",
          "3281:     writeString(\"\\n%%EOF\\n\");",
          "3284:     {",
          "3285:  QTC::TC(\"qpdf\", \"QPDFWriter standard deterministic ID\",",
          "3287:         popPipelineStack();",
          "3289:     }",
          "3290: }",
          "",
          "[Removed Lines]",
          "3252:     while (this->object_queue.size())",
          "3254:  QPDFObjectHandle cur_object = this->object_queue.front();",
          "3255:  this->object_queue.pop_front();",
          "3260:     if (this->encrypted)",
          "3266:     qpdf_offset_t xref_offset = this->pipeline->getCount();",
          "3267:     if (this->object_stream_to_objects.empty())",
          "3270:  writeXRefTable(t_normal, 0, this->next_objid - 1, this->next_objid);",
          "3275:  int xref_id = this->next_objid++;",
          "3277:    0, this->next_objid - 1, this->next_objid);",
          "3283:     if (this->deterministic_id)",
          "3286:                 this->object_stream_to_objects.empty() ? 0 : 1);",
          "3288:         assert(this->md5_pipeline == 0);",
          "",
          "[Added Lines]",
          "3267:     while (this->m->object_queue.size())",
          "3269:  QPDFObjectHandle cur_object = this->m->object_queue.front();",
          "3270:  this->m->object_queue.pop_front();",
          "3275:     if (this->m->encrypted)",
          "3281:     qpdf_offset_t xref_offset = this->m->pipeline->getCount();",
          "3282:     if (this->m->object_stream_to_objects.empty())",
          "3285:  writeXRefTable(t_normal, 0, this->m->next_objid - 1,",
          "3286:                        this->m->next_objid);",
          "3291:  int xref_id = this->m->next_objid++;",
          "3293:    0, this->m->next_objid - 1, this->m->next_objid);",
          "3299:     if (this->m->deterministic_id)",
          "3302:                 this->m->object_stream_to_objects.empty() ? 0 : 1);",
          "3304:         assert(this->m->md5_pipeline == 0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}