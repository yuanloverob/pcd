{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "34d15667639c95a930ee2943876d807d325051d8",
      "candidate_info": {
        "commit_hash": "34d15667639c95a930ee2943876d807d325051d8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/34d15667639c95a930ee2943876d807d325051d8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbevtab.c"
        ],
        "message": "Fix SQLITE_OMIT_VIRTUALTABLE testfixture builds.\n\nFossilOrigin-Name: 3d9780c5f6095ea35bc731a51eb34d7cf8bd5dcece825b686b94fd50131626e2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbevtab.c||src/vdbevtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 102126d80872fdb7469233611cab28100c8455aab4ce25702b83398394559185",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbevtab.c||src/vdbevtab.c": [
          "File: src/vdbevtab.c -> src/vdbevtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include \"sqliteInt.h\"",
          "18: #include \"vdbeInt.h\"",
          "",
          "[Removed Lines]",
          "16: #ifdef SQLITE_ENABLE_BYTECODE_VTAB",
          "",
          "[Added Lines]",
          "16: #if defined(SQLITE_ENABLE_BYTECODE_VTAB) && !defined(SQLITE_OMIT_VIRTUALTABLE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "419:   }",
          "420:   return rc;",
          "421: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "422: #elif defined(SQLITE_ENABLE_BYTECODE_VTAB)",
          "423: int sqlite3VdbeBytecodeVtabInit(sqlite3 *db){ return SQLITE_OK; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "999429882edbf4fb04add7bb5338764271aead89",
      "candidate_info": {
        "commit_hash": "999429882edbf4fb04add7bb5338764271aead89",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/999429882edbf4fb04add7bb5338764271aead89",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix the CLI so that interrupts work in columnar output mode.\n\nFossilOrigin-Name: 9472f1fe58222b738ad10fc93ceb365dc33b65c2bbca571f52bcd5bdb74b347e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d31fd57ea538668238787fde10a6a57bbd8a428c73f2e54b2e95ee9a645bc75b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3052:     sqlite3_free_table(azData);",
          "3053:     return;",
          "3054:   }",
          "3059:   if( nColumn>p->nWidth ){",
          "3060:     p->colWidth = realloc(p->colWidth, nColumn*2*sizeof(int));",
          "3061:     if( p->colWidth==0 ) shell_out_of_memory();",
          "",
          "[Removed Lines]",
          "3055:   if( nRow==0 || nColumn==0 ){",
          "3056:     sqlite3_free_table(azData);",
          "3057:     return;",
          "3058:   }",
          "",
          "[Added Lines]",
          "3055:   if( nRow==0 || nColumn==0 ) goto columnar_end;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3077:     j = i%nColumn;",
          "3078:     if( n>p->actualWidth[j] ) p->actualWidth[j] = n;",
          "3079:   }",
          "3080:   switch( p->cMode ){",
          "3081:     case MODE_Column: {",
          "3082:       colSep = \"  \";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3077:   if( seenInterrupt ) goto columnar_end;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3139:     }",
          "3140:   }",
          "3141:   for(i=nColumn, j=0; i<nTotal; i++, j++){",
          "3142:     if( j==0 && p->cMode!=MODE_Column ){",
          "3143:       utf8_printf(p->out, \"%s\", p->cMode==MODE_Box?BOX_13\" \":\"| \");",
          "3144:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3140:     if( seenInterrupt ) goto columnar_end;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3159:   }else if( p->cMode==MODE_Box ){",
          "3160:     print_box_row_separator(p, nColumn, BOX_12, BOX_124, BOX_14);",
          "3161:   }",
          "3162:   sqlite3_free_table(azData);",
          "3163: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3161: columnar_end:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e484cb3ebd8fe3f14df1ae07810625202e47a3a",
      "candidate_info": {
        "commit_hash": "5e484cb3ebd8fe3f14df1ae07810625202e47a3a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5e484cb3ebd8fe3f14df1ae07810625202e47a3a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/filter1.test",
          "test/window1.test"
        ],
        "message": "When determining if an aggregate within a sub-query should be processed as part of the sub-query or an outer query, consider any FILTER clause in the same way as the arguments to the aggregate.\n\nFossilOrigin-Name: 1ffc045d2bbeeda9c13a3a3585538ff6434fc852b0ae6679d3c8b9f606bf92e6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/filter1.test||test/filter1.test",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 846b1de6e5a9e418f225273dc033234c64c116fcd89c8261522b4902c248451f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5492:   cnt.nThis = 0;",
          "5493:   cnt.nOther = 0;",
          "5494:   sqlite3WalkExprList(&w, pExpr->x.pList);",
          "5495:   return cnt.nThis>0 || cnt.nOther==0;",
          "5496: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5495: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "5496:   if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "5497:     sqlite3WalkExpr(&w, pExpr->y.pWin->pFilter);",
          "5498:   }",
          "5499: #endif",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "184:   SELECT count(*) FILTER (WHERE b>2) OVER (ORDER BY b) FROM (SELECT * FROM t1)",
          "185: } {0 1}",
          "187: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187: #-------------------------------------------------------------------------",
          "188: reset_db",
          "189: do_execsql_test 6.0 {",
          "190:   CREATE TABLE t1(a,b);",
          "191:   INSERT INTO t1 VALUES(1,1);",
          "192:   INSERT INTO t1 VALUES(2,2);",
          "193:   CREATE TABLE t2(x,y);",
          "194:   INSERT INTO t2 VALUES(1,1);",
          "195: }",
          "197: do_execsql_test 6.1 {",
          "198:   SELECT (SELECT COUNT(a) FILTER(WHERE x) FROM t2) FROM t1;",
          "199: } {1 1}",
          "200: do_execsql_test 6.2 {",
          "201:   SELECT (SELECT COUNT(a+x) FROM t2) FROM t1;",
          "202: } {1 1}",
          "203: do_execsql_test 6.3 {",
          "204:   SELECT (SELECT COUNT(a) FROM t2) FROM t1;",
          "205: } {2}",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1333: # in a join.",
          "1334: #",
          "1335: reset_db",
          "1337:   CREATE TABLE t0(c0);",
          "1338:   CREATE TABLE t1(c0, c1 UNIQUE);",
          "1339:   INSERT INTO t0(c0) VALUES(1);",
          "1340:   INSERT INTO t1(c0,c1) VALUES(2,3);",
          "1341:   SELECT COUNT(*) FROM t0, t1 WHERE (SELECT AVG(0) FILTER(WHERE t1.c1));",
          "1343: do_execsql_test 38.20 {",
          "1344:   SELECT COUNT(*), AVG(1) FILTER(WHERE t1.c1) FROM t0, t1;",
          "1345: } {1 1.0}",
          "1347:   SELECT COUNT(*) FROM t0, t1 WHERE (SELECT AVG(1) FILTER(WHERE t1.c1));",
          "1350: reset_db",
          "1351: do_execsql_test 39.1 {",
          "",
          "[Removed Lines]",
          "1336: do_execsql_test 38.10 {",
          "1342: } {0}",
          "1346: do_execsql_test 38.30 {",
          "1348: } {1}",
          "",
          "[Added Lines]",
          "1336: do_catchsql_test 38.10 {",
          "1342: } {1 {misuse of aggregate: AVG()}}",
          "1346: do_catchsql_test 38.30 {",
          "1348: } {1 {misuse of aggregate: AVG()}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9ee94147f086fc9cd4bcf2bcdbb1fab6d1d1f921",
      "candidate_info": {
        "commit_hash": "9ee94147f086fc9cd4bcf2bcdbb1fab6d1d1f921",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9ee94147f086fc9cd4bcf2bcdbb1fab6d1d1f921",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "New tokens ALWAYS, GENERATED, and STORED used by generated columns should all be fallback tokens.\n\nFossilOrigin-Name: 13fe6978b7de208d2e27460d824f7fc778cf6ea0aabfe566b32bb410b8816f63",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4d424f3047b48fc441475137f30a719d2f079390c86fe2617710ddfb05c5e240",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:   CURRENT FOLLOWING PARTITION PRECEDING RANGE UNBOUNDED",
          "221:   EXCLUDE GROUPS OTHERS TIES",
          "222: %endif SQLITE_OMIT_WINDOWFUNC",
          "223:   REINDEX RENAME CTIME_KW IF",
          "224:   .",
          "225: %wildcard ANY.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "223: %ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "224:   GENERATED ALWAYS STORED",
          "225: %endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dc8339eaace6ca15a49f8983440ec552a694b68f",
      "candidate_info": {
        "commit_hash": "dc8339eaace6ca15a49f8983440ec552a694b68f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dc8339eaace6ca15a49f8983440ec552a694b68f",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "Add a test case covering the previous check-in to the test/fuzzdata8.db file.\n\nFossilOrigin-Name: 95379da0e1ad5110648a5b3af24e7caab66a6f1ad6efdf374c83ae4ef1fed515",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a58a6d6fb241a50c4c7c9af8a9c65bc4746e905b2ae12290c7182afa944053a2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}