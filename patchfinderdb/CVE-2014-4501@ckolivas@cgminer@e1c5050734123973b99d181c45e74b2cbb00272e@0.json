{
  "cve_id": "CVE-2014-4501",
  "cve_desc": "Multiple stack-based buffer overflows in sgminer before 4.2.2, cgminer before 4.3.5, and BFGMiner before 3.3.0 allow remote pool servers to have unspecified impact via a long URL in a client.reconnect stratum message to the (1) extract_sockaddr or (2) parse_reconnect functions in util.c.",
  "repo": "ckolivas/cgminer",
  "patch_hash": "e1c5050734123973b99d181c45e74b2cbb00272e",
  "patch_info": {
    "commit_hash": "e1c5050734123973b99d181c45e74b2cbb00272e",
    "repo": "ckolivas/cgminer",
    "commit_url": "https://github.com/ckolivas/cgminer/commit/e1c5050734123973b99d181c45e74b2cbb00272e",
    "files": [
      "util.c"
    ],
    "message": "Do some random sanity checking for stratum message parsing",
    "before_after_code_files": [
      "util.c||util.c"
    ]
  },
  "patch_diff": {
    "util.c||util.c": [
      "File: util.c -> util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "720:  return ret;",
      "721: }",
      "723: static const int b58tobin_tbl[] = {",
      "724:  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,",
      "725:  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "723: static bool _valid_hex(char *s, const char *file, const char *func, const int line)",
      "724: {",
      "725:  bool ret = false;",
      "726:  int i, len;",
      "728:  if (unlikely(!s)) {",
      "729:   applog(LOG_ERR, \"Null string passed to valid_hex from\"IN_FMT_FFL, file, func, line);",
      "730:   return ret;",
      "731:  }",
      "732:  len = strlen(s);",
      "733:  if (unlikely(!len)) {",
      "734:   applog(LOG_ERR, \"Zero length string passed to valid_hex from\"IN_FMT_FFL, file, func, line);",
      "735:   return ret;",
      "736:  }",
      "737:  for (i = 0; i < len; i++) {",
      "738:   unsigned char idx = s[i];",
      "740:   if (unlikely(hex2bin_tbl[idx] < 0)) {",
      "741:    applog(LOG_ERR, \"Invalid char %x passed to valid_hex from\"IN_FMT_FFL, idx, file, func, line);",
      "742:    return ret;",
      "743:   }",
      "744:  }",
      "745:  ret = true;",
      "746:  return ret;",
      "747: }",
      "749: #define valid_hex(s) _valid_hex(s, __FILE__, __func__, __LINE__)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1375:  if (url_len < 1)",
      "1376:   return false;",
      "1380:  if (port_len) {",
      "1381:   char *slash;",
      "",
      "[Removed Lines]",
      "1378:  sprintf(url_address, \"%.*s\", url_len, url_begin);",
      "",
      "[Added Lines]",
      "1406:  snprintf(url_address, 254, \"%.*s\", url_len, url_begin);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1685:  ntime = __json_array_string(val, 7);",
      "1686:  clean = json_is_true(json_array_get(val, 8));",
      "1696:   goto out;",
      "1697:  }",
      "",
      "[Removed Lines]",
      "1688:  if (!job_id || !prev_hash || !coinbase1 || !coinbase2 || !bbversion || !nbit || !ntime) {",
      "1690:   if (job_id)",
      "1691:    free(job_id);",
      "1692:   if (coinbase1)",
      "1693:    free(coinbase1);",
      "1694:   if (coinbase2)",
      "1695:    free(coinbase2);",
      "",
      "[Added Lines]",
      "1716:  if (!valid_hex(job_id) || !valid_hex(prev_hash) || !valid_hex(coinbase1) ||",
      "1717:      !valid_hex(coinbase2) || !valid_hex(bbversion) || !valid_hex(nbit) ||",
      "1718:      !valid_hex(ntime)) {",
      "1720:   free(job_id);",
      "1721:   free(coinbase1);",
      "1722:   free(coinbase2);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1880:  if (!port)",
      "1881:   port = pool->stratum_port;",
      "1885:  if (!extract_sockaddr(address, &sockaddr_url, &stratum_port))",
      "1886:   return false;",
      "",
      "[Removed Lines]",
      "1883:  sprintf(address, \"%s:%s\", url, port);",
      "",
      "[Added Lines]",
      "1910:  snprintf(address, 254, \"%s:%s\", url, port);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2551:  if (!sessionid)",
      "2552:   applog(LOG_DEBUG, \"Failed to get sessionid in initiate_stratum\");",
      "2553:  nonce1 = json_array_string(res_val, 1);",
      "2556:   free(sessionid);",
      "2557:   goto out;",
      "2558:  }",
      "2559:  n2size = json_integer_value(json_array_get(res_val, 2));",
      "2562:   free(sessionid);",
      "2563:   free(nonce1);",
      "2564:   goto out;",
      "",
      "[Removed Lines]",
      "2554:  if (!nonce1) {",
      "2555:   applog(LOG_INFO, \"Failed to get nonce1 in initiate_stratum\");",
      "2560:  if (!n2size) {",
      "2561:   applog(LOG_INFO, \"Failed to get n2size in initiate_stratum\");",
      "",
      "[Added Lines]",
      "2581:  if (!valid_hex(nonce1)) {",
      "2582:   applog(LOG_INFO, \"Failed to get valid nonce1 in initiate_stratum\");",
      "2587:  if (n2size < 2 || n2size > 16) {",
      "2588:   applog(LOG_INFO, \"Failed to get valid n2size in initiate_stratum\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "87ae66c7e6bf9f4991725cd134e8bbffad03e9b9",
      "candidate_info": {
        "commit_hash": "87ae66c7e6bf9f4991725cd134e8bbffad03e9b9",
        "repo": "ckolivas/cgminer",
        "commit_url": "https://github.com/ckolivas/cgminer/commit/87ae66c7e6bf9f4991725cd134e8bbffad03e9b9",
        "files": [
          "cgminer.c",
          "miner.h",
          "util.c"
        ],
        "message": "Create a work data template when receiving stratum notification, allowing a simple memcpy of the merkle root avoiding more hex2bin conversions on each work generation.",
        "before_after_code_files": [
          "cgminer.c||cgminer.c",
          "miner.h||miner.h",
          "util.c||util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util.c||util.c"
          ],
          "candidate": [
            "util.c||util.c"
          ]
        }
      },
      "candidate_diff": {
        "cgminer.c||cgminer.c": [
          "File: cgminer.c -> cgminer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5588: {",
          "5589:  unsigned char merkle_root[32], merkle_sha[64];",
          "5590:  uint32_t *data32, *swap32, nonce2;",
          "5592:  size_t nonce2_len;",
          "5593:  int i;",
          "",
          "[Removed Lines]",
          "5591:  char *header, *merkle_hash;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5613:  data32 = (uint32_t *)merkle_sha;",
          "5614:  swap32 = (uint32_t *)merkle_root;",
          "5615:  flip32(swap32, data32);",
          "",
          "[Removed Lines]",
          "5616:  merkle_hash = bin2hex((const unsigned char *)merkle_root, 32);",
          "5618:  header = calloc(pool->swork.header_len, 1);",
          "5619:  if (unlikely(!header))",
          "5620:   quit(1, \"Failed to calloc header in gen_stratum_work\");",
          "5621:  snprintf(header, pool->swork.header_len,",
          "5622:   \"%s%s%s%s%s%s%s\",",
          "5623:   pool->swork.bbversion,",
          "5624:   pool->swork.prev_hash,",
          "5625:   merkle_hash,",
          "5626:   pool->swork.ntime,",
          "5627:   pool->swork.nbit,",
          "5629:   workpadding);",
          "",
          "[Added Lines]",
          "5617:  memcpy(work->data, pool->header_bin, 128);",
          "5618:  memcpy(work->data + pool->merkle_offset, merkle_root, 32);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5646:   quit(1, \"Failed to calloc work nonce2 in gen_stratum_work\");",
          "5647:  __bin2hex(work->nonce2, (const unsigned char *)&nonce2, sizeof(uint32_t));",
          "5659:  calc_midstate(work);",
          "5661:  set_target(work->target, work->sdiff);",
          "5663:  local_work++;",
          "",
          "[Removed Lines]",
          "5649:  applog(LOG_DEBUG, \"Generated stratum merkle %s\", merkle_hash);",
          "5650:  applog(LOG_DEBUG, \"Generated stratum header %s\", header);",
          "5651:  applog(LOG_DEBUG, \"Work job_id %s nonce2 %s ntime %s\", work->job_id, work->nonce2, work->ntime);",
          "5653:  free(merkle_hash);",
          "5656:  if (unlikely(!hex2bin(work->data, header, 128)))",
          "5657:   quit(1, \"Failed to convert header to data in gen_stratum_work\");",
          "5658:  free(header);",
          "",
          "[Added Lines]",
          "5638:  if (opt_debug) {",
          "5639:   char *header, *merkle_hash;",
          "5641:   header = bin2hex(work->data, 128);",
          "5642:   merkle_hash = bin2hex((const unsigned char *)merkle_root, 32);",
          "5643:   applog(LOG_DEBUG, \"Generated stratum merkle %s\", merkle_hash);",
          "5644:   applog(LOG_DEBUG, \"Generated stratum header %s\", header);",
          "5645:   applog(LOG_DEBUG, \"Work job_id %s nonce2 %s ntime %s\", work->job_id, work->nonce2, work->ntime);",
          "5646:   free(header);",
          "5647:   free(merkle_hash);",
          "5648:  }",
          "",
          "---------------"
        ],
        "miner.h||miner.h": [
          "File: miner.h -> miner.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1213:  unsigned char *coinbase;",
          "1214:  int nonce2_offset;",
          "1216:  struct timeval tv_lastwork;",
          "1217: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1215:  unsigned char header_bin[128];",
          "1216:  int merkle_offset;",
          "",
          "---------------"
        ],
        "util.c||util.c": [
          "File: util.c -> util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1203:  return NULL;",
          "1204: }",
          "1206: static bool parse_notify(struct pool *pool, json_t *val)",
          "1207: {",
          "1209:  size_t cb1_len, cb2_len, alloc_len;",
          "1210:  unsigned char *cb1, *cb2;",
          "1211:  bool clean, ret = false;",
          "",
          "[Removed Lines]",
          "1208:  char *job_id, *prev_hash, *coinbase1, *coinbase2, *bbversion, *nbit, *ntime;",
          "",
          "[Added Lines]",
          "1206: static char *blank_merkel = \"0000000000000000000000000000000000000000000000000000000000000000\";",
          "1210:  char *job_id, *prev_hash, *coinbase1, *coinbase2, *bbversion, *nbit,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1281:  pool->swork.merkles = merkles;",
          "1282:  if (clean)",
          "1283:   pool->nonce2 = 0;",
          "1286:      strlen(pool->swork.ntime) +",
          "1287:      strlen(pool->swork.nbit) +",
          "1291:  pool->swork.header_len = pool->swork.header_len * 2 + 1;",
          "1292:  align_len(&pool->swork.header_len);",
          "1294:  cb1 = calloc(cb1_len, 1);",
          "1295:  if (unlikely(!cb1))",
          "",
          "[Removed Lines]",
          "1284:  pool->swork.header_len = strlen(pool->swork.bbversion) +",
          "1285:      strlen(pool->swork.prev_hash) +",
          "",
          "[Added Lines]",
          "1287:  pool->merkle_offset = strlen(pool->swork.bbversion) +",
          "1288:          strlen(pool->swork.prev_hash);",
          "1289:  pool->swork.header_len = pool->merkle_offset +",
          "1295:  pool->merkle_offset /= 2;",
          "1298:  header = alloca(pool->swork.header_len);",
          "1299:  snprintf(header, pool->swork.header_len,",
          "1300:   \"%s%s%s%s%s%s%s\",",
          "1301:   pool->swork.bbversion,",
          "1302:   pool->swork.prev_hash,",
          "1303:   blank_merkel,",
          "1304:   pool->swork.ntime,",
          "1305:   pool->swork.nbit,",
          "1307:   workpadding);",
          "1308:  if (unlikely(!hex2bin(pool->header_bin, header, 128)))",
          "1309:   quit(1, \"Failed to convert header to header_bin in parse_notify\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "453eaed415549cef8111c97a86e43e5d524793eb",
      "candidate_info": {
        "commit_hash": "453eaed415549cef8111c97a86e43e5d524793eb",
        "repo": "ckolivas/cgminer",
        "commit_url": "https://github.com/ckolivas/cgminer/commit/453eaed415549cef8111c97a86e43e5d524793eb",
        "files": [
          "util.c"
        ],
        "message": "Use valid_ascii testing for job_id since it need not be hex only",
        "before_after_code_files": [
          "util.c||util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util.c||util.c"
          ],
          "candidate": [
            "util.c||util.c"
          ]
        }
      },
      "candidate_diff": {
        "util.c||util.c": [
          "File: util.c -> util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "738:   unsigned char idx = s[i];",
          "740:   if (unlikely(hex2bin_tbl[idx] < 0)) {",
          "742:    return ret;",
          "743:   }",
          "744:  }",
          "",
          "[Removed Lines]",
          "741:    applog(LOG_ERR, \"Invalid char %x passed to valid_hex from\"IN_FMT_FFL, idx, file, func, line);",
          "",
          "[Added Lines]",
          "741:    applog(LOG_ERR, \"Invalid char 0x%x passed to valid_hex from\"IN_FMT_FFL, idx, file, func, line);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "749: #define valid_hex(s) _valid_hex(s, __FILE__, __func__, __LINE__)",
          "751: static const int b58tobin_tbl[] = {",
          "752:  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,",
          "753:  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "751: static bool _valid_ascii(char *s, const char *file, const char *func, const int line)",
          "752: {",
          "753:  bool ret = false;",
          "754:  int i, len;",
          "756:  if (unlikely(!s)) {",
          "757:   applog(LOG_ERR, \"Null string passed to valid_ascii from\"IN_FMT_FFL, file, func, line);",
          "758:   return ret;",
          "759:  }",
          "760:  len = strlen(s);",
          "761:  if (unlikely(!len)) {",
          "762:   applog(LOG_ERR, \"Zero length string passed to valid_ascii from\"IN_FMT_FFL, file, func, line);",
          "763:   return ret;",
          "764:  }",
          "765:  for (i = 0; i < len; i++) {",
          "766:   unsigned char idx = s[i];",
          "768:   if (unlikely(idx < 32 || idx > 126)) {",
          "769:    applog(LOG_ERR, \"Invalid char 0x%x passed to valid_ascii from\"IN_FMT_FFL, idx, file, func, line);",
          "770:    return ret;",
          "771:   }",
          "772:  }",
          "773:  ret = true;",
          "774:  return ret;",
          "775: }",
          "777: #define valid_ascii(s) _valid_ascii(s, __FILE__, __func__, __LINE__)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1713:  ntime = __json_array_string(val, 7);",
          "1714:  clean = json_is_true(json_array_get(val, 8));",
          "1717:      !valid_hex(coinbase2) || !valid_hex(bbversion) || !valid_hex(nbit) ||",
          "1718:      !valid_hex(ntime)) {",
          "",
          "[Removed Lines]",
          "1716:  if (!valid_hex(job_id) || !valid_hex(prev_hash) || !valid_hex(coinbase1) ||",
          "",
          "[Added Lines]",
          "1744:  if (!valid_ascii(job_id) || !valid_hex(prev_hash) || !valid_hex(coinbase1) ||",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9f10244c19af2336f81d3081d5eef983b2d1b31",
      "candidate_info": {
        "commit_hash": "e9f10244c19af2336f81d3081d5eef983b2d1b31",
        "repo": "ckolivas/cgminer",
        "commit_url": "https://github.com/ckolivas/cgminer/commit/e9f10244c19af2336f81d3081d5eef983b2d1b31",
        "files": [
          "util.c"
        ],
        "message": "More gracefully break out of parse_notify on a corrupted hex string error, checking the return value of all hex2bin conversions and being consistent with using stack memory. Fix an unlocking error in cases of failure.",
        "before_after_code_files": [
          "util.c||util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util.c||util.c"
          ],
          "candidate": [
            "util.c||util.c"
          ]
        }
      },
      "candidate_diff": {
        "util.c||util.c": [
          "File: util.c -> util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1497: {",
          "1498:  char *job_id, *prev_hash, *coinbase1, *coinbase2, *bbversion, *nbit,",
          "1500:  size_t cb1_len, cb2_len, alloc_len;",
          "1502:  bool clean, ret = false;",
          "1503:  int merkles, i;",
          "1504:  json_t *arr;",
          "",
          "[Removed Lines]",
          "1501:  unsigned char *cb1, *cb2;",
          "",
          "[Added Lines]",
          "1501:  unsigned char *cb1 = NULL, *cb2 = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1565:    pool->swork.merkle_bin[i] = malloc(32);",
          "1566:    if (unlikely(!pool->swork.merkle_bin[i]))",
          "1567:     quit(1, \"Failed to malloc pool swork merkle_bin\");",
          "1569:    free(merkle);",
          "1570:   }",
          "1571:  }",
          "1572:  pool->swork.merkles = merkles;",
          "",
          "[Removed Lines]",
          "1568:    hex2bin(pool->swork.merkle_bin[i], merkle, 32);",
          "",
          "[Added Lines]",
          "1569:    ret = hex2bin(pool->swork.merkle_bin[i], merkle, 32);",
          "1571:    if (unlikely(!ret)) {",
          "1572:     applog(LOG_ERR, \"Failed to convert merkle to merkle_bin in parse_notify\");",
          "1573:     goto out_unlock;",
          "1574:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1593:   pool->swork.nbit,",
          "1595:   workpadding);",
          "1607:  free(pool->coinbase);",
          "1608:  align_len(&alloc_len);",
          "1609:  pool->coinbase = calloc(alloc_len, 1);",
          "",
          "[Removed Lines]",
          "1596:  if (unlikely(!hex2bin(pool->header_bin, header, 128)))",
          "1597:   quit(1, \"Failed to convert header to header_bin in parse_notify\");",
          "1599:  cb1 = calloc(cb1_len, 1);",
          "1600:  if (unlikely(!cb1))",
          "1601:   quithere(1, \"Failed to calloc cb1 in parse_notify\");",
          "1602:  hex2bin(cb1, coinbase1, cb1_len);",
          "1603:  cb2 = calloc(cb2_len, 1);",
          "1604:  if (unlikely(!cb2))",
          "1605:   quithere(1, \"Failed to calloc cb2 in parse_notify\");",
          "1606:  hex2bin(cb2, coinbase2, cb2_len);",
          "",
          "[Added Lines]",
          "1601:  ret = hex2bin(pool->header_bin, header, 128);",
          "1602:  if (unlikely(!ret)) {",
          "1603:   applog(LOG_ERR, \"Failed to convert header to header_bin in parse_notify\");",
          "1604:   goto out_unlock;",
          "1605:  }",
          "1607:  cb1 = alloca(cb1_len);",
          "1608:  ret = hex2bin(cb1, coinbase1, cb1_len);",
          "1609:  if (unlikely(!ret)) {",
          "1610:   applog(LOG_ERR, \"Failed to convert cb1 to cb1_bin in parse_notify\");",
          "1611:   goto out_unlock;",
          "1612:  }",
          "1613:  cb2 = alloca(cb2_len);",
          "1614:  ret = hex2bin(cb2, coinbase2, cb2_len);",
          "1615:  if (unlikely(!ret)) {",
          "1616:   applog(LOG_ERR, \"Failed to convert cb2 to cb2_bin in parse_notify\");",
          "1617:   goto out_unlock;",
          "1618:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1612:  memcpy(pool->coinbase, cb1, cb1_len);",
          "1613:  memcpy(pool->coinbase + cb1_len, pool->nonce1bin, pool->n1_len);",
          "1614:  memcpy(pool->coinbase + cb1_len + pool->n1_len + pool->n2size, cb2, cb2_len);",
          "1615:  cg_wunlock(&pool->data_lock);",
          "1617:  if (opt_protocol) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1627: out_unlock:",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1626:  }",
          "1627:  free(coinbase1);",
          "1628:  free(coinbase2);",
          "1633:  pool->getwork_requested++;",
          "1634:  total_getworks++;",
          "1636:  if (pool == current_pool())",
          "1637:   opt_work_update = true;",
          "1638: out:",
          "",
          "[Removed Lines]",
          "1629:  free(cb1);",
          "1630:  free(cb2);",
          "1635:  ret = true;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a95e9e57dacaaf06717dd0f526b5caf1929d947e",
      "candidate_info": {
        "commit_hash": "a95e9e57dacaaf06717dd0f526b5caf1929d947e",
        "repo": "ckolivas/cgminer",
        "commit_url": "https://github.com/ckolivas/cgminer/commit/a95e9e57dacaaf06717dd0f526b5caf1929d947e",
        "files": [
          "miner.h",
          "util.c"
        ],
        "message": "Remove unnecessary header length calculation for stratum header binary and only binary convert the correct length of the header.",
        "before_after_code_files": [
          "miner.h||miner.h",
          "util.c||util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util.c||util.c"
          ],
          "candidate": [
            "util.c||util.c"
          ]
        }
      },
      "candidate_diff": {
        "miner.h||miner.h": [
          "File: miner.h -> miner.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1128:  unsigned char **merkle_bin;",
          "1129:  bool clean;",
          "1132:  double diff;",
          "1133: };",
          "",
          "[Removed Lines]",
          "1131:  size_t header_len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "util.c||util.c": [
          "File: util.c -> util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1682:  pool->merkles = merkles;",
          "1683:  if (clean)",
          "1684:   pool->nonce2 = 0;",
          "1689:      strlen(pool->ntime) +",
          "1690:      strlen(pool->nbit) +",
          "1698:   \"%s%s%s%s%s%s%s\",",
          "1699:   pool->bbversion,",
          "1700:   pool->prev_hash,",
          "",
          "[Removed Lines]",
          "1685:  pool->merkle_offset = strlen(pool->bbversion) +",
          "1686:          strlen(pool->prev_hash);",
          "1687:  pool->swork.header_len = pool->merkle_offset +",
          "1693:  pool->merkle_offset /= 2;",
          "1694:  pool->swork.header_len = pool->swork.header_len * 2 + 1;",
          "1695:  align_len(&pool->swork.header_len);",
          "1696:  header = alloca(pool->swork.header_len);",
          "1697:  snprintf(header, pool->swork.header_len,",
          "",
          "[Added Lines]",
          "1685:  pool->merkle_offset = 36;",
          "1686: #if 0",
          "1687:  header_len =    strlen(pool->bbversion) +",
          "1688:      strlen(pool->prev_hash);",
          "1694: #endif",
          "1695:  snprintf(header, 225,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1703:   pool->nbit,",
          "1705:   workpadding);",
          "1707:  if (unlikely(!ret)) {",
          "1708:   applog(LOG_ERR, \"Failed to convert header to header_bin in parse_notify\");",
          "1709:   goto out_unlock;",
          "",
          "[Removed Lines]",
          "1706:  ret = hex2bin(pool->header_bin, header, 128);",
          "",
          "[Added Lines]",
          "1704:  ret = hex2bin(pool->header_bin, header, 112);",
          "",
          "---------------"
        ]
      }
    }
  ]
}