{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6813350966beba60f4ede1a4e25372fae926ca3d",
      "candidate_info": {
        "commit_hash": "6813350966beba60f4ede1a4e25372fae926ca3d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6813350966beba60f4ede1a4e25372fae926ca3d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/corrupt2.test",
          "test/corruptD.test",
          "test/corruptK.test"
        ],
        "message": "Fix test cases.  Avoid unnecessary tests for MemPage.nFree less than zero.\n\nFossilOrigin-Name: 480a5090befdc29eaeb6f0b22831c980d6ee92438d9b2e766de68b037ded38b8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "test/corrupt2.test||test/corrupt2.test",
          "test/corruptD.test||test/corruptD.test",
          "test/corruptK.test||test/corruptK.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7499f74351415e601eb48eff6b6fccd3a78d137f5ea9cd7cac46b904772966de",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7225:   assert( pPage->nOverflow==1 );",
          "",
          "[Removed Lines]",
          "7228:   if( pPage->nFree<0 ){",
          "7229:     rc = btreeComputeFreeSpace(pPage);",
          "7230:     if( rc ) return rc;",
          "7231:   }",
          "7232:   if( pParent->nFree<0 ){",
          "7233:     rc = btreeComputeFreeSpace(pParent);",
          "7234:     if( rc ) return rc;",
          "7235:   }",
          "",
          "[Added Lines]",
          "7228:   assert( pPage->nFree>=0 );",
          "7229:   assert( pParent->nFree>=0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7511:   if( !aOvflSpace ){",
          "7512:     return SQLITE_NOMEM_BKPT;",
          "7513:   }",
          "",
          "[Removed Lines]",
          "7514:   if( pParent->nFree<0 ){",
          "7515:     rc = btreeComputeFreeSpace(pParent);",
          "7516:     if( rc ) return rc;",
          "7517:   }",
          "",
          "[Added Lines]",
          "7507:   assert( pParent->nFree>=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8336:       int const iIdx = pCur->aiIdx[iPage-1];",
          "8338:       rc = sqlite3PagerWrite(pParent->pDbPage);",
          "8339:       if( rc==SQLITE_OK ){",
          "8340: #ifndef SQLITE_OMIT_QUICKBALANCE",
          "8341:         if( pPage->intKeyLeaf",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8329:       if( rc==SQLITE_OK && pParent->nFree<0 ){",
          "8330:         rc = btreeComputeFreeSpace(pParent);",
          "8331:       }",
          "",
          "---------------"
        ],
        "test/corrupt2.test||test/corrupt2.test": [
          "File: test/corrupt2.test -> test/corrupt2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:   close $f",
          "97:   sqlite3 db2 corrupt.db",
          "104: do_test corrupt2-1.5 {",
          "105:   db2 close",
          "",
          "[Removed Lines]",
          "98:   catchsql \"",
          "99:     $::presql",
          "100:     SELECT * FROM sqlite_master;",
          "101:   \" db2",
          "102: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "98:   # Note: This test is no longer meaningful due to the deferred computation",
          "99:   # of MemPage.nFree",
          "100:   catchsql {PRAGMA quick_check} db2",
          "101: } {0 {{*** in database main ***",
          "102: Page 1: free space corruption}}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:   close $f",
          "120:   sqlite3 db2 corrupt.db",
          "126: db2 close",
          "128: # Corrupt a database by having 2 indices of the same name:",
          "",
          "[Removed Lines]",
          "121:   catchsql \"",
          "122:     $::presql",
          "123:     SELECT * FROM sqlite_master;",
          "124:   \" db2",
          "125: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "121:   catchsql {PRAGMA quick_check} db2",
          "122: } {0 {{*** in database main ***",
          "123: Page 1: free space corruption}}}",
          "",
          "---------------"
        ],
        "test/corruptD.test||test/corruptD.test": [
          "File: test/corruptD.test -> test/corruptD.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "111: do_test corruptD-1.1.1 {",
          "112:   incr_change_counter",
          "113:   hexio_write test.db [expr 1024+1] FFFF",
          "116: do_test corruptD-1.1.2 {",
          "117:   incr_change_counter",
          "118:   hexio_write test.db [expr 1024+1] [hexio_render_int32 1021]",
          "",
          "[Removed Lines]",
          "114:   catchsql { SELECT * FROM t1 ORDER BY rowid }",
          "115: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "114:   catchsql { PRAGMA quick_check }",
          "115: } {0 {{*** in database main ***",
          "116: Page 2: free space corruption}}}",
          "",
          "---------------"
        ],
        "test/corruptK.test||test/corruptK.test": [
          "File: test/corruptK.test -> test/corruptK.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: do_execsql_test 1.3 {",
          "69:   INSERT INTO t1 VALUES(randomblob(20));",
          "70: }",
          "71: do_catchsql_test 1.4 {",
          "72:   INSERT INTO t1 VALUES(randomblob(90));",
          "73: } {1 {database disk image is malformed}}",
          "75: #-------------------------------------------------------------------------",
          "76: reset_db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72: # This test no longer functions due to the deferred computation of",
          "73: # MemPage.nFree.",
          "74: #",
          "75: if 0 {",
          "79: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83420823af71c148073a042c6a5452fac28c6369",
      "candidate_info": {
        "commit_hash": "83420823af71c148073a042c6a5452fac28c6369",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/83420823af71c148073a042c6a5452fac28c6369",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c",
          "test/walvfs.test"
        ],
        "message": "Fix a use-after-free problem in the test suite. No changes to production code.\n\nFossilOrigin-Name: 0d1055a5da8274a59f35170b1f9469597ce4c5a4c5e851a1b81d3be2ccd32871",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c",
          "test/walvfs.test||test/walvfs.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a0f6d526baecd061a5e2bec5eb698fb5dfb10122ac79c853d7b3f4a48bc9f49b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1391:   Testvfs *p = (Testvfs *)cd;",
          "1392:   if( p->pScript ) Tcl_DecrRefCount(p->pScript);",
          "1393:   sqlite3_vfs_unregister(p->pVfs);",
          "1394:   ckfree((char *)p->pVfs);",
          "1395:   ckfree((char *)p);",
          "1396: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1394:   memset(p->pVfs, 0, sizeof(sqlite3_vfs));",
          "1395:   memset(p, 0, sizeof(Testvfs));",
          "",
          "---------------"
        ],
        "test/walvfs.test||test/walvfs.test": [
          "File: test/walvfs.test -> test/walvfs.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "387:   PRAGMA wal_checkpoint;",
          "388:   SELECT count(*) FROM t1",
          "389: } {0 5 5 21}",
          "390: tvfs2 delete",
          "392: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390: db close",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f88359df642aea1224782bbe409c30bca902550",
      "candidate_info": {
        "commit_hash": "6f88359df642aea1224782bbe409c30bca902550",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6f88359df642aea1224782bbe409c30bca902550",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "src/window.c"
        ],
        "message": "Fix issues with the previous check-in and add more VDBE branch coverage testing macros.\n\nFossilOrigin-Name: b5f72f10f2dfdbee9fe98c63ffb933e841203790746a920b99df14ca5c14127c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/wherecode.c||src/wherecode.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/wherecode.c||src/wherecode.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f24066f8dd847dfb656f26c4a8142e7fb6a412ffe325aea6254cb122cfbb3e1c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2197:         u32 x = pLevel->iLikeRepCntr;",
          "2198:         if( x>0 ){",
          "2199:           skipLikeAddr = sqlite3VdbeAddOp1(v, (x&1)?OP_IfNot:OP_If,(int)(x>>1));",
          "2200:         }",
          "2202: #endif",
          "2203:       }",
          "",
          "[Removed Lines]",
          "2201:         VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2200:           VdbeCoverageIf(v, (x&1)==1);",
          "2201:           VdbeCoverageIf(v, (x&1)==0);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1310:     sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1311:     sqlite3VdbeAddOp3(v, OP_Ge, regString, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1312:     sqlite3VdbeChangeP5(v, SQLITE_AFF_NUMERIC);",
          "1313:   }else{",
          "1314:     sqlite3VdbeAddOp2(v, OP_MustBeInt, reg, sqlite3VdbeCurrentAddr(v)+2);",
          "1315:   }",
          "1321:   sqlite3VdbeAddOp3(v, aOp[eCond], regZero, sqlite3VdbeCurrentAddr(v)+2, reg);",
          "1322:   VdbeCoverageNeverNullIf(v, eCond==0);",
          "1323:   VdbeCoverageNeverNullIf(v, eCond==1);",
          "",
          "[Removed Lines]",
          "1316:   VdbeCoverageIf(v, eCond==0);",
          "1317:   VdbeCoverageIf(v, eCond==1);",
          "1318:   VdbeCoverageIf(v, eCond==2);",
          "1319:   VdbeCoverageIf(v, eCond==3);",
          "1320:   VdbeCoverageIf(v, eCond==4);",
          "",
          "[Added Lines]",
          "1313:     VdbeCoverage(v);",
          "1314:     assert( eCond==3 || eCond==4 );",
          "1315:     VdbeCoverageIf(v, eCond==3);",
          "1316:     VdbeCoverageIf(v, eCond==4);",
          "1319:     VdbeCoverage(v);",
          "1320:     assert( eCond==0 || eCond==1 || eCond==2 );",
          "1321:     VdbeCoverageIf(v, eCond==0);",
          "1322:     VdbeCoverageIf(v, eCond==1);",
          "1323:     VdbeCoverageIf(v, eCond==2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1833:   VdbeCoverage(v);",
          "1834:   sqlite3VdbeAddOp3(v, arith, regVal, reg1, reg1);",
          "1835:   sqlite3VdbeJumpHere(v, addrGe);",
          "1837:   sqlite3VdbeChangeP5(v, SQLITE_NULLEQ);",
          "1843:   sqlite3ReleaseTempReg(pParse, reg1);",
          "1844:   sqlite3ReleaseTempReg(pParse, reg2);",
          "",
          "[Removed Lines]",
          "1836:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1);",
          "1838:   assert( op==OP_Ge || op==OP_Gt || op==OP_Le );",
          "1839:   VdbeCoverageIf(v, op==OP_Ge);",
          "1840:   VdbeCoverageIf(v, op==OP_Gt);",
          "1841:   VdbeCoverageIf(v, op==OP_Le);",
          "",
          "[Added Lines]",
          "1840:   sqlite3VdbeAddOp3(v, op, reg2, lbl, reg1); VdbeCoverage(v);",
          "1842:   assert( op==OP_Ge || op==OP_Gt || op==OP_Lt || op==OP_Le );",
          "1843:   testcase(op==OP_Ge); VdbeCoverageIf(v, op==OP_Ge);",
          "1844:   testcase(op==OP_Lt); VdbeCoverageIf(v, op==OP_Lt);",
          "1845:   testcase(op==OP_Le); VdbeCoverageIf(v, op==OP_Le);",
          "1846:   testcase(op==OP_Gt); VdbeCoverageIf(v, op==OP_Gt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2536:   if( pMWin->eStart==pMWin->eEnd && regStart ){",
          "2537:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2538:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "2539:     VdbeCoverageIf(v, op==OP_Ge);",
          "2540:     VdbeCoverageIf(v, op==OP_Le);",
          "2541:     windowAggFinal(&s, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2544:     VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ccf6e7d0f0cbcd829b13c482aa43c27a59ea335c",
      "candidate_info": {
        "commit_hash": "ccf6e7d0f0cbcd829b13c482aa43c27a59ea335c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ccf6e7d0f0cbcd829b13c482aa43c27a59ea335c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Remove a test from the index build logic which is no longer needed and is in fact unreachable.\n\nFossilOrigin-Name: 9b20ee10ff86c1f79706180310e02b6f78863e02b179062d8966573ae33a252f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 24ef3844692debc2db7b1d427f5dcf4050481a8c7f71c3b516766b819ecab587",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3161: #ifdef SQLITE_ALLOW_SQLITE_MASTER_INDEX",
          "3162:        && sqlite3StrICmp(&pTab->zName[7],\"master\")!=0",
          "3163: #endif",
          "3165:  ){",
          "3166:     sqlite3ErrorMsg(pParse, \"table %s may not be indexed\", pTab->zName);",
          "3167:     goto exit_create_index;",
          "",
          "[Removed Lines]",
          "3164:        && sqlite3StrNICmp(&pTab->zName[7],\"altertab_\",9)!=0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cac1766df5515b4984e001a9aabccbd506f3dda",
      "candidate_info": {
        "commit_hash": "1cac1766df5515b4984e001a9aabccbd506f3dda",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1cac1766df5515b4984e001a9aabccbd506f3dda",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Add further comments to window.c.\n\nFossilOrigin-Name: 900464567b2a5ce0c278a3297e4be1968f609258608aa0fbe2fc67709aa22a4b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f7002f86c780e279c9f8a6268f317586519c059c9de2115ff6f1cad272570c29",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1500: typedef struct WindowCodeArg WindowCodeArg;",
          "1501: typedef struct WindowCsrAndReg WindowCsrAndReg;",
          "1502: struct WindowCsrAndReg {",
          "1505: };",
          "1507: struct WindowCodeArg {",
          "1516:   WindowCsrAndReg start;",
          "1517:   WindowCsrAndReg current;",
          "",
          "[Removed Lines]",
          "1503:   int csr;",
          "1504:   int reg;",
          "1508:   Parse *pParse;",
          "1509:   Window *pMWin;",
          "1510:   Vdbe *pVdbe;",
          "1511:   int regGosub;",
          "1512:   int addrGosub;",
          "1513:   int regArg;",
          "1514:   int eDelete;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}