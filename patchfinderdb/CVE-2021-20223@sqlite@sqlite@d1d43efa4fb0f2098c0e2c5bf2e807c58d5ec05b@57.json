{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "04cd60e18cc6bae970197d5ec799903bea16412b",
      "candidate_info": {
        "commit_hash": "04cd60e18cc6bae970197d5ec799903bea16412b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/04cd60e18cc6bae970197d5ec799903bea16412b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Remove a (harmless) redundant variable from the CLI implementation.\n\nFossilOrigin-Name: 3f7bbb840de0a9b1ca89288805cb151aea6fcb82efda9ba39f51abf1b17c070b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5ce34a955bb36d77edc9951cb7ac2ef9c876d7d3ff5852af682f558e248f428c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7586:     char **azName = 0;",
          "7587:     int nName = 0;",
          "7588:     sqlite3_stmt *pStmt;",
          "7590:     int i;",
          "7591:     open_db(p, 0);",
          "7592:     rc = sqlite3_prepare_v2(p->db, \"PRAGMA database_list\", -1, &pStmt, 0);",
          "",
          "[Removed Lines]",
          "7589:     int rc;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02a95eb9bb6b03e078a8e5a3597ca37190869e79",
      "candidate_info": {
        "commit_hash": "02a95eb9bb6b03e078a8e5a3597ca37190869e79",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/02a95eb9bb6b03e078a8e5a3597ca37190869e79",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/vdbeaux.c",
          "src/vdbesort.c"
        ],
        "message": "Faster decoding of 32-bit variable-length integers in cases were we do not need to know the number of bytes in the encoding.\n\nFossilOrigin-Name: 59a31b16b54a0068c81ee65bc2fa905c2c826e98da3a7ffd8c3ea860a2827b4a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbesort.c||src/vdbesort.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 41454499a2b63c5fe6fae2d2085773a5f7d869250dcbe669929d20c961211f70",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4427: #define getVarint32(A,B)  \\",
          "4428:   (u8)((*(A)<(u8)0x80)?((B)=(u32)*(A)),1:sqlite3GetVarint32((A),(u32 *)&(B)))",
          "4429: #define putVarint32(A,B)  \\",
          "4430:   (u8)(((u32)(B)<(u32)0x80)?(*(A)=(unsigned char)(B)),1:\\",
          "4431:   sqlite3PutVarint((A),(B)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4429: #define getVarint32NR(A,B) \\",
          "4430:   B=(u32)*(A);if(B>=0x80)sqlite3GetVarint32((A),(u32*)&(B))",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4505:     else if( pRhs->flags & MEM_Str ){",
          "4507:       testcase( serial_type==12 );",
          "4508:       if( serial_type<12 ){",
          "4509:         rc = -1;",
          "",
          "[Removed Lines]",
          "4506:       getVarint32(&aKey1[idx1], serial_type);",
          "",
          "[Added Lines]",
          "4506:       getVarint32NR(&aKey1[idx1], serial_type);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4538:     else if( pRhs->flags & MEM_Blob ){",
          "4539:       assert( (pRhs->flags & MEM_Zero)==0 || pRhs->n==0 );",
          "4541:       testcase( serial_type==12 );",
          "4542:       if( serial_type<12 || (serial_type & 0x01) ){",
          "4543:         rc = -1;",
          "",
          "[Removed Lines]",
          "4540:       getVarint32(&aKey1[idx1], serial_type);",
          "",
          "[Added Lines]",
          "4540:       getVarint32NR(&aKey1[idx1], serial_type);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4856:   }",
          "4860:   testcase( szHdr==3 );",
          "4861:   testcase( szHdr==m.n );",
          "4862:   testcase( szHdr>0x7fffffff );",
          "",
          "[Removed Lines]",
          "4859:   (void)getVarint32((u8*)m.z, szHdr);",
          "",
          "[Added Lines]",
          "4859:   getVarint32NR((u8*)m.z, szHdr);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4871:   testcase( typeRowid==1 );",
          "4872:   testcase( typeRowid==2 );",
          "4873:   testcase( typeRowid==3 );",
          "",
          "[Removed Lines]",
          "4870:   (void)getVarint32((u8*)&m.z[szHdr-1], typeRowid);",
          "",
          "[Added Lines]",
          "4870:   getVarint32NR((u8*)&m.z[szHdr-1], typeRowid);",
          "",
          "---------------"
        ],
        "src/vdbesort.c||src/vdbesort.c": [
          "File: src/vdbesort.c -> src/vdbesort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "815:   int n2;",
          "816:   int res;",
          "820:   res = memcmp(v1, v2, (MIN(n1, n2) - 13)/2);",
          "821:   if( res==0 ){",
          "822:     res = n1 - n2;",
          "",
          "[Removed Lines]",
          "818:   getVarint32(&p1[1], n1);",
          "819:   getVarint32(&p2[1], n2);",
          "",
          "[Added Lines]",
          "818:   getVarint32NR(&p1[1], n1);",
          "819:   getVarint32NR(&p2[1], n2);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1774:   assert( pCsr->eCurType==CURTYPE_SORTER );",
          "1775:   pSorter = pCsr->uc.pSorter;",
          "1777:   if( t>0 && t<10 && t!=7 ){",
          "1778:     pSorter->typeMask &= SORTER_TYPE_INTEGER;",
          "1779:   }else if( t>10 && (t & 0x01) ){",
          "",
          "[Removed Lines]",
          "1776:   getVarint32((const u8*)&pVal->z[1], t);",
          "",
          "[Added Lines]",
          "1776:   getVarint32NR((const u8*)&pVal->z[1], t);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cf014f6cbd2452abb29b3bef2b3b4e63e59c09f8",
      "candidate_info": {
        "commit_hash": "cf014f6cbd2452abb29b3bef2b3b4e63e59c09f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cf014f6cbd2452abb29b3bef2b3b4e63e59c09f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/global.c",
          "src/main.c",
          "src/malloc.c",
          "src/sqliteInt.h",
          "src/status.c"
        ],
        "message": "Refactor names.  Use \"small\" instead of \"mini\" to describe the smaller of the two lookaside memory allocation sizes.\n\nFossilOrigin-Name: 88d244983854cdc1a369c5df09ae00f1098784db768ba4e17b963d187dcb1009",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/global.c||src/global.c",
          "src/main.c||src/main.c",
          "src/malloc.c||src/malloc.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/status.c||src/status.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 39d55579376906f212271ce9b2d367e3ad029fb173f22c7253312b467970208a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199: #ifndef SQLITE_DEFAULT_LOOKASIDE",
          "202: # else",
          "",
          "[Removed Lines]",
          "200: # ifdef SQLITE_OMIT_MINI_LOOKASIDE",
          "",
          "[Added Lines]",
          "200: # ifdef SQLITE_OMIT_TWOSIZE_LOOKASIDE",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "714:   }else{",
          "715:     pStart = pBuf;",
          "716:   }",
          "724:   }else",
          "726:   if( sz>0 ){",
          "727:     nBig = szAlloc/sz;",
          "728:     nSm = 0;",
          "",
          "[Removed Lines]",
          "717: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "718:   if( sz>=MINI_SZ*3 ){",
          "719:     nBig = szAlloc/(3*MINI_SZ+sz);",
          "720:     nSm = (szAlloc - sz*nBig)/MINI_SZ;",
          "721:   }else if( sz>=MINI_SZ*2 ){",
          "722:     nBig = szAlloc/(MINI_SZ+sz);",
          "723:     nSm = (szAlloc - sz*nBig)/MINI_SZ;",
          "",
          "[Added Lines]",
          "717: #ifndef SQLITE_OMIT_TWOSIZE_LOOKASIDE",
          "718:   if( sz>=LOOKASIDE_SMALL*3 ){",
          "719:     nBig = szAlloc/(3*LOOKASIDE_SMALL+sz);",
          "720:     nSm = (szAlloc - sz*nBig)/LOOKASIDE_SMALL;",
          "721:   }else if( sz>=LOOKASIDE_SMALL*2 ){",
          "722:     nBig = szAlloc/(LOOKASIDE_SMALL+sz);",
          "723:     nSm = (szAlloc - sz*nBig)/LOOKASIDE_SMALL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "744:       db->lookaside.pInit = p;",
          "745:       p = (LookasideSlot*)&((u8*)p)[sz];",
          "746:     }",
          "750:     db->lookaside.pMiddle = p;",
          "751:     for(i=0; i<nSm; i++){",
          "755:     }",
          "757:     assert( ((uptr)p)<=szAlloc + (uptr)pStart );",
          "758:     db->lookaside.pEnd = p;",
          "759:     db->lookaside.bDisable = 0;",
          "",
          "[Removed Lines]",
          "747: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "748:     db->lookaside.pMiniInit = 0;",
          "749:     db->lookaside.pMiniFree = 0;",
          "752:       p->pNext = db->lookaside.pMiniInit;",
          "753:       db->lookaside.pMiniInit = p;",
          "754:       p = (LookasideSlot*)&((u8*)p)[MINI_SZ];",
          "",
          "[Added Lines]",
          "747: #ifndef SQLITE_OMIT_TWOSIZE_LOOKASIDE",
          "748:     db->lookaside.pSmallInit = 0;",
          "749:     db->lookaside.pSmallFree = 0;",
          "752:       p->pNext = db->lookaside.pSmallInit;",
          "753:       db->lookaside.pSmallInit = p;",
          "754:       p = (LookasideSlot*)&((u8*)p)[LOOKASIDE_SMALL];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "761:     db->lookaside.nSlot = nBig+nSm;",
          "762:   }else{",
          "763:     db->lookaside.pStart = db;",
          "767:     db->lookaside.pMiddle = db;",
          "769:     db->lookaside.pEnd = db;",
          "770:     db->lookaside.bDisable = 1;",
          "771:     db->lookaside.sz = 0;",
          "",
          "[Removed Lines]",
          "764: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "765:     db->lookaside.pMiniInit = 0;",
          "766:     db->lookaside.pMiniFree = 0;",
          "",
          "[Added Lines]",
          "764: #ifndef SQLITE_OMIT_TWOSIZE_LOOKASIDE",
          "765:     db->lookaside.pSmallInit = 0;",
          "766:     db->lookaside.pSmallFree = 0;",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "333:   return sqlite3GlobalConfig.m.xSize(p);",
          "334: }",
          "335: static int lookasideMallocSize(sqlite3 *db, void *p){",
          "338: #else",
          "339:   return db->lookaside.szTrue;",
          "340: #endif",
          "",
          "[Removed Lines]",
          "336: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "337:   return p<db->lookaside.pMiddle ? db->lookaside.szTrue : MINI_SZ;",
          "",
          "[Added Lines]",
          "336: #ifndef SQLITE_OMIT_TWOSIZE_LOOKASIDE",
          "337:   return p<db->lookaside.pMiddle ? db->lookaside.szTrue : LOOKASIDE_SMALL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "354: #endif",
          "355:   if( db ){",
          "356:     if( ((uptr)p)<(uptr)(db->lookaside.pEnd) ){",
          "358:       if( ((uptr)p)>=(uptr)(db->lookaside.pMiddle) ){",
          "359:         assert( sqlite3_mutex_held(db->mutex) );",
          "361:       }",
          "362: #endif",
          "363:       if( ((uptr)p)>=(uptr)(db->lookaside.pStart) ){",
          "",
          "[Removed Lines]",
          "357: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "360:         return MINI_SZ;",
          "",
          "[Added Lines]",
          "357: #ifndef SQLITE_OMIT_TWOSIZE_LOOKASIDE",
          "360:         return LOOKASIDE_SMALL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "414:       return;",
          "415:     }",
          "416:     if( ((uptr)p)<(uptr)(db->lookaside.pEnd) ){",
          "418:       if( ((uptr)p)>=(uptr)(db->lookaside.pMiddle) ){",
          "419:         LookasideSlot *pBuf = (LookasideSlot*)p;",
          "420: #ifdef SQLITE_DEBUG",
          "422: #endif",
          "425:         return;",
          "426:       }",
          "428:       if( ((uptr)p)>=(uptr)(db->lookaside.pStart) ){",
          "429:         LookasideSlot *pBuf = (LookasideSlot*)p;",
          "430: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "417: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "423:         pBuf->pNext = db->lookaside.pMiniFree;",
          "424:         db->lookaside.pMiniFree = pBuf;",
          "",
          "[Added Lines]",
          "417: #ifndef SQLITE_OMIT_TWOSIZE_LOOKASIDE",
          "423:         pBuf->pNext = db->lookaside.pSmallFree;",
          "424:         db->lookaside.pSmallFree = pBuf;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "597:     }",
          "598:     return dbMallocRawFinish(db, n);",
          "599:   }",
          "604:       db->lookaside.anStat[0]++;",
          "605:       return (void*)pBuf;",
          "608:       db->lookaside.anStat[0]++;",
          "609:       return (void*)pBuf;",
          "610:     }",
          "",
          "[Removed Lines]",
          "600: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "601:   if( n<=MINI_SZ ){",
          "602:     if( (pBuf = db->lookaside.pMiniFree)!=0 ){",
          "603:       db->lookaside.pMiniFree = pBuf->pNext;",
          "606:     }else if( (pBuf = db->lookaside.pMiniInit)!=0 ){",
          "607:       db->lookaside.pMiniInit = pBuf->pNext;",
          "",
          "[Added Lines]",
          "600: #ifndef SQLITE_OMIT_TWOSIZE_LOOKASIDE",
          "601:   if( n<=LOOKASIDE_SMALL ){",
          "602:     if( (pBuf = db->lookaside.pSmallFree)!=0 ){",
          "603:       db->lookaside.pSmallFree = pBuf->pNext;",
          "606:     }else if( (pBuf = db->lookaside.pSmallInit)!=0 ){",
          "607:       db->lookaside.pSmallInit = pBuf->pNext;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "644:   if( p==0 ) return sqlite3DbMallocRawNN(db, n);",
          "645:   assert( sqlite3_mutex_held(db->mutex) );",
          "646:   if( ((uptr)p)<(uptr)db->lookaside.pEnd ){",
          "648:     if( ((uptr)p)>=(uptr)db->lookaside.pMiddle ){",
          "650:     }else",
          "651: #endif",
          "652:     if( ((uptr)p)>=(uptr)db->lookaside.pStart ){",
          "",
          "[Removed Lines]",
          "647: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "649:       if( n<=MINI_SZ ) return p;",
          "",
          "[Added Lines]",
          "647: #ifndef SQLITE_OMIT_TWOSIZE_LOOKASIDE",
          "649:       if( n<=LOOKASIDE_SMALL ) return p;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1332:   void *pMiddle;          /* First byte past end of full-size buffers and",
          "1337: };",
          "",
          "[Removed Lines]",
          "1329: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "",
          "[Added Lines]",
          "1329: #ifndef SQLITE_OMIT_TWOSIZE_LOOKASIDE",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1343: #define EnableLookaside   db->lookaside.bDisable--;\\",
          "1344:    db->lookaside.sz=db->lookaside.bDisable?0:db->lookaside.szTrue",
          "1349: #else",
          "1351: #endif",
          "",
          "[Removed Lines]",
          "1347: #ifdef SQLITE_OMIT_MINI_LOOKASIDE",
          "1348: #  define MINI_SZ           0",
          "1350: #  define MINI_SZ         128",
          "",
          "[Added Lines]",
          "1347: #ifdef SQLITE_OMIT_TWOSIZE_LOOKASIDE",
          "1348: #  define LOOKASIDE_SMALL           0",
          "1350: #  define LOOKASIDE_SMALL         128",
          "",
          "---------------"
        ],
        "src/status.c||src/status.c": [
          "File: src/status.c -> src/status.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "188: int sqlite3LookasideUsed(sqlite3 *db, int *pHighwater){",
          "189:   u32 nInit = countLookasideSlots(db->lookaside.pInit);",
          "190:   u32 nFree = countLookasideSlots(db->lookaside.pFree);",
          "195:   if( pHighwater ) *pHighwater = db->lookaside.nSlot - nInit;",
          "196:   return db->lookaside.nSlot - (nInit+nFree);",
          "197: }",
          "",
          "[Removed Lines]",
          "191: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "192:   nInit += countLookasideSlots(db->lookaside.pMiniInit);",
          "193:   nFree += countLookasideSlots(db->lookaside.pMiniFree);",
          "",
          "[Added Lines]",
          "191: #ifndef SQLITE_OMIT_TWOSIZE_LOOKASIDE",
          "192:   nInit += countLookasideSlots(db->lookaside.pSmallInit);",
          "193:   nFree += countLookasideSlots(db->lookaside.pSmallFree);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "224:           db->lookaside.pInit = db->lookaside.pFree;",
          "225:           db->lookaside.pFree = 0;",
          "226:         }",
          "229:         if( p ){",
          "230:           while( p->pNext ) p = p->pNext;",
          "234:         }",
          "235: #endif",
          "236:       }",
          "",
          "[Removed Lines]",
          "227: #ifndef SQLITE_OMIT_MINI_LOOKASIDE",
          "228:         p = db->lookaside.pMiniFree;",
          "231:           p->pNext = db->lookaside.pMiniInit;",
          "232:           db->lookaside.pMiniInit = db->lookaside.pMiniFree;",
          "233:           db->lookaside.pMiniFree = 0;",
          "",
          "[Added Lines]",
          "227: #ifndef SQLITE_OMIT_TWOSIZE_LOOKASIDE",
          "228:         p = db->lookaside.pSmallFree;",
          "231:           p->pNext = db->lookaside.pSmallInit;",
          "232:           db->lookaside.pSmallInit = db->lookaside.pSmallFree;",
          "233:           db->lookaside.pSmallFree = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f72981f2d94bc9c3a17a7fa5abf821d49bad6aa0",
      "candidate_info": {
        "commit_hash": "f72981f2d94bc9c3a17a7fa5abf821d49bad6aa0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f72981f2d94bc9c3a17a7fa5abf821d49bad6aa0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c"
        ],
        "message": "Add a missing VdbeCoverage() macro.\n\nFossilOrigin-Name: 77a55c394d2c313a5710229bee9262457dcfc6620e6500f9f526c5f6acf87cef",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2100b2c8f339e9778723fa0c91e479bab8675cf6fbea1664b6af49f40db6d27b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1230:         j1 = sqlite3VdbeAddOp1(v, OP_IsNull, regTemp); VdbeCoverage(v);",
          "1231:         j2 = sqlite3VdbeAddOp1(v, OP_If, regTemp); VdbeCoverage(v);",
          "1232:         j3 = sqlite3VdbeAddOp4Int(v, OP_SeekGT, iIdxCur, 0, regPrev, 1);",
          "1233:         sqlite3VdbeJumpHere(v, j1);",
          "1234:         sqlite3VdbeAddOp2(v, OP_Next, iIdxCur, addrNextRow); VdbeCoverage(v);",
          "1235:         sqlite3VdbeJumpHere(v, j2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1233:         VdbeCoverage(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b44fec68a53b88612d1d0954eecaa638674764a4",
      "candidate_info": {
        "commit_hash": "b44fec68a53b88612d1d0954eecaa638674764a4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b44fec68a53b88612d1d0954eecaa638674764a4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix a minor performance regression from check-in [401c9d30e06191d9]\n\nFossilOrigin-Name: 76f54ee86777cbf530654323c953388ef64d0608516722d2522be6c859fa1382",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ddb10f0374e66886d0681937b14cf0b4f100f03d3955b45b6c508dc6d9e36976",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2052:         sqlite3VdbeMemStringify(pIn1, encoding, 1);",
          "2053:         testcase( (flags1&MEM_Dyn) != (pIn1->flags&MEM_Dyn) );",
          "2054:         flags1 = (pIn1->flags & ~MEM_TypeMask) | (flags1 & MEM_TypeMask);",
          "2055:       }",
          "2060:         testcase( pIn3->flags & MEM_Int );",
          "2061:         testcase( pIn3->flags & MEM_Real );",
          "2062:         testcase( pIn3->flags & MEM_IntReal );",
          "",
          "[Removed Lines]",
          "2056:       if( (flags3 & MEM_Str)==0",
          "2057:        && (flags3&(MEM_Int|MEM_Real|MEM_IntReal))!=0",
          "2058:        && pIn1!=pIn3",
          "2059:       ){",
          "",
          "[Added Lines]",
          "2055:         if( pIn1==pIn3 ) flags3 = flags1 | MEM_Str;",
          "2057:       if( (flags3 & MEM_Str)==0 && (flags3&(MEM_Int|MEM_Real|MEM_IntReal))!=0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2089:   }",
          "2094:   assert( (pIn3->flags & MEM_Dyn) == (flags3 & MEM_Dyn) );",
          "2095:   pIn3->flags = flags3;",
          "2097:   if( pOp->p5 & SQLITE_STOREP2 ){",
          "2098:     pOut = &aMem[pOp->p2];",
          "",
          "[Removed Lines]",
          "2092:   assert( (pIn1->flags & MEM_Dyn) == (flags1 & MEM_Dyn) );",
          "2093:   pIn1->flags = flags1;",
          "",
          "[Added Lines]",
          "2092:   assert( (pIn1->flags & MEM_Dyn) == (flags1 & MEM_Dyn) );",
          "2093:   pIn1->flags = flags1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}