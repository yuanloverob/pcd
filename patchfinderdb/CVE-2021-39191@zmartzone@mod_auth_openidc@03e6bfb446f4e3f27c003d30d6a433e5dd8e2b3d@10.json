{
  "cve_id": "CVE-2021-39191",
  "cve_desc": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In versions prior to 2.4.9.4, the 3rd-party init SSO functionality of mod_auth_openidc was reported to be vulnerable to an open redirect attack by supplying a crafted URL in the `target_link_uri` parameter. A patch in version 2.4.9.4 made it so that the `OIDCRedirectURLsAllowed` setting must be applied to the `target_link_uri` parameter. There are no known workarounds aside from upgrading to a patched version.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
  "patch_info": {
    "commit_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "files": [
      "AUTHORS",
      "ChangeLog",
      "auth_openidc.conf",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "apply OIDCRedirectURLsAllowed setting to target_link_uri\n\ncloses #672; thanks @Meheni\nrelease 2.4.9.4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "auth_openidc.conf||auth_openidc.conf",
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "auth_openidc.conf||auth_openidc.conf": [
      "File: auth_openidc.conf -> auth_openidc.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "918: #OIDCStateInputHeaders [none|user-agent|x-forwarded-for|both]",
      "920: # Define one or more regular expressions that specify URLs (or domains) allowed for post logout and",
      "923: #   OIDCRedirectURLsAllowed ^https://www.example.com ^https://(\\w+).example.org ^https://example.net/app",
      "924: # or:",
      "925: #   OIDCRedirectURLsAllowed ^https://www.example.com/logout$ ^https://www.example.com/app/return_to$",
      "",
      "[Removed Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, and the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, e.g.:",
      "",
      "[Added Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, and the \"target_link_uri\" parameter in",
      "923: # 3rd-party initiated logins, e.g.:",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.3],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.4],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2457:  return TRUE;",
      "2458: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2460: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2462: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2463:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2464:   char **err_desc) {",
      "2465:  apr_uri_t uri;",
      "2466:  const char *c_host = NULL;",
      "2467:  apr_hash_index_t *hi = NULL;",
      "2468:  size_t i = 0;",
      "2469:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2472:  for (i = 0; i < strlen(url); i++)",
      "2473:   if (url[i] == '\\\\')",
      "2474:    url[i] = '/';",
      "2476:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2479:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2480:   return FALSE;",
      "2481:  }",
      "2483:  if (c->redirect_urls_allowed != NULL) {",
      "2484:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2485:     apr_hash_next(hi)) {",
      "2486:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2487:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2488:      NULL, err_str) == TRUE)",
      "2489:     break;",
      "2490:   }",
      "2491:   if (hi == NULL) {",
      "2494:      apr_psprintf(r->pool,",
      "2495:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2496:        url);",
      "2497:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2498:    return FALSE;",
      "2499:   }",
      "2500:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2501:   c_host = oidc_get_current_url_host(r);",
      "2502:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2503:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2506:      apr_psprintf(r->pool,",
      "2507:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2508:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2509:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2510:    return FALSE;",
      "2511:   }",
      "2512:  }",
      "2514:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "2517:     apr_psprintf(r->pool,",
      "2518:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "2519:       url);",
      "2520:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2521:   return FALSE;",
      "2522:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "2525:     \"No hostname was parsed and starting with '//': %s\", url);",
      "2526:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2527:   return FALSE;",
      "2528:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "2531:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "2532:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2533:   return FALSE;",
      "2534:  }",
      "2537:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "2540:     apr_psprintf(r->pool,",
      "2541:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "2542:       url);",
      "2543:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2544:   return FALSE;",
      "2545:  }",
      "2547:  return TRUE;",
      "2548: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2469:  oidc_provider_t *provider = NULL;",
      "2471:  oidc_util_get_request_parameter(r, OIDC_DISC_OP_PARAM, &issuer);",
      "2472:  oidc_util_get_request_parameter(r, OIDC_DISC_USER_PARAM, &user);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2560:  char *error_str = NULL;",
      "2561:  char *error_description = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2519:     HTTP_UNAUTHORIZED);",
      "2520:  }",
      "2523:  if (c->metadata_dir == NULL) {",
      "2524:   if ((oidc_provider_static_config(r, c, &provider) == TRUE)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2615:  if (oidc_validate_redirect_url(r, c, target_link_uri, TRUE, &error_str,",
      "2616:    &error_description) == FALSE) {",
      "2617:   return oidc_util_html_send_error(r, c->error_template, error_str,",
      "2618:     error_description,",
      "2619:     HTTP_UNAUTHORIZED);",
      "2620:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2947:  return rc;",
      "2948: }",
      "",
      "[Removed Lines]",
      "2950: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2952: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2953:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2954:   char **err_desc) {",
      "2955:  apr_uri_t uri;",
      "2956:  const char *c_host = NULL;",
      "2957:  apr_hash_index_t *hi = NULL;",
      "2958:  size_t i = 0;",
      "2959:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2962:  for (i = 0; i < strlen(url); i++)",
      "2963:   if (url[i] == '\\\\')",
      "2964:    url[i] = '/';",
      "2966:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2969:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2970:   return FALSE;",
      "2971:  }",
      "2973:  if (c->redirect_urls_allowed != NULL) {",
      "2974:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2975:     apr_hash_next(hi)) {",
      "2976:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2977:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2978:      NULL, err_str) == TRUE)",
      "2979:     break;",
      "2980:   }",
      "2981:   if (hi == NULL) {",
      "2984:      apr_psprintf(r->pool,",
      "2985:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2986:        url);",
      "2987:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2988:    return FALSE;",
      "2989:   }",
      "2990:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2991:   c_host = oidc_get_current_url_host(r);",
      "2992:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2993:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2996:      apr_psprintf(r->pool,",
      "2997:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2998:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2999:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3000:    return FALSE;",
      "3001:   }",
      "3002:  }",
      "3004:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "3007:     apr_psprintf(r->pool,",
      "3008:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "3009:       url);",
      "3010:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3011:   return FALSE;",
      "3012:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "3015:     \"No hostname was parsed and starting with '//': %s\", url);",
      "3016:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3017:   return FALSE;",
      "3018:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "3021:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "3022:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3023:   return FALSE;",
      "3024:  }",
      "3027:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "3030:     apr_psprintf(r->pool,",
      "3031:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "3032:       url);",
      "3033:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3034:   return FALSE;",
      "3035:  }",
      "3037:  return TRUE;",
      "3038: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e66be94aa0ede7f74e82880555ca96d8f12eee9a",
      "candidate_info": {
        "commit_hash": "e66be94aa0ede7f74e82880555ca96d8f12eee9a",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/e66be94aa0ede7f74e82880555ca96d8f12eee9a",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h"
        ],
        "message": "make X-Frame-Options header on OIDC front-channel logout configurable\n\nthrough OIDCLogoutXFrameOptions; closes #464; bump to 2.4.10.1rc3\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "944: # When not defined, the default is to match the hostname in the URL redirected to against",
          "945: # the hostname in the current request.",
          "946: #OIDCRedirectURLsAllowed [<regexp>]+",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "948: # Defines the value of the X-Frame-Options header returned on OIDC front-channel logout requests.",
          "949: # See also https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options.",
          "950: # For example:",
          "951: #   OIDCLogoutXFrameOptions: sameorigin",
          "952: # or:",
          "953: #   OIDCLogoutXFrameOptions: allow-from https://provider.example.com/",
          "954: # When not defined the default is \"DENY\".",
          "955: #OIDCLogoutXFrameOptions <value>",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10.1rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10.1rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "263: #define OIDCRedirectURLsAllowed                \"OIDCRedirectURLsAllowed\"",
          "264: #define OIDCStateCookiePrefix                  \"OIDCStateCookiePrefix\"",
          "265: #define OIDCCABundlePath                       \"OIDCCABundlePath\"",
          "267: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "266: #define OIDCLogoutXFrameOptions                \"OIDCLogoutXFrameOptions\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1436:  c->ca_bundle_path = NULL;",
          "1438:  return c;",
          "1439: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1439:  c->logout_x_frame_options = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1927:    add->ca_bundle_path != NULL ?",
          "1928:      add->ca_bundle_path : base->ca_bundle_path;",
          "1930:  return c;",
          "1931: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1933:  c->logout_x_frame_options =",
          "1934:    add->logout_x_frame_options != NULL ?",
          "1935:      add->logout_x_frame_options : base->logout_x_frame_options;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3421:     RSRC_CONF,",
          "3422:     \"Sets the path to the CA bundle to be used by cURL.\"),",
          "3424:   { NULL }",
          "3425: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3431:   AP_INIT_TAKE1(OIDCLogoutXFrameOptions,",
          "3432:     ap_set_string_slot,",
          "3433:     (void *) APR_OFFSETOF(oidc_cfg, logout_x_frame_options),",
          "3434:     RSRC_CONF,",
          "3435:     \"Sets the value of the X-Frame-Options header on front channel logout.\"),",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2812:   oidc_util_hdr_err_out_add(r, OIDC_HTTP_HDR_PRAGMA, \"no-cache\");",
          "2813:   oidc_util_hdr_err_out_add(r, OIDC_HTTP_HDR_P3P, \"CAO PSA OUR\");",
          "2814:   oidc_util_hdr_err_out_add(r, OIDC_HTTP_HDR_EXPIRES, \"0\");",
          "2818:   const char *accept = oidc_util_hdr_in_accept_get(r);",
          "",
          "[Removed Lines]",
          "2815:   oidc_util_hdr_err_out_add(r, OIDC_HTTP_HDR_X_FRAME_OPTIONS, \"DENY\");",
          "",
          "[Added Lines]",
          "2815:   oidc_util_hdr_err_out_add(r, OIDC_HTTP_HDR_X_FRAME_OPTIONS,",
          "2816:     c->logout_x_frame_options ? c->logout_x_frame_options : \"DENY\");",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "447:  apr_hash_t *redirect_urls_allowed;",
          "449:  char *ca_bundle_path;",
          "450: } oidc_cfg;",
          "452: int oidc_check_user_id(request_rec *r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451:  char *logout_x_frame_options;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee891b1665be34b624df11a103a910d74869256c",
      "candidate_info": {
        "commit_hash": "ee891b1665be34b624df11a103a910d74869256c",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/ee891b1665be34b624df11a103a910d74869256c",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/util.c",
          "test/test.c"
        ],
        "message": "add check for Sec-Fetch-Mode header != \"navigate\" value\n\nto auto-detect XML HTTP Requests; bump to 2.4.9.5rc7\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/util.c||src/util.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "817: # Since verson 2.4.4 a boolean Apache expression as the second parameter to specify which requests",
          "818: # need to match to return the configured value in the first parameter to override the default \"auth\".",
          "819: # See also: https://httpd.apache.org/docs/2.4/expr.html.",
          "821: #   OIDCUnAuthAction 401 \"%{HTTP_USER_AGENT} =~ /curl/\"",
          "823: #   OIDCUnAuthAction 401 \"%{HTTP:X-Requested-With} == 'XMLHttpRequest'\"",
          "825: #   OIDCUnAuthAction 401 \"%{HTTP_ACCEPT} !~ m#text/html#\"",
          "828: # just as a more complex example, it equals the default XML request detection algorithm",
          "829: #   OIDCUnAuthAction auth true",
          "831: # Note that actually *any* expression value in \"OIDCUnAuthAction auth <expr>\" will *always* render \"auth\"",
          "832: # (even when set to \"false\"...) because of the default, so using an <expr> value (other than \"true\") only",
          "833: # makes sense in combination with one of the values other than \"auth\".",
          "",
          "[Removed Lines]",
          "820: # E.g.:",
          "822: # to return 401 for cURL based user agents and \"auth\" for any other browsers/user agents.",
          "824: # to effectively override the default XML request detection algorithm by ignoring the Accept headers",
          "826: # to return 401 for all user agents that do not send an Accept header that includes a \"text/html\" value",
          "827: #   OIDCUnAuthAction 401 \"%{HTTP:X-Requested-With} == 'XMLHttpRequest' || ( ( %{HTTP_ACCEPT} !~ m#text/html# ) && ( %{HTTP_ACCEPT} !~ m#application/xhtml\\+xml# ) && ( %{HTTP_ACCEPT} !~ m#\\*/\\*# ) )\"",
          "830: # To disable auto-detection of XML HTTP request altogether and uncondtionally return \"auth\" for all clients.",
          "",
          "[Added Lines]",
          "820: # E.g to return 401 for cURL based user agents and \"auth\" for any other browsers/user agents:",
          "822: # to effectively override the default XML request detection algorithm by ignoring the Accept headers:",
          "824: # to return 401 for all user agents that do not send an Accept header that includes a \"text/html\" value:",
          "827: #   OIDCUnAuthAction 401 \"%{HTTP:X-Requested-With} == 'XMLHttpRequest' || %{HTTP:Sec-Fetch-Mode} != 'navigate' || ( ( %{HTTP_ACCEPT} !~ m#text/html# ) && ( %{HTTP_ACCEPT} !~ m#application/xhtml\\+xml# ) && ( %{HTTP_ACCEPT} !~ m#\\*/\\*# ) )\"",
          "828: # To disable auto-detection of XML HTTP request altogether and uncondtionally return \"auth\" for all clients:",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.5rc6],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.5rc7],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "859:  if ((oidc_util_hdr_in_x_requested_with_get(r) != NULL)",
          "860:    && (apr_strnatcasecmp(oidc_util_hdr_in_x_requested_with_get(r),",
          "861:      OIDC_HTTP_HDR_VAL_XML_HTTP_REQUEST) == 0))",
          "862:   return TRUE;",
          "864:  if ((oidc_util_hdr_in_accept_contains(r, OIDC_CONTENT_TYPE_TEXT_HTML)",
          "865:    == FALSE) && (oidc_util_hdr_in_accept_contains(r,",
          "866:      OIDC_CONTENT_TYPE_APP_XHTML_XML) == FALSE)",
          "",
          "[Removed Lines]",
          "857: static apr_byte_t oidc_is_xml_http_request(request_rec *r) {",
          "",
          "[Added Lines]",
          "857: apr_byte_t oidc_is_xml_http_request(request_rec *r) {",
          "864:  if ((oidc_util_hdr_in_sec_fetch_mode_get(r) != NULL)",
          "865:    && (apr_strnatcasecmp(oidc_util_hdr_in_sec_fetch_mode_get(r),",
          "866:           OIDC_HTTP_HDR_VAL_NAVIGATE) != 0))",
          "867:   return TRUE;",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "826: #define OIDC_HTTP_HDR_CONTENT_TYPE      \"Content-Type\"",
          "827: #define OIDC_HTTP_HDR_CONTENT_LENGTH     \"Content-Length\"",
          "828: #define OIDC_HTTP_HDR_X_REQUESTED_WITH     \"X-Requested-With\"",
          "829: #define OIDC_HTTP_HDR_ACCEPT       \"Accept\"",
          "830: #define OIDC_HTTP_HDR_AUTHORIZATION      \"Authorization\"",
          "831: #define OIDC_HTTP_HDR_X_FORWARDED_PROTO     \"X-Forwarded-Proto\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "829: #define OIDC_HTTP_HDR_SEC_FETCH_MODE     \"Sec-Fetch-Mode\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "842: #define OIDC_HTTP_HDR_INCLUDE_REFERRED_TOKEN_BINDING_ID \"Include-Referred-Token-Binding-ID\"",
          "844: #define OIDC_HTTP_HDR_VAL_XML_HTTP_REQUEST    \"XMLHttpRequest\"",
          "846: void oidc_util_hdr_in_set(const request_rec *r, const char *name, const char *value);",
          "847: const char *oidc_util_hdr_in_cookie_get(const request_rec *r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "846: #define OIDC_HTTP_HDR_VAL_NAVIGATE      \"navigate\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "851: const char *oidc_util_hdr_in_content_type_get(const request_rec *r);",
          "852: const char *oidc_util_hdr_in_content_length_get(const request_rec *r);",
          "853: const char *oidc_util_hdr_in_x_requested_with_get(const request_rec *r);",
          "854: const char *oidc_util_hdr_in_accept_get(const request_rec *r);",
          "855: const char *oidc_util_hdr_in_authorization_get(const request_rec *r);",
          "856: const char *oidc_util_hdr_in_x_forwarded_proto_get(const request_rec *r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "856: const char* oidc_util_hdr_in_sec_fetch_mode_get(const request_rec *r);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "923: void oidc_session_set_issuer(request_rec *r, oidc_session_t *z, const char *issuer);",
          "924: const char * oidc_session_get_issuer(request_rec *r, oidc_session_t *z);",
          "925: void oidc_session_set_client_id(request_rec *r, oidc_session_t *z, const char *client_id);",
          "927: char *oidc_parse_base64(apr_pool_t *pool, const char *input, char **output, int *output_len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "929: apr_byte_t oidc_is_xml_http_request(request_rec *r);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2623:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_X_REQUESTED_WITH);",
          "2624: }",
          "2626: const char* oidc_util_hdr_in_accept_get(const request_rec *r) {",
          "2627:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_ACCEPT);",
          "2628: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2626: const char* oidc_util_hdr_in_sec_fetch_mode_get(const request_rec *r) {",
          "2627:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_SEC_FETCH_MODE);",
          "2628: }",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1520:  return 0;",
          "1521: }",
          "1523: static char * all_tests(apr_pool_t *pool, request_rec *r) {",
          "1524:  char *message;",
          "1525:  TST_RUN(test_public_key_parse, pool);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1523: static char* test_is_xml_http_request(request_rec *r) {",
          "1524:  apr_byte_t rc = FALSE;",
          "1526:  apr_table_set(r->headers_in, \"Accept\", \"*/*\");",
          "1527:  rc = oidc_is_xml_http_request(r);",
          "1528:  TST_ASSERT(\"test oidc_is_xml_http_request (1)\", rc == FALSE);",
          "1530:  apr_table_set(r->headers_in, \"X-Requested-With\", \"XMLHttpRequest\");",
          "1531:  rc = oidc_is_xml_http_request(r);",
          "1532:  TST_ASSERT(\"test oidc_is_xml_http_request (2)\", rc == TRUE);",
          "1533:  apr_table_unset(r->headers_in, \"X-Requested-With\");",
          "1535:  apr_table_set(r->headers_in, \"Sec-Fetch-Mode\", \"navigate\");",
          "1536:  rc = oidc_is_xml_http_request(r);",
          "1537:  TST_ASSERT(\"test oidc_is_xml_http_request (3)\", rc == FALSE);",
          "1538:  apr_table_unset(r->headers_in, \"Sec-Fetch-Mode\");",
          "1540:  apr_table_set(r->headers_in, \"Sec-Fetch-Mode\", \"cors\");",
          "1541:  rc = oidc_is_xml_http_request(r);",
          "1542:  TST_ASSERT(\"test oidc_is_xml_http_request (4)\", rc == TRUE);",
          "1543:  apr_table_unset(r->headers_in, \"Sec-Fetch-Mode\");",
          "1545:  return 0;",
          "1546: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1556:  TST_RUN(test_decode_json_object, r);",
          "1558:  TST_RUN(test_remote_user, r);",
          "1560: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "1561:  TST_RUN(test_authz_worker, r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1584:  TST_RUN(test_is_xml_http_request, r);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91a28225a3ad39483d086926f9b46a53aa569d89",
      "candidate_info": {
        "commit_hash": "91a28225a3ad39483d086926f9b46a53aa569d89",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/91a28225a3ad39483d086926f9b46a53aa569d89",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "test/stub.c"
        ],
        "message": "backport ap_get_exec_line for \"exec:\" option in OIDCCryptoPassphrase\n\nbump to 2.4.9.5rc6\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "test/stub.c||test/stub.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: # - encryption of the (temporary) state cookie",
          "18: # - encryption of cache entries, that may include the session cookie, see: OIDCCacheEncrypt and OIDCSessionType",
          "19: # Note that an encrypted cache mechanism can be shared between servers if they use the same OIDCCryptoPassphrase",
          "21: # If the value begins with exec: the resulting command will be executed and the",
          "22: # first line returned to standard output by the program will be used as the password.",
          "23: # The command may be absolute or relative to the web server root.",
          "",
          "[Removed Lines]",
          "20: # Only for Apache >= 2.4.x:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.5rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.5rc6],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:  return ap_set_string_slot(cmd, cfg, full_path);",
          "416: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418: #if MODULE_MAGIC_NUMBER_MAJOR < 20100714",
          "419: static char * ap_get_exec_line(apr_pool_t *p,",
          "420:                                     const char *cmd,",
          "421:                                     const char * const * argv)",
          "422: {",
          "423:     char buf[MAX_STRING_LEN];",
          "424:     apr_procattr_t *procattr;",
          "425:     apr_proc_t *proc;",
          "426:     apr_file_t *fp;",
          "427:     apr_size_t nbytes = 1;",
          "428:     char c;",
          "429:     int k;",
          "431:     if (apr_procattr_create(&procattr, p) != APR_SUCCESS)",
          "432:         return NULL;",
          "433:     if (apr_procattr_io_set(procattr, APR_FULL_BLOCK, APR_FULL_BLOCK,",
          "434:                             APR_FULL_BLOCK) != APR_SUCCESS)",
          "435:         return NULL;",
          "436:     if (apr_procattr_dir_set(procattr,",
          "437:                              ap_make_dirstr_parent(p, cmd)) != APR_SUCCESS)",
          "438:         return NULL;",
          "439:     if (apr_procattr_cmdtype_set(procattr, APR_PROGRAM) != APR_SUCCESS)",
          "440:         return NULL;",
          "441:     proc = apr_pcalloc(p, sizeof(apr_proc_t));",
          "442:     if (apr_proc_create(proc, cmd, argv, NULL, procattr, p) != APR_SUCCESS)",
          "443:         return NULL;",
          "444:     fp = proc->out;",
          "446:     if (fp == NULL)",
          "447:         return NULL;",
          "449:     for (k = 0; apr_file_read(fp, &c, &nbytes) == APR_SUCCESS",
          "450:                 && nbytes == 1 && (k < MAX_STRING_LEN-1)     ; ) {",
          "451:         if (c == '\\n' || c == '\\r')",
          "452:             break;",
          "453:         buf[k++] = c;",
          "454:     }",
          "455:     buf[k] = '\\0';",
          "456:     apr_file_close(fp);",
          "458:     return apr_pstrndup(p, buf, k);",
          "459: }",
          "460: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "423:  oidc_cfg *cfg = (oidc_cfg*) ap_get_module_config(cmd->server->module_config,",
          "424:    &auth_openidc_module);",
          "425:  const char *passphrase = NULL;",
          "427:  int arglen = strlen(arg);",
          "428:  char **argv = NULL;",
          "429:  char *result = NULL;",
          "",
          "[Removed Lines]",
          "426: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "448:  } else {",
          "449:   passphrase = arg;",
          "450:  }",
          "455:  return ap_set_string_slot(cmd, cfg, passphrase);",
          "456: }",
          "",
          "[Removed Lines]",
          "451: #else",
          "452:  passphrase = arg;",
          "453: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/stub.c||test/stub.c": [
          "File: test/stub.c -> test/stub.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "305:    return NULL;",
          "306:   }",
          "308: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "309:   AP_DECLARE(int) ap_expr_exec(request_rec *r, const ap_expr_info_t *expr,",
          "310:     const char **err) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308:   AP_DECLARE(char *) ap_make_dirstr_parent(apr_pool_t *p, const char *s) {",
          "309:    return NULL;",
          "310:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a5e2a908b6913adf6694226b76398642d6da2ab",
      "candidate_info": {
        "commit_hash": "1a5e2a908b6913adf6694226b76398642d6da2ab",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/1a5e2a908b6913adf6694226b76398642d6da2ab",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.h",
          "src/parse.c",
          "src/util.c",
          "test/test.c"
        ],
        "message": "support Forwarded header in addition to X-Forwarded-*\n\nsee #853; thanks @studersi; bump to 2.4.11.3rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/parse.c||src/parse.c",
          "src/util.c||src/util.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "auth_openidc.conf||auth_openidc.conf",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "960: # When not defined the default is \"DENY\".",
          "961: #OIDCLogoutXFrameOptions <value>",
          "964: # in front of mod_auth_openidc. Must be one or more of:",
          "965: #  X-Forwarded-Host",
          "966: #  X-Forwarded-Port",
          "967: #  X-Forwarded-Proto",
          "968: # When not defined, such headers will be ignored.",
          "969: #OIDCXForwardedHeaders <header>+",
          "",
          "[Removed Lines]",
          "963: # Define the X-Forwarded-* headers that will be taken into account as set by a reverse proxy",
          "",
          "[Added Lines]",
          "963: # Define the X-Forwarded-* or Forwarded headers that will be taken into account as set by a reverse proxy",
          "968: #  Forwarded",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.2],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11.3rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1294:  oidc_check_x_forwarded_hdr(r, x_forwarded_headers, OIDC_HDR_X_FORWARDED_HOST, OIDC_HTTP_HDR_X_FORWARDED_HOST, oidc_util_hdr_in_x_forwarded_host_get);",
          "1295:  oidc_check_x_forwarded_hdr(r, x_forwarded_headers, OIDC_HDR_X_FORWARDED_PORT, OIDC_HTTP_HDR_X_FORWARDED_PORT, oidc_util_hdr_in_x_forwarded_port_get);",
          "1296:  oidc_check_x_forwarded_hdr(r, x_forwarded_headers, OIDC_HDR_X_FORWARDED_PROTO, OIDC_HTTP_HDR_X_FORWARDED_PROTO, oidc_util_hdr_in_x_forwarded_proto_get);",
          "1297: }",
          "1299: static const char* oidc_set_redirect_urls_allowed(cmd_parms *cmd, void *m,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1297:  oidc_check_x_forwarded_hdr(r, x_forwarded_headers, OIDC_HDR_FORWARDED, OIDC_HTTP_HDR_FORWARDED, oidc_util_hdr_in_forwarded_get);",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "253: #define OIDC_HDR_X_FORWARDED_HOST   1",
          "254: #define OIDC_HDR_X_FORWARDED_PORT   2",
          "255: #define OIDC_HDR_X_FORWARDED_PROTO  4",
          "257: typedef apr_byte_t (*oidc_proto_pkce_state)(request_rec *r, char **state);",
          "258: typedef apr_byte_t (*oidc_proto_pkce_challenge)(request_rec *r, const char *state, char **code_challenge);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256: #define OIDC_HDR_FORWARDED          8",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "843: #define OIDC_HTTP_HDR_X_FORWARDED_PROTO                 \"X-Forwarded-Proto\"",
          "844: #define OIDC_HTTP_HDR_X_FORWARDED_PORT                  \"X-Forwarded-Port\"",
          "845: #define OIDC_HTTP_HDR_X_FORWARDED_HOST                  \"X-Forwarded-Host\"",
          "846: #define OIDC_HTTP_HDR_HOST                              \"Host\"",
          "847: #define OIDC_HTTP_HDR_LOCATION                          \"Location\"",
          "848: #define OIDC_HTTP_HDR_CACHE_CONTROL                     \"Cache-Control\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "847: #define OIDC_HTTP_HDR_FORWARDED                         \"Forwarded\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "872: const char *oidc_util_hdr_in_x_forwarded_proto_get(const request_rec *r);",
          "873: const char *oidc_util_hdr_in_x_forwarded_port_get(const request_rec *r);",
          "874: const char *oidc_util_hdr_in_x_forwarded_host_get(const request_rec *r);",
          "875: const char *oidc_util_hdr_in_host_get(const request_rec *r);",
          "876: void oidc_util_hdr_out_location_set(const request_rec *r, const char *value);",
          "877: const char *oidc_util_hdr_out_location_get(const request_rec *r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "877: const char* oidc_util_hdr_in_forwarded_get(const request_rec *r);",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1362:    OIDC_HTTP_HDR_X_FORWARDED_HOST,",
          "1363:    OIDC_HTTP_HDR_X_FORWARDED_PORT,",
          "1364:    OIDC_HTTP_HDR_X_FORWARDED_PROTO,",
          "1365:    NULL };",
          "1366:  const char *rv = oidc_valid_string_option(pool, arg, options);",
          "1367:  if (rv != NULL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1365:    OIDC_HTTP_HDR_FORWARDED,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1374:  } else if (apr_strnatcmp(arg, OIDC_HTTP_HDR_X_FORWARDED_PROTO) == 0) {",
          "1376:  }",
          "1378:  return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1377:  } else if (apr_strnatcmp(arg, OIDC_HTTP_HDR_FORWARDED) == 0) {",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "434:     return output;",
          "435: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "437: static const char* oidc_util_hdr_forwarded_get(const request_rec *r, const char *elem) {",
          "438:  const char *value = NULL;",
          "439:  char *ptr = NULL;",
          "440:  const char *item = apr_psprintf(r->pool, \"%s=\", elem);",
          "441:  value = oidc_util_hdr_in_forwarded_get(r);",
          "442:  value = strcasestr(value, item);",
          "443:  if (value) {",
          "444:   value += strlen(item);",
          "445:   ptr = strstr(value, \";\");",
          "446:   if (ptr)",
          "448:   ptr = strstr(value, \" \");",
          "449:   if (ptr)",
          "451:  }",
          "452:  return apr_pstrdup(r->pool, value);",
          "453: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "444:  const char *scheme_str = NULL;",
          "447:   scheme_str = oidc_util_hdr_in_x_forwarded_proto_get(r);",
          "",
          "[Removed Lines]",
          "446:  if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_PROTO)",
          "",
          "[Added Lines]",
          "463:  if ((x_forwarded_headers & OIDC_HDR_FORWARDED))",
          "464:   scheme_str = oidc_util_hdr_forwarded_get(r, \"proto\");",
          "465:  else if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_PROTO)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "505:   return port_str;",
          "513:   host_hdr = oidc_util_hdr_in_x_forwarded_host_get(r);",
          "515:  if (host_hdr) {",
          "",
          "[Removed Lines]",
          "512:  if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_HOST)",
          "",
          "[Added Lines]",
          "531:  if (x_forwarded_headers & OIDC_HDR_FORWARDED)",
          "532:   host_hdr = oidc_util_hdr_forwarded_get(r, \"host\");",
          "533:  else if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_HOST)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "540:   if (oidc_util_hdr_in_x_forwarded_proto_get(r))",
          "541:    return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567:  if (x_forwarded_headers & OIDC_HDR_FORWARDED)",
          "568:   if (oidc_util_hdr_forwarded_get(r, \"proto\"))",
          "569:     return NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "562:  char *p = NULL;",
          "563:  char *i = NULL;",
          "566:   host_str = oidc_util_hdr_in_x_forwarded_host_get(r);",
          "568:  if (host_str == NULL)",
          "",
          "[Removed Lines]",
          "565:  if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_HOST)",
          "",
          "[Added Lines]",
          "593:  if (x_forwarded_headers & OIDC_HDR_FORWARDED)",
          "594:   host_str = oidc_util_hdr_forwarded_get(r, \"host\");",
          "595:  else if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_HOST)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2629:    OIDC_HTTP_HDR_X_FORWARDED_HOST, OIDC_STR_COMMA OIDC_STR_SPACE);",
          "2630: }",
          "2632: const char* oidc_util_hdr_in_host_get(const request_rec *r) {",
          "2633:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_HOST);",
          "2634: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2662: const char* oidc_util_hdr_in_forwarded_get(const request_rec *r) {",
          "2663:  return oidc_util_hdr_in_get_left_most_only(r,",
          "2664:    OIDC_HTTP_HDR_FORWARDED, OIDC_STR_COMMA);",
          "2665: }",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1313:  TST_ASSERT_STR(\"test_current_url (10)\", url,",
          "1314:    \"http://[fd04:41b1:1170:28:16b0:446b:9fb7:7118]/private/?foo=bar&param1=value1\");",
          "1316:  apr_table_set(r->headers_in, \"Host\", \"www.example.com\");",
          "1318:  return 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1316:  apr_table_unset(r->headers_in, \"X-Forwarded-Proto\");",
          "1317:  apr_table_unset(r->headers_in, \"Host\");",
          "1319:  apr_table_set(r->headers_in, \"Forwarded\", \"host=www.outer.com\");",
          "1320:  url = oidc_get_current_url(r, OIDC_HDR_FORWARDED);",
          "1321:  TST_ASSERT_STR(\"test_current_url (11)\", url,",
          "1322:    \"https://www.outer.com/private/?foo=bar&param1=value1\");",
          "1324:  apr_table_set(r->headers_in, \"Forwarded\", \"proto=http\");",
          "1325:  url = oidc_get_current_url(r, OIDC_HDR_FORWARDED);",
          "1326:  TST_ASSERT_STR(\"test_current_url (12)\", url,",
          "1327:    \"http://www.example.com/private/?foo=bar&param1=value1\");",
          "1329:  apr_table_set(r->headers_in, \"Forwarded\", \"host=www.outer.com:8443\");",
          "1330:  url = oidc_get_current_url(r, OIDC_HDR_FORWARDED);",
          "1331:  TST_ASSERT_STR(\"test_current_url (13)\", url,",
          "1332:    \"https://www.outer.com:8443/private/?foo=bar&param1=value1\");",
          "1334:  apr_table_set(r->headers_in, \"Forwarded\", \"proto=http; host=www.outer.com:8080\");",
          "1335:  url = oidc_get_current_url(r, OIDC_HDR_FORWARDED);",
          "1336:  TST_ASSERT_STR(\"test_current_url (14)\", url,",
          "1337:    \"http://www.outer.com:8080/private/?foo=bar&param1=value1\");",
          "1339:  apr_table_set(r->headers_in, \"Forwarded\", \"host=www.outer.com:8080; proto=http\");",
          "1340:  url = oidc_get_current_url(r, OIDC_HDR_FORWARDED);",
          "1341:  TST_ASSERT_STR(\"test_current_url (15)\", url,",
          "1342:    \"http://www.outer.com:8080/private/?foo=bar&param1=value1\");",
          "1344:  apr_table_unset(r->headers_in, \"Forwarded\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9111e56fa83fa05503b4b5e919b72a5641dd0942",
      "candidate_info": {
        "commit_hash": "9111e56fa83fa05503b4b5e919b72a5641dd0942",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/9111e56fa83fa05503b4b5e919b72a5641dd0942",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.c"
        ],
        "message": "fix content processing for info and JWKs handler; closes #497\n\nbump to 2.4.5rc5\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.5rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.5rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2693: void oidc_register_hooks(apr_pool_t *pool) {",
          "2694:  ap_hook_post_config(oidc_post_config, NULL, NULL, APR_HOOK_LAST);",
          "2695:  ap_hook_child_init(oidc_child_init, NULL, NULL, APR_HOOK_MIDDLE);",
          "2697:  ap_hook_insert_filter(oidc_filter_in_insert_filter, NULL, NULL,",
          "2698:    APR_HOOK_MIDDLE);",
          "2699:  ap_register_input_filter(oidcFilterName, oidc_filter_in_filter, NULL,",
          "",
          "[Removed Lines]",
          "2696:  ap_hook_handler(oidc_content_handler, NULL, NULL, APR_HOOK_MIDDLE);",
          "",
          "[Added Lines]",
          "2696:  ap_hook_handler(oidc_content_handler, NULL, NULL, APR_HOOK_FIRST);",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "935:  oidc_util_set_cookie(r, cookieName, cookieValue, -1,",
          "936:    OIDC_COOKIE_SAMESITE_LAX(c));",
          "939: }",
          "",
          "[Removed Lines]",
          "938:  return HTTP_OK;",
          "",
          "[Added Lines]",
          "938:  return OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2455:  int rc = oidc_authorization_request_set_cookie(r, c, state, proto_state);",
          "2457:   oidc_proto_state_destroy(proto_state);",
          "2458:   return rc;",
          "2459:  }",
          "",
          "[Removed Lines]",
          "2456:  if (rc != HTTP_OK) {",
          "",
          "[Added Lines]",
          "2456:  if (rc != OK) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3754: int oidc_handle_redirect_uri_request(request_rec *r, oidc_cfg *c,",
          "3755:   oidc_session_t *session) {",
          "3760:  if (oidc_proto_is_redirect_authorization_response(r, c)) {",
          "",
          "[Removed Lines]",
          "3758:  apr_byte_t needs_save = FALSE;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3788:  } else if (oidc_util_request_has_parameter(r,",
          "3789:    OIDC_REDIRECT_URI_REQUEST_JWKS)) {",
          "3794:  } else if (oidc_util_request_has_parameter(r,",
          "3795:    OIDC_REDIRECT_URI_REQUEST_SESSION)) {",
          "",
          "[Removed Lines]",
          "3792:   return oidc_handle_jwks(r, c);",
          "",
          "[Added Lines]",
          "3792:   r->user = \"\";",
          "3793:   return OK;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3821:   if (session->remote_user == NULL)",
          "3822:    return HTTP_UNAUTHORIZED;",
          "3831:  } else if ((r->args == NULL) || (apr_strnatcmp(r->args, \"\") == 0)) {",
          "",
          "[Removed Lines]",
          "3825:   int rc = oidc_handle_existing_session(r, c, session, &needs_save);",
          "3826:   if (rc != OK)",
          "3827:    return rc;",
          "3829:   return oidc_handle_info_request(r, c, session, needs_save);",
          "",
          "[Added Lines]",
          "3830:   r->user = \"\";",
          "3831:   return OK;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4270: int oidc_content_handler(request_rec *r) {",
          "4273:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "4274:    &auth_openidc_module);",
          "4277: }",
          "4279: extern const command_rec oidc_config_cmds[];",
          "",
          "[Removed Lines]",
          "4271:  if (oidc_enabled(r) == FALSE)",
          "4272:   return DECLINED;",
          "4275:  return oidc_util_request_matches_url(r, oidc_get_redirect_uri(r, c)) ?",
          "4276:    OK : DECLINED;",
          "",
          "[Added Lines]",
          "4275:  int rc = DECLINED;",
          "4277:  apr_byte_t needs_save = FALSE;",
          "4278:  oidc_session_t *session = NULL;",
          "4280:  if (oidc_enabled(r)",
          "4281:    && oidc_util_request_matches_url(r, oidc_get_redirect_uri(r, c))) {",
          "4283:   if (oidc_util_request_has_parameter(r,",
          "4284:     OIDC_REDIRECT_URI_REQUEST_INFO)) {",
          "4286:    oidc_session_load(r, &session);",
          "4288:    rc = oidc_handle_existing_session(r, c, session, &needs_save);",
          "4289:    if (rc == OK)",
          "4291:     rc = oidc_handle_info_request(r, c, session, needs_save);",
          "4294:    oidc_session_free(r, session);",
          "4296:   } else if (oidc_util_request_has_parameter(r,",
          "4297:     OIDC_REDIRECT_URI_REQUEST_JWKS)) {",
          "4300:    rc = oidc_handle_jwks(r, c);",
          "4301:   }",
          "4303:  }",
          "4305:  return rc;",
          "",
          "---------------"
        ]
      }
    }
  ]
}