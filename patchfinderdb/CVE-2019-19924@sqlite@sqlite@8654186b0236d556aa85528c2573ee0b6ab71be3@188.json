{
  "cve_id": "CVE-2019-19924",
  "cve_desc": "SQLite 3.30.1 mishandles certain parser-tree rewriting, related to expr.c, vdbeaux.c, and window.c. This is caused by incorrect sqlite3WindowRewrite() error handling.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
  "patch_info": {
    "commit_hash": "8654186b0236d556aa85528c2573ee0b6ab71be3",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8654186b0236d556aa85528c2573ee0b6ab71be3",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/vdbeaux.c",
      "src/window.c"
    ],
    "message": "When an error occurs while rewriting the parser tree for window functions in the sqlite3WindowRewrite() routine, make sure that pParse->nErr is set, and make sure that this shuts down any subsequent code generation that might depend on the transformations that were implemented.  This fixes a problem discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: e2bddcd4c55ba3cbe0130332679ff4b048630d0ced9a8899982edb5a3569ba7f",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/vdbeaux.c||src/vdbeaux.c",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 4417c5bf0aabb34ed174f01afd981c924ae965a42128719d8d6735536631d12f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "376:   int addr;",
      "377:   CollSeq *p4;",
      "379:   if( isCommuted ){",
      "380:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
      "381:   }else{",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "379:   if( pParse->nErr ) return 0;",
      "",
      "---------------"
    ],
    "src/vdbeaux.c||src/vdbeaux.c": [
      "File: src/vdbeaux.c -> src/vdbeaux.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1304: static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){",
      "1305:   assert( p->nOp>0 || p->aOp==0 );",
      "1307:   if( p->nOp ){",
      "1308:     assert( p->aOp );",
      "1309:     sqlite3DbFree(p->db, p->aOp[p->nOp-1].zComment);",
      "",
      "[Removed Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed );",
      "",
      "[Added Lines]",
      "1306:   assert( p->aOp==0 || p->aOp[p->nOp-1].zComment==0 || p->db->mallocFailed",
      "1307:           || p->pParse->nErr>0 );",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "935:     pTab = sqlite3DbMallocZero(db, sizeof(Table));",
      "936:     if( pTab==0 ){",
      "938:     }",
      "940:     p->pSrc = 0;",
      "",
      "[Removed Lines]",
      "937:       return SQLITE_NOMEM;",
      "",
      "[Added Lines]",
      "937:       return sqlite3ErrorToParser(db, SQLITE_NOMEM);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1039:     sqlite3DbFree(db, pTab);",
      "1040:   }",
      "1042:   return rc;",
      "1043: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1042:   if( rc && pParse->nErr==0 ){",
      "1043:     assert( pParse->db->mallocFailed );",
      "1044:     return sqlite3ErrorToParser(pParse->db, SQLITE_NOMEM);",
      "1045:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "51690f26bcaab815650286c16362b36d39977cea",
      "candidate_info": {
        "commit_hash": "51690f26bcaab815650286c16362b36d39977cea",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/51690f26bcaab815650286c16362b36d39977cea",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix to check-in [5d9a369301a65f32] so that it compiles without SQLITE_DEBUG.\n\nFossilOrigin-Name: fefe2d046725254367f9f82a8c8cb137e8b75dbbf4bc48debf0649479ff2f0c2",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1239:     }",
          "1240:   }else if( rc==SQLITE_ERROR ){",
          "1242:   }",
          "1244:   return rc;",
          "",
          "[Removed Lines]",
          "1241:     rc = sqlite3Fts3Corrupt();",
          "",
          "[Added Lines]",
          "1241:     rc = FTS_CORRUPT_VTAB;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4dbd398d640852d4a696d68c72ee039968023d402a8053b5e6b4ef1d75e982a8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb077f3c50ee657fac6545567f323ba970776d1e",
      "candidate_info": {
        "commit_hash": "fb077f3c50ee657fac6545567f323ba970776d1e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fb077f3c50ee657fac6545567f323ba970776d1e",
        "files": [
          "ext/rtree/rtree.c",
          "ext/rtree/rtreefuzz001.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Prevent an infinite loop in rtree that can result from a corrupt shadow table.\n\nFossilOrigin-Name: 085667180b230587abb82abfdd14da8859e23620994d5cf152236b64c756dd04",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtreefuzz001.test||ext/rtree/rtreefuzz001.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: #ifdef SQLITE_DEBUG",
          "133: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187: # define RTREE_ZERO 0.0",
          "188: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: #ifdef SQLITE_DEBUG",
          "197: # define RTREE_IS_CORRUPT(X) ((X)->bCorrupt = 1)",
          "198: #else",
          "199: # define RTREE_IS_CORRUPT(X)",
          "200: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "675:   }else if( pRtree->iNodeSize==sqlite3_blob_bytes(pRtree->pNodeBlob) ){",
          "676:     pNode = (RtreeNode *)sqlite3_malloc(sizeof(RtreeNode)+pRtree->iNodeSize);",
          "677:     if( !pNode ){",
          "",
          "[Removed Lines]",
          "674:     if( rc==SQLITE_ERROR ) rc = SQLITE_CORRUPT_VTAB;",
          "",
          "[Added Lines]",
          "686:     if( rc==SQLITE_ERROR ){",
          "687:       rc = SQLITE_CORRUPT_VTAB;",
          "688:       RTREE_IS_CORRUPT(pRtree);",
          "689:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "700:     pRtree->iDepth = readInt16(pNode->zData);",
          "701:     if( pRtree->iDepth>RTREE_MAX_DEPTH ){",
          "702:       rc = SQLITE_CORRUPT_VTAB;",
          "703:     }",
          "704:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718:       RTREE_IS_CORRUPT(pRtree);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "710:   if( pNode && rc==SQLITE_OK ){",
          "711:     if( NCELL(pNode)>((pRtree->iNodeSize-4)/pRtree->nBytesPerCell) ){",
          "712:       rc = SQLITE_CORRUPT_VTAB;",
          "713:     }",
          "714:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "729:       RTREE_IS_CORRUPT(pRtree);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "718:       nodeHashInsert(pRtree, pNode);",
          "719:     }else{",
          "720:       rc = SQLITE_CORRUPT_VTAB;",
          "721:     }",
          "723:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738:       RTREE_IS_CORRUPT(pRtree);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "943:     pRtree->inWrTrans = 0;",
          "944:     assert( pRtree->nCursor==0 );",
          "945:     nodeBlobReset(pRtree);",
          "947:     sqlite3_finalize(pRtree->pWriteNode);",
          "948:     sqlite3_finalize(pRtree->pDeleteNode);",
          "949:     sqlite3_finalize(pRtree->pReadRowid);",
          "",
          "[Removed Lines]",
          "946:     assert( pRtree->nNodeRef==0 );",
          "",
          "[Added Lines]",
          "964:     assert( pRtree->nNodeRef==0 || pRtree->bCorrupt );",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1275:       return SQLITE_OK;",
          "1276:     }",
          "1277:   }",
          "1278:   return SQLITE_CORRUPT_VTAB;",
          "1279: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1296:   RTREE_IS_CORRUPT(pRtree);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2138: ){",
          "2139:   RtreeNode *p = pNode;",
          "2140:   while( p->pParent ){",
          "2141:     RtreeNode *pParent = p->pParent;",
          "2142:     RtreeCell cell;",
          "2143:     int iCell;",
          "2146:       return SQLITE_CORRUPT_VTAB;",
          "2147:     }",
          "",
          "[Removed Lines]",
          "2145:     if( nodeParentIndex(pRtree, p, &iCell) ){",
          "",
          "[Added Lines]",
          "2159:   int cnt = 0;",
          "2165:     if( (++cnt)>1000 || nodeParentIndex(pRtree, p, &iCell)  ){",
          "2166:       RTREE_IS_CORRUPT(pRtree);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2610:     }",
          "2611:     rc = sqlite3_reset(pRtree->pReadParent);",
          "2612:     if( rc==SQLITE_OK ) rc = rc2;",
          "2614:     pChild = pChild->pParent;",
          "2615:   }",
          "2616:   return rc;",
          "",
          "[Removed Lines]",
          "2613:     if( rc==SQLITE_OK && !pChild->pParent ) rc = SQLITE_CORRUPT_VTAB;",
          "",
          "[Added Lines]",
          "2634:     if( rc==SQLITE_OK && !pChild->pParent ){",
          "2635:       RTREE_IS_CORRUPT(pRtree);",
          "2636:       rc = SQLITE_CORRUPT_VTAB;",
          "2637:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3560:     }else if( pRtree->iNodeSize<(512-64) ){",
          "3561:       rc = SQLITE_CORRUPT_VTAB;",
          "3563:                                pRtree->zName);",
          "3564:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3586:       RTREE_IS_CORRUPT(pRtree);",
          "",
          "---------------"
        ],
        "ext/rtree/rtreefuzz001.test||ext/rtree/rtreefuzz001.test": [
          "File: ext/rtree/rtreefuzz001.test -> ext/rtree/rtreefuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: }",
          "23: database_may_be_corrupt",
          "28: do_test rtreefuzz001-100 {",
          "29:   sqlite3 db {}",
          "30:   db deserialize [decode_hexdb {",
          "",
          "[Removed Lines]",
          "25: # In the following database file, there is 384 bytes of free space",
          "26: # on page 8 that does not appear on the freeblock list.",
          "27: #",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "472:   }",
          "473: } {1 {SQL logic error}}",
          "475: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "472: do_test rtreefuzz001-200 {",
          "473:   sqlite3 db {}",
          "474:   db deserialize [decode_hexdb {",
          "475: .open --hexdb",
          "476: | size 16384 pagesize 4096 filename c3.db",
          "477: | page 1 offset 0",
          "478: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "479: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 04   .....@  ........",
          "480: |     32: 00 00 00 00 01 00 00 00 00 00 00 04 00 00 00 04   ................",
          "481: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "482: |     96: 00 00 00 00 0d 00 00 00 04 0e 9c 00 0f ad 0f 4f   ...............O",
          "483: |    112: 0e fc 0e 9c 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "484: |   3728: 00 00 00 00 00 00 00 00 00 00 00 00 5e 04 07 17   ............^...",
          "485: |   3744: 1f 1f 01 81 0b 74 61 62 6c 65 74 31 5f 70 61 72   .....tablet1_par",
          "486: |   3760: 65 6e 74 74 31 5f 70 61 72 65 6e 74 04 43 52 45   entt1_parent.CRE",
          "487: |   3776: 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 70 61   ATE TABLE \"t1_pa",
          "488: |   3792: 72 65 6e 74 22 28 6e 6f 64 65 6e 6f 20 49 4e 54   rent\"(nodeno INT",
          "489: |   3808: 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59   EGER PRIMARY KEY",
          "490: |   3824: 2c 70 61 72 65 6e 74 6e 6f 64 65 29 51 03 06 17   ,parentnode)Q...",
          "491: |   3840: 1b 1b 01 7b 74 61 62 6c 65 74 31 5f 6e 6f 64 65   ....tablet1_node",
          "492: |   3856: 74 31 5f 6e 6f 64 65 03 43 52 45 41 54 45 20 54   t1_node.CREATE T",
          "493: |   3872: 41 42 4c 45 20 22 74 31 5f 6e 6f 64 65 22 28 6e   ABLE \"t1_node\"(n",
          "494: |   3888: 6f 64 65 6e 6f 20 49 4e 54 45 47 45 52 20 50 52   odeno INTEGER PR",
          "495: |   3904: 49 4d 41 52 59 20 4b 45 59 2c 64 61 74 61 29 5c   IMARY KEY,data)\\",
          "496: |   3920: 02 07 17 1d 1d 01 81 0b 74 61 62 6c 65 74 31 5f   ........tablet1_",
          "497: |   3936: 72 6f 77 69 64 74 31 5f 72 6f 77 69 64 02 43 52   rowidt1_rowid.CR",
          "498: |   3952: 45 41 54 45 20 54 41 42 4c 45 20 22 74 31 5f 72   EATE TABLE \"t1_r",
          "499: |   3968: 6f 77 69 64 22 28 72 6f 77 69 64 20 49 4e 54 45   owid\"(rowid INTE",
          "500: |   3984: 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c   GER PRIMARY KEY,",
          "501: |   4000: 6e 6f 64 65 6e 6f 2c 61 30 2c 61 31 29 51 01 07   nodeno,a0,a1)Q..",
          "502: |   4016: 17 11 11 08 81 0f 74 61 62 6c 65 74 31 74 31 43   ......tablet1t1C",
          "503: |   4032: 52 45 41 54 45 20 56 49 52 54 55 41 4c 20 54 41   REATE VIRTUAL TA",
          "504: |   4048: 42 4c 45 20 74 31 20 55 53 49 4e 47 20 72 74 72   BLE t1 USING rtr",
          "505: |   4064: 65 65 28 69 64 2c 78 30 2c 78 31 2c 79 30 2c 79   ee(id,x0,x1,y0,y",
          "506: |   4080: 31 2c 2b 6c 61 62 65 6c 2c 2b 6f 74 68 65 72 29   1,+label,+other)",
          "507: | page 2 offset 4096",
          "508: |      0: 0d 00 00 00 0e 0e f7 00 0f e8 0f d0 0f b7 0f 9e   ................",
          "509: |     16: 0f 91 0f 81 0f 70 0f 5e 0f 4f 0f 39 0f 29 0f 18   .....p.^.O.9.)..",
          "510: |     32: 0f 06 0e f7 00 00 00 00 00 00 00 00 00 00 00 00   ................",
          "511: |   3824: 00 00 00 00 00 00 00 0d 0e 05 00 09 1d 00 74 6f   ..............to",
          "512: |   3840: 70 20 68 61 6c 66 10 0d 05 00 09 23 00 62 6f 74   p half.....#.bot",
          "513: |   3856: 74 6f 6d 20 68 61 6c 66 0f 0c 05 00 09 21 00 72   tom half.....!.r",
          "514: |   3872: 69 67 68 74 20 68 61 6c 66 0e 0b 05 00 09 1f 00   ight half.......",
          "515: |   3888: 6c 65 66 74 20 68 61 6c 66 14 0a 05 00 09 2b 00   left half.....+.",
          "516: |   3904: 74 68 65 20 77 68 6f 6c 65 20 74 68 69 6e 67 0d   the whole thing.",
          "517: |   3920: 09 05 00 09 1d 00 74 6f 70 20 65 64 67 65 10 08   ......top edge..",
          "518: |   3936: 05 00 09 23 00 62 6f 74 74 6f 6d 20 65 64 67 65   ...#.bottom edge",
          "519: |   3952: 0f 07 05 00 09 21 00 72 69 67 68 74 20 65 64 67   .....!.right edg",
          "520: |   3968: 65 0e 06 05 00 09 1f 00 6c 65 66 74 20 65 64 67   e.......left edg",
          "521: |   3984: 65 0b 05 05 00 09 19 00 63 65 6e 74 65 72 17 04   e.......center..",
          "522: |   4000: 05 00 09 31 00 75 70 70 65 72 2d 72 69 67 68 74   ...1.upper-right",
          "523: |   4016: 20 63 6f 72 6e 65 72 17 03 05 00 09 31 00 6c 6f    corner.....1.lo",
          "524: |   4032: 77 65 72 2d 72 69 67 68 74 27 60 f6 32 6e 65 72   wer-right'`.2ner",
          "525: |   4048: 16 02 05 00 09 2f 00 75 70 70 65 72 2d 6c 65 66   ...../.upper-lef",
          "526: |   4064: 74 20 63 6f 72 6e 65 72 16 01 05 00 09 2f 00 6c   t corner...../.l",
          "527: |   4080: 6f 77 65 72 2d 6c 65 66 74 20 63 6f 72 6e 65 72   ower-left corner",
          "528: | page 3 offset 8192",
          "529: |      0: 0d 00 00 00 02 0b 2d 00 0b 2d 00 00 00 00 00 00   ......-..-......",
          "530: |   2848: 00 00 00 00 00 00 00 00 00 00 00 00 00 89 50 01   ..............P.",
          "531: |   2864: 04 00 93 24 00 00 00 0e 00 00 00 00 00 00 00 01   ...$............",
          "532: |   2880: 00 00 00 00 41 20 00 00 00 00 00 00 41 20 01 00   ....A ......A ..",
          "533: |   2896: 00 00 00 00 00 00 00 02 00 00 00 00 41 00 00 04   ............A...",
          "534: |   2912: 2b 40 00 0c 42 c8 00 00 00 00 00 00 00 00 00 03   +@..B...........",
          "535: |   2928: 42 b4 00 00 42 c8 00 00 00 00 00 00 41 20 00 00   B...B.......A ..",
          "536: |   2944: 00 00 00 00 00 00 00 04 42 b4 00 00 42 c8 00 00   ........B...B...",
          "537: |   2960: 42 b4 00 00 42 c8 00 00 00 00 00 00 00 00 00 05   B...B...........",
          "538: |   2976: 42 20 00 00 42 70 00 00 42 20 00 00 42 70 00 00   B ..Bp..B ..Bp..",
          "539: |   2992: 00 00 00 00 00 00 00 60 00 00 00 04 0a 00 00 00   .......`........",
          "540: |   3008: 00 00 00 42 c8 00 00 00 00 00 00 00 00 00 07 42   ...B...........B",
          "541: |   3024: be 00 00 42 c8 00 00 00 00 00 00 42 c8 00 00 00   ...B.......B....",
          "542: |   3040: 00 00 00 00 00 00 08 00 00 00 00 42 c8 00 00 00   ...........B....",
          "543: |   3056: 00 00 00 40 a0 00 00 00 00 00 00 00 00 00 09 00   ...@............",
          "544: |   3072: 00 00 00 42 c8 00 00 42 be 00 00 42 c8 00 00 00   ...B...B...B....",
          "545: |   3088: 00 00 00 00 00 00 0a 00 00 00 00 42 c8 00 00 00   ...........B....",
          "546: |   3104: 00 00 00 42 c8 00 00 00 00 00 00 00 00 00 0b 00   ...B............",
          "547: |   3120: 00 00 00 42 48 00 00 00 00 00 04 2c 80 00 00 00   ...BH......,....",
          "548: |   3136: 00 00 00 00 00 00 c4 24 c0 00 04 2c 80 00 00 00   .......$...,....",
          "549: |   3152: 00 00 04 2c 80 00 00 00 00 00 00 00 00 00 d0 00   ...,............",
          "550: |   3168: 00 00 04 2c 80 00 00 00 00 00 04 24 80 00 00 00   ...,.......$....",
          "551: |   3184: 00 00 00 00 00 00 e0 00 00 00 04 2c 80 00 04 24   ...........,...$",
          "552: |   3200: c0 00 04 2c 00 00 00 00 00 00 00 00 00 00 00 00   ...,............",
          "553: | page 4 offset 12288",
          "554: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "555: | end c3.db",
          "556:   }]",
          "557:   catchsql {",
          "558:     WITH RECURSIVE",
          "559:       c1(x) AS (VALUES(0) UNION ALL SELECT x+1 FROM c1 WHERE x<99),",
          "560:       c2(y) AS (VALUES(0) UNION ALL SELECT y+1 FROM c2 WHERE y<99)",
          "561:     INSERT INTO t1(id, x0,x1,y0,y1,label)",
          "562:       SELECT 1000+x+y*100, x, x+1, y, y+1, printf('box-%d,%d',x,y) FROM c1, c2;",
          "563:   }",
          "564: } {1 {malformed database schema (?)}}",
          "565: do_test rtreefuzz001-210 {",
          "566:   catchsql {",
          "567:     SELECT rtreecheck('t1');",
          "568:   }",
          "569: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ed8531e57596f0d5911a05a26d5ae61e1eccfaadee49219d7f6e212cac288238",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9b71dbfd4066df5d62fd59c1f5350faca74fcd4",
      "candidate_info": {
        "commit_hash": "b9b71dbfd4066df5d62fd59c1f5350faca74fcd4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b9b71dbfd4066df5d62fd59c1f5350faca74fcd4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a bug preventing .recover from working on databases where the final page of the db is corrupt.\n\nFossilOrigin-Name: 959bbd11e92cc789973daf20dfcb8a6d8dc724dd603b286cbdd59e5d1fdb2909",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a50768314d10d743a0cc013b434b516f0763e0a6c5b79655d8fefde7de53e869",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6373:   int rc = SQLITE_OK;",
          "",
          "[Removed Lines]",
          "6372: static int recoverDatabaseCmd(ShellState *pState){",
          "",
          "[Added Lines]",
          "6372: static int recoverDatabaseCmd(ShellState *pState, int nArg, char **azArg){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6408:     \"WITH pages(i, maxlen) AS (\"",
          "6411:     \"    UNION ALL\"",
          "6412:     \"  SELECT i-1, (\"",
          "6413:     \"    SELECT max(field+1) FROM sqlite_dbdata WHERE pgno=i-1\"",
          "",
          "[Removed Lines]",
          "6409:     \"  SELECT page_count, max(field+1) \"",
          "6410:     \"      FROM pragma_page_count, sqlite_dbdata WHERE pgno=page_count\"",
          "",
          "[Added Lines]",
          "6409:     \"  SELECT page_count, (\"",
          "6410:     \"    SELECT max(field+1) FROM sqlite_dbdata WHERE pgno=page_count\"",
          "6411:     \"  ) FROM pragma_page_count\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6832:   if( c=='r' && strncmp(azArg[0], \"recover\", n)==0 ){",
          "6833:     open_db(p, 0);",
          "6835:   }else",
          "6837:   if( c=='d' && strncmp(azArg[0], \"dump\", n)==0 ){",
          "",
          "[Removed Lines]",
          "6834:     rc = recoverDatabaseCmd(p);",
          "",
          "[Added Lines]",
          "6835:     rc = recoverDatabaseCmd(p, nArg, azArg);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "505ae9def80b7b45e37a454064f1cf23df26bdf1",
      "candidate_info": {
        "commit_hash": "505ae9def80b7b45e37a454064f1cf23df26bdf1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/505ae9def80b7b45e37a454064f1cf23df26bdf1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Add additional VDBE coverage marcros.\n\nFossilOrigin-Name: d3531f5be7d3769689e2cd8bdc9bab5608759de027d44cc123996f32a4a89583",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 63e625c8eb06720eef30573aa562e38c90d228a9cf493f8bb59f09e50f0e3168",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1710:           start_constraints = (nConstraint>1);",
          "1711:           op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "1712:           sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint-1);",
          "1713:         }else{",
          "1714:           op = aStartOp[(start_constraints<<2) + ((!startEq)<<1) + bRev];",
          "1715:           sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1716:         }",
          "1717:       }",
          "1718:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1713:           VdbeCoverage(v);",
          "1714:           VdbeCoverageIf(v, op==OP_Rewind);  testcase( op==OP_Rewind );",
          "1715:           VdbeCoverageIf(v, op==OP_Last);    testcase( op==OP_Last );",
          "1716:           VdbeCoverageIf(v, op==OP_SeekGT);  testcase( op==OP_SeekGT );",
          "1717:           VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1718:           VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1719:           VdbeCoverageIf(v, op==OP_SeekLT);  testcase( op==OP_SeekLT );",
          "1723:           VdbeCoverage(v);",
          "1724:           VdbeCoverageIf(v, op==OP_Rewind);  testcase( op==OP_Rewind );",
          "1725:           VdbeCoverageIf(v, op==OP_Last);    testcase( op==OP_Last );",
          "1726:           VdbeCoverageIf(v, op==OP_SeekGT);  testcase( op==OP_SeekGT );",
          "1727:           VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1728:           VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1729:           VdbeCoverageIf(v, op==OP_SeekLT);  testcase( op==OP_SeekLT );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1762:     if( nConstraint ){",
          "1763:       if( regBignull ){",
          "1764:         sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+3);",
          "1765:       }",
          "1766:       op = aEndOp[bRev*2 + endEq];",
          "1767:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1779:         VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1772:     }",
          "1773:     if( regBignull ){",
          "1774:       sqlite3VdbeAddOp2(v, OP_IfNot, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1775:       if( bStopAtNull ){",
          "1776:         op = aEndOp[bRev*2 + 0];",
          "1777:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1778:       }else{",
          "1779:         op = aEndOp[bRev*2 + endEq];",
          "1780:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint+1);",
          "1781:       }",
          "1782:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1790:       VdbeCoverage(v);",
          "1793:         assert( op==OP_IdxGE || op==OP_IdxLE );",
          "1795:         testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1796:         testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1800:         testcase( op==OP_IdxGT );  VdbeCoverageIf(v, op==OP_IdxGT );",
          "1801:         testcase( op==OP_IdxGE );  VdbeCoverageIf(v, op==OP_IdxGE );",
          "1802:         testcase( op==OP_IdxLT );  VdbeCoverageIf(v, op==OP_IdxLT );",
          "1803:         testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2754c1fba842a72fd783363e28193026dbf3bbf",
      "candidate_info": {
        "commit_hash": "e2754c1fba842a72fd783363e28193026dbf3bbf",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e2754c1fba842a72fd783363e28193026dbf3bbf",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Enforce 80-character line discipline in the CLI.  Minor improvements to the CLI built-in help.\n\nFossilOrigin-Name: 9690013a00d73a8047b25149ded50d20c74b5c62c0725eec50ed8477688e58a0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d7434cae3edc321e2f1f8d340a0e656b1613b736f8400fb271a0e80f59401b9e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1766:   for(pRow = eqp_next_row(p, iEqpId, 0); pRow; pRow = pNext){",
          "1767:     pNext = eqp_next_row(p, iEqpId, pRow);",
          "1768:     z = pRow->zText;",
          "1770:     if( n<(int)sizeof(p->sGraph.zPrefix)-7 ){",
          "1771:       memcpy(&p->sGraph.zPrefix[n], pNext ? \"|  \" : \"   \", 4);",
          "1772:       eqp_render_level(p, pRow->iEqpId);",
          "",
          "[Removed Lines]",
          "1769:     utf8_printf(p->out, \"%s%s%s\\n\", p->sGraph.zPrefix, pNext ? \"|--\" : \"`--\", z);",
          "",
          "[Added Lines]",
          "1769:     utf8_printf(p->out, \"%s%s%s\\n\", p->sGraph.zPrefix,",
          "1770:                 pNext ? \"|--\" : \"`--\", z);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2536:     raw_printf(pArg->out, \"Autoindex Inserts:                   %d\\n\", iCur);",
          "2537:     iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_VM_STEP, bReset);",
          "2538:     raw_printf(pArg->out, \"Virtual Machine Steps:               %d\\n\", iCur);",
          "2540:     raw_printf(pArg->out, \"Reprepare operations:                %d\\n\", iCur);",
          "2541:     iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_RUN, bReset);",
          "2542:     raw_printf(pArg->out, \"Number of times run:                 %d\\n\", iCur);",
          "",
          "[Removed Lines]",
          "2539:     iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_REPREPARE, bReset);",
          "",
          "[Added Lines]",
          "2540:     iCur = sqlite3_stmt_status(pArg->pStmt, SQLITE_STMTSTATUS_REPREPARE,bReset);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3459:   \".archive ...             Manage SQL archives\",",
          "3460:   \"   Each command must have exactly one of the following options:\",",
          "3461:   \"     -c, --create               Create a new archive\",",
          "3464:   \"     -t, --list                 List contents of archive\",",
          "3465:   \"     -x, --extract              Extract files from archive\",",
          "3466:   \"   Optional arguments:\",",
          "3467:   \"     -v, --verbose              Print each filename as it is processed\",",
          "3471:   \"     -n, --dryrun               Show the SQL that would have occurred\",",
          "3472:   \"   Examples:\",",
          "3476:   \"   See also:\",",
          "3477:   \"      http://sqlite.org/cli.html#sqlar_archive_support\",",
          "3478: #endif",
          "",
          "[Removed Lines]",
          "3462:   \"     -u, --update               Add files or update files with changed mtime\",",
          "3463:   \"     -i, --insert               Like -u but always add even if mtime unchanged\",",
          "3468:   \"     -f FILE, --file FILE       Operate on archive FILE (default is current db)\",",
          "3469:   \"     -a FILE, --append FILE     Operate on FILE opened using the apndvfs VFS\",",
          "3470:   \"     -C DIR, --directory DIR    Change to directory DIR to read/extract files\",",
          "3473:   \"     .ar -cf archive.sar foo bar  # Create archive.sar from files foo and bar\",",
          "3474:   \"     .ar -tf archive.sar          # List members of archive.sar\",",
          "3475:   \"     .ar -xvf archive.sar         # Verbosely extract files from archive.sar\",",
          "",
          "[Added Lines]",
          "3463:   \"     -u, --update               Add or update files with changed mtime\",",
          "3464:   \"     -i, --insert               Like -u but always add even if unchanged\",",
          "3469:   \"     -f FILE, --file FILE       Use archive FILE (default is current db)\",",
          "3470:   \"     -a FILE, --append FILE     Open FILE using the apndvfs VFS\",",
          "3471:   \"     -C DIR, --directory DIR    Read/extract files from directory DIR\",",
          "3474:   \"     .ar -cf ARCHIVE foo bar  # Create ARCHIVE from files foo and bar\",",
          "3475:   \"     .ar -tf ARCHIVE          # List members of ARCHIVE\",",
          "3476:   \"     .ar -xvf ARCHIVE         # Verbosely extract files from ARCHIVE\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3481: #endif",
          "3482:   \".backup ?DB? FILE        Backup DB (default \\\"main\\\") to FILE\",",
          "3483:   \"       --append            Use the appendvfs\",",
          "3485:   \".bail on|off             Stop after hitting an error.  Default OFF\",",
          "3486:   \".binary on|off           Turn binary output on or off.  Default OFF\",",
          "3487:   \".cd DIRECTORY            Change the working directory to DIRECTORY\",",
          "",
          "[Removed Lines]",
          "3484:   \"       --async             Write to FILE without a journal and without fsync()\",",
          "",
          "[Added Lines]",
          "3485:   \"       --async             Write to FILE without journal and fsync()\",",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3501:   \"   Other Modes:\",",
          "3502: #ifdef SQLITE_DEBUG",
          "3503:   \"      test                  Show raw EXPLAIN QUERY PLAN output\",",
          "3505: #endif",
          "3506:   \"      trigger               Like \\\"full\\\" but also show trigger bytecode\",",
          "3508:   \".exit ?CODE?             Exit this program with return-code CODE\",",
          "3513:   \".filectrl CMD ...        Run various sqlite3_file_control() operations\",",
          "3514:   \"                           Run \\\".filectrl\\\" with no arguments for details\",",
          "3515:   \".fullschema ?--indent?   Show schema and the content of sqlite_stat tables\",",
          "",
          "[Removed Lines]",
          "3504:   \"      trace                 Like \\\"full\\\" but also enable \\\"PRAGMA vdbe_trace\\\"\",",
          "3507:   \".excel                   Display the output of next command in a spreadsheet\",",
          "3509:   \".expert                  EXPERIMENTAL. Suggest indexes for specified queries\",",
          "",
          "[Added Lines]",
          "3505:   \"      trace                 Like \\\"full\\\" but enable \\\"PRAGMA vdbe_trace\\\"\",",
          "3508:   \".excel                   Display the output of next command in spreadsheet\",",
          "3510:   \".expert                  EXPERIMENTAL. Suggest indexes for queries\",",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3556:   \"        --append        Use appendvfs to append database to the end of FILE\",",
          "3557: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3558:   \"        --deserialize   Load into memory useing sqlite3_deserialize()\",",
          "3560:   \"        --maxsize N     Maximum size for --hexdb or --deserialized database\",",
          "3561: #endif",
          "3562:   \"        --new           Initialize FILE to an empty database\",",
          "",
          "[Removed Lines]",
          "3559:   \"        --hexdb         Load the output of \\\"dbtotxt\\\" as an in-memory database\",",
          "",
          "[Added Lines]",
          "3560:   \"        --hexdb         Load the output of \\\"dbtotxt\\\" as an in-memory db\",",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3569:   \"   init                    Initialize the TEMP table that holds bindings\",",
          "3570:   \"   list                    List the current parameter bindings\",",
          "3571:   \"   set PARAMETER VALUE     Given SQL parameter PARAMETER a value of VALUE\",",
          "3573:   \"   unset PARAMETER         Remove PARAMETER from the binding table\",",
          "3574:   \".print STRING...         Print literal STRING\",",
          "3575: #ifndef SQLITE_OMIT_PROGRESS_CALLBACK",
          "",
          "[Removed Lines]",
          "3572:   \"                           PARAMETER should start with '$', ':', '@', or '?'\",",
          "",
          "[Added Lines]",
          "3573:   \"                           PARAMETER should start with one of: $ : @ ?\",",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3584:   \".read FILE               Read input from FILE\",",
          "3585: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_ENABLE_DBPAGE_VTAB)",
          "3586:   \".recover                 Recover as much data as possible from corrupt db.\",",
          "3587: #endif",
          "3588:   \".restore ?DB? FILE       Restore content of DB (default \\\"main\\\") from FILE\",",
          "3589:   \".save FILE               Write in-memory database into FILE\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3588:   \"   --freelist-corrupt       Assume the freelist is corrupt\",",
          "3589:   \"   --recovery-db NAME       Store recovery metadata in database file NAME\",",
          "3590:   \"   --lost-and-found TABLE   Alternative name for the lost-and-found table\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3615:   \"    Options:\",",
          "3616:   \"      --schema              Also hash the sqlite_master table\",",
          "3617:   \"      --sha3-224            Use the sha3-224 algorithm\",",
          "3619:   \"      --sha3-384            Use the sha3-384 algorithm\",",
          "3620:   \"      --sha3-512            Use the sha3-512 algorithm\",",
          "3621:   \"    Any other argument is a LIKE pattern for tables to hash\",",
          "",
          "[Removed Lines]",
          "3618:   \"      --sha3-256            Use the sha3-256 algorithm.  This is the default.\",",
          "",
          "[Added Lines]",
          "3622:   \"      --sha3-256            Use the sha3-256 algorithm (default)\",",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5721:                 i = n;",
          "5722:               }else{",
          "5723:                 if( iArg>=(nArg-1) ){",
          "5725:                 }",
          "5726:                 zArg = azArg[++iArg];",
          "5727:               }",
          "",
          "[Removed Lines]",
          "5724:                   return arErrorMsg(pAr, \"option requires an argument: %c\",z[i]);",
          "",
          "[Added Lines]",
          "5728:                   return arErrorMsg(pAr, \"option requires an argument: %c\",",
          "5729:                                     z[i]);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "6604:       zLostAndFound = azArg[i];",
          "6605:     }",
          "6606:     else{",
          "6612:       return 1;",
          "6613:     }",
          "6614:   }",
          "",
          "[Removed Lines]",
          "6607:       raw_printf(stderr, \"unexpected option: %s\\n\", azArg[i]);",
          "6608:       raw_printf(stderr, \"options are:\\n\");",
          "6609:       raw_printf(stderr, \"    --freelist-corrupt\\n\");",
          "6610:       raw_printf(stderr, \"    --recovery-db DATABASE\\n\");",
          "6611:       raw_printf(stderr, \"    --lost-and-found TABLE-NAME\\n\");",
          "",
          "[Added Lines]",
          "6612:       utf8_printf(stderr, \"unexpected option: %s\\n\", azArg[i]);",
          "6613:       showHelp(pState->out, azArg[0]);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "8467:       if( zName ){",
          "8468:         appendText(&sSelect,",
          "8469:            \" UNION ALL SELECT shell_module_schema(name),\"",
          "8471:       }",
          "8472: #endif",
          "8473:       appendText(&sSelect, \") WHERE \", 0);",
          "",
          "[Removed Lines]",
          "8470:            \" 'table', name, name, name, 9e+99, 'main' FROM pragma_module_list\", 0);",
          "",
          "[Added Lines]",
          "8472:            \" 'table', name, name, name, 9e+99, 'main' FROM pragma_module_list\",",
          "8473:         0);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "8566:       if( pSession->p==0 ) goto session_not_open;",
          "8567:       out = fopen(azCmd[1], \"wb\");",
          "8568:       if( out==0 ){",
          "8570:       }else{",
          "8571:         int szChng;",
          "8572:         void *pChng;",
          "",
          "[Removed Lines]",
          "8569:         utf8_printf(stderr, \"ERROR: cannot open \\\"%s\\\" for writing\\n\", azCmd[1]);",
          "",
          "[Added Lines]",
          "8572:         utf8_printf(stderr, \"ERROR: cannot open \\\"%s\\\" for writing\\n\",",
          "8573:                     azCmd[1]);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "8887:         {",
          "8888:           utf8_printf(stderr, \"Unknown option \\\"%s\\\" on \\\"%s\\\"\\n\",",
          "8889:                       azArg[i], azArg[0]);",
          "8892:           rc = 1;",
          "8893:           goto meta_command_exit;",
          "8894:         }",
          "",
          "[Removed Lines]",
          "8890:           raw_printf(stderr, \"Should be one of: --schema\"",
          "8891:                              \" --sha3-224 --sha3-256 --sha3-384 --sha3-512\\n\");",
          "",
          "[Added Lines]",
          "8894:           showHelp(p->out, azArg[0]);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "9168:     } aCtrl[] = {",
          "9181: #ifdef YYCOVERAGE",
          "9183: #endif",
          "9189:     };",
          "9190:     int testctrl = -1;",
          "9191:     int iCtrl = -1;",
          "",
          "[Removed Lines]",
          "9169:       { \"always\",             SQLITE_TESTCTRL_ALWAYS,        \"BOOLEAN\"            },",
          "9170:       { \"assert\",             SQLITE_TESTCTRL_ASSERT,        \"BOOLEAN\"            },",
          "9173:       { \"byteorder\",          SQLITE_TESTCTRL_BYTEORDER,     \"\"                   },",
          "9174:       { \"extra_schema_checks\",SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS,\"BOOLEAN\"       },",
          "9176:       { \"imposter\",           SQLITE_TESTCTRL_IMPOSTER,   \"SCHEMA ON/OFF ROOTPAGE\"},",
          "9177:       { \"internal_functions\", SQLITE_TESTCTRL_INTERNAL_FUNCTIONS, \"BOOLEAN\"       },",
          "9178:       { \"localtime_fault\",    SQLITE_TESTCTRL_LOCALTIME_FAULT,\"BOOLEAN\"           },",
          "9179:       { \"never_corrupt\",      SQLITE_TESTCTRL_NEVER_CORRUPT, \"BOOLEAN\"            },",
          "9180:       { \"optimizations\",      SQLITE_TESTCTRL_OPTIMIZATIONS, \"DISABLE-MASK\"       },",
          "9182:       { \"parser_coverage\",    SQLITE_TESTCTRL_PARSER_COVERAGE, \"\"                 },",
          "9184:       { \"pending_byte\",       SQLITE_TESTCTRL_PENDING_BYTE,  \"OFFSET  \"           },",
          "9185:       { \"prng_restore\",       SQLITE_TESTCTRL_PRNG_RESTORE,  \"\"                   },",
          "9186:       { \"prng_save\",          SQLITE_TESTCTRL_PRNG_SAVE,     \"\"                   },",
          "9187:       { \"prng_seed\",          SQLITE_TESTCTRL_PRNG_SEED,     \"SEED ?db?\"          },",
          "9188:       { \"reserve\",            SQLITE_TESTCTRL_RESERVE,       \"BYTES-OF-RESERVE\"   },",
          "",
          "[Added Lines]",
          "9172:       { \"always\",             SQLITE_TESTCTRL_ALWAYS,        \"BOOLEAN\"        },",
          "9173:       { \"assert\",             SQLITE_TESTCTRL_ASSERT,        \"BOOLEAN\"        },",
          "9176:       { \"byteorder\",          SQLITE_TESTCTRL_BYTEORDER,     \"\"               },",
          "9177:       { \"extra_schema_checks\",SQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS,\"BOOLEAN\"   },",
          "9179:       { \"imposter\",         SQLITE_TESTCTRL_IMPOSTER, \"SCHEMA ON/OFF ROOTPAGE\"},",
          "9180:       { \"internal_functions\", SQLITE_TESTCTRL_INTERNAL_FUNCTIONS, \"BOOLEAN\"   },",
          "9181:       { \"localtime_fault\",    SQLITE_TESTCTRL_LOCALTIME_FAULT,\"BOOLEAN\"       },",
          "9182:       { \"never_corrupt\",      SQLITE_TESTCTRL_NEVER_CORRUPT, \"BOOLEAN\"        },",
          "9183:       { \"optimizations\",      SQLITE_TESTCTRL_OPTIMIZATIONS, \"DISABLE-MASK\"   },",
          "9185:       { \"parser_coverage\",    SQLITE_TESTCTRL_PARSER_COVERAGE, \"\"             },",
          "9187:       { \"pending_byte\",       SQLITE_TESTCTRL_PENDING_BYTE,  \"OFFSET  \"       },",
          "9188:       { \"prng_restore\",       SQLITE_TESTCTRL_PRNG_RESTORE,  \"\"               },",
          "9189:       { \"prng_save\",          SQLITE_TESTCTRL_PRNG_SAVE,     \"\"               },",
          "9190:       { \"prng_seed\",          SQLITE_TESTCTRL_PRNG_SEED,     \"SEED ?db?\"      },",
          "9191:       { \"reserve\",            SQLITE_TESTCTRL_RESERVE,      \"BYTES-OF-RESERVE\"},",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "9328:       }",
          "9329:     }",
          "9330:     if( isOk==0 && iCtrl>=0 ){",
          "9332:       rc = 1;",
          "9333:     }else if( isOk==1 ){",
          "9334:       raw_printf(p->out, \"%d\\n\", rc2);",
          "",
          "[Removed Lines]",
          "9331:       utf8_printf(p->out, \"Usage: .testctrl %s %s\\n\", zCmd, aCtrl[iCtrl].zUsage);",
          "",
          "[Added Lines]",
          "9334:       utf8_printf(p->out, \"Usage: .testctrl %s %s\\n\", zCmd,aCtrl[iCtrl].zUsage);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "9445:         rc = 1;",
          "9446:         goto meta_command_exit;",
          "9447:       }",
          "9449:       if( rc ){",
          "9450:         utf8_printf(stderr, \"Authentication failed for user %s\\n\", azArg[2]);",
          "9451:         rc = 1;",
          "",
          "[Removed Lines]",
          "9448:       rc = sqlite3_user_authenticate(p->db, azArg[2], azArg[3], strlen30(azArg[3]));",
          "",
          "[Added Lines]",
          "9451:       rc = sqlite3_user_authenticate(p->db, azArg[2], azArg[3],",
          "9452:                                      strlen30(azArg[3]));",
          "",
          "---------------"
        ]
      }
    }
  ]
}