{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7e508f1ee2d671976fd1dbe4a8fdbc840ba39b97",
      "candidate_info": {
        "commit_hash": "7e508f1ee2d671976fd1dbe4a8fdbc840ba39b97",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7e508f1ee2d671976fd1dbe4a8fdbc840ba39b97",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/parse.y",
          "src/pragma.c",
          "src/sqliteInt.h"
        ],
        "message": "Simple INSERT and SELECT operations working with VIRTUAL columns.\n\nFossilOrigin-Name: 7f9f90b1b885fa9905b296f2e0fcc9b2341019b42fc839722a93cf60e49a9252",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/parse.y||src/parse.y",
          "src/pragma.c||src/pragma.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 11d472c1df707b8d03ec57d8fc582a34f5eb89a9d02a154a9871650c65065b45",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3398:     }else if( pTab->aCol[iCol].colFlags & COLFLAG_VIRTUAL ){",
          "3399:       int savedSelfTab = pParse->iSelfTab;",
          "3400:       pParse->iSelfTab = iTabCur+1;",
          "3402:       pParse->iSelfTab = savedSelfTab;",
          "3403:       return;",
          "3404: #endif",
          "",
          "[Removed Lines]",
          "3401:       sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, iCol);",
          "",
          "[Added Lines]",
          "3401:       sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, regOut);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   sqlite3TableLock(pParse, iDb, pTab->tnum,",
          "38:                    (opcode==OP_OpenWrite)?1:0, pTab->zName);",
          "39:   if( HasRowid(pTab) ){",
          "41:     VdbeComment((v, \"%s\", pTab->zName));",
          "42:   }else{",
          "43:     Index *pPk = sqlite3PrimaryKeyIndex(pTab);",
          "",
          "[Removed Lines]",
          "40:     sqlite3VdbeAddOp4Int(v, opcode, iCur, pTab->tnum, iDb, pTab->nCol);",
          "",
          "[Added Lines]",
          "40:     sqlite3VdbeAddOp4Int(v, opcode, iCur, pTab->tnum, iDb,",
          "41:                          pTab->nCol - pTab->nVCol);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "673:           if( j==pTab->iPKey ){",
          "674:             ipkColumn = i;  assert( !withoutRowid );",
          "675:           }",
          "676:           break;",
          "677:         }",
          "678:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "677: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "678:           if( pTab->aCol[j].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL) ){",
          "679:             sqlite3ErrorMsg(pParse,",
          "680:                \"cannot INSERT into generated column \\\"%s\\\"\",",
          "681:                pTab->aCol[j].zName);",
          "682:             goto insert_cleanup;",
          "683:           }",
          "684: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "790:   for(i=0; i<pTab->nCol; i++){",
          "792:   }",
          "793:   if( pColumn==0 && nColumn && nColumn!=(pTab->nCol-nHidden) ){",
          "794:     sqlite3ErrorMsg(pParse,",
          "",
          "[Removed Lines]",
          "791:     nHidden += (IsHiddenColumn(&pTab->aCol[i]) ? 1 : 0);",
          "",
          "[Added Lines]",
          "800:     if( pTab->aCol[i].colFlags & COLFLAG_NOINSERT ) nHidden++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1006:         continue;",
          "1007:       }",
          "1008:       if( pColumn==0 ){",
          "1010:           j = -1;",
          "1011:           nHidden++;",
          "1012:         }else{",
          "1013:           j = i - nHidden;",
          "1014:         }",
          "",
          "[Removed Lines]",
          "1009:         if( IsHiddenColumn(&pTab->aCol[i]) ){",
          "",
          "[Added Lines]",
          "1018:         if( pTab->aCol[i].colFlags & COLFLAG_NOINSERT ){",
          "1021:           if( pTab->aCol[i].colFlags & COLFLAG_VIRTUAL ){",
          "1022:             continue;",
          "1023:           }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1863:   if( HasRowid(pTab) ){",
          "1864:     int regRec = aRegIdx[ix];",
          "1866:     sqlite3SetMakeRecordP5(v, pTab);",
          "1867:     if( !bAffinityDone ){",
          "1868:       sqlite3TableAffinity(v, pTab, 0);",
          "",
          "[Removed Lines]",
          "1865:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regNewData+1, pTab->nCol, regRec);",
          "",
          "[Added Lines]",
          "1877:     sqlite3VdbeAddOp3(v, OP_MakeRecord, regNewData+1,",
          "1878:                       pTab->nCol-pTab->nVCol, regRec);",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "349: ccons ::= COLLATE ids(C).        {sqlite3AddCollateType(pParse, &C);}",
          "350: ccons ::= GENERATED ALWAYS AS generated.",
          "351: ccons ::= AS generated.",
          "358: %type autoinc {int}",
          "",
          "[Removed Lines]",
          "352: generated ::= LP expr(E) RP.",
          "353:      {sqlite3AddGenerated(pParse,E,0);}",
          "354: generated ::= LP expr(E) RP ID(TYPE).",
          "355:      {sqlite3AddGenerated(pParse,E,&TYPE);}",
          "",
          "[Added Lines]",
          "352: generated ::= LP expr(E) RP.          {sqlite3AddGenerated(pParse,E,0);}",
          "353: generated ::= LP expr(E) RP ID(TYPE). {sqlite3AddGenerated(pParse,E,&TYPE);}",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1577:         loopTop = sqlite3VdbeAddOp2(v, OP_AddImm, 7, 1);",
          "1578:         if( !isQuick ){",
          "1581:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
          "1582:         }",
          "",
          "[Removed Lines]",
          "1580:           sqlite3VdbeAddOp3(v, OP_Column, iDataCur, pTab->nCol-1, 3);",
          "",
          "[Added Lines]",
          "1580:           sqlite3VdbeAddOp3(v, OP_Column, iDataCur, pTab->nCol-pTab->nVCol-1,3);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ]
      }
    },
    {
      "candidate_hash": "1d2d71a02cac0e4a13d54ae1bd3b3351abbf9828",
      "candidate_info": {
        "commit_hash": "1d2d71a02cac0e4a13d54ae1bd3b3351abbf9828",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1d2d71a02cac0e4a13d54ae1bd3b3351abbf9828",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Mark a single branch as no longer reachable.\n\nFossilOrigin-Name: 4f35b3b78a461b0617a5cd04f60d2ab277bcc7c994dae463851a3cb5d041a723",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6cf16703fd4a835c249c947006ae4a4bf81873c8ca1803945453c9845f882dc1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c"
        ]
      }
    },
    {
      "candidate_hash": "4dad7ed532ef1a6b50e5ebf4dedf2a4611a82159",
      "candidate_info": {
        "commit_hash": "4dad7ed532ef1a6b50e5ebf4dedf2a4611a82159",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4dad7ed532ef1a6b50e5ebf4dedf2a4611a82159",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/gencol1.test"
        ],
        "message": "When a table is part of a LEFT JOIN and should be a completely NULL row due to the semantics of a LEFT JOIN, make sure any generated columns on that row evaluate to NULL.  Ticket [3b84b42943644d6f]\n\nFossilOrigin-Name: 0271491438ad2a985aeff355173a8d0f1e5813954c82147bc68cb26cca5804c8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1e3918ca2f2c1cfcfa44249b1d7b847d52cbb8d302a8d4a335c090cfdf22d7a1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3408:   Column *pCol,",
          "3409:   int regOut",
          "3410: ){",
          "3411:   sqlite3ExprCode(pParse, pCol->pDflt, regOut);",
          "3412:   if( pCol->affinity>=SQLITE_AFF_TEXT ){",
          "3415:   }",
          "3416: }",
          "",
          "[Removed Lines]",
          "3413:     sqlite3VdbeAddOp4(pParse->pVdbe, OP_Affinity, regOut, 1, 0,",
          "3414:                       &pCol->affinity, 1);",
          "",
          "[Added Lines]",
          "3411:   int iAddr;",
          "3412:   Vdbe *v = pParse->pVdbe;",
          "3413:   assert( v!=0 );",
          "3414:   assert( pParse->iSelfTab!=0 );",
          "3415:   if( pParse->iSelfTab>0 ){",
          "3416:     iAddr = sqlite3VdbeAddOp3(v, OP_IfNullRow, pParse->iSelfTab-1, 0, regOut);",
          "3417:   }else{",
          "3418:     iAddr = 0;",
          "3419:   }",
          "3422:     sqlite3VdbeAddOp4(v, OP_Affinity, regOut, 1, 0, &pCol->affinity, 1);",
          "3424:   if( iAddr ) sqlite3VdbeJumpHere(v, iAddr);",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "419:   SELECT a, quote(b) FROM t1",
          "420: } {9 NULL}",
          "422: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "422: # 2019-12-16 ticket 3b84b42943644d6f",
          "423: # When a table is the right table of a LEFT JOIN and the ON clause is",
          "424: # false, make sure any generated columns evaluate to NULL.",
          "425: reset_db",
          "426: do_execsql_test gencol1-16.10 {",
          "427:   CREATE TABLE t0(c0);",
          "428:   CREATE TABLE t1(c1, c2 AS(1));",
          "429:   INSERT INTO t0 VALUES(0);",
          "430:   SELECT c0, c1, c2 FROM t0 LEFT JOIN t1;",
          "431: } {0 {} {}}",
          "432: do_execsql_test gencol1-16.20 {",
          "433:   DROP TABLE t1;",
          "434:   CREATE TABLE t1(c1, c2 AS (c1 ISNULL));",
          "435:   SELECT c0, c1, c2 FROM t0 LEFT JOIN t1;",
          "436: } {0 {} {}}",
          "437: do_execsql_test gencol1-16.30 {",
          "438:   INSERT INTO t1(c1) VALUES(1),(NULL);",
          "439:   SELECT * FROM t1;",
          "440: } {1 0 {} 1}",
          "441: do_execsql_test gencol1-16.40 {",
          "442:   SELECT c0, c1, c2 FROM t0 LEFT JOIN t1 ON c0=c1;",
          "443: } {0 {} {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d1d158bf5abbab97ee65462c7ee391693ce7ffd7",
      "candidate_info": {
        "commit_hash": "d1d158bf5abbab97ee65462c7ee391693ce7ffd7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d1d158bf5abbab97ee65462c7ee391693ce7ffd7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h",
          "src/vdbe.h",
          "src/vdbeaux.c"
        ],
        "message": "Additional small performance increase and size reduction to the sqlite3VdbeMakeLabel() mechanism.\n\nFossilOrigin-Name: 1bdee199a71e0a6c247b85e72de9e3a3099b7179c33288735721facef3b96459",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4a0929ac76d8aa5dd65eac3b83d6bbf41e505e01d175ca0fb2b19ba02d439415",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "156: #endif",
          "",
          "[Removed Lines]",
          "164: #define ADDR(X)  (-1-(X))",
          "",
          "[Added Lines]",
          "163: #define ADDR(X)  (~(X))",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "451: int sqlite3VdbeMakeLabel(Parse *pParse){",
          "453: }",
          "",
          "[Removed Lines]",
          "452:   return ADDR(pParse->nLabel++);",
          "",
          "[Added Lines]",
          "463:   return --pParse->nLabel;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "460: static SQLITE_NOINLINE void resizeResolveLabel(Parse *p, Vdbe *v, int j){",
          "462:   p->aLabel = sqlite3DbReallocOrFree(p->db, p->aLabel,",
          "463:                      nNewSize*sizeof(p->aLabel[0]));",
          "464:   if( p->aLabel==0 ){",
          "",
          "[Removed Lines]",
          "461:   int nNewSize = p->nLabel+10;",
          "",
          "[Added Lines]",
          "472:   int nNewSize = 10 - p->nLabel;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "476:   Parse *p = v->pParse;",
          "477:   int j = ADDR(x);",
          "478:   assert( v->magic==VDBE_MAGIC_INIT );",
          "480:   assert( j>=0 );",
          "481: #ifdef SQLITE_DEBUG",
          "482:   if( p->db->flags & SQLITE_VdbeAddopTrace ){",
          "483:     printf(\"RESOLVE LABEL %d to %d\\n\", x, v->nOp);",
          "484:   }",
          "485: #endif",
          "487:     resizeResolveLabel(p,v,j);",
          "488:   }else{",
          "",
          "[Removed Lines]",
          "479:   assert( j<p->nLabel );",
          "486:   if( p->nLabelAlloc < p->nLabel ){",
          "",
          "[Added Lines]",
          "490:   assert( j<-p->nLabel );",
          "497:   if( p->nLabelAlloc + p->nLabel < 0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "763:             assert( (sqlite3OpcodeProperty[pOp->opcode] & OPFLG_JUMP)!=0 );",
          "765:             pOp->p2 = aLabel[ADDR(pOp->p2)];",
          "766:           }",
          "767:           break;",
          "",
          "[Removed Lines]",
          "764:             assert( ADDR(pOp->p2)<pParse->nLabel );",
          "",
          "[Added Lines]",
          "775:             assert( ADDR(pOp->p2)<-pParse->nLabel );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3fcc000cb7bd5b12816512834e6484c68658576",
      "candidate_info": {
        "commit_hash": "a3fcc000cb7bd5b12816512834e6484c68658576",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a3fcc000cb7bd5b12816512834e6484c68658576",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/resolve.c",
          "src/sqliteInt.h",
          "src/window.c",
          "test/window9.test"
        ],
        "message": "Ensure that SQLite does not attempt to process incompatible window functions in a single scan. Fix for [256741a1].\n\nFossilOrigin-Name: 4f5b2d938194fab7627486e2ced633def2c90d9d3328e3700612feb9dbfa3d9a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b2e79f8ff0836fcc98a2df9377aad9137307c34058030ecd1b5d4ec3277ed36a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1325:     assert( pWin );",
          "1326:     assert( IsWindowFunc(pExpr) );",
          "1327:     assert( pWin->ppThis==0 );",
          "1334:   }",
          "1335:   return WRC_Continue;",
          "1336: }",
          "",
          "[Removed Lines]",
          "1328:     if( pSelect->pWin ){",
          "1329:       pSelect->pWin->ppThis = &pWin->pNextWin;",
          "1330:     }",
          "1331:     pWin->pNextWin = pSelect->pWin;",
          "1332:     pWin->ppThis = &pSelect->pWin;",
          "1333:     pSelect->pWin = pWin;",
          "",
          "[Added Lines]",
          "1328:     sqlite3WindowLink(pSelect, pWin);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "908:           sqlite3WalkExprList(pWalker, pWin->pPartition);",
          "909:           sqlite3WalkExprList(pWalker, pWin->pOrderBy);",
          "910:           sqlite3WalkExpr(pWalker, pWin->pFilter);",
          "921:           pNC->ncFlags |= NC_HasWin;",
          "922:         }else",
          "",
          "[Removed Lines]",
          "911:           if( 0==pSel->pWin",
          "912:            || 0==sqlite3WindowCompare(pParse, pSel->pWin, pWin, 0)",
          "913:           ){",
          "914:             pWin->pNextWin = pSel->pWin;",
          "915:             if( pSel->pWin ){",
          "916:               pSel->pWin->ppThis = &pWin->pNextWin;",
          "917:             }",
          "918:             pSel->pWin = pWin;",
          "919:             pWin->ppThis = &pSel->pWin;",
          "920:           }",
          "",
          "[Added Lines]",
          "911:           sqlite3WindowLink(pSel, pWin);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3609: void sqlite3WindowListDelete(sqlite3 *db, Window *p);",
          "3610: Window *sqlite3WindowAlloc(Parse*, int, int, Expr*, int , Expr*, u8);",
          "3611: void sqlite3WindowAttach(Parse*, Expr*, Window*);",
          "3612: int sqlite3WindowCompare(Parse*, Window*, Window*, int);",
          "3613: void sqlite3WindowCodeInit(Parse*, Window*);",
          "3614: void sqlite3WindowCodeStep(Parse*, Select*, WhereInfo*, int, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3612: void sqlite3WindowLink(Select *pSel, Window *pWin);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1229:   }",
          "1230: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1238: void sqlite3WindowLink(Select *pSel, Window *pWin){",
          "1239:   if( 0==pSel->pWin",
          "1240:    || 0==sqlite3WindowCompare(0, pSel->pWin, pWin, 0)",
          "1241:   ){",
          "1242:     pWin->pNextWin = pSel->pWin;",
          "1243:     if( pSel->pWin ){",
          "1244:       pSel->pWin->ppThis = &pWin->pNextWin;",
          "1245:     }",
          "1246:     pSel->pWin = pWin;",
          "1247:     pWin->ppThis = &pSel->pWin;",
          "1248:   }",
          "1249: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1416:     int nArg = windowArgCount(pWin);",
          "1417:     int i;",
          "1419:     for(i=0; i<nArg; i++){",
          "1420:       if( i!=1 || pFunc->zName!=nth_valueName ){",
          "1421:         sqlite3VdbeAddOp3(v, OP_Column, csr, pWin->iArgCol+i, reg+i);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1438:     assert( bInverse==0 || pWin->eStart!=TK_UNBOUNDED );",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "171:   } {~/ORDER/}",
          "172: }",
          "176: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174: #-------------------------------------------------------------------------",
          "175: reset_db",
          "176: do_execsql_test 6.0 {",
          "177:   CREATE TABLE t0(c0);",
          "178:   INSERT INTO t0(c0) VALUES (0);",
          "179: }",
          "181: do_execsql_test 6.1 {",
          "182:   SELECT * FROM t0 WHERE",
          "183:   EXISTS (",
          "184:     SELECT MIN(c0) OVER (), CUME_DIST() OVER () FROM t0",
          "185:   ) >=1 AND",
          "186:   EXISTS (",
          "187:     SELECT MIN(c0) OVER (), CUME_DIST() OVER () FROM t0",
          "188:   ) <=1;",
          "189: } {0}",
          "191: do_execsql_test 6.2 {",
          "192:   SELECT * FROM t0 WHERE EXISTS (",
          "193:     SELECT MIN(c0) OVER (), CUME_DIST() OVER () FROM t0",
          "194:   )",
          "195:   BETWEEN 1 AND 1;",
          "196: } {0}",
          "",
          "---------------"
        ]
      }
    }
  ]
}