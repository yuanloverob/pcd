{
  "cve_id": "CVE-2011-2518",
  "cve_desc": "The tomoyo_mount_acl function in security/tomoyo/mount.c in the Linux kernel before 2.6.39.2 calls the kern_path function with arguments taken directly from a mount system call, which allows local users to cause a denial of service (OOPS) or possibly have unspecified other impact via a NULL value for the device name.",
  "repo": "torvalds/linux",
  "patch_hash": "4e78c724d47e2342aa8fde61f6b8536f662f795f",
  "patch_info": {
    "commit_hash": "4e78c724d47e2342aa8fde61f6b8536f662f795f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/4e78c724d47e2342aa8fde61f6b8536f662f795f",
    "files": [
      "security/tomoyo/mount.c"
    ],
    "message": "TOMOYO: Fix oops in tomoyo_mount_acl().\n\nIn tomoyo_mount_acl() since 2.6.36, kern_path() was called without checking\ndev_name != NULL. As a result, an unprivileged user can trigger oops by issuing\nmount(NULL, \"/\", \"ext3\", 0, NULL) request.\nFix this by checking dev_name != NULL before calling kern_path(dev_name).\n\nSigned-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>\nCc: stable@kernel.org\nSigned-off-by: James Morris <jmorris@namei.org>",
    "before_after_code_files": [
      "security/tomoyo/mount.c||security/tomoyo/mount.c"
    ]
  },
  "patch_diff": {
    "security/tomoyo/mount.c||security/tomoyo/mount.c": [
      "File: security/tomoyo/mount.c -> security/tomoyo/mount.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "138:  }",
      "139:  if (need_dev) {",
      "142:    error = -ENOENT;",
      "143:    goto out;",
      "144:   }",
      "",
      "[Removed Lines]",
      "141:   if (kern_path(dev_name, LOOKUP_FOLLOW, &path)) {",
      "",
      "[Added Lines]",
      "141:   if (!dev_name || kern_path(dev_name, LOOKUP_FOLLOW, &path)) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2106ccd972dcd9fda7df9b181505fac1741b3508",
      "candidate_info": {
        "commit_hash": "2106ccd972dcd9fda7df9b181505fac1741b3508",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/2106ccd972dcd9fda7df9b181505fac1741b3508",
        "files": [
          "security/tomoyo/Makefile",
          "security/tomoyo/common.c",
          "security/tomoyo/common.h",
          "security/tomoyo/file.c",
          "security/tomoyo/gc.c",
          "security/tomoyo/mount.c",
          "security/tomoyo/tomoyo.c"
        ],
        "message": "TOMOYO: Add mount restriction.\n\nmount(2) has three string and one numeric parameters.\nSplit mount restriction code from security/tomoyo/file.c .\n\nSigned-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>\nSigned-off-by: James Morris <jmorris@namei.org>",
        "before_after_code_files": [
          "security/tomoyo/common.c||security/tomoyo/common.c",
          "security/tomoyo/common.h||security/tomoyo/common.h",
          "security/tomoyo/file.c||security/tomoyo/file.c",
          "security/tomoyo/gc.c||security/tomoyo/gc.c",
          "security/tomoyo/mount.c||security/tomoyo/mount.c",
          "security/tomoyo/tomoyo.c||security/tomoyo/tomoyo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "security/tomoyo/mount.c||security/tomoyo/mount.c"
          ],
          "candidate": [
            "security/tomoyo/mount.c||security/tomoyo/mount.c"
          ]
        }
      },
      "candidate_diff": {
        "security/tomoyo/common.c||security/tomoyo/common.c": [
          "File: security/tomoyo/common.c -> security/tomoyo/common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:     if (perm & (1 << i))",
          "1076:      count++;",
          "1077:    break;",
          "1078:   }",
          "1079:  }",
          "1080:  if (count < tomoyo_check_flags(domain, TOMOYO_MAX_ACCEPT_ENTRY))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:   case TOMOYO_TYPE_MOUNT_ACL:",
          "1079:    if (!container_of(ptr, struct tomoyo_mount_acl, head)->",
          "1080:        is_deleted)",
          "1081:     count++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1576:   domain->ignore_global_allow_read = !is_delete;",
          "1577:   return 0;",
          "1578:  }",
          "1579:  return tomoyo_write_file_policy(data, domain, is_delete);",
          "1580: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1583:         if (tomoyo_str_starts(&data, TOMOYO_KEYWORD_ALLOW_MOUNT))",
          "1584:                 return tomoyo_write_mount_policy(data, domain, is_delete);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1720:  return false;",
          "1721: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1737: static bool tomoyo_print_mount_acl(struct tomoyo_io_buffer *head,",
          "1738:        struct tomoyo_mount_acl *ptr)",
          "1739: {",
          "1740:  const int pos = head->read_avail;",
          "1741:  if (!tomoyo_io_printf(head, TOMOYO_KEYWORD_ALLOW_MOUNT) ||",
          "1742:      !tomoyo_print_name_union(head, &ptr->dev_name) ||",
          "1743:      !tomoyo_print_name_union(head, &ptr->dir_name) ||",
          "1744:      !tomoyo_print_name_union(head, &ptr->fs_type) ||",
          "1745:      !tomoyo_print_number_union(head, &ptr->flags) ||",
          "1746:      !tomoyo_io_printf(head, \"\\n\")) {",
          "1747:   head->read_avail = pos;",
          "1748:   return false;",
          "1749:  }",
          "1750:  return true;",
          "1751: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1755:            head);",
          "1756:   return tomoyo_print_path_number3_acl(head, acl);",
          "1757:  }",
          "1759:  return false;",
          "1760: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1788:  if (acl_type == TOMOYO_TYPE_MOUNT_ACL) {",
          "1789:   struct tomoyo_mount_acl *acl",
          "1790:    = container_of(ptr, struct tomoyo_mount_acl, head);",
          "1791:   return tomoyo_print_mount_acl(head, acl);",
          "1792:  }",
          "",
          "---------------"
        ],
        "security/tomoyo/common.h||security/tomoyo/common.h": [
          "File: security/tomoyo/common.h -> security/tomoyo/common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: #define TOMOYO_KEYWORD_ALIAS                     \"alias \"",
          "56: #define TOMOYO_KEYWORD_ALLOW_READ                \"allow_read \"",
          "57: #define TOMOYO_KEYWORD_DELETE                    \"delete \"",
          "58: #define TOMOYO_KEYWORD_DENY_REWRITE              \"deny_rewrite \"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "56: #define TOMOYO_KEYWORD_ALLOW_MOUNT               \"allow_mount \"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "90:  TOMOYO_TYPE_PATH2_ACL,",
          "91:  TOMOYO_TYPE_PATH_NUMBER_ACL,",
          "92:  TOMOYO_TYPE_PATH_NUMBER3_ACL,",
          "93: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:  TOMOYO_TYPE_MOUNT_ACL,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:  TOMOYO_TYPE_SYMLINK,",
          "117:  TOMOYO_TYPE_REWRITE,",
          "118:  TOMOYO_TYPE_CHROOT,",
          "120:  TOMOYO_TYPE_UMOUNT,",
          "121:  TOMOYO_MAX_PATH_OPERATION",
          "122: };",
          "",
          "[Removed Lines]",
          "119:  TOMOYO_TYPE_MOUNT,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "434:  struct tomoyo_name_union name2;",
          "435: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "452: struct tomoyo_mount_acl {",
          "454:  bool is_deleted;",
          "455:  struct tomoyo_name_union dev_name;",
          "456:  struct tomoyo_name_union dir_name;",
          "457:  struct tomoyo_name_union fs_type;",
          "458:  struct tomoyo_number_union flags;",
          "459: };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "639: bool tomoyo_compare_name_union(const struct tomoyo_path_info *name,",
          "640:           const struct tomoyo_name_union *ptr);",
          "642: bool tomoyo_domain_quota_is_ok(struct tomoyo_request_info *r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "666: bool tomoyo_compare_number_union(const unsigned long value,",
          "667:      const struct tomoyo_number_union *ptr);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "699: const char *tomoyo_get_last_name(const struct tomoyo_domain_info *domain);",
          "701: const char *tomoyo_path2keyword(const u8 operation);",
          "703: int tomoyo_write_alias_policy(char *data, const bool is_delete);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "730: int tomoyo_init_request_info(struct tomoyo_request_info *r,",
          "731:         struct tomoyo_domain_info *domain);",
          "733: int tomoyo_mount_permission(char *dev_name, struct path *path, char *type,",
          "734:        unsigned long flags, void *data_page);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "721:         const bool is_delete);",
          "723: int tomoyo_write_globally_readable_policy(char *data, const bool is_delete);",
          "725: int tomoyo_write_no_rewrite_policy(char *data, const bool is_delete);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "758: int tomoyo_write_mount_policy(char *data, struct tomoyo_domain_info *domain,",
          "759:          const bool is_delete);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "735: struct tomoyo_domain_info *tomoyo_find_or_assign_new_domain(const char *",
          "736:            domainname,",
          "737:            const u8 profile);",
          "740: struct tomoyo_path_group *tomoyo_get_path_group(const char *group_name);",
          "741: struct tomoyo_number_group *tomoyo_get_number_group(const char *group_name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775: const struct tomoyo_path_info *",
          "776: tomoyo_get_file_pattern(const struct tomoyo_path_info *filename);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "972:   && tomoyo_is_same_number_union(&p1->number, &p2->number);",
          "973: }",
          "975: static inline bool tomoyo_is_same_domain_initializer_entry",
          "976: (const struct tomoyo_domain_initializer_entry *p1,",
          "977:  const struct tomoyo_domain_initializer_entry *p2)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1013: static inline bool tomoyo_is_same_mount_acl(const struct tomoyo_mount_acl *p1,",
          "1014:          const struct tomoyo_mount_acl *p2)",
          "1015: {",
          "1016:  return tomoyo_is_same_acl_head(&p1->head, &p2->head) &&",
          "1017:   tomoyo_is_same_name_union(&p1->dev_name, &p2->dev_name) &&",
          "1018:   tomoyo_is_same_name_union(&p1->dir_name, &p2->dir_name) &&",
          "1019:   tomoyo_is_same_name_union(&p1->fs_type, &p2->fs_type) &&",
          "1020:   tomoyo_is_same_number_union(&p1->flags, &p2->flags);",
          "1021: }",
          "",
          "---------------"
        ],
        "security/tomoyo/file.c||security/tomoyo/file.c": [
          "File: security/tomoyo/file.c -> security/tomoyo/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24:  [TOMOYO_TYPE_SYMLINK]    = \"symlink\",",
          "25:  [TOMOYO_TYPE_REWRITE]    = \"rewrite\",",
          "26:  [TOMOYO_TYPE_CHROOT]     = \"chroot\",",
          "28:  [TOMOYO_TYPE_UMOUNT]     = \"unmount\",",
          "29: };",
          "",
          "[Removed Lines]",
          "27:  [TOMOYO_TYPE_MOUNT]      = \"mount\",",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113: {",
          "114:  memset(r, 0, sizeof(*r));",
          "115:  if (!domain)",
          "",
          "[Removed Lines]",
          "111: static int tomoyo_init_request_info(struct tomoyo_request_info *r,",
          "112:         struct tomoyo_domain_info *domain)",
          "",
          "[Added Lines]",
          "110: int tomoyo_init_request_info(struct tomoyo_request_info *r,",
          "111:         struct tomoyo_domain_info *domain)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "491: tomoyo_get_file_pattern(const struct tomoyo_path_info *filename)",
          "492: {",
          "493:  struct tomoyo_pattern_entry *ptr;",
          "",
          "[Removed Lines]",
          "490: static const struct tomoyo_path_info *",
          "",
          "[Added Lines]",
          "489: const struct tomoyo_path_info *",
          "",
          "---------------"
        ],
        "security/tomoyo/gc.c||security/tomoyo/gc.c": [
          "File: security/tomoyo/gc.c -> security/tomoyo/gc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:    tomoyo_put_number_union(&entry->minor);",
          "125:   }",
          "126:   break;",
          "127:  default:",
          "128:   printk(KERN_WARNING \"Unknown type\\n\");",
          "129:   break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:  case TOMOYO_TYPE_MOUNT_ACL:",
          "128:   {",
          "129:    struct tomoyo_mount_acl *entry",
          "130:     = container_of(acl, typeof(*entry), head);",
          "131:    tomoyo_put_name_union(&entry->dev_name);",
          "132:    tomoyo_put_name_union(&entry->dir_name);",
          "133:    tomoyo_put_name_union(&entry->fs_type);",
          "134:    tomoyo_put_number_union(&entry->flags);",
          "135:   }",
          "136:   break;",
          "",
          "---------------"
        ],
        "security/tomoyo/mount.c||security/tomoyo/mount.c": [
          "File: security/tomoyo/mount.c -> security/tomoyo/mount.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #include <linux/slab.h>",
          "8: #include \"common.h\"",
          "13: #define TOMOYO_MOUNT_BIND_KEYWORD                        \"--bind\"",
          "15: #define TOMOYO_MOUNT_MOVE_KEYWORD                        \"--move\"",
          "17: #define TOMOYO_MOUNT_REMOUNT_KEYWORD                     \"--remount\"",
          "19: #define TOMOYO_MOUNT_MAKE_UNBINDABLE_KEYWORD             \"--make-unbindable\"",
          "21: #define TOMOYO_MOUNT_MAKE_PRIVATE_KEYWORD                \"--make-private\"",
          "23: #define TOMOYO_MOUNT_MAKE_SLAVE_KEYWORD                  \"--make-slave\"",
          "25: #define TOMOYO_MOUNT_MAKE_SHARED_KEYWORD                 \"--make-shared\"",
          "37: static char *tomoyo_encode2(const char *str)",
          "38: {",
          "39:  int len = 0;",
          "40:  const char *p = str;",
          "41:  char *cp;",
          "42:  char *cp0;",
          "43:  if (!p)",
          "44:   return NULL;",
          "45:  while (*p) {",
          "46:   const unsigned char c = *p++;",
          "47:   if (c == '\\\\')",
          "48:    len += 2;",
          "49:   else if (c > ' ' && c < 127)",
          "50:    len++;",
          "51:   else",
          "52:    len += 4;",
          "53:  }",
          "54:  len++;",
          "56:  cp = kzalloc(len + 10, GFP_NOFS);",
          "57:  if (!cp)",
          "58:   return NULL;",
          "59:  cp0 = cp;",
          "60:  p = str;",
          "61:  while (*p) {",
          "62:   const unsigned char c = *p++;",
          "63:   if (c == '\\\\') {",
          "66:   } else if (c > ' ' && c < 127) {",
          "68:   } else {",
          "73:   }",
          "74:  }",
          "75:  return cp0;",
          "76: }",
          "91: static int tomoyo_mount_acl2(struct tomoyo_request_info *r, char *dev_name,",
          "92:         struct path *dir, char *type, unsigned long flags)",
          "93: {",
          "94:  struct path path;",
          "95:  struct tomoyo_acl_info *ptr;",
          "96:  struct file_system_type *fstype = NULL;",
          "97:  const char *requested_type = NULL;",
          "98:  const char *requested_dir_name = NULL;",
          "99:  const char *requested_dev_name = NULL;",
          "100:  struct tomoyo_path_info rtype;",
          "101:  struct tomoyo_path_info rdev;",
          "102:  struct tomoyo_path_info rdir;",
          "103:  int need_dev = 0;",
          "104:  int error = -ENOMEM;",
          "107:  requested_type = tomoyo_encode2(type);",
          "108:  if (!requested_type)",
          "109:   goto out;",
          "110:  rtype.name = requested_type;",
          "111:  tomoyo_fill_path_info(&rtype);",
          "114:  requested_dir_name = tomoyo_realpath_from_path(dir);",
          "115:  if (!requested_dir_name) {",
          "116:   error = -ENOMEM;",
          "117:   goto out;",
          "118:  }",
          "119:  rdir.name = requested_dir_name;",
          "120:  tomoyo_fill_path_info(&rdir);",
          "123:  if (!strcmp(type, TOMOYO_MOUNT_REMOUNT_KEYWORD)) {",
          "125:  } else if (!strcmp(type, TOMOYO_MOUNT_MAKE_UNBINDABLE_KEYWORD) ||",
          "126:      !strcmp(type, TOMOYO_MOUNT_MAKE_PRIVATE_KEYWORD) ||",
          "127:      !strcmp(type, TOMOYO_MOUNT_MAKE_SLAVE_KEYWORD) ||",
          "128:      !strcmp(type, TOMOYO_MOUNT_MAKE_SHARED_KEYWORD)) {",
          "130:  } else if (!strcmp(type, TOMOYO_MOUNT_BIND_KEYWORD) ||",
          "131:      !strcmp(type, TOMOYO_MOUNT_MOVE_KEYWORD)) {",
          "133:  } else {",
          "134:   fstype = get_fs_type(type);",
          "135:   if (!fstype) {",
          "136:    error = -ENODEV;",
          "137:    goto out;",
          "138:   }",
          "139:   if (fstype->fs_flags & FS_REQUIRES_DEV)",
          "141:    need_dev = 1;",
          "142:  }",
          "143:  if (need_dev) {",
          "145:   if (kern_path(dev_name, LOOKUP_FOLLOW, &path)) {",
          "146:    error = -ENOENT;",
          "147:    goto out;",
          "148:   }",
          "149:   requested_dev_name = tomoyo_realpath_from_path(&path);",
          "150:   if (!requested_dev_name) {",
          "151:    error = -ENOENT;",
          "152:    goto out;",
          "153:   }",
          "154:  } else {",
          "156:   if (!dev_name)",
          "157:    dev_name = \"<NULL>\";",
          "158:   requested_dev_name = tomoyo_encode2(dev_name);",
          "159:   if (!requested_dev_name) {",
          "160:    error = -ENOMEM;",
          "161:    goto out;",
          "162:   }",
          "163:  }",
          "164:  rdev.name = requested_dev_name;",
          "165:  tomoyo_fill_path_info(&rdev);",
          "166:  list_for_each_entry_rcu(ptr, &r->domain->acl_info_list, list) {",
          "167:   struct tomoyo_mount_acl *acl;",
          "168:   if (ptr->type != TOMOYO_TYPE_MOUNT_ACL)",
          "169:    continue;",
          "170:   acl = container_of(ptr, struct tomoyo_mount_acl, head);",
          "171:   if (acl->is_deleted ||",
          "172:       !tomoyo_compare_number_union(flags, &acl->flags) ||",
          "173:       !tomoyo_compare_name_union(&rtype, &acl->fs_type) ||",
          "174:       !tomoyo_compare_name_union(&rdir, &acl->dir_name) ||",
          "175:       (need_dev &&",
          "176:        !tomoyo_compare_name_union(&rdev, &acl->dev_name)))",
          "177:    continue;",
          "178:   error = 0;",
          "179:   break;",
          "180:  }",
          "181:  if (error) {",
          "182:   const char *dev = tomoyo_get_file_pattern(&rdev)->name;",
          "183:   const char *dir = tomoyo_get_file_pattern(&rdir)->name;",
          "184:   int len = strlen(dev) + strlen(dir) + strlen(requested_type)",
          "185:    + 64;",
          "186:   char *buf = kzalloc(len, GFP_NOFS);",
          "187:   if (buf) {",
          "188:    snprintf(buf, len - 1, \"%s %s %s 0x%lX\",",
          "189:      dev, dir, requested_type, flags);",
          "190:    tomoyo_write_mount_policy(buf, r->domain, false);",
          "191:    kfree(buf);",
          "192:   }",
          "193:  }",
          "194:  out:",
          "195:  kfree(requested_dev_name);",
          "196:  kfree(requested_dir_name);",
          "197:  if (fstype)",
          "198:   put_filesystem(fstype);",
          "199:  kfree(requested_type);",
          "200:  return error;",
          "201: }",
          "216: static int tomoyo_mount_acl(struct tomoyo_request_info *r, char *dev_name,",
          "217:        struct path *dir, char *type, unsigned long flags)",
          "218: {",
          "219:  int error;",
          "220:  error = -EPERM;",
          "221:  if ((flags & MS_MGC_MSK) == MS_MGC_VAL)",
          "222:   flags &= ~MS_MGC_MSK;",
          "223:  switch (flags & (MS_REMOUNT | MS_MOVE | MS_BIND)) {",
          "224:  case MS_REMOUNT:",
          "225:  case MS_MOVE:",
          "226:  case MS_BIND:",
          "227:  case 0:",
          "228:   break;",
          "229:  default:",
          "230:   printk(KERN_WARNING \"ERROR: \"",
          "231:          \"%s%s%sare given for single mount operation.\\n\",",
          "232:          flags & MS_REMOUNT ? \"'remount' \" : \"\",",
          "233:          flags & MS_MOVE    ? \"'move' \" : \"\",",
          "234:          flags & MS_BIND    ? \"'bind' \" : \"\");",
          "235:   return -EINVAL;",
          "236:  }",
          "237:  switch (flags & (MS_UNBINDABLE | MS_PRIVATE | MS_SLAVE | MS_SHARED)) {",
          "238:  case MS_UNBINDABLE:",
          "239:  case MS_PRIVATE:",
          "240:  case MS_SLAVE:",
          "241:  case MS_SHARED:",
          "242:  case 0:",
          "243:   break;",
          "244:  default:",
          "245:   printk(KERN_WARNING \"ERROR: \"",
          "246:          \"%s%s%s%sare given for single mount operation.\\n\",",
          "247:          flags & MS_UNBINDABLE ? \"'unbindable' \" : \"\",",
          "248:          flags & MS_PRIVATE    ? \"'private' \" : \"\",",
          "249:          flags & MS_SLAVE      ? \"'slave' \" : \"\",",
          "250:          flags & MS_SHARED     ? \"'shared' \" : \"\");",
          "251:   return -EINVAL;",
          "252:  }",
          "253:  if (flags & MS_REMOUNT)",
          "254:   error = tomoyo_mount_acl(r, dev_name, dir,",
          "255:           TOMOYO_MOUNT_REMOUNT_KEYWORD,",
          "256:           flags & ~MS_REMOUNT);",
          "257:  else if (flags & MS_MOVE)",
          "258:   error = tomoyo_mount_acl(r, dev_name, dir,",
          "259:           TOMOYO_MOUNT_MOVE_KEYWORD,",
          "260:           flags & ~MS_MOVE);",
          "261:  else if (flags & MS_BIND)",
          "262:   error = tomoyo_mount_acl(r, dev_name, dir,",
          "263:           TOMOYO_MOUNT_BIND_KEYWORD,",
          "264:           flags & ~MS_BIND);",
          "265:  else if (flags & MS_UNBINDABLE)",
          "266:   error = tomoyo_mount_acl(r, dev_name, dir,",
          "267:           TOMOYO_MOUNT_MAKE_UNBINDABLE_KEYWORD,",
          "268:           flags & ~MS_UNBINDABLE);",
          "269:  else if (flags & MS_PRIVATE)",
          "270:   error = tomoyo_mount_acl(r, dev_name, dir,",
          "271:           TOMOYO_MOUNT_MAKE_PRIVATE_KEYWORD,",
          "272:           flags & ~MS_PRIVATE);",
          "273:  else if (flags & MS_SLAVE)",
          "274:   error = tomoyo_mount_acl(r, dev_name, dir,",
          "275:           TOMOYO_MOUNT_MAKE_SLAVE_KEYWORD,",
          "276:           flags & ~MS_SLAVE);",
          "277:  else if (flags & MS_SHARED)",
          "278:   error = tomoyo_mount_acl(r, dev_name, dir,",
          "279:           TOMOYO_MOUNT_MAKE_SHARED_KEYWORD,",
          "280:           flags & ~MS_SHARED);",
          "281:  else",
          "282:   error = tomoyo_mount_acl2(r, dev_name, dir, type, flags);",
          "283:  if (r->mode != TOMOYO_CONFIG_ENFORCING)",
          "284:   error = 0;",
          "285:  return error;",
          "286: }",
          "299: int tomoyo_mount_permission(char *dev_name, struct path *path, char *type,",
          "300:        unsigned long flags, void *data_page)",
          "301: {",
          "302:  struct tomoyo_request_info r;",
          "303:  int error;",
          "304:  int idx;",
          "306:  if (tomoyo_init_request_info(&r, NULL) == TOMOYO_CONFIG_DISABLED)",
          "307:   return 0;",
          "308:  if (!type)",
          "309:   type = \"<NULL>\";",
          "310:  idx = tomoyo_read_lock();",
          "311:  error = tomoyo_mount_acl(&r, dev_name, path, type, flags);",
          "312:  tomoyo_read_unlock(idx);",
          "313:  return error;",
          "314: }",
          "325: int tomoyo_write_mount_policy(char *data, struct tomoyo_domain_info *domain,",
          "326:          const bool is_delete)",
          "327: {",
          "328:  struct tomoyo_acl_info *ptr;",
          "329:  struct tomoyo_mount_acl e = { .head.type = TOMOYO_TYPE_MOUNT_ACL };",
          "330:  int error = is_delete ? -ENOENT : -ENOMEM;",
          "331:  char *w[4];",
          "332:  if (!tomoyo_tokenize(data, w, sizeof(w)) || !w[3][0])",
          "333:   return -EINVAL;",
          "334:  if (!tomoyo_parse_name_union(w[0], &e.dev_name) ||",
          "335:      !tomoyo_parse_name_union(w[1], &e.dir_name) ||",
          "336:      !tomoyo_parse_name_union(w[2], &e.fs_type) ||",
          "337:      !tomoyo_parse_number_union(w[3], &e.flags))",
          "338:   goto out;",
          "339:  if (mutex_lock_interruptible(&tomoyo_policy_lock))",
          "340:   goto out;",
          "341:  list_for_each_entry_rcu(ptr, &domain->acl_info_list, list) {",
          "342:   struct tomoyo_mount_acl *acl =",
          "343:    container_of(ptr, struct tomoyo_mount_acl, head);",
          "344:   if (!tomoyo_is_same_mount_acl(acl, &e))",
          "345:    continue;",
          "346:   acl->is_deleted = is_delete;",
          "347:   error = 0;",
          "348:   break;",
          "349:  }",
          "350:  if (!is_delete && error) {",
          "351:   struct tomoyo_mount_acl *entry =",
          "352:    tomoyo_commit_ok(&e, sizeof(e));",
          "353:   if (entry) {",
          "354:    list_add_tail_rcu(&entry->head.list,",
          "355:        &domain->acl_info_list);",
          "356:    error = 0;",
          "357:   }",
          "358:  }",
          "359:  mutex_unlock(&tomoyo_policy_lock);",
          "360:  out:",
          "361:  tomoyo_put_name_union(&e.dev_name);",
          "362:  tomoyo_put_name_union(&e.dir_name);",
          "363:  tomoyo_put_name_union(&e.fs_type);",
          "364:  tomoyo_put_number_union(&e.flags);",
          "365:  return error;",
          "366: }",
          "",
          "---------------"
        ],
        "security/tomoyo/tomoyo.c||security/tomoyo/tomoyo.c": [
          "File: security/tomoyo/tomoyo.c -> security/tomoyo/tomoyo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226: static int tomoyo_sb_mount(char *dev_name, struct path *path,",
          "227:       char *type, unsigned long flags, void *data)",
          "228: {",
          "230: }",
          "232: static int tomoyo_sb_umount(struct vfsmount *mnt, int flags)",
          "",
          "[Removed Lines]",
          "229:  return tomoyo_path_perm(TOMOYO_TYPE_MOUNT, path);",
          "",
          "[Added Lines]",
          "229:  return tomoyo_mount_permission(dev_name, path, type, flags, data);",
          "",
          "---------------"
        ]
      }
    }
  ]
}