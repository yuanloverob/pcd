{
  "cve_id": "CVE-2017-13083",
  "cve_desc": "Akeo Consulting Rufus prior to version 2.17.1187 does not adequately validate the integrity of updates downloaded over HTTP, allowing an attacker to easily convince a user to execute arbitrary code",
  "repo": "pbatard/rufus",
  "patch_hash": "c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
  "patch_info": {
    "commit_hash": "c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
    "repo": "pbatard/rufus",
    "commit_url": "https://github.com/pbatard/rufus/commit/c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
    "files": [
      "res/localization/rufus.loc",
      "src/pki.c",
      "src/rufus.rc",
      "src/stdlg.c"
    ],
    "message": "[pki] fix https://www.kb.cert.org/vuls/id/403768\n\n* This commit effectively fixes https://www.kb.cert.org/vuls/id/403768 (CVE-2017-13083) as\n  it is described per its revision 11, which is the latest revision at the time of this commit,\n  by disabling Windows prompts, enacted during signature validation, that allow the user to\n  bypass the intended signature verification checks.\n* It needs to be pointed out that the vulnerability (\"allow(ing) the use of a self-signed\n  certificate\"), which relies on the end-user actively ignoring a Windows prompt that tells\n  them that the update failed the signature validation whilst also advising against running it,\n  is being fully addressed, even as the update protocol remains HTTP.\n* It also need to be pointed out that the extended delay (48 hours) between the time the\n  vulnerability was reported and the moment it is fixed in our codebase has to do with\n  the fact that the reporter chose to deviate from standard security practices by not\n  disclosing the details of the vulnerability with us, be it publicly or privately,\n  before creating the cert.org report. The only advance notification we received was a\n  generic note about the use of HTTP vs HTTPS, which, as have established, is not\n  immediately relevant to addressing the reported vulnerability.\n* Closes #1009\n* Note: The other vulnerability scenario described towards the end of #1009, which\n  doesn't have to do with the \"lack of CA checking\", will be addressed separately.",
    "before_after_code_files": [
      "res/localization/rufus.loc||res/localization/rufus.loc",
      "src/pki.c||src/pki.c",
      "src/rufus.rc||src/rufus.rc",
      "src/stdlg.c||src/stdlg.c"
    ]
  },
  "patch_diff": {
    "res/localization/rufus.loc||res/localization/rufus.loc": [
      "File: res/localization/rufus.loc -> res/localization/rufus.loc",
      "--- Hunk 1 ---",
      "[Context before]",
      "487: # eg. \"Partitioning (MBR)...\"",
      "488: t MSG_238 \"Partitioning (%s)...\"",
      "489: t MSG_239 \"Deleting partitions...\"",
      "490: t MSG_241 \"Downloading: %0.1f%%\"",
      "491: t MSG_242 \"Failed to download file.\"",
      "492: t MSG_243 \"Checking for Rufus updates...\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: t MSG_240 \"The signature for the downloaded update can not be validated. This could mean that your \"",
      "491:  \"system is improperly configured for signature validation or indicate a malicious download.\\n\\n\"",
      "492:  \"The download will be deleted. Please check the log for more details.\"",
      "",
      "---------------"
    ],
    "src/pki.c||src/pki.c": [
      "File: src/pki.c -> src/pki.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:  static char error_string[64];",
      "54:  DWORD error_code = GetLastError();",
      "57:   return WindowsErrorString();",
      "59:  switch (error_code) {",
      "",
      "[Removed Lines]",
      "56:  if ((error_code >> 16) != 0x8009)",
      "",
      "[Added Lines]",
      "56:  if (((error_code >> 16) != 0x8009) && ((error_code >> 16) != 0x800B))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "113:   return \"Cannot complete usage check.\";",
      "114:  case CRYPT_E_NO_TRUSTED_SIGNER:",
      "115:   return \"None of the signers of the cryptographic message or certificate trust list is trusted.\";",
      "116:  default:",
      "117:   static_sprintf(error_string, \"Unknown PKI error 0x%08lX\", error_code);",
      "118:   return error_string;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116:  case CERT_E_UNTRUSTEDROOT:",
      "117:   return \"The root certificate is not trusted.\";",
      "118:  case TRUST_E_NOSIGNATURE:",
      "119:   return \"Not digitally signed.\";",
      "120:  case TRUST_E_EXPLICIT_DISTRUST:",
      "121:   return \"One of the certificates used was marked as untrusted by the user.\";",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "268:  }",
      "270:  trust_data.cbStruct = sizeof(trust_data);",
      "273:  trust_data.fdwRevocationChecks = WTD_REVOKE_WHOLECHAIN;",
      "",
      "[Removed Lines]",
      "271:  trust_data.dwUIChoice = WTD_UI_ALL;",
      "",
      "[Added Lines]",
      "283:  trust_data.dwUIChoice = WTD_UI_NONE;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "279:  r = WinVerifyTrust(NULL, &guid_generic_verify, &trust_data);",
      "280:  safe_free(trust_file.pcwszFilePath);",
      "282:  return r;",
      "283: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "293:  switch (r) {",
      "294:  case ERROR_SUCCESS:",
      "295:   break;",
      "296:  case TRUST_E_NOSIGNATURE:",
      "298:   uprintf(\"PKI: File does not appear to be signed: %s\", WinPKIErrorString());",
      "299:   MessageBoxExU(hDlg, lmprintf(MSG_284), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
      "300:   break;",
      "301:  default:",
      "302:   uprintf(\"PKI: Failed to validate signature: %s\", WinPKIErrorString());",
      "303:   MessageBoxExU(hDlg, lmprintf(MSG_240), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
      "304:   break;",
      "305:  }",
      "",
      "---------------"
    ],
    "src/rufus.rc||src/rufus.rc": [
      "File: src/rufus.rc -> src/rufus.rc",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
      "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
      "35: EXSTYLE WS_EX_ACCEPTFILES",
      "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
      "38: BEGIN",
      "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
      "",
      "[Removed Lines]",
      "36: CAPTION \"Rufus 2.17.1186\"",
      "",
      "[Added Lines]",
      "36: CAPTION \"Rufus 2.17.1187\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "368: VS_VERSION_INFO VERSIONINFO",
      "371:  FILEFLAGSMASK 0x3fL",
      "372: #ifdef _DEBUG",
      "373:  FILEFLAGS 0x1L",
      "",
      "[Removed Lines]",
      "369:  FILEVERSION 2,17,1186,0",
      "370:  PRODUCTVERSION 2,17,1186,0",
      "",
      "[Added Lines]",
      "369:  FILEVERSION 2,17,1187,0",
      "370:  PRODUCTVERSION 2,17,1187,0",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "384:         BEGIN",
      "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
      "386:             VALUE \"FileDescription\", \"Rufus\"",
      "388:             VALUE \"InternalName\", \"Rufus\"",
      "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
      "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
      "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
      "392:             VALUE \"ProductName\", \"Rufus\"",
      "394:         END",
      "395:     END",
      "396:     BLOCK \"VarFileInfo\"",
      "",
      "[Removed Lines]",
      "387:             VALUE \"FileVersion\", \"2.17.1186\"",
      "393:             VALUE \"ProductVersion\", \"2.17.1186\"",
      "",
      "[Added Lines]",
      "387:             VALUE \"FileVersion\", \"2.17.1187\"",
      "393:             VALUE \"ProductVersion\", \"2.17.1187\"",
      "",
      "---------------"
    ],
    "src/stdlg.c||src/stdlg.c": [
      "File: src/stdlg.c -> src/stdlg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674:    case 2:  // Launch newer version and close this one",
      "1675:     Sleep(1000); // Add a delay on account of antivirus scanners",
      "1678:      break;",
      "1680:     memset(&si, 0, sizeof(si));",
      "1681:     memset(&pi, 0, sizeof(pi));",
      "",
      "[Removed Lines]",
      "1677:     if (ValidateSignature(hDlg, filepath) != NO_ERROR)",
      "",
      "[Added Lines]",
      "1677:     if (ValidateSignature(hDlg, filepath) != NO_ERROR) {",
      "1679:      _unlinkU(filepath);",
      "1680:      EnableWindow(GetDlgItem(hDlg, IDC_DOWNLOAD), FALSE);",
      "1682:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1ce0cfeebae4bea989d9ae655bc105fb8a8d5f8",
      "candidate_info": {
        "commit_hash": "b1ce0cfeebae4bea989d9ae655bc105fb8a8d5f8",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/b1ce0cfeebae4bea989d9ae655bc105fb8a8d5f8",
        "files": [
          "ChangeLog.txt",
          "src/rufus.h",
          "src/rufus.rc"
        ],
        "message": "v2.12 (build 1054)",
        "before_after_code_files": [
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.12.1053\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.12.1054\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336: VS_VERSION_INFO VERSIONINFO",
          "339:  FILEFLAGSMASK 0x3fL",
          "340: #ifdef _DEBUG",
          "341:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "337:  FILEVERSION 2,12,1053,0",
          "338:  PRODUCTVERSION 2,12,1053,0",
          "",
          "[Added Lines]",
          "337:  FILEVERSION 2,12,1054,0",
          "338:  PRODUCTVERSION 2,12,1054,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:         BEGIN",
          "353:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "354:             VALUE \"FileDescription\", \"Rufus\"",
          "356:             VALUE \"InternalName\", \"Rufus\"",
          "357:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "358:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "359:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "360:             VALUE \"ProductName\", \"Rufus\"",
          "362:         END",
          "363:     END",
          "364:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "355:             VALUE \"FileVersion\", \"2.12.1053\"",
          "361:             VALUE \"ProductVersion\", \"2.12.1053\"",
          "",
          "[Added Lines]",
          "355:             VALUE \"FileVersion\", \"2.12.1054\"",
          "361:             VALUE \"ProductVersion\", \"2.12.1054\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1e3549df9aa5a871486c93534bff78aff9172cc8",
      "candidate_info": {
        "commit_hash": "1e3549df9aa5a871486c93534bff78aff9172cc8",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/1e3549df9aa5a871486c93534bff78aff9172cc8",
        "files": [
          "res/localization/rufus.loc",
          "src/rufus.rc"
        ],
        "message": "[loc] update German translation to latest",
        "before_after_code_files": [
          "res/localization/rufus.loc||res/localization/rufus.loc",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "res/localization/rufus.loc||res/localization/rufus.loc": [
          "File: res/localization/rufus.loc -> res/localization/rufus.loc",
          "--- Hunk 1 ---",
          "[Context before]",
          "5493: ################################################################################",
          "5494: l \"de-DE\" \"German (Deutsch)\" 0x0407, 0x0807, 0x0c07, 0x1007, 0x1407",
          "5496: b \"en-US\"",
          "5498: g IDD_DIALOG",
          "",
          "[Removed Lines]",
          "5495: v 1.0.20",
          "",
          "[Added Lines]",
          "5495: v 1.0.21",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5936:  \"auf eine b\u00f6swillige Aktivit\u00e4t hindeuten...\\nSind Sie sicher, dass Sie diese Datei ausf\u00fchren wollen?\"",
          "5937: t MSG_286 \"\u00dcberschreiben mit Nullen: %0.1f%% fertiggestellt\"",
          "5938: t MSG_287 \"Erkennung nicht wechselbarer USB-Laufwerke\"",
          "5940: ################################################################################",
          "5941: l \"el-GR\" \"Greek (\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac)\" 0x0408",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5939: t MSG_288 \"Administrative Rechte nicht vorhanden\"",
          "5940: t MSG_289 \"Dieses Programm kann nur mit administrativen Rechten ausgef\u00fchrt werden.\"",
          "5941: t MSG_290 \"Datei-Indizierung\"",
          "5942: t MSG_291 \"Versionsauswahl\"",
          "5943: t MSG_292 \"Bitte w\u00e4hlen Sie die Version von Windows aus, die Sie installieren wollen:\"",
          "5944: t MSG_293 \"Nicht unterst\u00fctzte Windows-Version\"",
          "5945: t MSG_294 \"Diese Version von Windows ist nicht mehr von Rufus unterst\u00fctzt.\"",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.12.1027\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.12.1028\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336: VS_VERSION_INFO VERSIONINFO",
          "339:  FILEFLAGSMASK 0x3fL",
          "340: #ifdef _DEBUG",
          "341:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "337:  FILEVERSION 2,12,1027,0",
          "338:  PRODUCTVERSION 2,12,1027,0",
          "",
          "[Added Lines]",
          "337:  FILEVERSION 2,12,1028,0",
          "338:  PRODUCTVERSION 2,12,1028,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:         BEGIN",
          "353:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "354:             VALUE \"FileDescription\", \"Rufus\"",
          "356:             VALUE \"InternalName\", \"Rufus\"",
          "357:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "358:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "359:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "360:             VALUE \"ProductName\", \"Rufus\"",
          "362:         END",
          "363:     END",
          "364:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "355:             VALUE \"FileVersion\", \"2.12.1027\"",
          "361:             VALUE \"ProductVersion\", \"2.12.1027\"",
          "",
          "[Added Lines]",
          "355:             VALUE \"FileVersion\", \"2.12.1028\"",
          "361:             VALUE \"ProductVersion\", \"2.12.1028\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "32b8b5b23217b19593777c26e3c851a21fd147e7",
      "candidate_info": {
        "commit_hash": "32b8b5b23217b19593777c26e3c851a21fd147e7",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/32b8b5b23217b19593777c26e3c851a21fd147e7",
        "files": [
          "res/localization/rufus.loc",
          "src/rufus.rc"
        ],
        "message": "[loc] update Portuguese (Brazilian) translation to latest\n\n* Closes #981",
        "before_after_code_files": [
          "res/localization/rufus.loc||res/localization/rufus.loc",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "res/localization/rufus.loc||res/localization/rufus.loc": [
          "File: res/localization/rufus.loc -> res/localization/rufus.loc",
          "--- Hunk 1 ---",
          "[Context before]",
          "12280: ################################################################################",
          "12281: l \"pt-BR\" \"Portuguese Brazilian (Portugu\u00eas do Brasil)\" 0x0416",
          "12283: b \"en-US\"",
          "12285: # Main dialog",
          "",
          "[Removed Lines]",
          "12282: v 1.0.21",
          "",
          "[Added Lines]",
          "12282: v 1.0.22",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "12718: t MSG_291 \"Sele\u00e7\u00e3o de vers\u00e3o\"",
          "12719: t MSG_292 \"Por favor, selecione a vers\u00e3o do Windows que deseja instalar:\"",
          "12720: t MSG_293 \"Vers\u00e3o do Windows n\u00e3o suportada\"",
          "12723: ################################################################################",
          "12724: l \"pt-PT\" \"Portuguese Standard (Portugu\u00eas)\" 0x0816",
          "",
          "[Removed Lines]",
          "12721: t MSG_294 \"Esta vers\u00e3o do Windows n\u00e3o \u00e9 mais suportada pelo Rufos\"",
          "",
          "[Added Lines]",
          "12721: t MSG_294 \"Esta vers\u00e3o do Windows n\u00e3o \u00e9 mais suportada pelo Rufus\"",
          "12722: t MSG_295 \"Aten\u00e7\u00e3o: vers\u00e3o n\u00e3o oficial\"",
          "12723: t MSG_296 \"Esta vers\u00e3o do Rufus n\u00e3o foi desenvolvida pelo(s) desenvolvedor(es) oficiais.\\n\\n\"",
          "12724:  \"Tem certeza que deseja continuar?\"",
          "12725: t MSG_297 \"ISO reduzida detectada\"",
          "12726: t MSG_298 \"O arquivo ISO selecionado n\u00e3o corresponde ao tamanho declarado: %s restantes!\\n\\n\"",
          "12727:  \"Se voc\u00ea obteve este arquivo da Internet, fa\u00e7a o download de uma nova c\u00f3pia e verifique que o \"",
          "12728:  \"MD5 ou SHA checksums correspondem aos oficiais.\\n\\nVoc\u00ea pode calcular o MD5 ou SHA no Rufus \"",
          "12729:  \"clicando no bot\u00e3o '#'.\"",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.16.1157\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.16.1158\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368: VS_VERSION_INFO VERSIONINFO",
          "371:  FILEFLAGSMASK 0x3fL",
          "372: #ifdef _DEBUG",
          "373:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "369:  FILEVERSION 2,16,1157,0",
          "370:  PRODUCTVERSION 2,16,1157,0",
          "",
          "[Added Lines]",
          "369:  FILEVERSION 2,16,1158,0",
          "370:  PRODUCTVERSION 2,16,1158,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:         BEGIN",
          "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "386:             VALUE \"FileDescription\", \"Rufus\"",
          "388:             VALUE \"InternalName\", \"Rufus\"",
          "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "392:             VALUE \"ProductName\", \"Rufus\"",
          "394:         END",
          "395:     END",
          "396:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "387:             VALUE \"FileVersion\", \"2.16.1157\"",
          "393:             VALUE \"ProductVersion\", \"2.16.1157\"",
          "",
          "[Added Lines]",
          "387:             VALUE \"FileVersion\", \"2.16.1158\"",
          "393:             VALUE \"ProductVersion\", \"2.16.1158\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "903ac993f2c762b2f4abc074c6fb9028117a9103",
      "candidate_info": {
        "commit_hash": "903ac993f2c762b2f4abc074c6fb9028117a9103",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/903ac993f2c762b2f4abc074c6fb9028117a9103",
        "files": [
          "_sign.cmd",
          "configure",
          "configure.ac",
          "res/down.ico",
          "res/up.ico",
          "src/Makefile.am",
          "src/Makefile.in",
          "src/badblocks.c",
          "src/checksum.c",
          "src/dev.c",
          "src/drive.c",
          "src/format.c",
          "src/iso.c",
          "src/localization.c",
          "src/missing.h",
          "src/resource.h",
          "src/rufus.c",
          "src/rufus.h",
          "src/rufus.rc",
          "src/stdfn.c",
          "src/stdio.c",
          "src/stdlg.c",
          "src/vhd.c"
        ],
        "message": "[misc] remove no longer needed XP workarounds",
        "before_after_code_files": [
          "_sign.cmd||_sign.cmd",
          "configure.ac||configure.ac",
          "src/Makefile.am||src/Makefile.am",
          "src/Makefile.in||src/Makefile.in",
          "src/badblocks.c||src/badblocks.c",
          "src/checksum.c||src/checksum.c",
          "src/dev.c||src/dev.c",
          "src/drive.c||src/drive.c",
          "src/format.c||src/format.c",
          "src/iso.c||src/iso.c",
          "src/localization.c||src/localization.c",
          "src/missing.h||src/missing.h",
          "src/resource.h||src/resource.h",
          "src/rufus.c||src/rufus.c",
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc",
          "src/stdfn.c||src/stdfn.c",
          "src/stdio.c||src/stdio.c",
          "src/stdlg.c||src/stdlg.c",
          "src/vhd.c||src/vhd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc",
            "src/stdlg.c||src/stdlg.c"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc",
            "src/stdlg.c||src/stdlg.c"
          ]
        }
      },
      "candidate_diff": {
        "_sign.cmd||_sign.cmd": [
          "File: _sign.cmd -> _sign.cmd",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: @echo off",
          "6: exit",
          "",
          "[Removed Lines]",
          "2: \"C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\signtool\" sign /v /sha1 655f6413a8f721e3286ace95025c9e0ea132a984 /fd SHA1 /tr http://timestamp.comodoca.com/rfc3161 /td SHA1 %1",
          "3: if ERRORLEVEL 1 goto out",
          "4: \"C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\signtool\" sign /as /v /sha1 5759b23dc8f45e9120a7317f306e5b6890b612f0 /fd SHA256 /tr http://timestamp.comodoca.com/rfc3161 /td SHA256 %1",
          "5: :out",
          "",
          "[Added Lines]",
          "2: \"C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64\\signtool\" sign /v /sha1 5759b23dc8f45e9120a7317f306e5b6890b612f0 /fd SHA256 /tr http://timestamp.comodoca.com/rfc3161 /td SHA256 %1",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: AC_C_INLINE",
          "18: AC_DEFINE([_GNU_SOURCE], [], [Use GNU extensions])",
          "23: # \"-Wl,--nxcompat\" to enable DEP (Data Execution Prevention)",
          "24: AM_LDFLAGS=\"${AM_LDFLAGS} -Wl,-no-undefined -Wl,--nxcompat\"",
          "",
          "[Removed Lines]",
          "20: # Clang needs an explicit WIN32_WINNT defined else it produces warnings",
          "21: # in msapi_utf8.h - including winver.h only doesn't work",
          "22: AM_CFLAGS=\"${AM_CFLAGS} -DWINVER=0x501 -D_WIN32_IE=0x501 -D_WIN32_WINNT=0x501\"",
          "",
          "[Added Lines]",
          "20: AM_CFLAGS=\"${AM_CFLAGS} -DWINVER=0x601 -D_WIN32_WINNT=0x601 -D_WIN32_IE=0x800\"",
          "",
          "---------------"
        ],
        "src/Makefile.am||src/Makefile.am": [
          "File: src/Makefile.am -> src/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: rufus_CFLAGS = -I./ms-sys/inc -I./syslinux/libfat -I./syslinux/libinstaller -I./syslinux/win -I./libcdio $(AM_CFLAGS)",
          "16: rufus_LDFLAGS = $(AM_LDFLAGS) -mwindows",
          "17: rufus_LDADD = rufus_rc.o bled/libbled.a ms-sys/libmssys.a syslinux/libfat/libfat.a syslinux/libinstaller/libinstaller.a syslinux/win/libwin.a \\",
          "",
          "[Removed Lines]",
          "18:  libcdio/iso9660/libiso9660.a libcdio/udf/libudf.a libcdio/driver/libdriver.a -lsetupapi -lole32 -lgdi32 -lwininet -lshlwapi -lcrypt32 -lwintrust -lcomdlg32 -luuid -lpsapi",
          "",
          "[Added Lines]",
          "18:  libcdio/iso9660/libiso9660.a libcdio/udf/libudf.a libcdio/driver/libdriver.a -lsetupapi -lole32 -lgdi32 -lwininet -lshlwapi -lcrypt32 -lwintrust -lcomdlg32 -lcomctl32 -luuid -lpsapi",
          "",
          "---------------"
        ],
        "src/Makefile.in||src/Makefile.in": [
          "File: src/Makefile.in -> src/Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "276: rufus_CFLAGS = -I./ms-sys/inc -I./syslinux/libfat -I./syslinux/libinstaller -I./syslinux/win -I./libcdio $(AM_CFLAGS)",
          "277: rufus_LDFLAGS = $(AM_LDFLAGS) -mwindows",
          "278: rufus_LDADD = rufus_rc.o bled/libbled.a ms-sys/libmssys.a syslinux/libfat/libfat.a syslinux/libinstaller/libinstaller.a syslinux/win/libwin.a \\",
          "281: all: all-recursive",
          "",
          "[Removed Lines]",
          "279:  libcdio/iso9660/libiso9660.a libcdio/udf/libudf.a libcdio/driver/libdriver.a -lsetupapi -lole32 -lgdi32 -lwininet -lshlwapi -lcrypt32 -lwintrust -lcomdlg32 -luuid -lpsapi",
          "",
          "[Added Lines]",
          "279:  libcdio/iso9660/libiso9660.a libcdio/udf/libudf.a libcdio/driver/libdriver.a -lsetupapi -lole32 -lgdi32 -lwininet -lshlwapi -lcrypt32 -lwintrust -lcomdlg32 -lcomctl32 -luuid -lpsapi",
          "",
          "---------------"
        ],
        "src/badblocks.c||src/badblocks.c": [
          "File: src/badblocks.c -> src/badblocks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:  unsigned char bpattern[sizeof(pattern)], *ptr;",
          "352:  if (pattern == (unsigned int) ~0) {",
          "354:   for (ptr = buffer; ptr < buffer + n; ptr++) {",
          "356:    (*ptr) = rand() % (1 << (8 * sizeof(char)));",
          "",
          "[Removed Lines]",
          "353:   srand((unsigned int)_GetTickCount64());",
          "",
          "[Added Lines]",
          "353:   srand((unsigned int)GetTickCount64());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "452:  cur_pattern = 0;",
          "454:  for (pat_idx = 0; pat_idx < nb_passes; pat_idx++) {",
          "456:   if (cancel_ops) goto out;",
          "458:   id_offset = rand() * (block_size-sizeof(blk_t)) / RAND_MAX;",
          "",
          "[Removed Lines]",
          "455:   srand((unsigned int)_GetTickCount64());",
          "",
          "[Added Lines]",
          "455:   srand((unsigned int)GetTickCount64());",
          "",
          "---------------"
        ],
        "src/checksum.c||src/checksum.c": [
          "File: src/checksum.c -> src/checksum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "929:  read_size[0] = 1; // Don't trigger the first loop break",
          "930:  for (rb = 0; ;rb += read_size[_bufnum]) {",
          "934:    format_percent = (100.0f*rb) / (1.0f*img_report.image_size);",
          "935:    PrintInfo(0, MSG_271, format_percent);",
          "936:    SendMessage(hProgress, PBM_SETPOS, (WPARAM)((format_percent / 100.0f)*MAX_PROGRESS), 0);",
          "",
          "[Removed Lines]",
          "932:   if (_GetTickCount64() > LastRefresh + MAX_REFRESH) {",
          "933:    LastRefresh = _GetTickCount64();",
          "",
          "[Added Lines]",
          "932:   if (GetTickCount64() > LastRefresh + MAX_REFRESH) {",
          "933:    LastRefresh = GetTickCount64();",
          "",
          "---------------"
        ],
        "src/dev.c||src/dev.c": [
          "File: src/dev.c -> src/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:  USB_CYCLE_PORT_PARAMS cycle_port;",
          "140:   uprintf(\"You must wait at least 10 seconds before trying to reset a device\");",
          "141:   return FALSE;",
          "142:  }",
          "",
          "[Removed Lines]",
          "139:  if (_GetTickCount64() < LastReset + 10000ULL) {",
          "",
          "[Added Lines]",
          "139:  if (GetTickCount64() < LastReset + 10000ULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:  if (DriveHub.String[index] == NULL)",
          "145:   return FALSE;",
          "149:  handle = CreateFileA(DriveHub.String[index], GENERIC_WRITE, FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_FLAG_OVERLAPPED, NULL);",
          "150:  if (handle == INVALID_HANDLE_VALUE) {",
          "",
          "[Removed Lines]",
          "147:  LastReset = _GetTickCount64();",
          "",
          "[Added Lines]",
          "147:  LastReset = GetTickCount64();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "434:  full_list_size = 0;",
          "438:  for (s=0; s<ARRAYSIZE(usbstor_name); s++) {",
          "",
          "[Removed Lines]",
          "435:  ulFlags = CM_GETIDLIST_FILTER_SERVICE;",
          "436:  if (nWindowsVersion >= WINDOWS_7)",
          "437:   ulFlags |= CM_GETIDLIST_FILTER_PRESENT;",
          "",
          "[Added Lines]",
          "435:  ulFlags = CM_GETIDLIST_FILTER_SERVICE | CM_GETIDLIST_FILTER_PRESENT;",
          "",
          "---------------"
        ],
        "src/drive.c||src/drive.c": [
          "File: src/drive.c -> src/drive.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "121: {",
          "122:  int i;",
          "123:  BYTE access_mask = 0;",
          "125:  HANDLE hDrive = INVALID_HANDLE_VALUE;",
          "126:  char DevPath[MAX_PATH];",
          "",
          "[Removed Lines]",
          "124:  DWORD size, EndTime;",
          "",
          "[Added Lines]",
          "124:  DWORD size;",
          "125:  uint64_t EndTime;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:   }",
          "174:   uprintf(\"Requesting lock...\");",
          "176:   do {",
          "177:    if (DeviceIoControl(hDrive, FSCTL_LOCK_VOLUME, NULL, 0, NULL, 0, &size, NULL))",
          "178:     goto out;",
          "179:    if (IS_ERROR(FormatStatus)) // User cancel",
          "180:     break;",
          "181:    Sleep(DRIVE_ACCESS_TIMEOUT / DRIVE_ACCESS_RETRIES);",
          "184:   uprintf(\"Could not lock access to %s: %s\", Path, WindowsErrorString());",
          "",
          "[Removed Lines]",
          "175:   EndTime = GetTickCount() + DRIVE_ACCESS_TIMEOUT;",
          "182:   } while (GetTickCount() < EndTime);",
          "",
          "[Added Lines]",
          "176:   EndTime = GetTickCount64() + DRIVE_ACCESS_TIMEOUT;",
          "183:   } while (GetTickCount64() < EndTime);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "316: BOOL WaitForLogical(DWORD DriveIndex)",
          "317: {",
          "319:  char* LogicalPath = NULL;",
          "324:  do {",
          "325:   LogicalPath = GetLogicalName(DriveIndex, FALSE, TRUE);",
          "326:   if (LogicalPath != NULL) {",
          "",
          "[Removed Lines]",
          "318:  DWORD EndTime;",
          "323:  EndTime = GetTickCount() + DRIVE_ACCESS_TIMEOUT;",
          "",
          "[Added Lines]",
          "319:  uint64_t EndTime;",
          "324:  EndTime = GetTickCount64() + DRIVE_ACCESS_TIMEOUT;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "330:   if (IS_ERROR(FormatStatus)) // User cancel",
          "331:    return FALSE;",
          "332:   Sleep(DRIVE_ACCESS_TIMEOUT/DRIVE_ACCESS_RETRIES);",
          "334:  uprintf(\"Timeout while waiting for logical drive\");",
          "335:  return FALSE;",
          "336: }",
          "",
          "[Removed Lines]",
          "333:  } while (GetTickCount() < EndTime);",
          "",
          "[Added Lines]",
          "334:  } while (GetTickCount64() < EndTime);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "826:      (CompareGUID(&DriveLayout->PartitionEntry[i].Gpt.PartitionType, &PARTITION_MSFT_RESERVED_GUID)) ||",
          "827:      (CompareGUID(&DriveLayout->PartitionEntry[i].Gpt.PartitionType, &PARTITION_SYSTEM_GUID)) )",
          "828:     --SelectedDrive.nPartitions;",
          "831:     ret = TRUE;",
          "832:   }",
          "833:   break;",
          "",
          "[Removed Lines]",
          "829:    if ( (memcmp(&PARTITION_BASIC_DATA_GUID, &DriveLayout->PartitionEntry[i].Gpt.PartitionType, sizeof(GUID)) == 0) &&",
          "830:      (nWindowsVersion >= WINDOWS_VISTA) )",
          "",
          "[Added Lines]",
          "830:    if (memcmp(&PARTITION_BASIC_DATA_GUID, &DriveLayout->PartitionEntry[i].Gpt.PartitionType, sizeof(GUID)) == 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1247:   DriveLayoutEx.PartitionStyle = PARTITION_STYLE_MBR;",
          "1248:   DriveLayoutEx.PartitionCount = 4; // Must be multiple of 4 for MBR",
          "",
          "[Removed Lines]",
          "1245:   CreateDisk.Mbr.Signature = mbr_uefi_marker?MBR_UEFI_MARKER:(DWORD)_GetTickCount64();",
          "",
          "[Added Lines]",
          "1245:   CreateDisk.Mbr.Signature = mbr_uefi_marker?MBR_UEFI_MARKER:(DWORD)GetTickCount64();",
          "",
          "---------------"
        ],
        "src/format.c||src/format.c": [
          "File: src/format.c -> src/format.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "608:  format_percent = 0.0f;",
          "609:  for (i=0; i<(SystemAreaSize+BurstSize-1); i+=BurstSize) {",
          "612:    format_percent = (100.0f*i)/(1.0f*(SystemAreaSize+BurstSize));",
          "613:    PrintInfo(0, MSG_217, format_percent);",
          "614:    UpdateProgress(OP_FORMAT, format_percent);",
          "",
          "[Removed Lines]",
          "610:   if (_GetTickCount64() > LastRefresh + MAX_REFRESH) {",
          "611:    LastRefresh = _GetTickCount64();",
          "",
          "[Added Lines]",
          "610:   if (GetTickCount64() > LastRefresh + MAX_REFRESH) {",
          "611:    LastRefresh = GetTickCount64();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1517: static void update_progress(const uint64_t processed_bytes)",
          "1518: {",
          "1521:   format_percent = (100.0f*processed_bytes)/(1.0f*img_report.image_size);",
          "1522:   PrintInfo(0, MSG_261, format_percent);",
          "1523:   UpdateProgress(OP_FORMAT, format_percent);",
          "",
          "[Removed Lines]",
          "1519:  if (_GetTickCount64() > LastRefresh + MAX_REFRESH) {",
          "1520:   LastRefresh = _GetTickCount64();",
          "",
          "[Added Lines]",
          "1519:  if (GetTickCount64() > LastRefresh + MAX_REFRESH) {",
          "1520:   LastRefresh = GetTickCount64();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1575:   rSize = BufSize;",
          "1576:   for (wb = 0, wSize = 0; wb < (uint64_t)SelectedDrive.DiskSize; wb += wSize) {",
          "1579:     format_percent = (100.0f*wb) / (1.0f*target_size);",
          "1580:     PrintInfo(0, hSourceImage?MSG_261:MSG_286, format_percent);",
          "1581:     UpdateProgress(OP_FORMAT, format_percent);",
          "",
          "[Removed Lines]",
          "1577:    if (_GetTickCount64() > LastRefresh + MAX_REFRESH) {",
          "1578:     LastRefresh = _GetTickCount64();",
          "",
          "[Added Lines]",
          "1577:    if (GetTickCount64() > LastRefresh + MAX_REFRESH) {",
          "1578:     LastRefresh = GetTickCount64();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1661:  char kolibri_dst[] = \"?:\\\\MTLD_F32\";",
          "1662:  char grub4dos_dst[] = \"?:\\\\grldr\";",
          "1669:  fs = (int)ComboBox_GetItemData(hFileSystem, ComboBox_GetCurSel(hFileSystem));",
          "1670:  bt = (int)ComboBox_GetItemData(hBootType, ComboBox_GetCurSel(hBootType));",
          "1671:  pt = GETPARTTYPE((int)ComboBox_GetItemData(hPartitionScheme, ComboBox_GetCurSel(hPartitionScheme)));",
          "",
          "[Removed Lines]",
          "1664:  PF_TYPE_DECL(WINAPI, LANGID, GetThreadUILanguage, (void));",
          "1665:  PF_TYPE_DECL(WINAPI, LANGID, SetThreadUILanguage, (LANGID));",
          "1666:  PF_INIT(GetThreadUILanguage, Kernel32);",
          "1667:  PF_INIT(SetThreadUILanguage, Kernel32);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1751:   UpdateProgress(OP_ANALYZE_MBR, -1.0f);",
          "1752:  }",
          "1758:  if (zero_drive) {",
          "1759:   WriteDrive(hPhysicalDrive, NULL);",
          "1760:   goto out;",
          "",
          "[Removed Lines]",
          "1755:  if (nWindowsVersion <= WINDOWS_XP)",
          "1756:   InitializeDisk(hPhysicalDrive);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1768:   if ((!ClearMBRGPT(hPhysicalDrive, SelectedDrive.DiskSize, SelectedDrive.SectorSize, use_large_fat32)) ||",
          "1769:    (!InitializeDisk(hPhysicalDrive))) {",
          "1770:    uprintf(\"Could not reset partitions\\n\");",
          "",
          "[Removed Lines]",
          "1767:  if ((nWindowsVersion > WINDOWS_XP) && ((!IsChecked(IDC_BOOT)) || (bt != BT_IMG)))  {",
          "",
          "[Added Lines]",
          "1758:  if ((!IsChecked(IDC_BOOT)) || (bt != BT_IMG))  {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2069:   if ((bt == BT_ISO) && (fs == FS_NTFS)) {",
          "2074:      uprintf(\"Note: CheckDisk messages may be localized\");",
          "2075:    }",
          "2076:    CheckDisk(drive_name[0]);",
          "",
          "[Removed Lines]",
          "2071:    if ((pfGetThreadUILanguage != NULL) && (PRIMARYLANGID(pfGetThreadUILanguage()) != LANG_ENGLISH)) {",
          "2072:     pfSetThreadUILanguage(MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US));",
          "2073:     if (PRIMARYLANGID(pfGetThreadUILanguage()) != LANG_ENGLISH)",
          "",
          "[Added Lines]",
          "2062:    if (PRIMARYLANGID(GetThreadUILanguage()) != LANG_ENGLISH) {",
          "2063:     SetThreadUILanguage(MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US));",
          "2064:     if (PRIMARYLANGID(GetThreadUILanguage()) != LANG_ENGLISH)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2169:   }",
          "2170:   if (rSize == 0)",
          "2171:    break;",
          "2174:    format_percent = (100.0f*wb)/(1.0f*img_save->DeviceSize);",
          "2175:    PrintInfo(0, MSG_261, format_percent);",
          "2176:    UpdateProgress(OP_FORMAT, format_percent);",
          "",
          "[Removed Lines]",
          "2172:   if (_GetTickCount64() > LastRefresh + MAX_REFRESH) {",
          "2173:    LastRefresh = _GetTickCount64();",
          "",
          "[Added Lines]",
          "2163:   if (GetTickCount64() > LastRefresh + MAX_REFRESH) {",
          "2164:    LastRefresh = GetTickCount64();",
          "",
          "---------------"
        ],
        "src/iso.c||src/iso.c": [
          "File: src/iso.c -> src/iso.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include <errno.h>",
          "33: #include <direct.h>",
          "34: #include <ctype.h>",
          "36: #include <cdio/cdio.h>",
          "37: #include <cdio/logging.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include <virtdisk.h>",
          "",
          "---------------"
        ],
        "src/localization.c||src/localization.c": [
          "File: src/localization.c -> src/localization.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "447:  KillTimer(hMainDialog, idEvent);",
          "448:  bOutputTimerArmed[i] = FALSE;",
          "449:  PrintMessage[i](output_msg[i]);",
          "451: }",
          "453: static void OutputMessage(BOOL info, char* msg)",
          "",
          "[Removed Lines]",
          "450:  last_msg_time[i] = _GetTickCount64();",
          "",
          "[Added Lines]",
          "450:  last_msg_time[i] = GetTickCount64();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "460:   output_msg[i] = msg;",
          "461:  } else {",
          "464:   if (delta < (2 * MAX_REFRESH)) {",
          "466:    output_msg[i] = msg;",
          "",
          "[Removed Lines]",
          "463:   delta = _GetTickCount64() - last_msg_time[i];",
          "",
          "[Added Lines]",
          "463:   delta = GetTickCount64() - last_msg_time[i];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "468:    bOutputTimerArmed[i] = TRUE;",
          "469:   } else {",
          "470:    PrintMessage[i](msg);",
          "472:   }",
          "473:  }",
          "474: }",
          "",
          "[Removed Lines]",
          "471:    last_msg_time[i] = _GetTickCount64();",
          "",
          "[Added Lines]",
          "471:    last_msg_time[i] = GetTickCount64();",
          "",
          "---------------"
        ],
        "src/missing.h||src/missing.h": [
          "File: src/missing.h -> src/missing.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #include <windows.h>",
          "26: #pragma once",
          "",
          "[Removed Lines]",
          "21: #include <commctrl.h>",
          "22: #include <shlobj.h>",
          "23: #include <wininet.h>",
          "24: #include <stdint.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "106: #define _RT_RCDATA   MAKEINTRESOURCEA(10)",
          "107: #define _RT_GROUP_ICON  MAKEINTRESOURCEA((ULONG_PTR)(MAKEINTRESOURCEA(3) + 11))",
          "137: #ifndef WM_CLIENTSHUTDOWN",
          "138: #define WM_CLIENTSHUTDOWN 0x3B",
          "139: #endif",
          "140: #ifndef WM_COPYGLOBALDATA",
          "141: #define WM_COPYGLOBALDATA 0x49",
          "142: #endif",
          "163: #define VIRTUAL_STORAGE_TYPE_VENDOR_MICROSOFT \\",
          "164:  { 0xEC984AECL, 0xA0F9, 0x47e9, { 0x90, 0x1F, 0x71, 0x41, 0x5A, 0x66, 0x34, 0x5B } }",
          "",
          "[Removed Lines]",
          "110: #ifndef PBM_SETSTATE",
          "111: #define PBM_SETSTATE (WM_USER+16)",
          "112: #endif",
          "113: #ifndef PBST_NORMAL",
          "114: #define PBST_NORMAL 1",
          "115: #endif",
          "116: #ifndef PBST_ERROR",
          "117: #define PBST_ERROR 2",
          "118: #endif",
          "119: #ifndef PBST_PAUSED",
          "120: #define PBST_PAUSED 3",
          "121: #endif",
          "122: #ifndef BUTTON_IMAGELIST_ALIGN_CENTER",
          "123: #define BUTTON_IMAGELIST_ALIGN_CENTER 4",
          "124: #endif",
          "125: #ifndef BCM_SETIMAGELIST",
          "126: #define BCM_SETIMAGELIST 0x1602",
          "127: #endif",
          "128: #ifndef DBT_CUSTOMEVENT",
          "129: #define DBT_CUSTOMEVENT 0x8006",
          "130: #endif",
          "131: #ifndef ERROR_FILE_TOO_LARGE",
          "132: #define ERROR_FILE_TOO_LARGE 223",
          "133: #endif",
          "134: #ifndef MSGFLT_ADD",
          "135: #define MSGFLT_ADD 1",
          "136: #endif",
          "143: #ifndef PBS_MARQUEE",
          "144: #define PBS_MARQUEE 0x08",
          "145: #endif",
          "146: #ifndef PBM_SETMARQUEE",
          "147: #define PBM_SETMARQUEE (WM_USER+10)",
          "148: #endif",
          "150: typedef struct {",
          "151:  HIMAGELIST himl;",
          "152:  RECT margin;",
          "153:  UINT uAlign;",
          "154: } MY_BUTTON_IMAGELIST;",
          "156: typedef struct",
          "157: {",
          "158:  LPCITEMIDLIST pidl;",
          "159:  BOOL fRecursive;",
          "160: } MY_SHChangeNotifyEntry;",
          "166: typedef enum _VIRTUAL_DISK_ACCESS_MASK {",
          "167:  VIRTUAL_DISK_ACCESS_NONE = 0x00000000,",
          "168:  VIRTUAL_DISK_ACCESS_ATTACH_RO = 0x00010000,",
          "169:  VIRTUAL_DISK_ACCESS_ATTACH_RW = 0x00020000,",
          "170:  VIRTUAL_DISK_ACCESS_DETACH = 0x00040000,",
          "171:  VIRTUAL_DISK_ACCESS_GET_INFO = 0x00080000,",
          "172:  VIRTUAL_DISK_ACCESS_CREATE = 0x00100000,",
          "173:  VIRTUAL_DISK_ACCESS_METAOPS = 0x00200000,",
          "174:  VIRTUAL_DISK_ACCESS_READ = 0x000d0000,",
          "175:  VIRTUAL_DISK_ACCESS_ALL = 0x003f0000,",
          "176:  VIRTUAL_DISK_ACCESS_WRITABLE = 0x00320000",
          "177: } VIRTUAL_DISK_ACCESS_MASK;",
          "179: typedef enum _OPEN_VIRTUAL_DISK_FLAG {",
          "180:  OPEN_VIRTUAL_DISK_FLAG_NONE = 0x00000000,",
          "181:  OPEN_VIRTUAL_DISK_FLAG_NO_PARENTS = 0x00000001,",
          "182:  OPEN_VIRTUAL_DISK_FLAG_BLANK_FILE = 0x00000002,",
          "183:  OPEN_VIRTUAL_DISK_FLAG_BOOT_DRIVE = 0x00000004,",
          "184:  OPEN_VIRTUAL_DISK_FLAG_CACHED_IO = 0x00000008,",
          "185:  OPEN_VIRTUAL_DISK_FLAG_CUSTOM_DIFF_CHAIN = 0x00000010",
          "186: } OPEN_VIRTUAL_DISK_FLAG;",
          "188: typedef enum _OPEN_VIRTUAL_DISK_VERSION {",
          "189:  OPEN_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0,",
          "190:  OPEN_VIRTUAL_DISK_VERSION_1 = 1,",
          "191:  OPEN_VIRTUAL_DISK_VERSION_2 = 2",
          "192: } OPEN_VIRTUAL_DISK_VERSION;",
          "194: typedef enum _ATTACH_VIRTUAL_DISK_FLAG {",
          "195:  ATTACH_VIRTUAL_DISK_FLAG_NONE = 0x00000000,",
          "196:  ATTACH_VIRTUAL_DISK_FLAG_READ_ONLY = 0x00000001,",
          "197:  ATTACH_VIRTUAL_DISK_FLAG_NO_DRIVE_LETTER = 0x00000002,",
          "198:  ATTACH_VIRTUAL_DISK_FLAG_PERMANENT_LIFETIME = 0x00000004,",
          "199:  ATTACH_VIRTUAL_DISK_FLAG_NO_LOCAL_HOST = 0x00000008",
          "200: } ATTACH_VIRTUAL_DISK_FLAG;",
          "202: typedef enum _ATTACH_VIRTUAL_DISK_VERSION {",
          "203:  ATTACH_VIRTUAL_DISK_VERSION_UNSPECIFIED = 0,",
          "204:  ATTACH_VIRTUAL_DISK_VERSION_1 = 1",
          "205: } ATTACH_VIRTUAL_DISK_VERSION;",
          "207: typedef enum _DETACH_VIRTUAL_DISK_FLAG {",
          "208:  DETACH_VIRTUAL_DISK_FLAG_NONE = 0x00000000",
          "209: } DETACH_VIRTUAL_DISK_FLAG;",
          "211: #ifndef _VIRTUAL_STORAGE_TYPE_DEFINED",
          "212: #define _VIRTUAL_STORAGE_TYPE_DEFINED",
          "213: typedef struct _VIRTUAL_STORAGE_TYPE {",
          "214:  ULONG DeviceId;",
          "215:  GUID  VendorId;",
          "216: } VIRTUAL_STORAGE_TYPE, *PVIRTUAL_STORAGE_TYPE;",
          "217: #endif",
          "219: typedef struct _OPEN_VIRTUAL_DISK_PARAMETERS {",
          "220:  OPEN_VIRTUAL_DISK_VERSION Version;",
          "221:  union {",
          "222:   struct {",
          "223:    ULONG RWDepth;",
          "224:   } Version1;",
          "225:   struct {",
          "226:    BOOL GetInfoOnly;",
          "227:    BOOL ReadOnly;",
          "228:    GUID ResiliencyGuid;",
          "229:   } Version2;",
          "230:  };",
          "231: } OPEN_VIRTUAL_DISK_PARAMETERS, *POPEN_VIRTUAL_DISK_PARAMETERS;",
          "233: typedef struct _ATTACH_VIRTUAL_DISK_PARAMETERS {",
          "234:  ATTACH_VIRTUAL_DISK_VERSION Version;",
          "235:  union {",
          "236:   struct {",
          "237:    ULONG Reserved;",
          "238:   } Version1;",
          "239:  };",
          "240: } ATTACH_VIRTUAL_DISK_PARAMETERS, *PATTACH_VIRTUAL_DISK_PARAMETERS;",
          "243: #if !defined(ERROR_INTERNET_DISCONNECTED)",
          "244: #define ERROR_INTERNET_DISCONNECTED (INTERNET_ERROR_BASE + 163)",
          "245: #endif",
          "246: #if !defined(ERROR_INTERNET_SERVER_UNREACHABLE)",
          "247: #define ERROR_INTERNET_SERVER_UNREACHABLE (INTERNET_ERROR_BASE + 164)",
          "248: #endif",
          "249: #if !defined(ERROR_INTERNET_PROXY_SERVER_UNREACHABLE)",
          "250: #define ERROR_INTERNET_PROXY_SERVER_UNREACHABLE (INTERNET_ERROR_BASE + 165)",
          "251: #endif",
          "252: #if !defined(ERROR_INTERNET_BAD_AUTO_PROXY_SCRIPT)",
          "253: #define ERROR_INTERNET_BAD_AUTO_PROXY_SCRIPT (INTERNET_ERROR_BASE + 166)",
          "254: #endif",
          "255: #if !defined(ERROR_INTERNET_UNABLE_TO_DOWNLOAD_SCRIPT)",
          "256: #define ERROR_INTERNET_UNABLE_TO_DOWNLOAD_SCRIPT (INTERNET_ERROR_BASE + 167)",
          "257: #endif",
          "258: #if !defined(ERROR_INTERNET_FAILED_DUETOSECURITYCHECK)",
          "259: #define ERROR_INTERNET_FAILED_DUETOSECURITYCHECK (INTERNET_ERROR_BASE + 171)",
          "260: #endif",
          "261: #if !defined(ERROR_INTERNET_NOT_INITIALIZED)",
          "262: #define ERROR_INTERNET_NOT_INITIALIZED (INTERNET_ERROR_BASE + 172)",
          "263: #endif",
          "264: #if !defined(ERROR_INTERNET_NEED_MSN_SSPI_PKG)",
          "265: #define ERROR_INTERNET_NEED_MSN_SSPI_PKG (INTERNET_ERROR_BASE + 173)",
          "266: #endif",
          "267: #if !defined(ERROR_INTERNET_LOGIN_FAILURE_DISPLAY_ENTITY_BODY)",
          "268: #define ERROR_INTERNET_LOGIN_FAILURE_DISPLAY_ENTITY_BODY (INTERNET_ERROR_BASE + 174)",
          "269: #endif",
          "274: #ifndef __IFileDialog_INTERFACE_DEFINED__",
          "275: #define __IFileDialog_INTERFACE_DEFINED__",
          "277: enum _FILEOPENDIALOGOPTIONS {",
          "278:  FOS_OVERWRITEPROMPT = 0x2,",
          "279:  FOS_STRICTFILETYPES = 0x4,",
          "280:  FOS_NOCHANGEDIR = 0x8,",
          "281:  FOS_PICKFOLDERS = 0x20,",
          "282:  FOS_FORCEFILESYSTEM = 0x40,",
          "283:  FOS_ALLNONSTORAGEITEMS = 0x80,",
          "284:  FOS_NOVALIDATE = 0x100,",
          "285:  FOS_ALLOWMULTISELECT = 0x200,",
          "286:  FOS_PATHMUSTEXIST = 0x800,",
          "287:  FOS_FILEMUSTEXIST = 0x1000,",
          "288:  FOS_CREATEPROMPT = 0x2000,",
          "289:  FOS_SHAREAWARE = 0x4000,",
          "290:  FOS_NOREADONLYRETURN = 0x8000,",
          "291:  FOS_NOTESTFILECREATE = 0x10000,",
          "292:  FOS_HIDEMRUPLACES = 0x20000,",
          "293:  FOS_HIDEPINNEDPLACES = 0x40000,",
          "294:  FOS_NODEREFERENCELINKS = 0x100000,",
          "295:  FOS_DONTADDTORECENT = 0x2000000,",
          "296:  FOS_FORCESHOWHIDDEN = 0x10000000,",
          "297:  FOS_DEFAULTNOMINIMODE = 0x20000000,",
          "298:  FOS_FORCEPREVIEWPANEON = 0x40000000",
          "299: };",
          "301: typedef enum FDAP {",
          "302:  FDAP_BOTTOM = 0,",
          "303:  FDAP_TOP = 1",
          "304: } FDAP;",
          "306: typedef DWORD FILEOPENDIALOGOPTIONS;",
          "308: DEFINE_GUID(IID_IFileDialog, 0x42f85136, 0xdb7e, 0x439c, 0x85, 0xf1, 0xe4, 0x07, 0x5d, 0x13, 0x5f, 0xc8);",
          "310: typedef struct IFileDialogVtbl {",
          "311:  BEGIN_INTERFACE",
          "314:   HRESULT(STDMETHODCALLTYPE *QueryInterface)(",
          "315:    IFileDialog* This,",
          "316:    REFIID riid,",
          "317:    void **ppvObject);",
          "319:  ULONG(STDMETHODCALLTYPE *AddRef)(",
          "320:   IFileDialog* This);",
          "322:  ULONG(STDMETHODCALLTYPE *Release)(",
          "323:   IFileDialog* This);",
          "326:  HRESULT(STDMETHODCALLTYPE *Show)(",
          "327:   IFileDialog* This,",
          "328:   HWND hwndOwner);",
          "331:  HRESULT(STDMETHODCALLTYPE *SetFileTypes)(",
          "332:   IFileDialog* This,",
          "333:   UINT cFileTypes,",
          "334:   const COMDLG_FILTERSPEC *rgFilterSpec);",
          "336:  HRESULT(STDMETHODCALLTYPE *SetFileTypeIndex)(",
          "337:   IFileDialog* This,",
          "338:   UINT iFileType);",
          "340:  HRESULT(STDMETHODCALLTYPE *GetFileTypeIndex)(",
          "341:   IFileDialog* This,",
          "342:   UINT *piFileType);",
          "344:  HRESULT(STDMETHODCALLTYPE *Advise)(",
          "345:   IFileDialog* This,",
          "346:   IFileDialogEvents *pfde,",
          "347:   DWORD *pdwCookie);",
          "349:  HRESULT(STDMETHODCALLTYPE *Unadvise)(",
          "350:   IFileDialog* This,",
          "351:   DWORD dwCookie);",
          "353:  HRESULT(STDMETHODCALLTYPE *SetOptions)(",
          "354:   IFileDialog* This,",
          "355:   FILEOPENDIALOGOPTIONS fos);",
          "357:  HRESULT(STDMETHODCALLTYPE *GetOptions)(",
          "358:   IFileDialog* This,",
          "359:   FILEOPENDIALOGOPTIONS *pfos);",
          "361:  HRESULT(STDMETHODCALLTYPE *SetDefaultFolder)(",
          "362:   IFileDialog* This,",
          "363:   IShellItem *psi);",
          "365:  HRESULT(STDMETHODCALLTYPE *SetFolder)(",
          "366:   IFileDialog* This,",
          "367:   IShellItem *psi);",
          "369:  HRESULT(STDMETHODCALLTYPE *GetFolder)(",
          "370:   IFileDialog* This,",
          "371:   IShellItem **ppsi);",
          "373:  HRESULT(STDMETHODCALLTYPE *GetCurrentSelection)(",
          "374:   IFileDialog* This,",
          "375:   IShellItem **ppsi);",
          "377:  HRESULT(STDMETHODCALLTYPE *SetFileName)(",
          "378:   IFileDialog* This,",
          "379:   LPCWSTR pszName);",
          "381:  HRESULT(STDMETHODCALLTYPE *GetFileName)(",
          "382:   IFileDialog* This,",
          "383:   LPWSTR *pszName);",
          "385:  HRESULT(STDMETHODCALLTYPE *SetTitle)(",
          "386:   IFileDialog* This,",
          "387:   LPCWSTR pszTitle);",
          "389:  HRESULT(STDMETHODCALLTYPE *SetOkButtonLabel)(",
          "390:   IFileDialog* This,",
          "391:   LPCWSTR pszText);",
          "393:  HRESULT(STDMETHODCALLTYPE *SetFileNameLabel)(",
          "394:   IFileDialog* This,",
          "395:   LPCWSTR pszLabel);",
          "397:  HRESULT(STDMETHODCALLTYPE *GetResult)(",
          "398:   IFileDialog* This,",
          "399:   IShellItem **ppsi);",
          "401:  HRESULT(STDMETHODCALLTYPE *AddPlace)(",
          "402:   IFileDialog* This,",
          "403:   IShellItem *psi,",
          "404:   FDAP fdap);",
          "406:  HRESULT(STDMETHODCALLTYPE *SetDefaultExtension)(",
          "407:   IFileDialog* This,",
          "408:   LPCWSTR pszDefaultExtension);",
          "410:  HRESULT(STDMETHODCALLTYPE *Close)(",
          "411:   IFileDialog* This,",
          "412:   HRESULT hr);",
          "414:  HRESULT(STDMETHODCALLTYPE *SetClientGuid)(",
          "415:   IFileDialog* This,",
          "416:   REFGUID guid);",
          "418:  HRESULT(STDMETHODCALLTYPE *ClearClientData)(",
          "419:   IFileDialog* This);",
          "421:  HRESULT(STDMETHODCALLTYPE *SetFilter)(",
          "422:   IFileDialog* This,",
          "423:   IShellItemFilter *pFilter);",
          "425:  END_INTERFACE",
          "426: } IFileDialogVtbl;",
          "427: interface IFileDialog {",
          "428:  CONST_VTBL IFileDialogVtbl* lpVtbl;",
          "429: };",
          "430: #endif",
          "432: #ifndef __IFileOpenDialog_INTERFACE_DEFINED__",
          "433: #define __IFileOpenDialog_INTERFACE_DEFINED__",
          "435: DEFINE_GUID(IID_IFileOpenDialog, 0xd57c7288, 0xd4ad, 0x4768, 0xbe, 0x02, 0x9d, 0x96, 0x95, 0x32, 0xd9, 0x60);",
          "437: typedef struct IFileOpenDialogVtbl {",
          "438:  BEGIN_INTERFACE",
          "441:   HRESULT(STDMETHODCALLTYPE *QueryInterface)(",
          "442:    IFileOpenDialog* This,",
          "443:    REFIID riid,",
          "444:    void **ppvObject);",
          "446:  ULONG(STDMETHODCALLTYPE *AddRef)(",
          "447:   IFileOpenDialog* This);",
          "449:  ULONG(STDMETHODCALLTYPE *Release)(",
          "450:   IFileOpenDialog* This);",
          "453:  HRESULT(STDMETHODCALLTYPE *Show)(",
          "454:   IFileOpenDialog* This,",
          "455:   HWND hwndOwner);",
          "458:  HRESULT(STDMETHODCALLTYPE *SetFileTypes)(",
          "459:   IFileOpenDialog* This,",
          "460:   UINT cFileTypes,",
          "461:   const COMDLG_FILTERSPEC *rgFilterSpec);",
          "463:  HRESULT(STDMETHODCALLTYPE *SetFileTypeIndex)(",
          "464:   IFileOpenDialog* This,",
          "465:   UINT iFileType);",
          "467:  HRESULT(STDMETHODCALLTYPE *GetFileTypeIndex)(",
          "468:   IFileOpenDialog* This,",
          "469:   UINT *piFileType);",
          "471:  HRESULT(STDMETHODCALLTYPE *Advise)(",
          "472:   IFileOpenDialog* This,",
          "473:   IFileDialogEvents *pfde,",
          "474:   DWORD *pdwCookie);",
          "476:  HRESULT(STDMETHODCALLTYPE *Unadvise)(",
          "477:   IFileOpenDialog* This,",
          "478:   DWORD dwCookie);",
          "480:  HRESULT(STDMETHODCALLTYPE *SetOptions)(",
          "481:   IFileOpenDialog* This,",
          "482:   FILEOPENDIALOGOPTIONS fos);",
          "484:  HRESULT(STDMETHODCALLTYPE *GetOptions)(",
          "485:   IFileOpenDialog* This,",
          "486:   FILEOPENDIALOGOPTIONS *pfos);",
          "488:  HRESULT(STDMETHODCALLTYPE *SetDefaultFolder)(",
          "489:   IFileOpenDialog* This,",
          "490:   IShellItem *psi);",
          "492:  HRESULT(STDMETHODCALLTYPE *SetFolder)(",
          "493:   IFileOpenDialog* This,",
          "494:   IShellItem *psi);",
          "496:  HRESULT(STDMETHODCALLTYPE *GetFolder)(",
          "497:   IFileOpenDialog* This,",
          "498:   IShellItem **ppsi);",
          "500:  HRESULT(STDMETHODCALLTYPE *GetCurrentSelection)(",
          "501:   IFileOpenDialog* This,",
          "502:   IShellItem **ppsi);",
          "504:  HRESULT(STDMETHODCALLTYPE *SetFileName)(",
          "505:   IFileOpenDialog* This,",
          "506:   LPCWSTR pszName);",
          "508:  HRESULT(STDMETHODCALLTYPE *GetFileName)(",
          "509:   IFileOpenDialog* This,",
          "510:   LPWSTR *pszName);",
          "512:  HRESULT(STDMETHODCALLTYPE *SetTitle)(",
          "513:   IFileOpenDialog* This,",
          "514:   LPCWSTR pszTitle);",
          "516:  HRESULT(STDMETHODCALLTYPE *SetOkButtonLabel)(",
          "517:   IFileOpenDialog* This,",
          "518:   LPCWSTR pszText);",
          "520:  HRESULT(STDMETHODCALLTYPE *SetFileNameLabel)(",
          "521:   IFileOpenDialog* This,",
          "522:   LPCWSTR pszLabel);",
          "524:  HRESULT(STDMETHODCALLTYPE *GetResult)(",
          "525:   IFileOpenDialog* This,",
          "526:   IShellItem **ppsi);",
          "528:  HRESULT(STDMETHODCALLTYPE *AddPlace)(",
          "529:   IFileOpenDialog* This,",
          "530:   IShellItem *psi,",
          "531:   FDAP fdap);",
          "533:  HRESULT(STDMETHODCALLTYPE *SetDefaultExtension)(",
          "534:   IFileOpenDialog* This,",
          "535:   LPCWSTR pszDefaultExtension);",
          "537:  HRESULT(STDMETHODCALLTYPE *Close)(",
          "538:   IFileOpenDialog* This,",
          "539:   HRESULT hr);",
          "541:  HRESULT(STDMETHODCALLTYPE *SetClientGuid)(",
          "542:   IFileOpenDialog* This,",
          "543:   REFGUID guid);",
          "545:  HRESULT(STDMETHODCALLTYPE *ClearClientData)(",
          "546:   IFileOpenDialog* This);",
          "548:  HRESULT(STDMETHODCALLTYPE *SetFilter)(",
          "549:   IFileOpenDialog* This,",
          "550:   IShellItemFilter *pFilter);",
          "553:  HRESULT(STDMETHODCALLTYPE *GetResults)(",
          "554:   IFileOpenDialog* This,",
          "555:   IShellItemArray **ppenum);",
          "557:  HRESULT(STDMETHODCALLTYPE *GetSelectedItems)(",
          "558:   IFileOpenDialog* This,",
          "559:   IShellItemArray **ppsai);",
          "561:  END_INTERFACE",
          "562: } IFileOpenDialogVtbl;",
          "563: interface IFileOpenDialog {",
          "564:  CONST_VTBL IFileOpenDialogVtbl* lpVtbl;",
          "565: };",
          "566: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resource.h||src/resource.h": [
          "File: src/resource.h -> src/resource.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: #define IDD_CHECKSUM                    109",
          "14: #define IDD_LIST                        110",
          "15: #define IDI_ICON                        120",
          "18: #define IDD_DIALOG_XP                   151",
          "19: #define IDD_ABOUTBOX_XP                 152",
          "20: #define IDD_NOTIFICATION_XP             153",
          "",
          "[Removed Lines]",
          "16: #define IDI_UP                          121",
          "17: #define IDI_DOWN                        122",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "47: #include \"../res/grub/grub_version.h\"",
          "48: #include \"../res/grub2/grub2_version.h\"",
          "58: const char* cmdline_hogger = \"rufus.com\";",
          "59: const char* FileSystemLabel[FS_MAX] = { \"FAT\", \"FAT32\", \"NTFS\", \"UDF\", \"exFAT\", \"ReFS\" };",
          "60: const char* ep_reg = \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\";",
          "",
          "[Removed Lines]",
          "51: PF_TYPE_DECL(WINAPI, HIMAGELIST, ImageList_Create, (int, int, UINT, int, int));",
          "52: PF_TYPE_DECL(WINAPI, int, ImageList_AddIcon, (HIMAGELIST, HICON));",
          "53: PF_TYPE_DECL(WINAPI, int, ImageList_ReplaceIcon, (HIMAGELIST, int, HICON));",
          "55: PF_TYPE_DECL(WINAPI, BOOL, SHChangeNotifyDeregister, (ULONG));",
          "56: PF_TYPE_DECL(WINAPI, ULONG, SHChangeNotifyRegister, (HWND, int, LONG, UINT, int, const MY_SHChangeNotifyEntry*));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "92: OPENED_LIBRARIES_VARS;",
          "93: HINSTANCE hMainInstance;",
          "94: HWND hMainDialog, hLangToolbar = NULL, hUpdatesDlg = NULL;",
          "97: char szFolderPath[MAX_PATH], app_dir[MAX_PATH], system_dir[MAX_PATH], temp_dir[MAX_PATH], sysnative_dir[MAX_PATH];",
          "98: char* image_path = NULL;",
          "99: float fScale = 1.0f;",
          "",
          "[Removed Lines]",
          "95: MY_BUTTON_IMAGELIST bi_iso = { 0 }, bi_up = { 0 }, bi_down = { 0 };",
          "96: GetTickCount64_t pfGetTickCount64 = NULL;",
          "",
          "[Added Lines]",
          "87: BUTTON_IMAGELIST bi_iso = { 0 }, bi_up = { 0 }, bi_down = { 0 };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "265:    }",
          "266:   }",
          "286:   if (SelectedDrive.DiskSize >= 512*MB) {",
          "",
          "[Removed Lines]",
          "269:   if (nWindowsVersion > WINDOWS_XP) {",
          "270:    SelectedDrive.ClusterSize[FS_EXFAT].Allowed = 0x03FFFE00;",
          "271:    if (SelectedDrive.DiskSize < 256*MB) // < 256 MB",
          "272:     SelectedDrive.ClusterSize[FS_EXFAT].Default = 4*KB;",
          "273:    else if (SelectedDrive.DiskSize < 32*GB) // < 32 GB",
          "274:     SelectedDrive.ClusterSize[FS_EXFAT].Default = 32*KB;",
          "275:    else",
          "276:     SelectedDrive.ClusterSize[FS_EXFAT].Default = 128*KB;",
          "277:   }",
          "280:   if (nWindowsVersion >= WINDOWS_VISTA) {",
          "281:    SelectedDrive.ClusterSize[FS_UDF].Allowed = SINGLE_CLUSTERSIZE_DEFAULT;",
          "282:    SelectedDrive.ClusterSize[FS_UDF].Default = 1;",
          "283:   }",
          "",
          "[Added Lines]",
          "260:   SelectedDrive.ClusterSize[FS_EXFAT].Allowed = 0x03FFFE00;",
          "261:   if (SelectedDrive.DiskSize < 256*MB) // < 256 MB",
          "262:    SelectedDrive.ClusterSize[FS_EXFAT].Default = 4*KB;",
          "263:   else if (SelectedDrive.DiskSize < 32*GB) // < 32 GB",
          "264:    SelectedDrive.ClusterSize[FS_EXFAT].Default = 32*KB;",
          "265:   else",
          "266:    SelectedDrive.ClusterSize[FS_EXFAT].Default = 128*KB;",
          "269:   SelectedDrive.ClusterSize[FS_UDF].Allowed = SINGLE_CLUSTERSIZE_DEFAULT;",
          "270:   SelectedDrive.ClusterSize[FS_UDF].Default = 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "445:  }",
          "447:  for (i=0; i<3; i++) {",
          "452:   pt = (i==2)?PARTITION_STYLE_GPT:PARTITION_STYLE_MBR;",
          "453:   if (i==0) {",
          "454:    SetMBRForUEFI(FALSE);",
          "",
          "[Removed Lines]",
          "450:   if ((i == 2) && (nWindowsVersion <= WINDOWS_XP))",
          "451:    continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "820:  }",
          "825:   SendMessage(hProgress, PBM_SETPOS, (WPARAM)pos, 0);",
          "826:   SetTaskbarProgressValue(pos, MAX_PROGRESS);",
          "827:  }",
          "",
          "[Removed Lines]",
          "823:  if (_GetTickCount64() > LastRefresh + (2 * MAX_REFRESH)) {",
          "824:   LastRefresh = _GetTickCount64();",
          "",
          "[Added Lines]",
          "807:  if (GetTickCount64() > LastRefresh + (2 * MAX_REFRESH)) {",
          "808:   LastRefresh = GetTickCount64();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1708:  ShowWindow(GetDlgItem(hDlg, IDC_TEST), SW_SHOW);",
          "1709: #endif",
          "1716:  hMainDialog = hDlg;",
          "1717:  MainThreadId = GetCurrentThreadId();",
          "",
          "[Removed Lines]",
          "1711:  PF_INIT(ImageList_Create, Comctl32);",
          "1712:  PF_INIT(ImageList_AddIcon, Comctl32);",
          "1713:  PF_INIT(ImageList_ReplaceIcon, Comctl32);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1750:  hInfoFont = CreateFontA(lfHeight, 0, 0, 0, FW_NORMAL, FALSE, FALSE, FALSE, DEFAULT_CHARSET,",
          "1752:  SendDlgItemMessageA(hDlg, IDC_INFO, WM_SETFONT, (WPARAM)hInfoFont, TRUE);",
          "1753:  hInfoBrush = CreateSolidBrush(GetSysColor(COLOR_BTNFACE));",
          "1754:  HideCaret(hInfo);",
          "",
          "[Removed Lines]",
          "1751:   0, 0, PROOF_QUALITY, 0, (nWindowsVersion >= WINDOWS_VISTA)?\"Segoe UI\":\"Arial Unicode MS\");",
          "",
          "[Added Lines]",
          "1731:   0, 0, PROOF_QUALITY, 0, \"Segoe UI\");",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1853:   hIconLang = (HICON)LoadImage(hINetCplDllInst, MAKEINTRESOURCE(1313), IMAGE_ICON, s16, s16, LR_DEFAULTCOLOR | LR_SHARED);",
          "1854:  }",
          "1865:  hLangToolbar = CreateWindowExW(0, TOOLBARCLASSNAME, NULL, WS_CHILD | WS_TABSTOP | TBSTYLE_TRANSPARENT | CCS_NOPARENTALIGN |",
          "1866:   CCS_NORESIZE | CCS_NODIVIDER, 0, 0, 0, 0, hMainDialog, NULL, hMainInstance, NULL);",
          "1872:  SendMessage(hLangToolbar, TB_BUTTONSTRUCTSIZE, (WPARAM)sizeof(TBBUTTON), 0);",
          "1873:  memset(tbLangToolbarButtons, 0, sizeof(TBBUTTON));",
          "1874:  tbLangToolbarButtons[0].idCommand = lang_button_id;",
          "",
          "[Removed Lines]",
          "1856:  if (nWindowsVersion >= WINDOWS_VISTA) {",
          "1857:   hIconDown = (HICON)LoadImage(hShell32DllInst, MAKEINTRESOURCE(16750), IMAGE_ICON, s16, s16, LR_DEFAULTCOLOR | LR_SHARED);",
          "1858:   hIconUp = (HICON)LoadImage(hShell32DllInst, MAKEINTRESOURCE(16749), IMAGE_ICON, s16, s16, LR_DEFAULTCOLOR | LR_SHARED);",
          "1859:  } else {",
          "1860:   hIconDown = (HICON)LoadImage(hMainInstance, MAKEINTRESOURCE(IDI_DOWN), IMAGE_ICON, 16, 16, 0);",
          "1861:   hIconUp = (HICON)LoadImage(hMainInstance, MAKEINTRESOURCE(IDI_UP), IMAGE_ICON, 16, 16, 0);",
          "1862:  }",
          "1867:  if ((pfImageList_Create != NULL) && (pfImageList_AddIcon != NULL)) {",
          "1868:   hLangToolbarImageList = pfImageList_Create(i16, i16, ILC_COLOR32, 1, 0);",
          "1869:   pfImageList_AddIcon(hLangToolbarImageList, hIconLang);",
          "1870:   SendMessage(hLangToolbar, TB_SETIMAGELIST, (WPARAM)0, (LPARAM)hLangToolbarImageList);",
          "1871:  }",
          "",
          "[Added Lines]",
          "1836:  hIconDown = (HICON)LoadImage(hShell32DllInst, MAKEINTRESOURCE(16750), IMAGE_ICON, s16, s16, LR_DEFAULTCOLOR | LR_SHARED);",
          "1837:  hIconUp = (HICON)LoadImage(hShell32DllInst, MAKEINTRESOURCE(16749), IMAGE_ICON, s16, s16, LR_DEFAULTCOLOR | LR_SHARED);",
          "1842:  hLangToolbarImageList = ImageList_Create(i16, i16, ILC_COLOR32, 1, 0);",
          "1843:  ImageList_AddIcon(hLangToolbarImageList, hIconLang);",
          "1844:  SendMessage(hLangToolbar, TB_SETIMAGELIST, (WPARAM)0, (LPARAM)hLangToolbarImageList);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1917:  info_original_proc = (WNDPROC)SetWindowLongPtr(hInfo, GWLP_WNDPROC, (LONG_PTR)InfoCallback);",
          "1941:  CreateTooltip(hFileSystem, lmprintf(MSG_157), -1);",
          "",
          "[Removed Lines]",
          "1920:  if ((pfImageList_Create != NULL) && (pfImageList_ReplaceIcon != NULL)) {",
          "1922:   bi_iso.himl = pfImageList_Create(i16, i16, ILC_COLOR32 | ILC_MASK, 1, 0);",
          "1923:   pfImageList_ReplaceIcon(bi_iso.himl, -1, hIconDisc);",
          "1924:   SetRect(&bi_iso.margin, 0, 1, 0, 0);",
          "1925:   bi_iso.uAlign = BUTTON_IMAGELIST_ALIGN_CENTER;",
          "1926:   bi_down.himl = pfImageList_Create(i16, i16, ILC_COLOR32 | ILC_MASK, 1, 0);",
          "1927:   pfImageList_ReplaceIcon(bi_down.himl, -1, hIconDown);",
          "1928:   SetRect(&bi_down.margin, 0, 0, 0, 0);",
          "1929:   bi_down.uAlign = BUTTON_IMAGELIST_ALIGN_CENTER;",
          "1930:   bi_up.himl = pfImageList_Create(i16, i16, ILC_COLOR32 | ILC_MASK, 1, 0);",
          "1931:   pfImageList_ReplaceIcon(bi_up.himl, -1, hIconUp);",
          "1932:   SetRect(&bi_up.margin, 0, 0, 0, 0);",
          "1933:   bi_up.uAlign = BUTTON_IMAGELIST_ALIGN_CENTER;",
          "1935:   SendMessage(hSelectISO, BCM_SETIMAGELIST, 0, (LPARAM)&bi_iso);",
          "1936:   SendMessage(GetDlgItem(hDlg, IDC_ADVANCED), BCM_SETIMAGELIST, 0,",
          "1937:    (LPARAM)(advanced_mode?&bi_up:&bi_down));",
          "1938:  }",
          "",
          "[Added Lines]",
          "1893:  bi_iso.himl = ImageList_Create(i16, i16, ILC_COLOR32 | ILC_MASK, 1, 0);",
          "1894:  ImageList_ReplaceIcon(bi_iso.himl, -1, hIconDisc);",
          "1895:  SetRect(&bi_iso.margin, 0, 1, 0, 0);",
          "1896:  bi_iso.uAlign = BUTTON_IMAGELIST_ALIGN_CENTER;",
          "1897:  bi_down.himl = ImageList_Create(i16, i16, ILC_COLOR32 | ILC_MASK, 1, 0);",
          "1898:  ImageList_ReplaceIcon(bi_down.himl, -1, hIconDown);",
          "1899:  SetRect(&bi_down.margin, 0, 0, 0, 0);",
          "1900:  bi_down.uAlign = BUTTON_IMAGELIST_ALIGN_CENTER;",
          "1901:  bi_up.himl = ImageList_Create(i16, i16, ILC_COLOR32 | ILC_MASK, 1, 0);",
          "1902:  ImageList_ReplaceIcon(bi_up.himl, -1, hIconUp);",
          "1903:  SetRect(&bi_up.margin, 0, 0, 0, 0);",
          "1904:  bi_up.uAlign = BUTTON_IMAGELIST_ALIGN_CENTER;",
          "1906:  SendMessage(hSelectISO, BCM_SETIMAGELIST, 0, (LPARAM)&bi_iso);",
          "1907:  SendMessage(GetDlgItem(hDlg, IDC_ADVANCED), BCM_SETIMAGELIST, 0,",
          "1908:   (LPARAM)(advanced_mode?&bi_up:&bi_down));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1960:  CreateTooltip(hLangToolbar, lmprintf(MSG_273), -1);",
          "1968:  if (!advanced_mode) // Hide as needed, since we display the advanced controls by default",
          "1969:   ToggleAdvanced(FALSE);",
          "",
          "[Removed Lines]",
          "1963:  if (nWindowsVersion > WINDOWS_XP) {",
          "1964:   SetWindowTextU(GetDlgItem(hDlg, IDC_ADVANCED), lmprintf(MSG_160));",
          "1965:   SetWindowTextU(hSelectISO, lmprintf(MSG_165));",
          "1966:  }",
          "",
          "[Added Lines]",
          "1933:  SetWindowTextU(GetDlgItem(hDlg, IDC_ADVANCED), lmprintf(MSG_160));",
          "1934:  SetWindowTextU(hSelectISO, lmprintf(MSG_165));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2195:  char *PhysicalPath = NULL, DevPath[MAX_PATH];",
          "2196:  char drive_letter[27], drive_name[] = \"?:\";",
          "2197:  char *message, title[128];",
          "2201:  DWORD DeviceNum = (DWORD)ComboBox_GetItemData(hDeviceList, ComboBox_GetCurSel(hDeviceList));",
          "",
          "[Removed Lines]",
          "2198:  DWORD cur_time, end_time = GetTickCount() + dwTimeOut;",
          "",
          "[Added Lines]",
          "2166:  uint64_t cur_time, end_time = GetTickCount64() + dwTimeOut;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2225:   drive_name[0] = drive_letter[i];",
          "2226:   if (QueryDosDeviceA(drive_name, DevPath, sizeof(DevPath)) != 0) {",
          "2227:    StrArrayClear(&BlockingProcess);",
          "2229:    if (cur_time >= end_time)",
          "2230:     break;",
          "2232:    CHECK_FOR_USER_CANCEL;",
          "2234:    if ((access_mask & 0x06) || (access_mask == 0x80)) {",
          "",
          "[Removed Lines]",
          "2228:    cur_time = GetTickCount();",
          "2231:    access_mask = SearchProcess(DevPath, end_time - cur_time, TRUE, TRUE, TRUE);",
          "",
          "[Added Lines]",
          "2196:    cur_time = GetTickCount64();",
          "2199:    access_mask = SearchProcess(DevPath, (DWORD)(end_time - cur_time), TRUE, TRUE, TRUE);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2272:  static BOOL first_log_display = TRUE, isMarquee = FALSE, queued_hotplug_event = FALSE;",
          "2273:  static ULONG ulRegister = 0;",
          "2274:  static LPITEMIDLIST pidlDesktop = NULL;",
          "2276:  static DWORD_PTR thread_affinity[4];",
          "2277:  DRAWITEMSTRUCT* pDI;",
          "2278:  HDROP droppedFileInfo;",
          "",
          "[Removed Lines]",
          "2275:  static MY_SHChangeNotifyEntry NotifyEntry;",
          "",
          "[Added Lines]",
          "2243:  static SHChangeNotifyEntry NotifyEntry;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2316:   switch(LOWORD(wParam)) {",
          "2317:   case IDOK:   // close application",
          "2318:   case IDCANCEL:",
          "2320:    EnableWindow(GetDlgItem(hDlg, IDCANCEL), FALSE);",
          "2321:    if (format_thid != NULL) {",
          "2322:     if ((no_confirmation_on_cancel) || (MessageBoxExU(hMainDialog, lmprintf(MSG_105), lmprintf(MSG_049),",
          "",
          "[Removed Lines]",
          "2319:    PF_INIT(SHChangeNotifyDeregister, Shell32);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2343:     PrintInfo(0, MSG_201);",
          "2344:     return (INT_PTR)TRUE;",
          "2345:    }",
          "2348:    PostQuitMessage(0);",
          "2349:    StrArrayDestroy(&DriveID);",
          "2350:    StrArrayDestroy(&DriveLabel);",
          "",
          "[Removed Lines]",
          "2346:    if ((pfSHChangeNotifyDeregister != NULL) && (ulRegister != 0))",
          "2347:     pfSHChangeNotifyDeregister(ulRegister);",
          "",
          "[Added Lines]",
          "2313:    if (ulRegister != 0)",
          "2314:     SHChangeNotifyDeregister(ulRegister);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2711:    case DBT_DEVICEARRIVAL:",
          "2712:    case DBT_DEVICEREMOVECOMPLETE:",
          "2713:    case DBT_CUSTOMEVENT: // Sent by our timer refresh function or for card reader media change",
          "2715:     KillTimer(hMainDialog, TID_REFRESH_TIMER);",
          "2716:     if (!format_op_in_progress) {",
          "2717:      queued_hotplug_event = FALSE;",
          "",
          "[Removed Lines]",
          "2714:     LastRefresh = _GetTickCount64();",
          "",
          "[Added Lines]",
          "2681:     LastRefresh = GetTickCount64();",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2724:     return (INT_PTR)TRUE;",
          "2725:    case DBT_DEVNODES_CHANGED:",
          "2729:      SetTimer(hMainDialog, TID_REFRESH_TIMER, 1000, RefreshTimer);",
          "2730:     }",
          "2731:     break;",
          "",
          "[Removed Lines]",
          "2727:     if (_GetTickCount64() > LastRefresh + 1000) {",
          "2728:      LastRefresh = _GetTickCount64();",
          "",
          "[Added Lines]",
          "2694:     if (GetTickCount64() > LastRefresh + 1000) {",
          "2695:      LastRefresh = GetTickCount64();",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2736:   break;",
          "2738:  case WM_INITDIALOG:",
          "2741:   hDC = GetDC(hDlg);",
          "2742:   fScale = GetDeviceCaps(hDC, LOGPIXELSX) / 96.0f;",
          "",
          "[Removed Lines]",
          "2739:   PF_INIT(SHChangeNotifyRegister, shell32);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2753:   GetDevices(0);",
          "2754:   CheckForUpdates(FALSE);",
          "2757:    NotifyEntry.pidl = pidlDesktop;",
          "2758:    NotifyEntry.fRecursive = TRUE;",
          "2762:     SHCNE_MEDIAINSERTED | SHCNE_MEDIAREMOVED, UM_MEDIA_CHANGE, 1, &NotifyEntry);",
          "2763:   }",
          "",
          "[Removed Lines]",
          "2756:   if ((pfSHChangeNotifyRegister != NULL) && (SUCCEEDED(SHGetSpecialFolderLocation(0, CSIDL_DESKTOP, &pidlDesktop)))) {",
          "2761:    ulRegister = pfSHChangeNotifyRegister(hDlg, 0x0001 | 0x0002 | 0x8000,",
          "",
          "[Added Lines]",
          "2722:   if (SUCCEEDED(SHGetSpecialFolderLocation(0, CSIDL_DESKTOP, &pidlDesktop))) {",
          "2727:    ulRegister = SHChangeNotifyRegister(hDlg, 0x0001 | 0x0002 | 0x8000,",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3039:  char *tmp, *locale_name = NULL, **argv = NULL;",
          "3040:  wchar_t **wenv, **wargv;",
          "3041:  PF_TYPE_DECL(CDECL, int, __wgetmainargs, (int*, wchar_t***, wchar_t***, int, int*));",
          "3043:  HANDLE mutex = NULL, hogmutex = NULL, hFile = NULL;",
          "3044:  HWND hDlg = NULL;",
          "3045:  HDC hDC;",
          "",
          "[Removed Lines]",
          "3042:  PF_TYPE_DECL(WINAPI, BOOL, ChangeWindowMessageFilter, (UINT message, DWORD dwFlag));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3058:  SetDllDirectoryA(\"\");",
          "3060:  uprintf(\"*** \" APPLICATION_NAME \" init ***\\n\");",
          "3064:  if (AttachConsole(ATTACH_PARENT_PROCESS) != 0) {",
          "",
          "[Removed Lines]",
          "3061:  PF_INIT(GetTickCount64, kernel32);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "3239:  }",
          "3240:  selected_langid = get_language_id(selected_locale);",
          "3244:  if (!IsCurrentProcessElevated()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3207:  GetWindowsVersion();",
          "3210:  if (nWindowsVersion < WINDOWS_7) {",
          "3212:   get_loc_data_file(loc_file, selected_locale);",
          "3213:   right_to_left_mode = ((selected_locale->ctrl_id) & LOC_RIGHT_TO_LEFT);",
          "3215:   MessageBoxExU(NULL, lmprintf(MSG_294), lmprintf(MSG_293), MB_ICONSTOP | MB_IS_RTL | MB_SYSTEMMODAL, selected_langid);",
          "3216:   goto out;",
          "3217:  }",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "3280:   uprintf(\"Could not load RichEdit library - some dialogs may not display: %s\\n\", WindowsErrorString());",
          "3281:  }",
          "3288:  EnablePrivileges();",
          "",
          "[Removed Lines]",
          "3284:  GetWindowsVersion();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "3292:  lgp_set = SetLGP(FALSE, &existing_key, ep_reg, \"NoDriveTypeAutorun\", 0x9e);",
          "3304:  }",
          "3306: relaunch:",
          "",
          "[Removed Lines]",
          "3294:  if (nWindowsVersion > WINDOWS_XP) {",
          "3296:   if (!GetAutoMount(&automount)) {",
          "3297:    uprintf(\"Could not get AutoMount status\");",
          "3298:    automount = TRUE; // So that we don't try to change its status on exit",
          "3299:   } else if (!automount) {",
          "3300:    uprintf(\"AutoMount was detected as disabled - temporarily re-enabling it\");",
          "3301:    if (!SetAutoMount(TRUE))",
          "3302:     uprintf(\"Failed to enable AutoMount\");",
          "3303:   }",
          "",
          "[Added Lines]",
          "3269:  if (!GetAutoMount(&automount)) {",
          "3270:   uprintf(\"Could not get AutoMount status\");",
          "3271:   automount = TRUE; // So that we don't try to change its status on exit",
          "3272:  } else if (!automount) {",
          "3273:   uprintf(\"AutoMount was detected as disabled - temporarily re-enabling it\");",
          "3274:   if (!SetAutoMount(TRUE))",
          "3275:    uprintf(\"Failed to enable AutoMount\");",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "3329:  if ((relaunch_rc.left > -65536) && (relaunch_rc.top > -65536))",
          "3330:   SetWindowPos(hDlg, HWND_TOP, relaunch_rc.left, relaunch_rc.top, 0, 0, SWP_NOSIZE);",
          "3346:  if (!SetFormatPromptHook())",
          "",
          "[Removed Lines]",
          "3333:  if (nWindowsVersion >= WINDOWS_VISTA) {",
          "3334:   PF_INIT(ChangeWindowMessageFilter, user32);",
          "3335:   if (pfChangeWindowMessageFilter != NULL) {",
          "3338:    pfChangeWindowMessageFilter(WM_DROPFILES, MSGFLT_ADD);",
          "3339:    pfChangeWindowMessageFilter(WM_COPYDATA, MSGFLT_ADD);",
          "3341:    pfChangeWindowMessageFilter(WM_COPYGLOBALDATA, MSGFLT_ADD);",
          "3342:   }",
          "3343:  }",
          "",
          "[Added Lines]",
          "3305:  ChangeWindowMessageFilter(WM_DROPFILES, MSGFLT_ADD);",
          "3306:  ChangeWindowMessageFilter(WM_COPYDATA, MSGFLT_ADD);",
          "3308:  ChangeWindowMessageFilter(WM_COPYGLOBALDATA, MSGFLT_ADD);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "3596:  }",
          "3597:  if (lgp_set)",
          "3598:   SetLGP(TRUE, &existing_key, ep_reg, \"NoDriveTypeAutorun\", 0);",
          "3600:   uprintf(\"Failed to restore AutoMount to disabled\");",
          "3601:  ubflush();",
          "",
          "[Removed Lines]",
          "3599:  if ((nWindowsVersion > WINDOWS_XP) && (!automount) && (!SetAutoMount(FALSE)))",
          "",
          "[Added Lines]",
          "3564:  if ((!automount) && (!SetAutoMount(FALSE)))",
          "",
          "---------------"
        ],
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #if defined(_MSC_VER)",
          "26: #pragma warning(disable: 6258)  // I know what I'm using TerminateThread for",
          "27: #endif",
          "",
          "[Removed Lines]",
          "24: #pragma warning(disable: 4996)  // Ignore deprecated (eg. GetVersionEx()), as we have to contend with XP",
          "25: #pragma warning(disable: 28159)  // We use GetTickCount64() where possible, but it's not available on XP",
          "",
          "[Added Lines]",
          "24: #pragma warning(disable: 4996)  // Ignore deprecated",
          "25: #pragma warning(disable: 28159)  // I'll keep using GetVersionEx(), thank you very much!",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "599: #define ERROR_CANT_ASSIGN_LETTER       0x120B",
          "600: #define ERROR_CANT_MOUNT_VOLUME        0x120C",
          "",
          "[Removed Lines]",
          "603: PF_TYPE(WINAPI, ULONGLONG, GetTickCount64, (void));",
          "604: extern GetTickCount64_t pfGetTickCount64;",
          "605: #define _GetTickCount64() ((pfGetTickCount64 != NULL)?(uint64_t)pfGetTickCount64():(uint64_t)GetTickCount())",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.18.1214\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.18.1215\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368: VS_VERSION_INFO VERSIONINFO",
          "371:  FILEFLAGSMASK 0x3fL",
          "372: #ifdef _DEBUG",
          "373:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "369:  FILEVERSION 2,18,1214,0",
          "370:  PRODUCTVERSION 2,18,1214,0",
          "",
          "[Added Lines]",
          "369:  FILEVERSION 2,18,1215,0",
          "370:  PRODUCTVERSION 2,18,1215,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:         BEGIN",
          "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "386:             VALUE \"FileDescription\", \"Rufus\"",
          "388:             VALUE \"InternalName\", \"Rufus\"",
          "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "392:             VALUE \"ProductName\", \"Rufus\"",
          "394:         END",
          "395:     END",
          "396:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "387:             VALUE \"FileVersion\", \"2.18.1214\"",
          "393:             VALUE \"ProductVersion\", \"2.18.1214\"",
          "",
          "[Added Lines]",
          "387:             VALUE \"FileVersion\", \"2.18.1215\"",
          "393:             VALUE \"ProductVersion\", \"2.18.1215\"",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "410: IDI_ICON                ICON                    \"../res/rufus.ico\"",
          "416: #endif    // Neutral resources",
          "",
          "[Removed Lines]",
          "412: IDI_UP                  ICON                    \"../res/up.ico\"",
          "414: IDI_DOWN                ICON                    \"../res/down.ico\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/stdfn.c||src/stdfn.c": [
          "File: src/stdfn.c -> src/stdfn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: int  nWindowsBuildNumber = -1;",
          "37: char WindowsVersionStr[128] = \"Windows \";",
          "",
          "[Removed Lines]",
          "39: PF_TYPE_DECL(WINAPI, int, LCIDToLocaleName, (LCID, LPWSTR, int, DWORD));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "900:  static char mui_str[LOCALE_NAME_MAX_LENGTH];",
          "901:  wchar_t wmui_str[LOCALE_NAME_MAX_LENGTH];",
          "908:   wchar_to_utf8_no_alloc(wmui_str, mui_str, LOCALE_NAME_MAX_LENGTH);",
          "909:  } else {",
          "910:   static_strcpy(mui_str, \"en-US\");",
          "",
          "[Removed Lines]",
          "904:  PF_INIT(LCIDToLocaleName, kernel32);",
          "906:  if ( (pfLCIDToLocaleName != NULL) &&",
          "907:    (pfLCIDToLocaleName(GetUserDefaultUILanguage(), wmui_str, LOCALE_NAME_MAX_LENGTH, 0) > 0) ) {",
          "",
          "[Added Lines]",
          "901:  if (LCIDToLocaleName(GetUserDefaultUILanguage(), wmui_str, LOCALE_NAME_MAX_LENGTH, 0) > 0) {",
          "",
          "---------------"
        ],
        "src/stdio.c||src/stdio.c": [
          "File: src/stdio.c -> src/stdio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "382: DWORD WaitForSingleObjectWithMessages(HANDLE hHandle, DWORD dwMilliseconds)",
          "383: {",
          "385:  MSG msg;",
          "387:  do {",
          "",
          "[Removed Lines]",
          "384:  DWORD res, dwCurTime, dwEndTime = GetTickCount() + dwMilliseconds;",
          "",
          "[Added Lines]",
          "384:  uint64_t CurTime, EndTime = GetTickCount64() + dwMilliseconds;",
          "385:  DWORD res;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "399:   res = MsgWaitForMultipleObjects(1, &hHandle, FALSE, dwMilliseconds, QS_ALLINPUT);",
          "401:   if (dwMilliseconds != INFINITE) {",
          "407:    else",
          "408:     res = WAIT_TIMEOUT;",
          "409:   }",
          "",
          "[Removed Lines]",
          "402:    dwCurTime = GetTickCount();",
          "405:    if (dwCurTime < dwEndTime)",
          "406:     dwMilliseconds = dwEndTime - dwCurTime;",
          "",
          "[Added Lines]",
          "403:    CurTime = GetTickCount64();",
          "406:    if (CurTime < EndTime)",
          "407:     dwMilliseconds = (DWORD) (EndTime - CurTime);",
          "",
          "---------------"
        ],
        "src/stdlg.c||src/stdlg.c": [
          "File: src/stdlg.c -> src/stdlg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #include \"settings.h\"",
          "43: #include \"license.h\"",
          "52: static HICON hMessageIcon = (HICON)INVALID_HANDLE_VALUE;",
          "53: static char* szMessageText = NULL;",
          "",
          "[Removed Lines]",
          "45: PF_TYPE_DECL(WINAPI, HRESULT, SHCreateItemFromParsingName, (PCWSTR, IBindCtx*, REFIID, void **));",
          "46: PF_TYPE_DECL(WINAPI, LPITEMIDLIST, SHSimpleIDListFromPath, (PCWSTR pszPath));",
          "47: #define INIT_VISTA_SHELL32         PF_INIT(SHCreateItemFromParsingName, Shell32)",
          "48: #define INIT_XP_SHELL32            PF_INIT(SHSimpleIDListFromPath, Shell32)",
          "49: #define IS_VISTA_SHELL32_AVAILABLE (pfSHCreateItemFromParsingName != NULL)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "107:   hBrowseEdit = FindWindowExA(hDlg, NULL, \"Edit\", NULL);",
          "108:   SetWindowTextU(hBrowseEdit, szFolderPath);",
          "109:   SetDialogFocus(hDlg, hBrowseEdit);",
          "125:   break;",
          "126:  case BFFM_SELCHANGED:",
          "",
          "[Removed Lines]",
          "112:   if (nWindowsVersion <= WINDOWS_XP) {",
          "113:    SendMessageLU(hDlg, BFFM_SETSELECTION, (WPARAM)TRUE, szFolderPath);",
          "114:   } else {",
          "116:    wpath = utf8_to_wchar(szFolderPath);",
          "117:    pidl = (*pfSHSimpleIDListFromPath)(wpath);",
          "118:    safe_free(wpath);",
          "121:    SendMessageW(hDlg, BFFM_SETSELECTION, (WPARAM)FALSE, (LPARAM)pidl);",
          "122:    Sleep(100);",
          "123:    PostMessageW(hDlg, BFFM_SETSELECTION, (WPARAM)FALSE, (LPARAM)pidl);",
          "124:   }",
          "",
          "[Added Lines]",
          "105:   wpath = utf8_to_wchar(szFolderPath);",
          "106:   pidl = SHSimpleIDListFromPath(wpath);",
          "107:   safe_free(wpath);",
          "110:   SendMessageW(hDlg, BFFM_SETSELECTION, (WPARAM)FALSE, (LPARAM)pidl);",
          "111:   Sleep(100);",
          "112:   PostMessageW(hDlg, BFFM_SETSELECTION, (WPARAM)FALSE, (LPARAM)pidl);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "152:  char* tmp_path = NULL;",
          "154:  dialog_showing++;",
          "192:    }",
          "215:    }",
          "219:   }",
          "220: fallback:",
          "224:  }",
          "227:  memset(&bi, 0, sizeof(BROWSEINFOW));",
          "228:  bi.hwndOwner = hMainDialog;",
          "229:  bi.lpszTitle = utf8_to_wchar(lmprintf(MSG_106));",
          "",
          "[Removed Lines]",
          "155:  if (nWindowsVersion >= WINDOWS_VISTA) {",
          "156:   INIT_VISTA_SHELL32;",
          "157:   if (IS_VISTA_SHELL32_AVAILABLE) {",
          "158:    hr = CoCreateInstance(&CLSID_FileOpenDialog, NULL, CLSCTX_INPROC,",
          "159:     &IID_IFileOpenDialog, (LPVOID)&pfod);",
          "160:    if (FAILED(hr)) {",
          "161:     uprintf(\"CoCreateInstance for FileOpenDialog failed: error %X\\n\", hr);",
          "162:     pfod = NULL; // Just in case",
          "163:     goto fallback;",
          "164:    }",
          "165:    hr = pfod->lpVtbl->SetOptions(pfod, FOS_PICKFOLDERS);",
          "166:    if (FAILED(hr)) {",
          "167:     uprintf(\"Failed to set folder option for FileOpenDialog: error %X\\n\", hr);",
          "168:     goto fallback;",
          "169:    }",
          "171:    wpath = utf8_to_wchar(szFolderPath);",
          "173:    fname = NULL;",
          "174:    if ((wpath != NULL) && (wcslen(wpath) >= 1)) {",
          "175:     for (i = wcslen(wpath) - 1; i != 0; i--) {",
          "176:      if (wpath[i] == L'\\\\') {",
          "177:       wpath[i] = 0;",
          "178:       fname = &wpath[i + 1];",
          "179:       break;",
          "180:      }",
          "181:     }",
          "182:    }",
          "184:    hr = (*pfSHCreateItemFromParsingName)(wpath, NULL, &IID_IShellItem, (LPVOID)&si_path);",
          "185:    if (SUCCEEDED(hr)) {",
          "186:     if (wpath != NULL) {",
          "187:      pfod->lpVtbl->SetFolder(pfod, si_path);",
          "188:     }",
          "189:     if (fname != NULL) {",
          "190:      pfod->lpVtbl->SetFileName(pfod, fname);",
          "191:     }",
          "193:    safe_free(wpath);",
          "195:    hr = pfod->lpVtbl->Show(pfod, hMainDialog);",
          "196:    if (SUCCEEDED(hr)) {",
          "197:     hr = pfod->lpVtbl->GetResult(pfod, &psi);",
          "198:     if (SUCCEEDED(hr)) {",
          "199:      psi->lpVtbl->GetDisplayName(psi, SIGDN_FILESYSPATH, &wpath);",
          "200:      tmp_path = wchar_to_utf8(wpath);",
          "201:      CoTaskMemFree(wpath);",
          "202:      if (tmp_path == NULL) {",
          "203:       uprintf(\"Could not convert path\\n\");",
          "204:      } else {",
          "205:       static_strcpy(szFolderPath, tmp_path);",
          "206:       safe_free(tmp_path);",
          "207:      }",
          "208:     } else {",
          "209:      uprintf(\"Failed to set folder option for FileOpenDialog: error %X\\n\", hr);",
          "210:     }",
          "211:    } else if ((hr & 0xFFFF) != ERROR_CANCELLED) {",
          "213:     uprintf(\"Could not show FileOpenDialog: error %X\\n\", hr);",
          "214:     goto fallback;",
          "216:    pfod->lpVtbl->Release(pfod);",
          "217:    dialog_showing--;",
          "218:    return;",
          "221:   if (pfod != NULL) {",
          "222:    pfod->lpVtbl->Release(pfod);",
          "223:   }",
          "226:  INIT_XP_SHELL32;",
          "",
          "[Added Lines]",
          "142:  hr = CoCreateInstance(&CLSID_FileOpenDialog, NULL, CLSCTX_INPROC,",
          "143:   &IID_IFileOpenDialog, (LPVOID)&pfod);",
          "144:  if (FAILED(hr)) {",
          "145:   uprintf(\"CoCreateInstance for FileOpenDialog failed: error %X\\n\", hr);",
          "146:   pfod = NULL; // Just in case",
          "147:   goto fallback;",
          "148:  }",
          "149:  hr = pfod->lpVtbl->SetOptions(pfod, FOS_PICKFOLDERS);",
          "150:  if (FAILED(hr)) {",
          "151:   uprintf(\"Failed to set folder option for FileOpenDialog: error %X\\n\", hr);",
          "152:   goto fallback;",
          "153:  }",
          "155:  wpath = utf8_to_wchar(szFolderPath);",
          "157:  fname = NULL;",
          "158:  if ((wpath != NULL) && (wcslen(wpath) >= 1)) {",
          "159:   for (i = wcslen(wpath) - 1; i != 0; i--) {",
          "160:    if (wpath[i] == L'\\\\') {",
          "161:     wpath[i] = 0;",
          "162:     fname = &wpath[i + 1];",
          "163:     break;",
          "165:   }",
          "166:  }",
          "168:  hr = SHCreateItemFromParsingName(wpath, NULL, &IID_IShellItem, (LPVOID)&si_path);",
          "169:  if (SUCCEEDED(hr)) {",
          "170:   if (wpath != NULL) {",
          "171:    pfod->lpVtbl->SetFolder(pfod, si_path);",
          "172:   }",
          "173:   if (fname != NULL) {",
          "174:    pfod->lpVtbl->SetFileName(pfod, fname);",
          "175:   }",
          "176:  }",
          "177:  safe_free(wpath);",
          "179:  hr = pfod->lpVtbl->Show(pfod, hMainDialog);",
          "180:  if (SUCCEEDED(hr)) {",
          "181:   hr = pfod->lpVtbl->GetResult(pfod, &psi);",
          "182:   if (SUCCEEDED(hr)) {",
          "183:    psi->lpVtbl->GetDisplayName(psi, SIGDN_FILESYSPATH, &wpath);",
          "184:    tmp_path = wchar_to_utf8(wpath);",
          "185:    CoTaskMemFree(wpath);",
          "186:    if (tmp_path == NULL) {",
          "187:     uprintf(\"Could not convert path\\n\");",
          "188:    } else {",
          "189:     static_strcpy(szFolderPath, tmp_path);",
          "190:     safe_free(tmp_path);",
          "192:   } else {",
          "193:    uprintf(\"Failed to set folder option for FileOpenDialog: error %X\\n\", hr);",
          "195:  } else if ((hr & 0xFFFF) != ERROR_CANCELLED) {",
          "197:   uprintf(\"Could not show FileOpenDialog: error %X\\n\", hr);",
          "198:   goto fallback;",
          "199:  }",
          "200:  pfod->lpVtbl->Release(pfod);",
          "201:  dialog_showing--;",
          "202:  return;",
          "204:  if (pfod != NULL) {",
          "205:   pfod->lpVtbl->Release(pfod);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "267:   return NULL;",
          "268:  dialog_showing++;",
          "318:    safe_free(filter_spec[i].pszName);",
          "321:    if (SUCCEEDED(hr)) {",
          "324:     if (SUCCEEDED(hr)) {",
          "334:     }",
          "340:    }",
          "349:   }",
          "350:  }",
          "352:  memset(&ofn, 0, sizeof(ofn));",
          "",
          "[Removed Lines]",
          "270:  if (nWindowsVersion >= WINDOWS_VISTA) {",
          "271:   INIT_VISTA_SHELL32;",
          "272:   filter_spec = (COMDLG_FILTERSPEC*)calloc(ext->count + 1, sizeof(COMDLG_FILTERSPEC));",
          "273:   if ((IS_VISTA_SHELL32_AVAILABLE) && (filter_spec != NULL)) {",
          "275:    for (i = 0; i < ext->count; i++) {",
          "276:     filter_spec[i].pszSpec = utf8_to_wchar(ext->extension[i]);",
          "277:     filter_spec[i].pszName = utf8_to_wchar(ext->description[i]);",
          "278:    }",
          "279:    filter_spec[i].pszSpec = L\"*.*\";",
          "280:    filter_spec[i].pszName = utf8_to_wchar(lmprintf(MSG_107));",
          "282:    hr = CoCreateInstance(save ? &CLSID_FileSaveDialog : &CLSID_FileOpenDialog, NULL, CLSCTX_INPROC,",
          "283:     &IID_IFileDialog, (LPVOID)&pfd);",
          "285:    if (FAILED(hr)) {",
          "286:     SetLastError(hr);",
          "287:     uprintf(\"CoCreateInstance for FileOpenDialog failed: %s\\n\", WindowsErrorString());",
          "288:     pfd = NULL; // Just in case",
          "289:     goto fallback;",
          "290:    }",
          "293:    pfd->lpVtbl->SetFileTypes(pfd, (UINT)ext->count + 1, filter_spec);",
          "296:    wpath = utf8_to_wchar(path);",
          "297:    hr = (*pfSHCreateItemFromParsingName)(wpath, NULL, &IID_IShellItem, (LPVOID)&si_path);",
          "298:    if (SUCCEEDED(hr)) {",
          "299:     pfd->lpVtbl->SetFolder(pfd, si_path);",
          "300:    }",
          "301:    safe_free(wpath);",
          "304:    wfilename = utf8_to_wchar((ext->filename == NULL) ? \"\" : ext->filename);",
          "305:    if (wfilename != NULL) {",
          "306:     pfd->lpVtbl->SetFileName(pfd, wfilename);",
          "307:    }",
          "310:    hr = pfd->lpVtbl->Show(pfd, hMainDialog);",
          "313:    safe_free(wfilename);",
          "314:    for (i = 0; i < ext->count; i++) {",
          "315:     safe_free(filter_spec[i].pszSpec);",
          "316:     safe_free(filter_spec[i].pszName);",
          "317:    }",
          "319:    safe_free(filter_spec);",
          "323:     hr = pfd->lpVtbl->GetResult(pfd, &psiResult);",
          "325:      hr = psiResult->lpVtbl->GetDisplayName(psiResult, SIGDN_FILESYSPATH, &wpath);",
          "326:      if (SUCCEEDED(hr)) {",
          "327:       filepath = wchar_to_utf8(wpath);",
          "328:       CoTaskMemFree(wpath);",
          "329:      } else {",
          "330:       SetLastError(hr);",
          "331:       uprintf(\"Unable to access file path: %s\\n\", WindowsErrorString());",
          "332:      }",
          "333:      psiResult->lpVtbl->Release(psiResult);",
          "335:    } else if ((hr & 0xFFFF) != ERROR_CANCELLED) {",
          "337:     SetLastError(hr);",
          "338:     uprintf(\"Could not show FileOpenDialog: %s\\n\", WindowsErrorString());",
          "339:     goto fallback;",
          "341:    pfd->lpVtbl->Release(pfd);",
          "342:    dialog_showing--;",
          "343:    return filepath;",
          "344:   }",
          "345:  fallback:",
          "346:   safe_free(filter_spec);",
          "347:   if (pfd != NULL) {",
          "348:    pfd->lpVtbl->Release(pfd);",
          "",
          "[Added Lines]",
          "250:  filter_spec = (COMDLG_FILTERSPEC*)calloc(ext->count + 1, sizeof(COMDLG_FILTERSPEC));",
          "251:  if (filter_spec != NULL) {",
          "253:   for (i = 0; i < ext->count; i++) {",
          "254:    filter_spec[i].pszSpec = utf8_to_wchar(ext->extension[i]);",
          "255:    filter_spec[i].pszName = utf8_to_wchar(ext->description[i]);",
          "256:   }",
          "257:   filter_spec[i].pszSpec = L\"*.*\";",
          "258:   filter_spec[i].pszName = utf8_to_wchar(lmprintf(MSG_107));",
          "260:   hr = CoCreateInstance(save ? &CLSID_FileSaveDialog : &CLSID_FileOpenDialog, NULL, CLSCTX_INPROC,",
          "261:    &IID_IFileDialog, (LPVOID)&pfd);",
          "263:   if (FAILED(hr)) {",
          "264:    SetLastError(hr);",
          "265:    uprintf(\"CoCreateInstance for FileOpenDialog failed: %s\\n\", WindowsErrorString());",
          "266:    pfd = NULL; // Just in case",
          "267:    goto fallback;",
          "268:   }",
          "271:   pfd->lpVtbl->SetFileTypes(pfd, (UINT)ext->count + 1, filter_spec);",
          "274:   wpath = utf8_to_wchar(path);",
          "275:   hr = SHCreateItemFromParsingName(wpath, NULL, &IID_IShellItem, (LPVOID)&si_path);",
          "276:   if (SUCCEEDED(hr)) {",
          "277:    pfd->lpVtbl->SetFolder(pfd, si_path);",
          "278:   }",
          "279:   safe_free(wpath);",
          "282:   wfilename = utf8_to_wchar((ext->filename == NULL) ? \"\" : ext->filename);",
          "283:   if (wfilename != NULL) {",
          "284:    pfd->lpVtbl->SetFileName(pfd, wfilename);",
          "285:   }",
          "288:   hr = pfd->lpVtbl->Show(pfd, hMainDialog);",
          "291:   safe_free(wfilename);",
          "292:   for (i = 0; i < ext->count; i++) {",
          "293:    safe_free(filter_spec[i].pszSpec);",
          "295:   }",
          "296:   safe_free(filter_spec[i].pszName);",
          "297:   safe_free(filter_spec);",
          "299:   if (SUCCEEDED(hr)) {",
          "301:    hr = pfd->lpVtbl->GetResult(pfd, &psiResult);",
          "303:     hr = psiResult->lpVtbl->GetDisplayName(psiResult, SIGDN_FILESYSPATH, &wpath);",
          "305:      filepath = wchar_to_utf8(wpath);",
          "306:      CoTaskMemFree(wpath);",
          "307:     } else {",
          "308:      SetLastError(hr);",
          "309:      uprintf(\"Unable to access file path: %s\\n\", WindowsErrorString());",
          "311:     psiResult->lpVtbl->Release(psiResult);",
          "313:   } else if ((hr & 0xFFFF) != ERROR_CANCELLED) {",
          "315:    SetLastError(hr);",
          "316:    uprintf(\"Could not show FileOpenDialog: %s\\n\", WindowsErrorString());",
          "317:    goto fallback;",
          "319:   pfd->lpVtbl->Release(pfd);",
          "320:   dialog_showing--;",
          "321:   return filepath;",
          "322:  }",
          "324: fallback:",
          "325:  safe_free(filter_spec);",
          "326:  if (pfd != NULL) {",
          "327:   pfd->lpVtbl->Release(pfd);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "434:  hFont = CreateFontA(-MulDiv(10, GetDeviceCaps(GetDC(hMainDialog), LOGPIXELSY), 72),",
          "435:   0, 0, 0, FW_MEDIUM, FALSE, FALSE, FALSE, DEFAULT_CHARSET,",
          "439:  hDC = GetDC(hMainDialog);",
          "",
          "[Removed Lines]",
          "436:   0, 0, PROOF_QUALITY, 0, (nWindowsVersion >= WINDOWS_VISTA)?\"Segoe UI\":\"Arial Unicode MS\");",
          "",
          "[Added Lines]",
          "414:   0, 0, PROOF_QUALITY, 0, \"Segoe UI\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "460:  x = edge[0];",
          "465:  y = rect.bottom - height + 1;",
          "466:  width = edge[1] - edge[0] - 1;",
          "",
          "[Removed Lines]",
          "461:  if (nWindowsVersion <= WINDOWS_XP) {",
          "462:   x -= 1;",
          "463:   height -= 2;",
          "464:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "722:  switch (message) {",
          "723:  case WM_INITDIALOG:",
          "742:   apply_localization(IDD_NOTIFICATION, hDlg);",
          "743:   background_brush = CreateSolidBrush(GetSysColor(COLOR_WINDOW));",
          "",
          "[Removed Lines]",
          "724:   if (nWindowsVersion >= WINDOWS_VISTA) { // of course, this stuff doesn't work on XP!",
          "726:    ncm.cbSize = sizeof(ncm);",
          "729:    #if defined(_MSC_VER) && (_MSC_VER >= 1500) && (_WIN32_WINNT >= _WIN32_WINNT_VISTA)",
          "730:    ncm.cbSize -= sizeof(ncm.iPaddedBorderWidth);",
          "731:    #endif",
          "732:    SystemParametersInfo(SPI_GETNONCLIENTMETRICS, ncm.cbSize, &ncm, 0);",
          "733:    hDlgFont = CreateFontIndirect(&(ncm.lfMessageFont));",
          "735:    SendMessage(hDlg, WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "736:    SendMessage(GetDlgItem(hDlg, IDC_NOTIFICATION_TEXT), WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "737:    SendMessage(GetDlgItem(hDlg, IDC_MORE_INFO), WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "738:    SendMessage(GetDlgItem(hDlg, IDYES), WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "739:    SendMessage(GetDlgItem(hDlg, IDNO), WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "740:   }",
          "",
          "[Added Lines]",
          "699:   ncm.cbSize = sizeof(ncm);",
          "702:   #if defined(_MSC_VER) && (_MSC_VER >= 1500) && (_WIN32_WINNT >= _WIN32_WINNT_VISTA)",
          "703:   ncm.cbSize -= sizeof(ncm.iPaddedBorderWidth);",
          "704:   #endif",
          "705:   SystemParametersInfo(SPI_GETNONCLIENTMETRICS, ncm.cbSize, &ncm, 0);",
          "706:   hDlgFont = CreateFontIndirect(&(ncm.lfMessageFont));",
          "708:   SendMessage(hDlg, WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "709:   SendMessage(GetDlgItem(hDlg, IDC_NOTIFICATION_TEXT), WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "710:   SendMessage(GetDlgItem(hDlg, IDC_MORE_INFO), WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "711:   SendMessage(GetDlgItem(hDlg, IDYES), WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "712:   SendMessage(GetDlgItem(hDlg, IDNO), WM_SETFONT, (WPARAM)hDlgFont, MAKELPARAM(TRUE, 0));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "880: #if defined(_MSC_VER) && (_MSC_VER >= 1500) && (_WIN32_WINNT >= _WIN32_WINNT_VISTA)",
          "886: #endif",
          "887:   SystemParametersInfo(SPI_GETNONCLIENTMETRICS, ncm.cbSize, &ncm, 0);",
          "888:   hDlgFont = CreateFontIndirect(&(ncm.lfMessageFont));",
          "",
          "[Removed Lines]",
          "881:   if (nWindowsVersion >= WINDOWS_VISTA) {",
          "884:    ncm.cbSize -= sizeof(ncm.iPaddedBorderWidth);",
          "885:   }",
          "",
          "[Added Lines]",
          "855:   ncm.cbSize -= sizeof(ncm.iPaddedBorderWidth);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1022: #if defined(_MSC_VER) && (_MSC_VER >= 1500) && (_WIN32_WINNT >= _WIN32_WINNT_VISTA)",
          "1028: #endif",
          "1029:   SystemParametersInfo(SPI_GETNONCLIENTMETRICS, ncm.cbSize, &ncm, 0);",
          "1030:   hDlgFont = CreateFontIndirect(&(ncm.lfMessageFont));",
          "",
          "[Removed Lines]",
          "1023:   if (nWindowsVersion >= WINDOWS_VISTA) {",
          "1026:    ncm.cbSize -= sizeof(ncm.iPaddedBorderWidth);",
          "1027:   }",
          "",
          "[Added Lines]",
          "995:   ncm.cbSize -= sizeof(ncm.iPaddedBorderWidth);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1377: BOOL CreateTaskbarList(void)",
          "1378: {",
          "1379:  HRESULT hr;",
          "1384:  if (FAILED(hr)) {",
          "1385:   uprintf(\"CoCreateInstance for TaskbarList failed: error %X\\n\", hr);",
          "1386:   ptbl = NULL;",
          "",
          "[Removed Lines]",
          "1295: typedef enum MY_STPFLAG",
          "1296: {",
          "1297:  MY_STPF_NONE = 0,",
          "1298:  MY_STPF_USEAPPTHUMBNAILALWAYS = 0x1,",
          "1299:  MY_STPF_USEAPPTHUMBNAILWHENACTIVE = 0x2,",
          "1300:  MY_STPF_USEAPPPEEKALWAYS = 0x4,",
          "1301:  MY_STPF_USEAPPPEEKWHENACTIVE = 0x8",
          "1302: } MY_STPFLAG;",
          "1304: typedef enum MY_THUMBBUTTONMASK",
          "1305: {",
          "1306:  MY_THB_BITMAP = 0x1,",
          "1307:  MY_THB_ICON = 0x2,",
          "1308:  MY_THB_TOOLTIP = 0x4,",
          "1309:  MY_THB_FLAGS = 0x8",
          "1310: } MY_THUMBBUTTONMASK;",
          "1312: typedef enum MY_THUMBBUTTONFLAGS",
          "1313: {",
          "1314:  MY_THBF_ENABLED = 0,",
          "1315:  MY_THBF_DISABLED = 0x1,",
          "1316:  MY_THBF_DISMISSONCLICK = 0x2,",
          "1317:  MY_THBF_NOBACKGROUND = 0x4,",
          "1318:  MY_THBF_HIDDEN = 0x8,",
          "1319:  MY_THBF_NONINTERACTIVE = 0x10",
          "1320: } MY_THUMBBUTTONFLAGS;",
          "1322: typedef struct MY_THUMBBUTTON",
          "1323: {",
          "1324:  MY_THUMBBUTTONMASK dwMask;",
          "1325:  UINT iId;",
          "1326:  UINT iBitmap;",
          "1327:  HICON hIcon;",
          "1328:  WCHAR szTip[260];",
          "1329:  MY_THUMBBUTTONFLAGS dwFlags;",
          "1330: } MY_THUMBBUTTON;",
          "1333: typedef enum MY_TBPFLAG",
          "1334: {",
          "1335:  TASKBAR_NOPROGRESS = 0,",
          "1336:  TASKBAR_INDETERMINATE = 0x1,",
          "1337:  TASKBAR_NORMAL = 0x2,",
          "1338:  TASKBAR_ERROR = 0x4,",
          "1339:  TASKBAR_PAUSED = 0x8",
          "1340: } MY_TBPFLAG;",
          "1343: #pragma push_macro(\"INTERFACE\")",
          "1344: #undef  INTERFACE",
          "1345: #define INTERFACE my_ITaskbarList3",
          "1346: DECLARE_INTERFACE_(my_ITaskbarList3, IUnknown) {",
          "1347:  STDMETHOD (QueryInterface) (THIS_ REFIID riid, LPVOID *ppvObj) PURE;",
          "1348:  STDMETHOD_(ULONG, AddRef) (THIS) PURE;",
          "1349:  STDMETHOD_(ULONG, Release) (THIS) PURE;",
          "1350:  STDMETHOD (HrInit) (THIS) PURE;",
          "1351:  STDMETHOD (AddTab) (THIS_ HWND hwnd) PURE;",
          "1352:  STDMETHOD (DeleteTab) (THIS_ HWND hwnd) PURE;",
          "1353:  STDMETHOD (ActivateTab) (THIS_ HWND hwnd) PURE;",
          "1354:  STDMETHOD (SetActiveAlt) (THIS_ HWND hwnd) PURE;",
          "1355:  STDMETHOD (MarkFullscreenWindow) (THIS_ HWND hwnd, int fFullscreen) PURE;",
          "1356:  STDMETHOD (SetProgressValue) (THIS_ HWND hwnd, ULONGLONG ullCompleted, ULONGLONG ullTotal) PURE;",
          "1357:  STDMETHOD (SetProgressState) (THIS_ HWND hwnd, TASKBAR_PROGRESS_FLAGS tbpFlags) PURE;",
          "1358:  STDMETHOD (RegisterTab) (THIS_ HWND hwndTab,HWND hwndMDI) PURE;",
          "1359:  STDMETHOD (UnregisterTab) (THIS_ HWND hwndTab) PURE;",
          "1360:  STDMETHOD (SetTabOrder) (THIS_ HWND hwndTab, HWND hwndInsertBefore) PURE;",
          "1361:  STDMETHOD (SetTabActive) (THIS_ HWND hwndTab, HWND hwndMDI, DWORD dwReserved) PURE;",
          "1362:  STDMETHOD (ThumbBarAddButtons) (THIS_ HWND hwnd, UINT cButtons, MY_THUMBBUTTON* pButton) PURE;",
          "1363:  STDMETHOD (ThumbBarUpdateButtons) (THIS_ HWND hwnd, UINT cButtons, MY_THUMBBUTTON* pButton) PURE;",
          "1364:  STDMETHOD (ThumbBarSetImageList) (THIS_ HWND hwnd, HIMAGELIST himl) PURE;",
          "1365:  STDMETHOD (SetOverlayIcon) (THIS_ HWND hwnd, HICON hIcon, LPCWSTR pszDescription) PURE;",
          "1366:  STDMETHOD (SetThumbnailTooltip) (THIS_ HWND hwnd, LPCWSTR pszTip) PURE;",
          "1367:  STDMETHOD (SetThumbnailClip) (THIS_ HWND hwnd, RECT *prcClip) PURE;",
          "1368: };",
          "1369: const IID my_IID_ITaskbarList3 =",
          "1370:  { 0xea1afb91, 0x9e28, 0x4b86, { 0x90, 0xe9, 0x9e, 0x9f, 0x8a, 0x5e, 0xef, 0xaf } };",
          "1371: const IID my_CLSID_TaskbarList =",
          "1372:  { 0x56fdf344, 0xfd6d, 0x11d0, { 0x95, 0x8a ,0x0, 0x60, 0x97, 0xc9, 0xa0 ,0x90 } };",
          "1374: static my_ITaskbarList3* ptbl = NULL;",
          "1380:  if (nWindowsVersion < WINDOWS_7)",
          "1382:   return FALSE;",
          "1383:  hr = CoCreateInstance(&my_CLSID_TaskbarList, NULL, CLSCTX_ALL, &my_IID_ITaskbarList3, (LPVOID)&ptbl);",
          "",
          "[Added Lines]",
          "1262: static ITaskbarList3* ptbl = NULL;",
          "1269:  hr = CoCreateInstance(&CLSID_TaskbarList, NULL, CLSCTX_ALL, &IID_ITaskbarList3, (LPVOID)&ptbl);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1402:   return FALSE;",
          "1403:  return !FAILED(ptbl->lpVtbl->SetProgressValue(ptbl, hMainDialog, ullCompleted, ullTotal));",
          "1404: }",
          "",
          "[Removed Lines]",
          "1405: #pragma pop_macro(\"INTERFACE\")",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1523: BOOL SetUpdateCheck(void)",
          "1524: {",
          "1525:  BOOL enable_updates;",
          "1527:  notification_info more_info = { IDD_UPDATE_POLICY, UpdateCallback };",
          "1528:  char filename[MAX_PATH] = \"\", exename[] = APPLICATION_NAME \".exe\";",
          "1529:  size_t fn_len, exe_len;",
          "",
          "[Removed Lines]",
          "1526:  uint64_t commcheck = _GetTickCount64();",
          "",
          "[Added Lines]",
          "1410:  uint64_t commcheck = GetTickCount64();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1874:   len = wcslen(wBuf);",
          "1875:   wBuf[len + 1] = 0;",
          "1876:   dst = (uintptr_t)&wBuf[len + 2];",
          "",
          "[Removed Lines]",
          "1868:   if ((nWindowsVersion > WINDOWS_XP) && IsFontAvailable(\"Segoe UI\")) {",
          "1870:    wBuf[8] = 0;",
          "1871:   } else {",
          "1872:    wcscpy(wBuf, L\"MS Shell Dlg\");",
          "1873:   }",
          "",
          "[Added Lines]",
          "1753:   wBuf[8] = 0;",
          "",
          "---------------"
        ],
        "src/vhd.c||src/vhd.c": [
          "File: src/vhd.c -> src/vhd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:    wim_nb_files++;",
          "591:   } else {",
          "592:    wim_proc_files++;",
          "596:     if (wim_proc_files > wim_nb_files)",
          "597:      wim_proc_files = wim_nb_files;",
          "601:     apply_percent = 4.636942595f * ((float)wim_proc_files) / ((float)wim_nb_files);",
          "",
          "[Removed Lines]",
          "593:    if (_GetTickCount64() > LastRefresh + 100) {",
          "598:     LastRefresh = _GetTickCount64();",
          "",
          "[Added Lines]",
          "593:    if (GetTickCount64() > LastRefresh + 100) {",
          "598:     LastRefresh = GetTickCount64();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5e609f022fdf2b4003d654c17d137b60daebd0ba",
      "candidate_info": {
        "commit_hash": "5e609f022fdf2b4003d654c17d137b60daebd0ba",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/5e609f022fdf2b4003d654c17d137b60daebd0ba",
        "files": [
          "res/localization/rufus.loc",
          "src/rufus.rc"
        ],
        "message": "[loc] update Finnish translation to latest",
        "before_after_code_files": [
          "res/localization/rufus.loc||res/localization/rufus.loc",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "res/localization/rufus.loc||res/localization/rufus.loc",
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "res/localization/rufus.loc||res/localization/rufus.loc": [
          "File: res/localization/rufus.loc -> res/localization/rufus.loc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4685: ################################################################################",
          "4686: l \"fi-FI\" \"Finnish (Suomi)\" 0x040B",
          "4688: b \"en-US\"",
          "4690: # Main dialog",
          "",
          "[Removed Lines]",
          "4687: v 1.0.21",
          "",
          "[Added Lines]",
          "4687: v 1.0.22",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5139: t MSG_292 \"Valitse Windows-versio, jonka haluat asentaa:\"",
          "5140: t MSG_293 \"T\u00e4t\u00e4 Windows-versiota ei tueta\"",
          "5141: t MSG_294 \"Rufus ei en\u00e4\u00e4 tue t\u00e4t\u00e4 Windows-versiota.\"",
          "5143: ################################################################################",
          "5144: l \"fr-FR\" \"French (Fran\u00e7ais)\" 0x040c, 0x080c, 0x0c0c, 0x100c, 0x140c, 0x180c, 0x1c0c, 0x200c, 0x240c, 0x280c, 0x2c0c, 0x300c, 0x340c, 0x380c, 0xe40c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5142: t MSG_295 \"Varoitus: Ep\u00e4virallinen versio\"",
          "5143: t MSG_296 \"T\u00e4m\u00e4 versio ei ole Rufuksen virallisen kehitt\u00e4j\u00e4n tekem\u00e4.\\n\\nHaluatko varmasti suorittaa ohjelman?\"",
          "5144: t MSG_297 \"Vajaakokoinen ISO-levykuva havaittu\"",
          "5145: t MSG_298 \"Valitsemasi ISO-levykuva ei vastaa sen ilmoittamaa tiedostokokoa: %s ohjelmatiedosta puuttuu!\\n\\nJos latasit \"",
          "5146:  \"t\u00e4m\u00e4n tiedoston internetist\u00e4, yrit\u00e4 ladata tiedosto uudelleen ja varmista, ett\u00e4 MD5- tai SHA-tarkistussumma t\u00e4sm\u00e4\u00e4 \"",
          "5147:  \"alkuper\u00e4isen summan kanssa.\\n\\nVoit laskea MD5- tai SHA-tarkistussumman Rufuksessa painamalla '#'-painiketta.\"",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.16.1149\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.16.1150\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368: VS_VERSION_INFO VERSIONINFO",
          "371:  FILEFLAGSMASK 0x3fL",
          "372: #ifdef _DEBUG",
          "373:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "369:  FILEVERSION 2,16,1149,0",
          "370:  PRODUCTVERSION 2,16,1149,0",
          "",
          "[Added Lines]",
          "369:  FILEVERSION 2,16,1150,0",
          "370:  PRODUCTVERSION 2,16,1150,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:         BEGIN",
          "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "386:             VALUE \"FileDescription\", \"Rufus\"",
          "388:             VALUE \"InternalName\", \"Rufus\"",
          "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "392:             VALUE \"ProductName\", \"Rufus\"",
          "394:         END",
          "395:     END",
          "396:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "387:             VALUE \"FileVersion\", \"2.16.1149\"",
          "393:             VALUE \"ProductVersion\", \"2.16.1149\"",
          "",
          "[Added Lines]",
          "387:             VALUE \"FileVersion\", \"2.16.1150\"",
          "393:             VALUE \"ProductVersion\", \"2.16.1150\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}