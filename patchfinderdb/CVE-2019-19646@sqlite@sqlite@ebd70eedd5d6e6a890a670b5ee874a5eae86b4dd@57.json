{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fab5b07395796f7761dbf3ba8604325889af9522",
      "candidate_info": {
        "commit_hash": "fab5b07395796f7761dbf3ba8604325889af9522",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fab5b07395796f7761dbf3ba8604325889af9522",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/windowB.test"
        ],
        "message": "Fix the windows inverse function on the JSON aggregates.\n\nFossilOrigin-Name: f464d847af490dd3ec45565dcc4c2e6ff4ed1ebb65036f30ca0b3ce2e73080e6",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1820:     if( pStr->zBuf==0 ){",
          "1821:       jsonInit(pStr, ctx);",
          "1822:       jsonAppendChar(pStr, '[');",
          "1824:       jsonAppendChar(pStr, ',');",
          "1825:       pStr->pCtx = ctx;",
          "1826:     }",
          "",
          "[Removed Lines]",
          "1823:     }else{",
          "",
          "[Added Lines]",
          "1823:     }else if( pStr->nUsed>1 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1870: ){",
          "1871:   int i;",
          "1872:   int inStr = 0;",
          "1873:   char *z;",
          "1874:   JsonString *pStr;",
          "1875:   UNUSED_PARAM(argc);",
          "1876:   UNUSED_PARAM(argv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1873:   int nNest = 0;",
          "1875:   char c;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1881:   if( NEVER(!pStr) ) return;",
          "1882: #endif",
          "1883:   z = pStr->zBuf;",
          "1887:       inStr = !inStr;",
          "1889:       i++;",
          "1890:     }",
          "1891:   }",
          "1892:   pStr->nUsed -= i;",
          "",
          "[Removed Lines]",
          "1884:   for(i=1; z[i]!=',' || inStr; i++){",
          "1885:     assert( i<pStr->nUsed );",
          "1886:     if( z[i]=='\"' ){",
          "1888:     }else if( z[i]=='\\\\' ){",
          "",
          "[Added Lines]",
          "1886:   for(i=1; (c = z[i])!=',' || inStr || nNest; i++){",
          "1887:     if( i>=pStr->nUsed ){",
          "1888:       pStr->nUsed = 1;",
          "1889:       return;",
          "1890:     }",
          "1891:     if( c=='\"' ){",
          "1893:     }else if( c=='\\\\' ){",
          "1895:     }else if( !inStr ){",
          "1896:       if( c=='{' || c=='[' ) nNest++;",
          "1897:       if( c=='}' || c==']' ) nNest--;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1916:     if( pStr->zBuf==0 ){",
          "1917:       jsonInit(pStr, ctx);",
          "1918:       jsonAppendChar(pStr, '{');",
          "1920:       jsonAppendChar(pStr, ',');",
          "1921:       pStr->pCtx = ctx;",
          "1922:     }",
          "",
          "[Removed Lines]",
          "1919:     }else{",
          "",
          "[Added Lines]",
          "1927:     }else if( pStr->nUsed>1 ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4a1978814da41608a16f6953bd575c97d587a34bd80b7ac0e619d62bfdc903d2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: ifcapable json1 {",
          "84:   reset_db",
          "85:   do_execsql_test 3.0 {",
          "91:   }",
          "93:   do_execsql_test 3.1 {",
          "",
          "[Removed Lines]",
          "86:     CREATE TABLE testjson(id INTEGER PRIMARY KEY, j TEXT);",
          "87:     INSERT INTO testjson VALUES(1, '{\"a\":1}');",
          "88:     INSERT INTO testjson VALUES(2, '{\"b\":2}');",
          "89:     INSERT INTO testjson VALUES(3, '{\"c\":3}');",
          "90:     INSERT INTO testjson VALUES(4, '{\"d\":4}');",
          "",
          "[Added Lines]",
          "86:     CREATE TABLE testjson(id INTEGER PRIMARY KEY, j TEXT, x TEXT);",
          "87:     INSERT INTO testjson VALUES(1, '{\"a\":1}', 'a');",
          "88:     INSERT INTO testjson VALUES(2, '{\"b\":2}', 'b');",
          "89:     INSERT INTO testjson VALUES(3, '{\"c\":3}', 'c');",
          "90:     INSERT INTO testjson VALUES(4, '{\"d\":4}', 'd');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:   do_execsql_test 3.3 {",
          "109:     SELECT json_group_array(json(j)) OVER (",
          "111:     ) FROM testjson;",
          "112:   } {",
          "113:     {[{\"a\":1}]}",
          "",
          "[Removed Lines]",
          "110:       ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW EXCLUDE TIES",
          "",
          "[Added Lines]",
          "110:       ORDER BY id RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW",
          "111:       EXCLUDE TIES",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138:     {[{\"b\":2},{\"c\":3}]}",
          "139:   }",
          "144:     SELECT json_group_array(json(j)) OVER (",
          "145:       ORDER BY id ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING",
          "146:     ) FROM testjson;",
          "147:   } {",
          "148:     {[]}",
          "152:   }",
          "156:       ORDER BY id ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING",
          "157:     ) FROM testjson;",
          "161:     SELECT json_group_array(json(j)) FILTER (WHERE id!=2) OVER (",
          "162:       ORDER BY id ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING",
          "164:   } {",
          "165:     {[]}",
          "169:   }",
          "171:   }",
          "172: }",
          "",
          "[Removed Lines]",
          "141:   if 0 {",
          "143:   do_execsql_test 3.5 {",
          "149:     {[{\"a\":1}]}",
          "150:     {[{\"a\":1},{\"b\":2}]}",
          "151:     {[{\"b\":2},{\"c\":3}]}",
          "154:   explain_i {",
          "155:     SELECT json_group_array(json(j)) FILTER (WHERE id!=2) OVER (",
          "158:   }",
          "159:   do_execsql_test 3.7 {",
          "160:   PRAGMA vdbe_trace = 1;",
          "163:     ) FROM testjson;",
          "166:     {[{\"a\":1}]}",
          "167:     {[{\"a\":1}]}",
          "168:     {[{\"c\":3}]}",
          "",
          "[Added Lines]",
          "142:   do_execsql_test 3.5a {",
          "143:     UPDATE testjson SET j = replace(j,char(125),',\"e\":9'||char(125));",
          "144:     SELECT j FROM testjson;",
          "145:   } {",
          "146:     {{\"a\":1,\"e\":9}}",
          "147:     {{\"b\":2,\"e\":9}}",
          "148:     {{\"c\":3,\"e\":9}}",
          "149:     {{\"d\":4,\"e\":9}}",
          "150:   }",
          "151:   do_execsql_test 3.5b {",
          "152:     SELECT group_concat(x,'') OVER (",
          "153:       ORDER BY id ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING",
          "154:     ) FROM testjson ORDER BY id;",
          "155:   } {bc cd d {}}",
          "156:   do_execsql_test 3.5c {",
          "161:     {[{\"b\":2,\"e\":9},{\"c\":3,\"e\":9}]}",
          "162:     {[{\"c\":3,\"e\":9},{\"d\":4,\"e\":9}]}",
          "163:     {[{\"d\":4,\"e\":9}]}",
          "165:   }",
          "166:   do_execsql_test 3.5d {",
          "167:     SELECT json_group_object(x,json(j)) OVER (",
          "168:       ORDER BY id ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING",
          "169:     ) FROM testjson;",
          "170:   } {",
          "171:     {{\"b\":{\"b\":2,\"e\":9},\"c\":{\"c\":3,\"e\":9}}}",
          "172:     {{\"c\":{\"c\":3,\"e\":9},\"d\":{\"d\":4,\"e\":9}}}",
          "173:     {{\"d\":{\"d\":4,\"e\":9}}}",
          "174:     {{}}",
          "177:   do_execsql_test 3.7b {",
          "178:     SELECT group_concat(x,'') FILTER (WHERE id!=2) OVER (",
          "181:   } {{} a a c}",
          "183:   do_execsql_test 3.7c {",
          "186:     ) FROM testjson",
          "189:     {[{\"a\":1,\"e\":9}]}",
          "190:     {[{\"a\":1,\"e\":9}]}",
          "191:     {[{\"c\":3,\"e\":9}]}",
          "193:   do_execsql_test 3.7d {",
          "194:     SELECT json_group_object(x,json(j)) FILTER (WHERE id!=2) OVER (",
          "195:       ORDER BY id ROWS BETWEEN 2 PRECEDING AND 1 PRECEDING",
          "196:     ) FROM testjson",
          "197:   } {",
          "198:     {{}}",
          "199:     {{\"a\":{\"a\":1,\"e\":9}}}",
          "200:     {{\"a\":{\"a\":1,\"e\":9}}}",
          "201:     {{\"c\":{\"c\":3,\"e\":9}}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0ad7aa818283c82c550cdf18c7f897341b66f39f",
      "candidate_info": {
        "commit_hash": "0ad7aa818283c82c550cdf18c7f897341b66f39f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0ad7aa818283c82c550cdf18c7f897341b66f39f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/join.test",
          "test/with1.test"
        ],
        "message": "Limit the size of SrcList objects to 200 entries (compile-time configurable using -DSQLITE_MAX_SRCLIST=n).  The maximum number of tables in a join has always been 64, so this is not a real constraint on capability.  Limiting the size of a SrcList prevents DOS attacks (discovered by OSSFuzz) using crazy nexted CTE joins.\n\nFossilOrigin-Name: 7cac614d5df55eb092b863163483b6782b942b21bd15fd787576fef5619fa849",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/join.test||test/join.test",
          "test/with1.test||test/with1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9a425051e7ba59e797636f5cf32b5f6efafdb21c8d5300e099b8008b829c1439",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3823:   return -1;",
          "3824: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3834: #ifndef SQLITE_MAX_SRCLIST",
          "3835: # define SQLITE_MAX_SRCLIST 200",
          "3836: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3861:     SrcList *pNew;",
          "3862:     int nAlloc = pSrc->nSrc*2+nExtra;",
          "3863:     int nGot;",
          "3864:     pNew = sqlite3DbRealloc(db, pSrc,",
          "3865:                sizeof(*pSrc) + (nAlloc-1)*sizeof(pSrc->a[0]) );",
          "3866:     if( pNew==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3877:     if( pSrc->nSrc+nExtra>=SQLITE_MAX_SRCLIST ){",
          "3883:       sqlite3OomFault(db);",
          "3884:       return pSrc;",
          "3885:     }",
          "3886:     if( nAlloc>SQLITE_MAX_SRCLIST ) nAlloc = SQLITE_MAX_SRCLIST;",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "671: jointest join-12.6 66 {1 {at most 64 tables in a join}}",
          "672: jointest join-12.7 127 {1 {at most 64 tables in a join}}",
          "673: jointest join-12.8 128 {1 {at most 64 tables in a join}}",
          "690: #-------------------------------------------------------------------------",
          "",
          "[Removed Lines]",
          "674: jointest join-12.9 1000 {1 {at most 64 tables in a join}}",
          "676: # If SQLite is built with SQLITE_MEMDEBUG, then the huge number of realloc()",
          "677: # calls made by the following test cases are too time consuming to run.",
          "678: # Without SQLITE_MEMDEBUG, realloc() is fast enough that these are not",
          "679: # a problem.",
          "680: ifcapable pragma&&compileoption_diags {",
          "681:   if {[lsearch [db eval {PRAGMA compile_options}] MEMDEBUG]<0} {",
          "682:     jointest join-12.10 65534 {1 {at most 64 tables in a join}}",
          "683:     jointest join-12.11 65535 {1 {too many references to \"t14\": max 65535}}",
          "684:     jointest join-12.12 65536 {1 {too many references to \"t14\": max 65535}}",
          "685:     jointest join-12.13 65537 {1 {too many references to \"t14\": max 65535}}",
          "686:   }",
          "687: }",
          "",
          "[Added Lines]",
          "675: # As of 2019-01-17, the number of elements in a SrcList is limited",
          "676: # to 200.  The following tests still run, but the answer is now",
          "677: # an SQLITE_NOMEM error.",
          "678: #",
          "679: # jointest join-12.9 1000 {1 {at most 64 tables in a join}}",
          "680: #",
          "681: #  If SQLite is built with SQLITE_MEMDEBUG, then the huge number of realloc()",
          "682: #  calls made by the following test cases are too time consuming to run.",
          "683: #  Without SQLITE_MEMDEBUG, realloc() is fast enough that these are not",
          "684: #  a problem.",
          "685: #",
          "686: # ifcapable pragma&&compileoption_diags {",
          "687: #    if {[lsearch [db eval {PRAGMA compile_options}] MEMDEBUG]<0} {",
          "688: #     jointest join-12.10 65534 {1 {at most 64 tables in a join}}",
          "689: #     jointest join-12.11 65535 {1 {too many references to \"t14\": max 65535}}",
          "690: #     jointest join-12.12 65536 {1 {too many references to \"t14\": max 65535}}",
          "691: #     jointest join-12.13 65537 {1 {too many references to \"t14\": max 65535}}",
          "692: #   }",
          "693: # }",
          "",
          "---------------"
        ],
        "test/with1.test||test/with1.test": [
          "File: test/with1.test -> test/with1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1071:              SELECT * FROM Table0  NATURAL JOIN  Table0));",
          "1072: } {{}}",
          "1074: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1074: # 2019-01-17",
          "1075: # Make sure crazy nexted CTE joins terminate with an error quickly.",
          "1076: #",
          "1077: do_catchsql_test 22.1 {",
          "1078:   WITH RECURSIVE c AS (",
          "1079:      WITH RECURSIVE c AS (",
          "1080:         WITH RECURSIVE c AS (",
          "1081:            WITH RECURSIVE c AS (",
          "1082:                WITH  c AS (VALUES(0))",
          "1083:                SELECT 1 FROM c LEFT JOIN c ON ltrim(1)",
          "1084:            )",
          "1085:            SELECT 1 FROM c,c,c,c,c,c,c,c,c",
          "1086:         )",
          "1087:         SELECT  2 FROM c,c,c,c,c,c,c,c,c",
          "1088:      )",
          "1089:      SELECT 3 FROM c,c,c,c,c,c,c,c,c",
          "1090:   )",
          "1091:   SELECT 4 FROM c,c,c,c,c,c,c,c,c;",
          "1092: } {1 {out of memory}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db561bcedaa38da1c4ac5097d6cab9e9567b1f1d",
      "candidate_info": {
        "commit_hash": "db561bcedaa38da1c4ac5097d6cab9e9567b1f1d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db561bcedaa38da1c4ac5097d6cab9e9567b1f1d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Performance optimization in sqlite3BtreeCursor().\n\nFossilOrigin-Name: ea068b099c96b8b9526114732d2a6be186cf381b7329d102778ad25b95510c9e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8d964e1c21d4cea699023e02b0616a75c5859dd083c9365cdcbc0676ebbdaae4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4379:     allocateTempSpace(pBt);",
          "4380:     if( pBt->pTmpSpace==0 ) return SQLITE_NOMEM_BKPT;",
          "4381:   }",
          "4385:   }",
          "",
          "[Removed Lines]",
          "4382:   if( iTable==1 && btreePagecount(pBt)==0 ){",
          "4383:     assert( wrFlag==0 );",
          "4384:     iTable = 0;",
          "",
          "[Added Lines]",
          "4382:   if( iTable<=1 ){",
          "4383:     if( iTable<1 ){",
          "4384:       return SQLITE_CORRUPT_BKPT;",
          "4385:     }else if( btreePagecount(pBt)==0 ){",
          "4386:       assert( wrFlag==0 );",
          "4387:       iTable = 0;",
          "4388:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4406:   pCur->eState = CURSOR_INVALID;",
          "4407:   return SQLITE_OK;",
          "4408: }",
          "4409: int sqlite3BtreeCursor(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4413: static int btreeCursorWithLock(",
          "4419: ){",
          "4420:   int rc;",
          "4421:   sqlite3BtreeEnter(p);",
          "4422:   rc = btreeCursor(p, iTable, wrFlag, pKeyInfo, pCur);",
          "4423:   sqlite3BtreeLeave(p);",
          "4424:   return rc;",
          "4425: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4415: ){",
          "4419:   }else{",
          "4423:   }",
          "4425: }",
          "",
          "[Removed Lines]",
          "4416:   int rc;",
          "4417:   if( iTable<1 ){",
          "4418:     rc = SQLITE_CORRUPT_BKPT;",
          "4420:     sqlite3BtreeEnter(p);",
          "4421:     rc = btreeCursor(p, iTable, wrFlag, pKeyInfo, pCur);",
          "4422:     sqlite3BtreeLeave(p);",
          "4424:   return rc;",
          "",
          "[Added Lines]",
          "4433:   if( p->sharable ){",
          "4434:     return btreeCursorWithLock(p, iTable, wrFlag, pKeyInfo, pCur);",
          "4436:     return btreeCursor(p, iTable, wrFlag, pKeyInfo, pCur);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83acc14ad4d03c8956a3d46f1ad555a30d092fed",
      "candidate_info": {
        "commit_hash": "83acc14ad4d03c8956a3d46f1ad555a30d092fed",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/83acc14ad4d03c8956a3d46f1ad555a30d092fed",
        "files": [
          "VERSION",
          "configure",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Increase the version number to 3.28.0 for the next release cycle.\n\nFossilOrigin-Name: 6eb38c59a81d27b7c1f3edad84b27a1114df6f1607282b2be1b5de9c7decc512",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9bd92afd0cb0a958441e861c7006b77027125b1ceea0868958ec948b6b3c7bc9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e1e28ec35c773c5b342d8231ec393e6c243d492a",
      "candidate_info": {
        "commit_hash": "e1e28ec35c773c5b342d8231ec393e6c243d492a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e1e28ec35c773c5b342d8231ec393e6c243d492a",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3corrupt4.test"
        ],
        "message": "Remove an assert() that could fail on a corrupt db from fts3_write.c.\n\nFossilOrigin-Name: 4cdcda408a4edcd2845584ddef64f0efdd2b4cc030afbc05fc2b8b555c69d3f6",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3corrupt4.test||test/fts3corrupt4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1612:   if( iStartLeaf==0 ){",
          "1613:     nExtra = nRoot + FTS3_NODE_PADDING;",
          "1614:   }",
          "",
          "[Removed Lines]",
          "1611:   assert( iStartLeaf<=iEndLeaf );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 98f343077887c4d3fc2ca3bbc7f20c80ec37b0e521d70af9c986ab80bb2c7903",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3corrupt4.test||test/fts3corrupt4.test": [
          "File: test/fts3corrupt4.test -> test/fts3corrupt4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   SELECT * FROM ft WHERE ft MATCH 'abc20'",
          "146: } {1 {database disk image is malformed}}",
          "148: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148: #-------------------------------------------------------------------------",
          "149: reset_db",
          "150: do_execsql_test 4.0 {",
          "151:   CREATE VIRTUAL TABLE t1 USING fts3();",
          "152:   INSERT INTO t1 VALUES('one two three');",
          "153:   UPDATE t1_segdir SET start_block = 1;",
          "154: }",
          "156: do_catchsql_test 4.1 {",
          "157:   SELECT * FROM t1 WHERE t1 MATCH 'one';",
          "158: } {1 {database disk image is malformed}}",
          "159: do_catchsql_test 4.2 {",
          "160:   SELECT * FROM t1 WHERE t1 MATCH 'two';",
          "161: } {1 {database disk image is malformed}}",
          "162: do_catchsql_test 4.3 {",
          "163:   SELECT * FROM t1 WHERE t1 MATCH 'three';",
          "164: } {1 {database disk image is malformed}}",
          "165: do_execsql_test 4.4 {",
          "166:   INSERT INTO t1(t1) VALUES('optimize');",
          "167: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}