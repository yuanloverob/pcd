{
  "cve_id": "CVE-2019-11810",
  "cve_desc": "An issue was discovered in the Linux kernel before 5.0.7. A NULL pointer dereference can occur when megasas_create_frame_pool() fails in megasas_alloc_cmds() in drivers/scsi/megaraid/megaraid_sas_base.c. This causes a Denial of Service, related to a use-after-free.",
  "repo": "torvalds/linux",
  "patch_hash": "bcf3b67d16a4c8ffae0aa79de5853435e683945c",
  "patch_info": {
    "commit_hash": "bcf3b67d16a4c8ffae0aa79de5853435e683945c",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/bcf3b67d16a4c8ffae0aa79de5853435e683945c",
    "files": [
      "drivers/scsi/megaraid/megaraid_sas_base.c"
    ],
    "message": "scsi: megaraid_sas: return error when create DMA pool failed\n\nwhen create DMA pool for cmd frames failed, we should return -ENOMEM,\ninstead of 0.\nIn some case in:\n\n    megasas_init_adapter_fusion()\n\n    -->megasas_alloc_cmds()\n       -->megasas_create_frame_pool\n          create DMA pool failed,\n        --> megasas_free_cmds() [1]\n\n    -->megasas_alloc_cmds_fusion()\n       failed, then goto fail_alloc_cmds.\n    -->megasas_free_cmds() [2]\n\nwe will call megasas_free_cmds twice, [1] will kfree cmd_list,\n[2] will use cmd_list.it will cause a problem:\n\nUnable to handle kernel NULL pointer dereference at virtual address\n00000000\npgd = ffffffc000f70000\n[00000000] *pgd=0000001fbf893003, *pud=0000001fbf893003,\n*pmd=0000001fbf894003, *pte=006000006d000707\nInternal error: Oops: 96000005 [#1] SMP\n Modules linked in:\n CPU: 18 PID: 1 Comm: swapper/0 Not tainted\n task: ffffffdfb9290000 ti: ffffffdfb923c000 task.ti: ffffffdfb923c000\n PC is at megasas_free_cmds+0x30/0x70\n LR is at megasas_free_cmds+0x24/0x70\n ...\n Call trace:\n [<ffffffc0005b779c>] megasas_free_cmds+0x30/0x70\n [<ffffffc0005bca74>] megasas_init_adapter_fusion+0x2f4/0x4d8\n [<ffffffc0005b926c>] megasas_init_fw+0x2dc/0x760\n [<ffffffc0005b9ab0>] megasas_probe_one+0x3c0/0xcd8\n [<ffffffc0004a5abc>] local_pci_probe+0x4c/0xb4\n [<ffffffc0004a5c40>] pci_device_probe+0x11c/0x14c\n [<ffffffc00053a5e4>] driver_probe_device+0x1ec/0x430\n [<ffffffc00053a92c>] __driver_attach+0xa8/0xb0\n [<ffffffc000538178>] bus_for_each_dev+0x74/0xc8\n  [<ffffffc000539e88>] driver_attach+0x28/0x34\n [<ffffffc000539a18>] bus_add_driver+0x16c/0x248\n [<ffffffc00053b234>] driver_register+0x6c/0x138\n [<ffffffc0004a5350>] __pci_register_driver+0x5c/0x6c\n [<ffffffc000ce3868>] megasas_init+0xc0/0x1a8\n [<ffffffc000082a58>] do_one_initcall+0xe8/0x1ec\n [<ffffffc000ca7be8>] kernel_init_freeable+0x1c8/0x284\n [<ffffffc0008d90b8>] kernel_init+0x1c/0xe4\n\nSigned-off-by: Jason Yan <yanaijie@huawei.com>\nAcked-by: Sumit Saxena <sumit.saxena@broadcom.com>\nSigned-off-by: Martin K. Petersen <martin.petersen@oracle.com>",
    "before_after_code_files": [
      "drivers/scsi/megaraid/megaraid_sas_base.c||drivers/scsi/megaraid/megaraid_sas_base.c"
    ]
  },
  "patch_diff": {
    "drivers/scsi/megaraid/megaraid_sas_base.c||drivers/scsi/megaraid/megaraid_sas_base.c": [
      "File: drivers/scsi/megaraid/megaraid_sas_base.c -> drivers/scsi/megaraid/megaraid_sas_base.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4188:  if (megasas_create_frame_pool(instance)) {",
      "4189:   dev_printk(KERN_DEBUG, &instance->pdev->dev, \"Error creating frame DMA pool\\n\");",
      "4190:   megasas_free_cmds(instance);",
      "4191:  }",
      "4193:  return 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4191:   return -ENOMEM;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "25fd08eb2be0fcebd5ab7bb8e1d4fe228c6739d0",
      "candidate_info": {
        "commit_hash": "25fd08eb2be0fcebd5ab7bb8e1d4fe228c6739d0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/25fd08eb2be0fcebd5ab7bb8e1d4fe228c6739d0",
        "files": [
          "drivers/infiniband/core/uverbs_cmd.c"
        ],
        "message": "RDMA/uverbs: Store PR pointer before it is overwritten\n\nThe IB_MR_REREG_PD command rewrites mr->pd after successful\nrereg_user_mr(), such change causes to lost usecnt information and\nproduces the following warning:\n\n WARNING: CPU: 1 PID: 1771 at drivers/infiniband/core/verbs.c:336 ib_dealloc_pd+0x4e/0x60 [ib_core]\n CPU: 1 PID: 1771 Comm: rereg_mr Tainted: G        W  OE 5.0.0-rc7-for-upstream-perf-2019-02-20_14-03-40-34 #1\n Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014\n RIP: 0010:ib_dealloc_pd+0x4e/0x60 [ib_core]\n RSP: 0018:ffffc90003923dc0 EFLAGS: 00010286\n RAX: 00000000ffffffff RBX: ffff88821f7f0400 RCX: ffff888236a40c00\n RDX: ffff88821f7f0400 RSI: 0000000000000001 RDI: 0000000000000000\n RBP: 0000000000000001 R08: ffff88835f665d80 R09: ffff8882209c90d8\n R10: ffff88835ec003e0 R11: 0000000000000000 R12: ffff888221680ba0\n R13: ffff888221680b00 R14: 00000000ffffffea R15: ffff88821f53c318\n FS:  00007f70db11e740(0000) GS:ffff88835f640000(0000) knlGS:0000000000000000\n CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n CR2: 0000000001dfd030 CR3: 000000029d9d8000 CR4: 00000000000006e0\n DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n Call Trace:\n  uverbs_free_pd+0x2d/0x30 [ib_uverbs]\n  destroy_hw_idr_uobject+0x16/0x40 [ib_uverbs]\n  uverbs_destroy_uobject+0x28/0x170 [ib_uverbs]\n  __uverbs_cleanup_ufile+0x6b/0x90 [ib_uverbs]\n  uverbs_destroy_ufile_hw+0x8b/0x110 [ib_uverbs]\n  ib_uverbs_close+0x1f/0x80 [ib_uverbs]\n  __fput+0xb1/0x220\n  task_work_run+0x7f/0xa0\n  exit_to_usermode_loop+0x6b/0xb2\n  do_syscall_64+0xc5/0x100\n  entry_SYSCALL_64_after_hwframe+0x44/0xa9\n RIP: 0033:0x7f70dad00664\n\nFixes: e278173fd19e (\"RDMA/core: Cosmetic change - move member initialization to correct block\")\nSigned-off-by: Leon Romanovsky <leonro@mellanox.com>\nReviewed-by: Majd Dibbiny <majd@mellanox.com>\nSigned-off-by: Jason Gunthorpe <jgg@mellanox.com>",
        "before_after_code_files": [
          "drivers/infiniband/core/uverbs_cmd.c||drivers/infiniband/core/uverbs_cmd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/infiniband/core/uverbs_cmd.c||drivers/infiniband/core/uverbs_cmd.c": [
          "File: drivers/infiniband/core/uverbs_cmd.c -> drivers/infiniband/core/uverbs_cmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "819:   }",
          "820:  }",
          "822:  ret = mr->device->ops.rereg_user_mr(mr, cmd.flags, cmd.start,",
          "823:          cmd.length, cmd.hca_va,",
          "824:          cmd.access_flags, pd,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "822:  old_pd = mr->pd;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "827:   goto put_uobj_pd;",
          "829:  if (cmd.flags & IB_MR_REREG_PD) {",
          "831:   atomic_inc(&pd->usecnt);",
          "832:   mr->pd = pd;",
          "833:   atomic_dec(&old_pd->usecnt);",
          "",
          "[Removed Lines]",
          "830:   old_pd = mr->pd;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "785c9f411eb2d9a6076d3511c631587d5e676bf3",
      "candidate_info": {
        "commit_hash": "785c9f411eb2d9a6076d3511c631587d5e676bf3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/785c9f411eb2d9a6076d3511c631587d5e676bf3",
        "files": [
          "drivers/clk/samsung/clk-exynos5-subcmu.c"
        ],
        "message": "clk: samsung: exynos5: Fix kfree() of const memory on setting driver_override\n\nPlatform driver driver_override field should not be initialized from\nconst memory because the core later kfree() it.  If driver_override is\nmanually set later through sysfs, kfree() of old value leads to:\n\n    $ echo \"new_value\" > /sys/bus/platform/drivers/.../driver_override\n\n    kernel BUG at ../mm/slub.c:3960!\n    Internal error: Oops - BUG: 0 [#1] PREEMPT SMP ARM\n    ...\n    (kfree) from [<c058e8c0>] (platform_set_driver_override+0x84/0xac)\n    (platform_set_driver_override) from [<c058e908>] (driver_override_store+0x20/0x34)\n    (driver_override_store) from [<c031f778>] (kernfs_fop_write+0x100/0x1dc)\n    (kernfs_fop_write) from [<c0296de8>] (__vfs_write+0x2c/0x17c)\n    (__vfs_write) from [<c02970c4>] (vfs_write+0xa4/0x188)\n    (vfs_write) from [<c02972e8>] (ksys_write+0x4c/0xac)\n    (ksys_write) from [<c0101000>] (ret_fast_syscall+0x0/0x28)\n\nThe clk-exynos5-subcmu driver uses override only for the purpose of\ncreating meaningful names for children devices (matching names of power\ndomains, e.g. DISP, MFC).  The driver_override was not developed for\nthis purpose so just switch to default names of devices to fix the\nissue.\n\nFixes: b06a532bf1fa (\"clk: samsung: Add Exynos5 sub-CMU clock driver\")\nCc: <stable@vger.kernel.org>\nSigned-off-by: Krzysztof Kozlowski <krzk@kernel.org>\nReviewed-by: Geert Uytterhoeven <geert+renesas@glider.be>\nSigned-off-by: Stephen Boyd <sboyd@kernel.org>",
        "before_after_code_files": [
          "drivers/clk/samsung/clk-exynos5-subcmu.c||drivers/clk/samsung/clk-exynos5-subcmu.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/clk/samsung/clk-exynos5-subcmu.c||drivers/clk/samsung/clk-exynos5-subcmu.c": [
          "File: drivers/clk/samsung/clk-exynos5-subcmu.c -> drivers/clk/samsung/clk-exynos5-subcmu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:  struct platform_device *pdev;",
          "139:  int ret;",
          "142:  if (!pdev)",
          "143:   return -ENOMEM;",
          "145:  pdev->dev.parent = parent;",
          "147:  platform_set_drvdata(pdev, (void *)info);",
          "148:  of_genpd_add_device(&genpdspec, &pdev->dev);",
          "149:  ret = platform_device_add(pdev);",
          "",
          "[Removed Lines]",
          "141:  pdev = platform_device_alloc(info->pd_name, -1);",
          "146:  pdev->driver_override = \"exynos5-subcmu\";",
          "",
          "[Added Lines]",
          "141:  pdev = platform_device_alloc(\"exynos5-subcmu\", PLATFORM_DEVID_AUTO);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6373dca16c911b2828ef8d836d7f6f1800e1bbbc",
      "candidate_info": {
        "commit_hash": "6373dca16c911b2828ef8d836d7f6f1800e1bbbc",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6373dca16c911b2828ef8d836d7f6f1800e1bbbc",
        "files": [
          "mm/slub.c"
        ],
        "message": "slub: fix a crash with SLUB_DEBUG + KASAN_SW_TAGS\n\nIn process_slab(), \"p = get_freepointer()\" could return a tagged\npointer, but \"addr = page_address()\" always return a native pointer.  As\nthe result, slab_index() is messed up here,\n\n    return (p - addr) / s->size;\n\nAll other callers of slab_index() have the same situation where \"addr\"\nis from page_address(), so just need to untag \"p\".\n\n    # cat /sys/kernel/slab/hugetlbfs_inode_cache/alloc_calls\n\n    Unable to handle kernel paging request at virtual address 2bff808aa4856d48\n    Mem abort info:\n      ESR = 0x96000007\n      Exception class = DABT (current EL), IL = 32 bits\n      SET = 0, FnV = 0\n      EA = 0, S1PTW = 0\n    Data abort info:\n      ISV = 0, ISS = 0x00000007\n      CM = 0, WnR = 0\n    swapper pgtable: 64k pages, 48-bit VAs, pgdp = 0000000002498338\n    [2bff808aa4856d48] pgd=00000097fcfd0003, pud=00000097fcfd0003, pmd=00000097fca30003, pte=00e8008b24850712\n    Internal error: Oops: 96000007 [#1] SMP\n    CPU: 3 PID: 79210 Comm: read_all Tainted: G             L    5.0.0-rc7+ #84\n    Hardware name: HPE Apollo 70             /C01_APACHE_MB         , BIOS L50_5.13_1.0.6 07/10/2018\n    pstate: 00400089 (nzcv daIf +PAN -UAO)\n    pc : get_map+0x78/0xec\n    lr : get_map+0xa0/0xec\n    sp : aeff808989e3f8e0\n    x29: aeff808989e3f940 x28: ffff800826200000\n    x27: ffff100012d47000 x26: 9700000000002500\n    x25: 0000000000000001 x24: 52ff8008200131f8\n    x23: 52ff8008200130a0 x22: 52ff800820013098\n    x21: ffff800826200000 x20: ffff100013172ba0\n    x19: 2bff808a8971bc00 x18: ffff1000148f5538\n    x17: 000000000000001b x16: 00000000000000ff\n    x15: ffff1000148f5000 x14: 00000000000000d2\n    x13: 0000000000000001 x12: 0000000000000000\n    x11: 0000000020000002 x10: 2bff808aa4856d48\n    x9 : 0000020000000000 x8 : 68ff80082620ebb0\n    x7 : 0000000000000000 x6 : ffff1000105da1dc\n    x5 : 0000000000000000 x4 : 0000000000000000\n    x3 : 0000000000000010 x2 : 2bff808a8971bc00\n    x1 : ffff7fe002098800 x0 : ffff80082620ceb0\n    Process read_all (pid: 79210, stack limit = 0x00000000f65b9361)\n    Call trace:\n     get_map+0x78/0xec\n     process_slab+0x7c/0x47c\n     list_locations+0xb0/0x3c8\n     alloc_calls_show+0x34/0x40\n     slab_attr_show+0x34/0x48\n     sysfs_kf_seq_show+0x2e4/0x570\n     kernfs_seq_show+0x12c/0x1a0\n     seq_read+0x48c/0xf84\n     kernfs_fop_read+0xd4/0x448\n     __vfs_read+0x94/0x5d4\n     vfs_read+0xcc/0x194\n     ksys_read+0x6c/0xe8\n     __arm64_sys_read+0x68/0xb0\n     el0_svc_handler+0x230/0x3bc\n     el0_svc+0x8/0xc\n    Code: d3467d2a 9ac92329 8b0a0e6a f9800151 (c85f7d4b)\n    ---[ end trace a383a9a44ff13176 ]---\n    Kernel panic - not syncing: Fatal exception\n    SMP: stopping secondary CPUs\n    SMP: failed to stop secondary CPUs 1-7,32,40,127\n    Kernel Offset: disabled\n    CPU features: 0x002,20000c18\n    Memory Limit: none\n    ---[ end Kernel panic - not syncing: Fatal exception ]---\n\nLink: http://lkml.kernel.org/r/20190220020251.82039-1-cai@lca.pw\nSigned-off-by: Qian Cai <cai@lca.pw>\nReviewed-by: Andrey Konovalov <andreyknvl@google.com>\nSigned-off-by: Andrew Morton <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>",
        "before_after_code_files": [
          "mm/slub.c||mm/slub.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mm/slub.c||mm/slub.c": [
          "File: mm/slub.c -> mm/slub.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "318: static inline unsigned int slab_index(void *p, struct kmem_cache *s, void *addr)",
          "319: {",
          "321: }",
          "323: static inline unsigned int order_objects(unsigned int order, unsigned int size)",
          "",
          "[Removed Lines]",
          "320:  return (p - addr) / s->size;",
          "",
          "[Added Lines]",
          "320:  return (kasan_reset_tag(p) - addr) / s->size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a58007621be33e9f7c7bed5d5ff8ecb914e1044a",
      "candidate_info": {
        "commit_hash": "a58007621be33e9f7c7bed5d5ff8ecb914e1044a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/a58007621be33e9f7c7bed5d5ff8ecb914e1044a",
        "files": [
          "arch/powerpc/include/asm/book3s/64/pgtable.h"
        ],
        "message": "powerpc/64s: Fix possible corruption on big endian due to pgd/pud_present()\n\nIn v4.20 we changed our pgd/pud_present() to check for _PAGE_PRESENT\nrather than just checking that the value is non-zero, e.g.:\n\n  static inline int pgd_present(pgd_t pgd)\n  {\n -       return !pgd_none(pgd);\n +       return (pgd_raw(pgd) & cpu_to_be64(_PAGE_PRESENT));\n  }\n\nUnfortunately this is broken on big endian, as the result of the\nbitwise & is truncated to int, which is always zero because\n_PAGE_PRESENT is 0x8000000000000000ul. This means pgd_present() and\npud_present() are always false at compile time, and the compiler\nelides the subsequent code.\n\nRemarkably with that bug present we are still able to boot and run\nwith few noticeable effects. However under some work loads we are able\nto trigger a warning in the ext4 code:\n\n  WARNING: CPU: 11 PID: 29593 at fs/ext4/inode.c:3927 .ext4_set_page_dirty+0x70/0xb0\n  CPU: 11 PID: 29593 Comm: debugedit Not tainted 4.20.0-rc1 #1\n  ...\n  NIP .ext4_set_page_dirty+0x70/0xb0\n  LR  .set_page_dirty+0xa0/0x150\n  Call Trace:\n   .set_page_dirty+0xa0/0x150\n   .unmap_page_range+0xbf0/0xe10\n   .unmap_vmas+0x84/0x130\n   .unmap_region+0xe8/0x190\n   .__do_munmap+0x2f0/0x510\n   .__vm_munmap+0x80/0x110\n   .__se_sys_munmap+0x14/0x30\n   system_call+0x5c/0x70\n\nThe fix is simple, we need to convert the result of the bitwise & to\nan int before returning it.\n\nThanks to Erhard, Jan Kara and Aneesh for help with debugging.\n\nFixes: da7ad366b497 (\"powerpc/mm/book3s: Update pmd_present to look at _PAGE_PRESENT bit\")\nCc: stable@vger.kernel.org # v4.20+\nReported-by: Erhard F. <erhard_f@mailbox.org>\nReviewed-by: Aneesh Kumar K.V <aneesh.kumar@linux.ibm.com>\nSigned-off-by: Michael Ellerman <mpe@ellerman.id.au>",
        "before_after_code_files": [
          "arch/powerpc/include/asm/book3s/64/pgtable.h||arch/powerpc/include/asm/book3s/64/pgtable.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/powerpc/include/asm/book3s/64/pgtable.h||arch/powerpc/include/asm/book3s/64/pgtable.h": [
          "File: arch/powerpc/include/asm/book3s/64/pgtable.h -> arch/powerpc/include/asm/book3s/64/pgtable.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "905: static inline int pud_present(pud_t pud)",
          "906: {",
          "908: }",
          "910: extern struct page *pud_page(pud_t pud);",
          "",
          "[Removed Lines]",
          "907:  return (pud_raw(pud) & cpu_to_be64(_PAGE_PRESENT));",
          "",
          "[Added Lines]",
          "907:  return !!(pud_raw(pud) & cpu_to_be64(_PAGE_PRESENT));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "952: static inline int pgd_present(pgd_t pgd)",
          "953: {",
          "955: }",
          "957: static inline pte_t pgd_pte(pgd_t pgd)",
          "",
          "[Removed Lines]",
          "954:  return (pgd_raw(pgd) & cpu_to_be64(_PAGE_PRESENT));",
          "",
          "[Added Lines]",
          "954:  return !!(pgd_raw(pgd) & cpu_to_be64(_PAGE_PRESENT));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c64316502008064c158fa40cc250665e461b0f2a",
      "candidate_info": {
        "commit_hash": "c64316502008064c158fa40cc250665e461b0f2a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/c64316502008064c158fa40cc250665e461b0f2a",
        "files": [
          "arch/arm/crypto/sha512-armv4.pl",
          "arch/arm/crypto/sha512-core.S_shipped"
        ],
        "message": "crypto: sha512/arm - fix crash bug in Thumb2 build\n\nThe SHA512 code we adopted from the OpenSSL project uses a rather\npeculiar way to take the address of the round constant table: it\ntakes the address of the sha256_block_data_order() routine, and\nsubstracts a constant known quantity to arrive at the base of the\ntable, which is emitted by the same assembler code right before\nthe routine's entry point.\n\nHowever, recent versions of binutils have helpfully changed the\nbehavior of references emitted via an ADR instruction when running\nin Thumb2 mode: it now takes the Thumb execution mode bit into\naccount, which is bit 0 af the address. This means the produced\ntable address also has bit 0 set, and so we end up with an address\nvalue pointing 1 byte past the start of the table, which results\nin crashes such as\n\n  Unable to handle kernel paging request at virtual address bf825000\n  pgd = 42f44b11\n  [bf825000] *pgd=80000040206003, *pmd=5f1bd003, *pte=00000000\n  Internal error: Oops: 207 [#1] PREEMPT SMP THUMB2\n  Modules linked in: sha256_arm(+) sha1_arm_ce sha1_arm ...\n  CPU: 7 PID: 396 Comm: cryptomgr_test Not tainted 5.0.0-rc6+ #144\n  Hardware name: QEMU KVM Virtual Machine, BIOS 0.0.0 02/06/2015\n  PC is at sha256_block_data_order+0xaaa/0xb30 [sha256_arm]\n  LR is at __this_module+0x17fd/0xffffe800 [sha256_arm]\n  pc : [<bf820bca>]    lr : [<bf824ffd>]    psr: 800b0033\n  sp : ebc8bbe8  ip : faaabe1c  fp : 2fdd3433\n  r10: 4c5f1692  r9 : e43037df  r8 : b04b0a5a\n  r7 : c369d722  r6 : 39c3693e  r5 : 7a013189  r4 : 1580d26b\n  r3 : 8762a9b0  r2 : eea9c2cd  r1 : 3e9ab536  r0 : 1dea4ae7\n  Flags: Nzcv  IRQs on  FIQs on  Mode SVC_32  ISA Thumb  Segment user\n  Control: 70c5383d  Table: 6b8467c0  DAC: dbadc0de\n  Process cryptomgr_test (pid: 396, stack limit = 0x69e1fe23)\n  Stack: (0xebc8bbe8 to 0xebc8c000)\n  ...\n  unwind: Unknown symbol address bf820bca\n  unwind: Index not found bf820bca\n  Code: 441a ea80 40f9 440a (f85e) 3b04\n  ---[ end trace e560cce92700ef8a ]---\n\nGiven that this affects older kernels as well, in case they are built\nwith a recent toolchain, apply a minimal backportable fix, which is\nto emit another non-code label at the start of the routine, and\nreference that instead. (This is similar to the current upstream state\nof this file in OpenSSL)\n\nSigned-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>\nSigned-off-by: Herbert Xu <herbert@gondor.apana.org.au>",
        "before_after_code_files": [
          "arch/arm/crypto/sha512-armv4.pl||arch/arm/crypto/sha512-armv4.pl",
          "arch/arm/crypto/sha512-core.S_shipped||arch/arm/crypto/sha512-core.S_shipped"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/arm/crypto/sha512-armv4.pl||arch/arm/crypto/sha512-armv4.pl": [
          "File: arch/arm/crypto/sha512-armv4.pl -> arch/arm/crypto/sha512-armv4.pl",
          "--- Hunk 1 ---",
          "[Context before]",
          "274: .global sha512_block_data_order",
          "275: .type sha512_block_data_order,%function",
          "276: sha512_block_data_order:",
          "277: #if __ARM_ARCH__<7",
          "278:  sub r3,pc,#8  @ sha512_block_data_order",
          "279: #else",
          "281: #endif",
          "282: #if __ARM_MAX_ARCH__>=7 && !defined(__KERNEL__)",
          "283:  ldr r12,.LOPENSSL_armcap",
          "",
          "[Removed Lines]",
          "280:  adr r3,sha512_block_data_order",
          "",
          "[Added Lines]",
          "277: .Lsha512_block_data_order:",
          "281:  adr r3,.Lsha512_block_data_order",
          "",
          "---------------"
        ],
        "arch/arm/crypto/sha512-core.S_shipped||arch/arm/crypto/sha512-core.S_shipped": [
          "File: arch/arm/crypto/sha512-core.S_shipped -> arch/arm/crypto/sha512-core.S_shipped",
          "--- Hunk 1 ---",
          "[Context before]",
          "141: .global sha512_block_data_order",
          "142: .type sha512_block_data_order,%function",
          "143: sha512_block_data_order:",
          "144: #if __ARM_ARCH__<7",
          "145:  sub r3,pc,#8  @ sha512_block_data_order",
          "146: #else",
          "148: #endif",
          "149: #if __ARM_MAX_ARCH__>=7 && !defined(__KERNEL__)",
          "150:  ldr r12,.LOPENSSL_armcap",
          "",
          "[Removed Lines]",
          "147:  adr r3,sha512_block_data_order",
          "",
          "[Added Lines]",
          "144: .Lsha512_block_data_order:",
          "148:  adr r3,.Lsha512_block_data_order",
          "",
          "---------------"
        ]
      }
    }
  ]
}