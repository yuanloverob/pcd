{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "10c0e7115b2ed28a2af6f3b59a9c2862b1b25f9d",
      "candidate_info": {
        "commit_hash": "10c0e7115b2ed28a2af6f3b59a9c2862b1b25f9d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/10c0e7115b2ed28a2af6f3b59a9c2862b1b25f9d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/loadext.c",
          "src/malloc.c",
          "src/pragma.c",
          "src/pragma.h",
          "src/sqlite.h.in",
          "src/sqlite3ext.h",
          "src/test1.c",
          "src/treeview.c",
          "tool/mkpragmatab.tcl"
        ],
        "message": "Add the sqlite3_hard_heap_limit64() interface and the corresponding \"PRAGMA hard_heap_limit=N\" command.\n\nFossilOrigin-Name: b0ccef61a7f92d20228becbf4f997bf0f4e46dad2deaf0896dc63b976ad1dd11",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/loadext.c||src/loadext.c",
          "src/malloc.c||src/malloc.c",
          "src/pragma.c||src/pragma.c",
          "src/pragma.h||src/pragma.h",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqlite3ext.h||src/sqlite3ext.h",
          "src/test1.c||src/test1.c",
          "src/treeview.c||src/treeview.c",
          "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7be6222c9ec44596e4eddd906c831eb1272b90fbdf68641d791f216264feb7cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "461: #endif",
          "463:   sqlite3_stmt_isexplain,",
          "465: };",
          "",
          "[Removed Lines]",
          "464:   sqlite3_value_frombind",
          "",
          "[Added Lines]",
          "464:   sqlite3_value_frombind,",
          "466:   sqlite3_hard_heap_limit64",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     sqlite3_mutex_leave(mem0.mutex);",
          "92:     return priorLimit;",
          "93:   }",
          "94:   mem0.alarmThreshold = n;",
          "95:   nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "96:   mem0.nearlyFull = (n>0 && n<=nUsed);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:   if( mem0.hardLimit>0 && (n>mem0.hardLimit || n==0) ){",
          "103:     n = mem0.hardLimit;",
          "104:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:   sqlite3_soft_heap_limit64(n);",
          "105: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 n){",
          "131:   sqlite3_int64 priorLimit;",
          "132: #ifndef SQLITE_OMIT_AUTOINIT",
          "133:   int rc = sqlite3_initialize();",
          "134:   if( rc ) return -1;",
          "135: #endif",
          "136:   sqlite3_mutex_enter(mem0.mutex);",
          "137:   priorLimit = mem0.hardLimit;",
          "138:   if( n>=0 ){",
          "139:     mem0.hardLimit = n;",
          "140:     if( n<mem0.alarmThreshold || mem0.alarmThreshold==0 ){",
          "141:       mem0.alarmThreshold = n;",
          "142:     }",
          "143:   }",
          "144:   sqlite3_mutex_leave(mem0.mutex);",
          "145:   return priorLimit;",
          "146: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:     if( nUsed >= mem0.alarmThreshold - nFull ){",
          "204:       mem0.nearlyFull = 1;",
          "205:       sqlite3MallocAlarm(nFull);",
          "206:     }else{",
          "207:       mem0.nearlyFull = 0;",
          "208:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "248:       if( mem0.hardLimit ){",
          "249:         nUsed = sqlite3StatusValue(SQLITE_STATUS_MEMORY_USED);",
          "250:         if( nUsed >= mem0.hardLimit - nFull ){",
          "252:           return;",
          "253:         }",
          "254:       }",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2064:     break;",
          "2065:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2078:   case PragTyp_HARD_HEAP_LIMIT: {",
          "2079:     sqlite3_int64 N;",
          "2080:     if( zRight && sqlite3DecOrHexToI64(zRight, &N)==SQLITE_OK ){",
          "2081:       sqlite3_int64 iPrior = sqlite3_hard_heap_limit64(-1);",
          "2082:       if( N>0 && (iPrior==0 || iPrior>N) ) sqlite3_hard_heap_limit64(N);",
          "2083:     }",
          "2084:     returnSingleInt(v, sqlite3_soft_heap_limit64(-1));",
          "2085:     break;",
          "2086:   }",
          "",
          "---------------"
        ],
        "src/pragma.h||src/pragma.h": [
          "File: src/pragma.h -> src/pragma.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #define PragTyp_FOREIGN_KEY_CHECK             13",
          "22: #define PragTyp_FOREIGN_KEY_LIST              14",
          "23: #define PragTyp_FUNCTION_LIST                 15",
          "",
          "[Removed Lines]",
          "24: #define PragTyp_INCREMENTAL_VACUUM            16",
          "25: #define PragTyp_INDEX_INFO                    17",
          "26: #define PragTyp_INDEX_LIST                    18",
          "27: #define PragTyp_INTEGRITY_CHECK               19",
          "28: #define PragTyp_JOURNAL_MODE                  20",
          "29: #define PragTyp_JOURNAL_SIZE_LIMIT            21",
          "30: #define PragTyp_LOCK_PROXY_FILE               22",
          "31: #define PragTyp_LOCKING_MODE                  23",
          "32: #define PragTyp_PAGE_COUNT                    24",
          "33: #define PragTyp_MMAP_SIZE                     25",
          "34: #define PragTyp_MODULE_LIST                   26",
          "35: #define PragTyp_OPTIMIZE                      27",
          "36: #define PragTyp_PAGE_SIZE                     28",
          "37: #define PragTyp_PRAGMA_LIST                   29",
          "38: #define PragTyp_SECURE_DELETE                 30",
          "39: #define PragTyp_SHRINK_MEMORY                 31",
          "40: #define PragTyp_SOFT_HEAP_LIMIT               32",
          "41: #define PragTyp_SYNCHRONOUS                   33",
          "42: #define PragTyp_TABLE_INFO                    34",
          "43: #define PragTyp_TEMP_STORE                    35",
          "44: #define PragTyp_TEMP_STORE_DIRECTORY          36",
          "45: #define PragTyp_THREADS                       37",
          "46: #define PragTyp_WAL_AUTOCHECKPOINT            38",
          "47: #define PragTyp_WAL_CHECKPOINT                39",
          "48: #define PragTyp_ACTIVATE_EXTENSIONS           40",
          "49: #define PragTyp_HEXKEY                        41",
          "50: #define PragTyp_KEY                           42",
          "51: #define PragTyp_LOCK_STATUS                   43",
          "52: #define PragTyp_STATS                         44",
          "",
          "[Added Lines]",
          "24: #define PragTyp_HARD_HEAP_LIMIT               16",
          "25: #define PragTyp_INCREMENTAL_VACUUM            17",
          "26: #define PragTyp_INDEX_INFO                    18",
          "27: #define PragTyp_INDEX_LIST                    19",
          "28: #define PragTyp_INTEGRITY_CHECK               20",
          "29: #define PragTyp_JOURNAL_MODE                  21",
          "30: #define PragTyp_JOURNAL_SIZE_LIMIT            22",
          "31: #define PragTyp_LOCK_PROXY_FILE               23",
          "32: #define PragTyp_LOCKING_MODE                  24",
          "33: #define PragTyp_PAGE_COUNT                    25",
          "34: #define PragTyp_MMAP_SIZE                     26",
          "35: #define PragTyp_MODULE_LIST                   27",
          "36: #define PragTyp_OPTIMIZE                      28",
          "37: #define PragTyp_PAGE_SIZE                     29",
          "38: #define PragTyp_PRAGMA_LIST                   30",
          "39: #define PragTyp_SECURE_DELETE                 31",
          "40: #define PragTyp_SHRINK_MEMORY                 32",
          "41: #define PragTyp_SOFT_HEAP_LIMIT               33",
          "42: #define PragTyp_SYNCHRONOUS                   34",
          "43: #define PragTyp_TABLE_INFO                    35",
          "44: #define PragTyp_TEMP_STORE                    36",
          "45: #define PragTyp_TEMP_STORE_DIRECTORY          37",
          "46: #define PragTyp_THREADS                       38",
          "47: #define PragTyp_WAL_AUTOCHECKPOINT            39",
          "48: #define PragTyp_WAL_CHECKPOINT                40",
          "49: #define PragTyp_ACTIVATE_EXTENSIONS           41",
          "50: #define PragTyp_HEXKEY                        42",
          "51: #define PragTyp_KEY                           43",
          "52: #define PragTyp_LOCK_STATUS                   44",
          "53: #define PragTyp_STATS                         45",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "319: #endif",
          "320: #endif",
          "321: #if defined(SQLITE_HAS_CODEC)",
          "322:  {/* zName:     */ \"hexkey\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:  {/* zName:     */ \"hard_heap_limit\",",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6089: sqlite3_int64 sqlite3_soft_heap_limit64(sqlite3_int64 N);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6103: sqlite3_int64 sqlite3_hard_heap_limit64(sqlite3_int64 N);",
          "",
          "---------------"
        ],
        "src/sqlite3ext.h||src/sqlite3ext.h": [
          "File: src/sqlite3ext.h -> src/sqlite3ext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "323:   int (*stmt_isexplain)(sqlite3_stmt*);",
          "324:   int (*value_frombind)(sqlite3_value*);",
          "325: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "326:   sqlite3_int64 (*hard_heap_limit64)(sqlite3_int64);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "615: #define sqlite3_stmt_isexplain         sqlite3_api->isexplain",
          "616: #define sqlite3_value_frombind         sqlite3_api->frombind",
          "619: #if !defined(SQLITE_CORE) && !defined(SQLITE_OMIT_LOAD_EXTENSION)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "620: #define sqlite3_hard_heap_limit64      sqlite3_api->hard_heap_limit64",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5477:   return TCL_OK;",
          "5478: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5487: static int SQLITE_TCLAPI test_hard_heap_limit(",
          "5488:   void * clientData,",
          "5489:   Tcl_Interp *interp,",
          "5490:   int objc,",
          "5491:   Tcl_Obj *CONST objv[]",
          "5492: ){",
          "5493:   sqlite3_int64 amt;",
          "5494:   Tcl_WideInt N = -1;",
          "5495:   if( objc!=1 && objc!=2 ){",
          "5496:     Tcl_WrongNumArgs(interp, 1, objv, \"?N?\");",
          "5497:     return TCL_ERROR;",
          "5498:   }",
          "5499:   if( objc==2 ){",
          "5500:     if( Tcl_GetWideIntFromObj(interp, objv[1], &N) ) return TCL_ERROR;",
          "5501:   }",
          "5502:   amt = sqlite3_hard_heap_limit64(N);",
          "5503:   Tcl_SetObjResult(interp, Tcl_NewWideIntObj(amt));",
          "5504:   return TCL_OK;",
          "5505: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7880:      { \"sqlite3_db_filename\",           test_db_filename,        0},",
          "7881:      { \"sqlite3_db_readonly\",           test_db_readonly,        0},",
          "7882:      { \"sqlite3_soft_heap_limit\",       test_soft_heap_limit,    0},",
          "7883:      { \"sqlite3_thread_cleanup\",        test_thread_cleanup,     0},",
          "7884:      { \"sqlite3_pager_refcounts\",       test_pager_refcounts,    0},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7910:      { \"sqlite3_soft_heap_limit64\",     test_soft_heap_limit,    0},",
          "7911:      { \"sqlite3_hard_heap_limit64\",     test_hard_heap_limit,    0},",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     va_start(ap, zFormat);",
          "67:     sqlite3_str_vappendf(&acc, zFormat, ap);",
          "68:     va_end(ap);",
          "70:     sqlite3_str_append(&acc, \"\\n\", 1);",
          "71:   }",
          "72:   sqlite3StrAccumFinish(&acc);",
          "",
          "[Removed Lines]",
          "69:     assert( acc.nChar>0 );",
          "",
          "[Added Lines]",
          "69:     assert( acc.nChar>0 || acc.accError );",
          "",
          "---------------"
        ],
        "tool/mkpragmatab.tcl||tool/mkpragmatab.tcl": [
          "File: tool/mkpragmatab.tcl -> tool/mkpragmatab.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "405:   NAME: soft_heap_limit",
          "406:   FLAG: Result0",
          "408:   NAME: threads",
          "409:   FLAG: Result0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408:   NAME: hard_heap_limit",
          "409:   FLAG: Result0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1548d5276ff53f78130ef0adfe6397d24f88ad3c",
      "candidate_info": {
        "commit_hash": "1548d5276ff53f78130ef0adfe6397d24f88ad3c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1548d5276ff53f78130ef0adfe6397d24f88ad3c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "test/fuzzdata8.db"
        ],
        "message": "Do not continue an ALTER TABLE tree walk of a subquery if a prior error is seen in the tree.  Report the problem immediately, without continuing.\n\nFossilOrigin-Name: 01ca865f31c0c817ede7f357401ef76cf311ae662397908464f53e1c147f5b6b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 07beb3629e648e7feae4e786191514339ac1d8f6ba5bb6e7cc8a04bc1f1cd6ab",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1527:             assert( pSelect->selFlags & SF_View );",
          "1528:             pSelect->selFlags &= ~SF_View;",
          "1529:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
          "1532:           }",
          "1533:         }else{",
          "",
          "[Removed Lines]",
          "1530:             if( sParse.nErr ) rc = sParse.rc;",
          "1531:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
          "",
          "[Added Lines]",
          "1530:             if( sParse.nErr ){",
          "1531:               rc = sParse.rc;",
          "1532:             }else{",
          "1533:               sqlite3WalkSelect(&sWalker, pTab->pSelect);",
          "1534:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3664dcb4837e94f685606a00aa5da1d4f4c3d3d",
      "candidate_info": {
        "commit_hash": "e3664dcb4837e94f685606a00aa5da1d4f4c3d3d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e3664dcb4837e94f685606a00aa5da1d4f4c3d3d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/test_demovfs.c"
        ],
        "message": "Fix minor problems in the test code in test_demovfs.c.\n\nFossilOrigin-Name: ca4ddfefc1be1afbf366d87c47f0dd1122350d7ab34ba60020c5babb64a654a4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/test_demovfs.c||src/test_demovfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0bbceebb126c94b5159079a341fa16e8424b7f2f6b9364561516964e871fb6e0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_demovfs.c||src/test_demovfs.c": [
          "File: src/test_demovfs.c -> src/test_demovfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "240:   if( nRead==iAmt ){",
          "241:     return SQLITE_OK;",
          "242:   }else if( nRead>=0 ){",
          "243:     return SQLITE_IOERR_SHORT_READ;",
          "244:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "243:     if( nRead<iAmt ){",
          "244:       memset(&((char*)zBuf)[nRead], 0, iAmt-nRead);",
          "245:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "371: static int demoFileControl(sqlite3_file *pFile, int op, void *pArg){",
          "373: }",
          "",
          "[Removed Lines]",
          "372:   return SQLITE_OK;",
          "",
          "[Added Lines]",
          "375:   return SQLITE_NOTFOUND;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c97001fd55d61b5214fe91b764795d8f04360dae",
      "candidate_info": {
        "commit_hash": "c97001fd55d61b5214fe91b764795d8f04360dae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c97001fd55d61b5214fe91b764795d8f04360dae",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Update wapptest.tcl so that it deletes extra files if the \"Keep files:\" checkbox is clear. Set it by default.\n\nFossilOrigin-Name: 09623cc4cc82e3c123d1fd5d88b2f4b50ec5f2cc7e579a7203258bf0c246a74f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 56604bb60a8ebac8d2854628d1b052d594d7effe14be8333977995dc07b65114",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: #",
          "21: set G(platform) $::tcl_platform(os)-$::tcl_platform(machine)",
          "22: set G(test)     Normal",
          "25: set G(tcl)      [::tcl::pkgconfig get libdir,install]",
          "26: set G(jobs)     3",
          "27: set G(debug)    0",
          "",
          "[Removed Lines]",
          "23: set G(keep)     0",
          "24: set G(msvc)     0",
          "",
          "[Added Lines]",
          "23: set G(keep)     1",
          "24: set G(msvc)     [expr {$::tcl_platform(platform)==\"windows\"}]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197:   }",
          "198: }",
          "200: proc slave_test_done {name rc} {",
          "201:   global G",
          "202:   set G(test.$name.done) [clock seconds]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200: # This command is invoked once a slave process has finished running its",
          "201: # tests, successfully or otherwise. Parameter $name is the name of the",
          "202: # test, $rc the exit code returned by the slave process.",
          "203: #",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "209:   if {[file exists $G(test.$name.log)]} {",
          "210:     count_tests_and_errors $name $G(test.$name.log)",
          "211:   }",
          "212: }",
          "214: proc slave_fileevent {name} {",
          "215:   global G",
          "216:   set fd $G(test.$name.channel)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217:   # If the \"keep files\" checkbox is clear, delete all files except for",
          "218:   # the executables and test logs. And any core file that is present.",
          "219:   if {$G(keep)==0} {",
          "220:     set keeplist {",
          "221:       testfixture testfixture.exe",
          "222:       sqlite3 sqlite3.exe",
          "223:       test.log test-out.txt",
          "224:       core",
          "225:     }",
          "226:     foreach f [glob -nocomplain [file join $G(test.$name.dir) *]] {",
          "227:       set t [file tail $f]",
          "228:       if {[lsearch $keeplist $t]<0} {",
          "229:         catch { file delete -force $f }",
          "230:       }",
          "231:     }",
          "232:   }",
          "235: # This is a fileevent callback invoked each time a file-descriptor that",
          "236: # connects this process to a slave process is readable.",
          "237: #",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "228:   do_some_stuff",
          "229: }",
          "231: proc wapptest_slave_script {} {",
          "232:   global G",
          "233:   set res {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "255: # Return the contents of the \"slave script\" - the script run by slave",
          "256: # processes to actually perform the test. It does two things:",
          "257: #",
          "258: #   1. Reads and [exec]s the contents of file wapptest_configure.sh.",
          "259: #   2. Reads and [exec]s the contents of file wapptest_make.sh.",
          "260: #",
          "261: # Step 1 is omitted if the test uses MSVC (which does not use configure).",
          "262: #",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "270:   foreach f [glob -nocomplain [file join $dir *]] {",
          "271:     catch { file delete -force $f }",
          "272:   }",
          "274:   # Write the configure command to wapptest_configure.sh. This file",
          "275:   # is empty if using MSVC - MSVC does not use configure.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "305:   set G(test.$name.dir) $dir",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6a9efb976daf2814b6abfd8e54692ffa9aa78ff",
      "candidate_info": {
        "commit_hash": "e6a9efb976daf2814b6abfd8e54692ffa9aa78ff",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e6a9efb976daf2814b6abfd8e54692ffa9aa78ff",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Ensure that the btree cursor is correctly set up prior to backing it up as part of a delete operation on a divider cell in an index.\n\nFossilOrigin-Name: a3ea1a822d3a110f4f186f2fc8550f435c8c98635d058096b7be9d4df7066b8b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d59567dda231e7ffec437d5e055676cf42d791196406cdc696cafa2583eb483b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8772:   if( !pPage->leaf ){",
          "8773:     rc = sqlite3BtreePrevious(pCur, 0);",
          "8774:     assert( rc!=SQLITE_DONE );",
          "8775:     if( rc ) return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8773:     pCur->skipNext = 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}