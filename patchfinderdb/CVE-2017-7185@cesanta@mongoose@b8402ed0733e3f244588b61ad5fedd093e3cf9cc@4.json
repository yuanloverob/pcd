{
  "cve_id": "CVE-2017-7185",
  "cve_desc": "Use-after-free vulnerability in the mg_http_multipart_wait_for_boundary function in mongoose.c in Cesanta Mongoose Embedded Web Server Library 6.7 and earlier and Mongoose OS 1.2 and earlier allows remote attackers to cause a denial of service (crash) via a multipart/form-data POST request without a MIME boundary string.",
  "repo": "cesanta/mongoose",
  "patch_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
  "patch_info": {
    "commit_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "repo": "cesanta/mongoose",
    "commit_url": "https://github.com/cesanta/mongoose/commit/b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "files": [
      "mongoose.c"
    ],
    "message": "Fix crash in multipart handling\n\nClose cesanta/dev#6974\n\nPUBLISHED_FROM=4d4e4a46eceba10aec8dacb7f8f58bd078c92307",
    "before_after_code_files": [
      "mongoose.c||mongoose.c"
    ]
  },
  "patch_diff": {
    "mongoose.c||mongoose.c": [
      "File: mongoose.c -> mongoose.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5961:   struct mbuf *io = &c->recv_mbuf;",
      "5962:   struct mg_http_proto_data *pd = mg_http_get_proto_data(c);",
      "5964:   if ((int) io->len < pd->mp_stream.boundary_len + 2) {",
      "5965:     return 0;",
      "5966:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5964:   if (pd->mp_stream.boundary == NULL) {",
      "5965:     pd->mp_stream.state = MPS_FINALIZE;",
      "5966:     DBG((\"Invalid request: boundary not initilaized\"));",
      "5967:     return 0;",
      "5968:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8d76733fadc280e6e22779d49cdd57e07f39f060",
      "candidate_info": {
        "commit_hash": "8d76733fadc280e6e22779d49cdd57e07f39f060",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/8d76733fadc280e6e22779d49cdd57e07f39f060",
        "files": [
          "docs/c-api/util.h/mg_conn_addr_to_str.md",
          "docs/c-api/util.h/mg_sock_addr_to_str.md",
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Make mg_conn_addr_to_str return len\n\nAlso amend api_net.js to use returned length.\n\nPUBLISHED_FROM=38e15f9587edf28049c5b9e5f126b4db159910e8",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9541: #endif",
          "9542: }",
          "9546:   int is_v6;",
          "9548:   memset(buf, 0, len);",
          "9549: #if MG_ENABLE_IPV6",
          "9550:   is_v6 = sa->sa.sa_family == AF_INET6;",
          "",
          "[Removed Lines]",
          "9544: void mg_sock_addr_to_str(const union socket_address *sa, char *buf, size_t len,",
          "9545:                          int flags) {",
          "9547:   if (buf == NULL || len <= 0) return;",
          "",
          "[Added Lines]",
          "9544: int mg_sock_addr_to_str(const union socket_address *sa, char *buf, size_t len,",
          "9545:                         int flags) {",
          "9547:   if (buf == NULL || len <= 0) return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9594:     }",
          "9595:   }",
          "9599: cleanup:",
          "9601: }",
          "9605:   union socket_address sa;",
          "9606:   memset(&sa, 0, sizeof(sa));",
          "9607:   mg_if_get_conn_addr(nc, flags & MG_SOCK_STRINGIFY_REMOTE, &sa);",
          "9609: }",
          "9611: #if MG_ENABLE_HEXDUMP",
          "",
          "[Removed Lines]",
          "9597:   return;",
          "9603: void mg_conn_addr_to_str(struct mg_connection *nc, char *buf, size_t len,",
          "9604:                          int flags) {",
          "9608:   mg_sock_addr_to_str(&sa, buf, len, flags);",
          "",
          "[Added Lines]",
          "9597:   return strlen(buf);",
          "9601:   return 0;",
          "9604: int mg_conn_addr_to_str(struct mg_connection *nc, char *buf, size_t len,",
          "9605:                         int flags) {",
          "9609:   return mg_sock_addr_to_str(&sa, buf, len, flags);",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4007: #if MG_NET_IF == MG_NET_IF_SOCKET",
          "4009: void mg_sock_to_str(sock_t sock, char *buf, size_t len, int flags);",
          "",
          "[Removed Lines]",
          "4005: void mg_conn_addr_to_str(struct mg_connection *nc, char *buf, size_t len,",
          "4006:                          int flags);",
          "",
          "[Added Lines]",
          "4006: int mg_conn_addr_to_str(struct mg_connection *c, char *buf, size_t len,",
          "4007:                         int flags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4020: #if MG_ENABLE_HEXDUMP",
          "",
          "[Removed Lines]",
          "4017: void mg_sock_addr_to_str(const union socket_address *sa, char *buf, size_t len,",
          "4018:                          int flags);",
          "",
          "[Added Lines]",
          "4018: int mg_sock_addr_to_str(const union socket_address *sa, char *buf, size_t len,",
          "4019:                         int flags);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f259f2a79d8e1c613e015b867ff19102f103573",
      "candidate_info": {
        "commit_hash": "7f259f2a79d8e1c613e015b867ff19102f103573",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/7f259f2a79d8e1c613e015b867ff19102f103573",
        "files": [
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Add optional digest auth to mOS HTTP server\n\nIf http.auth_{domain,file} are configured, all HTTP requests require valid digest authorization header.\nThis applies to files served by mg_http_serve as well as synamic endpoints such as /update and /rpc.\n\nmongoose-os#229\n\nPUBLISHED_FROM=824d594147cfeb2428b463d24478b207839aa5e2",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "779: #ifdef MG_MODULE_LINES",
          "781: #endif",
          "",
          "[Removed Lines]",
          "780: #line 1 \"common/md5.c\"",
          "",
          "[Added Lines]",
          "780: #line 1 \"common/cs_md5.c\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "835:   ctx->buf[0] = 0x67452301;",
          "836:   ctx->buf[1] = 0xefcdab89;",
          "837:   ctx->buf[2] = 0x98badcfe;",
          "",
          "[Removed Lines]",
          "834: void MD5_Init(MD5_CTX *ctx) {",
          "",
          "[Added Lines]",
          "834: void cs_md5_init(cs_md5_ctx *ctx) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "841:   ctx->bits[1] = 0;",
          "842: }",
          "845:   register uint32_t a, b, c, d;",
          "847:   a = buf[0];",
          "",
          "[Removed Lines]",
          "844: static void MD5Transform(uint32_t buf[4], uint32_t const in[16]) {",
          "",
          "[Added Lines]",
          "844: static void cs_md5_transform(uint32_t buf[4], uint32_t const in[16]) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "923:   buf[3] += d;",
          "924: }",
          "927:   uint32_t t;",
          "929:   t = ctx->bits[0];",
          "",
          "[Removed Lines]",
          "926: void MD5_Update(MD5_CTX *ctx, const unsigned char *buf, size_t len) {",
          "",
          "[Added Lines]",
          "926: void cs_md5_update(cs_md5_ctx *ctx, const unsigned char *buf, size_t len) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "942:     }",
          "943:     memcpy(p, buf, t);",
          "944:     byteReverse(ctx->in, 16);",
          "946:     buf += t;",
          "947:     len -= t;",
          "948:   }",
          "",
          "[Removed Lines]",
          "945:     MD5Transform(ctx->buf, (uint32_t *) ctx->in);",
          "",
          "[Added Lines]",
          "945:     cs_md5_transform(ctx->buf, (uint32_t *) ctx->in);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "950:   while (len >= 64) {",
          "951:     memcpy(ctx->in, buf, 64);",
          "952:     byteReverse(ctx->in, 16);",
          "954:     buf += 64;",
          "955:     len -= 64;",
          "956:   }",
          "",
          "[Removed Lines]",
          "953:     MD5Transform(ctx->buf, (uint32_t *) ctx->in);",
          "",
          "[Added Lines]",
          "953:     cs_md5_transform(ctx->buf, (uint32_t *) ctx->in);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "958:   memcpy(ctx->in, buf, len);",
          "959: }",
          "962:   unsigned count;",
          "963:   unsigned char *p;",
          "964:   uint32_t *a;",
          "",
          "[Removed Lines]",
          "961: void MD5_Final(unsigned char digest[16], MD5_CTX *ctx) {",
          "",
          "[Added Lines]",
          "961: void cs_md5_final(unsigned char digest[16], cs_md5_ctx *ctx) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "971:   if (count < 8) {",
          "972:     memset(p, 0, count);",
          "973:     byteReverse(ctx->in, 16);",
          "975:     memset(ctx->in, 0, 56);",
          "976:   } else {",
          "977:     memset(p, 0, count - 8);",
          "",
          "[Removed Lines]",
          "974:     MD5Transform(ctx->buf, (uint32_t *) ctx->in);",
          "",
          "[Added Lines]",
          "974:     cs_md5_transform(ctx->buf, (uint32_t *) ctx->in);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "982:   a[14] = ctx->bits[0];",
          "983:   a[15] = ctx->bits[1];",
          "986:   byteReverse((unsigned char *) ctx->buf, 4);",
          "987:   memcpy(digest, ctx->buf, 16);",
          "988:   memset((char *) ctx, 0, sizeof(*ctx));",
          "989: }",
          "1014: #ifdef MG_MODULE_LINES",
          "1208: #endif",
          "1214: #if !CS_DISABLE_SHA1 && !defined(EXCLUDE_COMMON)",
          "",
          "[Removed Lines]",
          "985:   MD5Transform(ctx->buf, (uint32_t *) ctx->in);",
          "991: char *cs_md5(char buf[33], ...) {",
          "992:   unsigned char hash[16];",
          "993:   const unsigned char *p;",
          "994:   va_list ap;",
          "995:   MD5_CTX ctx;",
          "997:   MD5_Init(&ctx);",
          "999:   va_start(ap, buf);",
          "1000:   while ((p = va_arg(ap, const unsigned char *) ) != NULL) {",
          "1001:     size_t len = va_arg(ap, size_t);",
          "1002:     MD5_Update(&ctx, p, len);",
          "1003:   }",
          "1004:   va_end(ap);",
          "1006:   MD5_Final(hash, &ctx);",
          "1007:   cs_to_hex(buf, hash, sizeof(hash));",
          "1009:   return buf;",
          "1010: }",
          "1015: #line 1 \"common/mbuf.c\"",
          "1016: #endif",
          "1022: #ifndef EXCLUDE_COMMON",
          "1024: #include <assert.h>",
          "1025: #include <string.h>",
          "1028: #ifndef MBUF_REALLOC",
          "1029: #define MBUF_REALLOC realloc",
          "1030: #endif",
          "1032: #ifndef MBUF_FREE",
          "1033: #define MBUF_FREE free",
          "1034: #endif",
          "1036: void mbuf_init(struct mbuf *mbuf, size_t initial_size) WEAK;",
          "1037: void mbuf_init(struct mbuf *mbuf, size_t initial_size) {",
          "1038:   mbuf->len = mbuf->size = 0;",
          "1039:   mbuf->buf = NULL;",
          "1040:   mbuf_resize(mbuf, initial_size);",
          "1041: }",
          "1043: void mbuf_free(struct mbuf *mbuf) WEAK;",
          "1044: void mbuf_free(struct mbuf *mbuf) {",
          "1045:   if (mbuf->buf != NULL) {",
          "1046:     MBUF_FREE(mbuf->buf);",
          "1047:     mbuf_init(mbuf, 0);",
          "1048:   }",
          "1049: }",
          "1051: void mbuf_resize(struct mbuf *a, size_t new_size) WEAK;",
          "1052: void mbuf_resize(struct mbuf *a, size_t new_size) {",
          "1053:   if (new_size > a->size || (new_size < a->size && new_size >= a->len)) {",
          "1054:     char *buf = (char *) MBUF_REALLOC(a->buf, new_size);",
          "1060:     if (buf == NULL && new_size != 0) return;",
          "1061:     a->buf = buf;",
          "1062:     a->size = new_size;",
          "1063:   }",
          "1064: }",
          "1066: void mbuf_trim(struct mbuf *mbuf) WEAK;",
          "1067: void mbuf_trim(struct mbuf *mbuf) {",
          "1068:   mbuf_resize(mbuf, mbuf->len);",
          "1069: }",
          "1071: size_t mbuf_insert(struct mbuf *a, size_t off, const void *buf, size_t) WEAK;",
          "1072: size_t mbuf_insert(struct mbuf *a, size_t off, const void *buf, size_t len) {",
          "1073:   char *p = NULL;",
          "1075:   assert(a != NULL);",
          "1076:   assert(a->len <= a->size);",
          "1077:   assert(off <= a->len);",
          "1080:   if (~(size_t) 0 - (size_t) a->buf < len) return 0;",
          "1082:   if (a->len + len <= a->size) {",
          "1083:     memmove(a->buf + off + len, a->buf + off, a->len - off);",
          "1084:     if (buf != NULL) {",
          "1085:       memcpy(a->buf + off, buf, len);",
          "1086:     }",
          "1087:     a->len += len;",
          "1088:   } else {",
          "1089:     size_t new_size = (size_t)((a->len + len) * MBUF_SIZE_MULTIPLIER);",
          "1090:     if ((p = (char *) MBUF_REALLOC(a->buf, new_size)) != NULL) {",
          "1091:       a->buf = p;",
          "1092:       memmove(a->buf + off + len, a->buf + off, a->len - off);",
          "1093:       if (buf != NULL) memcpy(a->buf + off, buf, len);",
          "1094:       a->len += len;",
          "1095:       a->size = new_size;",
          "1096:     } else {",
          "1097:       len = 0;",
          "1098:     }",
          "1099:   }",
          "1101:   return len;",
          "1102: }",
          "1104: size_t mbuf_append(struct mbuf *a, const void *buf, size_t len) WEAK;",
          "1105: size_t mbuf_append(struct mbuf *a, const void *buf, size_t len) {",
          "1106:   return mbuf_insert(a, a->len, buf, len);",
          "1107: }",
          "1109: void mbuf_remove(struct mbuf *mb, size_t n) WEAK;",
          "1110: void mbuf_remove(struct mbuf *mb, size_t n) {",
          "1111:   if (n > 0 && n <= mb->len) {",
          "1112:     memmove(mb->buf, mb->buf + n, mb->len - n);",
          "1113:     mb->len -= n;",
          "1114:   }",
          "1115: }",
          "1118: #ifdef MG_MODULE_LINES",
          "1119: #line 1 \"common/mg_str.c\"",
          "1120: #endif",
          "1129: #include <stdlib.h>",
          "1130: #include <string.h>",
          "1132: int mg_ncasecmp(const char *s1, const char *s2, size_t len) WEAK;",
          "1134: struct mg_str mg_mk_str(const char *s) WEAK;",
          "1135: struct mg_str mg_mk_str(const char *s) {",
          "1136:   struct mg_str ret = {s, 0};",
          "1137:   if (s != NULL) ret.len = strlen(s);",
          "1138:   return ret;",
          "1139: }",
          "1141: struct mg_str mg_mk_str_n(const char *s, size_t len) WEAK;",
          "1142: struct mg_str mg_mk_str_n(const char *s, size_t len) {",
          "1143:   struct mg_str ret = {s, len};",
          "1144:   return ret;",
          "1145: }",
          "1147: int mg_vcmp(const struct mg_str *str1, const char *str2) WEAK;",
          "1148: int mg_vcmp(const struct mg_str *str1, const char *str2) {",
          "1149:   size_t n2 = strlen(str2), n1 = str1->len;",
          "1150:   int r = strncmp(str1->p, str2, (n1 < n2) ? n1 : n2);",
          "1151:   if (r == 0) {",
          "1152:     return n1 - n2;",
          "1153:   }",
          "1154:   return r;",
          "1155: }",
          "1157: int mg_vcasecmp(const struct mg_str *str1, const char *str2) WEAK;",
          "1158: int mg_vcasecmp(const struct mg_str *str1, const char *str2) {",
          "1159:   size_t n2 = strlen(str2), n1 = str1->len;",
          "1160:   int r = mg_ncasecmp(str1->p, str2, (n1 < n2) ? n1 : n2);",
          "1161:   if (r == 0) {",
          "1162:     return n1 - n2;",
          "1163:   }",
          "1164:   return r;",
          "1165: }",
          "1167: struct mg_str mg_strdup(const struct mg_str s) WEAK;",
          "1168: struct mg_str mg_strdup(const struct mg_str s) {",
          "1169:   struct mg_str r = {NULL, 0};",
          "1170:   if (s.len > 0 && s.p != NULL) {",
          "1171:     r.p = (char *) MG_MALLOC(s.len);",
          "1172:     if (r.p != NULL) {",
          "1173:       memcpy((char *) r.p, s.p, s.len);",
          "1174:       r.len = s.len;",
          "1175:     }",
          "1176:   }",
          "1177:   return r;",
          "1178: }",
          "1180: int mg_strcmp(const struct mg_str str1, const struct mg_str str2) WEAK;",
          "1181: int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {",
          "1182:   size_t i = 0;",
          "1183:   while (i < str1.len && i < str2.len) {",
          "1184:     if (str1.p[i] < str2.p[i]) return -1;",
          "1185:     if (str1.p[i] > str2.p[i]) return 1;",
          "1186:     i++;",
          "1187:   }",
          "1188:   if (i < str1.len) return 1;",
          "1189:   if (i < str2.len) return -1;",
          "1190:   return 0;",
          "1191: }",
          "1193: int mg_strncmp(const struct mg_str, const struct mg_str, size_t n) WEAK;",
          "1194: int mg_strncmp(const struct mg_str str1, const struct mg_str str2, size_t n) {",
          "1195:   struct mg_str s1 = str1;",
          "1196:   struct mg_str s2 = str2;",
          "1198:   if (s1.len > n) {",
          "1199:     s1.len = n;",
          "1200:   }",
          "1201:   if (s2.len > n) {",
          "1202:     s2.len = n;",
          "1203:   }",
          "1204:   return mg_strcmp(s1, s2);",
          "1205: }",
          "1206: #ifdef MG_MODULE_LINES",
          "1207: #line 1 \"common/sha1.c\"",
          "",
          "[Added Lines]",
          "985:   cs_md5_transform(ctx->buf, (uint32_t *) ctx->in);",
          "994: #line 1 \"common/cs_sha1.c\"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1462: #ifdef MG_MODULE_LINES",
          "1463: #line 1 \"common/str_util.c\"",
          "1464: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1250: #line 1 \"common/mbuf.c\"",
          "1251: #endif",
          "1257: #ifndef EXCLUDE_COMMON",
          "1259: #include <assert.h>",
          "1260: #include <string.h>",
          "1263: #ifndef MBUF_REALLOC",
          "1264: #define MBUF_REALLOC realloc",
          "1265: #endif",
          "1267: #ifndef MBUF_FREE",
          "1268: #define MBUF_FREE free",
          "1269: #endif",
          "1271: void mbuf_init(struct mbuf *mbuf, size_t initial_size) WEAK;",
          "1272: void mbuf_init(struct mbuf *mbuf, size_t initial_size) {",
          "1273:   mbuf->len = mbuf->size = 0;",
          "1274:   mbuf->buf = NULL;",
          "1275:   mbuf_resize(mbuf, initial_size);",
          "1276: }",
          "1278: void mbuf_free(struct mbuf *mbuf) WEAK;",
          "1279: void mbuf_free(struct mbuf *mbuf) {",
          "1280:   if (mbuf->buf != NULL) {",
          "1281:     MBUF_FREE(mbuf->buf);",
          "1282:     mbuf_init(mbuf, 0);",
          "1283:   }",
          "1284: }",
          "1286: void mbuf_resize(struct mbuf *a, size_t new_size) WEAK;",
          "1287: void mbuf_resize(struct mbuf *a, size_t new_size) {",
          "1288:   if (new_size > a->size || (new_size < a->size && new_size >= a->len)) {",
          "1289:     char *buf = (char *) MBUF_REALLOC(a->buf, new_size);",
          "1295:     if (buf == NULL && new_size != 0) return;",
          "1296:     a->buf = buf;",
          "1297:     a->size = new_size;",
          "1298:   }",
          "1299: }",
          "1301: void mbuf_trim(struct mbuf *mbuf) WEAK;",
          "1302: void mbuf_trim(struct mbuf *mbuf) {",
          "1303:   mbuf_resize(mbuf, mbuf->len);",
          "1304: }",
          "1306: size_t mbuf_insert(struct mbuf *a, size_t off, const void *buf, size_t) WEAK;",
          "1307: size_t mbuf_insert(struct mbuf *a, size_t off, const void *buf, size_t len) {",
          "1308:   char *p = NULL;",
          "1310:   assert(a != NULL);",
          "1311:   assert(a->len <= a->size);",
          "1312:   assert(off <= a->len);",
          "1315:   if (~(size_t) 0 - (size_t) a->buf < len) return 0;",
          "1317:   if (a->len + len <= a->size) {",
          "1318:     memmove(a->buf + off + len, a->buf + off, a->len - off);",
          "1319:     if (buf != NULL) {",
          "1320:       memcpy(a->buf + off, buf, len);",
          "1321:     }",
          "1322:     a->len += len;",
          "1323:   } else {",
          "1324:     size_t new_size = (size_t)((a->len + len) * MBUF_SIZE_MULTIPLIER);",
          "1325:     if ((p = (char *) MBUF_REALLOC(a->buf, new_size)) != NULL) {",
          "1326:       a->buf = p;",
          "1327:       memmove(a->buf + off + len, a->buf + off, a->len - off);",
          "1328:       if (buf != NULL) memcpy(a->buf + off, buf, len);",
          "1329:       a->len += len;",
          "1330:       a->size = new_size;",
          "1331:     } else {",
          "1332:       len = 0;",
          "1333:     }",
          "1334:   }",
          "1336:   return len;",
          "1337: }",
          "1339: size_t mbuf_append(struct mbuf *a, const void *buf, size_t len) WEAK;",
          "1340: size_t mbuf_append(struct mbuf *a, const void *buf, size_t len) {",
          "1341:   return mbuf_insert(a, a->len, buf, len);",
          "1342: }",
          "1344: void mbuf_remove(struct mbuf *mb, size_t n) WEAK;",
          "1345: void mbuf_remove(struct mbuf *mb, size_t n) {",
          "1346:   if (n > 0 && n <= mb->len) {",
          "1347:     memmove(mb->buf, mb->buf + n, mb->len - n);",
          "1348:     mb->len -= n;",
          "1349:   }",
          "1350: }",
          "1353: #ifdef MG_MODULE_LINES",
          "1354: #line 1 \"common/mg_str.c\"",
          "1355: #endif",
          "1364: #include <stdlib.h>",
          "1365: #include <string.h>",
          "1367: int mg_ncasecmp(const char *s1, const char *s2, size_t len) WEAK;",
          "1369: struct mg_str mg_mk_str(const char *s) WEAK;",
          "1370: struct mg_str mg_mk_str(const char *s) {",
          "1371:   struct mg_str ret = {s, 0};",
          "1372:   if (s != NULL) ret.len = strlen(s);",
          "1373:   return ret;",
          "1374: }",
          "1376: struct mg_str mg_mk_str_n(const char *s, size_t len) WEAK;",
          "1377: struct mg_str mg_mk_str_n(const char *s, size_t len) {",
          "1378:   struct mg_str ret = {s, len};",
          "1379:   return ret;",
          "1380: }",
          "1382: int mg_vcmp(const struct mg_str *str1, const char *str2) WEAK;",
          "1383: int mg_vcmp(const struct mg_str *str1, const char *str2) {",
          "1384:   size_t n2 = strlen(str2), n1 = str1->len;",
          "1385:   int r = strncmp(str1->p, str2, (n1 < n2) ? n1 : n2);",
          "1386:   if (r == 0) {",
          "1387:     return n1 - n2;",
          "1388:   }",
          "1389:   return r;",
          "1390: }",
          "1392: int mg_vcasecmp(const struct mg_str *str1, const char *str2) WEAK;",
          "1393: int mg_vcasecmp(const struct mg_str *str1, const char *str2) {",
          "1394:   size_t n2 = strlen(str2), n1 = str1->len;",
          "1395:   int r = mg_ncasecmp(str1->p, str2, (n1 < n2) ? n1 : n2);",
          "1396:   if (r == 0) {",
          "1397:     return n1 - n2;",
          "1398:   }",
          "1399:   return r;",
          "1400: }",
          "1402: struct mg_str mg_strdup(const struct mg_str s) WEAK;",
          "1403: struct mg_str mg_strdup(const struct mg_str s) {",
          "1404:   struct mg_str r = {NULL, 0};",
          "1405:   if (s.len > 0 && s.p != NULL) {",
          "1406:     r.p = (char *) MG_MALLOC(s.len);",
          "1407:     if (r.p != NULL) {",
          "1408:       memcpy((char *) r.p, s.p, s.len);",
          "1409:       r.len = s.len;",
          "1410:     }",
          "1411:   }",
          "1412:   return r;",
          "1413: }",
          "1415: int mg_strcmp(const struct mg_str str1, const struct mg_str str2) WEAK;",
          "1416: int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {",
          "1417:   size_t i = 0;",
          "1418:   while (i < str1.len && i < str2.len) {",
          "1419:     if (str1.p[i] < str2.p[i]) return -1;",
          "1420:     if (str1.p[i] > str2.p[i]) return 1;",
          "1421:     i++;",
          "1422:   }",
          "1423:   if (i < str1.len) return 1;",
          "1424:   if (i < str2.len) return -1;",
          "1425:   return 0;",
          "1426: }",
          "1428: int mg_strncmp(const struct mg_str, const struct mg_str, size_t n) WEAK;",
          "1429: int mg_strncmp(const struct mg_str str1, const struct mg_str str2, size_t n) {",
          "1430:   struct mg_str s1 = str1;",
          "1431:   struct mg_str s2 = str2;",
          "1433:   if (s1.len > n) {",
          "1434:     s1.len = n;",
          "1435:   }",
          "1436:   if (s2.len > n) {",
          "1437:     s2.len = n;",
          "1438:   }",
          "1439:   return mg_strcmp(s1, s2);",
          "1440: }",
          "1441: #ifdef MG_MODULE_LINES",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5061: struct mg_http_endpoint {",
          "5062:   struct mg_http_endpoint *next;",
          "5065:   mg_event_handler_t handler;",
          "5066: #if MG_ENABLE_CALLBACK_USERDATA",
          "5067:   void *user_data;",
          "",
          "[Removed Lines]",
          "5063:   const char *name;",
          "5064:   size_t name_len;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5152:   while (current != NULL) {",
          "5153:     struct mg_http_endpoint *tmp = current->next;",
          "5155:     MG_FREE(current);",
          "5156:     current = tmp;",
          "5157:   }",
          "",
          "[Removed Lines]",
          "5154:     MG_FREE((void *) current->name);",
          "",
          "[Added Lines]",
          "5134:     MG_FREE((void *) current->uri_pattern.p);",
          "5135:     MG_FREE((void *) current->auth_domain);",
          "5136:     MG_FREE((void *) current->auth_file);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5584:   ep = pd->endpoints;",
          "5585:   while (ep != NULL) {",
          "5588:       if (matched > matched_max) {",
          "5590:         ret = ep;",
          "",
          "[Removed Lines]",
          "5586:     const struct mg_str name_s = {ep->name, ep->name_len};",
          "5587:     if ((matched = mg_match_prefix_n(name_s, *uri_path)) != -1) {",
          "",
          "[Added Lines]",
          "5568:     if ((matched = mg_match_prefix_n(ep->uri_pattern, *uri_path)) != -1) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5598:   return ret;",
          "5599: }",
          "5620: #if MG_ENABLE_HTTP_STREAMING_MULTIPART",
          "5621: static void mg_http_multipart_continue(struct mg_connection *nc);",
          "",
          "[Removed Lines]",
          "5601: static void mg_http_call_endpoint_handler(struct mg_connection *nc, int ev,",
          "5602:                                           struct http_message *hm) {",
          "5603:   struct mg_http_proto_data *pd = mg_http_get_proto_data(nc);",
          "5604:   void *user_data = nc->user_data;",
          "5606:   if (ev == MG_EV_HTTP_REQUEST) {",
          "5607:     struct mg_http_endpoint *ep =",
          "5608:         mg_http_get_endpoint_handler(nc->listener, &hm->uri);",
          "5609:     if (ep != NULL) {",
          "5610:       pd->endpoint_handler = ep->handler;",
          "5611: #if MG_ENABLE_CALLBACK_USERDATA",
          "5612:       user_data = ep->user_data;",
          "5613: #endif",
          "5614:     }",
          "5615:   }",
          "5616:   mg_call(nc, pd->endpoint_handler ? pd->endpoint_handler : nc->handler,",
          "5617:           user_data, ev, hm);",
          "5618: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5626: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5590: static void mg_http_call_endpoint_handler(struct mg_connection *nc, int ev,",
          "5591:                                           struct http_message *hm);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "6691: }",
          "6693: #if !MG_DISABLE_HTTP_DIGEST_AUTH",
          "6694: static void mg_mkmd5resp(const char *method, size_t method_len, const char *uri,",
          "6695:                          size_t uri_len, const char *ha1, size_t ha1_len,",
          "6696:                          const char *nonce, size_t nonce_len, const char *nc,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6660: #ifndef MG_EXT_MD5",
          "6661: void mg_hash_md5_v(size_t num_msgs, const uint8_t *msgs[],",
          "6662:                    const size_t *msg_lens, uint8_t *digest) {",
          "6663:   size_t i;",
          "6664:   cs_md5_ctx md5_ctx;",
          "6665:   cs_md5_init(&md5_ctx);",
          "6666:   for (i = 0; i < num_msgs; i++) {",
          "6667:     cs_md5_update(&md5_ctx, msgs[i], msg_lens[i]);",
          "6668:   }",
          "6669:   cs_md5_final(digest, &md5_ctx);",
          "6670: }",
          "6671: #else",
          "6672: extern void mg_hash_md5_v(size_t num_msgs, const uint8_t *msgs[],",
          "6673:                           const size_t *msg_lens, uint8_t *digest);",
          "6674: #endif",
          "6676: void cs_md5(char buf[33], ...) {",
          "6677:   unsigned char hash[16];",
          "6678:   const uint8_t *msgs[20], *p;",
          "6679:   size_t msg_lens[20];",
          "6680:   size_t num_msgs = 0;",
          "6681:   va_list ap;",
          "6683:   va_start(ap, buf);",
          "6684:   while ((p = va_arg(ap, const unsigned char *) ) != NULL) {",
          "6685:     msgs[num_msgs] = p;",
          "6686:     msg_lens[num_msgs] = va_arg(ap, size_t);",
          "6687:     num_msgs++;",
          "6688:   }",
          "6689:   va_end(ap);",
          "6691:   mg_hash_md5_v(num_msgs, msgs, msg_lens, hash);",
          "6692:   cs_to_hex(buf, hash, sizeof(hash));",
          "6693: }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "6744:                               FILE *fp) {",
          "6745:   struct mg_str *hdr;",
          "6746:   char buf[128], f_user[sizeof(buf)], f_ha1[sizeof(buf)], f_domain[sizeof(buf)];",
          "6748:   char expected_response[33];",
          "",
          "[Removed Lines]",
          "6747:   char user[50], cnonce[33], response[40], uri[200], qop[20], nc[20], nonce[30];",
          "",
          "[Added Lines]",
          "6747:   char user[50], cnonce[64], response[40], uri[200], qop[20], nc[20], nonce[30];",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "6777:           hm->uri.len + (hm->query_string.len ? hm->query_string.len + 1 : 0),",
          "6778:           f_ha1, strlen(f_ha1), nonce, strlen(nonce), nc, strlen(nc), cnonce,",
          "6779:           strlen(cnonce), qop, strlen(qop), expected_response);",
          "6780:       return mg_casecmp(response, expected_response) == 0;",
          "6781:     }",
          "6782:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6780:       LOG(LL_DEBUG,",
          "6781:           (\"%s %s %s %s\", user, f_domain, response, expected_response));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "6785:   return 0;",
          "6786: }",
          "6792:   char buf[MG_MAX_PATH];",
          "6793:   const char *p;",
          "6794:   FILE *fp;",
          "",
          "[Removed Lines]",
          "6788: static int mg_is_authorized(struct http_message *hm, const char *path,",
          "6789:                             int is_directory, const char *domain,",
          "6790:                             const char *passwords_file,",
          "6791:                             int is_global_pass_file) {",
          "",
          "[Added Lines]",
          "6790: static int mg_http_is_authorized(struct http_message *hm, struct mg_str path,",
          "6791:                                  int is_directory, const char *domain,",
          "6792:                                  const char *passwords_file,",
          "6793:                                  int is_global_pass_file) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "6798:     if (is_global_pass_file) {",
          "6799:       fp = mg_fopen(passwords_file, \"r\");",
          "6800:     } else if (is_directory) {",
          "6802:       fp = mg_fopen(buf, \"r\");",
          "6803:     } else {",
          "6807:                passwords_file);",
          "6808:       fp = mg_fopen(buf, \"r\");",
          "6809:     }",
          "",
          "[Removed Lines]",
          "6801:       snprintf(buf, sizeof(buf), \"%s%c%s\", path, DIRSEP, passwords_file);",
          "6804:       p = strrchr(path, DIRSEP);",
          "6805:       if (p == NULL) p = path;",
          "6806:       snprintf(buf, sizeof(buf), \"%.*s%c%s\", (int) (p - path), path, DIRSEP,",
          "",
          "[Added Lines]",
          "6803:       snprintf(buf, sizeof(buf), \"%.*s%c%s\", (int) path.len, path.p, DIRSEP,",
          "6804:                passwords_file);",
          "6807:       p = strrchr(path.p, DIRSEP);",
          "6808:       if (p == NULL) p = path.p;",
          "6809:       snprintf(buf, sizeof(buf), \"%.*s%c%s\", (int) (p - path.p), path.p, DIRSEP,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "6814:     }",
          "6815:   }",
          "6819:   return authorized;",
          "6820: }",
          "6821: #else",
          "6826:   (void) hm;",
          "6827:   (void) path;",
          "6828:   (void) is_directory;",
          "",
          "[Removed Lines]",
          "6817:   LOG(LL_DEBUG, (\"%s '%s' %d %d\", path, passwords_file ? passwords_file : \"\",",
          "6818:                  is_global_pass_file, authorized));",
          "6822: static int mg_is_authorized(struct http_message *hm, const char *path,",
          "6823:                             int is_directory, const char *domain,",
          "6824:                             const char *passwords_file,",
          "6825:                             int is_global_pass_file) {",
          "",
          "[Added Lines]",
          "6820:   LOG(LL_DEBUG,",
          "6821:       (\"%.*s %s %d %d\", (int) path.len, path.p,",
          "6822:        passwords_file ? passwords_file : \"\", is_global_pass_file, authorized));",
          "6826: static int mg_http_is_authorized(struct http_message *hm,",
          "6827:                                  const struct mg_str path, int is_directory,",
          "6828:                                  const char *domain, const char *passwords_file,",
          "6829:                                  int is_global_pass_file) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "7170:   return 0;",
          "7171: }",
          "7174: MG_INTERNAL int mg_uri_to_local_path(struct http_message *hm,",
          "7175:                                      const struct mg_serve_http_opts *opts,",
          "",
          "[Removed Lines]",
          "7172: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "7454:   if (is_dav && opts->dav_document_root == NULL) {",
          "7455:     mg_http_send_error(nc, 501, NULL);",
          "7460:     mg_http_send_digest_auth_request(nc, opts->auth_domain);",
          "7461:   } else if (is_cgi) {",
          "7462: #if MG_ENABLE_HTTP_CGI",
          "",
          "[Removed Lines]",
          "7456:   } else if (!mg_is_authorized(hm, path, is_directory, opts->auth_domain,",
          "7457:                                opts->global_auth_file, 1) ||",
          "7458:              !mg_is_authorized(hm, path, is_directory, opts->auth_domain,",
          "7459:                                opts->per_directory_auth_file, 0)) {",
          "",
          "[Added Lines]",
          "7460:   } else if (!mg_http_is_authorized(hm, mg_mk_str(path), is_directory,",
          "7461:                                     opts->auth_domain, opts->global_auth_file,",
          "7462:                                     1) ||",
          "7463:              !mg_http_is_authorized(hm, mg_mk_str(path), is_directory,",
          "7464:                                     opts->auth_domain,",
          "7465:                                     opts->per_directory_auth_file, 0)) {",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "7472:   } else if (!mg_vcmp(&hm->method, \"PROPFIND\")) {",
          "7473:     mg_handle_propfind(nc, path, &st, hm, opts);",
          "7474: #if !MG_DISABLE_DAV_AUTH",
          "7480:     mg_http_send_digest_auth_request(nc, opts->auth_domain);",
          "7481: #endif",
          "7482:   } else if (!mg_vcmp(&hm->method, \"MKCOL\")) {",
          "",
          "[Removed Lines]",
          "7475:   } else if (is_dav &&",
          "7476:              (opts->dav_auth_file == NULL ||",
          "7477:               (strcmp(opts->dav_auth_file, \"-\") != 0 &&",
          "7478:                !mg_is_authorized(hm, path, is_directory, opts->auth_domain,",
          "7479:                                  opts->dav_auth_file, 1)))) {",
          "",
          "[Added Lines]",
          "7481:   } else if (is_dav && (opts->dav_auth_file == NULL ||",
          "7482:                         (strcmp(opts->dav_auth_file, \"-\") != 0 &&",
          "7483:                          !mg_http_is_authorized(hm, mg_mk_str(path),",
          "7484:                                                 is_directory, opts->auth_domain,",
          "7485:                                                 opts->dav_auth_file, 1)))) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "7910:   return 0;",
          "7911: }",
          "7916:   struct mg_http_proto_data *pd = NULL;",
          "7917:   struct mg_http_endpoint *new_ep = NULL;",
          "",
          "[Removed Lines]",
          "7913: void mg_register_http_endpoint(struct mg_connection *nc, const char *uri_path,",
          "7914:                                MG_CB(mg_event_handler_t handler,",
          "7915:                                      void *user_data)) {",
          "",
          "[Added Lines]",
          "7919: void mg_register_http_endpoint_opt(struct mg_connection *nc,",
          "7920:                                    const char *uri_path,",
          "7921:                                    mg_event_handler_t handler,",
          "7922:                                    struct mg_http_endpoint_opts opts) {",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "7921:   if (new_ep == NULL) return;",
          "7923:   pd = mg_http_get_proto_data(nc);",
          "7926:   new_ep->handler = handler;",
          "7927: #if MG_ENABLE_CALLBACK_USERDATA",
          "7929: #endif",
          "7930:   new_ep->next = pd->endpoints;",
          "7931:   pd->endpoints = new_ep;",
          "7932: }",
          "7935: #ifdef MG_MODULE_LINES",
          "7936: #line 1 \"mongoose/src/http_cgi.c\"",
          "",
          "[Removed Lines]",
          "7924:   new_ep->name = strdup(uri_path);",
          "7925:   new_ep->name_len = strlen(new_ep->name);",
          "7928:   new_ep->user_data = user_data;",
          "",
          "[Added Lines]",
          "7931:   new_ep->uri_pattern = mg_strdup(mg_mk_str(uri_path));",
          "7932:   if (opts.auth_domain != NULL && opts.auth_file != NULL) {",
          "7933:     new_ep->auth_domain = strdup(opts.auth_domain);",
          "7934:     new_ep->auth_file = strdup(opts.auth_file);",
          "7935:   }",
          "7938:   new_ep->user_data = opts.user_data;",
          "7944: static void mg_http_call_endpoint_handler(struct mg_connection *nc, int ev,",
          "7945:                                           struct http_message *hm) {",
          "7946:   struct mg_http_proto_data *pd = mg_http_get_proto_data(nc);",
          "7947:   void *user_data = nc->user_data;",
          "7949:   if (ev == MG_EV_HTTP_REQUEST) {",
          "7950:     struct mg_http_endpoint *ep =",
          "7951:         mg_http_get_endpoint_handler(nc->listener, &hm->uri);",
          "7952:     if (ep != NULL) {",
          "7953: #if MG_ENABLE_FILESYSTEM && !MG_DISABLE_HTTP_DIGEST_AUTH",
          "7954:       if (!mg_http_is_authorized(hm, hm->uri, 0 /* is_directory */,",
          "7955:                                  ep->auth_domain, ep->auth_file,",
          "7956:                                  1 /* is_global_pass_file */)) {",
          "7957:         mg_http_send_digest_auth_request(nc, ep->auth_domain);",
          "7958:         return;",
          "7959:       }",
          "7960: #endif",
          "7961:       pd->endpoint_handler = ep->handler;",
          "7962: #if MG_ENABLE_CALLBACK_USERDATA",
          "7963:       user_data = ep->user_data;",
          "7964: #endif",
          "7965:     }",
          "7966:   }",
          "7967:   mg_call(nc, pd->endpoint_handler ? pd->endpoint_handler : nc->handler,",
          "7968:           user_data, ev, hm);",
          "7969: }",
          "7971: void mg_register_http_endpoint(struct mg_connection *nc, const char *uri_path,",
          "7972:                                MG_CB(mg_event_handler_t handler,",
          "7973:                                      void *user_data)) {",
          "7974:   struct mg_http_endpoint_opts opts;",
          "7975:   memset(&opts, 0, sizeof(opts));",
          "7976: #if MG_ENABLE_CALLBACK_USERDATA",
          "7977:   opts.user_data = user_data;",
          "7978: #endif",
          "7979:   mg_register_http_endpoint_opt(nc, uri_path, handler, opts);",
          "7980: }",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "9187: }",
          "9189: #ifndef MG_EXT_SHA1",
          "9192:   size_t i;",
          "9193:   cs_sha1_ctx sha_ctx;",
          "9194:   cs_sha1_init(&sha_ctx);",
          "",
          "[Removed Lines]",
          "9190: static void mg_hash_sha1_v(size_t num_msgs, const uint8_t *msgs[],",
          "9191:                            const size_t *msg_lens, uint8_t *digest) {",
          "",
          "[Added Lines]",
          "9240: void mg_hash_sha1_v(size_t num_msgs, const uint8_t *msgs[],",
          "9241:                     const size_t *msg_lens, uint8_t *digest) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "9650:       return j == str.len ? (int) j : -1;",
          "9651:     } else if (pattern.p[i] == '*') {",
          "9652:       i++;",
          "9654:         i++;",
          "9655:         len = str.len - j;",
          "9656:       } else {",
          "",
          "[Removed Lines]",
          "9653:       if (pattern.p[i] == '*') {",
          "",
          "[Added Lines]",
          "9703:       if (i < pattern.len && pattern.p[i] == '*') {",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1631: #ifdef MG_MODULE_LINES",
          "1632: #line 1 \"common/cs_time.h\"",
          "1633: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1632: #line 1 \"common/cs_md5.h\"",
          "1633: #endif",
          "1639: #ifndef CS_COMMON_MD5_H_",
          "1640: #define CS_COMMON_MD5_H_",
          "1644: #ifndef CS_DISABLE_MD5",
          "1645: #define CS_DISABLE_MD5 0",
          "1646: #endif",
          "1648: #ifdef __cplusplus",
          "1649: extern \"C\" {",
          "1652: typedef struct {",
          "1653:   uint32_t buf[4];",
          "1654:   uint32_t bits[2];",
          "1655:   unsigned char in[64];",
          "1656: } cs_md5_ctx;",
          "1658: void cs_md5_init(cs_md5_ctx *c);",
          "1659: void cs_md5_update(cs_md5_ctx *c, const unsigned char *data, size_t len);",
          "1660: void cs_md5_final(unsigned char *md, cs_md5_ctx *c);",
          "1662: #ifdef __cplusplus",
          "1663: }",
          "1667: #ifdef MG_MODULE_LINES",
          "1668: #line 1 \"common/cs_sha1.h\"",
          "1669: #endif",
          "1675: #ifndef CS_COMMON_SHA1_H_",
          "1676: #define CS_COMMON_SHA1_H_",
          "1678: #ifndef CS_DISABLE_SHA1",
          "1679: #define CS_DISABLE_SHA1 0",
          "1680: #endif",
          "1682: #if !CS_DISABLE_SHA1",
          "1686: #ifdef __cplusplus",
          "1687: extern \"C\" {",
          "1690: typedef struct {",
          "1691:   uint32_t state[5];",
          "1692:   uint32_t count[2];",
          "1693:   unsigned char buffer[64];",
          "1694: } cs_sha1_ctx;",
          "1696: void cs_sha1_init(cs_sha1_ctx *);",
          "1697: void cs_sha1_update(cs_sha1_ctx *, const unsigned char *data, uint32_t len);",
          "1698: void cs_sha1_final(unsigned char digest[20], cs_sha1_ctx *);",
          "1699: void cs_hmac_sha1(const unsigned char *key, size_t key_len,",
          "1700:                   const unsigned char *text, size_t text_len,",
          "1701:                   unsigned char out[20]);",
          "1702: #ifdef __cplusplus",
          "1703: }",
          "1709: #ifdef MG_MODULE_LINES",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1795: #ifdef MG_MODULE_LINES",
          "1884: #line 1 \"common/base64.h\"",
          "1885: #endif",
          "",
          "[Removed Lines]",
          "1796: #line 1 \"common/sha1.h\"",
          "1797: #endif",
          "1803: #ifndef CS_COMMON_SHA1_H_",
          "1804: #define CS_COMMON_SHA1_H_",
          "1806: #ifndef CS_DISABLE_SHA1",
          "1807: #define CS_DISABLE_SHA1 0",
          "1808: #endif",
          "1810: #if !CS_DISABLE_SHA1",
          "1814: #ifdef __cplusplus",
          "1815: extern \"C\" {",
          "1818: typedef struct {",
          "1819:   uint32_t state[5];",
          "1820:   uint32_t count[2];",
          "1821:   unsigned char buffer[64];",
          "1822: } cs_sha1_ctx;",
          "1824: void cs_sha1_init(cs_sha1_ctx *);",
          "1825: void cs_sha1_update(cs_sha1_ctx *, const unsigned char *data, uint32_t len);",
          "1826: void cs_sha1_final(unsigned char digest[20], cs_sha1_ctx *);",
          "1827: void cs_hmac_sha1(const unsigned char *key, size_t key_len,",
          "1828:                   const unsigned char *text, size_t text_len,",
          "1829:                   unsigned char out[20]);",
          "1830: #ifdef __cplusplus",
          "1831: }",
          "1837: #ifdef MG_MODULE_LINES",
          "1838: #line 1 \"common/md5.h\"",
          "1839: #endif",
          "1845: #ifndef CS_COMMON_MD5_H_",
          "1846: #define CS_COMMON_MD5_H_",
          "1850: #ifndef CS_DISABLE_MD5",
          "1851: #define CS_DISABLE_MD5 0",
          "1852: #endif",
          "1854: #ifdef __cplusplus",
          "1855: extern \"C\" {",
          "1858: typedef struct MD5Context {",
          "1859:   uint32_t buf[4];",
          "1860:   uint32_t bits[2];",
          "1861:   unsigned char in[64];",
          "1862: } MD5_CTX;",
          "1864: void MD5_Init(MD5_CTX *c);",
          "1865: void MD5_Update(MD5_CTX *c, const unsigned char *data, size_t len);",
          "1866: void MD5_Final(unsigned char *md, MD5_CTX *c);",
          "1876: char *cs_md5(char buf[33], ...);",
          "1878: #ifdef __cplusplus",
          "1879: }",
          "1883: #ifdef MG_MODULE_LINES",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4394: int mg_url_decode(const char *src, int src_len, char *dst, int dst_len,",
          "4395:                   int is_form_url_encoded);",
          "4397: #ifdef __cplusplus",
          "4398: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4387: extern void mg_hash_md5_v(size_t num_msgs, const uint8_t *msgs[],",
          "4388:                           const size_t *msg_lens, uint8_t *digest);",
          "4389: extern void mg_hash_sha1_v(size_t num_msgs, const uint8_t *msgs[],",
          "4390:                            const size_t *msg_lens, uint8_t *digest);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4805:                                MG_CB(mg_event_handler_t handler,",
          "4806:                                      void *user_data));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4803: struct mg_http_endpoint_opts {",
          "4804:   void *user_data;",
          "4806:   const char *auth_domain;",
          "4807:   const char *auth_file;",
          "4808: };",
          "4810: void mg_register_http_endpoint_opt(struct mg_connection *nc,",
          "4811:                                    const char *uri_path,",
          "4812:                                    mg_event_handler_t handler,",
          "4813:                                    struct mg_http_endpoint_opts opts);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "57a4ec31d10d8b30a465354567b010ed726189f6",
      "candidate_info": {
        "commit_hash": "57a4ec31d10d8b30a465354567b010ed726189f6",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/57a4ec31d10d8b30a465354567b010ed726189f6",
        "files": [
          "mongoose.h"
        ],
        "message": "Fix MinGW compilation\n\nPUBLISHED_FROM=66b2dee87dc50de5f2891dee789beec89c3f6fb4",
        "before_after_code_files": [
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "195: #include <stdlib.h>",
          "196: #include <sys/stat.h>",
          "197: #include <time.h>",
          "199: #ifdef _MSC_VER",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198: #include <ctype.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221: #define __func__ __FILE__ \":\" STR(__LINE__)",
          "222: #endif",
          "223: #define snprintf _snprintf",
          "225: #define vsnprintf _vsnprintf",
          "226: #define sleep(x) Sleep((x) *1000)",
          "227: #define to64(x) _atoi64(x)",
          "228: #if !defined(__MINGW32__) && !defined(__MINGW64__)",
          "229: #define popen(x, y) _popen((x), (y))",
          "230: #define pclose(x) _pclose(x)",
          "231: #endif",
          "232: #define rmdir _rmdir",
          "233: #if defined(_MSC_VER) && _MSC_VER >= 1400",
          "",
          "[Removed Lines]",
          "224: #define fileno _fileno",
          "",
          "[Added Lines]",
          "231: #define fileno _fileno",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1cee8a16b9669b64cd19905850556eaf281a54e8",
      "candidate_info": {
        "commit_hash": "1cee8a16b9669b64cd19905850556eaf281a54e8",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/1cee8a16b9669b64cd19905850556eaf281a54e8",
        "files": [
          "mongoose.c"
        ],
        "message": "Fix mg_socket_if_get_conn_addr for UDP sockets\n\nRemote address is not associated with an outgoing UDP socket.\nInstead, it is stored in mg_connection.sa\n\nPUBLISHED_FROM=16f82ee8a69b995d684ec96b8db6b5591cd400db",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3793: void mg_socket_if_get_conn_addr(struct mg_connection *nc, int remote,",
          "3794:                                 union socket_address *sa) {",
          "3795:   mg_sock_get_addr(nc->sock, remote, sa);",
          "3796: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3795:   if ((nc->flags & MG_F_UDP) && remote) {",
          "3796:     memcpy(sa, &nc->sa, sizeof(*sa));",
          "3797:     return;",
          "3798:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "abf89d32d9434f3b3eed74dc2b61f2434ea51fcb",
      "candidate_info": {
        "commit_hash": "abf89d32d9434f3b3eed74dc2b61f2434ea51fcb",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/abf89d32d9434f3b3eed74dc2b61f2434ea51fcb",
        "files": [
          "mongoose.c"
        ],
        "message": "Make C ws client work with Go\n\nPUBLISHED_FROM=263553121b992ec0f66b0275b4e10f4176281812",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8036:   mg_printf(nc, \"%s %.*s HTTP/1.1\\r\\nHost: %.*s\\r\\nContent-Length: %\" SIZE_T_FMT",
          "8037:                 \"\\r\\n%.*s%s\\r\\n%s\",",
          "8038:             (post_data[0] == '\\0' ? \"GET\" : \"POST\"), (int) path.len, path.p,",
          "8040:             (auth.buf == NULL ? \"\" : auth.buf), extra_headers, post_data);",
          "8042:   mbuf_free(&auth);",
          "",
          "[Removed Lines]",
          "8039:             (int) host.len, host.p, strlen(post_data), (int) auth.len,",
          "",
          "[Added Lines]",
          "8039:             (int) (path.p - host.p), host.p, strlen(post_data), (int) auth.len,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9513:   if (host.len > 0) {",
          "9515:   }",
          "9516:   if (protocol.len > 0) {",
          "9517:     mg_printf(nc, \"Sec-WebSocket-Protocol: %.*s\\r\\n\", (int) protocol.len,",
          "",
          "[Removed Lines]",
          "9514:     mg_printf(nc, \"Host: %.*s\\r\\n\", (int) host.len, host.p);",
          "",
          "[Added Lines]",
          "9515:     mg_printf(nc, \"Host: %.*s\\r\\n\", host_len, host.p);",
          "",
          "---------------"
        ]
      }
    }
  ]
}