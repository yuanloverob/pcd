{
  "cve_id": "CVE-2019-15924",
  "cve_desc": "An issue was discovered in the Linux kernel before 5.0.11. fm10k_init_module in drivers/net/ethernet/intel/fm10k/fm10k_main.c has a NULL pointer dereference because there is no -ENOMEM upon an alloc_workqueue failure.",
  "repo": "torvalds/linux",
  "patch_hash": "01ca667133d019edc9f0a1f70a272447c84ec41f",
  "patch_info": {
    "commit_hash": "01ca667133d019edc9f0a1f70a272447c84ec41f",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/01ca667133d019edc9f0a1f70a272447c84ec41f",
    "files": [
      "drivers/net/ethernet/intel/fm10k/fm10k_main.c"
    ],
    "message": "fm10k: Fix a potential NULL pointer dereference\n\nSyzkaller report this:\n\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN PTI\nCPU: 0 PID: 4378 Comm: syz-executor.0 Tainted: G         C        5.0.0+ #5\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.10.2-1ubuntu1 04/01/2014\nRIP: 0010:__lock_acquire+0x95b/0x3200 kernel/locking/lockdep.c:3573\nCode: 00 0f 85 28 1e 00 00 48 81 c4 08 01 00 00 5b 5d 41 5c 41 5d 41 5e 41 5f c3 4c 89 ea 48 b8 00 00 00 00 00 fc ff df 48 c1 ea 03 <80> 3c 02 00 0f 85 cc 24 00 00 49 81 7d 00 e0 de 03 a6 41 bc 00 00\nRSP: 0018:ffff8881e3c07a40 EFLAGS: 00010002\nRAX: dffffc0000000000 RBX: 0000000000000000 RCX: 0000000000000000\nRDX: 0000000000000010 RSI: 0000000000000000 RDI: 0000000000000080\nRBP: 0000000000000000 R08: 0000000000000001 R09: 0000000000000000\nR10: ffff8881e3c07d98 R11: ffff8881c7f21f80 R12: 0000000000000001\nR13: 0000000000000080 R14: 0000000000000000 R15: 0000000000000001\nFS:  00007fce2252e700(0000) GS:ffff8881f2400000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00007fffc7eb0228 CR3: 00000001e5bea002 CR4: 00000000007606f0\nDR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\nDR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\nPKRU: 55555554\nCall Trace:\n lock_acquire+0xff/0x2c0 kernel/locking/lockdep.c:4211\n __mutex_lock_common kernel/locking/mutex.c:925 [inline]\n __mutex_lock+0xdf/0x1050 kernel/locking/mutex.c:1072\n drain_workqueue+0x24/0x3f0 kernel/workqueue.c:2934\n destroy_workqueue+0x23/0x630 kernel/workqueue.c:4319\n __do_sys_delete_module kernel/module.c:1018 [inline]\n __se_sys_delete_module kernel/module.c:961 [inline]\n __x64_sys_delete_module+0x30c/0x480 kernel/module.c:961\n do_syscall_64+0x9f/0x450 arch/x86/entry/common.c:290\n entry_SYSCALL_64_after_hwframe+0x49/0xbe\nRIP: 0033:0x462e99\nCode: f7 d8 64 89 02 b8 ff ff ff ff c3 66 0f 1f 44 00 00 48 89 f8 48 89 f7 48 89 d6 48 89 ca 4d 89 c2 4d 89 c8 4c 8b 4c 24 08 0f 05 <48> 3d 01 f0 ff ff 73 01 c3 48 c7 c1 bc ff ff ff f7 d8 64 89 01 48\nRSP: 002b:00007fce2252dc58 EFLAGS: 00000246 ORIG_RAX: 00000000000000b0\nRAX: ffffffffffffffda RBX: 000000000073bf00 RCX: 0000000000462e99\nRDX: 0000000000000000 RSI: 0000000000000000 RDI: 0000000020000140\nRBP: 0000000000000002 R08: 0000000000000000 R09: 0000000000000000\nR10: 0000000000000000 R11: 0000000000000246 R12: 00007fce2252e6bc\nR13: 00000000004bcca9 R14: 00000000006f6b48 R15: 00000000ffffffff\n\nIf alloc_workqueue fails, it should return -ENOMEM, otherwise may\ntrigger this NULL pointer dereference while unloading drivers.\n\nReported-by: Hulk Robot <hulkci@huawei.com>\nFixes: 0a38c17a21a0 (\"fm10k: Remove create_workqueue\")\nSigned-off-by: Yue Haibing <yuehaibing@huawei.com>\nTested-by: Andrew Bowers <andrewx.bowers@intel.com>\nSigned-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>",
    "before_after_code_files": [
      "drivers/net/ethernet/intel/fm10k/fm10k_main.c||drivers/net/ethernet/intel/fm10k/fm10k_main.c"
    ]
  },
  "patch_diff": {
    "drivers/net/ethernet/intel/fm10k/fm10k_main.c||drivers/net/ethernet/intel/fm10k/fm10k_main.c": [
      "File: drivers/net/ethernet/intel/fm10k/fm10k_main.c -> drivers/net/ethernet/intel/fm10k/fm10k_main.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "42:  fm10k_workqueue = alloc_workqueue(\"%s\", WQ_MEM_RECLAIM, 0,",
      "43:        fm10k_driver_name);",
      "45:  fm10k_dbg_init();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "44:  if (!fm10k_workqueue)",
      "45:   return -ENOMEM;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ec7727bb24b01e96b0c46068addf355ee4f794d8",
      "candidate_info": {
        "commit_hash": "ec7727bb24b01e96b0c46068addf355ee4f794d8",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/ec7727bb24b01e96b0c46068addf355ee4f794d8",
        "files": [
          "net/sched/act_skbedit.c",
          "tools/testing/selftests/tc-testing/tc-tests/actions/skbedit.json"
        ],
        "message": "net/sched: act_skbedit: validate the control action inside init()\n\nthe following script:\n\n # tc qdisc add dev crash0 clsact\n # tc filter add dev crash0 egress matchall \\\n > action skbedit ptype host pass index 90\n # tc actions replace action skbedit \\\n > ptype host goto chain 42 index 90 cookie c1a0c1a0\n # tc actions show action skbedit\n\nhad the following output:\n\n Error: Failed to init TC action chain.\n We have an error talking to the kernel\n total acts 1\n\n         action order 0: skbedit  ptype host goto chain 42\n          index 90 ref 2 bind 1\n         cookie c1a0c1a0\n\nThen, the first packet transmitted by crash0 made the kernel crash:\n\n BUG: unable to handle kernel NULL pointer dereference at 0000000000000000\n #PF error: [normal kernel read fault]\n PGD 0 P4D 0\n Oops: 0000 [#1] SMP PTI\n CPU: 3 PID: 3467 Comm: kworker/3:3 Not tainted 5.0.0-rc4.gotochain_crash+ #536\n Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011\n Workqueue: ipv6_addrconf addrconf_dad_work\n RIP: 0010:tcf_action_exec+0xb8/0x100\n Code: 00 00 00 20 74 1d 83 f8 03 75 09 49 83 c4 08 4d 39 ec 75 bc 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3 49 8b 97 a8 00 00 00 <48> 8b 12 48 89 55 00 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3\n RSP: 0018:ffffb50a81e1fad0 EFLAGS: 00010246\n RAX: 000000002000002a RBX: ffff9aa47ba4ea00 RCX: 0000000000000001\n RDX: 0000000000000000 RSI: ffff9aa469eeb3c0 RDI: ffff9aa47ba4ea00\n RBP: ffffb50a81e1fb70 R08: 0000000000000000 R09: 0000000000000000\n R10: 0000000000000000 R11: ffff9aa47bce0638 R12: ffff9aa4793b0c00\n R13: ffff9aa4793b0c08 R14: 0000000000000001 R15: ffff9aa469eeb3c0\n FS:  0000000000000000(0000) GS:ffff9aa474780000(0000) knlGS:0000000000000000\n CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n CR2: 0000000000000000 CR3: 000000007360e005 CR4: 00000000001606e0\n Call Trace:\n  tcf_classify+0x58/0x120\n  __dev_queue_xmit+0x40a/0x890\n  ? ndisc_next_option+0x50/0x50\n  ? ___neigh_create+0x4d5/0x680\n  ? ip6_finish_output2+0x1b5/0x590\n  ip6_finish_output2+0x1b5/0x590\n  ? ip6_output+0x68/0x110\n  ip6_output+0x68/0x110\n  ? nf_hook.constprop.28+0x79/0xc0\n  ndisc_send_skb+0x248/0x2e0\n  ndisc_send_ns+0xf8/0x200\n  ? addrconf_dad_work+0x389/0x4b0\n  addrconf_dad_work+0x389/0x4b0\n  ? __switch_to_asm+0x34/0x70\n  ? process_one_work+0x195/0x380\n  ? addrconf_dad_completed+0x370/0x370\n  process_one_work+0x195/0x380\n  worker_thread+0x30/0x390\n  ? process_one_work+0x380/0x380\n  kthread+0x113/0x130\n  ? kthread_park+0x90/0x90\n  ret_from_fork+0x35/0x40\n Modules linked in: act_skbedit veth ip6table_filter ip6_tables iptable_filter binfmt_misc crct10dif_pclmul crc32_pclmul ghash_clmulni_intel ext4 snd_hda_codec_generic snd_hda_intel snd_hda_codec snd_hwdep mbcache snd_hda_core jbd2 snd_seq snd_seq_device snd_pcm aesni_intel crypto_simd cryptd snd_timer glue_helper snd joydev soundcore pcspkr virtio_balloon i2c_piix4 nfsd auth_rpcgss nfs_acl lockd grace sunrpc ip_tables xfs ata_generic pata_acpi qxl drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops ttm virtio_net net_failover drm failover virtio_blk virtio_console ata_piix virtio_pci crc32c_intel serio_raw libata virtio_ring virtio floppy dm_mirror dm_region_hash dm_log dm_mod\n CR2: 0000000000000000\n\nValidating the control action within tcf_skbedit_init() proved to fix the\nabove issue. A TDC selftest is added to verify the correct behavior.\n\nFixes: db50514f9a9c (\"net: sched: add termination action to allow goto chain\")\nFixes: 97763dc0f401 (\"net_sched: reject unknown tcfa_action values\")\nSigned-off-by: Davide Caratti <dcaratti@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/sched/act_skbedit.c||net/sched/act_skbedit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/sched/act_skbedit.c||net/sched/act_skbedit.c": [
          "File: net/sched/act_skbedit.c -> net/sched/act_skbedit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include <net/ip.h>",
          "27: #include <net/ipv6.h>",
          "28: #include <net/dsfield.h>",
          "30: #include <linux/tc_act/tc_skbedit.h>",
          "31: #include <net/tc_act/tc_skbedit.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: #include <net/pkt_cls.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:  struct tc_action_net *tn = net_generic(net, skbedit_net_id);",
          "103:  struct tcf_skbedit_params *params_new;",
          "104:  struct nlattr *tb[TCA_SKBEDIT_MAX + 1];",
          "105:  struct tc_skbedit *parm;",
          "106:  struct tcf_skbedit *d;",
          "107:  u32 flags = 0, *priority = NULL, *mark = NULL, *mask = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:  struct tcf_chain *goto_ch = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "187:    return -EEXIST;",
          "188:   }",
          "189:  }",
          "191:  params_new = kzalloc(sizeof(*params_new), GFP_KERNEL);",
          "192:  if (unlikely(!params_new)) {",
          "195:  }",
          "197:  params_new->flags = flags;",
          "",
          "[Removed Lines]",
          "193:   tcf_idr_release(*a, bind);",
          "194:   return -ENOMEM;",
          "",
          "[Added Lines]",
          "192:  err = tcf_action_check_ctrlact(parm->action, tp, &goto_ch, extack);",
          "193:  if (err < 0)",
          "194:   goto release_idr;",
          "198:   err = -ENOMEM;",
          "199:   goto put_chain;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "209:   params_new->mask = *mask;",
          "211:  spin_lock_bh(&d->tcf_lock);",
          "213:  rcu_swap_protected(d->params, params_new,",
          "214:       lockdep_is_held(&d->tcf_lock));",
          "215:  spin_unlock_bh(&d->tcf_lock);",
          "216:  if (params_new)",
          "217:   kfree_rcu(params_new, rcu);",
          "219:  if (ret == ACT_P_CREATED)",
          "220:   tcf_idr_insert(tn, *a);",
          "221:  return ret;",
          "222: }",
          "224: static int tcf_skbedit_dump(struct sk_buff *skb, struct tc_action *a,",
          "",
          "[Removed Lines]",
          "212:  d->tcf_action = parm->action;",
          "",
          "[Added Lines]",
          "217:  goto_ch = tcf_action_set_ctrlact(*a, parm->action, goto_ch);",
          "223:  if (goto_ch)",
          "224:   tcf_chain_put_by_act(goto_ch);",
          "229: put_chain:",
          "230:  if (goto_ch)",
          "231:   tcf_chain_put_by_act(goto_ch);",
          "232: release_idr:",
          "233:  tcf_idr_release(*a, bind);",
          "234:  return err;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f75591fc5a123929a29636834d1bcb8b5c9fee3",
      "candidate_info": {
        "commit_hash": "7f75591fc5a123929a29636834d1bcb8b5c9fee3",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7f75591fc5a123929a29636834d1bcb8b5c9fee3",
        "files": [
          "drivers/iio/industrialio-core.c"
        ],
        "message": "iio: core: fix a possible circular locking dependency\n\nThis fixes a possible circular locking dependency detected warning seen\nwith:\n- CONFIG_PROVE_LOCKING=y\n- consumer/provider IIO devices (ex: \"voltage-divider\" consumer of \"adc\")\n\nWhen using the IIO consumer interface, e.g. iio_channel_get(), the consumer\ndevice will likely call iio_read_channel_raw() or similar that rely on\n'info_exist_lock' mutex.\n\ntypically:\n...\n\tmutex_lock(&chan->indio_dev->info_exist_lock);\n\tif (chan->indio_dev->info == NULL) {\n\t\tret = -ENODEV;\n\t\tgoto err_unlock;\n\t}\n\tret = do_some_ops()\nerr_unlock:\n\tmutex_unlock(&chan->indio_dev->info_exist_lock);\n\treturn ret;\n...\n\nSame mutex is also hold in iio_device_unregister().\n\nThe following deadlock warning happens when:\n- the consumer device has called an API like iio_read_channel_raw()\n  at least once.\n- the consumer driver is unregistered, removed (unbind from sysfs)\n\n======================================================\nWARNING: possible circular locking dependency detected\n4.19.24 #577 Not tainted\n------------------------------------------------------\nsh/372 is trying to acquire lock:\n(kn->count#30){++++}, at: kernfs_remove_by_name_ns+0x3c/0x84\n\nbut task is already holding lock:\n(&dev->info_exist_lock){+.+.}, at: iio_device_unregister+0x18/0x60\n\nwhich lock already depends on the new lock.\n\nthe existing dependency chain (in reverse order) is:\n\n-> #1 (&dev->info_exist_lock){+.+.}:\n       __mutex_lock+0x70/0xa3c\n       mutex_lock_nested+0x1c/0x24\n       iio_read_channel_raw+0x1c/0x60\n       iio_read_channel_info+0xa8/0xb0\n       dev_attr_show+0x1c/0x48\n       sysfs_kf_seq_show+0x84/0xec\n       seq_read+0x154/0x528\n       __vfs_read+0x2c/0x15c\n       vfs_read+0x8c/0x110\n       ksys_read+0x4c/0xac\n       ret_fast_syscall+0x0/0x28\n       0xbedefb60\n\n-> #0 (kn->count#30){++++}:\n       lock_acquire+0xd8/0x268\n       __kernfs_remove+0x288/0x374\n       kernfs_remove_by_name_ns+0x3c/0x84\n       remove_files+0x34/0x78\n       sysfs_remove_group+0x40/0x9c\n       sysfs_remove_groups+0x24/0x34\n       device_remove_attrs+0x38/0x64\n       device_del+0x11c/0x360\n       cdev_device_del+0x14/0x2c\n       iio_device_unregister+0x24/0x60\n       release_nodes+0x1bc/0x200\n       device_release_driver_internal+0x1a0/0x230\n       unbind_store+0x80/0x130\n       kernfs_fop_write+0x100/0x1e4\n       __vfs_write+0x2c/0x160\n       vfs_write+0xa4/0x17c\n       ksys_write+0x4c/0xac\n       ret_fast_syscall+0x0/0x28\n       0xbe906840\n\nother info that might help us debug this:\n\n Possible unsafe locking scenario:\n\n       CPU0                    CPU1\n       ----                    ----\n  lock(&dev->info_exist_lock);\n                               lock(kn->count#30);\n                               lock(&dev->info_exist_lock);\n  lock(kn->count#30);\n\n *** DEADLOCK ***\n...\n\ncdev_device_del() can be called without holding the lock. It should be safe\nas info_exist_lock prevents kernelspace consumers to use the exported\nroutines during/after provider removal. cdev_device_del() is for userspace.\n\nHelp to reproduce:\nSee example: Documentation/devicetree/bindings/iio/afe/voltage-divider.txt\nsysv {\n\tcompatible = \"voltage-divider\";\n\tio-channels = <&adc 0>;\n\toutput-ohms = <22>;\n\tfull-ohms = <222>;\n};\n\nFirst, go to iio:deviceX for the \"voltage-divider\", do one read:\n$ cd /sys/bus/iio/devices/iio:deviceX\n$ cat in_voltage0_raw\n\nThen, unbind the consumer driver. It triggers above deadlock warning.\n$ cd /sys/bus/platform/drivers/iio-rescale/\n$ echo sysv > unbind\n\nNote I don't actually expect stable will pick this up all the\nway back into IIO being in staging, but if's probably valid that\nfar back.\n\nSigned-off-by: Fabrice Gasnier <fabrice.gasnier@st.com>\nFixes: ac917a81117c (\"staging:iio:core set the iio_dev.info pointer to null on unregister\")\nCc: <Stable@vger.kernel.org>\nSigned-off-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>",
        "before_after_code_files": [
          "drivers/iio/industrialio-core.c||drivers/iio/industrialio-core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/iio/industrialio-core.c||drivers/iio/industrialio-core.c": [
          "File: drivers/iio/industrialio-core.c -> drivers/iio/industrialio-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1744: void iio_device_unregister(struct iio_dev *indio_dev)",
          "1745: {",
          "1748:  cdev_device_del(&indio_dev->chrdev, &indio_dev->dev);",
          "1750:  iio_device_unregister_debugfs(indio_dev);",
          "1752:  iio_disable_all_buffers(indio_dev);",
          "",
          "[Removed Lines]",
          "1746:  mutex_lock(&indio_dev->info_exist_lock);",
          "",
          "[Added Lines]",
          "1748:  mutex_lock(&indio_dev->info_exist_lock);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6d1fa584e0dd9bfebaf345e9feea588cf75ead2",
      "candidate_info": {
        "commit_hash": "e6d1fa584e0dd9bfebaf345e9feea588cf75ead2",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e6d1fa584e0dd9bfebaf345e9feea588cf75ead2",
        "files": [
          "lib/sbitmap.c"
        ],
        "message": "sbitmap: order READ/WRITE freed instance and setting clear bit\n\nInside sbitmap_queue_clear(), once the clear bit is set, it will be\nvisiable to allocation path immediately. Meantime READ/WRITE on old\nassociated instance(such as request in case of blk-mq) may be\nout-of-order with the setting clear bit, so race with re-allocation\nmay be triggered.\n\nAdds one memory barrier for ordering READ/WRITE of the freed associated\ninstance with setting clear bit for avoiding race with re-allocation.\n\nThe following kernel oops triggerd by block/006 on aarch64 may be fixed:\n\n[  142.330954] Unable to handle kernel NULL pointer dereference at virtual address 0000000000000330\n[  142.338794] Mem abort info:\n[  142.341554]   ESR = 0x96000005\n[  142.344632]   Exception class = DABT (current EL), IL = 32 bits\n[  142.350500]   SET = 0, FnV = 0\n[  142.353544]   EA = 0, S1PTW = 0\n[  142.356678] Data abort info:\n[  142.359528]   ISV = 0, ISS = 0x00000005\n[  142.363343]   CM = 0, WnR = 0\n[  142.366305] user pgtable: 64k pages, 48-bit VAs, pgdp = 000000002a3c51c0\n[  142.372983] [0000000000000330] pgd=0000000000000000, pud=0000000000000000\n[  142.379777] Internal error: Oops: 96000005 [#1] SMP\n[  142.384613] Modules linked in: null_blk ib_isert iscsi_target_mod ib_srpt target_core_mod ib_srp scsi_transport_srp vfat fat rpcrdma sunrpc rdma_ucm ib_iser rdma_cm iw_cm libiscsi ib_umad scsi_transport_iscsi ib_ipoib ib_cm mlx5_ib ib_uverbs ib_core sbsa_gwdt crct10dif_ce ghash_ce ipmi_ssif sha2_ce ipmi_devintf sha256_arm64 sg sha1_ce ipmi_msghandler ip_tables xfs libcrc32c mlx5_core sdhci_acpi mlxfw ahci_platform at803x sdhci libahci_platform qcom_emac mmc_core hdma hdma_mgmt i2c_dev [last unloaded: null_blk]\n[  142.429753] CPU: 7 PID: 1983 Comm: fio Not tainted 5.0.0.cki #2\n[  142.449458] pstate: 00400005 (nzcv daif +PAN -UAO)\n[  142.454239] pc : __blk_mq_free_request+0x4c/0xa8\n[  142.458830] lr : blk_mq_free_request+0xec/0x118\n[  142.463344] sp : ffff00003360f6a0\n[  142.466646] x29: ffff00003360f6a0 x28: ffff000010e70000\n[  142.471941] x27: ffff801729a50048 x26: 0000000000010000\n[  142.477232] x25: ffff00003360f954 x24: ffff7bdfff021440\n[  142.482529] x23: 0000000000000000 x22: 00000000ffffffff\n[  142.487830] x21: ffff801729810000 x20: 0000000000000000\n[  142.493123] x19: ffff801729a50000 x18: 0000000000000000\n[  142.498413] x17: 0000000000000000 x16: 0000000000000001\n[  142.503709] x15: 00000000000000ff x14: ffff7fe000000000\n[  142.509003] x13: ffff8017dcde09a0 x12: 0000000000000000\n[  142.514308] x11: 0000000000000001 x10: 0000000000000008\n[  142.519597] x9 : ffff8017dcde09a0 x8 : 0000000000002000\n[  142.524889] x7 : ffff8017dcde0a00 x6 : 000000015388f9be\n[  142.530187] x5 : 0000000000000001 x4 : 0000000000000000\n[  142.535478] x3 : 0000000000000000 x2 : 0000000000000000\n[  142.540777] x1 : 0000000000000001 x0 : ffff00001041b194\n[  142.546071] Process fio (pid: 1983, stack limit = 0x000000006460a0ea)\n[  142.552500] Call trace:\n[  142.554926]  __blk_mq_free_request+0x4c/0xa8\n[  142.559181]  blk_mq_free_request+0xec/0x118\n[  142.563352]  blk_mq_end_request+0xfc/0x120\n[  142.567444]  end_cmd+0x3c/0xa8 [null_blk]\n[  142.571434]  null_complete_rq+0x20/0x30 [null_blk]\n[  142.576194]  blk_mq_complete_request+0x108/0x148\n[  142.580797]  null_handle_cmd+0x1d4/0x718 [null_blk]\n[  142.585662]  null_queue_rq+0x60/0xa8 [null_blk]\n[  142.590171]  blk_mq_try_issue_directly+0x148/0x280\n[  142.594949]  blk_mq_try_issue_list_directly+0x9c/0x108\n[  142.600064]  blk_mq_sched_insert_requests+0xb0/0xd0\n[  142.604926]  blk_mq_flush_plug_list+0x16c/0x2a0\n[  142.609441]  blk_flush_plug_list+0xec/0x118\n[  142.613608]  blk_finish_plug+0x3c/0x4c\n[  142.617348]  blkdev_direct_IO+0x3b4/0x428\n[  142.621336]  generic_file_read_iter+0x84/0x180\n[  142.625761]  blkdev_read_iter+0x50/0x78\n[  142.629579]  aio_read.isra.6+0xf8/0x190\n[  142.633409]  __io_submit_one.isra.8+0x148/0x738\n[  142.637912]  io_submit_one.isra.9+0x88/0xb8\n[  142.642078]  __arm64_sys_io_submit+0xe0/0x238\n[  142.646428]  el0_svc_handler+0xa0/0x128\n[  142.650238]  el0_svc+0x8/0xc\n[  142.653104] Code: b9402a63 f9000a7f 3100047f 540000a0 (f9419a81)\n[  142.659202] ---[ end trace 467586bc175eb09d ]---\n\nFixes: ea86ea2cdced20057da (\"sbitmap: ammortize cost of clearing bits\")\nReported-and-bisected_and_tested-by: Yi Zhang <yi.zhang@redhat.com>\nCc: Yi Zhang <yi.zhang@redhat.com>\nCc: \"jianchao.wang\" <jianchao.w.wang@oracle.com>\nReviewed-by: Omar Sandoval <osandov@fb.com>\nSigned-off-by: Ming Lei <ming.lei@redhat.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "lib/sbitmap.c||lisbitmap.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/sbitmap.c||lisbitmap.c": [
          "File: lib/sbitmap.c -> lisbitmap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "591: void sbitmap_queue_clear(struct sbitmap_queue *sbq, unsigned int nr,",
          "592:     unsigned int cpu)",
          "593: {",
          "594:  sbitmap_deferred_clear_bit(&sbq->sb, nr);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6124d6ba697413efc53ff6919b1e0c250f1902a",
      "candidate_info": {
        "commit_hash": "d6124d6ba697413efc53ff6919b1e0c250f1902a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/d6124d6ba697413efc53ff6919b1e0c250f1902a",
        "files": [
          "net/sched/act_police.c",
          "tools/testing/selftests/tc-testing/tc-tests/actions/police.json"
        ],
        "message": "net/sched: act_police: validate the control action inside init()\n\nthe following script:\n\n # tc qdisc add dev crash0 clsact\n # tc filter add dev crash0 egress matchall \\\n > action police rate 3mbit burst 250k pass index 90\n # tc actions replace action police \\\n > rate 3mbit burst 250k goto chain 42 index 90 cookie c1a0c1a0\n # tc actions show action police rate 3mbit burst\n\nhad the following output:\n\n Error: Failed to init TC action chain.\n We have an error talking to the kernel\n total acts 1\n\n         action order 0:  police 0x5a rate 3Mbit burst 250Kb mtu 2Kb  action goto chain 42 overhead 0b\n         ref 2 bind 1\n         cookie c1a0c1a0\n\nThen, when crash0 starts transmitting more than 3Mbit/s, the following\nkernel crash is observed:\n\n BUG: unable to handle kernel NULL pointer dereference at 0000000000000000\n #PF error: [normal kernel read fault]\n PGD 800000007a779067 P4D 800000007a779067 PUD 2ad96067 PMD 0\n Oops: 0000 [#1] SMP PTI\n CPU: 3 PID: 5032 Comm: netperf Not tainted 5.0.0-rc4.gotochain_crash+ #533\n Hardware name: Red Hat KVM, BIOS 0.5.1 01/01/2011\n RIP: 0010:tcf_action_exec+0xb8/0x100\n Code: 00 00 00 20 74 1d 83 f8 03 75 09 49 83 c4 08 4d 39 ec 75 bc 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3 49 8b 97 a8 00 00 00 <48> 8b 12 48 89 55 00 48 83 c4 10 5b 5d 41 5c 41 5d 41 5e 41 5f c3\n RSP: 0018:ffffb0e04064fa60 EFLAGS: 00010246\n RAX: 000000002000002a RBX: ffff93bb3322cce0 RCX: 0000000000000005\n RDX: 0000000000000000 RSI: 0000000000000000 RDI: ffff93bb3322cce0\n RBP: ffffb0e04064fb00 R08: 0000000000000022 R09: 0000000000000000\n R10: 0000000000000000 R11: 0000000000000001 R12: ffff93bb3beed300\n R13: ffff93bb3beed308 R14: 0000000000000001 R15: ffff93bb3b64d000\n FS:  00007f0bc6be5740(0000) GS:ffff93bb3db80000(0000) knlGS:0000000000000000\n CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n CR2: 0000000000000000 CR3: 00000000746a8001 CR4: 00000000001606e0\n Call Trace:\n  tcf_classify+0x58/0x120\n  __dev_queue_xmit+0x40a/0x890\n  ? ipt_do_table+0x31c/0x420 [ip_tables]\n  ? ip_finish_output2+0x16f/0x430\n  ip_finish_output2+0x16f/0x430\n  ? ip_output+0x69/0xe0\n  ip_output+0x69/0xe0\n  ? ip_forward_options+0x1a0/0x1a0\n  __tcp_transmit_skb+0x563/0xa40\n  tcp_write_xmit+0x243/0xfa0\n  __tcp_push_pending_frames+0x32/0xf0\n  tcp_sendmsg_locked+0x404/0xd30\n  tcp_sendmsg+0x27/0x40\n  sock_sendmsg+0x36/0x40\n  __sys_sendto+0x10e/0x140\n  ? __sys_connect+0x87/0xf0\n  ? syscall_trace_enter+0x1df/0x2e0\n  ? __audit_syscall_exit+0x216/0x260\n  __x64_sys_sendto+0x24/0x30\n  do_syscall_64+0x5b/0x180\n  entry_SYSCALL_64_after_hwframe+0x44/0xa9\n RIP: 0033:0x7f0bc5ffbafd\n Code: 89 01 48 83 c8 ff c3 66 0f 1f 44 00 00 8b 05 ae c4 2c 00 85 c0 75 2d 45 31 c9 45 31 c0 4c 63 d1 48 63 ff b8 2c 00 00 00 0f 05 <48> 3d 00 f0 ff ff 77 01 c3 48 8b 15 63 63 2c 00 f7 d8 64 89 02 48\n RSP: 002b:00007fffef94b7f8 EFLAGS: 00000246 ORIG_RAX: 000000000000002c\n RAX: ffffffffffffffda RBX: 0000000000004000 RCX: 00007f0bc5ffbafd\n RDX: 0000000000004000 RSI: 00000000017e5420 RDI: 0000000000000004\n RBP: 0000000000000000 R08: 0000000000000000 R09: 0000000000000000\n R10: 0000000000000000 R11: 0000000000000246 R12: 0000000000000004\n R13: 00000000017e51d0 R14: 0000000000000010 R15: 0000000000000006\n Modules linked in: act_police veth ip6table_filter ip6_tables iptable_filter binfmt_misc ext4 snd_hda_codec_generic mbcache crct10dif_pclmul jbd2 crc32_pclmul ghash_clmulni_intel snd_hda_intel snd_hda_codec snd_hwdep snd_hda_core snd_seq snd_seq_device snd_pcm aesni_intel crypto_simd cryptd glue_helper snd_timer snd joydev pcspkr virtio_balloon soundcore i2c_piix4 nfsd auth_rpcgss nfs_acl lockd grace sunrpc ip_tables xfs ata_generic pata_acpi qxl drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops ttm drm virtio_blk virtio_net virtio_console net_failover failover crc32c_intel ata_piix libata serio_raw virtio_pci virtio_ring virtio floppy dm_mirror dm_region_hash dm_log dm_mod\n CR2: 0000000000000000\n\nValidating the control action within tcf_police_init() proved to fix the\nabove issue. A TDC selftest is added to verify the correct behavior.\n\nFixes: db50514f9a9c (\"net: sched: add termination action to allow goto chain\")\nFixes: 97763dc0f401 (\"net_sched: reject unknown tcfa_action values\")\nSigned-off-by: Davide Caratti <dcaratti@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/sched/act_police.c||net/sched/act_police.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/sched/act_police.c||net/sched/act_police.c": [
          "File: net/sched/act_police.c -> net/sched/act_police.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <linux/slab.h>",
          "22: #include <net/act_api.h>",
          "23: #include <net/netlink.h>",
          "25: struct tcf_police_params {",
          "26:  int   tcfp_result;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <net/pkt_cls.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "88: {",
          "89:  int ret = 0, tcfp_result = TC_ACT_OK, err, size;",
          "90:  struct nlattr *tb[TCA_POLICE_MAX + 1];",
          "91:  struct tc_police *parm;",
          "92:  struct tcf_police *police;",
          "93:  struct qdisc_rate_table *R_tab = NULL, *P_tab = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:  struct tcf_chain *goto_ch = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:   tcf_idr_release(*a, bind);",
          "130:   return -EEXIST;",
          "131:  }",
          "133:  police = to_police(*a);",
          "134:  if (parm->rate.rate) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:  err = tcf_action_check_ctrlact(parm->action, tp, &goto_ch, extack);",
          "135:  if (err < 0)",
          "136:   goto release_idr;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "214:  if (new->peak_present)",
          "215:   police->tcfp_ptoks = new->tcfp_mtu_ptoks;",
          "216:  spin_unlock_bh(&police->tcfp_lock);",
          "218:  rcu_swap_protected(police->params,",
          "219:       new,",
          "220:       lockdep_is_held(&police->tcf_lock));",
          "221:  spin_unlock_bh(&police->tcf_lock);",
          "223:  if (new)",
          "224:   kfree_rcu(new, rcu);",
          "",
          "[Removed Lines]",
          "217:  police->tcf_action = parm->action;",
          "",
          "[Added Lines]",
          "222:  goto_ch = tcf_action_set_ctrlact(*a, parm->action, goto_ch);",
          "228:  if (goto_ch)",
          "229:   tcf_chain_put_by_act(goto_ch);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "230: failure:",
          "231:  qdisc_put_rtab(P_tab);",
          "232:  qdisc_put_rtab(R_tab);",
          "233:  tcf_idr_release(*a, bind);",
          "234:  return err;",
          "235: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240:  if (goto_ch)",
          "241:   tcf_chain_put_by_act(goto_ch);",
          "242: release_idr:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee6df5694a9a2e30566ae05e9c145a0f6d5e087f",
      "candidate_info": {
        "commit_hash": "ee6df5694a9a2e30566ae05e9c145a0f6d5e087f",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/ee6df5694a9a2e30566ae05e9c145a0f6d5e087f",
        "files": [
          "drivers/gpu/drm/i915/i915_debugfs.c"
        ],
        "message": "drm/i915: Always backoff after a drm_modeset_lock() deadlock\n\nIf drm_modeset_lock() reports a deadlock it sets the ctx->contexted\nfield and insists that the caller calls drm_modeset_backoff() or else it\ngenerates a WARN on cleanup.\n\n<4> [1601.870376] WARNING: CPU: 3 PID: 8445 at drivers/gpu/drm/drm_modeset_lock.c:228 drm_modeset_drop_locks+0x35/0x40\n<4> [1601.870395] Modules linked in: vgem snd_hda_codec_hdmi snd_hda_codec_realtek snd_hda_codec_generic x86_pkg_temp_thermal i915 coretemp crct10dif_pclmul\n<6> [1601.870403] Console: switching\n<4> [1601.870403]  snd_hda_intel\n<4> [1601.870406] to colour frame buffer device 320x90\n<4> [1601.870406]  crc32_pclmul snd_hda_codec snd_hwdep ghash_clmulni_intel e1000e snd_hda_core cdc_ether ptp usbnet mii pps_core snd_pcm i2c_i801 mei_me mei prime_numbers\n<4> [1601.870422] CPU: 3 PID: 8445 Comm: cat Tainted: G     U            5.0.0-rc7-CI-CI_DRM_5650+ #1\n<4> [1601.870424] Hardware name: Intel Corporation Ice Lake Client Platform/IceLake U DDR4 SODIMM PD RVP TLC, BIOS ICLSFWR1.R00.2402.AD3.1810170014 10/17/2018\n<4> [1601.870427] RIP: 0010:drm_modeset_drop_locks+0x35/0x40\n<4> [1601.870430] Code: 29 48 8b 43 60 48 8d 6b 60 48 39 c5 74 19 48 8b 43 60 48 8d b8 70 ff ff ff e8 87 ff ff ff 48 8b 43 60 48 39 c5 75 e7 5b 5d c3 <0f> 0b eb d3 0f 1f 80 00 00 00 00 41 56 41 55 41 54 55 53 48 8b 6f\n<4> [1601.870432] RSP: 0018:ffffc90000d67ce8 EFLAGS: 00010282\n<4> [1601.870435] RAX: 00000000ffffffdd RBX: ffffc90000d67d00 RCX: 5dbbe23d00000000\n<4> [1601.870437] RDX: 0000000000000000 RSI: 0000000093e6194a RDI: ffffc90000d67d00\n<4> [1601.870439] RBP: ffff88849e62e678 R08: 0000000003b7329a R09: 0000000000000001\n<4> [1601.870441] R10: 0000000000000000 R11: 0000000000000000 R12: ffff888492100410\n<4> [1601.870442] R13: ffff88849ea50958 R14: ffff8884a67eb028 R15: ffff8884a67eb028\n<4> [1601.870445] FS:  00007fa7a27745c0(0000) GS:ffff8884aff80000(0000) knlGS:0000000000000000\n<4> [1601.870447] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n<4> [1601.870449] CR2: 000055af07e66000 CR3: 00000004a8cc2006 CR4: 0000000000760ee0\n<4> [1601.870451] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n<4> [1601.870453] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n<4> [1601.870454] PKRU: 55555554\n<4> [1601.870456] Call Trace:\n<4> [1601.870505]  i915_dsc_fec_support_show+0x91/0x190 [i915]\n<4> [1601.870522]  seq_read+0xdb/0x3c0\n<4> [1601.870531]  full_proxy_read+0x51/0x80\n<4> [1601.870538]  __vfs_read+0x31/0x190\n<4> [1601.870546]  ? __se_sys_newfstat+0x3c/0x60\n<4> [1601.870552]  vfs_read+0x9e/0x150\n<4> [1601.870557]  ksys_read+0x50/0xc0\n<4> [1601.870564]  do_syscall_64+0x55/0x190\n<4> [1601.870569]  entry_SYSCALL_64_after_hwframe+0x49/0xbe\n<4> [1601.870572] RIP: 0033:0x7fa7a226d081\n<4> [1601.870574] Code: fe ff ff 48 8d 3d 67 9c 0a 00 48 83 ec 08 e8 a6 4c 02 00 66 0f 1f 44 00 00 48 8d 05 81 08 2e 00 8b 00 85 c0 75 13 31 c0 0f 05 <48> 3d 00 f0 ff ff 77 57 f3 c3 0f 1f 44 00 00 41 54 55 49 89 d4 53\n<4> [1601.870576] RSP: 002b:00007ffcc05140c8 EFLAGS: 00000246 ORIG_RAX: 0000000000000000\n<4> [1601.870579] RAX: ffffffffffffffda RBX: 0000000000020000 RCX: 00007fa7a226d081\n<4> [1601.870581] RDX: 0000000000020000 RSI: 000055af07e63000 RDI: 0000000000000007\n<4> [1601.870583] RBP: 0000000000020000 R08: 000000000000007b R09: 0000000000000000\n<4> [1601.870585] R10: 000055af07e60010 R11: 0000000000000246 R12: 000055af07e63000\n<4> [1601.870587] R13: 0000000000000007 R14: 000055af07e634bf R15: 0000000000020000\n\nBugzilla: https://bugs.freedesktop.org/show_bug.cgi?id=109745\nFixes: e845f099f1c6 (\"drm/i915/dsc: Add Per connector debugfs node for DSC support/enable\")\nSigned-off-by: Chris Wilson <chris@chris-wilson.co.uk>\nCc: Rodrigo Vivi <rodrigo.vivi@intel.com>\nCc: Ville Syrjala <ville.syrjala@linux.intel.com>\nCc: Anusha Srivatsa <anusha.srivatsa@intel.com>\nCc: Lyude Paul <lyude@redhat.com>\nCc: Manasi Navare <manasi.d.navare@intel.com>\nReviewed-by: Manasi Navare <manasi.d.navare@intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20190329165152.29259-1-chris@chris-wilson.co.uk",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/i915_debugfs.c||drivers/gpu/drm/i915/i915_debugfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/i915_debugfs.c||drivers/gpu/drm/i915/i915_debugfs.c": [
          "File: drivers/gpu/drm/i915/i915_debugfs.c -> drivers/gpu/drm/i915/i915_debugfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4787:   ret = drm_modeset_lock(&dev->mode_config.connection_mutex,",
          "4788:            &ctx);",
          "4789:   if (ret) {",
          "4791:    break;",
          "4792:   }",
          "4793:   crtc = connector->state->crtc;",
          "",
          "[Removed Lines]",
          "4790:    ret = -EINTR;",
          "",
          "[Added Lines]",
          "4790:    if (ret == -EDEADLK && !drm_modeset_backoff(&ctx)) {",
          "4791:     try_again = true;",
          "4792:     continue;",
          "4793:    }",
          "",
          "---------------"
        ]
      }
    }
  ]
}