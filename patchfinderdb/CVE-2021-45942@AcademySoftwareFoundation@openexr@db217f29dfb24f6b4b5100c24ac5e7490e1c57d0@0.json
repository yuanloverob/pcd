{
  "cve_id": "CVE-2021-45942",
  "cve_desc": "OpenEXR 3.1.x before 3.1.4 has a heap-based buffer overflow in Imf_3_1::LineCompositeTask::execute (called from IlmThread_3_1::NullThreadPoolProvider::addTask and IlmThread_3_1::ThreadPool::addGlobalTask). NOTE: db217f2 may be inapplicable.",
  "repo": "AcademySoftwareFoundation/openexr",
  "patch_hash": "db217f29dfb24f6b4b5100c24ac5e7490e1c57d0",
  "patch_info": {
    "commit_hash": "db217f29dfb24f6b4b5100c24ac5e7490e1c57d0",
    "repo": "AcademySoftwareFoundation/openexr",
    "commit_url": "https://github.com/AcademySoftwareFoundation/openexr/commit/db217f29dfb24f6b4b5100c24ac5e7490e1c57d0",
    "files": [
      "src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp"
    ],
    "message": "DeepScanlineInputFile now uses chunk size test from DeepTiledInputFile (#1205)\n\nSigned-off-by: Peter Hillman <peterh@wetafx.co.nz>",
    "before_after_code_files": [
      "src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp||src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp"
    ]
  },
  "patch_diff": {
    "src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp||src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp": [
      "File: src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp -> src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1966:     {",
      "1971:     }",
      "1972:     streamData->is->read(data->sampleCountTableBuffer, static_cast<int>(sampleCountTableDataSize));",
      "1974:     const char* readPtr;",
      "",
      "[Removed Lines]",
      "1964:     int compressorMaxDataSize = std::numeric_limits<int>::max();",
      "1965:     if (sampleCountTableDataSize > uint64_t(compressorMaxDataSize))",
      "1967:         THROW (IEX_NAMESPACE::ArgExc, \"This version of the library does not \"",
      "1968:               << \"support the allocation of data with size  > \"",
      "1969:               << compressorMaxDataSize",
      "1970:               << \" file table size    :\" << sampleCountTableDataSize << \".\\n\");",
      "",
      "[Added Lines]",
      "1964:     uint64_t compressorMaxDataSize = static_cast<uint64_t>(std::numeric_limits<int>::max());",
      "1965:     if (packedDataSize         > compressorMaxDataSize ||",
      "1966:         unpackedDataSize > compressorMaxDataSize ||",
      "1967:         sampleCountTableDataSize        > compressorMaxDataSize)",
      "1969:         THROW (IEX_NAMESPACE::ArgExc, \"This version of the library does not\"",
      "1970:             << \"support the allocation of data with size  > \"",
      "1971:             << compressorMaxDataSize",
      "1972:             << \" file table size    :\" << sampleCountTableDataSize",
      "1973:             << \" file unpacked size :\" << unpackedDataSize",
      "1974:             << \" file packed size   :\" << packedDataSize << \".\\n\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2a9380544b13e401eb7687c4085a9bb24188b1b3",
      "candidate_info": {
        "commit_hash": "2a9380544b13e401eb7687c4085a9bb24188b1b3",
        "repo": "AcademySoftwareFoundation/openexr",
        "commit_url": "https://github.com/AcademySoftwareFoundation/openexr/commit/2a9380544b13e401eb7687c4085a9bb24188b1b3",
        "files": [
          "src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp"
        ],
        "message": "DeepScanlineInputFile now uses chunk size test from DeepTiledInputFile (#1205)\n\nSigned-off-by: Peter Hillman <peterh@wetafx.co.nz>",
        "before_after_code_files": [
          "src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp||src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp||src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp"
          ],
          "candidate": [
            "src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp||src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp||src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp": [
          "File: src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp -> src/lib/OpenEXR/ImfDeepScanLineInputFile.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1966:     {",
          "1971:     }",
          "1972:     streamData->is->read(data->sampleCountTableBuffer, static_cast<int>(sampleCountTableDataSize));",
          "1974:     const char* readPtr;",
          "",
          "[Removed Lines]",
          "1964:     int compressorMaxDataSize = std::numeric_limits<int>::max();",
          "1965:     if (sampleCountTableDataSize > uint64_t(compressorMaxDataSize))",
          "1967:         THROW (IEX_NAMESPACE::ArgExc, \"This version of the library does not \"",
          "1968:               << \"support the allocation of data with size  > \"",
          "1969:               << compressorMaxDataSize",
          "1970:               << \" file table size    :\" << sampleCountTableDataSize << \".\\n\");",
          "",
          "[Added Lines]",
          "1964:     uint64_t compressorMaxDataSize = static_cast<uint64_t>(std::numeric_limits<int>::max());",
          "1965:     if (packedDataSize         > compressorMaxDataSize ||",
          "1966:         unpackedDataSize > compressorMaxDataSize ||",
          "1967:         sampleCountTableDataSize        > compressorMaxDataSize)",
          "1969:         THROW (IEX_NAMESPACE::ArgExc, \"This version of the library does not\"",
          "1970:             << \"support the allocation of data with size  > \"",
          "1971:             << compressorMaxDataSize",
          "1972:             << \" file table size    :\" << sampleCountTableDataSize",
          "1973:             << \" file unpacked size :\" << unpackedDataSize",
          "1974:             << \" file packed size   :\" << packedDataSize << \".\\n\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}