{
  "cve_id": "CVE-2012-2673",
  "cve_desc": "Multiple integer overflows in the (1) GC_generic_malloc and (2) calloc functions in malloc.c, and the (3) GC_generic_malloc_ignore_off_page function in mallocx.c in Boehm-Demers-Weiser GC (libgc) before 7.2 make it easier for context-dependent attackers to perform memory-related attacks such as buffer overflows via a large size value, which causes less memory to be allocated than expected.",
  "repo": "ivmai/bdwgc",
  "patch_hash": "6a93f8e5bcad22137f41b6c60a1c7384baaec2b3",
  "patch_info": {
    "commit_hash": "6a93f8e5bcad22137f41b6c60a1c7384baaec2b3",
    "repo": "ivmai/bdwgc",
    "commit_url": "https://github.com/ivmai/bdwgc/commit/6a93f8e5bcad22137f41b6c60a1c7384baaec2b3",
    "files": [
      "malloc.c"
    ],
    "message": "Fix calloc-related code to prevent SIZE_MAX redefinition in sys headers\n\n* malloc.c: Include limits.h for SIZE_MAX.\n* malloc.c (SIZE_MAX, calloc): Define GC_SIZE_MAX instead of SIZE_MAX.",
    "before_after_code_files": [
      "malloc.c||malloc.c"
    ]
  },
  "patch_diff": {
    "malloc.c||malloc.c": [
      "File: malloc.c -> malloc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "374:   }",
      "379: #endif",
      "380: void * calloc(size_t n, size_t lb)",
      "381: {",
      "383:       return NULL;",
      "",
      "[Removed Lines]",
      "377: #ifndef SIZE_MAX",
      "378: #define SIZE_MAX (~(size_t)0)",
      "382:     if (lb && n > SIZE_MAX / lb)",
      "",
      "[Added Lines]",
      "377: #include <limits.h>",
      "378: #ifdef SIZE_MAX",
      "379: # define GC_SIZE_MAX SIZE_MAX",
      "380: #else",
      "381: # define GC_SIZE_MAX (~(size_t)0)",
      "386:     if (lb && n > GC_SIZE_MAX / lb)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e10c1eb9908c2774c16b3148b30d2f3823d66a9a",
      "candidate_info": {
        "commit_hash": "e10c1eb9908c2774c16b3148b30d2f3823d66a9a",
        "repo": "ivmai/bdwgc",
        "commit_url": "https://github.com/ivmai/bdwgc/commit/e10c1eb9908c2774c16b3148b30d2f3823d66a9a",
        "files": [
          "malloc.c"
        ],
        "message": "Fix calloc() overflow\n\n* malloc.c (calloc): Check multiplication overflow in calloc(),\nassuming REDIRECT_MALLOC.",
        "before_after_code_files": [
          "malloc.c||malloc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "malloc.c||malloc.c"
          ],
          "candidate": [
            "malloc.c||malloc.c"
          ]
        }
      },
      "candidate_diff": {
        "malloc.c||malloc.c": [
          "File: malloc.c -> malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "372:   }",
          "375: void * calloc(size_t n, size_t lb)",
          "376: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "375: #ifndef SIZE_MAX",
          "376: #define SIZE_MAX (~(size_t)0)",
          "377: #endif",
          "380:     if (lb && n > SIZE_MAX / lb)",
          "381:       return NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "83231d0ab5ed60015797c3d1ad9056295ac3b2bb",
      "candidate_info": {
        "commit_hash": "83231d0ab5ed60015797c3d1ad9056295ac3b2bb",
        "repo": "ivmai/bdwgc",
        "commit_url": "https://github.com/ivmai/bdwgc/commit/83231d0ab5ed60015797c3d1ad9056295ac3b2bb",
        "files": [
          "malloc.c"
        ],
        "message": "Speedup calloc size overflow check by preventing division if small values\n\n* malloc.c (GC_SQRT_SIZE_MAX): New macro.\n* malloc.c (calloc): Add fast initial size overflow check to avoid\ninteger division for reasonably small values passed.",
        "before_after_code_files": [
          "malloc.c||malloc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "malloc.c||malloc.c"
          ],
          "candidate": [
            "malloc.c||malloc.c"
          ]
        }
      },
      "candidate_diff": {
        "malloc.c||malloc.c": [
          "File: malloc.c -> malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "381: # define GC_SIZE_MAX (~(size_t)0)",
          "382: #endif",
          "384: void * calloc(size_t n, size_t lb)",
          "385: {",
          "387:       return NULL;",
          "",
          "[Removed Lines]",
          "386:     if (lb && n > GC_SIZE_MAX / lb)",
          "",
          "[Added Lines]",
          "384: #define GC_SQRT_SIZE_MAX ((1U << (WORDSZ / 2)) - 1)",
          "389:         && lb && n > GC_SIZE_MAX / lb)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d84a74457c8e60f553e0b24ae4bfef3bc7752884",
      "candidate_info": {
        "commit_hash": "d84a74457c8e60f553e0b24ae4bfef3bc7752884",
        "repo": "ivmai/bdwgc",
        "commit_url": "https://github.com/ivmai/bdwgc/commit/d84a74457c8e60f553e0b24ae4bfef3bc7752884",
        "files": [
          "malloc.c"
        ],
        "message": "Fix calloc-related code to prevent SIZE_MAX redefinition in sys headers\n\n* malloc.c: Include limits.h for SIZE_MAX.\n* malloc.c (SIZE_MAX, calloc): Define GC_SIZE_MAX instead of SIZE_MAX.",
        "before_after_code_files": [
          "malloc.c||malloc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "malloc.c||malloc.c"
          ],
          "candidate": [
            "malloc.c||malloc.c"
          ]
        }
      },
      "candidate_diff": {
        "malloc.c||malloc.c": [
          "File: malloc.c -> malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "371:   }",
          "376: #endif",
          "377: void * calloc(size_t n, size_t lb)",
          "378: {",
          "380:       return NULL;",
          "",
          "[Removed Lines]",
          "374: #ifndef SIZE_MAX",
          "375: #define SIZE_MAX (~(size_t)0)",
          "379:     if (lb && n > SIZE_MAX / lb)",
          "",
          "[Added Lines]",
          "374: #include <limits.h>",
          "375: #ifdef SIZE_MAX",
          "376: # define GC_SIZE_MAX SIZE_MAX",
          "377: #else",
          "378: # define GC_SIZE_MAX (~(size_t)0)",
          "383:     if (lb && n > GC_SIZE_MAX / lb)",
          "",
          "---------------"
        ]
      }
    }
  ]
}