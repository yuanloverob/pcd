{
  "cve_id": "CVE-2021-32791",
  "cve_desc": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In mod_auth_openidc before version 2.4.9, the AES GCM encryption in mod_auth_openidc uses a static IV and AAD. It is important to fix because this creates a static nonce and since aes-gcm is a stream cipher, this can lead to known cryptographic issues, since the same key is being reused. From 2.4.9 onwards this has been patched to use dynamic values through usage of cjose AES encryption routines.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "375407c16c61a70b56fdbe13b0d2c8f11398e92c",
  "patch_info": {
    "commit_hash": "375407c16c61a70b56fdbe13b0d2c8f11398e92c",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/375407c16c61a70b56fdbe13b0d2c8f11398e92c",
    "files": [
      ".gitignore",
      "ChangeLog",
      "Dockerfile",
      "configure.ac",
      "openidc.conf",
      "src/cache/common.c",
      "test/mod_auth_openidc.jmx"
    ],
    "message": "use encrypted JWTs for storing encrypted cache contents\n\n- avoid using static AAD/IV; thanks @niebardzo\n- bump to 2.4.9-dev\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "configure.ac||configure.ac",
      "openidc.conf||openidc.conf",
      "src/cache/common.c||src/cache/common.c",
      "test/mod_auth_openidc.jmx||test/mod_auth_openidc.jmx"
    ]
  },
  "patch_diff": {
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.8.4],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9-dev],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "openidc.conf||openidc.conf": [
      "File: openidc.conf -> openidc.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "25: OIDCInfoHook iat access_token access_token_expires id_token userinfo refresh_token session",
      "27: <Location /protected>",
      "28:   AuthType openid-connect",
      "29:   Require valid-user",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "27: OIDCScope \"openid email profile\"",
      "",
      "---------------"
    ],
    "src/cache/common.c||src/cache/common.c": [
      "File: src/cache/common.c -> src/cache/common.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "244:  return rv;",
      "245: }",
      "477: }",
      "553: }",
      "560:  char *input = apr_psprintf(r->pool, \"%s:%s\", passphrase, key);",
      "561:  char *output = NULL;",
      "566:   return NULL;",
      "567:  }",
      "568:  return output;",
      "",
      "[Removed Lines]",
      "247: #define oidc_cache_crypto_openssl_error(r, fmt, ...) \\",
      "248:   oidc_error(r, \"%s: %s\", apr_psprintf(r->pool, fmt, ##__VA_ARGS__), ERR_error_string(ERR_get_error(), NULL))",
      "250: #define OIDC_CACHE_CIPHER       EVP_aes_256_gcm()",
      "251: #define OIDC_CACHE_TAG_LEN       16",
      "253: #if (OPENSSL_VERSION_NUMBER >= 0x10100005L && !defined(LIBRESSL_VERSION_NUMBER))",
      "254: #define OIDC_CACHE_CRYPTO_GET_TAG     EVP_CTRL_AEAD_GET_TAG",
      "255: #define OIDC_CACHE_CRYPTO_SET_TAG     EVP_CTRL_AEAD_SET_TAG",
      "256: #define OIDC_CACHE_CRYPTO_SET_IVLEN     EVP_CTRL_AEAD_SET_IVLEN",
      "257: #else",
      "258: #define OIDC_CACHE_CRYPTO_GET_TAG     EVP_CTRL_GCM_GET_TAG",
      "259: #define OIDC_CACHE_CRYPTO_SET_TAG     EVP_CTRL_GCM_SET_TAG",
      "260: #define OIDC_CACHE_CRYPTO_SET_IVLEN     EVP_CTRL_GCM_SET_IVLEN",
      "261: #endif",
      "266: static int oidc_cache_crypto_encrypt_impl(request_rec *r,",
      "267:   unsigned char *plaintext, int plaintext_len, const unsigned char *aad,",
      "268:   int aad_len, unsigned char *key, const unsigned char *iv, int iv_len,",
      "269:   unsigned char *ciphertext, const unsigned char *tag, int tag_len) {",
      "270:  EVP_CIPHER_CTX *ctx;",
      "272:  int len;",
      "274:  int ciphertext_len;",
      "277:  if (!(ctx = EVP_CIPHER_CTX_new())) {",
      "278:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_new\");",
      "279:   return -1;",
      "280:  }",
      "283:  if (!EVP_EncryptInit_ex(ctx, OIDC_CACHE_CIPHER, NULL, NULL, NULL)) {",
      "284:   oidc_cache_crypto_openssl_error(r, \"EVP_EncryptInit_ex\");",
      "285:   return -1;",
      "286:  }",
      "289:  if (!EVP_CIPHER_CTX_ctrl(ctx, OIDC_CACHE_CRYPTO_SET_IVLEN, iv_len, NULL)) {",
      "290:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_ctrl\");",
      "291:   return -1;",
      "292:  }",
      "295:  if (!EVP_EncryptInit_ex(ctx, NULL, NULL, key, iv)) {",
      "296:   oidc_cache_crypto_openssl_error(r, \"EVP_EncryptInit_ex\");",
      "297:   return -1;",
      "298:  }",
      "301:  if (!EVP_EncryptUpdate(ctx, NULL, &len, aad, aad_len)) {",
      "302:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptUpdate aad: aad_len=%d\",",
      "303:     aad_len);",
      "304:   return -1;",
      "305:  }",
      "308:  if (!EVP_EncryptUpdate(ctx, ciphertext, &len, plaintext, plaintext_len)) {",
      "309:   oidc_cache_crypto_openssl_error(r, \"EVP_EncryptUpdate ciphertext\");",
      "310:   return -1;",
      "311:  }",
      "312:  ciphertext_len = len;",
      "318:  if (!EVP_EncryptFinal_ex(ctx, ciphertext + len, &len)) {",
      "319:   oidc_cache_crypto_openssl_error(r, \"EVP_EncryptFinal_ex\");",
      "320:   return -1;",
      "321:  }",
      "322:  ciphertext_len += len;",
      "325:  if (!EVP_CIPHER_CTX_ctrl(ctx, OIDC_CACHE_CRYPTO_GET_TAG, tag_len,",
      "326:    (void *) tag)) {",
      "327:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_ctrl\");",
      "328:   return -1;",
      "329:  }",
      "332:  EVP_CIPHER_CTX_free(ctx);",
      "334:  return ciphertext_len;",
      "335: }",
      "340: static int oidc_cache_crypto_decrypt_impl(request_rec *r,",
      "341:   unsigned char *ciphertext, int ciphertext_len, const unsigned char *aad,",
      "342:   int aad_len, const unsigned char *tag, int tag_len, unsigned char *key,",
      "343:   const unsigned char *iv, int iv_len, unsigned char *plaintext) {",
      "344:  EVP_CIPHER_CTX *ctx;",
      "345:  int len;",
      "346:  int plaintext_len;",
      "347:  int ret;",
      "350:  if (!(ctx = EVP_CIPHER_CTX_new())) {",
      "351:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_new\");",
      "352:   return -1;",
      "353:  }",
      "356:  if (!EVP_DecryptInit_ex(ctx, OIDC_CACHE_CIPHER, NULL, NULL, NULL)) {",
      "357:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptInit_ex\");",
      "358:   return -1;",
      "359:  }",
      "362:  if (!EVP_CIPHER_CTX_ctrl(ctx, OIDC_CACHE_CRYPTO_SET_IVLEN, iv_len, NULL)) {",
      "363:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_ctrl\");",
      "364:   return -1;",
      "365:  }",
      "368:  if (!EVP_DecryptInit_ex(ctx, NULL, NULL, key, iv)) {",
      "369:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptInit_ex\");",
      "370:   return -1;",
      "371:  }",
      "374:  if (!EVP_DecryptUpdate(ctx, NULL, &len, aad, aad_len)) {",
      "375:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptUpdate aad: aad_len=%d\",",
      "376:     aad_len);",
      "377:   return -1;",
      "378:  }",
      "381:  if (!EVP_DecryptUpdate(ctx, plaintext, &len, ciphertext, ciphertext_len)) {",
      "382:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptUpdate ciphertext\");",
      "383:   return -1;",
      "384:  }",
      "385:  plaintext_len = len;",
      "388:  if (!EVP_CIPHER_CTX_ctrl(ctx, OIDC_CACHE_CRYPTO_SET_TAG, tag_len,",
      "389:    (void *) tag)) {",
      "390:   oidc_cache_crypto_openssl_error(r, \"EVP_CIPHER_CTX_ctrl\");",
      "391:   return -1;",
      "392:  }",
      "398:  ret = EVP_DecryptFinal_ex(ctx, plaintext + len, &len);",
      "401:  EVP_CIPHER_CTX_free(ctx);",
      "403:  if (ret > 0) {",
      "405:   plaintext_len += len;",
      "406:   return plaintext_len;",
      "407:  } else {",
      "409:   oidc_cache_crypto_openssl_error(r, \"EVP_DecryptFinal_ex\");",
      "410:   return -1;",
      "411:  }",
      "412: }",
      "417: static const unsigned char OIDC_CACHE_CRYPTO_GCM_AAD[] = { 0x4d, 0x23, 0xc3,",
      "418:   0xce, 0xc3, 0x34, 0xb4, 0x9b, 0xdb, 0x37, 0x0c, 0x43, 0x7f, 0xec, 0x78,",
      "419:   0xde };",
      "424: static const unsigned char OIDC_CACHE_CRYPTO_GCM_IV[] = { 0x00, 0x01, 0x02,",
      "425:   0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,",
      "426:   0x0f };",
      "431: static int oidc_cache_crypto_encrypt(request_rec *r, const char *plaintext,",
      "432:   unsigned char *key, char **result) {",
      "433:  char *encoded = NULL, *p = NULL, *e_tag = NULL;",
      "434:  unsigned char *ciphertext = NULL;",
      "435:  int plaintext_len, ciphertext_len, encoded_len, e_tag_len;",
      "436:  unsigned char tag[OIDC_CACHE_TAG_LEN];",
      "439:  plaintext_len = strlen(plaintext) + 1;",
      "440:  ciphertext = apr_pcalloc(r->pool,",
      "441:    (plaintext_len + EVP_CIPHER_block_size(OIDC_CACHE_CIPHER)));",
      "443:  ciphertext_len = oidc_cache_crypto_encrypt_impl(r,",
      "444:    (unsigned char *) plaintext, plaintext_len,",
      "445:    OIDC_CACHE_CRYPTO_GCM_AAD, sizeof(OIDC_CACHE_CRYPTO_GCM_AAD), key,",
      "446:    OIDC_CACHE_CRYPTO_GCM_IV, sizeof(OIDC_CACHE_CRYPTO_GCM_IV),",
      "447:    ciphertext, tag, sizeof(tag));",
      "450:  encoded_len = oidc_base64url_encode(r, &encoded, (const char *) ciphertext,",
      "451:    ciphertext_len, 1);",
      "452:  if (encoded_len > 0) {",
      "453:   p = encoded;",
      "456:   e_tag_len = oidc_base64url_encode(r, &e_tag, (const char *) tag,",
      "457:     OIDC_CACHE_TAG_LEN, 1);",
      "460:   encoded = apr_pcalloc(r->pool, encoded_len + 1 + e_tag_len + 1);",
      "461:   memcpy(encoded, p, encoded_len);",
      "462:   p = encoded + encoded_len;",
      "464:   p++;",
      "467:   memcpy(p, e_tag, e_tag_len);",
      "468:   encoded_len += e_tag_len + 1;",
      "471:   encoded[encoded_len] = '\\0';",
      "474:  }",
      "476:  return encoded_len;",
      "482: static int oidc_cache_crypto_decrypt(request_rec *r, const char *cache_value,",
      "483:   unsigned char *key, unsigned char **plaintext) {",
      "485:  int len = -1;",
      "488:  char *encoded_tag = strstr(cache_value, \".\");",
      "489:  if (encoded_tag == NULL) {",
      "490:   oidc_error(r,",
      "491:     \"corrupted cache value: no tag separator found in encrypted value\");",
      "492:   return FALSE;",
      "493:  }",
      "496:  cache_value = apr_pstrmemdup(r->pool, cache_value,",
      "497:    strlen(cache_value) - strlen(encoded_tag));",
      "498:  encoded_tag++;",
      "501:  char *d_bytes = NULL;",
      "502:  int d_len = oidc_base64url_decode(r->pool, &d_bytes, cache_value);",
      "505:  char *t_bytes = NULL;",
      "506:  int t_len = oidc_base64url_decode(r->pool, &t_bytes, encoded_tag);",
      "509:  if ((d_len > 0) && (t_len > 0)) {",
      "513:     (d_len + EVP_CIPHER_block_size(OIDC_CACHE_CIPHER) - 1));",
      "517:   len = oidc_cache_crypto_decrypt_impl(r, (unsigned char *) d_bytes,",
      "518:     d_len, OIDC_CACHE_CRYPTO_GCM_AAD,",
      "519:     sizeof(OIDC_CACHE_CRYPTO_GCM_AAD), (unsigned char *) t_bytes,",
      "520:     t_len, key, OIDC_CACHE_CRYPTO_GCM_IV,",
      "521:     sizeof(OIDC_CACHE_CRYPTO_GCM_IV), *plaintext);",
      "524:   if (len > -1) {",
      "525:    (*plaintext)[len] = '\\0';",
      "526:   } else {",
      "528:   }",
      "530:  }",
      "532:  return len;",
      "533: }",
      "538: static unsigned char *oidc_cache_hash_passphrase(request_rec *r,",
      "539:   const char *passphrase) {",
      "541:  unsigned char *key = NULL;",
      "542:  unsigned int key_len = 0;",
      "543:  oidc_jose_error_t err;",
      "545:  if (oidc_jose_hash_bytes(r->pool, OIDC_JOSE_ALG_SHA256,",
      "546:    (const unsigned char *) passphrase, strlen(passphrase), &key,",
      "547:    &key_len, &err) == FALSE) {",
      "548:   oidc_error(r, \"oidc_jose_hash_bytes returned an error: %s\", err.text);",
      "549:   return NULL;",
      "550:  }",
      "552:  return key;",
      "558: static char *oidc_cache_get_hashed_key(request_rec *r, const char *passphrase,",
      "559:   const char *key) {",
      "562:  if (oidc_util_hash_string_and_base64url_encode(r, OIDC_JOSE_ALG_SHA256,",
      "563:    input, &output) == FALSE) {",
      "564:   oidc_error(r,",
      "565:     \"oidc_util_hash_string_and_base64url_encode returned an error\");",
      "",
      "[Added Lines]",
      "247: #define OIDC_CACHE_CRYPTO_JSON_KEY \"c\"",
      "252: static apr_byte_t oidc_cache_crypto_encrypt(request_rec *r, const char *plaintext, const char *key,",
      "253:   char **result) {",
      "254:  apr_byte_t rv = FALSE;",
      "255:  json_t *json = NULL;",
      "257:  json = json_object();",
      "258:  json_object_set_new(json, OIDC_CACHE_CRYPTO_JSON_KEY, json_string(plaintext));",
      "260:  rv = oidc_util_jwt_create(r, (const char*) key, json, result);",
      "262:  if (json)",
      "263:   json_decref(json);",
      "265:  return rv;",
      "271: static apr_byte_t oidc_cache_crypto_decrypt(request_rec *r, const char *cache_value,",
      "272:   const char *key, char **plaintext) {",
      "274:  apr_byte_t rv = FALSE;",
      "275:  json_t *json = NULL;",
      "277:  rv = oidc_util_jwt_verify(r, (const char*) key, cache_value, &json);",
      "278:  if (rv == FALSE)",
      "279:   goto end;",
      "281:  rv = oidc_json_object_get_string(r->pool, json, OIDC_CACHE_CRYPTO_JSON_KEY, plaintext, NULL);",
      "283:  end:",
      "285:  if (json)",
      "286:   json_decref(json);",
      "288:  return rv;",
      "294: static char* oidc_cache_get_hashed_key(request_rec *r, const char *passphrase, const char *key) {",
      "297:  if (oidc_util_hash_string_and_base64url_encode(r, OIDC_JOSE_ALG_SHA256, input, &output)",
      "298:    == FALSE) {",
      "299:   oidc_error(r, \"oidc_util_hash_string_and_base64url_encode returned an error\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "604:   goto out;",
      "605:  }",
      "611: out:",
      "",
      "[Removed Lines]",
      "607:  rc = (oidc_cache_crypto_decrypt(r, cache_value,",
      "608:    oidc_cache_hash_passphrase(r, cfg->crypto_passphrase),",
      "609:    (unsigned char **) value) > 0);",
      "",
      "[Added Lines]",
      "341:  rc = oidc_cache_crypto_decrypt(r, cache_value, cfg->crypto_passphrase, value);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "650:    goto out;",
      "652:   if (value != NULL) {",
      "656:     goto out;",
      "657:    value = encoded;",
      "658:   }",
      "",
      "[Removed Lines]",
      "653:    if (oidc_cache_crypto_encrypt(r, value,",
      "654:      oidc_cache_hash_passphrase(r, cfg->crypto_passphrase),",
      "655:      &encoded) <= 0)",
      "",
      "[Added Lines]",
      "385:    if (oidc_cache_crypto_encrypt(r, value, cfg->crypto_passphrase, &encoded) == FALSE)",
      "",
      "---------------"
    ],
    "test/mod_auth_openidc.jmx||test/mod_auth_openidc.jmx": [
      "File: test/mod_auth_openidc.jmx -> test/mod_auth_openidc.jmx",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
      "3:   <hashTree>",
      "4:     <TestPlan guiclass=\"TestPlanGui\" testclass=\"TestPlan\" testname=\"OpenID Connect Apache Module Test Plan\" enabled=\"true\">",
      "5:       <stringProp name=\"TestPlan.comments\"></stringProp>",
      "",
      "[Removed Lines]",
      "2: <jmeterTestPlan version=\"1.2\" properties=\"3.1\" jmeter=\"3.1.20170220\">",
      "",
      "[Added Lines]",
      "2: <jmeterTestPlan version=\"1.2\" properties=\"5.0\" jmeter=\"5.1.1.20190725\">",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "7:       <boolProp name=\"TestPlan.serialize_threadgroups\">false</boolProp>",
      "8:       <elementProp name=\"TestPlan.user_defined_variables\" elementType=\"Arguments\" guiclass=\"ArgumentsPanel\" testclass=\"Arguments\" testname=\"User Defined Variables\" enabled=\"true\">",
      "9:         <collectionProp name=\"Arguments.arguments\">",
      "12:             <stringProp name=\"Argument.value\">localhost.zmartzone.eu</stringProp>",
      "13:             <stringProp name=\"Argument.metadata\">=</stringProp>",
      "14:           </elementProp>",
      "",
      "[Removed Lines]",
      "10:           <elementProp name=\"X_APP_SERVER\" elementType=\"Argument\">",
      "11:             <stringProp name=\"Argument.name\">X_APP_SERVER</stringProp>",
      "",
      "[Added Lines]",
      "10:           <elementProp name=\"APP_SERVER\" elementType=\"Argument\">",
      "11:             <stringProp name=\"Argument.name\">APP_SERVER</stringProp>",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "57:           </elementProp>",
      "58:           <elementProp name=\"APP_PATH_ACCESS\" elementType=\"Argument\">",
      "59:             <stringProp name=\"Argument.name\">APP_PATH_ACCESS</stringProp>",
      "61:             <stringProp name=\"Argument.metadata\">=</stringProp>",
      "62:           </elementProp>",
      "63:         </collectionProp>",
      "",
      "[Removed Lines]",
      "60:             <stringProp name=\"Argument.value\">/protected/api/index.php</stringProp>",
      "",
      "[Added Lines]",
      "60:             <stringProp name=\"Argument.value\">/api/index.php</stringProp>",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "94:           </elementProp>",
      "95:           <stringProp name=\"HTTPSampler.domain\">${APP_SERVER}</stringProp>",
      "96:           <stringProp name=\"HTTPSampler.port\">${APP_PORT}</stringProp>",
      "99:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "100:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "101:           <stringProp name=\"HTTPSampler.path\">${APP_PATH_USER}</stringProp>",
      "",
      "[Removed Lines]",
      "97:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "98:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "104:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "105:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "106:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "109:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "110:         </HTTPSamplerProxy>",
      "111:         <hashTree>",
      "112:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab AuthorizationRequestPath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "107:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "108:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "106:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "107:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "108:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "125:           </elementProp>",
      "126:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "127:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "130:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "131:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "132:           <stringProp name=\"HTTPSampler.path\">/${AuthorizationRequestPath}</stringProp>",
      "",
      "[Removed Lines]",
      "128:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "129:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "135:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "136:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "137:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "140:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "141:         </HTTPSamplerProxy>",
      "142:         <hashTree>",
      "143:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab AuthzResumePath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "138:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "139:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "136:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "137:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "138:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "164:           </elementProp>",
      "165:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "166:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "169:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "170:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "171:           <stringProp name=\"HTTPSampler.path\">${AuthzResumePath}</stringProp>",
      "",
      "[Removed Lines]",
      "167:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "168:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "174:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "175:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "176:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "179:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "180:         </HTTPSamplerProxy>",
      "181:         <hashTree>",
      "182:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab ResumeParam\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "177:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "178:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "174:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "175:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "176:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "226:           </elementProp>",
      "227:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "228:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "231:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "232:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "233:           <stringProp name=\"HTTPSampler.path\">/IdpSample/MainPage?cmd=login</stringProp>",
      "",
      "[Removed Lines]",
      "229:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "230:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "236:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "237:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "238:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "241:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "242:         </HTTPSamplerProxy>",
      "243:         <hashTree>",
      "244:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab ResumePath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "239:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "240:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "235:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "236:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "237:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "257:           </elementProp>",
      "258:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "259:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "262:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "263:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "264:           <stringProp name=\"HTTPSampler.path\">${ResumePath}</stringProp>",
      "",
      "[Removed Lines]",
      "260:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "261:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "267:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "268:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "269:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "272:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "273:         </HTTPSamplerProxy>",
      "274:         <hashTree>",
      "275:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab RedirectURIPath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "270:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "271:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "265:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "266:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "267:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "321:           </elementProp>",
      "322:           <stringProp name=\"HTTPSampler.domain\">${APP_SERVER}</stringProp>",
      "323:           <stringProp name=\"HTTPSampler.port\">${APP_PORT}</stringProp>",
      "326:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "327:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "328:           <stringProp name=\"HTTPSampler.path\">/${RedirectURIPath}</stringProp>",
      "",
      "[Removed Lines]",
      "324:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "325:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "331:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "332:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "333:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "336:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "337:         </HTTPSamplerProxy>",
      "338:         <hashTree>",
      "339:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab ApplicationPath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "334:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "335:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "328:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "329:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "330:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "367:           </elementProp>",
      "368:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "369:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "372:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "373:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "374:           <stringProp name=\"HTTPSampler.path\">${AuthzResumePath}</stringProp>",
      "",
      "[Removed Lines]",
      "370:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "371:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "377:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "378:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "379:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "382:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "383:         </HTTPSamplerProxy>",
      "384:         <hashTree>",
      "385:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab cSRFToken Parameter\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "380:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "381:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "373:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "374:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "375:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "441:           </elementProp>",
      "442:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "443:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "446:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "447:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "448:           <stringProp name=\"HTTPSampler.path\">${AuthzResumePath}</stringProp>",
      "",
      "[Removed Lines]",
      "444:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "445:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "451:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "452:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "453:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "456:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "457:         </HTTPSamplerProxy>",
      "458:         <hashTree>",
      "459:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab LocationPath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "454:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "455:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "446:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "447:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "448:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "472:           </elementProp>",
      "473:           <stringProp name=\"HTTPSampler.domain\">${APP_SERVER}</stringProp>",
      "474:           <stringProp name=\"HTTPSampler.port\">${APP_PORT}</stringProp>",
      "477:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "478:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "479:           <stringProp name=\"HTTPSampler.path\">/${LocationPath}</stringProp>",
      "",
      "[Removed Lines]",
      "475:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "476:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "482:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "483:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "484:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "487:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "488:         </HTTPSamplerProxy>",
      "489:         <hashTree>",
      "490:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab ApplicationPath\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "485:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "486:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "476:           <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "477:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "478:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "517:             </elementProp>",
      "518:             <stringProp name=\"HTTPSampler.domain\">${APP_SERVER}</stringProp>",
      "519:             <stringProp name=\"HTTPSampler.port\">${APP_PORT}</stringProp>",
      "522:             <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "523:             <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "524:             <stringProp name=\"HTTPSampler.path\">/${ApplicationPath}</stringProp>",
      "",
      "[Removed Lines]",
      "520:             <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "521:             <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "527:             <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "528:             <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "529:             <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "532:             <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "533:           </HTTPSamplerProxy>",
      "534:           <hashTree>",
      "535:             <ResponseAssertion guiclass=\"AssertionGui\" testclass=\"ResponseAssertion\" testname=\"Assert User Logged In\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "530:             <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "531:             <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "520:             <stringProp name=\"HTTPSampler.implementation\">HttpClient4</stringProp>",
      "521:             <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "522:             <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "539:               <stringProp name=\"Assertion.test_field\">Assertion.response_data</stringProp>",
      "540:               <boolProp name=\"Assertion.assume_success\">false</boolProp>",
      "541:               <intProp name=\"Assertion.test_type\">2</intProp>",
      "542:             </ResponseAssertion>",
      "543:             <hashTree/>",
      "544:             <ResponseAssertion guiclass=\"AssertionGui\" testclass=\"ResponseAssertion\" testname=\"Assert Fake Header Removal\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "532:               <stringProp name=\"Assertion.custom_message\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "548:               <stringProp name=\"Assertion.test_field\">Assertion.response_data</stringProp>",
      "549:               <boolProp name=\"Assertion.assume_success\">false</boolProp>",
      "550:               <intProp name=\"Assertion.test_type\">6</intProp>",
      "551:             </ResponseAssertion>",
      "552:             <hashTree/>",
      "553:           </hashTree>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "542:               <stringProp name=\"Assertion.custom_message\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "567:           <stringProp name=\"shareMode\">shareMode.all</stringProp>",
      "568:           <boolProp name=\"stopThread\">false</boolProp>",
      "569:           <stringProp name=\"variableNames\">USERNAME,PASSWORD</stringProp>",
      "570:         </CSVDataSet>",
      "571:         <hashTree/>",
      "582:         <hashTree/>",
      "583:       </hashTree>",
      "584:       <ThreadGroup guiclass=\"ThreadGroupGui\" testclass=\"ThreadGroup\" testname=\"OAuth Resource Access\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "572:         <CSVDataSet guiclass=\"TestBeanGUI\" testclass=\"CSVDataSet\" testname=\"Hosts Data Set\" enabled=\"true\">",
      "573:           <stringProp name=\"filename\">hosts.txt</stringProp>",
      "574:           <stringProp name=\"fileEncoding\"></stringProp>",
      "575:           <stringProp name=\"variableNames\">APP_SERVER</stringProp>",
      "576:           <stringProp name=\"delimiter\">,</stringProp>",
      "577:           <boolProp name=\"quotedData\">false</boolProp>",
      "578:           <boolProp name=\"recycle\">true</boolProp>",
      "579:           <boolProp name=\"stopThread\">false</boolProp>",
      "580:           <stringProp name=\"shareMode\">shareMode.all</stringProp>",
      "581:         </CSVDataSet>",
      "",
      "[Added Lines]",
      "562:           <boolProp name=\"ignoreFirstLine\">false</boolProp>",
      "565:         <HeaderManager guiclass=\"HeaderPanel\" testclass=\"HeaderManager\" testname=\"HTTP Header Manager\" enabled=\"true\">",
      "566:           <collectionProp name=\"HeaderManager.headers\">",
      "567:             <elementProp name=\"\" elementType=\"Header\">",
      "568:               <stringProp name=\"Header.name\">Accept</stringProp>",
      "569:               <stringProp name=\"Header.value\">*/*</stringProp>",
      "570:             </elementProp>",
      "571:           </collectionProp>",
      "572:         </HeaderManager>",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "631:           </elementProp>",
      "632:           <stringProp name=\"HTTPSampler.domain\">${AS_HOST}</stringProp>",
      "633:           <stringProp name=\"HTTPSampler.port\">${AS_PORT}</stringProp>",
      "636:           <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "637:           <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "638:           <stringProp name=\"HTTPSampler.path\">${AS_PATH_TOKEN}</stringProp>",
      "",
      "[Removed Lines]",
      "634:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "635:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "641:           <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "642:           <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "643:           <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "645:           <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "646:         </HTTPSamplerProxy>",
      "647:         <hashTree>",
      "648:           <RegexExtractor guiclass=\"RegexExtractorGui\" testclass=\"RegexExtractor\" testname=\"Grab AccessToken\" enabled=\"true\">",
      "",
      "[Removed Lines]",
      "644:           <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "",
      "[Added Lines]",
      "634:           <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "635:           <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "661:               <stringProp name=\"Header.name\">Authorization</stringProp>",
      "662:               <stringProp name=\"Header.value\">bearer ${AccessToken}</stringProp>",
      "663:             </elementProp>",
      "664:           </collectionProp>",
      "665:         </HeaderManager>",
      "666:         <hashTree/>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "654:             <elementProp name=\"\" elementType=\"Header\">",
      "655:               <stringProp name=\"Header.name\">Accept</stringProp>",
      "656:               <stringProp name=\"Header.value\">application/json</stringProp>",
      "657:             </elementProp>",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "675:             </elementProp>",
      "676:             <stringProp name=\"HTTPSampler.domain\">${APP_SERVER}</stringProp>",
      "677:             <stringProp name=\"HTTPSampler.port\">${APP_PORT}</stringProp>",
      "680:             <stringProp name=\"HTTPSampler.protocol\">https</stringProp>",
      "681:             <stringProp name=\"HTTPSampler.contentEncoding\"></stringProp>",
      "682:             <stringProp name=\"HTTPSampler.path\">${APP_PATH_ACCESS}</stringProp>",
      "",
      "[Removed Lines]",
      "678:             <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "679:             <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "685:             <boolProp name=\"HTTPSampler.auto_redirects\">false</boolProp>",
      "686:             <boolProp name=\"HTTPSampler.use_keepalive\">false</boolProp>",
      "687:             <boolProp name=\"HTTPSampler.DO_MULTIPART_POST\">false</boolProp>",
      "689:             <stringProp name=\"HTTPSampler.embedded_url_re\"></stringProp>",
      "690:           </HTTPSamplerProxy>",
      "691:           <hashTree>",
      "692:             <ResponseAssertion guiclass=\"AssertionGui\" testclass=\"ResponseAssertion\" testname=\"Assert AS_USERNAME\" enabled=\"true\">",
      "693:               <collectionProp name=\"Asserion.test_strings\">",
      "694:                 <stringProp name=\"240033137\">\\[OIDC_CLAIM_Username\\] =&gt; ${AS_USERNAME}</stringProp>",
      "695:               </collectionProp>",
      "697:               <boolProp name=\"Assertion.assume_success\">false</boolProp>",
      "698:               <intProp name=\"Assertion.test_type\">2</intProp>",
      "699:             </ResponseAssertion>",
      "700:             <hashTree/>",
      "701:           </hashTree>",
      "702:         </hashTree>",
      "714:       </hashTree>",
      "715:       <ResultCollector guiclass=\"ViewResultsFullVisualizer\" testclass=\"ResultCollector\" testname=\"View Results Tree\" enabled=\"true\">",
      "716:         <boolProp name=\"ResultCollector.error_logging\">true</boolProp>",
      "",
      "[Removed Lines]",
      "688:             <boolProp name=\"HTTPSampler.monitor\">false</boolProp>",
      "696:               <stringProp name=\"Assertion.test_field\">Assertion.response_data_as_document</stringProp>",
      "703:         <CSVDataSet guiclass=\"TestBeanGUI\" testclass=\"CSVDataSet\" testname=\"Hosts Data Set\" enabled=\"true\">",
      "704:           <stringProp name=\"filename\">hosts.txt</stringProp>",
      "705:           <stringProp name=\"fileEncoding\"></stringProp>",
      "706:           <stringProp name=\"variableNames\">APP_SERVER</stringProp>",
      "707:           <stringProp name=\"delimiter\">,</stringProp>",
      "708:           <boolProp name=\"quotedData\">false</boolProp>",
      "709:           <boolProp name=\"recycle\">true</boolProp>",
      "710:           <boolProp name=\"stopThread\">false</boolProp>",
      "711:           <stringProp name=\"shareMode\">shareMode.all</stringProp>",
      "712:         </CSVDataSet>",
      "713:         <hashTree/>",
      "",
      "[Added Lines]",
      "681:             <stringProp name=\"HTTPSampler.connect_timeout\"></stringProp>",
      "682:             <stringProp name=\"HTTPSampler.response_timeout\"></stringProp>",
      "689:               <stringProp name=\"Assertion.test_field\">Assertion.response_data</stringProp>",
      "692:               <stringProp name=\"Assertion.custom_message\"></stringProp>",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5215391ab1c54e7e606b9b735aab942e645417a1",
      "candidate_info": {
        "commit_hash": "5215391ab1c54e7e606b9b735aab942e645417a1",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/5215391ab1c54e7e606b9b735aab942e645417a1",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/config.c",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/parse.c",
          "src/parse.h",
          "src/session.c",
          "src/util.c",
          "test/test.c"
        ],
        "message": "make interpretation of X-Forwarded-* headers configurable\n\ndefaulting to none, so mod_auth_openidc running behind a reverse\nproxy that sets X-Forwarded-* headers needs explicit configuration\nof OIDCXForwardedHeaders\n\nbump to 2.4.11rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/parse.c||src/parse.c",
          "src/parse.h||src/parse.h",
          "src/session.c||src/session.c",
          "src/util.c||src/util.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "953: #   OIDCLogoutXFrameOptions: allow-from https://provider.example.com/",
          "954: # When not defined the default is \"DENY\".",
          "955: #OIDCLogoutXFrameOptions <value>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "957: # Define the X-Forwarded-* headers that will be taken into account as set by a reverse proxy",
          "958: # in front of mod_auth_openidc. Must be one or more of:",
          "959: #  X-Forwarded-Host",
          "960: #  X-Forwarded-Port",
          "961: #  X-Forwarded-Proto",
          "962: # When not defined, such headers will be ignored.",
          "963: #OIDCXForwardedHeaders <header>+",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10.1rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "155: #define OIDC_DEFAULT_STATE_INPUT_HEADERS (OIDC_STATE_INPUT_HEADERS_USER_AGENT | OIDC_STATE_INPUT_HEADERS_X_FORWARDED_FOR)",
          "157: #define OIDC_DEFAULT_STATE_COOKIE_PREFIX \"mod_auth_openidc_state_\"",
          "159: #define OIDCProviderMetadataURL                \"OIDCProviderMetadataURL\"",
          "160: #define OIDCProviderIssuer                     \"OIDCProviderIssuer\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159: #define OIDC_DEFAULT_X_FORWARDED_HEADERS 0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "264: #define OIDCStateCookiePrefix                  \"OIDCStateCookiePrefix\"",
          "265: #define OIDCCABundlePath                       \"OIDCCABundlePath\"",
          "266: #define OIDCLogoutXFrameOptions                \"OIDCLogoutXFrameOptions\"",
          "268: extern module AP_MODULE_DECLARE_DATA auth_openidc_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "269: #define OIDCXForwardedHeaders                  \"OIDCXForwardedHeaders\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1229:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "1230: }",
          "1232: static const char* oidc_set_redirect_urls_allowed(cmd_parms *cmd, void *m,",
          "1233:   const char *arg) {",
          "1234:  oidc_cfg *cfg = (oidc_cfg*) ap_get_module_config(cmd->server->module_config,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1235: static const char* oidc_set_x_forwarded_headers(cmd_parms *cmd, void *m, const char *arg) {",
          "1236:  oidc_cfg *cfg =",
          "1237:    (oidc_cfg*) ap_get_module_config(cmd->server->module_config, &auth_openidc_module);",
          "1238:  const char *rv = oidc_parse_x_forwarded_headers(cmd->pool, arg, &cfg->x_forwarded_headers);",
          "1239:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "1240: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1431:    OIDC_DEFAULT_PROVIDER_ISSUER_SPECIFIC_REDIRECT_URI;",
          "1433:  c->state_input_headers = OIDC_DEFAULT_STATE_INPUT_HEADERS;",
          "1435:  c->redirect_urls_allowed = NULL;",
          "1437:  c->ca_bundle_path = NULL;",
          "1439:  c->logout_x_frame_options = NULL;",
          "1441:  return c;",
          "1442: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1447:  c->x_forwarded_headers = OIDC_DEFAULT_X_FORWARDED_HEADERS;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1934:    add->logout_x_frame_options != NULL ?",
          "1935:      add->logout_x_frame_options : base->logout_x_frame_options;",
          "1937:  return c;",
          "1938: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1945:  c->x_forwarded_headers =",
          "1946:    add->x_forwarded_headers != OIDC_DEFAULT_X_FORWARDED_HEADERS ?",
          "1947:      add->x_forwarded_headers : base->x_forwarded_headers;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3434:     RSRC_CONF,",
          "3435:     \"Sets the value of the X-Frame-Options header on front channel logout.\"),",
          "3437:   { NULL }",
          "3438: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3449:   AP_INIT_ITERATE(OIDCXForwardedHeaders,",
          "3450:     oidc_set_x_forwarded_headers,",
          "3451:     (void *) APR_OFFSETOF(oidc_cfg, x_forwarded_headers),",
          "3452:     RSRC_CONF,",
          "3453:     \"Sets the value of the interpreted X-Forwarded-* headers.\"),",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "515:  struct oidc_state_cookies_t *next;",
          "516: } oidc_state_cookies_t;",
          "519:   int number_of_valid_state_cookies, int max_number_of_state_cookies,",
          "520:   oidc_state_cookies_t *first) {",
          "523:  while (number_of_valid_state_cookies >= max_number_of_state_cookies) {",
          "524:   oldest = first;",
          "525:   prev_oldest = NULL;",
          "",
          "[Removed Lines]",
          "518: static int oidc_delete_oldest_state_cookies(request_rec *r,",
          "521:  oidc_state_cookies_t *cur = NULL, *prev = NULL, *prev_oldest = NULL,",
          "",
          "[Added Lines]",
          "518: static int oidc_delete_oldest_state_cookies(request_rec *r, oidc_cfg *c,",
          "521:  oidc_state_cookies_t *cur = NULL, *prev = NULL, *prev_oldest = NULL, *oldest = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "533:    prev = cur;",
          "534:    cur = cur->next;",
          "535:   }",
          "541:   if (prev_oldest)",
          "542:    prev_oldest->next = oldest->next;",
          "543:   else",
          "",
          "[Removed Lines]",
          "536:   oidc_warn(r,",
          "537:     \"deleting oldest state cookie: %s (time until expiry %\" APR_TIME_T_FMT \" seconds)\",",
          "538:     oldest->name, apr_time_sec(oldest->timestamp - apr_time_now()));",
          "539:   oidc_util_set_cookie(r, oldest->name, \"\", 0,",
          "540:     OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "",
          "[Added Lines]",
          "535:   oidc_warn(r, \"deleting oldest state cookie: %s (time until expiry %\" APR_TIME_T_FMT \" seconds)\", oldest->name, apr_time_sec(oldest->timestamp - apr_time_now()));",
          "536:   oidc_util_set_cookie(r, oldest->name, \"\", 0, OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "572:      cookie++;",
          "573:      if ((currentCookieName == NULL)",
          "576:       oidc_proto_state_t *proto_state =",
          "577:         oidc_proto_state_from_cookie(r, c, cookie);",
          "578:       if (proto_state != NULL) {",
          "581:        if (apr_time_now() > ts + apr_time_from_sec(c->state_timeout)) {",
          "589:        } else {",
          "590:         if (first == NULL) {",
          "593:          last = first;",
          "594:         } else {",
          "597:          last = last->next;",
          "598:         }",
          "599:         last->name = cookieName;",
          "",
          "[Removed Lines]",
          "574:        || (apr_strnatcmp(cookieName, currentCookieName)",
          "575:          != 0)) {",
          "579:        json_int_t ts = oidc_proto_state_get_timestamp(",
          "580:          proto_state);",
          "582:         oidc_warn(r,",
          "583:           \"state (%s) has expired (original_url=%s)\",",
          "584:           cookieName,",
          "585:           oidc_proto_state_get_original_url(",
          "586:             proto_state));",
          "587:         oidc_util_set_cookie(r, cookieName, \"\", 0,",
          "588:           OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "591:          first = apr_pcalloc(r->pool,",
          "592:            sizeof(oidc_state_cookies_t));",
          "595:          last->next = apr_pcalloc(r->pool,",
          "596:            sizeof(oidc_state_cookies_t));",
          "",
          "[Added Lines]",
          "570:        || (apr_strnatcmp(cookieName, currentCookieName) != 0)) {",
          "574:        json_int_t ts = oidc_proto_state_get_timestamp(proto_state);",
          "576:         oidc_warn(r, \"state (%s) has expired (original_url=%s)\", cookieName, oidc_proto_state_get_original_url(proto_state));",
          "577:         oidc_util_set_cookie(r, cookieName, \"\", 0, OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "580:          first = apr_pcalloc(r->pool, sizeof(oidc_state_cookies_t));",
          "583:          last->next = apr_pcalloc(r->pool, sizeof(oidc_state_cookies_t));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "603:        }",
          "604:        oidc_proto_state_destroy(proto_state);",
          "605:       } else {",
          "611:       }",
          "612:      }",
          "613:     }",
          "",
          "[Removed Lines]",
          "606:        oidc_warn(r,",
          "607:          \"state cookie could not be retrieved/decoded, deleting: %s\",",
          "608:          cookieName);",
          "609:        oidc_util_set_cookie(r, cookieName, \"\", 0,",
          "610:          OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "",
          "[Added Lines]",
          "593:        oidc_warn(r, \"state cookie could not be retrieved/decoded, deleting: %s\", cookieName);",
          "594:        oidc_util_set_cookie(r, cookieName, \"\", 0, OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "617:  }",
          "619:  if (delete_oldest > 0)",
          "624:  return number_of_valid_state_cookies;",
          "625: }",
          "",
          "[Removed Lines]",
          "620:   number_of_valid_state_cookies = oidc_delete_oldest_state_cookies(r,",
          "621:     number_of_valid_state_cookies, c->max_number_of_state_cookies,",
          "622:     first);",
          "",
          "[Added Lines]",
          "604:   number_of_valid_state_cookies =",
          "605:     oidc_delete_oldest_state_cookies(r, c, number_of_valid_state_cookies, c->max_number_of_state_cookies, first);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "633:  oidc_debug(r, \"enter\");",
          "",
          "[Removed Lines]",
          "630: static apr_byte_t oidc_restore_proto_state(request_rec *r, oidc_cfg *c,",
          "631:   const char *state, oidc_proto_state_t **proto_state) {",
          "",
          "[Added Lines]",
          "613: static apr_byte_t oidc_restore_proto_state(request_rec *r, oidc_cfg *c, const char *state,",
          "614:   oidc_proto_state_t **proto_state) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "641:  char *cookieValue = oidc_util_get_cookie(r, cookieName);",
          "642:  if (cookieValue == NULL) {",
          "646:   return FALSE;",
          "647:  }",
          "654:  if (*proto_state == NULL)",
          "",
          "[Removed Lines]",
          "643:   oidc_error(r,",
          "644:     \"no \\\"%s\\\" state cookie found: check domain and samesite cookie settings\",",
          "645:     cookieName);",
          "650:  oidc_util_set_cookie(r, cookieName, \"\", 0,",
          "651:    OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "",
          "[Added Lines]",
          "626:   oidc_error(r, \"no \\\"%s\\\" state cookie found: check domain and samesite cookie settings\", cookieName);",
          "631:  oidc_util_set_cookie(r, cookieName, \"\", 0, OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "660:  char *calc = oidc_get_browser_state_hash(r, c, nonce);",
          "662:  if (apr_strnatcmp(calc, state) != 0) {",
          "666:   oidc_proto_state_destroy(*proto_state);",
          "667:   return FALSE;",
          "668:  }",
          "",
          "[Removed Lines]",
          "663:   oidc_error(r,",
          "664:     \"calculated state from cookie does not match state parameter passed back in URL: \\\"%s\\\" != \\\"%s\\\"\",",
          "665:     state, calc);",
          "",
          "[Added Lines]",
          "643:   oidc_error(r, \"calculated state from cookie does not match state parameter passed back in URL: \\\"%s\\\" != \\\"%s\\\"\", state, calc);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "690:  oidc_proto_state_set_state(*proto_state, state);",
          "697:  return TRUE;",
          "",
          "[Removed Lines]",
          "693:  oidc_debug(r, \"restored state: %s\",",
          "694:    oidc_proto_state_to_string(r, *proto_state));",
          "",
          "[Added Lines]",
          "671:  oidc_debug(r, \"restored state: %s\", oidc_proto_state_to_string(r, *proto_state));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "925:    NULL, NULL, oidc_dir_cfg_path_auth_request_params(r),",
          "926:    oidc_dir_cfg_path_scope(r));",
          "927: }",
          "",
          "[Removed Lines]",
          "924:  return oidc_authenticate_user(r, c, NULL, oidc_get_current_url(r), NULL,",
          "",
          "[Added Lines]",
          "901:  return oidc_authenticate_user(r, c, NULL, oidc_get_current_url(r, c->x_forwarded_headers), NULL,",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "962:   oidc_session_t *session) {",
          "963:  const char *c_cookie_domain =",
          "964:    cfg->cookie_domain ?",
          "966:  const char *s_cookie_domain = oidc_session_get_cookie_domain(r, session);",
          "967:  if ((s_cookie_domain == NULL)",
          "968:    || (apr_strnatcmp(c_cookie_domain, s_cookie_domain) != 0)) {",
          "",
          "[Removed Lines]",
          "965:      cfg->cookie_domain : oidc_get_current_url_host(r);",
          "",
          "[Added Lines]",
          "942:      cfg->cookie_domain : oidc_get_current_url_host(r, cfg->x_forwarded_headers);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1793:  oidc_session_set_cookie_domain(r, session,",
          "1796:  char *sid = NULL;",
          "1797:  oidc_debug(r, \"provider->backchannel_logout_supported=%d\",",
          "",
          "[Removed Lines]",
          "1794:    c->cookie_domain ? c->cookie_domain : oidc_get_current_url_host(r));",
          "",
          "[Added Lines]",
          "1771:    c->cookie_domain ? c->cookie_domain : oidc_get_current_url_host(r, c->x_forwarded_headers));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2114:  oidc_debug(r, \"enter\");",
          "2118:  const char *method = oidc_original_request_method(r, cfg, FALSE);",
          "",
          "[Removed Lines]",
          "2117:  char *current_url = oidc_get_current_url(r);",
          "",
          "[Added Lines]",
          "2094:  char *current_url = oidc_get_current_url(r, cfg->x_forwarded_headers);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2492:    return FALSE;",
          "2493:   }",
          "2494:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
          "2496:   if ((strstr(c_host, uri.hostname) == NULL)",
          "2497:     || (strstr(uri.hostname, c_host) == NULL)) {",
          "",
          "[Removed Lines]",
          "2495:   c_host = oidc_get_current_url_host(r);",
          "",
          "[Added Lines]",
          "2472:   c_host = oidc_get_current_url_host(r, c->x_forwarded_headers);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2571:   oidc_util_set_cookie(r, OIDC_CSRF_NAME, \"\", 0,",
          "2575:   if ((csrf_query == NULL)",
          "",
          "[Removed Lines]",
          "2572:     OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "",
          "[Added Lines]",
          "2549:     OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4027:    break;",
          "4028:  }",
          "4031:    NULL, NULL, oidc_dir_cfg_path_auth_request_params(r), oidc_dir_cfg_path_scope(r));",
          "4033:  if (oidc_request_state_get(r, OIDC_REQUEST_STATE_KEY_DISCOVERY) != NULL)",
          "",
          "[Removed Lines]",
          "4030:  oidc_authenticate_user(r, c, NULL, oidc_get_current_url(r), NULL,",
          "",
          "[Added Lines]",
          "4007:  oidc_authenticate_user(r, c, NULL, oidc_get_current_url(r, c->x_forwarded_headers), NULL,",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "230: #define OIDC_COOKIE_EXT_SAME_SITE_LAX    \"SameSite=Lax\"",
          "231: #define OIDC_COOKIE_EXT_SAME_SITE_STRICT \"SameSite=Strict\"",
          "235: #define OIDC_COOKIE_SAMESITE_STRICT(c, r) \\",
          "237: #define OIDC_COOKIE_SAMESITE_LAX(c, r) \\",
          "241: #define OIDC_TB_CFG_PROVIDED_ENV_VAR     \"Sec-Provided-Token-Binding-ID\"",
          "",
          "[Removed Lines]",
          "232: #define OIDC_COOKIE_EXT_SAME_SITE_NONE(r) \\",
          "233:   oidc_util_request_is_secure(r) ? \"SameSite=None\" : NULL",
          "236:   c->cookie_same_site ? OIDC_COOKIE_EXT_SAME_SITE_STRICT : OIDC_COOKIE_EXT_SAME_SITE_NONE(r)",
          "238:   c->cookie_same_site ? OIDC_COOKIE_EXT_SAME_SITE_LAX : OIDC_COOKIE_EXT_SAME_SITE_NONE(r)",
          "",
          "[Added Lines]",
          "232: #define OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r) \\",
          "233:   oidc_util_request_is_secure(r,c ) ? \"SameSite=None\" : NULL",
          "236:   c->cookie_same_site ? OIDC_COOKIE_EXT_SAME_SITE_STRICT : OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r)",
          "238:   c->cookie_same_site ? OIDC_COOKIE_EXT_SAME_SITE_LAX : OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "250: #define OIDC_STATE_INPUT_HEADERS_USER_AGENT 1",
          "251: #define OIDC_STATE_INPUT_HEADERS_X_FORWARDED_FOR 2",
          "253: typedef apr_byte_t (*oidc_proto_pkce_state)(request_rec *r, char **state);",
          "254: typedef apr_byte_t (*oidc_proto_pkce_challenge)(request_rec *r, const char *state, char **code_challenge);",
          "255: typedef apr_byte_t (*oidc_proto_pkce_verifier)(request_rec *r, const char *state, char **code_verifier);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: #define OIDC_HDR_X_FORWARDED_HOST   1",
          "254: #define OIDC_HDR_X_FORWARDED_PORT   2",
          "255: #define OIDC_HDR_X_FORWARDED_PROTO  4",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "443:  apr_hash_t *white_listed_claims;",
          "445:  apr_byte_t state_input_headers;",
          "447:  apr_hash_t *redirect_urls_allowed;",
          "449:  char *ca_bundle_path;",
          "451:  char *logout_x_frame_options;",
          "452: } oidc_cfg;",
          "454: int oidc_check_user_id(request_rec *r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:  apr_byte_t x_forwarded_headers;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "764: int oidc_strnenvcmp(const char *a, const char *b, int len);",
          "765: int oidc_base64url_encode(request_rec *r, char **dst, const char *src, int src_len, int remove_padding);",
          "766: int oidc_base64url_decode(apr_pool_t *pool, char **dst, const char *src);",
          "769: const char *oidc_get_redirect_uri(request_rec *r, oidc_cfg *c);",
          "770: const char *oidc_get_redirect_uri_iss(request_rec *r, oidc_cfg *c, oidc_provider_t *provider);",
          "771: char *oidc_url_encode(const request_rec *r, const char *str, const char *charsToEncode);",
          "772: char *oidc_normalize_header_name(const request_rec *r, const char *str);",
          "774: void oidc_util_set_cookie(request_rec *r, const char *cookieName, const char *cookieValue, apr_time_t expires, const char *ext);",
          "775: char *oidc_util_get_cookie(request_rec *r, const char *cookieName);",
          "776: apr_byte_t oidc_util_http_get(request_rec *r, const char *url, const apr_table_t *params, const char *basic_auth, const char *bearer_token, int ssl_validate_server, char **response, int timeout, const char *outgoing_proxy, apr_array_header_t *pass_cookies, const char *ssl_cert, const char *ssl_key, const char *ssl_key_pwd);",
          "",
          "[Removed Lines]",
          "767: const char *oidc_get_current_url_host(request_rec *r);",
          "768: char *oidc_get_current_url(request_rec *r);",
          "773: apr_byte_t oidc_util_request_is_secure(request_rec *r);",
          "",
          "[Added Lines]",
          "769: const char *oidc_get_current_url_host(request_rec *r, const apr_byte_t x_forwarded_headers);",
          "770: char *oidc_get_current_url(request_rec *r, const apr_byte_t x_forwarded_headers);",
          "775: apr_byte_t oidc_util_request_is_secure(request_rec *r, oidc_cfg *c);",
          "",
          "---------------"
        ],
        "src/parse.c||src/parse.c": [
          "File: src/parse.c -> src/parse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1356:  return NULL;",
          "1357: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1359: const char* oidc_parse_x_forwarded_headers(apr_pool_t *pool, const char *arg,",
          "1360:   apr_byte_t *x_forwarded_headers) {",
          "1361:  static char *options[] = {",
          "1362:    OIDC_HTTP_HDR_X_FORWARDED_HOST,",
          "1363:    OIDC_HTTP_HDR_X_FORWARDED_PORT,",
          "1364:    OIDC_HTTP_HDR_X_FORWARDED_PROTO,",
          "1365:    NULL };",
          "1366:  const char *rv = oidc_valid_string_option(pool, arg, options);",
          "1367:  if (rv != NULL)",
          "1368:   return rv;",
          "1370:  if (apr_strnatcmp(arg, OIDC_HTTP_HDR_X_FORWARDED_HOST) == 0) {",
          "1372:  } else if (apr_strnatcmp(arg, OIDC_HTTP_HDR_X_FORWARDED_PORT) == 0) {",
          "1374:  } else if (apr_strnatcmp(arg, OIDC_HTTP_HDR_X_FORWARDED_PROTO) == 0) {",
          "1376:  }",
          "1378:  return NULL;",
          "1379: }",
          "",
          "---------------"
        ],
        "src/parse.h||src/parse.h": [
          "File: src/parse.h -> src/parse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "115: const char *oidc_parse_max_number_of_state_cookies(apr_pool_t *pool, const char *arg1, const char *arg2, int *int_value, int *bool_value);",
          "116: const char *oidc_parse_refresh_access_token_before_expiry(apr_pool_t *pool, const char *arg, int *int_value);",
          "117: const char *oidc_parse_set_state_input_headers_as(apr_pool_t *pool, const char *arg, apr_byte_t *state_input_headers);",
          "119: typedef const char *(*oidc_valid_int_function_t)(apr_pool_t *, int);",
          "120: typedef const char *(*oidc_valid_function_t)(apr_pool_t *, const char *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118: const char *oidc_parse_x_forwarded_headers(apr_pool_t *pool, const char *arg, apr_byte_t *x_forwarded_headers);",
          "",
          "---------------"
        ],
        "src/session.c||src/session.c": [
          "File: src/session.c -> src/session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "150: static apr_byte_t oidc_session_load_cache(request_rec *r, oidc_session_t *z) {",
          "154:  apr_byte_t rc = FALSE;",
          "",
          "[Removed Lines]",
          "151:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "152:    &auth_openidc_module);",
          "",
          "[Added Lines]",
          "151:  oidc_cfg *c = ap_get_module_config(r->server->module_config, &auth_openidc_module);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "171:   if (z->state == NULL) {",
          "175:   }",
          "176:  }",
          "",
          "[Removed Lines]",
          "173:    oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), \"\", 0,",
          "174:      OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "",
          "[Added Lines]",
          "172:    oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), \"\", 0, OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "189:  apr_byte_t rc = TRUE;",
          "",
          "[Removed Lines]",
          "184: static apr_byte_t oidc_session_save_cache(request_rec *r, oidc_session_t *z,",
          "185:   apr_byte_t first_time) {",
          "186:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "187:    &auth_openidc_module);",
          "",
          "[Added Lines]",
          "182: static apr_byte_t oidc_session_save_cache(request_rec *r, oidc_session_t *z, apr_byte_t first_time) {",
          "183:  oidc_cfg *c = ap_get_module_config(r->server->module_config, &auth_openidc_module);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "211:   if (rc == TRUE)",
          "213:    oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), z->uuid,",
          "221:  } else {",
          "",
          "[Removed Lines]",
          "214:      c->persistent_session_cookie ? z->expiry : -1,",
          "215:        c->cookie_same_site ?",
          "216:          (first_time ?",
          "217:            OIDC_COOKIE_EXT_SAME_SITE_LAX :",
          "218:            OIDC_COOKIE_EXT_SAME_SITE_STRICT) :",
          "219:            OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "",
          "[Added Lines]",
          "210:          c->persistent_session_cookie ? z->expiry : -1,",
          "211:            c->cookie_same_site ? (first_time ?",
          "212:              OIDC_COOKIE_EXT_SAME_SITE_LAX :",
          "213:              OIDC_COOKIE_EXT_SAME_SITE_STRICT) :",
          "214:              OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "224:    oidc_cache_set_sid(r, z->sid, NULL, 0);",
          "231:   rc = oidc_cache_set_session(r, z->uuid, NULL, 0);",
          "",
          "[Removed Lines]",
          "227:   oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), \"\", 0,",
          "228:     OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "",
          "[Added Lines]",
          "222:   oidc_util_set_cookie(r, oidc_cfg_dir_cookie(r), \"\", 0, OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "246:   return FALSE;",
          "247:  return TRUE;",
          "248: }",
          "",
          "[Removed Lines]",
          "240: static apr_byte_t oidc_session_load_cookie(request_rec *r, oidc_cfg *c,",
          "241:   oidc_session_t *z) {",
          "242:  char *cookieValue = oidc_util_get_chunked_cookie(r, oidc_cfg_dir_cookie(r),",
          "243:    c->session_cookie_chunk_size);",
          "244:  if ((cookieValue != NULL)",
          "245:    && (oidc_session_decode(r, c, z, cookieValue, TRUE) == FALSE))",
          "",
          "[Added Lines]",
          "234: static apr_byte_t oidc_session_load_cookie(request_rec *r, oidc_cfg *c, oidc_session_t *z) {",
          "235:  char *cookieValue =",
          "236:    oidc_util_get_chunked_cookie(r, oidc_cfg_dir_cookie(r), c->session_cookie_chunk_size);",
          "237:  if ((cookieValue != NULL) && (oidc_session_decode(r, c, z, cookieValue, TRUE) == FALSE))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "257:  char *cookieValue = \"\";",
          "260:   return FALSE;",
          "262:  oidc_util_set_chunked_cookie(r, oidc_cfg_dir_cookie(r), cookieValue,",
          "272:  return TRUE;",
          "273: }",
          "",
          "[Removed Lines]",
          "253: static apr_byte_t oidc_session_save_cookie(request_rec *r, oidc_session_t *z,",
          "254:   apr_byte_t first_time) {",
          "255:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "256:    &auth_openidc_module);",
          "258:  if ((z->state != NULL)",
          "259:    && (oidc_session_encode(r, c, z, &cookieValue, TRUE) == FALSE))",
          "263:    c->persistent_session_cookie ? z->expiry : -1,",
          "264:      c->session_cookie_chunk_size,",
          "265:      (z->state == NULL) ? OIDC_COOKIE_EXT_SAME_SITE_NONE(r) :",
          "266:        c->cookie_same_site ?",
          "267:          (first_time ?",
          "268:            OIDC_COOKIE_EXT_SAME_SITE_LAX :",
          "269:            OIDC_COOKIE_EXT_SAME_SITE_STRICT) :",
          "270:            OIDC_COOKIE_EXT_SAME_SITE_NONE(r));",
          "",
          "[Added Lines]",
          "245: static apr_byte_t oidc_session_save_cookie(request_rec *r, oidc_session_t *z, apr_byte_t first_time) {",
          "246:  oidc_cfg *c = ap_get_module_config(r->server->module_config, &auth_openidc_module);",
          "248:  if ((z->state != NULL) && (oidc_session_encode(r, c, z, &cookieValue, TRUE) == FALSE))",
          "252:    c->persistent_session_cookie ? z->expiry : -1, c->session_cookie_chunk_size,",
          "253:      (z->state == NULL) ? OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r) :",
          "254:        c->cookie_same_site ? (first_time ?",
          "255:          OIDC_COOKIE_EXT_SAME_SITE_LAX :",
          "256:          OIDC_COOKIE_EXT_SAME_SITE_STRICT) :",
          "257:          OIDC_COOKIE_EXT_SAME_SITE_NONE(c, r));",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:  if (scheme_str == NULL) {",
          "446: #ifdef APACHE2_0",
          "",
          "[Removed Lines]",
          "441: static const char* oidc_get_current_url_scheme(const request_rec *r) {",
          "443:  const char *scheme_str = oidc_util_hdr_in_x_forwarded_proto_get(r);",
          "",
          "[Added Lines]",
          "441: static const char* oidc_get_current_url_scheme(const request_rec *r,",
          "442:   const apr_byte_t x_forwarded_headers) {",
          "444:  const char *scheme_str = NULL;",
          "446:  if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_PROTO)",
          "447:   scheme_str = oidc_util_hdr_in_x_forwarded_proto_get(r);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "452:  if ((scheme_str == NULL)",
          "453:    || ((apr_strnatcmp(scheme_str, \"http\") != 0)",
          "454:      && (apr_strnatcmp(scheme_str, \"https\") != 0))) {",
          "458:   scheme_str = \"https\";",
          "459:  }",
          "460:  return scheme_str;",
          "",
          "[Removed Lines]",
          "455:   oidc_warn(r,",
          "456:     \"detected HTTP scheme \\\"%s\\\" is not \\\"http\\\" nor \\\"https\\\"; perhaps your reverse proxy passes a wrongly configured \\\"%s\\\" header: falling back to default \\\"https\\\"\",",
          "457:     scheme_str, OIDC_HTTP_HDR_X_FORWARDED_PROTO);",
          "",
          "[Added Lines]",
          "460:   oidc_warn(r, \"detected HTTP scheme \\\"%s\\\" is not \\\"http\\\" nor \\\"https\\\"; perhaps your reverse proxy passes a wrongly configured \\\"%s\\\" header: falling back to default \\\"https\\\"\", scheme_str, OIDC_HTTP_HDR_X_FORWARDED_PROTO);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "467:  char *p = NULL;",
          "468:  char *i = NULL;",
          "470:  if (host_hdr) {",
          "472:    i = strchr(host_hdr, ']');",
          "473:    p = strchr(i, OIDC_CHAR_COLON);",
          "474:   } else {",
          "",
          "[Removed Lines]",
          "466: static const char* oidc_get_port_from_host( const char *host_hdr){",
          "471:   if (host_hdr[0]=='[') {",
          "",
          "[Added Lines]",
          "469: static const char* oidc_get_port_from_host(const char *host_hdr) {",
          "474:   if (host_hdr[0] == '[') {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "495:  if (port_str)",
          "496:   return port_str;",
          "",
          "[Removed Lines]",
          "487: static const char* oidc_get_current_url_port(const request_rec *r,",
          "488:   const char *scheme_str) {",
          "494:  const char *port_str = oidc_util_hdr_in_x_forwarded_port_get(r);",
          "",
          "[Added Lines]",
          "490: static const char* oidc_get_current_url_port(const request_rec *r, const char *scheme_str,",
          "491:   const apr_byte_t x_forwarded_headers) {",
          "493:  const char *host_hdr = NULL;",
          "494:  const char *port_str = NULL;",
          "501:  if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_PORT)",
          "502:   port_str = oidc_util_hdr_in_x_forwarded_port_get(r);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "503:  if (host_hdr) {",
          "504:   port_str = oidc_get_port_from_host(host_hdr);",
          "505:   if (port_str)",
          "",
          "[Removed Lines]",
          "502:  const char *host_hdr = oidc_util_hdr_in_x_forwarded_host_get(r);",
          "",
          "[Added Lines]",
          "512:  if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_HOST)",
          "513:   host_hdr = oidc_util_hdr_in_x_forwarded_host_get(r);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "527:  if (oidc_util_hdr_in_x_forwarded_proto_get(r))",
          "528:   return NULL;",
          "",
          "[Added Lines]",
          "539:  if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_PROTO)",
          "540:   if (oidc_util_hdr_in_x_forwarded_proto_get(r))",
          "541:    return NULL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "550:  char *i = NULL;",
          "551:  if (host_str == NULL)",
          "552:   host_str = oidc_util_hdr_in_host_get(r);",
          "553:  if (host_str) {",
          "554:   host_str = apr_pstrdup(r->pool, host_str);",
          "556:   if (host_str[0] == '[') {",
          "558:    p = strchr(i, OIDC_CHAR_COLON);",
          "559:   } else {",
          "560:    p = strchr(host_str, OIDC_CHAR_COLON);",
          "561:   }",
          "565:  } else {",
          "567:   host_str = ap_get_server_name(r);",
          "",
          "[Removed Lines]",
          "547: const char* oidc_get_current_url_host(request_rec *r) {",
          "548:  const char *host_str = oidc_util_hdr_in_x_forwarded_host_get(r);",
          "549:     char *p = NULL;",
          "557:    i= strchr(host_str, ']');",
          "563:  if (p != NULL)",
          "",
          "[Added Lines]",
          "560: const char* oidc_get_current_url_host(request_rec *r, const apr_byte_t x_forwarded_headers) {",
          "561:  const char *host_str = NULL;",
          "562:  char *p = NULL;",
          "565:  if (x_forwarded_headers & OIDC_HDR_X_FORWARDED_HOST)",
          "566:   host_str = oidc_util_hdr_in_x_forwarded_host_get(r);",
          "574:    i = strchr(host_str, ']');",
          "580:   if (p != NULL)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "580:  port_str = port_str ? apr_psprintf(r->pool, \":%s\", port_str) : \"\";",
          "582:  char *url = apr_pstrcat(r->pool, scheme_str, \"://\", host_str, port_str,",
          "585:  return url;",
          "586: }",
          "",
          "[Removed Lines]",
          "575: static const char* oidc_get_current_url_base(request_rec *r) {",
          "577:  const char *scheme_str = oidc_get_current_url_scheme(r);",
          "578:  const char *host_str = oidc_get_current_url_host(r);",
          "579:  const char *port_str = oidc_get_current_url_port(r, scheme_str);",
          "583:    NULL);",
          "",
          "[Added Lines]",
          "592: static const char* oidc_get_current_url_base(request_rec *r, const apr_byte_t x_forwarded_headers) {",
          "594:  const char *scheme_str = oidc_get_current_url_scheme(r, x_forwarded_headers);",
          "595:  const char *host_str = oidc_get_current_url_host(r, x_forwarded_headers);",
          "596:  const char *port_str = oidc_get_current_url_port(r, scheme_str, x_forwarded_headers);",
          "600:        NULL);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "592:  char *url = NULL, *path = NULL;",
          "593:  apr_uri_t uri;",
          "",
          "[Removed Lines]",
          "591: char* oidc_get_current_url(request_rec *r) {",
          "",
          "[Added Lines]",
          "608: char* oidc_get_current_url(request_rec *r, const apr_byte_t x_forwarded_headers) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "598:  if ((path) && (path[0] != '/')) {",
          "599:   memset(&uri, 0, sizeof(apr_uri_t));",
          "600:   if (apr_uri_parse(r->pool, r->uri, &uri) == APR_SUCCESS)",
          "604:   else",
          "607:  } else {",
          "609:   path = r->unparsed_uri;",
          "610:  }",
          "614:  oidc_debug(r, \"current URL '%s'\", url);",
          "",
          "[Removed Lines]",
          "601:    path = apr_pstrcat(r->pool, uri.path,",
          "602:      (r->args != NULL && *r->args != '\\0' ? \"?\" : \"\"), r->args,",
          "603:      NULL);",
          "605:    oidc_warn(r, \"apr_uri_parse failed on non-relative URL: %s\",",
          "606:      r->uri);",
          "612:  url = apr_pstrcat(r->pool, oidc_get_current_url_base(r), path, NULL);",
          "",
          "[Added Lines]",
          "618:    path =",
          "619:      apr_pstrcat(r->pool, uri.path, (r->args != NULL && *r->args != '\\0' ? \"?\" : \"\"), r->args,",
          "620:         NULL);",
          "622:    oidc_warn(r, \"apr_uri_parse failed on non-relative URL: %s\", r->uri);",
          "628:  url = apr_pstrcat(r->pool, oidc_get_current_url_base(r, x_forwarded_headers), path, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "627:    && (redirect_uri[0] == OIDC_CHAR_FORWARD_SLASH)) {",
          "631:     cfg->redirect_uri, NULL);",
          "633:   oidc_debug(r, \"determined absolute redirect uri: %s\", redirect_uri);",
          "",
          "[Removed Lines]",
          "630:   redirect_uri = apr_pstrcat(r->pool, oidc_get_current_url_base(r),",
          "",
          "[Added Lines]",
          "646:   redirect_uri = apr_pstrcat(r->pool, oidc_get_current_url_base(r, cfg->x_forwarded_headers),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1107:  return env_var_value;",
          "1108: }",
          "1112: }",
          "1122:  char *headerString, *expiresString = NULL;",
          "1123:  const char *appendString = NULL;",
          "",
          "[Removed Lines]",
          "1110: apr_byte_t oidc_util_request_is_secure(request_rec *r) {",
          "1111:  return (apr_strnatcasecmp(\"https\", oidc_get_current_url_scheme(r)) == 0);",
          "1117: void oidc_util_set_cookie(request_rec *r, const char *cookieName,",
          "1118:   const char *cookieValue, apr_time_t expires, const char *ext) {",
          "1120:  oidc_cfg *c = ap_get_module_config(r->server->module_config,",
          "1121:    &auth_openidc_module);",
          "",
          "[Added Lines]",
          "1126: apr_byte_t oidc_util_request_is_secure(request_rec *r, oidc_cfg *c) {",
          "1127:  return (apr_strnatcasecmp(\"https\", oidc_get_current_url_scheme(r, c->x_forwarded_headers)) == 0);",
          "1133: void oidc_util_set_cookie(request_rec *r, const char *cookieName, const char *cookieValue,",
          "1134:   apr_time_t expires, const char *ext) {",
          "1136:  oidc_cfg *c = ap_get_module_config(r->server->module_config, &auth_openidc_module);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1138:  headerString = apr_psprintf(r->pool, \"%s=%s\", cookieName, cookieValue);",
          "1140:  headerString = apr_psprintf(r->pool, \"%s; %s=%s\", headerString,",
          "1143:  if (expiresString != NULL)",
          "1144:   headerString = apr_psprintf(r->pool, \"%s; %s=%s\", headerString,",
          "1147:  if (c->cookie_domain != NULL)",
          "1148:   headerString = apr_psprintf(r->pool, \"%s; %s=%s\", headerString,",
          "1152:   headerString = apr_psprintf(r->pool, \"%s; %s\", headerString,",
          "1155:  if (c->cookie_http_only != FALSE)",
          "1156:   headerString = apr_psprintf(r->pool, \"%s; %s\", headerString,",
          "1159:  appendString = oidc_util_set_cookie_append_value(r, c);",
          "1160:  if (appendString != NULL)",
          "1163:  else if (ext != NULL)",
          "1164:   headerString = apr_psprintf(r->pool, \"%s; %s\", headerString, ext);",
          "1167:  if (strlen(headerString) > OIDC_COOKIE_MAX_SIZE) {",
          "1171:  }",
          "",
          "[Removed Lines]",
          "1141:    OIDC_COOKIE_FLAG_PATH, oidc_util_get_cookie_path(r));",
          "1145:     OIDC_COOKIE_FLAG_EXPIRES, expiresString);",
          "1149:     OIDC_COOKIE_FLAG_DOMAIN, c->cookie_domain);",
          "1151:  if (oidc_util_request_is_secure(r))",
          "1153:     OIDC_COOKIE_FLAG_SECURE);",
          "1157:     OIDC_COOKIE_FLAG_HTTP_ONLY);",
          "1161:   headerString = apr_psprintf(r->pool, \"%s; %s\", headerString,",
          "1162:     appendString);",
          "1168:   oidc_warn(r,",
          "1169:     \"the length of the cookie value (%d) is greater than %d(!) bytes, this may not work with all browsers/server combinations: consider switching to a server side caching!\",",
          "1170:     (int )strlen(headerString), OIDC_COOKIE_MAX_SIZE);",
          "",
          "[Added Lines]",
          "1156:         OIDC_COOKIE_FLAG_PATH, oidc_util_get_cookie_path(r));",
          "1160:          OIDC_COOKIE_FLAG_EXPIRES, expiresString);",
          "1164:          OIDC_COOKIE_FLAG_DOMAIN, c->cookie_domain);",
          "1166:  if (oidc_util_request_is_secure(r, c))",
          "1168:          OIDC_COOKIE_FLAG_SECURE);",
          "1172:          OIDC_COOKIE_FLAG_HTTP_ONLY);",
          "1176:   headerString = apr_psprintf(r->pool, \"%s; %s\", headerString, appendString);",
          "1182:   oidc_warn(r, \"the length of the cookie value (%d) is greater than %d(!) bytes, this may not work with all browsers/server combinations: consider switching to a server side caching!\", (int )strlen(headerString), OIDC_COOKIE_MAX_SIZE);",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1237:  r->uri = \"/test\";",
          "1238:  r->unparsed_uri = apr_pstrcat(r->pool, r->uri, \"?\", r->args, NULL);",
          "1241:  TST_ASSERT_STR(\"test_current_url (1)\", url,",
          "1242:    \"https://www.example.com/test?foo=bar&param1=value1\");",
          "1244:  apr_table_set(r->headers_in, \"X-Forwarded-Host\", \"www.outer.com\");",
          "1247:    \"https://www.outer.com/test?foo=bar&param1=value1\");",
          "1249:  apr_table_set(r->headers_in, \"X-Forwarded-Host\", \"www.outer.com:654\");",
          "1251:  TST_ASSERT_STR(\"test_current_url (3)\", url,",
          "1252:    \"https://www.outer.com:654/test?foo=bar&param1=value1\");",
          "1254:  apr_table_set(r->headers_in, \"X-Forwarded-Port\", \"321\");",
          "1256:  TST_ASSERT_STR(\"test_current_url (4)\", url,",
          "1257:    \"https://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1259:  apr_table_set(r->headers_in, \"X-Forwarded-Proto\", \"http\");",
          "1262:    \"http://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1264:  apr_table_set(r->headers_in, \"X-Forwarded-Proto\", \"https , http\");",
          "1266:  TST_ASSERT_STR(\"test_current_url (6)\", url,",
          "1267:    \"https://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1269:  apr_table_unset(r->headers_in, \"X-Forwarded-Host\");",
          "1270:  apr_table_unset(r->headers_in, \"X-Forwarded-Port\");",
          "1272:  TST_ASSERT_STR(\"test_current_url (7)\", url,",
          "1273:    \"https://www.example.com/test?foo=bar&param1=value1\");",
          "1275:  apr_table_set(r->headers_in, \"X-Forwarded-Proto\", \"http \");",
          "1276:  apr_table_set(r->headers_in, \"Host\", \"remotehost:8380\");",
          "1277:  r->uri = \"http://remotehost:8380/private/\";",
          "1279:  TST_ASSERT_STR(\"test_current_url (8)\", url,",
          "1280:    \"http://remotehost:8380/private/?foo=bar&param1=value1\");",
          "1282:  apr_table_set(r->headers_in, \"Host\", \"[fd04:41b1:1170:28:16b0:446b:9fb7:7118]:8380\");",
          "1284:  TST_ASSERT_STR(\"test_current_url (9)\", url,",
          "1285:    \"http://[fd04:41b1:1170:28:16b0:446b:9fb7:7118]:8380/private/?foo=bar&param1=value1\");",
          "1287:  apr_table_set(r->headers_in, \"Host\", \"[fd04:41b1:1170:28:16b0:446b:9fb7:7118]\");",
          "1289:  TST_ASSERT_STR(\"test_current_url (10)\", url,",
          "1290:    \"http://[fd04:41b1:1170:28:16b0:446b:9fb7:7118]/private/?foo=bar&param1=value1\");",
          "",
          "[Removed Lines]",
          "1240:  url = oidc_get_current_url(r);",
          "1245:  url = oidc_get_current_url(r);",
          "1246:  TST_ASSERT_STR(\"test_current_url (2)\", url,",
          "1250:  url = oidc_get_current_url(r);",
          "1255:  url = oidc_get_current_url(r);",
          "1260:  url = oidc_get_current_url(r);",
          "1261:  TST_ASSERT_STR(\"test_current_url (5)\", url,",
          "1265:  url = oidc_get_current_url(r);",
          "1271:  url = oidc_get_current_url(r);",
          "1278:  url = oidc_get_current_url(r);",
          "1283:  url = oidc_get_current_url(r);",
          "1288:  url = oidc_get_current_url(r);",
          "",
          "[Added Lines]",
          "1240:  url = oidc_get_current_url(r, 0);",
          "1245:  url = oidc_get_current_url(r, 0);",
          "1246:  TST_ASSERT_STR(\"test_current_url (2a)\", url,",
          "1247:    \"https://www.example.com/test?foo=bar&param1=value1\");",
          "1248:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_HOST);",
          "1249:  TST_ASSERT_STR(\"test_current_url (2b)\", url,",
          "1253:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_HOST);",
          "1258:  url = oidc_get_current_url(r, 0);",
          "1259:  TST_ASSERT_STR(\"test_current_url (4a)\", url,",
          "1260:    \"https://www.example.com/test?foo=bar&param1=value1\");",
          "1261:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_HOST);",
          "1262:  TST_ASSERT_STR(\"test_current_url (4b)\", url,",
          "1263:    \"https://www.outer.com:654/test?foo=bar&param1=value1\");",
          "1264:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_HOST | OIDC_HDR_X_FORWARDED_PORT);",
          "1269:  url = oidc_get_current_url(r, 0);",
          "1270:  TST_ASSERT_STR(\"test_current_url (5a)\", url,",
          "1271:    \"https://www.example.com/test?foo=bar&param1=value1\");",
          "1272:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_HOST);",
          "1273:  TST_ASSERT_STR(\"test_current_url (5b)\", url,",
          "1274:    \"https://www.outer.com:654/test?foo=bar&param1=value1\");",
          "1275:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_HOST | OIDC_HDR_X_FORWARDED_PORT);",
          "1276:  TST_ASSERT_STR(\"test_current_url (5c)\", url,",
          "1277:    \"https://www.outer.com:321/test?foo=bar&param1=value1\");",
          "1278:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_HOST | OIDC_HDR_X_FORWARDED_PORT | OIDC_HDR_X_FORWARDED_PROTO);",
          "1279:  TST_ASSERT_STR(\"test_current_url (5d)\", url,",
          "1283:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_HOST | OIDC_HDR_X_FORWARDED_PORT | OIDC_HDR_X_FORWARDED_PROTO);",
          "1289:  url = oidc_get_current_url(r,  OIDC_HDR_X_FORWARDED_PROTO);",
          "1296:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_PROTO);",
          "1301:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_PROTO);",
          "1306:  url = oidc_get_current_url(r, OIDC_HDR_X_FORWARDED_PROTO);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a394a86be6d5b49b197aa62f0d96c06a0e5e515",
      "candidate_info": {
        "commit_hash": "1a394a86be6d5b49b197aa62f0d96c06a0e5e515",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/1a394a86be6d5b49b197aa62f0d96c06a0e5e515",
        "files": [
          "ChangeLog",
          "Makefile.am",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "test/open-redirect-payload-list.txt",
          "test/test.c"
        ],
        "message": "improve detection of suspicious redirect URLs; add test list\n\nbump to 2.4.11rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:  LICENSE.txt \\",
          "62:  auth_openidc.conf \\",
          "63:  test/public.pem \\",
          "66: noinst_DATA = mod_auth_openidc.la",
          "",
          "[Removed Lines]",
          "64:  test/certificate.pem",
          "",
          "[Added Lines]",
          "64:  test/certificate.pem \\",
          "65:  test/open-redirect-payload-list.txt",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2431: #define OIDC_MAX_URL_LENGTH 8192 * 2",
          "2434:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
          "2435:   char **err_desc) {",
          "2436:  apr_uri_t uri;",
          "",
          "[Removed Lines]",
          "2433: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
          "",
          "[Added Lines]",
          "2433: apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2515:   return FALSE;",
          "2516:  }",
          "2518:  return TRUE;",
          "2519: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2518:  if ((strstr(url, \"/%09\") != NULL) || (strstr(url, \"/%2f\") != NULL)",
          "2519:    || (strstr(url, \"/%68\") != NULL) || (strstr(url, \"/.\") != NULL)",
          "2520:    || (strstr(url, \"/http:\") != NULL) || (strstr(url, \"/https:\") != NULL)",
          "2521:    || (strstr(url, \"/javascript:\") != NULL) || (strstr(url, \"/\u3031\") != NULL)",
          "2522:    || (strstr(url, \"/\u3035\") != NULL) || (strstr(url, \"/\u309d\") != NULL)",
          "2523:    || (strstr(url, \"/\u30fc\") != NULL) || (strstr(url, \"/\u3031\") != NULL)",
          "2524:    || (strstr(url, \"/\uff70\") != NULL) || (strstr(url, \"/<\") != NULL)",
          "2525:    || (strstr(url, \"%01javascript:\") != NULL) || (strstr(url, \"/%5c\") != NULL)) {",
          "2528:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
          "2529:   return FALSE;",
          "2530:  }",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "693: apr_byte_t oidc_proto_validate_access_token(request_rec *r, oidc_provider_t *provider, oidc_jwt_t *jwt, const char *response_type, const char *access_token);",
          "694: apr_byte_t oidc_proto_validate_code(request_rec *r, oidc_provider_t *provider, oidc_jwt_t *jwt, const char *response_type, const char *code);",
          "695: apr_byte_t oidc_proto_validate_nonce(request_rec *r, oidc_cfg *cfg, oidc_provider_t *provider, const char *nonce, oidc_jwt_t *jwt);",
          "698: typedef apr_byte_t (*oidc_authz_match_claim_fn_type)(request_rec *, const char * const, const json_t * const);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "696: apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c, const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str, char **err_desc);",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "97:    return TST_ERR_MSG; \\",
          "98:   }",
          "100: #define TST_RUN(test, pool) message = test(pool); test_nr_run++; if (message) return message;",
          "102: static char *_jwk_parse(apr_pool_t *pool, const char *s, oidc_jwk_t **jwk,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "100: #define TST_ASSERT_BYTE(message, result, expected) \\",
          "101:   if (result != expected) { \\",
          "102:    sprintf(TST_ERR_MSG, TST_FORMAT(\"%s\"), __FUNCTION__, message, result ? \"TRUE\" : \"FALSE\", expected ? \"TRUE\" : \"FALSE\"); \\",
          "103:    return TST_ERR_MSG; \\",
          "104:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1307:  TST_ASSERT_STR(\"test_current_url (10)\", url,",
          "1308:    \"http://[fd04:41b1:1170:28:16b0:446b:9fb7:7118]/private/?foo=bar&param1=value1\");",
          "1310:  return 0;",
          "1311: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1316:  apr_table_set(r->headers_in, \"Host\", \"www.example.com\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1588:  return 0;",
          "1589: }",
          "1591: static char * all_tests(apr_pool_t *pool, request_rec *r) {",
          "1592:  char *message;",
          "1593:  TST_RUN(test_public_key_parse, pool);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1599: #define TST_OPEN_REDIRECT(url, result) \\",
          "1600:   err_str = NULL; \\",
          "1601:   err_desc = NULL; \\",
          "1602:   rc = oidc_validate_redirect_url(r, c, url, TRUE, &err_str, &err_desc); \\",
          "1603:   msg = apr_psprintf(r->pool, \"test validate_redirect_url (%s): %s: %s\", url, err_str, err_desc); \\",
          "1604:   TST_ASSERT_BYTE(msg, rc, result);",
          "1606: static char* test_open_redirect(request_rec *r) {",
          "1607:  apr_byte_t rc = FALSE;",
          "1608:  char *err_str = NULL, *err_desc = NULL, *url = NULL, *msg = NULL;",
          "1609:  char filename[512];",
          "1610:  char line_buf[8096];",
          "1611:  apr_file_t *f;",
          "1612:  size_t line_s;",
          "1613:  char *dir = getenv(\"srcdir\") ? getenv(\"srcdir\") : \".\";",
          "1615:  sprintf((char* )filename, \"%s/%s\", dir, \"/test/open-redirect-payload-list.txt\");",
          "1617:  oidc_cfg *c = ap_get_module_config(r->server->module_config, &auth_openidc_module);",
          "1619:  TST_OPEN_REDIRECT(\"https://www.example.com/somewhere\", TRUE);",
          "1620:  TST_OPEN_REDIRECT(\"https://evil.example.com/somewhere\", FALSE);",
          "1622:  apr_file_open(&f, filename, APR_READ, APR_OS_DEFAULT, r->pool);",
          "1623:  while (1) {",
          "1624:   if (apr_file_gets(line_buf, sizeof(line_buf), f) != APR_SUCCESS)",
          "1625:    break;",
          "1626:   line_s = strlen(line_buf);",
          "1627:   line_buf[--line_s] = '\\0';",
          "1628:   TST_OPEN_REDIRECT(line_buf, FALSE);",
          "1629:  }",
          "1630:  apr_file_close(f);",
          "1632:  return 0;",
          "1633: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1626:  TST_RUN(test_remote_user, r);",
          "1627:  TST_RUN(test_is_auth_capable_request, r);",
          "1629: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "1630:  TST_RUN(test_authz_worker, r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1672:  TST_RUN(test_open_redirect, r);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f98511debd04243b284ca426fe79393addb73d1",
      "candidate_info": {
        "commit_hash": "4f98511debd04243b284ca426fe79393addb73d1",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/4f98511debd04243b284ca426fe79393addb73d1",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "fix Redis command retry after a reconnect; thanks @iainh\n\nrelease 2.4.9.1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d9473b45dcdf402719a6e1aac21ac278df847ce",
      "candidate_info": {
        "commit_hash": "6d9473b45dcdf402719a6e1aac21ac278df847ce",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/6d9473b45dcdf402719a6e1aac21ac278df847ce",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "bump to 2.4.7rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.7-dev],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.7rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "143b63b8b25b2625730fa5db1941aee5613fcd70",
      "candidate_info": {
        "commit_hash": "143b63b8b25b2625730fa5db1941aee5613fcd70",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/143b63b8b25b2625730fa5db1941aee5613fcd70",
        "files": [
          "ChangeLog",
          "auth_openidc.conf",
          "configure.ac",
          "src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h",
          "src/util.c",
          "test/test.c"
        ],
        "message": "add check for Sec-Fetch-Dest header != \"document\" value\n\nto auto-detect requests that are not capable of handling an\nauthentication round trip to the Provider;\nsee https://github.com/zmartzone/mod_auth_openidc/discussions/714;\nthanks @studersi;\nbump to 2.4.10rc0\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "auth_openidc.conf||auth_openidc.conf",
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c",
          "src/mod_auth_openidc.h||src/mod_auth_openidc.h",
          "src/util.c||src/util.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "auth_openidc.conf||auth_openidc.conf": [
          "File: auth_openidc.conf -> auth_openidc.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "809: # Useful in Location/Directory/Proxy path contexts that serve AJAX/Javascript calls and for \"anonymous access\"",
          "810: #",
          "811: # When not defined the default is \"auth\" with auto-detection of XML HTTP requests, which would get \"401\".",
          "816: #",
          "817: # Only for Apache >= 2.4.x:",
          "818: # Since verson 2.4.4 a boolean Apache expression as the second parameter to specify which requests",
          "",
          "[Removed Lines]",
          "812: # The default auto-detection algorithm looks for the \"X-Requested-With: XMLHttpRequest\" header/value,",
          "813: # the presence of Sec-Fetch-Mode header with a value that is not equal to \"navigate\", and/or the absence of",
          "814: \" \"Accept\" header with any of the values \"text/html\" \"application/xhtml+xml\" or \"*/*\"",
          "815: # and returns 401 for such non-browser/non-html clients. See: https://github.com/zmartzone/mod_auth_openidc/wiki/Cookies#tldr",
          "",
          "[Added Lines]",
          "812: # The default auto-detection algorithm looks for the \"X-Requested-With: XMLHttpRequest\" header/value, or",
          "813: # the presence of a Sec-Fetch-Mode header with a value that is not equal to \"navigate\", or the presence of",
          "814: # a Sec-Fetch-Dest header with a value that is not equal to \"document\" or the absence of",
          "815: # an \"Accept\" header with any of the values \"text/html\" \"application/xhtml+xml\" or \"*/*\"",
          "816: # and returns 401 for such non-browser/non-html clients.",
          "817: # See: https://github.com/zmartzone/mod_auth_openidc/wiki/Cookies#tldr",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "820: # See also: https://httpd.apache.org/docs/2.4/expr.html.",
          "821: # E.g to return 401 for cURL based user agents and \"auth\" for any other browsers/user agents:",
          "822: #   OIDCUnAuthAction 401 \"%{HTTP_USER_AGENT} =~ /curl/\"",
          "824: #   OIDCUnAuthAction 401 \"%{HTTP:X-Requested-With} == 'XMLHttpRequest'\"",
          "825: # to return 401 for all user agents that do not send an Accept header that includes a \"text/html\" value:",
          "826: #   OIDCUnAuthAction 401 \"%{HTTP_ACCEPT} !~ m#text/html#\"",
          "831: # To disable auto-detection of XML HTTP request altogether and uncondtionally return \"auth\" for all clients:",
          "832: #   OIDCUnAuthAction auth true",
          "833: # Note that actually *any* expression value in \"OIDCUnAuthAction auth <expr>\" will *always* render \"auth\"",
          "",
          "[Removed Lines]",
          "823: # to effectively override the default XML request detection algorithm by ignoring the Sec-Fetch-Mode and Accept headers:",
          "827: # to return 401 for requests in an iframe or requests that load an image:",
          "828: #   OIDCUnAuthAction 401 \"%{HTTP:Sec-Fetch-Dest} == 'iframe' || %{HTTP:Sec-Fetch-Dest} == 'image'\"",
          "829: # or just as a more complex example, which equals the default XML request detection algorithm:",
          "830: #   OIDCUnAuthAction 401 \"%{HTTP:X-Requested-With} == 'XMLHttpRequest' || ( -n %{HTTP:Sec-Fetch-Mode} && %{HTTP:Sec-Fetch-Mode} != 'navigate' ) || ( ( %{HTTP_ACCEPT} !~ m#text/html# ) && ( %{HTTP_ACCEPT} !~ m#application/xhtml\\+xml# ) && ( %{HTTP_ACCEPT} !~ m#\\*/\\*# ) )\"",
          "",
          "[Added Lines]",
          "825: # to effectively override the default XML request detection algorithm by ignoring the Sec-Fetch-Mode,",
          "826: # Sec-Fetch-Dest and Accept headers:",
          "830: # or as a more complex example, which equals the default XML request detection algorithm:",
          "831: #   OIDCUnAuthAction 401 \"%{HTTP:X-Requested-With} == 'XMLHttpRequest' \\",
          "832: #                     || ( -n %{HTTP:Sec-Fetch-Mode} && %{HTTP:Sec-Fetch-Mode} != 'navigate' ) \\",
          "833: #                     || ( -n %{HTTP:Sec-Fetch-Dest} && %{HTTP:Sec-Fetch-Dest} != 'document' ) \\",
          "834: #                     || (    ( %{HTTP_ACCEPT} !~ m#text/html# ) \\",
          "835: #                          && ( %{HTTP_ACCEPT} !~ m#application/xhtml\\+xml# ) \\",
          "836: #                          && ( %{HTTP_ACCEPT} !~ m#\\*/\\*# ) \\",
          "837: #                        )\"",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.5rc8],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "852: }",
          "859:  if ((oidc_util_hdr_in_x_requested_with_get(r) != NULL)",
          "860:    && (apr_strnatcasecmp(oidc_util_hdr_in_x_requested_with_get(r),",
          "861:      OIDC_HTTP_HDR_VAL_XML_HTTP_REQUEST) == 0))",
          "864:  if ((oidc_util_hdr_in_sec_fetch_mode_get(r) != NULL)",
          "865:    && (apr_strnatcasecmp(oidc_util_hdr_in_sec_fetch_mode_get(r),",
          "866:           OIDC_HTTP_HDR_VAL_NAVIGATE) != 0))",
          "869:  if ((oidc_util_hdr_in_accept_contains(r, OIDC_CONTENT_TYPE_TEXT_HTML)",
          "870:    == FALSE) && (oidc_util_hdr_in_accept_contains(r,",
          "871:      OIDC_CONTENT_TYPE_APP_XHTML_XML) == FALSE)",
          "872:      && (oidc_util_hdr_in_accept_contains(r,",
          "873:        OIDC_CONTENT_TYPE_ANY) == FALSE))",
          "877: }",
          "",
          "[Removed Lines]",
          "857: apr_byte_t oidc_is_xml_http_request(request_rec *r) {",
          "862:   return TRUE;",
          "867:   return TRUE;",
          "874:   return TRUE;",
          "876:  return FALSE;",
          "",
          "[Added Lines]",
          "857: apr_byte_t oidc_is_auth_capable_request(request_rec *r) {",
          "862:   return FALSE;",
          "867:   return FALSE;",
          "869:  if ((oidc_util_hdr_in_sec_fetch_dest_get(r) != NULL)",
          "870:    && (apr_strnatcasecmp(oidc_util_hdr_in_sec_fetch_dest_get(r),",
          "871:           OIDC_HTTP_HDR_VAL_DOCUMENT) != 0))",
          "872:   return FALSE;",
          "879:   return FALSE;",
          "881:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "910:   if ((oidc_dir_cfg_unauth_expr_is_set(r) == FALSE)",
          "912:    return HTTP_UNAUTHORIZED;",
          "913:  }",
          "",
          "[Removed Lines]",
          "911:     && (oidc_is_xml_http_request(r) == TRUE))",
          "",
          "[Added Lines]",
          "916:     && (oidc_is_auth_capable_request(r) == FALSE))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3995:    break;",
          "3996:   case OIDC_UNAUTZ_AUTHENTICATE:",
          "4003:     return AUTHZ_DENIED;",
          "4004:    break;",
          "4005:  }",
          "",
          "[Removed Lines]",
          "4002:    if (oidc_is_xml_http_request(r) == TRUE)",
          "",
          "[Added Lines]",
          "4007:    if (oidc_is_auth_capable_request(r) == FALSE)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4116:    return HTTP_UNAUTHORIZED;",
          "4117:  }",
          "",
          "[Removed Lines]",
          "4115:   if (oidc_is_xml_http_request(r) == TRUE)",
          "",
          "[Added Lines]",
          "4120:   if (oidc_is_auth_capable_request(r) == FALSE)",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.h||src/mod_auth_openidc.h": [
          "File: src/mod_auth_openidc.h -> src/mod_auth_openidc.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "827: #define OIDC_HTTP_HDR_CONTENT_LENGTH                    \"Content-Length\"",
          "828: #define OIDC_HTTP_HDR_X_REQUESTED_WITH                  \"X-Requested-With\"",
          "829: #define OIDC_HTTP_HDR_SEC_FETCH_MODE                    \"Sec-Fetch-Mode\"",
          "830: #define OIDC_HTTP_HDR_ACCEPT                            \"Accept\"",
          "831: #define OIDC_HTTP_HDR_AUTHORIZATION                     \"Authorization\"",
          "832: #define OIDC_HTTP_HDR_X_FORWARDED_PROTO                 \"X-Forwarded-Proto\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "830: #define OIDC_HTTP_HDR_SEC_FETCH_DEST                    \"Sec-Fetch-Dest\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "845: #define OIDC_HTTP_HDR_VAL_XML_HTTP_REQUEST \"XMLHttpRequest\"",
          "846: #define OIDC_HTTP_HDR_VAL_NAVIGATE         \"navigate\"",
          "848: void oidc_util_hdr_in_set(const request_rec *r, const char *name, const char *value);",
          "849: const char *oidc_util_hdr_in_cookie_get(const request_rec *r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "848: #define OIDC_HTTP_HDR_VAL_DOCUMENT         \"document\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "854: const char *oidc_util_hdr_in_content_length_get(const request_rec *r);",
          "855: const char *oidc_util_hdr_in_x_requested_with_get(const request_rec *r);",
          "856: const char* oidc_util_hdr_in_sec_fetch_mode_get(const request_rec *r);",
          "857: const char *oidc_util_hdr_in_accept_get(const request_rec *r);",
          "858: const char *oidc_util_hdr_in_authorization_get(const request_rec *r);",
          "859: const char *oidc_util_hdr_in_x_forwarded_proto_get(const request_rec *r);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "859: const char* oidc_util_hdr_in_sec_fetch_dest_get(const request_rec *r);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "926: void oidc_session_set_issuer(request_rec *r, oidc_session_t *z, const char *issuer);",
          "927: const char * oidc_session_get_issuer(request_rec *r, oidc_session_t *z);",
          "928: void oidc_session_set_client_id(request_rec *r, oidc_session_t *z, const char *client_id);",
          "930: char *oidc_parse_base64(apr_pool_t *pool, const char *input, char **output, int *output_len);",
          "",
          "[Removed Lines]",
          "929: apr_byte_t oidc_is_xml_http_request(request_rec *r);",
          "",
          "[Added Lines]",
          "932: apr_byte_t oidc_is_auth_capable_request(request_rec *r);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2627:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_SEC_FETCH_MODE);",
          "2628: }",
          "2630: const char* oidc_util_hdr_in_accept_get(const request_rec *r) {",
          "2631:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_ACCEPT);",
          "2632: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2630: const char* oidc_util_hdr_in_sec_fetch_dest_get(const request_rec *r) {",
          "2631:  return oidc_util_hdr_in_get(r, OIDC_HTTP_HDR_SEC_FETCH_DEST);",
          "2632: }",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1520:  return 0;",
          "1521: }",
          "1524:  apr_byte_t rc = FALSE;",
          "1526:  apr_table_set(r->headers_in, \"Accept\", \"*/*\");",
          "1530:  apr_table_set(r->headers_in, \"X-Requested-With\", \"XMLHttpRequest\");",
          "1533:  apr_table_unset(r->headers_in, \"X-Requested-With\");",
          "1535:  apr_table_set(r->headers_in, \"Sec-Fetch-Mode\", \"navigate\");",
          "1538:  apr_table_unset(r->headers_in, \"Sec-Fetch-Mode\");",
          "1540:  apr_table_set(r->headers_in, \"Sec-Fetch-Mode\", \"cors\");",
          "1543:  apr_table_unset(r->headers_in, \"Sec-Fetch-Mode\");",
          "1545:  return 0;",
          "1546: }",
          "",
          "[Removed Lines]",
          "1523: static char* test_is_xml_http_request(request_rec *r) {",
          "1527:  rc = oidc_is_xml_http_request(r);",
          "1528:  TST_ASSERT(\"test oidc_is_xml_http_request (1)\", rc == FALSE);",
          "1531:  rc = oidc_is_xml_http_request(r);",
          "1532:  TST_ASSERT(\"test oidc_is_xml_http_request (2)\", rc == TRUE);",
          "1536:  rc = oidc_is_xml_http_request(r);",
          "1537:  TST_ASSERT(\"test oidc_is_xml_http_request (3)\", rc == FALSE);",
          "1541:  rc = oidc_is_xml_http_request(r);",
          "1542:  TST_ASSERT(\"test oidc_is_xml_http_request (4)\", rc == TRUE);",
          "",
          "[Added Lines]",
          "1523: static char* test_is_auth_capable_request(request_rec *r) {",
          "1527:  rc = oidc_is_auth_capable_request(r);",
          "1528:  TST_ASSERT(\"test oidc_is_auth_capable_request (1)\", rc == TRUE);",
          "1531:  rc = oidc_is_auth_capable_request(r);",
          "1532:  TST_ASSERT(\"test oidc_is_auth_capable_request (2)\", rc == FALSE);",
          "1536:  rc = oidc_is_auth_capable_request(r);",
          "1537:  TST_ASSERT(\"test oidc_is_auth_capable_request (3)\", rc == TRUE);",
          "1541:  rc = oidc_is_auth_capable_request(r);",
          "1542:  TST_ASSERT(\"test oidc_is_auth_capable_request (4)\", rc == FALSE);",
          "1545:  apr_table_set(r->headers_in, \"Sec-Fetch-Dest\", \"iframe\");",
          "1546:  rc = oidc_is_auth_capable_request(r);",
          "1547:  TST_ASSERT(\"test oidc_is_auth_capable_request (5)\", rc == FALSE);",
          "1548:  apr_table_unset(r->headers_in, \"Sec-Fetch-Dest\");",
          "1550:  apr_table_set(r->headers_in, \"Sec-Fetch-Dest\", \"image\");",
          "1551:  rc = oidc_is_auth_capable_request(r);",
          "1552:  TST_ASSERT(\"test oidc_is_auth_capable_request (6)\", rc == FALSE);",
          "1553:  apr_table_unset(r->headers_in, \"Sec-Fetch-Dest\");",
          "1555:  apr_table_set(r->headers_in, \"Sec-Fetch-Dest\", \"document\");",
          "1556:  rc = oidc_is_auth_capable_request(r);",
          "1557:  TST_ASSERT(\"test oidc_is_auth_capable_request (7)\", rc == TRUE);",
          "1558:  apr_table_unset(r->headers_in, \"Sec-Fetch-Dest\");",
          "1560:  apr_table_set(r->headers_in, \"Accept\", \"application/json\");",
          "1561:  rc = oidc_is_auth_capable_request(r);",
          "1562:  TST_ASSERT(\"test oidc_is_auth_capable_request (8)\", rc == FALSE);",
          "1563:  apr_table_unset(r->headers_in, \"Accept\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1581:  TST_RUN(test_decode_json_object, r);",
          "1583:  TST_RUN(test_remote_user, r);",
          "1586: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "1587:  TST_RUN(test_authz_worker, r);",
          "",
          "[Removed Lines]",
          "1584:  TST_RUN(test_is_xml_http_request, r);",
          "",
          "[Added Lines]",
          "1604:  TST_RUN(test_is_auth_capable_request, r);",
          "",
          "---------------"
        ]
      }
    }
  ]
}