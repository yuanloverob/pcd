{
  "cve_id": "CVE-2016-5157",
  "cve_desc": "Heap-based buffer overflow in the opj_dwt_interleave_v function in dwt.c in OpenJPEG, as used in PDFium in Google Chrome before 53.0.2785.89 on Windows and OS X and before 53.0.2785.92 on Linux, allows remote attackers to execute arbitrary code via crafted coordinate values in JPEG 2000 data.",
  "repo": "uclouvain/openjpeg",
  "patch_hash": "e078172b1c3f98d2219c37076b238fb759c751ea",
  "patch_info": {
    "commit_hash": "e078172b1c3f98d2219c37076b238fb759c751ea",
    "repo": "uclouvain/openjpeg",
    "commit_url": "https://github.com/uclouvain/openjpeg/commit/e078172b1c3f98d2219c37076b238fb759c751ea",
    "files": [
      "src/lib/openjp2/tcd.c",
      "tests/compare_dump_files.c",
      "tests/nonregression/test_suite.ctest.in"
    ],
    "message": "Add sanity check for tile coordinates (#823)\n\nCoordinates are casted from OPJ_UINT32 to OPJ_INT32\nAdd sanity check for negative values and upper bound becoming lower\nthan lower bound.\nSee also\nhttps://pdfium.googlesource.com/pdfium/+/b6befb2ed2485a3805cddea86dc7574510178ea9",
    "before_after_code_files": [
      "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c",
      "tests/compare_dump_files.c||tests/compare_dump_files.c",
      "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in"
    ]
  },
  "patch_diff": {
    "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c": [
      "File: src/lib/openjp2/tcd.c -> src/lib/openjp2/tcd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "697:  l_tile->x0 = (OPJ_INT32)opj_uint_max(l_tx0, l_image->x0);",
      "698:  l_tile->x1 = (OPJ_INT32)opj_uint_min(opj_uint_adds(l_tx0, l_cp->tdx), l_image->x1);",
      "700:  l_tile->y0 = (OPJ_INT32)opj_uint_max(l_ty0, l_image->y0);",
      "701:  l_tile->y1 = (OPJ_INT32)opj_uint_min(opj_uint_adds(l_ty0, l_cp->tdy), l_image->y1);",
      "704:  if (l_tccp->numresolutions == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "700:  if ((l_tile->x0 < 0) || (l_tile->x1 <= l_tile->x0)) {",
      "701:   opj_event_msg(manager, EVT_ERROR, \"Tile X coordinates are not supported\\n\");",
      "702:   return OPJ_FALSE;",
      "703:  }",
      "708:  if ((l_tile->y0 < 0) || (l_tile->y1 <= l_tile->y0)) {",
      "709:   opj_event_msg(manager, EVT_ERROR, \"Tile Y coordinates are not supported\\n\");",
      "710:   return OPJ_FALSE;",
      "711:  }",
      "",
      "---------------"
    ],
    "tests/compare_dump_files.c||tests/compare_dump_files.c": [
      "File: tests/compare_dump_files.c -> tests/compare_dump_files.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "118:   test_cmp_parameters inParam;",
      "119:   FILE *fbase=NULL, *ftest=NULL;",
      "120:   int same = 0;",
      "126:   if( parse_cmdline_cmp(argc, argv, &inParam) == 1 )",
      "127:     {",
      "",
      "[Removed Lines]",
      "121:   char lbase[256];",
      "122:   char strbase[256];",
      "123:   char ltest[256];",
      "124:   char strtest[256];",
      "",
      "[Added Lines]",
      "121:   char lbase[512];",
      "122:   char strbase[512];",
      "123:   char ltest[512];",
      "124:   char strtest[512];",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "155:   while (fgets(lbase, sizeof(lbase), fbase) && fgets(ltest,sizeof(ltest),ftest))",
      "156:     {",
      "160:     if( nbase != 1 || ntest != 1 )",
      "161:       {",
      "162:       fprintf(stderr, \"could not parse line from files\\n\" );",
      "",
      "[Removed Lines]",
      "157:     int nbase = sscanf(lbase, \"%255[^\\r\\n]\", strbase);",
      "158:     int ntest = sscanf(ltest, \"%255[^\\r\\n]\", strtest);",
      "159:     assert( nbase != 255 && ntest != 255 );",
      "",
      "[Added Lines]",
      "157:     int nbase = sscanf(lbase, \"%511[^\\r\\n]\", strbase);",
      "158:     int ntest = sscanf(ltest, \"%511[^\\r\\n]\", strtest);",
      "159:     assert( nbase != 511 && ntest != 511 );",
      "",
      "---------------"
    ],
    "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in": [
      "File: tests/nonregression/test_suite.ctest.in -> tests/nonregression/test_suite.ctest.in",
      "--- Hunk 1 ---",
      "[Context before]",
      "566: !opj_decompress -i @INPUT_NR_PATH@/issue775-2.j2k -o @TEMP_PATH@/issue775-2.png",
      "567: # issue 818",
      "568: opj_decompress -i @INPUT_NR_PATH@/issue818.jp2 -o @TEMP_PATH@/issue818.png",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "569: # issue 823 (yes, not a typo, test image is issue822)",
      "570: !opj_decompress -i @INPUT_NR_PATH@/issue822.jp2 -o @TEMP_PATH@/issue822.png",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "579b8937eae7e6b6868b8b5c6286a742c10a5130",
      "candidate_info": {
        "commit_hash": "579b8937eae7e6b6868b8b5c6286a742c10a5130",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/579b8937eae7e6b6868b8b5c6286a742c10a5130",
        "files": [
          "src/lib/openjp2/dwt.c",
          "src/lib/openjp2/sparse_array.c",
          "src/lib/openjp2/t1.c",
          "src/lib/openjp2/tcd.c"
        ],
        "message": "Replace uses of size_t by OPJ_SIZE_T",
        "before_after_code_files": [
          "src/lib/openjp2/dwt.c||src/lib/openjp2/dwt.c",
          "src/lib/openjp2/sparse_array.c||src/lib/openjp2/sparse_array.c",
          "src/lib/openjp2/t1.c||src/lib/openjp2/t1.c",
          "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c"
          ],
          "candidate": [
            "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/openjp2/dwt.c||src/lib/openjp2/dwt.c": [
          "File: src/lib/openjp2/dwt.c -> src/lib/openjp2/dwt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:         l_src += 2;",
          "283:     l_src = a + 1 - cas;",
          "285:     i = dn;",
          "",
          "[Removed Lines]",
          "282:     l_dest = b + (size_t)sn * (size_t)x;",
          "",
          "[Added Lines]",
          "282:     l_dest = b + (OPJ_SIZE_T)sn * (OPJ_SIZE_T)x;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "325:         bi += 2;",
          "326:         ai += x;",
          "327:     }",
          "329:     bi = v->mem + 1 - v->cas;",
          "330:     i = v->dn ;",
          "331:     while (i--) {",
          "",
          "[Removed Lines]",
          "328:     ai = a + (v->sn * (size_t)x);",
          "",
          "[Added Lines]",
          "328:     ai = a + (v->sn * (OPJ_SIZE_T)x);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "616: void opj_idwt53_v_final_memcpy(OPJ_INT32* tiledp_col,",
          "617:                                const OPJ_INT32* tmp,",
          "618:                                OPJ_INT32 len,",
          "620: {",
          "621:     OPJ_INT32 i;",
          "622:     for (i = 0; i < len; ++i) {",
          "",
          "[Removed Lines]",
          "619:                                size_t stride)",
          "",
          "[Added Lines]",
          "619:                                OPJ_SIZE_T stride)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "625:                     PARALLEL_COLS_53 * sizeof(OPJ_INT32))",
          "626:            would do but would be a tiny bit slower.",
          "629:                LOAD(&tmp[PARALLEL_COLS_53 * i + 0]));",
          "631:                LOAD(&tmp[PARALLEL_COLS_53 * i + VREG_INT_COUNT]));",
          "632:     }",
          "633: }",
          "",
          "[Removed Lines]",
          "628:         STOREU(&tiledp_col[(size_t)i * stride + 0],",
          "630:         STOREU(&tiledp_col[(size_t)i * stride + VREG_INT_COUNT],",
          "",
          "[Added Lines]",
          "628:         STOREU(&tiledp_col[(OPJ_SIZE_T)i * stride + 0],",
          "630:         STOREU(&tiledp_col[(OPJ_SIZE_T)i * stride + VREG_INT_COUNT],",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "639:     const OPJ_INT32 sn,",
          "640:     const OPJ_INT32 len,",
          "641:     OPJ_INT32* tiledp_col,",
          "643: {",
          "644:     const OPJ_INT32* in_even = &tiledp_col[0];",
          "647:     OPJ_INT32 i;",
          "649:     VREG d1c_0, d1n_0, s1n_0, s0c_0, s0n_0;",
          "650:     VREG d1c_1, d1n_1, s1n_1, s0c_1, s0n_1;",
          "651:     const VREG two = LOAD_CST(2);",
          "",
          "[Removed Lines]",
          "642:     const size_t stride)",
          "645:     const OPJ_INT32* in_odd = &tiledp_col[(size_t)sn * stride];",
          "648:     size_t j;",
          "",
          "[Added Lines]",
          "642:     const OPJ_SIZE_T stride)",
          "645:     const OPJ_INT32* in_odd = &tiledp_col[(OPJ_SIZE_T)sn * stride];",
          "648:     OPJ_SIZE_T j;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "667:     s1n_0 = LOADU(in_even + 0);",
          "668:     s1n_1 = LOADU(in_even + VREG_INT_COUNT);",
          "",
          "[Removed Lines]",
          "665:     assert((size_t)tmp % (sizeof(OPJ_INT32) * VREG_INT_COUNT) == 0);",
          "",
          "[Added Lines]",
          "665:     assert((OPJ_SIZE_T)tmp % (sizeof(OPJ_INT32) * VREG_INT_COUNT) == 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "705:     if (len & 1) {",
          "706:         VREG tmp_len_minus_1;",
          "709:         tmp_len_minus_1 = SUB(s1n_0, SAR(ADD3(d1n_0, d1n_0, two), 2));",
          "710:         STORE(tmp + PARALLEL_COLS_53 * (len - 1), tmp_len_minus_1);",
          "",
          "[Removed Lines]",
          "707:         s1n_0 = LOADU(in_even + (size_t)((len - 1) / 2) * stride);",
          "",
          "[Added Lines]",
          "707:         s1n_0 = LOADU(in_even + (OPJ_SIZE_T)((len - 1) / 2) * stride);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "712:         STORE(tmp + PARALLEL_COLS_53 * (len - 2),",
          "713:               ADD(d1n_0, SAR(ADD(s0n_0, tmp_len_minus_1), 1)));",
          "717:         tmp_len_minus_1 = SUB(s1n_1, SAR(ADD3(d1n_1, d1n_1, two), 2));",
          "718:         STORE(tmp + PARALLEL_COLS_53 * (len - 1) + VREG_INT_COUNT,",
          "",
          "[Removed Lines]",
          "715:         s1n_1 = LOADU(in_even + (size_t)((len - 1) / 2) * stride + VREG_INT_COUNT);",
          "",
          "[Added Lines]",
          "715:         s1n_1 = LOADU(in_even + (OPJ_SIZE_T)((len - 1) / 2) * stride + VREG_INT_COUNT);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "740:     const OPJ_INT32 sn,",
          "741:     const OPJ_INT32 len,",
          "742:     OPJ_INT32* tiledp_col,",
          "744: {",
          "745:     OPJ_INT32 i;",
          "748:     VREG s1_0, s2_0, dc_0, dn_0;",
          "749:     VREG s1_1, s2_1, dc_1, dn_1;",
          "750:     const VREG two = LOAD_CST(2);",
          "753:     const OPJ_INT32* in_odd = &tiledp_col[0];",
          "755:     assert(len > 2);",
          "",
          "[Removed Lines]",
          "743:     const size_t stride)",
          "746:     size_t j;",
          "752:     const OPJ_INT32* in_even = &tiledp_col[(size_t)sn * stride];",
          "",
          "[Added Lines]",
          "743:     const OPJ_SIZE_T stride)",
          "746:     OPJ_SIZE_T j;",
          "752:     const OPJ_INT32* in_even = &tiledp_col[(OPJ_SIZE_T)sn * stride];",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "769:     s1_0 = LOADU(in_even + stride);",
          "",
          "[Removed Lines]",
          "767:     assert((size_t)tmp % (sizeof(OPJ_INT32) * VREG_INT_COUNT) == 0);",
          "",
          "[Added Lines]",
          "767:     assert((OPJ_SIZE_T)tmp % (sizeof(OPJ_INT32) * VREG_INT_COUNT) == 0);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "810:     if (!(len & 1)) {",
          "813:                    SAR(ADD3(s1_0, s1_0, two), 2));",
          "815:                    SAR(ADD3(s1_1, s1_1, two), 2));",
          "",
          "[Removed Lines]",
          "812:         dn_0 = SUB(LOADU(in_odd + (size_t)(len / 2 - 1) * stride),",
          "814:         dn_1 = SUB(LOADU(in_odd + (size_t)(len / 2 - 1) * stride + VREG_INT_COUNT),",
          "",
          "[Added Lines]",
          "812:         dn_0 = SUB(LOADU(in_odd + (OPJ_SIZE_T)(len / 2 - 1) * stride),",
          "814:         dn_1 = SUB(LOADU(in_odd + (OPJ_SIZE_T)(len / 2 - 1) * stride + VREG_INT_COUNT),",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "851:                              const OPJ_INT32 sn,",
          "852:                              const OPJ_INT32 len,",
          "853:                              OPJ_INT32* tiledp_col,",
          "855: {",
          "856:     OPJ_INT32 i, j;",
          "857:     OPJ_INT32 d1c, d1n, s1n, s0c, s0n;",
          "",
          "[Removed Lines]",
          "854:                              const size_t stride)",
          "",
          "[Added Lines]",
          "854:                              const OPJ_SIZE_T stride)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "864:     s1n = tiledp_col[0];",
          "866:     s0n = s1n - ((d1n + 1) >> 1);",
          "868:     for (i = 0, j = 0; i < (len - 3); i += 2, j++) {",
          "869:         d1c = d1n;",
          "870:         s0c = s0n;",
          "875:         s0n = s1n - ((d1c + d1n + 2) >> 2);",
          "",
          "[Removed Lines]",
          "865:     d1n = tiledp_col[(size_t)sn * stride];",
          "872:         s1n = tiledp_col[(size_t)(j + 1) * stride];",
          "873:         d1n = tiledp_col[(size_t)(sn + j + 1) * stride];",
          "",
          "[Added Lines]",
          "865:     d1n = tiledp_col[(OPJ_SIZE_T)sn * stride];",
          "872:         s1n = tiledp_col[(OPJ_SIZE_T)(j + 1) * stride];",
          "873:         d1n = tiledp_col[(OPJ_SIZE_T)(sn + j + 1) * stride];",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "883:     if (len & 1) {",
          "884:         tmp[len - 1] =",
          "886:             ((d1n + 1) >> 1);",
          "887:         tmp[len - 2] = d1n + ((s0n + tmp[len - 1]) >> 1);",
          "888:     } else {",
          "",
          "[Removed Lines]",
          "885:             tiledp_col[(size_t)((len - 1) / 2) * stride] -",
          "",
          "[Added Lines]",
          "885:             tiledp_col[(OPJ_SIZE_T)((len - 1) / 2) * stride] -",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "890:     }",
          "892:     for (i = 0; i < len; ++i) {",
          "894:     }",
          "895: }",
          "",
          "[Removed Lines]",
          "893:         tiledp_col[(size_t)i * stride] = tmp[i];",
          "",
          "[Added Lines]",
          "893:         tiledp_col[(OPJ_SIZE_T)i * stride] = tmp[i];",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "901:                              const OPJ_INT32 sn,",
          "902:                              const OPJ_INT32 len,",
          "903:                              OPJ_INT32* tiledp_col,",
          "905: {",
          "906:     OPJ_INT32 i, j;",
          "907:     OPJ_INT32 s1, s2, dc, dn;",
          "909:     const OPJ_INT32* in_odd = &tiledp_col[0];",
          "911:     assert(len > 2);",
          "",
          "[Removed Lines]",
          "904:                              const size_t stride)",
          "908:     const OPJ_INT32* in_even = &tiledp_col[(size_t)sn * stride];",
          "",
          "[Added Lines]",
          "904:                              const OPJ_SIZE_T stride)",
          "908:     const OPJ_INT32* in_even = &tiledp_col[(OPJ_SIZE_T)sn * stride];",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "918:     tmp[0] = in_even[0] + dc;",
          "919:     for (i = 1, j = 1; i < (len - 2 - !(len & 1)); i += 2, j++) {",
          "924:         tmp[i  ] = dc;",
          "925:         tmp[i + 1] = s1 + ((dn + dc) >> 1);",
          "",
          "[Removed Lines]",
          "921:         s2 = in_even[(size_t)(j + 1) * stride];",
          "923:         dn = in_odd[(size_t)j * stride] - ((s1 + s2 + 2) >> 2);",
          "",
          "[Added Lines]",
          "921:         s2 = in_even[(OPJ_SIZE_T)(j + 1) * stride];",
          "923:         dn = in_odd[(OPJ_SIZE_T)j * stride] - ((s1 + s2 + 2) >> 2);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "929:     }",
          "930:     tmp[i] = dc;",
          "931:     if (!(len & 1)) {",
          "933:         tmp[len - 2] = s1 + ((dn + dc) >> 1);",
          "934:         tmp[len - 1] = dn;",
          "935:     } else {",
          "",
          "[Removed Lines]",
          "932:         dn = in_odd[(size_t)(len / 2 - 1) * stride] - ((s1 + 1) >> 1);",
          "",
          "[Added Lines]",
          "932:         dn = in_odd[(OPJ_SIZE_T)(len / 2 - 1) * stride] - ((s1 + 1) >> 1);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "937:     }",
          "939:     for (i = 0; i < len; ++i) {",
          "941:     }",
          "942: }",
          "",
          "[Removed Lines]",
          "940:         tiledp_col[(size_t)i * stride] = tmp[i];",
          "",
          "[Added Lines]",
          "940:         tiledp_col[(OPJ_SIZE_T)i * stride] = tmp[i];",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "949: static void opj_idwt53_v(const opj_dwt_t *dwt,",
          "950:                          OPJ_INT32* tiledp_col,",
          "952:                          OPJ_INT32 nb_cols)",
          "953: {",
          "954: #ifdef STANDARD_SLOW_VERSION",
          "",
          "[Removed Lines]",
          "951:                          size_t stride,",
          "",
          "[Added Lines]",
          "951:                          OPJ_SIZE_T stride,",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "996:             OPJ_INT32* out = dwt->mem;",
          "997:             for (c = 0; c < nb_cols; c++, tiledp_col++) {",
          "998:                 OPJ_INT32 i;",
          "1000:                 const OPJ_INT32* in_odd = &tiledp_col[0];",
          "1002:                 out[1] = in_odd[0] - ((in_even[0] + 1) >> 1);",
          "1003:                 out[0] = in_even[0] + out[1];",
          "1005:                 for (i = 0; i < len; ++i) {",
          "1007:                 }",
          "1008:             }",
          "",
          "[Removed Lines]",
          "999:                 const OPJ_INT32* in_even = &tiledp_col[(size_t)sn * stride];",
          "1006:                     tiledp_col[(size_t)i * stride] = out[i];",
          "",
          "[Added Lines]",
          "999:                 const OPJ_INT32* in_even = &tiledp_col[(OPJ_SIZE_T)sn * stride];",
          "1006:                     tiledp_col[(OPJ_SIZE_T)i * stride] = out[i];",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1118:     opj_tcd_resolution_t * l_cur_res = 0;",
          "1119:     opj_tcd_resolution_t * l_last_res = 0;",
          "",
          "[Removed Lines]",
          "1116:     size_t l_data_size;",
          "",
          "[Added Lines]",
          "1116:     OPJ_SIZE_T l_data_size;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1343:     job = (opj_dwd_decode_v_job_t*)user_data;",
          "1344:     for (j = job->min_j; j + PARALLEL_COLS_53 <= job->max_j;",
          "1345:             j += PARALLEL_COLS_53) {",
          "1347:                      PARALLEL_COLS_53);",
          "1348:     }",
          "1349:     if (j < job->max_j)",
          "1351:                      (OPJ_INT32)(job->max_j - j));",
          "1353:     opj_aligned_free(job->v.mem);",
          "",
          "[Removed Lines]",
          "1346:         opj_idwt53_v(&job->v, &job->tiledp[j], (size_t)job->w,",
          "1350:         opj_idwt53_v(&job->v, &job->tiledp[j], (size_t)job->w,",
          "",
          "[Added Lines]",
          "1346:         opj_idwt53_v(&job->v, &job->tiledp[j], (OPJ_SIZE_T)job->w,",
          "1350:         opj_idwt53_v(&job->v, &job->tiledp[j], (OPJ_SIZE_T)job->w,",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1374:     OPJ_UINT32 w = (OPJ_UINT32)(tilec->resolutions[tilec->minimum_num_resolutions -",
          "1375:                                                                1].x1 -",
          "1376:                                 tilec->resolutions[tilec->minimum_num_resolutions - 1].x0);",
          "1378:     int num_threads;",
          "1380:     if (numres == 1U) {",
          "",
          "[Removed Lines]",
          "1377:     size_t h_mem_size;",
          "",
          "[Added Lines]",
          "1377:     OPJ_SIZE_T h_mem_size;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1416:         if (num_threads <= 1 || rh <= 1) {",
          "1417:             for (j = 0; j < rh; ++j) {",
          "1419:             }",
          "1420:         } else {",
          "1421:             OPJ_UINT32 num_jobs = (OPJ_UINT32)num_threads;",
          "",
          "[Removed Lines]",
          "1418:                 opj_idwt53_h(&h, &tiledp[(size_t)j * w]);",
          "",
          "[Added Lines]",
          "1418:                 opj_idwt53_h(&h, &tiledp[(OPJ_SIZE_T)j * w]);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1467:         if (num_threads <= 1 || rw <= 1) {",
          "1468:             for (j = 0; j + PARALLEL_COLS_53 <= rw;",
          "1469:                     j += PARALLEL_COLS_53) {",
          "1471:             }",
          "1472:             if (j < rw) {",
          "1474:             }",
          "1475:         } else {",
          "1476:             OPJ_UINT32 num_jobs = (OPJ_UINT32)num_threads;",
          "",
          "[Removed Lines]",
          "1470:                 opj_idwt53_v(&v, &tiledp[j], (size_t)w, PARALLEL_COLS_53);",
          "1473:                 opj_idwt53_v(&v, &tiledp[j], (size_t)w, (OPJ_INT32)(rw - j));",
          "",
          "[Added Lines]",
          "1470:                 opj_idwt53_v(&v, &tiledp[j], (OPJ_SIZE_T)w, PARALLEL_COLS_53);",
          "1473:                 opj_idwt53_v(&v, &tiledp[j], (OPJ_SIZE_T)w, (OPJ_INT32)(rw - j));",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1922:     OPJ_UINT32 rh = (OPJ_UINT32)(tr->y1 -",
          "",
          "[Removed Lines]",
          "1925:     size_t h_mem_size;",
          "",
          "[Added Lines]",
          "1925:     OPJ_SIZE_T h_mem_size;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2152:     OPJ_UINT32 x1 = dwt->win_l_x1;",
          "2154:     for (k = 0; k < 2; ++k) {",
          "2158:             for (i = x0; i < x1; ++i) {",
          "2159:                 OPJ_UINT32 j = i;",
          "",
          "[Removed Lines]",
          "2155:         if (remaining_height >= 4 && ((size_t) a & 0x0f) == 0 &&",
          "2156:                 ((size_t) bi & 0x0f) == 0 && (width & 0x0f) == 0) {",
          "",
          "[Added Lines]",
          "2155:         if (remaining_height >= 4 && ((OPJ_SIZE_T) a & 0x0f) == 0 &&",
          "2156:                 ((OPJ_SIZE_T) bi & 0x0f) == 0 && (width & 0x0f) == 0) {",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2230:     OPJ_UINT32 i;",
          "2232:     for (i = dwt->win_l_x0; i < dwt->win_l_x1; ++i) {",
          "2235:     }",
          "2238:     bi = dwt->wavelet + 1 - dwt->cas;",
          "2240:     for (i = dwt->win_h_x0; i < dwt->win_h_x1; ++i) {",
          "2243:     }",
          "2244: }",
          "",
          "[Removed Lines]",
          "2233:         memcpy(&bi[i * 2], &a[i * (size_t)width],",
          "2234:                (size_t)nb_elts_read * sizeof(OPJ_FLOAT32));",
          "2237:     a += (OPJ_UINT32)dwt->sn * (size_t)width;",
          "2241:         memcpy(&bi[i * 2], &a[i * (size_t)width],",
          "2242:                (size_t)nb_elts_read * sizeof(OPJ_FLOAT32));",
          "",
          "[Added Lines]",
          "2233:         memcpy(&bi[i * 2], &a[i * (OPJ_SIZE_T)width],",
          "2234:                (OPJ_SIZE_T)nb_elts_read * sizeof(OPJ_FLOAT32));",
          "2237:     a += (OPJ_UINT32)dwt->sn * (OPJ_SIZE_T)width;",
          "2241:         memcpy(&bi[i * 2], &a[i * (OPJ_SIZE_T)width],",
          "2242:                (OPJ_SIZE_T)nb_elts_read * sizeof(OPJ_FLOAT32));",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2497:                                                                1].x1 -",
          "2498:                                 tilec->resolutions[tilec->minimum_num_resolutions - 1].x0);",
          "2502:     l_data_size = opj_dwt_max_resolution(res, numres);",
          "",
          "[Removed Lines]",
          "2500:     size_t l_data_size;",
          "",
          "[Added Lines]",
          "2500:     OPJ_SIZE_T l_data_size;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2547:             for (k = 0; k < rw; k++) {",
          "2548:                 aj[k      ] = h.wavelet[k].f[0];",
          "2552:             }",
          "2554:             aj += w * 4;",
          "",
          "[Removed Lines]",
          "2549:                 aj[k + (size_t)w  ] = h.wavelet[k].f[1];",
          "2550:                 aj[k + (size_t)w * 2] = h.wavelet[k].f[2];",
          "2551:                 aj[k + (size_t)w * 3] = h.wavelet[k].f[3];",
          "",
          "[Added Lines]",
          "2549:                 aj[k + (OPJ_SIZE_T)w  ] = h.wavelet[k].f[1];",
          "2550:                 aj[k + (OPJ_SIZE_T)w * 2] = h.wavelet[k].f[2];",
          "2551:                 aj[k + (OPJ_SIZE_T)w * 3] = h.wavelet[k].f[3];",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2561:             for (k = 0; k < rw; k++) {",
          "2562:                 switch (rh - j) {",
          "2563:                 case 3:",
          "2566:                 case 2:",
          "2569:                 case 1:",
          "2570:                     aj[k] = h.wavelet[k].f[0];",
          "",
          "[Removed Lines]",
          "2564:                     aj[k + (size_t)w * 2] = h.wavelet[k].f[2];",
          "2567:                     aj[k + (size_t)w  ] = h.wavelet[k].f[1];",
          "",
          "[Added Lines]",
          "2564:                     aj[k + (OPJ_SIZE_T)w * 2] = h.wavelet[k].f[2];",
          "2567:                     aj[k + (OPJ_SIZE_T)w  ] = h.wavelet[k].f[1];",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2587:             opj_v4dwt_decode(&v);",
          "2589:             for (k = 0; k < rh; ++k) {",
          "2591:             }",
          "2592:             aj += 4;",
          "2593:         }",
          "",
          "[Removed Lines]",
          "2590:                 memcpy(&aj[k * (size_t)w], &v.wavelet[k], 4 * sizeof(OPJ_FLOAT32));",
          "",
          "[Added Lines]",
          "2590:                 memcpy(&aj[k * (OPJ_SIZE_T)w], &v.wavelet[k], 4 * sizeof(OPJ_FLOAT32));",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2601:             opj_v4dwt_decode(&v);",
          "2603:             for (k = 0; k < rh; ++k) {",
          "2605:             }",
          "2606:         }",
          "2607:     }",
          "",
          "[Removed Lines]",
          "2604:                 memcpy(&aj[k * (size_t)w], &v.wavelet[k], (size_t)j * sizeof(OPJ_FLOAT32));",
          "",
          "[Added Lines]",
          "2604:                 memcpy(&aj[k * (OPJ_SIZE_T)w], &v.wavelet[k],",
          "2605:                        (OPJ_SIZE_T)j * sizeof(OPJ_FLOAT32));",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2631:     OPJ_UINT32 rh = (OPJ_UINT32)(tr->y1 -",
          "",
          "[Removed Lines]",
          "2634:     size_t l_data_size;",
          "",
          "[Added Lines]",
          "2635:     OPJ_SIZE_T l_data_size;",
          "",
          "---------------"
        ],
        "src/lib/openjp2/sparse_array.c||src/lib/openjp2/sparse_array.c": [
          "File: src/lib/openjp2/sparse_array.c -> src/lib/openjp2/sparse_array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:             if (is_read_op) {",
          "143:                 if (src_block == NULL) {",
          "144:                     if (buf_col_stride == 1) {",
          "146:                                               (x - x0) * buf_col_stride;",
          "147:                         for (j = 0; j < y_incr; j++) {",
          "148:                             memset(dest_ptr, 0, sizeof(OPJ_INT32) * x_incr);",
          "149:                             dest_ptr += buf_line_stride;",
          "150:                         }",
          "151:                     } else {",
          "153:                                               (x - x0) * buf_col_stride;",
          "154:                         for (j = 0; j < y_incr; j++) {",
          "155:                             OPJ_UINT32 k;",
          "",
          "[Removed Lines]",
          "145:                         OPJ_INT32* dest_ptr = buf + (y - y0) * (size_t)buf_line_stride +",
          "152:                         OPJ_INT32* dest_ptr = buf + (y - y0) * (size_t)buf_line_stride +",
          "",
          "[Added Lines]",
          "145:                         OPJ_INT32* dest_ptr = buf + (y - y0) * (OPJ_SIZE_T)buf_line_stride +",
          "152:                         OPJ_INT32* dest_ptr = buf + (y - y0) * (OPJ_SIZE_T)buf_line_stride +",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "161:                     }",
          "162:                 } else {",
          "163:                     const OPJ_INT32* OPJ_RESTRICT src_ptr = src_block + block_y_offset *",
          "165:                     if (buf_col_stride == 1) {",
          "167:                                                            (x - x0) * buf_col_stride;",
          "168:                         if (x_incr == 4) {",
          "",
          "[Removed Lines]",
          "164:                                                             (size_t)block_width + block_x_offset;",
          "166:                         OPJ_INT32* OPJ_RESTRICT dest_ptr = buf + (y - y0) * (size_t)buf_line_stride +",
          "",
          "[Added Lines]",
          "164:                                                             (OPJ_SIZE_T)block_width + block_x_offset;",
          "166:                         OPJ_INT32* OPJ_RESTRICT dest_ptr = buf + (y - y0) * (OPJ_SIZE_T)buf_line_stride",
          "167:                                                            +",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "181:                             }",
          "182:                         }",
          "183:                     } else {",
          "185:                                                            (x - x0) * buf_col_stride;",
          "186:                         if (x_incr == 1) {",
          "187:                             for (j = 0; j < y_incr; j++) {",
          "",
          "[Removed Lines]",
          "184:                         OPJ_INT32* OPJ_RESTRICT dest_ptr = buf + (y - y0) * (size_t)buf_line_stride +",
          "",
          "[Added Lines]",
          "185:                         OPJ_INT32* OPJ_RESTRICT dest_ptr = buf + (y - y0) * (OPJ_SIZE_T)buf_line_stride",
          "186:                                                            +",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "241:                 if (buf_col_stride == 1) {",
          "242:                     OPJ_INT32* OPJ_RESTRICT dest_ptr = src_block + block_y_offset *",
          "244:                     const OPJ_INT32* OPJ_RESTRICT src_ptr = buf + (y - y0) *",
          "246:                     if (x_incr == 4) {",
          "",
          "[Removed Lines]",
          "243:                                                        (size_t)block_width + block_x_offset;",
          "245:                                                             (size_t)buf_line_stride + (x - x0) * buf_col_stride;",
          "",
          "[Added Lines]",
          "245:                                                        (OPJ_SIZE_T)block_width + block_x_offset;",
          "247:                                                             (OPJ_SIZE_T)buf_line_stride + (x - x0) * buf_col_stride;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "260:                     }",
          "261:                 } else {",
          "262:                     OPJ_INT32* OPJ_RESTRICT dest_ptr = src_block + block_y_offset *",
          "264:                     const OPJ_INT32* OPJ_RESTRICT src_ptr = buf + (y - y0) *",
          "266:                     if (x_incr == 1) {",
          "267:                         for (j = 0; j < y_incr; j++) {",
          "",
          "[Removed Lines]",
          "263:                                                        (size_t)block_width + block_x_offset;",
          "265:                                                             (size_t)buf_line_stride + (x - x0) * buf_col_stride;",
          "",
          "[Added Lines]",
          "265:                                                        (OPJ_SIZE_T)block_width + block_x_offset;",
          "267:                                                             (OPJ_SIZE_T)buf_line_stride + (x - x0) * buf_col_stride;",
          "",
          "---------------"
        ],
        "src/lib/openjp2/t1.c||src/lib/openjp2/t1.c": [
          "File: src/lib/openjp2/t1.c -> src/lib/openjp2/t1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1452:     if (!t1->encoder) {",
          "1453:         OPJ_UINT32 datasize = w * h;",
          "1456:             opj_aligned_free(t1->data);",
          "1457:             t1->data = (OPJ_INT32*) opj_aligned_malloc(datasize * sizeof(OPJ_INT32));",
          "1458:             if (!t1->data) {",
          "",
          "[Removed Lines]",
          "1455:         if (datasize > (size_t)t1->datasize) {",
          "",
          "[Added Lines]",
          "1455:         if (datasize > t1->datasize) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1751:             }",
          "1752:         }",
          "1753:     } else if (tccp->qmfbid == 1) {",
          "1756:         for (j = 0; j < cblk_h; ++j) {",
          "1757:             i = 0;",
          "1758:             for (; i < (cblk_w & ~(OPJ_UINT32)3U); i += 4U) {",
          "",
          "[Removed Lines]",
          "1754:         OPJ_INT32* OPJ_RESTRICT tiledp = &tilec->data[(size_t)y * tile_w +",
          "1755:                                                    (size_t)x];",
          "",
          "[Added Lines]",
          "1754:         OPJ_INT32* OPJ_RESTRICT tiledp = &tilec->data[(OPJ_SIZE_T)y * tile_w +",
          "1755:                                                        (OPJ_SIZE_T)x];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1760:                 OPJ_INT32 tmp1 = datap[(j * cblk_w) + i + 1U];",
          "1761:                 OPJ_INT32 tmp2 = datap[(j * cblk_w) + i + 2U];",
          "1762:                 OPJ_INT32 tmp3 = datap[(j * cblk_w) + i + 3U];",
          "1767:             }",
          "1768:             for (; i < cblk_w; ++i) {",
          "1769:                 OPJ_INT32 tmp = datap[(j * cblk_w) + i];",
          "1771:             }",
          "1772:         }",
          "1776:         for (j = 0; j < cblk_h; ++j) {",
          "1777:             OPJ_FLOAT32* OPJ_RESTRICT tiledp2 = tiledp;",
          "1778:             for (i = 0; i < cblk_w; ++i) {",
          "",
          "[Removed Lines]",
          "1763:                 ((OPJ_INT32*)tiledp)[(j * (size_t)tile_w) + i + 0U] = tmp0 / 2;",
          "1764:                 ((OPJ_INT32*)tiledp)[(j * (size_t)tile_w) + i + 1U] = tmp1 / 2;",
          "1765:                 ((OPJ_INT32*)tiledp)[(j * (size_t)tile_w) + i + 2U] = tmp2 / 2;",
          "1766:                 ((OPJ_INT32*)tiledp)[(j * (size_t)tile_w) + i + 3U] = tmp3 / 2;",
          "1770:                 ((OPJ_INT32*)tiledp)[(j * (size_t)tile_w) + i] = tmp / 2;",
          "1774:         OPJ_FLOAT32* OPJ_RESTRICT tiledp = (OPJ_FLOAT32*) &tilec->data[(size_t)y *",
          "1775:                                                      tile_w + (size_t)x];",
          "",
          "[Added Lines]",
          "1763:                 ((OPJ_INT32*)tiledp)[(j * (OPJ_SIZE_T)tile_w) + i + 0U] = tmp0 / 2;",
          "1764:                 ((OPJ_INT32*)tiledp)[(j * (OPJ_SIZE_T)tile_w) + i + 1U] = tmp1 / 2;",
          "1765:                 ((OPJ_INT32*)tiledp)[(j * (OPJ_SIZE_T)tile_w) + i + 2U] = tmp2 / 2;",
          "1766:                 ((OPJ_INT32*)tiledp)[(j * (OPJ_SIZE_T)tile_w) + i + 3U] = tmp3 / 2;",
          "1770:                 ((OPJ_INT32*)tiledp)[(j * (OPJ_SIZE_T)tile_w) + i] = tmp / 2;",
          "1774:         OPJ_FLOAT32* OPJ_RESTRICT tiledp = (OPJ_FLOAT32*) &tilec->data[(OPJ_SIZE_T)y *",
          "1775:                                                          tile_w + (OPJ_SIZE_T)x];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2134:                         OPJ_UINT32 cblk_w;",
          "2135:                         OPJ_UINT32 cblk_h;",
          "2136:                         OPJ_UINT32 i, j, tileLineAdvance;",
          "2139:                         OPJ_INT32 x = cblk->x0 - band->x0;",
          "2140:                         OPJ_INT32 y = cblk->y0 - band->y0;",
          "",
          "[Removed Lines]",
          "2137:                         size_t tileIndex = 0;",
          "",
          "[Added Lines]",
          "2137:                         OPJ_SIZE_T tileIndex = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2158:                         cblk_h = t1->h;",
          "2159:                         tileLineAdvance = tile_w - cblk_w;",
          "2162:                         t1->data = tiledp;",
          "2163:                         t1->data_stride = tile_w;",
          "2164:                         if (tccp->qmfbid == 1) {",
          "",
          "[Removed Lines]",
          "2161:                         tiledp = &tilec->data[(size_t)y * tile_w + (size_t)x];",
          "",
          "[Added Lines]",
          "2161:                         tiledp = &tilec->data[(OPJ_SIZE_T)y * tile_w + (OPJ_SIZE_T)x];",
          "",
          "---------------"
        ],
        "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c": [
          "File: src/lib/openjp2/tcd.c -> src/lib/openjp2/tcd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "807:         }",
          "809:         if (isEncoder) {",
          "817:             if (h > 0 && w > SIZE_MAX / h) {",
          "",
          "[Removed Lines]",
          "810:             size_t l_tile_data_size;",
          "813:             size_t w = (size_t)(l_tilec->x1 - l_tilec->x0);",
          "814:             size_t h = (size_t)(l_tilec->y1 - l_tilec->y0);",
          "",
          "[Added Lines]",
          "810:             OPJ_SIZE_T l_tile_data_size;",
          "813:             OPJ_SIZE_T w = (OPJ_SIZE_T)(l_tilec->x1 - l_tilec->x0);",
          "814:             OPJ_SIZE_T h = (OPJ_SIZE_T)(l_tilec->y1 - l_tilec->y0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1366:                 p_cstr_info->tile[p_tile_no].pdy[i] = (int)l_tccp->prch[i];",
          "1367:             }",
          "1368:             p_cstr_info->tile[p_tile_no].packet = (opj_packet_info_t*) opj_calloc((",
          "1370:                                                   sizeof(opj_packet_info_t));",
          "1371:             if (!p_cstr_info->tile[p_tile_no].packet) {",
          "",
          "[Removed Lines]",
          "1369:                     size_t)p_cstr_info->numcomps * (size_t)p_cstr_info->numlayers * l_num_packs,",
          "",
          "[Added Lines]",
          "1369:                     OPJ_SIZE_T)p_cstr_info->numcomps * (OPJ_SIZE_T)p_cstr_info->numlayers *",
          "1370:                                                   l_num_packs,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1462:             opj_tcd_tilecomp_t* tilec = &(p_tcd->tcd_image->tiles->comps[compno]);",
          "1463:             opj_tcd_resolution_t *l_res = &",
          "1464:                                           (tilec->resolutions[tilec->minimum_num_resolutions - 1]);",
          "1472:             if (res_h > 0 && res_w > SIZE_MAX / res_h) {",
          "",
          "[Removed Lines]",
          "1465:             size_t l_data_size;",
          "1468:             size_t res_w = (size_t)(l_res->x1 - l_res->x0);",
          "1469:             size_t res_h = (size_t)(l_res->y1 - l_res->y0);",
          "",
          "[Added Lines]",
          "1466:             OPJ_SIZE_T l_data_size;",
          "1469:             OPJ_SIZE_T res_w = (OPJ_SIZE_T)(l_res->x1 - l_res->x0);",
          "1470:             OPJ_SIZE_T res_h = (OPJ_SIZE_T)(l_res->y1 - l_res->y0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1577:             opj_tcd_tilecomp_t* tilec = &(p_tcd->tcd_image->tiles->comps[compno]);",
          "1578:             opj_image_comp_t* image_comp = &(p_tcd->image->comps[compno]);",
          "1579:             opj_tcd_resolution_t *res = tilec->resolutions + image_comp->resno_decoded;",
          "1584:             opj_image_data_free(tilec->data_win);",
          "1585:             tilec->data_win = NULL;",
          "",
          "[Removed Lines]",
          "1580:             size_t w = res->win_x1 - res->win_x0;",
          "1581:             size_t h = res->win_y1 - res->win_y0;",
          "1582:             size_t l_data_size;",
          "",
          "[Added Lines]",
          "1581:             OPJ_SIZE_T w = res->win_x1 - res->win_x0;",
          "1582:             OPJ_SIZE_T h = res->win_y1 - res->win_y0;",
          "1583:             OPJ_SIZE_T l_data_size;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1980:                                           p_tcd->image->comps[1].resno_decoded;",
          "1981:         opj_tcd_resolution_t* res_comp2 = l_tile->comps[2].resolutions +",
          "1982:                                           p_tcd->image->comps[2].resno_decoded;",
          "1986:         if (p_tcd->image->comps[0].resno_decoded !=",
          "1987:                 p_tcd->image->comps[1].resno_decoded ||",
          "1988:                 p_tcd->image->comps[0].resno_decoded !=",
          "1989:                 p_tcd->image->comps[2].resno_decoded ||",
          "1994:             opj_event_msg(p_manager, EVT_ERROR,",
          "1995:                           \"Tiles don't all have the same dimension. Skip the MCT step.\\n\");",
          "1996:             return OPJ_FALSE;",
          "",
          "[Removed Lines]",
          "1983:         size_t l_res_samples = (size_t)(res_comp0->x1 - res_comp0->x0) *",
          "1984:                                (size_t)(res_comp0->y1 - res_comp0->y0);",
          "1990:                 (size_t)(res_comp1->x1 - res_comp1->x0) *",
          "1991:                 (size_t)(res_comp1->y1 - res_comp1->y0) != l_res_samples ||",
          "1992:                 (size_t)(res_comp2->x1 - res_comp2->x0) *",
          "1993:                 (size_t)(res_comp2->y1 - res_comp2->y0) != l_res_samples) {",
          "",
          "[Added Lines]",
          "1984:         OPJ_SIZE_T l_res_samples = (OPJ_SIZE_T)(res_comp0->x1 - res_comp0->x0) *",
          "1985:                                    (OPJ_SIZE_T)(res_comp0->y1 - res_comp0->y0);",
          "1991:                 (OPJ_SIZE_T)(res_comp1->x1 - res_comp1->x0) *",
          "1992:                 (OPJ_SIZE_T)(res_comp1->y1 - res_comp1->y0) != l_res_samples ||",
          "1993:                 (OPJ_SIZE_T)(res_comp2->x1 - res_comp2->x0) *",
          "1994:                 (OPJ_SIZE_T)(res_comp2->y1 - res_comp2->y0) != l_res_samples) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2271:     opj_tccp_t * l_tccp = 00;",
          "2272:     opj_image_comp_t * l_img_comp = 00;",
          "2273:     opj_tcd_tile_t * l_tile;",
          "2275:     OPJ_INT32 * l_current_ptr;",
          "2277:     l_tile = p_tcd->tcd_image->tiles;",
          "",
          "[Removed Lines]",
          "2274:     size_t l_nb_elem, i;",
          "",
          "[Added Lines]",
          "2275:     OPJ_SIZE_T l_nb_elem, i;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2282:     for (compno = 0; compno < l_tile->numcomps; compno++) {",
          "2283:         l_current_ptr = l_tile_comp->data;",
          "2287:         if (l_tccp->qmfbid == 1) {",
          "2288:             for (i = 0; i < l_nb_elem; ++i) {",
          "",
          "[Removed Lines]",
          "2284:         l_nb_elem = (size_t)(l_tile_comp->x1 - l_tile_comp->x0) *",
          "2285:                     (size_t)(l_tile_comp->y1 - l_tile_comp->y0);",
          "",
          "[Added Lines]",
          "2285:         l_nb_elem = (OPJ_SIZE_T)(l_tile_comp->x1 - l_tile_comp->x0) *",
          "2286:                     (OPJ_SIZE_T)(l_tile_comp->y1 - l_tile_comp->y0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2308: {",
          "2309:     opj_tcd_tile_t * l_tile = p_tcd->tcd_image->tiles;",
          "2310:     opj_tcd_tilecomp_t * l_tile_comp = p_tcd->tcd_image->tiles->comps;",
          "2313:     OPJ_UINT32 i;",
          "2314:     OPJ_BYTE ** l_data = 00;",
          "2315:     opj_tcp_t * l_tcp = p_tcd->tcp;",
          "",
          "[Removed Lines]",
          "2311:     size_t samples = (size_t)(l_tile_comp->x1 - l_tile_comp->x0) *",
          "2312:                      (size_t)(l_tile_comp->y1 - l_tile_comp->y0);",
          "",
          "[Added Lines]",
          "2312:     OPJ_SIZE_T samples = (OPJ_SIZE_T)(l_tile_comp->x1 - l_tile_comp->x0) *",
          "2313:                          (OPJ_SIZE_T)(l_tile_comp->y1 - l_tile_comp->y0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2511:     for (i = 0; i < p_tcd->image->numcomps; ++i) {",
          "2517:         if (l_remaining) {",
          "2518:             ++l_size_comp;",
          "",
          "[Removed Lines]",
          "2514:         l_nb_elem = (size_t)(l_tilec->x1 - l_tilec->x0) *",
          "2515:                     (size_t)(l_tilec->y1 - l_tilec->y0);",
          "",
          "[Added Lines]",
          "2515:         l_nb_elem = (OPJ_SIZE_T)(l_tilec->x1 - l_tilec->x0) *",
          "2516:                     (OPJ_SIZE_T)(l_tilec->y1 - l_tilec->y0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "008a12d4fce0a7b1eabc51e04ed339be759646e2",
      "candidate_info": {
        "commit_hash": "008a12d4fce0a7b1eabc51e04ed339be759646e2",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/008a12d4fce0a7b1eabc51e04ed339be759646e2",
        "files": [
          "src/lib/openjp2/tcd.c",
          "src/lib/openjp2/tcd.h"
        ],
        "message": "TCD: allow tile buffer to be greater than 4GB on 64 bit hosts (but number of pixels must remain under 4 billion)",
        "before_after_code_files": [
          "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c",
          "src/lib/openjp2/tcd.h||src/lib/openjp2/tcd.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c"
          ],
          "candidate": [
            "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c": [
          "File: src/lib/openjp2/tcd.c -> src/lib/openjp2/tcd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "807:         }",
          "809:         if (isEncoder) {",
          "816:                 opj_event_msg(manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "817:                 return OPJ_FALSE;",
          "818:             }",
          "822:                 opj_event_msg(manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "823:                 return OPJ_FALSE;",
          "824:             }",
          "828:         }",
          "830:         l_data_size = l_tilec->numresolutions * (OPJ_UINT32)sizeof(",
          "",
          "[Removed Lines]",
          "811:             l_data_size = (OPJ_UINT32)(l_tilec->x1 - l_tilec->x0);",
          "813:             if ((l_data_size > 0U) &&",
          "814:                     ((((OPJ_UINT32) - 1) / l_data_size) < (OPJ_UINT32)(l_tilec->y1 -",
          "815:                             l_tilec->y0))) {",
          "819:             l_data_size = l_data_size * (OPJ_UINT32)(l_tilec->y1 - l_tilec->y0);",
          "821:             if ((((OPJ_UINT32) - 1) / (OPJ_UINT32)sizeof(OPJ_UINT32)) < l_data_size) {",
          "825:             l_data_size = l_data_size * (OPJ_UINT32)sizeof(OPJ_UINT32);",
          "827:             l_tilec->data_size_needed = l_data_size;",
          "",
          "[Added Lines]",
          "810:             size_t l_tile_data_size;",
          "813:             size_t w = (size_t)(l_tilec->x1 - l_tilec->x0);",
          "814:             size_t h = (size_t)(l_tilec->y1 - l_tilec->y0);",
          "817:             if (h > 0 && w > SIZE_MAX / h) {",
          "821:             l_tile_data_size = w * h;",
          "823:             if (SIZE_MAX / sizeof(OPJ_UINT32) < l_tile_data_size) {",
          "827:             l_tile_data_size = l_tile_data_size * sizeof(OPJ_UINT32);",
          "829:             l_tilec->data_size_needed = l_tile_data_size;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1460:             opj_tcd_tilecomp_t* tilec = &(p_tcd->tcd_image->tiles->comps[compno]);",
          "1461:             opj_tcd_resolution_t *l_res = &",
          "1462:                                           (tilec->resolutions[tilec->minimum_num_resolutions - 1]);",
          "1471:                 opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "1472:                 return OPJ_FALSE;",
          "1473:             }",
          "1474:             l_data_size = res_w * res_h;",
          "1477:                 opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "1478:                 return OPJ_FALSE;",
          "1479:             }",
          "1482:             tilec->data_size_needed = l_data_size;",
          "",
          "[Removed Lines]",
          "1463:             OPJ_UINT32 l_data_size;",
          "1466:             OPJ_UINT32 res_w = (OPJ_UINT32)(l_res->x1 - l_res->x0);",
          "1467:             OPJ_UINT32 res_h = (OPJ_UINT32)(l_res->y1 - l_res->y0);",
          "1470:             if (res_h > 0 && res_w > (((OPJ_UINT32) - 1) / res_h)) {",
          "1476:             if ((((OPJ_UINT32) - 1) / (OPJ_UINT32)sizeof(OPJ_UINT32)) < l_data_size) {",
          "1480:             l_data_size *= (OPJ_UINT32)sizeof(OPJ_UINT32);",
          "",
          "[Added Lines]",
          "1465:             size_t l_data_size;",
          "1468:             size_t res_w = (size_t)(l_res->x1 - l_res->x0);",
          "1469:             size_t res_h = (size_t)(l_res->y1 - l_res->y0);",
          "1472:             if (res_h > 0 && res_w > SIZE_MAX / res_h) {",
          "1478:             if (SIZE_MAX / sizeof(OPJ_UINT32) < l_data_size) {",
          "1482:             l_data_size *= sizeof(OPJ_UINT32);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1572:             opj_tcd_tilecomp_t* tilec = &(p_tcd->tcd_image->tiles->comps[compno]);",
          "1573:             opj_image_comp_t* image_comp = &(p_tcd->image->comps[compno]);",
          "1574:             opj_tcd_resolution_t *res = tilec->resolutions + image_comp->resno_decoded;",
          "1579:             opj_aligned_free(tilec->data_win);",
          "1580:             tilec->data_win = NULL;",
          "1582:             if (w > 0 && h > 0) {",
          "1584:                     opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "1585:                     return OPJ_FALSE;",
          "1586:                 }",
          "1587:                 l_data_size = w * h;",
          "1589:                     opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "1590:                     return OPJ_FALSE;",
          "1591:                 }",
          "1594:                 tilec->data_win = opj_aligned_malloc(l_data_size);",
          "1595:                 if (tilec->data_win == NULL) {",
          "",
          "[Removed Lines]",
          "1575:             OPJ_UINT32 w = res->win_x1 - res->win_x0;",
          "1576:             OPJ_UINT32 h = res->win_y1 - res->win_y0;",
          "1577:             OPJ_UINT32 l_data_size;",
          "1583:                 if (w > ((OPJ_UINT32) - 1) / h) {",
          "1588:                 if (l_data_size > ((OPJ_UINT32) - 1) / sizeof(OPJ_INT32)) {",
          "1592:                 l_data_size *= (OPJ_UINT32)sizeof(OPJ_INT32);",
          "",
          "[Added Lines]",
          "1577:             size_t w = res->win_x1 - res->win_x0;",
          "1578:             size_t h = res->win_y1 - res->win_y0;",
          "1579:             size_t l_data_size;",
          "1585:                 if (w > SIZE_MAX / h) {",
          "1590:                 if (l_data_size > SIZE_MAX / sizeof(OPJ_INT32)) {",
          "1594:                 l_data_size *= sizeof(OPJ_INT32);",
          "",
          "---------------"
        ],
        "src/lib/openjp2/tcd.h||src/lib/openjp2/tcd.h": [
          "File: src/lib/openjp2/tcd.h -> src/lib/openjp2/tcd.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:     OPJ_BOOL  ownsData;",
          "213:     OPJ_INT32 *data_win;",
          "",
          "[Removed Lines]",
          "208:     OPJ_UINT32 data_size_needed;",
          "210:     OPJ_UINT32 data_size;",
          "",
          "[Added Lines]",
          "208:     size_t data_size_needed;",
          "210:     size_t data_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "373520db309430b68dd9ff09cba03a25f711a88e",
      "candidate_info": {
        "commit_hash": "373520db309430b68dd9ff09cba03a25f711a88e",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/373520db309430b68dd9ff09cba03a25f711a88e",
        "files": [
          "src/lib/openjp2/t2.c",
          "src/lib/openjp2/tcd.c"
        ],
        "message": "Add documentation for magic values in the code",
        "before_after_code_files": [
          "src/lib/openjp2/t2.c||src/lib/openjp2/t2.c",
          "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c"
          ],
          "candidate": [
            "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/openjp2/t2.c||src/lib/openjp2/t2.c": [
          "File: src/lib/openjp2/t2.c -> src/lib/openjp2/t2.c"
        ],
        "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c": [
          "File: src/lib/openjp2/tcd.c -> src/lib/openjp2/tcd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "965:                 numbps = (OPJ_INT32)(l_image_comp->prec + l_gain);",
          "966:                 l_band->stepsize = (OPJ_FLOAT32)(((1.0 + l_step_size->mant / 2048.0) * pow(2.0,",
          "967:                                                   (OPJ_INT32)(numbps - l_step_size->expn)))) * fraction;",
          "968:                 l_band->numbps = l_step_size->expn + (OPJ_INT32)l_tccp->numgbits -",
          "971:                 if (!l_band->precincts && (l_nb_precincts > 0U)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "971:                                  1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45ed017b1b9cfac6578d40a2ccc33640c2a94f78",
      "candidate_info": {
        "commit_hash": "45ed017b1b9cfac6578d40a2ccc33640c2a94f78",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/45ed017b1b9cfac6578d40a2ccc33640c2a94f78",
        "files": [
          "tests/nonregression/test_suite.ctest.in"
        ],
        "message": "Add test for issue 826 (#827)\n\nUpdate uclouvain/openjpeg#826\n\nAlso correct names for data of issue uclouvain/openjpeg#823",
        "before_after_code_files": [
          "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in"
          ],
          "candidate": [
            "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in"
          ]
        }
      },
      "candidate_diff": {
        "tests/nonregression/test_suite.ctest.in||tests/nonregression/test_suite.ctest.in": [
          "File: tests/nonregression/test_suite.ctest.in -> tests/nonregression/test_suite.ctest.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "566: !opj_decompress -i @INPUT_NR_PATH@/issue775-2.j2k -o @TEMP_PATH@/issue775-2.png",
          "567: # issue 818",
          "568: opj_decompress -i @INPUT_NR_PATH@/issue818.jp2 -o @TEMP_PATH@/issue818.png",
          "",
          "[Removed Lines]",
          "569: # issue 823 (yes, not a typo, test image is issue822)",
          "570: !opj_decompress -i @INPUT_NR_PATH@/issue822.jp2 -o @TEMP_PATH@/issue822.png",
          "",
          "[Added Lines]",
          "569: # issue 823",
          "570: !opj_decompress -i @INPUT_NR_PATH@/issue823.jp2 -o @TEMP_PATH@/issue823.png",
          "571: # issue 826",
          "572: !opj_decompress -i @INPUT_NR_PATH@/issue826.jp2 -o @TEMP_PATH@/issue826.png",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c365fe0ecc8c6597db491a953a91308b1d0d4b1",
      "candidate_info": {
        "commit_hash": "2c365fe0ecc8c6597db491a953a91308b1d0d4b1",
        "repo": "uclouvain/openjpeg",
        "commit_url": "https://github.com/uclouvain/openjpeg/commit/2c365fe0ecc8c6597db491a953a91308b1d0d4b1",
        "files": [
          "src/lib/openjp2/tcd.c"
        ],
        "message": "Replace error message 'Not enough memory for tile data' by 'Size of tile data exceeds system limits' (refs https://github.com/uclouvain/openjpeg/pull/730#issuecomment-326654188)",
        "before_after_code_files": [
          "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c"
          ],
          "candidate": [
            "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/openjp2/tcd.c||src/lib/openjp2/tcd.c": [
          "File: src/lib/openjp2/tcd.c -> src/lib/openjp2/tcd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "817:             if (h > 0 && w > SIZE_MAX / h) {",
          "819:                 return OPJ_FALSE;",
          "820:             }",
          "821:             l_tile_data_size = w * h;",
          "823:             if (SIZE_MAX / sizeof(OPJ_UINT32) < l_tile_data_size) {",
          "825:                 return OPJ_FALSE;",
          "826:             }",
          "827:             l_tile_data_size = l_tile_data_size * sizeof(OPJ_UINT32);",
          "",
          "[Removed Lines]",
          "818:                 opj_event_msg(manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "824:                 opj_event_msg(manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "",
          "[Added Lines]",
          "818:                 opj_event_msg(manager, EVT_ERROR, \"Size of tile data exceeds system limits\\n\");",
          "824:                 opj_event_msg(manager, EVT_ERROR, \"Size of tile data exceeds system limits\\n\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "909:             if ((l_res->pw != 0U) && ((((OPJ_UINT32) - 1) / l_res->pw) < l_res->ph)) {",
          "911:                 return OPJ_FALSE;",
          "912:             }",
          "913:             l_nb_precincts = l_res->pw * l_res->ph;",
          "915:             if ((((OPJ_UINT32) - 1) / (OPJ_UINT32)sizeof(opj_tcd_precinct_t)) <",
          "916:                     l_nb_precincts) {",
          "918:                 return OPJ_FALSE;",
          "919:             }",
          "920:             l_nb_precinct_size = l_nb_precincts * (OPJ_UINT32)sizeof(opj_tcd_precinct_t);",
          "",
          "[Removed Lines]",
          "910:                 opj_event_msg(manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "917:                 opj_event_msg(manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "",
          "[Added Lines]",
          "910:                 opj_event_msg(manager, EVT_ERROR, \"Size of tile data exceeds system limits\\n\");",
          "917:                 opj_event_msg(manager, EVT_ERROR, \"Size of tile data exceeds system limits\\n\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1472:             if (res_h > 0 && res_w > SIZE_MAX / res_h) {",
          "1474:                 return OPJ_FALSE;",
          "1475:             }",
          "1476:             l_data_size = res_w * res_h;",
          "1478:             if (SIZE_MAX / sizeof(OPJ_UINT32) < l_data_size) {",
          "1480:                 return OPJ_FALSE;",
          "1481:             }",
          "1482:             l_data_size *= sizeof(OPJ_UINT32);",
          "",
          "[Removed Lines]",
          "1473:                 opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "1479:                 opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "",
          "[Added Lines]",
          "1473:                 opj_event_msg(p_manager, EVT_ERROR,",
          "1474:                               \"Size of tile data exceeds system limits\\n\");",
          "1480:                 opj_event_msg(p_manager, EVT_ERROR,",
          "1481:                               \"Size of tile data exceeds system limits\\n\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1484:             tilec->data_size_needed = l_data_size;",
          "1486:             if (!opj_alloc_tile_component_data(tilec)) {",
          "1488:                 return OPJ_FALSE;",
          "1489:             }",
          "1490:         }",
          "",
          "[Removed Lines]",
          "1487:                 opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "",
          "[Added Lines]",
          "1489:                 opj_event_msg(p_manager, EVT_ERROR,",
          "1490:                               \"Size of tile data exceeds system limits\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1584:             if (w > 0 && h > 0) {",
          "1585:                 if (w > SIZE_MAX / h) {",
          "1587:                     return OPJ_FALSE;",
          "1588:                 }",
          "1589:                 l_data_size = w * h;",
          "1590:                 if (l_data_size > SIZE_MAX / sizeof(OPJ_INT32)) {",
          "1592:                     return OPJ_FALSE;",
          "1593:                 }",
          "1594:                 l_data_size *= sizeof(OPJ_INT32);",
          "1596:                 tilec->data_win = opj_aligned_malloc(l_data_size);",
          "1597:                 if (tilec->data_win == NULL) {",
          "1599:                     return OPJ_FALSE;",
          "1600:                 }",
          "1601:             }",
          "",
          "[Removed Lines]",
          "1586:                     opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "1591:                     opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "1598:                     opj_event_msg(p_manager, EVT_ERROR, \"Not enough memory for tile data\\n\");",
          "",
          "[Added Lines]",
          "1589:                     opj_event_msg(p_manager, EVT_ERROR,",
          "1590:                                   \"Size of tile data exceeds system limits\\n\");",
          "1595:                     opj_event_msg(p_manager, EVT_ERROR,",
          "1596:                                   \"Size of tile data exceeds system limits\\n\");",
          "1603:                     opj_event_msg(p_manager, EVT_ERROR,",
          "1604:                                   \"Size of tile data exceeds system limits\\n\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}