{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d48168afd0453d6258c527d71ac058c7b98ce13d",
      "candidate_info": {
        "commit_hash": "d48168afd0453d6258c527d71ac058c7b98ce13d",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/d48168afd0453d6258c527d71ac058c7b98ce13d",
        "files": [
          "Makefile.am",
          "src/unix/darwin-proctitle.c",
          "src/unix/fsevents.c",
          "uv.gyp"
        ],
        "message": "darwin: remove CoreFoundation dependency\n\nLoad the required symbols at run-time rather than linking against the\nCoreFoundation (and CoreServices and ApplicationServices) frameworks\nat build time.\n\nShould make integration easier for people that bundle libuv with their\nown projects because they no longer have to replicate magic -framework\nincantations in their top-level build system.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/unix/darwin-proctitle.c||src/unix/darwin-proctitle.c",
          "src/unix/fsevents.c||src/unix/fsevents.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "197:                     src/unix/fsevents.c \\",
          "198:                     src/unix/kqueue.c \\",
          "199:                     src/unix/proctitle.c",
          "203: endif",
          "205: if FREEBSD",
          "",
          "[Removed Lines]",
          "200: libuv_la_LDFLAGS += -framework ApplicationServices \\",
          "201:                     -framework CoreServices \\",
          "202:                     -framework Foundation",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/unix/darwin-proctitle.c||src/unix/darwin-proctitle.c": [
          "File: src/unix/darwin-proctitle.c -> src/unix/darwin-proctitle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: #if TARGET_OS_IPHONE",
          "56:   return uv__pthread_setname_np(title);",
          "57: #else",
          "64:   CFBundleRef launch_services_bundle;",
          "67:   CFStringRef* display_name_key;",
          "68:   ProcessSerialNumber psn;",
          "69:   CFTypeRef asn;",
          "73:   launch_services_bundle =",
          "76:   if (launch_services_bundle == NULL)",
          "96:   if (display_name_key == NULL || *display_name_key == NULL)",
          "116: }",
          "",
          "[Removed Lines]",
          "58:   typedef CFTypeRef (*LSGetCurrentApplicationASNType)(void);",
          "59:   typedef OSStatus (*LSSetApplicationInformationItemType)(int,",
          "60:                                                           CFTypeRef,",
          "61:                                                           CFStringRef,",
          "62:                                                           CFStringRef,",
          "63:                                                           CFDictionaryRef*);",
          "65:   LSGetCurrentApplicationASNType ls_get_current_application_asn;",
          "66:   LSSetApplicationInformationItemType ls_set_application_information_item;",
          "70:   CFStringRef display_name;",
          "71:   OSStatus err;",
          "74:       CFBundleGetBundleWithIdentifier(CFSTR(\"com.apple.LaunchServices\"));",
          "77:     return -ENOENT;",
          "79:   ls_get_current_application_asn = (LSGetCurrentApplicationASNType)",
          "80:       CFBundleGetFunctionPointerForName(launch_services_bundle,",
          "81:                                         CFSTR(\"_LSGetCurrentApplicationASN\"));",
          "83:   if (ls_get_current_application_asn == NULL)",
          "84:     return -ENOENT;",
          "86:   ls_set_application_information_item = (LSSetApplicationInformationItemType)",
          "87:       CFBundleGetFunctionPointerForName(launch_services_bundle,",
          "88:                                         CFSTR(\"_LSSetApplicationInformationItem\"));",
          "90:   if (ls_set_application_information_item == NULL)",
          "91:     return -ENOENT;",
          "93:   display_name_key = CFBundleGetDataPointerForName(launch_services_bundle,",
          "94:                                                    CFSTR(\"_kLSDisplayNameKey\"));",
          "97:     return -ENOENT;",
          "100:   GetCurrentProcess(&psn);",
          "102:   display_name = CFStringCreateWithCString(NULL, title, kCFStringEncodingUTF8);",
          "103:   asn = ls_get_current_application_asn();",
          "105:                                             asn,",
          "107:                                             display_name,",
          "108:                                             NULL);",
          "109:   if (err != noErr)",
          "110:     return -ENOENT;",
          "114:   return 0;",
          "",
          "[Added Lines]",
          "58:   CFStringRef (*pCFStringCreateWithCString)(CFAllocatorRef,",
          "59:                                             const char*,",
          "60:                                             CFStringEncoding);",
          "61:   CFBundleRef (*pCFBundleGetBundleWithIdentifier)(CFStringRef);",
          "62:   void *(*pCFBundleGetDataPointerForName)(CFBundleRef, CFStringRef);",
          "63:   void *(*pCFBundleGetFunctionPointerForName)(CFBundleRef, CFStringRef);",
          "64:   OSErr (*pGetCurrentProcess)(ProcessSerialNumber*);",
          "65:   CFTypeRef (*pLSGetCurrentApplicationASN)(void);",
          "66:   OSStatus (*pLSSetApplicationInformationItem)(int,",
          "67:                                                CFTypeRef,",
          "68:                                                CFStringRef,",
          "69:                                                CFStringRef,",
          "70:                                                CFDictionaryRef*);",
          "71:   void* application_services_handle;",
          "72:   void* core_foundation_handle;",
          "77:   int err;",
          "79:   err = -ENOENT;",
          "80:   application_services_handle = dlopen(\"/System/Library/Frameworks/\"",
          "81:                                        \"ApplicationServices.framework/\"",
          "82:                                        \"Versions/A/ApplicationServices\",",
          "83:                                        RTLD_LAZY | RTLD_LOCAL);",
          "84:   core_foundation_handle = dlopen(\"/System/Library/Frameworks/\"",
          "85:                                   \"CoreFoundation.framework/\"",
          "86:                                   \"Versions/A/CoreFoundation\",",
          "87:                                   RTLD_LAZY | RTLD_LOCAL);",
          "89:   if (application_services_handle == NULL || core_foundation_handle == NULL)",
          "90:     goto out;",
          "92:   pGetCurrentProcess =",
          "93:       dlsym(application_services_handle, \"GetCurrentProcess\");",
          "94:   pCFStringCreateWithCString =",
          "95:       dlsym(core_foundation_handle, \"CFStringCreateWithCString\");",
          "96:   pCFBundleGetBundleWithIdentifier =",
          "97:       dlsym(core_foundation_handle, \"CFBundleGetBundleWithIdentifier\");",
          "98:   pCFBundleGetDataPointerForName =",
          "99:       dlsym(core_foundation_handle, \"CFBundleGetDataPointerForName\");",
          "100:   pCFBundleGetFunctionPointerForName =",
          "101:       dlsym(core_foundation_handle, \"CFBundleGetFunctionPointerForName\");",
          "103:   if (pGetCurrentProcess == NULL ||",
          "104:       pCFStringCreateWithCString == NULL ||",
          "105:       pCFBundleGetBundleWithIdentifier == NULL ||",
          "106:       pCFBundleGetDataPointerForName == NULL ||",
          "107:       pCFBundleGetFunctionPointerForName == NULL) {",
          "108:     goto out;",
          "109:   }",
          "111: #define S(s) pCFStringCreateWithCString(NULL, (s), kCFStringEncodingUTF8)",
          "114:       pCFBundleGetBundleWithIdentifier(S(\"com.apple.LaunchServices\"));",
          "117:     goto out;",
          "119:   pLSGetCurrentApplicationASN =",
          "120:       pCFBundleGetFunctionPointerForName(launch_services_bundle,",
          "121:                                          S(\"_LSGetCurrentApplicationASN\"));",
          "123:   if (pLSGetCurrentApplicationASN == NULL)",
          "124:     goto out;",
          "126:   pLSSetApplicationInformationItem =",
          "127:       pCFBundleGetFunctionPointerForName(launch_services_bundle,",
          "128:                                          S(\"_LSSetApplicationInformationItem\"));",
          "130:   if (pLSSetApplicationInformationItem == NULL)",
          "131:     goto out;",
          "133:   display_name_key = pCFBundleGetDataPointerForName(launch_services_bundle,",
          "134:                                                     S(\"_kLSDisplayNameKey\"));",
          "137:     goto out;",
          "140:   pGetCurrentProcess(&psn);",
          "142:   asn = pLSGetCurrentApplicationASN();",
          "144:   err = -EINVAL;",
          "146:                                        asn,",
          "148:                                        S(title),",
          "149:                                        NULL) != noErr) {",
          "150:     goto out;",
          "151:   }",
          "154:   err = 0;",
          "156: out:",
          "157:   if (core_foundation_handle != NULL)",
          "158:     dlclose(core_foundation_handle);",
          "160:   if (application_services_handle != NULL)",
          "161:     dlclose(application_services_handle);",
          "163:   return err;",
          "",
          "---------------"
        ],
        "src/unix/fsevents.c||src/unix/fsevents.c": [
          "File: src/unix/fsevents.c -> src/unix/fsevents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include <assert.h>",
          "44: #include <stdlib.h>",
          "45: #include <pthread.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #include <dlfcn.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "94: static void* uv__cf_loop_runner(void* arg);",
          "95: static int uv__cf_loop_signal(uv_loop_t* loop, uv_fs_event_t* handle);",
          "97: #define UV__FSEVENTS_PROCESS(handle, block)                                   \\",
          "98:     do {                                                                      \\",
          "99:       uv__fsevents_event_t* event;                                            \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "99: static CFArrayRef (*pCFArrayCreate)(CFAllocatorRef,",
          "100:                                     const void**,",
          "101:                                     CFIndex,",
          "102:                                     const CFArrayCallBacks*);",
          "103: static void (*pCFRelease)(CFTypeRef);",
          "104: static void (*pCFRunLoopAddSource)(CFRunLoopRef,",
          "105:                                    CFRunLoopSourceRef,",
          "106:                                    CFStringRef);",
          "107: static CFRunLoopRef (*pCFRunLoopGetCurrent)(void);",
          "108: static void (*pCFRunLoopRemoveSource)(CFRunLoopRef,",
          "109:                                       CFRunLoopSourceRef,",
          "110:                                       CFStringRef);",
          "111: static void (*pCFRunLoopRun)(void);",
          "112: static CFRunLoopSourceRef (*pCFRunLoopSourceCreate)(CFAllocatorRef,",
          "113:                                                     CFIndex,",
          "114:                                                     CFRunLoopSourceContext*);",
          "115: static void (*pCFRunLoopSourceSignal)(CFRunLoopSourceRef);",
          "116: static void (*pCFRunLoopStop)(CFRunLoopRef);",
          "117: static void (*pCFRunLoopWakeUp)(CFRunLoopRef);",
          "118: static CFStringRef (*pCFStringCreateWithCString)(CFAllocatorRef,",
          "119:                                                  const char*,",
          "120:                                                  CFStringEncoding);",
          "121: static CFStringEncoding (*pCFStringGetSystemEncoding)(void);",
          "122: static CFStringRef (*pkCFRunLoopDefaultMode);",
          "123: static FSEventStreamRef (*pFSEventStreamCreate)(CFAllocatorRef,",
          "124:                                                 FSEventStreamCallback,",
          "125:                                                 FSEventStreamContext*,",
          "126:                                                 CFArrayRef,",
          "127:                                                 FSEventStreamEventId,",
          "128:                                                 CFTimeInterval,",
          "129:                                                 FSEventStreamCreateFlags);",
          "130: static void (*pFSEventStreamFlushSync)(FSEventStreamRef);",
          "131: static void (*pFSEventStreamInvalidate)(FSEventStreamRef);",
          "132: static void (*pFSEventStreamRelease)(FSEventStreamRef);",
          "133: static void (*pFSEventStreamScheduleWithRunLoop)(FSEventStreamRef,",
          "134:                                                  CFRunLoopRef,",
          "135:                                                  CFStringRef);",
          "136: static Boolean (*pFSEventStreamStart)(FSEventStreamRef);",
          "137: static void (*pFSEventStreamStop)(FSEventStreamRef);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "266:   assert(ref != NULL);",
          "268:   state = loop->cf_state;",
          "273:     abort();",
          "275:   state->fsevent_stream = ref;",
          "",
          "[Removed Lines]",
          "259:   ref = FSEventStreamCreate(NULL,",
          "260:                             &uv__fsevents_event_cb,",
          "261:                             &ctx,",
          "262:                             paths,",
          "263:                             kFSEventStreamEventIdSinceNow,",
          "264:                             latency,",
          "265:                             flags);",
          "269:   FSEventStreamScheduleWithRunLoop(ref,",
          "270:                                    state->loop,",
          "271:                                    kCFRunLoopDefaultMode);",
          "272:   if (!FSEventStreamStart(ref))",
          "",
          "[Added Lines]",
          "301:   ref = pFSEventStreamCreate(NULL,",
          "302:                              &uv__fsevents_event_cb,",
          "303:                              &ctx,",
          "304:                              paths,",
          "305:                              kFSEventStreamEventIdSinceNow,",
          "306:                              latency,",
          "307:                              flags);",
          "311:   pFSEventStreamScheduleWithRunLoop(ref,",
          "312:                                     state->loop,",
          "314:   if (!pFSEventStreamStart(ref))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "286:     return;",
          "297:   state->fsevent_stream = NULL;",
          "298: }",
          "",
          "[Removed Lines]",
          "289:   FSEventStreamFlushSync(state->fsevent_stream);",
          "292:   FSEventStreamStop(state->fsevent_stream);",
          "295:   FSEventStreamInvalidate(state->fsevent_stream);",
          "296:   FSEventStreamRelease(state->fsevent_stream);",
          "",
          "[Added Lines]",
          "331:   pFSEventStreamFlushSync(state->fsevent_stream);",
          "334:   pFSEventStreamStop(state->fsevent_stream);",
          "337:   pFSEventStreamInvalidate(state->fsevent_stream);",
          "338:   pFSEventStreamRelease(state->fsevent_stream);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "335:       curr = QUEUE_DATA(q, uv_fs_event_t, cf_member);",
          "337:       assert(curr->realpath != NULL);",
          "341:       if (paths[i] == NULL)",
          "342:         abort();",
          "343:     }",
          "",
          "[Removed Lines]",
          "338:       paths[i] = CFStringCreateWithCString(NULL,",
          "339:                                            curr->realpath,",
          "340:                                            CFStringGetSystemEncoding());",
          "",
          "[Added Lines]",
          "380:       paths[i] = pCFStringCreateWithCString(NULL,",
          "381:                                             curr->realpath,",
          "382:                                             pCFStringGetSystemEncoding());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "347:   if (path_count != 0) {",
          "350:     if (cf_paths == NULL)",
          "351:       abort();",
          "352:     uv__fsevents_create_stream(handle->loop, cf_paths);",
          "",
          "[Removed Lines]",
          "349:     cf_paths = CFArrayCreate(NULL, (const void**) paths, path_count, NULL);",
          "",
          "[Added Lines]",
          "391:     cf_paths = pCFArrayCreate(NULL, (const void**) paths, path_count, NULL);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "363: }",
          "367: static int uv__fsevents_loop_init(uv_loop_t* loop) {",
          "368:   CFRunLoopSourceContext ctx;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408: static int uv__fsevents_global_init(void) {",
          "409:   static pthread_mutex_t global_init_mutex = PTHREAD_MUTEX_INITIALIZER;",
          "410:   static void* core_foundation_handle;",
          "411:   static void* core_services_handle;",
          "412:   int err;",
          "414:   err = 0;",
          "415:   pthread_mutex_lock(&global_init_mutex);",
          "416:   if (core_foundation_handle != NULL)",
          "417:     goto out;",
          "424:   err = -ENOSYS;",
          "425:   core_foundation_handle = dlopen(\"/System/Library/Frameworks/\"",
          "426:                                   \"CoreFoundation.framework/\"",
          "427:                                   \"Versions/A/CoreFoundation\",",
          "428:                                   RTLD_LAZY | RTLD_LOCAL);",
          "429:   if (core_foundation_handle == NULL)",
          "430:     goto out;",
          "432:   core_services_handle = dlopen(\"/System/Library/Frameworks/\"",
          "433:                                 \"CoreServices.framework/\"",
          "434:                                 \"Versions/A/CoreServices\",",
          "435:                                 RTLD_LAZY | RTLD_LOCAL);",
          "436:   if (core_services_handle == NULL)",
          "437:     goto out;",
          "439:   err = -ENOENT;",
          "440: #define V(handle, symbol)                                                     \\",
          "441:   do {                                                                        \\",
          "442:     p ## symbol = dlsym((handle), #symbol);                                   \\",
          "443:     if (p ## symbol == NULL)                                                  \\",
          "444:       goto out;                                                               \\",
          "445:   }                                                                           \\",
          "446:   while (0)",
          "447:   V(core_foundation_handle, CFArrayCreate);",
          "448:   V(core_foundation_handle, CFRelease);",
          "449:   V(core_foundation_handle, CFRunLoopAddSource);",
          "450:   V(core_foundation_handle, CFRunLoopGetCurrent);",
          "451:   V(core_foundation_handle, CFRunLoopRemoveSource);",
          "452:   V(core_foundation_handle, CFRunLoopRun);",
          "453:   V(core_foundation_handle, CFRunLoopSourceCreate);",
          "454:   V(core_foundation_handle, CFRunLoopSourceSignal);",
          "455:   V(core_foundation_handle, CFRunLoopStop);",
          "456:   V(core_foundation_handle, CFRunLoopWakeUp);",
          "457:   V(core_foundation_handle, CFStringCreateWithCString);",
          "458:   V(core_foundation_handle, CFStringGetSystemEncoding);",
          "459:   V(core_foundation_handle, kCFRunLoopDefaultMode);",
          "460:   V(core_services_handle, FSEventStreamCreate);",
          "461:   V(core_services_handle, FSEventStreamFlushSync);",
          "462:   V(core_services_handle, FSEventStreamInvalidate);",
          "463:   V(core_services_handle, FSEventStreamRelease);",
          "464:   V(core_services_handle, FSEventStreamScheduleWithRunLoop);",
          "465:   V(core_services_handle, FSEventStreamStart);",
          "466:   V(core_services_handle, FSEventStreamStop);",
          "467: #undef V",
          "468:   err = 0;",
          "470: out:",
          "471:   if (err && core_services_handle != NULL) {",
          "472:     dlclose(core_services_handle);",
          "473:     core_services_handle = NULL;",
          "474:   }",
          "476:   if (err && core_foundation_handle != NULL) {",
          "477:     dlclose(core_foundation_handle);",
          "478:     core_foundation_handle = NULL;",
          "479:   }",
          "481:   pthread_mutex_unlock(&global_init_mutex);",
          "482:   return err;",
          "483: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "374:   if (loop->cf_state != NULL)",
          "375:     return 0;",
          "377:   state = calloc(1, sizeof(*state));",
          "378:   if (state == NULL)",
          "379:     return -ENOMEM;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "497:   err = uv__fsevents_global_init();",
          "498:   if (err)",
          "499:     return err;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "403:   memset(&ctx, 0, sizeof(ctx));",
          "404:   ctx.info = loop;",
          "405:   ctx.perform = uv__cf_loop_cb;",
          "407:   if (state->signal_source == NULL) {",
          "408:     err = -ENOMEM;",
          "409:     goto fail_signal_source_create;",
          "",
          "[Removed Lines]",
          "406:   state->signal_source = CFRunLoopSourceCreate(NULL, 0, &ctx);",
          "",
          "[Added Lines]",
          "530:   state->signal_source = pCFRunLoopSourceCreate(NULL, 0, &ctx);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "483:   state = loop->cf_state;",
          "484:   uv_sem_destroy(&state->fsevent_sem);",
          "485:   uv_mutex_destroy(&state->fsevent_mutex);",
          "487:   free(state);",
          "488:   loop->cf_state = NULL;",
          "489: }",
          "",
          "[Removed Lines]",
          "486:   CFRelease(state->signal_source);",
          "",
          "[Added Lines]",
          "610:   pCFRelease(state->signal_source);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "497:   loop = arg;",
          "498:   state = loop->cf_state;",
          "505:   uv_sem_post(&loop->cf_sem);",
          "512:   return NULL;",
          "513: }",
          "",
          "[Removed Lines]",
          "499:   state->loop = CFRunLoopGetCurrent();",
          "501:   CFRunLoopAddSource(state->loop,",
          "502:                      state->signal_source,",
          "503:                      kCFRunLoopDefaultMode);",
          "507:   CFRunLoopRun();",
          "508:   CFRunLoopRemoveSource(state->loop,",
          "509:                         state->signal_source,",
          "510:                         kCFRunLoopDefaultMode);",
          "",
          "[Added Lines]",
          "623:   state->loop = pCFRunLoopGetCurrent();",
          "625:   pCFRunLoopAddSource(state->loop,",
          "626:                       state->signal_source,",
          "631:   pCFRunLoopRun();",
          "632:   pCFRunLoopRemoveSource(state->loop,",
          "633:                          state->signal_source,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "541:     if (s->handle == NULL)",
          "543:     else",
          "544:       uv__fsevents_reschedule(s->handle);",
          "",
          "[Removed Lines]",
          "542:       CFRunLoopStop(state->loop);",
          "",
          "[Added Lines]",
          "666:       pCFRunLoopStop(state->loop);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "567:   state = loop->cf_state;",
          "568:   assert(state != NULL);",
          "572:   return 0;",
          "573: }",
          "",
          "[Removed Lines]",
          "569:   CFRunLoopSourceSignal(state->signal_source);",
          "570:   CFRunLoopWakeUp(state->loop);",
          "",
          "[Added Lines]",
          "693:   pCFRunLoopSourceSignal(state->signal_source);",
          "694:   pCFRunLoopWakeUp(state->loop);",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "186:             'src/unix/fsevents.c',",
          "187:             'src/unix/darwin-proctitle.c',",
          "188:           ],",
          "196:           'defines': [",
          "197:             '_DARWIN_USE_64_BIT_INODE=1',",
          "198:           ]",
          "",
          "[Removed Lines]",
          "189:           'link_settings': {",
          "190:             'libraries': [",
          "191:               '$(SDKROOT)/System/Library/Frameworks/Foundation.framework',",
          "192:               '$(SDKROOT)/System/Library/Frameworks/CoreServices.framework',",
          "193:               '$(SDKROOT)/System/Library/Frameworks/ApplicationServices.framework',",
          "194:             ],",
          "195:           },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "103969ac8e1225d8416b5512783830969c57a9ac",
      "candidate_info": {
        "commit_hash": "103969ac8e1225d8416b5512783830969c57a9ac",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/103969ac8e1225d8416b5512783830969c57a9ac",
        "files": [
          "src/unix/dl.c"
        ],
        "message": "openbsd: fix dlerror() const correctness warning",
        "before_after_code_files": [
          "src/unix/dl.c||src/unix/dl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/dl.c||src/unix/dl.c": [
          "File: src/unix/dl.c -> src/unix/dl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: static int uv__dlerror(uv_lib_t* lib) {",
          "70:   if (lib->errmsg)",
          "71:     free(lib->errmsg);",
          "",
          "[Removed Lines]",
          "68:   char* errmsg;",
          "",
          "[Added Lines]",
          "68:   const char* errmsg;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a8c3987d6dcc291caef9455461d9f7d5a3443e8",
      "candidate_info": {
        "commit_hash": "3a8c3987d6dcc291caef9455461d9f7d5a3443e8",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/3a8c3987d6dcc291caef9455461d9f7d5a3443e8",
        "files": [
          "src/unix/getaddrinfo.c"
        ],
        "message": "sunos: fix syntax error introduced in 76d831e4\n\nMoving around the code for #754 inadvertently introduced a syntax error\nin a SunOS-only code path.\n\nThe syntax error didn't actually manifest at build time because\nthe #elif it was wrapped in was, alas, wrong as well.",
        "before_after_code_files": [
          "src/unix/getaddrinfo.c||src/unix/getaddrinfo.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/getaddrinfo.c||src/unix/getaddrinfo.c": [
          "File: src/unix/getaddrinfo.c -> src/unix/getaddrinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:   else if (req->retcode == EAI_NODATA)",
          "89:     uv__set_sys_error(req->loop, ENOENT);",
          "92:     uv__set_sys_error(req->loop, ENOENT);",
          "93: #endif",
          "94:   else {",
          "",
          "[Removed Lines]",
          "90: #elif defined(__sun)",
          "91:   if (req->retcode == EAI_MEMORY && hostlen >= MAXHOSTNAMELEN) {",
          "",
          "[Added Lines]",
          "90: #endif",
          "91: #if defined(__sun)",
          "92:   else if (req->retcode == EAI_MEMORY && hostlen >= MAXHOSTNAMELEN)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d38eae37727f06df8ce9b634bac1c42e610dd64",
      "candidate_info": {
        "commit_hash": "3d38eae37727f06df8ce9b634bac1c42e610dd64",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/3d38eae37727f06df8ce9b634bac1c42e610dd64",
        "files": [
          "test/echo-server.c"
        ],
        "message": "test: don't close connection on write error\n\nThe echo server shouldn't close the connection when there's an error on\nwrite. Instead simply echo the error message and allow the other side to\nclose the connection.\n\nAlso do a partial revert of 4d905fb where after_shutdown was removed.\n\nFixes: 4d905fb \"test: close stream immediately on error\"\nSigned-off-by: Trevor Norris <trev.norris@gmail.com>\nSigned-off-by: Sa\u00fal Ibarra Corretg\u00e9 <saghul@gmail.com>",
        "before_after_code_files": [
          "test/echo-server.c||test/echo-server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/echo-server.c||test/echo-server.c": [
          "File: test/echo-server.c -> test/echo-server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   wr = (write_req_t*) req;",
          "53:   free(wr->buf.base);",
          "57:     return;",
          "60:   fprintf(stderr,",
          "61:           \"uv_write error: %s - %s\\n\",",
          "62:           uv_err_name(status),",
          "63:           uv_strerror(status));",
          "68: }",
          "",
          "[Removed Lines]",
          "55:   if (status == 0) {",
          "56:     free(wr);",
          "58:   }",
          "65:   if (!uv_is_closing((uv_handle_t*) req->handle))",
          "66:     uv_close((uv_handle_t*) req->handle, on_close);",
          "67:   free(wr);",
          "",
          "[Added Lines]",
          "54:   free(wr);",
          "56:   if (status == 0)",
          "63: }",
          "66: static void after_shutdown(uv_shutdown_t* req, int status) {",
          "67:   uv_close((uv_handle_t*) req->handle, on_close);",
          "68:   free(req);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:                        const uv_buf_t* buf) {",
          "74:   int i;",
          "75:   write_req_t *wr;",
          "77:   if (nread < 0) {",
          "79:     ASSERT(nread == UV_EOF);",
          "86:     return;",
          "87:   }",
          "",
          "[Removed Lines]",
          "81:     if (buf->base) {",
          "82:       free(buf->base);",
          "83:     }",
          "85:     uv_close((uv_handle_t*) handle, on_close);",
          "",
          "[Added Lines]",
          "77:   uv_shutdown_t* sreq;",
          "83:     free(buf->base);",
          "84:     sreq = malloc(sizeof* sreq);",
          "85:     ASSERT(0 == uv_shutdown(sreq, handle, after_shutdown));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "107be2bed38afa6279aa53b13b946eb60c204969",
      "candidate_info": {
        "commit_hash": "107be2bed38afa6279aa53b13b946eb60c204969",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/107be2bed38afa6279aa53b13b946eb60c204969",
        "files": [
          "include/uv-errno.h",
          "include/uv.h"
        ],
        "message": "unix, windows: map EFBIG errno",
        "before_after_code_files": [
          "include/uv-errno.h||include/uv-errno.h",
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-errno.h||include/uv-errno.h": [
          "File: include/uv-errno.h -> include/uv-errno.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "370: # define UV__EXDEV (-4037)",
          "371: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "373: #if defined(EFBIG) && !defined(_WIN32)",
          "374: # define UV__EFBIG (-EFBIG)",
          "375: #else",
          "376: # define UV__EFBIG (-4036)",
          "377: #endif",
          "",
          "---------------"
        ],
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "94:   XX(EDESTADDRREQ, \"destination address required\")                            \\",
          "95:   XX(EEXIST, \"file already exists\")                                           \\",
          "96:   XX(EFAULT, \"bad address in system call argument\")                           \\",
          "97:   XX(EHOSTUNREACH, \"host is unreachable\")                                     \\",
          "98:   XX(EINTR, \"interrupted system call\")                                        \\",
          "99:   XX(EINVAL, \"invalid argument\")                                              \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "97:   XX(EFBIG, \"file too large\")                                                 \\",
          "",
          "---------------"
        ]
      }
    }
  ]
}