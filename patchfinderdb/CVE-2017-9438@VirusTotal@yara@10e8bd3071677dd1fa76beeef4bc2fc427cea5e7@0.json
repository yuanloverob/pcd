{
  "cve_id": "CVE-2017-9438",
  "cve_desc": "libyara/re.c in the regexp module in YARA 3.5.0 allows remote attackers to cause a denial of service (stack consumption) via a crafted rule (involving hex strings) that is mishandled in the _yr_re_emit function, a different vulnerability than CVE-2017-9304.",
  "repo": "VirusTotal/yara",
  "patch_hash": "10e8bd3071677dd1fa76beeef4bc2fc427cea5e7",
  "patch_info": {
    "commit_hash": "10e8bd3071677dd1fa76beeef4bc2fc427cea5e7",
    "repo": "VirusTotal/yara",
    "commit_url": "https://github.com/VirusTotal/yara/commit/10e8bd3071677dd1fa76beeef4bc2fc427cea5e7",
    "files": [
      "libyara/hex_grammar.c",
      "libyara/hex_grammar.h",
      "libyara/hex_grammar.y"
    ],
    "message": "Fix issue #674 for hex strings.",
    "before_after_code_files": [
      "libyara/hex_grammar.c||libyara/hex_grammar.c",
      "libyara/hex_grammar.h||libyara/hex_grammar.h",
      "libyara/hex_grammar.y||libyara/hex_grammar.y"
    ]
  },
  "patch_diff": {
    "libyara/hex_grammar.c||libyara/hex_grammar.c": [
      "File: libyara/hex_grammar.c -> libyara/hex_grammar.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "93: #define mark_as_not_fast_regexp() \\",
      "94:     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP",
      "96: #define ERROR_IF(x, error) \\",
      "97:     if (x) \\",
      "98:     { \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "96: #define incr_ast_levels() \\",
      "97:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
      "98:     { \\",
      "99:       lex_env->last_error_code = ERROR_INVALID_HEX_STRING; \\",
      "100:       YYABORT; \\",
      "101:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "477: static const yytype_uint16 yyrline[] =",
      "478: {",
      "482: };",
      "483: #endif",
      "",
      "[Removed Lines]",
      "479:        0,   105,   105,   114,   118,   127,   189,   193,   206,   210,",
      "480:      219,   233,   232,   245,   268,   300,   322,   342,   346,   360,",
      "481:      368",
      "",
      "[Added Lines]",
      "486:        0,   112,   112,   121,   125,   136,   200,   204,   219,   223,",
      "487:      232,   246,   245,   258,   281,   313,   335,   355,   359,   374,",
      "488:      382",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1321:   switch (yyn)",
      "1322:     {",
      "1323:         case 2:",
      "1325:     {",
      "1326:         RE_AST* re_ast = yyget_extra(yyscanner);",
      "1327:         re_ast->root_node = (yyvsp[-1].re_node);",
      "1328:       }",
      "1330:     break;",
      "1332:   case 3:",
      "1334:     {",
      "1335:         (yyval.re_node) = (yyvsp[0].re_node);",
      "1336:       }",
      "1338:     break;",
      "1340:   case 4:",
      "1342:     {",
      "1343:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));",
      "1345:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1350:         incr_ast_levels();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1348:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
      "1349:       }",
      "1351:     break;",
      "1353:   case 5:",
      "1355:     {",
      "1356:         RE_NODE* new_concat;",
      "1357:         RE_NODE* leftmost_concat = NULL;",
      "1358:         RE_NODE* leftmost_node = (yyvsp[-1].re_node);",
      "1360:         (yyval.re_node) = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1369:         incr_ast_levels();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1410:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
      "1411:       }",
      "1413:     break;",
      "1415:   case 6:",
      "1417:     {",
      "1418:         (yyval.re_node) = (yyvsp[0].re_node);",
      "1419:       }",
      "1421:     break;",
      "1423:   case 7:",
      "1425:     {",
      "1426:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));",
      "1428:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1437:         incr_ast_levels();",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1590:         (yyval.re_node)->start = 0;",
      "1591:         (yyval.re_node)->end = INT_MAX;",
      "1592:       }",
      "1594:     break;",
      "1596:   case 17:",
      "1598:     {",
      "1599:           (yyval.re_node) = (yyvsp[0].re_node);",
      "1600:       }",
      "1602:     break;",
      "1604:   case 18:",
      "1606:     {",
      "1607:         mark_as_not_fast_regexp();",
      "1609:         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1621:         incr_ast_levels();",
      "",
      "---------------"
    ],
    "libyara/hex_grammar.h||libyara/hex_grammar.h": [
      "File: libyara/hex_grammar.h -> libyara/hex_grammar.h"
    ],
    "libyara/hex_grammar.y||libyara/hex_grammar.y": [
      "File: libyara/hex_grammar.y -> libyara/hex_grammar.y",
      "--- Hunk 1 ---",
      "[Context before]",
      "51: #define mark_as_not_fast_regexp() \\",
      "52:     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP",
      "54: #define ERROR_IF(x, error) \\",
      "55:     if (x) \\",
      "56:     { \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "54: #define incr_ast_levels() \\",
      "55:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
      "56:     { \\",
      "57:       lex_env->last_error_code = ERROR_INVALID_HEX_STRING; \\",
      "58:       YYABORT; \\",
      "59:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "117:       }",
      "118:     | token token",
      "119:       {",
      "120:         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);",
      "122:         DESTROY_NODE_IF($$ == NULL, $1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "127:         incr_ast_levels();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "130:         RE_NODE* leftmost_concat = NULL;",
      "131:         RE_NODE* leftmost_node = $2;",
      "133:         $$ = NULL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "142:         incr_ast_levels();",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "192:       }",
      "193:     | token_sequence token_or_range",
      "194:       {",
      "195:         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);",
      "197:         DESTROY_NODE_IF($$ == NULL, $1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "206:         incr_ast_levels();",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "346:     | alternatives '|' tokens",
      "347:       {",
      "348:         mark_as_not_fast_regexp();",
      "350:         $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "362:         incr_ast_levels();",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1aaac7ba91101da0112a7365a05ef6f6281f8739",
      "candidate_info": {
        "commit_hash": "1aaac7ba91101da0112a7365a05ef6f6281f8739",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/1aaac7ba91101da0112a7365a05ef6f6281f8739",
        "files": [
          "libyara/include/yara/limits.h"
        ],
        "message": "Increase RE_MAX_AST_LEVELS as discussed in https://github.com/VirusTotal/yara/issues/674",
        "before_after_code_files": [
          "libyara/include/yara/limits.h||libyara/include/yara/limits.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libyara/include/yara/limits.h||libyara/include/yara/limits.h": [
          "File: libyara/include/yara/limits.h -> libyara/include/yara/limits.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: #define RE_MAX_FIBERS                   1024",
          "88: #endif",
          "",
          "[Removed Lines]",
          "86: #define RE_MAX_AST_LEVELS               2000",
          "",
          "[Added Lines]",
          "86: #define RE_MAX_AST_LEVELS               3000",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58f72d4d57c8a431c3b05df9f02150faf4323fe5",
      "candidate_info": {
        "commit_hash": "58f72d4d57c8a431c3b05df9f02150faf4323fe5",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/58f72d4d57c8a431c3b05df9f02150faf4323fe5",
        "files": [
          "libyara/include/yara/limits.h",
          "libyara/include/yara/re.h",
          "libyara/re.c",
          "libyara/re_grammar.c",
          "libyara/re_grammar.h",
          "libyara/re_grammar.y"
        ],
        "message": "Fix issue #674. Move regexp limits to limits.h.",
        "before_after_code_files": [
          "libyara/include/yara/limits.h||libyara/include/yara/limits.h",
          "libyara/include/yara/re.h||libyara/include/yara/re.h",
          "libyara/re.c||libyara/re.c",
          "libyara/re_grammar.c||libyara/re_grammar.c",
          "libyara/re_grammar.h||libyara/re_grammar.h",
          "libyara/re_grammar.y||libyara/re_grammar.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libyara/include/yara/limits.h||libyara/include/yara/limits.h": [
          "File: libyara/include/yara/limits.h -> libyara/include/yara/limits.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: #define LEX_BUF_SIZE                    8192",
          "68: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71: #define RE_MAX_SPLIT_ID                 128",
          "74: #define RE_MAX_STACK                    1024",
          "77: #define RE_MAX_CODE_SIZE                32768",
          "80: #define RE_SCAN_LIMIT                   4096",
          "83: #define RE_MAX_FIBERS                   1024",
          "86: #define RE_MAX_AST_LEVELS               1000",
          "",
          "---------------"
        ],
        "libyara/include/yara/re.h||libyara/include/yara/re.h": [
          "File: libyara/include/yara/re.h -> libyara/include/yara/re.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "136: struct RE_AST",
          "137: {",
          "138:   uint32_t flags;",
          "139:   RE_NODE* root_node;",
          "140: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "139:   uint16_t levels;",
          "",
          "---------------"
        ],
        "libyara/re.c||libyara/re.c": [
          "File: libyara/re.c -> libyara/re.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: #include <yara/re_lexer.h>",
          "53: #include <yara/hex_lexer.h>",
          "73: #define EMIT_BACKWARDS                  0x01",
          "74: #define EMIT_DONT_SET_FORWARDS_CODE     0x02",
          "",
          "[Removed Lines]",
          "58: #define RE_MAX_SPLIT_ID     128",
          "61: #define RE_MAX_STACK      1024",
          "64: #define RE_MAX_CODE_SIZE  32768",
          "67: #define RE_SCAN_LIMIT     4096",
          "70: #define RE_MAX_FIBERS     1024",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "268:     return ERROR_INSUFFICIENT_MEMORY;",
          "270:   (*re_ast)->flags = 0;",
          "271:   (*re_ast)->root_node = NULL;",
          "273:   return ERROR_SUCCESS;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:   (*re_ast)->levels = 0;",
          "",
          "---------------"
        ],
        "libyara/re_grammar.c||libyara/re_grammar.c": [
          "File: libyara/re_grammar.c -> libyara/re_grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88: #define mark_as_not_fast_regexp() \\",
          "89:     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP",
          "91: #define ERROR_IF(x, error) \\",
          "92:     if (x) \\",
          "93:     { \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91: #define incr_ast_levels() \\",
          "92:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
          "93:     { \\",
          "94:       lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION; \\",
          "95:       YYABORT; \\",
          "96:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "492: static const yytype_uint16 yyrline[] =",
          "493: {",
          "498: };",
          "499: #endif",
          "",
          "[Removed Lines]",
          "494:        0,   104,   104,   109,   113,   117,   128,   146,   150,   161,",
          "495:      175,   191,   205,   221,   244,   268,   290,   313,   317,   323,",
          "496:      329,   335,   344,   348,   354,   362,   368,   374,   380,   386,",
          "497:      392,   398",
          "",
          "[Added Lines]",
          "502:        0,   112,   112,   117,   121,   125,   137,   156,   160,   173,",
          "503:      187,   203,   217,   233,   256,   280,   302,   325,   329,   335,",
          "504:      341,   347,   356,   362,   368,   376,   382,   388,   394,   400,",
          "505:      406,   412",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1331:   switch (yyn)",
          "1332:     {",
          "1333:         case 2:",
          "1335:     {",
          "1336:         RE_AST* re_ast = yyget_extra(yyscanner);",
          "1337:         re_ast->root_node = (yyvsp[0].re_node);",
          "1338:       }",
          "1340:     break;",
          "1342:   case 4:",
          "1344:     {",
          "1345:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1346:       }",
          "1348:     break;",
          "1350:   case 5:",
          "1352:     {",
          "1353:         mark_as_not_fast_regexp();",
          "1355:         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1362:         incr_ast_levels();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1360:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1361:       }",
          "1363:     break;",
          "1365:   case 6:",
          "1367:     {",
          "1368:         RE_NODE* node;",
          "1370:         mark_as_not_fast_regexp();",
          "1372:         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1380:         incr_ast_levels();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1379:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1380:       }",
          "1382:     break;",
          "1384:   case 7:",
          "1386:     {",
          "1387:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1388:       }",
          "1390:     break;",
          "1392:   case 8:",
          "1394:     {",
          "1395:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));",
          "1397:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1398:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1399:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1400:       }",
          "1402:     break;",
          "1404:   case 9:",
          "1406:     {",
          "1407:         RE_AST* re_ast;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1405:         incr_ast_levels();",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1582:         (yyval.re_node)->end = (yyvsp[-1].range) >> 16;;",
          "1583:         (yyval.re_node)->greedy = FALSE;",
          "1584:       }",
          "1586:     break;",
          "1588:   case 17:",
          "1590:     {",
          "1591:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1592:       }",
          "1594:     break;",
          "1596:   case 18:",
          "1598:     {",
          "1599:         (yyval.re_node) = yr_re_node_create(RE_NODE_WORD_BOUNDARY, NULL, NULL);",
          "1601:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1602:       }",
          "1604:     break;",
          "1606:   case 19:",
          "1608:     {",
          "1609:         (yyval.re_node) = yr_re_node_create(RE_NODE_NON_WORD_BOUNDARY, NULL, NULL);",
          "1611:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1612:       }",
          "1614:     break;",
          "1616:   case 20:",
          "1618:     {",
          "1619:         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_START, NULL, NULL);",
          "1621:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1622:       }",
          "1624:     break;",
          "1626:   case 21:",
          "1628:     {",
          "1629:         (yyval.re_node) = yr_re_node_create(RE_NODE_ANCHOR_END, NULL, NULL);",
          "1631:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1632:       }",
          "1634:     break;",
          "1636:   case 22:",
          "1638:     {",
          "1639:         (yyval.re_node) = (yyvsp[-1].re_node);",
          "1640:       }",
          "1642:     break;",
          "1644:   case 23:",
          "1646:     {",
          "1647:         (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);",
          "1649:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1650:       }",
          "1652:     break;",
          "1654:   case 24:",
          "1656:     {",
          "1657:         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1651:         incr_ast_levels();",
          "",
          "---------------"
        ],
        "libyara/re_grammar.h||libyara/re_grammar.h": [
          "File: libyara/re_grammar.h -> libyara/re_grammar.h"
        ],
        "libyara/re_grammar.y||libyara/re_grammar.y": [
          "File: libyara/re_grammar.y -> libyara/re_grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #define mark_as_not_fast_regexp() \\",
          "47:     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP",
          "49: #define ERROR_IF(x, error) \\",
          "50:     if (x) \\",
          "51:     { \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "49: #define incr_ast_levels() \\",
          "50:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
          "51:     { \\",
          "52:       lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION; \\",
          "53:       YYABORT; \\",
          "54:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:     | alternative '|' concatenation",
          "118:       {",
          "119:         mark_as_not_fast_regexp();",
          "121:         $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "128:         incr_ast_levels();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "130:         RE_NODE* node;",
          "132:         mark_as_not_fast_regexp();",
          "134:         node = yr_re_node_create(RE_NODE_EMPTY, NULL, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "142:         incr_ast_levels();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "149:       }",
          "150:     | concatenation repeat",
          "151:       {",
          "152:         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);",
          "154:         DESTROY_NODE_IF($$ == NULL, $1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:         incr_ast_levels();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "343: single",
          "344:     : '(' alternative ')'",
          "345:       {",
          "346:         $$ = $2;",
          "347:       }",
          "348:     | '.'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:         incr_ast_levels();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b9dc37bb48d565691498df201463fae73d17462",
      "candidate_info": {
        "commit_hash": "2b9dc37bb48d565691498df201463fae73d17462",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/2b9dc37bb48d565691498df201463fae73d17462",
        "files": [
          "libyara/hex_grammar.c",
          "libyara/hex_grammar.h",
          "libyara/hex_grammar.y"
        ],
        "message": "Re-introduce changes reverted by 0c57f0bd66a118c62e43c0a7da57a3d8134fe168",
        "before_after_code_files": [
          "libyara/hex_grammar.c||libyara/hex_grammar.c",
          "libyara/hex_grammar.h||libyara/hex_grammar.h",
          "libyara/hex_grammar.y||libyara/hex_grammar.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/hex_grammar.c||libyara/hex_grammar.c",
            "libyara/hex_grammar.h||libyara/hex_grammar.h",
            "libyara/hex_grammar.y||libyara/hex_grammar.y"
          ],
          "candidate": [
            "libyara/hex_grammar.c||libyara/hex_grammar.c",
            "libyara/hex_grammar.h||libyara/hex_grammar.h",
            "libyara/hex_grammar.y||libyara/hex_grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/hex_grammar.c||libyara/hex_grammar.c": [
          "File: libyara/hex_grammar.c -> libyara/hex_grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "93: #define mark_as_not_fast_regexp() \\",
          "94:     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP",
          "97:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
          "98:     { \\",
          "99:       yyerror(yyscanner, lex_env, \"string too long\"); \\",
          "100:       YYABORT; \\",
          "101:     }",
          "104:     if (x) \\",
          "105:     { \\",
          "106:       lex_env->last_error_code = error; \\",
          "107:       YYABORT; \\",
          "108:     } \\",
          "111:     if (x) \\",
          "112:     { \\",
          "113:       yr_re_node_destroy(node); \\",
          "114:     } \\",
          "119: # ifndef YY_NULLPTR",
          "120: #  if defined __cplusplus && 201103L <= __cplusplus",
          "",
          "[Removed Lines]",
          "96: #define incr_ast_levels() \\",
          "103: #define ERROR_IF(x, error) \\",
          "110: #define DESTROY_NODE_IF(x, node) \\",
          "",
          "[Added Lines]",
          "96: #define fail_if_too_many_ast_levels(cleanup_code) \\",
          "99:       { cleanup_code } \\",
          "104: #define fail_if(x, error) \\",
          "111: #define destroy_node_if(x, node) \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "484: static const yytype_uint16 yyrline[] =",
          "485: {",
          "489: };",
          "490: #endif",
          "",
          "[Removed Lines]",
          "486:        0,   112,   112,   121,   125,   136,   200,   204,   219,   223,",
          "487:      232,   237,   236,   249,   272,   304,   326,   346,   350,   365,",
          "488:      373",
          "",
          "[Added Lines]",
          "487:        0,   113,   113,   122,   126,   140,   208,   212,   230,   234,",
          "488:      243,   248,   247,   260,   283,   315,   337,   357,   361,   380,",
          "489:      388",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1024:   switch (yytype)",
          "1025:     {",
          "1030:         break;",
          "1036:         break;",
          "1042:         break;",
          "1048:         break;",
          "1054:         break;",
          "1060:         break;",
          "1066:         break;",
          "",
          "[Removed Lines]",
          "1028:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1034:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1040:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1046:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1052:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1058:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1064:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "",
          "[Added Lines]",
          "1029:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1035:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1041:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1047:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1053:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1059:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1065:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1328:   switch (yyn)",
          "1329:     {",
          "1330:         case 2:",
          "1332:     {",
          "1333:         RE_AST* re_ast = yyget_extra(yyscanner);",
          "1334:         re_ast->root_node = (yyvsp[-1].re_node);",
          "1335:       }",
          "1337:     break;",
          "1339:   case 3:",
          "1341:     {",
          "1342:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1343:       }",
          "1345:     break;",
          "1347:   case 4:",
          "1349:     {",
          "1352:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));",
          "1358:       }",
          "1360:     break;",
          "1362:   case 5:",
          "1364:     {",
          "1365:         RE_NODE* new_concat;",
          "1366:         RE_NODE* leftmost_concat = NULL;",
          "1367:         RE_NODE* leftmost_node = (yyvsp[-1].re_node);",
          "1371:         (yyval.re_node) = NULL;",
          "",
          "[Removed Lines]",
          "1350:         incr_ast_levels();",
          "1354:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1355:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1357:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1369:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "1351:         fail_if_too_many_ast_levels({",
          "1352:           yr_re_node_destroy((yyvsp[-1].re_node));",
          "1353:           yr_re_node_destroy((yyvsp[0].re_node));",
          "1354:         });",
          "1358:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1359:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1361:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1373:         fail_if_too_many_ast_levels({",
          "1374:           yr_re_node_destroy((yyvsp[-2].re_node));",
          "1375:           yr_re_node_destroy((yyvsp[-1].re_node));",
          "1376:           yr_re_node_destroy((yyvsp[0].re_node));",
          "1377:         });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1414:           }",
          "1415:         }",
          "1422:       }",
          "1424:     break;",
          "1426:   case 6:",
          "1428:     {",
          "1429:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1430:       }",
          "1432:     break;",
          "1434:   case 7:",
          "1436:     {",
          "1439:         (yyval.re_node) = yr_re_node_create(RE_NODE_CONCAT, (yyvsp[-1].re_node), (yyvsp[0].re_node));",
          "1445:       }",
          "1447:     break;",
          "1449:   case 8:",
          "1451:     {",
          "1452:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1453:       }",
          "1455:     break;",
          "1457:   case 9:",
          "1459:     {",
          "1460:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1461:         (yyval.re_node)->greedy = FALSE;",
          "1462:       }",
          "1464:     break;",
          "1466:   case 10:",
          "1468:     {",
          "1469:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1470:       }",
          "1472:     break;",
          "1474:   case 11:",
          "1476:     {",
          "1477:         lex_env->inside_or++;",
          "1478:       }",
          "1480:     break;",
          "1482:   case 12:",
          "1484:     {",
          "1485:         (yyval.re_node) = (yyvsp[-1].re_node);",
          "1486:         lex_env->inside_or--;",
          "1487:       }",
          "1489:     break;",
          "1491:   case 13:",
          "1493:     {",
          "1494:         if ((yyvsp[-1].integer) <= 0)",
          "1495:         {",
          "",
          "[Removed Lines]",
          "1417:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));",
          "1418:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1419:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1421:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1437:         incr_ast_levels();",
          "1441:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1442:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1444:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "1425:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[-2].re_node));",
          "1426:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1427:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1429:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1445:         fail_if_too_many_ast_levels({",
          "1446:           yr_re_node_destroy((yyvsp[-1].re_node));",
          "1447:           yr_re_node_destroy((yyvsp[0].re_node));",
          "1448:         });",
          "1452:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[-1].re_node));",
          "1453:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1455:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1508:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);",
          "1512:         (yyval.re_node)->start = (int) (yyvsp[-1].integer);",
          "1513:         (yyval.re_node)->end = (int) (yyvsp[-1].integer);",
          "1514:       }",
          "1516:     break;",
          "1518:   case 14:",
          "1520:     {",
          "1521:         if (lex_env->inside_or &&",
          "1522:             ((yyvsp[-3].integer) > STRING_CHAINING_THRESHOLD ||",
          "",
          "[Removed Lines]",
          "1510:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "1521:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1544:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);",
          "1548:         (yyval.re_node)->start = (int) (yyvsp[-3].integer);",
          "1549:         (yyval.re_node)->end = (int) (yyvsp[-1].integer);",
          "1550:       }",
          "1552:     break;",
          "1554:   case 15:",
          "1556:     {",
          "1557:         if (lex_env->inside_or)",
          "1558:         {",
          "",
          "[Removed Lines]",
          "1546:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "1557:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1570:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);",
          "1574:         (yyval.re_node)->start = (int) (yyvsp[-2].integer);",
          "1575:         (yyval.re_node)->end = INT_MAX;",
          "1576:       }",
          "1578:     break;",
          "1580:   case 16:",
          "1582:     {",
          "1583:         if (lex_env->inside_or)",
          "1584:         {",
          "",
          "[Removed Lines]",
          "1572:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "1583:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1590:         (yyval.re_node) = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);",
          "1594:         (yyval.re_node)->start = 0;",
          "1595:         (yyval.re_node)->end = INT_MAX;",
          "1596:       }",
          "1598:     break;",
          "1600:   case 17:",
          "1602:     {",
          "1603:           (yyval.re_node) = (yyvsp[0].re_node);",
          "1604:       }",
          "1606:     break;",
          "1608:   case 18:",
          "1610:     {",
          "1611:         mark_as_not_fast_regexp();",
          "1614:         (yyval.re_node) = yr_re_node_create(RE_NODE_ALT, (yyvsp[-2].re_node), (yyvsp[0].re_node));",
          "1620:       }",
          "1622:     break;",
          "1624:   case 19:",
          "1626:     {",
          "1627:         (yyval.re_node) = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);",
          "1631:         (yyval.re_node)->value = (int) (yyvsp[0].integer);",
          "1632:       }",
          "1634:     break;",
          "1636:   case 20:",
          "1638:     {",
          "1639:         uint8_t mask = (uint8_t) ((yyvsp[0].integer) >> 8);",
          "",
          "[Removed Lines]",
          "1592:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1612:         incr_ast_levels();",
          "1616:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[-2].re_node));",
          "1617:         DESTROY_NODE_IF((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1619:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1629:         ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "1603:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1624:         fail_if_too_many_ast_levels({",
          "1625:           yr_re_node_destroy((yyvsp[-2].re_node));",
          "1626:           yr_re_node_destroy((yyvsp[0].re_node));",
          "1627:         });",
          "1631:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[-2].re_node));",
          "1632:         destroy_node_if((yyval.re_node) == NULL, (yyvsp[0].re_node));",
          "1634:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1644:         fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1642:         {",
          "1643:           (yyval.re_node) = yr_re_node_create(RE_NODE_ANY, NULL, NULL);",
          "1646:         }",
          "1647:         else",
          "1648:         {",
          "1649:           (yyval.re_node) = yr_re_node_create(RE_NODE_MASKED_LITERAL, NULL, NULL);",
          "1653:           (yyval.re_node)->value = (yyvsp[0].integer) & 0xFF;",
          "1654:           (yyval.re_node)->mask = mask;",
          "1655:         }",
          "1656:       }",
          "1658:     break;",
          "1662:       default: break;",
          "1663:     }",
          "",
          "[Removed Lines]",
          "1645:           ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1651:           ERROR_IF((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "1660:           fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "1666:           fail_if((yyval.re_node) == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------"
        ],
        "libyara/hex_grammar.h||libyara/hex_grammar.h": [
          "File: libyara/hex_grammar.h -> libyara/hex_grammar.h"
        ],
        "libyara/hex_grammar.y||libyara/hex_grammar.y": [
          "File: libyara/hex_grammar.y -> libyara/hex_grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: #define mark_as_not_fast_regexp() \\",
          "52:     ((RE_AST*) yyget_extra(yyscanner))->flags &= ~RE_FLAGS_FAST_REGEXP",
          "55:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
          "56:     { \\",
          "57:       yyerror(yyscanner, lex_env, \"string too long\"); \\",
          "58:       YYABORT; \\",
          "59:     }",
          "62:     if (x) \\",
          "63:     { \\",
          "64:       lex_env->last_error_code = error; \\",
          "65:       YYABORT; \\",
          "66:     } \\",
          "69:     if (x) \\",
          "70:     { \\",
          "71:       yr_re_node_destroy(node); \\",
          "",
          "[Removed Lines]",
          "54: #define incr_ast_levels() \\",
          "61: #define ERROR_IF(x, error) \\",
          "68: #define DESTROY_NODE_IF(x, node) \\",
          "",
          "[Added Lines]",
          "54: #define fail_if_too_many_ast_levels(cleanup_code) \\",
          "57:       { cleanup_code } \\",
          "62: #define fail_if(x, error) \\",
          "69: #define destroy_node_if(x, node) \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: %}",
          "77: %pure-parser",
          "79: %parse-param {void *yyscanner}",
          "",
          "[Removed Lines]",
          "76: %name-prefix=\"hex_yy\"",
          "",
          "[Added Lines]",
          "77: %name-prefix \"hex_yy\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "98: %type <re_node> alternatives",
          "99: %type <re_node> range",
          "109: %%",
          "",
          "[Removed Lines]",
          "101: %destructor { yr_re_node_destroy($$); } tokens",
          "102: %destructor { yr_re_node_destroy($$); } token_sequence",
          "103: %destructor { yr_re_node_destroy($$); } token_or_range",
          "104: %destructor { yr_re_node_destroy($$); } token",
          "105: %destructor { yr_re_node_destroy($$); } byte",
          "106: %destructor { yr_re_node_destroy($$); } alternatives",
          "107: %destructor { yr_re_node_destroy($$); } range",
          "",
          "[Added Lines]",
          "102: %destructor { yr_re_node_destroy($$); $$ = NULL; } tokens",
          "103: %destructor { yr_re_node_destroy($$); $$ = NULL; } token_sequence",
          "104: %destructor { yr_re_node_destroy($$); $$ = NULL; } token_or_range",
          "105: %destructor { yr_re_node_destroy($$); $$ = NULL; } token",
          "106: %destructor { yr_re_node_destroy($$); $$ = NULL; } byte",
          "107: %destructor { yr_re_node_destroy($$); $$ = NULL; } alternatives",
          "108: %destructor { yr_re_node_destroy($$); $$ = NULL; } range",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "124:       }",
          "125:     | token token",
          "126:       {",
          "129:         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);",
          "135:       }",
          "136:     | token token_sequence token",
          "137:       {",
          "",
          "[Removed Lines]",
          "127:         incr_ast_levels();",
          "131:         DESTROY_NODE_IF($$ == NULL, $1);",
          "132:         DESTROY_NODE_IF($$ == NULL, $2);",
          "134:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "128:         fail_if_too_many_ast_levels({",
          "129:           yr_re_node_destroy($1);",
          "130:           yr_re_node_destroy($2);",
          "131:         });",
          "135:         destroy_node_if($$ == NULL, $1);",
          "136:         destroy_node_if($$ == NULL, $2);",
          "138:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:         RE_NODE* leftmost_concat = NULL;",
          "140:         RE_NODE* leftmost_node = $2;",
          "144:         $$ = NULL;",
          "",
          "[Removed Lines]",
          "142:         incr_ast_levels();",
          "",
          "[Added Lines]",
          "146:         fail_if_too_many_ast_levels({",
          "147:           yr_re_node_destroy($1);",
          "148:           yr_re_node_destroy($2);",
          "149:           yr_re_node_destroy($3);",
          "150:         });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "187:           }",
          "188:         }",
          "195:       }",
          "196:     ;",
          "",
          "[Removed Lines]",
          "190:         DESTROY_NODE_IF($$ == NULL, $1);",
          "191:         DESTROY_NODE_IF($$ == NULL, $2);",
          "192:         DESTROY_NODE_IF($$ == NULL, $3);",
          "194:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "198:         destroy_node_if($$ == NULL, $1);",
          "199:         destroy_node_if($$ == NULL, $2);",
          "200:         destroy_node_if($$ == NULL, $3);",
          "202:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "203:       }",
          "204:     | token_sequence token_or_range",
          "205:       {",
          "208:         $$ = yr_re_node_create(RE_NODE_CONCAT, $1, $2);",
          "214:       }",
          "215:     ;",
          "",
          "[Removed Lines]",
          "206:         incr_ast_levels();",
          "210:         DESTROY_NODE_IF($$ == NULL, $1);",
          "211:         DESTROY_NODE_IF($$ == NULL, $2);",
          "213:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "214:         fail_if_too_many_ast_levels({",
          "215:           yr_re_node_destroy($1);",
          "216:           yr_re_node_destroy($2);",
          "217:         });",
          "221:         destroy_node_if($$ == NULL, $1);",
          "222:         destroy_node_if($$ == NULL, $2);",
          "224:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "265:         $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);",
          "269:         $$->start = (int) $2;",
          "270:         $$->end = (int) $2;",
          "",
          "[Removed Lines]",
          "267:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "278:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "297:         $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);",
          "301:         $$->start = (int) $2;",
          "302:         $$->end = (int) $4;",
          "",
          "[Removed Lines]",
          "299:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "310:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "319:         $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);",
          "323:         $$->start = (int) $2;",
          "324:         $$->end = INT_MAX;",
          "",
          "[Removed Lines]",
          "321:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "332:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "335:         $$ = yr_re_node_create(RE_NODE_RANGE_ANY, NULL, NULL);",
          "339:         $$->start = 0;",
          "340:         $$->end = INT_MAX;",
          "",
          "[Removed Lines]",
          "337:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "348:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "350:     | alternatives '|' tokens",
          "351:       {",
          "352:         mark_as_not_fast_regexp();",
          "355:         $$ = yr_re_node_create(RE_NODE_ALT, $1, $3);",
          "361:       }",
          "362:     ;",
          "",
          "[Removed Lines]",
          "353:         incr_ast_levels();",
          "357:         DESTROY_NODE_IF($$ == NULL, $1);",
          "358:         DESTROY_NODE_IF($$ == NULL, $3);",
          "360:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "365:         fail_if_too_many_ast_levels({",
          "366:           yr_re_node_destroy($1);",
          "367:           yr_re_node_destroy($3);",
          "368:         });",
          "372:         destroy_node_if($$ == NULL, $1);",
          "373:         destroy_node_if($$ == NULL, $3);",
          "375:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "366:       {",
          "367:         $$ = yr_re_node_create(RE_NODE_LITERAL, NULL, NULL);",
          "371:         $$->value = (int) $1;",
          "372:       }",
          "",
          "[Removed Lines]",
          "369:         ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "384:         fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "378:         {",
          "379:           $$ = yr_re_node_create(RE_NODE_ANY, NULL, NULL);",
          "382:         }",
          "383:         else",
          "384:         {",
          "385:           $$ = yr_re_node_create(RE_NODE_MASKED_LITERAL, NULL, NULL);",
          "389:           $$->value = $1 & 0xFF;",
          "390:           $$->mask = mask;",
          "",
          "[Removed Lines]",
          "381:           ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "387:           ERROR_IF($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "[Added Lines]",
          "396:           fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "402:           fail_if($$ == NULL, ERROR_INSUFFICIENT_MEMORY);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "392:       }",
          "393:     ;",
          "",
          "[Removed Lines]",
          "395: %%",
          "",
          "[Added Lines]",
          "410: %%",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ac368637fa2bdd32614b134ba5236d2717ed1a56",
      "candidate_info": {
        "commit_hash": "ac368637fa2bdd32614b134ba5236d2717ed1a56",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/ac368637fa2bdd32614b134ba5236d2717ed1a56",
        "files": [
          "libyara/hex_grammar.c",
          "libyara/hex_grammar.y",
          "libyara/hex_lexer.c",
          "libyara/hex_lexer.l",
          "libyara/include/yara/hex_lexer.h",
          "libyara/include/yara/limits.h",
          "libyara/re_grammar.c",
          "libyara/re_grammar.h",
          "libyara/re_grammar.y"
        ],
        "message": "Remove MAX_HEX_STRING_TOKENS as it got overridden by RE_MAX_AST_LEVELS. Provide better error message when RE_MAX_AST_LEVELS is reached.",
        "before_after_code_files": [
          "libyara/hex_grammar.c||libyara/hex_grammar.c",
          "libyara/hex_grammar.y||libyara/hex_grammar.y",
          "libyara/hex_lexer.c||libyara/hex_lexer.c",
          "libyara/hex_lexer.l||libyara/hex_lexer.l",
          "libyara/include/yara/hex_lexer.h||libyara/include/yara/hex_lexer.h",
          "libyara/include/yara/limits.h||libyara/include/yara/limits.h",
          "libyara/re_grammar.c||libyara/re_grammar.c",
          "libyara/re_grammar.h||libyara/re_grammar.h",
          "libyara/re_grammar.y||libyara/re_grammar.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/hex_grammar.c||libyara/hex_grammar.c",
            "libyara/hex_grammar.y||libyara/hex_grammar.y"
          ],
          "candidate": [
            "libyara/hex_grammar.c||libyara/hex_grammar.c",
            "libyara/hex_grammar.y||libyara/hex_grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/hex_grammar.c||libyara/hex_grammar.c": [
          "File: libyara/hex_grammar.c -> libyara/hex_grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96: #define incr_ast_levels() \\",
          "97:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
          "98:     { \\",
          "100:       YYABORT; \\",
          "101:     }",
          "",
          "[Removed Lines]",
          "99:       lex_env->last_error_code = ERROR_INVALID_HEX_STRING; \\",
          "",
          "[Added Lines]",
          "99:       yyerror(yyscanner, lex_env, \"string too long\"); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "484: static const yytype_uint16 yyrline[] =",
          "485: {",
          "486:        0,   112,   112,   121,   125,   136,   200,   204,   219,   223,",
          "489: };",
          "490: #endif",
          "",
          "[Removed Lines]",
          "487:      232,   246,   245,   258,   281,   313,   335,   355,   359,   374,",
          "488:      382",
          "",
          "[Added Lines]",
          "487:      232,   237,   236,   249,   272,   304,   326,   346,   350,   365,",
          "488:      373",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1466:   case 10:",
          "1468:     {",
          "1478:         (yyval.re_node) = (yyvsp[0].re_node);",
          "1479:       }",
          "1481:     break;",
          "1483:   case 11:",
          "1485:     {",
          "1486:         lex_env->inside_or++;",
          "1487:       }",
          "1489:     break;",
          "1491:   case 12:",
          "1493:     {",
          "1494:         (yyval.re_node) = (yyvsp[-1].re_node);",
          "1495:         lex_env->inside_or--;",
          "1496:       }",
          "1498:     break;",
          "1500:   case 13:",
          "1502:     {",
          "1503:         if ((yyvsp[-1].integer) <= 0)",
          "1504:         {",
          "",
          "[Removed Lines]",
          "1469:         lex_env->token_count++;",
          "1471:         if (lex_env->token_count > MAX_HEX_STRING_TOKENS)",
          "1472:         {",
          "1473:           yr_re_node_destroy((yyvsp[0].re_node));",
          "1474:           yyerror(yyscanner, lex_env, \"string too long\");",
          "1475:           YYABORT;",
          "1476:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libyara/hex_grammar.y||libyara/hex_grammar.y": [
          "File: libyara/hex_grammar.y -> libyara/hex_grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: #define incr_ast_levels() \\",
          "55:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
          "56:     { \\",
          "58:       YYABORT; \\",
          "59:     }",
          "",
          "[Removed Lines]",
          "57:       lex_env->last_error_code = ERROR_INVALID_HEX_STRING; \\",
          "",
          "[Added Lines]",
          "57:       yyerror(yyscanner, lex_env, \"string too long\"); \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231: token",
          "232:     : byte",
          "233:       {",
          "243:         $$ = $1;",
          "244:       }",
          "245:     | '('",
          "",
          "[Removed Lines]",
          "234:         lex_env->token_count++;",
          "236:         if (lex_env->token_count > MAX_HEX_STRING_TOKENS)",
          "237:         {",
          "238:           yr_re_node_destroy($1);",
          "239:           yyerror(yyscanner, lex_env, \"string too long\");",
          "240:           YYABORT;",
          "241:         }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libyara/hex_lexer.c||libyara/hex_lexer.c": [
          "File: libyara/hex_lexer.c -> libyara/hex_lexer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2178:   lex_env.last_error_code = ERROR_SUCCESS;",
          "2179:   lex_env.inside_or = 0;",
          "2182:   yr_thread_storage_set_value(&yr_recovery_state_key, &recovery_state);",
          "",
          "[Removed Lines]",
          "2180:   lex_env.token_count = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libyara/hex_lexer.l||libyara/hex_lexer.l": [
          "File: libyara/hex_lexer.l -> libyara/hex_lexer.l",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:   lex_env.last_error_code = ERROR_SUCCESS;",
          "215:   lex_env.inside_or = 0;",
          "218:   yr_thread_storage_set_value(&yr_recovery_state_key, &recovery_state);",
          "",
          "[Removed Lines]",
          "216:   lex_env.token_count = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libyara/include/yara/hex_lexer.h||libyara/include/yara/hex_lexer.h": [
          "File: libyara/include/yara/hex_lexer.h -> libyara/include/yara/hex_lexer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: typedef struct _HEX_LEX_ENVIRONMENT",
          "67: {",
          "69:   int inside_or;",
          "70:   int last_error_code;",
          "71:   char last_error_message[256];",
          "",
          "[Removed Lines]",
          "68:   int token_count;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libyara/include/yara/limits.h||libyara/include/yara/limits.h": [
          "File: libyara/include/yara/limits.h -> libyara/include/yara/limits.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: #define MAX_FUNCTION_ARGS               128",
          "58: #define MAX_FAST_RE_STACK               300",
          "59: #define MAX_OVERLOADED_FUNCTIONS        10",
          "61: #define MAX_MATCH_DATA                  4096",
          "63: #define LOOP_LOCAL_VARS                 4",
          "",
          "[Removed Lines]",
          "60: #define MAX_HEX_STRING_TOKENS           10000",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "libyara/re_grammar.c||libyara/re_grammar.c": [
          "File: libyara/re_grammar.c -> libyara/re_grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: #define incr_ast_levels() \\",
          "92:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
          "93:     { \\",
          "95:       YYABORT; \\",
          "96:     }",
          "",
          "[Removed Lines]",
          "94:       lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION; \\",
          "",
          "[Added Lines]",
          "94:       yyerror(yyscanner, lex_env, \"regexp too long\"); \\",
          "",
          "---------------"
        ],
        "libyara/re_grammar.h||libyara/re_grammar.h": [
          "File: libyara/re_grammar.h -> libyara/re_grammar.h"
        ],
        "libyara/re_grammar.y||libyara/re_grammar.y": [
          "File: libyara/re_grammar.y -> libyara/re_grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "49: #define incr_ast_levels() \\",
          "50:     if (((RE_AST*) yyget_extra(yyscanner))->levels++ > RE_MAX_AST_LEVELS) \\",
          "51:     { \\",
          "53:       YYABORT; \\",
          "54:     }",
          "",
          "[Removed Lines]",
          "52:       lex_env->last_error_code = ERROR_INVALID_REGULAR_EXPRESSION; \\",
          "",
          "[Added Lines]",
          "52:       yyerror(yyscanner, lex_env, \"regexp too long\"); \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2adfc70e9cc945053367deddea1b4ecb9018d277",
      "candidate_info": {
        "commit_hash": "2adfc70e9cc945053367deddea1b4ecb9018d277",
        "repo": "VirusTotal/yara",
        "commit_url": "https://github.com/VirusTotal/yara/commit/2adfc70e9cc945053367deddea1b4ecb9018d277",
        "files": [
          "libyara/grammar.c",
          "libyara/grammar.y",
          "libyara/hex_grammar.c",
          "libyara/hex_grammar.y",
          "libyara/re_grammar.c",
          "libyara/re_grammar.y"
        ],
        "message": "Fix bug introduced in 15f831264acb82f7722cefd2cd9b7adea541826a.\n\nAs the lexer doesn't terminate right after finding an error, a double-free can happen if pointers associated to tokens are not set to NULL after being freed.",
        "before_after_code_files": [
          "libyara/grammar.c||libyara/grammar.c",
          "libyara/grammar.y||libyara/grammar.y",
          "libyara/hex_grammar.c||libyara/hex_grammar.c",
          "libyara/hex_grammar.y||libyara/hex_grammar.y",
          "libyara/re_grammar.c||libyara/re_grammar.c",
          "libyara/re_grammar.y||libyara/re_grammar.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libyara/hex_grammar.c||libyara/hex_grammar.c",
            "libyara/hex_grammar.y||libyara/hex_grammar.y"
          ],
          "candidate": [
            "libyara/hex_grammar.c||libyara/hex_grammar.c",
            "libyara/hex_grammar.y||libyara/hex_grammar.y"
          ]
        }
      },
      "candidate_diff": {
        "libyara/grammar.c||libyara/grammar.c": [
          "File: libyara/grammar.c -> libyara/grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1343:     {",
          "1348:         break;",
          "1354:         break;",
          "1360:         break;",
          "1366:         break;",
          "1372:         break;",
          "1378:         break;",
          "1384:         break;",
          "1390:         break;",
          "1396:         break;",
          "1402:         break;",
          "1408:         break;",
          "",
          "[Removed Lines]",
          "1346:       { yr_free(((*yyvaluep).c_string)); }",
          "1352:       { yr_free(((*yyvaluep).c_string)); }",
          "1358:       { yr_free(((*yyvaluep).c_string)); }",
          "1364:       { yr_free(((*yyvaluep).c_string)); }",
          "1370:       { yr_free(((*yyvaluep).c_string)); }",
          "1376:       { yr_free(((*yyvaluep).c_string)); }",
          "1382:       { yr_free(((*yyvaluep).sized_string)); }",
          "1388:       { yr_free(((*yyvaluep).sized_string)); }",
          "1394:       { yr_free(((*yyvaluep).sized_string)); }",
          "1400:       { yr_free(((*yyvaluep).c_string)); }",
          "1406:       { yr_free(((*yyvaluep).c_string)); }",
          "",
          "[Added Lines]",
          "1346:       { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }",
          "1352:       { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }",
          "1358:       { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }",
          "1364:       { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }",
          "1370:       { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }",
          "1376:       { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }",
          "1382:       { yr_free(((*yyvaluep).sized_string)); ((*yyvaluep).sized_string) = NULL; }",
          "1388:       { yr_free(((*yyvaluep).sized_string)); ((*yyvaluep).sized_string) = NULL; }",
          "1394:       { yr_free(((*yyvaluep).sized_string)); ((*yyvaluep).sized_string) = NULL; }",
          "1400:       { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }",
          "1406:       { yr_free(((*yyvaluep).c_string)); ((*yyvaluep).c_string) = NULL; }",
          "",
          "---------------"
        ],
        "libyara/grammar.y||libyara/grammar.y": [
          "File: libyara/grammar.y -> libyara/grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "199: %type <c_string> arguments",
          "200: %type <c_string> arguments_list",
          "215: %union {",
          "216:   EXPRESSION      expression;",
          "",
          "[Removed Lines]",
          "202: %destructor { yr_free($$); } _IDENTIFIER_",
          "203: %destructor { yr_free($$); } _STRING_COUNT_",
          "204: %destructor { yr_free($$); } _STRING_OFFSET_",
          "205: %destructor { yr_free($$); } _STRING_LENGTH_",
          "206: %destructor { yr_free($$); } _STRING_IDENTIFIER_",
          "207: %destructor { yr_free($$); } _STRING_IDENTIFIER_WITH_WILDCARD_",
          "208: %destructor { yr_free($$); } _TEXT_STRING_",
          "209: %destructor { yr_free($$); } _HEX_STRING_",
          "210: %destructor { yr_free($$); } _REGEXP_",
          "212: %destructor { yr_free($$); } arguments",
          "213: %destructor { yr_free($$); } arguments_list",
          "",
          "[Added Lines]",
          "202: %destructor { yr_free($$); $$ = NULL; } _IDENTIFIER_",
          "203: %destructor { yr_free($$); $$ = NULL; } _STRING_COUNT_",
          "204: %destructor { yr_free($$); $$ = NULL; } _STRING_OFFSET_",
          "205: %destructor { yr_free($$); $$ = NULL; } _STRING_LENGTH_",
          "206: %destructor { yr_free($$); $$ = NULL; } _STRING_IDENTIFIER_",
          "207: %destructor { yr_free($$); $$ = NULL; } _STRING_IDENTIFIER_WITH_WILDCARD_",
          "208: %destructor { yr_free($$); $$ = NULL; } _TEXT_STRING_",
          "209: %destructor { yr_free($$); $$ = NULL; } _HEX_STRING_",
          "210: %destructor { yr_free($$); $$ = NULL; } _REGEXP_",
          "212: %destructor { yr_free($$); $$ = NULL; } arguments",
          "213: %destructor { yr_free($$); $$ = NULL; } arguments_list",
          "",
          "---------------"
        ],
        "libyara/hex_grammar.c||libyara/hex_grammar.c": [
          "File: libyara/hex_grammar.c -> libyara/hex_grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1026:     {",
          "1031:         break;",
          "1037:         break;",
          "1043:         break;",
          "1049:         break;",
          "1055:         break;",
          "1061:         break;",
          "1067:         break;",
          "",
          "[Removed Lines]",
          "1029:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1035:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1041:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1047:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1053:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1059:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1065:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "",
          "[Added Lines]",
          "1029:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1035:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1041:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1047:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1053:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1059:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1065:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "",
          "---------------"
        ],
        "libyara/hex_grammar.y||libyara/hex_grammar.y": [
          "File: libyara/hex_grammar.y -> libyara/hex_grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: %type <re_node> alternatives",
          "100: %type <re_node> range",
          "110: %%",
          "",
          "[Removed Lines]",
          "102: %destructor { yr_re_node_destroy($$); } tokens",
          "103: %destructor { yr_re_node_destroy($$); } token_sequence",
          "104: %destructor { yr_re_node_destroy($$); } token_or_range",
          "105: %destructor { yr_re_node_destroy($$); } token",
          "106: %destructor { yr_re_node_destroy($$); } byte",
          "107: %destructor { yr_re_node_destroy($$); } alternatives",
          "108: %destructor { yr_re_node_destroy($$); } range",
          "",
          "[Added Lines]",
          "102: %destructor { yr_re_node_destroy($$); $$ = NULL; } tokens",
          "103: %destructor { yr_re_node_destroy($$); $$ = NULL; } token_sequence",
          "104: %destructor { yr_re_node_destroy($$); $$ = NULL; } token_or_range",
          "105: %destructor { yr_re_node_destroy($$); $$ = NULL; } token",
          "106: %destructor { yr_re_node_destroy($$); $$ = NULL; } byte",
          "107: %destructor { yr_re_node_destroy($$); $$ = NULL; } alternatives",
          "108: %destructor { yr_re_node_destroy($$); $$ = NULL; } range",
          "",
          "---------------"
        ],
        "libyara/re_grammar.c||libyara/re_grammar.c": [
          "File: libyara/re_grammar.c -> libyara/re_grammar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1048:     {",
          "1053:         break;",
          "1059:         break;",
          "1065:         break;",
          "1071:         break;",
          "1077:         break;",
          "",
          "[Removed Lines]",
          "1051:       { yr_free(((*yyvaluep).re_class)); }",
          "1057:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1063:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1069:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "1075:       { yr_re_node_destroy(((*yyvaluep).re_node)); }",
          "",
          "[Added Lines]",
          "1051:       { yr_free(((*yyvaluep).re_class)); ((*yyvaluep).re_class) = NULL; }",
          "1057:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1063:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1069:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "1075:       { yr_re_node_destroy(((*yyvaluep).re_node)); ((*yyvaluep).re_node) = NULL; }",
          "",
          "---------------"
        ],
        "libyara/re_grammar.y||libyara/re_grammar.y": [
          "File: libyara/re_grammar.y -> libyara/re_grammar.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "102: %type <re_node>  alternative concatenation repeat single",
          "110: %%",
          "",
          "[Removed Lines]",
          "104: %destructor { yr_free($$); } _CLASS_",
          "105: %destructor { yr_re_node_destroy($$); } alternative",
          "106: %destructor { yr_re_node_destroy($$); } concatenation",
          "107: %destructor { yr_re_node_destroy($$); } repeat",
          "108: %destructor { yr_re_node_destroy($$); } single",
          "",
          "[Added Lines]",
          "104: %destructor { yr_free($$); $$ = NULL; } _CLASS_",
          "105: %destructor { yr_re_node_destroy($$); $$ = NULL; } alternative",
          "106: %destructor { yr_re_node_destroy($$); $$ = NULL; } concatenation",
          "107: %destructor { yr_re_node_destroy($$); $$ = NULL; } repeat",
          "108: %destructor { yr_re_node_destroy($$); $$ = NULL; } single",
          "",
          "---------------"
        ]
      }
    }
  ]
}