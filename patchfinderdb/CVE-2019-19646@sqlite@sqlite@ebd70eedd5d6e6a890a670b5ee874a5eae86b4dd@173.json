{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6cbbcd8ad61c09c85a2e465047e3b89a269820c7",
      "candidate_info": {
        "commit_hash": "6cbbcd8ad61c09c85a2e465047e3b89a269820c7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6cbbcd8ad61c09c85a2e465047e3b89a269820c7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Fix a defect in the VDBE branch coverage testing logic.\n\nFossilOrigin-Name: 1fcf3307d37f0e8e0c8c54491c609b73c7add6eaa38409a41c7cd6614a877a19",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6cf8b18ec20f11c25ff7396f29c742404d3a88d5e97a5fd53ccfaff51dec3f33",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2044:     pOut->u.i = res2;",
          "2045:     REGISTER_TRACE(pOp->p2, pOut);",
          "2046:   }else{",
          "2048:     if( res2 ){",
          "2049:       goto jump_to_p2;",
          "2050:     }",
          "",
          "[Removed Lines]",
          "2047:     VdbeBranchTaken(res!=0, (pOp->p5 & SQLITE_NULLEQ)?2:3);",
          "",
          "[Added Lines]",
          "2047:     VdbeBranchTaken(res2!=0, (pOp->p5 & SQLITE_NULLEQ)?2:3);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f0c48b1cd8060b21fcef7c0029703284551d9306",
      "candidate_info": {
        "commit_hash": "f0c48b1cd8060b21fcef7c0029703284551d9306",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f0c48b1cd8060b21fcef7c0029703284551d9306",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Add an assert() in an attempt to repro an ASAN warning from OSSFuzz.\n\nFossilOrigin-Name: 7b41222428dcebaae2e9a0e8192e091b6fdee5b1163a5fa14ca1cd4f06354983",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: db74a56af73d92b7a9d43ceda7e4540915c580c68a0266b4ddefb9e0d5cbcbeb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1821:     pTab->iPKey = -1;",
          "1822:   }else{",
          "1823:     pPk = sqlite3PrimaryKeyIndex(pTab);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1824:     assert( pPk!=0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a3e086d80362607fcee57c3e9d9a5c9eef9fbcfc",
      "candidate_info": {
        "commit_hash": "a3e086d80362607fcee57c3e9d9a5c9eef9fbcfc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a3e086d80362607fcee57c3e9d9a5c9eef9fbcfc",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/recover.test"
        ],
        "message": "Fix an incompatibility with auto-vacuum mode in new test script recover.test.\n\nFossilOrigin-Name: 36dd5b0804797a35d0dc596b6ca4f71813a155c5a470237ab6e3d1bcd9ccc6be",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/recover.test||test/recover.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 07e527d781838412b2a434e64baaa49cbf7410a51c7393f54adc7b8eaffd5229",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/recover.test||test/recover.test": [
          "File: test/recover.test -> test/recover.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: #-------------------------------------------------------------------------",
          "92: reset_db",
          "93: do_execsql_test 2.1.0 {",
          "94:   CREATE TABLE t1(a, b, c, PRIMARY KEY(b, c)) WITHOUT ROWID;",
          "95:   INSERT INTO t1 VALUES(1, 2, 3);",
          "96:   INSERT INTO t1 VALUES(4, 5, 6);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "94:   PRAGMA auto_vacuum = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "efb5f9a173e45a1cfb4e03f5680a6307f6e3f17c",
      "candidate_info": {
        "commit_hash": "efb5f9a173e45a1cfb4e03f5680a6307f6e3f17c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/efb5f9a173e45a1cfb4e03f5680a6307f6e3f17c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improvements to VDBE tracing.  No changes to code in normal deliverables.\n\nFossilOrigin-Name: 54553bf16fabd72d1967acef317beb518e086707ccd45890b7c7256b8da08b75",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2925bfa5971c8557ecaa6ac18df0825ebbbd1622017509e83451d90640146fa8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "486:     sqlite3_snprintf(100, zCsr, \"%d[\", pMem->n);",
          "487:     zCsr += sqlite3Strlen30(zCsr);",
          "489:       sqlite3_snprintf(100, zCsr, \"%02X\", ((int)pMem->z[i] & 0xFF));",
          "490:       zCsr += sqlite3Strlen30(zCsr);",
          "491:     }",
          "493:       char z = pMem->z[i];",
          "494:       if( z<32 || z>126 ) *zCsr++ = '.';",
          "495:       else *zCsr++ = z;",
          "",
          "[Removed Lines]",
          "488:     for(i=0; i<16 && i<pMem->n; i++){",
          "492:     for(i=0; i<16 && i<pMem->n; i++){",
          "",
          "[Added Lines]",
          "488:     for(i=0; i<25 && i<pMem->n; i++){",
          "493:     for(i=0; i<25 && i<pMem->n; i++){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "519:     sqlite3_snprintf(100, &zBuf[k], \"%d\", pMem->n);",
          "520:     k += sqlite3Strlen30(&zBuf[k]);",
          "521:     zBuf[k++] = '[';",
          "523:       u8 c = pMem->z[j];",
          "524:       if( c>=0x20 && c<0x7f ){",
          "525:         zBuf[k++] = c;",
          "",
          "[Removed Lines]",
          "522:     for(j=0; j<15 && j<pMem->n; j++){",
          "",
          "[Added Lines]",
          "523:     for(j=0; j<25 && j<pMem->n; j++){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1832:     testcase( pIn1->flags & MEM_Int );",
          "1833:     testcase( pIn1->flags & MEM_IntReal );",
          "1834:     sqlite3VdbeMemRealify(pIn1);",
          "1835:   }",
          "1836:   break;",
          "1837: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1836:     REGISTER_TRACE(pOp->p1, pIn1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ed07d1274ce924779e769eedb647f11bc729259",
      "candidate_info": {
        "commit_hash": "8ed07d1274ce924779e769eedb647f11bc729259",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8ed07d1274ce924779e769eedb647f11bc729259",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Add the --max-stack option to dbfuzz2.\n\nFossilOrigin-Name: c11ae4fed89484f0a0061002861b5d599bbda8e40a1f0c33fdbe8cb072134d5c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 928e622178bd004be52b2271ac554176aebe9d6e115ecac4e7072eccbb4262b5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #include <stdarg.h>",
          "44: #include <ctype.h>",
          "45: #include <stdint.h>",
          "46: #include \"sqlite3.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #include <sys/time.h>",
          "47: #include <sys/resource.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:         bVdbeDebug = 1;",
          "149:         continue;",
          "150:       }",
          "151:     }",
          "152:     argv[j++] = argv[i];",
          "153:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "153:       if( strcmp(z,\"max-stack\")==0 ){",
          "154:         struct rlimit x,y;",
          "155:         if( i+1==argc ){",
          "156:           fprintf(stderr, \"missing argument to %s\\n\", argv[i]);",
          "157:           exit(1);",
          "158:         }",
          "159:         memset(&x,0,sizeof(x));",
          "160:         getrlimit(RLIMIT_STACK, &x);",
          "161:         y.rlim_cur = atoi(argv[++i]);",
          "162:         y.rlim_max = x.rlim_cur;",
          "163:         setrlimit(RLIMIT_STACK, &y);",
          "164:         memset(&y,0,sizeof(y));",
          "165:         getrlimit(RLIMIT_STACK, &y);",
          "166:         printf(\"Stack size limit changed from %d to %d\\n\",",
          "167:                (int)x.rlim_cur, (int)y.rlim_cur);",
          "168:         continue;",
          "169:       }",
          "",
          "---------------"
        ]
      }
    }
  ]
}