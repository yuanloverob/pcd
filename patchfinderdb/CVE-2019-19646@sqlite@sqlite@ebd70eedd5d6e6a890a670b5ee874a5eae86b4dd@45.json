{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f10c535fa5de97318abfec7d325a6a8a35919fd0",
      "candidate_info": {
        "commit_hash": "f10c535fa5de97318abfec7d325a6a8a35919fd0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f10c535fa5de97318abfec7d325a6a8a35919fd0",
        "files": [
          "ext/fts3/README.tokenizers",
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in",
          "test/fts3atoken.test"
        ],
        "message": "The fts3_tokenizer() function returns NULL if the SQLITE_DBCONFIG_ENABLE_FTS_TOKENIZER setting is disabled, which is is by default.\n\nFossilOrigin-Name: f5732f4caf7a37a6445c61ae0d0ac14cc9deb897376e73aa36a1ead025b92c69",
        "before_after_code_files": [
          "ext/fts3/README.tokenizers||ext/fts3/README.tokenizers",
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in",
          "test/fts3atoken.test||test/fts3atoken.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/README.tokenizers||ext/fts3/README.tokenizers": [
          "File: ext/fts3/README.tokenizers -> ext/fts3/README.tokenizers",
          "--- Hunk 1 ---",
          "[Context before]",
          "53:   SECURITY: If the fts3 extension is used in an environment where potentially",
          "54:     malicious users may execute arbitrary SQL (i.e. gears), they should be",
          "58:   See \"Sample code\" below for an example of calling the fts3_tokenizer()",
          "59:   function from C code.",
          "",
          "[Removed Lines]",
          "55:     prevented from invoking the fts3_tokenizer() function, possibly using the",
          "56:     authorisation callback.",
          "",
          "[Added Lines]",
          "55:     prevented from invoking the fts3_tokenizer() function.  The",
          "56:     fts3_tokenizer() function is disabled by default. It is only enabled",
          "57:     by SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER. Do not enable it in",
          "58:     security sensitive environments.",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:       return;",
          "107:     }",
          "108:   }",
          "110: }",
          "112: int sqlite3Fts3IsIdChar(char c){",
          "",
          "[Removed Lines]",
          "109:   sqlite3_result_blob(context, (void *)&pPtr, sizeof(pPtr), SQLITE_TRANSIENT);",
          "",
          "[Added Lines]",
          "109:   if( fts3TokenizerEnabled(context) ){",
          "110:     sqlite3_result_blob(context, (void *)&pPtr, sizeof(pPtr), SQLITE_TRANSIENT);",
          "111:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9a0a93c89d3fdd0f9000a9226388e2e53f299165e043913f40b83bf597bfea04",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "test/fts3atoken.test||test/fts3atoken.test": [
          "File: test/fts3atoken.test -> test/fts3atoken.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: # simple input string via the built-in test function. This is as much",
          "108: # to test the test function as the tokenizer implementations.",
          "109: #",
          "110: do_test fts3atoken-3.1 {",
          "111:   execsql {",
          "112:     SELECT fts3_tokenizer_test('simple', 'I don''t see how');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "110: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "126537e1dccc5f9006679ebcde202de36a8df636",
      "candidate_info": {
        "commit_hash": "126537e1dccc5f9006679ebcde202de36a8df636",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/126537e1dccc5f9006679ebcde202de36a8df636",
        "files": [
          "ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Remove some redundant code from sqlite3rbu.c. Add test cases for RBU vacuum.\n\nFossilOrigin-Name: 7b051698d8a763d9db190fd662931266d24a4982f34f100a28641934c222e37b",
        "before_after_code_files": [
          "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test": [
          "File: ext/rbu/rbuvacuum4.test -> ext/rbu/rbuvacuum4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:   INSERT INTO x1 VALUES(NULL, 2, 5, NULL);",
          "73:   CREATE INDEX x1ad ON x1(d, a);",
          "74: }",
          "76: do_rbu_vacuum_test 4.1.1 1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74:   CREATE INDEX x1null ON x1(d, a) WHERE d>15;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82: do_rbu_vacuum_test 4.1.2 0",
          "",
          "[Removed Lines]",
          "84: finish_test",
          "",
          "[Added Lines]",
          "85: #-------------------------------------------------------------------------",
          "86: reset_db",
          "87: do_execsql_test 5.0 {",
          "88:   CREATE TABLE \"a b c\"(a, \"b b\" PRIMARY KEY, \"c c\");",
          "89:   CREATE INDEX abc1 ON \"a b c\"(a, \"c c\");",
          "91:   INSERT INTO \"a b c\" VALUES(NULL, 'a', NULL);",
          "92:   INSERT INTO \"a b c\" VALUES(NULL, 'b', NULL);",
          "93:   INSERT INTO \"a b c\" VALUES(NULL, 'c', NULL);",
          "95:   INSERT INTO \"a b c\" VALUES(1, 2, 3);",
          "96:   INSERT INTO \"a b c\" VALUES(3, 9, 1);",
          "97:   INSERT INTO \"a b c\" VALUES('aaa', 'bbb', 'ccc');",
          "99:   CREATE TABLE x(a);",
          "100:   INSERT INTO x VALUES('a'), ('b'), ('d');",
          "101:   CREATE UNIQUE INDEX y ON x(a);",
          "102: }",
          "104: do_rbu_vacuum_test 5.1 1",
          "106: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "930:   zIn = (const char*)sqlite3_value_text(argv[0]);",
          "931:   if( zIn ){",
          "932:     if( rbuIsVacuum(p) ){",
          "934:         sqlite3_result_text(pCtx, zIn, -1, SQLITE_STATIC);",
          "935:       }",
          "936:     }else{",
          "",
          "[Removed Lines]",
          "933:       if( argc==1 || 0==sqlite3_value_int(argv[1]) ){",
          "",
          "[Added Lines]",
          "933:       assert( argc==2 );",
          "934:       if( 0==sqlite3_value_int(argv[1]) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1417:   return zList;",
          "1418: }",
          "1420: static char *rbuObjIterGetPkList(",
          "1424: ){",
          "1425:   int iPk = 1;",
          "1426:   char *zRet = 0;",
          "",
          "[Removed Lines]",
          "1423:   const char *zExtra",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1430:     for(i=0; i<pIter->nTblCol; i++){",
          "1431:       if( (int)pIter->abTblPk[i]==iPk ){",
          "1432:         const char *zCol = pIter->azTblCol[i];",
          "1435:       }",
          "1436:     }",
          "1437:     if( i==pIter->nTblCol ) break;",
          "",
          "[Removed Lines]",
          "1433:         zRet = rbuMPrintf(p, \"%z%s\\\"%w\\\"%s\", zRet, zSep, zCol, zExtra);",
          "1434:         zSep = \", \";",
          "",
          "[Added Lines]",
          "1442:         zRet = rbuMPrintf(p, \"%z%s%s\\\"%w\\\"%s\", zRet, zSep, zPre, zCol, zPost);",
          "1443:         zSep = zSeparator;",
          "1444:         break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1440:   return zRet;",
          "1441: }",
          "1443: static char *rbuVacuumTableStart(",
          "1448: ){",
          "1449:   sqlite3_stmt *pMax = 0;",
          "1450:   char *zRet = 0;",
          "",
          "[Removed Lines]",
          "1444:   sqlite3rbu *p,",
          "1445:   RbuObjIter *pIter,",
          "1446:   int bRowid,",
          "1447:   const char *zWrite",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1460:     }",
          "1461:     rbuFinalize(p, pMax);",
          "1462:   }else{",
          "1486:     if( p->rc==SQLITE_OK ){",
          "1487:       p->rc = prepareFreeAndCollectError(p->dbMain, &pMax, &p->zErrmsg,",
          "",
          "[Removed Lines]",
          "1463:     char *zOrder = 0;",
          "1464:     char *zSelect = 0;",
          "1465:     char *zList = 0;",
          "1466:     int iPk = 1;",
          "1467:     const char *zSep = \"\";",
          "1468:     const char *zSep2 = \"\";",
          "1469:     while( 1 ){",
          "1470:       int i;",
          "1471:       for(i=0; i<pIter->nTblCol; i++){",
          "1472:         if( (int)pIter->abTblPk[i]==iPk ){",
          "1473:           const char *zCol = pIter->azTblCol[i];",
          "1474:           zOrder = rbuMPrintf(p, \"%z%s\\\"%w\\\" DESC\", zOrder, zSep, zCol);",
          "1475:           zList = rbuMPrintf(p, \"%z%s\\\"%w\\\"\", zList, zSep, zCol);",
          "1476:           zSelect = rbuMPrintf(p, \"%z%squote(\\\"%w\\\")\", zSelect, zSep2, zCol);",
          "1477:           zSep = \", \";",
          "1478:           zSep2 = \"||','||\";",
          "1479:           break;",
          "1480:         }",
          "1481:       }",
          "1482:       if( i==pIter->nTblCol ) break;",
          "1483:       iPk++;",
          "1484:     }",
          "",
          "[Added Lines]",
          "1492:     char *zOrder = rbuObjIterGetPkList(p, pIter, \"\", \", \", \" DESC\");",
          "1493:     char *zSelect = rbuObjIterGetPkList(p, pIter, \"quote(\", \"||','||\", \")\");",
          "1494:     char *zList = rbuObjIterGetPkList(p, pIter, \"\", \", \", \"\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1504:   return zRet;",
          "1505: }",
          "1507: char *rbuVacuumIndexStart(",
          "1510: ){",
          "1511:   char *zOrder = 0;",
          "1512:   char *zLhs = 0;",
          "",
          "[Removed Lines]",
          "1508:   sqlite3rbu *p,",
          "1509:   RbuObjIter *pIter",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2274:       if( p->rc==SQLITE_OK ){",
          "2275:         char *zSql;",
          "2276:         if( rbuIsVacuum(p) ){",
          "2278:           if( nOffset ){",
          "2279:             zStart = rbuVacuumIndexStart(p, pIter);",
          "2280:             if( zStart ){",
          "",
          "[Removed Lines]",
          "2277:           const char *zStart = 0;",
          "",
          "[Added Lines]",
          "2309:           char *zStart = 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2435:           if( bRbuRowid ){",
          "2436:             zOrder = rbuMPrintf(p, \"_rowid_\");",
          "2437:           }else{",
          "2439:           }",
          "2440:         }",
          "",
          "[Removed Lines]",
          "2438:             zOrder = rbuObjIterGetPkList(p, pIter, \"\");",
          "",
          "[Added Lines]",
          "2470:             zOrder = rbuObjIterGetPkList(p, pIter, \"\", \", \", \"\");",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b3261bfa1d762aa29a57244a30cf5e35655f1fe9c30ee682c186dec29d7a2c2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d2175613f4eb065482a514edb34d2a7604b84a7",
      "candidate_info": {
        "commit_hash": "4d2175613f4eb065482a514edb34d2a7604b84a7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4d2175613f4eb065482a514edb34d2a7604b84a7",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a crash in the sqlite_dbdata module that could occur if a pointer within an overflow chain in a corrupt database pointed past the end of the db.\n\nFossilOrigin-Name: 3eae4e301e3e4bcf14e96066f77be1434c5d4b3daadb10153cd36382589ac128",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "587:                 int nOvfl = 0;",
          "588:                 int nCopy;",
          "589:                 rc = dbdataLoadPage(pCsr, pgnoOvfl, &aOvfl, &nOvfl);",
          "591:                 if( rc!=SQLITE_OK ) return rc;",
          "593:                 nCopy = U-4;",
          "594:                 if( nCopy>nRem ) nCopy = nRem;",
          "",
          "[Removed Lines]",
          "590:                 assert( rc!=SQLITE_OK || nOvfl==pCsr->nPage );",
          "",
          "[Added Lines]",
          "590:                 assert( rc!=SQLITE_OK || aOvfl==0 || nOvfl==pCsr->nPage );",
          "592:                 if( aOvfl==0 ) break;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9b0915272f4d4052aa31e9297424a7db9a0234b676e8e2a44c3f2dc54236705a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4780b9ad46ebf5b9a2628cd80ef2ec95a6566f56",
      "candidate_info": {
        "commit_hash": "4780b9ad46ebf5b9a2628cd80ef2ec95a6566f56",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4780b9ad46ebf5b9a2628cd80ef2ec95a6566f56",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/windowfault.test"
        ],
        "message": "Fix a segfault that could occur following an OOM while processing a SELECT statement for which one or more of the expressions in the window frame declaration are themselves sub-selects that use window functions.\n\nFossilOrigin-Name: 75aec4fc886c04fe098828cc03bc72c197cbf40f0a1890fe5bbb98d4fd5c3c7e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/windowfault.test||test/windowfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 658bd51623787be4ca87b066a051d119f39056286e223afef3691629cf1ab0e1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1511: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1512:     pNew->pWin = 0;",
          "1513:     pNew->pWinDefn = sqlite3WindowListDup(db, p->pWinDefn);",
          "1515: #endif",
          "1516:     pNew->selId = p->selId;",
          "",
          "[Removed Lines]",
          "1514:     if( p->pWin ) gatherSelectWindows(pNew);",
          "",
          "[Added Lines]",
          "1514:     if( p->pWin && db->mallocFailed==0 ) gatherSelectWindows(pNew);",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "224: catch {db close}",
          "225: tvfs delete",
          "227: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "227: reset_db",
          "228: do_execsql_test 10.0 {",
          "229:   CREATE TABLE t1(a, b, c, d);",
          "230:   CREATE TABLE t2(a, b, c, d);",
          "231: }",
          "233: do_faultsim_test 1 -faults oom* -prep {",
          "234: } -body {",
          "235:   execsql {",
          "236:     SELECT row_number() OVER win",
          "237:     FROM t1",
          "238:     WINDOW win AS (",
          "239:       ORDER BY (",
          "240:         SELECT percent_rank() OVER win2 FROM t2",
          "241:         WINDOW win2 AS (ORDER BY a)",
          "242:       )",
          "243:     )",
          "244:   }",
          "245: } -test {",
          "246:   faultsim_test_result {0 {}}",
          "247: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7971b7fe92cf262e5a6a4964b5acdfa683945872",
      "candidate_info": {
        "commit_hash": "7971b7fe92cf262e5a6a4964b5acdfa683945872",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7971b7fe92cf262e5a6a4964b5acdfa683945872",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/corruptL.test",
          "test/releasetest_data.tcl"
        ],
        "message": "More minor test file fixes.\n\nFossilOrigin-Name: 352878fe1cbcf7b6803624544bba5a95565d1638d4dd09e91764ddad17889301",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/corruptL.test||test/corruptL.test",
          "test/releasetest_data.tcl||test/releasetest_data.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e768179baacb2423205a774cc8149fe58ed86a9320102aff4844b1d8933aa1db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "377: | end crash-6b48ba69806134.db",
          "378: }]} {}",
          "380: do_catchsql_test 4.1 {",
          "381:   PRAGMA writable_schema=ON; -- bypass improved sqlite_master consistency checking",
          "382:   INSERT INTO t3 SELECT * FROM t2;",
          "386: #-------------------------------------------------------------------------",
          "387: reset_db",
          "",
          "[Removed Lines]",
          "383: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "380: set res {1 {database disk image is malformed}}",
          "381: ifcapable oversize_cell_check {",
          "382:   set res {1 {no such table: t3}}",
          "383: }",
          "387: } $res",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "835: | end a.db",
          "836: }]} {}",
          "839: do_catchsql_test 8.1 {",
          "840:   PRAGMA writable_schema=ON; -- bypass improved sqlite_master consistency checking",
          "841:   INSERT INTO t3 SELECT * FROM t2;",
          "844: #-------------------------------------------------------------------------",
          "845: reset_db",
          "",
          "[Removed Lines]",
          "842: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "841: set res {1 {database disk image is malformed}}",
          "842: ifcapable oversize_cell_check {",
          "843:   set res {1 {no such table: t3}}",
          "844: }",
          "848: } $res",
          "",
          "---------------"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "578:     puts \"$config \\\"$target\\\"\"",
          "579:     if {$bNodebug==0 && $bNosynthetic==0} {",
          "580:       set iHas [string first SQLITE_DEBUG $::Configs($config)]",
          "581:       if {$iHas>=0} {",
          "583:       } else {",
          "585:       }",
          "586:     }",
          "587:   }",
          "",
          "[Removed Lines]",
          "582:         puts \"$config-ndebug \\\"test\\\"\"",
          "584:         puts \"$config-debug \\\"test\\\"\"",
          "",
          "[Added Lines]",
          "581:       set dtarget test",
          "582:       if {$target==\"tcltest\"} {",
          "583:         set dtarget tcltest",
          "584:       }",
          "586:         puts \"$config-ndebug \\\"$dtarget\\\"\"",
          "588:         puts \"$config-debug \\\"$dtarget\\\"\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}