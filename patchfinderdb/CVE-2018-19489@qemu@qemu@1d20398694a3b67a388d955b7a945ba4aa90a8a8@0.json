{
  "cve_id": "CVE-2018-19489",
  "cve_desc": "v9fs_wstat in hw/9pfs/9p.c in QEMU allows guest OS users to cause a denial of service (crash) because of a race condition during file renaming.",
  "repo": "qemu/qemu",
  "patch_hash": "1d20398694a3b67a388d955b7a945ba4aa90a8a8",
  "patch_info": {
    "commit_hash": "1d20398694a3b67a388d955b7a945ba4aa90a8a8",
    "repo": "qemu/qemu",
    "commit_url": "https://github.com/qemu/qemu/commit/1d20398694a3b67a388d955b7a945ba4aa90a8a8",
    "files": [
      "hw/9pfs/9p.c"
    ],
    "message": "9p: fix QEMU crash when renaming files\n\nWhen using the 9P2000.u version of the protocol, the following shell\ncommand line in the guest can cause QEMU to crash:\n\n    while true; do rm -rf aa; mkdir -p a/b & touch a/b/c & mv a aa; done\n\nWith 9P2000.u, file renaming is handled by the WSTAT command. The\nv9fs_wstat() function calls v9fs_complete_rename(), which calls\nv9fs_fix_path() for every fid whose path is affected by the change.\nThe involved calls to v9fs_path_copy() may race with any other access\nto the fid path performed by some worker thread, causing a crash like\nshown below:\n\nThread 12 \"qemu-system-x86\" received signal SIGSEGV, Segmentation fault.\n0x0000555555a25da2 in local_open_nofollow (fs_ctx=0x555557d958b8, path=0x0,\n flags=65536, mode=0) at hw/9pfs/9p-local.c:59\n59          while (*path && fd != -1) {\n(gdb) bt\n#0  0x0000555555a25da2 in local_open_nofollow (fs_ctx=0x555557d958b8,\n path=0x0, flags=65536, mode=0) at hw/9pfs/9p-local.c:59\n#1  0x0000555555a25e0c in local_opendir_nofollow (fs_ctx=0x555557d958b8,\n path=0x0) at hw/9pfs/9p-local.c:92\n#2  0x0000555555a261b8 in local_lstat (fs_ctx=0x555557d958b8,\n fs_path=0x555556b56858, stbuf=0x7fff84830ef0) at hw/9pfs/9p-local.c:185\n#3  0x0000555555a2b367 in v9fs_co_lstat (pdu=0x555557d97498,\n path=0x555556b56858, stbuf=0x7fff84830ef0) at hw/9pfs/cofile.c:53\n#4  0x0000555555a1e9e2 in v9fs_stat (opaque=0x555557d97498)\n at hw/9pfs/9p.c:1083\n#5  0x0000555555e060a2 in coroutine_trampoline (i0=-669165424, i1=32767)\n at util/coroutine-ucontext.c:116\n#6  0x00007fffef4f5600 in __start_context () at /lib64/libc.so.6\n#7  0x0000000000000000 in  ()\n(gdb)\n\nThe fix is to take the path write lock when calling v9fs_complete_rename(),\nlike in v9fs_rename().\n\nImpact:  DoS triggered by unprivileged guest users.\n\nFixes: CVE-2018-19489\nCc: P J P <ppandit@redhat.com>\nReported-by: zhibin hu <noirfate@gmail.com>\nReviewed-by: Prasad J Pandit <pjp@fedoraproject.org>\nSigned-off-by: Greg Kurz <groug@kaod.org>",
    "before_after_code_files": [
      "hw/9pfs/9p.c||hw/9pfs/9p.c"
    ]
  },
  "patch_diff": {
    "hw/9pfs/9p.c||hw/9pfs/9p.c": [
      "File: hw/9pfs/9p.c -> hw/9pfs/9p.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2855:     struct stat stbuf;",
      "2856:     V9fsFidState *fidp;",
      "2857:     V9fsPDU *pdu = opaque;",
      "2859:     v9fs_stat_init(&v9stat);",
      "2860:     err = pdu_unmarshal(pdu, offset, \"dwS\", &fid, &unused, &v9stat);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2858:     V9fsState *s = pdu->s;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2920:         }",
      "2921:     }",
      "2922:     if (v9stat.name.size != 0) {",
      "2923:         err = v9fs_complete_rename(pdu, fidp, -1, &v9stat.name);",
      "2924:         if (err < 0) {",
      "2925:             goto out;",
      "2926:         }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2924:         v9fs_path_write_lock(s);",
      "2926:         v9fs_path_unlock(s);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d086829e5ba00d75637cd6ab51c4f291f62db941",
      "candidate_info": {
        "commit_hash": "d086829e5ba00d75637cd6ab51c4f291f62db941",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/d086829e5ba00d75637cd6ab51c4f291f62db941",
        "files": [
          "hw/9pfs/9p.c"
        ],
        "message": "9p: fix QEMU crash when renaming files\n\nWhen using the 9P2000.u version of the protocol, the following shell\ncommand line in the guest can cause QEMU to crash:\n\n    while true; do rm -rf aa; mkdir -p a/b & touch a/b/c & mv a aa; done\n\nWith 9P2000.u, file renaming is handled by the WSTAT command. The\nv9fs_wstat() function calls v9fs_complete_rename(), which calls\nv9fs_fix_path() for every fid whose path is affected by the change.\nThe involved calls to v9fs_path_copy() may race with any other access\nto the fid path performed by some worker thread, causing a crash like\nshown below:\n\nThread 12 \"qemu-system-x86\" received signal SIGSEGV, Segmentation fault.\n0x0000555555a25da2 in local_open_nofollow (fs_ctx=0x555557d958b8, path=0x0,\n flags=65536, mode=0) at hw/9pfs/9p-local.c:59\n59          while (*path && fd != -1) {\n(gdb) bt\n#0  0x0000555555a25da2 in local_open_nofollow (fs_ctx=0x555557d958b8,\n path=0x0, flags=65536, mode=0) at hw/9pfs/9p-local.c:59\n#1  0x0000555555a25e0c in local_opendir_nofollow (fs_ctx=0x555557d958b8,\n path=0x0) at hw/9pfs/9p-local.c:92\n#2  0x0000555555a261b8 in local_lstat (fs_ctx=0x555557d958b8,\n fs_path=0x555556b56858, stbuf=0x7fff84830ef0) at hw/9pfs/9p-local.c:185\n#3  0x0000555555a2b367 in v9fs_co_lstat (pdu=0x555557d97498,\n path=0x555556b56858, stbuf=0x7fff84830ef0) at hw/9pfs/cofile.c:53\n#4  0x0000555555a1e9e2 in v9fs_stat (opaque=0x555557d97498)\n at hw/9pfs/9p.c:1083\n#5  0x0000555555e060a2 in coroutine_trampoline (i0=-669165424, i1=32767)\n at util/coroutine-ucontext.c:116\n#6  0x00007fffef4f5600 in __start_context () at /lib64/libc.so.6\n#7  0x0000000000000000 in  ()\n(gdb)\n\nThe fix is to take the path write lock when calling v9fs_complete_rename(),\nlike in v9fs_rename().\n\nImpact:  DoS triggered by unprivileged guest users.\n\nFixes: CVE-2018-19489\nCc: P J P <ppandit@redhat.com>\nReported-by: zhibin hu <noirfate@gmail.com>\nReviewed-by: Prasad J Pandit <pjp@fedoraproject.org>\nSigned-off-by: Greg Kurz <groug@kaod.org>\n(cherry picked from commit 1d20398694a3b67a388d955b7a945ba4aa90a8a8)\nSigned-off-by: Michael Roth <mdroth@linux.vnet.ibm.com>",
        "before_after_code_files": [
          "hw/9pfs/9p.c||hw/9pfs/9p.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "hw/9pfs/9p.c||hw/9pfs/9p.c"
          ],
          "candidate": [
            "hw/9pfs/9p.c||hw/9pfs/9p.c"
          ]
        }
      },
      "candidate_diff": {
        "hw/9pfs/9p.c||hw/9pfs/9p.c": [
          "File: hw/9pfs/9p.c -> hw/9pfs/9p.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2840:     struct stat stbuf;",
          "2841:     V9fsFidState *fidp;",
          "2842:     V9fsPDU *pdu = opaque;",
          "2844:     v9fs_stat_init(&v9stat);",
          "2845:     err = pdu_unmarshal(pdu, offset, \"dwS\", &fid, &unused, &v9stat);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2843:     V9fsState *s = pdu->s;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2905:         }",
          "2906:     }",
          "2907:     if (v9stat.name.size != 0) {",
          "2908:         err = v9fs_complete_rename(pdu, fidp, -1, &v9stat.name);",
          "2909:         if (err < 0) {",
          "2910:             goto out;",
          "2911:         }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2909:         v9fs_path_write_lock(s);",
          "2911:         v9fs_path_unlock(s);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b8fa995b924fd8fb5cf14066fc4c1480fd3705f",
      "candidate_info": {
        "commit_hash": "8b8fa995b924fd8fb5cf14066fc4c1480fd3705f",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/8b8fa995b924fd8fb5cf14066fc4c1480fd3705f",
        "files": [
          "tests/check-qjson.c"
        ],
        "message": "tests/check-qjson: fix a leak\n\nSpotted by ASAN:\n=================================================================\n==11893==ERROR: LeakSanitizer: detected memory leaks\n\nDirect leak of 1120 byte(s) in 28 object(s) allocated from:\n    #0 0x7fd0515b0c48 in malloc (/lib64/libasan.so.5+0xeec48)\n    #1 0x7fd050ffa3c5 in g_malloc (/lib64/libglib-2.0.so.0+0x523c5)\n    #2 0x559e708b56a4 in qstring_from_str /home/elmarco/src/qq/qobject/qstring.c:66\n    #3 0x559e708b4fe0 in qstring_new /home/elmarco/src/qq/qobject/qstring.c:23\n    #4 0x559e708bda7d in parse_string /home/elmarco/src/qq/qobject/json-parser.c:143\n    #5 0x559e708c1009 in parse_literal /home/elmarco/src/qq/qobject/json-parser.c:484\n    #6 0x559e708c1627 in parse_value /home/elmarco/src/qq/qobject/json-parser.c:547\n    #7 0x559e708c1c67 in json_parser_parse /home/elmarco/src/qq/qobject/json-parser.c:573\n    #8 0x559e708bc0ff in json_message_process_token /home/elmarco/src/qq/qobject/json-streamer.c:92\n    #9 0x559e708d1655 in json_lexer_feed_char /home/elmarco/src/qq/qobject/json-lexer.c:292\n    #10 0x559e708d1fe1 in json_lexer_feed /home/elmarco/src/qq/qobject/json-lexer.c:339\n    #11 0x559e708bc856 in json_message_parser_feed /home/elmarco/src/qq/qobject/json-streamer.c:121\n    #12 0x559e708b8b4b in qobject_from_jsonv /home/elmarco/src/qq/qobject/qjson.c:69\n    #13 0x559e708b8d02 in qobject_from_json /home/elmarco/src/qq/qobject/qjson.c:83\n    #14 0x559e708a74ae in from_json_str /home/elmarco/src/qq/tests/check-qjson.c:30\n    #15 0x559e708a9f83 in utf8_string /home/elmarco/src/qq/tests/check-qjson.c:781\n    #16 0x7fd05101bc49 in test_case_run gtestutils.c:2255\n    #17 0x7fd05101bc49 in g_test_run_suite_internal gtestutils.c:2339\n\nSigned-off-by: Marc-Andr\u00e9 Lureau <marcandre.lureau@redhat.com>\nMessage-Id: <20180901211917.10372-1-marcandre.lureau@redhat.com>\nReviewed-by: Markus Armbruster <armbru@redhat.com>\nSigned-off-by: Markus Armbruster <armbru@redhat.com>",
        "before_after_code_files": [
          "tests/check-qjson.c||tests/check-qjson.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tests/check-qjson.c||tests/check-qjson.c": [
          "File: tests/check-qjson.c -> tests/check-qjson.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "780:             if (!strstr(json_out, \"\\\\uFFFD\")) {",
          "781:                 str = from_json_str(json_out, j, &error_abort);",
          "782:                 g_assert_cmpstr(qstring_get_try_str(str), ==, utf8_in);",
          "783:             }",
          "784:         }",
          "785:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "783:                 qobject_unref(str);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ab94c6b42f4ae247843f93956ccc0468b6c75bf3",
      "candidate_info": {
        "commit_hash": "ab94c6b42f4ae247843f93956ccc0468b6c75bf3",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/ab94c6b42f4ae247843f93956ccc0468b6c75bf3",
        "files": [
          "hw/core/qdev.c"
        ],
        "message": "qdev: fix -device scsi-hd,help regression\n\nSince commit ea9ce8934, device_post_init() applies globals directly\nfrom machines and accelerator classes.\n\nThere are cases, such as -device scsi-hd,help, where the machine is\nsetup but there in no accelerator.\n\nLet's skip accelerator globals in this case.\n\nFixes SEGV:\n #0  0x0000555558ea04ff in object_get_class (obj=0x0) at /home/elmarco/src/qemu/build/../qom/object.c:857\n #1  0x000055555854c797 in object_apply_compat_props (obj=0x616000078980) at /home/elmarco/src/qemu/build/../hw/core/qdev.c:978\n #2  0x000055555854c797 in object_apply_compat_props (obj=0x616000078980) at /home/elmarco/src/qemu/build/../hw/core/qdev.c:973\n #3  0x000055555854c959 in device_post_init (obj=0x616000078980) at /home/elmarco/src/qemu/build/../hw/core/qdev.c:989\n #4  0x0000555558e9e250 in object_post_init_with_type (ti=<optimized out>, obj=0x616000078980) at /home/elmarco/src/qemu/build/../qom/object.c:365\n #5  0x0000555558e9e250 in object_initialize_with_type (data=0x616000078980, size=616, type=<optimized out>) at /home/elmarco/src/qemu/build/../qom/object.c:425\n #6  0x0000555558e9e571 in object_new_with_type (type=0x613000031900) at /home/elmarco/src/qemu/build/../qom/object.c:588\n #7  0x000055555830c048 in qmp_device_list_properties (typename=typename@entry=0x60200000c2d0 \"scsi-hd\", errp=errp@entry=0x7fffffffc540) at /home/elmarco/src/qemu/qmp.c:519\n #8  0x00005555582c4027 in qdev_device_help (opts=<optimized out>) at /home/elmarco/src/qemu/qdev-monitor.c:283\n #9  0x0000555559378fa2 in qemu_opts_foreach (list=<optimized out>, func=func@entry=0x5555582cfca0 <device_help_func>, opaque=opaque@entry=0x0, errp=errp@entry=0x0) at /home/elmarco/src/qemu/util/qemu-option.c:1171\n\nhttps://bugzilla.redhat.com/show_bug.cgi?id=1664364\n\nSigned-off-by: Marc-Andr\u00e9 Lureau <marcandre.lureau@redhat.com>\nMessage-Id: <20190109102311.7635-1-marcandre.lureau@redhat.com>\nReviewed-by: Cornelia Huck <cohuck@redhat.com>\nReviewed-by: Luk\u00e1\u0161 Doktor <ldoktor@redhat.com>\nReviewed-by: Igor Mammedov <imammedo@redhat.com>\nSigned-off-by: Eduardo Habkost <ehabkost@redhat.com>",
        "before_after_code_files": [
          "hw/core/qdev.c||hw/core/qdev.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hw/core/qdev.c||hw/core/qdev.c": [
          "File: hw/core/qdev.c -> hw/core/qdev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "975:     if (object_dynamic_cast(qdev_get_machine(), TYPE_MACHINE)) {",
          "976:         MachineState *m = MACHINE(qdev_get_machine());",
          "977:         MachineClass *mc = MACHINE_GET_CLASS(m);",
          "982:         }",
          "983:         object_apply_global_props(obj, mc->compat_props, &error_abort);",
          "984:     }",
          "",
          "[Removed Lines]",
          "978:         AccelClass *ac = ACCEL_GET_CLASS(m->accelerator);",
          "980:         if (ac->compat_props) {",
          "981:             object_apply_global_props(obj, ac->compat_props, &error_abort);",
          "",
          "[Added Lines]",
          "979:         if (m->accelerator) {",
          "980:             AccelClass *ac = ACCEL_GET_CLASS(m->accelerator);",
          "982:             if (ac->compat_props) {",
          "983:                 object_apply_global_props(obj, ac->compat_props, &error_abort);",
          "984:             }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fbc12f324135cf579277c212ab8690ca9174512",
      "candidate_info": {
        "commit_hash": "8fbc12f324135cf579277c212ab8690ca9174512",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/8fbc12f324135cf579277c212ab8690ca9174512",
        "files": [
          "scripts/tracetool/backend/log.py"
        ],
        "message": "tracetool: Include thread id information in log backend\n\nCurrently the log backend prints the process id of QEMU at the start\nof each output line, but since threads share the same PID there is no\nclear distinction between their outputs.\n\nHaving the thread id present in the log makes it easier to see when\noutput comes from different threads. E.g.:\n\n12423@1538597569.672527:qemu_mutex_lock waiting on mutex 0x1103ee60 (/root/qemu/util/main-loop.c:236)\n...\n12430@1538597569.503928:qemu_mutex_unlock released mutex 0x1103ee60 (/root/qemu/cpus.c:1238)\n12431@1538597569.503937:qemu_mutex_locked taken mutex 0x1103ee60 (/root/qemu/cpus.c:1257)\n^here\n\nIn the above, 12423 is the main process id and 12430 & 12431 are the\ntwo vcpu threads.\n\n (qemu) info cpus\n * CPU #0: thread_id=12430\n   CPU #1: thread_id=12431\n\nSuggested-by: Murilo Opsfelder Araujo <muriloo@linux.ibm.com>\nSigned-off-by: Fabiano Rosas <farosas@linux.ibm.com>\nSigned-off-by: Stefan Hajnoczi <stefanha@redhat.com>",
        "before_after_code_files": [
          "scripts/tracetool/backend/log.py||scripts/tracetool/backend/log.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "scripts/tracetool/backend/log.py||scripts/tracetool/backend/log.py": [
          "File: scripts/tracetool/backend/log.py -> scripts/tracetool/backend/log.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "39:         '        struct timeval _now;',",
          "40:         '        gettimeofday(&_now, NULL);',",
          "41:         '        qemu_log(\"%%d@%%zu.%%06zu:%(name)s \" %(fmt)s \"\\\\n\",',",
          "43:         '                 (size_t)_now.tv_sec, (size_t)_now.tv_usec',",
          "44:         '                 %(argnames)s);',",
          "45:         '    }',",
          "",
          "[Removed Lines]",
          "42:         '                 getpid(),',",
          "",
          "[Added Lines]",
          "42:         '                 qemu_get_thread_id(),',",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7760da729ac88f112f98f36395ac3b55fc9e4211",
      "candidate_info": {
        "commit_hash": "7760da729ac88f112f98f36395ac3b55fc9e4211",
        "repo": "qemu/qemu",
        "commit_url": "https://github.com/qemu/qemu/commit/7760da729ac88f112f98f36395ac3b55fc9e4211",
        "files": [
          "target/arm/op_helper.c"
        ],
        "message": "target/arm: fix smc incorrectly trapping to EL3 when secure is off\n\nThis commit fixes a case where the CPU would try to go to EL3 when\nexecuting an smc instruction, even though ARM_FEATURE_EL3 is false. This\ncase is raised when the PSCI conduit is set to smc, but the smc\ninstruction does not lead to a valid PSCI call.\n\nQEMU crashes with an assertion failure latter on because of incoherent\nmmu_idx.\n\nThis commit refactors the pre_smc helper by enumerating all the possible\nway of handling an scm instruction, and covering the previously missing\ncase leading to the crash.\n\nThe following minimal test would crash before this commit:\n\n.global _start\n    .text\n_start:\n    ldr x0, =0xdeadbeef  ; invalid PSCI call\n    smc #0\n\nrun with the following command line:\n\naarch64-linux-gnu-gcc -nostdinc -nostdlib -Wl,-Ttext=40000000 \\\n                      -o test test.s\n\nqemu-system-aarch64 -M virt,virtualization=on,secure=off \\\n                    -cpu cortex-a57 -kernel test\n\nSigned-off-by: Luc Michel <luc.michel@greensocs.com>\nMessage-id: 20181117160213.18995-1-luc.michel@greensocs.com\nReviewed-by: Peter Maydell <peter.maydell@linaro.org>\nSigned-off-by: Peter Maydell <peter.maydell@linaro.org>",
        "before_after_code_files": [
          "target/arm/op_helper.c||target/arm/op_helper.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "target/arm/op_helper.c||target/arm/op_helper.c": [
          "File: target/arm/op_helper.c -> target/arm/op_helper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "939:     ARMCPU *cpu = arm_env_get_cpu(env);",
          "940:     int cur_el = arm_current_el(env);",
          "941:     bool secure = arm_is_secure(env);",
          "",
          "[Removed Lines]",
          "942:     bool smd = env->cp15.scr_el3 & SCR_SMD;",
          "",
          "[Added Lines]",
          "942:     bool smd_flag = env->cp15.scr_el3 & SCR_SMD;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "952:     if (!arm_feature(env, ARM_FEATURE_EL3) &&",
          "953:         cpu->psci_conduit != QEMU_PSCI_CONDUIT_SMC) {",
          "",
          "[Removed Lines]",
          "950:     bool undef = arm_feature(env, ARM_FEATURE_AARCH64) ? smd : smd && !secure;",
          "",
          "[Added Lines]",
          "981:     bool smd = arm_feature(env, ARM_FEATURE_AARCH64) ? smd_flag",
          "982:                                                      : smd_flag && !secure;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "967:         raise_exception(env, EXCP_HYP_TRAP, syndrome, 2);",
          "968:     }",
          "975:         raise_exception(env, EXCP_UDEF, syn_uncategorized(),",
          "976:                         exception_target_el(env));",
          "977:     }",
          "",
          "[Removed Lines]",
          "961:         undef = true;",
          "962:     } else if (!secure && cur_el == 1 && (env->cp15.hcr_el2 & HCR_TSC)) {",
          "974:     if (undef && !arm_is_psci_call(cpu, EXCP_SMC)) {",
          "",
          "[Added Lines]",
          "994:         raise_exception(env, EXCP_UDEF, syn_uncategorized(),",
          "995:                         exception_target_el(env));",
          "996:     }",
          "998:     if (!secure && cur_el == 1 && (env->cp15.hcr_el2 & HCR_TSC)) {",
          "1011:     if (!arm_is_psci_call(cpu, EXCP_SMC) &&",
          "1012:         (smd || !arm_feature(env, ARM_FEATURE_EL3))) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}