{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f16cf653f44115821c4718a255f8be6d8d594baa",
      "candidate_info": {
        "commit_hash": "f16cf653f44115821c4718a255f8be6d8d594baa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f16cf653f44115821c4718a255f8be6d8d594baa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c"
        ],
        "message": "In wal.c, improved comments on concurrency issues.  More use of AtomicLoad() and AtomicStore().\n\nFossilOrigin-Name: 4bf566feca3a8fbe5e386533aac30e0ac25836cfc820a3abd91e156bd6198b4a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f64d054b799c0af8d582fd9aff9bcbfa380ef08026ba5db8c5f89f6f56dfdad9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1897:     mxSafeFrame = pWal->hdr.mxFrame;",
          "1898:     mxPage = pWal->hdr.nPage;",
          "1899:     for(i=1; i<WAL_NREADER; i++){",
          "1921:       if( mxSafeFrame>y ){",
          "1922:         assert( y<=pWal->hdr.mxFrame );",
          "1923:         rc = walBusyLock(pWal, xBusy, pBusyArg, WAL_READ_LOCK(i), 1);",
          "1924:         if( rc==SQLITE_OK ){",
          "1926:           walUnlockExclusive(pWal, WAL_READ_LOCK(i), 1);",
          "1927:         }else if( rc==SQLITE_BUSY ){",
          "1928:           mxSafeFrame = y;",
          "",
          "[Removed Lines]",
          "1920:       u32 y = pInfo->aReadMark[i];",
          "1925:           pInfo->aReadMark[i] = (i==1 ? mxSafeFrame : READMARK_NOT_USED);",
          "",
          "[Added Lines]",
          "1905:       u32 y = AtomicLoad(pInfo->aReadMark+i);",
          "1910:           u32 iMark = (i==1 ? mxSafeFrame : READMARK_NOT_USED);",
          "1911:           AtomicStore(pInfo->aReadMark+i, iMark);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1940:     }",
          "1942:     if( pIter",
          "1944:     ){",
          "1945:       u32 nBackfill = pInfo->nBackfill;",
          "",
          "[Removed Lines]",
          "1943:      && (rc = walBusyLock(pWal, xBusy, pBusyArg, WAL_READ_LOCK(0),1))==SQLITE_OK",
          "",
          "[Added Lines]",
          "1929:      && (rc = walBusyLock(pWal,xBusy,pBusyArg,WAL_READ_LOCK(0),1))==SQLITE_OK",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2176:   aHdr = walIndexHdr(pWal);",
          "2178:   walShmBarrier(pWal);",
          "2179:   memcpy(&h2, (void *)&aHdr[1], sizeof(h2));",
          "",
          "[Removed Lines]",
          "2177:   memcpy(&h1, (void *)&aHdr[0], sizeof(h1));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3019:     rc = walHashGet(pWal, iHash, &sLoc);",
          "3020:     if( rc!=SQLITE_OK ){",
          "3021:       return rc;",
          "3022:     }",
          "3023:     nCollide = HASHTABLE_NSLOT;",
          "3026:       u32 iFrame = iH + sLoc.iZero;",
          "3027:       if( iFrame<=iLast && iFrame>=pWal->minFrame && sLoc.aPgno[iH]==pgno ){",
          "3028:         assert( iFrame>iRead || CORRUPT_DB );",
          "",
          "[Removed Lines]",
          "3024:     for(iKey=walHash(pgno); sLoc.aHash[iKey]; iKey=walNextHash(iKey)){",
          "3025:       u32 iH = sLoc.aHash[iKey];",
          "",
          "[Added Lines]",
          "3010:     u32 iH;",
          "3017:     iKey = walHash(pgno);",
          "3018:     while( (iH = AtomicLoad(&sLoc.aHash[iKey]))!=0 ){",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3031:       if( (nCollide--)==0 ){",
          "3032:         return SQLITE_CORRUPT_BKPT;",
          "3033:       }",
          "3034:     }",
          "3035:     if( iRead ) break;",
          "3036:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3027:       iKey = walNextHash(iKey);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5eeacd58b883833f91acc7961b4dc51776a2409",
      "candidate_info": {
        "commit_hash": "c5eeacd58b883833f91acc7961b4dc51776a2409",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c5eeacd58b883833f91acc7961b4dc51776a2409",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/shell.c.in",
          "test/shell1.test"
        ],
        "message": "Merge updates from trunk.\n\nFossilOrigin-Name: d7db09101878102e192ee7a81437e8f6f2e317ddf110852673a2e81d1f80ae0e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/shell.c.in||src/shell.c.in",
          "test/shell1.test||test/shell1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ca8c5f028b9f6f32639c8bc9df5dc02537e21385fcbe7e1ae600c640977ea0d5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2941:     affinity = sqlite3ExprAffinity(pLeft);",
          "2942:     if( affinity<=SQLITE_AFF_NONE ){",
          "2943:       affinity = SQLITE_AFF_BLOB;",
          "2944:     }",
          "2945:     if( pKeyInfo ){",
          "2946:       assert( sqlite3KeyInfoIsWriteable(pKeyInfo) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2944:     }else if( affinity==SQLITE_AFF_REAL ){",
          "2945:       affinity = SQLITE_AFF_NUMERIC;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3250:     int r2, regToFree;",
          "3251:     int regCkNull = 0;",
          "3252:     int ii;",
          "3254:     assert( !ExprHasProperty(pExpr, EP_xIsSelect) );",
          "3255:     if( destIfNull!=destIfFalse ){",
          "3256:       regCkNull = sqlite3GetTempReg(pParse);",
          "3257:       sqlite3VdbeAddOp3(v, OP_BitAnd, rLhs, rLhs, regCkNull);",
          "3258:     }",
          "3260:     for(ii=0; ii<pList->nExpr; ii++){",
          "3268:       if( regCkNull && sqlite3ExprCanBeNull(pList->a[ii].pExpr) ){",
          "3269:         sqlite3VdbeAddOp3(v, OP_BitAnd, regCkNull, r2, regCkNull);",
          "3270:       }",
          "",
          "[Removed Lines]",
          "3259:     bLhsReal = sqlite3ExprAffinity(pExpr->pLeft)==SQLITE_AFF_REAL;",
          "3261:       if( bLhsReal ){",
          "3262:         r2 = regToFree = sqlite3GetTempReg(pParse);",
          "3263:         sqlite3ExprCode(pParse, pList->a[ii].pExpr, r2);",
          "3264:         sqlite3VdbeAddOp4(v, OP_Affinity, r2, 1, 0, \"E\", P4_STATIC);",
          "3265:       }else{",
          "3266:         r2 = sqlite3ExprCodeTemp(pParse, pList->a[ii].pExpr, &regToFree);",
          "3267:       }",
          "",
          "[Added Lines]",
          "3261:       r2 = sqlite3ExprCodeTemp(pParse, pList->a[ii].pExpr, &regToFree);",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1195:       sqlite3ExprUnmapAndDelete(pParse, A);",
          "1196:       A = sqlite3Expr(pParse->db, TK_INTEGER, N ? \"1\" : \"0\");",
          "1198:       Expr *pRHS = Y->a[0].pExpr;",
          "1199:       Y->a[0].pExpr = 0;",
          "1200:       sqlite3ExprListDelete(pParse->db, Y);",
          "1201:       A = sqlite3PExpr(pParse, TK_EQ, A, pRHS);",
          "1202:       if( N ) A = sqlite3PExpr(pParse, TK_NOT, A, 0);",
          "1203:     }else{",
          "",
          "[Removed Lines]",
          "1197:     }else if( 0 && Y->nExpr==1 && sqlite3ExprIsConstant(Y->a[0].pExpr) ){",
          "",
          "[Added Lines]",
          "1197:     }else if( Y->nExpr==1 && sqlite3ExprIsConstant(Y->a[0].pExpr) ){",
          "1201:       pRHS = sqlite3PExpr(pParse, TK_UPLUS, pRHS, 0);",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2376:   rc = sqlite3_step(pSelect);",
          "2377:   nResult = sqlite3_column_count(pSelect);",
          "2378:   while( rc==SQLITE_ROW ){",
          "2383:     z = (const char*)sqlite3_column_text(pSelect, 0);",
          "2384:     utf8_printf(p->out, \"%s\", z);",
          "2385:     for(i=1; i<nResult; i++){",
          "",
          "[Removed Lines]",
          "2379:     if( zFirstRow ){",
          "2380:       utf8_printf(p->out, \"%s\", zFirstRow);",
          "2381:       zFirstRow = 0;",
          "2382:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3552:   \".databases               List names and files of attached databases\",",
          "3553:   \".dbconfig ?op? ?val?     List or change sqlite3_db_config() options\",",
          "3554:   \".dbinfo ?DB?             Show status information about the database\",",
          "3556:   \"   Options:\",",
          "3557:   \"     --preserve-rowids      Include ROWID values in the output\",",
          "3558:   \"     --newlines             Allow unescaped newline characters in output\",",
          "3559:   \"   TABLE is a LIKE pattern for the tables to dump\",",
          "3560:   \".echo on|off             Turn command echo on or off\",",
          "3561:   \".eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN\",",
          "3562:   \"   Other Modes:\",",
          "",
          "[Removed Lines]",
          "3555:   \".dump ?TABLE? ...        Render all database content as SQL\",",
          "",
          "[Added Lines]",
          "3550:   \".dump ?TABLE?            Render database content as SQL\",",
          "3555:   \"   Additional LIKE patterns can be given in subsequent arguments\",",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7280:   if( c=='d' && strncmp(azArg[0], \"dump\", n)==0 ){",
          "7282:     int i;",
          "7283:     int savedShowHeader = p->showHeader;",
          "7284:     int savedShellFlags = p->shellFlgs;",
          "",
          "[Removed Lines]",
          "7281:     const char *zLike = 0;",
          "",
          "[Added Lines]",
          "7277:     char *zLike = 0;",
          "7278:     char *zSql;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7306:           goto meta_command_exit;",
          "7307:         }",
          "7308:       }else if( zLike ){",
          "7313:       }else{",
          "7315:       }",
          "7316:     }",
          "",
          "[Removed Lines]",
          "7309:         raw_printf(stderr, \"Usage: .dump ?--preserve-rowids? \"",
          "7310:                            \"?--newlines? ?LIKE-PATTERN?\\n\");",
          "7311:         rc = 1;",
          "7312:         goto meta_command_exit;",
          "7314:         zLike = azArg[i];",
          "",
          "[Added Lines]",
          "7306:         zLike = sqlite3_mprintf(\"%z OR name LIKE %Q ESCAPE '\\\\'\",",
          "7307:                 zLike, azArg[i]);",
          "7309:         zLike = sqlite3_mprintf(\"name LIKE %Q ESCAPE '\\\\'\", azArg[i]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7330:     sqlite3_exec(p->db, \"SAVEPOINT dump; PRAGMA writable_schema=ON\", 0, 0, 0);",
          "7331:     p->nErr = 0;",
          "7361:     if( p->writableSchema ){",
          "7362:       raw_printf(p->out, \"PRAGMA writable_schema=OFF;\\n\");",
          "7363:       p->writableSchema = 0;",
          "",
          "[Removed Lines]",
          "7332:     if( zLike==0 ){",
          "7333:       run_schema_dump_query(p,",
          "7334:         \"SELECT name, type, sql FROM sqlite_master \"",
          "7335:         \"WHERE sql NOT NULL AND type=='table' AND name!='sqlite_sequence'\"",
          "7336:       );",
          "7337:       run_schema_dump_query(p,",
          "7338:         \"SELECT name, type, sql FROM sqlite_master \"",
          "7339:         \"WHERE name=='sqlite_sequence'\"",
          "7340:       );",
          "7341:       run_table_dump_query(p,",
          "7342:         \"SELECT sql FROM sqlite_master \"",
          "7343:         \"WHERE sql NOT NULL AND type IN ('index','trigger','view')\", 0",
          "7344:       );",
          "7345:     }else{",
          "7346:       char *zSql;",
          "7347:       zSql = sqlite3_mprintf(",
          "7348:         \"SELECT name, type, sql FROM sqlite_master \"",
          "7349:         \"WHERE tbl_name LIKE %Q AND type=='table'\"",
          "7350:         \"  AND sql NOT NULL\", zLike);",
          "7351:       run_schema_dump_query(p,zSql);",
          "7352:       sqlite3_free(zSql);",
          "7353:       zSql = sqlite3_mprintf(",
          "7354:         \"SELECT sql FROM sqlite_master \"",
          "7355:         \"WHERE sql NOT NULL\"",
          "7356:         \"  AND type IN ('index','trigger','view')\"",
          "7357:         \"  AND tbl_name LIKE %Q\", zLike);",
          "7358:       run_table_dump_query(p, zSql, 0);",
          "7359:       sqlite3_free(zSql);",
          "7360:     }",
          "",
          "[Added Lines]",
          "7327:     if( zLike==0 ) zLike = sqlite3_mprintf(\"true\");",
          "7328:     zSql = sqlite3_mprintf(",
          "7329:       \"SELECT name, type, sql FROM sqlite_master \"",
          "7330:       \"WHERE (%s) AND type=='table'\"",
          "7331:       \"  AND sql NOT NULL\"",
          "7332:       \" ORDER BY tbl_name='sqlite_sequence', rowid\",",
          "7333:       zLike",
          "7334:     );",
          "7335:     run_schema_dump_query(p,zSql);",
          "7336:     sqlite3_free(zSql);",
          "7337:     zSql = sqlite3_mprintf(",
          "7338:       \"SELECT sql FROM sqlite_master \"",
          "7339:       \"WHERE (%s) AND sql NOT NULL\"",
          "7340:       \"  AND type IN ('index','trigger','view')\",",
          "7341:       zLike",
          "7342:     );",
          "7343:     run_table_dump_query(p, zSql);",
          "7344:     sqlite3_free(zSql);",
          "7345:     sqlite3_free(zLike);",
          "",
          "---------------"
        ],
        "test/shell1.test||test/shell1.test": [
          "File: test/shell1.test -> test/shell1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "297:   list [regexp {BEGIN TRANSACTION;} $res] \\",
          "298:        [regexp {COMMIT;} $res]",
          "299: } {1 1}",
          "305: # .echo ON|OFF           Turn command echo on or off",
          "306: do_test shell1-3.5.1 {",
          "",
          "[Removed Lines]",
          "300: do_test shell1-3.4.3 {",
          "301:   # too many arguments",
          "302:   catchcmd \"test.db\" \".dump FOO BAD\"",
          "303: } {1 {Usage: .dump ?--preserve-rowids? ?--newlines? ?LIKE-PATTERN?}}",
          "",
          "[Added Lines]",
          "300: # The .dump command now accepts multiple arguments",
          "301: #do_test shell1-3.4.3 {",
          "302: #  # too many arguments",
          "303: #  catchcmd \"test.db\" \".dump FOO BAD\"",
          "304: #} {1 {Usage: .dump ?--preserve-rowids? ?--newlines? ?LIKE-PATTERN?}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
      "candidate_info": {
        "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2809:     }",
          "2810:   #endif",
          "2811:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2812:   if( pParse->nErr ) goto multi_select_end;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7aedd5d70b20df21a2a8d0dc5c23a7223e5307b4",
      "candidate_info": {
        "commit_hash": "7aedd5d70b20df21a2a8d0dc5c23a7223e5307b4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7aedd5d70b20df21a2a8d0dc5c23a7223e5307b4",
        "files": [
          "ext/misc/btreeinfo.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a minor typo in a comment in the btreeinfo extension.\n\nFossilOrigin-Name: b5a66d10f4bbaf10def7b50b9ed98b05b41bb2c2af5ab9a90f6cda61169ab123",
        "before_after_code_files": [
          "ext/misc/btreeinfo.c||ext/misc/btreeinfo.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/btreeinfo.c||ext/misc/btreeinfo.c": [
          "File: ext/misc/btreeinfo.c -> ext/misc/btreeinfo.c"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dcb4838757ca49cf149a6e883b3eb0ac8a075147387a078280dfabe39b1a3e8d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d335bc40a6576d8759466d8efaaaf82b04667aaa",
      "candidate_info": {
        "commit_hash": "d335bc40a6576d8759466d8efaaaf82b04667aaa",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d335bc40a6576d8759466d8efaaaf82b04667aaa",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/global.c"
        ],
        "message": "Change the default lookaside configuration to 40 slots of 1200-bytes each. This actually works out to 30 big slots and 93 small slots using the mini-lookaside allocator.  We get the same (or better) lookaside coverage but with 72KB less memory per connection.\n\nFossilOrigin-Name: 47b71a84d1262c4bf6ad4f4a91820fd63593f08ae9efa144199d44972225e073",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/global.c||src/global.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 74805668430051032ae9b256c84e252755ee03075fc08293c948675ed40ec280",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/global.c||src/global.c": [
          "File: src/global.c -> src/global.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "194: #ifndef SQLITE_DEFAULT_LOOKASIDE",
          "196: #endif",
          "",
          "[Removed Lines]",
          "195: # define SQLITE_DEFAULT_LOOKASIDE 1200,100",
          "",
          "[Added Lines]",
          "200: # ifdef SQLITE_OMIT_MINI_LOOKASIDE",
          "202: # else",
          "204: # endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}