{
  "cve_id": "CVE-2022-23606",
  "cve_desc": "Envoy is an open source edge and service proxy, designed for cloud-native applications. When a cluster is deleted via Cluster Discovery Service (CDS) all idle connections established to endpoints in that cluster are disconnected. A recursion was introduced in the procedure of disconnecting idle connections that can lead to stack exhaustion and abnormal process termination when a cluster has a large number of idle connections. This infinite recursion causes Envoy to crash. Users are advised to upgrade.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "4b6dd3b53cd5c6d4d4df378a2fc62c1707522b31",
  "patch_info": {
    "commit_hash": "4b6dd3b53cd5c6d4d4df378a2fc62c1707522b31",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/4b6dd3b53cd5c6d4d4df378a2fc62c1707522b31",
    "files": [
      "docs/root/version_history/current.rst",
      "source/common/conn_pool/BUILD",
      "source/common/conn_pool/conn_pool_base.cc",
      "source/common/conn_pool/conn_pool_base.h",
      "test/config/utility.cc",
      "test/config/utility.h",
      "test/integration/BUILD",
      "test/integration/cds_integration_test.cc"
    ],
    "message": "CVE-2022-23606\n\nAvoid closing other connections to prevent deep recursion when a large number of idle connections are closed at the start of a pool drain, when a connection is closed.\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>",
    "before_after_code_files": [
      "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc",
      "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h",
      "test/config/utility.cc||test/config/utility.cc",
      "test/config/utility.h||test/config/utility.h",
      "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
    ]
  },
  "patch_diff": {
    "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc": [
      "File: source/common/conn_pool/conn_pool_base.cc -> source/common/conn_pool/conn_pool_base.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #include \"source/common/conn_pool/conn_pool_base.h\"",
      "3: #include \"source/common/common/assert.h\"",
      "4: #include \"source/common/network/transport_socket_options_impl.h\"",
      "5: #include \"source/common/runtime/runtime_features.h\"",
      "6: #include \"source/common/stats/timespan_impl.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: #include \"source/common/common/debug_recursion_checker.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "349: void ConnPoolImplBase::addIdleCallbackImpl(Instance::IdleCb cb) { idle_callbacks_.push_back(cb); }",
      "351: void ConnPoolImplBase::closeIdleConnectionsForDrainingPool() {",
      "353:   std::list<ActiveClient*> to_close;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "353:   Common::AutoDebugRecursionChecker assert_not_in(recursion_checker_);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "403:          connecting_clients_.empty();",
      "404: }",
      "411:   if (isIdleImpl()) {",
      "412:     ENVOY_LOG(debug, \"invoking idle callbacks - is_draining_for_deletion_={}\",",
      "413:               is_draining_for_deletion_);",
      "",
      "[Removed Lines]",
      "406: void ConnPoolImplBase::checkForIdleAndCloseIdleConnsIfDraining() {",
      "407:   if (is_draining_for_deletion_) {",
      "408:     closeIdleConnectionsForDrainingPool();",
      "409:   }",
      "",
      "[Added Lines]",
      "409: void ConnPoolImplBase::checkForIdleAndNotify() {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "417:   }",
      "418: }",
      "420: void ConnPoolImplBase::onConnectionEvent(ActiveClient& client, absl::string_view failure_reason,",
      "421:                                          Network::ConnectionEvent event) {",
      "422:   if (client.state() == ActiveClient::State::CONNECTING) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "419: void ConnPoolImplBase::checkForIdleAndCloseIdleConnsIfDraining() {",
      "420:   if (is_draining_for_deletion_) {",
      "421:     closeIdleConnectionsForDrainingPool();",
      "422:   }",
      "424:   checkForIdleAndNotify();",
      "425: }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "488:     dispatcher_.deferredDelete(client.removeFromList(owningList(client.state())));",
      "492:     client.setState(ActiveClient::State::CLOSED);",
      "",
      "[Removed Lines]",
      "490:     checkForIdleAndCloseIdleConnsIfDraining();",
      "",
      "[Added Lines]",
      "505:     checkForIdleAndNotify();",
      "",
      "---------------"
    ],
    "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h": [
      "File: source/common/conn_pool/conn_pool_base.h -> source/common/conn_pool/conn_pool_base.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "6: #include \"envoy/stats/timespan.h\"",
      "7: #include \"envoy/upstream/cluster_manager.h\"",
      "9: #include \"source/common/common/dump_state_utils.h\"",
      "10: #include \"source/common/common/linked_object.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "9: #include \"source/common/common/debug_recursion_checker.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "222:   void onConnectionEvent(ActiveClient& client, absl::string_view failure_reason,",
      "223:                          Network::ConnectionEvent event);",
      "226:   void checkForIdleAndCloseIdleConnsIfDraining();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "227:   void checkForIdleAndNotify();",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "371:   bool deferred_deleting_{false};",
      "373:   Event::SchedulableCallbackPtr upstream_ready_cb_;",
      "374: };",
      "376: } // namespace ConnectionPool",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "378:   Common::DebugRecursionChecker recursion_checker_;",
      "",
      "---------------"
    ],
    "test/config/utility.cc||test/config/utility.cc": [
      "File: test/config/utility.cc -> test/config/utility.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "442:                   name, name, address, port, lb_policy));",
      "443: }",
      "445: envoy::config::cluster::v3::Cluster ConfigHelper::buildCluster(const std::string& name,",
      "446:                                                                const std::string& lb_policy) {",
      "447:   API_NO_BOOST(envoy::config::cluster::v3::Cluster) cluster;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "445: envoy::config::cluster::v3::Cluster ConfigHelper::buildH1ClusterWithHighCircuitBreakersLimits(",
      "446:     const std::string& name, int port, const std::string& address, const std::string& lb_policy) {",
      "447:   return TestUtility::parseYaml<envoy::config::cluster::v3::Cluster>(",
      "448:       fmt::format(R\"EOF(",
      "449:       name: {}",
      "450:       connect_timeout: 50s",
      "451:       type: STATIC",
      "452:       circuit_breakers:",
      "453:         thresholds:",
      "454:         - priority: DEFAULT",
      "455:           max_connections: 10000",
      "456:           max_pending_requests: 10000",
      "457:           max_requests: 10000",
      "458:           max_retries: 10000",
      "459:       load_assignment:",
      "460:         cluster_name: {}",
      "461:         endpoints:",
      "462:         - lb_endpoints:",
      "463:           - endpoint:",
      "464:               address:",
      "465:                 socket_address:",
      "466:                   address: {}",
      "467:                   port_value: {}",
      "468:       lb_policy: {}",
      "469:     )EOF\",",
      "470:                   name, name, address, port, lb_policy));",
      "471: }",
      "",
      "---------------"
    ],
    "test/config/utility.h||test/config/utility.h": [
      "File: test/config/utility.h -> test/config/utility.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "153:   buildStaticCluster(const std::string& name, int port, const std::string& address,",
      "154:                      const std::string& lb_policy = \"ROUND_ROBIN\");",
      "157:   static envoy::config::cluster::v3::Cluster",
      "158:   buildCluster(const std::string& name, const std::string& lb_policy = \"ROUND_ROBIN\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "156:   static envoy::config::cluster::v3::Cluster",
      "157:   buildH1ClusterWithHighCircuitBreakersLimits(const std::string& name, int port,",
      "158:                                               const std::string& address,",
      "159:                                               const std::string& lb_policy = \"ROUND_ROBIN\");",
      "",
      "---------------"
    ],
    "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc": [
      "File: test/integration/cds_integration_test.cc -> test/integration/cds_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "37:                                 sotwOrDelta() == Grpc::SotwOrDelta::Sotw ||",
      "38:                                         sotwOrDelta() == Grpc::SotwOrDelta::UnifiedSotw",
      "39:                                     ? \"GRPC\"",
      "41:     if (sotwOrDelta() == Grpc::SotwOrDelta::UnifiedSotw ||",
      "42:         sotwOrDelta() == Grpc::SotwOrDelta::UnifiedDelta) {",
      "43:       config_helper_.addRuntimeOverride(\"envoy.reloadable_features.unified_mux\", \"true\");",
      "",
      "[Removed Lines]",
      "40:                                     : \"DELTA_GRPC\")) {",
      "",
      "[Added Lines]",
      "40:                                     : \"DELTA_GRPC\")),",
      "41:         cluster_creator_(&ConfigHelper::buildStaticCluster) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "85:         ClusterName1, fake_upstreams_[UpstreamIndex1]->localAddress()->ip()->port(),",
      "88:         ClusterName2, fake_upstreams_[UpstreamIndex2]->localAddress()->ip()->port(),",
      "92:     acceptXdsConnection();",
      "",
      "[Removed Lines]",
      "82:     addFakeUpstream(Http::CodecType::HTTP2);",
      "83:     addFakeUpstream(Http::CodecType::HTTP2);",
      "84:     cluster1_ = ConfigHelper::buildStaticCluster(",
      "86:         Network::Test::getLoopbackAddressString(ipVersion()));",
      "87:     cluster2_ = ConfigHelper::buildStaticCluster(",
      "89:         Network::Test::getLoopbackAddressString(ipVersion()));",
      "",
      "[Added Lines]",
      "83:     addFakeUpstream(upstream_codec_type_);",
      "84:     addFakeUpstream(upstream_codec_type_);",
      "85:     cluster1_ = cluster_creator_(",
      "87:         Network::Test::getLoopbackAddressString(ipVersion()), \"ROUND_ROBIN\");",
      "88:     cluster2_ = cluster_creator_(",
      "90:         Network::Test::getLoopbackAddressString(ipVersion()), \"ROUND_ROBIN\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "133:   envoy::config::cluster::v3::Cluster cluster2_;",
      "135:   bool test_skipped_{true};",
      "136: };",
      "138: INSTANTIATE_TEST_SUITE_P(IpVersionsClientTypeDelta, CdsIntegrationTest,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "137:   Http::CodecType upstream_codec_type_{Http::CodecType::HTTP2};",
      "138:   std::function<envoy::config::cluster::v3::Cluster(const std::string&, int, const std::string&,",
      "139:                                                     const std::string&)>",
      "140:       cluster_creator_;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "343:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
      "344: }",
      "346: } // namespace",
      "347: } // namespace Envoy",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "354: TEST_P(CdsIntegrationTest, CdsClusterDownWithLotsOfIdleConnections) {",
      "355:   constexpr int num_requests = 2000;",
      "357:   upstream_codec_type_ = Http::CodecType::HTTP1;",
      "360:   cluster_creator_ = &ConfigHelper::buildH1ClusterWithHighCircuitBreakersLimits;",
      "361:   config_helper_.addConfigModifier(",
      "362:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
      "363:               hcm) -> void {",
      "364:         hcm.mutable_route_config()",
      "365:             ->mutable_virtual_hosts(0)",
      "366:             ->mutable_routes(0)",
      "367:             ->mutable_route()",
      "368:             ->mutable_timeout()",
      "369:             ->set_seconds(600);",
      "370:         hcm.mutable_route_config()",
      "371:             ->mutable_virtual_hosts(0)",
      "372:             ->mutable_routes(0)",
      "373:             ->mutable_route()",
      "374:             ->mutable_idle_timeout()",
      "375:             ->set_seconds(600);",
      "376:       });",
      "377:   initialize();",
      "378:   std::vector<IntegrationStreamDecoderPtr> responses;",
      "379:   std::vector<FakeHttpConnectionPtr> upstream_connections;",
      "380:   std::vector<FakeStreamPtr> upstream_requests;",
      "381:   codec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));",
      "383:   for (int i = 0; i < num_requests; ++i) {",
      "384:     Http::TestRequestHeaderMapImpl request_headers{{\":method\", \"GET\"},",
      "385:                                                    {\":path\", \"/cluster1\"},",
      "386:                                                    {\":scheme\", \"http\"},",
      "387:                                                    {\":authority\", \"host\"},",
      "388:                                                    {\"x-lyft-user-id\", absl::StrCat(i)}};",
      "390:     auto response = codec_client_->makeHeaderOnlyRequest(request_headers);",
      "391:     responses.push_back(std::move(response));",
      "393:     FakeHttpConnectionPtr fake_upstream_connection;",
      "394:     waitForNextUpstreamConnection({UpstreamIndex1}, TestUtility::DefaultTimeout,",
      "395:                                   fake_upstream_connection);",
      "397:     FakeStreamPtr upstream_request;",
      "398:     AssertionResult result =",
      "399:         fake_upstream_connection->waitForNewStream(*dispatcher_, upstream_request);",
      "400:     RELEASE_ASSERT(result, result.message());",
      "402:     result = upstream_request->waitForEndStream(*dispatcher_);",
      "403:     RELEASE_ASSERT(result, result.message());",
      "404:     upstream_connections.push_back(std::move(fake_upstream_connection));",
      "405:     upstream_requests.push_back(std::move(upstream_request));",
      "406:   }",
      "409:   for (int i = 0; i < num_requests; ++i) {",
      "411:     upstream_requests[i]->encodeHeaders(default_response_headers_, true);",
      "413:     RELEASE_ASSERT(responses[i]->waitForEndStream(), \"unexpected timeout\");",
      "414:     ASSERT_TRUE(responses[i]->complete());",
      "415:     EXPECT_EQ(\"200\", responses[i]->headers().getStatusValue());",
      "416:   }",
      "418:   test_server_->waitForCounterGe(\"cluster_manager.cluster_added\", 1);",
      "421:   EXPECT_TRUE(compareDiscoveryRequest(Config::TypeUrl::get().Cluster, \"55\", {}, {}, {}));",
      "422:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(Config::TypeUrl::get().Cluster, {}, {},",
      "423:                                                              {ClusterName1}, \"42\");",
      "426:   test_server_->waitForCounterGe(\"cluster_manager.cluster_removed\", 1);",
      "429:   for (int i = 0; i < num_requests; ++i) {",
      "430:     AssertionResult result = upstream_connections[i]->close();",
      "431:     RELEASE_ASSERT(result, result.message());",
      "432:     result = upstream_connections[i]->waitForDisconnect();",
      "433:     RELEASE_ASSERT(result, result.message());",
      "434:   }",
      "435:   upstream_connections.clear();",
      "436:   cleanupUpstreamAndDownstream();",
      "437:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
      "438: }",
      "446: TEST_P(CdsIntegrationTest, DISABLED_CdsClusterDownWithLotsOfConnectingConnections) {",
      "450:   constexpr int num_requests = 64;",
      "452:   upstream_codec_type_ = Http::CodecType::HTTP1;",
      "453:   cluster_creator_ = &ConfigHelper::buildH1ClusterWithHighCircuitBreakersLimits;",
      "454:   config_helper_.addConfigModifier(",
      "455:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
      "456:               hcm) -> void {",
      "457:         hcm.mutable_route_config()",
      "458:             ->mutable_virtual_hosts(0)",
      "459:             ->mutable_routes(0)",
      "460:             ->mutable_route()",
      "461:             ->mutable_timeout()",
      "462:             ->set_seconds(600);",
      "463:         hcm.mutable_route_config()",
      "464:             ->mutable_virtual_hosts(0)",
      "465:             ->mutable_routes(0)",
      "466:             ->mutable_route()",
      "467:             ->mutable_idle_timeout()",
      "468:             ->set_seconds(600);",
      "469:       });",
      "470:   initialize();",
      "471:   test_server_->waitForCounterGe(\"cluster_manager.cluster_added\", 1);",
      "472:   std::vector<IntegrationStreamDecoderPtr> responses;",
      "473:   codec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));",
      "476:   fake_upstreams_[UpstreamIndex1]->dispatcher()->exit();",
      "477:   for (int i = 0; i < num_requests; ++i) {",
      "478:     Http::TestRequestHeaderMapImpl request_headers{{\":method\", \"GET\"},",
      "479:                                                    {\":path\", \"/cluster1\"},",
      "480:                                                    {\":scheme\", \"http\"},",
      "481:                                                    {\":authority\", \"host\"},",
      "482:                                                    {\"x-lyft-user-id\", absl::StrCat(i)}};",
      "484:     auto response = codec_client_->makeHeaderOnlyRequest(request_headers);",
      "485:     responses.push_back(std::move(response));",
      "486:   }",
      "489:   test_server_->waitForCounterEq(\"cluster.cluster_1.upstream_cx_total\", num_requests);",
      "492:   EXPECT_TRUE(compareDiscoveryRequest(Config::TypeUrl::get().Cluster, \"55\", {}, {}, {}));",
      "493:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(Config::TypeUrl::get().Cluster, {}, {},",
      "494:                                                              {ClusterName1}, \"42\");",
      "497:   test_server_->waitForCounterGe(\"cluster_manager.cluster_removed\", 1);",
      "499:   cleanupUpstreamAndDownstream();",
      "500:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
      "504: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "84efbaf7f0c1e63692945891162acc9fa755e549",
      "candidate_info": {
        "commit_hash": "84efbaf7f0c1e63692945891162acc9fa755e549",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/84efbaf7f0c1e63692945891162acc9fa755e549",
        "files": [
          "envoy/common/conn_pool.h",
          "source/common/conn_pool/conn_pool_base.cc",
          "source/common/conn_pool/conn_pool_base.h",
          "source/common/http/conn_pool_base.h",
          "source/common/http/conn_pool_grid.cc",
          "source/common/http/conn_pool_grid.h",
          "source/common/tcp/conn_pool.h",
          "source/common/tcp/original_conn_pool.cc",
          "source/common/tcp/original_conn_pool.h",
          "source/common/upstream/cluster_manager_impl.cc",
          "source/common/upstream/conn_pool_map.h",
          "source/common/upstream/conn_pool_map_impl.h",
          "source/common/upstream/priority_conn_pool_map.h",
          "source/common/upstream/priority_conn_pool_map_impl.h",
          "test/common/conn_pool/conn_pool_base_test.cc",
          "test/common/http/conn_pool_grid_test.cc",
          "test/common/http/http1/conn_pool_test.cc",
          "test/common/http/http2/conn_pool_test.cc",
          "test/common/http/mixed_conn_pool_test.cc",
          "test/common/tcp/conn_pool_test.cc",
          "test/common/upstream/cluster_manager_impl_test.cc",
          "test/common/upstream/conn_pool_map_impl_test.cc",
          "test/common/upstream/priority_conn_pool_map_impl_test.cc",
          "test/mocks/http/conn_pool.h",
          "test/mocks/tcp/mocks.h"
        ],
        "message": "conn_pool: Remove startDrain() and replace it with an argument to drainConnections (#17960)\n\nSigned-off-by: Ryan Hamilton <rch@google.com>",
        "before_after_code_files": [
          "envoy/common/conn_pool.h||envoy/common/conn_pool.h",
          "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc",
          "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h",
          "source/common/http/conn_pool_base.h||source/common/http/conn_pool_base.h",
          "source/common/http/conn_pool_grid.cc||source/common/http/conn_pool_grid.cc",
          "source/common/http/conn_pool_grid.h||source/common/http/conn_pool_grid.h",
          "source/common/tcp/conn_pool.h||source/common/tcp/conn_pool.h",
          "source/common/tcp/original_conn_pool.cc||source/common/tcp/original_conn_pool.cc",
          "source/common/tcp/original_conn_pool.h||source/common/tcp/original_conn_pool.h",
          "source/common/upstream/cluster_manager_impl.cc||source/common/upstream/cluster_manager_impl.cc",
          "source/common/upstream/conn_pool_map.h||source/common/upstream/conn_pool_map.h",
          "source/common/upstream/conn_pool_map_impl.h||source/common/upstream/conn_pool_map_impl.h",
          "source/common/upstream/priority_conn_pool_map.h||source/common/upstream/priority_conn_pool_map.h",
          "source/common/upstream/priority_conn_pool_map_impl.h||source/common/upstream/priority_conn_pool_map_impl.h",
          "test/common/conn_pool/conn_pool_base_test.cc||test/common/conn_pool/conn_pool_base_test.cc",
          "test/common/http/conn_pool_grid_test.cc||test/common/http/conn_pool_grid_test.cc",
          "test/common/http/http1/conn_pool_test.cc||test/common/http/http1/conn_pool_test.cc",
          "test/common/http/http2/conn_pool_test.cc||test/common/http/http2/conn_pool_test.cc",
          "test/common/http/mixed_conn_pool_test.cc||test/common/http/mixed_conn_pool_test.cc",
          "test/common/tcp/conn_pool_test.cc||test/common/tcp/conn_pool_test.cc",
          "test/common/upstream/cluster_manager_impl_test.cc||test/common/upstream/cluster_manager_impl_test.cc",
          "test/common/upstream/conn_pool_map_impl_test.cc||test/common/upstream/conn_pool_map_impl_test.cc",
          "test/common/upstream/priority_conn_pool_map_impl_test.cc||test/common/upstream/priority_conn_pool_map_impl_test.cc",
          "test/mocks/http/conn_pool.h||test/mocks/http/conn_pool.h",
          "test/mocks/tcp/mocks.h||test/mocks/tcp/mocks.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc",
            "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h"
          ],
          "candidate": [
            "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc",
            "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h"
          ]
        }
      },
      "candidate_diff": {
        "envoy/common/conn_pool.h||envoy/common/conn_pool.h": [
          "File: envoy/common/conn_pool.h -> envoy/common/conn_pool.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:   virtual void cancel(CancelPolicy cancel_policy) PURE;",
          "37: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: enum class DrainBehavior {",
          "46:   DrainAndDelete,",
          "51:   DrainExistingConnections,",
          "52: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:   virtual bool isIdle() const PURE;",
          "",
          "[Removed Lines]",
          "67:   virtual void startDrain() PURE;",
          "75:   virtual void drainConnections() PURE;",
          "",
          "[Added Lines]",
          "80:   virtual void drainConnections(DrainBehavior drain_behavior) PURE;",
          "",
          "---------------"
        ],
        "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc": [
          "File: source/common/conn_pool/conn_pool_base.cc -> source/common/conn_pool/conn_pool_base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "229: }",
          "231: ConnectionPool::Cancellable* ConnPoolImplBase::newStreamImpl(AttachContext& context) {",
          "232:   ASSERT(!deferred_deleting_);",
          "234:   ASSERT(static_cast<ssize_t>(connecting_stream_capacity_) ==",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "232:   ASSERT(!is_draining_for_deletion_);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "332: void ConnPoolImplBase::addIdleCallbackImpl(Instance::IdleCb cb) { idle_callbacks_.push_back(cb); }",
          "339: void ConnPoolImplBase::closeIdleConnectionsForDrainingPool() {",
          "341:   std::list<ActiveClient*> to_close;",
          "",
          "[Removed Lines]",
          "334: void ConnPoolImplBase::startDrainImpl() {",
          "335:   is_draining_ = true;",
          "336:   checkForIdleAndCloseIdleConnsIfDraining();",
          "337: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "359:   }",
          "360: }",
          "363:   closeIdleConnectionsForDrainingPool();",
          "",
          "[Removed Lines]",
          "362: void ConnPoolImplBase::drainConnectionsImpl() {",
          "",
          "[Added Lines]",
          "358: void ConnPoolImplBase::drainConnectionsImpl(DrainBehavior drain_behavior) {",
          "359:   if (drain_behavior == Envoy::ConnectionPool::DrainBehavior::DrainAndDelete) {",
          "360:     is_draining_for_deletion_ = true;",
          "361:     checkForIdleAndCloseIdleConnsIfDraining();",
          "362:     return;",
          "363:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "387: }",
          "389: void ConnPoolImplBase::checkForIdleAndCloseIdleConnsIfDraining() {",
          "391:     closeIdleConnectionsForDrainingPool();",
          "392:   }",
          "394:   if (isIdleImpl()) {",
          "396:     for (const Instance::IdleCb& cb : idle_callbacks_) {",
          "397:       cb();",
          "398:     }",
          "",
          "[Removed Lines]",
          "390:   if (is_draining_) {",
          "395:     ENVOY_LOG(debug, \"invoking idle callbacks - is_draining_={}\", is_draining_);",
          "",
          "[Added Lines]",
          "391:   if (is_draining_for_deletion_) {",
          "396:     ENVOY_LOG(debug, \"invoking idle callbacks - is_draining_for_deletion_={}\",",
          "397:               is_draining_for_deletion_);",
          "",
          "---------------"
        ],
        "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h": [
          "File: source/common/conn_pool/conn_pool_base.h -> source/common/conn_pool/conn_pool_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:   void addIdleCallbackImpl(Instance::IdleCb cb);",
          "168:   bool isIdleImpl() const;",
          "171:   const Upstream::HostConstSharedPtr& host() const { return host_; }",
          "173:   bool maybePreconnectImpl(float global_preconnect_ratio);",
          "",
          "[Removed Lines]",
          "169:   void startDrainImpl();",
          "170:   void drainConnectionsImpl();",
          "",
          "[Added Lines]",
          "169:   void drainConnectionsImpl(DrainBehavior drain_behavior);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "341:   bool deferred_deleting_{false};",
          "",
          "[Removed Lines]",
          "338:   bool is_draining_{false};",
          "",
          "[Added Lines]",
          "337:   bool is_draining_for_deletion_{false};",
          "",
          "---------------"
        ],
        "source/common/http/conn_pool_base.h||source/common/http/conn_pool_base.h": [
          "File: source/common/http/conn_pool_base.h -> source/common/http/conn_pool_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:   void addIdleCallback(IdleCb cb) override { addIdleCallbackImpl(cb); }",
          "63:   bool isIdle() const override { return isIdleImpl(); }",
          "66:   Upstream::HostDescriptionConstSharedPtr host() const override { return host_; }",
          "67:   ConnectionPool::Cancellable* newStream(Http::ResponseDecoder& response_decoder,",
          "68:                                          Http::ConnectionPool::Callbacks& callbacks) override;",
          "",
          "[Removed Lines]",
          "64:   void startDrain() override { startDrainImpl(); }",
          "65:   void drainConnections() override { drainConnectionsImpl(); }",
          "",
          "[Added Lines]",
          "64:   void drainConnections(Envoy::ConnectionPool::DrainBehavior drain_behavior) override {",
          "65:     drainConnectionsImpl(drain_behavior);",
          "66:   }",
          "",
          "---------------"
        ],
        "source/common/http/conn_pool_grid.cc||source/common/http/conn_pool_grid.cc": [
          "File: source/common/http/conn_pool_grid.cc -> source/common/http/conn_pool_grid.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "296:   idle_callbacks_.emplace_back(cb);",
          "297: }",
          "300:   if (draining_) {",
          "302:     return;",
          "303:   }",
          "311:   }",
          "315:   for (auto& pool : pools_) {",
          "317:   }",
          "318: }",
          "",
          "[Removed Lines]",
          "299: void ConnectivityGrid::startDrain() {",
          "307:   draining_ = true;",
          "309:   for (auto& pool : pools_) {",
          "310:     pool->startDrain();",
          "312: }",
          "314: void ConnectivityGrid::drainConnections() {",
          "316:     pool->drainConnections();",
          "",
          "[Added Lines]",
          "299: void ConnectivityGrid::drainConnections(Envoy::ConnectionPool::DrainBehavior drain_behavior) {",
          "305:   if (drain_behavior == Envoy::ConnectionPool::DrainBehavior::DrainAndDelete) {",
          "308:     draining_ = true;",
          "312:     pool->drainConnections(drain_behavior);",
          "",
          "---------------"
        ],
        "source/common/http/conn_pool_grid.h||source/common/http/conn_pool_grid.h": [
          "File: source/common/http/conn_pool_grid.h -> source/common/http/conn_pool_grid.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:                                          ConnectionPool::Callbacks& callbacks) override;",
          "149:   void addIdleCallback(IdleCb cb) override;",
          "150:   bool isIdle() const override;",
          "153:   Upstream::HostDescriptionConstSharedPtr host() const override;",
          "154:   bool maybePreconnect(float preconnect_ratio) override;",
          "155:   absl::string_view protocolDescription() const override { return \"connection grid\"; }",
          "",
          "[Removed Lines]",
          "151:   void startDrain() override;",
          "152:   void drainConnections() override;",
          "",
          "[Added Lines]",
          "151:   void drainConnections(Envoy::ConnectionPool::DrainBehavior drain_behavior) override;",
          "",
          "---------------"
        ],
        "source/common/tcp/conn_pool.h||source/common/tcp/conn_pool.h": [
          "File: source/common/tcp/conn_pool.h -> source/common/tcp/conn_pool.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "151:   void addIdleCallback(IdleCb cb) override { addIdleCallbackImpl(cb); }",
          "152:   bool isIdle() const override { return isIdleImpl(); }",
          "158:     for (auto& connecting_client : connecting_clients_) {",
          "",
          "[Removed Lines]",
          "153:   void startDrain() override { startDrainImpl(); }",
          "154:   void drainConnections() override {",
          "155:     drainConnectionsImpl();",
          "",
          "[Added Lines]",
          "153:   void drainConnections(Envoy::ConnectionPool::DrainBehavior drain_behavior) override {",
          "154:     drainConnectionsImpl(drain_behavior);",
          "155:     if (drain_behavior == Envoy::ConnectionPool::DrainBehavior::DrainAndDelete) {",
          "156:       return;",
          "157:     }",
          "",
          "---------------"
        ],
        "source/common/tcp/original_conn_pool.cc||source/common/tcp/original_conn_pool.cc": [
          "File: source/common/tcp/original_conn_pool.cc -> source/common/tcp/original_conn_pool.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   dispatcher_.clearDeferredDeleteList();",
          "38: }",
          "41:   ENVOY_LOG(debug, \"draining connections\");",
          "42:   while (!ready_conns_.empty()) {",
          "43:     ready_conns_.front()->conn_->close(Network::ConnectionCloseType::NoFlush);",
          "",
          "[Removed Lines]",
          "40: void OriginalConnPoolImpl::drainConnections() {",
          "",
          "[Added Lines]",
          "40: void OriginalConnPoolImpl::drainConnections(Envoy::ConnectionPool::DrainBehavior drain_behavior) {",
          "41:   if (drain_behavior == Envoy::ConnectionPool::DrainBehavior::DrainAndDelete) {",
          "42:     is_draining_ = true;",
          "43:     checkForIdleAndCloseIdleConnsIfDraining();",
          "44:     return;",
          "45:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71: void OriginalConnPoolImpl::addIdleCallback(IdleCb cb) { idle_callbacks_.push_back(cb); }",
          "78: void OriginalConnPoolImpl::assignConnection(ActiveConn& conn,",
          "79:                                             ConnectionPool::Callbacks& callbacks) {",
          "80:   ASSERT(conn.wrapper_ == nullptr);",
          "",
          "[Removed Lines]",
          "73: void OriginalConnPoolImpl::startDrain() {",
          "74:   is_draining_ = true;",
          "75:   checkForIdleAndCloseIdleConnsIfDraining();",
          "76: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "source/common/tcp/original_conn_pool.h||source/common/tcp/original_conn_pool.h": [
          "File: source/common/tcp/original_conn_pool.h -> source/common/tcp/original_conn_pool.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35:   void addIdleCallback(IdleCb cb) override;",
          "36:   bool isIdle() const override;",
          "39:   void closeConnections() override;",
          "40:   ConnectionPool::Cancellable* newConnection(ConnectionPool::Callbacks& callbacks) override;",
          "",
          "[Removed Lines]",
          "37:   void startDrain() override;",
          "38:   void drainConnections() override;",
          "",
          "[Added Lines]",
          "37:   void drainConnections(Envoy::ConnectionPool::DrainBehavior drain_behavior) override;",
          "",
          "---------------"
        ],
        "source/common/upstream/cluster_manager_impl.cc||source/common/upstream/cluster_manager_impl.cc": [
          "File: source/common/upstream/cluster_manager_impl.cc -> source/common/upstream/cluster_manager_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1199:   container.do_not_delete_ = true;",
          "1201:   container.do_not_delete_ = false;",
          "1203:   if (container.pools_->size() == 0) {",
          "",
          "[Removed Lines]",
          "1200:   pools->startDrain();",
          "",
          "[Added Lines]",
          "1200:   pools->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1218:   container.draining_ = true;",
          "1219:   for (auto pool : pools) {",
          "1221:   }",
          "1222: }",
          "",
          "[Removed Lines]",
          "1220:     pool->startDrain();",
          "",
          "[Added Lines]",
          "1220:     pool->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1389:     const auto container = getHttpConnPoolsContainer(host);",
          "1390:     if (container != nullptr) {",
          "1391:       container->do_not_delete_ = true;",
          "1393:       container->do_not_delete_ = false;",
          "1395:       if (container->pools_->size() == 0) {",
          "",
          "[Removed Lines]",
          "1392:       container->pools_->drainConnections();",
          "",
          "[Added Lines]",
          "1392:       container->pools_->drainConnections(",
          "1393:           Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1417:             ClusterInfo::Features::CLOSE_CONNECTIONS_ON_HOST_HEALTH_FAILURE) {",
          "1418:           pool->closeConnections();",
          "1419:         } else {",
          "1421:         }",
          "1422:       }",
          "1423:     }",
          "",
          "[Removed Lines]",
          "1420:           pool->drainConnections();",
          "",
          "[Added Lines]",
          "1421:           pool->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------"
        ],
        "source/common/upstream/conn_pool_map.h||source/common/upstream/conn_pool_map.h": [
          "File: source/common/upstream/conn_pool_map.h -> source/common/upstream/conn_pool_map.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #include <functional>",
          "4: #include <vector>",
          "6: #include \"envoy/event/dispatcher.h\"",
          "7: #include \"envoy/upstream/resource_manager.h\"",
          "8: #include \"envoy/upstream/upstream.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #include \"envoy/common/conn_pool.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59:   void addIdleCallback(const IdleCb& cb);",
          "71: private:",
          "",
          "[Removed Lines]",
          "64:   void startDrain();",
          "69:   void drainConnections();",
          "",
          "[Added Lines]",
          "65:   void drainConnections(Envoy::ConnectionPool::DrainBehavior drain_behavior);",
          "",
          "---------------"
        ],
        "source/common/upstream/conn_pool_map_impl.h||source/common/upstream/conn_pool_map_impl.h": [
          "File: source/common/upstream/conn_pool_map_impl.h -> source/common/upstream/conn_pool_map_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "99: }",
          "101: template <typename KEY_TYPE, typename POOL_TYPE>",
          "105:   std::vector<POOL_TYPE*> pools;",
          "",
          "[Removed Lines]",
          "102: void ConnPoolMap<KEY_TYPE, POOL_TYPE>::startDrain() {",
          "",
          "[Added Lines]",
          "102: void ConnPoolMap<KEY_TYPE, POOL_TYPE>::drainConnections(",
          "103:     Envoy::ConnectionPool::DrainBehavior drain_behavior) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "109:   }",
          "111:   for (auto* pool : pools) {",
          "128:   }",
          "129: }",
          "",
          "[Removed Lines]",
          "112:     pool->startDrain();",
          "113:   }",
          "114: }",
          "116: template <typename KEY_TYPE, typename POOL_TYPE>",
          "117: void ConnPoolMap<KEY_TYPE, POOL_TYPE>::drainConnections() {",
          "120:   std::vector<POOL_TYPE*> pools;",
          "121:   pools.reserve(active_pools_.size());",
          "122:   for (auto& pool_pair : active_pools_) {",
          "123:     pools.push_back(pool_pair.second.get());",
          "124:   }",
          "126:   for (auto* pool : pools) {",
          "127:     pool->drainConnections();",
          "",
          "[Added Lines]",
          "113:     pool->drainConnections(drain_behavior);",
          "",
          "---------------"
        ],
        "source/common/upstream/priority_conn_pool_map.h||source/common/upstream/priority_conn_pool_map.h": [
          "File: source/common/upstream/priority_conn_pool_map.h -> source/common/upstream/priority_conn_pool_map.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   void addIdleCallback(const IdleCb& cb);",
          "64: private:",
          "65:   size_t getPriorityIndex(ResourcePriority priority) const;",
          "",
          "[Removed Lines]",
          "57:   void startDrain();",
          "62:   void drainConnections();",
          "",
          "[Added Lines]",
          "57:   void drainConnections(Envoy::ConnectionPool::DrainBehavior drain_behavior);",
          "",
          "---------------"
        ],
        "source/common/upstream/priority_conn_pool_map_impl.h||source/common/upstream/priority_conn_pool_map_impl.h": [
          "File: source/common/upstream/priority_conn_pool_map_impl.h -> source/common/upstream/priority_conn_pool_map_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: }",
          "57: template <typename KEY_TYPE, typename POOL_TYPE>",
          "59:   for (auto& pool_map : conn_pool_maps_) {",
          "68:   }",
          "69: }",
          "",
          "[Removed Lines]",
          "58: void PriorityConnPoolMap<KEY_TYPE, POOL_TYPE>::startDrain() {",
          "60:     pool_map->startDrain();",
          "61:   }",
          "62: }",
          "64: template <typename KEY_TYPE, typename POOL_TYPE>",
          "65: void PriorityConnPoolMap<KEY_TYPE, POOL_TYPE>::drainConnections() {",
          "66:   for (auto& pool_map : conn_pool_maps_) {",
          "67:     pool_map->drainConnections();",
          "",
          "[Added Lines]",
          "58: void PriorityConnPoolMap<KEY_TYPE, POOL_TYPE>::drainConnections(",
          "59:     ConnectionPool::DrainBehavior drain_behavior) {",
          "61:     pool_map->drainConnections(drain_behavior);",
          "",
          "---------------"
        ],
        "test/common/conn_pool/conn_pool_base_test.cc||test/common/conn_pool/conn_pool_base_test.cc": [
          "File: test/common/conn_pool/conn_pool_base_test.cc -> test/common/conn_pool/conn_pool_base_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:   clients_.back()->onEvent(Network::ConnectionEvent::RemoteClose);",
          "229:   EXPECT_CALL(idle_pool_callback, Call());",
          "231: }",
          "",
          "[Removed Lines]",
          "230:   pool_.startDrainImpl();",
          "",
          "[Added Lines]",
          "230:   pool_.drainConnectionsImpl(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "255:   clients_.back()->onEvent(Network::ConnectionEvent::LocalClose);",
          "257:   EXPECT_CALL(idle_pool_callback, Call());",
          "259: }",
          "261: } // namespace ConnectionPool",
          "",
          "[Removed Lines]",
          "258:   pool_.startDrainImpl();",
          "",
          "[Added Lines]",
          "258:   pool_.drainConnectionsImpl(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------"
        ],
        "test/common/http/conn_pool_grid_test.cc||test/common/http/conn_pool_grid_test.cc": [
          "File: test/common/http/conn_pool_grid_test.cc -> test/common/http/conn_pool_grid_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "384: TEST_F(ConnectivityGridTest, Drain) {",
          "388:   grid_.createNextPool();",
          "389:   {",
          "392:   }",
          "394:   grid_.createNextPool();",
          "395:   {",
          "399:   }",
          "400: }",
          "",
          "[Removed Lines]",
          "385:   grid_.drainConnections();",
          "390:     EXPECT_CALL(*grid_.first(), drainConnections());",
          "391:     grid_.drainConnections();",
          "396:     EXPECT_CALL(*grid_.first(), drainConnections());",
          "397:     EXPECT_CALL(*grid_.second(), drainConnections());",
          "398:     grid_.drainConnections();",
          "",
          "[Added Lines]",
          "385:   grid_.drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "390:     EXPECT_CALL(*grid_.first(),",
          "391:                 drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections));",
          "392:     grid_.drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "397:     EXPECT_CALL(*grid_.first(),",
          "398:                 drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections));",
          "399:     EXPECT_CALL(*grid_.second(),",
          "400:                 drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections));",
          "401:     grid_.drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "413:   {",
          "417:   }",
          "420:   {",
          "424:   }",
          "425:   {",
          "",
          "[Removed Lines]",
          "414:     EXPECT_CALL(*grid_.first(), startDrain());",
          "415:     EXPECT_CALL(*grid_.second(), startDrain());",
          "416:     grid_.startDrain();",
          "421:     EXPECT_CALL(*grid_.first(), startDrain()).Times(0);",
          "422:     EXPECT_CALL(*grid_.second(), startDrain()).Times(0);",
          "423:     grid_.startDrain();",
          "",
          "[Added Lines]",
          "417:     EXPECT_CALL(*grid_.first(),",
          "418:                 drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete));",
          "419:     EXPECT_CALL(*grid_.second(),",
          "420:                 drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete));",
          "421:     grid_.drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "426:     EXPECT_CALL(*grid_.first(),",
          "427:                 drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete))",
          "428:         .Times(0);",
          "429:     EXPECT_CALL(*grid_.second(),",
          "430:                 drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete))",
          "431:         .Times(0);",
          "432:     grid_.drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "482:   {",
          "483:     grid_.addIdleCallback([&drain_received]() -> void { drain_received = true; });",
          "485:   }",
          "487:   grid_.setDestroying(); // Fake being in the destructor.",
          "",
          "[Removed Lines]",
          "484:     grid_.startDrain();",
          "",
          "[Added Lines]",
          "493:     grid_.drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------"
        ],
        "test/common/http/http1/conn_pool_test.cc||test/common/http/http1/conn_pool_test.cc": [
          "File: test/common/http/http1/conn_pool_test.cc -> test/common/http/http1/conn_pool_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "261:   r1.completeResponse(false);",
          "265:   EXPECT_CALL(*conn_pool_, onClientDestroy());",
          "266:   dispatcher_.clearDeferredDeleteList();",
          "267:   conn_pool_->expectAndRunUpstreamReady();",
          "",
          "[Removed Lines]",
          "264:   conn_pool_->drainConnections();",
          "",
          "[Added Lines]",
          "264:   conn_pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "951:   ActiveTestRequest r2(*this, 0, ActiveTestRequest::Type::Pending);",
          "953:   conn_pool_->addIdleCallback([&]() -> void { drained.ready(); });",
          "956:   r2.handle_->cancel(Envoy::ConnectionPool::CancelPolicy::Default);",
          "957:   EXPECT_EQ(1U, cluster_->stats_.upstream_rq_total_.value());",
          "",
          "[Removed Lines]",
          "954:   conn_pool_->startDrain();",
          "",
          "[Added Lines]",
          "954:   conn_pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "978:   EXPECT_NE(nullptr, handle);",
          "980:   conn_pool_->addIdleCallback([&]() -> void { drained.ready(); });",
          "982:   EXPECT_CALL(*conn_pool_->test_clients_[0].connection_,",
          "983:               close(Network::ConnectionCloseType::NoFlush));",
          "984:   EXPECT_CALL(drained, ready()).Times(AtLeast(1));",
          "",
          "[Removed Lines]",
          "981:   conn_pool_->startDrain();",
          "",
          "[Added Lines]",
          "981:   conn_pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1047:   conn_pool_->expectEnableUpstreamReady();",
          "1048:   r1.completeResponse(false);",
          "1050:   EXPECT_CALL(*conn_pool_, onClientDestroy());",
          "1051:   dispatcher_.clearDeferredDeleteList();",
          "1052:   conn_pool_->expectAndRunUpstreamReady();",
          "",
          "[Removed Lines]",
          "1049:   conn_pool_->drainConnections();",
          "",
          "[Added Lines]",
          "1049:   conn_pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1061:   EXPECT_FALSE(conn_pool_->hasActiveConnections());",
          "1064:   EXPECT_CALL(*conn_pool_, onClientDestroy());",
          "1065:   dispatcher_.clearDeferredDeleteList();",
          "1066:   conn_pool_->expectAndRunUpstreamReady();",
          "",
          "[Removed Lines]",
          "1063:   conn_pool_->drainConnections();",
          "",
          "[Added Lines]",
          "1063:   conn_pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1075:   EXPECT_CALL(*conn_pool_, onClientDestroy());",
          "1076:   r1.handle_->cancel(Envoy::ConnectionPool::CancelPolicy::Default);",
          "1077:   EXPECT_EQ(0U, cluster_->stats_.upstream_rq_total_.value());",
          "1079:   conn_pool_->test_clients_[0].connection_->raiseEvent(Network::ConnectionEvent::RemoteClose);",
          "1080:   dispatcher_.clearDeferredDeleteList();",
          "",
          "[Removed Lines]",
          "1078:   conn_pool_->drainConnections();",
          "",
          "[Added Lines]",
          "1078:   conn_pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------"
        ],
        "test/common/http/http2/conn_pool_test.cc||test/common/http/http2/conn_pool_test.cc": [
          "File: test/common/http/http2/conn_pool_test.cc -> test/common/http/http2/conn_pool_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "320:   completeRequest(r);",
          "322:   EXPECT_CALL(*this, onClientDestroy());",
          "324: }",
          "",
          "[Removed Lines]",
          "323:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "323:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "389:           ->encodeHeaders(TestRequestHeaderMapImpl{{\":path\", \"/\"}, {\":method\", \"GET\"}}, true)",
          "390:           .ok());",
          "394:   EXPECT_CALL(r.decoder_, decodeHeaders_(_, true));",
          "395:   EXPECT_CALL(*this, onClientDestroy());",
          "",
          "[Removed Lines]",
          "392:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "392:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "414:           ->encodeHeaders(TestRequestHeaderMapImpl{{\":path\", \"/\"}, {\":method\", \"GET\"}}, true)",
          "415:           .ok());",
          "419:   EXPECT_CALL(r.decoder_, decodeHeaders_(_, true));",
          "420:   EXPECT_CALL(*this, onClientDestroy());",
          "",
          "[Removed Lines]",
          "417:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "417:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "434:   ActiveTestRequest r(*this, 0, false);",
          "440:   r.handle_->cancel(Envoy::ConnectionPool::CancelPolicy::Default);",
          "441:   EXPECT_CALL(*this, onClientDestroy());",
          "443: }",
          "",
          "[Removed Lines]",
          "437:   pool_->drainConnections();",
          "442:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "437:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "442:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "452:   ActiveTestRequest r(*this, 0, false);",
          "457:   EXPECT_CALL(*this, onClientDestroy());",
          "458:   r.handle_->cancel(Envoy::ConnectionPool::CancelPolicy::CloseExcess);",
          "",
          "[Removed Lines]",
          "455:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "455:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "593:   cluster_->max_requests_per_connection_ = 1;",
          "598:   expectClientCreate();",
          "599:   ActiveTestRequest r1(*this, 0, false);",
          "",
          "[Removed Lines]",
          "596:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "596:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "616:           .ok());",
          "622:   test_clients_[0].connection_->raiseEvent(Network::ConnectionEvent::RemoteClose);",
          "",
          "[Removed Lines]",
          "619:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "619:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1091:           .ok());",
          "1092:   ReadyWatcher drained;",
          "1093:   pool_->addIdleCallback([&]() -> void { drained.ready(); });",
          "1096:   EXPECT_CALL(dispatcher_, deferredDelete_(_));",
          "1097:   EXPECT_CALL(drained, ready());",
          "",
          "[Removed Lines]",
          "1094:   pool_->startDrain();",
          "",
          "[Added Lines]",
          "1094:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1129:   ReadyWatcher drained;",
          "1130:   pool_->addIdleCallback([&]() -> void { drained.ready(); });",
          "1133:   EXPECT_CALL(dispatcher_, deferredDelete_(_));",
          "1134:   EXPECT_CALL(r2.decoder_, decodeHeaders_(_, true));",
          "",
          "[Removed Lines]",
          "1131:   pool_->startDrain();",
          "",
          "[Added Lines]",
          "1131:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1173:   ReadyWatcher drained;",
          "1174:   pool_->addIdleCallback([&]() -> void { drained.ready(); });",
          "1177:   EXPECT_CALL(dispatcher_, deferredDelete_(_));",
          "1178:   EXPECT_CALL(r2.decoder_, decodeHeaders_(_, true));",
          "",
          "[Removed Lines]",
          "1175:   pool_->startDrain();",
          "",
          "[Added Lines]",
          "1175:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1228:   ReadyWatcher drained;",
          "1229:   EXPECT_CALL(drained, ready());",
          "1230:   pool_->addIdleCallback([&]() -> void { drained.ready(); });",
          "1233:   EXPECT_CALL(*this, onClientDestroy());",
          "1234:   dispatcher_.clearDeferredDeleteList();",
          "",
          "[Removed Lines]",
          "1231:   pool_->startDrain();",
          "",
          "[Added Lines]",
          "1231:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1382:   expectClientCreate();",
          "1383:   ActiveTestRequest r1(*this, 0, false);",
          "1384:   expectClientConnect(0, r1);",
          "1387:   EXPECT_TRUE(pool_->hasActiveConnections());",
          "",
          "[Removed Lines]",
          "1385:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "1385:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1396:   expectClientCreate();",
          "1397:   ActiveTestRequest r1(*this, 0, false);",
          "1398:   expectClientConnect(0, r1);",
          "1400:   completeRequest(r1);",
          "1402:   EXPECT_FALSE(pool_->hasActiveConnections());",
          "",
          "[Removed Lines]",
          "1399:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "1399:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1429:   r1.handle_->cancel(Envoy::ConnectionPool::CancelPolicy::CloseExcess);",
          "1430:   r2.handle_->cancel(Envoy::ConnectionPool::CancelPolicy::CloseExcess);",
          "1431:   r3.handle_->cancel(Envoy::ConnectionPool::CancelPolicy::CloseExcess);",
          "1434:   closeAllClients();",
          "1435: }",
          "",
          "[Removed Lines]",
          "1432:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "1432:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1484:   r1.handle_->cancel(Envoy::ConnectionPool::CancelPolicy::CloseExcess);",
          "1485:   r2.handle_->cancel(Envoy::ConnectionPool::CancelPolicy::CloseExcess);",
          "1487:   closeAllClients();",
          "1488: }",
          "",
          "[Removed Lines]",
          "1486:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "1486:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1527:   CHECK_STATE(2 /*active*/, 0 /*pending*/, 0 /*capacity*/);",
          "1531:   closeAllClients();",
          "1532: }",
          "",
          "[Removed Lines]",
          "1530:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "1530:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1553:   CHECK_STATE(1 /*active*/, 0 /*pending*/, 0 /*capacity*/);",
          "1557:   closeAllClients();",
          "1558: }",
          "",
          "[Removed Lines]",
          "1556:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "1556:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1580:   completeRequest(r1);",
          "1581:   completeRequest(r2);",
          "1583:   closeAllClients();",
          "1584: }",
          "",
          "[Removed Lines]",
          "1582:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "1582:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1602:   completeRequest(r1);",
          "1604:   closeAllClients();",
          "1605: }",
          "",
          "[Removed Lines]",
          "1603:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "1603:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1627:   r1.handle_->cancel(Envoy::ConnectionPool::CancelPolicy::CloseExcess);",
          "1629:   closeAllClients();",
          "1630: }",
          "",
          "[Removed Lines]",
          "1628:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "1628:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1638:   expectClientsCreate(1);",
          "1639:   EXPECT_TRUE(pool_->maybePreconnect(2));",
          "1642:   closeAllClients();",
          "1643: }",
          "",
          "[Removed Lines]",
          "1641:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "1641:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1675:   CHECK_STATE(0 /*active*/, 0 /*pending*/, 1 /*capacity*/);",
          "1679:   closeAllClients();",
          "1680:   CHECK_STATE(0 /*active*/, 0 /*pending*/, 0 /*capacity*/);",
          "1681: }",
          "",
          "[Removed Lines]",
          "1678:   pool_->drainConnections();",
          "",
          "[Added Lines]",
          "1678:   pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------"
        ],
        "test/common/http/mixed_conn_pool_test.cc||test/common/http/mixed_conn_pool_test.cc": [
          "File: test/common/http/mixed_conn_pool_test.cc -> test/common/http/mixed_conn_pool_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     EXPECT_EQ(protocol.value(), conn_pool_->protocol());",
          "87:   }",
          "90:   connection->raiseEvent(Network::ConnectionEvent::RemoteClose);",
          "91:   dispatcher_.clearDeferredDeleteList();",
          "92:   conn_pool_.reset();",
          "",
          "[Removed Lines]",
          "89:   conn_pool_->drainConnections();",
          "",
          "[Added Lines]",
          "89:   conn_pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------"
        ],
        "test/common/tcp/conn_pool_test.cc||test/common/tcp/conn_pool_test.cc": [
          "File: test/common/tcp/conn_pool_test.cc -> test/common/tcp/conn_pool_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "108:   void addIdleCallback(IdleCb cb) override { conn_pool_->addIdleCallback(cb); }",
          "109:   bool isIdle() const override { return conn_pool_->isIdle(); }",
          "112:   void closeConnections() override { conn_pool_->closeConnections(); }",
          "113:   ConnectionPool::Cancellable* newConnection(Tcp::ConnectionPool::Callbacks& callbacks) override {",
          "114:     return conn_pool_->newConnection(callbacks);",
          "",
          "[Removed Lines]",
          "110:   void startDrain() override { return conn_pool_->startDrain(); }",
          "111:   void drainConnections() override { conn_pool_->drainConnections(); }",
          "",
          "[Added Lines]",
          "110:   void drainConnections(Envoy::ConnectionPool::DrainBehavior drain_behavior) override {",
          "111:     conn_pool_->drainConnections(drain_behavior);",
          "112:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "444:     EXPECT_CALL(*conn_pool_, onConnDestroyedForTest());",
          "446:     dispatcher_.clearDeferredDeleteList();",
          "447:   }",
          "448:   {",
          "",
          "[Removed Lines]",
          "445:     conn_pool_->drainConnections();",
          "",
          "[Added Lines]",
          "446:     conn_pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "975: TEST_P(TcpConnPoolImplTest, DrainCallback) {",
          "976:   initialize();",
          "977:   ReadyWatcher drained;",
          "979:   conn_pool_->addIdleCallback([&]() -> void { drained.ready(); });",
          "982:   ActiveTestConn c1(*this, 0, ActiveTestConn::Type::CreateConnection);",
          "983:   ActiveTestConn c2(*this, 0, ActiveTestConn::Type::Pending);",
          "984:   c2.handle_->cancel(ConnectionPool::CancelPolicy::Default);",
          "986:   EXPECT_CALL(*conn_pool_, onConnReleasedForTest());",
          "",
          "[Removed Lines]",
          "978:   EXPECT_CALL(drained, ready());",
          "980:   conn_pool_->startDrain();",
          "",
          "[Added Lines]",
          "983:   conn_pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1005:   EXPECT_NE(nullptr, handle);",
          "1007:   conn_pool_->addIdleCallback([&]() -> void { drained.ready(); });",
          "1010:   if (test_new_connection_pool_) {",
          "",
          "[Removed Lines]",
          "1008:   conn_pool_->startDrain();",
          "",
          "[Added Lines]",
          "1008:   conn_pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1029: TEST_P(TcpConnPoolImplTest, DrainOnClose) {",
          "1030:   initialize();",
          "1031:   ReadyWatcher drained;",
          "1033:   conn_pool_->addIdleCallback([&]() -> void { drained.ready(); });",
          "1036:   ActiveTestConn c1(*this, 0, ActiveTestConn::Type::CreateConnection);",
          "1038:   EXPECT_CALL(drained, ready()).Times(AtLeast(1));",
          "1039:   EXPECT_CALL(c1.callbacks_.callbacks_, onEvent(Network::ConnectionEvent::RemoteClose))",
          "1040:       .WillOnce(Invoke([&](Network::ConnectionEvent event) -> void {",
          "",
          "[Removed Lines]",
          "1032:   EXPECT_CALL(drained, ready());",
          "1034:   conn_pool_->startDrain();",
          "",
          "[Added Lines]",
          "1035:   conn_pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1083:   handle1->cancel(ConnectionPool::CancelPolicy::Default);",
          "",
          "[Removed Lines]",
          "1080:   conn_pool_->drainConnections();",
          "",
          "[Added Lines]",
          "1079:   conn_pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1131:   testing::MockFunction<void()> drained_callback;",
          "1132:   EXPECT_CALL(idle_callback, Call());",
          "1134:   EXPECT_CALL(*conn_pool_, onConnDestroyedForTest());",
          "1135:   dispatcher_.clearDeferredDeleteList();",
          "1136: }",
          "",
          "[Removed Lines]",
          "1133:   conn_pool_->startDrain();",
          "",
          "[Added Lines]",
          "1132:   conn_pool_->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------"
        ],
        "test/common/upstream/cluster_manager_impl_test.cc||test/common/upstream/cluster_manager_impl_test.cc": [
          "File: test/common/upstream/cluster_manager_impl_test.cc -> test/common/upstream/cluster_manager_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1771:   EXPECT_CALL(*callbacks, onClusterRemoval(_));",
          "1774:   EXPECT_TRUE(cluster_manager_->removeCluster(\"fake_cluster\"));",
          "1775:   EXPECT_EQ(nullptr, cluster_manager_->getThreadLocalCluster(\"fake_cluster\"));",
          "1776:   EXPECT_EQ(0UL, cluster_manager_->clusters().active_clusters_.size());",
          "",
          "[Removed Lines]",
          "1772:   EXPECT_CALL(*cp, startDrain());",
          "1773:   EXPECT_CALL(*cp2, startDrain());",
          "",
          "[Added Lines]",
          "1772:   EXPECT_CALL(*cp, drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete));",
          "1773:   EXPECT_CALL(*cp2, drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1909:     outlier_detector.runCallbacks(test_host);",
          "1910:     health_checker.runCallbacks(test_host, HealthTransition::Unchanged);",
          "1913:     test_host->healthFlagSet(Host::HealthFlag::FAILED_OUTLIER_CHECK);",
          "1914:     outlier_detector.runCallbacks(test_host);",
          "",
          "[Removed Lines]",
          "1912:     EXPECT_CALL(*cp1, drainConnections());",
          "",
          "[Added Lines]",
          "1912:     EXPECT_CALL(*cp1,",
          "1913:                 drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1919:   }",
          "1924:   test_host->healthFlagSet(Host::HealthFlag::FAILED_ACTIVE_HC);",
          "1925:   health_checker.runCallbacks(test_host, HealthTransition::Changed);",
          "",
          "[Removed Lines]",
          "1922:   EXPECT_CALL(*cp1, drainConnections());",
          "1923:   EXPECT_CALL(*cp2, drainConnections());",
          "",
          "[Added Lines]",
          "1923:   EXPECT_CALL(*cp1,",
          "1924:               drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections));",
          "1925:   EXPECT_CALL(*cp2,",
          "1926:               drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1973:   outlier_detector.runCallbacks(test_host);",
          "1974:   health_checker.runCallbacks(test_host, HealthTransition::Unchanged);",
          "1977:   test_host->healthFlagSet(Host::HealthFlag::FAILED_OUTLIER_CHECK);",
          "1978:   outlier_detector.runCallbacks(test_host);",
          "",
          "[Removed Lines]",
          "1976:   EXPECT_CALL(*cp1, drainConnections()).WillOnce(Invoke([&]() { cp1->idle_cb_(); }));",
          "",
          "[Added Lines]",
          "1979:   EXPECT_CALL(*cp1,",
          "1980:               drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections))",
          "1981:       .WillOnce(Invoke([&]() { cp1->idle_cb_(); }));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2020:     outlier_detector.runCallbacks(test_host);",
          "2021:     health_checker.runCallbacks(test_host, HealthTransition::Unchanged);",
          "2024:     test_host->healthFlagSet(Host::HealthFlag::FAILED_OUTLIER_CHECK);",
          "2025:     outlier_detector.runCallbacks(test_host);",
          "",
          "[Removed Lines]",
          "2023:     EXPECT_CALL(*cp1, drainConnections());",
          "",
          "[Added Lines]",
          "2028:     EXPECT_CALL(*cp1,",
          "2029:                 drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2030:   }",
          "2035:   test_host->healthFlagSet(Host::HealthFlag::FAILED_ACTIVE_HC);",
          "2036:   health_checker.runCallbacks(test_host, HealthTransition::Changed);",
          "",
          "[Removed Lines]",
          "2033:   EXPECT_CALL(*cp1, drainConnections());",
          "2034:   EXPECT_CALL(*cp2, drainConnections());",
          "",
          "[Added Lines]",
          "2039:   EXPECT_CALL(*cp1,",
          "2040:               drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections));",
          "2041:   EXPECT_CALL(*cp2,",
          "2042:               drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2956:                                    ->tcpConnPool(ResourcePriority::Default, nullptr));",
          "",
          "[Removed Lines]",
          "2959:   EXPECT_CALL(*cp, startDrain()).WillOnce(Invoke([&]() {",
          "2960:     cp->idle_cb_();",
          "2961:     cp->idle_cb_ = nullptr;",
          "2962:   }));",
          "2963:   EXPECT_CALL(*tcp, startDrain()).WillOnce(Invoke([&]() {",
          "2964:     tcp->idle_cb_();",
          "2965:     tcp->idle_cb_ = nullptr;",
          "2966:   }));",
          "",
          "[Added Lines]",
          "2967:   EXPECT_CALL(*cp, drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete))",
          "2968:       .WillOnce(Invoke([&]() {",
          "2969:         cp->idle_cb_();",
          "2970:         cp->idle_cb_ = nullptr;",
          "2971:       }));",
          "2972:   EXPECT_CALL(*tcp, drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete))",
          "2973:       .WillOnce(Invoke([&]() {",
          "2974:         tcp->idle_cb_();",
          "2975:         tcp->idle_cb_ = nullptr;",
          "2976:       }));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3035:   Http::ConnectionPool::Instance::IdleCb drained_cb;",
          "3036:   EXPECT_CALL(factory_, allocateConnPool_(_, _, _, _, _)).WillOnce(Return(mock_cp));",
          "3037:   EXPECT_CALL(*mock_cp, addIdleCallback(_)).WillOnce(SaveArg<0>(&drained_cb));",
          "3040:   MockTcpConnPoolWithDestroy* mock_tcp = new NiceMock<MockTcpConnPoolWithDestroy>();",
          "3041:   Tcp::ConnectionPool::Instance::IdleCb tcp_drained_cb;",
          "3042:   EXPECT_CALL(factory_, allocateTcpConnPool_).WillOnce(Return(mock_tcp));",
          "3043:   EXPECT_CALL(*mock_tcp, addIdleCallback(_)).WillOnce(SaveArg<0>(&tcp_drained_cb));",
          "3046:   HttpPoolDataPeer::getPool(",
          "3047:       cluster_manager_->getThreadLocalCluster(\"cluster_1\")",
          "",
          "[Removed Lines]",
          "3038:   EXPECT_CALL(*mock_cp, startDrain());",
          "3044:   EXPECT_CALL(*mock_tcp, startDrain());",
          "",
          "[Added Lines]",
          "3048:   EXPECT_CALL(*mock_cp, drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete));",
          "3054:   EXPECT_CALL(*mock_tcp, drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4603:   EXPECT_NE(cp1, cp2);",
          "4604:   EXPECT_NE(tcp1, tcp2);",
          "4623:   HostVector hosts_removed;",
          "4624:   hosts_removed.push_back(host2);",
          "",
          "[Removed Lines]",
          "4606:   EXPECT_CALL(*cp2, startDrain()).WillOnce(Invoke([&]() {",
          "4607:     cp2->idle_cb_();",
          "4608:     cp2->idle_cb_ = nullptr;",
          "4609:   }));",
          "4610:   EXPECT_CALL(*cp1, startDrain()).WillOnce(Invoke([&]() {",
          "4611:     cp1->idle_cb_();",
          "4612:     cp1->idle_cb_ = nullptr;",
          "4613:   }));",
          "4614:   EXPECT_CALL(*tcp1, startDrain()).WillOnce(Invoke([&]() {",
          "4615:     tcp1->idle_cb_();",
          "4616:     tcp1->idle_cb_ = nullptr;",
          "4617:   }));",
          "4618:   EXPECT_CALL(*tcp2, startDrain()).WillOnce(Invoke([&]() {",
          "4619:     tcp2->idle_cb_();",
          "4620:     tcp2->idle_cb_ = nullptr;",
          "4621:   }));",
          "",
          "[Added Lines]",
          "4616:   EXPECT_CALL(*cp2, drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete))",
          "4617:       .WillOnce(Invoke([&]() {",
          "4618:         cp2->idle_cb_();",
          "4619:         cp2->idle_cb_ = nullptr;",
          "4620:       }));",
          "4621:   EXPECT_CALL(*cp1, drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete))",
          "4622:       .WillOnce(Invoke([&]() {",
          "4623:         cp1->idle_cb_();",
          "4624:         cp1->idle_cb_ = nullptr;",
          "4625:       }));",
          "4626:   EXPECT_CALL(*tcp1, drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete))",
          "4627:       .WillOnce(Invoke([&]() {",
          "4628:         tcp1->idle_cb_();",
          "4629:         tcp1->idle_cb_ = nullptr;",
          "4630:       }));",
          "4631:   EXPECT_CALL(*tcp2, drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete))",
          "4632:       .WillOnce(Invoke([&]() {",
          "4633:         tcp2->idle_cb_();",
          "4634:         tcp2->idle_cb_ = nullptr;",
          "4635:       }));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4641:   HostVector hosts_added;",
          "4642:   hosts_added.push_back(host3);",
          "4654:   cluster.prioritySet().updateHosts(",
          "",
          "[Removed Lines]",
          "4644:   EXPECT_CALL(*cp1, startDrain()).WillOnce(Invoke([&]() {",
          "4645:     cp1->idle_cb_();",
          "4646:     cp1->idle_cb_ = nullptr;",
          "4647:   }));",
          "4648:   EXPECT_CALL(*tcp1, startDrain()).WillOnce(Invoke([&]() {",
          "4649:     tcp1->idle_cb_();",
          "4650:     tcp1->idle_cb_ = nullptr;",
          "4651:   }));",
          "",
          "[Added Lines]",
          "4658:   EXPECT_CALL(*cp1, drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete))",
          "4659:       .WillOnce(Invoke([&]() {",
          "4660:         cp1->idle_cb_();",
          "4661:         cp1->idle_cb_ = nullptr;",
          "4662:       }));",
          "4663:   EXPECT_CALL(*tcp1, drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete))",
          "4664:       .WillOnce(Invoke([&]() {",
          "4665:         tcp1->idle_cb_();",
          "4666:         tcp1->idle_cb_ = nullptr;",
          "4667:       }));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4712:   hosts_added.push_back(host2);",
          "4719:   cluster.prioritySet().updateHosts(",
          "",
          "[Removed Lines]",
          "4715:   EXPECT_CALL(*cp1, drainConnections()).Times(0);",
          "4716:   EXPECT_CALL(*tcp1, drainConnections()).Times(0);",
          "",
          "[Added Lines]",
          "4731:   EXPECT_CALL(*cp1,",
          "4732:               drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections))",
          "4733:       .Times(0);",
          "4734:   EXPECT_CALL(*tcp1,",
          "4735:               drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections))",
          "4736:       .Times(0);",
          "",
          "---------------"
        ],
        "test/common/upstream/conn_pool_map_impl_test.cc||test/common/upstream/conn_pool_map_impl_test.cc": [
          "File: test/common/upstream/conn_pool_map_impl_test.cc -> test/common/upstream/conn_pool_map_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:   ReadyWatcher watcher;",
          "162:   test_map->addIdleCallback([&watcher]() { watcher.ready(); });",
          "165:   EXPECT_CALL(watcher, ready()).Times(2);",
          "166:   cb1();",
          "",
          "[Removed Lines]",
          "163:   test_map->startDrain();",
          "",
          "[Added Lines]",
          "163:   test_map->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "174:   ReadyWatcher watcher;",
          "175:   test_map->addIdleCallback([&watcher]() { watcher.ready(); });",
          "178:   Http::ConnectionPool::Instance::IdleCb cb1;",
          "179:   test_map->getPool(1, getFactoryExpectIdleCb(&cb1));",
          "",
          "[Removed Lines]",
          "176:   test_map->startDrain();",
          "",
          "[Added Lines]",
          "176:   test_map->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "190: TEST_F(ConnPoolMapImplTest, EmptyMapDrainConnectionsNop) {",
          "191:   TestMapPtr test_map = makeTestMap();",
          "193: }",
          "",
          "[Removed Lines]",
          "192:   test_map->drainConnections();",
          "",
          "[Added Lines]",
          "192:   test_map->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "199:   test_map->getPool(1, getBasicFactory());",
          "200:   test_map->getPool(2, getBasicFactory());",
          "205: }",
          "207: TEST_F(ConnPoolMapImplTest, ClearDefersDelete) {",
          "",
          "[Removed Lines]",
          "201:   EXPECT_CALL(*mock_pools_[0], drainConnections());",
          "202:   EXPECT_CALL(*mock_pools_[1], drainConnections());",
          "204:   test_map->drainConnections();",
          "",
          "[Added Lines]",
          "201:   EXPECT_CALL(*mock_pools_[0],",
          "202:               drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections));",
          "203:   EXPECT_CALL(*mock_pools_[1],",
          "204:               drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections));",
          "206:   test_map->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------"
        ],
        "test/common/upstream/priority_conn_pool_map_impl_test.cc||test/common/upstream/priority_conn_pool_map_impl_test.cc": [
          "File: test/common/upstream/priority_conn_pool_map_impl_test.cc -> test/common/upstream/priority_conn_pool_map_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "156:   test_map->getPool(ResourcePriority::High, 0, getBasicFactory());",
          "157:   test_map->getPool(ResourcePriority::Default, 0, getBasicFactory());",
          "163: }",
          "165: } // namespace",
          "",
          "[Removed Lines]",
          "159:   EXPECT_CALL(*mock_pools_[0], drainConnections());",
          "160:   EXPECT_CALL(*mock_pools_[1], drainConnections());",
          "162:   test_map->drainConnections();",
          "",
          "[Added Lines]",
          "159:   EXPECT_CALL(*mock_pools_[0],",
          "160:               drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections));",
          "161:   EXPECT_CALL(*mock_pools_[1],",
          "162:               drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections));",
          "164:   test_map->drainConnections(Envoy::ConnectionPool::DrainBehavior::DrainExistingConnections);",
          "",
          "---------------"
        ],
        "test/mocks/http/conn_pool.h||test/mocks/http/conn_pool.h": [
          "File: test/mocks/http/conn_pool.h -> test/mocks/http/conn_pool.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:   MOCK_METHOD(Http::Protocol, protocol, (), (const));",
          "32:   MOCK_METHOD(void, addIdleCallback, (IdleCb cb));",
          "33:   MOCK_METHOD(bool, isIdle, (), (const));",
          "36:   MOCK_METHOD(bool, hasActiveConnections, (), (const));",
          "37:   MOCK_METHOD(Cancellable*, newStream, (ResponseDecoder & response_decoder, Callbacks& callbacks));",
          "38:   MOCK_METHOD(bool, maybePreconnect, (float));",
          "",
          "[Removed Lines]",
          "34:   MOCK_METHOD(void, startDrain, ());",
          "35:   MOCK_METHOD(void, drainConnections, ());",
          "",
          "[Added Lines]",
          "34:   MOCK_METHOD(void, drainConnections, (Envoy::ConnectionPool::DrainBehavior drain_behavior));",
          "",
          "---------------"
        ],
        "test/mocks/tcp/mocks.h||test/mocks/tcp/mocks.h": [
          "File: test/mocks/tcp/mocks.h -> test/mocks/tcp/mocks.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:   MOCK_METHOD(void, addIdleCallback, (IdleCb cb));",
          "63:   MOCK_METHOD(bool, isIdle, (), (const));",
          "66:   MOCK_METHOD(void, closeConnections, ());",
          "67:   MOCK_METHOD(Cancellable*, newConnection, (Tcp::ConnectionPool::Callbacks & callbacks));",
          "68:   MOCK_METHOD(bool, maybePreconnect, (float), ());",
          "",
          "[Removed Lines]",
          "64:   MOCK_METHOD(void, startDrain, ());",
          "65:   MOCK_METHOD(void, drainConnections, ());",
          "",
          "[Added Lines]",
          "64:   MOCK_METHOD(void, drainConnections, (Envoy::ConnectionPool::DrainBehavior drain_behavior));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a4a861a6b22959205fb70454bcdf238e3ebd4f9",
      "candidate_info": {
        "commit_hash": "9a4a861a6b22959205fb70454bcdf238e3ebd4f9",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/9a4a861a6b22959205fb70454bcdf238e3ebd4f9",
        "files": [
          "api/envoy/config/core/v3/protocol.proto",
          "docs/root/configuration/upstream/cluster_manager/cluster_stats.rst",
          "docs/root/faq/configuration/timeouts.rst",
          "docs/root/version_history/current.rst",
          "envoy/upstream/upstream.h",
          "source/common/conn_pool/conn_pool_base.cc",
          "source/common/conn_pool/conn_pool_base.h",
          "source/common/upstream/upstream_impl.cc",
          "source/common/upstream/upstream_impl.h",
          "test/common/conn_pool/conn_pool_base_test.cc",
          "test/common/upstream/upstream_impl_test.cc",
          "test/integration/idle_timeout_integration_test.cc",
          "test/mocks/upstream/cluster_info.h"
        ],
        "message": "upstream: support max connection duration for upstream HTTP connections (#17932)\n\nCommit Message: upstream: support max connection duration for upstream connections\nRisk Level: low, isolated opt-in feature\nTesting: new unit tests\nDocs Changes: updated protobuf definition to no longer mention that max lifetime is not implemented for upstream connections\nRelease Notes: upstream: support max connection duration for upstream connections\nPlatform Specific Features:\nFixes #15107\n\nSigned-off-by: John Esmet <john.esmet@gmail.com>",
        "before_after_code_files": [
          "api/envoy/config/core/v3/protocol.proto||api/envoy/config/core/v3/protocol.proto",
          "envoy/upstream/upstream.h||envoy/upstream/upstream.h",
          "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc",
          "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h",
          "source/common/upstream/upstream_impl.cc||source/common/upstream/upstream_impl.cc",
          "source/common/upstream/upstream_impl.h||source/common/upstream/upstream_impl.h",
          "test/common/conn_pool/conn_pool_base_test.cc||test/common/conn_pool/conn_pool_base_test.cc",
          "test/common/upstream/upstream_impl_test.cc||test/common/upstream/upstream_impl_test.cc",
          "test/integration/idle_timeout_integration_test.cc||test/integration/idle_timeout_integration_test.cc",
          "test/mocks/upstream/cluster_info.h||test/mocks/upstream/cluster_info.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc",
            "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h"
          ],
          "candidate": [
            "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc",
            "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h"
          ]
        }
      },
      "candidate_diff": {
        "api/envoy/config/core/v3/protocol.proto||api/envoy/config/core/v3/protocol.proto": [
          "File: api/envoy/config/core/v3/protocol.proto -> api/envoy/config/core/v3/protocol.proto"
        ],
        "envoy/upstream/upstream.h||envoy/upstream/upstream.h": [
          "File: envoy/upstream/upstream.h -> envoy/upstream/upstream.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "553:   COUNTER(upstream_cx_http2_total)                                                                 \\",
          "554:   COUNTER(upstream_cx_http3_total)                                                                 \\",
          "555:   COUNTER(upstream_cx_idle_timeout)                                                                \\",
          "556:   COUNTER(upstream_cx_max_requests)                                                                \\",
          "557:   COUNTER(upstream_cx_none_healthy)                                                                \\",
          "558:   COUNTER(upstream_cx_overflow)                                                                    \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556:   COUNTER(upstream_cx_max_duration_reached)                                                        \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "745:   virtual const absl::optional<std::chrono::milliseconds> idleTimeout() const PURE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "751:   virtual const absl::optional<std::chrono::milliseconds> maxConnectionDuration() const PURE;",
          "",
          "---------------"
        ],
        "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc": [
          "File: source/common/conn_pool/conn_pool_base.cc -> source/common/conn_pool/conn_pool_base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "458:     client.releaseResources();",
          "460:     dispatcher_.deferredDelete(client.removeFromList(owningList(client.state())));",
          "462:     checkForIdleAndCloseIdleConnsIfDraining();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "465:     if (client.connection_duration_timer_) {",
          "466:       client.connection_duration_timer_->disableTimer();",
          "467:       client.connection_duration_timer_.reset();",
          "468:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "473:     ASSERT(client.state() == ActiveClient::State::CONNECTING);",
          "474:     transitionActiveClientState(client, ActiveClient::State::READY);",
          "478:     onConnected(client);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "487:     const absl::optional<std::chrono::milliseconds> max_connection_duration =",
          "488:         client.parent_.host()->cluster().maxConnectionDuration();",
          "489:     if (max_connection_duration.has_value()) {",
          "490:       client.connection_duration_timer_ = client.parent_.dispatcher().createTimer(",
          "491:           [&client]() { client.onConnectionDurationTimeout(); });",
          "492:       client.connection_duration_timer_->enableTimer(max_connection_duration.value());",
          "493:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "562:                            uint32_t concurrent_stream_limit)",
          "563:     : parent_(parent), remaining_streams_(translateZeroToUnlimited(lifetime_stream_limit)),",
          "564:       concurrent_stream_limit_(translateZeroToUnlimited(concurrent_stream_limit)),",
          "566:   conn_connect_ms_ = std::make_unique<Stats::HistogramCompletableTimespanImpl>(",
          "567:       parent_.host()->cluster().stats().upstream_cx_connect_ms_, parent_.dispatcher().timeSource());",
          "568:   conn_length_ = std::make_unique<Stats::HistogramCompletableTimespanImpl>(",
          "",
          "[Removed Lines]",
          "565:       connect_timer_(parent_.dispatcher().createTimer([this]() -> void { onConnectTimeout(); })) {",
          "",
          "[Added Lines]",
          "584:       connect_timer_(parent_.dispatcher().createTimer([this]() { onConnectTimeout(); })) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "596:   close();",
          "597: }",
          "599: void ActiveClient::drain() {",
          "600:   if (currentUnusedCapacity() <= 0) {",
          "601:     return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "618: void ActiveClient::onConnectionDurationTimeout() {",
          "620:   ENVOY_BUG(state_ != ActiveClient::State::CONNECTING,",
          "621:             \"max connection duration reached while connecting\");",
          "625:   ENVOY_BUG(state_ != ActiveClient::State::CLOSED, \"max connection duration reached while closed\");",
          "629:   if (state_ == ActiveClient::State::CONNECTING || state_ == ActiveClient::State::CLOSED ||",
          "630:       state_ == ActiveClient::State::DRAINING) {",
          "631:     return;",
          "632:   }",
          "634:   ENVOY_CONN_LOG(debug, \"max connection duration reached, DRAINING\", *this);",
          "635:   parent_.host()->cluster().stats().upstream_cx_max_duration_reached_.inc();",
          "636:   parent_.transitionActiveClientState(*this, Envoy::ConnectionPool::ActiveClient::State::DRAINING);",
          "641:   if (numActiveStreams() == 0) {",
          "642:     close();",
          "643:   }",
          "644: }",
          "",
          "---------------"
        ],
        "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h": [
          "File: source/common/conn_pool/conn_pool_base.h -> source/common/conn_pool/conn_pool_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   void onConnectTimeout();",
          "49:   uint32_t effectiveConcurrentStreamLimit() const {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:   void onConnectionDurationTimeout();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:   Stats::TimespanPtr conn_connect_ms_;",
          "106:   Stats::TimespanPtr conn_length_;",
          "107:   Event::TimerPtr connect_timer_;",
          "108:   bool resources_released_{false};",
          "109:   bool timed_out_{false};",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111:   Event::TimerPtr connection_duration_timer_;",
          "",
          "---------------"
        ],
        "source/common/upstream/upstream_impl.cc||source/common/upstream/upstream_impl.cc": [
          "File: source/common/upstream/upstream_impl.cc -> source/common/upstream/upstream_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "921:     idle_timeout_ = std::chrono::hours(1);",
          "922:   }",
          "924:   if (config.has_eds_cluster_config()) {",
          "925:     if (config.type() != envoy::config::cluster::v3::Cluster::EDS) {",
          "926:       throw EnvoyException(\"eds_cluster_config set in a non-EDS cluster\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "924:   if (http_protocol_options_->common_http_protocol_options_.has_max_connection_duration()) {",
          "925:     max_connection_duration_ = std::chrono::milliseconds(DurationUtil::durationToMilliseconds(",
          "926:         http_protocol_options_->common_http_protocol_options_.max_connection_duration()));",
          "927:     if (max_connection_duration_.value().count() == 0) {",
          "928:       max_connection_duration_ = absl::nullopt;",
          "929:     }",
          "930:   } else {",
          "931:     max_connection_duration_ = absl::nullopt;",
          "932:   }",
          "",
          "---------------"
        ],
        "source/common/upstream/upstream_impl.h||source/common/upstream/upstream_impl.h": [
          "File: source/common/upstream/upstream_impl.h -> source/common/upstream/upstream_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "613:   const absl::optional<std::chrono::milliseconds> idleTimeout() const override {",
          "614:     return idle_timeout_;",
          "615:   }",
          "616:   float perUpstreamPreconnectRatio() const override { return per_upstream_preconnect_ratio_; }",
          "617:   float peekaheadRatio() const override { return peekahead_ratio_; }",
          "618:   uint32_t perConnectionBufferLimitBytes() const override {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "616:   const absl::optional<std::chrono::milliseconds> maxConnectionDuration() const override {",
          "617:     return max_connection_duration_;",
          "618:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "769:   const uint32_t max_response_headers_count_;",
          "770:   const std::chrono::milliseconds connect_timeout_;",
          "771:   absl::optional<std::chrono::milliseconds> idle_timeout_;",
          "772:   const float per_upstream_preconnect_ratio_;",
          "773:   const float peekahead_ratio_;",
          "774:   const uint32_t per_connection_buffer_limit_bytes_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:   absl::optional<std::chrono::milliseconds> max_connection_duration_;",
          "",
          "---------------"
        ],
        "test/common/conn_pool/conn_pool_base_test.cc||test/common/conn_pool/conn_pool_base_test.cc": [
          "File: test/common/conn_pool/conn_pool_base_test.cc -> test/common/conn_pool/conn_pool_base_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: #include \"test/mocks/event/mocks.h\"",
          "5: #include \"test/mocks/upstream/cluster_info.h\"",
          "6: #include \"test/mocks/upstream/host.h\"",
          "8: #include \"gmock/gmock.h\"",
          "9: #include \"gtest/gtest.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: #include \"test/test_common/simulated_time_system.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     parent_.onConnectionEvent(*this, \"\", event);",
          "30:   }",
          "32:   uint32_t active_streams_{};",
          "33: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "33:   static void incrementActiveStreams(ActiveClient& client) {",
          "34:     TestActiveClient* testClient = dynamic_cast<TestActiveClient*>(&client);",
          "35:     ASSERT_TRUE(testClient != nullptr);",
          "36:     testClient->active_streams_++;",
          "37:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "70:       return ret;",
          "71:     }));",
          "72:     ON_CALL(pool_, onPoolReady(_, _))",
          "75:         }));",
          "76:   }",
          "",
          "[Removed Lines]",
          "73:         .WillByDefault(Invoke([](ActiveClient& client, AttachContext&) -> void {",
          "74:           ++(reinterpret_cast<TestActiveClient*>(&client)->active_streams_);",
          "",
          "[Added Lines]",
          "80:         .WillByDefault(Invoke([](ActiveClient& client, AttachContext&) {",
          "81:           TestActiveClient::incrementActiveStreams(client);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "95:   std::vector<TestActiveClient*> clients_;",
          "96: };",
          "98: TEST_F(ConnPoolImplBaseTest, DumpState) {",
          "99:   std::stringstream out;",
          "100:   pool_.dumpState(out, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "105: class ConnPoolImplDispatcherBaseTest : public testing::Test {",
          "106: public:",
          "107:   ConnPoolImplDispatcherBaseTest()",
          "108:       : api_(Api::createApiForTest(time_system_)),",
          "109:         dispatcher_(api_->allocateDispatcher(\"test_thread\")),",
          "110:         pool_(host_, Upstream::ResourcePriority::Default, *dispatcher_, nullptr, nullptr, state_) {",
          "113:     cluster_->resetResourceManager(1024, 1024, 1024, 1, 1);",
          "114:     ON_CALL(pool_, instantiateActiveClient).WillByDefault(Invoke([&]() -> ActiveClientPtr {",
          "115:       auto ret =",
          "116:           std::make_unique<NiceMock<TestActiveClient>>(pool_, stream_limit_, concurrent_streams_);",
          "117:       clients_.push_back(ret.get());",
          "118:       ret->real_host_description_ = descr_;",
          "119:       return ret;",
          "120:     }));",
          "121:     ON_CALL(pool_, onPoolReady(_, _))",
          "122:         .WillByDefault(Invoke([](ActiveClient& client, AttachContext&) {",
          "123:           TestActiveClient::incrementActiveStreams(client);",
          "124:         }));",
          "125:   }",
          "127:   void newConnectingClient() {",
          "128:     ON_CALL(*cluster_, maxConnectionDuration).WillByDefault(Return(max_connection_duration_opt_));",
          "131:     EXPECT_CALL(pool_, instantiateActiveClient);",
          "132:     pool_.newStreamImpl(context_);",
          "133:     ASSERT_EQ(1, clients_.size());",
          "134:     EXPECT_EQ(ActiveClient::State::CONNECTING, clients_.back()->state());",
          "138:     EXPECT_EQ(nullptr, clients_.back()->connection_duration_timer_);",
          "139:   }",
          "141:   void newActiveClientAndStream(ActiveClient::State expected_state = ActiveClient::State::BUSY) {",
          "143:     newConnectingClient();",
          "146:     EXPECT_CALL(pool_, onPoolReady);",
          "147:     clients_.back()->onEvent(Network::ConnectionEvent::Connected);",
          "148:     EXPECT_EQ(expected_state, clients_.back()->state());",
          "151:     if (max_connection_duration_opt_.has_value()) {",
          "152:       EXPECT_TRUE(clients_.back()->connection_duration_timer_ != nullptr);",
          "153:       EXPECT_TRUE(clients_.back()->connection_duration_timer_->enabled());",
          "154:     } else {",
          "155:       EXPECT_EQ(nullptr, clients_.back()->connection_duration_timer_);",
          "156:     }",
          "157:   }",
          "159:   void newDrainingClient() {",
          "161:     stream_limit_ = 1;",
          "162:     newActiveClientAndStream(ActiveClient::State::DRAINING);",
          "163:   }",
          "165:   void newClosedClient() {",
          "168:     newDrainingClient();",
          "169:     closeStream();",
          "170:   }",
          "173:   void advanceTimeAndRun(uint32_t duration_ms) {",
          "174:     time_system_.advanceTimeAndRun(std::chrono::milliseconds(duration_ms), *dispatcher_,",
          "175:                                    Event::Dispatcher::RunType::Block);",
          "176:   }",
          "179:   void closeStream() {",
          "180:     clients_.back()->active_streams_ = 0;",
          "181:     pool_.onStreamClosed(*clients_.back(), false);",
          "182:   }",
          "184:   void closeStreamAndDrainClient() {",
          "186:     closeStream();",
          "187:     EXPECT_EQ(ActiveClient::State::READY, clients_.back()->state());",
          "190:     pool_.drainConnectionsImpl(Envoy::ConnectionPool::DrainBehavior::DrainAndDelete);",
          "191:   }",
          "193:   Event::SimulatedTimeSystemHelper time_system_;",
          "194:   Api::ApiPtr api_;",
          "195:   Event::DispatcherPtr dispatcher_;",
          "196:   uint32_t max_connection_duration_ = 5000;",
          "197:   absl::optional<std::chrono::milliseconds> max_connection_duration_opt_{max_connection_duration_};",
          "198:   uint32_t stream_limit_ = 100;",
          "199:   uint32_t concurrent_streams_ = 1;",
          "200:   Upstream::ClusterConnectivityState state_;",
          "201:   std::shared_ptr<NiceMock<Upstream::MockHostDescription>> descr_{",
          "202:       new NiceMock<Upstream::MockHostDescription>()};",
          "203:   std::shared_ptr<Upstream::MockClusterInfo> cluster_{new NiceMock<Upstream::MockClusterInfo>()};",
          "204:   Upstream::HostSharedPtr host_{",
          "205:       Upstream::makeTestHost(cluster_, \"tcp://127.0.0.1:80\", dispatcher_->timeSource())};",
          "206:   TestConnPoolImplBase pool_;",
          "207:   AttachContext context_;",
          "208:   std::vector<TestActiveClient*> clients_;",
          "209: };",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "205:   EXPECT_FALSE(pool_.maybePreconnectImpl(1));",
          "206: }",
          "209: TEST_F(ConnPoolImplBaseTest, PoolIdleCallbackTriggeredRemoteClose) {",
          "210:   EXPECT_CALL(dispatcher_, createTimer_(_)).Times(AnyNumber());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "321: TEST_F(ConnPoolImplDispatcherBaseTest, MaxConnectionDurationTimerNull) {",
          "324:   max_connection_duration_opt_ = absl::nullopt;",
          "325:   newActiveClientAndStream();",
          "326:   closeStreamAndDrainClient();",
          "327: }",
          "329: TEST_F(ConnPoolImplDispatcherBaseTest, MaxConnectionDurationTimerEnabled) {",
          "332:   newActiveClientAndStream();",
          "333:   closeStreamAndDrainClient();",
          "334: }",
          "336: TEST_F(ConnPoolImplDispatcherBaseTest, MaxConnectionDurationBusy) {",
          "337:   newActiveClientAndStream();",
          "341:   advanceTimeAndRun(max_connection_duration_ - 1);",
          "342:   EXPECT_EQ(0, pool_.host()->cluster().stats().upstream_cx_max_duration_reached_.value());",
          "343:   EXPECT_EQ(ActiveClient::State::BUSY, clients_.back()->state());",
          "347:   advanceTimeAndRun(2);",
          "348:   EXPECT_EQ(1, pool_.host()->cluster().stats().upstream_cx_max_duration_reached_.value());",
          "349:   EXPECT_EQ(ActiveClient::State::DRAINING, clients_.back()->state());",
          "350:   closeStream();",
          "351: }",
          "353: TEST_F(ConnPoolImplDispatcherBaseTest, MaxConnectionDurationReady) {",
          "354:   newActiveClientAndStream();",
          "357:   closeStream();",
          "358:   EXPECT_EQ(ActiveClient::State::READY, clients_.back()->state());",
          "362:   advanceTimeAndRun(max_connection_duration_ - 1);",
          "363:   EXPECT_EQ(0, pool_.host()->cluster().stats().upstream_cx_max_duration_reached_.value());",
          "364:   EXPECT_EQ(ActiveClient::State::READY, clients_.back()->state());",
          "368:   advanceTimeAndRun(2);",
          "369:   EXPECT_EQ(1, pool_.host()->cluster().stats().upstream_cx_max_duration_reached_.value());",
          "370: }",
          "372: TEST_F(ConnPoolImplDispatcherBaseTest, MaxConnectionDurationAlreadyDraining) {",
          "374:   newDrainingClient();",
          "378:   advanceTimeAndRun(max_connection_duration_ + 1);",
          "379:   EXPECT_EQ(0, pool_.host()->cluster().stats().upstream_cx_max_duration_reached_.value());",
          "380:   EXPECT_EQ(ActiveClient::State::DRAINING, clients_.back()->state());",
          "381:   closeStream();",
          "382: }",
          "384: TEST_F(ConnPoolImplDispatcherBaseTest, MaxConnectionDurationAlreadyClosed) {",
          "386:   newClosedClient();",
          "390:   advanceTimeAndRun(max_connection_duration_ + 1);",
          "391:   EXPECT_EQ(0, pool_.host()->cluster().stats().upstream_cx_max_duration_reached_.value());",
          "392: }",
          "394: TEST_F(ConnPoolImplDispatcherBaseTest, MaxConnectionDurationCallbackWhileClosedBug) {",
          "396:   newClosedClient();",
          "401:   EXPECT_ENVOY_BUG(clients_.back()->onConnectionDurationTimeout(),",
          "402:                    \"max connection duration reached while closed\");",
          "403: }",
          "405: TEST_F(ConnPoolImplDispatcherBaseTest, MaxConnectionDurationCallbackWhileConnectingBug) {",
          "407:   newConnectingClient();",
          "412:   EXPECT_ENVOY_BUG(clients_.back()->onConnectionDurationTimeout(),",
          "413:                    \"max connection duration reached while connecting\");",
          "416:   EXPECT_CALL(pool_, onPoolFailure);",
          "417:   pool_.destructAllConnections();",
          "418: }",
          "",
          "---------------"
        ],
        "test/common/upstream/upstream_impl_test.cc||test/common/upstream/upstream_impl_test.cc": [
          "File: test/common/upstream/upstream_impl_test.cc -> test/common/upstream/upstream_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2839:   EXPECT_EQ(std::chrono::seconds(5), cluster->info()->connectTimeout());",
          "2840: }",
          "2842: TEST_F(ClusterInfoImplTest, Timeouts) {",
          "2843:   const std::string yaml = R\"EOF(",
          "2844:     name: name",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2842: TEST_F(ClusterInfoImplTest, MaxConnectionDurationTest) {",
          "2843:   const std::string yaml_base = R\"EOF(",
          "2844:   name: {}",
          "2845:   type: STRICT_DNS",
          "2846:   lb_policy: ROUND_ROBIN",
          "2847:   )EOF\";",
          "2849:   const std::string yaml_set_max_connection_duration = yaml_base + R\"EOF(",
          "2850:   typed_extension_protocol_options:",
          "2851:     envoy.extensions.upstreams.http.v3.HttpProtocolOptions:",
          "2852:       \"@type\": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
          "2853:       explicit_http_config:",
          "2854:         http_protocol_options: {{}}",
          "2855:       common_http_protocol_options:",
          "2856:         max_connection_duration: {}",
          "2857:   )EOF\";",
          "2859:   auto cluster1 = makeCluster(fmt::format(yaml_base, \"cluster1\"));",
          "2860:   EXPECT_EQ(absl::nullopt, cluster1->info()->maxConnectionDuration());",
          "2862:   auto cluster2 = makeCluster(fmt::format(yaml_set_max_connection_duration, \"cluster2\", \"9s\"));",
          "2863:   EXPECT_EQ(std::chrono::seconds(9), cluster2->info()->maxConnectionDuration());",
          "2865:   auto cluster3 = makeCluster(fmt::format(yaml_set_max_connection_duration, \"cluster3\", \"0s\"));",
          "2866:   EXPECT_EQ(absl::nullopt, cluster3->info()->maxConnectionDuration());",
          "2867: }",
          "",
          "---------------"
        ],
        "test/integration/idle_timeout_integration_test.cc||test/integration/idle_timeout_integration_test.cc": [
          "File: test/integration/idle_timeout_integration_test.cc -> test/integration/idle_timeout_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:   test_server_->waitForCounterGe(\"cluster.cluster_0.upstream_cx_idle_timeout\", 1);",
          "204: }",
          "207: TEST_P(IdleTimeoutIntegrationTest, PerStreamIdleTimeoutAfterDownstreamHeaders) {",
          "208:   enable_per_stream_idle_timeout_ = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: TEST_P(IdleTimeoutIntegrationTest, MaxConnectionDurationBasic) {",
          "208:   config_helper_.addConfigModifier([&](envoy::config::bootstrap::v3::Bootstrap& bootstrap) {",
          "209:     ConfigHelper::HttpProtocolOptions protocol_options;",
          "210:     auto* http_protocol_options = protocol_options.mutable_common_http_protocol_options();",
          "211:     auto* max_connection_duration = http_protocol_options->mutable_max_connection_duration();",
          "212:     max_connection_duration->set_seconds(1);",
          "213:     ConfigHelper::setProtocolOptions(*bootstrap.mutable_static_resources()->mutable_clusters(0),",
          "214:                                      protocol_options);",
          "215:   });",
          "216:   initialize();",
          "218:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "219:   auto response = codec_client_->makeRequestWithBody(default_request_headers_, 1024);",
          "220:   waitForNextUpstreamRequest();",
          "222:   upstream_request_->encodeHeaders(default_response_headers_, false);",
          "223:   upstream_request_->encodeData(512, true);",
          "224:   ASSERT_TRUE(response->waitForEndStream());",
          "226:   EXPECT_TRUE(upstream_request_->complete());",
          "227:   EXPECT_TRUE(response->complete());",
          "228:   test_server_->waitForCounterGe(\"cluster.cluster_0.upstream_cx_total\", 1);",
          "229:   test_server_->waitForCounterGe(\"cluster.cluster_0.upstream_rq_200\", 1);",
          "232:   ASSERT_TRUE(fake_upstream_connection_->waitForDisconnect());",
          "233:   test_server_->waitForCounterGe(\"cluster.cluster_0.upstream_cx_max_duration_reached\", 1);",
          "234: }",
          "",
          "---------------"
        ],
        "test/mocks/upstream/cluster_info.h||test/mocks/upstream/cluster_info.h": [
          "File: test/mocks/upstream/cluster_info.h -> test/mocks/upstream/cluster_info.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:   MOCK_METHOD(bool, addedViaApi, (), (const));",
          "91:   MOCK_METHOD(std::chrono::milliseconds, connectTimeout, (), (const));",
          "92:   MOCK_METHOD(const absl::optional<std::chrono::milliseconds>, idleTimeout, (), (const));",
          "93:   MOCK_METHOD(const absl::optional<std::chrono::milliseconds>, maxStreamDuration, (), (const));",
          "94:   MOCK_METHOD(const absl::optional<std::chrono::milliseconds>, grpcTimeoutHeaderMax, (), (const));",
          "95:   MOCK_METHOD(const absl::optional<std::chrono::milliseconds>, grpcTimeoutHeaderOffset, (),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:   MOCK_METHOD(const absl::optional<std::chrono::milliseconds>, maxConnectionDuration, (), (const));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:   ~MockIdleTimeEnabledClusterInfo() override;",
          "219: };",
          "221: } // namespace Upstream",
          "222: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: class MockMaxConnectionDurationEnabledClusterInfo : public MockClusterInfo {",
          "223: public:",
          "224:   MockMaxConnectionDurationEnabledClusterInfo();",
          "225:   ~MockMaxConnectionDurationEnabledClusterInfo() override;",
          "226: };",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b05f8f6a4ac2448abfa82444b007acba5b2507c",
      "candidate_info": {
        "commit_hash": "8b05f8f6a4ac2448abfa82444b007acba5b2507c",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/8b05f8f6a4ac2448abfa82444b007acba5b2507c",
        "files": [
          "docs/root/version_history/current.rst",
          "source/common/conn_pool/BUILD",
          "source/common/conn_pool/conn_pool_base.cc",
          "source/common/conn_pool/conn_pool_base.h",
          "test/config/utility.cc",
          "test/config/utility.h",
          "test/integration/BUILD",
          "test/integration/cds_integration_test.cc"
        ],
        "message": "[1.21] CVE-2022-23606\n\nAvoid closing other connections to prevent deep recursion when a large number of idle connections are closed at the start of a pool drain, when a connection is closed.\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>",
        "before_after_code_files": [
          "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc",
          "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h",
          "test/config/utility.cc||test/config/utility.cc",
          "test/config/utility.h||test/config/utility.h",
          "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc",
            "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h",
            "test/config/utility.cc||test/config/utility.cc",
            "test/config/utility.h||test/config/utility.h",
            "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
          ],
          "candidate": [
            "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc",
            "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h",
            "test/config/utility.cc||test/config/utility.cc",
            "test/config/utility.h||test/config/utility.h",
            "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc": [
          "File: source/common/conn_pool/conn_pool_base.cc -> source/common/conn_pool/conn_pool_base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"source/common/conn_pool/conn_pool_base.h\"",
          "3: #include \"source/common/common/assert.h\"",
          "4: #include \"source/common/network/transport_socket_options_impl.h\"",
          "5: #include \"source/common/runtime/runtime_features.h\"",
          "6: #include \"source/common/stats/timespan_impl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include \"source/common/common/debug_recursion_checker.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "347: void ConnPoolImplBase::addIdleCallbackImpl(Instance::IdleCb cb) { idle_callbacks_.push_back(cb); }",
          "349: void ConnPoolImplBase::closeIdleConnectionsForDrainingPool() {",
          "351:   std::list<ActiveClient*> to_close;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351:   Common::AutoDebugRecursionChecker assert_not_in(recursion_checker_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "401:          connecting_clients_.empty();",
          "402: }",
          "409:   if (isIdleImpl()) {",
          "410:     ENVOY_LOG(debug, \"invoking idle callbacks - is_draining_for_deletion_={}\",",
          "411:               is_draining_for_deletion_);",
          "",
          "[Removed Lines]",
          "404: void ConnPoolImplBase::checkForIdleAndCloseIdleConnsIfDraining() {",
          "405:   if (is_draining_for_deletion_) {",
          "406:     closeIdleConnectionsForDrainingPool();",
          "407:   }",
          "",
          "[Added Lines]",
          "407: void ConnPoolImplBase::checkForIdleAndNotify() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "415:   }",
          "416: }",
          "418: void ConnPoolImplBase::onConnectionEvent(ActiveClient& client, absl::string_view failure_reason,",
          "419:                                          Network::ConnectionEvent event) {",
          "420:   if (client.state() == ActiveClient::State::CONNECTING) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "417: void ConnPoolImplBase::checkForIdleAndCloseIdleConnsIfDraining() {",
          "418:   if (is_draining_for_deletion_) {",
          "419:     closeIdleConnectionsForDrainingPool();",
          "420:   }",
          "422:   checkForIdleAndNotify();",
          "423: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "484:     dispatcher_.deferredDelete(client.removeFromList(owningList(client.state())));",
          "488:     client.setState(ActiveClient::State::CLOSED);",
          "",
          "[Removed Lines]",
          "486:     checkForIdleAndCloseIdleConnsIfDraining();",
          "",
          "[Added Lines]",
          "501:     checkForIdleAndNotify();",
          "",
          "---------------"
        ],
        "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h": [
          "File: source/common/conn_pool/conn_pool_base.h -> source/common/conn_pool/conn_pool_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include \"envoy/stats/timespan.h\"",
          "7: #include \"envoy/upstream/cluster_manager.h\"",
          "9: #include \"source/common/common/dump_state_utils.h\"",
          "10: #include \"source/common/common/linked_object.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #include \"source/common/common/debug_recursion_checker.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "213:   void onConnectionEvent(ActiveClient& client, absl::string_view failure_reason,",
          "214:                          Network::ConnectionEvent event);",
          "217:   void checkForIdleAndCloseIdleConnsIfDraining();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:   void checkForIdleAndNotify();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "361:   bool deferred_deleting_{false};",
          "363:   Event::SchedulableCallbackPtr upstream_ready_cb_;",
          "364: };",
          "366: } // namespace ConnectionPool",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "368:   Common::DebugRecursionChecker recursion_checker_;",
          "",
          "---------------"
        ],
        "test/config/utility.cc||test/config/utility.cc": [
          "File: test/config/utility.cc -> test/config/utility.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "441:                   name, name, address, port, lb_policy));",
          "442: }",
          "444: envoy::config::cluster::v3::Cluster ConfigHelper::buildCluster(const std::string& name,",
          "445:                                                                const std::string& lb_policy) {",
          "446:   API_NO_BOOST(envoy::config::cluster::v3::Cluster) cluster;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "444: envoy::config::cluster::v3::Cluster ConfigHelper::buildH1ClusterWithHighCircuitBreakersLimits(",
          "445:     const std::string& name, int port, const std::string& address, const std::string& lb_policy) {",
          "446:   return TestUtility::parseYaml<envoy::config::cluster::v3::Cluster>(",
          "447:       fmt::format(R\"EOF(",
          "448:       name: {}",
          "449:       connect_timeout: 50s",
          "450:       type: STATIC",
          "451:       circuit_breakers:",
          "452:         thresholds:",
          "453:         - priority: DEFAULT",
          "454:           max_connections: 10000",
          "455:           max_pending_requests: 10000",
          "456:           max_requests: 10000",
          "457:           max_retries: 10000",
          "458:       load_assignment:",
          "459:         cluster_name: {}",
          "460:         endpoints:",
          "461:         - lb_endpoints:",
          "462:           - endpoint:",
          "463:               address:",
          "464:                 socket_address:",
          "465:                   address: {}",
          "466:                   port_value: {}",
          "467:       lb_policy: {}",
          "468:     )EOF\",",
          "469:                   name, name, address, port, lb_policy));",
          "470: }",
          "",
          "---------------"
        ],
        "test/config/utility.h||test/config/utility.h": [
          "File: test/config/utility.h -> test/config/utility.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:   buildStaticCluster(const std::string& name, int port, const std::string& address,",
          "154:                      const std::string& lb_policy = \"ROUND_ROBIN\");",
          "157:   static envoy::config::cluster::v3::Cluster",
          "158:   buildCluster(const std::string& name, const std::string& lb_policy = \"ROUND_ROBIN\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:   static envoy::config::cluster::v3::Cluster",
          "157:   buildH1ClusterWithHighCircuitBreakersLimits(const std::string& name, int port,",
          "158:                                               const std::string& address,",
          "159:                                               const std::string& lb_policy = \"ROUND_ROBIN\");",
          "",
          "---------------"
        ],
        "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc": [
          "File: test/integration/cds_integration_test.cc -> test/integration/cds_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:                                 sotwOrDelta() == Grpc::SotwOrDelta::Sotw ||",
          "38:                                         sotwOrDelta() == Grpc::SotwOrDelta::UnifiedSotw",
          "39:                                     ? \"GRPC\"",
          "41:     if (sotwOrDelta() == Grpc::SotwOrDelta::UnifiedSotw ||",
          "42:         sotwOrDelta() == Grpc::SotwOrDelta::UnifiedDelta) {",
          "43:       config_helper_.addRuntimeOverride(\"envoy.reloadable_features.unified_mux\", \"true\");",
          "",
          "[Removed Lines]",
          "40:                                     : \"DELTA_GRPC\")) {",
          "",
          "[Added Lines]",
          "40:                                     : \"DELTA_GRPC\")),",
          "41:         cluster_creator_(&ConfigHelper::buildStaticCluster) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "85:         ClusterName1, fake_upstreams_[UpstreamIndex1]->localAddress()->ip()->port(),",
          "88:         ClusterName2, fake_upstreams_[UpstreamIndex2]->localAddress()->ip()->port(),",
          "92:     acceptXdsConnection();",
          "",
          "[Removed Lines]",
          "82:     addFakeUpstream(Http::CodecType::HTTP2);",
          "83:     addFakeUpstream(Http::CodecType::HTTP2);",
          "84:     cluster1_ = ConfigHelper::buildStaticCluster(",
          "86:         Network::Test::getLoopbackAddressString(ipVersion()));",
          "87:     cluster2_ = ConfigHelper::buildStaticCluster(",
          "89:         Network::Test::getLoopbackAddressString(ipVersion()));",
          "",
          "[Added Lines]",
          "83:     addFakeUpstream(upstream_codec_type_);",
          "84:     addFakeUpstream(upstream_codec_type_);",
          "85:     cluster1_ = cluster_creator_(",
          "87:         Network::Test::getLoopbackAddressString(ipVersion()), \"ROUND_ROBIN\");",
          "88:     cluster2_ = cluster_creator_(",
          "90:         Network::Test::getLoopbackAddressString(ipVersion()), \"ROUND_ROBIN\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:   envoy::config::cluster::v3::Cluster cluster2_;",
          "135:   bool test_skipped_{true};",
          "136: };",
          "138: INSTANTIATE_TEST_SUITE_P(IpVersionsClientTypeDelta, CdsIntegrationTest,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "137:   Http::CodecType upstream_codec_type_{Http::CodecType::HTTP2};",
          "138:   std::function<envoy::config::cluster::v3::Cluster(const std::string&, int, const std::string&,",
          "139:                                                     const std::string&)>",
          "140:       cluster_creator_;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "309:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "310: }",
          "312: } // namespace",
          "313: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "320: TEST_P(CdsIntegrationTest, CdsClusterDownWithLotsOfIdleConnections) {",
          "321:   constexpr int num_requests = 2000;",
          "323:   upstream_codec_type_ = Http::CodecType::HTTP1;",
          "326:   cluster_creator_ = &ConfigHelper::buildH1ClusterWithHighCircuitBreakersLimits;",
          "327:   config_helper_.addConfigModifier(",
          "328:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "329:               hcm) -> void {",
          "330:         hcm.mutable_route_config()",
          "331:             ->mutable_virtual_hosts(0)",
          "332:             ->mutable_routes(0)",
          "333:             ->mutable_route()",
          "334:             ->mutable_timeout()",
          "335:             ->set_seconds(600);",
          "336:         hcm.mutable_route_config()",
          "337:             ->mutable_virtual_hosts(0)",
          "338:             ->mutable_routes(0)",
          "339:             ->mutable_route()",
          "340:             ->mutable_idle_timeout()",
          "341:             ->set_seconds(600);",
          "342:       });",
          "343:   initialize();",
          "344:   std::vector<IntegrationStreamDecoderPtr> responses;",
          "345:   std::vector<FakeHttpConnectionPtr> upstream_connections;",
          "346:   std::vector<FakeStreamPtr> upstream_requests;",
          "347:   codec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));",
          "349:   for (int i = 0; i < num_requests; ++i) {",
          "350:     Http::TestRequestHeaderMapImpl request_headers{{\":method\", \"GET\"},",
          "351:                                                    {\":path\", \"/cluster1\"},",
          "352:                                                    {\":scheme\", \"http\"},",
          "353:                                                    {\":authority\", \"host\"},",
          "354:                                                    {\"x-lyft-user-id\", absl::StrCat(i)}};",
          "356:     auto response = codec_client_->makeHeaderOnlyRequest(request_headers);",
          "357:     responses.push_back(std::move(response));",
          "359:     FakeHttpConnectionPtr fake_upstream_connection;",
          "360:     waitForNextUpstreamConnection({UpstreamIndex1}, TestUtility::DefaultTimeout,",
          "361:                                   fake_upstream_connection);",
          "363:     FakeStreamPtr upstream_request;",
          "364:     AssertionResult result =",
          "365:         fake_upstream_connection->waitForNewStream(*dispatcher_, upstream_request);",
          "366:     RELEASE_ASSERT(result, result.message());",
          "368:     result = upstream_request->waitForEndStream(*dispatcher_);",
          "369:     RELEASE_ASSERT(result, result.message());",
          "370:     upstream_connections.push_back(std::move(fake_upstream_connection));",
          "371:     upstream_requests.push_back(std::move(upstream_request));",
          "372:   }",
          "375:   for (int i = 0; i < num_requests; ++i) {",
          "377:     upstream_requests[i]->encodeHeaders(default_response_headers_, true);",
          "379:     RELEASE_ASSERT(responses[i]->waitForEndStream(), \"unexpected timeout\");",
          "380:     ASSERT_TRUE(responses[i]->complete());",
          "381:     EXPECT_EQ(\"200\", responses[i]->headers().getStatusValue());",
          "382:   }",
          "384:   test_server_->waitForCounterGe(\"cluster_manager.cluster_added\", 1);",
          "387:   EXPECT_TRUE(compareDiscoveryRequest(Config::TypeUrl::get().Cluster, \"55\", {}, {}, {}));",
          "388:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(Config::TypeUrl::get().Cluster, {}, {},",
          "389:                                                              {ClusterName1}, \"42\");",
          "392:   test_server_->waitForCounterGe(\"cluster_manager.cluster_removed\", 1);",
          "395:   for (int i = 0; i < num_requests; ++i) {",
          "396:     AssertionResult result = upstream_connections[i]->close();",
          "397:     RELEASE_ASSERT(result, result.message());",
          "398:     result = upstream_connections[i]->waitForDisconnect();",
          "399:     RELEASE_ASSERT(result, result.message());",
          "400:   }",
          "401:   upstream_connections.clear();",
          "402:   cleanupUpstreamAndDownstream();",
          "403:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "404: }",
          "412: TEST_P(CdsIntegrationTest, DISABLED_CdsClusterDownWithLotsOfConnectingConnections) {",
          "416:   constexpr int num_requests = 64;",
          "418:   upstream_codec_type_ = Http::CodecType::HTTP1;",
          "419:   cluster_creator_ = &ConfigHelper::buildH1ClusterWithHighCircuitBreakersLimits;",
          "420:   config_helper_.addConfigModifier(",
          "421:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "422:               hcm) -> void {",
          "423:         hcm.mutable_route_config()",
          "424:             ->mutable_virtual_hosts(0)",
          "425:             ->mutable_routes(0)",
          "426:             ->mutable_route()",
          "427:             ->mutable_timeout()",
          "428:             ->set_seconds(600);",
          "429:         hcm.mutable_route_config()",
          "430:             ->mutable_virtual_hosts(0)",
          "431:             ->mutable_routes(0)",
          "432:             ->mutable_route()",
          "433:             ->mutable_idle_timeout()",
          "434:             ->set_seconds(600);",
          "435:       });",
          "436:   initialize();",
          "437:   test_server_->waitForCounterGe(\"cluster_manager.cluster_added\", 1);",
          "438:   std::vector<IntegrationStreamDecoderPtr> responses;",
          "439:   codec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));",
          "442:   fake_upstreams_[UpstreamIndex1]->dispatcher()->exit();",
          "443:   for (int i = 0; i < num_requests; ++i) {",
          "444:     Http::TestRequestHeaderMapImpl request_headers{{\":method\", \"GET\"},",
          "445:                                                    {\":path\", \"/cluster1\"},",
          "446:                                                    {\":scheme\", \"http\"},",
          "447:                                                    {\":authority\", \"host\"},",
          "448:                                                    {\"x-lyft-user-id\", absl::StrCat(i)}};",
          "450:     auto response = codec_client_->makeHeaderOnlyRequest(request_headers);",
          "451:     responses.push_back(std::move(response));",
          "452:   }",
          "455:   test_server_->waitForCounterEq(\"cluster.cluster_1.upstream_cx_total\", num_requests);",
          "458:   EXPECT_TRUE(compareDiscoveryRequest(Config::TypeUrl::get().Cluster, \"55\", {}, {}, {}));",
          "459:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(Config::TypeUrl::get().Cluster, {}, {},",
          "460:                                                              {ClusterName1}, \"42\");",
          "463:   test_server_->waitForCounterGe(\"cluster_manager.cluster_removed\", 1);",
          "465:   cleanupUpstreamAndDownstream();",
          "466:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "470: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4aaf9593152c6996b9da384c8918e9ad4f0abd4d",
      "candidate_info": {
        "commit_hash": "4aaf9593152c6996b9da384c8918e9ad4f0abd4d",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/4aaf9593152c6996b9da384c8918e9ad4f0abd4d",
        "files": [
          "docs/root/version_history/current.rst",
          "source/common/conn_pool/BUILD",
          "source/common/conn_pool/conn_pool_base.cc",
          "source/common/conn_pool/conn_pool_base.h",
          "test/config/utility.cc",
          "test/config/utility.h",
          "test/integration/BUILD",
          "test/integration/cds_integration_test.cc"
        ],
        "message": "[1.20] CVE-2022-23606\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>",
        "before_after_code_files": [
          "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc",
          "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h",
          "test/config/utility.cc||test/config/utility.cc",
          "test/config/utility.h||test/config/utility.h",
          "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc",
            "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h",
            "test/config/utility.cc||test/config/utility.cc",
            "test/config/utility.h||test/config/utility.h",
            "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
          ],
          "candidate": [
            "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc",
            "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h",
            "test/config/utility.cc||test/config/utility.cc",
            "test/config/utility.h||test/config/utility.h",
            "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/conn_pool/conn_pool_base.cc||source/common/conn_pool/conn_pool_base.cc": [
          "File: source/common/conn_pool/conn_pool_base.cc -> source/common/conn_pool/conn_pool_base.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"source/common/conn_pool/conn_pool_base.h\"",
          "3: #include \"source/common/common/assert.h\"",
          "4: #include \"source/common/network/transport_socket_options_impl.h\"",
          "5: #include \"source/common/runtime/runtime_features.h\"",
          "6: #include \"source/common/stats/timespan_impl.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include \"source/common/common/debug_recursion_checker.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "333: void ConnPoolImplBase::addIdleCallbackImpl(Instance::IdleCb cb) { idle_callbacks_.push_back(cb); }",
          "335: void ConnPoolImplBase::closeIdleConnectionsForDrainingPool() {",
          "337:   std::list<ActiveClient*> to_close;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "337:   Common::AutoDebugRecursionChecker assert_not_in(recursion_checker_);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "387:          connecting_clients_.empty();",
          "388: }",
          "395:   if (isIdleImpl()) {",
          "396:     ENVOY_LOG(debug, \"invoking idle callbacks - is_draining_for_deletion_={}\",",
          "397:               is_draining_for_deletion_);",
          "",
          "[Removed Lines]",
          "390: void ConnPoolImplBase::checkForIdleAndCloseIdleConnsIfDraining() {",
          "391:   if (is_draining_for_deletion_) {",
          "392:     closeIdleConnectionsForDrainingPool();",
          "393:   }",
          "",
          "[Added Lines]",
          "393: void ConnPoolImplBase::checkForIdleAndNotify() {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "401:   }",
          "402: }",
          "404: void ConnPoolImplBase::onConnectionEvent(ActiveClient& client, absl::string_view failure_reason,",
          "405:                                          Network::ConnectionEvent event) {",
          "406:   if (client.state() == ActiveClient::State::CONNECTING) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403: void ConnPoolImplBase::checkForIdleAndCloseIdleConnsIfDraining() {",
          "404:   if (is_draining_for_deletion_) {",
          "405:     closeIdleConnectionsForDrainingPool();",
          "406:   }",
          "408:   checkForIdleAndNotify();",
          "409: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "460:     dispatcher_.deferredDelete(client.removeFromList(owningList(client.state())));",
          "464:     client.setState(ActiveClient::State::CLOSED);",
          "",
          "[Removed Lines]",
          "462:     checkForIdleAndCloseIdleConnsIfDraining();",
          "",
          "[Added Lines]",
          "477:     checkForIdleAndNotify();",
          "",
          "---------------"
        ],
        "source/common/conn_pool/conn_pool_base.h||source/common/conn_pool/conn_pool_base.h": [
          "File: source/common/conn_pool/conn_pool_base.h -> source/common/conn_pool/conn_pool_base.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include \"envoy/stats/timespan.h\"",
          "7: #include \"envoy/upstream/cluster_manager.h\"",
          "9: #include \"source/common/common/dump_state_utils.h\"",
          "10: #include \"source/common/common/linked_object.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9: #include \"source/common/common/debug_recursion_checker.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:   void onConnectionEvent(ActiveClient& client, absl::string_view failure_reason,",
          "202:                          Network::ConnectionEvent event);",
          "205:   void checkForIdleAndCloseIdleConnsIfDraining();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:   void checkForIdleAndNotify();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "346:   void onUpstreamReady();",
          "347:   Event::SchedulableCallbackPtr upstream_ready_cb_;",
          "348: };",
          "350: } // namespace ConnectionPool",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:   Common::DebugRecursionChecker recursion_checker_;",
          "",
          "---------------"
        ],
        "test/config/utility.cc||test/config/utility.cc": [
          "File: test/config/utility.cc -> test/config/utility.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "432:                   name, name, address, port, lb_policy));",
          "433: }",
          "435: envoy::config::cluster::v3::Cluster ConfigHelper::buildCluster(const std::string& name,",
          "436:                                                                const std::string& lb_policy) {",
          "437:   API_NO_BOOST(envoy::config::cluster::v3::Cluster) cluster;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "435: envoy::config::cluster::v3::Cluster ConfigHelper::buildH1ClusterWithHighCircuitBreakersLimits(",
          "436:     const std::string& name, int port, const std::string& address, const std::string& lb_policy) {",
          "437:   return TestUtility::parseYaml<envoy::config::cluster::v3::Cluster>(",
          "438:       fmt::format(R\"EOF(",
          "439:       name: {}",
          "440:       connect_timeout: 50s",
          "441:       type: STATIC",
          "442:       circuit_breakers:",
          "443:         thresholds:",
          "444:         - priority: DEFAULT",
          "445:           max_connections: 10000",
          "446:           max_pending_requests: 10000",
          "447:           max_requests: 10000",
          "448:           max_retries: 10000",
          "449:       load_assignment:",
          "450:         cluster_name: {}",
          "451:         endpoints:",
          "452:         - lb_endpoints:",
          "453:           - endpoint:",
          "454:               address:",
          "455:                 socket_address:",
          "456:                   address: {}",
          "457:                   port_value: {}",
          "458:       lb_policy: {}",
          "459:     )EOF\",",
          "460:                   name, name, address, port, lb_policy));",
          "461: }",
          "",
          "---------------"
        ],
        "test/config/utility.h||test/config/utility.h": [
          "File: test/config/utility.h -> test/config/utility.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:   buildStaticCluster(const std::string& name, int port, const std::string& address,",
          "154:                      const std::string& lb_policy = \"ROUND_ROBIN\");",
          "157:   static envoy::config::cluster::v3::Cluster",
          "158:   buildCluster(const std::string& name, const std::string& lb_policy = \"ROUND_ROBIN\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "156:   static envoy::config::cluster::v3::Cluster",
          "157:   buildH1ClusterWithHighCircuitBreakersLimits(const std::string& name, int port,",
          "158:                                               const std::string& address,",
          "159:                                               const std::string& lb_policy = \"ROUND_ROBIN\");",
          "",
          "---------------"
        ],
        "test/integration/cds_integration_test.cc||test/integration/cds_integration_test.cc": [
          "File: test/integration/cds_integration_test.cc -> test/integration/cds_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:   CdsIntegrationTest()",
          "35:       : HttpIntegrationTest(Http::CodecType::HTTP2, ipVersion(),",
          "36:                             ConfigHelper::discoveredClustersBootstrap(",
          "38:     use_lds_ = false;",
          "39:     sotw_or_delta_ = sotwOrDelta();",
          "40:   }",
          "",
          "[Removed Lines]",
          "37:                                 sotwOrDelta() == Grpc::SotwOrDelta::Sotw ? \"GRPC\" : \"DELTA_GRPC\")) {",
          "",
          "[Added Lines]",
          "37:                                 sotwOrDelta() == Grpc::SotwOrDelta::Sotw ? \"GRPC\" : \"DELTA_GRPC\")),",
          "38:         cluster_creator_(&ConfigHelper::buildStaticCluster) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:         ClusterName1, fake_upstreams_[UpstreamIndex1]->localAddress()->ip()->port(),",
          "81:         ClusterName2, fake_upstreams_[UpstreamIndex2]->localAddress()->ip()->port(),",
          "85:     acceptXdsConnection();",
          "",
          "[Removed Lines]",
          "75:     addFakeUpstream(Http::CodecType::HTTP2);",
          "76:     addFakeUpstream(Http::CodecType::HTTP2);",
          "77:     cluster1_ = ConfigHelper::buildStaticCluster(",
          "79:         Network::Test::getLoopbackAddressString(ipVersion()));",
          "80:     cluster2_ = ConfigHelper::buildStaticCluster(",
          "82:         Network::Test::getLoopbackAddressString(ipVersion()));",
          "",
          "[Added Lines]",
          "76:     addFakeUpstream(upstream_codec_type_);",
          "77:     addFakeUpstream(upstream_codec_type_);",
          "78:     cluster1_ = cluster_creator_(",
          "80:         Network::Test::getLoopbackAddressString(ipVersion()), \"ROUND_ROBIN\");",
          "81:     cluster2_ = cluster_creator_(",
          "83:         Network::Test::getLoopbackAddressString(ipVersion()), \"ROUND_ROBIN\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:   envoy::config::cluster::v3::Cluster cluster2_;",
          "128:   bool test_skipped_{true};",
          "129: };",
          "131: INSTANTIATE_TEST_SUITE_P(IpVersionsClientTypeDelta, CdsIntegrationTest,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:   Http::CodecType upstream_codec_type_{Http::CodecType::HTTP2};",
          "131:   std::function<envoy::config::cluster::v3::Cluster(const std::string&, int, const std::string&,",
          "132:                                                     const std::string&)>",
          "133:       cluster_creator_;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "301:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "302: }",
          "304: } // namespace",
          "305: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "312: TEST_P(CdsIntegrationTest, CdsClusterDownWithLotsOfIdleConnections) {",
          "313:   constexpr int num_requests = 2000;",
          "315:   upstream_codec_type_ = Http::CodecType::HTTP1;",
          "318:   cluster_creator_ = &ConfigHelper::buildH1ClusterWithHighCircuitBreakersLimits;",
          "319:   config_helper_.addConfigModifier(",
          "320:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "321:               hcm) -> void {",
          "322:         hcm.mutable_route_config()",
          "323:             ->mutable_virtual_hosts(0)",
          "324:             ->mutable_routes(0)",
          "325:             ->mutable_route()",
          "326:             ->mutable_timeout()",
          "327:             ->set_seconds(600);",
          "328:         hcm.mutable_route_config()",
          "329:             ->mutable_virtual_hosts(0)",
          "330:             ->mutable_routes(0)",
          "331:             ->mutable_route()",
          "332:             ->mutable_idle_timeout()",
          "333:             ->set_seconds(600);",
          "334:       });",
          "335:   initialize();",
          "336:   std::vector<IntegrationStreamDecoderPtr> responses;",
          "337:   std::vector<FakeHttpConnectionPtr> upstream_connections;",
          "338:   std::vector<FakeStreamPtr> upstream_requests;",
          "339:   codec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));",
          "341:   for (int i = 0; i < num_requests; ++i) {",
          "342:     Http::TestRequestHeaderMapImpl request_headers{{\":method\", \"GET\"},",
          "343:                                                    {\":path\", \"/cluster1\"},",
          "344:                                                    {\":scheme\", \"http\"},",
          "345:                                                    {\":authority\", \"host\"},",
          "346:                                                    {\"x-lyft-user-id\", absl::StrCat(i)}};",
          "348:     auto response = codec_client_->makeHeaderOnlyRequest(request_headers);",
          "349:     responses.push_back(std::move(response));",
          "351:     FakeHttpConnectionPtr fake_upstream_connection;",
          "352:     waitForNextUpstreamConnection({UpstreamIndex1}, TestUtility::DefaultTimeout,",
          "353:                                   fake_upstream_connection);",
          "355:     FakeStreamPtr upstream_request;",
          "356:     AssertionResult result =",
          "357:         fake_upstream_connection->waitForNewStream(*dispatcher_, upstream_request);",
          "358:     RELEASE_ASSERT(result, result.message());",
          "360:     result = upstream_request->waitForEndStream(*dispatcher_);",
          "361:     RELEASE_ASSERT(result, result.message());",
          "362:     upstream_connections.push_back(std::move(fake_upstream_connection));",
          "363:     upstream_requests.push_back(std::move(upstream_request));",
          "364:   }",
          "367:   for (int i = 0; i < num_requests; ++i) {",
          "369:     upstream_requests[i]->encodeHeaders(default_response_headers_, true);",
          "371:     RELEASE_ASSERT(responses[i]->waitForEndStream(), \"unexpected timeout\");",
          "372:     ASSERT_TRUE(responses[i]->complete());",
          "373:     EXPECT_EQ(\"200\", responses[i]->headers().getStatusValue());",
          "374:   }",
          "376:   test_server_->waitForCounterGe(\"cluster_manager.cluster_added\", 1);",
          "379:   EXPECT_TRUE(compareDiscoveryRequest(Config::TypeUrl::get().Cluster, \"55\", {}, {}, {}));",
          "380:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(Config::TypeUrl::get().Cluster, {}, {},",
          "381:                                                              {ClusterName1}, \"42\");",
          "384:   test_server_->waitForCounterGe(\"cluster_manager.cluster_removed\", 1);",
          "387:   for (int i = 0; i < num_requests; ++i) {",
          "388:     AssertionResult result = upstream_connections[i]->close();",
          "389:     RELEASE_ASSERT(result, result.message());",
          "390:     result = upstream_connections[i]->waitForDisconnect();",
          "391:     RELEASE_ASSERT(result, result.message());",
          "392:   }",
          "393:   upstream_connections.clear();",
          "394:   cleanupUpstreamAndDownstream();",
          "395:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "396: }",
          "404: TEST_P(CdsIntegrationTest, DISABLED_CdsClusterDownWithLotsOfConnectingConnections) {",
          "408:   constexpr int num_requests = 64;",
          "410:   upstream_codec_type_ = Http::CodecType::HTTP1;",
          "411:   cluster_creator_ = &ConfigHelper::buildH1ClusterWithHighCircuitBreakersLimits;",
          "412:   config_helper_.addConfigModifier(",
          "413:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "414:               hcm) -> void {",
          "415:         hcm.mutable_route_config()",
          "416:             ->mutable_virtual_hosts(0)",
          "417:             ->mutable_routes(0)",
          "418:             ->mutable_route()",
          "419:             ->mutable_timeout()",
          "420:             ->set_seconds(600);",
          "421:         hcm.mutable_route_config()",
          "422:             ->mutable_virtual_hosts(0)",
          "423:             ->mutable_routes(0)",
          "424:             ->mutable_route()",
          "425:             ->mutable_idle_timeout()",
          "426:             ->set_seconds(600);",
          "427:       });",
          "428:   initialize();",
          "429:   test_server_->waitForCounterGe(\"cluster_manager.cluster_added\", 1);",
          "430:   std::vector<IntegrationStreamDecoderPtr> responses;",
          "431:   codec_client_ = makeHttpConnection(makeClientConnection((lookupPort(\"http\"))));",
          "434:   fake_upstreams_[UpstreamIndex1]->dispatcher()->exit();",
          "435:   for (int i = 0; i < num_requests; ++i) {",
          "436:     Http::TestRequestHeaderMapImpl request_headers{{\":method\", \"GET\"},",
          "437:                                                    {\":path\", \"/cluster1\"},",
          "438:                                                    {\":scheme\", \"http\"},",
          "439:                                                    {\":authority\", \"host\"},",
          "440:                                                    {\"x-lyft-user-id\", absl::StrCat(i)}};",
          "442:     auto response = codec_client_->makeHeaderOnlyRequest(request_headers);",
          "443:     responses.push_back(std::move(response));",
          "444:   }",
          "447:   test_server_->waitForCounterEq(\"cluster.cluster_1.upstream_cx_total\", num_requests);",
          "450:   EXPECT_TRUE(compareDiscoveryRequest(Config::TypeUrl::get().Cluster, \"55\", {}, {}, {}));",
          "451:   sendDiscoveryResponse<envoy::config::cluster::v3::Cluster>(Config::TypeUrl::get().Cluster, {}, {},",
          "452:                                                              {ClusterName1}, \"42\");",
          "455:   test_server_->waitForCounterGe(\"cluster_manager.cluster_removed\", 1);",
          "457:   cleanupUpstreamAndDownstream();",
          "458:   ASSERT_TRUE(codec_client_->waitForDisconnect());",
          "462: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}