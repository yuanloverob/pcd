{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f4b1d8dc17dcd01eb01f3cafb3614d37eee31e56",
      "candidate_info": {
        "commit_hash": "f4b1d8dc17dcd01eb01f3cafb3614d37eee31e56",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f4b1d8dc17dcd01eb01f3cafb3614d37eee31e56",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c"
        ],
        "message": "Do not allow generated columns in the PRIMARY KEY.\n\nFossilOrigin-Name: 1a54743a3d327efc8ecc45b9fde91ddfea3fca36408f9b753453c31f2e4cc69c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d38176e93a628e03f1bd8b689fbc4152a1495388da917c2d89cefed04353d2d6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1456:   }",
          "1457: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1462: static void makeColumnPartOfPrimaryKey(Parse *pParse, Column *pCol){",
          "1463:   pCol->colFlags |= COLFLAG_PRIMKEY;",
          "1464: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1465:   if( pCol->colFlags & COLFLAG_GENERATED ){",
          "1466:     testcase( pCol->colFlags & COLFLAG_VIRTUAL );",
          "1467:     testcase( pCol->colFlags & COLFLAG_STORED );",
          "1468:     sqlite3ErrorMsg(pParse,",
          "1469:       \"generated columns cannot be part of the PRIMARY KEY\");",
          "1470:   }",
          "1471: #endif",
          "1472: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1495:   if( pList==0 ){",
          "1496:     iCol = pTab->nCol - 1;",
          "1497:     pCol = &pTab->aCol[iCol];",
          "1499:     nTerm = 1;",
          "1500:   }else{",
          "1501:     nTerm = pList->nExpr;",
          "",
          "[Removed Lines]",
          "1498:     pCol->colFlags |= COLFLAG_PRIMKEY;",
          "",
          "[Added Lines]",
          "1513:     makeColumnPartOfPrimaryKey(pParse, pCol);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1508:         for(iCol=0; iCol<pTab->nCol; iCol++){",
          "1509:           if( sqlite3StrICmp(zCName, pTab->aCol[iCol].zName)==0 ){",
          "1510:             pCol = &pTab->aCol[iCol];",
          "1512:             break;",
          "1513:           }",
          "1514:         }",
          "",
          "[Removed Lines]",
          "1511:             pCol->colFlags |= COLFLAG_PRIMKEY;",
          "",
          "[Added Lines]",
          "1526:             makeColumnPartOfPrimaryKey(pParse, pCol);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0f162020ec27bd7cc93c17f3f7e0e91c72f51e4",
      "candidate_info": {
        "commit_hash": "c0f162020ec27bd7cc93c17f3f7e0e91c72f51e4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c0f162020ec27bd7cc93c17f3f7e0e91c72f51e4",
        "files": [
          "ext/rtree/rtree.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a possible memory leak when trying to UPDATE a corrupt RTREE index.\n\nFossilOrigin-Name: 63eb803dbc27077007dbee8def659d1523724eb73f1def1cdb68027e5c20843a",
        "before_after_code_files": [
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "717:       pNode->pNext = 0;",
          "718:       rc = sqlite3_blob_read(pRtree->pNodeBlob, pNode->zData,",
          "719:                              pRtree->iNodeSize, 0);",
          "721:     }",
          "722:   }",
          "",
          "[Removed Lines]",
          "720:       nodeReference(pParent);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "749:   if( rc==SQLITE_OK ){",
          "750:     if( pNode!=0 ){",
          "751:       nodeHashInsert(pRtree, pNode);",
          "752:     }else{",
          "753:       rc = SQLITE_CORRUPT_VTAB;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "750:       nodeReference(pParent);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 673a7dd698eca05bb2909fa01f962a0667361732a6d0e61cf7780ead4a07c967",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7a5e498400ae8c533c53aa37a62194bd734b422",
      "candidate_info": {
        "commit_hash": "d7a5e498400ae8c533c53aa37a62194bd734b422",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d7a5e498400ae8c533c53aa37a62194bd734b422",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/pcache1.c"
        ],
        "message": "Back out the expansion of the temporary buffer size from [32754ca6f86da816] and replace it with an explicit test for buffer overreads.\n\nFossilOrigin-Name: 8ba3d9f38090c4bbbcffba1930e5c26f69ff61f49b72a4a5a59253d37341380f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/pcache1.c||src/pcache1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f8b781cf41800e9f61a1c5376404a97e76a2bbbcaa17396d42be62f731363947",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6762:   for(i=0; i<nCell; i++){",
          "6763:     u8 *pCell = apCell[i];",
          "6764:     if( SQLITE_WITHIN(pCell,aData,pEnd) ){",
          "6765:       pCell = &pTmp[pCell - aData];",
          "6766:     }",
          "6767:     pData -= szCell[i];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6765:       if( ((uptr)(pCell+szCell[i]))>(uptr)pEnd ) return SQLITE_CORRUPT_BKPT;",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "484: }",
          "",
          "[Removed Lines]",
          "483:   return pcache1Alloc(sz + 32);",
          "",
          "[Added Lines]",
          "483:   return pcache1Alloc(sz);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd2d9a3d5a2648c3b0d2053db9e9aa60cc2be3e7",
      "candidate_info": {
        "commit_hash": "dd2d9a3d5a2648c3b0d2053db9e9aa60cc2be3e7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dd2d9a3d5a2648c3b0d2053db9e9aa60cc2be3e7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/wherecode.c"
        ],
        "message": "Strive to prevent harmless compiler warnings in GCC 4.8.5.\n\nFossilOrigin-Name: 8b6691f619ed9a56f6aecbd878ebb447c40984f8767508b248494fd9ec68fbaa",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 82062351a62f4ccc438a2b47a22ee581bd030dec952fecd610f360a25002a5ea",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7989:       while( i==cntOldNext ){",
          "7990:         iOld++;",
          "7991:         assert( iOld<nNew || iOld<nOld );",
          "7992:         pOld = iOld<nNew ? apNew[iOld] : apOld[iOld];",
          "7993:         cntOldNext += pOld->nCell + pOld->nOverflow + !leafData;",
          "7994:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7992:         assert( iOld>=0 && iOld<NB );",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2115:     sqlite3VdbeGoto(v, pLevel->addrBrk);",
          "2116:     sqlite3VdbeResolveLabel(v, iLoopBody);",
          "2119:     if( !untestedTerms ) disableTerm(pLevel, pTerm);",
          "2120:   }else",
          "",
          "[Removed Lines]",
          "2118:     if( pWInfo->nLevel>1 ) sqlite3StackFree(db, pOrTab);",
          "",
          "[Added Lines]",
          "2118:     if( pWInfo->nLevel>1 ){ sqlite3StackFree(db, pOrTab); }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5eae1d1b33b376fab31497cbdb129e2e065568c8",
      "candidate_info": {
        "commit_hash": "5eae1d1b33b376fab31497cbdb129e2e065568c8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5eae1d1b33b376fab31497cbdb129e2e065568c8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/sqliteInt.h",
          "src/test1.c",
          "src/where.c",
          "src/whereexpr.c"
        ],
        "message": "More legacy STAT3 code removed.\n\nFossilOrigin-Name: 845d2f17de5b4740f95884307d9efec3223737bb0f2c4a74693666caf5f61c21",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c",
          "src/where.c||src/where.c",
          "src/whereexpr.c||src/whereexpr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1e17ea2fd1df4ad49138c787c8fe3207dd0c25c93f9001d52a9b69f8c12e841c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1684:     nSample = sqlite3_column_int(pStmt, 1);",
          "1685:     pIdx = findIndexOrPrimaryKey(db, zIndex, zDb);",
          "1686:     assert( pIdx==0 || pIdx->nSample==0 );",
          "1690:     assert( !HasRowid(pIdx->pTable) || pIdx->nColumn==pIdx->nKeyCol+1 );",
          "1691:     if( !HasRowid(pIdx->pTable) && IsPrimaryKeyIndex(pIdx) ){",
          "1692:       nIdxCol = pIdx->nKeyCol;",
          "",
          "[Removed Lines]",
          "1689:     if( pIdx==0 || pIdx->nSample ) continue;",
          "",
          "[Added Lines]",
          "1687:     if( pIdx==0 ) continue;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7173:     { \"order-by-idx-join\",   SQLITE_OrderByIdxJoin },",
          "7174:     { \"transitive\",          SQLITE_Transitive     },",
          "7175:     { \"omit-noop-join\",      SQLITE_OmitNoopJoin   },",
          "7177:     { \"skip-scan\",           SQLITE_SkipScan       },",
          "7178:   };",
          "",
          "[Removed Lines]",
          "7176:     { \"stat4\",               SQLITE_Stat34         },",
          "",
          "[Added Lines]",
          "7176:     { \"stat4\",               SQLITE_Stat4          },",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1474:   Index *p = pLoop->u.btree.pIndex;",
          "1475:   int nEq = pLoop->u.btree.nEq;",
          "1479:   ){",
          "1480:     if( nEq==pBuilder->nRecValid ){",
          "1481:       UnpackedRecord *pRec = pBuilder->pRec;",
          "",
          "[Removed Lines]",
          "1477:   if( p->nSample>0 && nEq<p->nSampleCol",
          "1478:    && OptimizationEnabled(pParse->db, SQLITE_Stat34)",
          "",
          "[Added Lines]",
          "1477:   if( p->nSample>0 && ALWAYS(nEq<p->nSampleCol)",
          "1478:    && OptimizationEnabled(pParse->db, SQLITE_Stat4)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2633:          && pProbe->nSample",
          "2634:          && pNew->u.btree.nEq<=pProbe->nSampleCol",
          "2635:          && ((eOp & WO_IN)==0 || !ExprHasProperty(pTerm->pExpr, EP_xIsSelect))",
          "2637:         ){",
          "2638:           Expr *pExpr = pTerm->pExpr;",
          "2639:           if( (eOp & (WO_EQ|WO_ISNULL|WO_IS))!=0 ){",
          "",
          "[Removed Lines]",
          "2636:          && OptimizationEnabled(db, SQLITE_Stat34)",
          "",
          "[Added Lines]",
          "2636:          && OptimizationEnabled(db, SQLITE_Stat4)",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1393:    && pExpr->pLeft->op==TK_COLUMN",
          "1394:    && pExpr->pLeft->iColumn>=0",
          "1395:    && !ExprHasProperty(pExpr, EP_FromJoin)",
          "1397:   ){",
          "1398:     Expr *pNewExpr;",
          "1399:     Expr *pLeft = pExpr->pLeft;",
          "",
          "[Removed Lines]",
          "1396:    && OptimizationEnabled(db, SQLITE_Stat34)",
          "",
          "[Added Lines]",
          "1396:    && OptimizationEnabled(db, SQLITE_Stat4)",
          "",
          "---------------"
        ]
      }
    }
  ]
}