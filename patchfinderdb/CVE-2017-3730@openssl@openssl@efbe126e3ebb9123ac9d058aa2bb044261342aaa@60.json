{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8061fdc8d3048220a758ad1304669944810ac386",
      "candidate_info": {
        "commit_hash": "8061fdc8d3048220a758ad1304669944810ac386",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/8061fdc8d3048220a758ad1304669944810ac386",
        "files": [
          "test/recipes/80-test_ssl_new.t",
          "test/ssl-tests/18-dtls-renegotiate.conf",
          "test/ssl-tests/18-dtls-renegotiate.conf.in"
        ],
        "message": "Add DTLS renegotiation tests\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit f9b1b6644a3a8fc6d617625ad979ee61cb67d381)",
        "before_after_code_files": [
          "test/recipes/80-test_ssl_new.t||test/recipes/80-test_ssl_new.t",
          "test/ssl-tests/18-dtls-renegotiate.conf||test/ssl-tests/18-dtls-renegotiate.conf",
          "test/ssl-tests/18-dtls-renegotiate.conf.in||test/ssl-tests/18-dtls-renegotiate.conf.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/80-test_ssl_new.t||test/recipes/80-test_ssl_new.t": [
          "File: test/recipes/80-test_ssl_new.t -> test/recipes/80-test_ssl_new.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "30: # We hard-code the number of tests to double-check that the globbing above",
          "31: # finds all files as expected.",
          "34: # Some test results depend on the configuration of enabled protocols. We only",
          "35: # verify generated sources in the default configuration.",
          "",
          "[Removed Lines]",
          "32: plan tests => 17;  # = scalar @conf_srcs",
          "",
          "[Added Lines]",
          "32: plan tests => 18;  # = scalar @conf_srcs",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "73:   \"14-curves.conf\" => disabled(\"tls1_2\") || $no_ec || $no_ec2m,",
          "74:   \"15-certstatus.conf\" => $no_ocsp,",
          "75:   \"16-dtls-certstatus.conf\" => $no_dtls || $no_ocsp,",
          "76: );",
          "78: foreach my $conf (@conf_files) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76:   \"18-dtls-renegotiate.conf\" => $no_dtls,",
          "",
          "---------------"
        ],
        "test/ssl-tests/18-dtls-renegotiate.conf||test/ssl-tests/18-dtls-renegotiate.conf": [
          "File: test/ssl-tests/18-dtls-renegotiate.conf -> test/ssl-tests/18-dtls-renegotiate.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # Generated with generate_ssl_tests.pl",
          "3: num_tests = 3",
          "5: test-0 = 0-renegotiate-client-no-resume",
          "6: test-1 = 1-renegotiate-client-resume",
          "7: test-2 = 2-renegotiate-server-resume",
          "8: # ===========================================================",
          "10: [0-renegotiate-client-no-resume]",
          "11: ssl_conf = 0-renegotiate-client-no-resume-ssl",
          "13: [0-renegotiate-client-no-resume-ssl]",
          "14: server = 0-renegotiate-client-no-resume-server",
          "15: client = 0-renegotiate-client-no-resume-client",
          "17: [0-renegotiate-client-no-resume-server]",
          "18: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "19: CipherString = DEFAULT",
          "20: Options = NoResumptionOnRenegotiation",
          "21: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "23: [0-renegotiate-client-no-resume-client]",
          "24: CipherString = DEFAULT",
          "25: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "26: VerifyMode = Peer",
          "28: [test-0]",
          "29: ExpectedResult = Success",
          "30: HandshakeMode = RenegotiateClient",
          "31: Method = DTLS",
          "32: ResumptionExpected = No",
          "35: # ===========================================================",
          "37: [1-renegotiate-client-resume]",
          "38: ssl_conf = 1-renegotiate-client-resume-ssl",
          "40: [1-renegotiate-client-resume-ssl]",
          "41: server = 1-renegotiate-client-resume-server",
          "42: client = 1-renegotiate-client-resume-client",
          "44: [1-renegotiate-client-resume-server]",
          "45: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "46: CipherString = DEFAULT",
          "47: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "49: [1-renegotiate-client-resume-client]",
          "50: CipherString = DEFAULT",
          "51: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "52: VerifyMode = Peer",
          "54: [test-1]",
          "55: ExpectedResult = Success",
          "56: HandshakeMode = RenegotiateClient",
          "57: Method = DTLS",
          "58: ResumptionExpected = Yes",
          "61: # ===========================================================",
          "63: [2-renegotiate-server-resume]",
          "64: ssl_conf = 2-renegotiate-server-resume-ssl",
          "66: [2-renegotiate-server-resume-ssl]",
          "67: server = 2-renegotiate-server-resume-server",
          "68: client = 2-renegotiate-server-resume-client",
          "70: [2-renegotiate-server-resume-server]",
          "71: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "72: CipherString = DEFAULT",
          "73: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "75: [2-renegotiate-server-resume-client]",
          "76: CipherString = DEFAULT",
          "77: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "78: VerifyMode = Peer",
          "80: [test-2]",
          "81: ExpectedResult = Success",
          "82: HandshakeMode = RenegotiateServer",
          "83: Method = DTLS",
          "84: ResumptionExpected = No",
          "",
          "---------------"
        ],
        "test/ssl-tests/18-dtls-renegotiate.conf.in||test/ssl-tests/18-dtls-renegotiate.conf.in": [
          "File: test/ssl-tests/18-dtls-renegotiate.conf.in -> test/ssl-tests/18-dtls-renegotiate.conf.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # -*- mode: perl; -*-",
          "2: # Copyright 2016-2016 The OpenSSL Project Authors. All Rights Reserved.",
          "3: #",
          "4: # Licensed under the OpenSSL license (the \"License\").  You may not use",
          "5: # this file except in compliance with the License.  You can obtain a copy",
          "6: # in the file LICENSE in the source distribution or at",
          "7: # https://www.openssl.org/source/license.html",
          "10: ## Test Renegotiation",
          "12: use strict;",
          "13: use warnings;",
          "15: package ssltests;",
          "18: our @tests = (",
          "19:     {",
          "20:         name => \"renegotiate-client-no-resume\",",
          "21:         server => {",
          "22:             \"Options\" => \"NoResumptionOnRenegotiation\"",
          "23:         },",
          "24:         client => {},",
          "25:         test => {",
          "26:             \"Method\" => \"DTLS\",",
          "27:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "28:             \"ResumptionExpected\" => \"No\",",
          "29:             \"ExpectedResult\" => \"Success\"",
          "30:         }",
          "31:     },",
          "32:     {",
          "33:         name => \"renegotiate-client-resume\",",
          "34:         server => {},",
          "35:         client => {},",
          "36:         test => {",
          "37:             \"Method\" => \"DTLS\",",
          "38:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "39:             \"ResumptionExpected\" => \"Yes\",",
          "40:             \"ExpectedResult\" => \"Success\"",
          "41:         }",
          "42:     },",
          "43: # Note: Unlike the TLS tests, we will never do resumption with server",
          "44: # initiated reneg. This is because an OpenSSL DTLS client will always do a full",
          "45: # handshake (i.e. it doesn't supply a session id) when it receives a",
          "46: # HelloRequest. This is different to the OpenSSL TLS implementation where an",
          "47: # OpenSSL client will always try an abbreviated handshake (i.e. it will supply",
          "48: # the session id). This goes all the way to commit 48ae85b6f when abbreviated",
          "49: # handshake support was first added. Neither behaviour is wrong, but the",
          "50: # discrepancy is strange. TODO: Should we harmonise the TLS and DTLS behaviour,",
          "51: # and if so, what to?",
          "52:     {",
          "53:         name => \"renegotiate-server-resume\",",
          "54:         server => {},",
          "55:         client => {},",
          "56:         test => {",
          "57:             \"Method\" => \"DTLS\",",
          "58:             \"HandshakeMode\" => \"RenegotiateServer\",",
          "59:             \"ResumptionExpected\" => \"No\",",
          "60:             \"ExpectedResult\" => \"Success\"",
          "61:         }",
          "62:     },",
          "63: );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b8055a18387ed93987df868f87df62b713922c1",
      "candidate_info": {
        "commit_hash": "1b8055a18387ed93987df868f87df62b713922c1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/1b8055a18387ed93987df868f87df62b713922c1",
        "files": [
          "crypto/init.c"
        ],
        "message": "Fix the effect of no-dso in crypto/init.c\n\nWhen configured no-dso, there are no DSO_{whatever} macros defined.\nTherefore, before checking those, you have to check if OPENSSL_NO_DSO\nis defined.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1902)\n(cherry picked from commit 6e290a25c2cbdc26119c0866c20d9292f9e64dd8)",
        "before_after_code_files": [
          "crypto/init.c||crypto/init.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/init.c||crypto/init.c": [
          "File: crypto/init.c -> crypto/init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:     OPENSSL_cpuid_setup();",
          "82:     base_inited = 1;",
          "85: # ifdef DSO_WIN32",
          "86:     {",
          "87:         HMODULE handle = NULL;",
          "",
          "[Removed Lines]",
          "84: #ifndef OPENSSL_USE_NODELETE",
          "",
          "[Added Lines]",
          "84: #if !defined(OPENSSL_NO_DSO) && !defined(OPENSSL_USE_NODELETE)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "604: {",
          "605:     OPENSSL_INIT_STOP *newhand;",
          "608:     {",
          "609:         union {",
          "610:             void *sym;",
          "",
          "[Removed Lines]",
          "607: #ifndef OPENSSL_USE_NODELETE",
          "",
          "[Added Lines]",
          "607: #if !defined(OPENSSL_NO_DSO) && !defined(OPENSSL_USE_NODELETE)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0929aff549bdcf400fdc243970c7e58ea2ce24a",
      "candidate_info": {
        "commit_hash": "d0929aff549bdcf400fdc243970c7e58ea2ce24a",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d0929aff549bdcf400fdc243970c7e58ea2ce24a",
        "files": [
          "test/sslapitest.c"
        ],
        "message": "Fix no-ocsp.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "test/sslapitest.c||test/sslapitest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/sslapitest.c||test/sslapitest.c": [
          "File: test/sslapitest.c -> test/sslapitest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: static char *cert = NULL;",
          "22: static char *privkey = NULL;",
          "24: static const unsigned char orespder[] = \"Dummy OCSP Response\";",
          "25: static int ocsp_server_called = 0;",
          "26: static int ocsp_client_called = 0;",
          "28: static int cdummyarg = 1;",
          "29: static X509 *ocspcert = NULL;",
          "31: #define NUM_EXTRA_CERTS 40",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #ifndef OPENSSL_NO_OCSP",
          "31: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "116: }",
          "117: #endif",
          "119: static int ocsp_server_cb(SSL *s, void *arg)",
          "120: {",
          "121:     int *argi = (int *)arg;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: #ifndef OPENSSL_NO_OCSP",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "866: #ifndef OPENSSL_NO_DTLS",
          "867:     ADD_TEST(test_large_message_dtls);",
          "868: #endif",
          "869:     ADD_TEST(test_tlsext_status_type);",
          "870:     ADD_TEST(test_session_with_only_int_cache);",
          "871:     ADD_TEST(test_session_with_only_ext_cache);",
          "872:     ADD_TEST(test_session_with_both_cache);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "874: #ifndef OPENSSL_NO_OCSP",
          "876: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0e3200b59d2de69e2a577eb269c5e65d2a3dfa11",
      "candidate_info": {
        "commit_hash": "0e3200b59d2de69e2a577eb269c5e65d2a3dfa11",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0e3200b59d2de69e2a577eb269c5e65d2a3dfa11",
        "files": [
          "ssl/record/ssl3_record.c"
        ],
        "message": "Replace div-spoiler hack with simpler code, GH#1027,2253.\n\nThis is 1.1.0-specific 8f77fab82486c19ab48eee07718e190f76e6ea9a redux.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1212:     unsigned mac_end = rec->length;",
          "1213:     unsigned mac_start = mac_end - md_size;",
          "1218:     unsigned scan_start = 0;",
          "1219:     unsigned i, j;",
          "1221:     unsigned rotate_offset;",
          "1223:     OPENSSL_assert(rec->orig_len >= md_size);",
          "",
          "[Removed Lines]",
          "1220:     unsigned div_spoiler;",
          "",
          "[Added Lines]",
          "1214:     unsigned in_mac;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1231:     if (rec->orig_len > md_size + 255 + 1)",
          "1232:         scan_start = rec->orig_len - (md_size + 255 + 1);",
          "1245:     memset(rotated_mac, 0, md_size);",
          "1246:     for (i = scan_start, j = 0; i < rec->orig_len; i++) {",
          "1249:         unsigned char b = rec->data[i];",
          "1251:         j &= constant_time_lt(j, md_size);",
          "1252:     }",
          "",
          "[Removed Lines]",
          "1241:     div_spoiler = md_size >> 1;",
          "1242:     div_spoiler <<= (sizeof(div_spoiler) - 1) * 8;",
          "1243:     rotate_offset = (div_spoiler + mac_start - scan_start) % md_size;",
          "1247:         unsigned char mac_started = constant_time_ge_8(i, mac_start);",
          "1248:         unsigned char mac_ended = constant_time_ge_8(i, mac_end);",
          "1250:         rotated_mac[j++] |= b & mac_started & ~mac_ended;",
          "",
          "[Added Lines]",
          "1234:     in_mac = 0;",
          "1235:     rotate_offset = 0;",
          "1238:         unsigned mac_started = constant_time_eq(i, mac_start);",
          "1239:         unsigned mac_ended = constant_time_lt(i, mac_end);",
          "1242:         in_mac |= mac_started;",
          "1243:         in_mac &= mac_ended;",
          "1244:         rotate_offset |= j & mac_started;",
          "1245:         rotated_mac[j++] |= b & in_mac;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91951307d63cd238e2603cc739b765a909f35785",
      "candidate_info": {
        "commit_hash": "91951307d63cd238e2603cc739b765a909f35785",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/91951307d63cd238e2603cc739b765a909f35785",
        "files": [
          "test/d2i_test.c"
        ],
        "message": "Add memory leak detection to d2i_test\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1707)\n(cherry picked from commit 4a4c4bf06d6362f56507c787c61b07655563e962)",
        "before_after_code_files": [
          "test/d2i_test.c||test/d2i_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/d2i_test.c||test/d2i_test.c": [
          "File: test/d2i_test.c -> test/d2i_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:     int result = 0;",
          "143:     const char *test_type_name;",
          "144:     const char *expected_error_string;",
          "146:     size_t i;",
          "147:     static ASN1_ITEM_EXP *items[] = {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:     const char *p = getenv(\"OPENSSL_DEBUG_MEMORY\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159:         {\"compare\", ASN1_COMPARE}",
          "160:     };",
          "162:     if (argc != 4) {",
          "163:         fprintf(stderr,",
          "164:                 \"Usage: d2i_test item_name expected_error file.der\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "163:     if (p != NULL && strcmp(p, \"on\") == 0)",
          "164:         CRYPTO_set_mem_debug(1);",
          "165:     CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ON);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "203:     result = run_tests(argv[0]);",
          "205:     return result;",
          "206: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "210: #ifndef OPENSSL_NO_CRYPTO_MDEBUG",
          "211:     if (CRYPTO_mem_leaks_fp(stderr) <= 0)",
          "212:         result = 1;",
          "213: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}