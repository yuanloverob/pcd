{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "941005df14e249fc2133240fe46884acd908b83e",
      "candidate_info": {
        "commit_hash": "941005df14e249fc2133240fe46884acd908b83e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/941005df14e249fc2133240fe46884acd908b83e",
        "files": [
          "Configurations/unix-Makefile.tmpl"
        ],
        "message": "Make dependencies if Makefile is new.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "Configurations/unix-Makefile.tmpl||Configurations/unix-Makefile.tmpl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/unix-Makefile.tmpl||Configurations/unix-Makefile.tmpl": [
          "File: Configurations/unix-Makefile.tmpl -> Configurations/unix-Makefile.tmpl",
          "--- Hunk 1 ---",
          "[Context before]",
          "307: # concatenate only if that is true.",
          "308: depend:",
          "309:  @: {- output_off() if $disabled{makedepend}; \"\" -}",
          "311:    ( sed -e '/^# DO NOT DELETE THIS LINE.*/,$$d' < Makefile; \\",
          "312:      echo '# DO NOT DELETE THIS LINE -- make depend depends on it.'; \\",
          "313:      echo; \\",
          "",
          "[Removed Lines]",
          "310:  @if [ -n \"`find $(DEPS) -newer Makefile 2>/dev/null; exit 0`\" ]; then \\",
          "",
          "[Added Lines]",
          "310:  @if egrep \"^# DO NOT DELETE THIS LINE\" Makefile >/dev/null && [ -z \"`find $(DEPS) -newer Makefile 2>/dev/null; exit 0`\" ]; then :; else \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89d0853a7fe12d6ae79d148425717fed740ae136",
      "candidate_info": {
        "commit_hash": "89d0853a7fe12d6ae79d148425717fed740ae136",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/89d0853a7fe12d6ae79d148425717fed740ae136",
        "files": [
          "test/ssl-tests/01-simple.conf",
          "test/ssl-tests/01-simple.conf.in"
        ],
        "message": "Add server signature algorithm bug test.\n\nAdd a client authentication signature algorithm to simple\nssl test and a server signature algorithm. Since we don't\ndo client auth this should have no effect. However if we\nuse client auth signature algorithms by mistake this will\nabort the handshake with a no shared signature algorithms\nerror.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2297)",
        "before_after_code_files": [
          "test/ssl-tests/01-simple.conf||test/ssl-tests/01-simple.conf",
          "test/ssl-tests/01-simple.conf.in||test/ssl-tests/01-simple.conf.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/ssl-tests/01-simple.conf||test/ssl-tests/01-simple.conf": [
          "File: test/ssl-tests/01-simple.conf -> test/ssl-tests/01-simple.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Generated with generate_ssl_tests.pl",
          "5: test-0 = 0-default",
          "7: # ===========================================================",
          "9: [0-default]",
          "",
          "[Removed Lines]",
          "3: num_tests = 2",
          "6: test-1 = 1-verify-cert",
          "",
          "[Added Lines]",
          "3: num_tests = 3",
          "6: test-1 = 1-Server signature algorithms bug",
          "7: test-2 = 2-verify-cert",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "30: # ===========================================================",
          "40: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "41: CipherString = DEFAULT",
          "42: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "45: CipherString = DEFAULT",
          "46: VerifyMode = Peer",
          "48: [test-1]",
          "49: ExpectedClientAlert = UnknownCA",
          "50: ExpectedResult = ClientFail",
          "",
          "[Removed Lines]",
          "32: [1-verify-cert]",
          "33: ssl_conf = 1-verify-cert-ssl",
          "35: [1-verify-cert-ssl]",
          "36: server = 1-verify-cert-server",
          "37: client = 1-verify-cert-client",
          "39: [1-verify-cert-server]",
          "44: [1-verify-cert-client]",
          "",
          "[Added Lines]",
          "33: [1-Server signature algorithms bug]",
          "34: ssl_conf = 1-Server signature algorithms bug-ssl",
          "36: [1-Server signature algorithms bug-ssl]",
          "37: server = 1-Server signature algorithms bug-server",
          "38: client = 1-Server signature algorithms bug-client",
          "40: [1-Server signature algorithms bug-server]",
          "43: ClientSignatureAlgorithms = ECDSA+SHA256",
          "46: [1-Server signature algorithms bug-client]",
          "48: SignatureAlgorithms = RSA+SHA256",
          "49: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "53: ExpectedResult = Success",
          "56: # ===========================================================",
          "58: [2-verify-cert]",
          "59: ssl_conf = 2-verify-cert-ssl",
          "61: [2-verify-cert-ssl]",
          "62: server = 2-verify-cert-server",
          "63: client = 2-verify-cert-client",
          "65: [2-verify-cert-server]",
          "66: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "67: CipherString = DEFAULT",
          "68: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "70: [2-verify-cert-client]",
          "71: CipherString = DEFAULT",
          "72: VerifyMode = Peer",
          "74: [test-2]",
          "",
          "---------------"
        ],
        "test/ssl-tests/01-simple.conf.in||test/ssl-tests/01-simple.conf.in": [
          "File: test/ssl-tests/01-simple.conf.in -> test/ssl-tests/01-simple.conf.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "19:         test   => { \"ExpectedResult\" => \"Success\" },",
          "20:     },",
          "22:     {",
          "23:         name => \"verify-cert\",",
          "24:         server => { },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     {",
          "23:         name => \"Server signature algorithms bug\",",
          "24:         # Should have no effect as we aren't doing client auth",
          "25:         server => { \"ClientSignatureAlgorithms\" => \"ECDSA+SHA256\" },",
          "26:         client => { \"SignatureAlgorithms\" => \"RSA+SHA256\" },",
          "27:         test   => { \"ExpectedResult\" => \"Success\" },",
          "28:     },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f52d16ac1d0f0bc3a13e32cc62dcbd4fed4ac649",
      "candidate_info": {
        "commit_hash": "f52d16ac1d0f0bc3a13e32cc62dcbd4fed4ac649",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f52d16ac1d0f0bc3a13e32cc62dcbd4fed4ac649",
        "files": [
          "test/recipes/01-test_symbol_presence.t"
        ],
        "message": "Correct detection of group end in map file when testing symbol presence\n\nReviewed-by: Matt Caswell <matt@openssl.org>\n(cherry picked from commit 77a42b5f177e308233ab108806c48b9590a780e2)",
        "before_after_code_files": [
          "test/recipes/01-test_symbol_presence.t||test/recipes/01-test_symbol_presence.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/recipes/01-test_symbol_presence.t||test/recipes/01-test_symbol_presence.t": [
          "File: test/recipes/01-test_symbol_presence.t -> test/recipes/01-test_symbol_presence.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:             map { s|;||; s|\\s+||g; $_ }",
          "70:             grep { $in_global = 1 if m|global:|;",
          "71:                    $in_global = 0 if m|local:|;",
          "72:                    $in_global && m|;|; } @def_lines;",
          "74:         note \"Number of lines in \\@nm_lines after massaging: \", scalar @nm_lines;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:                    $in_global = 0 if m|\\}|;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "177b4225baac56336e04fd97d0c993fd45d3e45e",
      "candidate_info": {
        "commit_hash": "177b4225baac56336e04fd97d0c993fd45d3e45e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/177b4225baac56336e04fd97d0c993fd45d3e45e",
        "files": [
          "ssl/t1_lib.c"
        ],
        "message": "Use TLSEXT_KEYNAME_LENGTH in tls_decrypt_ticket.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2618)\n(cherry picked from commit 57b0d651f052ed86528da916397acbcce035fb21)",
        "before_after_code_files": [
          "ssl/t1_lib.c||ssl/t1_lib.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3151:     }",
          "3156:     sdec = OPENSSL_malloc(eticklen);",
          "3157:     if (sdec == NULL || EVP_DecryptUpdate(ctx, sdec, &slen, p, eticklen) <= 0) {",
          "3158:         EVP_CIPHER_CTX_free(ctx);",
          "",
          "[Removed Lines]",
          "3154:     p = etick + 16 + EVP_CIPHER_CTX_iv_length(ctx);",
          "3155:     eticklen -= 16 + EVP_CIPHER_CTX_iv_length(ctx);",
          "",
          "[Added Lines]",
          "3154:     p = etick + TLSEXT_KEYNAME_LENGTH + EVP_CIPHER_CTX_iv_length(ctx);",
          "3155:     eticklen -= TLSEXT_KEYNAME_LENGTH + EVP_CIPHER_CTX_iv_length(ctx);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e01cee6d8fbba09dc811af91a5e24dab95fc66a1",
      "candidate_info": {
        "commit_hash": "e01cee6d8fbba09dc811af91a5e24dab95fc66a1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e01cee6d8fbba09dc811af91a5e24dab95fc66a1",
        "files": [
          "crypto/ui/ui_lib.c",
          "crypto/ui/ui_openssl.c"
        ],
        "message": "UI code style cleanup\n\nMostly condition check changes.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2047)\n(cherry picked from commit 120fb9e43656e1801c75a4fbb7c178ebec9bac18)",
        "before_after_code_files": [
          "crypto/ui/ui_lib.c||crypto/ui/ui_lib.c",
          "crypto/ui/ui_openssl.c||crypto/ui/ui_openssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ui/ui_lib.c||crypto/ui/ui_lib.c": [
          "File: crypto/ui/ui_lib.c -> crypto/ui/ui_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:     UI_STRING *s = general_allocate_prompt(ui, prompt, prompt_freeable,",
          "121:                                            type, input_flags, result_buf);",
          "124:         if (allocate_string_stack(ui) >= 0) {",
          "125:             s->_.string_data.result_minsize = minsize;",
          "126:             s->_.string_data.result_maxsize = maxsize;",
          "",
          "[Removed Lines]",
          "123:     if (s) {",
          "",
          "[Added Lines]",
          "123:     if (s != NULL) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:     } else if (cancel_chars == NULL) {",
          "156:         UIerr(UI_F_GENERAL_ALLOCATE_BOOLEAN, ERR_R_PASSED_NULL_PARAMETER);",
          "157:     } else {",
          "160:                 UIerr(UI_F_GENERAL_ALLOCATE_BOOLEAN,",
          "161:                       UI_R_COMMON_OK_AND_CANCEL_CHARACTERS);",
          "162:             }",
          "",
          "[Removed Lines]",
          "158:         for (p = ok_chars; *p; p++) {",
          "159:             if (strchr(cancel_chars, *p)) {",
          "",
          "[Added Lines]",
          "158:         for (p = ok_chars; *p != '\\0'; p++) {",
          "159:             if (strchr(cancel_chars, *p) != NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "165:         s = general_allocate_prompt(ui, prompt, prompt_freeable,",
          "166:                                     type, input_flags, result_buf);",
          "169:             if (allocate_string_stack(ui) >= 0) {",
          "170:                 s->_.boolean_data.action_desc = action_desc;",
          "171:                 s->_.boolean_data.ok_chars = ok_chars;",
          "",
          "[Removed Lines]",
          "168:         if (s) {",
          "",
          "[Added Lines]",
          "168:         if (s != NULL) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203: {",
          "204:     char *prompt_copy = NULL;",
          "207:         prompt_copy = OPENSSL_strdup(prompt);",
          "208:         if (prompt_copy == NULL) {",
          "209:             UIerr(UI_F_UI_DUP_INPUT_STRING, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "206:     if (prompt) {",
          "",
          "[Added Lines]",
          "206:     if (prompt != NULL) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "231: {",
          "232:     char *prompt_copy = NULL;",
          "235:         prompt_copy = OPENSSL_strdup(prompt);",
          "236:         if (prompt_copy == NULL) {",
          "237:             UIerr(UI_F_UI_DUP_VERIFY_STRING, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "234:     if (prompt) {",
          "",
          "[Added Lines]",
          "234:     if (prompt != NULL) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "262:     char *ok_chars_copy = NULL;",
          "263:     char *cancel_chars_copy = NULL;",
          "266:         prompt_copy = OPENSSL_strdup(prompt);",
          "267:         if (prompt_copy == NULL) {",
          "268:             UIerr(UI_F_UI_DUP_INPUT_BOOLEAN, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "265:     if (prompt) {",
          "",
          "[Added Lines]",
          "265:     if (prompt != NULL) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "270:         }",
          "271:     }",
          "274:         action_desc_copy = OPENSSL_strdup(action_desc);",
          "275:         if (action_desc_copy == NULL) {",
          "276:             UIerr(UI_F_UI_DUP_INPUT_BOOLEAN, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "273:     if (action_desc) {",
          "",
          "[Added Lines]",
          "273:     if (action_desc != NULL) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "278:         }",
          "279:     }",
          "282:         ok_chars_copy = OPENSSL_strdup(ok_chars);",
          "283:         if (ok_chars_copy == NULL) {",
          "284:             UIerr(UI_F_UI_DUP_INPUT_BOOLEAN, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "281:     if (ok_chars) {",
          "",
          "[Added Lines]",
          "281:     if (ok_chars != NULL) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "286:         }",
          "287:     }",
          "290:         cancel_chars_copy = OPENSSL_strdup(cancel_chars);",
          "291:         if (cancel_chars_copy == NULL) {",
          "292:             UIerr(UI_F_UI_DUP_INPUT_BOOLEAN, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "289:     if (cancel_chars) {",
          "",
          "[Added Lines]",
          "289:     if (cancel_chars != NULL) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "315: {",
          "316:     char *text_copy = NULL;",
          "319:         text_copy = OPENSSL_strdup(text);",
          "320:         if (text_copy == NULL) {",
          "321:             UIerr(UI_F_UI_DUP_INFO_STRING, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "318:     if (text) {",
          "",
          "[Added Lines]",
          "318:     if (text != NULL) {",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "337: {",
          "338:     char *text_copy = NULL;",
          "341:         text_copy = OPENSSL_strdup(text);",
          "342:         if (text_copy == NULL) {",
          "343:             UIerr(UI_F_UI_DUP_ERROR_STRING, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "340:     if (text) {",
          "",
          "[Added Lines]",
          "340:     if (text != NULL) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "353: {",
          "354:     char *prompt = NULL;",
          "357:         prompt = ui->meth->ui_construct_prompt(ui, object_desc, object_name);",
          "358:     else {",
          "359:         char prompt1[] = \"Enter \";",
          "",
          "[Removed Lines]",
          "356:     if (ui->meth->ui_construct_prompt)",
          "",
          "[Added Lines]",
          "356:     if (ui->meth->ui_construct_prompt != NULL)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "364:         if (object_desc == NULL)",
          "365:             return NULL;",
          "366:         len = sizeof(prompt1) - 1 + strlen(object_desc);",
          "368:             len += sizeof(prompt2) - 1 + strlen(object_name);",
          "369:         len += sizeof(prompt3) - 1;",
          "",
          "[Removed Lines]",
          "367:         if (object_name)",
          "",
          "[Added Lines]",
          "367:         if (object_name != NULL)",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "373:             return NULL;",
          "374:         OPENSSL_strlcpy(prompt, prompt1, len + 1);",
          "375:         OPENSSL_strlcat(prompt, object_desc, len + 1);",
          "377:             OPENSSL_strlcat(prompt, prompt2, len + 1);",
          "378:             OPENSSL_strlcat(prompt, object_name, len + 1);",
          "379:         }",
          "",
          "[Removed Lines]",
          "376:         if (object_name) {",
          "",
          "[Added Lines]",
          "376:         if (object_name != NULL) {",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "415:     uis.type = UIT_ERROR;",
          "416:     uis.out_string = str;",
          "419:         return -1;",
          "420:     return 0;",
          "421: }",
          "",
          "[Removed Lines]",
          "418:     if (ui->meth->ui_write_string && !ui->meth->ui_write_string(ui, &uis))",
          "",
          "[Added Lines]",
          "418:     if (ui->meth->ui_write_string != NULL",
          "419:         && ui->meth->ui_write_string(ui, &uis) <= 0)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "425:     int i, ok = 0;",
          "426:     const char *state = \"processing\";",
          "429:         state = \"opening session\";",
          "430:         ok = -1;",
          "431:         goto err;",
          "",
          "[Removed Lines]",
          "428:     if (ui->meth->ui_open_session && !ui->meth->ui_open_session(ui)) {",
          "",
          "[Added Lines]",
          "429:     if (ui->meth->ui_open_session != NULL",
          "430:         && ui->meth->ui_open_session(ui) <= 0) {",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "436:                             print_error, (void *)ui);",
          "438:     for (i = 0; i < sk_UI_STRING_num(ui->strings); i++) {",
          "442:         {",
          "443:             state = \"writing strings\";",
          "444:             ok = -1;",
          "",
          "[Removed Lines]",
          "439:         if (ui->meth->ui_write_string",
          "440:             && !ui->meth->ui_write_string(ui,",
          "441:                                           sk_UI_STRING_value(ui->strings, i)))",
          "",
          "[Added Lines]",
          "441:         if (ui->meth->ui_write_string != NULL",
          "442:             && (ui->meth->ui_write_string(ui,",
          "443:                                           sk_UI_STRING_value(ui->strings, i))",
          "444:                 <= 0))",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "446:         }",
          "447:     }",
          "450:         switch (ui->meth->ui_flush(ui)) {",
          "452:             ok = -2;",
          "",
          "[Removed Lines]",
          "449:     if (ui->meth->ui_flush)",
          "",
          "[Added Lines]",
          "452:     if (ui->meth->ui_flush != NULL)",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "461:         }",
          "463:     for (i = 0; i < sk_UI_STRING_num(ui->strings); i++) {",
          "465:             switch (ui->meth->ui_read_string(ui,",
          "466:                                              sk_UI_STRING_value(ui->strings,",
          "467:                                                                 i))) {",
          "",
          "[Removed Lines]",
          "464:         if (ui->meth->ui_read_string) {",
          "",
          "[Added Lines]",
          "467:         if (ui->meth->ui_read_string != NULL) {",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "479:         }",
          "480:     }",
          "481:  err:",
          "483:         if (state == NULL)",
          "484:             state = \"closing session\";",
          "485:         ok = -1;",
          "",
          "[Removed Lines]",
          "482:     if (ui->meth->ui_close_session && !ui->meth->ui_close_session(ui)) {",
          "",
          "[Added Lines]",
          "485:     if (ui->meth->ui_close_session != NULL",
          "486:         && !ui->meth->ui_close_session(ui) <= 0) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "581: int UI_method_set_opener(UI_METHOD *method, int (*opener) (UI *ui))",
          "582: {",
          "584:         method->ui_open_session = opener;",
          "585:         return 0;",
          "588: }",
          "590: int UI_method_set_writer(UI_METHOD *method,",
          "591:                          int (*writer) (UI *ui, UI_STRING *uis))",
          "592: {",
          "594:         method->ui_write_string = writer;",
          "595:         return 0;",
          "598: }",
          "600: int UI_method_set_flusher(UI_METHOD *method, int (*flusher) (UI *ui))",
          "601: {",
          "603:         method->ui_flush = flusher;",
          "604:         return 0;",
          "607: }",
          "609: int UI_method_set_reader(UI_METHOD *method,",
          "610:                          int (*reader) (UI *ui, UI_STRING *uis))",
          "611: {",
          "613:         method->ui_read_string = reader;",
          "614:         return 0;",
          "617: }",
          "619: int UI_method_set_closer(UI_METHOD *method, int (*closer) (UI *ui))",
          "620: {",
          "622:         method->ui_close_session = closer;",
          "623:         return 0;",
          "626: }",
          "628: int UI_method_set_prompt_constructor(UI_METHOD *method,",
          "",
          "[Removed Lines]",
          "583:     if (method) {",
          "586:     } else",
          "587:         return -1;",
          "593:     if (method) {",
          "596:     } else",
          "597:         return -1;",
          "602:     if (method) {",
          "605:     } else",
          "606:         return -1;",
          "612:     if (method) {",
          "615:     } else",
          "616:         return -1;",
          "621:     if (method) {",
          "624:     } else",
          "625:         return -1;",
          "",
          "[Added Lines]",
          "587:     if (method != NULL) {",
          "590:     }",
          "591:     return -1;",
          "597:     if (method != NULL) {",
          "600:     }",
          "601:     return -1;",
          "606:     if (method != NULL) {",
          "609:     }",
          "610:     return -1;",
          "616:     if (method != NULL) {",
          "619:     }",
          "620:     return -1;",
          "625:     if (method != NULL) {",
          "628:     }",
          "629:     return -1;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "632:                                                                   const char",
          "634: {",
          "636:         method->ui_construct_prompt = prompt_constructor;",
          "637:         return 0;",
          "640: }",
          "644:         return method->ui_open_session;",
          "647: }",
          "651:         return method->ui_write_string;",
          "654: }",
          "658:         return method->ui_flush;",
          "661: }",
          "665:         return method->ui_read_string;",
          "668: }",
          "672:         return method->ui_close_session;",
          "675: }",
          "677: char *(*UI_method_get_prompt_constructor(UI_METHOD *method)) (UI *,",
          "678:                                                               const char *,",
          "681:         return method->ui_construct_prompt;",
          "684: }",
          "686: enum UI_string_types UI_get_string_type(UI_STRING *uis)",
          "",
          "[Removed Lines]",
          "635:     if (method) {",
          "638:     } else",
          "639:         return -1;",
          "642: int (*UI_method_get_opener(UI_METHOD *method)) (UI *) {",
          "643:     if (method)",
          "645:     else",
          "646:         return NULL;",
          "649: int (*UI_method_get_writer(UI_METHOD *method)) (UI *, UI_STRING *) {",
          "650:     if (method)",
          "652:     else",
          "653:         return NULL;",
          "656: int (*UI_method_get_flusher(UI_METHOD *method)) (UI *) {",
          "657:     if (method)",
          "659:     else",
          "660:         return NULL;",
          "663: int (*UI_method_get_reader(UI_METHOD *method)) (UI *, UI_STRING *) {",
          "664:     if (method)",
          "666:     else",
          "667:         return NULL;",
          "670: int (*UI_method_get_closer(UI_METHOD *method)) (UI *) {",
          "671:     if (method)",
          "673:     else",
          "674:         return NULL;",
          "679:                                                               const char *) {",
          "680:     if (method)",
          "682:     else",
          "683:         return NULL;",
          "",
          "[Added Lines]",
          "639:     if (method != NULL) {",
          "642:     }",
          "643:     return -1;",
          "646: int (*UI_method_get_opener(UI_METHOD *method)) (UI *)",
          "647: {",
          "648:     if (method != NULL)",
          "650:     return NULL;",
          "653: int (*UI_method_get_writer(UI_METHOD *method)) (UI *, UI_STRING *)",
          "654: {",
          "655:     if (method != NULL)",
          "657:     return NULL;",
          "660: int (*UI_method_get_flusher(UI_METHOD *method)) (UI *)",
          "661: {",
          "662:     if (method != NULL)",
          "664:     return NULL;",
          "667: int (*UI_method_get_reader(UI_METHOD *method)) (UI *, UI_STRING *)",
          "668: {",
          "669:     if (method != NULL)",
          "671:     return NULL;",
          "674: int (*UI_method_get_closer(UI_METHOD *method)) (UI *)",
          "675: {",
          "676:     if (method != NULL)",
          "678:     return NULL;",
          "683:                                                               const char *)",
          "684: {",
          "685:     if (method != NULL)",
          "687:     return NULL;",
          "",
          "---------------"
        ],
        "crypto/ui/ui_openssl.c||crypto/ui/ui_openssl.c": [
          "File: crypto/ui/ui_openssl.c -> crypto/ui/ui_openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "344:     } else",
          "345: # endif",
          "346:     p = fgets(result, maxsize, tty_in);",
          "348:         goto error;",
          "349:     if (feof(tty_in))",
          "350:         goto error;",
          "",
          "[Removed Lines]",
          "347:     if (!p)",
          "",
          "[Added Lines]",
          "347:     if (p == NULL)",
          "",
          "---------------"
        ]
      }
    }
  ]
}