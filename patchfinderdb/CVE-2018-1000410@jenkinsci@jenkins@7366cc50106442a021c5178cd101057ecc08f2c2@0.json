{
  "cve_id": "CVE-2018-1000410",
  "cve_desc": "An information exposure vulnerability exists in Jenkins 2.145 and earlier, LTS 2.138.1 and earlier, and the Stapler framework used by these releases, in core/src/main/java/org/kohsuke/stapler/RequestImpl.java, core/src/main/java/hudson/model/Descriptor.java that allows attackers with Overall/Administer permission or access to the local file system to obtain credentials entered by users if the form submission could not be successfully processed.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "7366cc50106442a021c5178cd101057ecc08f2c2",
  "patch_info": {
    "commit_hash": "7366cc50106442a021c5178cd101057ecc08f2c2",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/7366cc50106442a021c5178cd101057ecc08f2c2",
    "files": [
      "core/src/main/java/hudson/model/Descriptor.java",
      "core/src/main/java/jenkins/model/Jenkins.java",
      "core/src/main/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizer.java",
      "core/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerTest.java",
      "test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java",
      "test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestDescribablePage/index.jelly",
      "test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestPassword/index.jelly",
      "test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestStaplerPage/index.jelly",
      "war/src/main/webapp/scripts/hudson-behavior.js"
    ],
    "message": "[SECURITY-765]\n\nCo-Authored-By: Wadeck Follonier <wadeck.follonier@gmail.com>",
    "before_after_code_files": [
      "core/src/main/java/hudson/model/Descriptor.java||core/src/main/java/hudson/model/Descriptor.java",
      "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
      "core/src/main/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizer.java||core/src/main/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizer.java",
      "core/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerTest.java||core/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerTest.java",
      "test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java||test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java",
      "test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestDescribablePage/index.jelly||test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestDescribablePage/index.jelly",
      "test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestPassword/index.jelly||test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestPassword/index.jelly",
      "test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestStaplerPage/index.jelly||test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestStaplerPage/index.jelly",
      "war/src/main/webapp/scripts/hudson-behavior.js||war/src/main/webapp/scripts/hudson-behavior.js"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/model/Descriptor.java||core/src/main/java/hudson/model/Descriptor.java": [
      "File: core/src/main/java/hudson/model/Descriptor.java -> core/src/main/java/hudson/model/Descriptor.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "39: import jenkins.model.GlobalConfiguration;",
      "40: import jenkins.model.GlobalConfigurationCategory;",
      "41: import jenkins.model.Jenkins;",
      "42: import jenkins.util.io.OnMaster;",
      "43: import net.sf.json.JSONArray;",
      "44: import net.sf.json.JSONObject;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "42: import jenkins.security.RedactSecretJsonInErrorMessageSanitizer;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "597:         } catch (NoSuchMethodException e) {",
      "598:             throw new AssertionError(e); // impossible",
      "599:         } catch (InstantiationException | IllegalAccessException | RuntimeException e) {",
      "601:         }",
      "602:     }",
      "",
      "[Removed Lines]",
      "600:             throw new Error(\"Failed to instantiate \"+clazz+\" from \"+formData,e);",
      "",
      "[Added Lines]",
      "601:             throw new Error(\"Failed to instantiate \"+clazz+\" from \"+RedactSecretJsonInErrorMessageSanitizer.INSTANCE.sanitize(formData),e);",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
      "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "37: import hudson.Launcher.LocalLauncher;",
      "38: import jenkins.AgentProtocol;",
      "39: import jenkins.diagnostics.URICheckEncodingMonitor;",
      "40: import jenkins.util.SystemProperties;",
      "41: import hudson.cli.declarative.CLIMethod;",
      "42: import hudson.cli.declarative.CLIResolver;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40: import jenkins.security.RedactSecretJsonInErrorMessageSanitizer;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "898:             if (pluginManager==null)",
      "899:                 pluginManager = PluginManager.createDefault(this);",
      "900:             this.pluginManager = pluginManager;",
      "904:             adjuncts = new AdjunctManager(servletContext, pluginManager.uberClassLoader,\"adjuncts/\"+SESSION_HASH, TimeUnit2.DAYS.toMillis(365));",
      "",
      "[Removed Lines]",
      "902:             WebApp.get(servletContext).setClassLoader(pluginManager.uberClassLoader);",
      "",
      "[Added Lines]",
      "902:             WebApp webApp = WebApp.get(servletContext);",
      "904:             webApp.setClassLoader(pluginManager.uberClassLoader);",
      "905:             webApp.setJsonInErrorMessageSanitizer(RedactSecretJsonInErrorMessageSanitizer.INSTANCE);",
      "",
      "---------------"
    ],
    "core/src/main/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizer.java||core/src/main/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizer.java": [
      "File: core/src/main/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizer.java -> core/src/main/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package jenkins.security;",
      "26: import net.sf.json.JSONArray;",
      "27: import net.sf.json.JSONObject;",
      "28: import org.kohsuke.accmod.Restricted;",
      "29: import org.kohsuke.accmod.restrictions.NoExternalUse;",
      "30: import org.kohsuke.stapler.JsonInErrorMessageSanitizer;",
      "32: import java.util.HashSet;",
      "33: import java.util.Set;",
      "34: import java.util.logging.Level;",
      "35: import java.util.logging.Logger;",
      "37: @Restricted(NoExternalUse.class)",
      "38: public class RedactSecretJsonInErrorMessageSanitizer implements JsonInErrorMessageSanitizer {",
      "39:     private static final Logger LOGGER = Logger.getLogger(RedactSecretJsonInErrorMessageSanitizer.class.getName());",
      "42:     public static final String REDACT_KEY = \"$redact\";",
      "43:     public static final String REDACT_VALUE = \"[value redacted]\";",
      "45:     public static final RedactSecretJsonInErrorMessageSanitizer INSTANCE = new RedactSecretJsonInErrorMessageSanitizer();",
      "47:     private RedactSecretJsonInErrorMessageSanitizer() {}",
      "49:     @Override",
      "50:     public JSONObject sanitize(JSONObject jsonObject) {",
      "51:         return copyAndSanitizeObject(jsonObject);",
      "52:     }",
      "57:     private Set<String> retrieveRedactedKeys(JSONObject jsonObject) {",
      "58:         Set<String> redactedKeySet = new HashSet<>();",
      "59:         if (jsonObject.has(REDACT_KEY)) {",
      "60:             Object value = jsonObject.get(REDACT_KEY);",
      "61:             if (value instanceof JSONArray) {",
      "62:                 for (Object o : jsonObject.getJSONArray(REDACT_KEY)) {",
      "63:                     if (o instanceof String) {",
      "64:                         redactedKeySet.add((String) o);",
      "65:                     } else {",
      "67:                         LOGGER.log(Level.WARNING, \"Unsupported type \" + o.getClass().getName() + \" for \" + REDACT_KEY + \", please use either a single String value or an Array\");",
      "68:                     }",
      "69:                 }",
      "70:             } else if (value instanceof String) {",
      "71:                 redactedKeySet.add((String) value);",
      "72:             } else {",
      "74:                 LOGGER.log(Level.WARNING, \"Unsupported type \" + value.getClass().getName() + \" for \" + REDACT_KEY + \", please use either a single String value or an Array\");",
      "75:             }",
      "76:         }",
      "77:         return redactedKeySet;",
      "78:     }",
      "80:     private Object copyAndSanitize(Object value) {",
      "81:         if (value instanceof JSONObject) {",
      "82:             return copyAndSanitizeObject((JSONObject) value);",
      "83:         } else if (value instanceof JSONArray) {",
      "84:             return copyAndSanitizeArray((JSONArray) value);",
      "85:         } else {",
      "87:             return value;",
      "88:         }",
      "89:     }",
      "91:     @SuppressWarnings(\"unchecked\")",
      "92:     private JSONObject copyAndSanitizeObject(JSONObject jsonObject) {",
      "93:         Set<String> redactedKeySet = retrieveRedactedKeys(jsonObject);",
      "94:         JSONObject result = new JSONObject();",
      "96:         jsonObject.keySet().forEach(keyObject -> {",
      "97:             String key = keyObject.toString();",
      "98:             if (redactedKeySet.contains(key)) {",
      "99:                 result.accumulate(key, REDACT_VALUE);",
      "100:             } else {",
      "101:                 Object value = jsonObject.get(keyObject);",
      "102:                 result.accumulate(key, copyAndSanitize(value));",
      "103:             }",
      "104:         });",
      "106:         return result;",
      "107:     }",
      "109:     private JSONArray copyAndSanitizeArray(JSONArray jsonArray) {",
      "110:         JSONArray result = new JSONArray();",
      "112:         jsonArray.forEach(value ->",
      "113:                 result.add(copyAndSanitize(value))",
      "114:         );",
      "116:         return result;",
      "117:     }",
      "118: }",
      "",
      "---------------"
    ],
    "core/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerTest.java||core/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerTest.java": [
      "File: core/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerTest.java -> core/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package jenkins.security;",
      "26: import net.sf.json.JSONObject;",
      "27: import org.junit.Test;",
      "28: import org.jvnet.hudson.test.Issue;",
      "30: import static org.junit.Assert.assertEquals;",
      "31: import static org.junit.Assert.assertNotSame;",
      "33: @Issue(\"SECURITY-765\")",
      "34: public class RedactSecretJsonInErrorMessageSanitizerTest {",
      "35:     @Test",
      "36:     public void noSecrets() throws Exception {",
      "37:         assertRedaction(",
      "38:                 \"{'a': 1, 'b': '2', 'c': {'c1': 1, 'c2': '2', 'c3': ['3a', '3b']}, 'd': ['4a', {'d1': 1, 'd2': '2'}]}\",",
      "39:                 \"{'a': 1, 'b': '2', 'c': {'c1': 1, 'c2': '2', 'c3': ['3a', '3b']}, 'd': ['4a', {'d1': 1, 'd2': '2'}]}\"",
      "40:         );",
      "41:     }",
      "43:     @Test",
      "44:     public void simpleWithSecret() throws Exception {",
      "45:         assertRedaction(",
      "46:                 \"{'a': 'secret', 'b': 'other', '$redact': 'a'}\",",
      "47:                 \"{'a': '[value redacted]', 'b': 'other', '$redact': 'a'}\"",
      "48:         );",
      "49:     }",
      "51:     @Test",
      "52:     public void singleWithRedactedInArray() throws Exception {",
      "53:         assertRedaction(",
      "54:                 \"{'a': 'secret', 'b': 'other', '$redact': ['a']}\",",
      "55:                 \"{'a': '[value redacted]', 'b': 'other', '$redact': ['a']}\"",
      "56:         );",
      "57:     }",
      "59:     @Test",
      "60:     public void objectRedactedAcceptedButNotProcessed() throws Exception {",
      "61:         assertRedaction(",
      "62:                 \"{'a': 'secret', 'b': 'other', '$redact': {'a': 'a'}}\",",
      "63:                 \"{'a': 'secret', 'b': 'other', '$redact': {'a': 'a'}}\"",
      "64:         );",
      "65:     }",
      "67:     @Test",
      "68:     public void weirdValuesInRedactedAcceptedButNotProcessed() throws Exception {",
      "69:         assertRedaction(",
      "70:                 \"{'a': 'secret', 'b': 'other', '$redact': [null, true, false, 1, 2, 'a']}\",",
      "71:                 \"{'a': '[value redacted]', 'b': 'other', '$redact': [null, true, false, 1, 2, 'a']}\"",
      "72:         );",
      "73:     }",
      "75:     @Test",
      "76:     public void ensureTrueAndOneAsStringAreSupportedAsRedactedKey() throws Exception {",
      "78:         assertRedaction(",
      "79:                 \"{'true': 'secret1', '1': 'secret3', 'b': 'other', '$redact': ['true', '1']}\",",
      "80:                 \"{'true': '[value redacted]', '1': '[value redacted]', 'b': 'other', '$redact': ['true', '1']}\"",
      "81:         );",
      "82:     }",
      "84:     @Test",
      "85:     public void redactFullBranch() throws Exception {",
      "86:         assertRedaction(",
      "87:                 \"{'a': {'s1': 'secret1', 's2': 'secret2', 's3': [1,2,3]}, 'b': [4,5,6], 'c': 'other', '$redact': ['a', 'b']}\",",
      "88:                 \"{'a': '[value redacted]', 'b': '[value redacted]', 'c': 'other', '$redact': ['a', 'b']}\"",
      "89:         );",
      "90:     }",
      "92:     @Test",
      "93:     public void multipleSecretAtSameLevel() throws Exception {",
      "94:         assertRedaction(",
      "95:                 \"{'a1': 'secret1', 'a2': 'secret2', 'b': 'other', '$redact': ['a1', 'a2']}\",",
      "96:                 \"{'a1': '[value redacted]', 'a2': '[value redacted]', 'b': 'other', '$redact': ['a1', 'a2']}\"",
      "97:         );",
      "98:     }",
      "100:     @Test",
      "101:     public void redactedKeyWithoutCorrespondences() throws Exception {",
      "102:         assertRedaction(",
      "103:                 \"{'a1': 'secret1', 'a2': 'secret2', 'b': 'other', '$redact': ['a0', 'a1', 'a2', 'a3']}\",",
      "104:                 \"{'a1': '[value redacted]', 'a2': '[value redacted]', 'b': 'other', '$redact': ['a0', 'a1', 'a2', 'a3']}\"",
      "105:         );",
      "106:     }",
      "108:     @Test",
      "109:     public void secretsAtMultipleLevels() throws Exception {",
      "110:         assertRedaction(",
      "111:                 \"{'a1': 'secret1', 'a2': 'secret2', 'b': 'other', '$redact': ['a1', 'a2'], 'sub': {'c1': 'secret1', 'c2': 'secret2', 'c3': 'other', '$redact': ['c1', 'c2']}}\",",
      "112:                 \"{'a1': '[value redacted]', 'a2': '[value redacted]', 'b': 'other', '$redact': ['a1', 'a2'], 'sub': {'c1': '[value redacted]', 'c2': '[value redacted]', 'c3': 'other', '$redact': ['c1', 'c2']}}\"",
      "113:         );",
      "114:     }",
      "116:     @Test",
      "117:     public void noInteractionBetweenLevels() throws Exception {",
      "118:         assertRedaction(",
      "119:                 \"{'a': 'secret', 'b': 'other', 'c': 'other', '$redact': 'a', 'sub': {'a': 'other', 'b': 'secret', 'c': 'other', '$redact': 'b'}}\",",
      "120:                 \"{'a': '[value redacted]', 'b': 'other', 'c': 'other', '$redact': 'a', 'sub': {'a': 'other', 'b': '[value redacted]', 'c': 'other', '$redact': 'b'}}\"",
      "121:         );",
      "122:     }",
      "124:     @Test",
      "125:     public void deeplyNestedObject() throws Exception {",
      "126:         assertRedaction(",
      "127:                 \"{'sub': {'arr': ['d1', 2, {'a1': 'other', 'b1':'other', 'c1': 'secret', '$redact': 'c1'}, 4, {'a2': 'other', 'b2': 'other', 'c2': 'secret', '$redact': 'c2'}]}, '$redact': 'b'}\",",
      "128:                 \"{'sub': {'arr': ['d1', 2, {'a1': 'other', 'b1':'other', 'c1': '[value redacted]', '$redact': 'c1'}, 4, {'a2': 'other', 'b2': 'other', 'c2': '[value redacted]', '$redact': 'c2'}]}, '$redact': 'b'}\"",
      "129:         );",
      "130:     }",
      "132:     private void assertRedaction(String from, String to) {",
      "133:         JSONObject input = JSONObject.fromObject(from.replace('\\'', '\"'));",
      "134:         JSONObject output = RedactSecretJsonInErrorMessageSanitizer.INSTANCE.sanitize(input);",
      "135:         assertNotSame(output, input);",
      "136:         assertEquals(\"redaction of \" + from, to.replace('\\'', '\"').replace(\" \", \"\"),",
      "137:                 output.toString().replace(\" \", \"\"));",
      "138:     }",
      "139: }",
      "",
      "---------------"
    ],
    "test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java||test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java": [
      "File: test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java -> test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package jenkins.security;",
      "26: import com.gargoylesoftware.htmlunit.Page;",
      "27: import com.gargoylesoftware.htmlunit.html.HtmlForm;",
      "28: import com.gargoylesoftware.htmlunit.html.HtmlInput;",
      "29: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
      "30: import hudson.model.Describable;",
      "31: import hudson.model.Descriptor;",
      "32: import hudson.model.RootAction;",
      "33: import hudson.util.Secret;",
      "34: import jenkins.model.Jenkins;",
      "35: import net.sf.json.JSONObject;",
      "36: import org.junit.Rule;",
      "37: import org.junit.Test;",
      "38: import org.jvnet.hudson.test.Issue;",
      "39: import org.jvnet.hudson.test.JenkinsRule;",
      "40: import org.jvnet.hudson.test.LoggerRule;",
      "41: import org.jvnet.hudson.test.TestExtension;",
      "42: import org.kohsuke.accmod.Restricted;",
      "43: import org.kohsuke.accmod.restrictions.NoExternalUse;",
      "44: import org.kohsuke.stapler.DataBoundConstructor;",
      "45: import org.kohsuke.stapler.StaplerRequest;",
      "46: import org.kohsuke.stapler.StaplerResponse;",
      "47: import org.kohsuke.stapler.interceptor.RequirePOST;",
      "49: import java.io.PrintWriter;",
      "50: import java.io.StringWriter;",
      "51: import java.util.logging.Level;",
      "53: import static org.hamcrest.CoreMatchers.allOf;",
      "54: import static org.hamcrest.CoreMatchers.containsString;",
      "55: import static org.hamcrest.CoreMatchers.equalTo;",
      "56: import static org.hamcrest.CoreMatchers.hasItem;",
      "57: import static org.hamcrest.CoreMatchers.not;",
      "58: import static org.junit.Assert.assertThat;",
      "60: @Restricted(NoExternalUse.class)",
      "61: public class RedactSecretJsonInErrorMessageSanitizerHtmlTest {",
      "63:     @Rule",
      "64:     public JenkinsRule j = new JenkinsRule();",
      "66:     @Rule",
      "67:     public LoggerRule logging = new LoggerRule();",
      "69:     @Test",
      "70:     @Issue(\"SECURITY-765\")",
      "71:     public void passwordsAreRedacted_andOtherStayTheSame() throws Exception {",
      "72:         j.jenkins.setCrumbIssuer(null);",
      "73:         TestPassword testPassword = j.jenkins.getExtensionList(RootAction.class).get(TestPassword.class);",
      "75:         JenkinsRule.WebClient wc = j.createWebClient();",
      "76:         HtmlPage page = wc.goTo(\"test\");",
      "78:         String textSimple = \"plain-1\";",
      "79:         String pwdSimple = \"secret-1\";",
      "80:         ((HtmlInput) page.getElementById(\"text-simple\")).setValueAttribute(textSimple);",
      "81:         ((HtmlInput) page.getElementById(\"pwd-simple\")).setValueAttribute(pwdSimple);",
      "83:         String textLevelOne = \"plain-2\";",
      "84:         String pwdLevelOneA = \"secret-2\";",
      "85:         String pwdLevelOneB = \"secret-3\";",
      "86:         ((HtmlInput) page.getElementById(\"text-level-one\")).setValueAttribute(textLevelOne);",
      "87:         ((HtmlInput) page.getElementById(\"pwd-level-one-a\")).setValueAttribute(pwdLevelOneA);",
      "88:         ((HtmlInput) page.getElementById(\"pwd-level-one-b\")).setValueAttribute(pwdLevelOneB);",
      "90:         HtmlForm form = page.getFormByName(\"config\");",
      "91:         Page formSubmitPage = j.submit(form);",
      "92:         assertThat(formSubmitPage.getWebResponse().getStatusCode(), equalTo(200));",
      "94:         JSONObject rawJson = testPassword.lastJsonReceived;",
      "95:         String rawJsonToString = rawJson.toString();",
      "96:         assertThat(rawJsonToString, containsString(textSimple));",
      "97:         assertThat(rawJsonToString, containsString(pwdSimple));",
      "98:         assertThat(rawJsonToString, containsString(textLevelOne));",
      "99:         assertThat(rawJsonToString, containsString(pwdLevelOneA));",
      "101:         assertThat(rawJson.getString(RedactSecretJsonInErrorMessageSanitizer.REDACT_KEY), equalTo(\"pwd-simple\"));",
      "102:         assertThat(",
      "103:                 rawJson.getJSONObject(\"sub-one\").getJSONArray(RedactSecretJsonInErrorMessageSanitizer.REDACT_KEY),",
      "104:                 allOf(",
      "105:                         hasItem(\"pwd-level-one-a\"),",
      "106:                         hasItem(\"pwd-level-one-b\")",
      "107:                 )",
      "108:         );",
      "110:         JSONObject redactedJson = RedactSecretJsonInErrorMessageSanitizer.INSTANCE.sanitize(rawJson);",
      "111:         String redactedJsonToString = redactedJson.toString();",
      "112:         assertThat(redactedJsonToString, containsString(textSimple));",
      "113:         assertThat(redactedJsonToString, not(containsString(pwdSimple)));",
      "114:         assertThat(redactedJsonToString, containsString(textLevelOne));",
      "115:         assertThat(redactedJsonToString, not(containsString(pwdLevelOneA)));",
      "116:         assertThat(redactedJsonToString, not(containsString(pwdLevelOneB)));",
      "117:         assertThat(redactedJsonToString, containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE));",
      "118:     }",
      "120:     @TestExtension(\"passwordsAreRedacted_andOtherStayTheSame\")",
      "121:     public static class TestPassword implements RootAction {",
      "123:         public JSONObject lastJsonReceived;",
      "125:         public void doSubmitTest(StaplerRequest req, StaplerResponse res) throws Exception {",
      "126:             lastJsonReceived = req.getSubmittedForm();",
      "128:             res.setStatus(200);",
      "129:         }",
      "131:         @Override",
      "132:         public String getIconFileName() {",
      "133:             return null;",
      "134:         }",
      "136:         @Override",
      "137:         public String getDisplayName() {",
      "138:             return null;",
      "139:         }",
      "141:         @Override",
      "142:         public String getUrlName() {",
      "143:             return \"test\";",
      "144:         }",
      "145:     }",
      "147:     @Test",
      "148:     @Issue(\"SECURITY-765\")",
      "149:     public void checkSanitizationIsApplied_inDescriptor() throws Exception {",
      "150:         logging.record(\"/jenkins\", Level.ALL).capture(1);",
      "152:         j.jenkins.setCrumbIssuer(null);",
      "154:         JenkinsRule.WebClient wc = j.createWebClient();",
      "155:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
      "156:         HtmlPage page = wc.goTo(\"testDescribable\");",
      "157:         String secret = \"s3cr3t\";",
      "158:         ((HtmlInput) page.getElementById(\"password\")).setValueAttribute(secret);",
      "160:         HtmlForm form = page.getFormByName(\"config\");",
      "161:         Page formSubmitPage = j.submit(form);",
      "162:         assertThat(formSubmitPage.getWebResponse().getContentAsString(), allOf(",
      "163:                 containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),",
      "164:                 not(containsString(secret))",
      "165:         ));",
      "168:         Throwable thrown = logging.getRecords().get(0).getThrown();",
      "170:         assertThat(thrown.getCause().getMessage(), allOf(",
      "171:                 containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),",
      "172:                 not(containsString(secret))",
      "173:         ));",
      "176:         assertThat(thrown.getCause().getCause().getMessage(), allOf(",
      "177:                 containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),",
      "178:                 not(containsString(secret))",
      "179:         ));",
      "181:         StringWriter buffer = new StringWriter();",
      "182:         thrown.printStackTrace(new PrintWriter(buffer));",
      "183:         String fullStack = buffer.getBuffer().toString();",
      "184:         assertThat(fullStack, allOf(",
      "185:                 containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),",
      "186:                 not(containsString(secret))",
      "187:         ));",
      "188:     }",
      "190:     @Test",
      "191:     @Issue(\"SECURITY-765\")",
      "192:     public void checkSanitizationIsApplied_inStapler() throws Exception {",
      "193:         logging.record(\"/jenkins\", Level.ALL).capture(1);",
      "195:         j.jenkins.setCrumbIssuer(null);",
      "197:         JenkinsRule.WebClient wc = j.createWebClient();",
      "198:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
      "199:         HtmlPage page = wc.goTo(\"testStapler\");",
      "200:         String secret = \"s3cr3t\";",
      "201:         ((HtmlInput) page.getElementById(\"password\")).setValueAttribute(secret);",
      "203:         HtmlForm form = page.getFormByName(\"config\");",
      "204:         Page formSubmitPage = j.submit(form);",
      "205:         assertThat(formSubmitPage.getWebResponse().getContentAsString(), allOf(",
      "206:                 containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),",
      "207:                 not(containsString(secret))",
      "208:         ));",
      "211:         Throwable thrown = logging.getRecords().get(0).getThrown();",
      "213:         assertThat(thrown.getCause().getMessage(), allOf(",
      "214:                 containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),",
      "215:                 not(containsString(secret))",
      "216:         ));",
      "218:         StringWriter buffer = new StringWriter();",
      "219:         thrown.printStackTrace(new PrintWriter(buffer));",
      "220:         String fullStack = buffer.getBuffer().toString();",
      "221:         assertThat(fullStack, allOf(",
      "222:                 containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),",
      "223:                 not(containsString(secret))",
      "224:         ));",
      "225:     }",
      "227:     public static class TestDescribable implements Describable<TestDescribable> {",
      "229:         @DataBoundConstructor",
      "230:         public TestDescribable(Secret password) {",
      "231:             throw new IllegalArgumentException(\"Try to steal my password\");",
      "232:         }",
      "234:         public DescriptorImpl getDescriptor() {",
      "235:             return Jenkins.getInstance().getDescriptorByType(TestDescribable.DescriptorImpl.class);",
      "236:         }",
      "238:         @TestExtension({",
      "239:                 \"checkSanitizationIsApplied_inStapler\",",
      "240:                 \"checkSanitizationIsApplied_inDescriptor\"",
      "241:         })",
      "242:         public static final class DescriptorImpl extends Descriptor<TestDescribable> {",
      "244:         }",
      "245:     }",
      "247:     @TestExtension(\"checkSanitizationIsApplied_inDescriptor\")",
      "248:     public static class TestDescribablePage implements RootAction {",
      "250:         public TestDescribable testDescribable;",
      "252:         @RequirePOST",
      "253:         public void doConfigSubmit(StaplerRequest req, StaplerResponse rsp) throws Exception {",
      "254:             Jenkins.getInstance().getDescriptorOrDie(TestDescribable.class).newInstance(req, req.getSubmittedForm());",
      "255:         }",
      "257:         @Override",
      "258:         public String getIconFileName() {",
      "259:             return null;",
      "260:         }",
      "262:         @Override",
      "263:         public String getDisplayName() {",
      "264:             return null;",
      "265:         }",
      "267:         @Override",
      "268:         public String getUrlName() {",
      "269:             return \"testDescribable\";",
      "270:         }",
      "271:     }",
      "273:     @TestExtension(\"checkSanitizationIsApplied_inStapler\")",
      "274:     public static class TestStaplerPage implements RootAction {",
      "276:         public TestDescribable testDescribable;",
      "278:         @RequirePOST",
      "279:         public void doConfigSubmit(StaplerRequest req, StaplerResponse rsp) throws Exception {",
      "280:             req.bindJSON(TestDescribable.class, req.getSubmittedForm());",
      "281:         }",
      "283:         @Override",
      "284:         public String getIconFileName() {",
      "285:             return null;",
      "286:         }",
      "288:         @Override",
      "289:         public String getDisplayName() {",
      "290:             return null;",
      "291:         }",
      "293:         @Override",
      "294:         public String getUrlName() {",
      "295:             return \"testStapler\";",
      "296:         }",
      "297:     }",
      "298: }",
      "",
      "---------------"
    ],
    "test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestDescribablePage/index.jelly||test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestDescribablePage/index.jelly": [
      "File: test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestDescribablePage/index.jelly -> test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestDescribablePage/index.jelly",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <!--",
      "2: The MIT License",
      "4: Copyright (c) 2018 CloudBees, Inc.",
      "6: Permission is hereby granted, free of charge, to any person obtaining a copy",
      "7: of this software and associated documentation files (the \"Software\"), to deal",
      "8: in the Software without restriction, including without limitation the rights",
      "9: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "10: copies of the Software, and to permit persons to whom the Software is",
      "11: furnished to do so, subject to the following conditions:",
      "13: The above copyright notice and this permission notice shall be included in",
      "14: all copies or substantial portions of the Software.",
      "16: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "17: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "18: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "19: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "20: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "21: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
      "22: THE SOFTWARE.",
      "23: -->",
      "24: <?jelly escape-by-default='true'?>",
      "25: <j:jelly xmlns:j=\"jelly:core\" xmlns:l=\"/lib/layout\" xmlns:f=\"/lib/form\">",
      "26:     <l:layout title=\"Making sure the password field gets an encrypted value\">",
      "27:         <l:main-panel>",
      "28:             <f:form method=\"post\" name=\"config\" action=\"configSubmit\">",
      "29:                 <f:entry field=\"password\">",
      "30:                     <f:password id=\"password\"/>",
      "31:                 </f:entry>",
      "33:                 <f:bottomButtonBar>",
      "34:                     <f:submit value=\"submit\"/>",
      "35:                 </f:bottomButtonBar>",
      "36:             </f:form>",
      "37:         </l:main-panel>",
      "38:     </l:layout>",
      "39: </j:jelly>",
      "",
      "---------------"
    ],
    "test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestPassword/index.jelly||test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestPassword/index.jelly": [
      "File: test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestPassword/index.jelly -> test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestPassword/index.jelly",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <!--",
      "2: The MIT License",
      "4: Copyright (c) 2018 CloudBees, Inc.",
      "6: Permission is hereby granted, free of charge, to any person obtaining a copy",
      "7: of this software and associated documentation files (the \"Software\"), to deal",
      "8: in the Software without restriction, including without limitation the rights",
      "9: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "10: copies of the Software, and to permit persons to whom the Software is",
      "11: furnished to do so, subject to the following conditions:",
      "13: The above copyright notice and this permission notice shall be included in",
      "14: all copies or substantial portions of the Software.",
      "16: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "17: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "18: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "19: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "20: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "21: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
      "22: THE SOFTWARE.",
      "23: -->",
      "24: <?jelly escape-by-default='true'?>",
      "25: <j:jelly xmlns:j=\"jelly:core\" xmlns:l=\"/lib/layout\" xmlns:f=\"/lib/form\">",
      "26:     <l:layout title=\"Making sure the password field gets an encrypted value\">",
      "27:         <l:main-panel>",
      "28:             <f:form method=\"post\" name=\"config\" action=\"submitTest\">",
      "29:                 <f:entry field=\"text-simple\">",
      "30:                     <f:textbox id=\"text-simple\"/>",
      "31:                 </f:entry>",
      "32:                 <f:entry field=\"pwd-simple\">",
      "33:                     <f:password id=\"pwd-simple\"/>",
      "34:                 </f:entry>",
      "35:                 <f:section name=\"sub-one\">",
      "36:                     <f:entry field=\"text-level-one\">",
      "37:                         <f:textbox id=\"text-level-one\"/>",
      "38:                     </f:entry>",
      "39:                     <f:entry field=\"pwd-level-one-a\">",
      "40:                         <f:password id=\"pwd-level-one-a\"/>",
      "41:                     </f:entry>",
      "42:                     <f:entry field=\"pwd-level-one-b\">",
      "43:                         <f:password id=\"pwd-level-one-b\"/>",
      "44:                     </f:entry>",
      "45:                 </f:section>",
      "47:                 <f:bottomButtonBar>",
      "48:                     <f:submit value=\"submit\"/>",
      "49:                 </f:bottomButtonBar>",
      "50:             </f:form>",
      "51:         </l:main-panel>",
      "52:     </l:layout>",
      "53: </j:jelly>",
      "",
      "---------------"
    ],
    "test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestStaplerPage/index.jelly||test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestStaplerPage/index.jelly": [
      "File: test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestStaplerPage/index.jelly -> test/src/test/resources/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest/TestStaplerPage/index.jelly",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: <!--",
      "2: The MIT License",
      "4: Copyright (c) 2018 CloudBees, Inc.",
      "6: Permission is hereby granted, free of charge, to any person obtaining a copy",
      "7: of this software and associated documentation files (the \"Software\"), to deal",
      "8: in the Software without restriction, including without limitation the rights",
      "9: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "10: copies of the Software, and to permit persons to whom the Software is",
      "11: furnished to do so, subject to the following conditions:",
      "13: The above copyright notice and this permission notice shall be included in",
      "14: all copies or substantial portions of the Software.",
      "16: THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "17: IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "18: FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "19: AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "20: LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "21: OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN",
      "22: THE SOFTWARE.",
      "23: -->",
      "24: <?jelly escape-by-default='true'?>",
      "25: <j:jelly xmlns:j=\"jelly:core\" xmlns:l=\"/lib/layout\" xmlns:f=\"/lib/form\">",
      "26:     <l:layout title=\"Making sure the password field gets an encrypted value\">",
      "27:         <l:main-panel>",
      "28:             <f:form method=\"post\" name=\"config\" action=\"configSubmit\">",
      "29:                 <f:entry field=\"password\">",
      "30:                     <f:password id=\"password\"/>",
      "31:                 </f:entry>",
      "33:                 <f:bottomButtonBar>",
      "34:                     <f:submit value=\"submit\"/>",
      "35:                 </f:bottomButtonBar>",
      "36:             </f:form>",
      "37:         </l:main-panel>",
      "38:     </l:layout>",
      "39: </j:jelly>",
      "",
      "---------------"
    ],
    "war/src/main/webapp/scripts/hudson-behavior.js||war/src/main/webapp/scripts/hudson-behavior.js": [
      "File: war/src/main/webapp/scripts/hudson-behavior.js -> war/src/main/webapp/scripts/hudson-behavior.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "2579:                     addProperty(p, e.name.substring(r), e.value);",
      "2580:                 }",
      "2581:                 break;",
      "2583:             default:",
      "2584:                 p = findParent(e);",
      "2585:                 addProperty(p, e.name, e.value);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2582:             case \"password\":",
      "2583:                 p = findParent(e);",
      "2584:                 addProperty(p, e.name, e.value);",
      "2586:                 addProperty(p, \"$redact\", shortenName(e.name));",
      "2587:                 break;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "135fe9bd995d6f79a4cd551247138608c8fb5dec",
      "candidate_info": {
        "commit_hash": "135fe9bd995d6f79a4cd551247138608c8fb5dec",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/135fe9bd995d6f79a4cd551247138608c8fb5dec",
        "files": [
          "test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java"
        ],
        "message": "[SECURITY-765] Better test",
        "before_after_code_files": [
          "test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java||test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java||test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java"
          ],
          "candidate": [
            "test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java||test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java"
          ]
        }
      },
      "candidate_diff": {
        "test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java||test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java": [
          "File: test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java -> test/src/test/java/jenkins/security/RedactSecretJsonInErrorMessageSanitizerHtmlTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:     @Test",
          "148:     @Issue(\"SECURITY-765\")",
          "149:     public void checkSanitizationIsApplied_inDescriptor() throws Exception {",
          "152:         j.jenkins.setCrumbIssuer(null);",
          "",
          "[Removed Lines]",
          "150:         logging.record(\"/jenkins\", Level.ALL).capture(1);",
          "",
          "[Added Lines]",
          "150:         logging.record(\"\", Level.WARNING).capture(100);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:         ));",
          "170:         assertThat(thrown.getCause().getMessage(), allOf(",
          "171:                 containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),",
          "",
          "[Removed Lines]",
          "168:         Throwable thrown = logging.getRecords().get(0).getThrown();",
          "",
          "[Added Lines]",
          "168:         Throwable thrown = logging.getRecords().stream().filter(r -> r.getMessage().contains(\"Error while serving\")).findAny().get().getThrown();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "190:     @Test",
          "191:     @Issue(\"SECURITY-765\")",
          "192:     public void checkSanitizationIsApplied_inStapler() throws Exception {",
          "195:         j.jenkins.setCrumbIssuer(null);",
          "",
          "[Removed Lines]",
          "193:         logging.record(\"/jenkins\", Level.ALL).capture(1);",
          "",
          "[Added Lines]",
          "193:         logging.record(\"\", Level.WARNING).capture(100);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "208:         ));",
          "213:         assertThat(thrown.getCause().getMessage(), allOf(",
          "214:                 containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),",
          "",
          "[Removed Lines]",
          "211:         Throwable thrown = logging.getRecords().get(0).getThrown();",
          "",
          "[Added Lines]",
          "211:         Throwable thrown = logging.getRecords().stream().filter(r -> r.getMessage().contains(\"Error while serving\")).findAny().get().getThrown();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "740f9eb3ede9b76f0b4126e581870c6659822386",
      "candidate_info": {
        "commit_hash": "740f9eb3ede9b76f0b4126e581870c6659822386",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/740f9eb3ede9b76f0b4126e581870c6659822386",
        "files": [
          "core/src/main/java/hudson/PluginManager.java",
          "core/src/main/java/hudson/init/impl/InstallUncaughtExceptionHandler.java",
          "core/src/main/java/jenkins/model/Jenkins.java",
          "core/src/main/java/jenkins/telemetry/impl/java11/CatcherClassLoader.java",
          "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvent.java",
          "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvents.java",
          "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java",
          "core/src/main/java/jenkins/util/AntClassLoader.java",
          "test/src/test/java/jenkins/telemetry/MissingClassTelemetryTest.java",
          "test/src/test/java/jenkins/telemetry/impl/java11/MissingClassTelemetryFasterTest.java"
        ],
        "message": "[JENKINS-57223] - Java11 ClassNotFoundExceptions Telemetry (#4003)\n\n* Proof of concept catching exceptions for java 11 removed classes\n\n* Add ClassLoader to a lot of places. Backup\n\n* Commenting out wip stuff, change packages, count hits findClass\n\n* Improvements, sending and tests\n\n* Removing the catcher from chain to make funcional tests work\n\n* Removing ignored places and a bit of cleaning\n\n* Cleaning unused code after removing the catcher from the chain\n\n* Remove imports cleaning to avoid extra changes\n\n* Cleaning and explaining comments\n\n* Explaining comments\n\n* fix javadoc\n\n* [JENKINS-57223] Address feedback from Matt Sicker. Improve in concurrency\n\n* [JENKINS-57223] Search on cause and suppressed exceptions and fix on name reported\n\n* [JENKINS-57223] Add cycles control on exceptions and refactor reporting method\n\n* [JENKINS-57223] Add trim to class name comparison\n\n* [JENKINS-57223] Address Oleg's feedback and some improvements\n\n* Avoid sending CNFE when ignored later in code\n* Disable when running on Java 8 and a test\n* Avoid sending empty events\n\n* [JENKINS-57223] Polish assertion after printing all missing classes in logs\n\n* [JENKINS-57223] Avoid extra if and add curly braces\n\n* [JENKINS-57223] Better comment about time window check",
        "before_after_code_files": [
          "core/src/main/java/hudson/PluginManager.java||core/src/main/java/hudson/PluginManager.java",
          "core/src/main/java/hudson/init/impl/InstallUncaughtExceptionHandler.java||core/src/main/java/hudson/init/impl/InstallUncaughtExceptionHandler.java",
          "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java",
          "core/src/main/java/jenkins/telemetry/impl/java11/CatcherClassLoader.java||core/src/main/java/jenkins/telemetry/impl/java11/CatcherClassLoader.java",
          "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvent.java||core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvent.java",
          "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvents.java||core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvents.java",
          "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java||core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java",
          "core/src/main/java/jenkins/util/AntClassLoader.java||core/src/main/java/jenkins/util/AntClassLoader.java",
          "test/src/test/java/jenkins/telemetry/MissingClassTelemetryTest.java||test/src/test/java/jenkins/telemetry/MissingClassTelemetryTest.java",
          "test/src/test/java/jenkins/telemetry/impl/java11/MissingClassTelemetryFasterTest.java||test/src/test/java/jenkins/telemetry/impl/java11/MissingClassTelemetryFasterTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ],
          "candidate": [
            "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/PluginManager.java||core/src/main/java/hudson/PluginManager.java": [
          "File: core/src/main/java/hudson/PluginManager.java -> core/src/main/java/hudson/PluginManager.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: import jenkins.model.Jenkins;",
          "65: import jenkins.plugins.DetachedPluginsUtil;",
          "66: import jenkins.security.CustomClassFilter;",
          "67: import jenkins.util.SystemProperties;",
          "68: import jenkins.util.io.OnMaster;",
          "69: import jenkins.util.xml.RestrictiveEntityResolver;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67: import jenkins.telemetry.impl.java11.MissingClassTelemetry;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2065:                 loaded.put(name, null);",
          "2066:             }",
          "2069:         }",
          "2071:         @Override",
          "",
          "[Removed Lines]",
          "2068:             throw new ClassNotFoundException(name);",
          "",
          "[Added Lines]",
          "2069:             ClassNotFoundException cnfe = new ClassNotFoundException(name);",
          "2070:             MissingClassTelemetry.reportException(name, cnfe);",
          "2071:             throw cnfe;",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/init/impl/InstallUncaughtExceptionHandler.java||core/src/main/java/hudson/init/impl/InstallUncaughtExceptionHandler.java": [
          "File: core/src/main/java/hudson/init/impl/InstallUncaughtExceptionHandler.java -> core/src/main/java/hudson/init/impl/InstallUncaughtExceptionHandler.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package hudson.init.impl;",
          "3: import hudson.init.Initializer;",
          "5: import jenkins.model.Jenkins;",
          "6: import org.kohsuke.stapler.WebApp;",
          "7: import org.kohsuke.stapler.compression.CompressionFilter;",
          "9: import javax.servlet.ServletException;",
          "10: import java.io.IOException;",
          "11: import java.util.logging.Level;",
          "12: import java.util.logging.Logger;",
          "",
          "[Removed Lines]",
          "4: import java.io.EOFException;",
          "14: import org.kohsuke.stapler.Stapler;",
          "",
          "[Added Lines]",
          "5: import jenkins.telemetry.impl.java11.MissingClassTelemetry;",
          "6: import org.kohsuke.stapler.Stapler;",
          "11: import java.io.EOFException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:                 }",
          "30:                 req.setAttribute(\"javax.servlet.error.exception\",e);",
          "31:                 try {",
          "32:                     WebApp.get(j.servletContext).getSomeStapler().invoke(req, rsp, j, \"/oops\");",
          "33:                 } catch (ServletException | IOException x) {",
          "34:                     if (!Stapler.isSocketException(x)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35:                     MissingClassTelemetry.reportExceptionInside(e);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "42:         }",
          "43:         catch (SecurityException ex) {",
          "44:             LOGGER.log(Level.SEVERE,",
          "46:                                                        \"If any threads die due to unhandled coding errors then there will be no logging of this information.  \" +",
          "49:                                                        \"`setDefaultUncaughtExceptionHandler` permission and enable it.\", ex);",
          "50:         }",
          "51:     }",
          "",
          "[Removed Lines]",
          "45:                                                        \"Failed to set the default UncaughtExceptionHandler.  \" +",
          "47:                                                        \"The lack of this diagnostic information will make it harder to track down issues which will reduce the supportability of Jenkins.  \" +",
          "48:                                                        \"It is highly recommended that you consult the documentation that comes with you servlet container on how to allow the \" +",
          "",
          "[Added Lines]",
          "49:                                                        \"Failed to set the default UncaughtExceptionHandler.  \" +",
          "51:                                                        \"The lack of this diagnostic information will make it harder to track down issues which will reduce the supportability of Jenkins.  \" +",
          "52:                                                        \"It is highly recommended that you consult the documentation that comes with you servlet container on how to allow the \" +",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "70:                        \"A thread (\" + t.getName() + '/' + t.getId()",
          "71:                                      + \") died unexpectedly due to an uncaught exception, this may leave your Jenkins in a bad way and is usually indicative of a bug in the code.\",",
          "72:                        ex);",
          "73:         }",
          "75:     }",
          "77:     private InstallUncaughtExceptionHandler() {}",
          "79: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:             MissingClassTelemetry.reportExceptionInside(ex);",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/model/Jenkins.java||core/src/main/java/jenkins/model/Jenkins.java": [
          "File: core/src/main/java/jenkins/model/Jenkins.java -> core/src/main/java/jenkins/model/Jenkins.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: import jenkins.security.stapler.StaplerDispatchable;",
          "44: import jenkins.security.RedactSecretJsonInErrorMessageSanitizer;",
          "45: import jenkins.security.stapler.TypedFilter;",
          "46: import jenkins.util.SystemProperties;",
          "47: import hudson.cli.declarative.CLIMethod;",
          "48: import hudson.cli.declarative.CLIResolver;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: import jenkins.telemetry.impl.java11.CatcherClassLoader;",
          "47: import jenkins.telemetry.impl.java11.MissingClassTelemetry;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "870:             }",
          "873:             final InitStrategy is = InitStrategy.get(Thread.currentThread().getContextClassLoader());",
          "875:             Trigger.timer = new java.util.Timer(\"Jenkins cron thread\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "878:             if (MissingClassTelemetry.enabled() && !(Thread.currentThread().getContextClassLoader() instanceof CatcherClassLoader)) {",
          "879:                 Thread.currentThread().setContextClassLoader(new CatcherClassLoader(Thread.currentThread().getContextClassLoader()));",
          "880:             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "910:                 pluginManager = PluginManager.createDefault(this);",
          "911:             this.pluginManager = pluginManager;",
          "912:             WebApp webApp = WebApp.get(servletContext);",
          "915:             webApp.setJsonInErrorMessageSanitizer(RedactSecretJsonInErrorMessageSanitizer.INSTANCE);",
          "917:             TypedFilter typedFilter = new TypedFilter();",
          "",
          "[Removed Lines]",
          "914:             webApp.setClassLoader(pluginManager.uberClassLoader);",
          "",
          "[Added Lines]",
          "927:             ClassLoader classLoaderToAssign;",
          "928:             if (MissingClassTelemetry.enabled() && !(pluginManager.uberClassLoader instanceof CatcherClassLoader)) {",
          "929:                 classLoaderToAssign = new CatcherClassLoader(pluginManager.uberClassLoader);",
          "930:             } else {",
          "931:                 classLoaderToAssign = pluginManager.uberClassLoader;",
          "932:             }",
          "933:             webApp.setClassLoader(classLoaderToAssign);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "924:             webApp.setFilteredDoActionTriggerListener(actionListener);",
          "925:             webApp.setFilteredFieldTriggerListener(actionListener);",
          "929:             ClassFilterImpl.register();",
          "",
          "[Removed Lines]",
          "927:             adjuncts = new AdjunctManager(servletContext, pluginManager.uberClassLoader,\"adjuncts/\"+SESSION_HASH, TimeUnit.DAYS.toMillis(365));",
          "",
          "[Added Lines]",
          "950:             adjuncts = new AdjunctManager(servletContext, classLoaderToAssign, \"adjuncts/\" + SESSION_HASH, TimeUnit.DAYS.toMillis(365));",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/telemetry/impl/java11/CatcherClassLoader.java||core/src/main/java/jenkins/telemetry/impl/java11/CatcherClassLoader.java": [
          "File: core/src/main/java/jenkins/telemetry/impl/java11/CatcherClassLoader.java -> core/src/main/java/jenkins/telemetry/impl/java11/CatcherClassLoader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package jenkins.telemetry.impl.java11;",
          "27: import org.kohsuke.accmod.Restricted;",
          "28: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "30: @Restricted(NoExternalUse.class)",
          "31: public class CatcherClassLoader extends ClassLoader {",
          "33:     public CatcherClassLoader(ClassLoader parent) {",
          "34:         super(parent);",
          "35:     }",
          "45:     @Override",
          "46:     protected Class<?> findClass(String name) throws ClassNotFoundException {",
          "47:         ClassNotFoundException e = new ClassNotFoundException(name);",
          "48:         MissingClassTelemetry.reportException(name, e);",
          "49:         throw e;",
          "50:     }",
          "51: }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvent.java||core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvent.java": [
          "File: core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvent.java -> core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvent.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package jenkins.telemetry.impl.java11;",
          "27: import javax.annotation.Nonnull;",
          "28: import java.io.PrintWriter;",
          "29: import java.io.Serializable;",
          "30: import java.io.StringWriter;",
          "35: class MissingClassEvent {",
          "36:     private String time;",
          "37:     private long occurrences;",
          "38:     private String stackTrace;",
          "39:     private String className;",
          "41:     String getStackTrace() {",
          "42:         return stackTrace;",
          "43:     }",
          "45:     void setStackTrace(String stackTrace) {",
          "46:         this.stackTrace = stackTrace;",
          "47:     }",
          "49:     String getClassName() {",
          "50:         return className;",
          "51:     }",
          "53:     void setClassName(String className) {",
          "54:         this.className = className;",
          "55:     }",
          "57:     MissingClassEvent(@Nonnull String name, @Nonnull Throwable t) {",
          "58:         this.className = name;",
          "60:         StringWriter stackTrace = new StringWriter();",
          "61:         t.printStackTrace(new PrintWriter(stackTrace));",
          "62:         this.stackTrace = stackTrace.toString();",
          "64:         this.time = MissingClassTelemetry.clientDateString();",
          "65:         this.occurrences = 1;",
          "66:     }",
          "68:     String getTime() {",
          "69:         return time;",
          "70:     }",
          "72:     long getOccurrences() {",
          "73:         return occurrences;",
          "74:     }",
          "76:     void setOccurrences(long occurrences) {",
          "77:         this.occurrences = occurrences;",
          "78:     }",
          "80:     void setTime(String time) {",
          "81:         this.time = time;",
          "82:     }",
          "84:     @Override",
          "85:     public String toString() {",
          "86:         return \"MissingClassEvent{\" +",
          "87:                 \"time='\" + time + '\\'' +",
          "88:                 \", occurrences=\" + occurrences +",
          "89:                 \", stackTrace='\" + stackTrace + '\\'' +",
          "90:                 \", className='\" + className + '\\'' +",
          "91:                 '}';",
          "92:     }",
          "93: }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvents.java||core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvents.java": [
          "File: core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvents.java -> core/src/main/java/jenkins/telemetry/impl/java11/MissingClassEvents.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package jenkins.telemetry.impl.java11;",
          "27: import com.google.common.annotations.VisibleForTesting;",
          "29: import javax.annotation.Nonnull;",
          "30: import java.util.Arrays;",
          "31: import java.util.Collections;",
          "32: import java.util.List;",
          "33: import java.util.concurrent.ConcurrentHashMap;",
          "34: import java.util.concurrent.atomic.AtomicLong;",
          "36: public class MissingClassEvents {",
          "41:     @VisibleForTesting",
          "47:     private ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> events = new ConcurrentHashMap<>(MAX_EVENTS_PER_SEND);",
          "57:     public long put(String name, @Nonnull Throwable t) {",
          "59:         final AtomicLong occurrences = new AtomicLong();",
          "62:         List<StackTraceElement> key = Collections.unmodifiableList(Arrays.asList(t.getStackTrace()));",
          "63:         events.compute(key, (stackTraceElements, missingClassEvent) -> {",
          "65:             if (missingClassEvent == null) {",
          "67:                 if (events.size() < MAX_EVENTS_PER_SEND) {",
          "69:                     MissingClassEvent newEvent = new MissingClassEvent(name, t);",
          "70:                     occurrences.set(1);",
          "71:                     return newEvent;",
          "72:                 } else {",
          "73:                     return null;",
          "74:                 }",
          "76:             } else {",
          "78:                 occurrences.set(missingClassEvent.getOccurrences());",
          "79:                 missingClassEvent.setOccurrences(occurrences.incrementAndGet());",
          "80:                 missingClassEvent.setTime(MissingClassTelemetry.clientDateString());",
          "81:                 return missingClassEvent;",
          "82:             }",
          "83:         });",
          "85:         return occurrences.get();",
          "86:     }",
          "94:     @VisibleForTesting",
          "96:         ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> currentEvents = events;",
          "97:         events = new ConcurrentHashMap<>(MAX_EVENTS_PER_SEND);",
          "98:         return currentEvents;",
          "99:     }",
          "101:     @Override",
          "102:     public String toString() {",
          "103:         return \"MissingClassEvents{\" +",
          "104:                 \"events=\" + events +",
          "105:                 '}';",
          "106:     }",
          "107: }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java||core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java": [
          "File: core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java -> core/src/main/java/jenkins/telemetry/impl/java11/MissingClassTelemetry.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "25: package jenkins.telemetry.impl.java11;",
          "27: import com.google.common.annotations.VisibleForTesting;",
          "28: import hudson.Extension;",
          "29: import io.jenkins.lib.versionnumber.JavaSpecificationVersion;",
          "30: import jenkins.model.Jenkins;",
          "31: import jenkins.telemetry.Telemetry;",
          "32: import jenkins.util.java.JavaUtils;",
          "33: import net.sf.json.JSONArray;",
          "34: import net.sf.json.JSONObject;",
          "35: import org.kohsuke.accmod.Restricted;",
          "36: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "38: import javax.annotation.CheckForNull;",
          "39: import javax.annotation.Nonnull;",
          "40: import java.text.DateFormat;",
          "41: import java.text.SimpleDateFormat;",
          "42: import java.time.LocalDate;",
          "43: import java.util.Arrays;",
          "44: import java.util.Collections;",
          "45: import java.util.Date;",
          "46: import java.util.HashSet;",
          "47: import java.util.IdentityHashMap;",
          "48: import java.util.List;",
          "49: import java.util.Set;",
          "50: import java.util.TimeZone;",
          "51: import java.util.concurrent.ConcurrentHashMap;",
          "52: import java.util.logging.Level;",
          "53: import java.util.logging.Logger;",
          "60: @Extension",
          "61: @Restricted(NoExternalUse.class)",
          "62: public class MissingClassTelemetry extends Telemetry {",
          "63:     private static final Logger LOGGER = Logger.getLogger(MissingClassTelemetry.class.getName());",
          "66:     private static MissingClassEvents events = new MissingClassEvents();",
          "69:     private final static LocalDate START = LocalDate.of(2019, 4, 1);",
          "71:     private final static LocalDate END = START.plusMonths(24);",
          "74:     private static final Set reportableExceptions =",
          "75:             new HashSet<Class>(Arrays.asList(ClassNotFoundException.class, NoClassDefFoundError.class));",
          "77:     @VisibleForTesting",
          "84:     private final static String[] MOVED_PACKAGES = new String[] {\"javax.activation\", \"javax.annotation\", \"javax.jws\",",
          "85:             \"javax.rmi\", \"javax.transaction\", \"javax.xml.bind\", \"javax.xml.soap\", \"javax.xml.ws\", \"org.omg\",",
          "86:             \"javax.activity\", \"com.sun\", \"sun\"};",
          "92:     private static String[][] IGNORED_PLACES = {",
          "93:             {\"hudson.util.XStream2$AssociatedConverterImpl\", \"findConverter\"},",
          "94:             {\"org.jenkinsci.plugins.workflow.cps.global.GrapeHack\", \"hack\"},",
          "95:             {\"org.codehaus.groovy.runtime.callsite.CallSiteArray\", \"createCallStaticSite\"},",
          "96:             {\"groovy.lang.MetaClassImpl\", \"addProperties\"},",
          "98:             {\"hudson.PluginManager.UberClassLoader\", \"findClass\"},",
          "99:             {\"hudson.ExtensionFinder$GuiceFinder$FaultTolerantScope$1\", \"get\"},",
          "100:             {\"hudson.ExtensionFinder$GuiceFinder$SezpozModule\", \"resolve\"},",
          "101:             {\"java.beans.Introspector\", \"findCustomizerClass\"},",
          "102:             {\"com.sun.beans.finder.InstanceFinder\", \"instantiate\"},",
          "103:             {\"com.sun.beans.finder.ClassFinder\", \"findClass\"},",
          "104:             {\"java.util.ResourceBundle$Control\", \"newBundle\"},",
          "106:             {\"org.codehaus.groovy.control.ClassNodeResolver\", \"tryAsLoaderClassOrScript\"},",
          "107:             {\"org.kohsuke.stapler.RequestImpl$TypePair\", \"convertJSON\"}",
          "108:     };",
          "110:     @Nonnull",
          "111:     @Override",
          "112:     public String getDisplayName() {",
          "113:         return \"Missing classes related with Java updates\";",
          "114:     }",
          "116:     @Nonnull",
          "117:     @Override",
          "118:     public LocalDate getStart() {",
          "119:         return START;",
          "120:     }",
          "122:     @Nonnull",
          "123:     @Override",
          "124:     public LocalDate getEnd() {",
          "125:         return END;",
          "126:     }",
          "132:     @VisibleForTesting",
          "134:         return events;",
          "135:     }",
          "141:     public static boolean enabled() {",
          "142:         return JavaUtils.getCurrentJavaRuntimeVersionNumber().isNewerThan(JavaSpecificationVersion.JAVA_8);",
          "143:     }",
          "145:     @CheckForNull",
          "146:     @Override",
          "147:     public JSONObject createContent() {",
          "150:         if (!enabled()) {",
          "151:             return null;",
          "152:         }",
          "155:         JSONArray events = formatEventsAndInitialize();",
          "156:         if (events.size() == 0) {",
          "157:             return null;",
          "158:         }",
          "160:         JSONObject info = new JSONObject();",
          "161:         info.put(\"core\", Jenkins.getVersion() != null ? Jenkins.getVersion().toString() : \"UNKNOWN\");",
          "162:         info.put(\"clientDate\", clientDateString());",
          "163:         info.put(\"classMissingEvents\", events);",
          "165:         return JSONObject.fromObject(info);",
          "166:     }",
          "173:     @Nonnull",
          "174:     private JSONArray formatEventsAndInitialize() {",
          "176:         ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> toReport = MissingClassTelemetry.events.getEventsAndClean();",
          "177:         if (LOGGER.isLoggable(Level.FINE)) {",
          "178:             LOGGER.fine(\"Cleaned events for missing classes\");",
          "179:         }",
          "181:         return formatEvents(toReport);",
          "182:     }",
          "192:     @Nonnull",
          "193:     private JSONArray formatEvents(@Nonnull ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> events) {",
          "194:         JSONArray jsonEvents = new JSONArray();",
          "196:         events.forEach((stackTrace, event) -> {",
          "197:             JSONObject eventObject = new JSONObject();",
          "198:             eventObject.put(\"className\", event.getClassName());",
          "199:             eventObject.put(\"class\", event.getClassName());",
          "200:             eventObject.put(\"time\", event.getTime());",
          "201:             eventObject.put(\"occurrences\", Long.toString(event.getOccurrences()));",
          "202:             eventObject.put(\"stacktrace\", event.getStackTrace());",
          "204:             jsonEvents.add(eventObject);",
          "205:         });",
          "207:         return jsonEvents;",
          "208:     }",
          "214:     @Nonnull",
          "215:     static String clientDateString() {",
          "216:         TimeZone tz = TimeZone.getTimeZone(\"UTC\");",
          "217:         DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm'Z'\");",
          "218:         df.setTimeZone(tz); // strip timezone",
          "219:         return df.format(new Date());",
          "220:     }",
          "229:     public static void reportException(@Nonnull String name, @Nonnull Throwable e) {",
          "230:         if (enabled()) {",
          "232:             name = name.replace('/', '.').trim();",
          "236:             if (isFromMovedPackage(name) && !calledFromIgnoredPlace(e)) {",
          "237:                 events.put(name, e);",
          "238:                 if (LOGGER.isLoggable(Level.WARNING))",
          "239:                     LOGGER.log(Level.WARNING, \"Added a missed class for missing class telemetry. Class: \" + name, e);",
          "240:             }",
          "241:         }",
          "242:     }",
          "249:     private static boolean calledFromIgnoredPlace(@Nonnull Throwable throwable) {",
          "250:         for(String[] ignoredPlace : IGNORED_PLACES) {",
          "251:             if (calledFrom(throwable, ignoredPlace[0], ignoredPlace[1])) {",
          "252:                 return true;",
          "253:             }",
          "254:         }",
          "255:         return false;",
          "256:     }",
          "265:     private static boolean calledFrom (@Nonnull Throwable throwable, @Nonnull String clazz, @Nonnull String method){",
          "266:         StackTraceElement[] trace = throwable.getStackTrace();",
          "267:         for (StackTraceElement el : trace) {",
          "269:             if (clazz.equals(el.getClassName()) && el.getMethodName().equals(method)) {",
          "270:                 return true;",
          "271:             }",
          "272:         }",
          "273:         return false;",
          "274:     }",
          "283:     private static void reportException(@Nonnull Throwable e) {",
          "284:         if (enabled()) {",
          "285:             String name = e.getMessage();",
          "287:             if (name == null || name.trim().isEmpty()) {",
          "288:                 LOGGER.log(Level.INFO, \"No class name could be extracted from the throwable to determine if it's reportable\", e);",
          "289:             } else {",
          "290:                 reportException(name, e);",
          "291:             }",
          "292:         }",
          "293:     }",
          "295:     private static boolean isFromMovedPackage(@Nonnull String clazz) {",
          "296:         for (String movedPackage : MOVED_PACKAGES) {",
          "297:             if (clazz.startsWith(movedPackage)) {",
          "298:                 return true;",
          "299:             }",
          "300:         }",
          "301:         return false;",
          "302:     }",
          "309:     public static void reportExceptionInside(@Nonnull Throwable e) {",
          "310:         if (enabled()) {",
          "312:             Set<Throwable> exceptionsReviewed = Collections.newSetFromMap(new IdentityHashMap<>());",
          "313:             reportExceptionInside(e, exceptionsReviewed);",
          "314:         }",
          "315:     }",
          "324:     private static boolean reportExceptionInside(@Nonnull Throwable e, @Nonnull Set<Throwable> exceptionsReviewed) {",
          "325:         if (exceptionsReviewed.contains(e)) {",
          "326:             LOGGER.log(Level.WARNING, CIRCULAR_REFERENCE, e);",
          "328:             return false;",
          "329:         }",
          "333:         exceptionsReviewed.add(e);",
          "336:         if (isMissedClassRelatedException(e)) {",
          "337:             MissingClassTelemetry.reportException(e);",
          "338:             return true;",
          "339:         }",
          "342:         if (e.getCause() != null) {",
          "343:             if (reportExceptionInside(e.getCause(), exceptionsReviewed)) {",
          "344:                 return true;",
          "345:             }",
          "346:         }",
          "349:         for (Throwable suppressed: e.getSuppressed()) {",
          "350:             if (suppressed != null) {",
          "351:                 if (reportExceptionInside(suppressed, exceptionsReviewed)) {",
          "352:                     return true;",
          "353:                 }",
          "354:             }",
          "355:         }",
          "358:         return false;",
          "359:     }",
          "367:     private static boolean isMissedClassRelatedException(Throwable e) {",
          "368:         return reportableExceptions.contains(e.getClass());",
          "369:     }",
          "370: }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/util/AntClassLoader.java||core/src/main/java/jenkins/util/AntClassLoader.java": [
          "File: core/src/main/java/jenkins/util/AntClassLoader.java -> core/src/main/java/jenkins/util/AntClassLoader.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: package jenkins.util;",
          "21: import org.apache.tools.ant.BuildEvent;",
          "22: import org.apache.tools.ant.BuildException;",
          "23: import org.apache.tools.ant.Project;",
          "",
          "[Removed Lines]",
          "20: import java.nio.file.Files;",
          "",
          "[Added Lines]",
          "20: import jenkins.telemetry.impl.java11.MissingClassTelemetry;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40: import java.lang.reflect.Constructor;",
          "41: import java.net.MalformedURLException;",
          "42: import java.net.URL;",
          "43: import java.security.CodeSource;",
          "44: import java.security.ProtectionDomain;",
          "45: import java.security.cert.Certificate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: import java.nio.file.Files;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1070:         if (theClass != null) {",
          "1071:             return theClass;",
          "1072:         }",
          "1090:                 }",
          "1093:             }",
          "1094:         }",
          "1095:         if (resolve) {",
          "1096:             resolveClass(theClass);",
          "",
          "[Removed Lines]",
          "1073:         if (isParentFirst(classname)) {",
          "1074:             try {",
          "1075:                 theClass = findBaseClass(classname);",
          "1076:                 log(\"Class \" + classname + \" loaded from parent loader \" + \"(parentFirst)\",",
          "1077:                         Project.MSG_DEBUG);",
          "1078:             } catch (ClassNotFoundException cnfe) {",
          "1079:                 theClass = findClass(classname);",
          "1080:                 log(\"Class \" + classname + \" loaded from ant loader \" + \"(parentFirst)\",",
          "1081:                         Project.MSG_DEBUG);",
          "1082:             }",
          "1083:         } else {",
          "1084:             try {",
          "1085:                 theClass = findClass(classname);",
          "1086:                 log(\"Class \" + classname + \" loaded from ant loader\", Project.MSG_DEBUG);",
          "1087:             } catch (ClassNotFoundException cnfe) {",
          "1088:                 if (ignoreBase) {",
          "1089:                     throw cnfe;",
          "1091:                 theClass = findBaseClass(classname);",
          "1092:                 log(\"Class \" + classname + \" loaded from parent loader\", Project.MSG_DEBUG);",
          "",
          "[Added Lines]",
          "1076:         try {",
          "1077:             if (isParentFirst(classname)) {",
          "1078:                 try {",
          "1079:                     theClass = findBaseClass(classname);",
          "1080:                     log(\"Class \" + classname + \" loaded from parent loader \" + \"(parentFirst)\",",
          "1081:                             Project.MSG_DEBUG);",
          "1082:                 } catch (ClassNotFoundException cnfe) {",
          "1083:                     theClass = findClass(classname);",
          "1084:                     log(\"Class \" + classname + \" loaded from ant loader \" + \"(parentFirst)\",",
          "1085:                             Project.MSG_DEBUG);",
          "1086:                 }",
          "1087:             } else {",
          "1088:                 try {",
          "1089:                     theClass = findClass(classname);",
          "1090:                     log(\"Class \" + classname + \" loaded from ant loader\", Project.MSG_DEBUG);",
          "1091:                 } catch (ClassNotFoundException cnfe) {",
          "1092:                     if (ignoreBase) {",
          "1093:                         throw cnfe;",
          "1094:                     }",
          "1095:                     theClass = findBaseClass(classname);",
          "1096:                     log(\"Class \" + classname + \" loaded from parent loader\", Project.MSG_DEBUG);",
          "1099:         } catch (ClassNotFoundException cnfe) {",
          "1102:             MissingClassTelemetry.reportException(classname, cnfe);",
          "1103:             throw cnfe;",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/telemetry/MissingClassTelemetryTest.java||test/src/test/java/jenkins/telemetry/MissingClassTelemetryTest.java": [
          "File: test/src/test/java/jenkins/telemetry/MissingClassTelemetryTest.java -> test/src/test/java/jenkins/telemetry/MissingClassTelemetryTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package jenkins.telemetry;",
          "26: import hudson.ExtensionList;",
          "27: import hudson.model.UnprotectedRootAction;",
          "28: import hudson.security.csrf.CrumbExclusion;",
          "29: import jenkins.telemetry.impl.java11.CatcherClassLoader;",
          "30: import jenkins.telemetry.impl.java11.MissingClassTelemetry;",
          "31: import net.sf.json.JSONArray;",
          "32: import net.sf.json.JSONObject;",
          "33: import org.apache.commons.io.IOUtils;",
          "34: import org.junit.Assume;",
          "35: import org.junit.Before;",
          "36: import org.junit.Rule;",
          "37: import org.junit.Test;",
          "38: import org.jvnet.hudson.test.JenkinsRule;",
          "39: import org.jvnet.hudson.test.TestExtension;",
          "40: import org.kohsuke.stapler.StaplerRequest;",
          "41: import org.kohsuke.stapler.StaplerResponse;",
          "43: import javax.annotation.CheckForNull;",
          "44: import javax.servlet.FilterChain;",
          "45: import javax.servlet.ServletException;",
          "46: import javax.servlet.http.HttpServletRequest;",
          "47: import javax.servlet.http.HttpServletResponse;",
          "48: import java.io.IOException;",
          "49: import java.io.StringWriter;",
          "50: import java.nio.charset.StandardCharsets;",
          "52: import static org.junit.Assert.assertEquals;",
          "57: public class MissingClassTelemetryTest {",
          "58:     private static final String TELEMETRY_ENDPOINT = \"uplink\";",
          "59:     private CatcherClassLoader cl;",
          "61:     @Rule",
          "62:     public JenkinsRule j = new JenkinsRule();",
          "64:     private static JSONObject received = null;",
          "66:     @Before",
          "67:     public void prepare() throws Exception {",
          "68:         received = null;",
          "69:         cl = new CatcherClassLoader(this.getClass().getClassLoader());",
          "70:         Telemetry.ENDPOINT = j.getURL().toString() + TELEMETRY_ENDPOINT + \"/events\";",
          "71:         j.jenkins.setNoUsageStatistics(false); // tests usually don't submit this, but we need this",
          "72:     }",
          "79:     @Test",
          "80:     public void telemetrySentWorks() throws InterruptedException {",
          "81:         Assume.assumeTrue(\"The telemetry should be enabled\", MissingClassTelemetry.enabled());",
          "84:         for(int i = 0; i < 5; i++) {",
          "85:             try {",
          "86:                 cl.loadClass(\"sun.java.MyNonExistentClass\");",
          "87:             } catch (ClassNotFoundException ignored) {",
          "88:             }",
          "89:         }",
          "92:         ExtensionList.lookupSingleton(Telemetry.TelemetryReporter.class).doRun();",
          "93:         do {",
          "95:             Thread.sleep(250);",
          "96:         } while (received == null); // this might end up being flaky due to 1 to many active telemetry trials",
          "101:         assertEquals(MissingClassTelemetry.class.getName(), received.getString(\"type\"));",
          "102:         JSONArray events = received.getJSONObject(\"payload\").getJSONArray(\"classMissingEvents\");",
          "103:         assertEquals(1, events.size());",
          "104:         assertEquals(\"sun.java.MyNonExistentClass\", ((JSONObject) events.get(0)).get(\"className\"));",
          "105:         assertEquals(5, Integer.parseInt( (String) ((JSONObject) events.get(0)).get(\"occurrences\")));",
          "106:     }",
          "111:     @TestExtension",
          "112:     public static class NoCrumb extends CrumbExclusion {",
          "113:         @Override",
          "114:         public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {",
          "115:             String pathInfo = request.getPathInfo();",
          "116:             if (pathInfo != null && pathInfo.startsWith(\"/uplink\")) {",
          "117:                 chain.doFilter(request, response);",
          "118:                 return true;",
          "119:             }",
          "120:             return false;",
          "121:         }",
          "122:     }",
          "124:     @TestExtension",
          "125:     public static class TelemetryReceiver implements UnprotectedRootAction {",
          "126:         public void doEvents(StaplerRequest request, StaplerResponse response) throws IOException {",
          "127:             StringWriter sw = new StringWriter();",
          "128:             IOUtils.copy(request.getInputStream(), sw, StandardCharsets.UTF_8);",
          "129:             received = JSONObject.fromObject(sw.toString());",
          "130:         }",
          "132:         @CheckForNull",
          "133:         @Override",
          "134:         public String getIconFileName() {",
          "135:             return null;",
          "136:         }",
          "138:         @CheckForNull",
          "139:         @Override",
          "140:         public String getDisplayName() {",
          "141:             return null;",
          "142:         }",
          "144:         @CheckForNull",
          "145:         @Override",
          "146:         public String getUrlName() {",
          "147:             return TELEMETRY_ENDPOINT;",
          "148:         }",
          "149:     }",
          "150: }",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/telemetry/impl/java11/MissingClassTelemetryFasterTest.java||test/src/test/java/jenkins/telemetry/impl/java11/MissingClassTelemetryFasterTest.java": [
          "File: test/src/test/java/jenkins/telemetry/impl/java11/MissingClassTelemetryFasterTest.java -> test/src/test/java/jenkins/telemetry/impl/java11/MissingClassTelemetryFasterTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: package jenkins.telemetry.impl.java11;",
          "26: import org.junit.Assume;",
          "27: import org.junit.Before;",
          "28: import org.junit.Rule;",
          "29: import org.junit.Test;",
          "30: import org.jvnet.hudson.test.LoggerRule;",
          "32: import java.util.List;",
          "33: import java.util.concurrent.ConcurrentHashMap;",
          "34: import java.util.logging.Logger;",
          "36: import static org.hamcrest.Matchers.not;",
          "37: import static org.hamcrest.core.StringContains.containsString;",
          "38: import static org.junit.Assert.assertEquals;",
          "39: import static org.junit.Assert.assertThat;",
          "44: public class MissingClassTelemetryFasterTest {",
          "45:     private CatcherClassLoader cl;",
          "47:     @Rule",
          "48:     public LoggerRule logging = new LoggerRule();",
          "50:     @Before",
          "51:     public void cleanEvents() {",
          "52:         cl = new CatcherClassLoader(this.getClass().getClassLoader());",
          "53:     }",
          "55:     @Test",
          "56:     public void maxNumberEvents() {",
          "57:         Assume.assumeTrue(\"The telemetry should be enabled\", MissingClassTelemetry.enabled());",
          "60:         int maxEventsBefore = MissingClassEvents.MAX_EVENTS_PER_SEND;",
          "62:         try {",
          "63:             MissingClassEvents.MAX_EVENTS_PER_SEND = 1;",
          "65:             try {",
          "66:                 cl.loadClass(\"sun.java.MyNonExistentClass\");",
          "67:             } catch (ClassNotFoundException ignored) {",
          "68:             }",
          "70:             try {",
          "71:                 cl.loadClass(\"sun.java.MyNonExistentJavaClass\");",
          "72:             } catch (ClassNotFoundException ignored) {",
          "73:             }",
          "76:             ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> eventsGathered = MissingClassTelemetry.getEvents().getEventsAndClean();",
          "79:             assertEquals(1, eventsGathered.size());",
          "80:         } finally {",
          "81:             MissingClassEvents.MAX_EVENTS_PER_SEND = maxEventsBefore;",
          "82:         }",
          "83:     }",
          "89:     @Test",
          "90:     public void differentEventsAlthoughSameClass() {",
          "91:         Assume.assumeTrue(\"The telemetry should be enabled\", MissingClassTelemetry.enabled());",
          "93:         try {",
          "94:             cl.loadClass(\"sun.java.MyNonExistentClass\");",
          "95:         } catch (ClassNotFoundException ignored) {",
          "96:         }",
          "98:         try {",
          "99:             cl.loadClass(\"sun.java.MyNonExistentJavaClass\");",
          "100:         } catch (ClassNotFoundException ignored) {",
          "101:         }",
          "104:         MissingClassEvents events = MissingClassTelemetry.getEvents();",
          "105:         ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> eventsGathered = events.getEventsAndClean();",
          "108:         assertEquals(2, eventsGathered.size());",
          "109:         assertEquals(1, eventsGathered.values().iterator().next().getOccurrences());",
          "110:         assertEquals(1, eventsGathered.values().iterator().next().getOccurrences());",
          "111:     }",
          "116:     @Test",
          "117:     public void addOccurrenceIfSameStackTrace() {",
          "118:         Assume.assumeTrue(\"The telemetry should be enabled\", MissingClassTelemetry.enabled());",
          "120:         for (int i = 0; i < 2; i++) {",
          "121:             try {",
          "123:                 cl.loadClass(\"sun.java.MyNonExistentJavaClass\");",
          "124:             } catch (ClassNotFoundException ignored) {",
          "125:             }",
          "126:         }",
          "129:         MissingClassEvents events = MissingClassTelemetry.getEvents();",
          "130:         ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> eventsGathered = events.getEventsAndClean();",
          "133:         assertEquals(1, eventsGathered.size());",
          "134:         assertEquals(2, eventsGathered.values().iterator().next().getOccurrences());",
          "135:     }",
          "140:     @Test",
          "141:     public void nonJavaClassesNotGathered() {",
          "142:         Assume.assumeTrue(\"The telemetry should be enabled\", MissingClassTelemetry.enabled());",
          "144:         try {",
          "145:             cl.loadClass(\"jenkins.MyNonExistentClass\");",
          "146:         } catch (ClassNotFoundException ignored) {",
          "147:         }",
          "150:         MissingClassEvents events = MissingClassTelemetry.getEvents();",
          "151:         ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> eventsGathered = events.getEventsAndClean();",
          "154:         assertEquals(0, eventsGathered.size());",
          "155:     }",
          "160:     @Test",
          "161:     public void maxEventsLimitedSameStackTrace() {",
          "162:         Assume.assumeTrue(\"The telemetry should be enabled\", MissingClassTelemetry.enabled());",
          "164:         MissingClassEvents.MAX_EVENTS_PER_SEND = 1;",
          "165:         for (int i = 0; i < 2; i++) {",
          "166:             try {",
          "168:                 cl.loadClass(\"sun.java.MyNonExistentJavaClass\");",
          "169:             } catch (ClassNotFoundException ignored) {",
          "170:             }",
          "171:         }",
          "174:         MissingClassEvents events = MissingClassTelemetry.getEvents();",
          "175:         ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> eventsGathered = events.getEventsAndClean();",
          "178:         assertEquals(1, eventsGathered.size());",
          "179:         assertEquals(2, eventsGathered.values().iterator().next().getOccurrences());",
          "180:     }",
          "185:     @Test",
          "186:     public void maxEventsLimitedDifferentStackTrace() {",
          "187:         Assume.assumeTrue(\"The telemetry should be enabled\", MissingClassTelemetry.enabled());",
          "189:         MissingClassEvents.MAX_EVENTS_PER_SEND = 1;",
          "191:         try {",
          "192:             cl.loadClass(\"sun.java.MyNonExistentClassGathered\");",
          "193:         } catch (ClassNotFoundException ignored) {",
          "194:         }",
          "196:         try {",
          "197:             cl.loadClass(\"sun.java.MyNonExistentJavaClassNotGathered\");",
          "198:         } catch (ClassNotFoundException ignored) {",
          "199:         }",
          "202:         MissingClassEvents events = MissingClassTelemetry.getEvents();",
          "203:         ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> eventsGathered = events.getEventsAndClean();",
          "206:         assertEquals(1, eventsGathered.size());",
          "207:         assertEquals(1, eventsGathered.values().iterator().next().getOccurrences());",
          "208:         assertThat(eventsGathered.values().iterator().next().getStackTrace(), containsString(\"MyNonExistentClassGathered\"));",
          "209:         assertThat(eventsGathered.values().iterator().next().getStackTrace(), not(containsString(\"MyNonExistentJavaClassNotGathered\")));",
          "210:     }",
          "216:     @Test",
          "217:     public void cyclesNotReachedBecauseCNFEReported() {",
          "218:         Assume.assumeTrue(\"The telemetry should be enabled\", MissingClassTelemetry.enabled());",
          "220:         logging.record(MissingClassTelemetry.class, Logger.getLogger(MissingClassTelemetry.class.getName()).getLevel()).capture(5);",
          "222:         try {",
          "224:             parent -> child -> cnfe",
          "225:                          \\",
          "226:                         parent",
          "227:             We first look into the causes exceptions. When found, we don't look into the suppressed, so the cycle is not",
          "228:             found here",
          "231:             ClassNotFoundException cnfe = new ClassNotFoundException(\"sun.java.MyNonExistentClassGathered\");",
          "232:             Exception child = new Exception(\"child\", cnfe);",
          "233:             Exception parent = new Exception(\"parent\", child); // parent -> caused by -> child",
          "234:             child.addSuppressed(parent);",
          "237:             throw new Exception(new Exception (new Exception (parent)));",
          "239:         } catch (Exception e) {",
          "241:             MissingClassTelemetry.reportExceptionInside(e);",
          "244:             MissingClassEvents events = MissingClassTelemetry.getEvents();",
          "245:             ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> eventsGathered = events.getEventsAndClean();",
          "248:             assertEquals(1, eventsGathered.size());",
          "251:             assertEquals(\"No circular message was printed in logs\", 0, logging.getRecords().stream().filter(r -> r.getMessage().contains(MissingClassTelemetry.CIRCULAR_REFERENCE)).count());",
          "252:         }",
          "253:     }",
          "259:     @Test",
          "260:     public void cnfeFoundAfterCycle() {",
          "261:         Assume.assumeTrue(\"The telemetry should be enabled\", MissingClassTelemetry.enabled());",
          "263:         logging.record(MissingClassTelemetry.class, Logger.getLogger(MissingClassTelemetry.class.getName()).getLevel()).capture(5);",
          "265:         try {",
          "266:             ClassNotFoundException cnfe = new ClassNotFoundException(\"sun.java.MyNonExistentClassGathered\");",
          "269:             parent -> child",
          "270:                \\         \\",
          "271:                cnfe      parent",
          "273:             Exception child = new Exception(\"child\");",
          "274:             Exception parent = new Exception(\"parent\", child); // parent -> caused by -> child",
          "275:             child.addSuppressed(parent); // Boooomm!!!! The parent is a child suppressed exception -> cycle",
          "276:             parent.addSuppressed(cnfe);",
          "279:             throw new Exception(new Exception (new Exception (parent)));",
          "281:         } catch (Exception e) {",
          "283:             MissingClassTelemetry.reportExceptionInside(e);",
          "286:             MissingClassEvents events = MissingClassTelemetry.getEvents();",
          "287:             ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> eventsGathered = events.getEventsAndClean();",
          "290:             assertEquals(1, eventsGathered.size());",
          "293:             assertThat(logging, LoggerRule.recorded(containsString(MissingClassTelemetry.CIRCULAR_REFERENCE)));",
          "294:         }",
          "295:     }",
          "301:     @Test",
          "302:     public void cnfeAfterCNFENotJava11AndCycle() {",
          "303:         Assume.assumeTrue(\"The telemetry should be enabled\", MissingClassTelemetry.enabled());",
          "305:         logging.record(MissingClassTelemetry.class, Logger.getLogger(MissingClassTelemetry.class.getName()).getLevel()).capture(5);",
          "307:         try {",
          "308:             ClassNotFoundException cnfe = new ClassNotFoundException(\"sun.java.MyNonExistentClassGathered\");",
          "309:             ClassNotFoundException cnfeNonJava11 = new ClassNotFoundException(\"MyNonExistentClassGathered\");",
          "312:             parent -> child -> grandchild",
          "313:                \\         \\          \\",
          "314:                cnfe      parent     cnfe (non java11)",
          "316:             Exception grandchild = new Exception(\"grandchild\");",
          "317:             Exception child = new Exception(\"child\");",
          "318:             Exception parent = new Exception(\"parent\", child); // parent -> caused by -> child",
          "319:             child.addSuppressed(parent); // Boooomm!!!! The parent is a child suppressed exception -> cycle",
          "320:             grandchild.addSuppressed(cnfeNonJava11);",
          "321:             parent.addSuppressed(cnfe);",
          "324:             throw new Exception(new Exception (new Exception (parent)));",
          "326:         } catch (Exception e) {",
          "328:             MissingClassTelemetry.reportExceptionInside(e);",
          "331:             MissingClassEvents events = MissingClassTelemetry.getEvents();",
          "332:             ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> eventsGathered = events.getEventsAndClean();",
          "335:             assertEquals(1, eventsGathered.size());",
          "338:             assertThat(logging, LoggerRule.recorded(containsString(MissingClassTelemetry.CIRCULAR_REFERENCE)));",
          "339:         }",
          "340:     }",
          "342:     @Test",
          "343:     public void nothingGatheredWhenTelemetryDisabled() {",
          "344:         Assume.assumeFalse(\"The telemetry should not be enabled\", MissingClassTelemetry.enabled());",
          "346:         try {",
          "347:             cl.loadClass(\"sun.java.MyNonExistentClass\");",
          "348:         } catch (ClassNotFoundException ignored) {",
          "349:         }",
          "351:         ConcurrentHashMap<List<StackTraceElement>, MissingClassEvent> eventsGathered = MissingClassTelemetry.getEvents().getEventsAndClean();",
          "354:         assertEquals(0, eventsGathered.size());",
          "355:     }",
          "356: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}