{
  "cve_id": "CVE-2017-0196",
  "cve_desc": "An information disclosure vulnerability in Microsoft scripting engine allows remote attackers to obtain sensitive information from process memory via a crafted web site, aka \"Microsoft Browser Information Disclosure Vulnerability.\"",
  "repo": "Microsoft/ChakraCore",
  "patch_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
  "patch_info": {
    "commit_hash": "065b7978c40ded35c356ced6cd922a40156c9c46",
    "repo": "Microsoft/ChakraCore",
    "commit_url": "https://github.com/Microsoft/ChakraCore/commit/065b7978c40ded35c356ced6cd922a40156c9c46",
    "files": [
      "lib/Runtime/Library/JavascriptArray.cpp",
      "test/Array/Array_TypeConfusion_bugs.js"
    ],
    "message": "[CVE-2017-0196] Fixing an heap overread during slice.\n\nThe MissingItem check is happening on the array in a loop. It is possible that we get called into script and that mutates the array. So the Array's head is newly created with length.\nHowever the loop is still performing over the old length.\nFixed this by checking the length In IsMissingItem function.\nAdded a unittest.",
    "before_after_code_files": [
      "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
      "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js"
    ]
  },
  "patch_diff": {
    "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
      "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "478:     bool JavascriptArray::IsMissingItem(uint32 index)",
      "479:     {",
      "480:         bool isIntArray = false, isFloatArray = false;",
      "481:         this->GetArrayTypeAndConvert(&isIntArray, &isFloatArray);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "480:         if (this->length <= index)",
      "481:         {",
      "482:             return false;",
      "483:         }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5768:         if (!pArr->HasNoMissingValues())",
      "5769:         {",
      "5771:             {",
      "",
      "[Removed Lines]",
      "5770:             for (uint32 i = 0; i < newLen; i++)",
      "",
      "[Added Lines]",
      "5775:             for (uint32 i = 0; i < newLen && (i + start) < pArr->length; i++)",
      "",
      "---------------"
    ],
    "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js": [
      "File: test/Array/Array_TypeConfusion_bugs.js -> test/Array/Array_TypeConfusion_bugs.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "593:             assert.areEqual(101, arr.length);",
      "594:         }",
      "595:     },",
      "596: ];",
      "597: testRunner.runTests(tests, { verbose: WScript.Arguments[0] != \"summary\" });",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "596:     {",
      "597:         name: \"Heap overread when splice mutates the array when executing slice\",",
      "598:         body: function ()",
      "599:         {",
      "600:             var getterCalled = false;",
      "601:             var a = [1, 2];",
      "602:             for (var i = 0; i < 100 * 1024; i++) {",
      "603:                 a.push(i);",
      "604:             }",
      "605:             delete a[0]; // Make a missing item",
      "606:             var protoObj = [11];",
      "607:             Object.defineProperty(protoObj, '0', {",
      "608:                 get : function () {",
      "609:                     getterCalled = true;",
      "610:                     Object.setPrototypeOf(a, Array.prototype);",
      "611:                     a.splice(0); // head seg is now length=0",
      "612:                     return 42;",
      "613:                 },",
      "614:                 configurable : true",
      "615:             });",
      "616:             Object.setPrototypeOf(a, protoObj);",
      "617:             var b = a.slice();",
      "618:             assert.isTrue(getterCalled);",
      "619:             assert.areEqual(0, a.length, \"Getter will splice the array to zero length\");",
      "620:             assert.areEqual(100 * 1024 + 2, b.length, \"Validating that slice will return the full array even though splice is deleting the whole array\");",
      "621:         }",
      "622:     },",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0d830938d7f08d08566b04e66a223f96e2f3d72c",
      "candidate_info": {
        "commit_hash": "0d830938d7f08d08566b04e66a223f96e2f3d72c",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/0d830938d7f08d08566b04e66a223f96e2f3d72c",
        "files": [
          "lib/Runtime/Language/Arguments.h",
          "lib/Runtime/Language/InterpreterStackFrame.cpp",
          "lib/Runtime/Language/ModuleNamespace.h",
          "lib/Runtime/Language/SourceTextModuleRecord.cpp",
          "lib/Runtime/Language/SourceTextModuleRecord.h",
          "lib/Runtime/Library/BoundFunction.cpp",
          "lib/Runtime/Library/BoundFunction.h",
          "lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h",
          "lib/Runtime/Library/JavascriptExternalFunction.cpp",
          "lib/Runtime/Library/ScriptFunction.cpp",
          "lib/Runtime/Library/ScriptFunction.h"
        ],
        "message": "a few fixes for T**\n\nand looks we don't need annotation for Arguments",
        "before_after_code_files": [
          "lib/Runtime/Language/Arguments.h||lib/Runtime/Language/Arguments.h",
          "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp",
          "lib/Runtime/Language/ModuleNamespace.h||lib/Runtime/Language/ModuleNamespace.h",
          "lib/Runtime/Language/SourceTextModuleRecord.cpp||lib/Runtime/Language/SourceTextModuleRecord.cpp",
          "lib/Runtime/Language/SourceTextModuleRecord.h||lib/Runtime/Language/SourceTextModuleRecord.h",
          "lib/Runtime/Library/BoundFunction.cpp||lib/Runtime/Library/BoundFunction.cpp",
          "lib/Runtime/Library/BoundFunction.h||lib/Runtime/Library/BoundFunction.h",
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h",
          "lib/Runtime/Library/JavascriptExternalFunction.cpp||lib/Runtime/Library/JavascriptExternalFunction.cpp",
          "lib/Runtime/Library/ScriptFunction.cpp||lib/Runtime/Library/ScriptFunction.cpp",
          "lib/Runtime/Library/ScriptFunction.h||lib/Runtime/Library/ScriptFunction.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Language/Arguments.h||lib/Runtime/Language/Arguments.h": [
          "File: lib/Runtime/Language/Arguments.h -> lib/Runtime/Language/Arguments.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:             AssertMsg((idxArg < (int)Info.Count) && (idxArg >= 0), \"Ensure a valid argument index\");",
          "126:             return Values[idxArg];",
          "127:         }",
          "131:         static uint32 GetCallInfoOffset() { return offsetof(Arguments, Info); }",
          "132:         static uint32 GetValuesOffset() { return offsetof(Arguments, Values); }",
          "133:     };",
          "135:     struct ArgumentReader : public Arguments",
          "",
          "[Removed Lines]",
          "128:         Field(CallInfo) Info;",
          "129:         Field(Var*) Values;",
          "",
          "[Added Lines]",
          "128:         CallInfo Info;",
          "129:         Var* Values;",
          "135:         static void* operator new   (size_t)    = delete;",
          "136:         static void* operator new[] (size_t)    = delete;",
          "137:         static void  operator delete   (void*)  = delete;",
          "138:         static void  operator delete[] (void*)  = delete;",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/InterpreterStackFrame.cpp||lib/Runtime/Language/InterpreterStackFrame.cpp": [
          "File: lib/Runtime/Language/InterpreterStackFrame.cpp -> lib/Runtime/Language/InterpreterStackFrame.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1053:     {",
          "1054:         if (this->function->GetHasInlineCaches() && Js::ScriptFunctionWithInlineCache::Is(this->function))",
          "1055:         {",
          "1057:         }",
          "1058:         else",
          "1059:         {",
          "",
          "[Removed Lines]",
          "1056:             this->inlineCaches = Js::ScriptFunctionWithInlineCache::FromVar(this->function)->GetInlineCaches();",
          "",
          "[Added Lines]",
          "1056:             this->inlineCaches = (void**)Js::ScriptFunctionWithInlineCache::FromVar(this->function)->GetInlineCaches();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2787:                     scriptFuncObj->GetDynamicType()->SetEntryPoint(AsmJsExternalEntryPoint);",
          "2788:                     scriptFuncObj->GetFunctionBody()->GetAsmJsFunctionInfo()->SetModuleFunctionBody(asmJsModuleFunctionBody);",
          "2789:                 }",
          "2791:                 if (!info->IsRuntimeProcessed())",
          "2792:                 {",
          "",
          "[Removed Lines]",
          "2790:                 scriptFuncObj->SetModuleMemory(moduleMemoryPtr);",
          "",
          "[Added Lines]",
          "2790:                 scriptFuncObj->SetModuleMemory((Field(Var)*)moduleMemoryPtr);",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/ModuleNamespace.h||lib/Runtime/Language/ModuleNamespace.h": [
          "File: lib/Runtime/Language/ModuleNamespace.h -> lib/Runtime/Language/ModuleNamespace.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         Field(UnambiguousExportMap*) unambiguousNonLocalExports;",
          "89:         Field(SimplePropertyDescriptorMap*) propertyMap;   // local exports.",
          "90:         Field(ListForListIterator*) sortedExportedNames;   // sorted exported names for both local and indirect exports; excludes symbols.",
          "94:         Var GetNSSlot(BigPropertyIndex propertyIndex);",
          "95:         void AddUnambiguousNonLocalExport(PropertyId exportId, ModuleNameRecord* nonLocalExportNameRecord);",
          "96:         UnambiguousExportMap* GetUnambiguousNonLocalExports() const { return unambiguousNonLocalExports; }",
          "",
          "[Removed Lines]",
          "91:         Field(Var*) nsSlots;",
          "93:         void SetNSSlotsForModuleNS(Var* nsSlot) { this->nsSlots = nsSlot; }",
          "",
          "[Added Lines]",
          "91:         Field(Field(Var)*) nsSlots;",
          "93:         void SetNSSlotsForModuleNS(Var* nsSlot) { this->nsSlots = (Field(Var)*)nsSlot; }",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/SourceTextModuleRecord.cpp||lib/Runtime/Language/SourceTextModuleRecord.cpp": [
          "File: lib/Runtime/Language/SourceTextModuleRecord.cpp -> lib/Runtime/Language/SourceTextModuleRecord.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "268:     ModuleNamespace* SourceTextModuleRecord::GetNamespace()",
          "269:     {",
          "270:         Assert(localExportSlots != nullptr);",
          "273:     }",
          "275:     void SourceTextModuleRecord::SetNamespace(ModuleNamespace* moduleNamespace)",
          "",
          "[Removed Lines]",
          "271:         Assert(static_cast<ModuleNamespace*>(localExportSlots[GetLocalExportSlotCount()]) == __super::GetNamespace());",
          "272:         return static_cast<ModuleNamespace*>(localExportSlots[GetLocalExportSlotCount()]);",
          "",
          "[Added Lines]",
          "271:         Assert(PointerValue(localExportSlots[GetLocalExportSlotCount()]) == __super::GetNamespace());",
          "272:         return (ModuleNamespace*)(void*)(localExportSlots[GetLocalExportSlotCount()]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "860:                 });",
          "861:             }",
          "864:             for (uint i = 0; i < currentSlotCount; i++)",
          "865:             {",
          "866:                 localExportSlots[i] = undefineValue;",
          "",
          "[Removed Lines]",
          "863:             localExportSlots = RecyclerNewArray(recycler, Var, currentSlotCount + 1);",
          "",
          "[Added Lines]",
          "863:             localExportSlots = RecyclerNewArray(recycler, Field(Var), currentSlotCount + 1);",
          "",
          "---------------"
        ],
        "lib/Runtime/Language/SourceTextModuleRecord.h||lib/Runtime/Language/SourceTextModuleRecord.h": [
          "File: lib/Runtime/Language/SourceTextModuleRecord.h -> lib/Runtime/Language/SourceTextModuleRecord.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:         uint GetLocalExportSlotIndexByExportName(PropertyId exportNameId);",
          "89:         uint GetLocalExportSlotIndexByLocalName(PropertyId localNameId);",
          "92:         uint GetLocalExportSlotCount() const { return localSlotCount; }",
          "93:         uint GetModuleId() const { return moduleId; }",
          "94:         uint GetLocalExportCount() const { return localExportCount; }",
          "",
          "[Removed Lines]",
          "90:         Var* GetLocalExportSlots() const { return localExportSlots; }",
          "91:         Var* GetLocalExportSlotAddr(uint slotIndex) const { return &localExportSlots[slotIndex]; }",
          "",
          "[Added Lines]",
          "90:         Var* GetLocalExportSlots() const { return (Var*)(Field(Var)*)localExportSlots; }",
          "91:         Var* GetLocalExportSlotAddr(uint slotIndex) const { return (Var*)(Field(Var)*)&localExportSlots[slotIndex]; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "133:         Field(void*) hostDefined;",
          "134:         Field(Var) normalizedSpecifier;",
          "135:         Field(Var) errorObject;",
          "137:         Field(uint) localSlotCount;",
          "",
          "[Removed Lines]",
          "136:         Field(Var*) localExportSlots;",
          "",
          "[Added Lines]",
          "136:         Field(Field(Var)*) localExportSlots;",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/BoundFunction.cpp||lib/Runtime/Library/BoundFunction.cpp": [
          "File: lib/Runtime/Library/BoundFunction.cpp -> lib/Runtime/Library/BoundFunction.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:             if (args.Info.Count > 2)",
          "71:             {",
          "74:                 for (uint i=0; i<count; i++)",
          "75:                 {",
          "",
          "[Removed Lines]",
          "72:                 boundArgs = RecyclerNewArray(scriptContext->GetRecycler(), Var, count);",
          "",
          "[Added Lines]",
          "72:                 boundArgs = RecyclerNewArray(scriptContext->GetRecycler(), Field(Var), count);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:         if (argsCount != 0)",
          "98:         {",
          "101:             for (uint i = 0; i < argsCount; i++)",
          "102:             {",
          "",
          "[Removed Lines]",
          "99:             this->boundArgs = RecyclerNewArray(this->GetScriptContext()->GetRecycler(), Var, argsCount);",
          "",
          "[Added Lines]",
          "99:             this->boundArgs = RecyclerNewArray(this->GetScriptContext()->GetRecycler(), Field(Var), argsCount);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "563:         res->boundThis = bThis;",
          "564:         res->count = ct;",
          "567:         res->targetFunction = function;",
          "",
          "[Removed Lines]",
          "565:         res->boundArgs = args;",
          "",
          "[Added Lines]",
          "565:         res->boundArgs = (Field(Var)*)args;",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/BoundFunction.h||lib/Runtime/Library/BoundFunction.h": [
          "File: lib/Runtime/Library/BoundFunction.h -> lib/Runtime/Library/BoundFunction.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:         JavascriptFunction * GetTargetFunction() const;",
          "58:         uint GetArgsCountForHeapEnum() { return count;}",
          "60:         RecyclableObject* GetBoundThis();",
          "62: #if ENABLE_TTD",
          "",
          "[Removed Lines]",
          "59:         Var* GetArgsForHeapEnum() { return boundArgs;}",
          "",
          "[Added Lines]",
          "59:         Field(Var)* GetArgsForHeapEnum() { return boundArgs;}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:         Field(RecyclableObject*)   targetFunction;",
          "76:         Field(Var)                 boundThis;",
          "77:         Field(uint)                count;",
          "79:     };",
          "80: } // namespace Js",
          "",
          "[Removed Lines]",
          "78:         Field(Var*)                boundArgs;",
          "",
          "[Added Lines]",
          "78:         Field(Field(Var)*)                boundArgs;",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "254:             newNode.keys[i] = child->keys[i+MinDegree];",
          "258:         }",
          "",
          "[Removed Lines]",
          "257:             child->segments[i+MinDegree] = NULL;",
          "",
          "[Added Lines]",
          "257:             child->segments[i+MinDegree] = nullptr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "292:         parent->keys[iChild] = child->keys[MinKeys];",
          "297:         parent->segmentCount++;",
          "298:     }",
          "",
          "[Removed Lines]",
          "295:         child->segments[MinKeys] = NULL;",
          "",
          "[Added Lines]",
          "295:         child->segments[MinKeys] = nullptr;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6943:         if (newLenOverflow.HasOverflowed())",
          "6944:         {",
          "6946:         }",
          "6947:         else // Use uint32 version if no overflow",
          "6948:         {",
          "6950:         }",
          "6951:     }",
          "",
          "[Removed Lines]",
          "6945:             return ObjectSpliceHelper<BigIndex>(pObj, len, start, deleteLen, insertArgs, insertLen, scriptContext, newObj);",
          "6949:             return ObjectSpliceHelper<uint32>(pObj, len, start, deleteLen, insertArgs, insertLen, scriptContext, newObj);",
          "",
          "[Added Lines]",
          "6945:             return ObjectSpliceHelper<BigIndex>(pObj, len, start, deleteLen, (Var*)insertArgs, insertLen, scriptContext, newObj);",
          "6949:             return ObjectSpliceHelper<uint32>(pObj, len, start, deleteLen, (Var*)insertArgs, insertLen, scriptContext, newObj);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.h||lib/Runtime/Library/JavascriptArray.h": [
          "File: lib/Runtime/Library/JavascriptArray.h -> lib/Runtime/Library/JavascriptArray.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     protected:",
          "24:         Field(uint32*)              keys;           // keys[i] == segments[i]->left",
          "26:         Field(SegmentBTree*)        children;       // Length of segmentCount+1.",
          "27:         Field(uint32)               segmentCount;   // number of sparseArray segments in the Node",
          "",
          "[Removed Lines]",
          "25:         Field(SparseArraySegmentBase**) segments;   // Length of segmentCount.",
          "",
          "[Added Lines]",
          "25:         Field(SparseArraySegmentBase**) segments;   // Length of segmentCount. Allocated with Leaf, no need to annotate inner pointer",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptExternalFunction.cpp||lib/Runtime/Library/JavascriptExternalFunction.cpp": [
          "File: lib/Runtime/Library/JavascriptExternalFunction.cpp -> lib/Runtime/Library/JavascriptExternalFunction.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "144:                 {",
          "145:                 case Js::TypeIds_GlobalObject:",
          "146:                     {",
          "148:                         directHostObject = srcGlobalObject->GetDirectHostObject();",
          "150:                         if (directHostObject != nullptr)",
          "",
          "[Removed Lines]",
          "147:                         Js::GlobalObject* srcGlobalObject = static_cast<Js::GlobalObject*>(thisVar);",
          "",
          "[Added Lines]",
          "147:                         Js::GlobalObject* srcGlobalObject = (Js::GlobalObject*)(void*)(thisVar);",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/ScriptFunction.cpp||lib/Runtime/Library/ScriptFunction.cpp": [
          "File: lib/Runtime/Library/ScriptFunction.cpp -> lib/Runtime/Library/ScriptFunction.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "704:             this->m_inlineCacheTypes[index] == InlineCacheTypeInlineCache);",
          "705:         this->m_inlineCacheTypes[index] = InlineCacheTypeInlineCache;",
          "706: #endif",
          "708:     }",
          "710:     void ScriptFunctionWithInlineCache::SetInlineCachesFromFunctionBody()",
          "711:     {",
          "712:         SetHasInlineCaches(true);",
          "713:         Js::FunctionBody* functionBody = this->GetFunctionBody();",
          "715: #if DBG",
          "716:         this->m_inlineCacheTypes = functionBody->GetInlineCacheTypes();",
          "717: #endif",
          "",
          "[Removed Lines]",
          "707:         return reinterpret_cast<InlineCache *>(this->m_inlineCaches[index]);",
          "714:         this->m_inlineCaches = functionBody->GetInlineCaches();",
          "",
          "[Added Lines]",
          "707:         return reinterpret_cast<InlineCache *>(PointerValue(this->m_inlineCaches[index]));",
          "714:         this->m_inlineCaches = (Field(void*)*)functionBody->GetInlineCaches();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "762:             {",
          "763:                 if (this->m_inlineCaches[i])",
          "764:                 {",
          "766:                     if (isShutdown)",
          "767:                     {",
          "768:                         memset(this->m_inlineCaches[i], 0, sizeof(InlineCache));",
          "",
          "[Removed Lines]",
          "765:                     InlineCache* inlineCache = (InlineCache*)this->m_inlineCaches[i];",
          "",
          "[Added Lines]",
          "765:                     InlineCache* inlineCache = (InlineCache*)(void*)this->m_inlineCaches[i];",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "790:                     }",
          "791:                     else if (!scriptContext->IsClosed())",
          "792:                     {",
          "794:                     }",
          "795:                     this->m_inlineCaches[i] = nullptr;",
          "796:                 }",
          "",
          "[Removed Lines]",
          "793:                         AllocatorDelete(CacheAllocator, scriptContext->GetIsInstInlineCacheAllocator(), (IsInstInlineCache*)this->m_inlineCaches[i]);",
          "",
          "[Added Lines]",
          "793:                         AllocatorDelete(CacheAllocator, scriptContext->GetIsInstInlineCacheAllocator(), (IsInstInlineCache*)(void*)this->m_inlineCaches[i]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "862:             this->m_inlineCacheTypes = RecyclerNewArrayLeafZ(functionBody->GetScriptContext()->GetRecycler(),",
          "863:                 byte, totalCacheCount);",
          "864: #endif",
          "866:         }",
          "867:     }",
          "",
          "[Removed Lines]",
          "865:             this->m_inlineCaches = inlineCaches;",
          "",
          "[Added Lines]",
          "865:             this->m_inlineCaches = (Field(void*)*)inlineCaches;",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/ScriptFunction.h||lib/Runtime/Library/ScriptFunction.h": [
          "File: lib/Runtime/Library/ScriptFunction.h -> lib/Runtime/Library/ScriptFunction.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:     class ScriptFunctionWithInlineCache : public ScriptFunction",
          "143:     {",
          "144:     private:",
          "146:         Field(bool) hasOwnInlineCaches;",
          "148: #if DBG",
          "",
          "[Removed Lines]",
          "145:         Field(void**) m_inlineCaches;",
          "",
          "[Added Lines]",
          "145:         Field(Field(void*)*) m_inlineCaches;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:         void ClearBorrowedInlineCacheOnFunctionObject();",
          "174:         InlineCache * GetInlineCache(uint index);",
          "175:         uint GetInlineCacheCount() { return inlineCacheCount; }",
          "177:         bool GetHasOwnInlineCaches() { return hasOwnInlineCaches; }",
          "178:         void SetInlineCachesFromFunctionBody();",
          "179:         static uint32 GetOffsetOfInlineCaches() { return offsetof(ScriptFunctionWithInlineCache, m_inlineCaches); };",
          "",
          "[Removed Lines]",
          "176:         void** GetInlineCaches() { return m_inlineCaches; }",
          "",
          "[Added Lines]",
          "176:         Field(void*)* GetInlineCaches() { return m_inlineCaches; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce4148c789e622b929ab9400e76c8c69af9b6100",
      "candidate_info": {
        "commit_hash": "ce4148c789e622b929ab9400e76c8c69af9b6100",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/ce4148c789e622b929ab9400e76c8c69af9b6100",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp"
        ],
        "message": "[CVE-2017-8739] buffer overread IsMissingItem.\n\nThis is the case where array's length is bigger than head segment's length.\nFixed that by putting proper check.",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "484:     bool JavascriptArray::IsMissingItem(uint32 index)",
          "485:     {",
          "487:         {",
          "488:             return false;",
          "489:         }",
          "",
          "[Removed Lines]",
          "486:         if (this->length <= index)",
          "",
          "[Added Lines]",
          "486:         if (!(this->head->left <= index && index < (this->head->left+ this->head->length)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5981:         if (!pArr->HasNoMissingValues())",
          "5982:         {",
          "5984:             {",
          "5987:                 if (pArr->IsMissingItem(i + start))",
          "",
          "[Removed Lines]",
          "5983:             for (uint32 i = 0; i < newLen && (i + start) < pArr->length; i++)",
          "",
          "[Added Lines]",
          "5983:             for (uint32 i = 0; i < newLen; i++)",
          "5985:                 if (!(pArr->head->left <= (i + start) && (i + start) <  (pArr->head->left + pArr->head->length)))",
          "5986:                 {",
          "5987:                     break;",
          "5988:                 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "275e038b5860e39b03619e3ad045c5e1279238f6",
      "candidate_info": {
        "commit_hash": "275e038b5860e39b03619e3ad045c5e1279238f6",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/275e038b5860e39b03619e3ad045c5e1279238f6",
        "files": [
          "lib/Common/ConfigFlagsList.h",
          "lib/Runtime/Library/JavascriptArray.cpp"
        ],
        "message": "Add a flag to use a stronger array sort for bug analysis.\n\nThe default JS sort often results in an implementation-defined order.\nThis is not generally a problem, and helps improve our perf. However,\nthere are cases where our ordering depends on the internal structure,\nnot the user-visible structure, of the array. This change adds a flag\nto make this ordering more consistent, which should help identify our\nbugs where the issue is just our sort orders being inconsistent.",
        "before_after_code_files": [
          "lib/Common/ConfigFlagsList.h||lib/Common/ConfigFlagsList.h",
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/Common/ConfigFlagsList.h||lib/Common/ConfigFlagsList.h": [
          "File: lib/Common/ConfigFlagsList.h -> lib/Common/ConfigFlagsList.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1094: FLAGNR(Phases,  Force                 , \"Force certain phase to run ignoring heuristics\", )",
          "1095: FLAGNR(Phases,  Stress                , \"Stress certain phases by making them kick in even if they normally would not.\", )",
          "1096: FLAGNR(Boolean, ForceArrayBTree       , \"Force enable creation of BTree for Arrays\", false)",
          "1097: FLAGNR(Boolean, ForceCleanPropertyOnCollect, \"Force cleaning of property on collection\", DEFAULT_CONFIG_ForceCleanPropertyOnCollect)",
          "1098: FLAGNR(Boolean, ForceCleanCacheOnCollect, \"Force cleaning of dynamic caches on collection\", DEFAULT_CONFIG_ForceCleanCacheOnCollect)",
          "1099: FLAGNR(Boolean, ForceGCAfterJSONParse, \"Force GC to happen after JSON parsing\", DEFAULT_CONFIG_ForceGCAfterJSONParse)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1097: FLAGNR(Boolean, StrongArraySort       , \"Add secondary comparisons to the default array sort comparator to disambiguate sorts of equal-toString'd objects.\", false)",
          "",
          "---------------"
        ],
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6533:         TryFinally([&]()",
          "6534:         {",
          "6537:             {",
          "6538:                 if (compFn != nullptr)",
          "6539:                 {",
          "",
          "[Removed Lines]",
          "6536:             if (startSeg->next == nullptr) // Single segment fast path",
          "",
          "[Added Lines]",
          "6536:             if (startSeg->next == nullptr",
          "6537: #ifdef ENABLE_DEBUG_CONFIG_OPTIONS",
          "6542:                 && !Js::Configuration::Global.flags.StrongArraySort",
          "6543: #endif",
          "6544:                 ) // Single segment fast path",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6702:         Assert(element1 != NULL);",
          "6703:         Assert(element2 != NULL);",
          "6705:         return JavascriptString::strcmp(element1->StringValue, element2->StringValue);",
          "6706:     }",
          "6708:     void JavascriptArray::SortElements(Element* elements, uint32 left, uint32 right)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6713: #ifndef ENABLE_DEBUG_CONFIG_OPTIONS",
          "6715: #else",
          "6716:         if (!Js::Configuration::Global.flags.StrongArraySort)",
          "6717:         {",
          "6718:             return JavascriptString::strcmp(element1->StringValue, element2->StringValue);",
          "6719:         }",
          "6720:         else",
          "6721:         {",
          "6722:             int str_cmp = JavascriptString::strcmp(element1->StringValue, element2->StringValue);",
          "6723:             if (str_cmp != 0)",
          "6724:             {",
          "6725:                 return str_cmp;",
          "6726:             }",
          "6733:             if (element1->Value == element2->Value)",
          "6734:             {",
          "6735:                 return 0;",
          "6736:             }",
          "6739:             if (JavascriptOperators::GetTypeId(element1->Value) != JavascriptOperators::GetTypeId(element2->Value))",
          "6740:             {",
          "6741:                 return JavascriptOperators::GetTypeId(element1->Value) - JavascriptOperators::GetTypeId(element2->Value);",
          "6742:             }",
          "6746:             return 0;",
          "6747:         }",
          "6748: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9799:                 }",
          "9801:                 JS_REENTRANT(jsReentLock,",
          "9803:                         accumulator,",
          "9804:                         element,",
          "9805:                         JavascriptNumber::ToVar(k, scriptContext),",
          "",
          "[Removed Lines]",
          "9802:                     accumulator = CALL_FUNCTION(scriptContext->GetThreadContext(), callBackFn, CallInfo(flags, 5), undefinedValue,",
          "9806:                         pArr));",
          "",
          "[Added Lines]",
          "9845:                     accumulator = CALL_FUNCTION(scriptContext->GetThreadContext(), callBackFn, CallInfo(flags, 5),",
          "9846:                         undefinedValue,",
          "9850:                         pArr",
          "9851:                 ));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74a30c40f8060c31232703ed26a7563f6161bb95",
      "candidate_info": {
        "commit_hash": "74a30c40f8060c31232703ed26a7563f6161bb95",
        "repo": "Microsoft/ChakraCore",
        "commit_url": "https://github.com/Microsoft/ChakraCore/commit/74a30c40f8060c31232703ed26a7563f6161bb95",
        "files": [
          "lib/Runtime/Library/JavascriptArray.cpp",
          "test/Array/Array_TypeConfusion_bugs.js",
          "test/Array/protoLookupWithGetters.baseline",
          "test/Array/protoLookupWithGetters.js"
        ],
        "message": "Splice helper function should check for side-effect in the prototype.\n\nSplice has fast path which did not check the prototype (say you have proxy) properly which resulted to incorrect result. Fixed that by using the side-effect macro to take the slower and observable code path.",
        "before_after_code_files": [
          "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
          "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js",
          "test/Array/protoLookupWithGetters.baseline||test/Array/protoLookupWithGetters.baseline",
          "test/Array/protoLookupWithGetters.js||test/Array/protoLookupWithGetters.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
            "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js"
          ],
          "candidate": [
            "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp",
            "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/Runtime/Library/JavascriptArray.cpp||lib/Runtime/Library/JavascriptArray.cpp": [
          "File: lib/Runtime/Library/JavascriptArray.cpp -> lib/Runtime/Library/JavascriptArray.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6901:         Var* insertArgs = args.Info.Count > 3 ? &args.Values[3] : nullptr;",
          "6902:         uint32 insertLen = args.Info.Count > 3 ? args.Info.Count - 3 : 0;",
          "6905:         {",
          "6907:             _Analysis_assume_(length <= UINT_MAX);",
          "",
          "[Removed Lines]",
          "6904:         if (pArr != nullptr)",
          "",
          "[Added Lines]",
          "6905:         if (pArr != nullptr && !HasAnyES5ArrayInPrototypeChain(pArr, true /*forceCheckProtoChain*/))",
          "",
          "---------------"
        ],
        "test/Array/Array_TypeConfusion_bugs.js||test/Array/Array_TypeConfusion_bugs.js": [
          "File: test/Array/Array_TypeConfusion_bugs.js -> test/Array/Array_TypeConfusion_bugs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "799:             assert.areEqual(16, ret[0]);",
          "800:         }",
          "801:     },",
          "802: ];",
          "803: testRunner.runTests(tests, { verbose: WScript.Arguments[0] != \"summary\" });",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802:     {",
          "803:         name: \"splice : the method splice should get property from prototype which is a proxy\",",
          "804:         body: function ()",
          "805:         {",
          "806:             var v1 = [];",
          "807:             v1.length = 20;",
          "808:             var hasCalled = 0;",
          "809:             v1.__proto__ = new Proxy([222], {has : function() { hasCalled++;} });",
          "810:             v1.push(1);",
          "811:             assert.areEqual(222, v1[0]);",
          "812:             var ret  = v1.splice(0, 10);",
          "813:             assert.areEqual(20, hasCalled);",
          "814:         }",
          "815:     },",
          "",
          "---------------"
        ],
        "test/Array/protoLookupWithGetters.baseline||test/Array/protoLookupWithGetters.baseline": [
          "File: test/Array/protoLookupWithGetters.baseline -> test/Array/protoLookupWithGetters.baseline",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: Test case 1",
          "3: 9",
          "4: p0,p1,p2,p3,p4",
          "5: 5",
          "7: Test case 2",
          "9: 12",
          "10: p0,p1,p2,p3,p4",
          "11: 5",
          "13: Test case 3",
          "15: 12",
          "16: ,p1,,p3,",
          "17: 5",
          "19: Test case 4",
          "21: 8",
          "22: P3,P4,P5,P6,P7",
          "23: 5",
          "25: Test case 5",
          "27: 8",
          "28: P3,P4,P5,P6,P7",
          "29: 5",
          "31: Test case 6",
          "33: 12",
          "34: P3",
          "35: 1",
          "",
          "[Removed Lines]",
          "2: d1,d2,d3,d4,p5,p6,p7,p8,p9",
          "8: d1,d2,d3,d4,d5,d6,d7,p5,p6,p7,p8,p9",
          "14: d1,d2,d3,d4,d5,d6,d7,p5,,p7,,p9",
          "20: P0,P1,P2,d1,d2,d3,P8,P9",
          "26: P0,P1,P2,d1,d2,d3,P8,P9",
          "32: P0,P1,P2,d1,d2,d3,P4,P5,P6,P7,P8,P9",
          "",
          "[Added Lines]",
          "2: p0,p1,p2,p3,p4,p5,p6,p7,p8",
          "8: p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p8,p9",
          "14: d1,p1,d3,p3,d5,p5,d7,p7,,p9,,p9",
          "20: P0,P1,P2,P3,P4,P5,P6,P7",
          "26: P0,P1,P2,P3,P4,P5,P6,P7",
          "32: P0,P1,P2,P3,P4,P5,P6,P7,P8,P9,P8,P9",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60: 20",
          "61: a4,O6",
          "62: 2",
          "64: 16",
          "65: a7,a7,O9,a10,a10,O12",
          "66: 6",
          "68: 19",
          "70: 2",
          "72: Test case 11",
          "",
          "[Removed Lines]",
          "63: 10,a1,a1,O3,a4,a,b,a,b,a13,a13,O15,a16,a16,O18,a19",
          "67: 10,a1,a1,O3,a4,a,b,a,b,a13,a,b,c,e,f,a16,a16,O18,a19",
          "69: a13,O15",
          "",
          "[Added Lines]",
          "63: 10,a1,a1,O3,a4,a,b,a7,b,a13,a10,O15,a16,a13,O18,a19",
          "67: 10,a1,a1,O3,a4,a,b,a7,b,a13,a10,b,c,a13,f,a16,a16,O18,O18",
          "69: a10,O15",
          "",
          "---------------"
        ],
        "test/Array/protoLookupWithGetters.js||test/Array/protoLookupWithGetters.js": [
          "File: test/Array/protoLookupWithGetters.js -> test/Array/protoLookupWithGetters.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: for(var i =0;i<10;i++)",
          "14: {",
          "16: }",
          "18: var arr=new Array(10);",
          "",
          "[Removed Lines]",
          "15:   Object.defineProperty(Array.prototype, i, { get: function (i) { return function () { return \"p\"+i; } }(i), configurable: true, enumerable: true });",
          "",
          "[Added Lines]",
          "15:   Object.defineProperty(Array.prototype, i, { get: function (i) { return function () { return \"p\"+i; } }(i), set : function(a) {}, configurable: true, enumerable: true });",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: for(var i =0;i<10;i++)",
          "35: {",
          "37: }",
          "39: var arr=new Array(10);",
          "",
          "[Removed Lines]",
          "36:   Object.defineProperty(Array.prototype, i, { get: function (i) { return function () { return \"p\"+i; } }(i), configurable: true, enumerable: true });",
          "",
          "[Added Lines]",
          "36:   Object.defineProperty(Array.prototype, i, { get: function (i) { return function () { return \"p\"+i; } }(i), set : function(a) {}, configurable: true, enumerable: true });",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "54: for(var i =0;i<10;i++)",
          "55: {",
          "56:   i++;",
          "58: }",
          "60: var arr=new Array(10);",
          "",
          "[Removed Lines]",
          "57:   Object.defineProperty(Array.prototype, i, { get: function (i) { return function () { return \"p\"+i; } }(i), configurable: true, enumerable: true });",
          "",
          "[Added Lines]",
          "57:   Object.defineProperty(Array.prototype, i, { get: function (i) { return function () { return \"p\"+i; } }(i), set : function(a) {}, configurable: true, enumerable: true });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "73: write(\"Test case 4\");",
          "74: for(var k=0;k<10;k++)",
          "75: {",
          "77: }",
          "78: var arr=new Array(10);",
          "79: var newarr=arr.splice(3,5,\"d1\",\"d2\",\"d3\")",
          "",
          "[Removed Lines]",
          "76:   Object.defineProperty(Array.prototype, k, { get: function (k) { return function () { return \"P\"+k; } }(k), configurable: true, enumerable: true });",
          "",
          "[Added Lines]",
          "76:   Object.defineProperty(Array.prototype, k, { get: function (k) { return function () { return \"P\"+k; } }(k), set : function(a) {}, configurable: true, enumerable: true });",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "90: write(\"Test case 5\");",
          "91: for(var k=0;k<10;k++)",
          "92: {",
          "94: }",
          "95: var arr=new Array(10);",
          "96: var newarr=arr.splice(3,5,\"d1\",\"d2\",\"d3\")",
          "",
          "[Removed Lines]",
          "93:   Object.defineProperty(Array.prototype, k, { get: function (k) { return function () { return \"P\"+k; } }(k), configurable: true, enumerable: true });",
          "",
          "[Added Lines]",
          "93:   Object.defineProperty(Array.prototype, k, { get: function (k) { return function () { return \"P\"+k; } }(k), set : function(a) {}, configurable: true, enumerable: true });",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "108: write(\"Test case 6\");",
          "109: for(var k=0;k<10;k++)",
          "110: {",
          "112: }",
          "113: var arr=new Array(10);",
          "114: var newarr=arr.splice(3,1,\"d1\",\"d2\",\"d3\")",
          "",
          "[Removed Lines]",
          "111:   Object.defineProperty(Array.prototype, k, { get: function (k) { return function () { return \"P\"+k; } }(k), configurable: true, enumerable: true });",
          "",
          "[Added Lines]",
          "111:   Object.defineProperty(Array.prototype, k, { get: function (k) { return function () { return \"P\"+k; } }(k), set : function(a) {}, configurable: true, enumerable: true });",
          "",
          "---------------"
        ]
      }
    }
  ]
}