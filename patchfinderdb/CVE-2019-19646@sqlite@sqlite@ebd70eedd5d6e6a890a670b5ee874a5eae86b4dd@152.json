{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "269d322de2df4adb550acb17086e0e61596feffb",
      "candidate_info": {
        "commit_hash": "269d322de2df4adb550acb17086e0e61596feffb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/269d322de2df4adb550acb17086e0e61596feffb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/treeview.c",
          "test/rowvalue.test"
        ],
        "message": "When a vector comparison appears in the WHERE clause and the constraint side has a COLLATE clause on the first term of the vector, be sure to honor that COLLATE clause.  Ticket [135c9da7513e5a97].\n\nFossilOrigin-Name: 978b2d20cf95d0b7143e3104ce1e9d5c85002867b554dc6b21deb528b730bbc7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/treeview.c||src/treeview.c",
          "test/rowvalue.test||test/rowvalue.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5c118617cf08e17a6edfdfba86e3fc49132a780990b68b52724c2aaeac85f506",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:       p = p->pLeft;",
          "176:       continue;",
          "177:     }",
          "178:     if( op==TK_COLLATE ){",
          "179:       pColl = sqlite3GetCollSeq(pParse, ENC(db), 0, p->u.zToken);",
          "180:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:     if( op==TK_VECTOR ){",
          "179:       p = p->x.pList->a[0].pExpr;",
          "180:       continue;",
          "181:     }",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1071:   A = sqlite3PExpr(pParse, TK_VECTOR, 0, 0);",
          "1072:   if( A ){",
          "1073:     A->x.pList = pList;",
          "1074:   }else{",
          "1075:     sqlite3ExprListDelete(pParse->db, pList);",
          "1076:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1074:     if( pList->nExpr ){",
          "1075:       A->flags |= pList->a[0].pExpr->flags & EP_Propagate;",
          "1076:     }",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:       break;",
          "662:     }",
          "663:     case TK_VECTOR: {",
          "665:       break;",
          "666:     }",
          "667:     case TK_SELECT_COLUMN: {",
          "",
          "[Removed Lines]",
          "664:       sqlite3TreeViewBareExprList(pView, pExpr->x.pList, \"VECTOR\");",
          "",
          "[Added Lines]",
          "664:       char *z = sqlite3_mprintf(\"VECTOR%s\",zFlgs);",
          "665:       sqlite3TreeViewBareExprList(pView, pExpr->x.pList, z);",
          "666:       sqlite3_free(z);",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "595:   SELECT 2 FROM t0 WHERE (t0.c0, TRUE) > (CAST('' AS REAL), FALSE);",
          "596: } {1 2}",
          "598: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598: # 2019-10-23 Ticket 135c9da7513e5a97",
          "599: do_execsql_test 25.10 {",
          "600:   DROP TABLE t0;",
          "601:   CREATE TABLE t0(c0 UNIQUE);",
          "602:   INSERT INTO t0(c0) VALUES('a');",
          "603:   SELECT (t0.c0, 0) < ('B' COLLATE NOCASE, 0) FROM t0;",
          "604:   SELECT 2 FROM t0 WHERE (t0.c0, 0) < ('B' COLLATE NOCASE, 0);",
          "605: } {1 2}",
          "606: do_execsql_test 25.20 {",
          "607:   SELECT ('B' COLLATE NOCASE, 0)> (t0.c0, 0) FROM t0;",
          "608:   SELECT 2 FROM t0 WHERE ('B' COLLATE NOCASE, 0)> (t0.c0, 0);",
          "609: } {1 2}",
          "610: do_execsql_test 25.30 {",
          "611:   SELECT ('B', 0)> (t0.c0 COLLATE nocase, 0) FROM t0;",
          "612:   SELECT 2 FROM t0 WHERE ('B', 0)> (t0.c0 COLLATE nocase, 0);",
          "613: } {1 2}",
          "614: do_execsql_test 25.40 {",
          "615:   SELECT (t0.c0 COLLATE nocase, 0) < ('B', 0) FROM t0;",
          "616:   SELECT 2 FROM t0 WHERE (t0.c0 COLLATE nocase, 0) < ('B', 0);",
          "617: } {1 2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09ea1256ecc31185dbc61ef61ee6be8fad5c9e02",
      "candidate_info": {
        "commit_hash": "09ea1256ecc31185dbc61ef61ee6be8fad5c9e02",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/09ea1256ecc31185dbc61ef61ee6be8fad5c9e02",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/test1.c"
        ],
        "message": "Improvement to the hexdb interpreter built into the CLI and into the TCL test harness: Round the \"size\" up to the next multiple of the \"pagesize\".\n\nFossilOrigin-Name: 9ec92939cb2d2c96ae15bc496feed233ce31424c25a6bf86ace7e0ef3eedec5b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7ef7b23cbb1b9ace9f853238d9133320c153e6c3417e6823ab6394ee1fe56358",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3891:   rc = sscanf(zLine, \"| size %d pagesize %d\", &n, &pgsz);",
          "3892:   if( rc!=2 ) goto readHexDb_error;",
          "3893:   if( n<0 ) goto readHexDb_error;",
          "3894:   a = sqlite3_malloc( n ? n : 1 );",
          "3895:   if( a==0 ){",
          "3896:     utf8_printf(stderr, \"Out of memory!\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3894:   if( pgsz<512 || pgsz>65536 || (pgsz&(pgsz-1))!=0 ) goto readHexDb_error;",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7740:       int pgsz;",
          "7741:       rc = sscanf(zIn+i, \"| size %d pagesize %d\", &n, &pgsz);",
          "7742:       if( rc!=2 ) continue;",
          "7743:       if( n<512 ){",
          "7744:         Tcl_AppendResult(interp, \"bad 'size' field\", (void*)0);",
          "7745:         return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7743:       if( pgsz<512 || pgsz>65536 || (pgsz&(pgsz-1))!=0 ){",
          "7744:         Tcl_AppendResult(interp, \"bad 'pagesize' field\", (void*)0);",
          "7745:         return TCL_ERROR;",
          "7746:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c0b42437ab69d01daa61bd77f74badb95c82bd40",
      "candidate_info": {
        "commit_hash": "c0b42437ab69d01daa61bd77f74badb95c82bd40",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c0b42437ab69d01daa61bd77f74badb95c82bd40",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a locking-page related problem with the \".recover\" command.\n\nFossilOrigin-Name: afdae10424f0f3d0f10a4b73e9732aa55c5ee664814d8ca0edd372cfb17c2445",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:   sqlite3_int64 iRowid;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:   int szDb;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303:   sqlite3_bind_int64(pStmt, 2, pgno);",
          "304:   if( SQLITE_ROW==sqlite3_step(pStmt) ){",
          "305:     int nCopy = sqlite3_column_bytes(pStmt, 0);",
          "314:     }",
          "315:   }",
          "316:   rc2 = sqlite3_reset(pStmt);",
          "319:   return rc;",
          "320: }",
          "",
          "[Removed Lines]",
          "306:     u8 *pPage = (u8*)sqlite3_malloc64(nCopy);",
          "307:     if( pPage==0 ){",
          "308:       rc = SQLITE_NOMEM;",
          "309:     }else{",
          "310:       const u8 *pCopy = sqlite3_column_blob(pStmt, 0);",
          "311:       memcpy(pPage, pCopy, nCopy);",
          "317:   if( *ppPage==0 ) rc = rc2;",
          "",
          "[Added Lines]",
          "307:     if( nCopy>0 ){",
          "308:       u8 *pPage;",
          "309:       pPage = (u8*)sqlite3_malloc64(nCopy);",
          "310:       if( pPage==0 ){",
          "311:         rc = SQLITE_NOMEM;",
          "312:       }else{",
          "313:         const u8 *pCopy = sqlite3_column_blob(pStmt, 0);",
          "314:         memcpy(pPage, pCopy, nCopy);",
          "315:       }",
          "321:   if( rc==SQLITE_OK ) rc = rc2;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "419:     int iOff = (pCsr->iPgno==1 ? 100 : 0);",
          "421:     if( pCsr->aPage==0 ){",
          "424:       pCsr->iCell = pTab->bPtr ? -2 : 0;",
          "425:       pCsr->nCell = get_uint16(&pCsr->aPage[iOff+3]);",
          "426:     }",
          "",
          "[Removed Lines]",
          "422:       rc = dbdataLoadPage(pCsr, pCsr->iPgno, &pCsr->aPage, &pCsr->nPage);",
          "423:       if( rc!=SQLITE_OK || pCsr->aPage==0 ) return rc;",
          "",
          "[Added Lines]",
          "426:       while( 1 ){",
          "427:         if( pCsr->bOnePage==0 && pCsr->iPgno>pCsr->szDb ) return SQLITE_OK;",
          "428:         rc = dbdataLoadPage(pCsr, pCsr->iPgno, &pCsr->aPage, &pCsr->nPage);",
          "429:         if( rc!=SQLITE_OK ) return rc;",
          "430:         if( pCsr->aPage ) break;",
          "431:         pCsr->iPgno++;",
          "432:       }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "574:   return pCsr->aPage==0;",
          "575: }",
          "579: static int dbdataFilter(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "586: static int dbdataDbsize(DbdataCursor *pCsr, const char *zSchema){",
          "587:   DbdataTable *pTab = (DbdataTable*)pCsr->base.pVtab;",
          "588:   char *zSql = 0;",
          "589:   int rc, rc2;",
          "590:   sqlite3_stmt *pStmt = 0;",
          "592:   zSql = sqlite3_mprintf(\"PRAGMA %Q.page_count\", zSchema);",
          "593:   if( zSql==0 ) return SQLITE_NOMEM;",
          "594:   rc = sqlite3_prepare_v2(pTab->db, zSql, -1, &pStmt, 0);",
          "595:   sqlite3_free(zSql);",
          "596:   if( rc==SQLITE_OK && sqlite3_step(pStmt)==SQLITE_ROW ){",
          "597:     pCsr->szDb = sqlite3_column_int(pStmt, 0);",
          "598:   }",
          "599:   rc2 = sqlite3_finalize(pStmt);",
          "600:   if( rc==SQLITE_OK ) rc = rc2;",
          "601:   return rc;",
          "602: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "594:   if( idxNum & 0x02 ){",
          "595:     pCsr->iPgno = sqlite3_value_int(argv[(idxNum & 0x01)]);",
          "596:     pCsr->bOnePage = 1;",
          "597:   }",
          "607:   }",
          "608:   if( rc==SQLITE_OK ){",
          "609:     rc = sqlite3_bind_text(pCsr->pStmt, 1, zSchema, -1, SQLITE_TRANSIENT);",
          "",
          "[Removed Lines]",
          "599:   if( pTab->pStmt ){",
          "600:     pCsr->pStmt = pTab->pStmt;",
          "601:     pTab->pStmt = 0;",
          "602:   }else{",
          "603:     rc = sqlite3_prepare_v2(pTab->db,",
          "604:         \"SELECT data FROM sqlite_dbpage(?) WHERE pgno=?\", -1,",
          "605:         &pCsr->pStmt, 0",
          "606:     );",
          "",
          "[Added Lines]",
          "624:   }else{",
          "625:     pCsr->nPage = dbdataDbsize(pCsr, zSchema);",
          "626:     rc = dbdataDbsize(pCsr, zSchema);",
          "629:   if( rc==SQLITE_OK ){",
          "630:     if( pTab->pStmt ){",
          "631:       pCsr->pStmt = pTab->pStmt;",
          "632:       pTab->pStmt = 0;",
          "633:     }else{",
          "634:       rc = sqlite3_prepare_v2(pTab->db,",
          "635:           \"SELECT data FROM sqlite_dbpage(?) WHERE pgno=?\", -1,",
          "636:           &pCsr->pStmt, 0",
          "637:       );",
          "638:     }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1da302d85d7ad4ba54f877117a45d667439fd2ef31dc70ea1d54dc1fba196e68",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6165:   }",
          "6166: }",
          "6168: static void *shellMalloc(int *pRc, sqlite3_int64 nByte){",
          "6169:   void *pRet = 0;",
          "6170:   if( *pRc==SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6168: static void shellExecPrintf(sqlite3 *db, int *pRc, const char *zFmt, ...){",
          "6169:   char *z = 0;",
          "6170:   if( *pRc==SQLITE_OK ){",
          "6171:     va_list ap;",
          "6172:     va_start(ap, zFmt);",
          "6173:     z = sqlite3_vmprintf(zFmt, ap);",
          "6174:     va_end(ap);",
          "6175:     if( z==0 ){",
          "6177:     }else{",
          "6178:       shellExec(db, pRc, z);",
          "6179:     }",
          "6180:     sqlite3_free(z);",
          "6181:   }",
          "6182: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6416:     if( n<=17 && memcmp(\"-freelist-corrupt\", z, n)==0 ){",
          "6417:       bFreelist = 0;",
          "6418:     }",
          "6419:     else{",
          "6424:       return 1;",
          "6425:     }",
          "6426:   }",
          "6432:     \"CREATE TABLE recovery.dbptr(\"",
          "6433:     \"      pgno, child, PRIMARY KEY(child, pgno)\"",
          "6434:     \") WITHOUT ROWID;\"",
          "",
          "[Removed Lines]",
          "6420:       raw_printf(stderr,",
          "6421:         \"unexpected option: %s - expected \\\"--freelist-corrupt\\\"\\n\",",
          "6422:         azArg[i]",
          "6423:       );",
          "6428:   shellExec(pState->db, &rc,",
          "6431:     \"ATTACH '' AS recovery;\"",
          "6435:     \"INSERT OR IGNORE INTO dbptr(pgno, child) SELECT * FROM sqlite_dbptr;\"",
          "",
          "[Added Lines]",
          "6436:     if( n<=12 && memcmp(\"-recovery-db\", z, n)==0 && i<(nArg-1) ){",
          "6437:       i++;",
          "6438:       zRecoveryDb = azArg[i];",
          "6439:     }",
          "6441:       raw_printf(stderr, \"unexpected option: %s\\n\", azArg[i]);",
          "6442:       raw_printf(stderr, \"options are:\\n\");",
          "6443:       raw_printf(stderr, \"    --freelist-corrupt\\n\");",
          "6444:       raw_printf(stderr, \"    --recovery-db DATABASE\\n\");",
          "6449:   shellExecPrintf(pState->db, &rc,",
          "6452:     \"ATTACH %Q AS recovery;\"",
          "6453:     \"DROP TABLE IF EXISTS recovery.dbptr;\"",
          "6454:     \"DROP TABLE IF EXISTS recovery.freelist;\"",
          "6455:     \"DROP TABLE IF EXISTS recovery.map;\"",
          "6456:     \"DROP TABLE IF EXISTS recovery.schema;\"",
          "6460:     \"INSERT OR IGNORE INTO recovery.dbptr(pgno, child) \"",
          "6461:     \"    SELECT * FROM sqlite_dbptr;\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6445:     \"  SELECT child FROM recovery.dbptr GROUP BY child HAVING count(*)>1\"",
          "6446:     \");\"",
          "6449:   );",
          "6451:   if( bFreelist ){",
          "",
          "[Removed Lines]",
          "6448:     \"CREATE TABLE recovery.freelist(pgno INTEGER PRIMARY KEY);\"",
          "",
          "[Added Lines]",
          "6474:     \"CREATE TABLE recovery.freelist(pgno INTEGER PRIMARY KEY);\", zRecoveryDb",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45cb2aa98cb1a082b90b4ff7f880a9b07050a09b",
      "candidate_info": {
        "commit_hash": "45cb2aa98cb1a082b90b4ff7f880a9b07050a09b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/45cb2aa98cb1a082b90b4ff7f880a9b07050a09b",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest_data.tcl",
          "test/wapptest.tcl"
        ],
        "message": "Update \"releasetest_data.tcl\" so that it is a standalone script that generates sh or batch scripts to run each tcl test run at release time. Update wapptest.tcl to use it.\n\nFossilOrigin-Name: 559c2dd6724b2fc238760863d4be7132b591457e72ca5758fdd4002fbf7df4bc",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest_data.tcl||test/releasetest_data.tcl",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6e92d71c24c6039e7116f02fc5f39b2b87efcd3674ea828077c03d760bf49c45",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: # This file contains Configuration data used by \"wapptest.tcl\" and",
          "3: # \"releasetest.tcl\".",
          "4: #",
          "6: # Omit comments (text between # and \\n) in a long multi-line string.",
          "7: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5: set USAGE {",
          "6: $argv0 configurations",
          "7:     List available configurations.",
          "9: $argv0 script ?-msvc? CONFIGURATION TARGET",
          "10:     Given a configuration and make target, return a bash (or, if -msvc",
          "11:     is specified, batch) script to execute the test. The first argument",
          "12:     passed to the script must be a directory containing SQLite source code.",
          "14: $argv0 platforms",
          "15:     List available platforms.",
          "17: $argv0 tests ?-nodebug? PLATFORM",
          "18:     List tests in a specified platform. If the -nodebug switch is",
          "19:     specified, synthetic debug/ndebug configurations are omitted.",
          "20: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:     -DHAVE_LOCALTIME_R=1",
          "159:     -DHAVE_PREAD=1",
          "160:     -DHAVE_PWRITE=1",
          "163:     -DHAVE_UTIME=1",
          "164:     -DSQLITE_DEFAULT_CACHE_SIZE=1000",
          "165:     -DSQLITE_DEFAULT_CKPTFULLFSYNC=1",
          "",
          "[Removed Lines]",
          "161:     -DHAVE_USLEEP=1",
          "162:     -DHAVE_USLEEP=1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "172:     -DSQLITE_ENABLE_FTS3=1",
          "173:     -DSQLITE_ENABLE_FTS3_PARENTHESIS=1",
          "174:     -DSQLITE_ENABLE_FTS3_TOKENIZER=1",
          "176:     -DSQLITE_ENABLE_PERSIST_WAL=1",
          "177:     -DSQLITE_ENABLE_PURGEABLE_PCACHE=1",
          "178:     -DSQLITE_ENABLE_RTREE=1",
          "",
          "[Removed Lines]",
          "175:     if:os==\"Darwin\" -DSQLITE_ENABLE_LOCKING_STYLE=1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:   \"No-lookaside\" {",
          "213:     -DSQLITE_TEST_REALLOC_STRESS=1",
          "214:     -DSQLITE_OMIT_LOOKASIDE=1",
          "216:   }",
          "217:   \"Valgrind\" {",
          "218:     -DSQLITE_ENABLE_STAT4",
          "",
          "[Removed Lines]",
          "215:     -DHAVE_USLEEP=1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "234:   FuzzFail1 {-O0}",
          "235:   FuzzFail2 {-O0}",
          "236: }]",
          "238: array set ::Platforms [strip_comments {",
          "239:   Linux-x86_64 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249: if {$tcl_platform(os)==\"Darwin\"} {",
          "250:   lappend Configs(Apple -DSQLITE_ENABLE_LOCKING_STYLE=1",
          "251: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "299:   }",
          "300: }]",
          "308:   #",
          "320:       continue",
          "321:     }",
          "352:         }",
          "353:       }",
          "365:       }",
          "367:     }",
          "375:   #",
          "377:     lappend opts -DHAVE_USLEEP=1",
          "378:   }",
          "399: }",
          "409:     }",
          "410:   }",
          "411: }",
          "",
          "[Removed Lines]",
          "302: proc make_test_suite {msvc withtcl name testtarget config} {",
          "304:   # Tcl variable $opts is used to build up the value used to set the",
          "305:   # OPTS Makefile variable. Variable $cflags holds the value for",
          "306:   # CFLAGS. The makefile will pass OPTS to both gcc and lemon, but",
          "307:   # CFLAGS is only passed to gcc.",
          "309:   set makeOpts \"\"",
          "310:   set cflags [expr {$msvc ? \"-Zi\" : \"-g\"}]",
          "311:   set opts \"\"",
          "312:   set title ${name}($testtarget)",
          "313:   set configOpts $withtcl",
          "314:   set skip 0",
          "316:   regsub -all {#[^\\n]*\\n} $config \\n config",
          "317:   foreach arg $config {",
          "318:     if {$skip} {",
          "319:       set skip 0",
          "322:     if {[regexp {^-[UD]} $arg]} {",
          "323:       lappend opts $arg",
          "324:     } elseif {[regexp {^[A-Z]+=} $arg]} {",
          "325:       lappend testtarget $arg",
          "326:     } elseif {[regexp {^if:([a-z]+)(.*)} $arg all key tail]} {",
          "327:       # Arguments of the form 'if:os==\"Linux\"' will cause the subsequent",
          "328:       # argument to be skipped if the $tcl_platform(os) is not \"Linux\", for",
          "329:       # example...",
          "330:       set skip [expr !(\\$::tcl_platform($key)$tail)]",
          "331:     } elseif {[regexp {^--(enable|disable)-} $arg]} {",
          "332:       if {$msvc} {",
          "333:         if {$arg eq \"--disable-amalgamation\"} {",
          "334:           lappend makeOpts USE_AMALGAMATION=0",
          "335:           continue",
          "336:         }",
          "337:         if {$arg eq \"--disable-shared\"} {",
          "338:           lappend makeOpts USE_CRT_DLL=0 DYNAMIC_SHELL=0",
          "339:           continue",
          "340:         }",
          "341:         if {$arg eq \"--enable-fts5\"} {",
          "342:           lappend opts -DSQLITE_ENABLE_FTS5",
          "343:           continue",
          "344:         }",
          "345:         if {$arg eq \"--enable-json1\"} {",
          "346:           lappend opts -DSQLITE_ENABLE_JSON1",
          "347:           continue",
          "348:         }",
          "349:         if {$arg eq \"--enable-shared\"} {",
          "350:           lappend makeOpts USE_CRT_DLL=1 DYNAMIC_SHELL=1",
          "351:           continue",
          "354:       lappend configOpts $arg",
          "355:     } else {",
          "356:       if {$msvc} {",
          "357:         if {$arg eq \"-g\"} {",
          "358:           lappend cflags -Zi",
          "359:           continue",
          "360:         }",
          "361:         if {[regexp -- {^-O(\\d+)$} $arg all level]} then {",
          "362:           lappend makeOpts OPTIMIZATIONS=$level",
          "363:           continue",
          "364:         }",
          "366:       lappend cflags $arg",
          "368:   }",
          "370:   # Disable sync to make testing faster.",
          "371:   #",
          "372:   lappend opts -DSQLITE_NO_SYNC=1",
          "374:   # Some configurations already set HAVE_USLEEP; in that case, skip it.",
          "376:   if {[lsearch -regexp $opts {^-DHAVE_USLEEP(?:=|$)}]==-1} {",
          "380:   # Add the define for this platform.",
          "381:   #",
          "382:   if {$::tcl_platform(platform)==\"windows\"} {",
          "383:     lappend opts -DSQLITE_OS_WIN=1",
          "384:   } else {",
          "385:     lappend opts -DSQLITE_OS_UNIX=1",
          "386:   }",
          "388:   # Set the sub-directory to use.",
          "389:   #",
          "390:   set dir [string tolower [string map {- _ \" \" _ \"(\" _ \")\" _} $name]]",
          "392:   # Join option lists into strings, using space as delimiter.",
          "393:   #",
          "394:   set makeOpts [join $makeOpts \" \"]",
          "395:   set cflags   [join $cflags \" \"]",
          "396:   set opts     [join $opts \" \"]",
          "398:   return [list $title $dir $configOpts $testtarget $makeOpts $cflags $opts]",
          "401: # Configuration verification: Check that each entry in the list of configs",
          "402: # specified for each platforms exists.",
          "403: #",
          "404: foreach {key value} [array get ::Platforms] {",
          "405:   foreach {v t} $value {",
          "406:     if {0==[info exists ::Configs($v)]} {",
          "407:       puts stderr \"No such configuration: \\\"$v\\\"\"",
          "408:       exit -1",
          "",
          "[Added Lines]",
          "317: # Configuration verification: Check that each entry in the list of configs",
          "318: # specified for each platforms exists.",
          "319: #",
          "320: foreach {key value} [array get ::Platforms] {",
          "321:   foreach {v t} $value {",
          "322:     if {0==[info exists ::Configs($v)]} {",
          "323:       puts stderr \"No such configuration: \\\"$v\\\"\"",
          "324:       exit -1",
          "325:     }",
          "326:   }",
          "327: }",
          "329: proc usage {} {",
          "330:   global argv0",
          "331:   puts stderr [subst $::USAGE]",
          "332:   exit 1",
          "333: }",
          "335: proc is_prefix {p str min} {",
          "336:   set n [string length $p]",
          "337:   if {$n<$min} { return 0 }",
          "338:   if {[string range $str 0 [expr $n-1]]!=$p} { return 0 }",
          "339:   return 1",
          "340: }",
          "342: proc main_configurations {} {",
          "343:   foreach k [lsort [array names ::Configs]] {",
          "344:     puts $k",
          "345:   }",
          "346: }",
          "348: proc main_platforms {} {",
          "349:   foreach k [lsort [array names ::Platforms]] {",
          "350:     puts \"\\\"$k\\\"\"",
          "351:   }",
          "352: }",
          "354: proc main_script {args} {",
          "355:   set bMsvc 0",
          "356:   set nArg [llength $args]",
          "357:   if {$nArg==3} {",
          "358:     if {![is_prefix [lindex $args 0] -msvc 2]} usage",
          "359:     set bMsvc 1",
          "360:   } elseif {$nArg<2 || $nArg>3} {",
          "361:     usage",
          "362:   }",
          "363:   set config [lindex $args end-1]",
          "364:   set target [lindex $args end]",
          "366:   set opts       [list]                         ;# OPTS value",
          "367:   set cflags     [expr {$bMsvc ? \"-Zi\" : \"-g\"}] ;# CFLAGS value",
          "368:   set makeOpts   [list]                         ;# Extra args for [make]",
          "369:   set configOpts [list]                         ;# Extra args for [configure]",
          "371:   if {$::tcl_platform(platform)==\"windows\"} {",
          "372:     lappend opts -DSQLITE_OS_WIN=1",
          "373:   } else {",
          "374:     lappend opts -DSQLITE_OS_UNIX=1",
          "375:   }",
          "377:   # Figure out if this is a synthetic ndebug or debug configuration.",
          "378:   #",
          "379:   set bRemoveDebug 0",
          "380:   if {[string match *-ndebug $config]} {",
          "381:     set bRemoveDebug 1",
          "382:     set config [string range $config 0 end-7]",
          "383:   }",
          "384:   if {[string match *-debug $config]} {",
          "385:     lappend opts -DSQLITE_DEBUG",
          "386:     lappend opts -DSQLITE_EXTRA_IFNULLROW",
          "387:     set config [string range $config 0 end-6]",
          "388:   }",
          "390:   # Ensure that the named configuration exists.",
          "391:   #",
          "392:   if {![info exists ::Configs($config)]} {",
          "393:     puts stderr \"No such config: $config\"",
          "394:     exit 1",
          "395:   }",
          "397:   # Loop through the parameters of the nominated configuration, updating",
          "398:   # $opts, $cflags, $makeOpts and $configOpts along the way. Rules are as",
          "399:   # follows:",
          "400:   #",
          "401:   #   1. If $bRemoveDebug is set and the parameter is -DSQLITE_DEBUG or",
          "402:   #      -DSQLITE_DEBUG=1, discard it.",
          "403:   #",
          "404:   #   2. If the parameter begins with \"-D\", add it to $opts.",
          "405:   #",
          "406:   #   3. If the parameter begins with \"--\" add it to $configOpts. Unless",
          "407:   #      this command is preparing a script for MSVC - then add an",
          "408:   #      equivalent to $makeOpts or $opts.",
          "409:   #",
          "410:   #   4. If the parameter begins with \"-\" add it to $cflags. If in MSVC",
          "411:   #      mode and the parameter is an -O<integer> option, instead add",
          "412:   #      an OPTIMIZATIONS=<integer> switch to $makeOpts.",
          "414:   #   5. If none of the above apply, add the parameter to $makeOpts",
          "415:   #",
          "416:   foreach param $::Configs($config) {",
          "417:     if {$bRemoveDebug} {",
          "418:       if {$param==\"-DSQLITE_DEBUG\" || $param==\"-DSQLITE_DEBUG=1\"",
          "419:        || $param==\"-DSQLITE_MEMDEBUG\" || $param==\"-DSQLITE_MEMDEBUG=1\"",
          "420:       } {",
          "421:         continue",
          "422:       }",
          "423:     }",
          "425:     if {[string range $param 0 1]==\"-D\"} {",
          "426:       lappend opts $param",
          "430:     if {[string range $param 0 1]==\"--\"} {",
          "431:       if {$bMsvc} {",
          "432:         switch -- $param {",
          "433:           --disable-amalgamation {",
          "434:             lappend makeOpts USE_AMALGAMATION=0",
          "435:           }",
          "436:           --disable-shared {",
          "437:             lappend makeOpts USE_CRT_DLL=0 DYNAMIC_SHELL=0",
          "438:           }",
          "439:           --enable-fts5 {",
          "440:             lappend opts -DSQLITE_ENABLE_FTS5",
          "441:           }",
          "442:           --enable-json1 {",
          "443:             lappend opts -DSQLITE_ENABLE_JSON1",
          "444:           }",
          "445:           --enable-shared {",
          "446:             lappend makeOpts USE_CRT_DLL=1 DYNAMIC_SHELL=1",
          "447:           }",
          "448:           --enable-session {",
          "449:             lappend opts -DSQLITE_ENABLE_PREUPDATE_HOOK",
          "450:             lappend opts -DSQLITE_ENABLE_SESSION",
          "451:           }",
          "452:           default {",
          "453:             error \"Cannot translate $param for MSVC\"",
          "454:           }",
          "456:       } else {",
          "457:         lappend configOpts $param",
          "460:       continue",
          "461:     }",
          "463:     if {[string range $param 0 0]==\"-\"} {",
          "464:       if {$bMsvc && [regexp -- {^-O(\\d+)$} $param -> level]} {",
          "465:         lappend makeOpts OPTIMIZATIONS=$level",
          "466:       } else {",
          "467:         lappend cflags $param",
          "469:       continue",
          "472:     lappend makeOpts $param",
          "473:   }",
          "475:   # Some configurations specify -DHAVE_USLEEP=0. For all others, add",
          "476:   # -DHAVE_USLEEP=1.",
          "478:   if {[lsearch $opts \"-DHAVE_USLEEP=0\"]<0} {",
          "482:   if {$bMsvc==0} {",
          "483:     puts {set -e}",
          "484:     puts {}",
          "485:     puts {if [ \"$#\" -ne 1 ] ; then}",
          "486:     puts {  echo \"Usage: $0 <sqlite-src-dir>\" }",
          "487:     puts {  exit -1 }",
          "488:     puts {fi }",
          "489:     puts {SRCDIR=$1}",
          "490:     puts {}",
          "491:     puts \"TCL=\\\"[::tcl::pkgconfig get libdir,install]\\\"\"",
          "493:     puts \"\\$SRCDIR/configure --with-tcl=\\$TCL $configOpts\"",
          "494:     puts {}",
          "495:     puts {OPTS=\"      -DSQLITE_NO_SYNC=1\"}",
          "496:     foreach o $opts {",
          "497:       puts \"OPTS=\\\"\\$OPTS $o\\\"\"",
          "498:     }",
          "499:     puts {}",
          "500:     puts \"CFLAGS=\\\"$cflags\\\"\"",
          "501:     puts {}",
          "502:     puts \"make $target \\\"CFLAGS=\\$CFLAGS\\\" \\\"OPTS=\\$OPTS\\\" $makeOpts\"",
          "503:   } else {",
          "505:     puts {set SRCDIR=%1}",
          "506:     set makecmd    \"nmake /f %SRCDIR%\\\\Makefile.msc TOP=%SRCDIR% $target \"",
          "507:     append makecmd \"\\\"CFLAGS=$cflags\\\" \\\"OPTS=$opts\\\" $makeOpts\"",
          "509:     puts $makecmd",
          "510:   }",
          "513: proc main_tests {args} {",
          "514:   set bNodebug 0",
          "515:   set nArg [llength $args]",
          "516:   if {$nArg==2} {",
          "517:     if {[is_prefix [lindex $args 0] -nodebug 2]} {",
          "518:       set bNodebug 1",
          "519:     } elseif {[is_prefix [lindex $args 0] -debug 2]} {",
          "520:       set bNodebug 0",
          "521:     } else usage",
          "522:   } elseif {$nArg==0 || $nArg>2} {",
          "523:     usage",
          "524:   }",
          "525:   set p [lindex $args end]",
          "526:   if {![info exists ::Platforms($p)]} {",
          "527:     puts stderr \"No such platform: $p\"",
          "528:     exit 1",
          "529:   }",
          "531:   foreach {config target} $::Platforms($p) {",
          "532:     puts \"$config \\\"$target\\\"\"",
          "533:     if {$bNodebug==0} {",
          "534:       if {$target!=\"checksymbols\" && $target!=\"valgrindtest\"",
          "535:        && $target!=\"fuzzoomtest\"",
          "536:       } {",
          "537:         set iHas [string first SQLITE_DEBUG $::Configs($config)]",
          "538:         if {$iHas>=0} {",
          "539:           puts \"$config-ndebug \\\"test\\\"\"",
          "540:         } else {",
          "541:           puts \"$config-debug \\\"test\\\"\"",
          "542:         }",
          "543:       }",
          "548: if {[llength $argv]==0} { usage }",
          "549: set cmd [lindex $argv 0]",
          "550: set n [expr [llength $argv]-1]",
          "551: if {[string match ${cmd}* configurations] && $n==0} {",
          "552:   main_configurations",
          "553: } elseif {[string match ${cmd}* script]} {",
          "554:   main_script {*}[lrange $argv 1 end]",
          "555: } elseif {[string match ${cmd}* platforms] && $n==0} {",
          "556:   main_platforms",
          "557: } elseif {[string match ${cmd}* tests]} {",
          "558:   main_tests {*}[lrange $argv 1 end]",
          "559: } else {",
          "560:   usage",
          "561: }",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: # package required wapp",
          "6: source [file join [file dirname [info script]] wapp.tcl]",
          "12: # Variables set by the \"control\" form:",
          "13: #",
          "14: #   G(platform) - User selected platform.",
          "",
          "[Removed Lines]",
          "8: # Read the data from the releasetest_data.tcl script.",
          "9: #",
          "10: source [file join [file dirname [info script]] releasetest_data.tcl]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:   wapptest_output [string repeat * 70]",
          "70: }",
          "72: # Generate the text for the box at the top of the UI. The current SQLite",
          "73: # version, according to fossil, along with a warning if there are",
          "74: # uncommitted changes in the checkout.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68: proc releasetest_data {args} {",
          "69:   global G",
          "70:   set rtd [file join $G(srcdir) test releasetest_data.tcl]",
          "71:   set fd [open \"|[info nameofexecutable] $rtd $args\" r+]",
          "72:   set ret [read $fd]",
          "73:   close $fd",
          "74:   return $ret",
          "75: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "108:   global G",
          "109:   if { $G(state)==\"config\" } {",
          "110:     set G(test_array) [list]",
          "113:       # If using MSVC, do not run sanitize or valgrind tests. Or the",
          "114:       # checksymbols test.",
          "",
          "[Removed Lines]",
          "111:     foreach {config target} $::Platforms($G(platform)) {",
          "",
          "[Added Lines]",
          "116:     set debug \"-debug\"",
          "117:     if {$G(debug)==0} { set debug \"-nodebug\"}",
          "118:     foreach {config target} [releasetest_data tests $debug $G(platform)] {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "136:       }",
          "138:       lappend G(test_array) [dict create config $config target $target]",
          "155:     }",
          "156:   }",
          "157: }",
          "",
          "[Removed Lines]",
          "140:       set exclude [list checksymbols valgrindtest fuzzoomtest]",
          "141:       if {$G(debug) && !($target in $exclude)} {",
          "142:         set debug_idx [lsearch -glob $::Configs($config) -DSQLITE_DEBUG*]",
          "143:         set xtarget $target",
          "144:         regsub -all {fulltest[a-z]*} $xtarget test xtarget",
          "145:         if {$debug_idx<0} {",
          "146:           lappend G(test_array) [",
          "147:             dict create config $config-(Debug) target $xtarget",
          "148:           ]",
          "149:         } else {",
          "150:           lappend G(test_array) [",
          "151:             dict create config $config-(NDebug) target $xtarget",
          "152:           ]",
          "153:         }",
          "154:       }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "322: #",
          "323: proc wapptest_slave_script {} {",
          "324:   global G",
          "348:   }",
          "352:   set res",
          "353: }",
          "356: # Launch a slave process to run a test.",
          "357: #",
          "361:   global G",
          "363:   catch { file mkdir $dir } msg",
          "",
          "[Removed Lines]",
          "325:   set res {",
          "326:     proc readfile {filename} {",
          "327:       set fd [open $filename]",
          "328:       set data [read $fd]",
          "329:       close $fd",
          "330:       return $data",
          "331:     }",
          "332:   }",
          "334:   if {$G(msvc)==0} {",
          "335:     append res {",
          "336:       set cfg  [readfile wapptest_configure.sh]",
          "337:       set rc [catch { exec {*}$cfg >& test.log } msg]",
          "338:       if {$rc==0} {",
          "339:         set make [readfile wapptest_make.sh]",
          "340:         set rc [catch { exec {*}$make >>& test.log }]",
          "341:       }",
          "342:     }",
          "343:   } else {",
          "344:     append res {",
          "345:       set make [readfile wapptest_make.sh]",
          "346:       set rc [catch { exec {*}$make >>& test.log }]",
          "347:     }",
          "350:   append res { exit $rc }",
          "358: proc slave_launch {",
          "359:   name wtcl title dir configOpts testtarget makeOpts cflags opts",
          "360: } {",
          "",
          "[Added Lines]",
          "316:   if {$G(msvc)==0} {",
          "317:     set dir [file join .. $G(srcdir)]",
          "318:     set res [subst -nocommands {",
          "319:       set rc [catch \"exec sh wapptest_cmd.sh {$dir} >>& test.log\" ]",
          "320:       exit [set rc]",
          "321:     }]",
          "322:   } else {",
          "323:     set dir [file nativename [file normalize $G(srcdir)]]",
          "324:     set dir [string map [list \"\\\\\" \"\\\\\\\\\"] $dir]",
          "325:     set res [subst -nocommands {",
          "326:       set rc [catch \"exec wapptest_cmd.bat {$dir} >>& test.log\" ]",
          "327:       exit [set rc]",
          "328:     }]",
          "337: proc slave_launch {name target dir} {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "366:   }",
          "367:   set G(test.$name.dir) $dir",
          "371:   #",
          "375:   }",
          "376:   close $fd1",
          "391:   # Write the wapptest_run.tcl script to the test directory. To run the",
          "392:   # commands in the other two files.",
          "393:   #",
          "",
          "[Removed Lines]",
          "369:   # Write the configure command to wapptest_configure.sh. This file",
          "370:   # is empty if using MSVC - MSVC does not use configure.",
          "372:   set fd1 [open [file join $dir wapptest_configure.sh] w]",
          "373:   if {$G(msvc)==0} {",
          "374:     puts $fd1 \"[file join .. $G(srcdir) configure] $wtcl $configOpts\"",
          "378:   # Write the make command to wapptest_make.sh. Using nmake for MSVC and",
          "379:   # make for all other systems.",
          "380:   #",
          "381:   set makecmd \"make\"",
          "382:   if {$G(msvc)} {",
          "383:     set nativedir [file nativename $G(srcdir)]",
          "384:     set nativedir [string map [list \"\\\\\" \"\\\\\\\\\"] $nativedir]",
          "385:     set makecmd \"nmake /f [file join $nativedir Makefile.msc] TOP=$nativedir\"",
          "386:   }",
          "387:   set fd2 [open [file join $dir wapptest_make.sh] w]",
          "388:   puts $fd2 \"$makecmd $makeOpts $testtarget \\\"CFLAGS=$cflags\\\" \\\"OPTS=$opts\\\"\"",
          "389:   close $fd2",
          "",
          "[Added Lines]",
          "346:   # Write the test command to wapptest_cmd.sh|bat.",
          "348:   set ext sh",
          "349:   if {$G(msvc)} { set ext bat }",
          "350:   set fd1 [open [file join $dir wapptest_cmd.$ext] w]",
          "351:   if {$G(msvc)} {",
          "352:     puts $fd1 [releasetest_data script -msvc $name $target]",
          "353:   } else {",
          "354:     puts $fd1 [releasetest_data script $name $target]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "448:       } {",
          "450:         set target [dict get $j target]",
          "451:         set G(test.$name.start) [clock seconds]",
          "475:         incr nLaunch -1",
          "476:       }",
          "477:     }",
          "",
          "[Removed Lines]",
          "452:         set wtcl \"\"",
          "453:         if {$G(tcl)!=\"\"} { set wtcl \"--with-tcl=$G(tcl)\" }",
          "455:         # If this configuration is named <name>-(Debug) or <name>-(NDebug),",
          "456:         # then add or remove the SQLITE_DEBUG option from the base",
          "457:         # configuration before running the test.",
          "458:         if {[regexp -- {(.*)-(\\(.*\\))} $name -> head tail]} {",
          "459:           set opts $::Configs($head)",
          "460:           if {$tail==\"(Debug)\"} {",
          "461:             append opts \" -DSQLITE_DEBUG=1 -DSQLITE_EXTRA_IFNULLROW=1\"",
          "462:           } else {",
          "463:             regsub { *-DSQLITE_MEMDEBUG[^ ]* *} $opts { } opts",
          "464:             regsub { *-DSQLITE_DEBUG[^ ]* *} $opts { } opts",
          "465:           }",
          "466:         } else {",
          "467:           set opts $::Configs($name)",
          "468:         }",
          "470:         set L [make_test_suite $G(msvc) $wtcl $name $target $opts]",
          "471:         set G(test.$name.log) [file join [lindex $L 1] test.log]",
          "472:         slave_launch $name $wtcl {*}$L",
          "474:         set G(test.$name.log) [file join [lindex $L 1] test.log]",
          "",
          "[Added Lines]",
          "418:         set dir [string tolower [string map {\" \" _ \"-\" _} $name]]",
          "420:         set G(test.$name.log) [file join $dir test.log]",
          "422:         slave_launch $name $target $dir",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "517:   }",
          "519:   # Build the \"platform\" select widget.",
          "521:   generate_select_widget Platform control_platform $lOpt $G(platform)",
          "523:   # Build the \"test\" select widget.",
          "",
          "[Removed Lines]",
          "520:   set lOpt [array names ::Platforms]",
          "",
          "[Added Lines]",
          "469:   set lOpt [releasetest_data platforms]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "886:       if {$i==[llength $lTestArg]-1} { wapptest_usage }",
          "887:       incr i",
          "888:       set arg [lindex $lTestArg $i]",
          "890:       if {[lsearch $lPlatform $arg]<0} {",
          "891:         puts stderr \"No such platform: $arg. Platforms are: $lPlatform\"",
          "892:         exit -1",
          "",
          "[Removed Lines]",
          "889:       set lPlatform [array names ::Platforms]",
          "",
          "[Added Lines]",
          "838:       set lPlatform [releasetest_data platforms]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db7d895e9d145be140b8290f930a3be521861a0a",
      "candidate_info": {
        "commit_hash": "db7d895e9d145be140b8290f930a3be521861a0a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/db7d895e9d145be140b8290f930a3be521861a0a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c",
          "src/btree.c",
          "src/whereexpr.c",
          "test/corruptL.test",
          "test/fuzzdata8.db",
          "test/memdb1.test",
          "test/window1.test"
        ],
        "message": "Merge latest trunk changes into this branch.\n\nFossilOrigin-Name: 0b904517bd6c4c59082381577246d3d2351b4265fc9151438ee4c33cf16f2eb1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c",
          "src/btree.c||src/btree.c",
          "src/whereexpr.c||src/whereexpr.c",
          "test/corruptL.test||test/corruptL.test",
          "test/memdb1.test||test/memdb1.test",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 180be266238e18c01f8bd52c75dd9aa3e26e553620258141cd95189a0ae59ddb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "234:     sqlite3BtreeEnterAll(db);",
          "235:     db->init.iDb = 0;",
          "236:     db->mDbFlags &= ~(DBFLAG_SchemaKnownOk);",
          "238:     sqlite3BtreeLeaveAll(db);",
          "239:     assert( zErrDyn==0 || rc!=SQLITE_OK );",
          "240:   }",
          "",
          "[Removed Lines]",
          "237:     rc = sqlite3Init(db, &zErrDyn);",
          "",
          "[Added Lines]",
          "237:     if( !REOPEN_AS_MEMDB(db) ){",
          "238:       rc = sqlite3Init(db, &zErrDyn);",
          "239:     }",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1573:     }",
          "1574:     iAddr = pc;",
          "1575:     pc = get2byte(&aData[pc]);",
          "1577:       if( pc ){",
          "",
          "[Removed Lines]",
          "1576:     if( pc<iAddr+size ){",
          "",
          "[Added Lines]",
          "1576:     if( pc<=iAddr+size ){",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1520:   }else if( p->x.pList ){",
          "1521:     mask |= sqlite3WhereExprListUsage(pMaskSet, p->x.pList);",
          "1522:   }",
          "1523:   return mask;",
          "1524: }",
          "1525: Bitmask sqlite3WhereExprUsage(WhereMaskSet *pMaskSet, Expr *p){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1523: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "1524:   if( p->op==TK_FUNCTION && p->y.pWin ){",
          "1525:     mask |= sqlite3WhereExprListUsage(pMaskSet, p->y.pWin->pPartition);",
          "1526:     mask |= sqlite3WhereExprListUsage(pMaskSet, p->y.pWin->pOrderBy);",
          "1527:   }",
          "1528: #endif",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "123: do_catchsql_test 1.1 {",
          "124:   PRAGMA cell_size_check = off;",
          "125:   DROP INDEX t1x1;",
          "128: do_catchsql_test 1.2 {",
          "129:   SELECT sum(s+length(b)) FROM t1 WHERE a IN (110,10,150) AND q IS NULL;",
          "132: do_catchsql_test 1.3 {",
          "133:   REINDEX t1;",
          "136: #-------------------------------------------------------------------------",
          "137: reset_db",
          "",
          "[Removed Lines]",
          "126: } {1 {no such index: t1x1}}",
          "130: } {1 {no such table: t1}}",
          "134: } {1 {unable to identify the object to be reindexed}}",
          "",
          "[Added Lines]",
          "126: } {1 {database disk image is malformed}}",
          "130: } {1 {database disk image is malformed}}",
          "134: } {1 {database disk image is malformed}}",
          "136: do_catchsql_test 1.4 {",
          "137:   PRAGMA integrity_check",
          "138: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ],
        "test/memdb1.test||test/memdb1.test": [
          "File: test/memdb1.test -> test/memdb1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "185:   lappend rc $msg",
          "186: } {1 {wrong # args: should be \"db serialize ?DATABASE?\"}}",
          "188: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "188: #-------------------------------------------------------------------------",
          "189: reset_db",
          "190: do_execsql_test 700 {",
          "191:   CREATE TABLE t1(a, b);",
          "192:   PRAGMA schema_version = 0;",
          "193: }",
          "194: do_test 710 {",
          "195:   set ser [db serialize main]",
          "196:   db close",
          "197:   sqlite3 db",
          "198:   db deserialize main $ser",
          "199:   catchsql {",
          "200:     CREATE VIRTUAL TABLE t1 USING rtree(id, a, b, c, d);",
          "201:   }",
          "202: } {1 {table t1 already exists}}",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "720:   ORDER BY 10+sum(a) OVER (ORDER BY a) DESC;",
          "721: } {16 13 11}",
          "723: #-------------------------------------------------------------------------",
          "724: # Test error cases from chaining window definitions.",
          "725: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "723: #-------------------------------------------------------------------------",
          "724: #",
          "725: reset_db",
          "726: do_execsql_test 18.0 {",
          "727:   CREATE TABLE t1 ( t1_id INTEGER PRIMARY KEY );",
          "728:   CREATE TABLE t2 ( t2_id INTEGER PRIMARY KEY );",
          "729:   CREATE TABLE t3 ( t3_id INTEGER PRIMARY KEY );",
          "731:   INSERT INTO t1 VALUES(1),  (3), (5);",
          "732:   INSERT INTO t2 VALUES      (3), (5);",
          "733:   INSERT INTO t3 VALUES(10), (11), (12);",
          "734: }",
          "736: do_execsql_test 18.1 {",
          "737:   SELECT t1.* FROM t1, t2 WHERE",
          "738:     t1_id=t2_id AND t1_id IN (",
          "739:         SELECT t1_id + row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "740:     )",
          "741: }",
          "743: do_execsql_test 18.2 {",
          "744:   SELECT t1.* FROM t1, t2 WHERE",
          "745:     t1_id=t2_id AND t1_id IN (",
          "746:         SELECT         row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "747:     )",
          "748: } {3}",
          "",
          "---------------"
        ]
      }
    }
  ]
}