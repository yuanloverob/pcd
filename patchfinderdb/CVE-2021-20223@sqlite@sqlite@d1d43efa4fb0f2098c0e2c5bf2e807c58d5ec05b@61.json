{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3d863b5e4efb2305d64f87a2128289d1c3ce09b6",
      "candidate_info": {
        "commit_hash": "3d863b5e4efb2305d64f87a2128289d1c3ce09b6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3d863b5e4efb2305d64f87a2128289d1c3ce09b6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/sqliteInt.h"
        ],
        "message": "Do not allow a virtual table to be renamed into the name of one of its shadows.\n\nFossilOrigin-Name: eca0ba2cf4c0fdf757bae19c6397a48245adb99e8017ddc28f01804072a30b2c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fce173cd211b15867369b6a54fad48168352fc83981a722ce98e57299b88608a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:     sqlite3ErrorMsg(pParse,",
          "128:         \"there is already another table or index with this name: %s\", zName);",
          "129:     goto exit_rename_table;",
          "",
          "[Removed Lines]",
          "126:   if( sqlite3FindTable(db, zName, zDb) || sqlite3FindIndex(db, zName, zDb) ){",
          "",
          "[Added Lines]",
          "126:   if( sqlite3FindTable(db, zName, zDb)",
          "127:    || sqlite3FindIndex(db, zName, zDb)",
          "128:    || sqlite3IsShadowTableOf(db, pTab, zName)",
          "129:   ){",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2131:   recomputeColumnsNotIndexed(pPk);",
          "2132: }",
          "2134: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2135: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "2140: int sqlite3IsShadowTableOf(sqlite3 *db, Table *pTab, const char *zName){",
          "2144:   if( !IsVirtual(pTab) ) return 0;",
          "2145:   nName = sqlite3Strlen30(pTab->zName);",
          "2146:   if( sqlite3_strnicmp(zName, pTab->zName, nName)!=0 ) return 0;",
          "2147:   if( zName[nName]!='_' ) return 0;",
          "2148:   pMod = (Module*)sqlite3HashFind(&db->aModule, pTab->azModuleArg[0]);",
          "2149:   if( pMod==0 ) return 0;",
          "2150:   if( pMod->pModule->iVersion<3 ) return 0;",
          "2151:   if( pMod->pModule->xShadowName==0 ) return 0;",
          "2152:   return pMod->pModule->xShadowName(zName+nName+1);",
          "2153: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2152:   if( pTab==0 ) return 0;",
          "2153:   if( !IsVirtual(pTab) ) return 0;",
          "2159: }",
          "2162: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "2154:   pMod = (Module*)sqlite3HashFind(&db->aModule, pTab->azModuleArg[0]);",
          "2155:   if( pMod==0 ) return 0;",
          "2156:   if( pMod->pModule->iVersion<3 ) return 0;",
          "2157:   if( pMod->pModule->xShadowName==0 ) return 0;",
          "2158:   return pMod->pModule->xShadowName(zTail+1);",
          "",
          "[Added Lines]",
          "2174:   return sqlite3IsShadowTableOf(db, pTab, zName);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4710: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
          "4711: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "4712:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
          "4713: #else",
          "4714: # define sqlite3ShadowTableName(A,B) 0",
          "4715: #endif",
          "4716: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
          "4717: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4713:   int sqlite3IsShadowTableOf(sqlite3*,Table*,const char*);",
          "4716: # define sqlite3IsShadowTableOf(A,B,C) 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7033ce4fdc1edc11ccab7c24002edc6da1a4b237",
      "candidate_info": {
        "commit_hash": "7033ce4fdc1edc11ccab7c24002edc6da1a4b237",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7033ce4fdc1edc11ccab7c24002edc6da1a4b237",
        "files": [
          "ext/misc/decimal.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Reorder declarations in the decimal extension for C89.\n\nFossilOrigin-Name: eface2da2c0b3daee2a5fd640cca3d3757d0930f62900fc810c50c104635241d",
        "before_after_code_files": [
          "ext/misc/decimal.c||ext/misc/decimal.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/decimal.c||ext/misc/decimal.c": [
          "File: ext/misc/decimal.c -> ext/misc/decimal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "599:   const sqlite3_api_routines *pApi",
          "600: ){",
          "601:   int rc = SQLITE_OK;",
          "603:   static const struct {",
          "604:     const char *zFuncName;",
          "605:     int nArg;",
          "",
          "[Removed Lines]",
          "602:   SQLITE_EXTENSION_INIT2(pApi);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "614:   unsigned int i;",
          "617:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){",
          "618:     rc = sqlite3_create_function(db, aFunc[i].zFuncName, aFunc[i].nArg,",
          "619:                    SQLITE_UTF8|SQLITE_INNOCUOUS|SQLITE_DETERMINISTIC,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "616:   SQLITE_EXTENSION_INIT2(pApi);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fdc5fb902d7f2d10f73e64fe30c67153b59b26c5d707fc9c354e90967dbcc214",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e50478d7279b72a9df4836729c9974abfbce08ff",
      "candidate_info": {
        "commit_hash": "e50478d7279b72a9df4836729c9974abfbce08ff",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e50478d7279b72a9df4836729c9974abfbce08ff",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/btree.c",
          "src/btree.h",
          "src/ctime.c",
          "src/pragma.c",
          "src/select.c",
          "src/vdbe.c"
        ],
        "message": "Remove the SQLITE_OMIT_BTREECOUNT option.  Btree count is required.\n\nFossilOrigin-Name: a9bfa47aeea27e91611ba913d33e6635d2016e2c2ab78f9b0657f1bd8933e1a8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/btree.c||src/btree.c",
          "src/btree.h||src/btree.h",
          "src/ctime.c||src/ctime.c",
          "src/pragma.c||src/pragma.c",
          "src/select.c||src/select.c",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c38ea4139d87535b789f43eb1e38b2dc4b8312352a721035283e67cf0f3d5067",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "409: #ifdef SQLITE_ENABLE_STAT4",
          "411: #endif",
          "",
          "[Removed Lines]",
          "410:   int mxSample = sqlite3_value_int(argv[2]) ? SQLITE_STAT4_SAMPLES : 0;",
          "",
          "[Added Lines]",
          "411:   int mxSample = sqlite3_value_int64(argv[2]) ? SQLITE_STAT4_SAMPLES : 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "423:   n = sizeof(*p)",
          "426: #ifdef SQLITE_ENABLE_STAT4",
          "430: #endif",
          "432:   db = sqlite3_context_db_handle(context);",
          "433:   p = sqlite3DbMallocZero(db, n);",
          "434:   if( p==0 ){",
          "",
          "[Removed Lines]",
          "429:     + sizeof(tRowcnt)*3*nColUp*(nCol+mxSample)",
          "431:   ;",
          "",
          "[Added Lines]",
          "428:   if( mxSample ){",
          "431:       + sizeof(tRowcnt)*3*nColUp*(nCol+mxSample);",
          "432:   }",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9508:   return rc;",
          "9509: }",
          "",
          "[Removed Lines]",
          "9511: #ifndef SQLITE_OMIT_BTREECOUNT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9582:   return rc;",
          "9583: }",
          "",
          "[Removed Lines]",
          "9584: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.h||src/btree.h": [
          "File: src/btree.h -> src/btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "336: #endif",
          "337: int sqlite3BtreeCursorIsValidNN(BtCursor*);",
          "340: int sqlite3BtreeCount(sqlite3*, BtCursor*, i64*);",
          "343: #ifdef SQLITE_TEST",
          "344: int sqlite3BtreeCursorInfo(BtCursor*, int*, int);",
          "",
          "[Removed Lines]",
          "339: #ifndef SQLITE_OMIT_BTREECOUNT",
          "341: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/ctime.c||src/ctime.c": [
          "File: src/ctime.c -> src/ctime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "511: #if SQLITE_OMIT_BLOB_LITERAL",
          "512:   \"OMIT_BLOB_LITERAL\",",
          "513: #endif",
          "517: #if SQLITE_OMIT_CAST",
          "518:   \"OMIT_CAST\",",
          "519: #endif",
          "",
          "[Removed Lines]",
          "514: #if SQLITE_OMIT_BTREECOUNT",
          "515:   \"OMIT_BTREECOUNT\",",
          "516: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1729:         }",
          "1730:         sqlite3VdbeAddOp2(v, OP_Next, iDataCur, loopTop); VdbeCoverage(v);",
          "1731:         sqlite3VdbeJumpHere(v, loopTop-1);",
          "1733:         if( !isQuick ){",
          "1734:           sqlite3VdbeLoadString(v, 2, \"wrong # of entries in index \");",
          "1735:           for(j=0, pIdx=pTab->pIndex; pIdx; pIdx=pIdx->pNext, j++){",
          "",
          "[Removed Lines]",
          "1732: #ifndef SQLITE_OMIT_BTREECOUNT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6621:     else {",
          "6623:       Table *pTab;",
          "6624:       if( (pTab = isSimpleCount(p, &sAggInfo))!=0 ){",
          "",
          "[Removed Lines]",
          "6622: #ifndef SQLITE_OMIT_BTREECOUNT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6677:         sqlite3VdbeAddOp2(v, OP_Count, iCsr, sAggInfo.aFunc[0].iMem);",
          "6678:         sqlite3VdbeAddOp1(v, OP_Close, iCsr);",
          "6679:         explainSimpleCount(pParse, pTab, pBest);",
          "",
          "[Removed Lines]",
          "6680:       }else",
          "6682:       {",
          "",
          "[Added Lines]",
          "6679:       }else{",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3198:   i64 nEntry;",
          "3199:   BtCursor *pCrsr;",
          "",
          "[Removed Lines]",
          "3196: #ifndef SQLITE_OMIT_BTREECOUNT",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3208:   pOut->u.i = nEntry;",
          "3209:   goto check_for_interrupt;",
          "3210: }",
          "",
          "[Removed Lines]",
          "3211: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "33a99fad081909d26687557b49ffe45d372a8a70",
      "candidate_info": {
        "commit_hash": "33a99fad081909d26687557b49ffe45d372a8a70",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/33a99fad081909d26687557b49ffe45d372a8a70",
        "files": [
          "ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_main.c",
          "ext/fts5/fts5_tokenize.c",
          "ext/fts5/test/fts5plan.test",
          "ext/fts5/test/fts5trigram.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add experimental unicode-aware trigram tokenizer to fts5. And support for LIKE and GLOB optimizations for fts5 tables that use said tokenizer.\n\nFossilOrigin-Name: 0d7810c1aea93c0a3da1ccc4911dbce8a1b6e1dbfe1ab7e800289a0c783b5985",
        "before_after_code_files": [
          "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h",
          "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c",
          "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c",
          "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c",
          "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c",
          "ext/fts5/test/fts5plan.test||ext/fts5/test/fts5plan.test",
          "ext/fts5/test/fts5trigram.test||ext/fts5/test/fts5trigram.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5Int.h||ext/fts5/fts5Int.h": [
          "File: ext/fts5/fts5Int.h -> ext/fts5/fts5Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "204: };",
          "209: #define FTS5_CONTENT_NORMAL   0",
          "210: #define FTS5_CONTENT_NONE     1",
          "211: #define FTS5_CONTENT_EXTERNAL 2",
          "219: int sqlite3Fts5ConfigParse(",
          "220:     Fts5Global*, sqlite3*, int, const char **, Fts5Config**, char**",
          "",
          "[Removed Lines]",
          "207: #define FTS5_CURRENT_VERSION 4",
          "213: #define FTS5_DETAIL_FULL    0",
          "214: #define FTS5_DETAIL_NONE    1",
          "215: #define FTS5_DETAIL_COLUMNS 2",
          "",
          "[Added Lines]",
          "208: #define FTS5_CURRENT_VERSION  4",
          "214: #define FTS5_DETAIL_FULL      0",
          "215: #define FTS5_DETAIL_NONE      1",
          "216: #define FTS5_DETAIL_COLUMNS   2",
          "218: #define FTS5_PATTERN_NONE     0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "554:   Fts5Global*,",
          "555:   const char **azArg,",
          "556:   int nArg,",
          "559:   char **pzErr",
          "560: );",
          "",
          "[Removed Lines]",
          "557:   Fts5Tokenizer**,",
          "558:   fts5_tokenizer**,",
          "",
          "[Added Lines]",
          "560:   Fts5Config*,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "799: int sqlite3Fts5TokenizerInit(fts5_api*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "802: int sqlite3Fts5TokenizerPattern(",
          "803:     int (*xCreate)(void*, const char**, int, Fts5Tokenizer**),",
          "804:     Fts5Tokenizer *pTok",
          "805: );",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_config.c||ext/fts5/fts5_config.c": [
          "File: ext/fts5/fts5_config.c -> ext/fts5/fts5_config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "325:           rc = SQLITE_ERROR;",
          "326:         }else{",
          "327:           rc = sqlite3Fts5GetTokenizer(pGlobal,",
          "329:               pzErr",
          "330:           );",
          "331:         }",
          "",
          "[Removed Lines]",
          "328:               (const char**)azArg, (int)nArg, &pConfig->pTok, &pConfig->pTokApi,",
          "",
          "[Added Lines]",
          "328:               (const char**)azArg, (int)nArg, pConfig,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398: static int fts5ConfigDefaultTokenizer(Fts5Global *pGlobal, Fts5Config *pConfig){",
          "399:   assert( pConfig->pTok==0 && pConfig->pTokApi==0 );",
          "403: }",
          "",
          "[Removed Lines]",
          "400:   return sqlite3Fts5GetTokenizer(",
          "401:       pGlobal, 0, 0, &pConfig->pTok, &pConfig->pTokApi, 0",
          "402:   );",
          "",
          "[Added Lines]",
          "400:   return sqlite3Fts5GetTokenizer(pGlobal, 0, 0, pConfig, 0);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_expr.c||ext/fts5/fts5_expr.c": [
          "File: ext/fts5/fts5_expr.c -> ext/fts5/fts5_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:   return sParse.rc;",
          "285: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "287: int sqlite3Fts5ExprPattern(",
          "288:   Fts5Config *pConfig, int iCol, const char *zText, Fts5Expr **pp",
          "289: ){",
          "290:   i64 nText = strlen(zText);",
          "291:   char *zExpr = (char*)sqlite3_malloc64(nText*4 + 1);",
          "292:   int rc = SQLITE_OK;",
          "294:   if( zExpr==0 ){",
          "295:     rc = SQLITE_NOMEM;",
          "296:   }else{",
          "297:     char aSpec[3];",
          "298:     int iOut = 0;",
          "299:     int i = 0;",
          "300:     int iFirst = 0;",
          "302:     if( pConfig->ePattern==FTS5_PATTERN_LIKE ){",
          "303:       aSpec[0] = '_';",
          "304:       aSpec[1] = '%';",
          "305:       aSpec[2] = 0;",
          "306:     }else{",
          "307:       aSpec[0] = '*';",
          "308:       aSpec[1] = '?';",
          "309:       aSpec[2] = '[';",
          "310:     }",
          "312:     while( i<=nText ){",
          "313:       if( i==nText",
          "314:        || zText[i]==aSpec[0] || zText[i]==aSpec[1] || zText[i]==aSpec[2]",
          "315:       ){",
          "316:         if( i-iFirst>=3 ){",
          "317:           int jj;",
          "318:           zExpr[iOut++] = '\"';",
          "319:           for(jj=iFirst; jj<i; jj++){",
          "320:             zExpr[iOut++] = zText[jj];",
          "321:             if( zText[jj]=='\"' ) zExpr[iOut++] = '\"';",
          "322:           }",
          "323:           zExpr[iOut++] = '\"';",
          "324:           zExpr[iOut++] = ' ';",
          "325:         }",
          "326:         if( zText[i]==aSpec[2] ){",
          "327:           i += 2;",
          "328:           if( zText[i-1]=='^' ) i++;",
          "329:           while( i<nText && zText[i]!=']' ) i++;",
          "330:         }",
          "331:         iFirst = i+1;",
          "332:       }",
          "333:       i++;",
          "334:     }",
          "335:     if( iOut>0 ){",
          "336:       zExpr[iOut] = '\\0';",
          "337:       rc = sqlite3Fts5ExprNew(pConfig, iCol, zExpr, pp, pConfig->pzErrmsg);",
          "338:     }else{",
          "340:     }",
          "341:     sqlite3_free(zExpr);",
          "342:   }",
          "344:   return rc;",
          "345: }",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_main.c||ext/fts5/fts5_main.c": [
          "File: ext/fts5/fts5_main.c -> ext/fts5/fts5_main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "554:     return SQLITE_ERROR;",
          "555:   }",
          "558:   if( idxStr==0 ) return SQLITE_NOMEM;",
          "559:   pInfo->idxStr = idxStr;",
          "560:   pInfo->needToFreeIdxStr = 1;",
          "",
          "[Removed Lines]",
          "557:   idxStr = (char*)sqlite3_malloc(pInfo->nConstraint * 6 + 1);",
          "",
          "[Added Lines]",
          "559:   idxStr = (char*)sqlite3_malloc(pInfo->nConstraint * 8 + 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "578:           if( bSeenRank ) continue;",
          "579:           idxStr[iIdxStr++] = 'r';",
          "580:           bSeenRank = 1;",
          "582:           bSeenMatch = 1;",
          "589:         }",
          "590:         pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "591:         pInfo->aConstraintUsage[i].omit = 1;",
          "592:       }",
          "600:     }",
          "601:   }",
          "",
          "[Removed Lines]",
          "581:         }else{",
          "583:           idxStr[iIdxStr++] = 'm';",
          "584:           if( iCol<nCol ){",
          "585:             sqlite3_snprintf(6, &idxStr[iIdxStr], \"%d\", iCol);",
          "586:             idxStr += strlen(&idxStr[iIdxStr]);",
          "587:             assert( idxStr[iIdxStr]=='\\0' );",
          "588:           }",
          "593:     }",
          "594:     else if( p->usable && bSeenEq==0",
          "595:       && p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol<0",
          "596:     ){",
          "597:       idxStr[iIdxStr++] = '=';",
          "598:       bSeenEq = 1;",
          "599:       pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "",
          "[Added Lines]",
          "583:         }else if( iCol>=0 ){",
          "585:           idxStr[iIdxStr++] = 'M';",
          "586:           sqlite3_snprintf(6, &idxStr[iIdxStr], \"%d\", iCol);",
          "587:           idxStr += strlen(&idxStr[iIdxStr]);",
          "588:           assert( idxStr[iIdxStr]=='\\0' );",
          "593:     }else if( p->usable ){",
          "594:       if( iCol>=0 && iCol<nCol && pConfig->ePattern==p->op ){",
          "595:         assert( p->op==FTS5_PATTERN_LIKE || p->op==FTS5_PATTERN_GLOB );",
          "596:         idxStr[iIdxStr++] = p->op==FTS5_PATTERN_LIKE ? 'L' : 'G';",
          "597:         sqlite3_snprintf(6, &idxStr[iIdxStr], \"%d\", iCol);",
          "598:         idxStr += strlen(&idxStr[iIdxStr]);",
          "599:         pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "600:         assert( idxStr[iIdxStr]=='\\0' );",
          "601:       }else if( bSeenEq==0 && p->op==SQLITE_INDEX_CONSTRAINT_EQ && iCol<0 ){",
          "602:         idxStr[iIdxStr++] = '=';",
          "603:         bSeenEq = 1;",
          "604:         pInfo->aConstraintUsage[i].argvIndex = ++iCons;",
          "605:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1229:       case 'r':",
          "1230:         pRank = apVal[i];",
          "1231:         break;",
          "1233:         const char *zText = (const char*)sqlite3_value_text(apVal[i]);",
          "1234:         if( zText==0 ) zText = \"\";",
          "1246:         if( zText[0]=='*' ){",
          "",
          "[Removed Lines]",
          "1232:       case 'm': {",
          "1236:         if( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' ){",
          "1237:           iCol = 0;",
          "1238:           do{",
          "1239:             iCol = iCol*10 + (idxStr[iIdxStr]-'0');",
          "1240:             iIdxStr++;",
          "1241:           }while( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' );",
          "1242:         }else{",
          "1243:           iCol = pConfig->nCol;",
          "1244:         }",
          "",
          "[Added Lines]",
          "1238:       case 'M': {",
          "1241:         iCol = 0;",
          "1242:         do{",
          "1243:           iCol = iCol*10 + (idxStr[iIdxStr]-'0');",
          "1244:           iIdxStr++;",
          "1245:         }while( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1262:         break;",
          "1263:       }",
          "1264:       case '=':",
          "1265:         pRowidEq = apVal[i];",
          "1266:         break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1265:       case 'L':",
          "1266:       case 'G': {",
          "1267:         const char *zText = (const char*)sqlite3_value_text(apVal[i]);",
          "1268:         iCol = 0;",
          "1269:         do{",
          "1270:           iCol = iCol*10 + (idxStr[iIdxStr]-'0');",
          "1271:           iIdxStr++;",
          "1272:         }while( idxStr[iIdxStr]>='0' && idxStr[iIdxStr]<='9' );",
          "1273:         rc = sqlite3Fts5ExprPattern(pConfig, iCol, zText, &pExpr);",
          "1274:         if( rc==SQLITE_OK ){",
          "1275:           rc = sqlite3Fts5ExprAnd(&pCsr->pExpr, pExpr);",
          "1276:           pExpr = 0;",
          "1277:         }",
          "1278:         if( rc!=SQLITE_OK ) goto filter_out;",
          "1279:         break;",
          "1280:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2672:   Fts5Global *pGlobal,",
          "2673:   const char **azArg,",
          "2674:   int nArg,",
          "2677:   char **pzErr",
          "2678: ){",
          "2679:   Fts5TokenizerModule *pMod;",
          "",
          "[Removed Lines]",
          "2675:   Fts5Tokenizer **ppTok,",
          "2676:   fts5_tokenizer **ppTokApi,",
          "",
          "[Added Lines]",
          "2692:   Fts5Config *pConfig,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2685:     rc = SQLITE_ERROR;",
          "2687:   }else{",
          "2692:     }",
          "2693:   }",
          "2695:   if( rc!=SQLITE_OK ){",
          "2698:   }",
          "2700:   return rc;",
          "",
          "[Removed Lines]",
          "2688:     rc = pMod->x.xCreate(pMod->pUserData, &azArg[1], (nArg?nArg-1:0), ppTok);",
          "2690:     if( rc!=SQLITE_OK && pzErr ){",
          "",
          "[Added Lines]",
          "2704:     rc = pMod->x.xCreate(",
          "2705:         pMod->pUserData, &azArg[1], (nArg?nArg-1:0), &pConfig->pTok",
          "2706:     );",
          "2707:     pConfig->pTokApi = &pMod->x;",
          "2708:     if( rc!=SQLITE_OK ){",
          "2709:       if( pzErr ) *pzErr = sqlite3_mprintf(\"error in tokenizer constructor\");",
          "2710:     }else{",
          "2711:       pConfig->ePattern = sqlite3Fts5TokenizerPattern(",
          "2712:           pMod->x.xCreate, pConfig->pTok",
          "2713:       );",
          "2718:     pConfig->pTokApi = 0;",
          "2719:     pConfig->pTok = 0;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c": [
          "File: ext/fts5/fts5_tokenize.c -> ext/fts5/fts5_tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1258:   );",
          "1259: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1265: typedef struct TrigramTokenizer TrigramTokenizer;",
          "1266: struct TrigramTokenizer {",
          "1267:   int bFold;",
          "1268: };",
          "1273: static void fts5TriDelete(Fts5Tokenizer *p){",
          "1274:   sqlite3_free(p);",
          "1275: }",
          "1280: static int fts5TriCreate(",
          "1281:   void *pCtx,",
          "1282:   const char **azArg,",
          "1283:   int nArg,",
          "1284:   Fts5Tokenizer **ppOut",
          "1285: ){",
          "1286:   int rc = SQLITE_OK;",
          "1287:   TrigramTokenizer *pNew = (TrigramTokenizer*)sqlite3_malloc(sizeof(*pNew));",
          "1288:   if( pNew==0 ){",
          "1289:     rc = SQLITE_NOMEM;",
          "1290:   }else{",
          "1291:     int i;",
          "1292:     pNew->bFold = 1;",
          "1293:     for(i=0; rc==SQLITE_OK && i<nArg; i+=2){",
          "1294:       const char *zArg = azArg[i+1];",
          "1295:       if( 0==sqlite3_stricmp(azArg[i], \"case_sensitive\") ){",
          "1296:         if( (zArg[0]!='0' && zArg[0]!='1') || zArg[1] ){",
          "1297:           rc = SQLITE_ERROR;",
          "1298:         }else{",
          "1299:           pNew->bFold = (zArg[0]=='0');",
          "1300:         }",
          "1301:       }else{",
          "1302:         rc = SQLITE_ERROR;",
          "1303:       }",
          "1304:     }",
          "1305:     if( rc!=SQLITE_OK ){",
          "1306:       fts5TriDelete((Fts5Tokenizer*)pNew);",
          "1307:       pNew = 0;",
          "1308:     }",
          "1309:   }",
          "1311:   return rc;",
          "1312: }",
          "1317: static int fts5TriTokenize(",
          "1318:   Fts5Tokenizer *pTok,",
          "1319:   void *pCtx,",
          "1320:   int flags,",
          "1321:   const char *pText, int nText,",
          "1322:   int (*xToken)(void*, int, const char*, int, int, int)",
          "1323: ){",
          "1324:   TrigramTokenizer *p = (TrigramTokenizer*)pTok;",
          "1325:   int rc = SQLITE_OK;",
          "1326:   char aBuf[32];",
          "1327:   const unsigned char *zIn = (const unsigned char*)pText;",
          "1328:   const unsigned char *zEof = &zIn[nText];",
          "1329:   u32 iCode;",
          "1331:   while( 1 ){",
          "1332:     char *zOut = aBuf;",
          "1333:     int iStart = zIn - (const unsigned char*)pText;",
          "1334:     const unsigned char *zNext;",
          "1336:     READ_UTF8(zIn, zEof, iCode);",
          "1337:     zNext = zIn;",
          "1338:     if( zIn<zEof ){",
          "1339:       if( p->bFold ) iCode = sqlite3Fts5UnicodeFold(iCode, 0);",
          "1340:       WRITE_UTF8(zOut, iCode);",
          "1341:       READ_UTF8(zIn, zEof, iCode);",
          "1342:     }else{",
          "1343:       break;",
          "1344:     }",
          "1345:     if( zIn<zEof ){",
          "1346:       if( p->bFold ) iCode = sqlite3Fts5UnicodeFold(iCode, 0);",
          "1347:       WRITE_UTF8(zOut, iCode);",
          "1348:       READ_UTF8(zIn, zEof, iCode);",
          "1349:       if( p->bFold ) iCode = sqlite3Fts5UnicodeFold(iCode, 0);",
          "1350:       WRITE_UTF8(zOut, iCode);",
          "1351:     }else{",
          "1352:       break;",
          "1353:     }",
          "1354:     rc = xToken(pCtx, 0, aBuf, zOut-aBuf, iStart, iStart + zOut-aBuf);",
          "1355:     if( rc!=SQLITE_OK ) break;",
          "1356:     zIn = zNext;",
          "1357:   }",
          "1359:   return rc;",
          "1360: }",
          "1362: int sqlite3Fts5TokenizerPattern(",
          "1363:     int (*xCreate)(void*, const char**, int, Fts5Tokenizer**),",
          "1364:     Fts5Tokenizer *pTok",
          "1365: ){",
          "1366:   if( xCreate==fts5TriCreate ){",
          "1367:     TrigramTokenizer *p = (TrigramTokenizer*)pTok;",
          "1368:     return p->bFold ? FTS5_PATTERN_LIKE : FTS5_PATTERN_GLOB;",
          "1369:   }",
          "1370:   return FTS5_PATTERN_NONE;",
          "1371: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1269:     { \"unicode61\", {fts5UnicodeCreate, fts5UnicodeDelete, fts5UnicodeTokenize}},",
          "1270:     { \"ascii\",     {fts5AsciiCreate, fts5AsciiDelete, fts5AsciiTokenize }},",
          "1271:     { \"porter\",    {fts5PorterCreate, fts5PorterDelete, fts5PorterTokenize }},",
          "1272:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1384:     { \"trigram\",   {fts5TriCreate, fts5TriDelete, fts5TriTokenize}},",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5plan.test||ext/fts5/test/fts5plan.test": [
          "File: ext/fts5/test/fts5plan.test -> ext/fts5/test/fts5plan.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: } {",
          "32:   QUERY PLAN",
          "33:   |--SCAN TABLE t1",
          "35: }",
          "37: do_eqp_test 1.2 {",
          "",
          "[Removed Lines]",
          "34:   `--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:m",
          "",
          "[Added Lines]",
          "34:   `--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:M1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:   SELECT * FROM f1 WHERE f1 MATCH ? ORDER BY ff",
          "47: } {",
          "48:   QUERY PLAN",
          "50:   `--USE TEMP B-TREE FOR ORDER BY",
          "51: }",
          "",
          "[Removed Lines]",
          "49:   |--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:m",
          "",
          "[Added Lines]",
          "49:   |--SCAN TABLE f1 VIRTUAL TABLE INDEX 0:M1",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5trigram.test||ext/fts5/test/fts5trigram.test": [
          "File: ext/fts5/test/fts5trigram.test -> ext/fts5/test/fts5trigram.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2020 September 30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: #",
          "12: # Tests for the fts5 \"trigram\" tokenizer.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: ifcapable !fts5 { finish_test ; return }",
          "17: set ::testprefix fts5trigram",
          "19: do_execsql_test 1.0 {",
          "20:   CREATE VIRTUAL TABLE t1 USING fts5(y, tokenize=trigram);",
          "21:   INSERT INTO t1 VALUES('abcdefghijklm');",
          "22:   INSERT INTO t1 VALUES('\u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23');",
          "23: }",
          "25: foreach {tn s res} {",
          "26:   1 abc           \"(abc)defghijklm\"",
          "27:   2 defgh         \"abc(defgh)ijklm\"",
          "28:   3 abcdefghijklm \"(abcdefghijklm)\"",
          "29:   4 \u0e01\u0e23\u0e38            \"(\u0e01\u0e23\u0e38)\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23\"",
          "30:   5 \u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b        \"\u0e01\u0e23\u0e38(\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b)\u0e32\u0e19\u0e04\u0e23\"",
          "31:   6 \u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23  \"(\u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23)\"",
          "32:   7 Abc           \"(abc)defghijklm\"",
          "33:   8 deFgh         \"abc(defgh)ijklm\"",
          "34:   9 aBcdefGhijKlm \"(abcdefghijklm)\"",
          "35: } {",
          "36:   do_execsql_test 1.1.$tn {",
          "37:     SELECT highlight(t1, 0, '(', ')') FROM t1($s)",
          "38:   } $res",
          "39: }",
          "41: do_execsql_test 1.2.0 {",
          "42:   SELECT fts5_expr('ABCD', 'tokenize=trigram')",
          "43: } {{\"abc\" + \"bcd\"}}",
          "45: do_execsql_test 1.2.1 {",
          "46:   SELECT * FROM t1 WHERE y LIKE ? ESCAPE 'a'",
          "47: }",
          "49: foreach {tn like res} {",
          "50:   1 {%cDef%}   1",
          "51:   2 {cDef%}    {}",
          "52:   3 {%f%}      1",
          "53:   4 {%f_h%}    1",
          "54:   5 {%f_g%}    {}",
          "55:   6 {abc%klm}  1",
          "56:   7 {ABCDEFG%} 1",
          "57:   8 {%\u0e23\u0e38\u0e07\u0e40%}    2",
          "58: } {",
          "59:   do_execsql_test 1.3.$tn {",
          "60:     SELECT rowid FROM t1 WHERE y LIKE $like",
          "61:   } $res",
          "62: }",
          "64: #-------------------------------------------------------------------------",
          "65: reset_db",
          "66: do_execsql_test 2.0 {",
          "67:   CREATE VIRTUAL TABLE t1 USING fts5(y, tokenize=\"trigram case_sensitive 1\");",
          "68:   INSERT INTO t1 VALUES('abcdefghijklm');",
          "69:   INSERT INTO t1 VALUES('\u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23');",
          "70: }",
          "72: foreach {tn s res} {",
          "73:   1 abc           \"(abc)defghijklm\"",
          "74:   2 defgh         \"abc(defgh)ijklm\"",
          "75:   3 abcdefghijklm \"(abcdefghijklm)\"",
          "76:   4 \u0e01\u0e23\u0e38            \"(\u0e01\u0e23\u0e38)\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23\"",
          "77:   5 \u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b        \"\u0e01\u0e23\u0e38(\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b)\u0e32\u0e19\u0e04\u0e23\"",
          "78:   6 \u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23  \"(\u0e01\u0e23\u0e38\u0e07\u0e40\u0e17\u0e1e\u0e21\u0e2b\u0e32\u0e19\u0e04\u0e23)\"",
          "79:   7 Abc           \"\"",
          "80:   8 deFgh         \"\"",
          "81:   9 aBcdefGhijKlm \"\"",
          "82: } {",
          "83:   do_execsql_test 2.1.$tn {",
          "84:     SELECT highlight(t1, 0, '(', ')') FROM t1($s)",
          "85:   } $res",
          "86: }",
          "87: foreach {tn like res} {",
          "88:   1 {%cDef%}   1",
          "89:   2 {cDef%}    {}",
          "90:   3 {%f%}      1",
          "91:   4 {%f_h%}    1",
          "92:   5 {%f_g%}    {}",
          "93:   6 {abc%klm}  1",
          "94:   7 {ABCDEFG%} 1",
          "95:   8 {%\u0e23\u0e38\u0e07\u0e40%}    2",
          "96: } {",
          "97:   do_execsql_test 2.2.$tn {",
          "98:     SELECT rowid FROM t1 WHERE y LIKE $like",
          "99:   } $res",
          "100: }",
          "101: foreach {tn like res} {",
          "102:   1 {*cdef*}     1",
          "103:   2 {cdef*}      {}",
          "104:   3 {*f*}        1",
          "105:   4 {*f?h*}      1",
          "106:   5 {*f?g*}      {}",
          "107:   6 {abc*klm}    1",
          "108:   7 {abcdefg*}   1",
          "109:   8 {*\u0e23\u0e38\u0e07\u0e40*}      2",
          "110:   9 {abc[d]efg*} 1",
          "111:  10 {abc[]d]efg*} 1",
          "112:  11 {abc[^]d]efg*} {}",
          "113:  12 {abc[^]XYZ]efg*} 1",
          "114: } {",
          "115:   do_execsql_test 2.3.$tn {",
          "116:     SELECT rowid FROM t1 WHERE y GLOB $like",
          "117:   } $res",
          "118: }",
          "120: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4a43430fd23f88352c33b29c4c105b72f6dc821f94bf362040c41a1648c402e5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39df24a3f02495e5ef6bb5ea8ce029a2c1e377e6",
      "candidate_info": {
        "commit_hash": "39df24a3f02495e5ef6bb5ea8ce029a2c1e377e6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/39df24a3f02495e5ef6bb5ea8ce029a2c1e377e6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Do not allow the constant-propagation optimization to apple to ON/USING clause terms as it does not help and it might cause downstream problems.\n\nFossilOrigin-Name: 1bc783da63d58b05c690468b569cb2787846357b63c1100d11777666c5787bf4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 86b5e5a20e967af7ac444ff0a40c2e8b93b7e5c505eebf6d3753a341b05503a8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4233:   int i;",
          "4234:   WhereConst *pConst;",
          "4235:   if( pExpr->op!=TK_COLUMN ) return WRC_Continue;",
          "4237:   pConst = pWalker->u.pConst;",
          "4238:   for(i=0; i<pConst->nConst; i++){",
          "4239:     Expr *pColumn = pConst->apExpr[i*2];",
          "",
          "[Removed Lines]",
          "4236:   if( ExprHasProperty(pExpr, EP_FixedCol) ) return WRC_Continue;",
          "",
          "[Added Lines]",
          "4236:   if( ExprHasProperty(pExpr, EP_FixedCol|EP_FromJoin) ) return WRC_Continue;",
          "",
          "---------------"
        ]
      }
    }
  ]
}