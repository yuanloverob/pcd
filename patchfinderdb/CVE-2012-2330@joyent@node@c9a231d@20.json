{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a5f74b4da7ad3f4946cb5e0db7c94ee6bf8e5718",
      "candidate_info": {
        "commit_hash": "a5f74b4da7ad3f4946cb5e0db7c94ee6bf8e5718",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a5f74b4da7ad3f4946cb5e0db7c94ee6bf8e5718",
        "files": [
          "src/node_script.cc",
          "src/node_vars.h"
        ],
        "message": "added isolates support",
        "before_after_code_files": [
          "src/node_script.cc||src/node_script.cc",
          "src/node_vars.h||src/node_vars.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_script.cc||src/node_script.cc": [
          "File: src/node_script.cc -> src/node_script.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: #include <node.h>",
          "23: #include <node_script.h>",
          "24: #include <assert.h>",
          "26: namespace node {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: #include <node_vars.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: using v8::Function;",
          "44: using v8::FunctionTemplate;",
          "47: class WrappedContext : ObjectWrap {",
          "48:  public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #define wrapped_context_constructor NODE_VAR(wrapped_context_constructor)",
          "48: #define wrapped_script_constructor NODE_VAR(wrapped_script_constructor)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56:  protected:",
          "60:   WrappedContext();",
          "61:   ~WrappedContext();",
          "",
          "[Removed Lines]",
          "58:   static Persistent<FunctionTemplate> constructor_template;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "64: };",
          "70: class WrappedScript : ObjectWrap {",
          "71:  public:",
          "72:   static void Initialize(Handle<Object> target);",
          "",
          "[Removed Lines]",
          "67: Persistent<FunctionTemplate> WrappedContext::constructor_template;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "81:   static Handle<Value> EvalMachine(const Arguments& args);",
          "83:  protected:",
          "86:   WrappedScript() : ObjectWrap() {}",
          "87:   ~WrappedScript();",
          "",
          "[Removed Lines]",
          "84:   static Persistent<FunctionTemplate> constructor_template;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "135:   HandleScope scope;",
          "137:   Local<FunctionTemplate> t = FunctionTemplate::New(WrappedContext::New);",
          "142:   target->Set(String::NewSymbol(\"Context\"),",
          "144: }",
          "147: bool WrappedContext::InstanceOf(Handle<Value> value) {",
          "149: }",
          "",
          "[Removed Lines]",
          "138:   constructor_template = Persistent<FunctionTemplate>::New(t);",
          "139:   constructor_template->InstanceTemplate()->SetInternalFieldCount(1);",
          "140:   constructor_template->SetClassName(String::NewSymbol(\"Context\"));",
          "143:               constructor_template->GetFunction());",
          "148:   return !value.IsEmpty() && constructor_template->HasInstance(value);",
          "",
          "[Added Lines]",
          "134:   wrapped_context_constructor = Persistent<FunctionTemplate>::New(t);",
          "135:   wrapped_context_constructor->InstanceTemplate()->SetInternalFieldCount(1);",
          "136:   wrapped_context_constructor->SetClassName(String::NewSymbol(\"Context\"));",
          "139:               wrapped_context_constructor->GetFunction());",
          "144:   return !value.IsEmpty() && wrapped_context_constructor->HasInstance(value);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "172: Local<Object> WrappedContext::NewInstance() {",
          "174:   return context;",
          "175: }",
          "",
          "[Removed Lines]",
          "173:   Local<Object> context = constructor_template->GetFunction()->NewInstance();",
          "",
          "[Added Lines]",
          "169:   Local<Object> context = wrapped_context_constructor->GetFunction()->NewInstance();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "180: }",
          "186: void WrappedScript::Initialize(Handle<Object> target) {",
          "187:   HandleScope scope;",
          "189:   Local<FunctionTemplate> t = FunctionTemplate::New(WrappedScript::New);",
          "198:                             \"createContext\",",
          "199:                             WrappedScript::CreateContext);",
          "202:                             \"runInContext\",",
          "203:                             WrappedScript::RunInContext);",
          "206:                             \"runInThisContext\",",
          "207:                             WrappedScript::RunInThisContext);",
          "210:                             \"runInNewContext\",",
          "211:                             WrappedScript::RunInNewContext);",
          "214:                   \"createContext\",",
          "215:                   WrappedScript::CreateContext);",
          "218:                   \"runInContext\",",
          "219:                   WrappedScript::CompileRunInContext);",
          "222:                   \"runInThisContext\",",
          "223:                   WrappedScript::CompileRunInThisContext);",
          "226:                   \"runInNewContext\",",
          "227:                   WrappedScript::CompileRunInNewContext);",
          "229:   target->Set(String::NewSymbol(\"NodeScript\"),",
          "231: }",
          "234: Handle<Value> WrappedScript::New(const Arguments& args) {",
          "235:   if (!args.IsConstructCall()) {",
          "237:   }",
          "239:   HandleScope scope;",
          "",
          "[Removed Lines]",
          "183: Persistent<FunctionTemplate> WrappedScript::constructor_template;",
          "190:   constructor_template = Persistent<FunctionTemplate>::New(t);",
          "191:   constructor_template->InstanceTemplate()->SetInternalFieldCount(1);",
          "195:   constructor_template->SetClassName(String::NewSymbol(\"NodeScript\"));",
          "197:   NODE_SET_PROTOTYPE_METHOD(constructor_template,",
          "201:   NODE_SET_PROTOTYPE_METHOD(constructor_template,",
          "205:   NODE_SET_PROTOTYPE_METHOD(constructor_template,",
          "209:   NODE_SET_PROTOTYPE_METHOD(constructor_template,",
          "213:   NODE_SET_METHOD(constructor_template,",
          "217:   NODE_SET_METHOD(constructor_template,",
          "221:   NODE_SET_METHOD(constructor_template,",
          "225:   NODE_SET_METHOD(constructor_template,",
          "230:               constructor_template->GetFunction());",
          "236:     return FromConstructorTemplate(constructor_template, args);",
          "",
          "[Added Lines]",
          "183:   wrapped_script_constructor = Persistent<FunctionTemplate>::New(t);",
          "184:   wrapped_script_constructor->InstanceTemplate()->SetInternalFieldCount(1);",
          "188:   wrapped_script_constructor->SetClassName(String::NewSymbol(\"NodeScript\"));",
          "190:   NODE_SET_PROTOTYPE_METHOD(wrapped_script_constructor,",
          "194:   NODE_SET_PROTOTYPE_METHOD(wrapped_script_constructor,",
          "198:   NODE_SET_PROTOTYPE_METHOD(wrapped_script_constructor,",
          "202:   NODE_SET_PROTOTYPE_METHOD(wrapped_script_constructor,",
          "206:   NODE_SET_METHOD(wrapped_script_constructor,",
          "210:   NODE_SET_METHOD(wrapped_script_constructor,",
          "214:   NODE_SET_METHOD(wrapped_script_constructor,",
          "218:   NODE_SET_METHOD(wrapped_script_constructor,",
          "223:               wrapped_script_constructor->GetFunction());",
          "229:     return FromConstructorTemplate(wrapped_script_constructor, args);",
          "",
          "---------------"
        ],
        "src/node_vars.h||src/node_vars.h": [
          "File: src/node_vars.h -> src/node_vars.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:   v8::Persistent<v8::String> write_sym;",
          "169:   v8::Persistent<v8::FunctionTemplate> buffer_constructor_template;",
          "172:   v8::Persistent<v8::String> callback_symbol;",
          "173:   v8::Persistent<v8::FunctionTemplate> signal_watcher_constructor_template;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "172:   v8::Persistent<v8::FunctionTemplate> wrapped_context_constructor;",
          "173:   v8::Persistent<v8::FunctionTemplate> wrapped_script_constructor;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9239088e873bb9570b9f21a2e819536bfb3e52ed",
      "candidate_info": {
        "commit_hash": "9239088e873bb9570b9f21a2e819536bfb3e52ed",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9239088e873bb9570b9f21a2e819536bfb3e52ed",
        "files": [
          "test/gc/test-http-client-timeout.js"
        ],
        "message": "500 is a magic number for the GC for some reason",
        "before_after_code_files": [
          "test/gc/test-http-client-timeout.js||test/gc/test-http-client-timeout.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/gc/test-http-client-timeout.js||test/gc/test-http-client-timeout.js": [
          "File: test/gc/test-http-client-timeout.js -> test/gc/test-http-client-timeout.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:     done    = 0,",
          "14:     count   = 0,",
          "15:     countGC = 0,",
          "17:     common = require('../common.js'),",
          "18:     assert = require('assert'),",
          "19:     PORT = common.PORT;",
          "",
          "[Removed Lines]",
          "16:     todo    = 500,",
          "",
          "[Added Lines]",
          "16:     todo    = 550,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af7960b29525ec28ca58617e9b06c8b0df3085cd",
      "candidate_info": {
        "commit_hash": "af7960b29525ec28ca58617e9b06c8b0df3085cd",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/af7960b29525ec28ca58617e9b06c8b0df3085cd",
        "files": [
          "deps/uv/.gitignore",
          "deps/uv/config-unix.mk",
          "deps/uv/include/uv-private/uv-unix.h",
          "deps/uv/include/uv.h",
          "deps/uv/src/unix/core.c",
          "deps/uv/src/unix/darwin.c",
          "deps/uv/src/unix/ev/ev.c",
          "deps/uv/src/unix/freebsd.c",
          "deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/linux.c",
          "deps/uv/src/unix/linux/core.c",
          "deps/uv/src/unix/linux/inotify.c",
          "deps/uv/src/unix/netbsd.c",
          "deps/uv/src/unix/openbsd.c",
          "deps/uv/src/unix/process.c",
          "deps/uv/src/uv-common.c",
          "deps/uv/src/uv-common.h",
          "deps/uv/src/win/fs.c",
          "deps/uv/src/win/internal.h",
          "deps/uv/src/win/tcp.c",
          "deps/uv/src/win/winsock.c",
          "deps/uv/test/run-tests.c",
          "deps/uv/test/test-fs.c",
          "deps/uv/uv.gyp"
        ],
        "message": "uv: upgrade to 2f886c8",
        "before_after_code_files": [
          "deps/uv/config-unix.mk||deps/uv/config-unix.mk",
          "deps/uv/include/uv-private/uv-unix.h||deps/uv/include/uv-private/uv-unix.h",
          "deps/uv/include/uv.h||deps/uv/include/uv.h",
          "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c",
          "deps/uv/src/unix/darwin.c||deps/uv/src/unix/darwin.c",
          "deps/uv/src/unix/ev/ev.c||deps/uv/src/unix/ev/ev.c",
          "deps/uv/src/unix/freebsd.c||deps/uv/src/unix/freebsd.c",
          "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h",
          "deps/uv/src/unix/linux.c||deps/uv/src/unix/linux/core.c",
          "deps/uv/src/unix/linux/inotify.c||deps/uv/src/unix/linux/inotify.c",
          "deps/uv/src/unix/netbsd.c||deps/uv/src/unix/netbsd.c",
          "deps/uv/src/unix/openbsd.c||deps/uv/src/unix/openbsd.c",
          "deps/uv/src/unix/process.c||deps/uv/src/unix/process.c",
          "deps/uv/src/uv-common.c||deps/uv/src/uv-common.c",
          "deps/uv/src/uv-common.h||deps/uv/src/uv-common.h",
          "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c",
          "deps/uv/src/win/internal.h||deps/uv/src/win/internal.h",
          "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c",
          "deps/uv/src/win/winsock.c||deps/uv/src/win/winsock.c",
          "deps/uv/test/run-tests.c||deps/uv/test/run-tests.c",
          "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c",
          "deps/uv/uv.gyp||deps/uv/uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/config-unix.mk||deps/uv/config-unix.mk": [
          "File: deps/uv/config-unix.mk -> deps/uv/config-unix.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: CSTDFLAG += -D_GNU_SOURCE",
          "64: CPPFLAGS += -Isrc/ares/config_linux",
          "65: LINKFLAGS+=-lrt",
          "67: endif",
          "69: ifeq (FreeBSD,$(uname_S))",
          "",
          "[Removed Lines]",
          "66: OBJS += src/unix/linux.o",
          "",
          "[Added Lines]",
          "66: OBJS += src/unix/linux/core.o src/unix/linux/inotify.o",
          "",
          "---------------"
        ],
        "deps/uv/include/uv-private/uv-unix.h||deps/uv/include/uv-private/uv-unix.h": [
          "File: deps/uv/include/uv-private/uv-unix.h -> deps/uv/include/uv-private/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: typedef void* uv_lib_t;",
          "58: #define UV_LOOP_PRIVATE_FIELDS \\",
          "59:   ares_channel channel; \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: #if __linux__",
          "59: # define UV_LOOP_PRIVATE_PLATFORM_FIELDS              \\",
          "61:   struct uv__inotify_watchers {                       \\",
          "62:     struct uv_fs_event_s* rbh_root;                   \\",
          "63:   } inotify_watchers;                                 \\",
          "64:   ev_io inotify_read_watcher;                         \\",
          "65:   int inotify_fd;",
          "66: #else",
          "67: # define UV_LOOP_PRIVATE_PLATFORM_FIELDS",
          "68: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:   ev_timer timer; \\",
          "67:   eio_channel uv_eio_channel; \\",
          "70: #define UV_REQ_BUFSML_SIZE (4)",
          "",
          "[Removed Lines]",
          "68:   struct ev_loop* ev;",
          "",
          "[Added Lines]",
          "80:   struct ev_loop* ev; \\",
          "81:   UV_LOOP_PRIVATE_PLATFORM_FIELDS",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "196: #if defined(__linux__)",
          "202: #elif (defined(__MAC_OS_X_VERSION_MIN_REQUIRED) && __MAC_OS_X_VERSION_MIN_REQUIRED >= 1060) \\",
          "203:   || defined(__FreeBSD__) \\",
          "",
          "[Removed Lines]",
          "198: #define UV_FS_EVENT_PRIVATE_FIELDS \\",
          "199:   ev_io read_watcher; \\",
          "200:   uv_fs_event_cb cb; \\",
          "",
          "[Added Lines]",
          "211: #define UV_FS_EVENT_PRIVATE_FIELDS    \\",
          "213:   struct {                            \\",
          "214:     struct uv_fs_event_s* rbe_left;   \\",
          "215:     struct uv_fs_event_s* rbe_right;  \\",
          "216:     struct uv_fs_event_s* rbe_parent; \\",
          "217:     int rbe_color;                    \\",
          "218:   } node;                             \\",
          "219:   ev_io read_watcher;                 \\",
          "220:   uv_fs_event_cb cb;",
          "",
          "---------------"
        ],
        "deps/uv/include/uv.h||deps/uv/include/uv.h": [
          "File: deps/uv/include/uv.h -> deps/uv/include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1504: #undef UV_FS_REQ_PRIVATE_FIELDS",
          "1505: #undef UV_WORK_PRIVATE_FIELDS",
          "1506: #undef UV_FS_EVENT_PRIVATE_FIELDS",
          "1508: #ifdef __cplusplus",
          "1509: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1507: #undef UV_LOOP_PRIVATE_FIELDS",
          "1508: #undef UV_LOOP_PRIVATE_PLATFORM_FIELDS",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/core.c||deps/uv/src/unix/core.c": [
          "File: deps/uv/src/unix/core.c -> deps/uv/src/unix/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: void uv_close(uv_handle_t* handle, uv_close_cb close_cb) {",
          "67:   uv_async_t* async;",
          "69:   uv_stream_t* stream;",
          "70:   uv_process_t* process;",
          "",
          "[Removed Lines]",
          "68:   uv_timer_t* timer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "118:       break;",
          "120:     case UV_TIMER:",
          "126:       break;",
          "128:     case UV_PROCESS:",
          "",
          "[Removed Lines]",
          "121:       timer = (uv_timer_t*)handle;",
          "122:       if (ev_is_active(&timer->timer_watcher)) {",
          "123:         ev_ref(timer->loop->ev);",
          "124:       }",
          "125:       ev_timer_stop(timer->loop->ev, &timer->timer_watcher);",
          "",
          "[Added Lines]",
          "120:       uv_timer_stop((uv_timer_t*)handle);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157: #endif",
          "158:   ev_set_userdata(loop->ev, loop);",
          "159:   eio_channel_init(&loop->uv_eio_channel, loop);",
          "160:   return 0;",
          "161: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "155:   uv__loop_platform_init(loop);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179: void uv_loop_delete(uv_loop_t* loop) {",
          "180:   uv_ares_destroy(loop, loop->channel);",
          "181:   ev_loop_destroy(loop->ev);",
          "183: #ifndef NDEBUG",
          "185: #endif",
          "187:   if (loop == default_loop_ptr)",
          "188:     default_loop_ptr = NULL;",
          "189:   else",
          "",
          "[Removed Lines]",
          "184:   memset(loop, 0, sizeof *loop);",
          "",
          "[Added Lines]",
          "178:   uv__loop_platform_delete(loop);",
          "180:   memset(loop, -1, sizeof *loop);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "531: }",
          "534: static void uv__timer_cb(EV_P_ ev_timer* w, int revents) {",
          "535:   uv_timer_t* timer = container_of(w, uv_timer_t, timer_watcher);",
          "538:     ev_ref(EV_A);",
          "539:   }",
          "",
          "[Removed Lines]",
          "537:   if (!ev_is_active(w)) {",
          "",
          "[Added Lines]",
          "529: static int uv__timer_active(const uv_timer_t* timer) {",
          "530:   return timer->flags & UV_TIMER_ACTIVE;",
          "531: }",
          "534: static int uv__timer_repeating(const uv_timer_t* timer) {",
          "535:   return timer->flags & UV_TIMER_REPEAT;",
          "536: }",
          "542:   assert(uv__timer_active(timer));",
          "544:   if (!uv__timer_repeating(timer)) {",
          "545:     timer->flags &= ~UV_TIMER_ACTIVE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "557: int uv_timer_start(uv_timer_t* timer, uv_timer_cb cb, int64_t timeout,",
          "558:     int64_t repeat) {",
          "560:     return -1;",
          "561:   }",
          "563:   timer->timer_cb = cb;",
          "564:   ev_timer_set(&timer->timer_watcher, timeout / 1000.0, repeat / 1000.0);",
          "565:   ev_timer_start(timer->loop->ev, &timer->timer_watcher);",
          "566:   ev_unref(timer->loop->ev);",
          "567:   return 0;",
          "568: }",
          "571: int uv_timer_stop(uv_timer_t* timer) {",
          "573:     ev_ref(timer->loop->ev);",
          "574:   }",
          "576:   ev_timer_stop(timer->loop->ev, &timer->timer_watcher);",
          "577:   return 0;",
          "578: }",
          "581: int uv_timer_again(uv_timer_t* timer) {",
          "583:     uv__set_sys_error(timer->loop, EINVAL);",
          "584:     return -1;",
          "585:   }",
          "587:   ev_timer_again(timer->loop->ev, &timer->timer_watcher);",
          "588:   return 0;",
          "589: }",
          "591: void uv_timer_set_repeat(uv_timer_t* timer, int64_t repeat) {",
          "592:   assert(timer->type == UV_TIMER);",
          "593:   timer->timer_watcher.repeat = repeat / 1000.0;",
          "594: }",
          "596: int64_t uv_timer_get_repeat(uv_timer_t* timer) {",
          "597:   assert(timer->type == UV_TIMER);",
          "598:   return (int64_t)(1000 * timer->timer_watcher.repeat);",
          "",
          "[Removed Lines]",
          "559:   if (ev_is_active(&timer->timer_watcher)) {",
          "572:   if (ev_is_active(&timer->timer_watcher)) {",
          "582:   if (!ev_is_active(&timer->timer_watcher)) {",
          "",
          "[Added Lines]",
          "567:   if (uv__timer_active(timer)) {",
          "572:   timer->flags |= UV_TIMER_ACTIVE;",
          "574:   if (repeat)",
          "575:     timer->flags |= UV_TIMER_REPEAT;",
          "576:   else",
          "577:     timer->flags &= ~UV_TIMER_REPEAT;",
          "588:   if (uv__timer_active(timer)) {",
          "592:   timer->flags &= ~(UV_TIMER_ACTIVE | UV_TIMER_REPEAT);",
          "600:   if (!uv__timer_active(timer)) {",
          "605:   assert(uv__timer_repeating(timer));",
          "615:   if (repeat)",
          "616:     timer->flags |= UV_TIMER_REPEAT;",
          "617:   else",
          "618:     timer->flags &= ~UV_TIMER_REPEAT;",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/darwin.c||deps/uv/src/unix/darwin.c": [
          "File: deps/uv/src/unix/darwin.c -> deps/uv/src/unix/darwin.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: int uv_exepath(char* buffer, size_t* size) {",
          "74:   uint32_t usize;",
          "75:   int result;",
          "77:   char* fullpath;",
          "79:   if (!buffer || !size) {",
          "",
          "[Removed Lines]",
          "76:   char* path;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:   result = _NSGetExecutablePath(buffer, &usize);",
          "85:   if (result) return result;",
          "90:   if (fullpath == NULL) {",
          "92:     return -1;",
          "93:   }",
          "",
          "[Removed Lines]",
          "87:   path = (char*)malloc(2 * PATH_MAX);",
          "88:   fullpath = realpath(buffer, path);",
          "91:     free(path);",
          "",
          "[Added Lines]",
          "86:   fullpath = realpath(buffer, NULL);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/ev/ev.c||deps/uv/src/unix/ev/ev.c": [
          "File: deps/uv/src/unix/ev/ev.c -> deps/uv/src/unix/ev/ev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2554: ev_unref (EV_P)",
          "2555: {",
          "2556:   --activecnt;",
          "2557: }",
          "2559: void",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2557:   if (activecnt < 0) abort();",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/freebsd.c||deps/uv/src/unix/freebsd.c": [
          "File: deps/uv/src/unix/freebsd.c -> deps/uv/src/unix/freebsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #undef NANOSEC",
          "41: #define NANOSEC 1000000000",
          "44: static char *process_title;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43: #ifndef CPUSTATES",
          "44: # define CPUSTATES 5U",
          "45: #endif",
          "46: #ifndef CP_USER",
          "47: # define CP_USER 0",
          "48: # define CP_NICE 1",
          "49: # define CP_SYS 2",
          "50: # define CP_IDLE 3",
          "51: # define CP_INTR 4",
          "52: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "164:   kinfo = kvm_getprocs(kd, KERN_PROC_PID, pid, &nprocs);",
          "165:   if (kinfo == NULL) goto error;",
          "169:   kvm_close(kd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177: #ifdef __DragonFly__",
          "179: #else",
          "181: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "227:   }",
          "229:   size = sizeof(maxcpus);",
          "230:   if (sysctlbyname(\"kern.smp.maxcpus\", &maxcpus, &size, NULL, 0) < 0) {",
          "231:     free(*cpu_infos);",
          "232:     return uv__new_sys_error(errno);",
          "233:   }",
          "235:   size = maxcpus * CPUSTATES * sizeof(long);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "244: #ifdef __DragonFly__",
          "245:   if (sysctlbyname(\"hw.ncpu\", &maxcpus, &size, NULL, 0) < 0) {",
          "246:     free(*cpu_infos);",
          "247:     return uv__new_sys_error(errno);",
          "248:   }",
          "249: #else",
          "254: #endif",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/internal.h||deps/uv/src/unix/internal.h": [
          "File: deps/uv/src/unix/internal.h -> deps/uv/src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "164: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:   UV_TIMER_ACTIVE  = 0x080,",
          "165:   UV_TIMER_REPEAT  = 0x100",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217: int uv__make_socketpair(int fds[2], int flags);",
          "218: int uv__make_pipe(int fds[2], int flags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: #if __linux__",
          "223: void uv__inotify_loop_init(uv_loop_t* loop);",
          "224: void uv__inotify_loop_delete(uv_loop_t* loop);",
          "225: # define uv__loop_platform_init(loop)   uv__inotify_loop_init(loop)",
          "226: # define uv__loop_platform_delete(loop) uv__inotify_loop_delete(loop)",
          "227: #else",
          "228: # define uv__loop_platform_init(loop)",
          "229: # define uv__loop_platform_delete(loop)",
          "230: #endif",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/linux.c||deps/uv/src/unix/linux/core.c": [
          "File: deps/uv/src/unix/linux.c -> deps/uv/src/unix/linux/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include \"uv.h\"",
          "24: #include <stdint.h>",
          "25: #include <stdio.h>",
          "",
          "[Removed Lines]",
          "22: #include \"internal.h\"",
          "",
          "[Added Lines]",
          "22: #include \"../internal.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28: #include <assert.h>",
          "29: #include <errno.h>",
          "32: #include <net/if.h>",
          "33: #include <sys/param.h>",
          "34: #include <sys/sysinfo.h>",
          "",
          "[Removed Lines]",
          "31: #include <ifaddrs.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36: #include <fcntl.h>",
          "37: #include <time.h>",
          "52: #endif",
          "55: #endif",
          "127: static char buf[MAXPATHLEN + 1];",
          "",
          "[Removed Lines]",
          "39: #undef NANOSEC",
          "40: #define NANOSEC 1000000000",
          "42: #undef HAVE_INOTIFY_INIT",
          "43: #undef HAVE_INOTIFY_INIT1",
          "44: #undef HAVE_INOTIFY_ADD_WATCH",
          "45: #undef HAVE_INOTIFY_RM_WATCH",
          "47: #if __NR_inotify_init",
          "48: # define HAVE_INOTIFY_INIT 1",
          "49: #endif",
          "50: #if __NR_inotify_init1",
          "51: # define HAVE_INOTIFY_INIT1 1",
          "53: #if __NR_inotify_add_watch",
          "54: # define HAVE_INOTIFY_ADD_WATCH 1",
          "56: #if __NR_inotify_rm_watch",
          "57: # define HAVE_INOTIFY_RM_WATCH 1",
          "58: #endif",
          "60: #if HAVE_INOTIFY_INIT || HAVE_INOTIFY_INIT1",
          "61: # undef IN_ACCESS",
          "62: # undef IN_MODIFY",
          "63: # undef IN_ATTRIB",
          "64: # undef IN_CLOSE_WRITE",
          "65: # undef IN_CLOSE_NOWRITE",
          "66: # undef IN_OPEN",
          "67: # undef IN_MOVED_FROM",
          "68: # undef IN_MOVED_TO",
          "69: # undef IN_CREATE",
          "70: # undef IN_DELETE",
          "71: # undef IN_DELETE_SELF",
          "72: # undef IN_MOVE_SELF",
          "73: # define IN_ACCESS         0x001",
          "74: # define IN_MODIFY         0x002",
          "75: # define IN_ATTRIB         0x004",
          "76: # define IN_CLOSE_WRITE    0x008",
          "77: # define IN_CLOSE_NOWRITE  0x010",
          "78: # define IN_OPEN           0x020",
          "79: # define IN_MOVED_FROM     0x040",
          "80: # define IN_MOVED_TO       0x080",
          "81: # define IN_CREATE         0x100",
          "82: # define IN_DELETE         0x200",
          "83: # define IN_DELETE_SELF    0x400",
          "84: # define IN_MOVE_SELF      0x800",
          "85: struct inotify_event {",
          "86:   int32_t wd;",
          "87:   uint32_t mask;",
          "88:   uint32_t cookie;",
          "89:   uint32_t len;",
          "91: };",
          "94: #undef IN_CLOEXEC",
          "95: #undef IN_NONBLOCK",
          "97: #if HAVE_INOTIFY_INIT1",
          "98: # define IN_CLOEXEC O_CLOEXEC",
          "99: # define IN_NONBLOCK O_NONBLOCK",
          "102: #if HAVE_INOTIFY_INIT",
          "103: inline static int inotify_init(void) {",
          "104:   return syscall(__NR_inotify_init);",
          "105: }",
          "108: #if HAVE_INOTIFY_INIT1",
          "109: inline static int inotify_init1(int flags) {",
          "110:   return syscall(__NR_inotify_init1, flags);",
          "111: }",
          "114: #if HAVE_INOTIFY_ADD_WATCH",
          "115: inline static int inotify_add_watch(int fd, const char* path, uint32_t mask) {",
          "116:   return syscall(__NR_inotify_add_watch, fd, path, mask);",
          "117: }",
          "120: #if HAVE_INOTIFY_RM_WATCH",
          "121: inline static int inotify_rm_watch(int fd, uint32_t wd) {",
          "122:   return syscall(__NR_inotify_rm_watch, fd, wd);",
          "123: }",
          "",
          "[Added Lines]",
          "38: #define HAVE_IFADDRS_H 1",
          "39: #ifdef __UCLIBC__",
          "40: # if __UCLIBC_MAJOR__ < 0 || __UCLIBC_MINOR__ < 9 || __UCLIBC_SUBLEVEL__ < 32",
          "41: #  undef HAVE_IFADDRS_H",
          "42: # endif",
          "44: #ifdef HAVE_IFADDRS_H",
          "45: # include <ifaddrs.h>",
          "48: #undef NANOSEC",
          "49: #define NANOSEC 1000000000",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132: } process_title;",
          "",
          "[Removed Lines]",
          "136: static char* basename_r(const char* path) {",
          "137:   char* s = strrchr(path, '/');",
          "138:   return s ? (s + 1) : (char*)path;",
          "139: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "164: int uv_exepath(char* buffer, size_t* size) {",
          "165:   if (!buffer || !size) {",
          "166:     return -1;",
          "167:   }",
          "172:   return 0;",
          "173: }",
          "",
          "[Removed Lines]",
          "170:   if (*size <= 0) return -1;",
          "171:   buffer[*size] = '\\0';",
          "",
          "[Added Lines]",
          "82:   ssize_t n;",
          "88:   n = readlink(\"/proc/self/exe\", buffer, *size - 1);",
          "89:   if (n <= 0) return -1;",
          "90:   buffer[n] = '\\0';",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "458: uv_err_t uv_interface_addresses(uv_interface_address_t** addresses,",
          "459:   int* count) {",
          "460:   struct ifaddrs *addrs, *ent;",
          "461:   char ip[INET6_ADDRSTRLEN];",
          "462:   uv_interface_address_t* address;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381: #ifndef HAVE_IFADDRS_H",
          "382:   return uv__new_artificial_error(UV_ENOSYS);",
          "383: #else",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "520:   freeifaddrs(addrs);",
          "522:   return uv_ok_;",
          "523: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "447: #endif",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "534:   free(addresses);",
          "535: }",
          "",
          "[Removed Lines]",
          "537: #if HAVE_INOTIFY_INIT || HAVE_INOTIFY_INIT1",
          "539: static int new_inotify_fd(void) {",
          "540: #if HAVE_INOTIFY_INIT1",
          "541:   return inotify_init1(IN_NONBLOCK | IN_CLOEXEC);",
          "542: #else",
          "543:   int fd;",
          "545:   if ((fd = inotify_init()) == -1)",
          "546:     return -1;",
          "548:   if (uv__cloexec(fd, 1) || uv__nonblock(fd, 1)) {",
          "549:     SAVE_ERRNO(uv__close(fd));",
          "550:     fd = -1;",
          "551:   }",
          "553:   return fd;",
          "554: #endif",
          "555: }",
          "558: static void uv__inotify_read(EV_P_ ev_io* w, int revents) {",
          "559:   struct inotify_event* e;",
          "560:   uv_fs_event_t* handle;",
          "561:   const char* filename;",
          "562:   ssize_t size;",
          "563:   int events;",
          "564:   char *p;",
          "566:   char buf[4096];",
          "568:   handle = container_of(w, uv_fs_event_t, read_watcher);",
          "570:   do {",
          "571:     do {",
          "572:       size = read(handle->fd, buf, sizeof buf);",
          "573:     }",
          "574:     while (size == -1 && errno == EINTR);",
          "576:     if (size == -1) {",
          "577:       assert(errno == EAGAIN || errno == EWOULDBLOCK);",
          "578:       break;",
          "579:     }",
          "584:     for (p = buf; p < buf + size; p += sizeof(*e) + e->len) {",
          "585:       e = (void*)p;",
          "587:       events = 0;",
          "588:       if (e->mask & (IN_ATTRIB|IN_MODIFY))",
          "589:         events |= UV_CHANGE;",
          "590:       if (e->mask & ~(IN_ATTRIB|IN_MODIFY))",
          "591:         events |= UV_RENAME;",
          "597:       filename = e->len ? (const char*) (e + 1) : basename_r(handle->filename);",
          "599:       handle->cb(handle, filename, events, 0);",
          "601:       if (handle->fd == -1)",
          "602:         break;",
          "603:     }",
          "604:   }",
          "606: }",
          "609: int uv_fs_event_init(uv_loop_t* loop,",
          "610:                      uv_fs_event_t* handle,",
          "611:                      const char* filename,",
          "612:                      uv_fs_event_cb cb,",
          "613:                      int flags) {",
          "614:   int events;",
          "615:   int fd;",
          "617:   loop->counters.fs_event_init++;",
          "620:   assert(!flags);",
          "627:   if ((fd = new_inotify_fd()) == -1) {",
          "628:     uv__set_sys_error(loop, errno);",
          "629:     return -1;",
          "630:   }",
          "632:   events = IN_ATTRIB",
          "633:          | IN_CREATE",
          "634:          | IN_MODIFY",
          "635:          | IN_DELETE",
          "636:          | IN_DELETE_SELF",
          "637:          | IN_MOVED_FROM",
          "638:          | IN_MOVED_TO;",
          "640:   if (inotify_add_watch(fd, filename, events) == -1) {",
          "641:     uv__set_sys_error(loop, errno);",
          "642:     uv__close(fd);",
          "643:     return -1;",
          "644:   }",
          "646:   uv__handle_init(loop, (uv_handle_t*)handle, UV_FS_EVENT);",
          "648:   handle->cb = cb;",
          "649:   handle->fd = fd;",
          "651:   ev_io_init(&handle->read_watcher, uv__inotify_read, fd, EV_READ);",
          "652:   ev_io_start(loop->ev, &handle->read_watcher);",
          "653:   ev_unref(loop->ev);",
          "655:   return 0;",
          "656: }",
          "659: void uv__fs_event_destroy(uv_fs_event_t* handle) {",
          "660:   ev_ref(handle->loop->ev);",
          "661:   ev_io_stop(handle->loop->ev, &handle->read_watcher);",
          "662:   uv__close(handle->fd);",
          "663:   handle->fd = -1;",
          "664:   free(handle->filename);",
          "665:   handle->filename = NULL;",
          "666: }",
          "670: int uv_fs_event_init(uv_loop_t* loop,",
          "671:                      uv_fs_event_t* handle,",
          "672:                      const char* filename,",
          "673:                      uv_fs_event_cb cb,",
          "674:                      int flags) {",
          "675:   loop->counters.fs_event_init++;",
          "676:   uv__set_sys_error(loop, ENOSYS);",
          "677:   return -1;",
          "678: }",
          "681: void uv__fs_event_destroy(uv_fs_event_t* handle) {",
          "682:   UNREACHABLE();",
          "683: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/linux/inotify.c||deps/uv/src/unix/linux/inotify.c": [
          "File: deps/uv/src/unix/linux/inotify.c -> deps/uv/src/unix/linux/inotify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"uv.h\"",
          "22: #include \"tree.h\"",
          "23: #include \"../internal.h\"",
          "25: #include <stdint.h>",
          "26: #include <stdio.h>",
          "27: #include <stdlib.h>",
          "28: #include <string.h>",
          "29: #include <assert.h>",
          "30: #include <errno.h>",
          "32: #include <sys/types.h>",
          "33: #include <unistd.h>",
          "34: #include <fcntl.h>",
          "36: #undef HAVE_INOTIFY_INIT",
          "37: #undef HAVE_INOTIFY_INIT1",
          "38: #undef HAVE_INOTIFY_ADD_WATCH",
          "39: #undef HAVE_INOTIFY_RM_WATCH",
          "41: #if __NR_inotify_init",
          "42: # define HAVE_INOTIFY_INIT 1",
          "43: #endif",
          "44: #if __NR_inotify_init1",
          "45: # define HAVE_INOTIFY_INIT1 1",
          "46: #endif",
          "47: #if __NR_inotify_add_watch",
          "48: # define HAVE_INOTIFY_ADD_WATCH 1",
          "49: #endif",
          "50: #if __NR_inotify_rm_watch",
          "51: # define HAVE_INOTIFY_RM_WATCH 1",
          "52: #endif",
          "54: #if HAVE_INOTIFY_INIT || HAVE_INOTIFY_INIT1",
          "55: # undef IN_ACCESS",
          "56: # undef IN_MODIFY",
          "57: # undef IN_ATTRIB",
          "58: # undef IN_CLOSE_WRITE",
          "59: # undef IN_CLOSE_NOWRITE",
          "60: # undef IN_OPEN",
          "61: # undef IN_MOVED_FROM",
          "62: # undef IN_MOVED_TO",
          "63: # undef IN_CREATE",
          "64: # undef IN_DELETE",
          "65: # undef IN_DELETE_SELF",
          "66: # undef IN_MOVE_SELF",
          "67: # define IN_ACCESS         0x001",
          "68: # define IN_MODIFY         0x002",
          "69: # define IN_ATTRIB         0x004",
          "70: # define IN_CLOSE_WRITE    0x008",
          "71: # define IN_CLOSE_NOWRITE  0x010",
          "72: # define IN_OPEN           0x020",
          "73: # define IN_MOVED_FROM     0x040",
          "74: # define IN_MOVED_TO       0x080",
          "75: # define IN_CREATE         0x100",
          "76: # define IN_DELETE         0x200",
          "77: # define IN_DELETE_SELF    0x400",
          "78: # define IN_MOVE_SELF      0x800",
          "79: struct inotify_event {",
          "80:   int32_t wd;",
          "81:   uint32_t mask;",
          "82:   uint32_t cookie;",
          "83:   uint32_t len;",
          "85: };",
          "88: #undef IN_CLOEXEC",
          "89: #undef IN_NONBLOCK",
          "91: #if HAVE_INOTIFY_INIT1",
          "92: # define IN_CLOEXEC O_CLOEXEC",
          "93: # define IN_NONBLOCK O_NONBLOCK",
          "96: #if HAVE_INOTIFY_INIT",
          "97: inline static int inotify_init(void) {",
          "98:   return syscall(__NR_inotify_init);",
          "99: }",
          "102: #if HAVE_INOTIFY_INIT1",
          "103: inline static int inotify_init1(int flags) {",
          "104:   return syscall(__NR_inotify_init1, flags);",
          "105: }",
          "108: #if HAVE_INOTIFY_ADD_WATCH",
          "109: inline static int inotify_add_watch(int fd, const char* path, uint32_t mask) {",
          "110:   return syscall(__NR_inotify_add_watch, fd, path, mask);",
          "111: }",
          "114: #if HAVE_INOTIFY_RM_WATCH",
          "115: inline static int inotify_rm_watch(int fd, uint32_t wd) {",
          "116:   return syscall(__NR_inotify_rm_watch, fd, wd);",
          "117: }",
          "122: static char* basename_r(const char* path) {",
          "123:   char* s = strrchr(path, '/');",
          "124:   return s ? (s + 1) : (char*)path;",
          "125: }",
          "128: static int compare_watchers(const uv_fs_event_t* a, const uv_fs_event_t* b) {",
          "129:   if (a->fd < b->fd) return -1;",
          "130:   if (a->fd > b->fd) return 1;",
          "131:   return 0;",
          "132: }",
          "135: RB_GENERATE_INTERNAL(uv__inotify_watchers, uv_fs_event_s, node, compare_watchers,",
          "136:   inline static __attribute__((unused)))",
          "139: void uv__inotify_loop_init(uv_loop_t* loop) {",
          "140:   RB_INIT(&loop->inotify_watchers);",
          "141:   loop->inotify_fd = -1;",
          "142: }",
          "145: void uv__inotify_loop_delete(uv_loop_t* loop) {",
          "146:   if (loop->inotify_fd == -1) return;",
          "147:   ev_io_stop(loop->ev, &loop->inotify_read_watcher);",
          "148:   close(loop->inotify_fd);",
          "149:   loop->inotify_fd = -1;",
          "150: }",
          "153: #if HAVE_INOTIFY_INIT || HAVE_INOTIFY_INIT1",
          "155: static void uv__inotify_read(EV_P_ ev_io* w, int revents);",
          "158: static int new_inotify_fd(void) {",
          "159: #if HAVE_INOTIFY_INIT1",
          "160:   return inotify_init1(IN_NONBLOCK | IN_CLOEXEC);",
          "161: #else",
          "162:   int fd;",
          "164:   if ((fd = inotify_init()) == -1)",
          "165:     return -1;",
          "167:   if (uv__cloexec(fd, 1) || uv__nonblock(fd, 1)) {",
          "168:     SAVE_ERRNO(uv__close(fd));",
          "169:     return -1;",
          "170:   }",
          "172:   return fd;",
          "173: #endif",
          "174: }",
          "177: static int init_inotify(uv_loop_t* loop) {",
          "178:   if (loop->inotify_fd != -1)",
          "179:     return 0;",
          "181:   loop->inotify_fd = new_inotify_fd();",
          "182:   if (loop->inotify_fd == -1) {",
          "183:     uv__set_sys_error(loop, errno);",
          "184:     return -1;",
          "185:   }",
          "187:   ev_io_init(&loop->inotify_read_watcher,",
          "188:              uv__inotify_read,",
          "189:              loop->inotify_fd,",
          "190:              EV_READ);",
          "191:   ev_io_start(loop->ev, &loop->inotify_read_watcher);",
          "192:   ev_unref(loop->ev);",
          "194:   return 0;",
          "195: }",
          "198: static void add_watcher(uv_fs_event_t* handle) {",
          "199:   RB_INSERT(uv__inotify_watchers, &handle->loop->inotify_watchers, handle);",
          "200: }",
          "203: static uv_fs_event_t* find_watcher(uv_loop_t* loop, int wd) {",
          "204:   uv_fs_event_t handle;",
          "205:   handle.fd = wd;",
          "206:   return RB_FIND(uv__inotify_watchers, &loop->inotify_watchers, &handle);",
          "207: }",
          "210: static void remove_watcher(uv_fs_event_t* handle) {",
          "211:   RB_REMOVE(uv__inotify_watchers, &handle->loop->inotify_watchers, handle);",
          "212: }",
          "215: static void uv__inotify_read(EV_P_ ev_io* w, int revents) {",
          "216:   const struct inotify_event* e;",
          "217:   uv_fs_event_t* handle;",
          "218:   uv_loop_t* uv_loop;",
          "219:   const char* filename;",
          "220:   ssize_t size;",
          "221:   int events;",
          "222:   const char *p;",
          "224:   char buf[4096];",
          "226:   uv_loop = container_of(w, uv_loop_t, inotify_read_watcher);",
          "228:   while (1) {",
          "229:     do {",
          "230:       size = read(uv_loop->inotify_fd, buf, sizeof buf);",
          "231:     }",
          "232:     while (size == -1 && errno == EINTR);",
          "234:     if (size == -1) {",
          "235:       assert(errno == EAGAIN || errno == EWOULDBLOCK);",
          "236:       break;",
          "237:     }",
          "242:     for (p = buf; p < buf + size; p += sizeof(*e) + e->len) {",
          "243:       e = (const struct inotify_event*)p;",
          "245:       events = 0;",
          "246:       if (e->mask & (IN_ATTRIB|IN_MODIFY))",
          "247:         events |= UV_CHANGE;",
          "248:       if (e->mask & ~(IN_ATTRIB|IN_MODIFY))",
          "249:         events |= UV_RENAME;",
          "251:       handle = find_watcher(uv_loop, e->wd);",
          "252:       if (handle == NULL)",
          "259:       filename = e->len ? (const char*) (e + 1) : basename_r(handle->filename);",
          "261:       handle->cb(handle, filename, events, 0);",
          "262:     }",
          "263:   }",
          "264: }",
          "267: int uv_fs_event_init(uv_loop_t* loop,",
          "268:                      uv_fs_event_t* handle,",
          "269:                      const char* filename,",
          "270:                      uv_fs_event_cb cb,",
          "271:                      int flags) {",
          "272:   int events;",
          "273:   int wd;",
          "275:   loop->counters.fs_event_init++;",
          "278:   assert(!flags);",
          "280:   if (init_inotify(loop)) return -1;",
          "282:   events = IN_ATTRIB",
          "283:          | IN_CREATE",
          "284:          | IN_MODIFY",
          "285:          | IN_DELETE",
          "286:          | IN_DELETE_SELF",
          "287:          | IN_MOVED_FROM",
          "288:          | IN_MOVED_TO;",
          "290:   wd = inotify_add_watch(loop->inotify_fd, filename, events);",
          "291:   if (wd == -1) return uv__set_sys_error(loop, errno);",
          "293:   uv__handle_init(loop, (uv_handle_t*)handle, UV_FS_EVENT);",
          "294:   handle->filename = strdup(filename);",
          "295:   handle->cb = cb;",
          "296:   handle->fd = wd;",
          "297:   add_watcher(handle);",
          "299:   return 0;",
          "300: }",
          "303: void uv__fs_event_destroy(uv_fs_event_t* handle) {",
          "304:   inotify_rm_watch(handle->loop->inotify_fd, handle->fd);",
          "305:   remove_watcher(handle);",
          "306:   handle->fd = -1;",
          "308:   free(handle->filename);",
          "309:   handle->filename = NULL;",
          "310: }",
          "314: int uv_fs_event_init(uv_loop_t* loop,",
          "315:                      uv_fs_event_t* handle,",
          "316:                      const char* filename,",
          "317:                      uv_fs_event_cb cb,",
          "318:                      int flags) {",
          "319:   loop->counters.fs_event_init++;",
          "320:   uv__set_sys_error(loop, ENOSYS);",
          "321:   return -1;",
          "322: }",
          "325: void uv__fs_event_destroy(uv_fs_event_t* handle) {",
          "326:   UNREACHABLE();",
          "327: }",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/netbsd.c||deps/uv/src/unix/netbsd.c": [
          "File: deps/uv/src/unix/netbsd.c -> deps/uv/src/unix/netbsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: }",
          "56: int uv_exepath(char* buffer, size_t* size) {",
          "61:   int mib[4];",
          "62:   size_t cb;",
          "63:   pid_t mypid;",
          "",
          "[Removed Lines]",
          "57:   uint32_t usize;",
          "58:   int result;",
          "59:   char* path;",
          "60:   char* fullpath;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/openbsd.c||deps/uv/src/unix/openbsd.c": [
          "File: deps/uv/src/unix/openbsd.c -> deps/uv/src/unix/openbsd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <sys/types.h>",
          "22: #include <sys/param.h>",
          "23: #include <sys/resource.h>",
          "24: #include <sys/time.h>",
          "25: #include <sys/sysctl.h>",
          "27: #include <errno.h>",
          "28: #include <stdlib.h>",
          "29: #include <string.h>",
          "30: #include <unistd.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "21: #include \"uv.h\"",
          "22: #include \"internal.h\"",
          "27: #include <sys/sched.h>",
          "32: #include <fcntl.h>",
          "33: #include <kvm.h>",
          "34: #include <paths.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160: uv_err_t uv_resident_set_memory(size_t* rss) {",
          "161:   kvm_t *kd = NULL;",
          "163:   pid_t pid;",
          "165:   size_t page_size = getpagesize();",
          "167:   pid = getpid();",
          "",
          "[Removed Lines]",
          "162:   struct kinfo_proc2 *kinfo = NULL;",
          "164:   int nprocs, max_size = sizeof(struct kinfo_proc2);",
          "",
          "[Added Lines]",
          "169:   struct kinfo_proc *kinfo = NULL;",
          "171:   int nprocs, max_size = sizeof(struct kinfo_proc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "169:   kd = kvm_open(NULL, _PATH_MEM, NULL, O_RDONLY, \"kvm_open\");",
          "170:   if (kd == NULL) goto error;",
          "173:   if (kinfo == NULL) goto error;",
          "",
          "[Removed Lines]",
          "172:   kinfo = kvm_getproc2(kd, KERN_PROC_PID, pid, max_size, &nprocs);",
          "",
          "[Added Lines]",
          "179:   kinfo = kvm_getprocs(kd, KERN_PROC_PID, pid, max_size, &nprocs);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "207:   uint64_t info[CPUSTATES];",
          "208:   char model[512];",
          "209:   int numcpus = 1;",
          "211:   size_t size;",
          "212:   uv_cpu_info_t* cpu_info;",
          "214:   size = sizeof(model);",
          "215:   if (sysctl(which, 2, &model, &size, NULL, 0) < 0) {",
          "217:   }",
          "218:   which[1] = HW_NCPU;",
          "219:   size = sizeof(numcpus);",
          "220:   if (sysctl(which, 2, &numcpus, &size, NULL, 0) < 0) {",
          "222:   }",
          "",
          "[Removed Lines]",
          "210:   static int which[] = {CTL_HW, HW_MODEL, NULL};",
          "216:     return -1;",
          "221:     return -1;",
          "",
          "[Added Lines]",
          "217:   static int which[] = {CTL_HW,HW_MODEL,0};",
          "223:     return uv__new_sys_error(errno);",
          "228:     return uv__new_sys_error(errno);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "249:     cpu_info = &(*cpu_infos)[i];",
          "257:     cpu_info->model = strdup(model);",
          "258:     cpu_info->speed = cpuspeed;",
          "",
          "[Removed Lines]",
          "251:     cpu_info->cpu_times.user = (uint64_t)(info[CP_USER]) * multiplier);",
          "252:     cpu_info->cpu_times.nice = ((uint64_t)(info[CP_NICE]) * multiplier);",
          "253:     cpu_info->cpu_times.sys = (uint64_t)(info[CP_SYS]) * multiplier));",
          "254:     cpu_info->cpu_times.idle = (uint64_t)(info[CP_IDLE]) * multiplier));",
          "255:     cpu_info->cpu_times.irq = (uint64_t)(info[CP_INTR]) * multiplier));",
          "",
          "[Added Lines]",
          "258:     cpu_info->cpu_times.user = (uint64_t)(info[CP_USER]) * multiplier;",
          "259:     cpu_info->cpu_times.nice = (uint64_t)(info[CP_NICE]) * multiplier;",
          "260:     cpu_info->cpu_times.sys = (uint64_t)(info[CP_SYS]) * multiplier;",
          "261:     cpu_info->cpu_times.idle = (uint64_t)(info[CP_IDLE]) * multiplier;",
          "262:     cpu_info->cpu_times.irq = (uint64_t)(info[CP_INTR]) * multiplier;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "266:   int i;",
          "268:   for (i = 0; i < count; i++) {",
          "270:   }",
          "272:   free(cpu_infos);",
          "",
          "[Removed Lines]",
          "269:     free(cpu_infos[i].brand);",
          "",
          "[Added Lines]",
          "276:     free(cpu_infos[i].model);",
          "",
          "---------------"
        ],
        "deps/uv/src/unix/process.c||deps/uv/src/unix/process.c": [
          "File: deps/uv/src/unix/process.c -> deps/uv/src/unix/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <stdio.h>",
          "33: #ifdef __APPLE__",
          "34: # include <crt_externs.h>",
          "35: # define environ (*_NSGetEnviron())",
          "36: #else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: # include <TargetConditionals.h>",
          "35: #endif",
          "37: #if defined(__APPLE__) && !defined(TARGET_OS_IPHONE)",
          "",
          "---------------"
        ],
        "deps/uv/src/uv-common.c||deps/uv/src/uv-common.c": [
          "File: deps/uv/src/uv-common.c -> deps/uv/src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: #undef UV_STRERROR_GEN",
          "105:   loop->last_err.code = code;",
          "106:   loop->last_err.sys_errno_ = sys_error;",
          "107: }",
          "111:   loop->last_err.code = uv_translate_sys_error(sys_error);",
          "112:   loop->last_err.sys_errno_ = sys_error;",
          "113: }",
          "117:   loop->last_err = uv__new_artificial_error(code);",
          "118: }",
          "",
          "[Removed Lines]",
          "104: void uv__set_error(uv_loop_t* loop, uv_err_code code, int sys_error) {",
          "110: void uv__set_sys_error(uv_loop_t* loop, int sys_error) {",
          "116: void uv__set_artificial_error(uv_loop_t* loop, uv_err_code code) {",
          "",
          "[Added Lines]",
          "104: int uv__set_error(uv_loop_t* loop, uv_err_code code, int sys_error) {",
          "107:   return -1;",
          "111: int uv__set_sys_error(uv_loop_t* loop, int sys_error) {",
          "114:   return -1;",
          "118: int uv__set_artificial_error(uv_loop_t* loop, uv_err_code code) {",
          "120:   return -1;",
          "",
          "---------------"
        ],
        "deps/uv/src/uv-common.h||deps/uv/src/uv-common.h": [
          "File: deps/uv/src/uv-common.h -> deps/uv/src/uv-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: extern const uv_err_t uv_ok_;",
          "53: uv_err_code uv_translate_sys_error(int sys_errno);",
          "57: uv_err_t uv__new_sys_error(int sys_error);",
          "58: uv_err_t uv__new_artificial_error(uv_err_code code);",
          "",
          "[Removed Lines]",
          "54: void uv__set_error(uv_loop_t* loop, uv_err_code code, int sys_error);",
          "55: void uv__set_sys_error(uv_loop_t* loop, int sys_error);",
          "56: void uv__set_artificial_error(uv_loop_t* loop, uv_err_code code);",
          "",
          "[Added Lines]",
          "54: int uv__set_error(uv_loop_t* loop, uv_err_code code, int sys_error);",
          "55: int uv__set_sys_error(uv_loop_t* loop, int sys_error);",
          "56: int uv__set_artificial_error(uv_loop_t* loop, uv_err_code code);",
          "",
          "---------------"
        ],
        "deps/uv/src/win/fs.c||deps/uv/src/win/fs.c": [
          "File: deps/uv/src/win/fs.c -> deps/uv/src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "294:   OVERLAPPED overlapped, *overlapped_ptr;",
          "295:   LARGE_INTEGER offset_;",
          "296:   DWORD bytes;",
          "298:   VERIFY_UV_FILE(file, req);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:   DWORD error;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:   if (ReadFile(handle, buf, length, &bytes, overlapped_ptr)) {",
          "324:     SET_REQ_RESULT(req, bytes);",
          "325:   } else {",
          "327:   }",
          "328: }",
          "",
          "[Removed Lines]",
          "326:     SET_REQ_WIN32_ERROR(req, GetLastError());",
          "",
          "[Added Lines]",
          "327:     error = GetLastError();",
          "328:     if (error == ERROR_HANDLE_EOF) {",
          "329:       SET_REQ_RESULT(req, bytes);",
          "330:     } else {",
          "331:       SET_REQ_WIN32_ERROR(req, error);",
          "332:     }",
          "",
          "---------------"
        ],
        "deps/uv/src/win/internal.h||deps/uv/src/win/internal.h": [
          "File: deps/uv/src/win/internal.h -> deps/uv/src/win/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "338: extern int uv_allow_ipv6;",
          "341: extern struct sockaddr_in uv_addr_ip4_any_;",
          "342: extern struct sockaddr_in6 uv_addr_ip6_any_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341: extern int uv_tcp_non_ifs_lsp_ipv4;",
          "342: extern int uv_tcp_non_ifs_lsp_ipv6;",
          "",
          "---------------"
        ],
        "deps/uv/src/win/tcp.c||deps/uv/src/win/tcp.c": [
          "File: deps/uv/src/win/tcp.c -> deps/uv/src/win/tcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81: static int uv_tcp_set_socket(uv_loop_t* loop, uv_tcp_t* handle,",
          "82:     SOCKET socket, int imported) {",
          "83:   DWORD yes = 1;",
          "85:   assert(handle->socket == INVALID_SOCKET);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "84:   int non_ifs_lsp;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:     }",
          "111:   }",
          "114:     if (pSetFileCompletionNotificationModes((HANDLE) socket,",
          "115:         FILE_SKIP_SET_EVENT_ON_HANDLE |",
          "116:         FILE_SKIP_COMPLETION_PORT_ON_SUCCESS)) {",
          "",
          "[Removed Lines]",
          "113:   if (pSetFileCompletionNotificationModes) {",
          "",
          "[Added Lines]",
          "114:   non_ifs_lsp = (handle->flags & UV_HANDLE_IPV6) ? uv_tcp_non_ifs_lsp_ipv6 :",
          "115:     uv_tcp_non_ifs_lsp_ipv4;",
          "117:   if (pSetFileCompletionNotificationModes && !non_ifs_lsp) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1035:   tcp->flags |= UV_HANDLE_BOUND;",
          "1036:   tcp->flags |= UV_HANDLE_SHARED_TCP_SERVER;",
          "1038:   return uv_tcp_set_socket(tcp->loop, tcp, socket, 1);",
          "1039: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1042:   if (socket_protocol_info->iAddressFamily == AF_INET6) {",
          "1043:     tcp->flags |= UV_HANDLE_IPV6;",
          "1044:   }",
          "",
          "---------------"
        ],
        "deps/uv/src/win/winsock.c||deps/uv/src/win/winsock.c": [
          "File: deps/uv/src/win/winsock.c -> deps/uv/src/win/winsock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: int uv_allow_ipv6;",
          "32: struct sockaddr_in uv_addr_ip4_any_;",
          "33: struct sockaddr_in6 uv_addr_ip6_any_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: int uv_tcp_non_ifs_lsp_ipv4;",
          "33: int uv_tcp_non_ifs_lsp_ipv6;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81:   WSADATA wsa_data;",
          "82:   int errorno;",
          "86:   errorno = WSAStartup(MAKEWORD(2, 2), &wsa_data);",
          "",
          "[Removed Lines]",
          "83:   SOCKET dummy6;",
          "",
          "[Added Lines]",
          "87:   SOCKET dummy;",
          "88:   WSAPROTOCOL_INFOW protocol_info;",
          "89:   int opt_len;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "92:   uv_addr_ip4_any_ = uv_ip4_addr(\"0.0.0.0\", 0);",
          "93:   uv_addr_ip6_any_ = uv_ip6_addr(\"::\", 0);",
          "98:     uv_allow_ipv6 = TRUE;",
          "100:       uv_fatal_error(WSAGetLastError(), \"closesocket\");",
          "101:     }",
          "102:   }",
          "",
          "[Removed Lines]",
          "96:   dummy6 = socket(AF_INET6, SOCK_STREAM, IPPROTO_IP);",
          "97:   if (dummy6 != INVALID_SOCKET) {",
          "99:     if (closesocket(dummy6) == SOCKET_ERROR) {",
          "",
          "[Added Lines]",
          "102:   dummy = socket(AF_INET, SOCK_STREAM, IPPROTO_IP);",
          "103:   if (dummy == INVALID_SOCKET) {",
          "104:     uv_fatal_error(WSAGetLastError(), \"socket\");",
          "105:   }",
          "107:   opt_len = (int) sizeof protocol_info;",
          "108:   if (!getsockopt(dummy,",
          "109:                   SOL_SOCKET,",
          "110:                   SO_PROTOCOL_INFOW,",
          "111:                   (char*) &protocol_info,",
          "112:                   &opt_len) == SOCKET_ERROR) {",
          "113:     uv_fatal_error(WSAGetLastError(), \"socket\");",
          "114:   }",
          "116:   if (!(protocol_info.dwServiceFlags1 & XP1_IFS_HANDLES)) {",
          "117:     uv_tcp_non_ifs_lsp_ipv4 = 1;",
          "118:   }",
          "120:   if (closesocket(dummy) == SOCKET_ERROR) {",
          "121:     uv_fatal_error(WSAGetLastError(), \"closesocket\");",
          "122:   }",
          "125:   dummy = socket(AF_INET6, SOCK_STREAM, IPPROTO_IP);",
          "126:   if (dummy != INVALID_SOCKET) {",
          "129:     opt_len = (int) sizeof protocol_info;",
          "130:     if (!getsockopt(dummy,",
          "131:                     SOL_SOCKET,",
          "132:                     SO_PROTOCOL_INFOW,",
          "133:                     (char*) &protocol_info,",
          "134:                     &opt_len) == SOCKET_ERROR) {",
          "135:       uv_fatal_error(WSAGetLastError(), \"socket\");",
          "136:     }",
          "138:     if (!(protocol_info.dwServiceFlags1 & XP1_IFS_HANDLES)) {",
          "139:       uv_tcp_non_ifs_lsp_ipv6 = 1;",
          "140:     }",
          "142:     if (closesocket(dummy) == SOCKET_ERROR) {",
          "",
          "---------------"
        ],
        "deps/uv/test/run-tests.c||deps/uv/test/run-tests.c": [
          "File: deps/uv/test/run-tests.c -> deps/uv/test/run-tests.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   uv_pipe_open(&channel, 0);",
          "137:   r = uv_tcp_init(uv_default_loop(), &tcp_server);",
          "138:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "134:   ASSERT(uv_is_readable(&channel));",
          "135:   ASSERT(uv_is_writable(&channel));",
          "",
          "[Added Lines]",
          "134:   ASSERT(uv_is_readable((uv_stream_t*)&channel));",
          "135:   ASSERT(uv_is_writable((uv_stream_t*)&channel));",
          "",
          "---------------"
        ],
        "deps/uv/test/test-fs.c||deps/uv/test/test-fs.c": [
          "File: deps/uv/test/test-fs.c -> deps/uv/test/test-fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:   uv_fs_req_cleanup(req);",
          "220:   if (close_cb_count == 3) {",
          "221:     r = uv_fs_unlink(loop, &unlink_req, \"test_file2\", unlink_cb);",
          "222:   }",
          "223: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:     ASSERT(r == 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "231:   ftruncate_cb_count++;",
          "232:   uv_fs_req_cleanup(req);",
          "233:   r = uv_fs_close(loop, &close_req, open_req1.result, close_cb);",
          "234: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "235:   ASSERT(r == 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "249:     ASSERT(strcmp(buf, \"test-bu\") == 0);",
          "250:     r = uv_fs_close(loop, &close_req, open_req1.result, close_cb);",
          "251:   }",
          "252: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "254:   ASSERT(r == 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "268:   memset(buf, 0, sizeof(buf));",
          "269:   r = uv_fs_read(loop, &read_req, open_req1.result, buf, sizeof(buf), -1,",
          "270:       read_cb);",
          "271: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "274:   ASSERT(r == 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "292:   fsync_cb_count++;",
          "293:   uv_fs_req_cleanup(req);",
          "294:   r = uv_fs_close(loop, &close_req, open_req1.result, close_cb);",
          "295: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "299:   ASSERT(r == 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "303:   fdatasync_cb_count++;",
          "304:   uv_fs_req_cleanup(req);",
          "305:   r = uv_fs_fsync(loop, &fsync_req, open_req1.result, fsync_cb);",
          "306: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:   ASSERT(r == 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "314:   write_cb_count++;",
          "315:   uv_fs_req_cleanup(req);",
          "316:   r = uv_fs_fdatasync(loop, &fdatasync_req, open_req1.result, fdatasync_cb);",
          "317: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:   ASSERT(r == 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "326:   uv_fs_req_cleanup(req);",
          "327:   r = uv_fs_write(loop, &write_req, req->result, test_buf, sizeof(test_buf),",
          "328:       -1, write_cb);",
          "329: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "336:   ASSERT(r == 0);",
          "",
          "---------------"
        ],
        "deps/uv/uv.gyp||deps/uv/uv.gyp": [
          "File: deps/uv/uv.gyp -> deps/uv/uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "217:         }],",
          "218:         [ 'OS==\"linux\"', {",
          "219:           'include_dirs': [ 'src/ares/config_linux' ],",
          "221:           'defines': [",
          "222:             'EV_CONFIG_H=\"config_linux.h\"',",
          "223:             'EIO_CONFIG_H=\"config_linux.h\"',",
          "",
          "[Removed Lines]",
          "220:           'sources': [ 'src/unix/linux.c' ],",
          "",
          "[Added Lines]",
          "220:           'sources': [",
          "221:             'src/unix/linux/core.c',",
          "222:             'src/unix/linux/inotify.c',",
          "223:           ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9f26130a0eb87d88aa61ac08a90a0c309266342c",
      "candidate_info": {
        "commit_hash": "9f26130a0eb87d88aa61ac08a90a0c309266342c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/9f26130a0eb87d88aa61ac08a90a0c309266342c",
        "files": [
          "deps/uv/build/gcc_version.py",
          "deps/uv/common.gypi",
          "deps/uv/gyp_uv",
          "deps/uv/src/win/process-stdio.c"
        ],
        "message": "deps: upgrade libuv to 2c3e8b6",
        "before_after_code_files": [
          "deps/uv/build/gcc_version.py||deps/uv/build/gcc_version.py",
          "deps/uv/common.gypi||deps/uv/common.gypi",
          "deps/uv/src/win/process-stdio.c||deps/uv/src/win/process-stdio.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/uv/build/gcc_version.py||deps/uv/build/gcc_version.py": [
          "File: deps/uv/build/gcc_version.py -> deps/uv/build/gcc_version.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "deps/uv/common.gypi||deps/uv/common.gypi": [
          "File: deps/uv/common.gypi -> deps/uv/common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "6:     'library%': 'static_library',    # allow override to 'shared_library' for DLL/.so builds",
          "7:     'component%': 'static_library',  # NB. these names match with what V8 expects",
          "8:     'msvs_multi_core_compile': '0',  # we do enable multicore compiles, but not using the V8 way",
          "9:   },",
          "11:   'target_defaults': {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9:     'gcc_version%': 'unknown',",
          "10:     'clang%': 0,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:         ],",
          "118:       }],",
          "119:       [ 'OS==\"linux\" or OS==\"freebsd\" or OS==\"openbsd\" or OS==\"solaris\"', {",
          "123:         'cflags': [ '-Wall' ],",
          "124:         'cflags_cc': [ '-fno-rtti', '-fno-exceptions' ],",
          "125:         'conditions': [",
          "",
          "[Removed Lines]",
          "120:         'variables': {",
          "121:           'gcc_version%': '<!(python build/gcc_version.py)>)',",
          "122:         },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "137:             'cflags': [ '-pthread' ],",
          "138:             'ldflags': [ '-pthread' ],",
          "139:           }],",
          "141:             'cflags': [ '-fvisibility=hidden' ],",
          "142:           }],",
          "143:         ],",
          "",
          "[Removed Lines]",
          "140:           [ 'visibility==\"hidden\" and gcc_version >= \"4.0.0\"', {",
          "",
          "[Added Lines]",
          "139:           [ 'visibility==\"hidden\" and (clang==1 or gcc_version >= 40)', {",
          "",
          "---------------"
        ],
        "deps/uv/src/win/process-stdio.c||deps/uv/src/win/process-stdio.c": [
          "File: deps/uv/src/win/process-stdio.c -> deps/uv/src/win/process-stdio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "181: static int uv__duplicate_handle(uv_loop_t* loop, HANDLE handle, HANDLE* dup) {",
          "182:   HANDLE current_process;",
          "184:   current_process = GetCurrentProcess();",
          "186:   if (!DuplicateHandle(current_process,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:   if (handle == INVALID_HANDLE_VALUE ||",
          "191:       handle == NULL ||",
          "192:       handle == (HANDLE) -2) {",
          "194:     uv__set_artificial_error(loop, UV_EBADF);",
          "195:     return -1;",
          "196:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "208:     return -1;",
          "209:   }",
          "212:   return uv__duplicate_handle(loop, handle, dup);",
          "213: }",
          "",
          "[Removed Lines]",
          "211:   handle = (HANDLE)_get_osfhandle(fd);",
          "",
          "[Added Lines]",
          "225:   handle = (HANDLE) _get_osfhandle(fd);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "355:             break;",
          "357:           case FILE_TYPE_UNKNOWN:",
          "359:               uv__set_sys_error(loop, GetLastError());",
          "360:               CloseHandle(child_handle);",
          "361:               goto error;",
          "",
          "[Removed Lines]",
          "358:             if (GetLastError != 0) {",
          "",
          "[Added Lines]",
          "372:             if (GetLastError() != 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "98d53ac51ea3464754155e50e55106bd30aed193",
      "candidate_info": {
        "commit_hash": "98d53ac51ea3464754155e50e55106bd30aed193",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/98d53ac51ea3464754155e50e55106bd30aed193",
        "files": [
          "test/simple/test-crypto-padding-aes256.js"
        ],
        "message": "test: add AES-256 padding crypto test",
        "before_after_code_files": [
          "test/simple/test-crypto-padding-aes256.js||test/simple/test-crypto-padding-aes256.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-crypto-padding-aes256.js||test/simple/test-crypto-padding-aes256.js": [
          "File: test/simple/test-crypto-padding-aes256.js -> test/simple/test-crypto-padding-aes256.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "25: try {",
          "26:   var crypto = require('crypto');",
          "27: } catch (e) {",
          "28:   console.log('Not compiled with OpenSSL support.');",
          "29:   process.exit();",
          "30: }",
          "32: function aes256(decipherFinal) {",
          "33:   var iv  = new Buffer('00000000000000000000000000000000', 'hex');",
          "34:   var key = new Buffer('0123456789abcdef0123456789abcdef' +",
          "35:                        '0123456789abcdef0123456789abcdef', 'hex');",
          "37:   function encrypt(val, pad) {",
          "38:         var c = crypto.createCipheriv('aes256', key, iv);",
          "39:         c.setAutoPadding(pad);",
          "40:         return c.update(val, 'utf8') + c.final('binary');",
          "41:   }",
          "43:   function decrypt(val, pad) {",
          "44:         var c = crypto.createDecipheriv('aes256', key, iv);",
          "45:         c.setAutoPadding(pad);",
          "46:         return c.update(val, 'binary') + c[decipherFinal]('utf8');",
          "47:   }",
          "52:   var plaintext = '0123456789abcdef0123456789abcdef'; // multiple of block size",
          "53:   var encrypted = encrypt(plaintext, false);",
          "54:   var decrypted = decrypt(encrypted, false);",
          "55:   assert.equal(decrypted, plaintext);",
          "60:   plaintext = '0123456789abcdef0123456789abcde'; // not a multiple",
          "61:   encrypted = encrypt(plaintext, true);",
          "62:   decrypted = decrypt(encrypted, true);",
          "63:   assert.equal(decrypted, plaintext);",
          "64: }",
          "66: aes256('final');",
          "67: aes256('finaltol');",
          "",
          "---------------"
        ]
      }
    }
  ]
}