{
  "cve_id": "CVE-2015-7551",
  "cve_desc": "The Fiddle::Handle implementation in ext/fiddle/handle.c in Ruby before 2.0.0-p648, 2.1 before 2.1.8, and 2.2 before 2.2.4, as distributed in Apple OS X before 10.11.4 and other products, mishandles tainting, which allows context-dependent attackers to execute arbitrary code or cause a denial of service (application crash) via a crafted string, related to the DL module and the libffi library.  NOTE: this vulnerability exists because of a CVE-2009-5147 regression.",
  "repo": "ruby/ruby",
  "patch_hash": "339e11a7f178312d937b7c95dd3115ce7236597a",
  "patch_info": {
    "commit_hash": "339e11a7f178312d937b7c95dd3115ce7236597a",
    "repo": "ruby/ruby",
    "commit_url": "https://github.com/ruby/ruby/commit/339e11a7f178312d937b7c95dd3115ce7236597a",
    "files": [
      "ChangeLog",
      "ext/fiddle/handle.c",
      "test/fiddle/test_handle.rb",
      "version.h"
    ],
    "message": "merge revision(s): 53153 and 23405@ruby_1_9_1\n\n\t* ext/fiddle/handle.c: check tainted string arguments.\n\t  Patch provided by tenderlove and nobu.\n\n\t* test/fiddle/test_handle.rb (class TestHandle): add test for above.\n\n\t* ext/dl/handle.c (rb_dlhandle_initialize): prohibits DL::dlopen\n\t  with a tainted name of library.\n\t  Patch by sheepman <sheepman AT sheepman.sakura.ne.jp>.\n\n\t* ext/dl/handle.c (rb_dlhandle_sym): ditto\n\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@53156 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
    "before_after_code_files": [
      "ext/fiddle/handle.c||ext/fiddle/handle.c",
      "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb",
      "version.h||version.h"
    ]
  },
  "patch_diff": {
    "ext/fiddle/handle.c||ext/fiddle/handle.c": [
      "File: ext/fiddle/handle.c -> ext/fiddle/handle.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #include <ruby.h>",
      "2: #include <fiddle.h>",
      "4: VALUE rb_cHandle;",
      "6: struct dl_handle {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: #define SafeStringValueCStr(v) (rb_check_safe_obj(rb_string_value(&v)), StringValueCStr(v))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "143:  cflag = RTLD_LAZY | RTLD_GLOBAL;",
      "144:  break;",
      "145:       case 1:",
      "147:  cflag = RTLD_LAZY | RTLD_GLOBAL;",
      "148:  break;",
      "149:       case 2:",
      "151:  cflag = NUM2INT(flag);",
      "152:  break;",
      "153:       default:",
      "",
      "[Removed Lines]",
      "146:  clib = NIL_P(lib) ? NULL : StringValuePtr(lib);",
      "150:  clib = NIL_P(lib) ? NULL : StringValuePtr(lib);",
      "",
      "[Added Lines]",
      "148:  clib = NIL_P(lib) ? NULL : SafeStringValueCStr(lib);",
      "152:  clib = NIL_P(lib) ? NULL : SafeStringValueCStr(lib);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "263:     return PTR2NUM(fiddle_handle);",
      "264: }",
      "",
      "[Removed Lines]",
      "266: static VALUE fiddle_handle_sym(void *handle, const char *symbol);",
      "",
      "[Added Lines]",
      "268: static VALUE fiddle_handle_sym(void *handle, VALUE symbol);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "282:  rb_raise(rb_eFiddleError, \"closed handle\");",
      "283:     }",
      "286: }",
      "288: #ifndef RTLD_NEXT",
      "",
      "[Removed Lines]",
      "285:     return fiddle_handle_sym(fiddle_handle->ptr, StringValueCStr(sym));",
      "",
      "[Added Lines]",
      "287:     return fiddle_handle_sym(fiddle_handle->ptr, sym);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "305: static VALUE",
      "306: rb_fiddle_handle_s_sym(VALUE self, VALUE sym)",
      "307: {",
      "309: }",
      "311: static VALUE",
      "313: {",
      "314: #if defined(HAVE_DLERROR)",
      "315:     const char *err;",
      "",
      "[Removed Lines]",
      "308:     return fiddle_handle_sym(RTLD_NEXT, StringValueCStr(sym));",
      "312: fiddle_handle_sym(void *handle, const char *name)",
      "",
      "[Added Lines]",
      "310:     return fiddle_handle_sym(RTLD_NEXT, sym);",
      "314: fiddle_handle_sym(void *handle, VALUE symbol)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "318: # define CHECK_DLERROR",
      "319: #endif",
      "320:     void (*func)();",
      "322:     rb_secure(2);",
      "323: #ifdef HAVE_DLERROR",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:     const char *name = SafeStringValueCStr(symbol);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "367:     }",
      "368: #endif",
      "369:     if( !func ){",
      "371:     }",
      "373:     return PTR2NUM(func);",
      "",
      "[Removed Lines]",
      "370:  rb_raise(rb_eFiddleError, \"unknown symbol \\\"%s\\\"\", name);",
      "",
      "[Added Lines]",
      "373:  rb_raise(rb_eFiddleError, \"unknown symbol \\\"%\"PRIsVALUE\"\\\"\", symbol);",
      "",
      "---------------"
    ],
    "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb": [
      "File: test/fiddle/test_handle.rb -> test/fiddle/test_handle.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:     include Test::Unit::Assertions",
      "13:     def test_to_i",
      "14:       handle = Fiddle::Handle.new(LIBC_SO)",
      "15:       assert_kind_of Integer, handle.to_i",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13:     def test_safe_handle_open",
      "14:       t = Thread.new do",
      "15:         $SAFE = 1",
      "16:         Fiddle::Handle.new(LIBC_SO.taint)",
      "17:       end",
      "18:       assert_raise(SecurityError) { t.value }",
      "19:     end",
      "21:     def test_safe_function_lookup",
      "22:       t = Thread.new do",
      "23:         h = Fiddle::Handle.new(LIBC_SO)",
      "24:         $SAFE = 1",
      "25:         h[\"qsort\".taint]",
      "26:       end",
      "27:       assert_raise(SecurityError) { t.value }",
      "28:     end",
      "",
      "---------------"
    ],
    "version.h||version.h": [
      "File: version.h -> version.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #define RUBY_VERSION \"2.1.8\"",
      "2: #define RUBY_RELEASE_DATE \"2015-12-16\"",
      "5: #define RUBY_RELEASE_YEAR 2015",
      "6: #define RUBY_RELEASE_MONTH 12",
      "",
      "[Removed Lines]",
      "3: #define RUBY_PATCHLEVEL 438",
      "",
      "[Added Lines]",
      "3: #define RUBY_PATCHLEVEL 439",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0eded3c0c3f22e28842be23bdebb8eda92401e8a",
      "candidate_info": {
        "commit_hash": "0eded3c0c3f22e28842be23bdebb8eda92401e8a",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/0eded3c0c3f22e28842be23bdebb8eda92401e8a",
        "files": [
          "ChangeLog",
          "parse.y",
          "test/ruby/test_syntax.rb",
          "version.h"
        ],
        "message": "merge revision(s) r49964: [Backport #10957]\n\n\t* parse.y (primary): empty parentheses at cmdarg can be null.\n\t  [ruby-core:68477] [Bug #10957]\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@50128 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "parse.y||parse.y",
          "test/ruby/test_syntax.rb||test/ruby/test_syntax.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "parse.y||parse.y": [
          "File: parse.y -> parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "2046:    value_expr($1);",
          "2047:    value_expr($3);",
          "2048:    $$ = NEW_DOT2($1, $3);",
          "2050:        nd_type($3) == NODE_LIT && FIXNUM_P($3->nd_lit)) {",
          "2051:        deferred_nodes = list_append(deferred_nodes, $$);",
          "2052:    }",
          "",
          "[Removed Lines]",
          "2049:    if (nd_type($1) == NODE_LIT && FIXNUM_P($1->nd_lit) &&",
          "",
          "[Added Lines]",
          "2049:    if ($1 && nd_type($1) == NODE_LIT && FIXNUM_P($1->nd_lit) &&",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2060:    value_expr($1);",
          "2061:    value_expr($3);",
          "2062:    $$ = NEW_DOT3($1, $3);",
          "2064:        nd_type($3) == NODE_LIT && FIXNUM_P($3->nd_lit)) {",
          "2065:        deferred_nodes = list_append(deferred_nodes, $$);",
          "2066:    }",
          "",
          "[Removed Lines]",
          "2063:    if (nd_type($1) == NODE_LIT && FIXNUM_P($1->nd_lit) &&",
          "",
          "[Added Lines]",
          "2063:    if ($1 && nd_type($1) == NODE_LIT && FIXNUM_P($1->nd_lit) &&",
          "",
          "---------------"
        ],
        "test/ruby/test_syntax.rb||test/ruby/test_syntax.rb": [
          "File: test/ruby/test_syntax.rb -> test/ruby/test_syntax.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "408:     assert_syntax_error(code, /def n \"\\u{2208}\"; end/, bug10114)",
          "409:   end",
          "411:   private",
          "413:   def not_label(x) @result = x; @not_label ||= nil end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "411:   def test_null_range_cmdarg",
          "412:     bug10957 = '[ruby-core:68477] [Bug #10957]'",
          "413:     assert_ruby_status(['-c', '-e', 'p ()..0'], \"\", bug10957)",
          "414:     assert_ruby_status(['-c', '-e', 'p ()...0'], \"\", bug10957)",
          "415:   end",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.5\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 3",
          "9: #include \"ruby/version.h\"",
          "",
          "[Removed Lines]",
          "2: #define RUBY_RELEASE_DATE \"2015-03-30\"",
          "3: #define RUBY_PATCHLEVEL 323",
          "7: #define RUBY_RELEASE_DAY 30",
          "",
          "[Added Lines]",
          "2: #define RUBY_RELEASE_DATE \"2015-03-31\"",
          "3: #define RUBY_PATCHLEVEL 324",
          "7: #define RUBY_RELEASE_DAY 31",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b0a168d7b82d7b9e50f61fe8d7a336dc8d84316",
      "candidate_info": {
        "commit_hash": "4b0a168d7b82d7b9e50f61fe8d7a336dc8d84316",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/4b0a168d7b82d7b9e50f61fe8d7a336dc8d84316",
        "files": [
          "ChangeLog",
          "eval.c",
          "test/ruby/test_objectspace.rb",
          "thread.c",
          "version.h"
        ],
        "message": "merge revision(s) r48744,r48752: [Backport #10579]\n\n\t* eval.c (rb_frame_last_func): return the most recent frame method\n\t  name.\n\n\t* thread.c (recursive_list_access): use the last method name,\n\t  instead of the current method name which can be unset in some\n\t  cases, not to use a symbol by the invalid ID.\n\t  [ruby-core:66742] [Bug #10579]\n\n\t* thread.c (exec_recursive): use the same last method name as\n\t  recursive_push in the error message when recursive_pop failed.\n\t  [ruby-core:66742] [Bug #10579]\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@49369 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "eval.c||eval.c",
          "test/ruby/test_objectspace.rb||test/ruby/test_objectspace.rb",
          "thread.c||thread.c",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "eval.c||eval.c": [
          "File: eval.c -> eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "978:     return frame_func_id(prev_cfp);",
          "979: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "981: ID",
          "982: rb_frame_last_func(void)",
          "983: {",
          "984:     rb_thread_t *th = GET_THREAD();",
          "985:     rb_control_frame_t *cfp = th->cfp;",
          "986:     ID mid;",
          "988:     while (!(mid = frame_func_id(cfp)) &&",
          "989:     (cfp = RUBY_VM_PREVIOUS_CONTROL_FRAME(cfp),",
          "990:      !RUBY_VM_CONTROL_FRAME_STACK_OVERFLOW_P(th, cfp)));",
          "991:     return mid;",
          "992: }",
          "",
          "---------------"
        ],
        "test/ruby/test_objectspace.rb||test/ruby/test_objectspace.rb": [
          "File: test/ruby/test_objectspace.rb -> test/ruby/test_objectspace.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     }",
          "99:     End",
          "100:   end",
          "101: end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102:   def test_each_object_recursive_key",
          "103:     assert_normal_exit(<<-'end;', '[ruby-core:66742] [Bug #10579]')",
          "104:       h = {[\"foo\"]=>nil}",
          "105:       p Thread.current[:__recursive_key__]",
          "106:     end;",
          "107:   end",
          "",
          "---------------"
        ],
        "thread.c||thread.c": [
          "File: thread.c -> thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4763:     return hash;",
          "4764: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4766: ID rb_frame_last_func(void);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4772: static VALUE",
          "4774: {",
          "4775:     volatile VALUE hash = rb_thread_local_aref(rb_thread_current(), recursive_key);",
          "4777:     VALUE list;",
          "4778:     if (NIL_P(hash) || !RB_TYPE_P(hash, T_HASH)) {",
          "4779:  hash = ident_hash_new();",
          "",
          "[Removed Lines]",
          "4773: recursive_list_access(void)",
          "4776:     VALUE sym = ID2SYM(rb_frame_this_func());",
          "",
          "[Added Lines]",
          "4775: recursive_list_access(VALUE sym)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4879: recursive_pop(VALUE list, VALUE obj, VALUE paired_obj)",
          "4880: {",
          "4881:     if (paired_obj) {",
          "4882:  VALUE pair_list = rb_hash_lookup2(list, obj, Qundef);",
          "4883:  if (pair_list == Qundef) {",
          "4888:  }",
          "4889:  if (RB_TYPE_P(pair_list, T_HASH)) {",
          "4890:      rb_hash_delete(pair_list, paired_obj);",
          "4891:      if (!RHASH_EMPTY_P(pair_list)) {",
          "4893:      }",
          "4894:  }",
          "4895:     }",
          "4896:     rb_hash_delete(list, obj);",
          "4897: }",
          "4899: struct exec_recursive_params {",
          "",
          "[Removed Lines]",
          "4878: static void",
          "4884:      VALUE symname = rb_inspect(ID2SYM(rb_frame_this_func()));",
          "4885:      VALUE thrname = rb_inspect(rb_thread_current());",
          "4886:      rb_raise(rb_eTypeError, \"invalid inspect_tbl pair_list for %s in %s\",",
          "4887:        StringValuePtr(symname), StringValuePtr(thrname));",
          "",
          "[Added Lines]",
          "4879: static int",
          "4885:      return 0;",
          "4895:     return 1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4927: exec_recursive(VALUE (*func) (VALUE, VALUE, int), VALUE obj, VALUE pairid, VALUE arg, int outer)",
          "4928: {",
          "4929:     VALUE result = Qundef;",
          "4930:     struct exec_recursive_params p;",
          "4931:     int outermost;",
          "4933:     p.objid = rb_obj_id(obj);",
          "4934:     p.obj = obj;",
          "4935:     p.pairid = pairid;",
          "",
          "[Removed Lines]",
          "4932:     p.list = recursive_list_access();",
          "",
          "[Added Lines]",
          "4929:     const ID mid = rb_frame_last_func();",
          "4930:     const VALUE sym = mid ? ID2SYM(mid) : ID2SYM(idNULL);",
          "4933:     p.list = recursive_list_access(sym);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4951:      recursive_push(p.list, ID2SYM(recursive_key), 0);",
          "4952:      recursive_push(p.list, p.objid, p.pairid);",
          "4953:      result = rb_catch_protect(p.list, exec_recursive_i, (VALUE)&p, &state);",
          "4956:      if (state) JUMP_TAG(state);",
          "4957:      if (result == p.list) {",
          "4958:   result = (*func)(obj, arg, TRUE);",
          "",
          "[Removed Lines]",
          "4954:      recursive_pop(p.list, p.objid, p.pairid);",
          "4955:      recursive_pop(p.list, ID2SYM(recursive_key), 0);",
          "",
          "[Added Lines]",
          "4955:      if (!recursive_pop(p.list, p.objid, p.pairid)) goto invalid;",
          "4956:      if (!recursive_pop(p.list, ID2SYM(recursive_key), 0)) goto invalid;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4965:   result = (*func)(obj, arg, FALSE);",
          "4966:      }",
          "4967:      POP_TAG();",
          "4969:      if (state) JUMP_TAG(state);",
          "4970:  }",
          "4971:     }",
          "",
          "[Removed Lines]",
          "4968:      recursive_pop(p.list, p.objid, p.pairid);",
          "",
          "[Added Lines]",
          "4969:      if (!recursive_pop(p.list, p.objid, p.pairid)) {",
          "4970:        invalid:",
          "4971:   rb_raise(rb_eTypeError, \"invalid inspect_tbl pair_list \"",
          "4972:     \"for %+\"PRIsVALUE\" in %+\"PRIsVALUE,",
          "4973:     sym, rb_thread_current());",
          "4974:      }",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.5\"",
          "2: #define RUBY_RELEASE_DATE \"2015-01-22\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 1",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 282",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 283",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "170f64d6ce826788d15a466268798f2b756e0fd9",
      "candidate_info": {
        "commit_hash": "170f64d6ce826788d15a466268798f2b756e0fd9",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/170f64d6ce826788d15a466268798f2b756e0fd9",
        "files": [
          "ChangeLog",
          "hash.c",
          "test/ruby/test_hash.rb",
          "version.h"
        ],
        "message": "merge revision(s) 51423,51425: [Backport #9381]\n\n\ttest_hash.rb: add assertions\n\n\t* test/ruby/test_hash.rb (test_wrapper_of_special_const): test\n  other special obejcts.  [Bug #9381]\n\t* hash.c (rb_any_hash): fix Float hash.  rb_dbl_hash() returns a\n\t  Fixnum, but not a long.  [Bug #9381]\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@51613 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "hash.c||hash.c",
          "test/ruby/test_hash.rb||test/ruby/test_hash.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "hash.c||hash.c": [
          "File: hash.c -> hash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:  if (a == Qundef) return 0;",
          "136:  if (FLONUM_P(a)) {",
          "139:  }",
          "140:  hnum = rb_objid_hash((st_index_t)a);",
          "141:     }",
          "",
          "[Removed Lines]",
          "138:      return rb_dbl_hash(rb_float_value(a));",
          "",
          "[Added Lines]",
          "138:      goto flt;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:  hnum = rb_str_hash(a);",
          "144:     }",
          "145:     else if (BUILTIN_TYPE(a) == T_FLOAT) {",
          "147:     }",
          "148:     else {",
          "149:         hval = rb_hash(a);",
          "",
          "[Removed Lines]",
          "146:  return rb_dbl_hash(rb_float_value(a));",
          "",
          "[Added Lines]",
          "146:       flt:",
          "147:  hval = rb_dbl_hash(rb_float_value(a));",
          "148:  hnum = FIX2LONG(hval);",
          "",
          "---------------"
        ],
        "test/ruby/test_hash.rb||test/ruby/test_hash.rb": [
          "File: test/ruby/test_hash.rb -> test/ruby/test_hash.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "1262:       end",
          "1263:     end",
          "1267:   end",
          "1269:   class TestSubHash < TestHash",
          "",
          "[Removed Lines]",
          "1265:     hash = {5 => bug9381}",
          "1266:     assert_equal(bug9381, hash[wrapper.new(5)])",
          "",
          "[Added Lines]",
          "1265:     bad = [",
          "1266:       5, true, false, nil,",
          "1267:       0.0, 1.72723e-77,",
          "1268:     ].select do |x|",
          "1269:       hash = {x => bug9381}",
          "1270:       hash[wrapper.new(x)] != bug9381",
          "1271:     end",
          "1272:     assert_empty(bad, bug9381)",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.7\"",
          "2: #define RUBY_RELEASE_DATE \"2015-08-17\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 8",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 395",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 396",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d76f465290769089b3c524acd4c37afe1307088b",
      "candidate_info": {
        "commit_hash": "d76f465290769089b3c524acd4c37afe1307088b",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/d76f465290769089b3c524acd4c37afe1307088b",
        "files": [
          "ChangeLog",
          "test/rinda/test_rinda.rb",
          "test/socket/test_basicsocket.rb",
          "test/socket/test_sockopt.rb",
          "version.h"
        ],
        "message": "merge revision(s) 54004: [Backport #12152]\n\n\t* test/rinda/test_rinda.rb (test_make_socket_ipv4_multicast):\n\t  The fifth argument to getsockopt(2) should be modified to\n\t  indicate the actual size of the value on return,\n\t  but not in AIX. This is a know bug. Skip related tests.\n\n\t* test/rinda/test_rinda.rb (test_ring_server_ipv4_multicast):\n\t  ditto.\n\n\t* test/rinda/test_rinda.rb (test_make_socket_unicast): ditto.\n\n\t* test/socket/test_basicsocket.rb (test_getsockopt): ditto.\n\n\t* test/socket/test_sockopt.rb (test_bool): ditto.\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@54268 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "test/rinda/test_rinda.rb||test/rinda/test_rinda.rb",
          "test/socket/test_basicsocket.rb||test/socket/test_basicsocket.rb",
          "test/socket/test_sockopt.rb||test/socket/test_sockopt.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "test/rinda/test_rinda.rb||test/rinda/test_rinda.rb": [
          "File: test/rinda/test_rinda.rb -> test/rinda/test_rinda.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "610:   def test_make_socket_ipv4_multicast",
          "611:     v4mc = @rs.make_socket('239.0.0.1')",
          "617:     end",
          "619:     assert_equal('0.0.0.0', v4mc.local_address.ip_address)",
          "",
          "[Removed Lines]",
          "613:     if Socket.const_defined?(:SO_REUSEPORT) then",
          "614:       assert(v4mc.getsockopt(:SOCKET, :SO_REUSEPORT).bool)",
          "615:     else",
          "616:       assert(v4mc.getsockopt(:SOCKET, :SO_REUSEADDR).bool)",
          "",
          "[Added Lines]",
          "613:     begin",
          "614:       if Socket.const_defined?(:SO_REUSEPORT) then",
          "615:         assert(v4mc.getsockopt(:SOCKET, :SO_REUSEPORT).bool)",
          "616:       else",
          "617:         assert(v4mc.getsockopt(:SOCKET, :SO_REUSEADDR).bool)",
          "618:       end",
          "619:     rescue TypeError",
          "620:       if /aix/ =~ RUBY_PLATFORM",
          "621:         skip \"Known bug in getsockopt(2) on AIX\"",
          "622:       end",
          "623:       raise $!",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "644:     @rs = Rinda::RingServer.new(@ts, [['239.0.0.1', '0.0.0.0']], @port)",
          "645:     v4mc = @rs.instance_variable_get('@sockets').first",
          "651:     end",
          "653:     assert_equal('0.0.0.0', v4mc.local_address.ip_address)",
          "",
          "[Removed Lines]",
          "647:     if Socket.const_defined?(:SO_REUSEPORT) then",
          "648:       assert(v4mc.getsockopt(:SOCKET, :SO_REUSEPORT).bool)",
          "649:     else",
          "650:       assert(v4mc.getsockopt(:SOCKET, :SO_REUSEADDR).bool)",
          "",
          "[Added Lines]",
          "654:     begin",
          "655:       if Socket.const_defined?(:SO_REUSEPORT) then",
          "656:         assert(v4mc.getsockopt(:SOCKET, :SO_REUSEPORT).bool)",
          "657:       else",
          "658:         assert(v4mc.getsockopt(:SOCKET, :SO_REUSEADDR).bool)",
          "659:       end",
          "660:     rescue TypeError",
          "661:       if /aix/ =~ RUBY_PLATFORM",
          "662:         skip \"Known bug in getsockopt(2) on AIX\"",
          "663:       end",
          "664:       raise $!",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "735:     v4 = @rf.make_socket('127.0.0.1')",
          "737:     assert(v4.getsockopt(:SOL_SOCKET, :SO_BROADCAST).bool)",
          "738:   end",
          "740:   def test_make_socket_ipv4_multicast",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "752:   rescue TypeError",
          "753:     if /aix/ =~ RUBY_PLATFORM",
          "754:       skip \"Known bug in getsockopt(2) on AIX\"",
          "755:     end",
          "756:     raise $!",
          "757:   ensure",
          "758:     v4.close if v4",
          "",
          "---------------"
        ],
        "test/socket/test_basicsocket.rb||test/socket/test_basicsocket.rb": [
          "File: test/socket/test_basicsocket.rb -> test/socket/test_basicsocket.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   def test_getsockopt",
          "16:     inet_stream do |s|",
          "32:       val = Object.new",
          "33:       class << val; self end.send(:define_method, :to_int) {",
          "",
          "[Removed Lines]",
          "17:       n = s.getsockopt(Socket::SOL_SOCKET, Socket::SO_TYPE)",
          "18:       assert_equal([Socket::SOCK_STREAM].pack(\"i\"), n.data)",
          "20:       n = s.getsockopt(\"SOL_SOCKET\", \"SO_TYPE\")",
          "21:       assert_equal([Socket::SOCK_STREAM].pack(\"i\"), n.data)",
          "23:       n = s.getsockopt(:SOL_SOCKET, :SO_TYPE)",
          "24:       assert_equal([Socket::SOCK_STREAM].pack(\"i\"), n.data)",
          "26:       n = s.getsockopt(:SOCKET, :TYPE)",
          "27:       assert_equal([Socket::SOCK_STREAM].pack(\"i\"), n.data)",
          "29:       n = s.getsockopt(Socket::SOL_SOCKET, Socket::SO_ERROR)",
          "30:       assert_equal([0].pack(\"i\"), n.data)",
          "",
          "[Added Lines]",
          "17:       begin",
          "18:         n = s.getsockopt(Socket::SOL_SOCKET, Socket::SO_TYPE)",
          "19:         assert_equal([Socket::SOCK_STREAM].pack(\"i\"), n.data)",
          "21:         n = s.getsockopt(\"SOL_SOCKET\", \"SO_TYPE\")",
          "22:         assert_equal([Socket::SOCK_STREAM].pack(\"i\"), n.data)",
          "24:         n = s.getsockopt(:SOL_SOCKET, :SO_TYPE)",
          "25:         assert_equal([Socket::SOCK_STREAM].pack(\"i\"), n.data)",
          "27:         n = s.getsockopt(:SOCKET, :TYPE)",
          "28:         assert_equal([Socket::SOCK_STREAM].pack(\"i\"), n.data)",
          "30:         n = s.getsockopt(Socket::SOL_SOCKET, Socket::SO_ERROR)",
          "31:         assert_equal([0].pack(\"i\"), n.data)",
          "32:       rescue Minitest::Assertion",
          "33:         s.close",
          "34:         if /aix/ =~ RUBY_PLATFORM",
          "35:           skip \"Known bug in getsockopt(2) on AIX\"",
          "36:         end",
          "37:         raise $!",
          "38:       end",
          "",
          "---------------"
        ],
        "test/socket/test_sockopt.rb||test/socket/test_sockopt.rb": [
          "File: test/socket/test_sockopt.rb -> test/socket/test_sockopt.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "23:     assert_equal(true, opt.bool)",
          "24:     opt = Socket::Option.int(:INET, :SOCKET, :KEEPALIVE, 2)",
          "25:     assert_equal(true, opt.bool)",
          "32:   end",
          "34:   def test_ipv4_multicast_loop",
          "",
          "[Removed Lines]",
          "26:     Socket.open(:INET, :STREAM) {|s|",
          "27:       s.setsockopt(Socket::Option.bool(:INET, :SOCKET, :KEEPALIVE, true))",
          "28:       assert_equal(true, s.getsockopt(Socket::SOL_SOCKET, Socket::SO_KEEPALIVE).bool)",
          "29:       s.setsockopt(Socket::Option.bool(:INET, :SOCKET, :KEEPALIVE, false))",
          "30:       assert_equal(false, s.getsockopt(Socket::SOL_SOCKET, Socket::SO_KEEPALIVE).bool)",
          "31:     }",
          "",
          "[Added Lines]",
          "26:     begin",
          "27:       Socket.open(:INET, :STREAM) {|s|",
          "28:         s.setsockopt(Socket::Option.bool(:INET, :SOCKET, :KEEPALIVE, true))",
          "29:         assert_equal(true, s.getsockopt(Socket::SOL_SOCKET, Socket::SO_KEEPALIVE).bool)",
          "30:         s.setsockopt(Socket::Option.bool(:INET, :SOCKET, :KEEPALIVE, false))",
          "31:         assert_equal(false, s.getsockopt(Socket::SOL_SOCKET, Socket::SO_KEEPALIVE).bool)",
          "32:       }",
          "33:     rescue TypeError",
          "34:       if /aix/ =~ RUBY_PLATFORM",
          "35:         skip \"Known bug in getsockopt(2) on AIX\"",
          "36:       end",
          "37:       raise $!",
          "38:     end",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.9\"",
          "2: #define RUBY_RELEASE_DATE \"2016-03-25\"",
          "5: #define RUBY_RELEASE_YEAR 2016",
          "6: #define RUBY_RELEASE_MONTH 3",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 465",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 466",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d35c9eeb3d10866b41786a4968a7baf987f43505",
      "candidate_info": {
        "commit_hash": "d35c9eeb3d10866b41786a4968a7baf987f43505",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/d35c9eeb3d10866b41786a4968a7baf987f43505",
        "files": [
          "ChangeLog",
          "configure.in",
          "version.h",
          "vm_dump.c"
        ],
        "message": "merge revision(s) 52124: [Backport #11591]\n\n\t* configure.in: check for libunwind.h, which is not available in\n\t  very old OS X SDK.  [ruby-core:71080] [Bug #11591]\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@52354 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "configure.in||configure.in",
          "version.h||version.h",
          "vm_dump.c||vm_dump.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "configure.in||configure.in": [
          "File: configure.in -> configure.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2850:     AC_CHECK_HEADERS([execinfo.h])",
          "2851:     if test \"x$ac_cv_header_execinfo_h\" = xyes; then",
          "2852:  AC_CHECK_LIB([execinfo], [backtrace])",
          "2853:     fi],",
          "2854: [*-freebsd*|x86_64-netbsd*], [",
          "2855:     AC_CHECK_HEADERS([execinfo.h])",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2853:  AC_CHECK_HEADERS([libunwind.h])",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.8\"",
          "2: #define RUBY_RELEASE_DATE \"2015-10-29\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 10",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 406",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 407",
          "",
          "---------------"
        ],
        "vm_dump.c||vm_dump.c": [
          "File: vm_dump.c -> vm_dump.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "435: # if HAVE_LIBUNWIND",
          "436: #  undef backtrace",
          "437: #  define backtrace unw_backtrace",
          "439: #  define UNW_LOCAL_ONLY",
          "440: #  include <libunwind.h>",
          "441: #  undef backtrace",
          "",
          "[Removed Lines]",
          "438: # elif defined(__APPLE__) && defined(__x86_64__)",
          "",
          "[Added Lines]",
          "438: # elif defined(__APPLE__) && defined(__x86_64__) && defined(HAVE_LIBUNWIND_H)",
          "",
          "---------------"
        ]
      }
    }
  ]
}