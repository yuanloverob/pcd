{
  "cve_id": "CVE-2018-14630",
  "cve_desc": "moodle before versions 3.5.2, 3.4.5, 3.3.8, 3.1.14 is vulnerable to an XML import of ddwtos could lead to intentional remote code execution. When importing legacy 'drag and drop into text' (ddwtos) type quiz questions, it was possible to inject and execute PHP code from within the imported questions, either intentionally or by importing questions from an untrusted source.",
  "repo": "moodle/moodle",
  "patch_hash": "cb8aefa658cf7ad8f002a480343afb2dea94cc08",
  "patch_info": {
    "commit_hash": "cb8aefa658cf7ad8f002a480343afb2dea94cc08",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/cb8aefa658cf7ad8f002a480343afb2dea94cc08",
    "files": [
      "question/type/ddwtos/questiontype.php",
      "question/type/ddwtos/tests/questiontype_test.php"
    ],
    "message": "MDL-62880 qtype_ddwtos: drop support for legacy import format\n\nIt was more than 8 years since we wrote in that format.",
    "before_after_code_files": [
      "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php",
      "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php"
    ]
  },
  "patch_diff": {
    "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php": [
      "File: question/type/ddwtos/questiontype.php -> question/type/ddwtos/questiontype.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "71:         $question->shuffleanswers = $format->trans_single(",
      "72:                 $format->getpath($data, array('#', 'shuffleanswers', 0, '#'), 1));",
      "100:         }",
      "102:         $format->import_combined_feedback($question, $data, true);",
      "",
      "[Removed Lines]",
      "74:         if (!empty($data['#']['dragbox'])) {",
      "76:             $dragboxes = $data['#']['dragbox'];",
      "77:             $question->answer = array();",
      "78:             $question->draggroup = array();",
      "79:             $question->infinite = array();",
      "81:             foreach ($data['#']['dragbox'] as $dragboxxml) {",
      "82:                 $question->choices[] = array(",
      "83:                     'answer' => $format->getpath($dragboxxml, array('#', 'text', 0, '#'), '', true),",
      "84:                     'choicegroup' => $format->getpath($dragboxxml, array('#', 'group', 0, '#'), 1),",
      "85:                     'infinite' => array_key_exists('infinite', $dragboxxml['#']),",
      "86:                 );",
      "87:             }",
      "89:         } else {",
      "91:             foreach ($data['#']['answer'] as $answerxml) {",
      "92:                 $ans = $format->import_answer($answerxml);",
      "93:                 $options = unserialize(stripslashes($ans->feedback['text']));",
      "94:                 $question->choices[] = array(",
      "95:                     'answer' => $ans->answer,",
      "96:                     'choicegroup' => $options->draggroup,",
      "97:                     'infinite' => $options->infinite,",
      "98:                 );",
      "99:             }",
      "",
      "[Added Lines]",
      "75:         $question->answer = array();",
      "76:         $question->draggroup = array();",
      "77:         $question->infinite = array();",
      "79:         foreach ($data['#']['dragbox'] as $dragboxxml) {",
      "80:             $question->choices[] = array(",
      "81:                 'answer' => $format->getpath($dragboxxml, array('#', 'text', 0, '#'), '', true),",
      "82:                 'choicegroup' => $format->getpath($dragboxxml, array('#', 'group', 0, '#'), 1),",
      "83:                 'infinite' => array_key_exists('infinite', $dragboxxml['#']),",
      "84:             );",
      "",
      "---------------"
    ],
    "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php": [
      "File: question/type/ddwtos/tests/questiontype_test.php -> question/type/ddwtos/tests/questiontype_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:         $this->assertEquals($expectedq->hint, $q->hint);",
      "244:     }",
      "439:     public function test_xml_export() {",
      "440:         $qdata = new stdClass();",
      "441:         $qdata->id = 123;",
      "",
      "[Removed Lines]",
      "246:     public function test_xml_import_legacy() {",
      "247:         $xml = '  <question type=\"ddwtos\">",
      "248:     <name>",
      "249:       <text>QDandD1 Base definition</text>",
      "250:     </name>",
      "251:     <questiontext format=\"html\">",
      "252:       <text>&lt;p&gt;Drag and drop the words from the list below to fill the blank spaces ' .",
      "253:             'and correctly complete the sentence.&lt;/p&gt; &lt;p&gt;At 25\u00b0C all aqueous basic ' .",
      "254:             'solutions have [[1]]&#160;ion concentrations less than [[8]]&lt;br /&gt;mol ' .",
      "255:             'litre&lt;sup&gt;-1&lt;/sup&gt; and pH values [[9]] than [[6]].&lt;/p&gt; ' .",
      "256:             '&lt;!--DONOTCLEAN--&gt;</text>",
      "257:     </questiontext>",
      "258:     <image></image>",
      "259:     <generalfeedback>",
      "260:       <text>&lt;p&gt;At 25 &amp;#xB0;C all aqueous basic solutions have hydrogen ion ' .",
      "261:             'concentrations less than 10&lt;sup&gt;&amp;#x2212;7&lt;/sup&gt; mol ' .",
      "262:             'litre&lt;sup&gt;&amp;#x2212;1&lt;/sup&gt; and pH values greater than 7.&lt;/p&gt; ' .",
      "263:             '&lt;p&gt;See Section 9 of S103 &lt;em class=\"italic\"&gt;Discovering ' .",
      "264:             'Science&lt;/em&gt; Block 8.&lt;/p&gt;</text>",
      "265:     </generalfeedback>",
      "266:     <defaultgrade>1</defaultgrade>",
      "267:     <penalty>0.33</penalty>",
      "268:     <hidden>0</hidden>",
      "269:     <shuffleanswers>0</shuffleanswers>",
      "270:     <shuffleanswers>false</shuffleanswers>",
      "271:     <answer>",
      "272:       <correctanswer>1</correctanswer>",
      "273:       <text>hydrogen</text>",
      "274:       <feedback>",
      "275:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
      "276:       </feedback>",
      "277:     </answer>",
      "278:     <answer>",
      "279:       <correctanswer>0</correctanswer>",
      "280:       <text>positive</text>",
      "281:       <feedback>",
      "282:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
      "283:       </feedback>",
      "284:     </answer>",
      "285:     <answer>",
      "286:       <correctanswer>0</correctanswer>",
      "287:       <text>hydroxide</text>",
      "288:       <feedback>",
      "289:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
      "290:       </feedback>",
      "291:     </answer>",
      "292:     <answer>",
      "293:       <correctanswer>0</correctanswer>",
      "294:       <text>negative</text>",
      "295:       <feedback>",
      "296:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
      "297:       </feedback>",
      "298:     </answer>",
      "299:     <answer>",
      "300:       <correctanswer>0</correctanswer>",
      "301:       <text>10&lt;sup&gt;7&lt;/sup&gt;</text>",
      "302:       <feedback>",
      "303:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
      "304:       </feedback>",
      "305:     </answer>",
      "306:     <answer>",
      "307:       <correctanswer>1</correctanswer>",
      "308:       <text>7</text>",
      "309:       <feedback>",
      "310:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
      "311:       </feedback>",
      "312:     </answer>",
      "313:     <answer>",
      "314:       <correctanswer>0</correctanswer>",
      "315:       <text>1</text>",
      "316:       <feedback>",
      "317:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
      "318:       </feedback>",
      "319:     </answer>",
      "320:     <answer>",
      "321:       <correctanswer>1</correctanswer>",
      "322:       <text>10&lt;sup&gt;-7&lt;/sup&gt;</text>",
      "323:       <feedback>",
      "324:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
      "325:       </feedback>",
      "326:     </answer>",
      "327:     <answer>",
      "328:       <correctanswer>1</correctanswer>",
      "329:       <text>greater</text>",
      "330:       <feedback>",
      "331:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"3\";s:8:\"infinite\";i:0;}</text>",
      "332:       </feedback>",
      "333:     </answer>",
      "334:     <answer>",
      "335:       <correctanswer>0</correctanswer>",
      "336:       <text>less</text>",
      "337:       <feedback>",
      "338:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"3\";s:8:\"infinite\";i:0;}</text>",
      "339:       </feedback>",
      "340:     </answer>",
      "341:     <correctfeedback>",
      "342:       <text>Your answer is correct.</text>",
      "343:     </correctfeedback>",
      "344:     <correctresponsesfeedback>1</correctresponsesfeedback>",
      "345:     <partiallycorrectfeedback>",
      "346:       <text>Your answer is partially correct.</text>",
      "347:     </partiallycorrectfeedback>",
      "348:     <incorrectfeedback>",
      "349:       <text>Your answer is incorrect.</text>",
      "350:     </incorrectfeedback>",
      "351:     <unlimited>0</unlimited>",
      "352:     <penalty>0.33</penalty>",
      "353:     <hint>",
      "354:       <statenumberofcorrectresponses>1</statenumberofcorrectresponses>",
      "355:       <clearincorrectresponses>0</clearincorrectresponses>",
      "356:       <hintcontent>",
      "357:         <text>You may wish to read&#160;Section 9 of&#160;&lt;em ' .",
      "358:             'class=\"italic\"&gt;Discovering Science&lt;/em&gt; Block 8.</text>",
      "359:       </hintcontent>",
      "360:     </hint>",
      "361:     <hint>",
      "362:       <statenumberofcorrectresponses>1</statenumberofcorrectresponses>",
      "363:       <clearincorrectresponses>1</clearincorrectresponses>",
      "364:       <hintcontent>",
      "365:         <text>Any incorrect choices&#160;will be removed before your final try.</text>",
      "366:       </hintcontent>",
      "367:     </hint>",
      "368:   </question>';",
      "369:         $xmldata = xmlize($xml);",
      "371:         $importer = new qformat_xml();",
      "372:         $q = $importer->try_importing_using_qtypes(",
      "373:                 $xmldata['question'], null, null, 'ddwtos');",
      "375:         $expectedq = new stdClass();",
      "376:         $expectedq->qtype = 'ddwtos';",
      "377:         $expectedq->name = 'QDandD1 Base definition';",
      "378:         $expectedq->questiontext = '<p>Drag and drop the words from the list below ' .",
      "379:                 'to fill the blank spaces and correctly complete the sentence.</p>' .",
      "380:                 '<p>At 25\u00b0C all aqueous basic solutions have [[1]]\u00a0ion concentrations ' .",
      "381:                 'less than [[8]]<br />mol litre<sup>-1</sup> and pH values [[9]] than [[6]].</p>' .",
      "382:                 '<!--DONOTCLEAN-->';",
      "383:         $expectedq->questiontextformat = FORMAT_HTML;",
      "384:         $expectedq->generalfeedback = '<p>At 25 &#xB0;C all aqueous basic solutions ' .",
      "385:                 'have hydrogen ion concentrations less than 10<sup>&#x2212;7</sup> ' .",
      "386:                 'mol litre<sup>&#x2212;1</sup> and pH values greater than 7.</p><p>See ' .",
      "387:                 'Section 9 of S103 <em class=\"italic\">Discovering Science</em> Block 8.</p>';",
      "388:         $expectedq->defaultmark = 1;",
      "389:         $expectedq->length = 1;",
      "390:         $expectedq->penalty = 0.3333333;",
      "392:         $expectedq->shuffleanswers = 0;",
      "393:         $expectedq->correctfeedback = array('text' => 'Your answer is correct.',",
      "394:                 'format' => FORMAT_HTML);",
      "395:         $expectedq->partiallycorrectfeedback = array(",
      "396:                 'text' => 'Your answer is partially correct.',",
      "397:                 'format' => FORMAT_HTML);",
      "398:         $expectedq->shownumcorrect = true;",
      "399:         $expectedq->incorrectfeedback = array('text' => 'Your answer is incorrect.',",
      "400:                 'format' => FORMAT_HTML);",
      "402:         $expectedq->choices = array(",
      "403:             array('answer' => array('text' => 'hydrogen',        'format' => FORMAT_PLAIN),",
      "404:                     'choicegroup' => 1, 'infinite' => false),",
      "405:             array('answer' => array('text' => 'positive',        'format' => FORMAT_PLAIN),",
      "406:                     'choicegroup' => 1, 'infinite' => false),",
      "407:             array('answer' => array('text' => 'hydroxide',       'format' => FORMAT_PLAIN),",
      "408:                     'choicegroup' => 1, 'infinite' => false),",
      "409:             array('answer' => array('text' => 'negative',        'format' => FORMAT_PLAIN),",
      "410:                     'choicegroup' => 1, 'infinite' => false),",
      "411:             array('answer' => array('text' => '10<sup>7</sup>',  'format' => FORMAT_PLAIN),",
      "412:                     'choicegroup' => 2, 'infinite' => false),",
      "413:             array('answer' => array('text' => '7',               'format' => FORMAT_PLAIN),",
      "414:                     'choicegroup' => 2, 'infinite' => false),",
      "415:             array('answer' => array('text' => '1',               'format' => FORMAT_PLAIN),",
      "416:                     'choicegroup' => 2, 'infinite' => false),",
      "417:             array('answer' => array('text' => '10<sup>-7</sup>', 'format' => FORMAT_PLAIN),",
      "418:                     'choicegroup' => 2, 'infinite' => false),",
      "419:             array('answer' => array('text' => 'greater',         'format' => FORMAT_PLAIN),",
      "420:                     'choicegroup' => 3, 'infinite' => false),",
      "421:             array('answer' => array('text' => 'less',            'format' => FORMAT_PLAIN),",
      "422:                     'choicegroup' => 3, 'infinite' => false),",
      "423:         );",
      "425:         $expectedq->hint = array(array('text' => 'You may wish to read\u00a0Section 9 of\u00a0' .",
      "426:                 '<em class=\"italic\">Discovering Science</em> Block 8.',",
      "427:                     'format' => FORMAT_HTML),",
      "428:                 array('text' => 'Any incorrect choices\u00a0will be removed before your final try.',",
      "429:                     'format' => FORMAT_HTML),",
      "430:         );",
      "431:         $expectedq->hintshownumcorrect = array(true, true);",
      "432:         $expectedq->hintclearwrong = array(false, true);",
      "434:         $this->assert(new question_check_specified_fields_expectation($expectedq), $q);",
      "435:         $this->assertEquals($expectedq->choices, $q->choices);",
      "436:         $this->assertEquals($expectedq->hint, $q->hint);",
      "437:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1796eb181bed125e2f7b3b5899f13deff3a52162",
      "candidate_info": {
        "commit_hash": "1796eb181bed125e2f7b3b5899f13deff3a52162",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/1796eb181bed125e2f7b3b5899f13deff3a52162",
        "files": [
          "question/format/xml/format.php",
          "question/format/xml/tests/xmlformat_test.php",
          "question/type/ddwtos/tests/questiontype_test.php",
          "question/type/gapselect/tests/questiontype_test.php"
        ],
        "message": "MDL-61410 question: fix unit tests failures",
        "before_after_code_files": [
          "question/format/xml/format.php||question/format/xml/format.php",
          "question/format/xml/tests/xmlformat_test.php||question/format/xml/tests/xmlformat_test.php",
          "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php",
          "question/type/gapselect/tests/questiontype_test.php||question/type/gapselect/tests/questiontype_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php"
          ],
          "candidate": [
            "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php"
          ]
        }
      },
      "candidate_diff": {
        "question/format/xml/format.php||question/format/xml/format.php": [
          "File: question/format/xml/format.php -> question/format/xml/format.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "1478:         if (core_tag_tag::is_enabled('core_question', 'question')) {",
          "1481:             if (!is_null($tagobjects)) {",
          "1486:                 if (!empty($sortedtagobjects->coursetags)) {",
          "",
          "[Removed Lines]",
          "1479:             $tagobjects = core_tag_tag::get_items_tags('core_question', 'question', $question->id);",
          "1482:                 $tagobjects = $tagobjects[$question->id];",
          "1483:                 $categorycontext = context::instance_by_id($this->category->contextid);",
          "1484:                 $sortedtagobjects = question_sort_tags($tagobjects, $categorycontext);",
          "",
          "[Added Lines]",
          "1479:             $tagobjects = core_tag_tag::get_item_tags('core_question', 'question', $question->id);",
          "1482:                 $context = context::instance_by_id($contextid);",
          "1483:                 $sortedtagobjects = question_sort_tags($tagobjects, $context, [$this->course]);",
          "",
          "---------------"
        ],
        "question/format/xml/tests/xmlformat_test.php||question/format/xml/tests/xmlformat_test.php": [
          "File: question/format/xml/tests/xmlformat_test.php -> question/format/xml/tests/xmlformat_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:     public function test_write_hint_basic() {",
          "149:         $q = $this->make_test_question();",
          "150:         $q->name = 'Short answer question';",
          "151:         $q->questiontext = 'Name an amphibian: __________';",
          "152:         $q->generalfeedback = 'Generalfeedback: frog or toad would have been OK.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:         $q->contextid = \\context_system::instance()->id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:     public function test_write_hint_with_parts() {",
          "178:         $q = $this->make_test_question();",
          "179:         $q->name = 'Matching question';",
          "180:         $q->questiontext = 'Classify the animals.';",
          "181:         $q->generalfeedback = 'Frogs and toads are amphibians, the others are mammals.';",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "180:         $q->contextid = \\context_system::instance()->id;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "329:     public function test_export_description() {",
          "330:         $qdata = new stdClass();",
          "331:         $qdata->id = 123;",
          "333:         $qdata->qtype = 'description';",
          "334:         $qdata->name = 'A description';",
          "335:         $qdata->questiontext = 'The question text.';",
          "",
          "[Removed Lines]",
          "332:         $qdata->contextid = 0;",
          "",
          "[Added Lines]",
          "334:         $qdata->contextid = \\context_system::instance()->id;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "474:     public function test_export_essay() {",
          "475:         $qdata = new stdClass();",
          "476:         $qdata->id = 123;",
          "478:         $qdata->qtype = 'essay';",
          "479:         $qdata->name = 'An essay';",
          "480:         $qdata->questiontext = 'Write something.';",
          "",
          "[Removed Lines]",
          "477:         $qdata->contextid = 0;",
          "",
          "[Added Lines]",
          "479:         $qdata->contextid = \\context_system::instance()->id;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "636:     public function test_export_match() {",
          "637:         $qdata = new stdClass();",
          "638:         $qdata->id = 123;",
          "640:         $qdata->qtype = 'match';",
          "641:         $qdata->name = 'Matching question';",
          "642:         $qdata->questiontext = 'Match the upper and lower case letters.';",
          "",
          "[Removed Lines]",
          "639:         $qdata->contextid = 0;",
          "",
          "[Added Lines]",
          "641:         $qdata->contextid = \\context_system::instance()->id;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "867:     public function test_export_multichoice() {",
          "868:         $qdata = new stdClass();",
          "869:         $qdata->id = 123;",
          "871:         $qdata->qtype = 'multichoice';",
          "872:         $qdata->name = 'Multiple choice question';",
          "873:         $qdata->questiontext = 'Which are the even numbers?';",
          "",
          "[Removed Lines]",
          "870:         $qdata->contextid = 0;",
          "",
          "[Added Lines]",
          "872:         $qdata->contextid = \\context_system::instance()->id;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1041:         $qdata = new stdClass();",
          "1042:         $qdata->id = 123;",
          "1044:         $qdata->qtype = 'numerical';",
          "1045:         $qdata->name = 'Numerical question';",
          "1046:         $qdata->questiontext = 'What is the answer?';",
          "",
          "[Removed Lines]",
          "1043:         $qdata->contextid = 0;",
          "",
          "[Added Lines]",
          "1045:         $qdata->contextid = \\context_system::instance()->id;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1170:     public function test_export_shortanswer() {",
          "1171:         $qdata = new stdClass();",
          "1172:         $qdata->id = 123;",
          "1174:         $qdata->qtype = 'shortanswer';",
          "1175:         $qdata->name = 'Short answer question';",
          "1176:         $qdata->questiontext = 'Fill in the gap in this sequence: Alpha, ________, Gamma.';",
          "",
          "[Removed Lines]",
          "1173:         $qdata->contextid = 0;",
          "",
          "[Added Lines]",
          "1175:         $qdata->contextid = \\context_system::instance()->id;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1291:     public function test_export_truefalse() {",
          "1292:         $qdata = new stdClass();",
          "1293:         $qdata->id = 12;",
          "1295:         $qdata->qtype = 'truefalse';",
          "1296:         $qdata->name = 'True false question';",
          "1297:         $qdata->questiontext = 'The answer is true.';",
          "",
          "[Removed Lines]",
          "1294:         $qdata->contextid = 0;",
          "",
          "[Added Lines]",
          "1296:         $qdata->contextid = \\context_system::instance()->id;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1456:     public function test_export_multianswer() {",
          "1457:         $qdata = test_question_maker::get_question_data('multianswer', 'twosubq');",
          "1459:         $exporter = new qformat_xml();",
          "1460:         $xml = $exporter->writequestion($qdata);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1460:         $qdata->contextid = \\context_system::instance()->id;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1487:     public function test_export_multianswer_withdollars() {",
          "1488:         $qdata = test_question_maker::get_question_data('multianswer', 'dollarsigns');",
          "1490:         $exporter = new qformat_xml();",
          "1491:         $xml = $exporter->writequestion($qdata);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1491:         $qdata->contextid = \\context_system::instance()->id;",
          "",
          "---------------"
        ],
        "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php": [
          "File: question/type/ddwtos/tests/questiontype_test.php -> question/type/ddwtos/tests/questiontype_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "439:     public function test_xml_export() {",
          "440:         $qdata = new stdClass();",
          "441:         $qdata->id = 123;",
          "443:         $qdata->qtype = 'ddwtos';",
          "444:         $qdata->name = 'A drag-and-drop question';",
          "445:         $qdata->questiontext = 'Put these in order: [[1]], [[2]], [[3]].';",
          "",
          "[Removed Lines]",
          "442:         $qdata->contextid = 0;",
          "",
          "[Added Lines]",
          "442:         $qdata->contextid = \\context_system::instance()->id;",
          "",
          "---------------"
        ],
        "question/type/gapselect/tests/questiontype_test.php||question/type/gapselect/tests/questiontype_test.php": [
          "File: question/type/gapselect/tests/questiontype_test.php -> question/type/gapselect/tests/questiontype_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:     public function test_xml_export() {",
          "243:         $qdata = new stdClass();",
          "244:         $qdata->id = 123;",
          "246:         $qdata->qtype = 'gapselect';",
          "247:         $qdata->name = 'A select missing words question';",
          "248:         $qdata->questiontext = 'Put these in order: [[1]], [[2]], [[3]].';",
          "",
          "[Removed Lines]",
          "245:         $qdata->contextid = 0;",
          "",
          "[Added Lines]",
          "245:         $qdata->contextid = \\context_system::instance()->id;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cfc4393aa689c277a27b9a040ff7dcbdac4e41dd",
      "candidate_info": {
        "commit_hash": "cfc4393aa689c277a27b9a040ff7dcbdac4e41dd",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/cfc4393aa689c277a27b9a040ff7dcbdac4e41dd",
        "files": [
          "question/type/ddwtos/questiontype.php",
          "question/type/ddwtos/tests/questiontype_test.php"
        ],
        "message": "MDL-62880 qtype_ddwtos: drop support for legacy import format\n\nIt was more than 8 years since we wrote in that format.",
        "before_after_code_files": [
          "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php",
          "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php",
            "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php"
          ],
          "candidate": [
            "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php",
            "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php"
          ]
        }
      },
      "candidate_diff": {
        "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php": [
          "File: question/type/ddwtos/questiontype.php -> question/type/ddwtos/questiontype.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:         $question->shuffleanswers = $format->trans_single(",
          "72:                 $format->getpath($data, array('#', 'shuffleanswers', 0, '#'), 1));",
          "100:         }",
          "102:         $format->import_combined_feedback($question, $data, true);",
          "",
          "[Removed Lines]",
          "74:         if (!empty($data['#']['dragbox'])) {",
          "76:             $dragboxes = $data['#']['dragbox'];",
          "77:             $question->answer = array();",
          "78:             $question->draggroup = array();",
          "79:             $question->infinite = array();",
          "81:             foreach ($data['#']['dragbox'] as $dragboxxml) {",
          "82:                 $question->choices[] = array(",
          "83:                     'answer' => $format->getpath($dragboxxml, array('#', 'text', 0, '#'), '', true),",
          "84:                     'choicegroup' => $format->getpath($dragboxxml, array('#', 'group', 0, '#'), 1),",
          "85:                     'infinite' => array_key_exists('infinite', $dragboxxml['#']),",
          "86:                 );",
          "87:             }",
          "89:         } else {",
          "91:             foreach ($data['#']['answer'] as $answerxml) {",
          "92:                 $ans = $format->import_answer($answerxml);",
          "93:                 $options = unserialize(stripslashes($ans->feedback['text']));",
          "94:                 $question->choices[] = array(",
          "95:                     'answer' => $ans->answer,",
          "96:                     'choicegroup' => $options->draggroup,",
          "97:                     'infinite' => $options->infinite,",
          "98:                 );",
          "99:             }",
          "",
          "[Added Lines]",
          "75:         $question->answer = array();",
          "76:         $question->draggroup = array();",
          "77:         $question->infinite = array();",
          "79:         foreach ($data['#']['dragbox'] as $dragboxxml) {",
          "80:             $question->choices[] = array(",
          "81:                 'answer' => $format->getpath($dragboxxml, array('#', 'text', 0, '#'), '', true),",
          "82:                 'choicegroup' => $format->getpath($dragboxxml, array('#', 'group', 0, '#'), 1),",
          "83:                 'infinite' => array_key_exists('infinite', $dragboxxml['#']),",
          "84:             );",
          "",
          "---------------"
        ],
        "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php": [
          "File: question/type/ddwtos/tests/questiontype_test.php -> question/type/ddwtos/tests/questiontype_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:         $this->assertEquals($expectedq->hint, $q->hint);",
          "244:     }",
          "439:     public function test_xml_export() {",
          "440:         $qdata = new stdClass();",
          "441:         $qdata->id = 123;",
          "",
          "[Removed Lines]",
          "246:     public function test_xml_import_legacy() {",
          "247:         $xml = '  <question type=\"ddwtos\">",
          "248:     <name>",
          "249:       <text>QDandD1 Base definition</text>",
          "250:     </name>",
          "251:     <questiontext format=\"html\">",
          "252:       <text>&lt;p&gt;Drag and drop the words from the list below to fill the blank spaces ' .",
          "253:             'and correctly complete the sentence.&lt;/p&gt; &lt;p&gt;At 25\u00b0C all aqueous basic ' .",
          "254:             'solutions have [[1]]&#160;ion concentrations less than [[8]]&lt;br /&gt;mol ' .",
          "255:             'litre&lt;sup&gt;-1&lt;/sup&gt; and pH values [[9]] than [[6]].&lt;/p&gt; ' .",
          "256:             '&lt;!--DONOTCLEAN--&gt;</text>",
          "257:     </questiontext>",
          "258:     <image></image>",
          "259:     <generalfeedback>",
          "260:       <text>&lt;p&gt;At 25 &amp;#xB0;C all aqueous basic solutions have hydrogen ion ' .",
          "261:             'concentrations less than 10&lt;sup&gt;&amp;#x2212;7&lt;/sup&gt; mol ' .",
          "262:             'litre&lt;sup&gt;&amp;#x2212;1&lt;/sup&gt; and pH values greater than 7.&lt;/p&gt; ' .",
          "263:             '&lt;p&gt;See Section 9 of S103 &lt;em class=\"italic\"&gt;Discovering ' .",
          "264:             'Science&lt;/em&gt; Block 8.&lt;/p&gt;</text>",
          "265:     </generalfeedback>",
          "266:     <defaultgrade>1</defaultgrade>",
          "267:     <penalty>0.33</penalty>",
          "268:     <hidden>0</hidden>",
          "269:     <shuffleanswers>0</shuffleanswers>",
          "270:     <shuffleanswers>false</shuffleanswers>",
          "271:     <answer>",
          "272:       <correctanswer>1</correctanswer>",
          "273:       <text>hydrogen</text>",
          "274:       <feedback>",
          "275:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
          "276:       </feedback>",
          "277:     </answer>",
          "278:     <answer>",
          "279:       <correctanswer>0</correctanswer>",
          "280:       <text>positive</text>",
          "281:       <feedback>",
          "282:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
          "283:       </feedback>",
          "284:     </answer>",
          "285:     <answer>",
          "286:       <correctanswer>0</correctanswer>",
          "287:       <text>hydroxide</text>",
          "288:       <feedback>",
          "289:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
          "290:       </feedback>",
          "291:     </answer>",
          "292:     <answer>",
          "293:       <correctanswer>0</correctanswer>",
          "294:       <text>negative</text>",
          "295:       <feedback>",
          "296:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
          "297:       </feedback>",
          "298:     </answer>",
          "299:     <answer>",
          "300:       <correctanswer>0</correctanswer>",
          "301:       <text>10&lt;sup&gt;7&lt;/sup&gt;</text>",
          "302:       <feedback>",
          "303:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
          "304:       </feedback>",
          "305:     </answer>",
          "306:     <answer>",
          "307:       <correctanswer>1</correctanswer>",
          "308:       <text>7</text>",
          "309:       <feedback>",
          "310:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
          "311:       </feedback>",
          "312:     </answer>",
          "313:     <answer>",
          "314:       <correctanswer>0</correctanswer>",
          "315:       <text>1</text>",
          "316:       <feedback>",
          "317:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
          "318:       </feedback>",
          "319:     </answer>",
          "320:     <answer>",
          "321:       <correctanswer>1</correctanswer>",
          "322:       <text>10&lt;sup&gt;-7&lt;/sup&gt;</text>",
          "323:       <feedback>",
          "324:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
          "325:       </feedback>",
          "326:     </answer>",
          "327:     <answer>",
          "328:       <correctanswer>1</correctanswer>",
          "329:       <text>greater</text>",
          "330:       <feedback>",
          "331:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"3\";s:8:\"infinite\";i:0;}</text>",
          "332:       </feedback>",
          "333:     </answer>",
          "334:     <answer>",
          "335:       <correctanswer>0</correctanswer>",
          "336:       <text>less</text>",
          "337:       <feedback>",
          "338:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"3\";s:8:\"infinite\";i:0;}</text>",
          "339:       </feedback>",
          "340:     </answer>",
          "341:     <correctfeedback>",
          "342:       <text>Your answer is correct.</text>",
          "343:     </correctfeedback>",
          "344:     <correctresponsesfeedback>1</correctresponsesfeedback>",
          "345:     <partiallycorrectfeedback>",
          "346:       <text>Your answer is partially correct.</text>",
          "347:     </partiallycorrectfeedback>",
          "348:     <incorrectfeedback>",
          "349:       <text>Your answer is incorrect.</text>",
          "350:     </incorrectfeedback>",
          "351:     <unlimited>0</unlimited>",
          "352:     <penalty>0.33</penalty>",
          "353:     <hint>",
          "354:       <statenumberofcorrectresponses>1</statenumberofcorrectresponses>",
          "355:       <clearincorrectresponses>0</clearincorrectresponses>",
          "356:       <hintcontent>",
          "357:         <text>You may wish to read&#160;Section 9 of&#160;&lt;em ' .",
          "358:             'class=\"italic\"&gt;Discovering Science&lt;/em&gt; Block 8.</text>",
          "359:       </hintcontent>",
          "360:     </hint>",
          "361:     <hint>",
          "362:       <statenumberofcorrectresponses>1</statenumberofcorrectresponses>",
          "363:       <clearincorrectresponses>1</clearincorrectresponses>",
          "364:       <hintcontent>",
          "365:         <text>Any incorrect choices&#160;will be removed before your final try.</text>",
          "366:       </hintcontent>",
          "367:     </hint>",
          "368:   </question>';",
          "369:         $xmldata = xmlize($xml);",
          "371:         $importer = new qformat_xml();",
          "372:         $q = $importer->try_importing_using_qtypes(",
          "373:                 $xmldata['question'], null, null, 'ddwtos');",
          "375:         $expectedq = new stdClass();",
          "376:         $expectedq->qtype = 'ddwtos';",
          "377:         $expectedq->name = 'QDandD1 Base definition';",
          "378:         $expectedq->questiontext = '<p>Drag and drop the words from the list below ' .",
          "379:                 'to fill the blank spaces and correctly complete the sentence.</p>' .",
          "380:                 '<p>At 25\u00b0C all aqueous basic solutions have [[1]]\u00a0ion concentrations ' .",
          "381:                 'less than [[8]]<br />mol litre<sup>-1</sup> and pH values [[9]] than [[6]].</p>' .",
          "382:                 '<!--DONOTCLEAN-->';",
          "383:         $expectedq->questiontextformat = FORMAT_HTML;",
          "384:         $expectedq->generalfeedback = '<p>At 25 &#xB0;C all aqueous basic solutions ' .",
          "385:                 'have hydrogen ion concentrations less than 10<sup>&#x2212;7</sup> ' .",
          "386:                 'mol litre<sup>&#x2212;1</sup> and pH values greater than 7.</p><p>See ' .",
          "387:                 'Section 9 of S103 <em class=\"italic\">Discovering Science</em> Block 8.</p>';",
          "388:         $expectedq->defaultmark = 1;",
          "389:         $expectedq->length = 1;",
          "390:         $expectedq->penalty = 0.3333333;",
          "392:         $expectedq->shuffleanswers = 0;",
          "393:         $expectedq->correctfeedback = array('text' => 'Your answer is correct.',",
          "394:                 'format' => FORMAT_HTML);",
          "395:         $expectedq->partiallycorrectfeedback = array(",
          "396:                 'text' => 'Your answer is partially correct.',",
          "397:                 'format' => FORMAT_HTML);",
          "398:         $expectedq->shownumcorrect = true;",
          "399:         $expectedq->incorrectfeedback = array('text' => 'Your answer is incorrect.',",
          "400:                 'format' => FORMAT_HTML);",
          "402:         $expectedq->choices = array(",
          "403:             array('answer' => array('text' => 'hydrogen',        'format' => FORMAT_PLAIN),",
          "404:                     'choicegroup' => 1, 'infinite' => false),",
          "405:             array('answer' => array('text' => 'positive',        'format' => FORMAT_PLAIN),",
          "406:                     'choicegroup' => 1, 'infinite' => false),",
          "407:             array('answer' => array('text' => 'hydroxide',       'format' => FORMAT_PLAIN),",
          "408:                     'choicegroup' => 1, 'infinite' => false),",
          "409:             array('answer' => array('text' => 'negative',        'format' => FORMAT_PLAIN),",
          "410:                     'choicegroup' => 1, 'infinite' => false),",
          "411:             array('answer' => array('text' => '10<sup>7</sup>',  'format' => FORMAT_PLAIN),",
          "412:                     'choicegroup' => 2, 'infinite' => false),",
          "413:             array('answer' => array('text' => '7',               'format' => FORMAT_PLAIN),",
          "414:                     'choicegroup' => 2, 'infinite' => false),",
          "415:             array('answer' => array('text' => '1',               'format' => FORMAT_PLAIN),",
          "416:                     'choicegroup' => 2, 'infinite' => false),",
          "417:             array('answer' => array('text' => '10<sup>-7</sup>', 'format' => FORMAT_PLAIN),",
          "418:                     'choicegroup' => 2, 'infinite' => false),",
          "419:             array('answer' => array('text' => 'greater',         'format' => FORMAT_PLAIN),",
          "420:                     'choicegroup' => 3, 'infinite' => false),",
          "421:             array('answer' => array('text' => 'less',            'format' => FORMAT_PLAIN),",
          "422:                     'choicegroup' => 3, 'infinite' => false),",
          "423:         );",
          "425:         $expectedq->hint = array(array('text' => 'You may wish to read\u00a0Section 9 of\u00a0' .",
          "426:                 '<em class=\"italic\">Discovering Science</em> Block 8.',",
          "427:                     'format' => FORMAT_HTML),",
          "428:                 array('text' => 'Any incorrect choices\u00a0will be removed before your final try.',",
          "429:                     'format' => FORMAT_HTML),",
          "430:         );",
          "431:         $expectedq->hintshownumcorrect = array(true, true);",
          "432:         $expectedq->hintclearwrong = array(false, true);",
          "434:         $this->assert(new question_check_specified_fields_expectation($expectedq), $q);",
          "435:         $this->assertEquals($expectedq->choices, $q->choices);",
          "436:         $this->assertEquals($expectedq->hint, $q->hint);",
          "437:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "09cbca8566a388e8f0a1a0cfd86cd0667088ed2c",
      "candidate_info": {
        "commit_hash": "09cbca8566a388e8f0a1a0cfd86cd0667088ed2c",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/09cbca8566a388e8f0a1a0cfd86cd0667088ed2c",
        "files": [
          "question/type/ddwtos/questiontype.php",
          "question/type/ddwtos/tests/questiontype_test.php"
        ],
        "message": "MDL-62880 qtype_ddwtos: drop support for legacy import format\n\nIt was more than 8 years since we wrote in that format.",
        "before_after_code_files": [
          "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php",
          "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php",
            "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php"
          ],
          "candidate": [
            "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php",
            "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php"
          ]
        }
      },
      "candidate_diff": {
        "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php": [
          "File: question/type/ddwtos/questiontype.php -> question/type/ddwtos/questiontype.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:         $question->shuffleanswers = $format->trans_single(",
          "72:                 $format->getpath($data, array('#', 'shuffleanswers', 0, '#'), 1));",
          "100:         }",
          "102:         $format->import_combined_feedback($question, $data, true);",
          "",
          "[Removed Lines]",
          "74:         if (!empty($data['#']['dragbox'])) {",
          "76:             $dragboxes = $data['#']['dragbox'];",
          "77:             $question->answer = array();",
          "78:             $question->draggroup = array();",
          "79:             $question->infinite = array();",
          "81:             foreach ($data['#']['dragbox'] as $dragboxxml) {",
          "82:                 $question->choices[] = array(",
          "83:                     'answer' => $format->getpath($dragboxxml, array('#', 'text', 0, '#'), '', true),",
          "84:                     'choicegroup' => $format->getpath($dragboxxml, array('#', 'group', 0, '#'), 1),",
          "85:                     'infinite' => array_key_exists('infinite', $dragboxxml['#']),",
          "86:                 );",
          "87:             }",
          "89:         } else {",
          "91:             foreach ($data['#']['answer'] as $answerxml) {",
          "92:                 $ans = $format->import_answer($answerxml);",
          "93:                 $options = unserialize(stripslashes($ans->feedback['text']));",
          "94:                 $question->choices[] = array(",
          "95:                     'answer' => $ans->answer,",
          "96:                     'choicegroup' => $options->draggroup,",
          "97:                     'infinite' => $options->infinite,",
          "98:                 );",
          "99:             }",
          "",
          "[Added Lines]",
          "75:         $question->answer = array();",
          "76:         $question->draggroup = array();",
          "77:         $question->infinite = array();",
          "79:         foreach ($data['#']['dragbox'] as $dragboxxml) {",
          "80:             $question->choices[] = array(",
          "81:                 'answer' => $format->getpath($dragboxxml, array('#', 'text', 0, '#'), '', true),",
          "82:                 'choicegroup' => $format->getpath($dragboxxml, array('#', 'group', 0, '#'), 1),",
          "83:                 'infinite' => array_key_exists('infinite', $dragboxxml['#']),",
          "84:             );",
          "",
          "---------------"
        ],
        "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php": [
          "File: question/type/ddwtos/tests/questiontype_test.php -> question/type/ddwtos/tests/questiontype_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:         $this->assertEquals($expectedq->hint, $q->hint);",
          "244:     }",
          "439:     public function test_xml_export() {",
          "440:         $qdata = new stdClass();",
          "441:         $qdata->id = 123;",
          "",
          "[Removed Lines]",
          "246:     public function test_xml_import_legacy() {",
          "247:         $xml = '  <question type=\"ddwtos\">",
          "248:     <name>",
          "249:       <text>QDandD1 Base definition</text>",
          "250:     </name>",
          "251:     <questiontext format=\"html\">",
          "252:       <text>&lt;p&gt;Drag and drop the words from the list below to fill the blank spaces ' .",
          "253:             'and correctly complete the sentence.&lt;/p&gt; &lt;p&gt;At 25\u00b0C all aqueous basic ' .",
          "254:             'solutions have [[1]]&#160;ion concentrations less than [[8]]&lt;br /&gt;mol ' .",
          "255:             'litre&lt;sup&gt;-1&lt;/sup&gt; and pH values [[9]] than [[6]].&lt;/p&gt; ' .",
          "256:             '&lt;!--DONOTCLEAN--&gt;</text>",
          "257:     </questiontext>",
          "258:     <image></image>",
          "259:     <generalfeedback>",
          "260:       <text>&lt;p&gt;At 25 &amp;#xB0;C all aqueous basic solutions have hydrogen ion ' .",
          "261:             'concentrations less than 10&lt;sup&gt;&amp;#x2212;7&lt;/sup&gt; mol ' .",
          "262:             'litre&lt;sup&gt;&amp;#x2212;1&lt;/sup&gt; and pH values greater than 7.&lt;/p&gt; ' .",
          "263:             '&lt;p&gt;See Section 9 of S103 &lt;em class=\"italic\"&gt;Discovering ' .",
          "264:             'Science&lt;/em&gt; Block 8.&lt;/p&gt;</text>",
          "265:     </generalfeedback>",
          "266:     <defaultgrade>1</defaultgrade>",
          "267:     <penalty>0.33</penalty>",
          "268:     <hidden>0</hidden>",
          "269:     <shuffleanswers>0</shuffleanswers>",
          "270:     <shuffleanswers>false</shuffleanswers>",
          "271:     <answer>",
          "272:       <correctanswer>1</correctanswer>",
          "273:       <text>hydrogen</text>",
          "274:       <feedback>",
          "275:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
          "276:       </feedback>",
          "277:     </answer>",
          "278:     <answer>",
          "279:       <correctanswer>0</correctanswer>",
          "280:       <text>positive</text>",
          "281:       <feedback>",
          "282:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
          "283:       </feedback>",
          "284:     </answer>",
          "285:     <answer>",
          "286:       <correctanswer>0</correctanswer>",
          "287:       <text>hydroxide</text>",
          "288:       <feedback>",
          "289:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
          "290:       </feedback>",
          "291:     </answer>",
          "292:     <answer>",
          "293:       <correctanswer>0</correctanswer>",
          "294:       <text>negative</text>",
          "295:       <feedback>",
          "296:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
          "297:       </feedback>",
          "298:     </answer>",
          "299:     <answer>",
          "300:       <correctanswer>0</correctanswer>",
          "301:       <text>10&lt;sup&gt;7&lt;/sup&gt;</text>",
          "302:       <feedback>",
          "303:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
          "304:       </feedback>",
          "305:     </answer>",
          "306:     <answer>",
          "307:       <correctanswer>1</correctanswer>",
          "308:       <text>7</text>",
          "309:       <feedback>",
          "310:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
          "311:       </feedback>",
          "312:     </answer>",
          "313:     <answer>",
          "314:       <correctanswer>0</correctanswer>",
          "315:       <text>1</text>",
          "316:       <feedback>",
          "317:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
          "318:       </feedback>",
          "319:     </answer>",
          "320:     <answer>",
          "321:       <correctanswer>1</correctanswer>",
          "322:       <text>10&lt;sup&gt;-7&lt;/sup&gt;</text>",
          "323:       <feedback>",
          "324:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
          "325:       </feedback>",
          "326:     </answer>",
          "327:     <answer>",
          "328:       <correctanswer>1</correctanswer>",
          "329:       <text>greater</text>",
          "330:       <feedback>",
          "331:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"3\";s:8:\"infinite\";i:0;}</text>",
          "332:       </feedback>",
          "333:     </answer>",
          "334:     <answer>",
          "335:       <correctanswer>0</correctanswer>",
          "336:       <text>less</text>",
          "337:       <feedback>",
          "338:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"3\";s:8:\"infinite\";i:0;}</text>",
          "339:       </feedback>",
          "340:     </answer>",
          "341:     <correctfeedback>",
          "342:       <text>Your answer is correct.</text>",
          "343:     </correctfeedback>",
          "344:     <correctresponsesfeedback>1</correctresponsesfeedback>",
          "345:     <partiallycorrectfeedback>",
          "346:       <text>Your answer is partially correct.</text>",
          "347:     </partiallycorrectfeedback>",
          "348:     <incorrectfeedback>",
          "349:       <text>Your answer is incorrect.</text>",
          "350:     </incorrectfeedback>",
          "351:     <unlimited>0</unlimited>",
          "352:     <penalty>0.33</penalty>",
          "353:     <hint>",
          "354:       <statenumberofcorrectresponses>1</statenumberofcorrectresponses>",
          "355:       <clearincorrectresponses>0</clearincorrectresponses>",
          "356:       <hintcontent>",
          "357:         <text>You may wish to read&#160;Section 9 of&#160;&lt;em ' .",
          "358:             'class=\"italic\"&gt;Discovering Science&lt;/em&gt; Block 8.</text>",
          "359:       </hintcontent>",
          "360:     </hint>",
          "361:     <hint>",
          "362:       <statenumberofcorrectresponses>1</statenumberofcorrectresponses>",
          "363:       <clearincorrectresponses>1</clearincorrectresponses>",
          "364:       <hintcontent>",
          "365:         <text>Any incorrect choices&#160;will be removed before your final try.</text>",
          "366:       </hintcontent>",
          "367:     </hint>",
          "368:   </question>';",
          "369:         $xmldata = xmlize($xml);",
          "371:         $importer = new qformat_xml();",
          "372:         $q = $importer->try_importing_using_qtypes(",
          "373:                 $xmldata['question'], null, null, 'ddwtos');",
          "375:         $expectedq = new stdClass();",
          "376:         $expectedq->qtype = 'ddwtos';",
          "377:         $expectedq->name = 'QDandD1 Base definition';",
          "378:         $expectedq->questiontext = '<p>Drag and drop the words from the list below ' .",
          "379:                 'to fill the blank spaces and correctly complete the sentence.</p>' .",
          "380:                 '<p>At 25\u00b0C all aqueous basic solutions have [[1]]\u00a0ion concentrations ' .",
          "381:                 'less than [[8]]<br />mol litre<sup>-1</sup> and pH values [[9]] than [[6]].</p>' .",
          "382:                 '<!--DONOTCLEAN-->';",
          "383:         $expectedq->questiontextformat = FORMAT_HTML;",
          "384:         $expectedq->generalfeedback = '<p>At 25 &#xB0;C all aqueous basic solutions ' .",
          "385:                 'have hydrogen ion concentrations less than 10<sup>&#x2212;7</sup> ' .",
          "386:                 'mol litre<sup>&#x2212;1</sup> and pH values greater than 7.</p><p>See ' .",
          "387:                 'Section 9 of S103 <em class=\"italic\">Discovering Science</em> Block 8.</p>';",
          "388:         $expectedq->defaultmark = 1;",
          "389:         $expectedq->length = 1;",
          "390:         $expectedq->penalty = 0.3333333;",
          "392:         $expectedq->shuffleanswers = 0;",
          "393:         $expectedq->correctfeedback = array('text' => 'Your answer is correct.',",
          "394:                 'format' => FORMAT_HTML);",
          "395:         $expectedq->partiallycorrectfeedback = array(",
          "396:                 'text' => 'Your answer is partially correct.',",
          "397:                 'format' => FORMAT_HTML);",
          "398:         $expectedq->shownumcorrect = true;",
          "399:         $expectedq->incorrectfeedback = array('text' => 'Your answer is incorrect.',",
          "400:                 'format' => FORMAT_HTML);",
          "402:         $expectedq->choices = array(",
          "403:             array('answer' => array('text' => 'hydrogen',        'format' => FORMAT_PLAIN),",
          "404:                     'choicegroup' => 1, 'infinite' => false),",
          "405:             array('answer' => array('text' => 'positive',        'format' => FORMAT_PLAIN),",
          "406:                     'choicegroup' => 1, 'infinite' => false),",
          "407:             array('answer' => array('text' => 'hydroxide',       'format' => FORMAT_PLAIN),",
          "408:                     'choicegroup' => 1, 'infinite' => false),",
          "409:             array('answer' => array('text' => 'negative',        'format' => FORMAT_PLAIN),",
          "410:                     'choicegroup' => 1, 'infinite' => false),",
          "411:             array('answer' => array('text' => '10<sup>7</sup>',  'format' => FORMAT_PLAIN),",
          "412:                     'choicegroup' => 2, 'infinite' => false),",
          "413:             array('answer' => array('text' => '7',               'format' => FORMAT_PLAIN),",
          "414:                     'choicegroup' => 2, 'infinite' => false),",
          "415:             array('answer' => array('text' => '1',               'format' => FORMAT_PLAIN),",
          "416:                     'choicegroup' => 2, 'infinite' => false),",
          "417:             array('answer' => array('text' => '10<sup>-7</sup>', 'format' => FORMAT_PLAIN),",
          "418:                     'choicegroup' => 2, 'infinite' => false),",
          "419:             array('answer' => array('text' => 'greater',         'format' => FORMAT_PLAIN),",
          "420:                     'choicegroup' => 3, 'infinite' => false),",
          "421:             array('answer' => array('text' => 'less',            'format' => FORMAT_PLAIN),",
          "422:                     'choicegroup' => 3, 'infinite' => false),",
          "423:         );",
          "425:         $expectedq->hint = array(array('text' => 'You may wish to read\u00a0Section 9 of\u00a0' .",
          "426:                 '<em class=\"italic\">Discovering Science</em> Block 8.',",
          "427:                     'format' => FORMAT_HTML),",
          "428:                 array('text' => 'Any incorrect choices\u00a0will be removed before your final try.',",
          "429:                     'format' => FORMAT_HTML),",
          "430:         );",
          "431:         $expectedq->hintshownumcorrect = array(true, true);",
          "432:         $expectedq->hintclearwrong = array(false, true);",
          "434:         $this->assert(new question_check_specified_fields_expectation($expectedq), $q);",
          "435:         $this->assertEquals($expectedq->choices, $q->choices);",
          "436:         $this->assertEquals($expectedq->hint, $q->hint);",
          "437:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "da1eeea0ff3d292b7669e478abc114872dd9cc8f",
      "candidate_info": {
        "commit_hash": "da1eeea0ff3d292b7669e478abc114872dd9cc8f",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/da1eeea0ff3d292b7669e478abc114872dd9cc8f",
        "files": [
          "question/type/ddwtos/questiontype.php",
          "question/type/ddwtos/tests/questiontype_test.php"
        ],
        "message": "MDL-62880 qtype_ddwtos: drop support for legacy import format\n\nIt was more than 8 years since we wrote in that format.",
        "before_after_code_files": [
          "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php",
          "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php",
            "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php"
          ],
          "candidate": [
            "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php",
            "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php"
          ]
        }
      },
      "candidate_diff": {
        "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php": [
          "File: question/type/ddwtos/questiontype.php -> question/type/ddwtos/questiontype.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:         $question->shuffleanswers = $format->trans_single(",
          "72:                 $format->getpath($data, array('#', 'shuffleanswers', 0, '#'), 1));",
          "100:         }",
          "102:         $format->import_combined_feedback($question, $data, true);",
          "",
          "[Removed Lines]",
          "74:         if (!empty($data['#']['dragbox'])) {",
          "76:             $dragboxes = $data['#']['dragbox'];",
          "77:             $question->answer = array();",
          "78:             $question->draggroup = array();",
          "79:             $question->infinite = array();",
          "81:             foreach ($data['#']['dragbox'] as $dragboxxml) {",
          "82:                 $question->choices[] = array(",
          "83:                     'answer' => $format->getpath($dragboxxml, array('#', 'text', 0, '#'), '', true),",
          "84:                     'choicegroup' => $format->getpath($dragboxxml, array('#', 'group', 0, '#'), 1),",
          "85:                     'infinite' => array_key_exists('infinite', $dragboxxml['#']),",
          "86:                 );",
          "87:             }",
          "89:         } else {",
          "91:             foreach ($data['#']['answer'] as $answerxml) {",
          "92:                 $ans = $format->import_answer($answerxml);",
          "93:                 $options = unserialize(stripslashes($ans->feedback['text']));",
          "94:                 $question->choices[] = array(",
          "95:                     'answer' => $ans->answer,",
          "96:                     'choicegroup' => $options->draggroup,",
          "97:                     'infinite' => $options->infinite,",
          "98:                 );",
          "99:             }",
          "",
          "[Added Lines]",
          "75:         $question->answer = array();",
          "76:         $question->draggroup = array();",
          "77:         $question->infinite = array();",
          "79:         foreach ($data['#']['dragbox'] as $dragboxxml) {",
          "80:             $question->choices[] = array(",
          "81:                 'answer' => $format->getpath($dragboxxml, array('#', 'text', 0, '#'), '', true),",
          "82:                 'choicegroup' => $format->getpath($dragboxxml, array('#', 'group', 0, '#'), 1),",
          "83:                 'infinite' => array_key_exists('infinite', $dragboxxml['#']),",
          "84:             );",
          "",
          "---------------"
        ],
        "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php": [
          "File: question/type/ddwtos/tests/questiontype_test.php -> question/type/ddwtos/tests/questiontype_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:         $this->assertEquals($expectedq->hint, $q->hint);",
          "244:     }",
          "439:     public function test_xml_export() {",
          "440:         $qdata = new stdClass();",
          "441:         $qdata->id = 123;",
          "",
          "[Removed Lines]",
          "246:     public function test_xml_import_legacy() {",
          "247:         $xml = '  <question type=\"ddwtos\">",
          "248:     <name>",
          "249:       <text>QDandD1 Base definition</text>",
          "250:     </name>",
          "251:     <questiontext format=\"html\">",
          "252:       <text>&lt;p&gt;Drag and drop the words from the list below to fill the blank spaces ' .",
          "253:             'and correctly complete the sentence.&lt;/p&gt; &lt;p&gt;At 25\u00b0C all aqueous basic ' .",
          "254:             'solutions have [[1]]&#160;ion concentrations less than [[8]]&lt;br /&gt;mol ' .",
          "255:             'litre&lt;sup&gt;-1&lt;/sup&gt; and pH values [[9]] than [[6]].&lt;/p&gt; ' .",
          "256:             '&lt;!--DONOTCLEAN--&gt;</text>",
          "257:     </questiontext>",
          "258:     <image></image>",
          "259:     <generalfeedback>",
          "260:       <text>&lt;p&gt;At 25 &amp;#xB0;C all aqueous basic solutions have hydrogen ion ' .",
          "261:             'concentrations less than 10&lt;sup&gt;&amp;#x2212;7&lt;/sup&gt; mol ' .",
          "262:             'litre&lt;sup&gt;&amp;#x2212;1&lt;/sup&gt; and pH values greater than 7.&lt;/p&gt; ' .",
          "263:             '&lt;p&gt;See Section 9 of S103 &lt;em class=\"italic\"&gt;Discovering ' .",
          "264:             'Science&lt;/em&gt; Block 8.&lt;/p&gt;</text>",
          "265:     </generalfeedback>",
          "266:     <defaultgrade>1</defaultgrade>",
          "267:     <penalty>0.33</penalty>",
          "268:     <hidden>0</hidden>",
          "269:     <shuffleanswers>0</shuffleanswers>",
          "270:     <shuffleanswers>false</shuffleanswers>",
          "271:     <answer>",
          "272:       <correctanswer>1</correctanswer>",
          "273:       <text>hydrogen</text>",
          "274:       <feedback>",
          "275:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
          "276:       </feedback>",
          "277:     </answer>",
          "278:     <answer>",
          "279:       <correctanswer>0</correctanswer>",
          "280:       <text>positive</text>",
          "281:       <feedback>",
          "282:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
          "283:       </feedback>",
          "284:     </answer>",
          "285:     <answer>",
          "286:       <correctanswer>0</correctanswer>",
          "287:       <text>hydroxide</text>",
          "288:       <feedback>",
          "289:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
          "290:       </feedback>",
          "291:     </answer>",
          "292:     <answer>",
          "293:       <correctanswer>0</correctanswer>",
          "294:       <text>negative</text>",
          "295:       <feedback>",
          "296:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
          "297:       </feedback>",
          "298:     </answer>",
          "299:     <answer>",
          "300:       <correctanswer>0</correctanswer>",
          "301:       <text>10&lt;sup&gt;7&lt;/sup&gt;</text>",
          "302:       <feedback>",
          "303:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
          "304:       </feedback>",
          "305:     </answer>",
          "306:     <answer>",
          "307:       <correctanswer>1</correctanswer>",
          "308:       <text>7</text>",
          "309:       <feedback>",
          "310:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
          "311:       </feedback>",
          "312:     </answer>",
          "313:     <answer>",
          "314:       <correctanswer>0</correctanswer>",
          "315:       <text>1</text>",
          "316:       <feedback>",
          "317:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
          "318:       </feedback>",
          "319:     </answer>",
          "320:     <answer>",
          "321:       <correctanswer>1</correctanswer>",
          "322:       <text>10&lt;sup&gt;-7&lt;/sup&gt;</text>",
          "323:       <feedback>",
          "324:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
          "325:       </feedback>",
          "326:     </answer>",
          "327:     <answer>",
          "328:       <correctanswer>1</correctanswer>",
          "329:       <text>greater</text>",
          "330:       <feedback>",
          "331:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"3\";s:8:\"infinite\";i:0;}</text>",
          "332:       </feedback>",
          "333:     </answer>",
          "334:     <answer>",
          "335:       <correctanswer>0</correctanswer>",
          "336:       <text>less</text>",
          "337:       <feedback>",
          "338:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"3\";s:8:\"infinite\";i:0;}</text>",
          "339:       </feedback>",
          "340:     </answer>",
          "341:     <correctfeedback>",
          "342:       <text>Your answer is correct.</text>",
          "343:     </correctfeedback>",
          "344:     <correctresponsesfeedback>1</correctresponsesfeedback>",
          "345:     <partiallycorrectfeedback>",
          "346:       <text>Your answer is partially correct.</text>",
          "347:     </partiallycorrectfeedback>",
          "348:     <incorrectfeedback>",
          "349:       <text>Your answer is incorrect.</text>",
          "350:     </incorrectfeedback>",
          "351:     <unlimited>0</unlimited>",
          "352:     <penalty>0.33</penalty>",
          "353:     <hint>",
          "354:       <statenumberofcorrectresponses>1</statenumberofcorrectresponses>",
          "355:       <clearincorrectresponses>0</clearincorrectresponses>",
          "356:       <hintcontent>",
          "357:         <text>You may wish to read&#160;Section 9 of&#160;&lt;em ' .",
          "358:             'class=\"italic\"&gt;Discovering Science&lt;/em&gt; Block 8.</text>",
          "359:       </hintcontent>",
          "360:     </hint>",
          "361:     <hint>",
          "362:       <statenumberofcorrectresponses>1</statenumberofcorrectresponses>",
          "363:       <clearincorrectresponses>1</clearincorrectresponses>",
          "364:       <hintcontent>",
          "365:         <text>Any incorrect choices&#160;will be removed before your final try.</text>",
          "366:       </hintcontent>",
          "367:     </hint>",
          "368:   </question>';",
          "369:         $xmldata = xmlize($xml);",
          "371:         $importer = new qformat_xml();",
          "372:         $q = $importer->try_importing_using_qtypes(",
          "373:                 $xmldata['question'], null, null, 'ddwtos');",
          "375:         $expectedq = new stdClass();",
          "376:         $expectedq->qtype = 'ddwtos';",
          "377:         $expectedq->name = 'QDandD1 Base definition';",
          "378:         $expectedq->questiontext = '<p>Drag and drop the words from the list below ' .",
          "379:                 'to fill the blank spaces and correctly complete the sentence.</p>' .",
          "380:                 '<p>At 25\u00b0C all aqueous basic solutions have [[1]]\u00a0ion concentrations ' .",
          "381:                 'less than [[8]]<br />mol litre<sup>-1</sup> and pH values [[9]] than [[6]].</p>' .",
          "382:                 '<!--DONOTCLEAN-->';",
          "383:         $expectedq->questiontextformat = FORMAT_HTML;",
          "384:         $expectedq->generalfeedback = '<p>At 25 &#xB0;C all aqueous basic solutions ' .",
          "385:                 'have hydrogen ion concentrations less than 10<sup>&#x2212;7</sup> ' .",
          "386:                 'mol litre<sup>&#x2212;1</sup> and pH values greater than 7.</p><p>See ' .",
          "387:                 'Section 9 of S103 <em class=\"italic\">Discovering Science</em> Block 8.</p>';",
          "388:         $expectedq->defaultmark = 1;",
          "389:         $expectedq->length = 1;",
          "390:         $expectedq->penalty = 0.3333333;",
          "392:         $expectedq->shuffleanswers = 0;",
          "393:         $expectedq->correctfeedback = array('text' => 'Your answer is correct.',",
          "394:                 'format' => FORMAT_HTML);",
          "395:         $expectedq->partiallycorrectfeedback = array(",
          "396:                 'text' => 'Your answer is partially correct.',",
          "397:                 'format' => FORMAT_HTML);",
          "398:         $expectedq->shownumcorrect = true;",
          "399:         $expectedq->incorrectfeedback = array('text' => 'Your answer is incorrect.',",
          "400:                 'format' => FORMAT_HTML);",
          "402:         $expectedq->choices = array(",
          "403:             array('answer' => array('text' => 'hydrogen',        'format' => FORMAT_PLAIN),",
          "404:                     'choicegroup' => 1, 'infinite' => false),",
          "405:             array('answer' => array('text' => 'positive',        'format' => FORMAT_PLAIN),",
          "406:                     'choicegroup' => 1, 'infinite' => false),",
          "407:             array('answer' => array('text' => 'hydroxide',       'format' => FORMAT_PLAIN),",
          "408:                     'choicegroup' => 1, 'infinite' => false),",
          "409:             array('answer' => array('text' => 'negative',        'format' => FORMAT_PLAIN),",
          "410:                     'choicegroup' => 1, 'infinite' => false),",
          "411:             array('answer' => array('text' => '10<sup>7</sup>',  'format' => FORMAT_PLAIN),",
          "412:                     'choicegroup' => 2, 'infinite' => false),",
          "413:             array('answer' => array('text' => '7',               'format' => FORMAT_PLAIN),",
          "414:                     'choicegroup' => 2, 'infinite' => false),",
          "415:             array('answer' => array('text' => '1',               'format' => FORMAT_PLAIN),",
          "416:                     'choicegroup' => 2, 'infinite' => false),",
          "417:             array('answer' => array('text' => '10<sup>-7</sup>', 'format' => FORMAT_PLAIN),",
          "418:                     'choicegroup' => 2, 'infinite' => false),",
          "419:             array('answer' => array('text' => 'greater',         'format' => FORMAT_PLAIN),",
          "420:                     'choicegroup' => 3, 'infinite' => false),",
          "421:             array('answer' => array('text' => 'less',            'format' => FORMAT_PLAIN),",
          "422:                     'choicegroup' => 3, 'infinite' => false),",
          "423:         );",
          "425:         $expectedq->hint = array(array('text' => 'You may wish to read\u00a0Section 9 of\u00a0' .",
          "426:                 '<em class=\"italic\">Discovering Science</em> Block 8.',",
          "427:                     'format' => FORMAT_HTML),",
          "428:                 array('text' => 'Any incorrect choices\u00a0will be removed before your final try.',",
          "429:                     'format' => FORMAT_HTML),",
          "430:         );",
          "431:         $expectedq->hintshownumcorrect = array(true, true);",
          "432:         $expectedq->hintclearwrong = array(false, true);",
          "434:         $this->assert(new question_check_specified_fields_expectation($expectedq), $q);",
          "435:         $this->assertEquals($expectedq->choices, $q->choices);",
          "436:         $this->assertEquals($expectedq->hint, $q->hint);",
          "437:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "be092b730910ad97fff0511e177a097ec1cc4b1c",
      "candidate_info": {
        "commit_hash": "be092b730910ad97fff0511e177a097ec1cc4b1c",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/be092b730910ad97fff0511e177a097ec1cc4b1c",
        "files": [
          "question/type/ddwtos/questiontype.php",
          "question/type/ddwtos/tests/questiontype_test.php"
        ],
        "message": "MDL-62880 qtype_ddwtos: drop support for legacy import format\n\nIt was more than 8 years since we wrote in that format.",
        "before_after_code_files": [
          "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php",
          "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php",
            "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php"
          ],
          "candidate": [
            "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php",
            "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php"
          ]
        }
      },
      "candidate_diff": {
        "question/type/ddwtos/questiontype.php||question/type/ddwtos/questiontype.php": [
          "File: question/type/ddwtos/questiontype.php -> question/type/ddwtos/questiontype.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "71:         $question->shuffleanswers = $format->trans_single(",
          "72:                 $format->getpath($data, array('#', 'shuffleanswers', 0, '#'), 1));",
          "100:         }",
          "102:         $format->import_combined_feedback($question, $data, true);",
          "",
          "[Removed Lines]",
          "74:         if (!empty($data['#']['dragbox'])) {",
          "76:             $dragboxes = $data['#']['dragbox'];",
          "77:             $question->answer = array();",
          "78:             $question->draggroup = array();",
          "79:             $question->infinite = array();",
          "81:             foreach ($data['#']['dragbox'] as $dragboxxml) {",
          "82:                 $question->choices[] = array(",
          "83:                     'answer' => $format->getpath($dragboxxml, array('#', 'text', 0, '#'), '', true),",
          "84:                     'choicegroup' => $format->getpath($dragboxxml, array('#', 'group', 0, '#'), 1),",
          "85:                     'infinite' => array_key_exists('infinite', $dragboxxml['#']),",
          "86:                 );",
          "87:             }",
          "89:         } else {",
          "91:             foreach ($data['#']['answer'] as $answerxml) {",
          "92:                 $ans = $format->import_answer($answerxml);",
          "93:                 $options = unserialize(stripslashes($ans->feedback['text']));",
          "94:                 $question->choices[] = array(",
          "95:                     'answer' => $ans->answer,",
          "96:                     'choicegroup' => $options->draggroup,",
          "97:                     'infinite' => $options->infinite,",
          "98:                 );",
          "99:             }",
          "",
          "[Added Lines]",
          "75:         $question->answer = array();",
          "76:         $question->draggroup = array();",
          "77:         $question->infinite = array();",
          "79:         foreach ($data['#']['dragbox'] as $dragboxxml) {",
          "80:             $question->choices[] = array(",
          "81:                 'answer' => $format->getpath($dragboxxml, array('#', 'text', 0, '#'), '', true),",
          "82:                 'choicegroup' => $format->getpath($dragboxxml, array('#', 'group', 0, '#'), 1),",
          "83:                 'infinite' => array_key_exists('infinite', $dragboxxml['#']),",
          "84:             );",
          "",
          "---------------"
        ],
        "question/type/ddwtos/tests/questiontype_test.php||question/type/ddwtos/tests/questiontype_test.php": [
          "File: question/type/ddwtos/tests/questiontype_test.php -> question/type/ddwtos/tests/questiontype_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "243:         $this->assertEquals($expectedq->hint, $q->hint);",
          "244:     }",
          "439:     public function test_xml_export() {",
          "440:         $qdata = new stdClass();",
          "441:         $qdata->id = 123;",
          "",
          "[Removed Lines]",
          "246:     public function test_xml_import_legacy() {",
          "247:         $xml = '  <question type=\"ddwtos\">",
          "248:     <name>",
          "249:       <text>QDandD1 Base definition</text>",
          "250:     </name>",
          "251:     <questiontext format=\"html\">",
          "252:       <text>&lt;p&gt;Drag and drop the words from the list below to fill the blank spaces ' .",
          "253:             'and correctly complete the sentence.&lt;/p&gt; &lt;p&gt;At 25\u00b0C all aqueous basic ' .",
          "254:             'solutions have [[1]]&#160;ion concentrations less than [[8]]&lt;br /&gt;mol ' .",
          "255:             'litre&lt;sup&gt;-1&lt;/sup&gt; and pH values [[9]] than [[6]].&lt;/p&gt; ' .",
          "256:             '&lt;!--DONOTCLEAN--&gt;</text>",
          "257:     </questiontext>",
          "258:     <image></image>",
          "259:     <generalfeedback>",
          "260:       <text>&lt;p&gt;At 25 &amp;#xB0;C all aqueous basic solutions have hydrogen ion ' .",
          "261:             'concentrations less than 10&lt;sup&gt;&amp;#x2212;7&lt;/sup&gt; mol ' .",
          "262:             'litre&lt;sup&gt;&amp;#x2212;1&lt;/sup&gt; and pH values greater than 7.&lt;/p&gt; ' .",
          "263:             '&lt;p&gt;See Section 9 of S103 &lt;em class=\"italic\"&gt;Discovering ' .",
          "264:             'Science&lt;/em&gt; Block 8.&lt;/p&gt;</text>",
          "265:     </generalfeedback>",
          "266:     <defaultgrade>1</defaultgrade>",
          "267:     <penalty>0.33</penalty>",
          "268:     <hidden>0</hidden>",
          "269:     <shuffleanswers>0</shuffleanswers>",
          "270:     <shuffleanswers>false</shuffleanswers>",
          "271:     <answer>",
          "272:       <correctanswer>1</correctanswer>",
          "273:       <text>hydrogen</text>",
          "274:       <feedback>",
          "275:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
          "276:       </feedback>",
          "277:     </answer>",
          "278:     <answer>",
          "279:       <correctanswer>0</correctanswer>",
          "280:       <text>positive</text>",
          "281:       <feedback>",
          "282:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
          "283:       </feedback>",
          "284:     </answer>",
          "285:     <answer>",
          "286:       <correctanswer>0</correctanswer>",
          "287:       <text>hydroxide</text>",
          "288:       <feedback>",
          "289:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
          "290:       </feedback>",
          "291:     </answer>",
          "292:     <answer>",
          "293:       <correctanswer>0</correctanswer>",
          "294:       <text>negative</text>",
          "295:       <feedback>",
          "296:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"1\";s:8:\"infinite\";i:0;}</text>",
          "297:       </feedback>",
          "298:     </answer>",
          "299:     <answer>",
          "300:       <correctanswer>0</correctanswer>",
          "301:       <text>10&lt;sup&gt;7&lt;/sup&gt;</text>",
          "302:       <feedback>",
          "303:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
          "304:       </feedback>",
          "305:     </answer>",
          "306:     <answer>",
          "307:       <correctanswer>1</correctanswer>",
          "308:       <text>7</text>",
          "309:       <feedback>",
          "310:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
          "311:       </feedback>",
          "312:     </answer>",
          "313:     <answer>",
          "314:       <correctanswer>0</correctanswer>",
          "315:       <text>1</text>",
          "316:       <feedback>",
          "317:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
          "318:       </feedback>",
          "319:     </answer>",
          "320:     <answer>",
          "321:       <correctanswer>1</correctanswer>",
          "322:       <text>10&lt;sup&gt;-7&lt;/sup&gt;</text>",
          "323:       <feedback>",
          "324:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"2\";s:8:\"infinite\";i:0;}</text>",
          "325:       </feedback>",
          "326:     </answer>",
          "327:     <answer>",
          "328:       <correctanswer>1</correctanswer>",
          "329:       <text>greater</text>",
          "330:       <feedback>",
          "331:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"3\";s:8:\"infinite\";i:0;}</text>",
          "332:       </feedback>",
          "333:     </answer>",
          "334:     <answer>",
          "335:       <correctanswer>0</correctanswer>",
          "336:       <text>less</text>",
          "337:       <feedback>",
          "338:         <text>O:8:\"stdClass\":2:{s:9:\"draggroup\";s:1:\"3\";s:8:\"infinite\";i:0;}</text>",
          "339:       </feedback>",
          "340:     </answer>",
          "341:     <correctfeedback>",
          "342:       <text>Your answer is correct.</text>",
          "343:     </correctfeedback>",
          "344:     <correctresponsesfeedback>1</correctresponsesfeedback>",
          "345:     <partiallycorrectfeedback>",
          "346:       <text>Your answer is partially correct.</text>",
          "347:     </partiallycorrectfeedback>",
          "348:     <incorrectfeedback>",
          "349:       <text>Your answer is incorrect.</text>",
          "350:     </incorrectfeedback>",
          "351:     <unlimited>0</unlimited>",
          "352:     <penalty>0.33</penalty>",
          "353:     <hint>",
          "354:       <statenumberofcorrectresponses>1</statenumberofcorrectresponses>",
          "355:       <clearincorrectresponses>0</clearincorrectresponses>",
          "356:       <hintcontent>",
          "357:         <text>You may wish to read&#160;Section 9 of&#160;&lt;em ' .",
          "358:             'class=\"italic\"&gt;Discovering Science&lt;/em&gt; Block 8.</text>",
          "359:       </hintcontent>",
          "360:     </hint>",
          "361:     <hint>",
          "362:       <statenumberofcorrectresponses>1</statenumberofcorrectresponses>",
          "363:       <clearincorrectresponses>1</clearincorrectresponses>",
          "364:       <hintcontent>",
          "365:         <text>Any incorrect choices&#160;will be removed before your final try.</text>",
          "366:       </hintcontent>",
          "367:     </hint>",
          "368:   </question>';",
          "369:         $xmldata = xmlize($xml);",
          "371:         $importer = new qformat_xml();",
          "372:         $q = $importer->try_importing_using_qtypes(",
          "373:                 $xmldata['question'], null, null, 'ddwtos');",
          "375:         $expectedq = new stdClass();",
          "376:         $expectedq->qtype = 'ddwtos';",
          "377:         $expectedq->name = 'QDandD1 Base definition';",
          "378:         $expectedq->questiontext = '<p>Drag and drop the words from the list below ' .",
          "379:                 'to fill the blank spaces and correctly complete the sentence.</p>' .",
          "380:                 '<p>At 25\u00b0C all aqueous basic solutions have [[1]]\u00a0ion concentrations ' .",
          "381:                 'less than [[8]]<br />mol litre<sup>-1</sup> and pH values [[9]] than [[6]].</p>' .",
          "382:                 '<!--DONOTCLEAN-->';",
          "383:         $expectedq->questiontextformat = FORMAT_HTML;",
          "384:         $expectedq->generalfeedback = '<p>At 25 &#xB0;C all aqueous basic solutions ' .",
          "385:                 'have hydrogen ion concentrations less than 10<sup>&#x2212;7</sup> ' .",
          "386:                 'mol litre<sup>&#x2212;1</sup> and pH values greater than 7.</p><p>See ' .",
          "387:                 'Section 9 of S103 <em class=\"italic\">Discovering Science</em> Block 8.</p>';",
          "388:         $expectedq->defaultmark = 1;",
          "389:         $expectedq->length = 1;",
          "390:         $expectedq->penalty = 0.3333333;",
          "392:         $expectedq->shuffleanswers = 0;",
          "393:         $expectedq->correctfeedback = array('text' => 'Your answer is correct.',",
          "394:                 'format' => FORMAT_HTML);",
          "395:         $expectedq->partiallycorrectfeedback = array(",
          "396:                 'text' => 'Your answer is partially correct.',",
          "397:                 'format' => FORMAT_HTML);",
          "398:         $expectedq->shownumcorrect = true;",
          "399:         $expectedq->incorrectfeedback = array('text' => 'Your answer is incorrect.',",
          "400:                 'format' => FORMAT_HTML);",
          "402:         $expectedq->choices = array(",
          "403:             array('answer' => array('text' => 'hydrogen',        'format' => FORMAT_PLAIN),",
          "404:                     'choicegroup' => 1, 'infinite' => false),",
          "405:             array('answer' => array('text' => 'positive',        'format' => FORMAT_PLAIN),",
          "406:                     'choicegroup' => 1, 'infinite' => false),",
          "407:             array('answer' => array('text' => 'hydroxide',       'format' => FORMAT_PLAIN),",
          "408:                     'choicegroup' => 1, 'infinite' => false),",
          "409:             array('answer' => array('text' => 'negative',        'format' => FORMAT_PLAIN),",
          "410:                     'choicegroup' => 1, 'infinite' => false),",
          "411:             array('answer' => array('text' => '10<sup>7</sup>',  'format' => FORMAT_PLAIN),",
          "412:                     'choicegroup' => 2, 'infinite' => false),",
          "413:             array('answer' => array('text' => '7',               'format' => FORMAT_PLAIN),",
          "414:                     'choicegroup' => 2, 'infinite' => false),",
          "415:             array('answer' => array('text' => '1',               'format' => FORMAT_PLAIN),",
          "416:                     'choicegroup' => 2, 'infinite' => false),",
          "417:             array('answer' => array('text' => '10<sup>-7</sup>', 'format' => FORMAT_PLAIN),",
          "418:                     'choicegroup' => 2, 'infinite' => false),",
          "419:             array('answer' => array('text' => 'greater',         'format' => FORMAT_PLAIN),",
          "420:                     'choicegroup' => 3, 'infinite' => false),",
          "421:             array('answer' => array('text' => 'less',            'format' => FORMAT_PLAIN),",
          "422:                     'choicegroup' => 3, 'infinite' => false),",
          "423:         );",
          "425:         $expectedq->hint = array(array('text' => 'You may wish to read\u00a0Section 9 of\u00a0' .",
          "426:                 '<em class=\"italic\">Discovering Science</em> Block 8.',",
          "427:                     'format' => FORMAT_HTML),",
          "428:                 array('text' => 'Any incorrect choices\u00a0will be removed before your final try.',",
          "429:                     'format' => FORMAT_HTML),",
          "430:         );",
          "431:         $expectedq->hintshownumcorrect = array(true, true);",
          "432:         $expectedq->hintclearwrong = array(false, true);",
          "434:         $this->assert(new question_check_specified_fields_expectation($expectedq), $q);",
          "435:         $this->assertEquals($expectedq->choices, $q->choices);",
          "436:         $this->assertEquals($expectedq->hint, $q->hint);",
          "437:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}