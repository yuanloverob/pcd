{
  "cve_id": "CVE-2017-7185",
  "cve_desc": "Use-after-free vulnerability in the mg_http_multipart_wait_for_boundary function in mongoose.c in Cesanta Mongoose Embedded Web Server Library 6.7 and earlier and Mongoose OS 1.2 and earlier allows remote attackers to cause a denial of service (crash) via a multipart/form-data POST request without a MIME boundary string.",
  "repo": "cesanta/mongoose",
  "patch_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
  "patch_info": {
    "commit_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "repo": "cesanta/mongoose",
    "commit_url": "https://github.com/cesanta/mongoose/commit/b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "files": [
      "mongoose.c"
    ],
    "message": "Fix crash in multipart handling\n\nClose cesanta/dev#6974\n\nPUBLISHED_FROM=4d4e4a46eceba10aec8dacb7f8f58bd078c92307",
    "before_after_code_files": [
      "mongoose.c||mongoose.c"
    ]
  },
  "patch_diff": {
    "mongoose.c||mongoose.c": [
      "File: mongoose.c -> mongoose.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5961:   struct mbuf *io = &c->recv_mbuf;",
      "5962:   struct mg_http_proto_data *pd = mg_http_get_proto_data(c);",
      "5964:   if ((int) io->len < pd->mp_stream.boundary_len + 2) {",
      "5965:     return 0;",
      "5966:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5964:   if (pd->mp_stream.boundary == NULL) {",
      "5965:     pd->mp_stream.state = MPS_FINALIZE;",
      "5966:     DBG((\"Invalid request: boundary not initilaized\"));",
      "5967:     return 0;",
      "5968:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "177e05deb28b8eaa5ce5d65b2bbfb8d88cc6b4f1",
      "candidate_info": {
        "commit_hash": "177e05deb28b8eaa5ce5d65b2bbfb8d88cc6b4f1",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/177e05deb28b8eaa5ce5d65b2bbfb8d88cc6b4f1",
        "files": [
          "mongoose.c"
        ],
        "message": "CC3220: AWS connection works\n\nPUBLISHED_FROM=5831462c5be0b79afff32130a1f45784f32bc524",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13699:         DBG((\"%p conn res=%d\", nc, nc->err));",
          "13700:         if (nc->err == SL_ERROR_BSD_ESECSNOVERIFY ||",
          "13703:           nc->err = 0;",
          "13704:         }",
          "13705:         if (nc->flags & MG_F_SSL && nc->err == 0) {",
          "",
          "[Removed Lines]",
          "13702:             nc->err == SL_ERROR_BSD_ESECDATEERROR) {",
          "",
          "[Added Lines]",
          "13702:             nc->err == SL_ERROR_BSD_ESECDATEERROR",
          "13703: #if SL_MAJOR_VERSION_NUM >= 2",
          "13707:             ||",
          "13708:             nc->err == SL_ERROR_BSD_ESECUNKNOWNROOTCA",
          "13709: #endif",
          "13710:             ) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "023b55f2e53ae07018921bbbc1ff1bd8a0e482d8",
      "candidate_info": {
        "commit_hash": "023b55f2e53ae07018921bbbc1ff1bd8a0e482d8",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/023b55f2e53ae07018921bbbc1ff1bd8a0e482d8",
        "files": [
          "docs/c-api/mqtt.h/struct_mg_mqtt_proto_data.md",
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "MQTT client keep alive fixes\n\n - Move keep alive management up to the Mongoose library\n - Only outgoing control messgaes should reset keepalive timer\n - Add unit test\n\nhttps://forum.mongoose-os.com/discussion/1155/mqtt-keep-alive-compliance-issue\n\nPUBLISHED_FROM=f86e30744ded53a6f7f96afec066b4ff3b4372c0",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2079:   }",
          "2080: }",
          "2083:   if (destroy_if) conn->iface->vtable->destroy_conn(conn);",
          "2084:   if (conn->proto_data != NULL && conn->proto_data_destructor != NULL) {",
          "2085:     conn->proto_data_destructor(conn->proto_data);",
          "",
          "[Removed Lines]",
          "2082: static void mg_destroy_conn(struct mg_connection *conn, int destroy_if) {",
          "",
          "[Added Lines]",
          "2082: void mg_destroy_conn(struct mg_connection *conn, int destroy_if) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "9957:   nc->handler(nc, ev, ev_data MG_UD_ARG(user_data));",
          "9959:   switch (ev) {",
          "9962:       while (1) {",
          "9963:         int len = parse_mqtt(io, &mm);",
          "",
          "[Removed Lines]",
          "9960:     case MG_EV_RECV:",
          "",
          "[Added Lines]",
          "9960:     case MG_EV_RECV: {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "9966:         mbuf_remove(io, len);",
          "9967:       }",
          "9968:       break;",
          "9969:   }",
          "9970: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9969:     }",
          "9970:     case MG_EV_POLL: {",
          "9971:       struct mg_mqtt_proto_data *pd =",
          "9972:           (struct mg_mqtt_proto_data *) nc->proto_data;",
          "9973:       double now = mg_time();",
          "9974:       if (pd->keep_alive > 0 && pd->last_control_time > 0 &&",
          "9975:           (now - pd->last_control_time) > pd->keep_alive) {",
          "9976:         LOG(LL_DEBUG, (\"Send PINGREQ\"));",
          "9977:         mg_mqtt_ping(nc);",
          "9978:       }",
          "9979:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "10008: static void mg_mqtt_prepend_header(struct mg_connection *nc, uint8_t cmd,",
          "10009:                                    uint8_t flags, size_t len) {",
          "10010:   size_t off = nc->send_mbuf.len - len;",
          "10011:   uint8_t header = cmd << 4 | (uint8_t) flags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10021:   struct mg_mqtt_proto_data *pd = (struct mg_mqtt_proto_data *) nc->proto_data;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "10026:   } while (len > 0);",
          "10028:   mbuf_insert(&nc->send_mbuf, off, buf, vlen - buf);",
          "10029: }",
          "10031: void mg_send_mqtt_handshake(struct mg_connection *nc, const char *client_id) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10041:   pd->last_control_time = mg_time();",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5106: struct mg_mqtt_proto_data {",
          "5107:   uint16_t keep_alive;",
          "5108: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5108:   double last_control_time;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ec47111d527fe02aacc15e45d8edac5ba3231b8",
      "candidate_info": {
        "commit_hash": "8ec47111d527fe02aacc15e45d8edac5ba3231b8",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/8ec47111d527fe02aacc15e45d8edac5ba3231b8",
        "files": [
          "mongoose.c"
        ],
        "message": "Fix COAP compilation\n\nPUBLISHED_FROM=0a0ef6f68d743cbba91d9ba911f1c5be69e6aac7",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11529:   return mg_coap_send_message(nc, &cm);",
          "11530: }",
          "11533:   struct mbuf *io = &nc->recv_mbuf;",
          "11534:   struct mg_coap_message cm;",
          "11535:   uint32_t parse_res;",
          "11537:   memset(&cm, 0, sizeof(cm));",
          "11541:   switch (ev) {",
          "11542:     case MG_EV_RECV:",
          "",
          "[Removed Lines]",
          "11532: static void coap_handler(struct mg_connection *nc, int ev, void *ev_data) {",
          "11539:   nc->handler(nc, ev, ev_data);",
          "",
          "[Added Lines]",
          "11532: static void coap_handler(struct mg_connection *nc, int ev,",
          "11533:                          void *ev_data MG_UD_ARG(void *user_data)) {",
          "11540:   nc->handler(nc, ev, ev_data MG_UD_ARG(user_data));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11553:       }",
          "11555:       mg_coap_free_options(&cm);",
          "",
          "[Removed Lines]",
          "11552:         nc->handler(nc, MG_COAP_EVENT_BASE + cm.msg_type, &cm);",
          "",
          "[Added Lines]",
          "11553:         nc->handler(nc, MG_COAP_EVENT_BASE + cm.msg_type,",
          "11554:                     &cm MG_UD_ARG(user_data));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd130136bcf745b7387708b7f867a1a88a82ef9e",
      "candidate_info": {
        "commit_hash": "bd130136bcf745b7387708b7f867a1a88a82ef9e",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/bd130136bcf745b7387708b7f867a1a88a82ef9e",
        "files": [
          "mongoose.c"
        ],
        "message": "Commonize arg checking in cfunctions\n\nAdd `mjs_check_arg()` which checks whether argument is provided, and\nchecks its type. It simplifies code and makes it smaller (because\nerror strings are not ad-hoc, so they are not duplicated)\n\nAs part of that, also commonize type stringifying: implement\n`mjs_stringify_type` and reimplement `mjs_typeof` on top of that.\n\nUse `mjs_check_arg()` in `mjs_string_slice()` and\n`mjs_string_char_code_at()`.\n\nPUBLISHED_FROM=0b72cf479738ff405d991cbd4bf9e75edda0f111",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3742: #if MG_ENABLE_BROADCAST",
          "3743: MG_INTERNAL void mg_socketpair_close(sock_t *sock) {",
          "3744:   while (1) {",
          "3747:     break;",
          "3748:   }",
          "3750: }",
          "3755:   sock_t rc;",
          "3759:     break;",
          "3760:   }",
          "3761:   return rc;",
          "",
          "[Removed Lines]",
          "3745:     if (closesocket(*sock) == -1 && errno == EINTR)",
          "3746:       continue;",
          "3752: MG_INTERNAL sock_t mg_socketpair_accept(sock_t sock,",
          "3753:                                      union socket_address *sa,",
          "3754:                                      socklen_t sa_len) {",
          "3756:   while(1) {",
          "3757:     if ((rc = accept(sock, &sa->sa, &sa_len)) == INVALID_SOCKET && errno == EINTR)",
          "3758:         continue;",
          "",
          "[Added Lines]",
          "3745:     if (closesocket(*sock) == -1 && errno == EINTR) continue;",
          "3751: MG_INTERNAL sock_t",
          "3752: mg_socketpair_accept(sock_t sock, union socket_address *sa, socklen_t sa_len) {",
          "3754:   while (1) {",
          "3755:     if ((rc = accept(sock, &sa->sa, &sa_len)) == INVALID_SOCKET &&",
          "3756:         errno == EINTR)",
          "3757:       continue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3783:   } else if (sock_type == SOCK_DGRAM &&",
          "3784:              (getsockname(sp[0], &sa.sa, &len) != 0 ||",
          "3785:               connect(sock, &sa.sa, len) != 0)) {",
          "3788:              INVALID_SOCKET) {",
          "3789:   } else {",
          "3790:     mg_set_close_on_exec(sp[0]);",
          "",
          "[Removed Lines]",
          "3786:   } else if ((sp[1] = (sock_type == SOCK_DGRAM ? sock",
          "3787:                                                : mg_socketpair_accept(sock, &sa, len))) ==",
          "",
          "[Added Lines]",
          "3785:   } else if ((sp[1] = (sock_type == SOCK_DGRAM ? sock : mg_socketpair_accept(",
          "3786:                                                             sock, &sa, len))) ==",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "920abd627b09dd8b07c69b964041e89d9e19c1d7",
      "candidate_info": {
        "commit_hash": "920abd627b09dd8b07c69b964041e89d9e19c1d7",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/920abd627b09dd8b07c69b964041e89d9e19c1d7",
        "files": [
          "mongoose.c"
        ],
        "message": "Minor SNTP fixes\n\nPUBLISHED_FROM=03d04996f160f777339eec9528f2f187e1051ff9",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11990:   uint32_t sec;",
          "11991:   sec = htonl((uint32_t)(mg_time() + SNTP_TIME_OFFSET));",
          "11992:   memcpy(&buf[40], &sec, sizeof(sec));",
          "",
          "[Removed Lines]",
          "11989: #ifndef MG_SNMP_NO_DELAY_CORRECTION",
          "",
          "[Added Lines]",
          "11989: #ifndef MG_SNTP_NO_DELAY_CORRECTION",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "11995:   mg_send(c, buf, sizeof(buf));",
          "11996: }",
          "11999: static uint64_t mg_calculate_delay(uint64_t t1, uint64_t t2, uint64_t t3) {",
          "12001:   uint64_t d1 = ((mg_time() + SNTP_TIME_OFFSET) * 1000000) -",
          "",
          "[Removed Lines]",
          "11998: #ifndef MG_SNMP_NO_DELAY_CORRECTION",
          "",
          "[Added Lines]",
          "11998: #ifndef MG_SNTP_NO_DELAY_CORRECTION",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "12010: MG_INTERNAL int mg_sntp_parse_reply(const char *buf, int len,",
          "12011:                                     struct mg_sntp_message *msg) {",
          "12012:   uint8_t hdr;",
          "12014:   int mode;",
          "12015:   struct timeval tv;",
          "12019:   if (len < 48) {",
          "12020:     return -1;",
          "12021:   }",
          "",
          "[Removed Lines]",
          "12013:   uint64_t orig_ts_T1, recv_ts_T2, trsm_ts_T3, delay = 0;",
          "12017:   (void) orig_ts_T1;",
          "12018:   (void) recv_ts_T2;",
          "",
          "[Added Lines]",
          "12013:   uint64_t trsm_ts_T3, delay = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "12040:   mg_get_ntp_ts(&buf[40], &trsm_ts_T3);",
          "12046: #endif",
          "12048:   mg_ntp_to_tv(trsm_ts_T3, &tv);",
          "",
          "[Removed Lines]",
          "12042: #ifndef MG_SNMP_NO_DELAY_CORRECTION",
          "12043:   mg_get_ntp_ts(&buf[24], &orig_ts_T1);",
          "12044:   mg_get_ntp_ts(&buf[32], &recv_ts_T2);",
          "12045:   delay = mg_calculate_delay(orig_ts_T1, recv_ts_T2, trsm_ts_T3);",
          "",
          "[Added Lines]",
          "12040: #ifndef MG_SNTP_NO_DELAY_CORRECTION",
          "12041:   {",
          "12042:     uint64_t orig_ts_T1, recv_ts_T2;",
          "12043:     mg_get_ntp_ts(&buf[24], &orig_ts_T1);",
          "12044:     mg_get_ntp_ts(&buf[32], &recv_ts_T2);",
          "12045:     delay = mg_calculate_delay(orig_ts_T1, recv_ts_T2, trsm_ts_T3);",
          "12046:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}