{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b6d861e523f7b34a6c9f4603a5bfe18fe323d00a",
      "candidate_info": {
        "commit_hash": "b6d861e523f7b34a6c9f4603a5bfe18fe323d00a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6d861e523f7b34a6c9f4603a5bfe18fe323d00a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c"
        ],
        "message": "Add a missing translation from table column numbers to storage table numbers while processing constraints on an UPDATE statement. Ticket [9621dd78a024d07a]\n\nFossilOrigin-Name: 361ea81ae8a13e7d2ec4c2412f30e049bb6ee320980d502c86bedc315cdd3bc0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 591973217f1caf24cde91dc15b7edca2edda05dac8ae2b2cd8d71e7aa072f7d1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1982:               addrJump = addrUniqueOk;",
          "1983:               op = OP_Eq;",
          "1984:             }",
          "1985:             sqlite3VdbeAddOp4(v, op,",
          "1986:                 regOldData+1+x, addrJump, regCmp+i, p4, P4_COLLSEQ",
          "1987:             );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1985:             x = sqlite3TableColumnToStorage(pTab, x);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "038ebf68756afa451d1b0f90d7cb89186be9edae",
      "candidate_info": {
        "commit_hash": "038ebf68756afa451d1b0f90d7cb89186be9edae",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/038ebf68756afa451d1b0f90d7cb89186be9edae",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/btree.h",
          "src/vdbe.c"
        ],
        "message": "Remove the unused P5 flag from the OP_Rewind opcode.\n\nFossilOrigin-Name: c2edbf3b8c643edcd5823eb907fd7531cf5be8a8b6a014fa1b123eb0ea3231cf",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/btree.h||src/btree.h",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f5752517f590b37bfc0267650f5800320e22a8ecaba34aa6893281ce8d268026",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5273:   return rc;",
          "5274: }",
          "",
          "[Removed Lines]",
          "5281: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "5282: void sqlite3BtreeSkipNext(BtCursor *pCur){",
          "5286:   if( ALWAYS(pCur->eState==CURSOR_VALID) ){",
          "5287:     pCur->eState = CURSOR_SKIPNEXT;",
          "5288:     pCur->skipNext = 1;",
          "5289:   }",
          "5290: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.h||src/btree.h": [
          "File: src/btree.h -> src/btree.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "301: int sqlite3BtreeInsert(BtCursor*, const BtreePayload *pPayload,",
          "302:                        int flags, int seekResult);",
          "303: int sqlite3BtreeFirst(BtCursor*, int *pRes);",
          "307: int sqlite3BtreeLast(BtCursor*, int *pRes);",
          "308: int sqlite3BtreeNext(BtCursor*, int flags);",
          "309: int sqlite3BtreeEof(BtCursor*);",
          "",
          "[Removed Lines]",
          "304: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "305: void sqlite3BtreeSkipNext(BtCursor*);",
          "306: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5136:   int res;",
          "5138:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "5139:   pC = p->apCsr[pOp->p1];",
          "5140:   assert( pC!=0 );",
          "5141:   assert( isSorter(pC)==(pOp->opcode==OP_SorterSort) );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5135:   assert( pOp->p5==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5150:     pCrsr = pC->uc.pCursor;",
          "5151:     assert( pCrsr );",
          "5152:     rc = sqlite3BtreeFirst(pCrsr, &res);",
          "5156:     pC->deferredMoveto = 0;",
          "5157:     pC->cacheStatus = CACHE_STALE;",
          "5158:   }",
          "",
          "[Removed Lines]",
          "5153: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "5154:     if( pOp->p5 ) sqlite3BtreeSkipNext(pCrsr);",
          "5155: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d79967adbe9c9aab0295d613030b328178ace9c2",
      "candidate_info": {
        "commit_hash": "d79967adbe9c9aab0295d613030b328178ace9c2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d79967adbe9c9aab0295d613030b328178ace9c2",
        "files": [
          "ext/fts3/fts3.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid a harmless zero offset of a null pointer in FTS3, so as to not provoke unnecessary warnings from run-time checkers.\n\nFossilOrigin-Name: 85d95abec4a596eb3ffd2ea19b4067dc1a6970264222ed5d69e75764ac21597c",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4538:   u8 *pbEof",
          "4539: ){",
          "4543:   if( pDL->pNextDocid ){",
          "4544:     pIter = pDL->pNextDocid;",
          "4545:   }else{",
          "4546:     pIter = pDL->aAll;",
          "4547:   }",
          "4552:   }else{",
          "",
          "[Removed Lines]",
          "4549:   if( pIter>=pEnd ){",
          "",
          "[Added Lines]",
          "4545:     assert( pDL->aAll!=0 || pIter==0 );",
          "4550:   if( pIter==0 || pIter>=(pEnd = pDL->aAll + pDL->nAll) ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3ce804e99bbef83d49ec309157448a7c1422725606516cef904e6122aadd3922",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eacc8816dc4366ec4dfff5287238292d7b50546e",
      "candidate_info": {
        "commit_hash": "eacc8816dc4366ec4dfff5287238292d7b50546e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/eacc8816dc4366ec4dfff5287238292d7b50546e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vacuum.c",
          "test/e_vacuum.test"
        ],
        "message": "Minor fixes to requirements marks.\n\nFossilOrigin-Name: 02ebc60b9bbc1736f4989eb56f8d31ca97fe90c930841d10986c618381ceb8b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vacuum.c||src/vacuum.c",
          "test/e_vacuum.test||test/e_vacuum.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4cef609d61de272cfdc2b39e1d49c7cd56ec834086bd63095116ff98f4d402bd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   if( !db->autoCommit ){",
          "165:     sqlite3SetString(pzErrMsg, db, \"cannot VACUUM from within a transaction\");",
          "167:   }",
          "168:   if( db->nVdbeActive>1 ){",
          "169:     sqlite3SetString(pzErrMsg, db,\"cannot VACUUM - SQL statements in progress\");",
          "171:   }",
          "172:   saved_openFlags = db->openFlags;",
          "173:   if( pOut ){",
          "",
          "[Removed Lines]",
          "166:     return SQLITE_ERROR;",
          "170:     return SQLITE_ERROR;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/e_vacuum.test||test/e_vacuum.test": [
          "File: test/e_vacuum.test -> test/e_vacuum.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "286:   SELECT rowid, x FROM t5;",
          "287: } {1 x 3 z}",
          "292: #",
          "293: do_execsql_test  e_vacuum-3.2.1.1 { BEGIN } {}",
          "294: do_catchsql_test e_vacuum-3.2.1.2 {",
          "",
          "[Removed Lines]",
          "289: # EVIDENCE-OF: R-49563-33883 A VACUUM will fail if there is an open",
          "290: # transaction, or if there are one or more active SQL statements when it",
          "291: # is run.",
          "",
          "[Added Lines]",
          "289: # EVIDENCE-OF: R-12218-18073 A VACUUM will fail if there is an open",
          "290: # transaction on the database connection that is attempting to run the",
          "291: # VACUUM.",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4245e0456d8387d867a73ab3d986aabcf3725ff2",
      "candidate_info": {
        "commit_hash": "4245e0456d8387d867a73ab3d986aabcf3725ff2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4245e0456d8387d867a73ab3d986aabcf3725ff2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/altertab3.test"
        ],
        "message": "Fix a minor error in a test script, and harmless compiler warnings in the CLI code.\n\nFossilOrigin-Name: eaa34626e497d3af132dd8f13eddbbda89365d369ed43212a5f788175b3d6198",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ebb81dad1f43dac4636cd44d4055d1d4b198c675f73e23c5a2d8d992ae27fe1f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "6562:     char *z = azArg[i];",
          "6563:     int n;",
          "6564:     if( z[0]=='-' && z[1]=='-' ) z++;",
          "6566:     if( n<=17 && memcmp(\"-freelist-corrupt\", z, n)==0 ){",
          "6567:       bFreelist = 0;",
          "6568:     }else",
          "",
          "[Removed Lines]",
          "6565:     n = strlen(z);",
          "",
          "[Added Lines]",
          "6565:     n = strlen30(z);",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:   db2 eval { INSERT INTO t2 VALUES (1), (2), (3) }",
          "205:   db close",
          "206: } {}",
          "208: #-------------------------------------------------------------------------",
          "209: reset_db",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: db2 close",
          "",
          "---------------"
        ]
      }
    }
  ]
}