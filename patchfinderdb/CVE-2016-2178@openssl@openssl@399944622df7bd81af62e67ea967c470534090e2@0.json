{
  "cve_id": "CVE-2016-2178",
  "cve_desc": "The dsa_sign_setup function in crypto/dsa/dsa_ossl.c in OpenSSL through 1.0.2h does not properly ensure the use of constant-time operations, which makes it easier for local users to discover a DSA private key via a timing side-channel attack.",
  "repo": "openssl/openssl",
  "patch_hash": "399944622df7bd81af62e67ea967c470534090e2",
  "patch_info": {
    "commit_hash": "399944622df7bd81af62e67ea967c470534090e2",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/399944622df7bd81af62e67ea967c470534090e2",
    "files": [
      "crypto/dsa/dsa_ossl.c"
    ],
    "message": "Fix DSA, preserve BN_FLG_CONSTTIME\n\nOperations in the DSA signing algorithm should run in constant time in\norder to avoid side channel attacks. A flaw in the OpenSSL DSA\nimplementation means that a non-constant time codepath is followed for\ncertain operations. This has been demonstrated through a cache-timing\nattack to be sufficient for an attacker to recover the private DSA key.\n\nCVE-2016-2178\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
    "before_after_code_files": [
      "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c"
    ]
  },
  "patch_diff": {
    "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c": [
      "File: crypto/dsa/dsa_ossl.c -> crypto/dsa/dsa_ossl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "204:             goto err;",
      "205:     } while (BN_is_zero(k));",
      "211:     if (dsa->flags & DSA_FLAG_CACHE_MONT_P) {",
      "212:         if (!BN_MONT_CTX_set_locked(&dsa->method_mont_p,",
      "213:                                     dsa->lock, dsa->p, ctx))",
      "",
      "[Removed Lines]",
      "207:     if ((dsa->flags & DSA_FLAG_NO_EXP_CONSTTIME) == 0) {",
      "208:         BN_set_flags(k, BN_FLG_CONSTTIME);",
      "209:     }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "238:     } else {",
      "239:         K = k;",
      "240:     }",
      "241:     DSA_BN_MOD_EXP(goto err, dsa, r, dsa->g, K, dsa->p, ctx,",
      "242:                    dsa->method_mont_p);",
      "243:     if (!BN_mod(r, r, dsa->q, ctx))",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "238:     if ((dsa->flags & DSA_FLAG_NO_EXP_CONSTTIME) == 0) {",
      "239:         BN_set_flags(K, BN_FLG_CONSTTIME);",
      "240:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5584f65a1027b06fe0cfc4be28d1a232cf180e42",
      "candidate_info": {
        "commit_hash": "5584f65a1027b06fe0cfc4be28d1a232cf180e42",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5584f65a1027b06fe0cfc4be28d1a232cf180e42",
        "files": [
          "CHANGES",
          "crypto/dh/dh_key.c",
          "crypto/dsa/dsa_key.c",
          "crypto/dsa/dsa_ossl.c",
          "crypto/rsa/rsa_crpt.c",
          "crypto/rsa/rsa_gen.c",
          "crypto/rsa/rsa_ossl.c",
          "include/openssl/dh.h",
          "include/openssl/dsa.h",
          "include/openssl/rsa.h",
          "test/dhtest.c",
          "test/dsatest.c",
          "test/rsa_test.c"
        ],
        "message": "Deprecate the flags that switch off constant time\n\nThe flags RSA_FLAG_NO_CONSTTIME, DSA_FLAG_NO_EXP_CONSTTIME and\nDH_FLAG_NO_EXP_CONSTTIME which previously provided the ability to switch\noff the constant time implementation for RSA, DSA and DH have been made\nno-ops and deprecated.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "crypto/dh/dh_key.c||crypto/dh/dh_key.c",
          "crypto/dsa/dsa_key.c||crypto/dsa/dsa_key.c",
          "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c",
          "crypto/rsa/rsa_crpt.c||crypto/rsa/rsa_crpt.c",
          "crypto/rsa/rsa_gen.c||crypto/rsa/rsa_gen.c",
          "crypto/rsa/rsa_ossl.c||crypto/rsa/rsa_ossl.c",
          "include/openssl/dh.h||include/openssl/dh.h",
          "include/openssl/dsa.h||include/openssl/dsa.h",
          "include/openssl/rsa.h||include/openssl/rsa.h",
          "test/dhtest.c||test/dhtest.c",
          "test/dsatest.c||test/dsatest.c",
          "test/rsa_test.c||test/rsa_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c"
          ],
          "candidate": [
            "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/dh/dh_key.c||crypto/dh/dh_key.c": [
          "File: crypto/dh/dh_key.c -> crypto/dh/dh_key.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:     }",
          "115:     {",
          "128:         if (!dh->meth->bn_mod_exp(dh, pub_key, dh->g, prk, dh->p, ctx, mont)) {",
          "130:             goto err;",
          "131:         }",
          "134:     }",
          "136:     dh->pub_key = pub_key;",
          "",
          "[Removed Lines]",
          "116:         BIGNUM *local_prk = NULL;",
          "117:         BIGNUM *prk;",
          "119:         if ((dh->flags & DH_FLAG_NO_EXP_CONSTTIME) == 0) {",
          "120:             local_prk = prk = BN_new();",
          "121:             if (local_prk == NULL)",
          "122:                 goto err;",
          "123:             BN_with_flags(prk, priv_key, BN_FLG_CONSTTIME);",
          "124:         } else {",
          "125:             prk = priv_key;",
          "126:         }",
          "129:             BN_free(local_prk);",
          "133:         BN_free(local_prk);",
          "",
          "[Added Lines]",
          "116:         BIGNUM *prk = BN_new();",
          "118:         if (prk == NULL)",
          "119:             goto err;",
          "120:         BN_with_flags(prk, priv_key, BN_FLG_CONSTTIME);",
          "123:             BN_free(prk);",
          "127:         BN_free(prk);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "175:     if (dh->flags & DH_FLAG_CACHE_MONT_P) {",
          "176:         mont = BN_MONT_CTX_set_locked(&dh->method_mont_p,",
          "177:                                       dh->lock, dh->p, ctx);",
          "182:         if (!mont)",
          "183:             goto err;",
          "184:     }",
          "",
          "[Removed Lines]",
          "178:         if ((dh->flags & DH_FLAG_NO_EXP_CONSTTIME) == 0) {",
          "180:             BN_set_flags(dh->priv_key, BN_FLG_CONSTTIME);",
          "181:         }",
          "",
          "[Added Lines]",
          "172:         BN_set_flags(dh->priv_key, BN_FLG_CONSTTIME);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:                          const BIGNUM *a, const BIGNUM *p,",
          "208:                          const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)",
          "209: {",
          "219: }",
          "221: static int dh_init(DH *dh)",
          "",
          "[Removed Lines]",
          "214:     if (bn_get_top(a) == 1 && ((dh->flags & DH_FLAG_NO_EXP_CONSTTIME) != 0)) {",
          "215:         BN_ULONG A = bn_get_words(a)[0];",
          "216:         return BN_mod_exp_mont_word(r, A, p, m, ctx, m_ctx);",
          "217:     } else",
          "218:         return BN_mod_exp_mont(r, a, p, m, ctx, m_ctx);",
          "",
          "[Added Lines]",
          "201:     return BN_mod_exp_mont(r, a, p, m, ctx, m_ctx);",
          "",
          "---------------"
        ],
        "crypto/dsa/dsa_key.c||crypto/dsa/dsa_key.c": [
          "File: crypto/dsa/dsa_key.c -> crypto/dsa/dsa_key.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:         pub_key = dsa->pub_key;",
          "52:     {",
          "65:         if (!BN_mod_exp(pub_key, dsa->g, prk, dsa->p, ctx)) {",
          "67:             goto err;",
          "68:         }",
          "71:     }",
          "73:     dsa->priv_key = priv_key;",
          "",
          "[Removed Lines]",
          "53:         BIGNUM *local_prk = NULL;",
          "54:         BIGNUM *prk;",
          "56:         if ((dsa->flags & DSA_FLAG_NO_EXP_CONSTTIME) == 0) {",
          "57:             local_prk = prk = BN_new();",
          "58:             if (local_prk == NULL)",
          "59:                 goto err;",
          "60:             BN_with_flags(prk, priv_key, BN_FLG_CONSTTIME);",
          "61:         } else {",
          "62:             prk = priv_key;",
          "63:         }",
          "66:             BN_free(local_prk);",
          "70:         BN_free(local_prk);",
          "",
          "[Added Lines]",
          "53:         BIGNUM *prk = BN_new();",
          "55:         if (prk == NULL)",
          "56:             goto err;",
          "57:         BN_with_flags(prk, priv_key, BN_FLG_CONSTTIME);",
          "60:             BN_free(prk);",
          "64:         BN_free(prk);",
          "",
          "---------------"
        ],
        "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c": [
          "File: crypto/dsa/dsa_ossl.c -> crypto/dsa/dsa_ossl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:                           const unsigned char *dgst, int dlen)",
          "136: {",
          "137:     BN_CTX *ctx = NULL;",
          "139:     int ret = 0;",
          "141:     if (!dsa->p || !dsa->q || !dsa->g) {",
          "",
          "[Removed Lines]",
          "138:     BIGNUM *k, *kq, *K, *kinv = NULL, *r = *rp;",
          "",
          "[Added Lines]",
          "138:     BIGNUM *k, *kq, *kinv = NULL, *r = *rp;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "190:         if (!BN_add(kq, kq, dsa->q))",
          "191:             goto err;",
          "200:     }",
          "206:     if ((dsa)->meth->bn_mod_exp != NULL) {",
          "208:                                        dsa->method_mont_p))",
          "209:                 goto err;",
          "210:     } else {",
          "212:                 goto err;",
          "213:     }",
          "",
          "[Removed Lines]",
          "179:     if ((dsa->flags & DSA_FLAG_NO_EXP_CONSTTIME) == 0) {",
          "180:         if (!BN_copy(kq, k))",
          "181:             goto err;",
          "192:         if (BN_num_bits(kq) <= BN_num_bits(dsa->q)) {",
          "193:             if (!BN_add(kq, kq, dsa->q))",
          "194:                 goto err;",
          "195:         }",
          "197:         K = kq;",
          "198:     } else {",
          "199:         K = k;",
          "202:     if ((dsa->flags & DSA_FLAG_NO_EXP_CONSTTIME) == 0) {",
          "203:         BN_set_flags(K, BN_FLG_CONSTTIME);",
          "204:     }",
          "207:             if (!dsa->meth->bn_mod_exp(dsa, r, dsa->g, K, dsa->p, ctx,",
          "211:             if (!BN_mod_exp_mont(r, dsa->g, K, dsa->p, ctx, dsa->method_mont_p))",
          "",
          "[Added Lines]",
          "179:     if (!BN_copy(kq, k))",
          "180:         goto err;",
          "189:     if (!BN_add(kq, kq, dsa->q))",
          "190:         goto err;",
          "191:     if (BN_num_bits(kq) <= BN_num_bits(dsa->q)) {",
          "196:     BN_set_flags(kq, BN_FLG_CONSTTIME);",
          "199:             if (!dsa->meth->bn_mod_exp(dsa, r, dsa->g, kq, dsa->p, ctx,",
          "203:             if (!BN_mod_exp_mont(r, dsa->g, kq, dsa->p, ctx, dsa->method_mont_p))",
          "",
          "---------------"
        ],
        "crypto/rsa/rsa_crpt.c||crypto/rsa/rsa_crpt.c": [
          "File: crypto/rsa/rsa_crpt.c -> crypto/rsa/rsa_crpt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:     }",
          "149:     {",
          "161:         }",
          "163:         ret = BN_BLINDING_create_param(NULL, e, n, ctx, rsa->meth->bn_mod_exp,",
          "164:                                        rsa->_method_mod_n);",
          "167:     }",
          "168:     if (ret == NULL) {",
          "169:         RSAerr(RSA_F_RSA_SETUP_BLINDING, ERR_R_BN_LIB);",
          "",
          "[Removed Lines]",
          "150:         BIGNUM *local_n = NULL, *n;",
          "151:         if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME)) {",
          "153:             local_n = n = BN_new();",
          "154:             if (local_n == NULL) {",
          "155:                 RSAerr(RSA_F_RSA_SETUP_BLINDING, ERR_R_MALLOC_FAILURE);",
          "156:                 goto err;",
          "157:             }",
          "158:             BN_with_flags(n, rsa->n, BN_FLG_CONSTTIME);",
          "159:         } else {",
          "160:             n = rsa->n;",
          "166:         BN_free(local_n);",
          "",
          "[Added Lines]",
          "150:         BIGNUM *n = BN_new();",
          "152:         if (n == NULL) {",
          "153:             RSAerr(RSA_F_RSA_SETUP_BLINDING, ERR_R_MALLOC_FAILURE);",
          "154:             goto err;",
          "156:         BN_with_flags(n, rsa->n, BN_FLG_CONSTTIME);",
          "161:         BN_free(n);",
          "",
          "---------------"
        ],
        "crypto/rsa/rsa_gen.c||crypto/rsa/rsa_gen.c": [
          "File: crypto/rsa/rsa_gen.c -> crypto/rsa/rsa_gen.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     if (!BN_mul(r0, r1, r2, ctx))",
          "139:     {",
          "149:         if (!BN_mod_inverse(rsa->d, rsa->e, pr0, ctx)) {",
          "152:         }",
          "155:     }",
          "157:     {",
          "170:                !BN_mod(rsa->dmp1, d, r1, ctx)",
          "172:             || !BN_mod(rsa->dmq1, d, r2, ctx)) {",
          "174:             goto err;",
          "175:         }",
          "178:     }",
          "180:     {",
          "192:         if (!BN_mod_inverse(rsa->iqmp, rsa->q, p, ctx)) {",
          "194:             goto err;",
          "195:         }",
          "198:     }",
          "200:     ok = 1;",
          "",
          "[Removed Lines]",
          "140:         BIGNUM *local_r0 = NULL, *pr0;",
          "141:         if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME)) {",
          "142:             pr0 = local_r0 = BN_new();",
          "143:             if (local_r0 == NULL)",
          "144:                 goto err;",
          "145:             BN_with_flags(pr0, r0, BN_FLG_CONSTTIME);",
          "146:         } else {",
          "147:             pr0 = r0;",
          "148:         }",
          "150:             BN_free(local_r0);",
          "154:         BN_free(local_r0);",
          "158:         BIGNUM *local_d = NULL, *d;",
          "160:         if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME)) {",
          "161:             d = local_d = BN_new();",
          "162:             if (local_d == NULL)",
          "163:                 goto err;",
          "164:             BN_with_flags(d, rsa->d, BN_FLG_CONSTTIME);",
          "165:         } else {",
          "166:             d = rsa->d;",
          "167:         }",
          "173:             BN_free(local_d);",
          "177:         BN_free(local_d);",
          "181:         BIGNUM *local_p = NULL, *p;",
          "184:         if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME)) {",
          "185:             p = local_p = BN_new();",
          "186:             if (local_p == NULL)",
          "187:                 goto err;",
          "188:             BN_with_flags(p, rsa->p, BN_FLG_CONSTTIME);",
          "189:         } else {",
          "190:             p = rsa->p;",
          "191:         }",
          "193:             BN_free(local_p);",
          "197:         BN_free(local_p);",
          "",
          "[Added Lines]",
          "140:         BIGNUM *pr0 = BN_new();",
          "142:         if (pr0 == NULL)",
          "143:             goto err;",
          "144:         BN_with_flags(pr0, r0, BN_FLG_CONSTTIME);",
          "146:             BN_free(pr0);",
          "150:         BN_free(pr0);",
          "154:         BIGNUM *d = BN_new();",
          "156:         if (d == NULL)",
          "157:             goto err;",
          "158:         BN_with_flags(d, rsa->d, BN_FLG_CONSTTIME);",
          "164:             BN_free(d);",
          "168:         BN_free(d);",
          "172:         BIGNUM *p = BN_new();",
          "174:         if (p == NULL)",
          "175:             goto err;",
          "176:         BN_with_flags(p, rsa->p, BN_FLG_CONSTTIME);",
          "180:             BN_free(p);",
          "184:         BN_free(p);",
          "",
          "---------------"
        ],
        "crypto/rsa/rsa_ossl.c||crypto/rsa/rsa_ossl.c": [
          "File: crypto/rsa/rsa_ossl.c -> crypto/rsa/rsa_ossl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:         if (!rsa->meth->rsa_mod_exp(ret, f, rsa, ctx))",
          "301:             goto err;",
          "302:     } else {",
          "314:         }",
          "316:         if (rsa->flags & RSA_FLAG_CACHE_PUBLIC)",
          "317:             if (!BN_MONT_CTX_set_locked",
          "318:                 (&rsa->_method_mod_n, rsa->lock, rsa->n, ctx)) {",
          "320:                 goto err;",
          "321:             }",
          "323:         if (!rsa->meth->bn_mod_exp(ret, f, d, rsa->n, ctx,",
          "324:                                    rsa->_method_mod_n)) {",
          "326:             goto err;",
          "327:         }",
          "330:     }",
          "332:     if (blinding)",
          "",
          "[Removed Lines]",
          "303:         BIGNUM *d = NULL, *local_d = NULL;",
          "305:         if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME)) {",
          "306:             local_d = d = BN_new();",
          "307:             if (d == NULL) {",
          "308:                 RSAerr(RSA_F_RSA_OSSL_PRIVATE_ENCRYPT, ERR_R_MALLOC_FAILURE);",
          "309:                 goto err;",
          "310:             }",
          "311:             BN_with_flags(d, rsa->d, BN_FLG_CONSTTIME);",
          "312:         } else {",
          "313:             d = rsa->d;",
          "319:                 BN_free(local_d);",
          "325:             BN_free(local_d);",
          "329:         BN_free(local_d);",
          "",
          "[Added Lines]",
          "303:         BIGNUM *d = BN_new();",
          "304:         if (d == NULL) {",
          "305:             RSAerr(RSA_F_RSA_OSSL_PRIVATE_ENCRYPT, ERR_R_MALLOC_FAILURE);",
          "306:             goto err;",
          "308:         BN_with_flags(d, rsa->d, BN_FLG_CONSTTIME);",
          "313:                 BN_free(d);",
          "319:             BN_free(d);",
          "323:         BN_free(d);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "434:         if (!rsa->meth->rsa_mod_exp(ret, f, rsa, ctx))",
          "435:             goto err;",
          "436:     } else {",
          "448:         }",
          "450:         if (rsa->flags & RSA_FLAG_CACHE_PUBLIC)",
          "451:             if (!BN_MONT_CTX_set_locked",
          "452:                 (&rsa->_method_mod_n, rsa->lock, rsa->n, ctx)) {",
          "454:                 goto err;",
          "455:             }",
          "456:         if (!rsa->meth->bn_mod_exp(ret, f, d, rsa->n, ctx,",
          "457:                                    rsa->_method_mod_n)) {",
          "459:             goto err;",
          "460:         }",
          "463:     }",
          "465:     if (blinding)",
          "",
          "[Removed Lines]",
          "437:         BIGNUM *d = NULL, *local_d = NULL;",
          "439:         if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME)) {",
          "440:             local_d = d = BN_new();",
          "441:             if (d == NULL) {",
          "442:                 RSAerr(RSA_F_RSA_OSSL_PRIVATE_DECRYPT, ERR_R_MALLOC_FAILURE);",
          "443:                 goto err;",
          "444:             }",
          "445:             BN_with_flags(d, rsa->d, BN_FLG_CONSTTIME);",
          "446:         } else {",
          "447:             d = rsa->d;",
          "453:                 BN_free(local_d);",
          "458:             BN_free(local_d);",
          "462:         BN_free(local_d);",
          "",
          "[Added Lines]",
          "431:         BIGNUM *d = BN_new();",
          "432:         if (d == NULL) {",
          "433:             RSAerr(RSA_F_RSA_OSSL_PRIVATE_DECRYPT, ERR_R_MALLOC_FAILURE);",
          "434:             goto err;",
          "436:         BN_with_flags(d, rsa->d, BN_FLG_CONSTTIME);",
          "441:                 BN_free(d);",
          "446:             BN_free(d);",
          "450:         BN_free(d);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "608:     vrfy = BN_CTX_get(ctx);",
          "610:     {",
          "633:         }",
          "635:         if (rsa->flags & RSA_FLAG_CACHE_PRIVATE) {",
          "636:             if (!BN_MONT_CTX_set_locked",
          "637:                 (&rsa->_method_mod_p, rsa->lock, p, ctx)",
          "638:                 || !BN_MONT_CTX_set_locked(&rsa->_method_mod_q,",
          "639:                                            rsa->lock, q, ctx)) {",
          "642:                 goto err;",
          "643:             }",
          "644:         }",
          "651:     }",
          "653:     if (rsa->flags & RSA_FLAG_CACHE_PUBLIC)",
          "",
          "[Removed Lines]",
          "611:         BIGNUM *local_p = NULL, *local_q = NULL;",
          "612:         BIGNUM *p = NULL, *q = NULL;",
          "618:         if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME)) {",
          "619:             local_p = p = BN_new();",
          "620:             if (p == NULL)",
          "621:                 goto err;",
          "622:             BN_with_flags(p, rsa->p, BN_FLG_CONSTTIME);",
          "624:             local_q = q = BN_new();",
          "625:             if (q == NULL) {",
          "626:                 BN_free(local_p);",
          "627:                 goto err;",
          "628:             }",
          "629:             BN_with_flags(q, rsa->q, BN_FLG_CONSTTIME);",
          "630:         } else {",
          "631:             p = rsa->p;",
          "632:             q = rsa->q;",
          "640:                 BN_free(local_p);",
          "641:                 BN_free(local_q);",
          "649:         BN_free(local_p);",
          "650:         BN_free(local_q);",
          "",
          "[Added Lines]",
          "599:         BIGNUM *p = BN_new(), *q = BN_new();",
          "605:         if (p == NULL || q == NULL) {",
          "606:             BN_free(p);",
          "607:             BN_free(q);",
          "608:             goto err;",
          "610:         BN_with_flags(p, rsa->p, BN_FLG_CONSTTIME);",
          "611:         BN_with_flags(q, rsa->q, BN_FLG_CONSTTIME);",
          "618:                 BN_free(p);",
          "619:                 BN_free(q);",
          "626:         BN_free(p);",
          "627:         BN_free(q);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "659:     {",
          "671:         if (!BN_mod(r1, c, rsa->q, ctx)) {",
          "673:             goto err;",
          "674:         }",
          "676:         {",
          "688:             }",
          "689:             if (!rsa->meth->bn_mod_exp(m1, r1, dmq1, rsa->q, ctx,",
          "690:                 rsa->_method_mod_q)) {",
          "693:                 goto err;",
          "694:             }",
          "697:         }",
          "700:         if (!BN_mod(r1, c, rsa->p, ctx)) {",
          "702:             goto err;",
          "703:         }",
          "706:     }",
          "708:     {",
          "719:         if (!rsa->meth->bn_mod_exp(r0, r1, dmp1, rsa->p, ctx,",
          "720:                                    rsa->_method_mod_p)) {",
          "722:             goto err;",
          "723:         }",
          "726:     }",
          "728:     if (!BN_sub(r0, r0, m1))",
          "",
          "[Removed Lines]",
          "660:         BIGNUM *local_c = NULL;",
          "661:         const BIGNUM *c;",
          "662:         if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME)) {",
          "663:             local_c = BN_new();",
          "664:             if (local_c == NULL)",
          "665:                 goto err;",
          "666:             BN_with_flags(local_c, I, BN_FLG_CONSTTIME);",
          "667:             c = local_c;",
          "668:         } else {",
          "669:             c = I;",
          "670:         }",
          "672:             BN_free(local_c);",
          "677:             BIGNUM *local_dmq1 = NULL, *dmq1;",
          "679:             if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME)) {",
          "680:                 dmq1 = local_dmq1 = BN_new();",
          "681:                 if (local_dmq1 == NULL) {",
          "682:                     BN_free(local_c);",
          "683:                     goto err;",
          "684:                 }",
          "685:                 BN_with_flags(dmq1, rsa->dmq1, BN_FLG_CONSTTIME);",
          "686:             } else {",
          "687:                 dmq1 = rsa->dmq1;",
          "691:                 BN_free(local_c);",
          "692:                 BN_free(local_dmq1);",
          "696:             BN_free(local_dmq1);",
          "701:             BN_free(local_c);",
          "705:         BN_free(local_c);",
          "709:         BIGNUM *local_dmp1 = NULL, *dmp1;",
          "711:         if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME)) {",
          "712:             dmp1 = local_dmp1 = BN_new();",
          "713:             if (local_dmp1 == NULL)",
          "714:                 goto err;",
          "715:             BN_with_flags(dmp1, rsa->dmp1, BN_FLG_CONSTTIME);",
          "716:         } else {",
          "717:             dmp1 = rsa->dmp1;",
          "718:         }",
          "721:             BN_free(local_dmp1);",
          "725:         BN_free(local_dmp1);",
          "",
          "[Added Lines]",
          "637:         BIGNUM *c = BN_new();",
          "638:         if (c == NULL)",
          "639:             goto err;",
          "640:         BN_with_flags(c, I, BN_FLG_CONSTTIME);",
          "643:             BN_free(c);",
          "648:             BIGNUM *dmq1 = BN_new();",
          "649:             if (dmq1 == NULL) {",
          "650:                 BN_free(c);",
          "651:                 goto err;",
          "653:             BN_with_flags(dmq1, rsa->dmq1, BN_FLG_CONSTTIME);",
          "658:                 BN_free(c);",
          "659:                 BN_free(dmq1);",
          "663:             BN_free(dmq1);",
          "668:             BN_free(c);",
          "672:         BN_free(c);",
          "676:         BIGNUM *dmp1 = BN_new();",
          "677:         if (dmp1 == NULL)",
          "678:             goto err;",
          "679:         BN_with_flags(dmp1, rsa->dmp1, BN_FLG_CONSTTIME);",
          "684:             BN_free(dmp1);",
          "688:         BN_free(dmp1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "739:         goto err;",
          "741:     {",
          "752:         if (!BN_mod(r0, pr1, rsa->p, ctx)) {",
          "754:             goto err;",
          "755:         }",
          "758:     }",
          "",
          "[Removed Lines]",
          "742:         BIGNUM *local_r1 = NULL, *pr1;",
          "744:         if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME)) {",
          "745:             pr1 = local_r1 = BN_new();",
          "746:             if (local_r1 == NULL)",
          "747:                 goto err;",
          "748:             BN_with_flags(pr1, r1, BN_FLG_CONSTTIME);",
          "749:         } else {",
          "750:             pr1 = r1;",
          "751:         }",
          "753:             BN_free(local_r1);",
          "757:         BN_free(local_r1);",
          "",
          "[Added Lines]",
          "705:         BIGNUM *pr1 = BN_new();",
          "706:         if (pr1 == NULL)",
          "707:             goto err;",
          "708:         BN_with_flags(pr1, r1, BN_FLG_CONSTTIME);",
          "711:             BN_free(pr1);",
          "715:         BN_free(pr1);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "810:             if (!rsa->meth->bn_mod_exp(r0, I, d, rsa->n, ctx,",
          "811:                                        rsa->_method_mod_n)) {",
          "813:                 goto err;",
          "814:             }",
          "817:         }",
          "818:     }",
          "819:     ret = 1;",
          "",
          "[Removed Lines]",
          "799:             BIGNUM *local_d = NULL;",
          "800:             BIGNUM *d = NULL;",
          "802:             if (!(rsa->flags & RSA_FLAG_NO_CONSTTIME)) {",
          "803:                 local_d = d = BN_new();",
          "804:                 if (d == NULL)",
          "805:                     goto err;",
          "806:                 BN_with_flags(d, rsa->d, BN_FLG_CONSTTIME);",
          "807:             } else {",
          "808:                 d = rsa->d;",
          "809:             }",
          "812:                 BN_free(local_d);",
          "816:             BN_free(local_d);",
          "",
          "[Added Lines]",
          "757:             BIGNUM *d = BN_new();",
          "758:             if (d == NULL)",
          "759:                 goto err;",
          "760:             BN_with_flags(d, rsa->d, BN_FLG_CONSTTIME);",
          "764:                 BN_free(d);",
          "768:             BN_free(d);",
          "",
          "---------------"
        ],
        "include/openssl/dh.h||include/openssl/dh.h": [
          "File: include/openssl/dh.h -> include/openssl/dh.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: # define OPENSSL_DH_FIPS_MIN_MODULUS_BITS 1024",
          "34: # define DH_FLAG_CACHE_MONT_P     0x01",
          "",
          "[Removed Lines]",
          "35: # define DH_FLAG_NO_EXP_CONSTTIME 0x02",
          "",
          "[Added Lines]",
          "36: # if OPENSSL_API_COMPAT < 0x10100000L",
          "40: #  define DH_FLAG_NO_EXP_CONSTTIME 0x00",
          "41: # endif",
          "",
          "---------------"
        ],
        "include/openssl/dsa.h||include/openssl/dsa.h": [
          "File: include/openssl/dsa.h -> include/openssl/dsa.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "38: # define OPENSSL_DSA_FIPS_MIN_MODULUS_BITS 1024",
          "40: # define DSA_FLAG_CACHE_MONT_P   0x01",
          "",
          "[Removed Lines]",
          "46: # define DSA_FLAG_NO_EXP_CONSTTIME       0x02",
          "",
          "[Added Lines]",
          "41: # if OPENSSL_API_COMPAT < 0x10100000L",
          "45: #  define DSA_FLAG_NO_EXP_CONSTTIME       0x00",
          "46: # endif",
          "",
          "---------------"
        ],
        "include/openssl/rsa.h||include/openssl/rsa.h": [
          "File: include/openssl/rsa.h -> include/openssl/rsa.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "68: # define RSA_FLAG_NO_BLINDING            0x0080",
          "81: # if OPENSSL_API_COMPAT < 0x00908000L",
          "",
          "[Removed Lines]",
          "80: # define RSA_FLAG_NO_CONSTTIME           0x0100",
          "",
          "[Added Lines]",
          "69: # if OPENSSL_API_COMPAT < 0x10100000L",
          "73: #  define RSA_FLAG_NO_CONSTTIME           0x0000",
          "74: # endif",
          "",
          "---------------"
        ],
        "test/dhtest.c||test/dhtest.c": [
          "File: test/dhtest.c -> test/dhtest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "95:         goto err;",
          "96:     bp = bg = NULL;",
          "102:     if (!DH_generate_key(a))",
          "103:         goto err;",
          "104:     DH_get0_key(a, &apub_key, &priv_key);",
          "",
          "[Removed Lines]",
          "99:     DH_clear_flags(a, DH_FLAG_NO_EXP_CONSTTIME);",
          "100:     DH_set_flags(b, DH_FLAG_NO_EXP_CONSTTIME);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dsatest.c||test/dsatest.c": [
          "File: test/dsatest.c -> test/dsatest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:         goto end;",
          "148:     }",
          "157:     DSA_generate_key(dsa);",
          "158:     DSA_sign(0, str1, 20, sig, &siglen, dsa);",
          "159:     if (DSA_verify(0, str1, 20, sig, siglen, dsa) == 1)",
          "",
          "[Removed Lines]",
          "150:     DSA_set_flags(dsa, DSA_FLAG_NO_EXP_CONSTTIME);",
          "151:     DSA_generate_key(dsa);",
          "152:     DSA_sign(0, str1, 20, sig, &siglen, dsa);",
          "153:     if (DSA_verify(0, str1, 20, sig, siglen, dsa) == 1)",
          "154:         ret = 1;",
          "156:     DSA_clear_flags(dsa, DSA_FLAG_NO_EXP_CONSTTIME);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/rsa_test.c||test/rsa_test.c": [
          "File: test/rsa_test.c -> test/rsa_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:     plen = sizeof(ptext_ex) - 1;",
          "245:         key = RSA_new();",
          "247:         case 0:",
          "248:             clen = key1(key, ctext_ex);",
          "249:             break;",
          "",
          "[Removed Lines]",
          "244:     for (v = 0; v < 6; v++) {",
          "246:         switch (v % 3) {",
          "",
          "[Added Lines]",
          "244:     for (v = 0; v < 3; v++) {",
          "246:         switch (v) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:             clen = key3(key, ctext_ex);",
          "255:             break;",
          "256:         }",
          "260:         num = RSA_public_encrypt(plen, ptext_ex, ctext, key,",
          "261:                                  RSA_PKCS1_PADDING);",
          "",
          "[Removed Lines]",
          "257:         if (v / 3 >= 1)",
          "258:             RSA_set_flags(key, RSA_FLAG_NO_CONSTTIME);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "033dc8fad03a23f650e347204446c882bcadcfdf",
      "candidate_info": {
        "commit_hash": "033dc8fad03a23f650e347204446c882bcadcfdf",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/033dc8fad03a23f650e347204446c882bcadcfdf",
        "files": [
          "crypto/dsa/dsa_ossl.c"
        ],
        "message": "Remove kq and set BN_FLG_CONSTTIME in k for BN_mod_inverse\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c"
          ],
          "candidate": [
            "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c": [
          "File: crypto/dsa/dsa_ossl.c -> crypto/dsa/dsa_ossl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "135:                           const unsigned char *dgst, int dlen)",
          "136: {",
          "137:     BN_CTX *ctx = NULL;",
          "139:     int ret = 0;",
          "141:     if (!dsa->p || !dsa->q || !dsa->g) {",
          "",
          "[Removed Lines]",
          "138:     BIGNUM *k, *kq, *kinv = NULL, *r = *rp;",
          "",
          "[Added Lines]",
          "138:     BIGNUM *k, *kinv = NULL, *r = *rp;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "144:     }",
          "146:     k = BN_new();",
          "149:         goto err;",
          "151:     if (ctx_in == NULL) {",
          "",
          "[Removed Lines]",
          "147:     kq = BN_new();",
          "148:     if (k == NULL || kq == NULL)",
          "",
          "[Added Lines]",
          "147:     if (k == NULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "179:     if (!BN_copy(kq, k))",
          "180:         goto err;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "190:         goto err;",
          "193:             goto err;",
          "194:     }",
          "198:     if ((dsa)->meth->bn_mod_exp != NULL) {",
          "200:                                        dsa->method_mont_p))",
          "201:                 goto err;",
          "202:     } else {",
          "204:                 goto err;",
          "205:     }",
          "",
          "[Removed Lines]",
          "189:     if (!BN_add(kq, kq, dsa->q))",
          "191:     if (BN_num_bits(kq) <= BN_num_bits(dsa->q)) {",
          "192:         if (!BN_add(kq, kq, dsa->q))",
          "196:     BN_set_flags(kq, BN_FLG_CONSTTIME);",
          "199:             if (!dsa->meth->bn_mod_exp(dsa, r, dsa->g, kq, dsa->p, ctx,",
          "203:             if (!BN_mod_exp_mont(r, dsa->g, kq, dsa->p, ctx, dsa->method_mont_p))",
          "",
          "[Added Lines]",
          "185:     if (!BN_add(k, k, dsa->q))",
          "187:     if (BN_num_bits(k) <= BN_num_bits(dsa->q)) {",
          "188:         if (!BN_add(k, k, dsa->q))",
          "192:     BN_set_flags(k, BN_FLG_CONSTTIME);",
          "195:             if (!dsa->meth->bn_mod_exp(dsa, r, dsa->g, k, dsa->p, ctx,",
          "199:             if (!BN_mod_exp_mont(r, dsa->g, k, dsa->p, ctx, dsa->method_mont_p))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "222:     if (ctx != ctx_in)",
          "223:         BN_CTX_free(ctx);",
          "224:     BN_clear_free(k);",
          "226:     return ret;",
          "227: }",
          "",
          "[Removed Lines]",
          "225:     BN_clear_free(kq);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "621eaf49a289bfac26d4cbcdb7396e796784c534",
      "candidate_info": {
        "commit_hash": "621eaf49a289bfac26d4cbcdb7396e796784c534",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/621eaf49a289bfac26d4cbcdb7396e796784c534",
        "files": [
          "crypto/dsa/dsa_ossl.c"
        ],
        "message": "Fix DSA, preserve BN_FLG_CONSTTIME\n\nOperations in the DSA signing algorithm should run in constant time in\norder to avoid side channel attacks. A flaw in the OpenSSL DSA\nimplementation means that a non-constant time codepath is followed for\ncertain operations. This has been demonstrated through a cache-timing\nattack to be sufficient for an attacker to recover the private DSA key.\n\nCVE-2016-2178\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c"
          ],
          "candidate": [
            "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c": [
          "File: crypto/dsa/dsa_ossl.c -> crypto/dsa/dsa_ossl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:         if (!BN_rand_range(&k, dsa->q))",
          "249:             goto err;",
          "250:     while (BN_is_zero(&k)) ;",
          "255:     if (dsa->flags & DSA_FLAG_CACHE_MONT_P) {",
          "256:         if (!BN_MONT_CTX_set_locked(&dsa->method_mont_p,",
          "",
          "[Removed Lines]",
          "251:     if ((dsa->flags & DSA_FLAG_NO_EXP_CONSTTIME) == 0) {",
          "252:         BN_set_flags(&k, BN_FLG_CONSTTIME);",
          "253:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "279:         }",
          "281:         K = &kq;",
          "282:     } else {",
          "283:         K = &k;",
          "284:     }",
          "285:     DSA_BN_MOD_EXP(goto err, dsa, r, dsa->g, K, dsa->p, ctx,",
          "286:                    dsa->method_mont_p);",
          "287:     if (!BN_mod(r, r, dsa->q, ctx))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:         BN_set_flags(K, BN_FLG_CONSTTIME);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d168705e11526a4b487640c7cac5b53ee3646cbc",
      "candidate_info": {
        "commit_hash": "d168705e11526a4b487640c7cac5b53ee3646cbc",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/d168705e11526a4b487640c7cac5b53ee3646cbc",
        "files": [
          "crypto/dsa/dsa_ossl.c"
        ],
        "message": "Fix DSA, preserve BN_FLG_CONSTTIME\n\nOperations in the DSA signing algorithm should run in constant time in\norder to avoid side channel attacks. A flaw in the OpenSSL DSA\nimplementation means that a non-constant time codepath is followed for\ncertain operations. This has been demonstrated through a cache-timing\nattack to be sufficient for an attacker to recover the private DSA key.\n\nCVE-2016-2178\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>\n(cherry picked from commit 621eaf49a289bfac26d4cbcdb7396e796784c534)",
        "before_after_code_files": [
          "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c"
          ],
          "candidate": [
            "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/dsa/dsa_ossl.c||crypto/dsa/dsa_ossl.c": [
          "File: crypto/dsa/dsa_ossl.c -> crypto/dsa/dsa_ossl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:         if (!BN_rand_range(&k, dsa->q))",
          "249:             goto err;",
          "250:     while (BN_is_zero(&k)) ;",
          "255:     if (dsa->flags & DSA_FLAG_CACHE_MONT_P) {",
          "256:         if (!BN_MONT_CTX_set_locked(&dsa->method_mont_p,",
          "",
          "[Removed Lines]",
          "251:     if ((dsa->flags & DSA_FLAG_NO_EXP_CONSTTIME) == 0) {",
          "252:         BN_set_flags(&k, BN_FLG_CONSTTIME);",
          "253:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "279:         }",
          "281:         K = &kq;",
          "282:     } else {",
          "283:         K = &k;",
          "284:     }",
          "285:     DSA_BN_MOD_EXP(goto err, dsa, r, dsa->g, K, dsa->p, ctx,",
          "286:                    dsa->method_mont_p);",
          "287:     if (!BN_mod(r, r, dsa->q, ctx))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "280:         BN_set_flags(K, BN_FLG_CONSTTIME);",
          "",
          "---------------"
        ]
      }
    }
  ]
}