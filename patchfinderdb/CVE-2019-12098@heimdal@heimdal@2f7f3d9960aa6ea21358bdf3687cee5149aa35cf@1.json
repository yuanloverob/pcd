{
  "cve_id": "CVE-2019-12098",
  "cve_desc": "In the client side of Heimdal before 7.6.0, failure to verify anonymous PKINIT PA-PKINIT-KX key exchange permits a man-in-the-middle attack. This issue is in krb5_init_creds_step in lib/krb5/init_creds_pw.c.",
  "repo": "heimdal/heimdal",
  "patch_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
  "patch_info": {
    "commit_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "repo": "heimdal/heimdal",
    "commit_url": "https://github.com/heimdal/heimdal/commit/2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "files": [
      "lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c"
    ],
    "message": "CVE-2019-12098: krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>\n(cherry picked from commit 38c797e1ae9b9c8f99ae4aa2e73957679031fd2b)",
    "before_after_code_files": [
      "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
    ]
  },
  "patch_diff": {
    "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
      "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2267:            &ctx->req_buffer,",
      "2268:            NULL,",
      "2269:            NULL);",
      "2270:      if (ret == 0)",
      "2271:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2270:      if (ret == 0 && ctx->pk_init_ctx) {",
      "2271:   PA_DATA *pa_pkinit_kx;",
      "2272:   int idx = 0;",
      "2274:   pa_pkinit_kx =",
      "2275:       krb5_find_padata(rep.kdc_rep.padata->val,",
      "2276:          rep.kdc_rep.padata->len,",
      "2277:          KRB5_PADATA_PKINIT_KX,",
      "2278:          &idx);",
      "2280:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
      "2281:        ctx->fast_state.reply_key,",
      "2282:        &ctx->cred.session,",
      "2283:        pa_pkinit_kx);",
      "2284:   if (ret)",
      "2285:       krb5_set_error_message(context, ret,",
      "2286:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
      "2287:   else if (pa_pkinit_kx != NULL)",
      "2288:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
      "2289:      }",
      "",
      "---------------"
    ],
    "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
      "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "208: #define KRB5_INIT_CREDS_CANONICALIZE  1",
      "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
      "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
      "211:     struct {",
      "212:         krb5_gic_process_last_req func;",
      "213:         void *ctx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
      "",
      "---------------"
    ],
    "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
      "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     return ret;",
      "1221: }",
      "1223: static krb5_error_code",
      "1224: pk_rd_pa_reply_dh(krb5_context context,",
      "1225:     const heim_octet_string *indata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
      "1231: _krb5_pk_kx_confirm(krb5_context context,",
      "1232:       krb5_pk_init_ctx ctx,",
      "1233:       krb5_keyblock *reply_key,",
      "1234:       krb5_keyblock *session_key,",
      "1235:       PA_DATA *pa_pkinit_kx)",
      "1236: {",
      "1237:     krb5_error_code ret;",
      "1238:     EncryptedData ed;",
      "1239:     krb5_keyblock ck, sk_verify;",
      "1240:     krb5_crypto ck_crypto = NULL;",
      "1241:     krb5_crypto rk_crypto = NULL;",
      "1242:     size_t len;",
      "1243:     krb5_data data;",
      "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
      "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
      "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
      "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
      "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
      "1252:     if (pa_pkinit_kx == NULL)",
      "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
      "1255:     memset(&ed, 0, sizeof(ed));",
      "1256:     krb5_keyblock_zero(&ck);",
      "1257:     krb5_keyblock_zero(&sk_verify);",
      "1258:     krb5_data_zero(&data);",
      "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
      "1261:           pa_pkinit_kx->padata_value.length,",
      "1262:           &ed, &len);",
      "1263:     if (ret)",
      "1264:  goto out;",
      "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
      "1267:  ret = KRB5_KDCREP_MODIFIED;",
      "1268:  goto out;",
      "1269:     }",
      "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
      "1272:     if (ret)",
      "1273:  goto out;",
      "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
      "1276:          KRB5_KU_PA_PKINIT_KX,",
      "1277:          &ed, &data);",
      "1278:     if (ret)",
      "1279:  goto out;",
      "1281:     ret = decode_EncryptionKey(data.data, data.length,",
      "1282:           &ck, &len);",
      "1283:     if (ret)",
      "1284:  goto out;",
      "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
      "1287:     if (ret)",
      "1288:  goto out;",
      "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
      "1291:         &p1, &p2, session_key->keytype,",
      "1292:         &sk_verify);",
      "1293:     if (ret)",
      "1294:  goto out;",
      "1296:     if (sk_verify.keytype != session_key->keytype ||",
      "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
      "1298:  ret = KRB5_KDCREP_MODIFIED;",
      "1299:  goto out;",
      "1300:     }",
      "1302: out:",
      "1303:     free_EncryptedData(&ed);",
      "1304:     krb5_free_keyblock_contents(context, &ck);",
      "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
      "1306:     if (ck_crypto)",
      "1307:  krb5_crypto_destroy(context, ck_crypto);",
      "1308:     if (rk_crypto)",
      "1309:  krb5_crypto_destroy(context, rk_crypto);",
      "1310:     krb5_data_free(&data);",
      "1312:     return ret;",
      "1313: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "02b5f1af9bc4a8016a6246163cd7d39b2aaa26a0",
      "candidate_info": {
        "commit_hash": "02b5f1af9bc4a8016a6246163cd7d39b2aaa26a0",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/02b5f1af9bc4a8016a6246163cd7d39b2aaa26a0",
        "files": [
          "kuser/klist.c"
        ],
        "message": "klist: display all known flags when listing tickets\n\nShow transited-policy-checked, ok-as-delegate and anonymous flags when listing\ncredentials.\n\n(cherry picked from commit a7bb4504f2f3dfb276f8aa154858f46ed1063011)",
        "before_after_code_files": [
          "kuser/klist.c||kuser/klist.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kuser/klist.c||kuser/klist.c": [
          "File: kuser/klist.c -> kuser/klist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:  if(cred->flags.b.hw_authent)",
          "126:  rtbl_add_column_entry(ct, COL_FLAGS, s);",
          "127:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "125:  if(cred->flags.b.transited_policy_checked)",
          "127:  if(cred->flags.b.ok_as_delegate)",
          "129:  if(cred->flags.b.anonymous)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "edcdb0bae5a6e95522a95ef68826ab0f68d76a7f",
      "candidate_info": {
        "commit_hash": "edcdb0bae5a6e95522a95ef68826ab0f68d76a7f",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/edcdb0bae5a6e95522a95ef68826ab0f68d76a7f",
        "files": [
          "lib/hcrypto/evp-pkcs11.c",
          "lib/hcrypto/evp.h"
        ],
        "message": "Fix PKCS#11 hcrypto backend regression (#314, #315, #316, #317)\n\n81c778e broke the PKCS#11 hcrypto backend broke for many cases as it did\nnot support cipherstate resetting. (Prior to 81c778e, which was to fix #194,\nthe PKCS#11 backend did not support cipherstate chaining across invocations.)\n\nhcrypto backends that maintain cipherstate independently of the hcrypto\ncontext IV field need to set EVP_CIPH_ALWAYS_CALL_INIT to avoid the two\ndiverging. Their init function should support resetting the cipherstate\nindependently of key scheduling.\n\n(cherry picked from commit a88d00660efc0de15514f0957a51954478e31f45)",
        "before_after_code_files": [
          "lib/hcrypto/evp-pkcs11.c||lib/hcrypto/evp-pkcs11.c",
          "lib/hcrypto/evp.h||lib/hcrypto/evp.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/hcrypto/evp-pkcs11.c||lib/hcrypto/evp-pkcs11.c": [
          "File: lib/hcrypto/evp-pkcs11.c -> lib/hcrypto/evp-pkcs11.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: struct pkcs11_cipher_ctx {",
          "88:     CK_SESSION_HANDLE hSession;",
          "89:     CK_OBJECT_HANDLE hSecret;",
          "91: };",
          "93: struct pkcs11_md_ctx {",
          "",
          "[Removed Lines]",
          "90:     int cipher_init_done;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "281:         { CKA_VALUE,            (void *)key,    ctx->key_len            },",
          "282:         { op,                   &bTrue,         sizeof(bTrue)           }",
          "283:     };",
          "284:     struct pkcs11_cipher_ctx *p11ctx = (struct pkcs11_cipher_ctx *)ctx->cipher_data;",
          "299: cleanup:",
          "300:     if (rv != CKR_OK)",
          "",
          "[Removed Lines]",
          "285:     p11ctx->cipher_init_done = 0;",
          "287:     rv = p11_session_init(mechanismType, &p11ctx->hSession);",
          "288:     if (rv != CKR_OK)",
          "289:         goto cleanup;",
          "291:     assert(p11_module != NULL);",
          "293:     rv = p11_module->C_CreateObject(p11ctx->hSession, attributes,",
          "294:                                     sizeof(attributes) / sizeof(attributes[0]),",
          "295:                                     &p11ctx->hSecret);",
          "296:     if (rv != CKR_OK)",
          "297:         goto cleanup;",
          "",
          "[Added Lines]",
          "283:     CK_MECHANISM mechanism = {",
          "284:         mechanismType,",
          "285:         ctx->cipher->iv_len ? ctx->iv : NULL,",
          "286:         ctx->cipher->iv_len",
          "287:     };",
          "290:     rv = CKR_OK;",
          "292:     if (p11ctx->hSession != CK_INVALID_HANDLE && key != NULL)",
          "295:     if (p11ctx->hSession == CK_INVALID_HANDLE) {",
          "296:         rv = p11_session_init(mechanismType, &p11ctx->hSession);",
          "297:         if (rv != CKR_OK)",
          "298:             goto cleanup;",
          "299:     }",
          "301:     if (key != NULL) {",
          "302:         assert(p11_module != NULL);",
          "303:         assert(p11ctx->hSecret == CK_INVALID_HANDLE);",
          "305:         rv = p11_module->C_CreateObject(p11ctx->hSession, attributes,",
          "306:                                         sizeof(attributes) / sizeof(attributes[0]),",
          "307:                                         &p11ctx->hSecret);",
          "308:         if (rv != CKR_OK)",
          "309:             goto cleanup;",
          "310:     }",
          "312:     if (p11ctx->hSecret != CK_INVALID_HANDLE) {",
          "313:         if (op == CKA_ENCRYPT)",
          "314:             rv = p11_module->C_EncryptInit(p11ctx->hSession, &mechanism, p11ctx->hSecret);",
          "315:         else",
          "316:             rv = p11_module->C_DecryptInit(p11ctx->hSession, &mechanism, p11ctx->hSecret);",
          "317:         if (rv != CKR_OK)",
          "318:             goto cleanup;",
          "319:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "310:               unsigned int size)",
          "311: {",
          "312:     struct pkcs11_cipher_ctx *p11ctx = (struct pkcs11_cipher_ctx *)ctx->cipher_data;",
          "314:     CK_ULONG ulCipherTextLen = size;",
          "322:     assert(p11_module != NULL);",
          "324:     assert(EVP_CIPHER_CTX_mode(ctx) == EVP_CIPH_STREAM_CIPHER ||",
          "325:            (size % ctx->cipher->block_size) == 0);",
          "345:     return rv == CKR_OK;",
          "346: }",
          "",
          "[Removed Lines]",
          "313:     CK_RV rv = CKR_OK;",
          "315:     CK_MECHANISM_TYPE mechanismType = (CK_MECHANISM_TYPE)ctx->cipher->app_data;",
          "316:     CK_MECHANISM mechanism = {",
          "317:         mechanismType,",
          "318:         ctx->cipher->iv_len ? ctx->iv : NULL,",
          "319:         ctx->cipher->iv_len",
          "320:     };",
          "327:     if (ctx->encrypt) {",
          "328:         if (!p11ctx->cipher_init_done) {",
          "329:             rv = p11_module->C_EncryptInit(p11ctx->hSession, &mechanism, p11ctx->hSecret);",
          "330:             if (rv == CKR_OK)",
          "331:                 p11ctx->cipher_init_done = 1;",
          "332:         }",
          "333:         if (rv == CKR_OK)",
          "334:             rv = p11_module->C_EncryptUpdate(p11ctx->hSession, (unsigned char *)in, size, out, &ulCipherTextLen);",
          "335:     } else {",
          "336:         if (!p11ctx->cipher_init_done) {",
          "337:             rv = p11_module->C_DecryptInit(p11ctx->hSession, &mechanism, p11ctx->hSecret);",
          "338:             if (rv == CKR_OK)",
          "339:                 p11ctx->cipher_init_done = 1;",
          "340:         }",
          "341:         if (rv == CKR_OK)",
          "342:             rv = p11_module->C_DecryptUpdate(p11ctx->hSession, (unsigned char *)in, size, out, &ulCipherTextLen);",
          "343:     }",
          "",
          "[Added Lines]",
          "335:     CK_RV rv;",
          "342:     if (ctx->encrypt)",
          "343:         rv = p11_module->C_EncryptUpdate(p11ctx->hSession, (unsigned char *)in, size, out, &ulCipherTextLen);",
          "344:     else",
          "345:         rv = p11_module->C_DecryptUpdate(p11ctx->hSession, (unsigned char *)in, size, out, &ulCipherTextLen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "350: {",
          "351:     struct pkcs11_cipher_ctx *p11ctx = (struct pkcs11_cipher_ctx *)ctx->cipher_data;",
          "355:     if (p11ctx->hSecret != CK_INVALID_HANDLE)  {",
          "356:         p11_module->C_DestroyObject(p11ctx->hSession, p11ctx->hSecret);",
          "357:         p11ctx->hSecret = CK_INVALID_HANDLE;",
          "",
          "[Removed Lines]",
          "353:     assert(p11_module != NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "435:         block_size,                                                     \\",
          "436:         key_len,                                                        \\",
          "437:         iv_len,                                                         \\",
          "439:         p11_key_init,                                                   \\",
          "440:         p11_do_cipher,                                                  \\",
          "441:         p11_cleanup,                                                    \\",
          "",
          "[Removed Lines]",
          "438:         flags,                                                          \\",
          "",
          "[Added Lines]",
          "438:         (flags) | EVP_CIPH_ALWAYS_CALL_INIT,                            \\",
          "",
          "---------------"
        ],
        "lib/hcrypto/evp.h||lib/hcrypto/evp.h": [
          "File: lib/hcrypto/evp.h -> lib/hcrypto/evp.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "164: #define hc_EVP_CTRL_INIT                        0x0",
          "168: #define hc_EVP_CIPH_RAND_KEY            0x200",
          "170:     int (*init)(EVP_CIPHER_CTX*,const unsigned char*,const unsigned char*,int);",
          "",
          "[Removed Lines]",
          "167: #define hc_EVP_CIPH_ALWAYS_CALL_INIT    0x020",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "172e4356db0a4ccd1d834d74bdd0478209ab6df9",
      "candidate_info": {
        "commit_hash": "172e4356db0a4ccd1d834d74bdd0478209ab6df9",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/172e4356db0a4ccd1d834d74bdd0478209ab6df9",
        "files": [
          "kdc/kerberos5.c",
          "kdc/krb5tgs.c"
        ],
        "message": "kdc: refactor anonymous checks in KDC\n\n_kdc_is_anon_request() is only used by the AS, so make it static.\n\nCentralize anonymous poilcy checks shared between AS and TGS into a shared\nfunction, _kdc_check_anon_policy().\n\nWhen issuing an anonymous ticket, set the ticket flag early and test that\nrather than re-testing the request.\n\n(cherry picked from commit 27c6cf7a9f26883eee0b17b36dd58a52d2ca3d98)",
        "before_after_code_files": [
          "kdc/kerberos5.c||kdc/kerberos5.c",
          "kdc/krb5tgs.c||kdc/krb5tgs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/kerberos5.c||kdc/kerberos5.c": [
          "File: kdc/kerberos5.c -> kdc/kerberos5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:     return TRUE;",
          "117: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: static krb5_boolean",
          "121: is_anon_request_p(kdc_request_t r)",
          "122: {",
          "123:     KDC_REQ_BODY *b = &r->req.req_body;",
          "131:     return b->kdc_options.request_anonymous ||",
          "132:     (b->kdc_options.cname_in_addl_tkt && !b->additional_tickets);",
          "133: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "434: pa_enc_chal_validate(kdc_request_t r, const PA_DATA *pa)",
          "435: {",
          "436:     krb5_data pepper1, pepper2, ts_data;",
          "438:     int invalidPassword = 0;",
          "439:     EncryptedData enc_data;",
          "440:     krb5_enctype aenctype;",
          "",
          "[Removed Lines]",
          "437:     KDC_REQ_BODY *b = &r->req.req_body;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "446:     heim_assert(r->armor_crypto != NULL, \"ENC-CHAL called for non FAST\");",
          "449:  ret = KRB5KRB_AP_ERR_BAD_INTEGRITY;",
          "450:  kdc_log(r->context, r->config, 0, \"ENC-CHALL doesn't support anon\");",
          "451:  return ret;",
          "",
          "[Removed Lines]",
          "448:     if (_kdc_is_anon_request(b)) {",
          "",
          "[Added Lines]",
          "463:     if (is_anon_request_p(r)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1475:     return result;",
          "1476: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1496: krb5_error_code",
          "1497: _kdc_check_anon_policy (krb5_context context,",
          "1498:    krb5_kdc_configuration *config,",
          "1499:    hdb_entry_ex *client,",
          "1500:    hdb_entry_ex *server)",
          "1501: {",
          "1502:     if (!config->allow_anonymous){",
          "1503:  kdc_log(context, config, 0,",
          "1504:   \"Request for anonymous ticket denied by local policy\");",
          "1505:  return KRB5KDC_ERR_POLICY;",
          "1506:     }",
          "1508:     return 0;",
          "1509: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1704:     }",
          "",
          "[Removed Lines]",
          "1698:     if (_kdc_is_anonymous(context, r->client_princ)) {",
          "1699:  if (!_kdc_is_anon_request(b)) {",
          "1700:      kdc_log(context, config, 0, \"Anonymous client w/o anonymous flag\");",
          "1701:      ret = KRB5KDC_ERR_BADOPTION;",
          "1702:      goto out;",
          "1703:  }",
          "",
          "[Added Lines]",
          "1731:     if (_kdc_is_anonymous(context, r->client_princ) &&",
          "1732:  !is_anon_request_p(r)) {",
          "1733:  kdc_log(context, config, 0, \"Anonymous client w/o anonymous flag\");",
          "1734:  ret = KRB5KDC_ERR_BADOPTION;",
          "1735:  goto out;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1874:      ret = KRB5KDC_ERR_PREAUTH_REQUIRED;",
          "1875:      _kdc_set_e_text(r, \"Need to use PA-ENC-TIMESTAMP/PA-PK-AS-REQ\");",
          "1876:      goto out;",
          "",
          "[Removed Lines]",
          "1873:  if (require_preauth_p(r) || _kdc_is_anon_request(b)) {",
          "",
          "[Added Lines]",
          "1905:  if (require_preauth_p(r) || is_anon_request_p(r)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1903:     if(ret)",
          "1904:  goto out;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1938:     if (is_anon_request_p(r)) {",
          "1939:  ret = _kdc_check_anon_policy(context, config, r->client, r->server);",
          "1940:  if (ret) {",
          "1941:      _kdc_set_e_text(r, \"Anonymous ticket requests are disabled\");",
          "1942:      goto out;",
          "1943:  }",
          "1945:  r->et.flags.anonymous = 1;",
          "1946:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1914:     if(ret)",
          "1915:  goto out;",
          "1919:  ret = KRB5KDC_ERR_BADOPTION;",
          "1920:  _kdc_set_e_text(r, \"Bad KDC options\");",
          "1921:  goto out;",
          "",
          "[Removed Lines]",
          "1917:     if(f.renew || f.validate || f.proxy || f.forwarded || f.enc_tkt_in_skey",
          "1918:        || (_kdc_is_anon_request(b) && !config->allow_anonymous)) {",
          "",
          "[Added Lines]",
          "1959:     if(f.renew || f.validate || f.proxy || f.forwarded || f.enc_tkt_in_skey) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1935:  ret = copy_Realm(&r->client->entry.principal->realm, &rep.crealm);",
          "1936:     if (ret)",
          "1937:  goto out;",
          "1939:  ret = _kdc_make_anonymous_principalname(&rep.cname);",
          "1940:     else",
          "1941:         ret = _krb5_principal2principalname(&rep.cname, r->client->entry.principal);",
          "",
          "[Removed Lines]",
          "1938:     if (_kdc_is_anon_request(b))",
          "",
          "[Added Lines]",
          "1979:     if (r->et.flags.anonymous)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2043:  }",
          "2044:     }",
          "2049:     if(b->addresses){",
          "2050:  ALLOC(r->et.caddr);",
          "2051:  copy_HostAddresses(b->addresses, r->et.caddr);",
          "",
          "[Removed Lines]",
          "2046:     if (_kdc_is_anon_request(b))",
          "2047:  r->et.flags.anonymous = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2158:     }",
          "2162:  generate_pac(r, skey);",
          "2163:     }",
          "",
          "[Removed Lines]",
          "2161:     if (send_pac_p(context, req) && !_kdc_is_anon_request(b)) {",
          "",
          "[Added Lines]",
          "2199:     if (send_pac_p(context, req) && !r->et.flags.anonymous) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2354:     return 0;",
          "2355: }",
          "",
          "[Removed Lines]",
          "2357: krb5_boolean",
          "2358: _kdc_is_anon_request(const KDC_REQ_BODY *b)",
          "2359: {",
          "2361:     request_anonymous, as indicated in the anonymous draft prior to",
          "2362:     version 11. Bit 14 is assigned to S4U2Proxy, but all S4U2Proxy",
          "2364:  return (b->kdc_options.request_anonymous ||",
          "2365:   (b->kdc_options.cname_in_addl_tkt && !b->additional_tickets));",
          "2366: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "kdc/krb5tgs.c||kdc/krb5tgs.c": [
          "File: kdc/krb5tgs.c -> kdc/krb5tgs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "516:  et->flags.anonymous = 1;",
          "519:     return 0;",
          "520: }",
          "",
          "[Removed Lines]",
          "509:     if (tgt->flags.anonymous || f.request_anonymous) {",
          "510:  if (!config->allow_anonymous){",
          "511:      kdc_log(context, config, 0,",
          "512:       \"Request for anonymous ticket\");",
          "513:      return KRB5KDC_ERR_BADOPTION;",
          "514:  }",
          "517:     }",
          "",
          "[Added Lines]",
          "509:     if (tgt->flags.anonymous || f.request_anonymous)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2341:  goto out;",
          "2342:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2338:     if (tgt->flags.anonymous || b->kdc_options.request_anonymous) {",
          "2339:  ret = _kdc_check_anon_policy(context, config, client, server);",
          "2340:  if (ret)",
          "2341:      goto out;",
          "2342:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "423d5bc52cb6e4f2890370e196553dbce4418f80",
      "candidate_info": {
        "commit_hash": "423d5bc52cb6e4f2890370e196553dbce4418f80",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/423d5bc52cb6e4f2890370e196553dbce4418f80",
        "files": [
          "lib/wind/UnicodeData.py"
        ],
        "message": "PY3: fix \"TabError: inconsistent use of tabs and spaces\"\n\nSigned-off-by: Noel Power <noel.power@suse.com>\nReviewed-by: Andrew Bartlett <abartlet@samba.org>\n\n(cherry-picked from Samba commit e8fec94827c933041acd5b447eeeefd0b7b507ef)\n\n(cherry picked from commit 59aee7cad2b3fdb7fe8ddcc621e12703cdc35022)",
        "before_after_code_files": [
          "lib/wind/UnicodeData.py||lib/wind/UnicodeData.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/wind/UnicodeData.py||lib/wind/UnicodeData.py": [
          "File: lib/wind/UnicodeData.py -> lib/wind/UnicodeData.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:             continue",
          "51:         f = l.split(';')",
          "52:         key = int(f[0], 0x10)",
          "54:             raise Exception('Duplicate key in UnicodeData')",
          "55:         ret[key] = f[1:]",
          "56:     ud.close()",
          "",
          "[Removed Lines]",
          "53:  if key in ret:",
          "",
          "[Added Lines]",
          "53:         if key in ret:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a01f4e9483bc171d0281feca2d349f66d0a0af0",
      "candidate_info": {
        "commit_hash": "2a01f4e9483bc171d0281feca2d349f66d0a0af0",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/2a01f4e9483bc171d0281feca2d349f66d0a0af0",
        "files": [
          "kadmin/random_password.c",
          "lib/krb5/salt-des3.c"
        ],
        "message": "fix calls to memset_s\n\nIn random_password() and DES3_string_to_key(), do not call\nmemset_s() with the sizeof a pointer.\n\nChange-Id: I7dd49b9f717e1cb5c262f2d375d2b85be82cd2db\n(cherry picked from commit 029d32580a3b04550ff736d8878d331dcfca864f)",
        "before_after_code_files": [
          "kadmin/random_password.c||kadmin/random_password.c",
          "lib/krb5/salt-des3.c||lib/krb5/salt-des3.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kadmin/random_password.c||kadmin/random_password.c": [
          "File: kadmin/random_password.c -> kadmin/random_password.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", 2,",
          "69:         \"@$%&*()-+=:,/<>1234567890\", 1);",
          "70:     strlcpy(pw, pass, len);",
          "72:     free(pass);",
          "73: #endif",
          "74: }",
          "",
          "[Removed Lines]",
          "71:     memset_s(pass, sizeof(pass), 0, strlen(pass));",
          "",
          "[Added Lines]",
          "71:     len = strlen(pass);",
          "72:     memset_s(pass, len, 0, len);",
          "",
          "---------------"
        ],
        "lib/krb5/salt-des3.c||lib/krb5/salt-des3.c": [
          "File: lib/krb5/salt-des3.c -> lib/krb5/salt-des3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91:     key->keytype = enctype;",
          "92:     krb5_data_copy(&key->keyvalue, keys, sizeof(keys));",
          "93:     memset_s(keys, sizeof(keys), 0, sizeof(keys));",
          "95:     free(str);",
          "96:     return 0;",
          "97: }",
          "",
          "[Removed Lines]",
          "94:     memset_s(str, sizeof(str), 0, len);",
          "",
          "[Added Lines]",
          "94:     memset_s(str, len, 0, len);",
          "",
          "---------------"
        ]
      }
    }
  ]
}