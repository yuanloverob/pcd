{
  "cve_id": "CVE-2018-19497",
  "cve_desc": "In The Sleuth Kit (TSK) through 4.6.4, hfs_cat_traverse in tsk/fs/hfs.c does not properly determine when a key length is too large, which allows attackers to cause a denial of service (SEGV on unknown address with READ memory access in a tsk_getu16 call in hfs_dir_open_meta_cb in tsk/fs/hfs_dent.c).",
  "repo": "sleuthkit/sleuthkit",
  "patch_hash": "bc04aa017c0bd297de8a3b7fc40ffc6ddddbb95d",
  "patch_info": {
    "commit_hash": "bc04aa017c0bd297de8a3b7fc40ffc6ddddbb95d",
    "repo": "sleuthkit/sleuthkit",
    "commit_url": "https://github.com/sleuthkit/sleuthkit/commit/bc04aa017c0bd297de8a3b7fc40ffc6ddddbb95d",
    "files": [
      "tsk/fs/hfs.c",
      "bindings/java/src/org/sleuthkit/datamodel/SleuthkitCase.java"
    ],
    "message": "Merge pull request #1374 from JordyZomer/develop\n\nFix CVE-2018-19497.",
    "before_after_code_files": [
      "tsk/fs/hfs.c||tsk/fs/hfs.c"
    ]
  },
  "patch_diff": {
    "tsk/fs/hfs.c||tsk/fs/hfs.c": [
      "File: tsk/fs/hfs.c -> tsk/fs/hfs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "956:                 key = (hfs_btree_key_cat *) & node[rec_off];",
      "958:                 keylen = 2 + tsk_getu16(hfs->fs_info.endian, key->key_len);",
      "960:                     tsk_error_set_errno(TSK_ERR_FS_GENFS);",
      "961:                     tsk_error_set_errstr",
      "962:                         (\"hfs_cat_traverse: length of key %d in index node %d too large (%d vs %\"",
      "964:                     free(node);",
      "965:                     return 1;",
      "966:                 }",
      "",
      "[Removed Lines]",
      "959:                 if ((keylen) > nodesize) {",
      "963:                         PRIu16 \")\", rec, cur_node, keylen, nodesize);",
      "",
      "[Added Lines]",
      "960:                 if (keylen >= nodesize - rec_off) {",
      "964:                         PRIu16 \")\", rec, cur_node, keylen, (nodesize - rec_off));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8242588f4354339d9cb1ad82622e7c16c55391c9",
      "candidate_info": {
        "commit_hash": "8242588f4354339d9cb1ad82622e7c16c55391c9",
        "repo": "sleuthkit/sleuthkit",
        "commit_url": "https://github.com/sleuthkit/sleuthkit/commit/8242588f4354339d9cb1ad82622e7c16c55391c9",
        "files": [
          "tsk/fs/hfs.c"
        ],
        "message": "UPDATE on CVE-2018-19497.\n\nmake it >= because if keylen == nodesize - rec_off it's already past it's destination.\nAlso fix the sprintf",
        "before_after_code_files": [
          "tsk/fs/hfs.c||tsk/fs/hfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/sleuthkit/sleuthkit/pull/1374"
        ],
        "olp_code_files": {
          "patch": [
            "tsk/fs/hfs.c||tsk/fs/hfs.c"
          ],
          "candidate": [
            "tsk/fs/hfs.c||tsk/fs/hfs.c"
          ]
        }
      },
      "candidate_diff": {
        "tsk/fs/hfs.c||tsk/fs/hfs.c": [
          "File: tsk/fs/hfs.c -> tsk/fs/hfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "958:                 keylen = 2 + tsk_getu16(hfs->fs_info.endian, key->key_len);",
          "961:                     tsk_error_set_errno(TSK_ERR_FS_GENFS);",
          "962:                     tsk_error_set_errstr",
          "963:                         (\"hfs_cat_traverse: length of key %d in index node %d too large (%d vs %\"",
          "965:                     free(node);",
          "966:                     return 1;",
          "967:                 }",
          "",
          "[Removed Lines]",
          "960:                 if (keylen > nodesize - rec_off) {",
          "964:                         PRIu16 \")\", rec, cur_node, keylen, nodesize - rec_off);",
          "",
          "[Added Lines]",
          "960:                 if (keylen >= nodesize - rec_off) {",
          "964:                         PRIu16 \")\", rec, cur_node, keylen, (nodesize - rec_off));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fb2bc0ad693db852fac1dcc77a072aeabe106ac8",
      "candidate_info": {
        "commit_hash": "fb2bc0ad693db852fac1dcc77a072aeabe106ac8",
        "repo": "sleuthkit/sleuthkit",
        "commit_url": "https://github.com/sleuthkit/sleuthkit/commit/fb2bc0ad693db852fac1dcc77a072aeabe106ac8",
        "files": [
          "tsk/fs/hfs.c"
        ],
        "message": "fix length in printf of nodesize\n\nAlso fix the length in printf next to comit dd679ad1d855e7f69a887eb343bb53d49dc664e7",
        "before_after_code_files": [
          "tsk/fs/hfs.c||tsk/fs/hfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/sleuthkit/sleuthkit/pull/1374"
        ],
        "olp_code_files": {
          "patch": [
            "tsk/fs/hfs.c||tsk/fs/hfs.c"
          ],
          "candidate": [
            "tsk/fs/hfs.c||tsk/fs/hfs.c"
          ]
        }
      },
      "candidate_diff": {
        "tsk/fs/hfs.c||tsk/fs/hfs.c": [
          "File: tsk/fs/hfs.c -> tsk/fs/hfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "961:                     tsk_error_set_errno(TSK_ERR_FS_GENFS);",
          "962:                     tsk_error_set_errstr",
          "963:                         (\"hfs_cat_traverse: length of key %d in index node %d too large (%d vs %\"",
          "965:                     free(node);",
          "966:                     return 1;",
          "967:                 }",
          "",
          "[Removed Lines]",
          "964:                         PRIu16 \")\", rec, cur_node, keylen, nodesize);",
          "",
          "[Added Lines]",
          "964:                         PRIu16 \")\", rec, cur_node, keylen, nodesize - rec_off);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dd679ad1d855e7f69a887eb343bb53d49dc664e7",
      "candidate_info": {
        "commit_hash": "dd679ad1d855e7f69a887eb343bb53d49dc664e7",
        "repo": "sleuthkit/sleuthkit",
        "commit_url": "https://github.com/sleuthkit/sleuthkit/commit/dd679ad1d855e7f69a887eb343bb53d49dc664e7",
        "files": [
          "tsk/fs/hfs.c"
        ],
        "message": "Fix CVE-2018-19497.\n\nAn issue was discovered in The Sleuth Kit (TSK) through 4.6.4.\nThe \"tsk_getu16(hfs->fs_info.endian, &rec_buf[rec_off2])\" call in hfs_dir_open_meta_cb in\ntsk/fs/hfs_dent.c does not properly check boundaries. This results in\na crash (SEGV on unknown address\nREAD memory access)\nwhen reading too much in the destination buffer.",
        "before_after_code_files": [
          "tsk/fs/hfs.c||tsk/fs/hfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/sleuthkit/sleuthkit/pull/1374"
        ],
        "olp_code_files": {
          "patch": [
            "tsk/fs/hfs.c||tsk/fs/hfs.c"
          ],
          "candidate": [
            "tsk/fs/hfs.c||tsk/fs/hfs.c"
          ]
        }
      },
      "candidate_diff": {
        "tsk/fs/hfs.c||tsk/fs/hfs.c": [
          "File: tsk/fs/hfs.c -> tsk/fs/hfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "956:                 key = (hfs_btree_key_cat *) & node[rec_off];",
          "958:                 keylen = 2 + tsk_getu16(hfs->fs_info.endian, key->key_len);",
          "960:                     tsk_error_set_errno(TSK_ERR_FS_GENFS);",
          "961:                     tsk_error_set_errstr",
          "962:                         (\"hfs_cat_traverse: length of key %d in index node %d too large (%d vs %\"",
          "",
          "[Removed Lines]",
          "959:                 if ((keylen) > nodesize) {",
          "",
          "[Added Lines]",
          "960:                 if (keylen > nodesize - rec_off) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}