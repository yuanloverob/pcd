{
  "cve_id": "CVE-2021-29594",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. TFLite's convolution code(https://github.com/tensorflow/tensorflow/blob/09c73bca7d648e961dd05898292d91a8322a9d45/tensorflow/lite/kernels/conv.cc) has multiple division where the divisor is controlled by the user and not checked to be non-zero. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "ff489d95a9006be080ad14feb378f2b4dac35552",
  "patch_info": {
    "commit_hash": "ff489d95a9006be080ad14feb378f2b4dac35552",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/ff489d95a9006be080ad14feb378f2b4dac35552",
    "files": [
      "tensorflow/lite/kernels/conv.cc"
    ],
    "message": "Prevent division by 0.\n\nPiperOrigin-RevId: 370962554\nChange-Id: I0b9b62f4d8e1046dd88f9433f8dfeaf61a901680",
    "before_after_code_files": [
      "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc": [
      "File: tensorflow/lite/kernels/conv.cc -> tensorflow/lite/kernels/conv.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "548:     const int height = NumElements(input) / channels_in;",
      "549:     int scaling_dims[1] = {height};",
      "550:     if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "548:     TF_LITE_ENSURE(context, channels_in != 0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "587:       input_offsets->type = kTfLiteInt32;",
      "588:       input_offsets->allocation_type = kTfLiteArenaRw;",
      "590:       const int height = NumElements(input) / channels_in;",
      "591:       const int input_offset_dims[1] = {height};",
      "592:       if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "591:       TF_LITE_ENSURE(context, channels_in != 0);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "886:   CalculateActivationRange(params->activation, &output_activation_min,",
      "887:                            &output_activation_max);",
      "890:   const int batch_size = SizeOfDimension(input, 0);",
      "891:   TfLiteTensor* quantized_input_tensor;",
      "892:   TF_LITE_ENSURE_OK(context,",
      "893:                     GetTemporarySafe(context, node, data->input_quantized_index,",
      "",
      "[Removed Lines]",
      "889:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
      "",
      "[Added Lines]",
      "892:   TF_LITE_ENSURE(context, batch_size != 0);",
      "893:   const int input_size = NumElements(input) / batch_size;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "989:   CalculateActivationRange(params->activation, &output_activation_min,",
      "990:                            &output_activation_max);",
      "993:   const int batch_size = SizeOfDimension(input, 0);",
      "995:   const float* input_ptr = GetTensorData<float>(input);",
      "996:   TfLiteTensor* quantized_input_tensor;",
      "",
      "[Removed Lines]",
      "992:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
      "",
      "[Added Lines]",
      "996:   TF_LITE_ENSURE(context, batch_size != 0);",
      "997:   const int input_size = NumElements(input) / batch_size;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1194fd66eb6fddbf8a7704645d972c73eaa89c0a",
      "candidate_info": {
        "commit_hash": "1194fd66eb6fddbf8a7704645d972c73eaa89c0a",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/1194fd66eb6fddbf8a7704645d972c73eaa89c0a",
        "files": [
          "tensorflow/lite/kernels/conv.cc"
        ],
        "message": "CherryPick]:Prevent division by 0.",
        "before_after_code_files": [
          "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc": [
          "File: tensorflow/lite/kernels/conv.cc -> tensorflow/lite/kernels/conv.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "504:     const int height = NumElements(input) / channels_in;",
          "505:     int scaling_dims[1] = {height};",
          "506:     if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "504:     TF_LITE_ENSURE(context, channels_in != 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "539:       input_offsets->type = kTfLiteInt32;",
          "540:       input_offsets->allocation_type = kTfLiteArenaRw;",
          "542:       const int height = NumElements(input) / channels_in;",
          "543:       const int input_offset_dims[1] = {height};",
          "544:       if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "543:       TF_LITE_ENSURE(context, channels_in != 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "800:   CalculateActivationRange(params->activation, &output_activation_min,",
          "801:                            &output_activation_max);",
          "804:   const int batch_size = SizeOfDimension(input, 0);",
          "805:   int8_t* quantized_input_ptr_batch = GetTensorData<int8_t>(",
          "806:       GetTemporary(context, node, data->input_quantized_index));",
          "807:   float* scaling_factors_ptr = GetTensorData<float>(",
          "",
          "[Removed Lines]",
          "803:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
          "",
          "[Added Lines]",
          "806:   TF_LITE_ENSURE(context, batch_size != 0);",
          "807:   const int input_size = NumElements(input) / batch_size;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "878:   CalculateActivationRange(params->activation, &output_activation_min,",
          "879:                            &output_activation_max);",
          "882:   const int batch_size = SizeOfDimension(input, 0);",
          "884:   const float* input_ptr = GetTensorData<float>(input);",
          "885:   int8_t* quantized_input_ptr_batch = GetTensorData<int8_t>(",
          "",
          "[Removed Lines]",
          "881:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
          "",
          "[Added Lines]",
          "885:   TF_LITE_ENSURE(context, batch_size != 0);",
          "886:   const int input_size = NumElements(input) / batch_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25a52a9ab07de66982cb84093668b1e94ba7c59f",
      "candidate_info": {
        "commit_hash": "25a52a9ab07de66982cb84093668b1e94ba7c59f",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/25a52a9ab07de66982cb84093668b1e94ba7c59f",
        "files": [
          "tensorflow/lite/kernels/conv.cc"
        ],
        "message": "CherryPick]:Prevent division by 0.",
        "before_after_code_files": [
          "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc": [
          "File: tensorflow/lite/kernels/conv.cc -> tensorflow/lite/kernels/conv.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "499:     const int height = NumElements(input) / channels_in;",
          "500:     int scaling_dims[1] = {height};",
          "501:     if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "499:     TF_LITE_ENSURE(context, channels_in != 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "534:       input_offsets->type = kTfLiteInt32;",
          "535:       input_offsets->allocation_type = kTfLiteArenaRw;",
          "537:       const int height = NumElements(input) / channels_in;",
          "538:       const int input_offset_dims[1] = {height};",
          "539:       if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538:       TF_LITE_ENSURE(context, channels_in != 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "756:   CalculateActivationRange(params->activation, &output_activation_min,",
          "757:                            &output_activation_max);",
          "760:   const int batch_size = SizeOfDimension(input, 0);",
          "761:   int8_t* quantized_input_ptr_batch = GetTensorData<int8_t>(",
          "762:       GetTemporary(context, node, data->input_quantized_index));",
          "763:   float* scaling_factors_ptr = GetTensorData<float>(",
          "",
          "[Removed Lines]",
          "759:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
          "",
          "[Added Lines]",
          "762:   TF_LITE_ENSURE(context, batch_size != 0);",
          "763:   const int input_size = NumElements(input) / batch_size;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "833:   CalculateActivationRange(params->activation, &output_activation_min,",
          "834:                            &output_activation_max);",
          "837:   const int batch_size = SizeOfDimension(input, 0);",
          "839:   float* input_ptr = GetTensorData<float>(input);",
          "840:   int8_t* quantized_input_ptr_batch = GetTensorData<int8_t>(",
          "",
          "[Removed Lines]",
          "836:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
          "",
          "[Added Lines]",
          "840:   TF_LITE_ENSURE(context, batch_size != 0);",
          "841:   const int input_size = NumElements(input) / batch_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37c13da53a00217ceab094c9eec0362c4234657e",
      "candidate_info": {
        "commit_hash": "37c13da53a00217ceab094c9eec0362c4234657e",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/37c13da53a00217ceab094c9eec0362c4234657e",
        "files": [
          "tensorflow/lite/kernels/conv.cc"
        ],
        "message": "CherryPick]:Prevent division by 0.",
        "before_after_code_files": [
          "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc": [
          "File: tensorflow/lite/kernels/conv.cc -> tensorflow/lite/kernels/conv.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "430:     const int height = NumElements(input) / channels_in;",
          "431:     int scaling_dims[1] = {height};",
          "432:     if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "430:     TF_LITE_ENSURE(context, channels_in != 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "449:       input_offsets->type = kTfLiteInt32;",
          "450:       input_offsets->allocation_type = kTfLiteArenaRw;",
          "452:       const int height = NumElements(input) / channels_in;",
          "453:       int scaling_dims[1] = {height};",
          "454:       if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1, scaling_dims)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "453:       TF_LITE_ENSURE(context, channels_in != 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "656:   CalculateActivationRange(params->activation, &output_activation_min,",
          "657:                            &output_activation_max);",
          "660:   const int batch_size = SizeOfDimension(input, 0);",
          "661:   const TfLiteTensor* input_quantized =",
          "662:       GetTemporary(context, node, data->input_quantized_index);",
          "663:   int8_t* quantized_input_ptr_batch = input_quantized->data.int8;",
          "",
          "[Removed Lines]",
          "659:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
          "",
          "[Added Lines]",
          "662:   TF_LITE_ENSURE(context, batch_size != 0);",
          "663:   const int input_size = NumElements(input) / batch_size;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "726:   CalculateActivationRange(params->activation, &output_activation_min,",
          "727:                            &output_activation_max);",
          "730:   const int batch_size = SizeOfDimension(input, 0);",
          "732:   float* input_ptr = GetTensorData<float>(input);",
          "733:   int8_t* quantized_input_ptr_batch = GetTensorData<int8_t>(",
          "",
          "[Removed Lines]",
          "729:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
          "",
          "[Added Lines]",
          "733:   TF_LITE_ENSURE(context, batch_size != 0);",
          "734:   const int input_size = NumElements(input) / batch_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "173c166d57d5552310510a54a2826c7693c9e093",
      "candidate_info": {
        "commit_hash": "173c166d57d5552310510a54a2826c7693c9e093",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/173c166d57d5552310510a54a2826c7693c9e093",
        "files": [
          "tensorflow/lite/kernels/conv.cc"
        ],
        "message": "Prevent division by 0.\n\nPiperOrigin-RevId: 370962554\nChange-Id: I0b9b62f4d8e1046dd88f9433f8dfeaf61a901680",
        "before_after_code_files": [
          "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc": [
          "File: tensorflow/lite/kernels/conv.cc -> tensorflow/lite/kernels/conv.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "548:     const int height = NumElements(input) / channels_in;",
          "549:     int scaling_dims[1] = {height};",
          "550:     if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "548:     TF_LITE_ENSURE(context, channels_in != 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "587:       input_offsets->type = kTfLiteInt32;",
          "588:       input_offsets->allocation_type = kTfLiteArenaRw;",
          "590:       const int height = NumElements(input) / channels_in;",
          "591:       const int input_offset_dims[1] = {height};",
          "592:       if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "591:       TF_LITE_ENSURE(context, channels_in != 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "886:   CalculateActivationRange(params->activation, &output_activation_min,",
          "887:                            &output_activation_max);",
          "890:   const int batch_size = SizeOfDimension(input, 0);",
          "891:   TfLiteTensor* quantized_input_tensor;",
          "892:   TF_LITE_ENSURE_OK(context,",
          "893:                     GetTemporarySafe(context, node, data->input_quantized_index,",
          "",
          "[Removed Lines]",
          "889:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
          "",
          "[Added Lines]",
          "892:   TF_LITE_ENSURE(context, batch_size != 0);",
          "893:   const int input_size = NumElements(input) / batch_size;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "989:   CalculateActivationRange(params->activation, &output_activation_min,",
          "990:                            &output_activation_max);",
          "993:   const int batch_size = SizeOfDimension(input, 0);",
          "995:   const float* input_ptr = GetTensorData<float>(input);",
          "996:   TfLiteTensor* quantized_input_tensor;",
          "",
          "[Removed Lines]",
          "992:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
          "",
          "[Added Lines]",
          "996:   TF_LITE_ENSURE(context, batch_size != 0);",
          "997:   const int input_size = NumElements(input) / batch_size;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f3314acc9863fa5156075ec476d1037c0769215",
      "candidate_info": {
        "commit_hash": "3f3314acc9863fa5156075ec476d1037c0769215",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/3f3314acc9863fa5156075ec476d1037c0769215",
        "files": [
          "tensorflow/lite/kernels/conv.cc"
        ],
        "message": "Prevent division by 0.\n\nPiperOrigin-RevId: 370962554\nChange-Id: I0b9b62f4d8e1046dd88f9433f8dfeaf61a901680",
        "before_after_code_files": [
          "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc"
          ],
          "candidate": [
            "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/lite/kernels/conv.cc||tensorflow/lite/kernels/conv.cc": [
          "File: tensorflow/lite/kernels/conv.cc -> tensorflow/lite/kernels/conv.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:     const int height = NumElements(input) / channels_in;",
          "525:     int scaling_dims[1] = {height};",
          "526:     if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "524:     TF_LITE_ENSURE(context, channels_in != 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "563:       input_offsets->type = kTfLiteInt32;",
          "564:       input_offsets->allocation_type = kTfLiteArenaRw;",
          "566:       const int height = NumElements(input) / channels_in;",
          "567:       const int input_offset_dims[1] = {height};",
          "568:       if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "567:       TF_LITE_ENSURE(context, channels_in != 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "827:   CalculateActivationRange(params->activation, &output_activation_min,",
          "828:                            &output_activation_max);",
          "831:   const int batch_size = SizeOfDimension(input, 0);",
          "832:   TfLiteTensor* quantized_input_tensor;",
          "833:   TF_LITE_ENSURE_OK(context,",
          "834:                     GetTemporarySafe(context, node, data->input_quantized_index,",
          "",
          "[Removed Lines]",
          "830:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
          "",
          "[Added Lines]",
          "833:   TF_LITE_ENSURE(context, batch_size != 0);",
          "834:   const int input_size = NumElements(input) / batch_size;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "921:   CalculateActivationRange(params->activation, &output_activation_min,",
          "922:                            &output_activation_max);",
          "925:   const int batch_size = SizeOfDimension(input, 0);",
          "927:   const float* input_ptr = GetTensorData<float>(input);",
          "928:   TfLiteTensor* quantized_input_tensor;",
          "",
          "[Removed Lines]",
          "924:   const int input_size = NumElements(input) / SizeOfDimension(input, 0);",
          "",
          "[Added Lines]",
          "928:   TF_LITE_ENSURE(context, batch_size != 0);",
          "929:   const int input_size = NumElements(input) / batch_size;",
          "",
          "---------------"
        ]
      }
    }
  ]
}