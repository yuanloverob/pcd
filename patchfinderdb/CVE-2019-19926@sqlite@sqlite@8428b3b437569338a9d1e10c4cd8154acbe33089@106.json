{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c49d43a787ae451df9e5483f6cef5f41aa95ed84",
      "candidate_info": {
        "commit_hash": "c49d43a787ae451df9e5483f6cef5f41aa95ed84",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c49d43a787ae451df9e5483f6cef5f41aa95ed84",
        "files": [
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the fts3DecodeIntArray() function so that it will not read off the end of the buffer it is handed.  Any unread integers are set to zero.\n\nFossilOrigin-Name: 666cf8f6b39ae1f72e82b45e9cacba23caf61370ca0c695b3b14452accbb1a0d",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3329: ){",
          "3337:   }",
          "3338: }",
          "",
          "[Removed Lines]",
          "3330:   int i, j;",
          "3331:   UNUSED_PARAMETER(nBuf);",
          "3332:   for(i=j=0; i<N; i++){",
          "3333:     sqlite3_int64 x;",
          "3334:     j += sqlite3Fts3GetVarint(&zBuf[j], &x);",
          "3335:     assert(j<=nBuf);",
          "3336:     a[i] = (u32)(x & 0xffffffff);",
          "",
          "[Added Lines]",
          "3330:   int i = 0;",
          "3331:   if( nBuf && (zBuf[nBuf-1]&0x80)==0 ){",
          "3332:     int j;",
          "3333:     for(i=j=0; i<N && j<nBuf; i++){",
          "3334:       sqlite3_int64 x;",
          "3335:       j += sqlite3Fts3GetVarint(&zBuf[j], &x);",
          "3336:       a[i] = (u32)(x & 0xffffffff);",
          "3337:     }",
          "3339:   while( i<N ) a[i++] = 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 931278b257b12ac14fc8fbc82c6dc88ce4ac4b8e0d668543e68f0289d825daa1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5978a7a525c58e1402b87ba957d287f650e0f9ab",
      "candidate_info": {
        "commit_hash": "5978a7a525c58e1402b87ba957d287f650e0f9ab",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5978a7a525c58e1402b87ba957d287f650e0f9ab",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/window.c",
          "test/view.test",
          "test/window9.test"
        ],
        "message": "Ensure that columns of views and sub-queries that are expressions with no affinity are not assigned BLOB affinity. This matches the documentation. Fix for [61c853857f40da49].\n\nFossilOrigin-Name: e15a0977ddfad3d0f4c7654c5665ff10830c25b20ecf6ef500b1ba23fb89e31f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c",
          "test/view.test||test/view.test",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a29f2a7d07beff64e489e8f824babc6228c4a499fadc0ee701caa60a63baadcd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2160:       addrTop = sqlite3VdbeCurrentAddr(v) + 1;",
          "2161:       sqlite3VdbeAddOp3(v, OP_InitCoroutine, regYield, 0, addrTop);",
          "2162:       if( pParse->nErr ) return;",
          "2164:       if( pSelTab==0 ) return;",
          "2165:       assert( p->aCol==0 );",
          "2166:       p->nCol = pSelTab->nCol;",
          "",
          "[Removed Lines]",
          "2163:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect);",
          "",
          "[Added Lines]",
          "2163:       pSelTab = sqlite3ResultSetOfSelect(pParse, pSelect, SQLITE_AFF_BLOB);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2424: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "2425:     xAuth = db->xAuth;",
          "2426:     db->xAuth = 0;",
          "2428:     db->xAuth = xAuth;",
          "2429: #else",
          "2431: #endif",
          "2432:     pParse->nTab = n;",
          "2433:     if( pTable->pCheck ){",
          "",
          "[Removed Lines]",
          "2427:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel);",
          "2430:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel);",
          "",
          "[Added Lines]",
          "2427:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, 0);",
          "2430:     pSelTab = sqlite3ResultSetOfSelect(pParse, pSel, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2443:        && pParse->nErr==0",
          "2444:        && pTable->nCol==pSel->pEList->nExpr",
          "2445:       ){",
          "2447:       }",
          "2448:     }else if( pSelTab ){",
          "",
          "[Removed Lines]",
          "2446:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel);",
          "",
          "[Added Lines]",
          "2446:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTable, pSel, 0);",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:     }",
          "89:     for(n=0; n<pIdx->nColumn; n++){",
          "90:       i16 x = pIdx->aiColumn[n];",
          "91:       if( x>=0 ){",
          "93:       }else if( x==XN_ROWID ){",
          "95:       }else{",
          "97:         assert( x==XN_EXPR );",
          "98:         assert( pIdx->aColExpr!=0 );",
          "99:         aff = sqlite3ExprAffinity(pIdx->aColExpr->a[n].pExpr);",
          "102:       }",
          "103:     }",
          "104:     pIdx->zColAff[n] = 0;",
          "105:   }",
          "",
          "[Removed Lines]",
          "92:         pIdx->zColAff[n] = pTab->aCol[x].affinity;",
          "94:         pIdx->zColAff[n] = SQLITE_AFF_INTEGER;",
          "96:         char aff;",
          "100:         if( aff==0 ) aff = SQLITE_AFF_BLOB;",
          "101:         pIdx->zColAff[n] = aff;",
          "",
          "[Added Lines]",
          "91:       char aff;",
          "93:         aff = pTab->aCol[x].affinity;",
          "95:         aff = SQLITE_AFF_INTEGER;",
          "101:       if( aff==0 ) aff = SQLITE_AFF_BLOB;",
          "102:       pIdx->zColAff[n] = aff;",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2068:         pCol->colFlags |= COLFLAG_HASTYPE;",
          "2069:       }",
          "2070:     }",
          "2072:     pColl = sqlite3ExprCollSeq(pParse, p);",
          "2073:     if( pColl && pCol->zColl==0 ){",
          "2074:       pCol->zColl = sqlite3DbStrDup(db, pColl->zName);",
          "",
          "[Removed Lines]",
          "2071:     if( pCol->affinity==0 ) pCol->affinity = SQLITE_AFF_BLOB;",
          "",
          "[Added Lines]",
          "2072:     if( pCol->affinity==0 ) pCol->affinity = aff;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2085:   Table *pTab;",
          "2086:   sqlite3 *db = pParse->db;",
          "2087:   u64 savedFlags;",
          "",
          "[Removed Lines]",
          "2084: Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){",
          "",
          "[Added Lines]",
          "2085: Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect, char aff){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2101:   pTab->zName = 0;",
          "2102:   pTab->nRowLogEst = 200; assert( 200==sqlite3LogEst(1048576) );",
          "2103:   sqlite3ColumnsFromExprList(pParse, pSelect->pEList, &pTab->nCol, &pTab->aCol);",
          "2105:   pTab->iPKey = -1;",
          "2106:   if( db->mallocFailed ){",
          "2107:     sqlite3DeleteTable(db, pTab);",
          "",
          "[Removed Lines]",
          "2104:   sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSelect);",
          "",
          "[Added Lines]",
          "2105:   sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSelect, aff);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5195:       Select *pSel = pFrom->pSelect;",
          "5196:       if( pSel ){",
          "5197:         while( pSel->pPrior ) pSel = pSel->pPrior;",
          "5199:       }",
          "5200:     }",
          "5201:   }",
          "",
          "[Removed Lines]",
          "5198:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSel);",
          "",
          "[Added Lines]",
          "5199:         sqlite3SelectAddColumnTypeAndCollation(pParse, pTab, pSel, 0);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3911: void sqlite3CommitInternalChanges(sqlite3*);",
          "3912: void sqlite3DeleteColumnNames(sqlite3*,Table*);",
          "3913: int sqlite3ColumnsFromExprList(Parse*,ExprList*,i16*,Column**);",
          "3916: void sqlite3OpenMasterTable(Parse *, int);",
          "3917: Index *sqlite3PrimaryKeyIndex(Table*);",
          "3918: i16 sqlite3ColumnOfIndex(Index*, i16);",
          "",
          "[Removed Lines]",
          "3914: void sqlite3SelectAddColumnTypeAndCollation(Parse*,Table*,Select*);",
          "3915: Table *sqlite3ResultSetOfSelect(Parse*,Select*);",
          "",
          "[Added Lines]",
          "3914: void sqlite3SelectAddColumnTypeAndCollation(Parse*,Table*,Select*,char);",
          "3915: Table *sqlite3ResultSetOfSelect(Parse*,Select*,char);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "994:       p->pSrc->a[0].pSelect = pSub;",
          "995:       sqlite3SrcListAssignCursors(pParse, p->pSrc);",
          "996:       pSub->selFlags |= SF_Expanded;",
          "998:       if( pTab2==0 ){",
          "999:         rc = SQLITE_NOMEM;",
          "1000:       }else{",
          "",
          "[Removed Lines]",
          "997:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub);",
          "",
          "[Added Lines]",
          "997:       pTab2 = sqlite3ResultSetOfSelect(pParse, pSub, 0);",
          "",
          "---------------"
        ],
        "test/view.test||test/view.test": [
          "File: test/view.test -> test/view.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "724:   1 1 3 3",
          "725: }",
          "727: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727: #-------------------------------------------------------------------------",
          "728: reset_db",
          "729: do_execsql_test view-27.0 {",
          "730:   CREATE TABLE t0(c0 TEXT, c1);",
          "731:   INSERT INTO t0(c0, c1) VALUES (-1, 0);",
          "732:   CREATE VIEW v0(c0, c1) AS SELECT t0.c0, AVG(t0.c1) FROM t0;",
          "733: }",
          "735: do_execsql_test view-27.1 {",
          "736:   SELECT c0, typeof(c0), affinity(c0), c1, typeof(c1), affinity(c1) FROM v0;",
          "737: } {",
          "738:   -1   text text",
          "739:    0.0 real none",
          "740: }",
          "742: do_execsql_test view-27.2 { SELECT c0<c1 FROM v0 } 1",
          "743: do_execsql_test view-27.3 { SELECT c1<c0 FROM v0 } 0",
          "744: do_execsql_test view-27.4 {",
          "745:   SELECT 1 FROM v0 WHERE c1<c0",
          "746: } {}",
          "747: do_execsql_test view-27.5 {",
          "748:   SELECT 1 FROM v0 WHERE c0<c1",
          "749: } {1}",
          "751: do_execsql_test view-27.6 {",
          "752:   SELECT c0<c1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0)",
          "753: } 1",
          "754: do_execsql_test view-27.7 {",
          "755:   SELECT c1<c0 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0)",
          "756: } 0",
          "757: do_execsql_test view-27.8 {",
          "758:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c1<c0",
          "759: } {}",
          "760: do_execsql_test view-27.9 {",
          "761:   SELECT 1 FROM (SELECT t0.c0 AS c0, AVG(t0.c1) AS c1 FROM t0) WHERE c0<c1",
          "762: } {1}",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:       );",
          "132: } {1 {sub-select returns 3 columns - expected 1}}",
          "135: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134: #-------------------------------------------------------------------------",
          "135: reset_db",
          "136: do_execsql_test 4.0 {",
          "137:   CREATE TABLE t1(a, b TEXT);",
          "138:   INSERT INTO t1 VALUES('A', 1), ('A', 2), ('2', 1), ('2', 2);",
          "139: }",
          "141: do_execsql_test 4.1.1 {",
          "142:   SELECT b, b=count(*), '1,2'                   FROM t1 GROUP BY b;",
          "143: } {1 0 1,2 2 1 1,2}",
          "144: do_execsql_test 4.1.2 {",
          "145:   SELECT b, b=count(*), group_concat(b) OVER () FROM t1 GROUP BY b;",
          "146: } {1 0 1,2 2 1 1,2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "feb5dcf1a67073c8d48f05d0ee8658139ea403b0",
      "candidate_info": {
        "commit_hash": "feb5dcf1a67073c8d48f05d0ee8658139ea403b0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/feb5dcf1a67073c8d48f05d0ee8658139ea403b0",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts3/fts3_snippet.c",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts4aa.test"
        ],
        "message": "Better detection of corruption in the %_stat and %_docsize shadow tables of FTS3.\n\nFossilOrigin-Name: 1e449687881f4d388e54a0e51bcabba41ab10cf7e596ff65e31e88a23c70d497",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts4aa.test||test/fts4aa.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "391:   return (int)(p - pStart);",
          "392: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "400: int sqlite3Fts3GetVarintBounded(",
          "401:   const char *pBuf,",
          "402:   const char *pEnd,",
          "403:   sqlite_int64 *v",
          "404: ){",
          "405:   const unsigned char *p = (const unsigned char*)pBuf;",
          "406:   const unsigned char *pStart = p;",
          "407:   const unsigned char *pX = (const unsigned char*)pEnd;",
          "408:   u64 b = 0;",
          "409:   int shift;",
          "410:   for(shift=0; shift<=63; shift+=7){",
          "411:     u64 c = p<pX ? *p : 0;",
          "412:     p++;",
          "413:     b += (c&0x7F) << shift;",
          "414:     if( (c & 0x80)==0 ) break;",
          "415:   }",
          "417:   return (int)(p - pStart);",
          "418: }",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "577: void sqlite3Fts3ErrMsg(char**,const char*,...);",
          "578: int sqlite3Fts3PutVarint(char *, sqlite3_int64);",
          "579: int sqlite3Fts3GetVarint(const char *, sqlite_int64 *);",
          "580: int sqlite3Fts3GetVarint32(const char *, int *);",
          "581: int sqlite3Fts3VarintLen(sqlite3_uint64);",
          "582: void sqlite3Fts3Dequote(char *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "580: int sqlite3Fts3GetVarintBounded(const char*,const char*,sqlite3_int64*);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1038:   Fts3Table *pTab,",
          "1039:   sqlite3_stmt **ppStmt,",
          "1040:   sqlite3_int64 *pnDoc,",
          "1042: ){",
          "1043:   sqlite3_stmt *pStmt;",
          "1044:   const char *a;",
          "1045:   sqlite3_int64 nDoc;",
          "1047:   if( !*ppStmt ){",
          "1048:     int rc = sqlite3Fts3SelectDoctotal(pTab, ppStmt);",
          "",
          "[Removed Lines]",
          "1041:   const char **paLen",
          "",
          "[Added Lines]",
          "1041:   const char **paLen,",
          "1042:   const char **ppEnd",
          "1046:   const char *pEnd;",
          "1048:   int n;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1051:   pStmt = *ppStmt;",
          "1052:   assert( sqlite3_data_count(pStmt)==1 );",
          "1054:   a = sqlite3_column_blob(pStmt, 0);",
          "1059:   if( paLen ) *paLen = a;",
          "1060:   return SQLITE_OK;",
          "1061: }",
          "",
          "[Removed Lines]",
          "1055:   a += sqlite3Fts3GetVarint(a, &nDoc);",
          "1056:   if( nDoc==0 ) return FTS_CORRUPT_VTAB;",
          "",
          "[Added Lines]",
          "1058:   n = sqlite3_column_bytes(pStmt, 0);",
          "1059:   if( n==0 ){",
          "1060:     return FTS_CORRUPT_VTAB;",
          "1061:   }",
          "1063:   if( a==0 ){",
          "1064:     return SQLITE_NOMEM;",
          "1065:   }",
          "1066:   pEnd = a + n;",
          "1067:   a += sqlite3Fts3GetVarintBounded(a, pEnd, &nDoc);",
          "1068:   if( nDoc==0 || a>pEnd ){",
          "1069:     return FTS_CORRUPT_VTAB;",
          "1070:   }",
          "1074:   if( ppEnd ) *ppEnd = pEnd;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1237:       case FTS3_MATCHINFO_NDOC:",
          "1238:         if( bGlobal ){",
          "1239:           sqlite3_int64 nDoc = 0;",
          "1241:           pInfo->aMatchinfo[0] = (u32)nDoc;",
          "1242:         }",
          "1243:         break;",
          "",
          "[Removed Lines]",
          "1240:           rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &nDoc, 0);",
          "",
          "[Added Lines]",
          "1255:           rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &nDoc, 0, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1246:         if( bGlobal ){",
          "1251:           if( rc==SQLITE_OK ){",
          "1252:             int iCol;",
          "1253:             for(iCol=0; iCol<pInfo->nCol; iCol++){",
          "1254:               u32 iVal;",
          "1255:               sqlite3_int64 nToken;",
          "1256:               a += sqlite3Fts3GetVarint(a, &nToken);",
          "1257:               iVal = (u32)(((u32)(nToken&0xffffffff)+nDoc/2)/nDoc);",
          "1258:               pInfo->aMatchinfo[iCol] = iVal;",
          "1259:             }",
          "",
          "[Removed Lines]",
          "1250:           rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &nDoc, &a);",
          "",
          "[Added Lines]",
          "1266:           rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &nDoc, &a, &pEnd);",
          "1273:               if( a>pEnd ){",
          "1274:                 rc = SQLITE_CORRUPT_VTAB;",
          "1275:                 break;",
          "1276:               }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1267:         if( rc==SQLITE_OK ){",
          "1268:           int iCol;",
          "1269:           const char *a = sqlite3_column_blob(pSelectDocsize, 0);",
          "1270:           for(iCol=0; iCol<pInfo->nCol; iCol++){",
          "1271:             sqlite3_int64 nToken;",
          "1273:             pInfo->aMatchinfo[iCol] = (u32)nToken;",
          "1274:           }",
          "1275:         }",
          "",
          "[Removed Lines]",
          "1272:             a += sqlite3Fts3GetVarint(a, &nToken);",
          "",
          "[Added Lines]",
          "1290:           const char *pEnd = a + sqlite3_column_bytes(pSelectDocsize, 0);",
          "1293:             a += sqlite3Fts3GetVarintBounded(a, pEnd, &nToken);",
          "1294:             if( a>pEnd ){",
          "1295:               rc = SQLITE_CORRUPT_VTAB;",
          "1296:               break;",
          "1297:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1300:         if( rc!=SQLITE_OK ) break;",
          "1301:         if( bGlobal ){",
          "1302:           if( pCsr->pDeferred ){",
          "1304:             if( rc!=SQLITE_OK ) break;",
          "1305:           }",
          "1306:           rc = fts3ExprIterate(pExpr, fts3ExprGlobalHitsCb,(void*)pInfo);",
          "",
          "[Removed Lines]",
          "1303:             rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &pInfo->nDoc, 0);",
          "",
          "[Added Lines]",
          "1328:             rc = fts3MatchinfoSelectDoctotal(pTab, &pSelect, &pInfo->nDoc,0,0);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8bd75bf636f72f32d66c6c38e1918f27daf2f13290f00a001f41d50838bbda47",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts4aa.test||test/fts4aa.test": [
          "File: test/fts4aa.test -> test/fts4aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:   } $r",
          "192: }",
          "194: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194: # 2019-11-16 https://bugs.chromium.org/p/chromium/issues/detail?id=1025472",
          "195: #",
          "196: db close",
          "197: sqlite3 db :memory:",
          "198: do_execsql_test fts4aa-5.10 {",
          "199:   CREATE VIRTUAL TABLE t1 USING fts4(a, b, c, d, e,f,g,h,i,j,k,l,m,n,o,p,q,r);",
          "200:   INSERT INTO t1 VALUES('X Y', '2', '3', '4', '5', '6', '7', '8', '9', '0',",
          "201:                         'a','b','c','d','e','f','g','h');",
          "202:   UPDATE t1_docsize SET size=x'88' WHERE docid=1;",
          "203: } {}",
          "204: do_catchsql_test fts4aa-5.20 {",
          "205:   SELECT quote(matchinfo(t1, 'l')) FROM t1 WHERE t1 MATCH 'X Y';",
          "206: } {1 {database disk image is malformed}}",
          "207: do_execsql_test fts4aa-5.30 {",
          "208:   DROP TABLE t1;",
          "209:   CREATE VIRTUAL TABLE t1 USING fts4(a,b,c,d);",
          "210:   INSERT INTO t1 VALUES('one two','three four','five six','seven eight');",
          "211: } {}",
          "212: do_catchsql_test fts4aa-5.40 {",
          "213:   UPDATE t1_stat SET value=x'01010101' WHERE id=0;",
          "214:   SELECT quote(matchinfo(t1,'a')) FROM t1 WHERE t1 MATCH 'one two';",
          "215: } {1 {database disk image is malformed}}",
          "216: do_catchsql_test fts4aa-5.50 {",
          "217:   UPDATE t1_stat SET value=x'010101' WHERE id=0;",
          "218:   SELECT quote(matchinfo(t1,'a')) FROM t1 WHERE t1 MATCH 'one two';",
          "219: } {1 {database disk image is malformed}}",
          "220: do_catchsql_test fts4aa-5.60 {",
          "221:   UPDATE t1_stat SET value=x'01' WHERE id=0;",
          "222:   SELECT quote(matchinfo(t1,'a')) FROM t1 WHERE t1 MATCH 'one two';",
          "223: } {1 {database disk image is malformed}}",
          "224: do_catchsql_test fts4aa-5.70 {",
          "225:   UPDATE t1_stat SET value=x'' WHERE id=0;",
          "226:   SELECT quote(matchinfo(t1,'a')) FROM t1 WHERE t1 MATCH 'one two';",
          "227: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1735f91df4db4d012154af319245392555c01911",
      "candidate_info": {
        "commit_hash": "1735f91df4db4d012154af319245392555c01911",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1735f91df4db4d012154af319245392555c01911",
        "files": [
          "ext/misc/fileio.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Improved detection and reporting of errors in the readfile() extension SQL function.\n\nFossilOrigin-Name: d2f0b5a483869d39f5c5814c9d6df3d3b8a46d582b4dcf0cf11e23b707c4213e",
        "before_after_code_files": [
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: static void readFileContents(sqlite3_context *ctx, const char *zName){",
          "127:   FILE *in;",
          "129:   void *pBuf;",
          "131:   in = fopen(zName, \"rb\");",
          "133:   fseek(in, 0, SEEK_END);",
          "134:   nIn = ftell(in);",
          "135:   rewind(in);",
          "136:   pBuf = sqlite3_malloc( nIn );",
          "138:     sqlite3_result_blob(ctx, pBuf, nIn, sqlite3_free);",
          "139:   }else{",
          "140:     sqlite3_free(pBuf);",
          "141:   }",
          "142:   fclose(in);",
          "",
          "[Removed Lines]",
          "128:   long nIn;",
          "132:   if( in==0 ) return;",
          "137:   if( pBuf && 1==fread(pBuf, nIn, 1, in) ){",
          "",
          "[Added Lines]",
          "135:   sqlite3_int64 nIn;",
          "137:   sqlite3 *db;",
          "138:   int mxBlob;",
          "141:   if( in==0 ){",
          "143:     return;",
          "144:   }",
          "148:   db = sqlite3_context_db_handle(ctx);",
          "149:   mxBlob = sqlite3_limit(db, SQLITE_LIMIT_LENGTH, -1);",
          "150:   if( nIn>mxBlob ){",
          "151:     sqlite3_result_error_code(ctx, SQLITE_TOOBIG);",
          "152:     fclose(in);",
          "153:     return;",
          "154:   }",
          "156:   if( pBuf==0 ){",
          "157:     sqlite3_result_error_nomem(ctx);",
          "158:     fclose(in);",
          "159:     return;",
          "160:   }",
          "161:   if( 1==fread(pBuf, nIn, 1, in) ){",
          "164:     sqlite3_result_error_code(ctx, SQLITE_IOERR);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2a47387ba6aa3c294607b7641aa1c4cf70a7b27a861e1098c2f79a38e5b7036a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4fcb9caa60c3939cd562574f744a8514737ae7fb",
      "candidate_info": {
        "commit_hash": "4fcb9caa60c3939cd562574f744a8514737ae7fb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4fcb9caa60c3939cd562574f744a8514737ae7fb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/nulls1.test"
        ],
        "message": "Do not pass ORDER BY clauses with non-standard NULL handling to virtual table implementations.\n\nFossilOrigin-Name: a9a82ee88d2d12209a674bd19167277aa91a6912e7a8bbf3714f90d559307fee",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/nulls1.test||test/nulls1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 75d665a494dd7d6e77d5a80af386ee5accc0a53416d5493424dc0fef6c7b01a0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "933:     for(i=0; i<n; i++){",
          "934:       Expr *pExpr = pOrderBy->a[i].pExpr;",
          "935:       if( pExpr->op!=TK_COLUMN || pExpr->iTable!=pSrc->iCursor ) break;",
          "936:     }",
          "937:     if( i==n){",
          "938:       nOrderBy = n;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "936:       if( pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL ) break;",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:   400 300",
          "119: }",
          "121: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121: #-------------------------------------------------------------------------",
          "122: ifcapable vtab {",
          "123:   register_echo_module db",
          "124:   do_execsql_test 4.0 {",
          "125:     CREATE TABLE tx(a INTEGER PRIMARY KEY, b, c);",
          "126:     CREATE INDEX i1 ON tx(b);",
          "127:     INSERT INTO tx VALUES(1, 1, 1);",
          "128:     INSERT INTO tx VALUES(2, NULL, 2);",
          "129:     INSERT INTO tx VALUES(3, 3, 3);",
          "130:     INSERT INTO tx VALUES(4, NULL, 4);",
          "131:     INSERT INTO tx VALUES(5, 5, 5);",
          "132:     CREATE VIRTUAL TABLE te USING echo(tx);",
          "133:   }",
          "135:   do_execsql_test 4.1 {",
          "136:     SELECT * FROM tx ORDER BY b NULLS FIRST;",
          "137:   } {2 {} 2  4 {} 4  1 1 1  3 3 3  5 5 5}",
          "138:   do_execsql_test 4.2 {",
          "139:     SELECT * FROM te ORDER BY b NULLS FIRST;",
          "140:   } {2 {} 2  4 {} 4  1 1 1  3 3 3  5 5 5}",
          "142:   do_execsql_test 4.3 {",
          "143:     SELECT * FROM tx ORDER BY b NULLS LAST;",
          "144:   } {1 1 1  3 3 3  5 5 5  2 {} 2  4 {} 4}",
          "145:   do_execsql_test 4.4 {",
          "146:     SELECT * FROM te ORDER BY b NULLS LAST;",
          "147:   } {1 1 1  3 3 3  5 5 5  2 {} 2  4 {} 4}",
          "148: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}