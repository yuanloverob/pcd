{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e0f20b46fbac80976a71e0a8f618976be3661e19",
      "candidate_info": {
        "commit_hash": "e0f20b46fbac80976a71e0a8f618976be3661e19",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e0f20b46fbac80976a71e0a8f618976be3661e19",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "src/vdbemem.c"
        ],
        "message": "Performance improvement on the OP_Variable opcode.\n\nFossilOrigin-Name: 1dc7993bb6957587a6c63142e97b8e4137c3d81bbfd724f86048e0894bcb429b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 27160df7b3a04ac59d06013ede1d2ee27a4ace86a525ecc333bf7f8b5c580afb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1236:     goto too_big;",
          "1237:   }",
          "1238:   pOut = &aMem[pOp->p2];",
          "1241:   UPDATE_MAX_BLOBSIZE(pOut);",
          "1242:   break;",
          "1243: }",
          "",
          "[Removed Lines]",
          "1239:   sqlite3VdbeMemShallowCopy(pOut, pVar, MEM_Static);",
          "1240:   pOut->flags |= MEM_FromBind;",
          "",
          "[Added Lines]",
          "1239:   if( VdbeMemDynamic(pOut) ) sqlite3VdbeMemSetNull(pOut);",
          "1240:   memcpy(pOut, pVar, MEMCELLSIZE);",
          "1241:   pOut->flags &= ~(MEM_Dyn|MEM_Ephem);",
          "1242:   pOut->flags |= MEM_Static|MEM_FromBind;",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:               ((p->flags&MEM_Static)!=0 ? 1 : 0) <= 1 );",
          "61:                            |MEM_Dyn|MEM_Ephem|MEM_Static))==0 );",
          "62:     }else{",
          "",
          "[Removed Lines]",
          "60:       assert( (p->flags & ~(MEM_Null|MEM_Term|MEM_Subtype",
          "",
          "[Added Lines]",
          "60:       assert( (p->flags & ~(MEM_Null|MEM_Term|MEM_Subtype|MEM_FromBind",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0d985985077695cc2a620c42194857f657c1a3e4",
      "candidate_info": {
        "commit_hash": "0d985985077695cc2a620c42194857f657c1a3e4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0d985985077695cc2a620c42194857f657c1a3e4",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqliteInt.h"
        ],
        "message": "*Remove* the macros, not just comment them out.\n\nFossilOrigin-Name: e5dc2939d3e8694d648fc9b73b1174da5b1349e20fbb9cf1c91268939f308f89",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3ef0d44edd0354cda9b6237f992cb67a2170ee8f1f464b1f38ac36e3a133bc71",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1767: #define LIKEFUNC(zName, nArg, arg, flags) \\",
          "1768:   {nArg, SQLITE_FUNC_CONSTANT|SQLITE_UTF8|flags, \\",
          "1769:    (void *)arg, 0, likeFunc, 0, 0, 0, #zName, {0} }",
          "1778: #define WAGGREGATE(zName, nArg, arg, nc, xStep, xFinal, xValue, xInverse, f) \\",
          "1779:   {nArg, SQLITE_UTF8|(nc*SQLITE_FUNC_NEEDCOLL)|f, \\",
          "1780:    SQLITE_INT_TO_PTR(arg), 0, xStep,xFinal,xValue,xInverse,#zName, {0}}",
          "",
          "[Removed Lines]",
          "1771: #define AGGREGATE(zName, nArg, arg, nc, xStep, xFinal, xValue) \\",
          "1772:   {nArg, SQLITE_UTF8|(nc*SQLITE_FUNC_NEEDCOLL), \\",
          "1773:    SQLITE_INT_TO_PTR(arg), 0, xStep,xFinal,xValue,0,#zName, {0}}",
          "1774: #define AGGREGATE2(zName, nArg, arg, nc, xStep, xFinal, extraFlags) \\",
          "1775:   {nArg, SQLITE_UTF8|(nc*SQLITE_FUNC_NEEDCOLL)|extraFlags, \\",
          "1776:    SQLITE_INT_TO_PTR(arg), 0, xStep,xFinal,xFinal,0,#zName, {0}}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14c865e8592ff73e1e1ca2070ff660771ba20e78",
      "candidate_info": {
        "commit_hash": "14c865e8592ff73e1e1ca2070ff660771ba20e78",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/14c865e8592ff73e1e1ca2070ff660771ba20e78",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/indexexpr1.test"
        ],
        "message": "Fix the sqliteExprImpliesExpr() routine so that it recognizes that \"(NULL IS FALSE) IS FALSE\" doe not implie \"NULL NOT NULL\". Ticket [9080b6227fabb466]\n\nFossilOrigin-Name: da01ba4fa47c6508b31533ccd769e637af04bd37f51463372fbc6c848d892a4d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/indexexpr1.test||test/indexexpr1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3c690b2b05b7338f3325c50a0750c6023e1173afa4388e836ecb2cc49f19a0ac",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4938: ){",
          "4939:   assert( p );",
          "4940:   assert( pNN );",
          "4942:   switch( p->op ){",
          "4943:     case TK_IN: {",
          "4944:       if( seenNot && ExprHasProperty(p, EP_xIsSelect) ) return 0;",
          "",
          "[Removed Lines]",
          "4941:   if( sqlite3ExprCompare(pParse, p, pNN, iTab)==0 ) return 1;",
          "",
          "[Added Lines]",
          "4941:   if( sqlite3ExprCompare(pParse, p, pNN, iTab)==0 ){",
          "4942:     return pNN->op!=TK_NULL;",
          "4943:   }",
          "",
          "---------------"
        ],
        "test/indexexpr1.test||test/indexexpr1.test": [
          "File: test/indexexpr1.test -> test/indexexpr1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "445:   SELECT b FROM t1 WHERE lower(a)='01234' ORDER BY +b;",
          "446: } {}",
          "449: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "448: # 2019-08-09 https://www.sqlite.org/src/info/9080b6227fabb466",
          "449: # ExprImpliesExpr theorem prover bug:",
          "450: # \"(NULL IS FALSE) IS FALSE\" does not imply \"NULL IS NULL\"",
          "451: #",
          "452: do_execsql_test indexexpr-1700 {",
          "453:   DROP TABLE IF EXISTS t0;",
          "454:   CREATE TABLE t0(c0);",
          "455:   INSERT INTO t0(c0) VALUES (0);",
          "456:   CREATE INDEX i0 ON t0(NULL > c0) WHERE (NULL NOT NULL);",
          "457:   SELECT * FROM t0 WHERE ((NULL IS FALSE) IS FALSE);",
          "458: } {0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fe9a832e806ea2796a8f362f21168725c610687b",
      "candidate_info": {
        "commit_hash": "fe9a832e806ea2796a8f362f21168725c610687b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fe9a832e806ea2796a8f362f21168725c610687b",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/json104.test"
        ],
        "message": "Fix a problem with handling with handling quoted path elements in extension functions json_set() and json_insert() reported on the mailing list.\n\nFossilOrigin-Name: 45bfcb88e71451a656982e217375e257fc8e68374349c2984be1266bf86fb8cf",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/json104.test||test/json104.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1123:       u32 iStart, iLabel;",
          "1124:       JsonNode *pNode;",
          "1125:       iStart = jsonParseAddNode(pParse, JSON_OBJECT, 2, 0);",
          "1127:       zPath += i;",
          "1128:       pNode = jsonLookupAppend(pParse, zPath, pApnd, pzErr);",
          "1129:       if( pParse->oom ) return 0;",
          "",
          "[Removed Lines]",
          "1126:       iLabel = jsonParseAddNode(pParse, JSON_STRING, i, zPath);",
          "",
          "[Added Lines]",
          "1126:       iLabel = jsonParseAddNode(pParse, JSON_STRING, nKey, zKey);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a61db8ff6713d66778a0500ca4049229c081a3ae95991f05eba09729434444b3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/json104.test||test/json104.test": [
          "File: test/json104.test -> test/json104.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "17: ifcapable !json1 {",
          "18:   finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: set testprefix json104",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "125:   SELECT json_patch('{}','{\"a\":{\"bb\":{\"ccc\":null}}}');",
          "126: } {{{\"a\":{\"bb\":{}}}}}",
          "130: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "129: #-------------------------------------------------------------------------",
          "131: do_execsql_test 401 {",
          "132:   CREATE TABLE obj(x);",
          "133:   INSERT INTO obj VALUES('{\"a\":1,\"b\":2}');",
          "134:   SELECT * FROM obj;",
          "135: } {{{\"a\":1,\"b\":2}}}",
          "136: do_execsql_test 402 {",
          "137:   UPDATE obj SET x = json_insert(x, '$.c', 3);",
          "138:   SELECT * FROM obj;",
          "139: } {{{\"a\":1,\"b\":2,\"c\":3}}}",
          "140: do_execsql_test 403 {",
          "141:   SELECT json_extract(x, '$.b') FROM obj;",
          "142:   SELECT json_extract(x, '$.\"b\"') FROM obj;",
          "143: } {2 2}",
          "144: do_execsql_test 404 {",
          "145:   UPDATE obj SET x = json_set(x, '$.\"b\"', 555);",
          "146:   SELECT json_extract(x, '$.b') FROM obj;",
          "147:   SELECT json_extract(x, '$.\"b\"') FROM obj;",
          "148: } {555 555}",
          "149: do_execsql_test 405 {",
          "150:   UPDATE obj SET x = json_set(x, '$.\"d\"', 4);",
          "151:   SELECT json_extract(x, '$.\"d\"') FROM obj;",
          "152: } {4}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1722baaf80218bcad87597803510c4e214a5811",
      "candidate_info": {
        "commit_hash": "f1722baaf80218bcad87597803510c4e214a5811",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f1722baaf80218bcad87597803510c4e214a5811",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/parse.y",
          "src/wherecode.c",
          "tool/addopcodes.tcl"
        ],
        "message": "Eliminate the tool/addopcodes.tcl script.  The purpose of that script was to keep the number of parser codes below 256 in order to save parser table space. But we have long since blown through that ceiling so the addopcodes.tcl script was just needless complexity. There is no longer any reason to keep it around.\n\nFossilOrigin-Name: d272819298083ebbde57962a2938925b1aaa1caf03e48bb3ea26ad91e0461d84",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/wherecode.c||src/wherecode.c",
          "tool/addopcodes.tcl||tool/addopcodes.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1051: #",
          "1052: parse.h: parse.c",
          "1055:  cp $(TOP)/src/parse.y .",
          "1057:  ./lemon$(BEXE) $(OPT_FEATURE_FLAGS) $(OPTS) parse.y",
          "1061: sqlite3.h: $(TOP)/src/sqlite.h.in $(TOP)/manifest mksourceid$(BEXE) $(TOP)/VERSION",
          "1062:  $(TCLSH_CMD) $(TOP)/tool/mksqlite3h.tcl $(TOP) >sqlite3.h",
          "",
          "[Removed Lines]",
          "1054: parse.c: $(TOP)/src/parse.y lemon$(BEXE) $(TOP)/tool/addopcodes.tcl",
          "1056:  rm -f parse.h",
          "1058:  mv parse.h parse.h.temp",
          "1059:  $(TCLSH_CMD) $(TOP)/tool/addopcodes.tcl parse.h.temp >parse.h",
          "",
          "[Added Lines]",
          "1054: parse.c: $(TOP)/src/parse.y lemon$(BEXE)",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2139: #",
          "2140: parse.h: parse.c",
          "2143:  del /Q parse.y parse.h parse.h.temp 2>NUL",
          "2144:  copy $(TOP)\\src\\parse.y .",
          "2145:  .\\lemon.exe $(REQ_FEATURE_FLAGS) $(OPT_FEATURE_FLAGS) $(EXT_FEATURE_FLAGS) $(OPTS) parse.y",
          "2149: $(SQLITE3H): $(TOP)\\src\\sqlite.h.in $(TOP)\\manifest mksourceid.exe $(TOP)\\VERSION",
          "2150:  $(TCLSH_CMD) $(TOP)\\tool\\mksqlite3h.tcl $(TOP:\\=/) > $(SQLITE3H) $(MKSQLITE3H_ARGS)",
          "",
          "[Removed Lines]",
          "2142: parse.c: $(TOP)\\src\\parse.y lemon.exe $(TOP)\\tool\\addopcodes.tcl",
          "2146:  move parse.h parse.h.temp",
          "2147:  $(TCLSH_CMD) $(TOP)\\tool\\addopcodes.tcl parse.h.temp > parse.h",
          "",
          "[Added Lines]",
          "2142: parse.c: $(TOP)\\src\\parse.y lemon.exe",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "716: #",
          "717: parse.h: parse.c",
          "720:  cp $(TOP)/src/parse.y .",
          "722:  ./lemon -s $(OPTS) parse.y",
          "726: sqlite3.h: $(TOP)/src/sqlite.h.in $(TOP)/manifest mksourceid $(TOP)/VERSION $(TOP)/ext/rtree/sqlite3rtree.h",
          "727:  tclsh $(TOP)/tool/mksqlite3h.tcl $(TOP) >sqlite3.h",
          "",
          "[Removed Lines]",
          "719: parse.c: $(TOP)/src/parse.y lemon $(TOP)/tool/addopcodes.tcl",
          "721:  rm -f parse.h",
          "723:  mv parse.h parse.h.temp",
          "724:  tclsh $(TOP)/tool/addopcodes.tcl parse.h.temp >parse.h",
          "",
          "[Added Lines]",
          "719: parse.c: $(TOP)/src/parse.y lemon",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cbc67de5a3937fa65811ed7c13e870699c895660dc2132cf9d3cf5d83364e344",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "857:     p = sqlite3DbMallocRawNN(pParse->db, sizeof(Expr));",
          "858:     if( p ){",
          "859:       memset(p, 0, sizeof(Expr));",
          "861:       p->iAgg = -1;",
          "862:     }",
          "863:     sqlite3ExprAttachSubtrees(pParse->db, p, pLeft, pRight);",
          "",
          "[Removed Lines]",
          "860:       p->op = op & TKFLG_MASK;",
          "",
          "[Added Lines]",
          "860:       p->op = op & 0xff;",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1744: filter_opt(A) ::= .                            { A = 0; }",
          "1745: filter_opt(A) ::= FILTER LP WHERE expr(X) RP.  { A = X; }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1752: %token",
          "1768: .",
          "1774: %include {",
          "1775: #if TK_SPAN>255",
          "1776: # error too many tokens in the grammar",
          "1777: #endif",
          "1778: }",
          "1786: %token SPACE ILLEGAL.",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1967:         pAndExpr = sqlite3ExprAnd(db, pAndExpr, pExpr);",
          "1968:       }",
          "1969:       if( pAndExpr ){",
          "1971:       }",
          "1972:     }",
          "",
          "[Removed Lines]",
          "1970:         pAndExpr = sqlite3PExpr(pParse, TK_AND|TKFLG_DONTFOLD, 0, pAndExpr);",
          "",
          "[Added Lines]",
          "1975:         pAndExpr = sqlite3PExpr(pParse, TK_AND|0x10000, 0, pAndExpr);",
          "",
          "---------------"
        ],
        "tool/addopcodes.tcl||tool/addopcodes.tcl": [
          "File: tool/addopcodes.tcl -> tool/addopcodes.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}