{
  "cve_id": "CVE-2019-10678",
  "cve_desc": "Domoticz before 4.10579 neglects to categorize \\n and \\r as insecure argument options.",
  "repo": "domoticz/domoticz",
  "patch_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
  "patch_info": {
    "commit_hash": "2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "repo": "domoticz/domoticz",
    "commit_url": "https://github.com/domoticz/domoticz/commit/2119afbe74ee0c914c1d5c4c859c594c08b0ad42",
    "files": [
      "main/Helper.cpp"
    ],
    "message": "Do not allow enters/returns in arguments (thanks to Fabio Carretto)",
    "before_after_code_files": [
      "main/Helper.cpp||main/Helper.cpp"
    ]
  },
  "patch_diff": {
    "main/Helper.cpp||main/Helper.cpp": [
      "File: main/Helper.cpp -> main/Helper.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1014:  \"$\",",
      "1015:  \"<\",",
      "1016:  \">\",",
      "1017:  NULL",
      "1018: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1017:  \"\\n\",",
      "1018:  \"\\r\",",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "377be4a48cd35605a23e6328ce6d1ae474121349",
      "candidate_info": {
        "commit_hash": "377be4a48cd35605a23e6328ce6d1ae474121349",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/377be4a48cd35605a23e6328ce6d1ae474121349",
        "files": [
          "History.txt",
          "main/WebServer.cpp",
          "www/html5.appcache",
          "www/i18n/domoticz-ar.json.gz",
          "www/i18n/domoticz-bg.json.gz",
          "www/i18n/domoticz-bs.json.gz",
          "www/i18n/domoticz-ca.json.gz",
          "www/i18n/domoticz-cs.json.gz",
          "www/i18n/domoticz-da.json.gz",
          "www/i18n/domoticz-de.json.gz",
          "www/i18n/domoticz-el.json.gz",
          "www/i18n/domoticz-en.json.gz",
          "www/i18n/domoticz-es.json.gz",
          "www/i18n/domoticz-et.json.gz",
          "www/i18n/domoticz-fa.json.gz",
          "www/i18n/domoticz-fi.json.gz",
          "www/i18n/domoticz-fr.json.gz",
          "www/i18n/domoticz-he.json.gz",
          "www/i18n/domoticz-hu.json.gz",
          "www/i18n/domoticz-is.json.gz",
          "www/i18n/domoticz-it.json.gz",
          "www/i18n/domoticz-lt.json.gz",
          "www/i18n/domoticz-lv.json.gz",
          "www/i18n/domoticz-mk.json.gz",
          "www/i18n/domoticz-nl.json.gz",
          "www/i18n/domoticz-no.json.gz",
          "www/i18n/domoticz-pl.json.gz",
          "www/i18n/domoticz-pt.json.gz",
          "www/i18n/domoticz-ro.json.gz",
          "www/i18n/domoticz-ru.json.gz",
          "www/i18n/domoticz-sk.json.gz",
          "www/i18n/domoticz-sl.json.gz",
          "www/i18n/domoticz-sq.json.gz",
          "www/i18n/domoticz-sr.json.gz",
          "www/i18n/domoticz-sv.json.gz",
          "www/i18n/domoticz-th.json.gz",
          "www/i18n/domoticz-tr.json.gz",
          "www/i18n/domoticz-uk.json.gz",
          "www/i18n/domoticz-zh.json.gz",
          "www/i18n/domoticz-zh_TW.json.gz"
        ],
        "message": "Implemented: Starting implementation of Taiwanese language (big thanks to berry lin!)",
        "before_after_code_files": [
          "main/WebServer.cpp||main/WebServer.cpp",
          "www/html5.appcache||www/html5.appcache"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "118:  { \"sl\", \"Slovenian\" },",
          "119:  { \"es\", \"Spanish\" },",
          "120:  { \"sv\", \"Swedish\" },",
          "121:  { \"tr\", \"Turkish\" },",
          "122:  { \"uk\", \"Ukrainian\" },",
          "123:  { NULL, NULL }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "121:  { \"zh_TW\", \"Taiwanese\" },",
          "",
          "---------------"
        ],
        "www/html5.appcache||www/html5.appcache": [
          "File: www/html5.appcache -> www/html5.appcache",
          "--- Hunk 1 ---",
          "[Context before]",
          "467: i18n/domoticz-sv.json",
          "468: i18n/domoticz-th.json",
          "469: i18n/domoticz-tr.json",
          "470: i18n/domoticz-uk.json",
          "471: i18n/domoticz-zh.json",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "470: i18n/domoticz-zh_TW.json",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
      "candidate_info": {
        "commit_hash": "ee70db46f81afa582c96b887b73bcd2a86feda00",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/ee70db46f81afa582c96b887b73bcd2a86feda00",
        "files": [
          "main/WebServer.cpp"
        ],
        "message": "Fixed possible SQL Injection Vulnerability (Thanks to Fabio Carretto!)",
        "before_after_code_files": [
          "main/WebServer.cpp||main/WebServer.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/WebServer.cpp||main/WebServer.cpp": [
          "File: main/WebServer.cpp -> main/WebServer.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10772:     return;",
          "10773:    }",
          "10774:    std::vector<std::vector<std::string> > result;",
          "10776:    if (result.empty())",
          "10777:     return;",
          "10778:    reply::set_content(&rep, result[0][0].begin(), result[0][0].end());",
          "",
          "[Removed Lines]",
          "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%s\", idx.c_str());",
          "",
          "[Added Lines]",
          "10775:    result = m_sql.safe_queryBlob(\"SELECT Image FROM Floorplans WHERE ID=%d\", atol(idx.c_str()));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "38339b24778c5a181598a9bedc0bff22ebbea068",
      "candidate_info": {
        "commit_hash": "38339b24778c5a181598a9bedc0bff22ebbea068",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/38339b24778c5a181598a9bedc0bff22ebbea068",
        "files": [
          "hardware/XiaomiGateway.cpp"
        ],
        "message": "Fix compiling for Win32 caused by XiaomiGateway patch",
        "before_after_code_files": [
          "hardware/XiaomiGateway.cpp||hardware/XiaomiGateway.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/XiaomiGateway.cpp||hardware/XiaomiGateway.cpp": [
          "File: hardware/XiaomiGateway.cpp -> hardware/XiaomiGateway.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "12: #include <openssl/aes.h>",
          "13: #include <boost/asio.hpp>",
          "14: #include <boost/bind.hpp>",
          "18: Xiaomi (Aqara) makes a smart home gateway/hub that has support",
          "",
          "[Removed Lines]",
          "15: #include <ifaddrs.h>",
          "",
          "[Added Lines]",
          "16: #ifndef WIN32",
          "17:  #include <ifaddrs.h>",
          "18: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "111: int XiaomiGateway::get_local_ipaddr(std::vector<std::string>& ip_addrs)",
          "112: {",
          "113:  struct ifaddrs *myaddrs, *ifa;",
          "114:  void *in_addr;",
          "115:  char buf[64];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116: #ifdef WIN32",
          "117:  return 0;",
          "118: #else",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:  {",
          "120:   _log.Log(LOG_ERROR, \"getifaddrs failed! (when trying to determine local ip address)\");",
          "121:   perror(\"getifaddrs\");",
          "123:  }",
          "125:  for (ifa = myaddrs; ifa != NULL; ifa = ifa->ifa_next)",
          "",
          "[Removed Lines]",
          "122:   exit(1);",
          "",
          "[Added Lines]",
          "128:   return 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "163:  freeifaddrs(myaddrs);",
          "164:  return count;",
          "165: }",
          "168: XiaomiGateway::XiaomiGateway(const int ID)",
          "169: {",
          "170:  m_HwdID = ID;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c37ac69dd3d9e4b60c3253a54e0985b6bbd23d55",
      "candidate_info": {
        "commit_hash": "c37ac69dd3d9e4b60c3253a54e0985b6bbd23d55",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/c37ac69dd3d9e4b60c3253a54e0985b6bbd23d55",
        "files": [
          "main/mainworker.cpp"
        ],
        "message": "Removed dB for RFXtrx Noise Level",
        "before_after_code_files": [
          "main/mainworker.cpp||main/mainworker.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "main/mainworker.cpp||main/mainworker.cpp": [
          "File: main/mainworker.cpp -> main/mainworker.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "2585:     if (FWType >= FWtypePro1)",
          "2586:     {",
          "2587:      pMyHardware->m_NoiseLevel = NoiseLevel;",
          "2589:      WriteMessage(szTmp);",
          "2590:     }",
          "2591:     if (FWType == FWtypeProXL1)",
          "",
          "[Removed Lines]",
          "2588:      sprintf(szTmp, \"Noise Level: %d dB\", pMyHardware->m_NoiseLevel);",
          "",
          "[Added Lines]",
          "2588:      sprintf(szTmp, \"Noise Level: %d\", pMyHardware->m_NoiseLevel);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74656b6e5c7586d6464d9a79d5150b5dad9fe9a6",
      "candidate_info": {
        "commit_hash": "74656b6e5c7586d6464d9a79d5150b5dad9fe9a6",
        "repo": "domoticz/domoticz",
        "commit_url": "https://github.com/domoticz/domoticz/commit/74656b6e5c7586d6464d9a79d5150b5dad9fe9a6",
        "files": [
          "hardware/openzwave/Defs.h",
          "hardware/openzwave/Group.h",
          "hardware/openzwave/Manager.h",
          "hardware/openzwave/platform/Log.h",
          "hardware/openzwave/value_classes/Value.h",
          "hardware/openzwave/value_classes/ValueBool.h",
          "hardware/openzwave/value_classes/ValueByte.h",
          "hardware/openzwave/value_classes/ValueInt.h",
          "hardware/openzwave/value_classes/ValueList.h",
          "hardware/openzwave/value_classes/ValueRaw.h",
          "hardware/openzwave/value_classes/ValueShort.h"
        ],
        "message": "Updated OZW header files",
        "before_after_code_files": [
          "hardware/openzwave/Defs.h||hardware/openzwave/Defs.h",
          "hardware/openzwave/Group.h||hardware/openzwave/Group.h",
          "hardware/openzwave/Manager.h||hardware/openzwave/Manager.h",
          "hardware/openzwave/platform/Log.h||hardware/openzwave/platform/Log.h",
          "hardware/openzwave/value_classes/Value.h||hardware/openzwave/value_classes/Value.h",
          "hardware/openzwave/value_classes/ValueBool.h||hardware/openzwave/value_classes/ValueBool.h",
          "hardware/openzwave/value_classes/ValueByte.h||hardware/openzwave/value_classes/ValueByte.h",
          "hardware/openzwave/value_classes/ValueInt.h||hardware/openzwave/value_classes/ValueInt.h",
          "hardware/openzwave/value_classes/ValueList.h||hardware/openzwave/value_classes/ValueList.h",
          "hardware/openzwave/value_classes/ValueRaw.h||hardware/openzwave/value_classes/ValueRaw.h",
          "hardware/openzwave/value_classes/ValueShort.h||hardware/openzwave/value_classes/ValueShort.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/domoticz/domoticz/pull/3180"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "hardware/openzwave/Defs.h||hardware/openzwave/Defs.h": [
          "File: hardware/openzwave/Defs.h -> hardware/openzwave/Defs.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: # if defined OPENZWAVE_MAKEDLL // Create the dynamic library.",
          "40: #  define OPENZWAVE_EXPORT    __declspec(dllexport)",
          "41: # elif defined OPENZWAVE_USEDLL // Use the dynamic library",
          "",
          "[Removed Lines]",
          "38: #if (defined _WINDOWS || defined WIN32 || defined _MSC_VER) && !defined MINGW",
          "",
          "[Added Lines]",
          "38: #if (defined _WINDOWS || defined WIN32 || defined _MSC_VER) && (!defined MINGW && !defined __MINGW32__ && !defined __MINGW64__)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188: #define snprintf sprintf_s",
          "189: #define strcasecmp _stricmp",
          "190: #define sscanf sscanf_s",
          "192: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: #define strncpy strncpy_s",
          "",
          "---------------"
        ],
        "hardware/openzwave/Group.h||hardware/openzwave/Group.h": [
          "File: hardware/openzwave/Group.h -> hardware/openzwave/Group.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "101:    ~AssociationCommand();",
          "103:   private:",
          "105:    uint8* m_data;",
          "106:   };",
          "",
          "[Removed Lines]",
          "104:    uint8 m_length;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hardware/openzwave/Manager.h||hardware/openzwave/Manager.h": [
          "File: hardware/openzwave/Manager.h -> hardware/openzwave/Manager.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1644:   };",
          "1646: OPENZWAVE_EXPORT_WARNINGS_OFF",
          "1648: OPENZWAVE_EXPORT_WARNINGS_ON",
          "",
          "[Removed Lines]",
          "1647:   list<Watcher*>  m_watchers;          // List of all the registered watchers.",
          "1649:   Mutex*    m_notificationMutex;",
          "",
          "[Added Lines]",
          "1647:   list<Watcher*>     m_watchers;       // List of all the registered watchers.",
          "1648:   list<list<Watcher*>::iterator*> m_watcherIterators;     // Iterators currently operating on the list of watchers",
          "1650:   Mutex*       m_notificationMutex;",
          "",
          "---------------"
        ],
        "hardware/openzwave/platform/Log.h||hardware/openzwave/platform/Log.h": [
          "File: hardware/openzwave/platform/Log.h -> hardware/openzwave/platform/Log.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:   static Log* s_instance;",
          "184:   Mutex*  m_logMutex;",
          "185:  };",
          "186: } // namespace OpenZWave",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "184:   static bool s_customLogger;",
          "",
          "---------------"
        ],
        "hardware/openzwave/value_classes/Value.h||hardware/openzwave/value_classes/Value.h": [
          "File: hardware/openzwave/value_classes/Value.h -> hardware/openzwave/value_classes/Value.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:   void SetCheckingChange( bool _check ) { m_checkChange = _check; }",
          "100:   void OnValueRefreshed();   // A value in a device has been refreshed",
          "101:   void OnValueChanged();    // The refreshed value actually changed",
          "104:   int32  m_min;",
          "105:   int32  m_max;",
          "",
          "[Removed Lines]",
          "102:   int VerifyRefreshedValue( void* _originalValue, void* _checkValue, void* _newValue, ValueID::ValueType _type, int _length = 0 );",
          "",
          "[Added Lines]",
          "102:   int VerifyRefreshedValue( void* _originalValue, void* _checkValue, void* _newValue, ValueID::ValueType _type, int _originalValueLength = 0, int _checkValueLength = 0, int _newValueLength = 0 );",
          "",
          "---------------"
        ],
        "hardware/openzwave/value_classes/ValueBool.h||hardware/openzwave/value_classes/ValueBool.h": [
          "File: hardware/openzwave/value_classes/ValueBool.h -> hardware/openzwave/value_classes/ValueBool.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:  private:",
          "64:   bool m_value;    // the current index in the m_items vector",
          "65:   bool m_valueCheck;   // the previous value (used for double-checking spurious value reads)",
          "67:  };",
          "69: } // namespace OpenZWave",
          "",
          "[Removed Lines]",
          "66:   bool m_newValue;    // a new value to be set on the appropriate device",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hardware/openzwave/value_classes/ValueByte.h||hardware/openzwave/value_classes/ValueByte.h": [
          "File: hardware/openzwave/value_classes/ValueByte.h -> hardware/openzwave/value_classes/ValueByte.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  private:",
          "63:   uint8 m_value;    // the current value",
          "64:   uint8 m_valueCheck;   // the previous value (used for double-checking spurious value reads)",
          "66:  };",
          "68: } // namespace OpenZWave",
          "",
          "[Removed Lines]",
          "65:   uint8 m_newValue;    // a new value to be set on the appropriate device",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hardware/openzwave/value_classes/ValueInt.h||hardware/openzwave/value_classes/ValueInt.h": [
          "File: hardware/openzwave/value_classes/ValueInt.h -> hardware/openzwave/value_classes/ValueInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  private:",
          "63:   int32 m_value;    // the current value",
          "64:   int32 m_valueCheck;   // the previous value (used for double-checking spurious value reads)",
          "66:  };",
          "68: } // namespace OpenZWave",
          "",
          "[Removed Lines]",
          "65:   int32 m_newValue;    // a new value to be set on the appropriate device",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hardware/openzwave/value_classes/ValueList.h||hardware/openzwave/value_classes/ValueList.h": [
          "File: hardware/openzwave/value_classes/ValueList.h -> hardware/openzwave/value_classes/ValueList.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "82:   vector<Item> m_items;",
          "83:   int32   m_valueIdx;     // the current index in the m_items vector",
          "84:   int32   m_valueIdxCheck;   // the previous index in the m_items vector (used for double-checking spurious value reads)",
          "86:   uint8   m_size;",
          "87:  };",
          "",
          "[Removed Lines]",
          "85:   int32   m_newValueIdx;    // a new value to be set on the appropriate device",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "hardware/openzwave/value_classes/ValueRaw.h||hardware/openzwave/value_classes/ValueRaw.h": [
          "File: hardware/openzwave/value_classes/ValueRaw.h -> hardware/openzwave/value_classes/ValueRaw.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:   uint8* m_value;    // the current value",
          "65:   uint8 m_valueLength;    // fixed length for this instance",
          "66:   uint8* m_valueCheck;    // the previous value (used for double-checking spurious value reads)",
          "68:  };",
          "70: } // namespace OpenZWave",
          "",
          "[Removed Lines]",
          "67:   uint8* m_newValue;    // a new value to be set on the appropriate device",
          "",
          "[Added Lines]",
          "67:   uint8 m_valueCheckLength;   // m_valueCheck array length",
          "",
          "---------------"
        ],
        "hardware/openzwave/value_classes/ValueShort.h||hardware/openzwave/value_classes/ValueShort.h": [
          "File: hardware/openzwave/value_classes/ValueShort.h -> hardware/openzwave/value_classes/ValueShort.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  private:",
          "63:   int16 m_value;    // the current value",
          "64:   int16 m_valueCheck;   // the previous value (used for double-checking spurious value reads)",
          "66:  };",
          "68: } // namespace OpenZWave",
          "",
          "[Removed Lines]",
          "65:   int16 m_newValue;    // a new value to be set on the appropriate device",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}