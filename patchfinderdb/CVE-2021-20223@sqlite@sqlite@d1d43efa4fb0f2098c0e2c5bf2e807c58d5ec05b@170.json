{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b77da374ab6dfeaac5def640da91f219da7fa5c0",
      "candidate_info": {
        "commit_hash": "b77da374ab6dfeaac5def640da91f219da7fa5c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b77da374ab6dfeaac5def640da91f219da7fa5c0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/resolve.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/sqliteInt.h"
        ],
        "message": "Invert the UNTRUSTED_SCHEMA setting to be TRUSTED_SCHEMA.\n\nFossilOrigin-Name: f5fcf1fbc6473f8e91315b14d67745f2748010641b7463d1f4ca51e6fdf97462",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/resolve.c||src/resolve.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5dfa33a09e608d26549e46c58a5563754688af68fa99415f9a548e91f81aca7c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "887:         { SQLITE_DBCONFIG_DQS_DDL,               SQLITE_DqsDDL         },",
          "888:         { SQLITE_DBCONFIG_DQS_DML,               SQLITE_DqsDML         },",
          "889:         { SQLITE_DBCONFIG_LEGACY_FILE_FORMAT,    SQLITE_LegacyFileFmt  },",
          "891:       };",
          "892:       unsigned int i;",
          "",
          "[Removed Lines]",
          "890:         { SQLITE_DBCONFIG_UNTRUSTED_SCHEMA,      SQLITE_UnsafeSchema   },",
          "",
          "[Added Lines]",
          "890:         { SQLITE_DBCONFIG_TRUSTED_SCHEMA,        SQLITE_TrustedSchema  },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3127:                  | SQLITE_EnableTrigger",
          "3128:                  | SQLITE_EnableView",
          "3129:                  | SQLITE_CacheSpill",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3130: #if !defined(SQLITE_TRUSTED_SCHEMA) || SQLITE_TRUSTED_SCHEMA+0!=0",
          "3131:                  | SQLITE_TrustedSchema",
          "3132: #endif",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "891:          && !IN_RENAME_OBJECT",
          "892:         ){",
          "893:           if( (pDef->funcFlags & SQLITE_FUNC_DIRECT)!=0",
          "895:           ){",
          "",
          "[Removed Lines]",
          "894:            || (pParse->db->flags & SQLITE_UnsafeSchema)!=0",
          "",
          "[Added Lines]",
          "894:            || (pParse->db->flags & SQLITE_TrustedSchema)==0",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7173:         { \"no_ckpt_on_close\",   SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE      },",
          "7174:         { \"reset_database\",     SQLITE_DBCONFIG_RESET_DATABASE        },",
          "7175:         { \"trigger_eqp\",        SQLITE_DBCONFIG_TRIGGER_EQP           },",
          "7177:         { \"writable_schema\",    SQLITE_DBCONFIG_WRITABLE_SCHEMA       },",
          "7178:     };",
          "7179:     int ii, v;",
          "",
          "[Removed Lines]",
          "7176:         { \"untrusted_schema\",   SQLITE_DBCONFIG_UNTRUSTED_SCHEMA      },",
          "",
          "[Added Lines]",
          "7176:         { \"trusted_schema\",     SQLITE_DBCONFIG_TRUSTED_SCHEMA        },",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1584: #define SQLITE_UnsafeSchema   0x00000080  /* Disallow unsafe functions and",
          "",
          "[Added Lines]",
          "1584: #define SQLITE_TrustedSchema  0x00000080  /* Allow unsafe functions and",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c39b121a95c10b4ba36cbde89606037aab8dfc9f",
      "candidate_info": {
        "commit_hash": "c39b121a95c10b4ba36cbde89606037aab8dfc9f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c39b121a95c10b4ba36cbde89606037aab8dfc9f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Clarification of the byte-order determination for UTF16 inputs to routines like sqlite3_bind_text16() and sqlite3_result_text16() and others that accept UTF16 input strings.\n\nFossilOrigin-Name: a42fdcf54bcbd72a301dad4a040346dc48e67cacab43479ec618f5c32108c55f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2b8c6b035a276029850de02651712a5fd69f4dfee45083d24b9d1f998004829b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "be3da24134f53a0c8f10291611af758dc0ced611",
      "candidate_info": {
        "commit_hash": "be3da24134f53a0c8f10291611af758dc0ced611",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/be3da24134f53a0c8f10291611af758dc0ced611",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "src/sqliteInt.h",
          "src/update.c",
          "src/vdbe.c",
          "src/vdbeInt.h",
          "src/vdbeaux.c",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c",
          "test/update.test"
        ],
        "message": "Add the OP_FinishSeek opcode which completes an OP_DeferredSeek if the seek has not already completed.  Also add the sqlite3WhereUsesDeferredSeek() interface to the query planner.  The UPDATE implementation adds an OP_FinishSeek before running the final OP_Insert if one is needed. Ticket [ec8abb025e78f40c] and also an assertion fault reported by Yongheng.\n\nFossilOrigin-Name: 21ef6e99331210b80fa7c71b4f02e8f768a748d01aef884368af2f6b51a067e0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/update.c||src/update.c",
          "src/vdbe.c||src/vdbe.c",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c",
          "test/update.test||test/update.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eeb76f621de2f930a548db0fbb9fe25b4479b73581826b8dfa2e63cd1f1ab783",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8658:     if( flags & BTREE_SAVEPOSITION ){",
          "8659:       assert( pCur->curFlags & BTCF_ValidNKey );",
          "8660:       assert( pX->nKey==pCur->info.nKey );",
          "8662:       assert( loc==0 );",
          "8663:     }",
          "8664: #endif",
          "",
          "[Removed Lines]",
          "8661:       assert( pCur->info.nSize!=0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4118: void sqlite3ExprCodeLoadIndexColumn(Parse*, Index*, int, int, int);",
          "4119: int sqlite3ExprCodeGetColumn(Parse*, Table*, int, int, int, u8);",
          "4120: void sqlite3ExprCodeGetColumnOfTable(Vdbe*, Table*, int, int, int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4118: int sqlite3WhereUsesDeferredSeek(WhereInfo*);",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "524:     pWInfo = 0;",
          "525:     eOnePass = ONEPASS_SINGLE;",
          "526:     sqlite3ExprIfFalse(pParse, pWhere, labelBreak, SQLITE_JUMPIFNULL);",
          "527:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528:     bFinishSeek = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "552:     eOnePass = sqlite3WhereOkOnePass(pWInfo, aiCurOnePass);",
          "553:     if( eOnePass!=ONEPASS_SINGLE ){",
          "554:       sqlite3MultiWrite(pParse);",
          "555:       if( eOnePass==ONEPASS_MULTI ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "555:     bFinishSeek = sqlite3WhereUsesDeferredSeek(pWInfo);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "713:         testcase( i==31 );",
          "714:         testcase( i==32 );",
          "715:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, i, k);",
          "716:       }else{",
          "717:         sqlite3VdbeAddOp2(v, OP_Null, 0, k);",
          "718:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "719:         bFinishSeek = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "801:     sqlite3GenerateRowIndexDelete(pParse, pTab, iDataCur, iIdxCur, aRegIdx, -1);",
          "816:     }",
          "",
          "[Removed Lines]",
          "803: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "812:     if( eOnePass!=ONEPASS_OFF && (pTab->tabFlags & TF_HasVirtual)!=0 ){",
          "813:       int r1 = sqlite3GetTempReg(pParse);",
          "814:       sqlite3VdbeAddOp3(v, OP_Column, iDataCur, 0, r1);",
          "815:       sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
          "",
          "[Added Lines]",
          "812:     if( bFinishSeek ){",
          "813:       sqlite3VdbeAddOp1(v, OP_FinishSeek, iDataCur);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4827:   pC = p->apCsr[pOp->p1];",
          "4828:   assert( pC!=0 );",
          "4829:   assert( pC->eCurType==CURTYPE_BTREE );",
          "4830:   assert( pC->uc.pCursor!=0 );",
          "4831:   assert( (pOp->p5 & OPFLAG_ISNOOP) || pC->isTable );",
          "4832:   assert( pOp->p4type==P4_TABLE || pOp->p4type>=P4_STATIC );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4830:   assert( pC->deferredMoveto==0 );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5700:   break;",
          "5701: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5710: case OP_FinishSeek: {",
          "5713:   assert( pOp->p1>=0 && pOp->p1<p->nCursor );",
          "5714:   pC = p->apCsr[pOp->p1];",
          "5715:   if( pC->deferredMoveto ){",
          "5716:     rc = sqlite3VdbeFinishMoveto(pC);",
          "5717:     if( rc ) goto abort_due_to_error;",
          "5718:   }",
          "5719:   break;",
          "5720: }",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "483: void sqlite3VdbeError(Vdbe*, const char *, ...);",
          "484: void sqlite3VdbeFreeCursor(Vdbe *, VdbeCursor*);",
          "485: void sqliteVdbePopStack(Vdbe*,int);",
          "486: int sqlite3VdbeCursorMoveto(VdbeCursor**, int*);",
          "487: int sqlite3VdbeCursorRestore(VdbeCursor*);",
          "488: u32 sqlite3VdbeSerialTypeLen(u32);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "486: int SQLITE_NOINLINE sqlite3VdbeFinishMoveto(VdbeCursor*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3418:   int res, rc;",
          "3419: #ifdef SQLITE_TEST",
          "3420:   extern int sqlite3_search_count;",
          "",
          "[Removed Lines]",
          "3417: static int SQLITE_NOINLINE handleDeferredMoveto(VdbeCursor *p){",
          "",
          "[Added Lines]",
          "3417: int SQLITE_NOINLINE sqlite3VdbeFinishMoveto(VdbeCursor *p){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3487:       return SQLITE_OK;",
          "3488:     }",
          "3490:   }",
          "3491:   if( sqlite3BtreeCursorHasMoved(p->uc.pCursor) ){",
          "3492:     return handleMovedCursor(p);",
          "",
          "[Removed Lines]",
          "3489:     return handleDeferredMoveto(p);",
          "",
          "[Added Lines]",
          "3489:     return sqlite3VdbeFinishMoveto(p);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "147:   return pWInfo->eOnePass;",
          "148: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "154: int sqlite3WhereUsesDeferredSeek(WhereInfo *pWInfo){",
          "155:   return pWInfo->bDeferredSeek;",
          "156: }",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1045:   assert( iIdxCur>0 );",
          "1046:   assert( pIdx->aiColumn[pIdx->nColumn-1]==-1 );",
          "1048:   sqlite3VdbeAddOp3(v, OP_DeferredSeek, iIdxCur, 0, iCur);",
          "1049:   if( (pWInfo->wctrlFlags & WHERE_OR_SUBCLAUSE)",
          "1050:    && DbMaskAllZero(sqlite3ParseToplevel(pParse)->writeMask)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1048:   pWInfo->bDeferredSeek = 1;",
          "",
          "---------------"
        ],
        "test/update.test||test/update.test": [
          "File: test/update.test -> test/update.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "684:   SELECT * FROM t0;",
          "685: } {0 0}",
          "687: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "687: # 2019-12-28 assertion fault reported by Yongheng",
          "688: # Similar to ticket ec8abb025e78f40c",
          "689: # An UPDATE was reaching the OP_Delete after running OP_DeferredSeek",
          "690: # without ever hitting an OP_Column. The enhanced solution is to",
          "691: # fix OP_Delete so that it can do the seek itself.",
          "692: #",
          "693: reset_db",
          "694: do_execsql_test update-19.10 {",
          "695:   CREATE TABLE t1(",
          "696:    a TEXT,",
          "697:    b INTEGER PRIMARY KEY UNIQUE",
          "698:   );",
          "699:   INSERT INTO t1 VALUES(1,2);",
          "700:   UPDATE t1 SET a = quote(b) WHERE b>=2;",
          "701:   SELECT * FROM t1;",
          "702: } {2 2}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee5b6dd393311c3caa09d7d37b355d620694247e",
      "candidate_info": {
        "commit_hash": "ee5b6dd393311c3caa09d7d37b355d620694247e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ee5b6dd393311c3caa09d7d37b355d620694247e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h"
        ],
        "message": "Merge fixes from trunk.\n\nFossilOrigin-Name: 9c471195f6d3e4b00e2d0f909b306a4036352082dca5f016a8eece226e82163d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bda92d92bf69a73bc6dd498f92578ad6e81111a3f97bc8724d1720e7283a83b6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "973:           Select *pSel = pNC->pWinSelect;",
          "974:           assert( pWin==pExpr->y.pWin );",
          "975:           if( IN_RENAME_OBJECT==0 ){",
          "977:           }",
          "978:           sqlite3WalkExprList(pWalker, pWin->pPartition);",
          "979:           sqlite3WalkExprList(pWalker, pWin->pOrderBy);",
          "",
          "[Removed Lines]",
          "976:             sqlite3WindowUpdate(pParse, pSel->pWinDefn, pWin, pDef);",
          "",
          "[Added Lines]",
          "976:             sqlite3WindowUpdate(pParse, pSel ? pSel->pWinDefn : 0, pWin, pDef);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1775: #define LIKEFUNC(zName, nArg, arg, flags) \\",
          "1776:   {nArg, SQLITE_FUNC_CONSTANT|SQLITE_UTF8|flags, \\",
          "1777:    (void *)arg, 0, likeFunc, 0, 0, 0, #zName, {0} }",
          "1784: #define WAGGREGATE(zName, nArg, arg, nc, xStep, xFinal, xValue, xInverse, f) \\",
          "1785:   {nArg, SQLITE_UTF8|(nc*SQLITE_FUNC_NEEDCOLL)|f, \\",
          "1786:    SQLITE_INT_TO_PTR(arg), 0, xStep,xFinal,xValue,xInverse,#zName, {0}}",
          "",
          "[Removed Lines]",
          "1778: #define AGGREGATE(zName, nArg, arg, nc, xStep, xFinal, xValue) \\",
          "1779:   {nArg, SQLITE_UTF8|(nc*SQLITE_FUNC_NEEDCOLL), \\",
          "1780:    SQLITE_INT_TO_PTR(arg), 0, xStep,xFinal,xValue,0,#zName, {0}}",
          "1781: #define AGGREGATE2(zName, nArg, arg, nc, xStep, xFinal, extraFlags) \\",
          "1782:   {nArg, SQLITE_UTF8|(nc*SQLITE_FUNC_NEEDCOLL)|extraFlags, \\",
          "1783:    SQLITE_INT_TO_PTR(arg), 0, xStep,xFinal,xFinal,0,#zName, {0}}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c3629e1c994a96042ac8ddd0c16c328ed225007",
      "candidate_info": {
        "commit_hash": "2c3629e1c994a96042ac8ddd0c16c328ed225007",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c3629e1c994a96042ac8ddd0c16c328ed225007",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h"
        ],
        "message": "Change a bitfield in sqlite3_stmt into an unsigned character, for slightly smaller code and better performance.\n\nFossilOrigin-Name: 0d4d3c642494ad494b4ec937215eaf833158e62e5ae59ed981d6b546220c13b8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aa92f9b95f95d40cc58910da87168a5bd440f71deb072dc651bb15936315786c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h"
        ]
      }
    }
  ]
}