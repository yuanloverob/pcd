{
  "cve_id": "CVE-2022-3099",
  "cve_desc": "Use After Free in GitHub repository vim/vim prior to 9.0.0360.",
  "repo": "vim/vim",
  "patch_hash": "35d21c6830fc2d68aca838424a0e786821c5891c",
  "patch_info": {
    "commit_hash": "35d21c6830fc2d68aca838424a0e786821c5891c",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/35d21c6830fc2d68aca838424a0e786821c5891c",
    "files": [
      "src/ex_docmd.c",
      "src/testdir/test_eval_stuff.vim",
      "src/version.c"
    ],
    "message": "patch 9.0.0360: crash when invalid line number on :for is ignored\n\nProblem:    Crash when invalid line number on :for is ignored.\nSolution:   Do not check breakpoint for non-existing line.",
    "before_after_code_files": [
      "src/ex_docmd.c||src/ex_docmd.c",
      "src/testdir/test_eval_stuff.vim||src/testdir/test_eval_stuff.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/ex_docmd.c||src/ex_docmd.c": [
      "File: src/ex_docmd.c -> src/ex_docmd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1072:       {",
      "1074:           getline_equal(fgetline, cookie, getsourceline),",
      "",
      "[Removed Lines]",
      "1071:       if (breakpoint != NULL)",
      "",
      "[Added Lines]",
      "1071:       if (breakpoint != NULL && lines_ga.ga_len > current_line)",
      "",
      "---------------"
    ],
    "src/testdir/test_eval_stuff.vim||src/testdir/test_eval_stuff.vim": [
      "File: src/testdir/test_eval_stuff.vim -> src/testdir/test_eval_stuff.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: \" Tests for various eval things.",
      "3: source view_util.vim",
      "5: function s:foo() abort",
      "6:   try",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: source shared.vim",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "87:   let &enc = save_enc",
      "88: endfunc",
      "90: func Test_readfile_binary()",
      "91:   new",
      "92:   call setline(1, ['one', 'two', 'three'])",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "91: func Test_for_invalid_line_count()",
      "92:   let lines =<< trim END",
      "93:       111111111111111111111111 for line in ['one']",
      "94:       endfor",
      "95:   END",
      "96:   call writefile(lines, 'XinvalidFor')",
      "97:   \" only test that this doesn't crash",
      "98:   call RunVim([], [], '-u NONE -e -s -S XinvalidFor -c qa')",
      "100:   call delete('XinvalidFor')",
      "101: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "708: static int included_patches[] =",
      "711:     359,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "711:     360,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5c645a25bb8e6d766db720a44b9ceeff39d1e92b",
      "candidate_info": {
        "commit_hash": "5c645a25bb8e6d766db720a44b9ceeff39d1e92b",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/5c645a25bb8e6d766db720a44b9ceeff39d1e92b",
        "files": [
          "src/testdir/test_eval_stuff.vim",
          "src/testdir/test_ex_mode.vim",
          "src/testdir/test_excmd.vim",
          "src/testdir/test_execute_func.vim",
          "src/testdir/test_exit.vim",
          "src/testdir/test_expand.vim",
          "src/testdir/test_expand_func.vim",
          "src/testdir/test_expr.vim",
          "src/version.c"
        ],
        "message": "patch 9.0.0538: manually deleting test temp files\n\nProblem:    Manually deleting test temp files.\nSolution:   Add the 'D' flag to writefile().",
        "before_after_code_files": [
          "src/testdir/test_eval_stuff.vim||src/testdir/test_eval_stuff.vim",
          "src/testdir/test_ex_mode.vim||src/testdir/test_ex_mode.vim",
          "src/testdir/test_excmd.vim||src/testdir/test_excmd.vim",
          "src/testdir/test_execute_func.vim||src/testdir/test_execute_func.vim",
          "src/testdir/test_exit.vim||src/testdir/test_exit.vim",
          "src/testdir/test_expand.vim||src/testdir/test_expand.vim",
          "src/testdir/test_expand_func.vim||src/testdir/test_expand_func.vim",
          "src/testdir/test_expr.vim||src/testdir/test_expr.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_eval_stuff.vim||src/testdir/test_eval_stuff.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_eval_stuff.vim||src/testdir/test_eval_stuff.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_eval_stuff.vim||src/testdir/test_eval_stuff.vim": [
          "File: src/testdir/test_eval_stuff.vim -> src/testdir/test_eval_stuff.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: endfunc",
          "27: func Test_mkdir_p()",
          "29:   call assert_true(isdirectory('Xmkdir/nested'))",
          "30:   try",
          "31:     \" Trying to make existing directories doesn't error",
          "",
          "[Removed Lines]",
          "28:   call mkdir('Xmkdir/nested', 'p')",
          "",
          "[Added Lines]",
          "28:   call mkdir('Xmkdir/nested', 'pR')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35:     call assert_report('mkdir(..., \"p\") failed for an existing directory')",
          "36:   endtry",
          "37:   \" 'p' doesn't suppress real errors",
          "39:   call assert_fails('call mkdir(\"Xmkdirfile\", \"p\")', 'E739:')",
          "42:   call assert_equal(0, mkdir(test_null_string()))",
          "43:   call assert_fails('call mkdir([])', 'E730:')",
          "44:   call assert_fails('call mkdir(\"abc\", [], [])', 'E745:')",
          "",
          "[Removed Lines]",
          "38:   call writefile([], 'Xmkdirfile')",
          "40:   call delete('Xmkdirfile')",
          "41:   call delete('Xmkdir', 'rf')",
          "",
          "[Added Lines]",
          "38:   call writefile([], 'Xmkdirfile', 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "160:       111111111111111111111111 for line in ['one']",
          "161:       endfor",
          "162:   END",
          "164:   \" only test that this doesn't crash",
          "165:   call RunVim([], [], '-u NONE -e -s -S XinvalidFor -c qa')",
          "168: endfunc",
          "170: func Test_readfile_binary()",
          "",
          "[Removed Lines]",
          "163:   call writefile(lines, 'XinvalidFor')",
          "167:   call delete('XinvalidFor')",
          "",
          "[Added Lines]",
          "162:   call writefile(lines, 'XinvalidFor', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "186: endfunc",
          "188: func Test_readfile_binary_empty()",
          "190:   \" This used to compare uninitialized memory in Vim <= 8.2.4065",
          "191:   call assert_equal([''], readfile('Xempty-file', 'b'))",
          "193: endfunc",
          "195: func Test_readfile_bom()",
          "",
          "[Removed Lines]",
          "189:   call writefile([], 'Xempty-file')",
          "192:   call delete('Xempty-file')",
          "",
          "[Added Lines]",
          "186:   call writefile([], 'Xempty-file', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "199: endfunc",
          "201: func Test_readfile_max()",
          "203:   call assert_equal(['1', '2'], readfile('XReadfile_max', '', 2))",
          "204:   call assert_equal(['3', '4'], readfile('XReadfile_max', '', -2))",
          "206: endfunc",
          "208: func Test_let_errmsg()",
          "",
          "[Removed Lines]",
          "202:   call writefile(range(1, 4), 'XReadfile_max')",
          "205:   call delete('XReadfile_max')",
          "",
          "[Added Lines]",
          "198:   call writefile(range(1, 4), 'XReadfile_max', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "336: endfunc",
          "338: func Test_scriptversion_fail()",
          "340:   call assert_fails('source Xversionscript', 'E999:')",
          "342: endfunc",
          "344: func Test_execute_cmd_with_null()",
          "",
          "[Removed Lines]",
          "339:   call writefile(['scriptversion 9'], 'Xversionscript')",
          "341:   call delete('Xversionscript')",
          "",
          "[Added Lines]",
          "334:   call writefile(['scriptversion 9'], 'Xversionscript', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_ex_mode.vim||src/testdir/test_ex_mode.vim": [
          "File: src/testdir/test_ex_mode.vim -> src/testdir/test_ex_mode.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:     call writefile(['done'], 'Xdidexmode')",
          "238:     qall!",
          "239:   END",
          "241:   call assert_equal(1, RunVim([], [], '-e -s -S Xexmodescript'))",
          "242:   call assert_equal(['done'], readfile('Xdidexmode'))",
          "244:   call delete('logfile')",
          "245:   call delete('Xdidexmode')",
          "247: endfunc",
          "249: func Test_ex_mode_count_overflow()",
          "",
          "[Removed Lines]",
          "240:   call writefile(lines, 'Xexmodescript')",
          "246:   call delete('Xexmodescript')",
          "",
          "[Added Lines]",
          "240:   call writefile(lines, 'Xexmodescript', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "257:     call writefile(['done'], 'Xdidexmode')",
          "258:     qall!",
          "259:   END",
          "261:   call assert_equal(1, RunVim([], [], '-e -s -S Xexmodescript -c qa'))",
          "262:   call assert_equal(['done'], readfile('Xdidexmode'))",
          "264:   call delete('Xdidexmode')",
          "266: endfunc",
          "268: func Test_ex_mode_large_indent()",
          "",
          "[Removed Lines]",
          "260:   call writefile(lines, 'Xexmodescript')",
          "265:   call delete('Xexmodescript')",
          "",
          "[Added Lines]",
          "259:   call writefile(lines, 'Xexmodescript', 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "281:       0norm0V:\u001b",
          "282:       :qall!",
          "283:   END",
          "285:   call assert_equal(1, RunVim([], [], '-u NONE -e -s -S Xexmodescript'))",
          "289:   \" This may cause a dialog to be displayed for an empty command, ignore it.",
          "290:   call delete('guidialogfile')",
          "291: endfunc",
          "",
          "[Removed Lines]",
          "284:   call writefile(lines, 'Xexmodescript')",
          "287:   call delete('Xexmodescript')",
          "",
          "[Added Lines]",
          "282:   call writefile(lines, 'Xexmodescript', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_excmd.vim||src/testdir/test_excmd.vim": [
          "File: src/testdir/test_excmd.vim -> src/testdir/test_excmd.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: \" Test for the :drop command",
          "85: func Test_drop_cmd()",
          "87:   enew | only",
          "88:   drop Xdropfile",
          "89:   call assert_equal('L2', getline(2))",
          "",
          "[Removed Lines]",
          "86:   call writefile(['L1', 'L2'], 'Xdropfile')",
          "",
          "[Added Lines]",
          "86:   call writefile(['L1', 'L2'], 'Xdropfile', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "99:   \" Check for setting the argument list",
          "100:   call assert_equal(['Xdropfile'], argv())",
          "101:   enew | only!",
          "103: endfunc",
          "105: \" Test for the :append command",
          "",
          "[Removed Lines]",
          "102:   call delete('Xdropfile')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:     endfunc",
          "142:     call timer_start(10, 'Timer')",
          "143:   END",
          "145:   let buf = RunVimInTerminal('-S Xtest_append_cmd_empty_buf', {'rows': 6})",
          "146:   call WaitForAssert({-> assert_equal('bbbbb', term_getline(buf, 2))})",
          "147:   call WaitForAssert({-> assert_equal('aaaaa', term_getline(buf, 1))})",
          "149:   \" clean up",
          "150:   call StopVimInTerminal(buf)",
          "152: endfunc",
          "154: \" Test for the :insert command",
          "",
          "[Removed Lines]",
          "144:   call writefile(lines, 'Xtest_append_cmd_empty_buf')",
          "151:   call delete('Xtest_append_cmd_empty_buf')",
          "",
          "[Added Lines]",
          "143:   call writefile(lines, 'Xtest_append_cmd_empty_buf', 'D')",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "190:     endfunc",
          "191:     call timer_start(10, 'Timer')",
          "192:   END",
          "194:   let buf = RunVimInTerminal('-S Xtest_insert_cmd_empty_buf', {'rows': 6})",
          "195:   call WaitForAssert({-> assert_equal('bbbbb', term_getline(buf, 2))})",
          "196:   call WaitForAssert({-> assert_equal('aaaaa', term_getline(buf, 1))})",
          "198:   \" clean up",
          "199:   call StopVimInTerminal(buf)",
          "201: endfunc",
          "203: \" Test for the :change command",
          "",
          "[Removed Lines]",
          "193:   call writefile(lines, 'Xtest_insert_cmd_empty_buf')",
          "200:   call delete('Xtest_insert_cmd_empty_buf')",
          "",
          "[Added Lines]",
          "191:   call writefile(lines, 'Xtest_insert_cmd_empty_buf', 'D')",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "241:   CheckNotGui",
          "242:   CheckRunVimInTerminal",
          "247:   \" Test for saving all the modified buffers",
          "248:   let lines =<< trim END",
          "",
          "[Removed Lines]",
          "244:   call writefile(['foo1'], 'Xfoo')",
          "245:   call writefile(['bar1'], 'Xbar')",
          "",
          "[Added Lines]",
          "241:   call writefile(['foo1'], 'Xfoo', 'D')",
          "242:   call writefile(['bar1'], 'Xbar', 'D')",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "253:     call setline(1, 'bar2')",
          "254:     wincmd b",
          "255:   END",
          "257:   let buf = RunVimInTerminal('-S Xscript', {'rows': 20})",
          "258:   call term_sendkeys(buf, \":confirm qall\\n\")",
          "259:   call WaitForAssert({-> assert_match('\\[Y\\]es, (N)o, Save (A)ll, (D)iscard All, (C)ancel: ', term_getline(buf, 20))}, 1000)",
          "",
          "[Removed Lines]",
          "256:   call writefile(lines, 'Xscript')",
          "",
          "[Added Lines]",
          "253:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "303:   call assert_equal(['foo4'], readfile('Xfoo'))",
          "304:   call assert_equal(['bar2'], readfile('Xbar'))",
          "309: endfunc",
          "311: func Test_confirm_cmd_cancel()",
          "",
          "[Removed Lines]",
          "306:   call delete('Xscript')",
          "307:   call delete('Xfoo')",
          "308:   call delete('Xbar')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "318:     new",
          "319:     call setline(1, 'abc')",
          "320:   END",
          "322:   let buf = RunVimInTerminal('-S Xscript', {'rows': 20})",
          "323:   call term_sendkeys(buf, \":confirm close\\n\")",
          "324:   call WaitForAssert({-> assert_match('^\\[Y\\]es, (N)o, (C)ancel: *$',",
          "",
          "[Removed Lines]",
          "321:   call writefile(lines, 'Xscript')",
          "",
          "[Added Lines]",
          "314:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "332:   call WaitForAssert({-> assert_match('^ *0,0-1         All$',",
          "333:         \\ term_getline(buf, 20))}, 1000)",
          "334:   call StopVimInTerminal(buf)",
          "336: endfunc",
          "338: \" The \":confirm\" prompt was sometimes used with the terminal in cooked mode.",
          "",
          "[Removed Lines]",
          "335:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "342:   CheckNotGui",
          "343:   CheckRunVimInTerminal",
          "347:   let lines =<< trim END",
          "348:     set hidden nomore",
          "349:     call setline(1, 'abc')",
          "350:     edit Xfoo",
          "351:   END",
          "353:   let buf = RunVimInTerminal('-S Xscript', {'rows': 20})",
          "354:   call term_sendkeys(buf, \":confirm q\\n\")",
          "355:   call WaitForAssert({-> assert_match('^\\[Y\\]es, (N)o, (C)ancel: *$',",
          "",
          "[Removed Lines]",
          "345:   call writefile(['foo'], 'Xfoo')",
          "352:   call writefile(lines, 'Xscript')",
          "",
          "[Added Lines]",
          "337:   call writefile(['foo'], 'Xfoo', 'D')",
          "344:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "365:   call term_sendkeys(buf, 'C')",
          "366:   call WaitForAssert({-> assert_notmatch('^\\[Y\\]es, (N)o, (C)ancel: C*$',",
          "367:         \\ term_getline(buf, 20))}, 1000)",
          "372: endfunc",
          "374: func Test_confirm_write_ro()",
          "375:   CheckNotGui",
          "376:   CheckRunVimInTerminal",
          "379:   let lines =<< trim END",
          "380:     set nobackup ff=unix cmdheight=2",
          "381:     edit Xconfirm_write_ro",
          "382:     norm Abar",
          "383:   END",
          "385:   let buf = RunVimInTerminal('-S Xscript', {'rows': 20})",
          "387:   \" Try to write with 'ro' option.",
          "",
          "[Removed Lines]",
          "368:   call StopVimInTerminal(buf)",
          "370:   call delete('Xscript')",
          "371:   call delete('Xfoo')",
          "378:   call writefile(['foo'], 'Xconfirm_write_ro')",
          "384:   call writefile(lines, 'Xscript')",
          "",
          "[Added Lines]",
          "361:   call StopVimInTerminal(buf)",
          "368:   call writefile(['foo'], 'Xconfirm_write_ro', 'D')",
          "374:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "422:   call assert_equal(['foo'], readfile('Xconfirm_write_ro'))",
          "424:   call StopVimInTerminal(buf)",
          "427: endfunc",
          "429: func Test_confirm_write_partial_file()",
          "430:   CheckNotGui",
          "431:   CheckRunVimInTerminal",
          "434:   call writefile(['set nobackup ff=unix cmdheight=2',",
          "436:   let buf = RunVimInTerminal('-S Xscript', {'rows': 20})",
          "438:   call term_sendkeys(buf, \":confirm 2,3w\\n\")",
          "",
          "[Removed Lines]",
          "425:   call delete('Xscript')",
          "426:   call delete('Xconfirm_write_ro')",
          "433:   call writefile(['a', 'b', 'c', 'd'], 'Xwrite_partial')",
          "435:         \\         'edit Xwrite_partial'], 'Xscript')",
          "",
          "[Added Lines]",
          "421:   call writefile(['a', 'b', 'c', 'd'], 'Xwrite_partial', 'D')",
          "423:         \\         'edit Xwrite_partial'], 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "458:   call assert_equal(['b', 'c'], readfile('Xwrite_partial'))",
          "460:   call StopVimInTerminal(buf)",
          "463: endfunc",
          "465: \" Test for the :print command",
          "",
          "[Removed Lines]",
          "461:   call delete('Xwrite_partial')",
          "462:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "509:   CheckNotRoot",
          "511:   \" Redirecting to a read-only file",
          "513:   call setfperm('Xredirfile', 'r--r--r--')",
          "514:   call assert_fails('redir! > Xredirfile', 'E190:')",
          "516: endfunc",
          "518: \" Test for the :filetype command",
          "",
          "[Removed Lines]",
          "512:   call writefile([], 'Xredirfile')",
          "515:   call delete('Xredirfile')",
          "",
          "[Added Lines]",
          "498:   call writefile([], 'Xredirfile', 'D')",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "533: \" Test for the :read command",
          "534: func Test_read_cmd()",
          "536:   new",
          "537:   call assert_fails('read', 'E32:')",
          "538:   edit Xcmdfile",
          "",
          "[Removed Lines]",
          "535:   call writefile(['one'], 'Xcmdfile')",
          "",
          "[Added Lines]",
          "520:   call writefile(['one'], 'Xcmdfile', 'D')",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "546:   call feedkeys(\"Qr Xcmdfile\\<CR>visual\\<CR>\", 'xt')",
          "547:   call assert_equal(['one'], getline(1, '$'))",
          "548:   close!",
          "550: endfunc",
          "552: \" Test for running Ex commands when text is locked.",
          "",
          "[Removed Lines]",
          "549:   call delete('Xcmdfile')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "728: \" Test :write after changing name with :file and loading it with :edit",
          "729: func Test_write_after_rename()",
          "732:   enew",
          "733:   file Xafterfile",
          "",
          "[Removed Lines]",
          "730:   call writefile(['text'], 'Xafterfile')",
          "",
          "[Added Lines]",
          "714:   call writefile(['text'], 'Xafterfile', 'D')",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "737:   edit",
          "738:   write",
          "741:   bwipe!",
          "742: endfunc",
          "",
          "[Removed Lines]",
          "740:   call delete('Xafterfile')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_execute_func.vim||src/testdir/test_execute_func.vim": [
          "File: src/testdir/test_execute_func.vim -> src/testdir/test_execute_func.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "183:       silent tabedit Xfile3",
          "184:       autocmd VimEnter * win_execute(id, 'close')",
          "185:   END",
          "187:   let buf = RunVimInTerminal('-p Xfile1 -Nu XwinExecute', {})",
          "189:   \" this was crashing on exit with EXITFREE defined",
          "190:   call StopVimInTerminal(buf)",
          "193:   call delete('Xfile1')",
          "194: endfunc",
          "",
          "[Removed Lines]",
          "186:   call writefile(lines, 'XwinExecute')",
          "192:   call delete('XwinExecute')",
          "",
          "[Added Lines]",
          "186:   call writefile(lines, 'XwinExecute', 'D')",
          "",
          "---------------"
        ],
        "src/testdir/test_exit.vim||src/testdir/test_exit.vim": [
          "File: src/testdir/test_exit.vim -> src/testdir/test_exit.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   CheckNotAsan",
          "118:   CheckNotValgrind",
          "122:   if RunVim([], [], '<Xscript')",
          "123:     call assert_equal(1, v:shell_error)",
          "124:     call assert_equal(['l = 1'], readfile('Xtestout'))",
          "125:   endif",
          "127:   call delete('Xtestout')",
          "128: endfun",
          "",
          "[Removed Lines]",
          "120:   call writefile([\":au VimLeave * call writefile(['l = ' .. v:exiting], 'Xtestout')\", \":tabnew\", \"q:\"], 'Xscript', 'b')",
          "126:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "120:   call writefile([\":au VimLeave * call writefile(['l = ' .. v:exiting], 'Xtestout')\", \":tabnew\", \"q:\"], 'Xscript', 'bD')",
          "",
          "---------------"
        ],
        "src/testdir/test_expand.vim||src/testdir/test_expand.vim": [
          "File: src/testdir/test_expand.vim -> src/testdir/test_expand.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     :call writefile(v:errors, 'Xresult')",
          "138:     :qall!",
          "139:   [SCRIPT]",
          "141:   if RunVim([], [], '--clean -s Xscript')",
          "142:     call assert_equal([",
          "143:           \\ 'E1274: No script file name to substitute for \"<script>\"',",
          "144:           \\ 'E498: No :source file name to substitute for \"<sfile>\"'],",
          "145:           \\ readfile('Xresult'))",
          "146:   endif",
          "148:   call delete('Xresult')",
          "149: endfunc",
          "",
          "[Removed Lines]",
          "140:   call writefile(lines, 'Xscript')",
          "147:   call delete('Xscript')",
          "",
          "[Added Lines]",
          "140:   call writefile(lines, 'Xscript', 'D')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "197:     au User * call extend(g:au_level, [expand('<script>:t')])",
          "198:   [SCRIPT]",
          "204:   \" Check the expansion of <script> at different levels.",
          "205:   let g:script_level = []",
          "",
          "[Removed Lines]",
          "200:   call writefile(lines0, 'Xscript0')",
          "201:   call writefile(lines1, 'Xscript1')",
          "202:   call writefile(lines2, 'Xscript2')",
          "",
          "[Added Lines]",
          "199:   call writefile(lines0, 'Xscript0', 'D')",
          "200:   call writefile(lines1, 'Xscript1', 'D')",
          "201:   call writefile(lines2, 'Xscript2', 'D')",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:   delfunc F0",
          "221:   delfunc F1",
          "222:   delfunc F2",
          "227: endfunc",
          "229: \" vim: shiftwidth=2 sts=2 expandtab",
          "",
          "[Removed Lines]",
          "224:   call delete('Xscript0')",
          "225:   call delete('Xscript1')",
          "226:   call delete('Xscript2')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_expand_func.vim||src/testdir/test_expand_func.vim": [
          "File: src/testdir/test_expand_func.vim -> src/testdir/test_expand_func.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:     \" comment here",
          "57:     let g:stack_value = expand('<stack>')",
          "58:   END",
          "60:   source Xstack",
          "61:   call assert_match('\\<Xstack\\[2\\]$', g:stack_value)",
          "62:   unlet g:stack_value",
          "65:   if exists('+shellslash')",
          "67:     let lines =<< trim END",
          "68:       let g:stack1 = expand('<stack>')",
          "69:       set noshellslash",
          "",
          "[Removed Lines]",
          "59:   call writefile(lines, 'Xstack')",
          "63:   call delete('Xstack')",
          "66:     call mkdir('Xshellslash')",
          "",
          "[Added Lines]",
          "59:   call writefile(lines, 'Xstack', 'D')",
          "65:     call mkdir('Xshellslash', 'R')",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:       unlet g:stack2",
          "84:       unlet g:stack3",
          "85:     endfor",
          "87:   endif",
          "88: endfunc",
          "",
          "[Removed Lines]",
          "86:     call delete('Xshellslash', 'rf')",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/testdir/test_expr.vim||src/testdir/test_expr.vim": [
          "File: src/testdir/test_expr.vim -> src/testdir/test_expr.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "706:     call writefile([execute('messages')], 'Xtest.out')",
          "707:     qall",
          "708:   END",
          "710:   call RunVim([], [], \"-c \\\"echo function('s:abc')\\\" -S Xverify.vim\")",
          "711:   call assert_match('E81: Using <SID> not in a', readfile('Xtest.out')[0])",
          "712:   call RunVim([], [], \"-c \\\"echo funcref('s:abc')\\\" -S Xverify.vim\")",
          "713:   call assert_match('E81: Using <SID> not in a', readfile('Xtest.out')[0])",
          "714:   call delete('Xtest.out')",
          "716: endfunc",
          "718: func Test_setmatches()",
          "",
          "[Removed Lines]",
          "709:   call writefile(cleanup, 'Xverify.vim')",
          "715:   call delete('Xverify.vim')",
          "",
          "[Added Lines]",
          "709:   call writefile(cleanup, 'Xverify.vim', 'D')",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "700: static int included_patches[] =",
          "703:     537,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "703:     538,",
          "",
          "---------------"
        ]
      }
    }
  ]
}