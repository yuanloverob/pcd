{
  "cve_id": "CVE-2017-13083",
  "cve_desc": "Akeo Consulting Rufus prior to version 2.17.1187 does not adequately validate the integrity of updates downloaded over HTTP, allowing an attacker to easily convince a user to execute arbitrary code",
  "repo": "pbatard/rufus",
  "patch_hash": "c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
  "patch_info": {
    "commit_hash": "c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
    "repo": "pbatard/rufus",
    "commit_url": "https://github.com/pbatard/rufus/commit/c3c39f7f8a11f612c4ebf7affce25ec6928eb1cb",
    "files": [
      "res/localization/rufus.loc",
      "src/pki.c",
      "src/rufus.rc",
      "src/stdlg.c"
    ],
    "message": "[pki] fix https://www.kb.cert.org/vuls/id/403768\n\n* This commit effectively fixes https://www.kb.cert.org/vuls/id/403768 (CVE-2017-13083) as\n  it is described per its revision 11, which is the latest revision at the time of this commit,\n  by disabling Windows prompts, enacted during signature validation, that allow the user to\n  bypass the intended signature verification checks.\n* It needs to be pointed out that the vulnerability (\"allow(ing) the use of a self-signed\n  certificate\"), which relies on the end-user actively ignoring a Windows prompt that tells\n  them that the update failed the signature validation whilst also advising against running it,\n  is being fully addressed, even as the update protocol remains HTTP.\n* It also need to be pointed out that the extended delay (48 hours) between the time the\n  vulnerability was reported and the moment it is fixed in our codebase has to do with\n  the fact that the reporter chose to deviate from standard security practices by not\n  disclosing the details of the vulnerability with us, be it publicly or privately,\n  before creating the cert.org report. The only advance notification we received was a\n  generic note about the use of HTTP vs HTTPS, which, as have established, is not\n  immediately relevant to addressing the reported vulnerability.\n* Closes #1009\n* Note: The other vulnerability scenario described towards the end of #1009, which\n  doesn't have to do with the \"lack of CA checking\", will be addressed separately.",
    "before_after_code_files": [
      "res/localization/rufus.loc||res/localization/rufus.loc",
      "src/pki.c||src/pki.c",
      "src/rufus.rc||src/rufus.rc",
      "src/stdlg.c||src/stdlg.c"
    ]
  },
  "patch_diff": {
    "res/localization/rufus.loc||res/localization/rufus.loc": [
      "File: res/localization/rufus.loc -> res/localization/rufus.loc",
      "--- Hunk 1 ---",
      "[Context before]",
      "487: # eg. \"Partitioning (MBR)...\"",
      "488: t MSG_238 \"Partitioning (%s)...\"",
      "489: t MSG_239 \"Deleting partitions...\"",
      "490: t MSG_241 \"Downloading: %0.1f%%\"",
      "491: t MSG_242 \"Failed to download file.\"",
      "492: t MSG_243 \"Checking for Rufus updates...\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: t MSG_240 \"The signature for the downloaded update can not be validated. This could mean that your \"",
      "491:  \"system is improperly configured for signature validation or indicate a malicious download.\\n\\n\"",
      "492:  \"The download will be deleted. Please check the log for more details.\"",
      "",
      "---------------"
    ],
    "src/pki.c||src/pki.c": [
      "File: src/pki.c -> src/pki.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "53:  static char error_string[64];",
      "54:  DWORD error_code = GetLastError();",
      "57:   return WindowsErrorString();",
      "59:  switch (error_code) {",
      "",
      "[Removed Lines]",
      "56:  if ((error_code >> 16) != 0x8009)",
      "",
      "[Added Lines]",
      "56:  if (((error_code >> 16) != 0x8009) && ((error_code >> 16) != 0x800B))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "113:   return \"Cannot complete usage check.\";",
      "114:  case CRYPT_E_NO_TRUSTED_SIGNER:",
      "115:   return \"None of the signers of the cryptographic message or certificate trust list is trusted.\";",
      "116:  default:",
      "117:   static_sprintf(error_string, \"Unknown PKI error 0x%08lX\", error_code);",
      "118:   return error_string;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "116:  case CERT_E_UNTRUSTEDROOT:",
      "117:   return \"The root certificate is not trusted.\";",
      "118:  case TRUST_E_NOSIGNATURE:",
      "119:   return \"Not digitally signed.\";",
      "120:  case TRUST_E_EXPLICIT_DISTRUST:",
      "121:   return \"One of the certificates used was marked as untrusted by the user.\";",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "268:  }",
      "270:  trust_data.cbStruct = sizeof(trust_data);",
      "273:  trust_data.fdwRevocationChecks = WTD_REVOKE_WHOLECHAIN;",
      "",
      "[Removed Lines]",
      "271:  trust_data.dwUIChoice = WTD_UI_ALL;",
      "",
      "[Added Lines]",
      "283:  trust_data.dwUIChoice = WTD_UI_NONE;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "279:  r = WinVerifyTrust(NULL, &guid_generic_verify, &trust_data);",
      "280:  safe_free(trust_file.pcwszFilePath);",
      "282:  return r;",
      "283: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "293:  switch (r) {",
      "294:  case ERROR_SUCCESS:",
      "295:   break;",
      "296:  case TRUST_E_NOSIGNATURE:",
      "298:   uprintf(\"PKI: File does not appear to be signed: %s\", WinPKIErrorString());",
      "299:   MessageBoxExU(hDlg, lmprintf(MSG_284), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
      "300:   break;",
      "301:  default:",
      "302:   uprintf(\"PKI: Failed to validate signature: %s\", WinPKIErrorString());",
      "303:   MessageBoxExU(hDlg, lmprintf(MSG_240), lmprintf(MSG_283), MB_OK | MB_ICONERROR | MB_IS_RTL, selected_langid);",
      "304:   break;",
      "305:  }",
      "",
      "---------------"
    ],
    "src/rufus.rc||src/rufus.rc": [
      "File: src/rufus.rc -> src/rufus.rc",
      "--- Hunk 1 ---",
      "[Context before]",
      "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
      "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
      "35: EXSTYLE WS_EX_ACCEPTFILES",
      "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
      "38: BEGIN",
      "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
      "",
      "[Removed Lines]",
      "36: CAPTION \"Rufus 2.17.1186\"",
      "",
      "[Added Lines]",
      "36: CAPTION \"Rufus 2.17.1187\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "368: VS_VERSION_INFO VERSIONINFO",
      "371:  FILEFLAGSMASK 0x3fL",
      "372: #ifdef _DEBUG",
      "373:  FILEFLAGS 0x1L",
      "",
      "[Removed Lines]",
      "369:  FILEVERSION 2,17,1186,0",
      "370:  PRODUCTVERSION 2,17,1186,0",
      "",
      "[Added Lines]",
      "369:  FILEVERSION 2,17,1187,0",
      "370:  PRODUCTVERSION 2,17,1187,0",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "384:         BEGIN",
      "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
      "386:             VALUE \"FileDescription\", \"Rufus\"",
      "388:             VALUE \"InternalName\", \"Rufus\"",
      "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
      "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
      "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
      "392:             VALUE \"ProductName\", \"Rufus\"",
      "394:         END",
      "395:     END",
      "396:     BLOCK \"VarFileInfo\"",
      "",
      "[Removed Lines]",
      "387:             VALUE \"FileVersion\", \"2.17.1186\"",
      "393:             VALUE \"ProductVersion\", \"2.17.1186\"",
      "",
      "[Added Lines]",
      "387:             VALUE \"FileVersion\", \"2.17.1187\"",
      "393:             VALUE \"ProductVersion\", \"2.17.1187\"",
      "",
      "---------------"
    ],
    "src/stdlg.c||src/stdlg.c": [
      "File: src/stdlg.c -> src/stdlg.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1674:    case 2:  // Launch newer version and close this one",
      "1675:     Sleep(1000); // Add a delay on account of antivirus scanners",
      "1678:      break;",
      "1680:     memset(&si, 0, sizeof(si));",
      "1681:     memset(&pi, 0, sizeof(pi));",
      "",
      "[Removed Lines]",
      "1677:     if (ValidateSignature(hDlg, filepath) != NO_ERROR)",
      "",
      "[Added Lines]",
      "1677:     if (ValidateSignature(hDlg, filepath) != NO_ERROR) {",
      "1679:      _unlinkU(filepath);",
      "1680:      EnableWindow(GetDlgItem(hDlg, IDC_DOWNLOAD), FALSE);",
      "1682:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "21ce17302db64f8c87fbd6ce862f51a4a35272ba",
      "candidate_info": {
        "commit_hash": "21ce17302db64f8c87fbd6ce862f51a4a35272ba",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/21ce17302db64f8c87fbd6ce862f51a4a35272ba",
        "files": [
          "src/dev.c",
          "src/rufus.c",
          "src/rufus.rc"
        ],
        "message": "[misc] fix coverity and VS analysis warnings",
        "before_after_code_files": [
          "src/dev.c||src/dev.c",
          "src/rufus.c||src/rufus.c",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/dev.c||src/dev.c": [
          "File: src/dev.c -> src/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "154: static __inline void ToUpper(char* str)",
          "155: {",
          "157:  for (i = 0; i < safe_strlen(str); i++)",
          "158:   str[i] = toupper(str[i]);",
          "159: }",
          "",
          "[Removed Lines]",
          "156:  int i;",
          "",
          "[Added Lines]",
          "156:  size_t i;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "241:     ReadFile(hDrive, buffer, 2048, &size, NULL) && (size == 2048)) {",
          "242:     memcpy(label, &buffer[0x28], sizeof(label) - 1);",
          "243:     label[sizeof(label) - 1] = 0;",
          "245:      label[k] = 0;",
          "246:     img_save->Label = label;",
          "247:    }",
          "",
          "[Removed Lines]",
          "244:     for (k = strlen(label) - 1; (k >= 0) && (label[k] == 0x20); k--)",
          "",
          "[Added Lines]",
          "244:     for (k = (int)strlen(label) - 1; (k >= 0) && (label[k] == 0x20); k--)",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2895:  int i, opt, option_index = 0, argc = 0, si = 0, lcid = GetUserDefaultUILanguage();",
          "2896:  int wait_for_mutex = 0;",
          "2897:  FILE* fd;",
          "2900:  BYTE *loc_data;",
          "2901:  DWORD loc_size, size;",
          "2902:  char tmp_path[MAX_PATH] = \"\", loc_file[MAX_PATH] = \"\", ini_path[MAX_PATH] = \"\", ini_flags[] = \"rb\";",
          "",
          "[Removed Lines]",
          "2898:  BOOL attached_console = FALSE, external_loc_file = FALSE, lgp_set = FALSE, automount, disable_hogger = FALSE;",
          "2899:  BOOL previous_enable_HDDs = FALSE;",
          "",
          "[Added Lines]",
          "2898:  BOOL attached_console = FALSE, external_loc_file = FALSE, lgp_set = FALSE, automount = TRUE;",
          "2899:  BOOL disable_hogger = FALSE, previous_enable_HDDs = FALSE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2973:      break;",
          "2974:     case 'i':",
          "2975:      if (_access(optarg, 0) != -1) {",
          "2976:       image_path = safe_strdup(optarg);",
          "2977:       iso_provided = TRUE;",
          "2978:      }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2976:       safe_free(image_path);",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.13.1066\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.13.1067\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336: VS_VERSION_INFO VERSIONINFO",
          "339:  FILEFLAGSMASK 0x3fL",
          "340: #ifdef _DEBUG",
          "341:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "337:  FILEVERSION 2,13,1066,0",
          "338:  PRODUCTVERSION 2,13,1066,0",
          "",
          "[Added Lines]",
          "337:  FILEVERSION 2,13,1067,0",
          "338:  PRODUCTVERSION 2,13,1067,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:         BEGIN",
          "353:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "354:             VALUE \"FileDescription\", \"Rufus\"",
          "356:             VALUE \"InternalName\", \"Rufus\"",
          "357:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "358:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "359:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "360:             VALUE \"ProductName\", \"Rufus\"",
          "362:         END",
          "363:     END",
          "364:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "355:             VALUE \"FileVersion\", \"2.13.1066\"",
          "361:             VALUE \"ProductVersion\", \"2.13.1066\"",
          "",
          "[Added Lines]",
          "355:             VALUE \"FileVersion\", \"2.13.1067\"",
          "361:             VALUE \"ProductVersion\", \"2.13.1067\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8286a0f63afa5c4422df38de82d2a70c35d041fa",
      "candidate_info": {
        "commit_hash": "8286a0f63afa5c4422df38de82d2a70c35d041fa",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/8286a0f63afa5c4422df38de82d2a70c35d041fa",
        "files": [
          "src/dev.c",
          "src/dev.h",
          "src/rufus.c",
          "src/rufus.h",
          "src/rufus.rc",
          "src/stdfn.c"
        ],
        "message": "[core] add a cheat mode to reset the current USB device (cycle port)\n\n* Will not work on Vista, Windows 7 or Server 2008\n* Also update Windows version info",
        "before_after_code_files": [
          "src/dev.c||src/dev.c",
          "src/dev.h||src/dev.h",
          "src/rufus.c||src/rufus.c",
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc",
          "src/stdfn.c||src/stdfn.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/dev.c||src/dev.c": [
          "File: src/dev.c -> src/dev.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #include \"drive.h\"",
          "43: #include \"dev.h\"",
          "46: extern BOOL enable_HDDs, use_fake_units, enable_vmdk, usb_debug, list_non_usb_removable_drives;",
          "",
          "[Removed Lines]",
          "45: extern StrArray DriveID, DriveLabel;",
          "",
          "[Added Lines]",
          "45: extern StrArray DriveID, DriveLabel, DriveHub;",
          "46: extern uint32_t DrivePort[MAX_DRIVES];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123:  return r;",
          "124: }",
          "126: static __inline BOOL IsVHD(const char* buffer)",
          "127: {",
          "128:  int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130: BOOL ResetDevice(int index)",
          "131: {",
          "132:  static uint64_t LastReset = 0;",
          "133:  BOOL r = FALSE;",
          "134:  HANDLE handle = INVALID_HANDLE_VALUE;",
          "135:  DWORD size;",
          "136:  USB_CYCLE_PORT_PARAMS cycle_port;",
          "139:  if (_GetTickCount64() < LastReset + 10000ULL) {",
          "140:   uprintf(\"You must wait at least 10 seconds before trying to reset a device\");",
          "141:   return FALSE;",
          "142:  }",
          "144:  if (DriveHub.String[index] == NULL)",
          "145:   return FALSE;",
          "147:  LastReset = _GetTickCount64();",
          "149:  handle = CreateFileA(DriveHub.String[index], GENERIC_WRITE, FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_FLAG_OVERLAPPED, NULL);",
          "150:  if (handle == INVALID_HANDLE_VALUE) {",
          "151:   uprintf(\"Could not open %s: %s\", DriveHub.String[index], WindowsErrorString());",
          "152:   goto out;",
          "153:  }",
          "155:  memset(&cycle_port, 0, sizeof(cycle_port));",
          "156:  size = sizeof(cycle_port);",
          "157:  cycle_port.ConnectionIndex = DrivePort[index];",
          "158:  uprintf(\"Cycling port %d (reset) on %s\", DrivePort[index], DriveHub.String[index]);",
          "161:  if (!DeviceIoControl(handle, IOCTL_USB_HUB_CYCLE_PORT, &cycle_port, size, &cycle_port, size, &size, NULL)) {",
          "162:   uprintf(\"  Failed to cycle port: %s\", WindowsErrorString());",
          "163:   goto out;",
          "164:  }",
          "165:  r = TRUE;",
          "167: out:",
          "168:  safe_closehandle(handle);",
          "169:  return r;",
          "170: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "319:  LONG maxwidth = 0;",
          "320:  int s, score, drive_number, remove_drive;",
          "321:  char drive_letters[27], *device_id, *devid_list = NULL, entry_msg[128];",
          "323:  usb_device_props props;",
          "325:  IGNORE_RETVAL(ComboBox_ResetContent(hDeviceList));",
          "326:  StrArrayClear(&DriveID);",
          "327:  StrArrayClear(&DriveLabel);",
          "328:  StrArrayCreate(&dev_if_path, 128);",
          "330:  StrArrayAdd(&dev_if_path, \"\", TRUE);",
          "",
          "[Removed Lines]",
          "322:  char *p, *label, *entry, buffer[MAX_PATH], str[MAX_PATH], *method_str;",
          "",
          "[Added Lines]",
          "368:  char *p, *label, *entry, buffer[MAX_PATH], str[MAX_PATH], *method_str, *hub_path;",
          "374:  StrArrayClear(&DriveHub);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "452:   memset(buffer, 0, sizeof(buffer));",
          "453:   memset(&props, 0, sizeof(props));",
          "454:   method_str = \"\";",
          "455:   if (!SetupDiGetDeviceRegistryPropertyA(dev_info, &dev_info_data, SPDRP_ENUMERATOR_NAME,",
          "456:     &datatype, (LPBYTE)buffer, sizeof(buffer), &size)) {",
          "457:    uprintf(\"SetupDiGetDeviceRegistryProperty (Enumerator Name) failed: %s\\n\", WindowsErrorString());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "502:   hub_path = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "584:     if ((uintptr_t)htab_devid.table[j].data > 0) {",
          "585:      uuprintf(\"  Matched with Hub[%d]: '%s'\", (uintptr_t)htab_devid.table[j].data,",
          "586:        dev_if_path.String[(uintptr_t)htab_devid.table[j].data]);",
          "588:       method_str = \"\";",
          "589: #ifdef FORCED_DEVICE",
          "590:      props.vid = FORCED_VID;",
          "591:      props.pid = FORCED_PID;",
          "",
          "[Removed Lines]",
          "587:      if (GetUSBProperties(dev_if_path.String[(uintptr_t)htab_devid.table[j].data], device_id, &props))",
          "",
          "[Added Lines]",
          "635:      if (GetUSBProperties(dev_if_path.String[(uintptr_t)htab_devid.table[j].data], device_id, &props)) {",
          "637:       hub_path = dev_if_path.String[(uintptr_t)htab_devid.table[j].data];",
          "638:      }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "770:     StrArrayAdd(&DriveID, buffer, TRUE);",
          "771:     StrArrayAdd(&DriveLabel, label, TRUE);",
          "773:     IGNORE_RETVAL(ComboBox_SetItemData(hDeviceList, ComboBox_AddStringU(hDeviceList, entry), drive_index));",
          "774:     maxwidth = max(maxwidth, GetEntryWidth(hDeviceList, entry));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "822:     if ((hub_path != NULL) && (StrArrayAdd(&DriveHub, hub_path, TRUE) >= 0))",
          "823:      DrivePort[DriveHub.Index - 1] = props.port;",
          "",
          "---------------"
        ],
        "src/dev.h||src/dev.h": [
          "File: src/dev.h -> src/dev.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: PF_TYPE_DECL(WINAPI, CONFIGRET, CM_Get_DevNode_Registry_PropertyA, (DEVINST, ULONG, PULONG, PVOID, PULONG, ULONG));",
          "109: #define USB_GET_NODE_CONNECTION_INFORMATION_EX    274",
          "110: #define USB_GET_NODE_CONNECTION_INFORMATION_EX_V2 279",
          "112: #define IOCTL_USB_GET_NODE_CONNECTION_INFORMATION_EX \\",
          "113:   CTL_CODE(FILE_DEVICE_USB, USB_GET_NODE_CONNECTION_INFORMATION_EX, METHOD_BUFFERED, FILE_ANY_ACCESS)",
          "114: #define IOCTL_USB_GET_NODE_CONNECTION_INFORMATION_EX_V2 \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "109: #define USB_HUB_CYCLE_PORT                        273",
          "113: #define IOCTL_USB_HUB_CYCLE_PORT \\",
          "114:   CTL_CODE(FILE_DEVICE_USB, USB_HUB_CYCLE_PORT, METHOD_BUFFERED, FILE_ANY_ACCESS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "172:  USB_NODE_CONNECTION_INFORMATION_EX_V2_FLAGS Flags;",
          "173: } USB_NODE_CONNECTION_INFORMATION_EX_V2, *PUSB_NODE_CONNECTION_INFORMATION_EX_V2;",
          "175: #pragma pack(pop)",
          "177: const GUID _GUID_DEVINTERFACE_DISK =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178: typedef struct {",
          "179:  ULONG ConnectionIndex;",
          "180:  ULONG StatusReturned;",
          "181: } USB_CYCLE_PORT_PARAMS;",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "114: char embedded_sl_version_str[2][12] = { \"?.??\", \"?.??\" };",
          "115: char embedded_sl_version_ext[2][32];",
          "116: RUFUS_UPDATE update = { {0,0,0}, {0,0}, NULL, NULL};",
          "118: extern char* szStatusMessage;",
          "120: static HANDLE format_thid = NULL, dialog_handle = NULL;",
          "",
          "[Removed Lines]",
          "117: StrArray DriveID, DriveLabel, BlockingProcess;",
          "",
          "[Added Lines]",
          "117: StrArray DriveID, DriveLabel, DriveHub, BlockingProcess;",
          "118: uint32_t DrivePort[MAX_DRIVES];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1828:  }",
          "1829:  IGNORE_RETVAL(ComboBox_SetCurSel(hDiskID, 0));",
          "1832:  StrArrayCreate(&DriveID, MAX_DRIVES);",
          "1833:  StrArrayCreate(&DriveLabel, MAX_DRIVES);",
          "1834:  StrArrayCreate(&BlockingProcess, 16);",
          "1836:  CheckDlgButton(hDlg, IDC_QUICKFORMAT, BST_CHECKED);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1835:  StrArrayCreate(&DriveHub, MAX_DRIVES);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2351:    PostQuitMessage(0);",
          "2352:    StrArrayDestroy(&DriveID);",
          "2353:    StrArrayDestroy(&DriveLabel);",
          "2354:    StrArrayDestroy(&BlockingProcess);",
          "2355:    DestroyAllTooltips();",
          "2356:    DestroyWindow(hLogDlg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2356:    StrArrayDestroy(&DriveHub);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3359:    (msg.message == WM_KEYDOWN) && (msg.wParam == 'A') ) {",
          "3361:    Edit_SetSel(hLog, 0, -1);",
          "3362:   }",
          "3364:   if ((msg.message == WM_SYSKEYDOWN) && (msg.wParam == VK_OEM_PERIOD)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3365:    continue;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3385:    PrintStatusTimeout(lmprintf(MSG_256), detect_fakes);",
          "3386:    continue;",
          "3387:   }",
          "3391:   if ((msg.message == WM_SYSKEYDOWN) && (msg.wParam == 'C')) {",
          "3394:    continue;",
          "3395:   }",
          "",
          "[Removed Lines]",
          "3392:    force_update = !force_update;",
          "3393:    PrintStatusTimeout(lmprintf(MSG_259), force_update);",
          "",
          "[Added Lines]",
          "3394:    int index = ComboBox_GetCurSel(hDeviceList);",
          "3395:    if (index < 0)",
          "3396:     break;",
          "3397:    ResetDevice(index);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3525:    SHDeleteDirectoryExU(NULL, tmp_path, FOF_SILENT | FOF_NOERRORUI | FOF_NOCONFIRMATION);",
          "3526:    continue;",
          "3527:   }",
          "3529:   if ((msg.message == WM_SYSKEYDOWN) && (msg.wParam == 'Z')) {",
          "3530:    zero_drive = TRUE;",
          "3532:    PostMessage(hDlg, WM_COMMAND, (WPARAM)IDC_START, 0);",
          "3533:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3534:   if ((msg.message == WM_SYSKEYDOWN) && (msg.wParam == 'Y')) {",
          "3535:    force_update = !force_update;",
          "3536:    PrintStatusTimeout(lmprintf(MSG_259), force_update);",
          "3537:    continue;",
          "3538:   }",
          "3544:    continue;",
          "",
          "---------------"
        ],
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:  WINDOWS_UNDEFINED = -1,",
          "370:  WINDOWS_UNSUPPORTED = 0,",
          "371:  WINDOWS_XP = 0x51,",
          "377:  WINDOWS_10_PREVIEW1 = 0x64,",
          "378:  WINDOWS_10 = 0xA0,",
          "379:  WINDOWS_MAX",
          "",
          "[Removed Lines]",
          "372:  WINDOWS_2003 = 0x52, // Also XP x64",
          "373:  WINDOWS_VISTA = 0x60,",
          "374:  WINDOWS_7 = 0x61,",
          "375:  WINDOWS_8 = 0x62,",
          "376:  WINDOWS_8_1 = 0x63,",
          "",
          "[Added Lines]",
          "372:  WINDOWS_2003 = 0x52, // Also XP_64",
          "373:  WINDOWS_VISTA = 0x60, // Also 2008",
          "374:  WINDOWS_7 = 0x61,  // Also 2008_R2",
          "375:  WINDOWS_8 = 0x62,  // Also 2012",
          "376:  WINDOWS_8_1 = 0x63,  // Also 2012_R2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "460: extern DWORD RunCommand(const char* cmdline, const char* dir, BOOL log);",
          "461: extern BOOL CompareGUID(const GUID *guid1, const GUID *guid2);",
          "462: extern BOOL GetDevices(DWORD devnum);",
          "463: extern BOOL GetOpticalMedia(IMG_SAVE* img_save);",
          "464: extern BOOL SetLGP(BOOL bRestore, BOOL* bExistingKey, const char* szPath, const char* szPolicy, DWORD dwValue);",
          "465: extern LONG GetEntryWidth(HWND hDropDown, const char* entry);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463: extern BOOL ResetDevice(int index);",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.18.1200\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.18.1201\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368: VS_VERSION_INFO VERSIONINFO",
          "371:  FILEFLAGSMASK 0x3fL",
          "372: #ifdef _DEBUG",
          "373:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "369:  FILEVERSION 2,18,1200,0",
          "370:  PRODUCTVERSION 2,18,1200,0",
          "",
          "[Added Lines]",
          "369:  FILEVERSION 2,18,1201,0",
          "370:  PRODUCTVERSION 2,18,1201,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:         BEGIN",
          "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "386:             VALUE \"FileDescription\", \"Rufus\"",
          "388:             VALUE \"InternalName\", \"Rufus\"",
          "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "392:             VALUE \"ProductName\", \"Rufus\"",
          "394:         END",
          "395:     END",
          "396:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "387:             VALUE \"FileVersion\", \"2.18.1200\"",
          "393:             VALUE \"ProductVersion\", \"2.18.1200\"",
          "",
          "[Added Lines]",
          "387:             VALUE \"FileVersion\", \"2.18.1201\"",
          "393:             VALUE \"ProductVersion\", \"2.18.1201\"",
          "",
          "---------------"
        ],
        "src/stdfn.c||src/stdfn.c": [
          "File: src/stdfn.c -> src/stdfn.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "284:    switch (nWindowsVersion) {",
          "285:    case 0x51: w = \"XP\";",
          "286:     break;",
          "288:     break;",
          "290:     break;",
          "292:     break;",
          "294:     break;",
          "296:     break;",
          "297:    case 0x64: w = (ws?\"10 (Preview 1)\":\"Server 10 (Preview 1)\");",
          "298:     break;",
          "301:     break;",
          "302:    default:",
          "303:     if (nWindowsVersion < 0x51)",
          "",
          "[Removed Lines]",
          "287:    case 0x52: w = (!GetSystemMetrics(89)?\"2003\":\"2003_R2\");",
          "289:    case 0x60: w = (ws?\"Vista\":\"2008\");",
          "291:    case 0x61: w = (ws?\"7\":\"2008_R2\");",
          "293:    case 0x62: w = (ws?\"8\":\"2012\");",
          "295:    case 0x63: w = (ws?\"8.1\":\"2012_R2\");",
          "300:    case 0xA0: w = (ws?\"10\":\"Server 10\");",
          "",
          "[Added Lines]",
          "287:    case 0x52: w = (!GetSystemMetrics(89)?\"Server 2003\":\"Server 2003_R2\");",
          "289:    case 0x60: w = (ws?\"Vista\":\"Server 2008\");",
          "291:    case 0x61: w = (ws?\"7\":\"Server 2008_R2\");",
          "293:    case 0x62: w = (ws?\"8\":\"Server 2012\");",
          "295:    case 0x63: w = (ws?\"8.1\":\"Server 2012_R2\");",
          "300:    case 0xA0: w = (ws?\"10\":\"Server 2016\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea940114ee4d4762fb2788e62e8981373e1811ca",
      "candidate_info": {
        "commit_hash": "ea940114ee4d4762fb2788e62e8981373e1811ca",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/ea940114ee4d4762fb2788e62e8981373e1811ca",
        "files": [
          "src/process.c",
          "src/process.h",
          "src/rufus.c",
          "src/rufus.h",
          "src/rufus.rc"
        ],
        "message": "[process] enable SE_DEBUG_PRIVILEGE so we can enumerate Windows Services\n\n* Closes #948\n* Also set COINIT_DISABLE_OLE1DDE on init as advised by Microsoft",
        "before_after_code_files": [
          "src/process.c||src/process.c",
          "src/process.h||src/process.h",
          "src/rufus.c||src/rufus.c",
          "src/rufus.h||src/rufus.h",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/process.c||src/process.c": [
          "File: src/process.c -> src/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: PF_TYPE_DECL(NTAPI, NTSTATUS, NtQueryObject, (HANDLE, OBJECT_INFORMATION_CLASS, PVOID, ULONG, PULONG));",
          "52: PF_TYPE_DECL(NTAPI, NTSTATUS, NtDuplicateObject, (HANDLE, HANDLE, HANDLE, PHANDLE, ACCESS_MASK, ULONG, ULONG));",
          "53: PF_TYPE_DECL(NTAPI, NTSTATUS, NtOpenProcess, (PHANDLE, ACCESS_MASK, POBJECT_ATTRIBUTES, PCLIENT_ID));",
          "54: PF_TYPE_DECL(NTAPI, NTSTATUS, NtClose, (HANDLE));",
          "",
          "[Removed Lines]",
          "56: PVOID PhHeapHandle = NULL;",
          "",
          "[Added Lines]",
          "54: PF_TYPE_DECL(NTAPI, NTSTATUS, NtOpenProcessToken, (HANDLE, ACCESS_MASK, PHANDLE));",
          "55: PF_TYPE_DECL(NTAPI, NTSTATUS, NtAdjustPrivilegesToken, (HANDLE, BOOLEAN, PTOKEN_PRIVILEGES, ULONG, PTOKEN_PRIVILEGES, PULONG));",
          "58: static PVOID PhHeapHandle = NULL;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:  static char unknown[32];",
          "69:  switch (Status) {",
          "70:  case STATUS_UNSUCCESSFUL:",
          "71:   return \"Operation Failed\";",
          "72:  case STATUS_BUFFER_OVERFLOW:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:  case STATUS_SUCCESS:",
          "73:   return \"Operation Successful\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "548:  PhDestroyHeap();",
          "549:  return bFound;",
          "550: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "561: BOOL EnablePrivileges(void)",
          "562: {",
          "565:  const DWORD requestedPrivileges[] = {",
          "566:   SE_DEBUG_PRIVILEGE,",
          "567:  };",
          "568:  NTSTATUS status = STATUS_NOT_IMPLEMENTED;",
          "569:  HANDLE tokenHandle;",
          "571:  PF_INIT_OR_OUT(NtClose, NtDll);",
          "572:  PF_INIT_OR_OUT(NtOpenProcessToken, NtDll);",
          "573:  PF_INIT_OR_OUT(NtAdjustPrivilegesToken, NtDll);",
          "575:  status = pfNtOpenProcessToken(NtCurrentProcess(), TOKEN_ADJUST_PRIVILEGES, &tokenHandle);",
          "577:  if (NT_SUCCESS(status)) {",
          "578:   CHAR privilegesBuffer[FIELD_OFFSET(TOKEN_PRIVILEGES, Privileges) +",
          "579:    sizeof(LUID_AND_ATTRIBUTES) * ARRAYSIZE(requestedPrivileges)];",
          "580:   PTOKEN_PRIVILEGES privileges;",
          "581:   ULONG i;",
          "583:   privileges = (PTOKEN_PRIVILEGES)privilegesBuffer;",
          "584:   privileges->PrivilegeCount = ARRAYSIZE(requestedPrivileges);",
          "586:   for (i = 0; i < privileges->PrivilegeCount; i++) {",
          "587:    privileges->Privileges[i].Attributes = SE_PRIVILEGE_ENABLED;",
          "588:    privileges->Privileges[i].Luid.HighPart = 0;",
          "589:    privileges->Privileges[0].Luid.LowPart = requestedPrivileges[i];",
          "590:   }",
          "592:   status = pfNtAdjustPrivilegesToken(tokenHandle, FALSE, privileges, 0, NULL, NULL);",
          "594:   pfNtClose(tokenHandle);",
          "595:  }",
          "597: out:",
          "598:  if (!NT_SUCCESS(status))",
          "599:   ubprintf(\"NOTE: Could not set process privileges: %s\", NtStatusError(status));",
          "600:  return NT_SUCCESS(status);",
          "601: }",
          "",
          "---------------"
        ],
        "src/process.h||src/process.h": [
          "File: src/process.h -> src/process.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "233: #define HEAP_CLASS_8 0x00008000 // CSR port heap",
          "234: #define HEAP_CLASS_MASK 0x0000f000",
          "",
          "[Removed Lines]",
          "236: #define PF_INIT_OR_SET_STATUS(proc, name)  do {PF_INIT(proc, name);   \\",
          "237:  if (pf##proc == NULL) status = STATUS_NOT_IMPLEMENTED; } while(0)",
          "",
          "[Added Lines]",
          "238: #define SE_MIN_WELL_KNOWN_PRIVILEGE (2L)",
          "239: #define SE_CREATE_TOKEN_PRIVILEGE (2L)",
          "240: #define SE_ASSIGNPRIMARYTOKEN_PRIVILEGE (3L)",
          "241: #define SE_LOCK_MEMORY_PRIVILEGE (4L)",
          "242: #define SE_INCREASE_QUOTA_PRIVILEGE (5L)",
          "243: #define SE_MACHINE_ACCOUNT_PRIVILEGE (6L)",
          "244: #define SE_TCB_PRIVILEGE (7L)",
          "245: #define SE_SECURITY_PRIVILEGE (8L)",
          "246: #define SE_TAKE_OWNERSHIP_PRIVILEGE (9L)",
          "247: #define SE_LOAD_DRIVER_PRIVILEGE (10L)",
          "248: #define SE_SYSTEM_PROFILE_PRIVILEGE (11L)",
          "249: #define SE_SYSTEMTIME_PRIVILEGE (12L)",
          "250: #define SE_PROF_SINGLE_PROCESS_PRIVILEGE (13L)",
          "251: #define SE_INC_BASE_PRIORITY_PRIVILEGE (14L)",
          "252: #define SE_CREATE_PAGEFILE_PRIVILEGE (15L)",
          "253: #define SE_CREATE_PERMANENT_PRIVILEGE (16L)",
          "254: #define SE_BACKUP_PRIVILEGE (17L)",
          "255: #define SE_RESTORE_PRIVILEGE (18L)",
          "256: #define SE_SHUTDOWN_PRIVILEGE (19L)",
          "257: #define SE_DEBUG_PRIVILEGE (20L)",
          "258: #define SE_AUDIT_PRIVILEGE (21L)",
          "259: #define SE_SYSTEM_ENVIRONMENT_PRIVILEGE (22L)",
          "260: #define SE_CHANGE_NOTIFY_PRIVILEGE (23L)",
          "261: #define SE_REMOTE_SHUTDOWN_PRIVILEGE (24L)",
          "262: #define SE_UNDOCK_PRIVILEGE (25L)",
          "263: #define SE_SYNC_AGENT_PRIVILEGE (26L)",
          "264: #define SE_ENABLE_DELEGATION_PRIVILEGE (27L)",
          "265: #define SE_MANAGE_VOLUME_PRIVILEGE (28L)",
          "266: #define SE_IMPERSONATE_PRIVILEGE (29L)",
          "267: #define SE_CREATE_GLOBAL_PRIVILEGE (30L)",
          "268: #define SE_TRUSTED_CREDMAN_ACCESS_PRIVILEGE (31L)",
          "269: #define SE_RELABEL_PRIVILEGE (32L)",
          "270: #define SE_INC_WORKING_SET_PRIVILEGE (33L)",
          "271: #define SE_TIME_ZONE_PRIVILEGE (34L)",
          "272: #define SE_CREATE_SYMBOLIC_LINK_PRIVILEGE (35L)",
          "273: #define SE_MAX_WELL_KNOWN_PRIVILEGE SE_CREATE_SYMBOLIC_LINK_PRIVILEGE",
          "275: #define PF_INIT_OR_SET_STATUS(proc, name)  do {PF_INIT(proc, name);                            \\",
          "276:  if ((pf##proc == NULL) && (NT_SUCCESS(status))) status = STATUS_NOT_IMPLEMENTED; } while(0)",
          "",
          "---------------"
        ],
        "src/rufus.c||src/rufus.c": [
          "File: src/rufus.c -> src/rufus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3157:  hMainInstance = hInstance;",
          "3163:  if (GetLibraryHandle(\"Riched20\") == NULL) {",
          "",
          "[Removed Lines]",
          "3160:  IGNORE_RETVAL(CoInitializeEx(NULL, COINIT_APARTMENTTHREADED));",
          "",
          "[Added Lines]",
          "3160:  IGNORE_RETVAL(CoInitializeEx(NULL, COINIT_APARTMENTTHREADED | COINIT_DISABLE_OLE1DDE));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3168:  GetWindowsVersion();",
          "3172:  lgp_set = SetLGP(FALSE, &existing_key, ep_reg, \"NoDriveTypeAutorun\", 0x9e);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3172:  EnablePrivileges();",
          "",
          "---------------"
        ],
        "src/rufus.h||src/rufus.h": [
          "File: src/rufus.h -> src/rufus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "500: extern BOOL SetFormatPromptHook(void);",
          "501: extern void ClrFormatPromptHook(void);",
          "502: extern BOOL SearchProcess(char* HandleName, BOOL bPartialMatch, BOOL bIgnoreSelf);",
          "504: DWORD WINAPI FormatThread(void* param);",
          "505: DWORD WINAPI SaveImageThread(void* param);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "503: extern BOOL EnablePrivileges(void);",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.15.1104\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.15.1105\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "336: VS_VERSION_INFO VERSIONINFO",
          "339:  FILEFLAGSMASK 0x3fL",
          "340: #ifdef _DEBUG",
          "341:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "337:  FILEVERSION 2,15,1104,0",
          "338:  PRODUCTVERSION 2,15,1104,0",
          "",
          "[Added Lines]",
          "337:  FILEVERSION 2,15,1105,0",
          "338:  PRODUCTVERSION 2,15,1105,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "352:         BEGIN",
          "353:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "354:             VALUE \"FileDescription\", \"Rufus\"",
          "356:             VALUE \"InternalName\", \"Rufus\"",
          "357:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "358:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "359:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "360:             VALUE \"ProductName\", \"Rufus\"",
          "362:         END",
          "363:     END",
          "364:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "355:             VALUE \"FileVersion\", \"2.15.1104\"",
          "361:             VALUE \"ProductVersion\", \"2.15.1104\"",
          "",
          "[Added Lines]",
          "355:             VALUE \"FileVersion\", \"2.15.1105\"",
          "361:             VALUE \"ProductVersion\", \"2.15.1105\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4a213c3ba08610e3bcb42776f9c2cc3cf52eb864",
      "candidate_info": {
        "commit_hash": "4a213c3ba08610e3bcb42776f9c2cc3cf52eb864",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/4a213c3ba08610e3bcb42776f9c2cc3cf52eb864",
        "files": [
          "ChangeLog.txt",
          "src/drive.c",
          "src/iso.c",
          "src/rufus.rc"
        ],
        "message": "[core] allow the use of A: and B: as drive letters and fix in-use detection for Z:\n\n* Closes #1016\n* Also expand support for Arch Linux derivatives Syslinux config files",
        "before_after_code_files": [
          "src/drive.c||src/drive.c",
          "src/iso.c||src/iso.c",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/drive.c||src/drive.c": [
          "File: src/drive.c -> src/drive.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "431:   if (!isalpha(*drive))",
          "432:    continue;",
          "",
          "[Removed Lines]",
          "434:   if (*drive < 'C') {",
          "435:    continue;",
          "436:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "502:   goto out;",
          "503:  }",
          "506:   for (drive = drives ;*drive; drive += safe_strlen(drive)+1) {",
          "507:    if (!isalpha(*drive))",
          "508:     continue;",
          "",
          "[Removed Lines]",
          "505:  for (drive_letter = 'C'; drive_letter < 'Z'; drive_letter++) {",
          "",
          "[Added Lines]",
          "502:  for (drive_letter = 'C'; drive_letter <= 'Z'; drive_letter++) {",
          "",
          "---------------"
        ],
        "src/iso.c||src/iso.c": [
          "File: src/iso.c -> src/iso.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83: static const char* grub_dirname = \"/boot/grub/i386-pc\";",
          "84: static const char* grub_cfg = \"grub.cfg\";",
          "85: static const char* syslinux_cfg[] = { \"isolinux.cfg\", \"syslinux.cfg\", \"extlinux.conf\" };",
          "87: static const char* isolinux_bin[] = { \"isolinux.bin\", \"boot.bin\" };",
          "88: static const char* pe_dirname[] = { \"/i386\", \"/minint\" };",
          "89: static const char* pe_file[] = { \"ntdetect.com\", \"setupldr.bin\", \"txtsetup.sif\" };",
          "",
          "[Removed Lines]",
          "86: static const char* arch_cfg[] = { \"archiso_sys32.cfg\", \"archiso_sys64.cfg\" };",
          "",
          "[Added Lines]",
          "86: static const char* arch_cfg[] = { \"archiso_sys.cfg\", \"archiso_sys32.cfg\", \"archiso_sys64.cfg\" };",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.17.1192\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.17.1193\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368: VS_VERSION_INFO VERSIONINFO",
          "371:  FILEFLAGSMASK 0x3fL",
          "372: #ifdef _DEBUG",
          "373:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "369:  FILEVERSION 2,17,1192,0",
          "370:  PRODUCTVERSION 2,17,1192,0",
          "",
          "[Added Lines]",
          "369:  FILEVERSION 2,17,1193,0",
          "370:  PRODUCTVERSION 2,17,1193,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:         BEGIN",
          "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "386:             VALUE \"FileDescription\", \"Rufus\"",
          "388:             VALUE \"InternalName\", \"Rufus\"",
          "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "392:             VALUE \"ProductName\", \"Rufus\"",
          "394:         END",
          "395:     END",
          "396:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "387:             VALUE \"FileVersion\", \"2.17.1192\"",
          "393:             VALUE \"ProductVersion\", \"2.17.1192\"",
          "",
          "[Added Lines]",
          "387:             VALUE \"FileVersion\", \"2.17.1193\"",
          "393:             VALUE \"ProductVersion\", \"2.17.1193\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39e418fbe96926cac7392e066b7bd0a2a3dd3181",
      "candidate_info": {
        "commit_hash": "39e418fbe96926cac7392e066b7bd0a2a3dd3181",
        "repo": "pbatard/rufus",
        "commit_url": "https://github.com/pbatard/rufus/commit/39e418fbe96926cac7392e066b7bd0a2a3dd3181",
        "files": [
          "src/libcdio/cdio/bytesex.h",
          "src/libcdio/iso9660/rock.c",
          "src/rufus.rc"
        ],
        "message": "[iso] add work around for ISOs that use nonstandard Rock Ridge extensions\n\n* Looking at you Kali Linux!\n* Also silence the annoying 'from_733: broken byte order' warning",
        "before_after_code_files": [
          "src/libcdio/cdio/bytesex.h||src/libcdio/cdio/bytesex.h",
          "src/libcdio/iso9660/rock.c||src/libcdio/iso9660/rock.c",
          "src/rufus.rc||src/rufus.rc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/rufus.rc||src/rufus.rc"
          ],
          "candidate": [
            "src/rufus.rc||src/rufus.rc"
          ]
        }
      },
      "candidate_diff": {
        "src/libcdio/cdio/bytesex.h||src/libcdio/cdio/bytesex.h": [
          "File: src/libcdio/cdio/bytesex.h -> src/libcdio/cdio/bytesex.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "201: static CDIO_INLINE uint32_t",
          "202: from_733 (uint64_t p)",
          "205:     cdio_warn (\"from_733: broken byte order\");",
          "207:   return (UINT32_C(0xFFFFFFFF) & p);",
          "",
          "[Removed Lines]",
          "203: {",
          "204:   if (uint64_swap_le_be (p) != p)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/libcdio/iso9660/rock.c||src/libcdio/iso9660/rock.c": [
          "File: src/libcdio/iso9660/rock.c -> src/libcdio/iso9660/rock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:       case SIG('C','L'):",
          "183:       case SIG('P','L'):",
          "184:       case SIG('T','F'):",
          "185:       case SIG('Z','F'):",
          "186:  break;",
          "187:       default:",
          "189:  goto out;",
          "190:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:       case SIG('Z','F'):",
          "",
          "---------------"
        ],
        "src/rufus.rc||src/rufus.rc": [
          "File: src/rufus.rc -> src/rufus.rc",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: IDD_DIALOG DIALOGEX 12, 12, 242, 376",
          "34: STYLE DS_SETFONT | DS_MODALFRAME | DS_CENTER | WS_MINIMIZEBOX | WS_POPUP | WS_CAPTION | WS_SYSMENU",
          "35: EXSTYLE WS_EX_ACCEPTFILES",
          "37: FONT 8, \"Segoe UI Symbol\", 400, 0, 0x0",
          "38: BEGIN",
          "39:     LTEXT           \"Device\",IDS_DEVICE_TXT,9,6,200,8",
          "",
          "[Removed Lines]",
          "36: CAPTION \"Rufus 2.16.1147\"",
          "",
          "[Added Lines]",
          "36: CAPTION \"Rufus 2.16.1148\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "368: VS_VERSION_INFO VERSIONINFO",
          "371:  FILEFLAGSMASK 0x3fL",
          "372: #ifdef _DEBUG",
          "373:  FILEFLAGS 0x1L",
          "",
          "[Removed Lines]",
          "369:  FILEVERSION 2,16,1147,0",
          "370:  PRODUCTVERSION 2,16,1147,0",
          "",
          "[Added Lines]",
          "369:  FILEVERSION 2,16,1148,0",
          "370:  PRODUCTVERSION 2,16,1148,0",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:         BEGIN",
          "385:             VALUE \"CompanyName\", \"Akeo Consulting (http://akeo.ie)\"",
          "386:             VALUE \"FileDescription\", \"Rufus\"",
          "388:             VALUE \"InternalName\", \"Rufus\"",
          "389:             VALUE \"LegalCopyright\", \"\ufffd 2011-2017 Pete Batard (GPL v3)\"",
          "390:             VALUE \"LegalTrademarks\", \"http://www.gnu.org/copyleft/gpl.html\"",
          "391:             VALUE \"OriginalFilename\", \"rufus.exe\"",
          "392:             VALUE \"ProductName\", \"Rufus\"",
          "394:         END",
          "395:     END",
          "396:     BLOCK \"VarFileInfo\"",
          "",
          "[Removed Lines]",
          "387:             VALUE \"FileVersion\", \"2.16.1147\"",
          "393:             VALUE \"ProductVersion\", \"2.16.1147\"",
          "",
          "[Added Lines]",
          "387:             VALUE \"FileVersion\", \"2.16.1148\"",
          "393:             VALUE \"ProductVersion\", \"2.16.1148\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}