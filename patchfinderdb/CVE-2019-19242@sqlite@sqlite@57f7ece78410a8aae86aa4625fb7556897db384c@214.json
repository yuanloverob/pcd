{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6c35b3065c509ec49a0ca40c85df2fdf3274306b",
      "candidate_info": {
        "commit_hash": "6c35b3065c509ec49a0ca40c85df2fdf3274306b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6c35b3065c509ec49a0ca40c85df2fdf3274306b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/pragma.c",
          "src/sqlite.h.in",
          "test/jrnlmode.test"
        ],
        "message": "Disable PRAGMA journal_mode=OFF when SQLITE_DBCONFIG_DEFENSIVE is turned on. Ticket [f4ec250930342e0c].\n\nFossilOrigin-Name: a0f5eb5c79cc33b7224f3421d2baa02a2a19eb9d6eaa8117dda4a1878b229cb5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/pragma.c||src/pragma.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "test/jrnlmode.test||test/jrnlmode.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14c00b1016ba53ab2dc177c59a27b6b9209202973685f0f274112d296ba7dfcb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "645:         eMode = PAGER_JOURNALMODE_QUERY;",
          "646:       }",
          "647:     }",
          "648:     if( eMode==PAGER_JOURNALMODE_QUERY && pId2->n==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "647:       if( eMode==PAGER_JOURNALMODE_OFF && (db->flags & SQLITE_Defensive)!=0 ){",
          "650:         eMode = PAGER_JOURNALMODE_QUERY;",
          "651:       }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ],
        "test/jrnlmode.test||test/jrnlmode.test": [
          "File: test/jrnlmode.test -> test/jrnlmode.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     PRAGMA temp.journal_mode;",
          "66:   }",
          "67: } [list persist persist [temp_journal_mode persist]]",
          "69:   execsql {",
          "70:     PRAGMA journal_mode = off;",
          "71:   }",
          "",
          "[Removed Lines]",
          "68: do_test jrnlmode-1.4 {",
          "",
          "[Added Lines]",
          "68: do_test jrnlmode-1.4a {",
          "69:   # When defensive is on, unable to set journal_mode to OFF",
          "70:   sqlite3_db_config db DEFENSIVE 1",
          "71:   execsql {",
          "72:     PRAGMA journal_mode = off;",
          "73:   }",
          "74: } {persist}",
          "75: do_test jrnlmode-1.4b {",
          "76:   # When defensive is on, unable to set journal_mode to OFF",
          "77:   sqlite3_db_config db DEFENSIVE 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfb5c963a0b643a6179de67f419f2019c4eb5dee",
      "candidate_info": {
        "commit_hash": "dfb5c963a0b643a6179de67f419f2019c4eb5dee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/dfb5c963a0b643a6179de67f419f2019c4eb5dee",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/altertab2.test"
        ],
        "message": "Fix a problem with ALTER TABLE and vector assignments in UPDATE statements within triggers.\n\nFossilOrigin-Name: cc6cd7531fee39b4c2a9f522f1089c1d79254a9e25acae59468322031f94c25a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/altertab2.test||test/altertab2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a5e9cc794f17566160c4b2b5791601a744a21ace987b19ff8a5816fd78dce56a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "465:   }else{",
          "466:     if( pVector->op==TK_VECTOR ) pVector = pVector->x.pList->a[iField].pExpr;",
          "467:     pRet = sqlite3ExprDup(pParse->db, pVector, 0);",
          "468:   }",
          "469:   return pRet;",
          "470: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "468:     sqlite3RenameTokenRemap(pParse, pRet, pVector);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1668:   }",
          "1670: vector_append_error:",
          "1671:   sqlite3ExprDelete(db, pExpr);",
          "1672:   sqlite3IdListDelete(db, pColumns);",
          "1673:   return pList;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1672:   if( IN_RENAME_OBJECT ){",
          "1673:     sqlite3RenameExprUnmap(pParse, pExpr);",
          "1674:   }",
          "",
          "---------------"
        ],
        "test/altertab2.test||test/altertab2.test": [
          "File: test/altertab2.test -> test/altertab2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "142:   } $expect",
          "143: }",
          "145: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145: #-------------------------------------------------------------------------",
          "146: reset_db",
          "147: do_execsql_test 4.0 {",
          "148:   CREATE TABLE t1(a,b,c,d,e,f);",
          "149:   CREATE TRIGGER r1 AFTER INSERT ON t1 WHEN new.a NOT NULL BEGIN",
          "150:     UPDATE t1 SET (c,d)=(a,b);",
          "151:   END;",
          "152: }",
          "154: do_execsql_test 4.1 {",
          "155:   ALTER TABLE t1 RENAME TO t1x;",
          "156:   SELECT sql FROM sqlite_master WHERE type = 'trigger';",
          "157: } {",
          "158: {CREATE TRIGGER r1 AFTER INSERT ON \"t1x\" WHEN new.a NOT NULL BEGIN",
          "159:     UPDATE \"t1x\" SET (c,d)=(a,b);",
          "160:   END}",
          "161: }",
          "163: do_execsql_test 4.2 {",
          "164:   ALTER TABLE t1x RENAME a TO aaa;",
          "165:   SELECT sql FROM sqlite_master WHERE type = 'trigger';",
          "166: } {",
          "167: {CREATE TRIGGER r1 AFTER INSERT ON \"t1x\" WHEN new.aaa NOT NULL BEGIN",
          "168:     UPDATE \"t1x\" SET (c,d)=(aaa,b);",
          "169:   END}",
          "170: }",
          "172: do_execsql_test 4.3 {",
          "173:   ALTER TABLE t1x RENAME d TO ddd;",
          "174:   SELECT sql FROM sqlite_master WHERE type = 'trigger';",
          "175: } {",
          "176: {CREATE TRIGGER r1 AFTER INSERT ON \"t1x\" WHEN new.aaa NOT NULL BEGIN",
          "177:     UPDATE \"t1x\" SET (c,ddd)=(aaa,b);",
          "178:   END}",
          "179: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4177c8a2b780a3be520f423d896b8825a01a3924",
      "candidate_info": {
        "commit_hash": "4177c8a2b780a3be520f423d896b8825a01a3924",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4177c8a2b780a3be520f423d896b8825a01a3924",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix another problem with loading the structure record from a corrupt fts5 database.\n\nFossilOrigin-Name: c4d44542d259bbec11aea60ae94fcb4acd53e97e125723cae078cf0f8873f8ef",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "861:   i += fts5GetVarint32(&pData[i], nLevel);",
          "862:   i += fts5GetVarint32(&pData[i], nSegment);",
          "864:     return FTS5_CORRUPT;",
          "865:   }",
          "866:   nByte = (",
          "",
          "[Removed Lines]",
          "863:   if( nLevel>FTS5_MAX_SEGMENT || nSegment>FTS5_MAX_SEGMENT ){",
          "",
          "[Added Lines]",
          "863:   if( nLevel>FTS5_MAX_SEGMENT   || nLevel<0",
          "864:    || nSegment>FTS5_MAX_SEGMENT || nSegment<0",
          "865:   ){",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1547:   INSERT INTO t1(t1) VALUES('optimize');",
          "1548: } {1 {database disk image is malformed}}",
          "1550: sqlite3_fts5_may_be_corrupt 0",
          "1551: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1550: #--------------------------------------------------------------------------",
          "1551: reset_db",
          "1552: do_test 20.0 {",
          "1553:   sqlite3 db {}",
          "1554:   db deserialize [decode_hexdb {",
          "1555: | size 28672 pagesize 4096 filename crash-cf347c523f793c.db",
          "1556: | page 1 offset 0",
          "1557: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "1558: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "1559: |     32: 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00   ................",
          "1560: |     48: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00   ................",
          "1561: |     96: 00 00 00 00 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ...............m",
          "1562: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "1563: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "1564: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "1565: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "1566: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "1567: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "1568: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "1569: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "1570: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "1571: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "1572: |   3680: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "1573: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "1574: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "1575: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "1576: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "1577: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "1578: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "1579: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "1580: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "1581: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "1582: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "1583: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "1584: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "1585: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "1586: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "1587: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "1588: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "1589: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "1590: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "1591: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "1592: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "1593: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "1594: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "1595: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "1596: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "1597: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "1598: | page 2 offset 4096",
          "1599: |      0: 0d 00 00 00 03 0f bd 00 0f e8 0f ef 0f bd 00 00   ................",
          "1600: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 24 84 80   .............$..",
          "1601: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "1602: |   4048: 63 6b 01 02 02 04 02 66 74 02 02 02 04 04 6e 64   ck.....ft.....nd",
          "1603: |   4064: 6f 6e 03 02 02 04 0a 07 05 01 03 00 10 03 03 0f   on..............",
          "1604: |   4080: 0a 03 00 24 00 00 00 0e ee ee ee ee ee ee ee ee   ...$............",
          "1605: | page 3 offset 8192",
          "1606: |      0: ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee   ................",
          "1607: |     16: ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee ee   ................",
          "1608: |     32: ee ee ee ee ee ee ee ee ee ee ee ee 00 10 10 10   ................",
          "1609: |     48: 00 10 10 10 10 a0 00 00 00 10 ff a0 00 ff 00 00   ................",
          "1610: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "1611: | page 4 offset 12288",
          "1612: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 00 00   ................",
          "1613: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "1614: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "1615: | page 5 offset 16384",
          "1616: |      0: 0d 00 00 00 03 0f ee 00 0f fa 0f f4 0f ee 00 00   ................",
          "1617: |   4064: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03   ................",
          "1618: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "1619: | page 6 offset 20480",
          "1620: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "1621: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "1622: | page 7 offset 24576",
          "1623: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "1624: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "1625: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "1626: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "1627: | end crash-cf347c523f793c.db",
          "1628: }]} {}",
          "1630: do_catchsql_test 20.1 {",
          "1631:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "1632: } {1 {vtable constructor failed: t1}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0140f6dbfbea93eadcd7f727d84064a0c0d1f0806dbe3e5ef1017da603157e3b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1de92a64cd0413f4f8faae20f8af118eb5cb6f53",
      "candidate_info": {
        "commit_hash": "1de92a64cd0413f4f8faae20f8af118eb5cb6f53",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1de92a64cd0413f4f8faae20f8af118eb5cb6f53",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vtab.c"
        ],
        "message": "Optimization to sqlite3VtabUnlockList() for the common case when there is no work to do.\n\nFossilOrigin-Name: fc8d45086dc2bcb9bce756088e99e63cbeedf9129139fb0e6a48b43c4f502180",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cc49380ea76a4a05843d3a0bdfb925464dc9d72c33cf5ab5243dd07d161ad038",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "306: void sqlite3VtabUnlockList(sqlite3 *db){",
          "307:   VTable *p = db->pDisconnect;",
          "310:   assert( sqlite3BtreeHoldsAllMutexes(db) );",
          "311:   assert( sqlite3_mutex_held(db->mutex) );",
          "313:   if( p ){",
          "314:     sqlite3ExpirePreparedStatements(db, 0);",
          "315:     do {",
          "316:       VTable *pNext = p->pNext;",
          "",
          "[Removed Lines]",
          "308:   db->pDisconnect = 0;",
          "",
          "[Added Lines]",
          "313:     db->pDisconnect = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "89d249364e4cdee732374cfdf2966b17bc3fe44a",
      "candidate_info": {
        "commit_hash": "89d249364e4cdee732374cfdf2966b17bc3fe44a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/89d249364e4cdee732374cfdf2966b17bc3fe44a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/tclsqlite.c",
          "test/tclsqlite.test"
        ],
        "message": "Add the \"-returntype\" option to the \"db function\" Tcl method.\n\nFossilOrigin-Name: 789a492b68c353e2b763d67d399722b7ab61bfe09b472466df2821f65cab1be9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/tclsqlite.c||src/tclsqlite.c",
          "test/tclsqlite.test||test/tclsqlite.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 122330dba3eb2492875bd02a46442306f73e251408447af5e5914ee0c8d6a110",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "995:     u8 *data;",
          "996:     const char *zType = (pVar->typePtr ? pVar->typePtr->name : \"\");",
          "997:     char c = zType[0];",
          "1018:     }",
          "1019:   }",
          "1020: }",
          "",
          "[Removed Lines]",
          "998:     if( c=='b' && strcmp(zType,\"bytearray\")==0 && pVar->bytes==0 ){",
          "1001:       data = Tcl_GetByteArrayFromObj(pVar, &n);",
          "1002:       sqlite3_result_blob(context, data, n, SQLITE_TRANSIENT);",
          "1003:     }else if( c=='b' && strcmp(zType,\"boolean\")==0 ){",
          "1004:       Tcl_GetIntFromObj(0, pVar, &n);",
          "1005:       sqlite3_result_int(context, n);",
          "1006:     }else if( c=='d' && strcmp(zType,\"double\")==0 ){",
          "1007:       double r;",
          "1008:       Tcl_GetDoubleFromObj(0, pVar, &r);",
          "1009:       sqlite3_result_double(context, r);",
          "1010:     }else if( (c=='w' && strcmp(zType,\"wideInt\")==0) ||",
          "1011:           (c=='i' && strcmp(zType,\"int\")==0) ){",
          "1012:       Tcl_WideInt v;",
          "1013:       Tcl_GetWideIntFromObj(0, pVar, &v);",
          "1014:       sqlite3_result_int64(context, v);",
          "1015:     }else{",
          "1016:       data = (unsigned char *)Tcl_GetStringFromObj(pVar, &n);",
          "1017:       sqlite3_result_text(context, (char *)data, n, SQLITE_TRANSIENT);",
          "",
          "[Added Lines]",
          "1007:     int eType = p->eType;",
          "1009:     if( eType==SQLITE_NULL ){",
          "1010:       if( c=='b' && strcmp(zType,\"bytearray\")==0 && pVar->bytes==0 ){",
          "1013:         eType = SQLITE_BLOB;",
          "1014:       }else if( (c=='b' && strcmp(zType,\"boolean\")==0)",
          "1015:              || (c=='w' && strcmp(zType,\"wideInt\")==0)",
          "1016:              || (c=='i' && strcmp(zType,\"int\")==0)",
          "1017:       ){",
          "1018:         eType = SQLITE_INTEGER;",
          "1019:       }else if( c=='d' && strcmp(zType,\"double\")==0 ){",
          "1020:         eType = SQLITE_FLOAT;",
          "1021:       }else{",
          "1022:         eType = SQLITE_TEXT;",
          "1023:       }",
          "1024:     }",
          "1026:     switch( eType ){",
          "1027:       case SQLITE_BLOB: {",
          "1028:         data = Tcl_GetByteArrayFromObj(pVar, &n);",
          "1029:         sqlite3_result_blob(context, data, n, SQLITE_TRANSIENT);",
          "1030:         break;",
          "1031:       }",
          "1032:       case SQLITE_INTEGER: {",
          "1033:         Tcl_WideInt v;",
          "1034:         if( TCL_OK==Tcl_GetWideIntFromObj(0, pVar, &v) ){",
          "1035:           sqlite3_result_int64(context, v);",
          "1036:           break;",
          "1037:         }",
          "1039:       }",
          "1040:       case SQLITE_FLOAT: {",
          "1041:         double r;",
          "1042:         if( TCL_OK==Tcl_GetDoubleFromObj(0, pVar, &r) ){",
          "1043:           sqlite3_result_double(context, r);",
          "1044:           break;",
          "1045:         }",
          "1047:       }",
          "1048:       default: {",
          "1049:         data = (unsigned char *)Tcl_GetStringFromObj(pVar, &n);",
          "1050:         sqlite3_result_text(context, (char *)data, n, SQLITE_TRANSIENT);",
          "1051:         break;",
          "1052:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2646:     char *zName;",
          "2647:     int nArg = -1;",
          "2648:     int i;",
          "2649:     if( objc<4 ){",
          "2650:       Tcl_WrongNumArgs(interp, 2, objv, \"NAME ?SWITCHES? SCRIPT\");",
          "2651:       return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2685:     int eType = SQLITE_NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2653:     for(i=3; i<(objc-1); i++){",
          "2654:       const char *z = Tcl_GetString(objv[i]);",
          "2655:       int n = strlen30(z);",
          "2657:         if( i==(objc-2) ){",
          "2658:           Tcl_AppendResult(interp, \"option requires an argument: \", z,(char*)0);",
          "2659:           return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "2656:       if( n>2 && strncmp(z, \"-argcount\",n)==0 ){",
          "",
          "[Added Lines]",
          "2693:       if( n>1 && strncmp(z, \"-argcount\",n)==0 ){",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2666:         }",
          "2667:         i++;",
          "2668:       }else",
          "2670:         flags |= SQLITE_DETERMINISTIC;",
          "2671:       }else{",
          "2672:         Tcl_AppendResult(interp, \"bad option \\\"\", z,",
          "2674:         );",
          "2675:         return TCL_ERROR;",
          "2676:       }",
          "",
          "[Removed Lines]",
          "2669:       if( n>2 && strncmp(z, \"-deterministic\",n)==0 ){",
          "2673:             \"\\\": must be -argcount or -deterministic\", (char*)0",
          "",
          "[Added Lines]",
          "2706:       if( n>1 && strncmp(z, \"-deterministic\",n)==0 ){",
          "2708:       }else",
          "2709:       if( n>1 && strncmp(z, \"-returntype\", n)==0 ){",
          "2710:         const char *azType[] = {\"integer\", \"real\", \"text\", \"blob\", \"any\", 0};",
          "2711:         assert( SQLITE_INTEGER==1 && SQLITE_FLOAT==2 && SQLITE_TEXT==3 );",
          "2712:         assert( SQLITE_BLOB==4 && SQLITE_NULL==5 );",
          "2713:         if( i==(objc-2) ){",
          "2714:           Tcl_AppendResult(interp, \"option requires an argument: \", z,(char*)0);",
          "2715:           return TCL_ERROR;",
          "2716:         }",
          "2717:         i++;",
          "2718:         if( Tcl_GetIndexFromObj(interp, objv[i], azType, \"type\", 0, &eType) ){",
          "2719:           return TCL_ERROR;",
          "2720:         }",
          "2721:         eType++;",
          "2724:             \"\\\": must be -argcount, -deterministic or -returntype\", (char*)0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2686:     pFunc->pScript = pScript;",
          "2687:     Tcl_IncrRefCount(pScript);",
          "2688:     pFunc->useEvalObjv = safeToUseEvalObjv(interp, pScript);",
          "2689:     rc = sqlite3_create_function(pDb->db, zName, nArg, flags,",
          "2690:         pFunc, tclSqlFunc, 0, 0);",
          "2691:     if( rc!=SQLITE_OK ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2740:     pFunc->eType = eType;",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: set testdir [file dirname $argv0]",
          "23: source $testdir/tester.tcl",
          "25: # Check the error messages generated by tclsqlite",
          "26: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "24: set testprefix tcl",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "711:   set res",
          "712: } {1 {a b *} 2 {a *} 3 {a b *}}",
          "718: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "715: #-------------------------------------------------------------------------",
          "716: # Test the -type option to [db function].",
          "717: #",
          "718: reset_db",
          "719: proc add {a b} { return [expr $a + $b] }",
          "720: proc ret {a} { return $a }",
          "722: db function add_i -returntype integer add",
          "723: db function add_r -ret        real    add",
          "724: db function add_t -return     text    add",
          "725: db function add_b -returntype blob    add",
          "726: db function add_a -returntype any     add",
          "728: db function ret_i -returntype int     ret",
          "729: db function ret_r -returntype real    ret",
          "730: db function ret_t -returntype text    ret",
          "731: db function ret_b -returntype blob    ret",
          "732: db function ret_a -r          any     ret",
          "734: do_execsql_test 17.0 {",
          "735:   SELECT quote( add_i(2, 3) );",
          "736:   SELECT quote( add_r(2, 3) );",
          "737:   SELECT quote( add_t(2, 3) );",
          "738:   SELECT quote( add_b(2, 3) );",
          "739:   SELECT quote( add_a(2, 3) );",
          "740: } {5 5.0 '5' X'35' 5}",
          "742: do_execsql_test 17.1 {",
          "743:   SELECT quote( add_i(2.2, 3.3) );",
          "744:   SELECT quote( add_r(2.2, 3.3) );",
          "745:   SELECT quote( add_t(2.2, 3.3) );",
          "746:   SELECT quote( add_b(2.2, 3.3) );",
          "747:   SELECT quote( add_a(2.2, 3.3) );",
          "748: } {5.5 5.5 '5.5' X'352E35' 5.5}",
          "750: do_execsql_test 17.2 {",
          "751:   SELECT quote( ret_i(2.5) );",
          "752:   SELECT quote( ret_r(2.5) );",
          "753:   SELECT quote( ret_t(2.5) );",
          "754:   SELECT quote( ret_b(2.5) );",
          "755:   SELECT quote( ret_a(2.5) );",
          "756: } {2.5 2.5 '2.5' X'322E35' 2.5}",
          "758: do_execsql_test 17.3 {",
          "759:   SELECT quote( ret_i('2.5') );",
          "760:   SELECT quote( ret_r('2.5') );",
          "761:   SELECT quote( ret_t('2.5') );",
          "762:   SELECT quote( ret_b('2.5') );",
          "763:   SELECT quote( ret_a('2.5') );",
          "764: } {2.5 2.5 '2.5' X'322E35' '2.5'}",
          "766: do_execsql_test 17.4 {",
          "767:   SELECT quote( ret_i('abc') );",
          "768:   SELECT quote( ret_r('abc') );",
          "769:   SELECT quote( ret_t('abc') );",
          "770:   SELECT quote( ret_b('abc') );",
          "771:   SELECT quote( ret_a('abc') );",
          "772: } {'abc' 'abc' 'abc' X'616263' 'abc'}",
          "774: do_execsql_test 17.5 {",
          "775:   SELECT quote( ret_i(X'616263') );",
          "776:   SELECT quote( ret_r(X'616263') );",
          "777:   SELECT quote( ret_t(X'616263') );",
          "778:   SELECT quote( ret_b(X'616263') );",
          "779:   SELECT quote( ret_a(X'616263') );",
          "780: } {'abc' 'abc' 'abc' X'616263' X'616263'}",
          "782: do_test 17.6.1 {",
          "783:   list [catch { db function xyz -return object ret } msg] $msg",
          "784: } {1 {bad type \"object\": must be integer, real, text, blob, or any}}",
          "786: do_test 17.6.2 {",
          "787:   list [catch { db function xyz -return ret } msg] $msg",
          "788: } {1 {option requires an argument: -return}}",
          "790: do_test 17.6.3 {",
          "791:   list [catch { db function xyz -n object ret } msg] $msg",
          "792: } {1 {bad option \"-n\": must be -argcount, -deterministic or -returntype}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}