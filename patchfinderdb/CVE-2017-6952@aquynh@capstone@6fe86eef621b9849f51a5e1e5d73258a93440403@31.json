{
  "cve_id": "CVE-2017-6952",
  "cve_desc": "Integer overflow in the cs_winkernel_malloc function in winkernel_mm.c in Capstone 3.0.4 and earlier allows attackers to cause a denial of service (heap-based buffer overflow in a kernel driver) or possibly have unspecified other impact via a large value.",
  "repo": "aquynh/capstone",
  "patch_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
  "patch_info": {
    "commit_hash": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "repo": "aquynh/capstone",
    "commit_url": "https://github.com/aquynh/capstone/commit/6fe86eef621b9849f51a5e1e5d73258a93440403",
    "files": [
      "windows/winkernel_mm.c"
    ],
    "message": "provide a validity check to prevent against Integer overflow conditions (#870)\n\n* provide a validity check to prevent against Integer overflow conditions\n\n* fix some style issues.",
    "before_after_code_files": [
      "windows/winkernel_mm.c||windows/winkernel_mm.c"
    ]
  },
  "patch_diff": {
    "windows/winkernel_mm.c||windows/winkernel_mm.c": [
      "File: windows/winkernel_mm.c -> windows/winkernel_mm.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4: #include \"winkernel_mm.h\"",
      "5: #include <ntddk.h>",
      "8: static const ULONG CS_WINKERNEL_POOL_TAG = 'kwsC';",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6: #include <Ntintsafe.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: #pragma prefast(suppress : 30030)  // Allocating executable POOL_TYPE memory",
      "38:  if (!block) {",
      "39:   return NULL;",
      "40:  }",
      "",
      "[Removed Lines]",
      "36:  CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "37:    NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG);",
      "",
      "[Added Lines]",
      "37:  size_t number_of_bytes = 0;",
      "38:  CS_WINKERNEL_MEMBLOCK *block = NULL;",
      "42:  if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {",
      "43:   return NULL;",
      "44:  }",
      "45:  block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(",
      "46:    NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "43585e5ef0d52d62632a2eab25bc3c9f2453780d",
      "candidate_info": {
        "commit_hash": "43585e5ef0d52d62632a2eab25bc3c9f2453780d",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/43585e5ef0d52d62632a2eab25bc3c9f2453780d",
        "files": [
          "bindings/python/setup.py",
          "bindings/python/setup_cython.py"
        ],
        "message": "On this branch, dylib and so files are versioned",
        "before_after_code_files": [
          "bindings/python/setup.py||bindings/python/setup.py",
          "bindings/python/setup_cython.py||bindings/python/setup_cython.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "bindings/python/setup.py||bindings/python/setup.py": [
          "File: bindings/python/setup.py -> bindings/python/setup.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: BUILD_DIR = SRC_DIR if os.path.exists(SRC_DIR) else os.path.join(ROOT_DIR, '../..')",
          "30: if SYSTEM == 'darwin':",
          "31:     LIBRARY_FILE = \"libcapstone.dylib\"",
          "32:     STATIC_LIBRARY_FILE = 'libcapstone.a'",
          "33: elif SYSTEM in ('win32', 'cygwin'):",
          "34:     LIBRARY_FILE = \"capstone.dll\"",
          "35:     STATIC_LIBRARY_FILE = None",
          "36: else:",
          "37:     LIBRARY_FILE = \"libcapstone.so\"",
          "38:     STATIC_LIBRARY_FILE = 'libcapstone.a'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:     VERSIONED_LIBRARY_FILE = \"libcapstone.4.dylib\"",
          "35:     VERSIONED_LIBRARY_FILE = \"capstone.dll\"",
          "39:     VERSIONED_LIBRARY_FILE = \"libcapstone.so.4\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     else:   # Unix incl. cygwin",
          "103:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh\")",
          "109:     if STATIC_LIBRARY_FILE: shutil.copy(STATIC_LIBRARY_FILE, LIBS_DIR)",
          "110:     os.chdir(cwd)",
          "",
          "[Removed Lines]",
          "105:     if LIBRARY_FILE.endswith('.so'):",
          "106:         shutil.copy(LIBRARY_FILE + '.4', os.path.join(LIBS_DIR, LIBRARY_FILE))",
          "107:     else:",
          "108:         shutil.copy(LIBRARY_FILE, LIBS_DIR)",
          "",
          "[Added Lines]",
          "108:     shutil.copy(VERSIONED_LIBRARY_FILE, os.path.join(LIBS_DIR, LIBRARY_FILE))",
          "",
          "---------------"
        ],
        "bindings/python/setup_cython.py||bindings/python/setup_cython.py": [
          "File: bindings/python/setup_cython.py -> bindings/python/setup_cython.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: CYPACKAGE_DIR = os.path.join(ROOT_DIR, 'pyx')",
          "27: if SYSTEM == 'darwin':",
          "28:     LIBRARY_FILE = \"libcapstone.dylib\"",
          "29:     STATIC_LIBRARY_FILE = 'libcapstone.a'",
          "30: elif SYSTEM in ('win32', 'cygwin'):",
          "31:     LIBRARY_FILE = \"capstone.dll\"",
          "32:     STATIC_LIBRARY_FILE = None",
          "33: else:",
          "34:     LIBRARY_FILE = \"libcapstone.so\"",
          "35:     STATIC_LIBRARY_FILE = 'libcapstone.a'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28:     VERSIONED_LIBRARY_FILE = \"libcapstone.4.dylib\"",
          "32:     VERSIONED_LIBRARY_FILE = \"capstone.dll\"",
          "36:     VERSIONED_LIBRARY_FILE = \"libcapstone.so.4\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "93:     else:   # Unix incl. cygwin",
          "94:         os.system(\"CAPSTONE_BUILD_CORE_ONLY=yes bash ./make.sh\")",
          "100:     if STATIC_LIBRARY_FILE: shutil.copy(STATIC_LIBRARY_FILE, LIBS_DIR)",
          "101:     os.chdir(cwd)",
          "",
          "[Removed Lines]",
          "96:     if LIBRARY_FILE.endswith('.so'):",
          "97:         shutil.copy(LIBRARY_FILE + '.4', os.path.join(LIBS_DIR, LIBRARY_FILE))",
          "98:     else:",
          "99:         shutil.copy(LIBRARY_FILE, LIBS_DIR)",
          "",
          "[Added Lines]",
          "99:     shutil.copy(VERSIONED_LIBRARY_FILE, os.path.join(LIBS_DIR, LIBRARY_FILE))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "782d339fc712e7c1f0a94722ee649f72ef40c73d",
      "candidate_info": {
        "commit_hash": "782d339fc712e7c1f0a94722ee649f72ef40c73d",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/782d339fc712e7c1f0a94722ee649f72ef40c73d",
        "files": [
          "arch/AArch64/AArch64Disassembler.c",
          "arch/AArch64/AArch64InstPrinter.c",
          "arch/ARM/ARMInstPrinter.c"
        ],
        "message": "- Resolve some casting issues with Visual Studio. (#1007)",
        "before_after_code_files": [
          "arch/AArch64/AArch64Disassembler.c||arch/AArch64/AArch64Disassembler.c",
          "arch/AArch64/AArch64InstPrinter.c||arch/AArch64/AArch64InstPrinter.c",
          "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/AArch64/AArch64Disassembler.c||arch/AArch64/AArch64Disassembler.c": [
          "File: arch/AArch64/AArch64Disassembler.c -> arch/AArch64/AArch64Disassembler.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1616:   uint32_t insn, uint64_t Addr,",
          "1617:   void *Decoder)",
          "1618: {",
          "1622:  bool ValidNamed;",
          "1625:  MCOperand_CreateImm0(Inst, pstate_field);",
          "1626:  MCOperand_CreateImm0(Inst, crm);",
          "",
          "[Removed Lines]",
          "1619:  uint64_t op1 = fieldFromInstruction(insn, 16, 3);",
          "1620:  uint64_t op2 = fieldFromInstruction(insn, 5, 3);",
          "1621:  uint64_t crm = fieldFromInstruction(insn, 8, 4);",
          "1623:  uint64_t pstate_field = (op1 << 3) | op2;",
          "",
          "[Added Lines]",
          "1619:  uint32_t op1 = fieldFromInstruction(insn, 16, 3);",
          "1620:  uint32_t op2 = fieldFromInstruction(insn, 5, 3);",
          "1621:  uint32_t crm = fieldFromInstruction(insn, 8, 4);",
          "1623:  uint32_t pstate_field = (op1 << 3) | op2;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1633: static DecodeStatus DecodeTestAndBranch(MCInst *Inst, uint32_t insn,",
          "1634:   uint64_t Addr, void *Decoder)",
          "1635: {",
          "1640:  bit |= fieldFromInstruction(insn, 19, 5);",
          "",
          "[Removed Lines]",
          "1636:  uint64_t Rt = fieldFromInstruction(insn, 0, 5);",
          "1637:  uint64_t bit = fieldFromInstruction(insn, 31, 1) << 5;",
          "1638:  int64_t dst = fieldFromInstruction(insn, 5, 14);",
          "",
          "[Added Lines]",
          "1636:  uint32_t Rt = fieldFromInstruction(insn, 0, 5);",
          "1637:  uint32_t bit = fieldFromInstruction(insn, 31, 1) << 5;",
          "1638:  uint32_t dst = fieldFromInstruction(insn, 5, 14);",
          "",
          "---------------"
        ],
        "arch/AArch64/AArch64InstPrinter.c||arch/AArch64/AArch64InstPrinter.c": [
          "File: arch/AArch64/AArch64InstPrinter.c -> arch/AArch64/AArch64InstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   if (MCOperand_isImm(Op2) && MCOperand_isImm(Op3)) {",
          "137:    char *AsmMnemonic = NULL;",
          "138:    int shift = 0;",
          "142:    if (Opcode == AArch64_UBFMWri && imms != 0x1F && ((imms + 1) == immr)) {",
          "143:     AsmMnemonic = \"lsl\";",
          "",
          "[Removed Lines]",
          "139:    int64_t immr = MCOperand_getImm(Op2);",
          "140:    int64_t imms = MCOperand_getImm(Op3);",
          "",
          "[Added Lines]",
          "139:    int immr = (int)MCOperand_getImm(Op2);",
          "140:    int imms = (int)MCOperand_getImm(Op3);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "975:  if (MI->csh->detail) {",
          "976:   if (MI->csh->doing_mem) {",
          "978:   } else {",
          "979:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "980:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = val;",
          "",
          "[Removed Lines]",
          "977:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].mem.disp = val;",
          "",
          "[Added Lines]",
          "977:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].mem.disp = (int32_t)val;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "992:   printInt64Bang(O, val);",
          "993:   if (MI->csh->detail) {",
          "994:    if (MI->csh->doing_mem) {",
          "996:    } else {",
          "997:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].type = ARM64_OP_IMM;",
          "998:    MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].imm = val;",
          "",
          "[Removed Lines]",
          "995:     MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].mem.disp = val;",
          "",
          "[Added Lines]",
          "995:     MI->flat_insn->detail->arm64.operands[MI->flat_insn->detail->arm64.op_count].mem.disp = (int32_t)val;",
          "",
          "---------------"
        ],
        "arch/ARM/ARMInstPrinter.c||arch/ARM/ARMInstPrinter.c": [
          "File: arch/ARM/ARMInstPrinter.c -> arch/ARM/ARMInstPrinter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1157: static void printPostIdxImm8s4Operand(MCInst *MI, unsigned OpNum, SStream *O)",
          "1158: {",
          "1159:  MCOperand *MO = MCInst_getOperand(MI, OpNum);",
          "1162:  if (((Imm & 0xff) << 2) > HEX_THRESHOLD) {",
          "1163:   SStream_concat(O, \"#%s0x%x\", ((Imm & 256) ? \"\" : \"-\"), ((Imm & 0xff) << 2));",
          "",
          "[Removed Lines]",
          "1160:  unsigned Imm = (unsigned int)MCOperand_getImm(MO);",
          "",
          "[Added Lines]",
          "1160:  int Imm = (int)MCOperand_getImm(MO);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1166:  }",
          "1168:  if (MI->csh->detail) {",
          "1170:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].type = ARM_OP_IMM;",
          "1171:   MI->flat_insn->detail->arm.operands[MI->flat_insn->detail->arm.op_count].imm = v;",
          "1172:   MI->flat_insn->detail->arm.op_count++;",
          "",
          "[Removed Lines]",
          "1169:   int v = (Imm & 256) ? ((Imm & 0xff) << 2) : -((((int)Imm) & 0xff) << 2);",
          "",
          "[Added Lines]",
          "1169:   int v = (Imm & 256) ? ((Imm & 0xff) << 2) : -((Imm & 0xff) << 2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a6111dfd953f5c40f68add007ee2c6a3f852c022",
      "candidate_info": {
        "commit_hash": "a6111dfd953f5c40f68add007ee2c6a3f852c022",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/a6111dfd953f5c40f68add007ee2c6a3f852c022",
        "files": [
          "arch/TMS320C64x/TMS320C64xMapping.c"
        ],
        "message": "Fixed group name getting function",
        "before_after_code_files": [
          "arch/TMS320C64x/TMS320C64xMapping.c||arch/TMS320C64x/TMS320C64xMapping.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "arch/TMS320C64x/TMS320C64xMapping.c||arch/TMS320C64x/TMS320C64xMapping.c": [
          "File: arch/TMS320C64x/TMS320C64xMapping.c -> arch/TMS320C64x/TMS320C64xMapping.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1766: const char *TMS320C64x_group_name(csh handle, unsigned int id)",
          "1767: {",
          "1768: #ifndef CAPSTONE_DIET",
          "1769:  if (id >= TMS320C64X_GRP_ENDING)",
          "1770:   return NULL;",
          "1772:  return group_name_maps[id].name;",
          "1773: #else",
          "1774:  return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1769:  unsigned int i;",
          "1774:  for (i = 0; i < ARR_SIZE(group_name_maps); i++) {",
          "1775:   if (group_name_maps[i].id == id)",
          "1776:    return group_name_maps[i].name;",
          "1777:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f49df92f144913767e9f538691055e4432d68e6b",
      "candidate_info": {
        "commit_hash": "f49df92f144913767e9f538691055e4432d68e6b",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/f49df92f144913767e9f538691055e4432d68e6b",
        "files": [
          "suite/disasm_mc.py",
          "suite/disasm_mc.sh"
        ],
        "message": "suite: add disasm_mc.{py,sh}",
        "before_after_code_files": [
          "suite/disasm_mc.py||suite/disasm_mc.py",
          "suite/disasm_mc.sh||suite/disasm_mc.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "suite/disasm_mc.py||suite/disasm_mc.py": [
          "File: suite/disasm_mc.py -> suite/disasm_mc.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/usr/bin/python",
          "2: # Test tool to disassemble MC files. By Nguyen Anh Quynh, 2017",
          "3: import array, os.path, sys",
          "4: from capstone import *",
          "7: # convert all hex numbers to decimal numbers in a text",
          "8: def normalize_hex(a):",
          "9:     while(True):",
          "10:         i = a.find('0x')",
          "11:         if i == -1: # no more hex number",
          "12:             break",
          "13:         hexnum = '0x'",
          "14:         for c in a[i + 2:]:",
          "15:             if c in '0123456789abcdefABCDEF':",
          "16:                 hexnum += c",
          "17:             else:",
          "18:                 break",
          "19:         num = int(hexnum, 16)",
          "20:         a = a.replace(hexnum, str(num))",
          "21:     return a",
          "24: def test_file(fname):",
          "25:     print(\"Test %s\" %fname);",
          "26:     f = open(fname)",
          "27:     lines = f.readlines()",
          "28:     f.close()",
          "30:     if not lines[0].startswith('# '):",
          "31:         print(\"ERROR: decoding information is missing\")",
          "32:         return",
          "34:     # skip '# ' at the front, then split line to get out hexcode",
          "35:     # Note: option can be '', or 'None'",
          "36:     #print lines[0]",
          "37:     #print lines[0][2:].split(', ')",
          "38:     (arch, mode, option) = lines[0][2:].split(', ')",
          "39:     mode = mode.replace(' ', '')",
          "40:     option = option.strip()",
          "42:     archs = {",
          "43:         \"CS_ARCH_ARM\": CS_ARCH_ARM,",
          "44:         \"CS_ARCH_ARM64\": CS_ARCH_ARM64,",
          "45:         \"CS_ARCH_MIPS\": CS_ARCH_MIPS,",
          "46:         \"CS_ARCH_PPC\": CS_ARCH_PPC,",
          "47:         \"CS_ARCH_SPARC\": CS_ARCH_SPARC,",
          "48:         \"CS_ARCH_SYSZ\": CS_ARCH_SYSZ,",
          "49:         \"CS_ARCH_X86\": CS_ARCH_X86,",
          "50:         \"CS_ARCH_XCORE\": CS_ARCH_XCORE,",
          "51:         \"CS_ARCH_M68K\": CS_ARCH_M68K,",
          "52:     }",
          "54:     modes = {",
          "55:         \"CS_MODE_16\": CS_MODE_16,",
          "56:         \"CS_MODE_32\": CS_MODE_32,",
          "57:         \"CS_MODE_64\": CS_MODE_64,",
          "58:         \"CS_MODE_MIPS32\": CS_MODE_MIPS32,",
          "59:         \"CS_MODE_MIPS64\": CS_MODE_MIPS64,",
          "60:         \"0\": CS_MODE_ARM,",
          "61:         \"CS_MODE_ARM\": CS_MODE_ARM,",
          "62:         \"CS_MODE_THUMB\": CS_MODE_THUMB,",
          "63:         \"CS_MODE_ARM+CS_MODE_V8\": CS_MODE_ARM+CS_MODE_V8,",
          "64:         \"CS_MODE_THUMB+CS_MODE_V8\": CS_MODE_THUMB+CS_MODE_V8,",
          "65:         \"CS_MODE_THUMB+CS_MODE_MCLASS\": CS_MODE_THUMB+CS_MODE_MCLASS,",
          "66:         \"CS_MODE_LITTLE_ENDIAN\": CS_MODE_LITTLE_ENDIAN,",
          "67:         \"CS_MODE_BIG_ENDIAN\": CS_MODE_BIG_ENDIAN,",
          "68:         \"CS_MODE_64+CS_MODE_LITTLE_ENDIAN\": CS_MODE_64+CS_MODE_LITTLE_ENDIAN,",
          "69:         \"CS_MODE_64+CS_MODE_BIG_ENDIAN\": CS_MODE_64+CS_MODE_BIG_ENDIAN,",
          "70:         \"CS_MODE_MIPS32+CS_MODE_MICRO\": CS_MODE_MIPS32+CS_MODE_MICRO,",
          "71:         \"CS_MODE_MIPS32+CS_MODE_MICRO+CS_MODE_BIG_ENDIAN\": CS_MODE_MIPS32+CS_MODE_MICRO+CS_MODE_BIG_ENDIAN,",
          "72:         \"CS_MODE_MIPS32+CS_MODE_BIG_ENDIAN+CS_MODE_MICRO\": CS_MODE_MIPS32+CS_MODE_MICRO+CS_MODE_BIG_ENDIAN,",
          "73:         \"CS_MODE_BIG_ENDIAN+CS_MODE_V9\": CS_MODE_BIG_ENDIAN + CS_MODE_V9,",
          "74:         \"CS_MODE_MIPS32+CS_MODE_BIG_ENDIAN\": CS_MODE_MIPS32+CS_MODE_BIG_ENDIAN,",
          "75:         \"CS_MODE_MIPS32+CS_MODE_LITTLE_ENDIAN\": CS_MODE_MIPS32+CS_MODE_LITTLE_ENDIAN,",
          "76:         \"CS_MODE_MIPS64+CS_MODE_LITTLE_ENDIAN\": CS_MODE_MIPS64+CS_MODE_LITTLE_ENDIAN,",
          "77:         \"CS_MODE_MIPS64+CS_MODE_BIG_ENDIAN\": CS_MODE_MIPS64+CS_MODE_BIG_ENDIAN,",
          "78:     }",
          "80:     options = {",
          "81:         \"CS_OPT_SYNTAX_ATT\": CS_OPT_SYNTAX_ATT,",
          "82:         \"CS_OPT_SYNTAX_NOREGNAME\": CS_OPT_SYNTAX_NOREGNAME,",
          "83:     }",
          "85:     mc_modes = {",
          "86:         (\"CS_ARCH_X86\", \"CS_MODE_32\"): ['-triple=i386'],",
          "87:         (\"CS_ARCH_X86\", \"CS_MODE_64\"): ['-triple=x86_64'],",
          "88:         (\"CS_ARCH_ARM\", \"CS_MODE_ARM\"): ['-triple=armv7'],",
          "89:         (\"CS_ARCH_ARM\", \"CS_MODE_THUMB\"): ['-triple=thumbv7'],",
          "90:         (\"CS_ARCH_ARM\", \"CS_MODE_ARM+CS_MODE_V8\"): ['-triple=armv8'],",
          "91:         (\"CS_ARCH_ARM\", \"CS_MODE_THUMB+CS_MODE_V8\"): ['-triple=thumbv8'],",
          "92:         (\"CS_ARCH_ARM\", \"CS_MODE_THUMB+CS_MODE_MCLASS\"): ['-triple=thumbv7m'],",
          "93:         (\"CS_ARCH_ARM64\", \"0\"): ['-triple=aarch64'],",
          "94:         (\"CS_ARCH_MIPS\", \"CS_MODE_MIPS32+CS_MODE_BIG_ENDIAN\"): ['-triple=mips'],",
          "95:         (\"CS_ARCH_MIPS\", \"CS_MODE_MIPS32+CS_MODE_MICRO\"): ['-triple=mipsel', '-mattr=+micromips'],",
          "96:         (\"CS_ARCH_MIPS\", \"CS_MODE_MIPS64\"): ['-triple=mips64el'],",
          "97:         (\"CS_ARCH_MIPS\", \"CS_MODE_MIPS32\"): ['-triple=mipsel'],",
          "98:         (\"CS_ARCH_MIPS\", \"CS_MODE_MIPS64+CS_MODE_BIG_ENDIAN\"): ['-triple=mips64'],",
          "99:         (\"CS_ARCH_MIPS\", \"CS_MODE_MIPS32+CS_MODE_MICRO+CS_MODE_BIG_ENDIAN\"): ['-triple=mips', '-mattr=+micromips'],",
          "100:         (\"CS_ARCH_MIPS\", \"CS_MODE_MIPS32+CS_MODE_BIG_ENDIAN+CS_MODE_MICRO\"): ['-triple=mips', '-mattr=+micromips'],",
          "101:         (\"CS_ARCH_PPC\", \"CS_MODE_BIG_ENDIAN\"): ['-triple=powerpc64'],",
          "102:         ('CS_ARCH_SPARC', 'CS_MODE_BIG_ENDIAN'): ['-triple=sparc'],",
          "103:         ('CS_ARCH_SPARC', 'CS_MODE_BIG_ENDIAN+CS_MODE_V9'): ['-triple=sparcv9'],",
          "104:         ('CS_ARCH_SYSZ', '0'): ['-triple=s390x', '-mcpu=z196'],",
          "105:     }",
          "107:     #if not option in ('', 'None'):",
          "108:     #    print archs[arch], modes[mode], options[option]",
          "110:     #print(arch, mode, option)",
          "111:     md = Cs(archs[arch], modes[mode])",
          "113:     if arch == 'CS_ARCH_ARM' or arch == 'CS_ARCH_PPC' :",
          "114:         md.syntax = CS_OPT_SYNTAX_NOREGNAME",
          "116:     if fname.endswith('3DNow.s.cs'):",
          "117:         md.syntax = CS_OPT_SYNTAX_ATT",
          "119:     for line in lines[1:]:",
          "120:         # ignore all the input lines having # in front.",
          "121:         if line.startswith('#'):",
          "122:             continue",
          "123:         #print(\"Check %s\" %line)",
          "124:         code = line.split(' = ')[0]",
          "125:         asm  = ''.join(line.split(' = ')[1:])",
          "126:         hex_code = code.replace('0x', '')",
          "127:         hex_code = hex_code.replace(',', '')",
          "128:         hex_data = hex_code.decode('hex')",
          "129:         #hex_bytes = array.array('B', hex_data)",
          "131:         x = list(md.disasm(hex_data, 0))",
          "132:         if len(x) > 0:",
          "133:             if x[0].op_str != '':",
          "134:                 cs_output = \"%s %s\" %(x[0].mnemonic, x[0].op_str)",
          "135:             else:",
          "136:                 cs_output = x[0].mnemonic",
          "137:         else:",
          "138:             cs_output = 'FAILED to disassemble'",
          "140:         cs_output2 = normalize_hex(cs_output)",
          "141:         cs_output2 = cs_output2.replace(' ', '')",
          "143:         if arch == 'CS_ARCH_MIPS':",
          "144:             # normalize register alias names",
          "145:             cs_output2 = cs_output2.replace('$at', '$1')",
          "146:             cs_output2 = cs_output2.replace('$v0', '$2')",
          "147:             cs_output2 = cs_output2.replace('$v1', '$3')",
          "149:             cs_output2 = cs_output2.replace('$a0', '$4')",
          "150:             cs_output2 = cs_output2.replace('$a1', '$5')",
          "151:             cs_output2 = cs_output2.replace('$a2', '$6')",
          "152:             cs_output2 = cs_output2.replace('$a3', '$7')",
          "154:             cs_output2 = cs_output2.replace('$t0', '$8')",
          "155:             cs_output2 = cs_output2.replace('$t1', '$9')",
          "156:             cs_output2 = cs_output2.replace('$t2', '$10')",
          "157:             cs_output2 = cs_output2.replace('$t3', '$11')",
          "158:             cs_output2 = cs_output2.replace('$t4', '$12')",
          "159:             cs_output2 = cs_output2.replace('$t5', '$13')",
          "160:             cs_output2 = cs_output2.replace('$t6', '$14')",
          "161:             cs_output2 = cs_output2.replace('$t7', '$15')",
          "162:             cs_output2 = cs_output2.replace('$t8', '$24')",
          "163:             cs_output2 = cs_output2.replace('$t9', '$25')",
          "165:             cs_output2 = cs_output2.replace('$s0', '$16')",
          "166:             cs_output2 = cs_output2.replace('$s1', '$17')",
          "167:             cs_output2 = cs_output2.replace('$s2', '$18')",
          "168:             cs_output2 = cs_output2.replace('$s3', '$19')",
          "169:             cs_output2 = cs_output2.replace('$s4', '$20')",
          "170:             cs_output2 = cs_output2.replace('$s5', '$21')",
          "171:             cs_output2 = cs_output2.replace('$s6', '$22')",
          "172:             cs_output2 = cs_output2.replace('$s7', '$23')",
          "174:             cs_output2 = cs_output2.replace('$k0', '$26')",
          "175:             cs_output2 = cs_output2.replace('$k1', '$27')",
          "177:         print(\"\\t%s = %s\" %(hex_code, cs_output))",
          "180: if __name__ == '__main__':",
          "181:     if len(sys.argv) == 1:",
          "182:         fnames = sys.stdin.readlines()",
          "183:         for fname in fnames:",
          "184:             test_file(fname.strip())",
          "185:     else:",
          "186:         #print(\"Usage: ./test_mc.py <input-file.s.cs>\")",
          "187:         test_file(sys.argv[1])",
          "",
          "---------------"
        ],
        "suite/disasm_mc.sh||suite/disasm_mc.sh": [
          "File: suite/disasm_mc.sh -> suite/disasm_mc.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #!/bin/sh",
          "3: # This script test all architectures by default.",
          "5: find MC/ -name *.cs | ./disasm_mc.py",
          "7: # To test just one architecture, specify the corresponsing dir:",
          "8: # $ find MC/X86 -name *.cs | ./disasm_mc.py",
          "10: # To test just one input file, run disasm_mc.py with that file:",
          "11: # $ ./disasm_mc.py MC/X86/x86-32-fma3.s.cs",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "52fa6009e4b6c220be5a1e4df26ddae87c4ec064",
      "candidate_info": {
        "commit_hash": "52fa6009e4b6c220be5a1e4df26ddae87c4ec064",
        "repo": "aquynh/capstone",
        "commit_url": "https://github.com/aquynh/capstone/commit/52fa6009e4b6c220be5a1e4df26ddae87c4ec064",
        "files": [
          "include/capstone/platform.h"
        ],
        "message": "fix some warnings on VS2010 on redefining INTxx_MIN, INTxx_MAX",
        "before_after_code_files": [
          "include/capstone/platform.h||include/capstone/platform.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NeatNerdPrime/capstone/pull/17"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/capstone/platform.h||include/capstone/platform.h": [
          "File: include/capstone/platform.h -> include/capstone/platform.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #if defined(CAPSTONE_HAS_OSXKERNEL) || (defined(_MSC_VER) && (_MSC_VER <= 1700 || defined(_KERNEL_MODE)))",
          "42: typedef signed char  int8_t;",
          "43: typedef signed short int16_t;",
          "",
          "[Removed Lines]",
          "40: #if defined(_MSC_VER) && (_MSC_VER <= 1700 || defined(_KERNEL_MODE))",
          "",
          "[Added Lines]",
          "40: #if defined(_MSC_VER) && (_MSC_VER < 1600 || defined(_KERNEL_MODE))",
          "",
          "---------------"
        ]
      }
    }
  ]
}