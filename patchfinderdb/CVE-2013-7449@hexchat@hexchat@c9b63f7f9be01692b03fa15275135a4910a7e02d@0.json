{
  "cve_id": "CVE-2013-7449",
  "cve_desc": "The ssl_do_connect function in common/server.c in HexChat before 2.10.2, XChat, and XChat-GNOME does not verify that the server hostname matches a domain name in the X.509 certificate, which allows man-in-the-middle attackers to spoof SSL servers via an arbitrary valid certificate.",
  "repo": "hexchat/hexchat",
  "patch_hash": "c9b63f7f9be01692b03fa15275135a4910a7e02d",
  "patch_info": {
    "commit_hash": "c9b63f7f9be01692b03fa15275135a4910a7e02d",
    "repo": "hexchat/hexchat",
    "commit_url": "https://github.com/hexchat/hexchat/commit/c9b63f7f9be01692b03fa15275135a4910a7e02d",
    "files": [
      "src/common/server.c",
      "src/common/ssl.c",
      "src/common/ssl.h"
    ],
    "message": "ssl: Validate hostnames\n\nCloses #524",
    "before_after_code_files": [
      "src/common/server.c||src/common/server.c",
      "src/common/ssl.c||src/common/ssl.c",
      "src/common/ssl.h||src/common/ssl.h"
    ]
  },
  "patch_diff": {
    "src/common/server.c||src/common/server.c": [
      "File: src/common/server.c -> src/common/server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "723:   switch (verify_error)",
      "724:   {",
      "725:   case X509_V_OK:",
      "729:   case X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY:",
      "730:   case X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE:",
      "731:   case X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT:",
      "",
      "[Removed Lines]",
      "728:    break;",
      "",
      "[Added Lines]",
      "726:    {",
      "727:     X509 *cert = SSL_get_peer_certificate (serv->ssl);",
      "728:     int hostname_err;",
      "729:     if ((hostname_err = _SSL_check_hostname(cert, serv->hostname)) != 0)",
      "730:     {",
      "731:      snprintf (buf, sizeof (buf), \"* Verify E: Failed to validate hostname? (%d)%s\",",
      "732:         hostname_err, serv->accept_invalid_cert ? \" -- Ignored\" : \"\");",
      "733:      if (serv->accept_invalid_cert)",
      "734:       EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL, NULL, 0);",
      "735:      else",
      "736:       goto conn_fail;",
      "737:     }",
      "738:     break;",
      "739:    }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "744:    snprintf (buf, sizeof (buf), \"%s.? (%d)\",",
      "745:        X509_verify_cert_error_string (verify_error),",
      "746:        verify_error);",
      "747:    EMIT_SIGNAL (XP_TE_CONNFAIL, serv->server_session, buf, NULL, NULL,",
      "748:         NULL, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "760: conn_fail:",
      "",
      "---------------"
    ],
    "src/common/ssl.c||src/common/ssl.c": [
      "File: src/common/ssl.c -> src/common/ssl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: #ifdef WIN32",
      "30: #endif",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "28: #include <openssl/x509v3.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: #include <glib.h>",
      "37: #include <glib/gprintf.h>",
      "38: #include \"util.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #include <gio/gio.h>",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "339:  SSL_free (ssl);",
      "341: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "347: static int",
      "348: _SSL_match_hostname (const char *cert_hostname, const char *hostname)",
      "349: {",
      "350:  const char *cert_domain, *domain, *next_dot;",
      "352:  if (g_ascii_strcasecmp (cert_hostname, hostname) == 0)",
      "353:   return 0;",
      "356:  if (cert_hostname[0] == '*')",
      "357:  {",
      "366:   cert_domain = &cert_hostname[1];",
      "368:   if (cert_domain[0] == '\\0')",
      "369:    return -1;",
      "371:   if (cert_domain[0] != '.')",
      "372:    return -1;",
      "374:   if (cert_domain[1] == '.')",
      "375:    return -1;",
      "376:   next_dot = strchr (&cert_domain[1], '.');",
      "378:   if (next_dot == NULL)",
      "379:    return -1;",
      "381:   if (next_dot[1] == '.')",
      "382:    return -1;",
      "384:   domain = strchr (hostname, '.');",
      "387:   if (domain == NULL || strlen(domain) == 1)",
      "388:    return -1;",
      "390:   if (g_ascii_strcasecmp (cert_domain, domain) == 0)",
      "391:    return 0;",
      "392:  }",
      "394:  return -1;",
      "395: }",
      "397: static int",
      "398: _SSL_check_subject_altname (X509 *cert, const char *host)",
      "399: {",
      "400:  STACK_OF(GENERAL_NAME) *altname_stack = NULL;",
      "401:  GInetAddress *addr;",
      "402:  GSocketFamily family;",
      "403:  int type = GEN_DNS;",
      "404:  int count, i;",
      "405:  int rv = -1;",
      "407:  altname_stack = X509_get_ext_d2i (cert, NID_subject_alt_name, NULL, NULL);",
      "408:  if (altname_stack == NULL)",
      "409:   return -1;",
      "411:  addr = g_inet_address_new_from_string (host);",
      "412:  if (addr != NULL)",
      "413:  {",
      "414:   family = g_inet_address_get_family (addr);",
      "415:   if (family == G_SOCKET_FAMILY_IPV4 || family == G_SOCKET_FAMILY_IPV6)",
      "416:    type = GEN_IPADD;",
      "417:  }",
      "419:  count = sk_GENERAL_NAME_num(altname_stack);",
      "420:  for (i = 0; i < count; i++)",
      "421:  {",
      "422:   GENERAL_NAME *altname;",
      "424:   altname = sk_GENERAL_NAME_value (altname_stack, i);",
      "426:   if (altname->type != type)",
      "427:    continue;",
      "429:   if (type == GEN_DNS)",
      "430:   {",
      "431:    unsigned char *data;",
      "432:    int format;",
      "434:    format = ASN1_STRING_type (altname->d.dNSName);",
      "435:    if (format == V_ASN1_IA5STRING)",
      "436:    {",
      "437:     data = ASN1_STRING_data (altname->d.dNSName);",
      "439:     if (ASN1_STRING_length (altname->d.dNSName) != (int)strlen(data))",
      "440:     {",
      "441:      g_warning(\"NUL byte in subjectAltName, probably a malicious certificate.\\n\");",
      "442:      rv = -2;",
      "443:      break;",
      "444:     }",
      "446:     if (_SSL_match_hostname (data, host) == 0)",
      "447:     {",
      "448:      rv = 0;",
      "449:      break;",
      "450:     }",
      "451:    }",
      "452:    else",
      "453:     g_warning (\"unhandled subjectAltName dNSName encoding (%d)\\n\", format);",
      "455:   }",
      "456:   else if (type == GEN_IPADD)",
      "457:   {",
      "458:    unsigned char *data;",
      "459:    const guint8 *addr_bytes;",
      "460:    int datalen, addr_len;",
      "462:    datalen = ASN1_STRING_length (altname->d.iPAddress);",
      "463:    data = ASN1_STRING_data (altname->d.iPAddress);",
      "465:    addr_bytes = g_inet_address_to_bytes (addr);",
      "466:    addr_len = (int)g_inet_address_get_native_size (addr);",
      "468:    if (datalen == addr_len && memcmp (data, addr_bytes, addr_len) == 0)",
      "469:    {",
      "470:     rv = 0;",
      "471:     break;",
      "472:    }",
      "473:   }",
      "474:  }",
      "476:  if (addr != NULL)",
      "477:   g_object_unref (addr);",
      "478:  sk_GENERAL_NAME_free (altname_stack);",
      "479:  return rv;",
      "480: }",
      "482: static int",
      "483: _SSL_check_common_name (X509 *cert, const char *host)",
      "484: {",
      "485:  X509_NAME *name;",
      "486:  char *common_name = NULL;",
      "487:  int common_name_len;",
      "488:  int rv = -1;",
      "489:  GInetAddress *addr;",
      "491:  name = X509_get_subject_name (cert);",
      "492:  if (name == NULL)",
      "493:   return -1;",
      "495:  common_name_len = X509_NAME_get_text_by_NID (name, NID_commonName, NULL, 0);",
      "496:  if (common_name_len < 0)",
      "497:   return -1;",
      "499:  common_name = calloc (common_name_len + 1, 1);",
      "500:  if (common_name == NULL)",
      "501:   return -1;",
      "503:  X509_NAME_get_text_by_NID (name, NID_commonName, common_name, common_name_len + 1);",
      "506:  if (common_name_len != (int)strlen(common_name))",
      "507:  {",
      "508:   g_warning (\"NUL byte in Common Name field, probably a malicious certificate.\\n\");",
      "509:   rv = -2;",
      "510:   goto out;",
      "511:  }",
      "513:  if ((addr = g_inet_address_new_from_string (host)) != NULL)",
      "514:  {",
      "519:   if (g_strcmp0 (common_name, host) == 0)",
      "520:    rv = 0;",
      "521:   else",
      "522:    rv = -1;",
      "524:   g_object_unref (addr);",
      "525:  }",
      "526:  else if (_SSL_match_hostname (common_name, host) == 0)",
      "527:   rv = 0;",
      "529: out:",
      "530:  free(common_name);",
      "531:  return rv;",
      "532: }",
      "534: int",
      "535: _SSL_check_hostname (X509 *cert, const char *host)",
      "536: {",
      "537:  int rv;",
      "539:  rv = _SSL_check_subject_altname (cert, host);",
      "540:  if (rv == 0 || rv == -2)",
      "541:   return rv;",
      "543:  return _SSL_check_common_name (cert, host);",
      "544: }",
      "",
      "---------------"
    ],
    "src/common/ssl.h||src/common/ssl.h": [
      "File: src/common/ssl.h -> src/common/ssl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "52:     int SSL_get_fd(SSL *);",
      "54: void _SSL_close (SSL * ssl);",
      "56: int _SSL_get_cert_info (struct cert_info *cert_info, SSL * ssl);",
      "57: struct chiper_info *_SSL_get_cipher_info (SSL * ssl);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "55: int _SSL_check_hostname(X509 *cert, const char *host);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "ba143b42606857ddf67bba94936484b4ff3f4cd8",
      "candidate_info": {
        "commit_hash": "ba143b42606857ddf67bba94936484b4ff3f4cd8",
        "repo": "hexchat/hexchat",
        "commit_url": "https://github.com/hexchat/hexchat/commit/ba143b42606857ddf67bba94936484b4ff3f4cd8",
        "files": [
          "src/common/fe.h",
          "src/common/hexchat.c",
          "src/common/hexchat.h",
          "src/common/server.c",
          "src/common/ssl.c",
          "src/common/ssl.h",
          "src/fe-gtk/Makefile.am",
          "src/fe-gtk/fe-gtk.vcxproj",
          "src/fe-gtk/fe-gtk.vcxproj.filters",
          "src/fe-gtk/servlistgui.c",
          "src/fe-gtk/sslalert.c",
          "src/fe-text/fe-text.c"
        ],
        "message": "Add alerts for invalid ssl certs\n\nThis patch was originally provided by dila in #xchat\nbut modified heavily since.\n\nIt will show an alert on invalid certs to add\ntemp or permanent exceptions per server.",
        "before_after_code_files": [
          "src/common/fe.h||src/common/fe.h",
          "src/common/hexchat.c||src/common/hexchat.c",
          "src/common/hexchat.h||src/common/hexchat.h",
          "src/common/server.c||src/common/server.c",
          "src/common/ssl.c||src/common/ssl.c",
          "src/common/ssl.h||src/common/ssl.h",
          "src/fe-gtk/Makefile.am||src/fe-gtk/Makefile.am",
          "src/fe-gtk/fe-gtk.vcxproj||src/fe-gtk/fe-gtk.vcxproj",
          "src/fe-gtk/fe-gtk.vcxproj.filters||src/fe-gtk/fe-gtk.vcxproj.filters",
          "src/fe-gtk/servlistgui.c||src/fe-gtk/servlistgui.c",
          "src/fe-gtk/sslalert.c||src/fe-gtk/sslalert.c",
          "src/fe-text/fe-text.c||src/fe-text/fe-text.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/common/server.c||src/common/server.c",
            "src/common/ssl.c||src/common/ssl.c",
            "src/common/ssl.h||src/common/ssl.h"
          ],
          "candidate": [
            "src/common/server.c||src/common/server.c",
            "src/common/ssl.c||src/common/ssl.c",
            "src/common/ssl.h||src/common/ssl.h"
          ]
        }
      },
      "candidate_diff": {
        "src/common/fe.h||src/common/fe.h": [
          "File: src/common/fe.h -> src/common/fe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "103: int fe_dcc_open_recv_win (int passive);",
          "104: int fe_dcc_open_send_win (int passive);",
          "105: int fe_dcc_open_chat_win (int passive);",
          "106: void fe_clear_channel (struct session *sess);",
          "107: void fe_session_callback (struct session *sess);",
          "108: void fe_server_callback (struct server *serv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106: void fe_sslalert_open (struct server *serv, void (*callback)(int, void *), void *callback_data);",
          "",
          "---------------"
        ],
        "src/common/hexchat.c||src/common/hexchat.c": [
          "File: src/common/hexchat.c -> src/common/hexchat.c"
        ],
        "src/common/hexchat.h||src/common/hexchat.h": [
          "File: src/common/hexchat.h -> src/common/hexchat.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #ifdef USE_OPENSSL",
          "58: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58: #include \"ssl.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "597: #ifdef USE_OPENSSL",
          "600: #endif",
          "601: } server;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "601:  struct cert_info *cert_info;",
          "",
          "---------------"
        ],
        "src/common/server.c||src/common/server.c": [
          "File: src/common/server.c -> src/common/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "587: static void",
          "588: ssl_cb_info (SSL * s, int where, int ret)",
          "589: {",
          "600: }",
          "602: static int",
          "603: ssl_cb_verify (int ok, X509_STORE_CTX * ctx)",
          "604: {",
          "621: }",
          "623: static int",
          "624: ssl_do_connect (server * serv)",
          "625: {",
          "626:  char buf[128];",
          "628:  g_sess = serv->server_session;",
          "629:  if (SSL_connect (serv->ssl) <= 0)",
          "",
          "[Removed Lines]",
          "596:  if (g_sess)",
          "597:   EMIT_SIGNAL (XP_TE_SSLMESSAGE, g_sess, buf, NULL, NULL, NULL, 0);",
          "598:  else",
          "605:  char subject[256];",
          "606:  char issuer[256];",
          "607:  char buf[512];",
          "610:  X509_NAME_oneline (X509_get_subject_name (ctx->current_cert), subject,",
          "611:         sizeof (subject));",
          "612:  X509_NAME_oneline (X509_get_issuer_name (ctx->current_cert), issuer,",
          "613:         sizeof (issuer));",
          "615:  snprintf (buf, sizeof (buf), \"* Subject: %s\", subject);",
          "616:  EMIT_SIGNAL (XP_TE_SSLMESSAGE, g_sess, buf, NULL, NULL, NULL, 0);",
          "617:  snprintf (buf, sizeof (buf), \"* Issuer: %s\", issuer);",
          "618:  EMIT_SIGNAL (XP_TE_SSLMESSAGE, g_sess, buf, NULL, NULL, NULL, 0);",
          "",
          "[Added Lines]",
          "590:  return;",
          "597: }",
          "599: static void",
          "600: ssl_do_connect_finish (server *serv, int success, int verify_error)",
          "601: {",
          "603:   we land here after ssl_do_connect(). possible execution flows are:",
          "604:   ssl_do_connect -> ssl_do_connect_finish (with no user interaction)",
          "605:   ssl_do_connect -> sslalert.c -> ssl_do_connect_finish (prompt user to accept/reject certificate)",
          "608:  if (success)",
          "609:  {",
          "611:   server_stopconnecting (serv);",
          "613:  }",
          "614:  else",
          "615:  {",
          "617:    the connection failed. most likely because the certificate is invalid",
          "618:    and the user hit the cancel button to reject the connection",
          "621:   char buf[128];",
          "622:   snprintf (buf, sizeof (buf), \"%s.? (%d)\",",
          "623:       X509_verify_cert_error_string (verify_error),",
          "624:       verify_error);",
          "625:   EMIT_SIGNAL (XP_TE_CONNFAIL, serv->server_session, buf, NULL, NULL,",
          "626:        NULL, 0);",
          "627:   server_cleanup (serv);",
          "628:  }",
          "629: }",
          "631: static void",
          "632: ssl_alert_cb (int user_action, void *callback_data)",
          "633: {",
          "635:  ssl_alert_context *context = callback_data;",
          "636:  switch (user_action)",
          "637:  {",
          "639:   ssl_do_connect_finish (context->serv, FALSE, context->verify_error);",
          "640:   break;",
          "642:   ssl_do_connect_finish (context->serv, TRUE, context->verify_error);",
          "643:   break;",
          "645:   _SSL_certlist_cert_add (context->serv, &context->cert);",
          "646:   _SSL_certlist_save ();",
          "647:   ssl_do_connect_finish (context->serv, TRUE, context->verify_error);",
          "648:   break;",
          "649:  }",
          "650:  free (context);",
          "657:  struct cert_info cert_info;",
          "658:  ssl_alert_context *cb_context;",
          "659:  int cert_error, verify_result;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "647:    if (prefs.hex_net_auto_reconnectonfail)",
          "648:     auto_reconnect (serv, FALSE, -1);",
          "651:   }",
          "652:  }",
          "653:  g_sess = NULL;",
          "656:  {",
          "706:   {",
          "710:   }",
          "724:   {",
          "748:    {",
          "755:    }",
          "767:   }",
          "776:  {",
          "792: }",
          "793: #endif",
          "",
          "[Removed Lines]",
          "655:  if (SSL_is_init_finished (serv->ssl))",
          "657:   struct cert_info cert_info;",
          "658:   struct chiper_info *chiper_info;",
          "659:   int verify_error;",
          "660:   int i;",
          "662:   if (!_SSL_get_cert_info (&cert_info, serv->ssl))",
          "663:   {",
          "664:    snprintf (buf, sizeof (buf), \"* Certification info:\");",
          "665:    EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,",
          "666:         NULL, 0);",
          "667:    snprintf (buf, sizeof (buf), \"  Subject:\");",
          "668:    EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,",
          "669:         NULL, 0);",
          "670:    for (i = 0; cert_info.subject_word[i]; i++)",
          "671:    {",
          "672:     snprintf (buf, sizeof (buf), \"    %s\", cert_info.subject_word[i]);",
          "673:     EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,",
          "674:          NULL, 0);",
          "675:    }",
          "676:    snprintf (buf, sizeof (buf), \"  Issuer:\");",
          "677:    EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,",
          "678:         NULL, 0);",
          "679:    for (i = 0; cert_info.issuer_word[i]; i++)",
          "680:    {",
          "681:     snprintf (buf, sizeof (buf), \"    %s\", cert_info.issuer_word[i]);",
          "682:     EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,",
          "683:          NULL, 0);",
          "684:    }",
          "685:    snprintf (buf, sizeof (buf), \"  Public key algorithm: %s (%d bits)\",",
          "686:        cert_info.algorithm, cert_info.algorithm_bits);",
          "687:    EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,",
          "688:         NULL, 0);",
          "690:    {",
          "691:     snprintf (buf, sizeof (buf),",
          "692:         \"  Public key algorithm uses ephemeral key with %d bits\",",
          "693:         cert_info.rsa_tmp_bits);",
          "694:     EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,",
          "695:          NULL, 0);",
          "697:    snprintf (buf, sizeof (buf), \"  Sign algorithm %s\",",
          "698:        cert_info.sign_algorithm/*, cert_info.sign_algorithm_bits*/);",
          "699:    EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,",
          "700:         NULL, 0);",
          "701:    snprintf (buf, sizeof (buf), \"  Valid since %s to %s\",",
          "702:        cert_info.notbefore, cert_info.notafter);",
          "703:    EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,",
          "704:         NULL, 0);",
          "705:   } else",
          "707:    snprintf (buf, sizeof (buf), \" * No Certificate\");",
          "708:    EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,",
          "709:         NULL, 0);",
          "713:   snprintf (buf, sizeof (buf), \"* Cipher info:\");",
          "714:   EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL, NULL,",
          "715:        0);",
          "716:   snprintf (buf, sizeof (buf), \"  Version: %s, cipher %s (%u bits)\",",
          "717:       chiper_info->version, chiper_info->chiper,",
          "718:       chiper_info->chiper_bits);",
          "719:   EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL, NULL,",
          "720:        0);",
          "722:   verify_error = SSL_get_verify_result (serv->ssl);",
          "723:   switch (verify_error)",
          "725:   case X509_V_OK:",
          "726:    {",
          "727:     X509 *cert = SSL_get_peer_certificate (serv->ssl);",
          "728:     int hostname_err;",
          "729:     if ((hostname_err = _SSL_check_hostname(cert, serv->hostname)) != 0)",
          "730:     {",
          "731:      snprintf (buf, sizeof (buf), \"* Verify E: Failed to validate hostname? (%d)%s\",",
          "732:         hostname_err, serv->accept_invalid_cert ? \" -- Ignored\" : \"\");",
          "733:      if (serv->accept_invalid_cert)",
          "734:       EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL, NULL, 0);",
          "735:      else",
          "736:       goto conn_fail;",
          "737:     }",
          "738:     break;",
          "739:    }",
          "742:   case X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY:",
          "743:   case X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE:",
          "744:   case X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT:",
          "745:   case X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN:",
          "746:   case X509_V_ERR_CERT_HAS_EXPIRED:",
          "747:    if (serv->accept_invalid_cert)",
          "749:     snprintf (buf, sizeof (buf), \"* Verify E: %s.? (%d) -- Ignored\",",
          "750:         X509_verify_cert_error_string (verify_error),",
          "751:         verify_error);",
          "752:     EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL,",
          "753:          NULL, 0);",
          "754:     break;",
          "756:   default:",
          "757:    snprintf (buf, sizeof (buf), \"%s.? (%d)\",",
          "758:        X509_verify_cert_error_string (verify_error),",
          "759:        verify_error);",
          "760: conn_fail:",
          "761:    EMIT_SIGNAL (XP_TE_CONNFAIL, serv->server_session, buf, NULL, NULL,",
          "762:         NULL, 0);",
          "764:    server_cleanup (serv);",
          "766:    return (0);",
          "769:   server_stopconnecting (serv);",
          "772:   server_connected (serv);",
          "775:  } else",
          "777:   if (serv->ssl->session && serv->ssl->session->time + SSLTMOUT < time (NULL))",
          "778:   {",
          "779:    snprintf (buf, sizeof (buf), \"SSL handshake timed out\");",
          "780:    EMIT_SIGNAL (XP_TE_CONNFAIL, serv->server_session, buf, NULL,",
          "781:         NULL, NULL, 0);",
          "784:    if (prefs.hex_net_auto_reconnectonfail)",
          "785:     auto_reconnect (serv, FALSE, -1);",
          "788:   }",
          "791:  }",
          "",
          "[Added Lines]",
          "688:  if (!SSL_is_init_finished (serv->ssl))",
          "690:   if (serv->ssl->session && serv->ssl->session->time + SSLTMOUT < time (NULL))",
          "692:    snprintf (buf, sizeof (buf), \"SSL handshake timed out\");",
          "693:    EMIT_SIGNAL (XP_TE_CONNFAIL, serv->server_session, buf, NULL,",
          "694:         NULL, NULL, 0);",
          "697:    if (prefs.hex_net_auto_reconnectonfail)",
          "698:     auto_reconnect (serv, FALSE, -1);",
          "704:  }",
          "706:  cert_error = _SSL_get_cert_info (&cert_info, serv->ssl);",
          "707:  serv->cert_info = &cert_info;",
          "711:  verify_result = SSL_get_verify_result (serv->ssl);",
          "713:  switch (verify_result)",
          "714:  {",
          "716:  case X509_V_OK:",
          "718:    X509 *cert = SSL_get_peer_certificate (serv->ssl);",
          "719:    int hostname_err;",
          "720:    if ((hostname_err = _SSL_check_hostname(cert, serv->hostname)) == 0)",
          "722:     ssl_do_connect_finish (serv, TRUE, verify_result);",
          "723:     return 0;",
          "725:    break;",
          "726:   }",
          "729:  case X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY:",
          "730:  case X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE:",
          "731:  case X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT:",
          "732:  case X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN:",
          "733:  case X509_V_ERR_CERT_HAS_EXPIRED:",
          "734: #if 0",
          "735:   if (serv->accept_invalid_cert)",
          "736:   {",
          "737:    ssl_do_connect_finish (serv, TRUE, verify_result);",
          "738:    return 0;",
          "740: #endif",
          "741:   break;",
          "744:  default:",
          "746:   return 0;",
          "747:  }",
          "751:  if (_SSL_certlist_cert_check (serv, &cert_info))",
          "753:   ssl_do_connect_finish (serv, TRUE, verify_result);",
          "754:   return 0;",
          "755:  }",
          "759:  cb_context = malloc (sizeof (ssl_alert_context));",
          "760:  cb_context->serv = serv;",
          "761:  memcpy (&cb_context->cert, &cert_info, sizeof (cert_info));",
          "762:  cb_context->verify_error = verify_result;",
          "764:  return 0;",
          "",
          "---------------"
        ],
        "src/common/ssl.c||src/common/ssl.c": [
          "File: src/common/ssl.c -> src/common/ssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"../../config.h\"",
          "37: #include <glib.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: #include \"hexchat.h\"",
          "36: #include \"cfgfiles.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "162:  char notBefore[64];",
          "163:  char notAfter[64];",
          "164:  int alg;",
          "165:  int sign_alg;",
          "168:  if (!(peer_cert = SSL_get_peer_certificate (ssl)))",
          "171:  X509_NAME_oneline (X509_get_subject_name (peer_cert), cert_info->subject,",
          "172:         sizeof (cert_info->subject));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:  int digest_length;",
          "170:  int i;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199:  EVP_PKEY_free (peer_pkey);",
          "203:  if (ssl->session->sess_cert->peer_rsa_tmp) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:  X509_digest (peer_cert, EVP_sha256(), digest, &digest_length);",
          "208:  cert_info->fingerprint[0] = '\\0';",
          "209:  for (i = 0; i < digest_length; ++i)",
          "210:  {",
          "211:   char digits[4];",
          "212:   g_snprintf (digits, sizeof(digits), (i?\":%02x\":\"%02x\"), digest[i]);",
          "213:   g_strlcat (cert_info->fingerprint, digits, sizeof(cert_info->fingerprint));",
          "214:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "213:  X509_free (peer_cert);",
          "216: }",
          "",
          "[Removed Lines]",
          "215:  return (0);",
          "",
          "[Added Lines]",
          "231:  return 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "229:     sizeof (chiper_info.chiper));",
          "230:  SSL_CIPHER_get_bits (c, &chiper_info.chiper_bits);",
          "233: }",
          "236: int",
          "237: _SSL_send (SSL * ssl, char *buf, int len)",
          "238: {",
          "",
          "[Removed Lines]",
          "232:  return (&chiper_info);",
          "",
          "[Added Lines]",
          "248:  return &chiper_info;",
          "256: int",
          "257: _SSL_verify_cert_hostname (struct server *serv, struct cert_info *cert)",
          "258: {",
          "259:  int i;",
          "260:  for (i = 0; cert->subject_word[i]; i++)",
          "261:  {",
          "262:   char *cname = cert->subject_word[i];",
          "263:   if (strstr (cname, \"CN=\") == cname)",
          "264:   {",
          "265:    char *host = serv->hostname;",
          "266:    cname += strlen (\"CN=\");",
          "267:    while (*host && *cname)",
          "268:    {",
          "269:     switch (*cname)",
          "270:     {",
          "272:      switch (*host)",
          "273:      {",
          "274:      case '.':",
          "276:       break;",
          "277:      default:",
          "279:       if (!*host)",
          "280:       {",
          "282:       }",
          "283:       break;",
          "284:      }",
          "285:      break;",
          "287:      if (*host++ != *cname++)",
          "288:      {",
          "290:      }",
          "291:      break;",
          "292:     }",
          "293:    }",
          "294:    if (*host || *cname)",
          "295:    {",
          "297:    }",
          "299:   }",
          "300:  }",
          "302: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "257:   break;",
          "258:  }",
          "261: }",
          "",
          "[Removed Lines]",
          "260:  return (num);",
          "",
          "[Added Lines]",
          "328:  return num;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "286:   break;",
          "287:  }",
          "290: }",
          "",
          "[Removed Lines]",
          "289:  return (num);",
          "",
          "[Added Lines]",
          "357:  return num;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "306:  else",
          "307:          SSL_set_accept_state(ssl);",
          "310: }",
          "",
          "[Removed Lines]",
          "309:  return (ssl);",
          "",
          "[Added Lines]",
          "377:  return ssl;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "316:  if (!SSL_CTX_set_default_verify_paths (ctx))",
          "317:  {",
          "318:   __SSL_fill_err_buf (\"SSL_CTX_set_default_verify_paths\");",
          "320:  }",
          "322:  if (cacert)",
          "",
          "[Removed Lines]",
          "319:   return (err_buf);",
          "",
          "[Added Lines]",
          "387:   return err_buf;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "324:   if (!SSL_CTX_load_verify_locations (ctx, cacert, NULL))",
          "325:   {",
          "326:    __SSL_fill_err_buf (\"SSL_CTX_load_verify_locations\");",
          "328:   }",
          "329:  }",
          "331:  SSL_CTX_set_verify (ctx, SSL_VERIFY_PEER, verify_callback);",
          "334: }",
          "",
          "[Removed Lines]",
          "327:    return (err_buf);",
          "333:  return (NULL);",
          "",
          "[Added Lines]",
          "395:    return err_buf;",
          "401:  return NULL;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "541:   return rv;",
          "543:  return _SSL_check_common_name (cert, host);",
          "",
          "[Removed Lines]",
          "544: }",
          "",
          "[Added Lines]",
          "620: typedef struct ssl_certlist_item {",
          "621:  char *hostname;",
          "622:  char *fingerprint;",
          "623: } ssl_certlist_item;",
          "625: static void",
          "626: _SSL_certlist_item_free (ssl_certlist_item *item)",
          "627: {",
          "628:  g_return_if_fail (item != NULL);",
          "630:  if (item->hostname)",
          "631:   g_free (item->hostname);",
          "632:  if (item->fingerprint)",
          "633:   g_free (item->fingerprint);",
          "634:  g_free (item);",
          "635: }",
          "638: static void",
          "639: _SSL_certlist_item_add (char *hostname, char *fingerprint)",
          "640: {",
          "641:  int hn_length = strlen (hostname);",
          "642:  int fp_length = strlen (fingerprint);",
          "643:  ssl_certlist_item *item = g_malloc0 (sizeof (ssl_certlist_item));",
          "645:  if (item)",
          "646:  {",
          "647:   item->hostname = g_malloc0 (hn_length + 1);",
          "648:   item->fingerprint = g_malloc0 (fp_length + 1);",
          "649:   if (!item->hostname || !item->fingerprint)",
          "650:   {",
          "651:    _SSL_certlist_item_free (item);",
          "652:    return;",
          "653:   }",
          "654:   g_strlcpy (item->hostname, hostname, hn_length);",
          "655:   g_strlcpy (item->fingerprint, fingerprint, fp_length);",
          "657:   ssl_certlist = g_slist_append (ssl_certlist, item);",
          "658:  }",
          "659: }",
          "670: void",
          "671: _SSL_certlist_init ()",
          "672: {",
          "673:  char buf[1024];",
          "674:  char *space, *host, *fp;",
          "675:  FILE *fh;",
          "677:  fh = hexchat_fopen_file (\"sslcerts.conf\", \"r\", 0);",
          "678:  if (!fh)",
          "679:   return;",
          "681:  while (fgets (buf, sizeof(buf), fh))",
          "682:  {",
          "684:   space = strchr (buf, ' ');",
          "685:   if (!space)",
          "686:    continue;",
          "690:   host = buf;",
          "691:   fp = g_strchomp (space + 1);",
          "693:   if (host[0] && fp[0])",
          "694:    _SSL_certlist_item_add (host, fp);",
          "695:  }",
          "697:  fclose (fh);",
          "698: }",
          "700: void",
          "701: _SSL_certlist_save ()",
          "702: {",
          "704:  GSList *list;",
          "705:  ssl_certlist_item *item;",
          "706:  FILE *fh;",
          "708:  fh = hexchat_fopen_file (\"sslcerts.conf\", \"w\", 0);",
          "709:  if (fh)",
          "710:  {",
          "711:   list = ssl_certlist;",
          "712:   while (list)",
          "713:   {",
          "714:    item = (ssl_certlist_item*)list->data;",
          "716:    fprintf (fh, \"%s %s\\n\", item->hostname, item->fingerprint);",
          "718:    list = g_slist_next (list);",
          "719:   }",
          "720:   fclose (fh);",
          "721:  }",
          "722: }",
          "729: int",
          "730: _SSL_certlist_cert_check (struct server *serv, struct cert_info *cert)",
          "731: {",
          "732:  GSList *list;",
          "733:  ssl_certlist_item *item;",
          "735:  if (serv && cert)",
          "736:  {",
          "737:   list = ssl_certlist;",
          "738:   while (list)",
          "739:   {",
          "740:    item = (ssl_certlist_item*)list->data;",
          "742:    if (!g_ascii_strcasecmp (serv->hostname, item->hostname)",
          "743:     && !g_ascii_strcasecmp (cert->fingerprint, item->fingerprint))",
          "744:    {",
          "746:    }",
          "747:    list = g_slist_next (list);",
          "748:   }",
          "749:  }",
          "751: }",
          "753: void",
          "754: _SSL_certlist_cert_add (struct server *serv, struct cert_info *cert)",
          "755: {",
          "757:  _SSL_certlist_item_add (serv->hostname, cert->fingerprint);",
          "758: }",
          "",
          "---------------"
        ],
        "src/common/ssl.h||src/common/ssl.h": [
          "File: src/common/ssl.h -> src/common/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31:     int sign_algorithm_bits;",
          "32:     char notbefore[32];",
          "33:     char notafter[32];",
          "35:     int rsa_tmp_bits;",
          "36: };",
          "38: struct chiper_info {",
          "39:     char version[16];",
          "40:     char chiper[48];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34:  char fingerprint[128];",
          "39: enum",
          "40: {",
          "41:  SSLALERT_RESPONSE_ABORT = 0,",
          "42:  SSLALERT_RESPONSE_ACCEPT = 1,",
          "43:  SSLALERT_RESPONSE_SAVE = 2",
          "44: };",
          "46: typedef struct ssl_alert_context",
          "47: {",
          "48:  struct server *serv;",
          "49:  struct cert_info cert;",
          "50:  int verify_error;",
          "51: } ssl_alert_context;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55: int _SSL_check_hostname(X509 *cert, const char *host);",
          "56: int _SSL_get_cert_info (struct cert_info *cert_info, SSL * ssl);",
          "57: struct chiper_info *_SSL_get_cipher_info (SSL * ssl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: int _SSL_verify_cert_hostname (struct server *serv, struct cert_info *cert);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "85: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "102: void _SSL_certlist_init ();",
          "103: void _SSL_certlist_save ();",
          "104: int _SSL_certlist_cert_check (struct server *serv, struct cert_info *cert);",
          "105: void _SSL_certlist_cert_add (struct server *serv, struct cert_info *cert);",
          "",
          "---------------"
        ],
        "src/fe-gtk/Makefile.am||src/fe-gtk/Makefile.am": [
          "File: src/fe-gtk/Makefile.am -> src/fe-gtk/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "30:  dccgui.c editlist.c fe-gtk.c fkeys.c gtkutil.c ignoregui.c joind.c menu.c \\",
          "31:  maingui.c notifygui.c palette.c pixmaps.c plugin-tray.c $(plugingui_c) \\",
          "32:  rawlog.c resources.c servlistgui.c setup.c $(iso_codes_c) \\",
          "34: hexchat_CPPFLAGS = $(AM_CPPFLAGS) -I$(top_builddir)/src/common",
          "36: resources.c: $(top_srcdir)/data/hexchat.gresource.xml $(shell $(GLIB_COMPILE_RESOURCES) --sourcedir=$(top_srcdir)/data --generate-dependencies $(top_srcdir)/data/hexchat.gresource.xml)",
          "",
          "[Removed Lines]",
          "33:  sexy-spell-entry.c textgui.c urlgrab.c userlistgui.c xtext.c",
          "",
          "[Added Lines]",
          "33:  sslalert.c sexy-spell-entry.c textgui.c urlgrab.c userlistgui.c xtext.c",
          "",
          "---------------"
        ],
        "src/fe-gtk/fe-gtk.vcxproj||src/fe-gtk/fe-gtk.vcxproj": [
          "File: src/fe-gtk/fe-gtk.vcxproj -> src/fe-gtk/fe-gtk.vcxproj",
          "--- Hunk 1 ---",
          "[Context before]",
          "161:     <ClCompile Include=\"setup.c\" />",
          "162:     <ClCompile Include=\"sexy-iso-codes.c\" />",
          "163:     <ClCompile Include=\"sexy-spell-entry.c\" />",
          "164:     <ClCompile Include=\"textgui.c\" />",
          "165:     <ClCompile Include=\"urlgrab.c\" />",
          "166:     <ClCompile Include=\"userlistgui.c\" />",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "164:     <ClCompile Include=\"sslalert.c\" />",
          "",
          "---------------"
        ],
        "src/fe-gtk/fe-gtk.vcxproj.filters||src/fe-gtk/fe-gtk.vcxproj.filters": [
          "File: src/fe-gtk/fe-gtk.vcxproj.filters -> src/fe-gtk/fe-gtk.vcxproj.filters",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:     <ClCompile Include=\"resources.c\">",
          "183:       <Filter>Source Files</Filter>",
          "184:     </ClCompile>",
          "185:   </ItemGroup>",
          "186:   <ItemGroup>",
          "187:     <Manifest Include=\"hexchat.exe.manifest\">",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185:     <ClCompile Include=\"sslalert.c\">",
          "186:       <Filter>Source Files</Filter>",
          "187:     </ClCompile>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "202:   <ItemGroup>",
          "203:     <Xml Include=\"..\\..\\data\\hexchat.gresource.xml\" />",
          "204:   </ItemGroup>",
          "",
          "[Removed Lines]",
          "205: </Project>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/fe-gtk/servlistgui.c||src/fe-gtk/servlistgui.c": [
          "File: src/fe-gtk/servlistgui.c -> src/fe-gtk/servlistgui.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1866: #ifndef USE_OPENSSL",
          "1867:  gtk_widget_set_sensitive (check, FALSE);",
          "1868: #endif",
          "1869:  check = servlist_create_check (5, net->flags & FLAG_ALLOW_INVALID, table3, 4, 0, _(\"Accept invalid SSL certificates\"));",
          "1870: #ifndef USE_OPENSSL",
          "1871:  gtk_widget_set_sensitive (check, FALSE);",
          "1872: #endif",
          "1880:  label_logintype = gtk_label_new (_(\"Login method:\"));",
          "1882:  gtk_misc_set_alignment (GTK_MISC (label_logintype), 0, 0.5);",
          "1883:  combobox_logintypes = servlist_create_logintypecombo (notebook);",
          "1887:  gtk_entry_set_visibility (GTK_ENTRY (edit_entry_pass), FALSE);",
          "1888:  if (selected_net && selected_net->logintype == LOGIN_SASLEXTERNAL)",
          "1889:   gtk_widget_set_sensitive (edit_entry_pass, FALSE);",
          "1891:  label34 = gtk_label_new (_(\"Character set:\"));",
          "1893:  gtk_misc_set_alignment (GTK_MISC (label34), 0, 0.5);",
          "1894:  comboboxentry_charset = servlist_create_charsetcombo ();",
          "",
          "[Removed Lines]",
          "1873:  servlist_create_check (1, net->flags & FLAG_USE_GLOBAL, table3, 5, 0, _(\"Use global user information\"));",
          "1875:  edit_entry_nick = servlist_create_entry (table3, _(\"_Nick name:\"), 6, net->nick, &edit_label_nick, 0);",
          "1876:  edit_entry_nick2 = servlist_create_entry (table3, _(\"Second choice:\"), 7, net->nick2, &edit_label_nick2, 0);",
          "1877:  edit_entry_real = servlist_create_entry (table3, _(\"Rea_l name:\"), 8, net->real, &edit_label_real, 0);",
          "1878:  edit_entry_user = servlist_create_entry (table3, _(\"_User name:\"), 9, net->user, &edit_label_user, 0);",
          "1881:  gtk_table_attach (GTK_TABLE (table3), label_logintype, 0, 1, 10, 11, (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), SERVLIST_X_PADDING, SERVLIST_Y_PADDING);",
          "1884:  gtk_table_attach (GTK_TABLE (table3), combobox_logintypes, 1, 2, 10, 11, (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (GTK_FILL), 4, 2);",
          "1886:  edit_entry_pass = servlist_create_entry (table3, _(\"Password:\"), 11, net->pass, 0, _(\"Password used for login. If in doubt, leave blank.\"));",
          "1892:  gtk_table_attach (GTK_TABLE (table3), label34, 0, 1, 12, 13, (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), SERVLIST_X_PADDING, SERVLIST_Y_PADDING);",
          "1895:  gtk_table_attach (GTK_TABLE (table3), comboboxentry_charset, 1, 2, 12, 13, (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (GTK_FILL), 4, 2);",
          "",
          "[Added Lines]",
          "1869: #if 0",
          "1874: #endif",
          "1875:  servlist_create_check (1, net->flags & FLAG_USE_GLOBAL, table3, 4, 0, _(\"Use global user information\"));",
          "1877:  edit_entry_nick = servlist_create_entry (table3, _(\"_Nick name:\"), 5, net->nick, &edit_label_nick, 0);",
          "1878:  edit_entry_nick2 = servlist_create_entry (table3, _(\"Second choice:\"), 6, net->nick2, &edit_label_nick2, 0);",
          "1879:  edit_entry_real = servlist_create_entry (table3, _(\"Rea_l name:\"), 7, net->real, &edit_label_real, 0);",
          "1880:  edit_entry_user = servlist_create_entry (table3, _(\"_User name:\"), 8, net->user, &edit_label_user, 0);",
          "1883:  gtk_table_attach (GTK_TABLE (table3), label_logintype, 0, 1, 9, 10, (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), SERVLIST_X_PADDING, SERVLIST_Y_PADDING);",
          "1886:  gtk_table_attach (GTK_TABLE (table3), combobox_logintypes, 1, 2, 9, 10, (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (GTK_FILL), 4, 2);",
          "1888:  edit_entry_pass = servlist_create_entry (table3, _(\"Password:\"), 10, net->pass, 0, _(\"Password used for login. If in doubt, leave blank.\"));",
          "1894:  gtk_table_attach (GTK_TABLE (table3), label34, 0, 1, 11, 12, (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (0), SERVLIST_X_PADDING, SERVLIST_Y_PADDING);",
          "1897:  gtk_table_attach (GTK_TABLE (table3), comboboxentry_charset, 1, 2, 11, 12, (GtkAttachOptions) (GTK_FILL), (GtkAttachOptions) (GTK_FILL), 4, 2);",
          "",
          "---------------"
        ],
        "src/fe-gtk/sslalert.c||src/fe-gtk/sslalert.c": [
          "File: src/fe-gtk/sslalert.c -> src/fe-gtk/sslalert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "19: #include <stdio.h>",
          "20: #include <stdlib.h>",
          "21: #include <string.h>",
          "22: #include \"fe-gtk.h\"",
          "23: #include <gtk/gtk.h>",
          "24: #include \"../common/hexchat.h\"",
          "25: #include \"../common/util.h\"",
          "26: #include \"palette.h\"",
          "27: #include \"pixmaps.h\"",
          "28: #include \"gtkutil.h\"",
          "30: void (*server_callback)(int, void *) = 0;",
          "32: static void",
          "33: sslalert_cb (GtkDialog *dialog, gint response, gpointer data)",
          "34: {",
          "36:   server_callback (SSLALERT_RESPONSE_ABORT, data);",
          "37:  else",
          "38:   server_callback (response, data);",
          "40:  gtk_widget_destroy (GTK_WIDGET (dialog));",
          "41: }",
          "43: void",
          "44: fe_sslalert_open (struct server *serv, void (*callback)(int, void *), void *callback_data)",
          "45: {",
          "46:  GtkWidget *sslalert;",
          "47:  GtkWidget *wid;",
          "48:  GtkWidget *dialog_vbox;",
          "49:  GtkWidget *expander;",
          "50:  GtkWidget *hbox1, *vbox1, *vbox2;",
          "51:  GtkWidget *img_vbox;",
          "52:  char *cert_buf;",
          "53:  char buf[256];",
          "54:  char buf2[256];",
          "56:  server_callback = callback;",
          "58:  sslalert = gtk_dialog_new ();",
          "59:  gtk_window_set_title (GTK_WINDOW (sslalert), _ (DISPLAY_NAME\": Security Alert\"));",
          "60:  gtk_window_set_type_hint (GTK_WINDOW (sslalert), GDK_WINDOW_TYPE_HINT_DIALOG);",
          "61:  gtk_window_set_position (GTK_WINDOW (sslalert), GTK_WIN_POS_CENTER_ON_PARENT);",
          "62:  gtk_window_set_transient_for (GTK_WINDOW (sslalert), GTK_WINDOW (serv->front_session->gui->window));",
          "63:  gtk_window_set_modal (GTK_WINDOW (sslalert), TRUE);",
          "64:  gtk_window_set_resizable (GTK_WINDOW (sslalert), FALSE);",
          "66:  dialog_vbox = gtk_dialog_get_content_area (GTK_DIALOG (sslalert));",
          "68:  vbox1 = gtk_vbox_new (FALSE, 0);",
          "69:  gtk_box_pack_start (GTK_BOX (dialog_vbox), vbox1, TRUE, TRUE, 0);",
          "71:  hbox1 = gtk_hbox_new (FALSE, 0);",
          "72:  gtk_box_pack_start (GTK_BOX (vbox1), hbox1, TRUE, TRUE, 0);",
          "74:  img_vbox = gtk_vbox_new (FALSE, 10);",
          "75:  gtk_container_set_border_width (GTK_CONTAINER (img_vbox), 6);",
          "76:  gtk_box_pack_start (GTK_BOX (hbox1), img_vbox, TRUE, TRUE, 0);",
          "78:  wid = gtk_image_new_from_stock (GTK_STOCK_DIALOG_AUTHENTICATION, GTK_ICON_SIZE_DIALOG);",
          "79:  gtk_box_pack_start (GTK_BOX (img_vbox), wid, FALSE, TRUE, 24);",
          "80:  gtk_misc_set_alignment (GTK_MISC (wid), 0.5f, 0.06f);",
          "82:  vbox2 = gtk_vbox_new (FALSE, 10);",
          "83:  gtk_container_set_border_width (GTK_CONTAINER (vbox2), 6);",
          "84:  gtk_box_pack_start (GTK_BOX (hbox1), vbox2, TRUE, TRUE, 0);",
          "86:  snprintf (buf2, sizeof (buf2), _ (\"Connecting to %s (+%d)\"),",
          "87:   serv->hostname, serv->port);",
          "88:  snprintf (buf, sizeof (buf), \"\\n<b>%s</b>\", buf2);",
          "89:  wid = gtk_label_new (buf);",
          "90:  gtk_box_pack_start (GTK_BOX (vbox2), wid, FALSE, FALSE, 0);",
          "91:  gtk_label_set_use_markup (GTK_LABEL (wid), TRUE);",
          "92:  gtk_misc_set_alignment (GTK_MISC (wid), 0, 0.5);",
          "94:  wid = gtk_label_new (_ (\"This server has presented an invalid certificate, and is self-signed, expired, or has another problem.\"));",
          "95:  gtk_box_pack_start (GTK_BOX (vbox2), wid, FALSE, FALSE, 0);",
          "96:  gtk_label_set_line_wrap (GTK_LABEL (wid), TRUE);",
          "97:  gtk_misc_set_alignment (GTK_MISC (wid), 0, 0.5);",
          "99:  wid = gtk_label_new (_ (\"If you are certain that your connection is not being tampered with, you can continue and your connection will be secure.\"));",
          "100:  gtk_box_pack_start (GTK_BOX (vbox2), wid, FALSE, FALSE, 0);",
          "101:  gtk_label_set_line_wrap (GTK_LABEL (wid), TRUE);",
          "102:  gtk_misc_set_alignment (GTK_MISC (wid), 0, 0.5);",
          "104:  if (serv->cert_info)",
          "105:  {",
          "106:   char *subject;",
          "107:   char *issuer;",
          "109:   expander = gtk_expander_new (_ (\"More details:\"));",
          "110:   gtk_widget_set_can_focus (expander, FALSE);",
          "111:   gtk_container_set_border_width (GTK_CONTAINER (expander), 10);",
          "112:   gtk_box_pack_start (GTK_BOX (vbox1), expander, FALSE, FALSE, 0);",
          "114:   wid = gtk_label_new (NULL);",
          "115:   gtk_label_set_use_markup (GTK_LABEL (wid), TRUE);",
          "116:   gtk_label_set_justify (GTK_LABEL (wid), GTK_JUSTIFY_LEFT);",
          "117:   gtk_container_add (GTK_CONTAINER (expander), wid);",
          "119:   issuer = g_strjoinv (\"\\n\\t\\t\", serv->cert_info->issuer_word);",
          "120:   subject = g_strjoinv (\"\\n\\t\\t\", serv->cert_info->subject_word);",
          "121:   cert_buf = g_markup_printf_escaped (\"<b>Issuer:</b>\\t%s\\n\\n\"\\",
          "122:            \"<b>Subject:</b> %s\\n\\n\"\\",
          "123:            \"<b>Valid:</b>\\tAfter: %s\\n\\t\\tBefore: %s\\n\\n\"\\",
          "124:            \"<b>Algorithm:</b> %s (%d bits)\",",
          "125:            issuer, subject,",
          "126:            serv->cert_info->notbefore, serv->cert_info->notafter,",
          "127:            serv->cert_info->algorithm, serv->cert_info->algorithm_bits);",
          "129:   gtk_label_set_markup (GTK_LABEL (wid), cert_buf);",
          "131:   g_free (cert_buf);",
          "132:   g_free (issuer);",
          "133:   g_free (subject);",
          "134:  }",
          "136:  gtk_dialog_add_buttons (GTK_DIALOG (sslalert), _ (\"Abort\"), SSLALERT_RESPONSE_ABORT,",
          "137:              _(\"Accept Once\"), SSLALERT_RESPONSE_ACCEPT,",
          "138:              _(\"Always Accept\"), SSLALERT_RESPONSE_SAVE, NULL);",
          "139:  gtk_dialog_set_default_response (GTK_DIALOG (sslalert), SSLALERT_RESPONSE_ABORT);",
          "141:  g_signal_connect (G_OBJECT (sslalert), \"response\", G_CALLBACK (sslalert_cb), callback_data);",
          "143:  gtk_widget_show_all (sslalert);",
          "144: }",
          "",
          "---------------"
        ],
        "src/fe-text/fe-text.c||src/fe-text/fe-text.c": [
          "File: src/fe-text/fe-text.c -> src/fe-text/fe-text.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "922: {",
          "923:  return NULL;",
          "924: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "925: void",
          "926: fe_sslalert_open (struct server *serv, void (*callback)(int, void *), void *callback_data)",
          "927: {",
          "928:  callback (SSLALERT_RESPONSE_ACCEPT, callback_data);",
          "929: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "13db2011e3b83e7a73b8465c8487edb9a2913c58",
      "candidate_info": {
        "commit_hash": "13db2011e3b83e7a73b8465c8487edb9a2913c58",
        "repo": "hexchat/hexchat",
        "commit_url": "https://github.com/hexchat/hexchat/commit/13db2011e3b83e7a73b8465c8487edb9a2913c58",
        "files": [
          "src/common/ssl.c"
        ],
        "message": "Fix leak\n\nFrom libressl-portable/openbsd@20de8a4923bbeb",
        "before_after_code_files": [
          "src/common/ssl.c||src/common/ssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/common/ssl.c||src/common/ssl.c"
          ],
          "candidate": [
            "src/common/ssl.c||src/common/ssl.c"
          ]
        }
      },
      "candidate_diff": {
        "src/common/ssl.c||src/common/ssl.c": [
          "File: src/common/ssl.c -> src/common/ssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "484:  if (addr != NULL)",
          "485:   g_object_unref (addr);",
          "487:  return rv;",
          "488: }",
          "",
          "[Removed Lines]",
          "486:  sk_GENERAL_NAME_free (altname_stack);",
          "",
          "[Added Lines]",
          "486:  sk_GENERAL_NAME_pop_free (altname_stack, GENERAL_NAME_free);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c99f2ba645d1f4d01d6d2bb0cc1238825e15c604",
      "candidate_info": {
        "commit_hash": "c99f2ba645d1f4d01d6d2bb0cc1238825e15c604",
        "repo": "hexchat/hexchat",
        "commit_url": "https://github.com/hexchat/hexchat/commit/c99f2ba645d1f4d01d6d2bb0cc1238825e15c604",
        "files": [
          "src/common/server.c",
          "src/common/ssl.c",
          "src/common/ssl.h"
        ],
        "message": "ssl: Validate hostnames\n\nCloses #524",
        "before_after_code_files": [
          "src/common/server.c||src/common/server.c",
          "src/common/ssl.c||src/common/ssl.c",
          "src/common/ssl.h||src/common/ssl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "src/common/server.c||src/common/server.c",
            "src/common/ssl.c||src/common/ssl.c",
            "src/common/ssl.h||src/common/ssl.h"
          ],
          "candidate": [
            "src/common/server.c||src/common/server.c",
            "src/common/ssl.c||src/common/ssl.c",
            "src/common/ssl.h||src/common/ssl.h"
          ]
        }
      },
      "candidate_diff": {
        "src/common/server.c||src/common/server.c": [
          "File: src/common/server.c -> src/common/server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "723:   switch (verify_error)",
          "724:   {",
          "725:   case X509_V_OK:",
          "729:   case X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY:",
          "730:   case X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE:",
          "731:   case X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT:",
          "",
          "[Removed Lines]",
          "728:    break;",
          "",
          "[Added Lines]",
          "726:    {",
          "727:     X509 *cert = SSL_get_peer_certificate (serv->ssl);",
          "728:     int hostname_err;",
          "729:     if ((hostname_err = _SSL_check_hostname(cert, serv->hostname)) != 0)",
          "730:     {",
          "731:      snprintf (buf, sizeof (buf), \"* Verify E: Failed to validate hostname? (%d)%s\",",
          "732:         hostname_err, serv->accept_invalid_cert ? \" -- Ignored\" : \"\");",
          "733:      if (serv->accept_invalid_cert)",
          "734:       EMIT_SIGNAL (XP_TE_SSLMESSAGE, serv->server_session, buf, NULL, NULL, NULL, 0);",
          "735:      else",
          "736:       goto conn_fail;",
          "737:     }",
          "738:     break;",
          "739:    }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "744:    snprintf (buf, sizeof (buf), \"%s.? (%d)\",",
          "745:        X509_verify_cert_error_string (verify_error),",
          "746:        verify_error);",
          "747:    EMIT_SIGNAL (XP_TE_CONNFAIL, serv->server_session, buf, NULL, NULL,",
          "748:         NULL, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "760: conn_fail:",
          "",
          "---------------"
        ],
        "src/common/ssl.c||src/common/ssl.c": [
          "File: src/common/ssl.c -> src/common/ssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #ifdef WIN32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <openssl/x509v3.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: #include <glib.h>",
          "39: #include <glib/gprintf.h>",
          "40: #include \"util.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41: #include <gio/gio.h>",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "341:  SSL_free (ssl);",
          "343: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "349: static int",
          "350: _SSL_match_hostname (const char *cert_hostname, const char *hostname)",
          "351: {",
          "352:  const char *cert_domain, *domain, *next_dot;",
          "354:  if (g_ascii_strcasecmp (cert_hostname, hostname) == 0)",
          "355:   return 0;",
          "358:  if (cert_hostname[0] == '*')",
          "359:  {",
          "368:   cert_domain = &cert_hostname[1];",
          "370:   if (cert_domain[0] == '\\0')",
          "371:    return -1;",
          "373:   if (cert_domain[0] != '.')",
          "374:    return -1;",
          "376:   if (cert_domain[1] == '.')",
          "377:    return -1;",
          "378:   next_dot = strchr (&cert_domain[1], '.');",
          "380:   if (next_dot == NULL)",
          "381:    return -1;",
          "383:   if (next_dot[1] == '.')",
          "384:    return -1;",
          "386:   domain = strchr (hostname, '.');",
          "389:   if (domain == NULL || strlen(domain) == 1)",
          "390:    return -1;",
          "392:   if (g_ascii_strcasecmp (cert_domain, domain) == 0)",
          "393:    return 0;",
          "394:  }",
          "396:  return -1;",
          "397: }",
          "399: static int",
          "400: _SSL_check_subject_altname (X509 *cert, const char *host)",
          "401: {",
          "402:  STACK_OF(GENERAL_NAME) *altname_stack = NULL;",
          "403:  GInetAddress *addr;",
          "404:  GSocketFamily family;",
          "405:  int type = GEN_DNS;",
          "406:  int count, i;",
          "407:  int rv = -1;",
          "409:  altname_stack = X509_get_ext_d2i (cert, NID_subject_alt_name, NULL, NULL);",
          "410:  if (altname_stack == NULL)",
          "411:   return -1;",
          "413:  addr = g_inet_address_new_from_string (host);",
          "414:  if (addr != NULL)",
          "415:  {",
          "416:   family = g_inet_address_get_family (addr);",
          "417:   if (family == G_SOCKET_FAMILY_IPV4 || family == G_SOCKET_FAMILY_IPV6)",
          "418:    type = GEN_IPADD;",
          "419:  }",
          "421:  count = sk_GENERAL_NAME_num(altname_stack);",
          "422:  for (i = 0; i < count; i++)",
          "423:  {",
          "424:   GENERAL_NAME *altname;",
          "426:   altname = sk_GENERAL_NAME_value (altname_stack, i);",
          "428:   if (altname->type != type)",
          "429:    continue;",
          "431:   if (type == GEN_DNS)",
          "432:   {",
          "433:    unsigned char *data;",
          "434:    int format;",
          "436:    format = ASN1_STRING_type (altname->d.dNSName);",
          "437:    if (format == V_ASN1_IA5STRING)",
          "438:    {",
          "439:     data = ASN1_STRING_data (altname->d.dNSName);",
          "441:     if (ASN1_STRING_length (altname->d.dNSName) != (int)strlen(data))",
          "442:     {",
          "443:      g_warning(\"NUL byte in subjectAltName, probably a malicious certificate.\\n\");",
          "444:      rv = -2;",
          "445:      break;",
          "446:     }",
          "448:     if (_SSL_match_hostname (data, host) == 0)",
          "449:     {",
          "450:      rv = 0;",
          "451:      break;",
          "452:     }",
          "453:    }",
          "454:    else",
          "455:     g_warning (\"unhandled subjectAltName dNSName encoding (%d)\\n\", format);",
          "457:   }",
          "458:   else if (type == GEN_IPADD)",
          "459:   {",
          "460:    unsigned char *data;",
          "461:    const guint8 *addr_bytes;",
          "462:    int datalen, addr_len;",
          "464:    datalen = ASN1_STRING_length (altname->d.iPAddress);",
          "465:    data = ASN1_STRING_data (altname->d.iPAddress);",
          "467:    addr_bytes = g_inet_address_to_bytes (addr);",
          "468:    addr_len = (int)g_inet_address_get_native_size (addr);",
          "470:    if (datalen == addr_len && memcmp (data, addr_bytes, addr_len) == 0)",
          "471:    {",
          "472:     rv = 0;",
          "473:     break;",
          "474:    }",
          "475:   }",
          "476:  }",
          "478:  if (addr != NULL)",
          "479:   g_object_unref (addr);",
          "480:  sk_GENERAL_NAME_free (altname_stack);",
          "481:  return rv;",
          "482: }",
          "484: static int",
          "485: _SSL_check_common_name (X509 *cert, const char *host)",
          "486: {",
          "487:  X509_NAME *name;",
          "488:  char *common_name = NULL;",
          "489:  int common_name_len;",
          "490:  int rv = -1;",
          "491:  GInetAddress *addr;",
          "493:  name = X509_get_subject_name (cert);",
          "494:  if (name == NULL)",
          "495:   return -1;",
          "497:  common_name_len = X509_NAME_get_text_by_NID (name, NID_commonName, NULL, 0);",
          "498:  if (common_name_len < 0)",
          "499:   return -1;",
          "501:  common_name = calloc (common_name_len + 1, 1);",
          "502:  if (common_name == NULL)",
          "503:   return -1;",
          "505:  X509_NAME_get_text_by_NID (name, NID_commonName, common_name, common_name_len + 1);",
          "508:  if (common_name_len != (int)strlen(common_name))",
          "509:  {",
          "510:   g_warning (\"NUL byte in Common Name field, probably a malicious certificate.\\n\");",
          "511:   rv = -2;",
          "512:   goto out;",
          "513:  }",
          "515:  if ((addr = g_inet_address_new_from_string (host)) != NULL)",
          "516:  {",
          "521:   if (g_strcmp0 (common_name, host) == 0)",
          "522:    rv = 0;",
          "523:   else",
          "524:    rv = -1;",
          "526:   g_object_unref (addr);",
          "527:  }",
          "528:  else if (_SSL_match_hostname (common_name, host) == 0)",
          "529:   rv = 0;",
          "531: out:",
          "532:  free(common_name);",
          "533:  return rv;",
          "534: }",
          "536: int",
          "537: _SSL_check_hostname (X509 *cert, const char *host)",
          "538: {",
          "539:  int rv;",
          "541:  rv = _SSL_check_subject_altname (cert, host);",
          "542:  if (rv == 0 || rv == -2)",
          "543:   return rv;",
          "545:  return _SSL_check_common_name (cert, host);",
          "546: }",
          "",
          "---------------"
        ],
        "src/common/ssl.h||src/common/ssl.h": [
          "File: src/common/ssl.h -> src/common/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:     int SSL_get_fd(SSL *);",
          "54: void _SSL_close (SSL * ssl);",
          "56: int _SSL_get_cert_info (struct cert_info *cert_info, SSL * ssl);",
          "57: struct chiper_info *_SSL_get_cipher_info (SSL * ssl);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: int _SSL_check_hostname(X509 *cert, const char *host);",
          "",
          "---------------"
        ]
      }
    }
  ]
}