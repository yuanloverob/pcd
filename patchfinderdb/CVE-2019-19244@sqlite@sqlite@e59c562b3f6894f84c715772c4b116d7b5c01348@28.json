{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "595d9f5f3c19995b6ad1860c164b9aeb41b57000",
      "candidate_info": {
        "commit_hash": "595d9f5f3c19995b6ad1860c164b9aeb41b57000",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/595d9f5f3c19995b6ad1860c164b9aeb41b57000",
        "files": [
          "ext/session/sqlite3session.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a segfault that could occur in sqlite3session_diff() if NULL were passed as the pzErrMsg argument.\n\nFossilOrigin-Name: aee73fd28f031a2568ac723de0826be7f1dca6be3b049e4a04fb47af75dcf4bf",
        "before_after_code_files": [
          "ext/session/sqlite3session.c||ext/session/sqlite3session.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/session/sqlite3session.c||ext/session/sqlite3session.c": [
          "File: ext/session/sqlite3session.c -> ext/session/sqlite3session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1624:       }",
          "1625:       sqlite3_free((char*)azCol);",
          "1626:       if( bMismatch ){",
          "1628:         rc = SQLITE_SCHEMA;",
          "1629:       }",
          "1630:       if( bHasPk==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1627:         if( pzErrMsg ){",
          "1629:         }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b7aad929619f7043b1685a6477d50f6b4436e85511eb365eceae3dd4dbab571a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7678fdc33d312ef08b5edaee5bb4c84d123a79df",
      "candidate_info": {
        "commit_hash": "7678fdc33d312ef08b5edaee5bb4c84d123a79df",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7678fdc33d312ef08b5edaee5bb4c84d123a79df",
        "files": [
          "ext/fts3/fts3_tokenizer.c",
          "manifest",
          "manifest.uuid",
          "test/fts3atoken.test"
        ],
        "message": "Change the fts3_tokenizer() function to always return the pointer as a BLOB as long as the first argument is a bound parameter, regardless of the SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER setting.\n\nFossilOrigin-Name: 27160df7b3a04ac59d06013ede1d2ee27a4ace86a525ecc333bf7f8b5c580afb",
        "before_after_code_files": [
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3atoken.test||test/fts3atoken.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:       return;",
          "107:     }",
          "108:   }",
          "110:     sqlite3_result_blob(context, (void *)&pPtr, sizeof(pPtr), SQLITE_TRANSIENT);",
          "111:   }",
          "112: }",
          "",
          "[Removed Lines]",
          "109:   if( fts3TokenizerEnabled(context) ){",
          "",
          "[Added Lines]",
          "109:   if( fts3TokenizerEnabled(context) || sqlite3_value_frombind(argv[0]) ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ab76e3a90e56bd36a17ded9c7a77e88632ca12d3bd73f197df747a634c81e0cf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3atoken.test||test/fts3atoken.test": [
          "File: test/fts3atoken.test -> test/fts3atoken.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:   }",
          "87: } {{There was movement at the station}}",
          "90: set simple [db one {SELECT fts3_tokenizer('simple')}]",
          "91: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 0",
          "92: do_catchsql_test 1.6 {",
          "",
          "[Removed Lines]",
          "89: unset -nocomplain simple",
          "",
          "[Added Lines]",
          "89: unset -nocomplain simple blah2name simplename",
          "90: set simplename \"simple\"",
          "91: set blah2name \"blah2\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "97:     SELECT fts3_tokenizer('blah2', $simple) IS NULL;",
          "98:   }",
          "99: } {1}",
          "101: do_test fts3atoken-1.8 {",
          "102:   execsql {",
          "104:   }",
          "109: #--------------------------------------------------------------------------",
          "110: # Test cases fts3atoken-2.* test error cases in the scalar function based",
          "",
          "[Removed Lines]",
          "100: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1",
          "103:     SELECT fts3_tokenizer('blah2') == fts3_tokenizer('simple');",
          "105: } {1}",
          "",
          "[Added Lines]",
          "103: # With ENABLE_FTS3_TOKENIZER off, the fts3_tokenzer(1) function",
          "104: # returns NULL unless the first parameter is a bound parameter.",
          "105: # If the first parameter is a bound parameter, then fts3_tokenizer(1)",
          "106: # returns the actual pointer value as a BLOB.",
          "107: #",
          "110:     SELECT fts3_tokenizer($blah2name) == fts3_tokenizer($simplename),",
          "111:            typeof(fts3_tokenizer($blah2name)),",
          "112:            typeof(fts3_tokenizer('blah2')),",
          "113:            typeof(fts3_tokenizer($simplename)),",
          "114:            typeof(fts3_tokenizer('simple'));",
          "116: } {1 blob null blob null}",
          "118: # With ENABLE_FTS3_TOKENIZER on, fts3_tokenizer() always returns",
          "119: # the BLOB pointer, regardless the parameter",
          "120: #",
          "121: sqlite3_db_config db SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER 1",
          "122: do_test fts3atoken-1.9 {",
          "123:   execsql {",
          "124:     SELECT fts3_tokenizer('blah2') == fts3_tokenizer('simple'),",
          "125:            typeof(fts3_tokenizer($blah2name)),",
          "126:            typeof(fts3_tokenizer('blah2')),",
          "127:            typeof(fts3_tokenizer($simplename)),",
          "128:            typeof(fts3_tokenizer('simple'));",
          "129:   }",
          "130: } {1 blob blob blob blob}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f83f591541b562b39c2b9cf8b9fcfab54d535e7",
      "candidate_info": {
        "commit_hash": "3f83f591541b562b39c2b9cf8b9fcfab54d535e7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3f83f591541b562b39c2b9cf8b9fcfab54d535e7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add the \".progress\" command to the CLI.\n\nFossilOrigin-Name: ad84ca24ff760f7a2b128f2eeb4d799a97f84b8b8a8bb8d9657c4c555f6ccf47",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14fba4cc5db2bc206f024bfa5dd82fffdbc7577162da2c3b15a91cc1c91f3846",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1090: #define PROGRESS_RESET   0x02         /* Reset the count when the progres",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1782:   }",
          "1783: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1798: static int progress_handler(void *pClientData) {",
          "1799:   ShellState *p = (ShellState*)pClientData;",
          "1800:   p->nProgress++;",
          "1801:   if( p->nProgress>=p->mxProgress && p->mxProgress>0 ){",
          "1802:     raw_printf(p->out, \"Progress limit reached (%u)\\n\", p->nProgress);",
          "1803:     if( p->flgProgress & PROGRESS_RESET ) p->nProgress = 0;",
          "1804:     if( p->flgProgress & PROGRESS_ONCE ) p->mxProgress = 0;",
          "1805:     return 1;",
          "1806:   }",
          "1807:   if( (p->flgProgress & PROGRESS_QUIET)==0 ){",
          "1808:     raw_printf(p->out, \"Progress %u\\n\", p->nProgress);",
          "1809:   }",
          "1810:   return 0;",
          "1811: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3468:   \".output ?FILE?           Send output to FILE or stdout if FILE is omitted\",",
          "3469:   \"     If FILE begins with '|' then open it as a pipe.\",",
          "3470:   \".print STRING...         Print literal STRING\",",
          "3471:   \".prompt MAIN CONTINUE    Replace the standard prompts\",",
          "3472:   \".quit                    Exit this program\",",
          "3473:   \".read FILE               Read input from FILE\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3499:   \".progress N              Invoke progress handler after every N opcodes\",",
          "3500:   \"   --limit N                 Interrupt after N progress callbacks\",",
          "3501:   \"   --once                    Do no more than one progress interrupt\",",
          "3502:   \"   --quiet|-q                No output except at interrupts\",",
          "3503:   \"   --reset                   Reset the count for each input and interrupt\",",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7000:     raw_printf(p->out, \"\\n\");",
          "7001:   }else",
          "7003:   if( c=='p' && strncmp(azArg[0], \"prompt\", n)==0 ){",
          "7004:     if( nArg >= 2) {",
          "7005:       strncpy(mainPrompt,azArg[1],(int)ArraySize(mainPrompt)-1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7036:   if( c=='p' && n>=3 && strncmp(azArg[0], \"progress\", n)==0 ){",
          "7037:     int i;",
          "7038:     int n = 0;",
          "7039:     p->flgProgress = 0;",
          "7040:     p->mxProgress = 0;",
          "7041:     p->nProgress = 0;",
          "7042:     for(i=1; i<nArg; i++){",
          "7043:       const char *z = azArg[i];",
          "7044:       if( z[0]=='-' ){",
          "7045:         z++;",
          "7046:         if( z[0]=='-' ) z++;",
          "7047:         if( strcmp(z,\"quiet\")==0 || strcmp(z,\"q\")==0 ){",
          "7048:           p->flgProgress |= PROGRESS_QUIET;",
          "7049:           continue;",
          "7050:         }",
          "7051:         if( strcmp(z,\"reset\")==0 ){",
          "7052:           p->flgProgress |= PROGRESS_RESET;",
          "7053:           continue;",
          "7054:         }",
          "7055:         if( strcmp(z,\"once\")==0 ){",
          "7056:           p->flgProgress |= PROGRESS_ONCE;",
          "7057:           continue;",
          "7058:         }",
          "7059:         if( strcmp(z,\"limit\")==0 ){",
          "7060:           if( i+1>=nArg ){",
          "7061:             utf8_printf(stderr, \"Error: missing argument on --limit\\n\");",
          "7062:             rc = 1;",
          "7063:             goto meta_command_exit;",
          "7064:           }else{",
          "7065:             p->mxProgress = (int)integerValue(azArg[++i]);",
          "7066:           }",
          "7067:           continue;",
          "7068:         }",
          "7069:         utf8_printf(stderr, \"Error: unknown option: \\\"%s\\\"\\n\", azArg[i]);",
          "7070:         rc = 1;",
          "7071:         goto meta_command_exit;",
          "7072:       }else{",
          "7073:         n = (int)integerValue(z);",
          "7074:       }",
          "7075:     }",
          "7076:     open_db(p, 0);",
          "7077:     sqlite3_progress_handler(p->db, n, progress_handler, p);",
          "7078:   }else",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8336:   open_db(p, 0);",
          "8337:   if( ShellHasFlag(p,SHFLG_Backslash) ) resolve_backslashes(zSql);",
          "8338:   BEGIN_TIMER;",
          "8339:   rc = shell_exec(p, zSql, &zErrMsg);",
          "8340:   END_TIMER;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8415:   if( p->flgProgress & PROGRESS_RESET ) p->nProgress = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6dcf9a451e6e4ed1ae343c4813958540ac836306",
      "candidate_info": {
        "commit_hash": "6dcf9a451e6e4ed1ae343c4813958540ac836306",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6dcf9a451e6e4ed1ae343c4813958540ac836306",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/util.c"
        ],
        "message": "Fix harmless compiler warning seen with MSVC.\n\nFossilOrigin-Name: 73a82114733af2a316f20eb8578badef307d14286c6ec03197744a6793425161",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/util.c||src/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7833feecfe745e237f239ee4c38a9e4bf7ad66a32919150208da87c00a826473",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "385: int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){",
          "386: #ifndef SQLITE_OMIT_FLOATING_POINT",
          "387:   int incr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "385: #if defined(_MSC_VER)",
          "386: #pragma warning(disable : 4756)",
          "387: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "569:   return !sqlite3Atoi64(z, pResult, length, enc);",
          "571: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "575: #if defined(_MSC_VER)",
          "576: #pragma warning(default : 4756)",
          "577: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b42eb3571c35341ae2171fcd5dc63ca9a49784c0",
      "candidate_info": {
        "commit_hash": "b42eb3571c35341ae2171fcd5dc63ca9a49784c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b42eb3571c35341ae2171fcd5dc63ca9a49784c0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Fix a problem with processing CTEs that use a WINDOW clause.\n\nFossilOrigin-Name: ca564d4b5b19fe56842a04f31bb61352e6ae9d72a7e7634eb27ebcf5f670545a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 01d71b947a7422081d5c7d6ac2c91b9c936dc41926ab58c92f4a088a64e8c051",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2215:     pNew = sqlite3DbMallocZero(db, sizeof(Window));",
          "2216:     if( pNew ){",
          "2217:       pNew->zName = sqlite3DbStrDup(db, p->zName);",
          "2218:       pNew->pFilter = sqlite3ExprDup(db, p->pFilter, 0);",
          "2219:       pNew->pFunc = p->pFunc;",
          "2220:       pNew->pPartition = sqlite3ExprListDup(db, p->pPartition, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2218:       pNew->zBase = sqlite3DbStrDup(db, p->zBase);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2227:       pNew->pStart = sqlite3ExprDup(db, p->pStart, 0);",
          "2228:       pNew->pEnd = sqlite3ExprDup(db, p->pEnd, 0);",
          "2229:       pNew->pOwner = pOwner;",
          "2230:     }",
          "2231:   }",
          "2232:   return pNew;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2231:       pNew->bImplicitFrame = p->bImplicitFrame;",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "202:   }",
          "203: }",
          "205: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "205: #-------------------------------------------------------------------------",
          "206: reset_db",
          "207: do_execsql_test 4.0 {",
          "208:   CREATE TABLE x(a);",
          "209:   INSERT INTO x VALUES(1);",
          "210:   INSERT INTO x VALUES(2);",
          "211: }",
          "213: do_execsql_test 4.1 {",
          "214:   WITH y AS (",
          "215:       SELECT Row_Number() OVER (win) FROM x WINDOW win AS (PARTITION BY a)",
          "216:   )",
          "217:   SELECT * FROM y;",
          "218: } {",
          "219:   1 1",
          "220: }",
          "222: do_catchsql_test 4.2 {",
          "223:   WITH y AS (",
          "224:     SELECT Row_Number() OVER (win) FROM x WINDOW win AS (PARTITION",
          "225:   BY fake_column))",
          "226:   SELECT * FROM y;",
          "227: } {1 {no such column: fake_column}}",
          "229: do_catchsql_test 4.3 {",
          "230:   SELECT 1 WINDOW win AS (PARTITION BY fake_column);",
          "231: } {0 1}",
          "",
          "---------------"
        ]
      }
    }
  ]
}