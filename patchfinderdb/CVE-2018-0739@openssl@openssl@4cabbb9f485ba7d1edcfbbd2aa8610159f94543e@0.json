{
  "cve_id": "CVE-2018-0739",
  "cve_desc": "Constructed ASN.1 types with a recursive definition (such as can be found in PKCS7) could eventually exceed the stack given malicious input with excessive recursion. This could result in a Denial Of Service attack. There are no such structures used within SSL/TLS that come from untrusted sources so this is considered safe. Fixed in OpenSSL 1.1.0h (Affected 1.1.0-1.1.0g). Fixed in OpenSSL 1.0.2o (Affected 1.0.2b-1.0.2n).",
  "repo": "openssl/openssl",
  "patch_hash": "4cabbb9f485ba7d1edcfbbd2aa8610159f94543e",
  "patch_info": {
    "commit_hash": "4cabbb9f485ba7d1edcfbbd2aa8610159f94543e",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/4cabbb9f485ba7d1edcfbbd2aa8610159f94543e",
    "files": [
      "crypto/asn1/asn1_err.c",
      "crypto/asn1/tasn_dec.c",
      "crypto/err/openssl.txt",
      "include/openssl/asn1err.h"
    ],
    "message": "Limit ASN.1 constructed types recursive definition depth\n\nConstructed types with a recursive definition (such as can be found in\nPKCS7) could eventually exceed the stack given malicious input with\nexcessive recursion. Therefore we limit the stack depth.\n\nCVE-2018-0739\n\nCredit to OSSFuzz for finding this issue.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/asn1/asn1_err.c||crypto/asn1/asn1_err.c",
      "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c",
      "include/openssl/asn1err.h||include/openssl/asn1err.h"
    ]
  },
  "patch_diff": {
    "crypto/asn1/asn1_err.c||crypto/asn1/asn1_err.c": [
      "File: crypto/asn1/asn1_err.c -> crypto/asn1/asn1_err.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "246:     {ERR_PACK(ERR_LIB_ASN1, 0, ASN1_R_MSTRING_WRONG_TAG), \"mstring wrong tag\"},",
      "247:     {ERR_PACK(ERR_LIB_ASN1, 0, ASN1_R_NESTED_ASN1_STRING),",
      "248:     \"nested asn1 string\"},",
      "249:     {ERR_PACK(ERR_LIB_ASN1, 0, ASN1_R_NON_HEX_CHARACTERS),",
      "250:     \"non hex characters\"},",
      "251:     {ERR_PACK(ERR_LIB_ASN1, 0, ASN1_R_NOT_ASCII_FORMAT), \"not ascii format\"},",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "249:     {ERR_PACK(ERR_LIB_ASN1, 0, ASN1_R_NESTED_TOO_DEEP), \"nested too deep\"},",
      "",
      "---------------"
    ],
    "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c": [
      "File: crypto/asn1/tasn_dec.c -> crypto/asn1/tasn_dec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: #include \"internal/numbers.h\"",
      "18: #include \"asn1_locl.h\"",
      "20: static int asn1_item_embed_d2i(ASN1_VALUE **pval, const unsigned char **in,",
      "21:                                long len, const ASN1_ITEM *it,",
      "24: static int asn1_check_eoc(const unsigned char **in, long len);",
      "25: static int asn1_find_end(const unsigned char **in, long len, char inf);",
      "",
      "[Removed Lines]",
      "22:                                int tag, int aclass, char opt, ASN1_TLC *ctx);",
      "",
      "[Added Lines]",
      "27: #define ASN1_MAX_CONSTRUCTED_NEST 30",
      "31:                                int tag, int aclass, char opt, ASN1_TLC *ctx,",
      "32:                                int depth);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "37: static int asn1_template_ex_d2i(ASN1_VALUE **pval,",
      "38:                                 const unsigned char **in, long len,",
      "39:                                 const ASN1_TEMPLATE *tt, char opt,",
      "41: static int asn1_template_noexp_d2i(ASN1_VALUE **val,",
      "42:                                    const unsigned char **in, long len,",
      "43:                                    const ASN1_TEMPLATE *tt, char opt,",
      "45: static int asn1_d2i_ex_primitive(ASN1_VALUE **pval,",
      "46:                                  const unsigned char **in, long len,",
      "47:                                  const ASN1_ITEM *it,",
      "",
      "[Removed Lines]",
      "40:                                 ASN1_TLC *ctx);",
      "44:                                    ASN1_TLC *ctx);",
      "",
      "[Added Lines]",
      "50:                                 ASN1_TLC *ctx, int depth);",
      "54:                                    ASN1_TLC *ctx, int depth);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "111:                      int tag, int aclass, char opt, ASN1_TLC *ctx)",
      "112: {",
      "113:     int rv;",
      "115:     if (rv <= 0)",
      "116:         ASN1_item_ex_free(pval, it);",
      "117:     return rv;",
      "",
      "[Removed Lines]",
      "114:     rv = asn1_item_embed_d2i(pval, in, len, it, tag, aclass, opt, ctx);",
      "",
      "[Added Lines]",
      "124:     rv = asn1_item_embed_d2i(pval, in, len, it, tag, aclass, opt, ctx, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "125: static int asn1_item_embed_d2i(ASN1_VALUE **pval, const unsigned char **in,",
      "126:                                long len, const ASN1_ITEM *it,",
      "128: {",
      "129:     const ASN1_TEMPLATE *tt, *errtt = NULL;",
      "130:     const ASN1_EXTERN_FUNCS *ef;",
      "",
      "[Removed Lines]",
      "127:                                int tag, int aclass, char opt, ASN1_TLC *ctx)",
      "",
      "[Added Lines]",
      "137:                                int tag, int aclass, char opt, ASN1_TLC *ctx,",
      "138:                                int depth)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "145:     else",
      "146:         asn1_cb = 0;",
      "148:     switch (it->itype) {",
      "149:     case ASN1_ITYPE_PRIMITIVE:",
      "150:         if (it->templates) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "159:     if (++depth > ASN1_MAX_CONSTRUCTED_NEST) {",
      "160:         ASN1err(ASN1_F_ASN1_ITEM_EMBED_D2I, ASN1_R_NESTED_TOO_DEEP);",
      "161:         goto err;",
      "162:     }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "160:                 goto err;",
      "161:             }",
      "162:             return asn1_template_ex_d2i(pval, in, len,",
      "164:         }",
      "165:         return asn1_d2i_ex_primitive(pval, in, len, it,",
      "166:                                      tag, aclass, opt, ctx);",
      "",
      "[Removed Lines]",
      "163:                                         it->templates, opt, ctx);",
      "",
      "[Added Lines]",
      "179:                                         it->templates, opt, ctx, depth);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "226:             if (ret == -1)",
      "227:                 continue;",
      "",
      "[Removed Lines]",
      "224:             ret = asn1_template_ex_d2i(pchptr, &p, len, tt, 1, ctx);",
      "",
      "[Added Lines]",
      "240:             ret = asn1_template_ex_d2i(pchptr, &p, len, tt, 1, ctx, depth);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "348:             if (!ret) {",
      "349:                 errtt = seqtt;",
      "350:                 goto err;",
      "",
      "[Removed Lines]",
      "347:             ret = asn1_template_ex_d2i(pseqval, &p, len, seqtt, isopt, ctx);",
      "",
      "[Added Lines]",
      "363:             ret = asn1_template_ex_d2i(pseqval, &p, len, seqtt, isopt, ctx,",
      "364:                                        depth);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "420: static int asn1_template_ex_d2i(ASN1_VALUE **val,",
      "421:                                 const unsigned char **in, long inlen,",
      "422:                                 const ASN1_TEMPLATE *tt, char opt,",
      "424: {",
      "425:     int flags, aclass;",
      "426:     int ret;",
      "",
      "[Removed Lines]",
      "423:                                 ASN1_TLC *ctx)",
      "",
      "[Added Lines]",
      "440:                                 ASN1_TLC *ctx, int depth)",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:             return 0;",
      "456:         }",
      "459:         if (!ret) {",
      "460:             ASN1err(ASN1_F_ASN1_TEMPLATE_EX_D2I, ERR_R_NESTED_ASN1_ERROR);",
      "461:             return 0;",
      "",
      "[Removed Lines]",
      "458:         ret = asn1_template_noexp_d2i(val, &p, len, tt, 0, ctx);",
      "",
      "[Added Lines]",
      "475:         ret = asn1_template_noexp_d2i(val, &p, len, tt, 0, ctx, depth);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "479:             }",
      "480:         }",
      "481:     } else",
      "485:     return 1;",
      "",
      "[Removed Lines]",
      "482:         return asn1_template_noexp_d2i(val, in, inlen, tt, opt, ctx);",
      "",
      "[Added Lines]",
      "499:         return asn1_template_noexp_d2i(val, in, inlen, tt, opt, ctx, depth);",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "491: static int asn1_template_noexp_d2i(ASN1_VALUE **val,",
      "492:                                    const unsigned char **in, long len,",
      "493:                                    const ASN1_TEMPLATE *tt, char opt,",
      "495: {",
      "496:     int flags, aclass;",
      "497:     int ret;",
      "",
      "[Removed Lines]",
      "494:                                    ASN1_TLC *ctx)",
      "",
      "[Added Lines]",
      "511:                                    ASN1_TLC *ctx, int depth)",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "573:             }",
      "574:             skfield = NULL;",
      "575:             if (!asn1_item_embed_d2i(&skfield, &p, len,",
      "577:                 ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I,",
      "578:                         ERR_R_NESTED_ASN1_ERROR);",
      "",
      "[Removed Lines]",
      "576:                                      ASN1_ITEM_ptr(tt->item), -1, 0, 0, ctx)) {",
      "",
      "[Added Lines]",
      "593:                                      ASN1_ITEM_ptr(tt->item), -1, 0, 0, ctx,",
      "594:                                      depth)) {",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "596:         ret = asn1_item_embed_d2i(val, &p, len,",
      "597:                                   ASN1_ITEM_ptr(tt->item), tt->tag, aclass, opt,",
      "599:         if (!ret) {",
      "600:             ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I, ERR_R_NESTED_ASN1_ERROR);",
      "601:             goto err;",
      "",
      "[Removed Lines]",
      "598:                                   ctx);",
      "",
      "[Added Lines]",
      "616:                                   ctx, depth);",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "604:     } else {",
      "606:         ret = asn1_item_embed_d2i(val, &p, len, ASN1_ITEM_ptr(tt->item),",
      "608:         if (!ret) {",
      "609:             ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I, ERR_R_NESTED_ASN1_ERROR);",
      "610:             goto err;",
      "",
      "[Removed Lines]",
      "607:                                   -1, 0, opt, ctx);",
      "",
      "[Added Lines]",
      "625:                                   -1, 0, opt, ctx, depth);",
      "",
      "---------------"
    ],
    "include/openssl/asn1err.h||include/openssl/asn1err.h": [
      "File: include/openssl/asn1err.h -> include/openssl/asn1err.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "191: # define ASN1_R_MSTRING_NOT_UNIVERSAL                     139",
      "192: # define ASN1_R_MSTRING_WRONG_TAG                         140",
      "193: # define ASN1_R_NESTED_ASN1_STRING                        197",
      "194: # define ASN1_R_NON_HEX_CHARACTERS                        141",
      "195: # define ASN1_R_NOT_ASCII_FORMAT                          190",
      "196: # define ASN1_R_NOT_ENOUGH_DATA                           142",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "194: # define ASN1_R_NESTED_TOO_DEEP                           201",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2ac4c6f7b2b2af20c0e2b0ba05367e454cd11b33",
      "candidate_info": {
        "commit_hash": "2ac4c6f7b2b2af20c0e2b0ba05367e454cd11b33",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/2ac4c6f7b2b2af20c0e2b0ba05367e454cd11b33",
        "files": [
          "crypto/asn1/asn1_err.c",
          "crypto/asn1/tasn_dec.c",
          "include/openssl/asn1.h"
        ],
        "message": "Limit ASN.1 constructed types recursive definition depth\n\nConstructed types with a recursive definition (such as can be found in\nPKCS7) could eventually exceed the stack given malicious input with\nexcessive recursion. Therefore we limit the stack depth.\n\nCVE-2018-0739\n\nCredit to OSSFuzz for finding this issue.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/asn1_err.c||crypto/asn1/asn1_err.c",
          "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c",
          "include/openssl/asn1.h||include/openssl/asn1.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/asn1_err.c||crypto/asn1/asn1_err.c",
            "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
          ],
          "candidate": [
            "crypto/asn1/asn1_err.c||crypto/asn1/asn1_err.c",
            "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/asn1_err.c||crypto/asn1/asn1_err.c": [
          "File: crypto/asn1/asn1_err.c -> crypto/asn1/asn1_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "203:     {ERR_REASON(ASN1_R_MSTRING_NOT_UNIVERSAL), \"mstring not universal\"},",
          "204:     {ERR_REASON(ASN1_R_MSTRING_WRONG_TAG), \"mstring wrong tag\"},",
          "205:     {ERR_REASON(ASN1_R_NESTED_ASN1_STRING), \"nested asn1 string\"},",
          "206:     {ERR_REASON(ASN1_R_NON_HEX_CHARACTERS), \"non hex characters\"},",
          "207:     {ERR_REASON(ASN1_R_NOT_ASCII_FORMAT), \"not ascii format\"},",
          "208:     {ERR_REASON(ASN1_R_NOT_ENOUGH_DATA), \"not enough data\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:     {ERR_REASON(ASN1_R_NESTED_TOO_DEEP), \"nested too deep\"},",
          "",
          "---------------"
        ],
        "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c": [
          "File: crypto/asn1/tasn_dec.c -> crypto/asn1/tasn_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include \"internal/numbers.h\"",
          "18: #include \"asn1_locl.h\"",
          "20: static int asn1_item_embed_d2i(ASN1_VALUE **pval, const unsigned char **in,",
          "21:                                long len, const ASN1_ITEM *it,",
          "24: static int asn1_check_eoc(const unsigned char **in, long len);",
          "25: static int asn1_find_end(const unsigned char **in, long len, char inf);",
          "",
          "[Removed Lines]",
          "22:                                int tag, int aclass, char opt, ASN1_TLC *ctx);",
          "",
          "[Added Lines]",
          "26: #define ASN1_MAX_CONSTRUCTED_NEST 30",
          "30:                                int tag, int aclass, char opt, ASN1_TLC *ctx,",
          "31:                                int depth);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: static int asn1_template_ex_d2i(ASN1_VALUE **pval,",
          "38:                                 const unsigned char **in, long len,",
          "39:                                 const ASN1_TEMPLATE *tt, char opt,",
          "41: static int asn1_template_noexp_d2i(ASN1_VALUE **val,",
          "42:                                    const unsigned char **in, long len,",
          "43:                                    const ASN1_TEMPLATE *tt, char opt,",
          "45: static int asn1_d2i_ex_primitive(ASN1_VALUE **pval,",
          "46:                                  const unsigned char **in, long len,",
          "47:                                  const ASN1_ITEM *it,",
          "",
          "[Removed Lines]",
          "40:                                 ASN1_TLC *ctx);",
          "44:                                    ASN1_TLC *ctx);",
          "",
          "[Added Lines]",
          "49:                                 ASN1_TLC *ctx, int depth);",
          "53:                                    ASN1_TLC *ctx, int depth);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "111:                      int tag, int aclass, char opt, ASN1_TLC *ctx)",
          "112: {",
          "113:     int rv;",
          "115:     if (rv <= 0)",
          "116:         ASN1_item_ex_free(pval, it);",
          "117:     return rv;",
          "",
          "[Removed Lines]",
          "114:     rv = asn1_item_embed_d2i(pval, in, len, it, tag, aclass, opt, ctx);",
          "",
          "[Added Lines]",
          "123:     rv = asn1_item_embed_d2i(pval, in, len, it, tag, aclass, opt, ctx, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "125: static int asn1_item_embed_d2i(ASN1_VALUE **pval, const unsigned char **in,",
          "126:                                long len, const ASN1_ITEM *it,",
          "128: {",
          "129:     const ASN1_TEMPLATE *tt, *errtt = NULL;",
          "130:     const ASN1_EXTERN_FUNCS *ef;",
          "",
          "[Removed Lines]",
          "127:                                int tag, int aclass, char opt, ASN1_TLC *ctx)",
          "",
          "[Added Lines]",
          "136:                                int tag, int aclass, char opt, ASN1_TLC *ctx,",
          "137:                                int depth)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "145:     else",
          "146:         asn1_cb = 0;",
          "148:     switch (it->itype) {",
          "149:     case ASN1_ITYPE_PRIMITIVE:",
          "150:         if (it->templates) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:     if (++depth > ASN1_MAX_CONSTRUCTED_NEST) {",
          "159:         ASN1err(ASN1_F_ASN1_ITEM_EMBED_D2I, ASN1_R_NESTED_TOO_DEEP);",
          "160:         goto err;",
          "161:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "160:                 goto err;",
          "161:             }",
          "162:             return asn1_template_ex_d2i(pval, in, len,",
          "164:         }",
          "165:         return asn1_d2i_ex_primitive(pval, in, len, it,",
          "166:                                      tag, aclass, opt, ctx);",
          "",
          "[Removed Lines]",
          "163:                                         it->templates, opt, ctx);",
          "",
          "[Added Lines]",
          "178:                                         it->templates, opt, ctx, depth);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "226:             if (ret == -1)",
          "227:                 continue;",
          "",
          "[Removed Lines]",
          "224:             ret = asn1_template_ex_d2i(pchptr, &p, len, tt, 1, ctx);",
          "",
          "[Added Lines]",
          "239:             ret = asn1_template_ex_d2i(pchptr, &p, len, tt, 1, ctx, depth);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "348:             if (!ret) {",
          "349:                 errtt = seqtt;",
          "350:                 goto err;",
          "",
          "[Removed Lines]",
          "347:             ret = asn1_template_ex_d2i(pseqval, &p, len, seqtt, isopt, ctx);",
          "",
          "[Added Lines]",
          "362:             ret = asn1_template_ex_d2i(pseqval, &p, len, seqtt, isopt, ctx,",
          "363:                                        depth);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "420: static int asn1_template_ex_d2i(ASN1_VALUE **val,",
          "421:                                 const unsigned char **in, long inlen,",
          "422:                                 const ASN1_TEMPLATE *tt, char opt,",
          "424: {",
          "425:     int flags, aclass;",
          "426:     int ret;",
          "",
          "[Removed Lines]",
          "423:                                 ASN1_TLC *ctx)",
          "",
          "[Added Lines]",
          "439:                                 ASN1_TLC *ctx, int depth)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "455:             return 0;",
          "456:         }",
          "459:         if (!ret) {",
          "460:             ASN1err(ASN1_F_ASN1_TEMPLATE_EX_D2I, ERR_R_NESTED_ASN1_ERROR);",
          "461:             return 0;",
          "",
          "[Removed Lines]",
          "458:         ret = asn1_template_noexp_d2i(val, &p, len, tt, 0, ctx);",
          "",
          "[Added Lines]",
          "474:         ret = asn1_template_noexp_d2i(val, &p, len, tt, 0, ctx, depth);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "479:             }",
          "480:         }",
          "481:     } else",
          "485:     return 1;",
          "",
          "[Removed Lines]",
          "482:         return asn1_template_noexp_d2i(val, in, inlen, tt, opt, ctx);",
          "",
          "[Added Lines]",
          "498:         return asn1_template_noexp_d2i(val, in, inlen, tt, opt, ctx, depth);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "491: static int asn1_template_noexp_d2i(ASN1_VALUE **val,",
          "492:                                    const unsigned char **in, long len,",
          "493:                                    const ASN1_TEMPLATE *tt, char opt,",
          "495: {",
          "496:     int flags, aclass;",
          "497:     int ret;",
          "",
          "[Removed Lines]",
          "494:                                    ASN1_TLC *ctx)",
          "",
          "[Added Lines]",
          "510:                                    ASN1_TLC *ctx, int depth)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "573:             }",
          "574:             skfield = NULL;",
          "575:             if (!asn1_item_embed_d2i(&skfield, &p, len,",
          "577:                 ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I,",
          "578:                         ERR_R_NESTED_ASN1_ERROR);",
          "",
          "[Removed Lines]",
          "576:                                      ASN1_ITEM_ptr(tt->item), -1, 0, 0, ctx)) {",
          "",
          "[Added Lines]",
          "592:                                      ASN1_ITEM_ptr(tt->item), -1, 0, 0, ctx,",
          "593:                                      depth)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "596:         ret = asn1_item_embed_d2i(val, &p, len,",
          "597:                                   ASN1_ITEM_ptr(tt->item), tt->tag, aclass, opt,",
          "599:         if (!ret) {",
          "600:             ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I, ERR_R_NESTED_ASN1_ERROR);",
          "601:             goto err;",
          "",
          "[Removed Lines]",
          "598:                                   ctx);",
          "",
          "[Added Lines]",
          "615:                                   ctx, depth);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "604:     } else {",
          "606:         ret = asn1_item_embed_d2i(val, &p, len, ASN1_ITEM_ptr(tt->item),",
          "608:         if (!ret) {",
          "609:             ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I, ERR_R_NESTED_ASN1_ERROR);",
          "610:             goto err;",
          "",
          "[Removed Lines]",
          "607:                                   -1, 0, opt, ctx);",
          "",
          "[Added Lines]",
          "624:                                   -1, 0, opt, ctx, depth);",
          "",
          "---------------"
        ],
        "include/openssl/asn1.h||include/openssl/asn1.h": [
          "File: include/openssl/asn1.h -> include/openssl/asn1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1051: # define ASN1_R_MSTRING_NOT_UNIVERSAL                     139",
          "1052: # define ASN1_R_MSTRING_WRONG_TAG                         140",
          "1053: # define ASN1_R_NESTED_ASN1_STRING                        197",
          "1054: # define ASN1_R_NON_HEX_CHARACTERS                        141",
          "1055: # define ASN1_R_NOT_ASCII_FORMAT                          190",
          "1056: # define ASN1_R_NOT_ENOUGH_DATA                           142",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1054: # define ASN1_R_NESTED_TOO_DEEP                           201",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9310d45087ae546e27e61ddf8f6367f29848220d",
      "candidate_info": {
        "commit_hash": "9310d45087ae546e27e61ddf8f6367f29848220d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9310d45087ae546e27e61ddf8f6367f29848220d",
        "files": [
          "crypto/asn1/asn1.h",
          "crypto/asn1/asn1_err.c",
          "crypto/asn1/tasn_dec.c"
        ],
        "message": "Limit ASN.1 constructed types recursive definition depth\n\nConstructed types with a recursive definition (such as can be found in\nPKCS7) could eventually exceed the stack given malicious input with\nexcessive recursion. Therefore we limit the stack depth.\n\nCVE-2018-0739\n\nCredit to OSSFuzz for finding this issue.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "crypto/asn1/asn1.h||crypto/asn1/asn1.h",
          "crypto/asn1/asn1_err.c||crypto/asn1/asn1_err.c",
          "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "crypto/asn1/asn1_err.c||crypto/asn1/asn1_err.c",
            "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
          ],
          "candidate": [
            "crypto/asn1/asn1_err.c||crypto/asn1/asn1_err.c",
            "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/asn1/asn1.h||crypto/asn1/asn1.h": [
          "File: crypto/asn1/asn1.h -> crypto/asn1/asn1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1365: # define ASN1_R_MSTRING_NOT_UNIVERSAL                     139",
          "1366: # define ASN1_R_MSTRING_WRONG_TAG                         140",
          "1367: # define ASN1_R_NESTED_ASN1_STRING                        197",
          "1368: # define ASN1_R_NON_HEX_CHARACTERS                        141",
          "1369: # define ASN1_R_NOT_ASCII_FORMAT                          190",
          "1370: # define ASN1_R_NOT_ENOUGH_DATA                           142",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1368: # define ASN1_R_NESTED_TOO_DEEP                           219",
          "",
          "---------------"
        ],
        "crypto/asn1/asn1_err.c||crypto/asn1/asn1_err.c": [
          "File: crypto/asn1/asn1_err.c -> crypto/asn1/asn1_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:     {ERR_REASON(ASN1_R_MSTRING_NOT_UNIVERSAL), \"mstring not universal\"},",
          "280:     {ERR_REASON(ASN1_R_MSTRING_WRONG_TAG), \"mstring wrong tag\"},",
          "281:     {ERR_REASON(ASN1_R_NESTED_ASN1_STRING), \"nested asn1 string\"},",
          "282:     {ERR_REASON(ASN1_R_NON_HEX_CHARACTERS), \"non hex characters\"},",
          "283:     {ERR_REASON(ASN1_R_NOT_ASCII_FORMAT), \"not ascii format\"},",
          "284:     {ERR_REASON(ASN1_R_NOT_ENOUGH_DATA), \"not enough data\"},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "282:     {ERR_REASON(ASN1_R_NESTED_TOO_DEEP), \"nested too deep\"},",
          "",
          "---------------"
        ],
        "crypto/asn1/tasn_dec.c||crypto/asn1/tasn_dec.c": [
          "File: crypto/asn1/tasn_dec.c -> crypto/asn1/tasn_dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65: #include <openssl/buffer.h>",
          "66: #include <openssl/err.h>",
          "68: static int asn1_check_eoc(const unsigned char **in, long len);",
          "69: static int asn1_find_end(const unsigned char **in, long len, char inf);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "74: #define ASN1_MAX_CONSTRUCTED_NEST 30",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: static int asn1_template_ex_d2i(ASN1_VALUE **pval,",
          "82:                                 const unsigned char **in, long len,",
          "83:                                 const ASN1_TEMPLATE *tt, char opt,",
          "85: static int asn1_template_noexp_d2i(ASN1_VALUE **val,",
          "86:                                    const unsigned char **in, long len,",
          "87:                                    const ASN1_TEMPLATE *tt, char opt,",
          "89: static int asn1_d2i_ex_primitive(ASN1_VALUE **pval,",
          "90:                                  const unsigned char **in, long len,",
          "91:                                  const ASN1_ITEM *it,",
          "",
          "[Removed Lines]",
          "84:                                 ASN1_TLC *ctx);",
          "88:                                    ASN1_TLC *ctx);",
          "",
          "[Added Lines]",
          "92:                                 ASN1_TLC *ctx, int depth);",
          "96:                                    ASN1_TLC *ctx, int depth);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154: {",
          "155:     ASN1_TLC c;",
          "156:     asn1_tlc_clear_nc(&c);",
          "158: }",
          "168: {",
          "169:     const ASN1_TEMPLATE *tt, *errtt = NULL;",
          "170:     const ASN1_COMPAT_FUNCS *cf;",
          "",
          "[Removed Lines]",
          "157:     return asn1_template_ex_d2i(pval, in, len, tt, 0, &c);",
          "165: int ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,",
          "166:                      const ASN1_ITEM *it,",
          "167:                      int tag, int aclass, char opt, ASN1_TLC *ctx)",
          "",
          "[Added Lines]",
          "165:     return asn1_template_ex_d2i(pval, in, len, tt, 0, &c, 0);",
          "172: static int asn1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in,",
          "173:                             long len, const ASN1_ITEM *it, int tag, int aclass,",
          "174:                             char opt, ASN1_TLC *ctx, int depth)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "189:     else",
          "190:         asn1_cb = 0;",
          "192:     switch (it->itype) {",
          "193:     case ASN1_ITYPE_PRIMITIVE:",
          "194:         if (it->templates) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:     if (++depth > ASN1_MAX_CONSTRUCTED_NEST) {",
          "200:         ASN1err(ASN1_F_ASN1_ITEM_EX_D2I, ASN1_R_NESTED_TOO_DEEP);",
          "201:         goto err;",
          "202:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "204:                 goto err;",
          "205:             }",
          "206:             return asn1_template_ex_d2i(pval, in, len,",
          "208:         }",
          "209:         return asn1_d2i_ex_primitive(pval, in, len, it,",
          "210:                                      tag, aclass, opt, ctx);",
          "",
          "[Removed Lines]",
          "207:                                         it->templates, opt, ctx);",
          "",
          "[Added Lines]",
          "219:                                         it->templates, opt, ctx, depth);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "331:             if (ret == -1)",
          "332:                 continue;",
          "",
          "[Removed Lines]",
          "329:             ret = asn1_template_ex_d2i(pchptr, &p, len, tt, 1, ctx);",
          "",
          "[Added Lines]",
          "341:             ret = asn1_template_ex_d2i(pchptr, &p, len, tt, 1, ctx, depth);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "448:             if (!ret) {",
          "449:                 errtt = seqtt;",
          "450:                 goto err;",
          "",
          "[Removed Lines]",
          "447:             ret = asn1_template_ex_d2i(pseqval, &p, len, seqtt, isopt, ctx);",
          "",
          "[Added Lines]",
          "459:             ret = asn1_template_ex_d2i(pseqval, &p, len, seqtt, isopt, ctx,",
          "460:                                        depth);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "514:     return 0;",
          "515: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530: int ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,",
          "531:                      const ASN1_ITEM *it,",
          "532:                      int tag, int aclass, char opt, ASN1_TLC *ctx)",
          "533: {",
          "534:     return asn1_item_ex_d2i(pval, in, len, it, tag, aclass, opt, ctx, 0);",
          "535: }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "522: static int asn1_template_ex_d2i(ASN1_VALUE **val,",
          "523:                                 const unsigned char **in, long inlen,",
          "524:                                 const ASN1_TEMPLATE *tt, char opt,",
          "526: {",
          "527:     int flags, aclass;",
          "528:     int ret;",
          "",
          "[Removed Lines]",
          "525:                                 ASN1_TLC *ctx)",
          "",
          "[Added Lines]",
          "545:                                 ASN1_TLC *ctx, int depth)",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "557:             return 0;",
          "558:         }",
          "561:         if (!ret) {",
          "562:             ASN1err(ASN1_F_ASN1_TEMPLATE_EX_D2I, ERR_R_NESTED_ASN1_ERROR);",
          "563:             return 0;",
          "",
          "[Removed Lines]",
          "560:         ret = asn1_template_noexp_d2i(val, &p, len, tt, 0, ctx);",
          "",
          "[Added Lines]",
          "580:         ret = asn1_template_noexp_d2i(val, &p, len, tt, 0, ctx, depth);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "581:             }",
          "582:         }",
          "583:     } else",
          "587:     return 1;",
          "",
          "[Removed Lines]",
          "584:         return asn1_template_noexp_d2i(val, in, inlen, tt, opt, ctx);",
          "",
          "[Added Lines]",
          "604:         return asn1_template_noexp_d2i(val, in, inlen, tt, opt, ctx, depth);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "594: static int asn1_template_noexp_d2i(ASN1_VALUE **val,",
          "595:                                    const unsigned char **in, long len,",
          "596:                                    const ASN1_TEMPLATE *tt, char opt,",
          "598: {",
          "599:     int flags, aclass;",
          "600:     int ret;",
          "",
          "[Removed Lines]",
          "597:                                    ASN1_TLC *ctx)",
          "",
          "[Added Lines]",
          "617:                                    ASN1_TLC *ctx, int depth)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "665:                 break;",
          "666:             }",
          "667:             skfield = NULL;",
          "670:                 ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I,",
          "671:                         ERR_R_NESTED_ASN1_ERROR);",
          "672:                 goto err;",
          "",
          "[Removed Lines]",
          "668:             if (!ASN1_item_ex_d2i(&skfield, &p, len,",
          "669:                                   ASN1_ITEM_ptr(tt->item), -1, 0, 0, ctx)) {",
          "",
          "[Added Lines]",
          "688:             if (!asn1_item_ex_d2i(&skfield, &p, len, ASN1_ITEM_ptr(tt->item),",
          "689:                                   -1, 0, 0, ctx, depth)) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "684:         }",
          "685:     } else if (flags & ASN1_TFLG_IMPTAG) {",
          "690:         if (!ret) {",
          "691:             ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I, ERR_R_NESTED_ASN1_ERROR);",
          "692:             goto err;",
          "",
          "[Removed Lines]",
          "687:         ret = ASN1_item_ex_d2i(val, &p, len,",
          "688:                                ASN1_ITEM_ptr(tt->item), tt->tag, aclass, opt,",
          "689:                                ctx);",
          "",
          "[Added Lines]",
          "707:         ret = asn1_item_ex_d2i(val, &p, len, ASN1_ITEM_ptr(tt->item), tt->tag,",
          "708:                                aclass, opt, ctx, depth);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "694:             return -1;",
          "695:     } else {",
          "699:         if (!ret) {",
          "700:             ASN1err(ASN1_F_ASN1_TEMPLATE_NOEXP_D2I, ERR_R_NESTED_ASN1_ERROR);",
          "701:             goto err;",
          "",
          "[Removed Lines]",
          "697:         ret = ASN1_item_ex_d2i(val, &p, len, ASN1_ITEM_ptr(tt->item),",
          "698:                                -1, tt->flags & ASN1_TFLG_COMBINE, opt, ctx);",
          "",
          "[Added Lines]",
          "716:         ret = asn1_item_ex_d2i(val, &p, len, ASN1_ITEM_ptr(tt->item),",
          "717:                                -1, tt->flags & ASN1_TFLG_COMBINE, opt, ctx,",
          "718:                                depth);",
          "",
          "---------------"
        ]
      }
    }
  ]
}