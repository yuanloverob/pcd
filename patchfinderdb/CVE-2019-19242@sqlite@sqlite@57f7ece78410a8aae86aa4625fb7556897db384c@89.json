{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "41e0717bcb409de9ec296c3215b572dfab2697c9",
      "candidate_info": {
        "commit_hash": "41e0717bcb409de9ec296c3215b572dfab2697c9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/41e0717bcb409de9ec296c3215b572dfab2697c9",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/resetdb.test"
        ],
        "message": "Update test file \"resetdb.test\" so that it works with the \"prepare\" permutation.\n\nFossilOrigin-Name: 95d338124be2e0e18f17354b28f4320336202f1a4ec1177df753b2800e954bfb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/resetdb.test||test/resetdb.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2c8769c69f301307db6663adb8b7c0b89f5959516bf6110cb8ff4b21bd903f70",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/resetdb.test||test/resetdb.test": [
          "File: test/resetdb.test -> test/resetdb.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   db eval VACUUM",
          "84:   sqlite3_db_config db RESET_DB 0",
          "86:   # Verify that the reset took, even on the separate database connection",
          "87:   catchsql {",
          "88:      PRAGMA page_count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:   # If using sqlite3_prepare() instead of _v2() or _v3(), the block",
          "87:   # below raises an SQLITE_SCHEMA error. The following fixes this.",
          "88:   if {[permutation]==\"prepare\"} { catchsql \"SELECT * FROM sqlite_master\" db2 }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b63d6070ee83ea13f35bee56d32fca574a1c6151",
      "candidate_info": {
        "commit_hash": "b63d6070ee83ea13f35bee56d32fca574a1c6151",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b63d6070ee83ea13f35bee56d32fca574a1c6151",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix an assert() in fts5 that could fail with a corrupt database.\n\nFossilOrigin-Name: 83935b950619855fb3bf05486091804ac2a61fb993c6ec826c89f943264fabc3",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3578: #ifdef SQLITE_DEBUG",
          "3579:       for(iLvl=0; iLvl<pStruct->nLevel; iLvl++){",
          "3580:         for(iSeg=0; iSeg<pStruct->aLevel[iLvl].nSeg; iSeg++){",
          "3582:         }",
          "3583:       }",
          "3586:       {",
          "3587:         sqlite3_stmt *pIdxSelect = fts5IdxSelectStmt(p);",
          "",
          "[Removed Lines]",
          "3581:           assert( iSegid!=pStruct->aLevel[iLvl].aSeg[iSeg].iSegid );",
          "3584:       assert( iSegid>0 && iSegid<=FTS5_MAX_SEGMENT );",
          "",
          "[Added Lines]",
          "3581:           assert_nc( iSegid!=pStruct->aLevel[iLvl].aSeg[iSeg].iSegid );",
          "3584:       assert_nc( iSegid>0 && iSegid<=FTS5_MAX_SEGMENT );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3589:           u8 aBlob[2] = {0xff, 0xff};",
          "3590:           sqlite3_bind_int(pIdxSelect, 1, iSegid);",
          "3591:           sqlite3_bind_blob(pIdxSelect, 2, aBlob, 2, SQLITE_STATIC);",
          "3593:           p->rc = sqlite3_reset(pIdxSelect);",
          "3594:           sqlite3_bind_null(pIdxSelect, 2);",
          "3595:         }",
          "",
          "[Removed Lines]",
          "3592:           assert( sqlite3_step(pIdxSelect)!=SQLITE_ROW );",
          "",
          "[Added Lines]",
          "3592:           assert_nc( sqlite3_step(pIdxSelect)!=SQLITE_ROW );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "498: | end c9.db",
          "499:   }]",
          "500: } {}",
          "502: do_catchsql_test 10.1 {",
          "503:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "504: } {1 {database disk image is malformed}}",
          "506: sqlite3_fts5_may_be_corrupt 0",
          "507: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "505: #-------------------------------------------------------------------------",
          "506: #",
          "507: reset_db",
          "508: do_test 11.0 {",
          "509:   sqlite3 db {}",
          "510:   db deserialize [decode_hexdb {",
          "511: | size 28672 pagesize 4096 filename c10b.db",
          "512: | page 1 offset 0",
          "513: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "514: |     16: 10 00 01 01 00 40 20 20 00 00 00 01 00 00 00 07   .....@  ........",
          "515: |     32: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "516: |     48: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00   ................",
          "517: |     80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01   ................",
          "518: |     96: 00 2e 30 38 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ..08...........m",
          "519: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "520: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "521: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "522: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "523: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "524: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "525: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "526: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "527: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "528: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "529: |   3680: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "530: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "531: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "532: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "533: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "534: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "535: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "536: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "537: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "538: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "539: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "540: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "541: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "542: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "543: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "544: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "545: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "546: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "547: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "548: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "549: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 44 d9   (id INTEGER PRD.",
          "550: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "551: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "552: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "553: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "554: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "555: | page 2 offset 4096",
          "556: |      0: 0d 00 00 00 06 0f 59 00 0f e8 0f ef 0f bd 0f b0   ......Y.........",
          "557: |     16: 0f 73 0f 59 00 00 00 00 00 00 00 00 00 00 00 00   .s.Y............",
          "558: |   3920: 00 00 00 00 00 00 00 00 00 13 84 80 80 80 80 04   ................",
          "559: |   3936: 03 01 2a 0a 00 00 00 00 01 02 02 00 02 01 01 01   ..*.............",
          "560: |   3952: 02 01 01 36 84 80 80 80 80 03 03 05 66 00 40 00   ...6........f.@.",
          "561: |   3968: 00 00 01 00 00 00 29 07 30 61 63 74 69 76 65 04   ......).0active.",
          "562: |   3984: 02 02 02 03 74 6f 6d 06 02 02 05 02 69 63 07 02   ....tom.....ic..",
          "563: |   4000: 02 01 06 62 6f 6f 6d 65 72 05 02 02 04 0b 08 07   ...boomer.......",
          "564: |   4016: 06 84 80 80 80 80 02 03 01 10 01 07 07 24 84 80   .............$..",
          "565: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "566: |   4048: 63 6b 01 02 02 04 02 66 74 02 02 02 04 04 6e 64   ck.....ft.....nd",
          "567: |   4064: 6f 6e 03 02 02 04 0a 07 05 01 03 00 10 03 03 0f   on..............",
          "568: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 00 01 01 01 01   ...$............",
          "569: | page 3 offset 8192",
          "570: |      0: 0a 00 00 00 02 0f f3 00 0f fa 0f f3 00 00 00 00   ................",
          "571: |   4080: 00 00 00 06 04 01 0c 01 02 02 05 04 09 0c 01 02   ................",
          "572: | page 4 offset 12288",
          "573: |      0: 0d 00 00 00 07 0f b6 00 0f f6 0f ec 0f e0 0f d5   ................",
          "574: |     16: 0f ca 0f c1 0f b6 00 00 00 00 00 00 00 00 00 00   ................",
          "575: |   4016: 00 00 00 00 00 00 09 07 03 00 19 61 74 6f 6d 69   ...........atomi",
          "576: |   4032: 63 07 06 03 00 15 61 74 6f 6d 09 05 03 00 19 62   c.....atom.....b",
          "577: |   4048: 6f 6f 6d 65 72 09 04 03 00 19 61 63 74 69 76 65   oomer.....active",
          "578: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "579: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "580: | page 5 offset 16384",
          "581: |      0: 0d 00 00 00 07 0f d6 00 0f fa 0f f4 0f ee 0f e8   ................",
          "582: |     16: 0f e2 0f dc 0f d6 00 00 00 00 00 00 00 00 00 00   ................",
          "583: |   4048: 00 00 00 00 00 00 04 07 03 00 0e 01 04 06 03 00   ................",
          "584: |   4064: 0e 01 04 05 03 00 0e 01 04 04 03 00 0e 01 04 03   ................",
          "585: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "586: | page 6 offset 20480",
          "587: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "588: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "589: | page 7 offset 24576",
          "590: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "591: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "592: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "593: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "594: | end c10b.db",
          "595: }]} {}",
          "597: # This returns SQLITE_CONSTRAINT instead of SQLITE_CORRUPT. The problem is",
          "598: # that the corrupted structure-record leads fts5 to try to use a segment-id",
          "599: # that is already in use. This is caught by the PRIMARY KEY constraint on",
          "600: # the %_idx table.",
          "601: #",
          "602: do_catchsql_test 11.1 {",
          "603:   UPDATE t1 SET content='abc' WHERE content='boomer';",
          "604: } {1 {constraint failed}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3518c09b944c92974939b1de244401afd34de5d9aa75050e5ad55581a94e1e71",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6e015fab916454ddf425a8e72ecd4779debb697",
      "candidate_info": {
        "commit_hash": "f6e015fab916454ddf425a8e72ecd4779debb697",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f6e015fab916454ddf425a8e72ecd4779debb697",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/delete.c",
          "src/loadext.c"
        ],
        "message": "Fixes for SQLITE_OMIT_VIRTUAL_TABLE builds.\n\nFossilOrigin-Name: 9bcdec85e21a5228c700f7373b92ae7ea14b585bcda34235b605be4f7ec15a15",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/delete.c||src/delete.c",
          "src/loadext.c||src/loadext.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d362dedba3637013d654f2a890fc7b61476f2adeb6bf3bffb4e715c1d1d0b7c2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1899:   recomputeColumnsNotIndexed(pPk);",
          "1900: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1902: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1924:   if( pMod->pModule->xShadowName==0 ) return 0;",
          "1925:   return pMod->pModule->xShadowName(zTail+1);",
          "1926: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1928: #else",
          "1929: # define isShadowTableName(x,y) 0",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "70:     return sqlite3WritableSchema(db)==0 && pParse->nested==0;",
          "71:   }",
          "72:   assert( pTab->tabFlags & TF_Shadow );",
          "76: }",
          "",
          "[Removed Lines]",
          "73:   return (db->flags & SQLITE_Defensive)!=0",
          "74:            && db->nVdbeExec==0",
          "75:            && db->pVtabCtx==0;",
          "",
          "[Added Lines]",
          "73:   return (db->flags & SQLITE_Defensive)!=0",
          "74: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "75:           && db->pVtabCtx==0",
          "76: #endif",
          "77:           && db->nVdbeExec==0;",
          "",
          "---------------"
        ],
        "src/loadext.c||src/loadext.c": [
          "File: src/loadext.c -> src/loadext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "84: # define sqlite3_declare_vtab 0",
          "85: # define sqlite3_vtab_config 0",
          "86: # define sqlite3_vtab_on_conflict 0",
          "87: #endif",
          "89: #ifdef SQLITE_OMIT_SHARED_CACHE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: # define sqlite3_vtab_collation 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3dadac591ff43340db5421af23d05457fee4688",
      "candidate_info": {
        "commit_hash": "e3dadac591ff43340db5421af23d05457fee4688",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e3dadac591ff43340db5421af23d05457fee4688",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Stricter enforcement of cell sizes when doing balancing operations on the btree, in order to catch file corruption sooner.\n\nFossilOrigin-Name: 12713f320b2c1def273dd8b7833dddaaad5331aba779d4b1ec9aa949814f38fe",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 44ce8baa47192be03c8f11777904c3c07fa5cc5c97b6d8e81572d380995ac688",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6755: static int rebuildPage(",
          "6760: ){",
          "6763:   const int usableSize = pPg->pBt->usableSize;",
          "6764:   u8 * const pEnd = &aData[usableSize];",
          "6766:   u8 *pCellptr = pPg->aCellIdx;",
          "6767:   u8 *pTmp = sqlite3PagerTempSpace(pPg->pBt->pPager);",
          "6768:   u8 *pData;",
          "6773:   pData = pEnd;",
          "6776:     if( SQLITE_WITHIN(pCell,aData,pEnd) ){",
          "6778:       pCell = &pTmp[pCell - aData];",
          "6779:     }",
          "6781:     put2byte(pCellptr, (pData - aData));",
          "6782:     pCellptr += 2;",
          "6783:     if( pData < pCellptr ) return SQLITE_CORRUPT_BKPT;",
          "6787:   }",
          "",
          "[Removed Lines]",
          "6765:   int i;",
          "6770:   i = get2byte(&aData[hdr+5]);",
          "6771:   memcpy(&pTmp[i], &aData[i], usableSize - i);",
          "6774:   for(i=0; i<nCell; i++){",
          "6775:     u8 *pCell = apCell[i];",
          "6777:       if( ((uptr)(pCell+szCell[i]))>(uptr)pEnd ) return SQLITE_CORRUPT_BKPT;",
          "6780:     pData -= szCell[i];",
          "6784:     memcpy(pData, pCell, szCell[i]);",
          "6785:     assert( szCell[i]==pPg->xCellSize(pPg, pCell) || CORRUPT_DB );",
          "6786:     testcase( szCell[i]!=pPg->xCellSize(pPg,pCell) );",
          "",
          "[Added Lines]",
          "6839:   assert( i<iEnd );",
          "6840:   j = get2byte(&aData[hdr+5]);",
          "6841:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6843:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "6844:   pSrcEnd = pCArray->apEnd[k];",
          "6847:   while( 1/*exit by break*/ ){",
          "6848:     u8 *pCell = pCArray->apCell[i];",
          "6849:     u16 sz = pCArray->szCell[i];",
          "6850:     assert( sz>0 );",
          "6852:       if( ((uptr)(pCell+sz))>(uptr)pEnd ) return SQLITE_CORRUPT_BKPT;",
          "6854:     }else if( (uptr)(pCell+sz)>(uptr)pSrcEnd",
          "6855:            && (uptr)(pCell)<(uptr)pSrcEnd",
          "6856:     ){",
          "6857:       return SQLITE_CORRUPT_BKPT;",
          "6860:     pData -= sz;",
          "6864:     memcpy(pData, pCell, sz);",
          "6865:     assert( sz==pPg->xCellSize(pPg, pCell) || CORRUPT_DB );",
          "6866:     testcase( sz!=pPg->xCellSize(pPg,pCell) );",
          "6867:     i++;",
          "6868:     if( i>=iEnd ) break;",
          "6869:     if( pCArray->ixNx[k]<=i ){",
          "6870:       k++;",
          "6871:       pSrcEnd = pCArray->apEnd[k];",
          "6872:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6825: static int pageInsertArray(",
          "6833: ){",
          "6840:     int sz, rc;",
          "6841:     u8 *pSlot;",
          "6842:     sz = cachedCellSize(pCArray, i);",
          "",
          "[Removed Lines]",
          "6834:   int i;",
          "6835:   u8 *aData = pPg->aData;",
          "6836:   u8 *pData = *ppData;",
          "6837:   int iEnd = iFirst + nCell;",
          "6839:   for(i=iFirst; i<iEnd; i++){",
          "",
          "[Added Lines]",
          "6926:   if( iEnd<=iFirst ) return 0;",
          "6927:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "6928:   pEnd = pCArray->apEnd[k];",
          "6929:   while( 1 /*Exit by break*/ ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6851:     assert( (pSlot+sz)<=pCArray->apCell[i]",
          "6852:          || pSlot>=(pCArray->apCell[i]+sz)",
          "6853:          || CORRUPT_DB );",
          "6854:     memmove(pSlot, pCArray->apCell[i], sz);",
          "6855:     put2byte(pCellptr, (pSlot - aData));",
          "6856:     pCellptr += 2;",
          "6857:   }",
          "6859:   return 0;",
          "6860: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6944:     if( (uptr)(pCArray->apCell[i]+sz)>(uptr)pEnd",
          "6945:      && (uptr)(pCArray->apCell[i])<(uptr)pEnd",
          "6946:     ){",
          "6947:       assert( CORRUPT_DB );",
          "6948:       (void)SQLITE_CORRUPT_BKPT;",
          "6949:       return 1;",
          "6950:     }",
          "6954:     i++;",
          "6955:     if( i>=iEnd ) break;",
          "6956:     if( pCArray->ixNx[k]<=i ){",
          "6957:       k++;",
          "6958:       pEnd = pCArray->apEnd[k];",
          "6959:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7016:  editpage_fail:",
          "7018:   populateCellCache(pCArray, iNew, nNew);",
          "7020: }",
          "7038: #ifndef SQLITE_OMIT_QUICKBALANCE",
          "",
          "[Removed Lines]",
          "7019:   return rebuildPage(pPg, nNew, &pCArray->apCell[iNew], &pCArray->szCell[iNew]);",
          "",
          "[Added Lines]",
          "7122:   return rebuildPage(pCArray, iNew, nNew, pPg);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7083:     u8 *pCell = pPage->apOvfl[0];",
          "7084:     u16 szCell = pPage->xCellSize(pPage, pCell);",
          "7085:     u8 *pStop;",
          "7087:     assert( sqlite3PagerIswriteable(pNew->pDbPage) );",
          "7088:     assert( pPage->aData[0]==(PTF_INTKEY|PTF_LEAFDATA|PTF_LEAF) );",
          "7089:     zeroPage(pNew, PTF_INTKEY|PTF_LEAFDATA|PTF_LEAF);",
          "7092:     pNew->nFree = pBt->usableSize - pNew->cellOffset - 2 - szCell;",
          "",
          "[Removed Lines]",
          "7090:     rc = rebuildPage(pNew, 1, &pCell, &szCell);",
          "7091:     if( NEVER(rc) ) return rc;",
          "",
          "[Added Lines]",
          "7174:     CellArray b;",
          "7179:     b.nCell = 1;",
          "7180:     b.pRef = pPage;",
          "7181:     b.apCell = &pCell;",
          "7182:     b.szCell = &szCell;",
          "7183:     b.apEnd[0] = pPage->aDataEnd;",
          "7184:     b.ixNx[0] = 2;",
          "7185:     rc = rebuildPage(&b, 0, 1, pNew);",
          "7186:     if( NEVER(rc) ){",
          "7187:       releasePage(pNew);",
          "7188:       return rc;",
          "7189:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "7568:   usableSpace = pBt->usableSize - 12 + leafCorrection;",
          "7569:   for(i=0; i<nOld; i++){",
          "7570:     MemPage *p = apOld[i];",
          "7571:     szNew[i] = usableSpace - p->nFree;",
          "7572:     for(j=0; j<p->nOverflow; j++){",
          "7573:       szNew[i] += 2 + p->xCellSize(p, p->apOvfl[j]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7669:     b.apEnd[i*2] = p->aDataEnd;",
          "7670:     b.apEnd[i*2+1] = pParent->aDataEnd;",
          "7671:     b.ixNx[i*2] = cntOld[i];",
          "7672:     b.ixNx[i*2+1] = cntOld[i]+1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0bf6549cd184c58dc4b8867405c40bfda5ba75b1",
      "candidate_info": {
        "commit_hash": "0bf6549cd184c58dc4b8867405c40bfda5ba75b1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0bf6549cd184c58dc4b8867405c40bfda5ba75b1",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/minmax4.test"
        ],
        "message": "If a query like \"SELECT min(a), b FROM t1\" visits no rows where \"a\" is not null, extract a value for \"b\" from one of the rows where \"a\" is null. Fix for ticket [41866dc37].\n\nFossilOrigin-Name: faaaae4940b5f4f70e4988ad5b45582410b381ace0031e6abcde0b9217c06796",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/minmax4.test||test/minmax4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/wherecode.c||src/wherecode.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/wherecode.c||src/wherecode.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 961e2f08c35238bcb1d32430d16451a96807b2c4bbb194ee621128dd09cd3981",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1694:       VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1695:       VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1696:       VdbeCoverageIf(v, op==OP_SeekLT);  testcase( op==OP_SeekLT );",
          "1697:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1698:       if( bSeekPastNull && (pLoop->wsFlags & WHERE_TOP_LIMIT)==0 ){",
          "1704:         assert( startEq==0 && (op==OP_SeekGT || op==OP_SeekLT) );",
          "1705:         assert( (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)!=0 && pWInfo->nOBSat>0 );",
          "1706:         sqlite3VdbeChangeP2(v, -1, sqlite3VdbeCurrentAddr(v)+1);",
          "1707:         sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "1709:         op = aStartOp[(start_constraints<<2) + (1<<1) + bRev];",
          "1710:         assert( op!=0 );",
          "1711:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1712:         VdbeCoverage(v);",
          "1713:         VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1714:         VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1715:       }",
          "",
          "---------------"
        ],
        "test/minmax4.test||test/minmax4.test": [
          "File: test/minmax4.test -> test/minmax4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: set testdir [file dirname $argv0]",
          "21: source $testdir/tester.tcl",
          "23: ifcapable !compound {",
          "24:   finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: set testprefix minmax4",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "148:   }",
          "149: } {1 1 {} 2 2 2 3 3 5 5}",
          "153: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152: #-------------------------------------------------------------------------",
          "153: foreach {tn sql} {",
          "154:   1 { CREATE INDEX i1 ON t1(a) }",
          "155:   2 { CREATE INDEX i1 ON t1(a DESC) }",
          "156:   3 { }",
          "157: } {",
          "158:   reset_db",
          "159:   do_execsql_test 3.$tn.0 {",
          "160:     CREATE TABLE t1(a, b);",
          "161:     INSERT INTO t1 VALUES(NULL, 1);",
          "162:   }",
          "163:   execsql $sql",
          "164:   do_execsql_test 3.$tn.1 {",
          "165:     SELECT min(a), b FROM t1;",
          "166:   } {{} 1}",
          "167:   do_execsql_test 3.$tn.2 {",
          "168:     SELECT min(a), b FROM t1 WHERE a<50;",
          "169:   } {{} {}}",
          "170:   do_execsql_test 3.$tn.3 {",
          "171:     INSERT INTO t1 VALUES(2, 2);",
          "172:   }",
          "173:   do_execsql_test 3.$tn.4 {",
          "174:     SELECT min(a), b FROM t1;",
          "175:   } {2 2}",
          "176:   do_execsql_test 3.$tn.5 {",
          "177:     SELECT min(a), b FROM t1 WHERE a<50;",
          "178:   } {2 2}",
          "179: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}