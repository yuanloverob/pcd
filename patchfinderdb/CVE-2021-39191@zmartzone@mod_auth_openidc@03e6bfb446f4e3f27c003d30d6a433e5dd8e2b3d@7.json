{
  "cve_id": "CVE-2021-39191",
  "cve_desc": "mod_auth_openidc is an authentication/authorization module for the Apache 2.x HTTP server that functions as an OpenID Connect Relying Party, authenticating users against an OpenID Connect Provider. In versions prior to 2.4.9.4, the 3rd-party init SSO functionality of mod_auth_openidc was reported to be vulnerable to an open redirect attack by supplying a crafted URL in the `target_link_uri` parameter. A patch in version 2.4.9.4 made it so that the `OIDCRedirectURLsAllowed` setting must be applied to the `target_link_uri` parameter. There are no known workarounds aside from upgrading to a patched version.",
  "repo": "zmartzone/mod_auth_openidc",
  "patch_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
  "patch_info": {
    "commit_hash": "03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "repo": "zmartzone/mod_auth_openidc",
    "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/03e6bfb446f4e3f27c003d30d6a433e5dd8e2b3d",
    "files": [
      "AUTHORS",
      "ChangeLog",
      "auth_openidc.conf",
      "configure.ac",
      "src/mod_auth_openidc.c"
    ],
    "message": "apply OIDCRedirectURLsAllowed setting to target_link_uri\n\ncloses #672; thanks @Meheni\nrelease 2.4.9.4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
    "before_after_code_files": [
      "auth_openidc.conf||auth_openidc.conf",
      "configure.ac||configure.ac",
      "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
    ]
  },
  "patch_diff": {
    "auth_openidc.conf||auth_openidc.conf": [
      "File: auth_openidc.conf -> auth_openidc.conf",
      "--- Hunk 1 ---",
      "[Context before]",
      "918: #OIDCStateInputHeaders [none|user-agent|x-forwarded-for|both]",
      "920: # Define one or more regular expressions that specify URLs (or domains) allowed for post logout and",
      "923: #   OIDCRedirectURLsAllowed ^https://www.example.com ^https://(\\w+).example.org ^https://example.net/app",
      "924: # or:",
      "925: #   OIDCRedirectURLsAllowed ^https://www.example.com/logout$ ^https://www.example.com/app/return_to$",
      "",
      "[Removed Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, and the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, e.g.:",
      "",
      "[Added Lines]",
      "921: # other redirects such as the \"return_to\" value on refresh token requests, the \"login_uri\" value",
      "922: # on session management based logins through the OP iframe, and the \"target_link_uri\" parameter in",
      "923: # 3rd-party initiated logins, e.g.:",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
      "",
      "[Removed Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.3],[hans.zandbelt@zmartzone.eu])",
      "",
      "[Added Lines]",
      "1: AC_INIT([mod_auth_openidc],[2.4.9.4],[hans.zandbelt@zmartzone.eu])",
      "",
      "---------------"
    ],
    "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
      "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2457:  return TRUE;",
      "2458: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2460: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2462: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2463:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2464:   char **err_desc) {",
      "2465:  apr_uri_t uri;",
      "2466:  const char *c_host = NULL;",
      "2467:  apr_hash_index_t *hi = NULL;",
      "2468:  size_t i = 0;",
      "2469:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2472:  for (i = 0; i < strlen(url); i++)",
      "2473:   if (url[i] == '\\\\')",
      "2474:    url[i] = '/';",
      "2476:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2479:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2480:   return FALSE;",
      "2481:  }",
      "2483:  if (c->redirect_urls_allowed != NULL) {",
      "2484:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2485:     apr_hash_next(hi)) {",
      "2486:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2487:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2488:      NULL, err_str) == TRUE)",
      "2489:     break;",
      "2490:   }",
      "2491:   if (hi == NULL) {",
      "2494:      apr_psprintf(r->pool,",
      "2495:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2496:        url);",
      "2497:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2498:    return FALSE;",
      "2499:   }",
      "2500:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2501:   c_host = oidc_get_current_url_host(r);",
      "2502:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2503:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2506:      apr_psprintf(r->pool,",
      "2507:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2508:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2509:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2510:    return FALSE;",
      "2511:   }",
      "2512:  }",
      "2514:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "2517:     apr_psprintf(r->pool,",
      "2518:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "2519:       url);",
      "2520:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2521:   return FALSE;",
      "2522:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "2525:     \"No hostname was parsed and starting with '//': %s\", url);",
      "2526:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2527:   return FALSE;",
      "2528:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "2531:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "2532:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2533:   return FALSE;",
      "2534:  }",
      "2537:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "2540:     apr_psprintf(r->pool,",
      "2541:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "2542:       url);",
      "2543:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2544:   return FALSE;",
      "2545:  }",
      "2547:  return TRUE;",
      "2548: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2469:  oidc_provider_t *provider = NULL;",
      "2471:  oidc_util_get_request_parameter(r, OIDC_DISC_OP_PARAM, &issuer);",
      "2472:  oidc_util_get_request_parameter(r, OIDC_DISC_USER_PARAM, &user);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2560:  char *error_str = NULL;",
      "2561:  char *error_description = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2519:     HTTP_UNAUTHORIZED);",
      "2520:  }",
      "2523:  if (c->metadata_dir == NULL) {",
      "2524:   if ((oidc_provider_static_config(r, c, &provider) == TRUE)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2615:  if (oidc_validate_redirect_url(r, c, target_link_uri, TRUE, &error_str,",
      "2616:    &error_description) == FALSE) {",
      "2617:   return oidc_util_html_send_error(r, c->error_template, error_str,",
      "2618:     error_description,",
      "2619:     HTTP_UNAUTHORIZED);",
      "2620:  }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2947:  return rc;",
      "2948: }",
      "",
      "[Removed Lines]",
      "2950: #define OIDC_MAX_URL_LENGTH 8192 * 2",
      "2952: static apr_byte_t oidc_validate_redirect_url(request_rec *r, oidc_cfg *c,",
      "2953:   const char *redirect_to_url, apr_byte_t restrict_to_host, char **err_str,",
      "2954:   char **err_desc) {",
      "2955:  apr_uri_t uri;",
      "2956:  const char *c_host = NULL;",
      "2957:  apr_hash_index_t *hi = NULL;",
      "2958:  size_t i = 0;",
      "2959:  char *url = apr_pstrndup(r->pool, redirect_to_url, OIDC_MAX_URL_LENGTH);",
      "2962:  for (i = 0; i < strlen(url); i++)",
      "2963:   if (url[i] == '\\\\')",
      "2964:    url[i] = '/';",
      "2966:  if (apr_uri_parse(r->pool, url, &uri) != APR_SUCCESS) {",
      "2969:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2970:   return FALSE;",
      "2971:  }",
      "2973:  if (c->redirect_urls_allowed != NULL) {",
      "2974:   for (hi = apr_hash_first(NULL, c->redirect_urls_allowed); hi; hi =",
      "2975:     apr_hash_next(hi)) {",
      "2976:    apr_hash_this(hi, (const void**) &c_host, NULL, NULL);",
      "2977:    if (oidc_util_regexp_first_match(r->pool, url, c_host,",
      "2978:      NULL, err_str) == TRUE)",
      "2979:     break;",
      "2980:   }",
      "2981:   if (hi == NULL) {",
      "2984:      apr_psprintf(r->pool,",
      "2985:        \"value does not match the list of allowed redirect URLs: %s\",",
      "2986:        url);",
      "2987:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "2988:    return FALSE;",
      "2989:   }",
      "2990:  } else if ((uri.hostname != NULL) && (restrict_to_host == TRUE)) {",
      "2991:   c_host = oidc_get_current_url_host(r);",
      "2992:   if ((strstr(c_host, uri.hostname) == NULL)",
      "2993:     || (strstr(uri.hostname, c_host) == NULL)) {",
      "2996:      apr_psprintf(r->pool,",
      "2997:        \"URL value \\\"%s\\\" does not match the hostname of the current request \\\"%s\\\"\",",
      "2998:        apr_uri_unparse(r->pool, &uri, 0), c_host);",
      "2999:    oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3000:    return FALSE;",
      "3001:   }",
      "3002:  }",
      "3004:  if ((uri.hostname == NULL) && (strstr(url, \"/\") != url)) {",
      "3007:     apr_psprintf(r->pool,",
      "3008:       \"No hostname was parsed and it does not seem to be relative, i.e starting with '/': %s\",",
      "3009:       url);",
      "3010:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3011:   return FALSE;",
      "3012:  } else if ((uri.hostname == NULL) && (strstr(url, \"//\") == url)) {",
      "3015:     \"No hostname was parsed and starting with '//': %s\", url);",
      "3016:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3017:   return FALSE;",
      "3018:  } else if ((uri.hostname == NULL) && (strstr(url, \"/\\\\\") == url)) {",
      "3021:     \"No hostname was parsed and starting with '/\\\\': %s\", url);",
      "3022:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3023:   return FALSE;",
      "3024:  }",
      "3027:  if (((strstr(url, \"\\n\") != NULL) || strstr(url, \"\\r\") != NULL)) {",
      "3030:     apr_psprintf(r->pool,",
      "3031:       \"URL value \\\"%s\\\" contains illegal \\\"\\n\\\" or \\\"\\r\\\" character(s)\",",
      "3032:       url);",
      "3033:   oidc_error(r, \"%s: %s\", *err_str, *err_desc);",
      "3034:   return FALSE;",
      "3035:  }",
      "3037:  return TRUE;",
      "3038: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "884c1250fb173e2956a3d1211df826e84c30a7bf",
      "candidate_info": {
        "commit_hash": "884c1250fb173e2956a3d1211df826e84c30a7bf",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/884c1250fb173e2956a3d1211df826e84c30a7bf",
        "files": [
          ".cproject",
          ".travis.yml",
          "ChangeLog",
          "Dockerfile",
          "configure.ac",
          "src/authz.c",
          "src/pcre_subst.c",
          "src/pcre_subst.h",
          "src/util.c",
          "test/test.c"
        ],
        "message": "add support for libpcre2; closes #740\n\nbump to 2.4.10.1rc2\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/authz.c||src/authz.c",
          "src/pcre_subst.c||src/pcre_subst.c",
          "src/pcre_subst.h||src/pcre_subst.h",
          "src/util.c||src/util.c",
          "test/test.c||test/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10.1rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10.1rc2],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79: AC_SUBST(CJOSE_LIBS)",
          "81: # PCRE",
          "83: AC_SUBST(PCRE_CFLAGS)",
          "84: AC_SUBST(PCRE_LIBS)",
          "",
          "[Removed Lines]",
          "82: PKG_CHECK_MODULES(PCRE, libpcre)",
          "",
          "[Added Lines]",
          "82: PKG_CHECK_MODULES([PCRE2], libpcre2-8, [",
          "83:   PCRE_CFLAGS=\"$PCRE2_CFLAGS\"",
          "84:   PCRE_LIBS=\"$PCRE2_LIBS\"",
          "85:   AC_DEFINE([HAVE_LIBPCRE2], [1], [Define if libpcre2 is available.])",
          "86:   enable_pcre2=yes",
          "87: ], [",
          "88:   AC_CHECK_HEADER(pcre2.h, [",
          "89:     AC_CHECK_LIB(pcre2-8, pcre2_compile_8, [",
          "90:       PCRE_LIBS=\"-lpcre2-8\"",
          "91:       AC_DEFINE([HAVE_LIBPCRE2], 1, [Define if libpcre2 is available.])",
          "92:       enable_pcre2=yes",
          "93:     ])",
          "94:   ])",
          "95: ])",
          "97: AS_IF([test \"X$enable_pcre2\" != \"Xyes\"],[",
          "98:   PKG_CHECK_MODULES([PCRE], libpcre, [",
          "99:     CFLAGS=\"$PCRE_CFLAGS $CFLAGS\"",
          "100:     AC_CHECK_HEADER(pcre.h, [",
          "101:       LIBS=\"$PCRE_LIBS $LIBS\"",
          "102:       AC_DEFINE([HAVE_LIBPCRE], [1], [Define if libpcre is available.])",
          "103:       enable_pcre=yes",
          "104:     ])",
          "105:   ], [",
          "106:     AC_CHECK_HEADER(pcre.h, [",
          "107:       AC_CHECK_LIB(pcre, pcre_compile, [",
          "108:         PCRE_LIBS=\"-lpcre\"",
          "109:         AC_DEFINE([HAVE_LIBPCRE], 1, [Define if libpcre is available.])",
          "110:       ])",
          "111:     ])",
          "112:   ])",
          "113: ])",
          "115: AS_IF([test \"X$enable_pcre2\" = Xyes], [PCRE_INFO=\"yes, via libpcre2\"], [test \"X$enable_pcre\" = Xyes], [PCRE_INFO=\"yes, via libpcre\"], [PCRE_INFO=no])",
          "",
          "---------------"
        ],
        "src/authz.c||src/authz.c": [
          "File: src/authz.c -> src/authz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: #include \"mod_auth_openidc.h\"",
          "50: #ifdef USE_LIBJQ",
          "51: #include \"jq.h\"",
          "",
          "[Removed Lines]",
          "48: #include <pcre.h>",
          "",
          "[Added Lines]",
          "47: #include \"pcre_subst.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124: static apr_byte_t oidc_authz_match_expression(request_rec *r,",
          "125:   const char *spec_c, json_t *val) {",
          "129:  int i = 0;",
          "134:  if (preg == NULL) {",
          "137:   return FALSE;",
          "138:  }",
          "",
          "[Removed Lines]",
          "126:  const char *errorptr;",
          "127:  int erroffset;",
          "128:  pcre *preg;",
          "132:  preg = pcre_compile(spec_c, 0, &errorptr, &erroffset, NULL);",
          "135:   oidc_error(r, \"pattern [%s] is not a valid regular expression\", spec_c);",
          "136:   pcre_free(preg);",
          "",
          "[Added Lines]",
          "125:  oidc_pcre *preg = NULL;",
          "126:  char *error_str = NULL;",
          "130:  preg = oidc_pcre_compile(r->pool, spec_c, &error_str);",
          "133:   oidc_error(r, \"pattern [%s] is not a valid regular expression: %s\", spec_c, error_str);",
          "134:   oidc_pcre_free(preg);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "141:  if (json_is_string(val)) {",
          "147:    return TRUE;",
          "148:   }",
          "",
          "[Removed Lines]",
          "144:   if (pcre_exec(preg, NULL, json_string_value(val),",
          "145:     (int) strlen(json_string_value(val)), 0, 0, NULL, 0) == 0) {",
          "146:    pcre_free(preg);",
          "",
          "[Added Lines]",
          "142:   if (oidc_pcre_exec(r->pool, preg, json_string_value(val),",
          "143:     (int) strlen(json_string_value(val)), NULL) == 0) {",
          "144:    oidc_pcre_free(preg);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "157:    if (json_is_string(elem)) {",
          "164:      return TRUE;",
          "165:     }",
          "166:    }",
          "167:   }",
          "168:  }",
          "172:  return FALSE;",
          "173: }",
          "",
          "[Removed Lines]",
          "160:     if (pcre_exec(preg, NULL, json_string_value(elem),",
          "161:       (int) strlen(json_string_value(elem)), 0, 0,",
          "162:       NULL, 0) == 0) {",
          "163:      pcre_free(preg);",
          "170:  pcre_free(preg);",
          "",
          "[Added Lines]",
          "158:     if (oidc_pcre_exec(r->pool, preg, json_string_value(elem),",
          "159:       (int) strlen(json_string_value(elem)), NULL) == 0) {",
          "160:      oidc_pcre_free(preg);",
          "167:  oidc_pcre_free(preg);",
          "",
          "---------------"
        ],
        "src/pcre_subst.c||src/pcre_subst.c": [
          "File: src/pcre_subst.c -> src/pcre_subst.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include <stdio.h>",
          "36: #include <ctype.h>",
          "37: #include <string.h>",
          "39: #include \"pcre_subst.h\"",
          "41: #ifdef DEBUG_PCRE_SUBST",
          "42: static void",
          "43: dumpstr(const char *str, int len, int start, int end)",
          "",
          "[Removed Lines]",
          "38: #include <pcre.h>",
          "",
          "[Added Lines]",
          "38: #include <apr_strings.h>",
          "40: #include \"config.h\"",
          "42: #ifdef HAVE_LIBPCRE2",
          "43: #define PCRE2_CODE_UNIT_WIDTH 8",
          "44: #include <pcre2.h>",
          "45: #else",
          "46: #include <pcre.h>",
          "47: #endif",
          "53: typedef struct oidc_pcre {",
          "54: #ifdef HAVE_LIBPCRE2",
          "55:  pcre2_code *preg;",
          "56:  pcre2_match_data *match_data;",
          "57: #else",
          "58:  int subStr[OIDC_UTIL_REGEXP_MATCH_SIZE];",
          "59:  pcre *preg;",
          "60: #endif",
          "61: } oidc_pcre;",
          "63: #ifndef HAVE_LIBPCRE2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "145: char *",
          "146: pcre_subst(const pcre *ppat, const pcre_extra *extra, const char *str, int len,",
          "148: {",
          "149:  int nmat;",
          "150:  int ovec[OIDC_PCRE_MAXCAPTURE * 3];",
          "151:  nmat = pcre_exec(ppat, extra, str, len, offset, options,",
          "153: #ifdef DEBUG_PCRE_SUBST",
          "154:  dumpmatch(str, len, rep, nmat, ovec);",
          "155: #endif",
          "",
          "[Removed Lines]",
          "147:    int offset, int options, const char *rep)",
          "152:   ovec, OIDC_PCRE_MAXCAPTURE * 3);",
          "",
          "[Added Lines]",
          "170:   int offset, int options, const char *rep)",
          "175:       ovec, OIDC_PCRE_MAXCAPTURE * 3);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "157:   return NULL;",
          "158:  return(edit(str, len, rep, nmat, ovec));",
          "159: }",
          "161: #ifdef DEBUG_BUILD",
          "162: int",
          "163: main()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183: #endif",
          "185: char* oidc_pcre_subst(apr_pool_t *pool, const oidc_pcre *pcre, const char *str, int len,",
          "186:   const char *rep) {",
          "187:  char *rv = NULL;",
          "188: #ifdef HAVE_LIBPCRE2",
          "189:  PCRE2_SIZE bufsize = (len == 0) ? 16 : 2 * len;",
          "190:  PCRE2_UCHAR *output = (PCRE2_UCHAR*) malloc(sizeof(PCRE2_UCHAR) * bufsize);",
          "191:  PCRE2_SIZE outlen = bufsize;",
          "192:  PCRE2_SPTR subject = (PCRE2_SPTR) str;",
          "193:  PCRE2_SIZE length = (PCRE2_SIZE) len;",
          "194:  PCRE2_SPTR replacement = (PCRE2_SPTR) rep;",
          "195:  if (pcre2_substitute(pcre->preg, subject, length, 0,",
          "196:        PCRE2_SUBSTITUTE_GLOBAL, 0, 0, replacement, PCRE2_ZERO_TERMINATED, output, &outlen) > 0)",
          "197:   rv = apr_pstrdup(pool, (const char*) output);",
          "198:  free(output);",
          "199: #else",
          "200:  char *substituted = NULL;",
          "201:  substituted = pcre_subst(pcre->preg, 0, str, len, 0, 0, rep);",
          "202:  rv = apr_pstrdup(pool, substituted);",
          "203:  pcre_free(substituted);",
          "204: #endif",
          "205:  return rv;",
          "206: }",
          "208: oidc_pcre* oidc_pcre_compile(apr_pool_t *pool, const char *regexp, char **error_str) {",
          "209:  oidc_pcre *pcre = apr_pcalloc(pool, sizeof(oidc_pcre));",
          "210: #ifdef HAVE_LIBPCRE2",
          "211:  int errorcode;",
          "212:  PCRE2_SIZE erroroffset;",
          "213:  pcre->preg =",
          "214:    pcre2_compile((PCRE2_SPTR) regexp, (PCRE2_SIZE) strlen(regexp), 0, &errorcode, &erroroffset, NULL);",
          "215: #else",
          "216:  const char *errorptr = NULL;",
          "217:  int erroffset;",
          "218:  pcre->preg = pcre_compile(regexp, 0, &errorptr, &erroffset, NULL);",
          "219: #endif",
          "221:  if (pcre->preg == NULL) {",
          "223:   pcre = NULL;",
          "224:  }",
          "225:  return pcre;",
          "226: }",
          "228: void oidc_pcre_free(oidc_pcre *pcre) {",
          "229: #ifdef HAVE_LIBPCRE2",
          "230:  if (pcre->match_data)",
          "231:   pcre2_match_data_free(pcre->match_data);",
          "232:  if (pcre->preg)",
          "233:   pcre2_code_free(pcre->preg);",
          "234: #else",
          "235:  pcre_free(pcre->preg);",
          "236: #endif",
          "237: }",
          "239: int oidc_pcre_get_substring(apr_pool_t *pool, const oidc_pcre *pcre, const char *input, int rc,",
          "240:   char **sub_str, char **error_str) {",
          "241:  int rv = 0;",
          "242: #ifdef HAVE_LIBPCRE2",
          "243:  PCRE2_UCHAR *buf = NULL;",
          "244:  PCRE2_SIZE buflen = 0;",
          "245:  if ((rv =",
          "246:    pcre2_substring_get_bynumber(pcre->match_data, OIDC_UTIL_REGEXP_MATCH_NR, &buf, &buflen))",
          "247:    < 0) {",
          "248:   switch (rc) {",
          "249:    case PCRE2_ERROR_NOSUBSTRING:",
          "251:     break;",
          "252:    case PCRE2_ERROR_UNAVAILABLE:",
          "254:     break;",
          "255:    case PCRE2_ERROR_UNSET:",
          "257:     break;",
          "258:    case PCRE2_ERROR_NOMEMORY:",
          "260:     break;",
          "261:    default:",
          "263:     break;",
          "264:   }",
          "265:  } else {",
          "267:   pcre2_substring_free(buf);",
          "268:   rv = 1;",
          "269:  }",
          "270: #else",
          "271:  const char *buf = NULL;",
          "272:  if ((rv = pcre_get_substring(input, (int *)pcre->subStr, rc, OIDC_UTIL_REGEXP_MATCH_NR, &buf)) <= 0) {",
          "274:           rv);",
          "275:  } else {",
          "277:   pcre_free_substring(buf);",
          "278:  }",
          "279: #endif",
          "280:  return rv;",
          "281: }",
          "283: int oidc_pcre_exec(apr_pool_t *pool, oidc_pcre *pcre, const char *input, int len, char **error_str) {",
          "284:  int rc = 0;",
          "285: #ifdef HAVE_LIBPCRE2",
          "286:  pcre->match_data = pcre2_match_data_create_from_pattern(pcre->preg, NULL);",
          "287:  if ((rc =",
          "288:    pcre2_match(pcre->preg, (PCRE2_SPTR) input, (PCRE2_SIZE) len, 0, 0, pcre->match_data, NULL))",
          "289:    < 0) {",
          "290:   switch (rc) {",
          "291:    case PCRE2_ERROR_NOMATCH:",
          "293:     break;",
          "294:    default:",
          "296:     break;",
          "297:   }",
          "298:  }",
          "299: #else",
          "300:  if ((rc = pcre_exec(pcre->preg, NULL, input, len, 0, 0, pcre->subStr, OIDC_UTIL_REGEXP_MATCH_SIZE)) < 0) {",
          "302:   switch (rc) {",
          "303:    case PCRE_ERROR_NOMATCH:",
          "305:     break;",
          "306:    case PCRE_ERROR_NULL:",
          "308:     break;",
          "309:    case PCRE_ERROR_BADOPTION:",
          "311:     break;",
          "312:    case PCRE_ERROR_BADMAGIC:",
          "314:            \"magic number bad (compiled re corrupt?)\");",
          "315:     break;",
          "316:    case PCRE_ERROR_UNKNOWN_NODE:",
          "318:            \"something kooky in the compiled re\");",
          "319:     break;",
          "320:    case PCRE_ERROR_NOMEMORY:",
          "322:     break;",
          "323:    default:",
          "325:     break;",
          "326:   }",
          "328:  }",
          "329: #endif",
          "331:  return rc;",
          "332: }",
          "334: #ifndef HAVE_LIBPCRE2",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "184:  } else {",
          "185:   printf(\"No match\\n\");",
          "186:  }",
          "187:  return 0;",
          "188: }",
          "189: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "361:  pcre_free(extra);",
          "362:  pcre_free(ppat);",
          "366: #endif",
          "",
          "---------------"
        ],
        "src/pcre_subst.h||src/pcre_subst.h": [
          "File: src/pcre_subst.h -> src/pcre_subst.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #ifndef MOD_AUTH_OPENIDC_PCRE_SUBST_H_",
          "36: #define MOD_AUTH_OPENIDC_PCRE_SUBST_H_",
          "38: #define OIDC_PCRE_MAXCAPTURE 255",
          "",
          "[Removed Lines]",
          "40: char *pcre_subst(const pcre *, const pcre_extra *, const char *, int, int, int, const char *);",
          "",
          "[Added Lines]",
          "38: #include <apr_pools.h>",
          "41: #define OIDC_UTIL_REGEXP_MATCH_SIZE 30",
          "42: #define OIDC_UTIL_REGEXP_MATCH_NR 1",
          "44: typedef struct oidc_pcre oidc_pcre;",
          "46: oidc_pcre* oidc_pcre_compile(apr_pool_t *pool, const char *regexp, char **error_str);",
          "47: char* oidc_pcre_subst(apr_pool_t *pool, const oidc_pcre*, const char*, int, const char*);",
          "48: int oidc_pcre_exec(apr_pool_t*, oidc_pcre*, const char*, int, char**);",
          "49: void oidc_pcre_free(oidc_pcre*);",
          "50: int oidc_pcre_get_substring(apr_pool_t *pool, const oidc_pcre*, const char *input, int rc,",
          "51:   char **sub_str, char **error_str);",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #include \"mod_auth_openidc.h\"",
          "46: #include <curl/curl.h>",
          "48: #include \"pcre_subst.h\"",
          "",
          "[Removed Lines]",
          "47: #include <pcre.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2376:  char *substituted = NULL;",
          "2377:  apr_byte_t rc = FALSE;",
          "2380:  if (preg == NULL) {",
          "2383:   goto out;",
          "2384:  }",
          "2386:  if (strlen(input) >= OIDC_PCRE_MAXCAPTURE - 1) {",
          "2391:   goto out;",
          "2392:  }",
          "2396:  if (substituted == NULL) {",
          "2401:   goto out;",
          "2402:  }",
          "2405:  rc = TRUE;",
          "2409:  if (preg)",
          "2412:  return rc;",
          "2413: }",
          "",
          "[Removed Lines]",
          "2370: apr_byte_t oidc_util_regexp_substitute(apr_pool_t *pool, const char *input,",
          "2371:   const char *regexp, const char *replace, char **output,",
          "2372:   char **error_str) {",
          "2374:  const char *errorptr = NULL;",
          "2375:  int erroffset;",
          "2379:  pcre *preg = pcre_compile(regexp, 0, &errorptr, &erroffset, NULL);",
          "2382:     \"pattern [%s] is not a valid regular expression\", regexp);",
          "2388:     apr_psprintf(pool,",
          "2389:       \"string length (%d) is larger than the maximum allowed for pcre_subst (%d)\",",
          "2390:       (int) strlen(input), OIDC_PCRE_MAXCAPTURE - 1);",
          "2394:  substituted = pcre_subst(preg, NULL, input, (int) strlen(input), 0, 0,",
          "2395:    replace);",
          "2398:     apr_psprintf(pool,",
          "2399:       \"unknown error could not match string [%s] using pattern [%s] and replace matches in [%s]\",",
          "2400:       input, regexp, replace);",
          "2407:  out: if (substituted)",
          "2408:   pcre_free(substituted);",
          "2410:   pcre_free(preg);",
          "",
          "[Added Lines]",
          "2369: apr_byte_t oidc_util_regexp_substitute(apr_pool_t *pool, const char *input, const char *regexp,",
          "2370:   const char *replace, char **output, char **error_str) {",
          "2375:  oidc_pcre *preg = oidc_pcre_compile(pool, regexp, error_str);",
          "2378:     apr_psprintf(pool, \"pattern [%s] is not a valid regular expression: %s\", regexp, *error_str);",
          "2384:     apr_psprintf(pool, \"string length (%d) is larger than the maximum allowed for pcre_subst (%d)\", (int) strlen(input), OIDC_PCRE_MAXCAPTURE",
          "2385:         - 1);",
          "2389:  substituted = oidc_pcre_subst(pool, preg, input, (int) strlen(input), replace);",
          "2392:     apr_psprintf(pool, \"unknown error could not match string [%s] using pattern [%s] and replace matches in [%s]\", input, regexp, replace);",
          "2399: out:",
          "2401:   oidc_pcre_free(preg);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2428:  apr_byte_t rv = FALSE;",
          "2431:  if (preg == NULL) {",
          "2434:   goto out;",
          "2435:  }",
          "2464:   goto out;",
          "2467:  if (output) {",
          "2473:    goto out;",
          "2474:   }",
          "2477:  }",
          "2479:  rv = TRUE;",
          "2481: out:",
          "2485:  if (preg)",
          "2488:  return rv;",
          "2489: }",
          "",
          "[Removed Lines]",
          "2418: #define OIDC_UTIL_REGEXP_MATCH_SIZE 30",
          "2419: #define OIDC_UTIL_REGEXP_MATCH_NR 1",
          "2421: apr_byte_t oidc_util_regexp_first_match(apr_pool_t *pool, const char *input,",
          "2422:   const char *regexp, char **output, char **error_str) {",
          "2423:  const char *errorptr = NULL;",
          "2424:  int erroffset;",
          "2425:  int rc = 0;",
          "2426:  int subStr[OIDC_UTIL_REGEXP_MATCH_SIZE];",
          "2427:  const char *psubStrMatchStr = NULL;",
          "2430:  pcre *preg = pcre_compile(regexp, 0, &errorptr, &erroffset, NULL);",
          "2433:     \"pattern [%s] is not a valid regular expression\", regexp);",
          "2437:  if ((rc = pcre_exec(preg, NULL, input, (int) strlen(input), 0, 0, subStr,",
          "2438:    OIDC_UTIL_REGEXP_MATCH_SIZE)) < 0) {",
          "2439:   switch (rc) {",
          "2440:   case PCRE_ERROR_NOMATCH:",
          "2442:    break;",
          "2443:   case PCRE_ERROR_NULL:",
          "2445:    break;",
          "2446:   case PCRE_ERROR_BADOPTION:",
          "2448:    break;",
          "2449:   case PCRE_ERROR_BADMAGIC:",
          "2451:      \"magic number bad (compiled re corrupt?)\");",
          "2452:    break;",
          "2453:   case PCRE_ERROR_UNKNOWN_NODE:",
          "2455:      \"something kooky in the compiled re\");",
          "2456:    break;",
          "2457:   case PCRE_ERROR_NOMEMORY:",
          "2459:    break;",
          "2460:   default:",
          "2462:    break;",
          "2463:   }",
          "2465:  }",
          "2469:   if (pcre_get_substring(input, subStr, rc, OIDC_UTIL_REGEXP_MATCH_NR,",
          "2470:     &(psubStrMatchStr)) <= 0) {",
          "2472:      rc);",
          "2483:  if (psubStrMatchStr)",
          "2484:   pcre_free_substring(psubStrMatchStr);",
          "2486:   pcre_free(preg);",
          "",
          "[Added Lines]",
          "2410: apr_byte_t oidc_util_regexp_first_match(apr_pool_t *pool, const char *input, const char *regexp,",
          "2411:   char **output, char **error_str) {",
          "2413:  int rc = 0;",
          "2415:  oidc_pcre *preg = oidc_pcre_compile(pool, regexp, error_str);",
          "2418:     apr_psprintf(pool, \"pattern [%s] is not a valid regular expression: %s\", regexp, *error_str);",
          "2422:  if ((rc = oidc_pcre_exec(pool, preg, input, (int) strlen(input), error_str)) < 0)",
          "2427:   if (oidc_pcre_get_substring(pool, preg, input, rc, output, error_str) <= 0) {",
          "2437:   oidc_pcre_free(preg);",
          "",
          "---------------"
        ],
        "test/test.c||test/test.c": [
          "File: test/test.c -> test/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1504:  s = \"{\\\"upn\\\":\\\"nneul@umsystem.edu\\\"}\";",
          "1505:  rc = oidc_util_decode_json_object(r, s, &json);",
          "1506:  TST_ASSERT(\"test remote user (1) valid JSON\", rc == TRUE);",
          "1507:  rc = oidc_get_remote_user(r, \"upn\", \"^(.*)@umsystem\\\\.edu\", \"$1\", json, &remote_user);",
          "1508:  TST_ASSERT(\"test remote user (1) function result\", rc == TRUE);",
          "1509:  TST_ASSERT_STR(\"remote_user (1) string\", remote_user, \"nneul\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1507:  rc = oidc_get_remote_user(r, \"upn\", \"^(.*)@umsystem\\\\.edu\", NULL, json, &remote_user);",
          "1508:  TST_ASSERT_STR(\"remote_user (0) string\", remote_user, \"nneul\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "24d4c27f5c97a1fcbe0a934818f47ae8ff620fde",
      "candidate_info": {
        "commit_hash": "24d4c27f5c97a1fcbe0a934818f47ae8ff620fde",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/24d4c27f5c97a1fcbe0a934818f47ae8ff620fde",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/authz.c"
        ],
        "message": "correct apr_memcache.h and libjq configure.ac check\n\ncorrect authz info 2.x printout about claims\nbump to 2.4.9.5rc4\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/authz.c||src/authz.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.5rc3],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.9.5rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "62: # older versions of libapr may not have memcache support",
          "63: old_CPPFLAGS=$CPPFLAGS",
          "65: AC_CHECK_HEADER([apr_memcache.h], [HAVE_MEMCACHE=1], [HAVE_MEMCACHE=0])",
          "67: CPPFLAGS=$old_CPPFLAGS",
          "69: # We need Jansson for JSON parsing.",
          "",
          "[Removed Lines]",
          "64: CPPFLAGS=\"${APACHE_CPPFLAGS} ${APACHE_INCLUDES} $CPPFLAGS\"",
          "66: AM_CONDITIONAL(HAVE_MEMCACHE, HAVE_MEMCACHE=1)",
          "",
          "[Added Lines]",
          "64: CPPFLAGS=\"${APACHE_CPPFLAGS} ${APACHE_CFLAGS} $CPPFLAGS\"",
          "66: AM_CONDITIONAL(HAVE_MEMCACHE,[test x\"$HAVE_MEMCACHE\" = \"x1\"])",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "109:     JQ_LIBS=\"-L$with_jq/lib -ljq\"",
          "111:  CPPFLAGS=\"$JQ_CFLAGS $CPPFLAGS\"",
          "114:  LDFLAGS=\"$JQ_LIBS $LDFLAGS\"",
          "115:  AC_CHECK_LIB([jq], [jq_init], [HAVE_LIBJQ=1], [HAVE_LIBJQ=0])",
          "",
          "[Removed Lines]",
          "112:  AC_CHECK_HEADER([jq.h], , [HAVE_LIBJQ=0])",
          "",
          "[Added Lines]",
          "112:  AC_CHECK_HEADER([jq.h], [HAVE_LIBJQ=1], [HAVE_LIBJQ=0])",
          "",
          "---------------"
        ],
        "src/authz.c||src/authz.c": [
          "File: src/authz.c -> src/authz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:  }",
          "402:  ap_note_auth_failure(r);",
          "404:  return HTTP_UNAUTHORIZED;",
          "",
          "[Removed Lines]",
          "401:  oidc_info(r, \"authorization denied for require claims: '%s'\", reqs);",
          "",
          "[Added Lines]",
          "401:  oidc_info(r, \"authorization denied for require claims (0/%d): '%s'\", nelts, nelts > 0 ? reqs[0].requirement : \"(none)\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3514bcd13e81b4aa4a71990ebb2ad892705453a",
      "candidate_info": {
        "commit_hash": "d3514bcd13e81b4aa4a71990ebb2ad892705453a",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/d3514bcd13e81b4aa4a71990ebb2ad892705453a",
        "files": [
          "AUTHORS",
          "ChangeLog",
          "configure.ac",
          "src/mod_auth_openidc.c"
        ],
        "message": "don't defer Discovery to the content handler\n\nto allow RequireAll and Require not directives; see #770\ncloses #775; bump to 2.4.11rc5; thanks@rajeevn1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ],
          "candidate": [
            "configure.ac||configure.ac",
            "src/mod_auth_openidc.c||src/mod_auth_openidc.c"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc4],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.11rc5],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/mod_auth_openidc.c||src/mod_auth_openidc.c": [
          "File: src/mod_auth_openidc.c -> src/mod_auth_openidc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2251:   if (c->metadata_dir != NULL) {",
          "2258:    oidc_request_state_set(r, OIDC_REQUEST_STATE_KEY_DISCOVERY, \"\");",
          "2259:    r->user = \"\";",
          "2261:   }",
          "",
          "[Removed Lines]",
          "2257:    oidc_debug(r, \"defer discovery to the content handler\");",
          "2260:    return OK;",
          "",
          "[Added Lines]",
          "2258:    oidc_discovery(r, c);",
          "2259:    return DONE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4073:   const void *parsed_require_args,",
          "4074:   oidc_authz_match_claim_fn_type match_claim_fn) {",
          "4080:   r->user = NULL;",
          "4090:  json_t *claims = NULL, *id_token = NULL;",
          "",
          "[Removed Lines]",
          "4076:  oidc_debug(r, \"enter: require_args=\\\"%s\\\"\", require_args);",
          "4079:  if (r->user != NULL && strlen(r->user) == 0) {",
          "4081:   if (oidc_dir_cfg_unauth_action(r) == OIDC_UNAUTH_PASS)",
          "4082:    return AUTHZ_GRANTED;",
          "4083:   if (oidc_request_state_get(r, OIDC_REQUEST_STATE_KEY_DISCOVERY) != NULL)",
          "4084:    return AUTHZ_GRANTED;",
          "4085:   if (r->method_number == M_OPTIONS)",
          "4086:    return AUTHZ_GRANTED;",
          "4087:  }",
          "",
          "[Added Lines]",
          "4075:  oidc_debug(r, \"enter: (r->user=%s) require_args=\\\"%s\\\"\", r->user, require_args);",
          "4078:  if ((r->user != NULL) && (strlen(r->user) == 0))",
          "4081:  if (oidc_dir_cfg_unauth_action(r) == OIDC_UNAUTH_PASS)",
          "4082:   return AUTHZ_GRANTED;",
          "4083:  if (oidc_request_state_get(r, OIDC_REQUEST_STATE_KEY_DISCOVERY) != NULL)",
          "4084:   return AUTHZ_GRANTED;",
          "4085:  if (r->method_number == M_OPTIONS)",
          "4086:   return AUTHZ_GRANTED;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4173: int oidc_auth_checker(request_rec *r) {",
          "4177:   r->user = NULL;",
          "4187:  json_t *claims = NULL, *id_token = NULL;",
          "",
          "[Removed Lines]",
          "4176:  if (r->user != NULL && strlen(r->user) == 0) {",
          "4178:   if (oidc_dir_cfg_unauth_action(r) == OIDC_UNAUTH_PASS)",
          "4179:    return OK;",
          "4180:   if (oidc_request_state_get(r, OIDC_REQUEST_STATE_KEY_DISCOVERY) != NULL)",
          "4181:    return OK;",
          "4182:   if (r->method_number == M_OPTIONS)",
          "4183:    return OK;",
          "4184:  }",
          "",
          "[Added Lines]",
          "4175:  if ((r->user != NULL) && (strlen(r->user) == 0))",
          "4178:  if (oidc_dir_cfg_unauth_action(r) == OIDC_UNAUTH_PASS)",
          "4179:   return OK;",
          "4180:  if (oidc_request_state_get(r, OIDC_REQUEST_STATE_KEY_DISCOVERY) != NULL)",
          "4181:   return OK;",
          "4182:  if (r->method_number == M_OPTIONS)",
          "4183:   return OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd3b646f29c10365d23476e822d065dbc66cc013",
      "candidate_info": {
        "commit_hash": "bd3b646f29c10365d23476e822d065dbc66cc013",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/bd3b646f29c10365d23476e822d065dbc66cc013",
        "files": [
          "ChangeLog",
          "configure.ac"
        ],
        "message": "allow authorization on info requests, see #746\n\nbump to 2.4.10rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10.1rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.10.1rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ece4e9fd96a62f4ee3db92e283869b55737c17f8",
      "candidate_info": {
        "commit_hash": "ece4e9fd96a62f4ee3db92e283869b55737c17f8",
        "repo": "zmartzone/mod_auth_openidc",
        "commit_url": "https://github.com/zmartzone/mod_auth_openidc/commit/ece4e9fd96a62f4ee3db92e283869b55737c17f8",
        "files": [
          "ChangeLog",
          "configure.ac",
          "src/config.c",
          "test/stub.c"
        ],
        "message": "hash define expression option to OIDCUnAuthAction; fixes 1461634\n\nso it compiles for Apache 2.2; bump to 2.4.5rc1\n\nSigned-off-by: Hans Zandbelt <hans.zandbelt@zmartzone.eu>",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "src/config.c||src/config.c",
          "test/stub.c||test/stub.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: AC_SUBST(NAMEVER, AC_PACKAGE_TARNAME()-AC_PACKAGE_VERSION())",
          "",
          "[Removed Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.5rc0],[hans.zandbelt@zmartzone.eu])",
          "",
          "[Added Lines]",
          "1: AC_INIT([mod_auth_openidc],[2.4.5rc1],[hans.zandbelt@zmartzone.eu])",
          "",
          "---------------"
        ],
        "src/config.c||src/config.c": [
          "File: src/config.c -> src/config.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:  char *cookie;",
          "291:  char *authn_header;",
          "292:  int unauth_action;",
          "293:  ap_expr_info_t *unauth_expression;",
          "294:  int unautz_action;",
          "295:  apr_array_header_t *pass_cookies;",
          "296:  apr_array_header_t *strip_cookies;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "295: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "938: static const char * oidc_set_unauth_action(cmd_parms *cmd, void *m,",
          "939:   const char *arg1, const char *arg2) {",
          "940:  oidc_dir_cfg *dir_cfg = (oidc_dir_cfg *) m;",
          "942:  const char *rv = oidc_parse_unauth_action(cmd->pool, arg1,",
          "943:    &dir_cfg->unauth_action);",
          "944:  if ((rv == NULL) && (arg2 != NULL)) {",
          "945:   dir_cfg->unauth_expression = ap_expr_parse_cmd(cmd, arg2,",
          "946:     AP_EXPR_FLAG_DONT_VARY & AP_EXPR_FLAG_RESTRICTED, &expr_err,",
          "",
          "[Removed Lines]",
          "941:  const char *expr_err = NULL;",
          "",
          "[Added Lines]",
          "945: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "946:  const char *expr_err = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "950:      expr_err, NULL);",
          "951:   }",
          "952:  }",
          "953:  return OIDC_CONFIG_DIR_RV(cmd, rv);",
          "954: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "956: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1864:  c->cookie_path = OIDC_CONFIG_STRING_UNSET;",
          "1865:  c->authn_header = OIDC_CONFIG_STRING_UNSET;",
          "1866:  c->unauth_action = OIDC_CONFIG_POS_INT_UNSET;",
          "1867:  c->unauth_expression = NULL;",
          "1868:  c->unautz_action = OIDC_CONFIG_POS_INT_UNSET;",
          "1869:  c->pass_cookies = NULL;",
          "1870:  c->strip_cookies = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1871: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "1873: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1996:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,",
          "1997:    &auth_openidc_module);",
          "2001:  if (dir_cfg->unauth_action == OIDC_CONFIG_POS_INT_UNSET)",
          "2002:   return OIDC_DEFAULT_UNAUTH_ACTION;",
          "2004:  if (dir_cfg->unauth_expression == NULL)",
          "2005:   return dir_cfg->unauth_action;",
          "",
          "[Removed Lines]",
          "1999:  int rc = 0;",
          "2000:  const char *err_str = NULL;",
          "",
          "[Added Lines]",
          "2008: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "2009:  int rc = 0;",
          "2010:  const char *err_str = NULL;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2012:  }",
          "2014:  return (rc > 0) ? dir_cfg->unauth_action : OIDC_DEFAULT_UNAUTH_ACTION;",
          "2015: }",
          "2017: apr_byte_t oidc_dir_cfg_unauth_expr_is_set(request_rec *r) {",
          "2018:  oidc_dir_cfg *dir_cfg = ap_get_module_config(r->per_dir_config,",
          "2019:    &auth_openidc_module);",
          "2020:  return (dir_cfg->unauth_expression != NULL) ? TRUE : FALSE;",
          "2021: }",
          "2023: int oidc_dir_cfg_unautz_action(request_rec *r) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2022: #else",
          "2023:  return dir_cfg->unauth_action;",
          "2024: #endif",
          "2028: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "2032: #else",
          "2033:  return FALSE;",
          "2034: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2062:  c->unauth_action =",
          "2063:    add->unauth_action != OIDC_CONFIG_POS_INT_UNSET ?",
          "2064:      add->unauth_action : base->unauth_action;",
          "2065:  c->unauth_expression =",
          "2066:    add->unauth_expression != NULL ?",
          "2067:      add->unauth_expression : base->unauth_expression;",
          "2068:  c->unautz_action =",
          "2069:    add->unautz_action != OIDC_CONFIG_POS_INT_UNSET ?",
          "2070:      add->unautz_action : base->unautz_action;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2079: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "2083: #endif",
          "",
          "---------------"
        ],
        "test/stub.c||test/stub.c": [
          "File: test/stub.c -> test/stub.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:    return NULL;",
          "299:   }",
          "301:   AP_DECLARE(int) ap_expr_exec(request_rec *r, const ap_expr_info_t *expr,",
          "302:     const char **err) {",
          "303:    return 0;",
          "304:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "301: #if MODULE_MAGIC_NUMBER_MAJOR >= 20100714",
          "306: #endif",
          "",
          "---------------"
        ]
      }
    }
  ]
}