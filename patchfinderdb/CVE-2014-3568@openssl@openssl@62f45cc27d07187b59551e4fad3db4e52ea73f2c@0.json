{
  "cve_id": "CVE-2014-3568",
  "cve_desc": "OpenSSL before 0.9.8zc, 1.0.0 before 1.0.0o, and 1.0.1 before 1.0.1j does not properly enforce the no-ssl3 build option, which allows remote attackers to bypass intended access restrictions via an SSL 3.0 handshake, related to s23_clnt.c and s23_srvr.c.",
  "repo": "openssl/openssl",
  "patch_hash": "62f45cc27d07187b59551e4fad3db4e52ea73f2c",
  "patch_info": {
    "commit_hash": "62f45cc27d07187b59551e4fad3db4e52ea73f2c",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/62f45cc27d07187b59551e4fad3db4e52ea73f2c",
    "files": [
      "ssl/s23_clnt.c",
      "ssl/s23_srvr.c"
    ],
    "message": "Fix no-ssl3 configuration option\n\nCVE-2014-3568\n\nReviewed-by: Emilia Kasper <emilia@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/s23_clnt.c||ssl/s23_clnt.c",
      "ssl/s23_srvr.c||ssl/s23_srvr.c"
    ]
  },
  "patch_diff": {
    "ssl/s23_clnt.c||ssl/s23_clnt.c": [
      "File: ssl/s23_clnt.c -> ssl/s23_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "125:  if (ver == SSL2_VERSION)",
      "126:   return(SSLv2_client_method());",
      "127: #endif",
      "128:  if (ver == SSL3_VERSION)",
      "129:   return(SSLv3_client_method());",
      "131:   return(TLSv1_client_method());",
      "132:  else if (ver == TLS1_1_VERSION)",
      "133:   return(TLSv1_1_client_method());",
      "",
      "[Removed Lines]",
      "130:  else if (ver == TLS1_VERSION)",
      "",
      "[Added Lines]",
      "128: #ifndef OPENSSL_NO_SSL3",
      "131: #endif",
      "132:  if (ver == TLS1_VERSION)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "714:   {",
      "717:   if ((p[2] == SSL3_VERSION_MINOR) &&",
      "718:    !(s->options & SSL_OP_NO_SSLv3))",
      "719:    {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "719: #ifndef OPENSSL_NO_SSL3",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "728:    s->version=SSL3_VERSION;",
      "729:    s->method=SSLv3_client_method();",
      "730:    }",
      "732:    !(s->options & SSL_OP_NO_TLSv1))",
      "733:    {",
      "734:    s->version=TLS1_VERSION;",
      "",
      "[Removed Lines]",
      "731:   else if ((p[2] == TLS1_VERSION_MINOR) &&",
      "",
      "[Added Lines]",
      "734:   else",
      "735: #endif",
      "736:   if ((p[2] == TLS1_VERSION_MINOR) &&",
      "",
      "---------------"
    ],
    "ssl/s23_srvr.c||ssl/s23_srvr.c": [
      "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:  if (ver == SSL2_VERSION)",
      "128:   return(SSLv2_server_method());",
      "129: #endif",
      "130:  if (ver == SSL3_VERSION)",
      "131:   return(SSLv3_server_method());",
      "133:   return(TLSv1_server_method());",
      "134:  else if (ver == TLS1_1_VERSION)",
      "135:   return(TLSv1_1_server_method());",
      "",
      "[Removed Lines]",
      "132:  else if (ver == TLS1_VERSION)",
      "",
      "[Added Lines]",
      "130: #ifndef OPENSSL_NO_SSL3",
      "133: #endif",
      "134:  if (ver == TLS1_VERSION)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "613:  if ((type == 2) || (type == 3))",
      "614:   {",
      "617:   if (!ssl_init_wbio_buffer(s,1)) goto err;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "618:                 s->method = ssl23_get_server_method(s->version);",
      "619:   if (s->method == NULL)",
      "620:    {",
      "621:    SSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,SSL_R_UNSUPPORTED_PROTOCOL);",
      "622:    goto err;",
      "623:    }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "640:    s->s3->rbuf.left=0;",
      "641:    s->s3->rbuf.offset=0;",
      "642:    }",
      "652:   s->client_version=(v[0]<<8)|v[1];",
      "653: #endif",
      "",
      "[Removed Lines]",
      "643:   if (s->version == TLS1_2_VERSION)",
      "644:    s->method = TLSv1_2_server_method();",
      "645:   else if (s->version == TLS1_1_VERSION)",
      "646:    s->method = TLSv1_1_server_method();",
      "647:   else if (s->version == TLS1_VERSION)",
      "648:    s->method = TLSv1_server_method();",
      "649:   else",
      "650:    s->method = SSLv3_server_method();",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "392fa7a952e97d82eac6958c81ed1e256e6b8ca5",
      "candidate_info": {
        "commit_hash": "392fa7a952e97d82eac6958c81ed1e256e6b8ca5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/392fa7a952e97d82eac6958c81ed1e256e6b8ca5",
        "files": [
          "ssl/s23_srvr.c"
        ],
        "message": "Keep old method in case of an unsupported protocol\n\nWhen we're configured with no-ssl3 and we receive an SSL v3 Client Hello, we set\nthe method to NULL.  We didn't used to do that, and it breaks things.  This is a\nregression introduced in 62f45cc27d07187b59551e4fad3db4e52ea73f2c.  Keep the old\nmethod since the code is not able to deal with a NULL method at this time.\n\nCVE-2014-3569, PR#3571\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/s23_srvr.c||ssl/s23_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ],
          "candidate": [
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s23_srvr.c||ssl/s23_srvr.c": [
          "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "615:  if ((type == 2) || (type == 3))",
          "616:   {",
          "620:    {",
          "621:    SSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,SSL_R_UNSUPPORTED_PROTOCOL);",
          "622:    goto err;",
          "623:    }",
          "625:   if (!ssl_init_wbio_buffer(s,1)) goto err;",
          "",
          "[Removed Lines]",
          "618:                 s->method = ssl23_get_server_method(s->version);",
          "619:   if (s->method == NULL)",
          "",
          "[Added Lines]",
          "618:   const SSL_METHOD *new_method;",
          "619:   new_method = ssl23_get_server_method(s->version);",
          "620:   if (new_method == NULL)",
          "625:   s->method = new_method;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bbcd6d7fe263361f18060c40cac676d6a6193ead",
      "candidate_info": {
        "commit_hash": "bbcd6d7fe263361f18060c40cac676d6a6193ead",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/bbcd6d7fe263361f18060c40cac676d6a6193ead",
        "files": [
          "ssl/record/rec_layer.h",
          "ssl/record/s3_pkt.c",
          "ssl/record/ssl3_buffer.c",
          "ssl/record/ssl3_buffer.h",
          "ssl/s23_clnt.c",
          "ssl/s23_srvr.c"
        ],
        "message": "Provide RECORD_LAYER_set_data function\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/record/rec_layer.h||ssl/record/rec_layer.h",
          "ssl/record/s3_pkt.c||ssl/record/s3_pkt.c",
          "ssl/record/ssl3_buffer.c||ssl/record/ssl3_buffer.c",
          "ssl/record/ssl3_buffer.h||ssl/record/ssl3_buffer.h",
          "ssl/s23_clnt.c||ssl/s23_clnt.c",
          "ssl/s23_srvr.c||ssl/s23_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s23_clnt.c||ssl/s23_clnt.c",
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ],
          "candidate": [
            "ssl/s23_clnt.c||ssl/s23_clnt.c",
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/record/rec_layer.h||ssl/record/rec_layer.h": [
          "File: ssl/record/rec_layer.h -> ssl/record/rec_layer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: void RECORD_LAYER_release(RECORD_LAYER *rl);",
          "171: int RECORD_LAYER_read_pending(RECORD_LAYER *rl);",
          "172: int RECORD_LAYER_write_pending(RECORD_LAYER *rl);",
          "173: __owur int ssl23_read_bytes(SSL *s, int n);",
          "174: __owur int ssl23_write_bytes(SSL *s);",
          "175: __owur int ssl3_write_bytes(SSL *s, int type, const void *buf, int len);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173: int RECORD_LAYER_set_data(RECORD_LAYER *rl, const unsigned char *buf, int len);",
          "",
          "---------------"
        ],
        "ssl/record/s3_pkt.c||ssl/record/s3_pkt.c": [
          "File: ssl/record/s3_pkt.c -> ssl/record/s3_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "178:     return SSL3_BUFFER_get_left(&rl->wbuf) != 0;",
          "179: }",
          "181: int ssl3_read_n(SSL *s, int n, int max, int extend)",
          "182: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "181: int RECORD_LAYER_set_data(RECORD_LAYER *rl, const unsigned char *buf, int len)",
          "182: {",
          "183:     rl->s->packet_length = len;",
          "184:     if(len != 0) {",
          "185:         rl->s->rstate = SSL_ST_READ_HEADER;",
          "186:         if (!SSL3_BUFFER_is_initialised(&rl->rbuf))",
          "187:             if (!ssl3_setup_read_buffer(rl->s))",
          "188:                 return 0;",
          "189:     }",
          "191:     rl->s->packet = SSL3_BUFFER_get_buf(&rl->rbuf);",
          "192:     SSL3_BUFFER_set_data(&rl->rbuf, buf, len);",
          "194:     return 1;",
          "195: }",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_buffer.c||ssl/record/ssl3_buffer.c": [
          "File: ssl/record/ssl3_buffer.c -> ssl/record/ssl3_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: #include \"../ssl_locl.h\"",
          "115: {",
          "116:     if(d != NULL)",
          "117:         memcpy(b->buf, d, n);",
          "",
          "[Removed Lines]",
          "114: void SSL3_BUFFER_set_data(SSL3_BUFFER *b, unsigned char *d, int n)",
          "",
          "[Added Lines]",
          "114: void SSL3_BUFFER_set_data(SSL3_BUFFER *b, const unsigned char *d, int n)",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_buffer.h||ssl/record/ssl3_buffer.h": [
          "File: ssl/record/ssl3_buffer.h -> ssl/record/ssl3_buffer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "127: #define SSL3_BUFFER_get_left(b)             ((b)->left)",
          "128: #define SSL3_BUFFER_is_initialised(b)       ((b)->buf != NULL)",
          "131: void SSL3_BUFFER_release(SSL3_BUFFER *b);",
          "132: __owur int ssl3_setup_buffers(SSL *s);",
          "133: __owur int ssl3_setup_read_buffer(SSL *s);",
          "",
          "[Removed Lines]",
          "130: void SSL3_BUFFER_set_data(SSL3_BUFFER *b, unsigned char *d, int n);",
          "",
          "[Added Lines]",
          "130: void SSL3_BUFFER_set_data(SSL3_BUFFER *b, const unsigned char *d, int n);",
          "",
          "---------------"
        ],
        "ssl/s23_clnt.c||ssl/s23_clnt.c": [
          "File: ssl/s23_clnt.c -> ssl/s23_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:         s->handshake_func = s->method->ssl_connect;",
          "585:     } else {",
          "",
          "[Removed Lines]",
          "576:         s->rstate = SSL_ST_READ_HEADER;",
          "577:         s->packet_length = n;",
          "578:         if (!SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer)))",
          "579:             if (!ssl3_setup_read_buffer(s))",
          "580:                 goto err;",
          "581:         s->packet = SSL3_BUFFER_get_buf(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "582:         SSL3_BUFFER_set_data(RECORD_LAYER_get_rbuf(&s->rlayer), buf, n);",
          "",
          "[Added Lines]",
          "576:         if(!RECORD_LAYER_set_data(&s->rlayer, buf, n))",
          "577:             goto err;",
          "",
          "---------------"
        ],
        "ssl/s23_srvr.c||ssl/s23_srvr.c": [
          "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:         } else {",
          "570:         }",
          "571:         s->handshake_func = s->method->ssl_accept;",
          "572:     } else {",
          "",
          "[Removed Lines]",
          "559:             s->rstate = SSL_ST_READ_HEADER;",
          "560:             s->packet_length = n;",
          "561:             if (!SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer)))",
          "562:                 if (!ssl3_setup_read_buffer(s))",
          "563:                     goto err;",
          "565:             s->packet = SSL3_BUFFER_get_buf(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "566:             SSL3_BUFFER_set_data(RECORD_LAYER_get_rbuf(&s->rlayer), buf, n);",
          "568:             s->packet_length = 0;",
          "569:             SSL3_BUFFER_set_data(RECORD_LAYER_get_rbuf(&s->rlayer), NULL, 0);",
          "",
          "[Added Lines]",
          "559:             if(!RECORD_LAYER_set_data(&s->rlayer, buf, n))",
          "560:                 goto err;",
          "562:             if(!RECORD_LAYER_set_data(&s->rlayer, NULL, 0))",
          "563:                 goto err;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "28d59af8740680c89e22ac19304457f2163e4371",
      "candidate_info": {
        "commit_hash": "28d59af8740680c89e22ac19304457f2163e4371",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/28d59af8740680c89e22ac19304457f2163e4371",
        "files": [
          "ssl/Makefile",
          "ssl/d1_pkt.c",
          "ssl/record/rec_layer.h",
          "ssl/record/ssl3_buffer.c",
          "ssl/record/ssl3_buffer.h",
          "ssl/s23_clnt.c",
          "ssl/s23_srvr.c",
          "ssl/s3_both.c",
          "ssl/s3_lib.c",
          "ssl/s3_pkt.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h"
        ],
        "message": "Encapsulate SSL3_BUFFER and all access to s->s3->rbuf.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_pkt.c||ssl/d1_pkt.c",
          "ssl/record/rec_layer.h||ssl/record/rec_layer.h",
          "ssl/record/ssl3_buffer.c||ssl/record/ssl3_buffer.c",
          "ssl/record/ssl3_buffer.h||ssl/record/ssl3_buffer.h",
          "ssl/s23_clnt.c||ssl/s23_clnt.c",
          "ssl/s23_srvr.c||ssl/s23_srvr.c",
          "ssl/s3_both.c||ssl/s3_both.c",
          "ssl/s3_lib.c||ssl/s3_lib.c",
          "ssl/s3_pkt.c||ssl/s3_pkt.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s23_clnt.c||ssl/s23_clnt.c",
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ],
          "candidate": [
            "ssl/s23_clnt.c||ssl/s23_clnt.c",
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_pkt.c||ssl/d1_pkt.c": [
          "File: ssl/d1_pkt.c -> ssl/d1_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "199:     rdata = (DTLS1_RECORD_DATA *)item->data;",
          "204:     s->packet = rdata->packet;",
          "205:     s->packet_length = rdata->packet_length;",
          "207:     memcpy(&(s->s3->rrec), &(rdata->rrec), sizeof(SSL3_RECORD));",
          "",
          "[Removed Lines]",
          "201:     if (s->s3->rbuf.buf != NULL)",
          "202:         OPENSSL_free(s->s3->rbuf.buf);",
          "206:     memcpy(&(s->s3->rbuf), &(rdata->rbuf), sizeof(SSL3_BUFFER));",
          "",
          "[Added Lines]",
          "201:     SSL3_BUFFER_release(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "205:     memcpy(RECORD_LAYER_get_rbuf(&s->rlayer), &(rdata->rbuf),",
          "206:         sizeof(SSL3_BUFFER));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "237:     rdata->packet = s->packet;",
          "238:     rdata->packet_length = s->packet_length;",
          "240:     memcpy(&(rdata->rrec), &(s->s3->rrec), sizeof(SSL3_RECORD));",
          "242:     item->data = rdata;",
          "",
          "[Removed Lines]",
          "239:     memcpy(&(rdata->rbuf), &(s->s3->rbuf), sizeof(SSL3_BUFFER));",
          "",
          "[Added Lines]",
          "239:     memcpy(&(rdata->rbuf), RECORD_LAYER_get_rbuf(&s->rlayer),",
          "240:         sizeof(SSL3_BUFFER));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254:     s->packet = NULL;",
          "255:     s->packet_length = 0;",
          "257:     memset(&(s->s3->rrec), 0, sizeof(SSL3_RECORD));",
          "259:     if (!ssl3_setup_buffers(s)) {",
          "",
          "[Removed Lines]",
          "256:     memset(&(s->s3->rbuf), 0, sizeof(SSL3_BUFFER));",
          "",
          "[Added Lines]",
          "257:     memset(RECORD_LAYER_get_rbuf(&s->rlayer), 0, sizeof(SSL3_BUFFER));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "545:     if ((s->rstate != SSL_ST_READ_BODY) ||",
          "546:         (s->packet_length < DTLS1_RT_HEADER_LENGTH)) {",
          "549:         if (n <= 0)",
          "",
          "[Removed Lines]",
          "547:         n = ssl3_read_n(s, DTLS1_RT_HEADER_LENGTH, s->s3->rbuf.len, 0);",
          "",
          "[Added Lines]",
          "548:         n = ssl3_read_n(s, DTLS1_RT_HEADER_LENGTH,",
          "549:             SSL3_BUFFER_get_len(RECORD_LAYER_get_rbuf(&s->rlayer)), 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "722:     SSL3_RECORD *rr;",
          "723:     void (*cb) (const SSL *ssl, int type2, int val) = NULL;",
          "726:         if (!ssl3_setup_buffers(s))",
          "727:             return (-1);",
          "729:     if ((type && (type != SSL3_RT_APPLICATION_DATA) &&",
          "730:          (type != SSL3_RT_HANDSHAKE)) ||",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "727:     if (!SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer))) {",
          "731:     }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1047:                 }",
          "1049:                 if (!(s->mode & SSL_MODE_AUTO_RETRY)) {",
          "1051:                         BIO *bio;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1054:                     if (SSL3_BUFFER_get_left(",
          "1055:                         RECORD_LAYER_get_rbuf(&s->rlayer)) == 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1269:         }",
          "1271:         if (!(s->mode & SSL_MODE_AUTO_RETRY)) {",
          "1273:                 BIO *bio;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1278:             if (SSL3_BUFFER_get_left(",
          "1279:                 RECORD_LAYER_get_rbuf(&s->rlayer)) == 0) {",
          "",
          "---------------"
        ],
        "ssl/record/rec_layer.h||ssl/record/rec_layer.h": [
          "File: ssl/record/rec_layer.h -> ssl/record/rec_layer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: typedef struct record_layer_st {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "114:     SSL *s;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:     int read_ahead;",
          "118: } RECORD_LAYER;",
          "120: #define RECORD_LAYER_set_read_ahead(rl, ra)     ((rl)->read_ahead = (ra))",
          "121: #define RECORD_LAYER_get_read_ahead(rl)         ((rl)->read_ahead)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: #define RECORD_LAYER_set_ssl(rl, s)             ((rl)->s = (s))",
          "125: #define RECORD_LAYER_get_rbuf(rl)               (&(rl)->s->s3->rbuf)",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_buffer.c||ssl/record/ssl3_buffer.c": [
          "File: ssl/record/ssl3_buffer.c -> ssl/record/ssl3_buffer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: #include \"../ssl_locl.h\"",
          "114: void SSL3_BUFFER_set_data(SSL3_BUFFER *b, unsigned char *d, int n)",
          "115: {",
          "116:     if(d != NULL)",
          "117:         memcpy(b->buf, d, n);",
          "118:     b->left = n;",
          "119:     b->offset = 0;",
          "120: }",
          "122: void SSL3_BUFFER_release(SSL3_BUFFER *b)",
          "123: {",
          "124:     if (b->buf != NULL)",
          "125:         OPENSSL_free(b->buf);",
          "126:     b->buf = NULL;",
          "127: }",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_buffer.h||ssl/record/ssl3_buffer.h": [
          "File: ssl/record/ssl3_buffer.h -> ssl/record/ssl3_buffer.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "112: typedef struct ssl3_buffer_st {",
          "114:     unsigned char *buf;",
          "116:     size_t len;",
          "118:     int offset;",
          "120:     int left;",
          "121: } SSL3_BUFFER;",
          "123: #define SSL3_BUFFER_get_buf(b)              ((b)->buf)",
          "124: #define SSL3_BUFFER_set_buf(b, n)           ((b)->buf = (n))",
          "125: #define SSL3_BUFFER_get_len(b)              ((b)->len)",
          "126: #define SSL3_BUFFER_set_len(b, l)           ((b)->len = (l))",
          "127: #define SSL3_BUFFER_get_left(b)             ((b)->left)",
          "128: #define SSL3_BUFFER_is_initialised(b)       ((b)->buf != NULL)",
          "130: void SSL3_BUFFER_set_data(SSL3_BUFFER *b, unsigned char *d, int n);",
          "131: void SSL3_BUFFER_release(SSL3_BUFFER *b);",
          "",
          "---------------"
        ],
        "ssl/s23_clnt.c||ssl/s23_clnt.c": [
          "File: ssl/s23_clnt.c -> ssl/s23_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "482: static int ssl23_get_server_hello(SSL *s)",
          "483: {",
          "485:     unsigned char *p;",
          "486:     int i;",
          "487:     int n;",
          "",
          "[Removed Lines]",
          "484:     char buf[8];",
          "",
          "[Added Lines]",
          "484:     unsigned char buf[8];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "576:         s->rstate = SSL_ST_READ_HEADER;",
          "577:         s->packet_length = n;",
          "579:             if (!ssl3_setup_read_buffer(s))",
          "580:                 goto err;",
          "586:         s->handshake_func = s->method->ssl_connect;",
          "587:     } else {",
          "",
          "[Removed Lines]",
          "578:         if (s->s3->rbuf.buf == NULL)",
          "581:         s->packet = &(s->s3->rbuf.buf[0]);",
          "582:         memcpy(s->packet, buf, n);",
          "583:         s->s3->rbuf.left = n;",
          "584:         s->s3->rbuf.offset = 0;",
          "",
          "[Added Lines]",
          "578:         if (!SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer)))",
          "581:         s->packet = SSL3_BUFFER_get_buf(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "582:         SSL3_BUFFER_set_data(RECORD_LAYER_get_rbuf(&s->rlayer), buf, n);",
          "",
          "---------------"
        ],
        "ssl/s23_srvr.c||ssl/s23_srvr.c": [
          "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:     unsigned char *p, *d, *d_len, *dd;",
          "250:     unsigned int i;",
          "251:     unsigned int csl, sil, cl;",
          "",
          "[Removed Lines]",
          "247:     char buf_space[11];",
          "248:     char *buf = &(buf_space[0]);",
          "",
          "[Added Lines]",
          "247:     unsigned char buf_space[11];",
          "248:     unsigned char *buf = &(buf_space[0]);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "559:             s->rstate = SSL_ST_READ_HEADER;",
          "560:             s->packet_length = n;",
          "562:                 if (!ssl3_setup_read_buffer(s))",
          "563:                     goto err;",
          "569:         } else {",
          "570:             s->packet_length = 0;",
          "573:         }",
          "574:         s->handshake_func = s->method->ssl_accept;",
          "575:     } else {",
          "",
          "[Removed Lines]",
          "561:             if (s->s3->rbuf.buf == NULL)",
          "565:             s->packet = &(s->s3->rbuf.buf[0]);",
          "566:             memcpy(s->packet, buf, n);",
          "567:             s->s3->rbuf.left = n;",
          "568:             s->s3->rbuf.offset = 0;",
          "571:             s->s3->rbuf.left = 0;",
          "572:             s->s3->rbuf.offset = 0;",
          "",
          "[Added Lines]",
          "561:             if (!SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer)))",
          "565:             s->packet = SSL3_BUFFER_get_buf(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "566:             SSL3_BUFFER_set_data(RECORD_LAYER_get_rbuf(&s->rlayer), buf, n);",
          "569:             SSL3_BUFFER_set_data(RECORD_LAYER_get_rbuf(&s->rlayer), NULL, 0);",
          "",
          "---------------"
        ],
        "ssl/s3_both.c||ssl/s3_both.c": [
          "File: ssl/s3_both.c -> ssl/s3_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "577: {",
          "578:     unsigned char *p;",
          "579:     size_t len, align = 0, headerlen;",
          "581:     if (SSL_version(s) == DTLS1_VERSION || SSL_version(s) == DTLS1_BAD_VER)",
          "582:         headerlen = DTLS1_RT_HEADER_LENGTH;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "580:     SSL3_BUFFER *b;",
          "582:     b = RECORD_LAYER_get_rbuf(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "587:     align = (-SSL3_RT_HEADER_LENGTH) & (SSL3_ALIGN_PAYLOAD - 1);",
          "588: #endif",
          "591:         len = SSL3_RT_MAX_PLAIN_LENGTH",
          "592:             + SSL3_RT_MAX_ENCRYPTED_OVERHEAD + headerlen + align;",
          "593:         if (s->options & SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER) {",
          "",
          "[Removed Lines]",
          "590:     if (s->s3->rbuf.buf == NULL) {",
          "",
          "[Added Lines]",
          "593:     if (b->buf == NULL) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "600: #endif",
          "601:         if ((p = OPENSSL_malloc(len)) == NULL)",
          "602:             goto err;",
          "605:     }",
          "608:     return 1;",
          "610:  err:",
          "",
          "[Removed Lines]",
          "603:         s->s3->rbuf.buf = p;",
          "604:         s->s3->rbuf.len = len;",
          "607:     s->packet = &(s->s3->rbuf.buf[0]);",
          "",
          "[Added Lines]",
          "606:         b->buf = p;",
          "607:         b->len = len;",
          "610:     s->packet = &(b->buf[0]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "670: int ssl3_release_read_buffer(SSL *s)",
          "671: {",
          "675:     }",
          "676:     return 1;",
          "677: }",
          "",
          "[Removed Lines]",
          "672:     if (s->s3->rbuf.buf != NULL) {",
          "673:         OPENSSL_free(s->s3->rbuf.buf);",
          "674:         s->s3->rbuf.buf = NULL;",
          "",
          "[Added Lines]",
          "675:     SSL3_BUFFER *b;",
          "677:     b = RECORD_LAYER_get_rbuf(&s->rlayer);",
          "678:     if (b->buf != NULL) {",
          "679:         OPENSSL_free(b->buf);",
          "680:         b->buf = NULL;",
          "",
          "---------------"
        ],
        "ssl/s3_lib.c||ssl/s3_lib.c": [
          "File: ssl/s3_lib.c -> ssl/s3_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3131:         return;",
          "3133:     ssl3_cleanup_key_block(s);",
          "3135:         ssl3_release_read_buffer(s);",
          "3136:     if (s->s3->wbuf.buf != NULL)",
          "3137:         ssl3_release_write_buffer(s);",
          "",
          "[Removed Lines]",
          "3134:     if (s->s3->rbuf.buf != NULL)",
          "",
          "[Added Lines]",
          "3134:     if (SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer)))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3194:     wp = s->s3->wbuf.buf;",
          "3196:     wlen = s->s3->wbuf.len;",
          "3197:     init_extra = s->s3->init_extra;",
          "3198:     BIO_free(s->s3->handshake_buffer);",
          "",
          "[Removed Lines]",
          "3193:     rp = s->s3->rbuf.buf;",
          "3195:     rlen = s->s3->rbuf.len;",
          "",
          "[Added Lines]",
          "3193:     rp = SSL3_BUFFER_get_buf(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "3195:     rlen = SSL3_BUFFER_get_len(RECORD_LAYER_get_rbuf(&s->rlayer));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3207:     }",
          "3208: #endif",
          "3209:     memset(s->s3, 0, sizeof *s->s3);",
          "3211:     s->s3->wbuf.buf = wp;",
          "3213:     s->s3->wbuf.len = wlen;",
          "3214:     s->s3->init_extra = init_extra;",
          "",
          "[Removed Lines]",
          "3210:     s->s3->rbuf.buf = rp;",
          "3212:     s->s3->rbuf.len = rlen;",
          "",
          "[Added Lines]",
          "3210:     SSL3_BUFFER_set_buf(RECORD_LAYER_get_rbuf(&s->rlayer), rp);",
          "3212:     SSL3_BUFFER_set_len(RECORD_LAYER_get_rbuf(&s->rlayer), rlen);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4494:     int ret = 0;",
          "4496:     if (s->s3->renegotiate) {",
          "4498:             (s->s3->wbuf.left == 0) && !SSL_in_init(s)) {",
          "",
          "[Removed Lines]",
          "4497:         if ((s->s3->rbuf.left == 0) &&",
          "",
          "[Added Lines]",
          "4497:         if ((SSL3_BUFFER_get_left(RECORD_LAYER_get_rbuf(&s->rlayer)) == 0) &&",
          "",
          "---------------"
        ],
        "ssl/s3_pkt.c||ssl/s3_pkt.c": [
          "File: ssl/s3_pkt.c -> ssl/s3_pkt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:     if (n <= 0)",
          "154:         return n;",
          "157:     if (rb->buf == NULL)",
          "158:         if (!ssl3_setup_read_buffer(s))",
          "159:             return -1;",
          "",
          "[Removed Lines]",
          "156:     rb = &(s->s3->rbuf);",
          "",
          "[Added Lines]",
          "156:     rb = RECORD_LAYER_get_rbuf(&s->rlayer);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "337:     if ((s->rstate != SSL_ST_READ_BODY) ||",
          "338:         (s->packet_length < SSL3_RT_HEADER_LENGTH)) {",
          "340:         if (n <= 0)",
          "342:         s->rstate = SSL_ST_READ_BODY;",
          "",
          "[Removed Lines]",
          "339:         n = ssl3_read_n(s, SSL3_RT_HEADER_LENGTH, s->s3->rbuf.len, 0);",
          "",
          "[Added Lines]",
          "339:         n = ssl3_read_n(s, SSL3_RT_HEADER_LENGTH,",
          "340:             SSL3_BUFFER_get_len(RECORD_LAYER_get_rbuf(&s->rlayer)), 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "373:             goto err;",
          "374:         }",
          "377:             al = SSL_AD_RECORD_OVERFLOW;",
          "378:             SSLerr(SSL_F_SSL3_GET_RECORD, SSL_R_PACKET_LENGTH_TOO_LONG);",
          "379:             goto f_err;",
          "",
          "[Removed Lines]",
          "376:         if (rr->length > s->s3->rbuf.len - SSL3_RT_HEADER_LENGTH) {",
          "",
          "[Added Lines]",
          "377:         if (rr->length >",
          "378:                 SSL3_BUFFER_get_len(RECORD_LAYER_get_rbuf(&s->rlayer))",
          "379:                 - SSL3_RT_HEADER_LENGTH) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1174:     SSL3_RECORD *rr;",
          "1175:     void (*cb) (const SSL *ssl, int type2, int val) = NULL;",
          "1178:         if (!ssl3_setup_read_buffer(s))",
          "1179:             return (-1);",
          "1181:     if ((type && (type != SSL3_RT_APPLICATION_DATA)",
          "1182:          && (type != SSL3_RT_HANDSHAKE)) || (peek",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1180:     if (!SSL3_BUFFER_is_initialised(RECORD_LAYER_get_rbuf(&s->rlayer))) {",
          "1184:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1288:                 s->rstate = SSL_ST_READ_HEADER;",
          "1289:                 rr->off = 0;",
          "1290:                 if (s->mode & SSL_MODE_RELEASE_BUFFERS",
          "1292:                     ssl3_release_read_buffer(s);",
          "1293:             }",
          "1294:         }",
          "",
          "[Removed Lines]",
          "1291:                     && s->s3->rbuf.left == 0)",
          "",
          "[Added Lines]",
          "1296:                     && SSL3_BUFFER_get_left(",
          "1297:                         RECORD_LAYER_get_rbuf(&s->rlayer)) == 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1391:                 }",
          "1393:                 if (!(s->mode & SSL_MODE_AUTO_RETRY)) {",
          "1395:                         BIO *bio;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1400:                     if (SSL3_BUFFER_get_left(",
          "1401:                         RECORD_LAYER_get_rbuf(&s->rlayer)) == 0) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1563:         }",
          "1565:         if (!(s->mode & SSL_MODE_AUTO_RETRY)) {",
          "1567:                 BIO *bio;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1574:             if (SSL3_BUFFER_get_left(RECORD_LAYER_get_rbuf(&s->rlayer)) == 0) {",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "280:         goto err;",
          "281:     memset(s, 0, sizeof(SSL));",
          "283: #ifndef OPENSSL_NO_KRB5",
          "284:     s->kssl_ctx = kssl_ctx_new();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "283:     RECORD_LAYER_set_ssl(&s->rlayer, s);",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "166: # include <openssl/symhacks.h>",
          "168: #include \"record/rec_layer.h\"",
          "170: # ifdef OPENSSL_BUILD_SHLIBSSL",
          "171: #  undef OPENSSL_EXTERN",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169: #include \"record/ssl3_buffer.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "979:     int type;",
          "981:     const SSL_METHOD *method;",
          "",
          "[Removed Lines]",
          "983:     RECORD_LAYER rlayer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1222:     int (*not_resumable_session_cb) (SSL *ssl, int is_forward_secure);",
          "1223: };",
          "1225: typedef struct ssl3_record_st {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1223:     RECORD_LAYER rlayer;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1265: } SSL3_RECORD;",
          "1278: typedef struct ssl3_state_st {",
          "1279:     long flags;",
          "1280:     int delay_buf_pop_ret;",
          "",
          "[Removed Lines]",
          "1267: typedef struct ssl3_buffer_st {",
          "1269:     unsigned char *buf;",
          "1271:     size_t len;",
          "1273:     int offset;",
          "1275:     int left;",
          "1276: } SSL3_BUFFER;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9bf3ff1ca06e1bc8bd0c0cc52a9b92ac20f21c83",
      "candidate_info": {
        "commit_hash": "9bf3ff1ca06e1bc8bd0c0cc52a9b92ac20f21c83",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/9bf3ff1ca06e1bc8bd0c0cc52a9b92ac20f21c83",
        "files": [
          "ssl/s23_clnt.c",
          "ssl/s23_srvr.c"
        ],
        "message": "Fix no-ssl3 configuration option\n\nCVE-2014-3568\n\nReviewed-by: Emilia Kasper <emilia@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/s23_clnt.c||ssl/s23_clnt.c",
          "ssl/s23_srvr.c||ssl/s23_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s23_clnt.c||ssl/s23_clnt.c",
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ],
          "candidate": [
            "ssl/s23_clnt.c||ssl/s23_clnt.c",
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s23_clnt.c||ssl/s23_clnt.c": [
          "File: ssl/s23_clnt.c -> ssl/s23_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:  if (ver == SSL2_VERSION)",
          "126:   return(SSLv2_client_method());",
          "127: #endif",
          "128:  if (ver == SSL3_VERSION)",
          "129:   return(SSLv3_client_method());",
          "131:   return(TLSv1_client_method());",
          "132:  else",
          "133:   return(NULL);",
          "",
          "[Removed Lines]",
          "130:  else if (ver == TLS1_VERSION)",
          "",
          "[Added Lines]",
          "128: #ifndef OPENSSL_NO_SSL3",
          "131: #endif",
          "132:  if (ver == TLS1_VERSION)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "614:   {",
          "617:   if ((p[2] == SSL3_VERSION_MINOR) &&",
          "618:    !(s->options & SSL_OP_NO_SSLv3))",
          "619:    {",
          "620:    s->version=SSL3_VERSION;",
          "621:    s->method=SSLv3_client_method();",
          "622:    }",
          "624:    !(s->options & SSL_OP_NO_TLSv1))",
          "625:    {",
          "626:    s->version=TLS1_VERSION;",
          "",
          "[Removed Lines]",
          "623:   else if ((p[2] == TLS1_VERSION_MINOR) &&",
          "",
          "[Added Lines]",
          "619: #ifndef OPENSSL_NO_SSL3",
          "626:   else",
          "627: #endif",
          "628:   if ((p[2] == TLS1_VERSION_MINOR) &&",
          "",
          "---------------"
        ],
        "ssl/s23_srvr.c||ssl/s23_srvr.c": [
          "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "124:  if (ver == SSL2_VERSION)",
          "125:   return(SSLv2_server_method());",
          "126: #endif",
          "127:  if (ver == SSL3_VERSION)",
          "128:   return(SSLv3_server_method());",
          "130:   return(TLSv1_server_method());",
          "131:  else",
          "132:   return(NULL);",
          "",
          "[Removed Lines]",
          "129:  else if (ver == TLS1_VERSION)",
          "",
          "[Added Lines]",
          "127: #ifndef OPENSSL_NO_SSL3",
          "130: #endif",
          "131:  if (ver == TLS1_VERSION)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "559:  if ((type == 2) || (type == 3))",
          "560:   {",
          "563:   if (!ssl_init_wbio_buffer(s,1)) goto err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "564:                 s->method = ssl23_get_server_method(s->version);",
          "565:   if (s->method == NULL)",
          "566:    {",
          "567:    SSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,SSL_R_UNSUPPORTED_PROTOCOL);",
          "568:    goto err;",
          "569:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "586:    s->s3->rbuf.left=0;",
          "587:    s->s3->rbuf.offset=0;",
          "588:    }",
          "595:   s->client_version=(v[0]<<8)|v[1];",
          "596: #endif",
          "",
          "[Removed Lines]",
          "590:   if (s->version == TLS1_VERSION)",
          "591:    s->method = TLSv1_server_method();",
          "592:   else",
          "593:    s->method = SSLv3_server_method();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82180dcc0a3c25bc806a3ba73e49deb00f5c1339",
      "candidate_info": {
        "commit_hash": "82180dcc0a3c25bc806a3ba73e49deb00f5c1339",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/82180dcc0a3c25bc806a3ba73e49deb00f5c1339",
        "files": [
          "ssl/s23_clnt.c",
          "ssl/s23_srvr.c"
        ],
        "message": "Fix no-ssl3 configuration option\n\nCVE-2014-3568\n\nReviewed-by: Emilia Kasper <emilia@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/s23_clnt.c||ssl/s23_clnt.c",
          "ssl/s23_srvr.c||ssl/s23_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/s23_clnt.c||ssl/s23_clnt.c",
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ],
          "candidate": [
            "ssl/s23_clnt.c||ssl/s23_clnt.c",
            "ssl/s23_srvr.c||ssl/s23_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/s23_clnt.c||ssl/s23_clnt.c": [
          "File: ssl/s23_clnt.c -> ssl/s23_clnt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "125:  if (ver == SSL2_VERSION)",
          "126:   return(SSLv2_client_method());",
          "127: #endif",
          "128:  if (ver == SSL3_VERSION)",
          "129:   return(SSLv3_client_method());",
          "131:   return(TLSv1_client_method());",
          "132:  else if (ver == TLS1_1_VERSION)",
          "133:   return(TLSv1_1_client_method());",
          "",
          "[Removed Lines]",
          "130:  else if (ver == TLS1_VERSION)",
          "",
          "[Added Lines]",
          "128: #ifndef OPENSSL_NO_SSL3",
          "131: #endif",
          "132:  if (ver == TLS1_VERSION)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "710:   {",
          "713:   if ((p[2] == SSL3_VERSION_MINOR) &&",
          "714:    !(s->options & SSL_OP_NO_SSLv3))",
          "715:    {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "715: #ifndef OPENSSL_NO_SSL3",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "724:    s->version=SSL3_VERSION;",
          "725:    s->method=SSLv3_client_method();",
          "726:    }",
          "728:    !(s->options & SSL_OP_NO_TLSv1))",
          "729:    {",
          "730:    s->version=TLS1_VERSION;",
          "",
          "[Removed Lines]",
          "727:   else if ((p[2] == TLS1_VERSION_MINOR) &&",
          "",
          "[Added Lines]",
          "730:   else",
          "731: #endif",
          "732:   if ((p[2] == TLS1_VERSION_MINOR) &&",
          "",
          "---------------"
        ],
        "ssl/s23_srvr.c||ssl/s23_srvr.c": [
          "File: ssl/s23_srvr.c -> ssl/s23_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:  if (ver == SSL2_VERSION)",
          "128:   return(SSLv2_server_method());",
          "129: #endif",
          "130:  if (ver == SSL3_VERSION)",
          "131:   return(SSLv3_server_method());",
          "133:   return(TLSv1_server_method());",
          "134:  else if (ver == TLS1_1_VERSION)",
          "135:   return(TLSv1_1_server_method());",
          "",
          "[Removed Lines]",
          "132:  else if (ver == TLS1_VERSION)",
          "",
          "[Added Lines]",
          "130: #ifndef OPENSSL_NO_SSL3",
          "133: #endif",
          "134:  if (ver == TLS1_VERSION)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "607:  if ((type == 2) || (type == 3))",
          "608:   {",
          "611:   if (!ssl_init_wbio_buffer(s,1)) goto err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "612:                 s->method = ssl23_get_server_method(s->version);",
          "613:   if (s->method == NULL)",
          "614:    {",
          "615:    SSLerr(SSL_F_SSL23_GET_CLIENT_HELLO,SSL_R_UNSUPPORTED_PROTOCOL);",
          "616:    goto err;",
          "617:    }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "634:    s->s3->rbuf.left=0;",
          "635:    s->s3->rbuf.offset=0;",
          "636:    }",
          "646:   s->client_version=(v[0]<<8)|v[1];",
          "647: #endif",
          "",
          "[Removed Lines]",
          "637:   if (s->version == TLS1_2_VERSION)",
          "638:    s->method = TLSv1_2_server_method();",
          "639:   else if (s->version == TLS1_1_VERSION)",
          "640:    s->method = TLSv1_1_server_method();",
          "641:   else if (s->version == TLS1_VERSION)",
          "642:    s->method = TLSv1_server_method();",
          "643:   else",
          "644:    s->method = SSLv3_server_method();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}