{
  "cve_id": "CVE-2015-8867",
  "cve_desc": "The openssl_random_pseudo_bytes function in ext/openssl/openssl.c in PHP before 5.4.44, 5.5.x before 5.5.28, and 5.6.x before 5.6.12 incorrectly relies on the deprecated RAND_pseudo_bytes function, which makes it easier for remote attackers to defeat cryptographic protection mechanisms via unspecified vectors.",
  "repo": "php/php-src",
  "patch_hash": "16023f3e3b9c06cf677c3c980e8d574e4c162827",
  "patch_info": {
    "commit_hash": "16023f3e3b9c06cf677c3c980e8d574e4c162827",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/16023f3e3b9c06cf677c3c980e8d574e4c162827",
    "files": [
      "ext/openssl/openssl.c"
    ],
    "message": "Fix bug #70014 - use RAND_bytes instead of deprecated RAND_pseudo_bytes",
    "before_after_code_files": [
      "ext/openssl/openssl.c||ext/openssl/openssl.c"
    ]
  },
  "patch_diff": {
    "ext/openssl/openssl.c||ext/openssl/openssl.c": [
      "File: ext/openssl/openssl.c -> ext/openssl/openssl.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5070:  long buffer_length;",
      "5071:  unsigned char *buffer = NULL;",
      "5072:  zval *zstrong_result_returned = NULL;",
      "5075:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l|z\", &buffer_length, &zstrong_result_returned) == FAILURE) {",
      "5076:   return;",
      "",
      "[Removed Lines]",
      "5073:  int strong_result = 0;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "5088:  buffer = emalloc(buffer_length + 1);",
      "5090: #ifdef PHP_WIN32",
      "5093:  if (php_win32_get_random_bytes(buffer, (size_t) buffer_length) == FAILURE) {",
      "5094:   efree(buffer);",
      "",
      "[Removed Lines]",
      "5091:  strong_result = 1;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "5098:   RETURN_FALSE;",
      "5099:  }",
      "5100: #else",
      "5102:   efree(buffer);",
      "5103:   if (zstrong_result_returned) {",
      "5104:    ZVAL_BOOL(zstrong_result_returned, 0);",
      "",
      "[Removed Lines]",
      "5101:  if ((strong_result = RAND_pseudo_bytes(buffer, buffer_length)) < 0) {",
      "",
      "[Added Lines]",
      "5099:  if (RAND_bytes(buffer, buffer_length) <= 0) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "5111:  RETVAL_STRINGL((char *)buffer, buffer_length, 0);",
      "5113:  if (zstrong_result_returned) {",
      "5115:  }",
      "5116: }",
      "",
      "[Removed Lines]",
      "5114:   ZVAL_BOOL(zstrong_result_returned, strong_result);",
      "",
      "[Added Lines]",
      "5112:   ZVAL_BOOL(zstrong_result_returned, 1);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f3abea9f915a85dea00ba809751697c029ed75a2",
      "candidate_info": {
        "commit_hash": "f3abea9f915a85dea00ba809751697c029ed75a2",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/f3abea9f915a85dea00ba809751697c029ed75a2",
        "files": [
          "ext/openssl/openssl.c"
        ],
        "message": "Fix some int overflows in openssl\n\nThere might be more. I just did a quick check for enc/dec, rand\nand one BN call.",
        "before_after_code_files": [
          "ext/openssl/openssl.c||ext/openssl/openssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c"
          ],
          "candidate": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/openssl/openssl.c||ext/openssl/openssl.c": [
          "File: ext/openssl/openssl.c -> ext/openssl/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5229:  EVP_EncryptInit(&cipher_ctx, cipher_type, NULL, NULL);",
          "5230:  if (password_len > keylen) {",
          "5231:   EVP_CIPHER_CTX_set_key_length(&cipher_ctx, (int)password_len);",
          "5232:  }",
          "5233:  EVP_EncryptInit_ex(&cipher_ctx, NULL, NULL, key, (unsigned char *)iv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5231:   if (INT_MAX < password_len) {",
          "5232:    php_error_docref(NULL, E_WARNING, \"password is too long\");",
          "5233:    RETURN_FALSE;",
          "5234:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5325:  EVP_DecryptInit(&cipher_ctx, cipher_type, NULL, NULL);",
          "5326:  if (password_len > keylen) {",
          "5327:   EVP_CIPHER_CTX_set_key_length(&cipher_ctx, (int)password_len);",
          "5328:  }",
          "5329:  EVP_DecryptInit_ex(&cipher_ctx, NULL, NULL, key, (unsigned char *)iv);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5331:   if (INT_MAX < password_len) {",
          "5332:    php_error_docref(NULL, E_WARNING, \"password is too long\");",
          "5333:    RETURN_FALSE;",
          "5334:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5403:   RETURN_FALSE;",
          "5404:  }",
          "5406:  pub = BN_bin2bn((unsigned char*)pub_str, (int)pub_len, NULL);",
          "5408:  data = zend_string_alloc(DH_size(pkey->pkey.dh), 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5414:  if (INT_MAX < pub_len) {",
          "5415:   php_error_docref(NULL, E_WARNING, \"pub_key is too long\");",
          "5416:   RETURN_FALSE;",
          "5417:  }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5454:   RETURN_FALSE;",
          "5455:  }",
          "5456: #else",
          "5458:   zend_string_release(buffer);",
          "5459:   if (zstrong_result_returned) {",
          "5460:    ZVAL_FALSE(zstrong_result_returned);",
          "",
          "[Removed Lines]",
          "5457:  if (RAND_bytes((unsigned char*)ZSTR_VAL(buffer), buffer_length) <= 0) {",
          "",
          "[Added Lines]",
          "5469:  if (INT_MAX < buffer_length) {",
          "5470:   php_error_docref(NULL, E_WARNING, \"length is too long\");",
          "5471:   RETURN_FALSE;",
          "5472:  }",
          "5473:  if (RAND_bytes((unsigned char*)ZSTR_VAL(buffer), (int)buffer_length) <= 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6a201b3651b4885f0b5d79f8b7fe06a9c604cf2e",
      "candidate_info": {
        "commit_hash": "6a201b3651b4885f0b5d79f8b7fe06a9c604cf2e",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/6a201b3651b4885f0b5d79f8b7fe06a9c604cf2e",
        "files": [
          "ext/openssl/openssl.c"
        ],
        "message": "Use macros for openssl overflow checks\n\nIt reduces code duplications",
        "before_after_code_files": [
          "ext/openssl/openssl.c||ext/openssl/openssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c"
          ],
          "candidate": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/openssl/openssl.c||ext/openssl/openssl.c": [
          "File: ext/openssl/openssl.c -> ext/openssl/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "534: ZEND_GET_MODULE(openssl)",
          "535: #endif",
          "537: static int le_key;",
          "538: static int le_x509;",
          "539: static int le_csr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538: #define PHP_OPENSSL_CHECK_OVERFLOW_EX(_var, _name, _max) \\",
          "539:  do { \\",
          "540:   if (_max < _var) { \\",
          "541:    php_error_docref(NULL, E_WARNING, #_name\" is too long\"); \\",
          "542:    RETURN_FALSE; \\",
          "543:   } \\",
          "544:  } while(0)",
          "545: #define PHP_OPENSSL_CHECK_OVERFLOW(_var, _name) PHP_OPENSSL_CHECK_OVERFLOW_EX(_var, _name, INT_MAX)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4011:  if (key_length <= 0) {",
          "4012:   RETURN_FALSE;",
          "4013:  }",
          "4031:  if (method_len) {",
          "4032:   digest = EVP_get_digestbyname(method);",
          "",
          "[Removed Lines]",
          "4014:  if (INT_MAX < key_length) {",
          "4015:   php_error_docref(NULL, E_WARNING, \"key_length is too long\");",
          "4016:   RETURN_FALSE;",
          "4017:  }",
          "4018:  if (INT_MAX < iterations) {",
          "4019:   php_error_docref(NULL, E_WARNING, \"iterations is too long\");",
          "4020:   RETURN_FALSE;",
          "4021:  }",
          "4022:  if (INT_MAX < password_len) {",
          "4023:   php_error_docref(NULL, E_WARNING, \"password_len is too long\");",
          "4024:   RETURN_FALSE;",
          "4025:  }",
          "4026:  if (INT_MAX < salt_len) {",
          "4027:   php_error_docref(NULL, E_WARNING, \"salt_len is too long\");",
          "4028:   RETURN_FALSE;",
          "4029:  }",
          "",
          "[Added Lines]",
          "4025:  PHP_OPENSSL_CHECK_OVERFLOW(key_length, key);",
          "4026:  PHP_OPENSSL_CHECK_OVERFLOW(iterations, iterations);",
          "4027:  PHP_OPENSSL_CHECK_OVERFLOW(password_len, password);",
          "4028:  PHP_OPENSSL_CHECK_OVERFLOW(salt_len, salt);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4497:  if (pkey == NULL) {",
          "4498:   php_error_docref(NULL, E_WARNING, \"key param is not a valid private key\");",
          "4499:   RETURN_FALSE;",
          "4503:  }",
          "4505:  cryptedlen = EVP_PKEY_size(pkey);",
          "4506:  cryptedbuf = zend_string_alloc(cryptedlen, 0);",
          "",
          "[Removed Lines]",
          "4500:  } else if (INT_MAX < data_len) {",
          "4501:   php_error_docref(NULL, E_WARNING, \"data is too long\");",
          "4502:   RETURN_FALSE;",
          "",
          "[Added Lines]",
          "4501:  PHP_OPENSSL_CHECK_OVERFLOW(data_len, data);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4558:  if (pkey == NULL) {",
          "4559:   php_error_docref(NULL, E_WARNING, \"key parameter is not a valid private key\");",
          "4560:   RETURN_FALSE;",
          "4564:  }",
          "4566:  cryptedlen = EVP_PKEY_size(pkey);",
          "4567:  crypttemp = emalloc(cryptedlen + 1);",
          "",
          "[Removed Lines]",
          "4561:  } else if (INT_MAX < data_len) {",
          "4562:   php_error_docref(NULL, E_WARNING, \"data is too long\");",
          "4563:   RETURN_FALSE;",
          "",
          "[Added Lines]",
          "4561:  PHP_OPENSSL_CHECK_OVERFLOW(data_len, data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4625:  if (pkey == NULL) {",
          "4626:   php_error_docref(NULL, E_WARNING, \"key parameter is not a valid public key\");",
          "4627:   RETURN_FALSE;",
          "4631:  }",
          "4633:  cryptedlen = EVP_PKEY_size(pkey);",
          "4634:  cryptedbuf = zend_string_alloc(cryptedlen, 0);",
          "",
          "[Removed Lines]",
          "4628:  } else if (INT_MAX < data_len) {",
          "4629:   php_error_docref(NULL, E_WARNING, \"data is too long\");",
          "4630:   RETURN_FALSE;",
          "",
          "[Added Lines]",
          "4627:  PHP_OPENSSL_CHECK_OVERFLOW(data_len, data);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4687:  if (pkey == NULL) {",
          "4688:   php_error_docref(NULL, E_WARNING, \"key parameter is not a valid public key\");",
          "4689:   RETURN_FALSE;",
          "4693:  }",
          "4695:  cryptedlen = EVP_PKEY_size(pkey);",
          "4696:  crypttemp = emalloc(cryptedlen + 1);",
          "",
          "[Removed Lines]",
          "4690:  } else if (INT_MAX < data_len) {",
          "4691:   php_error_docref(NULL, E_WARNING, \"data is too long\");",
          "4692:   RETURN_FALSE;",
          "",
          "[Added Lines]",
          "4688:  PHP_OPENSSL_CHECK_OVERFLOW(data_len, data);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4838:   return;",
          "4839:  }",
          "4845:  if (method == NULL || Z_TYPE_P(method) == IS_LONG) {",
          "4846:   if (method != NULL) {",
          "4847:    signature_algo = Z_LVAL_P(method);",
          "",
          "[Removed Lines]",
          "4841:  if (UINT_MAX < signature_len) {",
          "4842:   php_error_docref(NULL, E_WARNING, \"signature is too long\");",
          "4843:   RETURN_FALSE;",
          "4844:  }",
          "",
          "[Added Lines]",
          "4836:  PHP_OPENSSL_CHECK_OVERFLOW_EX(signature_len, signature, UINT_MAX);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4901:  if (!nkeys) {",
          "4902:   php_error_docref(NULL, E_WARNING, \"Fourth argument to openssl_seal() must be a non-empty array\");",
          "4903:   RETURN_FALSE;",
          "4907:  }",
          "4909:  if (method) {",
          "4910:   cipher = EVP_get_cipherbyname(method);",
          "4911:   if (!cipher) {",
          "",
          "[Removed Lines]",
          "4904:  } else if (INT_MAX < data_len) {",
          "4905:   php_error_docref(NULL, E_WARNING, \"data is too long\");",
          "4906:   RETURN_FALSE;",
          "",
          "[Added Lines]",
          "4899:  PHP_OPENSSL_CHECK_OVERFLOW(data_len, data);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "5033:  if (pkey == NULL) {",
          "5034:   php_error_docref(NULL, E_WARNING, \"unable to coerce parameter 4 into a private key\");",
          "5035:   RETURN_FALSE;",
          "5042:  }",
          "5044:  if (method) {",
          "5045:   cipher = EVP_get_cipherbyname(method);",
          "5046:   if (!cipher) {",
          "",
          "[Removed Lines]",
          "5036:  } else if (INT_MAX < ekey_len) {",
          "5037:   php_error_docref(NULL, E_WARNING, \"ekey is too long\");",
          "5038:   RETURN_FALSE;",
          "5039:  } else if (INT_MAX < data_len) {",
          "5040:   php_error_docref(NULL, E_WARNING, \"data is too long\");",
          "5041:   RETURN_FALSE;",
          "",
          "[Added Lines]",
          "5030:  PHP_OPENSSL_CHECK_OVERFLOW(ekey_len, ekey);",
          "5031:  PHP_OPENSSL_CHECK_OVERFLOW(data_len, data);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "5223:  if (!cipher_type) {",
          "5224:   php_error_docref(NULL, E_WARNING, \"Unknown cipher algorithm\");",
          "5225:   RETURN_FALSE;",
          "5229:  }",
          "5231:  keylen = EVP_CIPHER_key_length(cipher_type);",
          "5232:  if (keylen > password_len) {",
          "5233:   key = emalloc(keylen);",
          "",
          "[Removed Lines]",
          "5226:  } else if (INT_MAX < data_len) {",
          "5227:   php_error_docref(NULL, E_WARNING, \"data is too long\");",
          "5228:   RETURN_FALSE;",
          "",
          "[Added Lines]",
          "5217:  PHP_OPENSSL_CHECK_OVERFLOW(data_len, data);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "5249:  EVP_EncryptInit(&cipher_ctx, cipher_type, NULL, NULL);",
          "5250:  if (password_len > keylen) {",
          "5255:   EVP_CIPHER_CTX_set_key_length(&cipher_ctx, (int)password_len);",
          "5256:  }",
          "5257:  EVP_EncryptInit_ex(&cipher_ctx, NULL, NULL, key, (unsigned char *)iv);",
          "",
          "[Removed Lines]",
          "5251:   if (INT_MAX < password_len) {",
          "5252:    php_error_docref(NULL, E_WARNING, \"password is too long\");",
          "5253:    RETURN_FALSE;",
          "5254:   }",
          "",
          "[Added Lines]",
          "5239:   PHP_OPENSSL_CHECK_OVERFLOW(password_len, password);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5311:  if (!method_len) {",
          "5312:   php_error_docref(NULL, E_WARNING, \"Unknown cipher algorithm\");",
          "5313:   RETURN_FALSE;",
          "5317:  }",
          "5319:  cipher_type = EVP_get_cipherbyname(method);",
          "5320:  if (!cipher_type) {",
          "5321:   php_error_docref(NULL, E_WARNING, \"Unknown cipher algorithm\");",
          "",
          "[Removed Lines]",
          "5314:  } else if (INT_MAX < data_len) {",
          "5315:   php_error_docref(NULL, E_WARNING, \"data is too long\");",
          "5316:   RETURN_FALSE;",
          "",
          "[Added Lines]",
          "5301:  PHP_OPENSSL_CHECK_OVERFLOW(data_len, data);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5349:  EVP_DecryptInit(&cipher_ctx, cipher_type, NULL, NULL);",
          "5350:  if (password_len > keylen) {",
          "5355:   EVP_CIPHER_CTX_set_key_length(&cipher_ctx, (int)password_len);",
          "5356:  }",
          "5357:  EVP_DecryptInit_ex(&cipher_ctx, NULL, NULL, key, (unsigned char *)iv);",
          "",
          "[Removed Lines]",
          "5351:   if (INT_MAX < password_len) {",
          "5352:    php_error_docref(NULL, E_WARNING, \"password is too long\");",
          "5353:    RETURN_FALSE;",
          "5354:   }",
          "",
          "[Added Lines]",
          "5335:   PHP_OPENSSL_CHECK_OVERFLOW(password_len, password);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5431:   RETURN_FALSE;",
          "5432:  }",
          "5438:  pub = BN_bin2bn((unsigned char*)pub_str, (int)pub_len, NULL);",
          "5440:  data = zend_string_alloc(DH_size(pkey->pkey.dh), 0);",
          "",
          "[Removed Lines]",
          "5434:  if (INT_MAX < pub_len) {",
          "5435:   php_error_docref(NULL, E_WARNING, \"pub_key is too long\");",
          "5436:   RETURN_FALSE;",
          "5437:  }",
          "",
          "[Added Lines]",
          "5415:  PHP_OPENSSL_CHECK_OVERFLOW(pub_len, pub_key);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5486:   RETURN_FALSE;",
          "5487:  }",
          "5488: #else",
          "5493:  if (RAND_bytes((unsigned char*)ZSTR_VAL(buffer), (int)buffer_length) <= 0) {",
          "5494:   zend_string_release(buffer);",
          "5495:   if (zstrong_result_returned) {",
          "",
          "[Removed Lines]",
          "5489:  if (INT_MAX < buffer_length) {",
          "5490:   php_error_docref(NULL, E_WARNING, \"length is too long\");",
          "5491:   RETURN_FALSE;",
          "5492:  }",
          "",
          "[Added Lines]",
          "5468:  PHP_OPENSSL_CHECK_OVERFLOW(buffer_length, length);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a08b7b7701d2669a8e242cdb015f81d21a0ccb52",
      "candidate_info": {
        "commit_hash": "a08b7b7701d2669a8e242cdb015f81d21a0ccb52",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/a08b7b7701d2669a8e242cdb015f81d21a0ccb52",
        "files": [
          "ext/date/php_date.c",
          "ext/imap/php_imap.c",
          "ext/openssl/openssl.c",
          "ext/openssl/xp_ssl.c",
          "ext/spl/spl_iterators.c",
          "ext/standard/string.c",
          "ext/xml/xml.c",
          "sapi/cli/php_cli_server.c"
        ],
        "message": "cleanup",
        "before_after_code_files": [
          "ext/date/php_date.c||ext/date/php_date.c",
          "ext/imap/php_imap.c||ext/imap/php_imap.c",
          "ext/openssl/openssl.c||ext/openssl/openssl.c",
          "ext/openssl/xp_ssl.c||ext/openssl/xp_ssl.c",
          "ext/spl/spl_iterators.c||ext/spl/spl_iterators.c",
          "ext/standard/string.c||ext/standard/string.c",
          "ext/xml/xml.c||ext/xml/xml.c",
          "sapi/cli/php_cli_server.c||sapi/cli/php_cli_server.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c"
          ],
          "candidate": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/date/php_date.c||ext/date/php_date.c": [
          "File: ext/date/php_date.c -> ext/date/php_date.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4556:  int             rs;",
          "4557:  timelib_time   *t;",
          "4558:  timelib_tzinfo *tzi;",
          "4561:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l|ldddd\", &time, &retformat, &latitude, &longitude, &zenith, &gmt_offset) == FAILURE) {",
          "4562:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "4559:  char           *retstr;",
          "",
          "[Added Lines]",
          "4559:  zend_string    *retstr;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4622:  switch (retformat) {",
          "4623:   case SUNFUNCS_RET_STRING:",
          "4629:    break;",
          "4630:   case SUNFUNCS_RET_DOUBLE:",
          "4631:    RETURN_DOUBLE(N);",
          "",
          "[Removed Lines]",
          "4624:    spprintf(&retstr, 0, \"%02d:%02d\", (int) N, (int) (60 * (N - (int) N)));",
          "4626:    RETVAL_STRINGL(retstr, 5);",
          "4627:    efree(retstr);",
          "4628:    return;",
          "",
          "[Added Lines]",
          "4624:    retstr = strpprintf(0, \"%02d:%02d\", (int) N, (int) (60 * (N - (int) N)));",
          "4625:    RETURN_STR(retstr);",
          "",
          "---------------"
        ],
        "ext/imap/php_imap.c||ext/imap/php_imap.c": [
          "File: ext/imap/php_imap.c -> ext/imap/php_imap.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: static void _php_make_header_object(zval *myzvalue, ENVELOPE *en TSRMLS_DC);",
          "78: static void _php_imap_add_body(zval *arg, BODY *body TSRMLS_DC);",
          "83: static char *php_mail_gets(readfn_t f, void *stream, unsigned long size, GETS_DATA *md);",
          "",
          "[Removed Lines]",
          "79: static char* _php_imap_parse_address(ADDRESS *addresslist, zval *paddress TSRMLS_DC);",
          "80: static char* _php_rfc822_write_address(ADDRESS *addresslist TSRMLS_DC);",
          "",
          "[Added Lines]",
          "79: static zend_string* _php_imap_parse_address(ADDRESS *addresslist, zval *paddress TSRMLS_DC);",
          "80: static zend_string* _php_rfc822_write_address(ADDRESS *addresslist TSRMLS_DC);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1483:  ZEND_FETCH_RESOURCE(imap_le_struct, pils *, streamind, -1, \"imap\", le_imap);",
          "1486:  limits.text.size = mailbox_size;",
          "1487:  limits.next = NIL;",
          "",
          "[Removed Lines]",
          "1485:  limits.text.data = \"STORAGE\";",
          "",
          "[Added Lines]",
          "1485:  limits.text.data = (unsigned char*)\"STORAGE\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1864:  array_init(return_value);",
          "1865:  cur=IMAPG(imap_folders);",
          "1866:  while (cur != NIL) {",
          "1868:   cur=cur->next;",
          "1869:  }",
          "1870:  mail_free_stringlist (&IMAPG(imap_folders));",
          "",
          "[Removed Lines]",
          "1867:   add_next_index_string(return_value, cur->LTEXT);",
          "",
          "[Added Lines]",
          "1867:   add_next_index_string(return_value, (char*)cur->LTEXT);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1905:  cur=IMAPG(imap_folder_objects);",
          "1906:  while (cur != NIL) {",
          "1907:   object_init(&mboxob);",
          "1909:   add_property_long(&mboxob, \"attributes\", cur->attributes);",
          "1910: #ifdef IMAP41",
          "1911:   delim[0] = (char)cur->delimiter;",
          "",
          "[Removed Lines]",
          "1908:   add_property_string(&mboxob, \"name\", cur->LTEXT);",
          "",
          "[Added Lines]",
          "1908:   add_property_string(&mboxob, \"name\", (char*)cur->LTEXT);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1948:  array_init(return_value);",
          "1949:  cur=IMAPG(imap_folders);",
          "1950:  while (cur != NIL) {",
          "1952:   cur=cur->next;",
          "1953:  }",
          "1954:  mail_free_stringlist (&IMAPG(imap_folders));",
          "",
          "[Removed Lines]",
          "1951:   add_next_index_string(return_value, cur->LTEXT);",
          "",
          "[Added Lines]",
          "1951:   add_next_index_string(return_value, (char*)cur->LTEXT);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2170:  array_init(return_value);",
          "2171:  cur=IMAPG(imap_sfolders);",
          "2172:  while (cur != NIL) {",
          "2174:   cur=cur->next;",
          "2175:  }",
          "2176:  mail_free_stringlist (&IMAPG(imap_sfolders));",
          "",
          "[Removed Lines]",
          "2173:   add_next_index_string(return_value, cur->LTEXT);",
          "",
          "[Added Lines]",
          "2173:   add_next_index_string(return_value, (char*)cur->LTEXT);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2210:  cur=IMAPG(imap_sfolder_objects);",
          "2211:  while (cur != NIL) {",
          "2212:   object_init(&mboxob);",
          "2214:   add_property_long(&mboxob, \"attributes\", cur->attributes);",
          "2215: #ifdef IMAP41",
          "2216:   delim[0] = (char)cur->delimiter;",
          "",
          "[Removed Lines]",
          "2213:   add_property_string(&mboxob, \"name\", cur->LTEXT);",
          "",
          "[Added Lines]",
          "2213:   add_property_string(&mboxob, \"name\", (char*)cur->LTEXT);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2535:   return;",
          "2536:  }",
          "2540:  if (decode == NULL) {",
          "2541:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "2538:  decode = rfc822_binary(text, text_len, &newlength);",
          "",
          "[Added Lines]",
          "2538:  decode = (char*)rfc822_binary(text, text_len, &newlength);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2600:  char *mailbox, *host, *personal;",
          "2601:  int mailbox_len, host_len, personal_len;",
          "2602:  ADDRESS *addr;",
          "2605:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sss\", &mailbox, &mailbox_len, &host, &host_len, &personal, &personal_len) == FAILURE) {",
          "2606:   return;",
          "",
          "[Removed Lines]",
          "2603:  char *string;",
          "",
          "[Added Lines]",
          "2603:  zend_string *string;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2627:  string = _php_rfc822_write_address(addr TSRMLS_CC);",
          "2628:  if (string) {",
          "2631:  } else {",
          "2632:   RETURN_FALSE;",
          "2633:  }",
          "",
          "[Removed Lines]",
          "2629:   RETVAL_STRING(string);",
          "2630:   efree(string);",
          "",
          "[Added Lines]",
          "2629:   RETVAL_STR(string);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2704: #else",
          "2705:  utf8_mime2text(&src, &dest, U8T_DECOMPOSE);",
          "2706: #endif",
          "2708:  if (dest.data) {",
          "2709:   free(dest.data);",
          "2710:  }",
          "",
          "[Removed Lines]",
          "2707:  RETVAL_STRINGL(dest.data, dest.size);",
          "",
          "[Added Lines]",
          "2706:  RETVAL_STRINGL((char*)dest.data, dest.size);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2869:  }",
          "2870: #endif",
          "2873: }",
          "",
          "[Removed Lines]",
          "2872:  RETURN_STRINGL(out, outlen);",
          "",
          "[Added Lines]",
          "2871:  RETURN_STRINGL((char*)out, outlen);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2933:  out = STR_ALLOC(outlen, 0);",
          "2937:  state = ST_NORMAL;",
          "2938:  endp = (inp = in) + inlen;",
          "2939:  while (inp < endp || state != ST_NORMAL) {",
          "",
          "[Removed Lines]",
          "2936:  outp = out->val;",
          "",
          "[Added Lines]",
          "2935:  outp = (unsigned char*)out->val;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3284:  object_init(return_value);",
          "3287:  if (body == NULL) {",
          "3288:   zval_dtor(return_value);",
          "3289:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "3286:  body=mail_body(imap_le_struct->imap_stream, msg, section);",
          "",
          "[Added Lines]",
          "3285:  body=mail_body(imap_le_struct->imap_stream, msg, (unsigned char*)section);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3378:  int sequence_len;",
          "3379:  pils *imap_le_struct;",
          "3380:  zval myoverview;",
          "3382:  long status, flags = 0L;",
          "3383:  int argc = ZEND_NUM_ARGS();",
          "",
          "[Removed Lines]",
          "3381:  char *address;",
          "",
          "[Added Lines]",
          "3380:  zend_string *address;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3396:  array_init(return_value);",
          "3398:  status = (flags & FT_UID)",
          "3402:  if (status) {",
          "3403:   MESSAGECACHE *elt;",
          "",
          "[Removed Lines]",
          "3399:   ? mail_uid_sequence(imap_le_struct->imap_stream, sequence)",
          "3400:   : mail_sequence(imap_le_struct->imap_stream, sequence);",
          "",
          "[Added Lines]",
          "3398:   ? mail_uid_sequence(imap_le_struct->imap_stream, (unsigned char*)sequence)",
          "3399:   : mail_sequence(imap_le_struct->imap_stream, (unsigned char*)sequence);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3415:      env->from->next=NULL;",
          "3416:      address =_php_rfc822_write_address(env->from TSRMLS_CC);",
          "3417:      if (address) {",
          "3421:      }",
          "3422:     }",
          "3423:     if (env->to) {",
          "3424:      env->to->next = NULL;",
          "3425:      address = _php_rfc822_write_address(env->to TSRMLS_CC);",
          "3426:      if (address) {",
          "3430:      }",
          "3431:     }",
          "3432:     if (env->date) {",
          "3434:     }",
          "3435:     if (env->message_id) {",
          "3436:      add_property_string(&myoverview, \"message_id\", env->message_id);",
          "",
          "[Removed Lines]",
          "3419:       add_property_string(&myoverview, \"from\", address);",
          "3420:       efree(address);",
          "3428:       add_property_string(&myoverview, \"to\", address);",
          "3429:       efree(address);",
          "3433:      add_property_string(&myoverview, \"date\", env->date);",
          "",
          "[Added Lines]",
          "3417:       add_property_str(&myoverview, \"from\", address);",
          "3424:       add_property_str(&myoverview, \"to\", address);",
          "3428:      add_property_string(&myoverview, \"date\", (char*)env->date);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3494:  }",
          "3495:  if ((pvalue = zend_hash_str_find(Z_ARRVAL_P(envelope), \"date\", sizeof(\"date\") - 1)) != NULL) {",
          "3496:   convert_to_string_ex(pvalue);",
          "3498:  }",
          "3499:  if ((pvalue = zend_hash_str_find(Z_ARRVAL_P(envelope), \"from\", sizeof(\"from\") - 1)) != NULL) {",
          "3500:   convert_to_string_ex(pvalue);",
          "",
          "[Removed Lines]",
          "3497:   env->date = cpystr(Z_STRVAL_P(pvalue));",
          "",
          "[Added Lines]",
          "3492:   env->date = (unsigned char*)cpystr(Z_STRVAL_P(pvalue));",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3622:    }",
          "3623:    if ((pvalue = zend_hash_str_find(Z_ARRVAL_P(data), \"contents.data\", sizeof(\"contents.data\") - 1)) != NULL) {",
          "3624:     convert_to_string_ex(pvalue);",
          "3626:     memcpy(bod->contents.text.data, Z_STRVAL_P(pvalue), Z_STRLEN_P(pvalue)+1);",
          "3627:     bod->contents.text.size = Z_STRLEN_P(pvalue);",
          "3628:    } else {",
          "3630:     memcpy(bod->contents.text.data, \"\", 1);",
          "3631:     bod->contents.text.size = 0;",
          "3632:    }",
          "",
          "[Removed Lines]",
          "3625:     bod->contents.text.data = (char *) fs_get(Z_STRLEN_P(pvalue) + 1);",
          "3629:     bod->contents.text.data = (char *) fs_get(1);",
          "",
          "[Added Lines]",
          "3620:     bod->contents.text.data = fs_get(Z_STRLEN_P(pvalue) + 1);",
          "3624:     bod->contents.text.data = fs_get(1);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3726:    }",
          "3727:    if ((pvalue = zend_hash_str_find(Z_ARRVAL_P(data), \"contents.data\", sizeof(\"contents.data\") - 1)) != NULL) {",
          "3728:     convert_to_string_ex(pvalue);",
          "3730:     memcpy(bod->contents.text.data, Z_STRVAL_P(pvalue), Z_STRLEN_P(pvalue) + 1);",
          "3731:     bod->contents.text.size = Z_STRLEN_P(pvalue);",
          "3732:    } else {",
          "3734:     memcpy(bod->contents.text.data, \"\", 1);",
          "3735:     bod->contents.text.size = 0;",
          "3736:    }",
          "",
          "[Removed Lines]",
          "3729:     bod->contents.text.data = (char *) fs_get(Z_STRLEN_P(pvalue) + 1);",
          "3733:     bod->contents.text.data = (char *) fs_get(1);",
          "",
          "[Added Lines]",
          "3724:     bod->contents.text.data = fs_get(Z_STRLEN_P(pvalue) + 1);",
          "3728:     bod->contents.text.data = fs_get(1);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4134:  cur = IMAPG(imap_alertstack);",
          "4135:  while (cur != NIL) {",
          "4137:   cur = cur->next;",
          "4138:  }",
          "4139:  mail_free_stringlist(&IMAPG(imap_alertstack));",
          "",
          "[Removed Lines]",
          "4136:   add_next_index_string(return_value, cur->LTEXT);",
          "",
          "[Added Lines]",
          "4131:   add_next_index_string(return_value, (char*)cur->LTEXT);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4161:  cur = IMAPG(imap_errorstack);",
          "4162:  while (cur != NIL) {",
          "4164:   cur = cur->next;",
          "4165:  }",
          "4166:  mail_free_errorlist(&IMAPG(imap_errorstack));",
          "",
          "[Removed Lines]",
          "4163:   add_next_index_string(return_value, cur->LTEXT);",
          "",
          "[Added Lines]",
          "4158:   add_next_index_string(return_value, (char*)cur->LTEXT);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4186:  cur = IMAPG(imap_errorstack);",
          "4187:  while (cur != NIL) {",
          "4188:   if (cur->next == NIL) {",
          "4190:   }",
          "4191:   cur = cur->next;",
          "4192:  }",
          "",
          "[Removed Lines]",
          "4189:    RETURN_STRING(cur->LTEXT);",
          "",
          "[Added Lines]",
          "4184:    RETURN_STRING((char*)cur->LTEXT);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4309: {",
          "4310:  char address[MAILTMPLEN];",
          "4312:  smart_str ret = {0};",
          "4313:  RFC822BUFFER buf;",
          "",
          "[Removed Lines]",
          "4308: static char* _php_rfc822_write_address(ADDRESS *addresslist TSRMLS_DC)",
          "4311:  char *str;",
          "",
          "[Added Lines]",
          "4303: static zend_string* _php_rfc822_write_address(ADDRESS *addresslist TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4320:  rfc822_output_address_list(&buf, addresslist, 0, NULL);",
          "4321:  rfc822_output_flush(&buf);",
          "4322:  smart_str_0(&ret);",
          "4328: }",
          "",
          "[Removed Lines]",
          "4324:  str = estrndup(ret.s->val, ret.s->len);",
          "4325:  smart_str_free(&ret);",
          "4327:  return str;",
          "",
          "[Added Lines]",
          "4317:  return ret.s;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "4394: {",
          "4395:  char address[SENDBUFLEN];",
          "",
          "[Removed Lines]",
          "4393: static char* _php_rfc822_write_address(ADDRESS *addresslist TSRMLS_DC)",
          "",
          "[Added Lines]",
          "4383: static zend_string* _php_rfc822_write_address(ADDRESS *addresslist TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "4400:  }",
          "4401:  address[0] = 0;",
          "4402:  rfc822_write_address(address, addresslist);",
          "4404: }",
          "4406: #endif",
          "4410: {",
          "4412:  ADDRESS *addresstmp;",
          "4413:  zval tmpvals;",
          "",
          "[Removed Lines]",
          "4403:  return estrdup(address);",
          "4409: static char* _php_imap_parse_address (ADDRESS *addresslist, zval *paddress TSRMLS_DC)",
          "4411:  char *fulladdress;",
          "",
          "[Added Lines]",
          "4393:  return STR_INIT(address, strlen(address), 0);",
          "4399: static zend_string* _php_imap_parse_address (ADDRESS *addresslist, zval *paddress TSRMLS_DC)",
          "4401:  zend_string *fulladdress;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "4434: static void _php_make_header_object(zval *myzvalue, ENVELOPE *en TSRMLS_DC)",
          "4435: {",
          "4436:  zval paddress;",
          "4439:  object_init(myzvalue);",
          "4441:  if (en->remail) add_property_string(myzvalue, \"remail\", en->remail);",
          "4444:  if (en->subject) add_property_string(myzvalue, \"subject\", en->subject);",
          "4445:  if (en->subject) add_property_string(myzvalue, \"Subject\", en->subject);",
          "4446:  if (en->in_reply_to) add_property_string(myzvalue, \"in_reply_to\", en->in_reply_to);",
          "",
          "[Removed Lines]",
          "4437:  char *fulladdress=NULL;",
          "4442:  if (en->date) add_property_string(myzvalue, \"date\", en->date);",
          "4443:  if (en->date) add_property_string(myzvalue, \"Date\", en->date);",
          "",
          "[Added Lines]",
          "4427:  zend_string *fulladdress=NULL;",
          "4432:  if (en->date) add_property_string(myzvalue, \"date\", (char*)en->date);",
          "4433:  if (en->date) add_property_string(myzvalue, \"Date\", (char*)en->date);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "4453:   array_init(&paddress);",
          "4454:   fulladdress = _php_imap_parse_address(en->to, &paddress TSRMLS_CC);",
          "4455:   if (fulladdress) {",
          "4459:   }",
          "4460:   add_assoc_object(myzvalue, \"to\", &paddress TSRMLS_CC);",
          "4461:  }",
          "",
          "[Removed Lines]",
          "4457:    add_property_string(myzvalue, \"toaddress\", fulladdress);",
          "4458:    efree(fulladdress);",
          "",
          "[Added Lines]",
          "4446:    add_property_str(myzvalue, \"toaddress\", fulladdress);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "4464:   array_init(&paddress);",
          "4465:   fulladdress = _php_imap_parse_address(en->from, &paddress TSRMLS_CC);",
          "4466:   if (fulladdress) {",
          "4470:   }",
          "4471:   add_assoc_object(myzvalue, \"from\", &paddress TSRMLS_CC);",
          "4472:  }",
          "",
          "[Removed Lines]",
          "4468:    add_property_string(myzvalue, \"fromaddress\", fulladdress);",
          "4469:    efree(fulladdress);",
          "",
          "[Added Lines]",
          "4455:    add_property_str(myzvalue, \"fromaddress\", fulladdress);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "4475:   array_init(&paddress);",
          "4476:   fulladdress = _php_imap_parse_address(en->cc, &paddress TSRMLS_CC);",
          "4477:   if (fulladdress) {",
          "4481:   }",
          "4482:   add_assoc_object(myzvalue, \"cc\", &paddress TSRMLS_CC);",
          "4483:  }",
          "",
          "[Removed Lines]",
          "4479:    add_property_string(myzvalue, \"ccaddress\", fulladdress);",
          "4480:    efree(fulladdress);",
          "",
          "[Added Lines]",
          "4464:    add_property_str(myzvalue, \"ccaddress\", fulladdress);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "4486:   array_init(&paddress);",
          "4487:   fulladdress = _php_imap_parse_address(en->bcc, &paddress TSRMLS_CC);",
          "4488:   if (fulladdress) {",
          "4492:   }",
          "4493:   add_assoc_object(myzvalue, \"bcc\", &paddress TSRMLS_CC);",
          "4494:  }",
          "",
          "[Removed Lines]",
          "4490:    add_property_string(myzvalue, \"bccaddress\", fulladdress);",
          "4491:    efree(fulladdress);",
          "",
          "[Added Lines]",
          "4473:    add_property_str(myzvalue, \"bccaddress\", fulladdress);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "4497:   array_init(&paddress);",
          "4498:   fulladdress = _php_imap_parse_address(en->reply_to, &paddress TSRMLS_CC);",
          "4499:   if (fulladdress) {",
          "4503:   }",
          "4504:   add_assoc_object(myzvalue, \"reply_to\", &paddress TSRMLS_CC);",
          "4505:  }",
          "",
          "[Removed Lines]",
          "4501:    add_property_string(myzvalue, \"reply_toaddress\", fulladdress);",
          "4502:    efree(fulladdress);",
          "",
          "[Added Lines]",
          "4482:    add_property_str(myzvalue, \"reply_toaddress\", fulladdress);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "4508:   array_init(&paddress);",
          "4509:   fulladdress = _php_imap_parse_address(en->sender, &paddress TSRMLS_CC);",
          "4510:   if (fulladdress) {",
          "4514:   }",
          "4515:   add_assoc_object(myzvalue, \"sender\", &paddress TSRMLS_CC);",
          "4516:  }",
          "",
          "[Removed Lines]",
          "4512:    add_property_string(myzvalue, \"senderaddress\", fulladdress);",
          "4513:    efree(fulladdress);",
          "",
          "[Added Lines]",
          "4491:    add_property_str(myzvalue, \"senderaddress\", fulladdress);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "4519:   array_init(&paddress);",
          "4520:   fulladdress = _php_imap_parse_address(en->return_path, &paddress TSRMLS_CC);",
          "4521:   if (fulladdress) {",
          "4525:   }",
          "4526:   add_assoc_object(myzvalue, \"return_path\", &paddress TSRMLS_CC);",
          "4527:  }",
          "",
          "[Removed Lines]",
          "4523:    add_property_string(myzvalue, \"return_pathaddress\", fulladdress);",
          "4524:    efree(fulladdress);",
          "",
          "[Added Lines]",
          "4500:    add_property_str(myzvalue, \"return_pathaddress\", fulladdress);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "4873:  if (strncmp(str, \"[ALERT] \", 8) == 0) {",
          "4874:   if (IMAPG(imap_alertstack) == NIL) {",
          "4875:    IMAPG(imap_alertstack) = mail_newstringlist();",
          "4877:    IMAPG(imap_alertstack)->next = NIL;",
          "4878:   } else {",
          "4879:    cur = IMAPG(imap_alertstack);",
          "",
          "[Removed Lines]",
          "4876:    IMAPG(imap_alertstack)->LSIZE = strlen(IMAPG(imap_alertstack)->LTEXT = cpystr(str));",
          "",
          "[Added Lines]",
          "4852:    IMAPG(imap_alertstack)->LSIZE = strlen((char*)(IMAPG(imap_alertstack)->LTEXT = (unsigned char*)cpystr(str)));",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "4882:    }",
          "4883:    cur->next = mail_newstringlist ();",
          "4884:    cur = cur->next;",
          "4886:    cur->next = NIL;",
          "4887:   }",
          "4888:  }",
          "",
          "[Removed Lines]",
          "4885:    cur->LSIZE = strlen(cur->LTEXT = cpystr(str));",
          "",
          "[Added Lines]",
          "4861:    cur->LSIZE = strlen((char*)(cur->LTEXT = (unsigned char*)cpystr(str)));",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "4900:   if (IMAPG(imap_folder_objects) == NIL) {",
          "4901:    IMAPG(imap_folder_objects) = mail_newfolderobjectlist();",
          "4903:    IMAPG(imap_folder_objects)->delimiter = delimiter;",
          "4904:    IMAPG(imap_folder_objects)->attributes = attributes;",
          "4905:    IMAPG(imap_folder_objects)->next = NIL;",
          "",
          "[Removed Lines]",
          "4902:    IMAPG(imap_folder_objects)->LSIZE=strlen(IMAPG(imap_folder_objects)->LTEXT=cpystr(mailbox));",
          "",
          "[Added Lines]",
          "4878:    IMAPG(imap_folder_objects)->LSIZE=strlen((char*)(IMAPG(imap_folder_objects)->LTEXT = (unsigned char*)cpystr(mailbox)));",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "4908:    ocur=IMAPG(imap_folder_objects_tail);",
          "4909:    ocur->next=mail_newfolderobjectlist();",
          "4910:    ocur=ocur->next;",
          "4912:    ocur->delimiter = delimiter;",
          "4913:    ocur->attributes = attributes;",
          "4914:    ocur->next = NIL;",
          "",
          "[Removed Lines]",
          "4911:    ocur->LSIZE = strlen(ocur->LTEXT = cpystr(mailbox));",
          "",
          "[Added Lines]",
          "4887:    ocur->LSIZE = strlen((char*)(ocur->LTEXT = (unsigned char*)cpystr(mailbox)));",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "4920:   if (!(attributes & LATT_NOSELECT)) {",
          "4921:    if (IMAPG(imap_folders) == NIL) {",
          "4922:     IMAPG(imap_folders)=mail_newstringlist();",
          "4924:     IMAPG(imap_folders)->next=NIL;",
          "4925:     IMAPG(imap_folders_tail) = IMAPG(imap_folders);",
          "4926:    } else {",
          "4927:     cur=IMAPG(imap_folders_tail);",
          "4928:     cur->next=mail_newstringlist ();",
          "4929:     cur=cur->next;",
          "4931:     cur->next = NIL;",
          "4932:     IMAPG(imap_folders_tail) = cur;",
          "4933:    }",
          "",
          "[Removed Lines]",
          "4923:     IMAPG(imap_folders)->LSIZE=strlen(IMAPG(imap_folders)->LTEXT=cpystr(mailbox));",
          "4930:     cur->LSIZE = strlen (cur->LTEXT = cpystr (mailbox));",
          "",
          "[Added Lines]",
          "4899:     IMAPG(imap_folders)->LSIZE=strlen((char*)(IMAPG(imap_folders)->LTEXT = (unsigned char*)cpystr(mailbox)));",
          "4906:     cur->LSIZE = strlen((char*)(cur->LTEXT = (unsigned char*)cpystr(mailbox)));",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "4947:   if (IMAPG(imap_sfolder_objects) == NIL) {",
          "4948:    IMAPG(imap_sfolder_objects) = mail_newfolderobjectlist();",
          "4950:    IMAPG(imap_sfolder_objects)->delimiter = delimiter;",
          "4951:    IMAPG(imap_sfolder_objects)->attributes = attributes;",
          "4952:    IMAPG(imap_sfolder_objects)->next = NIL;",
          "",
          "[Removed Lines]",
          "4949:    IMAPG(imap_sfolder_objects)->LSIZE=strlen(IMAPG(imap_sfolder_objects)->LTEXT=cpystr(mailbox));",
          "",
          "[Added Lines]",
          "4925:    IMAPG(imap_sfolder_objects)->LSIZE = strlen((char*)(IMAPG(imap_sfolder_objects)->LTEXT = (unsigned char*)cpystr(mailbox)));",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "4955:    ocur=IMAPG(imap_sfolder_objects_tail);",
          "4956:    ocur->next=mail_newfolderobjectlist();",
          "4957:    ocur=ocur->next;",
          "4959:    ocur->delimiter = delimiter;",
          "4960:    ocur->attributes = attributes;",
          "4961:    ocur->next = NIL;",
          "",
          "[Removed Lines]",
          "4958:    ocur->LSIZE=strlen(ocur->LTEXT = cpystr(mailbox));",
          "",
          "[Added Lines]",
          "4934:    ocur->LSIZE=strlen((char*)(ocur->LTEXT = (unsigned char*)cpystr(mailbox)));",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "4966:   if (IMAPG(imap_sfolders) == NIL) {",
          "4967:    IMAPG(imap_sfolders)=mail_newstringlist();",
          "4969:    IMAPG(imap_sfolders)->next=NIL;",
          "4970:    IMAPG(imap_sfolders_tail) = IMAPG(imap_sfolders);",
          "4971:   } else {",
          "4972:    cur=IMAPG(imap_sfolders_tail);",
          "4973:    cur->next=mail_newstringlist ();",
          "4974:    cur=cur->next;",
          "4976:    cur->next = NIL;",
          "4977:    IMAPG(imap_sfolders_tail) = cur;",
          "4978:   }",
          "",
          "[Removed Lines]",
          "4968:    IMAPG(imap_sfolders)->LSIZE=strlen(IMAPG(imap_sfolders)->LTEXT=cpystr(mailbox));",
          "4975:    cur->LSIZE = strlen (cur->LTEXT = cpystr (mailbox));",
          "",
          "[Added Lines]",
          "4944:    IMAPG(imap_sfolders)->LSIZE=strlen((char*)(IMAPG(imap_sfolders)->LTEXT = (unsigned char*)cpystr(mailbox)));",
          "4951:    cur->LSIZE = strlen((char*)(cur->LTEXT = (unsigned char*)cpystr(mailbox)));",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "5011:   if (IMAPG(imap_errorstack) == NIL) {",
          "5012:    IMAPG(imap_errorstack) = mail_newerrorlist();",
          "5014:    IMAPG(imap_errorstack)->errflg = errflg;",
          "5015:    IMAPG(imap_errorstack)->next = NIL;",
          "5016:   } else {",
          "",
          "[Removed Lines]",
          "5013:    IMAPG(imap_errorstack)->LSIZE = strlen(IMAPG(imap_errorstack)->LTEXT = cpystr(str));",
          "",
          "[Added Lines]",
          "4989:    IMAPG(imap_errorstack)->LSIZE = strlen((char*)(IMAPG(imap_errorstack)->LTEXT = (unsigned char*)cpystr(str)));",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "5020:    }",
          "5021:    cur->next = mail_newerrorlist();",
          "5022:    cur = cur->next;",
          "5024:    cur->errflg = errflg;",
          "5025:    cur->next = NIL;",
          "5026:   }",
          "",
          "[Removed Lines]",
          "5023:    cur->LSIZE = strlen(cur->LTEXT = cpystr(str));",
          "",
          "[Added Lines]",
          "4999:    cur->LSIZE = strlen((char*)(cur->LTEXT = (unsigned char*)cpystr(str)));",
          "",
          "---------------"
        ],
        "ext/openssl/openssl.c||ext/openssl/openssl.c": [
          "File: ext/openssl/openssl.c -> ext/openssl/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1760: }",
          "1764: {",
          "1765:  unsigned char md[EVP_MAX_MD_SIZE];",
          "1766:  const EVP_MD *mdtype;",
          "1767:  unsigned int n;",
          "1769:  if (!(mdtype = EVP_get_digestbyname(method))) {",
          "1770:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Unknown signature algorithm\");",
          "1772:  } else if (!X509_digest(peer, mdtype, md, &n)) {",
          "1773:   php_error_docref(NULL TSRMLS_CC, E_ERROR, \"Could not generate signature\");",
          "1775:  }",
          "1777:  if (raw) {",
          "1780:  } else {",
          "1785:  }",
          "1788: }",
          "1790: PHP_FUNCTION(openssl_x509_fingerprint)",
          "",
          "[Removed Lines]",
          "1763: int php_openssl_x509_fingerprint(X509 *peer, const char *method, zend_bool raw, char **out, int *out_len TSRMLS_DC)",
          "1771:   return FAILURE;",
          "1774:   return FAILURE;",
          "1784:   make_digest_ex(*out, md, n);",
          "1787:  return SUCCESS;",
          "",
          "[Added Lines]",
          "1763: zend_string* php_openssl_x509_fingerprint(X509 *peer, const char *method, zend_bool raw TSRMLS_DC)",
          "1768:  zend_string *ret;",
          "1772:   return NULL;",
          "1775:   return NULL;",
          "1779:   ret = STR_INIT((char*)md, n, 0);",
          "1781:   ret = STR_ALLOC(n * 2, 0);",
          "1782:   make_digest_ex(ret->val, md, n);",
          "1783:   ret->val[n * 2] = '\\0';",
          "1786:  return ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1795:  zend_bool raw_output = 0;",
          "1796:  char *method = \"sha1\";",
          "1797:  int method_len;",
          "1802:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"z|sb\", &zcert, &method, &method_len, &raw_output) == FAILURE) {",
          "1803:   return;",
          "",
          "[Removed Lines]",
          "1799:  char *fingerprint;",
          "1800:  int fingerprint_len;",
          "",
          "[Added Lines]",
          "1797:  zend_string *fingerprint;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1809:   RETURN_FALSE;",
          "1810:  }",
          "1816:  } else {",
          "1817:   RETVAL_FALSE;",
          "1818:  }",
          "",
          "[Removed Lines]",
          "1812:  if (php_openssl_x509_fingerprint(cert, method, raw_output, &fingerprint, &fingerprint_len TSRMLS_CC) == SUCCESS) {",
          "1814:   RETVAL_STRINGL(fingerprint, fingerprint_len);",
          "1815:   efree(fingerprint);",
          "",
          "[Added Lines]",
          "1809:  fingerprint = php_openssl_x509_fingerprint(cert, method, raw_output TSRMLS_CC);",
          "1810:  if (fingerprint) {",
          "1811:   RETVAL_STR(fingerprint);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3458: #define OPENSSL_PKEY_GET_BN(_type, _name) do {       \\",
          "3459:   if (pkey->pkey._type->_name != NULL) {       \\",
          "3460:    int len = BN_num_bytes(pkey->pkey._type->_name);   \\",
          "3467:   }                \\",
          "3468:  } while (0)",
          "",
          "[Removed Lines]",
          "3461:    char *str = emalloc(len + 1);        \\",
          "3462:    BN_bn2bin(pkey->pkey._type->_name, (unsigned char*)str); \\",
          "3463:    str[len] = 0;                                            \\",
          "3465:    add_assoc_stringl(&_type, #_name, str, len);    \\",
          "3466:    efree(str);             \\",
          "",
          "[Added Lines]",
          "3457:    zend_string *str = STR_ALLOC(len, 0);      \\",
          "3458:    BN_bn2bin(pkey->pkey._type->_name, (unsigned char*)str->val); \\",
          "3459:    str->val[len] = 0;                                          \\",
          "3460:    add_assoc_str(&_type, #_name, str);       \\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3877:  char *password; int password_len;",
          "3878:  char *salt; int salt_len;",
          "3879:  char *method; int method_len = 0;",
          "3882:  const EVP_MD *digest;",
          "",
          "[Removed Lines]",
          "3880:  unsigned char *out_buffer;",
          "",
          "[Added Lines]",
          "3874:  zend_string *out_buffer;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3904:   RETURN_FALSE;",
          "3905:  }",
          "3914:  } else {",
          "3916:   RETURN_FALSE;",
          "3917:  }",
          "3918: }",
          "",
          "[Removed Lines]",
          "3907:  out_buffer = emalloc(key_length + 1);",
          "3908:  out_buffer[key_length] = '\\0';",
          "3910:  if (PKCS5_PBKDF2_HMAC(password, password_len, (unsigned char *)salt, salt_len, iterations, digest, key_length, out_buffer) == 1) {",
          "3912:   RETVAL_STRINGL((char *)out_buffer, key_length);",
          "3913:   efree(out_buffer);",
          "3915:   efree(out_buffer);",
          "",
          "[Added Lines]",
          "3901:  out_buffer = STR_ALLOC(key_length, 0);",
          "3903:  if (PKCS5_PBKDF2_HMAC(password, password_len, (unsigned char *)salt, salt_len, iterations, digest, key_length, (unsigned char*)out_buffer->val) == 1) {",
          "3904:   out_buffer->val[key_length] = 0;",
          "3905:   RETURN_STR(out_buffer);",
          "3907:   STR_RELEASE(out_buffer);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4336:  zval *key, *crypted;",
          "4337:  EVP_PKEY *pkey;",
          "4338:  int cryptedlen;",
          "4340:  int successful = 0;",
          "4341:  zend_resource *keyresource = NULL;",
          "4342:  char * data;",
          "",
          "[Removed Lines]",
          "4339:  unsigned char *cryptedbuf = NULL;",
          "",
          "[Added Lines]",
          "4331:  zend_string *cryptedbuf = NULL;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4356:  }",
          "4358:  cryptedlen = EVP_PKEY_size(pkey);",
          "4361:  switch (pkey->type) {",
          "4362:   case EVP_PKEY_RSA:",
          "4363:   case EVP_PKEY_RSA2:",
          "4364:    successful =  (RSA_private_encrypt(data_len,",
          "4365:       (unsigned char *)data,",
          "4367:       pkey->pkey.rsa,",
          "4368:       padding) == cryptedlen);",
          "4369:    break;",
          "",
          "[Removed Lines]",
          "4359:  cryptedbuf = emalloc(cryptedlen + 1);",
          "4366:       cryptedbuf,",
          "",
          "[Added Lines]",
          "4351:  cryptedbuf = STR_ALLOC(cryptedlen, 0);",
          "4358:       (unsigned char *)cryptedbuf->val,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4374:  if (successful) {",
          "4375:   zval_dtor(crypted);",
          "4380:   cryptedbuf = NULL;",
          "4381:   RETVAL_TRUE;",
          "4382:  }",
          "4383:  if (cryptedbuf) {",
          "4385:  }",
          "4386:  if (keyresource == NULL) {",
          "4387:   EVP_PKEY_free(pkey);",
          "",
          "[Removed Lines]",
          "4376:   cryptedbuf[cryptedlen] = '\\0';",
          "4378:   ZVAL_STRINGL(crypted, (char *)cryptedbuf, cryptedlen);",
          "4379:   efree(cryptedbuf);",
          "4384:   efree(cryptedbuf);",
          "",
          "[Added Lines]",
          "4368:   cryptedbuf->val[cryptedlen] = '\\0';",
          "4369:   ZVAL_STR(crypted, cryptedbuf);",
          "4374:   STR_RELEASE(cryptedbuf);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4396:  zval *key, *crypted;",
          "4397:  EVP_PKEY *pkey;",
          "4398:  int cryptedlen;",
          "4400:  unsigned char *crypttemp;",
          "4401:  int successful = 0;",
          "4402:  long padding = RSA_PKCS1_PADDING;",
          "",
          "[Removed Lines]",
          "4399:  unsigned char *cryptedbuf = NULL;",
          "",
          "[Added Lines]",
          "4389:  zend_string *cryptedbuf = NULL;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4427:      pkey->pkey.rsa,",
          "4428:      padding);",
          "4429:    if (cryptedlen != -1) {",
          "4432:     successful = 1;",
          "4433:    }",
          "4434:    break;",
          "",
          "[Removed Lines]",
          "4430:     cryptedbuf = emalloc(cryptedlen + 1);",
          "4431:     memcpy(cryptedbuf, crypttemp, cryptedlen);",
          "",
          "[Added Lines]",
          "4420:     cryptedbuf = STR_ALLOC(cryptedlen, 0);",
          "4421:     memcpy(cryptedbuf->val, crypttemp, cryptedlen);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "4441:  if (successful) {",
          "4442:   zval_dtor(crypted);",
          "4447:   cryptedbuf = NULL;",
          "4448:   RETVAL_TRUE;",
          "4449:  }",
          "",
          "[Removed Lines]",
          "4443:   cryptedbuf[cryptedlen] = '\\0';",
          "4445:   ZVAL_STRINGL(crypted, (char *)cryptedbuf, cryptedlen);",
          "4446:   efree(cryptedbuf);",
          "",
          "[Added Lines]",
          "4433:   cryptedbuf->val[cryptedlen] = '\\0';",
          "4434:   ZVAL_STR(crypted, cryptedbuf);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "4452:   EVP_PKEY_free(pkey);",
          "4453:  }",
          "4454:  if (cryptedbuf) {",
          "4456:  }",
          "4457: }",
          "",
          "[Removed Lines]",
          "4455:   efree(cryptedbuf);",
          "",
          "[Added Lines]",
          "4443:   STR_RELEASE(cryptedbuf);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4464:  zval *key, *crypted;",
          "4465:  EVP_PKEY *pkey;",
          "4466:  int cryptedlen;",
          "4468:  int successful = 0;",
          "4469:  zend_resource *keyresource = NULL;",
          "4470:  long padding = RSA_PKCS1_PADDING;",
          "",
          "[Removed Lines]",
          "4467:  unsigned char *cryptedbuf;",
          "",
          "[Added Lines]",
          "4455:  zend_string *cryptedbuf;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "4482:  }",
          "4484:  cryptedlen = EVP_PKEY_size(pkey);",
          "4487:  switch (pkey->type) {",
          "4488:   case EVP_PKEY_RSA:",
          "4489:   case EVP_PKEY_RSA2:",
          "4490:    successful = (RSA_public_encrypt(data_len,",
          "4491:       (unsigned char *)data,",
          "4493:       pkey->pkey.rsa,",
          "4494:       padding) == cryptedlen);",
          "4495:    break;",
          "",
          "[Removed Lines]",
          "4485:  cryptedbuf = emalloc(cryptedlen + 1);",
          "4492:       cryptedbuf,",
          "",
          "[Added Lines]",
          "4473:  cryptedbuf = STR_ALLOC(cryptedlen, 0);",
          "4480:       (unsigned char *)cryptedbuf->val,",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "4501:  if (successful) {",
          "4502:   zval_dtor(crypted);",
          "4507:   cryptedbuf = NULL;",
          "4508:   RETVAL_TRUE;",
          "4509:  }",
          "",
          "[Removed Lines]",
          "4503:   cryptedbuf[cryptedlen] = '\\0';",
          "4505:   ZVAL_STRINGL(crypted, (char *)cryptedbuf, cryptedlen);",
          "4506:   efree(cryptedbuf);",
          "",
          "[Added Lines]",
          "4491:   cryptedbuf->val[cryptedlen] = '\\0';",
          "4492:   ZVAL_STR(crypted, cryptedbuf);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "4511:   EVP_PKEY_free(pkey);",
          "4512:  }",
          "4513:  if (cryptedbuf) {",
          "4515:  }",
          "4516: }",
          "",
          "[Removed Lines]",
          "4514:   efree(cryptedbuf);",
          "",
          "[Added Lines]",
          "4500:   STR_RELEASE(cryptedbuf);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "4523:  zval *key, *crypted;",
          "4524:  EVP_PKEY *pkey;",
          "4525:  int cryptedlen;",
          "4527:  unsigned char *crypttemp;",
          "4528:  int successful = 0;",
          "4529:  zend_resource *keyresource = NULL;",
          "",
          "[Removed Lines]",
          "4526:  unsigned char *cryptedbuf = NULL;",
          "",
          "[Added Lines]",
          "4512:  zend_string *cryptedbuf = NULL;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "4554:      pkey->pkey.rsa,",
          "4555:      padding);",
          "4556:    if (cryptedlen != -1) {",
          "4559:     successful = 1;",
          "4560:    }",
          "4561:    break;",
          "",
          "[Removed Lines]",
          "4557:     cryptedbuf = emalloc(cryptedlen + 1);",
          "4558:     memcpy(cryptedbuf, crypttemp, cryptedlen);",
          "",
          "[Added Lines]",
          "4543:     cryptedbuf = STR_ALLOC(cryptedlen, 0);",
          "4544:     memcpy(cryptedbuf->val, crypttemp, cryptedlen);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "4570:  if (successful) {",
          "4571:   zval_dtor(crypted);",
          "4576:   cryptedbuf = NULL;",
          "4577:   RETVAL_TRUE;",
          "4578:  }",
          "4580:  if (cryptedbuf) {",
          "4582:  }",
          "4583:  if (keyresource == NULL) {",
          "4584:   EVP_PKEY_free(pkey);",
          "",
          "[Removed Lines]",
          "4572:   cryptedbuf[cryptedlen] = '\\0';",
          "4574:   ZVAL_STRINGL(crypted, (char *)cryptedbuf, cryptedlen);",
          "4575:   efree(cryptedbuf);",
          "4581:   efree(cryptedbuf);",
          "",
          "[Added Lines]",
          "4558:   cryptedbuf->val[cryptedlen] = '\\0';",
          "4559:   ZVAL_STR(crypted, cryptedbuf);",
          "4565:   STR_RELEASE(cryptedbuf);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "4612: {",
          "4613:  zval *key, *signature;",
          "4614:  EVP_PKEY *pkey;",
          "4617:  zend_resource *keyresource = NULL;",
          "4618:  char * data;",
          "4619:  int data_len;",
          "",
          "[Removed Lines]",
          "4615:  int siglen;",
          "4616:  unsigned char *sigbuf;",
          "",
          "[Added Lines]",
          "4599:  unsigned int siglen;",
          "4600:  zend_string *sigbuf;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4648:  }",
          "4650:  siglen = EVP_PKEY_size(pkey);",
          "4653:  EVP_SignInit(&md_ctx, mdtype);",
          "4654:  EVP_SignUpdate(&md_ctx, data, data_len);",
          "4656:   zval_dtor(signature);",
          "4661:   RETVAL_TRUE;",
          "4662:  } else {",
          "4663:   efree(sigbuf);",
          "",
          "[Removed Lines]",
          "4651:  sigbuf = emalloc(siglen + 1);",
          "4655:  if (EVP_SignFinal (&md_ctx, sigbuf,(unsigned int *)&siglen, pkey)) {",
          "4657:   sigbuf[siglen] = '\\0';",
          "4659:   ZVAL_STRINGL(signature, (char *)sigbuf, siglen);",
          "4660:   efree(sigbuf);",
          "",
          "[Added Lines]",
          "4635:  sigbuf = STR_ALLOC(siglen, 0);",
          "4639:  if (EVP_SignFinal (&md_ctx, (unsigned char*)sigbuf->val, &siglen, pkey)) {",
          "4641:   sigbuf->val[siglen] = '\\0';",
          "4642:   sigbuf->len = siglen;",
          "4643:   ZVAL_STR(signature, sigbuf);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4965:  int data_len, method_len;",
          "4966:  const EVP_MD *mdtype;",
          "4967:  EVP_MD_CTX md_ctx;",
          "4971:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ss|b\", &data, &data_len, &method, &method_len, &raw_output) == FAILURE) {",
          "4972:   return;",
          "",
          "[Removed Lines]",
          "4968:  int siglen;",
          "4969:  unsigned char *sigbuf;",
          "",
          "[Added Lines]",
          "4951:  unsigned int siglen;",
          "4952:  zend_string *sigbuf;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4978:  }",
          "4980:  siglen = EVP_MD_size(mdtype);",
          "4983:  EVP_DigestInit(&md_ctx, mdtype);",
          "4984:  EVP_DigestUpdate(&md_ctx, (unsigned char *)data, data_len);",
          "4986:   if (raw_output) {",
          "4991:   } else {",
          "4992:    int digest_str_len = siglen * 2;",
          "5000:   }",
          "5001:  } else {",
          "5003:   RETVAL_FALSE;",
          "5004:  }",
          "5005: }",
          "",
          "[Removed Lines]",
          "4981:  sigbuf = emalloc(siglen + 1);",
          "4985:  if (EVP_DigestFinal (&md_ctx, (unsigned char *)sigbuf, (unsigned int *)&siglen)) {",
          "4987:    sigbuf[siglen] = '\\0';",
          "4989:    RETVAL_STRINGL((char *)sigbuf, siglen);",
          "4990:    efree(sigbuf);",
          "4993:    char *digest_str = emalloc(digest_str_len + 1);",
          "4995:    make_digest_ex(digest_str, sigbuf, siglen);",
          "4996:    efree(sigbuf);",
          "4998:    RETVAL_STRINGL(digest_str, digest_str_len);",
          "4999:    efree(digest_str);",
          "5002:   efree(sigbuf);",
          "",
          "[Added Lines]",
          "4964:  sigbuf = STR_ALLOC(siglen, 0);",
          "4968:  if (EVP_DigestFinal (&md_ctx, (unsigned char *)sigbuf->val, &siglen)) {",
          "4970:    sigbuf->val[siglen] = '\\0';",
          "4971:    sigbuf->len = siglen;",
          "4972:    RETVAL_STR(sigbuf);",
          "4975:    zend_string *digest_str = STR_ALLOC(digest_str_len, 0);",
          "4977:    make_digest_ex(digest_str->val, (unsigned char*)sigbuf->val, siglen);",
          "4978:    digest_str->val[digest_str_len] = '\\0';",
          "4979:    STR_RELEASE(sigbuf);",
          "4980:    RETVAL_STR(digest_str);",
          "4983:   STR_RELEASE(sigbuf);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "5049:  const EVP_CIPHER *cipher_type;",
          "5050:  EVP_CIPHER_CTX cipher_ctx;",
          "5051:  int i=0, outlen, keylen;",
          "5053:  zend_bool free_iv;",
          "5055:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sss|ls\", &data, &data_len, &method, &method_len, &password, &password_len, &options, &iv, &iv_len) == FAILURE) {",
          "",
          "[Removed Lines]",
          "5052:  unsigned char *outbuf, *key;",
          "",
          "[Added Lines]",
          "5033:  zend_string *outbuf;",
          "5034:  unsigned char *key;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "5077:  free_iv = php_openssl_validate_iv(&iv, &iv_len, max_iv_len TSRMLS_CC);",
          "5079:  outlen = data_len + EVP_CIPHER_block_size(cipher_type);",
          "5082:  EVP_EncryptInit(&cipher_ctx, cipher_type, NULL, NULL);",
          "5083:  if (password_len > keylen) {",
          "",
          "[Removed Lines]",
          "5080:  outbuf = emalloc(outlen + 1);",
          "",
          "[Added Lines]",
          "5062:  outbuf = STR_ALLOC(outlen, 0);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "5088:   EVP_CIPHER_CTX_set_padding(&cipher_ctx, 0);",
          "5089:  }",
          "5090:  if (data_len > 0) {",
          "5092:  }",
          "5093:  outlen = i;",
          "5095:   outlen += i;",
          "5096:   if (options & OPENSSL_RAW_DATA) {",
          "5101:   } else {",
          "5102:    zend_string *base64_str;",
          "5106:    RETVAL_STR(base64_str);",
          "5107:   }",
          "5108:  } else {",
          "5110:   RETVAL_FALSE;",
          "5111:  }",
          "5112:  if (key != (unsigned char*)password) {",
          "",
          "[Removed Lines]",
          "5091:   EVP_EncryptUpdate(&cipher_ctx, outbuf, &i, (unsigned char *)data, data_len);",
          "5094:  if (EVP_EncryptFinal(&cipher_ctx, (unsigned char *)outbuf + i, &i)) {",
          "5097:    outbuf[outlen] = '\\0';",
          "5099:    RETVAL_STRINGL((char *)outbuf, outlen);",
          "5100:    efree(outbuf);",
          "5104:    base64_str = php_base64_encode(outbuf, outlen);",
          "5105:    efree(outbuf);",
          "5109:   efree(outbuf);",
          "",
          "[Added Lines]",
          "5073:   EVP_EncryptUpdate(&cipher_ctx, (unsigned char*)outbuf->val, &i, (unsigned char *)data, data_len);",
          "5076:  if (EVP_EncryptFinal(&cipher_ctx, (unsigned char *)outbuf->val + i, &i)) {",
          "5079:    outbuf->val[outlen] = '\\0';",
          "5080:    outbuf->len = outlen;",
          "5081:    RETVAL_STR(outbuf);",
          "5085:    base64_str = php_base64_encode((unsigned char*)outbuf->val, outlen);",
          "5086:    STR_RELEASE(outbuf);",
          "5090:   STR_RELEASE(outbuf);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "5129:  const EVP_CIPHER *cipher_type;",
          "5130:  EVP_CIPHER_CTX cipher_ctx;",
          "5131:  int i, outlen, keylen;",
          "5133:  zend_string *base64_str = NULL;",
          "5134:  zend_bool free_iv;",
          "",
          "[Removed Lines]",
          "5132:  unsigned char *outbuf, *key;",
          "",
          "[Added Lines]",
          "5113:  zend_string *outbuf;",
          "5114:  unsigned char *key;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "5170:  free_iv = php_openssl_validate_iv(&iv, &iv_len, EVP_CIPHER_iv_length(cipher_type) TSRMLS_CC);",
          "5172:  outlen = data_len + EVP_CIPHER_block_size(cipher_type);",
          "5175:  EVP_DecryptInit(&cipher_ctx, cipher_type, NULL, NULL);",
          "5176:  if (password_len > keylen) {",
          "",
          "[Removed Lines]",
          "5173:  outbuf = emalloc(outlen + 1);",
          "",
          "[Added Lines]",
          "5155:  outbuf = STR_ALLOC(outlen, 0);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "5180:  if (options & OPENSSL_ZERO_PADDING) {",
          "5181:   EVP_CIPHER_CTX_set_padding(&cipher_ctx, 0);",
          "5182:  }",
          "5184:  outlen = i;",
          "5186:   outlen += i;",
          "5191:  } else {",
          "5193:   RETVAL_FALSE;",
          "5194:  }",
          "5195:  if (key != (unsigned char*)password) {",
          "",
          "[Removed Lines]",
          "5183:  EVP_DecryptUpdate(&cipher_ctx, outbuf, &i, (unsigned char *)data, data_len);",
          "5185:  if (EVP_DecryptFinal(&cipher_ctx, (unsigned char *)outbuf + i, &i)) {",
          "5187:   outbuf[outlen] = '\\0';",
          "5189:   RETVAL_STRINGL((char *)outbuf, outlen);",
          "5190:   efree(outbuf);",
          "5192:   efree(outbuf);",
          "",
          "[Added Lines]",
          "5165:  EVP_DecryptUpdate(&cipher_ctx, (unsigned char*)outbuf->val, &i, (unsigned char *)data, data_len);",
          "5167:  if (EVP_DecryptFinal(&cipher_ctx, (unsigned char *)outbuf->val + i, &i)) {",
          "5169:   outbuf->val[outlen] = '\\0';",
          "5170:   outbuf->len = outlen;",
          "5171:   RETVAL_STR(outbuf);",
          "5173:   STR_RELEASE(outbuf);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "5241:  int pub_len;",
          "5242:  EVP_PKEY *pkey;",
          "5243:  BIGNUM *pub;",
          "5245:  int len;",
          "5247:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sr\", &pub_str, &pub_len, &key) == FAILURE) {",
          "",
          "[Removed Lines]",
          "5244:  char *data;",
          "",
          "[Added Lines]",
          "5225:  zend_string *data;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "5255:  pub = BN_bin2bn((unsigned char*)pub_str, pub_len, NULL);",
          "5260:  if (len >= 0) {",
          "5265:  } else {",
          "5267:   RETVAL_FALSE;",
          "5268:  }",
          "",
          "[Removed Lines]",
          "5257:  data = emalloc(DH_size(pkey->pkey.dh) + 1);",
          "5258:  len = DH_compute_key((unsigned char*)data, pub, pkey->pkey.dh);",
          "5261:   data[len] = 0;",
          "5263:   RETVAL_STRINGL(data, len);",
          "5264:   efree(data);",
          "5266:   efree(data);",
          "",
          "[Added Lines]",
          "5238:  data = STR_ALLOC(DH_size(pkey->pkey.dh), 0);",
          "5239:  len = DH_compute_key((unsigned char*)data->val, pub, pkey->pkey.dh);",
          "5242:   data->len = len;",
          "5243:   data->val[len] = 0;",
          "5244:   RETVAL_STR(data);",
          "5246:   STR_RELEASE(data);",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "5276: PHP_FUNCTION(openssl_random_pseudo_bytes)",
          "5277: {",
          "5278:  long buffer_length;",
          "5280:  zval *zstrong_result_returned = NULL;",
          "5281:  int strong_result = 0;",
          "",
          "[Removed Lines]",
          "5279:  unsigned char *buffer = NULL;",
          "",
          "[Added Lines]",
          "5259:  zend_string *buffer = NULL;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "5293:   ZVAL_BOOL(zstrong_result_returned, 0);",
          "5294:  }",
          "5298: #ifdef PHP_WIN32",
          "5299:  strong_result = 1;",
          "5303:   if (zstrong_result_returned) {",
          "5304:    ZVAL_BOOL(zstrong_result_returned, 0);",
          "5305:   }",
          "5306:   RETURN_FALSE;",
          "5307:  }",
          "5308: #else",
          "5311:   if (zstrong_result_returned) {",
          "5312:    ZVAL_BOOL(zstrong_result_returned, 0);",
          "5313:   }",
          "",
          "[Removed Lines]",
          "5296:  buffer = emalloc(buffer_length + 1);",
          "5301:  if (php_win32_get_random_bytes(buffer, (size_t) buffer_length) == FAILURE){",
          "5302:   efree(buffer);",
          "5309:  if ((strong_result = RAND_pseudo_bytes(buffer, buffer_length)) < 0) {",
          "5310:   efree(buffer);",
          "",
          "[Added Lines]",
          "5276:  buffer = STR_ALLOC(buffer_length, 0);",
          "5281:  if (php_win32_get_random_bytes((unsigned char*)buffer->val, (size_t) buffer_length) == FAILURE){",
          "5282:   STR_RELEASE(buffer);",
          "5289:  if ((strong_result = RAND_pseudo_bytes((unsigned char*)buffer->val, buffer_length)) < 0) {",
          "5290:   STR_RELEASE(buffer);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "5315:  }",
          "5316: #endif",
          "5323:  if (zstrong_result_returned) {",
          "5324:   ZVAL_BOOL(zstrong_result_returned, strong_result);",
          "",
          "[Removed Lines]",
          "5318:  buffer[buffer_length] = 0;",
          "5320:  RETVAL_STRINGL((char *)buffer, buffer_length);",
          "5321:  efree(buffer);",
          "",
          "[Added Lines]",
          "5298:  buffer->val[buffer_length] = 0;",
          "5299:  RETVAL_STR(buffer);",
          "",
          "---------------"
        ],
        "ext/openssl/xp_ssl.c||ext/openssl/xp_ssl.c": [
          "File: ext/openssl/xp_ssl.c -> ext/openssl/xp_ssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "75: #define PHP_X509_NAME_ENTRY_TO_UTF8(ne, i, out) ASN1_STRING_to_UTF8(&out, X509_NAME_ENTRY_get_data(X509_NAME_get_entry(ne, i)))",
          "77: extern php_stream* php_openssl_get_stream_from_ssl_handle(const SSL *ssl);",
          "79: extern int php_openssl_get_ssl_stream_data_index();",
          "80: extern int php_openssl_get_x509_list_id(void);",
          "",
          "[Removed Lines]",
          "78: extern int php_openssl_x509_fingerprint(X509 *peer, const char *method, zend_bool raw, char **out, int *out_len TSRMLS_DC);",
          "",
          "[Added Lines]",
          "78: extern zend_string* php_openssl_x509_fingerprint(X509 *peer, const char *method, zend_bool raw TSRMLS_DC);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "266: static int php_x509_fingerprint_cmp(X509 *peer, const char *method, const char *expected TSRMLS_DC)",
          "267: {",
          "270:  int result = -1;",
          "275:  }",
          "277:  return result;",
          "",
          "[Removed Lines]",
          "268:  char *fingerprint;",
          "269:  int fingerprint_len;",
          "272:  if (php_openssl_x509_fingerprint(peer, method, 0, &fingerprint, &fingerprint_len TSRMLS_CC) == SUCCESS) {",
          "273:   result = strcmp(expected, fingerprint);",
          "274:   efree(fingerprint);",
          "",
          "[Added Lines]",
          "268:  zend_string *fingerprint;",
          "271:  fingerprint = php_openssl_x509_fingerprint(peer, method, 0 TSRMLS_CC);",
          "272:  if (fingerprint) {",
          "273:   result = strcmp(expected, fingerprint->val);",
          "274:   STR_RELEASE(fingerprint);",
          "",
          "---------------"
        ],
        "ext/spl/spl_iterators.c||ext/spl/spl_iterators.c": [
          "File: ext/spl/spl_iterators.c -> ext/spl/spl_iterators.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2686:    }",
          "2687:    use_copy = zend_make_printable_zval(&intern->u.caching.zstr, &expr_copy TSRMLS_CC);",
          "2688:    if (use_copy) {",
          "2693:    } else if (Z_REFCOUNTED(intern->u.caching.zstr)) {",
          "2696:     Z_ADDREF(intern->u.caching.zstr);",
          "2697:    }",
          "2698:   }",
          "",
          "[Removed Lines]",
          "2689:     ZVAL_COPY(&intern->u.caching.zstr, &expr_copy);",
          "2692:     zval_dtor(&expr_copy);",
          "",
          "[Added Lines]",
          "2688:     ZVAL_COPY_VALUE(&intern->u.caching.zstr, &expr_copy);",
          "",
          "---------------"
        ],
        "ext/standard/string.c||ext/standard/string.c": [
          "File: ext/standard/string.c -> ext/standard/string.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:   }",
          "181:   ret[i] = d;",
          "182:  }",
          "184:  return str;",
          "185: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "183:  ret[i] = '\\0';",
          "",
          "---------------"
        ],
        "ext/xml/xml.c||ext/xml/xml.c": [
          "File: ext/xml/xml.c -> ext/xml/xml.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "291: static PHP_GINIT_FUNCTION(xml)",
          "292: {",
          "294: }",
          "296: static void *php_xml_malloc_wrapper(size_t sz)",
          "",
          "[Removed Lines]",
          "293:  xml_globals->default_encoding = \"UTF-8\";",
          "",
          "[Added Lines]",
          "293:  xml_globals->default_encoding = (XML_Char*)\"UTF-8\";",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "727:    array_init(&args[2]);",
          "729:    while (attributes && *attributes) {",
          "730:     att = _xml_decode_tag(parser, (const char *)attributes[0]);",
          "731:     val = xml_utf8_decode(attributes[1], strlen((char *)attributes[1]), parser->target_encoding);",
          "736:     attributes += 2;",
          "",
          "[Removed Lines]",
          "734:     add_assoc_str(&args[2], att->val, val);",
          "",
          "[Added Lines]",
          "730:     zval tmp;",
          "735:     ZVAL_STR(&tmp, val);",
          "736:     zend_symtable_update(Z_ARRVAL(args[2]), att, &tmp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "762:     attributes = (const XML_Char **) attrs;",
          "764:     while (attributes && *attributes) {",
          "765:      att = _xml_decode_tag(parser, (const char *)attributes[0]);",
          "766:      val = xml_utf8_decode(attributes[1], strlen((char *)attributes[1]), parser->target_encoding);",
          "771:      atcnt++;",
          "772:      attributes += 2;",
          "",
          "[Removed Lines]",
          "769:      add_assoc_str(&atr, att->val, val);",
          "",
          "[Added Lines]",
          "767:      zval tmp;",
          "772:      ZVAL_STR(&tmp, val);",
          "773:      zend_symtable_update(Z_ARRVAL(atr), att, &tmp);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1109:    encoding = XML(default_encoding);",
          "1110:    auto_detect = 1;",
          "1111:   } else if (strcasecmp(encoding_param, \"ISO-8859-1\") == 0) {",
          "1113:   } else if (strcasecmp(encoding_param, \"UTF-8\") == 0) {",
          "1115:   } else if (strcasecmp(encoding_param, \"US-ASCII\") == 0) {",
          "1117:   } else {",
          "1118:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"unsupported source encoding \\\"%s\\\"\", encoding_param);",
          "1119:    RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "1112:    encoding = \"ISO-8859-1\";",
          "1114:    encoding = \"UTF-8\";",
          "1116:    encoding = \"US-ASCII\";",
          "",
          "[Added Lines]",
          "1114:    encoding = (XML_Char*)\"ISO-8859-1\";",
          "1116:    encoding = (XML_Char*)\"UTF-8\";",
          "1118:    encoding = (XML_Char*)\"US-ASCII\";",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1129:  parser = ecalloc(1, sizeof(xml_parser));",
          "1130:  parser->parser = XML_ParserCreate_MM((auto_detect ? NULL : encoding),",
          "1133:  parser->target_encoding = encoding;",
          "1134:  parser->case_folding = 1;",
          "",
          "[Removed Lines]",
          "1131:                                          &php_xml_mem_hdlrs, ns_param);",
          "",
          "[Added Lines]",
          "1133:                                          &php_xml_mem_hdlrs, (XML_Char*)ns_param);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1372:  ZEND_FETCH_RESOURCE(parser, xml_parser *, pind, -1, \"XML Parser\", le_xml_parser);",
          "1374:  parser->isparsing = 1;",
          "1376:  parser->isparsing = 0;",
          "1377:  RETVAL_LONG(ret);",
          "1378: }",
          "",
          "[Removed Lines]",
          "1375:  ret = XML_Parse(parser->parser, data, data_len, isFinal);",
          "",
          "[Added Lines]",
          "1377:  ret = XML_Parse(parser->parser, (XML_Char*)data, data_len, isFinal);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1417:  XML_SetCharacterDataHandler(parser->parser, _xml_characterDataHandler);",
          "1419:  parser->isparsing = 1;",
          "1421:  parser->isparsing = 0;",
          "1423:  RETVAL_LONG(ret);",
          "",
          "[Removed Lines]",
          "1420:  ret = XML_Parse(parser->parser, data, data_len, 1);",
          "",
          "[Added Lines]",
          "1422:  ret = XML_Parse(parser->parser, (XML_Char*)data, data_len, 1);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1566:   case PHP_XML_OPTION_TARGET_ENCODING: {",
          "1567:    xml_encoding *enc;",
          "1568:    convert_to_string_ex(val);",
          "1570:    if (enc == NULL) {",
          "1571:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Unsupported target encoding \\\"%s\\\"\", Z_STRVAL_P(val));",
          "1572:     RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "1569:    enc = xml_get_encoding(Z_STRVAL_P(val));",
          "",
          "[Added Lines]",
          "1571:    enc = xml_get_encoding((XML_Char*)Z_STRVAL_P(val));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1625:   return;",
          "1626:  }",
          "1629:  if (encoded == NULL) {",
          "1630:   RETURN_FALSE;",
          "1631:  }",
          "",
          "[Removed Lines]",
          "1628:  encoded = xml_utf8_encode(arg, arg_len, \"ISO-8859-1\");",
          "",
          "[Added Lines]",
          "1630:  encoded = xml_utf8_encode(arg, arg_len, (XML_Char*)\"ISO-8859-1\");",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1645:   return;",
          "1646:  }",
          "1649:  if (decoded == NULL) {",
          "1650:   RETURN_FALSE;",
          "1651:  }",
          "",
          "[Removed Lines]",
          "1648:  decoded = xml_utf8_decode(arg, arg_len, \"ISO-8859-1\");",
          "",
          "[Added Lines]",
          "1650:  decoded = xml_utf8_decode((XML_Char*)arg, arg_len, (XML_Char*)\"ISO-8859-1\");",
          "",
          "---------------"
        ],
        "sapi/cli/php_cli_server.c||sapi/cli/php_cli_server.c": [
          "File: sapi/cli/php_cli_server.c -> sapi/cli/php_cli_server.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "415:  HashTable *headers;",
          "416:  zend_string *key;",
          "417:  char *value;",
          "420:  if (zend_parse_parameters_none() == FAILURE) {",
          "421:   return;",
          "",
          "[Removed Lines]",
          "418:  HashPosition pos;",
          "",
          "[Added Lines]",
          "418:  zval tmp;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "427:  array_init_size(return_value, zend_hash_num_elements(headers));",
          "436: }",
          "",
          "[Removed Lines]",
          "429:  zend_hash_internal_pointer_reset_ex(headers, &pos);",
          "430:  while ((value = zend_hash_get_current_data_ptr_ex(headers, &pos)) != NULL) {",
          "431:   zend_hash_get_current_key_ex(headers, &key, NULL, 0, &pos);",
          "433:   add_assoc_string_ex(return_value, key->val, key->len, value);",
          "434:   zend_hash_move_forward_ex(headers, &pos);",
          "435:  }",
          "",
          "[Added Lines]",
          "429:  ZEND_HASH_FOREACH_STR_KEY_PTR(headers, key, value) {",
          "430:   ZVAL_STRING(&tmp, value);",
          "431:   zend_symtable_update(Z_ARRVAL_P(return_value), key, &tmp);",
          "432:  } ZEND_HASH_FOREACH_END();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ad028ebc1158ad88b85e217078fa372fe82f8094",
      "candidate_info": {
        "commit_hash": "ad028ebc1158ad88b85e217078fa372fe82f8094",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/ad028ebc1158ad88b85e217078fa372fe82f8094",
        "files": [
          "ext/openssl/openssl.c"
        ],
        "message": "Use new range checks in openssl ext",
        "before_after_code_files": [
          "ext/openssl/openssl.c||ext/openssl/openssl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c"
          ],
          "candidate": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/openssl/openssl.c||ext/openssl/openssl.c": [
          "File: ext/openssl/openssl.c -> ext/openssl/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "534: ZEND_GET_MODULE(openssl)",
          "535: #endif",
          "539:  do { \\",
          "541:    php_error_docref(NULL, E_WARNING, #_name\" is too long\"); \\",
          "542:    RETURN_FALSE; \\",
          "543:   } \\",
          "544:  } while(0)",
          "547: static int le_key;",
          "548: static int le_x509;",
          "",
          "[Removed Lines]",
          "538: #define PHP_OPENSSL_CHECK_OVERFLOW_EX(_var, _name, _max) \\",
          "540:   if (_max < _var) { \\",
          "545: #define PHP_OPENSSL_CHECK_OVERFLOW(_var, _name) PHP_OPENSSL_CHECK_OVERFLOW_EX(_var, _name, INT_MAX)",
          "",
          "[Added Lines]",
          "538: #define PHP_OPENSSL_CHECK_NUMBER_CONVERSION(_cond, _name) \\",
          "540:   if (_cond) { \\",
          "546: #define PHP_OPENSSL_CHECK_SIZE_T_TO_INT(_var, _name) \\",
          "547:  PHP_OPENSSL_CHECK_NUMBER_CONVERSION(ZEND_SIZE_T_INT_OVFL(_var), _name)",
          "549: #define PHP_OPENSSL_CHECK_SIZE_T_TO_UINT(_var, _name) \\",
          "550:  PHP_OPENSSL_CHECK_NUMBER_CONVERSION(ZEND_SIZE_T_UINT_OVFL(_var), _name)",
          "552: #define PHP_OPENSSL_CHECK_LONG_TO_INT(_var, _name) \\",
          "553:  PHP_OPENSSL_CHECK_NUMBER_CONVERSION(ZEND_LONG_EXCEEDS_INT(_var), _name)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2554:  RETVAL_FALSE;",
          "2558:  bio_in = BIO_new(BIO_s_mem());",
          "",
          "[Removed Lines]",
          "2556:  PHP_OPENSSL_CHECK_OVERFLOW(zp12_len, pkcs12);",
          "",
          "[Added Lines]",
          "2565:  PHP_OPENSSL_CHECK_SIZE_T_TO_INT(zp12_len, pkcs12);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3673:  }",
          "3674:  RETVAL_FALSE;",
          "3678:  key = php_openssl_evp_from_zval(zpkey, 0, passphrase, 0, &key_resource);",
          "",
          "[Removed Lines]",
          "3676:  PHP_OPENSSL_CHECK_OVERFLOW(passphrase_len, passphrase);",
          "",
          "[Added Lines]",
          "3685:  PHP_OPENSSL_CHECK_SIZE_T_TO_INT(passphrase_len, passphrase);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3747:  }",
          "3748:  RETVAL_FALSE;",
          "3752:  key = php_openssl_evp_from_zval(zpkey, 0, passphrase, 0, &key_resource);",
          "",
          "[Removed Lines]",
          "3750:  PHP_OPENSSL_CHECK_OVERFLOW(passphrase_len, passphrase);",
          "",
          "[Added Lines]",
          "3759:  PHP_OPENSSL_CHECK_SIZE_T_TO_INT(passphrase_len, passphrase);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4039:   RETURN_FALSE;",
          "4040:  }",
          "4047:  out_buffer = zend_string_alloc(key_length, 0);",
          "",
          "[Removed Lines]",
          "4042:  PHP_OPENSSL_CHECK_OVERFLOW(key_length, key);",
          "4043:  PHP_OPENSSL_CHECK_OVERFLOW(iterations, iterations);",
          "4044:  PHP_OPENSSL_CHECK_OVERFLOW(password_len, password);",
          "4045:  PHP_OPENSSL_CHECK_OVERFLOW(salt_len, salt);",
          "",
          "[Added Lines]",
          "4051:  PHP_OPENSSL_CHECK_LONG_TO_INT(key_length, key);",
          "4052:  PHP_OPENSSL_CHECK_LONG_TO_INT(iterations, iterations);",
          "4053:  PHP_OPENSSL_CHECK_SIZE_T_TO_INT(password_len, password);",
          "4054:  PHP_OPENSSL_CHECK_SIZE_T_TO_INT(salt_len, salt);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4504:   RETURN_FALSE;",
          "4505:  }",
          "4509:  cryptedlen = EVP_PKEY_size(pkey);",
          "4510:  cryptedbuf = zend_string_alloc(cryptedlen, 0);",
          "",
          "[Removed Lines]",
          "4507:  PHP_OPENSSL_CHECK_OVERFLOW(data_len, data);",
          "",
          "[Added Lines]",
          "4516:  PHP_OPENSSL_CHECK_SIZE_T_TO_INT(data_len, data);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4564:   RETURN_FALSE;",
          "4565:  }",
          "4569:  cryptedlen = EVP_PKEY_size(pkey);",
          "4570:  crypttemp = emalloc(cryptedlen + 1);",
          "",
          "[Removed Lines]",
          "4567:  PHP_OPENSSL_CHECK_OVERFLOW(data_len, data);",
          "",
          "[Added Lines]",
          "4576:  PHP_OPENSSL_CHECK_SIZE_T_TO_INT(data_len, data);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4630:   RETURN_FALSE;",
          "4631:  }",
          "4635:  cryptedlen = EVP_PKEY_size(pkey);",
          "4636:  cryptedbuf = zend_string_alloc(cryptedlen, 0);",
          "",
          "[Removed Lines]",
          "4633:  PHP_OPENSSL_CHECK_OVERFLOW(data_len, data);",
          "",
          "[Added Lines]",
          "4642:  PHP_OPENSSL_CHECK_SIZE_T_TO_INT(data_len, data);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "4691:   RETURN_FALSE;",
          "4692:  }",
          "4696:  cryptedlen = EVP_PKEY_size(pkey);",
          "4697:  crypttemp = emalloc(cryptedlen + 1);",
          "",
          "[Removed Lines]",
          "4694:  PHP_OPENSSL_CHECK_OVERFLOW(data_len, data);",
          "",
          "[Added Lines]",
          "4703:  PHP_OPENSSL_CHECK_SIZE_T_TO_INT(data_len, data);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "4839:   return;",
          "4840:  }",
          "4844:  if (method == NULL || Z_TYPE_P(method) == IS_LONG) {",
          "4845:   if (method != NULL) {",
          "",
          "[Removed Lines]",
          "4842:  PHP_OPENSSL_CHECK_OVERFLOW_EX(signature_len, signature, UINT_MAX);",
          "",
          "[Added Lines]",
          "4851:  PHP_OPENSSL_CHECK_SIZE_T_TO_UINT(signature_len, signature);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4902:   RETURN_FALSE;",
          "4903:  }",
          "4907:  if (method) {",
          "4908:   cipher = EVP_get_cipherbyname(method);",
          "",
          "[Removed Lines]",
          "4905:  PHP_OPENSSL_CHECK_OVERFLOW(data_len, data);",
          "",
          "[Added Lines]",
          "4914:  PHP_OPENSSL_CHECK_SIZE_T_TO_INT(data_len, data);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "5033:   RETURN_FALSE;",
          "5034:  }",
          "5039:  if (method) {",
          "5040:   cipher = EVP_get_cipherbyname(method);",
          "",
          "[Removed Lines]",
          "5036:  PHP_OPENSSL_CHECK_OVERFLOW(ekey_len, ekey);",
          "5037:  PHP_OPENSSL_CHECK_OVERFLOW(data_len, data);",
          "",
          "[Added Lines]",
          "5045:  PHP_OPENSSL_CHECK_SIZE_T_TO_INT(ekey_len, ekey);",
          "5046:  PHP_OPENSSL_CHECK_SIZE_T_TO_INT(data_len, data);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "5220:   RETURN_FALSE;",
          "5221:  }",
          "5225:  keylen = EVP_CIPHER_key_length(cipher_type);",
          "5226:  if (keylen > password_len) {",
          "",
          "[Removed Lines]",
          "5223:  PHP_OPENSSL_CHECK_OVERFLOW(data_len, data);",
          "",
          "[Added Lines]",
          "5232:  PHP_OPENSSL_CHECK_SIZE_T_TO_INT(data_len, data);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "5243:  EVP_EncryptInit(&cipher_ctx, cipher_type, NULL, NULL);",
          "5244:  if (password_len > keylen) {",
          "5246:   EVP_CIPHER_CTX_set_key_length(&cipher_ctx, (int)password_len);",
          "5247:  }",
          "5248:  EVP_EncryptInit_ex(&cipher_ctx, NULL, NULL, key, (unsigned char *)iv);",
          "",
          "[Removed Lines]",
          "5245:   PHP_OPENSSL_CHECK_OVERFLOW(password_len, password);",
          "",
          "[Added Lines]",
          "5254:   PHP_OPENSSL_CHECK_SIZE_T_TO_INT(password_len, password);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5304:   RETURN_FALSE;",
          "5305:  }",
          "5309:  cipher_type = EVP_get_cipherbyname(method);",
          "5310:  if (!cipher_type) {",
          "",
          "[Removed Lines]",
          "5307:  PHP_OPENSSL_CHECK_OVERFLOW(data_len, data);",
          "",
          "[Added Lines]",
          "5316:  PHP_OPENSSL_CHECK_SIZE_T_TO_INT(data_len, data);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5339:  EVP_DecryptInit(&cipher_ctx, cipher_type, NULL, NULL);",
          "5340:  if (password_len > keylen) {",
          "5342:   EVP_CIPHER_CTX_set_key_length(&cipher_ctx, (int)password_len);",
          "5343:  }",
          "5344:  EVP_DecryptInit_ex(&cipher_ctx, NULL, NULL, key, (unsigned char *)iv);",
          "",
          "[Removed Lines]",
          "5341:   PHP_OPENSSL_CHECK_OVERFLOW(password_len, password);",
          "",
          "[Added Lines]",
          "5350:   PHP_OPENSSL_CHECK_SIZE_T_TO_INT(password_len, password);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5418:   RETURN_FALSE;",
          "5419:  }",
          "5422:  pub = BN_bin2bn((unsigned char*)pub_str, (int)pub_len, NULL);",
          "5424:  data = zend_string_alloc(DH_size(pkey->pkey.dh), 0);",
          "",
          "[Removed Lines]",
          "5421:  PHP_OPENSSL_CHECK_OVERFLOW(pub_len, pub_key);",
          "",
          "[Added Lines]",
          "5430:  PHP_OPENSSL_CHECK_SIZE_T_TO_INT(pub_len, pub_key);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5471:  }",
          "5472: #else",
          "5476:  if (RAND_bytes((unsigned char*)ZSTR_VAL(buffer), (int)buffer_length) <= 0) {",
          "5477:   zend_string_release(buffer);",
          "",
          "[Removed Lines]",
          "5474:  PHP_OPENSSL_CHECK_OVERFLOW(buffer_length, length);",
          "",
          "[Added Lines]",
          "5483:  PHP_OPENSSL_CHECK_LONG_TO_INT(buffer_length, length);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97047e7665368d0cf30501f7a4b6a124de25957b",
      "candidate_info": {
        "commit_hash": "97047e7665368d0cf30501f7a4b6a124de25957b",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/97047e7665368d0cf30501f7a4b6a124de25957b",
        "files": [
          ".gitignore",
          "Zend/tests/bug70121.phpt",
          "Zend/zend_exceptions.c",
          "ext/date/tests/bug53437_var3.phpt",
          "ext/date/tests/bug53437_var5.phpt",
          "ext/openssl/openssl.c",
          "ext/phar/phar_internal.h",
          "ext/phar/phar_object.c",
          "ext/phar/tests/bug70019.phpt",
          "ext/phar/tests/bug70019.zip",
          "ext/soap/php_http.c",
          "ext/spl/spl_array.c",
          "ext/spl/spl_observer.c",
          "ext/spl/tests/bug70068.phpt",
          "ext/spl/tests/bug70166.phpt",
          "ext/spl/tests/bug70168.phpt",
          "ext/spl/tests/bug70169.phpt",
          "ext/standard/tests/serialize/bug69152.phpt",
          "ext/standard/tests/serialize/bug69793.phpt",
          "sapi/cli/tests/005.phpt"
        ],
        "message": "Merge branch 'PHP-5.6'\n\n* PHP-5.6:\n  update NEWS\n  fix test\n  update NEWS\n  Fix bug #70019 - limit extracted files to given directory\n  Do not do convert_to_* on unserialize, it messes up references\n  Fix #69793 - limit what we accept when unserializing exception\n  Fixed bug #70169 (Use After Free Vulnerability in unserialize() with SplDoublyLinkedList)\n  Fixed bug #70166 - Use After Free Vulnerability in unserialize() with SPLArrayObject\n  ignore signatures for packages too\n  Fix bug #70168 - Use After Free Vulnerability in unserialize() with SplObjectStorage\n  Fixed bug #69892\n  Fix bug #70014 - use RAND_bytes instead of deprecated RAND_pseudo_bytes\n  Improved fix for Bug #69441\n  Fix bug #70068 (Dangling pointer in the unserialization of ArrayObject items)\n  Fix bug #70121 (unserialize() could lead to unexpected methods execution / NULL pointer deref)\n  Fix bug #70081: check types for SOAP variables\n\nConflicts:\n\tZend/zend_exceptions.c\n\text/date/php_date.c\n\text/openssl/openssl.c\n\text/phar/phar_internal.h\n\text/soap/php_http.c\n\text/spl/spl_array.c\n\text/spl/spl_dllist.c\n\text/spl/spl_observer.c\n\text/standard/tests/serialize/bug69152.phpt\n\tsapi/cli/tests/005.phpt",
        "before_after_code_files": [
          "Zend/tests/bug70121.phpt||Zend/tests/bug70121.phpt",
          "Zend/zend_exceptions.c||Zend/zend_exceptions.c",
          "ext/date/tests/bug53437_var3.phpt||ext/date/tests/bug53437_var3.phpt",
          "ext/date/tests/bug53437_var5.phpt||ext/date/tests/bug53437_var5.phpt",
          "ext/openssl/openssl.c||ext/openssl/openssl.c",
          "ext/phar/phar_internal.h||ext/phar/phar_internal.h",
          "ext/phar/phar_object.c||ext/phar/phar_object.c",
          "ext/phar/tests/bug70019.phpt||ext/phar/tests/bug70019.phpt",
          "ext/soap/php_http.c||ext/soap/php_http.c",
          "ext/spl/spl_array.c||ext/spl/spl_array.c",
          "ext/spl/spl_observer.c||ext/spl/spl_observer.c",
          "ext/spl/tests/bug70068.phpt||ext/spl/tests/bug70068.phpt",
          "ext/spl/tests/bug70166.phpt||ext/spl/tests/bug70166.phpt",
          "ext/spl/tests/bug70168.phpt||ext/spl/tests/bug70168.phpt",
          "ext/spl/tests/bug70169.phpt||ext/spl/tests/bug70169.phpt",
          "ext/standard/tests/serialize/bug69152.phpt||ext/standard/tests/serialize/bug69152.phpt",
          "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt",
          "sapi/cli/tests/005.phpt||sapi/cli/tests/005.phpt"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c"
          ],
          "candidate": [
            "ext/openssl/openssl.c||ext/openssl/openssl.c"
          ]
        }
      },
      "candidate_diff": {
        "Zend/tests/bug70121.phpt||Zend/tests/bug70121.phpt": [
          "File: Zend/tests/bug70121.phpt -> Zend/tests/bug70121.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70121 (unserialize() could lead to unexpected methods execution / NULL pointer deref)",
          "3: --FILE--",
          "4: <?php",
          "5: unserialize('O:12:\"DateInterval\":1:{s:4:\"days\";O:9:\"Exception\":7:{s:10:\"'.\"\\0\".'*'.\"\\0\".'message\";s:1:\"x\";s:17:\"'.\"\\0\".'Exception'.\"\\0\".'string\";s:1:\"A\";s:7:\"'.\"\\0\".'*'.\"\\0\".'code\";i:0;s:7:\"'.\"\\0\".'*'.\"\\0\".'file\";s:1:\"a\";s:7:\"'.\"\\0\".'*'.\"\\0\".'line\";i:1337;s:16:\"'.\"\\0\".'Exception'.\"\\0\".'trace\";a:0:{}s:19:\"'.\"\\0\".'Exception'.\"\\0\".'previous\";O:8:\"stdClass\":0:{}}}');",
          "6: ?>",
          "7: OK",
          "8: --EXPECT--",
          "9: OK",
          "",
          "---------------"
        ],
        "Zend/zend_exceptions.c||Zend/zend_exceptions.c": [
          "File: Zend/zend_exceptions.c -> Zend/zend_exceptions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279: }",
          "284: ZEND_METHOD(error_exception, __construct)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284: #define CHECK_EXC_TYPE(name, type) \\",
          "285:  zend_read_property(i_get_exception_base(object), (object), name, sizeof(name) - 1, 1, &value); \\",
          "286:  if(value && Z_TYPE_P(value) != type) { \\",
          "287:   zval *tmp; \\",
          "288:   MAKE_STD_ZVAL(tmp); \\",
          "289:   ZVAL_STRINGL(tmp, name, sizeof(name)-1, 1); \\",
          "290:   Z_OBJ_HANDLER_P(object, unset_property)(object, tmp, 0 TSRMLS_CC); \\",
          "291:   zval_ptr_dtor(&tmp); \\",
          "292:  }",
          "294: ZEND_METHOD(exception, __wakeup)",
          "295: {",
          "296:  zval value;",
          "297:  zval *object = getThis();",
          "298:  CHECK_EXC_TYPE(\"message\", IS_STRING);",
          "299:  CHECK_EXC_TYPE(\"string\", IS_STRING);",
          "300:  CHECK_EXC_TYPE(\"code\", IS_LONG);",
          "301:  CHECK_EXC_TYPE(\"file\", IS_STRING);",
          "302:  CHECK_EXC_TYPE(\"line\", IS_LONG);",
          "303:  CHECK_EXC_TYPE(\"trace\", IS_ARRAY);",
          "304:  CHECK_EXC_TYPE(\"previous\", IS_OBJECT);",
          "305: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "782: static const zend_function_entry default_exception_functions[] = {",
          "783:  ZEND_ME(exception, __clone, NULL, ZEND_ACC_PRIVATE|ZEND_ACC_FINAL)",
          "784:  ZEND_ME(exception, __construct, arginfo_exception___construct, ZEND_ACC_PUBLIC)",
          "785:  ZEND_ME(exception, getMessage, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)",
          "786:  ZEND_ME(exception, getCode, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)",
          "787:  ZEND_ME(exception, getFile, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "811:  ZEND_ME(exception, __wakeup, NULL, ZEND_ACC_PUBLIC|ZEND_ACC_FINAL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "872: {",
          "873:  return zend_ce_exception;",
          "874: }",
          "",
          "[Removed Lines]",
          "871: ZEND_API zend_class_entry *zend_exception_get_default(void)",
          "",
          "[Added Lines]",
          "898: ZEND_API zend_class_entry *zend_exception_get_default(void)",
          "",
          "---------------"
        ],
        "ext/date/tests/bug53437_var3.phpt||ext/date/tests/bug53437_var3.phpt": [
          "File: ext/date/tests/bug53437_var3.phpt -> ext/date/tests/bug53437_var3.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: --EXPECTF--",
          "15: object(DateInterval)#%d (15) {",
          "16:   [\"y\"]=>",
          "18:   [\"m\"]=>",
          "20:   [\"d\"]=>",
          "22:   [\"h\"]=>",
          "24:   [\"i\"]=>",
          "26:   [\"s\"]=>",
          "28:   [\"weekday\"]=>",
          "29:   int(10)",
          "30:   [\"weekday_behavior\"]=>",
          "",
          "[Removed Lines]",
          "17:   int(2)",
          "19:   int(0)",
          "21:   int(0)",
          "23:   int(6)",
          "25:   int(8)",
          "27:   int(0)",
          "",
          "[Added Lines]",
          "17:   int(-1)",
          "19:   int(-1)",
          "21:   int(-1)",
          "23:   int(-1)",
          "25:   int(-1)",
          "27:   int(-1)",
          "",
          "---------------"
        ],
        "ext/date/tests/bug53437_var5.phpt||ext/date/tests/bug53437_var5.phpt": [
          "File: ext/date/tests/bug53437_var5.phpt -> ext/date/tests/bug53437_var5.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: --EXPECTF--",
          "15: object(DateInterval)#%d (15) {",
          "16:   [\"y\"]=>",
          "18:   [\"m\"]=>",
          "20:   [\"d\"]=>",
          "22:   [\"h\"]=>",
          "24:   [\"i\"]=>",
          "26:   [\"s\"]=>",
          "28:   [\"weekday\"]=>",
          "29:   int(10)",
          "30:   [\"weekday_behavior\"]=>",
          "",
          "[Removed Lines]",
          "17:   int(2)",
          "19:   int(0)",
          "21:   int(0)",
          "23:   int(6)",
          "25:   int(8)",
          "27:   int(0)",
          "",
          "[Added Lines]",
          "17:   int(-1)",
          "19:   int(-1)",
          "21:   int(-1)",
          "23:   int(-1)",
          "25:   int(-1)",
          "27:   int(-1)",
          "",
          "---------------"
        ],
        "ext/openssl/openssl.c||ext/openssl/openssl.c": [
          "File: ext/openssl/openssl.c -> ext/openssl/openssl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5428:  zend_long buffer_length;",
          "5429:  zend_string *buffer = NULL;",
          "5430:  zval *zstrong_result_returned = NULL;",
          "5433:  if (zend_parse_parameters(ZEND_NUM_ARGS(), \"l|z/\", &buffer_length, &zstrong_result_returned) == FAILURE) {",
          "5434:   return;",
          "",
          "[Removed Lines]",
          "5431:  int strong_result = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5446:  buffer = zend_string_alloc(buffer_length, 0);",
          "5448: #ifdef PHP_WIN32",
          "5451:  if (php_win32_get_random_bytes((unsigned char*)buffer->val, (size_t) buffer_length) == FAILURE){",
          "5452:   zend_string_release(buffer);",
          "",
          "[Removed Lines]",
          "5449:  strong_result = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5456:   RETURN_FALSE;",
          "5457:  }",
          "5458: #else",
          "5460:   zend_string_release(buffer);",
          "5461:   if (zstrong_result_returned) {",
          "5462:    ZVAL_FALSE(zstrong_result_returned);",
          "",
          "[Removed Lines]",
          "5459:  if ((strong_result = RAND_pseudo_bytes((unsigned char*)ZSTR_VAL(buffer), buffer_length)) < 0) {",
          "",
          "[Added Lines]",
          "5457:  if (RAND_bytes((unsigned char*)ZSTR_VAL(buffer), buffer_length) <= 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5469:  RETVAL_STR(buffer);",
          "5471:  if (zstrong_result_returned) {",
          "5473:  }",
          "5474: }",
          "",
          "[Removed Lines]",
          "5472:   ZVAL_BOOL(zstrong_result_returned, strong_result);",
          "",
          "[Added Lines]",
          "5470:   ZVAL_BOOL(zstrong_result_returned, 1);",
          "",
          "---------------"
        ],
        "ext/phar/phar_internal.h||ext/phar/phar_internal.h": [
          "File: ext/phar/phar_internal.h -> ext/phar/phar_internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "524: {",
          "525:  char tmp[MAXPATHLEN];",
          "526:  int tmp_len;",
          "529:  tmp_len = MIN(MAXPATHLEN, entry->filename_len + entry->phar->fname_len);",
          "535: }",
          "",
          "[Removed Lines]",
          "527:  size_t len;",
          "530:  len = MIN(entry->phar->fname_len, tmp_len);",
          "531:  memcpy(tmp, entry->phar->fname, len);",
          "532:  len = MIN(tmp_len - len, entry->filename_len);",
          "533:  memcpy(tmp + entry->phar->fname_len, entry->filename, len);",
          "534:  entry->inode = (unsigned short)zend_hash_func(tmp, tmp_len);",
          "",
          "[Added Lines]",
          "527:  size_t len1, len2;",
          "531:  len1 = MIN(entry->phar->fname_len, tmp_len);",
          "532:  memcpy(tmp, entry->phar->fname, len1);",
          "534:  len2 = MIN(tmp_len - len1, entry->filename_len);",
          "535:  memcpy(tmp + len1, entry->filename, len2);",
          "537:  entry->inode = (unsigned short) zend_hash_func(tmp, tmp_len);",
          "",
          "---------------"
        ],
        "ext/phar/phar_object.c||ext/phar/phar_object.c": [
          "File: ext/phar/phar_object.c -> ext/phar/phar_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4068:  char *fullpath;",
          "4069:  const char *slash;",
          "4070:  mode_t mode;",
          "4072:  if (entry->is_mounted) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4071:  cwd_state new_state;",
          "4072:  char *filename;",
          "4073:  size_t filename_len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4077:  if (entry->filename_len >= sizeof(\".phar\")-1 && !memcmp(entry->filename, \".phar\", sizeof(\".phar\")-1)) {",
          "4078:   return SUCCESS;",
          "4079:  }",
          "4083:  if (len >= MAXPATHLEN) {",
          "4084:   char *tmp;",
          "",
          "[Removed Lines]",
          "4081:  len = spprintf(&fullpath, 0, \"%s/%s\", dest, entry->filename);",
          "",
          "[Added Lines]",
          "4084:  new_state.cwd = (char*)malloc(2);",
          "4085:  new_state.cwd[0] = DEFAULT_SLASH;",
          "4086:  new_state.cwd[1] = '\\0';",
          "4087:  new_state.cwd_length = 1;",
          "4088:  if (virtual_file_ex(&new_state, entry->filename, NULL, CWD_EXPAND TSRMLS_CC) != 0 ||",
          "4089:    new_state.cwd_length <= 1) {",
          "4090:   if (EINVAL == errno && entry->filename_len > 50) {",
          "4091:    char *tmp = estrndup(entry->filename, 50);",
          "4092:    spprintf(error, 4096, \"Cannot extract \\\"%s...\\\" to \\\"%s...\\\", extracted filename is too long for filesystem\", tmp, dest);",
          "4093:    efree(tmp);",
          "4094:   } else {",
          "4095:    spprintf(error, 4096, \"Cannot extract \\\"%s\\\", internal error\", entry->filename);",
          "4096:   }",
          "4097:   free(new_state.cwd);",
          "4098:   return FAILURE;",
          "4099:  }",
          "4100:  filename = new_state.cwd + 1;",
          "4101:  filename_len = new_state.cwd_length - 1;",
          "4102: #ifdef PHP_WIN32",
          "4104:  {",
          "4105:   int cnt = filename_len;",
          "4107:   do {",
          "4108:    if ('\\\\' == filename[cnt]) {",
          "4109:     filename[cnt] = '/';",
          "4110:    }",
          "4111:   } while (cnt-- >= 0);",
          "4112:  }",
          "4113: #endif",
          "4115:  len = spprintf(&fullpath, 0, \"%s/%s\", dest, filename);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4092:    spprintf(error, 4096, \"Cannot extract \\\"%s\\\" to \\\"%s...\\\", extracted filename is too long for filesystem\", entry->filename, fullpath);",
          "4093:   }",
          "4094:   efree(fullpath);",
          "4095:   return FAILURE;",
          "4096:  }",
          "4098:  if (!len) {",
          "4099:   spprintf(error, 4096, \"Cannot extract \\\"%s\\\", internal error\", entry->filename);",
          "4100:   efree(fullpath);",
          "4101:   return FAILURE;",
          "4102:  }",
          "4104:  if (PHAR_OPENBASEDIR_CHECKPATH(fullpath)) {",
          "4105:   spprintf(error, 4096, \"Cannot extract \\\"%s\\\" to \\\"%s\\\", openbasedir/safe mode restrictions in effect\", entry->filename, fullpath);",
          "4106:   efree(fullpath);",
          "4107:   return FAILURE;",
          "4108:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4129:   free(new_state.cwd);",
          "4136:   free(new_state.cwd);",
          "4143:   free(new_state.cwd);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4111:  if (!overwrite && SUCCESS == php_stream_stat_path(fullpath, &ssb)) {",
          "4112:   spprintf(error, 4096, \"Cannot extract \\\"%s\\\" to \\\"%s\\\", path already exists\", entry->filename, fullpath);",
          "4113:   efree(fullpath);",
          "4114:   return FAILURE;",
          "4115:  }",
          "4120:  if (slash) {",
          "4122:  } else {",
          "4123:   fullpath[dest_len] = '\\0';",
          "4124:  }",
          "",
          "[Removed Lines]",
          "4118:  slash = zend_memrchr(entry->filename, '/', entry->filename_len);",
          "4121:   fullpath[dest_len + (slash - entry->filename) + 1] = '\\0';",
          "",
          "[Added Lines]",
          "4151:   free(new_state.cwd);",
          "4156:  slash = zend_memrchr(filename, '/', filename_len);",
          "4159:   fullpath[dest_len + (slash - filename) + 1] = '\\0';",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4128:    if (!php_stream_mkdir(fullpath, entry->flags & PHAR_ENT_PERM_MASK,  PHP_STREAM_MKDIR_RECURSIVE, NULL)) {",
          "4129:     spprintf(error, 4096, \"Cannot extract \\\"%s\\\", could not create directory \\\"%s\\\"\", entry->filename, fullpath);",
          "4130:     efree(fullpath);",
          "4131:     return FAILURE;",
          "4132:    }",
          "4133:   } else {",
          "4134:    if (!php_stream_mkdir(fullpath, 0777,  PHP_STREAM_MKDIR_RECURSIVE, NULL)) {",
          "4135:     spprintf(error, 4096, \"Cannot extract \\\"%s\\\", could not create directory \\\"%s\\\"\", entry->filename, fullpath);",
          "4136:     efree(fullpath);",
          "4137:     return FAILURE;",
          "4138:    }",
          "4139:   }",
          "4140:  }",
          "4142:  if (slash) {",
          "4144:  } else {",
          "4145:   fullpath[dest_len] = '/';",
          "4146:  }",
          "4149:  if (entry->is_dir) {",
          "4150:   efree(fullpath);",
          "",
          "[Removed Lines]",
          "4143:   fullpath[dest_len + (slash - entry->filename) + 1] = '/';",
          "",
          "[Added Lines]",
          "4169:     free(new_state.cwd);",
          "4176:     free(new_state.cwd);",
          "4183:   fullpath[dest_len + (slash - filename) + 1] = '/';",
          "4188:  filename = NULL;",
          "4189:  free(new_state.cwd);",
          "",
          "---------------"
        ],
        "ext/phar/tests/bug70019.phpt||ext/phar/tests/bug70019.phpt": [
          "File: ext/phar/tests/bug70019.phpt -> ext/phar/tests/bug70019.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70019 Files extracted from archive may be placed outside of destination directory",
          "3: --FILE--",
          "4: <?php",
          "5: $dir = __DIR__.\"/bug70019\";",
          "6: $phar = new PharData(__DIR__.\"/bug70019.zip\");",
          "7: if(!is_dir($dir)) {",
          "8:   mkdir($dir);",
          "9: }",
          "10: $phar->extractTo($dir);",
          "11: var_dump(file_exists(\"$dir/ThisIsATestFile.txt\"));",
          "12: ?>",
          "13: ===DONE===",
          "14: --CLEAN--",
          "15: <?php",
          "16: $dir = __DIR__.\"/bug70019\";",
          "17: unlink(\"$dir/ThisIsATestFile.txt\");",
          "18: rmdir($dir);",
          "19: ?>",
          "20: --EXPECTF--",
          "21: bool(true)",
          "22: ===DONE===",
          "",
          "---------------"
        ],
        "ext/soap/php_http.c||ext/soap/php_http.c": [
          "File: ext/soap/php_http.c -> ext/soap/php_http.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "815:     zend_hash_internal_pointer_reset(Z_ARRVAL_P(cookies));",
          "816:     smart_str_append_const(&soap_headers, \"Cookie: \");",
          "817:     for (i = 0; i < n; i++) {",
          "818:      data = zend_hash_get_current_data(Z_ARRVAL_P(cookies));",
          "822:        zval *value;",
          "824:       if ((value = zend_hash_index_find(Z_ARRVAL_P(data), 0)) != NULL &&",
          "",
          "[Removed Lines]",
          "819:      zend_hash_get_current_key(Z_ARRVAL_P(cookies), &key, NULL);",
          "821:      if (Z_TYPE_P(data) == IS_ARRAY) {",
          "",
          "[Added Lines]",
          "818:      ulong numindx;",
          "819:      int res = zend_hash_get_current_key(Z_ARRVAL_P(cookies), &key, &numindx);",
          "822:      if (res == HASH_KEY_IS_STRING && Z_TYPE_P(data) == IS_ARRAY) {",
          "",
          "---------------"
        ],
        "ext/spl/spl_array.c||ext/spl/spl_array.c": [
          "File: ext/spl/spl_array.c -> ext/spl/spl_array.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1741:   goto outexcept;",
          "1742:  }",
          "1745:  flags = Z_LVAL(zflags);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1744:  var_push_dtor(&var_hash, &pflags);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1763:   if (!php_var_unserialize(&intern->array, &p, s + buf_len, &var_hash)) {",
          "1764:    goto outexcept;",
          "1765:   }",
          "1766:  }",
          "1767:  if (*p != ';') {",
          "1768:   goto outexcept;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1767:   var_push_dtor(&var_hash, &intern->array);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1781:   goto outexcept;",
          "1782:  }",
          "1785:  object_properties_load(&intern->std, Z_ARRVAL(members));",
          "1786:  zval_ptr_dtor(&members);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1786:  var_push_dtor(&var_hash, &pmembers);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1790:  PHP_VAR_UNSERIALIZE_DESTROY(var_hash);",
          "1791:  return;",
          "1793: outexcept:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1794:  if (pflags) {",
          "1795:   zval_ptr_dtor(&pflags);",
          "1796:  }",
          "",
          "---------------"
        ],
        "ext/spl/spl_observer.c||ext/spl/spl_observer.c": [
          "File: ext/spl/spl_observer.c -> ext/spl/spl_observer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "809:   goto outexcept;",
          "810:  }",
          "813:  count = Z_LVAL(pcount);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "812:  var_push_dtor(&var_hash, &pcount);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "879:   goto outexcept;",
          "880:  }",
          "883:  if (!intern->std.properties) {",
          "884:   rebuild_object_properties(&intern->std);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "883:  var_push_dtor(&var_hash, &pmembers);",
          "",
          "---------------"
        ],
        "ext/spl/tests/bug70068.phpt||ext/spl/tests/bug70068.phpt": [
          "File: ext/spl/tests/bug70068.phpt -> ext/spl/tests/bug70068.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #70068 (Dangling pointer in the unserialization of ArrayObject items)",
          "3: --FILE--",
          "4: <?php",
          "5: $a = unserialize('a:3:{i:0;C:11:\"ArrayObject\":20:{x:i:0;r:3;;m:a:0:{};}i:1;d:11;i:2;S:31:\"AAAAAAAABBBBCCCC\\01\\00\\00\\00\\04\\00\\00\\00\\00\\00\\00\\00\\00\\00\\00\";}');",
          "6: ?>",
          "7: OK",
          "8: --EXPECT--",
          "9: OK",
          "",
          "---------------"
        ],
        "ext/spl/tests/bug70166.phpt||ext/spl/tests/bug70166.phpt": [
          "File: ext/spl/tests/bug70166.phpt -> ext/spl/tests/bug70166.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: SPL: Bug #70166 Use After Free Vulnerability in unserialize() with SPLArrayObject",
          "3: --FILE--",
          "4: <?php",
          "5: $inner = 'x:i:1;a:0:{};m:a:0:{}';",
          "6: $exploit = 'a:2:{i:0;C:11:\"ArrayObject\":'.strlen($inner).':{'.$inner.'}i:1;R:5;}';",
          "8: $data = unserialize($exploit);",
          "10: for($i = 0; $i < 5; $i++) {",
          "11:     $v[$i] = 'hi'.$i;",
          "12: }",
          "14: var_dump($data);",
          "15: ?>",
          "16: ===DONE===",
          "17: --EXPECTF--",
          "18: array(2) {",
          "19:   [0]=>",
          "20:   object(ArrayObject)#%d (1) {",
          "21:     [\"storage\":\"ArrayObject\":private]=>",
          "22:     array(0) {",
          "23:     }",
          "24:   }",
          "25:   [1]=>",
          "26:   array(0) {",
          "27:   }",
          "28: }",
          "29: ===DONE===",
          "",
          "---------------"
        ],
        "ext/spl/tests/bug70168.phpt||ext/spl/tests/bug70168.phpt": [
          "File: ext/spl/tests/bug70168.phpt -> ext/spl/tests/bug70168.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: SPL: Bug #70168 Use After Free Vulnerability in unserialize() with SplObjectStorage",
          "3: --FILE--",
          "4: <?php",
          "5: $inner = 'x:i:1;O:8:\"stdClass\":0:{};m:a:0:{}';",
          "6: $exploit = 'a:2:{i:0;C:16:\"SplObjectStorage\":'.strlen($inner).':{'.$inner.'}i:1;R:3;}';",
          "8: $data = unserialize($exploit);",
          "10: for($i = 0; $i < 5; $i++) {",
          "11:     $v[$i] = 'hi'.$i;",
          "12: }",
          "14: var_dump($data);",
          "15: ?>",
          "16: ===DONE===",
          "17: --EXPECTF--",
          "18: array(2) {",
          "19:   [0]=>",
          "20:   object(SplObjectStorage)#%d (1) {",
          "21:     [\"storage\":\"SplObjectStorage\":private]=>",
          "22:     array(1) {",
          "23:       [\"%s\"]=>",
          "24:       array(2) {",
          "25:         [\"obj\"]=>",
          "26:         object(stdClass)#2 (0) {",
          "27:         }",
          "28:         [\"inf\"]=>",
          "29:         NULL",
          "30:       }",
          "31:     }",
          "32:   }",
          "33:   [1]=>",
          "34:   int(1)",
          "35: }",
          "36: ===DONE===",
          "",
          "---------------"
        ],
        "ext/spl/tests/bug70169.phpt||ext/spl/tests/bug70169.phpt": [
          "File: ext/spl/tests/bug70169.phpt -> ext/spl/tests/bug70169.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: SPL: Bug #70169 Use After Free Vulnerability in unserialize() with SplDoublyLinkedList",
          "3: --FILE--",
          "4: <?php",
          "5: $inner = 'i:1;';",
          "6: $exploit = 'a:2:{i:0;C:19:\"SplDoublyLinkedList\":'.strlen($inner).':{'.$inner.'}i:1;R:3;}';",
          "8: $data = unserialize($exploit);",
          "10: for($i = 0; $i < 5; $i++) {",
          "11:     $v[$i] = 'hi'.$i;",
          "12: }",
          "14: var_dump($data);",
          "15: ?>",
          "16: ===DONE===",
          "17: --EXPECTF--",
          "18: array(2) {",
          "19:   [0]=>",
          "20:   object(SplDoublyLinkedList)#%d (2) {",
          "21:     [\"flags\":\"SplDoublyLinkedList\":private]=>",
          "22:     int(1)",
          "23:     [\"dllist\":\"SplDoublyLinkedList\":private]=>",
          "24:     array(0) {",
          "25:     }",
          "26:   }",
          "27:   [1]=>",
          "28:   int(1)",
          "29: }",
          "30: ===DONE===",
          "",
          "---------------"
        ],
        "ext/standard/tests/serialize/bug69152.phpt||ext/standard/tests/serialize/bug69152.phpt": [
          "File: ext/standard/tests/serialize/bug69152.phpt -> ext/standard/tests/serialize/bug69152.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: ?>",
          "11: --EXPECTF--",
          "12: Exception in %s:%d",
          "13: Stack trace:",
          "14: #0 {main}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: Notice: Undefined property: Exception::$previous in %s on line %d",
          "",
          "---------------"
        ],
        "ext/standard/tests/serialize/bug69793.phpt||ext/standard/tests/serialize/bug69793.phpt": [
          "File: ext/standard/tests/serialize/bug69793.phpt -> ext/standard/tests/serialize/bug69793.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: --TEST--",
          "2: Bug #69793: Remotely triggerable stack exhaustion via recursive method calls",
          "3: --FILE--",
          "4: <?php",
          "5: $e = unserialize('O:9:\"Exception\":7:{s:17:\"'.\"\\0\".'Exception'.\"\\0\".'string\";s:1:\"a\";s:7:\"'.\"\\0\".'*'.\"\\0\".'code\";i:0;s:7:\"'.\"\\0\".'*'.\"\\0\".'file\";R:1;s:7:\"'.\"\\0\".'*'.\"\\0\".'line\";i:1337;s:16:\"'.\"\\0\".'Exception'.\"\\0\".'trace\";a:0:{}s:19:\"'.\"\\0\".'Exception'.\"\\0\".'previous\";i:10;s:10:\"'.\"\\0\".'*'.\"\\0\".'message\";N;}');",
          "7: var_dump($e.\"\");",
          "8: ?>",
          "9: --EXPECTF--",
          "10: Notice: Undefined property: Exception::$message in %s/bug69793.php on line %d",
          "12: Notice: Undefined property: Exception::$file in %s/bug69793.php on line %d",
          "14: Notice: Undefined property: Exception::$previous in %s/bug69793.php on line %d",
          "15: string(53) \"exception 'Exception' in :1337",
          "16: Stack trace:",
          "17: #0 {main}\"",
          "",
          "---------------"
        ],
        "sapi/cli/tests/005.phpt||sapi/cli/tests/005.phpt": [
          "File: sapi/cli/tests/005.phpt -> sapi/cli/tests/005.phpt",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: <?php",
          "5: include \"skipif.inc\";",
          "6: if (!extension_loaded(\"reflection\")) {",
          "8: }",
          "9: ?>",
          "10: --FILE--",
          "",
          "[Removed Lines]",
          "7:  die(\"skip reflection extension required\");",
          "",
          "[Added Lines]",
          "7:     die(\"skip reflection extension required\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: echo \"Done\\n\";",
          "20: ?>",
          "22: string(40) \"Exception: Class unknown does not exist",
          "23: \"",
          "24: string(183) \"Class [ <internal:Core> class stdClass ] {",
          "",
          "[Removed Lines]",
          "21: --EXPECTF--",
          "",
          "[Added Lines]",
          "21: --EXPECTF--",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "61:     Property [ <default> private $previous ]",
          "62:   }",
          "65:     Method [ <internal:Core> final private method __clone ] {",
          "66:     }",
          "",
          "[Removed Lines]",
          "64:   - Methods [10] {",
          "",
          "[Added Lines]",
          "64:   - Methods [11] {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "74:       }",
          "75:     }",
          "77:     Method [ <internal:Core, prototype Throwable> final public method getMessage ] {",
          "78:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     Method [ <internal:Core, prototype Throwable> final public method __wakeup ] {",
          "78:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}