{
  "cve_id": "CVE-2017-3733",
  "cve_desc": "During a renegotiation handshake if the Encrypt-Then-Mac extension is negotiated where it was not in the original handshake (or vice-versa) then this can cause OpenSSL 1.1.0 before 1.1.0e to crash (dependent on ciphersuite). Both clients and servers are affected.",
  "repo": "openssl/openssl",
  "patch_hash": "28a31a0a10f41ef855cabab4e18c994c44225125",
  "patch_info": {
    "commit_hash": "28a31a0a10f41ef855cabab4e18c994c44225125",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/28a31a0a10f41ef855cabab4e18c994c44225125",
    "files": [
      "include/openssl/ssl3.h",
      "ssl/d1_lib.c",
      "ssl/record/rec_layer_d1.c",
      "ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h",
      "ssl/statem/extensions.c",
      "ssl/statem/extensions_clnt.c",
      "ssl/statem/extensions_srvr.c",
      "ssl/t1_enc.c",
      "test/dtls_mtu_test.c"
    ],
    "message": "Don't change the state of the ETM flags until CCS processing\n\nIn 1.1.0 changing the ciphersuite during a renegotiation can result in\na crash leading to a DoS attack. In master this does not occur with TLS\n(instead you get an internal error, which is still wrong but not a security\nissue) - but the problem still exists in the DTLS code.\n\nThe problem is caused by changing the flag indicating whether to use ETM\nor not immediately on negotiation of ETM, rather than at CCS. Therefore,\nduring a renegotiation, if the ETM state is changing (usually due to a\nchange of ciphersuite), then an error/crash will occur.\n\nDue to the fact that there are separate CCS messages for read and write\nwe actually now need two flags to determine whether to use ETM or not.\n\nCVE-2017-3733\n\nReviewed-by: Richard Levitte <levitte@openssl.org>",
    "before_after_code_files": [
      "include/openssl/ssl3.h||include/openssl/ssl3.h",
      "ssl/d1_lib.c||ssl/d1_lib.c",
      "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
      "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c",
      "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
      "ssl/ssl_locl.h||ssl/ssl_locl.h",
      "ssl/statem/extensions.c||ssl/statem/extensions.c",
      "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c",
      "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c",
      "ssl/t1_enc.c||ssl/t1_enc.c",
      "test/dtls_mtu_test.c||test/dtls_mtu_test.c"
    ]
  },
  "patch_diff": {
    "include/openssl/ssl3.h||include/openssl/ssl3.h": [
      "File: include/openssl/ssl3.h -> include/openssl/ssl3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "265: # define TLS1_FLAGS_SKIP_CERT_VERIFY             0x0010",
      "271: # define TLS1_FLAGS_RECEIVED_EXTMS               0x0200",
      "273: # define SSL3_MT_HELLO_REQUEST                   0",
      "274: # define SSL3_MT_CLIENT_HELLO                    1",
      "275: # define SSL3_MT_SERVER_HELLO                    2",
      "",
      "[Removed Lines]",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             0x0100",
      "",
      "[Added Lines]",
      "268: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_READ        0x0100",
      "269: # define TLS1_FLAGS_ENCRYPT_THEN_MAC             TLS1_FLAGS_ENCRYPT_THEN_MAC_READ",
      "274: # define TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE       0x0400",
      "",
      "---------------"
    ],
    "ssl/d1_lib.c||ssl/d1_lib.c": [
      "File: ssl/d1_lib.c -> ssl/d1_lib.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "937:                                  &blocksize, &ext_overhead))",
      "938:         return 0;",
      "941:         ext_overhead += mac_overhead;",
      "942:     else",
      "943:         int_overhead += mac_overhead;",
      "",
      "[Removed Lines]",
      "940:     if (SSL_USE_ETM(s))",
      "",
      "[Added Lines]",
      "940:     if (SSL_READ_ETM(s))",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c": [
      "File: ssl/record/rec_layer_d1.c -> ssl/record/rec_layer_d1.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1033:         if (!s->method->ssl3_enc->mac(s, &wr,",
      "1034:                                       &(p[SSL3_RECORD_get_length(&wr) + eivlen]),",
      "1035:                                       1))",
      "",
      "[Removed Lines]",
      "1032:     if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "1032:     if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1047:     if (s->method->ssl3_enc->enc(s, &wr, 1, 1) < 1)",
      "1048:         goto err;",
      "1051:         if (!s->method->ssl3_enc->mac(s, &wr,",
      "1052:                                       &(p[SSL3_RECORD_get_length(&wr)]), 1))",
      "1053:             goto err;",
      "",
      "[Removed Lines]",
      "1050:     if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "1050:     if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/rec_layer_s3.c||ssl/record/rec_layer_s3.c": [
      "File: ssl/record/rec_layer_s3.c -> ssl/record/rec_layer_s3.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "401:     if (type == SSL3_RT_APPLICATION_DATA &&",
      "402:         len >= 4 * (max_send_fragment = s->max_send_fragment) &&",
      "403:         s->compress == NULL && s->msg_callback == NULL &&",
      "405:         EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(s->enc_write_ctx)) &",
      "406:         EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK) {",
      "407:         unsigned char aad[13];",
      "",
      "[Removed Lines]",
      "404:         !SSL_USE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "[Added Lines]",
      "404:         !SSL_WRITE_ETM(s) && SSL_USE_EXPLICIT_IV(s) &&",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "874:             unsigned char *mac;",
      "876:             if (!WPACKET_allocate_bytes(thispkt, mac_size, &mac)",
      "",
      "[Removed Lines]",
      "873:         if (!SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "873:         if (!SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "923:             SSLerr(SSL_F_DO_SSL3_WRITE, ERR_R_INTERNAL_ERROR);",
      "924:             goto err;",
      "925:         }",
      "927:             unsigned char *mac;",
      "929:             if (!WPACKET_allocate_bytes(thispkt, mac_size, &mac)",
      "",
      "[Removed Lines]",
      "926:         if (SSL_USE_ETM(s) && mac_size != 0) {",
      "",
      "[Added Lines]",
      "926:         if (SSL_WRITE_ETM(s) && mac_size != 0) {",
      "",
      "---------------"
    ],
    "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
      "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "387:         unsigned char *mac;",
      "389:         imac_size = EVP_MD_CTX_size(s->read_hash);",
      "",
      "[Removed Lines]",
      "386:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "386:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "441:     if ((sess != NULL) &&",
      "442:         (s->enc_read_ctx != NULL) &&",
      "445:         unsigned char *mac = NULL;",
      "446:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
      "",
      "[Removed Lines]",
      "443:         (EVP_MD_CTX_md(s->read_hash) != NULL) && !SSL_USE_ETM(s)) {",
      "",
      "[Added Lines]",
      "443:         (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "915:         }",
      "917:         ret = 1;",
      "919:             imac_size = EVP_MD_CTX_size(s->read_hash);",
      "920:             if (imac_size < 0)",
      "921:                 return -1;",
      "",
      "[Removed Lines]",
      "918:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL) {",
      "",
      "[Added Lines]",
      "918:         if (!SSL_READ_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1092:     header[11] = (unsigned char)(rec->length >> 8);",
      "1093:     header[12] = (unsigned char)(rec->length & 0xff);",
      "1096:         EVP_CIPHER_CTX_mode(ssl->enc_read_ctx) == EVP_CIPH_CBC_MODE &&",
      "1097:         ssl3_cbc_record_digest_supported(mac_ctx)) {",
      "",
      "[Removed Lines]",
      "1095:     if (!send && !SSL_USE_ETM(ssl) &&",
      "",
      "[Added Lines]",
      "1095:     if (!send && !SSL_READ_ETM(ssl) &&",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1118:             EVP_MD_CTX_free(hmac);",
      "1119:             return 0;",
      "1120:         }",
      "1122:             if (!tls_fips_digest_extra(ssl->enc_read_ctx,",
      "1123:                                        mac_ctx, rec->input,",
      "1124:                                        rec->length, rec->orig_len)) {",
      "",
      "[Removed Lines]",
      "1121:         if (!send && !SSL_USE_ETM(ssl) && FIPS_mode())",
      "",
      "[Added Lines]",
      "1121:         if (!send && !SSL_READ_ETM(ssl) && FIPS_mode())",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1408:     rr->data = rr->input;",
      "1409:     rr->orig_len = rr->length;",
      "1412:         unsigned char *mac;",
      "1413:         mac_size = EVP_MD_CTX_size(s->read_hash);",
      "1414:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
      "",
      "[Removed Lines]",
      "1411:     if (SSL_USE_ETM(s) && s->read_hash) {",
      "",
      "[Added Lines]",
      "1411:     if (SSL_READ_ETM(s) && s->read_hash) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1452: #endif",
      "1456:         (s->enc_read_ctx != NULL) && (EVP_MD_CTX_md(s->read_hash) != NULL)) {",
      "1458:         unsigned char *mac = NULL;",
      "",
      "[Removed Lines]",
      "1455:     if ((sess != NULL) && !SSL_USE_ETM(s) &&",
      "",
      "[Added Lines]",
      "1455:     if ((sess != NULL) && !SSL_READ_ETM(s) &&",
      "",
      "---------------"
    ],
    "ssl/ssl_locl.h||ssl/ssl_locl.h": [
      "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "395: # define SSL_CLIENT_USE_SIGALGS(s)        \\",
      "396:     SSL_CLIENT_USE_TLS1_2_CIPHERS(s)",
      "401: # define SSL_PKEY_RSA            0",
      "",
      "[Removed Lines]",
      "398: # define SSL_USE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC)",
      "",
      "[Added Lines]",
      "398: # define SSL_READ_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_READ)",
      "399: # define SSL_WRITE_ETM(s) (s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1134:         int psk_kex_mode;",
      "1135:     } ext;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1138:         int use_etm;",
      "",
      "---------------"
    ],
    "ssl/statem/extensions.c||ssl/statem/extensions.c": [
      "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "207: #endif",
      "208:     {",
      "209:         TLSEXT_TYPE_encrypt_then_mac,",
      "211:         init_etm, tls_parse_ctos_etm, tls_parse_stoc_etm,",
      "212:         tls_construct_stoc_etm, tls_construct_ctos_etm, NULL",
      "213:     },",
      "",
      "[Removed Lines]",
      "210:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY,",
      "",
      "[Added Lines]",
      "210:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY | EXT_SSL3_ALLOWED,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "913: static int init_etm(SSL *s, unsigned int context)",
      "914: {",
      "917:     return 1;",
      "918: }",
      "",
      "[Removed Lines]",
      "915:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "915:     s->ext.use_etm = 0;",
      "",
      "---------------"
    ],
    "ssl/statem/extensions_clnt.c||ssl/statem/extensions_clnt.c": [
      "File: ssl/statem/extensions_clnt.c -> ssl/statem/extensions_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1172:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC)",
      "1173:             && s->s3->tmp.new_cipher->algorithm_mac != SSL_AEAD",
      "1174:             && s->s3->tmp.new_cipher->algorithm_enc != SSL_RC4)",
      "1177:     return 1;",
      "1178: }",
      "",
      "[Removed Lines]",
      "1175:         s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "1175:         s->ext.use_etm = 1;",
      "",
      "---------------"
    ],
    "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c": [
      "File: ssl/statem/extensions_srvr.c -> ssl/statem/extensions_srvr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "451:                        size_t chainidx, int *al)",
      "452: {",
      "453:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC))",
      "456:     return 1;",
      "457: }",
      "",
      "[Removed Lines]",
      "454:         s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "454:         s->ext.use_etm = 1;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "953: int tls_construct_stoc_etm(SSL *s, WPACKET *pkt, unsigned int context, X509 *x,",
      "954:                            size_t chainidx, int *al)",
      "955: {",
      "957:         return 1;",
      "",
      "[Removed Lines]",
      "956:     if ((s->s3->flags & TLS1_FLAGS_ENCRYPT_THEN_MAC) == 0)",
      "",
      "[Added Lines]",
      "956:     if (!s->ext.use_etm)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "964:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_RC4",
      "965:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT",
      "966:         || s->s3->tmp.new_cipher->algorithm_enc == SSL_eGOST2814789CNT12) {",
      "968:         return 1;",
      "969:     }",
      "",
      "[Removed Lines]",
      "967:         s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
      "",
      "[Added Lines]",
      "967:         s->ext.use_etm = 0;",
      "",
      "---------------"
    ],
    "ssl/t1_enc.c||ssl/t1_enc.c": [
      "File: ssl/t1_enc.c -> ssl/t1_enc.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "129: #endif",
      "131:     if (which & SSL3_CC_READ) {",
      "132:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "133:             s->mac_flags |= SSL_MAC_FLAG_READ_MAC_STREAM;",
      "134:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "132:         if (s->ext.use_etm)",
      "133:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "134:         else",
      "135:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_READ;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "167:         mac_secret = &(s->s3->read_mac_secret[0]);",
      "168:         mac_secret_size = &(s->s3->read_mac_secret_size);",
      "169:     } else {",
      "170:         if (s->s3->tmp.new_cipher->algorithm2 & TLS1_STREAM_MAC)",
      "171:             s->mac_flags |= SSL_MAC_FLAG_WRITE_MAC_STREAM;",
      "172:         else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "175:         if (s->ext.use_etm)",
      "176:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "177:         else",
      "178:             s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC_WRITE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "369:     if (s->s3->tmp.key_block_length != 0)",
      "370:         return (1);",
      "375:         SSLerr(SSL_F_TLS1_SETUP_KEY_BLOCK, SSL_R_CIPHER_OR_HASH_UNAVAILABLE);",
      "376:         return (0);",
      "377:     }",
      "",
      "[Removed Lines]",
      "372:     if (!ssl_cipher_get_evp",
      "373:         (s->session, &c, &hash, &mac_type, &mac_secret_size, &comp,",
      "374:          SSL_USE_ETM(s))) {",
      "",
      "[Added Lines]",
      "382:     if (!ssl_cipher_get_evp(s->session, &c, &hash, &mac_type, &mac_secret_size,",
      "383:                             &comp, s->ext.use_etm)) {",
      "",
      "---------------"
    ],
    "test/dtls_mtu_test.c||test/dtls_mtu_test.c": [
      "File: test/dtls_mtu_test.c -> test/dtls_mtu_test.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "133:         }",
      "134:     }",
      "135:     rv = 1;",
      "137:         rv = 2;",
      "138:  out:",
      "139:     SSL_free(clnt_ssl);",
      "",
      "[Removed Lines]",
      "136:     if (SSL_USE_ETM(clnt_ssl))",
      "",
      "[Added Lines]",
      "136:     if (SSL_READ_ETM(clnt_ssl))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "25670f3e87d3a9e7ea8ffb2b717a288e2b3024f5",
      "candidate_info": {
        "commit_hash": "25670f3e87d3a9e7ea8ffb2b717a288e2b3024f5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/25670f3e87d3a9e7ea8ffb2b717a288e2b3024f5",
        "files": [
          "ssl/build.info",
          "ssl/statem/extensions.c",
          "ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_locl.h"
        ],
        "message": "Split extensions code into core extensions and server extensions code\n\nLater we will have client extensions code too.\n\nPerl changes reviewed by Richard Levitte. Non-perl changes reviewed by Rich\nSalz\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "ssl/build.info||ssl/build.info",
          "ssl/statem/extensions.c||ssl/statem/extensions.c",
          "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c"
          ],
          "candidate": [
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/build.info||ssl/build.info": [
          "File: ssl/build.info -> ssl/build.info",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: SOURCE[../libssl]=\\",
          "3:         pqueue.c packet.c \\",
          "4:         statem/statem_srvr.c statem/statem_clnt.c  s3_lib.c  s3_enc.c record/rec_layer_s3.c \\",
          "6:         methods.c   t1_lib.c  t1_enc.c tls13_enc.c t1_ext.c \\",
          "7:         d1_lib.c  record/rec_layer_d1.c d1_msg.c \\",
          "8:         statem/statem_dtls.c d1_srtp.c \\",
          "",
          "[Removed Lines]",
          "5:         statem/statem_lib.c statem/extensions.c s3_cbc.c s3_msg.c \\",
          "",
          "[Added Lines]",
          "5:         statem/statem_lib.c statem/extensions.c statem/extensions_srvr.c \\",
          "6:         s3_cbc.c s3_msg.c \\",
          "",
          "---------------"
        ],
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <stdlib.h>",
          "12: #include \"../ssl_locl.h\"",
          "13: #include \"statem_locl.h\"",
          "38: typedef struct {",
          "40:     unsigned int type;",
          "",
          "[Removed Lines]",
          "11: #include <openssl/ocsp.h>",
          "15: static int tls_parse_clienthello_renegotiate(SSL *s, PACKET *pkt, int *al);",
          "16: static int tls_parse_clienthello_server_name(SSL *s, PACKET *pkt, int *al);",
          "17: #ifndef OPENSSL_NO_SRP",
          "18: static int tls_parse_clienthello_srp(SSL *s, PACKET *pkt, int *al);",
          "19: #endif",
          "20: #ifndef OPENSSL_NO_EC",
          "21: static int tls_parse_clienthello_ec_pt_formats(SSL *s, PACKET *pkt, int *al);",
          "22: static int tls_parse_clienthello_supported_groups(SSL *s, PACKET *pkt, int *al);",
          "23: #endif",
          "24: static int tls_parse_clienthello_session_ticket(SSL *s, PACKET *pkt, int *al);",
          "25: static int tls_parse_clienthello_sig_algs(SSL *s, PACKET *pkt, int *al);",
          "26: static int tls_parse_clienthello_status_request(SSL *s, PACKET *pkt, int *al);",
          "27: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "28: static int tls_parse_clienthello_npn(SSL *s, PACKET *pkt, int *al);",
          "29: #endif",
          "30: static int tls_parse_clienthello_alpn(SSL *s, PACKET *pkt, int *al);",
          "31: #ifndef OPENSSL_NO_SRTP",
          "32: static int tls_parse_clienthello_use_srtp(SSL *s, PACKET *pkt, int *al);",
          "33: #endif",
          "34: static int tls_parse_clienthello_etm(SSL *s, PACKET *pkt, int *al);",
          "35: static int tls_parse_clienthello_key_share(SSL *s, PACKET *pkt, int *al);",
          "36: static int tls_parse_clienthello_ems(SSL *s, PACKET *pkt, int *al);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "536:     return 1;",
          "537: }",
          "",
          "[Removed Lines]",
          "542: static int tls_parse_clienthello_renegotiate(SSL *s, PACKET *pkt, int *al)",
          "543: {",
          "544:     unsigned int ilen;",
          "545:     const unsigned char *data;",
          "548:     if (!PACKET_get_1(pkt, &ilen)",
          "549:         || !PACKET_get_bytes(pkt, &data, ilen)) {",
          "550:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_RENEGOTIATE,",
          "551:                SSL_R_RENEGOTIATION_ENCODING_ERR);",
          "553:         return 0;",
          "554:     }",
          "557:     if (ilen != s->s3->previous_client_finished_len) {",
          "558:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_RENEGOTIATE,",
          "559:                SSL_R_RENEGOTIATION_MISMATCH);",
          "561:         return 0;",
          "562:     }",
          "564:     if (memcmp(data, s->s3->previous_client_finished,",
          "565:                s->s3->previous_client_finished_len)) {",
          "566:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_RENEGOTIATE,",
          "567:                SSL_R_RENEGOTIATION_MISMATCH);",
          "569:         return 0;",
          "570:     }",
          "572:     s->s3->send_connection_binding = 1;",
          "574:     return 1;",
          "575: }",
          "577: static int tls_parse_clienthello_server_name(SSL *s, PACKET *pkt, int *al)",
          "578: {",
          "579:     unsigned int servname_type;",
          "580:     PACKET sni, hostname;",
          "606:     if (!PACKET_as_length_prefixed_2(pkt, &sni)",
          "608:         || PACKET_remaining(&sni) == 0) {",
          "610:         return 0;",
          "611:     }",
          "625:     if (!PACKET_get_1(&sni, &servname_type)",
          "626:         || servname_type != TLSEXT_NAMETYPE_host_name",
          "627:         || !PACKET_as_length_prefixed_2(&sni, &hostname)) {",
          "629:         return 0;",
          "630:     }",
          "632:     if (!s->hit) {",
          "633:         if (PACKET_remaining(&hostname) > TLSEXT_MAXLEN_host_name) {",
          "635:             return 0;",
          "636:         }",
          "638:         if (PACKET_contains_zero_byte(&hostname)) {",
          "640:             return 0;",
          "641:         }",
          "643:         if (!PACKET_strndup(&hostname, &s->session->tlsext_hostname)) {",
          "645:             return 0;",
          "646:         }",
          "648:         s->servername_done = 1;",
          "649:     } else {",
          "654:         s->servername_done = s->session->tlsext_hostname",
          "655:             && PACKET_equal(&hostname, s->session->tlsext_hostname,",
          "656:                             strlen(s->session->tlsext_hostname));",
          "657:     }",
          "659:     return 1;",
          "660: }",
          "662: #ifndef OPENSSL_NO_SRP",
          "663: static int tls_parse_clienthello_srp(SSL *s, PACKET *pkt, int *al)",
          "664: {",
          "665:     PACKET srp_I;",
          "667:     if (!PACKET_as_length_prefixed_1(pkt, &srp_I)",
          "668:             || PACKET_contains_zero_byte(&srp_I)) {",
          "670:         return 0;",
          "671:     }",
          "677:     if (!PACKET_strndup(&srp_I, &s->srp_ctx.login)) {",
          "679:         return 0;",
          "680:     }",
          "682:     return 1;",
          "683: }",
          "684: #endif",
          "686: #ifndef OPENSSL_NO_EC",
          "687: static int tls_parse_clienthello_ec_pt_formats(SSL *s, PACKET *pkt, int *al)",
          "688: {",
          "689:     PACKET ec_point_format_list;",
          "691:     if (!PACKET_as_length_prefixed_1(pkt, &ec_point_format_list)",
          "692:         || PACKET_remaining(&ec_point_format_list) == 0) {",
          "694:         return 0;",
          "695:     }",
          "697:     if (!s->hit) {",
          "698:         if (!PACKET_memdup(&ec_point_format_list,",
          "699:                            &s->session->tlsext_ecpointformatlist,",
          "700:                            &s->session->tlsext_ecpointformatlist_length)) {",
          "702:             return 0;",
          "703:         }",
          "704:     }",
          "706:     return 1;",
          "707: }",
          "710: static int tls_parse_clienthello_session_ticket(SSL *s, PACKET *pkt, int *al)",
          "711: {",
          "712:     if (s->tls_session_ticket_ext_cb &&",
          "713:             !s->tls_session_ticket_ext_cb(s, PACKET_data(pkt),",
          "714:                                           PACKET_remaining(pkt),",
          "715:                                           s->tls_session_ticket_ext_cb_arg)) {",
          "717:         return 0;",
          "718:     }",
          "720:     return 1;",
          "721: }",
          "723: static int tls_parse_clienthello_sig_algs(SSL *s, PACKET *pkt, int *al)",
          "724: {",
          "725:     PACKET supported_sig_algs;",
          "727:     if (!PACKET_as_length_prefixed_2(pkt, &supported_sig_algs)",
          "728:             || (PACKET_remaining(&supported_sig_algs) % 2) != 0",
          "729:             || PACKET_remaining(&supported_sig_algs) == 0) {",
          "731:         return 0;",
          "732:     }",
          "734:     if (!s->hit && !tls1_save_sigalgs(s, PACKET_data(&supported_sig_algs),",
          "735:                                       PACKET_remaining(&supported_sig_algs))) {",
          "737:         return 0;",
          "738:     }",
          "740:     return 1;",
          "741: }",
          "743: static int tls_parse_clienthello_status_request(SSL *s, PACKET *pkt, int *al)",
          "744: {",
          "745:     if (!PACKET_get_1(pkt, (unsigned int *)&s->tlsext_status_type)) {",
          "747:         return 0;",
          "748:     }",
          "749: #ifndef OPENSSL_NO_OCSP",
          "750:     if (s->tlsext_status_type == TLSEXT_STATUSTYPE_ocsp) {",
          "751:         const unsigned char *ext_data;",
          "752:         PACKET responder_id_list, exts;",
          "753:         if (!PACKET_get_length_prefixed_2 (pkt, &responder_id_list)) {",
          "755:             return 0;",
          "756:         }",
          "762:         sk_OCSP_RESPID_pop_free(s->tlsext_ocsp_ids, OCSP_RESPID_free);",
          "763:         if (PACKET_remaining(&responder_id_list) > 0) {",
          "764:             s->tlsext_ocsp_ids = sk_OCSP_RESPID_new_null();",
          "765:             if (s->tlsext_ocsp_ids == NULL) {",
          "767:                 return 0;",
          "768:             }",
          "769:         } else {",
          "770:             s->tlsext_ocsp_ids = NULL;",
          "771:         }",
          "773:         while (PACKET_remaining(&responder_id_list) > 0) {",
          "774:             OCSP_RESPID *id;",
          "775:             PACKET responder_id;",
          "776:             const unsigned char *id_data;",
          "778:             if (!PACKET_get_length_prefixed_2(&responder_id_list,",
          "779:                                               &responder_id)",
          "780:                     || PACKET_remaining(&responder_id) == 0) {",
          "782:                 return 0;",
          "783:             }",
          "785:             id_data = PACKET_data(&responder_id);",
          "787:             id = d2i_OCSP_RESPID(NULL, &id_data,",
          "788:                                  (int)PACKET_remaining(&responder_id));",
          "789:             if (id == NULL) {",
          "791:                 return 0;",
          "792:             }",
          "794:             if (id_data != PACKET_end(&responder_id)) {",
          "795:                 OCSP_RESPID_free(id);",
          "797:                 return 0;",
          "798:             }",
          "800:             if (!sk_OCSP_RESPID_push(s->tlsext_ocsp_ids, id)) {",
          "801:                 OCSP_RESPID_free(id);",
          "803:                 return 0;",
          "804:             }",
          "805:         }",
          "808:         if (!PACKET_as_length_prefixed_2(pkt, &exts)) {",
          "810:             return 0;",
          "811:         }",
          "813:         if (PACKET_remaining(&exts) > 0) {",
          "814:             ext_data = PACKET_data(&exts);",
          "815:             sk_X509_EXTENSION_pop_free(s->tlsext_ocsp_exts,",
          "816:                                        X509_EXTENSION_free);",
          "817:             s->tlsext_ocsp_exts =",
          "818:                 d2i_X509_EXTENSIONS(NULL, &ext_data,",
          "819:                                     (int)PACKET_remaining(&exts));",
          "820:             if (s->tlsext_ocsp_exts == NULL || ext_data != PACKET_end(&exts)) {",
          "822:                 return 0;",
          "823:             }",
          "824:         }",
          "825:     } else",
          "826: #endif",
          "827:     {",
          "831:         s->tlsext_status_type = -1;",
          "832:     }",
          "834:     return 1;",
          "835: }",
          "837: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "838: static int tls_parse_clienthello_npn(SSL *s, PACKET *pkt, int *al)",
          "839: {",
          "840:     if (s->s3->tmp.finish_md_len == 0) {",
          "858:         s->s3->next_proto_neg_seen = 1;",
          "859:     }",
          "861:     return 1;",
          "862: }",
          "863: #endif",
          "871: static int tls_parse_clienthello_alpn(SSL *s, PACKET *pkt, int *al)",
          "872: {",
          "873:     PACKET protocol_list, save_protocol_list, protocol;",
          "875:     if (s->s3->tmp.finish_md_len != 0)",
          "876:         return 1;",
          "878:     if (!PACKET_as_length_prefixed_2(pkt, &protocol_list)",
          "879:         || PACKET_remaining(&protocol_list) < 2) {",
          "881:         return 0;",
          "882:     }",
          "884:     save_protocol_list = protocol_list;",
          "885:     do {",
          "887:         if (!PACKET_get_length_prefixed_1(&protocol_list, &protocol)",
          "888:                 || PACKET_remaining(&protocol) == 0) {",
          "890:             return 0;",
          "891:         }",
          "892:     } while (PACKET_remaining(&protocol_list) != 0);",
          "894:     if (!PACKET_memdup(&save_protocol_list,",
          "895:                        &s->s3->alpn_proposed, &s->s3->alpn_proposed_len)) {",
          "897:         return 0;",
          "898:     }",
          "900:     return 1;",
          "901: }",
          "903: #ifndef OPENSSL_NO_SRTP",
          "904: static int tls_parse_clienthello_use_srtp(SSL *s, PACKET *pkt, int *al)",
          "905: {",
          "906:     SRTP_PROTECTION_PROFILE *sprof;",
          "907:     STACK_OF(SRTP_PROTECTION_PROFILE) *srvr;",
          "908:     unsigned int ct, mki_len, id;",
          "909:     int i, srtp_pref;",
          "910:     PACKET subpkt;",
          "913:     if (SSL_get_srtp_profiles(s) == NULL)",
          "914:         return 1;",
          "917:     if (!PACKET_get_net_2(pkt, &ct)",
          "918:         || (ct & 1) != 0 || !PACKET_get_sub_packet(pkt, &subpkt, ct)) {",
          "919:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP,",
          "920:                SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "922:         return 0;",
          "923:     }",
          "925:     srvr = SSL_get_srtp_profiles(s);",
          "926:     s->srtp_profile = NULL;",
          "928:     srtp_pref = sk_SRTP_PROTECTION_PROFILE_num(srvr);",
          "930:     while (PACKET_remaining(&subpkt)) {",
          "931:         if (!PACKET_get_net_2(&subpkt, &id)) {",
          "932:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP,",
          "933:                    SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "935:             return 0;",
          "936:         }",
          "944:         for (i = 0; i < srtp_pref; i++) {",
          "945:             sprof = sk_SRTP_PROTECTION_PROFILE_value(srvr, i);",
          "946:             if (sprof->id == id) {",
          "947:                 s->srtp_profile = sprof;",
          "948:                 srtp_pref = i;",
          "949:                 break;",
          "950:             }",
          "951:         }",
          "952:     }",
          "957:     if (!PACKET_get_1(pkt, &mki_len)) {",
          "958:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP,",
          "959:                SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "961:         return 0;",
          "962:     }",
          "964:     if (!PACKET_forward(pkt, mki_len)",
          "965:         || PACKET_remaining(pkt)) {",
          "966:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP, SSL_R_BAD_SRTP_MKI_VALUE);",
          "968:         return 0;",
          "969:     }",
          "971:     return 1;",
          "972: }",
          "973: #endif",
          "975: static int tls_parse_clienthello_etm(SSL *s, PACKET *pkt, int *al)",
          "976: {",
          "977:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC))",
          "978:         s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "980:     return 1;",
          "981: }",
          "989: static int check_in_list(SSL *s, unsigned int group_id,",
          "990:                          const unsigned char *groups, size_t num_groups,",
          "991:                          int checkallow)",
          "992: {",
          "993:     size_t i;",
          "995:     if (groups == NULL || num_groups == 0)",
          "996:         return 0;",
          "998:     for (i = 0; i < num_groups; i++, groups += 2) {",
          "999:         unsigned int share_id = (groups[0] << 8) | (groups[1]);",
          "1001:         if (group_id == share_id",
          "1002:                 && (!checkallow || tls_curve_allowed(s, groups,",
          "1003:                                                      SSL_SECOP_CURVE_CHECK))) {",
          "1004:             break;",
          "1005:         }",
          "1006:     }",
          "1009:     return i < num_groups;",
          "1010: }",
          "1017: static int tls_parse_clienthello_key_share(SSL *s, PACKET *pkt, int *al)",
          "1018: {",
          "1019:     unsigned int group_id;",
          "1020:     PACKET key_share_list, encoded_pt;",
          "1021:     const unsigned char *clntcurves, *srvrcurves;",
          "1022:     size_t clnt_num_curves, srvr_num_curves;",
          "1023:     int group_nid, found = 0;",
          "1024:     unsigned int curve_flags;",
          "1026:     if (s->hit)",
          "1027:         return 1;",
          "1030:     if (s->s3->peer_tmp != NULL) {",
          "1032:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "1033:         return 0;",
          "1034:     }",
          "1036:     if (!PACKET_as_length_prefixed_2(pkt, &key_share_list)) {",
          "1038:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, SSL_R_LENGTH_MISMATCH);",
          "1039:         return 0;",
          "1040:     }",
          "1043:     if (!tls1_get_curvelist(s, 0, &srvrcurves, &srvr_num_curves)) {",
          "1045:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "1046:         return 0;",
          "1047:     }",
          "1050:     if (!tls1_get_curvelist(s, 1, &clntcurves, &clnt_num_curves)) {",
          "1052:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "1053:         return 0;",
          "1054:     }",
          "1056:     while (PACKET_remaining(&key_share_list) > 0) {",
          "1057:         if (!PACKET_get_net_2(&key_share_list, &group_id)",
          "1058:                 || !PACKET_get_length_prefixed_2(&key_share_list, &encoded_pt)",
          "1059:                 || PACKET_remaining(&encoded_pt) == 0) {",
          "1061:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE,",
          "1062:                    SSL_R_LENGTH_MISMATCH);",
          "1063:             return 0;",
          "1064:         }",
          "1070:         if (found)",
          "1071:             continue;",
          "1074:         if (!check_in_list(s, group_id, clntcurves, clnt_num_curves, 0)) {",
          "1076:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, SSL_R_BAD_KEY_SHARE);",
          "1077:             return 0;",
          "1078:         }",
          "1081:         if (!check_in_list(s, group_id, srvrcurves, srvr_num_curves, 1)) {",
          "1083:             continue;",
          "1084:         }",
          "1086:         group_nid = tls1_ec_curve_id2nid(group_id, &curve_flags);",
          "1088:         if (group_nid == 0) {",
          "1090:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE,",
          "1091:                    SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS);",
          "1092:             return 0;",
          "1093:         }",
          "1095:         if ((curve_flags & TLS_CURVE_TYPE) == TLS_CURVE_CUSTOM) {",
          "1097:             EVP_PKEY *key = EVP_PKEY_new();",
          "1099:             if (key == NULL || !EVP_PKEY_set_type(key, group_nid)) {",
          "1101:                 SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_EVP_LIB);",
          "1102:                 EVP_PKEY_free(key);",
          "1103:                 return 0;",
          "1104:             }",
          "1105:             s->s3->peer_tmp = key;",
          "1106:         } else {",
          "1108:             EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL);",
          "1109:             if (pctx == NULL",
          "1110:                     || EVP_PKEY_paramgen_init(pctx) <= 0",
          "1111:                     || EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pctx,",
          "1112:                                                               group_nid) <= 0",
          "1113:                     || EVP_PKEY_paramgen(pctx, &s->s3->peer_tmp) <= 0) {",
          "1115:                 SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_EVP_LIB);",
          "1116:                 EVP_PKEY_CTX_free(pctx);",
          "1117:                 return 0;",
          "1118:             }",
          "1119:             EVP_PKEY_CTX_free(pctx);",
          "1120:             pctx = NULL;",
          "1121:         }",
          "1122:         s->s3->group_id = group_id;",
          "1124:         if (!EVP_PKEY_set1_tls_encodedpoint(s->s3->peer_tmp,",
          "1125:                 PACKET_data(&encoded_pt),",
          "1126:                 PACKET_remaining(&encoded_pt))) {",
          "1128:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, SSL_R_BAD_ECPOINT);",
          "1129:             return 0;",
          "1130:         }",
          "1132:         found = 1;",
          "1133:     }",
          "1135:     return 1;",
          "1136: }",
          "1138: #ifndef OPENSSL_NO_EC",
          "1139: static int tls_parse_clienthello_supported_groups(SSL *s, PACKET *pkt, int *al)",
          "1140: {",
          "1141:     PACKET supported_groups_list;",
          "1144:     if (!PACKET_as_length_prefixed_2(pkt, &supported_groups_list)",
          "1145:             || PACKET_remaining(&supported_groups_list) == 0",
          "1146:             || (PACKET_remaining(&supported_groups_list) % 2) != 0) {",
          "1148:         return 0;",
          "1149:     }",
          "1151:     if (!s->hit",
          "1152:             && !PACKET_memdup(&supported_groups_list,",
          "1153:                               &s->session->tlsext_supportedgroupslist,",
          "1154:                               &s->session->tlsext_supportedgroupslist_length)) {",
          "1156:         return 0;",
          "1157:     }",
          "1159:     return 1;",
          "1160: }",
          "1161: #endif",
          "1163: static int tls_parse_clienthello_ems(SSL *s, PACKET *pkt, int *al)",
          "1164: {",
          "1166:     if (PACKET_remaining(pkt) != 0) {",
          "1168:         return 0;",
          "1169:     }",
          "1171:     s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
          "1173:     return 1;",
          "1174: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c": [
          "File: ssl/statem/extensions_srvr.c -> ssl/statem/extensions_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <openssl/ocsp.h>",
          "11: #include \"../ssl_locl.h\"",
          "12: #include \"statem_locl.h\"",
          "17: int tls_parse_clienthello_renegotiate(SSL *s, PACKET *pkt, int *al)",
          "18: {",
          "19:     unsigned int ilen;",
          "20:     const unsigned char *data;",
          "23:     if (!PACKET_get_1(pkt, &ilen)",
          "24:         || !PACKET_get_bytes(pkt, &data, ilen)) {",
          "25:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_RENEGOTIATE,",
          "26:                SSL_R_RENEGOTIATION_ENCODING_ERR);",
          "28:         return 0;",
          "29:     }",
          "32:     if (ilen != s->s3->previous_client_finished_len) {",
          "33:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_RENEGOTIATE,",
          "34:                SSL_R_RENEGOTIATION_MISMATCH);",
          "36:         return 0;",
          "37:     }",
          "39:     if (memcmp(data, s->s3->previous_client_finished,",
          "40:                s->s3->previous_client_finished_len)) {",
          "41:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_RENEGOTIATE,",
          "42:                SSL_R_RENEGOTIATION_MISMATCH);",
          "44:         return 0;",
          "45:     }",
          "47:     s->s3->send_connection_binding = 1;",
          "49:     return 1;",
          "50: }",
          "52: int tls_parse_clienthello_server_name(SSL *s, PACKET *pkt, int *al)",
          "53: {",
          "54:     unsigned int servname_type;",
          "55:     PACKET sni, hostname;",
          "81:     if (!PACKET_as_length_prefixed_2(pkt, &sni)",
          "83:         || PACKET_remaining(&sni) == 0) {",
          "85:         return 0;",
          "86:     }",
          "100:     if (!PACKET_get_1(&sni, &servname_type)",
          "101:         || servname_type != TLSEXT_NAMETYPE_host_name",
          "102:         || !PACKET_as_length_prefixed_2(&sni, &hostname)) {",
          "104:         return 0;",
          "105:     }",
          "107:     if (!s->hit) {",
          "108:         if (PACKET_remaining(&hostname) > TLSEXT_MAXLEN_host_name) {",
          "110:             return 0;",
          "111:         }",
          "113:         if (PACKET_contains_zero_byte(&hostname)) {",
          "115:             return 0;",
          "116:         }",
          "118:         if (!PACKET_strndup(&hostname, &s->session->tlsext_hostname)) {",
          "120:             return 0;",
          "121:         }",
          "123:         s->servername_done = 1;",
          "124:     } else {",
          "129:         s->servername_done = s->session->tlsext_hostname",
          "130:             && PACKET_equal(&hostname, s->session->tlsext_hostname,",
          "131:                             strlen(s->session->tlsext_hostname));",
          "132:     }",
          "134:     return 1;",
          "135: }",
          "137: #ifndef OPENSSL_NO_SRP",
          "138: int tls_parse_clienthello_srp(SSL *s, PACKET *pkt, int *al)",
          "139: {",
          "140:     PACKET srp_I;",
          "142:     if (!PACKET_as_length_prefixed_1(pkt, &srp_I)",
          "143:             || PACKET_contains_zero_byte(&srp_I)) {",
          "145:         return 0;",
          "146:     }",
          "152:     if (!PACKET_strndup(&srp_I, &s->srp_ctx.login)) {",
          "154:         return 0;",
          "155:     }",
          "157:     return 1;",
          "158: }",
          "159: #endif",
          "161: #ifndef OPENSSL_NO_EC",
          "162: int tls_parse_clienthello_ec_pt_formats(SSL *s, PACKET *pkt, int *al)",
          "163: {",
          "164:     PACKET ec_point_format_list;",
          "166:     if (!PACKET_as_length_prefixed_1(pkt, &ec_point_format_list)",
          "167:         || PACKET_remaining(&ec_point_format_list) == 0) {",
          "169:         return 0;",
          "170:     }",
          "172:     if (!s->hit) {",
          "173:         if (!PACKET_memdup(&ec_point_format_list,",
          "174:                            &s->session->tlsext_ecpointformatlist,",
          "175:                            &s->session->tlsext_ecpointformatlist_length)) {",
          "177:             return 0;",
          "178:         }",
          "179:     }",
          "181:     return 1;",
          "182: }",
          "185: int tls_parse_clienthello_session_ticket(SSL *s, PACKET *pkt, int *al)",
          "186: {",
          "187:     if (s->tls_session_ticket_ext_cb &&",
          "188:             !s->tls_session_ticket_ext_cb(s, PACKET_data(pkt),",
          "189:                                           PACKET_remaining(pkt),",
          "190:                                           s->tls_session_ticket_ext_cb_arg)) {",
          "192:         return 0;",
          "193:     }",
          "195:     return 1;",
          "196: }",
          "198: int tls_parse_clienthello_sig_algs(SSL *s, PACKET *pkt, int *al)",
          "199: {",
          "200:     PACKET supported_sig_algs;",
          "202:     if (!PACKET_as_length_prefixed_2(pkt, &supported_sig_algs)",
          "203:             || (PACKET_remaining(&supported_sig_algs) % 2) != 0",
          "204:             || PACKET_remaining(&supported_sig_algs) == 0) {",
          "206:         return 0;",
          "207:     }",
          "209:     if (!s->hit && !tls1_save_sigalgs(s, PACKET_data(&supported_sig_algs),",
          "210:                                       PACKET_remaining(&supported_sig_algs))) {",
          "212:         return 0;",
          "213:     }",
          "215:     return 1;",
          "216: }",
          "218: int tls_parse_clienthello_status_request(SSL *s, PACKET *pkt, int *al)",
          "219: {",
          "220:     if (!PACKET_get_1(pkt, (unsigned int *)&s->tlsext_status_type)) {",
          "222:         return 0;",
          "223:     }",
          "224: #ifndef OPENSSL_NO_OCSP",
          "225:     if (s->tlsext_status_type == TLSEXT_STATUSTYPE_ocsp) {",
          "226:         const unsigned char *ext_data;",
          "227:         PACKET responder_id_list, exts;",
          "228:         if (!PACKET_get_length_prefixed_2 (pkt, &responder_id_list)) {",
          "230:             return 0;",
          "231:         }",
          "237:         sk_OCSP_RESPID_pop_free(s->tlsext_ocsp_ids, OCSP_RESPID_free);",
          "238:         if (PACKET_remaining(&responder_id_list) > 0) {",
          "239:             s->tlsext_ocsp_ids = sk_OCSP_RESPID_new_null();",
          "240:             if (s->tlsext_ocsp_ids == NULL) {",
          "242:                 return 0;",
          "243:             }",
          "244:         } else {",
          "245:             s->tlsext_ocsp_ids = NULL;",
          "246:         }",
          "248:         while (PACKET_remaining(&responder_id_list) > 0) {",
          "249:             OCSP_RESPID *id;",
          "250:             PACKET responder_id;",
          "251:             const unsigned char *id_data;",
          "253:             if (!PACKET_get_length_prefixed_2(&responder_id_list,",
          "254:                                               &responder_id)",
          "255:                     || PACKET_remaining(&responder_id) == 0) {",
          "257:                 return 0;",
          "258:             }",
          "260:             id_data = PACKET_data(&responder_id);",
          "262:             id = d2i_OCSP_RESPID(NULL, &id_data,",
          "263:                                  (int)PACKET_remaining(&responder_id));",
          "264:             if (id == NULL) {",
          "266:                 return 0;",
          "267:             }",
          "269:             if (id_data != PACKET_end(&responder_id)) {",
          "270:                 OCSP_RESPID_free(id);",
          "272:                 return 0;",
          "273:             }",
          "275:             if (!sk_OCSP_RESPID_push(s->tlsext_ocsp_ids, id)) {",
          "276:                 OCSP_RESPID_free(id);",
          "278:                 return 0;",
          "279:             }",
          "280:         }",
          "283:         if (!PACKET_as_length_prefixed_2(pkt, &exts)) {",
          "285:             return 0;",
          "286:         }",
          "288:         if (PACKET_remaining(&exts) > 0) {",
          "289:             ext_data = PACKET_data(&exts);",
          "290:             sk_X509_EXTENSION_pop_free(s->tlsext_ocsp_exts,",
          "291:                                        X509_EXTENSION_free);",
          "292:             s->tlsext_ocsp_exts =",
          "293:                 d2i_X509_EXTENSIONS(NULL, &ext_data,",
          "294:                                     (int)PACKET_remaining(&exts));",
          "295:             if (s->tlsext_ocsp_exts == NULL || ext_data != PACKET_end(&exts)) {",
          "297:                 return 0;",
          "298:             }",
          "299:         }",
          "300:     } else",
          "301: #endif",
          "302:     {",
          "306:         s->tlsext_status_type = -1;",
          "307:     }",
          "309:     return 1;",
          "310: }",
          "312: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "313: int tls_parse_clienthello_npn(SSL *s, PACKET *pkt, int *al)",
          "314: {",
          "315:     if (s->s3->tmp.finish_md_len == 0) {",
          "333:         s->s3->next_proto_neg_seen = 1;",
          "334:     }",
          "336:     return 1;",
          "337: }",
          "338: #endif",
          "346: int tls_parse_clienthello_alpn(SSL *s, PACKET *pkt, int *al)",
          "347: {",
          "348:     PACKET protocol_list, save_protocol_list, protocol;",
          "350:     if (s->s3->tmp.finish_md_len != 0)",
          "351:         return 1;",
          "353:     if (!PACKET_as_length_prefixed_2(pkt, &protocol_list)",
          "354:         || PACKET_remaining(&protocol_list) < 2) {",
          "356:         return 0;",
          "357:     }",
          "359:     save_protocol_list = protocol_list;",
          "360:     do {",
          "362:         if (!PACKET_get_length_prefixed_1(&protocol_list, &protocol)",
          "363:                 || PACKET_remaining(&protocol) == 0) {",
          "365:             return 0;",
          "366:         }",
          "367:     } while (PACKET_remaining(&protocol_list) != 0);",
          "369:     if (!PACKET_memdup(&save_protocol_list,",
          "370:                        &s->s3->alpn_proposed, &s->s3->alpn_proposed_len)) {",
          "372:         return 0;",
          "373:     }",
          "375:     return 1;",
          "376: }",
          "378: #ifndef OPENSSL_NO_SRTP",
          "379: int tls_parse_clienthello_use_srtp(SSL *s, PACKET *pkt, int *al)",
          "380: {",
          "381:     SRTP_PROTECTION_PROFILE *sprof;",
          "382:     STACK_OF(SRTP_PROTECTION_PROFILE) *srvr;",
          "383:     unsigned int ct, mki_len, id;",
          "384:     int i, srtp_pref;",
          "385:     PACKET subpkt;",
          "388:     if (SSL_get_srtp_profiles(s) == NULL)",
          "389:         return 1;",
          "392:     if (!PACKET_get_net_2(pkt, &ct)",
          "393:         || (ct & 1) != 0 || !PACKET_get_sub_packet(pkt, &subpkt, ct)) {",
          "394:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP,",
          "395:                SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "397:         return 0;",
          "398:     }",
          "400:     srvr = SSL_get_srtp_profiles(s);",
          "401:     s->srtp_profile = NULL;",
          "403:     srtp_pref = sk_SRTP_PROTECTION_PROFILE_num(srvr);",
          "405:     while (PACKET_remaining(&subpkt)) {",
          "406:         if (!PACKET_get_net_2(&subpkt, &id)) {",
          "407:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP,",
          "408:                    SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "410:             return 0;",
          "411:         }",
          "419:         for (i = 0; i < srtp_pref; i++) {",
          "420:             sprof = sk_SRTP_PROTECTION_PROFILE_value(srvr, i);",
          "421:             if (sprof->id == id) {",
          "422:                 s->srtp_profile = sprof;",
          "423:                 srtp_pref = i;",
          "424:                 break;",
          "425:             }",
          "426:         }",
          "427:     }",
          "432:     if (!PACKET_get_1(pkt, &mki_len)) {",
          "433:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP,",
          "434:                SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "436:         return 0;",
          "437:     }",
          "439:     if (!PACKET_forward(pkt, mki_len)",
          "440:         || PACKET_remaining(pkt)) {",
          "441:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP, SSL_R_BAD_SRTP_MKI_VALUE);",
          "443:         return 0;",
          "444:     }",
          "446:     return 1;",
          "447: }",
          "448: #endif",
          "450: int tls_parse_clienthello_etm(SSL *s, PACKET *pkt, int *al)",
          "451: {",
          "452:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC))",
          "453:         s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "455:     return 1;",
          "456: }",
          "464: static int check_in_list(SSL *s, unsigned int group_id,",
          "465:                          const unsigned char *groups, size_t num_groups,",
          "466:                          int checkallow)",
          "467: {",
          "468:     size_t i;",
          "470:     if (groups == NULL || num_groups == 0)",
          "471:         return 0;",
          "473:     for (i = 0; i < num_groups; i++, groups += 2) {",
          "474:         unsigned int share_id = (groups[0] << 8) | (groups[1]);",
          "476:         if (group_id == share_id",
          "477:                 && (!checkallow || tls_curve_allowed(s, groups,",
          "478:                                                      SSL_SECOP_CURVE_CHECK))) {",
          "479:             break;",
          "480:         }",
          "481:     }",
          "484:     return i < num_groups;",
          "485: }",
          "492: int tls_parse_clienthello_key_share(SSL *s, PACKET *pkt, int *al)",
          "493: {",
          "494:     unsigned int group_id;",
          "495:     PACKET key_share_list, encoded_pt;",
          "496:     const unsigned char *clntcurves, *srvrcurves;",
          "497:     size_t clnt_num_curves, srvr_num_curves;",
          "498:     int group_nid, found = 0;",
          "499:     unsigned int curve_flags;",
          "501:     if (s->hit)",
          "502:         return 1;",
          "505:     if (s->s3->peer_tmp != NULL) {",
          "507:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "508:         return 0;",
          "509:     }",
          "511:     if (!PACKET_as_length_prefixed_2(pkt, &key_share_list)) {",
          "513:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, SSL_R_LENGTH_MISMATCH);",
          "514:         return 0;",
          "515:     }",
          "518:     if (!tls1_get_curvelist(s, 0, &srvrcurves, &srvr_num_curves)) {",
          "520:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "521:         return 0;",
          "522:     }",
          "525:     if (!tls1_get_curvelist(s, 1, &clntcurves, &clnt_num_curves)) {",
          "527:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "528:         return 0;",
          "529:     }",
          "531:     while (PACKET_remaining(&key_share_list) > 0) {",
          "532:         if (!PACKET_get_net_2(&key_share_list, &group_id)",
          "533:                 || !PACKET_get_length_prefixed_2(&key_share_list, &encoded_pt)",
          "534:                 || PACKET_remaining(&encoded_pt) == 0) {",
          "536:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE,",
          "537:                    SSL_R_LENGTH_MISMATCH);",
          "538:             return 0;",
          "539:         }",
          "545:         if (found)",
          "546:             continue;",
          "549:         if (!check_in_list(s, group_id, clntcurves, clnt_num_curves, 0)) {",
          "551:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, SSL_R_BAD_KEY_SHARE);",
          "552:             return 0;",
          "553:         }",
          "556:         if (!check_in_list(s, group_id, srvrcurves, srvr_num_curves, 1)) {",
          "558:             continue;",
          "559:         }",
          "561:         group_nid = tls1_ec_curve_id2nid(group_id, &curve_flags);",
          "563:         if (group_nid == 0) {",
          "565:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE,",
          "566:                    SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS);",
          "567:             return 0;",
          "568:         }",
          "570:         if ((curve_flags & TLS_CURVE_TYPE) == TLS_CURVE_CUSTOM) {",
          "572:             EVP_PKEY *key = EVP_PKEY_new();",
          "574:             if (key == NULL || !EVP_PKEY_set_type(key, group_nid)) {",
          "576:                 SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_EVP_LIB);",
          "577:                 EVP_PKEY_free(key);",
          "578:                 return 0;",
          "579:             }",
          "580:             s->s3->peer_tmp = key;",
          "581:         } else {",
          "583:             EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL);",
          "584:             if (pctx == NULL",
          "585:                     || EVP_PKEY_paramgen_init(pctx) <= 0",
          "586:                     || EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pctx,",
          "587:                                                               group_nid) <= 0",
          "588:                     || EVP_PKEY_paramgen(pctx, &s->s3->peer_tmp) <= 0) {",
          "590:                 SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_EVP_LIB);",
          "591:                 EVP_PKEY_CTX_free(pctx);",
          "592:                 return 0;",
          "593:             }",
          "594:             EVP_PKEY_CTX_free(pctx);",
          "595:             pctx = NULL;",
          "596:         }",
          "597:         s->s3->group_id = group_id;",
          "599:         if (!EVP_PKEY_set1_tls_encodedpoint(s->s3->peer_tmp,",
          "600:                 PACKET_data(&encoded_pt),",
          "601:                 PACKET_remaining(&encoded_pt))) {",
          "603:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, SSL_R_BAD_ECPOINT);",
          "604:             return 0;",
          "605:         }",
          "607:         found = 1;",
          "608:     }",
          "610:     return 1;",
          "611: }",
          "613: #ifndef OPENSSL_NO_EC",
          "614: int tls_parse_clienthello_supported_groups(SSL *s, PACKET *pkt, int *al)",
          "615: {",
          "616:     PACKET supported_groups_list;",
          "619:     if (!PACKET_as_length_prefixed_2(pkt, &supported_groups_list)",
          "620:             || PACKET_remaining(&supported_groups_list) == 0",
          "621:             || (PACKET_remaining(&supported_groups_list) % 2) != 0) {",
          "623:         return 0;",
          "624:     }",
          "626:     if (!s->hit",
          "627:             && !PACKET_memdup(&supported_groups_list,",
          "628:                               &s->session->tlsext_supportedgroupslist,",
          "629:                               &s->session->tlsext_supportedgroupslist_length)) {",
          "631:         return 0;",
          "632:     }",
          "634:     return 1;",
          "635: }",
          "636: #endif",
          "638: int tls_parse_clienthello_ems(SSL *s, PACKET *pkt, int *al)",
          "639: {",
          "641:     if (PACKET_remaining(pkt) != 0) {",
          "643:         return 0;",
          "644:     }",
          "646:     s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
          "648:     return 1;",
          "649: }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h": [
          "File: ssl/statem/statem_locl.h -> ssl/statem/statem_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:                                size_t numexts, int *al);",
          "156: __owur int tls_construct_extensions(SSL *s, WPACKET *pkt, unsigned int context,",
          "157:                                     int *al);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "160: int tls_parse_clienthello_renegotiate(SSL *s, PACKET *pkt, int *al);",
          "161: int tls_parse_clienthello_server_name(SSL *s, PACKET *pkt, int *al);",
          "162: #ifndef OPENSSL_NO_SRP",
          "163: int tls_parse_clienthello_srp(SSL *s, PACKET *pkt, int *al);",
          "164: #endif",
          "165: #ifndef OPENSSL_NO_EC",
          "166: int tls_parse_clienthello_ec_pt_formats(SSL *s, PACKET *pkt, int *al);",
          "167: int tls_parse_clienthello_supported_groups(SSL *s, PACKET *pkt, int *al);",
          "168: #endif",
          "169: int tls_parse_clienthello_session_ticket(SSL *s, PACKET *pkt, int *al);",
          "170: int tls_parse_clienthello_sig_algs(SSL *s, PACKET *pkt, int *al);",
          "171: int tls_parse_clienthello_status_request(SSL *s, PACKET *pkt, int *al);",
          "172: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "173: int tls_parse_clienthello_npn(SSL *s, PACKET *pkt, int *al);",
          "174: #endif",
          "175: int tls_parse_clienthello_alpn(SSL *s, PACKET *pkt, int *al);",
          "176: #ifndef OPENSSL_NO_SRTP",
          "177: int tls_parse_clienthello_use_srtp(SSL *s, PACKET *pkt, int *al);",
          "178: #endif",
          "179: int tls_parse_clienthello_etm(SSL *s, PACKET *pkt, int *al);",
          "180: int tls_parse_clienthello_key_share(SSL *s, PACKET *pkt, int *al);",
          "181: int tls_parse_clienthello_ems(SSL *s, PACKET *pkt, int *al);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "72716e79bf1207625d58f4fe3874303ac47d0f98",
      "candidate_info": {
        "commit_hash": "72716e79bf1207625d58f4fe3874303ac47d0f98",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/72716e79bf1207625d58f4fe3874303ac47d0f98",
        "files": [
          "ssl/record/record.h",
          "ssl/record/record_locl.h",
          "ssl/record/ssl3_record.c",
          "ssl/ssl_lib.c",
          "ssl/ssl_locl.h"
        ],
        "message": "Convert some misc record layer functions for size_t\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "ssl/record/record.h||ssl/record/record.h",
          "ssl/record/record_locl.h||ssl/record/record_locl.h",
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
          "ssl/ssl_lib.c||ssl/ssl_lib.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
            "ssl/ssl_locl.h||ssl/ssl_locl.h"
          ],
          "candidate": [
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c",
            "ssl/ssl_locl.h||ssl/ssl_locl.h"
          ]
        }
      },
      "candidate_diff": {
        "ssl/record/record.h||ssl/record/record.h": [
          "File: ssl/record/record.h -> ssl/record/record.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:                            unsigned char *buf, size_t len, int peek,",
          "225:                            size_t *read);",
          "226: __owur int ssl3_setup_buffers(SSL *s);",
          "228: __owur int n_ssl3_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send);",
          "229: __owur int ssl3_write_pending(SSL *s, int type, const unsigned char *buf, size_t len,",
          "230:                               size_t *written);",
          "232: __owur int tls1_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send);",
          "233: int DTLS_RECORD_LAYER_new(RECORD_LAYER *rl);",
          "234: void DTLS_RECORD_LAYER_free(RECORD_LAYER *rl);",
          "",
          "[Removed Lines]",
          "227: __owur int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, unsigned int n_recs, int send);",
          "231: __owur int tls1_enc(SSL *s, SSL3_RECORD *recs, unsigned int n_recs, int send);",
          "",
          "[Added Lines]",
          "227: __owur int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, size_t n_recs, int send);",
          "231: __owur int tls1_enc(SSL *s, SSL3_RECORD *recs, size_t n_recs, int send);",
          "",
          "---------------"
        ],
        "ssl/record/record_locl.h||ssl/record/record_locl.h": [
          "File: ssl/record/record_locl.h -> ssl/record/record_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "107: __owur int ssl3_do_compress(SSL *ssl, SSL3_RECORD *wr);",
          "108: __owur int ssl3_do_uncompress(SSL *ssl, SSL3_RECORD *rr);",
          "109: void ssl3_cbc_copy_mac(unsigned char *out,",
          "111: __owur int ssl3_cbc_remove_padding(SSL3_RECORD *rec,",
          "113: __owur int tls1_cbc_remove_padding(const SSL *s,",
          "114:                                    SSL3_RECORD *rec,",
          "116: int dtls1_process_record(SSL *s, DTLS1_BITMAP *bitmap);",
          "117: __owur int dtls1_get_record(SSL *s);",
          "",
          "[Removed Lines]",
          "110:                        const SSL3_RECORD *rec, unsigned md_size);",
          "112:                                    unsigned block_size, unsigned mac_size);",
          "115:                                    unsigned block_size, unsigned mac_size);",
          "",
          "[Added Lines]",
          "110:                        const SSL3_RECORD *rec, size_t md_size);",
          "112:                                    size_t block_size, size_t mac_size);",
          "115:                                    size_t block_size, size_t mac_size);",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134:     unsigned char *p;",
          "135:     unsigned char md[EVP_MAX_MD_SIZE];",
          "136:     short version;",
          "142:     rr = RECORD_LAYER_get_rrec(&s->rlayer);",
          "143:     rbuf = RECORD_LAYER_get_rbuf(&s->rlayer);",
          "",
          "[Removed Lines]",
          "137:     unsigned mac_size;",
          "138:     unsigned int num_recs = 0;",
          "139:     unsigned int max_recs;",
          "140:     unsigned int j;",
          "",
          "[Added Lines]",
          "137:     size_t mac_size;",
          "138:     int imac_size;",
          "139:     size_t num_recs = 0, max_recs, j;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "352:     if (SSL_USE_ETM(s) && s->read_hash) {",
          "353:         unsigned char *mac;",
          "355:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
          "356:         for (j = 0; j < num_recs; j++) {",
          "357:             if (rr[j].length < mac_size) {",
          "",
          "[Removed Lines]",
          "354:         mac_size = EVP_MD_CTX_size(s->read_hash);",
          "",
          "[Added Lines]",
          "354:         imac_size = EVP_MD_CTX_size(s->read_hash);",
          "355:         if (imac_size < 0) {",
          "356:                 al = SSL_AD_INTERNAL_ERROR;",
          "357:                 SSLerr(SSL_F_SSL3_GET_RECORD, ERR_LIB_EVP);",
          "358:                 goto f_err;",
          "359:         }",
          "360:         mac_size = (size_t)imac_size;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "362:             rr[j].length -= mac_size;",
          "363:             mac = rr[j].data + rr[j].length;",
          "364:             i = s->method->ssl3_enc->mac(s, &rr[j], md, 0 /* not send */ );",
          "366:                 al = SSL_AD_BAD_RECORD_MAC;",
          "367:                 SSLerr(SSL_F_SSL3_GET_RECORD,",
          "368:                        SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC);",
          "",
          "[Removed Lines]",
          "365:             if (i < 0 || CRYPTO_memcmp(md, mac, (size_t)mac_size) != 0) {",
          "",
          "[Added Lines]",
          "371:             if (i < 0 || CRYPTO_memcmp(md, mac, mac_size) != 0) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "573: {",
          "574:     SSL3_RECORD *rec;",
          "575:     EVP_CIPHER_CTX *ds;",
          "576:     size_t l, i;",
          "578:     const EVP_CIPHER *enc;",
          "580:     rec = inrecs;",
          "",
          "[Removed Lines]",
          "572: int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, unsigned int n_recs, int send)",
          "577:     int bs, mac_size = 0;",
          "",
          "[Added Lines]",
          "578: int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, size_t n_recs, int send)",
          "583:     size_t bs, mac_size = 0;",
          "584:     int imac_size;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "631:         if (EVP_Cipher(ds, rec->data, rec->input, l) < 1)",
          "632:             return -1;",
          "636:         if ((bs != 1) && !send)",
          "637:             return ssl3_cbc_remove_padding(rec, bs, mac_size);",
          "638:     }",
          "639:     return (1);",
          "640: }",
          "",
          "[Removed Lines]",
          "634:         if (EVP_MD_CTX_md(s->read_hash) != NULL)",
          "635:             mac_size = EVP_MD_CTX_size(s->read_hash);",
          "",
          "[Added Lines]",
          "641:         if (EVP_MD_CTX_md(s->read_hash) != NULL) {",
          "643:             imac_size = EVP_MD_CTX_size(s->read_hash);",
          "644:             if (imac_size < 0)",
          "645:                 return -1;",
          "646:             mac_size = (size_t)imac_size;",
          "647:         }",
          "654: #define MAX_PADDING 256",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "653: {",
          "654:     EVP_CIPHER_CTX *ds;",
          "655:     size_t reclen[SSL_MAX_PIPELINES];",
          "656:     unsigned char buf[SSL_MAX_PIPELINES][EVP_AEAD_TLS1_AAD_LEN];",
          "658:     const EVP_CIPHER *enc;",
          "661:     if (send) {",
          "662:         if (EVP_MD_CTX_md(s->write_hash)) {",
          "",
          "[Removed Lines]",
          "652: int tls1_enc(SSL *s, SSL3_RECORD *recs, unsigned int n_recs, int send)",
          "657:     int bs, i, j, k, pad = 0, ret, mac_size = 0;",
          "659:     unsigned int ctr;",
          "",
          "[Added Lines]",
          "665: int tls1_enc(SSL *s, SSL3_RECORD *recs, size_t n_recs, int send)",
          "670:     int i, pad = 0, ret, tmpr;",
          "671:     size_t bs, mac_size = 0, ctr, padnum, loop;",
          "672:     unsigned char padval;",
          "673:     int imac_size;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "766:                 }",
          "768:             } else if ((bs != 1) && send) {",
          "779:             }",
          "781:             if (!send) {",
          "",
          "[Removed Lines]",
          "769:                 i = bs - ((int)reclen[ctr] % bs);",
          "774:                 j = i - 1;",
          "775:                 for (k = (int)reclen[ctr]; k < (int)(reclen[ctr] + i); k++)",
          "776:                     recs[ctr].input[k] = j;",
          "777:                 reclen[ctr] += i;",
          "778:                 recs[ctr].length += i;",
          "",
          "[Added Lines]",
          "784:                 padnum = bs - ((int)reclen[ctr] % bs);",
          "788:                 if (padnum > MAX_PADDING)",
          "789:                     return -1;",
          "791:                 padval = padnum - 1;",
          "792:                 for (loop = reclen[ctr]; loop < reclen[ctr] + padnum; loop++)",
          "793:                     recs[ctr].input[loop] = padval;",
          "794:                 reclen[ctr] += padnum;",
          "795:                 recs[ctr].length += padnum;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "807:             }",
          "808:         }",
          "811:         if ((EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(ds))",
          "812:              & EVP_CIPH_FLAG_CUSTOM_CIPHER)",
          "816:         if (send == 0) {",
          "817:             if (EVP_CIPHER_mode(enc) == EVP_CIPH_GCM_MODE) {",
          "",
          "[Removed Lines]",
          "810:         i = EVP_Cipher(ds, recs[0].data, recs[0].input, reclen[0]);",
          "813:             ? (i < 0)",
          "814:             : (i == 0))",
          "",
          "[Added Lines]",
          "827:         tmpr = EVP_Cipher(ds, recs[0].data, recs[0].input, reclen[0]);",
          "830:             ? (tmpr < 0)",
          "831:             : (tmpr == 0))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "830:         }",
          "832:         ret = 1;",
          "835:         if ((bs != 1) && !send) {",
          "836:             int tmpret;",
          "837:             for (ctr = 0; ctr < n_recs; ctr++) {",
          "",
          "[Removed Lines]",
          "833:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL)",
          "834:             mac_size = EVP_MD_CTX_size(s->read_hash);",
          "",
          "[Added Lines]",
          "850:         if (!SSL_USE_ETM(s) && EVP_MD_CTX_md(s->read_hash) != NULL) {",
          "851:             imac_size = EVP_MD_CTX_size(s->read_hash);",
          "852:             if (imac_size < 0)",
          "853:                 return -1;",
          "854:             mac_size = (size_t)imac_size;",
          "855:         }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1091: int ssl3_cbc_remove_padding(SSL3_RECORD *rec,",
          "1093: {",
          "",
          "[Removed Lines]",
          "1092:                             unsigned block_size, unsigned mac_size)",
          "1094:     unsigned padding_length, good;",
          "1095:     const unsigned overhead = 1 /* padding length byte */  + mac_size;",
          "",
          "[Added Lines]",
          "1113:                             size_t block_size, size_t mac_size)",
          "1115:     size_t padding_length;",
          "1116:     unsigned good;",
          "1117:     const size_t overhead = 1 /* padding length byte */  + mac_size;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1125: int tls1_cbc_remove_padding(const SSL *s,",
          "1126:                             SSL3_RECORD *rec,",
          "1128: {",
          "1132:     if (SSL_USE_EXPLICIT_IV(s)) {",
          "",
          "[Removed Lines]",
          "1127:                             unsigned block_size, unsigned mac_size)",
          "1129:     unsigned padding_length, good, to_check, i;",
          "1130:     const unsigned overhead = 1 /* padding length byte */  + mac_size;",
          "",
          "[Added Lines]",
          "1149:                             size_t block_size, size_t mac_size)",
          "1151:     unsigned good;",
          "1152:     size_t padding_length, to_check, i;",
          "1153:     const size_t overhead = 1 /* padding length byte */  + mac_size;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1208: #define CBC_MAC_ROTATE_IN_PLACE",
          "1211: void ssl3_cbc_copy_mac(unsigned char *out,",
          "1213: {",
          "1214: #if defined(CBC_MAC_ROTATE_IN_PLACE)",
          "1215:     unsigned char rotated_mac_buf[64 + EVP_MAX_MD_SIZE];",
          "",
          "[Removed Lines]",
          "1212:                        const SSL3_RECORD *rec, unsigned md_size)",
          "",
          "[Added Lines]",
          "1235:                        const SSL3_RECORD *rec, size_t md_size)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1231:     unsigned i, j;",
          "1232:     unsigned div_spoiler;",
          "1233:     unsigned rotate_offset;",
          "",
          "[Removed Lines]",
          "1224:     unsigned mac_end = rec->length;",
          "1225:     unsigned mac_start = mac_end - md_size;",
          "1230:     unsigned scan_start = 0;",
          "",
          "[Added Lines]",
          "1247:     size_t mac_end = rec->length;",
          "1248:     size_t mac_start = mac_end - md_size;",
          "1253:     size_t scan_start = 0;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1291:     int enc_err;",
          "1292:     SSL_SESSION *sess;",
          "1293:     SSL3_RECORD *rr;",
          "1295:     unsigned char md[EVP_MAX_MD_SIZE];",
          "1297:     rr = RECORD_LAYER_get_rrec(&s->rlayer);",
          "",
          "[Removed Lines]",
          "1294:     unsigned int mac_size;",
          "",
          "[Added Lines]",
          "1318:     int imac_size;",
          "1319:     size_t mac_size;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1376:         unsigned char *mac = NULL;",
          "1377:         unsigned char mac_tmp[EVP_MAX_MD_SIZE];",
          "1379:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
          "",
          "[Removed Lines]",
          "1378:         mac_size = EVP_MD_CTX_size(s->read_hash);",
          "",
          "[Added Lines]",
          "1405:         imac_size = EVP_MD_CTX_size(s->read_hash);",
          "1406:         if (imac_size < 0) {",
          "1407:             al = SSL_AD_INTERNAL_ERROR;",
          "1408:             SSLerr(SSL_F_DTLS1_PROCESS_RECORD, ERR_LIB_EVP);",
          "1409:             goto f_err;",
          "1410:         }",
          "1411:         mac_size = (size_t)imac_size;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1416:         i = s->method->ssl3_enc->mac(s, rr, md, 0 /* not send */ );",
          "1417:         if (i < 0 || mac == NULL",
          "1419:             enc_err = -1;",
          "1420:         if (rr->length > SSL3_RT_MAX_COMPRESSED_LENGTH + mac_size)",
          "1421:             enc_err = -1;",
          "",
          "[Removed Lines]",
          "1418:             || CRYPTO_memcmp(md, mac, (size_t)mac_size) != 0)",
          "",
          "[Added Lines]",
          "1451:             || CRYPTO_memcmp(md, mac, mac_size) != 0)",
          "",
          "---------------"
        ],
        "ssl/ssl_lib.c||ssl/ssl_lib.c": [
          "File: ssl/ssl_lib.c -> ssl/ssl_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     (int (*)(SSL *, SSL3_RECORD *, unsigned char *, int))ssl_undefined_function,",
          "64:     ssl_undefined_function,",
          "65:     (int (*)(SSL *, unsigned char *, unsigned char *, int))",
          "",
          "[Removed Lines]",
          "62:     (int (*)(SSL *, SSL3_RECORD *, unsigned int, int))ssl_undefined_function,",
          "",
          "[Added Lines]",
          "62:     (int (*)(SSL *, SSL3_RECORD *, size_t, int))ssl_undefined_function,",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1568: typedef struct ssl3_enc_method {",
          "1570:     int (*mac) (SSL *, SSL3_RECORD *, unsigned char *, int);",
          "1571:     int (*setup_key_block) (SSL *);",
          "1572:     int (*generate_master_secret) (SSL *, unsigned char *, unsigned char *,",
          "",
          "[Removed Lines]",
          "1569:     int (*enc) (SSL *, SSL3_RECORD *, unsigned int, int);",
          "",
          "[Added Lines]",
          "1569:     int (*enc) (SSL *, SSL3_RECORD *, size_t, int);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e23d5071ec4c7aa6bb2b0f2c3e0fc2182ed7e63f",
      "candidate_info": {
        "commit_hash": "e23d5071ec4c7aa6bb2b0f2c3e0fc2182ed7e63f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/e23d5071ec4c7aa6bb2b0f2c3e0fc2182ed7e63f",
        "files": [
          "ssl/record/rec_layer_d1.c",
          "ssl/record/ssl3_record.c"
        ],
        "message": "Fix encrypt-then-mac implementation for DTLS\n\nOpenSSL 1.1.0 will negotiate EtM on DTLS but will then not actually *do* it.\n\nIf we use DTLSv1.2 that will hopefully be harmless since we'll tend to use\nan AEAD ciphersuite anyway. But if we're using DTLSv1, then we certainly\nwill end up using CBC, so EtM is relevant \u2014 and we fail to interoperate with\nanything that implements EtM correctly.\n\nFixing it in HEAD and 1.1.0c will mean that 1.1.0[ab] are incompatible with\n1.1.0c+... for the limited case of non-AEAD ciphers, where they're *already*\nincompatible with other implementations due to this bug anyway. That seems\nreasonable enough, so let's do it. The only alternative is just to turn it\noff for ever... which *still* leaves 1.0.0[ab] failing to communicate with\nnon-OpenSSL implementations anyway.\n\nTested against itself as well as against GnuTLS both with and without EtM.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
          "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c"
          ],
          "candidate": [
            "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c",
            "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/record/rec_layer_d1.c||ssl/record/rec_layer_d1.c": [
          "File: ssl/record/rec_layer_d1.c -> ssl/record/rec_layer_d1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1098:         if (s->method->ssl3_enc->mac(s, &wr,",
          "1099:                                      &(p[SSL3_RECORD_get_length(&wr) + eivlen]),",
          "1100:                                      1) < 0)",
          "",
          "[Removed Lines]",
          "1097:     if (mac_size != 0) {",
          "",
          "[Added Lines]",
          "1097:     if (!SSL_USE_ETM(s) && mac_size != 0) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1112:     if (s->method->ssl3_enc->enc(s, &wr, 1, 1) < 1)",
          "1113:         goto err;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1115:     if (SSL_USE_ETM(s) && mac_size != 0) {",
          "1116:         if (s->method->ssl3_enc->mac(s, &wr,",
          "1117:                                      &(p[SSL3_RECORD_get_length(&wr)]),",
          "1118:                                      1) < 0)",
          "1119:             goto err;",
          "1120:         SSL3_RECORD_add_length(&wr, mac_size);",
          "1121:     }",
          "",
          "---------------"
        ],
        "ssl/record/ssl3_record.c||ssl/record/ssl3_record.c": [
          "File: ssl/record/ssl3_record.c -> ssl/record/ssl3_record.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1314:     rr->data = rr->input;",
          "1315:     rr->orig_len = rr->length;",
          "1317:     enc_err = s->method->ssl3_enc->enc(s, rr, 1, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1317:     if (SSL_USE_ETM(s) && s->read_hash) {",
          "1318:         unsigned char *mac;",
          "1319:         mac_size = EVP_MD_CTX_size(s->read_hash);",
          "1320:         OPENSSL_assert(mac_size <= EVP_MAX_MD_SIZE);",
          "1321:         if (rr->orig_len < mac_size) {",
          "1322:             al = SSL_AD_DECODE_ERROR;",
          "1323:             SSLerr(SSL_F_DTLS1_PROCESS_RECORD, SSL_R_LENGTH_TOO_SHORT);",
          "1324:             goto f_err;",
          "1325:         }",
          "1326:         rr->length -= mac_size;",
          "1327:         mac = rr->data + rr->length;",
          "1328:         i = s->method->ssl3_enc->mac(s, rr, md, 0 /* not send */ );",
          "1329:         if (i < 0 || CRYPTO_memcmp(md, mac, (size_t)mac_size) != 0) {",
          "1330:             al = SSL_AD_BAD_RECORD_MAC;",
          "1331:             SSLerr(SSL_F_DTLS1_PROCESS_RECORD,",
          "1332:                    SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC);",
          "1333:             goto f_err;",
          "1334:         }",
          "1335:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1338: #endif",
          "1342:         (s->enc_read_ctx != NULL) && (EVP_MD_CTX_md(s->read_hash) != NULL)) {",
          "1344:         unsigned char *mac = NULL;",
          "",
          "[Removed Lines]",
          "1341:     if ((sess != NULL) &&",
          "",
          "[Added Lines]",
          "1361:     if ((sess != NULL) && !SSL_USE_ETM(s) &&",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b473acabdfc72c99677a15f03295c12e4ff32fb",
      "candidate_info": {
        "commit_hash": "6b473acabdfc72c99677a15f03295c12e4ff32fb",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6b473acabdfc72c99677a15f03295c12e4ff32fb",
        "files": [
          "include/openssl/ssl.h",
          "ssl/build.info",
          "ssl/d1_srtp.c",
          "ssl/ssl_err.c",
          "ssl/ssl_locl.h",
          "ssl/statem/extensions.c",
          "ssl/statem/statem_extensions.c",
          "ssl/statem/statem_lib.c",
          "ssl/statem/statem_locl.h",
          "ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c",
          "ssl/t1_reneg.c"
        ],
        "message": "Refactor ClientHello extension parsing\n\nThis builds on the work started in 1ab3836b3 and extends is so that\neach extension has its own identified parsing functions, as well as an\nallowed context identifying which messages and protocols it is relevant for.\nSubsequent commits will do a similar job for the ServerHello extensions.\nThis will enable us to have common functions for processing extension blocks\nno matter which of the multiple messages they are received from. In TLSv1.3\na number of different messages have extension blocks, and some extensions\nhave moved from one message to another when compared to TLSv1.2.\n\nPerl changes reviewed by Richard Levitte. Non-perl changes reviewed by Rich\nSalz\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/build.info||ssl/build.info",
          "ssl/d1_srtp.c||ssl/d1_srtp.c",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/ssl_locl.h||ssl/ssl_locl.h",
          "ssl/statem/extensions.c||ssl/statem/extensions.c",
          "ssl/statem/statem_extensions.c||ssl/statem/statem_extensions.c",
          "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c",
          "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c",
          "ssl/t1_lib.c||ssl/t1_lib.c",
          "ssl/t1_reneg.c||ssl/t1_reneg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/statem/extensions.c||ssl/statem/extensions.c"
          ],
          "candidate": [
            "ssl/ssl_locl.h||ssl/ssl_locl.h",
            "ssl/statem/extensions.c||ssl/statem/extensions.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2280: # define SSL_F_TLS_CONSTRUCT_SERVER_KEY_EXCHANGE          377",
          "2281: # define SSL_F_TLS_GET_MESSAGE_BODY                       351",
          "2282: # define SSL_F_TLS_GET_MESSAGE_HEADER                     387",
          "2283: # define SSL_F_TLS_POST_PROCESS_CLIENT_HELLO              378",
          "2284: # define SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE       384",
          "2285: # define SSL_F_TLS_PREPARE_CLIENT_CERTIFICATE             360",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2283: # define SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE            445",
          "2284: # define SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP             446",
          "",
          "---------------"
        ],
        "ssl/build.info||ssl/build.info": [
          "File: ssl/build.info -> ssl/build.info",
          "--- Hunk 1 ---",
          "[Context before]",
          "2: SOURCE[../libssl]=\\",
          "3:         pqueue.c packet.c \\",
          "4:         statem/statem_srvr.c statem/statem_clnt.c  s3_lib.c  s3_enc.c record/rec_layer_s3.c \\",
          "6:         methods.c   t1_lib.c  t1_enc.c tls13_enc.c t1_ext.c \\",
          "7:         d1_lib.c  record/rec_layer_d1.c d1_msg.c \\",
          "8:         statem/statem_dtls.c d1_srtp.c \\",
          "",
          "[Removed Lines]",
          "5:         statem/statem_lib.c statem/statem_extensions.c s3_cbc.c s3_msg.c \\",
          "",
          "[Added Lines]",
          "5:         statem/statem_lib.c statem/extensions.c s3_cbc.c s3_msg.c \\",
          "",
          "---------------"
        ],
        "ssl/d1_srtp.c||ssl/d1_srtp.c": [
          "File: ssl/d1_srtp.c -> ssl/d1_srtp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:     return s->srtp_profile;",
          "138: }",
          "207: int ssl_parse_serverhello_use_srtp_ext(SSL *s, PACKET *pkt, int *al)",
          "208: {",
          "209:     unsigned int id, ct, mki;",
          "",
          "[Removed Lines]",
          "140: int ssl_parse_clienthello_use_srtp_ext(SSL *s, PACKET *pkt, int *al)",
          "141: {",
          "142:     SRTP_PROTECTION_PROFILE *sprof;",
          "143:     STACK_OF(SRTP_PROTECTION_PROFILE) *srvr;",
          "144:     unsigned int ct, mki_len, id;",
          "145:     int i, srtp_pref;",
          "146:     PACKET subpkt;",
          "149:     if (!PACKET_get_net_2(pkt, &ct)",
          "150:         || (ct & 1) != 0 || !PACKET_get_sub_packet(pkt, &subpkt, ct)) {",
          "151:         SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT,",
          "152:                SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "154:         return 1;",
          "155:     }",
          "157:     srvr = SSL_get_srtp_profiles(s);",
          "158:     s->srtp_profile = NULL;",
          "160:     srtp_pref = sk_SRTP_PROTECTION_PROFILE_num(srvr);",
          "162:     while (PACKET_remaining(&subpkt)) {",
          "163:         if (!PACKET_get_net_2(&subpkt, &id)) {",
          "164:             SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT,",
          "165:                    SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "167:             return 1;",
          "168:         }",
          "176:         for (i = 0; i < srtp_pref; i++) {",
          "177:             sprof = sk_SRTP_PROTECTION_PROFILE_value(srvr, i);",
          "178:             if (sprof->id == id) {",
          "179:                 s->srtp_profile = sprof;",
          "180:                 srtp_pref = i;",
          "181:                 break;",
          "182:             }",
          "183:         }",
          "184:     }",
          "189:     if (!PACKET_get_1(pkt, &mki_len)) {",
          "190:         SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT,",
          "191:                SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "193:         return 1;",
          "194:     }",
          "196:     if (!PACKET_forward(pkt, mki_len)",
          "197:         || PACKET_remaining(pkt)) {",
          "198:         SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT,",
          "199:                SSL_R_BAD_SRTP_MKI_VALUE);",
          "201:         return 1;",
          "202:     }",
          "204:     return 0;",
          "205: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "290:      \"tls_construct_server_key_exchange\"},",
          "291:     {ERR_FUNC(SSL_F_TLS_GET_MESSAGE_BODY), \"tls_get_message_body\"},",
          "292:     {ERR_FUNC(SSL_F_TLS_GET_MESSAGE_HEADER), \"tls_get_message_header\"},",
          "293:     {ERR_FUNC(SSL_F_TLS_POST_PROCESS_CLIENT_HELLO),",
          "294:      \"tls_post_process_client_hello\"},",
          "295:     {ERR_FUNC(SSL_F_TLS_POST_PROCESS_CLIENT_KEY_EXCHANGE),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293:     {ERR_FUNC(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE),",
          "294:      \"tls_parse_clienthello_key_share\"},",
          "295:     {ERR_FUNC(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP),",
          "296:      \"tls_parse_clienthello_use_srtp\"},",
          "",
          "---------------"
        ],
        "ssl/ssl_locl.h||ssl/ssl_locl.h": [
          "File: ssl/ssl_locl.h -> ssl/ssl_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1636: # endif",
          "1638: typedef struct raw_extension_st {",
          "1639:     unsigned int type;",
          "1640:     PACKET data;",
          "1641: } RAW_EXTENSION;",
          "1643: #define MAX_COMPRESSIONS_SIZE   255",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1644:     int parsed;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2067: __owur int tls1_shared_list(SSL *s,",
          "2068:                             const unsigned char *l1, size_t l1len,",
          "2069:                             const unsigned char *l2, size_t l2len, int nmatch);",
          "2070: __owur int ssl_add_clienthello_tlsext(SSL *s, WPACKET *pkt, int *al);",
          "2071: __owur int ssl_add_serverhello_tlsext(SSL *s, WPACKET *pkt, int *al);",
          "2073: void ssl_set_default_md(SSL *s);",
          "2074: __owur int tls1_set_server_sigalgs(SSL *s);",
          "2075: __owur int ssl_check_clienthello_tlsext_late(SSL *s, int *al);",
          "",
          "[Removed Lines]",
          "2072: __owur int ssl_parse_clienthello_tlsext(SSL *s, CLIENTHELLO_MSG *hello);",
          "",
          "[Added Lines]",
          "2074: __owur int tls_curve_allowed(SSL *s, const unsigned char *curve, int op);",
          "2075: __owur  int tls1_get_curvelist(SSL *s, int sess, const unsigned char **pcurves,",
          "2076:                                size_t *num_curves);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2081:                                                 unsigned int type);",
          "2082: __owur int tls_get_ticket_from_client(SSL *s, CLIENTHELLO_MSG *hello,",
          "2083:                                       SSL_SESSION **ret);",
          "2086: __owur int tls12_get_sigandhash(WPACKET *pkt, const EVP_PKEY *pk,",
          "2087:                                 const EVP_MD *md);",
          "",
          "[Removed Lines]",
          "2084: __owur int tls_check_client_ems_support(SSL *s, const CLIENTHELLO_MSG *hello);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2112: void ssl_clear_hash_ctx(EVP_MD_CTX **hash);",
          "2113: __owur int ssl_add_serverhello_renegotiate_ext(SSL *s, WPACKET *pkt);",
          "2114: __owur int ssl_parse_serverhello_renegotiate_ext(SSL *s, PACKET *pkt, int *al);",
          "2116: __owur long ssl_get_algorithm2(SSL *s);",
          "2117: __owur int tls12_copy_sigalgs(SSL *s, WPACKET *pkt,",
          "2118:                               const unsigned char *psig, size_t psiglen);",
          "",
          "[Removed Lines]",
          "2115: __owur int ssl_parse_clienthello_renegotiate_ext(SSL *s, PACKET *pkt, int *al);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2124: void ssl_set_client_disabled(SSL *s);",
          "2125: __owur int ssl_cipher_disabled(SSL *s, const SSL_CIPHER *c, int op);",
          "2128: __owur int ssl_parse_serverhello_use_srtp_ext(SSL *s, PACKET *pkt, int *al);",
          "2130: __owur int ssl_handshake_hash(SSL *s, unsigned char *out, size_t outlen,",
          "",
          "[Removed Lines]",
          "2127: __owur int ssl_parse_clienthello_use_srtp_ext(SSL *s, PACKET *pkt, int *al);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <stdlib.h>",
          "11: #include <openssl/ocsp.h>",
          "12: #include \"../ssl_locl.h\"",
          "13: #include \"statem_locl.h\"",
          "15: static int tls_parse_clienthello_renegotiate(SSL *s, PACKET *pkt, int *al);",
          "16: static int tls_parse_clienthello_server_name(SSL *s, PACKET *pkt, int *al);",
          "17: #ifndef OPENSSL_NO_SRP",
          "18: static int tls_parse_clienthello_srp(SSL *s, PACKET *pkt, int *al);",
          "19: #endif",
          "20: #ifndef OPENSSL_NO_EC",
          "21: static int tls_parse_clienthello_ec_pt_formats(SSL *s, PACKET *pkt, int *al);",
          "22: static int tls_parse_clienthello_supported_groups(SSL *s, PACKET *pkt, int *al);",
          "23: #endif",
          "24: static int tls_parse_clienthello_session_ticket(SSL *s, PACKET *pkt, int *al);",
          "25: static int tls_parse_clienthello_sig_algs(SSL *s, PACKET *pkt, int *al);",
          "26: static int tls_parse_clienthello_status_request(SSL *s, PACKET *pkt, int *al);",
          "27: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "28: static int tls_parse_clienthello_npn(SSL *s, PACKET *pkt, int *al);",
          "29: #endif",
          "30: static int tls_parse_clienthello_alpn(SSL *s, PACKET *pkt, int *al);",
          "31: #ifndef OPENSSL_NO_SRTP",
          "32: static int tls_parse_clienthello_use_srtp(SSL *s, PACKET *pkt, int *al);",
          "33: #endif",
          "34: static int tls_parse_clienthello_etm(SSL *s, PACKET *pkt, int *al);",
          "35: static int tls_parse_clienthello_key_share(SSL *s, PACKET *pkt, int *al);",
          "36: static int tls_parse_clienthello_ems(SSL *s, PACKET *pkt, int *al);",
          "38: typedef struct {",
          "40:     unsigned int type;",
          "41:     int (*server_parse)(SSL *s, PACKET *pkt, int *al);",
          "42:     int (*client_parse)(SSL *s, PACKET *pkt, int *al);",
          "43:     unsigned int context;",
          "44: } EXTENSION_DEFINITION;",
          "46: static const EXTENSION_DEFINITION ext_defs[] = {",
          "47:     {",
          "48:         TLSEXT_TYPE_renegotiate,",
          "49:         tls_parse_clienthello_renegotiate,",
          "50:         NULL,",
          "51:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_SSL3_ALLOWED",
          "52:         | EXT_TLS1_2_AND_BELOW_ONLY",
          "53:     },",
          "54:     {",
          "55:         TLSEXT_TYPE_server_name,",
          "56:         tls_parse_clienthello_server_name,",
          "57:         NULL,",
          "58:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "59:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "60:     },",
          "61: #ifndef OPENSSL_NO_SRP",
          "62:     {",
          "63:         TLSEXT_TYPE_srp,",
          "64:         tls_parse_clienthello_srp,",
          "65:         NULL,",
          "66:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "67:     },",
          "68: #endif",
          "69: #ifndef OPENSSL_NO_EC",
          "70:     {",
          "71:         TLSEXT_TYPE_ec_point_formats,",
          "72:         tls_parse_clienthello_ec_pt_formats,",
          "73:         NULL,",
          "74:         EXT_CLIENT_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "75:     },",
          "76:     {",
          "77:         TLSEXT_TYPE_supported_groups,",
          "78:         tls_parse_clienthello_supported_groups,",
          "79:         NULL,",
          "80:         EXT_CLIENT_HELLO | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "81:     },",
          "82: #endif",
          "83:     {",
          "84:         TLSEXT_TYPE_session_ticket,",
          "85:         tls_parse_clienthello_session_ticket,",
          "86:         NULL,",
          "87:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "88:     },",
          "89:     {",
          "90:         TLSEXT_TYPE_signature_algorithms,",
          "91:         tls_parse_clienthello_sig_algs,",
          "92:         NULL,",
          "93:         EXT_CLIENT_HELLO",
          "94:     },",
          "95:     {",
          "96:         TLSEXT_TYPE_status_request,",
          "97:         tls_parse_clienthello_status_request,",
          "98:         NULL,",
          "99:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_3_CERTIFICATE",
          "100:     },",
          "101: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "102:     {",
          "103:         TLSEXT_TYPE_next_proto_neg,",
          "104:         tls_parse_clienthello_npn,",
          "105:         NULL,",
          "106:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "107:     },",
          "108: #endif",
          "109:     {",
          "110:         TLSEXT_TYPE_application_layer_protocol_negotiation,",
          "111:         tls_parse_clienthello_alpn,",
          "112:         NULL,",
          "113:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "114:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "115:     },",
          "116:     {",
          "117:         TLSEXT_TYPE_use_srtp,",
          "118:         tls_parse_clienthello_use_srtp,",
          "119:         NULL,",
          "120:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "121:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS | EXT_DTLS_ONLY",
          "122:     },",
          "123:     {",
          "124:         TLSEXT_TYPE_encrypt_then_mac,",
          "125:         tls_parse_clienthello_etm,",
          "126:         NULL,",
          "127:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "128:     },",
          "129:     {",
          "130:         TLSEXT_TYPE_signed_certificate_timestamp,",
          "136:         NULL,",
          "137:         NULL,",
          "138:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_3_CERTIFICATE",
          "139:     },",
          "140:     {",
          "141:         TLSEXT_TYPE_extended_master_secret,",
          "142:         tls_parse_clienthello_ems,",
          "143:         NULL,",
          "144:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "145:     },",
          "146:     {",
          "147:         TLSEXT_TYPE_supported_versions,",
          "149:         NULL,",
          "150:         NULL,",
          "151:         EXT_CLIENT_HELLO | EXT_TLS_IMPLEMENTATION_ONLY",
          "152:     },",
          "153:     {",
          "154:         TLSEXT_TYPE_padding,",
          "156:         NULL,",
          "157:         NULL,",
          "158:         EXT_CLIENT_HELLO",
          "159:     },",
          "160:     {",
          "161:         TLSEXT_TYPE_key_share,",
          "162:         tls_parse_clienthello_key_share,",
          "163:         NULL,",
          "164:         EXT_CLIENT_HELLO | EXT_TLS1_3_SERVER_HELLO",
          "165:         | EXT_TLS1_3_HELLO_RETRY_REQUEST | EXT_TLS_IMPLEMENTATION_ONLY",
          "166:         | EXT_TLS1_3_ONLY",
          "167:     }",
          "168: };",
          "180: static int compare_extensions(const void *p1, const void *p2)",
          "181: {",
          "182:     const RAW_EXTENSION *e1 = (const RAW_EXTENSION *)p1;",
          "183:     const RAW_EXTENSION *e2 = (const RAW_EXTENSION *)p2;",
          "185:     if (e1->type < e2->type)",
          "186:         return -1;",
          "187:     else if (e1->type > e2->type)",
          "188:         return 1;",
          "190:     return 0;",
          "191: }",
          "198: static int verify_extension(SSL *s, unsigned int context, unsigned int type)",
          "199: {",
          "200:     size_t i;",
          "202:     for (i = 0; i < OSSL_NELEM(ext_defs); i++) {",
          "203:         if (type == ext_defs[i].type) {",
          "205:             if ((context & ext_defs[i].context) == 0)",
          "206:                 return 0;",
          "208:             if (SSL_IS_DTLS(s)) {",
          "209:                 if ((ext_defs[i].context & EXT_TLS_ONLY) != 0)",
          "210:                     return 0;",
          "211:             } else if ((ext_defs[i].context & EXT_DTLS_ONLY) != 0) {",
          "212:                     return 0;",
          "213:             }",
          "215:             return 1;",
          "216:         }",
          "217:     }",
          "220:     return 1;",
          "221: }",
          "228: static int find_extension_definition(SSL *s, unsigned int type,",
          "229:                                      const EXTENSION_DEFINITION **def)",
          "230: {",
          "231:     size_t i;",
          "233:     for (i = 0; i < OSSL_NELEM(ext_defs); i++) {",
          "234:         if (type == ext_defs[i].type) {",
          "236:             return 1;",
          "237:         }",
          "238:     }",
          "241:     return 0;",
          "242: }",
          "261: int tls_collect_extensions(SSL *s, PACKET *packet, unsigned int context,",
          "262:                            RAW_EXTENSION **res, size_t *numfound, int *ad)",
          "263: {",
          "264:     PACKET extensions = *packet;",
          "265:     size_t num_extensions = 0, i = 0;",
          "266:     RAW_EXTENSION *raw_extensions = NULL;",
          "269:     while (PACKET_remaining(&extensions) > 0) {",
          "270:         unsigned int type;",
          "271:         PACKET extension;",
          "273:         if (!PACKET_get_net_2(&extensions, &type) ||",
          "274:             !PACKET_get_length_prefixed_2(&extensions, &extension)) {",
          "275:             SSLerr(SSL_F_TLS_COLLECT_EXTENSIONS, SSL_R_BAD_EXTENSION);",
          "277:             goto err;",
          "278:         }",
          "280:         if (!verify_extension(s, context, type)) {",
          "281:             SSLerr(SSL_F_TLS_COLLECT_EXTENSIONS, SSL_R_BAD_EXTENSION);",
          "283:             goto err;",
          "284:         }",
          "285:         num_extensions++;",
          "286:     }",
          "288:     if (num_extensions > 0) {",
          "289:         raw_extensions = OPENSSL_zalloc(sizeof(*raw_extensions)",
          "291:         if (raw_extensions == NULL) {",
          "293:             SSLerr(SSL_F_TLS_COLLECT_EXTENSIONS, ERR_R_MALLOC_FAILURE);",
          "294:             goto err;",
          "295:         }",
          "298:         for (i = 0; i < num_extensions; i++) {",
          "299:             if (!PACKET_get_net_2(packet, &raw_extensions[i].type) ||",
          "300:                 !PACKET_get_length_prefixed_2(packet,",
          "301:                                               &raw_extensions[i].data)) {",
          "304:                 SSLerr(SSL_F_TLS_COLLECT_EXTENSIONS, ERR_R_INTERNAL_ERROR);",
          "305:                 goto err;",
          "306:             }",
          "307:         }",
          "309:         if (PACKET_remaining(packet) != 0) {",
          "311:             SSLerr(SSL_F_TLS_COLLECT_EXTENSIONS, SSL_R_LENGTH_MISMATCH);",
          "312:             goto err;",
          "313:         }",
          "315:         qsort(raw_extensions, num_extensions, sizeof(*raw_extensions),",
          "316:               compare_extensions);",
          "317:         for (i = 1; i < num_extensions; i++) {",
          "318:             if (raw_extensions[i - 1].type == raw_extensions[i].type) {",
          "320:                 goto err;",
          "321:             }",
          "322:         }",
          "323:     }",
          "327:     return 1;",
          "329:  err:",
          "330:     OPENSSL_free(raw_extensions);",
          "331:     return 0;",
          "332: }",
          "334: int tls_parse_all_extensions(SSL *s, RAW_EXTENSION *exts, size_t numexts,",
          "335:                              int *al)",
          "336: {",
          "337:     size_t loop;",
          "339:     for (loop = 0; loop < numexts; loop++) {",
          "340:         RAW_EXTENSION *currext = &exts[loop];",
          "341:         const EXTENSION_DEFINITION *extdef = NULL;",
          "342:         int (*parser)(SSL *s, PACKET *pkt, int *al) = NULL;",
          "344:         if (s->tlsext_debug_cb)",
          "345:             s->tlsext_debug_cb(s, 0, currext->type,",
          "346:                                PACKET_data(&currext->data),",
          "347:                                PACKET_remaining(&currext->data),",
          "348:                                s->tlsext_debug_arg);",
          "351:         if (currext->parsed)",
          "352:             continue;",
          "354:         currext->parsed = 1;",
          "356:         parser = NULL;",
          "357:         if (find_extension_definition(s, currext->type, &extdef))",
          "358:             parser = s->server ? extdef->server_parse : extdef->client_parse;",
          "360:         if (parser == NULL) {",
          "365:             if ((!s->hit || !s->server)",
          "366:                     && custom_ext_parse(s, s->server, currext->type,",
          "367:                                         PACKET_data(&currext->data),",
          "368:                                         PACKET_remaining(&currext->data),",
          "369:                                         al) <= 0)",
          "370:                 return 0;",
          "372:             continue;",
          "373:         }",
          "376:         if ((SSL_IS_DTLS(s)",
          "377:                     && (extdef->context & EXT_TLS_IMPLEMENTATION_ONLY) != 0)",
          "378:                 || (s->version == SSL3_VERSION",
          "379:                         && (extdef->context & EXT_SSL3_ALLOWED) == 0)",
          "380:                 || (SSL_IS_TLS13(s)",
          "381:                     && (extdef->context & EXT_TLS1_2_AND_BELOW_ONLY) != 0)",
          "382:                 || (!SSL_IS_TLS13(s)",
          "383:                     && (extdef->context & EXT_TLS1_3_ONLY) != 0)",
          "384:                 || (s->server && extdef->server_parse == NULL)",
          "385:                 || (!s->server && extdef->client_parse == NULL))",
          "386:             continue;",
          "388:         if (!parser(s, &currext->data, al))",
          "389:             return 0;",
          "390:     }",
          "392:     return 1;",
          "393: }",
          "401: int tls_parse_extension(SSL *s, int type,  RAW_EXTENSION *exts, size_t numexts,",
          "402:                         int *al)",
          "403: {",
          "404:     RAW_EXTENSION *ext = tls_get_extension_by_type(exts, numexts, type);",
          "406:     if (ext == NULL)",
          "407:         return 1;",
          "409:     return tls_parse_all_extensions(s, ext, 1, al);",
          "410: }",
          "416: static int tls_parse_clienthello_renegotiate(SSL *s, PACKET *pkt, int *al)",
          "417: {",
          "418:     unsigned int ilen;",
          "419:     const unsigned char *data;",
          "422:     if (!PACKET_get_1(pkt, &ilen)",
          "423:         || !PACKET_get_bytes(pkt, &data, ilen)) {",
          "424:         SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,",
          "425:                SSL_R_RENEGOTIATION_ENCODING_ERR);",
          "427:         return 0;",
          "428:     }",
          "431:     if (ilen != s->s3->previous_client_finished_len) {",
          "432:         SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,",
          "433:                SSL_R_RENEGOTIATION_MISMATCH);",
          "435:         return 0;",
          "436:     }",
          "438:     if (memcmp(data, s->s3->previous_client_finished,",
          "439:                s->s3->previous_client_finished_len)) {",
          "440:         SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,",
          "441:                SSL_R_RENEGOTIATION_MISMATCH);",
          "443:         return 0;",
          "444:     }",
          "446:     s->s3->send_connection_binding = 1;",
          "448:     return 1;",
          "449: }",
          "451: static int tls_parse_clienthello_server_name(SSL *s, PACKET *pkt, int *al)",
          "452: {",
          "453:     unsigned int servname_type;",
          "454:     PACKET sni, hostname;",
          "480:     if (!PACKET_as_length_prefixed_2(pkt, &sni)",
          "482:         || PACKET_remaining(&sni) == 0) {",
          "484:         return 0;",
          "485:     }",
          "499:     if (!PACKET_get_1(&sni, &servname_type)",
          "500:         || servname_type != TLSEXT_NAMETYPE_host_name",
          "501:         || !PACKET_as_length_prefixed_2(&sni, &hostname)) {",
          "503:         return 0;",
          "504:     }",
          "506:     if (!s->hit) {",
          "507:         if (PACKET_remaining(&hostname) > TLSEXT_MAXLEN_host_name) {",
          "509:             return 0;",
          "510:         }",
          "512:         if (PACKET_contains_zero_byte(&hostname)) {",
          "514:             return 0;",
          "515:         }",
          "517:         if (!PACKET_strndup(&hostname, &s->session->tlsext_hostname)) {",
          "519:             return 0;",
          "520:         }",
          "522:         s->servername_done = 1;",
          "523:     } else {",
          "528:         s->servername_done = s->session->tlsext_hostname",
          "529:             && PACKET_equal(&hostname, s->session->tlsext_hostname,",
          "530:                             strlen(s->session->tlsext_hostname));",
          "531:     }",
          "533:     return 1;",
          "534: }",
          "536: #ifndef OPENSSL_NO_SRP",
          "537: static int tls_parse_clienthello_srp(SSL *s, PACKET *pkt, int *al)",
          "538: {",
          "539:     PACKET srp_I;",
          "541:     if (!PACKET_as_length_prefixed_1(pkt, &srp_I)",
          "542:             || PACKET_contains_zero_byte(&srp_I)) {",
          "544:         return 0;",
          "545:     }",
          "551:     if (!PACKET_strndup(&srp_I, &s->srp_ctx.login)) {",
          "553:         return 0;",
          "554:     }",
          "556:     return 1;",
          "557: }",
          "558: #endif",
          "560: #ifndef OPENSSL_NO_EC",
          "561: static int tls_parse_clienthello_ec_pt_formats(SSL *s, PACKET *pkt, int *al)",
          "562: {",
          "563:     PACKET ec_point_format_list;",
          "565:     if (!PACKET_as_length_prefixed_1(pkt, &ec_point_format_list)",
          "566:         || PACKET_remaining(&ec_point_format_list) == 0) {",
          "568:         return 0;",
          "569:     }",
          "571:     if (!s->hit) {",
          "572:         if (!PACKET_memdup(&ec_point_format_list,",
          "573:                            &s->session->tlsext_ecpointformatlist,",
          "574:                            &s->session->tlsext_ecpointformatlist_length)) {",
          "576:             return 0;",
          "577:         }",
          "578:     }",
          "580:     return 1;",
          "581: }",
          "584: static int tls_parse_clienthello_session_ticket(SSL *s, PACKET *pkt, int *al)",
          "585: {",
          "586:     if (s->tls_session_ticket_ext_cb &&",
          "587:             !s->tls_session_ticket_ext_cb(s, PACKET_data(pkt),",
          "588:                                           PACKET_remaining(pkt),",
          "589:                                           s->tls_session_ticket_ext_cb_arg)) {",
          "591:         return 0;",
          "592:     }",
          "594:     return 1;",
          "595: }",
          "597: static int tls_parse_clienthello_sig_algs(SSL *s, PACKET *pkt, int *al)",
          "598: {",
          "599:     PACKET supported_sig_algs;",
          "601:     if (!PACKET_as_length_prefixed_2(pkt, &supported_sig_algs)",
          "602:             || (PACKET_remaining(&supported_sig_algs) % 2) != 0",
          "603:             || PACKET_remaining(&supported_sig_algs) == 0) {",
          "605:         return 0;",
          "606:     }",
          "608:     if (!s->hit && !tls1_save_sigalgs(s, PACKET_data(&supported_sig_algs),",
          "609:                                       PACKET_remaining(&supported_sig_algs))) {",
          "611:         return 0;",
          "612:     }",
          "614:     return 1;",
          "615: }",
          "617: static int tls_parse_clienthello_status_request(SSL *s, PACKET *pkt, int *al)",
          "618: {",
          "619:     if (!PACKET_get_1(pkt, (unsigned int *)&s->tlsext_status_type)) {",
          "621:         return 0;",
          "622:     }",
          "623: #ifndef OPENSSL_NO_OCSP",
          "624:     if (s->tlsext_status_type == TLSEXT_STATUSTYPE_ocsp) {",
          "625:         const unsigned char *ext_data;",
          "626:         PACKET responder_id_list, exts;",
          "627:         if (!PACKET_get_length_prefixed_2 (pkt, &responder_id_list)) {",
          "629:             return 0;",
          "630:         }",
          "636:         sk_OCSP_RESPID_pop_free(s->tlsext_ocsp_ids, OCSP_RESPID_free);",
          "637:         if (PACKET_remaining(&responder_id_list) > 0) {",
          "638:             s->tlsext_ocsp_ids = sk_OCSP_RESPID_new_null();",
          "639:             if (s->tlsext_ocsp_ids == NULL) {",
          "641:                 return 0;",
          "642:             }",
          "643:         } else {",
          "644:             s->tlsext_ocsp_ids = NULL;",
          "645:         }",
          "647:         while (PACKET_remaining(&responder_id_list) > 0) {",
          "648:             OCSP_RESPID *id;",
          "649:             PACKET responder_id;",
          "650:             const unsigned char *id_data;",
          "652:             if (!PACKET_get_length_prefixed_2(&responder_id_list,",
          "653:                                               &responder_id)",
          "654:                     || PACKET_remaining(&responder_id) == 0) {",
          "656:                 return 0;",
          "657:             }",
          "659:             id_data = PACKET_data(&responder_id);",
          "661:             id = d2i_OCSP_RESPID(NULL, &id_data,",
          "662:                                  (int)PACKET_remaining(&responder_id));",
          "663:             if (id == NULL) {",
          "665:                 return 0;",
          "666:             }",
          "668:             if (id_data != PACKET_end(&responder_id)) {",
          "669:                 OCSP_RESPID_free(id);",
          "671:                 return 0;",
          "672:             }",
          "674:             if (!sk_OCSP_RESPID_push(s->tlsext_ocsp_ids, id)) {",
          "675:                 OCSP_RESPID_free(id);",
          "677:                 return 0;",
          "678:             }",
          "679:         }",
          "682:         if (!PACKET_as_length_prefixed_2(pkt, &exts)) {",
          "684:             return 0;",
          "685:         }",
          "687:         if (PACKET_remaining(&exts) > 0) {",
          "688:             ext_data = PACKET_data(&exts);",
          "689:             sk_X509_EXTENSION_pop_free(s->tlsext_ocsp_exts,",
          "690:                                        X509_EXTENSION_free);",
          "691:             s->tlsext_ocsp_exts =",
          "692:                 d2i_X509_EXTENSIONS(NULL, &ext_data,",
          "693:                                     (int)PACKET_remaining(&exts));",
          "694:             if (s->tlsext_ocsp_exts == NULL || ext_data != PACKET_end(&exts)) {",
          "696:                 return 0;",
          "697:             }",
          "698:         }",
          "699:     } else",
          "700: #endif",
          "701:     {",
          "705:         s->tlsext_status_type = -1;",
          "706:     }",
          "708:     return 1;",
          "709: }",
          "711: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "712: static int tls_parse_clienthello_npn(SSL *s, PACKET *pkt, int *al)",
          "713: {",
          "714:     if (s->s3->tmp.finish_md_len == 0) {",
          "732:         s->s3->next_proto_neg_seen = 1;",
          "733:     }",
          "735:     return 1;",
          "736: }",
          "737: #endif",
          "745: static int tls_parse_clienthello_alpn(SSL *s, PACKET *pkt, int *al)",
          "746: {",
          "747:     PACKET protocol_list, save_protocol_list, protocol;",
          "749:     if (s->s3->tmp.finish_md_len != 0)",
          "750:         return 1;",
          "752:     if (!PACKET_as_length_prefixed_2(pkt, &protocol_list)",
          "753:         || PACKET_remaining(&protocol_list) < 2) {",
          "755:         return 0;",
          "756:     }",
          "758:     save_protocol_list = protocol_list;",
          "759:     do {",
          "761:         if (!PACKET_get_length_prefixed_1(&protocol_list, &protocol)",
          "762:                 || PACKET_remaining(&protocol) == 0) {",
          "764:             return 0;",
          "765:         }",
          "766:     } while (PACKET_remaining(&protocol_list) != 0);",
          "768:     if (!PACKET_memdup(&save_protocol_list,",
          "769:                        &s->s3->alpn_proposed, &s->s3->alpn_proposed_len)) {",
          "771:         return 0;",
          "772:     }",
          "774:     return 1;",
          "775: }",
          "777: #ifndef OPENSSL_NO_SRTP",
          "778: static int tls_parse_clienthello_use_srtp(SSL *s, PACKET *pkt, int *al)",
          "779: {",
          "780:     SRTP_PROTECTION_PROFILE *sprof;",
          "781:     STACK_OF(SRTP_PROTECTION_PROFILE) *srvr;",
          "782:     unsigned int ct, mki_len, id;",
          "783:     int i, srtp_pref;",
          "784:     PACKET subpkt;",
          "787:     if (SSL_get_srtp_profiles(s) == NULL)",
          "788:         return 1;",
          "791:     if (!PACKET_get_net_2(pkt, &ct)",
          "792:         || (ct & 1) != 0 || !PACKET_get_sub_packet(pkt, &subpkt, ct)) {",
          "793:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP,",
          "794:                SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "796:         return 0;",
          "797:     }",
          "799:     srvr = SSL_get_srtp_profiles(s);",
          "800:     s->srtp_profile = NULL;",
          "802:     srtp_pref = sk_SRTP_PROTECTION_PROFILE_num(srvr);",
          "804:     while (PACKET_remaining(&subpkt)) {",
          "805:         if (!PACKET_get_net_2(&subpkt, &id)) {",
          "806:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP,",
          "807:                    SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "809:             return 0;",
          "810:         }",
          "818:         for (i = 0; i < srtp_pref; i++) {",
          "819:             sprof = sk_SRTP_PROTECTION_PROFILE_value(srvr, i);",
          "820:             if (sprof->id == id) {",
          "821:                 s->srtp_profile = sprof;",
          "822:                 srtp_pref = i;",
          "823:                 break;",
          "824:             }",
          "825:         }",
          "826:     }",
          "831:     if (!PACKET_get_1(pkt, &mki_len)) {",
          "832:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP,",
          "833:                SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST);",
          "835:         return 0;",
          "836:     }",
          "838:     if (!PACKET_forward(pkt, mki_len)",
          "839:         || PACKET_remaining(pkt)) {",
          "840:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_USE_SRTP, SSL_R_BAD_SRTP_MKI_VALUE);",
          "842:         return 0;",
          "843:     }",
          "845:     return 1;",
          "846: }",
          "847: #endif",
          "849: static int tls_parse_clienthello_etm(SSL *s, PACKET *pkt, int *al)",
          "850: {",
          "851:     if (!(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC))",
          "852:         s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "854:     return 1;",
          "855: }",
          "863: static int check_in_list(SSL *s, unsigned int group_id,",
          "864:                          const unsigned char *groups, size_t num_groups,",
          "865:                          int checkallow)",
          "866: {",
          "867:     size_t i;",
          "869:     if (groups == NULL || num_groups == 0)",
          "870:         return 0;",
          "872:     for (i = 0; i < num_groups; i++, groups += 2) {",
          "873:         unsigned int share_id = (groups[0] << 8) | (groups[1]);",
          "875:         if (group_id == share_id",
          "876:                 && (!checkallow || tls_curve_allowed(s, groups,",
          "877:                                                      SSL_SECOP_CURVE_CHECK))) {",
          "878:             break;",
          "879:         }",
          "880:     }",
          "883:     return i < num_groups;",
          "884: }",
          "891: static int tls_parse_clienthello_key_share(SSL *s, PACKET *pkt, int *al)",
          "892: {",
          "893:     unsigned int group_id;",
          "894:     PACKET key_share_list, encoded_pt;",
          "895:     const unsigned char *clntcurves, *srvrcurves;",
          "896:     size_t clnt_num_curves, srvr_num_curves;",
          "897:     int group_nid, found = 0;",
          "898:     unsigned int curve_flags;",
          "900:     if (s->hit)",
          "901:         return 1;",
          "904:     if (s->s3->peer_tmp != NULL) {",
          "906:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "907:         return 0;",
          "908:     }",
          "910:     if (!PACKET_as_length_prefixed_2(pkt, &key_share_list)) {",
          "912:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, SSL_R_LENGTH_MISMATCH);",
          "913:         return 0;",
          "914:     }",
          "917:     if (!tls1_get_curvelist(s, 0, &srvrcurves, &srvr_num_curves)) {",
          "919:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "920:         return 0;",
          "921:     }",
          "924:     if (!tls1_get_curvelist(s, 1, &clntcurves, &clnt_num_curves)) {",
          "926:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_INTERNAL_ERROR);",
          "927:         return 0;",
          "928:     }",
          "930:     while (PACKET_remaining(&key_share_list) > 0) {",
          "931:         if (!PACKET_get_net_2(&key_share_list, &group_id)",
          "932:                 || !PACKET_get_length_prefixed_2(&key_share_list, &encoded_pt)",
          "933:                 || PACKET_remaining(&encoded_pt) == 0) {",
          "935:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE,",
          "936:                    SSL_R_LENGTH_MISMATCH);",
          "937:             return 0;",
          "938:         }",
          "944:         if (found)",
          "945:             continue;",
          "948:         if (!check_in_list(s, group_id, clntcurves, clnt_num_curves, 0)) {",
          "950:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, SSL_R_BAD_KEY_SHARE);",
          "951:             return 0;",
          "952:         }",
          "955:         if (!check_in_list(s, group_id, srvrcurves, srvr_num_curves, 1)) {",
          "957:             continue;",
          "958:         }",
          "960:         group_nid = tls1_ec_curve_id2nid(group_id, &curve_flags);",
          "962:         if (group_nid == 0) {",
          "964:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE,",
          "965:                    SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS);",
          "966:             return 0;",
          "967:         }",
          "969:         if ((curve_flags & TLS_CURVE_TYPE) == TLS_CURVE_CUSTOM) {",
          "971:             EVP_PKEY *key = EVP_PKEY_new();",
          "973:             if (key == NULL || !EVP_PKEY_set_type(key, group_nid)) {",
          "975:                 SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_EVP_LIB);",
          "976:                 EVP_PKEY_free(key);",
          "977:                 return 0;",
          "978:             }",
          "979:             s->s3->peer_tmp = key;",
          "980:         } else {",
          "982:             EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL);",
          "983:             if (pctx == NULL",
          "984:                     || EVP_PKEY_paramgen_init(pctx) <= 0",
          "985:                     || EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pctx,",
          "986:                                                               group_nid) <= 0",
          "987:                     || EVP_PKEY_paramgen(pctx, &s->s3->peer_tmp) <= 0) {",
          "989:                 SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, ERR_R_EVP_LIB);",
          "990:                 EVP_PKEY_CTX_free(pctx);",
          "991:                 return 0;",
          "992:             }",
          "993:             EVP_PKEY_CTX_free(pctx);",
          "994:             pctx = NULL;",
          "995:         }",
          "996:         s->s3->group_id = group_id;",
          "998:         if (!EVP_PKEY_set1_tls_encodedpoint(s->s3->peer_tmp,",
          "999:                 PACKET_data(&encoded_pt),",
          "1000:                 PACKET_remaining(&encoded_pt))) {",
          "1002:             SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_KEY_SHARE, SSL_R_BAD_ECPOINT);",
          "1003:             return 0;",
          "1004:         }",
          "1006:         found = 1;",
          "1007:     }",
          "1009:     return 1;",
          "1010: }",
          "1012: #ifndef OPENSSL_NO_EC",
          "1013: static int tls_parse_clienthello_supported_groups(SSL *s, PACKET *pkt, int *al)",
          "1014: {",
          "1015:     PACKET supported_groups_list;",
          "1018:     if (!PACKET_as_length_prefixed_2(pkt, &supported_groups_list)",
          "1019:             || PACKET_remaining(&supported_groups_list) == 0",
          "1020:             || (PACKET_remaining(&supported_groups_list) % 2) != 0) {",
          "1022:         return 0;",
          "1023:     }",
          "1025:     if (!s->hit",
          "1026:             && !PACKET_memdup(&supported_groups_list,",
          "1027:                               &s->session->tlsext_supportedgroupslist,",
          "1028:                               &s->session->tlsext_supportedgroupslist_length)) {",
          "1030:         return 0;",
          "1031:     }",
          "1033:     return 1;",
          "1034: }",
          "1035: #endif",
          "1037: static int tls_parse_clienthello_ems(SSL *s, PACKET *pkt, int *al)",
          "1038: {",
          "1040:     if (PACKET_remaining(pkt) != 0) {",
          "1042:         return 0;",
          "1043:     }",
          "1045:     s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
          "1047:     return 1;",
          "1048: }",
          "",
          "---------------"
        ],
        "ssl/statem/statem_extensions.c||ssl/statem/statem_extensions.c": [
          "File: ssl/statem/statem_extensions.c -> ssl/statem/statem_extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/statem/statem_lib.c||ssl/statem/statem_lib.c": [
          "File: ssl/statem/statem_lib.c -> ssl/statem/statem_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "958:         const SSL_METHOD *best_method = NULL;",
          "959:         PACKET versionslist;",
          "961:         if (!PACKET_as_length_prefixed_1(&suppversions->data, &versionslist)) {",
          "963:             return SSL_R_LENGTH_MISMATCH;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "961:         suppversions->parsed = 1;",
          "",
          "---------------"
        ],
        "ssl/statem/statem_locl.h||ssl/statem/statem_locl.h": [
          "File: ssl/statem/statem_locl.h -> ssl/statem/statem_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #define FINISHED_MAX_LENGTH             64",
          "41: typedef enum {",
          "",
          "[Removed Lines]",
          "30: #define EXT_DTLS_ONLY                       0x01",
          "31: #define EXT_CLIENT_HELLO                    0x02",
          "33: #define EXT_TLS1_2_SERVER_HELLO             0x04",
          "34: #define EXT_TLS1_3_SERVER_HELLO             0x08",
          "35: #define EXT_TLS1_3_ENCRYPTED_EXTENSIONS     0x10",
          "36: #define EXT_TLS1_3_HELLO_RETRY_REQUEST      0x20",
          "37: #define EXT_TLS1_3_CERTIFICATE              0x40",
          "38: #define EXT_TLS1_3_NEW_SESSION_TICKET       0x80",
          "",
          "[Added Lines]",
          "30: #define EXT_TLS_ONLY                        0x0001",
          "31: #define EXT_DTLS_ONLY                       0x0002",
          "33: #define EXT_TLS_IMPLEMENTATION_ONLY         0x0004",
          "35: #define EXT_SSL3_ALLOWED                    0x0008",
          "36: #define EXT_TLS1_2_AND_BELOW_ONLY           0x0010",
          "37: #define EXT_TLS1_3_ONLY                     0x0020",
          "38: #define EXT_CLIENT_HELLO                    0x0040",
          "40: #define EXT_TLS1_2_SERVER_HELLO             0x0080",
          "41: #define EXT_TLS1_3_SERVER_HELLO             0x0100",
          "42: #define EXT_TLS1_3_ENCRYPTED_EXTENSIONS     0x0200",
          "43: #define EXT_TLS1_3_HELLO_RETRY_REQUEST      0x0400",
          "44: #define EXT_TLS1_3_CERTIFICATE              0x0800",
          "45: #define EXT_TLS1_3_NEW_SESSION_TICKET       0x1000",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141: __owur MSG_PROCESS_RETURN tls_process_next_proto(SSL *s, PACKET *pkt);",
          "142: #endif",
          "143: __owur int tls_construct_new_session_ticket(SSL *s, WPACKET *pkt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152: __owur int tls_parse_all_extensions(SSL *s, RAW_EXTENSION *exts, size_t numexts,",
          "153:                                     int *al);",
          "154: __owur int tls_parse_extension(SSL *s, int type,  RAW_EXTENSION *exts,",
          "155:                                size_t numexts, int *al);",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1062:     return 1;",
          "1063: }",
          "1065: MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, PACKET *pkt)",
          "1066: {",
          "1067:     int i, al = SSL_AD_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1065: #ifndef OPENSSL_NO_EC",
          "1079: static void ssl_check_for_safari(SSL *s, const CLIENTHELLO_MSG *hello)",
          "1080: {",
          "1081:     unsigned int type;",
          "1082:     PACKET sni, tmppkt;",
          "1083:     size_t ext_len;",
          "1085:     static const unsigned char kSafariExtensionsBlock[] = {",
          "1106:     };",
          "1109:     static const size_t kSafariCommonExtensionsLength = 18;",
          "1111:     tmppkt = hello->extensions;",
          "1113:     if (!PACKET_forward(&tmppkt, 2)",
          "1114:         || !PACKET_get_net_2(&tmppkt, &type)",
          "1115:         || !PACKET_get_length_prefixed_2(&tmppkt, &sni)) {",
          "1116:         return;",
          "1117:     }",
          "1119:     if (type != TLSEXT_TYPE_server_name)",
          "1120:         return;",
          "1122:     ext_len = TLS1_get_client_version(s) >= TLS1_2_VERSION ?",
          "1123:         sizeof(kSafariExtensionsBlock) : kSafariCommonExtensionsLength;",
          "1125:     s->s3->is_probably_safari = PACKET_equal(&tmppkt, kSafariExtensionsBlock,",
          "1126:                                              ext_len);",
          "1127: }",
          "1139: static int tls_scan_clienthello_tlsext(SSL *s, CLIENTHELLO_MSG *hello, int *al)",
          "1140: {",
          "1142:     s->servername_done = 0;",
          "1143:     s->tlsext_status_type = -1;",
          "1144: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "1145:     s->s3->next_proto_neg_seen = 0;",
          "1146: #endif",
          "1148:     OPENSSL_free(s->s3->alpn_selected);",
          "1149:     s->s3->alpn_selected = NULL;",
          "1150:     s->s3->alpn_selected_len = 0;",
          "1151:     OPENSSL_free(s->s3->alpn_proposed);",
          "1152:     s->s3->alpn_proposed = NULL;",
          "1153:     s->s3->alpn_proposed_len = 0;",
          "1155: #ifndef OPENSSL_NO_EC",
          "1156:     if (s->options & SSL_OP_SAFARI_ECDHE_ECDSA_BUG)",
          "1157:         ssl_check_for_safari(s, hello);",
          "1161:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
          "1162:     s->s3->tmp.peer_sigalgs = NULL;",
          "1163:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "1165: #ifndef OPENSSL_NO_SRP",
          "1166:     OPENSSL_free(s->srp_ctx.login);",
          "1167:     s->srp_ctx.login = NULL;",
          "1168: #endif",
          "1170:     s->srtp_profile = NULL;",
          "1176:     if (!tls_parse_extension(s, TLSEXT_TYPE_supported_groups,",
          "1177:                              hello->pre_proc_exts, hello->num_extensions, al)) {",
          "1178:         return 0;",
          "1179:     }",
          "1182:     if (s->renegotiate",
          "1183:             && !(s->options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION)",
          "1184:             && tls_get_extension_by_type(hello->pre_proc_exts,",
          "1185:                                          hello->num_extensions,",
          "1186:                                          TLSEXT_TYPE_renegotiate) == NULL) {",
          "1188:         SSLerr(SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT,",
          "1189:                SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED);",
          "1190:         return 0;",
          "1191:     }",
          "1193:     return tls_parse_all_extensions(s, hello->pre_proc_exts,",
          "1194:                                     hello->num_extensions, al);",
          "1195: }",
          "1201: static int tls_check_clienthello_tlsext(SSL *s)",
          "1202: {",
          "1203:     int ret = SSL_TLSEXT_ERR_NOACK;",
          "1204:     int al = SSL_AD_UNRECOGNIZED_NAME;",
          "1206:     if (s->ctx != NULL && s->ctx->tlsext_servername_callback != 0)",
          "1207:         ret = s->ctx->tlsext_servername_callback(s, &al,",
          "1208:                                                  s->ctx->tlsext_servername_arg);",
          "1209:     else if (s->initial_ctx != NULL",
          "1210:              && s->initial_ctx->tlsext_servername_callback != 0)",
          "1211:         ret = s->initial_ctx->tlsext_servername_callback(s, &al,",
          "1212:                                        s->initial_ctx->tlsext_servername_arg);",
          "1214:     switch (ret) {",
          "1215:     case SSL_TLSEXT_ERR_ALERT_FATAL:",
          "1216:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1217:         return 0;",
          "1219:     case SSL_TLSEXT_ERR_ALERT_WARNING:",
          "1220:         ssl3_send_alert(s, SSL3_AL_WARNING, al);",
          "1221:         return 1;",
          "1223:     case SSL_TLSEXT_ERR_NOACK:",
          "1224:         s->servername_done = 0;",
          "1225:         return 1;",
          "1227:     default:",
          "1228:         return 1;",
          "1229:     }",
          "1230: }",
          "1236: static int tls_parse_clienthello_tlsext(SSL *s, CLIENTHELLO_MSG *hello)",
          "1237: {",
          "1238:     int al = -1;",
          "1240:     custom_ext_init(&s->cert->srv_ext);",
          "1242:     if (tls_scan_clienthello_tlsext(s, hello, &al) <= 0) {",
          "1243:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1244:         return 0;",
          "1245:     }",
          "1247:     if (!tls_check_clienthello_tlsext(s)) {",
          "1248:         SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT, SSL_R_CLIENTHELLO_TLSEXT);",
          "1249:         return 0;",
          "1250:     }",
          "1252:     return 1;",
          "1253: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1336:     s->hit = 0;",
          "1342:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_CLIENTHELLO_TLSEXT);",
          "1343:         goto f_err;",
          "1344:     }",
          "",
          "[Removed Lines]",
          "1339:     if (!tls_check_client_ems_support(s, &clienthello)) {",
          "1341:         al = SSL_AD_DECODE_ERROR;",
          "",
          "[Added Lines]",
          "1529:     if (!tls_parse_extension(s, TLSEXT_TYPE_extended_master_secret,",
          "1530:                              clienthello.pre_proc_exts,",
          "1531:                              clienthello.num_extensions, &al)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1436:     }",
          "1440:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_PARSE_TLSEXT);",
          "1441:         goto err;",
          "1442:     }",
          "",
          "[Removed Lines]",
          "1439:     if (!ssl_parse_clienthello_tlsext(s, &clienthello)) {",
          "",
          "[Added Lines]",
          "1629:     if (!tls_parse_clienthello_tlsext(s, &clienthello)) {",
          "",
          "---------------"
        ],
        "ssl/t1_lib.c||ssl/t1_lib.c": [
          "File: ssl/t1_lib.c -> ssl/t1_lib.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: static int tls_decrypt_ticket(SSL *s, const unsigned char *tick, size_t ticklen,",
          "24:                               const unsigned char *sess_id, size_t sesslen,",
          "25:                               SSL_SESSION **psess);",
          "27: static int ssl_check_serverhello_tlsext(SSL *s);",
          "29: SSL3_ENC_METHOD const TLSv1_enc_data = {",
          "",
          "[Removed Lines]",
          "26: static int ssl_check_clienthello_tlsext_early(SSL *s);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "267: {",
          "268:     size_t pcurveslen = 0;",
          "269:     if (sess) {",
          "",
          "[Removed Lines]",
          "265: static int tls1_get_curvelist(SSL *s, int sess,",
          "266:                               const unsigned char **pcurves, size_t *num_curves)",
          "",
          "[Added Lines]",
          "264: int tls1_get_curvelist(SSL *s, int sess, const unsigned char **pcurves,",
          "265:                        size_t *num_curves)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "308: }",
          "312: {",
          "313:     const tls_curve_info *cinfo;",
          "314:     if (curve[0])",
          "",
          "[Removed Lines]",
          "311: static int tls_curve_allowed(SSL *s, const unsigned char *curve, int op)",
          "",
          "[Added Lines]",
          "310: int tls_curve_allowed(SSL *s, const unsigned char *curve, int op)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1759:     return 1;",
          "1760: }",
          "",
          "[Removed Lines]",
          "1768: static int tls1_alpn_handle_client_hello(SSL *s, PACKET *pkt, int *al)",
          "1769: {",
          "1770:     PACKET protocol_list, save_protocol_list, protocol;",
          "1774:     if (!PACKET_as_length_prefixed_2(pkt, &protocol_list)",
          "1775:         || PACKET_remaining(&protocol_list) < 2) {",
          "1776:         return 0;",
          "1777:     }",
          "1779:     save_protocol_list = protocol_list;",
          "1780:     do {",
          "1782:         if (!PACKET_get_length_prefixed_1(&protocol_list, &protocol)",
          "1783:             || PACKET_remaining(&protocol) == 0) {",
          "1784:             return 0;",
          "1785:         }",
          "1786:     } while (PACKET_remaining(&protocol_list) != 0);",
          "1788:     if (!PACKET_memdup(&save_protocol_list,",
          "1789:                        &s->s3->alpn_proposed, &s->s3->alpn_proposed_len)) {",
          "1791:         return 0;",
          "1792:     }",
          "1794:     return 1;",
          "1795: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1831:     return 1;",
          "1832: }",
          "2505: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "",
          "[Removed Lines]",
          "1834: #ifndef OPENSSL_NO_EC",
          "1848: static void ssl_check_for_safari(SSL *s, const CLIENTHELLO_MSG *hello)",
          "1849: {",
          "1850:     unsigned int type;",
          "1851:     PACKET sni, tmppkt;",
          "1852:     size_t ext_len;",
          "1854:     static const unsigned char kSafariExtensionsBlock[] = {",
          "1875:     };",
          "1878:     static const size_t kSafariCommonExtensionsLength = 18;",
          "1880:     tmppkt = hello->extensions;",
          "1882:     if (!PACKET_forward(&tmppkt, 2)",
          "1883:         || !PACKET_get_net_2(&tmppkt, &type)",
          "1884:         || !PACKET_get_length_prefixed_2(&tmppkt, &sni)) {",
          "1885:         return;",
          "1886:     }",
          "1888:     if (type != TLSEXT_TYPE_server_name)",
          "1889:         return;",
          "1891:     ext_len = TLS1_get_client_version(s) >= TLS1_2_VERSION ?",
          "1892:         sizeof(kSafariExtensionsBlock) : kSafariCommonExtensionsLength;",
          "1894:     s->s3->is_probably_safari = PACKET_equal(&tmppkt, kSafariExtensionsBlock,",
          "1895:                                              ext_len);",
          "1896: }",
          "1906: static int tls_process_supported_groups(SSL *s, CLIENTHELLO_MSG *hello)",
          "1907: {",
          "1908: #ifndef OPENSSL_NO_EC",
          "1909:     PACKET supported_groups_list;",
          "1910:     RAW_EXTENSION *suppgroups = tls_get_extension_by_type(hello->pre_proc_exts,",
          "1911:                                     hello->num_extensions,",
          "1912:                                     TLSEXT_TYPE_supported_groups);",
          "1914:     if (suppgroups == NULL)",
          "1915:         return 1;",
          "1918:     if (!PACKET_as_length_prefixed_2(&suppgroups->data,",
          "1919:                                      &supported_groups_list)",
          "1920:         || PACKET_remaining(&supported_groups_list) == 0",
          "1921:         || (PACKET_remaining(&supported_groups_list) % 2) != 0) {",
          "1922:         return 0;",
          "1923:     }",
          "1925:     if (!s->hit",
          "1926:             && !PACKET_memdup(&supported_groups_list,",
          "1927:                               &s->session->tlsext_supportedgroupslist,",
          "1928:                               &s->session->tlsext_supportedgroupslist_length)) {",
          "1929:         return 0;",
          "1930:     }",
          "1931: #endif",
          "1932:     return 1;",
          "1933: }",
          "1941: static int check_in_list(SSL *s, unsigned int group_id,",
          "1942:                          const unsigned char *groups, size_t num_groups,",
          "1943:                          int checkallow)",
          "1944: {",
          "1945:     size_t i;",
          "1947:     if (groups == NULL || num_groups == 0)",
          "1948:         return 0;",
          "1950:     for (i = 0; i < num_groups; i++, groups += 2) {",
          "1951:         unsigned int share_id = (groups[0] << 8) | (groups[1]);",
          "1953:         if (group_id == share_id",
          "1954:                 && (!checkallow || tls_curve_allowed(s, groups,",
          "1955:                                                      SSL_SECOP_CURVE_CHECK))) {",
          "1956:             break;",
          "1957:         }",
          "1958:     }",
          "1961:     return i < num_groups;",
          "1962: }",
          "1969: static int process_key_share_ext(SSL *s, PACKET *pkt, int *al)",
          "1970: {",
          "1971:     unsigned int group_id;",
          "1972:     PACKET key_share_list, encoded_pt;",
          "1973:     const unsigned char *clntcurves, *srvrcurves;",
          "1974:     size_t clnt_num_curves, srvr_num_curves;",
          "1975:     int group_nid, found = 0;",
          "1976:     unsigned int curve_flags;",
          "1979:     if (s->s3->peer_tmp != NULL) {",
          "1981:         SSLerr(SSL_F_PROCESS_KEY_SHARE_EXT, ERR_R_INTERNAL_ERROR);",
          "1982:         return 0;",
          "1983:     }",
          "1985:     if (!PACKET_as_length_prefixed_2(pkt, &key_share_list)) {",
          "1987:         SSLerr(SSL_F_PROCESS_KEY_SHARE_EXT,",
          "1988:                SSL_R_LENGTH_MISMATCH);",
          "1989:         return 0;",
          "1990:     }",
          "1993:     if (!tls1_get_curvelist(s, 0, &srvrcurves, &srvr_num_curves)) {",
          "1995:         SSLerr(SSL_F_PROCESS_KEY_SHARE_EXT,",
          "1996:                ERR_R_INTERNAL_ERROR);",
          "1997:         return 0;",
          "1998:     }",
          "2001:     if (!tls1_get_curvelist(s, 1, &clntcurves, &clnt_num_curves)) {",
          "2003:         SSLerr(SSL_F_PROCESS_KEY_SHARE_EXT,",
          "2004:                ERR_R_INTERNAL_ERROR);",
          "2005:         return 0;",
          "2006:     }",
          "2008:     while (PACKET_remaining(&key_share_list) > 0) {",
          "2009:         if (!PACKET_get_net_2(&key_share_list, &group_id)",
          "2010:                 || !PACKET_get_length_prefixed_2(&key_share_list, &encoded_pt)",
          "2011:                 || PACKET_remaining(&encoded_pt) == 0) {",
          "2013:             SSLerr(SSL_F_PROCESS_KEY_SHARE_EXT,",
          "2014:                    SSL_R_LENGTH_MISMATCH);",
          "2015:             return 0;",
          "2016:         }",
          "2022:         if (found)",
          "2023:             continue;",
          "2026:         if (!check_in_list(s, group_id, clntcurves, clnt_num_curves, 0)) {",
          "2028:             SSLerr(SSL_F_PROCESS_KEY_SHARE_EXT,",
          "2029:                    SSL_R_BAD_KEY_SHARE);",
          "2030:             return 0;",
          "2031:         }",
          "2034:         if (!check_in_list(s, group_id, srvrcurves, srvr_num_curves, 1)) {",
          "2036:             continue;",
          "2037:         }",
          "2039:         group_nid = tls1_ec_curve_id2nid(group_id, &curve_flags);",
          "2041:         if (group_nid == 0) {",
          "2043:             SSLerr(SSL_F_PROCESS_KEY_SHARE_EXT,",
          "2044:                    SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS);",
          "2045:             return 0;",
          "2046:         }",
          "2048:         if ((curve_flags & TLS_CURVE_TYPE) == TLS_CURVE_CUSTOM) {",
          "2050:             EVP_PKEY *key = EVP_PKEY_new();",
          "2052:             if (key == NULL || !EVP_PKEY_set_type(key, group_nid)) {",
          "2054:                 SSLerr(SSL_F_PROCESS_KEY_SHARE_EXT, ERR_R_EVP_LIB);",
          "2055:                 EVP_PKEY_free(key);",
          "2056:                 return 0;",
          "2057:             }",
          "2058:             s->s3->peer_tmp = key;",
          "2059:         } else {",
          "2061:             EVP_PKEY_CTX *pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_EC, NULL);",
          "2062:             if (pctx == NULL",
          "2063:                     || EVP_PKEY_paramgen_init(pctx) <= 0",
          "2064:                     || EVP_PKEY_CTX_set_ec_paramgen_curve_nid(pctx,",
          "2065:                                                               group_nid) <= 0",
          "2066:                     || EVP_PKEY_paramgen(pctx, &s->s3->peer_tmp) <= 0) {",
          "2068:                 SSLerr(SSL_F_PROCESS_KEY_SHARE_EXT, ERR_R_EVP_LIB);",
          "2069:                 EVP_PKEY_CTX_free(pctx);",
          "2070:                 return 0;",
          "2071:             }",
          "2072:             EVP_PKEY_CTX_free(pctx);",
          "2073:             pctx = NULL;",
          "2074:         }",
          "2075:         s->s3->group_id = group_id;",
          "2077:         if (!EVP_PKEY_set1_tls_encodedpoint(s->s3->peer_tmp,",
          "2078:                 PACKET_data(&encoded_pt),",
          "2079:                 PACKET_remaining(&encoded_pt))) {",
          "2081:             SSLerr(SSL_F_PROCESS_KEY_SHARE_EXT, SSL_R_BAD_ECPOINT);",
          "2082:             return 0;",
          "2083:         }",
          "2085:         found = 1;",
          "2086:     }",
          "2088:     return 1;",
          "2089: }",
          "2103: static int ssl_scan_clienthello_tlsext(SSL *s, CLIENTHELLO_MSG *hello, int *al)",
          "2104: {",
          "2105:     size_t loop;",
          "2106:     int renegotiate_seen = 0;",
          "2109:     s->servername_done = 0;",
          "2110:     s->tlsext_status_type = -1;",
          "2111: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "2112:     s->s3->next_proto_neg_seen = 0;",
          "2113: #endif",
          "2115:     OPENSSL_free(s->s3->alpn_selected);",
          "2116:     s->s3->alpn_selected = NULL;",
          "2117:     s->s3->alpn_selected_len = 0;",
          "2118:     OPENSSL_free(s->s3->alpn_proposed);",
          "2119:     s->s3->alpn_proposed = NULL;",
          "2120:     s->s3->alpn_proposed_len = 0;",
          "2122: #ifndef OPENSSL_NO_EC",
          "2123:     if (s->options & SSL_OP_SAFARI_ECDHE_ECDSA_BUG)",
          "2124:         ssl_check_for_safari(s, hello);",
          "2128:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
          "2129:     s->s3->tmp.peer_sigalgs = NULL;",
          "2130:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "2132: #ifndef OPENSSL_NO_SRP",
          "2133:     OPENSSL_free(s->srp_ctx.login);",
          "2134:     s->srp_ctx.login = NULL;",
          "2135: #endif",
          "2137:     s->srtp_profile = NULL;",
          "2143:     if (!tls_process_supported_groups(s, hello)) {",
          "2145:         return 0;",
          "2146:     }",
          "2153:     for (loop = 0; loop < hello->num_extensions; loop++) {",
          "2154:         RAW_EXTENSION *currext = &hello->pre_proc_exts[loop];",
          "2156:         if (s->tlsext_debug_cb)",
          "2157:             s->tlsext_debug_cb(s, 0, currext->type,",
          "2158:                                PACKET_data(&currext->data),",
          "2159:                                PACKET_remaining(&currext->data),",
          "2160:                                s->tlsext_debug_arg);",
          "2162:         if (currext->type == TLSEXT_TYPE_renegotiate) {",
          "2163:             if (!ssl_parse_clienthello_renegotiate_ext(s,",
          "2164:                     &currext->data, al))",
          "2165:                 return 0;",
          "2166:             renegotiate_seen = 1;",
          "2167:         } else if (s->version == SSL3_VERSION) {",
          "2168:         }",
          "2194:         else if (currext->type == TLSEXT_TYPE_server_name) {",
          "2195:             unsigned int servname_type;",
          "2196:             PACKET sni, hostname;",
          "2198:             if (!PACKET_as_length_prefixed_2(&currext->data, &sni)",
          "2200:                 || PACKET_remaining(&sni) == 0) {",
          "2201:                 return 0;",
          "2202:             }",
          "2216:             if (!PACKET_get_1(&sni, &servname_type)",
          "2217:                 || servname_type != TLSEXT_NAMETYPE_host_name",
          "2218:                 || !PACKET_as_length_prefixed_2(&sni, &hostname)) {",
          "2219:                 return 0;",
          "2220:             }",
          "2222:             if (!s->hit) {",
          "2223:                 if (PACKET_remaining(&hostname) > TLSEXT_MAXLEN_host_name) {",
          "2225:                     return 0;",
          "2226:                 }",
          "2228:                 if (PACKET_contains_zero_byte(&hostname)) {",
          "2230:                     return 0;",
          "2231:                 }",
          "2233:                 if (!PACKET_strndup(&hostname, &s->session->tlsext_hostname)) {",
          "2235:                     return 0;",
          "2236:                 }",
          "2238:                 s->servername_done = 1;",
          "2239:             } else {",
          "2244:                 s->servername_done = s->session->tlsext_hostname",
          "2245:                     && PACKET_equal(&hostname, s->session->tlsext_hostname,",
          "2246:                                     strlen(s->session->tlsext_hostname));",
          "2247:             }",
          "2248:         }",
          "2249: #ifndef OPENSSL_NO_SRP",
          "2250:         else if (currext->type == TLSEXT_TYPE_srp) {",
          "2251:             PACKET srp_I;",
          "2253:             if (!PACKET_as_length_prefixed_1(&currext->data, &srp_I))",
          "2254:                 return 0;",
          "2256:             if (PACKET_contains_zero_byte(&srp_I))",
          "2257:                 return 0;",
          "2263:             if (!PACKET_strndup(&srp_I, &s->srp_ctx.login)) {",
          "2265:                 return 0;",
          "2266:             }",
          "2267:         }",
          "2268: #endif",
          "2270: #ifndef OPENSSL_NO_EC",
          "2271:         else if (currext->type == TLSEXT_TYPE_ec_point_formats) {",
          "2272:             PACKET ec_point_format_list;",
          "2274:             if (!PACKET_as_length_prefixed_1(&currext->data,",
          "2275:                                              &ec_point_format_list)",
          "2276:                 || PACKET_remaining(&ec_point_format_list) == 0) {",
          "2277:                 return 0;",
          "2278:             }",
          "2280:             if (!s->hit) {",
          "2281:                 if (!PACKET_memdup(&ec_point_format_list,",
          "2282:                                    &s->session->tlsext_ecpointformatlist,",
          "2283:                                    &s->",
          "2284:                                    session->tlsext_ecpointformatlist_length)) {",
          "2286:                     return 0;",
          "2287:                 }",
          "2288:             }",
          "2289:         }",
          "2291:         else if (currext->type == TLSEXT_TYPE_session_ticket",
          "2292:                 && !SSL_IS_TLS13(s)) {",
          "2293:             if (s->tls_session_ticket_ext_cb &&",
          "2294:                 !s->tls_session_ticket_ext_cb(s,",
          "2295:                     PACKET_data(&currext->data),",
          "2296:                     PACKET_remaining(&currext->data),",
          "2297:                     s->tls_session_ticket_ext_cb_arg)) {",
          "2299:                 return 0;",
          "2300:             }",
          "2301:         } else if (currext->type == TLSEXT_TYPE_signature_algorithms) {",
          "2302:             PACKET supported_sig_algs;",
          "2304:             if (!PACKET_as_length_prefixed_2(&currext->data,",
          "2305:                                              &supported_sig_algs)",
          "2306:                 || (PACKET_remaining(&supported_sig_algs) % 2) != 0",
          "2307:                 || PACKET_remaining(&supported_sig_algs) == 0) {",
          "2308:                 return 0;",
          "2309:             }",
          "2311:             if (!s->hit) {",
          "2312:                 if (!tls1_save_sigalgs(s, PACKET_data(&supported_sig_algs),",
          "2313:                                        PACKET_remaining(&supported_sig_algs))) {",
          "2314:                     return 0;",
          "2315:                 }",
          "2316:             }",
          "2317:         } else if (currext->type == TLSEXT_TYPE_status_request) {",
          "2318:             if (!PACKET_get_1(&currext->data,",
          "2319:                               (unsigned int *)&s->tlsext_status_type)) {",
          "2320:                 return 0;",
          "2321:             }",
          "2322: #ifndef OPENSSL_NO_OCSP",
          "2323:             if (s->tlsext_status_type == TLSEXT_STATUSTYPE_ocsp) {",
          "2324:                 const unsigned char *ext_data;",
          "2325:                 PACKET responder_id_list, exts;",
          "2326:                 if (!PACKET_get_length_prefixed_2",
          "2327:                     (&currext->data, &responder_id_list))",
          "2328:                     return 0;",
          "2334:                 sk_OCSP_RESPID_pop_free(s->tlsext_ocsp_ids,",
          "2335:                                         OCSP_RESPID_free);",
          "2336:                 if (PACKET_remaining(&responder_id_list) > 0) {",
          "2337:                     s->tlsext_ocsp_ids = sk_OCSP_RESPID_new_null();",
          "2338:                     if (s->tlsext_ocsp_ids == NULL) {",
          "2340:                         return 0;",
          "2341:                     }",
          "2342:                 } else {",
          "2343:                     s->tlsext_ocsp_ids = NULL;",
          "2344:                 }",
          "2346:                 while (PACKET_remaining(&responder_id_list) > 0) {",
          "2347:                     OCSP_RESPID *id;",
          "2348:                     PACKET responder_id;",
          "2349:                     const unsigned char *id_data;",
          "2351:                     if (!PACKET_get_length_prefixed_2(&responder_id_list,",
          "2352:                                                       &responder_id)",
          "2353:                         || PACKET_remaining(&responder_id) == 0) {",
          "2354:                         return 0;",
          "2355:                     }",
          "2357:                     id_data = PACKET_data(&responder_id);",
          "2359:                     id = d2i_OCSP_RESPID(NULL, &id_data,",
          "2360:                                          (int)PACKET_remaining(&responder_id));",
          "2361:                     if (id == NULL)",
          "2362:                         return 0;",
          "2364:                     if (id_data != PACKET_end(&responder_id)) {",
          "2365:                         OCSP_RESPID_free(id);",
          "2366:                         return 0;",
          "2367:                     }",
          "2369:                     if (!sk_OCSP_RESPID_push(s->tlsext_ocsp_ids, id)) {",
          "2370:                         OCSP_RESPID_free(id);",
          "2372:                         return 0;",
          "2373:                     }",
          "2374:                 }",
          "2377:                 if (!PACKET_as_length_prefixed_2(",
          "2378:                         &currext->data, &exts))",
          "2379:                     return 0;",
          "2381:                 if (PACKET_remaining(&exts) > 0) {",
          "2382:                     ext_data = PACKET_data(&exts);",
          "2383:                     sk_X509_EXTENSION_pop_free(s->tlsext_ocsp_exts,",
          "2384:                                                X509_EXTENSION_free);",
          "2385:                     s->tlsext_ocsp_exts =",
          "2386:                         d2i_X509_EXTENSIONS(NULL, &ext_data,",
          "2387:                                             (int)PACKET_remaining(&exts));",
          "2388:                     if (s->tlsext_ocsp_exts == NULL",
          "2389:                         || ext_data != PACKET_end(&exts)) {",
          "2390:                         return 0;",
          "2391:                     }",
          "2392:                 }",
          "2393:             } else",
          "2394: #endif",
          "2395:             {",
          "2399:                 s->tlsext_status_type = -1;",
          "2400:             }",
          "2401:         }",
          "2402: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "2403:         else if (currext->type == TLSEXT_TYPE_next_proto_neg",
          "2404:                  && s->s3->tmp.finish_md_len == 0) {",
          "2422:             s->s3->next_proto_neg_seen = 1;",
          "2423:         }",
          "2424: #endif",
          "2426:         else if (currext->type",
          "2427:                      == TLSEXT_TYPE_application_layer_protocol_negotiation",
          "2428:                  && s->s3->tmp.finish_md_len == 0) {",
          "2429:             if (!tls1_alpn_handle_client_hello(s,",
          "2430:                     &currext->data, al))",
          "2431:                 return 0;",
          "2432:         }",
          "2435: #ifndef OPENSSL_NO_SRTP",
          "2436:         else if (SSL_IS_DTLS(s) && SSL_get_srtp_profiles(s)",
          "2437:                  && currext->type == TLSEXT_TYPE_use_srtp) {",
          "2438:             if (ssl_parse_clienthello_use_srtp_ext(s,",
          "2439:                     &currext->data, al))",
          "2440:                 return 0;",
          "2441:         }",
          "2442: #endif",
          "2443:         else if (currext->type == TLSEXT_TYPE_encrypt_then_mac",
          "2444:                  && !(s->options & SSL_OP_NO_ENCRYPT_THEN_MAC)) {",
          "2445:             s->s3->flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "2446:         } else if (currext->type == TLSEXT_TYPE_key_share",
          "2447:                    && SSL_IS_TLS13(s) && !s->hit",
          "2448:                    && !process_key_share_ext(s, &currext->data, al)) {",
          "2449:             return 0;",
          "2450:         }",
          "2463:         else if (!s->hit) {",
          "2464:             if (custom_ext_parse(s, 1, currext->type,",
          "2465:                     PACKET_data(&currext->data),",
          "2466:                     PACKET_remaining(&currext->data), al) <= 0)",
          "2467:                 return 0;",
          "2468:         }",
          "2469:     }",
          "2473:     if (!renegotiate_seen && s->renegotiate &&",
          "2474:         !(s->options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION)) {",
          "2476:         SSLerr(SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT,",
          "2477:                SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED);",
          "2478:         return 0;",
          "2479:     }",
          "2487:     return 1;",
          "2488: }",
          "2490: int ssl_parse_clienthello_tlsext(SSL *s, CLIENTHELLO_MSG *hello)",
          "2491: {",
          "2492:     int al = -1;",
          "2493:     custom_ext_init(&s->cert->srv_ext);",
          "2494:     if (ssl_scan_clienthello_tlsext(s, hello, &al) <= 0) {",
          "2495:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "2496:         return 0;",
          "2497:     }",
          "2498:     if (ssl_check_clienthello_tlsext_early(s) <= 0) {",
          "2499:         SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT, SSL_R_CLIENTHELLO_TLSEXT);",
          "2500:         return 0;",
          "2501:     }",
          "2502:     return 1;",
          "2503: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2873:     return 1;",
          "2874: }",
          "2920: void ssl_set_default_md(SSL *s)",
          "2921: {",
          "",
          "[Removed Lines]",
          "2876: static int ssl_check_clienthello_tlsext_early(SSL *s)",
          "2877: {",
          "2878:     int ret = SSL_TLSEXT_ERR_NOACK;",
          "2879:     int al = SSL_AD_UNRECOGNIZED_NAME;",
          "2881: #ifndef OPENSSL_NO_EC",
          "2890: #endif",
          "2892:     if (s->ctx != NULL && s->ctx->tlsext_servername_callback != 0)",
          "2893:         ret =",
          "2894:             s->ctx->tlsext_servername_callback(s, &al,",
          "2895:                                                s->ctx->tlsext_servername_arg);",
          "2896:     else if (s->initial_ctx != NULL",
          "2897:              && s->initial_ctx->tlsext_servername_callback != 0)",
          "2898:         ret =",
          "2899:             s->initial_ctx->tlsext_servername_callback(s, &al,",
          "2900:                                                        s->",
          "2901:                                                        initial_ctx->tlsext_servername_arg);",
          "2903:     switch (ret) {",
          "2904:     case SSL_TLSEXT_ERR_ALERT_FATAL:",
          "2905:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "2906:         return -1;",
          "2908:     case SSL_TLSEXT_ERR_ALERT_WARNING:",
          "2909:         ssl3_send_alert(s, SSL3_AL_WARNING, al);",
          "2910:         return 1;",
          "2912:     case SSL_TLSEXT_ERR_NOACK:",
          "2913:         s->servername_done = 0;",
          "2914:     default:",
          "2915:         return 1;",
          "2916:     }",
          "2917: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3196:     if (ticketext == NULL)",
          "3197:         return 0;",
          "3199:     size = PACKET_remaining(&ticketext->data);",
          "3200:     if (size == 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2449:     ticketext->parsed = 1;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3237:     }",
          "3238: }",
          "",
          "[Removed Lines]",
          "3247: int tls_check_client_ems_support(SSL *s, const CLIENTHELLO_MSG *hello)",
          "3248: {",
          "3249:     RAW_EXTENSION *emsext;",
          "3251:     s->s3->flags &= ~TLS1_FLAGS_RECEIVED_EXTMS;",
          "3253:     if (!SSL_IS_DTLS(s) && (s->version < TLS1_VERSION",
          "3254:                             || s->version > TLS1_2_VERSION))",
          "3255:         return 1;",
          "3257:     emsext = tls_get_extension_by_type(hello->pre_proc_exts,",
          "3258:                                        hello->num_extensions,",
          "3259:                                        TLSEXT_TYPE_extended_master_secret);",
          "3265:     if (emsext == NULL)",
          "3266:         return 1;",
          "3269:     if (PACKET_remaining(&emsext->data) != 0)",
          "3270:         return 0;",
          "3272:     s->s3->flags |= TLS1_FLAGS_RECEIVED_EXTMS;",
          "3274:     return 1;",
          "3275: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/t1_reneg.c||ssl/t1_reneg.c": [
          "File: ssl/t1_reneg.c -> ssl/t1_reneg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include <openssl/objects.h>",
          "12: #include \"ssl_locl.h\"",
          "53: int ssl_add_serverhello_renegotiate_ext(SSL *s, WPACKET *pkt)",
          "54: {",
          "",
          "[Removed Lines]",
          "17: int ssl_parse_clienthello_renegotiate_ext(SSL *s, PACKET *pkt, int *al)",
          "18: {",
          "19:     unsigned int ilen;",
          "20:     const unsigned char *d;",
          "23:     if (!PACKET_get_1(pkt, &ilen)",
          "24:         || !PACKET_get_bytes(pkt, &d, ilen)) {",
          "25:         SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,",
          "26:                SSL_R_RENEGOTIATION_ENCODING_ERR);",
          "28:         return 0;",
          "29:     }",
          "32:     if (ilen != s->s3->previous_client_finished_len) {",
          "33:         SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,",
          "34:                SSL_R_RENEGOTIATION_MISMATCH);",
          "36:         return 0;",
          "37:     }",
          "39:     if (memcmp(d, s->s3->previous_client_finished,",
          "40:                s->s3->previous_client_finished_len)) {",
          "41:         SSLerr(SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT,",
          "42:                SSL_R_RENEGOTIATION_MISMATCH);",
          "44:         return 0;",
          "45:     }",
          "47:     s->s3->send_connection_binding = 1;",
          "49:     return 1;",
          "50: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "805a2e9e1388f21bd381a8c55e66bae2e6325667",
      "candidate_info": {
        "commit_hash": "805a2e9e1388f21bd381a8c55e66bae2e6325667",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/805a2e9e1388f21bd381a8c55e66bae2e6325667",
        "files": [
          "include/openssl/ssl.h",
          "ssl/ssl_err.c",
          "ssl/statem/extensions.c",
          "ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_srvr.c"
        ],
        "message": "Provide server side extension init and finalisation functions\n\nPerl changes reviewed by Richard Levitte. Non-perl changes reviewed by Rich\nSalz\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>",
        "before_after_code_files": [
          "include/openssl/ssl.h||include/openssl/ssl.h",
          "ssl/ssl_err.c||ssl/ssl_err.c",
          "ssl/statem/extensions.c||ssl/statem/extensions.c",
          "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c",
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c"
          ],
          "candidate": [
            "ssl/statem/extensions.c||ssl/statem/extensions.c",
            "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c"
          ]
        }
      },
      "candidate_diff": {
        "include/openssl/ssl.h||include/openssl/ssl.h": [
          "File: include/openssl/ssl.h -> include/openssl/ssl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2308: # define SSL_F_TLS_CONSTRUCT_SERVER_SESSION_TICKET        460",
          "2309: # define SSL_F_TLS_CONSTRUCT_SERVER_STATUS_REQUEST        461",
          "2310: # define SSL_F_TLS_CONSTRUCT_SERVER_USE_SRTP              462",
          "2311: # define SSL_F_TLS_GET_MESSAGE_BODY                       351",
          "2312: # define SSL_F_TLS_GET_MESSAGE_HEADER                     387",
          "2313: # define SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT               449",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2311: # define SSL_F_TLS_EXT_FINAL_RENEGOTIATE                  483",
          "",
          "---------------"
        ],
        "ssl/ssl_err.c||ssl/ssl_err.c": [
          "File: ssl/ssl_err.c -> ssl/ssl_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "338:      \"tls_construct_server_status_request\"},",
          "339:     {ERR_FUNC(SSL_F_TLS_CONSTRUCT_SERVER_USE_SRTP),",
          "340:      \"tls_construct_server_use_srtp\"},",
          "341:     {ERR_FUNC(SSL_F_TLS_GET_MESSAGE_BODY), \"tls_get_message_body\"},",
          "342:     {ERR_FUNC(SSL_F_TLS_GET_MESSAGE_HEADER), \"tls_get_message_header\"},",
          "343:     {ERR_FUNC(SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT),",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "341:     {ERR_FUNC(SSL_F_TLS_EXT_FINAL_RENEGOTIATE), \"tls_ext_final_renegotiate\"},",
          "",
          "---------------"
        ],
        "ssl/statem/extensions.c||ssl/statem/extensions.c": [
          "File: ssl/statem/extensions.c -> ssl/statem/extensions.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: #include \"../ssl_locl.h\"",
          "12: #include \"statem_locl.h\"",
          "14: typedef struct {",
          "16:     unsigned int type;",
          "21:     int (*init_ext)(SSL *s, unsigned int context);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: static int tls_ext_final_renegotiate(SSL *s, unsigned int context, int sent,",
          "15:                                      int *al);",
          "16: static int tls_ext_init_server_name(SSL *s, unsigned int context);",
          "17: static int tls_ext_final_server_name(SSL *s, unsigned int context, int sent,",
          "18:                                      int *al);",
          "19: static int tls_ext_init_status_request(SSL *s, unsigned int context);",
          "20: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "21: static int tls_ext_init_npn(SSL *s, unsigned int context);",
          "22: #endif",
          "23: static int tls_ext_init_alpn(SSL *s, unsigned int context);",
          "24: static int tls_ext_init_sig_algs(SSL *s, unsigned int context);",
          "25: #ifndef OPENSSL_NO_SRP",
          "26: static int tls_ext_init_srp(SSL *s, unsigned int context);",
          "27: #endif",
          "28: static int tls_ext_init_etm(SSL *s, unsigned int context);",
          "29: #ifndef OPENSSL_NO_SRTP",
          "30: static int tls_ext_init_srtp(SSL *s, unsigned int context);",
          "31: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "29:     int (*construct_client_ext)(SSL *s, WPACKET *pkt, int *al);",
          "35:     unsigned int context;",
          "36: } EXTENSION_DEFINITION;",
          "",
          "[Removed Lines]",
          "34:     int (*finalise_ext)(SSL *s, unsigned int context);",
          "",
          "[Added Lines]",
          "54:     int (*finalise_ext)(SSL *s, unsigned int context, int sent, int *al);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "48:         tls_parse_server_renegotiate,",
          "49:         tls_construct_server_renegotiate,",
          "50:         tls_construct_client_renegotiate,",
          "52:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_SSL3_ALLOWED",
          "53:         | EXT_TLS1_2_AND_BELOW_ONLY",
          "54:     },",
          "55:     {",
          "56:         TLSEXT_TYPE_server_name,",
          "58:         tls_parse_client_server_name,",
          "59:         tls_parse_server_server_name,",
          "60:         tls_construct_server_server_name,",
          "61:         tls_construct_client_server_name,",
          "63:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO",
          "64:         | EXT_TLS1_3_ENCRYPTED_EXTENSIONS",
          "65:     },",
          "66: #ifndef OPENSSL_NO_SRP",
          "67:     {",
          "68:         TLSEXT_TYPE_srp,",
          "70:         tls_parse_client_srp,",
          "71:         NULL,",
          "72:         NULL,",
          "73:         tls_construct_client_srp,",
          "74:         NULL,",
          "76:     },",
          "77: #endif",
          "78: #ifndef OPENSSL_NO_EC",
          "",
          "[Removed Lines]",
          "51:         NULL,",
          "57:         NULL,",
          "62:         NULL,",
          "69:         NULL,",
          "75:         EXT_CLIENT_HELLO | EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "",
          "[Added Lines]",
          "71:         tls_ext_final_renegotiate,",
          "77:         tls_ext_init_server_name,",
          "82:         tls_ext_final_server_name,",
          "89:         tls_ext_init_srp,",
          "95:         EXT_CLIENT_HELLO | EXT_TLS1_2_AND_BELOW_ONLY",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "109:     },",
          "110:     {",
          "111:         TLSEXT_TYPE_signature_algorithms,",
          "113:         tls_parse_client_sig_algs,",
          "114:         NULL,",
          "115:         NULL,",
          "",
          "[Removed Lines]",
          "112:         NULL,",
          "",
          "[Added Lines]",
          "132:         tls_ext_init_sig_algs,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120: #ifndef OPENSSL_NO_OCSP",
          "121:     {",
          "122:         TLSEXT_TYPE_status_request,",
          "124:         tls_parse_client_status_request,",
          "125:         tls_parse_server_status_request,",
          "126:         tls_construct_server_status_request,",
          "",
          "[Removed Lines]",
          "123:         NULL,",
          "",
          "[Added Lines]",
          "143:         tls_ext_init_status_request,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "133: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "134:     {",
          "135:         TLSEXT_TYPE_next_proto_neg,",
          "137:         tls_parse_client_npn,",
          "138:         tls_parse_server_npn,",
          "139:         tls_construct_server_next_proto_neg,",
          "",
          "[Removed Lines]",
          "136:         NULL,",
          "",
          "[Added Lines]",
          "156:         tls_ext_init_npn,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "144: #endif",
          "145:     {",
          "146:         TLSEXT_TYPE_application_layer_protocol_negotiation,",
          "148:         tls_parse_client_alpn,",
          "149:         tls_parse_server_alpn,",
          "150:         tls_construct_server_alpn,",
          "",
          "[Removed Lines]",
          "147:         NULL,",
          "",
          "[Added Lines]",
          "167:         tls_ext_init_alpn,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "156: #ifndef OPENSSL_NO_SRTP",
          "157:     {",
          "158:         TLSEXT_TYPE_use_srtp,",
          "160:         tls_parse_client_use_srtp,",
          "161:         tls_parse_server_use_srtp,",
          "162:         tls_construct_server_use_srtp,",
          "",
          "[Removed Lines]",
          "159:         NULL,",
          "",
          "[Added Lines]",
          "179:         tls_ext_init_srtp,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "168: #endif",
          "169:     {",
          "170:         TLSEXT_TYPE_encrypt_then_mac,",
          "172:         tls_parse_client_etm,",
          "173:         tls_parse_server_etm,",
          "174:         tls_construct_server_etm,",
          "",
          "[Removed Lines]",
          "171:         NULL,",
          "",
          "[Added Lines]",
          "191:         tls_ext_init_etm,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "329:     return 0;",
          "330: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352: static int extension_is_relevant(SSL *s, unsigned int extctx,",
          "353:                                  unsigned int thisctx)",
          "354: {",
          "355:     if ((SSL_IS_DTLS(s)",
          "356:                 && (extctx & EXT_TLS_IMPLEMENTATION_ONLY) != 0)",
          "357:             || (s->version == SSL3_VERSION",
          "358:                     && (extctx & EXT_SSL3_ALLOWED) == 0)",
          "359:             || (SSL_IS_TLS13(s)",
          "360:                 && (extctx & EXT_TLS1_2_AND_BELOW_ONLY) != 0)",
          "361:             || (!SSL_IS_TLS13(s) && (extctx & EXT_TLS1_3_ONLY) != 0))",
          "362:         return 0;",
          "364:     return 1;",
          "365: }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "414:     for (i = 0; i < OSSL_NELEM(ext_defs); i++) {",
          "415:         if(ext_defs[i].init_ext != NULL && (ext_defs[i].context & context) != 0",
          "416:                 && !ext_defs[i].init_ext(s, context)) {",
          "418:             goto err;",
          "419:         }",
          "420:     }",
          "424:     return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451:                 && extension_is_relevant(s, ext_defs[i].context, context)",
          "462:     if ((context & (EXT_TLS1_2_SERVER_HELLO | EXT_TLS1_3_SERVER_HELLO)) != 0)",
          "463:         custom_ext_init(&s->cert->srv_ext);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "429: }",
          "438: {",
          "439:     size_t loop;",
          "",
          "[Removed Lines]",
          "436: int tls_parse_all_extensions(SSL *s, int context, RAW_EXTENSION *exts,",
          "437:                              size_t numexts, int *al)",
          "",
          "[Added Lines]",
          "481: static int tls_parse_extension_list(SSL *s, int context, RAW_EXTENSION *exts,",
          "482:                                     size_t numexts, int *al)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "461:                                : extdef->parse_server_ext;",
          "472:                 continue;",
          "473:         }",
          "",
          "[Removed Lines]",
          "464:             if ((SSL_IS_DTLS(s)",
          "465:                         && (extdef->context & EXT_TLS_IMPLEMENTATION_ONLY) != 0)",
          "466:                     || (s->version == SSL3_VERSION",
          "467:                             && (extdef->context & EXT_SSL3_ALLOWED) == 0)",
          "468:                     || (SSL_IS_TLS13(s)",
          "469:                         && (extdef->context & EXT_TLS1_2_AND_BELOW_ONLY) != 0)",
          "470:                     || (!SSL_IS_TLS13(s)",
          "471:                         && (extdef->context & EXT_TLS1_3_ONLY) != 0))",
          "",
          "[Added Lines]",
          "509:             if (!extension_is_relevant(s, extdef->context, context))",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "497:             return 0;",
          "498:     }",
          "504:     for (loop = 0; loop < OSSL_NELEM(ext_defs); loop++) {",
          "505:         if(ext_defs[loop].finalise_ext != NULL",
          "509:             return 0;",
          "510:         }",
          "511:     }",
          "",
          "[Removed Lines]",
          "506:                 && (ext_defs[loop].context & context) != 0",
          "507:                 && !ext_defs[loop].finalise_ext(s, context)) {",
          "",
          "[Added Lines]",
          "538:     return 1;",
          "539: }",
          "548: int tls_parse_all_extensions(SSL *s, int context, RAW_EXTENSION *exts,",
          "549:                              size_t numexts, int *al)",
          "550: {",
          "551:     size_t loop;",
          "553:     if (!tls_parse_extension_list(s, context, exts, numexts, al))",
          "554:         return 0;",
          "562:                 && (ext_defs[loop].context & context) != 0) {",
          "563:             size_t curr;",
          "569:             for (curr = 0; curr < numexts",
          "570:                            && exts[curr].type < ext_defs[loop].type; curr++)",
          "571:                 continue;",
          "573:             if (!ext_defs[loop].finalise_ext(s, context,",
          "574:                     (curr < numexts && exts[curr].type == ext_defs[loop].type),",
          "575:                     al))",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "527:     if (ext == NULL)",
          "528:         return 1;",
          "531: }",
          "533: int tls_construct_extensions(SSL *s, WPACKET *pkt, unsigned int context,",
          "",
          "[Removed Lines]",
          "530:     return tls_parse_all_extensions(s, context, ext, 1, al);",
          "",
          "[Added Lines]",
          "597:     return tls_parse_extension_list(s, context, ext, 1, al);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "625:     return 1;",
          "626: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "695: static int tls_ext_final_renegotiate(SSL *s, unsigned int context, int sent,",
          "696:                                      int *al)",
          "697: {",
          "698:     if (!s->server)",
          "699:         return 1;",
          "702:     if (s->renegotiate",
          "703:             && !(s->options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION)",
          "704:             && !sent) {",
          "706:         SSLerr(SSL_F_TLS_EXT_FINAL_RENEGOTIATE,",
          "707:                SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED);",
          "708:         return 0;",
          "709:     }",
          "711:     return 1;",
          "712: }",
          "714: static int tls_ext_init_server_name(SSL *s, unsigned int context)",
          "715: {",
          "716:     if (s->server)",
          "717:         s->servername_done = 0;",
          "719:     return 1;",
          "720: }",
          "723: static int tls_ext_final_server_name(SSL *s, unsigned int context, int sent,",
          "724:                                      int *al)",
          "725: {",
          "726:     int ret = SSL_TLSEXT_ERR_NOACK;",
          "727:     int altmp = SSL_AD_UNRECOGNIZED_NAME;",
          "729:     if (!s->server)",
          "730:         return 1;",
          "732:     if (s->ctx != NULL && s->ctx->tlsext_servername_callback != 0)",
          "733:         ret = s->ctx->tlsext_servername_callback(s, &altmp,",
          "734:                                                  s->ctx->tlsext_servername_arg);",
          "735:     else if (s->initial_ctx != NULL",
          "736:              && s->initial_ctx->tlsext_servername_callback != 0)",
          "737:         ret = s->initial_ctx->tlsext_servername_callback(s, &altmp,",
          "738:                                        s->initial_ctx->tlsext_servername_arg);",
          "740:     switch (ret) {",
          "741:     case SSL_TLSEXT_ERR_ALERT_FATAL:",
          "743:         return 0;",
          "745:     case SSL_TLSEXT_ERR_ALERT_WARNING:",
          "747:         return 1;",
          "749:     case SSL_TLSEXT_ERR_NOACK:",
          "750:         s->servername_done = 0;",
          "751:         return 1;",
          "753:     default:",
          "754:         return 1;",
          "755:     }",
          "756: }",
          "758: static int tls_ext_init_status_request(SSL *s, unsigned int context)",
          "759: {",
          "760:     if (s->server)",
          "761:         s->tlsext_status_type = -1;",
          "763:     return 1;",
          "764: }",
          "766: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "767: static int tls_ext_init_npn(SSL *s, unsigned int context)",
          "768: {",
          "769:     if (s->server)",
          "770:         s->s3->next_proto_neg_seen = 0;",
          "772:     return 1;",
          "773: }",
          "774: #endif",
          "776: static int tls_ext_init_alpn(SSL *s, unsigned int context)",
          "777: {",
          "778:     if (s->server) {",
          "779:         OPENSSL_free(s->s3->alpn_selected);",
          "780:         s->s3->alpn_selected = NULL;",
          "781:         s->s3->alpn_selected_len = 0;",
          "782:         OPENSSL_free(s->s3->alpn_proposed);",
          "783:         s->s3->alpn_proposed = NULL;",
          "784:         s->s3->alpn_proposed_len = 0;",
          "785:     }",
          "787:     return 1;",
          "788: }",
          "790: static int tls_ext_init_sig_algs(SSL *s, unsigned int context)",
          "791: {",
          "793:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
          "794:     s->s3->tmp.peer_sigalgs = NULL;",
          "796:     return 1;",
          "797: }",
          "799: #ifndef OPENSSL_NO_SRP",
          "800: static int tls_ext_init_srp(SSL *s, unsigned int context)",
          "801: {",
          "802:     OPENSSL_free(s->srp_ctx.login);",
          "803:     s->srp_ctx.login = NULL;",
          "805:     return 1;",
          "806: }",
          "807: #endif",
          "809: static int tls_ext_init_etm(SSL *s, unsigned int context)",
          "810: {",
          "811:     if (s->server)",
          "812:         s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "814:     return 1;",
          "815: }",
          "817: #ifndef OPENSSL_NO_SRTP",
          "818: static int tls_ext_init_srtp(SSL *s, unsigned int context)",
          "819: {",
          "820:     if (s->server)",
          "821:         s->srtp_profile = NULL;",
          "823:     return 1;",
          "824: }",
          "825: #endif",
          "",
          "---------------"
        ],
        "ssl/statem/extensions_srvr.c||ssl/statem/extensions_srvr.c": [
          "File: ssl/statem/extensions_srvr.c -> ssl/statem/extensions_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "648:     return 1;",
          "649: }",
          "",
          "[Removed Lines]",
          "651: #ifndef OPENSSL_NO_EC",
          "665: static void ssl_check_for_safari(SSL *s, const CLIENTHELLO_MSG *hello)",
          "666: {",
          "667:     unsigned int type;",
          "668:     PACKET sni, tmppkt;",
          "669:     size_t ext_len;",
          "671:     static const unsigned char kSafariExtensionsBlock[] = {",
          "692:     };",
          "695:     static const size_t kSafariCommonExtensionsLength = 18;",
          "697:     tmppkt = hello->extensions;",
          "699:     if (!PACKET_forward(&tmppkt, 2)",
          "700:         || !PACKET_get_net_2(&tmppkt, &type)",
          "701:         || !PACKET_get_length_prefixed_2(&tmppkt, &sni)) {",
          "702:         return;",
          "703:     }",
          "705:     if (type != TLSEXT_TYPE_server_name)",
          "706:         return;",
          "708:     ext_len = TLS1_get_client_version(s) >= TLS1_2_VERSION ?",
          "709:         sizeof(kSafariExtensionsBlock) : kSafariCommonExtensionsLength;",
          "711:     s->s3->is_probably_safari = PACKET_equal(&tmppkt, kSafariExtensionsBlock,",
          "712:                                              ext_len);",
          "713: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "725: int tls_scan_clienthello_tlsext(SSL *s, CLIENTHELLO_MSG *hello, int *al)",
          "726: {",
          "",
          "[Removed Lines]",
          "728:     s->servername_done = 0;",
          "729:     s->tlsext_status_type = -1;",
          "730: #ifndef OPENSSL_NO_NEXTPROTONEG",
          "731:     s->s3->next_proto_neg_seen = 0;",
          "732: #endif",
          "734:     OPENSSL_free(s->s3->alpn_selected);",
          "735:     s->s3->alpn_selected = NULL;",
          "736:     s->s3->alpn_selected_len = 0;",
          "737:     OPENSSL_free(s->s3->alpn_proposed);",
          "738:     s->s3->alpn_proposed = NULL;",
          "739:     s->s3->alpn_proposed_len = 0;",
          "741: #ifndef OPENSSL_NO_EC",
          "742:     if (s->options & SSL_OP_SAFARI_ECDHE_ECDSA_BUG)",
          "743:         ssl_check_for_safari(s, hello);",
          "747:     OPENSSL_free(s->s3->tmp.peer_sigalgs);",
          "748:     s->s3->tmp.peer_sigalgs = NULL;",
          "749:     s->s3->flags &= ~TLS1_FLAGS_ENCRYPT_THEN_MAC;",
          "751: #ifndef OPENSSL_NO_SRP",
          "752:     OPENSSL_free(s->srp_ctx.login);",
          "753:     s->srp_ctx.login = NULL;",
          "754: #endif",
          "756:     s->srtp_profile = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "764:         return 0;",
          "765:     }",
          "779:     return tls_parse_all_extensions(s, EXT_CLIENT_HELLO, hello->pre_proc_exts,",
          "780:                                     hello->num_extensions, al);",
          "781: }",
          "",
          "[Removed Lines]",
          "768:     if (s->renegotiate",
          "769:             && !(s->options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION)",
          "770:             && tls_get_extension_by_type(hello->pre_proc_exts,",
          "771:                                          hello->num_extensions,",
          "772:                                          TLSEXT_TYPE_renegotiate) == NULL) {",
          "774:         SSLerr(SSL_F_TLS_SCAN_CLIENTHELLO_TLSEXT,",
          "775:                SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED);",
          "776:         return 0;",
          "777:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1062:     return 1;",
          "1063: }",
          "",
          "[Removed Lines]",
          "1069: static int tls_check_clienthello_tlsext(SSL *s)",
          "1070: {",
          "1071:     int ret = SSL_TLSEXT_ERR_NOACK;",
          "1072:     int al = SSL_AD_UNRECOGNIZED_NAME;",
          "1074:     if (s->ctx != NULL && s->ctx->tlsext_servername_callback != 0)",
          "1075:         ret = s->ctx->tlsext_servername_callback(s, &al,",
          "1076:                                                  s->ctx->tlsext_servername_arg);",
          "1077:     else if (s->initial_ctx != NULL",
          "1078:              && s->initial_ctx->tlsext_servername_callback != 0)",
          "1079:         ret = s->initial_ctx->tlsext_servername_callback(s, &al,",
          "1080:                                        s->initial_ctx->tlsext_servername_arg);",
          "1082:     switch (ret) {",
          "1083:     case SSL_TLSEXT_ERR_ALERT_FATAL:",
          "1084:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1085:         return 0;",
          "1087:     case SSL_TLSEXT_ERR_ALERT_WARNING:",
          "1088:         ssl3_send_alert(s, SSL3_AL_WARNING, al);",
          "1089:         return 1;",
          "1091:     case SSL_TLSEXT_ERR_NOACK:",
          "1092:         s->servername_done = 0;",
          "1093:         return 1;",
          "1095:     default:",
          "1096:         return 1;",
          "1097:     }",
          "1098: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1105: {",
          "1106:     int al = -1;",
          "1110:     if (tls_scan_clienthello_tlsext(s, hello, &al) <= 0) {",
          "1111:         ssl3_send_alert(s, SSL3_AL_FATAL, al);",
          "1112:         return 0;",
          "1113:     }",
          "1118:     }",
          "1121: }",
          "1123: MSG_PROCESS_RETURN tls_process_client_hello(SSL *s, PACKET *pkt)",
          "1124: {",
          "1125:     int i, al = SSL_AD_INTERNAL_ERROR;",
          "",
          "[Removed Lines]",
          "1108:     custom_ext_init(&s->cert->srv_ext);",
          "1115:     if (!tls_check_clienthello_tlsext(s)) {",
          "1116:         SSLerr(SSL_F_TLS_PARSE_CLIENTHELLO_TLSEXT, SSL_R_CLIENTHELLO_TLSEXT);",
          "1117:         return 0;",
          "1120:     return 1;",
          "",
          "[Added Lines]",
          "1080:     return 1;",
          "1081: }",
          "1083: #ifndef OPENSSL_NO_EC",
          "1097: static void ssl_check_for_safari(SSL *s, const CLIENTHELLO_MSG *hello)",
          "1098: {",
          "1099:     unsigned int type;",
          "1100:     PACKET sni, tmppkt;",
          "1101:     size_t ext_len;",
          "1103:     static const unsigned char kSafariExtensionsBlock[] = {",
          "1124:     };",
          "1127:     static const size_t kSafariCommonExtensionsLength = 18;",
          "1129:     tmppkt = hello->extensions;",
          "1131:     if (!PACKET_forward(&tmppkt, 2)",
          "1132:         || !PACKET_get_net_2(&tmppkt, &type)",
          "1133:         || !PACKET_get_length_prefixed_2(&tmppkt, &sni)) {",
          "1134:         return;",
          "1137:     if (type != TLSEXT_TYPE_server_name)",
          "1138:         return;",
          "1140:     ext_len = TLS1_get_client_version(s) >= TLS1_2_VERSION ?",
          "1141:         sizeof(kSafariExtensionsBlock) : kSafariCommonExtensionsLength;",
          "1143:     s->s3->is_probably_safari = PACKET_equal(&tmppkt, kSafariExtensionsBlock,",
          "1144:                                              ext_len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1494:         goto f_err;",
          "1495:     }",
          "1498:     if (!tls_parse_clienthello_tlsext(s, &clienthello)) {",
          "1499:         SSLerr(SSL_F_TLS_PROCESS_CLIENT_HELLO, SSL_R_PARSE_TLSEXT);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1522: #ifndef OPENSSL_NO_EC",
          "1523:     if (s->options & SSL_OP_SAFARI_ECDHE_ECDSA_BUG)",
          "1524:         ssl_check_for_safari(s, &clienthello);",
          "",
          "---------------"
        ]
      }
    }
  ]
}