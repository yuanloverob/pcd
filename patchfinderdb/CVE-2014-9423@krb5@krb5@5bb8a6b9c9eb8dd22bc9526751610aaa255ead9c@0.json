{
  "cve_id": "CVE-2014-9423",
  "cve_desc": "The svcauth_gss_accept_sec_context function in lib/rpc/svc_auth_gss.c in MIT Kerberos 5 (aka krb5) 1.11.x through 1.11.5, 1.12.x through 1.12.2, and 1.13.x before 1.13.1 transmits uninitialized interposer data to clients, which allows remote attackers to obtain sensitive information from process heap memory by sniffing the network for data in a handle field.",
  "repo": "krb5/krb5",
  "patch_hash": "5bb8a6b9c9eb8dd22bc9526751610aaa255ead9c",
  "patch_info": {
    "commit_hash": "5bb8a6b9c9eb8dd22bc9526751610aaa255ead9c",
    "repo": "krb5/krb5",
    "commit_url": "https://github.com/krb5/krb5/commit/5bb8a6b9c9eb8dd22bc9526751610aaa255ead9c",
    "files": [
      "src/lib/gssapi/mechglue/mglueP.h",
      "src/lib/rpc/svc_auth_gss.c"
    ],
    "message": "Fix gssrpc data leakage [CVE-2014-9423]\n\n[MITKRB5-SA-2015-001] In svcauth_gss_accept_sec_context(), do not copy\nbytes from the union context into the handle field we send to the\nclient.  We do not use this handle field, so just supply a fixed\nstring of \"xxxx\".\n\nIn gss_union_ctx_id_struct, remove the unused \"interposer\" field which\nwas causing part of the union context to remain uninitialized.\n\nticket: 8058 (new)\ntarget_version: 1.13.1\ntags: pullup",
    "before_after_code_files": [
      "src/lib/gssapi/mechglue/mglueP.h||src/lib/gssapi/mechglue/mglueP.h",
      "src/lib/rpc/svc_auth_gss.c||src/lib/rpc/svc_auth_gss.c"
    ]
  },
  "patch_diff": {
    "src/lib/gssapi/mechglue/mglueP.h||src/lib/gssapi/mechglue/mglueP.h": [
      "File: src/lib/gssapi/mechglue/mglueP.h -> src/lib/gssapi/mechglue/mglueP.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: typedef struct gss_union_ctx_id_struct {",
      "27:  struct gss_union_ctx_id_struct *loopback;",
      "29:  gss_OID   mech_type;",
      "30:  gss_ctx_id_t  internal_ctx_id;",
      "31: } gss_union_ctx_id_desc, *gss_union_ctx_id_t;",
      "",
      "[Removed Lines]",
      "28:  struct gss_union_ctx_id_struct *interposer;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/lib/rpc/svc_auth_gss.c||src/lib/rpc/svc_auth_gss.c": [
      "File: src/lib/rpc/svc_auth_gss.c -> src/lib/rpc/svc_auth_gss.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "66: extern SVCAUTH svc_auth_none;",
      "78: static auth_gssapi_log_badauth_func log_badauth = NULL;",
      "79: static caddr_t log_badauth_data = NULL;",
      "80: static auth_gssapi_log_badauth2_func log_badauth2 = NULL;",
      "",
      "[Removed Lines]",
      "72: typedef struct gss_union_ctx_id_t {",
      "73:   gss_OID     mech_type;",
      "74:   gss_ctx_id_t    internal_ctx_id;",
      "75: } gss_union_ctx_id_desc, *gss_union_ctx_id_t;",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "239:   gd->ctx = GSS_C_NO_CONTEXT;",
      "240:   goto errout;",
      "241:  }",
      "254:  gr->gr_win = sizeof(gd->seqmask) * 8;",
      "",
      "[Removed Lines]",
      "246:  if ((gr->gr_ctx.value = mem_alloc(sizeof(gss_union_ctx_id_desc))) == NULL) {",
      "247:   fprintf(stderr, \"svcauth_gss_accept_context: out of memory\\n\");",
      "248:   goto errout;",
      "249:  }",
      "250:  memcpy(gr->gr_ctx.value, gd->ctx, sizeof(gss_union_ctx_id_desc));",
      "251:  gr->gr_ctx.length = sizeof(gss_union_ctx_id_desc);",
      "",
      "[Added Lines]",
      "232:  gr->gr_ctx.value = \"xxxx\";",
      "233:  gr->gr_ctx.length = 4;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "521:   if (!svcauth_gss_nextverf(rqst, htonl(gr.gr_win))) {",
      "522:    gss_release_buffer(&min_stat, &gr.gr_token);",
      "525:    ret_freegc (AUTH_FAILED);",
      "526:   }",
      "",
      "[Removed Lines]",
      "523:    mem_free(gr.gr_ctx.value,",
      "524:      sizeof(gss_union_ctx_id_desc));",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "532:   gss_release_buffer(&min_stat, &gr.gr_token);",
      "533:   gss_release_buffer(&min_stat, &gd->checksum);",
      "535:   if (!call_stat)",
      "536:    ret_freegc (AUTH_FAILED);",
      "",
      "[Removed Lines]",
      "534:   mem_free(gr.gr_ctx.value, sizeof(gss_union_ctx_id_desc));",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "34fbf2dbecbaac417625aad46d20e97ddc40c164",
      "candidate_info": {
        "commit_hash": "34fbf2dbecbaac417625aad46d20e97ddc40c164",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/34fbf2dbecbaac417625aad46d20e97ddc40c164",
        "files": [
          "src/lib/gssapi/mechglue/mglueP.h",
          "src/lib/rpc/svc_auth_gss.c"
        ],
        "message": "Fix gssrpc data leakage [CVE-2014-9423]\n\n[MITKRB5-SA-2015-001] In svcauth_gss_accept_sec_context(), do not copy\nbytes from the union context into the handle field we send to the\nclient.  We do not use this handle field, so just supply a fixed\nstring of \"xxxx\".\n\nIn gss_union_ctx_id_struct, remove the unused \"interposer\" field which\nwas causing part of the union context to remain uninitialized.\n\n(cherry picked from commit 5bb8a6b9c9eb8dd22bc9526751610aaa255ead9c)\n\nticket: 8076 (new)\nversion_fixed: 1.11.6\nstatus: resolved",
        "before_after_code_files": [
          "src/lib/gssapi/mechglue/mglueP.h||src/lib/gssapi/mechglue/mglueP.h",
          "src/lib/rpc/svc_auth_gss.c||src/lib/rpc/svc_auth_gss.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/gssapi/mechglue/mglueP.h||src/lib/gssapi/mechglue/mglueP.h",
            "src/lib/rpc/svc_auth_gss.c||src/lib/rpc/svc_auth_gss.c"
          ],
          "candidate": [
            "src/lib/gssapi/mechglue/mglueP.h||src/lib/gssapi/mechglue/mglueP.h",
            "src/lib/rpc/svc_auth_gss.c||src/lib/rpc/svc_auth_gss.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/gssapi/mechglue/mglueP.h||src/lib/gssapi/mechglue/mglueP.h": [
          "File: src/lib/gssapi/mechglue/mglueP.h -> src/lib/gssapi/mechglue/mglueP.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: typedef struct gss_union_ctx_id_struct {",
          "27:  struct gss_union_ctx_id_struct *loopback;",
          "29:  gss_OID   mech_type;",
          "30:  gss_ctx_id_t  internal_ctx_id;",
          "31: } gss_union_ctx_id_desc, *gss_union_ctx_id_t;",
          "",
          "[Removed Lines]",
          "28:  struct gss_union_ctx_id_struct *interposer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/rpc/svc_auth_gss.c||src/lib/rpc/svc_auth_gss.c": [
          "File: src/lib/rpc/svc_auth_gss.c -> src/lib/rpc/svc_auth_gss.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: extern SVCAUTH svc_auth_none;",
          "81: static auth_gssapi_log_badauth_func log_badauth = NULL;",
          "82: static caddr_t log_badauth_data = NULL;",
          "83: static auth_gssapi_log_badverf_func log_badverf = NULL;",
          "",
          "[Removed Lines]",
          "75: typedef struct gss_union_ctx_id_t {",
          "76:   gss_OID     mech_type;",
          "77:   gss_ctx_id_t    internal_ctx_id;",
          "78: } gss_union_ctx_id_desc, *gss_union_ctx_id_t;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "235:   gd->ctx = GSS_C_NO_CONTEXT;",
          "236:   goto errout;",
          "237:  }",
          "250:  gr->gr_win = sizeof(gd->seqmask) * 8;",
          "",
          "[Removed Lines]",
          "242:  if ((gr->gr_ctx.value = mem_alloc(sizeof(gss_union_ctx_id_desc))) == NULL) {",
          "243:   fprintf(stderr, \"svcauth_gss_accept_context: out of memory\\n\");",
          "244:   goto errout;",
          "245:  }",
          "246:  memcpy(gr->gr_ctx.value, gd->ctx, sizeof(gss_union_ctx_id_desc));",
          "247:  gr->gr_ctx.length = sizeof(gss_union_ctx_id_desc);",
          "",
          "[Added Lines]",
          "228:  gr->gr_ctx.value = \"xxxx\";",
          "229:  gr->gr_ctx.length = 4;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "517:   if (!svcauth_gss_nextverf(rqst, htonl(gr.gr_win))) {",
          "518:    gss_release_buffer(&min_stat, &gr.gr_token);",
          "521:    ret_freegc (AUTH_FAILED);",
          "522:   }",
          "",
          "[Removed Lines]",
          "519:    mem_free(gr.gr_ctx.value,",
          "520:      sizeof(gss_union_ctx_id_desc));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "528:   gss_release_buffer(&min_stat, &gr.gr_token);",
          "529:   gss_release_buffer(&min_stat, &gd->checksum);",
          "531:   if (!call_stat)",
          "532:    ret_freegc (AUTH_FAILED);",
          "",
          "[Removed Lines]",
          "530:   mem_free(gr.gr_ctx.value, sizeof(gss_union_ctx_id_desc));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4b6bb18176d5526b2dda7a3bdc982faf2aafd2aa",
      "candidate_info": {
        "commit_hash": "4b6bb18176d5526b2dda7a3bdc982faf2aafd2aa",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/4b6bb18176d5526b2dda7a3bdc982faf2aafd2aa",
        "files": [
          "src/lib/gssapi/mechglue/mglueP.h",
          "src/lib/rpc/svc_auth_gss.c"
        ],
        "message": "Fix gssrpc data leakage [CVE-2014-9423]\n\n[MITKRB5-SA-2015-001] In svcauth_gss_accept_sec_context(), do not copy\nbytes from the union context into the handle field we send to the\nclient.  We do not use this handle field, so just supply a fixed\nstring of \"xxxx\".\n\nIn gss_union_ctx_id_struct, remove the unused \"interposer\" field which\nwas causing part of the union context to remain uninitialized.\n\n(cherry picked from commit 5bb8a6b9c9eb8dd22bc9526751610aaa255ead9c)\n\nticket: 8070 (new)\nversion_fixed: 1.12.3\nstatus: resolved",
        "before_after_code_files": [
          "src/lib/gssapi/mechglue/mglueP.h||src/lib/gssapi/mechglue/mglueP.h",
          "src/lib/rpc/svc_auth_gss.c||src/lib/rpc/svc_auth_gss.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/gssapi/mechglue/mglueP.h||src/lib/gssapi/mechglue/mglueP.h",
            "src/lib/rpc/svc_auth_gss.c||src/lib/rpc/svc_auth_gss.c"
          ],
          "candidate": [
            "src/lib/gssapi/mechglue/mglueP.h||src/lib/gssapi/mechglue/mglueP.h",
            "src/lib/rpc/svc_auth_gss.c||src/lib/rpc/svc_auth_gss.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/gssapi/mechglue/mglueP.h||src/lib/gssapi/mechglue/mglueP.h": [
          "File: src/lib/gssapi/mechglue/mglueP.h -> src/lib/gssapi/mechglue/mglueP.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: typedef struct gss_union_ctx_id_struct {",
          "27:  struct gss_union_ctx_id_struct *loopback;",
          "29:  gss_OID   mech_type;",
          "30:  gss_ctx_id_t  internal_ctx_id;",
          "31: } gss_union_ctx_id_desc, *gss_union_ctx_id_t;",
          "",
          "[Removed Lines]",
          "28:  struct gss_union_ctx_id_struct *interposer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/rpc/svc_auth_gss.c||src/lib/rpc/svc_auth_gss.c": [
          "File: src/lib/rpc/svc_auth_gss.c -> src/lib/rpc/svc_auth_gss.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "69: extern SVCAUTH svc_auth_none;",
          "81: static auth_gssapi_log_badauth_func log_badauth = NULL;",
          "82: static caddr_t log_badauth_data = NULL;",
          "83: static auth_gssapi_log_badauth2_func log_badauth2 = NULL;",
          "",
          "[Removed Lines]",
          "75: typedef struct gss_union_ctx_id_t {",
          "76:   gss_OID     mech_type;",
          "77:   gss_ctx_id_t    internal_ctx_id;",
          "78: } gss_union_ctx_id_desc, *gss_union_ctx_id_t;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:   gd->ctx = GSS_C_NO_CONTEXT;",
          "243:   goto errout;",
          "244:  }",
          "257:  gr->gr_win = sizeof(gd->seqmask) * 8;",
          "",
          "[Removed Lines]",
          "249:  if ((gr->gr_ctx.value = mem_alloc(sizeof(gss_union_ctx_id_desc))) == NULL) {",
          "250:   fprintf(stderr, \"svcauth_gss_accept_context: out of memory\\n\");",
          "251:   goto errout;",
          "252:  }",
          "253:  memcpy(gr->gr_ctx.value, gd->ctx, sizeof(gss_union_ctx_id_desc));",
          "254:  gr->gr_ctx.length = sizeof(gss_union_ctx_id_desc);",
          "",
          "[Added Lines]",
          "235:  gr->gr_ctx.value = \"xxxx\";",
          "236:  gr->gr_ctx.length = 4;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "524:   if (!svcauth_gss_nextverf(rqst, htonl(gr.gr_win))) {",
          "525:    gss_release_buffer(&min_stat, &gr.gr_token);",
          "528:    ret_freegc (AUTH_FAILED);",
          "529:   }",
          "",
          "[Removed Lines]",
          "526:    mem_free(gr.gr_ctx.value,",
          "527:      sizeof(gss_union_ctx_id_desc));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "535:   gss_release_buffer(&min_stat, &gr.gr_token);",
          "536:   gss_release_buffer(&min_stat, &gd->checksum);",
          "538:   if (!call_stat)",
          "539:    ret_freegc (AUTH_FAILED);",
          "",
          "[Removed Lines]",
          "537:   mem_free(gr.gr_ctx.value, sizeof(gss_union_ctx_id_desc));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "23f9fc04f53b68a81fb46438f7d5948e7ac4ad2f",
      "candidate_info": {
        "commit_hash": "23f9fc04f53b68a81fb46438f7d5948e7ac4ad2f",
        "repo": "krb5/krb5",
        "commit_url": "https://github.com/krb5/krb5/commit/23f9fc04f53b68a81fb46438f7d5948e7ac4ad2f",
        "files": [
          "src/lib/gssapi/mechglue/mglueP.h",
          "src/lib/rpc/svc_auth_gss.c"
        ],
        "message": "Fix gssrpc data leakage [CVE-2014-9423]\n\n[MITKRB5-SA-2015-001] In svcauth_gss_accept_sec_context(), do not copy\nbytes from the union context into the handle field we send to the\nclient.  We do not use this handle field, so just supply a fixed\nstring of \"xxxx\".\n\nIn gss_union_ctx_id_struct, remove the unused \"interposer\" field which\nwas causing part of the union context to remain uninitialized.\n\n(cherry picked from commit 5bb8a6b9c9eb8dd22bc9526751610aaa255ead9c)\n\nticket: 8058\nversion_fixed: 1.13.1\nstatus: resolved",
        "before_after_code_files": [
          "src/lib/gssapi/mechglue/mglueP.h||src/lib/gssapi/mechglue/mglueP.h",
          "src/lib/rpc/svc_auth_gss.c||src/lib/rpc/svc_auth_gss.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/lib/gssapi/mechglue/mglueP.h||src/lib/gssapi/mechglue/mglueP.h",
            "src/lib/rpc/svc_auth_gss.c||src/lib/rpc/svc_auth_gss.c"
          ],
          "candidate": [
            "src/lib/gssapi/mechglue/mglueP.h||src/lib/gssapi/mechglue/mglueP.h",
            "src/lib/rpc/svc_auth_gss.c||src/lib/rpc/svc_auth_gss.c"
          ]
        }
      },
      "candidate_diff": {
        "src/lib/gssapi/mechglue/mglueP.h||src/lib/gssapi/mechglue/mglueP.h": [
          "File: src/lib/gssapi/mechglue/mglueP.h -> src/lib/gssapi/mechglue/mglueP.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: typedef struct gss_union_ctx_id_struct {",
          "27:  struct gss_union_ctx_id_struct *loopback;",
          "29:  gss_OID   mech_type;",
          "30:  gss_ctx_id_t  internal_ctx_id;",
          "31: } gss_union_ctx_id_desc, *gss_union_ctx_id_t;",
          "",
          "[Removed Lines]",
          "28:  struct gss_union_ctx_id_struct *interposer;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/lib/rpc/svc_auth_gss.c||src/lib/rpc/svc_auth_gss.c": [
          "File: src/lib/rpc/svc_auth_gss.c -> src/lib/rpc/svc_auth_gss.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66: extern SVCAUTH svc_auth_none;",
          "78: static auth_gssapi_log_badauth_func log_badauth = NULL;",
          "79: static caddr_t log_badauth_data = NULL;",
          "80: static auth_gssapi_log_badauth2_func log_badauth2 = NULL;",
          "",
          "[Removed Lines]",
          "72: typedef struct gss_union_ctx_id_t {",
          "73:   gss_OID     mech_type;",
          "74:   gss_ctx_id_t    internal_ctx_id;",
          "75: } gss_union_ctx_id_desc, *gss_union_ctx_id_t;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:   gd->ctx = GSS_C_NO_CONTEXT;",
          "240:   goto errout;",
          "241:  }",
          "254:  gr->gr_win = sizeof(gd->seqmask) * 8;",
          "",
          "[Removed Lines]",
          "246:  if ((gr->gr_ctx.value = mem_alloc(sizeof(gss_union_ctx_id_desc))) == NULL) {",
          "247:   fprintf(stderr, \"svcauth_gss_accept_context: out of memory\\n\");",
          "248:   goto errout;",
          "249:  }",
          "250:  memcpy(gr->gr_ctx.value, gd->ctx, sizeof(gss_union_ctx_id_desc));",
          "251:  gr->gr_ctx.length = sizeof(gss_union_ctx_id_desc);",
          "",
          "[Added Lines]",
          "232:  gr->gr_ctx.value = \"xxxx\";",
          "233:  gr->gr_ctx.length = 4;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "521:   if (!svcauth_gss_nextverf(rqst, htonl(gr.gr_win))) {",
          "522:    gss_release_buffer(&min_stat, &gr.gr_token);",
          "525:    ret_freegc (AUTH_FAILED);",
          "526:   }",
          "",
          "[Removed Lines]",
          "523:    mem_free(gr.gr_ctx.value,",
          "524:      sizeof(gss_union_ctx_id_desc));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "532:   gss_release_buffer(&min_stat, &gr.gr_token);",
          "533:   gss_release_buffer(&min_stat, &gd->checksum);",
          "535:   if (!call_stat)",
          "536:    ret_freegc (AUTH_FAILED);",
          "",
          "[Removed Lines]",
          "534:   mem_free(gr.gr_ctx.value, sizeof(gss_union_ctx_id_desc));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}