{
  "cve_id": "CVE-2016-4997",
  "cve_desc": "The compat IPT_SO_SET_REPLACE and IP6T_SO_SET_REPLACE setsockopt implementations in the netfilter subsystem in the Linux kernel before 4.6.3 allow local users to gain privileges or cause a denial of service (memory corruption) by leveraging in-container root access to provide a crafted offset value that triggers an unintended decrement.",
  "repo": "torvalds/linux",
  "patch_hash": "ce683e5f9d045e5d67d1312a42b359cb2ab2a13c",
  "patch_info": {
    "commit_hash": "ce683e5f9d045e5d67d1312a42b359cb2ab2a13c",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/ce683e5f9d045e5d67d1312a42b359cb2ab2a13c",
    "files": [
      "include/linux/netfilter/x_tables.h",
      "net/ipv4/netfilter/arp_tables.c",
      "net/ipv4/netfilter/ip_tables.c",
      "net/ipv6/netfilter/ip6_tables.c",
      "net/netfilter/x_tables.c"
    ],
    "message": "netfilter: x_tables: check for bogus target offset\n\nWe're currently asserting that targetoff + targetsize <= nextoff.\n\nExtend it to also check that targetoff is >= sizeof(xt_entry).\nSince this is generic code, add an argument pointing to the start of the\nmatch/target, we can then derive the base structure size from the delta.\n\nWe also need the e->elems pointer in a followup change to validate matches.\n\nSigned-off-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
    "before_after_code_files": [
      "include/linux/netfilter/x_tables.h||include/linux/netfilter/x_tables.h",
      "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c",
      "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c",
      "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c",
      "net/netfilter/x_tables.c||net/netfilter/x_tables.c"
    ]
  },
  "patch_diff": {
    "include/linux/netfilter/x_tables.h||include/linux/netfilter/x_tables.h": [
      "File: include/linux/netfilter/x_tables.h -> include/linux/netfilter/x_tables.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "242: int xt_register_matches(struct xt_match *match, unsigned int n);",
      "243: void xt_unregister_matches(struct xt_match *match, unsigned int n);",
      "246:       unsigned int target_offset,",
      "247:       unsigned int next_offset);",
      "",
      "[Removed Lines]",
      "245: int xt_check_entry_offsets(const void *base,",
      "",
      "[Added Lines]",
      "245: int xt_check_entry_offsets(const void *base, const char *elems,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "494:     unsigned int *size);",
      "495: int xt_compat_target_to_user(const struct xt_entry_target *t,",
      "496:         void __user **dstptr, unsigned int *size);",
      "498:       unsigned int target_offset,",
      "499:       unsigned int next_offset);",
      "",
      "[Removed Lines]",
      "497: int xt_compat_check_entry_offsets(const void *base,",
      "",
      "[Added Lines]",
      "497: int xt_compat_check_entry_offsets(const void *base, const char *elems,",
      "",
      "---------------"
    ],
    "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c": [
      "File: net/ipv4/netfilter/arp_tables.c -> net/ipv4/netfilter/arp_tables.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "592:  if (!arp_checkentry(&e->arp))",
      "593:   return -EINVAL;",
      "596:  if (err)",
      "597:   return err;",
      "",
      "[Removed Lines]",
      "595:  err = xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
      "",
      "[Added Lines]",
      "595:  err = xt_check_entry_offsets(e, e->elems, e->target_offset,",
      "596:          e->next_offset);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1254:  if (!arp_checkentry(&e->arp))",
      "1255:   return -EINVAL;",
      "1258:          e->next_offset);",
      "1259:  if (ret)",
      "1260:   return ret;",
      "",
      "[Removed Lines]",
      "1257:  ret = xt_compat_check_entry_offsets(e, e->target_offset,",
      "",
      "[Added Lines]",
      "1258:  ret = xt_compat_check_entry_offsets(e, e->elems, e->target_offset,",
      "",
      "---------------"
    ],
    "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c": [
      "File: net/ipv4/netfilter/ip_tables.c -> net/ipv4/netfilter/ip_tables.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "754:  if (!ip_checkentry(&e->ip))",
      "755:   return -EINVAL;",
      "758:  if (err)",
      "759:   return err;",
      "",
      "[Removed Lines]",
      "757:  err = xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
      "",
      "[Added Lines]",
      "757:  err = xt_check_entry_offsets(e, e->elems, e->target_offset,",
      "758:          e->next_offset);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1513:  if (!ip_checkentry(&e->ip))",
      "1514:   return -EINVAL;",
      "1517:          e->target_offset, e->next_offset);",
      "1518:  if (ret)",
      "1519:   return ret;",
      "",
      "[Removed Lines]",
      "1516:  ret = xt_compat_check_entry_offsets(e,",
      "",
      "[Added Lines]",
      "1517:  ret = xt_compat_check_entry_offsets(e, e->elems,",
      "",
      "---------------"
    ],
    "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c": [
      "File: net/ipv6/netfilter/ip6_tables.c -> net/ipv6/netfilter/ip6_tables.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "766:  if (!ip6_checkentry(&e->ipv6))",
      "767:   return -EINVAL;",
      "770:  if (err)",
      "771:   return err;",
      "",
      "[Removed Lines]",
      "769:  err = xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
      "",
      "[Added Lines]",
      "769:  err = xt_check_entry_offsets(e, e->elems, e->target_offset,",
      "770:          e->next_offset);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1525:  if (!ip6_checkentry(&e->ipv6))",
      "1526:   return -EINVAL;",
      "1529:          e->target_offset, e->next_offset);",
      "1530:  if (ret)",
      "1531:   return ret;",
      "",
      "[Removed Lines]",
      "1528:  ret = xt_compat_check_entry_offsets(e,",
      "",
      "[Added Lines]",
      "1529:  ret = xt_compat_check_entry_offsets(e, e->elems,",
      "",
      "---------------"
    ],
    "net/netfilter/x_tables.c||net/netfilter/x_tables.c": [
      "File: net/netfilter/x_tables.c -> net/netfilter/x_tables.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "546:  compat_uint_t verdict;",
      "547: };",
      "551:       unsigned int target_offset,",
      "552:       unsigned int next_offset)",
      "553: {",
      "554:  const struct compat_xt_entry_target *t;",
      "555:  const char *e = base;",
      "557:  if (target_offset + sizeof(*t) > next_offset)",
      "558:   return -EINVAL;",
      "",
      "[Removed Lines]",
      "550: int xt_compat_check_entry_offsets(const void *base,",
      "",
      "[Added Lines]",
      "549: int xt_compat_check_entry_offsets(const void *base, const char *elems,",
      "553:  long size_of_base_struct = elems - (const char *)base;",
      "557:  if (target_offset < size_of_base_struct)",
      "558:   return -EINVAL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "593: int xt_check_entry_offsets(const void *base,",
      "594:       unsigned int target_offset,",
      "595:       unsigned int next_offset)",
      "596: {",
      "597:  const struct xt_entry_target *t;",
      "598:  const char *e = base;",
      "600:  if (target_offset + sizeof(*t) > next_offset)",
      "601:   return -EINVAL;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "601:       const char *elems,",
      "605:  long size_of_base_struct = elems - (const char *)base;",
      "610:  if (target_offset < size_of_base_struct)",
      "611:   return -EINVAL;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bdf533de6968e9686df777dc178486f600c6e617",
      "candidate_info": {
        "commit_hash": "bdf533de6968e9686df777dc178486f600c6e617",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/bdf533de6968e9686df777dc178486f600c6e617",
        "files": [
          "net/ipv4/netfilter/arp_tables.c",
          "net/ipv4/netfilter/ip_tables.c",
          "net/ipv6/netfilter/ip6_tables.c"
        ],
        "message": "netfilter: x_tables: validate e->target_offset early\n\nWe should check that e->target_offset is sane before\nmark_source_chains gets called since it will fetch the target entry\nfor loop detection.\n\nSigned-off-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
        "before_after_code_files": [
          "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c",
          "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c",
          "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c",
            "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c",
            "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c"
          ],
          "candidate": [
            "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c",
            "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c",
            "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c": [
          "File: net/ipv4/netfilter/arp_tables.c -> net/ipv4/netfilter/arp_tables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "474:  return 1;",
          "475: }",
          "478: {",
          "479:  const struct xt_entry_target *t;",
          "483:   return -EINVAL;",
          "486:  if (e->target_offset + sizeof(struct xt_entry_target) > e->next_offset)",
          "487:   return -EINVAL;",
          "",
          "[Removed Lines]",
          "477: static inline int check_entry(const struct arpt_entry *e, const char *name)",
          "481:  if (!arp_checkentry(&e->arp)) {",
          "482:   duprintf(\"arp_tables: arp check failed %p %s.\\n\", e, name);",
          "484:  }",
          "",
          "[Added Lines]",
          "477: static inline int check_entry(const struct arpt_entry *e)",
          "481:  if (!arp_checkentry(&e->arp))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "522:  struct xt_target *target;",
          "523:  int ret;",
          "529:  e->counters.pcnt = xt_percpu_counter_alloc();",
          "530:  if (IS_ERR_VALUE(e->counters.pcnt))",
          "531:   return -ENOMEM;",
          "",
          "[Removed Lines]",
          "525:  ret = check_entry(e, name);",
          "526:  if (ret)",
          "527:   return ret;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "576:           unsigned int valid_hooks)",
          "577: {",
          "578:  unsigned int h;",
          "580:  if ((unsigned long)e % __alignof__(struct arpt_entry) != 0 ||",
          "581:      (unsigned char *)e + sizeof(struct arpt_entry) >= limit) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "573:  int err;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "590:   return -EINVAL;",
          "591:  }",
          "594:  for (h = 0; h < NF_ARP_NUMHOOKS; h++) {",
          "595:   if (!(valid_hooks & (1 << h)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "588:  err = check_entry(e);",
          "589:  if (err)",
          "590:   return err;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1246:  }",
          "1250:  if (ret)",
          "1251:   return ret;",
          "",
          "[Removed Lines]",
          "1249:  ret = check_entry((struct arpt_entry *)e, name);",
          "",
          "[Added Lines]",
          "1248:  ret = check_entry((struct arpt_entry *)e);",
          "",
          "---------------"
        ],
        "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c": [
          "File: net/ipv4/netfilter/ip_tables.c -> net/ipv4/netfilter/ip_tables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "569: }",
          "571: static int",
          "573: {",
          "574:  const struct xt_entry_target *t;",
          "578:   return -EINVAL;",
          "581:  if (e->target_offset + sizeof(struct xt_entry_target) >",
          "582:      e->next_offset)",
          "",
          "[Removed Lines]",
          "572: check_entry(const struct ipt_entry *e, const char *name)",
          "576:  if (!ip_checkentry(&e->ip)) {",
          "577:   duprintf(\"ip check failed %p %s.\\n\", e, name);",
          "579:  }",
          "",
          "[Added Lines]",
          "572: check_entry(const struct ipt_entry *e)",
          "576:  if (!ip_checkentry(&e->ip))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "666:  struct xt_mtchk_param mtpar;",
          "667:  struct xt_entry_match *ematch;",
          "673:  e->counters.pcnt = xt_percpu_counter_alloc();",
          "674:  if (IS_ERR_VALUE(e->counters.pcnt))",
          "675:   return -ENOMEM;",
          "",
          "[Removed Lines]",
          "669:  ret = check_entry(e, name);",
          "670:  if (ret)",
          "671:   return ret;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "741:       unsigned int valid_hooks)",
          "742: {",
          "743:  unsigned int h;",
          "745:  if ((unsigned long)e % __alignof__(struct ipt_entry) != 0 ||",
          "746:      (unsigned char *)e + sizeof(struct ipt_entry) >= limit) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "738:  int err;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "755:   return -EINVAL;",
          "756:  }",
          "759:  for (h = 0; h < NF_INET_NUMHOOKS; h++) {",
          "760:   if (!(valid_hooks & (1 << h)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "753:  err = check_entry(e);",
          "754:  if (err)",
          "755:   return err;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1506:  }",
          "1510:  if (ret)",
          "1511:   return ret;",
          "",
          "[Removed Lines]",
          "1509:  ret = check_entry((struct ipt_entry *)e, name);",
          "",
          "[Added Lines]",
          "1508:  ret = check_entry((struct ipt_entry *)e);",
          "",
          "---------------"
        ],
        "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c": [
          "File: net/ipv6/netfilter/ip6_tables.c -> net/ipv6/netfilter/ip6_tables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "581: }",
          "583: static int",
          "585: {",
          "586:  const struct xt_entry_target *t;",
          "590:   return -EINVAL;",
          "593:  if (e->target_offset + sizeof(struct xt_entry_target) >",
          "594:      e->next_offset)",
          "",
          "[Removed Lines]",
          "584: check_entry(const struct ip6t_entry *e, const char *name)",
          "588:  if (!ip6_checkentry(&e->ipv6)) {",
          "589:   duprintf(\"ip_tables: ip check failed %p %s.\\n\", e, name);",
          "591:  }",
          "",
          "[Added Lines]",
          "584: check_entry(const struct ip6t_entry *e)",
          "588:  if (!ip6_checkentry(&e->ipv6))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "679:  struct xt_mtchk_param mtpar;",
          "680:  struct xt_entry_match *ematch;",
          "686:  e->counters.pcnt = xt_percpu_counter_alloc();",
          "687:  if (IS_ERR_VALUE(e->counters.pcnt))",
          "688:   return -ENOMEM;",
          "",
          "[Removed Lines]",
          "682:  ret = check_entry(e, name);",
          "683:  if (ret)",
          "684:   return ret;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "753:       unsigned int valid_hooks)",
          "754: {",
          "755:  unsigned int h;",
          "757:  if ((unsigned long)e % __alignof__(struct ip6t_entry) != 0 ||",
          "758:      (unsigned char *)e + sizeof(struct ip6t_entry) >= limit) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "750:  int err;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "767:   return -EINVAL;",
          "768:  }",
          "771:  for (h = 0; h < NF_INET_NUMHOOKS; h++) {",
          "772:   if (!(valid_hooks & (1 << h)))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "765:  err = check_entry(e);",
          "766:  if (err)",
          "767:   return err;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1518:  }",
          "1522:  if (ret)",
          "1523:   return ret;",
          "",
          "[Removed Lines]",
          "1521:  ret = check_entry((struct ip6t_entry *)e, name);",
          "",
          "[Added Lines]",
          "1520:  ret = check_entry((struct ip6t_entry *)e);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d35812c3214afa5b37a675113555259cfd67b98",
      "candidate_info": {
        "commit_hash": "7d35812c3214afa5b37a675113555259cfd67b98",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/7d35812c3214afa5b37a675113555259cfd67b98",
        "files": [
          "include/linux/netfilter/x_tables.h",
          "net/ipv4/netfilter/arp_tables.c",
          "net/ipv4/netfilter/ip_tables.c",
          "net/ipv6/netfilter/ip6_tables.c",
          "net/netfilter/x_tables.c"
        ],
        "message": "netfilter: x_tables: add and use xt_check_entry_offsets\n\nCurrently arp/ip and ip6tables each implement a short helper to check that\nthe target offset is large enough to hold one xt_entry_target struct and\nthat t->u.target_size fits within the current rule.\n\nUnfortunately these checks are not sufficient.\n\nTo avoid adding new tests to all of ip/ip6/arptables move the current\nchecks into a helper, then extend this helper in followup patches.\n\nSigned-off-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
        "before_after_code_files": [
          "include/linux/netfilter/x_tables.h||include/linux/netfilter/x_tables.h",
          "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c",
          "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c",
          "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c",
          "net/netfilter/x_tables.c||net/netfilter/x_tables.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/linux/netfilter/x_tables.h||include/linux/netfilter/x_tables.h",
            "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c",
            "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c",
            "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c",
            "net/netfilter/x_tables.c||net/netfilter/x_tables.c"
          ],
          "candidate": [
            "include/linux/netfilter/x_tables.h||include/linux/netfilter/x_tables.h",
            "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c",
            "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c",
            "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c",
            "net/netfilter/x_tables.c||net/netfilter/x_tables.c"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/netfilter/x_tables.h||include/linux/netfilter/x_tables.h": [
          "File: include/linux/netfilter/x_tables.h -> include/linux/netfilter/x_tables.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "242: int xt_register_matches(struct xt_match *match, unsigned int n);",
          "243: void xt_unregister_matches(struct xt_match *match, unsigned int n);",
          "245: int xt_check_match(struct xt_mtchk_param *, unsigned int size, u_int8_t proto,",
          "246:      bool inv_proto);",
          "247: int xt_check_target(struct xt_tgchk_param *, unsigned int size, u_int8_t proto,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "245: int xt_check_entry_offsets(const void *base,",
          "246:       unsigned int target_offset,",
          "247:       unsigned int next_offset);",
          "",
          "---------------"
        ],
        "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c": [
          "File: net/ipv4/netfilter/arp_tables.c -> net/ipv4/netfilter/arp_tables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "497: static inline int check_entry(const struct arpt_entry *e)",
          "498: {",
          "501:  if (!arp_checkentry(&e->arp))",
          "502:   return -EINVAL;",
          "512: }",
          "514: static inline int check_target(struct arpt_entry *e, const char *name)",
          "",
          "[Removed Lines]",
          "499:  const struct xt_entry_target *t;",
          "504:  if (e->target_offset + sizeof(struct xt_entry_target) > e->next_offset)",
          "505:   return -EINVAL;",
          "507:  t = arpt_get_target_c(e);",
          "508:  if (e->target_offset + t->u.target_size > e->next_offset)",
          "509:   return -EINVAL;",
          "511:  return 0;",
          "",
          "[Added Lines]",
          "502:  return xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
          "",
          "---------------"
        ],
        "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c": [
          "File: net/ipv4/netfilter/ip_tables.c -> net/ipv4/netfilter/ip_tables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "590: static int",
          "591: check_entry(const struct ipt_entry *e)",
          "592: {",
          "595:  if (!ip_checkentry(&e->ip))",
          "596:   return -EINVAL;",
          "607: }",
          "609: static int",
          "",
          "[Removed Lines]",
          "593:  const struct xt_entry_target *t;",
          "598:  if (e->target_offset + sizeof(struct xt_entry_target) >",
          "599:      e->next_offset)",
          "600:   return -EINVAL;",
          "602:  t = ipt_get_target_c(e);",
          "603:  if (e->target_offset + t->u.target_size > e->next_offset)",
          "604:   return -EINVAL;",
          "606:  return 0;",
          "",
          "[Added Lines]",
          "596:  return xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
          "",
          "---------------"
        ],
        "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c": [
          "File: net/ipv6/netfilter/ip6_tables.c -> net/ipv6/netfilter/ip6_tables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "602: static int",
          "603: check_entry(const struct ip6t_entry *e)",
          "604: {",
          "607:  if (!ip6_checkentry(&e->ipv6))",
          "608:   return -EINVAL;",
          "619: }",
          "621: static int check_match(struct xt_entry_match *m, struct xt_mtchk_param *par)",
          "",
          "[Removed Lines]",
          "605:  const struct xt_entry_target *t;",
          "610:  if (e->target_offset + sizeof(struct xt_entry_target) >",
          "611:      e->next_offset)",
          "612:   return -EINVAL;",
          "614:  t = ip6t_get_target_c(e);",
          "615:  if (e->target_offset + t->u.target_size > e->next_offset)",
          "616:   return -EINVAL;",
          "618:  return 0;",
          "",
          "[Added Lines]",
          "608:  return xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
          "",
          "---------------"
        ],
        "net/netfilter/x_tables.c||net/netfilter/x_tables.c": [
          "File: net/netfilter/x_tables.c -> net/netfilter/x_tables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "541: EXPORT_SYMBOL_GPL(xt_compat_match_to_user);",
          "544: int xt_check_target(struct xt_tgchk_param *par,",
          "545:       unsigned int size, u_int8_t proto, bool inv_proto)",
          "546: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "560: int xt_check_entry_offsets(const void *base,",
          "561:       unsigned int target_offset,",
          "562:       unsigned int next_offset)",
          "563: {",
          "564:  const struct xt_entry_target *t;",
          "565:  const char *e = base;",
          "567:  if (target_offset + sizeof(*t) > next_offset)",
          "568:   return -EINVAL;",
          "570:  t = (void *)(e + target_offset);",
          "571:  if (target_offset + t->u.target_size > next_offset)",
          "572:   return -EINVAL;",
          "574:  return 0;",
          "575: }",
          "576: EXPORT_SYMBOL(xt_check_entry_offsets);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fc1221b3a163d1386d1052184202d5dc50d302d1",
      "candidate_info": {
        "commit_hash": "fc1221b3a163d1386d1052184202d5dc50d302d1",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/fc1221b3a163d1386d1052184202d5dc50d302d1",
        "files": [
          "include/linux/netfilter/x_tables.h",
          "net/ipv4/netfilter/arp_tables.c",
          "net/ipv4/netfilter/ip_tables.c",
          "net/ipv6/netfilter/ip6_tables.c",
          "net/netfilter/x_tables.c"
        ],
        "message": "netfilter: x_tables: add compat version of xt_check_entry_offsets\n\n32bit rulesets have different layout and alignment requirements, so once\nmore integrity checks get added to xt_check_entry_offsets it will reject\nwell-formed 32bit rulesets.\n\nSigned-off-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
        "before_after_code_files": [
          "include/linux/netfilter/x_tables.h||include/linux/netfilter/x_tables.h",
          "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c",
          "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c",
          "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c",
          "net/netfilter/x_tables.c||net/netfilter/x_tables.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/linux/netfilter/x_tables.h||include/linux/netfilter/x_tables.h",
            "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c",
            "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c",
            "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c",
            "net/netfilter/x_tables.c||net/netfilter/x_tables.c"
          ],
          "candidate": [
            "include/linux/netfilter/x_tables.h||include/linux/netfilter/x_tables.h",
            "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c",
            "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c",
            "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c",
            "net/netfilter/x_tables.c||net/netfilter/x_tables.c"
          ]
        }
      },
      "candidate_diff": {
        "include/linux/netfilter/x_tables.h||include/linux/netfilter/x_tables.h": [
          "File: include/linux/netfilter/x_tables.h -> include/linux/netfilter/x_tables.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:     unsigned int *size);",
          "495: int xt_compat_target_to_user(const struct xt_entry_target *t,",
          "496:         void __user **dstptr, unsigned int *size);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "497: int xt_compat_check_entry_offsets(const void *base,",
          "498:       unsigned int target_offset,",
          "499:       unsigned int next_offset);",
          "",
          "---------------"
        ],
        "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c": [
          "File: net/ipv4/netfilter/arp_tables.c -> net/ipv4/netfilter/arp_tables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1254:  if (!arp_checkentry(&e->arp))",
          "1255:   return -EINVAL;",
          "1258:  if (ret)",
          "1259:   return ret;",
          "",
          "[Removed Lines]",
          "1257:  ret = xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
          "",
          "[Added Lines]",
          "1257:  ret = xt_compat_check_entry_offsets(e, e->target_offset,",
          "1258:          e->next_offset);",
          "",
          "---------------"
        ],
        "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c": [
          "File: net/ipv4/netfilter/ip_tables.c -> net/ipv4/netfilter/ip_tables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1513:  if (!ip_checkentry(&e->ip))",
          "1514:   return -EINVAL;",
          "1517:  if (ret)",
          "1518:   return ret;",
          "",
          "[Removed Lines]",
          "1516:  ret = xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
          "",
          "[Added Lines]",
          "1516:  ret = xt_compat_check_entry_offsets(e,",
          "1517:          e->target_offset, e->next_offset);",
          "",
          "---------------"
        ],
        "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c": [
          "File: net/ipv6/netfilter/ip6_tables.c -> net/ipv6/netfilter/ip6_tables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1525:  if (!ip6_checkentry(&e->ipv6))",
          "1526:   return -EINVAL;",
          "1529:  if (ret)",
          "1530:   return ret;",
          "",
          "[Removed Lines]",
          "1528:  ret = xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
          "",
          "[Added Lines]",
          "1528:  ret = xt_compat_check_entry_offsets(e,",
          "1529:          e->target_offset, e->next_offset);",
          "",
          "---------------"
        ],
        "net/netfilter/x_tables.c||net/netfilter/x_tables.c": [
          "File: net/netfilter/x_tables.c -> net/netfilter/x_tables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "539:  return 0;",
          "540: }",
          "541: EXPORT_SYMBOL_GPL(xt_compat_match_to_user);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "543: int xt_compat_check_entry_offsets(const void *base,",
          "544:       unsigned int target_offset,",
          "545:       unsigned int next_offset)",
          "546: {",
          "547:  const struct compat_xt_entry_target *t;",
          "548:  const char *e = base;",
          "550:  if (target_offset + sizeof(*t) > next_offset)",
          "551:   return -EINVAL;",
          "553:  t = (void *)(e + target_offset);",
          "554:  if (t->u.target_size < sizeof(*t))",
          "555:   return -EINVAL;",
          "557:  if (target_offset + t->u.target_size > next_offset)",
          "558:   return -EINVAL;",
          "560:  return 0;",
          "561: }",
          "562: EXPORT_SYMBOL(xt_compat_check_entry_offsets);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "aa412ba225dd3bc36d404c28cdc3d674850d80d0",
      "candidate_info": {
        "commit_hash": "aa412ba225dd3bc36d404c28cdc3d674850d80d0",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/aa412ba225dd3bc36d404c28cdc3d674850d80d0",
        "files": [
          "net/ipv4/netfilter/arp_tables.c",
          "net/ipv4/netfilter/ip_tables.c",
          "net/ipv6/netfilter/ip6_tables.c"
        ],
        "message": "netfilter: x_tables: kill check_entry helper\n\nOnce we add more sanity testing to xt_check_entry_offsets it\nbecomes relvant if we're expecting a 32bit 'config_compat' blob\nor a normal one.\n\nSince we already have a lot of similar-named functions (check_entry,\ncompat_check_entry, find_and_check_entry, etc.) and the current\nincarnation is short just fold its contents into the callers.\n\nSigned-off-by: Florian Westphal <fw@strlen.de>\nSigned-off-by: Pablo Neira Ayuso <pablo@netfilter.org>",
        "before_after_code_files": [
          "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c",
          "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c",
          "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c",
            "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c",
            "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c"
          ],
          "candidate": [
            "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c",
            "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c",
            "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c"
          ]
        }
      },
      "candidate_diff": {
        "net/ipv4/netfilter/arp_tables.c||net/ipv4/netfilter/arp_tables.c": [
          "File: net/ipv4/netfilter/arp_tables.c -> net/ipv4/netfilter/arp_tables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "494:  return 1;",
          "495: }",
          "505: static inline int check_target(struct arpt_entry *e, const char *name)",
          "506: {",
          "507:  struct xt_entry_target *t = arpt_get_target(e);",
          "",
          "[Removed Lines]",
          "497: static inline int check_entry(const struct arpt_entry *e)",
          "498: {",
          "499:  if (!arp_checkentry(&e->arp))",
          "500:   return -EINVAL;",
          "502:  return xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
          "503: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "597:   return -EINVAL;",
          "598:  }",
          "601:  if (err)",
          "602:   return err;",
          "",
          "[Removed Lines]",
          "600:  err = check_entry(e);",
          "",
          "[Added Lines]",
          "592:  if (!arp_checkentry(&e->arp))",
          "593:   return -EINVAL;",
          "595:  err = xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1256:   return -EINVAL;",
          "1257:  }",
          "1261:  if (ret)",
          "1262:   return ret;",
          "",
          "[Removed Lines]",
          "1260:  ret = check_entry((struct arpt_entry *)e);",
          "",
          "[Added Lines]",
          "1254:  if (!arp_checkentry(&e->arp))",
          "1255:   return -EINVAL;",
          "1257:  ret = xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
          "",
          "---------------"
        ],
        "net/ipv4/netfilter/ip_tables.c||net/ipv4/netfilter/ip_tables.c": [
          "File: net/ipv4/netfilter/ip_tables.c -> net/ipv4/netfilter/ip_tables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "587:  module_put(par.match->me);",
          "588: }",
          "599: static int",
          "600: check_match(struct xt_entry_match *m, struct xt_mtchk_param *par)",
          "601: {",
          "",
          "[Removed Lines]",
          "590: static int",
          "591: check_entry(const struct ipt_entry *e)",
          "592: {",
          "593:  if (!ip_checkentry(&e->ip))",
          "594:   return -EINVAL;",
          "596:  return xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
          "597: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "760:   return -EINVAL;",
          "761:  }",
          "764:  if (err)",
          "765:   return err;",
          "",
          "[Removed Lines]",
          "763:  err = check_entry(e);",
          "",
          "[Added Lines]",
          "754:  if (!ip_checkentry(&e->ip))",
          "755:   return -EINVAL;",
          "757:  err = xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1516:   return -EINVAL;",
          "1517:  }",
          "1521:  if (ret)",
          "1522:   return ret;",
          "",
          "[Removed Lines]",
          "1520:  ret = check_entry((struct ipt_entry *)e);",
          "",
          "[Added Lines]",
          "1513:  if (!ip_checkentry(&e->ip))",
          "1514:   return -EINVAL;",
          "1516:  ret = xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
          "",
          "---------------"
        ],
        "net/ipv6/netfilter/ip6_tables.c||net/ipv6/netfilter/ip6_tables.c": [
          "File: net/ipv6/netfilter/ip6_tables.c -> net/ipv6/netfilter/ip6_tables.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "599:  module_put(par.match->me);",
          "600: }",
          "611: static int check_match(struct xt_entry_match *m, struct xt_mtchk_param *par)",
          "612: {",
          "613:  const struct ip6t_ip6 *ipv6 = par->entryinfo;",
          "",
          "[Removed Lines]",
          "602: static int",
          "603: check_entry(const struct ip6t_entry *e)",
          "604: {",
          "605:  if (!ip6_checkentry(&e->ipv6))",
          "606:   return -EINVAL;",
          "608:  return xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
          "609: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "772:   return -EINVAL;",
          "773:  }",
          "776:  if (err)",
          "777:   return err;",
          "",
          "[Removed Lines]",
          "775:  err = check_entry(e);",
          "",
          "[Added Lines]",
          "766:  if (!ip6_checkentry(&e->ipv6))",
          "767:   return -EINVAL;",
          "769:  err = xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1528:   return -EINVAL;",
          "1529:  }",
          "1533:  if (ret)",
          "1534:   return ret;",
          "",
          "[Removed Lines]",
          "1532:  ret = check_entry((struct ip6t_entry *)e);",
          "",
          "[Added Lines]",
          "1525:  if (!ip6_checkentry(&e->ipv6))",
          "1526:   return -EINVAL;",
          "1528:  ret = xt_check_entry_offsets(e, e->target_offset, e->next_offset);",
          "",
          "---------------"
        ]
      }
    }
  ]
}