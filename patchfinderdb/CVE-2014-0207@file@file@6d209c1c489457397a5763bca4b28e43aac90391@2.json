{
  "cve_id": "CVE-2014-0207",
  "cve_desc": "The cdf_read_short_sector function in cdf.c in file before 5.19, as used in the Fileinfo component in PHP before 5.4.30 and 5.5.x before 5.5.14, allows remote attackers to cause a denial of service (assertion failure and application exit) via a crafted CDF file.",
  "repo": "file/file",
  "patch_hash": "6d209c1c489457397a5763bca4b28e43aac90391",
  "patch_info": {
    "commit_hash": "6d209c1c489457397a5763bca4b28e43aac90391",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/6d209c1c489457397a5763bca4b28e43aac90391",
    "files": [
      "src/cdf.c",
      "src/readcdf.c"
    ],
    "message": "Apply patches from file-CVE-2012-1571.patch From Francisco Alonso Espejo:     file < 5.18/git version can be made to crash when checking some     corrupt CDF files (Using an invalid cdf_read_short_sector size)     The problem I found here, is that in most situations (if     h_short_sec_size_p2 > 8) because the blocksize is 512 and normal     values are 06 which means reading 64 bytes.As long as the check     for the block size copy is not checked properly (there's an assert     that makes wrong/invalid assumptions)",
    "before_after_code_files": [
      "src/cdf.c||src/cdf.c",
      "src/readcdf.c||src/readcdf.c"
    ]
  },
  "patch_diff": {
    "src/cdf.c||src/cdf.c": [
      "File: src/cdf.c -> src/cdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: #include \"file.h\"",
      "37: #ifndef lint",
      "39: #endif",
      "41: #include <assert.h>",
      "",
      "[Removed Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.54 2014/02/25 20:52:02 christos Exp $\")",
      "",
      "[Added Lines]",
      "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "352:  size_t ss = CDF_SHORT_SEC_SIZE(h);",
      "353:  size_t pos = CDF_SHORT_SEC_POS(h, id);",
      "354:  assert(ss == len);",
      "356:   DPRINTF((\"Out of bounds read %\" SIZE_T_FORMAT \"u > %\"",
      "357:       SIZE_T_FORMAT \"u\\n\",",
      "359:   return -1;",
      "360:  }",
      "361:  (void)memcpy(((char *)buf) + offs,",
      "",
      "[Removed Lines]",
      "355:  if (pos > CDF_SEC_SIZE(h) * sst->sst_len) {",
      "358:       pos, CDF_SEC_SIZE(h) * sst->sst_len));",
      "",
      "[Added Lines]",
      "355:  if (pos + len > CDF_SEC_SIZE(h) * sst->sst_len) {",
      "358:       pos + len, CDF_SEC_SIZE(h) * sst->sst_len));",
      "",
      "---------------"
    ],
    "src/readcdf.c||src/readcdf.c": [
      "File: src/readcdf.c -> src/readcdf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "26: #include \"file.h\"",
      "28: #ifndef lint",
      "30: #endif",
      "32: #include <assert.h>",
      "",
      "[Removed Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.39 2014/02/27 23:26:18 christos Exp $\")",
      "",
      "[Added Lines]",
      "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "121: private int",
      "122: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
      "124: {",
      "125:         size_t i;",
      "126:         cdf_timestamp_t tp;",
      "",
      "[Removed Lines]",
      "123:     size_t count, const uint64_t clsid[2])",
      "",
      "[Added Lines]",
      "123:     size_t count, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "130:         const char *s;",
      "131:         int len;",
      "136:         for (i = 0; i < count; i++) {",
      "137:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
      "",
      "[Removed Lines]",
      "133:         if (!NOTMIME(ms))",
      "134:   str = cdf_clsid_to_mime(clsid, clsid2mime);",
      "",
      "[Added Lines]",
      "133:         if (!NOTMIME(ms) && root_storage)",
      "134:   str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "237: private int",
      "238: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
      "240: {",
      "241:         cdf_summary_info_header_t si;",
      "242:         cdf_property_info_t *info;",
      "",
      "[Removed Lines]",
      "239:     const cdf_stream_t *sst, const uint64_t clsid[2])",
      "",
      "[Added Lines]",
      "239:     const cdf_stream_t *sst, const cdf_directory_t *root_storage)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "276:                                 return -2;",
      "277:                         break;",
      "278:                 }",
      "286:         free(info);",
      "288:         return m == -1 ? -2 : m;",
      "",
      "[Removed Lines]",
      "279:   str = cdf_clsid_to_mime(clsid, clsid2desc);",
      "280:   if (str)",
      "281:                         if (file_printf(ms, \", %s\", str) == -1)",
      "282:     return -2;",
      "283:         }",
      "285:         m = cdf_file_property_info(ms, info, count, clsid);",
      "",
      "[Added Lines]",
      "279:   if (root_storage) {",
      "280:    str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc);",
      "281:    if (str)",
      "282:     if (file_printf(ms, \", %s\", str) == -1)",
      "283:      return -2;",
      "284:    }",
      "285:   }",
      "287:         m = cdf_file_property_info(ms, info, count, root_storage);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "381: #ifdef CDF_DEBUG",
      "382:         cdf_dump_summary_info(&h, &scn);",
      "383: #endif",
      "388:  if (i == 0) {",
      "389:   const char *str = NULL;",
      "",
      "[Removed Lines]",
      "384:         if ((i = cdf_file_summary_info(ms, &h, &scn,",
      "385:      root_storage->d_storage_uuid)) < 0)",
      "386:                 expn = \"Can't expand summary_info\";",
      "",
      "[Added Lines]",
      "386:         if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0)",
      "387:             expn = \"Can't expand summary_info\";",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b8acc83781d5a24cc5101e525d15efe0482c280d",
      "candidate_info": {
        "commit_hash": "b8acc83781d5a24cc5101e525d15efe0482c280d",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/b8acc83781d5a24cc5101e525d15efe0482c280d",
        "files": [
          "src/cdf.c"
        ],
        "message": "Remove loop that kept reading the same offset (Jan Kaluza)",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.55 2014/02/27 23:26:17 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.56 2014/05/05 16:11:21 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "932: cdf_unpack_summary_info(const cdf_stream_t *sst, const cdf_header_t *h,",
          "933:     cdf_summary_info_header_t *ssi, cdf_property_info_t **info, size_t *count)",
          "934: {",
          "936:  const cdf_summary_info_header_t *si =",
          "937:      CAST(const cdf_summary_info_header_t *, sst->sst_tab);",
          "938:  const cdf_section_declaration_t *sd =",
          "",
          "[Removed Lines]",
          "935:  size_t i, maxcount;",
          "",
          "[Added Lines]",
          "935:  size_t maxcount;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "947:  ssi->si_os = CDF_TOLE2(si->si_os);",
          "948:  ssi->si_class = si->si_class;",
          "949:  cdf_swap_class(&ssi->si_class);",
          "952:  maxcount = 0;",
          "965:  return 0;",
          "966: }",
          "",
          "[Removed Lines]",
          "950:  ssi->si_count = CDF_TOLE2(si->si_count);",
          "954:  for (i = 0; i < CDF_TOLE4(si->si_count); i++) {",
          "955:   if (i >= CDF_LOOP_LIMIT) {",
          "956:    DPRINTF((\"Unpack summary info loop limit\"));",
          "957:    errno = EFTYPE;",
          "958:    return -1;",
          "959:   }",
          "960:   if (cdf_read_property_info(sst, h, CDF_TOLE4(sd->sd_offset),",
          "961:       info, count, &maxcount) == -1) {",
          "962:    return -1;",
          "963:   }",
          "964:  }",
          "",
          "[Added Lines]",
          "950:  ssi->si_count = CDF_TOLE4(si->si_count);",
          "954:  if (cdf_read_property_info(sst, h, CDF_TOLE4(sd->sd_offset), info,",
          "955:      count, &maxcount) == -1)",
          "956:   return -1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "209113ac443c82cc7573bb228b68ce1dd9d50f90",
      "candidate_info": {
        "commit_hash": "209113ac443c82cc7573bb228b68ce1dd9d50f90",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/209113ac443c82cc7573bb228b68ce1dd9d50f90",
        "files": [
          "src/cdf.c",
          "src/cdf.h",
          "src/readcdf.c"
        ],
        "message": "add some class id matching (from Christoph Biedl)",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c",
          "src/cdf.h||src/cdf.h",
          "src/readcdf.c||src/readcdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c",
            "src/readcdf.c||src/readcdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c",
            "src/readcdf.c||src/readcdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.53 2013/02/26 16:20:42 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.54 2014/02/25 20:52:02 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "676: int",
          "677: cdf_read_short_stream(const cdf_info_t *info, const cdf_header_t *h,",
          "679: {",
          "680:  size_t i;",
          "681:  const cdf_directory_t *d;",
          "683:  for (i = 0; i < dir->dir_len; i++)",
          "684:   if (dir->dir_tab[i].d_type == CDF_DIR_TYPE_ROOT_STORAGE)",
          "685:    break;",
          "",
          "[Removed Lines]",
          "678:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn)",
          "",
          "[Added Lines]",
          "678:     const cdf_sat_t *sat, const cdf_dir_t *dir, cdf_stream_t *scn,",
          "679:     const cdf_directory_t **root)",
          "",
          "---------------"
        ],
        "src/cdf.h||src/cdf.h": [
          "File: src/cdf.h -> src/cdf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "294: int cdf_read_ssat(const cdf_info_t *, const cdf_header_t *, const cdf_sat_t *,",
          "295:     cdf_sat_t *);",
          "296: int cdf_read_short_stream(const cdf_info_t *, const cdf_header_t *,",
          "298: int cdf_read_property_info(const cdf_stream_t *, const cdf_header_t *, uint32_t,",
          "299:     cdf_property_info_t **, size_t *, size_t *);",
          "300: int cdf_read_summary_info(const cdf_info_t *, const cdf_header_t *,",
          "",
          "[Removed Lines]",
          "297:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *);",
          "",
          "[Added Lines]",
          "297:     const cdf_sat_t *, const cdf_dir_t *, cdf_stream_t *,",
          "298:     const cdf_directory_t **);",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <assert.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.37 2014/01/06 13:41:18 rrt Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.38 2014/02/18 11:09:31 kim Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "70:  { NULL,    NULL,   },",
          "71: };",
          "73: private const char *",
          "74: cdf_app_to_mime(const char *vbuf, const struct nv *nv)",
          "75: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "73: static const struct cv {",
          "74:  uint64_t clsid[2];",
          "75:  const char *mime;",
          "76: } clsid2mime[] = {",
          "77:  {",
          "78:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
          "79:   \"x-msi\",",
          "80:  }",
          "81: }, clsid2desc[] = {",
          "82:  {",
          "83:   { 0x00000000000c1084LLU, 0x46000000000000c0LLU },",
          "84:   \"MSI Installer\",",
          "85:  },",
          "86: };",
          "88: private const char *",
          "89: cdf_clsid_to_mime(const uint64_t clsid[2], const struct cv *cv)",
          "90: {",
          "91:  size_t i;",
          "92:  for (i = 0; cv[i].mime != NULL; i++) {",
          "93:  printf(\"%llx %llx %llx %llx\\n\",",
          "94:   clsid[0], cv[i].clsid[0], clsid[1], cv[i].clsid[1]);",
          "95:   if (clsid[0] == cv[i].clsid[0] && clsid[1] == cv[i].clsid[1])",
          "96:    return cv[i].mime;",
          "97:  }",
          "98:  return NULL;",
          "99: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95: private int",
          "96: cdf_file_property_info(struct magic_set *ms, const cdf_property_info_t *info,",
          "98: {",
          "99:         size_t i;",
          "100:         cdf_timestamp_t tp;",
          "",
          "[Removed Lines]",
          "97:     size_t count)",
          "",
          "[Added Lines]",
          "125:     size_t count, const uint64_t clsid[2])",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "104:         const char *s;",
          "105:         int len;",
          "107:         for (i = 0; i < count; i++) {",
          "108:                 cdf_print_property_name(buf, sizeof(buf), info[i].pi_id);",
          "109:                 switch (info[i].pi_type) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135:         if (!NOTMIME(ms))",
          "136:   str = cdf_clsid_to_mime(clsid, clsid2mime);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "160:                                                     buf, vbuf) == -1)",
          "161:                                                         return -1;",
          "162:                                         }",
          "164:         CDF_PROPERTY_NAME_OF_APPLICATION) {",
          "165:      str = cdf_app_to_mime(vbuf, app2mime);",
          "166:     }",
          "",
          "[Removed Lines]",
          "163:                                 } else if (info[i].pi_id ==",
          "",
          "[Added Lines]",
          "194:                                 } else if (str == NULL && info[i].pi_id ==",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "208: private int",
          "209: cdf_file_summary_info(struct magic_set *ms, const cdf_header_t *h,",
          "211: {",
          "212:         cdf_summary_info_header_t si;",
          "213:         cdf_property_info_t *info;",
          "",
          "[Removed Lines]",
          "210:     const cdf_stream_t *sst)",
          "",
          "[Added Lines]",
          "241:     const cdf_stream_t *sst, const uint64_t clsid[2])",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "218:                 return -1;",
          "220:         if (NOTMIME(ms)) {",
          "221:                 if (file_printf(ms, \"Composite Document File V2 Document\")",
          "222:       == -1)",
          "223:                         return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:   const char *str;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "245:                                 return -2;",
          "246:                         break;",
          "247:                 }",
          "248:         }",
          "251:         free(info);",
          "253:         return m == -1 ? -2 : m;",
          "254: }",
          "256: protected int",
          "257: file_trycdf(struct magic_set *ms, int fd, const unsigned char *buf,",
          "258:     size_t nbytes)",
          "",
          "[Removed Lines]",
          "250:         m = cdf_file_property_info(ms, info, count);",
          "",
          "[Added Lines]",
          "281:   str = cdf_clsid_to_mime(clsid, clsid2desc);",
          "282:   if (str)",
          "283:                         if (file_printf(ms, \", %s\", str) == -1)",
          "284:     return -2;",
          "287:         m = cdf_file_property_info(ms, info, count, clsid);",
          "293: #ifdef notdef",
          "294: private char *",
          "295: format_clsid(char *buf, size_t len, const uint64_t uuid[2]) {",
          "296:  snprintf(buf, len, \"%.8\" PRIx64 \"-%.4\" PRIx64 \"-%.4\" PRIx64 \"-%.4\"",
          "297:      PRIx64 \"-%.12\" PRIx64,",
          "298:      (uuid[0] >> 32) & (uint64_t)0x000000000ffffffffLLU,",
          "299:      (uuid[0] >> 16) & (uint64_t)0x0000000000000ffffLLU,",
          "300:      (uuid[0] >>  0) & (uint64_t)0x0000000000000ffffLLU,",
          "301:      (uuid[1] >> 48) & (uint64_t)0x0000000000000ffffLLU,",
          "302:      (uuid[1] >>  0) & (uint64_t)0x0000fffffffffffffLLU);",
          "303:  return buf;",
          "304: }",
          "305: #endif",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "298:                 goto out2;",
          "299:         }",
          "302:                 expn = \"Cannot read short stream\";",
          "303:                 goto out3;",
          "304:         }",
          "305: #ifdef CDF_DEBUG",
          "306:         cdf_dump_dir(&info, &h, &sat, &ssat, &sst, &dir);",
          "307: #endif",
          "309:         if ((i = cdf_read_summary_info(&info, &h, &sat, &ssat, &sst, &dir,",
          "310:             &scn)) == -1) {",
          "",
          "[Removed Lines]",
          "301:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst)) == -1) {",
          "",
          "[Added Lines]",
          "352:         const cdf_directory_t *root_storage;",
          "353:         if ((i = cdf_read_short_stream(&info, &h, &sat, &dir, &sst,",
          "354:      &root_storage)) == -1) {",
          "361: #ifdef notdef",
          "362:  if (root_storage) {",
          "363:   if (NOTMIME(ms)) {",
          "364:    char clsbuf[128];",
          "365:    if (file_printf(ms, \"CLSID %s, \",",
          "366:        format_clsid(clsbuf, sizeof(clsbuf),",
          "367:        root_storage->d_storage_uuid)) == -1)",
          "368:     return -1;",
          "369:   }",
          "370:  }",
          "371: #endif",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "319: #ifdef CDF_DEBUG",
          "320:         cdf_dump_summary_info(&h, &scn);",
          "321: #endif",
          "323:                 expn = \"Can't expand summary_info\";",
          "324:  if (i == 0) {",
          "325:   const char *str = NULL;",
          "326:   cdf_directory_t *d;",
          "327:   char name[__arraycount(d->d_name)];",
          "328:   size_t j, k;",
          "330:    d = &dir.dir_tab[j];",
          "331:    for (k = 0; k < sizeof(name); k++)",
          "332:     name[k] = (char)cdf_tole2(d->d_name[k]);",
          "339:   }",
          "340:   if (NOTMIME(ms)) {",
          "341:    if (str != NULL) {",
          "",
          "[Removed Lines]",
          "322:         if ((i = cdf_file_summary_info(ms, &h, &scn)) < 0)",
          "329:   for (j = 0; j < dir.dir_len; j++) {",
          "333:    if (NOTMIME(ms))",
          "334:     str = cdf_app_to_mime(name, name2desc);",
          "335:    else",
          "336:     str = cdf_app_to_mime(name, name2mime);",
          "337:    if (str != NULL)",
          "338:     break;",
          "",
          "[Added Lines]",
          "386:         if ((i = cdf_file_summary_info(ms, &h, &scn,",
          "387:      root_storage->d_storage_uuid)) < 0)",
          "396:   for (j = 0; str == NULL && j < dir.dir_len; j++) {",
          "400:    str = cdf_app_to_mime(name,",
          "401:        NOTMIME(ms) ? name2desc : name2mime);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "595d50dda40371066e45d8adaed3d7c9fc6a09d0",
      "candidate_info": {
        "commit_hash": "595d50dda40371066e45d8adaed3d7c9fc6a09d0",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/595d50dda40371066e45d8adaed3d7c9fc6a09d0",
        "files": [
          "src/readcdf.c"
        ],
        "message": "Fix cdf_app_to_mime, broken in previous commit: actually return the return value",
        "before_after_code_files": [
          "src/readcdf.c||src/readcdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readcdf.c||src/readcdf.c"
          ],
          "candidate": [
            "src/readcdf.c||src/readcdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <stdlib.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.35 2013/10/29 18:30:45 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.36 2013/12/05 17:02:34 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:    break;",
          "83:   }",
          "84:  (void)setlocale(LC_CTYPE, \"\");",
          "86: }",
          "88: private int",
          "",
          "[Removed Lines]",
          "85:  return NULL;",
          "",
          "[Added Lines]",
          "85:  return rv;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9190a18d09f25fb0ca6abe1fcbdba780f5077e45",
      "candidate_info": {
        "commit_hash": "9190a18d09f25fb0ca6abe1fcbdba780f5077e45",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/9190a18d09f25fb0ca6abe1fcbdba780f5077e45",
        "files": [
          "ChangeLog",
          "TODO",
          "doc/file.man",
          "doc/libmagic.man",
          "magic/Magdir/jpeg",
          "magic/Magdir/mathematica",
          "src/apprentice.c",
          "src/ascmagic.c",
          "src/file.c",
          "src/file.h",
          "src/file_opts.h",
          "src/fsmagic.c",
          "src/is_tar.c",
          "src/readcdf.c",
          "src/readelf.c",
          "src/softmagic.c"
        ],
        "message": "Add --extension",
        "before_after_code_files": [
          "src/apprentice.c||src/apprentice.c",
          "src/ascmagic.c||src/ascmagic.c",
          "src/file.c||src/file.c",
          "src/file.h||src/file.h",
          "src/file_opts.h||src/file_opts.h",
          "src/fsmagic.c||src/fsmagic.c",
          "src/is_tar.c||src/is_tar.c",
          "src/readcdf.c||src/readcdf.c",
          "src/readelf.c||src/readelf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readcdf.c||src/readcdf.c"
          ],
          "candidate": [
            "src/readcdf.c||src/readcdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/apprentice.c||src/apprentice.c": [
          "File: src/apprentice.c -> src/apprentice.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.230 2015/01/02 21:29:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: apprentice.c,v 1.231 2015/02/06 17:08:58 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149: private int parse_mime(struct magic_set *, struct magic_entry *, const char *);",
          "150: private int parse_strength(struct magic_set *, struct magic_entry *, const char *);",
          "151: private int parse_apple(struct magic_set *, struct magic_entry *, const char *);",
          "154: private size_t magicsize = sizeof(struct magic);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152: private int parse_ext(struct magic_set *, struct magic_entry *, const char *);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "163: #define DECLARE_FIELD(name) { # name, sizeof(# name) - 1, parse_ ## name }",
          "164:  DECLARE_FIELD(mime),",
          "165:  DECLARE_FIELD(apple),",
          "166:  DECLARE_FIELD(strength),",
          "167: #undef DECLARE_FIELD",
          "168:  { NULL, 0, NULL }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:  DECLARE_FIELD(ext),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2254:      sizeof(m->apple), \"APPLE\", \"!+-./\", 0);",
          "2255: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2262: private int",
          "2263: parse_ext(struct magic_set *ms, struct magic_entry *me, const char *line)",
          "2264: {",
          "2265:  struct magic *m = &me->mp[0];",
          "2267:  return parse_extra(ms, me, line,",
          "2268:      CAST(off_t, offsetof(struct magic, ext)),",
          "2269:      sizeof(m->ext), \"EXTENSION\", \",!+-/\", 0);",
          "2270: }",
          "",
          "---------------"
        ],
        "src/ascmagic.c||src/ascmagic.c": [
          "File: src/ascmagic.c -> src/ascmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "41: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.90 2014/11/28 02:35:05 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: ascmagic.c,v 1.91 2014/11/28 02:46:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:  const char *code_mime = NULL;",
          "80:  const char *type = NULL;",
          "83:   return 0;",
          "85:  nbytes = trim_nuls(buf, nbytes);",
          "",
          "[Removed Lines]",
          "82:  if (ms->flags & MAGIC_APPLE)",
          "",
          "[Added Lines]",
          "82:  if (ms->flags & (MAGIC_APPLE|MAGIC_EXTENSION))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "123:  size_t last_line_end = (size_t)-1;",
          "124:  int has_long_lines = 0;",
          "127:   return 0;",
          "129:  nbytes = trim_nuls(buf, nbytes);",
          "",
          "[Removed Lines]",
          "126:  if (ms->flags & MAGIC_APPLE)",
          "",
          "[Added Lines]",
          "126:  if (ms->flags & (MAGIC_APPLE|MAGIC_EXTENSION))",
          "",
          "---------------"
        ],
        "src/file.c||src/file.c": [
          "File: src/file.c -> src/file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.161 2015/01/02 21:29:39 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: file.c,v 1.162 2015/02/09 20:15:50 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76: # define USAGE  \\",
          "77:     \"Usage: %s [\" FILE_FLAGS \\",
          "79:     \"            [-e testname] [-F separator] [-f namefile] [-m magicfiles] \" \\",
          "80:     \"file ...\\n\" \\",
          "81:     \"       %s -C [-m magicfiles]\\n\" \\",
          "",
          "[Removed Lines]",
          "78:  \"] [--apple] [--mime-encoding] [--mime-type]\\n\" \\",
          "",
          "[Added Lines]",
          "78:  \"] [--apple] [--extension] [--mime-encoding] [--mime-type]\\n\" \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191:     flags |= MAGIC_APPLE;",
          "192:     break;",
          "193:    case 11:",
          "195:     break;",
          "196:    case 12:",
          "197:     flags |= MAGIC_MIME_ENCODING;",
          "198:     break;",
          "199:    }",
          "",
          "[Removed Lines]",
          "194:     flags |= MAGIC_MIME_TYPE;",
          "",
          "[Added Lines]",
          "194:     flags |= MAGIC_EXTENSION;",
          "197:     flags |= MAGIC_MIME_TYPE;",
          "198:     break;",
          "199:    case 13:",
          "",
          "---------------"
        ],
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "137: #define MAGICNO  0xF11E041C",
          "141: #define FILE_LOAD 0",
          "142: #define FILE_CHECK 1",
          "",
          "[Removed Lines]",
          "138: #define VERSIONNO 12",
          "139: #define FILE_MAGICSIZE 248",
          "",
          "[Added Lines]",
          "138: #define VERSIONNO 13",
          "139: #define FILE_MAGICSIZE 312",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "311: };",
          "313: #define BIT(A)   (1 << (A))",
          "",
          "[Removed Lines]",
          "310:  char apple[8];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/file_opts.h||src/file_opts.h": [
          "File: src/file_opts.h -> src/file_opts.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: OPT('i', \"mime\", 0, \"                 output MIME type strings (--mime-type and\\n\"",
          "30:     \"                               --mime-encoding)\\n\")",
          "31: OPT_LONGONLY(\"apple\", 0, \"                output the Apple CREATOR/TYPE\\n\")",
          "32: OPT_LONGONLY(\"mime-type\", 0, \"            output the MIME type\\n\")",
          "33: OPT_LONGONLY(\"mime-encoding\", 0, \"        output the MIME encoding\\n\")",
          "34: OPT('k', \"keep-going\", 0, \"           don't stop at the first match\\n\")",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: OPT_LONGONLY(\"extension\", 0, \"            output a comma-separated list of extnsions\\n\")",
          "",
          "---------------"
        ],
        "src/fsmagic.c||src/fsmagic.c": [
          "File: src/fsmagic.c -> src/fsmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: fsmagic.c,v 1.74 2014/10/13 20:21:49 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: fsmagic.c,v 1.75 2014/12/04 15:56:46 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "110:  struct stat tstatbuf;",
          "111: #endif",
          "114:   return 0;",
          "115:  if (fn == NULL)",
          "116:   return 0;",
          "",
          "[Removed Lines]",
          "113:  if (ms->flags & MAGIC_APPLE)",
          "",
          "[Added Lines]",
          "113:  if (ms->flags & (MAGIC_APPLE|MAGIC_EXTENSION))",
          "",
          "---------------"
        ],
        "src/is_tar.c||src/is_tar.c": [
          "File: src/is_tar.c -> src/is_tar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40: #include \"file.h\"",
          "42: #ifndef lint",
          "44: #endif",
          "46: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "43: FILE_RCSID(\"@(#)$File: is_tar.c,v 1.36 2009/02/03 20:27:51 christos Exp $\")",
          "",
          "[Added Lines]",
          "43: FILE_RCSID(\"@(#)$File: is_tar.c,v 1.37 2010/11/30 14:58:53 rrt Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "69:  int tar;",
          "70:  int mime = ms->flags & MAGIC_MIME;",
          "73:   return 0;",
          "75:  tar = is_tar(buf, nbytes);",
          "",
          "[Removed Lines]",
          "72:  if ((ms->flags & MAGIC_APPLE) != 0)",
          "",
          "[Added Lines]",
          "72:  if ((ms->flags & (MAGIC_APPLE|MAGIC_EXTENSION)) != 0)",
          "",
          "---------------"
        ],
        "src/readcdf.c||src/readcdf.c": [
          "File: src/readcdf.c -> src/readcdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #include \"file.h\"",
          "28: #ifndef lint",
          "30: #endif",
          "32: #include <assert.h>",
          "",
          "[Removed Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.51 2015/01/11 16:58:25 christos Exp $\")",
          "",
          "[Added Lines]",
          "29: FILE_RCSID(\"@(#)$File: readcdf.c,v 1.52 2015/02/27 21:16:38 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "454:         info.i_fd = fd;",
          "455:         info.i_buf = buf;",
          "456:         info.i_len = nbytes;",
          "458:                 return 0;",
          "459:         if (cdf_read_header(&info, &h) == -1)",
          "460:                 return 0;",
          "",
          "[Removed Lines]",
          "457:         if (ms->flags & MAGIC_APPLE)",
          "",
          "[Added Lines]",
          "457:         if (ms->flags & (MAGIC_APPLE|MAGIC_EXTENSION))",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.117 2014/12/16 23:29:42 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.118 2015/01/02 21:29:39 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1353:  Elf64_Ehdr elf64hdr;",
          "1354:  uint16_t type, phnum, shnum, notecount;",
          "1357:   return 0;",
          "",
          "[Removed Lines]",
          "1356:  if (ms->flags & (MAGIC_MIME|MAGIC_APPLE))",
          "",
          "[Added Lines]",
          "1356:  if (ms->flags & (MAGIC_MIME|MAGIC_APPLE|MAGIC_EXTENSION))",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.212 2015/01/24 22:11:25 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.213 2015/02/14 18:43:12 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:  unsigned int cont_level = 0;",
          "152:  if (returnval == NULL)",
          "153:   returnval = &returnvalv;",
          "",
          "[Removed Lines]",
          "150:  int print = (ms->flags & (MAGIC_MIME|MAGIC_APPLE)) == 0;",
          "",
          "[Added Lines]",
          "150:  int print = (ms->flags & (MAGIC_MIME|MAGIC_APPLE|MAGIC_EXTENSION)) == 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1674:    return -1;",
          "1676:   if (rv == 1) {",
          "1678:        file_printf(ms, F(ms, m, \"%u\"), offset) == -1) {",
          "1679:     free(rbuf);",
          "1680:     return -1;",
          "",
          "[Removed Lines]",
          "1677:    if ((ms->flags & (MAGIC_MIME|MAGIC_APPLE)) == 0 &&",
          "",
          "[Added Lines]",
          "1677:    if ((ms->flags & (MAGIC_MIME|MAGIC_APPLE|MAGIC_EXTENSION)) == 0 &&",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2136:    return -1;",
          "2137:   return 1;",
          "2138:  }",
          "2139:  if ((ms->flags & MAGIC_MIME_TYPE) && m->mimetype[0]) {",
          "2140:   if (file_printf(ms, \"%s\", m->mimetype) == -1)",
          "2141:    return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2139:  if (ms->flags & MAGIC_EXTENSION) {",
          "2140:   if (file_printf(ms, \"%s\", m->ext) == -1)",
          "2141:    return -1;",
          "2142:   return 1;",
          "2143:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d683328df506519bd674624dd4bff3c8dbef3e75",
      "candidate_info": {
        "commit_hash": "d683328df506519bd674624dd4bff3c8dbef3e75",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/d683328df506519bd674624dd4bff3c8dbef3e75",
        "files": [
          "src/cdf.c"
        ],
        "message": "Fix thumbs parsing (wrong offsets, skip first entry, pack)",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/cdf.c||src/cdf.c"
          ],
          "candidate": [
            "src/cdf.c||src/cdf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.74 2015/01/11 17:00:23 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.75 2015/02/27 21:16:55 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1026:      CDF_SHORT_SEC_SIZE(h) : CDF_SEC_SIZE(h);",
          "1027:  const char *b = CAST(const char *, sst->sst_tab);",
          "1028:  const char *eb = b + ss * sst->sst_len;",
          "1030:  cdf_catalog_entry_t *ce;",
          "1031:  uint16_t reclen;",
          "1032:  const uint16_t *np;",
          "1035:   memcpy(&reclen, b, sizeof(reclen));",
          "1036:   reclen = CDF_TOLE2(reclen);",
          "1037:   if (reclen == 0)",
          "1038:    break;",
          "1039:   b += reclen;",
          "1040:  }",
          "1042:      malloc(sizeof(cdf_catalog_t) + nr * sizeof(*ce)));",
          "1044:  ce = (*cat)->cat_e;",
          "1045:  memset(ce, 0, nr * sizeof(*ce));",
          "1046:  b = CAST(const char *, sst->sst_tab);",
          "1049:   uint16_t rlen;",
          "1051:   extract_catalog_field(uint16_t, ce_namlen, 0);",
          "1054:   reclen = cep->ce_namlen;",
          "1056:   if (reclen < 14) {",
          "",
          "[Removed Lines]",
          "1029:  size_t nr, i, k;",
          "1034:  for (nr = 0; b < eb; nr++) {",
          "1043:  (*cat)->cat_num = nr;",
          "1047:  for (i = 0; i < nr; i++, b += reclen) {",
          "1048:   cdf_catalog_entry_t *cep = &ce[i];",
          "1052:   extract_catalog_field(uint16_t, ce_num, 2);",
          "1053:   extract_catalog_field(uint64_t, ce_timestamp, 6);",
          "",
          "[Added Lines]",
          "1029:  size_t nr, i, j, k;",
          "1034:  for (nr = 0;; nr++) {",
          "1040:   if (b > eb)",
          "1041:       break;",
          "1043:  nr--;",
          "1049:  for (j = i = 0; i < nr; b += reclen) {",
          "1050:   cdf_catalog_entry_t *cep = &ce[j];",
          "1054:   extract_catalog_field(uint16_t, ce_num, 4);",
          "1055:   extract_catalog_field(uint64_t, ce_timestamp, 8);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1072:   for (k = 0; k < cep->ce_namlen; k++)",
          "1074:   cep->ce_name[cep->ce_namlen] = 0;",
          "1075:  }",
          "1076:  return 0;",
          "1077: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1077:   j = i;",
          "1078:   i++;",
          "1080:  (*cat)->cat_num = j;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1431:  cdf_dir_t dir;",
          "1432:  cdf_info_t info;",
          "1433:  const cdf_directory_t *root;",
          "1435:  if (argc < 2) {",
          "1436:   (void)fprintf(stderr, \"Usage: %s <filename>\\n\", getprogname());",
          "1437:   return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1439: #ifdef __linux__",
          "1440: #define getprogname() __progname",
          "1441:  extern char *__progname;",
          "1442: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1484:    cdf_dump_summary_info(&h, &scn);",
          "1485: #endif",
          "1486:   if (cdf_read_user_stream(&info, &h, &sat, &ssat, &sst,",
          "1488:    warn(\"Cannot read catalog\");",
          "1489: #ifdef CDF_DEBUG",
          "1490:   else",
          "",
          "[Removed Lines]",
          "1487:       &dir, \"Catalog\", &scn) <= 0)",
          "",
          "[Added Lines]",
          "1495:       &dir, \"Catalog\", &scn) == -1)",
          "",
          "---------------"
        ]
      }
    }
  ]
}