{
  "cve_id": "CVE-2021-4166",
  "cve_desc": "vim is vulnerable to Out-of-bounds Read",
  "repo": "vim/vim",
  "patch_hash": "6f98371532fcff911b462d51bc64f2ce8a6ae682",
  "patch_info": {
    "commit_hash": "6f98371532fcff911b462d51bc64f2ce8a6ae682",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/6f98371532fcff911b462d51bc64f2ce8a6ae682",
    "files": [
      "src/arglist.c",
      "src/testdir/test_arglist.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.3884: crash when clearing the argument list while using it\n\nProblem:    Crash when clearing the argument list while using it.\nSolution:   Lock the argument list for \":all\".",
    "before_after_code_files": [
      "src/arglist.c||src/arglist.c",
      "src/testdir/test_arglist.vim||src/testdir/test_arglist.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/arglist.c||src/arglist.c": [
      "File: src/arglist.c -> src/arglist.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "910:     tabpage_T *old_curtab, *last_curtab;",
      "911:     win_T *new_curwin = NULL;",
      "912:     tabpage_T *new_curtab = NULL;",
      "914: #ifdef FEAT_CMDWIN",
      "915:     if (cmdwin_type != 0)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "913:     int  prev_arglist_locked = arglist_locked;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "937:     alist = curwin->w_alist;",
      "938:     ++alist->al_refcount;",
      "940:     old_curwin = curwin;",
      "941:     old_curtab = curtab;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "940:     arglist_locked = TRUE;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1157:     alist_unlink(alist);",
      "1159:     --autocmd_no_enter;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1160:     arglist_locked = prev_arglist_locked;",
      "",
      "---------------"
    ],
    "src/testdir/test_arglist.vim||src/testdir/test_arglist.vim": [
      "File: src/testdir/test_arglist.vim -> src/testdir/test_arglist.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "583:   au! BufEnter",
      "584: endfunc",
      "586: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "586: func Test_clear_arglist_in_all()",
      "587:   n 0 00 000 0000 00000 000000",
      "588:   au! * 0 n 0",
      "589:   all",
      "590:   au! *",
      "591: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "750: static int included_patches[] =",
      "753:     3883,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "753:     3884,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8894761daf68220504932c8b3e75f59138cdb617",
      "candidate_info": {
        "commit_hash": "8894761daf68220504932c8b3e75f59138cdb617",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/8894761daf68220504932c8b3e75f59138cdb617",
        "files": [
          "src/arglist.c",
          "src/version.c"
        ],
        "message": "patch 9.0.0388: the do_arg_all() function is too long\n\nProblem:    The do_arg_all() function is too long.\nSolution:   Split the function in smaller parts. (Yegappan Lakshmanan,\n            closes #11062)",
        "before_after_code_files": [
          "src/arglist.c||src/arglist.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/arglist.c||src/arglist.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/arglist.c||src/arglist.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/arglist.c||src/arglist.c": [
          "File: src/arglist.c -> src/arglist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:      alist_new();",
          "575:     }",
          "577:     if (*eap->arg != NUL)",
          "578:     {",
          "579:  if (check_arglist_locked() == FAIL)",
          "580:      return;",
          "583:  ex_next(eap);",
          "584:     }",
          "586:     {",
          "587:  char_u **items;",
          "590:  if (ARGCOUNT <= 0)",
          "593:  items = ALLOC_MULT(char_u *, ARGCOUNT);",
          "594:  if (items == NULL)",
          "",
          "[Removed Lines]",
          "585:     else if (eap->cmdidx == CMD_args)",
          "591:      return;",
          "",
          "[Added Lines]",
          "584:  return;",
          "588:     if (eap->cmdidx == CMD_args)",
          "593:      return;  // empty argument list",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "602:      items[i] = alist_name(&ARGLIST[i]);",
          "603:  list_in_columns(items, ARGCOUNT, curwin->w_arg_idx);",
          "604:  vim_free(items);",
          "605:     }",
          "607:     {",
          "608:  garray_T *gap = &curwin->w_alist->al_ga;",
          "611:  if (GA_GROW_FAILS(gap, GARGCOUNT))",
          "612:      return;",
          "",
          "[Removed Lines]",
          "606:     else if (eap->cmdidx == CMD_arglocal)",
          "",
          "[Added Lines]",
          "608:  return;",
          "612:     if (eap->cmdidx == CMD_arglocal)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "919: }",
          "932:     char_u *opened; // Array of weight for which args are open:",
          "938:     int  opened_len; // length of opened[]",
          "980:     old_curwin = curwin;",
          "981:     old_curtab = curtab;",
          "993:  goto_tabpage_tp(first_tabpage, TRUE, TRUE);",
          "994:     for (;;)",
          "995:     {",
          "",
          "[Removed Lines]",
          "924:     static void",
          "925: do_arg_all(",
          "926:     int count,",
          "927:     int forceit,  // hide buffers in current windows",
          "928:     int keep_tabs)  // keep current tabs, for \":tab drop file\"",
          "929: {",
          "930:     int  i;",
          "931:     win_T *wp, *wpnext;",
          "939:     int  use_firstwin = FALSE; // use first window for arglist",
          "940:     int  tab_drop_empty_window = FALSE;",
          "941:     int  split_ret = OK;",
          "942:     int  p_ea_save;",
          "943:     alist_T *alist;  // argument list to be used",
          "944:     buf_T *buf;",
          "945:     tabpage_T *tpnext;",
          "946:     int  had_tab = cmdmod.cmod_tab;",
          "947:     win_T *old_curwin, *last_curwin;",
          "948:     tabpage_T *old_curtab, *last_curtab;",
          "949:     win_T *new_curwin = NULL;",
          "950:     tabpage_T *new_curtab = NULL;",
          "951:     int  prev_arglist_locked = arglist_locked;",
          "953: #ifdef FEAT_CMDWIN",
          "954:     if (cmdwin_type != 0)",
          "955:     {",
          "956:  emsg(_(e_invalid_in_cmdline_window));",
          "957:  return;",
          "958:     }",
          "959: #endif",
          "960:     if (ARGCOUNT <= 0)",
          "961:     {",
          "964:  return;",
          "965:     }",
          "966:     setpcmark();",
          "968:     opened_len = ARGCOUNT;",
          "969:     opened = alloc_clear(opened_len);",
          "970:     if (opened == NULL)",
          "971:  return;",
          "976:     alist = curwin->w_alist;",
          "977:     ++alist->al_refcount;",
          "978:     arglist_locked = TRUE;",
          "983: #ifdef FEAT_GUI",
          "984:     need_mouse_correct = TRUE;",
          "985: #endif",
          "992:     if (had_tab > 0)",
          "",
          "[Added Lines]",
          "930: typedef struct {",
          "931:     alist_T *alist;  // argument list to be used",
          "932:     int  had_tab;",
          "933:     int  keep_tabs;",
          "934:     int  forceit;",
          "936:     int  use_firstwin; // use first window for arglist",
          "943:     win_T *new_curwin;",
          "944:     tabpage_T *new_curtab;",
          "945: } arg_all_state_T;",
          "951:     static void",
          "952: arg_all_close_unused_windows(arg_all_state_T *aall)",
          "953: {",
          "954:     win_T *wp;",
          "955:     win_T *wpnext;",
          "956:     tabpage_T *tpnext;",
          "957:     buf_T *buf;",
          "958:     int  i;",
          "959:     win_T *old_curwin;",
          "960:     tabpage_T *old_curtab;",
          "965:     if (aall->had_tab > 0)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "999:      wpnext = wp->w_next;",
          "1000:      buf = wp->w_buffer;",
          "1001:      if (buf->b_ffname == NULL",
          "1003:        || wp->w_width != Columns)))",
          "1005:      else",
          "1006:      {",
          "1009:   {",
          "1013:      buf->b_ffname, TRUE, TRUE) & FPC_SAME))",
          "1014:       {",
          "1015:    int weight = 1;",
          "",
          "[Removed Lines]",
          "1002:       || (!keep_tabs && (buf->b_nwindows > 1",
          "1004:   i = opened_len;",
          "1008:   for (i = 0; i < opened_len; ++i)",
          "1010:       if (i < alist->al_ga.ga_len",
          "1011:        && (AARGLIST(alist)[i].ae_fnum == buf->b_fnum",
          "1012:     || fullpathcmp(alist_name(&AARGLIST(alist)[i]),",
          "",
          "[Added Lines]",
          "975:       || (!aall->keep_tabs && (buf->b_nwindows > 1",
          "977:   i = aall->opened_len;",
          "981:   for (i = 0; i < aall->opened_len; ++i)",
          "983:       if (i < aall->alist->al_ga.ga_len",
          "984:        && (AARGLIST(aall->alist)[i].ae_fnum == buf->b_fnum",
          "985:     || fullpathcmp(alist_name(&AARGLIST(aall->alist)[i]),",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1021:     ++weight;",
          "1022:    }",
          "1025:    {",
          "1027:        if (i == 0)",
          "1028:        {",
          "1033:        }",
          "1034:    }",
          "1039:    {",
          "1042:        alist_unlink(wp->w_alist);",
          "1044:        ++wp->w_alist->al_refcount;",
          "1045:    }",
          "1046:    break;",
          "",
          "[Removed Lines]",
          "1024:    if (weight > (int)opened[i])",
          "1026:        opened[i] = (char_u)weight;",
          "1029:     if (new_curwin != NULL)",
          "1030:         new_curwin->w_arg_idx = opened_len;",
          "1031:     new_curwin = wp;",
          "1032:     new_curtab = curtab;",
          "1035:    else if (keep_tabs)",
          "1036:        i = opened_len;",
          "1038:    if (wp->w_alist != alist)",
          "1043:        wp->w_alist = alist;",
          "",
          "[Added Lines]",
          "997:    if (weight > (int)aall->opened[i])",
          "999:        aall->opened[i] = (char_u)weight;",
          "1002:     if (aall->new_curwin != NULL)",
          "1003:         aall->new_curwin->w_arg_idx = aall->opened_len;",
          "1004:     aall->new_curwin = wp;",
          "1005:     aall->new_curtab = curtab;",
          "1008:    else if (aall->keep_tabs)",
          "1009:        i = aall->opened_len;",
          "1011:    if (wp->w_alist != aall->alist)",
          "1016:        wp->w_alist = aall->alist;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1049:      }",
          "1050:      wp->w_arg_idx = i;",
          "1053:      {",
          "1055:        || !bufIsChanged(buf))",
          "1056:   {",
          "",
          "[Removed Lines]",
          "1052:      if (i == opened_len && !keep_tabs)// close this window",
          "1054:   if (buf_hide(buf) || forceit || buf->b_nwindows > 1",
          "",
          "[Added Lines]",
          "1025:      if (i == aall->opened_len && !aall->keep_tabs)// close this window",
          "1027:   if (buf_hide(buf) || aall->forceit || buf->b_nwindows > 1",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1074:       }",
          "1076:       if (ONE_WINDOW",
          "1079:       else",
          "1080:       {",
          "1081:    win_close(wp, !buf_hide(buf) && !bufIsChanged(buf));",
          "",
          "[Removed Lines]",
          "1077:        && (first_tabpage->tp_next == NULL || !had_tab))",
          "1078:    use_firstwin = TRUE;",
          "",
          "[Added Lines]",
          "1050:        && (first_tabpage->tp_next == NULL",
          "1051:     || !aall->had_tab))",
          "1052:    aall->use_firstwin = TRUE;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1089:  }",
          "1093:      break;",
          "",
          "[Removed Lines]",
          "1092:  if (had_tab == 0 || tpnext == NULL)",
          "",
          "[Added Lines]",
          "1066:  if (aall->had_tab == 0 || tpnext == NULL)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1099:  goto_tabpage_tp(tpnext, TRUE, TRUE);",
          "1100:     }",
          "1116:        && curbuf->b_ffname == NULL && !curbuf->b_changed)",
          "1117:     {",
          "1119:  tab_drop_empty_window = TRUE;",
          "1120:     }",
          "1122:     for (i = 0; i < count && !got_int; ++i)",
          "1123:     {",
          "1125:      arg_had_last = TRUE;",
          "1127:  {",
          "1129:      if (curwin->w_arg_idx != i)",
          "1130:      {",
          "1132:   {",
          "1134:       {",
          "1136:    {",
          "1139:    }",
          "1142:    {",
          "1143:        emsg(_(e_window_layout_changed_unexpectedly));",
          "1144:        i = count;",
          "1145:        break;",
          "1146:    }",
          "1147:    else",
          "1149:    break;",
          "1150:       }",
          "1151:   }",
          "",
          "[Removed Lines]",
          "1104:     if (count > opened_len || count <= 0)",
          "1105:  count = opened_len;",
          "1108:     ++autocmd_no_enter;",
          "1109:     ++autocmd_no_leave;",
          "1110:     last_curwin = curwin;",
          "1111:     last_curtab = curtab;",
          "1112:     win_enter(lastwin, FALSE);",
          "1115:     if (keep_tabs && BUFEMPTY() && curbuf->b_nwindows == 1",
          "1118:  use_firstwin = TRUE;",
          "1124:  if (alist == &global_alist && i == global_alist.al_ga.ga_len - 1)",
          "1126:  if (opened[i] > 0)",
          "1131:   FOR_ALL_WINDOWS(wpnext)",
          "1133:       if (wpnext->w_arg_idx == i)",
          "1135:    if (keep_tabs)",
          "1137:        new_curwin = wpnext;",
          "1138:        new_curtab = curtab;",
          "1140:    else if (wpnext->w_frame->fr_parent",
          "1141:        != curwin->w_frame->fr_parent)",
          "1148:        win_move_after(wpnext, curwin);",
          "",
          "[Added Lines]",
          "1075: }",
          "1080:     static void",
          "1081: arg_all_open_windows(arg_all_state_T *aall, int count)",
          "1082: {",
          "1083:     win_T *wp;",
          "1084:     int  tab_drop_empty_window = FALSE;",
          "1085:     int  i;",
          "1086:     int  split_ret = OK;",
          "1087:     int  p_ea_save;",
          "1091:     if (aall->keep_tabs && BUFEMPTY() && curbuf->b_nwindows == 1",
          "1094:  aall->use_firstwin = TRUE;",
          "1100:  if (aall->alist == &global_alist && i == global_alist.al_ga.ga_len - 1)",
          "1102:  if (aall->opened[i] > 0)",
          "1107:   FOR_ALL_WINDOWS(wp)",
          "1109:       if (wp->w_arg_idx == i)",
          "1111:    if (aall->keep_tabs)",
          "1113:        aall->new_curwin = wp;",
          "1114:        aall->new_curtab = curtab;",
          "1116:    else if (wp->w_frame->fr_parent",
          "1117:     != curwin->w_frame->fr_parent)",
          "1124:        win_move_after(wp, curwin);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1157:      if (tab_drop_empty_window && i == count - 1)",
          "1158:   --autocmd_no_enter;",
          "1160:      {",
          "1161:   p_ea_save = p_ea;",
          "1162:   p_ea = TRUE;  // use space from all windows",
          "",
          "[Removed Lines]",
          "1159:      if (!use_firstwin)  // split current window",
          "",
          "[Added Lines]",
          "1135:      if (!aall->use_firstwin)  // split current window",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1172:      curwin->w_arg_idx = i;",
          "1173:      if (i == 0)",
          "1174:      {",
          "1177:      }",
          "1183:      if (tab_drop_empty_window && i == count - 1)",
          "1184:   ++autocmd_no_enter;",
          "1186:   ++autocmd_no_leave;",
          "1188:  }",
          "1189:  ui_breakcheck();",
          "1193:      cmdmod.cmod_tab = 9999;",
          "1194:     }",
          "1198:     arglist_locked = prev_arglist_locked;",
          "1200:     --autocmd_no_enter;",
          "1204:     {",
          "1205:  if (valid_tabpage(last_curtab))",
          "1206:      goto_tabpage_tp(last_curtab, TRUE, TRUE);",
          "",
          "[Removed Lines]",
          "1175:   new_curwin = curwin;",
          "1176:   new_curtab = curtab;",
          "1178:      (void)do_ecmd(0, alist_name(&AARGLIST(alist)[i]), NULL, NULL,",
          "1179:         ECMD_ONE,",
          "1180:         ((buf_hide(curwin->w_buffer)",
          "1181:       || bufIsChanged(curwin->w_buffer)) ? ECMD_HIDE : 0)",
          "1182:              + ECMD_OLDBUF, curwin);",
          "1185:      if (use_firstwin)",
          "1187:      use_firstwin = FALSE;",
          "1192:  if (had_tab > 0 && tabpage_index(NULL) <= p_tpm)",
          "1197:     alist_unlink(alist);",
          "1203:     if (last_curtab != new_curtab)",
          "",
          "[Added Lines]",
          "1151:   aall->new_curwin = curwin;",
          "1152:   aall->new_curtab = curtab;",
          "1154:      (void)do_ecmd(0, alist_name(&AARGLIST(aall->alist)[i]), NULL, NULL,",
          "1155:       ECMD_ONE,",
          "1156:       ((buf_hide(curwin->w_buffer)",
          "1157:         || bufIsChanged(curwin->w_buffer)) ? ECMD_HIDE : 0)",
          "1158:       + ECMD_OLDBUF, curwin);",
          "1161:      if (aall->use_firstwin)",
          "1163:      aall->use_firstwin = FALSE;",
          "1168:  if (aall->had_tab > 0 && tabpage_index(NULL) <= p_tpm)",
          "1171: }",
          "1176:     static void",
          "1177: do_arg_all(",
          "1178:     int count,",
          "1179:     int forceit,  // hide buffers in current windows",
          "1180:     int keep_tabs)  // keep current tabs, for \":tab drop file\"",
          "1181: {",
          "1182:     arg_all_state_T aall;",
          "1183:     win_T  *last_curwin;",
          "1184:     tabpage_T  *last_curtab;",
          "1185:     int   prev_arglist_locked = arglist_locked;",
          "1187: #ifdef FEAT_CMDWIN",
          "1188:     if (cmdwin_type != 0)",
          "1189:     {",
          "1190:  emsg(_(e_invalid_in_cmdline_window));",
          "1191:  return;",
          "1192:     }",
          "1193: #endif",
          "1194:     if (ARGCOUNT <= 0)",
          "1195:     {",
          "1198:  return;",
          "1199:     }",
          "1200:     setpcmark();",
          "1202:     aall.use_firstwin = FALSE;",
          "1203:     aall.had_tab = cmdmod.cmod_tab;",
          "1204:     aall.new_curwin = NULL;",
          "1205:     aall.new_curtab = NULL;",
          "1206:     aall.forceit = forceit;",
          "1207:     aall.keep_tabs = keep_tabs;",
          "1208:     aall.opened_len = ARGCOUNT;",
          "1209:     aall.opened = alloc_clear(aall.opened_len);",
          "1210:     if (aall.opened == NULL)",
          "1211:  return;",
          "1216:     aall.alist = curwin->w_alist;",
          "1217:     ++aall.alist->al_refcount;",
          "1218:     arglist_locked = TRUE;",
          "1220: #ifdef FEAT_GUI",
          "1221:     need_mouse_correct = TRUE;",
          "1222: #endif",
          "1229:     arg_all_close_unused_windows(&aall);",
          "1233:     if (count > aall.opened_len || count <= 0)",
          "1234:  count = aall.opened_len;",
          "1237:     ++autocmd_no_enter;",
          "1238:     ++autocmd_no_leave;",
          "1239:     last_curwin = curwin;",
          "1240:     last_curtab = curtab;",
          "1241:     win_enter(lastwin, FALSE);",
          "1246:     arg_all_open_windows(&aall, count);",
          "1249:     alist_unlink(aall.alist);",
          "1255:     if (last_curtab != aall.new_curtab)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1208:      win_enter(last_curwin, FALSE);",
          "1209:     }",
          "1216:     --autocmd_no_leave;",
          "1218: }",
          "",
          "[Removed Lines]",
          "1211:     if (valid_tabpage(new_curtab))",
          "1212:  goto_tabpage_tp(new_curtab, TRUE, TRUE);",
          "1213:     if (win_valid(new_curwin))",
          "1214:  win_enter(new_curwin, FALSE);",
          "1217:     vim_free(opened);",
          "",
          "[Added Lines]",
          "1263:     if (valid_tabpage(aall.new_curtab))",
          "1264:  goto_tabpage_tp(aall.new_curtab, TRUE, TRUE);",
          "1265:     if (win_valid(aall.new_curwin))",
          "1266:  win_enter(aall.new_curwin, FALSE);",
          "1269:     vim_free(aall.opened);",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "704: static int included_patches[] =",
          "707:     387,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "707:     388,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "679140c56bbabf12a199d94f584b1b9dfc9809fd",
      "candidate_info": {
        "commit_hash": "679140c56bbabf12a199d94f584b1b9dfc9809fd",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/679140c56bbabf12a199d94f584b1b9dfc9809fd",
        "files": [
          "src/testdir/test_arglist.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.3885: arglist test fails\n\nProblem:    Arglist test fails.\nSolution:   Adjust for locking the arglist for \":all\".",
        "before_after_code_files": [
          "src/testdir/test_arglist.vim||src/testdir/test_arglist.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_arglist.vim||src/testdir/test_arglist.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_arglist.vim||src/testdir/test_arglist.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/testdir/test_arglist.vim||src/testdir/test_arglist.vim": [
          "File: src/testdir/test_arglist.vim -> src/testdir/test_arglist.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "484:   new",
          "485:   \" redefine arglist; go to Xxx1",
          "486:   next! Xxx1 Xxx2 Xxx3",
          "493:   call assert_equal('test file Xxx1', getline(1))",
          "494:   wincmd w",
          "498:   call assert_equal('test file Xxx2', getline(1))",
          "500:   autocmd! BufReadPost Xxx2",
          "501:   enew! | only",
          "",
          "[Removed Lines]",
          "487:   \" open window for all args; Reading Xxx2 will change the arglist and the",
          "488:   \" third window will get Xxx1:",
          "489:   \"   win 1: Xxx1",
          "490:   \"   win 2: Xxx2",
          "491:   \"   win 3: Xxx1",
          "492:   all",
          "495:   wincmd w",
          "496:   call assert_equal('test file Xxx1', getline(1))",
          "497:   rewind",
          "",
          "[Added Lines]",
          "487:   \" open window for all args; Reading Xxx2 will try to change the arglist and",
          "488:   \" that will fail",
          "489:   call assert_fails(\"all\", \"E1156:\")",
          "493:   wincmd w",
          "494:   call assert_equal('test file Xxx3', getline(1))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "586: func Test_clear_arglist_in_all()",
          "587:   n 0 00 000 0000 00000 000000",
          "588:   au! * 0 n 0",
          "590:   au! *",
          "591: endfunc",
          "",
          "[Removed Lines]",
          "589:   all",
          "",
          "[Added Lines]",
          "585:   call assert_fails(\"all\", \"E1156\")",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "750: static int included_patches[] =",
          "753:     3884,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "753:     3885,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6db1467622be046dbf00b2213fd9f49f4f3cccb",
      "candidate_info": {
        "commit_hash": "b6db1467622be046dbf00b2213fd9f49f4f3cccb",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/b6db1467622be046dbf00b2213fd9f49f4f3cccb",
        "files": [
          "src/autocmd.c",
          "src/testdir/test_arglist.vim",
          "src/testdir/test_autocmd.vim",
          "src/version.c"
        ],
        "message": "patch 8.2.3886: can define autocmd for every event by using \"au!\"\n\nProblem:    Can define autocmd for every event by using \"au!\".\nSolution:   Check if a command is present also for \"au!\".",
        "before_after_code_files": [
          "src/autocmd.c||src/autocmd.c",
          "src/testdir/test_arglist.vim||src/testdir/test_arglist.vim",
          "src/testdir/test_autocmd.vim||src/testdir/test_autocmd.vim",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/testdir/test_arglist.vim||src/testdir/test_arglist.vim",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/testdir/test_arglist.vim||src/testdir/test_arglist.vim",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/autocmd.c||src/autocmd.c": [
          "File: src/autocmd.c -> src/autocmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "967:     last_group = AUGROUP_ERROR;  // for listing the group name",
          "968:     if (*arg == '*' || *arg == NUL || *arg == '|')",
          "969:     {",
          "971:      emsg(_(e_cannot_define_autocommands_for_all_events));",
          "972:  else",
          "973:      for (event = (event_T)0; (int)event < NUM_EVENTS;",
          "",
          "[Removed Lines]",
          "970:  if (!forceit && *cmd != NUL)",
          "",
          "[Added Lines]",
          "970:  if (*cmd != NUL)",
          "",
          "---------------"
        ],
        "src/testdir/test_arglist.vim||src/testdir/test_arglist.vim": [
          "File: src/testdir/test_arglist.vim -> src/testdir/test_arglist.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "582: func Test_clear_arglist_in_all()",
          "583:   n 0 00 000 0000 00000 000000",
          "585:   call assert_fails(\"all\", \"E1156\")",
          "586:   au! *",
          "587: endfunc",
          "",
          "[Removed Lines]",
          "584:   au! * 0 n 0",
          "",
          "[Added Lines]",
          "584:   au WinNew 0 n 0",
          "",
          "---------------"
        ],
        "src/testdir/test_autocmd.vim||src/testdir/test_autocmd.vim": [
          "File: src/testdir/test_autocmd.vim -> src/testdir/test_autocmd.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1896: func Test_autocommand_all_events()",
          "1897:   call assert_fails('au * * bwipe', 'E1155:')",
          "1898:   call assert_fails('au * x bwipe', 'E1155:')",
          "1899: endfunc",
          "1901: function s:Before_test_dirchanged()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1899:   call assert_fails('au! * x bwipe', 'E1155:')",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "750: static int included_patches[] =",
          "753:     3885,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "753:     3886,",
          "",
          "---------------"
        ]
      }
    }
  ]
}