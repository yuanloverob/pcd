{
  "cve_id": "CVE-2022-29199",
  "cve_desc": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.LoadAndRemapMatrix does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. The code assumes `initializing_values` is a vector but there is no validation for this before accessing its value. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "3150642acbbe254e3c3c5d2232143fa591855ac9",
  "patch_info": {
    "commit_hash": "3150642acbbe254e3c3c5d2232143fa591855ac9",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/3150642acbbe254e3c3c5d2232143fa591855ac9",
    "files": [
      "tensorflow/core/kernels/load_and_remap_matrix_op.cc",
      "tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py"
    ],
    "message": "Fix tf.raw_ops.LoadAndRemapMatrix vulnerability with invalid `row_remapping`.\n\nCheck that `row_remapping` has the correct dims().\n\nPiperOrigin-RevId: 445522800",
    "before_after_code_files": [
      "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc",
      "tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py||tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc": [
      "File: tensorflow/core/kernels/load_and_remap_matrix_op.cc -> tensorflow/core/kernels/load_and_remap_matrix_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "74:     std::vector<bool> row_id_present;",
      "75:     const Tensor* row_remapping_t;",
      "76:     OP_REQUIRES_OK(context, context->input(\"row_remapping\", &row_remapping_t));",
      "77:     const auto row_remapping = row_remapping_t->vec<int64_t>();",
      "78:     OP_REQUIRES(context, row_remapping.size() == num_rows_,",
      "79:                 errors::InvalidArgument(strings::StrCat(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "77:     OP_REQUIRES(",
      "78:         context, row_remapping_t->dims() == 1,",
      "79:         errors::InvalidArgument(\"The `row_remapping` tensor must be 1-D, got \"",
      "80:                                 \"a tensor of shape \",",
      "81:                                 row_remapping_t->shape().DebugString()));",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py||tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py": [
      "File: tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py -> tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "227:           np.reshape(initializing_values, (num_rows, num_cols)),",
      "228:           self.evaluate(remapped_matrix))",
      "230:   @test_util.run_deprecated_v1",
      "231:   def test_load_and_remap_invalid_remapping(self):",
      "232:     \"\"\"Tests that errors are raised when an ID maps to multiple new IDs.",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "230:   def test_load_and_remap_invalid_dims(self):",
      "231:     ckpt_path = constant_op.constant(",
      "232:         '/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0',",
      "233:         shape=[],",
      "234:         dtype=dtypes.string)",
      "235:     old_tensor_name = constant_op.constant(",
      "236:         '/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0',",
      "237:         shape=[],",
      "238:         dtype=dtypes.string)",
      "239:     row_remapping = constant_op.constant(0, shape=[], dtype=dtypes.int64)",
      "240:     col_remapping = constant_op.constant(3, shape=[3], dtype=dtypes.int64)",
      "241:     initializing_values = constant_op.constant([],",
      "242:                                                shape=[0, 1],",
      "243:                                                dtype=dtypes.float32)",
      "244:     with self.cached_session(), self.assertRaisesRegex(",
      "245:         (ValueError, errors.InvalidArgumentError), 'tensor must be 1-D'):",
      "246:       self.evaluate(",
      "247:           gen_checkpoint_ops.load_and_remap_matrix(",
      "248:               ckpt_path=ckpt_path,",
      "249:               old_tensor_name=old_tensor_name,",
      "250:               row_remapping=row_remapping,",
      "251:               col_remapping=col_remapping,",
      "252:               initializing_values=initializing_values,",
      "253:               num_rows=1,",
      "254:               num_cols=1))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "15649a0369fd11f4a2671754ecde58cd9d76571b",
      "candidate_info": {
        "commit_hash": "15649a0369fd11f4a2671754ecde58cd9d76571b",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/15649a0369fd11f4a2671754ecde58cd9d76571b",
        "files": [
          "tensorflow/core/kernels/load_and_remap_matrix_op.cc",
          "tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py"
        ],
        "message": "Fix tf.raw_ops.LoadAndRemapMatrix vulnerability with invalid `row_remapping`.\n\nCheck that `row_remapping` has the correct dims().\n\nPiperOrigin-RevId: 445522800",
        "before_after_code_files": [
          "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc",
          "tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py||tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc",
            "tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py||tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc",
            "tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py||tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc": [
          "File: tensorflow/core/kernels/load_and_remap_matrix_op.cc -> tensorflow/core/kernels/load_and_remap_matrix_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     std::vector<bool> row_id_present;",
          "75:     const Tensor* row_remapping_t;",
          "76:     OP_REQUIRES_OK(context, context->input(\"row_remapping\", &row_remapping_t));",
          "77:     const auto row_remapping = row_remapping_t->vec<int64_t>();",
          "78:     OP_REQUIRES(context, row_remapping.size() == num_rows_,",
          "79:                 errors::InvalidArgument(strings::StrCat(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     OP_REQUIRES(",
          "78:         context, row_remapping_t->dims() == 1,",
          "79:         errors::InvalidArgument(\"The `row_remapping` tensor must be 1-D, got \"",
          "80:                                 \"a tensor of shape \",",
          "81:                                 row_remapping_t->shape().DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py||tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py": [
          "File: tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py -> tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:           np.reshape(initializing_values, (num_rows, num_cols)),",
          "228:           self.evaluate(remapped_matrix))",
          "230:   @test_util.run_deprecated_v1",
          "231:   def test_load_and_remap_invalid_remapping(self):",
          "232:     \"\"\"Tests that errors are raised when an ID maps to multiple new IDs.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:   def test_load_and_remap_invalid_dims(self):",
          "231:     ckpt_path = constant_op.constant(",
          "232:         '/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0',",
          "233:         shape=[],",
          "234:         dtype=dtypes.string)",
          "235:     old_tensor_name = constant_op.constant(",
          "236:         '/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0',",
          "237:         shape=[],",
          "238:         dtype=dtypes.string)",
          "239:     row_remapping = constant_op.constant(0, shape=[], dtype=dtypes.int64)",
          "240:     col_remapping = constant_op.constant(3, shape=[3], dtype=dtypes.int64)",
          "241:     initializing_values = constant_op.constant([],",
          "242:                                                shape=[0, 1],",
          "243:                                                dtype=dtypes.float32)",
          "244:     with self.cached_session(), self.assertRaisesRegex(",
          "245:         (ValueError, errors.InvalidArgumentError), 'tensor must be 1-D'):",
          "246:       self.evaluate(",
          "247:           gen_checkpoint_ops.load_and_remap_matrix(",
          "248:               ckpt_path=ckpt_path,",
          "249:               old_tensor_name=old_tensor_name,",
          "250:               row_remapping=row_remapping,",
          "251:               col_remapping=col_remapping,",
          "252:               initializing_values=initializing_values,",
          "253:               num_rows=1,",
          "254:               num_cols=1))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "199e1bb4dea6c3597917b416e58d84fb256ae1bc",
      "candidate_info": {
        "commit_hash": "199e1bb4dea6c3597917b416e58d84fb256ae1bc",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/199e1bb4dea6c3597917b416e58d84fb256ae1bc",
        "files": [
          "tensorflow/core/kernels/load_and_remap_matrix_op.cc",
          "tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py"
        ],
        "message": "Fix tf.raw_ops.LoadAndRemapMatrix vulnerability with invalid `row_remapping`.\n\nCheck that `row_remapping` has the correct dims().\n\nPiperOrigin-RevId: 445522800",
        "before_after_code_files": [
          "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc",
          "tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py||tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc",
            "tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py||tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc",
            "tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py||tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc": [
          "File: tensorflow/core/kernels/load_and_remap_matrix_op.cc -> tensorflow/core/kernels/load_and_remap_matrix_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     std::vector<bool> row_id_present;",
          "75:     const Tensor* row_remapping_t;",
          "76:     OP_REQUIRES_OK(context, context->input(\"row_remapping\", &row_remapping_t));",
          "77:     const auto row_remapping = row_remapping_t->vec<int64_t>();",
          "78:     OP_REQUIRES(context, row_remapping.size() == num_rows_,",
          "79:                 errors::InvalidArgument(strings::StrCat(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     OP_REQUIRES(",
          "78:         context, row_remapping_t->dims() == 1,",
          "79:         errors::InvalidArgument(\"The `row_remapping` tensor must be 1-D, got \"",
          "80:                                 \"a tensor of shape \",",
          "81:                                 row_remapping_t->shape().DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py||tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py": [
          "File: tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py -> tensorflow/python/kernel_tests/io_ops/checkpoint_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "227:           np.reshape(initializing_values, (num_rows, num_cols)),",
          "228:           self.evaluate(remapped_matrix))",
          "230:   @test_util.run_deprecated_v1",
          "231:   def test_load_and_remap_invalid_remapping(self):",
          "232:     \"\"\"Tests that errors are raised when an ID maps to multiple new IDs.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230:   def test_load_and_remap_invalid_dims(self):",
          "231:     ckpt_path = constant_op.constant(",
          "232:         '/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0',",
          "233:         shape=[],",
          "234:         dtype=dtypes.string)",
          "235:     old_tensor_name = constant_op.constant(",
          "236:         '/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0',",
          "237:         shape=[],",
          "238:         dtype=dtypes.string)",
          "239:     row_remapping = constant_op.constant(0, shape=[], dtype=dtypes.int64)",
          "240:     col_remapping = constant_op.constant(3, shape=[3], dtype=dtypes.int64)",
          "241:     initializing_values = constant_op.constant([],",
          "242:                                                shape=[0, 1],",
          "243:                                                dtype=dtypes.float32)",
          "244:     with self.cached_session(), self.assertRaisesRegex(",
          "245:         (ValueError, errors.InvalidArgumentError), 'tensor must be 1-D'):",
          "246:       self.evaluate(",
          "247:           gen_checkpoint_ops.load_and_remap_matrix(",
          "248:               ckpt_path=ckpt_path,",
          "249:               old_tensor_name=old_tensor_name,",
          "250:               row_remapping=row_remapping,",
          "251:               col_remapping=col_remapping,",
          "252:               initializing_values=initializing_values,",
          "253:               num_rows=1,",
          "254:               num_cols=1))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9df20480061a8186a3c60d77026cccd76f6b18c1",
      "candidate_info": {
        "commit_hash": "9df20480061a8186a3c60d77026cccd76f6b18c1",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/9df20480061a8186a3c60d77026cccd76f6b18c1",
        "files": [
          "tensorflow/core/kernels/load_and_remap_matrix_op.cc",
          "tensorflow/python/kernel_tests/checkpoint_ops_test.py"
        ],
        "message": "Fix tf.raw_ops.LoadAndRemapMatrix vulnerability with invalid `row_remapping`.\n\nCheck that `row_remapping` has the correct dims().\n\nPiperOrigin-RevId: 445522800",
        "before_after_code_files": [
          "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc",
          "tensorflow/python/kernel_tests/checkpoint_ops_test.py||tensorflow/python/kernel_tests/checkpoint_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc": [
          "File: tensorflow/core/kernels/load_and_remap_matrix_op.cc -> tensorflow/core/kernels/load_and_remap_matrix_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     std::vector<bool> row_id_present;",
          "75:     const Tensor* row_remapping_t;",
          "76:     OP_REQUIRES_OK(context, context->input(\"row_remapping\", &row_remapping_t));",
          "77:     const auto row_remapping = row_remapping_t->vec<int64_t>();",
          "78:     OP_REQUIRES(context, row_remapping.size() == num_rows_,",
          "79:                 errors::InvalidArgument(strings::StrCat(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:     OP_REQUIRES(",
          "78:         context, row_remapping_t->dims() == 1,",
          "79:         errors::InvalidArgument(\"The `row_remapping` tensor must be 1-D, got \"",
          "80:                                 \"a tensor of shape \",",
          "81:                                 row_remapping_t->shape().DebugString()));",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/checkpoint_ops_test.py||tensorflow/python/kernel_tests/checkpoint_ops_test.py": [
          "File: tensorflow/python/kernel_tests/checkpoint_ops_test.py -> tensorflow/python/kernel_tests/checkpoint_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:           np.reshape(initializing_values, (num_rows, num_cols)),",
          "232:           self.evaluate(remapped_matrix))",
          "234:   @test_util.run_deprecated_v1",
          "235:   def test_load_and_remap_invalid_remapping(self):",
          "236:     \"\"\"Tests that errors are raised when an ID maps to multiple new IDs.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:   def test_load_and_remap_invalid_dims(self):",
          "235:     ckpt_path = constant_op.constant(",
          "236:         '/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0',",
          "237:         shape=[],",
          "238:         dtype=dtypes.string)",
          "239:     old_tensor_name = constant_op.constant(",
          "240:         '/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0',",
          "241:         shape=[],",
          "242:         dtype=dtypes.string)",
          "243:     row_remapping = constant_op.constant(0, shape=[], dtype=dtypes.int64)",
          "244:     col_remapping = constant_op.constant(3, shape=[3], dtype=dtypes.int64)",
          "245:     initializing_values = constant_op.constant([],",
          "246:                                                shape=[0, 1],",
          "247:                                                dtype=dtypes.float32)",
          "248:     with self.cached_session(), self.assertRaisesRegex(",
          "249:         (ValueError, errors.InvalidArgumentError), 'tensor must be 1-D'):",
          "250:       self.evaluate(",
          "251:           gen_checkpoint_ops.load_and_remap_matrix(",
          "252:               ckpt_path=ckpt_path,",
          "253:               old_tensor_name=old_tensor_name,",
          "254:               row_remapping=row_remapping,",
          "255:               col_remapping=col_remapping,",
          "256:               initializing_values=initializing_values,",
          "257:               num_rows=1,",
          "258:               num_cols=1))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6b413bd525fe57870064e6aa0a28f7f7d9015c0c",
      "candidate_info": {
        "commit_hash": "6b413bd525fe57870064e6aa0a28f7f7d9015c0c",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/6b413bd525fe57870064e6aa0a28f7f7d9015c0c",
        "files": [
          "tensorflow/core/kernels/load_and_remap_matrix_op.cc",
          "tensorflow/python/kernel_tests/checkpoint_ops_test.py"
        ],
        "message": "Fix tf.raw_ops.LoadAndRemapMatrix vulnerability with invalid `row_remapping`.\n\nCheck that `row_remapping` has the correct dims().\n\nPiperOrigin-RevId: 445522800",
        "before_after_code_files": [
          "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc",
          "tensorflow/python/kernel_tests/checkpoint_ops_test.py||tensorflow/python/kernel_tests/checkpoint_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/load_and_remap_matrix_op.cc||tensorflow/core/kernels/load_and_remap_matrix_op.cc": [
          "File: tensorflow/core/kernels/load_and_remap_matrix_op.cc -> tensorflow/core/kernels/load_and_remap_matrix_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:     std::vector<bool> row_id_present;",
          "75:     const Tensor* row_remapping_t;",
          "76:     OP_REQUIRES_OK(context, context->input(\"row_remapping\", &row_remapping_t));",
          "78:     OP_REQUIRES(context, row_remapping.size() == num_rows_,",
          "79:                 errors::InvalidArgument(strings::StrCat(",
          "80:                     \"Size of row_remapping is \", row_remapping.size(),",
          "",
          "[Removed Lines]",
          "77:     const auto row_remapping = row_remapping_t->vec<int64>();",
          "",
          "[Added Lines]",
          "77:     OP_REQUIRES(",
          "78:         context, row_remapping_t->dims() == 1,",
          "79:         errors::InvalidArgument(\"The `row_remapping` tensor must be 1-D, got \"",
          "80:                                 \"a tensor of shape \",",
          "81:                                 row_remapping_t->shape().DebugString()));",
          "82:     const auto row_remapping = row_remapping_t->vec<int64_t>();",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/checkpoint_ops_test.py||tensorflow/python/kernel_tests/checkpoint_ops_test.py": [
          "File: tensorflow/python/kernel_tests/checkpoint_ops_test.py -> tensorflow/python/kernel_tests/checkpoint_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:           np.reshape(initializing_values, (num_rows, num_cols)),",
          "232:           self.evaluate(remapped_matrix))",
          "234:   @test_util.run_deprecated_v1",
          "235:   def test_load_and_remap_invalid_remapping(self):",
          "236:     \"\"\"Tests that errors are raised when an ID maps to multiple new IDs.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "234:   def test_load_and_remap_invalid_dims(self):",
          "235:     ckpt_path = constant_op.constant(",
          "236:         '/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0',",
          "237:         shape=[],",
          "238:         dtype=dtypes.string)",
          "239:     old_tensor_name = constant_op.constant(",
          "240:         '/tmp/warm_starting_util_test5kl2a3pc/tmpph76tep2/model-0',",
          "241:         shape=[],",
          "242:         dtype=dtypes.string)",
          "243:     row_remapping = constant_op.constant(0, shape=[], dtype=dtypes.int64)",
          "244:     col_remapping = constant_op.constant(3, shape=[3], dtype=dtypes.int64)",
          "245:     initializing_values = constant_op.constant([],",
          "246:                                                shape=[0, 1],",
          "247:                                                dtype=dtypes.float32)",
          "248:     with self.cached_session(), self.assertRaisesRegex(",
          "249:         (ValueError, errors.InvalidArgumentError), 'tensor must be 1-D'):",
          "250:       self.evaluate(",
          "251:           gen_checkpoint_ops.load_and_remap_matrix(",
          "252:               ckpt_path=ckpt_path,",
          "253:               old_tensor_name=old_tensor_name,",
          "254:               row_remapping=row_remapping,",
          "255:               col_remapping=col_remapping,",
          "256:               initializing_values=initializing_values,",
          "257:               num_rows=1,",
          "258:               num_cols=1))",
          "",
          "---------------"
        ]
      }
    }
  ]
}