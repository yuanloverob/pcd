{
  "cve_id": "CVE-2021-29517",
  "cve_desc": "TensorFlow is an end-to-end open source platform for machine learning. A malicious user could trigger a division by 0 in `Conv3D` implementation. The implementation(https://github.com/tensorflow/tensorflow/blob/42033603003965bffac51ae171b51801565e002d/tensorflow/core/kernels/conv_ops_3d.cc#L143-L145) does a modulo operation based on user controlled input. Thus, when `filter` has a 0 as the fifth element, this results in a division by 0. Additionally, if the shape of the two tensors is not valid, an Eigen assertion can be triggered, resulting in a program crash. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "799f835a3dfa00a4d852defa29b15841eea9d64f",
  "patch_info": {
    "commit_hash": "799f835a3dfa00a4d852defa29b15841eea9d64f",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/799f835a3dfa00a4d852defa29b15841eea9d64f",
    "files": [
      "tensorflow/core/kernels/conv_ops_3d.cc"
    ],
    "message": "Fix 2 issues with `Conv3D`.\n\nWe have an issue where the dimensions are not matching and this causes Eigen to crash on an assert.\n\nThen, we have an issue where we accidentally do a division by 0.\n\nPiperOrigin-RevId: 369242785\nChange-Id: Ie94067b2d41f58699af99ebb5af335ad9defd931",
    "before_after_code_files": [
      "tensorflow/core/kernels/conv_ops_3d.cc||tensorflow/core/kernels/conv_ops_3d.cc"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/conv_ops_3d.cc||tensorflow/core/kernels/conv_ops_3d.cc": [
      "File: tensorflow/core/kernels/conv_ops_3d.cc -> tensorflow/core/kernels/conv_ops_3d.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "69:                 errors::InvalidArgument(\"CPU implementation of Conv3D \"",
      "70:                                         \"currently only supports dilated rates \"",
      "71:                                         \"of 1.\"));",
      "72:     functor::CuboidConvolution<CPUDevice, T>()(",
      "73:         context->eigen_device<CPUDevice>(), output->tensor<T, 5>(),",
      "74:         input.tensor<T, 5>(), filter.tensor<T, 5>(), strides[2], strides[1],",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72:     OP_REQUIRES(context, filter.dim_size(3) == input.dim_size(input.dims() - 1),",
      "73:                 errors::InvalidArgument(",
      "74:                     \"Number of channels in filter (\", filter.dim_size(3),",
      "75:                     \") must match last dimension of input (\",",
      "76:                     input.dim_size(input.dims() - 1), \")\"));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "142:     const int64 filter_depth = filter.dim_size(3);",
      "143:     const int64 out_depth = filter.dim_size(4);",
      "145:     OP_REQUIRES(context, in_depth % filter_depth == 0,",
      "146:                 errors::InvalidArgument(",
      "147:                     \"Input depth must be evenly divisible by filter depth: \",",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "150:     OP_REQUIRES(context, filter_depth != 0,",
      "151:                 errors::InvalidArgument(\"filter_depth must be non-zero\"));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "12cffa082f33a902799481f4fc8a2841db7ce3fd",
      "candidate_info": {
        "commit_hash": "12cffa082f33a902799481f4fc8a2841db7ce3fd",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/12cffa082f33a902799481f4fc8a2841db7ce3fd",
        "files": [
          "tensorflow/core/kernels/conv_ops_3d.cc"
        ],
        "message": "Fix 2 issues with `Conv3D`.\n\nWe have an issue where the dimensions are not matching and this causes Eigen to crash on an assert.\n\nThen, we have an issue where we accidentally do a division by 0.\n\nPiperOrigin-RevId: 369242785\nChange-Id: Ie94067b2d41f58699af99ebb5af335ad9defd931",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_ops_3d.cc||tensorflow/core/kernels/conv_ops_3d.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_ops_3d.cc||tensorflow/core/kernels/conv_ops_3d.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_ops_3d.cc||tensorflow/core/kernels/conv_ops_3d.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_ops_3d.cc||tensorflow/core/kernels/conv_ops_3d.cc": [
          "File: tensorflow/core/kernels/conv_ops_3d.cc -> tensorflow/core/kernels/conv_ops_3d.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "69:                 errors::InvalidArgument(\"CPU implementation of Conv3D \"",
          "70:                                         \"currently only supports dilated rates \"",
          "71:                                         \"of 1.\"));",
          "72:     functor::CuboidConvolution<CPUDevice, T>()(",
          "73:         context->eigen_device<CPUDevice>(), output->tensor<T, 5>(),",
          "74:         input.tensor<T, 5>(), filter.tensor<T, 5>(), strides[2], strides[1],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "72:     OP_REQUIRES(context, filter.dim_size(3) == input.dim_size(input.dims() - 1),",
          "73:                 errors::InvalidArgument(",
          "74:                     \"Number of channels in filter (\", filter.dim_size(3),",
          "75:                     \") must match last dimension of input (\",",
          "76:                     input.dim_size(input.dims() - 1), \")\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:     const int64 filter_depth = filter.dim_size(3);",
          "143:     const int64 out_depth = filter.dim_size(4);",
          "145:     OP_REQUIRES(context, in_depth % filter_depth == 0,",
          "146:                 errors::InvalidArgument(",
          "147:                     \"Input depth must be evenly divisible by filter depth: \",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "150:     OP_REQUIRES(context, filter_depth != 0,",
          "151:                 errors::InvalidArgument(\"filter_depth must be non-zero\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6535ee9aae5af3af39a4aad4d51301470bcee4ae",
      "candidate_info": {
        "commit_hash": "6535ee9aae5af3af39a4aad4d51301470bcee4ae",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/6535ee9aae5af3af39a4aad4d51301470bcee4ae",
        "files": [
          "tensorflow/core/kernels/conv_ops_3d.cc"
        ],
        "message": "Fix 2 issues with `Conv3D`.\n\nWe have an issue where the dimensions are not matching and this causes Eigen to crash on an assert.\n\nThen, we have an issue where we accidentally do a division by 0.\n\nPiperOrigin-RevId: 369242785\nChange-Id: Ie94067b2d41f58699af99ebb5af335ad9defd931",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_ops_3d.cc||tensorflow/core/kernels/conv_ops_3d.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_ops_3d.cc||tensorflow/core/kernels/conv_ops_3d.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_ops_3d.cc||tensorflow/core/kernels/conv_ops_3d.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_ops_3d.cc||tensorflow/core/kernels/conv_ops_3d.cc": [
          "File: tensorflow/core/kernels/conv_ops_3d.cc -> tensorflow/core/kernels/conv_ops_3d.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:                 errors::InvalidArgument(\"CPU implementation of Conv3D \"",
          "68:                                         \"currently only supports dilated rates \"",
          "69:                                         \"of 1.\"));",
          "70:     functor::CuboidConvolution<CPUDevice, T>()(",
          "71:         context->eigen_device<CPUDevice>(), output->tensor<T, 5>(),",
          "72:         input.tensor<T, 5>(), filter.tensor<T, 5>(), strides[2], strides[1],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     OP_REQUIRES(context, filter.dim_size(3) == input.dim_size(input.dims() - 1),",
          "71:                 errors::InvalidArgument(",
          "72:                     \"Number of channels in filter (\", filter.dim_size(3),",
          "73:                     \") must match last dimension of input (\",",
          "74:                     input.dim_size(input.dims() - 1), \")\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:     const int64 filter_depth = filter.dim_size(3);",
          "141:     const int64 out_depth = filter.dim_size(4);",
          "143:     OP_REQUIRES(context, in_depth % filter_depth == 0,",
          "144:                 errors::InvalidArgument(",
          "145:                     \"Input depth must be evenly divisible by filter depth: \",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:     OP_REQUIRES(context, filter_depth != 0,",
          "149:                 errors::InvalidArgument(\"filter_depth must be non-zero\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d6024286e55d3fafcd3dde55c48a7591569c262",
      "candidate_info": {
        "commit_hash": "2d6024286e55d3fafcd3dde55c48a7591569c262",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/2d6024286e55d3fafcd3dde55c48a7591569c262",
        "files": [
          "tensorflow/core/kernels/conv_ops_3d.cc"
        ],
        "message": "Fix 2 issues with `Conv3D`.\n\nWe have an issue where the dimensions are not matching and this causes Eigen to crash on an assert.\n\nThen, we have an issue where we accidentally do a division by 0.\n\nPiperOrigin-RevId: 369242785\nChange-Id: Ie94067b2d41f58699af99ebb5af335ad9defd931",
        "before_after_code_files": [
          "tensorflow/core/kernels/conv_ops_3d.cc||tensorflow/core/kernels/conv_ops_3d.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/conv_ops_3d.cc||tensorflow/core/kernels/conv_ops_3d.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/conv_ops_3d.cc||tensorflow/core/kernels/conv_ops_3d.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/conv_ops_3d.cc||tensorflow/core/kernels/conv_ops_3d.cc": [
          "File: tensorflow/core/kernels/conv_ops_3d.cc -> tensorflow/core/kernels/conv_ops_3d.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "67:                 errors::InvalidArgument(\"CPU implementation of Conv3D \"",
          "68:                                         \"currently only supports dilated rates \"",
          "69:                                         \"of 1.\"));",
          "70:     functor::CuboidConvolution<CPUDevice, T>()(",
          "71:         context->eigen_device<CPUDevice>(), output->tensor<T, 5>(),",
          "72:         input.tensor<T, 5>(), filter.tensor<T, 5>(), strides[2], strides[1],",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70:     OP_REQUIRES(context, filter.dim_size(3) == input.dim_size(input.dims() - 1),",
          "71:                 errors::InvalidArgument(",
          "72:                     \"Number of channels in filter (\", filter.dim_size(3),",
          "73:                     \") must match last dimension of input (\",",
          "74:                     input.dim_size(input.dims() - 1), \")\"));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "140:     const int64 filter_depth = filter.dim_size(3);",
          "141:     const int64 out_depth = filter.dim_size(4);",
          "143:     OP_REQUIRES(context, in_depth % filter_depth == 0,",
          "144:                 errors::InvalidArgument(",
          "145:                     \"Input depth must be evenly divisible by filter depth: \",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "148:     OP_REQUIRES(context, filter_depth != 0,",
          "149:                 errors::InvalidArgument(\"filter_depth must be non-zero\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}