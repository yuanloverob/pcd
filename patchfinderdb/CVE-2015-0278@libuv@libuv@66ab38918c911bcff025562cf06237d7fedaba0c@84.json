{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b1d390eb791d96e8b2e1755920e9139010b8704e",
      "candidate_info": {
        "commit_hash": "b1d390eb791d96e8b2e1755920e9139010b8704e",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/b1d390eb791d96e8b2e1755920e9139010b8704e",
        "files": [
          "src/win/util.c"
        ],
        "message": "windows: don't use uppercase in include filename\n\nChange <Winsock2.h> to <winsock2.h>. The former breaks\ncross-compilation with mingw.",
        "before_after_code_files": [
          "src/win/util.c||src/win/util.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/util.c||src/win/util.c": [
          "File: src/win/util.c -> src/win/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include \"uv.h\"",
          "32: #include \"internal.h\"",
          "35: #include <iphlpapi.h>",
          "36: #include <psapi.h>",
          "37: #include <tlhelp32.h>",
          "",
          "[Removed Lines]",
          "34: #include <Winsock2.h>",
          "",
          "[Added Lines]",
          "34: #include <winsock2.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d7a1ba85f204183244721d838a70286cb5cfddeb",
      "candidate_info": {
        "commit_hash": "d7a1ba85f204183244721d838a70286cb5cfddeb",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/d7a1ba85f204183244721d838a70286cb5cfddeb",
        "files": [
          "src/win/process.c"
        ],
        "message": "windows: fix mingw32 build, include limits.h\n\nsrc/win/process uses INT_MAX so include limits.h.",
        "before_after_code_files": [
          "src/win/process.c||src/win/process.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/process.c||src/win/process.c": [
          "File: src/win/process.c -> src/win/process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <stdio.h>",
          "25: #include <stdlib.h>",
          "26: #include <signal.h>",
          "28: #include \"uv.h\"",
          "29: #include \"internal.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #include <limits.h>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15140cebe1b2221ede19d6a31150e9597edc6ee7",
      "candidate_info": {
        "commit_hash": "15140cebe1b2221ede19d6a31150e9597edc6ee7",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/15140cebe1b2221ede19d6a31150e9597edc6ee7",
        "files": [
          "src/unix/tty.c"
        ],
        "message": "unix: fix handling uv__open_cloexec failure",
        "before_after_code_files": [
          "src/unix/tty.c||src/unix/tty.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/tty.c||src/unix/tty.c": [
          "File: src/unix/tty.c -> src/unix/tty.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56:   if (isatty(fd)) {",
          "57:     newfd = uv__open_cloexec(\"/dev/tty\", O_RDWR);",
          "62:     r = uv__dup2_cloexec(newfd, fd);",
          "63:     if (r < 0 && r != -EINVAL) {",
          "",
          "[Removed Lines]",
          "59:     if (newfd == -1)",
          "60:       return -errno;",
          "",
          "[Added Lines]",
          "59:     if (newfd < 0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f38869898d27d235ee45564385e462b1a1fcb797",
      "candidate_info": {
        "commit_hash": "f38869898d27d235ee45564385e462b1a1fcb797",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/f38869898d27d235ee45564385e462b1a1fcb797",
        "files": [
          "src/unix/fs.c"
        ],
        "message": "netbsd, openbsd: enable futimes() wrapper\n\nOpenBSD and NetBSD have working futimes() implementations.  This commit\nmakes uv_fs_futime() work on those platforms.",
        "before_after_code_files": [
          "src/unix/fs.c||src/unix/fs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/fs.c||src/unix/fs.c": [
          "File: src/unix/fs.c -> src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170: #elif defined(__APPLE__)                                                      \\",
          "171:     || defined(__DragonFly__)                                                 \\",
          "172:     || defined(__FreeBSD__)                                                   \\",
          "173:     || defined(__sun)",
          "174:   struct timeval tv[2];",
          "175:   tv[0].tv_sec  = req->atime;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:     || defined(__NetBSD__)                                                    \\",
          "174:     || defined(__OpenBSD__)                                                   \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6591d000d13714c9e362942fbeaeca2b29507a25",
      "candidate_info": {
        "commit_hash": "6591d000d13714c9e362942fbeaeca2b29507a25",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/6591d000d13714c9e362942fbeaeca2b29507a25",
        "files": [
          "docs/src/threading.rst",
          "src/unix/thread.c",
          "src/uv-common.c",
          "src/win/thread.c"
        ],
        "message": "win: fix uv_thread_self()\n\n59658a8de7cc05a58327a164fd2ed4b050f8b4f4 changed uv_thread_self()\nto return uv_thread_t, but uv_thread_t is a thread's HANDLE while\nuv_thread_self() returns the current thread's id.\nThis means that uv_thread_equal() is also broken, as we are\npotentially comparing HANDLES to ids.\n\nChanged uv_thread_self() to return the current thread's creation handle.\nFixed small doc issue.",
        "before_after_code_files": [
          "src/unix/thread.c||src/unix/thread.c",
          "src/uv-common.c||src/uv-common.c",
          "src/win/thread.c||src/win/thread.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/thread.c||src/unix/thread.c": [
          "File: src/unix/thread.c -> src/unix/thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #undef NANOSEC",
          "32: #define NANOSEC ((uint64_t) 1e9)",
          "34: int uv_thread_join(uv_thread_t *tid) {",
          "35:   return -pthread_join(*tid, NULL);",
          "36: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: struct thread_ctx {",
          "36:   void (*entry)(void* arg);",
          "37:   void* arg;",
          "38: };",
          "41: static void* uv__thread_start(void *arg)",
          "42: {",
          "43:   struct thread_ctx *ctx_p;",
          "44:   struct thread_ctx ctx;",
          "46:   ctx_p = arg;",
          "47:   ctx = *ctx_p;",
          "48:   free(ctx_p);",
          "49:   ctx.entry(ctx.arg);",
          "51:   return 0;",
          "52: }",
          "55: int uv_thread_create(uv_thread_t *tid, void (*entry)(void *arg), void *arg) {",
          "56:   struct thread_ctx* ctx;",
          "57:   int err;",
          "59:   ctx = malloc(sizeof(*ctx));",
          "60:   if (ctx == NULL)",
          "61:     return UV_ENOMEM;",
          "63:   ctx->entry = entry;",
          "64:   ctx->arg = arg;",
          "66:   err = pthread_create(tid, NULL, uv__thread_start, ctx);",
          "68:   if (err)",
          "69:     free(ctx);",
          "71:   return err ? -1 : 0;",
          "72: }",
          "75: uv_thread_t uv_thread_self(void) {",
          "76:   return pthread_self();",
          "77: }",
          "",
          "---------------"
        ],
        "src/uv-common.c||src/uv-common.c": [
          "File: src/uv-common.c -> src/uv-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "257: }",
          "318: void uv_walk(uv_loop_t* loop, uv_walk_cb walk_cb, void* arg) {",
          "319:   QUEUE* q;",
          "320:   uv_handle_t* h;",
          "",
          "[Removed Lines]",
          "260: struct thread_ctx {",
          "261:   void (*entry)(void* arg);",
          "262:   void* arg;",
          "263: };",
          "266: #ifdef _WIN32",
          "267: static UINT __stdcall uv__thread_start(void* arg)",
          "268: #else",
          "269: static void* uv__thread_start(void *arg)",
          "270: #endif",
          "271: {",
          "272:   struct thread_ctx *ctx_p;",
          "273:   struct thread_ctx ctx;",
          "275:   ctx_p = arg;",
          "276:   ctx = *ctx_p;",
          "277:   free(ctx_p);",
          "278:   ctx.entry(ctx.arg);",
          "280:   return 0;",
          "281: }",
          "284: int uv_thread_create(uv_thread_t *tid, void (*entry)(void *arg), void *arg) {",
          "285:   struct thread_ctx* ctx;",
          "286:   int err;",
          "288:   ctx = malloc(sizeof(*ctx));",
          "289:   if (ctx == NULL)",
          "290:     return UV_ENOMEM;",
          "292:   ctx->entry = entry;",
          "293:   ctx->arg = arg;",
          "295: #ifdef _WIN32",
          "297:   err = *tid ? 0 : errno;",
          "298: #else",
          "299:   err = pthread_create(tid, NULL, uv__thread_start, ctx);",
          "300: #endif",
          "302:   if (err)",
          "303:     free(ctx);",
          "305:   return err ? -1 : 0;",
          "306: }",
          "309: uv_thread_t uv_thread_self(void) {",
          "310: #ifdef _WIN32",
          "311:   return GetCurrentThreadId();",
          "312: #else",
          "313:   return pthread_self();",
          "314: #endif",
          "315: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/win/thread.c||src/win/thread.c": [
          "File: src/win/thread.c -> src/win/thread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "117:   uv__once_inner(guard, callback);",
          "118: }",
          "121: int uv_thread_join(uv_thread_t *tid) {",
          "122:   if (WaitForSingleObject(*tid, INFINITE))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "120: static UV_THREAD_LOCAL uv_thread_t uv__current_thread = NULL;",
          "122: struct thread_ctx {",
          "123:   void (*entry)(void* arg);",
          "124:   void* arg;",
          "125:   uv_thread_t self;",
          "126: };",
          "129: static UINT __stdcall uv__thread_start(void* arg)",
          "130: {",
          "131:   struct thread_ctx *ctx_p;",
          "132:   struct thread_ctx ctx;",
          "134:   ctx_p = arg;",
          "135:   ctx = *ctx_p;",
          "136:   free(ctx_p);",
          "138:   uv__current_thread = ctx.self;",
          "139:   ctx.entry(ctx.arg);",
          "141:   return 0;",
          "142: }",
          "145: int uv_thread_create(uv_thread_t *tid, void (*entry)(void *arg), void *arg) {",
          "146:   struct thread_ctx* ctx;",
          "147:   int err;",
          "148:   HANDLE thread;",
          "150:   ctx = malloc(sizeof(*ctx));",
          "151:   if (ctx == NULL)",
          "152:     return UV_ENOMEM;",
          "154:   ctx->entry = entry;",
          "155:   ctx->arg = arg;",
          "159:   thread = (HANDLE) _beginthreadex(NULL,",
          "160:                                    0,",
          "161:                                    uv__thread_start,",
          "162:                                    ctx,",
          "163:                                    CREATE_SUSPENDED,",
          "164:                                    NULL);",
          "165:   if (thread == NULL) {",
          "166:     err = errno;",
          "167:     free(ctx);",
          "168:   } else {",
          "169:     err = 0;",
          "171:     ctx->self = thread;",
          "172:     ResumeThread(thread);",
          "173:   }",
          "175:   return err;",
          "176: }",
          "179: uv_thread_t uv_thread_self(void) {",
          "180:   return uv__current_thread;",
          "181: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}