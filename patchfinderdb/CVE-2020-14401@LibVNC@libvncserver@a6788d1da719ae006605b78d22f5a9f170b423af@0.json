{
  "cve_id": "CVE-2020-14401",
  "cve_desc": "An issue was discovered in LibVNCServer before 0.9.13. libvncserver/scale.c has a pixel_value integer overflow.",
  "repo": "LibVNC/libvncserver",
  "patch_hash": "a6788d1da719ae006605b78d22f5a9f170b423af",
  "patch_info": {
    "commit_hash": "a6788d1da719ae006605b78d22f5a9f170b423af",
    "repo": "LibVNC/libvncserver",
    "commit_url": "https://github.com/LibVNC/libvncserver/commit/a6788d1da719ae006605b78d22f5a9f170b423af",
    "files": [
      "libvncserver/scale.c"
    ],
    "message": "libvncserver: scale: cast to 64 bit before shifting\n\nSince pixel_value is 64 bit the data type of the shift operand should\nbe 64 bit too to prevent integer overflows.",
    "before_after_code_files": [
      "libvncserver/scale.c||libvncserver/scale.c"
    ]
  },
  "patch_diff": {
    "libvncserver/scale.c||libvncserver/scale.c": [
      "File: libvncserver/scale.c -> libvncserver/scale.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "210:              default:",
      "212:                for (z = 0; z < bytesPerPixel; z++)",
      "214:                 break;",
      "215:               }",
      "",
      "[Removed Lines]",
      "213:                  pixel_value += (srcptr2[z] << (8 * z));",
      "",
      "[Added Lines]",
      "213:                  pixel_value += ((unsigned long)srcptr2[z] << (8 * z));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5face7b4d5f8a4e3c89ce3cfdb13abcfd3811818",
      "candidate_info": {
        "commit_hash": "5face7b4d5f8a4e3c89ce3cfdb13abcfd3811818",
        "repo": "LibVNC/libvncserver",
        "commit_url": "https://github.com/LibVNC/libvncserver/commit/5face7b4d5f8a4e3c89ce3cfdb13abcfd3811818",
        "files": [
          "libvncclient/trle.c",
          "libvncclient/zrle.c"
        ],
        "message": "libvncclient: fix always false/true expressions",
        "before_after_code_files": [
          "libvncclient/trle.c||libvncclient/trle.c",
          "libvncclient/zrle.c||libvncclient/zrle.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/LibVNC/libvncserver/pull/417"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libvncclient/trle.c||libvncclient/trle.c": [
          "File: libvncclient/trle.c -> libvncclient/trle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "253:         if (type <= 16) {",
          "254:           int i;",
          "257:           mask = (1 << bpp) - 1, divider = (8 / bpp);",
          "259:           if (!ReadFromRFBServer(client, (char *)buffer, type * REALBPP / 8))",
          "",
          "[Removed Lines]",
          "256:           bpp = (type > 4 ? (type > 16 ? 8 : 4) : (type > 2 ? 2 : 1)),",
          "",
          "[Added Lines]",
          "256:           bpp = (type > 4 ? 4 : (type > 2 ? 2 : 1)),",
          "",
          "---------------"
        ],
        "libvncclient/zrle.c||libvncclient/zrle.c": [
          "File: libvncclient/zrle.c -> libvncclient/zrle.c"
        ]
      }
    },
    {
      "candidate_hash": "9b12222e3c82e9779059c9f39fc5f6807d136950",
      "candidate_info": {
        "commit_hash": "9b12222e3c82e9779059c9f39fc5f6807d136950",
        "repo": "LibVNC/libvncserver",
        "commit_url": "https://github.com/LibVNC/libvncserver/commit/9b12222e3c82e9779059c9f39fc5f6807d136950",
        "files": [
          "libvncserver/ultra.c"
        ],
        "message": "libvncserver: ultra: cast to target type before multiplication",
        "before_after_code_files": [
          "libvncserver/ultra.c||libvncserver/ultra.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/LibVNC/libvncserver/pull/417"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libvncserver/ultra.c||libvncserver/ultra.c": [
          "File: libvncserver/ultra.c -> libvncserver/ultra.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     }",
          "",
          "[Removed Lines]",
          "99:     deflateResult = lzo1x_1_compress((unsigned char *)cl->beforeEncBuf, (lzo_uint)(w * h * (cl->format.bitsPerPixel / 8)), (unsigned char *)cl->afterEncBuf, &maxCompSize, cl->lzoWrkMem);",
          "",
          "[Added Lines]",
          "99:     deflateResult = lzo1x_1_compress((unsigned char *)cl->beforeEncBuf, (lzo_uint)w * h * (cl->format.bitsPerPixel / 8), (unsigned char *)cl->afterEncBuf, &maxCompSize, cl->lzoWrkMem);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8bb313b5d5b78eb1866cbf75dda3a4e74bf1941d",
      "candidate_info": {
        "commit_hash": "8bb313b5d5b78eb1866cbf75dda3a4e74bf1941d",
        "repo": "LibVNC/libvncserver",
        "commit_url": "https://github.com/LibVNC/libvncserver/commit/8bb313b5d5b78eb1866cbf75dda3a4e74bf1941d",
        "files": [
          "test/tjbench.c"
        ],
        "message": "test/tjbench: fix minor issues",
        "before_after_code_files": [
          "test/tjbench.c||test/tjbench.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/LibVNC/libvncserver/pull/417"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/tjbench.c||test/tjbench.c": [
          "File: test/tjbench.c -> test/tjbench.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "511: int main(int argc, char *argv[])",
          "512: {",
          "514:  int minqual=-1, maxqual=-1;  char *temp;",
          "515:  int minarg=2;  int retval=0;",
          "",
          "[Removed Lines]",
          "513:  unsigned char *srcbuf=NULL;  int w, h, i, j;",
          "",
          "[Added Lines]",
          "513:  unsigned char *srcbuf=NULL;  int w = 0, h = 0, i, j;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "602:     }",
          "603:     else usage(argv[0]);",
          "604:    }",
          "606:    {",
          "607:     double temp=atof(argv[++i]);",
          "608:     if(temp>0.0) benchtime=temp;",
          "",
          "[Removed Lines]",
          "605:    if(!strcasecmp(argv[i], \"-benchtime\") && i<argc-1)",
          "",
          "[Added Lines]",
          "605:    if(i<argc-1 && !strcasecmp(argv[i], \"-benchtime\"))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67944bf767960c7fa476bdaf144f160f5f8dc387",
      "candidate_info": {
        "commit_hash": "67944bf767960c7fa476bdaf144f160f5f8dc387",
        "repo": "LibVNC/libvncserver",
        "commit_url": "https://github.com/LibVNC/libvncserver/commit/67944bf767960c7fa476bdaf144f160f5f8dc387",
        "files": [
          "libvncserver/cursor.c"
        ],
        "message": "libvncserver: cursor: enable debugging via macro",
        "before_after_code_files": [
          "libvncserver/cursor.c||libvncserver/cursor.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/LibVNC/libvncserver/pull/417"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libvncserver/cursor.c||libvncserver/cursor.c": [
          "File: libvncserver/cursor.c -> libvncserver/cursor.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "375:    uint32_t background;",
          "376:    char *back=(char*)&background;",
          "377:    unsigned char bit;",
          "380:    if(cursor->source && cursor->cleanupSource)",
          "381:        free(cursor->source);",
          "",
          "[Removed Lines]",
          "378:    int interp = 0, db = 0;",
          "",
          "[Added Lines]",
          "378:    int interp = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "404:    g = (255 * (((format->greenMax << format->greenShift) & (*u)) >> format->greenShift)) / format->greenMax; \\",
          "405:    b = (255 * (((format->blueMax  << format->blueShift)  & (*u)) >> format->blueShift))  / format->blueMax;",
          "409:    for(j=0;j<cursor->height;j++) {",
          "410:  for(i=0,bit=0x80;i<cursor->width;i++,bit=(bit&1)?0x80:bit>>1) {",
          "",
          "[Removed Lines]",
          "407:    if (db) fprintf(stderr, \"interp: %d\\n\", interp);",
          "",
          "[Added Lines]",
          "407: #ifdef DEBUG_CURSOR",
          "408:    fprintf(stderr, \"interp: %d\\n\", interp);",
          "409: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "424:    grey = (r + g + b) / 3;",
          "425:    if (grey >= 128) {",
          "426:     cursor->source[j*w+i/8]|=bit;",
          "428:    } else {",
          "430:    }",
          "432:   } else if(memcmp(cursor->richSource+j*width+i*bpp, back, bpp)) {",
          "433:    cursor->source[j*w+i/8]|=bit;",
          "434:   }",
          "435:  }",
          "437:    }",
          "438: }",
          "",
          "[Removed Lines]",
          "427:     if (db) fprintf(stderr, \"1\");",
          "429:     if (db) fprintf(stderr, \"0\");",
          "436:  if (db) fprintf(stderr, \"\\n\");",
          "",
          "[Added Lines]",
          "429: #ifdef DEBUG_CURSOR",
          "430:     fprintf(stderr, \"1\");",
          "432:     fprintf(stderr, \"0\");",
          "433: #endif",
          "440: #ifdef DEBUG_CURSOR",
          "441:  fprintf(stderr, \"\\n\");",
          "442: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8551326e5be415b898caeed7de2ce796300a2553",
      "candidate_info": {
        "commit_hash": "8551326e5be415b898caeed7de2ce796300a2553",
        "repo": "LibVNC/libvncserver",
        "commit_url": "https://github.com/LibVNC/libvncserver/commit/8551326e5be415b898caeed7de2ce796300a2553",
        "files": [
          "examples/cursors.c",
          "examples/example.c",
          "examples/fontsel.c",
          "examples/repeater.c",
          "examples/simple15.c",
          "test/encodingstest.c"
        ],
        "message": "examples: fix various logical mistakes",
        "before_after_code_files": [
          "examples/cursors.c||examples/cursors.c",
          "examples/example.c||examples/example.c",
          "examples/fontsel.c||examples/fontsel.c",
          "examples/repeater.c||examples/repeater.c",
          "examples/simple15.c||examples/simple15.c",
          "test/encodingstest.c||test/encodingstest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/LibVNC/libvncserver/pull/417"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/cursors.c||examples/cursors.c": [
          "File: examples/cursors.c -> examples/cursors.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "236: {",
          "237:  int i,j;",
          "238:  rfbCursorPtr c = screen->cursor;",
          "241:  if(!c)",
          "242:   return;",
          "244:  if(c->alphaSource) {",
          "245:   free(c->alphaSource);",
          "246:   c->alphaSource=NULL;",
          "",
          "[Removed Lines]",
          "239:  int maskStride=(c->width+7)/8;",
          "",
          "[Added Lines]",
          "239:  int maskStride;",
          "244:  maskStride = (c->width+7)/8;",
          "",
          "---------------"
        ],
        "examples/example.c||examples/example.c": [
          "File: examples/example.c -> examples/example.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "153:    rfbGotXCutText(cl->screen,\"Hallo\",5);",
          "158:       cd->oldx=x; cd->oldy=y; cd->oldButton=buttonMask;",
          "159:    }",
          "",
          "[Removed Lines]",
          "155:       } else",
          "156:  cd->oldButton=0;",
          "",
          "[Added Lines]",
          "155:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "227: static void MakeRichCursor(rfbScreenInfoPtr rfbScreen)",
          "228: {",
          "229:   int i,j,w=32,h=32;",
          "231:   char bitmap[]=",
          "232:     \"                                \"",
          "233:     \"              xxxxxx            \"",
          "",
          "[Removed Lines]",
          "230:   rfbCursorPtr c = rfbScreen->cursor;",
          "",
          "[Added Lines]",
          "229:   rfbCursorPtr c;",
          "",
          "---------------"
        ],
        "examples/fontsel.c||examples/fontsel.c": [
          "File: examples/fontsel.c -> examples/fontsel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     exit(1);",
          "69:   }",
          "72:     rfbProcessEvents(s,900000);",
          "74:   i = rfbSelectBox(s,font,fontlist,10,20,200,300,0xffdfdf,0x602040,2,showFont);",
          "",
          "[Removed Lines]",
          "71:   for(j=0;j<0 && rfbIsActive(s);j++)",
          "",
          "[Added Lines]",
          "71:   for(j=0;j<10 && rfbIsActive(s);j++)",
          "",
          "---------------"
        ],
        "examples/repeater.c||examples/repeater.c": [
          "File: examples/repeater.c -> examples/repeater.c"
        ],
        "examples/simple15.c||examples/simple15.c": [
          "File: examples/simple15.c -> examples/simple15.c"
        ],
        "test/encodingstest.c||test/encodingstest.c": [
          "File: test/encodingstest.c -> test/encodingstest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "191:  clientData* cd;",
          "193:  client->clientData=malloc(sizeof(clientData));",
          "194:  client->MallocFrameBuffer=resize;",
          "195:  client->GotFrameBufferUpdate=update;",
          "196:  client->FinishedFrameBufferUpdate=update_finished;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "194:  if (!client->clientData) return;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "199:  cd->encodingIndex=encodingIndex;",
          "200:  cd->server=server;",
          "201:  cd->display=(char*)malloc(6);",
          "202:  sprintf(cd->display,\":%d\",server->port-5900);",
          "204: #if defined(LIBVNCSERVER_HAVE_LIBPTHREAD)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "203:  if (!cd->display) {",
          "204:   free(client->clientData);",
          "205:   return;",
          "206:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "289:  server=rfbGetScreen(&argc,argv,width,height,8,3,4);",
          "290:         if(!server)",
          "293:  server->frameBuffer=malloc(400*300*4);",
          "294:  server->cursor=NULL;",
          "295:  for(j=0;j<400*300*4;j++)",
          "296:   server->frameBuffer[j]=j;",
          "",
          "[Removed Lines]",
          "291:           return 0;",
          "",
          "[Added Lines]",
          "296:           return 1;",
          "299:  if (!server->frameBuffer)",
          "300:   return 1;",
          "",
          "---------------"
        ]
      }
    }
  ]
}