{
  "cve_id": "CVE-2013-7226",
  "cve_desc": "Integer overflow in the gdImageCrop function in ext/gd/gd.c in PHP 5.5.x before 5.5.9 allows remote attackers to cause a denial of service (application crash) or possibly have unspecified other impact via an imagecrop function call with a large x dimension value, leading to a heap-based buffer overflow.",
  "repo": "php/php-src",
  "patch_hash": "2938329ce19cb8c4197dec146c3ec887c6f61d01",
  "patch_info": {
    "commit_hash": "2938329ce19cb8c4197dec146c3ec887c6f61d01",
    "repo": "php/php-src",
    "commit_url": "https://github.com/php/php-src/commit/2938329ce19cb8c4197dec146c3ec887c6f61d01",
    "files": [
      "NEWS",
      "ext/gd/gd.c",
      "ext/gd/tests/bug66356.phpt",
      "main/php_version.h"
    ],
    "message": "Fixed bug #66356 (Heap Overflow Vulnerability in imagecrop())\n\nAnd also fixed the bug: arguments are altered after some calls",
    "before_after_code_files": [
      "ext/gd/gd.c||ext/gd/gd.c",
      "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt",
      "main/php_version.h||main/php_version.h"
    ]
  },
  "patch_diff": {
    "ext/gd/gd.c||ext/gd/gd.c": [
      "File: ext/gd/gd.c -> ext/gd/gd.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1538:    break;",
      "1539:   }",
      "1544:  }",
      "1546:  gdImageSetStyle(im, stylearr, index);",
      "",
      "[Removed Lines]",
      "1541:   convert_to_long_ex(item);",
      "1543:   stylearr[index++] = Z_LVAL_PP(item);",
      "",
      "[Added Lines]",
      "1541:   if (Z_TYPE_PP(item) != IS_LONG) {",
      "1542:    zval lval;",
      "1543:    lval = **item;",
      "1544:    zval_copy_ctor(&lval);",
      "1545:    convert_to_long(&lval);",
      "1546:    stylearr[index++] = Z_LVAL(lval);",
      "1547:   } else {",
      "1548:    stylearr[index++] = Z_LVAL_PP(item);",
      "1549:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3347:  for (i = 0; i < npoints; i++) {",
      "3348:   if (zend_hash_index_find(Z_ARRVAL_P(POINTS), (i * 2), (void **) &var) == SUCCESS) {",
      "3352:   }",
      "3353:   if (zend_hash_index_find(Z_ARRVAL_P(POINTS), (i * 2) + 1, (void **) &var) == SUCCESS) {",
      "3357:   }",
      "3358:  }",
      "",
      "[Removed Lines]",
      "3349:    SEPARATE_ZVAL((var));",
      "3350:    convert_to_long(*var);",
      "3351:    points[i].x = Z_LVAL_PP(var);",
      "3354:    SEPARATE_ZVAL(var);",
      "3355:    convert_to_long(*var);",
      "3356:    points[i].y = Z_LVAL_PP(var);",
      "",
      "[Added Lines]",
      "3355:    if (Z_TYPE_PP(var) != IS_LONG) {",
      "3356:     zval lval;",
      "3357:     lval = **var;",
      "3358:     zval_copy_ctor(&lval);",
      "3359:     convert_to_long(&lval);",
      "3360:     points[i].x = Z_LVAL(lval);",
      "3361:    } else {",
      "3362:     points[i].x = Z_LVAL_PP(var);",
      "3363:    }",
      "3366:    if (Z_TYPE_PP(var) != IS_LONG) {",
      "3367:     zval lval;",
      "3368:     lval = **var;",
      "3369:     zval_copy_ctor(&lval);",
      "3370:     convert_to_long(&lval);",
      "3371:     points[i].y = Z_LVAL(lval);",
      "3372:    } else {",
      "3373:     points[i].y = Z_LVAL_PP(var);",
      "3374:    }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "4860:    for (j=0; j<3; j++) {",
      "4861:     if (zend_hash_index_find(Z_ARRVAL_PP(var), (j), (void **) &var2) == SUCCESS) {",
      "4865:     } else {",
      "4866:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"You must have a 3x3 matrix\");",
      "4867:      RETURN_FALSE;",
      "",
      "[Removed Lines]",
      "4862:      SEPARATE_ZVAL(var2);",
      "4863:      convert_to_double(*var2);",
      "4864:      matrix[i][j] = (float)Z_DVAL_PP(var2);",
      "",
      "[Added Lines]",
      "4880:      if (Z_TYPE_PP(var2) != IS_DOUBLE) {",
      "4881:       zval dval;",
      "4882:       dval = **var;",
      "4883:       zval_copy_ctor(&dval);",
      "4884:       convert_to_double(&dval);",
      "4885:       matrix[i][j] = (float)Z_DVAL(dval);",
      "4886:      } else {",
      "4887:       matrix[i][j] = (float)Z_DVAL_PP(var2);",
      "4888:      }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "4954:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
      "4956:  if (zend_hash_find(HASH_OF(z_rect), \"x\", sizeof(\"x\"), (void **)&tmp) != FAILURE) {",
      "4958:  } else {",
      "4959:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing x position\");",
      "4960:   RETURN_FALSE;",
      "4961:  }",
      "4963:  if (zend_hash_find(HASH_OF(z_rect), \"y\", sizeof(\"x\"), (void **)&tmp) != FAILURE) {",
      "4965:  } else {",
      "4966:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing y position\");",
      "4967:   RETURN_FALSE;",
      "4968:  }",
      "4970:  if (zend_hash_find(HASH_OF(z_rect), \"width\", sizeof(\"width\"), (void **)&tmp) != FAILURE) {",
      "4972:  } else {",
      "4973:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing width\");",
      "4974:   RETURN_FALSE;",
      "4975:  }",
      "4977:  if (zend_hash_find(HASH_OF(z_rect), \"height\", sizeof(\"height\"), (void **)&tmp) != FAILURE) {",
      "4979:  } else {",
      "4980:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing height\");",
      "4981:   RETURN_FALSE;",
      "",
      "[Removed Lines]",
      "4957:   rect.x = Z_LVAL_PP(tmp);",
      "4964:   rect.y = Z_LVAL_PP(tmp);",
      "4971:   rect.width = Z_LVAL_PP(tmp);",
      "4978:   rect.height = Z_LVAL_PP(tmp);",
      "",
      "[Added Lines]",
      "4981:   if (Z_TYPE_PP(tmp) != IS_LONG) {",
      "4982:    zval lval;",
      "4983:    lval = **tmp;",
      "4984:    zval_copy_ctor(&lval);",
      "4985:    convert_to_long(&lval);",
      "4986:    rect.x = Z_LVAL(lval);",
      "4987:   } else {",
      "4988:    rect.x = Z_LVAL_PP(tmp);",
      "4989:   }",
      "4996:   if (Z_TYPE_PP(tmp) != IS_LONG) {",
      "4997:    zval lval;",
      "4998:    lval = **tmp;",
      "4999:    zval_copy_ctor(&lval);",
      "5000:    convert_to_long(&lval);",
      "5001:    rect.y = Z_LVAL(lval);",
      "5002:   } else {",
      "5003:    rect.y = Z_LVAL_PP(tmp);",
      "5004:   }",
      "5011:   if (Z_TYPE_PP(tmp) != IS_LONG) {",
      "5012:    zval lval;",
      "5013:    lval = **tmp;",
      "5014:    zval_copy_ctor(&lval);",
      "5015:    convert_to_long(&lval);",
      "5016:    rect.width = Z_LVAL(lval);",
      "5017:   } else {",
      "5018:    rect.width = Z_LVAL_PP(tmp);",
      "5019:   }",
      "5026:   if (Z_TYPE_PP(tmp) != IS_LONG) {",
      "5027:    zval lval;",
      "5028:    lval = **tmp;",
      "5029:    zval_copy_ctor(&lval);",
      "5030:    convert_to_long(&lval);",
      "5031:    rect.height = Z_LVAL(lval);",
      "5032:   } else {",
      "5033:    rect.height = Z_LVAL_PP(tmp);",
      "5034:   }",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "5124:      affine[i] = Z_DVAL_PP(zval_affine_elem);",
      "5125:      break;",
      "5126:     case IS_STRING:",
      "5129:      break;",
      "5130:     default:",
      "5131:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid type for element %i\", i);",
      "",
      "[Removed Lines]",
      "5127:      convert_to_double_ex(zval_affine_elem);",
      "5128:      affine[i] = Z_DVAL_PP(zval_affine_elem);",
      "",
      "[Added Lines]",
      "5183:      {",
      "5184:       zval dval;",
      "5185:       dval = **zval_affine_elem;",
      "5186:       zval_copy_ctor(&dval);",
      "5187:       convert_to_double(&dval);",
      "5188:       affine[i] = Z_DVAL(dval);",
      "5189:      }",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "5137:  if (z_rect != NULL) {",
      "5138:   if (zend_hash_find(HASH_OF(z_rect), \"x\", sizeof(\"x\"), (void **)&tmp) != FAILURE) {",
      "5141:   } else {",
      "5142:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing x position\");",
      "5143:    RETURN_FALSE;",
      "5144:   }",
      "5146:   if (zend_hash_find(HASH_OF(z_rect), \"y\", sizeof(\"x\"), (void **)&tmp) != FAILURE) {",
      "5149:   } else {",
      "5150:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing y position\");",
      "5151:    RETURN_FALSE;",
      "5152:   }",
      "5154:   if (zend_hash_find(HASH_OF(z_rect), \"width\", sizeof(\"width\"), (void **)&tmp) != FAILURE) {",
      "5157:   } else {",
      "5158:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing width\");",
      "5159:    RETURN_FALSE;",
      "5160:   }",
      "5162:   if (zend_hash_find(HASH_OF(z_rect), \"height\", sizeof(\"height\"), (void **)&tmp) != FAILURE) {",
      "5165:   } else {",
      "5166:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing height\");",
      "5167:    RETURN_FALSE;",
      "",
      "[Removed Lines]",
      "5139:    convert_to_long_ex(tmp);",
      "5140:    rect.x = Z_LVAL_PP(tmp);",
      "5147:    convert_to_long_ex(tmp);",
      "5148:    rect.y = Z_LVAL_PP(tmp);",
      "5155:    convert_to_long_ex(tmp);",
      "5156:    rect.width = Z_LVAL_PP(tmp);",
      "5163:    convert_to_long_ex(tmp);",
      "5164:    rect.height = Z_LVAL_PP(tmp);",
      "",
      "[Added Lines]",
      "5200:    if (Z_TYPE_PP(tmp) != IS_LONG) {",
      "5201:     zval lval;",
      "5202:     lval = **tmp;",
      "5203:     zval_copy_ctor(&lval);",
      "5204:     convert_to_long(&lval);",
      "5205:     rect.x = Z_LVAL(lval);",
      "5206:    } else {",
      "5207:     rect.x = Z_LVAL_PP(tmp);",
      "5208:    }",
      "5215:    if (Z_TYPE_PP(tmp) != IS_LONG) {",
      "5216:     zval lval;",
      "5217:     lval = **tmp;",
      "5218:     zval_copy_ctor(&lval);",
      "5219:     convert_to_long(&lval);",
      "5220:     rect.y = Z_LVAL(lval);",
      "5221:    } else {",
      "5222:     rect.y = Z_LVAL_PP(tmp);",
      "5223:    }",
      "5230:    if (Z_TYPE_PP(tmp) != IS_LONG) {",
      "5231:     zval lval;",
      "5232:     lval = **tmp;",
      "5233:     zval_copy_ctor(&lval);",
      "5234:     convert_to_long(&lval);",
      "5235:     rect.width = Z_LVAL(lval);",
      "5236:    } else {",
      "5237:     rect.width = Z_LVAL_PP(tmp);",
      "5238:    }",
      "5245:    if (Z_TYPE_PP(tmp) != IS_LONG) {",
      "5246:     zval lval;",
      "5247:     lval = **tmp;",
      "5248:     zval_copy_ctor(&lval);",
      "5249:     convert_to_long(&lval);",
      "5250:     rect.height = Z_LVAL(lval);",
      "5251:    } else {",
      "5252:     rect.height = Z_LVAL_PP(tmp);",
      "5253:    }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "5211:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Array expected as options\");",
      "5212:    }",
      "5213:    if (zend_hash_find(HASH_OF(options), \"x\", sizeof(\"x\"), (void **)&tmp) != FAILURE) {",
      "5216:    } else {",
      "5217:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing x position\");",
      "5218:     RETURN_FALSE;",
      "5219:    }",
      "5221:    if (zend_hash_find(HASH_OF(options), \"y\", sizeof(\"y\"), (void **)&tmp) != FAILURE) {",
      "5224:    } else {",
      "5225:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing y position\");",
      "5226:     RETURN_FALSE;",
      "",
      "[Removed Lines]",
      "5214:     convert_to_double_ex(tmp);",
      "5215:     x = Z_DVAL_PP(tmp);",
      "5222:     convert_to_double_ex(tmp);",
      "5223:     y = Z_DVAL_PP(tmp);",
      "",
      "[Added Lines]",
      "5303:     if (Z_TYPE_PP(tmp) != IS_DOUBLE) {",
      "5304:      zval dval;",
      "5305:      dval = **tmp;",
      "5306:      zval_copy_ctor(&dval);",
      "5307:      convert_to_double(&dval);",
      "5308:      x = Z_DVAL(dval);",
      "5309:     } else {",
      "5310:      x = Z_DVAL_PP(tmp);",
      "5311:     }",
      "5318:     if (Z_TYPE_PP(tmp) != IS_DOUBLE) {",
      "5319:      zval dval;",
      "5320:      dval = **tmp;",
      "5321:      zval_copy_ctor(&dval);",
      "5322:      convert_to_double(&dval);",
      "5323:      y = Z_DVAL(dval);",
      "5324:     } else {",
      "5325:      y = Z_DVAL_PP(tmp);",
      "5326:     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "5300:      m1[i] = Z_DVAL_PP(tmp);",
      "5301:      break;",
      "5302:     case IS_STRING:",
      "5305:      break;",
      "5306:     default:",
      "5307:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid type for element %i\", i);",
      "",
      "[Removed Lines]",
      "5303:      convert_to_double_ex(tmp);",
      "5304:      m1[i] = Z_DVAL_PP(tmp);",
      "",
      "[Added Lines]",
      "5406:      {",
      "5407:       zval dval;",
      "5408:       dval = **tmp;",
      "5409:       zval_copy_ctor(&dval);",
      "5410:       convert_to_double(&dval);",
      "5411:       m1[i] = Z_DVAL(dval);",
      "5412:      }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "5317:      m2[i] = Z_DVAL_PP(tmp);",
      "5318:      break;",
      "5319:     case IS_STRING:",
      "5322:      break;",
      "5323:     default:",
      "5324:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Invalid type for element %i\", i);",
      "",
      "[Removed Lines]",
      "5320:      convert_to_double_ex(tmp);",
      "5321:      m2[i] = Z_DVAL_PP(tmp);",
      "",
      "[Added Lines]",
      "5428:      {",
      "5429:       zval dval;",
      "5430:       dval = **tmp;",
      "5431:       zval_copy_ctor(&dval);",
      "5432:       convert_to_double(&dval);",
      "5433:       m2[i] = Z_DVAL(dval);",
      "5434:      }",
      "",
      "---------------"
    ],
    "ext/gd/tests/bug66356.phpt||ext/gd/tests/bug66356.phpt": [
      "File: ext/gd/tests/bug66356.phpt -> ext/gd/tests/bug66356.phpt",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: --TEST--",
      "2: Bug #66356 (Heap Overflow Vulnerability in imagecrop())",
      "3: --SKIPIF--",
      "4: <?php",
      "5:  if(!extension_loaded('gd')){ die('skip gd extension not available'); }",
      "6: ?>",
      "7: --FILE--",
      "8: <?php",
      "9: $img = imagecreatetruecolor(10, 10);",
      "10: $img = imagecrop($img, array(\"x\" => \"a\", \"y\" => 0, \"width\" => 10, \"height\" => 10));",
      "11: $arr = array(\"x\" => \"a\", \"y\" => \"12b\", \"width\" => 10, \"height\" => 10);",
      "12: $img = imagecrop($img, $arr);",
      "13: print_r($arr);",
      "14: ?>",
      "15: --EXPECTF--",
      "16: Array",
      "17: (",
      "18:     [x] => a",
      "19:     [y] => 12b",
      "20:     [width] => 10",
      "21:     [height] => 10",
      "22: )",
      "",
      "---------------"
    ],
    "main/php_version.h||main/php_version.h": [
      "File: main/php_version.h -> main/php_version.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "3: #define PHP_MAJOR_VERSION 5",
      "4: #define PHP_MINOR_VERSION 5",
      "6: #define PHP_EXTRA_VERSION \"-dev\"",
      "",
      "[Removed Lines]",
      "5: #define PHP_RELEASE_VERSION 8",
      "7: #define PHP_VERSION \"5.5.8-dev\"",
      "8: #define PHP_VERSION_ID 50508",
      "",
      "[Added Lines]",
      "5: #define PHP_RELEASE_VERSION 5",
      "7: #define PHP_VERSION \"5.5.5-dev\"",
      "8: #define PHP_VERSION_ID 50505",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b7f26585276b27ebaba4e006d141a8180c76f130",
      "candidate_info": {
        "commit_hash": "b7f26585276b27ebaba4e006d141a8180c76f130",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/b7f26585276b27ebaba4e006d141a8180c76f130",
        "files": [
          "NEWS",
          "main/php_version.h"
        ],
        "message": "- Set trunk version.",
        "before_after_code_files": [
          "main/php_version.h||main/php_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "main/php_version.h||main/php_version.h"
          ],
          "candidate": [
            "main/php_version.h||main/php_version.h"
          ]
        }
      },
      "candidate_diff": {
        "main/php_version.h||main/php_version.h": [
          "File: main/php_version.h -> main/php_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define PHP_MAJOR_VERSION 5",
          "4: #define PHP_MINOR_VERSION 3",
          "6: #define PHP_EXTRA_VERSION \"-dev\"",
          "",
          "[Removed Lines]",
          "5: #define PHP_RELEASE_VERSION 3",
          "7: #define PHP_VERSION \"5.3.3-dev\"",
          "8: #define PHP_VERSION_ID 50303",
          "",
          "[Added Lines]",
          "5: #define PHP_RELEASE_VERSION 99",
          "7: #define PHP_VERSION \"5.3.99-dev\"",
          "8: #define PHP_VERSION_ID 50399",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "55b3386a81f1a40787f6b6c3129562725edceb2c",
      "candidate_info": {
        "commit_hash": "55b3386a81f1a40787f6b6c3129562725edceb2c",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/55b3386a81f1a40787f6b6c3129562725edceb2c",
        "files": [
          "main/php_version.h"
        ],
        "message": "update version id too",
        "before_after_code_files": [
          "main/php_version.h||main/php_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "main/php_version.h||main/php_version.h"
          ],
          "candidate": [
            "main/php_version.h||main/php_version.h"
          ]
        }
      },
      "candidate_diff": {
        "main/php_version.h||main/php_version.h": [
          "File: main/php_version.h -> main/php_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #define PHP_RELEASE_VERSION 8",
          "6: #define PHP_EXTRA_VERSION \"-dev\"",
          "7: #define PHP_VERSION \"5.4.8-dev\"",
          "",
          "[Removed Lines]",
          "8: #define PHP_VERSION_ID 50407",
          "",
          "[Added Lines]",
          "8: #define PHP_VERSION_ID 50408",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed87dbab919acc347cecd3d39af75f9755c55dbd",
      "candidate_info": {
        "commit_hash": "ed87dbab919acc347cecd3d39af75f9755c55dbd",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/ed87dbab919acc347cecd3d39af75f9755c55dbd",
        "files": [
          "configure.in",
          "main/php_version.h"
        ],
        "message": "5.4.0 alpha11",
        "before_after_code_files": [
          "configure.in||configure.in",
          "main/php_version.h||main/php_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "main/php_version.h||main/php_version.h"
          ],
          "candidate": [
            "main/php_version.h||main/php_version.h"
          ]
        }
      },
      "candidate_diff": {
        "configure.in||configure.in": [
          "File: configure.in -> configure.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "120: PHP_MAJOR_VERSION=5",
          "121: PHP_MINOR_VERSION=4",
          "122: PHP_RELEASE_VERSION=0",
          "124: PHP_VERSION=\"$PHP_MAJOR_VERSION.$PHP_MINOR_VERSION.$PHP_RELEASE_VERSION$PHP_EXTRA_VERSION\"",
          "125: PHP_VERSION_ID=`expr [$]PHP_MAJOR_VERSION \\* 10000 + [$]PHP_MINOR_VERSION \\* 100 + [$]PHP_RELEASE_VERSION`",
          "",
          "[Removed Lines]",
          "123: PHP_EXTRA_VERSION=\"-dev\"",
          "",
          "[Added Lines]",
          "123: PHP_EXTRA_VERSION=\"alpha1\"",
          "",
          "---------------"
        ],
        "main/php_version.h||main/php_version.h": [
          "File: main/php_version.h -> main/php_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define PHP_MAJOR_VERSION 5",
          "4: #define PHP_MINOR_VERSION 4",
          "5: #define PHP_RELEASE_VERSION 0",
          "8: #define PHP_VERSION_ID 50400",
          "",
          "[Removed Lines]",
          "6: #define PHP_EXTRA_VERSION \"-dev\"",
          "7: #define PHP_VERSION \"5.4.0-dev\"",
          "",
          "[Added Lines]",
          "6: #define PHP_EXTRA_VERSION \"alpha1\"",
          "7: #define PHP_VERSION \"5.4.0alpha1\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9081a1bdfbb414f4d4ad93dcbb3b664cf7c462d1",
      "candidate_info": {
        "commit_hash": "9081a1bdfbb414f4d4ad93dcbb3b664cf7c462d1",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/9081a1bdfbb414f4d4ad93dcbb3b664cf7c462d1",
        "files": [
          "ext/gd/gd.c",
          "ext/gd/gd_ctx.c"
        ],
        "message": "Refactor ext/gd (all tests passes)",
        "before_after_code_files": [
          "ext/gd/gd.c||ext/gd/gd.c",
          "ext/gd/gd_ctx.c||ext/gd/gd_ctx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ext/gd/gd.c||ext/gd/gd.c"
          ],
          "candidate": [
            "ext/gd/gd.c||ext/gd/gd.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/gd/gd.c||ext/gd/gd.c": [
          "File: ext/gd/gd.c -> ext/gd/gd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64: #if HAVE_LIBT1",
          "65: #include <t1lib.h>",
          "66: static int le_ps_font, le_ps_enc;",
          "69: #endif",
          "71: #include <gd.h>",
          "",
          "[Removed Lines]",
          "67: static void php_free_ps_font(zend_rsrc_list_entry *rsrc TSRMLS_DC);",
          "68: static void php_free_ps_enc(zend_rsrc_list_entry *rsrc TSRMLS_DC);",
          "",
          "[Added Lines]",
          "67: static void php_free_ps_font(zend_resource *rsrc TSRMLS_DC);",
          "68: static void php_free_ps_enc(zend_resource *rsrc TSRMLS_DC);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135: static void php_image_filter_pixelate(INTERNAL_FUNCTION_PARAMETERS);",
          "139: static void _php_image_create_from(INTERNAL_FUNCTION_PARAMETERS, int image_type, char *tn, gdImagePtr (*func_p)(), gdImagePtr (*ioctx_func_p)());",
          "140: static void _php_image_output(INTERNAL_FUNCTION_PARAMETERS, int image_type, char *tn, void (*func_p)());",
          "141: static int _php_image_type(char data[8]);",
          "",
          "[Removed Lines]",
          "138: static gdImagePtr _php_image_create_from_string (zval **Data, char *tn, gdImagePtr (*ioctx_func_p)() TSRMLS_DC);",
          "",
          "[Added Lines]",
          "138: static gdImagePtr _php_image_create_from_string (zval *Data, char *tn, gdImagePtr (*ioctx_func_p)() TSRMLS_DC);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1076: {",
          "1077:  gdImageDestroy((gdImagePtr) rsrc->ptr);",
          "1078: }",
          "",
          "[Removed Lines]",
          "1075: static void php_free_gd_image(zend_rsrc_list_entry *rsrc TSRMLS_DC)",
          "",
          "[Added Lines]",
          "1075: static void php_free_gd_image(zend_resource *rsrc TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1084: {",
          "1085:  gdFontPtr fp = (gdFontPtr) rsrc->ptr;",
          "",
          "[Removed Lines]",
          "1083: static void php_free_gd_font(zend_rsrc_list_entry *rsrc TSRMLS_DC)",
          "",
          "[Added Lines]",
          "1083: static void php_free_gd_font(zend_resource *rsrc TSRMLS_DC)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1420: PHP_FUNCTION(imageloadfont)",
          "1421: {",
          "1422:  char *file;",
          "1423:  int file_name, hdr_size = sizeof(gdFont) - sizeof(char *);",
          "1425:  gdFontPtr font;",
          "1426:  php_stream *stream;",
          "",
          "[Removed Lines]",
          "1424:  int ind, body_size, n = 0, b, i, body_size_check;",
          "",
          "[Added Lines]",
          "1422:  zval *ind;",
          "1425:  int body_size, n = 0, b, i, body_size_check;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1508:  }",
          "1509:  php_stream_close(stream);",
          "1518: }",
          "",
          "[Removed Lines]",
          "1515:  ind = 5 + zend_list_insert(font, le_gd_font TSRMLS_CC);",
          "1517:  RETURN_LONG(ind);",
          "",
          "[Added Lines]",
          "1512:  ind = zend_list_insert(font, le_gd_font TSRMLS_CC);",
          "1518:  RETURN_LONG(Z_RES_HANDLE_P(ind) + 5);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1523: PHP_FUNCTION(imagesetstyle)",
          "1524: {",
          "1526:  gdImagePtr im;",
          "1531:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ra\", &IM, &styles) == FAILURE)  {",
          "1532:   return;",
          "1533:  }",
          "1538:  stylearr = safe_emalloc(sizeof(int), zend_hash_num_elements(HASH_OF(styles)), 0);",
          "1550:    zval lval;",
          "1553:    convert_to_long(&lval);",
          "1554:    stylearr[index++] = Z_LVAL(lval);",
          "1555:   } else {",
          "1557:   }",
          "1560:  gdImageSetStyle(im, stylearr, index);",
          "",
          "[Removed Lines]",
          "1525:  zval *IM, *styles;",
          "1527:  int * stylearr;",
          "1528:  int index;",
          "1529:  HashPosition pos;",
          "1535:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "1540:  zend_hash_internal_pointer_reset_ex(HASH_OF(styles), &pos);",
          "1542:  for (index = 0;; zend_hash_move_forward_ex(HASH_OF(styles), &pos)) {",
          "1543:   zval ** item;",
          "1545:   if (zend_hash_get_current_data_ex(HASH_OF(styles), (void **) &item, &pos) == FAILURE) {",
          "1546:    break;",
          "1547:   }",
          "1549:   if (Z_TYPE_PP(item) != IS_LONG) {",
          "1551:    lval = **item;",
          "1552:    zval_copy_ctor(&lval);",
          "1556:    stylearr[index++] = Z_LVAL_PP(item);",
          "1558:  }",
          "",
          "[Added Lines]",
          "1526:  zval *IM, *styles, *item;",
          "1528:  int *stylearr;",
          "1529:  int index = 0;",
          "1535:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "1540:  ZEND_HASH_FOREACH_VAL(HASH_OF(styles), item) {",
          "1541:   if (Z_TYPE_P(item) != IS_LONG) {",
          "1543:    ZVAL_COPY(&lval, item);",
          "1547:    stylearr[index++] = Z_LVAL_P(item);",
          "1549:  } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1602:   return;",
          "1603:  }",
          "1607:  RETURN_BOOL(im->trueColor);",
          "1608: }",
          "",
          "[Removed Lines]",
          "1605:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "1596:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1621:   return;",
          "1622:  }",
          "1626:  if (ncolors <= 0) {",
          "1627:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Number of colors has to be greater than zero\");",
          "",
          "[Removed Lines]",
          "1624:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "1615:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1646:   return;",
          "1647:  }",
          "1651:  if (gdImagePaletteToTrueColor(im) == 0) {",
          "1652:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "1649:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "1638:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1668:   return;",
          "1669:  }",
          "1674:  result = gdImageColorMatch(im1, im2);",
          "1675:  switch (result) {",
          "",
          "[Removed Lines]",
          "1671:  ZEND_FETCH_RESOURCE(im1, gdImagePtr, &IM1, -1, \"Image\", le_gd);",
          "1672:  ZEND_FETCH_RESOURCE(im2, gdImagePtr, &IM2, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "1660:  ZEND_FETCH_RESOURCE(im1, gdImagePtr, IM1, -1, \"Image\", le_gd);",
          "1661:  ZEND_FETCH_RESOURCE(im2, gdImagePtr, IM2, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1707:   return;",
          "1708:  }",
          "1712:  gdImageSetThickness(im, thick);",
          "",
          "[Removed Lines]",
          "1710:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "1699:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1727:   return;",
          "1728:  }",
          "1732:  gdImageFilledEllipse(im, cx, cy, w, h, color);",
          "",
          "[Removed Lines]",
          "1730:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "1719:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1748:   return;",
          "1749:  }",
          "1753:  e = E;",
          "1754:  if (e < 0) {",
          "",
          "[Removed Lines]",
          "1751:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "1740:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1778:   return;",
          "1779:  }",
          "1782:  gdImageAlphaBlending(im, blend);",
          "1784:  RETURN_TRUE;",
          "",
          "[Removed Lines]",
          "1781:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "1770:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1797:   return;",
          "1798:  }",
          "1801:  gdImageSaveAlpha(im, save);",
          "1803:  RETURN_TRUE;",
          "",
          "[Removed Lines]",
          "1800:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "1789:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1816:   return;",
          "1817:  }",
          "1820:  gdImageAlphaBlending(im, effect);",
          "1822:  RETURN_TRUE;",
          "",
          "[Removed Lines]",
          "1819:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "1808:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1836:   RETURN_FALSE;",
          "1837:  }",
          "1840:  ct = gdImageColorAllocateAlpha(im, red, green, blue, alpha);",
          "1841:  if (ct < 0) {",
          "1842:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "1839:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "1828:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1857:   return;",
          "1858:  }",
          "1862:  RETURN_LONG(gdImageColorResolveAlpha(im, red, green, blue, alpha));",
          "1863: }",
          "",
          "[Removed Lines]",
          "1860:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "1849:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1875:   return;",
          "1876:  }",
          "1880:  RETURN_LONG(gdImageColorClosestAlpha(im, red, green, blue, alpha));",
          "1881: }",
          "",
          "[Removed Lines]",
          "1878:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "1867:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1893:   return;",
          "1894:  }",
          "1898:  RETURN_LONG(gdImageColorExactAlpha(im, red, green, blue, alpha));",
          "1899: }",
          "",
          "[Removed Lines]",
          "1896:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "1885:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1912:   return;",
          "1913:  }",
          "1918:  srcX = SX;",
          "1919:  srcY = SY;",
          "",
          "[Removed Lines]",
          "1915:  ZEND_FETCH_RESOURCE(im_dst, gdImagePtr, &DIM, -1, \"Image\", le_gd);",
          "1916:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, &SIM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "1904:  ZEND_FETCH_RESOURCE(im_dst, gdImagePtr, DIM, -1, \"Image\", le_gd);",
          "1905:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, SIM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2094:   RETURN_FALSE;",
          "2095:  }",
          "2099:  im_dst = gdImageRotateInterpolated(im_src, (const float)degrees, color);",
          "",
          "[Removed Lines]",
          "2097:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, &SIM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "2086:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, SIM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "2117:   return;",
          "2118:  }",
          "2123:  gdImageSetTile(im, tile);",
          "",
          "[Removed Lines]",
          "2120:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "2121:  ZEND_FETCH_RESOURCE(tile, gdImagePtr, &TILE, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "2109:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "2110:  ZEND_FETCH_RESOURCE(tile, gdImagePtr, TILE, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "2137:   return;",
          "2138:  }",
          "2143:  gdImageSetBrush(im, tile);",
          "",
          "[Removed Lines]",
          "2140:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "2141:  ZEND_FETCH_RESOURCE(tile, gdImagePtr, &TILE, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "2129:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "2130:  ZEND_FETCH_RESOURCE(tile, gdImagePtr, TILE, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "2261: {",
          "2262:  gdImagePtr im;",
          "2263:  gdIOCtx *io_ctx;",
          "2267:  if (!io_ctx) {",
          "2268:   return NULL;",
          "",
          "[Removed Lines]",
          "2260: gdImagePtr _php_image_create_from_string(zval **data, char *tn, gdImagePtr (*ioctx_func_p)() TSRMLS_DC)",
          "2265:  io_ctx = gdNewDynamicCtxEx(Z_STRLEN_PP(data), Z_STRVAL_PP(data), 0);",
          "",
          "[Added Lines]",
          "2249: gdImagePtr _php_image_create_from_string(zval *data, char *tn, gdImagePtr (*ioctx_func_p)() TSRMLS_DC)",
          "2254:  io_ctx = gdNewDynamicCtxEx(Z_STRLEN_P(data), Z_STRVAL_P(data), 0);",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "2286: PHP_FUNCTION(imagecreatefromstring)",
          "2287: {",
          "2289:  gdImagePtr im;",
          "2290:  int imtype;",
          "2291:  char sig[8];",
          "2294:   return;",
          "2295:  }",
          "2297:  convert_to_string_ex(data);",
          "2299:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Empty string or invalid image\");",
          "2300:   RETURN_FALSE;",
          "2301:  }",
          "2305:  imtype = _php_image_type(sig);",
          "",
          "[Removed Lines]",
          "2288:  zval **data;",
          "2293:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"Z\", &data) == FAILURE) {",
          "2298:  if (Z_STRLEN_PP(data) < 8) {",
          "2303:  memcpy(sig, Z_STRVAL_PP(data), 8);",
          "",
          "[Added Lines]",
          "2277:  zval *data;",
          "2282:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"z\", &data) == FAILURE) {",
          "2287:  if (Z_STRLEN_P(data) < 8) {",
          "2292:  memcpy(sig, Z_STRVAL_P(data), 8);",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "2359:  gdImagePtr im = NULL;",
          "2360:  php_stream *stream;",
          "2361:  FILE * fp = NULL;",
          "2362:  long ignore_warning;",
          "2364:  if (image_type == PHP_GDIMG_TYPE_GD2PART) {",
          "2365:   if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"sllll\", &file, &file_len, &srcx, &srcy, &width, &height) == FAILURE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2351: #ifdef HAVE_GD_JPG",
          "2353: #endif",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "2389:  } else if (ioctx_func_p) {",
          "2391:   gdIOCtx* io_ctx;",
          "2399:    php_error_docref(NULL TSRMLS_CC, E_WARNING,\"Cannot read image data\");",
          "2400:    goto out_err;",
          "2401:   }",
          "2404:   if (!io_ctx) {",
          "2406:    php_error_docref(NULL TSRMLS_CC, E_WARNING,\"Cannot allocate GD IO context\");",
          "2407:    goto out_err;",
          "2408:   }",
          "",
          "[Removed Lines]",
          "2392:   size_t buff_size;",
          "2393:   char *buff;",
          "2396:   buff_size = php_stream_copy_to_mem(stream, &buff, PHP_STREAM_COPY_ALL, 1);",
          "2398:   if (!buff_size) {",
          "2403:   io_ctx = gdNewDynamicCtxEx(buff_size, buff, 0);",
          "2405:    pefree(buff, 1);",
          "",
          "[Added Lines]",
          "2383:   zend_string *buff;",
          "2384:   char *pstr;",
          "2386:   buff = php_stream_copy_to_mem(stream, PHP_STREAM_COPY_ALL, 0);",
          "2388:   if (!buff) {",
          "2394:   pstr = pestrndup(buff->val, buff->len, 1);",
          "2395:   io_ctx = gdNewDynamicCtxEx(buff->len, pstr, 0);",
          "2397:    pefree(pstr, 1);",
          "2398:    STR_RELEASE(buff);",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "2413:    im = (*ioctx_func_p)(io_ctx);",
          "2414:   }",
          "2415:   io_ctx->gd_free(io_ctx);",
          "2417:  }",
          "2418:  else if (php_stream_can_cast(stream, PHP_STREAM_AS_STDIO)) {",
          "",
          "[Removed Lines]",
          "2416:   pefree(buff, 1);",
          "",
          "[Added Lines]",
          "2409:   pefree(pstr, 1);",
          "2410:   STR_RELEASE(buff);",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "2572:   return;",
          "2573:  }",
          "2577:  if (argc > 1) {",
          "2578:   fn = file;",
          "",
          "[Removed Lines]",
          "2575:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &imgind, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "2569:  ZEND_FETCH_RESOURCE(im, gdImagePtr, imgind, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2786:   return;",
          "2787:  }",
          "2793:  RETURN_TRUE;",
          "2794: }",
          "",
          "[Removed Lines]",
          "2789:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "2791:  zend_list_delete(Z_LVAL_P(IM));",
          "",
          "[Added Lines]",
          "2783:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "2785:  zend_list_close(Z_RES_P(IM));",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2808:   return;",
          "2809:  }",
          "2813:  ct = gdImageColorAllocate(im, red, green, blue);",
          "2814:  if (ct < 0) {",
          "",
          "[Removed Lines]",
          "2811:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "2805:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2829:   return;",
          "2830:  }",
          "2835:  gdImagePaletteCopy(dst, src);",
          "2836: }",
          "",
          "[Removed Lines]",
          "2832:  ZEND_FETCH_RESOURCE(dst, gdImagePtr, &dstim, -1, \"Image\", le_gd);",
          "2833:  ZEND_FETCH_RESOURCE(src, gdImagePtr, &srcim, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "2826:  ZEND_FETCH_RESOURCE(dst, gdImagePtr, dstim, -1, \"Image\", le_gd);",
          "2827:  ZEND_FETCH_RESOURCE(src, gdImagePtr, srcim, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2848:   return;",
          "2849:  }",
          "2853:  if (gdImageTrueColor(im)) {",
          "2854:   if (im->tpixels && gdImageBoundsSafe(im, x, y)) {",
          "",
          "[Removed Lines]",
          "2851:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "2845:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2880:   return;",
          "2881:  }",
          "2885:  RETURN_LONG(gdImageColorClosest(im, red, green, blue));",
          "2886: }",
          "",
          "[Removed Lines]",
          "2883:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "2877:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2898:   return;",
          "2899:  }",
          "2903:  RETURN_LONG(gdImageColorClosestHWB(im, red, green, blue));",
          "2904: }",
          "",
          "[Removed Lines]",
          "2901:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "2895:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2917:   return;",
          "2918:  }",
          "2923:  if (gdImageTrueColor(im)) {",
          "",
          "[Removed Lines]",
          "2920:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "2914:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2948:   return;",
          "2949:  }",
          "2953:  RETURN_LONG(gdImageColorResolve(im, red, green, blue));",
          "2954: }",
          "",
          "[Removed Lines]",
          "2951:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "2945:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2966:   return;",
          "2967:  }",
          "2971:  RETURN_LONG(gdImageColorExact(im, red, green, blue));",
          "2972: }",
          "",
          "[Removed Lines]",
          "2969:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "2963:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2985:   return;",
          "2986:  }",
          "2990:  col = color;",
          "",
          "[Removed Lines]",
          "2988:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "2982:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "3013:   return;",
          "3014:  }",
          "3018:  col = index;",
          "",
          "[Removed Lines]",
          "3016:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3010:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "3044:   return;",
          "3045:  }",
          "3049:  if (gdImageTrueColor(im)) {",
          "3050:   int x, y, c;",
          "",
          "[Removed Lines]",
          "3047:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3041:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "3086:   return;",
          "3087:  }",
          "3090:  gdImageSetPixel(im, x, y, col);",
          "3091:  RETURN_TRUE;",
          "3092: }",
          "",
          "[Removed Lines]",
          "3089:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3083:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "3104:   return;",
          "3105:  }",
          "3109: #ifdef HAVE_GD_BUNDLED",
          "3110:  if (im->antialias) {",
          "",
          "[Removed Lines]",
          "3107:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3101:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "3130:   return;",
          "3131:  }",
          "3134:  gdImageDashedLine(im, x1, y1, x2, y2, col);",
          "3135:  RETURN_TRUE;",
          "3136: }",
          "",
          "[Removed Lines]",
          "3133:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3127:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "3148:   return;",
          "3149:  }",
          "3152:  gdImageRectangle(im, x1, y1, x2, y2, col);",
          "3153:  RETURN_TRUE;",
          "3154: }",
          "",
          "[Removed Lines]",
          "3151:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3145:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3166:   return;",
          "3167:  }",
          "3170:  gdImageFilledRectangle(im, x1, y1, x2, y2, col);",
          "3171:  RETURN_TRUE;",
          "3172: }",
          "",
          "[Removed Lines]",
          "3169:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3163:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3185:   return;",
          "3186:  }",
          "3190:  e = E;",
          "3191:  if (e < 0) {",
          "",
          "[Removed Lines]",
          "3188:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3182:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3214:   return;",
          "3215:  }",
          "3219:  gdImageEllipse(im, cx, cy, w, h, color);",
          "3220:  RETURN_TRUE;",
          "",
          "[Removed Lines]",
          "3217:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3211:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3233:   return;",
          "3234:  }",
          "3237:  gdImageFillToBorder(im, x, y, border, col);",
          "3238:  RETURN_TRUE;",
          "3239: }",
          "",
          "[Removed Lines]",
          "3236:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3230:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3251:   return;",
          "3252:  }",
          "3255:  gdImageFill(im, x, y, col);",
          "3256:  RETURN_TRUE;",
          "3257: }",
          "",
          "[Removed Lines]",
          "3254:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3248:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 53 ---",
          "[Context before]",
          "3268:   return;",
          "3269:  }",
          "3273:  RETURN_LONG(gdImageColorsTotal(im));",
          "3274: }",
          "",
          "[Removed Lines]",
          "3271:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3265:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 54 ---",
          "[Context before]",
          "3287:   return;",
          "3288:  }",
          "3292:  if (argc > 1) {",
          "3293:   gdImageColorTransparent(im, COL);",
          "",
          "[Removed Lines]",
          "3290:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3284:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 55 ---",
          "[Context before]",
          "3310:   return;",
          "3311:  }",
          "3315:  if (argc > 1) {",
          "3316:   gdImageInterlace(im, INT);",
          "",
          "[Removed Lines]",
          "3313:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3307:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 56 ---",
          "[Context before]",
          "3328: {",
          "3329:  zval *IM, *POINTS;",
          "3330:  long NPOINTS, COL;",
          "3332:  gdImagePtr im;",
          "3333:  gdPointPtr points;",
          "3334:  int npoints, col, nelem, i;",
          "",
          "[Removed Lines]",
          "3331:  zval **var = NULL;",
          "",
          "[Added Lines]",
          "3325:  zval *var = NULL;",
          "",
          "---------------",
          "--- Hunk 57 ---",
          "[Context before]",
          "3337:   return;",
          "3338:  }",
          "3342:  npoints = NPOINTS;",
          "3343:  col = COL;",
          "",
          "[Removed Lines]",
          "3340:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3334:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 58 ---",
          "[Context before]",
          "3359:  points = (gdPointPtr) safe_emalloc(npoints, sizeof(gdPoint), 0);",
          "3361:  for (i = 0; i < npoints; i++) {",
          "3364:     zval lval;",
          "3367:     convert_to_long(&lval);",
          "3368:     points[i].x = Z_LVAL(lval);",
          "3369:    } else {",
          "3371:    }",
          "3372:   }",
          "3375:     zval lval;",
          "3378:     convert_to_long(&lval);",
          "3379:     points[i].y = Z_LVAL(lval);",
          "3380:    } else {",
          "3382:    }",
          "3383:   }",
          "3384:  }",
          "",
          "[Removed Lines]",
          "3362:   if (zend_hash_index_find(Z_ARRVAL_P(POINTS), (i * 2), (void **) &var) == SUCCESS) {",
          "3363:    if (Z_TYPE_PP(var) != IS_LONG) {",
          "3365:     lval = **var;",
          "3366:     zval_copy_ctor(&lval);",
          "3370:     points[i].x = Z_LVAL_PP(var);",
          "3373:   if (zend_hash_index_find(Z_ARRVAL_P(POINTS), (i * 2) + 1, (void **) &var) == SUCCESS) {",
          "3374:    if (Z_TYPE_PP(var) != IS_LONG) {",
          "3376:     lval = **var;",
          "3377:     zval_copy_ctor(&lval);",
          "3381:     points[i].y = Z_LVAL_PP(var);",
          "",
          "[Added Lines]",
          "3356:   if ((var = zend_hash_index_find(Z_ARRVAL_P(POINTS), (i * 2))) != NULL) {",
          "3357:    if (Z_TYPE_P(var) != IS_LONG) {",
          "3359:     ZVAL_COPY(&lval, var);",
          "3363:     points[i].x = Z_LVAL_P(var);",
          "3366:   if ((var = zend_hash_index_find(Z_ARRVAL_P(POINTS), (i * 2) + 1)) != NULL) {",
          "3367:    if (Z_TYPE_P(var) != IS_LONG) {",
          "3369:     ZVAL_COPY(&lval, var);",
          "3373:     points[i].y = Z_LVAL_P(var);",
          "",
          "---------------",
          "--- Hunk 59 ---",
          "[Context before]",
          "3415: static gdFontPtr php_find_gd_font(int size TSRMLS_DC)",
          "3416: {",
          "3417:  gdFontPtr font;",
          "3420:  switch (size) {",
          "3421:   case 1:",
          "3424:   case 2:",
          "3427:   case 3:",
          "3430:   case 4:",
          "3433:   case 5:",
          "3444:     }",
          "3446:  }",
          "3448:  return font;",
          "",
          "[Removed Lines]",
          "3418:  int ind_type;",
          "3422:     font = gdFontTiny;",
          "3423:     break;",
          "3425:     font = gdFontSmall;",
          "3426:     break;",
          "3428:     font = gdFontMediumBold;",
          "3429:     break;",
          "3431:     font = gdFontLarge;",
          "3432:     break;",
          "3434:     font = gdFontGiant;",
          "3435:     break;",
          "3436:   default:",
          "3437:    font = zend_list_find(size - 5, &ind_type);",
          "3438:     if (!font || ind_type != le_gd_font) {",
          "3439:       if (size < 1) {",
          "3440:         font = gdFontTiny;",
          "3441:       } else {",
          "3442:         font = gdFontGiant;",
          "3443:       }",
          "3445:     break;",
          "",
          "[Added Lines]",
          "3413:    font = gdFontTiny;",
          "3414:    break;",
          "3416:    font = gdFontSmall;",
          "3417:    break;",
          "3419:    font = gdFontMediumBold;",
          "3420:    break;",
          "3422:    font = gdFontLarge;",
          "3423:    break;",
          "3425:    font = gdFontGiant;",
          "3426:    break;",
          "3427:   default: {",
          "3428:     zval *zv = zend_hash_index_find(&EG(regular_list), size - 5);",
          "3429:     if (!zv || (Z_RES_P(zv))->type != le_gd_font) {",
          "3430:      if (size < 1) {",
          "3431:       font = gdFontTiny;",
          "3432:      } else {",
          "3433:       font = gdFontGiant;",
          "3434:      }",
          "3435:     } else {",
          "3436:      font = (gdFontPtr)Z_RES_P(zv)->ptr;",
          "3438:    }",
          "3439:    break;",
          "",
          "---------------",
          "--- Hunk 60 ---",
          "[Context before]",
          "3530:   return;",
          "3531:  }",
          "3535:  col = COL;",
          "",
          "[Removed Lines]",
          "3533:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3527:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 61 ---",
          "[Context before]",
          "3621:   return;",
          "3622:  }",
          "3627:  srcX = SX;",
          "3628:  srcY = SY;",
          "",
          "[Removed Lines]",
          "3624:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, &SIM, -1, \"Image\", le_gd);",
          "3625:  ZEND_FETCH_RESOURCE(im_dst, gdImagePtr, &DIM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3618:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, SIM, -1, \"Image\", le_gd);",
          "3619:  ZEND_FETCH_RESOURCE(im_dst, gdImagePtr, DIM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 62 ---",
          "[Context before]",
          "3649:   return;",
          "3650:  }",
          "3655:  srcX = SX;",
          "3656:  srcY = SY;",
          "",
          "[Removed Lines]",
          "3652:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, &SIM, -1, \"Image\", le_gd);",
          "3653:  ZEND_FETCH_RESOURCE(im_dst, gdImagePtr, &DIM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3646:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, SIM, -1, \"Image\", le_gd);",
          "3647:  ZEND_FETCH_RESOURCE(im_dst, gdImagePtr, DIM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 63 ---",
          "[Context before]",
          "3678:   return;",
          "3679:  }",
          "3684:  srcX = SX;",
          "3685:  srcY = SY;",
          "",
          "[Removed Lines]",
          "3681:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, &SIM, -1, \"Image\", le_gd);",
          "3682:  ZEND_FETCH_RESOURCE(im_dst, gdImagePtr, &DIM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3675:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, SIM, -1, \"Image\", le_gd);",
          "3676:  ZEND_FETCH_RESOURCE(im_dst, gdImagePtr, DIM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 64 ---",
          "[Context before]",
          "3707:   return;",
          "3708:  }",
          "3713:  srcX = SX;",
          "3714:  srcY = SY;",
          "",
          "[Removed Lines]",
          "3710:  ZEND_FETCH_RESOURCE(im_dst, gdImagePtr, &DIM, -1, \"Image\", le_gd);",
          "3711:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, &SIM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3704:  ZEND_FETCH_RESOURCE(im_dst, gdImagePtr, DIM, -1, \"Image\", le_gd);",
          "3705:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, SIM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 65 ---",
          "[Context before]",
          "3740:   return;",
          "3741:  }",
          "3745:  RETURN_LONG(gdImageSX(im));",
          "3746: }",
          "",
          "[Removed Lines]",
          "3743:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3737:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 66 ---",
          "[Context before]",
          "3757:   return;",
          "3758:  }",
          "3762:  RETURN_LONG(gdImageSY(im));",
          "3763: }",
          "",
          "[Removed Lines]",
          "3760:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "3754:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 67 ---",
          "[Context before]",
          "3830:   } else if (zend_parse_parameters(argc TSRMLS_CC, \"rddlllss|a\", &IM, &ptsize, &angle, &x, &y, &col, &fontname, &fontname_len, &str, &str_len, &EXT) == FAILURE) {",
          "3831:    RETURN_FALSE;",
          "3832:   }",
          "3834:  }",
          "3837:  angle = angle * (M_PI/180);",
          "3850:     continue;",
          "3851:    }",
          "3858:     convert_to_double_ex(item);",
          "3859:     strex.flags |= gdFTEX_LINESPACE;",
          "3861:    }",
          "3864:  }",
          "3866: #ifdef VIRTUAL_DIR",
          "",
          "[Removed Lines]",
          "3833:   ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "3840:   HashPosition pos;",
          "3843:   zend_hash_internal_pointer_reset_ex(HASH_OF(EXT), &pos);",
          "3844:   do {",
          "3845:    zval ** item;",
          "3846:    char * key;",
          "3847:    ulong num_key;",
          "3849:    if (zend_hash_get_current_key_ex(HASH_OF(EXT), &key, NULL, &num_key, 0, &pos) != HASH_KEY_IS_STRING) {",
          "3853:    if (zend_hash_get_current_data_ex(HASH_OF(EXT), (void **) &item, &pos) == FAILURE) {",
          "3854:     continue;",
          "3855:    }",
          "3857:    if (strcmp(\"linespacing\", key) == 0) {",
          "3860:     strex.linespacing = Z_DVAL_PP(item);",
          "3863:   } while (zend_hash_move_forward_ex(HASH_OF(EXT), &pos) == SUCCESS);",
          "",
          "[Added Lines]",
          "3827:   ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "3834:   zval *item;",
          "3835:   zend_string *key;",
          "3836:   ulong num_key;",
          "3839:   ZEND_HASH_FOREACH_KEY_VAL(HASH_OF(EXT), num_key, key, item) {",
          "3840:    if (key == NULL) {",
          "3843:    if (strcmp(\"linespacing\", key->val) == 0) {",
          "3846:     strex.linespacing = Z_DVAL_P(item);",
          "3848:   } ZEND_HASH_FOREACH_END();",
          "",
          "---------------",
          "--- Hunk 68 ---",
          "[Context before]",
          "3907: {",
          "3910:  T1_DeleteFont(*font);",
          "3911:  efree(font);",
          "",
          "[Removed Lines]",
          "3906: static void php_free_ps_font(zend_rsrc_list_entry *rsrc TSRMLS_DC)",
          "3908:  int *font = (int *) rsrc->ptr;",
          "",
          "[Added Lines]",
          "3891: static void php_free_ps_font(zend_resource *rsrc TSRMLS_DC)",
          "3893:  int *font = (int *)rsrc->ptr;",
          "",
          "---------------",
          "--- Hunk 69 ---",
          "[Context before]",
          "3918: {",
          "3921:  T1_DeleteEncoding(enc);",
          "3922: }",
          "",
          "[Removed Lines]",
          "3917: static void php_free_ps_enc(zend_rsrc_list_entry *rsrc TSRMLS_DC)",
          "3919:  char **enc = (char **) rsrc->ptr;",
          "",
          "[Added Lines]",
          "3902: static void php_free_ps_enc(zend_resource *rsrc TSRMLS_DC)",
          "3904:  char **enc = (char **)rsrc->ptr;",
          "",
          "---------------",
          "--- Hunk 70 ---",
          "[Context before]",
          "4025:   return;",
          "4026:  }",
          "4029:  zend_list_delete(Z_LVAL_P(fnt));",
          "4030:  RETURN_TRUE;",
          "4031: }",
          "",
          "[Removed Lines]",
          "4028:  ZEND_FETCH_RESOURCE(f_ind, int *, &fnt, -1, \"Type 1 font\", le_ps_font);",
          "",
          "[Added Lines]",
          "4013:  ZEND_FETCH_RESOURCE(f_ind, int *, fnt, -1, \"Type 1 font\", le_ps_font);",
          "",
          "---------------",
          "--- Hunk 71 ---",
          "[Context before]",
          "4043:   return;",
          "4044:  }",
          "4048:  if ((enc_vector = T1_LoadEncoding(enc)) == NULL) {",
          "4049:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Couldn't load encoding vector from %s\", enc);",
          "",
          "[Removed Lines]",
          "4046:  ZEND_FETCH_RESOURCE(f_ind, int *, &fnt, -1, \"Type 1 font\", le_ps_font);",
          "",
          "[Added Lines]",
          "4031:  ZEND_FETCH_RESOURCE(f_ind, int *, fnt, -1, \"Type 1 font\", le_ps_font);",
          "",
          "---------------",
          "--- Hunk 72 ---",
          "[Context before]",
          "4075:   return;",
          "4076:  }",
          "4080:  T1_DeleteAllSizes(*f_ind);",
          "",
          "[Removed Lines]",
          "4078:  ZEND_FETCH_RESOURCE(f_ind, int *, &fnt, -1, \"Type 1 font\", le_ps_font);",
          "",
          "[Added Lines]",
          "4063:  ZEND_FETCH_RESOURCE(f_ind, int *, fnt, -1, \"Type 1 font\", le_ps_font);",
          "",
          "---------------",
          "--- Hunk 73 ---",
          "[Context before]",
          "4104:   return;",
          "4105:  }",
          "4109:  if (T1_SlantFont(*f_ind, slt) != 0) {",
          "4110:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "4107:  ZEND_FETCH_RESOURCE(f_ind, int *, &fnt, -1, \"Type 1 font\", le_ps_font);",
          "",
          "[Added Lines]",
          "4092:  ZEND_FETCH_RESOURCE(f_ind, int *, fnt, -1, \"Type 1 font\", le_ps_font);",
          "",
          "---------------",
          "--- Hunk 74 ---",
          "[Context before]",
          "4145:   RETURN_FALSE;",
          "4146:  }",
          "4152:  if (_fg < 0 || (!gdImageTrueColor(bg_img) && _fg > gdImageColorsTotal(bg_img))) {",
          "",
          "[Removed Lines]",
          "4148:  ZEND_FETCH_RESOURCE(bg_img, gdImagePtr, &img, -1, \"Image\", le_gd);",
          "4149:  ZEND_FETCH_RESOURCE(f_ind, int *, &fnt, -1, \"Type 1 font\", le_ps_font);",
          "",
          "[Added Lines]",
          "4133:  ZEND_FETCH_RESOURCE(bg_img, gdImagePtr, img, -1, \"Image\", le_gd);",
          "4134:  ZEND_FETCH_RESOURCE(f_ind, int *, fnt, -1, \"Type 1 font\", le_ps_font);",
          "",
          "---------------",
          "--- Hunk 75 ---",
          "[Context before]",
          "4286:   per_char =  add_width || angle ? 1 : 0;",
          "4287:  }",
          "4291: #define max(a, b) (a > b ? a : b)",
          "4292: #define min(a, b) (a < b ? a : b)",
          "",
          "[Removed Lines]",
          "4289:  ZEND_FETCH_RESOURCE(f_ind, int *, &fnt, -1, \"Type 1 font\", le_ps_font);",
          "",
          "[Added Lines]",
          "4274:  ZEND_FETCH_RESOURCE(f_ind, int *, fnt, -1, \"Type 1 font\", le_ps_font);",
          "",
          "---------------",
          "--- Hunk 76 ---",
          "[Context before]",
          "4451:  int int_threshold;",
          "4452:  int x, y;",
          "4453:  float x_ratio, y_ratio;",
          "4454:     long ignore_warning;",
          "4456:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"pplll\", &f_org, &f_org_len, &f_dest, &f_dest_len, &height, &width, &threshold) == FAILURE) {",
          "4457:   return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4439: #ifdef HAVE_GD_JPG",
          "4441: #endif",
          "",
          "---------------",
          "--- Hunk 77 ---",
          "[Context before]",
          "4617:  if (zend_parse_parameters(1 TSRMLS_CC, \"r\", &SIM) == FAILURE) { \\",
          "4618:   RETURN_FALSE; \\",
          "4619:  } \\",
          "4621:  if (im_src == NULL) { \\",
          "4622:   RETURN_FALSE; \\",
          "4623:  }",
          "",
          "[Removed Lines]",
          "4620:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, &SIM, -1, \"Image\", le_gd); \\",
          "",
          "[Added Lines]",
          "4607:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, SIM, -1, \"Image\", le_gd); \\",
          "",
          "---------------",
          "--- Hunk 78 ---",
          "[Context before]",
          "4654:   RETURN_FALSE;",
          "4655:  }",
          "4659:  if (im_src == NULL) {",
          "4660:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "4657:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, &SIM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "4644:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, SIM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 79 ---",
          "[Context before]",
          "4677:   RETURN_FALSE;",
          "4678:  }",
          "4682:  if (im_src == NULL) {",
          "4683:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "4680:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, &SIM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "4667:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, SIM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 80 ---",
          "[Context before]",
          "4701:   RETURN_FALSE;",
          "4702:  }",
          "4706:  if (im_src == NULL) {",
          "4707:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "4704:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, &SIM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "4691:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, SIM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 81 ---",
          "[Context before]",
          "4780:   RETURN_FALSE;",
          "4781:  }",
          "4785:  if (im_src == NULL) {",
          "4786:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "4783:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, &SIM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "4770:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, SIM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 82 ---",
          "[Context before]",
          "4804:   RETURN_FALSE;",
          "4805:  }",
          "4809:  if (im == NULL) {",
          "4810:   RETURN_FALSE;",
          "",
          "[Removed Lines]",
          "4807:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "4794:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 83 ---",
          "[Context before]",
          "4858: PHP_FUNCTION(imageconvolution)",
          "4859: {",
          "4860:  zval *SIM, *hash_matrix;",
          "4862:  gdImagePtr im_src = NULL;",
          "4863:  double div, offset;",
          "4864:  int nelem, i, j, res;",
          "",
          "[Removed Lines]",
          "4861:  zval **var = NULL, **var2 = NULL;",
          "",
          "[Added Lines]",
          "4848:  zval *var = NULL, *var2 = NULL;",
          "",
          "---------------",
          "--- Hunk 84 ---",
          "[Context before]",
          "4868:   RETURN_FALSE;",
          "4869:  }",
          "4873:  nelem = zend_hash_num_elements(Z_ARRVAL_P(hash_matrix));",
          "4874:  if (nelem != 3) {",
          "",
          "[Removed Lines]",
          "4871:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, &SIM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "4858:  ZEND_FETCH_RESOURCE(im_src, gdImagePtr, SIM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 85 ---",
          "[Context before]",
          "4877:  }",
          "4879:  for (i=0; i<3; i++) {",
          "4882:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"You must have 3x3 array\");",
          "4883:     RETURN_FALSE;",
          "4884:    }",
          "4886:    for (j=0; j<3; j++) {",
          "4889:       zval dval;",
          "4892:       convert_to_double(&dval);",
          "4893:       matrix[i][j] = (float)Z_DVAL(dval);",
          "4894:      } else {",
          "4896:      }",
          "4897:     } else {",
          "4898:      php_error_docref(NULL TSRMLS_CC, E_WARNING, \"You must have a 3x3 matrix\");",
          "",
          "[Removed Lines]",
          "4880:   if (zend_hash_index_find(Z_ARRVAL_P(hash_matrix), (i), (void **) &var) == SUCCESS && Z_TYPE_PP(var) == IS_ARRAY) {",
          "4881:    if (Z_TYPE_PP(var) != IS_ARRAY || zend_hash_num_elements(Z_ARRVAL_PP(var)) != 3 ) {",
          "4887:     if (zend_hash_index_find(Z_ARRVAL_PP(var), (j), (void **) &var2) == SUCCESS) {",
          "4888:      if (Z_TYPE_PP(var2) != IS_DOUBLE) {",
          "4890:       dval = **var2;",
          "4891:       zval_copy_ctor(&dval);",
          "4895:       matrix[i][j] = (float)Z_DVAL_PP(var2);",
          "",
          "[Added Lines]",
          "4867:   if ((var = zend_hash_index_find(Z_ARRVAL_P(hash_matrix), (i))) != NULL && Z_TYPE_P(var) == IS_ARRAY) {",
          "4868:    if (zend_hash_num_elements(Z_ARRVAL_P(var)) != 3 ) {",
          "4874:     if ((var2 = zend_hash_index_find(Z_ARRVAL_P(var), (j))) != NULL) {",
          "4875:      if (Z_TYPE_P(var2) != IS_DOUBLE) {",
          "4877:       ZVAL_COPY(&dval, var2);",
          "4881:       matrix[i][j] = (float)Z_DVAL_P(var2);",
          "",
          "---------------",
          "--- Hunk 86 ---",
          "[Context before]",
          "4924:   return;",
          "4925:  }",
          "4929:  switch (mode) {",
          "4930:   case GD_FLIP_VERTICAL:",
          "",
          "[Removed Lines]",
          "4927:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "4913:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 87 ---",
          "[Context before]",
          "4961:   return;",
          "4962:  }",
          "4965:  gdImageAntialias(im, alias);",
          "4966:  RETURN_TRUE;",
          "4967: }",
          "",
          "[Removed Lines]",
          "4964:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "4950:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 88 ---",
          "[Context before]",
          "4977:  gdImagePtr im_crop;",
          "4978:  gdRect rect;",
          "4979:  zval *z_rect;",
          "4982:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ra\", &IM, &z_rect) == FAILURE)  {",
          "4983:   return;",
          "4984:  }",
          "4990:    zval lval;",
          "4993:    convert_to_long(&lval);",
          "4994:    rect.x = Z_LVAL(lval);",
          "4995:   } else {",
          "4997:   }",
          "4998:  } else {",
          "4999:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing x position\");",
          "5000:   RETURN_FALSE;",
          "5001:  }",
          "5005:    zval lval;",
          "5008:    convert_to_long(&lval);",
          "5009:    rect.y = Z_LVAL(lval);",
          "5010:   } else {",
          "5012:   }",
          "5013:  } else {",
          "5014:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing y position\");",
          "5015:   RETURN_FALSE;",
          "5016:  }",
          "5020:    zval lval;",
          "5023:    convert_to_long(&lval);",
          "5024:    rect.width = Z_LVAL(lval);",
          "5025:   } else {",
          "5027:   }",
          "5028:  } else {",
          "5029:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing width\");",
          "5030:   RETURN_FALSE;",
          "5031:  }",
          "5035:    zval lval;",
          "5038:    convert_to_long(&lval);",
          "5039:    rect.height = Z_LVAL(lval);",
          "5040:   } else {",
          "5042:   }",
          "5043:  } else {",
          "5044:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing height\");",
          "",
          "[Removed Lines]",
          "4980:  zval **tmp;",
          "4986:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "4988:  if (zend_hash_find(HASH_OF(z_rect), \"x\", sizeof(\"x\"), (void **)&tmp) != FAILURE) {",
          "4989:   if (Z_TYPE_PP(tmp) != IS_LONG) {",
          "4991:    lval = **tmp;",
          "4992:    zval_copy_ctor(&lval);",
          "4996:    rect.x = Z_LVAL_PP(tmp);",
          "5003:  if (zend_hash_find(HASH_OF(z_rect), \"y\", sizeof(\"x\"), (void **)&tmp) != FAILURE) {",
          "5004:   if (Z_TYPE_PP(tmp) != IS_LONG) {",
          "5006:    lval = **tmp;",
          "5007:    zval_copy_ctor(&lval);",
          "5011:    rect.y = Z_LVAL_PP(tmp);",
          "5018:  if (zend_hash_find(HASH_OF(z_rect), \"width\", sizeof(\"width\"), (void **)&tmp) != FAILURE) {",
          "5019:   if (Z_TYPE_PP(tmp) != IS_LONG) {",
          "5021:    lval = **tmp;",
          "5022:    zval_copy_ctor(&lval);",
          "5026:    rect.width = Z_LVAL_PP(tmp);",
          "5033:  if (zend_hash_find(HASH_OF(z_rect), \"height\", sizeof(\"height\"), (void **)&tmp) != FAILURE) {",
          "5034:   if (Z_TYPE_PP(tmp) != IS_LONG) {",
          "5036:    lval = **tmp;",
          "5037:    zval_copy_ctor(&lval);",
          "5041:    rect.height = Z_LVAL_PP(tmp);",
          "",
          "[Added Lines]",
          "4966:  zval *tmp;",
          "4972:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "4974:  if ((tmp = zend_hash_str_find(HASH_OF(z_rect), \"x\", sizeof(\"x\") -1)) != NULL) {",
          "4975:   if (Z_TYPE_P(tmp) != IS_LONG) {",
          "4977:    ZVAL_COPY(&lval, tmp);",
          "4981:    rect.x = Z_LVAL_P(tmp);",
          "4988:  if ((tmp = zend_hash_str_find(HASH_OF(z_rect), \"y\", sizeof(\"y\") - 1)) != NULL) {",
          "4989:   if (Z_TYPE_P(tmp) != IS_LONG) {",
          "4991:    ZVAL_COPY(&lval, tmp);",
          "4995:    rect.y = Z_LVAL_P(tmp);",
          "5002:  if ((tmp = zend_hash_str_find(HASH_OF(z_rect), \"width\", sizeof(\"width\") - 1)) != NULL) {",
          "5003:   if (Z_TYPE_P(tmp) != IS_LONG) {",
          "5005:    ZVAL_COPY(&lval, tmp);",
          "5009:    rect.width = Z_LVAL_P(tmp);",
          "5016:  if ((tmp = zend_hash_str_find(HASH_OF(z_rect), \"height\", sizeof(\"height\") - 1)) != NULL) {",
          "5017:   if (Z_TYPE_P(tmp) != IS_LONG) {",
          "5019:    ZVAL_COPY(&lval, tmp);",
          "5023:    rect.height = Z_LVAL_P(tmp);",
          "",
          "---------------",
          "--- Hunk 89 ---",
          "[Context before]",
          "5070:   return;",
          "5071:  }",
          "5075:  switch (mode) {",
          "5076:   case -1:",
          "",
          "[Removed Lines]",
          "5073:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "5055:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 90 ---",
          "[Context before]",
          "5121:  new_width = tmp_w;",
          "5122:  new_height = tmp_h;",
          "5126:  if (gdImageSetInterpolationMethod(im, method)) {",
          "5127:   im_scaled = gdImageScale(im, new_width, new_height);",
          "",
          "[Removed Lines]",
          "5124:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "5106:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 91 ---",
          "[Context before]",
          "5146:  gdRectPtr pRect = NULL;",
          "5147:  zval *z_rect = NULL;",
          "5148:  zval *z_affine;",
          "5150:  double affine[6];",
          "5151:  int i, nelems;",
          "5154:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"ra|a\", &IM, &z_affine, &z_rect) == FAILURE)  {",
          "5155:   return;",
          "5156:  }",
          "5160:  if ((nelems = zend_hash_num_elements(Z_ARRVAL_P(z_affine))) != 6) {",
          "5161:   php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Affine array must have six elements\");",
          "",
          "[Removed Lines]",
          "5149:  zval **tmp;",
          "5152:  zval **zval_affine_elem = NULL;",
          "5158:  ZEND_FETCH_RESOURCE(src, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "5131:  zval *tmp;",
          "5134:  zval *zval_affine_elem = NULL;",
          "5140:  ZEND_FETCH_RESOURCE(src, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------",
          "--- Hunk 92 ---",
          "[Context before]",
          "5163:  }",
          "5165:  for (i = 0; i < nelems; i++) {",
          "5168:     case IS_LONG:",
          "5170:      break;",
          "5171:     case IS_DOUBLE:",
          "5173:      break;",
          "5174:     case IS_STRING:",
          "5175:      {",
          "5176:       zval dval;",
          "5179:       convert_to_double(&dval);",
          "5180:       affine[i] = Z_DVAL(dval);",
          "5181:      }",
          "",
          "[Removed Lines]",
          "5166:   if (zend_hash_index_find(Z_ARRVAL_P(z_affine), i, (void **) &zval_affine_elem) == SUCCESS) {",
          "5167:    switch (Z_TYPE_PP(zval_affine_elem)) {",
          "5169:      affine[i]  = Z_LVAL_PP(zval_affine_elem);",
          "5172:      affine[i] = Z_DVAL_PP(zval_affine_elem);",
          "5177:       dval = **zval_affine_elem;",
          "5178:       zval_copy_ctor(&dval);",
          "",
          "[Added Lines]",
          "5148:   if ((zval_affine_elem = zend_hash_index_find(Z_ARRVAL_P(z_affine), i)) != NULL) {",
          "5149:    switch (Z_TYPE_P(zval_affine_elem)) {",
          "5151:      affine[i]  = Z_LVAL_P(zval_affine_elem);",
          "5154:      affine[i] = Z_DVAL_P(zval_affine_elem);",
          "5159:       ZVAL_COPY(&dval, zval_affine_elem);",
          "",
          "---------------",
          "--- Hunk 93 ---",
          "[Context before]",
          "5188:  }",
          "5190:  if (z_rect != NULL) {",
          "5193:     zval lval;",
          "5196:     convert_to_long(&lval);",
          "5197:     rect.x = Z_LVAL(lval);",
          "5198:    } else {",
          "5200:    }",
          "5201:   } else {",
          "5202:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing x position\");",
          "5203:    RETURN_FALSE;",
          "5204:   }",
          "5208:     zval lval;",
          "5211:     convert_to_long(&lval);",
          "5212:     rect.y = Z_LVAL(lval);",
          "5213:    } else {",
          "5215:    }",
          "5216:   } else {",
          "5217:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing y position\");",
          "5218:    RETURN_FALSE;",
          "5219:   }",
          "5223:     zval lval;",
          "5226:     convert_to_long(&lval);",
          "5227:     rect.width = Z_LVAL(lval);",
          "5228:    } else {",
          "5230:    }",
          "5231:   } else {",
          "5232:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing width\");",
          "5233:    RETURN_FALSE;",
          "5234:   }",
          "5238:     zval lval;",
          "5241:     convert_to_long(&lval);",
          "5242:     rect.height = Z_LVAL(lval);",
          "5243:    } else {",
          "5245:    }",
          "5246:   } else {",
          "5247:    php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing height\");",
          "",
          "[Removed Lines]",
          "5191:   if (zend_hash_find(HASH_OF(z_rect), \"x\", sizeof(\"x\"), (void **)&tmp) != FAILURE) {",
          "5192:    if (Z_TYPE_PP(tmp) != IS_LONG) {",
          "5194:     lval = **tmp;",
          "5195:     zval_copy_ctor(&lval);",
          "5199:     rect.x = Z_LVAL_PP(tmp);",
          "5206:   if (zend_hash_find(HASH_OF(z_rect), \"y\", sizeof(\"x\"), (void **)&tmp) != FAILURE) {",
          "5207:    if (Z_TYPE_PP(tmp) != IS_LONG) {",
          "5209:     lval = **tmp;",
          "5210:     zval_copy_ctor(&lval);",
          "5214:     rect.y = Z_LVAL_PP(tmp);",
          "5221:   if (zend_hash_find(HASH_OF(z_rect), \"width\", sizeof(\"width\"), (void **)&tmp) != FAILURE) {",
          "5222:    if (Z_TYPE_PP(tmp) != IS_LONG) {",
          "5224:     lval = **tmp;",
          "5225:     zval_copy_ctor(&lval);",
          "5229:     rect.width = Z_LVAL_PP(tmp);",
          "5236:   if (zend_hash_find(HASH_OF(z_rect), \"height\", sizeof(\"height\"), (void **)&tmp) != FAILURE) {",
          "5237:    if (Z_TYPE_PP(tmp) != IS_LONG) {",
          "5239:     lval = **tmp;",
          "5240:     zval_copy_ctor(&lval);",
          "5244:     rect.height = Z_LVAL_PP(tmp);",
          "",
          "[Added Lines]",
          "5172:   if ((tmp = zend_hash_str_find(HASH_OF(z_rect), \"x\", sizeof(\"x\") - 1)) != NULL) {",
          "5173:    if (Z_TYPE_P(tmp) != IS_LONG) {",
          "5175:     ZVAL_COPY(&lval, tmp);",
          "5179:     rect.x = Z_LVAL_P(tmp);",
          "5186:   if ((tmp = zend_hash_str_find(HASH_OF(z_rect), \"y\", sizeof(\"y\") - 1)) != NULL) {",
          "5187:    if (Z_TYPE_P(tmp) != IS_LONG) {",
          "5189:     ZVAL_COPY(&lval, tmp);",
          "5193:     rect.y = Z_LVAL_P(tmp);",
          "5200:   if ((tmp = zend_hash_str_find(HASH_OF(z_rect), \"width\", sizeof(\"width\") - 1)) != NULL) {",
          "5201:    if (Z_TYPE_P(tmp) != IS_LONG) {",
          "5203:     ZVAL_COPY(&lval, tmp);",
          "5207:     rect.width = Z_LVAL_P(tmp);",
          "5214:   if ((tmp = zend_hash_str_find(HASH_OF(z_rect), \"height\", sizeof(\"height\") - 1)) != NULL) {",
          "5215:    if (Z_TYPE_P(tmp) != IS_LONG) {",
          "5217:     ZVAL_COPY(&lval, tmp);",
          "5221:     rect.height = Z_LVAL_P(tmp);",
          "",
          "---------------",
          "--- Hunk 94 ---",
          "[Context before]",
          "5275:  double affine[6];",
          "5276:  long type;",
          "5277:  zval *options;",
          "5279:  int res = GD_FALSE, i;",
          "5281:  if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l|z\", &type, &options) == FAILURE)  {",
          "",
          "[Removed Lines]",
          "5278:  zval **tmp;",
          "",
          "[Added Lines]",
          "5255:  zval *tmp;",
          "",
          "---------------",
          "--- Hunk 95 ---",
          "[Context before]",
          "5290:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Array expected as options\");",
          "5291:     RETURN_FALSE;",
          "5292:    }",
          "5295:      zval dval;",
          "5298:      convert_to_double(&dval);",
          "5299:      x = Z_DVAL(dval);",
          "5300:     } else {",
          "5302:     }",
          "5303:    } else {",
          "5304:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing x position\");",
          "5305:     RETURN_FALSE;",
          "5306:    }",
          "5310:      zval dval;",
          "5313:      convert_to_double(&dval);",
          "5314:      y = Z_DVAL(dval);",
          "5315:     } else {",
          "5317:     }",
          "5318:    } else {",
          "5319:     php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Missing y position\");",
          "",
          "[Removed Lines]",
          "5293:    if (zend_hash_find(HASH_OF(options), \"x\", sizeof(\"x\"), (void **)&tmp) != FAILURE) {",
          "5294:     if (Z_TYPE_PP(tmp) != IS_DOUBLE) {",
          "5296:      dval = **tmp;",
          "5297:      zval_copy_ctor(&dval);",
          "5301:      x = Z_DVAL_PP(tmp);",
          "5308:    if (zend_hash_find(HASH_OF(options), \"y\", sizeof(\"y\"), (void **)&tmp) != FAILURE) {",
          "5309:     if (Z_TYPE_PP(tmp) != IS_DOUBLE) {",
          "5311:      dval = **tmp;",
          "5312:      zval_copy_ctor(&dval);",
          "5316:      y = Z_DVAL_PP(tmp);",
          "",
          "[Added Lines]",
          "5270:    if ((tmp = zend_hash_str_find(HASH_OF(options), \"x\", sizeof(\"x\") - 1)) != NULL) {",
          "5271:     if (Z_TYPE_P(tmp) != IS_DOUBLE) {",
          "5273:      ZVAL_COPY(&dval, tmp);",
          "5277:      x = Z_DVAL_P(tmp);",
          "5284:    if ((tmp = zend_hash_str_find(HASH_OF(options), \"y\", sizeof(\"y\") - 1)) != NULL) {",
          "5285:     if (Z_TYPE_P(tmp) != IS_DOUBLE) {",
          "5287:      ZVAL_COPY(&dval, tmp);",
          "5291:      y = Z_DVAL_P(tmp);",
          "",
          "---------------",
          "--- Hunk 96 ---",
          "[Context before]",
          "5333:   case GD_AFFINE_SHEAR_VERTICAL: {",
          "5334:    double angle;",
          "5337:    angle = Z_DVAL_P(options);",
          "5339:    if (type == GD_AFFINE_SHEAR_HORIZONTAL) {",
          "",
          "[Removed Lines]",
          "5336:    convert_to_double_ex(&options);",
          "",
          "[Added Lines]",
          "5311:    convert_to_double_ex(options);",
          "",
          "---------------",
          "--- Hunk 97 ---",
          "[Context before]",
          "5359:    add_index_double(return_value, i, affine[i]);",
          "5360:   }",
          "5361:  }",
          "",
          "[Removed Lines]",
          "5362: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 98 ---",
          "[Context before]",
          "5370:  double m2[6];",
          "5371:  double mr[6];",
          "5374:  zval *z_m1;",
          "5375:  zval *z_m2;",
          "5376:  int i, nelems;",
          "",
          "[Removed Lines]",
          "5373:  zval **tmp;",
          "",
          "[Added Lines]",
          "5347:  zval *tmp;",
          "",
          "---------------",
          "--- Hunk 99 ---",
          "[Context before]",
          "5385:  }",
          "5387:  for (i = 0; i < 6; i++) {",
          "5390:     case IS_LONG:",
          "5392:      break;",
          "5393:     case IS_DOUBLE:",
          "5395:      break;",
          "5396:     case IS_STRING:",
          "5397:      {",
          "5398:       zval dval;",
          "5401:       convert_to_double(&dval);",
          "5402:       m1[i] = Z_DVAL(dval);",
          "5403:      }",
          "",
          "[Removed Lines]",
          "5388:   if (zend_hash_index_find(Z_ARRVAL_P(z_m1), i, (void **) &tmp) == SUCCESS) {",
          "5389:    switch (Z_TYPE_PP(tmp)) {",
          "5391:      m1[i]  = Z_LVAL_PP(tmp);",
          "5394:      m1[i] = Z_DVAL_PP(tmp);",
          "5399:       dval = **tmp;",
          "5400:       zval_copy_ctor(&dval);",
          "",
          "[Added Lines]",
          "5362:   if ((tmp = zend_hash_index_find(Z_ARRVAL_P(z_m1), i)) != NULL) {",
          "5363:    switch (Z_TYPE_P(tmp)) {",
          "5365:      m1[i]  = Z_LVAL_P(tmp);",
          "5368:      m1[i] = Z_DVAL_P(tmp);",
          "5373:       ZVAL_COPY(&dval, tmp);",
          "",
          "---------------",
          "--- Hunk 100 ---",
          "[Context before]",
          "5407:      RETURN_FALSE;",
          "5408:    }",
          "5409:   }",
          "5412:     case IS_LONG:",
          "5414:      break;",
          "5415:     case IS_DOUBLE:",
          "5417:      break;",
          "5418:     case IS_STRING:",
          "5419:      {",
          "5420:       zval dval;",
          "5423:       convert_to_double(&dval);",
          "5424:       m2[i] = Z_DVAL(dval);",
          "5425:      }",
          "",
          "[Removed Lines]",
          "5410:   if (zend_hash_index_find(Z_ARRVAL_P(z_m2), i, (void **) &tmp) == SUCCESS) {",
          "5411:    switch (Z_TYPE_PP(tmp)) {",
          "5413:      m2[i]  = Z_LVAL_PP(tmp);",
          "5416:      m2[i] = Z_DVAL_PP(tmp);",
          "5421:       dval = **tmp;",
          "5422:       zval_copy_ctor(&dval);",
          "",
          "[Added Lines]",
          "5383:   if ((tmp = zend_hash_index_find(Z_ARRVAL_P(z_m2), i)) != NULL) {",
          "5384:    switch (Z_TYPE_P(tmp)) {",
          "5386:      m2[i]  = Z_LVAL_P(tmp);",
          "5389:      m2[i] = Z_DVAL_P(tmp);",
          "5394:       ZVAL_COPY(&dval, tmp);",
          "",
          "---------------",
          "--- Hunk 101 ---",
          "[Context before]",
          "5439:  for (i = 0; i < 6; i++) {",
          "5440:   add_index_double(return_value, i, mr[i]);",
          "5441:  }",
          "",
          "[Removed Lines]",
          "5442: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 102 ---",
          "[Context before]",
          "5453:   return;",
          "5454:  }",
          "5458:  if (method == -1) {",
          "5459:    method = GD_BILINEAR_FIXED;",
          "",
          "[Removed Lines]",
          "5456:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &IM, -1, \"Image\", le_gd);",
          "",
          "[Added Lines]",
          "5428:  ZEND_FETCH_RESOURCE(im, gdImagePtr, IM, -1, \"Image\", le_gd);",
          "",
          "---------------"
        ],
        "ext/gd/gd_ctx.c||ext/gd/gd_ctx.c": [
          "File: ext/gd/gd_ctx.c -> ext/gd/gd_ctx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #define CTX_PUTC(c,ctx) ctx->putC(ctx, c)",
          "26: {",
          "",
          "[Removed Lines]",
          "25: static void _php_image_output_putc(struct gdIOCtx *ctx, int c)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "31:  unsigned char ch = (unsigned char) c;",
          "32:  TSRMLS_FETCH();",
          "33:  php_write(&ch, 1 TSRMLS_CC);",
          "37: {",
          "38:  TSRMLS_FETCH();",
          "39:  return php_write((void *)buf, l TSRMLS_CC);",
          "43: {",
          "44:  if(ctx) {",
          "45:   efree(ctx);",
          "46:  }",
          "50:  char ch = (char) c;",
          "51:  php_stream * stream = (php_stream *)ctx->data;",
          "52:  TSRMLS_FETCH();",
          "53:  php_stream_write(stream, &ch, 1);",
          "57: {",
          "58:  php_stream * stream = (php_stream *)ctx->data;",
          "59:  TSRMLS_FETCH();",
          "60:  return php_stream_write(stream, (void *)buf, l);",
          "64: {",
          "65:  TSRMLS_FETCH();",
          "",
          "[Removed Lines]",
          "34: }",
          "36: static int _php_image_output_putbuf(struct gdIOCtx *ctx, const void* buf, int l)",
          "40: }",
          "42: static void _php_image_output_ctxfree(struct gdIOCtx *ctx)",
          "47: }",
          "49: static void _php_image_stream_putc(struct gdIOCtx *ctx, int c)  {",
          "54: }",
          "56: static int _php_image_stream_putbuf(struct gdIOCtx *ctx, const void* buf, int l)",
          "61: }",
          "63: static void _php_image_stream_ctxfree(struct gdIOCtx *ctx)",
          "",
          "[Added Lines]",
          "49: static void _php_image_stream_putc(struct gdIOCtx *ctx, int c) /* {{{ */ {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "71:  if(ctx) {",
          "72:   efree(ctx);",
          "73:  }",
          "77: static void _php_image_output_ctx(INTERNAL_FUNCTION_PARAMETERS, int image_type, char *tn, void (*func_p)())",
          "",
          "[Removed Lines]",
          "74: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "108:   }",
          "109:  }",
          "113:  if (argc >= 3) {",
          "",
          "[Removed Lines]",
          "111:  ZEND_FETCH_RESOURCE(im, gdImagePtr, &imgind, -1, \"Image\", phpi_get_le_gd());",
          "",
          "[Added Lines]",
          "111:  ZEND_FETCH_RESOURCE(im, gdImagePtr, imgind, -1, \"Image\", phpi_get_le_gd());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "120:  if (argc > 1 && to_zval != NULL) {",
          "121:   if (Z_TYPE_P(to_zval) == IS_RESOURCE) {",
          "123:    if (stream == NULL) {",
          "124:     RETURN_FALSE;",
          "125:    }",
          "",
          "[Removed Lines]",
          "122:    php_stream_from_zval_no_verify(stream, &to_zval);",
          "",
          "[Added Lines]",
          "122:    php_stream_from_zval_no_verify(stream, to_zval);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "14847af41d153e3abe4986afa49526d93810098a",
      "candidate_info": {
        "commit_hash": "14847af41d153e3abe4986afa49526d93810098a",
        "repo": "php/php-src",
        "commit_url": "https://github.com/php/php-src/commit/14847af41d153e3abe4986afa49526d93810098a",
        "files": [
          "configure.in",
          "main/php_version.h"
        ],
        "message": "Update version numbers to 5.4.7-dev.",
        "before_after_code_files": [
          "configure.in||configure.in",
          "main/php_version.h||main/php_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "main/php_version.h||main/php_version.h"
          ],
          "candidate": [
            "main/php_version.h||main/php_version.h"
          ]
        }
      },
      "candidate_diff": {
        "configure.in||configure.in": [
          "File: configure.in -> configure.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "120: PHP_MAJOR_VERSION=5",
          "121: PHP_MINOR_VERSION=4",
          "123: PHP_EXTRA_VERSION=\"-dev\"",
          "124: PHP_VERSION=\"$PHP_MAJOR_VERSION.$PHP_MINOR_VERSION.$PHP_RELEASE_VERSION$PHP_EXTRA_VERSION\"",
          "125: PHP_VERSION_ID=`expr [$]PHP_MAJOR_VERSION \\* 10000 + [$]PHP_MINOR_VERSION \\* 100 + [$]PHP_RELEASE_VERSION`",
          "",
          "[Removed Lines]",
          "122: PHP_RELEASE_VERSION=5",
          "",
          "[Added Lines]",
          "122: PHP_RELEASE_VERSION=7",
          "",
          "---------------"
        ],
        "main/php_version.h||main/php_version.h": [
          "File: main/php_version.h -> main/php_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define PHP_MAJOR_VERSION 5",
          "4: #define PHP_MINOR_VERSION 4",
          "6: #define PHP_EXTRA_VERSION \"-dev\"",
          "",
          "[Removed Lines]",
          "5: #define PHP_RELEASE_VERSION 5",
          "7: #define PHP_VERSION \"5.4.5-dev\"",
          "8: #define PHP_VERSION_ID 50405",
          "",
          "[Added Lines]",
          "5: #define PHP_RELEASE_VERSION 7",
          "7: #define PHP_VERSION \"5.4.7-dev\"",
          "8: #define PHP_VERSION_ID 50407",
          "",
          "---------------"
        ]
      }
    }
  ]
}