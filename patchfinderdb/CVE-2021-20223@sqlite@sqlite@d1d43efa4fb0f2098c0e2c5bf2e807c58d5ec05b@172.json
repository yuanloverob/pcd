{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cd653a3266a4fd88b334c4aaffd1945e871a8d9a",
      "candidate_info": {
        "commit_hash": "cd653a3266a4fd88b334c4aaffd1945e871a8d9a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cd653a3266a4fd88b334c4aaffd1945e871a8d9a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/select3.test"
        ],
        "message": "Avoid deleting expression nodes in the flattener code, as they may be referenced by AggInfo objects further up the stack.\n\nFossilOrigin-Name: cc1fffdeddf422404170fa163ab80372ae58b444d7012b2c164021b221709b3e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/select3.test||test/select3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ad738286e2441b5e84d05366db3fcafabe66be766f21fe6c17f43a8fabab16fb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4115:     if( isLeftJoin>0 ){",
          "4116:       sqlite3SetJoinExpr(pWhere, iNewParent);",
          "4117:     }",
          "4119:     if( db->mallocFailed==0 ){",
          "4120:       SubstContext x;",
          "4121:       x.pParse = pParse;",
          "",
          "[Removed Lines]",
          "4118:     pParent->pWhere = sqlite3ExprAnd(pParse, pWhere, pParent->pWhere);",
          "",
          "[Added Lines]",
          "4118:     if( pWhere ){",
          "4119:       if( pParent->pWhere ){",
          "4120:         pParent->pWhere = sqlite3PExpr(pParse, TK_AND, pWhere, pParent->pWhere);",
          "4121:       }else{",
          "4122:         pParent->pWhere = pWhere;",
          "4123:       }",
          "4124:     }",
          "",
          "---------------"
        ],
        "test/select3.test||test/select3.test": [
          "File: test/select3.test -> test/select3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:   SELECT * FROM t0 GROUP BY c0;",
          "315: } {1.0 1.0}",
          "317: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317: reset_db",
          "318: do_execsql_test select3.10.100 {",
          "319:   CREATE TABLE t1(a, b);",
          "320:   CREATE TABLE t2(c, d);",
          "321:   SELECT max(t1.a),",
          "322:          (SELECT 'xyz' FROM (SELECT * FROM t2 WHERE 0) WHERE t1.b=1)",
          "323:   FROM t1;",
          "324: } {{} {}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "76c12068451688425352394b23afd326beffe768",
      "candidate_info": {
        "commit_hash": "76c12068451688425352394b23afd326beffe768",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/76c12068451688425352394b23afd326beffe768",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix a minor typo on a comment in the CLI implementation.\n\nFossilOrigin-Name: db4fb3503c4e1e40d7bd140187014e8f0cc186c441a0c7462987c77e2c83136a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4c4fd62a092b8db6398c64a92c9ff35915eedcce1079a77aeda81811d94096c4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in"
        ]
      }
    },
    {
      "candidate_hash": "2b75d3beb0b38069e15faf58e7b28cd273cc273e",
      "candidate_info": {
        "commit_hash": "2b75d3beb0b38069e15faf58e7b28cd273cc273e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2b75d3beb0b38069e15faf58e7b28cd273cc273e",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Fix a bug in Fossil that might cause it to crash if there is a multi-terminal token with a space following the \"|\" separator. This does not affect SQLite.\n\nFossilOrigin-Name: 430c5d1da57af452f236cc862139d84ab97b6020f6d327dae5268c58e6e83a87",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: de80bc87300257cc49d98e2d22e914211f213dce912f320c8b37b3883c73923c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2426:           psp->alias[psp->nrhs] = 0;",
          "2427:           psp->nrhs++;",
          "2428:         }",
          "2430:         struct symbol *msp = psp->rhs[psp->nrhs-1];",
          "2431:         if( msp->type!=MULTITERMINAL ){",
          "2432:           struct symbol *origsp = msp;",
          "",
          "[Removed Lines]",
          "2429:       }else if( (x[0]=='|' || x[0]=='/') && psp->nrhs>0 ){",
          "",
          "[Added Lines]",
          "2429:       }else if( (x[0]=='|' || x[0]=='/') && psp->nrhs>0 && ISUPPER(x[1]) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "293e9f5d6cd1ae9a91de09e85d1a03d777a71f3d",
      "candidate_info": {
        "commit_hash": "293e9f5d6cd1ae9a91de09e85d1a03d777a71f3d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/293e9f5d6cd1ae9a91de09e85d1a03d777a71f3d",
        "files": [
          "ext/misc/cksumvfs.c",
          "ext/misc/stmt.c",
          "ext/misc/uint.c",
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/btree.c",
          "src/delete.c",
          "src/main.c",
          "src/sqlite.h.in",
          "src/vdbe.c"
        ],
        "message": "Merge latest trunk changes into this branch.\n\nFossilOrigin-Name: a3727dba10b476f414f0a049b35f2a5c169a408eccefa6833821560684e07f8b",
        "before_after_code_files": [
          "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c",
          "ext/misc/stmt.c||ext/misc/stmt.c",
          "ext/misc/uint.c||ext/misc/uint.c",
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/btree.c||src/btree.c",
          "src/delete.c||src/delete.c",
          "src/main.c||src/main.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/cksumvfs.c||ext/misc/cksumvfs.c": [
          "File: ext/misc/cksumvfs.c -> ext/misc/cksumvfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "412:     ){",
          "413:       u8 cksum[8];",
          "414:       cksmCompute((u8*)zBuf, iAmt-8, cksum);",
          "416:         sqlite3_log(SQLITE_IOERR_DATA,",
          "417:            \"checksum fault offset %lld of \\\"%s\\\"\",",
          "418:            iOfst, p->zFName);",
          "",
          "[Removed Lines]",
          "415:       if( memcmp(zBuf+iAmt-8, cksum, 8)!=0 ){",
          "",
          "[Added Lines]",
          "415:       if( memcmp((u8*)zBuf+iAmt-8, cksum, 8)!=0 ){",
          "",
          "---------------"
        ],
        "ext/misc/stmt.c||ext/misc/stmt.c": [
          "File: ext/misc/stmt.c -> ext/misc/stmt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:       sqlite3_result_int(ctx, sqlite3_stmt_busy(pCur->pStmt));",
          "169:       break;",
          "170:     }",
          "172:       i = SQLITE_STMTSTATUS_MEMUSED +",
          "173:             STMT_COLUMN_NSCAN - SQLITE_STMTSTATUS_FULLSCAN_STEP;",
          "",
          "[Removed Lines]",
          "171:     case STMT_COLUMN_MEM: {",
          "",
          "[Added Lines]",
          "171:     default: {",
          "172:       assert( i==STMT_COLUMN_MEM );",
          "",
          "---------------"
        ],
        "ext/misc/uint.c||ext/misc/uint.c": [
          "File: ext/misc/uint.c -> ext/misc/uint.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45:   const unsigned char *zA = (const unsigned char*)pKey1;",
          "46:   const unsigned char *zB = (const unsigned char*)pKey2;",
          "47:   int i=0, j=0, x;",
          "48:   while( i<nKey1 && j<nKey2 ){",
          "49:     x = zA[i] - zB[j];",
          "50:     if( isdigit(zA[i]) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:   (void)notUsed;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d6f819a9e6b35f3fd558bd93255a6a24ad690a0fa15a82b009ca9c641db983c6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "768:     }",
          "769:   }else",
          "770: #endif",
          "772:     p->nSkipAhead++;",
          "773:     sqlite3_result_int(context, p->current.anDLt[0]>0);",
          "774:   }",
          "",
          "[Removed Lines]",
          "771:   if( p->nLimit && p->nRow>p->nLimit*(p->nSkipAhead+1) ){",
          "",
          "[Added Lines]",
          "771:   if( p->nLimit && p->nRow>(tRowcnt)p->nLimit*(p->nSkipAhead+1) ){",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7167:   assert( nCell>=0 );",
          "7168:   if( iOld<iNew ){",
          "7169:     int nShift = pageFreeArray(pPg, iOld, iNew-iOld, pCArray);",
          "7171:     memmove(pPg->aCellIdx, &pPg->aCellIdx[nShift*2], nCell*2);",
          "7172:     nCell -= nShift;",
          "7173:   }",
          "",
          "[Removed Lines]",
          "7170:     if( nShift>nCell ) return SQLITE_CORRUPT_BKPT;",
          "",
          "[Added Lines]",
          "7170:     if( NEVER(nShift>nCell) ) return SQLITE_CORRUPT_BKPT;",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "25: #if defined(SQLITE_ENABLE_ICU) || defined(SQLITE_ENABLE_ICU_COLLATIONS)",
          "26: # include \"sqliteicu.h\"",
          "27: #endif",
          "28: #ifdef SQLITE_ENABLE_JSON1",
          "29: int sqlite3Json1Init(sqlite3*);",
          "30: #endif",
          "31: #ifdef SQLITE_ENABLE_STMTVTAB",
          "32: int sqlite3StmtVtabInit(sqlite3*);",
          "33: #endif",
          "34: #ifdef SQLITE_ENABLE_FTS5",
          "36: #endif",
          "38: #ifndef SQLITE_AMALGAMATION",
          "",
          "[Removed Lines]",
          "35: int sqlite3Fts5Init(sqlite3*);",
          "",
          "[Added Lines]",
          "34: static int sqlite3TestExtInit(sqlite3 *db){",
          "35:   (void)db;",
          "36:   return sqlite3FaultSim(500);",
          "37: }",
          "44: #ifdef SQLITE_ENABLE_FTS1",
          "45: int sqlite3Fts1Init(sqlite3*);",
          "46: #endif",
          "47: #ifdef SQLITE_ENABLE_FTS2",
          "48: int sqlite3Fts2Init(sqlite3*);",
          "49: #endif",
          "50: #ifdef SQLITE_ENABLE_FTS5",
          "51: int sqlite3Fts5Init(sqlite3*);",
          "52: #endif",
          "64: static int (*const sqlite3BuiltinExtensions[])(sqlite3*) = {",
          "65: #ifdef SQLITE_ENABLE_FTS1",
          "66:   sqlite3Fts1Init,",
          "67: #endif",
          "68: #ifdef SQLITE_ENABLE_FTS2",
          "69:   sqlite3Fts2Init,",
          "70: #endif",
          "71: #ifdef SQLITE_ENABLE_FTS3",
          "72:   sqlite3Fts3Init,",
          "73: #endif",
          "75:   sqlite3Fts5Init,",
          "76: #endif",
          "77: #if defined(SQLITE_ENABLE_ICU) || defined(SQLITE_ENABLE_ICU_COLLATIONS)",
          "78:   sqlite3IcuInit,",
          "80: #ifdef SQLITE_ENABLE_RTREE",
          "81:   sqlite3RtreeInit,",
          "82: #endif",
          "83: #ifdef SQLITE_ENABLE_DBPAGE_VTAB",
          "84:   sqlite3DbpageRegister,",
          "85: #endif",
          "86: #ifdef SQLITE_ENABLE_DBSTAT_VTAB",
          "87:   sqlite3DbstatRegister,",
          "88: #endif",
          "89:   sqlite3TestExtInit,",
          "90: #ifdef SQLITE_ENABLE_JSON1",
          "91:   sqlite3Json1Init,",
          "92: #endif",
          "93: #ifdef SQLITE_ENABLE_STMTVTAB",
          "94:   sqlite3StmtVtabInit,",
          "95: #endif",
          "96: #ifdef SQLITE_ENABLE_BYTECODE_VTAB",
          "97:   sqlite3VdbeBytecodeVtabInit,",
          "98: #endif",
          "99: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3244:   sqlite3RegisterPerConnectionBuiltinFunctions(db);",
          "3245:   rc = sqlite3_errcode(db);",
          "3253:   }",
          "",
          "[Removed Lines]",
          "3247: #ifdef SQLITE_ENABLE_FTS5",
          "3251:   if( !db->mallocFailed && rc==SQLITE_OK ){",
          "3252:     rc = sqlite3Fts5Init(db);",
          "3254: #endif",
          "",
          "[Added Lines]",
          "3313:   for(i=0; rc==SQLITE_OK && i<ArraySize(sqlite3BuiltinExtensions); i++){",
          "3314:     rc = sqlite3BuiltinExtensions[i](db);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3264:     }",
          "3265:   }",
          "3329: #ifdef SQLITE_ENABLE_INTERNAL_FUNCTIONS",
          "",
          "[Removed Lines]",
          "3267: #ifdef SQLITE_ENABLE_FTS1",
          "3268:   if( !db->mallocFailed ){",
          "3269:     extern int sqlite3Fts1Init(sqlite3*);",
          "3270:     rc = sqlite3Fts1Init(db);",
          "3271:   }",
          "3272: #endif",
          "3274: #ifdef SQLITE_ENABLE_FTS2",
          "3275:   if( !db->mallocFailed && rc==SQLITE_OK ){",
          "3276:     extern int sqlite3Fts2Init(sqlite3*);",
          "3277:     rc = sqlite3Fts2Init(db);",
          "3278:   }",
          "3279: #endif",
          "3282:   if( !db->mallocFailed && rc==SQLITE_OK ){",
          "3283:     rc = sqlite3Fts3Init(db);",
          "3284:   }",
          "3285: #endif",
          "3287: #if defined(SQLITE_ENABLE_ICU) || defined(SQLITE_ENABLE_ICU_COLLATIONS)",
          "3288:   if( !db->mallocFailed && rc==SQLITE_OK ){",
          "3289:     rc = sqlite3IcuInit(db);",
          "3290:   }",
          "3291: #endif",
          "3293: #ifdef SQLITE_ENABLE_RTREE",
          "3294:   if( !db->mallocFailed && rc==SQLITE_OK){",
          "3295:     rc = sqlite3RtreeInit(db);",
          "3296:   }",
          "3297: #endif",
          "3299: #ifdef SQLITE_ENABLE_DBPAGE_VTAB",
          "3300:   if( !db->mallocFailed && rc==SQLITE_OK){",
          "3301:     rc = sqlite3DbpageRegister(db);",
          "3302:   }",
          "3303: #endif",
          "3305: #ifdef SQLITE_ENABLE_DBSTAT_VTAB",
          "3306:   if( !db->mallocFailed && rc==SQLITE_OK){",
          "3307:     rc = sqlite3DbstatRegister(db);",
          "3308:   }",
          "3309: #endif",
          "3311: #ifdef SQLITE_ENABLE_JSON1",
          "3312:   if( !db->mallocFailed && rc==SQLITE_OK){",
          "3313:     rc = sqlite3Json1Init(db);",
          "3314:   }",
          "3315: #endif",
          "3317: #ifdef SQLITE_ENABLE_STMTVTAB",
          "3318:   if( !db->mallocFailed && rc==SQLITE_OK){",
          "3319:     rc = sqlite3StmtVtabInit(db);",
          "3320:   }",
          "3321: #endif",
          "3323: #ifdef SQLITE_ENABLE_BYTECODE_VTAB",
          "3324:   if( !db->mallocFailed && rc==SQLITE_OK ){",
          "3325:     rc = sqlite3VdbeBytecodeVtabInit(db);",
          "3326:   }",
          "3327: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "516: #define SQLITE_CANTOPEN_SYMLINK        (SQLITE_CANTOPEN | (6<<8))",
          "517: #define SQLITE_CORRUPT_VTAB            (SQLITE_CORRUPT | (1<<8))",
          "518: #define SQLITE_CORRUPT_SEQUENCE        (SQLITE_CORRUPT | (2<<8))",
          "519: #define SQLITE_READONLY_RECOVERY       (SQLITE_READONLY | (1<<8))",
          "520: #define SQLITE_READONLY_CANTLOCK       (SQLITE_READONLY | (2<<8))",
          "521: #define SQLITE_READONLY_ROLLBACK       (SQLITE_READONLY | (3<<8))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "519: #define SQLITE_CORRUPT_INDEX           (SQLITE_CORRUPT | (3<<8))",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5674:   sqlite3VdbeIncrWriteCounter(p, pC);",
          "5675:   pCrsr = pC->uc.pCursor;",
          "5676:   assert( pCrsr!=0 );",
          "5678:   r.pKeyInfo = pC->pKeyInfo;",
          "5679:   r.nField = (u16)pOp->p3;",
          "5680:   r.default_rc = 0;",
          "",
          "[Removed Lines]",
          "5677:   assert( pOp->p5==0 );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5684:   if( res==0 ){",
          "5685:     rc = sqlite3BtreeDelete(pCrsr, BTREE_AUXDELETE);",
          "5686:     if( rc ) goto abort_due_to_error;",
          "5687:   }",
          "5688:   assert( pC->deferredMoveto==0 );",
          "5689:   pC->cacheStatus = CACHE_STALE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5693:   }else if( pOp->p5 ){",
          "5694:     rc = SQLITE_CORRUPT_INDEX;",
          "5695:     goto abort_due_to_error;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "53218e2e2cedc19dcb1dc5ba117c2eddd3c5699b",
      "candidate_info": {
        "commit_hash": "53218e2e2cedc19dcb1dc5ba117c2eddd3c5699b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/53218e2e2cedc19dcb1dc5ba117c2eddd3c5699b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "Back out a NEVER() that turns out to be reachable.\n\nFossilOrigin-Name: 8cf342d4e5eb67b17aee595d9d75f7798eccaebc1ec88e646d344d8d4ab64977",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 12bb75d9edc4c11de58d8b1105b95366c58ac4daaa9ad659499dded89a0d7cb5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6243:   assert( CORRUPT_DB || iPage>1 );",
          "6244:   assert( !pMemPage || pMemPage->pgno==iPage );",
          "6247:     return SQLITE_CORRUPT_BKPT;",
          "6248:   }",
          "6249:   if( pMemPage ){",
          "",
          "[Removed Lines]",
          "6246:   if( iPage<2 || NEVER(iPage>pBt->nPage) ){",
          "",
          "[Added Lines]",
          "6246:   if( iPage<2 || iPage>pBt->nPage ){",
          "",
          "---------------"
        ]
      }
    }
  ]
}