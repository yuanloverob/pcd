{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2d441ce3f3c10af9dd884b11cadd5a14ae566b01",
      "candidate_info": {
        "commit_hash": "2d441ce3f3c10af9dd884b11cadd5a14ae566b01",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2d441ce3f3c10af9dd884b11cadd5a14ae566b01",
        "files": [
          "ext/misc/fossildelta.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add the delta_parse(DELTA) table-valued function to the fossildelta extension.\n\nFossilOrigin-Name: d91fcc267bf1be795dfdb1fbfb40c2aea79ddff247a51d26462136c325b7a6d3",
        "before_after_code_files": [
          "ext/misc/fossildelta.c||ext/misc/fossildelta.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fossildelta.c||ext/misc/fossildelta.c": [
          "File: ext/misc/fossildelta.c -> ext/misc/fossildelta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "138:   static const signed char zValue[] = {",
          "139:     -1, -1, -1, -1, -1, -1, -1, -1,   -1, -1, -1, -1, -1, -1, -1, -1,",
          "140:     -1, -1, -1, -1, -1, -1, -1, -1,   -1, -1, -1, -1, -1, -1, -1, -1,",
          "",
          "[Removed Lines]",
          "137: static unsigned int getInt(const char **pz, int *pLen){",
          "",
          "[Added Lines]",
          "137: static unsigned int deltaGetInt(const char **pz, int *pLen){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "485: static int delta_output_size(const char *zDelta, int lenDelta){",
          "486:   int size;",
          "488:   if( *zDelta!='\\n' ){",
          "490:     return -1;",
          "",
          "[Removed Lines]",
          "487:   size = getInt(&zDelta, &lenDelta);",
          "",
          "[Added Lines]",
          "487:   size = deltaGetInt(&zDelta, &lenDelta);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "526:   char *zOrigOut = zOut;",
          "527: #endif",
          "530:   if( *zDelta!='\\n' ){",
          "532:     return -1;",
          "",
          "[Removed Lines]",
          "529:   limit = getInt(&zDelta, &lenDelta);",
          "",
          "[Added Lines]",
          "529:   limit = deltaGetInt(&zDelta, &lenDelta);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "534:   zDelta++; lenDelta--;",
          "535:   while( *zDelta && lenDelta>0 ){",
          "536:     unsigned int cnt, ofst;",
          "538:     switch( zDelta[0] ){",
          "539:       case '@': {",
          "540:         zDelta++; lenDelta--;",
          "542:         if( lenDelta>0 && zDelta[0]!=',' ){",
          "544:           return -1;",
          "",
          "[Removed Lines]",
          "537:     cnt = getInt(&zDelta, &lenDelta);",
          "541:         ofst = getInt(&zDelta, &lenDelta);",
          "",
          "[Added Lines]",
          "537:     cnt = deltaGetInt(&zDelta, &lenDelta);",
          "541:         ofst = deltaGetInt(&zDelta, &lenDelta);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "599:   return -1;",
          "600: }",
          "",
          "[Removed Lines]",
          "607: static int delta_analyze(",
          "612: ){",
          "613:   unsigned int nInsert = 0;",
          "614:   unsigned int nCopy = 0;",
          "616:   (void)getInt(&zDelta, &lenDelta);",
          "617:   if( *zDelta!='\\n' ){",
          "619:     return -1;",
          "620:   }",
          "621:   zDelta++; lenDelta--;",
          "622:   while( *zDelta && lenDelta>0 ){",
          "623:     unsigned int cnt;",
          "624:     cnt = getInt(&zDelta, &lenDelta);",
          "625:     switch( zDelta[0] ){",
          "626:       case '@': {",
          "627:         zDelta++; lenDelta--;",
          "628:         (void)getInt(&zDelta, &lenDelta);",
          "629:         if( lenDelta>0 && zDelta[0]!=',' ){",
          "631:           return -1;",
          "632:         }",
          "633:         zDelta++; lenDelta--;",
          "634:         nCopy += cnt;",
          "635:         break;",
          "636:       }",
          "637:       case ':': {",
          "638:         zDelta++; lenDelta--;",
          "639:         nInsert += cnt;",
          "640:         if( cnt>lenDelta ){",
          "642:           return -1;",
          "643:         }",
          "644:         zDelta += cnt;",
          "645:         lenDelta -= cnt;",
          "646:         break;",
          "647:       }",
          "648:       case ';': {",
          "651:         return 0;",
          "652:       }",
          "653:       default: {",
          "655:         return -1;",
          "656:       }",
          "657:     }",
          "658:   }",
          "660:   return -1;",
          "661: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "765:   }",
          "766: }",
          "769: #ifdef _WIN32",
          "770: __declspec(dllexport)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "710: typedef struct deltaparsevtab_vtab deltaparsevtab_vtab;",
          "711: typedef struct deltaparsevtab_cursor deltaparsevtab_cursor;",
          "712: struct deltaparsevtab_vtab {",
          "715: };",
          "716: struct deltaparsevtab_cursor {",
          "724: };",
          "728: static const char *azOp[] = {",
          "729:   \"SIZE\", \"COPY\", \"INSERT\", \"CHECKSUM\", \"ERROR\", \"EOF\"",
          "730: };",
          "731: #define DELTAPARSE_OP_SIZE         0",
          "732: #define DELTAPARSE_OP_COPY         1",
          "733: #define DELTAPARSE_OP_INSERT       2",
          "734: #define DELTAPARSE_OP_CHECKSUM     3",
          "735: #define DELTAPARSE_OP_ERROR        4",
          "736: #define DELTAPARSE_OP_EOF          5",
          "751: static int deltaparsevtabConnect(",
          "752:   sqlite3 *db,",
          "753:   void *pAux,",
          "754:   int argc, const char *const*argv,",
          "755:   sqlite3_vtab **ppVtab,",
          "756:   char **pzErr",
          "757: ){",
          "758:   deltaparsevtab_vtab *pNew;",
          "759:   int rc;",
          "761:   rc = sqlite3_declare_vtab(db,",
          "762:            \"CREATE TABLE x(op,a1,a2,delta HIDDEN)\"",
          "763:        );",
          "765: #define DELTAPARSEVTAB_OP     0",
          "766: #define DELTAPARSEVTAB_A1     1",
          "767: #define DELTAPARSEVTAB_A2     2",
          "768: #define DELTAPARSEVTAB_DELTA  3",
          "769:   if( rc==SQLITE_OK ){",
          "770:     pNew = sqlite3_malloc64( sizeof(*pNew) );",
          "772:     if( pNew==0 ) return SQLITE_NOMEM;",
          "773:     memset(pNew, 0, sizeof(*pNew));",
          "774:   }",
          "775:   return rc;",
          "776: }",
          "781: static int deltaparsevtabDisconnect(sqlite3_vtab *pVtab){",
          "782:   deltaparsevtab_vtab *p = (deltaparsevtab_vtab*)pVtab;",
          "783:   sqlite3_free(p);",
          "784:   return SQLITE_OK;",
          "785: }",
          "790: static int deltaparsevtabOpen(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){",
          "791:   deltaparsevtab_cursor *pCur;",
          "792:   pCur = sqlite3_malloc( sizeof(*pCur) );",
          "793:   if( pCur==0 ) return SQLITE_NOMEM;",
          "794:   memset(pCur, 0, sizeof(*pCur));",
          "796:   return SQLITE_OK;",
          "797: }",
          "802: static int deltaparsevtabClose(sqlite3_vtab_cursor *cur){",
          "803:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "804:   sqlite3_free(pCur);",
          "805:   return SQLITE_OK;",
          "806: }",
          "812: static int deltaparsevtabNext(sqlite3_vtab_cursor *cur){",
          "813:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "814:   const char *z;",
          "815:   int i = 0;",
          "817:   pCur->iCursor = pCur->iNext;",
          "818:   z = pCur->aDelta + pCur->iCursor;",
          "819:   pCur->a1 = deltaGetInt(&z, &i);",
          "820:   switch( z[0] ){",
          "821:     case '@': {",
          "822:       z++;",
          "823:       pCur->a2 = deltaGetInt(&z, &i);",
          "824:       pCur->eOp = DELTAPARSE_OP_COPY;",
          "825:       pCur->iNext = (int)(&z[1] - pCur->aDelta);",
          "826:       break;",
          "827:     }",
          "828:     case ':': {",
          "829:       z++;",
          "830:       pCur->a2 = (unsigned int)(z - pCur->aDelta);",
          "831:       pCur->eOp = DELTAPARSE_OP_INSERT;",
          "832:       pCur->iNext = (int)(&z[pCur->a1] - pCur->aDelta);",
          "833:       break;",
          "834:     }",
          "835:     case ';': {",
          "836:       pCur->eOp = DELTAPARSE_OP_CHECKSUM;",
          "837:       pCur->iNext = pCur->nDelta;",
          "838:       break;",
          "839:     }",
          "840:     default: {",
          "841:       if( pCur->iNext==pCur->nDelta ){",
          "842:         pCur->eOp = DELTAPARSE_OP_EOF;",
          "843:       }else{",
          "844:         pCur->eOp = DELTAPARSE_OP_ERROR;",
          "845:         pCur->iNext = pCur->nDelta;",
          "846:       }",
          "847:       break;",
          "848:     }",
          "849:   }",
          "850:   return SQLITE_OK;",
          "851: }",
          "857: static int deltaparsevtabColumn(",
          "861: ){",
          "862:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "863:   switch( i ){",
          "864:     case DELTAPARSEVTAB_OP: {",
          "865:       sqlite3_result_text(ctx, azOp[pCur->eOp], -1, SQLITE_STATIC);",
          "866:       break;",
          "867:     }",
          "868:     case DELTAPARSEVTAB_A1: {",
          "869:       sqlite3_result_int(ctx, pCur->a1);",
          "870:       break;",
          "871:     }",
          "872:     case DELTAPARSEVTAB_A2: {",
          "873:       if( pCur->eOp==DELTAPARSE_OP_COPY ){",
          "874:         sqlite3_result_int(ctx, pCur->a2);",
          "875:       }else if( pCur->eOp==DELTAPARSE_OP_INSERT ){",
          "876:         sqlite3_result_blob(ctx, pCur->aDelta+pCur->a2, pCur->a1,",
          "877:                             SQLITE_TRANSIENT);",
          "878:       }",
          "879:       break;",
          "880:     }",
          "881:     case DELTAPARSEVTAB_DELTA: {",
          "882:       sqlite3_result_blob(ctx, pCur->aDelta, pCur->nDelta, SQLITE_TRANSIENT);",
          "883:       break;",
          "884:     }",
          "885:   }",
          "886:   return SQLITE_OK;",
          "887: }",
          "893: static int deltaparsevtabRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){",
          "894:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "896:   return SQLITE_OK;",
          "897: }",
          "903: static int deltaparsevtabEof(sqlite3_vtab_cursor *cur){",
          "904:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor*)cur;",
          "905:   return pCur->eOp==DELTAPARSE_OP_EOF;",
          "906: }",
          "914: static int deltaparsevtabFilter(",
          "915:   sqlite3_vtab_cursor *pVtabCursor,",
          "916:   int idxNum, const char *idxStr,",
          "917:   int argc, sqlite3_value **argv",
          "918: ){",
          "919:   deltaparsevtab_cursor *pCur = (deltaparsevtab_cursor *)pVtabCursor;",
          "920:   const char *a;",
          "921:   int i = 0;",
          "922:   pCur->eOp = DELTAPARSE_OP_ERROR;",
          "923:   if( idxNum!=1 ){",
          "924:     return SQLITE_OK;",
          "925:   }",
          "926:   pCur->nDelta = sqlite3_value_bytes(argv[0]);",
          "927:   a = (const char*)sqlite3_value_blob(argv[0]);",
          "928:   if( pCur->nDelta==0 || a==0 ){",
          "929:     return SQLITE_OK;",
          "930:   }",
          "931:   pCur->aDelta = sqlite3_malloc64( pCur->nDelta+1 );",
          "932:   if( pCur->aDelta==0 ){",
          "933:     pCur->nDelta = 0;",
          "934:     return SQLITE_NOMEM;",
          "935:   }",
          "936:   memcpy(pCur->aDelta, a, pCur->nDelta);",
          "937:   pCur->aDelta[pCur->nDelta] = 0;",
          "938:   a = pCur->aDelta;",
          "939:   pCur->eOp = DELTAPARSE_OP_SIZE;",
          "940:   pCur->a1 = deltaGetInt(&a, &i);",
          "941:   if( a[0]!='\\n' ){",
          "942:     pCur->eOp = DELTAPARSE_OP_ERROR;",
          "943:     pCur->a1 = pCur->a2 = 0;",
          "944:     pCur->iNext = pCur->nDelta;",
          "945:     return SQLITE_OK;",
          "946:   }",
          "947:   a++;",
          "948:   pCur->iNext = (unsigned int)(a - pCur->aDelta);",
          "949:   return SQLITE_OK;",
          "950: }",
          "958: static int deltaparsevtabBestIndex(",
          "959:   sqlite3_vtab *tab,",
          "960:   sqlite3_index_info *pIdxInfo",
          "961: ){",
          "962:   int i;",
          "963:   for(i=0; i<pIdxInfo->nConstraint; i++){",
          "964:     if( pIdxInfo->aConstraint[i].iColumn != DELTAPARSEVTAB_DELTA ) continue;",
          "965:     if( pIdxInfo->aConstraint[i].usable==0 ) continue;",
          "966:     if( pIdxInfo->aConstraint[i].op!=SQLITE_INDEX_CONSTRAINT_EQ ) continue;",
          "967:     pIdxInfo->aConstraintUsage[i].argvIndex = 1;",
          "968:     pIdxInfo->aConstraintUsage[i].omit = 1;",
          "969:     pIdxInfo->estimatedCost = (double)1;",
          "970:     pIdxInfo->estimatedRows = 10;",
          "971:     pIdxInfo->idxNum = 1;",
          "972:     return SQLITE_OK;",
          "973:   }",
          "974:   pIdxInfo->idxNum = 0;",
          "975:   pIdxInfo->estimatedCost = (double)0x7fffffff;",
          "976:   pIdxInfo->estimatedRows = 0x7fffffff;",
          "977:   return SQLITE_OK;",
          "978: }",
          "984: static sqlite3_module deltaparsevtabModule = {",
          "1009: };",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "787:     rc = sqlite3_create_function(db, \"delta_output_size\", 1, SQLITE_UTF8, 0,",
          "788:                                  deltaOutputSizeFunc, 0, 0);",
          "789:   }",
          "790:   return rc;",
          "791: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1034:   if( rc==SQLITE_OK ){",
          "1035:     rc = sqlite3_create_module(db, \"delta_parse\", &deltaparsevtabModule, 0);",
          "1036:   }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b80cafa6f8a5c6ff1dc9efd2f670777ab131ace2df1eb431cedc8cfa901baf18",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0968b6b140d415e2ebac0583d9b323913d6ad16",
      "candidate_info": {
        "commit_hash": "b0968b6b140d415e2ebac0583d9b323913d6ad16",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b0968b6b140d415e2ebac0583d9b323913d6ad16",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Add an assert() as an additional test for fix in check-in [523b42371122d9e1b3].\n\nFossilOrigin-Name: f9e85e6c79162081f8f512d22951931a89d157a32b24afdc48b7eb865379abe7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 523b42371122d9e1b3185425745f1490138bff7f7cc941ee26ee81df7ade5bf4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2542:   assert( (p->selFlags & SF_Recursive)==0 || p->op==TK_ALL || p->op==TK_UNION );",
          "2543:   db = pParse->db;",
          "2544:   pPrior = p->pPrior;",
          "2545:   dest = *pDest;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2543:   assert( p->selFlags & SF_Compound );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e893759cac17443c63fd0bc0bfce198985da7aa5",
      "candidate_info": {
        "commit_hash": "e893759cac17443c63fd0bc0bfce198985da7aa5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e893759cac17443c63fd0bc0bfce198985da7aa5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "The ALWAYS() added by the previous check-in was incorrect.  Take it back out.\n\nFossilOrigin-Name: 336235db2b1167cdb2feb64b47eb6368c97c43ee9641b7bfccc5775a41dd0d0e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: aff209804722ac902c7abfde80ad2677e0f51beb2c7f28f65d51105d984a1640",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "802:         idxCols |= cMask;",
          "803:         pIdx->aiColumn[n] = pTerm->u.leftColumn;",
          "804:         pColl = sqlite3BinaryCompareCollSeq(pParse, pX->pLeft, pX->pRight);",
          "806:         n++;",
          "807:       }",
          "808:     }",
          "",
          "[Removed Lines]",
          "805:         pIdx->azColl[n] = ALWAYS(pColl) ? pColl->zName : sqlite3StrBINARY;",
          "",
          "[Added Lines]",
          "805:         pIdx->azColl[n] = pColl ? pColl->zName : sqlite3StrBINARY;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e20a894a34894eeb4eca0252d4ff25f99ac311e8",
      "candidate_info": {
        "commit_hash": "e20a894a34894eeb4eca0252d4ff25f99ac311e8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e20a894a34894eeb4eca0252d4ff25f99ac311e8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/altertab3.test"
        ],
        "message": "Handle renaming a column or table when the schema contains a (meaningless) index on the constant expression ('text' IN ()) or ('text' NOT IN()).\n\nFossilOrigin-Name: 567b13093956185b5d5e971b81ba4788fd9d26c03688f643b380f0f1c1a94da0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 94b58ab059cba9771e75f16d1460f313104a8fb879f9f8805725d362aa58cbcd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1176:       if( IN_RENAME_OBJECT==0 ){",
          "1177:         sqlite3ExprDelete(pParse->db, A);",
          "1178:         A = sqlite3ExprAlloc(pParse->db, TK_INTEGER,&sqlite3IntTokens[N],1);",
          "1179:       }",
          "1180:     }else if( Y->nExpr==1 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1185:       }else{",
          "1186:         A = sqlite3PExpr(pParse, TK_UPLUS, A, 0);",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:   ALTER TABLE t1x RENAME TO t1;",
          "176: } {1 {error in trigger AFTER: no such column: d}}",
          "178: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178: #-------------------------------------------------------------------------",
          "179: reset_db",
          "180: do_execsql_test 8.0 {",
          "181:   CREATE TABLE t0(c0);",
          "182:   CREATE INDEX i0 ON t0('1' IN ());",
          "183: }",
          "184: do_execsql_test 8.1 {",
          "185:   ALTER TABLE t0 RENAME TO t1;",
          "186:   SELECT sql FROM sqlite_master;",
          "187: } {",
          "188:   {CREATE TABLE \"t1\"(c0)}",
          "189:   {CREATE INDEX i0 ON \"t1\"('1' IN ())}",
          "190: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "531230d006696e418d40b7808798de628a3fd4f2",
      "candidate_info": {
        "commit_hash": "531230d006696e418d40b7808798de628a3fd4f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/531230d006696e418d40b7808798de628a3fd4f2",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest.tcl"
        ],
        "message": "Add -DSQLITE_ENABLE_DESERIALIZE to the default testing configuration in test/releasetest.tcl.\n\nFossilOrigin-Name: 433d6ef637a10ee017b5d8cadd125a162cfedc9895ae862b8dde6dddb7eda59b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest.tcl||test/releasetest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3839e9098107604e1526c2b1e813c019607077dfe39d7eeb92f3466518dec3b1",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest.tcl||test/releasetest.tcl": [
          "File: test/releasetest.tcl -> test/releasetest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:     -O2",
          "51:     --disable-amalgamation --disable-shared",
          "52:     --enable-session",
          "53:   }",
          "54:   \"Sanitize\" {",
          "55:     CC=clang -fsanitize=undefined",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "53:     -DSQLITE_ENABLE_DESERIALIZE",
          "",
          "---------------"
        ]
      }
    }
  ]
}