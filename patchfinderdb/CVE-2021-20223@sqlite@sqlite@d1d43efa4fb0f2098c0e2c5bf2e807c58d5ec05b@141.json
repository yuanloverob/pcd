{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4c8056079ffdafae82b7f42fe4917af2f583cf51",
      "candidate_info": {
        "commit_hash": "4c8056079ffdafae82b7f42fe4917af2f583cf51",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4c8056079ffdafae82b7f42fe4917af2f583cf51",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Remove a harmless unused variable.\n\nFossilOrigin-Name: 28091a48aa6994f8d7c142b5851bcd6b4e9a93a7bbef6c927a6182d24f3245b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8e100e6c35c30e0d7e4014b9435f81f9f61ddab2386dfe9a4218d8190a6da3be",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "460: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "461: int sqlite3VdbeMemAggValue(Mem *pAccum, Mem *pOut, FuncDef *pFunc){",
          "462:   sqlite3_context ctx;",
          "464:   assert( pFunc!=0 );",
          "465:   assert( pFunc->xValue!=0 );",
          "466:   assert( (pAccum->flags & MEM_Null)!=0 || pFunc==pAccum->u.pDef );",
          "467:   assert( pAccum->db==0 || sqlite3_mutex_held(pAccum->db->mutex) );",
          "468:   memset(&ctx, 0, sizeof(ctx));",
          "472:   sqlite3VdbeMemSetNull(pOut);",
          "473:   ctx.pOut = pOut;",
          "474:   ctx.pMem = pAccum;",
          "",
          "[Removed Lines]",
          "463:   Mem t;",
          "469:   memset(&t, 0, sizeof(t));",
          "470:   t.flags = MEM_Null;",
          "471:   t.db = pAccum->db;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "013e7bb7490e320bf6ab9f9e008fa72b1fe284b3",
      "candidate_info": {
        "commit_hash": "013e7bb7490e320bf6ab9f9e008fa72b1fe284b3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/013e7bb7490e320bf6ab9f9e008fa72b1fe284b3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/vdbevtab.c"
        ],
        "message": "Fix compiler warnings in MSVC.\n\nFossilOrigin-Name: 96e3dba2ed3ab0c5b2ecf65a3408633e0767c884d48c270e9ef10ab9fa3ec051",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/vdbevtab.c||src/vdbevtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 166e82dd20efbfd355ef3fb8b500bfebd8b946f1b13619b46722de96b57ed039",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6755:         }",
          "6759:         if( pKeyInfo ){",
          "6760:           sqlite3VdbeChangeP4(v, -1, (char *)pKeyInfo, P4_KEYINFO);",
          "6761:         }",
          "",
          "[Removed Lines]",
          "6758:         sqlite3VdbeAddOp4Int(v, OP_OpenRead, iCsr, iRoot, iDb, 1);",
          "",
          "[Added Lines]",
          "6758:         sqlite3VdbeAddOp4Int(v, OP_OpenRead, iCsr, (int)iRoot, iDb, 1);",
          "",
          "---------------"
        ],
        "src/vdbevtab.c||src/vdbevtab.c": [
          "File: src/vdbevtab.c -> src/vdbevtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "206:         Schema *pSchema;",
          "207:         HashElem *k;",
          "208:         int iDb = pOp->p3;",
          "210:         sqlite3 *db = pVTab->db;",
          "211:         pSchema = db->aDb[iDb].pSchema;",
          "212:         pCur->zSchema = db->aDb[iDb].zDbSName;",
          "",
          "[Removed Lines]",
          "209:         int iRoot = pOp->p2;",
          "",
          "[Added Lines]",
          "209:         Pgno iRoot = (Pgno)pOp->p2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22e6f67c51175cbde19fa108b124f227775bc319",
      "candidate_info": {
        "commit_hash": "22e6f67c51175cbde19fa108b124f227775bc319",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/22e6f67c51175cbde19fa108b124f227775bc319",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Avoid computing a zero offset of a null pointer, which though this is technically harmless, is upsetting to pedantic run-time checkers.\n\nFossilOrigin-Name: 3ce804e99bbef83d49ec309157448a7c1422725606516cef904e6122aadd3922",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4066a34da7bcdcece6c438c27f3a11bc49b8c8373b7e1603f30f6225e2bc800a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "590:     return pMem->u.i;",
          "591:   }else if( flags & MEM_Real ){",
          "592:     return doubleToInt64(pMem->u.r);",
          "595:     return memIntValue(pMem);",
          "596:   }else{",
          "597:     return 0;",
          "",
          "[Removed Lines]",
          "593:   }else if( flags & (MEM_Str|MEM_Blob) ){",
          "594:     assert( pMem->z || pMem->n==0 );",
          "",
          "[Added Lines]",
          "593:   }else if( (flags & (MEM_Str|MEM_Blob))!=0 && pMem->z!=0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed41a96bc1e3a6eb011330b0a109ae4fc703a14c",
      "candidate_info": {
        "commit_hash": "ed41a96bc1e3a6eb011330b0a109ae4fc703a14c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed41a96bc1e3a6eb011330b0a109ae4fc703a14c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/aggnested.test",
          "test/window9.test"
        ],
        "message": "Ensure that aggregate functions that (a) are part of SELECT statements with no FROM clause and (b) have one or more scalar sub-selects as arguments are assigned to the correct aggregate context.\n\nFossilOrigin-Name: 16a41fa8c4c74bba4e908a9c19e6cf5a927cac140e2070c9abf303158be7257b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/aggnested.test||test/aggnested.test",
          "test/window9.test||test/window9.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 232431f32ef77a9dfc4eeb7765dca24af72051fd5460f648d0c5ba318c8a01fc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5655: struct SrcCount {",
          "5659: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5668: static int selectSrcCount(Walker *pWalker, Select *pSel){",
          "5669:   struct SrcCount *p = pWalker->u.pSrcCount;",
          "5670:   if( p->iSrcInner==0x7FFFFFFF && pSel->pSrc && pSel->pSrc->nSrc ){",
          "5671:     pWalker->u.pSrcCount->iSrcInner = pSel->pSrc->a[0].iCursor;",
          "5672:   }",
          "5673:   return WRC_Continue;",
          "5674: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5678:     }",
          "5679:     if( i<nSrc ){",
          "5680:       p->nThis++;",
          "",
          "[Removed Lines]",
          "5681:     }else if( nSrc==0 || pExpr->iTable<pSrc->a[0].iCursor ){",
          "",
          "[Added Lines]",
          "5696:     }else if( pExpr->iTable<p->iSrcInner ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5700:   assert( pExpr->op==TK_AGG_FUNCTION );",
          "5701:   memset(&w, 0, sizeof(w));",
          "5702:   w.xExprCallback = exprSrcCount;",
          "5704:   w.u.pSrcCount = &cnt;",
          "5705:   cnt.pSrc = pSrcList;",
          "5706:   cnt.nThis = 0;",
          "5707:   cnt.nOther = 0;",
          "5708:   sqlite3WalkExprList(&w, pExpr->x.pList);",
          "",
          "[Removed Lines]",
          "5703:   w.xSelectCallback = sqlite3SelectWalkNoop;",
          "",
          "[Added Lines]",
          "5718:   w.xSelectCallback = selectSrcCount;",
          "5721:   cnt.iSrcInner = (pSrcList&&pSrcList->nSrc)?pSrcList->a[0].iCursor:0x7FFFFFFF;",
          "",
          "---------------"
        ],
        "test/aggnested.test||test/aggnested.test": [
          "File: test/aggnested.test -> test/aggnested.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "21: do_test aggnested-1.1 {",
          "22:   db eval {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: set testprefix aggnested",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:   SELECT max((SELECT a FROM (SELECT count(*) AS a FROM ty) AS s)) FROM tx;",
          "260: } {3}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263: #--------------------------------------------------------------------------",
          "264: #",
          "265: reset_db",
          "266: do_execsql_test 5.0 {",
          "267:   CREATE TABLE x1(a, b);",
          "268:   INSERT INTO x1 VALUES(1, 2);",
          "269:   CREATE TABLE x2(x);",
          "270:   INSERT INTO x2 VALUES(NULL), (NULL), (NULL);",
          "271: }",
          "273: # At one point, aggregate \"total()\" in the query below was being processed",
          "274: # as part of the outer SELECT, not as part of the sub-select with no FROM",
          "275: # clause.",
          "276: do_execsql_test 5.1 {",
          "277:   SELECT ( SELECT total( (SELECT b FROM x1) ) ) FROM x2;",
          "278: } {2.0 2.0 2.0}",
          "280: do_execsql_test 5.2 {",
          "281:   SELECT ( SELECT total( (SELECT 2 FROM x1) ) ) FROM x2;",
          "282: } {2.0 2.0 2.0}",
          "284: do_execsql_test 5.3 {",
          "285:   CREATE TABLE t1(a);",
          "286:   CREATE TABLE t2(b);",
          "287: }",
          "289: do_execsql_test 5.4 {",
          "290:   SELECT(",
          "291:     SELECT max(b) LIMIT (",
          "292:       SELECT total( (SELECT a FROM t1) )",
          "293:     )",
          "294:   )",
          "295:   FROM t2;",
          "296: } {{}}",
          "298: do_execsql_test 5.5 {",
          "299:   CREATE TABLE a(b);",
          "300:   WITH c AS(SELECT a)",
          "301:     SELECT(SELECT(SELECT group_concat(b, b)",
          "302:           LIMIT(SELECT 0.100000 *",
          "303:             AVG(DISTINCT(SELECT 0 FROM a ORDER BY b, b, b))))",
          "304:         FROM a GROUP BY b,",
          "305:         b, b) FROM a EXCEPT SELECT b FROM a ORDER BY b,",
          "306:     b, b;",
          "307: }",
          "",
          "---------------"
        ],
        "test/window9.test||test/window9.test": [
          "File: test/window9.test -> test/window9.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "256: do_catchsql_test 8.3 {",
          "257:   SELECT min( max((SELECT x FROM v1)) ) OVER()",
          "260: do_execsql_test 8.4 {",
          "261:   SELECT(",
          "",
          "[Removed Lines]",
          "258: } {1 {misuse of aggregate: max()}}",
          "",
          "[Added Lines]",
          "258: } {0 0}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "263:       SELECT sum( avg((SELECT x FROM v1)) ) OVER()",
          "264:   )",
          "265:   FROM v1;",
          "268: finish_test",
          "",
          "[Removed Lines]",
          "266: } {0.0}",
          "",
          "[Added Lines]",
          "266: } {0.0 0.0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e566cebb26bc8c5be17200a215c6aec91c277c66",
      "candidate_info": {
        "commit_hash": "e566cebb26bc8c5be17200a215c6aec91c277c66",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e566cebb26bc8c5be17200a215c6aec91c277c66",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Draw the dashes below the headers in \"explain\" mode in the CLI.\n\nFossilOrigin-Name: c6b7833ac7d9cc75cb45d5e8041367ebd6f197f776766e6143535c227fc72a20",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1cb248a3fc4c35c5bc3993b554edcccaa5c5e91570af67ebb99643a15221ae33",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1993:           utf8_width_print(p->out, w, azCol[i]);",
          "1994:           fputs(i==nArg-1 ? \"\\n\" : \"  \", p->out);",
          "1995:         }",
          "1996:       }",
          "1997:       if( azArg==0 ) break;",
          "1998:       for(i=0; i<nArg; i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1995:         }",
          "1996:         for(i=0; i<nArg; i++){",
          "1997:           int w = aExplainWidth[i];",
          "1998:           print_dashes(p->out, w);",
          "1999:           fputs(i==nArg-1 ? \"\\n\" : \"  \", p->out);",
          "",
          "---------------"
        ]
      }
    }
  ]
}