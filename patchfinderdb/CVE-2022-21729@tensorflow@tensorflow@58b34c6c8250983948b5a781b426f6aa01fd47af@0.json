{
  "cve_id": "CVE-2022-21729",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `UnravelIndex` is vulnerable to a division by zero caused by an integer overflow bug. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "58b34c6c8250983948b5a781b426f6aa01fd47af",
  "patch_info": {
    "commit_hash": "58b34c6c8250983948b5a781b426f6aa01fd47af",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/58b34c6c8250983948b5a781b426f6aa01fd47af",
    "files": [
      "tensorflow/core/kernels/unravel_index_op.cc",
      "tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
    ],
    "message": "Fix integer overflow leading to divide by zero error in Unravel index kernel when dimensions product exceeds max int value.\n\nPiperOrigin-RevId: 413250052\nChange-Id: I9450b6e8acecd2e881a64b882e2b7c70e8e9289a",
    "before_after_code_files": [
      "tensorflow/core/kernels/unravel_index_op.cc||tensorflow/core/kernels/unravel_index_op.cc",
      "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/unravel_index_op.cc||tensorflow/core/kernels/unravel_index_op.cc": [
      "File: tensorflow/core/kernels/unravel_index_op.cc -> tensorflow/core/kernels/unravel_index_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "13: limitations under the License.",
      "16: #define EIGEN_USE_THREADS",
      "18: #include \"tensorflow/core/framework/op_kernel.h\"",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "16: #include <cstdint>",
      "18: #include \"tensorflow/core/framework/types.pb.h\"",
      "19: #include \"tensorflow/core/platform/types.h\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "35: template <typename Tidx>",
      "36: class UnravelIndexOp : public OpKernel {",
      "37:  public:",
      "40:   void Compute(OpKernelContext* ctx) override {",
      "41:     const Tensor& indices_tensor = ctx->input(0);",
      "",
      "[Removed Lines]",
      "38:   explicit UnravelIndexOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}",
      "",
      "[Added Lines]",
      "42:   explicit UnravelIndexOp(OpKernelConstruction* ctx)",
      "43:       : OpKernel(ctx), dtidx_(DataTypeToEnum<Tidx>::v()) {}",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "55:     auto dims = dims_tensor.vec<Tidx>();",
      "57:     for (int i = 0; i < dims.size(); i++) {",
      "58:       OP_REQUIRES(",
      "59:           ctx, dims(i) != 0,",
      "60:           errors::InvalidArgument(\"Input dims cannot contain a dim of zero, \"",
      "61:                                   \"but dims contains zero at index \",",
      "62:                                   i));",
      "63:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "62:     double prod = 1;",
      "63:     uint64_t limit;",
      "64:     if (dtidx_ == DataType::DT_INT64) {",
      "65:       limit = kint64max;",
      "66:     } else {",
      "67:       limit = kint32max;",
      "68:     }",
      "76:       OP_REQUIRES(ctx, dims(i) > 0,",
      "77:                   errors::InvalidArgument(",
      "78:                       \"Input dims cannot be negative. Got dim = \", dims(i),",
      "79:                       \" at index \", i));",
      "81:       OP_REQUIRES(",
      "82:           ctx, prod <= limit / dims(i),",
      "83:           errors::InvalidArgument(\"Input dims product is causing integer \"",
      "84:                                   \"overflow: (\",",
      "85:                                   dims, \")\"));",
      "86:       prod = (prod * dims(i));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "132:                strides_shifted.reshape(reshape).broadcast(bcast);",
      "133:     }",
      "134:   }",
      "135: };",
      "137: #define REGISTER_KERNEL(type)                                               \\",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "159:   const DataType dtidx_;",
      "",
      "---------------"
    ],
    "tensorflow/python/kernel_tests/array_ops/array_ops_test.py||tensorflow/python/kernel_tests/array_ops/array_ops_test.py": [
      "File: tensorflow/python/kernel_tests/array_ops/array_ops_test.py -> tensorflow/python/kernel_tests/array_ops/array_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "1580:           dims = constant_op.constant([3, 0], dtype=dtype)",
      "1581:           self.evaluate(array_ops.unravel_index(indices=indices, dims=dims))",
      "1584: class GuaranteeConstOpTest(test_util.TensorFlowTestCase):",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1583:   def testUnravelIndexIntegerOverflow(self):",
      "1584:     with self.cached_session():",
      "1585:       for dtype in [dtypes.int32, dtypes.int64]:",
      "1586:         with self.assertRaisesRegex(",
      "1587:             errors.InvalidArgumentError,",
      "1588:             r\"Input dims product is causing integer overflow\"):",
      "1589:           indices = constant_op.constant(-0x100000, dtype=dtype)",
      "1590:           if dtype == dtypes.int32:",
      "1591:             value = 0x10000000",
      "1592:           else:",
      "1593:             value = 0x7FFFFFFFFFFFFFFF",
      "1594:           dims = constant_op.constant([value, value], dtype=dtype)",
      "1595:           self.evaluate(array_ops.unravel_index(indices=indices, dims=dims))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "c1cc46fd17ceeaa4384d36e1cc4ce13ed3392e09",
      "candidate_info": {
        "commit_hash": "c1cc46fd17ceeaa4384d36e1cc4ce13ed3392e09",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c1cc46fd17ceeaa4384d36e1cc4ce13ed3392e09",
        "files": [
          "tensorflow/core/kernels/unravel_index_op.cc",
          "tensorflow/python/kernel_tests/array_ops_test.py"
        ],
        "message": "Fix integer overflow leading to divide by zero error in Unravel index kernel when dimensions product exceeds max int value.\n\nPiperOrigin-RevId: 413250052\nChange-Id: I9450b6e8acecd2e881a64b882e2b7c70e8e9289a",
        "before_after_code_files": [
          "tensorflow/core/kernels/unravel_index_op.cc||tensorflow/core/kernels/unravel_index_op.cc",
          "tensorflow/python/kernel_tests/array_ops_test.py||tensorflow/python/kernel_tests/array_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/unravel_index_op.cc||tensorflow/core/kernels/unravel_index_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/unravel_index_op.cc||tensorflow/core/kernels/unravel_index_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/unravel_index_op.cc||tensorflow/core/kernels/unravel_index_op.cc": [
          "File: tensorflow/core/kernels/unravel_index_op.cc -> tensorflow/core/kernels/unravel_index_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: limitations under the License.",
          "16: #define EIGEN_USE_THREADS",
          "18: #include \"tensorflow/core/framework/op_kernel.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include <cstdint>",
          "18: #include \"tensorflow/core/framework/types.pb.h\"",
          "19: #include \"tensorflow/core/platform/types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: template <typename Tidx>",
          "36: class UnravelIndexOp : public OpKernel {",
          "37:  public:",
          "40:   void Compute(OpKernelContext* ctx) override {",
          "41:     const Tensor& indices_tensor = ctx->input(0);",
          "",
          "[Removed Lines]",
          "38:   explicit UnravelIndexOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}",
          "",
          "[Added Lines]",
          "42:   explicit UnravelIndexOp(OpKernelConstruction* ctx)",
          "43:       : OpKernel(ctx), dtidx_(DataTypeToEnum<Tidx>::v()) {}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:     auto dims = dims_tensor.vec<Tidx>();",
          "57:     for (int i = 0; i < dims.size(); i++) {",
          "58:       OP_REQUIRES(",
          "59:           ctx, dims(i) != 0,",
          "60:           errors::InvalidArgument(\"Input dims cannot contain a dim of zero, \"",
          "61:                                   \"but dims contains zero at index \",",
          "62:                                   i));",
          "63:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     double prod = 1;",
          "63:     uint64_t limit;",
          "64:     if (dtidx_ == DataType::DT_INT64) {",
          "65:       limit = kint64max;",
          "66:     } else {",
          "67:       limit = kint32max;",
          "68:     }",
          "76:       OP_REQUIRES(ctx, dims(i) > 0,",
          "77:                   errors::InvalidArgument(",
          "78:                       \"Input dims cannot be negative. Got dim = \", dims(i),",
          "79:                       \" at index \", i));",
          "81:       OP_REQUIRES(",
          "82:           ctx, prod <= limit / dims(i),",
          "83:           errors::InvalidArgument(\"Input dims product is causing integer \"",
          "84:                                   \"overflow: (\",",
          "85:                                   dims, \")\"));",
          "86:       prod = (prod * dims(i));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:                strides_shifted.reshape(reshape).broadcast(bcast);",
          "133:     }",
          "134:   }",
          "135: };",
          "137: #define REGISTER_KERNEL(type)                                               \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:   const DataType dtidx_;",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/array_ops_test.py||tensorflow/python/kernel_tests/array_ops_test.py": [
          "File: tensorflow/python/kernel_tests/array_ops_test.py -> tensorflow/python/kernel_tests/array_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1580:           dims = constant_op.constant([3, 0], dtype=dtype)",
          "1581:           self.evaluate(array_ops.unravel_index(indices=indices, dims=dims))",
          "1584: class GuaranteeConstOpTest(test_util.TensorFlowTestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1583:   def testUnravelIndexIntegerOverflow(self):",
          "1584:     with self.cached_session():",
          "1585:       for dtype in [dtypes.int32, dtypes.int64]:",
          "1586:         with self.assertRaisesRegex(",
          "1587:             errors.InvalidArgumentError,",
          "1588:             r\"Input dims product is causing integer overflow\"):",
          "1589:           indices = constant_op.constant(-0x100000, dtype=dtype)",
          "1590:           if dtype == dtypes.int32:",
          "1591:             value = 0x10000000",
          "1592:           else:",
          "1593:             value = 0x7FFFFFFFFFFFFFFF",
          "1594:           dims = constant_op.constant([value, value], dtype=dtype)",
          "1595:           self.evaluate(array_ops.unravel_index(indices=indices, dims=dims))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0bdff03f4f983b8b646e8c9639c469e6e0a5074",
      "candidate_info": {
        "commit_hash": "b0bdff03f4f983b8b646e8c9639c469e6e0a5074",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/b0bdff03f4f983b8b646e8c9639c469e6e0a5074",
        "files": [
          "tensorflow/core/kernels/unravel_index_op.cc",
          "tensorflow/python/kernel_tests/array_ops_test.py"
        ],
        "message": "Fix integer overflow leading to divide by zero error in Unravel index kernel when dimensions product exceeds max int value.\n\nPiperOrigin-RevId: 413250052\nChange-Id: I9450b6e8acecd2e881a64b882e2b7c70e8e9289a",
        "before_after_code_files": [
          "tensorflow/core/kernels/unravel_index_op.cc||tensorflow/core/kernels/unravel_index_op.cc",
          "tensorflow/python/kernel_tests/array_ops_test.py||tensorflow/python/kernel_tests/array_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/unravel_index_op.cc||tensorflow/core/kernels/unravel_index_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/unravel_index_op.cc||tensorflow/core/kernels/unravel_index_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/unravel_index_op.cc||tensorflow/core/kernels/unravel_index_op.cc": [
          "File: tensorflow/core/kernels/unravel_index_op.cc -> tensorflow/core/kernels/unravel_index_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: limitations under the License.",
          "16: #define EIGEN_USE_THREADS",
          "18: #include \"tensorflow/core/framework/op_kernel.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include <cstdint>",
          "18: #include \"tensorflow/core/framework/types.pb.h\"",
          "19: #include \"tensorflow/core/platform/types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: template <typename Tidx>",
          "36: class UnravelIndexOp : public OpKernel {",
          "37:  public:",
          "40:   void Compute(OpKernelContext* ctx) override {",
          "41:     const Tensor& indices_tensor = ctx->input(0);",
          "",
          "[Removed Lines]",
          "38:   explicit UnravelIndexOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}",
          "",
          "[Added Lines]",
          "42:   explicit UnravelIndexOp(OpKernelConstruction* ctx)",
          "43:       : OpKernel(ctx), dtidx_(DataTypeToEnum<Tidx>::v()) {}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:     auto dims = dims_tensor.vec<Tidx>();",
          "57:     for (int i = 0; i < dims.size(); i++) {",
          "58:       OP_REQUIRES(",
          "59:           ctx, dims(i) != 0,",
          "60:           errors::InvalidArgument(\"Input dims cannot contain a dim of zero, \"",
          "61:                                   \"but dims contains zero at index \",",
          "62:                                   i));",
          "63:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     double prod = 1;",
          "63:     uint64_t limit;",
          "64:     if (dtidx_ == DataType::DT_INT64) {",
          "65:       limit = kint64max;",
          "66:     } else {",
          "67:       limit = kint32max;",
          "68:     }",
          "76:       OP_REQUIRES(ctx, dims(i) > 0,",
          "77:                   errors::InvalidArgument(",
          "78:                       \"Input dims cannot be negative. Got dim = \", dims(i),",
          "79:                       \" at index \", i));",
          "81:       OP_REQUIRES(",
          "82:           ctx, prod <= limit / dims(i),",
          "83:           errors::InvalidArgument(\"Input dims product is causing integer \"",
          "84:                                   \"overflow: (\",",
          "85:                                   dims, \")\"));",
          "86:       prod = (prod * dims(i));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:                strides_shifted.reshape(reshape).broadcast(bcast);",
          "133:     }",
          "134:   }",
          "135: };",
          "137: #define REGISTER_KERNEL(type)                                               \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:   const DataType dtidx_;",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/array_ops_test.py||tensorflow/python/kernel_tests/array_ops_test.py": [
          "File: tensorflow/python/kernel_tests/array_ops_test.py -> tensorflow/python/kernel_tests/array_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1575:           dims = constant_op.constant([3, 0], dtype=dtype)",
          "1576:           self.evaluate(array_ops.unravel_index(indices=indices, dims=dims))",
          "1579: class GuaranteeConstOpTest(test_util.TensorFlowTestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1578:   def testUnravelIndexIntegerOverflow(self):",
          "1579:     with self.cached_session():",
          "1580:       for dtype in [dtypes.int32, dtypes.int64]:",
          "1581:         with self.assertRaisesRegex(",
          "1582:             errors.InvalidArgumentError,",
          "1583:             r\"Input dims product is causing integer overflow\"):",
          "1584:           indices = constant_op.constant(-0x100000, dtype=dtype)",
          "1585:           if dtype == dtypes.int32:",
          "1586:             value = 0x10000000",
          "1587:           else:",
          "1588:             value = 0x7FFFFFFFFFFFFFFF",
          "1589:           dims = constant_op.constant([value, value], dtype=dtype)",
          "1590:           self.evaluate(array_ops.unravel_index(indices=indices, dims=dims))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51ea7bb3f201c9dd0f30e841681eb2f228a78fcb",
      "candidate_info": {
        "commit_hash": "51ea7bb3f201c9dd0f30e841681eb2f228a78fcb",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/51ea7bb3f201c9dd0f30e841681eb2f228a78fcb",
        "files": [
          "tensorflow/core/kernels/unravel_index_op.cc",
          "tensorflow/python/kernel_tests/array_ops_test.py"
        ],
        "message": "Fix integer overflow leading to divide by zero error in Unravel index kernel when dimensions product exceeds max int value.\n\nPiperOrigin-RevId: 413250052\nChange-Id: I9450b6e8acecd2e881a64b882e2b7c70e8e9289a",
        "before_after_code_files": [
          "tensorflow/core/kernels/unravel_index_op.cc||tensorflow/core/kernels/unravel_index_op.cc",
          "tensorflow/python/kernel_tests/array_ops_test.py||tensorflow/python/kernel_tests/array_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/unravel_index_op.cc||tensorflow/core/kernels/unravel_index_op.cc"
          ],
          "candidate": [
            "tensorflow/core/kernels/unravel_index_op.cc||tensorflow/core/kernels/unravel_index_op.cc"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/unravel_index_op.cc||tensorflow/core/kernels/unravel_index_op.cc": [
          "File: tensorflow/core/kernels/unravel_index_op.cc -> tensorflow/core/kernels/unravel_index_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: limitations under the License.",
          "16: #define EIGEN_USE_THREADS",
          "18: #include \"tensorflow/core/framework/op_kernel.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #include <cstdint>",
          "18: #include \"tensorflow/core/framework/types.pb.h\"",
          "19: #include \"tensorflow/core/platform/types.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "35: template <typename Tidx>",
          "36: class UnravelIndexOp : public OpKernel {",
          "37:  public:",
          "40:   void Compute(OpKernelContext* ctx) override {",
          "41:     const Tensor& indices_tensor = ctx->input(0);",
          "",
          "[Removed Lines]",
          "38:   explicit UnravelIndexOp(OpKernelConstruction* ctx) : OpKernel(ctx) {}",
          "",
          "[Added Lines]",
          "42:   explicit UnravelIndexOp(OpKernelConstruction* ctx)",
          "43:       : OpKernel(ctx), dtidx_(DataTypeToEnum<Tidx>::v()) {}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "55:     auto dims = dims_tensor.vec<Tidx>();",
          "57:     for (int i = 0; i < dims.size(); i++) {",
          "58:       OP_REQUIRES(",
          "59:           ctx, dims(i) != 0,",
          "60:           errors::InvalidArgument(\"Input dims cannot contain a dim of zero, \"",
          "61:                                   \"but dims contains zero at index \",",
          "62:                                   i));",
          "63:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62:     double prod = 1;",
          "63:     uint64_t limit;",
          "64:     if (dtidx_ == DataType::DT_INT64) {",
          "65:       limit = kint64max;",
          "66:     } else {",
          "67:       limit = kint32max;",
          "68:     }",
          "76:       OP_REQUIRES(ctx, dims(i) > 0,",
          "77:                   errors::InvalidArgument(",
          "78:                       \"Input dims cannot be negative. Got dim = \", dims(i),",
          "79:                       \" at index \", i));",
          "81:       OP_REQUIRES(",
          "82:           ctx, prod <= limit / dims(i),",
          "83:           errors::InvalidArgument(\"Input dims product is causing integer \"",
          "84:                                   \"overflow: (\",",
          "85:                                   dims, \")\"));",
          "86:       prod = (prod * dims(i));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:                strides_shifted.reshape(reshape).broadcast(bcast);",
          "133:     }",
          "134:   }",
          "135: };",
          "137: #define REGISTER_KERNEL(type)                                               \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:   const DataType dtidx_;",
          "",
          "---------------"
        ],
        "tensorflow/python/kernel_tests/array_ops_test.py||tensorflow/python/kernel_tests/array_ops_test.py": [
          "File: tensorflow/python/kernel_tests/array_ops_test.py -> tensorflow/python/kernel_tests/array_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "1580:           dims = constant_op.constant([3, 0], dtype=dtype)",
          "1581:           self.evaluate(array_ops.unravel_index(indices=indices, dims=dims))",
          "1584: class GuaranteeConstOpTest(test_util.TensorFlowTestCase):",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1583:   def testUnravelIndexIntegerOverflow(self):",
          "1584:     with self.cached_session():",
          "1585:       for dtype in [dtypes.int32, dtypes.int64]:",
          "1586:         with self.assertRaisesRegex(",
          "1587:             errors.InvalidArgumentError,",
          "1588:             r\"Input dims product is causing integer overflow\"):",
          "1589:           indices = constant_op.constant(-0x100000, dtype=dtype)",
          "1590:           if dtype == dtypes.int32:",
          "1591:             value = 0x10000000",
          "1592:           else:",
          "1593:             value = 0x7FFFFFFFFFFFFFFF",
          "1594:           dims = constant_op.constant([value, value], dtype=dtype)",
          "1595:           self.evaluate(array_ops.unravel_index(indices=indices, dims=dims))",
          "",
          "---------------"
        ]
      }
    }
  ]
}