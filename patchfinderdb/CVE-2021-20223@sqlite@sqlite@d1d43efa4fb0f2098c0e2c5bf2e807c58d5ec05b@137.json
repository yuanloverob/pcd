{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5f69512404cd2e5153ddf90ea277fbba6dd58ab7",
      "candidate_info": {
        "commit_hash": "5f69512404cd2e5153ddf90ea277fbba6dd58ab7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5f69512404cd2e5153ddf90ea277fbba6dd58ab7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Early-out on the INTERSECT query processing following an error.\n\nFossilOrigin-Name: a67cf5b7d37d5b1484be32092635faafd8f76e5881898cd9435517c4b287d663",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5aeb5a2d295e10d5fc1d456b3acaf8ac13c04cb5bb71a8c4571541d366e95887",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2809:         assert( p->pEList );",
          "2810:         iBreak = sqlite3VdbeMakeLabel(pParse);",
          "2811:         iCont = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2809:         if( rc ) break;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eeb55d869467799b3c5df01fedc212c0c3ed486f",
      "candidate_info": {
        "commit_hash": "eeb55d869467799b3c5df01fedc212c0c3ed486f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/eeb55d869467799b3c5df01fedc212c0c3ed486f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbevtab.c"
        ],
        "message": "Fix the build so that it works even without SQLITE_ENABLE_EXPLAIN_COMMENTS.\n\nFossilOrigin-Name: 5896cbf4d0c7854c29c96d2ea2cea4adaedaa027a0fe4a3f0ac4dfbeaabb8dec",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbevtab.c||src/vdbevtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6819b86eb2de516c445655a83f9b2ba5ae0bff660cffaf84f1345d9be79b051e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbevtab.c||src/vdbevtab.c": [
          "File: src/vdbevtab.c -> src/vdbevtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:       if( i==5 ){",
          "191:         sqlite3_result_text(ctx, pCur->zP4, -1, SQLITE_STATIC);",
          "192:       }else{",
          "193:         char *zCom = sqlite3VdbeDisplayComment(pVTab->db, pOp, pCur->zP4);",
          "194:         sqlite3_result_text(ctx, zCom, -1, sqlite3_free);",
          "195:       }",
          "196:       break;",
          "197:     case 6:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "196: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "691b5c54b80c4861906d8791623a09af6db2d966",
      "candidate_info": {
        "commit_hash": "691b5c54b80c4861906d8791623a09af6db2d966",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/691b5c54b80c4861906d8791623a09af6db2d966",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/ctime.c",
          "src/main.c",
          "src/vdbe.h",
          "src/vdbevtab.c",
          "tool/mksqlite3c.tcl"
        ],
        "message": "Infrastructure for the bytecode() table-valued function.  The function itself is not yet implemented.\n\nFossilOrigin-Name: 2795f0d633577e0de66b389d9e8e44c55e85975bdc62f1a0b8f93959d19b22bf",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/ctime.c||src/ctime.c",
          "src/main.c||src/main.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbevtab.c||src/vdbevtab.c",
          "tool/mksqlite3c.tcl||tool/mksqlite3c.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "190:          table.lo threads.lo tokenize.lo treeview.lo trigger.lo \\",
          "191:          update.lo userauth.lo upsert.lo util.lo vacuum.lo \\",
          "192:          vdbe.lo vdbeapi.lo vdbeaux.lo vdbeblob.lo vdbemem.lo vdbesort.lo \\",
          "194:          window.lo utf.lo vtab.lo",
          "196: # Object files for the amalgamation.",
          "",
          "[Removed Lines]",
          "193:          vdbetrace.lo wal.lo walker.lo where.lo wherecode.lo whereexpr.lo \\",
          "",
          "[Added Lines]",
          "193:          vdbetrace.lo vdbetrace.lo \\",
          "194:          wal.lo walker.lo where.lo wherecode.lo whereexpr.lo \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "296:   $(TOP)/src/vdbemem.c \\",
          "297:   $(TOP)/src/vdbesort.c \\",
          "298:   $(TOP)/src/vdbetrace.c \\",
          "299:   $(TOP)/src/vdbeInt.h \\",
          "300:   $(TOP)/src/vtab.c \\",
          "301:   $(TOP)/src/vxworks.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "300:   $(TOP)/src/vdbevtab.c \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "502:   $(TOP)/src/vdbe.c \\",
          "503:   $(TOP)/src/vdbemem.c \\",
          "504:   $(TOP)/src/vdbetrace.c \\",
          "505:   $(TOP)/src/where.c \\",
          "506:   $(TOP)/src/wherecode.c \\",
          "507:   $(TOP)/src/whereexpr.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "507:   $(TOP)/src/vdbevtab.c \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "607: SHELL_OPT += -DSQLITE_ENABLE_STMTVTAB",
          "608: SHELL_OPT += -DSQLITE_ENABLE_DBPAGE_VTAB",
          "609: SHELL_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "610: SHELL_OPT += -DSQLITE_ENABLE_OFFSET_SQL_FUNC",
          "611: SHELL_OPT += -DSQLITE_ENABLE_DESERIALIZE",
          "612: FUZZERSHELL_OPT = -DSQLITE_ENABLE_JSON1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "613: SHELL_OPT += -DSQLITE_ENABLE_BYTECODE_VTAB",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "619: FUZZCHECK_OPT += -DSQLITE_ENABLE_RTREE",
          "620: FUZZCHECK_OPT += -DSQLITE_ENABLE_GEOPOLY",
          "621: FUZZCHECK_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "622: FUZZCHECK_SRC = $(TOP)/test/fuzzcheck.c $(TOP)/test/ossfuzz.c",
          "623: DBFUZZ_OPT =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626: FUZZCHECK_OPT += -DSQLITE_ENABLE_BYTECODE_VTAB",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "688:   -DSQLITE_ENABLE_DESERIALIZE \\",
          "689:   -DSQLITE_DEBUG \\",
          "690:   -DSQLITE_ENABLE_DBSTAT_VTAB \\",
          "691:   -DSQLITE_ENABLE_RTREE \\",
          "692:   -DSQLITE_ENABLE_FTS4 \\",
          "693:   -DSQLITE_ENABLE_FTS5",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "696:   -DSQLITE_ENABLE_BYTECODE_VTAB \\",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1004: vdbetrace.lo: $(TOP)/src/vdbetrace.c $(HDR)",
          "1005:  $(LTCOMPILE) $(TEMP_STORE) -c $(TOP)/src/vdbetrace.c",
          "1007: vtab.lo: $(TOP)/src/vtab.c $(HDR)",
          "1008:  $(LTCOMPILE) $(TEMP_STORE) -c $(TOP)/src/vtab.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1013: vdbevtab.lo: $(TOP)/src/vdbevtab.c $(HDR)",
          "1014:  $(LTCOMPILE) $(TEMP_STORE) -c $(TOP)/src/vdbevtab.c",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1210: TESTFIXTURE_FLAGS += -DSQLITE_DEFAULT_PAGE_SIZE=1024",
          "1211: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_STMTVTAB",
          "1212: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_DBPAGE_VTAB",
          "1213: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_DESERIALIZE",
          "1215: TESTFIXTURE_SRC0 = $(TESTSRC2) libsqlite3.la",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1222: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_BYTECODE_VTAB",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "357: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_STMTVTAB=1",
          "358: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DBPAGE_VTAB=1",
          "359: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DBSTAT_VTAB=1",
          "360: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_DESERIALIZE=1",
          "361: !ENDIF",
          "362: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_COLUMN_METADATA=1",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "360: OPT_FEATURE_FLAGS = $(OPT_FEATURE_FLAGS) -DSQLITE_ENABLE_BYTECODE_VTAB=1",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1353:   $(TOP)\\src\\vdbemem.c \\",
          "1354:   $(TOP)\\src\\vdbesort.c \\",
          "1355:   $(TOP)\\src\\vdbetrace.c \\",
          "1356:   $(TOP)\\src\\vtab.c \\",
          "1357:   $(TOP)\\src\\wal.c \\",
          "1358:   $(TOP)\\src\\walker.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1357:   $(TOP)\\src\\vdbevtab.c \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1684: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_RTREE",
          "1685: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_GEOPOLY",
          "1686: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_DBSTAT_VTAB",
          "1688: FUZZCHECK_SRC = $(TOP)\\test\\fuzzcheck.c $(TOP)\\test\\ossfuzz.c",
          "1689: OSSSHELL_SRC = $(TOP)\\test\\ossshell.c $(TOP)\\test\\ossfuzz.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1689: FUZZCHECK_OPTS = $(FUZZCHECK_OPTS) -DSQLITE_ENABLE_BYTECODE_VTAB",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2109: vdbetrace.lo: $(TOP)\\src\\vdbetrace.c $(HDR)",
          "2110:  $(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\vdbetrace.c",
          "2112: vtab.lo: $(TOP)\\src\\vtab.c $(HDR)",
          "2113:  $(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\vtab.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2115: vdbevtab.lo: $(TOP)\\src\\vdbevtab.c $(HDR)",
          "2116:  $(LTCOMPILE) $(CORE_COMPILE_OPTS) -c $(TOP)\\src\\vdbevtab.c",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2352: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_DEFAULT_PAGE_SIZE=1024",
          "2353: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_STMTVTAB=1",
          "2354: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_DBPAGE_VTAB=1",
          "2355: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_JSON1=1",
          "2356: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_DESERIALIZE=1",
          "2357: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) $(TEST_CCONV_OPTS)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2361: TESTFIXTURE_FLAGS = $(TESTFIXTURE_FLAGS) -DSQLITE_ENABLE_BYTECODE_VTAB=1",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:          table.o threads.o tokenize.o treeview.o trigger.o \\",
          "75:          update.o upsert.o userauth.o util.o vacuum.o \\",
          "76:          vdbeapi.o vdbeaux.o vdbeblob.o vdbemem.o vdbesort.o \\",
          "78:          utf.o vtab.o window.o",
          "80: LIBOBJ += sqlite3session.o",
          "",
          "[Removed Lines]",
          "77:   vdbetrace.o wal.o walker.o where.o wherecode.o whereexpr.o \\",
          "",
          "[Added Lines]",
          "77:   vdbetrace.o vdbevtab.o \\",
          "78:          wal.o walker.o where.o wherecode.o whereexpr.o \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "173:   $(TOP)/src/vdbemem.c \\",
          "174:   $(TOP)/src/vdbesort.c \\",
          "175:   $(TOP)/src/vdbetrace.c \\",
          "176:   $(TOP)/src/vdbeInt.h \\",
          "177:   $(TOP)/src/vtab.c \\",
          "178:   $(TOP)/src/vxworks.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "177:   $(TOP)/src/vdbevtab.c \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "526: SHELL_OPT += -DSQLITE_ENABLE_STMTVTAB",
          "527: SHELL_OPT += -DSQLITE_ENABLE_DBPAGE_VTAB",
          "528: SHELL_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "529: SHELL_OPT += -DSQLITE_ENABLE_OFFSET_SQL_FUNC",
          "530: FUZZERSHELL_OPT = -DSQLITE_ENABLE_JSON1",
          "531: FUZZCHECK_OPT = -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_MEMSYS5",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "531: SHELL_OPT += -DSQLITE_ENABLE_BYTECODE_VTAB",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "536: FUZZCHECK_OPT += -DSQLITE_ENABLE_RTREE",
          "537: FUZZCHECK_OPT += -DSQLITE_ENABLE_GEOPOLY",
          "538: FUZZCHECK_OPT += -DSQLITE_ENABLE_DBSTAT_VTAB",
          "539: DBFUZZ_OPT =",
          "540: KV_OPT = -DSQLITE_THREADSAFE=0 -DSQLITE_DIRECT_OVERFLOW_READ",
          "541: ST_OPT = -DSQLITE_THREADSAFE=0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542: FUZZCHECK_OPT += -DSQLITE_ENABLE_BYTECODE_VTAB",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "586:   -DSQLITE_ENABLE_DESERIALIZE \\",
          "587:   -DSQLITE_DEBUG \\",
          "588:   -DSQLITE_ENABLE_DBSTAT_VTAB \\",
          "589:   -DSQLITE_ENABLE_RTREE \\",
          "590:   -DSQLITE_ENABLE_FTS4 \\",
          "591:   -DSQLITE_ENABLE_FTS5",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "593:   -DSQLITE_ENABLE_BYTECODE_VTAB \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "894: TESTFIXTURE_FLAGS += -DSQLITE_DEFAULT_PAGE_SIZE=1024",
          "895: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_STMTVTAB",
          "896: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_DBPAGE_VTAB",
          "897: TESTFIXTURE_FLAGS += -DTCLSH_INIT_PROC=sqlite3TestInit",
          "899: testfixture$(EXE): $(TESTSRC2) libsqlite3.a $(TESTSRC) $(TOP)/src/tclsqlite.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "902: TESTFIXTURE_FLAGS += -DSQLITE_ENABLE_BYTECODE_VTAB",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d14a1c4f2fc17de98ad685ad1422cdfda89dfccb00afcaf32ee416b6f84f525",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/ctime.c||src/ctime.c": [
          "File: src/ctime.c -> src/ctime.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "193: #if SQLITE_ENABLE_BATCH_ATOMIC_WRITE",
          "194:   \"ENABLE_BATCH_ATOMIC_WRITE\",",
          "195: #endif",
          "196: #if SQLITE_ENABLE_CEROD",
          "197:   \"ENABLE_CEROD=\" CTIMEOPT_VAL(SQLITE_ENABLE_CEROD),",
          "198: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: #if SQLITE_ENABLE_BYTECODE_VTAB",
          "197:   \"ENABLE_BYTECODE_VTAB\",",
          "198: #endif",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3346:   }",
          "3347: #endif",
          "3349: #ifdef SQLITE_ENABLE_INTERNAL_FUNCTIONS",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3349: #ifdef SQLITE_ENABLE_BYTECODE_VTAB",
          "3350:   if( !db->mallocFailed && rc==SQLITE_OK){",
          "3351:     rc = sqlite3VdbeBytecodeVtabInit(db);",
          "3352:   }",
          "3353: #endif",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "290: int sqlite3VdbeHasSubProgram(Vdbe*);",
          "292: int sqlite3NotPureFunc(sqlite3_context*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "293: #ifdef SQLITE_ENABLE_BYTECODE_VTAB",
          "294: int sqlite3VdbeBytecodeVtabInit(sqlite3*);",
          "295: #endif",
          "",
          "---------------"
        ],
        "src/vdbevtab.c||src/vdbevtab.c": [
          "File: src/vdbevtab.c -> src/vdbevtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "16: #ifdef SQLITE_ENABLE_BYTECODE_VTAB",
          "17: #include \"sqliteInt.h\"",
          "18: #include \"vdbeInt.h\"",
          "22: typedef struct bytecodevtab_vtab bytecodevtab_vtab;",
          "23: struct bytecodevtab_vtab {",
          "26: };",
          "30: typedef struct bytecodevtab_cursor bytecodevtab_cursor;",
          "31: struct bytecodevtab_cursor {",
          "34: };",
          "39: static int bytecodevtabConnect(",
          "40:   sqlite3 *db,",
          "41:   void *pAux,",
          "42:   int argc, const char *const*argv,",
          "43:   sqlite3_vtab **ppVtab,",
          "44:   char **pzErr",
          "45: ){",
          "46:   bytecodevtab_vtab *pNew;",
          "47:   int rc;",
          "49:   rc = sqlite3_declare_vtab(db,",
          "50:          \"CREATE TABLE x(\"",
          "51:            \"addr INT,\"",
          "52:            \"opcode TEXT,\"",
          "53:            \"p1 INT,\"",
          "54:            \"p2 INT,\"",
          "55:            \"p3 INT,\"",
          "56:            \"p4 TEXT,\"",
          "57:            \"p5 INT,\"",
          "58:            \"comment TEXT,\"",
          "59:            \"subprog TEXT,\"",
          "60:            \"stmt HIDDEN\"",
          "61:          \");\"",
          "62:        );",
          "63:   if( rc==SQLITE_OK ){",
          "64:     pNew = sqlite3_malloc( sizeof(*pNew) );",
          "66:     if( pNew==0 ) return SQLITE_NOMEM;",
          "67:     memset(pNew, 0, sizeof(*pNew));",
          "68:   }",
          "69:   return rc;",
          "70: }",
          "75: static int bytecodevtabDisconnect(sqlite3_vtab *pVtab){",
          "76:   bytecodevtab_vtab *p = (bytecodevtab_vtab*)pVtab;",
          "77:   sqlite3_free(p);",
          "78:   return SQLITE_OK;",
          "79: }",
          "84: static int bytecodevtabOpen(sqlite3_vtab *p, sqlite3_vtab_cursor **ppCursor){",
          "85:   bytecodevtab_cursor *pCur;",
          "86:   pCur = sqlite3_malloc( sizeof(*pCur) );",
          "87:   if( pCur==0 ) return SQLITE_NOMEM;",
          "88:   memset(pCur, 0, sizeof(*pCur));",
          "90:   return SQLITE_OK;",
          "91: }",
          "96: static int bytecodevtabClose(sqlite3_vtab_cursor *cur){",
          "97:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor*)cur;",
          "98:   sqlite3_free(pCur);",
          "99:   return SQLITE_OK;",
          "100: }",
          "106: static int bytecodevtabNext(sqlite3_vtab_cursor *cur){",
          "107:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor*)cur;",
          "108:   pCur->iRowid++;",
          "109:   return SQLITE_OK;",
          "110: }",
          "116: static int bytecodevtabColumn(",
          "120: ){",
          "121:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor*)cur;",
          "122: #if 0",
          "123:   switch( i ){",
          "124:     case TEMPLATEVTAB_A:",
          "125:       sqlite3_result_int(ctx, 1000 + pCur->iRowid);",
          "126:       break;",
          "127:     default:",
          "128:       assert( i==TEMPLATEVTAB_B );",
          "129:       sqlite3_result_int(ctx, 2000 + pCur->iRowid);",
          "130:       break;",
          "131:   }",
          "132: #endif",
          "133:   return SQLITE_OK;",
          "134: }",
          "140: static int bytecodevtabRowid(sqlite3_vtab_cursor *cur, sqlite_int64 *pRowid){",
          "141:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor*)cur;",
          "143:   return SQLITE_OK;",
          "144: }",
          "150: static int bytecodevtabEof(sqlite3_vtab_cursor *cur){",
          "151:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor*)cur;",
          "152:   return pCur->iRowid>=10;",
          "153: }",
          "161: static int bytecodevtabFilter(",
          "162:   sqlite3_vtab_cursor *pVtabCursor,",
          "163:   int idxNum, const char *idxStr,",
          "164:   int argc, sqlite3_value **argv",
          "165: ){",
          "166:   bytecodevtab_cursor *pCur = (bytecodevtab_cursor *)pVtabCursor;",
          "167:   pCur->iRowid = 1;",
          "168:   return SQLITE_OK;",
          "169: }",
          "177: static int bytecodevtabBestIndex(",
          "178:   sqlite3_vtab *tab,",
          "179:   sqlite3_index_info *pIdxInfo",
          "180: ){",
          "181:   pIdxInfo->estimatedCost = (double)10;",
          "182:   pIdxInfo->estimatedRows = 10;",
          "183:   return SQLITE_OK;",
          "184: }",
          "190: static sqlite3_module bytecodevtabModule = {",
          "215: };",
          "218: int sqlite3VdbeBytecodeVtabInit(sqlite3 *db){",
          "219:   int rc;",
          "220:   rc = sqlite3_create_module(db, \"bytecodevtab\", &bytecodevtabModule, 0);",
          "221:   return rc;",
          "222: }",
          "",
          "---------------"
        ],
        "tool/mksqlite3c.tcl||tool/mksqlite3c.tcl": [
          "File: tool/mksqlite3c.tcl -> tool/mksqlite3c.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "341:    vdbe.c",
          "342:    vdbeblob.c",
          "343:    vdbesort.c",
          "344:    memjournal.c",
          "346:    walker.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "344:    vdbevtab.c",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60081a03825a991ad08864f8d57f408a5c4002bb",
      "candidate_info": {
        "commit_hash": "60081a03825a991ad08864f8d57f408a5c4002bb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/60081a03825a991ad08864f8d57f408a5c4002bb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Enhance the \".databases\" command in the CLI so that it shows the result of sqlite3_db_readonly() and sqlite3_txn_state() for each database file.\n\nFossilOrigin-Name: 0ffd16d23dd3b6467cce31af506c70fde44c3796d386c2a03896e43a6d683e60",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6c716f4b556ea8f9c9f15cffd81cb970488eadf1d5da2ba6b366d3bdeb36e492",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7583:   }else",
          "7585:   if( c=='d' && n>1 && strncmp(azArg[0], \"databases\", n)==0 ){",
          "7588:     open_db(p, 0);",
          "7599:       rc = 1;",
          "7600:     }",
          "7601:   }else",
          "7603:   if( c=='d' && n>=3 && strncmp(azArg[0], \"dbconfig\", n)==0 ){",
          "",
          "[Removed Lines]",
          "7586:     ShellState data;",
          "7587:     char *zErrMsg = 0;",
          "7589:     memcpy(&data, p, sizeof(data));",
          "7590:     data.showHeader = 0;",
          "7591:     data.cMode = data.mode = MODE_List;",
          "7592:     sqlite3_snprintf(sizeof(data.colSeparator),data.colSeparator,\": \");",
          "7593:     data.cnt = 0;",
          "7594:     sqlite3_exec(p->db, \"SELECT name, file FROM pragma_database_list\",",
          "7595:                  callback, &data, &zErrMsg);",
          "7596:     if( zErrMsg ){",
          "7597:       utf8_printf(stderr,\"Error: %s\\n\", zErrMsg);",
          "7598:       sqlite3_free(zErrMsg);",
          "",
          "[Added Lines]",
          "7586:     char **azName = 0;",
          "7587:     int nName = 0;",
          "7588:     sqlite3_stmt *pStmt;",
          "7589:     int rc;",
          "7590:     int i;",
          "7592:     rc = sqlite3_prepare_v2(p->db, \"PRAGMA database_list\", -1, &pStmt, 0);",
          "7593:     if( rc ){",
          "7594:       utf8_printf(stderr, \"Error: %s\\n\", sqlite3_errmsg(p->db));",
          "7596:     }else{",
          "7597:       while( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "7598:         const char *zSchema = (const char *)sqlite3_column_text(pStmt,1);",
          "7599:         const char *zFile = (const char*)sqlite3_column_text(pStmt,2);",
          "7600:         azName = sqlite3_realloc(azName, (nName+1)*2*sizeof(char*));",
          "7601:         if( azName==0 ){ shell_out_of_memory();  /* Does not return */ }",
          "7602:         azName[nName*2] = strdup(zSchema);",
          "7603:         azName[nName*2+1] = strdup(zFile);",
          "7604:         nName++;",
          "7605:       }",
          "7607:     sqlite3_finalize(pStmt);",
          "7608:     for(i=0; i<nName; i++){",
          "7609:       int eTxn = sqlite3_txn_state(p->db, azName[i*2]);",
          "7610:       int bRdonly = sqlite3_db_readonly(p->db, azName[i*2]);",
          "7611:       const char *z = azName[i*2+1];",
          "7612:       utf8_printf(p->out, \"%s: %s %s%s\\n\",",
          "7613:          azName[i*2],",
          "7614:          z && z[0] ? z : \"\\\"\\\"\",",
          "7615:          bRdonly ? \"r/o\" : \"r/w\",",
          "7616:          eTxn==SQLITE_TXN_NONE ? \"\" :",
          "7617:             eTxn==SQLITE_TXN_READ ? \" read-txn\" : \" write-txn\");",
          "7618:       free(azName[i*2]);",
          "7619:       free(azName[i*2+1]);",
          "7620:     }",
          "7621:     sqlite3_free(azName);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0908e3853675b41f3070bb8178e51a7b4f2f844e",
      "candidate_info": {
        "commit_hash": "0908e3853675b41f3070bb8178e51a7b4f2f844e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0908e3853675b41f3070bb8178e51a7b4f2f844e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/shell1.test"
        ],
        "message": "Add support for \"box\" mode in the CLI:  Like \"table\" except that it uses unicode box-drawing characters instead of ascii-art.\n\nFossilOrigin-Name: 6da784c9e174744d6deeb76c553b515b96c1fcb80c55a281e476959ec680fb72",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/shell1.test||test/shell1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7efabd683b79743b407ad71dda56db00fb0d668828bdc342145816b4f1c3bf3a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1211:   \"eqp\",",
          "1212:   \"json\",",
          "1213:   \"markdown\",",
          "1215: };",
          "",
          "[Removed Lines]",
          "1214:   \"table\"",
          "",
          "[Added Lines]",
          "1215:   \"table\",",
          "1216:   \"box\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1944:   const char *zSep",
          "1945: ){",
          "1946:   int i;",
          "1948:     fputs(zSep, p->out);",
          "1950:   }",
          "1952:   fputs(\"\\n\", p->out);",
          "1953: }",
          "",
          "[Removed Lines]",
          "1947:   for(i=0; i<nArg; i++){",
          "1949:     print_dashes(p->out, p->actualWidth[i]+2);",
          "1951:   fputs(zSep, p->out);",
          "",
          "[Added Lines]",
          "1949:   if( nArg>0 ){",
          "1950:     fputs(zSep, p->out);",
          "1951:     print_dashes(p->out, p->actualWidth[0]+2);",
          "1952:     for(i=1; i<nArg; i++){",
          "1953:       fputs(zSep, p->out);",
          "1954:       print_dashes(p->out, p->actualWidth[i]+2);",
          "1955:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2947:   sqlite3_finalize(pQ);",
          "2948: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2984: static void print_box_line(FILE *out, int N){",
          "2985:   const char zDash[] =",
          "2986:       BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24",
          "2987:       BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24 BOX_24;",
          "2988:   const int nDash = sizeof(zDash) - 1;",
          "2989:   N *= 3;",
          "2990:   while( N>nDash ){",
          "2991:     utf8_printf(out, zDash);",
          "2992:     N -= nDash;",
          "2993:   }",
          "2994:   utf8_printf(out, \"%.*s\", N, zDash);",
          "2995: }",
          "3000: static void print_box_row_separator(",
          "3001:   ShellState *p,",
          "3002:   int nArg,",
          "3003:   const char *zSep1,",
          "3004:   const char *zSep2,",
          "3005:   const char *zSep3",
          "3006: ){",
          "3007:   int i;",
          "3008:   if( nArg>0 ){",
          "3009:     utf8_printf(p->out, \"%s\", zSep1);",
          "3010:     print_box_line(p->out, p->actualWidth[0]+2);",
          "3011:     for(i=1; i<nArg; i++){",
          "3012:       utf8_printf(p->out, \"%s\", zSep2);",
          "3013:       print_box_line(p->out, p->actualWidth[i]+2);",
          "3014:     }",
          "3015:     utf8_printf(p->out, \"%s\", zSep3);",
          "3016:   }",
          "3017:   fputs(\"\\n\", p->out);",
          "3018: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2967:   const char *z;",
          "2968:   int rc;",
          "2969:   int i, j, nTotal, w, n;",
          "2973:   rc = sqlite3_get_table(p->db, sqlite3_sql(pStmt),",
          "2974:                          &azData, &nRow, &nColumn, &zMsg);",
          "",
          "[Removed Lines]",
          "2970:   const char *colSep;",
          "2971:   const char *rowSep;",
          "",
          "[Added Lines]",
          "3043:   const char *colSep = 0;",
          "3044:   const char *rowSep = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3003:     j = i%nColumn;",
          "3004:     if( n>p->actualWidth[j] ) p->actualWidth[j] = n;",
          "3005:   }",
          "3010:       for(i=0; i<nColumn; i++){",
          "3011:         w = p->actualWidth[i];",
          "3015:       }",
          "3016:       for(i=0; i<nColumn; i++){",
          "3019:       }",
          "3020:     }",
          "3033:   }",
          "3034:   for(i=nColumn, j=0; i<nTotal; i++, j++){",
          "3036:     z = azData[i];",
          "3037:     if( z==0 ) z = p->nullValue;",
          "3038:     w = p->actualWidth[j];",
          "3039:     if( p->colWidth[j]<0 ) w = -w;",
          "3040:     utf8_width_print(p->out, w, z);",
          "3041:     if( j==nColumn-1 ){",
          "3043:       j = -1;",
          "3044:     }else{",
          "3046:     }",
          "3047:   }",
          "3048:   if( p->cMode==MODE_Table ){",
          "3049:     print_row_separator(p, nColumn, \"+\");",
          "3050:   }",
          "3051:   sqlite3_free_table(azData);",
          "3052: }",
          "",
          "[Removed Lines]",
          "3006:   if( p->cMode==MODE_Column ){",
          "3007:     colSep = \"  \";",
          "3008:     rowSep = \"\\n\";",
          "3009:     if( p->showHeader ){",
          "3012:         if( p->colWidth[i]<0 ) w = -w;",
          "3013:         utf8_width_print(p->out, w, azData[i]);",
          "3014:         fputs(i==nColumn-1?\"\\n\":\"  \", p->out);",
          "3017:         print_dashes(p->out, p->actualWidth[i]);",
          "3018:         fputs(i==nColumn-1?\"\\n\":\"  \", p->out);",
          "3021:   }else{",
          "3022:     colSep = \" | \";",
          "3023:     rowSep = \" |\\n\";",
          "3024:     if( p->cMode==MODE_Table ) print_row_separator(p, nColumn, \"+\");",
          "3025:     fputs(\"| \", p->out);",
          "3026:     for(i=0; i<nColumn; i++){",
          "3027:       w = p->actualWidth[i];",
          "3028:       n = strlenChar(azData[i]);",
          "3029:       utf8_printf(p->out, \"%*s%s%*s\", (w-n)/2, \"\", azData[i], (w-n+1)/2, \"\");",
          "3030:       fputs(i==nColumn-1?\" |\\n\":\" | \", p->out);",
          "3031:     }",
          "3032:     print_row_separator(p, nColumn, p->cMode==MODE_Table ? \"+\" : \"|\");",
          "3035:     if( j==0 && p->cMode!=MODE_Column ) fputs(\"| \", p->out);",
          "3042:       fputs(rowSep, p->out);",
          "3045:       fputs(colSep, p->out);",
          "",
          "[Added Lines]",
          "3079:   switch( p->cMode ){",
          "3080:     case MODE_Column: {",
          "3081:       colSep = \"  \";",
          "3082:       rowSep = \"\\n\";",
          "3083:       if( p->showHeader ){",
          "3084:         for(i=0; i<nColumn; i++){",
          "3085:           w = p->actualWidth[i];",
          "3086:           if( p->colWidth[i]<0 ) w = -w;",
          "3087:           utf8_width_print(p->out, w, azData[i]);",
          "3088:           fputs(i==nColumn-1?\"\\n\":\"  \", p->out);",
          "3089:         }",
          "3090:         for(i=0; i<nColumn; i++){",
          "3091:           print_dashes(p->out, p->actualWidth[i]);",
          "3092:           fputs(i==nColumn-1?\"\\n\":\"  \", p->out);",
          "3093:         }",
          "3094:       }",
          "3095:       break;",
          "3096:     }",
          "3097:     case MODE_Table: {",
          "3098:       colSep = \" | \";",
          "3099:       rowSep = \" |\\n\";",
          "3100:       print_row_separator(p, nColumn, \"+\");",
          "3101:       fputs(\"| \", p->out);",
          "3104:         n = strlenChar(azData[i]);",
          "3105:         utf8_printf(p->out, \"%*s%s%*s\", (w-n)/2, \"\", azData[i], (w-n+1)/2, \"\");",
          "3106:         fputs(i==nColumn-1?\" |\\n\":\" | \", p->out);",
          "3108:       print_row_separator(p, nColumn, \"+\");",
          "3109:       break;",
          "3110:     }",
          "3111:     case MODE_Markdown: {",
          "3112:       colSep = \" | \";",
          "3113:       rowSep = \" |\\n\";",
          "3114:       fputs(\"| \", p->out);",
          "3116:         w = p->actualWidth[i];",
          "3117:         n = strlenChar(azData[i]);",
          "3118:         utf8_printf(p->out, \"%*s%s%*s\", (w-n)/2, \"\", azData[i], (w-n+1)/2, \"\");",
          "3119:         fputs(i==nColumn-1?\" |\\n\":\" | \", p->out);",
          "3121:       print_row_separator(p, nColumn, \"|\");",
          "3122:       break;",
          "3123:     }",
          "3124:     case MODE_Box: {",
          "3125:       colSep = \" \" BOX_13 \" \";",
          "3126:       rowSep = \" \" BOX_13 \"\\n\";",
          "3127:       print_box_row_separator(p, nColumn, BOX_23, BOX_234, BOX_34);",
          "3128:       utf8_printf(p->out, BOX_13 \" \");",
          "3129:       for(i=0; i<nColumn; i++){",
          "3130:         w = p->actualWidth[i];",
          "3131:         n = strlenChar(azData[i]);",
          "3132:         utf8_printf(p->out, \"%*s%s%*s%s\",",
          "3133:             (w-n)/2, \"\", azData[i], (w-n+1)/2, \"\",",
          "3134:             i==nColumn-1?\" \"BOX_13\"\\n\":\" \"BOX_13\" \");",
          "3135:       }",
          "3136:       print_box_row_separator(p, nColumn, BOX_123, BOX_1234, BOX_134);",
          "3137:       break;",
          "3141:     if( j==0 && p->cMode!=MODE_Column ){",
          "3142:       utf8_printf(p->out, \"%s\", p->cMode==MODE_Box?BOX_13\" \":\"| \");",
          "3143:     }",
          "3150:       utf8_printf(p->out, \"%s\", rowSep);",
          "3153:       utf8_printf(p->out, \"%s\", colSep);",
          "3158:   }else if( p->cMode==MODE_Box ){",
          "3159:     print_box_row_separator(p, nColumn, BOX_12, BOX_124, BOX_14);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3063:   if( pArg->cMode==MODE_Column",
          "3064:    || pArg->cMode==MODE_Table",
          "3065:    || pArg->cMode==MODE_Markdown",
          "3066:   ){",
          "3067:     exec_prepared_stmt_columnar(pArg, pStmt);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3175:    || pArg->cMode==MODE_Box",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3115:         }",
          "3116:       } while( SQLITE_ROW == rc );",
          "3117:       sqlite3_free(pData);",
          "3121:         fputs(\"]\\n\", pArg->out);",
          "3122:       }",
          "3123:     }",
          "",
          "[Removed Lines]",
          "3118:       if( pArg->cMode==MODE_Table ){",
          "3119:         print_row_separator(pArg, nCol, \"+\");",
          "3120:       }else if( pArg->cMode==MODE_Json ){",
          "",
          "[Added Lines]",
          "3229:       if( pArg->cMode==MODE_Json ){",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3801:   \".mode MODE ?TABLE?       Set output mode\",",
          "3802:   \"   MODE is one of:\",",
          "3803:   \"     ascii     Columns/rows delimited by 0x1F and 0x1E\",",
          "3804:   \"     csv       Comma-separated values\",",
          "3805:   \"     column    Output in columns.  (See .width)\",",
          "3806:   \"     html      HTML <table> code\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3913:   \"     box       Tables using unicode box-drawing characters\",",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "8414:       p->mode = MODE_Markdown;",
          "8415:     }else if( c2=='t' && strncmp(azArg[1],\"table\",n2)==0 ){",
          "8416:       p->mode = MODE_Table;",
          "8417:     }else if( c2=='j' && strncmp(azArg[1],\"json\",n2)==0 ){",
          "8418:       p->mode = MODE_Json;",
          "8419:     }else if( nArg==1 ){",
          "8420:       raw_printf(p->out, \"current output mode: %s\\n\", modeDescr[p->mode]);",
          "8421:     }else{",
          "8422:       raw_printf(stderr, \"Error: mode should be one of: \"",
          "8424:          \"quote table tabs tcl\\n\");",
          "8425:       rc = 1;",
          "8426:     }",
          "",
          "[Removed Lines]",
          "8423:          \"ascii column csv html insert json line list markdown \"",
          "",
          "[Added Lines]",
          "8527:     }else if( c2=='b' && strncmp(azArg[1],\"box\",n2)==0 ){",
          "8528:       p->mode = MODE_Box;",
          "8535:          \"ascii box column csv html insert json line list markdown \"",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "10420:   \"   -ascii               set output mode to 'ascii'\\n\"",
          "10421:   \"   -bail                stop after hitting an error\\n\"",
          "10422:   \"   -batch               force batch I/O\\n\"",
          "10423:   \"   -column              set output mode to 'column'\\n\"",
          "10424:   \"   -cmd COMMAND         run \\\"COMMAND\\\" before reading stdin\\n\"",
          "10425:   \"   -csv                 set output mode to 'csv'\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10535:   \"   -box                 set output mode to 'box'\\n\"",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "10867:       data.mode = MODE_Markdown;",
          "10868:     }else if( strcmp(z,\"-table\")==0 ){",
          "10869:       data.mode = MODE_Table;",
          "10870:     }else if( strcmp(z,\"-csv\")==0 ){",
          "10871:       data.mode = MODE_Csv;",
          "10872:       memcpy(data.colSeparator,\",\",2);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10983:     }else if( strcmp(z,\"-box\")==0 ){",
          "10984:       data.mode = MODE_Box;",
          "",
          "---------------"
        ],
        "test/shell1.test||test/shell1.test": [
          "File: test/shell1.test -> test/shell1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "199: } {0 {}}",
          "200: do_test shell1-2.2.5 {",
          "201:   catchcmd \"test.db\" \".mode \\\"insert FOO\"",
          "203: do_test shell1-2.2.6 {",
          "204:   catchcmd \"test.db\" \".mode \\'insert FOO\"",
          "207: # check multiple tokens, and quoted tokens",
          "208: do_test shell1-2.3.1 {",
          "",
          "[Removed Lines]",
          "202: } {1 {Error: mode should be one of: ascii column csv html insert json line list markdown quote table tabs tcl}}",
          "205: } {1 {Error: mode should be one of: ascii column csv html insert json line list markdown quote table tabs tcl}}",
          "",
          "[Added Lines]",
          "202: } {1 {Error: mode should be one of: ascii box column csv html insert json line list markdown quote table tabs tcl}}",
          "205: } {1 {Error: mode should be one of: ascii box column csv html insert json line list markdown quote table tabs tcl}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "230: # check quoted args are unquoted",
          "231: do_test shell1-2.4.1 {",
          "232:   catchcmd \"test.db\" \".mode FOO\"",
          "234: do_test shell1-2.4.2 {",
          "235:   catchcmd \"test.db\" \".mode csv\"",
          "236: } {0 {}}",
          "",
          "[Removed Lines]",
          "233: } {1 {Error: mode should be one of: ascii column csv html insert json line list markdown quote table tabs tcl}}",
          "",
          "[Added Lines]",
          "233: } {1 {Error: mode should be one of: ascii box column csv html insert json line list markdown quote table tabs tcl}}",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "430: } {0 {current output mode: list}}",
          "431: do_test shell1-3.13.2 {",
          "432:   catchcmd \"test.db\" \".mode FOO\"",
          "434: do_test shell1-3.13.3 {",
          "435:   catchcmd \"test.db\" \".mode csv\"",
          "436: } {0 {}}",
          "",
          "[Removed Lines]",
          "433: } {1 {Error: mode should be one of: ascii column csv html insert json line list markdown quote table tabs tcl}}",
          "",
          "[Added Lines]",
          "433: } {1 {Error: mode should be one of: ascii box column csv html insert json line list markdown quote table tabs tcl}}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "463: # don't allow partial mode type matches",
          "464: do_test shell1-3.13.12 {",
          "465:   catchcmd \"test.db\" \".mode l\"",
          "467: do_test shell1-3.13.13 {",
          "468:   catchcmd \"test.db\" \".mode li\"",
          "470: do_test shell1-3.13.14 {",
          "471:   catchcmd \"test.db\" \".mode lin\"",
          "472: } {0 {}}",
          "",
          "[Removed Lines]",
          "466: } {1 {Error: mode should be one of: ascii column csv html insert json line list markdown quote table tabs tcl}}",
          "469: } {1 {Error: mode should be one of: ascii column csv html insert json line list markdown quote table tabs tcl}}",
          "",
          "[Added Lines]",
          "466: } {1 {Error: mode should be one of: ascii box column csv html insert json line list markdown quote table tabs tcl}}",
          "469: } {1 {Error: mode should be one of: ascii box column csv html insert json line list markdown quote table tabs tcl}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}