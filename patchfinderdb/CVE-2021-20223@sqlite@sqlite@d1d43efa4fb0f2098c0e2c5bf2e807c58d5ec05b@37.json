{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "69843342de6612381c4388fa94c1e87909ec57f0",
      "candidate_info": {
        "commit_hash": "69843342de6612381c4388fa94c1e87909ec57f0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/69843342de6612381c4388fa94c1e87909ec57f0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/window2.tcl",
          "test/window2.test",
          "test/windowfault.test"
        ],
        "message": "Ensure sqlite3WindowRewrite() is called on a SELECT statement before any terms aremoved from it as part of IN() clause processing. Fix for [f00d096ca].\n\nFossilOrigin-Name: 8c856404b4e98d295449a4e89a41495dc007319a8e9c35c1a763718d7c5f67e8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/window2.tcl||test/window2.tcl",
          "test/window2.test||test/window2.test",
          "test/windowfault.test||test/windowfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45748e2db028ffbda5d3e747493721a5a89af3fbc06823081a2f27f570e40e73",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "416: ){",
          "417:   sqlite3 *db = pParse->db;",
          "419:   if( db->mallocFailed==0 ){",
          "",
          "[Removed Lines]",
          "418:   Expr *pNew = sqlite3ExprDup(db, pX, 0);",
          "",
          "[Added Lines]",
          "418:   Expr *pNew;",
          "419: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "434:   if( sqlite3WindowRewrite(pParse, pX->x.pSelect) ) return 0;",
          "435: #endif",
          "436:   pNew = sqlite3ExprDup(db, pX, 0);",
          "",
          "---------------"
        ],
        "test/window2.tcl||test/window2.tcl": [
          "File: test/window2.tcl -> test/window2.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:   SELECT avg(x) OVER (ORDER BY y) AS z FROM t1 ORDER BY z;",
          "449: }",
          "451: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451: ==========",
          "453: execsql_test 6.0 {",
          "454:   DROP TABLE IF EXISTS t0;",
          "455:   CREATE TABLE t0(c0 INTEGER UNIQUE);",
          "456:   INSERT INTO t0 VALUES(0);",
          "457: }",
          "458: execsql_test 6.1 {",
          "459:   SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0;",
          "460: }",
          "461: execsql_test 6.2 {",
          "462:   SELECT * FROM t0 WHERE",
          "463:       (0, t0.c0) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0);",
          "464: }",
          "",
          "---------------"
        ],
        "test/window2.test||test/window2.test": [
          "File: test/window2.test -> test/window2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "930:   set {} {}",
          "931: } {}",
          "933: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "933: #==========================================================================",
          "935: do_execsql_test 6.0 {",
          "936:   DROP TABLE IF EXISTS t0;",
          "937:   CREATE TABLE t0(c0 INTEGER UNIQUE);",
          "938:   INSERT INTO t0 VALUES(0);",
          "939: } {}",
          "941: do_execsql_test 6.1 {",
          "942:   SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0;",
          "943: } {1 {}}",
          "945: do_execsql_test 6.2 {",
          "946:   SELECT * FROM t0 WHERE",
          "947:       (0, t0.c0) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0);",
          "948: } {}",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:   CREATE TABLE t2(a, b, c, d);",
          "231: }",
          "234: } -body {",
          "235:   execsql {",
          "236:     SELECT row_number() OVER win",
          "",
          "[Removed Lines]",
          "233: do_faultsim_test 1 -faults oom* -prep {",
          "",
          "[Added Lines]",
          "233: do_faultsim_test 10 -faults oom* -prep {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:   faultsim_test_result {0 {}}",
          "247: }",
          "249: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249: reset_db",
          "250: do_execsql_test 11.0 {",
          "251:   DROP TABLE IF EXISTS t0;",
          "252:   CREATE TABLE t0(c0 INTEGER UNIQUE);",
          "253:   INSERT INTO t0 VALUES(0);",
          "254: } {}",
          "256: do_faultsim_test 11 -faults oom* -prep {",
          "257: } -body {",
          "258:   execsql {",
          "259:     SELECT * FROM t0 WHERE",
          "260:       (0, t0.c0) IN (SELECT DENSE_RANK() OVER(), LAG(0) OVER() FROM t0);",
          "261:   }",
          "262: } -test {",
          "263:   faultsim_test_result {0 {}}",
          "264: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
      "candidate_info": {
        "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/window1.test"
        ],
        "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
          "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
          "6067:   ){",
          "6068:     p->selFlags &= ~SF_Distinct;",
          "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6067:    && p->pWin==0",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1243:   ALTER TABLE a0 RENAME TO S;",
          "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
          "1246: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1246: reset_db",
          "1247: do_execsql_test 33.1 {",
          "1248:   CREATE TABLE t1(aa, bb);",
          "1249:   INSERT INTO t1 VALUES(1, 2);",
          "1250:   INSERT INTO t1 VALUES(5, 6);",
          "1251:   CREATE TABLE t2(x);",
          "1252:   INSERT INTO t2 VALUES(1);",
          "1253: }",
          "1254: do_execsql_test 33.2 {",
          "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
          "1256:   ORDER BY 1;",
          "1257: } {6 1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ed0af52cb1b018708b3c27b1b7b55ed47afbb9eb",
      "candidate_info": {
        "commit_hash": "ed0af52cb1b018708b3c27b1b7b55ed47afbb9eb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ed0af52cb1b018708b3c27b1b7b55ed47afbb9eb",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/walvfs.test"
        ],
        "message": "Fix another test script problem in walvfs.test.\n\nFossilOrigin-Name: 1b89d3931e368a66be5075bdf49eedd3839591ee268e3ac293040b5bf7639746",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/walvfs.test||test/walvfs.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5d54cd44d076cfede60bd404a59bd700a950420b961ae9fdec4365a3e4ed18ed",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/walvfs.test||test/walvfs.test": [
          "File: test/walvfs.test -> test/walvfs.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "145:   if {[file tail $file]==\"test.db\"} {",
          "146:     incr ::cnt -1",
          "147:     if {$::cnt==0} {",
          "149:       catchsql { SELECT 'a big long string!' }",
          "150:       sqlite3_interrupt db",
          "151:     }",
          "",
          "[Removed Lines]",
          "148:       sqlite3_memdebug_fail 5 -repeat 0",
          "",
          "[Added Lines]",
          "148:       sqlite3_memdebug_fail 1 -repeat 0",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cb49f5468ef8629e5d3aeb96619ce25b9fd361e0",
      "candidate_info": {
        "commit_hash": "cb49f5468ef8629e5d3aeb96619ce25b9fd361e0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cb49f5468ef8629e5d3aeb96619ce25b9fd361e0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c",
          "test/distinct.test"
        ],
        "message": "Further simplification and modularization of the EXPLAIN logic.\n\nFossilOrigin-Name: aee1c12f4227cea9e8c6295cee3ec11797422c31b48c9468f176eb52f8261fe8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/distinct.test||test/distinct.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2c4dd79fbd4b9f72634a732abb9ed833cd8c9b05fe1e10af8f23e6d6ec023c7c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1472: ){",
          "1473:   const char *zOpName;",
          "1474:   const char *zSynopsis;",
          "",
          "[Removed Lines]",
          "1467: static int displayComment(",
          "",
          "[Added Lines]",
          "1467: static char *displayComment(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1476:   int ii;",
          "1477:   char zAlt[50];",
          "1478:   StrAccum x;",
          "1481:   zOpName = sqlite3OpcodeName(pOp->opcode);",
          "1482:   nOpName = sqlite3Strlen30(zOpName);",
          "1483:   if( zOpName[nOpName+1] ){",
          "",
          "[Removed Lines]",
          "1479:   sqlite3StrAccumInit(&x, 0, zTemp, nTemp, 0);",
          "",
          "[Added Lines]",
          "1479:   sqlite3StrAccumInit(&x, 0, 0, 0, SQLITE_MAX_LENGTH);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1544:   }else if( pOp->zComment ){",
          "1545:     sqlite3_str_appendall(&x, pOp->zComment);",
          "1546:   }",
          "1549: }",
          "",
          "[Removed Lines]",
          "1547:   sqlite3StrAccumFinish(&x);",
          "1548:   return x.nChar;",
          "",
          "[Added Lines]",
          "1546:   if( (x.accError & SQLITE_NOMEM)!=0 && db!=0 ){",
          "1547:     sqlite3OomFault(db);",
          "1548:   }",
          "1549:   return sqlite3StrAccumFinish(&x);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1633:   StrAccum x;",
          "1636:   switch( pOp->p4type ){",
          "1637:     case P4_KEYINFO: {",
          "1638:       int j;",
          "",
          "[Removed Lines]",
          "1631: static char *displayP4(Op *pOp, char *zTemp, int nTemp){",
          "1632:   char *zP4 = zTemp;",
          "1634:   assert( nTemp>=20 );",
          "1635:   sqlite3StrAccumInit(&x, 0, zTemp, nTemp, 0);",
          "",
          "[Added Lines]",
          "1632: static char *displayP4(sqlite3 *db, Op *pOp){",
          "1633:   char *zP4 = 0;",
          "1636:   sqlite3StrAccumInit(&x, 0, 0, 0, SQLITE_MAX_LENGTH);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1718:       for(i=1; i<=n; i++){",
          "1719:         sqlite3_str_appendf(&x, \",%d\", ai[i]);",
          "1720:       }",
          "1722:       sqlite3_str_append(&x, \"]\", 1);",
          "1723:       break;",
          "1724:     }",
          "1725:     case P4_SUBPROGRAM: {",
          "1727:       break;",
          "1728:     }",
          "1729:     case P4_DYNBLOB:",
          "1730:     case P4_ADVANCE: {",
          "1732:       break;",
          "1733:     }",
          "1734:     case P4_TABLE: {",
          "1736:       break;",
          "1737:     }",
          "1738:     default: {",
          "1739:       zP4 = pOp->p4.z;",
          "1744:     }",
          "1745:   }",
          "1749: }",
          "",
          "[Removed Lines]",
          "1721:       zTemp[0] = '[';",
          "1726:       sqlite3_str_appendf(&x, \"program\");",
          "1731:       zTemp[0] = 0;",
          "1735:       sqlite3_str_appendf(&x, \"%s\", pOp->p4.pTab->zName);",
          "1740:       if( zP4==0 ){",
          "1741:         zP4 = zTemp;",
          "1742:         zTemp[0] = 0;",
          "1743:       }",
          "1746:   sqlite3StrAccumFinish(&x);",
          "1747:   assert( zP4!=0 );",
          "1748:   return zP4;",
          "",
          "[Added Lines]",
          "1722:       if( !x.accError ) x.zText[0] = '[';",
          "1727:       zP4 = \"program\";",
          "1735:       zP4 = pOp->p4.pTab->zName;",
          "1742:   if( zP4 ) sqlite3_str_appendall(&x, zP4);",
          "1743:   if( (x.accError & SQLITE_NOMEM)!=0 && db!=0 ){",
          "1744:     sqlite3OomFault(db);",
          "1745:   }",
          "1746:   return sqlite3StrAccumFinish(&x);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1836: void sqlite3VdbePrintOp(FILE *pOut, int pc, VdbeOp *pOp){",
          "1837:   char *zP4;",
          "1840:   static const char *zFormat1 = \"%4d %-13s %4d %4d %4d %-13s %.2X %s\\n\";",
          "1841:   if( pOut==0 ) pOut = stdout;",
          "1843: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "1845: #else",
          "1847: #endif",
          "1851:   fprintf(pOut, zFormat1, pc,",
          "1852:       sqlite3OpcodeName(pOp->opcode), pOp->p1, pOp->p2, pOp->p3, zP4, pOp->p5,",
          "1854:   );",
          "1855:   fflush(pOut);",
          "1856: }",
          "1857: #endif",
          "",
          "[Removed Lines]",
          "1838:   char zPtr[50];",
          "1839:   char zCom[100];",
          "1842:   zP4 = displayP4(pOp, zPtr, sizeof(zPtr));",
          "1844:   displayComment(pOp, zP4, zCom, sizeof(zCom));",
          "1846:   zCom[0] = 0;",
          "1853:       zCom",
          "",
          "[Added Lines]",
          "1836:   char *zCom;",
          "1839:   zP4 = displayP4(0, pOp);",
          "1841:   zCom = displayComment(0, pOp, zP4);",
          "1843:   zCom = 0;",
          "1850:       zCom ? zCom : \"\"",
          "1853:   sqlite3_free(zP4);",
          "1854:   sqlite3_free(zCom);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2133:       rc = SQLITE_ERROR;",
          "2134:       sqlite3VdbeError(p, sqlite3ErrStr(p->rc));",
          "2135:     }else{",
          "2171:       }else{",
          "2189: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "2193:         }",
          "2197: #else",
          "2199: #endif",
          "2200:       }",
          "2206:     }",
          "2207:   }",
          "2208:   return rc;",
          "",
          "[Removed Lines]",
          "2136:       char *zP4;",
          "2137:       if( p->explain==1 ){",
          "2138:         pMem->flags = MEM_Int;",
          "2140:         pMem++;",
          "2142:         pMem->flags = MEM_Static|MEM_Str|MEM_Term;",
          "2144:         assert( pMem->z!=0 );",
          "2145:         pMem->n = sqlite3Strlen30(pMem->z);",
          "2146:         pMem->enc = SQLITE_UTF8;",
          "2147:         pMem++;",
          "2148:       }",
          "2150:       pMem->flags = MEM_Int;",
          "2152:       pMem++;",
          "2154:       pMem->flags = MEM_Int;",
          "2156:       pMem++;",
          "2158:       pMem->flags = MEM_Int;",
          "2160:       pMem++;",
          "2163:         assert( p->db->mallocFailed );",
          "2164:         return SQLITE_ERROR;",
          "2165:       }",
          "2166:       pMem->flags = MEM_Str|MEM_Term;",
          "2167:       zP4 = displayP4(pOp, pMem->z, pMem->szMalloc);",
          "2168:       if( zP4!=pMem->z ){",
          "2169:         pMem->n = 0;",
          "2170:         sqlite3VdbeMemSetStr(pMem, zP4, -1, SQLITE_UTF8, 0);",
          "2172:         assert( pMem->z!=0 );",
          "2173:         pMem->n = sqlite3Strlen30(pMem->z);",
          "2174:         pMem->enc = SQLITE_UTF8;",
          "2175:       }",
          "2176:       pMem++;",
          "2178:       if( p->explain==1 ){",
          "2179:         if( sqlite3VdbeMemClearAndResize(pMem, 4) ){",
          "2180:           assert( p->db->mallocFailed );",
          "2181:           return SQLITE_ERROR;",
          "2182:         }",
          "2183:         pMem->flags = MEM_Str|MEM_Term;",
          "2184:         pMem->n = 2;",
          "2186:         pMem->enc = SQLITE_UTF8;",
          "2187:         pMem++;",
          "2190:         if( sqlite3VdbeMemClearAndResize(pMem, 500) ){",
          "2191:           assert( p->db->mallocFailed );",
          "2192:           return SQLITE_ERROR;",
          "2194:         pMem->flags = MEM_Str|MEM_Term;",
          "2195:         pMem->n = displayComment(pOp, zP4, pMem->z, 500);",
          "2196:         pMem->enc = SQLITE_UTF8;",
          "2202:       p->nResColumn = 8 - 4*(p->explain-1);",
          "2203:       p->pResultSet = &p->aMem[1];",
          "2204:       p->rc = SQLITE_OK;",
          "2205:       rc = SQLITE_ROW;",
          "",
          "[Added Lines]",
          "2135:       char *zP4 = displayP4(db, pOp);",
          "2136:       if( p->explain==2 ){",
          "2137:         sqlite3VdbeMemSetInt64(pMem, pOp->p1);",
          "2138:         sqlite3VdbeMemSetInt64(pMem+1, pOp->p2);",
          "2139:         sqlite3VdbeMemSetInt64(pMem+2, pOp->p3);",
          "2140:         sqlite3VdbeMemSetStr(pMem+3, zP4, -1, SQLITE_UTF8, sqlite3_free);",
          "2141:         p->nResColumn = 4;",
          "2143:         sqlite3VdbeMemSetInt64(pMem+0, i);",
          "2144:         sqlite3VdbeMemSetStr(pMem+1, (char*)sqlite3OpcodeName(pOp->opcode),",
          "2145:                              -1, SQLITE_UTF8, SQLITE_STATIC);",
          "2146:         sqlite3VdbeMemSetInt64(pMem+2, pOp->p1);",
          "2147:         sqlite3VdbeMemSetInt64(pMem+3, pOp->p2);",
          "2148:         sqlite3VdbeMemSetInt64(pMem+4, pOp->p3);",
          "2150:         sqlite3VdbeMemSetInt64(pMem+6, pOp->p5);",
          "2152:         {",
          "2153:           char *zCom = displayComment(db, pOp, zP4);",
          "2154:           sqlite3VdbeMemSetStr(pMem+7, zCom, -1, SQLITE_UTF8, sqlite3_free);",
          "2157:         sqlite3VdbeMemSetNull(pMem+7);",
          "2159:         sqlite3VdbeMemSetStr(pMem+5, zP4, -1, SQLITE_UTF8, sqlite3_free);",
          "2160:         p->nResColumn = 8;",
          "2161:       }",
          "2162:       p->pResultSet = pMem;",
          "2163:       if( db->mallocFailed ){",
          "2164:         p->rc = SQLITE_NOMEM;",
          "2165:         rc = SQLITE_ERROR;",
          "2166:       }else{",
          "2167:         p->rc = SQLITE_OK;",
          "2168:         rc = SQLITE_ROW;",
          "",
          "---------------"
        ],
        "test/distinct.test||test/distinct.test": [
          "File: test/distinct.test -> test/distinct.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:     set ret \"\"",
          "52:     db eval \"EXPLAIN [set sql]\" {",
          "53:       if {$opcode == \"OpenEphemeral\" || $opcode == \"SorterOpen\"} {",
          "56:           lappend ret hash",
          "57:         } else {",
          "58:           lappend ret btree",
          "",
          "[Removed Lines]",
          "54:         if {$p5 != \"08\" && $p5!=\"00\"} { error \"p5 = $p5\" }",
          "55:         if {$p5 == \"08\"} {",
          "",
          "[Added Lines]",
          "54:         if {$p5!=8 && $p5!=0} { error \"p5 = $p5\" }",
          "55:         if {$p5==8} {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f31230af12ecec3f21e6527f1fb11791ceec7eab",
      "candidate_info": {
        "commit_hash": "f31230af12ecec3f21e6527f1fb11791ceec7eab",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f31230af12ecec3f21e6527f1fb11791ceec7eab",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wal.c"
        ],
        "message": "On recovery, always overwrite the old with the new, even if they are the same. Add ALWAYS() macros on branches currently thought to be unreachable, pending additional testing.\n\nFossilOrigin-Name: 7052cf1d533f6404d0f45cf0b3e8a11c1ee27eccb64680a7fd308c8da7cbd544",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wal.c||src/wal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3af61e83532f76f0f3252a28663415d37b096ddf05a9c58fa79303933c09abce",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wal.c||src/wal.c": [
          "File: src/wal.c -> src/wal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1065:   if( rc==SQLITE_OK ){",
          "",
          "[Added Lines]",
          "1065:   if( ALWAYS(rc==SQLITE_OK) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1248:       int iLast = MIN(iLastFrame, HASHTABLE_NPAGE_ONE+iPg*HASHTABLE_NPAGE);",
          "1249:       int iFirst = 1 + (iPg==0?0:HASHTABLE_NPAGE_ONE+(iPg-1)*HASHTABLE_NPAGE);",
          "1250:       rc = walIndexPage(pWal, iPg, (volatile u32**)&aShare);",
          "1251:       if( rc ) break;",
          "1252:       pWal->apWiData[iPg] = aPrivate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1250:       int nHdr, nHdr32;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1262:         isValid = walDecodeFrame(pWal, &pgno, &nTruncate, aData, aFrame);",
          "1263:         if( !isValid ) break;",
          "1264:         rc = walIndexAppend(pWal, iFrame, pgno);",
          "1268:         if( nTruncate ){",
          "",
          "[Removed Lines]",
          "1265:         if( rc!=SQLITE_OK ) break;",
          "",
          "[Added Lines]",
          "1266:         if( NEVER(rc!=SQLITE_OK) ) break;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1276:         }",
          "1277:       }",
          "1278:       pWal->apWiData[iPg] = aShare;",
          "1287:       if( iFrame<=iLast ) break;",
          "1288:     }",
          "",
          "[Removed Lines]",
          "1280:       {",
          "1281:         int nHdr = (iPg==0 ? WALINDEX_HDR_SIZE : 0);",
          "1282:         int nHdr32 = nHdr / sizeof(u32);",
          "1283:         if( memcpy(&aShare[nHdr32], &aPrivate[nHdr32], WALINDEX_PGSZ-nHdr) ){",
          "1284:           memcpy(&aShare[nHdr32], &aPrivate[nHdr32], WALINDEX_PGSZ-nHdr);",
          "1285:         }",
          "1286:       }",
          "",
          "[Added Lines]",
          "1280:       nHdr = (iPg==0 ? WALINDEX_HDR_SIZE : 0);",
          "1281:       nHdr32 = nHdr / sizeof(u32);",
          "1282:       memcpy(&aShare[nHdr32], &aPrivate[nHdr32], WALINDEX_PGSZ-nHdr);",
          "",
          "---------------"
        ]
      }
    }
  ]
}