{
  "cve_id": "CVE-2018-1999015",
  "cve_desc": "FFmpeg before commit 5aba5b89d0b1d73164d3b81764828bb8b20ff32a contains an out of array read vulnerability in ASF_F format demuxer that can result in heap memory reading. This attack appear to be exploitable via specially crafted ASF file that has to provided as input. This vulnerability appears to have been fixed in 5aba5b89d0b1d73164d3b81764828bb8b20ff32a and later.",
  "repo": "FFmpeg/FFmpeg",
  "patch_hash": "5aba5b89d0b1d73164d3b81764828bb8b20ff32a",
  "patch_info": {
    "commit_hash": "5aba5b89d0b1d73164d3b81764828bb8b20ff32a",
    "repo": "FFmpeg/FFmpeg",
    "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/5aba5b89d0b1d73164d3b81764828bb8b20ff32a",
    "files": [
      "libavcodec/mpeg4videodec.c"
    ],
    "message": "avcodec/mpeg4videodec: Check for bitstream end in read_quant_matrix_ext()\n\nFixes: out of array read\nFixes: asff-crash-0e53d0dc491dfdd507530b66562812fbd4c36678\n\nFound-by: Paul Ch <paulcher@icloud.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
    "before_after_code_files": [
      "libavcodec/mpeg4videodec.c||libavcodec/mpeg4videodec.c"
    ]
  },
  "patch_diff": {
    "libavcodec/mpeg4videodec.c||libavcodec/mpeg4videodec.c": [
      "File: libavcodec/mpeg4videodec.c -> libavcodec/mpeg4videodec.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2867:     return 0;",
      "2868: }",
      "2871: {",
      "2872:     int i, j, v;",
      "2874:     if (get_bits1(gb)) {",
      "2876:         for (i = 0; i < 64; i++) {",
      "2877:             v = get_bits(gb, 8);",
      "",
      "[Removed Lines]",
      "2870: static void read_quant_matrix_ext(MpegEncContext *s, GetBitContext *gb)",
      "",
      "[Added Lines]",
      "2870: static int read_quant_matrix_ext(MpegEncContext *s, GetBitContext *gb)",
      "2875:         if (get_bits_left(gb) < 64*8)",
      "2876:             return AVERROR_INVALIDDATA;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2882:     }",
      "2884:     if (get_bits1(gb)) {",
      "2886:         for (i = 0; i < 64; i++) {",
      "2887:             get_bits(gb, 8);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2887:         if (get_bits_left(gb) < 64*8)",
      "2888:             return AVERROR_INVALIDDATA;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2889:     }",
      "2891:     if (get_bits1(gb)) {",
      "2893:         for (i = 0; i < 64; i++) {",
      "2894:             v = get_bits(gb, 8);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2896:         if (get_bits_left(gb) < 64*8)",
      "2897:             return AVERROR_INVALIDDATA;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2898:     }",
      "2900:     if (get_bits1(gb)) {",
      "2902:         for (i = 0; i < 64; i++) {",
      "2903:             get_bits(gb, 8);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2907:         if (get_bits_left(gb) < 64*8)",
      "2908:             return AVERROR_INVALIDDATA;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2905:     }",
      "2907:     next_start_code_studio(gb);",
      "2908: }",
      "2910: static void extension_and_user_data(MpegEncContext *s, GetBitContext *gb, int id)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2916:     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4439d6aa6956453f6f5479020ee71baebbec4287",
      "candidate_info": {
        "commit_hash": "4439d6aa6956453f6f5479020ee71baebbec4287",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/4439d6aa6956453f6f5479020ee71baebbec4287",
        "files": [
          "libavcodec/mpeg4videodec.c"
        ],
        "message": "avcodec/mpeg4videodec: Check for bitstream end in read_quant_matrix_ext()\n\nFixes: out of array read\nFixes: asff-crash-0e53d0dc491dfdd507530b66562812fbd4c36678\n\nFound-by: Paul Ch <paulcher@icloud.com>\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>\n(cherry picked from commit 5aba5b89d0b1d73164d3b81764828bb8b20ff32a)\nSigned-off-by: Michael Niedermayer <michael@niedermayer.cc>",
        "before_after_code_files": [
          "libavcodec/mpeg4videodec.c||libavcodec/mpeg4videodec.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/mpeg4videodec.c||libavcodec/mpeg4videodec.c"
          ],
          "candidate": [
            "libavcodec/mpeg4videodec.c||libavcodec/mpeg4videodec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/mpeg4videodec.c||libavcodec/mpeg4videodec.c": [
          "File: libavcodec/mpeg4videodec.c -> libavcodec/mpeg4videodec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2867:     return 0;",
          "2868: }",
          "2871: {",
          "2872:     int i, j, v;",
          "2874:     if (get_bits1(gb)) {",
          "2876:         for (i = 0; i < 64; i++) {",
          "2877:             v = get_bits(gb, 8);",
          "",
          "[Removed Lines]",
          "2870: static void read_quant_matrix_ext(MpegEncContext *s, GetBitContext *gb)",
          "",
          "[Added Lines]",
          "2870: static int read_quant_matrix_ext(MpegEncContext *s, GetBitContext *gb)",
          "2875:         if (get_bits_left(gb) < 64*8)",
          "2876:             return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2882:     }",
          "2884:     if (get_bits1(gb)) {",
          "2886:         for (i = 0; i < 64; i++) {",
          "2887:             get_bits(gb, 8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2887:         if (get_bits_left(gb) < 64*8)",
          "2888:             return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2889:     }",
          "2891:     if (get_bits1(gb)) {",
          "2893:         for (i = 0; i < 64; i++) {",
          "2894:             v = get_bits(gb, 8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2896:         if (get_bits_left(gb) < 64*8)",
          "2897:             return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2898:     }",
          "2900:     if (get_bits1(gb)) {",
          "2902:         for (i = 0; i < 64; i++) {",
          "2903:             get_bits(gb, 8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2907:         if (get_bits_left(gb) < 64*8)",
          "2908:             return AVERROR_INVALIDDATA;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2905:     }",
          "2907:     next_start_code_studio(gb);",
          "2908: }",
          "2910: static void extension_and_user_data(MpegEncContext *s, GetBitContext *gb, int id)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2916:     return 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9d3841ae6147eaa51c57c574cd81e9ce9566e3a",
      "candidate_info": {
        "commit_hash": "f9d3841ae6147eaa51c57c574cd81e9ce9566e3a",
        "repo": "FFmpeg/FFmpeg",
        "commit_url": "https://github.com/FFmpeg/FFmpeg/commit/f9d3841ae6147eaa51c57c574cd81e9ce9566e3a",
        "files": [
          "libavcodec/error_resilience.c",
          "libavcodec/h263dec.c",
          "libavcodec/idctdsp.c",
          "libavcodec/ituh263dec.c",
          "libavcodec/mpeg12dec.c",
          "libavcodec/mpeg4data.h",
          "libavcodec/mpeg4video.h",
          "libavcodec/mpeg4videodec.c",
          "libavcodec/mpegvideo.c",
          "libavcodec/mpegvideo.h",
          "libavcodec/x86/idctdsp_init.c"
        ],
        "message": "mpeg4video: Add support for MPEG-4 Simple Studio Profile.\n\nThis is a profile supporting > 8-bit video and has a higher quality DCT",
        "before_after_code_files": [
          "libavcodec/error_resilience.c||libavcodec/error_resilience.c",
          "libavcodec/h263dec.c||libavcodec/h263dec.c",
          "libavcodec/idctdsp.c||libavcodec/idctdsp.c",
          "libavcodec/ituh263dec.c||libavcodec/ituh263dec.c",
          "libavcodec/mpeg12dec.c||libavcodec/mpeg12dec.c",
          "libavcodec/mpeg4data.h||libavcodec/mpeg4data.h",
          "libavcodec/mpeg4video.h||libavcodec/mpeg4video.h",
          "libavcodec/mpeg4videodec.c||libavcodec/mpeg4videodec.c",
          "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c",
          "libavcodec/mpegvideo.h||libavcodec/mpegvideo.h",
          "libavcodec/x86/idctdsp_init.c||libavcodec/x86/idctdsp_init.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "libavcodec/mpeg4videodec.c||libavcodec/mpeg4videodec.c"
          ],
          "candidate": [
            "libavcodec/mpeg4videodec.c||libavcodec/mpeg4videodec.c"
          ]
        }
      },
      "candidate_diff": {
        "libavcodec/error_resilience.c||libavcodec/error_resilience.c": [
          "File: libavcodec/error_resilience.c -> libavcodec/error_resilience.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "814: {",
          "815:     if(s->avctx->hwaccel && s->avctx->hwaccel->decode_slice           ||",
          "816:        !s->cur_pic.f                                                  ||",
          "818:     )",
          "819:         return 0;",
          "820:     return 1;",
          "",
          "[Removed Lines]",
          "817:        s->cur_pic.field_picture",
          "",
          "[Added Lines]",
          "817:        s->cur_pic.field_picture                                       ||",
          "818:        s->avctx->profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO",
          "",
          "---------------"
        ],
        "libavcodec/h263dec.c||libavcodec/h263dec.c": [
          "File: libavcodec/h263dec.c -> libavcodec/h263dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: static enum AVPixelFormat h263_get_format(AVCodecContext *avctx)",
          "49: {",
          "50:     if (avctx->codec->id == AV_CODEC_ID_MSS2)",
          "51:         return AV_PIX_FMT_YUV420P;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51:     if (avctx->bits_per_raw_sample > 8) {",
          "52:         av_assert1(avctx->profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO);",
          "53:         return avctx->pix_fmt;",
          "54:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "198:     ff_set_qscale(s, s->qscale);",
          "200:     if (s->avctx->hwaccel) {",
          "201:         const uint8_t *start = s->gb.buffer + get_bits_count(&s->gb) / 8;",
          "202:         ret = s->avctx->hwaccel->decode_slice(s->avctx, start, s->gb.buffer_end - start);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "206:     if (s->studio_profile) {",
          "207:         if ((ret = ff_mpeg4_decode_studio_slice_header(s->avctx->priv_data)) < 0)",
          "208:             return ret;",
          "209:     }",
          "",
          "---------------"
        ],
        "libavcodec/idctdsp.c||libavcodec/idctdsp.c": [
          "File: libavcodec/idctdsp.c -> libavcodec/idctdsp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "256:         c->perm_type = FF_IDCT_PERM_NONE;",
          "257:     } else {",
          "258:         if (avctx->bits_per_raw_sample == 10 || avctx->bits_per_raw_sample == 9) {",
          "262:             c->perm_type             = FF_IDCT_PERM_NONE;",
          "263:         } else if (avctx->bits_per_raw_sample == 12) {",
          "264:             c->idct_put              = ff_simple_idct_put_int16_12bit;",
          "",
          "[Removed Lines]",
          "259:             c->idct_put              = ff_simple_idct_put_int16_10bit;",
          "260:             c->idct_add              = ff_simple_idct_add_int16_10bit;",
          "261:             c->idct                  = ff_simple_idct_int16_10bit;",
          "",
          "[Added Lines]",
          "261:             if (avctx->codec_id == AV_CODEC_ID_MPEG4 && avctx->profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO)",
          "262:                 c->idct_put              = ff_simple_idct_put_int32_10bit;",
          "263:             else {",
          "264:                 c->idct_put              = ff_simple_idct_put_int16_10bit;",
          "265:                 c->idct_add              = ff_simple_idct_add_int16_10bit;",
          "266:                 c->idct                  = ff_simple_idct_int16_10bit;",
          "267:             }",
          "",
          "---------------"
        ],
        "libavcodec/ituh263dec.c||libavcodec/ituh263dec.c": [
          "File: libavcodec/ituh263dec.c -> libavcodec/ituh263dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207: }",
          "213: int ff_h263_resync(MpegEncContext *s){",
          "214:     int left, pos, ret;",
          "216:     if(s->codec_id==AV_CODEC_ID_MPEG4){",
          "217:         skip_bits1(&s->gb);",
          "218:         align_get_bits(&s->gb);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "218:     if(s->codec_id==AV_CODEC_ID_MPEG4 && s->studio_profile) {",
          "219:         align_get_bits(&s->gb);",
          "221:         while (get_bits_left(&s->gb) >= 32 && show_bits_long(&s->gb, 32) != SLICE_START_CODE) {",
          "222:             get_bits(&s->gb, 8);",
          "223:         }",
          "225:         if (show_bits_long(&s->gb, 32) == SLICE_START_CODE)",
          "226:             return get_bits_count(&s->gb);",
          "227:         else",
          "228:             return -1;",
          "229:     }",
          "",
          "---------------"
        ],
        "libavcodec/mpeg12dec.c||libavcodec/mpeg12dec.c": [
          "File: libavcodec/mpeg12dec.c -> libavcodec/mpeg12dec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "649:         return 0;",
          "650: }",
          "663: #define MT_FIELD 1",
          "664: #define MT_FRAME 2",
          "",
          "[Removed Lines]",
          "652: static inline int get_qscale(MpegEncContext *s)",
          "653: {",
          "654:     int qscale = get_bits(&s->gb, 5);",
          "655:     if (s->q_scale_type)",
          "656:         return ff_mpeg2_non_linear_qscale[qscale];",
          "657:     else",
          "658:         return qscale << 1;",
          "659: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "751:             s->interlaced_dct = get_bits1(&s->gb);",
          "753:         if (IS_QUANT(mb_type))",
          "756:         if (s->concealment_motion_vectors) {",
          "",
          "[Removed Lines]",
          "754:             s->qscale = get_qscale(s);",
          "",
          "[Added Lines]",
          "744:             s->qscale = mpeg_get_qscale(s);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "819:             }",
          "821:             if (IS_QUANT(mb_type))",
          "824:             s->last_mv[0][0][0] = 0;",
          "825:             s->last_mv[0][0][1] = 0;",
          "",
          "[Removed Lines]",
          "822:                 s->qscale = get_qscale(s);",
          "",
          "[Added Lines]",
          "812:                 s->qscale = mpeg_get_qscale(s);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "840:             }",
          "842:             if (IS_QUANT(mb_type))",
          "846:             s->mv_dir = (mb_type >> 13) & 3;",
          "",
          "[Removed Lines]",
          "843:                 s->qscale = get_qscale(s);",
          "",
          "[Added Lines]",
          "833:                 s->qscale = mpeg_get_qscale(s);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1728:     ff_mpeg1_clean_buffers(s);",
          "1729:     s->interlaced_dct = 0;",
          "1733:     if (s->qscale == 0) {",
          "1734:         av_log(s->avctx, AV_LOG_ERROR, \"qscale == 0\\n\");",
          "",
          "[Removed Lines]",
          "1731:     s->qscale = get_qscale(s);",
          "",
          "[Added Lines]",
          "1721:     s->qscale = mpeg_get_qscale(s);",
          "",
          "---------------"
        ],
        "libavcodec/mpeg4data.h||libavcodec/mpeg4data.h": [
          "File: libavcodec/mpeg4data.h -> libavcodec/mpeg4data.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:     99, 13, 15, 17, 19, 21, 23, 0",
          "374: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "377: const uint16_t ff_mpeg4_studio_dc_luma[19][2]={",
          "378:     {0x0e,  6}, {0x06,  5}, {0x00,  4}, {0x02,  4},",
          "379:     {0x07,  3}, {0x05,  3}, {0x03,  3}, {0x02,  3},",
          "380:     {0x04,  3}, {0x06,  3}, {0x01,  4}, {0x1e,  7},",
          "381:     {0x3e,  8}, {0x7e,  9}, {0xfe, 10}, {0x1fe, 11},",
          "382:     {0x3fe, 12}, {0x7fe, 13}, {0x7ff, 13}",
          "383: };",
          "385: const uint16_t ff_mpeg4_studio_dc_chroma[19][2]={",
          "386:     {0x00,  4}, {0x02,  4}, {0x07,  3}, {0x05,  3},",
          "387:     {0x03,  3}, {0x02,  3}, {0x04,  3}, {0x06,  3},",
          "388:     {0x01,  4}, {0x06,  5}, {0x0e,  6}, {0x1e,  7},",
          "389:     {0x3e,  8}, {0x7e,  9}, {0xfe, 10}, {0x1fe, 11},",
          "390:     {0x3fe, 12}, {0x7fe, 13}, {0x7ff, 13}",
          "391: };",
          "393: const uint16_t ff_mpeg4_studio_intra[12][22][2]={",
          "394:     {",
          "395:         {0x05,  4}, {0x04,  4}, {0x05,  7}, {0x09,  9},",
          "396:         {0x21, 11}, {0x41, 12}, {0x81, 13}, {0x03,  4},",
          "397:         {0x03,  5}, {0x05,  6}, {0x04,  7}, {0x03,  7},",
          "398:         {0x05,  8}, {0x03,  2}, {0x05,  3}, {0x04,  3},",
          "399:         {0x03,  3}, {0x02,  4}, {0x04,  6}, {0x03,  6},",
          "400:         {0x11, 10}, {0x80, 13}",
          "401:     },",
          "402:     {",
          "403:         {0x00,  0}, {0x00,  0}, {0x00,  0}, {0x00,  0},",
          "404:         {0x00,  0}, {0x00,  0}, {0x00,  0}, {0x00,  0},",
          "405:         {0x00,  0}, {0x00,  0}, {0x00,  0}, {0x00,  0},",
          "406:         {0x00,  0}, {0x00,  0}, {0x01,  1}, {0x01,  2},",
          "407:         {0x01,  3}, {0x01,  4}, {0x01,  5}, {0x03,  7},",
          "408:         {0x05,  8}, {0x04,  8}",
          "409:     },",
          "410:     {",
          "411:         {0x05,  3},  {0x03,  5},  {0x02,  5},  {0x03,  7},",
          "412:         {0x09,  9},  {0x103, 14}, {0x102, 14}, {0x04,  3},",
          "413:         {0x03,  3},  {0x03,  4},  {0x02,  4},  {0x03,  6},",
          "414:         {0x11, 10},  {0x03,  2},  {0x02,  3},  {0x02,  6},",
          "415:         {0x05,  8},  {0x21, 11},  {0x83, 13},  {0x101, 14},",
          "416:         {0x201, 15}, {0x82, 13}",
          "417:     },",
          "418:     {",
          "419:         {0x05,  5}, {0x05,  4}, {0x04,  5}, {0x03,  6},",
          "420:         {0x09,  9}, {0x83, 13}, {0x82, 13}, {0x03,  3},",
          "421:         {0x04,  4}, {0x03,  4}, {0x03,  5}, {0x05,  8},",
          "422:         {0x81, 13}, {0x03,  2}, {0x02,  2}, {0x02,  5},",
          "423:         {0x02,  6}, {0x03,  7}, {0x11, 10}, {0x43, 12},",
          "424:         {0x80, 13}, {0x42, 12}",
          "425:     },",
          "426:     {",
          "427:         {0x05,  7},  {0x03,  4}, {0x03,  5},  {0x04,  7},",
          "428:         {0x09,  9},  {0x83, 13}, {0x101, 14}, {0x03,  3},",
          "429:         {0x02,  4},  {0x05,  6}, {0x03,  7},  {0x11, 10},",
          "430:         {0x201, 15}, {0x03,  2}, {0x02,  2},  {0x02,  3},",
          "431:         {0x04,  6},  {0x03,  6}, {0x05,  8},  {0x21, 11},",
          "432:         {0x82, 13},  {0x81, 13}",
          "433:     },",
          "434:     {",
          "435:         {0x13, 10},  {0x03,  5}, {0x05,  7}, {0x12, 10},",
          "436:         {0x43, 12},  {0x83, 13}, {0x82, 13}, {0x02,  5},",
          "437:         {0x04,  7},  {0x05,  8}, {0x23, 11}, {0x81, 13},",
          "438:         {0x101, 14}, {0x03,  2}, {0x02,  2}, {0x01,  2},",
          "439:         {0x01,  3},  {0x03,  6}, {0x03,  7}, {0x22, 11},",
          "440:         {0x201, 15}, {0x42, 12}",
          "441:     },",
          "442:     {",
          "443:         {0x23, 11},  {0x01,  4},  {0x07,  8},  {0x13, 10},",
          "444:         {0x22, 11},  {0x103, 14}, {0x102, 14}, {0x03,  6},",
          "445:         {0x06,  8},  {0x12, 10},  {0x43, 12},  {0x101, 14},",
          "446:         {0x201, 15}, {0x03,  3},  {0x02,  3},  {0x03,  2},",
          "447:         {0x02,  2},  {0x01,  3},  {0x02,  6},  {0x05,  8},",
          "448:         {0x42, 12},  {0x41, 12}",
          "449:     },",
          "450:     {",
          "451:         {0x0b,  9}, {0x03,  5}, {0x07,  8}, {0x07,  7},",
          "452:         {0x06,  7}, {0x23, 11}, {0x41, 12}, {0x05,  7},",
          "453:         {0x06,  8}, {0x0a,  9}, {0x13, 10}, {0x22, 11},",
          "454:         {0x40, 12}, {0x03,  4}, {0x02,  4}, {0x03,  2},",
          "455:         {0x02,  2}, {0x01,  2}, {0x02,  5}, {0x04,  7},",
          "456:         {0x12, 10}, {0x21, 11}",
          "457:     },",
          "458:     {",
          "459:         {0x15, 10}, {0x03,  6}, {0x14, 10}, {0x23, 11},",
          "460:         {0x07,  8}, {0x43, 12}, {0x81, 13}, {0x06,  8},",
          "461:         {0x0b,  9}, {0x13, 10}, {0x12, 10}, {0x42, 12},",
          "462:         {0x80, 13}, {0x01,  4}, {0x03,  3}, {0x02,  3},",
          "463:         {0x03,  2}, {0x02,  2}, {0x01,  3}, {0x02,  6},",
          "464:         {0x22, 11}, {0x41, 12}",
          "465:     },",
          "466:     {",
          "467:         {0x43, 12}, {0x05,  6}, {0x07,  8}, {0x04,  6},",
          "468:         {0x03,  6}, {0x13, 10}, {0x42, 12}, {0x05,  7},",
          "469:         {0x04,  7}, {0x06,  8}, {0x12, 10}, {0x41, 12},",
          "470:         {0x40, 12}, {0x03,  5}, {0x03,  4}, {0x03,  3},",
          "471:         {0x02,  3}, {0x03,  2}, {0x02,  2}, {0x02,  4},",
          "472:         {0x05,  8}, {0x11, 10}",
          "473:     },",
          "474:     {",
          "475:         {0x83, 13}, {0x05,  7}, {0x07,  8}, {0x03,  4},",
          "476:         {0x21, 11}, {0x82, 13}, {0x81, 13}, {0x04,  7},",
          "477:         {0x06,  8}, {0x0b,  9}, {0x0a,  9}, {0x11, 10},",
          "478:         {0x80, 13}, {0x03,  5}, {0x02,  5}, {0x02,  4},",
          "479:         {0x03,  3}, {0x02,  3}, {0x03,  2}, {0x02,  2},",
          "480:         {0x03,  6}, {0x09,  9}",
          "481:     },",
          "482:     {",
          "483:         {0x13, 10}, {0x03,  5}, {0x03,  6}, {0x0d,  9},",
          "484:         {0x0c,  9}, {0x21, 11}, {0x20, 11}, {0x02,  5},",
          "485:         {0x02,  6}, {0x07,  8}, {0x0b,  9}, {0x12, 10},",
          "486:         {0x11, 10}, {0x05,  3}, {0x04,  3}, {0x05,  4},",
          "487:         {0x04,  4}, {0x03,  4}, {0x02,  4}, {0x03,  3},",
          "488:         {0x03,  2}, {0x0a,  9}",
          "489:     }",
          "490: };",
          "",
          "---------------"
        ],
        "libavcodec/mpeg4video.h||libavcodec/mpeg4video.h": [
          "File: libavcodec/mpeg4video.h -> libavcodec/mpeg4video.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: #define GOP_STARTCODE        0x1B3",
          "62: #define VISUAL_OBJ_STARTCODE 0x1B5",
          "63: #define VOP_STARTCODE        0x1B6",
          "66: #define MAX_NVOP_SIZE 19",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64: #define SLICE_STARTCODE      0x1B7",
          "65: #define EXT_STARTCODE        0x1B8",
          "67: #define QUANT_MATRIX_EXT_ID  0x3",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     int cplx_estimation_trash_i;",
          "109:     int cplx_estimation_trash_p;",
          "110:     int cplx_estimation_trash_b;",
          "111: } Mpeg4DecContext;",
          "114: extern const uint8_t ff_mpeg4_DCtab_lum[13][2];",
          "115: extern const uint8_t ff_mpeg4_DCtab_chrom[13][2];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "116:     VLC studio_intra_tab[12];",
          "117:     VLC studio_luma_dc;",
          "118:     VLC studio_chroma_dc;",
          "120:     int rgb;",
          "123: static const uint8_t mpeg4_block_count[4] = {0, 6, 8, 12};",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "138: extern const uint8_t ff_mpeg4_dc_threshold[8];",
          "140: void ff_mpeg4_encode_mb(MpegEncContext *s,",
          "141:                         int16_t block[6][64],",
          "142:                         int motion_x, int motion_y);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "152: extern const uint16_t ff_mpeg4_studio_dc_luma[19][2];",
          "153: extern const uint16_t ff_mpeg4_studio_dc_chroma[19][2];",
          "154: extern const uint16_t ff_mpeg4_studio_intra[12][22][2];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "155: int ff_mpeg4_decode_partitions(Mpeg4DecContext *ctx);",
          "156: int ff_mpeg4_get_video_packet_prefix_length(MpegEncContext *s);",
          "157: int ff_mpeg4_decode_video_packet_header(Mpeg4DecContext *ctx);",
          "158: void ff_mpeg4_init_direct_mv(MpegEncContext *s);",
          "159: void ff_mpeg4videodec_static_init(void);",
          "160: int ff_mpeg4_workaround_bugs(AVCodecContext *avctx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "174: int ff_mpeg4_decode_studio_slice_header(Mpeg4DecContext *ctx);",
          "",
          "---------------"
        ],
        "libavcodec/mpeg4videodec.c||libavcodec/mpeg4videodec.c": [
          "File: libavcodec/mpeg4videodec.c -> libavcodec/mpeg4videodec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: #define SPRITE_TRAJ_VLC_BITS 6",
          "45: #define DC_VLC_BITS 9",
          "46: #define MB_TYPE_B_VLC_BITS 4",
          "48: static VLC dc_lum, dc_chrom;",
          "49: static VLC sprite_trajectory;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47: #define STUDIO_INTRA_BITS 9",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "528:     return 0;",
          "529: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "532: static void reset_studio_dc_predictors(MpegEncContext *s)",
          "533: {",
          "535:     s->last_dc[0] =",
          "536:     s->last_dc[1] =",
          "537:     s->last_dc[2] = 1 << (s->avctx->bits_per_raw_sample + s->dct_precision + s->intra_dc_precision - 1);",
          "538: }",
          "544: int ff_mpeg4_decode_studio_slice_header(Mpeg4DecContext *ctx)",
          "545: {",
          "546:     MpegEncContext *s = &ctx->m;",
          "547:     GetBitContext *gb = &s->gb;",
          "548:     unsigned vlc_len;",
          "549:     uint16_t mb_num;",
          "551:     if (get_bits_left(gb) >= 32 && get_bits_long(gb, 32) == SLICE_START_CODE) {",
          "552:         vlc_len = av_log2(s->mb_width * s->mb_height) + 1;",
          "553:         mb_num = get_bits(gb, vlc_len);",
          "555:         if (mb_num >= s->mb_num)",
          "556:             return AVERROR_INVALIDDATA;",
          "558:         s->mb_x = mb_num % s->mb_width;",
          "559:         s->mb_y = mb_num / s->mb_width;",
          "561:         if (ctx->shape != BIN_ONLY_SHAPE)",
          "562:             s->qscale = mpeg_get_qscale(s);",
          "570:         }",
          "572:         reset_studio_dc_predictors(s);",
          "573:     }",
          "574:     else {",
          "575:         return AVERROR_INVALIDDATA;",
          "576:     }",
          "578:     return 0;",
          "579: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1723:     return SLICE_OK;",
          "1724: }",
          "1726: static int mpeg4_decode_gop_header(MpegEncContext *s, GetBitContext *gb)",
          "1727: {",
          "1728:     int hours, minutes, seconds;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1777: static void next_start_code_studio(GetBitContext *gb)",
          "1778: {",
          "1779:     align_get_bits(gb);",
          "1781:     while (get_bits_left(gb) >= 24 && show_bits_long(gb, 24) != 0x1) {",
          "1782:         get_bits(gb, 8);",
          "1783:     }",
          "1784: }",
          "1787: static const uint8_t ac_state_tab[22][2] =",
          "1788: {",
          "1789:     {0, 0},",
          "1790:     {0, 1},",
          "1791:     {1, 1},",
          "1792:     {2, 1},",
          "1793:     {3, 1},",
          "1794:     {4, 1},",
          "1795:     {5, 1},",
          "1796:     {1, 2},",
          "1797:     {2, 2},",
          "1798:     {3, 2},",
          "1799:     {4, 2},",
          "1800:     {5, 2},",
          "1801:     {6, 2},",
          "1802:     {1, 3},",
          "1803:     {2, 4},",
          "1804:     {3, 5},",
          "1805:     {4, 6},",
          "1806:     {5, 7},",
          "1807:     {6, 8},",
          "1808:     {7, 9},",
          "1809:     {8, 10},",
          "1810:     {0, 11}",
          "1811: };",
          "1813: static int mpeg4_decode_studio_block(MpegEncContext *s, int32_t block[64], int n)",
          "1814: {",
          "1815:     Mpeg4DecContext *ctx = s->avctx->priv_data;",
          "1817:     int cc, dct_dc_size, dct_diff, code, j, idx = 1, group = 0, run = 0,",
          "1818:         additional_code_len, sign, mismatch;",
          "1819:     VLC *cur_vlc = &ctx->studio_intra_tab[0];",
          "1820:     uint8_t *const scantable = s->intra_scantable.permutated;",
          "1821:     const uint16_t *quant_matrix;",
          "1822:     uint32_t flc;",
          "1823:     const int min = -1 *  (1 << (s->avctx->bits_per_raw_sample + 6));",
          "1824:     const int max =      ((1 << (s->avctx->bits_per_raw_sample + 6)) - 1);",
          "1826:     mismatch = 1;",
          "1828:     memset(block, 0, 64 * sizeof(int32_t));",
          "1830:     if (n < 4) {",
          "1831:         cc = 0;",
          "1832:         dct_dc_size = get_vlc2(&s->gb, ctx->studio_luma_dc.table, STUDIO_INTRA_BITS, 2);",
          "1833:         quant_matrix = s->intra_matrix;",
          "1834:     } else {",
          "1835:         cc = (n & 1) + 1;",
          "1836:         if (ctx->rgb)",
          "1837:             dct_dc_size = get_vlc2(&s->gb, ctx->studio_luma_dc.table, STUDIO_INTRA_BITS, 2);",
          "1838:         else",
          "1839:             dct_dc_size = get_vlc2(&s->gb, ctx->studio_chroma_dc.table, STUDIO_INTRA_BITS, 2);",
          "1840:         quant_matrix = s->chroma_intra_matrix;",
          "1841:     }",
          "1843:     if (dct_dc_size < 0) {",
          "1844:         av_log(s->avctx, AV_LOG_ERROR, \"illegal dct_dc_size vlc\\n\");",
          "1845:         return AVERROR_INVALIDDATA;",
          "1846:     } else if (dct_dc_size == 0) {",
          "1847:         dct_diff = 0;",
          "1848:     } else {",
          "1849:         dct_diff = get_xbits(&s->gb, dct_dc_size);",
          "1851:         if (dct_dc_size > 8) {",
          "1852:             if(!check_marker(s->avctx, &s->gb, \"dct_dc_size > 8\"))",
          "1853:                 return AVERROR_INVALIDDATA;",
          "1854:         }",
          "1856:     }",
          "1858:     s->last_dc[cc] += dct_diff;",
          "1860:     if (s->mpeg_quant)",
          "1861:         block[0] = s->last_dc[cc] * (8 >> s->intra_dc_precision);",
          "1862:     else",
          "1863:         block[0] = s->last_dc[cc] * (8 >> s->intra_dc_precision) * (8 >> s->dct_precision);",
          "1866:     block[0] = av_clip(block[0], min, max);",
          "1867:     mismatch ^= block[0];",
          "1870:     while (1) {",
          "1871:         group = get_vlc2(&s->gb, cur_vlc->table, STUDIO_INTRA_BITS, 2);",
          "1873:         if (group < 0) {",
          "1874:             av_log(s->avctx, AV_LOG_ERROR, \"illegal ac coefficient group vlc\\n\");",
          "1875:             return AVERROR_INVALIDDATA;",
          "1876:         }",
          "1878:         additional_code_len = ac_state_tab[group][0];",
          "1879:         cur_vlc = &ctx->studio_intra_tab[ac_state_tab[group][1]];",
          "1881:         if (group == 0) {",
          "1883:             break;",
          "1884:         } else if (group >= 1 && group <= 6) {",
          "1886:             run = 1 << additional_code_len;",
          "1887:             if (additional_code_len)",
          "1888:                 run += get_bits(&s->gb, additional_code_len);",
          "1889:             idx += run;",
          "1890:             continue;",
          "1891:         } else if (group >= 7 && group <= 12) {",
          "1893:             code = get_bits(&s->gb, additional_code_len);",
          "1894:             sign = code & 1;",
          "1895:             code >>= 1;",
          "1896:             run = (1 << (additional_code_len - 1)) + code;",
          "1897:             idx += run;",
          "1898:             j = scantable[idx++];",
          "1899:             block[j] = sign ? 1 : -1;",
          "1900:         } else if (group >= 13 && group <= 20) {",
          "1902:             j = scantable[idx++];",
          "1903:             block[j] = get_xbits(&s->gb, additional_code_len);",
          "1904:         } else if (group == 21) {",
          "1906:             j = scantable[idx++];",
          "1907:             additional_code_len = s->avctx->bits_per_raw_sample + s->dct_precision + 4;",
          "1908:             flc = get_bits(&s->gb, additional_code_len);",
          "1909:             if (flc >> (additional_code_len-1))",
          "1910:                 block[j] = -1 * (( flc ^ ((1 << additional_code_len) -1)) + 1);",
          "1911:             else",
          "1912:                 block[j] = flc;",
          "1913:         }",
          "1914:         block[j] = ((8 * 2 * block[j] * quant_matrix[j] * s->qscale) >> s->dct_precision) / 32;",
          "1915:         block[j] = av_clip(block[j], min, max);",
          "1916:         mismatch ^= block[j];",
          "1917:     }",
          "1919:     block[63] ^= mismatch & 1;",
          "1921:     return 0;",
          "1922: }",
          "1924: static int mpeg4_decode_studio_mb(MpegEncContext *s, int16_t block_[12][64])",
          "1925: {",
          "1926:     int i;",
          "1930:     s->mb_intra = 1;",
          "1934:         if (!get_bits1(&s->gb)) {",
          "1935:             skip_bits1(&s->gb);",
          "1936:             s->qscale = mpeg_get_qscale(s);",
          "1937:         }",
          "1939:         for (i = 0; i < mpeg4_block_count[s->chroma_format]; i++) {",
          "1940:             if (mpeg4_decode_studio_block(s, (*s->block32)[i], i) < 0)",
          "1941:                 return AVERROR_INVALIDDATA;",
          "1942:         }",
          "1943:     } else {",
          "1945:         check_marker(s->avctx, &s->gb, \"DPCM block start\");",
          "1946:         avpriv_request_sample(s->avctx, \"DPCM encoded block\");",
          "1947:         next_start_code_studio(&s->gb);",
          "1948:         return SLICE_ERROR;",
          "1949:     }",
          "1951:     if (get_bits_left(&s->gb) >= 24 && show_bits(&s->gb, 23) == 0) {",
          "1952:         next_start_code_studio(&s->gb);",
          "1953:         return SLICE_END;",
          "1954:     }",
          "1956:     return SLICE_OK;",
          "1957: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1791:     return 0;",
          "1792: }",
          "1794: static int decode_vol_header(Mpeg4DecContext *ctx, GetBitContext *gb)",
          "1795: {",
          "1796:     MpegEncContext *s = &ctx->m;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2027: static void mpeg4_load_default_matrices(MpegEncContext *s)",
          "2028: {",
          "2029:     int i, v;",
          "2032:     for (i = 0; i < 64; i++) {",
          "2033:         int j = s->idsp.idct_permutation[i];",
          "2034:         v = ff_mpeg4_default_intra_matrix[i];",
          "2035:         s->intra_matrix[j]        = v;",
          "2036:         s->chroma_intra_matrix[j] = v;",
          "2038:         v = ff_mpeg4_default_non_intra_matrix[i];",
          "2039:         s->inter_matrix[j]        = v;",
          "2040:         s->chroma_inter_matrix[j] = v;",
          "2041:     }",
          "2042: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1955:             int i, v;",
          "1970:             if (get_bits1(gb)) {",
          "",
          "[Removed Lines]",
          "1958:             for (i = 0; i < 64; i++) {",
          "1959:                 int j = s->idsp.idct_permutation[i];",
          "1960:                 v = ff_mpeg4_default_intra_matrix[i];",
          "1961:                 s->intra_matrix[j]        = v;",
          "1962:                 s->chroma_intra_matrix[j] = v;",
          "1964:                 v = ff_mpeg4_default_non_intra_matrix[i];",
          "1965:                 s->inter_matrix[j]        = v;",
          "1966:                 s->chroma_inter_matrix[j] = v;",
          "1967:             }",
          "",
          "[Added Lines]",
          "2207:             mpeg4_load_default_matrices(s);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2608:     return 0;",
          "2609: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2851: static void read_quant_matrix_ext(MpegEncContext *s, GetBitContext *gb)",
          "2852: {",
          "2853:     int i, j, v;",
          "2855:     if (get_bits1(gb)) {",
          "2857:         for (i = 0; i < 64; i++) {",
          "2858:             v = get_bits(gb, 8);",
          "2859:             j = s->idsp.idct_permutation[ff_zigzag_direct[i]];",
          "2860:             s->intra_matrix[j]        = v;",
          "2861:             s->chroma_intra_matrix[j] = v;",
          "2862:         }",
          "2863:     }",
          "2865:     if (get_bits1(gb)) {",
          "2867:         for (i = 0; i < 64; i++) {",
          "2868:             get_bits(gb, 8);",
          "2869:         }",
          "2870:     }",
          "2872:     if (get_bits1(gb)) {",
          "2874:         for (i = 0; i < 64; i++) {",
          "2875:             v = get_bits(gb, 8);",
          "2876:             j = s->idsp.idct_permutation[ff_zigzag_direct[i]];",
          "2877:             s->chroma_intra_matrix[j] = v;",
          "2878:         }",
          "2879:     }",
          "2881:     if (get_bits1(gb)) {",
          "2883:         for (i = 0; i < 64; i++) {",
          "2884:             get_bits(gb, 8);",
          "2885:         }",
          "2886:     }",
          "2888:     next_start_code_studio(gb);",
          "2889: }",
          "2891: static void extension_and_user_data(MpegEncContext *s, GetBitContext *gb, int id)",
          "2892: {",
          "2893:     uint32_t startcode;",
          "2894:     uint8_t extension_type;",
          "2896:     startcode = show_bits_long(gb, 32);",
          "2897:     if (startcode == USER_DATA_STARTCODE || startcode == EXT_STARTCODE) {",
          "2899:         if ((id == 2 || id == 4) && startcode == EXT_STARTCODE) {",
          "2900:             skip_bits_long(gb, 32);",
          "2901:             extension_type = get_bits(gb, 4);",
          "2902:             if (extension_type == QUANT_MATRIX_EXT_ID)",
          "2903:                 read_quant_matrix_ext(s, gb);",
          "2904:         }",
          "2905:     }",
          "2906: }",
          "2908: static void decode_smpte_tc(Mpeg4DecContext *ctx, GetBitContext *gb)",
          "2909: {",
          "2910:     MpegEncContext *s = &ctx->m;",
          "2913:     check_marker(s->avctx, gb, \"after Time_code[63..48]\");",
          "2915:     check_marker(s->avctx, gb, \"after Time_code[47..32]\");",
          "2917:     check_marker(s->avctx, gb, \"after Time_code[31..16]\");",
          "2919:     check_marker(s->avctx, gb, \"after Time_code[15..0]\");",
          "2921: }",
          "2927: static int decode_studio_vop_header(Mpeg4DecContext *ctx, GetBitContext *gb)",
          "2928: {",
          "2929:     MpegEncContext *s = &ctx->m;",
          "2931:     if (get_bits_left(gb) <= 32)",
          "2932:         return 0;",
          "2934:     if (get_bits_long(gb, 32) != VOP_STARTCODE)",
          "2935:         return AVERROR_INVALIDDATA;",
          "2937:     s->decode_mb = mpeg4_decode_studio_mb;",
          "2939:     decode_smpte_tc(ctx, gb);",
          "2948:     }",
          "2950:     if (s->pict_type == AV_PICTURE_TYPE_I) {",
          "2951:         if (get_bits1(gb))",
          "2952:             reset_studio_dc_predictors(s);",
          "2953:     }",
          "2955:     if (ctx->shape != BIN_ONLY_SHAPE) {",
          "2956:         s->alternate_scan = get_bits1(gb);",
          "2957:         s->frame_pred_frame_dct = get_bits1(gb);",
          "2958:         s->dct_precision = get_bits(gb, 2);",
          "2959:         s->intra_dc_precision = get_bits(gb, 2);",
          "2960:         s->q_scale_type = get_bits1(gb);",
          "2961:     }",
          "2963:     if (s->alternate_scan) {",
          "2964:         ff_init_scantable(s->idsp.idct_permutation, &s->inter_scantable,   ff_alternate_vertical_scan);",
          "2965:         ff_init_scantable(s->idsp.idct_permutation, &s->intra_scantable,   ff_alternate_vertical_scan);",
          "2966:         ff_init_scantable(s->idsp.idct_permutation, &s->intra_h_scantable, ff_alternate_vertical_scan);",
          "2967:         ff_init_scantable(s->idsp.idct_permutation, &s->intra_v_scantable, ff_alternate_vertical_scan);",
          "2968:     } else {",
          "2969:         ff_init_scantable(s->idsp.idct_permutation, &s->inter_scantable,   ff_zigzag_direct);",
          "2970:         ff_init_scantable(s->idsp.idct_permutation, &s->intra_scantable,   ff_zigzag_direct);",
          "2971:         ff_init_scantable(s->idsp.idct_permutation, &s->intra_h_scantable, ff_alternate_horizontal_scan);",
          "2972:         ff_init_scantable(s->idsp.idct_permutation, &s->intra_v_scantable, ff_alternate_vertical_scan);",
          "2973:     }",
          "2975:     mpeg4_load_default_matrices(s);",
          "2977:     next_start_code_studio(gb);",
          "2978:     extension_and_user_data(s, gb, 4);",
          "2980:     return 0;",
          "2981: }",
          "2983: static int decode_studiovisualobject(Mpeg4DecContext *ctx, GetBitContext *gb)",
          "2984: {",
          "2985:     uint32_t startcode;",
          "2986:     MpegEncContext *s = &ctx->m;",
          "2987:     int visual_object_type, width, height;",
          "2989:     startcode = get_bits_long(gb, 32);",
          "2992:     if (startcode == VISUAL_OBJ_STARTCODE) {",
          "2994:         visual_object_type = get_bits(gb, 4);",
          "2996:         next_start_code_studio(gb);",
          "2997:         extension_and_user_data(s, gb, 1);",
          "2999:         if (visual_object_type == VOT_VIDEO_ID) {",
          "3009:             if (ctx->shape != BIN_ONLY_SHAPE) {",
          "3012:                 if (!s->chroma_format) {",
          "3013:                     av_log(s->avctx, AV_LOG_ERROR, \"illegal chroma format\\n\");",
          "3014:                     return AVERROR_INVALIDDATA;",
          "3015:                 }",
          "3018:                 if (s->avctx->bits_per_raw_sample == 10) {",
          "3019:                     if (ctx->rgb) {",
          "3020:                         s->avctx->pix_fmt = AV_PIX_FMT_GBRP10;",
          "3021:                     }",
          "3022:                     else {",
          "3023:                         s->avctx->pix_fmt = s->chroma_format == CHROMA_422 ? AV_PIX_FMT_YUV422P10 : AV_PIX_FMT_YUV444P10;",
          "3024:                     }",
          "3025:                 }",
          "3026:                 else {",
          "3027:                     avpriv_request_sample(s->avctx, \"MPEG-4 Studio profile bit-depth %u\", s->avctx->bits_per_raw_sample);",
          "3028:                     return AVERROR_PATCHWELCOME;",
          "3029:                 }",
          "3030:             }",
          "3031:             if (ctx->shape == RECT_SHAPE) {",
          "3032:                 check_marker(s->avctx, gb, \"before video_object_layer_width\");",
          "3034:                 check_marker(s->avctx, gb, \"before video_object_layer_height\");",
          "3036:                 check_marker(s->avctx, gb, \"after video_object_layer_height\");",
          "3039:                 if (width && height) {",
          "3040:                     if (s->width && s->height &&",
          "3041:                         (s->width != width || s->height != height))",
          "3042:                         s->context_reinit = 1;",
          "3043:                     s->width  = width;",
          "3044:                     s->height = height;",
          "3045:                 }",
          "3046:             }",
          "3047:             s->aspect_ratio_info = get_bits(gb, 4);",
          "3048:             if (s->aspect_ratio_info == FF_ASPECT_EXTENDED) {",
          "3049:                 s->avctx->sample_aspect_ratio.num = get_bits(gb, 8);  // par_width",
          "3050:                 s->avctx->sample_aspect_ratio.den = get_bits(gb, 8);  // par_height",
          "3051:             } else {",
          "3052:                 s->avctx->sample_aspect_ratio = ff_h263_pixel_aspect[s->aspect_ratio_info];",
          "3053:             }",
          "3056:             check_marker(s->avctx, gb, \"after first_half_bit_rate\");",
          "3058:             check_marker(s->avctx, gb, \"after latter_half_bit_rate\");",
          "3060:             check_marker(s->avctx, gb, \"after first_half_vbv_buffer_size\");",
          "3063:             check_marker(s->avctx, gb, \"after first_half_vbv_buffer_size\");",
          "3065:             check_marker(s->avctx, gb, \"after latter_half_vbv_occupancy\");",
          "3066:             s->low_delay = get_bits1(gb);",
          "3069:             next_start_code_studio(gb);",
          "3070:             extension_and_user_data(s, gb, 2);",
          "3071:         }",
          "3072:     }",
          "3074:     return 0;",
          "3075: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2721:             mpeg4_decode_gop_header(s, gb);",
          "2722:         } else if (startcode == VOS_STARTCODE) {",
          "2723:             mpeg4_decode_profile_level(s, gb);",
          "2724:         } else if (startcode == VISUAL_OBJ_STARTCODE) {",
          "2725:             mpeg4_decode_visual_object(s, gb);",
          "2726:         } else if (startcode == VOP_STARTCODE) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3190:             if (s->avctx->profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO &&",
          "3191:                 (s->avctx->level > 0 && s->avctx->level < 9)) {",
          "3192:                 s->studio_profile = 1;",
          "3193:                 next_start_code_studio(gb);",
          "3194:                 extension_and_user_data(s, gb, 0);",
          "3196:                 if ((ret = decode_studiovisualobject(ctx, gb)) < 0)",
          "3197:                     return ret;",
          "3198:                 break;",
          "3199:             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2736:         s->low_delay = 1;",
          "2737:     s->avctx->has_b_frames = !s->low_delay;",
          "2740: }",
          "2742: av_cold void ff_mpeg4videodec_static_init(void) {",
          "",
          "[Removed Lines]",
          "2739:     return decode_vop_header(ctx, gb);",
          "",
          "[Added Lines]",
          "3215:     if (s->studio_profile)",
          "3216:         return decode_studio_vop_header(ctx, gb);",
          "3217:     else",
          "3218:         return decode_vop_header(ctx, gb);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2836: }",
          "2837: #endif",
          "2839: static av_cold int decode_init(AVCodecContext *avctx)",
          "2840: {",
          "2841:     Mpeg4DecContext *ctx = avctx->priv_data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3318: static av_cold int init_studio_vlcs(Mpeg4DecContext *ctx)",
          "3319: {",
          "3320:     int i, ret;",
          "3322:     for (i = 0; i < 12; i++) {",
          "3323:         ret = init_vlc(&ctx->studio_intra_tab[i], STUDIO_INTRA_BITS, 22,",
          "3324:                        &ff_mpeg4_studio_intra[i][0][1], 4, 2,",
          "3325:                        &ff_mpeg4_studio_intra[i][0][0], 4, 2,",
          "3326:                        0);",
          "3328:         if (ret < 0)",
          "3329:             return ret;",
          "3330:     }",
          "3332:     ret = init_vlc(&ctx->studio_luma_dc, STUDIO_INTRA_BITS, 19,",
          "3333:                    &ff_mpeg4_studio_dc_luma[0][1], 4, 2,",
          "3334:                    &ff_mpeg4_studio_dc_luma[0][0], 4, 2,",
          "3335:                    0);",
          "3336:     if (ret < 0)",
          "3337:         return ret;",
          "3339:     ret = init_vlc(&ctx->studio_chroma_dc, STUDIO_INTRA_BITS, 19,",
          "3340:                    &ff_mpeg4_studio_dc_chroma[0][1], 4, 2,",
          "3341:                    &ff_mpeg4_studio_dc_chroma[0][0], 4, 2,",
          "3342:                    0);",
          "3343:     if (ret < 0)",
          "3344:         return ret;",
          "3346:     return 0;",
          "3347: }",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2851:         return ret;",
          "2853:     ff_mpeg4videodec_static_init();",
          "2855:     s->h263_pred = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3364:     if ((ret = init_studio_vlcs(ctx)) < 0)",
          "3365:         return ret;",
          "",
          "---------------"
        ],
        "libavcodec/mpegvideo.c||libavcodec/mpegvideo.c": [
          "File: libavcodec/mpegvideo.c -> libavcodec/mpegvideo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "386:     for (i = 0; i < 12; i++) {",
          "387:         s->pblocks[i] = &s->block[i];",
          "388:     }",
          "389:     if (s->avctx->codec_tag == AV_RL32(\"VCR2\")) {",
          "391:         FFSWAP(void *, s->pblocks[4], s->pblocks[5]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "390:     FF_ALLOCZ_OR_GOTO(s->avctx, s->block32, sizeof(*s->block32), fail)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "421:     av_freep(&s->me.map);",
          "422:     av_freep(&s->me.score_map);",
          "423:     av_freep(&s->blocks);",
          "424:     av_freep(&s->ac_val_base);",
          "425:     s->block = NULL;",
          "426: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:     av_freep(&s->block32);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "438:     COPY(me.score_map);",
          "439:     COPY(blocks);",
          "440:     COPY(block);",
          "441:     COPY(start_mb_y);",
          "442:     COPY(end_mb_y);",
          "443:     COPY(me.map_generation);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "445:     COPY(block32);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "811:     s->dct_error_sum = NULL;",
          "812:     s->block = NULL;",
          "813:     s->blocks = NULL;",
          "814:     memset(s->pblocks, 0, sizeof(s->pblocks));",
          "815:     s->ac_val_base = NULL;",
          "816:     s->ac_val[0] =",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "819:     s->block32 = NULL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2120:                 ff_wmv2_add_mb(s, block, dest_y, dest_cb, dest_cr);",
          "2121:             }",
          "2122:         } else {",
          "2125:                 put_dct(s, block[0], 0, dest_y                          , dct_linesize, s->qscale);",
          "2126:                 put_dct(s, block[1], 1, dest_y              + block_size, dct_linesize, s->qscale);",
          "2127:                 put_dct(s, block[2], 2, dest_y + dct_offset             , dct_linesize, s->qscale);",
          "",
          "[Removed Lines]",
          "2124:             if(s->encoding || !(s->codec_id==AV_CODEC_ID_MPEG1VIDEO || s->codec_id==AV_CODEC_ID_MPEG2VIDEO)){",
          "",
          "[Added Lines]",
          "2131:             if (s->avctx->bits_per_raw_sample > 8){",
          "2132:                 const int act_block_size = block_size * 2;",
          "2133:                 s->idsp.idct_put(dest_y,                           dct_linesize, (int16_t*)(*s->block32)[0]);",
          "2134:                 s->idsp.idct_put(dest_y              + act_block_size, dct_linesize, (int16_t*)(*s->block32)[1]);",
          "2135:                 s->idsp.idct_put(dest_y + dct_offset,              dct_linesize, (int16_t*)(*s->block32)[2]);",
          "2136:                 s->idsp.idct_put(dest_y + dct_offset + act_block_size, dct_linesize, (int16_t*)(*s->block32)[3]);",
          "2138:                 dct_linesize = uvlinesize << s->interlaced_dct;",
          "2139:                 dct_offset   = s->interlaced_dct ? uvlinesize : uvlinesize*block_size;",
          "2141:                 s->idsp.idct_put(dest_cb,              dct_linesize, (int16_t*)(*s->block32)[4]);",
          "2142:                 s->idsp.idct_put(dest_cr,              dct_linesize, (int16_t*)(*s->block32)[5]);",
          "2143:                 s->idsp.idct_put(dest_cb + dct_offset, dct_linesize, (int16_t*)(*s->block32)[6]);",
          "2144:                 s->idsp.idct_put(dest_cr + dct_offset, dct_linesize, (int16_t*)(*s->block32)[7]);",
          "2145:                 if(!s->chroma_x_shift){//Chroma444",
          "2146:                     s->idsp.idct_put(dest_cb + act_block_size,              dct_linesize, (int16_t*)(*s->block32)[8]);",
          "2147:                     s->idsp.idct_put(dest_cr + act_block_size,              dct_linesize, (int16_t*)(*s->block32)[9]);",
          "2148:                     s->idsp.idct_put(dest_cb + act_block_size + dct_offset, dct_linesize, (int16_t*)(*s->block32)[10]);",
          "2149:                     s->idsp.idct_put(dest_cr + act_block_size + dct_offset, dct_linesize, (int16_t*)(*s->block32)[11]);",
          "2150:                 }",
          "2151:             }",
          "2153:             else if(s->encoding || !(s->codec_id==AV_CODEC_ID_MPEG1VIDEO || s->codec_id==AV_CODEC_ID_MPEG2VIDEO)){",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2202: void ff_init_block_index(MpegEncContext *s){ //FIXME maybe rename",
          "2203:     const int linesize   = s->current_picture.f->linesize[0]; //not s->linesize as this would be wrong for field pics",
          "2204:     const int uvlinesize = s->current_picture.f->linesize[1];",
          "2207:     s->block_index[0]= s->b8_stride*(s->mb_y*2    ) - 2 + s->mb_x*2;",
          "2208:     s->block_index[1]= s->b8_stride*(s->mb_y*2    ) - 1 + s->mb_x*2;",
          "",
          "[Removed Lines]",
          "2205:     const int mb_size= 4 - s->avctx->lowres;",
          "",
          "[Added Lines]",
          "2234:     const int width_of_mb = (4 + (s->avctx->bits_per_raw_sample > 8)) - s->avctx->lowres;",
          "2235:     const int height_of_mb = 4 - s->avctx->lowres;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2212:     s->block_index[5]= s->mb_stride*(s->mb_y + s->mb_height + 2) + s->b8_stride*s->mb_height*2 + s->mb_x - 1;",
          "2219:     if(!(s->pict_type==AV_PICTURE_TYPE_B && s->avctx->draw_horiz_band && s->picture_structure==PICT_FRAME))",
          "2220:     {",
          "2221:         if(s->picture_structure==PICT_FRAME){",
          "2225:         }else{",
          "2229:             av_assert1((s->mb_y&1) == (s->picture_structure == PICT_BOTTOM_FIELD));",
          "2230:         }",
          "2231:     }",
          "",
          "[Removed Lines]",
          "2215:     s->dest[0] = s->current_picture.f->data[0] + (int)((s->mb_x - 1U) <<  mb_size);",
          "2216:     s->dest[1] = s->current_picture.f->data[1] + (int)((s->mb_x - 1U) << (mb_size - s->chroma_x_shift));",
          "2217:     s->dest[2] = s->current_picture.f->data[2] + (int)((s->mb_x - 1U) << (mb_size - s->chroma_x_shift));",
          "2222:         s->dest[0] += s->mb_y *   linesize << mb_size;",
          "2223:         s->dest[1] += s->mb_y * uvlinesize << (mb_size - s->chroma_y_shift);",
          "2224:         s->dest[2] += s->mb_y * uvlinesize << (mb_size - s->chroma_y_shift);",
          "2226:             s->dest[0] += (s->mb_y>>1) *   linesize << mb_size;",
          "2227:             s->dest[1] += (s->mb_y>>1) * uvlinesize << (mb_size - s->chroma_y_shift);",
          "2228:             s->dest[2] += (s->mb_y>>1) * uvlinesize << (mb_size - s->chroma_y_shift);",
          "",
          "[Added Lines]",
          "2245:     s->dest[0] = s->current_picture.f->data[0] + (int)((s->mb_x - 1U) <<  width_of_mb);",
          "2246:     s->dest[1] = s->current_picture.f->data[1] + (int)((s->mb_x - 1U) << (width_of_mb - s->chroma_x_shift));",
          "2247:     s->dest[2] = s->current_picture.f->data[2] + (int)((s->mb_x - 1U) << (width_of_mb - s->chroma_x_shift));",
          "2252:         s->dest[0] += s->mb_y *   linesize << height_of_mb;",
          "2253:         s->dest[1] += s->mb_y * uvlinesize << (height_of_mb - s->chroma_y_shift);",
          "2254:         s->dest[2] += s->mb_y * uvlinesize << (height_of_mb - s->chroma_y_shift);",
          "2256:             s->dest[0] += (s->mb_y>>1) *   linesize << height_of_mb;",
          "2257:             s->dest[1] += (s->mb_y>>1) * uvlinesize << (height_of_mb - s->chroma_y_shift);",
          "2258:             s->dest[2] += (s->mb_y>>1) * uvlinesize << (height_of_mb - s->chroma_y_shift);",
          "",
          "---------------"
        ],
        "libavcodec/mpegvideo.h||libavcodec/mpegvideo.h": [
          "File: libavcodec/mpegvideo.h -> libavcodec/mpegvideo.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #include \"mpegpicture.h\"",
          "46: #include \"mpegvideodsp.h\"",
          "47: #include \"mpegvideoencdsp.h\"",
          "48: #include \"pixblockdsp.h\"",
          "49: #include \"put_bits.h\"",
          "50: #include \"ratecontrol.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: #include \"mpegvideodata.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "71: #define SLICE_MAX_START_CODE    0x000001af",
          "72: #define EXT_START_CODE          0x000001b5",
          "73: #define USER_START_CODE         0x000001b2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: #define SLICE_START_CODE        0x000001b7",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "378:     int custom_pcf;",
          "382:     int time_increment_bits;",
          "383:     int last_time_base;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "384:     int studio_profile;",
          "385:     int dct_precision;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "502:     int16_t (*block)[64]; ///< points to one of the following blocks",
          "503:     int16_t (*blocks)[12][64]; // for HQ mode we need to keep the best block",
          "505: #define SLICE_OK         0",
          "506: #define SLICE_ERROR     -1",
          "507: #define SLICE_END       -2 ///<end marker found",
          "",
          "[Removed Lines]",
          "504:     int (*decode_mb)(struct MpegEncContext *s, int16_t block[6][64]); // used by some codecs to avoid a switch()",
          "",
          "[Added Lines]",
          "509:     int (*decode_mb)(struct MpegEncContext *s, int16_t block[12][64]); // used by some codecs to avoid a switch()",
          "511:     int32_t (*block32)[12][64];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "729:                    qpel_mc_func (*qpix_op)[16]);",
          "731: static inline void ff_update_block_index(MpegEncContext *s){",
          "734:     s->block_index[0]+=2;",
          "735:     s->block_index[1]+=2;",
          "",
          "[Removed Lines]",
          "732:     const int block_size= 8 >> s->avctx->lowres;",
          "",
          "[Added Lines]",
          "740:     const int bytes_per_pixel = 1 + (s->avctx->bits_per_raw_sample > 8);",
          "741:     const int block_size= (8*bytes_per_pixel) >> s->avctx->lowres;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "738:     s->block_index[4]++;",
          "739:     s->block_index[5]++;",
          "740:     s->dest[0]+= 2*block_size;",
          "743: }",
          "745: static inline int get_bits_diff(MpegEncContext *s){",
          "",
          "[Removed Lines]",
          "741:     s->dest[1]+= block_size;",
          "742:     s->dest[2]+= block_size;",
          "",
          "[Added Lines]",
          "750:     s->dest[1]+= (2 >> s->chroma_x_shift) * block_size;",
          "751:     s->dest[2]+= (2 >> s->chroma_x_shift) * block_size;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "751:     return bits - last;",
          "752: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "763: static inline int mpeg_get_qscale(MpegEncContext *s)",
          "764: {",
          "765:     int qscale = get_bits(&s->gb, 5);",
          "766:     if (s->q_scale_type)",
          "767:         return ff_mpeg2_non_linear_qscale[qscale];",
          "768:     else",
          "769:         return qscale << 1;",
          "770: }",
          "",
          "---------------"
        ],
        "libavcodec/x86/idctdsp_init.c||libavcodec/x86/idctdsp_init.c": [
          "File: libavcodec/x86/idctdsp_init.c -> libavcodec/x86/idctdsp_init.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "123:         }",
          "125:         if (avctx->bits_per_raw_sample == 10 &&",
          "126:             (avctx->idct_algo == FF_IDCT_AUTO ||",
          "127:              avctx->idct_algo == FF_IDCT_SIMPLEAUTO ||",
          "128:              avctx->idct_algo == FF_IDCT_SIMPLE)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "126:             avctx->codec_id != AV_CODEC_ID_MPEG4 &&",
          "",
          "---------------"
        ]
      }
    }
  ]
}