{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3b3ddbae36ea40bf0f7d7ef707e722fdad8aa9c0",
      "candidate_info": {
        "commit_hash": "3b3ddbae36ea40bf0f7d7ef707e722fdad8aa9c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3b3ddbae36ea40bf0f7d7ef707e722fdad8aa9c0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/prepare.c",
          "src/sqliteInt.h",
          "src/vdbe.c"
        ],
        "message": "When parsing the schema, detect out-of-bounds rootpage values and throw an error.\n\nFossilOrigin-Name: 6c3a2727dc912ed800146e07db5d15d0f3468d13701165ba763c4b114c3e18e8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4c5f3c6cacf84a36d0347790d98d82d1f584cd1537a13a2736348405c4d20367",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:     assert( db->init.busy );",
          "117:     db->init.iDb = iDb;",
          "118:     sqlite3GetUInt32(argv[3], &db->init.newTnum);",
          "119:     db->init.orphanTrigger = 0;",
          "120:     db->init.azInit = argv;",
          "121:     pStmt = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "119:     if( db->init.newTnum>pData->mxPage && pData->mxPage!=0 ){",
          "120:       corruptSchema(pData, argv[1], \"invalid rootpage\");",
          "121:       return 0;",
          "122:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "151:     if( pIndex==0",
          "152:      || sqlite3GetUInt32(argv[3],&pIndex->tnum)==0",
          "153:      || pIndex->tnum<2",
          "154:      || sqlite3IndexHasDuplicateRootPage(pIndex)",
          "155:     ){",
          "156:       corruptSchema(pData, argv[1], pIndex?\"invalid rootpage\":\"orphan index\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "158:      || (pIndex->tnum>pData->mxPage && pData->mxPage!=0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "207:   initData.pzErrMsg = pzErrMsg;",
          "208:   initData.mInitFlags = mFlags;",
          "209:   initData.nInitRow = 0;",
          "210:   sqlite3InitCallback(&initData, 5, (char **)azArg, 0);",
          "211:   db->mDbFlags &= mask;",
          "212:   if( initData.rc ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "215:   initData.mxPage = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "331:   assert( db->init.busy );",
          "332:   {",
          "333:     char *zSql;",
          "334:     zSql = sqlite3MPrintf(db,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338:   initData.mxPage = sqlite3BtreeLastPage(pDb->pBt);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6122:     initData.iDb = iDb;",
          "6123:     initData.pzErrMsg = &p->zErrMsg;",
          "6124:     initData.mInitFlags = 0;",
          "6125:     zSql = sqlite3MPrintf(db,",
          "6126:        \"SELECT*FROM\\\"%w\\\".%s WHERE %s ORDER BY rowid\",",
          "6127:        db->aDb[iDb].zDbSName, zSchema, pOp->p4.z);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6125:     initData.mxPage = sqlite3BtreeLastPage(db->aDb[iDb].pBt);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f2180d21a3eea2f4876f43ff2f8b54e407d4651",
      "candidate_info": {
        "commit_hash": "6f2180d21a3eea2f4876f43ff2f8b54e407d4651",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6f2180d21a3eea2f4876f43ff2f8b54e407d4651",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/in4.test"
        ],
        "message": "New test cases in test/in4.test require rtree, so disable those tests on builds that lack the rtree extension.\n\nFossilOrigin-Name: b5900914f7f34caf1a97c87233781d55467329b0ac4366354df13c6fd72a99c7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/in4.test||test/in4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 95ef68966c50f311830cba8c9257a4085c93011d205e0e31867c2917fa62a48e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/in4.test||test/in4.test": [
          "File: test/in4.test -> test/in4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:   SELECT * FROM t2 LEFT JOIN t1 ON c = d AND b IN (10,10,10);",
          "353: } {{} 1 {} {} {}}",
          "366: finish_test",
          "",
          "[Removed Lines]",
          "355: reset_db",
          "356: do_execsql_test 7.2 {",
          "357:   CREATE VIRTUAL TABLE t1 USING rtree(a, b, c);",
          "358:   CREATE TABLE t2(d INTEGER, e INT);",
          "359:   INSERT INTO t2(e) VALUES(1);",
          "360: }",
          "362: do_execsql_test 7.3 {",
          "363:   SELECT * FROM t2 LEFT JOIN t1 ON c IN (d) AND b IN (10,10,10);",
          "364: } {{} 1 {} {} {}}",
          "",
          "[Added Lines]",
          "355: ifcapable rtree {",
          "356:   reset_db",
          "357:   do_execsql_test 7.2 {",
          "358:     CREATE VIRTUAL TABLE t1 USING rtree(a, b, c);",
          "359:     CREATE TABLE t2(d INTEGER, e INT);",
          "360:     INSERT INTO t2(e) VALUES(1);",
          "361:   }",
          "363:   do_execsql_test 7.3 {",
          "364:     SELECT * FROM t2 LEFT JOIN t1 ON c IN (d) AND b IN (10,10,10);",
          "365:   } {{} 1 {} {} {}}",
          "366: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9fc1b9af36e54c7863a9404a9611abfb4b682374",
      "candidate_info": {
        "commit_hash": "9fc1b9af36e54c7863a9404a9611abfb4b682374",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9fc1b9af36e54c7863a9404a9611abfb4b682374",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/resolve.c"
        ],
        "message": "NEVER() and ALWAYS() macros tagging unreachable branches.\n\nFossilOrigin-Name: 34b877742ef78e9bb3f16815180f4ad9cd722beb1d610f713400a3b25d68aa9b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bd57e6d923d3b04f0a07aaf18bf389d2b2b7efc7c57e8cb37e6ef910662d8397",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "811:     sWalker.xExprCallback = renameUnmapExprCb;",
          "812:     sqlite3WalkExprList(&sWalker, pEList);",
          "813:     for(i=0; i<pEList->nExpr; i++){",
          "815:         sqlite3RenameTokenRemap(pParse, 0, (void*)pEList->a[i].zEName);",
          "816:       }",
          "817:     }",
          "",
          "[Removed Lines]",
          "814:       if( pEList->a[i].eEName==ENAME_NAME ){",
          "",
          "[Added Lines]",
          "814:       if( ALWAYS(pEList->a[i].eEName==ENAME_NAME) ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "952:     int i;",
          "953:     for(i=0; i<pEList->nExpr; i++){",
          "954:       char *zName = pEList->a[i].zEName;",
          "956:        && 0==sqlite3_stricmp(zName, zOld)",
          "957:       ){",
          "958:         renameTokenFind(pParse, pCtx, (void*)zName);",
          "",
          "[Removed Lines]",
          "955:       if( pEList->a[i].eEName==ENAME_NAME",
          "",
          "[Added Lines]",
          "955:       if( ALWAYS(pEList->a[i].eEName==ENAME_NAME)",
          "956:        && ALWAYS(zName!=0)",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "140: ){",
          "141:   int n;",
          "142:   const char *zSpan;",
          "144:   zSpan = pItem->zEName;",
          "145:   for(n=0; ALWAYS(zSpan[n]) && zSpan[n]!='.'; n++){}",
          "146:   if( zDb && (sqlite3StrNICmp(zSpan, zDb, n)!=0 || zDb[n]!=0) ){",
          "",
          "[Removed Lines]",
          "143:   if( pItem->eEName!=ENAME_TAB ) return 0;",
          "",
          "[Added Lines]",
          "143:   if( NEVER(pItem->eEName!=ENAME_TAB) ) return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "451:       pEList = pNC->uNC.pEList;",
          "452:       assert( pEList!=0 );",
          "453:       for(j=0; j<pEList->nExpr; j++){",
          "455:         if( pEList->a[j].eEName==ENAME_NAME",
          "457:          && sqlite3StrICmp(zAs, zCol)==0",
          "458:         ){",
          "459:           Expr *pOrig;",
          "",
          "[Removed Lines]",
          "454:         char *zAs;",
          "456:          && (zAs = pEList->a[j].zEName)!=0",
          "",
          "[Added Lines]",
          "454:         char *zAs = pEList->a[j].zEName;",
          "456:          && ALWAYS(zAs!=0)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1125:     for(i=0; i<pEList->nExpr; i++){",
          "1126:       char *zAs = pEList->a[i].zEName;",
          "1127:       if( pEList->a[i].eEName==ENAME_NAME",
          "1129:        && sqlite3StrICmp(zAs, zCol)==0",
          "1130:       ){",
          "1131:         return i+1;",
          "",
          "[Removed Lines]",
          "1128:        && (zAs = pEList->a[i].zEName)!=0",
          "",
          "[Added Lines]",
          "1128:        && ALWAYS(zAs!=0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c06050844565a59ca3c11f09c3ffecf1d609fd9b",
      "candidate_info": {
        "commit_hash": "c06050844565a59ca3c11f09c3ffecf1d609fd9b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c06050844565a59ca3c11f09c3ffecf1d609fd9b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "test/shell1.test"
        ],
        "message": "Always use ?...? to indicate optional arguments in the output of \".help\" in the CLI.  Change \".mode column\" so that it automatically activates \".headers on\" if headers have not been previously turned on or off.\n\nFossilOrigin-Name: 2827c0a186596299e43eb3e7378eea462d2b060b2c3388ce5cb2bc8e0b43999e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "test/shell1.test||test/shell1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6da784c9e174744d6deeb76c553b515b96c1fcb80c55a281e476959ec680fb72",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3930:   \"       -e     Send output to the system text editor\",",
          "3931:   \"       -x     Send output as CSV to a spreadsheet (same as \\\".excel\\\")\",",
          "3932: #ifdef SQLITE_DEBUG",
          "3934: #endif",
          "3935:   \".open ?OPTIONS? ?FILE?   Close existing database and reopen FILE\",",
          "3936:   \"     Options:\",",
          "",
          "[Removed Lines]",
          "3933:   \".oom [--repeat M] [N]    Simulate an OOM error on the N-th allocation\",",
          "",
          "[Added Lines]",
          "3934:   \".oom ?--repeat M? ?N?    Simulate an OOM error on the N-th allocation\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7969:   if( c=='h' && strncmp(azArg[0], \"headers\", n)==0 ){",
          "7970:     if( nArg==2 ){",
          "7971:       p->showHeader = booleanValue(azArg[1]);",
          "7972:     }else{",
          "7973:       raw_printf(stderr, \"Usage: .headers on|off\\n\");",
          "7974:       rc = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7973:       p->shellFlgs |= SHFLG_HeaderSet;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "8491:       sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Row);",
          "8492:     }else if( c2=='c' && strncmp(azArg[1],\"columns\",n2)==0 ){",
          "8493:       p->mode = MODE_Column;",
          "8494:       sqlite3_snprintf(sizeof(p->rowSeparator), p->rowSeparator, SEP_Row);",
          "8495:     }else if( c2=='l' && n2>2 && strncmp(azArg[1],\"list\",n2)==0 ){",
          "8496:       p->mode = MODE_List;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8496:       if( (p->shellFlgs & SHFLG_HeaderSet)==0 ){",
          "8497:         p->showHeader = 1;",
          "8498:       }",
          "",
          "---------------"
        ],
        "test/shell1.test||test/shell1.test": [
          "File: test/shell1.test -> test/shell1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "709:   # this should be treated the same as a '1' width for col 1 and 2",
          "710: } {0 {}}",
          "711: do_test shell1-3.26.5 {",
          "713:   # this should be treated the same as a '1' width for col 1 and 2",
          "714: } {0 {abcdefg         123456}}",
          "715: do_test shell1-3.26.6 {",
          "717:   # this should be treated the same as a '1' width for col 1 and 2",
          "718: } {0 {   abcdefg  123456    }}",
          "",
          "[Removed Lines]",
          "712:   catchcmd \"test.db\" \".mode column\\n.width 10 -10\\nSELECT 'abcdefg', 123456;\"",
          "716:   catchcmd \"test.db\" \".mode column\\n.width -10 10\\nSELECT 'abcdefg', 123456;\"",
          "",
          "[Added Lines]",
          "712:   catchcmd \"test.db\" \".mode column\\n.header off\\n.width 10 -10\\nSELECT 'abcdefg', 123456;\"",
          "716:   catchcmd \"test.db\" \".mode column\\n.header off\\n.width -10 10\\nSELECT 'abcdefg', 123456;\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cfcf4de4a636abd966ee1dd724f639a96c1cc3f8",
      "candidate_info": {
        "commit_hash": "cfcf4de4a636abd966ee1dd724f639a96c1cc3f8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cfcf4de4a636abd966ee1dd724f639a96c1cc3f8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c"
        ],
        "message": "Simplifications to the initialization of the sqlite3_index_info structure that is used to communicate with virtual table modules.  Avoid adding unused constraints to the sqlite3_index_info structure.  Extra constraints are harmless, but might be confusing to people trying to understand the code.\n\nFossilOrigin-Name: 5e6357fc953a955d8ebb5c1fcd72e04e4ae5e8bf5941810015c2fbc50de70535",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a4f330b133a36356681dce7d2a65d8ab792620494d6cd4ef4934a97cf3a8e6fc",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "607: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(WHERETRACE_ENABLED)",
          "609:   int i;",
          "610:   if( !sqlite3WhereTrace ) return;",
          "611:   for(i=0; i<p->nConstraint; i++){",
          "",
          "[Removed Lines]",
          "608: static void TRACE_IDX_INPUTS(sqlite3_index_info *p){",
          "",
          "[Added Lines]",
          "608: static void whereTraceIndexInfoInputs(sqlite3_index_info *p){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "623:        p->aOrderBy[i].desc);",
          "624:   }",
          "625: }",
          "627:   int i;",
          "628:   if( !sqlite3WhereTrace ) return;",
          "629:   for(i=0; i<p->nConstraint; i++){",
          "",
          "[Removed Lines]",
          "626: static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){",
          "",
          "[Added Lines]",
          "626: static void whereTraceIndexInfoOutputs(sqlite3_index_info *p){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "639:   sqlite3DebugPrintf(\"  estimatedRows=%lld\\n\", p->estimatedRows);",
          "640: }",
          "641: #else",
          "644: #endif",
          "646: #ifndef SQLITE_OMIT_AUTOMATIC_INDEX",
          "",
          "[Removed Lines]",
          "642: #define TRACE_IDX_INPUTS(A)",
          "643: #define TRACE_IDX_OUTPUTS(A)",
          "",
          "[Added Lines]",
          "642: #define whereTraceIndexInfoInputs(A)",
          "643: #define whereTraceIndexInfoOutputs(A)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "950:     sqlite3ErrorMsg(pParse, \"out of memory\");",
          "951:     return 0;",
          "952:   }",
          "959:   pHidden = (struct HiddenIndexInfo*)&pIdxInfo[1];",
          "960:   pIdxCons = (struct sqlite3_index_constraint*)&pHidden[1];",
          "961:   pIdxOrderBy = (struct sqlite3_index_orderby*)&pIdxCons[nTerm];",
          "962:   pUsage = (struct sqlite3_index_constraint_usage*)&pIdxOrderBy[nOrderBy];",
          "970:   pHidden->pWC = pWC;",
          "971:   pHidden->pParse = pParse;",
          "972:   for(i=j=0, pTerm=pWC->a; i<pWC->nTerm; i++, pTerm++){",
          "",
          "[Removed Lines]",
          "968:                                                                    pUsage;",
          "",
          "[Added Lines]",
          "957:   pIdxInfo->nOrderBy = nOrderBy;",
          "958:   pIdxInfo->aConstraint = pIdxCons;",
          "959:   pIdxInfo->aOrderBy = pIdxOrderBy;",
          "960:   pIdxInfo->aConstraintUsage = pUsage;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1027:     j++;",
          "1028:   }",
          "1029:   for(i=0; i<nOrderBy; i++){",
          "1030:     Expr *pExpr = pOrderBy->a[i].pExpr;",
          "1031:     pIdxOrderBy[i].iColumn = pExpr->iColumn;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1020:   pIdxInfo->nConstraint = j;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1056:   sqlite3_vtab *pVtab = sqlite3GetVTable(pParse->db, pTab)->pVtab;",
          "1057:   int rc;",
          "1060:   rc = pVtab->pModule->xBestIndex(pVtab, p);",
          "1063:   if( rc!=SQLITE_OK && rc!=SQLITE_CONSTRAINT ){",
          "1064:     if( rc==SQLITE_NOMEM ){",
          "",
          "[Removed Lines]",
          "1059:   TRACE_IDX_INPUTS(p);",
          "1061:   TRACE_IDX_OUTPUTS(p);",
          "",
          "[Added Lines]",
          "1051:   whereTraceIndexInfoInputs(p);",
          "1053:   whereTraceIndexInfoOutputs(p);",
          "",
          "---------------"
        ]
      }
    }
  ]
}