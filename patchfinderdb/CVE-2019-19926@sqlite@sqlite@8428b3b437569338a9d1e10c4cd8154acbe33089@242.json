{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e7e48dc629f2703f1130ee792705374f8b72622c",
      "candidate_info": {
        "commit_hash": "e7e48dc629f2703f1130ee792705374f8b72622c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7e48dc629f2703f1130ee792705374f8b72622c",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/releasetest_data.tcl"
        ],
        "message": "Add \"set TMP=%CD%\" to the start of each msvc script output by releasetest_data.tcl. Otherwise, since binaries compiled with SQLITE_TEST all choose the same sequence of pseudo-random numbers, collisions between temp file names cause errors when running multiple tests in parallel.\n\nFossilOrigin-Name: f5d0436d8dc650cadb61a5fe76fd1a0d68dabba54ff0c2a8c138f9dfbdab1c3f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/releasetest_data.tcl||test/releasetest_data.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8158d2aca68c5a253054376fdf1b8eaab2db874f4b93524742be7340e9c50dd5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/releasetest_data.tcl||test/releasetest_data.tcl": [
          "File: test/releasetest_data.tcl -> test/releasetest_data.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "546:     set makecmd    \"nmake /f %SRCDIR%\\\\Makefile.msc TOP=%SRCDIR% $target \"",
          "547:     append makecmd \"\\\"CFLAGS=$cflags\\\" \\\"OPTS=$opts\\\" $makeOpts\"",
          "549:     puts $makecmd",
          "550:   }",
          "551: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "549:     puts \"set TMP=%CD%\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ca644818b163eaebae657f816f907335ed0b068",
      "candidate_info": {
        "commit_hash": "6ca644818b163eaebae657f816f907335ed0b068",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ca644818b163eaebae657f816f907335ed0b068",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/memdb.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/tclsqlite.c",
          "test/memdb1.test"
        ],
        "message": "Enhancements to deserialize: (1) Add the SQLITE_FCNTL_SIZE_LIMIT file control to set a maximum size for an in-memory database, defaulting to SQLITE_MEMDB_DEFAULT_MAXSIZE or 1GiB.  (2) Honor the SQLITE_DESERIALIZE_READONLY flag. (3) Enhance the TCL interface to support -maxsize N and -readonly BOOLEAN. (4) Add the --maxsize option to the \".open\" command and on the command-line for the CLI.\n\nFossilOrigin-Name: 30f08d58882819a69e353bcc1b6b349664bbfbe00aa1c115ba44a9fd899fcc5b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/memdb.c||src/memdb.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/tclsqlite.c||src/tclsqlite.c",
          "test/memdb1.test||test/memdb1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e148cdad35520e6684cfeba23b003f60b55f83a6bf621aff16be8aa5612cdcee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: struct MemFile {",
          "42: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: #ifndef SQLITE_MEMDB_DEFAULT_MAXSIZE",
          "47: # define SQLITE_MEMDB_DEFAULT_MAXSIZE 1073741824",
          "48: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "160:   if( (p->mFlags & SQLITE_DESERIALIZE_RESIZEABLE)==0 || p->nMmap>0 ){",
          "161:     return SQLITE_FULL;",
          "162:   }",
          "163:   pNew = sqlite3_realloc64(p->aData, newSz);",
          "164:   if( pNew==0 ) return SQLITE_NOMEM;",
          "165:   p->aData = pNew;",
          "167:   return SQLITE_OK;",
          "168: }",
          "",
          "[Removed Lines]",
          "166:   p->szMax = newSz;",
          "",
          "[Added Lines]",
          "169:   if( newSz>p->szMax ){",
          "170:     return SQLITE_FULL;",
          "171:   }",
          "172:   newSz *= 2;",
          "173:   if( newSz>p->szMax ) newSz = p->szMax;",
          "177:   p->szAlloc = newSz;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:   sqlite_int64 iOfst",
          "178: ){",
          "179:   MemFile *p = (MemFile *)pFile;",
          "180:   if( iOfst+iAmt>p->sz ){",
          "181:     int rc;",
          "184:     ){",
          "185:       return rc;",
          "186:     }",
          "",
          "[Removed Lines]",
          "182:     if( iOfst+iAmt>p->szMax",
          "183:      && (rc = memdbEnlarge(p, (iOfst+iAmt)*2))!=SQLITE_OK",
          "",
          "[Added Lines]",
          "191:   if( p->mFlags & SQLITE_DESERIALIZE_READONLY ) return SQLITE_READONLY;",
          "194:     if( iOfst+iAmt>p->szAlloc",
          "195:      && (rc = memdbEnlarge(p, iOfst+iAmt))!=SQLITE_OK",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "251:     rc = SQLITE_OK;",
          "252:   }",
          "253:   return rc;",
          "254: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "265:   if( op==SQLITE_FCNTL_SIZE_LIMIT ){",
          "266:     sqlite3_int64 iLimit = *(sqlite3_int64*)pArg;",
          "267:     if( iLimit<p->sz ){",
          "268:       if( iLimit<0 ){",
          "269:         iLimit = p->szMax;",
          "270:       }else{",
          "271:         iLimit = p->sz;",
          "272:       }",
          "273:     }",
          "274:     p->szMax = iLimit;",
          "276:     rc = SQLITE_OK;",
          "277:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "313:   p->base.pMethods = &memdb_io_methods;",
          "314:   return SQLITE_OK;",
          "315: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "339:   p->szMax = SQLITE_MEMDB_DEFAULT_MAXSIZE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "560:   }else{",
          "561:     p->aData = pData;",
          "562:     p->sz = szDb;",
          "563:     p->szMax = szBuf;",
          "564:     p->mFlags = mFlags;",
          "565:     rc = SQLITE_OK;",
          "566:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "589:     p->szAlloc = szBuf;",
          "591:     if( p->szMax<SQLITE_MEMDB_DEFAULT_MAXSIZE ){",
          "592:       p->szMax = SQLITE_MEMDB_DEFAULT_MAXSIZE;",
          "593:     }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3449: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "3450:   \"        --deserialize   Load into memory useing sqlite3_deserialize()\",",
          "3451:   \"        --hexdb         Load the output of \\\"dbtotxt\\\" as an in-memory database\",",
          "3452: #endif",
          "3453:   \"        --new           Initialize FILE to an empty database\",",
          "3454:   \"        --readonly      Open FILE readonly\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3453:   \"        --maxsize N     Maximum size for --hexdb or --deserialized database\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3927:       if( rc ){",
          "3928:         utf8_printf(stderr, \"Error: sqlite3_deserialize() returns %d\\n\", rc);",
          "3929:       }",
          "3930:     }",
          "3931: #endif",
          "3932:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3932:       if( p->szMax>0 ){",
          "3933:         sqlite3_file_control(p->db, \"main\", SQLITE_FCNTL_SIZE_LIMIT, &p->szMax);",
          "3934:       }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "6841:     sqlite3_free(p->zFreeOnClose);",
          "6842:     p->zFreeOnClose = 0;",
          "6843:     p->openMode = SHELL_OPEN_UNSPEC;",
          "6845:     for(iName=1; iName<nArg && azArg[iName][0]=='-'; iName++){",
          "6846:       const char *z = azArg[iName];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6849:     p->szMax = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "6859:         p->openMode = SHELL_OPEN_DESERIALIZE;",
          "6860:       }else if( optionMatch(z, \"hexdb\") ){",
          "6861:         p->openMode = SHELL_OPEN_HEXDB;",
          "6863:       }else if( z[0]=='-' ){",
          "6864:         utf8_printf(stderr, \"unknown option: %s\\n\", z);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6868:       }else if( optionMatch(z, \"maxsize\") && iName+1<nArg ){",
          "6869:         p->szMax = integerValue(azArg[++iName]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8549:   \"   -column              set output mode to 'column'\\n\"",
          "8550:   \"   -cmd COMMAND         run \\\"COMMAND\\\" before reading stdin\\n\"",
          "8551:   \"   -csv                 set output mode to 'csv'\\n\"",
          "8552:   \"   -echo                print commands before execution\\n\"",
          "8553:   \"   -init FILENAME       read/process named file\\n\"",
          "8554:   \"   -[no]header          turn headers on or off\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8560: #if defined(SQLITE_ENABLE_DESERIALIZE)",
          "8561:   \"   -deserialize         open the database using sqlite3_deserialize()\\n\"",
          "8562: #endif",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "8561:   \"   -line                set output mode to 'line'\\n\"",
          "8562:   \"   -list                set output mode to 'list'\\n\"",
          "8563:   \"   -lookaside SIZE N    use N entries of SZ bytes for lookaside memory\\n\"",
          "8564:   \"   -mmap N              default mmap size set to N\\n\"",
          "8565: #ifdef SQLITE_ENABLE_MULTIPLEX",
          "8566:   \"   -multiplex           enable the multiplexor VFS\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8575: #if defined(SQLITE_ENABLE_DESERIALIZE)",
          "8576:   \"   -maxsize N           maximum size for a --deserialize database\\n\"",
          "8577: #endif",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "8871: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "8872:     }else if( strcmp(z,\"-deserialize\")==0 ){",
          "8873:       data.openMode = SHELL_OPEN_DESERIALIZE;",
          "8874: #endif",
          "8875:     }else if( strcmp(z,\"-readonly\")==0 ){",
          "8876:       data.openMode = SHELL_OPEN_READONLY;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8888:     }else if( strcmp(z,\"-maxsize\")==0 && i+1<argc ){",
          "8889:       data.szMax = integerValue(argv[++i]);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "8972: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "8973:     }else if( strcmp(z,\"-deserialize\")==0 ){",
          "8974:       data.openMode = SHELL_OPEN_DESERIALIZE;",
          "8975: #endif",
          "8976:     }else if( strcmp(z,\"-readonly\")==0 ){",
          "8977:       data.openMode = SHELL_OPEN_READONLY;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8991:     }else if( strcmp(z,\"-maxsize\")==0 && i+1<argc ){",
          "8992:       data.szMax = integerValue(argv[++i]);",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1131: #define SQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE  33",
          "1132: #define SQLITE_FCNTL_LOCK_TIMEOUT           34",
          "1133: #define SQLITE_FCNTL_DATA_VERSION           35",
          "1136: #define SQLITE_GET_LOCKPROXYFILE      SQLITE_FCNTL_GET_LOCKPROXYFILE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1143: #define SQLITE_FCNTL_SIZE_LIMIT             36",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2428:                      (char*)0);",
          "2429:     rc = TCL_ERROR;",
          "2430: #else",
          "2433:     unsigned char *pBA;",
          "2434:     unsigned char *pData;",
          "2435:     int len, xrc;",
          "2444:       Tcl_WrongNumArgs(interp, 2, objv, \"?DATABASE? VALUE\");",
          "2445:       rc = TCL_ERROR;",
          "2446:       break;",
          "2447:     }",
          "2448:     pBA = Tcl_GetByteArrayFromObj(pValue, &len);",
          "2449:     pData = sqlite3_malloc64( len );",
          "2450:     if( pData==0 && len>0 ){",
          "2451:       Tcl_AppendResult(interp, \"out of memory\", (char*)0);",
          "2452:       rc = TCL_ERROR;",
          "2453:     }else{",
          "2454:       if( len>0 ) memcpy(pData, pBA, len);",
          "2458:       if( xrc ){",
          "2459:         Tcl_AppendResult(interp, \"unable to set MEMDB content\", (char*)0);",
          "2460:         rc = TCL_ERROR;",
          "2461:       }",
          "2462:     }",
          "2463: #endif",
          "2464:     break;",
          "2465:   }",
          "",
          "[Removed Lines]",
          "2431:     const char *zSchema;",
          "2432:     Tcl_Obj *pValue;",
          "2437:     if( objc==3 ){",
          "2438:       zSchema = 0;",
          "2439:       pValue = objv[2];",
          "2440:     }else if( objc==4 ){",
          "2441:       zSchema = Tcl_GetString(objv[2]);",
          "2442:       pValue = objv[3];",
          "2443:     }else{",
          "2455:       xrc = sqlite3_deserialize(pDb->db, zSchema, pData, len, len,",
          "2456:                 SQLITE_DESERIALIZE_FREEONCLOSE |",
          "2457:                 SQLITE_DESERIALIZE_RESIZEABLE);",
          "",
          "[Added Lines]",
          "2431:     const char *zSchema = 0;",
          "2432:     Tcl_Obj *pValue = 0;",
          "2436:     sqlite3_int64 mxSize = 0;",
          "2437:     int i;",
          "2438:     int isReadonly = 0;",
          "2441:     if( objc<3 ){",
          "2446:     for(i=2; i<objc-1; i++){",
          "2447:       const char *z = Tcl_GetString(objv[i]);",
          "2448:       if( strcmp(z,\"-maxsize\")==0 && i<objc-2 ){",
          "2449:         rc = Tcl_GetWideIntFromObj(interp, objv[++i], &mxSize);",
          "2450:         if( rc ) goto deserialize_error;",
          "2451:         continue;",
          "2452:       }",
          "2453:       if( strcmp(z,\"-readonly\")==0 && i<objc-2 ){",
          "2454:         rc = Tcl_GetBooleanFromObj(interp, objv[++i], &isReadonly);",
          "2455:         if( rc ) goto deserialize_error;",
          "2456:         continue;",
          "2457:       }",
          "2458:       if( zSchema==0 && i==objc-2 && z[0]!='-' ){",
          "2459:         zSchema = z;",
          "2460:         continue;",
          "2461:       }",
          "2462:       Tcl_AppendResult(interp, \"unknown option: \", z, (char*)0);",
          "2463:       rc = TCL_ERROR;",
          "2464:       goto deserialize_error;",
          "2465:     }",
          "2466:     pValue = objv[objc-1];",
          "2473:       int flags;",
          "2475:       if( isReadonly ){",
          "2476:         flags = SQLITE_DESERIALIZE_FREEONCLOSE | SQLITE_DESERIALIZE_READONLY;",
          "2477:       }else{",
          "2478:         flags = SQLITE_DESERIALIZE_FREEONCLOSE | SQLITE_DESERIALIZE_RESIZEABLE;",
          "2479:       }",
          "2480:       xrc = sqlite3_deserialize(pDb->db, zSchema, pData, len, len, flags);",
          "2485:       if( mxSize>0 ){",
          "2486:         sqlite3_file_control(pDb->db, zSchema,SQLITE_FCNTL_SIZE_LIMIT,&mxSize);",
          "2487:       }",
          "2489: deserialize_error:",
          "",
          "---------------"
        ],
        "test/memdb1.test||test/memdb1.test": [
          "File: test/memdb1.test -> test/memdb1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "72:   PRAGMA page_count;",
          "73: } {2}",
          "75: # Build a largish on-disk database and serialize it.  Verify that the",
          "76: # serialization works.",
          "77: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "75: do_test 150 {",
          "76:   catch {db deserialize -unknown 1 $db1} msg",
          "77:   set msg",
          "78: } {unknown option: -unknown}",
          "79: do_test 151 {",
          "80:   db deserialize -readonly 1 $db1",
          "81:   db eval {SELECT * FROM t1}",
          "82: } {1 2}",
          "83: do_test 152 {",
          "84:   catchsql {INSERT INTO t1 VALUES(3,4);}",
          "85: } {1 {attempt to write a readonly database}}",
          "87: breakpoint",
          "88: do_test 160 {",
          "89:   db deserialize -maxsize 32768 $db1",
          "90:   db eval {SELECT * FROM t1}",
          "91: } {1 2}",
          "92: do_test 161 {",
          "93:   db eval {INSERT INTO t1 VALUES(3,4); SELECT * FROM t1}",
          "94: } {1 2 3 4}",
          "95: do_test 162 {",
          "96:   catchsql {INSERT INTO t1 VALUES(5,randomblob(100000))}",
          "97: } {1 {database or disk is full}}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154: do_test 610 {",
          "155:   set rc [catch {db deserialize a b c} msg]",
          "156:   lappend rc $msg",
          "158: do_test 620 {",
          "159:   set rc [catch {db serialize a b} msg]",
          "160:   lappend rc $msg",
          "",
          "[Removed Lines]",
          "157: } {1 {wrong # args: should be \"db deserialize ?DATABASE? VALUE\"}}",
          "",
          "[Added Lines]",
          "182: } {1 {unknown option: a}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f6febee0e23977215e824caa261d328036b3b3f0",
      "candidate_info": {
        "commit_hash": "f6febee0e23977215e824caa261d328036b3b3f0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f6febee0e23977215e824caa261d328036b3b3f0",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/permutations.test",
          "test/snapshot_fault.test"
        ],
        "message": "Update the coverage-wal permutation to cover branches enabled by SQLITE_ENABLE_SNAPSHOT.\n\nFossilOrigin-Name: 6821c61f1d71be2be7f867e59fd94582a1eaf45a4d1fb88be995807a77cc22ea",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/permutations.test||test/permutations.test",
          "test/snapshot_fault.test||test/snapshot_fault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 14a64df36efe0dc36795311d58385f9c65dc465b214059e07c2ee6b95ea99c87",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/permutations.test||test/permutations.test": [
          "File: test/permutations.test -> test/permutations.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:   walprotocol2.test walprotocol.test walro2.test walrofault.test",
          "439:   walro.test walshared.test walslow.test walvfs.test",
          "440:   walfault2.test",
          "442:   nockpt.test",
          "443: }",
          "445: test_suite \"coverage-pager\" -description {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443:   snapshot2.test snapshot3.test snapshot4.test",
          "444:   snapshot_fault.test snapshot.test snapshot_up.test",
          "",
          "---------------"
        ],
        "test/snapshot_fault.test||test/snapshot_fault.test": [
          "File: test/snapshot_fault.test -> test/snapshot_fault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "221:   faultsim_test_result {0 {}} {1 SQLITE_IOERR}",
          "222: }",
          "226: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224: #-------------------------------------------------------------------------",
          "225: # Test the handling of faults that occur within sqlite3_snapshot_get().",
          "226: #",
          "227: reset_db",
          "228: do_execsql_test 5.0 {",
          "229:   PRAGMA page_size = 512;",
          "230:   PRAGMA journal_mode = wal;",
          "231:   PRAGMA wal_autocheckpoint = 0;",
          "232:   CREATE TABLE t1(zzz);",
          "233:   INSERT INTO t1 VALUES(randomblob( 5000 ));",
          "234:   PRAGMA user_version = 211;",
          "235: } {wal 0}",
          "236: faultsim_save_and_close",
          "238: do_faultsim_test 5 -prep {",
          "239:   faultsim_restore_and_reopen",
          "240:   execsql { SELECT count(*) FROM sqlite_master }",
          "241:   execsql BEGIN",
          "242: } -body {",
          "243:   sqlite3_snapshot_get_blob db main",
          "244:   set {} {}",
          "245: } -test {",
          "246:   execsql END",
          "247:   faultsim_test_result {0 {}} {1 SQLITE_IOERR} {1 SQLITE_NOMEM}",
          "248: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22de8357dfbc077ecedb1ebe7439a409f7903c6b",
      "candidate_info": {
        "commit_hash": "22de8357dfbc077ecedb1ebe7439a409f7903c6b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/22de8357dfbc077ecedb1ebe7439a409f7903c6b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c"
        ],
        "message": "Fix a harmless compiler warning.\n\nFossilOrigin-Name: 34343c4b0657767f2676a2a9feb670cf000824e3eadfb1a6d87b57404191d8f9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e6314e386c6877c669bd32788d3886253b0a187bee2c3889f4eaba219f5e52c7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "573:     assert( pExpr->y.pTab!=0 );",
          "574:     assert( pMatch->iCursor==pExpr->iTable );",
          "575:     if( pExpr->y.pTab->tabFlags & TF_HasGenerated ){",
          "578:     }",
          "579:     pMatch->colUsed |= ((Bitmask)1)<<n;",
          "580:   }",
          "",
          "[Removed Lines]",
          "576:       Column *pCol = pExpr->y.pTab->aCol + pExpr->iColumn;",
          "577:       if( pCol->colFlags & COLFLAG_GENERATED ) n = BMS-1;",
          "",
          "[Added Lines]",
          "576:       Column *pColumn = pExpr->y.pTab->aCol + pExpr->iColumn;",
          "577:       if( pColumn->colFlags & COLFLAG_GENERATED ) n = BMS-1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e20945729559e42520d786652c09b00cc9e414f2",
      "candidate_info": {
        "commit_hash": "e20945729559e42520d786652c09b00cc9e414f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e20945729559e42520d786652c09b00cc9e414f2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "src/sqliteInt.h",
          "src/window.c"
        ],
        "message": "Consolidate the removal of Window objects from the Select.pWin list into a single subroutine.\n\nFossilOrigin-Name: e46b2afc99329c43de08d4a2e6ade4d2239d7409c5d5626bf272a3e0dd24d1b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 05080344dceafcfb670fbf01f7d69a1d713a54b6845f968a9cfe941fb53b13af",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1305: static int resolveRemoveWindowsCb(Walker *pWalker, Expr *pExpr){",
          "1306:   if( ExprHasProperty(pExpr, EP_WinFunc) ){",
          "1307:     Window *pWin = pExpr->y.pWin;",
          "1313:   }",
          "1314:   return WRC_Continue;",
          "1315: }",
          "",
          "[Removed Lines]",
          "1308:     if( pWin->ppThis ){",
          "1310:       if( pWin->pNextWin ) pWin->pNextWin->ppThis = pWin->ppThis;",
          "1311:       pWin->ppThis = 0;",
          "1312:     }",
          "",
          "[Added Lines]",
          "1308:     sqlite3WindowUnlinkFromSelect(pWin);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3615: #ifndef SQLITE_OMIT_WINDOWFUNC",
          "3616: void sqlite3WindowDelete(sqlite3*, Window*);",
          "3617: void sqlite3WindowListDelete(sqlite3 *db, Window *p);",
          "3618: Window *sqlite3WindowAlloc(Parse*, int, int, Expr*, int , Expr*, u8);",
          "3619: void sqlite3WindowAttach(Parse*, Expr*, Window*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3617: void sqlite3WindowUnlinkFromSelect(Window*);",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1017:   return rc;",
          "1018: }",
          "1023: void sqlite3WindowDelete(sqlite3 *db, Window *p){",
          "1024:   if( p ){",
          "1029:     sqlite3ExprDelete(db, p->pFilter);",
          "1030:     sqlite3ExprListDelete(db, p->pPartition);",
          "1031:     sqlite3ExprListDelete(db, p->pOrderBy);",
          "",
          "[Removed Lines]",
          "1025:     if( p->ppThis ){",
          "1027:       if( p->pNextWin ) p->pNextWin->ppThis = p->ppThis;",
          "1028:     }",
          "",
          "[Added Lines]",
          "1024: void sqlite3WindowUnlinkFromSelect(Window *p){",
          "1025:   if( p->ppThis ){",
          "1027:     if( p->pNextWin ) p->pNextWin->ppThis = p->ppThis;",
          "1028:     p->ppThis = 0;",
          "1029:   }",
          "1030: }",
          "1037:     sqlite3WindowUnlinkFromSelect(p);",
          "",
          "---------------"
        ]
      }
    }
  ]
}