{
  "cve_id": "CVE-2021-41099",
  "cve_desc": "Redis is an open source, in-memory database that persists on disk. An integer overflow bug in the underlying string library can be used to corrupt the heap and potentially result with denial of service or remote code execution. The vulnerability involves changing the default proto-max-bulk-len configuration parameter to a very large value and constructing specially crafted network payloads or commands. The problem is fixed in Redis versions 6.2.6, 6.0.16 and 5.0.14. An additional workaround to mitigate the problem without patching the redis-server executable is to prevent users from modifying the proto-max-bulk-len configuration parameter. This can be done using ACL to restrict unprivileged users from using the CONFIG SET command.",
  "repo": "redis/redis",
  "patch_hash": "c6ad876774f3cc11e32681ea02a2eead00f2c521",
  "patch_info": {
    "commit_hash": "c6ad876774f3cc11e32681ea02a2eead00f2c521",
    "repo": "redis/redis",
    "commit_url": "https://github.com/redis/redis/commit/c6ad876774f3cc11e32681ea02a2eead00f2c521",
    "files": [
      "src/sds.c"
    ],
    "message": "Fix integer overflow in _sdsMakeRoomFor (CVE-2021-41099)",
    "before_after_code_files": [
      "src/sds.c||src/sds.c"
    ]
  },
  "patch_diff": {
    "src/sds.c||src/sds.c": [
      "File: src/sds.c -> src/sds.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "205: sds sdsMakeRoomFor(sds s, size_t addlen) {",
      "206:     void *sh, *newsh;",
      "207:     size_t avail = sdsavail(s);",
      "209:     char type, oldtype = s[-1] & SDS_TYPE_MASK;",
      "210:     int hdrlen;",
      "",
      "[Removed Lines]",
      "208:     size_t len, newlen;",
      "",
      "[Added Lines]",
      "208:     size_t len, newlen, reqlen;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     len = sdslen(s);",
      "216:     sh = (char*)s-sdsHdrSize(oldtype);",
      "219:     if (newlen < SDS_MAX_PREALLOC)",
      "220:         newlen *= 2;",
      "",
      "[Removed Lines]",
      "217:     newlen = (len+addlen);",
      "",
      "[Added Lines]",
      "217:     reqlen = newlen = (len+addlen);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a30d367a71b7017581cf1ca104242a3c644dec0f",
      "candidate_info": {
        "commit_hash": "a30d367a71b7017581cf1ca104242a3c644dec0f",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/a30d367a71b7017581cf1ca104242a3c644dec0f",
        "files": [
          "src/intset.c",
          "src/rdb.c",
          "src/t_set.c"
        ],
        "message": "Fix Integer overflow issue with intsets (CVE-2021-32687)\n\nThe vulnerability involves changing the default set-max-intset-entries\nconfiguration parameter to a very large value and constructing specially\ncrafted commands to manipulate sets",
        "before_after_code_files": [
          "src/intset.c||src/intset.c",
          "src/rdb.c||src/rdb.c",
          "src/t_set.c||src/t_set.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/redis/redis/pull/9584"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/intset.c||src/intset.c": [
          "File: src/intset.c -> src/intset.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include \"intset.h\"",
          "35: #include \"zmalloc.h\"",
          "36: #include \"endianconv.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "37: #include \"redisassert.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105: static intset *intsetResize(intset *is, uint32_t len) {",
          "107:     is = zrealloc(is,sizeof(intset)+size);",
          "108:     return is;",
          "109: }",
          "",
          "[Removed Lines]",
          "106:     uint32_t size = len*intrev32ifbe(is->encoding);",
          "",
          "[Added Lines]",
          "107:     uint64_t size = (uint64_t)len*intrev32ifbe(is->encoding);",
          "108:     assert(size <= SIZE_MAX - sizeof(intset));",
          "",
          "---------------"
        ],
        "src/rdb.c||src/rdb.c": [
          "File: src/rdb.c -> src/rdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1518:         if ((len = rdbLoadLen(rdb,NULL)) == RDB_LENERR) return NULL;",
          "1522:             o = createSetObject();",
          "",
          "[Removed Lines]",
          "1521:         if (len > server.set_max_intset_entries) {",
          "",
          "[Added Lines]",
          "1521:         size_t max_entries = server.set_max_intset_entries;",
          "1522:         if (max_entries >= 1<<30) max_entries = 1<<30;",
          "1523:         if (len > max_entries) {",
          "",
          "---------------"
        ],
        "src/t_set.c||src/t_set.c": [
          "File: src/t_set.c -> src/t_set.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:             if (success) {",
          "70:                     setTypeConvert(subject,OBJ_ENCODING_HT);",
          "71:                 return 1;",
          "72:             }",
          "",
          "[Removed Lines]",
          "69:                 if (intsetLen(subject->ptr) > server.set_max_intset_entries)",
          "",
          "[Added Lines]",
          "69:                 size_t max_entries = server.set_max_intset_entries;",
          "71:                 if (max_entries >= 1<<30) max_entries = 1<<30;",
          "72:                 if (intsetLen(subject->ptr) > max_entries)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb7597f46ee7798531e236a20f41729d5a056050",
      "candidate_info": {
        "commit_hash": "bb7597f46ee7798531e236a20f41729d5a056050",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/bb7597f46ee7798531e236a20f41729d5a056050",
        "files": [
          "deps/hiredis/hiredis.c",
          "deps/hiredis/test.c"
        ],
        "message": "Fix redis-cli / redis-sential overflow on some platforms (CVE-2021-32762)\n\nThe redis-cli command line tool and redis-sentinel service may be vulnerable\nto integer overflow when parsing specially crafted large multi-bulk network\nreplies. This is a result of a vulnerability in the underlying hiredis\nlibrary which does not perform an overflow check before calling the calloc()\nheap allocation function.\n\nThis issue only impacts systems with heap allocators that do not perform their\nown overflow checks. Most modern systems do and are therefore not likely to\nbe affected. Furthermore, by default redis-sentinel uses the jemalloc allocator\nwhich is also not vulnerable.",
        "before_after_code_files": [
          "deps/hiredis/hiredis.c||deps/hiredis/hiredis.c",
          "deps/hiredis/test.c||deps/hiredis/test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/redis/redis/pull/9584"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "deps/hiredis/hiredis.c||deps/hiredis/hiredis.c": [
          "File: deps/hiredis/hiredis.c -> deps/hiredis/hiredis.c"
        ],
        "deps/hiredis/test.c||deps/hiredis/test.c": [
          "File: deps/hiredis/test.c -> deps/hiredis/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "400:     freeReplyObject(reply);",
          "401:     redisReaderFree(reader);",
          "403: #if LLONG_MAX > SIZE_MAX",
          "404:     test(\"Set error when array > SIZE_MAX: \");",
          "405:     reader = redisReaderCreate();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "403:     test(\"Multi-bulk never overflows regardless of maxelements: \");",
          "404:     size_t bad_mbulk_len = (SIZE_MAX / sizeof(void *)) + 3;",
          "405:     char bad_mbulk_reply[100];",
          "406:     snprintf(bad_mbulk_reply, sizeof(bad_mbulk_reply), \"*%llu\\r\\n+asdf\\r\\n\",",
          "407:         (unsigned long long) bad_mbulk_len);",
          "409:     reader = redisReaderCreate();",
          "411:     redisReaderFeed(reader, bad_mbulk_reply, strlen(bad_mbulk_reply));",
          "412:     ret = redisReaderGetReply(reader,&reply);",
          "413:     test_cond(ret == REDIS_ERR && strcasecmp(reader->errstr, \"Out of memory\") == 0);",
          "414:     freeReplyObject(reply);",
          "415:     redisReaderFree(reader);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dadc67a92e4dbd548701982921aa92e5612e3ce1",
      "candidate_info": {
        "commit_hash": "dadc67a92e4dbd548701982921aa92e5612e3ce1",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/dadc67a92e4dbd548701982921aa92e5612e3ce1",
        "files": [
          "src/sds.c"
        ],
        "message": "Fix integer overflow in _sdsMakeRoomFor (CVE-2021-41099)",
        "before_after_code_files": [
          "src/sds.c||src/sds.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/sds.c||src/sds.c"
          ],
          "candidate": [
            "src/sds.c||src/sds.c"
          ]
        }
      },
      "candidate_diff": {
        "src/sds.c||src/sds.c": [
          "File: src/sds.c -> src/sds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "233: sds sdsMakeRoomFor(sds s, size_t addlen) {",
          "234:     void *sh, *newsh;",
          "235:     size_t avail = sdsavail(s);",
          "237:     char type, oldtype = s[-1] & SDS_TYPE_MASK;",
          "238:     int hdrlen;",
          "239:     size_t usable;",
          "",
          "[Removed Lines]",
          "236:     size_t len, newlen;",
          "",
          "[Added Lines]",
          "236:     size_t len, newlen, reqlen;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:     len = sdslen(s);",
          "245:     sh = (char*)s-sdsHdrSize(oldtype);",
          "248:     if (newlen < SDS_MAX_PREALLOC)",
          "249:         newlen *= 2;",
          "",
          "[Removed Lines]",
          "246:     newlen = (len+addlen);",
          "",
          "[Added Lines]",
          "246:     reqlen = newlen = (len+addlen);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b0ac7427ba5a6e1bc89380e960b138af893bbdd",
      "candidate_info": {
        "commit_hash": "2b0ac7427ba5a6e1bc89380e960b138af893bbdd",
        "repo": "redis/redis",
        "commit_url": "https://github.com/redis/redis/commit/2b0ac7427ba5a6e1bc89380e960b138af893bbdd",
        "files": [
          "src/sds.c"
        ],
        "message": "Fix integer overflow in _sdsMakeRoomFor (CVE-2021-41099)",
        "before_after_code_files": [
          "src/sds.c||src/sds.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/sds.c||src/sds.c"
          ],
          "candidate": [
            "src/sds.c||src/sds.c"
          ]
        }
      },
      "candidate_diff": {
        "src/sds.c||src/sds.c": [
          "File: src/sds.c -> src/sds.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "205: sds sdsMakeRoomFor(sds s, size_t addlen) {",
          "206:     void *sh, *newsh;",
          "207:     size_t avail = sdsavail(s);",
          "209:     char type, oldtype = s[-1] & SDS_TYPE_MASK;",
          "210:     int hdrlen;",
          "",
          "[Removed Lines]",
          "208:     size_t len, newlen;",
          "",
          "[Added Lines]",
          "208:     size_t len, newlen, reqlen;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "215:     len = sdslen(s);",
          "216:     sh = (char*)s-sdsHdrSize(oldtype);",
          "219:     if (newlen < SDS_MAX_PREALLOC)",
          "220:         newlen *= 2;",
          "",
          "[Removed Lines]",
          "217:     newlen = (len+addlen);",
          "",
          "[Added Lines]",
          "217:     reqlen = newlen = (len+addlen);",
          "",
          "---------------"
        ]
      }
    }
  ]
}