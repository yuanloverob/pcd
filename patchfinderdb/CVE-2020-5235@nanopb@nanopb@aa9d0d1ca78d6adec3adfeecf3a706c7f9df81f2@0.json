{
  "cve_id": "CVE-2020-5235",
  "cve_desc": "There is a potentially exploitable out of memory condition In Nanopb before 0.4.1, 0.3.9.5, and 0.2.9.4. When nanopb is compiled with PB_ENABLE_MALLOC, the message to be decoded contains a repeated string, bytes or message field and realloc() runs out of memory when expanding the array nanopb can end up calling `free()` on a pointer value that comes from uninitialized memory. Depending on platform this can result in a crash or further memory corruption, which may be exploitable in some cases. This problem is fixed in nanopb-0.4.1, nanopb-0.3.9.5, nanopb-0.2.9.4.",
  "repo": "nanopb/nanopb",
  "patch_hash": "aa9d0d1ca78d6adec3adfeecf3a706c7f9df81f2",
  "patch_info": {
    "commit_hash": "aa9d0d1ca78d6adec3adfeecf3a706c7f9df81f2",
    "repo": "nanopb/nanopb",
    "commit_url": "https://github.com/nanopb/nanopb/commit/aa9d0d1ca78d6adec3adfeecf3a706c7f9df81f2",
    "files": [
      "pb_decode.c"
    ],
    "message": "Fix invalid free() after failed realloc() (GHSA-gcx3-7m76-287p)",
    "before_after_code_files": [
      "pb_decode.c||pb_decode.c"
    ]
  },
  "patch_diff": {
    "pb_decode.c||pb_decode.c": [
      "File: pb_decode.c -> pb_decode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "655:                 if (*size == PB_SIZE_MAX)",
      "656:                     PB_RETURN_ERROR(stream, \"too many array entries\");",
      "660:                     return false;",
      "663:                 initialize_pointer_field(pItem, iter);",
      "664:                 return func(stream, iter->pos, pItem);",
      "665:             }",
      "",
      "[Removed Lines]",
      "658:                 (*size)++;",
      "659:                 if (!allocate_field(stream, iter->pData, iter->pos->data_size, *size))",
      "662:                 pItem = *(char**)iter->pData + iter->pos->data_size * (*size - 1);",
      "",
      "[Added Lines]",
      "658:                 if (!allocate_field(stream, iter->pData, iter->pos->data_size, (size_t)(*size + 1)))",
      "661:                 pItem = *(char**)iter->pData + iter->pos->data_size * (*size);",
      "662:                 (*size)++;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7b396821ddd06df8e39143f16e1dc0a4645b89a3",
      "candidate_info": {
        "commit_hash": "7b396821ddd06df8e39143f16e1dc0a4645b89a3",
        "repo": "nanopb/nanopb",
        "commit_url": "https://github.com/nanopb/nanopb/commit/7b396821ddd06df8e39143f16e1dc0a4645b89a3",
        "files": [
          "pb_decode.c"
        ],
        "message": "Fix invalid free() after failed realloc() (GHSA-gcx3-7m76-287p)",
        "before_after_code_files": [
          "pb_decode.c||pb_decode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pb_decode.c||pb_decode.c"
          ],
          "candidate": [
            "pb_decode.c||pb_decode.c"
          ]
        }
      },
      "candidate_diff": {
        "pb_decode.c||pb_decode.c": [
          "File: pb_decode.c -> pb_decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "627:                 size_t *size = (size_t*)iter->pSize;",
          "628:                 void *pItem;",
          "632:                     return false;",
          "635:                 initialize_pointer_field(pItem, iter);",
          "636:                 return func(stream, iter->pos, pItem);",
          "637:             }",
          "",
          "[Removed Lines]",
          "630:                 (*size)++;",
          "631:                 if (!allocate_field(stream, iter->pData, iter->pos->data_size, *size))",
          "634:                 pItem = *(uint8_t**)iter->pData + iter->pos->data_size * (*size - 1);",
          "",
          "[Added Lines]",
          "630:                 if (!allocate_field(stream, iter->pData, iter->pos->data_size, (size_t)(*size + 1)))",
          "633:                 pItem = *(uint8_t**)iter->pData + iter->pos->data_size * (*size);",
          "634:                 (*size)++;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "45582f1f97f49e2abfdba1463d1e1027682d9856",
      "candidate_info": {
        "commit_hash": "45582f1f97f49e2abfdba1463d1e1027682d9856",
        "repo": "nanopb/nanopb",
        "commit_url": "https://github.com/nanopb/nanopb/commit/45582f1f97f49e2abfdba1463d1e1027682d9856",
        "files": [
          "pb_decode.c"
        ],
        "message": "Fix invalid free() after failed realloc() (GHSA-gcx3-7m76-287p)",
        "before_after_code_files": [
          "pb_decode.c||pb_decode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "pb_decode.c||pb_decode.c"
          ],
          "candidate": [
            "pb_decode.c||pb_decode.c"
          ]
        }
      },
      "candidate_diff": {
        "pb_decode.c||pb_decode.c": [
          "File: pb_decode.c -> pb_decode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "720:                 if (!check_wire_type(wire_type, field))",
          "721:                     PB_RETURN_ERROR(stream, \"wrong wire type\");",
          "725:                     return false;",
          "728:                 initialize_pointer_field(field->pData, field);",
          "729:                 return decode_basic_field(stream, field);",
          "730:             }",
          "",
          "[Removed Lines]",
          "723:                 (*size)++;",
          "724:                 if (!allocate_field(stream, field->pField, field->data_size, *size))",
          "727:                 field->pData = *(char**)field->pField + field->data_size * (*size - 1);",
          "",
          "[Added Lines]",
          "723:                 if (!allocate_field(stream, field->pField, field->data_size, (size_t)(*size + 1)))",
          "726:                 field->pData = *(char**)field->pField + field->data_size * (*size);",
          "727:                 (*size)++;",
          "",
          "---------------"
        ]
      }
    }
  ]
}