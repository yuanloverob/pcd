{
  "cve_id": "CVE-2019-9208",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.12 and 2.6.0 to 2.6.6, the TCAP dissector could crash. This was addressed in epan/dissectors/asn1/tcap/tcap.cnf by avoiding NULL pointer dereferences.",
  "repo": "wireshark/wireshark",
  "patch_hash": "34873a20eb489562098c5a58085ae783f869525c",
  "patch_info": {
    "commit_hash": "34873a20eb489562098c5a58085ae783f869525c",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/34873a20eb489562098c5a58085ae783f869525c",
    "files": [
      "epan/dissectors/asn1/tcap/tcap.cnf",
      "epan/dissectors/packet-tcap.c"
    ],
    "message": "tcap: check p_tcap_private before dereferencing.\n\nThis caused a NULL pointer dereference on ASAN builds with\nmalformed packets.\n\nAddressSanitizer:DEADLYSIGNAL\n=================================================================\n==15485==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x7ff49a4281fa bp 0x7ffe5257a4d0 sp 0x7ffe5257a2c0 T0)\n==15485==The signal is caused by a WRITE memory access.\n==15485==Hint: address points to the zero page.\n    #0 0x7ff49a4281f9 in dissect_tcap_AARQ_application_context_name wireshark/epan/dissectors/./asn1/tcap/tcap.cnf\n    #1 0x7ff498e7bab1 in dissect_ber_sequence wireshark/epan/dissectors/packet-ber.c:2425:17\n\nBug: 15464\nChange-Id: I8fd4f09a1356211acb180e4598a33fce96d98e94\nReviewed-on: https://code.wireshark.org/review/31840\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/asn1/tcap/tcap.cnf||epan/dissectors/asn1/tcap/tcap.cnf",
      "epan/dissectors/packet-tcap.c||epan/dissectors/packet-tcap.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/asn1/tcap/tcap.cnf||epan/dissectors/asn1/tcap/tcap.cnf": [
      "File: epan/dissectors/asn1/tcap/tcap.cnf -> epan/dissectors/asn1/tcap/tcap.cnf",
      "--- Hunk 1 ---",
      "[Context before]",
      "115: #.FN_BODY AUDT-apdu/_untag/application-context-name  FN_VARIANT = _str  VAL_PTR = &cur_oid",
      "116:   struct tcap_private_t *p_tcap_private = (struct tcap_private_t*)actx->value_ptr;",
      "117: %(DEFAULT_BODY)s",
      "120: #----------------------------------------------------------------------------------------",
      "121: #.FN_BODY AARQ-apdu/_untag/application-context-name  FN_VARIANT = _str  VAL_PTR = &cur_oid",
      "122:   struct tcap_private_t *p_tcap_private = (struct tcap_private_t*)actx->value_ptr;",
      "123: %(DEFAULT_BODY)s",
      "126: #----------------------------------------------------------------------------------------",
      "127: #.FN_BODY AARE-apdu/_untag/application-context-name  FN_VARIANT = _str  VAL_PTR = &cur_oid",
      "128:   struct tcap_private_t *p_tcap_private = (struct tcap_private_t*)actx->value_ptr;",
      "129: %(DEFAULT_BODY)s",
      "132: #----------------------------------------------------------------------------------------",
      "133: #.FN_BODY OrigTransactionID",
      "134:   tvbuff_t *parameter_tvb;",
      "",
      "[Removed Lines]",
      "118:   p_tcap_private->oid= (const void*) cur_oid;",
      "119:   p_tcap_private->acv=TRUE;",
      "124:   p_tcap_private->oid= (const void*) cur_oid;",
      "125:   p_tcap_private->acv=TRUE;",
      "130:   p_tcap_private->oid= (const void*) cur_oid;",
      "131:   p_tcap_private->acv=TRUE;",
      "",
      "[Added Lines]",
      "118:   if (p_tcap_private) {",
      "119:     p_tcap_private->oid= (const void*) cur_oid;",
      "120:     p_tcap_private->acv=TRUE;",
      "121:   }",
      "126:   if (p_tcap_private) {",
      "127:     p_tcap_private->oid= (const void*) cur_oid;",
      "128:     p_tcap_private->acv=TRUE;",
      "129:   }",
      "134:   if (p_tcap_private) {",
      "135:     p_tcap_private->oid= (const void*) cur_oid;",
      "136:     p_tcap_private->acv=TRUE;",
      "137:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "166:       gp_tcapsrt_info->src_tid=0;",
      "167:       break;",
      "168:     }",
      "171:     if (len) {",
      "172:       col_append_str(actx->pinfo->cinfo, COL_INFO, \"otid(\");",
      "",
      "[Removed Lines]",
      "169:     p_tcap_private->src_tid = gp_tcapsrt_info->src_tid;",
      "",
      "[Added Lines]",
      "175:     if (p_tcap_private)",
      "176:       p_tcap_private->src_tid = gp_tcapsrt_info->src_tid;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "214:       gp_tcapsrt_info->dst_tid=0;",
      "215:       break;",
      "216:     }",
      "219:     if (len) {",
      "220:       col_append_str(actx->pinfo->cinfo, COL_INFO, \"dtid(\");",
      "",
      "[Removed Lines]",
      "217:     p_tcap_private->dst_tid = gp_tcapsrt_info->dst_tid;",
      "",
      "[Added Lines]",
      "224:     if (p_tcap_private)",
      "225:       p_tcap_private->dst_tid = gp_tcapsrt_info->dst_tid;",
      "",
      "---------------"
    ],
    "epan/dissectors/packet-tcap.c||epan/dissectors/packet-tcap.c": [
      "File: epan/dissectors/packet-tcap.c -> epan/dissectors/packet-tcap.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "744: static int",
      "745: dissect_tcap_OrigTransactionID(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "747:   tvbuff_t *parameter_tvb;",
      "748:   guint8 len, i;",
      "749:   proto_tree *subtree;",
      "",
      "[Removed Lines]",
      "746: #line 134 \"./asn1/tcap/tcap.cnf\"",
      "",
      "[Added Lines]",
      "746: #line 140 \"./asn1/tcap/tcap.cnf\"",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "781:       gp_tcapsrt_info->src_tid=0;",
      "782:       break;",
      "783:     }",
      "786:     if (len) {",
      "787:       col_append_str(actx->pinfo->cinfo, COL_INFO, \"otid(\");",
      "",
      "[Removed Lines]",
      "784:     p_tcap_private->src_tid = gp_tcapsrt_info->src_tid;",
      "",
      "[Added Lines]",
      "784:     if (p_tcap_private)",
      "785:       p_tcap_private->src_tid = gp_tcapsrt_info->src_tid;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "808: static int",
      "809: dissect_tcap_Begin(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "811: gp_tcapsrt_info->ope=TC_BEGIN;",
      "",
      "[Removed Lines]",
      "810: #line 228 \"./asn1/tcap/tcap.cnf\"",
      "",
      "[Added Lines]",
      "811: #line 236 \"./asn1/tcap/tcap.cnf\"",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "830: static int",
      "831: dissect_tcap_DestTransactionID(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "833:   tvbuff_t *parameter_tvb;",
      "834:   guint8 len , i;",
      "835:   proto_tree *subtree;",
      "",
      "[Removed Lines]",
      "832: #line 182 \"./asn1/tcap/tcap.cnf\"",
      "",
      "[Added Lines]",
      "833: #line 189 \"./asn1/tcap/tcap.cnf\"",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "867:       gp_tcapsrt_info->dst_tid=0;",
      "868:       break;",
      "869:     }",
      "872:     if (len) {",
      "873:       col_append_str(actx->pinfo->cinfo, COL_INFO, \"dtid(\");",
      "",
      "[Removed Lines]",
      "870:     p_tcap_private->dst_tid = gp_tcapsrt_info->dst_tid;",
      "",
      "[Added Lines]",
      "871:     if (p_tcap_private)",
      "872:       p_tcap_private->dst_tid = gp_tcapsrt_info->dst_tid;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "893: static int",
      "894: dissect_tcap_End(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "896: gp_tcapsrt_info->ope=TC_END;",
      "898:   col_set_str(actx->pinfo->cinfo, COL_INFO, \"End \");",
      "",
      "[Removed Lines]",
      "895: #line 242 \"./asn1/tcap/tcap.cnf\"",
      "",
      "[Added Lines]",
      "897: #line 250 \"./asn1/tcap/tcap.cnf\"",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "915: static int",
      "916: dissect_tcap_Continue(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "918: gp_tcapsrt_info->ope=TC_CONT;",
      "920:   col_set_str(actx->pinfo->cinfo, COL_INFO, \"Continue \");",
      "",
      "[Removed Lines]",
      "917: #line 249 \"./asn1/tcap/tcap.cnf\"",
      "",
      "[Added Lines]",
      "919: #line 257 \"./asn1/tcap/tcap.cnf\"",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "986: static int",
      "987: dissect_tcap_Abort(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "989: gp_tcapsrt_info->ope=TC_ABORT;",
      "991:   col_set_str(actx->pinfo->cinfo, COL_INFO, \"Abort \");",
      "",
      "[Removed Lines]",
      "988: #line 256 \"./asn1/tcap/tcap.cnf\"",
      "",
      "[Added Lines]",
      "990: #line 264 \"./asn1/tcap/tcap.cnf\"",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1038:   struct tcap_private_t *p_tcap_private = (struct tcap_private_t*)actx->value_ptr;",
      "1039:   offset = dissect_ber_object_identifier_str(implicit_tag, actx, tree, tvb, offset, hf_index, &cur_oid);",
      "1045:   return offset;",
      "",
      "[Removed Lines]",
      "1041:   p_tcap_private->oid= (const void*) cur_oid;",
      "1042:   p_tcap_private->acv=TRUE;",
      "",
      "[Added Lines]",
      "1043:   if (p_tcap_private) {",
      "1044:     p_tcap_private->oid= (const void*) cur_oid;",
      "1045:     p_tcap_private->acv=TRUE;",
      "1046:   }",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "1133: static int",
      "1134: dissect_tcap_AARQ_application_context_name(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "1136:   struct tcap_private_t *p_tcap_private = (struct tcap_private_t*)actx->value_ptr;",
      "1137:   offset = dissect_ber_object_identifier_str(implicit_tag, actx, tree, tvb, offset, hf_index, &cur_oid);",
      "1143:   return offset;",
      "",
      "[Removed Lines]",
      "1135: #line 122 \"./asn1/tcap/tcap.cnf\"",
      "1139:   p_tcap_private->oid= (const void*) cur_oid;",
      "1140:   p_tcap_private->acv=TRUE;",
      "",
      "[Added Lines]",
      "1139: #line 124 \"./asn1/tcap/tcap.cnf\"",
      "1143:   if (p_tcap_private) {",
      "1144:     p_tcap_private->oid= (const void*) cur_oid;",
      "1145:     p_tcap_private->acv=TRUE;",
      "1146:   }",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "1202: static int",
      "1203: dissect_tcap_AARE_application_context_name(gboolean implicit_tag _U_, tvbuff_t *tvb _U_, int offset _U_, asn1_ctx_t *actx _U_, proto_tree *tree _U_, int hf_index _U_) {",
      "1205:   struct tcap_private_t *p_tcap_private = (struct tcap_private_t*)actx->value_ptr;",
      "1206:   offset = dissect_ber_object_identifier_str(implicit_tag, actx, tree, tvb, offset, hf_index, &cur_oid);",
      "1212:   return offset;",
      "",
      "[Removed Lines]",
      "1204: #line 128 \"./asn1/tcap/tcap.cnf\"",
      "1208:   p_tcap_private->oid= (const void*) cur_oid;",
      "1209:   p_tcap_private->acv=TRUE;",
      "",
      "[Added Lines]",
      "1210: #line 132 \"./asn1/tcap/tcap.cnf\"",
      "1214:   if (p_tcap_private) {",
      "1215:     p_tcap_private->oid= (const void*) cur_oid;",
      "1216:     p_tcap_private->acv=TRUE;",
      "1217:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e8f6a90a85e8b8d09b2f03f948cc634da2d5222d",
      "candidate_info": {
        "commit_hash": "e8f6a90a85e8b8d09b2f03f948cc634da2d5222d",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/e8f6a90a85e8b8d09b2f03f948cc634da2d5222d",
        "files": [
          "epan/dissectors/packet-smb2.c",
          "epan/dissectors/packet-smb2.h"
        ],
        "message": "SMB2: fix memleak of tids hash table\n\nCaught by ASAN:\n\n    Direct leak of 88 byte(s) in 1 object(s) allocated from:\n        #0 0x564bccf83549 in malloc (run/tshark+0x1b0549)\n        #1 0x7f8dd1d488d1 in g_malloc glib/glib/gmem.c:99:13\n        #2 0x7f8dd1d29094 in g_slice_alloc glib/glib/gslice.c:1024:11\n        #3 0x7f8dd1d64cde in g_hash_table_new_full glib/glib/ghash.c:717:16\n        #4 0x7f8dde889de6 in smb2_get_session epan/dissectors/packet-smb2.c:1135:15\n        #5 0x7f8dde89258e in dissect_smb2_session_setup_response epan/dissectors/packet-smb2.c:3356:16\n        #6 0x7f8dde8867cd in dissect_smb2_command epan/dissectors/packet-smb2.c:9189:12\n        #7 0x7f8dde87fb6e in dissect_smb2 epan/dissectors/packet-smb2.c:9543:27\n\nChange-Id: I33586e8d27263a8e546efb2ee3a3054eb9a66893\nReviewed-on: https://code.wireshark.org/review/31702\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Peter Wu <peter@lekensteyn.nl>",
        "before_after_code_files": [
          "epan/dissectors/packet-smb2.c||epan/dissectors/packet-smb2.c",
          "epan/dissectors/packet-smb2.h||epan/dissectors/packet-smb2.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-smb2.c||epan/dissectors/packet-smb2.c": [
          "File: epan/dissectors/packet-smb2.c -> epan/dissectors/packet-smb2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1132:   ses = wmem_new0(wmem_file_scope(), smb2_sesid_info_t);",
          "1133:   ses->sesid = id;",
          "1134:   ses->auth_frame = (guint32)-1;",
          "1136:   seskey_find_sid_key(id, ses->session_key);",
          "1137:   if (pinfo && si) {",
          "1138:    if (si->flags & SMB2_FLAGS_RESPONSE) {",
          "",
          "[Removed Lines]",
          "1135:   ses->tids = g_hash_table_new(smb2_tid_info_hash, smb2_tid_info_equal);",
          "",
          "[Added Lines]",
          "1135:   ses->tids = wmem_map_new(wmem_file_scope(), smb2_tid_info_hash, smb2_tid_info_equal);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3493:   smb2_tid_info_t *tid, tid_key;",
          "3495:   tid_key.tid = si->tid;",
          "3497:   if (tid) {",
          "3499:   }",
          "3500:   tid = wmem_new(wmem_file_scope(), smb2_tid_info_t);",
          "3501:   tid->tid = si->tid;",
          "",
          "[Removed Lines]",
          "3496:   tid = (smb2_tid_info_t *)g_hash_table_lookup(si->session->tids, &tid_key);",
          "3498:    g_hash_table_remove(si->session->tids, &tid_key);",
          "",
          "[Added Lines]",
          "3496:   tid = (smb2_tid_info_t *)wmem_map_lookup(si->session->tids, &tid_key);",
          "3498:    wmem_map_remove(si->session->tids, &tid_key);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3503:   tid->connect_frame = pinfo->num;",
          "3504:   tid->share_type = share_type;",
          "3508:   si->saved->extra_info_type = SMB2_EI_NONE;",
          "3509:   si->saved->extra_info = NULL;",
          "",
          "[Removed Lines]",
          "3506:   g_hash_table_insert(si->session->tids, tid, tid);",
          "",
          "[Added Lines]",
          "3506:   wmem_map_insert(si->session->tids, tid, tid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "9254:  if (!(si->flags&SMB2_FLAGS_ASYNC_CMD)) {",
          "9256:   tid_key.tid = si->tid;",
          "9258:   if (!si->tree) return offset;",
          "9260:   item = proto_tree_add_string(tid_tree, hf_smb2_tree, tvb, tid_offset, 4, si->tree->name);",
          "",
          "[Removed Lines]",
          "9257:   si->tree = (smb2_tid_info_t *)g_hash_table_lookup(si->session->tids, &tid_key);",
          "",
          "[Added Lines]",
          "9257:   si->tree = (smb2_tid_info_t *)wmem_map_lookup(si->session->tids, &tid_key);",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-smb2.h||epan/dissectors/packet-smb2.h": [
          "File: epan/dissectors/packet-smb2.h -> epan/dissectors/packet-smb2.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:  guint8 session_key[NTLMSSP_KEY_LEN];",
          "88:  guint8 client_decryption_key[16];",
          "89:  guint8 server_decryption_key[16];",
          "91:  guint8 preauth_hash[SMB2_PREAUTH_HASH_SIZE];",
          "92: } smb2_sesid_info_t;",
          "",
          "[Removed Lines]",
          "90:  GHashTable *tids;",
          "",
          "[Added Lines]",
          "90:  wmem_map_t *tids;",
          "",
          "---------------"
        ]
      }
    }
  ]
}