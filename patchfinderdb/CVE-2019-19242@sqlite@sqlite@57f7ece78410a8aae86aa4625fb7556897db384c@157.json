{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b8293a5bee4d064b29760da72c2aa9c17485d1a1",
      "candidate_info": {
        "commit_hash": "b8293a5bee4d064b29760da72c2aa9c17485d1a1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b8293a5bee4d064b29760da72c2aa9c17485d1a1",
        "files": [
          "ext/rbu/rbuexpr.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Update RBU so that it supports indexes on expressions.\n\nFossilOrigin-Name: 6bfa44da226fd758a2ee924d1e8e3a742b0635b6d3f922a4a7919cb14b2418e6",
        "before_after_code_files": [
          "ext/rbu/rbuexpr.test||ext/rbu/rbuexpr.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbuexpr.test||ext/rbu/rbuexpr.test": [
          "File: ext/rbu/rbuexpr.test -> ext/rbu/rbuexpr.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2014 August 30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname [info script]] rbu_common.tcl]",
          "14: set ::testprefix rbuexpr",
          "16: db close",
          "17: sqlite3_shutdown",
          "18: sqlite3_config_uri 1",
          "20: sqlite3 db test.db",
          "22: do_execsql_test 1.0 {",
          "23:   CREATE TABLE t1(a, b, c PRIMARY KEY);",
          "24:   CREATE INDEX i1 ON t1(a, null, b+1);",
          "25:   CREATE INDEX i2 ON t1(a+1, b+1, c+1);",
          "27:   INSERT INTO t1 VALUES(1, 2, 3);",
          "28:   INSERT INTO t1 VALUES(4, 5, 6);",
          "29:   INSERT INTO t1 VALUES(7, 8, 9);",
          "30:   INSERT INTO t1 VALUES(10, 11, 12);",
          "32:   PRAGMA integrity_check;",
          "33: } {ok}",
          "35: forcedelete rbu.db",
          "36: sqlite3 db2 rbu.db",
          "37: do_execsql_test -db db2 1.1 {",
          "38:   CREATE TABLE data_t1(a, b, c, rbu_control);",
          "39:   INSERT INTO data_t1 VALUES(13, 14, 15, 0);",
          "40:   INSERT INTO data_t1 VALUES(NULL, NULL, 6, 1);",
          "41:   INSERT INTO data_t1 VALUES(NULL, 'three', 3, '.x.');",
          "42: }",
          "43: db2 close",
          "44: db close",
          "46: do_test 1.2 {",
          "47:   run_rbu test.db rbu.db",
          "48: } {SQLITE_DONE}",
          "50: sqlite3 db test.db",
          "52: do_execsql_test 1.3 {",
          "53:   SELECT * FROM t1 WHERE a=4;",
          "54: }",
          "56: integrity_check 1.4",
          "58: #-------------------------------------------------------------------------",
          "59: #",
          "60: reset_db",
          "61: do_execsql_test 2.0 {",
          "62:   CREATE TABLE t1(c1, c2, c3, i INTEGER PRIMARY KEY);",
          "63:   INSERT INTO t1 VALUES('one', 'one', 'one', 1);",
          "64:   INSERT INTO t1 VALUES('two', 'two', 'two', 2);",
          "65:   INSERT INTO t1 VALUES('three', 'three', 'three', 3);",
          "66:   INSERT INTO t1 VALUES('four', 'four', 'four', 4);",
          "68:   CREATE INDEX i1 ON t1( substr(c1, 1, 2) );",
          "69:   CREATE INDEX i2 ON t1( c1 || c2 || c3 );",
          "70:   CREATE INDEX i3 ON t1( length(c1) + length(c2) - 1, c3||i );",
          "71: }",
          "73: forcedelete rbu.db",
          "74: sqlite3 db2 rbu.db",
          "75: do_execsql_test -db db2 2.1 {",
          "76:   CREATE TABLE data_t1(c1, c2, c3, i, rbu_control);",
          "77:   INSERT INTO data_t1 VALUES(NULL, NULL, NULL, 2, 1);",
          "78:   INSERT INTO data_t1 VALUES('thirty', NULL, NULL, 3, 'xx..');",
          "79:   INSERT INTO data_t1 VALUES('five', 'five', 'five', 5, 0);",
          "80: }",
          "81: db2 close",
          "83: db close",
          "85: do_test 2.2 {",
          "86:   run_rbu test.db rbu.db",
          "87: } {SQLITE_DONE}",
          "89: sqlite3 db test.db",
          "90: integrity_check 2.3",
          "92: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: typedef struct RbuFrame RbuFrame;",
          "183: typedef struct RbuObjIter RbuObjIter;",
          "184: typedef struct RbuState RbuState;",
          "185: typedef struct rbu_vfs rbu_vfs;",
          "186: typedef struct rbu_file rbu_file;",
          "187: typedef struct RbuUpdateStmt RbuUpdateStmt;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "185: typedef struct RbuSpan RbuSpan;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "226:   RbuUpdateStmt *pNext;",
          "227: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "230: struct RbuSpan {",
          "231:   const char *zSpan;",
          "232:   int nSpan;",
          "233: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "280:   RbuUpdateStmt *pRbuUpdate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "284:   int nIdxCol;",
          "285:   RbuSpan *aIdxCol;",
          "286:   char *zIdxSql;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "809:     sqlite3_free(pUp);",
          "810:     pUp = pTmp;",
          "811:   }",
          "813:   pIter->pSelect = 0;",
          "814:   pIter->pInsert = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "821:   sqlite3_free(pIter->aIdxCol);",
          "822:   sqlite3_free(pIter->zIdxSql);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "816:   pIter->pRbuUpdate = 0;",
          "817:   pIter->pTmpInsert = 0;",
          "818:   pIter->nCol = 0;",
          "819: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "830:   pIter->nIdxCol = 0;",
          "831:   pIter->aIdxCol = 0;",
          "832:   pIter->zIdxSql = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1089: static char *rbuStrndup(const char *zStr, int *pRc){",
          "1090:   char *zRet = 0;",
          "1100:     }",
          "1101:   }",
          "",
          "[Removed Lines]",
          "1092:   assert( *pRc==SQLITE_OK );",
          "1093:   if( zStr ){",
          "1094:     size_t nCopy = strlen(zStr) + 1;",
          "1095:     zRet = (char*)sqlite3_malloc64(nCopy);",
          "1096:     if( zRet ){",
          "1097:       memcpy(zRet, zStr, nCopy);",
          "1098:     }else{",
          "",
          "[Added Lines]",
          "1106:   if( *pRc==SQLITE_OK ){",
          "1107:     if( zStr ){",
          "1108:       size_t nCopy = strlen(zStr) + 1;",
          "1109:       zRet = (char*)sqlite3_malloc64(nCopy);",
          "1110:       if( zRet ){",
          "1111:         memcpy(zRet, zStr, nCopy);",
          "1112:       }else{",
          "1114:       }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1268:     while( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pXInfo) ){",
          "1269:       int iCid = sqlite3_column_int(pXInfo, 1);",
          "1270:       if( iCid>=0 ) pIter->abIndexed[iCid] = 1;",
          "1271:     }",
          "1272:     rbuFinalize(p, pXInfo);",
          "1273:     bIndex = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1286:       if( iCid==-2 ){",
          "1287:         memset(pIter->abIndexed, 0x01, sizeof(u8)*pIter->nTblCol);",
          "1288:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1682:     const char *zCol;",
          "1683:     const char *zType;",
          "1695:       }else{",
          "1697:       }",
          "1702:     }",
          "1705:     if( pIter->bUnique==0 || sqlite3_column_int(pXInfo, 5) ){",
          "1706:       const char *zOrder = (bDesc ? \" DESC\" : \"\");",
          "1707:       zImpPK = sqlite3_mprintf(\"%z%s\\\"rbu_imp_%d%w\\\"%s\",",
          "",
          "[Removed Lines]",
          "1685:     if( iCid<0 ){",
          "1688:       if( pIter->eType==RBU_PK_IPK ){",
          "1689:         int i;",
          "1690:         for(i=0; pIter->abTblPk[i]==0; i++);",
          "1691:         assert( i<pIter->nTblCol );",
          "1692:         zCol = pIter->azTblCol[i];",
          "1693:       }else if( rbuIsVacuum(p) ){",
          "1694:         zCol = \"_rowid_\";",
          "1696:         zCol = \"rbu_rowid\";",
          "1698:       zType = \"INTEGER\";",
          "1699:     }else{",
          "1700:       zCol = pIter->azTblCol[iCid];",
          "1701:       zType = pIter->azTblType[iCid];",
          "1704:     zRet = sqlite3_mprintf(\"%z%s\\\"%w\\\" COLLATE %Q\", zRet, zCom, zCol, zCollate);",
          "",
          "[Added Lines]",
          "1703:     if( iCid==-2 ){",
          "1704:       int iSeq = sqlite3_column_int(pXInfo, 0);",
          "1705:       zRet = sqlite3_mprintf(\"%z%s(%.*s) COLLATE %Q\", zRet, zCom,",
          "1706:           pIter->aIdxCol[iSeq].nSpan, pIter->aIdxCol[iSeq].zSpan, zCollate",
          "1707:       );",
          "1708:       zType = \"\";",
          "1709:     }else {",
          "1710:       if( iCid<0 ){",
          "1713:         if( pIter->eType==RBU_PK_IPK ){",
          "1714:           int i;",
          "1715:           for(i=0; pIter->abTblPk[i]==0; i++);",
          "1716:           assert( i<pIter->nTblCol );",
          "1717:           zCol = pIter->azTblCol[i];",
          "1718:         }else if( rbuIsVacuum(p) ){",
          "1719:           zCol = \"_rowid_\";",
          "1720:         }else{",
          "1721:           zCol = \"rbu_rowid\";",
          "1722:         }",
          "1723:         zType = \"INTEGER\";",
          "1725:         zCol = pIter->azTblCol[iCid];",
          "1726:         zType = pIter->azTblType[iCid];",
          "1728:       zRet = sqlite3_mprintf(\"%z%s\\\"%w\\\" COLLATE %Q\", zRet, zCom,zCol,zCollate);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2181:   int rc = p->rc;",
          "2182:   char *zRet = 0;",
          "2184:   if( rc==SQLITE_OK ){",
          "2185:     rc = prepareAndCollectError(p->dbMain, &pStmt, &p->zErrmsg,",
          "2186:         \"SELECT trim(sql) FROM sqlite_master WHERE type='index' AND name=?\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2210:   assert( pIter->zIdxSql==0 && pIter->nIdxCol==0 && pIter->aIdxCol==0 );",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2190:     int rc2;",
          "2191:     rc = sqlite3_bind_text(pStmt, 1, pIter->zIdx, -1, SQLITE_STATIC);",
          "2192:     if( rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pStmt) ){",
          "2194:       if( zSql ){",
          "2196:         int i;",
          "2197:         for(i=0; zSql[i]; i++){",
          "2198:           char c = zSql[i];",
          "2199:           if( c=='(' ){",
          "2200:             nParen++;",
          "2201:           }",
          "2202:           else if( c==')' ){",
          "2203:             nParen--;",
          "2204:             if( nParen==0 ){",
          "2205:               i++;",
          "2206:               break;",
          "2207:             }",
          "2208:           }else if( c=='\"' || c=='\\'' || c=='`' ){",
          "2209:             for(i++; 1; i++){",
          "2210:               if( zSql[i]==c ){",
          "",
          "[Removed Lines]",
          "2193:       const char *zSql = (const char*)sqlite3_column_text(pStmt, 0);",
          "",
          "[Added Lines]",
          "2221:       char *zSql = (char*)sqlite3_column_text(pStmt, 0);",
          "2222:       if( zSql ){",
          "2223:         pIter->zIdxSql = zSql = rbuStrndup(zSql, &rc);",
          "2224:       }",
          "2228:         int iIdxCol = 0;",
          "2229:         int nIdxAlloc = 0;",
          "2234:           if( iIdxCol==nIdxAlloc ){",
          "2235:             RbuSpan *aIdxCol = (RbuSpan*)sqlite3_realloc(",
          "2236:                 pIter->aIdxCol, (nIdxAlloc+16)*sizeof(RbuSpan)",
          "2237:             );",
          "2238:             if( aIdxCol==0 ){",
          "2239:               rc = SQLITE_NOMEM;",
          "2240:               break;",
          "2241:             }",
          "2242:             pIter->aIdxCol = aIdxCol;",
          "2243:             nIdxAlloc += 16;",
          "2244:           }",
          "2247:             if( nParen==0 ){",
          "2248:               assert( iIdxCol==0 );",
          "2249:               pIter->aIdxCol[0].zSpan = &zSql[i+1];",
          "2250:             }",
          "2256:               int nSpan = &zSql[i] - pIter->aIdxCol[iIdxCol].zSpan;",
          "2257:               pIter->aIdxCol[iIdxCol++].nSpan = nSpan;",
          "2261:           }else if( c==',' && nParen==1 ){",
          "2262:             int nSpan = &zSql[i] - pIter->aIdxCol[iIdxCol].zSpan;",
          "2263:             pIter->aIdxCol[iIdxCol++].nSpan = nSpan;",
          "2264:             pIter->aIdxCol[iIdxCol].zSpan = &zSql[i+1];",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2228:         if( zSql[i] ){",
          "2229:           zRet = rbuStrndup(&zSql[i], &rc);",
          "2230:         }",
          "2231:       }",
          "2232:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2288:         pIter->nIdxCol = iIdxCol;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2272:       int nBind = 0;",
          "2274:       assert( pIter->eType!=RBU_PK_VTAB );",
          "2275:       zCollist = rbuObjIterGetIndexCols(",
          "2276:           p, pIter, &zImposterCols, &zImposterPK, &zWhere, &nBind",
          "2277:       );",
          "2278:       zBind = rbuObjIterGetBindlist(p, nBind);",
          "2282:       sqlite3_test_control(SQLITE_TESTCTRL_IMPOSTER, p->dbMain, \"main\", 0, 1);",
          "",
          "[Removed Lines]",
          "2279:       zPart = rbuObjIterGetIndexWhere(p, pIter);",
          "",
          "[Added Lines]",
          "2333:       zPart = rbuObjIterGetIndexWhere(p, pIter);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e1ccf211aa975a6688a27f7dc4cea80784ed8dcfe1950b2fa6eb0a3cb938838a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a046643820b0401625b7c0ba5b2d1aa482f3fccd",
      "candidate_info": {
        "commit_hash": "a046643820b0401625b7c0ba5b2d1aa482f3fccd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a046643820b0401625b7c0ba5b2d1aa482f3fccd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "test/fuzzdata8.db"
        ],
        "message": "More robust handling of corrupt database file in the rebalance operation of the btree logic.\n\nFossilOrigin-Name: 97704cb7d29fa7cc4ea9a6761a7844c1946d637ea2b22d287fc787ae0f63c407",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7c862c4655841e1263cf548d01f5b4331685ab7d396494891cad0a5f50c63e16",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6825:   assert( i<iEnd );",
          "6826:   j = get2byte(&aData[hdr+5]);",
          "6827:   memcpy(&pTmp[j], &aData[j], usableSize - j);",
          "6829:   for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6827:   if( NEVER(j>usableSize) ){ j = 0; }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7037: #endif",
          "7040:   if( iOld<iNew ){",
          "7041:     int nShift = pageFreeArray(pPg, iOld, iNew-iOld, pCArray);",
          "7042:     memmove(pPg->aCellIdx, &pPg->aCellIdx[nShift*2], nCell*2);",
          "7043:     nCell -= nShift;",
          "7044:   }",
          "7045:   if( iNewEnd < iOldEnd ){",
          "7047:   }",
          "7049:   pData = &aData[get2byteNotZero(&aData[hdr+5])];",
          "",
          "[Removed Lines]",
          "7046:     nCell -= pageFreeArray(pPg, iNewEnd, iOldEnd - iNewEnd, pCArray);",
          "",
          "[Added Lines]",
          "7041:   assert( nCell>=0 );",
          "7044:     if( nShift>nCell ) return SQLITE_CORRUPT_BKPT;",
          "7049:     int nTail = pageFreeArray(pPg, iNewEnd, iOldEnd - iNewEnd, pCArray);",
          "7050:     assert( nCell>=nTail );",
          "7051:     nCell -= nTail;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7053:   if( iNew<iOld ){",
          "7054:     int nAdd = MIN(nNew,iOld-iNew);",
          "7055:     assert( (iOld-iNew)<nNew || nCell==0 || CORRUPT_DB );",
          "7056:     pCellptr = pPg->aCellIdx;",
          "7057:     memmove(&pCellptr[nAdd*2], pCellptr, nCell*2);",
          "7058:     if( pageInsertArray(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7061:     assert( nAdd>=0 );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7067:     int iCell = (iOld + pPg->aiOvfl[i]) - iNew;",
          "7068:     if( iCell>=0 && iCell<nNew ){",
          "7069:       pCellptr = &pPg->aCellIdx[iCell * 2];",
          "7070:       memmove(&pCellptr[2], pCellptr, (nCell - iCell) * 2);",
          "7071:       nCell++;",
          "7072:       if( pageInsertArray(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7076:       assert( nCell>=iCell );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "7077:   }",
          "7080:   pCellptr = &pPg->aCellIdx[nCell*2];",
          "7081:   if( pageInsertArray(",
          "7082:         pPg, pBegin, &pData, pCellptr,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7087:   assert( nCell>=0 );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a518843f5945fb2e985ef568631694c743f0feb",
      "candidate_info": {
        "commit_hash": "9a518843f5945fb2e985ef568631694c743f0feb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9a518843f5945fb2e985ef568631694c743f0feb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Detect an attempt to drop a btree that is not within the bounds of the database file and abort early with an SQLITE_CORRUPT error, to avoid problems later on in the process.\n\nFossilOrigin-Name: 235a9698f5e9b3c21dc51c9c5042becfb82fc1762a7519a46b9f9fdafe9b0f13",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ee642d3e2775ba4c73627ac71d0abf7a0f7a4ab3151d88e0076e9992f4814983",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "9268:   assert( sqlite3BtreeHoldsMutex(p) );",
          "9269:   assert( p->inTrans==TRANS_WRITE );",
          "9270:   assert( iTable>=2 );",
          "9272:   rc = btreeGetPage(pBt, (Pgno)iTable, &pPage, 0);",
          "9273:   if( rc ) return rc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9271:   if( iTable>btreePagecount(pBt) ){",
          "9272:     return SQLITE_CORRUPT_BKPT;",
          "9273:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b22c1b8168ce18d5582fc0004369ecef8f7d939",
      "candidate_info": {
        "commit_hash": "1b22c1b8168ce18d5582fc0004369ecef8f7d939",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1b22c1b8168ce18d5582fc0004369ecef8f7d939",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test",
          "ext/misc/uuid.c",
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/insert.c",
          "src/parse.y",
          "src/treeview.c",
          "src/vdbe.h",
          "src/vdbeaux.c",
          "test/rowvalue.test",
          "test/trigger1.test"
        ],
        "message": "Merge fixes from trunk.\n\nFossilOrigin-Name: 4ec57d88415fa4ea2e99d4a5671074ec6829d6824bc8509d5ae9c978d47d1419",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "ext/misc/uuid.c||ext/misc/uuid.c",
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/parse.y||src/parse.y",
          "src/treeview.c||src/treeview.c",
          "src/vdbe.h||src/vdbe.h",
          "src/vdbeaux.c||src/vdbeaux.c",
          "test/rowvalue.test||test/rowvalue.test",
          "test/trigger1.test||test/trigger1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/expr.c||src/expr.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5318:   for(i=0; i<nChar; i++){",
          "5320:     if( (unsigned char)p[n++]>=0xc0 ){",
          "5321:       while( (p[n] & 0xc0)==0x80 ){",
          "5322:         n++;",
          "5323:         if( n>=nByte ) break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5321:       if( n>=nByte ) break;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:   SELECT rowid FROM t1 WHERE rowid=2 AND t1 = 'hello';",
          "219: }",
          "222: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: #-------------------------------------------------------------------------",
          "222: #",
          "223: reset_db",
          "224: do_execsql_test 8.0 {",
          "225:   CREATE VIRTUAL TABLE vt0 USING fts5(c0, tokenize = \"ascii\", prefix = 1);",
          "226:   INSERT INTO vt0(c0) VALUES (x'd1');",
          "227: }",
          "229: breakpoint",
          "230: do_execsql_test 8.1 {",
          "231:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "232: }",
          "",
          "---------------"
        ],
        "ext/misc/uuid.c||ext/misc/uuid.c": [
          "File: ext/misc/uuid.c -> ext/misc/uuid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #include \"sqlite3ext.h\"",
          "62: SQLITE_EXTENSION_INIT1",
          "63: #include <assert.h>",
          "64: #include <string.h>",
          "65: #include <ctype.h>",
          "67: #if !defined(SQLITE_ASCII) && !defined(SQLITE_EBCDIC)",
          "68: # define SQLITE_ASCII 1",
          "69: #endif",
          "76: static unsigned char sqlite3UuidHexToInt(int h){",
          "77:   assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );",
          "78: #ifdef SQLITE_ASCII",
          "79:   h += 9*(1&(h>>6));",
          "80: #endif",
          "81: #ifdef SQLITE_EBCDIC",
          "82:   h += 9*(1&~(h>>4));",
          "83: #endif",
          "84:   return (unsigned char)(h & 0xf);",
          "85: }",
          "92: static void sqlite3UuidBlobToStr(",
          "95: ){",
          "96:   static const char zDigits[] = \"0123456789abcdef\";",
          "97:   int i, k;",
          "98:   unsigned char x;",
          "99:   k = 0;",
          "100:   for(i=0, k=0x550; i<16; i++, k=k>>1){",
          "101:     if( k&1 ){",
          "102:       zStr[0] = '-';",
          "103:       zStr++;",
          "104:     }",
          "105:     x = aBlob[i];",
          "106:     zStr[0] = zDigits[x>>4];",
          "107:     zStr[1] = zDigits[x&0xf];",
          "108:     zStr += 2;",
          "109:   }",
          "111: }",
          "118: static int sqlite3UuidStrToBlob(",
          "121: ){",
          "122:   int i;",
          "123:   if( zStr[0]=='{' ) zStr++;",
          "124:   for(i=0; i<16; i++){",
          "125:     if( zStr[0]=='-' ) zStr++;",
          "126:     if( isxdigit(zStr[0]) && isxdigit(zStr[1]) ){",
          "127:       aBlob[i] = (sqlite3UuidHexToInt(zStr[0])<<4)",
          "128:                       + sqlite3UuidHexToInt(zStr[1]);",
          "129:       zStr += 2;",
          "130:     }else{",
          "131:       return 1;",
          "132:     }",
          "133:   }",
          "134:   if( zStr[0]=='}' ) zStr++;",
          "135:   return zStr[0]!=0;",
          "136: }",
          "142: static const unsigned char *sqlite3UuidInputToBlob(",
          "145: ){",
          "146:   switch( sqlite3_value_type(pIn) ){",
          "147:     case SQLITE_TEXT: {",
          "148:       const unsigned char *z = sqlite3_value_text(pIn);",
          "149:       if( sqlite3UuidStrToBlob(z, pBuf) ) return 0;",
          "150:       return pBuf;",
          "151:     }",
          "152:     case SQLITE_BLOB: {",
          "153:       int n = sqlite3_value_bytes(pIn);",
          "154:       return n==16 ? sqlite3_value_blob(pIn) : 0;",
          "155:     }",
          "156:     default: {",
          "157:       return 0;",
          "158:     }",
          "159:   }",
          "160: }",
          "163: static void sqlite3UuidFunc(",
          "164:   sqlite3_context *context,",
          "165:   int argc,",
          "166:   sqlite3_value **argv",
          "167: ){",
          "168:   unsigned char aBlob[16];",
          "169:   unsigned char zStr[37];",
          "170:   (void)argc;",
          "171:   (void)argv;",
          "172:   sqlite3_randomness(16, aBlob);",
          "173:   aBlob[6] = (aBlob[6]&0x0f) + 0x40;",
          "174:   aBlob[8] = (aBlob[8]&0x3f) + 0x80;",
          "175:   sqlite3UuidBlobToStr(aBlob, zStr);",
          "176:   sqlite3_result_text(context, (char*)zStr, 36, SQLITE_TRANSIENT);",
          "177: }",
          "180: static void sqlite3UuidStrFunc(",
          "181:   sqlite3_context *context,",
          "182:   int argc,",
          "183:   sqlite3_value **argv",
          "184: ){",
          "185:   unsigned char aBlob[16];",
          "186:   unsigned char zStr[37];",
          "187:   const unsigned char *pBlob;",
          "188:   (void)argc;",
          "189:   pBlob = sqlite3UuidInputToBlob(argv[0], aBlob);",
          "190:   if( pBlob==0 ) return;",
          "191:   sqlite3UuidBlobToStr(pBlob, zStr);",
          "192:   sqlite3_result_text(context, (char*)zStr, 36, SQLITE_TRANSIENT);",
          "193: }",
          "196: static void sqlite3UuidBlobFunc(",
          "197:   sqlite3_context *context,",
          "198:   int argc,",
          "199:   sqlite3_value **argv",
          "200: ){",
          "201:   unsigned char aBlob[16];",
          "202:   const unsigned char *pBlob;",
          "203:   (void)argc;",
          "204:   pBlob = sqlite3UuidInputToBlob(argv[0], aBlob);",
          "205:   if( pBlob==0 ) return;",
          "206:   sqlite3_result_blob(context, pBlob, 16, SQLITE_TRANSIENT);",
          "207: }",
          "209: #ifdef _WIN32",
          "210: __declspec(dllexport)",
          "211: #endif",
          "212: int sqlite3_uuid_init(",
          "213:   sqlite3 *db,",
          "214:   char **pzErrMsg,",
          "215:   const sqlite3_api_routines *pApi",
          "216: ){",
          "217:   int rc = SQLITE_OK;",
          "218:   SQLITE_EXTENSION_INIT2(pApi);",
          "220:   rc = sqlite3_create_function(db, \"uuid\", 0, SQLITE_UTF8, 0,",
          "221:                                sqlite3UuidFunc, 0, 0);",
          "222:   if( rc==SQLITE_OK ){",
          "223:     rc = sqlite3_create_function(db, \"uuid_str\", 1, SQLITE_UTF8, 0,",
          "224:                                  sqlite3UuidStrFunc, 0, 0);",
          "225:   }",
          "226:   if( rc==SQLITE_OK ){",
          "227:     rc = sqlite3_create_function(db, \"uuid_blob\", 1, SQLITE_UTF8, 0,",
          "228:                                  sqlite3UuidBlobFunc, 0, 0);",
          "229:   }",
          "230:   return rc;",
          "231: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b99d5701312f7472e6b606bd824f9273617e2655920485bf50aa96d408064721",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "175:       p = p->pLeft;",
          "176:       continue;",
          "177:     }",
          "178:     if( op==TK_COLLATE ){",
          "179:       pColl = sqlite3GetCollSeq(pParse, ENC(db), 0, p->u.zToken);",
          "180:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "178:     if( op==TK_VECTOR ){",
          "179:       p = p->x.pList->a[0].pExpr;",
          "180:       continue;",
          "181:     }",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1197:       sqlite3CompleteInsertion(pParse, pTab, iDataCur, iIdxCur,",
          "1198:           regIns, aRegIdx, 0, appendFlag, bUseSeek",
          "1199:       );",
          "",
          "[Removed Lines]",
          "1194:       bUseSeek = (isReplace==0 || (pTrigger==0 &&",
          "1195:           ((db->flags & SQLITE_ForeignKeys)==0 || sqlite3FkReferences(pTab)==0)",
          "1196:       ));",
          "",
          "[Added Lines]",
          "1194:       bUseSeek = (isReplace==0 || !sqlite3VdbeHasSubProgram(v));",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1075:   A = sqlite3PExpr(pParse, TK_VECTOR, 0, 0);",
          "1076:   if( A ){",
          "1077:     A->x.pList = pList;",
          "1078:   }else{",
          "1079:     sqlite3ExprListDelete(pParse->db, pList);",
          "1080:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1078:     if( pList->nExpr ){",
          "1079:       A->flags |= pList->a[0].pExpr->flags & EP_Propagate;",
          "1080:     }",
          "",
          "---------------"
        ],
        "src/treeview.c||src/treeview.c": [
          "File: src/treeview.c -> src/treeview.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "661:       break;",
          "662:     }",
          "663:     case TK_VECTOR: {",
          "665:       break;",
          "666:     }",
          "667:     case TK_SELECT_COLUMN: {",
          "",
          "[Removed Lines]",
          "664:       sqlite3TreeViewBareExprList(pView, pExpr->x.pList, \"VECTOR\");",
          "",
          "[Added Lines]",
          "664:       char *z = sqlite3_mprintf(\"VECTOR%s\",zFlgs);",
          "665:       sqlite3TreeViewBareExprList(pView, pExpr->x.pList, z);",
          "666:       sqlite3_free(z);",
          "",
          "---------------"
        ],
        "src/vdbe.h||src/vdbe.h": [
          "File: src/vdbe.h -> src/vdbe.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "279: typedef int (*RecordCompare)(int,const void*,UnpackedRecord*);",
          "280: RecordCompare sqlite3VdbeFindCompare(UnpackedRecord*);",
          "283: void sqlite3VdbeLinkSubProgram(Vdbe *, SubProgram *);",
          "286: int sqlite3NotPureFunc(sqlite3_context*);",
          "",
          "[Removed Lines]",
          "282: #ifndef SQLITE_OMIT_TRIGGER",
          "284: #endif",
          "",
          "[Added Lines]",
          "283: int sqlite3VdbeHasSubProgram(Vdbe*);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1105:   pVdbe->pProgram = p;",
          "1106: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1111: int sqlite3VdbeHasSubProgram(Vdbe *pVdbe){",
          "1112:   return pVdbe->pProgram!=0;",
          "1113: }",
          "",
          "---------------"
        ],
        "test/rowvalue.test||test/rowvalue.test": [
          "File: test/rowvalue.test -> test/rowvalue.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "595:   SELECT 2 FROM t0 WHERE (t0.c0, TRUE) > (CAST('' AS REAL), FALSE);",
          "596: } {1 2}",
          "598: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "598: # 2019-10-23 Ticket 135c9da7513e5a97",
          "599: do_execsql_test 25.10 {",
          "600:   DROP TABLE t0;",
          "601:   CREATE TABLE t0(c0 UNIQUE);",
          "602:   INSERT INTO t0(c0) VALUES('a');",
          "603:   SELECT (t0.c0, 0) < ('B' COLLATE NOCASE, 0) FROM t0;",
          "604:   SELECT 2 FROM t0 WHERE (t0.c0, 0) < ('B' COLLATE NOCASE, 0);",
          "605: } {1 2}",
          "606: do_execsql_test 25.20 {",
          "607:   SELECT ('B' COLLATE NOCASE, 0)> (t0.c0, 0) FROM t0;",
          "608:   SELECT 2 FROM t0 WHERE ('B' COLLATE NOCASE, 0)> (t0.c0, 0);",
          "609: } {1 2}",
          "610: do_execsql_test 25.30 {",
          "611:   SELECT ('B', 0)> (t0.c0 COLLATE nocase, 0) FROM t0;",
          "612:   SELECT 2 FROM t0 WHERE ('B', 0)> (t0.c0 COLLATE nocase, 0);",
          "613: } {1 2}",
          "614: do_execsql_test 25.40 {",
          "615:   SELECT (t0.c0 COLLATE nocase, 0) < ('B', 0) FROM t0;",
          "616:   SELECT 2 FROM t0 WHERE (t0.c0 COLLATE nocase, 0) < ('B', 0);",
          "617: } {1 2}",
          "",
          "---------------"
        ],
        "test/trigger1.test||test/trigger1.test": [
          "File: test/trigger1.test -> test/trigger1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "782:   DROP TRIGGER r20_3;",
          "783: } {}",
          "785: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "785: # 2019-10-24 ticket 50c09fc2cf0d91ce",
          "786: #",
          "787: db close",
          "788: sqlite3 db :memory:",
          "789: do_execsql_test trigger1-21.1 {",
          "790:   PRAGMA recursive_triggers = true;",
          "791:   CREATE TABLE t0(a, b, c UNIQUE);",
          "792:   CREATE UNIQUE INDEX i0 ON t0(b) WHERE a;",
          "793:   CREATE TRIGGER tr0 AFTER DELETE ON t0 BEGIN",
          "794:     DELETE FROM t0;",
          "795:   END;",
          "796:   INSERT INTO t0(a,b,c) VALUES(0,0,9),(1,1,1);",
          "797:   REPLACE INTO t0(a,b,c) VALUES(2,0,9);",
          "798:   SELECT * FROM t0;",
          "799: } {2 0 9}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "41428a97b86b89395e9bdf0f38cf7d83ab2b451b",
      "candidate_info": {
        "commit_hash": "41428a97b86b89395e9bdf0f38cf7d83ab2b451b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/41428a97b86b89395e9bdf0f38cf7d83ab2b451b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "For the \".testctrl prng_seed\" command in the CLI, if the argument is \"random\" then select a random integer seed and print the seed value on stdout.\n\nFossilOrigin-Name: 636ca4472c9f41eb3989f28854d4968867837399a2092f389d1b814d98cccbae",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 48d9b48ab4ace234eb1a055cf33cb533a1c3aa82d0a6e086d96226bd9474ceca",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9265:           if( nArg==3 || nArg==4 ){",
          "9266:             int ii = (int)integerValue(azArg[2]);",
          "9267:             sqlite3 *db;",
          "9268:             if( nArg==3 ){",
          "9269:               db = 0;",
          "9270:             }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9268:             if( ii==0 && strcmp(azArg[2],\"random\")==0 ){",
          "9269:               sqlite3_randomness(sizeof(ii),&ii);",
          "9270:               printf(\"-- random seed: %d\\n\", ii);",
          "9271:             }",
          "",
          "---------------"
        ]
      }
    }
  ]
}