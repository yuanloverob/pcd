{
  "cve_id": "CVE-2019-12098",
  "cve_desc": "In the client side of Heimdal before 7.6.0, failure to verify anonymous PKINIT PA-PKINIT-KX key exchange permits a man-in-the-middle attack. This issue is in krb5_init_creds_step in lib/krb5/init_creds_pw.c.",
  "repo": "heimdal/heimdal",
  "patch_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
  "patch_info": {
    "commit_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "repo": "heimdal/heimdal",
    "commit_url": "https://github.com/heimdal/heimdal/commit/2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "files": [
      "lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c"
    ],
    "message": "CVE-2019-12098: krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>\n(cherry picked from commit 38c797e1ae9b9c8f99ae4aa2e73957679031fd2b)",
    "before_after_code_files": [
      "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
    ]
  },
  "patch_diff": {
    "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
      "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2267:            &ctx->req_buffer,",
      "2268:            NULL,",
      "2269:            NULL);",
      "2270:      if (ret == 0)",
      "2271:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2270:      if (ret == 0 && ctx->pk_init_ctx) {",
      "2271:   PA_DATA *pa_pkinit_kx;",
      "2272:   int idx = 0;",
      "2274:   pa_pkinit_kx =",
      "2275:       krb5_find_padata(rep.kdc_rep.padata->val,",
      "2276:          rep.kdc_rep.padata->len,",
      "2277:          KRB5_PADATA_PKINIT_KX,",
      "2278:          &idx);",
      "2280:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
      "2281:        ctx->fast_state.reply_key,",
      "2282:        &ctx->cred.session,",
      "2283:        pa_pkinit_kx);",
      "2284:   if (ret)",
      "2285:       krb5_set_error_message(context, ret,",
      "2286:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
      "2287:   else if (pa_pkinit_kx != NULL)",
      "2288:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
      "2289:      }",
      "",
      "---------------"
    ],
    "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
      "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "208: #define KRB5_INIT_CREDS_CANONICALIZE  1",
      "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
      "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
      "211:     struct {",
      "212:         krb5_gic_process_last_req func;",
      "213:         void *ctx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
      "",
      "---------------"
    ],
    "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
      "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     return ret;",
      "1221: }",
      "1223: static krb5_error_code",
      "1224: pk_rd_pa_reply_dh(krb5_context context,",
      "1225:     const heim_octet_string *indata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
      "1231: _krb5_pk_kx_confirm(krb5_context context,",
      "1232:       krb5_pk_init_ctx ctx,",
      "1233:       krb5_keyblock *reply_key,",
      "1234:       krb5_keyblock *session_key,",
      "1235:       PA_DATA *pa_pkinit_kx)",
      "1236: {",
      "1237:     krb5_error_code ret;",
      "1238:     EncryptedData ed;",
      "1239:     krb5_keyblock ck, sk_verify;",
      "1240:     krb5_crypto ck_crypto = NULL;",
      "1241:     krb5_crypto rk_crypto = NULL;",
      "1242:     size_t len;",
      "1243:     krb5_data data;",
      "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
      "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
      "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
      "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
      "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
      "1252:     if (pa_pkinit_kx == NULL)",
      "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
      "1255:     memset(&ed, 0, sizeof(ed));",
      "1256:     krb5_keyblock_zero(&ck);",
      "1257:     krb5_keyblock_zero(&sk_verify);",
      "1258:     krb5_data_zero(&data);",
      "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
      "1261:           pa_pkinit_kx->padata_value.length,",
      "1262:           &ed, &len);",
      "1263:     if (ret)",
      "1264:  goto out;",
      "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
      "1267:  ret = KRB5_KDCREP_MODIFIED;",
      "1268:  goto out;",
      "1269:     }",
      "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
      "1272:     if (ret)",
      "1273:  goto out;",
      "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
      "1276:          KRB5_KU_PA_PKINIT_KX,",
      "1277:          &ed, &data);",
      "1278:     if (ret)",
      "1279:  goto out;",
      "1281:     ret = decode_EncryptionKey(data.data, data.length,",
      "1282:           &ck, &len);",
      "1283:     if (ret)",
      "1284:  goto out;",
      "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
      "1287:     if (ret)",
      "1288:  goto out;",
      "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
      "1291:         &p1, &p2, session_key->keytype,",
      "1292:         &sk_verify);",
      "1293:     if (ret)",
      "1294:  goto out;",
      "1296:     if (sk_verify.keytype != session_key->keytype ||",
      "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
      "1298:  ret = KRB5_KDCREP_MODIFIED;",
      "1299:  goto out;",
      "1300:     }",
      "1302: out:",
      "1303:     free_EncryptedData(&ed);",
      "1304:     krb5_free_keyblock_contents(context, &ck);",
      "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
      "1306:     if (ck_crypto)",
      "1307:  krb5_crypto_destroy(context, ck_crypto);",
      "1308:     if (rk_crypto)",
      "1309:  krb5_crypto_destroy(context, rk_crypto);",
      "1310:     krb5_data_free(&data);",
      "1312:     return ret;",
      "1313: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9739fddaf189cf609fd39d3158e4465b46deab06",
      "candidate_info": {
        "commit_hash": "9739fddaf189cf609fd39d3158e4465b46deab06",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/9739fddaf189cf609fd39d3158e4465b46deab06",
        "files": [
          "appl/su/su.c",
          "kadmin/cpw.c",
          "kadmin/random_password.c",
          "kuser/kinit.c",
          "lib/gssapi/krb5/arcfour.c",
          "lib/gssapi/krb5/get_mic.c",
          "lib/gssapi/krb5/verify_mic.c",
          "lib/gssapi/ntlm/init_sec_context.c",
          "lib/hcrypto/md2.c",
          "lib/hcrypto/rand-fortuna.c",
          "lib/hdb/mkey.c",
          "lib/hx509/ks_file.c",
          "lib/krb5/crypto-arcfour.c",
          "lib/krb5/crypto-des-common.c",
          "lib/krb5/crypto-pk.c",
          "lib/krb5/deprecated.c",
          "lib/krb5/init_creds_pw.c",
          "lib/krb5/kcm.c",
          "lib/krb5/salt-des.c",
          "lib/krb5/salt-des3.c",
          "lib/ntlm/ntlm.c"
        ],
        "message": "use memset_s\n\nlib roken includes support for memset_s() but it was not applied\nto the Heimdal source tree.\n\nChange-Id: I8362ec97a9be50205bb2d398e65b629b88ce1acd\n(cherry picked from commit 93518bfab4e495bf4130be354464965e48a786c0)",
        "before_after_code_files": [
          "appl/su/su.c||appl/su/su.c",
          "kadmin/cpw.c||kadmin/cpw.c",
          "kadmin/random_password.c||kadmin/random_password.c",
          "kuser/kinit.c||kuser/kinit.c",
          "lib/gssapi/krb5/arcfour.c||lib/gssapi/krb5/arcfour.c",
          "lib/gssapi/krb5/get_mic.c||lib/gssapi/krb5/get_mic.c",
          "lib/gssapi/krb5/verify_mic.c||lib/gssapi/krb5/verify_mic.c",
          "lib/gssapi/ntlm/init_sec_context.c||lib/gssapi/ntlm/init_sec_context.c",
          "lib/hcrypto/md2.c||lib/hcrypto/md2.c",
          "lib/hcrypto/rand-fortuna.c||lib/hcrypto/rand-fortuna.c",
          "lib/hdb/mkey.c||lib/hdb/mkey.c",
          "lib/hx509/ks_file.c||lib/hx509/ks_file.c",
          "lib/krb5/crypto-arcfour.c||lib/krb5/crypto-arcfour.c",
          "lib/krb5/crypto-des-common.c||lib/krb5/crypto-des-common.c",
          "lib/krb5/crypto-pk.c||lib/krb5/crypto-pk.c",
          "lib/krb5/deprecated.c||lib/krb5/deprecated.c",
          "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
          "lib/krb5/kcm.c||lib/krb5/kcm.c",
          "lib/krb5/salt-des.c||lib/krb5/salt-des.c",
          "lib/krb5/salt-des3.c||lib/krb5/salt-des3.c",
          "lib/ntlm/ntlm.c||lib/ntlm/ntlm.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [
            "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c"
          ],
          "candidate": [
            "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c"
          ]
        }
      },
      "candidate_diff": {
        "appl/su/su.c||appl/su/su.c": [
          "File: appl/su/su.c -> appl/su/su.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "303:  if(r != 0)",
          "304:      exit(0);",
          "305:  pw = crypt(pw_buf, su->pw_passwd);",
          "307:  if(strcmp(pw, su->pw_passwd) != 0) {",
          "308:      syslog (LOG_ERR | LOG_AUTH, \"%s to %s: incorrect password\",",
          "309:       login->pw_name, su->pw_name);",
          "",
          "[Removed Lines]",
          "306:  memset(pw_buf, 0, sizeof(pw_buf));",
          "",
          "[Added Lines]",
          "306:  memset_s(pw_buf, sizeof(pw_buf), 0, sizeof(pw_buf));",
          "",
          "---------------"
        ],
        "kadmin/cpw.c||kadmin/cpw.c": [
          "File: kadmin/cpw.c -> kadmin/cpw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:  printf (\"%s's password set to \\\"%s\\\"\\n\", princ_name, pw);",
          "77:  free (princ_name);",
          "78:     }",
          "80:     return ret;",
          "81: }",
          "",
          "[Removed Lines]",
          "79:     memset (pw, 0, sizeof(pw));",
          "",
          "[Added Lines]",
          "79:     memset_s(pw, sizeof(pw), 0, sizeof(pw));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "108:     if(ret == 0)",
          "109:  ret = kadm5_chpass_principal_3(kadm_handle, principal, keepold, 0, NULL,",
          "110:            password);",
          "112:     return ret;",
          "113: }",
          "",
          "[Removed Lines]",
          "111:     memset(pwbuf, 0, sizeof(pwbuf));",
          "",
          "[Added Lines]",
          "111:     memset_s(pwbuf, sizeof(pwbuf), 0, sizeof(pwbuf));",
          "",
          "---------------"
        ],
        "kadmin/random_password.c||kadmin/random_password.c": [
          "File: kadmin/random_password.c -> kadmin/random_password.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:         \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", 2,",
          "69:         \"@$%&*()-+=:,/<>1234567890\", 1);",
          "70:     strlcpy(pw, pass, len);",
          "72:     free(pass);",
          "73: #endif",
          "74: }",
          "",
          "[Removed Lines]",
          "71:     memset(pass, 0, strlen(pass));",
          "",
          "[Added Lines]",
          "71:     memset_s(pass, sizeof(pass), 0, strlen(pass));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "155:  }",
          "156:     }",
          "157:     (*pw)[len] = '\\0';",
          "159:     free(classes);",
          "160: }",
          "161: #endif",
          "",
          "[Removed Lines]",
          "158:     memset(rbuf, 0, sizeof(rbuf));",
          "",
          "[Added Lines]",
          "158:     memset_s(rbuf, sizeof(rbuf), 0, sizeof(rbuf));",
          "",
          "---------------"
        ],
        "kuser/kinit.c||kuser/kinit.c": [
          "File: kuser/kinit.c -> kuser/kinit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:     if (ntlm_domain && passwd[0])",
          "716:  heim_ntlm_nt_key(passwd, &ntlmkey);",
          "717: #endif",
          "720:     switch(ret){",
          "721:     case 0:",
          "",
          "[Removed Lines]",
          "718:     memset(passwd, 0, sizeof(passwd));",
          "",
          "[Added Lines]",
          "718:     memset_s(passwd, sizeof(passwd), 0, sizeof(passwd));",
          "",
          "---------------"
        ],
        "lib/gssapi/krb5/arcfour.c||lib/gssapi/krb5/arcfour.c": [
          "File: lib/gssapi/krb5/arcfour.c -> lib/gssapi/krb5/arcfour.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "304:     EVP_Cipher(&rc4_key, p, p, 8);",
          "305:     EVP_CIPHER_CTX_cleanup(&rc4_key);",
          "310:     return GSS_S_COMPLETE;",
          "",
          "[Removed Lines]",
          "307:     memset(k6_data, 0, sizeof(k6_data));",
          "",
          "[Added Lines]",
          "307:     memset_s(k6_data, sizeof(k6_data), 0, sizeof(k6_data));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "389:     else",
          "390:  cmp = memcmp(&SND_SEQ[4], \"\\x00\\x00\\x00\\x00\", 4);",
          "393:     if (cmp != 0) {",
          "395:  return GSS_S_BAD_MIC;",
          "",
          "[Removed Lines]",
          "392:     memset(SND_SEQ, 0, sizeof(SND_SEQ));",
          "",
          "[Added Lines]",
          "392:     memset_s(SND_SEQ, sizeof(SND_SEQ), 0, sizeof(SND_SEQ));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "516:     ret = arcfour_mic_key(context, &Klocal,",
          "518:      k6_data, sizeof(k6_data));",
          "520:     if (ret) {",
          "521:  _gsskrb5_release_buffer(minor_status, output_message_buffer);",
          "",
          "[Removed Lines]",
          "519:     memset(Klocaldata, 0, sizeof(Klocaldata));",
          "",
          "[Added Lines]",
          "519:     memset_s(Klocaldata, sizeof(Klocaldata), 0, sizeof(Klocaldata));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "550:  EVP_CipherInit_ex(&rc4_key, EVP_rc4(), NULL, k6_data, NULL, 1);",
          "551:  EVP_Cipher(&rc4_key, p0 + 8, p0 + 8 /* SND_SEQ */, 8);",
          "552:  EVP_CIPHER_CTX_cleanup(&rc4_key);",
          "554:     }",
          "556:     if (conf_state)",
          "",
          "[Removed Lines]",
          "553:  memset(k6_data, 0, sizeof(k6_data));",
          "",
          "[Added Lines]",
          "553:  memset_s(k6_data, sizeof(k6_data), 0, sizeof(k6_data));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "650:  EVP_CipherInit_ex(&rc4_key, EVP_rc4(), NULL, k6_data, NULL, 1);",
          "651:  EVP_Cipher(&rc4_key, SND_SEQ, p0 + 8, 8);",
          "652:  EVP_CIPHER_CTX_cleanup(&rc4_key);",
          "654:     }",
          "656:     _gsskrb5_decode_be_om_uint32(SND_SEQ, &seq_number);",
          "",
          "[Removed Lines]",
          "653:  memset(k6_data, 0, sizeof(k6_data));",
          "",
          "[Added Lines]",
          "653:  memset_s(k6_data, sizeof(k6_data), 0, sizeof(k6_data));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "678:     ret = arcfour_mic_key(context, &Klocal,",
          "679:      SND_SEQ, 4,",
          "680:      k6_data, sizeof(k6_data));",
          "682:     if (ret) {",
          "684:  return GSS_S_FAILURE;",
          "",
          "[Removed Lines]",
          "681:     memset(Klocaldata, 0, sizeof(Klocaldata));",
          "",
          "[Added Lines]",
          "681:     memset_s(Klocaldata, sizeof(Klocaldata), 0, sizeof(Klocaldata));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1069:     kret = arcfour_mic_key(context, &Klocal,",
          "1071:       k6_data, sizeof(k6_data));",
          "1073:     if (kret) {",
          "1075:  major_status = GSS_S_FAILURE;",
          "",
          "[Removed Lines]",
          "1072:     memset(Klocaldata, 0, sizeof(Klocaldata));",
          "",
          "[Added Lines]",
          "1072:     memset_s(Klocaldata, sizeof(Klocaldata), 0, sizeof(Klocaldata));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1300:       snd_seq,",
          "1301:       4,",
          "1302:       k6_data, sizeof(k6_data));",
          "1304:     if (kret) {",
          "1306:  return GSS_S_FAILURE;",
          "",
          "[Removed Lines]",
          "1303:     memset(Klocaldata, 0, sizeof(Klocaldata));",
          "",
          "[Added Lines]",
          "1303:     memset_s(Klocaldata, sizeof(Klocaldata), 0, sizeof(Klocaldata));",
          "",
          "---------------"
        ],
        "lib/gssapi/krb5/get_mic.c||lib/gssapi/krb5/get_mic.c": [
          "File: lib/gssapi/krb5/get_mic.c -> lib/gssapi/krb5/get_mic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:           ++seq_number);",
          "122:   HEIMDAL_MUTEX_unlock(&ctx->ctx_id_mutex);",
          "128:   return GSS_S_COMPLETE;",
          "",
          "[Removed Lines]",
          "124:   memset (deskey, 0, sizeof(deskey));",
          "125:   memset (&schedule, 0, sizeof(schedule));",
          "",
          "[Added Lines]",
          "124:   memset_s(deskey, sizeof(deskey), 0, sizeof(deskey));",
          "125:   memset_s(&schedule, sizeof(schedule), 0, sizeof(schedule));",
          "",
          "---------------"
        ],
        "lib/gssapi/krb5/verify_mic.c||lib/gssapi/krb5/verify_mic.c": [
          "File: lib/gssapi/krb5/verify_mic.c -> lib/gssapi/krb5/verify_mic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "89:   DES_cbc_cksum ((void *)hash, (void *)hash, sizeof(hash),",
          "90:    &schedule, &zero);",
          "91:   if (ct_memcmp (p - 8, hash, 8) != 0) {",
          "94:     return GSS_S_BAD_MIC;",
          "95:   }",
          "",
          "[Removed Lines]",
          "92:     memset (deskey, 0, sizeof(deskey));",
          "93:     memset (&schedule, 0, sizeof(schedule));",
          "",
          "[Added Lines]",
          "92:     memset_s(deskey, sizeof(deskey), 0, sizeof(deskey));",
          "93:     memset_s(&schedule, sizeof(schedule), 0, sizeof(schedule));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "105:   EVP_Cipher(&des_ctx, p, p, 8);",
          "106:   EVP_CIPHER_CTX_cleanup(&des_ctx);",
          "111:   seq = p;",
          "112:   _gsskrb5_decode_om_uint32(seq, &seq_number);",
          "",
          "[Removed Lines]",
          "108:   memset (deskey, 0, sizeof(deskey));",
          "109:   memset (&schedule, 0, sizeof(schedule));",
          "",
          "[Added Lines]",
          "108:   memset_s(deskey, sizeof(deskey), 0, sizeof(deskey));",
          "109:   memset_s(&schedule, sizeof(schedule), 0, sizeof(schedule));",
          "",
          "---------------"
        ],
        "lib/gssapi/ntlm/init_sec_context.c||lib/gssapi/ntlm/init_sec_context.c": [
          "File: lib/gssapi/ntlm/init_sec_context.c -> lib/gssapi/ntlm/init_sec_context.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "73:  heim_ntlm_nt_key(p, key);",
          "76:  fclose(f);",
          "77:  return 0;",
          "78:     }",
          "80:     fclose(f);",
          "81:     return ENOENT;",
          "82: }",
          "",
          "[Removed Lines]",
          "75:  memset(buf, 0, sizeof(buf));",
          "79:     memset(buf, 0, sizeof(buf));",
          "",
          "[Added Lines]",
          "75:  memset_s(buf, sizeof(buf), 0, sizeof(buf));",
          "79:     memset_s(buf, sizeof(buf), 0, sizeof(buf));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "466:      ret = heim_ntlm_build_ntlm1_master(ntlmv2, sizeof(ntlmv2),",
          "467:             &sessionkey,",
          "468:             &type3.sessionkey);",
          "470:      if (ret) {",
          "471:   _gss_ntlm_delete_sec_context(minor_status,",
          "472:           context_handle, NULL);",
          "",
          "[Removed Lines]",
          "469:      memset(ntlmv2, 0, sizeof(ntlmv2));",
          "",
          "[Added Lines]",
          "469:      memset_s(ntlmv2, sizeof(ntlmv2), 0, sizeof(ntlmv2));",
          "",
          "---------------"
        ],
        "lib/hcrypto/md2.c||lib/hcrypto/md2.c": [
          "File: lib/hcrypto/md2.c -> lib/hcrypto/md2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:     }",
          "92:     memcpy(m->state, x, 16);",
          "94: }",
          "96: int",
          "",
          "[Removed Lines]",
          "93:     memset(x, 0, sizeof(x));",
          "",
          "[Added Lines]",
          "93:     memset_s(x, sizeof(x), 0, sizeof(x));",
          "",
          "---------------"
        ],
        "lib/hcrypto/rand-fortuna.c||lib/hcrypto/rand-fortuna.c": [
          "File: lib/hcrypto/rand-fortuna.c -> lib/hcrypto/rand-fortuna.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160:     memcpy(&tmp, ctx, sizeof(*ctx));",
          "161:     SHA256_Final(dst, &tmp);",
          "163: }",
          "",
          "[Removed Lines]",
          "162:     memset(&tmp, 0, sizeof(tmp));",
          "",
          "[Added Lines]",
          "162:     memset_s(&tmp, sizeof(tmp), 0, sizeof(tmp));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "234:     if (ok)",
          "235:  memcpy(last, &tv, sizeof(tv));",
          "239:     return ok;",
          "240: }",
          "",
          "[Removed Lines]",
          "237:     memset(&tv, 0, sizeof(tv));",
          "",
          "[Added Lines]",
          "237:     memset_s(&tv, sizeof(tv), 0, sizeof(tv));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "285:     ciph_init(&st->ciph, st->key, BLOCK);",
          "289: }",
          "",
          "[Removed Lines]",
          "287:     memset(&key_md, 0, sizeof(key_md));",
          "288:     memset(buf, 0, BLOCK);",
          "",
          "[Added Lines]",
          "287:     memset_s(&key_md, sizeof(key_md), 0, sizeof(key_md));",
          "288:     memset_s(buf, sizeof(buf), 0, sizeof(buf));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "335:     if (pos == 0)",
          "336:  st->pool0_bytes += len;",
          "340: }",
          "",
          "[Removed Lines]",
          "338:     memset(hash, 0, BLOCK);",
          "339:     memset(&md, 0, sizeof(md));",
          "",
          "[Added Lines]",
          "338:     memset_s(hash, sizeof(hash), 0, sizeof(hash));",
          "339:     memset_s(&md, sizeof(hash), 0, sizeof(md));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "372:  encrypt_counter(st, buf + CIPH_BLOCK);",
          "373:  md_update(&st->pool[i], buf, BLOCK);",
          "374:     }",
          "378:     rekey(st);",
          "",
          "[Removed Lines]",
          "375:     memset(buf, 0, BLOCK);",
          "",
          "[Added Lines]",
          "375:     memset_s(buf, sizeof(buf), 0, sizeof(buf));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "468:  if ((*hc_rand_unix_method.bytes)(buf, sizeof(buf)) == 1) {",
          "469:      add_entropy(&main_state, buf, sizeof(buf));",
          "470:      entropy_p = 1;",
          "472:  }",
          "473:     }",
          "474: #endif",
          "",
          "[Removed Lines]",
          "471:      memset(buf, 0, sizeof(buf));",
          "",
          "[Added Lines]",
          "471:      memset_s(buf, sizeof(buf), 0, sizeof(buf));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "509:      close(fd);",
          "510:  }",
          "515:     }",
          "",
          "[Removed Lines]",
          "512:  memset(&u, 0, sizeof(u));",
          "",
          "[Added Lines]",
          "512:  memset_s(&u, sizeof(u), 0, sizeof(u));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "594:     init_done = 0;",
          "595:     have_entropy = 0;",
          "598:     HEIMDAL_MUTEX_unlock(&fortuna_mutex);",
          "599: }",
          "",
          "[Removed Lines]",
          "596:     memset(&main_state, 0, sizeof(main_state));",
          "",
          "[Added Lines]",
          "596:     memset_s(&main_state, sizeof(main_state), 0, sizeof(main_state));",
          "",
          "---------------"
        ],
        "lib/hdb/mkey.c||lib/hdb/mkey.c": [
          "File: lib/hdb/mkey.c -> lib/hdb/mkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "226:     }",
          "228:     ret = decode_EncryptionKey(buf, len, &key, &ret_len);",
          "230:     if(ret)",
          "231:  return ret;",
          "",
          "[Removed Lines]",
          "229:     memset(buf, 0, sizeof(buf));",
          "",
          "[Added Lines]",
          "229:     memset_s(buf, sizeof(buf), 0, sizeof(buf));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "279:     memset(&key, 0, sizeof(key));",
          "280:     key.keytype = ETYPE_DES_PCBC_NONE;",
          "281:     ret = krb5_data_copy(&key.keyvalue, buf, len);",
          "283:     if(ret)",
          "284:  return ret;",
          "",
          "[Removed Lines]",
          "282:     memset(buf, 0, sizeof(buf));",
          "",
          "[Added Lines]",
          "282:     memset_s(buf, sizeof(buf), 0, sizeof(buf));",
          "",
          "---------------"
        ],
        "lib/hx509/ks_file.c||lib/hx509/ks_file.c": [
          "File: lib/hx509/ks_file.c -> lib/hx509/ks_file.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126:         &clear,",
          "127:         NULL);",
          "130:     free(clear.data);",
          "131: out:",
          "133:     free(key);",
          "134:     return ret;",
          "135: }",
          "",
          "[Removed Lines]",
          "129:     memset(clear.data, 0, clear.length);",
          "132:     memset(key, 0, keylen);",
          "",
          "[Added Lines]",
          "129:     memset_s(clear.data, clear.length, 0, clear.length);",
          "132:     memset_s(key, keylen, 0, keylen);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "292:   ret = try_decrypt(context, c, ai, cipher, ivdata, password,",
          "293:       strlen(password), data, len);",
          "296:  }",
          "297:  free(ivdata);",
          "",
          "[Removed Lines]",
          "295:      memset(password, 0, sizeof(password));",
          "",
          "[Added Lines]",
          "295:      memset_s(password, sizeof(password), 0, sizeof(password));",
          "",
          "---------------"
        ],
        "lib/krb5/crypto-arcfour.c||lib/krb5/crypto-arcfour.c": [
          "File: lib/krb5/crypto-arcfour.c -> lib/krb5/crypto-arcfour.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "180:     EVP_Cipher(&ctx, cdata + 16, cdata + 16, len - 16);",
          "181:     EVP_CIPHER_CTX_cleanup(&ctx);",
          "186:     return 0;",
          "187: }",
          "",
          "[Removed Lines]",
          "183:     memset (k1_c_data, 0, sizeof(k1_c_data));",
          "184:     memset (k2_c_data, 0, sizeof(k2_c_data));",
          "185:     memset (k3_c_data, 0, sizeof(k3_c_data));",
          "",
          "[Added Lines]",
          "183:     memset_s(k1_c_data, sizeof(k1_c_data), 0, sizeof(k1_c_data));",
          "184:     memset_s(k2_c_data, sizeof(k2_c_data), 0, sizeof(k2_c_data));",
          "185:     memset_s(k3_c_data, sizeof(k3_c_data), 0, sizeof(k3_c_data));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "247:     if (ret)",
          "248:  krb5_abortx(context, \"hmac failed\");",
          "254:     if (ct_memcmp (cksum.checksum.data, data, 16) != 0) {",
          "255:  krb5_clear_error_message (context);",
          "",
          "[Removed Lines]",
          "250:     memset (k1_c_data, 0, sizeof(k1_c_data));",
          "251:     memset (k2_c_data, 0, sizeof(k2_c_data));",
          "252:     memset (k3_c_data, 0, sizeof(k3_c_data));",
          "",
          "[Added Lines]",
          "250:     memset_s(k1_c_data, sizeof(k1_c_data), 0, sizeof(k1_c_data));",
          "251:     memset_s(k2_c_data, sizeof(k2_c_data), 0, sizeof(k2_c_data));",
          "252:     memset_s(k3_c_data, sizeof(k3_c_data), 0, sizeof(k3_c_data));",
          "",
          "---------------"
        ],
        "lib/krb5/crypto-des-common.c||lib/krb5/crypto-des-common.c": [
          "File: lib/krb5/crypto-des-common.c -> lib/krb5/crypto-des-common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     EVP_DigestUpdate(m, data, len);",
          "78:     EVP_DigestFinal_ex (m, p + 8, NULL);",
          "79:     EVP_MD_CTX_destroy(m);",
          "81:     EVP_CipherInit_ex(&ctx->ectx, NULL, NULL, NULL, (void *)&ivec, -1);",
          "82:     EVP_Cipher(&ctx->ectx, p, p, 24);",
          "",
          "[Removed Lines]",
          "80:     memset (&ivec, 0, sizeof(ivec));",
          "",
          "[Added Lines]",
          "80:     memset_s(&ivec, sizeof(ivec), 0, sizeof(ivec));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     if (m == NULL)",
          "104:  return krb5_enomem(context);",
          "107:     EVP_CipherInit_ex(&ctx->dctx, NULL, NULL, NULL, (void *)&ivec, -1);",
          "108:     EVP_Cipher(&ctx->dctx, tmp, C->checksum.data, 24);",
          "",
          "[Removed Lines]",
          "106:     memset(&ivec, 0, sizeof(ivec));",
          "",
          "[Added Lines]",
          "106:     memset_s(&ivec, sizeof(ivec), 0, sizeof(ivec));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:  krb5_clear_error_message (context);",
          "117:  ret = KRB5KRB_AP_ERR_BAD_INTEGRITY;",
          "118:     }",
          "121:     return ret;",
          "122: }",
          "",
          "[Removed Lines]",
          "119:     memset(tmp, 0, sizeof(tmp));",
          "120:     memset(res, 0, sizeof(res));",
          "",
          "[Added Lines]",
          "119:     memset_s(tmp, sizeof(tmp), 0, sizeof(tmp));",
          "120:     memset_s(res, sizeof(res), 0, sizeof(res));",
          "",
          "---------------"
        ],
        "lib/krb5/crypto-pk.c||lib/krb5/crypto-pk.c": [
          "File: lib/krb5/crypto-pk.c -> lib/krb5/crypto-pk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "92:  offset += sizeof(shaoutput);",
          "93:  counter++;",
          "94:     } while(offset < keylen);",
          "97:     EVP_MD_CTX_destroy(m);",
          "99:     ret = krb5_random_to_key(context, type, keydata, keylen, key);",
          "101:     free(keydata);",
          "102:     return ret;",
          "103: }",
          "",
          "[Removed Lines]",
          "95:     memset(shaoutput, 0, sizeof(shaoutput));",
          "100:     memset(keydata, 0, sizeof(keylen));",
          "",
          "[Added Lines]",
          "95:     memset_s(shaoutput, sizeof(shaoutput), 0, sizeof(shaoutput));",
          "100:     memset_s(keydata, sizeof(keylen), 0, sizeof(keylen));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "282:  offset += EVP_MD_CTX_size(m);",
          "283:  counter++;",
          "284:     } while(offset < keylen);",
          "287:     EVP_MD_CTX_destroy(m);",
          "288:     free(other.data);",
          "290:     ret = krb5_random_to_key(context, enctype, keydata, keylen, key);",
          "292:     free(keydata);",
          "294:     return ret;",
          "",
          "[Removed Lines]",
          "285:     memset(shaoutput, 0, sizeof(shaoutput));",
          "291:     memset(keydata, 0, sizeof(keylen));",
          "",
          "[Added Lines]",
          "285:     memset_s(shaoutput, sizeof(shaoutput), 0, sizeof(shaoutput));",
          "291:     memset_s(keydata, sizeof(keylen), 0, sizeof(keylen));",
          "",
          "---------------"
        ],
        "lib/krb5/deprecated.c||lib/krb5/deprecated.c": [
          "File: lib/krb5/deprecated.c -> lib/krb5/deprecated.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "207:  password = buf;",
          "208:     }",
          "209:     ret = krb5_string_to_key_salt (context, type, password, salt, *key);",
          "211:     return ret;",
          "212: }",
          "",
          "[Removed Lines]",
          "210:     memset (buf, 0, sizeof(buf));",
          "",
          "[Added Lines]",
          "210:     memset_s(buf, sizeof(buf), 0, sizeof(buf));",
          "",
          "---------------"
        ],
        "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
          "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "162:     if (ctx->keytab_data)",
          "163:  free(ctx->keytab_data);",
          "164:     if (ctx->password) {",
          "166:  free(ctx->password);",
          "167:     }",
          "",
          "[Removed Lines]",
          "165:  memset(ctx->password, 0, strlen(ctx->password));",
          "",
          "[Added Lines]",
          "165:  size_t len;",
          "166:  len = strlen(ctx->password);",
          "167:  memset_s(ctx->password, len, 0, len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "189:  free_paid(context, ctx->ppaid);",
          "190:  free(ctx->ppaid);",
          "191:     }",
          "193: }",
          "195: static int",
          "",
          "[Removed Lines]",
          "192:     memset(ctx, 0, sizeof(*ctx));",
          "",
          "[Added Lines]",
          "194:     memset_s(ctx, sizeof(*ctx), 0, sizeof(*ctx));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "629:     }",
          "631: out:",
          "634:     krb5_data_free (&result_string);",
          "635:     krb5_data_free (&result_code_string);",
          "636:     krb5_free_cred_contents (context, &cpw_cred);",
          "",
          "[Removed Lines]",
          "632:     memset (buf1, 0, sizeof(buf1));",
          "633:     memset (buf2, 0, sizeof(buf2));",
          "",
          "[Added Lines]",
          "634:     memset_s(buf1, sizeof(buf1), 0, sizeof(buf1));",
          "635:     memset_s(buf2, sizeof(buf2), 0, sizeof(buf2));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "756:     return 0;",
          "757:  fail:",
          "758:     free_AS_REQ(a);",
          "760:     return ret;",
          "761: }",
          "",
          "[Removed Lines]",
          "759:     memset(a, 0, sizeof(*a));",
          "",
          "[Added Lines]",
          "761:     memset_s(a, sizeof(*a), 0, sizeof(*a));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1501:         const char *password)",
          "1502: {",
          "1503:     if (ctx->password) {",
          "1505:  free(ctx->password);",
          "1506:     }",
          "1507:     if (password) {",
          "",
          "[Removed Lines]",
          "1504:  memset(ctx->password, 0, strlen(ctx->password));",
          "",
          "[Added Lines]",
          "1506:  size_t len;",
          "1507:  len = strlen(ctx->password);",
          "1508:  memset_s(ctx->password, len, 0, len);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2339:      if (ret == KRB5KDC_ERR_PREAUTH_REQUIRED) {",
          "2341:          free_METHOD_DATA(&ctx->md);",
          "2344:   if (ctx->error.e_data) {",
          "2345:       ret = decode_METHOD_DATA(ctx->error.e_data->data,",
          "",
          "[Removed Lines]",
          "2342:          memset(&ctx->md, 0, sizeof(ctx->md));",
          "",
          "[Added Lines]",
          "2346:   memset_s(&ctx->md, sizeof(ctx->md), 0, sizeof(ctx->md));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2393:   }",
          "2395:   free_AS_REQ(&ctx->as_req);",
          "2398:   ctx->used_pa_types = 0;",
          "2399:      } else if (ret == KRB5KDC_ERR_KEY_EXP && ctx->runflags.change_password == 0 && ctx->prompter) {",
          "",
          "[Removed Lines]",
          "2396:   memset(&ctx->as_req, 0, sizeof(ctx->as_req));",
          "",
          "[Added Lines]",
          "2400:   memset_s(&ctx->as_req, sizeof(ctx->as_req), 0, sizeof(ctx->as_req));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2707:  ret = (*prompter) (context, data, NULL, NULL, 1, &prompt);",
          "2708:  free (q);",
          "2709:  if (ret) {",
          "2711:      ret = KRB5_LIBOS_PWDINTR;",
          "2712:      krb5_clear_error_message (context);",
          "2713:      goto out;",
          "",
          "[Removed Lines]",
          "2710:      memset (buf, 0, sizeof(buf));",
          "",
          "[Added Lines]",
          "2714:      memset_s(buf, sizeof(buf), 0, sizeof(buf));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2763:     if (ctx)",
          "2764:  krb5_init_creds_free(context, ctx);",
          "2768:     return ret;",
          "2769: }",
          "",
          "[Removed Lines]",
          "2766:     memset(buf, 0, sizeof(buf));",
          "2767:     memset(buf2, 0, sizeof(buf2));",
          "",
          "[Added Lines]",
          "2770:     memset_s(buf, sizeof(buf), 0, sizeof(buf));",
          "2771:     memset_s(buf2, sizeof(buf), 0, sizeof(buf2));",
          "",
          "---------------"
        ],
        "lib/krb5/kcm.c||lib/krb5/kcm.c": [
          "File: lib/krb5/kcm.c -> lib/krb5/kcm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:     if (k != NULL) {",
          "225:  if (k->name != NULL)",
          "226:      free(k->name);",
          "228:  krb5_data_free(&(*id)->data);",
          "229:     }",
          "230: }",
          "",
          "[Removed Lines]",
          "227:  memset(k, 0, sizeof(*k));",
          "",
          "[Added Lines]",
          "227:  memset_s(k, sizeof(*k), 0, sizeof(*k));",
          "",
          "---------------"
        ],
        "lib/krb5/salt-des.c||lib/krb5/salt-des.c": [
          "File: lib/krb5/salt-des.c -> lib/krb5/salt-des.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:     memset(&schedule, 0, sizeof(schedule));",
          "110:     memset(&temp_key, 0, sizeof(temp_key));",
          "111:     memset(&ivec, 0, sizeof(ivec));",
          "114:     DES_set_odd_parity (key);",
          "115: }",
          "",
          "[Removed Lines]",
          "112:     memset(password, 0, sizeof(password));",
          "",
          "[Added Lines]",
          "112:     memset_s(password, sizeof(password), 0, sizeof(password));",
          "",
          "---------------"
        ],
        "lib/krb5/salt-des3.c||lib/krb5/salt-des3.c": [
          "File: lib/krb5/salt-des3.c -> lib/krb5/salt-des3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "62:  ret = _krb5_n_fold(str, len, tmp, 24);",
          "63:  if (ret) {",
          "65:      free(str);",
          "66:      krb5_set_error_message(context, ret, N_(\"malloc: out of memory\", \"\"));",
          "67:      return ret;",
          "",
          "[Removed Lines]",
          "64:      memset(str, 0, len);",
          "",
          "[Added Lines]",
          "64:      memset_s(str, len, 0, len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74:   _krb5_xor8(*(keys + i), (const unsigned char*)\"\\0\\0\\0\\0\\0\\0\\0\\xf0\");",
          "75:      DES_set_key_unchecked(keys + i, &s[i]);",
          "76:  }",
          "78:  DES_ede3_cbc_encrypt(tmp,",
          "79:         tmp, sizeof(tmp),",
          "80:         &s[0], &s[1], &s[2], &ivec, DES_ENCRYPT);",
          "83:  for(i = 0; i < 3; i++){",
          "84:      memcpy(keys + i, tmp + i * 8, sizeof(keys[i]));",
          "85:      DES_set_odd_parity(keys + i);",
          "86:      if(DES_is_weak_key(keys + i))",
          "87:   _krb5_xor8(*(keys + i), (const unsigned char*)\"\\0\\0\\0\\0\\0\\0\\0\\xf0\");",
          "88:  }",
          "90:     }",
          "91:     key->keytype = enctype;",
          "92:     krb5_data_copy(&key->keyvalue, keys, sizeof(keys));",
          "95:     free(str);",
          "96:     return 0;",
          "97: }",
          "",
          "[Removed Lines]",
          "77:  memset(&ivec, 0, sizeof(ivec));",
          "81:  memset(s, 0, sizeof(s));",
          "82:  memset(&ivec, 0, sizeof(ivec));",
          "89:  memset(tmp, 0, sizeof(tmp));",
          "93:     memset(keys, 0, sizeof(keys));",
          "94:     memset(str, 0, len);",
          "",
          "[Added Lines]",
          "77:  memset_s(&ivec, sizeof(ivec), 0, sizeof(ivec));",
          "81:  memset_s(s, sizeof(s), 0, sizeof(s));",
          "82:  memset_s(&ivec, sizeof(ivec), 0, sizeof(ivec));",
          "89:  memset_s(tmp, sizeof(tmp), 0, sizeof(tmp));",
          "93:     memset_s(keys, sizeof(keys), 0, sizeof(keys));",
          "94:     memset_s(str, sizeof(str), 0, len);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:          len,",
          "120:          enctype,",
          "121:          key);",
          "123:     free(s);",
          "124:     return ret;",
          "125: }",
          "",
          "[Removed Lines]",
          "122:     memset(s, 0, len);",
          "",
          "[Added Lines]",
          "122:     memset_s(s, len, 0, len);",
          "",
          "---------------"
        ],
        "lib/ntlm/ntlm.c||lib/ntlm/ntlm.c": [
          "File: lib/ntlm/ntlm.c -> lib/ntlm/ntlm.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1192:     EVP_CipherInit_ex(&ctx, EVP_des_cbc(), NULL, key, NULL, 1);",
          "1193:     EVP_Cipher(&ctx, answer, challenge, 8);",
          "1194:     EVP_CIPHER_CTX_cleanup(&ctx);",
          "1196: }",
          "",
          "[Removed Lines]",
          "1195:     memset(key, 0, sizeof(key));",
          "",
          "[Added Lines]",
          "1195:     memset_s(key, sizeof(key), 0, sizeof(key));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "67c4829891f4c6434a829f9eff92c41845a6d81d",
      "candidate_info": {
        "commit_hash": "67c4829891f4c6434a829f9eff92c41845a6d81d",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/67c4829891f4c6434a829f9eff92c41845a6d81d",
        "files": [
          "kdc/kerberos5.c",
          "kdc/krb5tgs.c"
        ],
        "message": "kdc: use actual client princ for KRB5SignedPath\n\nWhen generating KRB5SignedPath in the AS, use the reply client name rather than\nthe one from the request, so validation will work correctly in the TGS.\n\n(cherry picked from commit c634146b14be9746d70d6a448e9bb2dd6f518c44)",
        "before_after_code_files": [
          "kdc/kerberos5.c||kdc/kerberos5.c",
          "kdc/krb5tgs.c||kdc/krb5tgs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/kerberos5.c||kdc/kerberos5.c": [
          "File: kdc/kerberos5.c -> kdc/kerberos5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2165:     _kdc_log_timestamp(context, config, \"AS-REQ\", r->et.authtime, r->et.starttime,",
          "2166:          r->et.endtime, r->et.renew_till);",
          "2180:     log_as_req(context, config, r->reply_key.keytype, setype, b);",
          "",
          "[Removed Lines]",
          "2169:     ret = _kdc_add_KRB5SignedPath(context,",
          "2170:       config,",
          "2171:       r->server,",
          "2172:       setype,",
          "2173:       r->client->entry.principal,",
          "2174:       NULL,",
          "2175:       NULL,",
          "2176:       &r->et);",
          "2177:     if (ret)",
          "2178:  goto out;",
          "",
          "[Added Lines]",
          "2168:     {",
          "2169:  krb5_principal client_principal;",
          "2171:  ret = _krb5_principalname2krb5_principal(context, &client_principal,",
          "2172:        rep.cname, rep.crealm);",
          "2173:  if (ret)",
          "2174:      goto out;",
          "2177:  ret = _kdc_add_KRB5SignedPath(context,",
          "2178:           config,",
          "2179:           r->server,",
          "2180:           setype,",
          "2181:           client_principal,",
          "2182:           NULL,",
          "2183:           NULL,",
          "2184:           &r->et);",
          "2185:  krb5_free_principal(context, client_principal);",
          "2186:  if (ret)",
          "2187:      goto out;",
          "2188:     }",
          "",
          "---------------"
        ],
        "kdc/krb5tgs.c||kdc/krb5tgs.c": [
          "File: kdc/krb5tgs.c -> kdc/krb5tgs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "104:    krb5_kdc_configuration *config,",
          "105:    hdb_entry_ex *krbtgt,",
          "106:    krb5_enctype enctype,",
          "108:    krb5_const_principal server,",
          "109:    krb5_principals principals,",
          "110:    EncTicketPart *tkt)",
          "",
          "[Removed Lines]",
          "107:    krb5_principal client,",
          "",
          "[Added Lines]",
          "107:    krb5_const_principal client,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "124:     {",
          "125:  KRB5SignedPathData spd;",
          "128:  spd.authtime = tkt->authtime;",
          "129:  spd.delegated = principals;",
          "130:  spd.method_data = NULL;",
          "",
          "[Removed Lines]",
          "127:  spd.client = client;",
          "",
          "[Added Lines]",
          "127:  spd.client = rk_UNCONST(client);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc216adeb6020d9f094036e5bbf63e8460d445e5",
      "candidate_info": {
        "commit_hash": "bc216adeb6020d9f094036e5bbf63e8460d445e5",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/bc216adeb6020d9f094036e5bbf63e8460d445e5",
        "files": [
          "kdc/krb5tgs.c",
          "tests/kdc/check-kdc.in"
        ],
        "message": "tgs-req: strip forwardable and proxiable if the server is disallowed",
        "before_after_code_files": [
          "kdc/krb5tgs.c||kdc/krb5tgs.c",
          "tests/kdc/check-kdc.in||tests/kdc/check-kdc.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/krb5tgs.c||kdc/krb5tgs.c": [
          "File: kdc/krb5tgs.c -> kdc/krb5tgs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "912:     et.flags.hw_authent  = tgt->flags.hw_authent;",
          "913:     et.flags.ok_as_delegate = server->entry.flags.ok_as_delegate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "916:     if (!server->entry.flags.forwardable)",
          "917:  et.flags.forwardable = 0;",
          "918:     if (!server->entry.flags.proxiable)",
          "919:  et.flags.proxiable = 0;",
          "",
          "---------------"
        ],
        "tests/kdc/check-kdc.in||tests/kdc/check-kdc.in": [
          "File: tests/kdc/check-kdc.in -> tests/kdc/check-kdc.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "460: ${klist} -f | grep ${server} | grep FRA > /dev/null || \\",
          "461:  { ec=1 ; eval \"${testfailed}\"; }",
          "464: echo \"Specific enctype\"; > messages.log",
          "465: ${kinit} --password-file=${objdir}/foopassword \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "463: echo \"Testing strip of forwardable when the server is disallowed in TGS-REQ\"",
          "464: ${kgetcred} sensitive@${R} || { ec=1 ; eval \"${testfailed}\"; }",
          "465: ${klist} -f | grep sensitive | grep FRA > /dev/null && \\",
          "466:  { ec=1 ; eval \"${testfailed}\"; }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cabd96a7b3e35eccef5118b1a265635e15c3f418",
      "candidate_info": {
        "commit_hash": "cabd96a7b3e35eccef5118b1a265635e15c3f418",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/cabd96a7b3e35eccef5118b1a265635e15c3f418",
        "files": [
          "lib/hcrypto/evp-pkcs11.c"
        ],
        "message": "hcrypto-pkcs11: check mechanism flags\n\nBefore committing to a PKCS#11 mechanism, check that it can provide the\nrequired encryption or digest services by validating the flags returned by\nC_GetMechanismInfo().\n\n(cherry picked from commit 5c70e5015edbe056eb192c166c3056c29d70482b)",
        "before_after_code_files": [
          "lib/hcrypto/evp-pkcs11.c||lib/hcrypto/evp-pkcs11.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/hcrypto/evp-pkcs11.c||lib/hcrypto/evp-pkcs11.c": [
          "File: lib/hcrypto/evp-pkcs11.c -> lib/hcrypto/evp-pkcs11.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "173: }",
          "175: static CK_RV",
          "177: {",
          "178:     CK_RV rv;",
          "179:     CK_ULONG i, ulSlotCount = 0;",
          "",
          "[Removed Lines]",
          "176: p11_session_init(CK_MECHANISM_TYPE mechanismType, CK_SESSION_HANDLE_PTR phSession)",
          "",
          "[Added Lines]",
          "176: p11_session_init(CK_MECHANISM_TYPE mechanismType,",
          "177:                  CK_SESSION_HANDLE_PTR phSession,",
          "178:                  CK_FLAGS *pFlags)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214:     for (i = 0; i < ulSlotCount; i++) {",
          "215:         rv = p11_module->C_GetMechanismInfo(pSlotList[i], mechanismType, &info);",
          "218:     }",
          "220:     if (i == ulSlotCount) {",
          "",
          "[Removed Lines]",
          "216:         if (rv == CKR_OK)",
          "217:             break;",
          "",
          "[Added Lines]",
          "220:         if (rv == CKR_OK) {",
          "222:      break;",
          "223:  }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "235: }",
          "237: static int",
          "239: {",
          "241: }",
          "243: static CK_KEY_TYPE",
          "",
          "[Removed Lines]",
          "238: p11_mech_available_p(CK_MECHANISM_TYPE mechanismType)",
          "240:     return p11_session_init(mechanismType, NULL) == CKR_OK;",
          "",
          "[Added Lines]",
          "244: p11_mech_available_p(CK_MECHANISM_TYPE mechanismType, CK_FLAGS reqFlags)",
          "246:     CK_RV rv;",
          "247:     CK_FLAGS flags;",
          "249:     rv = p11_session_init(mechanismType, NULL, &flags);",
          "250:     if (rv != CKR_OK)",
          "251:  return 0;",
          "253:     return (flags & reqFlags) == reqFlags;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "302:         ctx->cipher->iv_len",
          "303:     };",
          "304:     struct pkcs11_cipher_ctx *p11ctx = (struct pkcs11_cipher_ctx *)ctx->cipher_data;",
          "306:     rv = CKR_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318:     CK_FLAGS flags;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "311:     if (p11ctx->hSession == CK_INVALID_HANDLE) {",
          "313:         if (rv != CKR_OK)",
          "314:             goto cleanup;",
          "315:     }",
          "317:     if (key != NULL) {",
          "",
          "[Removed Lines]",
          "312:         rv = p11_session_init(mechanismType, &p11ctx->hSession);",
          "",
          "[Added Lines]",
          "326:         rv = p11_session_init(mechanismType, &p11ctx->hSession, &flags);",
          "330:  if ((flags & (CKF_ENCRYPT|CKF_DECRYPT)) != (CKF_ENCRYPT|CKF_DECRYPT)) {",
          "331:      rv = CKR_MECHANISM_INVALID;",
          "332:      goto cleanup;",
          "333:  }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "388: {",
          "389:     struct pkcs11_md_ctx *p11ctx = (struct pkcs11_md_ctx *)ctx;",
          "390:     CK_RV rv;",
          "392:     if (p11ctx->hSession != CK_INVALID_HANDLE)",
          "393:         p11_md_cleanup(ctx);",
          "402:     }",
          "404:     return rv == CKR_OK;",
          "405: }",
          "",
          "[Removed Lines]",
          "395:     rv = p11_session_init(mechanismType, &p11ctx->hSession);",
          "396:     if (rv == CKR_OK) {",
          "397:         CK_MECHANISM mechanism = { mechanismType, NULL, 0 };",
          "399:         assert(p11_module != NULL);",
          "401:         rv = p11_module->C_DigestInit(p11ctx->hSession, &mechanism);",
          "",
          "[Added Lines]",
          "410:     CK_FLAGS flags;",
          "411:     CK_MECHANISM mechanism = { mechanismType, NULL, 0 };",
          "416:     rv = p11_session_init(mechanismType, &p11ctx->hSession, &flags);",
          "417:     if (rv != CKR_OK)",
          "418:  goto cleanup;",
          "420:     if ((flags & CKF_DIGEST) != CKF_DIGEST) {",
          "421:  rv = CKR_MECHANISM_INVALID;",
          "422:  goto cleanup;",
          "425:     assert(p11_module != NULL);",
          "427:     rv = p11_module->C_DigestInit(p11ctx->hSession, &mechanism);",
          "429:   cleanup:",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "474:     const EVP_CIPHER *                                                  \\",
          "475:     hc_EVP_pkcs11_##name(void)                                          \\",
          "476:     {                                                                   \\",
          "478:             return &pkcs11_##name;                                      \\",
          "479:         else                                                            \\",
          "480:             return NULL;                                                \\",
          "",
          "[Removed Lines]",
          "477:         if (p11_mech_available_p(mechanismType))                        \\",
          "",
          "[Added Lines]",
          "503:         if (p11_mech_available_p(mechanismType, CKF_ENCRYPT|CKF_DECRYPT)) \\",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "524:             p11_md_cleanup                                              \\",
          "525:         };                                                              \\",
          "526:                                                                         \\",
          "528:             return &name;                                               \\",
          "529:         else                                                            \\",
          "530:             return NULL;                                                \\",
          "",
          "[Removed Lines]",
          "527:         if (p11_mech_available_p(mechanismType))                        \\",
          "",
          "[Added Lines]",
          "553:         if (p11_mech_available_p(mechanismType, CKF_DIGEST))            \\",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6fd276011e191e714333e990042b2272c2592f08",
      "candidate_info": {
        "commit_hash": "6fd276011e191e714333e990042b2272c2592f08",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/6fd276011e191e714333e990042b2272c2592f08",
        "files": [
          "lib/wind/gen-punycode-examples.py"
        ],
        "message": "lib/wind: PY3 gen-punycode-examples.py\n\nUpdate gen-punycode-examples.py for python 3.\n\ngen-punycode-examples.py parses the Sample strings from section 7.1\nof rfc3492.txt and generates the punycode_examples.[ch] sources containing\nthe punycode_examples[].\n\nPython 3 requires that print output be surrounded by parentheses\nand the split and join operations have been moved from the \"string\"\nclass to built-ins.\n\nThis change adds the missing parentheses and switches to the built-in\nsplit and join str operations.\n\nThe \"string\" class is no longer required as an import.\n\nChange-Id: Ic5f341080d2ff2feef692c89e0b28dcbf4e48cb4\n(cherry picked from commit 63914b95b8aa1153fc44c7cc5b6a4ca1eb2bbc39)",
        "before_after_code_files": [
          "lib/wind/gen-punycode-examples.py||lib/wind/gen-punycode-examples.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/wind/gen-punycode-examples.py||lib/wind/gen-punycode-examples.py": [
          "File: lib/wind/gen-punycode-examples.py -> lib/wind/gen-punycode-examples.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: # SUCH DAMAGE.",
          "37: import re",
          "39: import sys",
          "41: import generate",
          "43: if len(sys.argv) != 3:",
          "45:     sys.exit(1)",
          "47: f = open(sys.argv[1], 'r')",
          "",
          "[Removed Lines]",
          "38: import string",
          "44:     print \"usage: %s rfc3492.txt\" % sys.argv[0]",
          "",
          "[Added Lines]",
          "43:     print(\"usage: %s rfc3492.txt\" % sys.argv[0])",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:             else:",
          "73:                 m = re.search('^ *([uU]+.*) *$', l)",
          "74:                 if m:",
          "76:                 else:",
          "77:                     m = re.search('^ *Punycode: (.*) *$', l)",
          "78:                     if m:",
          "",
          "[Removed Lines]",
          "75:                     codes.extend(string.split(m.group(1), ' '))",
          "",
          "[Added Lines]",
          "74:       codes.extend(m.group(1).split(' '))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "115:     examples_c.file.write(",
          "116:         \"  {%u, {%s}, \\\"%s\\\", \\\"%s\\\"},\\n\" %",
          "117:         (len(cp),",
          "119:          pc,",
          "120:          desc))",
          "",
          "[Removed Lines]",
          "118:          string.join([re.sub('[uU]\\+', '0x', x) for x in cp], ', '),",
          "",
          "[Added Lines]",
          "117:   \",\".join([re.sub('[uU]\\+', '0x', x) for x in cp]),",
          "",
          "---------------"
        ]
      }
    }
  ]
}