{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6fa4d63dbf26c7ec57407edd7987d8036e0a5ee5",
      "candidate_info": {
        "commit_hash": "6fa4d63dbf26c7ec57407edd7987d8036e0a5ee5",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6fa4d63dbf26c7ec57407edd7987d8036e0a5ee5",
        "files": [
          "crypto/x509/x_crl.c",
          "doc/crypto/X509_dup.pod"
        ],
        "message": "Allow null in  X509_CRL_METHOD_free\n\nand fix documentation.\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1634)\n(cherry picked from commit 7cb1ecec59d7c8d6628fb9bfd435306f7e06fd33)",
        "before_after_code_files": [
          "crypto/x509/x_crl.c||crypto/x509/x_crl.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/x509/x_crl.c||crypto/x509/x_crl.c": [
          "File: crypto/x509/x_crl.c -> crypto/x509/x_crl.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "442: void X509_CRL_METHOD_free(X509_CRL_METHOD *m)",
          "443: {",
          "445:         return;",
          "446:     OPENSSL_free(m);",
          "447: }",
          "",
          "[Removed Lines]",
          "444:     if (!(m->flags & X509_CRL_METHOD_DYNAMIC))",
          "",
          "[Added Lines]",
          "444:     if (m == NULL || !(m->flags & X509_CRL_METHOD_DYNAMIC))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10f60797e7df6208075acdb08cf3167fae667b47",
      "candidate_info": {
        "commit_hash": "10f60797e7df6208075acdb08cf3167fae667b47",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/10f60797e7df6208075acdb08cf3167fae667b47",
        "files": [
          "Configurations/10-main.conf"
        ],
        "message": "Mark VC templates correctly.\n\nVC-noCE-common and VC-WIN64-common were missing this line:\n\n        template         => 1,\n\nFixes GH#1809\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1811)\n(cherry picked from commit be1f4812111aa76f12db91d9059ead3b43314b4c)",
        "before_after_code_files": [
          "Configurations/10-main.conf||Configurations/10-main.conf"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Configurations/10-main.conf||Configurations/10-main.conf": [
          "File: Configurations/10-main.conf -> Configurations/10-main.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1276:     },",
          "1277:     \"VC-noCE-common\" => {",
          "1278:         inherit_from     => [ \"VC-common\" ],",
          "1279:         cflags           => add(picker(default => \"-DUNICODE -D_UNICODE\",",
          "1280:                                        debug   =>",
          "1281:                                        sub {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1279:         template         => 1,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1312:     },",
          "1313:     \"VC-WIN64-common\" => {",
          "1314:         inherit_from     => [ \"VC-noCE-common\" ],",
          "1315:         ex_libs          => add(sub {",
          "1316:             my @ex_libs = ();",
          "1317:             push @ex_libs, 'bufferoverflowu.lib' if (`cl 2>&1` =~ /14\\.00\\.4[0-9]{4}\\./);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1316:         template         => 1,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6f2de02624ec55d29f74c4c38994b56ec3250a10",
      "candidate_info": {
        "commit_hash": "6f2de02624ec55d29f74c4c38994b56ec3250a10",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6f2de02624ec55d29f74c4c38994b56ec3250a10",
        "files": [
          "ssl/statem/statem_srvr.c"
        ],
        "message": "Correct pointer to be freed\n\nThe pointer that was freed in the SSLv2 section of ssl_bytes_to_cipher_list\nmay have stepped up from its allocated position.  Use a pointer that is\nguaranteed to point at the start of the allocated block instead.\n\nReviewed-by: Kurt Roeckx <kurt@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2312)\n(cherry picked from commit 63414e64e66e376654e993ac966e3b2f9d849d3b)",
        "before_after_code_files": [
          "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/statem/statem_srvr.c||ssl/statem/statem_srvr.c": [
          "File: ssl/statem/statem_srvr.c -> ssl/statem/statem_srvr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3292:                     || (leadbyte != 0",
          "3293:                         && !PACKET_forward(&sslv2ciphers, TLS_CIPHER_LEN))) {",
          "3296:                 s->s3->tmp.ciphers_raw = NULL;",
          "3297:                 s->s3->tmp.ciphers_rawlen = 0;",
          "3298:                 goto err;",
          "",
          "[Removed Lines]",
          "3295:                 OPENSSL_free(raw);",
          "",
          "[Added Lines]",
          "3295:                 OPENSSL_free(s->s3->tmp.ciphers_raw);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3bdc1dc8fcc97a8945ddbc2748e7059207ea3914",
      "candidate_info": {
        "commit_hash": "3bdc1dc8fcc97a8945ddbc2748e7059207ea3914",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3bdc1dc8fcc97a8945ddbc2748e7059207ea3914",
        "files": [
          "crypto/evp/e_chacha20_poly1305.c"
        ],
        "message": "Properly zero cipher_data for ChaCha20-Poly1305 on cleanup\n\nFix a typo. Probably this has not been found because EVP_CIPHER_CTX is\nsmaller than EVP_CHACHA_AEAD_CTX and heap overflow does not occur.\n\nReviewed-by: Richard Levitte <levitte@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2294)\n(cherry picked from commit a8f957686675194d786b41f6e1f7c48bb85723ec)",
        "before_after_code_files": [
          "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
          ],
          "candidate": [
            "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
          "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "316: {",
          "317:     EVP_CHACHA_AEAD_CTX *actx = aead_data(ctx);",
          "318:     if (actx)",
          "320:     return 1;",
          "321: }",
          "",
          "[Removed Lines]",
          "319:         OPENSSL_cleanse(ctx->cipher_data, sizeof(*ctx) + Poly1305_ctx_size());",
          "",
          "[Added Lines]",
          "319:         OPENSSL_cleanse(ctx->cipher_data, sizeof(*actx) + Poly1305_ctx_size());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "39ddc55f4869f58beadad26c1b41a5ae06341986",
      "candidate_info": {
        "commit_hash": "39ddc55f4869f58beadad26c1b41a5ae06341986",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/39ddc55f4869f58beadad26c1b41a5ae06341986",
        "files": [
          "engines/e_capi.c"
        ],
        "message": "engines/e_capi.c: adhere to CryptAcquireContextW unconditionally.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(cherry picked from commit 3a5b64b2f039a237b595961da07350b3f23282d0)",
        "before_after_code_files": [
          "engines/e_capi.c||engines/e_capi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/e_capi.c||engines/e_capi.c": [
          "File: engines/e_capi.c -> engines/e_capi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "479:         use_aes_csp = 1;",
          "480:         CryptReleaseContext(hprov, 0);",
          "481:     }",
          "",
          "[Removed Lines]",
          "477:     if (CryptAcquireContext(&hprov, NULL, NULL, PROV_RSA_AES,",
          "478:                             CRYPT_VERIFYCONTEXT)) {",
          "",
          "[Added Lines]",
          "477:     if (CryptAcquireContextW(&hprov, NULL, NULL, PROV_RSA_AES,",
          "478:                              CRYPT_VERIFYCONTEXT)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1179:     HCRYPTPROV hprov;",
          "1180:     DWORD err, idx, flags, buflen = 0, clen;",
          "1181:     LPSTR cname;",
          "1184:     CAPI_trace(ctx, \"Listing containers CSP=%s, type = %d\\n\", ctx->cspname,",
          "1185:                ctx->csptype);",
          "1187:         if ((clen = MultiByteToWideChar(CP_ACP, 0, ctx->cspname, -1,",
          "1188:                                         NULL, 0))) {",
          "1189:             cspname = alloca(clen * sizeof(WCHAR));",
          "1190:             MultiByteToWideChar(CP_ACP, 0, ctx->cspname, -1, (WCHAR *)cspname,",
          "1191:                                 clen);",
          "1192:         }",
          "1194:             CAPIerr(CAPI_F_CAPI_LIST_CONTAINERS, ERR_R_MALLOC_FAILURE);",
          "1195:             capi_addlasterror();",
          "1196:             return 0;",
          "1197:         }",
          "1200:     }",
          "1203:         CAPIerr(CAPI_F_CAPI_LIST_CONTAINERS,",
          "1204:                 CAPI_R_CRYPTACQUIRECONTEXT_ERROR);",
          "1205:         capi_addlasterror();",
          "",
          "[Removed Lines]",
          "1182:     LPTSTR cspname = NULL;",
          "1186:     if (ctx->cspname && sizeof(TCHAR) != sizeof(char)) {",
          "1193:         if (!cspname) {",
          "1198:     } else {",
          "1199:         cspname = (TCHAR *)ctx->cspname;",
          "1201:     if (!CryptAcquireContext(&hprov, NULL, cspname, ctx->csptype,",
          "1202:                              CRYPT_VERIFYCONTEXT)) {",
          "",
          "[Added Lines]",
          "1182:     LPWSTR cspname = NULL;",
          "1186:     if (ctx->cspname != NULL) {",
          "1193:         if (cspname == NULL) {",
          "1199:     if (!CryptAcquireContextW(&hprov, NULL, cspname, ctx->csptype,",
          "1200:                               CRYPT_VERIFYCONTEXT)) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1460:     }",
          "1461: }",
          "1465: {",
          "1466:     DWORD dwFlags = 0;",
          "1467:     CAPI_KEY *key = OPENSSL_malloc(sizeof(*key));",
          "",
          "[Removed Lines]",
          "1463: static CAPI_KEY *capi_get_key(CAPI_CTX *ctx, const TCHAR *contname,",
          "1464:                               TCHAR *provname, DWORD ptype, DWORD keyspec)",
          "",
          "[Added Lines]",
          "1461: static CAPI_KEY *capi_get_key(CAPI_CTX *ctx, const WCHAR *contname,",
          "1462:                               WCHAR *provname, DWORD ptype, DWORD keyspec)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1478:                    contname, provname, ptype);",
          "1479:     } else if (ctx && ctx->debug_level >= CAPI_DBG_TRACE && ctx->debug_file) {",
          "1484:         CAPI_trace(ctx, \"capi_get_key, contname=%s, provname=%s, type=%d\\n\",",
          "1485:                    _contname, _provname, ptype);",
          "",
          "[Removed Lines]",
          "1481:         char *_contname = wide_to_asc((WCHAR *)contname);",
          "1482:         char *_provname = wide_to_asc((WCHAR *)provname);",
          "",
          "[Added Lines]",
          "1479:         char *_contname = wide_to_asc(contname);",
          "1480:         char *_provname = wide_to_asc(provname);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1488:     }",
          "1489:     if (ctx->store_flags & CERT_SYSTEM_STORE_LOCAL_MACHINE)",
          "1490:         dwFlags = CRYPT_MACHINE_KEYSET;",
          "1492:         CAPIerr(CAPI_F_CAPI_GET_KEY, CAPI_R_CRYPTACQUIRECONTEXT_ERROR);",
          "1493:         capi_addlasterror();",
          "1494:         goto err;",
          "",
          "[Removed Lines]",
          "1491:     if (!CryptAcquireContext(&key->hprov, contname, provname, ptype, dwFlags)) {",
          "",
          "[Added Lines]",
          "1489:     if (!CryptAcquireContextW(&key->hprov, contname, provname, ptype,",
          "1490:                               dwFlags)) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1512: {",
          "1513:     CAPI_KEY *key = NULL;",
          "1514:     CRYPT_KEY_PROV_INFO *pinfo = NULL;",
          "1516:     pinfo = capi_get_prov_info(ctx, cert);",
          "1529:                            pinfo->dwProvType, pinfo->dwKeySpec);",
          "1533:     OPENSSL_free(pinfo);",
          "1536:     return key;",
          "1537: }",
          "",
          "[Removed Lines]",
          "1515:     char *provname = NULL, *contname = NULL;",
          "1517:     if (!pinfo)",
          "1518:         goto err;",
          "1519:     if (sizeof(TCHAR) != sizeof(char))",
          "1520:         key = capi_get_key(ctx, (TCHAR *)pinfo->pwszContainerName,",
          "1521:                            (TCHAR *)pinfo->pwszProvName,",
          "1522:                            pinfo->dwProvType, pinfo->dwKeySpec);",
          "1523:     else {",
          "1524:         provname = wide_to_asc(pinfo->pwszProvName);",
          "1525:         contname = wide_to_asc(pinfo->pwszContainerName);",
          "1526:         if (!provname || !contname)",
          "1527:             goto err;",
          "1528:         key = capi_get_key(ctx, (TCHAR *)contname, (TCHAR *)provname,",
          "1530:     }",
          "1532:  err:",
          "1534:     OPENSSL_free(provname);",
          "1535:     OPENSSL_free(contname);",
          "",
          "[Added Lines]",
          "1517:     if (pinfo != NULL)",
          "1518:         key = capi_get_key(ctx, pinfo->pwszContainerName, pinfo->pwszProvName,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1556:         break;",
          "1558:     case CAPI_LU_CONTNAME:",
          "1560:             WCHAR *contname, *provname;",
          "1561:             DWORD len;",
          "",
          "[Removed Lines]",
          "1559:         if (sizeof(TCHAR) != sizeof(char)) {",
          "",
          "[Added Lines]",
          "1546:         {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1568:                 (provname = alloca(len * sizeof(WCHAR)),",
          "1569:                  MultiByteToWideChar(CP_ACP, 0, ctx->cspname, -1,",
          "1570:                                      provname, len)))",
          "1572:                                    ctx->csptype, ctx->keytype);",
          "1576:         }",
          "1577:         break;",
          "1578:     }",
          "",
          "[Removed Lines]",
          "1571:                 key = capi_get_key(ctx, (TCHAR *)contname, (TCHAR *)provname,",
          "1573:         } else {",
          "1574:             key = capi_get_key(ctx, (TCHAR *)id, (TCHAR *)ctx->cspname,",
          "1575:                                ctx->csptype, ctx->keytype);",
          "",
          "[Added Lines]",
          "1558:                 key = capi_get_key(ctx, contname, provname,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1631:     CAPI_trace(ctx, \"capi_ctx_set_provname, name=%s, type=%d\\n\", pname, type);",
          "1632:     if (check) {",
          "1633:         HCRYPTPROV hprov;",
          "1644:         }",
          "1647:             CAPIerr(CAPI_F_CAPI_CTX_SET_PROVNAME,",
          "1648:                     CAPI_R_CRYPTACQUIRECONTEXT_ERROR);",
          "1649:             capi_addlasterror();",
          "",
          "[Removed Lines]",
          "1634:         LPTSTR name = NULL;",
          "1636:         if (sizeof(TCHAR) != sizeof(char)) {",
          "1637:             DWORD len;",
          "1638:             if ((len = MultiByteToWideChar(CP_ACP, 0, pname, -1, NULL, 0))) {",
          "1639:                 name = alloca(len * sizeof(WCHAR));",
          "1640:                 MultiByteToWideChar(CP_ACP, 0, pname, -1, (WCHAR *)name, len);",
          "1641:             }",
          "1642:         } else {",
          "1643:             name = (TCHAR *)pname;",
          "1645:         if (!name || !CryptAcquireContext(&hprov, NULL, name, type,",
          "1646:                                           CRYPT_VERIFYCONTEXT)) {",
          "",
          "[Added Lines]",
          "1618:         LPWSTR name = NULL;",
          "1619:         DWORD len;",
          "1621:         if ((len = MultiByteToWideChar(CP_ACP, 0, pname, -1, NULL, 0))) {",
          "1622:             name = alloca(len * sizeof(WCHAR));",
          "1623:             MultiByteToWideChar(CP_ACP, 0, pname, -1, (WCHAR *)name, len);",
          "1625:         if (name == NULL || !CryptAcquireContextW(&hprov, NULL, name, type,",
          "1626:                                                   CRYPT_VERIFYCONTEXT)) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}