{
  "cve_id": "CVE-2016-10172",
  "cve_desc": "The read_new_config_info function in open_utils.c in Wavpack before 5.1.0 allows remote attackers to cause a denial of service (out-of-bounds read) via a crafted WV file.",
  "repo": "dbry/WavPack",
  "patch_hash": "4bc05fc490b66ef2d45b1de26abf1455b486b0dc",
  "patch_info": {
    "commit_hash": "4bc05fc490b66ef2d45b1de26abf1455b486b0dc",
    "repo": "dbry/WavPack",
    "commit_url": "https://github.com/dbry/WavPack/commit/4bc05fc490b66ef2d45b1de26abf1455b486b0dc",
    "files": [
      "src/open_utils.c",
      "src/read_words.c"
    ],
    "message": "fixes for 4 fuzz failures posted to SourceForge mailing list",
    "before_after_code_files": [
      "src/open_utils.c||src/open_utils.c",
      "src/read_words.c||src/read_words.c"
    ]
  },
  "patch_diff": {
    "src/open_utils.c||src/open_utils.c": [
      "File: src/open_utils.c -> src/open_utils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         wpc->file_format = *byteptr++;",
      "565:         wpc->config.qmode = (wpc->config.qmode & ~0xff) | *byteptr++;",
      "566:         bytecnt -= 2;",
      "",
      "[Removed Lines]",
      "563:     if (bytecnt) {",
      "",
      "[Added Lines]",
      "563:     if (bytecnt >= 2) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "593:                         for (i = 0; i < nchans; ++i)",
      "594:                             if (bytecnt) {",
      "595:                                 wpc->channel_reordering [i] = *byteptr++;",
      "596:                                 bytecnt--;",
      "597:                             }",
      "598:                             else",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "597:                                 if (wpc->channel_reordering [i] >= nchans)  // make sure index is in range",
      "598:                                     wpc->channel_reordering [i] = 0;",
      "",
      "---------------"
    ],
    "src/read_words.c||src/read_words.c": [
      "File: src/read_words.c -> src/read_words.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "289:     low &= 0x7fffffff;",
      "290:     high &= 0x7fffffff;",
      "291:     mid = (high + low + 1) >> 1;",
      "293:     if (!c->error_limit)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "292:     if (low > high)         // make sure high and low make sense",
      "293:         high = low;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e3c5be76b24ce030fba9dc0a769d5689f89b24fe",
      "candidate_info": {
        "commit_hash": "e3c5be76b24ce030fba9dc0a769d5689f89b24fe",
        "repo": "dbry/WavPack",
        "commit_url": "https://github.com/dbry/WavPack/commit/e3c5be76b24ce030fba9dc0a769d5689f89b24fe",
        "files": [
          "cli/wvparser.c",
          "src/open_utils.c",
          "src/pack.c",
          "src/wavpack_local.h"
        ],
        "message": "create a new metadata ID (NEW_CONFIG) and use that for \"qmode\" instead of tacking it onto the old configure block (but honor that too because the alpha used it) -- this will also have advanced channel configuration later (for CAF)",
        "before_after_code_files": [
          "cli/wvparser.c||cli/wvparser.c",
          "src/open_utils.c||src/open_utils.c",
          "src/pack.c||src/pack.c",
          "src/wavpack_local.h||src/wavpack_local.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/open_utils.c||src/open_utils.c"
          ],
          "candidate": [
            "src/open_utils.c||src/open_utils.c"
          ]
        }
      },
      "candidate_diff": {
        "cli/wvparser.c||cli/wvparser.c": [
          "File: cli/wvparser.c -> cli/wvparser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "101: #define ID_ODD_SIZE             0x40",
          "102: #define ID_LARGE                0x80",
          "129: static const char *metadata_names [] = {",
          "130:     \"DUMMY\", \"ENCODER_INFO\", \"DECORR_TERMS\", \"DECORR_WEIGHTS\", \"DECORR_SAMPLES\", \"ENTROPY_VARS\", \"HYBRID_PROFILE\", \"SHAPING_WEIGHTS\",",
          "131:     \"FLOAT_INFO\", \"INT32_INFO\", \"WV_BITSTREAM\", \"WVC_BITSTREAM\", \"WVX_BITSTREAM\", \"CHANNEL_INFO\", \"UNASSIGNED\", \"UNASSIGNED\",",
          "132:     \"UNASSIGNED\", \"RIFF_HEADER\", \"RIFF_TRAILER\", \"ALT_HEADER\", \"ALT_TRAILER\", \"CONFIG_BLOCK\", \"MD5_CHECKSUM\", \"SAMPLE_RATE\",",
          "134: };",
          "136: static int32_t read_bytes (void *buff, int32_t bcount);",
          "",
          "[Removed Lines]",
          "104: #define ID_DUMMY                0x0",
          "105: #define ID_ENCODER_INFO         0x1",
          "106: #define ID_DECORR_TERMS         0x2",
          "107: #define ID_DECORR_WEIGHTS       0x3",
          "108: #define ID_DECORR_SAMPLES       0x4",
          "109: #define ID_ENTROPY_VARS         0x5",
          "110: #define ID_HYBRID_PROFILE       0x6",
          "111: #define ID_SHAPING_WEIGHTS      0x7",
          "112: #define ID_FLOAT_INFO           0x8",
          "113: #define ID_INT32_INFO           0x9",
          "114: #define ID_WV_BITSTREAM         0xa",
          "115: #define ID_WVC_BITSTREAM        0xb",
          "116: #define ID_WVX_BITSTREAM        0xc",
          "117: #define ID_CHANNEL_INFO         0xd",
          "119: #define ID_RIFF_HEADER          (ID_OPTIONAL_DATA | 0x1)",
          "120: #define ID_RIFF_TRAILER         (ID_OPTIONAL_DATA | 0x2)",
          "121: #define ID_ALT_HEADER           (ID_OPTIONAL_DATA | 0x3)",
          "122: #define ID_ALT_TRAILER          (ID_OPTIONAL_DATA | 0x4)",
          "123: #define ID_CONFIG_BLOCK         (ID_OPTIONAL_DATA | 0x5)",
          "124: #define ID_MD5_CHECKSUM         (ID_OPTIONAL_DATA | 0x6)",
          "125: #define ID_SAMPLE_RATE          (ID_OPTIONAL_DATA | 0x7)",
          "126: #define ID_ALT_EXTENSION        (ID_OPTIONAL_DATA | 0x8)",
          "127: #define ID_ALT_MD5_CHECKSUM     (ID_OPTIONAL_DATA | 0x9)",
          "133:     \"ALT_EXTENSION\", \"ALT_MD5_CHECKSUM\", \"UNASSIGNED\", \"UNASSIGNED\", \"UNASSIGNED\", \"UNASSIGNED\", \"UNASSIGNED\", \"UNASSIGNED\"",
          "",
          "[Added Lines]",
          "108:     \"ALT_EXTENSION\", \"ALT_MD5_CHECKSUM\", \"NEW_CONFIG\", \"UNASSIGNED\", \"UNASSIGNED\", \"UNASSIGNED\", \"UNASSIGNED\", \"UNASSIGNED\"",
          "",
          "---------------"
        ],
        "src/open_utils.c||src/open_utils.c": [
          "File: src/open_utils.c -> src/open_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "506:     return TRUE;",
          "507: }",
          "511: static int read_sample_rate (WavpackContext *wpc, WavpackMetadata *wpmd)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "514: static int read_new_config_info (WavpackContext *wpc, WavpackMetadata *wpmd)",
          "515: {",
          "516:     int bytecnt = wpmd->byte_length;",
          "517:     unsigned char *byteptr = wpmd->data;",
          "519:     wpc->version_five = 1;      // block signals version 5.0",
          "523:     if (bytecnt)",
          "524:         wpc->config.qmode = (wpc->config.qmode & ~0xff) | *byteptr;",
          "526:     return TRUE;",
          "527: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "622:         case ID_CONFIG_BLOCK:",
          "623:             return read_config_info (wpc, wpmd);",
          "625:         case ID_SAMPLE_RATE:",
          "626:             return read_sample_rate (wpc, wpmd);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "645:         case ID_NEW_CONFIG_BLOCK:",
          "646:             return read_new_config_info (wpc, wpmd);",
          "",
          "---------------"
        ],
        "src/pack.c||src/pack.c": [
          "File: src/pack.c -> src/pack.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:     if (wpc->config.flags & CONFIG_EXTRA_MODE)",
          "361:     wpmd->byte_length = (int32_t)(byteptr - (char *) wpmd->data);",
          "362: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "362:     wpmd->byte_length = (int32_t)(byteptr - (char *) wpmd->data);",
          "363: }",
          "371: static void write_new_config_info (WavpackContext *wpc, WavpackMetadata *wpmd)",
          "372: {",
          "373:     char *byteptr;",
          "375:     byteptr = wpmd->data = malloc (8);",
          "376:     wpmd->id = ID_NEW_CONFIG_BLOCK;",
          "378:     if (wpc->config.qmode)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "987:             free_metadata (&wpmd);",
          "988:         }",
          "990:         bs_open_write (&wps->wvbits, wps->blockbuff + ((WavpackHeader *) wps->blockbuff)->ckSize + 12, wps->blockend);",
          "992:         if (wpc->wvc_flag) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1007:             free_metadata (&wpmd);",
          "1008:         }",
          "1010:         if (flags & INITIAL_BLOCK) {",
          "1011:             write_new_config_info (wpc, &wpmd);",
          "1012:             copy_metadata (&wpmd, wps->blockbuff, wps->blockend);",
          "",
          "---------------"
        ],
        "src/wavpack_local.h||src/wavpack_local.h": [
          "File: src/wavpack_local.h -> src/wavpack_local.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: #define ID_SAMPLE_RATE          (ID_OPTIONAL_DATA | 0x7)",
          "220: #define ID_ALT_EXTENSION        (ID_OPTIONAL_DATA | 0x8)",
          "221: #define ID_ALT_MD5_CHECKSUM     (ID_OPTIONAL_DATA | 0x9)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222: #define ID_NEW_CONFIG_BLOCK     (ID_OPTIONAL_DATA | 0xa)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0a3c1c95027b5434375b04414f6a7e34e5375f05",
      "candidate_info": {
        "commit_hash": "0a3c1c95027b5434375b04414f6a7e34e5375f05",
        "repo": "dbry/WavPack",
        "commit_url": "https://github.com/dbry/WavPack/commit/0a3c1c95027b5434375b04414f6a7e34e5375f05",
        "files": [
          "include/wavpack.h",
          "src/common_utils.c",
          "src/open_utils.c",
          "src/pack.c",
          "src/pack_utils.c",
          "src/wavpack_local.h"
        ],
        "message": "allow storing CAF channel layout and reorder info (and retrieving it)",
        "before_after_code_files": [
          "include/wavpack.h||include/wavpack.h",
          "src/common_utils.c||src/common_utils.c",
          "src/open_utils.c||src/open_utils.c",
          "src/pack.c||src/pack.c",
          "src/pack_utils.c||src/pack_utils.c",
          "src/wavpack_local.h||src/wavpack_local.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/open_utils.c||src/open_utils.c"
          ],
          "candidate": [
            "src/open_utils.c||src/open_utils.c"
          ]
        }
      },
      "candidate_diff": {
        "include/wavpack.h||include/wavpack.h": [
          "File: include/wavpack.h -> include/wavpack.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "182: #define CONFIG_PAIR_UNDEF_CHANS 0x20000000 // encode undefined channels in stereo pairs",
          "183: #define CONFIG_OPTIMIZE_MONO    0x80000000 // optimize for mono streams posing as stereo",
          "185: #define QMODE_BIG_ENDIAN        0x1     // big-endian data format (opposite of WAV format)",
          "186: #define QMODE_SIGNED_BYTES      0x2     // 8-bit audio data is signed (opposite of WAV format)",
          "187: #define QMODE_UNSIGNED_WORDS    0x4     // audio data (other than 8-bit) is unsigned (opposite of WAV format)",
          "189: #define QMODE_ADOBE_MODE        0x100   // user specified Adobe mode",
          "190: #define QMODE_NO_STORE_WRAPPER  0x200   // user specified to not store audio file wrapper (RIFF, CAFF, etc.)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "195: #define QMODE_REORDERED_CHANS   0x8     // source channels were not Microsoft order, so they were reordered",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "282: int WavpackGetReducedChannels (WavpackContext *wpc);",
          "283: int WavpackGetFloatNormExp (WavpackContext *wpc);",
          "284: int WavpackGetMD5Sum (WavpackContext *wpc, unsigned char data [16]);",
          "285: uint32_t WavpackGetWrapperBytes (WavpackContext *wpc);",
          "286: unsigned char *WavpackGetWrapperData (WavpackContext *wpc);",
          "287: void WavpackFreeWrapper (WavpackContext *wpc);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297: uint32_t WavpackGetChannelLayout (WavpackContext *wpc, unsigned char *reorder);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "306: WavpackContext *WavpackOpenFileOutput (WavpackBlockOutput blockout, void *wv_id, void *wvc_id);",
          "307: int WavpackSetConfiguration (WavpackContext *wpc, WavpackConfig *config, uint32_t total_samples);",
          "308: int WavpackAddWrapper (WavpackContext *wpc, void *data, uint32_t bcount);",
          "309: int WavpackAddWrapperEx (WavpackContext *wpc, char *extension, void *data, uint32_t bcount);",
          "310: int WavpackStoreMD5Sum (WavpackContext *wpc, unsigned char data [16]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "321: int WavpackSetChannelLayout (WavpackContext *wpc, uint32_t layout_tag, const unsigned char *reorder);",
          "",
          "---------------"
        ],
        "src/common_utils.c||src/common_utils.c": [
          "File: src/common_utils.c -> src/common_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248:     return 0.0;",
          "249: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "262: uint32_t WavpackGetChannelLayout (WavpackContext *wpc, unsigned char *reorder)",
          "263: {",
          "264:     if ((wpc->channel_layout & 0xff) && wpc->channel_reordering && reorder)",
          "265:         memcpy (reorder, wpc->channel_reordering, wpc->channel_layout & 0xff);",
          "267:     return wpc->channel_layout;",
          "268: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "276:     WavpackFreeWrapper (wpc);",
          "278: #ifndef NO_TAGS",
          "279:     free_tag (&wpc->m_tag);",
          "280: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "297:     if (wpc->channel_reordering)",
          "298:         free (wpc->channel_reordering);",
          "",
          "---------------"
        ],
        "src/open_utils.c||src/open_utils.c": [
          "File: src/open_utils.c -> src/open_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "516:     int bytecnt = wpmd->byte_length;",
          "517:     unsigned char *byteptr = wpmd->data;",
          "526:     return TRUE;",
          "527: }",
          "",
          "[Removed Lines]",
          "519:     wpc->version_five = 1;      // block signals version 5.0",
          "523:     if (bytecnt)",
          "524:         wpc->config.qmode = (wpc->config.qmode & ~0xff) | *byteptr;",
          "",
          "[Added Lines]",
          "519:     wpc->version_five = 1;      // just having this block signals version 5.0",
          "521:     wpc->config.qmode = wpc->channel_layout = 0;",
          "523:     if (wpc->channel_reordering) {",
          "524:         free (wpc->channel_reordering);",
          "525:         wpc->channel_reordering = NULL;",
          "526:     }",
          "530:     if (bytecnt) {",
          "531:         wpc->config.qmode = (wpc->config.qmode & ~0xff) | *byteptr++;",
          "532:         bytecnt--;",
          "536:         if (bytecnt) {",
          "537:             int nchans, i;",
          "539:             wpc->channel_layout = (int32_t) *byteptr++ << 16;",
          "540:             bytecnt--;",
          "544:             if (bytecnt) {",
          "545:                 wpc->channel_layout += nchans = *byteptr++;",
          "546:                 bytecnt--;",
          "550:                 if (bytecnt) {",
          "551:                     if (bytecnt > nchans)",
          "552:                         return FALSE;",
          "554:                     wpc->channel_reordering = malloc (nchans);",
          "558:                     if (wpc->channel_reordering) {",
          "559:                         for (i = 0; i < nchans; ++i)",
          "560:                             if (bytecnt) {",
          "561:                                 wpc->channel_reordering [i] = *byteptr++;",
          "562:                                 bytecnt--;",
          "563:                             }",
          "564:                             else",
          "565:                                 wpc->channel_reordering [i] = i;",
          "566:                     }",
          "567:                 }",
          "568:             }",
          "569:             else",
          "570:                 wpc->channel_layout += wpc->config.num_channels;",
          "571:         }",
          "572:     }",
          "",
          "---------------"
        ],
        "src/pack.c||src/pack.c": [
          "File: src/pack.c -> src/pack.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363: }",
          "371: static void write_new_config_info (WavpackContext *wpc, WavpackMetadata *wpmd)",
          "372: {",
          "376:     wpmd->id = ID_NEW_CONFIG_BLOCK;",
          "381:     wpmd->byte_length = (int32_t)(byteptr - (char *) wpmd->data);",
          "382: }",
          "",
          "[Removed Lines]",
          "373:     char *byteptr;",
          "375:     byteptr = wpmd->data = malloc (8);",
          "378:     if (wpc->config.qmode)",
          "",
          "[Added Lines]",
          "373:     char *byteptr = wpmd->data = malloc (260);",
          "377:     if (wpc->config.qmode || wpc->channel_layout) {",
          "380:         if (wpc->channel_layout) {",
          "381:             int nchans = wpc->channel_layout & 0xff;",
          "385:             if (wpc->channel_reordering || nchans != wpc->config.num_channels)",
          "388:             if (wpc->channel_reordering) {",
          "389:                 int i, num_to_send = 0;",
          "393:                 for (i = 0; i < nchans; ++i)",
          "394:                     if (wpc->channel_reordering [i] != i)",
          "395:                         num_to_send = i + 1;",
          "397:                 if (num_to_send) {",
          "398:                     memcpy (byteptr, wpc->channel_reordering, num_to_send);",
          "399:                     byteptr += num_to_send;",
          "400:                 }",
          "401:             }",
          "402:         }",
          "403:     }",
          "",
          "---------------"
        ],
        "src/pack_utils.c||src/pack_utils.c": [
          "File: src/pack_utils.c -> src/pack_utils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:     return TRUE;",
          "239: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: int WavpackSetChannelLayout (WavpackContext *wpc, uint32_t layout_tag, const unsigned char *reorder)",
          "254: {",
          "255:     int nchans = layout_tag & 0xff;",
          "257:     if ((layout_tag & 0xff00ff00) || nchans > wpc->config.num_channels || (nchans && !(layout_tag & 0xff0000)))",
          "258:         return FALSE;",
          "260:     wpc->channel_layout = layout_tag;",
          "262:     if (wpc->channel_reordering) {",
          "263:         free (wpc->channel_reordering);",
          "264:         wpc->channel_reordering = NULL;",
          "265:     }",
          "267:     if (nchans && reorder) {",
          "268:         int min_index = 256, i;",
          "270:         for (i = 0; i < nchans; ++i)",
          "271:             if (reorder [i] < min_index)",
          "272:                 min_index = reorder [i];",
          "274:         wpc->channel_reordering = malloc (nchans);",
          "276:         if (wpc->channel_reordering)",
          "277:             for (i = 0; i < nchans; ++i)",
          "278:                 wpc->channel_reordering [i] = reorder [i] - min_index;",
          "279:     }",
          "280: }",
          "",
          "---------------"
        ],
        "src/wavpack_local.h||src/wavpack_local.h": [
          "File: src/wavpack_local.h -> src/wavpack_local.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "447:     WavpackStream **streams;",
          "448:     void *stream3;",
          "450:     char error_message [80], alt_extension [8];",
          "451: } WavpackContext;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "450:     unsigned char *channel_reordering;",
          "451:     uint32_t channel_layout;",
          "",
          "---------------"
        ]
      }
    }
  ]
}