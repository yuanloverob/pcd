{
  "cve_id": "CVE-2021-36084",
  "cve_desc": "The CIL compiler in SELinux 3.2 has a use-after-free in __cil_verify_classperms (called from __cil_verify_classpermission and __cil_pre_verify_helper).",
  "repo": "SELinuxProject/selinux",
  "patch_hash": "f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
  "patch_info": {
    "commit_hash": "f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
    "repo": "SELinuxProject/selinux",
    "commit_url": "https://github.com/SELinuxProject/selinux/commit/f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
    "files": [
      "libsepol/cil/src/cil_reset_ast.c"
    ],
    "message": "libsepol/cil: Destroy classperms list when resetting classpermission\n\nNicolas Iooss reports:\n  A few months ago, OSS-Fuzz found a crash in the CIL compiler, which\n  got reported as\n  https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28648 (the title\n  is misleading, or is caused by another issue that conflicts with the\n  one I report in this message). Here is a minimized CIL policy which\n  reproduces the issue:\n\n  (class CLASS (PERM))\n  (classorder (CLASS))\n  (sid SID)\n  (sidorder (SID))\n  (user USER)\n  (role ROLE)\n  (type TYPE)\n  (category CAT)\n  (categoryorder (CAT))\n  (sensitivity SENS)\n  (sensitivityorder (SENS))\n  (sensitivitycategory SENS (CAT))\n  (allow TYPE self (CLASS (PERM)))\n  (roletype ROLE TYPE)\n  (userrole USER ROLE)\n  (userlevel USER (SENS))\n  (userrange USER ((SENS)(SENS (CAT))))\n  (sidcontext SID (USER ROLE TYPE ((SENS)(SENS))))\n\n  (classpermission CLAPERM)\n\n  (optional OPT\n      (roletype nonexistingrole nonexistingtype)\n      (classpermissionset CLAPERM (CLASS (PERM)))\n  )\n\n  The CIL policy fuzzer (which mimics secilc built with clang Address\n  Sanitizer) reports:\n\n  ==36541==ERROR: AddressSanitizer: heap-use-after-free on address\n  0x603000004f98 at pc 0x56445134c842 bp 0x7ffe2a256590 sp\n  0x7ffe2a256588\n  READ of size 8 at 0x603000004f98 thread T0\n      #0 0x56445134c841 in __cil_verify_classperms\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1620:8\n      #1 0x56445134a43e in __cil_verify_classpermission\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1650:9\n      #2 0x56445134a43e in __cil_pre_verify_helper\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1715:8\n      #3 0x5644513225ac in cil_tree_walk_core\n  /selinux/libsepol/src/../cil/src/cil_tree.c:272:9\n      #4 0x564451322ab1 in cil_tree_walk\n  /selinux/libsepol/src/../cil/src/cil_tree.c:316:7\n      #5 0x5644513226af in cil_tree_walk_core\n  /selinux/libsepol/src/../cil/src/cil_tree.c:284:9\n      #6 0x564451322ab1 in cil_tree_walk\n  /selinux/libsepol/src/../cil/src/cil_tree.c:316:7\n      #7 0x5644512b88fd in cil_pre_verify\n  /selinux/libsepol/src/../cil/src/cil_post.c:2510:7\n      #8 0x5644512b88fd in cil_post_process\n  /selinux/libsepol/src/../cil/src/cil_post.c:2524:7\n      #9 0x5644511856ff in cil_compile\n  /selinux/libsepol/src/../cil/src/cil.c:564:7\n\nThe classperms list of a classpermission rule is created and filled\nin when classpermissionset rules are processed, so it doesn't own any\npart of the list and shouldn't retain any of it when it is reset.\n\nDestroy the classperms list (without destroying the data in it)  when\nresetting a classpermission rule.\n\nReported-by: Nicolas Iooss <nicolas.iooss@m4x.org>\nSigned-off-by: James Carter <jwcart2@gmail.com>",
    "before_after_code_files": [
      "libsepol/cil/src/cil_reset_ast.c||libsepol/cil/src/cil_reset_ast.c"
    ]
  },
  "patch_diff": {
    "libsepol/cil/src/cil_reset_ast.c||libsepol/cil/src/cil_reset_ast.c": [
      "File: libsepol/cil/src/cil_reset_ast.c -> libsepol/cil/src/cil_reset_ast.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:   return;",
      "55:  }",
      "58: }",
      "60: static void cil_reset_classperms_set(struct cil_classperms_set *cp_set)",
      "",
      "[Removed Lines]",
      "57:  cil_reset_classperms_list(cp->classperms);",
      "",
      "[Added Lines]",
      "57:  cil_list_destroy(&cp->classperms, CIL_FALSE);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "97af65f69644a3233d073ae93980a0d2e51f42e1",
      "candidate_info": {
        "commit_hash": "97af65f69644a3233d073ae93980a0d2e51f42e1",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/97af65f69644a3233d073ae93980a0d2e51f42e1",
        "files": [
          "libsepol/src/policydb.c"
        ],
        "message": "libsepol: add checks for read sizes\n\nAdd checks for invalid read sizes from a binary policy to guard\nallocations.\n\nThe common and class permission counts needs to be limited more strict\notherwise a too high count of common or class permissions can lead to\npermission values with a too high value, which can lead to overflows\nin shift operations.\n\nIn the fuzzer build the value will also be bounded to avoid oom reports.\n\n    ==29857== ERROR: libFuzzer: out-of-memory (malloc(17179868160))\n       To change the out-of-memory limit use -rss_limit_mb=<N>\n\n        #0 0x52dc61 in __sanitizer_print_stack_trace (./out/binpolicy-fuzzer+0x52dc61)\n        #1 0x475618 in fuzzer::PrintStackTrace() fuzzer.o\n        #2 0x458855 in fuzzer::Fuzzer::HandleMalloc(unsigned long) fuzzer.o\n        #3 0x45876a in fuzzer::MallocHook(void const volatile*, unsigned long) fuzzer.o\n        #4 0x534557 in __sanitizer::RunMallocHooks(void const*, unsigned long) (./out/binpolicy-fuzzer+0x534557)\n        #5 0x4aa7d7 in __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool) (./out/binpolicy-fuzzer+0x4aa7d7)\n        #6 0x4aa143 in __asan::asan_malloc(unsigned long, __sanitizer::BufferedStackTrace*) (./out/binpolicy-fuzzer+0x4aa143)\n        #7 0x5259cb in malloc (./out/binpolicy-fuzzer+0x5259cb)\n        #8 0x580b5d in mallocarray ./libsepol/src/./private.h:93:9\n        #9 0x57c2ed in scope_read ./libsepol/src/policydb.c:4120:7\n        #10 0x576b0d in policydb_read ./libsepol/src/policydb.c:4462:9\n        #11 0x55a214 in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:26:6\n        #12 0x45aed3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n        #13 0x446a12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n        #14 0x44c93b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n        #15 0x475dd2 in main (./out/binpolicy-fuzzer+0x475dd2)\n        #16 0x7ffad6e107ec in __libc_start_main csu/../csu/libc-start.c:332:16\n        #17 0x423689 in _start (./out/binpolicy-fuzzer+0x423689)\n\n    ==19462== ERROR: libFuzzer: out-of-memory (malloc(18253611008))\n       To change the out-of-memory limit use -rss_limit_mb=<N>\n\n        #0 0x52dc61 in __sanitizer_print_stack_trace (./out/binpolicy-fuzzer+0x52dc61)\n        #1 0x475618 in fuzzer::PrintStackTrace() fuzzer.o\n        #2 0x458855 in fuzzer::Fuzzer::HandleMalloc(unsigned long) fuzzer.o\n        #3 0x45876a in fuzzer::MallocHook(void const volatile*, unsigned long) fuzzer.o\n        #4 0x534557 in __sanitizer::RunMallocHooks(void const*, unsigned long) (./out/binpolicy-fuzzer+0x534557)\n        #5 0x4aa7d7 in __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool) (./out/binpolicy-fuzzer+0x4aa7d7)\n        #6 0x4aa999 in __asan::asan_calloc(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*) (./out/binpolicy-fuzzer+0x4aa999)\n        #7 0x525b63 in __interceptor_calloc (./out/binpolicy-fuzzer+0x525b63)\n        #8 0x570938 in policydb_index_others ./libsepol/src/policydb.c:1245:6\n        #9 0x5771f3 in policydb_read ./src/policydb.c:4481:6\n        #10 0x55a214 in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:26:6\n        #11 0x45aed3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n        #12 0x446a12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n        #13 0x44c93b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n        #14 0x475dd2 in main (./out/binpolicy-fuzzer+0x475dd2)\n        #15 0x7f4d933157ec in __libc_start_main csu/../csu/libc-start.c:332:16\n        #16 0x423689 in _start (./out/binpolicy-fuzzer+0x423689)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/policydb.c||libsepol/src/policydb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/policydb.c||libsepol/src/policydb.c": [
          "File: libsepol/src/policydb.c -> libsepol/src/policydb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2103:  if (symtab_init(&comdatum->permissions, PERM_SYMTAB_SIZE))",
          "2104:   goto bad;",
          "2105:  comdatum->permissions.nprim = le32_to_cpu(buf[2]);",
          "2106:  nel = le32_to_cpu(buf[3]);",
          "2108:  key = malloc(len + 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2106:  if (comdatum->permissions.nprim > PERM_SYMTAB_SIZE)",
          "2107:   goto bad;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2251:  if (symtab_init(&cladatum->permissions, PERM_SYMTAB_SIZE))",
          "2252:   goto bad;",
          "2253:  cladatum->permissions.nprim = le32_to_cpu(buf[3]);",
          "2254:  nel = le32_to_cpu(buf[4]);",
          "2256:  ncons = le32_to_cpu(buf[5]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2256:  if (cladatum->permissions.nprim > PERM_SYMTAB_SIZE)",
          "2257:   goto bad;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3980:   if (rc < 0)",
          "3981:    return -1;",
          "3982:   nprim = le32_to_cpu(buf[0]);",
          "3983:   nel = le32_to_cpu(buf[1]);",
          "3984:   for (j = 0; j < nel; j++) {",
          "3985:    if (read_f[i] (p, decl->symtab[i].table, fp)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3987:   if (is_saturated(nprim))",
          "3988:    return -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4106:   goto cleanup;",
          "4107:  scope->scope = le32_to_cpu(buf[0]);",
          "4108:  scope->decl_ids_len = le32_to_cpu(buf[1]);",
          "4110:   ERR(fp->handle, \"invalid scope with no declaration\");",
          "4111:   goto cleanup;",
          "4112:  }",
          "",
          "[Removed Lines]",
          "4109:  if (scope->decl_ids_len == 0) {",
          "",
          "[Added Lines]",
          "4115:  if (zero_or_saturated(scope->decl_ids_len)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4396:   if (rc < 0)",
          "4397:    goto bad;",
          "4398:   nprim = le32_to_cpu(buf[0]);",
          "4399:   nel = le32_to_cpu(buf[1]);",
          "4400:   if (nel && !nprim) {",
          "4401:    ERR(fp->handle, \"unexpected items in symbol table with no symbol\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4405:   if (is_saturated(nprim))",
          "4406:    goto bad;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f95dbf2c74246f69fbdf0881434567576159e5f6",
      "candidate_info": {
        "commit_hash": "f95dbf2c74246f69fbdf0881434567576159e5f6",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/f95dbf2c74246f69fbdf0881434567576159e5f6",
        "files": [
          "libsepol/src/module.c"
        ],
        "message": "libsepol: avoid passing NULL pointer to memcpy\n\nmemcpy(3) might be annotated with the function attribute nonnull and\nUBSan then complains:\n\n    module.c:296:3: runtime error: null pointer passed as argument 2, which is declared to never be null\n        #0 0x7f2468efa5b3 in link_netfilter_contexts ./libsepol/src/module.c:296\n        #1 0x7f2468efa5b3 in sepol_link_packages ./libsepol/src/module.c:337\n        #2 0x562331e9e123 in main ./semodule-utils/semodule_link/semodule_link.c:145\n        #3 0x7f2467e247ec in __libc_start_main ../csu/libc-start.c:332\n        #4 0x562331e9d2a9 in _start (./destdir/usr/bin/semodule_link+0x32a9)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/module.c||libsepol/src/module.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/module.c||libsepol/src/module.c": [
          "File: libsepol/src/module.c -> libsepol/src/module.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "293:  }",
          "294:  base->netfilter_contexts = base_context;",
          "295:  for (i = 0; i < num_modules; i++) {",
          "301:  }",
          "302:  return 0;",
          "303: }",
          "",
          "[Removed Lines]",
          "296:   memcpy(base->netfilter_contexts + base->netfilter_contexts_len,",
          "297:          modules[i]->netfilter_contexts,",
          "298:          modules[i]->netfilter_contexts_len);",
          "299:   base->netfilter_contexts_len +=",
          "300:       modules[i]->netfilter_contexts_len;",
          "",
          "[Added Lines]",
          "296:   if (modules[i]->netfilter_contexts_len > 0) {",
          "297:    memcpy(base->netfilter_contexts + base->netfilter_contexts_len,",
          "298:           modules[i]->netfilter_contexts,",
          "299:           modules[i]->netfilter_contexts_len);",
          "300:    base->netfilter_contexts_len +=",
          "301:        modules[i]->netfilter_contexts_len;",
          "302:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90809674c13c03e324dff560654d0e686c5fc46b",
      "candidate_info": {
        "commit_hash": "90809674c13c03e324dff560654d0e686c5fc46b",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/90809674c13c03e324dff560654d0e686c5fc46b",
        "files": [
          "libsepol/cil/src/cil_parser.c"
        ],
        "message": "libsepol/cil: always destroy the lexer state\n\nIt was found in https://github.com/google/oss-fuzz/pull/4790:\n```\nInvalid token '' at line 2 of fuzz\n\tNEW_FUNC[1/2]: 0x67fff0 in yy_get_previous_state /src/selinux/libsepol/src/../cil/src/cil_lexer.c:1143\n\tNEW_FUNC[2/2]: 0x6803e0 in yy_try_NUL_trans /src/selinux/libsepol/src/../cil/src/cil_lexer.c:1176\n=================================================================\n==12==ERROR: AddressSanitizer: heap-use-after-free on address 0x602000007992 at pc 0x000000681800 bp 0x7ffccddee530 sp 0x7ffccddee528\nWRITE of size 1 at 0x602000007992 thread T0\nSCARINESS: 41 (1-byte-write-heap-use-after-free)\n    #0 0x6817ff in cil_yy_switch_to_buffer /src/selinux/libsepol/src/../cil/src/cil_lexer.c:1315:17\n    #1 0x6820cc in cil_yy_scan_buffer /src/selinux/libsepol/src/../cil/src/cil_lexer.c:1571:2\n    #2 0x682662 in cil_lexer_setup /src/selinux/libsepol/src/../cil/src/cil_lexer.l:73:6\n    #3 0x5cf2ae in cil_parser /src/selinux/libsepol/src/../cil/src/cil_parser.c:220:2\n    #4 0x56d5e2 in cil_add_file /src/selinux/libsepol/src/../cil/src/cil.c:514:7\n    #5 0x556e91 in LLVMFuzzerTestOneInput /src/secilc-fuzzer.c:434:7\n    #6 0x459ab1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15\n    #7 0x45a755 in fuzzer::Fuzzer::TryDetectingAMemoryLeak(unsigned char const*, unsigned long, bool) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:675:3\n    #8 0x45acd9 in fuzzer::Fuzzer::MutateAndTestOne() /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:747:5\n    #9 0x45b875 in fuzzer::Fuzzer::Loop(std::__Fuzzer::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:883:5\n    #10 0x4499fb in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:906:6\n    #11 0x473a32 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10\n    #12 0x7f982296d83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)\n    #13 0x41e758 in _start (/out/secilc-fuzzer+0x41e758)\n\nDEDUP_TOKEN: cil_yy_switch_to_buffer--cil_yy_scan_buffer--cil_lexer_setup\n0x602000007992 is located 2 bytes inside of 4-byte region [0x602000007990,0x602000007994)\nfreed by thread T0 here:\n    #0 0x521ef2 in free /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:127:3\n    #1 0x56d630 in cil_add_file /src/selinux/libsepol/src/../cil/src/cil.c:526:2\n    #2 0x556e91 in LLVMFuzzerTestOneInput /src/secilc-fuzzer.c:434:7\n    #3 0x459ab1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15\n    #4 0x458fba in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:505:3\n    #5 0x45acc7 in fuzzer::Fuzzer::MutateAndTestOne() /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:745:19\n    #6 0x45b875 in fuzzer::Fuzzer::Loop(std::__Fuzzer::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:883:5\n    #7 0x4499fb in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:906:6\n    #8 0x473a32 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10\n    #9 0x7f982296d83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)\n\nDEDUP_TOKEN: free--cil_add_file--LLVMFuzzerTestOneInput\npreviously allocated by thread T0 here:\n    #0 0x52215d in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:145:3\n    #1 0x5cecb8 in cil_malloc /src/selinux/libsepol/src/../cil/src/cil_mem.c:39:14\n    #2 0x56d584 in cil_add_file /src/selinux/libsepol/src/../cil/src/cil.c:510:11\n    #3 0x556e91 in LLVMFuzzerTestOneInput /src/secilc-fuzzer.c:434:7\n    #4 0x459ab1 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:599:15\n    #5 0x458fba in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:505:3\n    #6 0x45acc7 in fuzzer::Fuzzer::MutateAndTestOne() /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:745:19\n    #7 0x45b875 in fuzzer::Fuzzer::Loop(std::__Fuzzer::vector<fuzzer::SizedFile, fuzzer::fuzzer_allocator<fuzzer::SizedFile> >&) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:883:5\n    #8 0x4499fb in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:906:6\n    #9 0x473a32 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10\n    #10 0x7f982296d83f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2083f)\n\nDEDUP_TOKEN: malloc--cil_malloc--cil_add_file\nSUMMARY: AddressSanitizer: heap-use-after-free /src/selinux/libsepol/src/../cil/src/cil_lexer.c:1315:17 in cil_yy_switch_to_buffer\nShadow bytes around the buggy address:\n  0x0c047fff8ee0: fa fa fd fa fa fa fd fd fa fa fd fa fa fa fd fd\n  0x0c047fff8ef0: fa fa fd fa fa fa fd fd fa fa fd fa fa fa fd fd\n  0x0c047fff8f00: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fd\n  0x0c047fff8f10: fa fa fd fa fa fa fd fd fa fa fd fa fa fa fd fd\n  0x0c047fff8f20: fa fa fd fa fa fa fd fd fa fa fd fa fa fa fd fa\n=>0x0c047fff8f30: fa fa[fd]fa fa fa fd fa fa fa fd fa fa fa fd fa\n  0x0c047fff8f40: fa fa fd fa fa fa fd fa fa fa fd fa fa fa fd fa\n  0x0c047fff8f50: fa fa fd fa fa fa fd fd fa fa fd fa fa fa fd fa\n  0x0c047fff8f60: fa fa fd fd fa fa fd fa fa fa fd fd fa fa fd fa\n  0x0c047fff8f70: fa fa 00 00 fa fa 02 fa fa fa 02 fa fa fa 00 fa\n  0x0c047fff8f80: fa fa 03 fa fa fa 00 fa fa fa 03 fa fa fa 00 fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n  Shadow gap:              cc\n==12==ABORTING\n```\n\nSigned-off-by: Evgeny Vereshchagin <evvers@ya.ru>\nAcked-by: Nicolas Iooss <nicolas.iooss@m4x.org>",
        "before_after_code_files": [
          "libsepol/cil/src/cil_parser.c||libsepol/cil/src/cil_parser.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/cil/src/cil_parser.c||libsepol/cil/src/cil_parser.c": [
          "File: libsepol/cil/src/cil_parser.c -> libsepol/cil/src/cil_parser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "310:  while (!cil_stack_is_empty(stack)) {",
          "311:   pop_hll_info(stack, &hll_lineno, &hll_expand);",
          "312:  }",
          "313:  cil_stack_destroy(&stack);",
          "315:  return SEPOL_ERR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "313:  cil_lexer_destroy();",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8fdb3eb2725040a81e8a600cf6edd3ff4d93c81f",
      "candidate_info": {
        "commit_hash": "8fdb3eb2725040a81e8a600cf6edd3ff4d93c81f",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/8fdb3eb2725040a81e8a600cf6edd3ff4d93c81f",
        "files": [
          "libsepol/src/policydb_validate.c"
        ],
        "message": "libsepol: validate MLS levels\n\nValidate the level map of the policy to ensure no level refers to a non\nexistent category.\n\nREAD of size 8 at 0x602000000c58 thread T0\n    #0 0x568d2c in cats_ebitmap_len ./libsepol/src/kernel_to_conf.c:1003:14\n    #1 0x568d2c in cats_ebitmap_to_str ./libsepol/src/kernel_to_conf.c:1038:19\n    #2 0x55e371 in write_level_rules_to_conf ./libsepol/src/kernel_to_conf.c:1106:11\n    #3 0x55e371 in write_mls_rules_to_conf ./libsepol/src/kernel_to_conf.c:1140:7\n    #4 0x55adb1 in sepol_kernel_policydb_to_conf ./libsepol/src/kernel_to_conf.c:3103:7\n    #5 0x55a34f in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:38:9\n    #6 0x45aed3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n    #7 0x446a12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n    #8 0x44c93b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n    #9 0x475dd2 in main (./out/binpolicy-fuzzer+0x475dd2)\n    #10 0x7f741d0d67ec in __libc_start_main csu/../csu/libc-start.c:332:16\n    #11 0x423689 in _start (./out/binpolicy-fuzzer+0x423689)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/policydb_validate.c||libsepol/src/policydb_validate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/policydb_validate.c||libsepol/src/policydb_validate.c": [
          "File: libsepol/src/policydb_validate.c -> libsepol/src/policydb_validate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "319:  return -1;",
          "320: }",
          "322: static int validate_user_datum(sepol_handle_t *handle, user_datum_t *user, validate_t flavors[])",
          "323: {",
          "324:  if (validate_value(user->s.value, &flavors[SYM_USERS]))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322: static int validate_mls_level(mls_level_t *level, validate_t *sens, validate_t *cats)",
          "323: {",
          "324:  if (validate_value(level->sens, sens))",
          "325:   goto bad;",
          "326:  if (validate_ebitmap(&level->cat, cats))",
          "327:   goto bad;",
          "329:  return 0;",
          "331:  bad:",
          "332:  return -1;",
          "333: }",
          "335: static int validate_level_datum(__attribute__ ((unused)) hashtab_key_t k, hashtab_datum_t d, void *args)",
          "336: {",
          "337:  level_datum_t *level = d;",
          "338:  validate_t *flavors = args;",
          "340:  return validate_mls_level(level->level, &flavors[SYM_LEVELS], &flavors[SYM_CATS]);",
          "341: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "399:  if (hashtab_map(p->p_users.table, validate_user_datum_wrapper, &margs))",
          "400:   goto bad;",
          "402:  return 0;",
          "404: bad:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "423:  if (p->mls && hashtab_map(p->p_levels.table, validate_level_datum, flavors))",
          "424:   goto bad;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1b4979c528a7b9ca999cc2584f817dbddd221562",
      "candidate_info": {
        "commit_hash": "1b4979c528a7b9ca999cc2584f817dbddd221562",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/1b4979c528a7b9ca999cc2584f817dbddd221562",
        "files": [
          "libsepol/src/policydb.c"
        ],
        "message": "libsepol: reject invalid filetrans source type\n\nAvoid integer underflow on invalid filetrans source types.\n\n    policydb.c:2658:47: runtime error: unsigned integer overflow: 0 - 1 cannot be represented in type 'unsigned int'\n        #0 0x4cf4cb in policydb_filetrans_insert ./libsepol/src/policydb.c:2658:47\n        #1 0x4d221a in filename_trans_read_one_compat ./libsepol/src/policydb.c:2691:7\n        #2 0x4d221a in filename_trans_read ./libsepol/src/policydb.c:2842:9\n        #3 0x4d1370 in policydb_read ./libsepol/src/policydb.c:4447:7\n        #4 0x4b1ee3 in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:35:6\n        #5 0x43f2f3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n        #6 0x42ae32 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n        #7 0x430d5b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n        #8 0x45a1f2 in main (./out/binpolicy-fuzzer+0x45a1f2)\n        #9 0x7f8b8923a7ec in __libc_start_main csu/../csu/libc-start.c:332:16\n        #10 0x407aa9 in _start (./out/binpolicy-fuzzer+0x407aa9)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/policydb.c||libsepol/src/policydb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/policydb.c||libsepol/src/policydb.c": [
          "File: libsepol/src/policydb.c -> libsepol/src/policydb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2683:  if (rc < 0)",
          "2684:   goto err;",
          "2687:  ttype  = le32_to_cpu(buf[1]);",
          "2688:  tclass = le32_to_cpu(buf[2]);",
          "2689:  otype  = le32_to_cpu(buf[3]);",
          "",
          "[Removed Lines]",
          "2686:  stype  = le32_to_cpu(buf[0]);",
          "",
          "[Added Lines]",
          "2686:  stype = le32_to_cpu(buf[0]);",
          "2687:  if (stype == 0)",
          "2688:   goto err;",
          "",
          "---------------"
        ]
      }
    }
  ]
}