{
  "cve_id": "CVE-2016-6129",
  "cve_desc": "The rsa_verify_hash_ex function in rsa_verify_hash.c in LibTomCrypt, as used in OP-TEE before 2.2.0, does not validate that the message length is equal to the ASN.1 encoded data length, which makes it easier for remote attackers to forge RSA signatures or public certificates by leveraging a Bleichenbacher signature forgery attack.",
  "repo": "libtom/libtomcrypt",
  "patch_hash": "5eb9743410ce4657e9d54fef26a2ee31a1b5dd09",
  "patch_info": {
    "commit_hash": "5eb9743410ce4657e9d54fef26a2ee31a1b5dd09",
    "repo": "libtom/libtomcrypt",
    "commit_url": "https://github.com/libtom/libtomcrypt/commit/5eb9743410ce4657e9d54fef26a2ee31a1b5dd09",
    "files": [
      "src/pk/rsa/rsa_verify_hash.c"
    ],
    "message": "rsa_verify_hash: fix possible bleichenbacher signature attack",
    "before_after_code_files": [
      "src/pk/rsa/rsa_verify_hash.c||src/pk/rsa/rsa_verify_hash.c"
    ]
  },
  "patch_diff": {
    "src/pk/rsa/rsa_verify_hash.c||src/pk/rsa/rsa_verify_hash.c": [
      "File: src/pk/rsa/rsa_verify_hash.c -> src/pk/rsa/rsa_verify_hash.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "103:   } else {",
      "105:     unsigned char *out;",
      "107:     int           decoded;",
      "108:     ltc_asn1_list digestinfo[2], siginfo[2];",
      "",
      "[Removed Lines]",
      "106:     unsigned long outlen, loid[16];",
      "",
      "[Added Lines]",
      "106:     unsigned long outlen, loid[16], reallen;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "145:        goto bail_2;",
      "146:     }",
      "150:         (XMEMCMP(digestinfo[0].data, hash_descriptor[hash_idx].OID, sizeof(unsigned long) * hash_descriptor[hash_idx].OIDlen) == 0) &&",
      "151:         (siginfo[1].size == hashlen) &&",
      "152:         (XMEMCMP(siginfo[1].data, hash, hashlen) == 0)) {",
      "",
      "[Removed Lines]",
      "149:     if ((digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&",
      "",
      "[Added Lines]",
      "148:     if ((err = der_length_sequence(siginfo, 2, &reallen)) != CRYPT_OK) {",
      "149:        XFREE(out);",
      "150:        goto bail_2;",
      "151:     }",
      "154:     if ((reallen == outlen) &&",
      "155:         (digestinfo[0].size == hash_descriptor[hash_idx].OIDlen) &&",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "92274aafb5d609a781e11a96c77452675b564244",
      "candidate_info": {
        "commit_hash": "92274aafb5d609a781e11a96c77452675b564244",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/92274aafb5d609a781e11a96c77452675b564244",
        "files": [
          "demos/test.c",
          "notes/rsa-testvectors/pkcs1v15crypt-vectors.c",
          "testprof/makefile",
          "testprof/makefile.icc",
          "testprof/makefile.mingw",
          "testprof/makefile.msvc",
          "testprof/makefile.shared",
          "testprof/pkcs_1_eme_test.c",
          "testprof/tomcrypt_test.h"
        ],
        "message": "add testprof/pkcs_1_eme_test",
        "before_after_code_files": [
          "demos/test.c||demos/test.c",
          "testprof/makefile.icc||testprof/makefile.icc",
          "testprof/makefile.mingw||testprof/makefile.mingw",
          "testprof/makefile.msvc||testprof/makefile.msvc",
          "testprof/makefile.shared||testprof/makefile.shared",
          "testprof/pkcs_1_eme_test.c||testprof/pkcs_1_eme_test.c",
          "testprof/tomcrypt_test.h||testprof/tomcrypt_test.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "demos/test.c||demos/test.c": [
          "File: demos/test.c -> demos/test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:    printf(\"\\npkcs_1_pss_test....\"); fflush(stdout); x = pkcs_1_pss_test();       printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "28:    printf(\"\\npkcs_1_oaep_test....\"); fflush(stdout); x = pkcs_1_oaep_test();       printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "29:    printf(\"\\npkcs_1_emsa_test....\"); fflush(stdout); x = pkcs_1_emsa_test();       printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "30:    printf(\"\\nrsa_test......\"); fflush(stdout); x = rsa_test();         printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "31:    printf(\"\\ndh_test.......\"); fflush(stdout); x = dh_test();          printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "32:    printf(\"\\necc_test......\"); fflush(stdout); x = ecc_tests();        printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "30:    printf(\"\\npkcs_1_eme_test....\"); fflush(stdout); x = pkcs_1_eme_test();       printf(x ? \"failed\" : \"passed\");if (x) exit(EXIT_FAILURE);",
          "",
          "---------------"
        ],
        "testprof/makefile.icc||testprof/makefile.icc": [
          "File: testprof/makefile.icc -> testprof/makefile.icc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o no_prng.o                         \\",
          "5: dsa_test.o ecc_test.o mac_test.o modes_test.o pkcs_1_test.o rsa_test.o                   \\",
          "6: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o misc_test.o                 \\",
          "9: ifndef LIBTEST_S",
          "10:    LIBTEST_S = libtomcrypt_prof.a",
          "",
          "[Removed Lines]",
          "7: pkcs_1_pss_test.o pkcs_1_oaep_test.o pkcs_1_emsa_test.o",
          "",
          "[Added Lines]",
          "7: pkcs_1_pss_test.o pkcs_1_oaep_test.o pkcs_1_emsa_test.o pkcs_1_eme_test.o",
          "",
          "---------------"
        ],
        "testprof/makefile.mingw||testprof/makefile.mingw": [
          "File: testprof/makefile.mingw -> testprof/makefile.mingw",
          "--- Hunk 1 ---",
          "[Context before]",
          "7: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o no_prng.o                         \\",
          "8: dsa_test.o ecc_test.o mac_test.o misc_test.o modes_test.o pkcs_1_test.o rsa_test.o       \\",
          "9: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o pkcs_1_pss_test.o           \\",
          "12: default: $(LIBTEST_S)",
          "",
          "[Removed Lines]",
          "10: pkcs_1_oaep_test.o pkcs_1_emsa_test.o",
          "",
          "[Added Lines]",
          "10: pkcs_1_oaep_test.o pkcs_1_emsa_test.o pkcs_1_eme_test.o",
          "",
          "---------------"
        ],
        "testprof/makefile.msvc||testprof/makefile.msvc": [
          "File: testprof/makefile.msvc -> testprof/makefile.msvc",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: dsa_test.obj ecc_test.obj mac_test.obj modes_test.obj pkcs_1_test.obj \\",
          "5: rsa_test.obj store_test.obj test_driver.obj x86_prof.obj katja_test.obj \\",
          "6: dh_test.obj misc_test.obj pkcs_1_pss_test.obj pkcs_1_oaep_test.obj \\",
          "9: tomcrypt_prof.lib: $(OBJECTS)",
          "10:  lib /out:tomcrypt_prof.lib $(OBJECTS)",
          "",
          "[Removed Lines]",
          "7: pkcs_1_emsa_test.obj",
          "",
          "[Added Lines]",
          "7: pkcs_1_emsa_test.obj pkcs_1_eme_test.obj",
          "",
          "---------------"
        ],
        "testprof/makefile.shared||testprof/makefile.shared": [
          "File: testprof/makefile.shared -> testprof/makefile.shared",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: OBJECTS = base64_test.o cipher_hash_test.o der_tests.o no_prng.o                         \\",
          "10: dsa_test.o ecc_test.o mac_test.o modes_test.o pkcs_1_test.o rsa_test.o                   \\",
          "11: store_test.o test_driver.o x86_prof.o katja_test.o dh_test.o misc_test.o                 \\",
          "14: ifndef LIBTEST",
          "15:    LIBTEST=libtomcrypt_prof.la",
          "",
          "[Removed Lines]",
          "12: pkcs_1_pss_test.o pkcs_1_oaep_test.o pkcs_1_emsa_test.o",
          "",
          "[Added Lines]",
          "12: pkcs_1_pss_test.o pkcs_1_oaep_test.o pkcs_1_emsa_test.o pkcs_1_eme_test.o",
          "",
          "---------------"
        ],
        "testprof/pkcs_1_eme_test.c||testprof/pkcs_1_eme_test.c": [
          "File: testprof/pkcs_1_eme_test.c -> testprof/pkcs_1_eme_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <tomcrypt_test.h>",
          "3: #ifdef LTC_PKCS_1",
          "5: #include \"../notes/rsa-testvectors/pkcs1v15crypt-vectors.c\"",
          "9: int pkcs_1_eme_test(void)",
          "10: {",
          "11:   int prng_idx = register_prng(&no_prng_desc);",
          "12:   int hash_idx = find_hash(\"sha1\");",
          "13:   unsigned int i;",
          "15:   DO(prng_is_valid(prng_idx));",
          "16:   DO(hash_is_valid(hash_idx));",
          "18:   for (i = 0; i < sizeof(testcases_eme)/sizeof(testcases_eme[0]); ++i) {",
          "19:     testcase_t* t = &testcases_eme[i];",
          "20:     rsa_key k, *key = &k;",
          "21:     DOX(mp_init_multi(&key->e, &key->d, &key->N, &key->dQ,",
          "22:                        &key->dP, &key->qP, &key->p, &key->q, NULL), t->name);",
          "24:     DOX(mp_read_unsigned_bin(key->e, t->rsa.e, t->rsa.e_l), t->name);",
          "25:     DOX(mp_read_unsigned_bin(key->d, t->rsa.d, t->rsa.d_l), t->name);",
          "26:     DOX(mp_read_unsigned_bin(key->N, t->rsa.n, t->rsa.n_l), t->name);",
          "27:     DOX(mp_read_unsigned_bin(key->dQ, t->rsa.dQ, t->rsa.dQ_l), t->name);",
          "28:     DOX(mp_read_unsigned_bin(key->dP, t->rsa.dP, t->rsa.dP_l), t->name);",
          "29:     DOX(mp_read_unsigned_bin(key->qP, t->rsa.qInv, t->rsa.qInv_l), t->name);",
          "30:     DOX(mp_read_unsigned_bin(key->q, t->rsa.q, t->rsa.q_l), t->name);",
          "31:     DOX(mp_read_unsigned_bin(key->p, t->rsa.p, t->rsa.p_l), t->name);",
          "32:     key->type = PK_PRIVATE;",
          "34:     unsigned int j;",
          "35:     for (j = 0; j < sizeof(t->data)/sizeof(t->data[0]); ++j) {",
          "36:         rsaData_t* s = &t->data[j];",
          "37:         unsigned char buf[256], obuf[256];",
          "38:         unsigned long buflen = sizeof(buf), obuflen = sizeof(obuf);",
          "39:         int stat;",
          "40:         prng_descriptor[prng_idx].add_entropy(s->o2, s->o2_l, NULL);",
          "41:         DOX(rsa_encrypt_key_ex(s->o1, s->o1_l, obuf, &obuflen, NULL, 0, NULL, prng_idx, -1, LTC_PKCS_1_V1_5, key), s->name);",
          "42:         DOX(obuflen == (unsigned long)s->o3_l?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, s->name);",
          "43:         DOX(memcmp(s->o3, obuf, s->o3_l)==0?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, s->name);",
          "44:         DOX(rsa_decrypt_key_ex(obuf, obuflen, buf, &buflen, NULL, 0, -1, LTC_PKCS_1_V1_5, &stat, key), s->name);",
          "45:         DOX(stat == 1?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, s->name);",
          "48:     mp_clear_multi(key->d,  key->e, key->N, key->dQ, key->dP, key->qP, key->p, key->q, NULL);",
          "51:   unregister_prng(&no_prng_desc);",
          "53:   return 0;",
          "54: }",
          "56: #else",
          "58: int pkcs_1_eme_test(void)",
          "59: {",
          "60:    fprintf(stderr, \"NOP\");",
          "61:    return 0;",
          "62: }",
          "64: #endif",
          "",
          "---------------"
        ],
        "testprof/tomcrypt_test.h||testprof/tomcrypt_test.h": [
          "File: testprof/tomcrypt_test.h -> testprof/tomcrypt_test.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "54: int pkcs_1_pss_test(void);",
          "55: int pkcs_1_oaep_test(void);",
          "56: int pkcs_1_emsa_test(void);",
          "57: int store_test(void);",
          "58: int rsa_test(void);",
          "59: int dh_test(void);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "57: int pkcs_1_eme_test(void);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b0c7cbfaae7382f84e9bcb777de8fcef60f91880",
      "candidate_info": {
        "commit_hash": "b0c7cbfaae7382f84e9bcb777de8fcef60f91880",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/b0c7cbfaae7382f84e9bcb777de8fcef60f91880",
        "files": [
          "testprof/pkcs_1_pss_test.c"
        ],
        "message": "improve testprof/pkcs_1_pss_test",
        "before_after_code_files": [
          "testprof/pkcs_1_pss_test.c||testprof/pkcs_1_pss_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "testprof/pkcs_1_pss_test.c||testprof/pkcs_1_pss_test.c": [
          "File: testprof/pkcs_1_pss_test.c -> testprof/pkcs_1_pss_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "40:         prng_descriptor[prng_idx].add_entropy(s->o2, s->o2_l, NULL);",
          "41:         DOX(hash_memory(hash_idx, s->o1, s->o1_l, buf, &buflen), s->name);",
          "42:         DOX(rsa_sign_hash(buf, buflen, obuf, &obuflen, NULL, prng_idx, hash_idx, s->o2_l, key), s->name);",
          "43:         DOX(memcmp(s->o3, obuf, s->o3_l)==0?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, s->name);",
          "44:         DOX(rsa_verify_hash(obuf, obuflen, buf, buflen, hash_idx, s->o2_l, &stat, key), s->name);",
          "47:     mp_clear_multi(key->d,  key->e, key->N, key->dQ, key->dP, key->qP, key->p, key->q, NULL);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "43:         DOX(obuflen == (unsigned long)s->o3_l?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, s->name);",
          "46:         DOX(stat == 1?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, s->name);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "60b9c5a6f1f04a0e0ffa070eee5a5dc85be9bc04",
      "candidate_info": {
        "commit_hash": "60b9c5a6f1f04a0e0ffa070eee5a5dc85be9bc04",
        "repo": "libtom/libtomcrypt",
        "commit_url": "https://github.com/libtom/libtomcrypt/commit/60b9c5a6f1f04a0e0ffa070eee5a5dc85be9bc04",
        "files": [
          "notes/rsa-testvectors/pss-vect.c",
          "notes/rsa-testvectors/rt.py",
          "testprof/pkcs_1_pss_test.c"
        ],
        "message": "make pkcs1 test more generic",
        "before_after_code_files": [
          "testprof/pkcs_1_pss_test.c||testprof/pkcs_1_pss_test.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libtom/libtomcrypt/pull/48"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "testprof/pkcs_1_pss_test.c||testprof/pkcs_1_pss_test.c": [
          "File: testprof/pkcs_1_pss_test.c -> testprof/pkcs_1_pss_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "15:   DO(prng_is_valid(prng_idx));",
          "16:   DO(hash_is_valid(hash_idx));",
          "20:     rsa_key k, *key = &k;",
          "21:     DOX(mp_init_multi(&key->e, &key->d, &key->N, &key->dQ,",
          "22:                        &key->dP, &key->qP, &key->p, &key->q, NULL), t->name);",
          "",
          "[Removed Lines]",
          "18:   for (i = 0; i < sizeof(testcases)/sizeof(testcases[0]); ++i) {",
          "19:     testcase_t* t = &testcases[i];",
          "",
          "[Added Lines]",
          "18:   for (i = 0; i < sizeof(testcases_pss)/sizeof(testcases_pss[0]); ++i) {",
          "19:     testcase_t* t = &testcases_pss[i];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "32:     key->type = PK_PRIVATE;",
          "34:     unsigned int j;",
          "37:         unsigned char buf[20], obuf[256];",
          "38:         unsigned long buflen = sizeof(buf), obuflen = sizeof(obuf);",
          "39:         int stat;",
          "47:     mp_clear_multi(key->d,  key->e, key->N, key->dQ, key->dP, key->qP, key->p, key->q, NULL);",
          "",
          "[Removed Lines]",
          "35:     for (j = 0; j < sizeof(t->sig)/sizeof(t->sig[0]); ++j) {",
          "36:         rsaSig_t* s = &t->sig[j];",
          "40:         prng_descriptor[prng_idx].add_entropy(s->salt, s->salt_l, NULL);",
          "41:         DOX(hash_memory(hash_idx, s->msg, s->msg_l, buf, &buflen), s->name);",
          "42:         DOX(rsa_sign_hash(buf, buflen, obuf, &obuflen, NULL, prng_idx, hash_idx, s->salt_l, key), s->name);",
          "43:         DOX(memcmp(s->sig, obuf, s->sig_l)==0?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, s->name);",
          "44:         DOX(rsa_verify_hash(obuf, obuflen, buf, buflen, hash_idx, s->salt_l, &stat, key), s->name);",
          "",
          "[Added Lines]",
          "35:     for (j = 0; j < sizeof(t->data)/sizeof(t->data[0]); ++j) {",
          "36:         rsaData_t* s = &t->data[j];",
          "40:         prng_descriptor[prng_idx].add_entropy(s->o2, s->o2_l, NULL);",
          "41:         DOX(hash_memory(hash_idx, s->o1, s->o1_l, buf, &buflen), s->name);",
          "42:         DOX(rsa_sign_hash(buf, buflen, obuf, &obuflen, NULL, prng_idx, hash_idx, s->o2_l, key), s->name);",
          "43:         DOX(memcmp(s->o3, obuf, s->o3_l)==0?CRYPT_OK:CRYPT_FAIL_TESTVECTOR, s->name);",
          "44:         DOX(rsa_verify_hash(obuf, obuflen, buf, buflen, hash_idx, s->o2_l, &stat, key), s->name);",
          "",
          "---------------"
        ]
      }
    }
  ]
}