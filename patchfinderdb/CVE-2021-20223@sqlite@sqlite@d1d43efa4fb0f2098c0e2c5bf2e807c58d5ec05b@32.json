{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fa4b0d4453cfd1afea8bd01d197111fa15d09cdb",
      "candidate_info": {
        "commit_hash": "fa4b0d4453cfd1afea8bd01d197111fa15d09cdb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fa4b0d4453cfd1afea8bd01d197111fa15d09cdb",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "test/filter1.test"
        ],
        "message": "Fix a problem with VM code generated for some aggregate SELECT statements that feature min()/max() aggregates both with and without FILTER clauses.\n\nFossilOrigin-Name: 2094da753feb847254473b148d11e535c44dbae9b17454f1a4f8f7e90aefba3f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "test/filter1.test||test/filter1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f068fb116286b1dbdee9c168900348cfcab84e6d8413f3456e4e492f650d11b0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5451:       Expr *pFilter = pF->pFExpr->y.pWin->pFilter;",
          "5452:       if( pAggInfo->nAccumulator",
          "5453:        && (pF->pFunc->funcFlags & SQLITE_FUNC_NEEDCOLL)",
          "5454:       ){",
          "5455:         if( regHit==0 ) regHit = ++pParse->nMem;",
          "5463:         sqlite3VdbeAddOp2(v, OP_Copy, regAcc, regHit);",
          "5464:       }",
          "5465:       addrNext = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5454:        && regAcc",
          "",
          "---------------"
        ],
        "test/filter1.test||test/filter1.test": [
          "File: test/filter1.test -> test/filter1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "204:   SELECT (SELECT COUNT(a) FROM t2) FROM t1;",
          "205: } {2}",
          "207: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207: #-------------------------------------------------------------------------",
          "208: reset_db",
          "209: do_execsql_test 7.0 {",
          "210:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b);",
          "211:   INSERT INTO t1 VALUES(321, 100000);",
          "212:   INSERT INTO t1 VALUES(111, 110000);",
          "213:   INSERT INTO t1 VALUES(444, 120000);",
          "214:   INSERT INTO t1 VALUES(222, 130000);",
          "215: }",
          "217: do_execsql_test 7.1 {",
          "218:   SELECT max(a), max(a) FILTER (WHERE b<12345), b FROM t1;",
          "219: } {",
          "220:   444 {} 120000",
          "221: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0581214577e0463a499cb2b6e9d1f90ae11ac01f",
      "candidate_info": {
        "commit_hash": "0581214577e0463a499cb2b6e9d1f90ae11ac01f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0581214577e0463a499cb2b6e9d1f90ae11ac01f",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/speedtest1.c"
        ],
        "message": "Improvements to speedtest1.c for more consistent verification hashes.\n\nFossilOrigin-Name: d34b8ff5f8d04a75996f6ca9d3a0563c83e8e833c1eb08ac3861431f36f7bfb1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/speedtest1.c||test/speedtest1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f3455cecf22ea98f9ad48e92d620c8e2ec94877e4581731afff0f2bd32014a1d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/speedtest1.c||test/speedtest1.c": [
          "File: test/speedtest1.c -> test/speedtest1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "532:     n = sqlite3_column_count(g.pStmt);",
          "533:     for(i=0; i<n; i++){",
          "534:       const char *z = (const char*)sqlite3_column_text(g.pStmt, i);",
          "535:       if( z==0 ) z = \"nil\";",
          "536:       len = (int)strlen(z);",
          "537: #ifndef SPEEDTEST_OMIT_HASH",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535:       char zBuf[50];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "545:         }else{",
          "546:           HashUpdate(zPrefix+1, 1);",
          "547:         }",
          "549:           int nBlob = sqlite3_column_bytes(g.pStmt, i);",
          "550:           const unsigned char *aBlob = sqlite3_column_blob(g.pStmt, i);",
          "553:         }else{",
          "554:           HashUpdate((unsigned char*)z, len);",
          "555:           g.nResByte += len + 2;",
          "",
          "[Removed Lines]",
          "548:         if( eType==SQLITE_BLOB ){",
          "551:           HashUpdate(aBlob, nBlob);",
          "552:           g.nResByte += nBlob + 2;",
          "",
          "[Added Lines]",
          "549:         if( eType==SQLITE_FLOAT ){",
          "550:           double r = sqlite3_column_double(g.pStmt, i);",
          "551:           sqlite3_snprintf(sizeof(zBuf), zBuf, \"%g\", r);",
          "552:           z = zBuf;",
          "553:           len = (int)strlen(z);",
          "554:           HashUpdate((unsigned char*)z, len);",
          "555:           g.nResByte += len + 2;",
          "556:         }else if( eType==SQLITE_BLOB ){",
          "558:           int iBlob;",
          "559:           unsigned char zChar[2];",
          "561:           for(iBlob=0; iBlob<nBlob; iBlob++){",
          "562:             zChar[0] = \"0123456789abcdef\"[aBlob[iBlob]>>4];",
          "563:             zChar[1] = \"0123456789abcdef\"[aBlob[iBlob]&15];",
          "564:             HashUpdate(zChar,2);",
          "565:           }",
          "566:           g.nResByte += nBlob*2 + 2;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2b9d7c60502581bfd2908fbdb0dd00017d26cb0",
      "candidate_info": {
        "commit_hash": "f2b9d7c60502581bfd2908fbdb0dd00017d26cb0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f2b9d7c60502581bfd2908fbdb0dd00017d26cb0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Fix a potential use-after-free bug that follows an OOM error in code added two days ago by check-in [84e02d773d60cffe].  Problem discovered by OSSFuzz.\n\nFossilOrigin-Name: 0a2eb949f8a759e5745d9468c8183d3c0b4b30e0fa2a14b3062620eb9e1d5c1d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 32df5edcfef2605009f45d6ef1b97c63a99df07c7b4e00dc70f93001cfb8d81f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "368:   pCtx->pVdbe = 0;",
          "369:   pCtx->isError = 0;",
          "370:   pCtx->argc = nArg;",
          "371:   addr = sqlite3VdbeAddOp4(v, eCallCtx ? OP_PureFunc : OP_Function,",
          "372:                            p1, p2, p3, (char*)pCtx, P4_FUNCCTX);",
          "373:   sqlite3VdbeChangeP5(v, eCallCtx & NC_SelfRef);",
          "375:   return addr;",
          "376: }",
          "",
          "[Removed Lines]",
          "374:   pCtx->iOp = addr;",
          "",
          "[Added Lines]",
          "371:   pCtx->iOp = sqlite3VdbeCurrentAddr(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b592d47a810f5f782522a26b877e90505ef77514",
      "candidate_info": {
        "commit_hash": "b592d47a810f5f782522a26b877e90505ef77514",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b592d47a810f5f782522a26b877e90505ef77514",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/skipscan1.test"
        ],
        "message": "Do not attempt to use the skip-scan optimization if prior terms of the index are already used for non-equality constraints. Ticket [304017f5f04a0035]\n\nFossilOrigin-Name: d7126a9ced86cb0934d5bde2bf535e6b529c361444c99e723f29dd3eb36e7044",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/skipscan1.test||test/skipscan1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1409758f72c0206cc48f9f7e789382472949523b7056ea46f8dcb93fd3ea60c6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2432:   pNew = pBuilder->pNew;",
          "2433:   if( db->mallocFailed ) return SQLITE_NOMEM_BKPT;",
          "2437:   assert( (pNew->wsFlags & WHERE_VIRTUALTABLE)==0 );",
          "2438:   assert( (pNew->wsFlags & WHERE_TOP_LIMIT)==0 );",
          "",
          "[Removed Lines]",
          "2434:   WHERETRACE(0x800, (\"BEGIN %s.addBtreeIdx(%s), nEq=%d\\n\",",
          "2435:                      pProbe->pTable->zName,pProbe->zName, pNew->u.btree.nEq));",
          "",
          "[Added Lines]",
          "2434:   WHERETRACE(0x800, (\"BEGIN %s.addBtreeIdx(%s), nEq=%d, nSkip=%d\\n\",",
          "2435:                      pProbe->pTable->zName,pProbe->zName,",
          "2436:                      pNew->u.btree.nEq, pNew->nSkip));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2729:   assert( 42==sqlite3LogEst(18) );",
          "2730:   if( saved_nEq==saved_nSkip",
          "2731:    && saved_nEq+1<pProbe->nKeyCol",
          "2732:    && pProbe->noSkipScan==0",
          "2733:    && OptimizationEnabled(db, SQLITE_SkipScan)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2733:    && saved_nEq==pNew->nLTerm",
          "",
          "---------------"
        ],
        "test/skipscan1.test||test/skipscan1.test": [
          "File: test/skipscan1.test -> test/skipscan1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "398:   `--USE TEMP B-TREE FOR DISTINCT",
          "399: }",
          "401: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "401: # 2020-01-06 ticket 304017f5f04a0035",
          "402: #",
          "403: reset_db",
          "404: do_execsql_test skipscan1-4.10 {",
          "405:   CREATE TABLE t1(a,b INT);",
          "406:   INSERT INTO t1(a,b) VALUES(1,2),(3,3),(4,5);",
          "407:   CREATE UNIQUE INDEX i1 ON t1(b,b,a,a,a,a,a,b,a);",
          "408:   ANALYZE;",
          "409:   DROP TABLE IF EXISTS sqlite_stat4;",
          "410:   INSERT INTO sqlite_stat1 VALUES('t1','i1','30 30 30 2 2 2 2 2 2 2');",
          "411:   ANALYZE sqlite_master;",
          "413:   SELECT DISTINCT a",
          "414:     FROM t1",
          "415:    WHERE a = b",
          "416:      AND a = 3",
          "417:      AND b IN (1,3,2,4)",
          "418:      AND b >= 0",
          "419:      AND a <= 10;",
          "420: } {3}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2678b93afd46f7fa1b1ea2433333b751faac04b",
      "candidate_info": {
        "commit_hash": "e2678b93afd46f7fa1b1ea2433333b751faac04b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e2678b93afd46f7fa1b1ea2433333b751faac04b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/printf.c"
        ],
        "message": "Fix a couple of unreachable branches.\n\nFossilOrigin-Name: f2d26f2b11317abd4f993faa1a4df7afcd1a2d4e448ecc69ca05e9ebf102cd62",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/printf.c||src/printf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1a04920998368e56276fd0b100be8343609c6ff8a731cf8e26a0490f9c6dabdf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1686:         sqlite3VdbeGoto(v, ignoreDest);",
          "1687:       }else{",
          "1688:         char *zName = pCheck->a[i].zEName;",
          "1691:         sqlite3HaltConstraint(pParse, SQLITE_CONSTRAINT_CHECK,",
          "1692:                               onError, zName, P4_TRANSIENT,",
          "",
          "[Removed Lines]",
          "1689:         if( zName==0 ) zName = pTab->zName;",
          "",
          "[Added Lines]",
          "1689:         assert( zName!=0 || pParse->db->mallocFailed );",
          "",
          "---------------"
        ],
        "src/printf.c||src/printf.c": [
          "File: src/printf.c -> src/printf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "427:             v = va_arg(ap,int);",
          "428:           }",
          "429:           if( v<0 ){",
          "435:             prefix = '-';",
          "436:           }else{",
          "437:             longvalue = v;",
          "",
          "[Removed Lines]",
          "430:             if( v==SMALLEST_INT64 ){",
          "431:               longvalue = ((u64)1)<<63;",
          "432:             }else{",
          "433:               longvalue = -v;",
          "434:             }",
          "",
          "[Added Lines]",
          "430:             testcase( v==SMALLEST_INT64 );",
          "431:             testcase( v==(-1) );",
          "432:             longvalue = ~v;",
          "433:             longvalue++;",
          "",
          "---------------"
        ]
      }
    }
  ]
}