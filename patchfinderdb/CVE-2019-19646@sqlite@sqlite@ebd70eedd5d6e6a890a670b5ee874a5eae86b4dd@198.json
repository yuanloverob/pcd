{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "93673620ec4e31cc71443ec46889bb8f695d6548",
      "candidate_info": {
        "commit_hash": "93673620ec4e31cc71443ec46889bb8f695d6548",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/93673620ec4e31cc71443ec46889bb8f695d6548",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Have wapptest.tcl display the name, OS and architecture of the host.\n\nFossilOrigin-Name: c47e53b4d0f29628bd20ba3daf7e759c4bfed07710d982c095445c01376d57f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cbf423656047f0cb5200be6981a205e0ae206eef8263aa686f4a3621fb07fb57",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   # Either \"config\", \"running\" or \"stopped\":",
          "45:   set G(state) \"config\"",
          "46: }",
          "48: # Check to see if there are uncommitted changes in the SQLite source",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:   set G(host) \"(unknown host)\"",
          "48:   catch { set G(host) [exec hostname] }",
          "49:   append G(host) \" $::tcl_platform(os) $::tcl_platform(osVersion)\"",
          "50:   append G(host) \" $::tcl_platform(machine) $::tcl_platform(byteOrder)\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:     }",
          "284:   }",
          "286:   wapp-trim {",
          "287:       <div class=div id=controls>",
          "288:       <form action=\"control\" method=\"post\" name=\"control\">",
          "289:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291:   set host $G(host)",
          "293:       <div class=div>%string($host)</div>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "26391eeefe25dcaacb34e18e7042a890f05d15d1",
      "candidate_info": {
        "commit_hash": "26391eeefe25dcaacb34e18e7042a890f05d15d1",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/26391eeefe25dcaacb34e18e7042a890f05d15d1",
        "files": [
          "main.mk",
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Add the \"dbfuzz2\" target to main.mk.  Remove an unused local variable from dbfuzz2.c.\n\nFossilOrigin-Name: 05c7609cfd02f49114876267d7090f4e0ea2467f3aa7c65019c5986ec8f60a87",
        "before_after_code_files": [
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "574:    $(DBFUZZ_OPT) $(TOP)/test/dbfuzz.c sqlite3.c \\",
          "575:    $(TLIBS) $(THREADLIB)",
          "577: fuzzcheck$(EXE): $(TOP)/test/fuzzcheck.c sqlite3.c sqlite3.h $(TOP)/test/ossfuzz.c",
          "578:  $(TCCX) -o fuzzcheck$(EXE) -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION \\",
          "579:   -DSQLITE_ENABLE_MEMSYS5 $(FUZZCHECK_OPT) -DSQLITE_OSS_FUZZ \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "577: DBFUZZ2_OPTS = \\",
          "578:   -DSQLITE_THREADSAFE=0 \\",
          "579:   -DSQLITE_OMIT_LOAD_EXTENSION \\",
          "580:   -DSQLITE_ENABLE_DESERIALIZE \\",
          "581:   -DSQLITE_DEBUG \\",
          "582:   -DSQLITE_ENABLE_DBSTAT_VTAB \\",
          "583:   -DSQLITE_ENABLE_RTREE \\",
          "584:   -DSQLITE_ENABLE_FTS4 \\",
          "585:   -DSQLITE_ENABLE_FTS5",
          "587: dbfuzz2$(EXE): $(TOP)/test/dbfuzz2.c sqlite3.c sqlite3.h",
          "588:  $(TCCX) -I. -g -O0 -DSTANDALONE -o dbfuzz2$(EXE) \\",
          "589:    $(DBFUZZ2_OPTS) $(TOP)/test/dbfuzz2.c sqlite3.c  $(TLIBS) $(THREADLIB)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5547f39de993c708f72301ef25df190a2f007e0c4253799bdd9e86bb1ae41777",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169: #ifdef STANDALONE",
          "170: int main(int argc, char **argv){",
          "171:   int i;",
          "173:   LLVMFuzzerInitialize(&argc, &argv);",
          "174:   for(i=1; i<argc; i++){",
          "175:     unsigned char *pIn;",
          "",
          "[Removed Lines]",
          "172:   int prevAmt = -1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0aa3231ff0af4873cee2b044d1ba2b55688152b9",
      "candidate_info": {
        "commit_hash": "0aa3231ff0af4873cee2b044d1ba2b55688152b9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0aa3231ff0af4873cee2b044d1ba2b55688152b9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/main.c",
          "src/test_fs.c",
          "src/util.c",
          "src/vdbeaux.c",
          "src/vdbesort.c",
          "src/vtab.c"
        ],
        "message": "Enforce the SQLITE_LIMIT_COLUMN limit on virtual tables.\n\nFossilOrigin-Name: 0b6ae032c28e7fe34d81d1769f6e2901addbd1b95cd9a255dcef274061fb0164",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/main.c||src/main.c",
          "src/test_fs.c||src/test_fs.c",
          "src/util.c||src/util.c",
          "src/vdbeaux.c||src/vdbeaux.c",
          "src/vdbesort.c||src/vdbesort.c",
          "src/vtab.c||src/vtab.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7b771405a9adc3ec191156be4ebe7122f4c698d88d69ae2134c75acb8d8feebb",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3769: ){",
          "3770:   char *z;",
          "3772:   if( (n & (n-1))==0 ){",
          "3774:     void *pNew = sqlite3DbRealloc(db, pArray, sz*szEntry);",
          "3775:     if( pNew==0 ){",
          "",
          "[Removed Lines]",
          "3771:   int n = *pnEntry;",
          "3773:     int sz = (n==0) ? 1 : 2*n;",
          "",
          "[Added Lines]",
          "3771:   sqlite3_int64 n = *pnEntry;",
          "3773:     sqlite3_int64 sz = (n==0) ? 1 : 2*n;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3892:   if( (u32)pSrc->nSrc+nExtra>pSrc->nAlloc ){",
          "3893:     SrcList *pNew;",
          "3895:     sqlite3 *db = pParse->db;",
          "3897:     if( pSrc->nSrc+nExtra>=SQLITE_MAX_SRCLIST ){",
          "",
          "[Removed Lines]",
          "3894:     int nAlloc = pSrc->nSrc*2+nExtra;",
          "",
          "[Added Lines]",
          "3894:     sqlite3_int64 nAlloc = 2*(sqlite3_int64)pSrc->nSrc+nExtra;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4648:   }",
          "4650:   if( pWith ){",
          "4652:     pNew = sqlite3DbRealloc(db, pWith, nByte);",
          "4653:   }else{",
          "4654:     pNew = sqlite3DbMallocZero(db, sizeof(*pWith));",
          "",
          "[Removed Lines]",
          "4651:     int nByte = sizeof(*pWith) + (sizeof(pWith->a[1]) * pWith->nCte);",
          "",
          "[Added Lines]",
          "4651:     sqlite3_int64 nByte = sizeof(*pWith) + (sizeof(pWith->a[1]) * pWith->nCte);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1587:   }else if( (pList->nExpr & (pList->nExpr-1))==0 ){",
          "1588:     ExprList *pNew;",
          "1589:     pNew = sqlite3DbRealloc(db, pList,",
          "1591:     if( pNew==0 ){",
          "1592:       goto no_mem;",
          "1593:     }",
          "",
          "[Removed Lines]",
          "1590:              sizeof(*pList)+(2*pList->nExpr - 1)*sizeof(pList->a[0]));",
          "",
          "[Added Lines]",
          "1590:          sizeof(*pList)+(2*(sqlite3_int64)pList->nExpr-1)*sizeof(pList->a[0]));",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c"
        ],
        "src/test_fs.c||src/test_fs.c": [
          "File: src/test_fs.c -> src/test_fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "740:     fstat(fd, &sbuf);",
          "742:     if( sbuf.st_size>=pCur->nAlloc ){",
          "744:       char *zNew;",
          "745:       if( nNew<1024 ) nNew = 1024;",
          "",
          "[Removed Lines]",
          "743:       int nNew = sbuf.st_size*2;",
          "",
          "[Added Lines]",
          "743:       sqlite3_int64 nNew = sbuf.st_size*2;",
          "",
          "---------------"
        ],
        "src/util.c||src/util.c": [
          "File: src/util.c -> src/util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1598:   if( pIn==0 || pIn[1]+nInt > pIn[0] ){",
          "1601:     VList *pOut = sqlite3DbRealloc(db, pIn, nAlloc*sizeof(int));",
          "1602:     if( pOut==0 ) return pIn;",
          "1603:     if( pIn==0 ) pOut[1] = 2;",
          "",
          "[Removed Lines]",
          "1600:     int nAlloc = (pIn ? pIn[0]*2 : 10) + nInt;",
          "",
          "[Added Lines]",
          "1600:     sqlite3_int64 nAlloc = (pIn ? 2*(sqlite3_int64)pIn[0] : 10) + nInt;",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "157: #ifdef SQLITE_TEST_REALLOC_STRESS",
          "159: #else",
          "161:   UNUSED_PARAMETER(nOp);",
          "162: #endif",
          "",
          "[Removed Lines]",
          "158:   int nNew = (v->nOpAlloc>=512 ? v->nOpAlloc*2 : v->nOpAlloc+nOp);",
          "160:   int nNew = (v->nOpAlloc ? v->nOpAlloc*2 : (int)(1024/sizeof(Op)));",
          "",
          "[Added Lines]",
          "158:   sqlite3_int64 nNew = (v->nOpAlloc>=512 ? 2*(sqlite3_int64)v->nOpAlloc",
          "159:                         : (sqlite3_int64)v->nOpAlloc+nOp);",
          "161:   sqlite3_int64 nNew = (v->nOpAlloc ? 2*(sqlite3_int64)v->nOpAlloc",
          "162:                         : (sqlite3_int64)1024/sizeof(Op));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "947: ){",
          "949:   ScanStatus *aNew;",
          "950:   aNew = (ScanStatus*)sqlite3DbRealloc(p->db, p->aScan, nByte);",
          "951:   if( aNew ){",
          "",
          "[Removed Lines]",
          "948:   int nByte = (p->nScan+1) * sizeof(ScanStatus);",
          "",
          "[Added Lines]",
          "950:   sqlite3_int64 nByte = (p->nScan+1) * sizeof(ScanStatus);",
          "",
          "---------------"
        ],
        "src/vdbesort.c||src/vdbesort.c": [
          "File: src/vdbesort.c -> src/vdbesort.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "538:     if( p->nAlloc<nByte ){",
          "539:       u8 *aNew;",
          "541:       while( nByte>nNew ) nNew = nNew*2;",
          "542:       aNew = sqlite3Realloc(p->aAlloc, nNew);",
          "543:       if( !aNew ) return SQLITE_NOMEM_BKPT;",
          "",
          "[Removed Lines]",
          "540:       int nNew = MAX(128, p->nAlloc*2);",
          "",
          "[Added Lines]",
          "540:       sqlite3_int64 nNew = MAX(128, 2*(sqlite3_int64)p->nAlloc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1829:     if( nMin>pSorter->nMemory ){",
          "1830:       u8 *aNew;",
          "1831:       int iListOff = (u8*)pSorter->list.pList - pSorter->list.aMemory;",
          "1833:       while( nNew < nMin ) nNew = nNew*2;",
          "1834:       if( nNew > pSorter->mxPmaSize ) nNew = pSorter->mxPmaSize;",
          "1835:       if( nNew < nMin ) nNew = nMin;",
          "",
          "[Removed Lines]",
          "1832:       int nNew = pSorter->nMemory * 2;",
          "",
          "[Added Lines]",
          "1832:       sqlite3_int64 nNew = 2 * (sqlite3_int64)pSorter->nMemory;",
          "",
          "---------------"
        ],
        "src/vtab.c||src/vtab.c": [
          "File: src/vtab.c -> src/vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "307:   char **azModuleArg;",
          "308:   azModuleArg = sqlite3DbRealloc(db, pTable->azModuleArg, nBytes);",
          "309:   if( azModuleArg==0 ){",
          "310:     sqlite3DbFree(db, zArg);",
          "",
          "[Removed Lines]",
          "305: static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){",
          "306:   int nBytes = sizeof(char *)*(2+pTable->nModuleArg);",
          "",
          "[Added Lines]",
          "305: static void addModuleArgument(Parse *pParse, Table *pTable, char *zArg){",
          "306:   sqlite3_int64 nBytes = sizeof(char *)*(2+pTable->nModuleArg);",
          "308:   sqlite3 *db = pParse->db;",
          "309:   if( pTable->nModuleArg+3>=db->aLimit[SQLITE_LIMIT_COLUMN] ){",
          "310:     sqlite3ErrorMsg(pParse, \"too many columns on %s\", pTable->zName);",
          "311:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "339:   db = pParse->db;",
          "341:   assert( pTable->nModuleArg==0 );",
          "345:   assert( (pParse->sNameToken.z==pName2->z && pName2->z!=0)",
          "346:        || (pParse->sNameToken.z==pName1->z && pName2->z==0)",
          "347:   );",
          "",
          "[Removed Lines]",
          "342:   addModuleArgument(db, pTable, sqlite3NameFromToken(db, pModuleName));",
          "343:   addModuleArgument(db, pTable, 0);",
          "344:   addModuleArgument(db, pTable, sqlite3DbStrDup(db, pTable->zName));",
          "",
          "[Added Lines]",
          "346:   addModuleArgument(pParse, pTable, sqlite3NameFromToken(db, pModuleName));",
          "347:   addModuleArgument(pParse, pTable, 0);",
          "348:   addModuleArgument(pParse, pTable, sqlite3DbStrDup(db, pTable->zName));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "374:     const char *z = (const char*)pParse->sArg.z;",
          "375:     int n = pParse->sArg.n;",
          "376:     sqlite3 *db = pParse->db;",
          "378:   }",
          "379: }",
          "",
          "[Removed Lines]",
          "377:     addModuleArgument(db, pParse->pNewTable, sqlite3DbStrNDup(db, z, n));",
          "",
          "[Added Lines]",
          "381:     addModuleArgument(pParse, pParse->pNewTable, sqlite3DbStrNDup(db, z, n));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "664:   if( (db->nVTrans%ARRAY_INCR)==0 ){",
          "665:     VTable **aVTrans;",
          "667:     aVTrans = sqlite3DbRealloc(db, (void *)db->aVTrans, nBytes);",
          "668:     if( !aVTrans ){",
          "669:       return SQLITE_NOMEM_BKPT;",
          "",
          "[Removed Lines]",
          "666:     int nBytes = sizeof(sqlite3_vtab *) * (db->nVTrans + ARRAY_INCR);",
          "",
          "[Added Lines]",
          "670:     sqlite3_int64 nBytes = sizeof(sqlite3_vtab*)*",
          "671:                                  ((sqlite3_int64)db->nVTrans + ARRAY_INCR);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1159:   pTab->pSchema = db->aDb[0].pSchema;",
          "1160:   assert( pTab->nModuleArg==0 );",
          "1161:   pTab->iPKey = -1;",
          "1165:   rc = vtabCallConstructor(db, pTab, pMod, pModule->xConnect, &zErr);",
          "1166:   if( rc ){",
          "1167:     sqlite3ErrorMsg(pParse, \"%s\", zErr);",
          "",
          "[Removed Lines]",
          "1162:   addModuleArgument(db, pTab, sqlite3DbStrDup(db, pTab->zName));",
          "1163:   addModuleArgument(db, pTab, 0);",
          "1164:   addModuleArgument(db, pTab, sqlite3DbStrDup(db, pTab->zName));",
          "",
          "[Added Lines]",
          "1167:   addModuleArgument(pParse, pTab, sqlite3DbStrDup(db, pTab->zName));",
          "1168:   addModuleArgument(pParse, pTab, 0);",
          "1169:   addModuleArgument(pParse, pTab, sqlite3DbStrDup(db, pTab->zName));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81f7b372700d7595f486d364a26304b052eda55a",
      "candidate_info": {
        "commit_hash": "81f7b372700d7595f486d364a26304b052eda55a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/81f7b372700d7595f486d364a26304b052eda55a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/delete.c",
          "src/expr.c",
          "src/parse.y",
          "src/pragma.c",
          "src/resolve.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/update.c",
          "src/wherecode.c",
          "tool/mkkeywordhash.c"
        ],
        "message": "Initial experimental code for generated column support.  Non-functional.\n\nFossilOrigin-Name: 11d472c1df707b8d03ec57d8fc582a34f5eb89a9d02a154a9871650c65065b45",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/delete.c||src/delete.c",
          "src/expr.c||src/expr.c",
          "src/parse.y||src/parse.y",
          "src/pragma.c||src/pragma.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/update.c||src/update.c",
          "src/wherecode.c||src/wherecode.c",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/pragma.c||src/pragma.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7248e3476511ecd317f54edcfe1e87443bfdcc1b10c89c7734eefcabafec6c0b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "888:   return -1;",
          "889: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "891: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "900: i16 sqlite3ColumnOfTable(Table *pTab, i16 iCol){",
          "901:   int i;",
          "902:   i16 n;",
          "903:   assert( iCol<pTab->nCol );",
          "904:   if( pTab->nVCol==0 ) return iCol;",
          "905:   for(i=0, n=0; i<iCol; i++){",
          "906:     if( (pTab->aCol[i].colFlags & COLFLAG_VIRTUAL)==0 ) n++;",
          "907:   }",
          "908:   return n;",
          "909: }",
          "910: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1520:   }",
          "1521: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1547: void sqlite3AddGenerated(Parse *pParse, Expr *pExpr, Token *pType){",
          "1548: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "1549:   u8 eType = COLFLAG_VIRTUAL;",
          "1550:   Table *pTab = pParse->pNewTable;",
          "1551:   Column *pCol;",
          "1552:   if( IN_RENAME_OBJECT ){",
          "1553:     sqlite3RenameExprUnmap(pParse, pExpr);",
          "1554:   }",
          "1555:   if( pTab==0 ) goto generated_done;",
          "1556:   pCol = &(pTab->aCol[pTab->nCol-1]);",
          "1557:   if( pCol->pDflt ) goto generated_error;",
          "1558:   if( pType ){",
          "1559:     if( pType->n==7 && sqlite3StrNICmp(\"virtual\",pType->z,7)==0 ){",
          "1561:     }else if( pType->n==6 && sqlite3StrNICmp(\"stored\",pType->z,6)==0 ){",
          "1562:       eType = COLFLAG_STORED;",
          "1563:     }else{",
          "1564:       goto generated_error;",
          "1565:     }",
          "1566:   }",
          "1567:   pTab->nVCol++;",
          "1568:   pCol->colFlags |= eType;",
          "1569:   pCol->pDflt = sqlite3ExprDup(pParse->db, pExpr, 0);",
          "1570:   goto generated_done;",
          "1572: generated_error:",
          "1573:   sqlite3ErrorMsg(pParse, \"bad GENERATED ALWAYS AS clause on column \\\"%s\\\"\",",
          "1574:                   pCol->zName);",
          "1575: generated_done:",
          "1576:   sqlite3ExprDelete(pParse->db, pExpr);",
          "1577: #else",
          "1580:   sqlite3ErrorMsg(pParse, \"GENERATED ALWAYS AS not supported\");",
          "1581:   sqlite3ExprDelete(pParse->db, pExpr);",
          "1582: #endif",
          "1583: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2114:     sqlite3ResolveSelfReference(pParse, p, NC_IsCheck, 0, p->pCheck);",
          "2115:   }",
          "2119:   estimateTableWidth(p);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2179: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "2180:   if( p->nVCol ){",
          "2181:     int ii;",
          "2182:     for(ii=0; ii<p->nCol; ii++){",
          "2183:       if( (p->aCol[ii].colFlags & (COLFLAG_STORED|COLFLAG_VIRTUAL))!=0 ){",
          "2184:         sqlite3ResolveSelfReference(pParse, p, NC_GenCol,",
          "2185:                                     p->aCol[ii].pDflt, 0);",
          "2186:       }",
          "2187:     }",
          "2188:   }",
          "2189: #endif",
          "",
          "---------------"
        ],
        "src/delete.c||src/delete.c": [
          "File: src/delete.c -> src/delete.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "475:     if( pPk ){",
          "476:       for(i=0; i<nPk; i++){",
          "477:         assert( pPk->aiColumn[i]>=0 );",
          "479:                                         pPk->aiColumn[i], iPk+i);",
          "480:       }",
          "481:       iKey = iPk;",
          "482:     }else{",
          "483:       iKey = ++pParse->nMem;",
          "485:     }",
          "487:     if( eOnePass!=ONEPASS_OFF ){",
          "",
          "[Removed Lines]",
          "478:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iTabCur,",
          "484:       sqlite3ExprCodeGetColumnOfTable(v, pTab, iTabCur, -1, iKey);",
          "",
          "[Added Lines]",
          "478:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iTabCur,",
          "484:       sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iTabCur, -1, iKey);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "737:       testcase( mask!=0xffffffff && iCol==31 );",
          "738:       testcase( mask!=0xffffffff && iCol==32 );",
          "739:       if( mask==0xffffffff || (iCol<=31 && (mask & MASKBIT32(iCol))!=0) ){",
          "741:       }",
          "742:     }",
          "",
          "[Removed Lines]",
          "740:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, iCol, iOld+iCol+1);",
          "",
          "[Added Lines]",
          "740:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, iCol,",
          "741:                                         iOld+iCol+1);",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3365:     sqlite3ExprCodeCopy(pParse, pIdx->aColExpr->a[iIdxCol].pExpr, regOut);",
          "3366:     pParse->iSelfTab = 0;",
          "3367:   }else{",
          "3369:                                     iTabCol, regOut);",
          "3370:   }",
          "3371: }",
          "",
          "[Removed Lines]",
          "3368:     sqlite3ExprCodeGetColumnOfTable(pParse->pVdbe, pIdx->pTable, iTabCur,",
          "",
          "[Added Lines]",
          "3368:     sqlite3ExprCodeGetColumnOfTable(pParse, pIdx->pTable, iTabCur,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3376: void sqlite3ExprCodeGetColumnOfTable(",
          "3382: ){",
          "3383:   if( pTab==0 ){",
          "3384:     sqlite3VdbeAddOp3(v, OP_Column, iTabCur, iCol, regOut);",
          "3385:     return;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3383:   Vdbe *v = pParse->pVdbe;",
          "3384:   assert( v!=0 );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3387:   if( iCol<0 || iCol==pTab->iPKey ){",
          "3388:     sqlite3VdbeAddOp2(v, OP_Rowid, iTabCur, regOut);",
          "3389:   }else{",
          "3393:       x = sqlite3ColumnOfIndex(sqlite3PrimaryKeyIndex(pTab), iCol);",
          "3394:     }",
          "3395:     sqlite3VdbeAddOp3(v, op, iTabCur, x, regOut);",
          "3396:   }",
          "",
          "[Removed Lines]",
          "3390:     int op = IsVirtual(pTab) ? OP_VColumn : OP_Column;",
          "3391:     int x = iCol;",
          "3392:     if( !HasRowid(pTab) && !IsVirtual(pTab) ){",
          "",
          "[Added Lines]",
          "3392:     int op;",
          "3393:     int x;",
          "3394:     if( IsVirtual(pTab) ){",
          "3395:       op = OP_VColumn;",
          "3396:       x = iCol;",
          "3397: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "3398:     }else if( pTab->aCol[iCol].colFlags & COLFLAG_VIRTUAL ){",
          "3399:       int savedSelfTab = pParse->iSelfTab;",
          "3400:       pParse->iSelfTab = iTabCur+1;",
          "3401:       sqlite3ExprCode(pParse, pTab->aCol[iCol].pDflt, iCol);",
          "3402:       pParse->iSelfTab = savedSelfTab;",
          "3403:       return;",
          "3404: #endif",
          "3405:     }else if( !HasRowid(pTab) ){",
          "3407:       op = OP_Column;",
          "3408:     }else{",
          "3409:       x = sqlite3ColumnOfTable(pTab,iCol);",
          "3410:       op = OP_Column;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3416: ){",
          "3420:   if( p5 ){",
          "3422:   }",
          "3423:   return iReg;",
          "3424: }",
          "",
          "[Removed Lines]",
          "3417:   Vdbe *v = pParse->pVdbe;",
          "3418:   assert( v!=0 );",
          "3419:   sqlite3ExprCodeGetColumnOfTable(v, pTab, iTable, iColumn, iReg);",
          "3421:     sqlite3VdbeChangeP5(v, p5);",
          "",
          "[Added Lines]",
          "3434:   assert( pParse->pVdbe!=0 );",
          "3435:   sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iTable, iColumn, iReg);",
          "3437:     sqlite3VdbeChangeP5(pParse->pVdbe, p5);",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "347:                                  {sqlite3CreateForeignKey(pParse,0,&T,TA,R);}",
          "348: ccons ::= defer_subclause(D).    {sqlite3DeferForeignKey(pParse,D);}",
          "349: ccons ::= COLLATE ids(C).        {sqlite3AddCollateType(pParse, &C);}",
          "352: %type autoinc {int}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: ccons ::= GENERATED ALWAYS AS generated.",
          "351: ccons ::= AS generated.",
          "352: generated ::= LP expr(E) RP.",
          "353:      {sqlite3AddGenerated(pParse,E,0);}",
          "354: generated ::= LP expr(E) RP ID(TYPE).",
          "355:      {sqlite3AddGenerated(pParse,E,&TYPE);}",
          "",
          "---------------"
        ],
        "src/pragma.c||src/pragma.c": [
          "File: src/pragma.c -> src/pragma.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1399:         for(j=0; j<pFK->nCol; j++){",
          "1400:           int iCol = aiCols ? aiCols[j] : pFK->aCol[j].iFrom;",
          "1402:           sqlite3VdbeAddOp2(v, OP_IsNull, regRow+j, addrOk); VdbeCoverage(v);",
          "1403:         }",
          "",
          "[Removed Lines]",
          "1401:           sqlite3ExprCodeGetColumnOfTable(v, pTab, 0, iCol, regRow+j);",
          "",
          "[Added Lines]",
          "1401:           sqlite3ExprCodeGetColumnOfTable(pParse, pTab, 0, iCol, regRow+j);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1586:           int jmp2;",
          "1587:           if( j==pTab->iPKey ) continue;",
          "1588:           if( pTab->aCol[j].notNull==0 ) continue;",
          "1590:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
          "1591:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
          "1592:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
          "",
          "[Removed Lines]",
          "1589:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
          "",
          "[Added Lines]",
          "1589:           sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, j, 3);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:     if( cnt==0",
          "415:      && cntTab==1",
          "416:      && pMatch",
          "418:      && sqlite3IsRowid(zCol)",
          "419:      && VisibleRowid(pMatch->pTab)",
          "420:     ){",
          "",
          "[Removed Lines]",
          "417:      && (pNC->ncFlags & NC_IdxExpr)==0",
          "",
          "[Added Lines]",
          "417:      && (pNC->ncFlags & (NC_IdxExpr|NC_GenCol))==0",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "627: ){",
          "629:   if( (pNC->ncFlags & validMask)!=0 ){",
          "630:     const char *zIn = \"partial index WHERE clauses\";",
          "631:     if( pNC->ncFlags & NC_IdxExpr )      zIn = \"index expressions\";",
          "632: #ifndef SQLITE_OMIT_CHECK",
          "633:     else if( pNC->ncFlags & NC_IsCheck ) zIn = \"CHECK constraints\";",
          "634: #endif",
          "635:     sqlite3ErrorMsg(pParse, \"%s prohibited in %s\", zMsg, zIn);",
          "636:   }",
          "",
          "[Removed Lines]",
          "628:   assert( (validMask&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr))==0 );",
          "",
          "[Added Lines]",
          "628:   assert( (validMask&~(NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol))==0 );",
          "634: #endif",
          "635: #ifndef SQLITE_OMIT_GENERATED_COLUMNS",
          "636:     else if( pNC->ncFlags & NC_GenCol ) zIn = \"GENERATED ALWAYS AS columns\";",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "723:         zColumn = pExpr->u.zToken;",
          "724:       }else{",
          "725:         Expr *pLeft = pExpr->pLeft;",
          "727:         pRight = pExpr->pRight;",
          "728:         if( pRight->op==TK_ID ){",
          "729:           zDb = 0;",
          "",
          "[Removed Lines]",
          "726:         notValid(pParse, pNC, \"the \\\".\\\" operator\", NC_IdxExpr);",
          "",
          "[Added Lines]",
          "729:         notValid(pParse, pNC, \"the \\\".\\\" operator\", NC_IdxExpr|NC_GenCol);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "822:           notValid(pParse, pNC, \"non-deterministic functions\",",
          "824:         }",
          "825:         if( (pDef->funcFlags & SQLITE_FUNC_INTERNAL)!=0",
          "826:          && pParse->nested==0",
          "",
          "[Removed Lines]",
          "823:                    NC_IdxExpr|NC_PartIdx);",
          "",
          "[Added Lines]",
          "826:                    NC_IdxExpr|NC_PartIdx|NC_GenCol);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "964:       testcase( pExpr->op==TK_IN );",
          "965:       if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "966:         int nRef = pNC->nRef;",
          "968:         sqlite3WalkSelect(pWalker, pExpr->x.pSelect);",
          "969:         assert( pNC->nRef>=nRef );",
          "970:         if( nRef!=pNC->nRef ){",
          "",
          "[Removed Lines]",
          "967:         notValid(pParse, pNC, \"subqueries\", NC_IsCheck|NC_PartIdx|NC_IdxExpr);",
          "",
          "[Added Lines]",
          "970:         notValid(pParse, pNC, \"subqueries\",",
          "971:                  NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "975:       break;",
          "976:     }",
          "977:     case TK_VARIABLE: {",
          "979:       break;",
          "980:     }",
          "981:     case TK_IS:",
          "",
          "[Removed Lines]",
          "978:       notValid(pParse, pNC, \"parameters\", NC_IsCheck|NC_PartIdx|NC_IdxExpr);",
          "",
          "[Added Lines]",
          "982:       notValid(pParse, pNC, \"parameters\",",
          "983:                NC_IsCheck|NC_PartIdx|NC_IdxExpr|NC_GenCol);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1798: int sqlite3ResolveSelfReference(",
          "1804: ){",
          "1807:   int rc;",
          "1809:   assert( type==0 || pTab!=0 );",
          "1811:   memset(&sNC, 0, sizeof(sNC));",
          "1812:   memset(&sSrc, 0, sizeof(sSrc));",
          "1813:   if( pTab ){",
          "",
          "[Removed Lines]",
          "1810:   assert( type==NC_IsCheck || type==NC_PartIdx || type==NC_IdxExpr || pTab==0 );",
          "",
          "[Added Lines]",
          "1816:   assert( type==NC_IsCheck || type==NC_PartIdx || type==NC_IdxExpr",
          "1817:           || type==NC_GenCol || pTab==0 );",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6417:           struct AggInfo_col *pCol = &sAggInfo.aCol[i];",
          "6418:           if( pCol->iSorterColumn>=j ){",
          "6419:             int r1 = j + regBase;",
          "6421:                                pCol->pTab, pCol->iTable, pCol->iColumn, r1);",
          "6422:             j++;",
          "6423:           }",
          "",
          "[Removed Lines]",
          "6420:             sqlite3ExprCodeGetColumnOfTable(v,",
          "",
          "[Added Lines]",
          "6420:             sqlite3ExprCodeGetColumnOfTable(pParse,",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3938: void sqlite3OpenMasterTable(Parse *, int);",
          "3939: Index *sqlite3PrimaryKeyIndex(Table*);",
          "3940: i16 sqlite3ColumnOfIndex(Index*, i16);",
          "3941: void sqlite3StartTable(Parse*,Token*,Token*,int,int,int,int);",
          "3942: #if SQLITE_ENABLE_HIDDEN_COLUMNS",
          "3943:   void sqlite3ColumnPropertiesFromName(Table*, Column*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3945: #ifdef SQLITE_OMIT_GENERATED_COLUMNS",
          "3947: #else",
          "3948:   i16 sqlite3ColumnOfTable(Table*, i16);",
          "3949: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3950: void sqlite3AddCheckConstraint(Parse*, Expr*);",
          "3951: void sqlite3AddDefaultValue(Parse*,Expr*,const char*,const char*);",
          "3952: void sqlite3AddCollateType(Parse*, Token*);",
          "3953: void sqlite3EndTable(Parse*,Token*,Token*,u8,Select*);",
          "3954: int sqlite3ParseUri(const char*,const char*,unsigned int*,",
          "3955:                     sqlite3_vfs**,char**,char **);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3962: void sqlite3AddGenerated(Parse*,Expr*,Token*);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4054: void sqlite3ExprCodeLoadIndexColumn(Parse*, Index*, int, int, int);",
          "4055: int sqlite3ExprCodeGetColumn(Parse*, Table*, int, int, int, u8);",
          "4057: void sqlite3ExprCodeMove(Parse*, int, int, int);",
          "4058: void sqlite3ExprCode(Parse*, Expr*, int);",
          "4059: void sqlite3ExprCodeCopy(Parse*, Expr*, int);",
          "",
          "[Removed Lines]",
          "4056: void sqlite3ExprCodeGetColumnOfTable(Vdbe*, Table*, int, int, int);",
          "",
          "[Added Lines]",
          "4066: void sqlite3ExprCodeGetColumnOfTable(Parse*, Table*, int, int, int);",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "543:     for(i=0; i<nPk; i++){",
          "544:       assert( pPk->aiColumn[i]>=0 );",
          "546:     }",
          "547:     if( eOnePass ){",
          "548:       if( addrOpen ) sqlite3VdbeChangeToNoop(v, addrOpen);",
          "",
          "[Removed Lines]",
          "545:       sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur,pPk->aiColumn[i],iPk+i);",
          "",
          "[Added Lines]",
          "545:       sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur,",
          "546:                                       pPk->aiColumn[i], iPk+i);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "628:        || (pTab->aCol[i].colFlags & COLFLAG_PRIMKEY)!=0",
          "629:       ){",
          "630:         testcase(  oldmask!=0xffffffff && i==31 );",
          "632:       }else{",
          "633:         sqlite3VdbeAddOp2(v, OP_Null, 0, regOld+i);",
          "634:       }",
          "",
          "[Removed Lines]",
          "631:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, i, regOld+i);",
          "",
          "[Added Lines]",
          "632:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regOld+i);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "670:         testcase( i==31 );",
          "671:         testcase( i==32 );",
          "673:       }else{",
          "674:         sqlite3VdbeAddOp2(v, OP_Null, 0, regNew+i);",
          "675:       }",
          "",
          "[Removed Lines]",
          "672:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, i, regNew+i);",
          "",
          "[Added Lines]",
          "673:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "710:     for(i=0; i<pTab->nCol; i++){",
          "711:       if( aXRef[i]<0 && i!=pTab->iPKey ){",
          "713:       }",
          "714:     }",
          "715:   }",
          "",
          "[Removed Lines]",
          "712:         sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, i, regNew+i);",
          "",
          "[Added Lines]",
          "713:         sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iDataCur, i, regNew+i);",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2072:           if( (pWInfo->wctrlFlags & WHERE_DUPLICATES_OK)==0 ){",
          "2073:             int iSet = ((ii==pOrWc->nTerm-1)?-1:ii);",
          "2074:             if( HasRowid(pTab) ){",
          "2076:               jmp1 = sqlite3VdbeAddOp4Int(v, OP_RowSetTest, regRowset, 0,",
          "2077:                                           regRowid, iSet);",
          "2078:               VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "2075:               sqlite3ExprCodeGetColumnOfTable(v, pTab, iCur, -1, regRowid);",
          "",
          "[Added Lines]",
          "2075:               sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iCur, -1, regRowid);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2086:               r = sqlite3GetTempRange(pParse, nPk);",
          "2087:               for(iPk=0; iPk<nPk; iPk++){",
          "2088:                 int iCol = pPk->aiColumn[iPk];",
          "2090:               }",
          "",
          "[Removed Lines]",
          "2089:                 sqlite3ExprCodeGetColumnOfTable(v, pTab, iCur, iCol, r+iPk);",
          "",
          "[Added Lines]",
          "2089:                 sqlite3ExprCodeGetColumnOfTable(pParse, pTab, iCur, iCol,r+iPk);",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "164:   { \"AFTER\",            \"TK_AFTER\",        TRIGGER                },",
          "165:   { \"ALL\",              \"TK_ALL\",          ALWAYS                 },",
          "166:   { \"ALTER\",            \"TK_ALTER\",        ALTER                  },",
          "167:   { \"ANALYZE\",          \"TK_ANALYZE\",      ANALYZE                },",
          "168:   { \"AND\",              \"TK_AND\",          ALWAYS                 },",
          "169:   { \"AS\",               \"TK_AS\",           ALWAYS                 },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "167:   { \"ALWAYS\",           \"TK_ALWAYS\",       ALWAYS                 },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "216:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY                   },",
          "217:   { \"FROM\",             \"TK_FROM\",         ALWAYS                 },",
          "218:   { \"FULL\",             \"TK_JOIN_KW\",      ALWAYS                 },",
          "219:   { \"GLOB\",             \"TK_LIKE_KW\",      ALWAYS                 },",
          "220:   { \"GROUP\",            \"TK_GROUP\",        ALWAYS                 },",
          "221:   { \"GROUPS\",           \"TK_GROUPS\",       WINDOWFUNC             },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "220:   { \"GENERATED\",        \"TK_GENERATED\",    ALWAYS                 },",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4db4b5b4fe62fc9055209e4341d33ed3dd20d70f",
      "candidate_info": {
        "commit_hash": "4db4b5b4fe62fc9055209e4341d33ed3dd20d70f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4db4b5b4fe62fc9055209e4341d33ed3dd20d70f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "test/pragma4.test"
        ],
        "message": "Avoid including the comment in the output of \"PRAGMA table_info\" in situations where there is a comment following a DEFAULT value within a CREATE TABLE statement.\n\nFossilOrigin-Name: d91095ba7130e974f0c95334760c679a31479b07a3d458e15994a24eee474752",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "test/pragma4.test||test/pragma4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a0f5eb5c79cc33b7224f3421d2baa02a2a19eb9d6eaa8117dda4a1878b229cb5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "301:   assert( yyLookahead!=YYNOCODE );",
          "302:   A = yyLookaheadToken.z;",
          "303: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "304: scantok(A) ::= . {",
          "305:   assert( yyLookahead!=YYNOCODE );",
          "306:   A = yyLookaheadToken;",
          "307: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308: carglist ::= carglist ccons.",
          "309: carglist ::= .",
          "310: ccons ::= CONSTRAINT nm(X).           {pParse->constraintName = X;}",
          "313: ccons ::= DEFAULT LP(A) expr(X) RP(Z).",
          "314:                             {sqlite3AddDefaultValue(pParse,X,A.z+1,Z.z);}",
          "318:   Expr *p = sqlite3PExpr(pParse, TK_UMINUS, X, 0);",
          "320: }",
          "322:   Expr *p = tokenExpr(pParse, TK_STRING, X);",
          "323:   if( p ){",
          "324:     sqlite3ExprIdToTrueFalse(p);",
          "",
          "[Removed Lines]",
          "311: ccons ::= DEFAULT scanpt(A) term(X) scanpt(Z).",
          "312:                             {sqlite3AddDefaultValue(pParse,X,A,Z);}",
          "315: ccons ::= DEFAULT PLUS(A) term(X) scanpt(Z).",
          "316:                             {sqlite3AddDefaultValue(pParse,X,A.z,Z);}",
          "317: ccons ::= DEFAULT MINUS(A) term(X) scanpt(Z).      {",
          "319:   sqlite3AddDefaultValue(pParse,p,A.z,Z);",
          "321: ccons ::= DEFAULT scanpt id(X).       {",
          "",
          "[Added Lines]",
          "315: ccons ::= DEFAULT scantok(A) term(X).",
          "316:                             {sqlite3AddDefaultValue(pParse,X,A.z,&A.z[A.n]);}",
          "319: ccons ::= DEFAULT PLUS(A) scantok(Z) term(X).",
          "320:                             {sqlite3AddDefaultValue(pParse,X,A.z,&Z.z[Z.n]);}",
          "321: ccons ::= DEFAULT MINUS(A) scantok(Z) term(X). {",
          "323:   sqlite3AddDefaultValue(pParse,p,A.z,&Z.z[Z.n]);",
          "325: ccons ::= DEFAULT scantok id(X).       {",
          "",
          "---------------"
        ],
        "test/pragma4.test||test/pragma4.test": [
          "File: test/pragma4.test -> test/pragma4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:   pragma foreign_key_check('c2')",
          "250: } {1 {no such table: c2}}",
          "252: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252: do_execsql_test 5.0 {",
          "253:   CREATE TABLE t4(a DEFAULT 'abc' /* comment */, b DEFAULT -1 -- comment",
          "255:   );",
          "256:   PRAGMA table_info = t4;",
          "257: } {",
          "258:   0 a {} 0 'abc' 0 1 b {} 0 -1 0 2 c {} 0 +4.0 0",
          "259: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}