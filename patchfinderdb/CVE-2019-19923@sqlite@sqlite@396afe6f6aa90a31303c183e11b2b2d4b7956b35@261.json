{
  "cve_id": "CVE-2019-19923",
  "cve_desc": "flattenSubquery in select.c in SQLite 3.30.1 mishandles certain uses of SELECT DISTINCT involving a LEFT JOIN in which the right-hand side is a view. This can cause a NULL pointer dereference (or incorrect results).",
  "repo": "sqlite/sqlite",
  "patch_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
  "patch_info": {
    "commit_hash": "396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/396afe6f6aa90a31303c183e11b2b2d4b7956b35",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/join.test"
    ],
    "message": "Continue to back away from the LEFT JOIN optimization of check-in [41c27bc0ff1d3135] by disallowing query flattening if the outer query is DISTINCT.  Without this fix, if an index scan is run on the table within the view on the right-hand side of the LEFT JOIN, stale result registers might be accessed yielding incorrect results, and/or an OP_IfNullRow opcode might be invoked on the un-opened table, resulting in a NULL-pointer dereference.  This problem was found by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: 862974312edf00e9d1068115d1a39b7235b7db68b6d86b81d38a12f025a4748e",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/join.test||test/join.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 289158aa24b066c453d2bce4bc2dead1c56fb0b23c3f7c4810b34b13627cef34",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3797:   if( (pSubitem->fg.jointype & JT_OUTER)!=0 ){",
      "3798:     isLeftJoin = 1;",
      "3801:       return 0;",
      "3802:     }",
      "3803:   }",
      "",
      "[Removed Lines]",
      "3799:     if( pSubSrc->nSrc>1 || isAgg || IsVirtual(pSubSrc->a[0].pTab) ){",
      "",
      "[Added Lines]",
      "3804:     ){",
      "",
      "---------------"
    ],
    "test/join.test||test/join.test": [
      "File: test/join.test -> test/join.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "975:   SELECT 24, * FROM t1 LEFT JOIN t0 ON +aa ISNULL;",
      "976: } {13 1 {} 14 1 {} 23 1 {} 24 1 {}}",
      "978: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "978: # 2019-12-18 problem with a LEFT JOIN where the RHS is a view.",
      "979: # Detected by Yongheng and Rui.",
      "980: # Follows from the optimization attempt of check-in 41c27bc0ff1d3135",
      "981: # on 2017-04-18",
      "982: #",
      "983: reset_db",
      "984: do_execsql_test join-22.10 {",
      "985:   CREATE TABLE t0(a, b);",
      "986:   CREATE INDEX t0a ON t0(a);",
      "987:   INSERT INTO t0 VALUES(10,10),(10,11),(10,12);",
      "988:   SELECT DISTINCT c FROM t0 LEFT JOIN (SELECT a+1 AS c FROM t0) ORDER BY c ;",
      "989: } {11}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4fb24c82cd6bedf39e8c536eb3d1563eca11544a",
      "candidate_info": {
        "commit_hash": "4fb24c82cd6bedf39e8c536eb3d1563eca11544a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4fb24c82cd6bedf39e8c536eb3d1563eca11544a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/gencol1.test"
        ],
        "message": "Fix the OP_DeferredSeek index-to-table column map in P4 so that it works with generated columns.  Ticket [ce22a07731530118]\n\nFossilOrigin-Name: 36c11ad51fe9ab1bde0b98d0ea9b8588e07d168cd8027486749372894941ad93",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/gencol1.test||test/gencol1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 77b1c90add514050fe62f22751362fecacd99f9775346cffc60e09c326e64e10",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1054:     if( ai ){",
          "1055:       ai[0] = pTab->nCol;",
          "1056:       for(i=0; i<pIdx->nColumn-1; i++){",
          "1057:         assert( pIdx->aiColumn[i]<pTab->nCol );",
          "1059:       }",
          "1060:       sqlite3VdbeChangeP4(v, -1, (char*)ai, P4_INTARRAY);",
          "1061:     }",
          "",
          "[Removed Lines]",
          "1058:         if( pIdx->aiColumn[i]>=0 ) ai[pIdx->aiColumn[i]+1] = i+1;",
          "",
          "[Added Lines]",
          "1057:         int x1, x2;",
          "1059:         x1 = pIdx->aiColumn[i];",
          "1060:         x2 = sqlite3TableColumnToStorage(pTab, x1);",
          "1061:         testcase( x1!=x2 );",
          "1062:         if( pIdx->aiColumn[i]>=0 ) ai[x2+1] = i+1;",
          "",
          "---------------"
        ],
        "test/gencol1.test||test/gencol1.test": [
          "File: test/gencol1.test -> test/gencol1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "211:   REPLACE INTO t0(c1) VALUES(NULL);",
          "212: } {1 {NOT NULL constraint failed: t0.c0}}",
          "214: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "214: # 2019-11-06 ticket b13b7dce76e9352b34e7",
          "215: do_execsql_test gencol1-7.10 {",
          "216:   DROP TABLE IF EXISTS t0;",
          "217:   CREATE TABLE t0 (c0 GENERATED ALWAYS AS (1), c1 UNIQUE, c2 UNIQUE);",
          "218:   INSERT INTO t0(c1) VALUES (1);",
          "219:   SELECT quote(0 = t0.c2 OR t0.c1 BETWEEN t0.c2 AND 1) FROM t0;",
          "220: } {NULL}",
          "221: do_execsql_test gencol1-7.20 {",
          "222:   SELECT 99 FROM t0 WHERE 0 = t0.c2 OR t0.c1 BETWEEN t0.c2 AND 1;",
          "223: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "46b341530e03b54d9c4ae31b81abb719f4b5f0e2",
      "candidate_info": {
        "commit_hash": "46b341530e03b54d9c4ae31b81abb719f4b5f0e2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/46b341530e03b54d9c4ae31b81abb719f4b5f0e2",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/attach.c"
        ],
        "message": "Fix a problem with the user-auth extension and deserializing in-memory databases.\n\nFossilOrigin-Name: 09fa0b3c4adf7f81a777975762029ad43dbdc76b02dc32d2307e1c42465213c9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/attach.c||src/attach.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 734192d876e0489cb34e454aaa4a9c6858145791a49959b31dee2917a8e41a7d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/attach.c||src/attach.c": [
          "File: src/attach.c -> src/attach.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:     assert( zErrDyn==0 || rc!=SQLITE_OK );",
          "242:   }",
          "243: #ifdef SQLITE_USER_AUTHENTICATION",
          "245:     u8 newAuth = 0;",
          "246:     rc = sqlite3UserAuthCheckLogin(db, zName, &newAuth);",
          "247:     if( newAuth<db->auth.authLevel ){",
          "",
          "[Removed Lines]",
          "244:   if( rc==SQLITE_OK ){",
          "",
          "[Added Lines]",
          "244:   if( rc==SQLITE_OK && !REOPEN_AS_MEMDB(db) ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4bec44bdfa1fea3374a8e262b6a8da6fc79f08b8",
      "candidate_info": {
        "commit_hash": "4bec44bdfa1fea3374a8e262b6a8da6fc79f08b8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4bec44bdfa1fea3374a8e262b6a8da6fc79f08b8",
        "files": [
          "ext/misc/fossildelta.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add the fossildelta.c extension in ext/misc with implementations of the Fossil delta functions.\n\nFossilOrigin-Name: b80cafa6f8a5c6ff1dc9efd2f670777ab131ace2df1eb431cedc8cfa901baf18",
        "before_after_code_files": [
          "ext/misc/fossildelta.c||ext/misc/fossildelta.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fossildelta.c||ext/misc/fossildelta.c": [
          "File: ext/misc/fossildelta.c -> ext/misc/fossildelta.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include <string.h>",
          "16: #include <assert.h>",
          "17: #include <stdlib.h>",
          "18: #include \"sqlite3ext.h\"",
          "19: SQLITE_EXTENSION_INIT1",
          "24: typedef unsigned int u32;",
          "29: typedef short int s16;",
          "30: typedef unsigned short int u16;",
          "37: #define NHASH 16",
          "51: typedef struct hash hash;",
          "52: struct hash {",
          "56: };",
          "61: static void hash_init(hash *pHash, const char *z){",
          "62:   u16 a, b, i;",
          "63:   a = b = z[0];",
          "64:   for(i=1; i<NHASH; i++){",
          "65:     a += z[i];",
          "66:     b += a;",
          "67:   }",
          "68:   memcpy(pHash->z, z, NHASH);",
          "69:   pHash->a = a & 0xffff;",
          "70:   pHash->b = b & 0xffff;",
          "71:   pHash->i = 0;",
          "72: }",
          "77: static void hash_next(hash *pHash, int c){",
          "78:   u16 old = pHash->z[pHash->i];",
          "79:   pHash->z[pHash->i] = c;",
          "80:   pHash->i = (pHash->i+1)&(NHASH-1);",
          "81:   pHash->a = pHash->a - old + c;",
          "82:   pHash->b = pHash->b - NHASH*old + pHash->a;",
          "83: }",
          "88: static u32 hash_32bit(hash *pHash){",
          "89:   return (pHash->a & 0xffff) | (((u32)(pHash->b & 0xffff))<<16);",
          "90: }",
          "100: static u32 hash_once(const char *z){",
          "101:   u16 a, b, i;",
          "102:   a = b = z[0];",
          "103:   for(i=1; i<NHASH; i++){",
          "104:     a += z[i];",
          "105:     b += a;",
          "106:   }",
          "107:   return a | (((u32)b)<<16);",
          "108: }",
          "113: static void putInt(unsigned int v, char **pz){",
          "114:   static const char zDigits[] =",
          "115:     \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~\";",
          "117:   int i, j;",
          "118:   char zBuf[20];",
          "119:   if( v==0 ){",
          "121:     return;",
          "122:   }",
          "123:   for(i=0; v>0; i++, v>>=6){",
          "124:     zBuf[i] = zDigits[v&0x3f];",
          "125:   }",
          "126:   for(j=i-1; j>=0; j--){",
          "128:   }",
          "129: }",
          "137: static unsigned int getInt(const char **pz, int *pLen){",
          "138:   static const signed char zValue[] = {",
          "139:     -1, -1, -1, -1, -1, -1, -1, -1,   -1, -1, -1, -1, -1, -1, -1, -1,",
          "140:     -1, -1, -1, -1, -1, -1, -1, -1,   -1, -1, -1, -1, -1, -1, -1, -1,",
          "141:     -1, -1, -1, -1, -1, -1, -1, -1,   -1, -1, -1, -1, -1, -1, -1, -1,",
          "142:      0,  1,  2,  3,  4,  5,  6,  7,    8,  9, -1, -1, -1, -1, -1, -1,",
          "143:     -1, 10, 11, 12, 13, 14, 15, 16,   17, 18, 19, 20, 21, 22, 23, 24,",
          "144:     25, 26, 27, 28, 29, 30, 31, 32,   33, 34, 35, -1, -1, -1, -1, 36,",
          "145:     -1, 37, 38, 39, 40, 41, 42, 43,   44, 45, 46, 47, 48, 49, 50, 51,",
          "146:     52, 53, 54, 55, 56, 57, 58, 59,   60, 61, 62, -1, -1, -1, 63, -1,",
          "147:   };",
          "148:   unsigned int v = 0;",
          "149:   int c;",
          "150:   unsigned char *z = (unsigned char*)*pz;",
          "151:   unsigned char *zStart = z;",
          "152:   while( (c = zValue[0x7f&*(z++)])>=0 ){",
          "153:      v = (v<<6) + c;",
          "154:   }",
          "155:   z--;",
          "158:   return v;",
          "159: }",
          "164: static int digit_count(int v){",
          "165:   unsigned int i, x;",
          "166:   for(i=1, x=64; v>=x; i++, x <<= 6){}",
          "167:   return i;",
          "168: }",
          "170: #ifdef __GNUC__",
          "171: # define GCC_VERSION (__GNUC__*1000000+__GNUC_MINOR__*1000+__GNUC_PATCHLEVEL__)",
          "172: #else",
          "173: # define GCC_VERSION 0",
          "174: #endif",
          "182: static unsigned int checksum(const char *zIn, size_t N){",
          "183:   static const int byteOrderTest = 1;",
          "184:   const unsigned char *z = (const unsigned char *)zIn;",
          "185:   const unsigned char *zEnd = (const unsigned char*)&zIn[N&~3];",
          "186:   unsigned sum = 0;",
          "188:   if( 0==*(char*)&byteOrderTest ){",
          "190:     while( z<zEnd ){",
          "191:       sum += *(unsigned*)z;",
          "192:       z += 4;",
          "193:     }",
          "194:   }else{",
          "196: #if GCC_VERSION>=4003000",
          "197:     while( z<zEnd ){",
          "198:       sum += __builtin_bswap32(*(unsigned*)z);",
          "199:       z += 4;",
          "200:     }",
          "201: #elif defined(_MSC_VER) && _MSC_VER>=1300",
          "202:     while( z<zEnd ){",
          "203:       sum += _byteswap_ulong(*(unsigned*)z);",
          "204:       z += 4;",
          "205:     }",
          "206: #else",
          "207:     unsigned sum0 = 0;",
          "208:     unsigned sum1 = 0;",
          "209:     unsigned sum2 = 0;",
          "210:     while(N >= 16){",
          "211:       sum0 += ((unsigned)z[0] + z[4] + z[8] + z[12]);",
          "212:       sum1 += ((unsigned)z[1] + z[5] + z[9] + z[13]);",
          "213:       sum2 += ((unsigned)z[2] + z[6] + z[10]+ z[14]);",
          "214:       sum  += ((unsigned)z[3] + z[7] + z[11]+ z[15]);",
          "215:       z += 16;",
          "216:       N -= 16;",
          "217:     }",
          "218:     while(N >= 4){",
          "219:       sum0 += z[0];",
          "220:       sum1 += z[1];",
          "221:       sum2 += z[2];",
          "222:       sum  += z[3];",
          "223:       z += 4;",
          "224:       N -= 4;",
          "225:     }",
          "226:     sum += (sum2 << 8) + (sum1 << 16) + (sum0 << 24);",
          "227: #endif",
          "228:   }",
          "229:   switch(N&3){",
          "230:     case 3:   sum += (z[2] << 8);",
          "231:     case 2:   sum += (z[1] << 16);",
          "232:     case 1:   sum += (z[0] << 24);",
          "233:     default:  ;",
          "234:   }",
          "235:   return sum;",
          "236: }",
          "299: static int delta_create(",
          "305: ){",
          "306:   int i, base;",
          "307:   char *zOrigDelta = zDelta;",
          "308:   hash h;",
          "316:   putInt(lenOut, &zDelta);",
          "323:   if( lenSrc<=NHASH ){",
          "324:     putInt(lenOut, &zDelta);",
          "326:     memcpy(zDelta, zOut, lenOut);",
          "327:     zDelta += lenOut;",
          "328:     putInt(checksum(zOut, lenOut), &zDelta);",
          "330:     return zDelta - zOrigDelta;",
          "331:   }",
          "336:   nHash = lenSrc/NHASH;",
          "337:   collide = sqlite3_malloc64( (sqlite3_int64)nHash*2*sizeof(int) );",
          "338:   memset(collide, -1, nHash*2*sizeof(int));",
          "339:   landmark = &collide[nHash];",
          "340:   for(i=0; i<lenSrc-NHASH; i+=NHASH){",
          "341:     int hv = hash_once(&zSrc[i]) % nHash;",
          "342:     collide[i/NHASH] = landmark[hv];",
          "343:     landmark[hv] = i/NHASH;",
          "344:   }",
          "350:   while( base+NHASH<lenOut ){",
          "351:     int iSrc, iBlock;",
          "352:     unsigned int bestCnt, bestOfst=0, bestLitsz=0;",
          "353:     hash_init(&h, &zOut[base]);",
          "355:     bestCnt = 0;",
          "356:     while( 1 ){",
          "357:       int hv;",
          "358:       int limit = 250;",
          "360:       hv = hash_32bit(&h) % nHash;",
          "361:       iBlock = landmark[hv];",
          "362:       while( iBlock>=0 && (limit--)>0 ){",
          "378:         int cnt, ofst, litsz;",
          "379:         int j, k, x, y;",
          "380:         int sz;",
          "381:         int limitX;",
          "385:         iSrc = iBlock*NHASH;",
          "386:         y = base+i;",
          "387:         limitX = ( lenSrc-iSrc <= lenOut-y ) ? lenSrc : iSrc + lenOut - y;",
          "388:         for(x=iSrc; x<limitX; x++, y++){",
          "389:           if( zSrc[x]!=zOut[y] ) break;",
          "390:         }",
          "391:         j = x - iSrc - 1;",
          "395:         for(k=1; k<iSrc && k<=i; k++){",
          "396:           if( zSrc[iSrc-k]!=zOut[base+i-k] ) break;",
          "397:         }",
          "398:         k--;",
          "401:         ofst = iSrc-k;",
          "402:         cnt = j+k+1;",
          "406:         sz = digit_count(i-k)+digit_count(cnt)+digit_count(ofst)+3;",
          "407:         if( cnt>=sz && cnt>bestCnt ){",
          "410:           bestCnt = cnt;",
          "411:           bestOfst = iSrc-k;",
          "412:           bestLitsz = litsz;",
          "413:         }",
          "416:         iBlock = collide[iBlock];",
          "417:       }",
          "422:       if( bestCnt>0 ){",
          "423:         if( bestLitsz>0 ){",
          "425:           putInt(bestLitsz,&zDelta);",
          "427:           memcpy(zDelta, &zOut[base], bestLitsz);",
          "428:           zDelta += bestLitsz;",
          "429:           base += bestLitsz;",
          "430:         }",
          "431:         base += bestCnt;",
          "432:         putInt(bestCnt, &zDelta);",
          "434:         putInt(bestOfst, &zDelta);",
          "436:         if( bestOfst + bestCnt -1 > lastRead ){",
          "437:           lastRead = bestOfst + bestCnt - 1;",
          "438:         }",
          "439:         bestCnt = 0;",
          "440:         break;",
          "441:       }",
          "444:       if( base+i+NHASH>=lenOut ){",
          "447:         putInt(lenOut-base, &zDelta);",
          "449:         memcpy(zDelta, &zOut[base], lenOut-base);",
          "450:         zDelta += lenOut-base;",
          "451:         base = lenOut;",
          "452:         break;",
          "453:       }",
          "456:       hash_next(&h, zOut[base+i+NHASH]);",
          "457:       i++;",
          "458:     }",
          "459:   }",
          "463:   if( base<lenOut ){",
          "464:     putInt(lenOut-base, &zDelta);",
          "466:     memcpy(zDelta, &zOut[base], lenOut-base);",
          "467:     zDelta += lenOut-base;",
          "468:   }",
          "470:   putInt(checksum(zOut, lenOut), &zDelta);",
          "472:   sqlite3_free(collide);",
          "473:   return zDelta - zOrigDelta;",
          "474: }",
          "485: static int delta_output_size(const char *zDelta, int lenDelta){",
          "486:   int size;",
          "487:   size = getInt(&zDelta, &lenDelta);",
          "488:   if( *zDelta!='\\n' ){",
          "490:     return -1;",
          "491:   }",
          "492:   return size;",
          "493: }",
          "516: static int delta_apply(",
          "522: ){",
          "523:   unsigned int limit;",
          "524:   unsigned int total = 0;",
          "525: #ifdef FOSSIL_ENABLE_DELTA_CKSUM_TEST",
          "526:   char *zOrigOut = zOut;",
          "527: #endif",
          "529:   limit = getInt(&zDelta, &lenDelta);",
          "530:   if( *zDelta!='\\n' ){",
          "532:     return -1;",
          "533:   }",
          "534:   zDelta++; lenDelta--;",
          "535:   while( *zDelta && lenDelta>0 ){",
          "536:     unsigned int cnt, ofst;",
          "537:     cnt = getInt(&zDelta, &lenDelta);",
          "538:     switch( zDelta[0] ){",
          "539:       case '@': {",
          "540:         zDelta++; lenDelta--;",
          "541:         ofst = getInt(&zDelta, &lenDelta);",
          "542:         if( lenDelta>0 && zDelta[0]!=',' ){",
          "544:           return -1;",
          "545:         }",
          "546:         zDelta++; lenDelta--;",
          "547:         total += cnt;",
          "548:         if( total>limit ){",
          "550:           return -1;",
          "551:         }",
          "552:         if( ofst+cnt > lenSrc ){",
          "554:           return -1;",
          "555:         }",
          "556:         memcpy(zOut, &zSrc[ofst], cnt);",
          "557:         zOut += cnt;",
          "558:         break;",
          "559:       }",
          "560:       case ':': {",
          "561:         zDelta++; lenDelta--;",
          "562:         total += cnt;",
          "563:         if( total>limit ){",
          "565:           return -1;",
          "566:         }",
          "567:         if( cnt>lenDelta ){",
          "569:           return -1;",
          "570:         }",
          "571:         memcpy(zOut, zDelta, cnt);",
          "572:         zOut += cnt;",
          "573:         zDelta += cnt;",
          "574:         lenDelta -= cnt;",
          "575:         break;",
          "576:       }",
          "577:       case ';': {",
          "578:         zDelta++; lenDelta--;",
          "579:         zOut[0] = 0;",
          "580: #ifdef FOSSIL_ENABLE_DELTA_CKSUM_TEST",
          "581:         if( cnt!=checksum(zOrigOut, total) ){",
          "583:           return -1;",
          "584:         }",
          "585: #endif",
          "586:         if( total!=limit ){",
          "588:           return -1;",
          "589:         }",
          "590:         return total;",
          "591:       }",
          "592:       default: {",
          "594:         return -1;",
          "595:       }",
          "596:     }",
          "597:   }",
          "599:   return -1;",
          "600: }",
          "607: static int delta_analyze(",
          "612: ){",
          "613:   unsigned int nInsert = 0;",
          "614:   unsigned int nCopy = 0;",
          "616:   (void)getInt(&zDelta, &lenDelta);",
          "617:   if( *zDelta!='\\n' ){",
          "619:     return -1;",
          "620:   }",
          "621:   zDelta++; lenDelta--;",
          "622:   while( *zDelta && lenDelta>0 ){",
          "623:     unsigned int cnt;",
          "624:     cnt = getInt(&zDelta, &lenDelta);",
          "625:     switch( zDelta[0] ){",
          "626:       case '@': {",
          "627:         zDelta++; lenDelta--;",
          "628:         (void)getInt(&zDelta, &lenDelta);",
          "629:         if( lenDelta>0 && zDelta[0]!=',' ){",
          "631:           return -1;",
          "632:         }",
          "633:         zDelta++; lenDelta--;",
          "634:         nCopy += cnt;",
          "635:         break;",
          "636:       }",
          "637:       case ':': {",
          "638:         zDelta++; lenDelta--;",
          "639:         nInsert += cnt;",
          "640:         if( cnt>lenDelta ){",
          "642:           return -1;",
          "643:         }",
          "644:         zDelta += cnt;",
          "645:         lenDelta -= cnt;",
          "646:         break;",
          "647:       }",
          "648:       case ';': {",
          "651:         return 0;",
          "652:       }",
          "653:       default: {",
          "655:         return -1;",
          "656:       }",
          "657:     }",
          "658:   }",
          "660:   return -1;",
          "661: }",
          "668: static void deltaCreateFunc(",
          "669:   sqlite3_context *context,",
          "670:   int argc,",
          "671:   sqlite3_value **argv",
          "672: ){",
          "677:   assert( argc==2 );",
          "678:   if( sqlite3_value_type(argv[0])==SQLITE_NULL ) return;",
          "679:   if( sqlite3_value_type(argv[1])==SQLITE_NULL ) return;",
          "680:   nOrig = sqlite3_value_bytes(argv[0]);",
          "681:   aOrig = (const char*)sqlite3_value_blob(argv[0]);",
          "682:   nNew = sqlite3_value_bytes(argv[1]);",
          "683:   aNew = (const char*)sqlite3_value_blob(argv[1]);",
          "684:   aOut = sqlite3_malloc64(nNew+70);",
          "685:   if( aOut==0 ){",
          "686:     sqlite3_result_error_nomem(context);",
          "687:   }else{",
          "688:     nOut = delta_create(aOrig, nOrig, aNew, nNew, aOut);",
          "689:     if( nOut<0 ){",
          "690:       sqlite3_free(aOut);",
          "691:       sqlite3_result_error(context, \"cannot create fossil delta\", -1);",
          "692:     }else{",
          "693:       sqlite3_result_blob(context, aOut, nOut, sqlite3_free);",
          "694:     }",
          "695:   }",
          "696: }",
          "703: static void deltaApplyFunc(",
          "704:   sqlite3_context *context,",
          "705:   int argc,",
          "706:   sqlite3_value **argv",
          "707: ){",
          "712:   assert( argc==2 );",
          "713:   if( sqlite3_value_type(argv[0])==SQLITE_NULL ) return;",
          "714:   if( sqlite3_value_type(argv[1])==SQLITE_NULL ) return;",
          "715:   nOrig = sqlite3_value_bytes(argv[0]);",
          "716:   aOrig = (const char*)sqlite3_value_blob(argv[0]);",
          "717:   nDelta = sqlite3_value_bytes(argv[1]);",
          "718:   aDelta = (const char*)sqlite3_value_blob(argv[1]);",
          "721:   nOut = delta_output_size(aDelta, nDelta);",
          "722:   if( nOut<0 ){",
          "723:     sqlite3_result_error(context, \"corrupt fossil delta\", -1);",
          "724:     return;",
          "725:   }",
          "726:   aOut = sqlite3_malloc64((sqlite3_int64)nOut+1);",
          "727:   if( aOut==0 ){",
          "728:     sqlite3_result_error_nomem(context);",
          "729:   }else{",
          "730:     nOut2 = delta_apply(aOrig, nOrig, aDelta, nDelta, aOut);",
          "731:     if( nOut2!=nOut ){",
          "732:       sqlite3_free(aOut);",
          "733:       sqlite3_result_error(context, \"corrupt fossil delta\", -1);",
          "734:     }else{",
          "735:       sqlite3_result_blob(context, aOut, nOut, sqlite3_free);",
          "736:     }",
          "737:   }",
          "738: }",
          "746: static void deltaOutputSizeFunc(",
          "747:   sqlite3_context *context,",
          "748:   int argc,",
          "749:   sqlite3_value **argv",
          "750: ){",
          "753:   assert( argc==1 );",
          "754:   if( sqlite3_value_type(argv[0])==SQLITE_NULL ) return;",
          "755:   nDelta = sqlite3_value_bytes(argv[0]);",
          "756:   aDelta = (const char*)sqlite3_value_blob(argv[0]);",
          "759:   nOut = delta_output_size(aDelta, nDelta);",
          "760:   if( nOut<0 ){",
          "761:     sqlite3_result_error(context, \"corrupt fossil delta\", -1);",
          "762:     return;",
          "763:   }else{",
          "764:     sqlite3_result_int(context, nOut);",
          "765:   }",
          "766: }",
          "769: #ifdef _WIN32",
          "770: __declspec(dllexport)",
          "771: #endif",
          "772: int sqlite3_fossildelta_init(",
          "773:   sqlite3 *db,",
          "774:   char **pzErrMsg,",
          "775:   const sqlite3_api_routines *pApi",
          "776: ){",
          "777:   int rc = SQLITE_OK;",
          "778:   SQLITE_EXTENSION_INIT2(pApi);",
          "780:   rc = sqlite3_create_function(db, \"delta_create\", 2, SQLITE_UTF8, 0,",
          "781:                                deltaCreateFunc, 0, 0);",
          "782:   if( rc==SQLITE_OK ){",
          "783:     rc = sqlite3_create_function(db, \"delta_apply\", 2, SQLITE_UTF8, 0,",
          "784:                                  deltaApplyFunc, 0, 0);",
          "785:   }",
          "786:   if( rc==SQLITE_OK ){",
          "787:     rc = sqlite3_create_function(db, \"delta_output_size\", 1, SQLITE_UTF8, 0,",
          "788:                                  deltaOutputSizeFunc, 0, 0);",
          "789:   }",
          "790:   return rc;",
          "791: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 12517d1b15da46bc90bd95bb9c161d7f2ecdd7f28b1b3a5ed4397939ef986061",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90255b814923d03eb68c33f60ed29fbbbe977e31",
      "candidate_info": {
        "commit_hash": "90255b814923d03eb68c33f60ed29fbbbe977e31",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/90255b814923d03eb68c33f60ed29fbbbe977e31",
        "files": [
          "ext/rbu/rbufault2.test",
          "ext/rbu/rbumisc.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid",
          "src/test_vfs.c"
        ],
        "message": "Add tests for the RBU module.\n\nFossilOrigin-Name: a194e53670e25a48c2bb51b54755abff88ed6ae2596c5858fb4aac16cb452bdf",
        "before_after_code_files": [
          "ext/rbu/rbufault2.test||ext/rbu/rbufault2.test",
          "ext/rbu/rbumisc.test||ext/rbu/rbumisc.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid",
          "src/test_vfs.c||src/test_vfs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbufault2.test||ext/rbu/rbufault2.test": [
          "File: ext/rbu/rbufault2.test -> ext/rbu/rbufault2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: }",
          "57: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: sqlite3rbu_create_vfs -default rbu \"\"",
          "56: sqlite3 db test.db",
          "57: set ::vfsname [file_control_vfsname db]",
          "58: do_faultsim_test 2 -faults oom* -prep {",
          "59: } -body {",
          "60:   file_control_vfsname db",
          "61: }",
          "62: db close",
          "63: sqlite3rbu_destroy_vfs rbu",
          "",
          "---------------"
        ],
        "ext/rbu/rbumisc.test||ext/rbu/rbumisc.test": [
          "File: ext/rbu/rbumisc.test -> ext/rbu/rbumisc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: sqlite3_config_uri 1",
          "19: reset_db",
          "29:   forcedelete rbu.db",
          "30:   sqlite3 rbu rbu.db",
          "31:   rbu eval {",
          "",
          "[Removed Lines]",
          "21: #-------------------------------------------------------------------------",
          "22: # Ensure that RBU is not confused by oddly named tables in an RBU",
          "23: # database.",
          "24: #",
          "25: do_execsql_test 1.0 {",
          "26:   CREATE TABLE x1(a, b, c INTEGER PRIMARY KEY);",
          "27: }",
          "28: do_test 1.1 {",
          "",
          "[Added Lines]",
          "21: proc populate_rbu_db {} {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "44:     INSERT INTO dat VALUES(3, 3, 3, 0);",
          "45:   }",
          "46:   rbu close",
          "47: } {}",
          "49: do_test 1.2 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: }",
          "42: #-------------------------------------------------------------------------",
          "43: # Ensure that RBU is not confused by oddly named tables in an RBU",
          "44: # database.",
          "45: #",
          "46: do_execsql_test 1.0 {",
          "47:   CREATE TABLE x1(a, b, c INTEGER PRIMARY KEY);",
          "48: }",
          "49: do_test 1.1 {",
          "50:   populate_rbu_db",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63: do_test 1.4 {",
          "64:   db eval { DELETE FROM x1 }",
          "69:   sqlite3rbu rbu test.db rbu.db",
          "70:   rbu step",
          "",
          "[Removed Lines]",
          "65:   sqlite3 rbu rbu.db",
          "66:   rbu eval { DELETE FROM rbu_state }",
          "67:   rbu close",
          "",
          "[Added Lines]",
          "69:   populate_rbu_db",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "77:   list [catch { rbu close } msg] $msg",
          "78: } {1 {SQLITE_ERROR - cannot update wal mode database}}",
          "80: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: #-------------------------------------------------------------------------",
          "83: # Test the effect of a wal file appearing after the target database has",
          "84: # been opened, but before it has been locked.",
          "85: #",
          "86: catch { db close }",
          "87: testvfs tvfs -default 1",
          "89: for {set N 1} {$N < 10} {incr N} {",
          "90:   reset_db",
          "91:   populate_rbu_db",
          "92:   do_execsql_test 2.$N.0 {",
          "93:     CREATE TABLE x1(a, b, c INTEGER PRIMARY KEY);",
          "94:   }",
          "96:   set nAccessCnt 0",
          "97:   do_test 2.$N.1 {",
          "98:     sqlite3rbu rbu test.db rbu.db",
          "99:     rbu step",
          "100:     rbu step",
          "101:     rbu close",
          "102:   } {SQLITE_OK}",
          "104:   tvfs script xAccess",
          "105:   tvfs filter xAccess",
          "106:   set nAccessCnt 0",
          "107:   proc xAccess {method file args} {",
          "108:     global nAccessCnt",
          "109:     if {[file tail $file]==\"test.db-wal\"} {",
          "110:       incr nAccessCnt -1",
          "111:       if {$nAccessCnt==0} {",
          "112:         set fd [open test.db-wal w]",
          "113:         puts -nonewline $fd [string repeat 0 2000]",
          "114:         close $fd",
          "115:       }",
          "116:     }",
          "117:     return SQLITE_OK",
          "118:   }",
          "120:   foreach r {",
          "121:      {1 {SQLITE_ERROR - cannot update wal mode database}}",
          "122:      {0 SQLITE_OK}",
          "123:      {1 {SQLITE_CANTOPEN - unable to open database file}}",
          "124:   } {",
          "125:     set RES($r) 1",
          "126:   }",
          "127:   do_test 2.$N.2 {",
          "128:     set ::nAccessCnt $N",
          "129:     set res [list [catch {",
          "130:       sqlite3rbu rbu test.db rbu.db",
          "131:       rbu step",
          "132:       rbu close",
          "133:     } msg ] $msg]",
          "134:     set RES($res)",
          "135:   } {1}",
          "136:   catch {rbu close}",
          "137: }",
          "138: catch {db close}",
          "139: catch {tvfs delete}",
          "141: #-------------------------------------------------------------------------",
          "142: testvfs tvfs -default 1",
          "143: reset_db",
          "144: populate_rbu_db",
          "145: do_execsql_test 3.0 {",
          "146:   CREATE TABLE x1(a, b, c INTEGER PRIMARY KEY);",
          "147: }",
          "149: tvfs script xFileControl",
          "150: tvfs filter xFileControl",
          "152: proc xFileControl {method file verb args} {",
          "153:   if {$verb==\"ZIPVFS\" && [info exists ::zipvfs_filecontrol]} {",
          "154:     return $::zipvfs_filecontrol",
          "155:   }",
          "156:   return \"SQLITE_NOTFOUND\"",
          "157: }",
          "159: breakpoint",
          "160: foreach {tn ret err} {",
          "161:   1 SQLITE_OK           0",
          "162:   2 SQLITE_ERROR        1",
          "163:   3 SQLITE_NOTFOUND     0",
          "164:   4 SQLITE_OMIT         1",
          "165: } {",
          "166:   set ::zipvfs_filecontrol $ret",
          "167:   do_test 3.$tn.1 {",
          "168:     catch {",
          "169:       sqlite3rbu rbu test.db rbu.db",
          "170:       rbu step",
          "171:       rbu close",
          "172:     }",
          "173:   } $err",
          "174: }",
          "175: catch {db close}",
          "176: catch {tvfs delete}",
          "178: #-------------------------------------------------------------------------",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4707:       }else if( rc==SQLITE_NOTFOUND ){",
          "4708:         pRbu->pTargetFd = p;",
          "4709:         p->pRbu = pRbu;",
          "4713:         if( p->pWalFd ) p->pWalFd->pRbu = pRbu;",
          "4714:         rc = SQLITE_OK;",
          "4715:       }",
          "",
          "[Removed Lines]",
          "4710:         if( p->openFlags & SQLITE_OPEN_MAIN_DB ){",
          "4711:           rbuMainlistAdd(p);",
          "4712:         }",
          "",
          "[Added Lines]",
          "4710:         rbuMainlistAdd(p);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4772:     if( ofst==WAL_LOCK_CKPT && n==1 ) rc = SQLITE_BUSY;",
          "4773:   }else{",
          "4774:     int bCapture = 0;",
          "4779:       bCapture = 1;",
          "4780:     }",
          "",
          "[Removed Lines]",
          "4775:     if( n==1 && (flags & SQLITE_SHM_EXCLUSIVE)",
          "4776:      && pRbu && pRbu->eStage==RBU_STAGE_CAPTURE",
          "4777:      && (ofst==WAL_LOCK_WRITE || ofst==WAL_LOCK_CKPT || ofst==WAL_LOCK_READ0)",
          "4778:     ){",
          "",
          "[Added Lines]",
          "4773:     if( pRbu && pRbu->eStage==RBU_STAGE_CAPTURE ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4810:   assert( p->openFlags & (SQLITE_OPEN_MAIN_DB|SQLITE_OPEN_TEMP_DB) );",
          "4822:     }",
          "4825:       char *pNew = (char*)sqlite3_malloc64(szRegion);",
          "4826:       if( pNew==0 ){",
          "4827:         rc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "4811:   if( eStage==RBU_STAGE_OAL || eStage==RBU_STAGE_MOVE ){",
          "4812:     if( iRegion<=p->nShm ){",
          "4813:       sqlite3_int64 nByte = (iRegion+1) * sizeof(char*);",
          "4814:       char **apNew = (char**)sqlite3_realloc64(p->apShm, nByte);",
          "4815:       if( apNew==0 ){",
          "4816:         rc = SQLITE_NOMEM;",
          "4817:       }else{",
          "4818:         memset(&apNew[p->nShm], 0, sizeof(char*) * (1 + iRegion - p->nShm));",
          "4819:         p->apShm = apNew;",
          "4820:         p->nShm = iRegion+1;",
          "4821:       }",
          "4824:     if( rc==SQLITE_OK && p->apShm[iRegion]==0 ){",
          "",
          "[Added Lines]",
          "4806:   if( eStage==RBU_STAGE_OAL ){",
          "4807:     sqlite3_int64 nByte = (iRegion+1) * sizeof(char*);",
          "4808:     char **apNew = (char**)sqlite3_realloc64(p->apShm, nByte);",
          "4814:     assert( iRegion==p->nShm );",
          "4815:     if( apNew==0 ){",
          "4816:       rc = SQLITE_NOMEM;",
          "4817:     }else{",
          "4818:       memset(&apNew[p->nShm], 0, sizeof(char*) * (1 + iRegion - p->nShm));",
          "4819:       p->apShm = apNew;",
          "4820:       p->nShm = iRegion+1;",
          "4823:     if( rc==SQLITE_OK ){",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 956ca2a452aa3707bca553007a7ef221af3d4f6b0af747d17070926e000f2362",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "235:     { SQLITE_BUSY,     \"SQLITE_BUSY\"   },",
          "236:     { SQLITE_READONLY, \"SQLITE_READONLY\"   },",
          "237:     { SQLITE_READONLY_CANTINIT, \"SQLITE_READONLY_CANTINIT\"   },",
          "238:     { -1,              \"SQLITE_OMIT\"   },",
          "239:   };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "238:     { SQLITE_NOTFOUND, \"SQLITE_NOTFOUND\"   },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "552:     } aF[] = {",
          "553:       { SQLITE_FCNTL_BEGIN_ATOMIC_WRITE, \"BEGIN_ATOMIC_WRITE\" },",
          "554:       { SQLITE_FCNTL_COMMIT_ATOMIC_WRITE, \"COMMIT_ATOMIC_WRITE\" },",
          "555:     };",
          "556:     int i;",
          "557:     for(i=0; i<sizeof(aF)/sizeof(aF[0]); i++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "556:       { SQLITE_FCNTL_ZIPVFS, \"ZIPVFS\" },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "565:           0, 0",
          "566:       );",
          "567:       tvfsResultCode(p, &rc);",
          "569:     }",
          "570:   }",
          "571:   return sqlite3OsFileControl(pFd->pReal, op, pArg);",
          "",
          "[Removed Lines]",
          "568:       if( rc ) return rc;",
          "",
          "[Added Lines]",
          "570:       if( rc ) return (rc<0 ? SQLITE_OK : rc);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6ce71bd265314f65ad95ecdb2735af54121a4dd",
      "candidate_info": {
        "commit_hash": "b6ce71bd265314f65ad95ecdb2735af54121a4dd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6ce71bd265314f65ad95ecdb2735af54121a4dd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/affinity2.test"
        ],
        "message": "Retain the affinity of an expression in a WHERE clause when it is transformed to a reference to an index column on the same expression. Fix for [f043b113].\n\nFossilOrigin-Name: 511da0815673ca4a176aa61dc23a8231b2ab77e8363fc184a78b6e17dba64d49",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/affinity2.test||test/affinity2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ec4c63e00c957f98d61ddc1b9d20406c7e1072d6ab0c12ac6939db6c63d90cb8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1117: static int whereIndexExprTransNode(Walker *p, Expr *pExpr){",
          "1118:   IdxExprTrans *pX = p->u.pIdxTrans;",
          "1119:   if( sqlite3ExprCompare(0, pExpr, pX->pIdxExpr, pX->iTabCur)==0 ){",
          "1120:     pExpr->op = TK_COLUMN;",
          "1121:     pExpr->iTable = pX->iIdxCur;",
          "1122:     pExpr->iColumn = pX->iIdxCol;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1120:     pExpr->affExpr = sqlite3ExprAffinity(pExpr);",
          "",
          "---------------"
        ],
        "test/affinity2.test||test/affinity2.test": [
          "File: test/affinity2.test -> test/affinity2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "18: do_execsql_test affinity2-100 {",
          "19:   CREATE TABLE t1(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: set testprefix affinity2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:   SELECT rowid, xt==+xi, xt==xi, xt==xb FROM t1 ORDER BY rowid;",
          "59: } {1 1 1 0 2 1 1 1 3 0 1 1}",
          "61: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: #-------------------------------------------------------------------------",
          "63: do_execsql_test 400 {",
          "64:   CREATE TABLE ttt(c0, c1);",
          "65:   CREATE INDEX ii ON ttt(CAST(c0 AS NUMERIC));",
          "66:   INSERT INTO ttt VALUES('abc', '-1');",
          "67: }",
          "68: do_execsql_test 410 {",
          "69:   SELECT * FROM ttt WHERE CAST(c0 AS NUMERIC) > c1 GROUP BY rowid;",
          "70: } {abc -1}",
          "71: do_execsql_test 420 {",
          "72:   SELECT * FROM ttt INDEXED BY ii WHERE CAST(c0 AS NUMERIC) > c1 GROUP BY rowid;",
          "73: } {abc -1}",
          "75: do_execsql_test 430 {",
          "76:   CREATE TABLE t3(a, b, c INTEGER);",
          "77:   CREATE INDEX t3ac ON t3(a, c-1);",
          "78:   INSERT INTO t3 VALUES(1, 1, 1);",
          "79:   INSERT INTO t3 VALUES(2, 1, 0);",
          "80:   INSERT INTO t3 VALUES(3, 1, 1);",
          "81:   INSERT INTO t3 VALUES(4, 1, 0);",
          "82:   INSERT INTO t3 VALUES(5, 1, 1);",
          "83: }",
          "84: do_execsql_test 440 {",
          "85:   SELECT * FROM t3 WHERE c='0' ORDER BY a;",
          "86: } {2 1 0 4 1 0}",
          "",
          "---------------"
        ]
      }
    }
  ]
}