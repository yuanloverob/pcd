{
  "cve_id": "CVE-2019-19645",
  "cve_desc": "alter.c in SQLite through 3.30.1 allows attackers to trigger infinite recursion via certain types of self-referential views in conjunction with ALTER TABLE statements.",
  "repo": "sqlite/sqlite",
  "patch_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
  "patch_info": {
    "commit_hash": "38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/38096961c7cd109110ac21d3ed7dad7e0cb0ae06",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/alter.c",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab3.test"
    ],
    "message": "Avoid infinite recursion in the ALTER TABLE code when a view contains an unused CTE that references, directly or indirectly, the view itself.\n\nFossilOrigin-Name: 1d2e53a39b87e364685e21de137655b6eee725e4c6d27fc90865072d7c5892b5",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/alter.c||src/alter.c",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: c5d44143599f3fe98492b2b900fa3d77925c7be545096251055ceeab899a41f1",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/alter.c||src/alter.c": [
      "File: src/alter.c -> src/alter.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "760:   Parse *pParse = pWalker->pParse;",
      "761:   int i;",
      "762:   if( pParse->nErr ) return WRC_Abort;",
      "763:   if( ALWAYS(p->pEList) ){",
      "764:     ExprList *pList = p->pEList;",
      "765:     for(i=0; i<pList->nExpr; i++){",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "763:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "853: static int renameColumnSelectCb(Walker *pWalker, Select *p){",
      "854:   renameWalkWith(pWalker, p);",
      "855:   return WRC_Continue;",
      "856: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "855:   if( p->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1316:   if( sParse.pNewTable ){",
      "1317:     Select *pSelect = sParse.pNewTable->pSelect;",
      "1318:     if( pSelect ){",
      "1319:       sParse.rc = SQLITE_OK;",
      "1321:       rc = (db->mallocFailed ? SQLITE_NOMEM : sParse.rc);",
      "1322:       if( rc==SQLITE_OK ){",
      "1323:         sqlite3WalkSelect(&sWalker, pSelect);",
      "",
      "[Removed Lines]",
      "1320:       sqlite3SelectPrep(&sParse, sParse.pNewTable->pSelect, 0);",
      "",
      "[Added Lines]",
      "1321:       pSelect->selFlags &= ~SF_View;",
      "1323:       sqlite3SelectPrep(&sParse, pSelect, 0);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1434:   int i;",
      "1435:   RenameCtx *p = pWalker->u.pRename;",
      "1436:   SrcList *pSrc = pSelect->pSrc;",
      "1437:   if( pSrc==0 ){",
      "1438:     assert( pWalker->pParse->db->mallocFailed );",
      "1439:     return WRC_Abort;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1440:   if( pSelect->selFlags & SF_View ) return WRC_Prune;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1514:         if( pTab->pSelect ){",
      "1515:           if( isLegacy==0 ){",
      "1516:             NameContext sNC;",
      "1517:             memset(&sNC, 0, sizeof(sNC));",
      "1518:             sNC.pParse = &sParse;",
      "1520:             sqlite3SelectPrep(&sParse, pTab->pSelect, &sNC);",
      "1521:             if( sParse.nErr ) rc = sParse.rc;",
      "1522:             sqlite3WalkSelect(&sWalker, pTab->pSelect);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1520:             Select *pSelect = pTab->pSelect;",
      "1525:             assert( pSelect->selFlags & SF_View );",
      "1526:             pSelect->selFlags &= ~SF_View;",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2488:   if( IN_RENAME_OBJECT ){",
      "2489:     p->pSelect = pSelect;",
      "2490:     pSelect = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2488:   pSelect->selFlags |= SF_View;",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "487:   ALTER TABLE a RENAME a TO b;",
      "488: }",
      "491: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "490: #------------------------------------------------------------------------",
      "491: #",
      "492: reset_db",
      "493: do_execsql_test 22.1 {",
      "494:   CREATE TABLE t1(a);",
      "495:   CREATE VIEW v2(b) AS SELECT * FROM v2;",
      "496: }",
      "498: do_catchsql_test 22.2 {",
      "499:   ALTER TABLE t1 RENAME TO t4;",
      "500: } {1 {error in view v2: view v2 is circularly defined}}",
      "502: do_execsql_test 22.3 {",
      "503:   DROP VIEW v2;",
      "504:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) SELECT * FROM t3;",
      "505: }",
      "507: breakpoint",
      "508: do_catchsql_test 22.4 {",
      "509:   ALTER TABLE t1 RENAME TO t4;",
      "510: } {1 {error in view v2: view v2 is circularly defined}}",
      "512: do_execsql_test 22.5 {",
      "513:   DROP VIEW v2;",
      "514:   CREATE VIEW v2(b) AS WITH t3 AS (SELECT b FROM v2) VALUES(1);",
      "515: }",
      "517: do_catchsql_test 22.6 {",
      "518:   ALTER TABLE t1 RENAME TO t4;",
      "519: } {0 {}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a786e453a4c03c958feb30bfda4153a24bb393e6",
      "candidate_info": {
        "commit_hash": "a786e453a4c03c958feb30bfda4153a24bb393e6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a786e453a4c03c958feb30bfda4153a24bb393e6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c"
        ],
        "message": "Simplify the windows frame code some. Add a comment explaining some of the VM code generated by sqlite3WindowCodeStep().\n\nFossilOrigin-Name: 6bd1a07949ff3d394056bfcc813444401ef00806e3f0e0423ff6962541e84bdb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e7bced731aa071c95bc398cdecd53c939841bf0c52fbcd06e47ba68f8c5cc35a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1698:   return ret;",
          "1699: }",
          "1774: ){",
          "1775:   Window *pMWin = p->pWin;",
          "1776:   ExprList *pOrderBy = pMWin->pOrderBy;",
          "1777:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1794:   int addrShortcut = 0;",
          "1810:   assert( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_CURRENT",
          "1811:        || pMWin->eStart==TK_FOLLOWING || pMWin->eStart==TK_UNBOUNDED",
          "",
          "[Removed Lines]",
          "1768: static void windowCodeStep(",
          "1769:   Parse *pParse,",
          "1770:   Select *p,",
          "1771:   WhereInfo *pWInfo,",
          "1772:   int regGosub,",
          "1773:   int addrGosub",
          "1780:   int regArg;",
          "1781:   int csrWrite = pMWin->iEphCsr+1;",
          "1787:   int addrGoto;",
          "1788:   int addrIf;",
          "1789:   int addrGosubFlush;",
          "1790:   int addrInteger;",
          "1791:   int addrCacheRewind;",
          "1792:   int addrCacheNext;",
          "1795:   int addrEmpty = 0;",
          "1796:   int addrPeerJump = 0;",
          "1798:   int bCache = windowCachePartition(pMWin);",
          "1803:   int reg = pParse->nMem+1;",
          "1804:   int regRecord = reg+nSub;",
          "1805:   int regRowid = regRecord+1;",
          "1806:   int regPeer = 0;",
          "1807:   int regNewPeer = 0;",
          "1808:   WindowCodeArg s;",
          "",
          "[Added Lines]",
          "1707: Window *sqlite3WindowDup(sqlite3 *db, Expr *pOwner, Window *p){",
          "1708:   Window *pNew = 0;",
          "1709:   if( ALWAYS(p) ){",
          "1710:     pNew = sqlite3DbMallocZero(db, sizeof(Window));",
          "1711:     if( pNew ){",
          "1712:       pNew->zName = sqlite3DbStrDup(db, p->zName);",
          "1713:       pNew->pFilter = sqlite3ExprDup(db, p->pFilter, 0);",
          "1714:       pNew->pFunc = p->pFunc;",
          "1715:       pNew->pPartition = sqlite3ExprListDup(db, p->pPartition, 0);",
          "1716:       pNew->pOrderBy = sqlite3ExprListDup(db, p->pOrderBy, 0);",
          "1717:       pNew->eType = p->eType;",
          "1718:       pNew->eEnd = p->eEnd;",
          "1719:       pNew->eStart = p->eStart;",
          "1720:       pNew->pStart = sqlite3ExprDup(db, p->pStart, 0);",
          "1721:       pNew->pEnd = sqlite3ExprDup(db, p->pEnd, 0);",
          "1722:       pNew->pOwner = pOwner;",
          "1723:     }",
          "1724:   }",
          "1725:   return pNew;",
          "1726: }",
          "1732: Window *sqlite3WindowListDup(sqlite3 *db, Window *p){",
          "1733:   Window *pWin;",
          "1734:   Window *pRet = 0;",
          "1735:   Window **pp = &pRet;",
          "1737:   for(pWin=p; pWin; pWin=pWin->pNextWin){",
          "1739:     if( *pp==0 ) break;",
          "1740:     pp = &((*pp)->pNextWin);",
          "1741:   }",
          "1743:   return pRet;",
          "1744: }",
          "1946: void sqlite3WindowCodeStep(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1814:        || pMWin->eEnd==TK_UNBOUNDED || pMWin->eEnd==TK_PRECEDING",
          "1815:   );",
          "1817:   memset(&s, 0, sizeof(WindowCodeArg));",
          "1818:   s.pParse = pParse;",
          "1819:   s.pMWin = pMWin;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1989:   bCache = windowCachePartition(pMWin);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1821:   s.regGosub = regGosub;",
          "1822:   s.addrGosub = addrGosub;",
          "1823:   s.current.csr = pMWin->iEphCsr;",
          "1824:   s.start.csr = s.current.csr+2;",
          "1825:   s.end.csr = s.current.csr+3;",
          "1829:   regFlushPart = ++pParse->nMem;",
          "1831:   if( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING ){",
          "1832:     regStart = ++pParse->nMem;",
          "1833:   }",
          "",
          "[Removed Lines]",
          "1827:   pParse->nMem += 1 + nSub + 1;",
          "",
          "[Added Lines]",
          "1999:   csrWrite = s.current.csr+1;",
          "2003:   regNew = pParse->nMem+1;",
          "2004:   pParse->nMem += nInput;",
          "2005:   regRecord = ++pParse->nMem;",
          "2006:   regRowid = ++pParse->nMem;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1836:   }",
          "1841:   if( pMWin->eType!=TK_ROWS ){",
          "1842:     int nPeer = (pOrderBy ? pOrderBy->nExpr : 0);",
          "1844:     if( pMWin->pPartition ) regNewPeer += pMWin->pPartition->nExpr;",
          "1846:     regPeer = pParse->nMem+1;       pParse->nMem += nPeer;",
          "1847:     s.start.reg = pParse->nMem+1;   pParse->nMem += nPeer;",
          "1848:     s.current.reg = pParse->nMem+1; pParse->nMem += nPeer;",
          "",
          "[Removed Lines]",
          "1843:     regNewPeer = reg + pMWin->nBufferCol;",
          "",
          "[Added Lines]",
          "2024:     regNewPeer = regNew + pMWin->nBufferCol;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1850:   }",
          "1857:   }",
          "1866:   if( pMWin->pPartition ){",
          "1867:     int addr;",
          "1868:     ExprList *pPart = pMWin->pPartition;",
          "1869:     int nPart = pPart->nExpr;",
          "1871:     KeyInfo *pKeyInfo = sqlite3KeyInfoFromExprList(pParse, pPart, 0, 0);",
          "1873:     addr = sqlite3VdbeAddOp3(v, OP_Compare, regNewPart, pMWin->regPart, nPart);",
          "",
          "[Removed Lines]",
          "1855:   for(iCol=0; iCol<nSub; iCol++){",
          "1856:     sqlite3VdbeAddOp3(v, OP_Column, iSubCsr, iCol, reg+iCol);",
          "1858:   sqlite3VdbeAddOp3(v, OP_MakeRecord, reg, nSub, regRecord);",
          "1870:     int regNewPart = reg + pMWin->nBufferCol;",
          "",
          "[Added Lines]",
          "2035:   for(iInput=0; iInput<nInput; iInput++){",
          "2036:     sqlite3VdbeAddOp3(v, OP_Column, csrInput, iInput, regNew+iInput);",
          "2038:   sqlite3VdbeAddOp3(v, OP_MakeRecord, regNew, nInput, regRecord);",
          "2049:     int regNewPart = regNew + pMWin->nBufferCol;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1893:     }",
          "1894:     addrCacheRewind = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "1895:   }else{",
          "1897:   }",
          "1902:   if( regStart ){",
          "1903:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "",
          "[Removed Lines]",
          "1896:     addrIf = sqlite3VdbeAddOp1(v, OP_IfNot, pMWin->regFirst);",
          "1900:   s.regArg = regArg = windowInitAccum(pParse, pMWin);",
          "",
          "[Added Lines]",
          "2075:     addrIfNot = sqlite3VdbeAddOp1(v, OP_IfNot, pMWin->regFirst);",
          "2079:   s.regArg = windowInitAccum(pParse, pMWin);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1950:   addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "1954:   if( bCache ){",
          "1955:     addrCacheNext = sqlite3VdbeCurrentAddr(v);",
          "1956:     if( pMWin->eType!=TK_ROWS ){",
          "1957:       windowReadPeerValues(&s, csrWrite, regNewPeer);",
          "1958:     }",
          "1959:   }else{",
          "1961:   }",
          "1962:   if( regPeer ){",
          "1963:     addrPeerJump = windowIfNewPeer(pParse, pOrderBy, regNewPeer, regPeer);",
          "",
          "[Removed Lines]",
          "1953:   VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep.SECOND_ROW_CODE\"));",
          "1960:     sqlite3VdbeJumpHere(v, addrIf);",
          "",
          "[Added Lines]",
          "2132:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.SECOND_ROW\"));",
          "2139:     sqlite3VdbeJumpHere(v, addrIfNot);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2011:   if( addrPeerJump ){",
          "2012:     sqlite3VdbeJumpHere(v, addrPeerJump);",
          "2013:   }",
          "2017:   sqlite3VdbeJumpHere(v, addrGoto);",
          "",
          "[Removed Lines]",
          "2014:   VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep.SECOND_ROW_CODE\"));",
          "",
          "[Added Lines]",
          "2193:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.SECOND_ROW\"));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2029:     sqlite3VdbeJumpHere(v, addrGosubFlush);",
          "2030:   }",
          "2033:   addrEmpty = sqlite3VdbeAddOp1(v, OP_Rewind, csrWrite);",
          "2034:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2035:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "",
          "[Removed Lines]",
          "2032:   VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep.FLUSH_CODE\"));",
          "",
          "[Added Lines]",
          "2211:   VdbeModuleComment((pParse->pVdbe, \"Begin WindowCodeStep.FLUSH\"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2079:   sqlite3VdbeAddOp1(v, OP_ResetSorter, s.current.csr);",
          "2080:   sqlite3VdbeAddOp2(v, OP_Integer, 0, pMWin->regSize);",
          "2081:   if( bCache==0 ) sqlite3VdbeAddOp2(v, OP_Integer, 1, pMWin->regFirst);",
          "2083:   if( pMWin->pPartition ){",
          "2084:     sqlite3VdbeChangeP1(v, addrInteger, sqlite3VdbeCurrentAddr(v));",
          "2085:     sqlite3VdbeAddOp1(v, OP_Return, regFlushPart);",
          "2086:   }",
          "2087: }",
          "",
          "[Removed Lines]",
          "2082:   VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep.FLUSH_CODE\"));",
          "2095: Window *sqlite3WindowDup(sqlite3 *db, Expr *pOwner, Window *p){",
          "2096:   Window *pNew = 0;",
          "2097:   if( ALWAYS(p) ){",
          "2098:     pNew = sqlite3DbMallocZero(db, sizeof(Window));",
          "2099:     if( pNew ){",
          "2100:       pNew->zName = sqlite3DbStrDup(db, p->zName);",
          "2101:       pNew->pFilter = sqlite3ExprDup(db, p->pFilter, 0);",
          "2102:       pNew->pFunc = p->pFunc;",
          "2103:       pNew->pPartition = sqlite3ExprListDup(db, p->pPartition, 0);",
          "2104:       pNew->pOrderBy = sqlite3ExprListDup(db, p->pOrderBy, 0);",
          "2105:       pNew->eType = p->eType;",
          "2106:       pNew->eEnd = p->eEnd;",
          "2107:       pNew->eStart = p->eStart;",
          "2108:       pNew->pStart = sqlite3ExprDup(db, p->pStart, 0);",
          "2109:       pNew->pEnd = sqlite3ExprDup(db, p->pEnd, 0);",
          "2110:       pNew->pOwner = pOwner;",
          "2111:     }",
          "2112:   }",
          "2113:   return pNew;",
          "2114: }",
          "2120: Window *sqlite3WindowListDup(sqlite3 *db, Window *p){",
          "2121:   Window *pWin;",
          "2122:   Window *pRet = 0;",
          "2123:   Window **pp = &pRet;",
          "2125:   for(pWin=p; pWin; pWin=pWin->pNextWin){",
          "2127:     if( *pp==0 ) break;",
          "2128:     pp = &((*pp)->pNextWin);",
          "2129:   }",
          "2131:   return pRet;",
          "2132: }",
          "2141: void sqlite3WindowCodeStep(",
          "2147: ){",
          "2148:   VdbeModuleComment((pParse->pVdbe, \"Begin windowCodeStep()\"));",
          "2149:   windowCodeStep(pParse, p, pWInfo, regGosub, addrGosub);",
          "2150:   VdbeModuleComment((pParse->pVdbe, \"End windowCodeStep()\"));",
          "2151: }",
          "",
          "[Added Lines]",
          "2261:   VdbeModuleComment((pParse->pVdbe, \"End WindowCodeStep.FLUSH\"));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b10a50e7f829f7038242db6f52b557e7624df412",
      "candidate_info": {
        "commit_hash": "b10a50e7f829f7038242db6f52b557e7624df412",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b10a50e7f829f7038242db6f52b557e7624df412",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "In dbfuzz2, avoid using a malloc in the LLVMFuzzerInitialize() initializer routine, so that no memory leaks are reported.  Also, show the version of SQLite being used when the -v option is on.\n\nFossilOrigin-Name: 824f93246988ffa213bbd41a7de08886999b1a8ae00fdf6b9767acb6e3ec6a1f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 97e723d746eeb2159f5bf1701532271ac6a4620879c82d496f4499c178b64479",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "134: int LLVMFuzzerInitialize(int *pArgc, char ***pArgv){",
          "135:   int i, j, n;",
          "136:   int argc = *pArgc;",
          "138:   char **argv = *pArgv;",
          "142:   for(i=j=1; i<argc; i++){",
          "143:     char *z = argv[i];",
          "144:     if( z[0]=='-' ){",
          "",
          "[Removed Lines]",
          "137:   char **newArgv;",
          "139:   newArgv = malloc( sizeof(char*)*(argc+1) );",
          "140:   if( newArgv==0 ) return 0;",
          "141:   newArgv[0] = argv[0];",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:         continue;",
          "154:       }",
          "155:     }",
          "157:   }",
          "161:   return 0;",
          "162: }",
          "",
          "[Removed Lines]",
          "156:     newArgv[j++] = argv[i];",
          "158:   newArgv[j] = 0;",
          "",
          "[Added Lines]",
          "152:     argv[j++] = argv[i];",
          "154:   argv[j] = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "202:       free(pIn);",
          "203:     }",
          "204:   }",
          "205:   return 0;",
          "206: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "200:   if( eVerbosity>0 ){",
          "201:     printf(\"SQLite %s\\n\", sqlite3_sourceid());",
          "202:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "368bfe8b008d1c4de12059c13750954db1b21dc9",
      "candidate_info": {
        "commit_hash": "368bfe8b008d1c4de12059c13750954db1b21dc9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/368bfe8b008d1c4de12059c13750954db1b21dc9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/vdbeapi.c"
        ],
        "message": "Small performance improvement in the sqlite3_bind() family of interfaces.\n\nFossilOrigin-Name: 1dc0c3df32572f09265fc73eeaa0748159e0e9523b9b2d6768b834a29c909968",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/vdbeapi.c||src/vdbeapi.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c96bf6cca220e363b099455ce35195ce7e89d374a52dc787f56e7b11e587bced",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2405:     z = sqlite3ErrStr(SQLITE_NOMEM_BKPT);",
          "2406:   }else{",
          "2407:     testcase( db->pErr==0 );",
          "2409:     assert( !db->mallocFailed );",
          "2410:     if( z==0 ){",
          "2411:       z = sqlite3ErrStr(db->errCode);",
          "",
          "[Removed Lines]",
          "2408:     z = (char*)sqlite3_value_text(db->pErr);",
          "",
          "[Added Lines]",
          "2408:     z = db->errCode ? (char*)sqlite3_value_text(db->pErr) : 0;",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1286:   pVar = &p->aVar[i];",
          "1287:   sqlite3VdbeMemRelease(pVar);",
          "1288:   pVar->flags = MEM_Null;",
          "",
          "[Removed Lines]",
          "1289:   sqlite3Error(p->db, SQLITE_OK);",
          "",
          "[Added Lines]",
          "1289:   p->db->errCode = SQLITE_OK;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1417c2f77f4c63d3a18bff4c21a933cfe4b5daee",
      "candidate_info": {
        "commit_hash": "1417c2f77f4c63d3a18bff4c21a933cfe4b5daee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/1417c2f77f4c63d3a18bff4c21a933cfe4b5daee",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Fix the parse.sql output file so that it is readable into a database where foreign keys are enforced.\n\nFossilOrigin-Name: 3a82c554c3bde4640df6865686f8f70e2c1e07c581fed4772b6b0a8ec1b10bb6",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0fab65c79f675c825ed7e85c82b65ce6f990c9d0796ebb3886942d241df7b268",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4189:       return;",
          "4190:     }",
          "4191:     fprintf(sql,",
          "4192:        \"CREATE TABLE symbol(\\n\"",
          "4193:        \"  id INTEGER PRIMARY KEY,\\n\"",
          "4194:        \"  name TEXT NOT NULL,\\n\"",
          "4195:        \"  isTerminal BOOLEAN NOT NULL,\\n\"",
          "4197:        \");\\n\"",
          "4198:     );",
          "4199:     for(i=0; i<lemp->nsymbol; i++){",
          "",
          "[Removed Lines]",
          "4196:        \"  fallback INTEGER REFERENCES symbol\\n\"",
          "",
          "[Added Lines]",
          "4192:        \"BEGIN;\\n\"",
          "4197:        \"  fallback INTEGER REFERENCES symbol\"",
          "4198:                \" DEFERRABLE INITIALLY DEFERRED\\n\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4244:         }",
          "4245:       }",
          "4246:     }",
          "4247:   }",
          "4248:   lineno = 1;",
          "4249:   tplt_xfer(lemp->name,in,out,&lineno);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4249:     fprintf(sql, \"COMMIT;\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3e3a5bb5714b10a98212139280aa976a3fbbd4c",
      "candidate_info": {
        "commit_hash": "b3e3a5bb5714b10a98212139280aa976a3fbbd4c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b3e3a5bb5714b10a98212139280aa976a3fbbd4c",
        "files": [
          "ext/misc/dbdata.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Avoid reading outside a record buffer when extracting an SQL value in the sqlite_dbdata virtual table code.\n\nFossilOrigin-Name: d99bb0c11d62f629bf59da037827af73a9b814e65815006e0cbca1bc41f42e25",
        "before_after_code_files": [
          "ext/misc/dbdata.c||ext/misc/dbdata.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/dbdata.c||ext/misc/dbdata.c": [
          "File: ext/misc/dbdata.c -> ext/misc/dbdata.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:     case 7:",
          "383:       return 8;",
          "384:     default:",
          "386:   }",
          "387: }",
          "",
          "[Removed Lines]",
          "385:       return ((eType-12) / 2);",
          "",
          "[Added Lines]",
          "385:       if( eType>0 ){",
          "386:         return ((eType-12) / 2);",
          "387:       }",
          "388:       return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "426:       }",
          "436:       }",
          "437:     }",
          "438:   }",
          "439: }",
          "",
          "[Removed Lines]",
          "393: static void dbdataValue(sqlite3_context *pCtx, int eType, u8 *pData){",
          "394:   switch( eType ){",
          "395:     case 0:",
          "396:     case 10:",
          "397:     case 11:",
          "398:       sqlite3_result_null(pCtx);",
          "399:       break;",
          "401:     case 8:",
          "402:       sqlite3_result_int(pCtx, 0);",
          "403:       break;",
          "404:     case 9:",
          "405:       sqlite3_result_int(pCtx, 1);",
          "406:       break;",
          "408:     case 1: case 2: case 3: case 4: case 5: case 6: case 7: {",
          "409:       sqlite3_uint64 v = (signed char)pData[0];",
          "410:       pData++;",
          "411:       switch( eType ){",
          "412:         case 7:",
          "413:         case 6:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;",
          "414:         case 5:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;",
          "415:         case 4:  v = (v<<8) + pData[0];  pData++;",
          "416:         case 3:  v = (v<<8) + pData[0];  pData++;",
          "417:         case 2:  v = (v<<8) + pData[0];  pData++;",
          "418:       }",
          "420:       if( eType==7 ){",
          "421:         double r;",
          "422:         memcpy(&r, &v, sizeof(r));",
          "423:         sqlite3_result_double(pCtx, r);",
          "424:       }else{",
          "425:         sqlite3_result_int64(pCtx, (sqlite3_int64)v);",
          "427:       break;",
          "428:     }",
          "430:     default: {",
          "431:       int n = ((eType-12) / 2);",
          "432:       if( eType % 2 ){",
          "433:         sqlite3_result_text(pCtx, (const char*)pData, n, SQLITE_TRANSIENT);",
          "434:       }else{",
          "435:         sqlite3_result_blob(pCtx, pData, n, SQLITE_TRANSIENT);",
          "",
          "[Added Lines]",
          "396: static void dbdataValue(",
          "397:   sqlite3_context *pCtx,",
          "398:   int eType,",
          "399:   u8 *pData,",
          "400:   int nData",
          "401: ){",
          "402:   if( eType>=0 && dbdataValueBytes(eType)<=nData ){",
          "403:     switch( eType ){",
          "404:       case 0:",
          "405:       case 10:",
          "406:       case 11:",
          "407:         sqlite3_result_null(pCtx);",
          "408:         break;",
          "410:       case 8:",
          "411:         sqlite3_result_int(pCtx, 0);",
          "412:         break;",
          "413:       case 9:",
          "414:         sqlite3_result_int(pCtx, 1);",
          "415:         break;",
          "417:       case 1: case 2: case 3: case 4: case 5: case 6: case 7: {",
          "418:         sqlite3_uint64 v = (signed char)pData[0];",
          "419:         pData++;",
          "420:         switch( eType ){",
          "421:           case 7:",
          "422:           case 6:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;",
          "423:           case 5:  v = (v<<16) + (pData[0]<<8) + pData[1];  pData += 2;",
          "424:           case 4:  v = (v<<8) + pData[0];  pData++;",
          "425:           case 3:  v = (v<<8) + pData[0];  pData++;",
          "426:           case 2:  v = (v<<8) + pData[0];  pData++;",
          "427:         }",
          "429:         if( eType==7 ){",
          "430:           double r;",
          "431:           memcpy(&r, &v, sizeof(r));",
          "432:           sqlite3_result_double(pCtx, r);",
          "433:         }else{",
          "434:           sqlite3_result_int64(pCtx, (sqlite3_int64)v);",
          "435:         }",
          "436:         break;",
          "439:       default: {",
          "440:         int n = ((eType-12) / 2);",
          "441:         if( eType % 2 ){",
          "442:           sqlite3_result_text(pCtx, (const char*)pData, n, SQLITE_TRANSIENT);",
          "443:         }else{",
          "444:           sqlite3_result_blob(pCtx, pData, n, SQLITE_TRANSIENT);",
          "445:         }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "728:         }else{",
          "729:           sqlite3_int64 iType;",
          "730:           dbdataGetVarint(pCsr->pHdrPtr, &iType);",
          "732:         }",
          "733:         break;",
          "734:       }",
          "",
          "[Removed Lines]",
          "731:           dbdataValue(ctx, iType, pCsr->pPtr);",
          "",
          "[Added Lines]",
          "740:           dbdataValue(",
          "741:               ctx, iType, pCsr->pPtr, &pCsr->pRec[pCsr->nRec] - pCsr->pPtr",
          "742:           );",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ec9373031d76b34163a45d0ed05e43c0c9d585c8d47aa255f670340673bc7875",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}