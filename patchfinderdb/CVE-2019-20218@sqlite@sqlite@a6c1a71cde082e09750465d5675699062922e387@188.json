{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3b574e4ea972c8eda4ee8ae9a460af229f8a042a",
      "candidate_info": {
        "commit_hash": "3b574e4ea972c8eda4ee8ae9a460af229f8a042a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3b574e4ea972c8eda4ee8ae9a460af229f8a042a",
        "files": [
          "ext/fts3/fts3_snippet.c",
          "ext/fts3/fts3_test.c",
          "ext/fts3/fts3_tokenize_vtab.c",
          "ext/fts3/fts3_tokenizer.c",
          "ext/fts3/fts3_write.c",
          "ext/fts5/fts5_tokenize.c",
          "ext/rtree/geopoly.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Use the 64-bit memory allocator interfaces in extensions, whenever possible.\n\nFossilOrigin-Name: 07ee06fd390bfebebc014b47583d489747b0423bb96c810bed5c605ce0e3be71",
        "before_after_code_files": [
          "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c",
          "ext/fts3/fts3_test.c||ext/fts3/fts3_test.c",
          "ext/fts3/fts3_tokenize_vtab.c||ext/fts3/fts3_tokenize_vtab.c",
          "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c",
          "ext/rtree/geopoly.c||ext/rtree/geopoly.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_snippet.c||ext/fts3/fts3_snippet.c": [
          "File: ext/fts3/fts3_snippet.c -> ext/fts3/fts3_snippet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131: static MatchinfoBuffer *fts3MIBufferNew(int nElem, const char *zMatchinfo){",
          "132:   MatchinfoBuffer *pRet;",
          "137:   if( pRet ){",
          "138:     memset(pRet, 0, nByte);",
          "139:     pRet->aMatchinfo[0] = (u8*)(&pRet->aMatchinfo[1]) - (u8*)pRet;",
          "",
          "[Removed Lines]",
          "133:   int nByte = sizeof(u32) * (2*nElem + 1) + sizeof(MatchinfoBuffer);",
          "134:   int nStr = (int)strlen(zMatchinfo);",
          "136:   pRet = sqlite3_malloc(nByte + nStr+1);",
          "",
          "[Added Lines]",
          "133:   sqlite3_int64 nByte = sizeof(u32) * (2*(sqlite3_int64)nElem + 1)",
          "134:                            + sizeof(MatchinfoBuffer);",
          "135:   sqlite3_int64 nStr = strlen(zMatchinfo);",
          "137:   pRet = sqlite3_malloc64(nByte + nStr+1);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_test.c||ext/fts3/fts3_test.c": [
          "File: ext/fts3/fts3_test.c -> ext/fts3/fts3_test.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "448:   }else{",
          "450:     const char *pToken = p;",
          "452:     while( p<pEnd && testIsTokenChar(*p) ) p++;",
          "456:     if( nToken>pCsr->nBuffer ){",
          "457:       sqlite3_free(pCsr->aBuffer);",
          "459:     }",
          "460:     if( pCsr->aBuffer==0 ){",
          "461:       rc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "451:     int nToken;",
          "453:     nToken = (int)(p-pToken);",
          "458:       pCsr->aBuffer = sqlite3_malloc(nToken);",
          "",
          "[Added Lines]",
          "451:     sqlite3_int64 nToken;",
          "453:     nToken = (sqlite3_int64)(p-pToken);",
          "458:       pCsr->aBuffer = sqlite3_malloc64(nToken);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_tokenize_vtab.c||ext/fts3/fts3_tokenize_vtab.c": [
          "File: ext/fts3/fts3_tokenize_vtab.c -> ext/fts3/fts3_tokenize_vtab.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "346:   if( idxNum==1 ){",
          "347:     const char *zByte = (const char *)sqlite3_value_text(apVal[0]);",
          "348:     int nByte = sqlite3_value_bytes(apVal[0]);",
          "350:     if( pCsr->zInput==0 ){",
          "351:       rc = SQLITE_NOMEM;",
          "352:     }else{",
          "",
          "[Removed Lines]",
          "349:     pCsr->zInput = sqlite3_malloc(nByte+1);",
          "",
          "[Added Lines]",
          "349:     pCsr->zInput = sqlite3_malloc64(nByte+1);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_tokenizer.c||ext/fts3/fts3_tokenizer.c": [
          "File: ext/fts3/fts3_tokenizer.c -> ext/fts3/fts3_tokenizer.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:     int iArg = 0;",
          "197:     z = &z[n+1];",
          "198:     while( z<zEnd && (NULL!=(z = (char *)sqlite3Fts3NextToken(z, &n))) ){",
          "201:       if( !aNew ){",
          "202:         sqlite3_free(zCopy);",
          "203:         sqlite3_free((void *)aArg);",
          "",
          "[Removed Lines]",
          "199:       int nNew = sizeof(char *)*(iArg+1);",
          "200:       char const **aNew = (const char **)sqlite3_realloc((void *)aArg, nNew);",
          "",
          "[Added Lines]",
          "199:       sqlite3_int64 nNew = sizeof(char *)*(iArg+1);",
          "200:       char const **aNew = (const char **)sqlite3_realloc64((void *)aArg, nNew);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1752:   }",
          "1754:   if( nElem>0 ){",
          "1757:     if( !pReader ){",
          "1758:       rc = SQLITE_NOMEM;",
          "1759:     }else{",
          "",
          "[Removed Lines]",
          "1755:     int nByte = sizeof(Fts3SegReader) + (nElem+1)*sizeof(Fts3HashElem *);",
          "1756:     pReader = (Fts3SegReader *)sqlite3_malloc(nByte);",
          "",
          "[Added Lines]",
          "1755:     sqlite3_int64 nByte;",
          "1756:     nByte = sizeof(Fts3SegReader) + (nElem+1)*sizeof(Fts3HashElem *);",
          "1757:     pReader = (Fts3SegReader *)sqlite3_malloc64(nByte);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3369:   if( *pRC ) return;",
          "3371:   if( pBlob==0 ){",
          "3373:     return;",
          "",
          "[Removed Lines]",
          "3370:   pBlob = sqlite3_malloc( 10*p->nColumn );",
          "",
          "[Added Lines]",
          "3371:   pBlob = sqlite3_malloc64( 10*(sqlite3_int64)p->nColumn );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3417:   const int nStat = p->nColumn+2;",
          "3419:   if( *pRC ) return;",
          "3421:   if( a==0 ){",
          "3423:     return;",
          "",
          "[Removed Lines]",
          "3420:   a = sqlite3_malloc( (sizeof(u32)+10)*nStat );",
          "",
          "[Added Lines]",
          "3421:   a = sqlite3_malloc64( (sizeof(u32)+10)*(sqlite3_int64)nStat );",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3538:     }",
          "3540:     if( rc==SQLITE_OK ){",
          "3543:       if( aSz==0 ){",
          "3544:         rc = SQLITE_NOMEM;",
          "3545:       }else{",
          "",
          "[Removed Lines]",
          "3541:       int nByte = sizeof(u32) * (p->nColumn+1)*3;",
          "3542:       aSz = (u32 *)sqlite3_malloc(nByte);",
          "",
          "[Added Lines]",
          "3542:       sqlite3_int64 nByte = sizeof(u32) * ((sqlite3_int64)p->nColumn+1)*3;",
          "3543:       aSz = (u32 *)sqlite3_malloc64(nByte);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3605: ){",
          "3611:   memset(pCsr, 0, sizeof(*pCsr));",
          "3612:   nByte = sizeof(Fts3SegReader *) * nSeg;",
          "3615:   if( pCsr->apSegment==0 ){",
          "3616:     rc = SQLITE_NOMEM;",
          "",
          "[Removed Lines]",
          "3613:   pCsr->apSegment = (Fts3SegReader **)sqlite3_malloc(nByte);",
          "",
          "[Added Lines]",
          "3614:   pCsr->apSegment = (Fts3SegReader **)sqlite3_malloc64(nByte);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5590:   }",
          "5594:   if( aSzDel==0 ){",
          "5595:     rc = SQLITE_NOMEM;",
          "5596:     goto update_out;",
          "",
          "[Removed Lines]",
          "5593:   aSzDel = sqlite3_malloc( sizeof(aSzDel[0])*(p->nColumn+1)*2 );",
          "",
          "[Added Lines]",
          "5594:   aSzDel = sqlite3_malloc64(sizeof(aSzDel[0])*((sqlite3_int64)p->nColumn+1)*2);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_tokenize.c||ext/fts5/fts5_tokenize.c": [
          "File: ext/fts5/fts5_tokenize.c -> ext/fts5/fts5_tokenize.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "370:       p->eRemoveDiacritic = FTS5_REMOVE_DIACRITICS_SIMPLE;",
          "371:       p->nFold = 64;",
          "373:       if( p->aFold==0 ){",
          "374:         rc = SQLITE_NOMEM;",
          "375:       }",
          "",
          "[Removed Lines]",
          "372:       p->aFold = sqlite3_malloc(p->nFold * sizeof(char));",
          "",
          "[Added Lines]",
          "372:       p->aFold = sqlite3_malloc64(p->nFold * sizeof(char));",
          "",
          "---------------"
        ],
        "ext/rtree/geopoly.c||ext/rtree/geopoly.c": [
          "File: ext/rtree/geopoly.c -> ext/rtree/geopoly.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "269:       GeoPoly *pOut;",
          "270:       int x = 1;",
          "273:       x = 1;",
          "274:       if( pOut==0 ) goto parse_json_err;",
          "275:       pOut->nVertex = s.nVertex;",
          "",
          "[Removed Lines]",
          "272:       pOut = sqlite3_malloc64( GEOPOLY_SZ(s.nVertex) );",
          "",
          "[Added Lines]",
          "272:       pOut = sqlite3_malloc64( GEOPOLY_SZ((sqlite3_int64)s.nVertex) );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "655:     if( pRc ) *pRc = SQLITE_OK;",
          "656:     if( aCoord==0 ){",
          "657:       geopolyBboxFill:",
          "659:       if( pOut==0 ){",
          "660:         sqlite3_free(p);",
          "661:         if( context ) sqlite3_result_error_nomem(context);",
          "",
          "[Removed Lines]",
          "658:       pOut = sqlite3_realloc(p, GEOPOLY_SZ(4));",
          "",
          "[Added Lines]",
          "658:       pOut = sqlite3_realloc64(p, GEOPOLY_SZ(4));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1053: static int geopolyOverlap(GeoPoly *p1, GeoPoly *p2){",
          "1055:   GeoOverlap *p;",
          "1057:   GeoEvent *pThisEvent;",
          "1058:   double rX;",
          "1059:   int rc = 0;",
          "",
          "[Removed Lines]",
          "1054:   int nVertex = p1->nVertex + p2->nVertex + 2;",
          "1056:   int nByte;",
          "",
          "[Added Lines]",
          "1054:   sqlite3_int64 nVertex = p1->nVertex + p2->nVertex + 2;",
          "1056:   sqlite3_int64 nByte;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1065:   nByte = sizeof(GeoEvent)*nVertex*2",
          "1066:            + sizeof(GeoSegment)*nVertex",
          "1067:            + sizeof(GeoOverlap);",
          "1069:   if( p==0 ) return -1;",
          "1070:   p->aEvent = (GeoEvent*)&p[1];",
          "1071:   p->aSegment = (GeoSegment*)&p->aEvent[nVertex*2];",
          "",
          "[Removed Lines]",
          "1068:   p = sqlite3_malloc( nByte );",
          "",
          "[Added Lines]",
          "1068:   p = sqlite3_malloc64( nByte );",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1233:   sqlite3_vtab_config(db, SQLITE_VTAB_CONSTRAINT_SUPPORT, 1);",
          "1239:   if( !pRtree ){",
          "1240:     return SQLITE_NOMEM;",
          "1241:   }",
          "",
          "[Removed Lines]",
          "1236:   nDb = (int)strlen(argv[1]);",
          "1237:   nName = (int)strlen(argv[2]);",
          "1238:   pRtree = (Rtree *)sqlite3_malloc(sizeof(Rtree)+nDb+nName+2);",
          "",
          "[Added Lines]",
          "1236:   nDb = strlen(argv[1]);",
          "1237:   nName = strlen(argv[2]);",
          "1238:   pRtree = (Rtree *)sqlite3_malloc64(sizeof(Rtree)+nDb+nName+2);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0b6ae032c28e7fe34d81d1769f6e2901addbd1b95cd9a255dcef274061fb0164",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "936ade4dba52cd4e69324442ef4a81e87c286dd5",
      "candidate_info": {
        "commit_hash": "936ade4dba52cd4e69324442ef4a81e87c286dd5",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/936ade4dba52cd4e69324442ef4a81e87c286dd5",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeaux.c"
        ],
        "message": "Change a integer variable in sqlite3VdbeRecordUnpack() to unsigned in order to avoid any possibility of an integer overflow.\n\nFossilOrigin-Name: 1b536f6fd8d58800042f130842f0586aaa357841ee0d1b690a9815c865d50826",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 65ad6c55f1ba9bc2f75afffa3adaf19f145fad7ac9a00ccce6372e9a2cc4341b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3795: ){",
          "3796:   const unsigned char *aKey = (const unsigned char *)pKey;",
          "3800:   u32 szHdr;",
          "",
          "[Removed Lines]",
          "3797:   int d;",
          "",
          "[Added Lines]",
          "3797:   u32 d;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5281864f0ca2637ed0d92913709a244046c239a2",
      "candidate_info": {
        "commit_hash": "5281864f0ca2637ed0d92913709a244046c239a2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/5281864f0ca2637ed0d92913709a244046c239a2",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "test/json105.test"
        ],
        "message": "Extend the json-path mechanism with array indexes of the form \"#\" or \"#-n\" for some positive number \"n\", to reference the end of an array.\n\nFossilOrigin-Name: 35ed68a651f4cf8740597433b0f1c3b345841868022e0904e9f342840ba0e502",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "test/json105.test||test/json105.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1176:       }",
          "1177:       return pNode;",
          "1178:     }",
          "1181:     i = 0;",
          "1182:     j = 1;",
          "1183:     while( safe_isdigit(zPath[j]) ){",
          "1184:       i = i*10 + zPath[j] - '0';",
          "1185:       j++;",
          "1186:     }",
          "1190:     }",
          "1191:     zPath += j + 1;",
          "1192:     j = 1;",
          "1193:     for(;;){",
          "",
          "[Removed Lines]",
          "1179:   }else if( zPath[0]=='[' && safe_isdigit(zPath[1]) ){",
          "1180:     if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "1187:     if( zPath[j]!=']' ){",
          "1189:       return 0;",
          "",
          "[Added Lines]",
          "1179:   }else if( zPath[0]=='[' ){",
          "1186:     if( j<2 || zPath[j]!=']' ){",
          "1187:       if( zPath[1]=='#' ){",
          "1188:         JsonNode *pBase = pRoot;",
          "1189:         int iBase = iRoot;",
          "1190:         if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "1191:         for(;;){",
          "1192:           while( j<=pBase->n ){",
          "1193:             if( (pBase[j].jnFlags & JNODE_REMOVE)==0 ) i++;",
          "1194:             j += jsonNodeSize(&pBase[j]);",
          "1195:           }",
          "1196:           if( (pBase->jnFlags & JNODE_APPEND)==0 ) break;",
          "1197:           iBase += pBase->u.iAppend;",
          "1198:           pBase = &pParse->aNode[iBase];",
          "1199:           j = 1;",
          "1200:         }",
          "1201:         j = 2;",
          "1202:         if( zPath[2]=='-' && safe_isdigit(zPath[3]) ){",
          "1203:           unsigned int x = 0;",
          "1204:           j = 3;",
          "1205:           do{",
          "1206:             x = x*10 + zPath[j] - '0';",
          "1207:             j++;",
          "1208:           }while( safe_isdigit(zPath[j]) );",
          "1209:           if( x>i ) return 0;",
          "1210:           i -= x;",
          "1211:         }",
          "1212:         if( zPath[j]!=']' ){",
          "1214:           return 0;",
          "1215:         }",
          "1216:       }else{",
          "1218:         return 0;",
          "1219:       }",
          "1221:     if( pRoot->eType!=JSON_ARRAY ) return 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 34343c4b0657767f2676a2a9feb670cf000824e3eadfb1a6d87b57404191d8f9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/json105.test||test/json105.test": [
          "File: test/json105.test -> test/json105.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-11-22",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements tests for \"[#]\" extension to json-path",
          "12: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set testprefix json104",
          "18: ifcapable !json1 {",
          "19:   finish_test",
          "20:   return",
          "21: }",
          "23: # This is the example from pages 2 and 3 of RFC-7396",
          "24: db eval {",
          "25:   CREATE TABLE t1(j);",
          "26:   INSERT INTO t1(j) VALUES('{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}');",
          "27: }",
          "28: proc json_extract_test {testnum path result} {",
          "29:   do_execsql_test json105-1.$testnum \"SELECT quote(json_extract(j,$path)) FROM t1\" $result",
          "30: }",
          "31: json_extract_test 10 {'$.b[#]'}   NULL",
          "32: json_extract_test 20 {'$.b[#-1]'} 4",
          "33: json_extract_test 30 {'$.b[#-2]'} {'[2,3]'}",
          "34: json_extract_test 31 {'$.b[#-02]'} {'[2,3]'}",
          "35: json_extract_test 40 {'$.b[#-3]'} 1",
          "36: json_extract_test 50 {'$.b[#-4]'} NULL",
          "37: json_extract_test 60 {'$.b[#-2][#-1]'} 3",
          "38: json_extract_test 70 {'$.b[0]','$.b[#-1]'} {'[1,4]'}",
          "40: json_extract_test 100 {'$.a[#-1]'} NULL",
          "41: json_extract_test 110 {'$.b[#-000001]'} 4",
          "43: proc json_remove_test {testnum path result} {",
          "44:   do_execsql_test json105-2.$testnum \"SELECT quote(json_remove(j,$path)) FROM t1\" $result",
          "45: }",
          "46: json_remove_test 10 {'$.b[#]'}    {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "47: json_remove_test 20 {'$.b[#-0]'}  {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "48: json_remove_test 30 {'$.b[#-1]'}  {'{\"a\":1,\"b\":[1,[2,3]],\"c\":99}'}",
          "49: json_remove_test 40 {'$.b[#-2]'}  {'{\"a\":1,\"b\":[1,4],\"c\":99}'}",
          "50: json_remove_test 50 {'$.b[#-3]'}  {'{\"a\":1,\"b\":[[2,3],4],\"c\":99}'}",
          "51: json_remove_test 60 {'$.b[#-4]'}  {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "52: json_remove_test 70 {'$.b[#-2][#-1]'}  {'{\"a\":1,\"b\":[1,[2],4],\"c\":99}'}",
          "54: json_remove_test 100 {'$.b[0]','$.b[#-1]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "55: json_remove_test 110 {'$.b[#-1]','$.b[0]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "56: json_remove_test 120 {'$.b[#-1]','$.b[#-2]'} {'{\"a\":1,\"b\":[[2,3]],\"c\":99}'}",
          "57: json_remove_test 130 {'$.b[#-1]','$.b[#-1]'} {'{\"a\":1,\"b\":[1],\"c\":99}'}",
          "58: json_remove_test 140 {'$.b[#-2]','$.b[#-1]'} {'{\"a\":1,\"b\":[1],\"c\":99}'}",
          "60: proc json_insert_test {testnum x result} {",
          "61:   do_execsql_test json105-3.$testnum \"SELECT quote(json_insert(j,$x)) FROM t1\" $result",
          "62: }",
          "63: json_insert_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\"],\"c\":99}'}",
          "64: json_insert_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4],\"c\":99}'}",
          "65: json_insert_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "66:      {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4,\"BBB\"],\"c\":99}'}",
          "67: json_insert_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "68:      {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\",\"BBB\"],\"c\":99}'}",
          "70: proc json_set_test {testnum x result} {",
          "71:   do_execsql_test json105-4.$testnum \"SELECT quote(json_set(j,$x)) FROM t1\" $result",
          "72: }",
          "73: json_set_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\"],\"c\":99}'}",
          "74: json_set_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4],\"c\":99}'}",
          "75: json_set_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "76:      {'{\"a\":1,\"b\":[1,[2,3,\"AAA\"],4,\"BBB\"],\"c\":99}'}",
          "77: json_set_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "78:      {'{\"a\":1,\"b\":[1,[2,3],4,\"AAA\",\"BBB\"],\"c\":99}'}",
          "79: json_set_test 50 {'$.b[#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],\"AAA\"],\"c\":99}'}",
          "80: json_set_test 60 {'$.b[1][#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,\"AAA\"],4],\"c\":99}'}",
          "81: json_set_test 70 {'$.b[1][#-1]','AAA','$.b[#-1]','BBB'} \\",
          "82:      {'{\"a\":1,\"b\":[1,[2,\"AAA\"],\"BBB\"],\"c\":99}'}",
          "83: json_set_test 80 {'$.b[#-1]','AAA','$.b[#-1]','BBB'} \\",
          "84:      {'{\"a\":1,\"b\":[1,[2,3],\"BBB\"],\"c\":99}'}",
          "86: proc json_replace_test {testnum x result} {",
          "87:   do_execsql_test json105-5.$testnum \"SELECT quote(json_replace(j,$x)) FROM t1\" $result",
          "88: }",
          "89: json_replace_test 10 {'$.b[#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "90: json_replace_test 20 {'$.b[1][#]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "91: json_replace_test 30 {'$.b[1][#]','AAA','$.b[#]','BBB'} \\",
          "92:      {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "93: json_replace_test 40 {'$.b[#]','AAA','$.b[#]','BBB'} \\",
          "94:      {'{\"a\":1,\"b\":[1,[2,3],4],\"c\":99}'}",
          "95: json_replace_test 50 {'$.b[#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,3],\"AAA\"],\"c\":99}'}",
          "96: json_replace_test 60 {'$.b[1][#-1]','AAA'} {'{\"a\":1,\"b\":[1,[2,\"AAA\"],4],\"c\":99}'}",
          "97: json_replace_test 70 {'$.b[1][#-1]','AAA','$.b[#-1]','BBB'} \\",
          "98:      {'{\"a\":1,\"b\":[1,[2,\"AAA\"],\"BBB\"],\"c\":99}'}",
          "99: json_replace_test 80 {'$.b[#-1]','AAA','$.b[#-1]','BBB'} \\",
          "100:      {'{\"a\":1,\"b\":[1,[2,3],\"BBB\"],\"c\":99}'}",
          "102: do_catchsql_test json105-6.10 {",
          "103:   SELECT json_extract(j, '$.b[#-]') FROM t1;",
          "104: } {1 {JSON path error near '[#-]'}}",
          "105: do_catchsql_test json105-6.20 {",
          "106:   SELECT json_extract(j, '$.b[#9]') FROM t1;",
          "107: } {1 {JSON path error near '[#9]'}}",
          "108: do_catchsql_test json105-6.30 {",
          "109:   SELECT json_extract(j, '$.b[#+2]') FROM t1;",
          "110: } {1 {JSON path error near '[#+2]'}}",
          "111: do_catchsql_test json105-6.40 {",
          "112:   SELECT json_extract(j, '$.b[#-1') FROM t1;",
          "113: } {1 {JSON path error near '[#-1'}}",
          "114: do_catchsql_test json105-6.50 {",
          "115:   SELECT json_extract(j, '$.b[#-1x]') FROM t1;",
          "116: } {1 {JSON path error near '[#-1x]'}}",
          "118: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e80834f6ffb2e44cc6930885c60d517468828a90",
      "candidate_info": {
        "commit_hash": "e80834f6ffb2e44cc6930885c60d517468828a90",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e80834f6ffb2e44cc6930885c60d517468828a90",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix another problem in fts5 caused by a corrupt schema record.\n\nFossilOrigin-Name: ff45f9dd69fe1e1c7875e5bb73ac3dde2a31746475d3765cda9233f8e06e26ca",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "861:   i += fts5GetVarint32(&pData[i], nLevel);",
          "862:   i += fts5GetVarint32(&pData[i], nSegment);",
          "863:   nByte = (",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "863:   if( nLevel>FTS5_MAX_SEGMENT || nSegment>FTS5_MAX_SEGMENT ){",
          "864:     return FTS5_CORRUPT;",
          "865:   }",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1042: INSERT INTO t1(t1) VALUES('integrity-check');",
          "1043: } {1 {vtable constructor failed: t1}}",
          "1045: sqlite3_fts5_may_be_corrupt 0",
          "1046: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1045: #--------------------------------------------------------------------------",
          "1046: reset_db",
          "1047: do_test 17.0 {",
          "1048:   sqlite3 db {}",
          "1049:   db deserialize [decode_hexdb {",
          "1050: | size 28672 pagesize 4096 filename c18.db",
          "1051: | page 1 offset 0",
          "1052: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "1053: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "1054: |     32: 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00   ................",
          "1055: |     48: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00   ................",
          "1056: |     96: 00 00 00 00 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ...............m",
          "1057: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "1058: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "1059: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "1060: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "1061: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "1062: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "1063: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "1064: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "1065: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "1066: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "1067: |   3680: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "1068: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "1069: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "1070: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "1071: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "1072: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "1073: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "1074: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "1075: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "1076: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "1077: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "1078: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "1079: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "1080: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "1081: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "1082: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "1083: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "1084: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "1085: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "1086: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "1087: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "1088: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "1089: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "1090: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "1091: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "1092: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "1093: | page 2 offset 4096",
          "1094: |      0: 0d 00 00 00 03 0f bd 00 0f e8 0f ef 0f bd 00 00   ................",
          "1095: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 24 84 80   .............$..",
          "1096: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "1097: |   4048: 63 6b 01 02 02 04 02 66 74 00 02 22 04 04 6e 64   ck.....ft.....nd",
          "1098: |   4064: 6f 6e 03 02 02 04 0a 07 05 01 03 00 10 03 03 0f   on..............",
          "1099: |   4080: 0a 03 00 24 00 00 0a aa aa aa aa aa aa aa aa aa   ...$............",
          "1100: | page 3 offset 8192",
          "1101: |      0: aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa   ................",
          "1102: |     16: aa aa aa aa aa aa aa aa 00 00 10 10 10 00 10 10   ................",
          "1103: |     32: 10 10 a0 00 00 00 10 ff a0 00 ff 52 05 64 95 25   ...........R.d.%",
          "1104: |     48: 45 54 14 c2 05 44 14 24 c4 52 07 43 12 05 55 34   ET...D.$.R.C..U4",
          "1105: |     64: 94 e4 72 06 67 47 33 52 86 36 f6 e7 46 56 e7 42   ..r.gG3R.6..FV.B",
          "1106: |     80: 90 d0 00 00 00 30 fb d0 00 fe 80 fe f0 fb 00 00   .....0..........",
          "1107: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "1108: | page 4 offset 12288",
          "1109: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 00 00   ................",
          "1110: |   4064: 0a 03 03 00 1b 61 62 61 6e 64 6f 6e 08 02 03 00   .....abandon....",
          "1111: |   4080: 17 61 62 61 66 74 08 01 03 00 17 61 62 61 63 6b   .abaft.....aback",
          "1112: | page 5 offset 16384",
          "1113: |      0: 0d 00 00 00 03 0f ee 00 0f fa 0f f4 0f ee 00 00   ................",
          "1114: |   4064: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03   ................",
          "1115: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "1116: | page 6 offset 20480",
          "1117: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "1118: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "1119: | page 7 offset 24576",
          "1120: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "1121: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "1122: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "1123: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "1124: | end c18.db",
          "1125: }]} {}",
          "1127: do_catchsql_test 17.1 {",
          "1128:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "1129: } {1 {vtable constructor failed: t1}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 29a00a05dd40ff59be340969e1aca4fee41e092f2faa1cea85a3448265a83c2c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ae144a1c9fc092e8756f66cd8d60b80dbbd1e010",
      "candidate_info": {
        "commit_hash": "ae144a1c9fc092e8756f66cd8d60b80dbbd1e010",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ae144a1c9fc092e8756f66cd8d60b80dbbd1e010",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/index6.test"
        ],
        "message": "The expression \"(X IS FALSE) IN (FALSE)\" does not imply that X is NOT NULL. Ticket [f8f472cbc77ba9c9]\n\nFossilOrigin-Name: dd66134817ecbda01c59a05ad0d6ac44bee700ab10cd2119c869dd69af293fe2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 057fb8b1809b8b9c8fff0fd0804153b9644f0545c23c6ddc4758bda3381094b9",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4995:       if( seenNot && ExprHasProperty(p, EP_xIsSelect) ) return 0;",
          "4996:       assert( ExprHasProperty(p,EP_xIsSelect)",
          "4997:            || (p->x.pList!=0 && p->x.pList->nExpr>0) );",
          "4999:     }",
          "5000:     case TK_BETWEEN: {",
          "5001:       ExprList *pList = p->x.pList;",
          "",
          "[Removed Lines]",
          "4998:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "",
          "[Added Lines]",
          "4998:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, 1);",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "440: # 2019-08-30",
          "441: # Ticket https://www.sqlite.org/src/info/a6408d42b9f44462",
          "442: # Ticket https://www.sqlite.org/src/info/fba33c8b1df6a915",
          "443: #",
          "444: do_execsql_test index6-15.1 {",
          "445:   DROP TABLE t0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "443: # https://sqlite.org/src/info/bac716244fddac1fe841",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457: do_execsql_test index6-15.4 {",
          "458:   SELECT 1 FROM t0 WHERE FALSE BETWEEN FALSE AND (t0.c0 IS FALSE);",
          "459: } {1}",
          "461: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "461: do_execsql_test index6-15.5 {",
          "462:   SELECT 1 FROM t0 WHERE (c0 IS FALSE) IN (FALSE);",
          "463: } {1}",
          "",
          "---------------"
        ]
      }
    }
  ]
}