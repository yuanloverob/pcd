{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "8d11aacb79472009189c35e8953d0fa316bfd202",
      "candidate_info": {
        "commit_hash": "8d11aacb79472009189c35e8953d0fa316bfd202",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/8d11aacb79472009189c35e8953d0fa316bfd202",
        "files": [
          "Makefile.am",
          "Makefile.mingw",
          "include/uv-threadpool.h",
          "include/uv-unix.h",
          "include/uv-win.h",
          "src/threadpool.c",
          "src/unix/internal.h",
          "src/unix/threadpool.c",
          "src/uv-common.h",
          "src/win/core.c",
          "src/win/fs.c",
          "src/win/getaddrinfo.c",
          "src/win/getnameinfo.c",
          "src/win/internal.h",
          "src/win/req-inl.h",
          "src/win/threadpool.c",
          "uv.gyp"
        ],
        "message": "unix, windows: use the same threadpool implementation",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "Makefile.mingw||Makefile.mingw",
          "include/uv-threadpool.h||include/uv-threadpool.h",
          "include/uv-unix.h||include/uv-unix.h",
          "include/uv-win.h||include/uv-win.h",
          "src/unix/threadpool.c||src/threadpool.c",
          "src/unix/internal.h||src/unix/internal.h",
          "src/uv-common.h||src/uv-common.h",
          "src/win/core.c||src/win/core.c",
          "src/win/fs.c||src/win/fs.c",
          "src/win/getaddrinfo.c||src/win/getaddrinfo.c",
          "src/win/getnameinfo.c||src/win/getnameinfo.c",
          "src/win/internal.h||src/win/internal.h",
          "src/win/req-inl.h||src/win/req-inl.h",
          "src/win/threadpool.c||src/win/threadpool.c",
          "uv.gyp||uv.gyp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: AM_CPPFLAGS = -I$(top_srcdir)/include \\",
          "18:               -I$(top_srcdir)/src",
          "22: CLEANFILES =",
          "",
          "[Removed Lines]",
          "20: include_HEADERS=include/uv.h include/uv-errno.h include/uv-version.h",
          "",
          "[Added Lines]",
          "20: include_HEADERS=include/uv.h include/uv-errno.h include/uv-threadpool.h include/uv-version.h",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:                    src/heap-inl.h \\",
          "29:                    src/inet.c \\",
          "30:                    src/queue.h \\",
          "31:                    src/uv-common.c \\",
          "32:                    src/uv-common.h \\",
          "33:                    src/version.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "31:                    src/threadpool.c \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "67:                     src/win/stream-inl.h \\",
          "68:                     src/win/tcp.c \\",
          "69:                     src/win/thread.c \\",
          "71:                     src/win/timer.c \\",
          "72:                     src/win/tty.c \\",
          "73:                     src/win/udp.c \\",
          "",
          "[Removed Lines]",
          "70:                     src/win/threadpool.c \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "99:                    src/unix/stream.c \\",
          "100:                    src/unix/tcp.c \\",
          "101:                    src/unix/thread.c \\",
          "103:                    src/unix/timer.c \\",
          "104:                    src/unix/tty.c \\",
          "105:                    src/unix/udp.c",
          "",
          "[Removed Lines]",
          "102:                    src/unix/threadpool.c \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Makefile.mingw||Makefile.mingw": [
          "File: Makefile.mingw -> Makefile.mingw",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: INCLUDES = include/stdint-msvc2008.h \\",
          "27:            include/tree.h \\",
          "28:            include/uv-errno.h \\",
          "29:            include/uv-version.h \\",
          "30:            include/uv-win.h \\",
          "31:            include/uv.h \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:            include/uv-threadpool.h \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "43: OBJS = src/fs-poll.o \\",
          "44:        src/inet.o \\",
          "45:        src/uv-common.o \\",
          "46:        src/version.o \\",
          "47:        src/win/async.o \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46:        src/threadpool.o \\",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "63:        src/win/stream.o \\",
          "64:        src/win/tcp.o \\",
          "65:        src/win/thread.o \\",
          "67:        src/win/timer.o \\",
          "68:        src/win/tty.o \\",
          "69:        src/win/udp.o \\",
          "",
          "[Removed Lines]",
          "66:        src/win/threadpool.o \\",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/uv-threadpool.h||include/uv-threadpool.h": [
          "File: include/uv-threadpool.h -> include/uv-threadpool.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: #ifndef UV_THREADPOOL_H_",
          "28: #define UV_THREADPOOL_H_",
          "30: struct uv__work {",
          "31:   void (*work)(struct uv__work *w);",
          "32:   void (*done)(struct uv__work *w, int status);",
          "33:   struct uv_loop_s* loop;",
          "34:   void* wq[2];",
          "35: };",
          "",
          "---------------"
        ],
        "include/uv-unix.h||include/uv-unix.h": [
          "File: include/uv-unix.h -> include/uv-unix.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: #endif",
          "43: #include <signal.h>",
          "45: #if defined(__linux__)",
          "46: # include \"uv-linux.h\"",
          "47: #elif defined(__sun)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: #include \"uv-threadpool.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:   int wfd;",
          "97: };",
          "106: #ifndef UV_PLATFORM_SEM_T",
          "107: # define UV_PLATFORM_SEM_T sem_t",
          "108: #endif",
          "",
          "[Removed Lines]",
          "99: struct uv__work {",
          "100:   void (*work)(struct uv__work *w);",
          "101:   void (*done)(struct uv__work *w, int status);",
          "102:   struct uv_loop_s* loop;",
          "103:   void* wq[2];",
          "104: };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "include/uv-win.h||include/uv-win.h": [
          "File: include/uv-win.h -> include/uv-win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #endif",
          "47: #include \"tree.h\"",
          "49: #define MAX_PIPENAME_LEN 256",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48: #include \"uv-threadpool.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "308:   unsigned int active_udp_streams;                                            \\",
          "312: #define UV_REQ_TYPE_PRIVATE                                                   \\",
          "",
          "[Removed Lines]",
          "310:   uint64_t timer_counter;",
          "",
          "[Added Lines]",
          "311:   uint64_t timer_counter;                                                     \\",
          "313:   void* wq[2];                                                                \\",
          "314:   uv_mutex_t wq_mutex;                                                        \\",
          "315:   uv_async_t wq_async;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "520:   unsigned int flags;",
          "522: #define UV_GETADDRINFO_PRIVATE_FIELDS                                         \\",
          "523:   uv_getaddrinfo_cb getaddrinfo_cb;                                           \\",
          "524:   void* alloc;                                                                \\",
          "525:   WCHAR* node;                                                                \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "528:   struct uv__work work_req;                                                   \\",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "529:   int retcode;",
          "531: #define UV_GETNAMEINFO_PRIVATE_FIELDS                                         \\",
          "532:   uv_getnameinfo_cb getnameinfo_cb;                                           \\",
          "533:   struct sockaddr_storage storage;                                            \\",
          "534:   int flags;                                                                  \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "538:   struct uv__work work_req;                                                   \\",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "547:   volatile char exit_cb_pending;",
          "549: #define UV_FS_PRIVATE_FIELDS                                                  \\",
          "550:   int flags;                                                                  \\",
          "551:   DWORD sys_errno_;                                                           \\",
          "552:   union {                                                                     \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "557:   struct uv__work work_req;                                                   \\",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "572:   };",
          "574: #define UV_WORK_PRIVATE_FIELDS                                                \\",
          "576: #define UV_FS_EVENT_PRIVATE_FIELDS                                            \\",
          "577:   struct uv_fs_event_req_s {                                                  \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "583:   struct uv__work work_req;",
          "",
          "---------------"
        ],
        "src/unix/threadpool.c||src/threadpool.c": [
          "File: src/unix/threadpool.c -> src/threadpool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "23: #include <stdlib.h>",
          "25: #define MAX_THREADPOOL_SIZE 128",
          "",
          "[Removed Lines]",
          "22: #include \"internal.h\"",
          "",
          "[Added Lines]",
          "22: #include \"uv-common.h\"",
          "24: #if !defined(_WIN32)",
          "25: # include \"unix/internal.h\"",
          "26: #else",
          "27: # include \"win/req-inl.h\"",
          "29: static void uv__req_init(uv_loop_t* loop,",
          "30:                          uv_req_t* req,",
          "31:                          uv_req_type type) {",
          "32:   uv_req_init(loop, req);",
          "33:   req->type = type;",
          "34:   uv__req_register(loop, req);",
          "35: }",
          "36: # define uv__req_init(loop, req, type) \\",
          "37:     uv__req_init((loop), (uv_req_t*)(req), (type))",
          "38: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91: }",
          "94: static void init_once(void) {",
          "95:   unsigned int i;",
          "96:   const char* val;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "111: static void cleanup(void) {",
          "112:   unsigned int i;",
          "114:   if (initialized == 0)",
          "115:     return;",
          "117:   post(&exit_message);",
          "119:   for (i = 0; i < nthreads; i++)",
          "120:     if (uv_thread_join(threads + i))",
          "121:       abort();",
          "123:   if (threads != default_threads)",
          "124:     free(threads);",
          "126:   uv_mutex_destroy(&mutex);",
          "127:   uv_cond_destroy(&cond);",
          "129:   threads = NULL;",
          "130:   nthreads = 0;",
          "131:   initialized = 0;",
          "132: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "126:       abort();",
          "128:   initialized = 1;",
          "153: }",
          "",
          "[Removed Lines]",
          "129: }",
          "132: UV_DESTRUCTOR(static void cleanup(void)) {",
          "133:   unsigned int i;",
          "135:   if (initialized == 0)",
          "136:     return;",
          "138:   post(&exit_message);",
          "140:   for (i = 0; i < nthreads; i++)",
          "141:     if (uv_thread_join(threads + i))",
          "142:       abort();",
          "144:   if (threads != default_threads)",
          "145:     free(threads);",
          "147:   uv_mutex_destroy(&mutex);",
          "148:   uv_cond_destroy(&cond);",
          "150:   threads = NULL;",
          "151:   nthreads = 0;",
          "152:   initialized = 0;",
          "",
          "[Added Lines]",
          "170:   atexit(cleanup);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "179:   uv_mutex_unlock(&mutex);",
          "181:   if (!cancelled)",
          "184:   w->work = uv__cancelled;",
          "185:   uv_mutex_lock(&loop->wq_mutex);",
          "",
          "[Removed Lines]",
          "182:     return -EBUSY;",
          "",
          "[Added Lines]",
          "200:     return UV_EBUSY;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "213:     QUEUE_REMOVE(q);",
          "215:     w = container_of(q, struct uv__work, wq);",
          "217:     w->done(w, err);",
          "218:   }",
          "219: }",
          "",
          "[Removed Lines]",
          "216:     err = (w->work == uv__cancelled) ? -ECANCELED : 0;",
          "",
          "[Added Lines]",
          "234:     err = (w->work == uv__cancelled) ? UV_ECANCELED : 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "244:                   uv_work_cb work_cb,",
          "245:                   uv_after_work_cb after_work_cb) {",
          "246:   if (work_cb == NULL)",
          "249:   uv__req_init(loop, req, UV_WORK);",
          "250:   req->loop = loop;",
          "",
          "[Removed Lines]",
          "247:     return -EINVAL;",
          "",
          "[Added Lines]",
          "265:     return UV_EINVAL;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "277:     wreq = &((uv_work_t*) req)->work_req;",
          "278:     break;",
          "279:   default:",
          "281:   }",
          "283:   return uv__work_cancel(loop, req, wreq);",
          "",
          "[Removed Lines]",
          "280:     return -EINVAL;",
          "",
          "[Added Lines]",
          "298:     return UV_EINVAL;",
          "",
          "---------------"
        ],
        "src/unix/internal.h||src/unix/internal.h": [
          "File: src/unix/internal.h -> src/unix/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "210: void uv__signal_global_once_init(void);",
          "211: void uv__signal_loop_cleanup(uv_loop_t* loop);",
          "221: uint64_t uv__hrtime(uv_clocktype_t type);",
          "222: int uv__kqueue_init(uv_loop_t* loop);",
          "",
          "[Removed Lines]",
          "214: void uv__work_submit(uv_loop_t* loop,",
          "215:                      struct uv__work *w,",
          "216:                      void (*work)(struct uv__work *w),",
          "217:                      void (*done)(struct uv__work *w, int status));",
          "218: void uv__work_done(uv_async_t* handle);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/uv-common.h||src/uv-common.h": [
          "File: src/uv-common.h -> src/uv-common.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "95: #define uv__has_active_reqs(loop)                                             \\",
          "96:   (QUEUE_EMPTY(&(loop)->active_reqs) == 0)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: void uv__work_submit(uv_loop_t* loop,",
          "96:                      struct uv__work *w,",
          "97:                      void (*work)(struct uv__work *w),",
          "98:                      void (*done)(struct uv__work *w, int status));",
          "100: void uv__work_done(uv_async_t* handle);",
          "",
          "---------------"
        ],
        "src/win/core.c||src/win/core.c": [
          "File: src/win/core.c -> src/win/core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:   loop->last_tick_count = 0;",
          "132:   uv_update_time(loop);",
          "134:   QUEUE_INIT(&loop->handle_queue);",
          "135:   QUEUE_INIT(&loop->active_reqs);",
          "136:   loop->active_handles = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:   QUEUE_INIT(&loop->wq);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "157:   loop->timer_counter = 0;",
          "158:   loop->stop_flag = 0;",
          "160:   return 0;",
          "161: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161:   if (uv_mutex_init(&loop->wq_mutex))",
          "162:     abort();",
          "164:   if (uv_async_init(loop, &loop->wq_async, uv__work_done))",
          "165:     abort();",
          "167:   uv__handle_unref(&loop->wq_async);",
          "168:   loop->wq_async.flags |= UV__HANDLE_INTERNAL;",
          "",
          "---------------"
        ],
        "src/win/fs.c||src/win/fs.c": [
          "File: src/win/fs.c -> src/win/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #define QUEUE_FS_TP_JOB(loop, req)                                          \\",
          "46:   do {                                                                      \\",
          "52:     uv__req_register(loop, req);                                            \\",
          "53:   } while (0)",
          "55: #define SET_REQ_RESULT(req, result_value)                                   \\",
          "",
          "[Removed Lines]",
          "47:     if (!QueueUserWorkItem(&uv_fs_thread_proc,                              \\",
          "48:                            req,                                             \\",
          "49:                            WT_EXECUTEDEFAULT)) {                            \\",
          "50:       return uv_translate_sys_error(GetLastError());                        \\",
          "51:     }                                                                       \\",
          "",
          "[Added Lines]",
          "48:     uv__work_submit((loop), &(req)->work_req, uv__fs_work, uv__fs_done);    \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "232:   req->result = 0;",
          "233:   req->ptr = NULL;",
          "234:   req->path = NULL;",
          "240: }",
          "",
          "[Removed Lines]",
          "236:   if (cb != NULL) {",
          "237:     req->cb = cb;",
          "238:     memset(&req->overlapped, 0, sizeof(req->overlapped));",
          "239:   }",
          "",
          "[Added Lines]",
          "231:   req->cb = cb;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1510: }",
          "1518:   assert(req->type == UV_FS);",
          "1520: #define XX(uc, lc)  case UV_FS_##uc: fs__##lc(req); break;",
          "",
          "[Removed Lines]",
          "1513: static DWORD WINAPI uv_fs_thread_proc(void* parameter) {",
          "1514:   uv_fs_t* req = (uv_fs_t*) parameter;",
          "1515:   uv_loop_t* loop = req->loop;",
          "1517:   assert(req != NULL);",
          "",
          "[Added Lines]",
          "1505: static void uv__fs_work(struct uv__work* w) {",
          "1506:   uv_fs_t* req;",
          "1508:   req = container_of(w, uv_fs_t, work_req);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1547:     default:",
          "1548:       assert(!\"bad uv_fs_type\");",
          "1549:   }",
          "1553: }",
          "",
          "[Removed Lines]",
          "1551:   POST_COMPLETION_FOR_REQ(loop, req);",
          "1552:   return 0;",
          "",
          "[Added Lines]",
          "1541: }",
          "1544: static void uv__fs_done(struct uv__work* w, int status) {",
          "1545:   uv_fs_t* req;",
          "1547:   req = container_of(w, uv_fs_t, work_req);",
          "1548:   uv__req_unregister(req->loop, req);",
          "1550:   if (status == UV_ECANCELED) {",
          "1551:     assert(req->result == 0);",
          "1552:     req->result = UV_ECANCELED;",
          "1553:   }",
          "1555:   if (req->cb != NULL)",
          "1556:     req->cb(req);",
          "1557: }",
          "1560: void uv_fs_req_cleanup(uv_fs_t* req) {",
          "1561:   if (req->flags & UV_FS_CLEANEDUP)",
          "1562:     return;",
          "1564:   if (req->flags & UV_FS_FREE_PATHS)",
          "1565:     free(req->pathw);",
          "1567:   if (req->flags & UV_FS_FREE_PTR)",
          "1568:     free(req->ptr);",
          "1570:   req->path = NULL;",
          "1571:   req->pathw = NULL;",
          "1572:   req->new_pathw = NULL;",
          "1573:   req->ptr = NULL;",
          "1575:   req->flags |= UV_FS_CLEANEDUP;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2064:     return req->result;",
          "2065:   }",
          "2066: }",
          "",
          "[Removed Lines]",
          "2069: void uv_process_fs_req(uv_loop_t* loop, uv_fs_t* req) {",
          "2070:   assert(req->cb);",
          "2071:   uv__req_unregister(loop, req);",
          "2072:   req->cb(req);",
          "2073: }",
          "2076: void uv_fs_req_cleanup(uv_fs_t* req) {",
          "2077:   if (req->flags & UV_FS_CLEANEDUP)",
          "2078:     return;",
          "2080:   if (req->flags & UV_FS_FREE_PATHS)",
          "2081:     free(req->pathw);",
          "2083:   if (req->flags & UV_FS_FREE_PTR)",
          "2084:     free(req->ptr);",
          "2086:   req->path = NULL;",
          "2087:   req->pathw = NULL;",
          "2088:   req->new_pathw = NULL;",
          "2089:   req->ptr = NULL;",
          "2091:   req->flags |= UV_FS_CLEANEDUP;",
          "2092: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/win/getaddrinfo.c||src/win/getaddrinfo.c": [
          "File: src/win/getaddrinfo.c -> src/win/getaddrinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define ALIGNED_SIZE(X)     ((((X) + 3) >> 2) << 2)",
          "78: }",
          "",
          "[Removed Lines]",
          "60: static DWORD WINAPI getaddrinfo_thread_proc(void* parameter) {",
          "61:   uv_getaddrinfo_t* req = (uv_getaddrinfo_t*) parameter;",
          "62:   uv_loop_t* loop = req->loop;",
          "63:   int ret;",
          "65:   assert(req != NULL);",
          "68:   ret = GetAddrInfoW(req->node,",
          "69:                      req->service,",
          "70:                      req->hints,",
          "71:                      &req->res);",
          "72:   req->retcode = ret;",
          "75:   POST_COMPLETION_FOR_REQ(loop, req);",
          "77:   return 0;",
          "",
          "[Added Lines]",
          "59: static void uv__getaddrinfo_work(struct uv__work* w) {",
          "60:   uv_getaddrinfo_t* req;",
          "61:   int err;",
          "63:   req = container_of(w, uv_getaddrinfo_t, work_req);",
          "64:   err = GetAddrInfoW(req->node, req->service, req->hints, &req->res);",
          "65:   req->retcode = uv__getaddrinfo_translate_error(err);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "91:   int addrinfo_len = 0;",
          "92:   int name_len = 0;",
          "93:   size_t addrinfo_struct_len = ALIGNED_SIZE(sizeof(struct addrinfo));",
          "",
          "[Removed Lines]",
          "90: void uv_process_getaddrinfo_req(uv_loop_t* loop, uv_getaddrinfo_t* req) {",
          "",
          "[Added Lines]",
          "78: static void uv__getaddrinfo_done(struct uv__work* w, int status) {",
          "79:   uv_getaddrinfo_t* req;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "95:   struct addrinfo* addrinfo_ptr;",
          "96:   char* alloc_ptr = NULL;",
          "97:   char* cur_ptr = NULL;",
          "101:   if (req->alloc != NULL) {",
          "",
          "[Removed Lines]",
          "98:   int err = 0;",
          "",
          "[Added Lines]",
          "88:   req = container_of(w, uv_getaddrinfo_t, work_req);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "103:     req->alloc = NULL;",
          "104:   }",
          "106:   if (req->retcode == 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "96:   if (status == UV_ECANCELED) {",
          "97:     assert(req->retcode == 0);",
          "98:     req->retcode = UV_EAI_CANCELED;",
          "99:     if (req->res != NULL) {",
          "100:         FreeAddrInfoW(req->res);",
          "101:         req->res = NULL;",
          "102:     }",
          "103:     goto complete;",
          "104:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "113:       if (addrinfow_ptr->ai_canonname != NULL) {",
          "114:         name_len = uv_utf16_to_utf8(addrinfow_ptr->ai_canonname, -1, NULL, 0);",
          "115:         if (name_len == 0) {",
          "117:           goto complete;",
          "118:         }",
          "119:         addrinfo_len += ALIGNED_SIZE(name_len);",
          "",
          "[Removed Lines]",
          "116:           err = uv_translate_sys_error(GetLastError());",
          "",
          "[Added Lines]",
          "116:           req->retcode = uv_translate_sys_error(GetLastError());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "178:         }",
          "179:       }",
          "180:     } else {",
          "182:     }",
          "186:   }",
          "",
          "[Removed Lines]",
          "181:       err = UV_EAI_MEMORY;",
          "183:   } else {",
          "185:     err = uv__getaddrinfo_translate_error(req->retcode);",
          "",
          "[Added Lines]",
          "181:       req->retcode = UV_EAI_MEMORY;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "192:   }",
          "194: complete:",
          "199: }",
          "",
          "[Removed Lines]",
          "195:   uv__req_unregister(loop, req);",
          "198:   req->getaddrinfo_cb(req, err, (struct addrinfo*)alloc_ptr);",
          "",
          "[Added Lines]",
          "192:   uv__req_unregister(req->loop, req);",
          "195:   req->getaddrinfo_cb(req, req->retcode, (struct addrinfo*)alloc_ptr);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "246:   req->res = NULL;",
          "247:   req->type = UV_GETADDRINFO;",
          "248:   req->loop = loop;",
          "251:   if (node != NULL) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246:   req->retcode = 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "323:     req->hints = NULL;",
          "324:   }",
          "334:   uv__req_register(loop, req);",
          "",
          "[Removed Lines]",
          "327:   if (QueueUserWorkItem(&getaddrinfo_thread_proc,",
          "328:                         req,",
          "329:                         WT_EXECUTELONGFUNCTION) == 0) {",
          "330:     err = GetLastError();",
          "331:     goto error;",
          "332:   }",
          "",
          "[Added Lines]",
          "324:   uv__work_submit(loop,",
          "325:                   &req->work_req,",
          "326:                   uv__getaddrinfo_work,",
          "327:                   uv__getaddrinfo_done);",
          "",
          "---------------"
        ],
        "src/win/getnameinfo.c||src/win/getnameinfo.c": [
          "File: src/win/getnameinfo.c -> src/win/getnameinfo.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: #include \"req-inl.h\"",
          "35:   WCHAR host[NI_MAXHOST];",
          "36:   WCHAR service[NI_MAXSERV];",
          "37:   int ret = 0;",
          "41:   ret = GetNameInfoW((struct sockaddr*)&req->storage,",
          "42:                      sizeof(req->storage),",
          "43:                      host,",
          "",
          "[Removed Lines]",
          "32: static DWORD WINAPI getnameinfo_thread_proc(void* parameter) {",
          "33:   uv_getnameinfo_t* req = (uv_getnameinfo_t*)parameter;",
          "34:   uv_loop_t* loop = req->loop;",
          "39:   assert(req != NULL);",
          "",
          "[Added Lines]",
          "31: static void uv__getnameinfo_work(struct uv__work* w) {",
          "32:   uv_getnameinfo_t* req;",
          "37:   req = container_of(w, uv_getnameinfo_t, work_req);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "65:                       sizeof(req->service),",
          "66:                       NULL,",
          "67:                       NULL);",
          "73: }",
          "80:   char* host;",
          "81:   char* service;",
          "84:     host = req->host;",
          "85:     service = req->service;",
          "89:   }",
          "92:   req->getnameinfo_cb(req, req->retcode, host, service);",
          "93: }",
          "",
          "[Removed Lines]",
          "70:   POST_COMPLETION_FOR_REQ(loop, req);",
          "72:   return 0;",
          "79: void uv_process_getnameinfo_req(uv_loop_t* loop, uv_getnameinfo_t* req) {",
          "83:   if (req->retcode == 0) {",
          "86:   } else {",
          "87:     host = NULL;",
          "88:     service = NULL;",
          "91:   uv__req_unregister(loop, req);",
          "",
          "[Added Lines]",
          "71: static void uv__getnameinfo_done(struct uv__work* w, int status) {",
          "72:   uv_getnameinfo_t* req;",
          "76:   req = container_of(w, uv_getnameinfo_t, work_req);",
          "77:   uv__req_unregister(req->loop, req);",
          "78:   host = service = NULL;",
          "80:   if (status == UV_ECANCELED) {",
          "81:     assert(req->retcode == 0);",
          "82:     req->retcode = UV_EAI_CANCELED;",
          "83:   } else if (req->retcode == 0) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "119:   }",
          "121:   uv_req_init(loop, (uv_req_t*)req);",
          "123:   req->getnameinfo_cb = getnameinfo_cb;",
          "124:   req->flags = flags;",
          "125:   req->type = UV_GETNAMEINFO;",
          "126:   req->loop = loop;",
          "137:   return 0;",
          "138: }",
          "",
          "[Removed Lines]",
          "129:   if (QueueUserWorkItem(&getnameinfo_thread_proc,",
          "130:                         req,",
          "131:                         WT_EXECUTELONGFUNCTION) == 0) {",
          "132:     return uv_translate_sys_error(GetLastError());",
          "133:   }",
          "135:   uv__req_register(loop, req);",
          "",
          "[Added Lines]",
          "118:   uv__req_register(loop, req);",
          "124:   req->retcode = 0;",
          "126:   uv__work_submit(loop,",
          "127:                   &req->work_req,",
          "128:                   uv__getnameinfo_work,",
          "129:                   uv__getnameinfo_done);",
          "",
          "---------------"
        ],
        "src/win/internal.h||src/win/internal.h": [
          "File: src/win/internal.h -> src/win/internal.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "288: int uv_translate_sys_error(int sys_errno);",
          "306: void uv_fs_init();",
          "",
          "[Removed Lines]",
          "294: void uv_process_getaddrinfo_req(uv_loop_t* loop, uv_getaddrinfo_t* req);",
          "300: void uv_process_getnameinfo_req(uv_loop_t* loop, uv_getnameinfo_t* req);",
          "307: void uv_process_fs_req(uv_loop_t* loop, uv_fs_t* req);",
          "313: void uv_process_work_req(uv_loop_t* loop, uv_work_t* req);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/win/req-inl.h||src/win/req-inl.h": [
          "File: src/win/req-inl.h -> src/win/req-inl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:         uv_process_poll_req(loop, (uv_poll_t*) req->data, req);",
          "196:         break;",
          "206:       case UV_PROCESS_EXIT:",
          "207:         uv_process_proc_exit(loop, (uv_process_t*) req->data);",
          "208:         break;",
          "218:       case UV_FS_EVENT_REQ:",
          "219:         uv_process_fs_event_req(loop, req, (uv_fs_event_t*) req->data);",
          "220:         break;",
          "",
          "[Removed Lines]",
          "198:       case UV_GETADDRINFO:",
          "199:         uv_process_getaddrinfo_req(loop, (uv_getaddrinfo_t*) req);",
          "200:         break;",
          "202:       case UV_GETNAMEINFO:",
          "203:         uv_process_getnameinfo_req(loop, (uv_getnameinfo_t*)req);",
          "204:         break;",
          "210:       case UV_FS:",
          "211:         uv_process_fs_req(loop, (uv_fs_t*) req);",
          "212:         break;",
          "214:       case UV_WORK:",
          "215:         uv_process_work_req(loop, (uv_work_t*) req);",
          "216:         break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/win/threadpool.c||src/win/threadpool.c": [
          "File: src/win/threadpool.c -> src/win/threadpool.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "uv.gyp||uv.gyp": [
          "File: uv.gyp -> uv.gyp",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:         'include/uv.h',",
          "62:         'include/tree.h',",
          "63:         'include/uv-errno.h',",
          "64:         'include/uv-version.h',",
          "65:         'src/fs-poll.c',",
          "66:         'src/heap-inl.h',",
          "67:         'src/inet.c',",
          "68:         'src/queue.h',",
          "69:         'src/uv-common.c',",
          "70:         'src/uv-common.h',",
          "71:         'src/version.c'",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "64:         'include/uv-threadpool.h',",
          "70:         'src/threadpool.c',",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:             'src/win/stream-inl.h',",
          "104:             'src/win/tcp.c',",
          "105:             'src/win/tty.c',",
          "107:             'src/win/timer.c',",
          "108:             'src/win/udp.c',",
          "109:             'src/win/util.c',",
          "",
          "[Removed Lines]",
          "106:             'src/win/threadpool.c',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "154:             'src/unix/stream.c',",
          "155:             'src/unix/tcp.c',",
          "156:             'src/unix/thread.c',",
          "158:             'src/unix/timer.c',",
          "159:             'src/unix/tty.c',",
          "160:             'src/unix/udp.c',",
          "",
          "[Removed Lines]",
          "157:             'src/unix/threadpool.c',",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c39648674c404324c276831fc0ec5c99f30b2fb5",
      "candidate_info": {
        "commit_hash": "c39648674c404324c276831fc0ec5c99f30b2fb5",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/c39648674c404324c276831fc0ec5c99f30b2fb5",
        "files": [
          "src/unix/fs.c",
          "src/unix/signal.c"
        ],
        "message": "unix: appease warning about non-standard `inline`\n\nClang warns about using `inline`, which is not technically allowed in\nC89 mode (libuv compiles with `-std=c89`). It's probably best to leave\nit to the compiler to do the inlining anyway.",
        "before_after_code_files": [
          "src/unix/fs.c||src/unix/fs.c",
          "src/unix/signal.c||src/unix/signal.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/fs.c||src/unix/fs.c": [
          "File: src/unix/fs.c -> src/unix/fs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "497:   return r;",
          "498: }",
          "501:   dst->st_dev = src->st_dev;",
          "502:   dst->st_mode = src->st_mode;",
          "503:   dst->st_nlink = src->st_nlink;",
          "",
          "[Removed Lines]",
          "500: static inline void uv__to_stat(struct stat* src, uv_stat_t* dst) {",
          "",
          "[Added Lines]",
          "500: static void uv__to_stat(struct stat* src, uv_stat_t* dst) {",
          "",
          "---------------"
        ],
        "src/unix/signal.c||src/unix/signal.c": [
          "File: src/unix/signal.c -> src/unix/signal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116: }",
          "121:   uv_signal_t lookup;",
          "122:   uv_signal_t* handle;",
          "",
          "[Removed Lines]",
          "119: inline static uv_signal_t* uv__signal_first_handle(int signum) {",
          "",
          "[Added Lines]",
          "119: static uv_signal_t* uv__signal_first_handle(int signum) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "facf595cad26e5c81e0df29529af1b56ef082734",
      "candidate_info": {
        "commit_hash": "facf595cad26e5c81e0df29529af1b56ef082734",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/facf595cad26e5c81e0df29529af1b56ef082734",
        "files": [
          "configure.ac",
          "m4/libuv-check-flags.m4"
        ],
        "message": "build: add m4 for feature/flag-testing",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "m4/libuv-check-flags.m4||m4/libuv-check-flags.m4"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: AC_CONFIG_MACRO_DIR([m4])",
          "18: m4_include([m4/libuv-extra-automake-flags.m4])",
          "19: m4_include([m4/as_case.m4])",
          "20: AM_INIT_AUTOMAKE([-Wall -Werror foreign subdir-objects] UV_EXTRA_AUTOMAKE_FLAGS)",
          "21: AC_CANONICAL_HOST",
          "22: AC_ENABLE_SHARED",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: m4_include([m4/libuv-check-flags.m4])",
          "",
          "---------------"
        ],
        "m4/libuv-check-flags.m4||m4/libuv-check-flags.m4": [
          "File: m4/libuv-check-flags.m4 -> m4/libuv-check-flags.m4",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: dnl Macros to check the presence of generic (non-typed) symbols.",
          "2: dnl Copyright (c) 2006-2008 Diego Petten\u00c3 <flameeyes gmail com>",
          "3: dnl Copyright (c) 2006-2008 xine project",
          "4: dnl",
          "5: dnl This program is free software; you can redistribute it and/or modify",
          "6: dnl it under the terms of the GNU General Public License as published by",
          "7: dnl the Free Software Foundation; either version 3, or (at your option)",
          "8: dnl any later version.",
          "9: dnl",
          "10: dnl This program is distributed in the hope that it will be useful,",
          "11: dnl but WITHOUT ANY WARRANTY; without even the implied warranty of",
          "12: dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
          "13: dnl GNU General Public License for more details.",
          "14: dnl",
          "15: dnl You should have received a copy of the GNU General Public License",
          "16: dnl along with this program; if not, write to the Free Software",
          "17: dnl Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA",
          "18: dnl 02110-1301, USA.",
          "19: dnl",
          "20: dnl As a special exception, the copyright owners of the",
          "21: dnl macro gives unlimited permission to copy, distribute and modify the",
          "22: dnl configure scripts that are the output of Autoconf when processing the",
          "23: dnl Macro. You need not follow the terms of the GNU General Public",
          "24: dnl License when using or distributing such scripts, even though portions",
          "25: dnl of the text of the Macro appear in them. The GNU General Public",
          "26: dnl License (GPL) does govern all other use of the material that",
          "27: dnl constitutes the Autoconf Macro.",
          "28: dnl",
          "29: dnl This special exception to the GPL applies to versions of the",
          "30: dnl Autoconf Macro released by this project. When you make and",
          "31: dnl distribute a modified version of the Autoconf Macro, you may extend",
          "32: dnl this special exception to the GPL to apply to your modified version as",
          "33: dnl well.",
          "35: dnl Check if the flag is supported by compiler",
          "36: dnl CC_CHECK_CFLAGS_SILENT([FLAG], [ACTION-IF-FOUND],[ACTION-IF-NOT-FOUND])",
          "38: AC_DEFUN([CC_CHECK_CFLAGS_SILENT], [",
          "39:   AC_CACHE_VAL(AS_TR_SH([cc_cv_cflags_$1]),",
          "40:     [ac_save_CFLAGS=\"$CFLAGS\"",
          "41:      CFLAGS=\"$CFLAGS $1\"",
          "42:      AC_COMPILE_IFELSE([AC_LANG_SOURCE([int a;])],",
          "43:        [eval \"AS_TR_SH([cc_cv_cflags_$1])='yes'\"],",
          "44:        [eval \"AS_TR_SH([cc_cv_cflags_$1])='no'\"])",
          "45:      CFLAGS=\"$ac_save_CFLAGS\"",
          "46:     ])",
          "48:   AS_IF([eval test x$]AS_TR_SH([cc_cv_cflags_$1])[ = xyes],",
          "49:     [$2], [$3])",
          "50: ])",
          "52: dnl Check if the flag is supported by compiler (cacheable)",
          "53: dnl CC_CHECK_CFLAGS([FLAG], [ACTION-IF-FOUND],[ACTION-IF-NOT-FOUND])",
          "55: AC_DEFUN([CC_CHECK_CFLAGS], [",
          "56:   AC_CACHE_CHECK([if $CC supports $1 flag],",
          "57:     AS_TR_SH([cc_cv_cflags_$1]),",
          "58:     CC_CHECK_CFLAGS_SILENT([$1]) dnl Don't execute actions here!",
          "59:   )",
          "61:   AS_IF([eval test x$]AS_TR_SH([cc_cv_cflags_$1])[ = xyes],",
          "62:     [$2], [$3])",
          "63: ])",
          "65: dnl CC_CHECK_CFLAG_APPEND(FLAG, [action-if-found], [action-if-not-found])",
          "66: dnl Check for CFLAG and appends them to CFLAGS if supported",
          "67: AC_DEFUN([CC_CHECK_CFLAG_APPEND], [",
          "68:   AC_CACHE_CHECK([if $CC supports $1 flag],",
          "69:     AS_TR_SH([cc_cv_cflags_$1]),",
          "70:     CC_CHECK_CFLAGS_SILENT([$1]) dnl Don't execute actions here!",
          "71:   )",
          "73:   AS_IF([eval test x$]AS_TR_SH([cc_cv_cflags_$1])[ = xyes],",
          "74:     [CFLAGS=\"$CFLAGS $1\"; DEBUG_CFLAGS=\"$DEBUG_CFLAGS $1\"; $2], [$3])",
          "75: ])",
          "77: dnl CC_CHECK_CFLAGS_APPEND([FLAG1 FLAG2], [action-if-found], [action-if-not])",
          "78: AC_DEFUN([CC_CHECK_CFLAGS_APPEND], [",
          "79:   for flag in $1; do",
          "80:     CC_CHECK_CFLAG_APPEND($flag, [$2], [$3])",
          "81:   done",
          "82: ])",
          "84: dnl Check if the flag is supported by linker (cacheable)",
          "85: dnl CC_CHECK_LDFLAGS([FLAG], [ACTION-IF-FOUND],[ACTION-IF-NOT-FOUND])",
          "87: AC_DEFUN([CC_CHECK_LDFLAGS], [",
          "88:   AC_CACHE_CHECK([if $CC supports $1 flag],",
          "89:     AS_TR_SH([cc_cv_ldflags_$1]),",
          "90:     [ac_save_LDFLAGS=\"$LDFLAGS\"",
          "91:      LDFLAGS=\"$LDFLAGS $1\"",
          "92:      AC_LANG_PUSH([C])",
          "93:      AC_LINK_IFELSE([AC_LANG_SOURCE([int main() { return 1; }])],",
          "94:        [eval \"AS_TR_SH([cc_cv_ldflags_$1])='yes'\"],",
          "95:        [eval \"AS_TR_SH([cc_cv_ldflags_$1])=\"])",
          "96:      AC_LANG_POP([C])",
          "97:      LDFLAGS=\"$ac_save_LDFLAGS\"",
          "98:     ])",
          "100:   AS_IF([eval test x$]AS_TR_SH([cc_cv_ldflags_$1])[ = xyes],",
          "101:     [$2], [$3])",
          "102: ])",
          "104: dnl define the LDFLAGS_NOUNDEFINED variable with the correct value for",
          "105: dnl the current linker to avoid undefined references in a shared object.",
          "106: AC_DEFUN([CC_NOUNDEFINED], [",
          "107:   dnl We check $host for which systems to enable this for.",
          "108:   AC_REQUIRE([AC_CANONICAL_HOST])",
          "110:   case $host in",
          "111:      dnl FreeBSD (et al.) does not complete linking for shared objects when pthreads",
          "112:      dnl are requested, as different implementations are present; to avoid problems",
          "113:      dnl use -Wl,-z,defs only for those platform not behaving this way.",
          "116:         dnl First of all check for the --no-undefined variant of GNU ld. This allows",
          "117:         dnl for a much more readable commandline, so that people can understand what",
          "118:         dnl it does without going to look for what the heck -z defs does.",
          "119:         for possible_flags in \"-Wl,--no-undefined\" \"-Wl,-z,defs\"; do",
          "120:           CC_CHECK_LDFLAGS([$possible_flags], [LDFLAGS_NOUNDEFINED=\"$possible_flags\"])",
          "121:    break",
          "122:         done",
          "123:  ;;",
          "124:   esac",
          "126:   AC_SUBST([LDFLAGS_NOUNDEFINED])",
          "127: ])",
          "129: dnl Check for a -Werror flag or equivalent. -Werror is the GCC",
          "130: dnl and ICC flag that tells the compiler to treat all the warnings",
          "131: dnl as fatal. We usually need this option to make sure that some",
          "132: dnl constructs (like attributes) are not simply ignored.",
          "133: dnl",
          "134: dnl Other compilers don't support -Werror per se, but they support",
          "135: dnl an equivalent flag:",
          "136: dnl  - Sun Studio compiler supports -errwarn=%all",
          "137: AC_DEFUN([CC_CHECK_WERROR], [",
          "138:   AC_CACHE_CHECK(",
          "139:     [for $CC way to treat warnings as errors],",
          "140:     [cc_cv_werror],",
          "141:     [CC_CHECK_CFLAGS_SILENT([-Werror], [cc_cv_werror=-Werror],",
          "142:       [CC_CHECK_CFLAGS_SILENT([-errwarn=%all], [cc_cv_werror=-errwarn=%all])])",
          "143:     ])",
          "144: ])",
          "146: AC_DEFUN([CC_CHECK_ATTRIBUTE], [",
          "147:   AC_REQUIRE([CC_CHECK_WERROR])",
          "148:   AC_CACHE_CHECK([if $CC supports __attribute__(( ifelse([$2], , [$1], [$2]) ))],",
          "149:     AS_TR_SH([cc_cv_attribute_$1]),",
          "150:     [ac_save_CFLAGS=\"$CFLAGS\"",
          "151:      CFLAGS=\"$CFLAGS $cc_cv_werror\"",
          "152:      AC_LANG_PUSH([C])",
          "153:      AC_COMPILE_IFELSE([AC_LANG_SOURCE([$3])],",
          "154:        [eval \"AS_TR_SH([cc_cv_attribute_$1])='yes'\"],",
          "155:        [eval \"AS_TR_SH([cc_cv_attribute_$1])='no'\"])",
          "156:      AC_LANG_POP([C])",
          "157:      CFLAGS=\"$ac_save_CFLAGS\"",
          "158:     ])",
          "160:   AS_IF([eval test x$]AS_TR_SH([cc_cv_attribute_$1])[ = xyes],",
          "161:     [AC_DEFINE(",
          "162:        AS_TR_CPP([SUPPORT_ATTRIBUTE_$1]), 1,",
          "163:          [Define this if the compiler supports __attribute__(( ifelse([$2], , [$1], [$2]) ))]",
          "164:          )",
          "165:      $4],",
          "166:     [$5])",
          "167: ])",
          "169: AC_DEFUN([CC_ATTRIBUTE_CONSTRUCTOR], [",
          "170:   CC_CHECK_ATTRIBUTE(",
          "171:     [constructor],,",
          "172:     [void __attribute__((constructor)) ctor() { int a; }],",
          "173:     [$1], [$2])",
          "174: ])",
          "176: AC_DEFUN([CC_ATTRIBUTE_FORMAT], [",
          "177:   CC_CHECK_ATTRIBUTE(",
          "178:     [format], [format(printf, n, n)],",
          "179:     [void __attribute__((format(printf, 1, 2))) printflike(const char *fmt, ...) { fmt = (void *)0; }],",
          "180:     [$1], [$2])",
          "181: ])",
          "183: AC_DEFUN([CC_ATTRIBUTE_FORMAT_ARG], [",
          "184:   CC_CHECK_ATTRIBUTE(",
          "185:     [format_arg], [format_arg(printf)],",
          "186:     [char *__attribute__((format_arg(1))) gettextlike(const char *fmt) { fmt = (void *)0; }],",
          "187:     [$1], [$2])",
          "188: ])",
          "190: AC_DEFUN([CC_ATTRIBUTE_VISIBILITY], [",
          "191:   CC_CHECK_ATTRIBUTE(",
          "192:     [visibility_$1], [visibility(\"$1\")],",
          "193:     [void __attribute__((visibility(\"$1\"))) $1_function() { }],",
          "194:     [$2], [$3])",
          "195: ])",
          "197: AC_DEFUN([CC_ATTRIBUTE_NONNULL], [",
          "198:   CC_CHECK_ATTRIBUTE(",
          "199:     [nonnull], [nonnull()],",
          "200:     [void __attribute__((nonnull())) some_function(void *foo, void *bar) { foo = (void*)0; bar = (void*)0; }],",
          "201:     [$1], [$2])",
          "202: ])",
          "204: AC_DEFUN([CC_ATTRIBUTE_UNUSED], [",
          "205:   CC_CHECK_ATTRIBUTE(",
          "206:     [unused], ,",
          "207:     [void some_function(void *foo, __attribute__((unused)) void *bar);],",
          "208:     [$1], [$2])",
          "209: ])",
          "211: AC_DEFUN([CC_ATTRIBUTE_SENTINEL], [",
          "212:   CC_CHECK_ATTRIBUTE(",
          "213:     [sentinel], ,",
          "214:     [void some_function(void *foo, ...) __attribute__((sentinel));],",
          "215:     [$1], [$2])",
          "216: ])",
          "218: AC_DEFUN([CC_ATTRIBUTE_DEPRECATED], [",
          "219:   CC_CHECK_ATTRIBUTE(",
          "220:     [deprecated], ,",
          "221:     [void some_function(void *foo, ...) __attribute__((deprecated));],",
          "222:     [$1], [$2])",
          "223: ])",
          "225: AC_DEFUN([CC_ATTRIBUTE_ALIAS], [",
          "226:   CC_CHECK_ATTRIBUTE(",
          "227:     [alias], [weak, alias],",
          "228:     [void other_function(void *foo) { }",
          "229:      void some_function(void *foo) __attribute__((weak, alias(\"other_function\")));],",
          "230:     [$1], [$2])",
          "231: ])",
          "233: AC_DEFUN([CC_ATTRIBUTE_MALLOC], [",
          "234:   CC_CHECK_ATTRIBUTE(",
          "235:     [malloc], ,",
          "236:     [void * __attribute__((malloc)) my_alloc(int n);],",
          "237:     [$1], [$2])",
          "238: ])",
          "240: AC_DEFUN([CC_ATTRIBUTE_PACKED], [",
          "241:   CC_CHECK_ATTRIBUTE(",
          "242:     [packed], ,",
          "243:     [struct astructure { char a; int b; long c; void *d; } __attribute__((packed));],",
          "244:     [$1], [$2])",
          "245: ])",
          "247: AC_DEFUN([CC_ATTRIBUTE_CONST], [",
          "248:   CC_CHECK_ATTRIBUTE(",
          "249:     [const], ,",
          "250:     [int __attribute__((const)) twopow(int n) { return 1 << n; } ],",
          "251:     [$1], [$2])",
          "252: ])",
          "254: AC_DEFUN([CC_FLAG_VISIBILITY], [",
          "255:   AC_REQUIRE([CC_CHECK_WERROR])",
          "256:   AC_CACHE_CHECK([if $CC supports -fvisibility=hidden],",
          "257:     [cc_cv_flag_visibility],",
          "258:     [cc_flag_visibility_save_CFLAGS=\"$CFLAGS\"",
          "259:      CFLAGS=\"$CFLAGS $cc_cv_werror\"",
          "260:      CC_CHECK_CFLAGS_SILENT([-fvisibility=hidden],",
          "261:  cc_cv_flag_visibility='yes',",
          "262:  cc_cv_flag_visibility='no')",
          "263:      CFLAGS=\"$cc_flag_visibility_save_CFLAGS\"])",
          "265:   AS_IF([test \"x$cc_cv_flag_visibility\" = \"xyes\"],",
          "266:     [AC_DEFINE([SUPPORT_FLAG_VISIBILITY], 1,",
          "267:        [Define this if the compiler supports the -fvisibility flag])",
          "268:      $1],",
          "269:     [$2])",
          "270: ])",
          "272: AC_DEFUN([CC_FUNC_EXPECT], [",
          "273:   AC_REQUIRE([CC_CHECK_WERROR])",
          "274:   AC_CACHE_CHECK([if compiler has __builtin_expect function],",
          "275:     [cc_cv_func_expect],",
          "276:     [ac_save_CFLAGS=\"$CFLAGS\"",
          "277:      CFLAGS=\"$CFLAGS $cc_cv_werror\"",
          "278:      AC_LANG_PUSH([C])",
          "279:      AC_COMPILE_IFELSE([AC_LANG_SOURCE(",
          "280:        [int some_function() {",
          "281:         int a = 3;",
          "282:         return (int)__builtin_expect(a, 3);",
          "283:  }])],",
          "284:        [cc_cv_func_expect=yes],",
          "285:        [cc_cv_func_expect=no])",
          "286:      AC_LANG_POP([C])",
          "287:      CFLAGS=\"$ac_save_CFLAGS\"",
          "288:     ])",
          "290:   AS_IF([test \"x$cc_cv_func_expect\" = \"xyes\"],",
          "291:     [AC_DEFINE([SUPPORT__BUILTIN_EXPECT], 1,",
          "292:      [Define this if the compiler supports __builtin_expect() function])",
          "293:      $1],",
          "294:     [$2])",
          "295: ])",
          "297: AC_DEFUN([CC_ATTRIBUTE_ALIGNED], [",
          "298:   AC_REQUIRE([CC_CHECK_WERROR])",
          "299:   AC_CACHE_CHECK([highest __attribute__ ((aligned ())) supported],",
          "300:     [cc_cv_attribute_aligned],",
          "301:     [ac_save_CFLAGS=\"$CFLAGS\"",
          "302:      CFLAGS=\"$CFLAGS $cc_cv_werror\"",
          "303:      AC_LANG_PUSH([C])",
          "304:      for cc_attribute_align_try in 64 32 16 8 4 2; do",
          "305:         AC_COMPILE_IFELSE([AC_LANG_SOURCE([",
          "306:           int main() {",
          "307:             static char c __attribute__ ((aligned($cc_attribute_align_try))) = 0;",
          "308:             return c;",
          "309:           }])], [cc_cv_attribute_aligned=$cc_attribute_align_try; break])",
          "310:      done",
          "311:      AC_LANG_POP([C])",
          "312:      CFLAGS=\"$ac_save_CFLAGS\"",
          "313:   ])",
          "315:   if test \"x$cc_cv_attribute_aligned\" != \"x\"; then",
          "316:      AC_DEFINE_UNQUOTED([ATTRIBUTE_ALIGNED_MAX], [$cc_cv_attribute_aligned],",
          "317:        [Define the highest alignment supported])",
          "318:   fi",
          "319: ])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e54de537efcacd593f36fcaaf8b4cb9e64313275",
      "candidate_info": {
        "commit_hash": "e54de537efcacd593f36fcaaf8b4cb9e64313275",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/e54de537efcacd593f36fcaaf8b4cb9e64313275",
        "files": [
          "ChangeLog",
          "include/uv-version.h"
        ],
        "message": "2014.04.07, Version 0.11.23 (Unstable)\n\nChanges since version 0.11.22:\n\n* fs: avoid using readv/writev where possible (Fedor Indutny)\n\n* mingw: fix build with autotools (Sa\u00fal Ibarra Corretg\u00e9)\n\n* bsd: support IPv6 qualified link-local addresses (Sa\u00fal Ibarra Corretg\u00e9)\n\n* unix: add UV_HANDLE_IPV6 flag to tcp and udp handles (Sa\u00fal Ibarra Corretg\u00e9)\n\n* unix, windows: do not set SO_REUSEADDR by default on udp (Sa\u00fal Ibarra\n  Corretg\u00e9)\n\n* windows: fix check in uv_tty_endgame() (Maks Naumov)\n\n* unix, windows: add IPv6 support for uv_udp_multicast_interface (Sa\u00fal Ibarra\n  Corretg\u00e9)\n\n* unix: fallback to blocking writes if reopening a tty fails (Sa\u00fal Ibarra\n  Corretg\u00e9)\n\n* unix: fix handling uv__open_cloexec failure (Sa\u00fal Ibarra Corretg\u00e9)\n\n* unix, windows: add IPv6 support to uv_udp_set_membership (Sa\u00fal Ibarra\n  Corretg\u00e9)\n\n* unix, windows: removed unused status parameter (Sa\u00fal Ibarra Corretg\u00e9)\n\n* android: add support of ifaddrs in android (Javier Hern\u00e1ndez)\n\n* build: fix SunOS and AIX build with autotools (Sa\u00fal Ibarra Corretg\u00e9)\n\n* build: freebsd link with libelf if dtrace enabled (Sa\u00fal Ibarra Corretg\u00e9)\n\n* stream: do not leak `alloc_cb` buffers on error (Fedor Indutny)\n\n* unix: fix setting written size on uv_wd (Sa\u00fal Ibarra Corretg\u00e9)\n\nSigned-off-by: Fedor Indutny <fedor@indutny.com>",
        "before_after_code_files": [
          "include/uv-version.h||include/uv-version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv-version.h||include/uv-version.h": [
          "File: include/uv-version.h -> include/uv-version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: #define UV_VERSION_MAJOR 0",
          "34: #define UV_VERSION_MINOR 11",
          "35: #define UV_VERSION_PATCH 23",
          "",
          "[Removed Lines]",
          "36: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "36: #define UV_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c77707984db00d14e21e24d19cafe0dfcb4762a5",
      "candidate_info": {
        "commit_hash": "c77707984db00d14e21e24d19cafe0dfcb4762a5",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/c77707984db00d14e21e24d19cafe0dfcb4762a5",
        "files": [
          "include/uv.h"
        ],
        "message": "include: fix typo in comment in uv.h\n\nFixes #790.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h"
        ]
      }
    }
  ]
}