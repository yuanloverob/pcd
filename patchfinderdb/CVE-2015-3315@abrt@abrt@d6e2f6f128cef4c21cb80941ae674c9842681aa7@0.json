{
  "cve_id": "CVE-2015-3315",
  "cve_desc": "Automatic Bug Reporting Tool (ABRT) allows local users to read, change the ownership of, or have other unspecified impact on arbitrary files via a symlink attack on (1) /var/tmp/abrt/*/maps, (2) /tmp/jvm-*/hs_error.log, (3) /proc/*/exe, (4) /etc/os-release in a chroot, or (5) an unspecified root directory related to librpm.",
  "repo": "abrt/abrt",
  "patch_hash": "d6e2f6f128cef4c21cb80941ae674c9842681aa7",
  "patch_info": {
    "commit_hash": "d6e2f6f128cef4c21cb80941ae674c9842681aa7",
    "repo": "abrt/abrt",
    "commit_url": "https://github.com/abrt/abrt/commit/d6e2f6f128cef4c21cb80941ae674c9842681aa7",
    "files": [
      "src/hooks/abrt-hook-ccpp.c"
    ],
    "message": "ccpp: open file for dump_fd_info with O_EXCL\n\nTo avoid possible races.\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
    "before_after_code_files": [
      "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
    ]
  },
  "patch_diff": {
    "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
      "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "400: static bool dump_fd_info(const char *dest_filename, char *source_filename, int source_base_ofs, uid_t uid, gid_t gid)",
      "401: {",
      "403:     if (!fp)",
      "404:         return false;",
      "",
      "[Removed Lines]",
      "402:     FILE *fp = fopen(dest_filename, \"w\");",
      "",
      "[Added Lines]",
      "402:     FILE *fp = fopen(dest_filename, \"wx\");",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "af945ff58a698ce00c45059a05994ef53a13e192",
      "candidate_info": {
        "commit_hash": "af945ff58a698ce00c45059a05994ef53a13e192",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/af945ff58a698ce00c45059a05994ef53a13e192",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: do not override existing files by compat cores\n\nImplement all checks used in kernel's do_coredump() and require\nnon-relative path if suid_dumpable is 2.\n\nRelated: #1212818\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #define  DUMP_SUID_UNSAFE 1",
          "25: #define  DUMP_SUID_SAFE 2",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: static int g_user_core_flags;",
          "28: static int g_need_nonrelative;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "338:     full_core_basename = core_basename;",
          "339:     if (core_basename[0] != '/')",
          "340:         core_basename = concat_path_file(user_pwd, core_basename);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "342:     {",
          "343:         if (g_need_nonrelative)",
          "344:         {",
          "345:             error_msg(\"Current suid_dumpable policy prevents from saving core dumps according to relative core_pattern\");",
          "346:             return -1;",
          "347:         }",
          "349:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "372:     struct stat sb;",
          "373:     errno = 0;",
          "376:     xsetegid(0);",
          "377:     xseteuid(0);",
          "378:     if (user_core_fd < 0",
          "379:      || fstat(user_core_fd, &sb) != 0",
          "380:      || !S_ISREG(sb.st_mode)",
          "381:      || sb.st_nlink != 1",
          "383:     ) {",
          "384:         if (user_core_fd < 0)",
          "385:             perror_msg(\"Can't open '%s'\", full_core_basename);",
          "386:         else",
          "388:         return -1;",
          "389:     }",
          "390:     if (ftruncate(user_core_fd, 0) != 0) {",
          "",
          "[Removed Lines]",
          "387:             perror_msg(\"'%s' is not a regular file with link count 1\", full_core_basename);",
          "",
          "[Added Lines]",
          "391:      || sb.st_uid != fsuid",
          "396:             perror_msg(\"'%s' is not a regular file with link count 1 owned by UID(%d)\", full_core_basename, fsuid);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "579:         fsuid = 0;",
          "580:         if (suid_policy == DUMP_SUID_UNSAFE)",
          "582:             fsuid = tmp_fsuid;",
          "583:         }",
          "584:     }",
          "",
          "[Removed Lines]",
          "581:         {",
          "",
          "[Added Lines]",
          "591:         else",
          "592:         {",
          "593:             g_user_core_flags = O_EXCL;",
          "594:             g_need_nonrelative = 1;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a4100678fea4d60ec93d35f4c5de2e9ad054f3a",
      "candidate_info": {
        "commit_hash": "9a4100678fea4d60ec93d35f4c5de2e9ad054f3a",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/9a4100678fea4d60ec93d35f4c5de2e9ad054f3a",
        "files": [
          "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
        ],
        "message": "a-a-i-d-t-a-cache: sanitize umask\n\nWe cannot trust anything when running suided program.\n\nRelated: #1216962\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c||src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c": [
          "File: src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c -> src/plugins/abrt-action-install-debuginfo-to-abrt-cache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "182:         if (u != 0)",
          "183:             strcpy(path_env, \"PATH=/usr/bin:/bin:\"BIN_DIR);",
          "184:         putenv(path_env);",
          "185:     }",
          "187:     execvp(EXECUTABLE, (char **)args);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "187:         umask(0022);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "80408e9e24a1c10f85fd969e1853e0f192157f92",
      "candidate_info": {
        "commit_hash": "80408e9e24a1c10f85fd969e1853e0f192157f92",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/80408e9e24a1c10f85fd969e1853e0f192157f92",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: fix symlink race conditions\n\nFix copy & chown race conditions\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:     return user_core_fd;",
          "398: }",
          "401: {",
          "402:     FILE *fp = fopen(dest_filename, \"w\");",
          "403:     if (!fp)",
          "",
          "[Removed Lines]",
          "400: static bool dump_fd_info(const char *dest_filename, char *source_filename, int source_base_ofs)",
          "",
          "[Added Lines]",
          "400: static bool dump_fd_info(const char *dest_filename, char *source_filename, int source_base_ofs, uid_t uid, gid_t gid)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "429:         }",
          "430:         fclose(in);",
          "431:     }",
          "432:     fclose(fp);",
          "433:     return true;",
          "434: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "433:     const int dest_fd = fileno(fp);",
          "434:     if (fchown(dest_fd, uid, gid) < 0)",
          "435:     {",
          "436:         perror_msg(\"Can't change '%s' ownership to %lu:%lu\", dest_filename, (long)uid, (long)gid);",
          "437:         fclose(fp);",
          "438:         unlink(dest_filename);",
          "439:         return false;",
          "440:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "684:         strcpy(source_filename + source_base_ofs, \"maps\");",
          "685:         strcpy(dest_base, FILENAME_MAPS);",
          "689:         strcpy(source_filename + source_base_ofs, \"limits\");",
          "690:         strcpy(dest_base, FILENAME_LIMITS);",
          "694:         strcpy(source_filename + source_base_ofs, \"cgroup\");",
          "695:         strcpy(dest_base, FILENAME_CGROUP);",
          "699:         strcpy(dest_base, FILENAME_OPEN_FDS);",
          "703:         free(dest_filename);",
          "",
          "[Removed Lines]",
          "686:         copy_file(source_filename, dest_filename, DEFAULT_DUMP_DIR_MODE);",
          "687:         IGNORE_RESULT(chown(dest_filename, dd->dd_uid, dd->dd_gid));",
          "691:         copy_file(source_filename, dest_filename, DEFAULT_DUMP_DIR_MODE);",
          "692:         IGNORE_RESULT(chown(dest_filename, dd->dd_uid, dd->dd_gid));",
          "696:         copy_file(source_filename, dest_filename, DEFAULT_DUMP_DIR_MODE);",
          "697:         IGNORE_RESULT(chown(dest_filename, dd->dd_uid, dd->dd_gid));",
          "700:         if (dump_fd_info(dest_filename, source_filename, source_base_ofs))",
          "701:             IGNORE_RESULT(chown(dest_filename, dd->dd_uid, dd->dd_gid));",
          "",
          "[Added Lines]",
          "695:         copy_file_ext(source_filename, dest_filename, 0640, dd->dd_uid, dd->dd_gid, O_RDONLY, O_WRONLY | O_CREAT | O_TRUNC | O_EXCL);",
          "699:         copy_file_ext(source_filename, dest_filename, 0640, dd->dd_uid, dd->dd_gid, O_RDONLY, O_WRONLY | O_CREAT | O_TRUNC | O_EXCL);",
          "703:         copy_file_ext(source_filename, dest_filename, 0640, dd->dd_uid, dd->dd_gid, O_RDONLY, O_WRONLY | O_CREAT | O_TRUNC | O_EXCL);",
          "706:         dump_fd_info(dest_filename, source_filename, source_base_ofs, dd->dd_uid, dd->dd_gid);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b72616471ec52a009904689592f4f69e730a6f56",
      "candidate_info": {
        "commit_hash": "b72616471ec52a009904689592f4f69e730a6f56",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/b72616471ec52a009904689592f4f69e730a6f56",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: harden dealing with UID/GID\n\n* Don't fall back to UID 0.\n* Use fsgid.\n\nThis issue was discovered by Florian Weimer of Red Hat Product Security.\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:     return malloc_readlink(buf);",
          "219: }",
          "222: {",
          "228:     for (;;)",
          "229:     {",
          "231:         {",
          "233:             if (n != 4)",
          "234:             {",
          "236:             }",
          "238:         }",
          "239:         line = strchr(line, '\\n');",
          "240:         if (!line)",
          "",
          "[Removed Lines]",
          "221: static int get_fsuid(void)",
          "223:     int real, euid, saved;",
          "225:     int fs_uid = 0;",
          "230:         if (strncmp(line, \"Uid\", 3) == 0)",
          "232:             int n = sscanf(line, \"Uid:\\t%d\\t%d\\t%d\\t%d\\n\", &real, &euid, &saved, &fs_uid);",
          "235:                 perror_msg_and_die(\"Can't parse Uid: line\");",
          "237:             break;",
          "",
          "[Added Lines]",
          "221: static int get_proc_fs_id(char type)",
          "223:     const char *scanf_format = \"%*cid:\\t%d\\t%d\\t%d\\t%d\\n\";",
          "224:     char id_type[] = \"_id\";",
          "225:     id_type[0] = type;",
          "227:     int real, e_id, saved;",
          "228:     int fs_id = 0;",
          "233:         if (strncmp(line, id_type, 3) == 0)",
          "235:             int n = sscanf(line, scanf_format, &real, &e_id, &saved, &fs_id);",
          "238:                 perror_msg_and_die(\"Can't parse %cid: line\", type);",
          "241:             return fs_id;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "242:         line++;",
          "243:     }",
          "246: }",
          "248: static int dump_suid_policy()",
          "",
          "[Removed Lines]",
          "245:     return fs_uid;",
          "",
          "[Added Lines]",
          "249:     perror_msg_and_die(\"Failed to get file system %cID of the crashed process\", type);",
          "250: }",
          "252: static int get_fsuid(void)",
          "253: {",
          "254:     return get_proc_fs_id(/*UID*/'U');",
          "255: }",
          "257: static int get_fsgid(void)",
          "258: {",
          "259:     return get_proc_fs_id(/*GID*/'G');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "278:     if (proc_cwd == NULL)",
          "279:         return -1;",
          "285:     xseteuid(fsuid);",
          "287:     if (strcmp(core_basename, \"core\") == 0)",
          "",
          "[Removed Lines]",
          "281:     struct passwd* pw = getpwuid(uid);",
          "282:     gid_t gid = pw ? pw->pw_gid : uid;",
          "284:     xsetegid(gid);",
          "",
          "[Added Lines]",
          "295:     errno = 0;",
          "297:     xsetegid(get_fsgid());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cdb4c5b0855d910132e61d71afbd445b0271fcb4",
      "candidate_info": {
        "commit_hash": "cdb4c5b0855d910132e61d71afbd445b0271fcb4",
        "repo": "abrt/abrt",
        "commit_url": "https://github.com/abrt/abrt/commit/cdb4c5b0855d910132e61d71afbd445b0271fcb4",
        "files": [
          "src/hooks/abrt-hook-ccpp.c"
        ],
        "message": "ccpp: avoid overriding system files by coredump\n\nRelated: #1211835\n\nSigned-off-by: Jakub Filak <jfilak@redhat.com>",
        "before_after_code_files": [
          "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/abrt/abrt/pull/950"
        ],
        "olp_code_files": {
          "patch": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ],
          "candidate": [
            "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c"
          ]
        }
      },
      "candidate_diff": {
        "src/hooks/abrt-hook-ccpp.c||src/hooks/abrt-hook-ccpp.c": [
          "File: src/hooks/abrt-hook-ccpp.c -> src/hooks/abrt-hook-ccpp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545: static int create_or_die(const char *filename)",
          "546: {",
          "548:     if (fd >= 0)",
          "549:     {",
          "550:         IGNORE_RESULT(fchown(fd, dd->dd_uid, dd->dd_gid));",
          "",
          "[Removed Lines]",
          "547:     int fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, DEFAULT_DUMP_DIR_MODE);",
          "",
          "[Added Lines]",
          "547:     int fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC | O_EXCL, DEFAULT_DUMP_DIR_MODE);",
          "",
          "---------------"
        ]
      }
    }
  ]
}