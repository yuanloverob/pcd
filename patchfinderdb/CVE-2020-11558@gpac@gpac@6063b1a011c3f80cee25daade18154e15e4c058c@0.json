{
  "cve_id": "CVE-2020-11558",
  "cve_desc": "An issue was discovered in libgpac.a in GPAC 0.8.0, as demonstrated by MP4Box. audio_sample_entry_Read in isomedia/box_code_base.c does not properly decide when to make gf_isom_box_del calls. This leads to various use-after-free outcomes involving mdia_Read, gf_isom_delete_movie, and gf_isom_parse_movie_boxes.",
  "repo": "gpac/gpac",
  "patch_hash": "6063b1a011c3f80cee25daade18154e15e4c058c",
  "patch_info": {
    "commit_hash": "6063b1a011c3f80cee25daade18154e15e4c058c",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/6063b1a011c3f80cee25daade18154e15e4c058c",
    "files": [
      "src/isomedia/box_code_base.c"
    ],
    "message": "fix UAF in audio_sample_entry_Read (#1440)",
    "before_after_code_files": [
      "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c"
    ]
  },
  "patch_diff": {
    "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c": [
      "File: src/isomedia/box_code_base.c -> src/isomedia/box_code_base.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4069:  gf_bs_read_data(bs, data, size);",
      "4070:  for (i=0; i<size-8; i++) {",
      "4071:   if (GF_4CC((u32)data[i+4], (u8)data[i+5], (u8)data[i+6], (u8)data[i+7]) == GF_ISOM_BOX_TYPE_ESDS) {",
      "4072:    GF_BitStream *mybs = gf_bs_new(data + i, size - i, GF_BITSTREAM_READ);",
      "4073:    if (ptr->esd) {",
      "4075:     ptr->esd=NULL;",
      "4076:    }",
      "",
      "[Removed Lines]",
      "4074:     gf_isom_box_del((GF_Box *)ptr->esd);",
      "",
      "[Added Lines]",
      "4072:    extern Bool use_dump_mode;",
      "4075:     if (!use_dump_mode) gf_isom_box_del((GF_Box *)ptr->esd);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "526bc968451e1ec83386c93f2c1f5a74ac65e649",
      "candidate_info": {
        "commit_hash": "526bc968451e1ec83386c93f2c1f5a74ac65e649",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/526bc968451e1ec83386c93f2c1f5a74ac65e649",
        "files": [
          "src/isomedia/box_code_base.c",
          "src/isomedia/isom_intern.c",
          "src/utils/downloader.c"
        ],
        "message": "fix some memleaks",
        "before_after_code_files": [
          "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c",
          "src/isomedia/isom_intern.c||src/isomedia/isom_intern.c",
          "src/utils/downloader.c||src/utils/downloader.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c"
          ],
          "candidate": [
            "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c"
          ]
        }
      },
      "candidate_diff": {
        "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c": [
          "File: src/isomedia/box_code_base.c -> src/isomedia/box_code_base.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4043:  for (i=0; i<size-8; i++) {",
          "4044:   if (GF_4CC((u32)data[i+4], (u8)data[i+5], (u8)data[i+6], (u8)data[i+7]) == GF_ISOM_BOX_TYPE_ESDS) {",
          "4045:    GF_BitStream *mybs = gf_bs_new(data + i, size - i, GF_BITSTREAM_READ);",
          "4047:    e = gf_isom_box_parse((GF_Box **)&ptr->esd, mybs);",
          "4049:    gf_bs_del(mybs);",
          "4050:    break;",
          "4051:   }",
          "",
          "[Removed Lines]",
          "4046:    if (ptr->esd) gf_isom_box_del((GF_Box *)ptr->esd);",
          "4048:    if (!e) gf_isom_box_add_for_dump_mode((GF_Box*)ptr, (GF_Box*)ptr->esd);",
          "",
          "[Added Lines]",
          "4046:    if (ptr->esd) {",
          "4047:     gf_isom_box_del((GF_Box *)ptr->esd);",
          "4048:     ptr->esd=NULL;",
          "4049:    }",
          "4053:    if (e==GF_OK) {",
          "4054:     gf_isom_box_add_for_dump_mode((GF_Box*)ptr, (GF_Box*)ptr->esd);",
          "4055:    } else if (ptr->esd) {",
          "4056:     gf_isom_box_del((GF_Box *)ptr->esd);",
          "4057:     ptr->esd=NULL;",
          "4058:    }",
          "",
          "---------------"
        ],
        "src/isomedia/isom_intern.c||src/isomedia/isom_intern.c": [
          "File: src/isomedia/isom_intern.c -> src/isomedia/isom_intern.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "418:    } else {",
          "420:     e = MergeFragment((GF_MovieFragmentBox *)a, mov);",
          "422:     gf_isom_box_del(a);",
          "423:    }",
          "424:    break;",
          "425: #endif",
          "",
          "[Removed Lines]",
          "421:     if (e) return e;",
          "",
          "[Added Lines]",
          "422:     if (e) return e;",
          "",
          "---------------"
        ],
        "src/utils/downloader.c||src/utils/downloader.c": [
          "File: src/utils/downloader.c -> src/utils/downloader.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2463:  GF_NETIO_Parameter par;",
          "2464:  Bool no_cache = GF_FALSE;",
          "2465:  char range_buf[1024];",
          "2467:  const char *user_agent;",
          "2468:  const char *url;",
          "2469:  const char *user_profile;",
          "",
          "[Removed Lines]",
          "2466:  char pass_buf[1024];",
          "",
          "[Added Lines]",
          "2466:  char pass_buf[1124];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3f1564c43825e052a5d53cbb4c8a242abdf603b4",
      "candidate_info": {
        "commit_hash": "3f1564c43825e052a5d53cbb4c8a242abdf603b4",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/3f1564c43825e052a5d53cbb4c8a242abdf603b4",
        "files": [
          "src/isomedia/box_code_base.c",
          "src/isomedia/isom_read.c",
          "src/isomedia/isom_write.c",
          "src/isomedia/media.c",
          "src/isomedia/stbl_write.c",
          "src/isomedia/track.c",
          "src/odf/odf_code.c"
        ],
        "message": "fix some asan issues from afl\n\n(autofuzz ref. R43LKM0viqN5JQ)",
        "before_after_code_files": [
          "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c",
          "src/isomedia/isom_read.c||src/isomedia/isom_read.c",
          "src/isomedia/isom_write.c||src/isomedia/isom_write.c",
          "src/isomedia/media.c||src/isomedia/media.c",
          "src/isomedia/stbl_write.c||src/isomedia/stbl_write.c",
          "src/isomedia/track.c||src/isomedia/track.c",
          "src/odf/odf_code.c||src/odf/odf_code.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c"
          ],
          "candidate": [
            "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c"
          ]
        }
      },
      "candidate_diff": {
        "src/isomedia/box_code_base.c||src/isomedia/box_code_base.c": [
          "File: src/isomedia/box_code_base.c -> src/isomedia/box_code_base.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4043:  for (i=0; i<size-8; i++) {",
          "4044:   if (GF_4CC((u32)data[i+4], (u8)data[i+5], (u8)data[i+6], (u8)data[i+7]) == GF_ISOM_BOX_TYPE_ESDS) {",
          "4045:    GF_BitStream *mybs = gf_bs_new(data + i, size - i, GF_BITSTREAM_READ);",
          "4046:    e = gf_isom_box_parse((GF_Box **)&ptr->esd, mybs);",
          "4047:    if (!e) gf_isom_box_add_for_dump_mode((GF_Box*)ptr, (GF_Box*)ptr->esd);",
          "4048:    gf_bs_del(mybs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4046:    if (ptr->esd) gf_isom_box_del((GF_Box *)ptr->esd);",
          "",
          "---------------"
        ],
        "src/isomedia/isom_read.c||src/isomedia/isom_read.c": [
          "File: src/isomedia/isom_read.c -> src/isomedia/isom_read.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "502: GF_EXPORT",
          "503: GF_Err gf_isom_close(GF_ISOFile *movie)",
          "504: {",
          "506:  if (movie == NULL) return GF_ISOM_INVALID_FILE;",
          "507:  e = gf_isom_write(movie);",
          "513: }",
          "",
          "[Removed Lines]",
          "505:  GF_Err e;",
          "508:  if (e) return e;",
          "511:  gf_isom_delete_movie(movie);",
          "512:  return GF_OK;",
          "",
          "[Added Lines]",
          "505:  GF_Err e=GF_OK;",
          "510:  if (movie) gf_isom_delete_movie(movie);",
          "511:  return e;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1499: {",
          "1500:  GF_TrackBox *trak;",
          "1501:  trak = gf_isom_get_track_from_file(the_file, trackNumber);",
          "1503:  if (trak->Media->information->sampleTable->TimeToSample->nb_entries != 1) return 0;",
          "1504:  return trak->Media->information->sampleTable->TimeToSample->entries[0].sampleDelta;",
          "1505: }",
          "",
          "[Removed Lines]",
          "1502:  if (!trak) return 0;",
          "",
          "[Added Lines]",
          "1501:  if (!trak || !trak->Media || !trak->Media->information || !trak->Media->information->sampleTable || !trak->Media->information->sampleTable->TimeToSample) return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1512:  if (!trak) return GF_FALSE;",
          "1513:  trak->pack_num_samples = 0;",
          "1516:  if (trak->Media->handler->handlerType != GF_ISOM_MEDIA_AUDIO) return GF_FALSE;",
          "1518:  if (trak->Media->information->sampleTable->TimeToSample->nb_entries != 1) return GF_FALSE;",
          "1519:  if (trak->Media->information->sampleTable->TimeToSample->entries[0].sampleDelta != 1) return GF_FALSE;",
          "1522:  trak->pack_num_samples = pack_num_samples;",
          "1523:  return pack_num_samples ? GF_TRUE : GF_FALSE;",
          "1524: }",
          "",
          "[Removed Lines]",
          "1515:  if (!trak->Media->handler) return GF_FALSE;",
          "1521:  if (!trak->Media->information->sampleTable->SampleSize->sampleSize) return GF_FALSE;",
          "",
          "[Added Lines]",
          "1514:  if (!trak->Media || !trak->Media->handler) return GF_FALSE;",
          "1517:  if (!trak->Media->information || !trak->Media->information->sampleTable || !trak->Media->information->sampleTable->TimeToSample) return GF_FALSE;",
          "1519:  if (!trak->Media->information->sampleTable->TimeToSample->entries) return GF_FALSE;",
          "1522:  if (!trak->Media->information->sampleTable->SampleSize || !trak->Media->information->sampleTable->SampleSize->sampleSize) return GF_FALSE;",
          "",
          "---------------"
        ],
        "src/isomedia/isom_write.c||src/isomedia/isom_write.c": [
          "File: src/isomedia/isom_write.c -> src/isomedia/isom_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3185:  stbl_temp->CompositionToDecode = NULL;",
          "3186:  gf_isom_box_del((GF_Box *)stbl_temp);",
          "",
          "[Removed Lines]",
          "3188:  if (e) return e;",
          "",
          "[Added Lines]",
          "3188:  if (e) {",
          "3189:   if (new_tk) gf_isom_box_del((GF_Box *)new_tk);",
          "3190:   return e;",
          "3191:  }",
          "",
          "---------------"
        ],
        "src/isomedia/media.c||src/isomedia/media.c": [
          "File: src/isomedia/media.c -> src/isomedia/media.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:             ESDa = ase->esd;",
          "215:             if (ESDa) {",
          "216:     esd = (GF_ESD *) ESDa->desc;",
          "218:     Bool make_mp4a = GF_FALSE;",
          "219:     GF_ProtectionSchemeInfoBox *sinf = (GF_ProtectionSchemeInfoBox *) gf_list_get(entry->protections, 0);",
          "220:     if (sinf && sinf->original_format) {",
          "",
          "[Removed Lines]",
          "217:             } else {",
          "",
          "[Added Lines]",
          "217:             } else if (!true_desc_only) {",
          "",
          "---------------"
        ],
        "src/isomedia/stbl_write.c||src/isomedia/stbl_write.c": [
          "File: src/isomedia/stbl_write.c -> src/isomedia/stbl_write.c"
        ],
        "src/isomedia/track.c||src/isomedia/track.c": [
          "File: src/isomedia/track.c -> src/isomedia/track.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1200:                 gf_odf_desc_del((GF_Descriptor *) entry_a->esd->desc);",
          "1201:                 entry_a->esd->desc = esd;",
          "1203:    break;",
          "1204:   case GF_ISOM_BOX_TYPE_AVC1:",
          "1205:   case GF_ISOM_BOX_TYPE_AVC2:",
          "",
          "[Removed Lines]",
          "1202:             }",
          "",
          "[Added Lines]",
          "1202:             } else {",
          "1205:     return GF_ISOM_INVALID_MEDIA;",
          "1206:    }",
          "",
          "---------------"
        ],
        "src/odf/odf_code.c||src/odf/odf_code.c": [
          "File: src/odf/odf_code.c -> src/odf/odf_code.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1908:   nbBytes += 4;",
          "1910:   e = OD_ReadUTF8String(bs, & tmp->contentCreatorName, tmp->isUTF8, &len);",
          "1912:   nbBytes += len;",
          "1913:   e = gf_list_add(cnd->ContentCreators, tmp);",
          "1914:   if (e) return e;",
          "",
          "[Removed Lines]",
          "1911:   if (e) return e;",
          "",
          "[Added Lines]",
          "1911:   if (e) {",
          "1912:    gf_free(tmp);",
          "1913:    return e;",
          "1914:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}