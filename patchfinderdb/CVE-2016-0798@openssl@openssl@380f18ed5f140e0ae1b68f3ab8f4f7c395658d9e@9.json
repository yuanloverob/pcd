{
  "cve_id": "CVE-2016-0798",
  "cve_desc": "Memory leak in the SRP_VBASE_get_by_user implementation in OpenSSL 1.0.1 before 1.0.1s and 1.0.2 before 1.0.2g allows remote attackers to cause a denial of service (memory consumption) by providing an invalid username in a connection attempt, related to apps/s_server.c and crypto/srp/srp_vfy.c.",
  "repo": "openssl/openssl",
  "patch_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
  "patch_info": {
    "commit_hash": "380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/380f18ed5f140e0ae1b68f3ab8f4f7c395658d9e",
    "files": [
      "CHANGES",
      "apps/s_server.c",
      "crypto/srp/srp_vfy.c",
      "include/openssl/srp.h",
      "util/libeay.num"
    ],
    "message": "CVE-2016-0798: avoid memory leak in SRP\n\nThe SRP user database lookup method SRP_VBASE_get_by_user had confusing\nmemory management semantics; the returned pointer was sometimes newly\nallocated, and sometimes owned by the callee. The calling code has no\nway of distinguishing these two cases.\n\nSpecifically, SRP servers that configure a secret seed to hide valid\nlogin information are vulnerable to a memory leak: an attacker\nconnecting with an invalid username can cause a memory leak of around\n300 bytes per connection.\n\nServers that do not configure SRP, or configure SRP but do not configure\na seed are not vulnerable.\n\nIn Apache, the seed directive is known as SSLSRPUnknownUserSeed.\n\nTo mitigate the memory leak, the seed handling in SRP_VBASE_get_by_user\nis now disabled even if the user has configured a seed.\n\nApplications are advised to migrate to SRP_VBASE_get1_by_user. However,\nnote that OpenSSL makes no strong guarantees about the\nindistinguishability of valid and invalid logins. In particular,\ncomputations are currently not carried out in constant time.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "apps/s_server.c||apps/s_server.c",
      "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c",
      "include/openssl/srp.h||include/openssl/srp.h",
      "util/libeay.num||util/libeay.num"
    ]
  },
  "patch_diff": {
    "apps/s_server.c||apps/s_server.c": [
      "File: apps/s_server.c -> apps/s_server.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "352: static int ssl_srp_server_param_cb(SSL *s, int *ad, void *arg)",
      "353: {",
      "354:     srpsrvparm *p = (srpsrvparm *) arg;",
      "355:     if (p->login == NULL && p->user == NULL) {",
      "356:         p->login = SSL_get_srp_username(s);",
      "357:         BIO_printf(bio_err, \"SRP username = \\\"%s\\\"\\n\", p->login);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "355:     int ret = SSL3_AL_FATAL;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "361:     if (p->user == NULL) {",
      "362:         BIO_printf(bio_err, \"User %s doesn't exist\\n\", p->login);",
      "364:     }",
      "365:     if (SSL_set_srp_server_param",
      "366:         (s, p->user->N, p->user->g, p->user->s, p->user->v,",
      "367:          p->user->info) < 0) {",
      "370:     }",
      "371:     BIO_printf(bio_err,",
      "372:                \"SRP parameters set: username = \\\"%s\\\" info=\\\"%s\\\" \\n\",",
      "373:                p->login, p->user->info);",
      "375:     p->user = NULL;",
      "376:     p->login = NULL;",
      "378: }",
      "380: #endif",
      "",
      "[Removed Lines]",
      "363:         return SSL3_AL_FATAL;",
      "369:         return SSL3_AL_FATAL;",
      "377:     return SSL_ERROR_NONE;",
      "",
      "[Added Lines]",
      "365:         goto err;",
      "372:         goto err;",
      "377:     ret = SSL_ERROR_NONE;",
      "379: err:",
      "380:     SRP_user_pwd_free(p->user);",
      "383:     return ret;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2325: #ifndef OPENSSL_NO_SRP",
      "2326:                 while (SSL_get_error(con, k) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2327:                     BIO_printf(bio_s_out, \"LOOKUP renego during write\\n\");",
      "2328:                     srp_callback_parm.user =",
      "2331:                     if (srp_callback_parm.user)",
      "2332:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2333:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2329:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2330:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2334:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2336:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2337:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2393: #ifndef OPENSSL_NO_SRP",
      "2394:                 while (SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2395:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2396:                     srp_callback_parm.user =",
      "2399:                     if (srp_callback_parm.user)",
      "2400:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2401:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2397:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2398:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2403:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2405:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2406:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2520:         while (i <= 0 && SSL_get_error(con, i) == SSL_ERROR_WANT_X509_LOOKUP) {",
      "2521:             BIO_printf(bio_s_out, \"LOOKUP during accept %s\\n\",",
      "2522:                        srp_callback_parm.login);",
      "2523:             srp_callback_parm.user =",
      "2526:             if (srp_callback_parm.user)",
      "2527:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2528:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2524:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2525:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2531:             SRP_user_pwd_free(srp_callback_parm.user);",
      "2533:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2534:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "2732:                 if (BIO_should_io_special(io)",
      "2733:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "2734:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "2735:                     srp_callback_parm.user =",
      "2738:                     if (srp_callback_parm.user)",
      "2739:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "2740:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "2736:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "2737:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "2744:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "2746:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "2747:                                                srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "3093:         if (BIO_should_io_special(io)",
      "3094:             && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3095:             BIO_printf(bio_s_out, \"LOOKUP renego during accept\\n\");",
      "3096:             srp_callback_parm.user =",
      "3099:             if (srp_callback_parm.user)",
      "3100:                 BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3101:                            srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3097:                 SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3098:                                       srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3106:             SRP_user_pwd_free(srp_callback_parm.user);",
      "3108:                 SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3109:                                        srp_callback_parm.login);",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "3121:                 if (BIO_should_io_special(io)",
      "3122:                     && BIO_get_retry_reason(io) == BIO_RR_SSL_X509_LOOKUP) {",
      "3123:                     BIO_printf(bio_s_out, \"LOOKUP renego during read\\n\");",
      "3124:                     srp_callback_parm.user =",
      "3127:                     if (srp_callback_parm.user)",
      "3128:                         BIO_printf(bio_s_out, \"LOOKUP done %s\\n\",",
      "3129:                                    srp_callback_parm.user->info);",
      "",
      "[Removed Lines]",
      "3125:                         SRP_VBASE_get_by_user(srp_callback_parm.vb,",
      "3126:                                               srp_callback_parm.login);",
      "",
      "[Added Lines]",
      "3135:                     SRP_user_pwd_free(srp_callback_parm.user);",
      "3137:                         SRP_VBASE_get1_by_user(srp_callback_parm.vb,",
      "3138:                                                srp_callback_parm.login);",
      "",
      "---------------"
    ],
    "crypto/srp/srp_vfy.c||crypto/srp/srp_vfy.c": [
      "File: crypto/srp/srp_vfy.c -> crypto/srp/srp_vfy.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "184:     return olddst;",
      "185: }",
      "188: {",
      "189:     if (user_pwd == NULL)",
      "190:         return;",
      "",
      "[Removed Lines]",
      "187: static void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "[Added Lines]",
      "187: void SRP_user_pwd_free(SRP_user_pwd *user_pwd)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "246:     return (vinfo->s != NULL && vinfo->v != NULL);",
      "247: }",
      "249: SRP_VBASE *SRP_VBASE_new(char *seed_key)",
      "250: {",
      "251:     SRP_VBASE *vb = OPENSSL_malloc(sizeof(*vb));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "249: static SRP_user_pwd *srp_user_pwd_dup(SRP_user_pwd *src)",
      "250: {",
      "251:     SRP_user_pwd *ret;",
      "253:     if (src == NULL)",
      "254:         return NULL;",
      "255:     if ((ret = SRP_user_pwd_new()) == NULL)",
      "256:         return NULL;",
      "258:     SRP_user_pwd_set_gN(ret, src->g, src->N);",
      "259:     if (!SRP_user_pwd_set_ids(ret, src->id, src->info)",
      "260:         || !SRP_user_pwd_set_sv_BN(ret, BN_dup(src->s), BN_dup(src->v))) {",
      "261:             SRP_user_pwd_free(ret);",
      "262:             return NULL;",
      "263:     }",
      "264:     return ret;",
      "265: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "468: }",
      "471: {",
      "472:     int i;",
      "473:     SRP_user_pwd *user;",
      "478:     if (vb == NULL)",
      "479:         return NULL;",
      "480:     for (i = 0; i < sk_SRP_user_pwd_num(vb->users_pwd); i++) {",
      "481:         user = sk_SRP_user_pwd_value(vb->users_pwd, i);",
      "482:         if (strcmp(user->id, username) == 0)",
      "483:             return user;",
      "484:     }",
      "485:     if ((vb->seed_key == NULL) ||",
      "486:         (vb->default_g == NULL) || (vb->default_N == NULL))",
      "487:         return NULL;",
      "",
      "[Removed Lines]",
      "470: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "474:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "475:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "476:     EVP_MD_CTX *ctxt = NULL;",
      "",
      "[Added Lines]",
      "488: static SRP_user_pwd *find_user(SRP_VBASE *vb, char *username)",
      "502:     return NULL;",
      "503: }",
      "511: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)",
      "512: {",
      "513:     return find_user(vb, username);",
      "514: }",
      "520: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username)",
      "521: {",
      "522:     SRP_user_pwd *user;",
      "523:     unsigned char digv[SHA_DIGEST_LENGTH];",
      "524:     unsigned char digs[SHA_DIGEST_LENGTH];",
      "525:     EVP_MD_CTX *ctxt = NULL;",
      "527:     if (vb == NULL)",
      "528:         return NULL;",
      "530:     if ((user = find_user(vb, username)) != NULL)",
      "531:         return srp_user_pwd_dup(user);",
      "",
      "---------------"
    ],
    "include/openssl/srp.h||include/openssl/srp.h": [
      "File: include/openssl/srp.h -> include/openssl/srp.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "85: DEFINE_STACK_OF(SRP_gN_cache)",
      "87: typedef struct SRP_user_pwd_st {",
      "88:     char *id;",
      "89:     BIGNUM *s;",
      "90:     BIGNUM *v;",
      "91:     const BIGNUM *g;",
      "92:     const BIGNUM *N;",
      "93:     char *info;",
      "94: } SRP_user_pwd;",
      "96: DEFINE_STACK_OF(SRP_user_pwd)",
      "98: typedef struct SRP_VBASE_st {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "99: void SRP_user_pwd_free(SRP_user_pwd *user_pwd);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "118: SRP_VBASE *SRP_VBASE_new(char *seed_key);",
      "119: void SRP_VBASE_free(SRP_VBASE *vb);",
      "120: int SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file);",
      "122: char *SRP_create_verifier(const char *user, const char *pass, char **salt,",
      "123:                           char **verifier, const char *N, const char *g);",
      "124: int SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,",
      "",
      "[Removed Lines]",
      "121: SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username);",
      "",
      "[Added Lines]",
      "128: DEPRECATEDIN_1_1_0(SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username))",
      "130: SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username);",
      "",
      "---------------"
    ],
    "util/libeay.num||util/libeay.num": [
      "File: util/libeay.num -> util/libeay.num",
      "--- Hunk 1 ---",
      "[Context before]",
      "4073: OPENSSL_strncasecmp                     4566 1_1_0 EXIST::FUNCTION:",
      "4074: OPENSSL_gmtime                          4567 1_1_0 EXIST::FUNCTION:",
      "4075: OPENSSL_gmtime_adj                      4568 1_1_0 EXIST::FUNCTION:",
      "4077: SRP_Calc_server_key                     4570 1_1_0 EXIST::FUNCTION:SRP",
      "4078: SRP_create_verifier                     4571 1_1_0 EXIST::FUNCTION:SRP",
      "4079: SRP_create_verifier_BN                  4572 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Removed Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "[Added Lines]",
      "4076: SRP_VBASE_get_by_user                   4569 1_1_0 EXIST::FUNCTION:DEPRECATEDIN_1_1_0,SRP",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "4711: OPENSSL_INIT_new                        5215 1_1_0 EXIST::FUNCTION:",
      "4712: OPENSSL_INIT_free                       5216 1_1_0 EXIST::FUNCTION:",
      "4713: OPENSSL_INIT_set_config_filename        5217 1_1_0 EXIST::FUNCTION:",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4714: SRP_user_pwd_free                       5218 1_1_0 EXIST::FUNCTION:SRP",
      "4715: SRP_VBASE_get1_by_user                  5219 1_1_0 EXIST::FUNCTION:SRP",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a22c01244beec045662e0e0e048783dc70a7b8d1",
      "candidate_info": {
        "commit_hash": "a22c01244beec045662e0e0e048783dc70a7b8d1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/a22c01244beec045662e0e0e048783dc70a7b8d1",
        "files": [
          "crypto/x509/Makefile",
          "util/libeay.num"
        ],
        "message": "make update\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "1556: PEM_read_RSA_PUBKEY                     1977 EXIST::FUNCTION:RSA",
          "1557: d2i_X509_AUX                            1980 EXIST::FUNCTION:",
          "1558: i2d_DSA_PUBKEY                          1981 EXIST::FUNCTION:DSA",
          "1560: PEM_read_DSA_PUBKEY                     1984 EXIST::FUNCTION:DSA",
          "1561: i2d_RSA_PUBKEY_bio                      1985 EXIST::FUNCTION:RSA",
          "1562: ASN1_BIT_STRING_num_asc                 1986 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "1559: X509_CERT_AUX_print                     1982 EXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "1559: X509_CERT_AUX_print                     1982 NOEXIST::FUNCTION:",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4640: X509_CRL_get_signature_nid              5000 EXIST::FUNCTION:",
          "4641: i2d_re_X509_REQ_tbs                     5001 EXIST::FUNCTION:",
          "4642: X509_REVOKED_get0_extensions            5002 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4643: X509_get0_tbs_sigalg                    5003 EXIST::FUNCTION:",
          "4644: X509_trusted                            5004 EXIST::FUNCTION:",
          "4645: X509_get0_reject_objects                5005 EXIST::FUNCTION:",
          "4646: X509_get0_extensions                    5006 EXIST::FUNCTION:",
          "4647: X509_get0_trust_objects                 5007 EXIST::FUNCTION:",
          "4648: X509_get0_uids                          5008 EXIST::FUNCTION:",
          "4649: X509_aux_print                          5009 EXIST::FUNCTION:STDIO",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "25a5d1b8c425d9434ed8b2bec53d20ab8c14f886",
      "candidate_info": {
        "commit_hash": "25a5d1b8c425d9434ed8b2bec53d20ab8c14f886",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/25a5d1b8c425d9434ed8b2bec53d20ab8c14f886",
        "files": [
          "crypto/asn1/Makefile",
          "crypto/x509/Makefile",
          "crypto/x509v3/Makefile",
          "util/libeay.num"
        ],
        "message": "make update\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4588: CRYPTO_get_secure_mem_ex_functions      4947 EXIST::FUNCTION:",
          "4589: CRYPTO_set_secure_mem_functions         4948 EXIST::FUNCTION:",
          "4590: X509_STORE_CTX_get_num_untrusted        4949 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4591: X509_up_ref                             4950 EXIST::FUNCTION:",
          "4592: X509_REQ_get_version                    4951 EXIST::FUNCTION:",
          "4593: X509_REQ_get_subject_name               4952 EXIST::FUNCTION:",
          "4594: X509_CRL_up_ref                         4953 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "22a34c2fab39c38cac4a22a0e15ab9a1fd98f57c",
      "candidate_info": {
        "commit_hash": "22a34c2fab39c38cac4a22a0e15ab9a1fd98f57c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/22a34c2fab39c38cac4a22a0e15ab9a1fd98f57c",
        "files": [
          "crypto/async/arch/async_null.c",
          "crypto/async/arch/async_posix.c",
          "crypto/async/arch/async_win.c",
          "crypto/async/arch/async_win.h",
          "crypto/async/async.c",
          "crypto/async/async_err.c",
          "crypto/async/async_locl.h",
          "include/openssl/async.h",
          "util/libeay.num"
        ],
        "message": "Implement windows async thread local variable support\n\nImplements Thread Local Storage in the windows async port. This also has\nsome knock on effects to the posix and null implementations.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "crypto/async/arch/async_null.c||crypto/async/arch/async_null.c",
          "crypto/async/arch/async_posix.c||crypto/async/arch/async_posix.c",
          "crypto/async/arch/async_win.c||crypto/async/arch/async_win.c",
          "crypto/async/arch/async_win.h||crypto/async/arch/async_win.h",
          "crypto/async/async.c||crypto/async/async.c",
          "crypto/async/async_err.c||crypto/async/async_err.c",
          "crypto/async/async_locl.h||crypto/async/async_locl.h",
          "include/openssl/async.h||include/openssl/async.h",
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "crypto/async/arch/async_null.c||crypto/async/arch/async_null.c": [
          "File: crypto/async/arch/async_null.c -> crypto/async/arch/async_null.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "76:     return -1;",
          "77: }",
          "80: {",
          "81:     return 0;",
          "82: }",
          "84: #endif",
          "",
          "[Removed Lines]",
          "79: int async_thread_local_init(void)",
          "",
          "[Added Lines]",
          "79: int async_global_init(void)",
          "84: int async_local_init(void)",
          "85: {",
          "86:     return 0;",
          "87: }",
          "89: void async_local_cleanup(void)",
          "90: {",
          "91: }",
          "93: void async_global_cleanup(void)",
          "94: {",
          "95: }",
          "",
          "---------------"
        ],
        "crypto/async/arch/async_posix.c||crypto/async/arch/async_posix.c": [
          "File: crypto/async/arch/async_posix.c -> crypto/async/arch/async_posix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #define STACKSIZE       32768",
          "70: {",
          "71:     if (pthread_key_create(&posixctx, NULL) != 0",
          "72:             || pthread_key_create(&posixpool, NULL) != 0)",
          "",
          "[Removed Lines]",
          "69: int async_thread_local_init(void)",
          "",
          "[Added Lines]",
          "69: int async_global_init(void)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:     return 1;",
          "76: }",
          "78: int async_fibre_init(async_fibre *fibre)",
          "79: {",
          "80:     void *stack = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "78: int async_local_init(void)",
          "79: {",
          "80:     if (!async_set_ctx(NULL) || ! async_set_pool(NULL))",
          "81:         return 0;",
          "83:     return 1;",
          "84: }",
          "86: void async_local_cleanup(void)",
          "87: {",
          "88: }",
          "90: void async_global_cleanup(void)",
          "91: {",
          "92: }",
          "",
          "---------------"
        ],
        "crypto/async/arch/async_win.c||crypto/async/arch/async_win.c": [
          "File: crypto/async/arch/async_win.c -> crypto/async/arch/async_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     size_t max_size;",
          "65: };",
          "67: void async_start_func(void);",
          "69: int async_fibre_init_dispatcher(async_fibre *fibre)",
          "70: {",
          "71:     LPVOID dispatcher;",
          "75:     if (dispatcher == NULL) {",
          "76:         fibre->fibre = ConvertThreadToFiber(NULL);",
          "79:     } else {",
          "80:         fibre->fibre = dispatcher;",
          "81:     }",
          "",
          "[Removed Lines]",
          "73:     dispatcher =",
          "74:         (LPVOID) CRYPTO_get_thread_local(CRYPTO_THREAD_LOCAL_ASYNC_DISPATCH);",
          "77:         CRYPTO_set_thread_local(CRYPTO_THREAD_LOCAL_ASYNC_DISPATCH,",
          "78:                                 (void *)fibre->fibre);",
          "",
          "[Added Lines]",
          "67: static DWORD asyncwinpool = 0;",
          "68: static DWORD asyncwinctx = 0;",
          "69: static DWORD asyncwindispatch = 0;",
          "74: int async_global_init(void)",
          "75: {",
          "76:     asyncwinpool = TlsAlloc();",
          "77:     asyncwinctx = TlsAlloc();",
          "78:     asyncwindispatch = TlsAlloc();",
          "79:     if (asyncwinpool == TLS_OUT_OF_INDEXES || asyncwinctx == TLS_OUT_OF_INDEXES",
          "80:             || asyncwindispatch == TLS_OUT_OF_INDEXES) {",
          "81:         if (asyncwinpool != TLS_OUT_OF_INDEXES) {",
          "82:             TlsFree(asyncwinpool);",
          "83:         }",
          "84:         if (asyncwinctx != TLS_OUT_OF_INDEXES) {",
          "85:             TlsFree(asyncwinctx);",
          "86:         }",
          "87:         if (asyncwindispatch != TLS_OUT_OF_INDEXES) {",
          "88:             TlsFree(asyncwindispatch);",
          "89:         }",
          "90:         return 0;",
          "91:     }",
          "92:     return 1;",
          "93: }",
          "95: int async_local_init(void)",
          "96: {",
          "97:     return (TlsSetValue(asyncwinpool, NULL) != 0)",
          "98:         && (TlsSetValue(asyncwinctx, NULL) != 0)",
          "99:         && (TlsSetValue(asyncwindispatch, NULL) != 0);",
          "100: }",
          "102: void async_local_cleanup(void)",
          "103: {",
          "104:     async_ctx *ctx = async_get_ctx();",
          "105:     if (ctx != NULL) {",
          "106:         async_fibre *fibre = &ctx->dispatcher;",
          "107:         if(fibre != NULL && fibre->fibre != NULL && fibre->converted) {",
          "108:             ConvertFiberToThread();",
          "109:             fibre->fibre = NULL;",
          "110:         }",
          "111:     }",
          "112: }",
          "114: void async_global_cleanup(void)",
          "115: {",
          "116:     TlsFree(asyncwinpool);",
          "117:     TlsFree(asyncwinctx);",
          "118:     TlsFree(asyncwindispatch);",
          "119:     asyncwinpool = 0;",
          "120:     asyncwinctx = 0;",
          "121:     asyncwindispatch = 0;",
          "122: }",
          "128:     dispatcher = (LPVOID)TlsGetValue(asyncwindispatch);",
          "131:         if (fibre->fibre == NULL) {",
          "132:             fibre->converted = 0;",
          "133:             fibre->fibre = GetCurrentFiber();",
          "134:             if (fibre->fibre == NULL)",
          "135:                 return 0;",
          "136:         } else {",
          "137:             fibre->converted = 1;",
          "138:         }",
          "139:         if (TlsSetValue(asyncwindispatch, (LPVOID)fibre->fibre) == 0)",
          "140:             return 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "126: async_pool *async_get_pool(void)",
          "127: {",
          "130: }",
          "133: int async_set_pool(async_pool *pool)",
          "134: {",
          "137: }",
          "139: #endif",
          "",
          "[Removed Lines]",
          "128:     return (async_pool *)",
          "129:             CRYPTO_get_thread_local(CRYPTO_THREAD_LOCAL_ASYNC_POOL);",
          "135:     CRYPTO_set_thread_local(CRYPTO_THREAD_LOCAL_ASYNC_POOL, (void *)pool);",
          "136:     return 1;",
          "",
          "[Added Lines]",
          "190:     return (async_pool *)TlsGetValue(asyncwinpool);",
          "196:     return TlsSetValue(asyncwinpool, (LPVOID)pool) != 0;",
          "197: }",
          "199: async_ctx *async_get_ctx(void)",
          "200: {",
          "201:     return (async_ctx *)TlsGetValue(asyncwinctx);",
          "202: }",
          "204: int async_set_ctx(async_ctx *ctx)",
          "205: {",
          "206:     return TlsSetValue(asyncwinctx, (LPVOID)ctx) != 0;",
          "",
          "---------------"
        ],
        "crypto/async/arch/async_win.h||crypto/async/arch/async_win.h": [
          "File: crypto/async/arch/async_win.h -> crypto/async/arch/async_win.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: typedef struct async_fibre_st {",
          "68:     LPVOID fibre;",
          "69: } async_fibre;",
          "75: # define async_fibre_swapcontext(o,n,r) \\",
          "76:         (SwitchToFiber((n)->fibre), 1)",
          "77: # define async_fibre_makecontext(c) \\",
          "78:         ((c)->fibre = CreateFiber(0, async_start_func_win, 0))",
          "79: # define async_fibre_free(f)             (DeleteFiber((f)->fibre))",
          "81: int async_fibre_init_dispatcher(async_fibre *fibre);",
          "82: VOID CALLBACK async_start_func_win(PVOID unused);",
          "",
          "[Removed Lines]",
          "71: # define async_set_ctx(nctx) \\",
          "72:         (CRYPTO_set_thread_local(CRYPTO_THREAD_LOCAL_ASYNC_CTX, (void *)(nctx)))",
          "73: # define async_get_ctx() \\",
          "74:         ((async_ctx *)CRYPTO_get_thread_local(CRYPTO_THREAD_LOCAL_ASYNC_CTX))",
          "",
          "[Added Lines]",
          "69:     int converted;",
          "78: async_ctx *async_get_ctx(void);",
          "79: int async_set_ctx(async_ctx *ctx);",
          "",
          "---------------"
        ],
        "crypto/async/async.c||crypto/async/async.c": [
          "File: crypto/async/async.c -> crypto/async/async.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "331: int ASYNC_init(int init_thread, size_t max_size, size_t init_size)",
          "332: {",
          "334:         return 0;",
          "336:     if (init_thread)",
          "",
          "[Removed Lines]",
          "333:     if (!async_thread_local_init())",
          "",
          "[Added Lines]",
          "333:     if (!async_global_init())",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "349:         return 0;",
          "350:     }",
          "352:     pool = OPENSSL_zalloc(sizeof *pool);",
          "353:     if (pool == NULL) {",
          "354:         ASYNCerr(ASYNC_F_ASYNC_INIT_THREAD, ERR_R_MALLOC_FAILURE);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "352:     if (!async_local_init()) {",
          "353:         ASYNCerr(ASYNC_F_ASYNC_INIT_THREAD, ASYNC_R_INIT_FAILED);",
          "354:         return 0;",
          "355:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "404:     sk_ASYNC_JOB_free(pool->jobs);",
          "405:     OPENSSL_free(pool);",
          "406:     (void)async_set_pool(NULL);",
          "407:     async_ctx_free();",
          "408: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:     async_local_cleanup();",
          "",
          "---------------"
        ],
        "crypto/async/async_err.c||crypto/async/async_err.c": [
          "File: crypto/async/async_err.c -> crypto/async/async_err.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:     {ERR_REASON(ASYNC_R_CANNOT_CREATE_WAIT_PIPE), \"cannot create wait pipe\"},",
          "84:     {ERR_REASON(ASYNC_R_FAILED_TO_SET_POOL), \"failed to set pool\"},",
          "85:     {ERR_REASON(ASYNC_R_FAILED_TO_SWAP_CONTEXT), \"failed to swap context\"},",
          "86:     {ERR_REASON(ASYNC_R_INVALID_POOL_SIZE), \"invalid pool size\"},",
          "87:     {ERR_REASON(ASYNC_R_POOL_ALREADY_INITED), \"pool already inited\"},",
          "88:     {0, NULL}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86:     {ERR_REASON(ASYNC_R_INIT_FAILED), \"init failed\"},",
          "",
          "---------------"
        ],
        "crypto/async/async_locl.h||crypto/async/async_locl.h": [
          "File: crypto/async/async_locl.h -> crypto/async/async_locl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "86:     size_t max_size;",
          "87: };",
          "90: void async_start_func(void);",
          "91: int async_pipe(OSSL_ASYNC_FD *pipefds);",
          "92: int async_close_fd(OSSL_ASYNC_FD fd);",
          "",
          "[Removed Lines]",
          "89: int async_thread_local_init(void);",
          "",
          "[Added Lines]",
          "89: int async_global_init(void);",
          "90: int async_local_init(void);",
          "91: void async_local_cleanup(void);",
          "92: void async_global_cleanup(void);",
          "",
          "---------------"
        ],
        "include/openssl/async.h||include/openssl/async.h": [
          "File: include/openssl/async.h -> include/openssl/async.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "112: # define ASYNC_R_CANNOT_CREATE_WAIT_PIPE                  100",
          "113: # define ASYNC_R_FAILED_TO_SET_POOL                       101",
          "114: # define ASYNC_R_FAILED_TO_SWAP_CONTEXT                   102",
          "115: # define ASYNC_R_INVALID_POOL_SIZE                        103",
          "116: # define ASYNC_R_POOL_ALREADY_INITED                      104",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "115: # define ASYNC_R_INIT_FAILED                              105",
          "",
          "---------------"
        ],
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4661: ERR_load_ASYNC_strings                  5021 EXIST::FUNCTION:",
          "4662: ASYNC_unblock_pause                     5022 EXIST::FUNCTION:",
          "4663: ASYNC_block_pause                       5023 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4664: ASYNC_cleanup                           5024 EXIST::FUNCTION:",
          "4665: ASYNC_init                              5025 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97cacc537eba474d27dea0f96796b3b754e60034",
      "candidate_info": {
        "commit_hash": "97cacc537eba474d27dea0f96796b3b754e60034",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/97cacc537eba474d27dea0f96796b3b754e60034",
        "files": [
          "crypto/bn/Makefile",
          "util/libeay.num"
        ],
        "message": "make update.\n\nMake update with manual edit so EVP_PKEY_asn1_set_item uses the same\nordinal as 1.0.2.\n\nReviewed-by: Matt Caswell <matt@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4414: X509_VERIFY_PARAM_add1_host             4771 EXIST::FUNCTION:",
          "4415: EC_GROUP_get_mont_data                  4772 EXIST::FUNCTION:EC",
          "4416: i2d_re_X509_tbs                         4773 EXIST::FUNCTION:",
          "4419: FIPS_ecdsa_verify                       4776 NOEXIST::FUNCTION:",
          "4420: BN_security_bits                        4777 EXIST::FUNCTION:",
          "4421: FIPS_ecdsa_verify_ctx                   4778 NOEXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "4417: RSA_security_bits                       4774 EXIST::FUNCTION:RSA",
          "4418: FIPS_ecdsa_verify_digest                4775 NOEXIST::FUNCTION:",
          "",
          "[Added Lines]",
          "4417: EVP_PKEY_asn1_set_item                  4774 EXIST::FUNCTION:",
          "4418: RSA_security_bits                       4775 EXIST::FUNCTION:RSA",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2e19cb15e3d68c748ce3dc2b791be9a2fc14fd3",
      "candidate_info": {
        "commit_hash": "f2e19cb15e3d68c748ce3dc2b791be9a2fc14fd3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f2e19cb15e3d68c748ce3dc2b791be9a2fc14fd3",
        "files": [
          "crypto/evp/Makefile",
          "test/Makefile",
          "util/libeay.num"
        ],
        "message": "make update\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "util/libeay.num||util/libeay.num"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "util/libeay.num||util/libeay.num"
          ],
          "candidate": [
            "util/libeay.num||util/libeay.num"
          ]
        }
      },
      "candidate_diff": {
        "util/libeay.num||util/libeay.num": [
          "File: util/libeay.num -> util/libeay.num",
          "--- Hunk 1 ---",
          "[Context before]",
          "4570: ASN1_INTEGER_get_uint64                 4929 EXIST::FUNCTION:",
          "4571: ASN1_INTEGER_set_uint64                 4930 EXIST::FUNCTION:",
          "4572: PKCS5_pbe2_set_scrypt                   4931 EXIST::FUNCTION:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4573: PKCS8_set0_pbe                          4932 EXIST::FUNCTION:",
          "",
          "---------------"
        ]
      }
    }
  ]
}