{
  "cve_id": "CVE-2018-10360",
  "cve_desc": "The do_core_note function in readelf.c in libmagic.a in file 5.33 allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via a crafted ELF file.",
  "repo": "file/file",
  "patch_hash": "a642587a9c9e2dd7feacdf513c3643ce26ad3c22",
  "patch_info": {
    "commit_hash": "a642587a9c9e2dd7feacdf513c3643ce26ad3c22",
    "repo": "file/file",
    "commit_url": "https://github.com/file/file/commit/a642587a9c9e2dd7feacdf513c3643ce26ad3c22",
    "files": [
      "src/readelf.c"
    ],
    "message": "Avoid reading past the end of buffer (Rui Reis)",
    "before_after_code_files": [
      "src/readelf.c||src/readelf.c"
    ]
  },
  "patch_diff": {
    "src/readelf.c||src/readelf.c": [
      "File: src/readelf.c -> src/readelf.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"file.h\"",
      "29: #ifndef lint",
      "31: #endif",
      "33: #ifdef BUILTIN_ELF",
      "",
      "[Removed Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.142 2018/05/24 18:08:01 christos Exp $\")",
      "",
      "[Added Lines]",
      "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.143 2018/06/09 16:00:06 christos Exp $\")",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "843:     cname = (unsigned char *)",
      "844:         &nbuf[doff + prpsoffsets(i)];",
      "846:      continue;",
      "",
      "[Removed Lines]",
      "845:     for (cp = cname; *cp && isprint(*cp); cp++)",
      "",
      "[Added Lines]",
      "845:     for (cp = cname; cp < nbuf + size && *cp",
      "846:         && isprint(*cp); cp++)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "9109a696f3289ba00eaa222fd432755ec4287e28",
      "candidate_info": {
        "commit_hash": "9109a696f3289ba00eaa222fd432755ec4287e28",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/9109a696f3289ba00eaa222fd432755ec4287e28",
        "files": [
          "src/readelf.c",
          "src/readelf.h"
        ],
        "message": "- add parsing for dynamic sections - set or clear the mode execute bits depending on DF_1_PIE - fix some casts",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c",
          "src/readelf.h||src/readelf.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.141 2018/04/12 16:50:52 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.142 2018/05/24 18:08:01 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63: #define MAX_PHNUM 128",
          "64: #define MAX_SHNUM 32768",
          "67: private int",
          "68: toomany(struct magic_set *ms, const char *name, uint16_t num)",
          "69: {",
          "72:   return -1;",
          "73:  return 0;",
          "74: }",
          "",
          "[Removed Lines]",
          "65: #define SIZE_UNKNOWN ((off_t)-1)",
          "70:  if (file_printf(ms, \", too many %s (%u)\", name, num",
          "71:      ) == -1)",
          "",
          "[Added Lines]",
          "65: #define SIZE_UNKNOWN CAST(off_t, -1)",
          "70:  if (file_printf(ms, \", too many %s (%u)\", name, num) == -1)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "143: #define elf_getu64(swap, value) getu64(swap, value)",
          "145: #define xsh_addr (clazz == ELFCLASS32   \\",
          "148: #define xsh_sizeof (clazz == ELFCLASS32   \\",
          "149:     ? sizeof(sh32)    \\",
          "150:     : sizeof(sh64))",
          "152:     ? elf_getu32(swap, sh32.sh_size) \\",
          "155:     ? elf_getu32(swap, sh32.sh_offset) \\",
          "157: #define xsh_type (clazz == ELFCLASS32   \\",
          "158:     ? elf_getu32(swap, sh32.sh_type) \\",
          "159:     : elf_getu32(swap, sh64.sh_type))",
          "160: #define xsh_name     (clazz == ELFCLASS32   \\",
          "161:     ? elf_getu32(swap, sh32.sh_name) \\",
          "162:     : elf_getu32(swap, sh64.sh_name))",
          "163: #define xph_addr (clazz == ELFCLASS32   \\",
          "166: #define xph_sizeof (clazz == ELFCLASS32   \\",
          "167:     ? sizeof(ph32)    \\",
          "168:     : sizeof(ph64))",
          "169: #define xph_type (clazz == ELFCLASS32   \\",
          "170:     ? elf_getu32(swap, ph32.p_type) \\",
          "171:     : elf_getu32(swap, ph64.p_type))",
          "173:     ? elf_getu32(swap, ph32.p_offset) \\",
          "186:     ? elf_getu32(swap, ph32.p_filesz) \\",
          "187:     : elf_getu64(swap, ph64.p_filesz)))",
          "192:     ? elf_getu32(swap, ph32.p_memsz) \\",
          "194: #define xnh_sizeof (clazz == ELFCLASS32   \\",
          "195:     ? sizeof(nh32)    \\",
          "196:     : sizeof(nh64))",
          "",
          "[Removed Lines]",
          "146:     ? (void *)&sh32   \\",
          "147:     : (void *)&sh64)",
          "151: #define xsh_size (size_t)(clazz == ELFCLASS32  \\",
          "153:     : elf_getu64(swap, sh64.sh_size))",
          "154: #define xsh_offset (off_t)(clazz == ELFCLASS32  \\",
          "156:     : elf_getu64(swap, sh64.sh_offset))",
          "164:     ? (void *) &ph32   \\",
          "165:     : (void *) &ph64)",
          "172: #define xph_offset (off_t)(clazz == ELFCLASS32  \\",
          "174:     : elf_getu64(swap, ph64.p_offset))",
          "175: #define xph_align (size_t)((clazz == ELFCLASS32  \\",
          "176:     ? (off_t) (ph32.p_align ?   \\",
          "177:        elf_getu32(swap, ph32.p_align) : 4) \\",
          "178:     : (off_t) (ph64.p_align ?  \\",
          "179:        elf_getu64(swap, ph64.p_align) : 4)))",
          "180: #define xph_vaddr (size_t)((clazz == ELFCLASS32  \\",
          "181:     ? (off_t) (ph32.p_vaddr ?   \\",
          "182:        elf_getu32(swap, ph32.p_vaddr) : 4) \\",
          "183:     : (off_t) (ph64.p_vaddr ?  \\",
          "184:        elf_getu64(swap, ph64.p_vaddr) : 4)))",
          "185: #define xph_filesz (size_t)((clazz == ELFCLASS32  \\",
          "188: #define xnh_addr (clazz == ELFCLASS32   \\",
          "189:     ? (void *)&nh32   \\",
          "190:     : (void *)&nh64)",
          "191: #define xph_memsz (size_t)((clazz == ELFCLASS32  \\",
          "193:     : elf_getu64(swap, ph64.p_memsz)))",
          "",
          "[Added Lines]",
          "145:     ? CAST(void *, &sh32)   \\",
          "146:     : CAST(void *, &sh64))",
          "150: #define xsh_size CAST(size_t, (clazz == ELFCLASS32 \\",
          "152:     : elf_getu64(swap, sh64.sh_size)))",
          "153: #define xsh_offset CAST(off_t, (clazz == ELFCLASS32 \\",
          "155:     : elf_getu64(swap, sh64.sh_offset)))",
          "164:     ? CAST(void *, &ph32)   \\",
          "165:     : CAST(void *, &ph64))",
          "172: #define xph_offset CAST(off_t, (clazz == ELFCLASS32 \\",
          "174:     : elf_getu64(swap, ph64.p_offset)))",
          "175: #define xph_align CAST(size_t, (clazz == ELFCLASS32 \\",
          "176:     ? CAST(off_t, (ph32.p_align ?   \\",
          "177:        elf_getu32(swap, ph32.p_align) : 4))\\",
          "178:     : CAST(off_t, (ph64.p_align ?  \\",
          "179:        elf_getu64(swap, ph64.p_align) : 4))))",
          "180: #define xph_vaddr CAST(size_t, (clazz == ELFCLASS32 \\",
          "181:     ? CAST(off_t, (ph32.p_vaddr ?   \\",
          "182:        elf_getu32(swap, ph32.p_vaddr) : 4))\\",
          "183:     : CAST(off_t, (ph64.p_vaddr ?  \\",
          "184:        elf_getu64(swap, ph64.p_vaddr) : 4))))",
          "185: #define xph_filesz CAST(size_t, (clazz == ELFCLASS32 \\",
          "188: #define xph_memsz CAST(size_t, ((clazz == ELFCLASS32 \\",
          "190:     : elf_getu64(swap, ph64.p_memsz))))",
          "191: #define xnh_addr (clazz == ELFCLASS32   \\",
          "192:     ? CAST(void *, &nh32)   \\",
          "193:     : CAST(void *, &nh64))",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "203: #define xnh_descsz (clazz == ELFCLASS32   \\",
          "204:     ? elf_getu32(swap, nh32.n_descsz) \\",
          "205:     : elf_getu32(swap, nh64.n_descsz))",
          "209: #define xcap_addr (clazz == ELFCLASS32   \\",
          "212: #define xcap_sizeof (clazz == ELFCLASS32   \\",
          "215: #define xcap_tag (clazz == ELFCLASS32   \\",
          "216:     ? elf_getu32(swap, cap32.c_tag) \\",
          "217:     : elf_getu64(swap, cap64.c_tag))",
          "218: #define xcap_val (clazz == ELFCLASS32   \\",
          "219:     ? elf_getu32(swap, cap32.c_un.c_val) \\",
          "220:     : elf_getu64(swap, cap64.c_un.c_val))",
          "221: #define xauxv_addr (clazz == ELFCLASS32   \\",
          "224: #define xauxv_sizeof (clazz == ELFCLASS32   \\",
          "225:     ? sizeof(auxv32)   \\",
          "226:     : sizeof(auxv64))",
          "",
          "[Removed Lines]",
          "206: #define prpsoffsets(i) (clazz == ELFCLASS32   \\",
          "207:     ? prpsoffsets32[i]   \\",
          "208:     : prpsoffsets64[i])",
          "210:     ? (void *)&cap32   \\",
          "211:     : (void *)&cap64)",
          "213:     ? sizeof cap32    \\",
          "214:     : sizeof cap64)",
          "222:     ? (void *)&auxv32   \\",
          "223:     : (void *)&auxv64)",
          "",
          "[Added Lines]",
          "207: #define xdh_addr (clazz == ELFCLASS32   \\",
          "208:     ? CAST(void *, &dh32)   \\",
          "209:     : CAST(void *, &dh64))",
          "210: #define xdh_sizeof (clazz == ELFCLASS32   \\",
          "211:     ? sizeof(dh32)    \\",
          "212:     : sizeof(dh64))",
          "213: #define xdh_tag  (clazz == ELFCLASS32   \\",
          "214:     ? elf_getu32(swap, dh32.d_tag)  \\",
          "215:     : elf_getu64(swap, dh64.d_tag))",
          "216: #define xdh_val  (clazz == ELFCLASS32   \\",
          "217:     ? elf_getu32(swap, dh32.d_un.d_val) \\",
          "218:     : elf_getu64(swap, dh64.d_un.d_val))",
          "221:     ? CAST(void *, &cap32)   \\",
          "222:     : CAST(void *, &cap64))",
          "224:     ? sizeof(cap32)   \\",
          "225:     : sizeof(cap64))",
          "234:     ? CAST(void *, &auxv32)  \\",
          "235:     : CAST(void *, &auxv64))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "231:     ? elf_getu32(swap, auxv32.a_v)  \\",
          "232:     : elf_getu64(swap, auxv64.a_v))",
          "234: #ifdef ELFCORE",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246: #define prpsoffsets(i) (clazz == ELFCLASS32   \\",
          "247:     ? prpsoffsets32[i]   \\",
          "248:     : prpsoffsets64[i])",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "267: };",
          "272: #define NOFFSETS (clazz == ELFCLASS32 ? NOFFSETS32 : NOFFSETS64)",
          "",
          "[Removed Lines]",
          "269: #define NOFFSETS32 (sizeof prpsoffsets32 / sizeof prpsoffsets32[0])",
          "270: #define NOFFSETS64 (sizeof prpsoffsets64 / sizeof prpsoffsets64[0])",
          "",
          "[Added Lines]",
          "285: #define NOFFSETS32 (sizeof(prpsoffsets32) / sizeof(prpsoffsets32[0]))",
          "286: #define NOFFSETS64 (sizeof(prpsoffsets64) / sizeof(prpsoffsets64[0]))",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "348:  for ( ; num; num--) {",
          "350:    file_badread(ms);",
          "351:    return -1;",
          "352:   }",
          "",
          "[Removed Lines]",
          "349:   if (pread(fd, xph_addr, xph_sizeof, off) < (ssize_t)xph_sizeof) {",
          "",
          "[Added Lines]",
          "365:   if (pread(fd, xph_addr, xph_sizeof, off) <",
          "366:       CAST(ssize_t, xph_sizeof)) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "389: do_note_netbsd_version(struct magic_set *ms, int swap, void *v)",
          "390: {",
          "391:  uint32_t desc;",
          "393:  desc = elf_getu32(swap, desc);",
          "395:  if (file_printf(ms, \", for NetBSD\") == -1)",
          "",
          "[Removed Lines]",
          "392:  (void)memcpy(&desc, v, sizeof(desc));",
          "",
          "[Added Lines]",
          "409:  memcpy(&desc, v, sizeof(desc));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "435: {",
          "436:  uint32_t desc;",
          "439:  desc = elf_getu32(swap, desc);",
          "440:  if (file_printf(ms, \", for FreeBSD\") == -1)",
          "441:   return;",
          "",
          "[Removed Lines]",
          "438:  (void)memcpy(&desc, v, sizeof(desc));",
          "",
          "[Added Lines]",
          "455:  memcpy(&desc, v, sizeof(desc));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "533:   }",
          "534:   if (file_printf(ms, \", BuildID[%s]=\", btype) == -1)",
          "535:    return 1;",
          "537:   for (i = 0; i < descsz; i++)",
          "538:       if (file_printf(ms, \"%02x\", desc[i]) == -1)",
          "539:    return 1;",
          "",
          "[Removed Lines]",
          "536:   (void)memcpy(desc, &nbuf[doff], descsz);",
          "",
          "[Added Lines]",
          "553:   memcpy(desc, &nbuf[doff], descsz);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "557:  if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&",
          "558:      type == NT_GNU_VERSION && descsz == 16) {",
          "559:   uint32_t desc[4];",
          "563:   if (file_printf(ms, \", for GNU/\") == -1)",
          "",
          "[Removed Lines]",
          "560:   (void)memcpy(desc, &nbuf[doff], sizeof(desc));",
          "",
          "[Added Lines]",
          "577:   memcpy(desc, &nbuf[doff], sizeof(desc));",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "625:   if (file_printf(ms, \", for DragonFly\") == -1)",
          "626:    return 1;",
          "628:   desc = elf_getu32(swap, desc);",
          "629:   if (file_printf(ms, \" %d.%d.%d\", desc / 100000,",
          "630:       desc / 10000 % 10, desc % 10000) == -1)",
          "",
          "[Removed Lines]",
          "627:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
          "",
          "[Added Lines]",
          "644:   memcpy(&desc, &nbuf[doff], sizeof(desc));",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "654:   int did = 0;",
          "658:   desc = elf_getu32(swap, desc);",
          "660:   if (desc && file_printf(ms, \", PaX: \") == -1)",
          "",
          "[Removed Lines]",
          "657:   (void)memcpy(&desc, &nbuf[doff], sizeof(desc));",
          "",
          "[Added Lines]",
          "674:   memcpy(&desc, &nbuf[doff], sizeof(desc));",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "954:  nval = 0;",
          "955:  for (size_t off = 0; off + elsize <= descsz; off += elsize) {",
          "958:   if (nval++ >= 50) {",
          "959:    file_error(ms, 0, \"Too many ELF Auxv elements\");",
          "",
          "[Removed Lines]",
          "956:   (void)memcpy(xauxv_addr, &nbuf[doff + off], xauxv_sizeof);",
          "",
          "[Added Lines]",
          "973:   memcpy(xauxv_addr, &nbuf[doff + off], xauxv_sizeof);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1017: #endif",
          "1018: }",
          "1020: private size_t",
          "1021: donote(struct magic_set *ms, void *vbuf, size_t offset, size_t size,",
          "1022:     int clazz, int swap, size_t align, int *flags, uint16_t *notecount,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1037: private size_t",
          "1038: dodynamic(struct magic_set *ms, void *vbuf, size_t offset, size_t size,",
          "1039:     int clazz, int swap)",
          "1040: {",
          "1041:  Elf32_Dyn dh32;",
          "1042:  Elf64_Dyn dh64;",
          "1043:  unsigned char *dbuf = CAST(unsigned char *, vbuf);",
          "1045:  if (xdh_sizeof + offset > size) {",
          "1049:   return xdh_sizeof + offset;",
          "1050:  }",
          "1052:  memcpy(xdh_addr, &dbuf[offset], xdh_sizeof);",
          "1053:  offset += xdh_sizeof;",
          "1055:  switch (xdh_tag) {",
          "1056:  case DT_FLAGS_1:",
          "1057:   if (xdh_val == DF_1_PIE)",
          "1058:    ms->mode |= 0111;",
          "1059:   else",
          "1060:    ms->mode &= ~0111;",
          "1061:   break;",
          "1062:  default:",
          "1063:   break;",
          "1064:  }",
          "1065:  return offset;",
          "1066: }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1039:   return xnh_sizeof + offset;",
          "1040:  }",
          "1043:  offset += xnh_sizeof;",
          "1045:  namesz = xnh_namesz;",
          "",
          "[Removed Lines]",
          "1042:  (void)memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);",
          "",
          "[Added Lines]",
          "1091:  memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1053:  }",
          "1055:  if (namesz & 0x80000000) {",
          "1058:      return 0;",
          "1059:  }",
          "1061:  if (descsz & 0x80000000) {",
          "1064:      return 0;",
          "1065:  }",
          "",
          "[Removed Lines]",
          "1056:      (void)file_printf(ms, \", bad note name size %#lx\",",
          "1057:   (unsigned long)namesz);",
          "1062:      (void)file_printf(ms, \", bad note description size %#lx\",",
          "1063:   (unsigned long)descsz);",
          "",
          "[Added Lines]",
          "1105:      file_printf(ms, \", bad note name size %#lx\",",
          "1106:   CAST(unsigned long, namesz));",
          "1111:      file_printf(ms, \", bad note description size %#lx\",",
          "1112:   CAST(unsigned long, descsz));",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1114:    return offset;",
          "1115:  }",
          "1118:   if (descsz > 100)",
          "1119:    descsz = 100;",
          "1120:   switch (xnh_type) {",
          "1121:       case NT_NETBSD_VERSION:",
          "1122:    return offset;",
          "1123:   case NT_NETBSD_MARCH:",
          "1130:    break;",
          "1131:   case NT_NETBSD_CMODEL:",
          "1138:    break;",
          "1139:   case NT_NETBSD_EMULATION:",
          "1146:    break;",
          "1147:   default:",
          "1148:    if (*flags & FLAGS_DID_NETBSD_UNKNOWN)",
          "",
          "[Removed Lines]",
          "1117:  if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {",
          "1124:    if (*flags & FLAGS_DID_NETBSD_MARCH)",
          "1125:     return offset;",
          "1127:    if (file_printf(ms, \", compiled for: %.*s\",",
          "1128:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
          "1129:     return offset;",
          "1132:    if (*flags & FLAGS_DID_NETBSD_CMODEL)",
          "1133:     return offset;",
          "1135:    if (file_printf(ms, \", compiler model: %.*s\",",
          "1136:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
          "1137:     return offset;",
          "1140:    if (*flags & FLAGS_DID_NETBSD_EMULATION)",
          "1141:     return offset;",
          "1143:    if (file_printf(ms, \", emulation: %.*s\",",
          "1144:        (int)descsz, (const char *)&nbuf[doff]) == -1)",
          "1145:     return offset;",
          "",
          "[Added Lines]",
          "1166:  if (namesz == 7 && strcmp(CAST(char *, &nbuf[noff]), \"NetBSD\") == 0) {",
          "1167:   int descw, flag;",
          "1168:   const char *str, *tag;",
          "1175:    flag = FLAGS_DID_NETBSD_MARCH;",
          "1176:    tag = \"compiled for\";",
          "1179:    flag = FLAGS_DID_NETBSD_CMODEL;",
          "1180:    tag = \"compiler model\";",
          "1183:    flag = FLAGS_DID_NETBSD_EMULATION;",
          "1184:    tag = \"emulation:\";",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1151:    if (file_printf(ms, \", note=%u\", xnh_type) == -1)",
          "1152:     return offset;",
          "1154:   }",
          "1155:   return offset;",
          "1156:  }",
          "",
          "[Removed Lines]",
          "1153:    break;",
          "",
          "[Added Lines]",
          "1192:    return offset;",
          "1195:   if (*flags & flag)",
          "1196:    return offset;",
          "1197:   str = CAST(const char *, &nbuf[doff]);",
          "1198:   descw = CAST(int, descsz);",
          "1200:   file_printf(ms, \", %s: %.*s\", tag, descw, str);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1234:  if (pread(fd, xsh_addr, xsh_sizeof, CAST(off_t, (off + size * strtab)))",
          "1236:   if (file_printf(ms, \", missing section headers\") == -1)",
          "1237:    return -1;",
          "1238:   return 0;",
          "",
          "[Removed Lines]",
          "1235:      < (ssize_t)xsh_sizeof) {",
          "",
          "[Added Lines]",
          "1281:      < CAST(ssize_t, xsh_sizeof)) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1242:  for ( ; num; num--) {",
          "1245:    file_badread(ms);",
          "1246:    return -1;",
          "1247:   }",
          "",
          "[Removed Lines]",
          "1244:   if ((namesize = pread(fd, name, sizeof(name) - 1, name_off + xsh_name)) == -1) {",
          "",
          "[Added Lines]",
          "1290:   if ((namesize = pread(fd, name, sizeof(name) - 1,",
          "1291:       name_off + xsh_name)) == -1) {",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1251:    stripped = 0;",
          "1252:   }",
          "1255:    file_badread(ms);",
          "1256:    return -1;",
          "1257:   }",
          "",
          "[Removed Lines]",
          "1254:   if (pread(fd, xsh_addr, xsh_sizeof, off) < (ssize_t)xsh_sizeof) {",
          "",
          "[Added Lines]",
          "1301:   if (pread(fd, xsh_addr, xsh_sizeof, off) <",
          "1302:       CAST(ssize_t, xsh_sizeof)) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1278:   switch (xsh_type) {",
          "1279:   case SHT_NOTE:",
          "1282:     if (file_printf(ms,",
          "1283:         \", note offset/size %#\" INTMAX_T_FORMAT",
          "1284:         \"x+%#\" INTMAX_T_FORMAT \"x exceeds\"",
          "1285:         \" file size %#\" INTMAX_T_FORMAT \"x\",",
          "1288:      return -1;",
          "1289:     return 0;",
          "1290:    }",
          "",
          "[Removed Lines]",
          "1280:    if ((uintmax_t)(xsh_size + xsh_offset) >",
          "1281:        (uintmax_t)fsize) {",
          "1286:         (uintmax_t)xsh_offset, (uintmax_t)xsh_size,",
          "1287:         (uintmax_t)fsize) == -1)",
          "",
          "[Added Lines]",
          "1328:    if (CAST(uintmax_t, (xsh_size + xsh_offset)) >",
          "1329:        CAST(uintmax_t, fsize)) {",
          "1334:         CAST(uintmax_t, xsh_offset),",
          "1335:         CAST(uintmax_t, xsh_size),",
          "1336:         CAST(uintmax_t, fsize)) == -1)",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1294:     return -1;",
          "1295:    }",
          "1296:    if (pread(fd, nbuf, xsh_size, xsh_offset) <",
          "1298:     file_badread(ms);",
          "1299:     free(nbuf);",
          "1300:     return -1;",
          "",
          "[Removed Lines]",
          "1297:        (ssize_t)xsh_size) {",
          "",
          "[Added Lines]",
          "1346:        CAST(ssize_t, xsh_size)) {",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1303:    noff = 0;",
          "1304:    for (;;) {",
          "1306:      break;",
          "1308:         xsh_size, clazz, swap, 4, flags, notecount,",
          "1309:         fd, 0, 0, 0);",
          "1310:     if (noff == 0)",
          "",
          "[Removed Lines]",
          "1305:     if (noff >= (off_t)xsh_size)",
          "1307:     noff = donote(ms, nbuf, (size_t)noff,",
          "",
          "[Added Lines]",
          "1354:     if (noff >= CAST(off_t, xsh_size))",
          "1356:     noff = donote(ms, nbuf, CAST(size_t, noff),",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1327:    if (nbadcap > 5)",
          "1328:     break;",
          "1330:     file_badseek(ms);",
          "1331:     return -1;",
          "1332:    }",
          "",
          "[Removed Lines]",
          "1329:    if (lseek(fd, xsh_offset, SEEK_SET) == (off_t)-1) {",
          "",
          "[Added Lines]",
          "1378:    if (lseek(fd, xsh_offset, SEEK_SET)",
          "1379:        == CAST(off_t, -1)) {",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1335:     Elf32_Cap cap32;",
          "1336:     Elf64_Cap cap64;",
          "1340:      break;",
          "1343:      file_badread(ms);",
          "1344:      return -1;",
          "1345:     }",
          "",
          "[Removed Lines]",
          "1338:         MAX(sizeof cap32, sizeof cap64)];",
          "1339:     if ((coff += xcap_sizeof) > (off_t)xsh_size)",
          "1341:     if (read(fd, cbuf, (size_t)xcap_sizeof) !=",
          "1342:         (ssize_t)xcap_sizeof) {",
          "",
          "[Added Lines]",
          "1388:         MAX(sizeof(cap32), sizeof(cap64))];",
          "1389:     if ((coff += xcap_sizeof) >",
          "1390:         CAST(off_t, xsh_size))",
          "1392:     if (read(fd, cbuf, CAST(size_t, xcap_sizeof)) !=",
          "1393:         CAST(ssize_t, xcap_sizeof)) {",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1373: #endif",
          "1374:      break;",
          "1375:     }",
          "1377:     switch (xcap_tag) {",
          "1378:     case CA_SUNW_NULL:",
          "1379:      break;",
          "",
          "[Removed Lines]",
          "1376:     (void)memcpy(xcap_addr, cbuf, xcap_sizeof);",
          "",
          "[Added Lines]",
          "1427:     memcpy(xcap_addr, cbuf, xcap_sizeof);",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1388:          \", with unknown capability \"",
          "1389:          \"%#\" INT64_T_FORMAT \"x = %#\"",
          "1390:          INT64_T_FORMAT \"x\",",
          "1393:       return -1;",
          "1394:      if (nbadcap++ > 2)",
          "1395:       coff = xsh_size;",
          "",
          "[Removed Lines]",
          "1391:          (unsigned long long)xcap_tag,",
          "1392:          (unsigned long long)xcap_val) == -1)",
          "",
          "[Added Lines]",
          "1442:          CAST(unsigned long long, xcap_tag),",
          "1443:          CAST(unsigned long long, xcap_val))",
          "1444:          == -1)",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1442:     if (file_printf(ms,",
          "1443:         \" unknown hardware capability %#\"",
          "1444:         INT64_T_FORMAT \"x\",",
          "1446:      return -1;",
          "1447:   } else {",
          "1448:    if (file_printf(ms,",
          "1449:        \" hardware capability %#\" INT64_T_FORMAT \"x\",",
          "1451:     return -1;",
          "1452:   }",
          "1453:  }",
          "",
          "[Removed Lines]",
          "1445:         (unsigned long long)cap_hw1) == -1)",
          "1450:        (unsigned long long)cap_hw1) == -1)",
          "",
          "[Added Lines]",
          "1497:         CAST(unsigned long long, cap_hw1)) == -1)",
          "1502:        CAST(unsigned long long, cap_hw1)) == -1)",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1464:    if (file_printf(ms,",
          "1465:        \", with unknown software capability %#\"",
          "1466:        INT64_T_FORMAT \"x\",",
          "1468:     return -1;",
          "1469:  }",
          "1470:  return 0;",
          "",
          "[Removed Lines]",
          "1467:        (unsigned long long)cap_sf1) == -1)",
          "",
          "[Added Lines]",
          "1519:        CAST(unsigned long long, cap_sf1)) == -1)",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1483:  Elf32_Phdr ph32;",
          "1484:  Elf64_Phdr ph64;",
          "1485:  const char *linking_style = \"statically\";",
          "1487:  unsigned char nbuf[BUFSIZ];",
          "1488:  char ibuf[BUFSIZ];",
          "1489:  ssize_t bufsize;",
          "1490:  size_t offset, align, len;",
          "",
          "[Removed Lines]",
          "1486:  const char *interp = \"\";",
          "",
          "[Added Lines]",
          "1540:  char interp[BUFSIZ];",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1495:   return 0;",
          "1496:  }",
          "1498:    for ( ; num; num--) {",
          "1500:    file_badread(ms);",
          "1501:    return -1;",
          "1502:   }",
          "",
          "[Removed Lines]",
          "1499:   if (pread(fd, xph_addr, xph_sizeof, off) < (ssize_t)xph_sizeof) {",
          "",
          "[Added Lines]",
          "1550:  interp[0] = '\\0';",
          "1552:   int doread;",
          "1553:   if (pread(fd, xph_addr, xph_sizeof, off) <",
          "1554:       CAST(ssize_t, xph_sizeof)) {",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1509:   switch (xph_type) {",
          "1510:   case PT_DYNAMIC:",
          "1511:    linking_style = \"dynamically\";",
          "1512:    break;",
          "1513:   case PT_NOTE:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1567:    doread = 1;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1517:        align < 4) {",
          "1518:     if (file_printf(ms,",
          "1519:         \", invalid note alignment %#lx\",",
          "1521:      return -1;",
          "1522:     align = 4;",
          "1523:    }",
          "1525:   case PT_INTERP:",
          "1533:    break;",
          "1534:   default:",
          "1535:    if (fsize != SIZE_UNKNOWN && xph_offset > fsize) {",
          "1537:     continue;",
          "",
          "[Removed Lines]",
          "1520:         (unsigned long)align) == -1)",
          "1526:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1527:        : sizeof(nbuf);",
          "1528:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "1529:    if (bufsize == -1) {",
          "1530:     file_badread(ms);",
          "1531:     return -1;",
          "1532:    }",
          "",
          "[Added Lines]",
          "1576:         CAST(unsigned long, align)) == -1)",
          "1582:    doread = 1;",
          "1585:    doread = 0;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1539:    break;",
          "1540:   }",
          "1543:   switch (xph_type) {",
          "1544:   case PT_INTERP:",
          "1545:    if (bufsize && nbuf[0]) {",
          "1546:     nbuf[bufsize - 1] = '\\0';",
          "1548:    } else",
          "1550:    break;",
          "1551:   case PT_NOTE:",
          "",
          "[Removed Lines]",
          "1547:     interp = (const char *)nbuf;",
          "1549:     interp = \"*empty*\";",
          "",
          "[Added Lines]",
          "1593:   if (doread) {",
          "1594:    len = xph_filesz < sizeof(nbuf) ? xph_filesz",
          "1595:        : sizeof(nbuf);",
          "1596:    bufsize = pread(fd, nbuf, len, xph_offset);",
          "1597:    if (bufsize == -1) {",
          "1598:     file_badread(ms);",
          "1599:     return -1;",
          "1600:    }",
          "1601:   } else",
          "1602:    len = 0;",
          "1606:   case PT_DYNAMIC:",
          "1607:    offset = 0;",
          "1608:    for (;;) {",
          "1609:     if (offset >= (size_t)bufsize)",
          "1610:      break;",
          "1611:     offset = dodynamic(ms, nbuf, offset,",
          "1612:         CAST(size_t, bufsize), clazz, swap);",
          "1613:     if (offset == 0)",
          "1614:      break;",
          "1615:    }",
          "1616:    break;",
          "1621:     memcpy(interp, nbuf, bufsize);",
          "1623:     strlcpy(interp, \"*empty*\", sizeof(interp));",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1558:     if (offset >= (size_t)bufsize)",
          "1559:      break;",
          "1560:     offset = donote(ms, nbuf, offset,",
          "1562:         flags, notecount, fd, 0, 0, 0);",
          "1563:     if (offset == 0)",
          "1564:      break;",
          "",
          "[Removed Lines]",
          "1561:         (size_t)bufsize, clazz, swap, align,",
          "",
          "[Added Lines]",
          "1635:         CAST(size_t, bufsize), clazz, swap, align,",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1587:  size_t nbytes = b->flen;",
          "1588:  union {",
          "1589:   int32_t l;",
          "1591:  } u;",
          "1592:  int clazz;",
          "1593:  int swap;",
          "",
          "[Removed Lines]",
          "1590:   char c[sizeof (int32_t)];",
          "",
          "[Added Lines]",
          "1664:   char c[sizeof(int32_t)];",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1619:   fd = file_pipe2file(ms, fd, buf, nbytes);",
          "1621:  if (fstat(fd, &st) == -1) {",
          "",
          "[Removed Lines]",
          "1618:  if((lseek(fd, (off_t)0, SEEK_SET) == (off_t)-1) && (errno == ESPIPE))",
          "",
          "[Added Lines]",
          "1692:  if((lseek(fd, CAST(off_t, 0), SEEK_SET) == CAST(off_t, -1))",
          "1693:      && (errno == ESPIPE))",
          "",
          "---------------"
        ],
        "src/readelf.h||src/readelf.h": [
          "File: src/readelf.h -> src/readelf.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "430: #define AV_386_SSE4_1  0x00800000",
          "431: #define AV_386_SSE4_2  0x01000000",
          "433: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "436: typedef struct {",
          "438:  union {",
          "439:   Elf32_Addr d_ptr;",
          "440:   Elf32_Word d_val;",
          "441:  } d_un;",
          "442: } Elf32_Dyn;",
          "444: typedef struct {",
          "446:  union {",
          "447:   Elf64_Addr d_ptr;",
          "448:   Elf64_Xword d_val;",
          "449:  } d_un;",
          "450: } Elf64_Dyn;",
          "487: #define DT_NUM  34",
          "496: #define DT_HIOS  0x6fffffff",
          "498: #define DT_HIPROC 0x7fffffff",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f866ff070bd81406f4e92a08273b5de64e2fe38",
      "candidate_info": {
        "commit_hash": "2f866ff070bd81406f4e92a08273b5de64e2fe38",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/2f866ff070bd81406f4e92a08273b5de64e2fe38",
        "files": [
          "src/readelf.c"
        ],
        "message": "better error handling, found by coverity.",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.147 2018/08/01 09:56:24 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.148 2018/08/01 10:02:20 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "922:  offset = get_offset_from_virtaddr(ms, swap, clazz, fd, ph_off, ph_num,",
          "923:      fsize, virtaddr);",
          "925:   file_badread(ms);",
          "926:   return 0;",
          "927:  }",
          "",
          "[Removed Lines]",
          "924:  if ((buflen = pread(fd, buf, CAST(size_t, buflen), offset)) <= 0) {",
          "",
          "[Added Lines]",
          "924:  if (offset < 0 ||",
          "925:      (buflen = pread(fd, buf, CAST(size_t, buflen), offset)) <= 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3b5b60de66400a74e21cc35d4101f689ea58420d",
      "candidate_info": {
        "commit_hash": "3b5b60de66400a74e21cc35d4101f689ea58420d",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/3b5b60de66400a74e21cc35d4101f689ea58420d",
        "files": [
          "src/cdf.c",
          "src/readelf.c"
        ],
        "message": "de-lint.",
        "before_after_code_files": [
          "src/cdf.c||src/cdf.c",
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/cdf.c||src/cdf.c": [
          "File: src/cdf.c -> src/cdf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: #include \"file.h\"",
          "37: #ifndef lint",
          "39: #endif",
          "41: #include <assert.h>",
          "",
          "[Removed Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.106 2017/04/30 17:05:02 christos Exp $\")",
          "",
          "[Added Lines]",
          "38: FILE_RCSID(\"@(#)$File: cdf.c,v 1.107 2017/09/08 13:44:09 christos Exp $\")",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.138 2017/08/27 07:55:02 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.139 2017/09/08 13:44:09 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "726:        \"gid=%u, nlwps=%u, lwp=%u (signal %u/code %u)\",",
          "727:        file_printable(sbuf, sizeof(sbuf),",
          "728:        CAST(char *, pi.cpi_name)),",
          "730:        elf_getu32(swap, pi.cpi_euid),",
          "731:        elf_getu32(swap, pi.cpi_egid),",
          "732:        elf_getu32(swap, pi.cpi_nlwps),",
          "734:        elf_getu32(swap, pi.cpi_signo),",
          "735:        elf_getu32(swap, pi.cpi_sigcode)) == -1)",
          "736:     return 1;",
          "",
          "[Removed Lines]",
          "729:        elf_getu32(swap, pi.cpi_pid),",
          "733:        elf_getu32(swap, pi.cpi_siglwp),",
          "",
          "[Added Lines]",
          "729:        elf_getu32(swap, (uint32_t)pi.cpi_pid),",
          "733:        elf_getu32(swap, (uint32_t)pi.cpi_siglwp),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b9e60f088847f885b5c9fde61ff8fc9645843506",
      "candidate_info": {
        "commit_hash": "b9e60f088847f885b5c9fde61ff8fc9645843506",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/b9e60f088847f885b5c9fde61ff8fc9645843506",
        "files": [
          "src/readelf.c"
        ],
        "message": "remove extra parens",
        "before_after_code_files": [
          "src/readelf.c||src/readelf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.150 2018/08/02 12:46:02 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.151 2018/08/03 09:00:13 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1118:  }",
          "1120:  if (namesz & 0x80000000) {",
          "1122:       CAST(unsigned long, namesz)) == -1)",
          "1123:    return -1;",
          "1124:      return 0;",
          "",
          "[Removed Lines]",
          "1121:   if (((file_printf(ms, \", bad note name size %#lx\",",
          "",
          "[Added Lines]",
          "1121:   if (file_printf(ms, \", bad note name size %#lx\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c7d910ee8879dfbe80fe14bfc13c8fa6c6fe1d32",
      "candidate_info": {
        "commit_hash": "c7d910ee8879dfbe80fe14bfc13c8fa6c6fe1d32",
        "repo": "file/file",
        "commit_url": "https://github.com/file/file/commit/c7d910ee8879dfbe80fe14bfc13c8fa6c6fe1d32",
        "files": [
          "src/file.h",
          "src/readelf.c",
          "src/softmagic.c"
        ],
        "message": "more lint fixes",
        "before_after_code_files": [
          "src/file.h||src/file.h",
          "src/readelf.c||src/readelf.c",
          "src/softmagic.c||src/softmagic.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/readelf.c||src/readelf.c"
          ],
          "candidate": [
            "src/readelf.c||src/readelf.c"
          ]
        }
      },
      "candidate_diff": {
        "src/file.h||src/file.h": [
          "File: src/file.h -> src/file.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "382: #define CCAST(T, b) const_cast<T>(b)",
          "383: #else",
          "384: #define CAST(T, b) ((T)(b))",
          "386: #define CCAST(T, b) ((T)(uintptr_t)(b))",
          "387: #endif",
          "",
          "[Removed Lines]",
          "385: #define RCAST(T, b) ((T)(void *)(b))",
          "",
          "[Added Lines]",
          "385: #define RCAST(T, b) ((T)(uintptr_t)(b))",
          "",
          "---------------"
        ],
        "src/readelf.c||src/readelf.c": [
          "File: src/readelf.c -> src/readelf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: #include \"file.h\"",
          "29: #ifndef lint",
          "31: #endif",
          "33: #ifdef BUILTIN_ELF",
          "",
          "[Removed Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.155 2018/10/19 00:26:08 christos Exp $\")",
          "",
          "[Added Lines]",
          "30: FILE_RCSID(\"@(#)$File: readelf.c,v 1.156 2018/10/19 00:33:04 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "786:    pidoff = argoff + 81 + 2;",
          "787:    if (doff + pidoff + 4 <= size) {",
          "788:     if (file_printf(ms, \", pid=%u\",",
          "790:         doff + pidoff)))) == -1)",
          "791:      return 1;",
          "792:    }",
          "",
          "[Removed Lines]",
          "789:         elf_getu32(swap, *RCAST(uint32 *, (nbuf +",
          "",
          "[Added Lines]",
          "789:         elf_getu32(swap, *RCAST(uint32_t *, (nbuf +",
          "",
          "---------------"
        ],
        "src/softmagic.c||src/softmagic.c": [
          "File: src/softmagic.c -> src/softmagic.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #include \"file.h\"",
          "34: #ifndef lint",
          "38: #include \"magic.h\"",
          "",
          "[Removed Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.271 2018/10/15 16:29:16 christos Exp $\")",
          "",
          "[Added Lines]",
          "35: FILE_RCSID(\"@(#)$File: softmagic.c,v 1.272 2018/10/19 00:33:04 christos Exp $\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1435:   if ((size_t)-m->offset > b->elen)",
          "1436:    return -1;",
          "1437:   buffer_init(bb, -1, b->ebuf, b->elen);",
          "1439:  } else {",
          "1440:   if (cont_level == 0) {",
          "1441: normal:",
          "",
          "[Removed Lines]",
          "1438:   ms->eoffset = ms->offset = b->elen + m->offset;",
          "",
          "[Added Lines]",
          "1438:   ms->eoffset = ms->offset = (int32_t)(b->elen + m->offset);",
          "",
          "---------------"
        ]
      }
    }
  ]
}