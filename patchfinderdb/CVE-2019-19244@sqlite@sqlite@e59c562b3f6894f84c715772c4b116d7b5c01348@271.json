{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fb34559eb1dd48e005ea2e0cae568fdcf4d7aa1e",
      "candidate_info": {
        "commit_hash": "fb34559eb1dd48e005ea2e0cae568fdcf4d7aa1e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fb34559eb1dd48e005ea2e0cae568fdcf4d7aa1e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "src/shell.c.in",
          "src/sqliteInt.h",
          "src/vacuum.c",
          "src/vdbe.c",
          "test/shell1.test",
          "test/vacuum-into.test"
        ],
        "message": "Add support for the VACUUM INTO command.\n\nFossilOrigin-Name: 77f150b8b46761f4f62f9d8926c10a95a70589a4525393fc16b321bd98c083a7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "src/shell.c.in||src/shell.c.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vacuum.c||src/vacuum.c",
          "src/vdbe.c||src/vdbe.c",
          "test/shell1.test||test/shell1.test",
          "test/vacuum-into.test||test/vacuum-into.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b7bf3c9832bde26b359f4d58ebcf7788c500586d311387d022192ed65a126252",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1368: %ifndef SQLITE_OMIT_VACUUM",
          "1369: %ifndef SQLITE_OMIT_ATTACH",
          "1372: %endif  SQLITE_OMIT_ATTACH",
          "1373: %endif  SQLITE_OMIT_VACUUM",
          "",
          "[Removed Lines]",
          "1370: cmd ::= VACUUM.                {sqlite3Vacuum(pParse,0);}",
          "1371: cmd ::= VACUUM nm(X).          {sqlite3Vacuum(pParse,&X);}",
          "",
          "[Added Lines]",
          "1370: %type vinto {Expr*}",
          "1371: %destructor vinto {sqlite3ExprDelete(pParse->db, $$);}",
          "1372: cmd ::= VACUUM vinto(Y).                {sqlite3Vacuum(pParse,0,Y);}",
          "1373: cmd ::= VACUUM nm(X) vinto(Y).          {sqlite3Vacuum(pParse,&X,Y);}",
          "1374: vinto(A) ::= INTO expr(X).              {A = X;}",
          "1375: vinto(A) ::= .                          {A = 0;}",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3377: #endif",
          "3378:   \".backup ?DB? FILE        Backup DB (default \\\"main\\\") to FILE\",",
          "3379:   \"       --append            Use the appendvfs\",",
          "3380:   \".bail on|off             Stop after hitting an error.  Default OFF\",",
          "3381:   \".binary on|off           Turn binary output on or off.  Default OFF\",",
          "3382:   \".cd DIRECTORY            Change the working directory to DIRECTORY\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3380:   \"       --async             Write to FILE without a journal and without fsync()\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5840:     sqlite3 *pDest;",
          "5841:     sqlite3_backup *pBackup;",
          "5842:     int j;",
          "5843:     const char *zVfs = 0;",
          "5844:     for(j=1; j<nArg; j++){",
          "5845:       const char *z = azArg[j];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5844:     int bAsync = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5848:         if( strcmp(z, \"-append\")==0 ){",
          "5849:           zVfs = \"apndvfs\";",
          "5850:         }else",
          "5851:         {",
          "5852:           utf8_printf(stderr, \"unknown option: %s\\n\", azArg[j]);",
          "5853:           return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5853:         if( strcmp(z, \"-async\")==0 ){",
          "5854:           bAsync = 1;",
          "5855:         }else",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5858:         zDb = zDestFile;",
          "5859:         zDestFile = azArg[j];",
          "5860:       }else{",
          "5862:         return 1;",
          "5863:       }",
          "5864:     }",
          "",
          "[Removed Lines]",
          "5861:         raw_printf(stderr, \"Usage: .backup ?DB? ?--append? FILENAME\\n\");",
          "",
          "[Added Lines]",
          "5866:         raw_printf(stderr, \"Usage: .backup ?DB? ?OPTIONS? FILENAME\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5874:       close_db(pDest);",
          "5875:       return 1;",
          "5876:     }",
          "5877:     open_db(p, 0);",
          "5878:     pBackup = sqlite3_backup_init(pDest, \"main\", p->db, zDb);",
          "5879:     if( pBackup==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5882:     if( bAsync ){",
          "5883:       sqlite3_exec(pDest, \"PRAGMA synchronous=OFF; PRAGMA journal_mode=OFF;\",",
          "5884:                    0, 0, 0);",
          "5885:     }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3985: Index *sqlite3FindIndex(sqlite3*,const char*, const char*);",
          "3986: void sqlite3UnlinkAndDeleteTable(sqlite3*,int,const char*);",
          "3987: void sqlite3UnlinkAndDeleteIndex(sqlite3*,int,const char*);",
          "3990: char *sqlite3NameFromToken(sqlite3*, Token*);",
          "3991: int sqlite3ExprCompare(Parse*,Expr*, Expr*, int);",
          "3992: int sqlite3ExprCompareSkip(Expr*, Expr*, int);",
          "",
          "[Removed Lines]",
          "3988: void sqlite3Vacuum(Parse*,Token*);",
          "3989: int sqlite3RunVacuum(char**, sqlite3*, int);",
          "",
          "[Added Lines]",
          "3988: void sqlite3Vacuum(Parse*,Token*,Expr*);",
          "3989: int sqlite3RunVacuum(char**, sqlite3*, int, sqlite3_value*);",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "107:   int iDb = 0;",
          "109:   if( pNm ){",
          "110: #ifndef SQLITE_BUG_COMPATIBLE_20160819",
          "113:     iDb = sqlite3TwoPartName(pParse, pNm, pNm, &pNm);",
          "115: #else",
          "",
          "[Removed Lines]",
          "105: void sqlite3Vacuum(Parse *pParse, Token *pNm){",
          "108:   if( v==0 ) return;",
          "114:     if( iDb<0 ) return;",
          "",
          "[Added Lines]",
          "105: void sqlite3Vacuum(Parse *pParse, Token *pNm, Expr *pInto){",
          "108:   if( v==0 ) goto build_vacuum_end;",
          "114:     if( iDb<0 ) goto build_vacuum_end;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123: #endif",
          "124:   }",
          "125:   if( iDb!=1 ){",
          "127:     sqlite3VdbeUsesBtree(v, iDb);",
          "128:   }",
          "129:   return;",
          "130: }",
          "",
          "[Removed Lines]",
          "126:     sqlite3VdbeAddOp1(v, OP_Vacuum, iDb);",
          "135: int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db, int iDb){",
          "",
          "[Added Lines]",
          "126:     int iIntoReg = 0;",
          "127:     if( pInto ){",
          "128:       iIntoReg = ++pParse->nMem;",
          "129:       sqlite3ExprCode(pParse, pInto, iIntoReg);",
          "130:     }",
          "131:     sqlite3VdbeAddOp2(v, OP_Vacuum, iDb, iIntoReg);",
          "134: build_vacuum_end:",
          "135:   sqlite3ExprDelete(pParse->db, pInto);",
          "142: int sqlite3RunVacuum(",
          "147: ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:     sqlite3SetString(pzErrMsg, db,\"cannot VACUUM - SQL statements in progress\");",
          "156:     return SQLITE_ERROR;",
          "157:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:   if( pOut ){",
          "172:     if( sqlite3_value_type(pOut)!=SQLITE_TEXT ){",
          "173:       sqlite3SetString(pzErrMsg, db, \"non-text filename\");",
          "174:       return SQLITE_ERROR;",
          "175:     }",
          "176:     zOut = (const char*)sqlite3_value_text(pOut);",
          "177:   }else{",
          "178:     zOut = \"\";",
          "179:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:   nDb = db->nDb;",
          "193:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "194:   assert( (db->nDb-1)==nDb );",
          "195:   pDb = &db->aDb[nDb];",
          "196:   assert( strcmp(pDb->zDbSName,\"vacuum_db\")==0 );",
          "197:   pTemp = pDb->pBt;",
          "198:   nRes = sqlite3BtreeGetOptimalReserve(pMain);",
          "",
          "[Removed Lines]",
          "192:   rc = execSql(db, pzErrMsg, \"ATTACH''AS vacuum_db\");",
          "",
          "[Added Lines]",
          "214:   rc = execSqlF(db, pzErrMsg, \"ATTACH %Q AS vacuum_db\", zOut);",
          "220:   if( pOut ){",
          "221:     sqlite3_file *id = sqlite3PagerFile(sqlite3BtreePager(pTemp));",
          "222:     i64 sz = 0;",
          "223:     if( id->pMethods!=0 && (sqlite3OsFileSize(id, &sz)!=SQLITE_OK || sz>0) ){",
          "224:       rc = SQLITE_ERROR;",
          "225:       sqlite3SetString(pzErrMsg, db, \"output file already exists\");",
          "226:       goto end_of_vacuum;",
          "227:     }",
          "228:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "219:   rc = execSql(db, pzErrMsg, \"BEGIN\");",
          "220:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "222:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "",
          "[Removed Lines]",
          "221:   rc = sqlite3BtreeBeginTrans(pMain, 2, 0);",
          "",
          "[Added Lines]",
          "252:   rc = sqlite3BtreeBeginTrans(pMain, pOut==0 ? 2 : 0, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "313:     };",
          "315:     assert( 1==sqlite3BtreeIsInTrans(pTemp) );",
          "319:     for(i=0; i<ArraySize(aCopy); i+=2){",
          "",
          "[Removed Lines]",
          "316:     assert( 1==sqlite3BtreeIsInTrans(pMain) );",
          "",
          "[Added Lines]",
          "347:     assert( pOut!=0 || 1==sqlite3BtreeIsInTrans(pMain) );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "324:       if( NEVER(rc!=SQLITE_OK) ) goto end_of_vacuum;",
          "325:     }",
          "328:     if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "329:     rc = sqlite3BtreeCommit(pTemp);",
          "330:     if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "331: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "333: #endif",
          "334:   }",
          "336:   assert( rc==SQLITE_OK );",
          "339: end_of_vacuum:",
          "",
          "[Removed Lines]",
          "327:     rc = sqlite3BtreeCopyFile(pMain, pTemp);",
          "332:     sqlite3BtreeSetAutoVacuum(pMain, sqlite3BtreeGetAutoVacuum(pTemp));",
          "337:   rc = sqlite3BtreeSetPageSize(pMain, sqlite3BtreeGetPageSize(pTemp), nRes,1);",
          "",
          "[Added Lines]",
          "358:     if( pOut==0 ){",
          "359:       rc = sqlite3BtreeCopyFile(pMain, pTemp);",
          "360:     }",
          "365:     if( pOut==0 ){",
          "366:       sqlite3BtreeSetAutoVacuum(pMain, sqlite3BtreeGetAutoVacuum(pTemp));",
          "367:     }",
          "372:   if( pOut==0 ){",
          "373:     rc = sqlite3BtreeSetPageSize(pMain, sqlite3BtreeGetPageSize(pTemp), nRes,1);",
          "374:   }",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6686: #if !defined(SQLITE_OMIT_VACUUM) && !defined(SQLITE_OMIT_ATTACH)",
          "6692: case OP_Vacuum: {",
          "6693:   assert( p->readOnly==0 );",
          "6695:   if( rc ) goto abort_due_to_error;",
          "6696:   break;",
          "6697: }",
          "",
          "[Removed Lines]",
          "6694:   rc = sqlite3RunVacuum(&p->zErrMsg, db, pOp->p1);",
          "",
          "[Added Lines]",
          "6698:   rc = sqlite3RunVacuum(&p->zErrMsg, db, pOp->p1,",
          "6699:                         pOp->p2 ? &aMem[pOp->p2] : 0);",
          "",
          "---------------"
        ],
        "test/shell1.test||test/shell1.test": [
          "File: test/shell1.test -> test/shell1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "256: do_test shell1-3.1.4 {",
          "257:   # too many arguments",
          "258:   catchcmd \"test.db\" \".backup FOO BAR BAD\"",
          "261: # .bail ON|OFF           Stop after hitting an error.  Default OFF",
          "262: do_test shell1-3.2.1 {",
          "",
          "[Removed Lines]",
          "259: } {1 {Usage: .backup ?DB? ?--append? FILENAME}}",
          "",
          "[Added Lines]",
          "259: } {1 {Usage: .backup ?DB? ?OPTIONS? FILENAME}}",
          "",
          "---------------"
        ],
        "test/vacuum-into.test||test/vacuum-into.test": [
          "File: test/vacuum-into.test -> test/vacuum-into.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018-12-07",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the VACUUM INTO statement.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "18: # If the VACUUM statement is disabled in the current build, skip all",
          "19: # the tests in this file.",
          "20: #",
          "21: ifcapable {!vacuum} {",
          "22:   omit_test vacuum.test {Compiled with SQLITE_OMIT_VACUUM}",
          "23:   finish_test",
          "24:   return",
          "25: }",
          "27: forcedelete out.db",
          "28: do_execsql_test vacuum-into-100 {",
          "29:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b);",
          "30:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<100)",
          "31:   INSERT INTO t1(a,b) SELECT x, randomblob(600) FROM c;",
          "32:   CREATE INDEX t1b ON t1(b);",
          "33:   DELETE FROM t1 WHERE a%2;",
          "34:   SELECT count(*), sum(a), sum(length(b)) FROM t1;",
          "35: } {50 2550 30000}",
          "36: do_execsql_test vacuum-into-110 {",
          "37:   VACUUM main INTO 'out.db';",
          "38: } {}",
          "39: sqlite3 db2 out.db",
          "40: do_test vacuum-into-120 {",
          "41:   db2 eval {SELECT count(*), sum(a), sum(length(b)) FROM t1}",
          "42: } {50 2550 30000}",
          "43: do_catchsql_test vacuum-into-130 {",
          "44:   VACUUM INTO 'out.db';",
          "45: } {1 {output file already exists}}",
          "46: forcedelete out2.db",
          "47: do_catchsql_test vacuum-into-140 {",
          "48:   VACUUM INTO 'out2.db';",
          "49: } {0 {}}",
          "50: do_catchsql_test vacuum-into-150 {",
          "51:   VACUUM INTO 'out2.db';",
          "52: } {1 {output file already exists}}",
          "54: do_catchsql_test vacuum-into-200 {",
          "55:   VACUUM main INTO ':memory:';",
          "56: } {0 {}}",
          "58: # The INTO argument can be an arbitrary expression.",
          "59: #",
          "60: do_execsql_test vacuum-into-300 {",
          "61:   CREATE TABLE t2(name TEXT);",
          "62:   INSERT INTO t2 VALUES(':memory:');",
          "63:   VACUUM main INTO (SELECT name FROM t2);",
          "64: } {}",
          "65: do_catchsql_test vacuum-into-310 {",
          "66:   VACUUM INTO null;",
          "67: } {1 {non-text filename}}",
          "69: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "781b7ac3f6c61eb756740549ab10a14322210ad7",
      "candidate_info": {
        "commit_hash": "781b7ac3f6c61eb756740549ab10a14322210ad7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/781b7ac3f6c61eb756740549ab10a14322210ad7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/window1.test"
        ],
        "message": "Fix a problem with a window function in a correlated sub-query where at least one reference to the outer SELECT appears in a FROM clause sub-select.\n\nFossilOrigin-Name: 9aca86f98388ff66b2bccb3fbfc486a3931398d2a8da139f905826ae2cdbb205",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "test/window1.test||test/window1.test"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "test/window1.test||test/window1.test"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c7b336181aac6785a515f275c0f50ad4bf2dee20abde959b56d968a7fdce3e5b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1425:     for(i=0; i<p->pSrc->nSrc; i++){",
          "1426:       struct SrcList_item *pItem = &p->pSrc->a[i];",
          "1430:         const char *zSavedContext = pParse->zAuthContext;",
          "",
          "[Removed Lines]",
          "1427:       if( pItem->pSelect ){",
          "",
          "[Added Lines]",
          "1427:       if( pItem->pSelect && (pItem->pSelect->selFlags & SF_Resolved)==0 ){",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "720:   ORDER BY 10+sum(a) OVER (ORDER BY a) DESC;",
          "721: } {16 13 11}",
          "750: #-------------------------------------------------------------------------",
          "751: # Test error cases from chaining window definitions.",
          "",
          "[Removed Lines]",
          "723: #-------------------------------------------------------------------------",
          "724: #",
          "725: reset_db",
          "726: do_execsql_test 18.0 {",
          "727:   CREATE TABLE t1 ( t1_id INTEGER PRIMARY KEY );",
          "728:   CREATE TABLE t2 ( t2_id INTEGER PRIMARY KEY );",
          "729:   CREATE TABLE t3 ( t3_id INTEGER PRIMARY KEY );",
          "731:   INSERT INTO t1 VALUES(1),  (3), (5);",
          "732:   INSERT INTO t2 VALUES      (3), (5);",
          "733:   INSERT INTO t3 VALUES(10), (11), (12);",
          "734: }",
          "736: do_execsql_test 18.1 {",
          "737:   SELECT t1.* FROM t1, t2 WHERE",
          "738:     t1_id=t2_id AND t1_id IN (",
          "739:         SELECT t1_id + row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "740:     )",
          "741: }",
          "743: do_execsql_test 18.2 {",
          "744:   SELECT t1.* FROM t1, t2 WHERE",
          "745:     t1_id=t2_id AND t1_id IN (",
          "746:         SELECT         row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "747:     )",
          "748: } {3}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1035:   SELECT lead(44) OVER ()",
          "1036: } {{}}",
          "1039: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1012: #-------------------------------------------------------------------------",
          "1013: #",
          "1014: reset_db",
          "1015: do_execsql_test 25.0 {",
          "1016:   CREATE TABLE t1 ( t1_id INTEGER PRIMARY KEY );",
          "1017:   CREATE TABLE t2 ( t2_id INTEGER PRIMARY KEY );",
          "1018:   CREATE TABLE t3 ( t3_id INTEGER PRIMARY KEY );",
          "1020:   INSERT INTO t1 VALUES(1),  (3), (5);",
          "1021:   INSERT INTO t2 VALUES      (3), (5);",
          "1022:   INSERT INTO t3 VALUES(10), (11), (12);",
          "1023: }",
          "1025: do_execsql_test 25.1 {",
          "1026:   SELECT t1.* FROM t1, t2 WHERE",
          "1027:     t1_id=t2_id AND t1_id IN (",
          "1028:         SELECT t1_id + row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "1029:     )",
          "1030: }",
          "1032: do_execsql_test 25.2 {",
          "1033:   SELECT t1.* FROM t1, t2 WHERE",
          "1034:     t1_id=t2_id AND t1_id IN (",
          "1035:         SELECT         row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "1036:     )",
          "1037: } {3}",
          "1039: #-------------------------------------------------------------------------",
          "1040: reset_db",
          "1041: do_execsql_test 26.0 {",
          "1042:   CREATE TABLE t1(x);",
          "1043:   CREATE TABLE t2(c);",
          "1044: }",
          "1046: do_execsql_test 26.1 {",
          "1047:   SELECT ( SELECT row_number() OVER () FROM ( SELECT c FROM t1 ) ) FROM t2",
          "1048: } {}",
          "1050: do_execsql_test 26.2 {",
          "1051:   INSERT INTO t1 VALUES(1), (2), (3), (4);",
          "1052:   INSERT INTO t2 VALUES(2), (6), (8), (4);",
          "1053:   SELECT c, c IN (",
          "1054:     SELECT row_number() OVER () FROM ( SELECT c FROM t1 )",
          "1055:   ) FROM t2",
          "1056: } {2 1  6 0  8 0  4 1}",
          "1058: do_execsql_test 26.3 {",
          "1059:   DELETE FROM t1;",
          "1060:   DELETE FROM t2;",
          "1062:   INSERT INTO t2 VALUES(1), (2), (3), (4);",
          "1063:   INSERT INTO t1 VALUES(1), (1), (2), (3), (3), (3), (3), (4), (4);",
          "1065:   SELECT c, c IN (",
          "1066:     SELECT row_number() OVER () FROM ( SELECT 1 FROM t1 WHERE x=c )",
          "1067:   ) FROM t2",
          "1068: } {1 1  2 0  3 1  4 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79d8aa24f17b1d7f2743c1bcf823bc17489d14ec",
      "candidate_info": {
        "commit_hash": "79d8aa24f17b1d7f2743c1bcf823bc17489d14ec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/79d8aa24f17b1d7f2743c1bcf823bc17489d14ec",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Fix a typo in the wapptest.tcl script.\n\nFossilOrigin-Name: 971b4422ae7a8eed67f5db62c0e1cc061faac9404ff5f7051d7e07decf2207a4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d6131caf6471ad41fa5a28b0067d759ac1cc9dba1170678534488b416f9a1157",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   wapptest_output $msg",
          "290:   if {[info exists G(test.$name.errmsg)] && $G(test.$name.errmsg)!=\"\"} {",
          "292:   }",
          "293: }",
          "",
          "[Removed Lines]",
          "291:     wapptest_output \"    $G(test.$config.errmsg)\"",
          "",
          "[Added Lines]",
          "291:     wapptest_output \"    $G(test.$name.errmsg)\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "15750a26fa7127af7b1aa3e3a2046f5379eaca43",
      "candidate_info": {
        "commit_hash": "15750a26fa7127af7b1aa3e3a2046f5379eaca43",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/15750a26fa7127af7b1aa3e3a2046f5379eaca43",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "src/whereInt.h",
          "src/wherecode.c",
          "test/nulls1.test"
        ],
        "message": "Add support for using indexes for some ORDER BY clauses that use non-default NULL handling. Still some problems on this branch.\n\nFossilOrigin-Name: 81069d7196857e909c94195d67388f71bc9f832eafd9156d8c5cdddb63513b4a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/wherecode.c||src/wherecode.c",
          "test/nulls1.test||test/nulls1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 07babb0f897fc8c9cb5b30481899c32fdd743f3f3ca508d8d957826252107dd5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3799:         if( pIndex ){",
          "3800:           iColumn = pIndex->aiColumn[j];",
          "3802:           if( iColumn==pIndex->pTable->iPKey ) iColumn = XN_ROWID;",
          "3803:         }else{",
          "3804:           iColumn = XN_ROWID;",
          "",
          "[Removed Lines]",
          "3801:           revIdx = pIndex->aSortOrder[j];",
          "",
          "[Added Lines]",
          "3801:           revIdx = pIndex->aSortOrder[j] & KEYINFO_ORDER_DESC;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3836:               continue;",
          "3837:             }",
          "3838:           }",
          "3840:           if( iColumn!=XN_ROWID ){",
          "3841:             pColl = sqlite3ExprNNCollSeq(pWInfo->pParse, pOrderBy->a[i].pExpr);",
          "3842:             if( sqlite3StrICmp(pColl->zName, pIndex->azColl[j])!=0 ) continue;",
          "",
          "[Removed Lines]",
          "3839:           if( pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL ) continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3850:         if( isMatch && (wctrlFlags & WHERE_GROUPBY)==0 ){",
          "3854:           if( revSet ){",
          "3856:           }else{",
          "3858:             if( rev ) *pRevMask |= MASKBIT(iLoop);",
          "3859:             revSet = 1;",
          "3860:           }",
          "3861:         }",
          "3862:         if( isMatch ){",
          "3863:           if( iColumn==XN_ROWID ){",
          "3864:             testcase( distinctColumns==0 );",
          "3865:             distinctColumns = 1;",
          "3866:           }",
          "3867:           obSat |= MASKBIT(i);",
          "3871:         }else{",
          "3873:           if( j==0 || j<nKeyCol ){",
          "",
          "[Removed Lines]",
          "3853:           assert( (pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL)==0 );",
          "3855:             if( (rev ^ revIdx)!=pOrderBy->a[i].sortFlags ) isMatch = 0;",
          "3857:             rev = revIdx ^ pOrderBy->a[i].sortFlags;",
          "3868:           if( (wctrlFlags & WHERE_ORDERBY_MIN) && j==pLoop->u.btree.nEq ){",
          "3869:             pLoop->wsFlags |= WHERE_MIN_ORDERED;",
          "3870:           }",
          "",
          "[Added Lines]",
          "3853:             if( (rev ^ revIdx)!=(pOrderBy->a[i].sortFlags&KEYINFO_ORDER_DESC) ){",
          "3854:               isMatch = 0;",
          "3855:             }",
          "3857:             rev = revIdx ^ (pOrderBy->a[i].sortFlags & KEYINFO_ORDER_DESC);",
          "3862:         if( isMatch && (pOrderBy->a[i].sortFlags & KEYINFO_ORDER_BIGNULL) ){",
          "3863:           if( j==pLoop->u.btree.nEq ){",
          "3864:             pLoop->wsFlags |= WHERE_BIGNULL_SORT;",
          "3865:           }else{",
          "3866:             isMatch = 0;",
          "3867:           }",
          "3868:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5061:         sqlite3VdbeSetP4KeyInfo(pParse, pIx);",
          "5062:         if( (pLoop->wsFlags & WHERE_CONSTRAINT)!=0",
          "5063:          && (pLoop->wsFlags & (WHERE_COLUMN_RANGE|WHERE_SKIPSCAN))==0",
          "5064:          && (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)==0",
          "5065:          && pWInfo->eDistinct!=WHERE_DISTINCT_ORDERED",
          "5066:         ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5068:          && (pLoop->wsFlags & WHERE_BIGNULL_SORT)==0",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5202:       VdbeCoverageIf(v, pLevel->op==OP_Next);",
          "5203:       VdbeCoverageIf(v, pLevel->op==OP_Prev);",
          "5204:       VdbeCoverageIf(v, pLevel->op==OP_VNext);",
          "5205: #ifndef SQLITE_DISABLE_SKIPAHEAD_DISTINCT",
          "5206:       if( addrSeek ) sqlite3VdbeJumpHere(v, addrSeek);",
          "5207: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5210:       if( pLevel->regBignull ){",
          "5211:         sqlite3VdbeResolveLabel(v, pLevel->addrBignull);",
          "5212:         addr = sqlite3VdbeAddOp1(v, OP_If, pLevel->regBignull);",
          "5213:         sqlite3VdbeAddOp2(v, OP_Integer, 1, pLevel->regBignull);",
          "5214:         sqlite3VdbeAddOp2(v, OP_Goto, 0, pLevel->p2-1);",
          "5215:         sqlite3VdbeChangeP5(v, pLevel->p5);",
          "5216:         VdbeCoverage(v);",
          "5217:         VdbeCoverageIf(v, pLevel->op==OP_Next);",
          "5218:         VdbeCoverageIf(v, pLevel->op==OP_Prev);",
          "5219:         sqlite3VdbeJumpHere(v, addr);",
          "5220:       }",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1554:     pIdx = pLoop->u.btree.pIndex;",
          "1555:     iIdxCur = pLevel->iIdxCur;",
          "1556:     assert( nEq>=pLoop->nSkip );",
          "",
          "[Removed Lines]",
          "1566:     assert( (pWInfo->pOrderBy!=0 && pWInfo->pOrderBy->nExpr==1)",
          "1567:          || (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)==0 );",
          "1568:     if( pLoop->wsFlags & WHERE_MIN_ORDERED ){",
          "1569:       assert( (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN) );",
          "1570:       assert( pWInfo->nOBSat );",
          "1571:       assert( pIdx->nColumn>nEq );",
          "1572:       assert( pLoop->nSkip==0 );",
          "1573:       bSeekPastNull = 1;",
          "1574:       nExtraReg = 1;",
          "1575:     }",
          "",
          "[Added Lines]",
          "1552:     int regBignull = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1614:     }",
          "1615:     assert( pRangeEnd==0 || (pRangeEnd->wtFlags & TERM_VNULL)==0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1605:     addrNxt = pLevel->addrNxt;",
          "1606:     if( (pLoop->wsFlags & (WHERE_TOP_LIMIT|WHERE_BTM_LIMIT))==0",
          "1607:      && (pLoop->wsFlags & WHERE_BIGNULL_SORT)!=0",
          "1608:     ){",
          "1609:       assert( bSeekPastNull==0 && nExtraReg==0 && nBtm==0 && nTop==0 );",
          "1610:       assert( pRangeEnd==0 && pRangeStart==0 );",
          "1611:       assert( pLoop->nSkip==0 );",
          "1612:       nExtraReg = 1;",
          "1613:       bSeekPastNull = 1;",
          "1614:       pLevel->regBignull = regBignull = ++pParse->nMem;",
          "1615:       addrNxt = pLevel->addrBignull = sqlite3VdbeMakeLabel(pParse);",
          "1616:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1636:     if( zStartAff && nTop ){",
          "1637:       zEndAff = sqlite3DbStrDup(db, &zStartAff[nEq]);",
          "1638:     }",
          "1641:     testcase( pRangeStart && (pRangeStart->eOperator & WO_LE)!=0 );",
          "1642:     testcase( pRangeStart && (pRangeStart->eOperator & WO_GE)!=0 );",
          "",
          "[Removed Lines]",
          "1639:     addrNxt = pLevel->addrNxt;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1674:       nConstraint++;",
          "1675:       startEq = 0;",
          "1676:       start_constraints = 1;",
          "1677:     }",
          "1678:     codeApplyAffinity(pParse, regBase, nConstraint - bSeekPastNull, zStartAff);",
          "1679:     if( pLoop->nSkip>0 && nConstraint==pLoop->nSkip ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1677:     }else if( regBignull ){",
          "1678:       sqlite3VdbeAddOp2(v, OP_Null, 0, regBase+nEq);",
          "1679:       start_constraints = 1;",
          "1680:       nConstraint++;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1684:       if( pLoop->wsFlags & WHERE_IN_EARLYOUT ){",
          "1685:         sqlite3VdbeAddOp1(v, OP_SeekHit, iIdxCur);",
          "1686:       }",
          "1687:       op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "1688:       assert( op!=0 );",
          "1689:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1691:       if( regBignull ){",
          "1692:         sqlite3VdbeAddOp2(v, OP_Integer, 0, regBignull);",
          "1693:       }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1695:       VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1696:       VdbeCoverageIf(v, op==OP_SeekLT);  testcase( op==OP_SeekLT );",
          "1707:         sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "1715:       }",
          "1716:     }",
          "",
          "[Removed Lines]",
          "1698:       if( bSeekPastNull && (pLoop->wsFlags & WHERE_TOP_LIMIT)==0 ){",
          "1704:         assert( startEq==0 && (op==OP_SeekGT || op==OP_SeekLT) );",
          "1705:         assert( (pWInfo->wctrlFlags&WHERE_ORDERBY_MIN)!=0 && pWInfo->nOBSat>0 );",
          "1706:         sqlite3VdbeChangeP2(v, -1, sqlite3VdbeCurrentAddr(v)+1);",
          "1709:         op = aStartOp[(start_constraints<<2) + (1<<1) + bRev];",
          "1710:         assert( op==OP_SeekGE || op==OP_SeekLE );",
          "1711:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1712:         VdbeCoverage(v);",
          "1713:         VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1714:         VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "",
          "[Added Lines]",
          "1706:       if( regBignull ){",
          "1708:         if( bStopAtNull ){",
          "1709:           start_constraints = (nConstraint>1);",
          "1710:           op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "1711:           sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint-1);",
          "1712:         }else{",
          "1713:           op = aStartOp[(start_constraints<<2) + ((!startEq)<<1) + bRev];",
          "1714:           sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1715:         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1744:         endEq = 1;",
          "1745:       }",
          "1746:     }else if( bStopAtNull ){",
          "1749:       nConstraint++;",
          "1750:     }",
          "1751:     sqlite3DbFree(db, zStartAff);",
          "",
          "[Removed Lines]",
          "1747:       sqlite3VdbeAddOp2(v, OP_Null, 0, regBase+nEq);",
          "1748:       endEq = 0;",
          "",
          "[Added Lines]",
          "1748:       if( regBignull==0 ){",
          "1749:         sqlite3VdbeAddOp2(v, OP_Null, 0, regBase+nEq);",
          "1750:         endEq = 0;",
          "1751:       }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1758:     if( nConstraint ){",
          "1759:       op = aEndOp[bRev*2 + endEq];",
          "1760:       sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1761:       testcase( op==OP_IdxGT );  VdbeCoverageIf(v, op==OP_IdxGT );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1762:       if( regBignull ){",
          "1763:         sqlite3VdbeAddOp2(v, OP_If, regBignull, sqlite3VdbeCurrentAddr(v)+3);",
          "1764:       }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1763:       testcase( op==OP_IdxLT );  VdbeCoverageIf(v, op==OP_IdxLT );",
          "1764:       testcase( op==OP_IdxLE );  VdbeCoverageIf(v, op==OP_IdxLE );",
          "1765:     }",
          "1767:     if( pLoop->wsFlags & WHERE_IN_EARLYOUT ){",
          "1768:       sqlite3VdbeAddOp2(v, OP_SeekHit, iIdxCur, 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1772:     if( regBignull ){",
          "1773:       sqlite3VdbeAddOp2(v, OP_IfNot, regBignull, sqlite3VdbeCurrentAddr(v)+2);",
          "1774:       if( bStopAtNull ){",
          "1775:         op = aEndOp[bRev*2 + 0];",
          "1776:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1777:       }else{",
          "1778:         op = aEndOp[bRev*2 + endEq];",
          "1779:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint+1);",
          "1780:       }",
          "1781:     }",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: # This file implements regression tests for SQLite library.",
          "12: #",
          "18: set testdir [file dirname $argv0]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix nulls1",
          "22: do_execsql_test 1.0 {",
          "23:   DROP TABLE IF EXISTS t3;",
          "24:   CREATE TABLE t3(a INTEGER);",
          "25:   INSERT INTO t3 VALUES(NULL), (10), (30), (20), (NULL);",
          "26: } {}",
          "29:   foreach {tn limit} {",
          "30:     1 \"\"",
          "31:     2 \"LIMIT 10\"",
          "",
          "[Removed Lines]",
          "14: ####################################################",
          "15: # DO NOT EDIT! THIS FILE IS AUTOMATICALLY GENERATED!",
          "16: ####################################################",
          "28: for {set a 0} {$a < 2} {incr a} {",
          "",
          "[Added Lines]",
          "18: if 1 {",
          "26: for {set a 0} {$a < 3} {incr a} {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "47:     \" {30   20   10   {}   {}}",
          "48:   }",
          "51: }",
          "53: finish_test",
          "",
          "[Removed Lines]",
          "50:   catchsql { CREATE INDEX i1 ON t3(a) }",
          "",
          "[Added Lines]",
          "48:   switch $a {",
          "49:     0 {",
          "50:       execsql { CREATE INDEX i1 ON t3(a) }",
          "51:     }",
          "52:     1 {",
          "53:       execsql { DROP INDEX i1 ; CREATE INDEX i1 ON t3(a DESC) }",
          "54:     }",
          "55:   }",
          "56: }",
          "58: }",
          "60: #-------------------------------------------------------------------------",
          "61: reset_db",
          "62: do_execsql_test 2.0 {",
          "63:   CREATE TABLE t2(a, b, c);",
          "64:   CREATE INDEX i2 ON t2(a, b);",
          "65:   INSERT INTO t2 VALUES(1, 1, 1);",
          "66:   INSERT INTO t2 VALUES(1, NULL, 2);",
          "67:   INSERT INTO t2 VALUES(1, NULL, 3);",
          "68:   INSERT INTO t2 VALUES(1, 4, 4);",
          "69: }",
          "71: do_execsql_test 2.1 {",
          "72:   SELECT * FROM t2 WHERE a=1 ORDER BY b NULLS LAST",
          "73: } {",
          "74:   1 1 1    1 4 4   1 {} 2   1 {} 3",
          "77: do_execsql_test 2.2 {",
          "78:   SELECT * FROM t2 WHERE a=1 ORDER BY b DESC NULLS FIRST",
          "79: } {",
          "80:   1 {} 3",
          "81:   1 {} 2",
          "82:   1 4 4",
          "83:   1 1 1",
          "84: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62a88294e8fb48d3ed8e0fdbbc346004ed09b168",
      "candidate_info": {
        "commit_hash": "62a88294e8fb48d3ed8e0fdbbc346004ed09b168",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/62a88294e8fb48d3ed8e0fdbbc346004ed09b168",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/dbfuzz2.c"
        ],
        "message": "Fix dbfuzz2.c so that it works with -DSQLITE_OMIT_INIT\n\nFossilOrigin-Name: 9ad796a8822f1b7e1e99b73c2cc5be59dbfd85e9c27f3e795c29a2c002c611d1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/dbfuzz2.c||test/dbfuzz2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: db5ed2268eda2e6c1df15cd8df4176463d89103b8fda33ba9a0604f0d92bd4da",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/dbfuzz2.c||test/dbfuzz2.c": [
          "File: test/dbfuzz2.c -> test/dbfuzz2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "78:     printf(\"************** nByte=%d ***************\\n\", (int)nByte);",
          "79:     fflush(stdout);",
          "80:   }",
          "81:   rc = sqlite3_open(0, &db);",
          "82:   if( rc ) return 1;",
          "83:   a = sqlite3_malloc64(nByte+1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:   if( sqlite3_initialize() ) return 0;",
          "",
          "---------------"
        ]
      }
    }
  ]
}