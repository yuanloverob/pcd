{
  "cve_id": "CVE-2018-9271",
  "cve_desc": "In Wireshark 2.4.0 to 2.4.5 and 2.2.0 to 2.2.13, epan/dissectors/packet-multipart.c has a memory leak.",
  "repo": "wireshark/wireshark",
  "patch_hash": "05c4705a19448646ca316ba3b1eb333a05482956",
  "patch_info": {
    "commit_hash": "05c4705a19448646ca316ba3b1eb333a05482956",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/05c4705a19448646ca316ba3b1eb333a05482956",
    "files": [
      "epan/dissectors/packet-multipart.c"
    ],
    "message": "multipart: use packet scope memory to avoid leaking in case an exception is triggered by subdissectors\n\nBug: 14486\nChange-Id: I275f8c962f126ad55fc7086012e7b67cc0dc60b3\nReviewed-on: https://code.wireshark.org/review/26291\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-multipart.c||epan/dissectors/packet-multipart.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-multipart.c||epan/dissectors/packet-multipart.c": [
      "File: epan/dissectors/packet-multipart.c -> epan/dissectors/packet-multipart.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "554:     gchar *content_encoding_str = NULL;",
      "555:     char *filename = NULL;",
      "556:     char *mimetypename = NULL;",
      "557:     gboolean last_field = FALSE;",
      "558:     gboolean is_raw_data = FALSE;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "557:     char *tmp;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "677:                             proto_item_append_text(ti, \" (%s)\", content_type_str);",
      "682:                             if(strncmp(content_type_str, \"application/octet-stream\",",
      "683:                                     sizeof(\"application/octet-stream\")-1) == 0) {",
      "",
      "[Removed Lines]",
      "680:                             mimetypename = ws_find_media_type_parameter(message_info.media_str, \"name\");",
      "",
      "[Added Lines]",
      "681:                             tmp = ws_find_media_type_parameter(message_info.media_str, \"name\");",
      "682:                             if (tmp) {",
      "683:                                 mimetypename = wmem_strdup(wmem_packet_scope(), tmp);",
      "684:                                 g_free(tmp);",
      "685:                             }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "708:                         case POS_CONTENT_DISPOSITION:",
      "709:                         {",
      "712:                         }",
      "713:                         break;",
      "714:                     default:",
      "",
      "[Removed Lines]",
      "711:                             filename = ws_find_media_type_parameter(value_str, \"filename\");",
      "",
      "[Added Lines]",
      "716:                             tmp = ws_find_media_type_parameter(value_str, \"filename\");",
      "717:                             if (tmp) {",
      "718:                                 filename = wmem_strdup(wmem_packet_scope(), tmp);",
      "719:                                 g_free(tmp);",
      "720:                             }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "802:            proto_tree_add_item(tree, hf_multipart_boundary, tvb, boundary_start, boundary_line_len, ENC_NA|ENC_ASCII);",
      "803:         }",
      "808:         return boundary_start + boundary_line_len;",
      "809:     }",
      "810: }",
      "",
      "[Removed Lines]",
      "805:         g_free(filename);",
      "806:         g_free(mimetypename);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "17919a807642791f707361c978bcd612fdce5b67",
      "candidate_info": {
        "commit_hash": "17919a807642791f707361c978bcd612fdce5b67",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/17919a807642791f707361c978bcd612fdce5b67",
        "files": [
          "epan/dissectors/packet-multipart.c"
        ],
        "message": "multipart: use packet scope memory to avoid leaking in case an exception is triggered by subdissectors\n\nBug: 14486\nChange-Id: I275f8c962f126ad55fc7086012e7b67cc0dc60b3\nReviewed-on: https://code.wireshark.org/review/26291\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 05c4705a19448646ca316ba3b1eb333a05482956)\nReviewed-on: https://code.wireshark.org/review/26313",
        "before_after_code_files": [
          "epan/dissectors/packet-multipart.c||epan/dissectors/packet-multipart.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-multipart.c||epan/dissectors/packet-multipart.c"
          ],
          "candidate": [
            "epan/dissectors/packet-multipart.c||epan/dissectors/packet-multipart.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-multipart.c||epan/dissectors/packet-multipart.c": [
          "File: epan/dissectors/packet-multipart.c -> epan/dissectors/packet-multipart.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:     gchar *content_encoding_str = NULL;",
          "567:     char *filename = NULL;",
          "568:     char *mimetypename = NULL;",
          "569:     gboolean last_field = FALSE;",
          "570:     gboolean is_raw_data = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "569:     char *tmp;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "688:                             proto_item_append_text(ti, \" (%s)\", content_type_str);",
          "693:                             if(strncmp(content_type_str, \"application/octet-stream\",",
          "694:                                     sizeof(\"application/octet-stream\")-1) == 0) {",
          "",
          "[Removed Lines]",
          "691:                             mimetypename = ws_find_media_type_parameter(message_info.media_str, \"name\");",
          "",
          "[Added Lines]",
          "692:                             tmp = ws_find_media_type_parameter(message_info.media_str, \"name\");",
          "693:                             if (tmp) {",
          "694:                                 mimetypename = wmem_strdup(wmem_packet_scope(), tmp);",
          "695:                                 g_free(tmp);",
          "696:                             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "719:                         case POS_CONTENT_DISPOSITION:",
          "720:                         {",
          "723:                         }",
          "724:                         break;",
          "725:                     default:",
          "",
          "[Removed Lines]",
          "722:                             filename = ws_find_media_type_parameter(value_str, \"filename\");",
          "",
          "[Added Lines]",
          "727:                             tmp = ws_find_media_type_parameter(value_str, \"filename\");",
          "728:                             if (tmp) {",
          "729:                                 filename = wmem_strdup(wmem_packet_scope(), tmp);",
          "730:                                 g_free(tmp);",
          "731:                             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "813:            proto_tree_add_item(tree, hf_multipart_boundary, tvb, boundary_start, boundary_line_len, ENC_NA|ENC_ASCII);",
          "814:         }",
          "819:         return boundary_start + boundary_line_len;",
          "820:     }",
          "821: }",
          "",
          "[Removed Lines]",
          "816:         g_free(filename);",
          "817:         g_free(mimetypename);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5b0228945dc74ee82d2ab4a4e7af2bdfe7b75910",
      "candidate_info": {
        "commit_hash": "5b0228945dc74ee82d2ab4a4e7af2bdfe7b75910",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/5b0228945dc74ee82d2ab4a4e7af2bdfe7b75910",
        "files": [
          "epan/dissectors/packet-multipart.c"
        ],
        "message": "multipart: use packet scope memory to avoid leaking in case an exception is triggered by subdissectors\n\nBug: 14486\nChange-Id: I275f8c962f126ad55fc7086012e7b67cc0dc60b3\nReviewed-on: https://code.wireshark.org/review/26291\nReviewed-by: Pascal Quantin <pascal.quantin@gmail.com>\nReviewed-by: Anders Broman <a.broman58@gmail.com>\n(cherry picked from commit 05c4705a19448646ca316ba3b1eb333a05482956)\nReviewed-on: https://code.wireshark.org/review/26314\nPetri-Dish: Pascal Quantin <pascal.quantin@gmail.com>\nTested-by: Petri Dish Buildbot",
        "before_after_code_files": [
          "epan/dissectors/packet-multipart.c||epan/dissectors/packet-multipart.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-multipart.c||epan/dissectors/packet-multipart.c"
          ],
          "candidate": [
            "epan/dissectors/packet-multipart.c||epan/dissectors/packet-multipart.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-multipart.c||epan/dissectors/packet-multipart.c": [
          "File: epan/dissectors/packet-multipart.c -> epan/dissectors/packet-multipart.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:     gchar *content_encoding_str = NULL;",
          "567:     char *filename = NULL;",
          "568:     char *mimetypename = NULL;",
          "569:     gboolean last_field = FALSE;",
          "570:     gboolean is_raw_data = FALSE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "569:     char *tmp;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "688:                             proto_item_append_text(ti, \" (%s)\", content_type_str);",
          "693:                             if(strncmp(content_type_str, \"application/octet-stream\",",
          "694:                                     sizeof(\"application/octet-stream\")-1) == 0) {",
          "",
          "[Removed Lines]",
          "691:                             mimetypename = ws_find_media_type_parameter(message_info.media_str, \"name\");",
          "",
          "[Added Lines]",
          "692:                             tmp = ws_find_media_type_parameter(message_info.media_str, \"name\");",
          "693:                             if (tmp) {",
          "694:                                 mimetypename = wmem_strdup(wmem_packet_scope(), tmp);",
          "695:                                 g_free(tmp);",
          "696:                             }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "719:                         case POS_CONTENT_DISPOSITION:",
          "720:                         {",
          "723:                         }",
          "724:                         break;",
          "725:                     default:",
          "",
          "[Removed Lines]",
          "722:                             filename = ws_find_media_type_parameter(value_str, \"filename\");",
          "",
          "[Added Lines]",
          "727:                             tmp = ws_find_media_type_parameter(value_str, \"filename\");",
          "728:                             if (tmp) {",
          "729:                                 filename = wmem_strdup(wmem_packet_scope(), tmp);",
          "730:                                 g_free(tmp);",
          "731:                             }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "813:            proto_tree_add_item(tree, hf_multipart_boundary, tvb, boundary_start, boundary_line_len, ENC_NA|ENC_ASCII);",
          "814:         }",
          "819:         return boundary_start + boundary_line_len;",
          "820:     }",
          "821: }",
          "",
          "[Removed Lines]",
          "816:         g_free(filename);",
          "817:         g_free(mimetypename);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2f7f7e5577dee645ae52b36a0795934624c24eb",
      "candidate_info": {
        "commit_hash": "f2f7f7e5577dee645ae52b36a0795934624c24eb",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/f2f7f7e5577dee645ae52b36a0795934624c24eb",
        "files": [
          "epan/dissectors/packet-isup.c",
          "epan/dissectors/packet-multipart.c",
          "epan/media_params.c",
          "epan/media_params.h"
        ],
        "message": "Add wmem alloc parameter to ws_find_media_type_parameter.\n\nAll current uses of ws_find_media_type_parameter need wmem_packet_scope(), but there\nis no sense in limiting what other dissectors may want to do.\n\nChange-Id: I35b0dd2a024a0ae0a8345577dd92a1a21ddd2cc4\nReviewed-on: https://code.wireshark.org/review/26427\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot\nReviewed-by: Michael Mann <mmann78@netscape.net>",
        "before_after_code_files": [
          "epan/dissectors/packet-isup.c||epan/dissectors/packet-isup.c",
          "epan/dissectors/packet-multipart.c||epan/dissectors/packet-multipart.c",
          "epan/media_params.c||epan/media_params.c",
          "epan/media_params.h||epan/media_params.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-multipart.c||epan/dissectors/packet-multipart.c"
          ],
          "candidate": [
            "epan/dissectors/packet-multipart.c||epan/dissectors/packet-multipart.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-isup.c||epan/dissectors/packet-isup.c": [
          "File: epan/dissectors/packet-isup.c -> epan/dissectors/packet-isup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10311:   if (data) {",
          "10312:     http_message_info_t *message_info = (http_message_info_t *)data;",
          "10313:     if (message_info->media_str) {",
          "10316:       if ((version && g_ascii_strncasecmp(version, \"ansi\", 4) == 0) ||",
          "10317:           (base && g_ascii_strncasecmp(base, \"ansi\", 4) == 0)) {",
          "",
          "[Removed Lines]",
          "10314:       version = ws_find_media_type_parameter(message_info->media_str, \"version\");",
          "10315:       base = ws_find_media_type_parameter(message_info->media_str, \"base\");",
          "",
          "[Added Lines]",
          "10314:       version = ws_find_media_type_parameter(wmem_packet_scope(), message_info->media_str, \"version\");",
          "10315:       base = ws_find_media_type_parameter(wmem_packet_scope(), message_info->media_str, \"base\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "10333:         message_tvb = tvb_new_subset_remaining(tvb, 0);",
          "10334:         dissect_ansi_isup_message(message_tvb, pinfo, isup_tree, ISUP_ITU_STANDARD_VARIANT, 0);",
          "10337:         return tvb_reported_length(tvb);",
          "10338:       } else if ((version && g_ascii_strcasecmp(version, \"spirou\") == 0) ||",
          "10339:           (base && g_ascii_strcasecmp(base, \"spirou\") == 0)) {",
          "",
          "[Removed Lines]",
          "10335:         g_free(version);",
          "10336:         g_free(base);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "10345:       } else {",
          "10346:         isup_standard = ITU_STANDARD;",
          "10347:       }",
          "10350:     } else {",
          "10352:       isup_standard = ITU_STANDARD;",
          "",
          "[Removed Lines]",
          "10348:       g_free(version);",
          "10349:       g_free(base);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "epan/dissectors/packet-multipart.c||epan/dissectors/packet-multipart.c": [
          "File: epan/dissectors/packet-multipart.c -> epan/dissectors/packet-multipart.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "340:     parameters = unfold_and_compact_mime_header(message_info->media_str, &dummy);",
          "344:     if(!start_boundary) {",
          "345:         return NULL;",
          "346:     }",
          "347:     if(strncmp(type, \"multipart/encrypted\", sizeof(\"multipart/encrypted\")-1) == 0) {",
          "349:         if(!start_protocol) {",
          "350:             g_free(start_boundary);",
          "351:             return NULL;",
          "",
          "[Removed Lines]",
          "342:     start_boundary = ws_find_media_type_parameter(parameters, \"boundary\");",
          "348:         start_protocol = ws_find_media_type_parameter(parameters, \"protocol\");",
          "",
          "[Added Lines]",
          "342:     start_boundary = ws_find_media_type_parameter(wmem_packet_scope(), parameters, \"boundary\");",
          "348:         start_protocol = ws_find_media_type_parameter(wmem_packet_scope(), parameters, \"protocol\");",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "358:     m_info = wmem_new(wmem_packet_scope(), multipart_info_t);",
          "359:     m_info->type = type;",
          "361:     m_info->boundary_length = (guint)strlen(start_boundary);",
          "363:     if(start_protocol) {",
          "365:         m_info->protocol_length = (guint)strlen(start_protocol);",
          "367:     } else {",
          "368:         m_info->protocol = NULL;",
          "369:         m_info->protocol_length = -1;",
          "",
          "[Removed Lines]",
          "360:     m_info->boundary = wmem_strdup(wmem_packet_scope(), start_boundary);",
          "362:     g_free(start_boundary);",
          "364:         m_info->protocol = wmem_strdup(wmem_packet_scope(), start_protocol);",
          "366:         g_free(start_protocol);",
          "",
          "[Added Lines]",
          "360:     m_info->boundary = start_boundary;",
          "363:         m_info->protocol = start_protocol;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "554:     gchar *content_encoding_str = NULL;",
          "555:     char *filename = NULL;",
          "556:     char *mimetypename = NULL;",
          "558:     gboolean last_field = FALSE;",
          "559:     gboolean is_raw_data = FALSE;",
          "",
          "[Removed Lines]",
          "557:     char *tmp;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "630:                     break;",
          "631:                 }",
          "632:             } else {",
          "635:                 proto_tree_add_string_format(subtree,",
          "636:                       hf_header_array[hf_index], tvb,",
          "",
          "[Removed Lines]",
          "633:                 char *value_str = g_strdup(header_str + colon_offset + 1);",
          "",
          "[Added Lines]",
          "630:                 char *value_str = wmem_strdup(wmem_packet_scope(), header_str + colon_offset + 1);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "643:                         {",
          "644:                             char *semicolonp;",
          "647:                             if(type_str != NULL) {",
          "649:                                 value_str = type_str;",
          "650:                             }",
          "",
          "[Removed Lines]",
          "646:                             char* type_str = ws_find_media_type_parameter(value_str, \"type\");",
          "648:                                 g_free(value_str);",
          "",
          "[Added Lines]",
          "643:                             char* type_str = ws_find_media_type_parameter(wmem_packet_scope(), value_str, \"type\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "678:                             proto_item_append_text(ti, \" (%s)\", content_type_str);",
          "687:                             if(strncmp(content_type_str, \"application/octet-stream\",",
          "688:                                     sizeof(\"application/octet-stream\")-1) == 0) {",
          "",
          "[Removed Lines]",
          "681:                             tmp = ws_find_media_type_parameter(message_info.media_str, \"name\");",
          "682:                             if (tmp) {",
          "683:                                 mimetypename = wmem_strdup(wmem_packet_scope(), tmp);",
          "684:                                 g_free(tmp);",
          "685:                             }",
          "",
          "[Added Lines]",
          "677:                             mimetypename = ws_find_media_type_parameter(wmem_packet_scope(), message_info.media_str, \"name\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "713:                         case POS_CONTENT_DISPOSITION:",
          "714:                         {",
          "721:                         }",
          "722:                         break;",
          "723:                     default:",
          "724:                         break;",
          "725:                 }",
          "727:             }",
          "728:         }",
          "729:         offset = next_offset;",
          "",
          "[Removed Lines]",
          "716:                             tmp = ws_find_media_type_parameter(value_str, \"filename\");",
          "717:                             if (tmp) {",
          "718:                                 filename = wmem_strdup(wmem_packet_scope(), tmp);",
          "719:                                 g_free(tmp);",
          "720:                             }",
          "726:                 g_free(value_str);",
          "",
          "[Added Lines]",
          "708:                             filename = ws_find_media_type_parameter(wmem_packet_scope(), value_str, \"filename\");",
          "",
          "---------------"
        ],
        "epan/media_params.c||epan/media_params.c": [
          "File: epan/media_params.c -> epan/media_params.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: }",
          "134: char *",
          "136: {",
          "137:     const char *p, *name, *value;",
          "138:     char c;",
          "",
          "[Removed Lines]",
          "135: ws_find_media_type_parameter(const char *parameters, const char *key)",
          "",
          "[Added Lines]",
          "134: ws_find_media_type_parameter(wmem_allocator_t *scope, const char *parameters, const char *key)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:     }",
          "180:     vp = valuestr;",
          "181:     p = value;",
          "",
          "[Removed Lines]",
          "179:     valuestr = (char *)g_malloc(valuelen + 1);",
          "",
          "[Added Lines]",
          "178:     valuestr = (char *)wmem_alloc(scope, valuelen + 1);",
          "",
          "---------------"
        ],
        "epan/media_params.h||epan/media_params.h": [
          "File: epan/media_params.h -> epan/media_params.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "16: #ifndef __MEDIA_PARAMS_H__",
          "17: #define __MEDIA_PARAMS_H__",
          "21: #include \"ws_symbol_export.h\"",
          "",
          "[Removed Lines]",
          "19: #include <glib.h>",
          "",
          "[Added Lines]",
          "19: #include <epan/wmem/wmem.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "27: WS_DLL_PUBLIC char *",
          "30: #ifdef __cplusplus",
          "31: }",
          "",
          "[Removed Lines]",
          "28: ws_find_media_type_parameter(const char *parameters, const char *key);",
          "",
          "[Added Lines]",
          "28: ws_find_media_type_parameter(wmem_allocator_t *scope, const char *parameters, const char *key);",
          "",
          "---------------"
        ]
      }
    }
  ]
}