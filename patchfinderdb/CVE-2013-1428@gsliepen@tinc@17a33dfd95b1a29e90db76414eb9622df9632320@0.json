{
  "cve_id": "CVE-2013-1428",
  "cve_desc": "Stack-based buffer overflow in the receive_tcppacket function in net_packet.c in tinc before 1.0.21 and 1.1 before 1.1pre7 allows remote authenticated peers to cause a denial of service (crash) or possibly execute arbitrary code via a large TCP packet.",
  "repo": "gsliepen/tinc",
  "patch_hash": "17a33dfd95b1a29e90db76414eb9622df9632320",
  "patch_info": {
    "commit_hash": "17a33dfd95b1a29e90db76414eb9622df9632320",
    "repo": "gsliepen/tinc",
    "commit_url": "https://github.com/gsliepen/tinc/commit/17a33dfd95b1a29e90db76414eb9622df9632320",
    "files": [
      "src/net_packet.c"
    ],
    "message": "Drop packets forwarded via TCP if they are too big (CVE-2013-1428).\n\nNormally all requests sent via the meta connections are checked so that they\ncannot be larger than the input buffer. However, when packets are forwarded via\nmeta connections, they are copied into a packet buffer without checking whether\nit fits into it. Since the packet buffer is allocated on the stack, this in\neffect allows an authenticated remote node to cause a stack overflow.\n\nThis issue was found by Martin Schobert.",
    "before_after_code_files": [
      "src/net_packet.c||src/net_packet.c"
    ]
  },
  "patch_diff": {
    "src/net_packet.c||src/net_packet.c": [
      "File: src/net_packet.c -> src/net_packet.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "394: void receive_tcppacket(connection_t *c, const char *buffer, int len) {",
      "395:  vpn_packet_t outpkt;",
      "397:  outpkt.len = len;",
      "398:  if(c->options & OPTION_TCPONLY)",
      "399:   outpkt.priority = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "397:  if(len > sizeof outpkt.data)",
      "398:   return;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "258bf7ea0fe69bae395a084843ba59b9770199f1",
      "candidate_info": {
        "commit_hash": "258bf7ea0fe69bae395a084843ba59b9770199f1",
        "repo": "gsliepen/tinc",
        "commit_url": "https://github.com/gsliepen/tinc/commit/258bf7ea0fe69bae395a084843ba59b9770199f1",
        "files": [
          "src/net.h",
          "src/net_packet.c",
          "src/net_setup.c",
          "src/protocol_auth.c"
        ],
        "message": "Drop packets forwarded via TCP if they are too big (CVE-2013-1428).\n\nNormally all requests sent via the meta connections are checked so that they\ncannot be larger than the input buffer. However, when packets are forwarded via\nmeta connections, they are copied into a packet buffer without checking whether\nit fits into it. Since the packet buffer is allocated on the stack, this in\neffect allows an authenticated remote node to cause a stack overflow.\n\nThis issue was found by Martin Schobert.",
        "before_after_code_files": [
          "src/net.h||src/net.h",
          "src/net_packet.c||src/net_packet.c",
          "src/net_setup.c||src/net_setup.c",
          "src/protocol_auth.c||src/protocol_auth.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "src/net_packet.c||src/net_packet.c"
          ],
          "candidate": [
            "src/net_packet.c||src/net_packet.c"
          ]
        }
      },
      "candidate_diff": {
        "src/net.h||src/net.h": [
          "File: src/net.h -> src/net.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "135: extern bool do_prune;",
          "136: extern char *myport;",
          "137: extern int autoconnect;",
          "138: extern int contradicting_add_edge;",
          "139: extern int contradicting_del_edge;",
          "140: extern time_t last_config_check;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "138: extern bool disablebuggypeers;",
          "",
          "---------------"
        ],
        "src/net_packet.c||src/net_packet.c": [
          "File: src/net_packet.c -> src/net_packet.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "443: void receive_tcppacket(connection_t *c, const char *buffer, int len) {",
          "444:  vpn_packet_t outpkt;",
          "446:  outpkt.len = len;",
          "447:  if(c->options & OPTION_TCPONLY)",
          "448:   outpkt.priority = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "446:  if(len > sizeof outpkt.data)",
          "447:   return;",
          "",
          "---------------"
        ],
        "src/net_setup.c||src/net_setup.c": [
          "File: src/net_setup.c -> src/net_setup.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52: char *proxypass;",
          "53: proxytype_t proxytype;",
          "54: int autoconnect;",
          "56: char *scriptinterpreter;",
          "57: char *scriptextension;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "55: bool disablebuggypeers;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "599:  get_config_int(lookup_config(config_tree, \"AutoConnect\"), &autoconnect);",
          "601:  return true;",
          "602: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "602:  get_config_bool(lookup_config(config_tree, \"DisableBuggyPeers\"), &disablebuggypeers);",
          "",
          "---------------"
        ],
        "src/protocol_auth.c||src/protocol_auth.c": [
          "File: src/protocol_auth.c -> src/protocol_auth.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "510: static void send_everything(connection_t *c) {",
          "513:  if(tunnelserver) {",
          "514:   for splay_each(subnet_t, s, myself->subnet_tree)",
          "515:    send_add_subnet(c, s);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "513:  if(disablebuggypeers) {",
          "514:   static struct {",
          "515:    vpn_packet_t pkt;",
          "516:    char pad[MAXBUFSIZE - MAXSIZE];",
          "517:   } zeropkt;",
          "519:   memset(&zeropkt, 0, sizeof zeropkt);",
          "520:   zeropkt.pkt.len = MAXBUFSIZE;",
          "521:   send_tcppacket(c, &zeropkt.pkt);",
          "522:  }",
          "",
          "---------------"
        ]
      }
    }
  ]
}