{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "37d296a717abb896c72368e3e09d833de2415838",
      "candidate_info": {
        "commit_hash": "37d296a717abb896c72368e3e09d833de2415838",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/37d296a717abb896c72368e3e09d833de2415838",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/window.c",
          "test/windowB.test"
        ],
        "message": "Bug fixes for window frames of the form (... RANGE BETWEEN b PRECEDING AND a PRECEDING) or (... RANGE a FOLLOWING AND b FOLLOWING) where (a > b).\n\nFossilOrigin-Name: 040e196a8be3ca41b9365310ab88c2a3cc84b918a6511c77a6d95d4b4e0da3ed",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/window.c||src/window.c",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f907395ef5a2dc1d084b6a286af00de4c742cf12d4f347c21e1b757786508f57",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/window.c||src/window.c": [
          "File: src/window.c -> src/window.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1408:   return (pList ? pList->nExpr : 0);",
          "1409: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1411: typedef struct WindowCodeArg WindowCodeArg;",
          "1412: typedef struct WindowCsrAndReg WindowCsrAndReg;",
          "1417: struct WindowCsrAndReg {",
          "1420: };",
          "1477: struct WindowCodeArg {",
          "1488:   WindowCsrAndReg start;",
          "1489:   WindowCsrAndReg current;",
          "1490:   WindowCsrAndReg end;",
          "1491: };",
          "1497: static void windowReadPeerValues(",
          "1498:   WindowCodeArg *p,",
          "1499:   int csr,",
          "1500:   int reg",
          "1501: ){",
          "1502:   Window *pMWin = p->pMWin;",
          "1503:   ExprList *pOrderBy = pMWin->pOrderBy;",
          "1504:   if( pOrderBy ){",
          "1505:     Vdbe *v = sqlite3GetVdbe(p->pParse);",
          "1506:     ExprList *pPart = pMWin->pPartition;",
          "1507:     int iColOff = pMWin->nBufferCol + (pPart ? pPart->nExpr : 0);",
          "1508:     int i;",
          "1509:     for(i=0; i<pOrderBy->nExpr; i++){",
          "1510:       sqlite3VdbeAddOp3(v, OP_Column, csr, iColOff+i, reg+i);",
          "1511:     }",
          "1512:   }",
          "1513: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1430: static void windowAggStep(",
          "1436: ){",
          "1437:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "1438:   Window *pWin;",
          "1439:   for(pWin=pMWin; pWin; pWin=pWin->pNextWin){",
          "",
          "[Removed Lines]",
          "1431:   Parse *pParse,",
          "",
          "[Added Lines]",
          "1535:   WindowCodeArg *p,",
          "1541:   Parse *pParse = p->pParse;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1479:       sqlite3VdbeAddOp2(v, OP_AddImm, pWin->regApp+1-bInverse, 1);",
          "1480:     }else if( pFunc->xSFunc!=noopStepFunc ){",
          "1481:       int addrIf = 0;",
          "1482:       if( pWin->pFilter ){",
          "1483:         int regTmp;",
          "1484:         assert( pWin->bExprArgs || !nArg ||nArg==pWin->pOwner->x.pList->nExpr );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1587:       int addrIf2 = 0;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1489:         VdbeCoverage(v);",
          "1490:         sqlite3ReleaseTempReg(pParse, regTmp);",
          "1491:       }",
          "1492:       if( pWin->bExprArgs ){",
          "1493:         int iStart = sqlite3VdbeCurrentAddr(v);",
          "1494:         VdbeOp *pOp, *pEnd;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1607:       if( pWin->eFrmType==TK_RANGE",
          "1608:        && pWin->eStart==pWin->eEnd",
          "1609:        && pWin->eStart==TK_PRECEDING",
          "1610:       ){",
          "1611:         int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "1612:         int regPeer = sqlite3GetTempReg(pParse);",
          "1613:         int regString = sqlite3GetTempReg(pParse);",
          "1614:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "1615:         VdbeModuleComment((v, \"windowAggStep \\\"peer is numeric?\\\" test\"));",
          "1616:         sqlite3VdbeAddOp3(v, op, p->regStart, lbl, p->regEnd);",
          "1619:         windowReadPeerValues(p, csr, regPeer);",
          "1620:         sqlite3VdbeAddOp2(v, OP_IsNull, regPeer, lbl);",
          "1621:         sqlite3VdbeAddOp4(v, OP_String8, 0, regString, 0, \"\", P4_STATIC);",
          "1622:         addrIf2 = sqlite3VdbeAddOp3(v, OP_Lt, regString, 0, regPeer);",
          "1623:         sqlite3ReleaseTempReg(pParse, regPeer);",
          "1624:         sqlite3ReleaseTempReg(pParse, regString);",
          "1625:         sqlite3VdbeResolveLabel(v, lbl);",
          "1626:         VdbeModuleComment((v, \"windowAggStep end \\\"peer is numeric?\\\"\"));",
          "1627:         assert( pWin->eStart==TK_PRECEDING || pWin->eStart==TK_FOLLOWING );",
          "1628:         assert( pMWin->pOrderBy && pMWin->pOrderBy->nExpr==1 );",
          "1629:       }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1518:         sqlite3ReleaseTempRange(pParse, regArg, nArg);",
          "1519:       }",
          "1520:       if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "1521:     }",
          "1522:   }",
          "1523: }",
          "",
          "[Removed Lines]",
          "1525: typedef struct WindowCodeArg WindowCodeArg;",
          "1526: typedef struct WindowCsrAndReg WindowCsrAndReg;",
          "1531: struct WindowCsrAndReg {",
          "1534: };",
          "1591: struct WindowCodeArg {",
          "1600:   WindowCsrAndReg start;",
          "1601:   WindowCsrAndReg current;",
          "1602:   WindowCsrAndReg end;",
          "1603: };",
          "",
          "[Added Lines]",
          "1660:       if( addrIf2 ) sqlite3VdbeJumpHere(v, addrIf2);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1609: #define WINDOW_AGGINVERSE 2",
          "1610: #define WINDOW_AGGSTEP    3",
          "",
          "[Removed Lines]",
          "1616: static void windowReadPeerValues(",
          "1617:   WindowCodeArg *p,",
          "1618:   int csr,",
          "1619:   int reg",
          "1620: ){",
          "1621:   Window *pMWin = p->pMWin;",
          "1622:   ExprList *pOrderBy = pMWin->pOrderBy;",
          "1623:   if( pOrderBy ){",
          "1624:     Vdbe *v = sqlite3GetVdbe(p->pParse);",
          "1625:     ExprList *pPart = pMWin->pPartition;",
          "1626:     int iColOff = pMWin->nBufferCol + (pPart ? pPart->nExpr : 0);",
          "1627:     int i;",
          "1628:     for(i=0; i<pOrderBy->nExpr; i++){",
          "1629:       sqlite3VdbeAddOp3(v, OP_Column, csr, iColOff+i, reg+i);",
          "1630:     }",
          "1631:   }",
          "1632: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1693:   int addrNext;",
          "1694:   int csr;",
          "1696:   assert( pMWin!=0 );",
          "1697:   csr = pMWin->csrApp;",
          "1698:   nPeer = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1734:   VdbeModuleComment((v, \"windowFullScan begin\"));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1749:     if( addrEq ) sqlite3VdbeJumpHere(v, addrEq);",
          "1750:   }",
          "1754:   sqlite3VdbeResolveLabel(v, lblNext);",
          "1755:   sqlite3VdbeAddOp2(v, OP_Next, csr, addrNext);",
          "",
          "[Removed Lines]",
          "1752:   windowAggStep(pParse, pMWin, csr, 0, p->regArg);",
          "",
          "[Added Lines]",
          "1792:   windowAggStep(p, pMWin, csr, 0, p->regArg);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1764:   }",
          "1766:   windowAggFinal(p, 1);",
          "1767: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1807:   VdbeModuleComment((v, \"windowFullScan end\"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2094:   Window *pMWin = p->pMWin;",
          "2095:   int ret = 0;",
          "2096:   Vdbe *v = p->pVdbe;",
          "2098:   int addrContinue = 0;",
          "2100:   int bPeer = (pMWin->eFrmType!=TK_ROWS);",
          "2102:   int lblDone = sqlite3VdbeMakeLabel(pParse);",
          "",
          "[Removed Lines]",
          "2097:   int addrIf = 0;",
          "2099:   int addrGoto = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2129:         );",
          "2130:       }",
          "2131:     }else{",
          "2133:       VdbeCoverage(v);",
          "2134:     }",
          "2135:   }",
          "",
          "[Removed Lines]",
          "2132:       addrIf = sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, 0, 1);",
          "",
          "[Added Lines]",
          "2171:       sqlite3VdbeAddOp3(v, OP_IfPos, regCountdown, lblDone, 1);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2152:         assert( pMWin->regEndRowid );",
          "2153:         sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regStartRowid, 1);",
          "2154:       }else{",
          "2156:       }",
          "2157:       break;",
          "",
          "[Removed Lines]",
          "2155:         windowAggStep(pParse, pMWin, csr, 1, p->regArg);",
          "",
          "[Added Lines]",
          "2194:         windowAggStep(p, pMWin, csr, 1, p->regArg);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2164:         assert( pMWin->regEndRowid );",
          "2165:         sqlite3VdbeAddOp2(v, OP_AddImm, pMWin->regEndRowid, 1);",
          "2166:       }else{",
          "2168:       }",
          "2169:       break;",
          "2170:   }",
          "",
          "[Removed Lines]",
          "2167:         windowAggStep(pParse, pMWin, csr, 0, p->regArg);",
          "",
          "[Added Lines]",
          "2206:         windowAggStep(p, pMWin, csr, 0, p->regArg);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "2182:     sqlite3VdbeAddOp2(v, OP_Next, csr, sqlite3VdbeCurrentAddr(v)+1+bPeer);",
          "2183:     VdbeCoverage(v);",
          "2184:     if( bPeer ){",
          "2186:     }",
          "2187:   }",
          "2189:   if( bPeer ){",
          "2190:     int nReg = (pMWin->pOrderBy ? pMWin->pOrderBy->nExpr : 0);",
          "2192:     windowReadPeerValues(p, csr, regTmp);",
          "2193:     windowIfNewPeer(pParse, pMWin->pOrderBy, regTmp, reg, addrContinue);",
          "2194:     sqlite3ReleaseTempRange(pParse, regTmp, nReg);",
          "",
          "[Removed Lines]",
          "2185:       addrGoto = sqlite3VdbeAddOp0(v, OP_Goto);",
          "2191:     int regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "",
          "[Added Lines]",
          "2224:       sqlite3VdbeAddOp2(v, OP_Goto, 0, lblDone);",
          "2230:     int regTmp;",
          "2235:     if( pMWin->eStart==TK_FOLLOWING && pMWin->eEnd==TK_FOLLOWING",
          "2236:      && pMWin->eFrmType==TK_RANGE && op==WINDOW_AGGINVERSE",
          "2237:     ){",
          "2238:       int regRowid1 = sqlite3GetTempReg(pParse);",
          "2239:       int regRowid2 = sqlite3GetTempReg(pParse);",
          "2240:       sqlite3VdbeAddOp2(v, OP_Rowid, p->start.csr, regRowid1);",
          "2241:       sqlite3VdbeAddOp2(v, OP_Rowid, p->end.csr, regRowid2);",
          "2242:       sqlite3VdbeAddOp3(v, OP_Ge, regRowid2, lblDone, regRowid1);",
          "2243:       sqlite3ReleaseTempReg(pParse, regRowid1);",
          "2244:       sqlite3ReleaseTempReg(pParse, regRowid2);",
          "2245:     }",
          "2246:     regTmp = (nReg ? sqlite3GetTempRange(pParse, nReg) : 0);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "2198:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNextRange);",
          "2199:   }",
          "2200:   sqlite3VdbeResolveLabel(v, lblDone);",
          "2203:   return ret;",
          "2204: }",
          "",
          "[Removed Lines]",
          "2201:   if( addrGoto ) sqlite3VdbeJumpHere(v, addrGoto);",
          "2202:   if( addrIf ) sqlite3VdbeJumpHere(v, addrIf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "2707:   if( pMWin->eStart==TK_PRECEDING || pMWin->eStart==TK_FOLLOWING ){",
          "2709:   }",
          "2710:   if( pMWin->eEnd==TK_PRECEDING || pMWin->eEnd==TK_FOLLOWING ){",
          "2712:   }",
          "",
          "[Removed Lines]",
          "2708:     regStart = ++pParse->nMem;",
          "2711:     regEnd = ++pParse->nMem;",
          "",
          "[Added Lines]",
          "2759:     s.regStart = ++pParse->nMem;",
          "2762:     s.regEnd = ++pParse->nMem;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2764:   s.regArg = windowInitAccum(pParse, pMWin);",
          "2769:   }",
          "2773:   }",
          "2776:     int op = ((pMWin->eStart==TK_FOLLOWING) ? OP_Ge : OP_Le);",
          "2780:     windowAggFinal(&s, 0);",
          "",
          "[Removed Lines]",
          "2766:   if( regStart ){",
          "2767:     sqlite3ExprCode(pParse, pMWin->pStart, regStart);",
          "2768:     windowCheckValue(pParse, regStart, 0 + (pMWin->eFrmType==TK_RANGE ? 3 : 0));",
          "2770:   if( regEnd ){",
          "2771:     sqlite3ExprCode(pParse, pMWin->pEnd, regEnd);",
          "2772:     windowCheckValue(pParse, regEnd, 1 + (pMWin->eFrmType==TK_RANGE ? 3 : 0));",
          "2775:   if( pMWin->eFrmType!=TK_RANGE && pMWin->eStart==pMWin->eEnd && regStart ){",
          "2777:     int addrGe = sqlite3VdbeAddOp3(v, op, regStart, 0, regEnd);",
          "",
          "[Added Lines]",
          "2817:   if( s.regStart ){",
          "2818:     sqlite3ExprCode(pParse, pMWin->pStart, s.regStart);",
          "2819:     windowCheckValue(pParse, s.regStart, 0 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2821:   if( s.regEnd ){",
          "2822:     sqlite3ExprCode(pParse, pMWin->pEnd, s.regEnd);",
          "2823:     windowCheckValue(pParse, s.regEnd, 1 + (pMWin->eFrmType==TK_RANGE?3:0));",
          "2826:   if( pMWin->eFrmType!=TK_RANGE && pMWin->eStart==pMWin->eEnd && s.regStart ){",
          "2828:     int addrGe = sqlite3VdbeAddOp3(v, op, s.regStart, 0, s.regEnd);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2785:     sqlite3VdbeAddOp2(v, OP_Goto, 0, lblWhereEnd);",
          "2786:     sqlite3VdbeJumpHere(v, addrGe);",
          "2787:   }",
          "2789:     assert( pMWin->eEnd==TK_FOLLOWING );",
          "2791:   }",
          "2793:   if( pMWin->eStart!=TK_UNBOUNDED ){",
          "",
          "[Removed Lines]",
          "2788:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eFrmType!=TK_RANGE && regEnd ){",
          "2790:     sqlite3VdbeAddOp3(v, OP_Subtract, regStart, regEnd, regStart);",
          "",
          "[Added Lines]",
          "2839:   if( pMWin->eStart==TK_FOLLOWING && pMWin->eFrmType!=TK_RANGE && s.regEnd ){",
          "2841:     sqlite3VdbeAddOp3(v, OP_Subtract, s.regStart, s.regEnd, s.regStart);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2819:       if( pMWin->eFrmType==TK_RANGE ){",
          "2820:         int lbl = sqlite3VdbeMakeLabel(pParse);",
          "2821:         int addrNext = sqlite3VdbeCurrentAddr(v);",
          "2824:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2825:         sqlite3VdbeAddOp2(v, OP_Goto, 0, addrNext);",
          "2826:         sqlite3VdbeResolveLabel(v, lbl);",
          "2827:       }else{",
          "2830:       }",
          "2831:     }",
          "2832:   }else",
          "2833:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2834:     int bRPS = (pMWin->eStart==TK_PRECEDING && pMWin->eFrmType==TK_RANGE);",
          "2837:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2839:   }else{",
          "2840:     int addr = 0;",
          "2841:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "",
          "[Removed Lines]",
          "2822:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "2823:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2828:         windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 0);",
          "2829:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2835:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "2836:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2838:     if( !bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "[Added Lines]",
          "2873:         windowCodeRangeTest(&s, OP_Ge, s.current.csr, s.regEnd, s.end.csr, lbl);",
          "2874:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2879:         windowCodeOp(&s, WINDOW_RETURN_ROW, s.regEnd, 0);",
          "2880:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2886:     windowCodeOp(&s, WINDOW_AGGSTEP, s.regEnd, 0);",
          "2887:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2889:     if( !bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2843:       if( pMWin->eFrmType==TK_RANGE ){",
          "2844:         int lbl = 0;",
          "2845:         addr = sqlite3VdbeCurrentAddr(v);",
          "2847:           lbl = sqlite3VdbeMakeLabel(pParse);",
          "2849:         }",
          "2850:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2853:           sqlite3VdbeAddOp2(v, OP_Goto, 0, addr);",
          "2854:           sqlite3VdbeResolveLabel(v, lbl);",
          "2855:         }",
          "2856:       }else{",
          "2859:           VdbeCoverage(v);",
          "2860:         }",
          "2861:         windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2864:       }",
          "2865:     }",
          "2866:   }",
          "",
          "[Removed Lines]",
          "2846:         if( regEnd ){",
          "2848:           windowCodeRangeTest(&s, OP_Ge, s.current.csr, regEnd, s.end.csr, lbl);",
          "2851:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2852:         if( regEnd ){",
          "2857:         if( regEnd ){",
          "2858:           addr = sqlite3VdbeAddOp3(v, OP_IfPos, regEnd, 0, 1);",
          "2862:         windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "2863:         if( regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "[Added Lines]",
          "2897:         if( s.regEnd ){",
          "2899:           windowCodeRangeTest(&s, OP_Ge, s.current.csr,s.regEnd,s.end.csr,lbl);",
          "2902:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2903:         if( s.regEnd ){",
          "2908:         if( s.regEnd ){",
          "2909:           addr = sqlite3VdbeAddOp3(v, OP_IfPos, s.regEnd, 0, 1);",
          "2913:         windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "2914:         if( s.regEnd ) sqlite3VdbeJumpHere(v, addr);",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "2879:   VdbeCoverage(v);",
          "2880:   if( pMWin->eEnd==TK_PRECEDING ){",
          "2881:     int bRPS = (pMWin->eStart==TK_PRECEDING && pMWin->eFrmType==TK_RANGE);",
          "2884:     windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 0);",
          "2885:   }else if( pMWin->eStart==TK_FOLLOWING ){",
          "2886:     int addrStart;",
          "",
          "[Removed Lines]",
          "2882:     windowCodeOp(&s, WINDOW_AGGSTEP, regEnd, 0);",
          "2883:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "[Added Lines]",
          "2933:     windowCodeOp(&s, WINDOW_AGGSTEP, s.regEnd, 0);",
          "2934:     if( bRPS ) windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "2890:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2891:     if( pMWin->eFrmType==TK_RANGE ){",
          "2892:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2894:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "2895:     }else",
          "2896:     if( pMWin->eEnd==TK_UNBOUNDED ){",
          "2897:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2899:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, 0, 1);",
          "2900:     }else{",
          "2901:       assert( pMWin->eEnd==TK_FOLLOWING );",
          "2902:       addrStart = sqlite3VdbeCurrentAddr(v);",
          "2905:     }",
          "2906:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2907:     sqlite3VdbeJumpHere(v, addrBreak2);",
          "",
          "[Removed Lines]",
          "2893:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "2898:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, regStart, 1);",
          "2903:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, regEnd, 1);",
          "2904:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 1);",
          "",
          "[Added Lines]",
          "2944:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 1);",
          "2949:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, s.regStart, 1);",
          "2954:       addrBreak1 = windowCodeOp(&s, WINDOW_RETURN_ROW, s.regEnd, 1);",
          "2955:       addrBreak2 = windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 1);",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "2916:     windowCodeOp(&s, WINDOW_AGGSTEP, 0, 0);",
          "2917:     addrStart = sqlite3VdbeCurrentAddr(v);",
          "2918:     addrBreak = windowCodeOp(&s, WINDOW_RETURN_ROW, 0, 1);",
          "2920:     sqlite3VdbeAddOp2(v, OP_Goto, 0, addrStart);",
          "2921:     sqlite3VdbeJumpHere(v, addrBreak);",
          "2922:   }",
          "",
          "[Removed Lines]",
          "2919:     windowCodeOp(&s, WINDOW_AGGINVERSE, regStart, 0);",
          "",
          "[Added Lines]",
          "2970:     windowCodeOp(&s, WINDOW_AGGINVERSE, s.regStart, 0);",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "230:   SELECT 1 WINDOW win AS (PARTITION BY fake_column);",
          "231: } {0 1}",
          "233: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "233: #-------------------------------------------------------------------------",
          "234: reset_db",
          "235: do_execsql_test 5.0 {",
          "236:   CREATE TABLE t1(a, c);",
          "237:   CREATE INDEX i1 ON t1(a);",
          "239:   INSERT INTO t1 VALUES(0, 421);",
          "240:   INSERT INTO t1 VALUES(1, 844);",
          "241:   INSERT INTO t1 VALUES(2, 1001);",
          "242: }",
          "244: do_execsql_test 5.1 {",
          "245:   SELECT a, sum(c) OVER (",
          "246:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 3 PRECEDING",
          "247:   ) FROM t1;",
          "248: } {0 {} 1 {} 2 {}}",
          "250: do_execsql_test 5.2 {",
          "251:   INSERT INTO t1 VALUES(NULL, 123);",
          "252:   INSERT INTO t1 VALUES(NULL, 111);",
          "253:   INSERT INTO t1 VALUES('xyz', 222);",
          "254:   INSERT INTO t1 VALUES('xyz', 333);",
          "256:   SELECT a, sum(c) OVER (",
          "257:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 3 PRECEDING",
          "258:   ) FROM t1;",
          "259: } {{} 234 {} 234 0 {} 1 {} 2 {} xyz 555 xyz 555}",
          "261: do_execsql_test 5.3 {",
          "262:   SELECT a, sum(c) OVER (",
          "263:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING",
          "264:   ) FROM t1;",
          "265: } {{} 234 {} 234 0 {} 1 {} 2 {} xyz 555 xyz 555}",
          "267: do_execsql_test 5.4 {",
          "268:   SELECT a, sum(c) OVER (",
          "269:     ORDER BY a RANGE BETWEEN 0 PRECEDING AND 3 PRECEDING EXCLUDE NO OTHERS",
          "270:   ) FROM t1;",
          "271: } {{} 234 {} 234 0 {} 1 {} 2 {} xyz 555 xyz 555}",
          "273: do_execsql_test 5.5 {",
          "274:   SELECT a, sum(c) OVER (",
          "275:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING EXCLUDE NO OTHERS",
          "276:   ) FROM t1;",
          "277: } {{} 234 {} 234 0 {} 1 {} 2 {} xyz 555 xyz 555}",
          "279: #-------------------------------------------------------------------------",
          "280: reset_db",
          "281: do_execsql_test 6.0 {",
          "282:   CREATE TABLE t1(a, c);",
          "283:   CREATE INDEX i1 ON t1(a);",
          "285:   INSERT INTO t1 VALUES(7,  997);",
          "286:   INSERT INTO t1 VALUES(8,  997);",
          "287:   INSERT INTO t1 VALUES('abc', 1001);",
          "288: }",
          "289: do_execsql_test 6.1 {",
          "290:   SELECT a, sum(c) OVER (",
          "291:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING",
          "292:   ) FROM t1;",
          "293: } {7 {} 8 {} abc 1001}",
          "294: do_execsql_test 6.2 {",
          "295:   SELECT a, sum(c) OVER (",
          "296:     ORDER BY a RANGE BETWEEN 2 FOLLOWING AND 0 FOLLOWING EXCLUDE NO OTHERS",
          "297:   ) FROM t1;",
          "298: } {7 {} 8 {} abc 1001}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e364802321c67602b2522ac4cde1fdeb2ac5d18",
      "candidate_info": {
        "commit_hash": "3e364802321c67602b2522ac4cde1fdeb2ac5d18",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3e364802321c67602b2522ac4cde1fdeb2ac5d18",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c",
          "test/where.test"
        ],
        "message": "Fix the OP_SeekGE, OP_SeekGT, OP_SeekLE, and OP_SeekLT opcodes so that they preserve the datatype of the value in the register used as the key. Ticket [d9f584e936c7a8d0]\n\nFossilOrigin-Name: 81b9f0f55042777b37de78069f7089041a9ee21dd0a0c86b879053fb46e140b4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c",
          "test/where.test||test/where.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d02490a2f0cae047087130b4ad8f55f265845c2ffb3bde3b7d507edb54acea6d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4127:   pC->deferredMoveto = 0;",
          "4128:   pC->cacheStatus = CACHE_STALE;",
          "4129:   if( pC->isTable ){",
          "4131:     assert( sqlite3BtreeCursorHasHint(pC->uc.pCursor, BTREE_SEEK_EQ)==0",
          "4132:               || CORRUPT_DB );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4130:     u16 flags3, newType;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4137:     pIn3 = &aMem[pOp->p3];",
          "4139:       applyNumericAffinity(pIn3, 0);",
          "4140:     }",
          "4148:           VdbeBranchTaken(1,2);",
          "4149:           goto jump_to_p2;",
          "4150:         }else{",
          "",
          "[Removed Lines]",
          "4138:     if( (pIn3->flags & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4141:     iKey = sqlite3VdbeIntValue(pIn3);",
          "4145:     if( (pIn3->flags & (MEM_Int|MEM_IntReal))==0 ){",
          "4146:       if( (pIn3->flags & MEM_Real)==0 ){",
          "4147:         if( (pIn3->flags & MEM_Null) || oc>=OP_SeekGE ){",
          "",
          "[Added Lines]",
          "4139:     flags3 = pIn3->flags;",
          "4140:     if( (flags3 & (MEM_Int|MEM_Real|MEM_IntReal|MEM_Str))==MEM_Str ){",
          "4149:     if( (newType & (MEM_Int|MEM_IntReal))==0 ){",
          "4150:       if( (newType & MEM_Real)==0 ){",
          "4151:         if( (newType & MEM_Null) || oc>=OP_SeekGE ){",
          "",
          "---------------"
        ],
        "test/where.test||test/where.test": [
          "File: test/where.test -> test/where.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1538:     ON CONFLICT(c) DO UPDATE SET b=NULL",
          "1539: } {1 {corrupt database}}",
          "1541: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1541: # 2019-08-21 Ticket https://www.sqlite.org/src/info/d9f584e936c7a8d0",
          "1542: #",
          "1543: db close",
          "1544: sqlite3 db :memory:",
          "1545: do_execsql_test where-26.1 {",
          "1546:   CREATE TABLE t0(c0 INTEGER PRIMARY KEY, c1 TEXT);",
          "1547:   INSERT INTO t0(c0, c1) VALUES (1, 'a');",
          "1548:   CREATE TABLE t1(c0 INT PRIMARY KEY, c1 TEXT);",
          "1549:   INSERT INTO t1(c0, c1) VALUES (1, 'a');",
          "1550:   SELECT * FROM t0 WHERE '-1' BETWEEN 0 AND t0.c0;",
          "1551: } {1 a}",
          "1552: do_execsql_test where-26.2 {",
          "1553:   SELECT * FROM t1 WHERE '-1' BETWEEN 0 AND t1.c0;",
          "1554: } {1 a}",
          "1555: do_execsql_test where-26.3 {",
          "1556:   SELECT * FROM t0 WHERE '-1'>=0 AND '-1'<=t0.c0;",
          "1557: } {1 a}",
          "1558: do_execsql_test where-26.4 {",
          "1559:   SELECT * FROM t1 WHERE '-1'>=0 AND '-1'<=t1.c0;",
          "1560: } {1 a}",
          "1561: do_execsql_test where-26.5 {",
          "1562:   SELECT '-1' BETWEEN 0 AND t0.c0 FROM t0;",
          "1563: } {1}",
          "1564: do_execsql_test where-26.6 {",
          "1565:   SELECT '-1' BETWEEN 0 AND t1.c0 FROM t1;",
          "1566: } {1}",
          "1567: do_execsql_test where-26.7 {",
          "1568:   SELECT '-1'>=0 AND '-1'<=t0.c0 FROM t0;",
          "1569: } {1}",
          "1570: do_execsql_test where-26.8 {",
          "1571:   SELECT '-1'>=0 AND '-1'<=t1.c0 FROM t1;",
          "1572: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2d82269ca8ccc13328af42cd9dad7edd565f9456",
      "candidate_info": {
        "commit_hash": "2d82269ca8ccc13328af42cd9dad7edd565f9456",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2d82269ca8ccc13328af42cd9dad7edd565f9456",
        "files": [
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/rowvaluevtab.test"
        ],
        "message": "Fix a problem with row-value IN(...) operators and virtual tables.\n\nFossilOrigin-Name: aa57d7abac0bb92d4d5fd4e093a11cf8efc04e4eed748b2a400d01f137250649",
        "before_after_code_files": [
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/rowvaluevtab.test||test/rowvaluevtab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/wherecode.c||src/wherecode.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/wherecode.c||src/wherecode.c"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:   INSERT INTO vt0(vt0) VALUES('rebuild');",
          "194: }",
          "196: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "196: #-------------------------------------------------------------------------",
          "197: #",
          "198: reset_db",
          "199: do_execsql_test 7.0 {",
          "200:   CREATE VIRTUAL TABLE t1 USING fts5(x);",
          "201:   INSERT INTO t1(rowid, x) VALUES(1, 'hello world');",
          "202:   INSERT INTO t1(rowid, x) VALUES(2, 'well said');",
          "203:   INSERT INTO t1(rowid, x) VALUES(3, 'hello said');",
          "204:   INSERT INTO t1(rowid, x) VALUES(4, 'well world');",
          "206:   CREATE TABLE t2 (a, b);",
          "207:   INSERT INTO t2 VALUES(1, 'hello');",
          "208:   INSERT INTO t2 VALUES(2, 'world');",
          "209:   INSERT INTO t2 VALUES(3, 'said');",
          "210:   INSERT INTO t2 VALUES(4, 'hello');",
          "211: }",
          "213: do_execsql_test 7.1 {",
          "214:   SELECT rowid FROM t1 WHERE (rowid, x) IN (SELECT a, b FROM t2);",
          "215: }",
          "217: do_execsql_test 7.2 {",
          "218:   SELECT rowid FROM t1 WHERE rowid=2 AND t1 = 'hello';",
          "219: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d1acf72ae1ea7484bb9c3a8630094f1a3a9597578c7b9d6e02fc0a4e3f59c57d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1307:       pTerm = pLoop->aLTerm[j];",
          "1308:       if( j<16 && (pLoop->u.vtab.omitMask>>j)&1 ){",
          "1309:         disableTerm(pLevel, pTerm);",
          "",
          "[Removed Lines]",
          "1310:       }else if( (pTerm->eOperator & WO_IN)!=0 ){",
          "",
          "[Added Lines]",
          "1310:       }else if( (pTerm->eOperator & WO_IN)!=0 &&",
          "1311:           sqlite3ExprVectorSize(pTerm->pExpr->pLeft)==1",
          "1312:       ){",
          "",
          "---------------"
        ],
        "test/rowvaluevtab.test||test/rowvaluevtab.test": [
          "File: test/rowvaluevtab.test -> test/rowvaluevtab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 October 14",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "14: set testdir [file dirname $argv0]",
          "15: source $testdir/tester.tcl",
          "16: set ::testprefix rowvaluevtab",
          "18: register_echo_module db",
          "20: do_execsql_test 1.0 {",
          "21:   CREATE TABLE t1(a, b, c);",
          "22:   CREATE INDEX t1b ON t1(b);",
          "23:   INSERT INTO t1 VALUES('one', 1, 1);",
          "24:   INSERT INTO t1 VALUES('two', 1, 2);",
          "25:   INSERT INTO t1 VALUES('three', 1, 3);",
          "26:   INSERT INTO t1 VALUES('four', 2, 1);",
          "27:   INSERT INTO t1 VALUES('five', 2, 2);",
          "28:   INSERT INTO t1 VALUES('six', 2, 3);",
          "29:   INSERT INTO t1 VALUES('seven', 3, 1);",
          "30:   INSERT INTO t1 VALUES('eight', 3, 2);",
          "31:   INSERT INTO t1 VALUES('nine', 3, 3);",
          "33:   WITH s(i) AS (",
          "34:     SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<10000",
          "35:   ) INSERT INTO t1 SELECT NULL, NULL, NULL FROM s;",
          "36:   CREATE VIRTUAL TABLE e1 USING echo(t1);",
          "37: }",
          "39: proc do_vfilter4_test {tn sql expected} {",
          "40:   set res [list]",
          "41:   db eval \"explain $sql\" {",
          "42:     if {$opcode==\"VFilter\"} {",
          "43:       lappend res $p4",
          "44:     }",
          "45:   }",
          "46:   uplevel [list do_test $tn [list set {} $res] [list {*}$expected]]",
          "47: }",
          "49: do_execsql_test 1.1 {",
          "50:   SELECT a FROM e1 WHERE (b, c) = (2, 2)",
          "51: } {five}",
          "52: do_vfilter4_test 1.1f {",
          "53:   SELECT a FROM e1 WHERE (b, c) = (?, ?)",
          "54: } {{SELECT rowid, a, b, c FROM 't1' WHERE b = ?}}",
          "56: do_execsql_test 1.2 {",
          "57:   SELECT a FROM e1 WHERE (b, c) > (2, 2)",
          "58: } {six seven eight nine}",
          "59: do_vfilter4_test 1.2f {",
          "60:   SELECT a FROM e1 WHERE (b, c) > (2, 2)",
          "61: } {",
          "62:   {SELECT rowid, a, b, c FROM 't1' WHERE b >= ?}",
          "63: }",
          "65: do_execsql_test 1.3 {",
          "66:   SELECT a FROM e1 WHERE (b, c) >= (2, 2)",
          "67: } {five six seven eight nine}",
          "68: do_vfilter4_test 1.3f {",
          "69:   SELECT a FROM e1 WHERE (b, c) >= (2, 2)",
          "70: } {",
          "71:   {SELECT rowid, a, b, c FROM 't1' WHERE b >= ?}",
          "72: }",
          "74: do_execsql_test 1.3 {",
          "75:   SELECT a FROM e1 WHERE (b, c) BETWEEN (1, 2) AND (2, 3)",
          "76: } {two three four five six}",
          "77: do_vfilter4_test 1.3f {",
          "78:   SELECT a FROM e1 WHERE (b, c) BETWEEN (1, 2) AND (2, 3)",
          "79: } {",
          "80:   {SELECT rowid, a, b, c FROM 't1' WHERE b >= ? AND b <= ?}",
          "81: }",
          "83: do_execsql_test 1.4 {",
          "84:   SELECT a FROM e1 WHERE (b, c) IN ( VALUES(2, 2) )",
          "85: } {five}",
          "86: do_vfilter4_test 1.4f {",
          "87:   SELECT a FROM e1 WHERE (b, c) IN ( VALUES(2, 2) )",
          "88: } {{SELECT rowid, a, b, c FROM 't1' WHERE b = ?}}",
          "90: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d70284022fbc4d7fecb4c4b60f98589e6897a9f",
      "candidate_info": {
        "commit_hash": "9d70284022fbc4d7fecb4c4b60f98589e6897a9f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9d70284022fbc4d7fecb4c4b60f98589e6897a9f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/func.c"
        ],
        "message": "Fix an OOB read in the INSTR() function introduced yesterday by check-in [3fb40f518086c1e8] and detected by OSSFuzz.  The test case is in TH3.\n\nFossilOrigin-Name: d49047c1b59bbfd05204af9973cdb0fab51b4d2661b550aec10d917fff94dc9b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/func.c||src/func.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8efd62594eae725decb719aa7777c020f982b7cdc2c92bab3b91bf349a5bc298",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/func.c||src/func.c": [
          "File: src/func.c -> src/func.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224:     }else{",
          "225:       pC1 = sqlite3_value_dup(argv[0]);",
          "226:       zHaystack = sqlite3_value_text(pC1);",
          "227:       pC2 = sqlite3_value_dup(argv[1]);",
          "228:       zNeedle = sqlite3_value_text(pC2);",
          "229:       isText = 1;",
          "230:     }",
          "235:     firstChar = zNeedle[0];",
          "236:     while( nNeedle<=nHaystack",
          "237:        && (zHaystack[0]!=firstChar || memcmp(zHaystack, zNeedle, nNeedle)!=0)",
          "",
          "[Removed Lines]",
          "231:     if( zNeedle==0 || (nHaystack && zHaystack==0) ){",
          "232:       sqlite3_result_error_nomem(context);",
          "233:       goto endInstr;",
          "234:     }",
          "",
          "[Added Lines]",
          "227:       if( zHaystack==0 ) goto endInstrOOM;",
          "228:       nHaystack = sqlite3_value_bytes(pC1);",
          "231:       if( zNeedle==0 ) goto endInstrOOM;",
          "232:       nNeedle = sqlite3_value_bytes(pC2);",
          "235:     if( zNeedle==0 || (nHaystack && zHaystack==0) ) goto endInstrOOM;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248: endInstr:",
          "249:   sqlite3_value_free(pC1);",
          "250:   sqlite3_value_free(pC2);",
          "251: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:   return;",
          "253: endInstrOOM:",
          "254:   sqlite3_result_error_nomem(context);",
          "255:   goto endInstr;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "862faf28bb36627359ee3b9cb295b63ed2964df7",
      "candidate_info": {
        "commit_hash": "862faf28bb36627359ee3b9cb295b63ed2964df7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/862faf28bb36627359ee3b9cb295b63ed2964df7",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Change a faulty assert() in fts5 that could fail on a corrupt db to an if() statement.\n\nFossilOrigin-Name: 1daaba9fb46706af8ed0669a661c304df999a69cf639d29d93208f422c515d8c",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "882:       }else{",
          "883:         i += fts5GetVarint32(&pData[i], pLvl->nMerge);",
          "884:         i += fts5GetVarint32(&pData[i], nTotal);",
          "886:         pLvl->aSeg = (Fts5StructureSegment*)sqlite3Fts5MallocZero(&rc,",
          "887:             nTotal * sizeof(Fts5StructureSegment)",
          "888:         );",
          "",
          "[Removed Lines]",
          "885:         assert( nTotal>=pLvl->nMerge );",
          "",
          "[Added Lines]",
          "885:         if( nTotal<pLvl->nMerge ) rc = FTS5_CORRUPT;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "603:   UPDATE t1 SET content='abc' WHERE content='boomer';",
          "604: } {1 {constraint failed}}",
          "606: sqlite3_fts5_may_be_corrupt 0",
          "607: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "606: #-------------------------------------------------------------------------",
          "607: #",
          "608: reset_db",
          "609: do_test 12.0 {",
          "610:   sqlite3 db {}",
          "611:   db deserialize [decode_hexdb {",
          "612: | size 28672 pagesize 4096 filename c2.db",
          "613: | page 1 offset 0",
          "614: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "615: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 07   .....@  ........",
          "616: |     32: 00 00 00 00 00 00 00 00 00 00 00 07 00 00 00 00   ................",
          "617: |     48: 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00   ................",
          "618: |     96: 00 00 00 00 0d 00 00 00 07 0d d2 00 0f c4 0f 6d   ...............m",
          "619: |    112: 0f 02 0e ab 0e 4e 0d f6 0d d2 00 00 00 00 00 00   .....N..........",
          "620: |   3536: 00 00 22 07 06 17 11 11 01 31 74 61 62 6c 65 74   .........1tablet",
          "621: |   3552: 32 74 32 07 43 52 45 41 54 45 20 54 41 42 4c 45   2t2.CREATE TABLE",
          "622: |   3568: 20 74 32 28 78 29 56 06 06 17 1f 1f 01 7d 74 61    t2(x)V.......ta",
          "623: |   3584: 62 6c 65 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63   blet1_configt1_c",
          "624: |   3600: 6f 6e 66 69 67 06 43 52 45 41 54 45 20 54 41 42   onfig.CREATE TAB",
          "625: |   3616: 4c 45 20 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b   LE 't1_config'(k",
          "626: |   3632: 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 76 29    PRIMARY KEY, v)",
          "627: |   3648: 20 57 49 54 48 4f 55 54 20 52 4f 57 49 44 5b 05    WITHOUT ROWID[.",
          "628: |   3664: 07 17 21 21 01 81 01 74 61 62 6c 65 74 31 5f 64   ..!!...tablet1_d",
          "629: |   3680: 6f 63 73 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65   ocsizet1_docsize",
          "630: |   3696: 05 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74   .CREATE TABLE 't",
          "631: |   3712: 31 5f 64 6f 63 73 69 7a 65 27 28 69 64 20 49 4e   1_docsize'(id IN",
          "632: |   3728: 54 45 47 45 52 20 50 52 49 4d 41 52 59 20 4b 45   TEGER PRIMARY KE",
          "633: |   3744: 59 2c 20 73 7a 20 42 4c 4f 42 29 55 04 06 17 21   Y, sz BLOB)U...!",
          "634: |   3760: 21 01 77 74 61 62 6c 65 74 31 5f 63 6f 6e 74 65   !.wtablet1_conte",
          "635: |   3776: 6e 74 74 31 5f 63 6f 6e 74 65 6e 74 04 43 52 45   ntt1_content.CRE",
          "636: |   3792: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 63 6f   ATE TABLE 't1_co",
          "637: |   3808: 6e 74 65 6e 74 27 28 69 64 20 49 4e 54 45 47 45   ntent'(id INTEGE",
          "638: |   3824: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 63   R PRIMARY KEY, c",
          "639: |   3840: 30 29 69 03 07 17 19 19 01 81 2d 74 61 62 6c 65   0)i.......-table",
          "640: |   3856: 74 31 5f 69 64 78 74 31 5f 69 64 78 03 43 52 45   t1_idxt1_idx.CRE",
          "641: |   3872: 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 69 64   ATE TABLE 't1_id",
          "642: |   3888: 78 27 28 73 65 67 69 64 2c 20 74 65 72 6d 2c 20   x'(segid, term,",
          "643: |   3904: 70 67 6e 6f 2c 20 50 52 49 4d 41 52 59 20 4b 45   pgno, PRIMARY KE",
          "644: |   3920: 59 28 73 65 67 69 64 2c 20 74 65 72 6d 29 29 20   Y(segid, term))",
          "645: |   3936: 57 49 54 48 4f 55 54 20 52 4f 57 49 44 55 02 07   WITHOUT ROWIDU..",
          "646: |   3952: 17 1b 1b 01 81 01 74 61 62 6c 65 74 31 5f 64 61   ......tablet1_da",
          "647: |   3968: 74 61 74 31 5f 64 61 74 61 02 43 52 45 41 54 45   tat1_data.CREATE",
          "648: |   3984: 20 54 41 42 4c 45 20 27 74 31 5f 64 61 74 61 27    TABLE 't1_data'",
          "649: |   4000: 28 69 64 20 49 4e 54 45 47 45 52 20 50 52 49 4d   (id INTEGER PRIM",
          "650: |   4016: 41 52 59 20 4b 45 59 2c 20 62 6c 6f 63 6b 20 42   ARY KEY, block B",
          "651: |   4032: 4c 4f 42 29 3a 01 06 17 11 11 08 63 74 61 62 6c   LOB):......ctabl",
          "652: |   4048: 65 74 31 74 31 43 52 45 41 54 45 20 56 49 52 54   et1t1CREATE VIRT",
          "653: |   4064: 55 41 4c 20 54 41 42 4c 45 20 74 31 20 55 53 49   UAL TABLE t1 USI",
          "654: |   4080: 4e 47 20 66 74 73 35 28 63 6f 6e 74 65 6e 74 29   NG fts5(content)",
          "655: | page 2 offset 4096",
          "656: |      0: 0d 00 00 00 03 0f bd 00 0f d8 0f ef 0f bd 00 00   ................",
          "657: |   4016: 00 00 00 00 00 00 00 00 00 00 00 00 00 24 84 80   .............$..",
          "658: |   4032: 80 80 80 01 03 00 4e 00 00 00 1e 06 30 61 62 61   ......N.....0aba",
          "659: |   4048: 63 6b 01 02 02 04 02 66 74 02 02 02 04 04 6e 64   ck.....ft.....nd",
          "660: |   4064: 6f 6e 03 02 02 04 0a 07 05 01 03 00 10 03 03 0f   on..............",
          "661: |   4080: 0a 03 00 24 00 00 00 00 01 01 01 20 01 01 01 01   ...$....... ....",
          "662: | page 3 offset 8192",
          "663: |      0: 0a 00 00 00 01 0f fa 00 0f fa 00 00 00 00 00 00   ................",
          "664: |   4080: 00 00 00 00 00 00 00 00 00 00 05 04 09 0c 01 02   ................",
          "665: | page 4 offset 12288",
          "666: |      0: 0d 00 00 00 03 0f e0 00 0f f6 0f ec 0f e0 3f e0   ..............?.",
          "667: |     16: a0 30 30 01 b6 16 26 16 e6 46 f6 e0 80 20 30 01   .00...&..F... 0.",
          "668: |     32: 76 16 26 16 67 40 80 10 30 01 76 16 26 16 36 b0   v.&.g@..0.v.&.6.",
          "669: |     48: d0 00 00 00 30 fe e0 00 ff a0 ff 40 fe 00 00 00   ....0......@....",
          "670: | page 5 offset 16384",
          "671: |   4064: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03   ................",
          "672: |   4080: 03 00 0e 01 04 02 03 00 0e 01 04 01 03 00 0e 01   ................",
          "673: | page 6 offset 20480",
          "674: |      0: 0a 00 00 00 01 0f f4 00 0f f4 00 00 00 00 00 00   ................",
          "675: |   4080: 00 00 00 00 0b 03 1b 01 76 65 72 73 69 6f 6e 04   ........version.",
          "676: | page 7 offset 24576",
          "677: |      0: 0d 00 00 00 03 0f d6 00 0f f4 0f e1 0f d6 00 00   ................",
          "678: |   4048: 00 00 00 00 00 00 09 03 02 1b 72 65 62 75 69 6c   ..........rebuil",
          "679: |   4064: 64 11 02 02 2b 69 6e 74 65 67 72 69 74 79 2d 63   d...+integrity-c",
          "680: |   4080: 68 65 63 6b 0a 01 02 1d 6f 70 74 69 6d 69 7a 65   heck....optimize",
          "681: | end c2.db",
          "682: }]} {}",
          "684: do_catchsql_test 11.1 {",
          "685:   SELECT * FROM t1 WHERE t1 MATCH 'abandon';",
          "686: } {1 {vtable constructor failed: t1}}",
          "688: do_catchsql_test 11.2 {",
          "689:   INSERT INTO t1(t1, rank) VALUES('merge', 500);",
          "690: } {1 {vtable constructor failed: t1}}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c064964deb0b7220ba784f07ca9c603680f3c8bb936d56ab4eca1962beac1359",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}