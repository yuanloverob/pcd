{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fc7f31742de0fea66610ac3211b40e27a467c923",
      "candidate_info": {
        "commit_hash": "fc7f31742de0fea66610ac3211b40e27a467c923",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fc7f31742de0fea66610ac3211b40e27a467c923",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h",
          "ext/fts3/fts3_expr.c",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid",
          "test/fts3misc.test"
        ],
        "message": "Fix an integer overflow in fts3 causing a usan error.\n\nFossilOrigin-Name: e256f85289a78e629acdf83e5bf1f8df2a0ffb3d559738eb9e49db6c228dc8c0",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h",
          "ext/fts3/fts3_expr.c||ext/fts3/fts3_expr.c",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid",
          "test/fts3misc.test||test/fts3misc.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "962:   return zRet;",
          "963: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "970: int sqlite3Fts3ReadInt(const char *z, int *pnOut){",
          "971:   u64 iVal = 0;",
          "972:   int i;",
          "973:   for(i=0; z[i]>='0' && z[i]<='9'; i++){",
          "974:     iVal = iVal*10 + (z[i] - '0');",
          "975:     if( iVal>0x7FFFFFFF ) return -1;",
          "976:   }",
          "978:   return i;",
          "979: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "978: static int fts3GobbleInt(const char **pp, int *pnOut){",
          "979:   const int MAX_NPREFIX = 10000000;",
          "989:   }",
          "993:   return SQLITE_OK;",
          "994: }",
          "",
          "[Removed Lines]",
          "983:   for(p=*pp; p[0]>='0' && p[0]<='9'; p++){",
          "984:     nInt = nInt * 10 + (p[0] - '0');",
          "985:     if( nInt>MAX_NPREFIX ){",
          "986:       nInt = 0;",
          "987:       break;",
          "988:     }",
          "990:   if( p==*pp ) return SQLITE_ERROR;",
          "",
          "[Added Lines]",
          "997:   int nByte;",
          "998:   nByte = sqlite3Fts3ReadInt(*pp, &nInt);",
          "999:   if( nInt>MAX_NPREFIX ){",
          "1000:     nInt = 0;",
          "1001:   }",
          "1002:   if( nByte==0 ){",
          "1003:     return SQLITE_ERROR;",
          "",
          "---------------"
        ],
        "ext/fts3/fts3Int.h||ext/fts3/fts3Int.h": [
          "File: ext/fts3/fts3Int.h -> ext/fts3/fts3Int.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "591: int sqlite3Fts3FirstFilter(sqlite3_int64, char *, int, char *);",
          "592: void sqlite3Fts3CreateStatTable(int*, Fts3Table*);",
          "593: int sqlite3Fts3EvalTestDeferred(Fts3Cursor *pCsr, int *pRc);",
          "596: const char *sqlite3Fts3NextToken(const char *, int *);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "594: int sqlite3Fts3ReadInt(const char *z, int *pnOut);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_expr.c||ext/fts3/fts3_expr.c": [
          "File: ext/fts3/fts3_expr.c -> ext/fts3/fts3_expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "446:       if( pKey->eType==FTSQUERY_NEAR ){",
          "447:         assert( nKey==4 );",
          "448:         if( zInput[4]=='/' && zInput[5]>='0' && zInput[5]<='9' ){",
          "453:         }",
          "454:       }",
          "",
          "[Removed Lines]",
          "449:           nNear = 0;",
          "450:           for(nKey=5; zInput[nKey]>='0' && zInput[nKey]<='9'; nKey++){",
          "451:             nNear = nNear * 10 + (zInput[nKey] - '0');",
          "452:           }",
          "",
          "[Added Lines]",
          "449:           nKey += 1+sqlite3Fts3ReadInt(&zInput[nKey+1], &nNear);",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3069:   if( zText ){",
          "3070:     int i;",
          "3071:     int iMul = 1;",
          "3073:     for(i=0; zText[i]>='0' && zText[i]<='9'; i++){",
          "3074:       iVal = iVal*10 + (zText[i] - '0');",
          "3075:     }",
          "3077:     while( zText[i]==' ' ) i++;",
          "3078:     iVal = 0;",
          "3079:     if( zText[i]=='-' ){",
          "",
          "[Removed Lines]",
          "3072:     i64 iVal = 0;",
          "",
          "[Added Lines]",
          "3072:     u64 iVal = 0;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 52a6acca6d5d376308d354c02f4d676d9375c34c3841d7b1941196ee8b4e2511",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/fts3misc.test||test/fts3misc.test": [
          "File: test/fts3misc.test -> test/fts3misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:   INSERT INTO f(f) VALUES ('merge=69,59');",
          "316: } {1 {database disk image is malformed}}",
          "318: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "318: #-------------------------------------------------------------------------",
          "319: do_execsql_test 11.0 {",
          "320:   CREATE VIRTUAL TABLE xyz USING fts3();",
          "321: }",
          "322: do_execsql_test 11.1 {",
          "323:   SELECT * FROM xyz WHERE xyz MATCH 'a NEAR/4294836224 a';",
          "324: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "beb9def059f3a56a148aca6c40d13e19fe617283",
      "candidate_info": {
        "commit_hash": "beb9def059f3a56a148aca6c40d13e19fe617283",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/beb9def059f3a56a148aca6c40d13e19fe617283",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "ext/misc/decimal.c",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/shell.c.in",
          "src/test1.c",
          "test/decimal.test"
        ],
        "message": "An extension for doing decimal arithmetic on strings.\n\nFossilOrigin-Name: 4c3b85607feb53462ccc8b89bea699fdb132c402eae597afa33cc40a85c32329",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "ext/misc/decimal.c||ext/misc/decimal.c",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in",
          "src/test1.c||src/test1.c",
          "test/decimal.test||test/decimal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "443:   $(TOP)/ext/misc/carray.c \\",
          "444:   $(TOP)/ext/misc/closure.c \\",
          "445:   $(TOP)/ext/misc/csv.c \\",
          "446:   $(TOP)/ext/misc/eval.c \\",
          "447:   $(TOP)/ext/misc/explain.c \\",
          "448:   $(TOP)/ext/misc/fileio.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "446:   $(TOP)/ext/misc/decimal.c \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1082:  $(TOP)/src/shell.c.in \\",
          "1083:         $(TOP)/ext/misc/appendvfs.c \\",
          "1084:  $(TOP)/ext/misc/shathree.c \\",
          "1085:  $(TOP)/ext/misc/fileio.c \\",
          "1086:  $(TOP)/ext/misc/completion.c \\",
          "1087:  $(TOP)/ext/misc/sqlar.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1086:         $(TOP)/ext/misc/decimal.c \\",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1560:   $(TOP)\\ext\\misc\\carray.c \\",
          "1561:   $(TOP)\\ext\\misc\\closure.c \\",
          "1562:   $(TOP)\\ext\\misc\\csv.c \\",
          "1563:   $(TOP)\\ext\\misc\\eval.c \\",
          "1564:   $(TOP)\\ext\\misc\\explain.c \\",
          "1565:   $(TOP)\\ext\\misc\\fileio.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1563:   $(TOP)\\ext\\misc\\decimal.c \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2204:  $(TOP)\\src\\shell.c.in \\",
          "2205:  $(TOP)\\ext\\misc\\appendvfs.c \\",
          "2206:  $(TOP)\\ext\\misc\\shathree.c \\",
          "2207:  $(TOP)\\ext\\misc\\fileio.c \\",
          "2208:  $(TOP)\\ext\\misc\\completion.c \\",
          "2209:  $(TOP)\\ext\\misc\\uint.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2208:         $(TOP)\\ext\\misc\\decimal.c \\",
          "",
          "---------------"
        ],
        "ext/misc/decimal.c||ext/misc/decimal.c": [
          "File: ext/misc/decimal.c -> ext/misc/decimal.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #include \"sqlite3ext.h\"",
          "18: SQLITE_EXTENSION_INIT1",
          "19: #include <assert.h>",
          "20: #include <string.h>",
          "21: #include <ctype.h>",
          "22: #include <stdlib.h>",
          "26: typedef struct Decimal Decimal;",
          "27: struct Decimal {",
          "35: };",
          "40: static void decimal_clear(Decimal *p){",
          "41:   sqlite3_free(p->a);",
          "42: }",
          "47: static void decimal_free(Decimal *p){",
          "48:   if( p ){",
          "49:     decimal_clear(p);",
          "50:     sqlite3_free(p);",
          "51:   }",
          "52: }",
          "58: static Decimal *decimal_new(",
          "59:   sqlite3_context *pCtx,",
          "60:   sqlite3_value *pIn,",
          "61:   int nAlt,",
          "62:   const unsigned char *zAlt",
          "63: ){",
          "64:   Decimal *p;",
          "65:   int n, i;",
          "66:   const unsigned char *zIn;",
          "67:   int iExp = 0;",
          "68:   p = sqlite3_malloc( sizeof(*p) );",
          "69:   if( p==0 ) goto new_no_mem;",
          "70:   p->sign = 0;",
          "71:   p->oom = 0;",
          "72:   p->isInit = 1;",
          "73:   p->isNull = 0;",
          "74:   p->nDigit = 0;",
          "75:   p->nFrac = 0;",
          "76:   if( zAlt ){",
          "77:     n = nAlt,",
          "78:     zIn = zAlt;",
          "79:   }else{",
          "80:     if( sqlite3_value_type(pIn)==SQLITE_NULL ){",
          "81:       p->a = 0;",
          "82:       p->isNull = 1;",
          "83:       return p;",
          "84:     }",
          "85:     n = sqlite3_value_bytes(pIn);",
          "86:     zIn = sqlite3_value_text(pIn);",
          "87:   }",
          "88:   p->a = sqlite3_malloc64( n+1 );",
          "89:   if( p->a==0 ) goto new_no_mem;",
          "90:   for(i=0; isspace(zIn[i]); i++){}",
          "91:   if( zIn[i]=='-' ){",
          "92:     p->sign = 1;",
          "93:     i++;",
          "94:   }else if( zIn[i]=='+' ){",
          "95:     i++;",
          "96:   }",
          "97:   while( i<n && zIn[i]=='0' ) i++;",
          "98:   while( i<n ){",
          "99:     char c = zIn[i];",
          "100:     if( c>='0' && c<='9' ){",
          "101:       p->a[p->nDigit++] = c - '0';",
          "102:     }else if( c=='.' ){",
          "103:       p->nFrac = p->nDigit + 1;",
          "104:     }else if( c=='e' || c=='E' ){",
          "105:       int j = i+1;",
          "106:       int neg = 0;",
          "107:       if( j>=n ) break;",
          "108:       if( zIn[j]=='-' ){",
          "109:         neg = 1;",
          "110:         j++;",
          "111:       }else if( zIn[j]=='+' ){",
          "112:         j++;",
          "113:       }",
          "114:       while( j<n && iExp<1000000 ){",
          "115:         if( zIn[j]>='0' && zIn[j]<='9' ){",
          "116:           iExp = iExp*10 + zIn[j] - '0';",
          "117:         }",
          "118:         j++;",
          "119:       }",
          "120:       if( neg ) iExp = -iExp;",
          "121:       break;",
          "122:     }",
          "123:     i++;",
          "124:   }",
          "125:   if( p->nFrac ){",
          "126:     p->nFrac = p->nDigit - (p->nFrac - 1);",
          "127:   }",
          "128:   if( iExp>0 ){",
          "129:     if( p->nFrac>0 ){",
          "130:       if( iExp<=p->nFrac ){",
          "131:         p->nFrac -= iExp;",
          "132:         iExp = 0;",
          "133:       }else{",
          "134:         iExp -= p->nFrac;",
          "135:         p->nFrac = 0;",
          "136:       }",
          "137:     }",
          "138:     if( iExp>0 ){",
          "139:       p->a = sqlite3_realloc64(p->a, p->nDigit + iExp + 1 );",
          "140:       if( p->a==0 ) goto new_no_mem;",
          "141:       memset(p->a+p->nDigit, 0, iExp);",
          "142:       p->nDigit += iExp;",
          "143:     }",
          "144:   }else if( iExp<0 ){",
          "145:     int nExtra;",
          "146:     iExp = -iExp;",
          "147:     nExtra = p->nDigit - p->nFrac - 1;",
          "148:     if( nExtra ){",
          "149:       if( nExtra>=iExp ){",
          "150:         p->nFrac += iExp;",
          "151:         iExp  = 0;",
          "152:       }else{",
          "153:         iExp -= nExtra;",
          "154:         p->nFrac = p->nDigit - 1;",
          "155:       }",
          "156:     }",
          "157:     if( iExp>0 ){",
          "158:       p->a = sqlite3_realloc64(p->a, p->nDigit + iExp + 1 );",
          "159:       if( p->a==0 ) goto new_no_mem;",
          "160:       memmove(p->a+iExp, p->a, p->nDigit);",
          "161:       memset(p->a, 0, iExp);",
          "162:       p->nDigit += iExp;",
          "163:       p->nFrac += iExp;",
          "164:     }",
          "165:   }",
          "166:   return p;",
          "168: new_no_mem:",
          "169:   if( pCtx ) sqlite3_result_error_nomem(pCtx);",
          "170:   sqlite3_free(p);",
          "171:   return 0;",
          "172: }",
          "177: static void decimal_result(sqlite3_context *pCtx, Decimal *p){",
          "178:   char *z;",
          "179:   int i, j;",
          "180:   int n;",
          "181:   if( p==0 || p->oom ){",
          "182:     sqlite3_result_error_nomem(pCtx);",
          "183:     return;",
          "184:   }",
          "185:   if( p->isNull ){",
          "186:     sqlite3_result_null(pCtx);",
          "187:     return;",
          "188:   }",
          "189:   z = sqlite3_malloc( p->nDigit+4 );",
          "190:   if( z==0 ){",
          "191:     sqlite3_result_error_nomem(pCtx);",
          "192:     return;",
          "193:   }",
          "194:   i = 0;",
          "195:   if( p->nDigit==0 || (p->nDigit==1 && p->a[0]==0) ){",
          "196:     p->sign = 0;",
          "197:   }",
          "198:   if( p->sign ){",
          "199:     z[0] = '-';",
          "200:     i = 1;",
          "201:   }",
          "202:   n = p->nDigit - p->nFrac;",
          "203:   if( n<=0 ){",
          "204:     z[i++] = '0';",
          "205:   }",
          "206:   j = 0;",
          "207:   while( n>0  ){",
          "208:     z[i++] = p->a[j] + '0';",
          "209:     j++;",
          "210:     n--;",
          "211:   }",
          "212:   if( p->nFrac ){",
          "213:     z[i++] = '.';",
          "214:     do{",
          "215:       z[i++] = p->a[j] + '0';",
          "216:       j++;",
          "217:     }while( j<p->nDigit );",
          "218:   }",
          "219:   z[i] = 0;",
          "220:   sqlite3_result_text(pCtx, z, i, sqlite3_free);",
          "221: }",
          "228: static void decimalFunc(",
          "229:   sqlite3_context *context,",
          "230:   int argc,",
          "231:   sqlite3_value **argv",
          "232: ){",
          "233:   Decimal *p = decimal_new(context, argv[0], 0, 0);",
          "234:   decimal_result(context, p);",
          "235:   decimal_free(p);",
          "236: }",
          "249: static int decimal_cmp(const Decimal *pA, const Decimal *pB){",
          "250:   int nASig, nBSig, rc, n;",
          "251:   if( pA->sign!=pB->sign ){",
          "252:     return pA->sign ? -1 : +1;",
          "253:   }",
          "254:   if( pA->sign ){",
          "255:     const Decimal *pTemp = pA;",
          "256:     pA = pB;",
          "257:     pB = pTemp;",
          "258:   }",
          "259:   nASig = pA->nDigit - pA->nFrac;",
          "260:   nBSig = pB->nDigit - pB->nFrac;",
          "261:   if( nASig!=nBSig ){",
          "262:     return nASig - nBSig;",
          "263:   }",
          "264:   n = pA->nDigit;",
          "265:   if( n>pB->nDigit ) n = pB->nDigit;",
          "266:   rc = memcmp(pA->a, pB->a, n);",
          "267:   if( rc==0 ){",
          "268:     rc = pA->nDigit - pB->nDigit;",
          "269:   }",
          "270:   return rc;",
          "271: }",
          "279: static void decimalCmpFunc(",
          "280:   sqlite3_context *context,",
          "281:   int argc,",
          "282:   sqlite3_value **argv",
          "283: ){",
          "284:   Decimal *pA = 0, *pB = 0;",
          "285:   int rc;",
          "287:   pA = decimal_new(context, argv[0], 0, 0);",
          "288:   if( pA==0 || pA->isNull ) goto cmp_done;",
          "289:   pB = decimal_new(context, argv[1], 0, 0);",
          "290:   if( pB==0 || pB->isNull ) goto cmp_done;",
          "291:   rc = decimal_cmp(pA, pB);",
          "292:   if( rc<0 ) rc = -1;",
          "293:   else if( rc>0 ) rc = +1;",
          "294:   sqlite3_result_int(context, rc);",
          "295: cmp_done:",
          "296:   decimal_free(pA);",
          "297:   decimal_free(pB);",
          "298: }",
          "303: static void decimal_normalize(Decimal *p){",
          "304:   int i;",
          "305:   int nSig;",
          "306:   if( p==0 ) return;",
          "307:   nSig = p->nDigit - p->nFrac;",
          "308:   for(i=0; i<nSig && p->a[i]==0; i++){}",
          "309:   if( i ){",
          "310:     memmove(p->a, p->a+i, p->nDigit - i);",
          "311:     p->nDigit -= i;",
          "312:   }",
          "313: }",
          "319: static void decimal_expand(Decimal *p, int nDigit, int nFrac){",
          "320:   int nAddSig;",
          "321:   int nAddFrac;",
          "322:   if( p==0 ) return;",
          "323:   nAddFrac = nFrac - p->nFrac;",
          "324:   nAddSig = (nDigit - p->nDigit) - nAddFrac;",
          "325:   if( nAddFrac==0 && nAddSig==0 ) return;",
          "326:   p->a = sqlite3_realloc64(p->a, nDigit+1);",
          "327:   if( p->a==0 ){",
          "328:     p->oom = 1;",
          "329:     return;",
          "330:   }",
          "331:   if( nAddSig ){",
          "332:     memmove(p->a+nAddSig, p->a, p->nDigit);",
          "333:     memset(p->a, 0, nAddSig);",
          "334:     p->nDigit += nAddSig;",
          "335:   }",
          "336:   if( nAddFrac ){",
          "337:     memset(p->a+p->nDigit, 0, nAddFrac);",
          "338:     p->nDigit += nAddFrac;",
          "339:     p->nFrac += nAddFrac;",
          "340:   }",
          "341: }",
          "348: static void decimal_add(Decimal *pA, Decimal *pB){",
          "349:   int nSig, nFrac, nDigit;",
          "350:   int i, rc;",
          "351:   if( pA==0 ){",
          "352:     return;",
          "353:   }",
          "354:   if( pA->oom || pB==0 || pB->oom ){",
          "355:     pA->oom = 1;",
          "356:     return;",
          "357:   }",
          "358:   if( pA->isNull || pB->isNull ){",
          "359:     pA->isNull = 1;",
          "360:     return;",
          "361:   }",
          "362:   nSig = pA->nDigit - pA->nFrac;",
          "363:   if( nSig<pB->nDigit-pB->nFrac ) nSig = pB->nDigit - pB->nFrac;",
          "364:   nFrac = pA->nFrac;",
          "365:   if( nFrac<pB->nFrac ) nFrac = pB->nFrac;",
          "366:   nDigit = nSig + nFrac + 1;",
          "367:   decimal_expand(pA, nDigit, nFrac);",
          "368:   decimal_expand(pB, nDigit, nFrac);",
          "369:   if( pA->oom || pB->oom ){",
          "370:     pA->oom = 1;",
          "371:   }else{",
          "372:     if( pA->sign==pB->sign ){",
          "373:       int carry = 0;",
          "374:       for(i=nDigit-1; i>=0; i--){",
          "375:         int x = pA->a[i] + pB->a[i] + carry;",
          "376:         if( x>=10 ){",
          "377:           carry = 1;",
          "378:           pA->a[i] = x - 10;",
          "379:         }else{",
          "380:           carry = 0;",
          "381:           pA->a[i] = x;",
          "382:         }",
          "383:       }",
          "384:     }else{",
          "385:       signed char *aA, *aB;",
          "386:       int borrow = 0;",
          "387:       rc = memcmp(pA->a, pB->a, nDigit);",
          "388:       if( rc<0 ){",
          "389:         aA = pB->a;",
          "390:         aB = pA->a;",
          "391:         pA->sign = !pA->sign;",
          "392:       }else{",
          "393:         aA = pA->a;",
          "394:         aB = pB->a;",
          "395:       }",
          "396:       for(i=nDigit-1; i>=0; i--){",
          "397:         int x = aA[i] - aB[i] - borrow;",
          "398:         if( x<0 ){",
          "399:           pA->a[i] = x+10;",
          "400:           borrow = 1;",
          "401:         }else{",
          "402:           pA->a[i] = x;",
          "403:           borrow = 0;",
          "404:         }",
          "405:       }",
          "406:     }",
          "407:   }",
          "408:   decimal_normalize(pA);",
          "409: }",
          "414: static int decimalCollFunc(",
          "415:   void *notUsed,",
          "416:   int nKey1, const void *pKey1,",
          "417:   int nKey2, const void *pKey2",
          "418: ){",
          "419:   const unsigned char *zA = (const unsigned char*)pKey1;",
          "420:   const unsigned char *zB = (const unsigned char*)pKey2;",
          "421:   Decimal *pA = decimal_new(0, 0, nKey1, zA);",
          "422:   Decimal *pB = decimal_new(0, 0, nKey2, zB);",
          "423:   int rc;",
          "424:   if( pA==0 || pB==0 ){",
          "425:     rc = 0;",
          "426:   }else{",
          "427:     rc = decimal_cmp(pA, pB);",
          "428:   }",
          "429:   decimal_free(pA);",
          "430:   decimal_free(pB);",
          "431:   return rc;",
          "432: }",
          "441: static void decimalAddFunc(",
          "442:   sqlite3_context *context,",
          "443:   int argc,",
          "444:   sqlite3_value **argv",
          "445: ){",
          "446:   Decimal *pA = decimal_new(context, argv[0], 0, 0);",
          "447:   Decimal *pB = decimal_new(context, argv[1], 0, 0);",
          "448:   decimal_add(pA, pB);",
          "449:   decimal_result(context, pA);",
          "450:   decimal_free(pA);",
          "451:   decimal_free(pB);",
          "452: }",
          "453: static void decimalSubFunc(",
          "454:   sqlite3_context *context,",
          "455:   int argc,",
          "456:   sqlite3_value **argv",
          "457: ){",
          "458:   Decimal *pA = decimal_new(context, argv[0], 0, 0);",
          "459:   Decimal *pB = decimal_new(context, argv[1], 0, 0);",
          "460:   if( pB==0 ) return;",
          "461:   pB->sign = !pB->sign;",
          "462:   decimal_add(pA, pB);",
          "463:   decimal_result(context, pA);",
          "464:   decimal_free(pA);",
          "465:   decimal_free(pB);",
          "466: }",
          "473: static void decimalSumStep(",
          "474:   sqlite3_context *context,",
          "475:   int argc,",
          "476:   sqlite3_value **argv",
          "477: ){",
          "478:   Decimal *p;",
          "479:   Decimal *pArg;",
          "480:   p = sqlite3_aggregate_context(context, sizeof(*p));",
          "481:   if( p==0 ) return;",
          "482:   if( !p->isInit ){",
          "483:     p->isInit = 1;",
          "484:     p->a = sqlite3_malloc(2);",
          "485:     if( p->a==0 ){",
          "486:       p->oom = 1;",
          "487:     }else{",
          "488:       p->a[0] = 0;",
          "489:     }",
          "490:     p->nDigit = 1;",
          "491:     p->nFrac = 0;",
          "492:   }",
          "493:   if( sqlite3_value_type(argv[0])==SQLITE_NULL ) return;",
          "494:   pArg = decimal_new(context, argv[0], 0, 0);",
          "495:   decimal_add(p, pArg);",
          "496:   decimal_free(pArg);",
          "497: }",
          "498: static void decimalSumInverse(",
          "499:   sqlite3_context *context,",
          "500:   int argc,",
          "501:   sqlite3_value **argv",
          "502: ){",
          "503:   Decimal *p;",
          "504:   Decimal *pArg;",
          "505:   p = sqlite3_aggregate_context(context, sizeof(*p));",
          "506:   if( p==0 ) return;",
          "507:   if( sqlite3_value_type(argv[0])==SQLITE_NULL ) return;",
          "508:   pArg = decimal_new(context, argv[0], 0, 0);",
          "509:   if( pArg ) pArg->sign = !pArg->sign;",
          "510:   decimal_add(p, pArg);",
          "511:   decimal_free(pArg);",
          "512: }",
          "513: static void decimalSumValue(sqlite3_context *context){",
          "514:   Decimal *p = sqlite3_aggregate_context(context, 0);",
          "515:   if( p==0 ) return;",
          "516:   decimal_normalize(p);",
          "517:   decimal_result(context, p);",
          "518: }",
          "519: static void decimalSumFinalize(sqlite3_context *context){",
          "520:   Decimal *p = sqlite3_aggregate_context(context, 0);",
          "521:   if( p==0 ) return;",
          "522:   decimal_normalize(p);",
          "523:   decimal_result(context, p);",
          "524:   decimal_clear(p);",
          "525: }",
          "528: #ifdef _WIN32",
          "529: __declspec(dllexport)",
          "530: #endif",
          "531: int sqlite3_decimal_init(",
          "532:   sqlite3 *db,",
          "533:   char **pzErrMsg,",
          "534:   const sqlite3_api_routines *pApi",
          "535: ){",
          "536:   int rc = SQLITE_OK;",
          "537:   SQLITE_EXTENSION_INIT2(pApi);",
          "538:   static const struct {",
          "539:     const char *zFuncName;",
          "540:     int nArg;",
          "541:     void (*xFunc)(sqlite3_context*,int,sqlite3_value**);",
          "542:   } aFunc[] = {",
          "543:     { \"decimal\",       1,   decimalFunc        },",
          "544:     { \"decimal_cmp\",   2,   decimalCmpFunc     },",
          "545:     { \"decimal_add\",   2,   decimalAddFunc     },",
          "546:     { \"decimal_sub\",   2,   decimalSubFunc     },",
          "547:   };",
          "548:   int i;",
          "551:   for(i=0; i<sizeof(aFunc)/sizeof(aFunc[0]) && rc==SQLITE_OK; i++){",
          "552:     rc = sqlite3_create_function(db, aFunc[i].zFuncName, aFunc[i].nArg,",
          "553:                    SQLITE_UTF8|SQLITE_INNOCUOUS|SQLITE_DETERMINISTIC,",
          "554:                    0, aFunc[i].xFunc, 0, 0);",
          "555:   }",
          "556:   if( rc==SQLITE_OK ){",
          "557:     rc = sqlite3_create_window_function(db, \"decimal_sum\", 1,",
          "558:                    SQLITE_UTF8|SQLITE_INNOCUOUS|SQLITE_DETERMINISTIC, 0,",
          "559:                    decimalSumStep, decimalSumFinalize,",
          "560:                    decimalSumValue, decimalSumInverse, 0);",
          "561:   }",
          "562:   if( rc==SQLITE_OK ){",
          "563:     rc = sqlite3_create_collation(db, \"decimal\", SQLITE_UTF8,",
          "564:                                   0, decimalCollFunc);",
          "565:   }",
          "566:   return rc;",
          "567: }",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:   $(TOP)/ext/misc/carray.c \\",
          "364:   $(TOP)/ext/misc/closure.c \\",
          "365:   $(TOP)/ext/misc/csv.c \\",
          "366:   $(TOP)/ext/misc/eval.c \\",
          "367:   $(TOP)/ext/misc/explain.c \\",
          "368:   $(TOP)/ext/misc/fileio.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "366:   $(TOP)/ext/misc/decimal.c \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "742:  $(TOP)/src/shell.c.in \\",
          "743:         $(TOP)/ext/misc/appendvfs.c \\",
          "744:  $(TOP)/ext/misc/shathree.c \\",
          "745:  $(TOP)/ext/misc/fileio.c \\",
          "746:  $(TOP)/ext/misc/completion.c \\",
          "747:  $(TOP)/ext/misc/sqlar.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "746:         $(TOP)/ext/misc/decimal.c \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 067291143a63db924ead4810defb4bc6f195557412f5d1c22299f30d2d9f2a79",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1011: INCLUDE ../ext/misc/appendvfs.c",
          "1012: INCLUDE ../ext/misc/memtrace.c",
          "1013: INCLUDE ../ext/misc/uint.c",
          "1014: #ifdef SQLITE_HAVE_ZLIB",
          "1015: INCLUDE ../ext/misc/zipfile.c",
          "1016: INCLUDE ../ext/misc/sqlar.c",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1014: INCLUDE ../ext/misc/decimal.c",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4556:     sqlite3_shathree_init(p->db, 0, 0);",
          "4557:     sqlite3_completion_init(p->db, 0, 0);",
          "4558:     sqlite3_uint_init(p->db, 0, 0);",
          "4559: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_ENABLE_DBPAGE_VTAB)",
          "4560:     sqlite3_dbdata_init(p->db, 0, 0);",
          "4561: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4560:     sqlite3_decimal_init(p->db, 0, 0);",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7257:   extern int sqlite3_eval_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7258:   extern int sqlite3_explain_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7259:   extern int sqlite3_fileio_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7260:   extern int sqlite3_fuzzer_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7261:   extern int sqlite3_ieee_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7262:   extern int sqlite3_nextchar_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7260:   extern int sqlite3_decimal_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7282:     { \"carray\",                sqlite3_carray_init               },",
          "7283:     { \"closure\",               sqlite3_closure_init              },",
          "7284:     { \"csv\",                   sqlite3_csv_init                  },",
          "7285:     { \"eval\",                  sqlite3_eval_init                 },",
          "7286:     { \"explain\",               sqlite3_explain_init              },",
          "7287:     { \"fileio\",                sqlite3_fileio_init               },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7286:     { \"decimal\",               sqlite3_decimal_init              },",
          "",
          "---------------"
        ],
        "test/decimal.test||test/decimal.test": [
          "File: test/decimal.test -> test/decimal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2017 December 9",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set testprefix decimal",
          "17: if {[catch {load_static_extension db decimal} error]} {",
          "18:   puts \"Skipping zipfile tests, hit load error: $error\"",
          "19:   finish_test; return",
          "20: }",
          "22: do_execsql_test 1000 {",
          "23:   SELECT decimal(1);",
          "24: } {1}",
          "25: do_execsql_test 1010 {",
          "26:   SELECT decimal(1.0);",
          "27: } {1.0}",
          "28: do_execsql_test 1020 {",
          "29:   SELECT decimal(0001.0);",
          "30: } {1.0}",
          "31: do_execsql_test 1030 {",
          "32:   SELECT decimal(+0001.0);",
          "33: } {1.0}",
          "34: do_execsql_test 1040 {",
          "35:   SELECT decimal(-0001.0);",
          "36: } {-1.0}",
          "37: do_execsql_test 1050 {",
          "38:   SELECT decimal(1.0e72);",
          "39: } {1000000000000000000000000000000000000000000000000000000000000000000000000}",
          "40: #   123456789 123456789 123456789 123456789 123456789 123456789 123456789 123",
          "41: do_execsql_test 1060 {",
          "42:   SELECT decimal(1.0e-72);",
          "43: } {0.0000000000000000000000000000000000000000000000000000000000000000000000010}",
          "44: #    123456789 123456789 123456789 123456789 123456789 123456789 123456789 123",
          "45: do_execsql_test 1070 {",
          "46:   SELECT decimal(-123e-4);",
          "47: } {-0.0123}",
          "48: do_execsql_test 1080 {",
          "49:   SELECT decimal(+123e+4);",
          "50: } {1230000.0}",
          "53: do_execsql_test 2000 {",
          "54:   CREATE TABLE t1(seq INTEGER PRIMARY KEY, val TEXT);",
          "55:   INSERT INTO t1 VALUES",
          "56:     (1, '-9999e99'),",
          "57:     (2, '-9998.000e+99'),",
          "58:     (3, '-9999.0'),",
          "59:     (4, '-1'),",
          "60:     (5, '-9999e-20'),",
          "61:     (6, '0'),",
          "62:     (7, '1e-30'),",
          "63:     (8, '1e-29'),",
          "64:     (9, '1'),",
          "65:     (10,'1.00000000000000001'),",
          "66:     (11,'+1.00001'),",
          "67:     (12,'99e+99');",
          "68:   SELECT *, '|'",
          "69:     FROM t1 AS a, t1 AS b",
          "70:    WHERE a.seq<b.seq",
          "71:      AND decimal_cmp(a.val,b.val)>=0;",
          "72: } {}",
          "73: do_execsql_test 2010 {",
          "74:   SELECT *, '|'",
          "75:     FROM t1 AS a, t1 AS b",
          "76:    WHERE a.seq<>b.seq",
          "77:      AND decimal_cmp(a.val,b.val)==0;",
          "78: } {}",
          "79: do_execsql_test 2020 {",
          "80:   SELECT *, '|'",
          "81:     FROM t1 AS a, t1 AS b",
          "82:    WHERE a.seq>b.seq",
          "83:      AND decimal_cmp(a.val,b.val)<=0;",
          "84: } {}",
          "85: do_execsql_test 2030 {",
          "86:   SELECT seq FROM t1 ORDER BY val COLLATE decimal;",
          "87: } {1 2 3 4 5 6 7 8 9 10 11 12}",
          "88: do_execsql_test 2040 {",
          "89:   SELECT seq FROM t1 ORDER BY val COLLATE decimal DESC;",
          "90: } {12 11 10 9 8 7 6 5 4 3 2 1}",
          "92: do_execsql_test 3000 {",
          "93:   CREATE TABLE t3(seq INTEGER PRIMARY KEY, val TEXT);",
          "94:   WITH RECURSIVE c(x) AS (VALUES(1) UNION SELECT x+1 FROM c WHERE x<10)",
          "95:     INSERT INTO t3(seq, val) SELECT x, x FROM c;",
          "96:   WITH RECURSIVE c(x) AS (VALUES(1) UNION SELECT x+1 FROM c WHERE x<5)",
          "97:     INSERT INTO t3(seq, val) SELECT x+10, x*1000 FROM c;",
          "98:   SELECT decimal(val) FROM t3 ORDER BY seq;",
          "99: } {1 2 3 4 5 6 7 8 9 10 1000 2000 3000 4000 5000}",
          "100: do_execsql_test 3020 {",
          "101:   SELECT decimal_add(val,'0.5') FROM t3 WHERE seq>5 ORDER BY seq",
          "102: } {6.5 7.5 8.5 9.5 10.5 1000.5 2000.5 3000.5 4000.5 5000.5}",
          "103: do_execsql_test 3030 {",
          "104:   SELECT decimal_add(val,'-10') FROM t3 ORDER BY seq;",
          "105: } {-9 -8 -7 -6 -5 -4 -3 -2 -1 0 990 1990 2990 3990 4990}",
          "107: do_execsql_test 4000 {",
          "108:   SELECT decimal_sum(val) FROM t3;",
          "109: } {15055}",
          "110: do_execsql_test 4010 {",
          "111:   SELECT decimal_sum(decimal_add(val,val||'e+10')) FROM t3;",
          "112: } {150550000015055}",
          "113: do_execsql_test 4010 {",
          "114:   SELECT decimal_sum(decimal_add(val||'e+20',decimal_add(val,val||'e-20')))",
          "115:     FROM t3;",
          "116: } {1505500000000000000015055.00000000000000015055}",
          "118: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2629adc7b28f8d87377bcf170ad888365b388095",
      "candidate_info": {
        "commit_hash": "2629adc7b28f8d87377bcf170ad888365b388095",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2629adc7b28f8d87377bcf170ad888365b388095",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/e_fkey.test"
        ],
        "message": "Update test file e_fkey.test to account for the fact that new columns with REFERENCE clauses and non-NULL default values may now be added using ALTER TABLE if the table is empty.\n\nFossilOrigin-Name: 4087fce97252beda2456164afe9508f952fc9fe4be68ad0e9b330569a78e42f2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/e_fkey.test||test/e_fkey.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3d9780c5f6095ea35bc731a51eb34d7cf8bd5dcece825b686b94fd50131626e2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/e_fkey.test||test/e_fkey.test": [
          "File: test/e_fkey.test -> test/e_fkey.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "2507:   drop_all_tables",
          "2509:   do_test e_fkey-56.$tn.1 \"",
          "2511:     [list catchsql $zAlter]",
          "2512:   \" [lindex {{0 {}} {1 {Cannot add a REFERENCES column with non-NULL default value}}} $isError]",
          "",
          "[Removed Lines]",
          "2510:     execsql { CREATE TABLE tbl(a, b) }",
          "",
          "[Added Lines]",
          "2510:     execsql { CREATE TABLE tbl(a, b); INSERT INTO tbl VALUES(1, 2); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2771: #",
          "2772: do_test e_fkey-61.1.1 {",
          "2773:   drop_all_tables",
          "2775:   catchsql { ALTER TABLE t1 ADD COLUMN c DEFAULT 'xxx' REFERENCES t2 }",
          "2776: } {1 {Cannot add a REFERENCES column with non-NULL default value}}",
          "2777: do_test e_fkey-61.1.2 {",
          "",
          "[Removed Lines]",
          "2774:   execsql { CREATE TABLE t1(a, b) }",
          "",
          "[Added Lines]",
          "2774:   execsql { CREATE TABLE t1(a, b) ; INSERT INTO t1 VALUES(1, 2) }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d35956c86834f53da7743b922e4a688643a3467",
      "candidate_info": {
        "commit_hash": "6d35956c86834f53da7743b922e4a688643a3467",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6d35956c86834f53da7743b922e4a688643a3467",
        "files": [
          "ext/misc/noop.c",
          "ext/misc/rot13.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix the rot13.c extension to be deterministic.  Add the noop.c extension.\n\nFossilOrigin-Name: a679122ca8ec95d5c8afba3a1a50170db9dd519a3810e56877b8f56e858d0175",
        "before_after_code_files": [
          "ext/misc/noop.c||ext/misc/noop.c",
          "ext/misc/rot13.c||ext/misc/rot13.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/noop.c||ext/misc/noop.c": [
          "File: ext/misc/noop.c -> ext/misc/noop.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "15: #include \"sqlite3ext.h\"",
          "16: SQLITE_EXTENSION_INIT1",
          "17: #include <assert.h>",
          "18: #include <string.h>",
          "25: static void noopfunc(",
          "26:   sqlite3_context *context,",
          "27:   int argc,",
          "28:   sqlite3_value **argv",
          "29: ){",
          "30:   assert( argc==1 );",
          "31:   sqlite3_result_value(context, argv[0]);",
          "32: }",
          "34: #ifdef _WIN32",
          "35: __declspec(dllexport)",
          "36: #endif",
          "37: int sqlite3_noop_init(",
          "38:   sqlite3 *db,",
          "39:   char **pzErrMsg,",
          "40:   const sqlite3_api_routines *pApi",
          "41: ){",
          "42:   int rc = SQLITE_OK;",
          "43:   SQLITE_EXTENSION_INIT2(pApi);",
          "45:   rc = sqlite3_create_function(db, \"noop\", 1,",
          "46:                      SQLITE_UTF8 | SQLITE_DETERMINISTIC,",
          "47:                      0, noopfunc, 0, 0);",
          "48:   if( rc ) return rc;",
          "49:   rc = sqlite3_create_function(db, \"noop_i\", 1,",
          "50:                      SQLITE_UTF8 | SQLITE_DETERMINISTIC | SQLITE_INNOCUOUS,",
          "51:                      0, noopfunc, 0, 0);",
          "52:   if( rc ) return rc;",
          "53:   rc = sqlite3_create_function(db, \"noop_do\", 1,",
          "54:                      SQLITE_UTF8 | SQLITE_DETERMINISTIC | SQLITE_DIRECTONLY,",
          "55:                      0, noopfunc, 0, 0);",
          "56:   return rc;",
          "57: }",
          "",
          "---------------"
        ],
        "ext/misc/rot13.c||ext/misc/rot13.c": [
          "File: ext/misc/rot13.c -> ext/misc/rot13.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:   int rc = SQLITE_OK;",
          "106:   SQLITE_EXTENSION_INIT2(pApi);",
          "110:   if( rc==SQLITE_OK ){",
          "111:     rc = sqlite3_create_collation(db, \"rot13\", SQLITE_UTF8, 0, rot13CollFunc);",
          "112:   }",
          "",
          "[Removed Lines]",
          "108:   rc = sqlite3_create_function(db, \"rot13\", 1, SQLITE_UTF8|SQLITE_INNOCUOUS, 0,",
          "109:                                rot13func, 0, 0);",
          "",
          "[Added Lines]",
          "108:   rc = sqlite3_create_function(db, \"rot13\", 1,",
          "109:                    SQLITE_UTF8|SQLITE_INNOCUOUS|SQLITE_DETERMINISTIC,",
          "110:                    0, rot13func, 0, 0);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: fe7472fd2a70b4df6cb62041b72ed1638ba27ed1e6ceb8aaf56d1c8a82d91889",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cc1d9109c4322f22b5ae4d6c3286c28e03556a26",
      "candidate_info": {
        "commit_hash": "cc1d9109c4322f22b5ae4d6c3286c28e03556a26",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cc1d9109c4322f22b5ae4d6c3286c28e03556a26",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Fix a documentation typo.  No changes to code.\n\nFossilOrigin-Name: 758353c72627a847ba027ca44a750bbf057827dafd05811f56e4765dfc77623b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 7285ae2ce8fb1439e1acea2ec321abbc76aab0a2e84b58683fddb0a7bf74fb1b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    }
  ]
}