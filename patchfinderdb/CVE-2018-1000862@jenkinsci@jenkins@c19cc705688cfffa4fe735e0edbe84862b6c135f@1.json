{
  "cve_id": "CVE-2018-1000862",
  "cve_desc": "An information exposure vulnerability exists in Jenkins 2.153 and earlier, LTS 2.138.3 and earlier in DirectoryBrowserSupport.java that allows attackers with the ability to control build output to browse the file system on agents running builds beyond the duration of the build using the workspace browser.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "c19cc705688cfffa4fe735e0edbe84862b6c135f",
  "patch_info": {
    "commit_hash": "c19cc705688cfffa4fe735e0edbe84862b6c135f",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/c19cc705688cfffa4fe735e0edbe84862b6c135f",
    "files": [
      "core/src/main/java/hudson/FilePath.java",
      "core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
      "core/src/main/java/hudson/model/Run.java",
      "core/src/main/java/jenkins/util/VirtualFile.java",
      "core/src/test/java/hudson/FilePathSEC904Test.java",
      "core/src/test/java/hudson/UtilSEC904Test.java",
      "core/src/test/java/jenkins/util/VirtualFileSEC904Test.java",
      "test/src/test/java/hudson/model/DirectoryBrowserSupportSEC904Test.java",
      "test/src/test/java/hudson/tasks/ArtifactArchiverTest.java",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.bat",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.sh",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.bat",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.sh",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructureWithJunctions.bat"
    ],
    "message": "[SECURITY-904]",
    "before_after_code_files": [
      "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java",
      "core/src/main/java/hudson/model/DirectoryBrowserSupport.java||core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
      "core/src/main/java/hudson/model/Run.java||core/src/main/java/hudson/model/Run.java",
      "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java",
      "core/src/test/java/hudson/FilePathSEC904Test.java||core/src/test/java/hudson/FilePathSEC904Test.java",
      "core/src/test/java/hudson/UtilSEC904Test.java||core/src/test/java/hudson/UtilSEC904Test.java",
      "core/src/test/java/jenkins/util/VirtualFileSEC904Test.java||core/src/test/java/jenkins/util/VirtualFileSEC904Test.java",
      "test/src/test/java/hudson/model/DirectoryBrowserSupportSEC904Test.java||test/src/test/java/hudson/model/DirectoryBrowserSupportSEC904Test.java",
      "test/src/test/java/hudson/tasks/ArtifactArchiverTest.java||test/src/test/java/hudson/tasks/ArtifactArchiverTest.java",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.bat||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.bat",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.sh||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.sh",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.bat||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.bat",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.sh||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.sh",
      "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructureWithJunctions.bat||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructureWithJunctions.bat"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java": [
      "File: core/src/main/java/hudson/FilePath.java -> core/src/main/java/hudson/FilePath.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "80: import java.nio.file.FileSystems;",
      "81: import java.nio.file.Files;",
      "82: import java.nio.file.InvalidPathException;",
      "83: import java.nio.file.Path;",
      "84: import java.nio.file.LinkOption;",
      "85: import java.nio.file.StandardCopyOption;",
      "86: import java.nio.file.attribute.FileAttribute;",
      "87: import java.nio.file.attribute.PosixFilePermission;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "83: import java.nio.file.NoSuchFileException;",
      "86: import java.nio.file.Paths;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3044:             if (new File(potentialChildRelativePath).isAbsolute()) {",
      "3045:                 throw new IllegalArgumentException(\"Only a relative path is supported, the given path is absolute: \" + potentialChildRelativePath);",
      "3046:             }",
      "3050:             String remainingPath = potentialChildRelativePath;",
      "3052:             while (!remainingPath.isEmpty()) {",
      "3058:                 if (childFileSymbolic == null) {",
      "3060:                 } else {",
      "3062:                 }",
      "3063:             }",
      "3068:         }",
      "3074:             }",
      "3075:             return current;",
      "3076:         }",
      "",
      "[Removed Lines]",
      "3048:             Path parent = parentFile.getAbsoluteFile().toPath().normalize();",
      "3051:             File currentFile = parentFile;",
      "3053:                 File directChild = this.getDirectChild(currentFile, remainingPath);",
      "3054:                 File childUsingFullPath = new File(currentFile, remainingPath);",
      "3055:                 remainingPath = childUsingFullPath.getAbsolutePath().substring(directChild.getAbsolutePath().length());",
      "3057:                 File childFileSymbolic = Util.resolveSymlinkToFile(directChild);",
      "3059:                     currentFile = directChild;",
      "3061:                     currentFile = childFileSymbolic;",
      "3066:             Path child = currentFile.getAbsoluteFile().toPath().normalize();",
      "3067:             return child.startsWith(parent);",
      "3070:         private @CheckForNull File getDirectChild(File parentFile, String childPath){",
      "3071:             File current = new File(parentFile, childPath);",
      "3072:             while (current != null && !parentFile.equals(current.getParentFile())) {",
      "3073:                 current = current.getParentFile();",
      "",
      "[Added Lines]",
      "3050:             Path parentAbsolutePath = Util.fileToPath(parentFile.getAbsoluteFile());",
      "3051:             Path parentRealPath;",
      "3052:             try {",
      "3053:                 parentRealPath = parentAbsolutePath.toRealPath();",
      "3054:             }",
      "3055:             catch(NoSuchFileException e) {",
      "3056:                 throw new IllegalArgumentException(\"The parent does not exist\");",
      "3057:             }",
      "3062:             Path currentFilePath = parentFile.toPath();",
      "3064:                 Path directChild = this.getDirectChild(currentFilePath, remainingPath);",
      "3065:                 Path childUsingFullPath = currentFilePath.resolve(remainingPath);",
      "3066:                 Path rel = directChild.toAbsolutePath().relativize(childUsingFullPath.toAbsolutePath());",
      "3067:                 remainingPath = rel.toString();",
      "3069:                 File childFileSymbolic = Util.resolveSymlinkToFile(directChild.toFile());",
      "3071:                     currentFilePath = directChild;",
      "3073:                     currentFilePath = childFileSymbolic.toPath();",
      "3074:                 }",
      "3076:                 Path currentFileAbsolutePath = currentFilePath.toAbsolutePath();",
      "3077:                 try{",
      "3078:                     Path child = currentFileAbsolutePath.toRealPath();",
      "3079:                     if (!child.startsWith(parentRealPath)) {",
      "3080:                         return false;",
      "3081:                     }",
      "3082:                 } catch (NoSuchFileException e) {",
      "3087:                     try {",
      "3088:                         Path child = currentFileAbsolutePath.normalize();",
      "3089:                         Path parent = parentAbsolutePath.normalize();",
      "3090:                         return child.startsWith(parent);",
      "3091:                     } catch (InvalidPathException e2) {",
      "3092:                         throw new IOException(e2);",
      "3093:                     }",
      "3097:             return true;",
      "3100:         private @CheckForNull Path getDirectChild(Path parentPath, String childPath){",
      "3101:             Path current = parentPath.resolve(childPath);",
      "3102:             while (current != null && !parentPath.equals(current.getParent())) {",
      "3103:                 current = current.getParent();",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/model/DirectoryBrowserSupport.java||core/src/main/java/hudson/model/DirectoryBrowserSupport.java": [
      "File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java -> core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "24: package hudson.model;",
      "26: import hudson.FilePath;",
      "27: import hudson.Util;",
      "28: import java.io.IOException;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "26: import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: import java.util.Comparator;",
      "37: import java.util.List;",
      "38: import java.util.Locale;",
      "39: import java.util.StringTokenizer;",
      "40: import java.util.logging.Level;",
      "41: import java.util.logging.Logger;",
      "42: import javax.servlet.ServletException;",
      "43: import javax.servlet.http.HttpServletResponse;",
      "44: import jenkins.model.Jenkins;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "40: import java.util.Objects;",
      "44: import java.util.stream.Collectors;",
      "45: import java.util.stream.Stream;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "66: public final class DirectoryBrowserSupport implements HttpResponse {",
      "68:     public final ModelObject owner;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "72:     @SuppressFBWarnings(value = \"MS_SHOULD_BE_FINAL\", justification = \"Accessible via System Groovy Scripts\")",
      "73:     public static boolean ALLOW_SYMLINK_ESCAPE = Boolean.getBoolean(DirectoryBrowserSupport.class.getName() + \".allowSymlinkEscape\");",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "212:         String base = _base.toString();",
      "213:         String rest = _rest.toString();",
      "216:         VirtualFile baseFile = root.child(base);",
      "218:         if(baseFile.isDirectory()) {",
      "219:             if(zip) {",
      "220:                 rsp.setContentType(\"application/zip\");",
      "222:                 return;",
      "223:             }",
      "224:             if (plain) {",
      "",
      "[Removed Lines]",
      "221:                 zip(rsp.getOutputStream(), baseFile, rest);",
      "",
      "[Added Lines]",
      "222:         if(!ALLOW_SYMLINK_ESCAPE && (root.supportIsDescendant() && !root.isDescendant(base))){",
      "223:             LOGGER.log(Level.WARNING, \"Trying to access a file outside of the directory, target: \"+ base);",
      "224:             rsp.sendError(HttpServletResponse.SC_FORBIDDEN, \"Trying to access a file outside of the directory, target: \" + base);",
      "225:             return;",
      "226:         }",
      "234:                 zip(rsp, root, baseFile, rest);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "246:             }",
      "248:             List<List<Path>> glob = null;",
      "252:                 glob = patternScan(baseFile, rest, createBackRef(restSize));",
      "253:             } else",
      "",
      "[Removed Lines]",
      "250:             if(rest.length()>0) {",
      "",
      "[Added Lines]",
      "262:             boolean patternUsed = rest.length() > 0;",
      "263:             if(patternUsed) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "257:             }",
      "259:             if(glob!=null) {",
      "261:                 req.setAttribute(\"it\", this);",
      "262:                 List<Path> parentPaths = buildParentPath(base,restSize);",
      "263:                 req.setAttribute(\"parentPath\",parentPaths);",
      "264:                 req.setAttribute(\"backPath\", createBackRef(restSize));",
      "265:                 req.setAttribute(\"topPath\", createBackRef(parentPaths.size()+restSize));",
      "267:                 req.setAttribute(\"icon\", icon);",
      "268:                 req.setAttribute(\"path\", path);",
      "269:                 req.setAttribute(\"pattern\",rest);",
      "",
      "[Removed Lines]",
      "266:                 req.setAttribute(\"files\", glob);",
      "",
      "[Added Lines]",
      "273:                 List<List<Path>> filteredGlob = keepReadabilityOnlyOnDescendants(baseFile, patternUsed, glob);",
      "281:                 req.setAttribute(\"files\", filteredGlob);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "319:             rsp.serveFile(req, in, lastModified, -1, length, baseFile.getName() );",
      "320:         }",
      "321:     }",
      "323:     private String getPath(StaplerRequest req) {",
      "324:         String path = req.getRestOfPath();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "338:     private List<List<Path>> keepReadabilityOnlyOnDescendants(VirtualFile root, boolean patternUsed, List<List<Path>> pathFragmentsList){",
      "339:         Stream<List<Path>> pathFragmentsStream = pathFragmentsList.stream().map((List<Path> pathFragments) -> {",
      "340:             List<Path> mappedFragments = new ArrayList<>(pathFragments.size());",
      "341:             String relativePath = \"\";",
      "342:             for (int i = 0; i < pathFragments.size(); i++) {",
      "343:                 Path current = pathFragments.get(i);",
      "344:                 if (i == 0) {",
      "345:                     relativePath = current.title;",
      "346:                 } else {",
      "347:                     relativePath += \"/\" + current.title;",
      "348:                 }",
      "350:                 if (!current.isReadable) {",
      "351:                     if (patternUsed) {",
      "353:                         return null;",
      "354:                     }",
      "355:                     mappedFragments.add(current);",
      "356:                     return mappedFragments;",
      "357:                 } else {",
      "358:                     if (isDescendant(root, relativePath)) {",
      "359:                         mappedFragments.add(current);",
      "360:                     } else {",
      "361:                         if (patternUsed) {",
      "363:                             return null;",
      "364:                         }",
      "365:                         mappedFragments.add(Path.createNotReadableVersionOf(current));",
      "366:                         return mappedFragments;",
      "367:                     }",
      "368:                 }",
      "369:             }",
      "370:             return mappedFragments;",
      "371:         });",
      "373:         if (patternUsed) {",
      "374:             pathFragmentsStream = pathFragmentsStream.filter(Objects::nonNull);",
      "375:         }",
      "377:         return pathFragmentsStream.collect(Collectors.toList());",
      "378:     }",
      "380:     private boolean isDescendant(VirtualFile root, String relativePath){",
      "381:         try {",
      "382:             return ALLOW_SYMLINK_ESCAPE || !root.supportIsDescendant() || root.isDescendant(relativePath);",
      "383:         }",
      "384:         catch (IOException e) {",
      "385:             return false;",
      "386:         }",
      "387:     }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "352:         return buf.toString();",
      "353:     }",
      "356:         try (ZipOutputStream zos = new ZipOutputStream(outputStream)) {",
      "357:             zos.setEncoding(System.getProperty(\"file.encoding\")); // TODO JENKINS-20663 make this overridable via query parameter",
      "358:             for (String n : dir.list(glob.length() == 0 ? \"**\" : glob)) {",
      "",
      "[Removed Lines]",
      "355:     private static void zip(OutputStream outputStream, VirtualFile dir, String glob) throws IOException {",
      "",
      "[Added Lines]",
      "421:     private static void zip(StaplerResponse rsp, VirtualFile root, VirtualFile dir, String glob) throws IOException, InterruptedException {",
      "422:         OutputStream outputStream = rsp.getOutputStream();",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "363:                 } else {",
      "364:                     relativePath = n;",
      "365:                 }",
      "376:                 }",
      "378:             }",
      "379:         }",
      "380:     }",
      "",
      "[Removed Lines]",
      "370:                 ZipEntry e = new ZipEntry(relativePath.replace('\\\\', '/'));",
      "371:                 VirtualFile f = dir.child(n);",
      "372:                 e.setTime(f.lastModified());",
      "373:                 zos.putNextEntry(e);",
      "374:                 try (InputStream in = f.open()) {",
      "375:                     IOUtils.copy(in, zos);",
      "377:                 zos.closeEntry();",
      "",
      "[Added Lines]",
      "434:                 String targetFile = dir.toString().substring(root.toString().length()) + n;",
      "435:                 if (!ALLOW_SYMLINK_ESCAPE && root.supportIsDescendant() && !root.isDescendant(targetFile)) {",
      "436:                     LOGGER.log(Level.INFO, \"Trying to access a file outside of the directory: \" + root + \", illicit target: \" + targetFile);",
      "437:                 } else {",
      "442:                     ZipEntry e = new ZipEntry(relativePath.replace('\\\\', '/'));",
      "443:                     VirtualFile f = dir.child(n);",
      "444:                     e.setTime(f.lastModified());",
      "445:                     zos.putNextEntry(e);",
      "446:                     try (InputStream in = f.open()) {",
      "447:                         IOUtils.copy(in, zos);",
      "448:                     }",
      "449:                     zos.closeEntry();",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "446:             return size;",
      "447:         }",
      "449:         private static final long serialVersionUID = 1L;",
      "450:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "522:         public static Path createNotReadableVersionOf(Path that){",
      "523:             return new Path(that.href, that.title, that.isFolder, that.size, false);",
      "524:         }",
      "",
      "---------------"
    ],
    "core/src/main/java/hudson/model/Run.java||core/src/main/java/hudson/model/Run.java": [
      "File: core/src/main/java/hudson/model/Run.java -> core/src/main/java/hudson/model/Run.java"
    ],
    "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java": [
      "File: core/src/main/java/jenkins/util/VirtualFile.java -> core/src/main/java/jenkins/util/VirtualFile.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "42: import java.nio.file.InvalidPathException;",
      "43: import java.nio.file.LinkOption;",
      "44: import java.util.ArrayList;",
      "45: import java.util.List;",
      "46: import java.util.logging.Level;",
      "47: import java.util.logging.Logger;",
      "48: import javax.annotation.Nonnull;",
      "50: import jenkins.MasterToSlaveFileCallable;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "45: import java.util.Deque;",
      "46: import java.util.LinkedList;",
      "53: import org.kohsuke.accmod.Restricted;",
      "54: import org.kohsuke.accmod.restrictions.NoExternalUse;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "208:         return callable.call();",
      "209:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "220:     @Restricted(NoExternalUse.class)",
      "221:     public boolean supportIsDescendant() {",
      "222:         return false;",
      "223:     }",
      "231:     @Restricted(NoExternalUse.class)",
      "232:     public boolean isDescendant(String childRelativePath) throws IOException {",
      "233:         return false;",
      "234:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "316:             }",
      "317:             return false;",
      "318:         }",
      "319:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "349:         @Override",
      "350:         @Restricted(NoExternalUse.class)",
      "351:         public boolean supportIsDescendant() {",
      "352:             return true;",
      "353:         }",
      "358:         @Override",
      "359:         @Restricted(NoExternalUse.class)",
      "360:         public boolean isDescendant(String potentialChildRelativePath) throws IOException {",
      "361:             if (new File(potentialChildRelativePath).isAbsolute()) {",
      "362:                 throw new IllegalArgumentException(\"Only a relative path is supported, the given path is absolute: \" + potentialChildRelativePath);",
      "363:             }",
      "365:             FilePath root = new FilePath(this.root);",
      "366:             String relativePath = computeRelativePathToRoot();",
      "368:             try {",
      "369:                 return root.isDescendant(relativePath + potentialChildRelativePath);",
      "370:             }",
      "371:             catch (InterruptedException e) {",
      "372:                 return false;",
      "373:             }",
      "374:         }",
      "379:         private String computeRelativePathToRoot(){",
      "380:             if (this.root.equals(this.f)) {",
      "381:                 return \"\";",
      "382:             }",
      "384:             Deque<String> relativePath = new LinkedList<>();",
      "385:             File current = this.f;",
      "386:             while (current != null && !current.equals(this.root)) {",
      "387:                 relativePath.addFirst(current.getName());",
      "388:                 current = current.getParentFile();",
      "389:             }",
      "391:             return String.join(File.separator, relativePath) + File.separator;",
      "392:         }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "326:     public static VirtualFile forFilePath(final FilePath f) {",
      "328:     }",
      "329:     private static final class FilePathVF extends VirtualFile {",
      "330:         private final FilePath f;",
      "332:             this.f = f;",
      "333:         }",
      "334:             @Override public String getName() {",
      "335:                 return f.getName();",
      "",
      "[Removed Lines]",
      "327:         return new FilePathVF(f);",
      "331:         FilePathVF(FilePath f) {",
      "",
      "[Added Lines]",
      "401:         return new FilePathVF(f, f);",
      "405:         private final FilePath root;",
      "406:         FilePathVF(FilePath f, FilePath root) {",
      "408:             this.root = root;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "367:                     List<FilePath> kids = f.list();",
      "368:                     VirtualFile[] vfs = new VirtualFile[kids.size()];",
      "369:                     for (int i = 0; i < vfs.length; i++) {",
      "371:                     }",
      "372:                     return vfs;",
      "373:                 } catch (InterruptedException x) {",
      "",
      "[Removed Lines]",
      "370:                         vfs[i] = forFilePath(kids.get(i));",
      "",
      "[Added Lines]",
      "446:                         vfs[i] = new FilePathVF(kids.get(i), this.root);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "382:                 }",
      "383:             }",
      "384:             @Override public VirtualFile child(String name) {",
      "386:             }",
      "387:             @Override public long length() throws IOException {",
      "388:                 try {",
      "",
      "[Removed Lines]",
      "385:                 return forFilePath(f.child(name));",
      "",
      "[Added Lines]",
      "461:                 return new FilePathVF(f.child(name), this.root);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "419:                     throw (IOException) new IOException(x.toString()).initCause(x);",
      "420:                 }",
      "421:             }",
      "422:     }",
      "423:     private static final class Scanner extends MasterToSlaveFileCallable<String[]> {",
      "424:         private final String glob;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "502:         @Override",
      "503:         @Restricted(NoExternalUse.class)",
      "504:         public boolean supportIsDescendant() {",
      "505:             return true;",
      "506:         }",
      "511:         @Override",
      "512:         @Restricted(NoExternalUse.class)",
      "513:         public boolean isDescendant(String potentialChildRelativePath) throws IOException {",
      "514:             if (new File(potentialChildRelativePath).isAbsolute()) {",
      "515:                 throw new IllegalArgumentException(\"Only a relative path is supported, the given path is absolute: \" + potentialChildRelativePath);",
      "516:             }",
      "518:             String relativePath = computeRelativePathToRoot();",
      "520:             try {",
      "521:                 return this.root.isDescendant(relativePath + potentialChildRelativePath);",
      "522:             }",
      "523:             catch (InterruptedException e) {",
      "524:                 return false;",
      "525:             }",
      "526:         }",
      "531:         private String computeRelativePathToRoot(){",
      "532:             if (this.root.equals(this.f)) {",
      "533:                 return \"\";",
      "534:             }",
      "536:             LinkedList<String> relativePath = new LinkedList<>();",
      "537:             FilePath current = this.f;",
      "538:             while (current != null && !current.equals(this.root)) {",
      "539:                 relativePath.addFirst(current.getName());",
      "540:                 current = current.getParent();",
      "541:             }",
      "543:             return String.join(File.separator, relativePath) + File.separator;",
      "544:         }",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/FilePathSEC904Test.java||core/src/test/java/hudson/FilePathSEC904Test.java": [
      "File: core/src/test/java/hudson/FilePathSEC904Test.java -> core/src/test/java/hudson/FilePathSEC904Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package hudson;",
      "26: import org.junit.Rule;",
      "27: import org.junit.Test;",
      "28: import org.junit.rules.TemporaryFolder;",
      "29: import org.jvnet.hudson.test.Issue;",
      "31: import java.io.File;",
      "32: import java.io.IOException;",
      "33: import java.nio.charset.StandardCharsets;",
      "34: import java.util.concurrent.TimeUnit;",
      "36: import static org.junit.Assert.assertFalse;",
      "37: import static org.junit.Assert.assertTrue;",
      "38: import static org.junit.Assume.assumeTrue;",
      "41: public class FilePathSEC904Test {",
      "43:     @Rule",
      "44:     public TemporaryFolder temp = new TemporaryFolder();",
      "46:     @Test",
      "47:     @Issue(\"SECURITY-904\")",
      "48:     public void isDescendant_regularFiles() throws IOException, InterruptedException {",
      "56:         FilePath rootFolder = new FilePath(temp.newFolder(\"root\"));",
      "57:         FilePath workspaceFolder = rootFolder.child(\"workspace\");",
      "58:         FilePath subFolder = workspaceFolder.child(\"sub\");",
      "59:         FilePath protectedFolder = rootFolder.child(\"protected\");",
      "61:         FilePath regularFile = workspaceFolder.child(\"regular.txt\");",
      "62:         regularFile.write(\"regular-file\", StandardCharsets.UTF_8.name());",
      "63:         FilePath subRegularFile = subFolder.child(\"sub-regular.txt\");",
      "64:         subRegularFile.write(\"sub-regular-file\", StandardCharsets.UTF_8.name());",
      "66:         FilePath secretFile = protectedFolder.child(\"secret.txt\");",
      "67:         secretFile.write(\"secrets\", StandardCharsets.UTF_8.name());",
      "69:         assertTrue(workspaceFolder.isDescendant(\".\"));",
      "70:         assertTrue(workspaceFolder.isDescendant(\"regular.txt\"));",
      "71:         assertTrue(workspaceFolder.isDescendant(\"./regular.txt\"));",
      "72:         assertTrue(workspaceFolder.isDescendant(\"sub/sub-regular.txt\"));",
      "73:         assertTrue(workspaceFolder.isDescendant(\"sub//sub-regular.txt\"));",
      "74:         assertTrue(workspaceFolder.isDescendant(\"sub/../sub/sub-regular.txt\"));",
      "75:         assertTrue(workspaceFolder.isDescendant(\"./sub/../sub/sub-regular.txt\"));",
      "78:         assertTrue(workspaceFolder.isDescendant(\"nonexistent.txt\"));",
      "79:         assertTrue(workspaceFolder.isDescendant(\"sub/nonexistent.txt\"));",
      "80:         assertTrue(workspaceFolder.isDescendant(\"nonexistent/nonexistent.txt\"));",
      "81:         assertFalse(workspaceFolder.isDescendant(\"../protected/nonexistent.txt\"));",
      "82:         assertFalse(workspaceFolder.isDescendant(\"../nonexistent/nonexistent.txt\"));",
      "85:         assertFalse(workspaceFolder.isDescendant(\"./../workspace\"));",
      "86:         assertFalse(workspaceFolder.isDescendant(\"./../workspace/\"));",
      "87:         assertFalse(workspaceFolder.isDescendant(\"./../workspace/regular.txt\"));",
      "88:         assertFalse(workspaceFolder.isDescendant(\"../workspace/regular.txt\"));",
      "89:         assertFalse(workspaceFolder.isDescendant(\"./../../root/workspace/regular.txt\"));",
      "92:         assertFalse(workspaceFolder.isDescendant(\"../protected/secret.txt\"));",
      "93:         assertFalse(workspaceFolder.isDescendant(\"./../protected/secret.txt\"));",
      "94:     }",
      "96:     @Test",
      "97:     @Issue(\"SECURITY-904\")",
      "98:     public void isDescendant_regularSymlinks() throws IOException, InterruptedException {",
      "113:         FilePath rootFolder = new FilePath(temp.newFolder(\"root\"));",
      "114:         FilePath workspaceFolder = rootFolder.child(\"workspace\");",
      "115:         FilePath aFolder = workspaceFolder.child(\"a\");",
      "116:         FilePath bFolder = workspaceFolder.child(\"b\");",
      "117:         FilePath protectedFolder = rootFolder.child(\"protected\");",
      "119:         FilePath regularFile = workspaceFolder.child(\"regular.txt\");",
      "120:         regularFile.write(\"regular-file\", StandardCharsets.UTF_8.name());",
      "121:         FilePath aFile = aFolder.child(\"a.txt\");",
      "122:         aFile.write(\"a-file\", StandardCharsets.UTF_8.name());",
      "123:         FilePath bFile = bFolder.child(\"a.txt\");",
      "124:         bFile.write(\"b-file\", StandardCharsets.UTF_8.name());",
      "125:         bFolder.child(\"_a\").symlinkTo(\"../a\", null);",
      "126:         bFolder.child(\"_atxt\").symlinkTo(\"../a/a.txt\", null);",
      "128:         workspaceFolder.child(\"_protected\").symlinkTo(\"../protected\", null);",
      "129:         workspaceFolder.child(\"_nonexistent\").symlinkTo(\"nonexistent\", null);",
      "130:         workspaceFolder.child(\"_nonexistentUp\").symlinkTo(\"../nonexistent\", null);",
      "131:         workspaceFolder.child(\"_secrettxt\").symlinkTo(\"../protected/secret.txt\", null);",
      "133:         FilePath secretFile = protectedFolder.child(\"secret.txt\");",
      "134:         secretFile.write(\"secrets\", StandardCharsets.UTF_8.name());",
      "136:         assertTrue(workspaceFolder.isDescendant(\"regular.txt\"));",
      "137:         assertTrue(workspaceFolder.isDescendant(\"_nonexistent\"));",
      "138:         assertTrue(workspaceFolder.isDescendant(\"a\"));",
      "139:         assertTrue(workspaceFolder.isDescendant(\"a/a.txt\"));",
      "140:         assertTrue(workspaceFolder.isDescendant(\"b\"));",
      "141:         assertTrue(workspaceFolder.isDescendant(\"b/_a/a.txt\"));",
      "142:         assertTrue(workspaceFolder.isDescendant(\"b/_atxt\"));",
      "145:         assertFalse(workspaceFolder.isDescendant(\"_nonexistentUp\"));",
      "147:         assertFalse(workspaceFolder.isDescendant(\"_protected\"));",
      "148:         assertFalse(workspaceFolder.isDescendant(\"_protected/\"));",
      "149:         assertFalse(workspaceFolder.isDescendant(\"_protected/secret.txt\"));",
      "150:         assertFalse(workspaceFolder.isDescendant(\"./_protected/secret.txt\"));",
      "151:         assertFalse(workspaceFolder.isDescendant(\"_secrettxt\"));",
      "152:         assertFalse(workspaceFolder.isDescendant(\"./_secrettxt\"));",
      "153:     }",
      "155:     @Test",
      "156:     @Issue(\"SECURITY-904\")",
      "157:     public void isDescendant_windowsSpecificSymlinks() throws Exception {",
      "158:         assumeTrue(Functions.isWindows());",
      "172:         File root = temp.newFolder(\"root\");",
      "173:         FilePath rootFolder = new FilePath(root);",
      "174:         FilePath workspaceFolder = rootFolder.child(\"workspace\");",
      "175:         FilePath aFolder = workspaceFolder.child(\"a\");",
      "176:         FilePath bFolder = workspaceFolder.child(\"b\");",
      "177:         FilePath protectedFolder = rootFolder.child(\"protected\");",
      "179:         FilePath regularFile = workspaceFolder.child(\"regular.txt\");",
      "180:         regularFile.write(\"regular-file\", StandardCharsets.UTF_8.name());",
      "181:         FilePath aFile = aFolder.child(\"a.txt\");",
      "182:         aFile.write(\"a-file\", StandardCharsets.UTF_8.name());",
      "183:         FilePath bFile = bFolder.child(\"a.txt\");",
      "184:         bFile.write(\"b-file\", StandardCharsets.UTF_8.name());",
      "186:         createJunction(new File(root, \"/workspace/b/_a\"), new File(root, \"/workspace/a\"));",
      "187:         createJunction(new File(root, \"/workspace/_nonexistent\"), new File(root, \"/workspace/nonexistent\"));",
      "188:         createJunction(new File(root, \"/workspace/_nonexistentUp\"), new File(root, \"/nonexistent\"));",
      "189:         createJunction(new File(root, \"/workspace/_protected\"), new File(root, \"/protected\"));",
      "191:         FilePath secretFile = protectedFolder.child(\"secret.txt\");",
      "192:         secretFile.write(\"secrets\", StandardCharsets.UTF_8.name());",
      "194:         assertTrue(workspaceFolder.isDescendant(\"b\"));",
      "195:         assertTrue(workspaceFolder.isDescendant(\"b/_a/a.txt\"));",
      "199:         assertTrue(workspaceFolder.isDescendant(\"_nonexistent\"));",
      "200:         assertTrue(workspaceFolder.isDescendant(\"_nonexistent/\"));",
      "201:         assertTrue(workspaceFolder.isDescendant(\"_nonexistent/..\"));",
      "202:         assertTrue(workspaceFolder.isDescendant(\"_nonexistentUp\"));",
      "205:         assertFalse(workspaceFolder.isDescendant(\"_protected\"));",
      "206:         assertFalse(workspaceFolder.isDescendant(\"_protected/../a\"));",
      "207:     }",
      "209:     private void createJunction(File from, File to) throws Exception {",
      "210:         Process p = Runtime.getRuntime().exec(new String[]{\"cmd\", \"/c\", \"mklink\", \"/J\", from.getAbsolutePath(), to.getAbsolutePath()});",
      "211:         p.waitFor(2, TimeUnit.SECONDS);",
      "212:     }",
      "214:     @Test(expected = IllegalArgumentException.class)",
      "215:     @Issue(\"SECURITY-904\")",
      "216:     public void isDescendant_throwIfParentDoesNotExist_symlink() throws Exception {",
      "217:         FilePath rootFolder = new FilePath(temp.newFolder(\"root\"));",
      "218:         FilePath aFolder = rootFolder.child(\"a\");",
      "219:         aFolder.mkdirs();",
      "220:         FilePath linkToNonexistent = aFolder.child(\"linkToNonexistent\");",
      "221:         linkToNonexistent.symlinkTo(\"__nonexistent__\", null);",
      "223:         linkToNonexistent.isDescendant(\".\");",
      "224:     }",
      "226:     @Test(expected = IllegalArgumentException.class)",
      "227:     @Issue(\"SECURITY-904\")",
      "228:     public void isDescendant_throwIfParentDoesNotExist_directNonexistent() throws Exception {",
      "229:         FilePath rootFolder = new FilePath(temp.newFolder(\"root\"));",
      "230:         FilePath nonexistent = rootFolder.child(\"nonexistent\");",
      "231:         nonexistent.isDescendant(\".\");",
      "232:     }",
      "234:     @Test(expected = IllegalArgumentException.class)",
      "235:     @Issue(\"SECURITY-904\")",
      "236:     public void isDescendant_throwIfAbsolutePathGiven() throws Exception {",
      "237:         FilePath rootFolder = new FilePath(temp.newFolder(\"root\"));",
      "238:         rootFolder.mkdirs();",
      "239:         rootFolder.isDescendant(temp.newFile().getAbsolutePath());",
      "240:     }",
      "242:     @Test",
      "243:     @Issue(\"SECURITY-904\")",
      "244:     public void isDescendant_worksEvenInSymbolicWorkspace() throws Exception {",
      "261:         FilePath rootFolder = new FilePath(temp.newFolder(\"root\"));",
      "262:         FilePath wFolder = rootFolder.child(\"w\");",
      "263:         FilePath workspaceFolder = rootFolder.child(\"workspace\");",
      "264:         FilePath aFolder = workspaceFolder.child(\"a\");",
      "265:         FilePath bFolder = workspaceFolder.child(\"b\");",
      "266:         FilePath protectedFolder = rootFolder.child(\"protected\");",
      "268:         FilePath regularFile = workspaceFolder.child(\"regular.txt\");",
      "269:         regularFile.write(\"regular-file\", StandardCharsets.UTF_8.name());",
      "270:         FilePath aFile = aFolder.child(\"a.txt\");",
      "271:         aFile.write(\"a-file\", StandardCharsets.UTF_8.name());",
      "272:         FilePath bFile = bFolder.child(\"a.txt\");",
      "273:         bFile.write(\"b-file\", StandardCharsets.UTF_8.name());",
      "274:         bFolder.child(\"_a\").symlinkTo(\"../a\", null);",
      "275:         bFolder.child(\"_atxt\").symlinkTo(\"../a/a.txt\", null);",
      "277:         workspaceFolder.child(\"_protected\").symlinkTo(\"../protected\", null);",
      "278:         workspaceFolder.child(\"_protected2\").symlinkTo(\"../../protected\", null);",
      "279:         workspaceFolder.child(\"_nonexistent\").symlinkTo(\"nonexistent\", null);",
      "280:         workspaceFolder.child(\"_nonexistentUp\").symlinkTo(\"../nonexistent\", null);",
      "281:         workspaceFolder.child(\"_secrettxt\").symlinkTo(\"../protected/secret.txt\", null);",
      "282:         workspaceFolder.child(\"_secrettxt2\").symlinkTo(\"../../protected/secret.txt\", null);",
      "284:         wFolder.mkdirs();",
      "285:         FilePath symbolicWorkspace = wFolder.child(\"_w\");",
      "286:         symbolicWorkspace.symlinkTo(\"../workspace\", null);",
      "288:         FilePath secretFile = protectedFolder.child(\"secret.txt\");",
      "289:         secretFile.write(\"secrets\", StandardCharsets.UTF_8.name());",
      "291:         assertTrue(symbolicWorkspace.isDescendant(\"regular.txt\"));",
      "292:         assertTrue(symbolicWorkspace.isDescendant(\"_nonexistent\"));",
      "293:         assertTrue(symbolicWorkspace.isDescendant(\"a\"));",
      "294:         assertTrue(symbolicWorkspace.isDescendant(\"a/a.txt\"));",
      "295:         assertTrue(symbolicWorkspace.isDescendant(\"b\"));",
      "296:         assertTrue(symbolicWorkspace.isDescendant(\"b/_a/a.txt\"));",
      "297:         assertTrue(symbolicWorkspace.isDescendant(\"b/_atxt\"));",
      "300:         assertFalse(symbolicWorkspace.isDescendant(\"_nonexistentUp\"));",
      "302:         assertFalse(symbolicWorkspace.isDescendant(\"_protected\"));",
      "303:         assertFalse(symbolicWorkspace.isDescendant(\"_protected/\"));",
      "304:         assertFalse(symbolicWorkspace.isDescendant(\"_protected/secret.txt\"));",
      "305:         assertFalse(symbolicWorkspace.isDescendant(\"./_protected/secret.txt\"));",
      "306:         assertFalse(symbolicWorkspace.isDescendant(\"_protected2\"));",
      "307:         assertFalse(symbolicWorkspace.isDescendant(\"_protected2/secret.txt\"));",
      "308:         assertFalse(symbolicWorkspace.isDescendant(\"_secrettxt\"));",
      "309:         assertFalse(symbolicWorkspace.isDescendant(\"./_secrettxt\"));",
      "310:         assertFalse(symbolicWorkspace.isDescendant(\"_secrettxt2\"));",
      "311:     }",
      "312: }",
      "",
      "---------------"
    ],
    "core/src/test/java/hudson/UtilSEC904Test.java||core/src/test/java/hudson/UtilSEC904Test.java": [
      "File: core/src/test/java/hudson/UtilSEC904Test.java -> core/src/test/java/hudson/UtilSEC904Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: package hudson;",
      "27: import hudson.model.TaskListener;",
      "28: import org.apache.commons.io.FileUtils;",
      "29: import org.junit.Rule;",
      "30: import org.junit.Test;",
      "31: import org.junit.rules.TemporaryFolder;",
      "33: import java.io.File;",
      "34: import java.nio.file.Files;",
      "36: import static org.junit.Assert.assertEquals;",
      "37: import static org.junit.Assert.assertNull;",
      "38: import static org.junit.Assert.assertTrue;",
      "44: public class UtilSEC904Test {",
      "46:     @Rule public TemporaryFolder tmp = new TemporaryFolder();",
      "48:     @Test",
      "49:     public void resolveSymlinkToFile() throws Exception {",
      "57:         File root = tmp.getRoot();",
      "58:         File a = new File(root, \"a\");",
      "59:         File aa = new File(a, \"aa\");",
      "60:         aa.mkdirs();",
      "61:         File aaTxt = new File(aa, \"aa.txt\");",
      "62:         FileUtils.write(aaTxt, \"aa\");",
      "64:         File b = new File(root, \"b\");",
      "65:         b.mkdir();",
      "67:         File _a = new File(b, \"_a\");",
      "68:         Util.createSymlink(_a.getParentFile(), a.getAbsolutePath(), _a.getName(), TaskListener.NULL);",
      "70:         File _b = new File(a, \"_b\");",
      "71:         Util.createSymlink(_b.getParentFile(), b.getAbsolutePath(), _b.getName(), TaskListener.NULL);",
      "73:         assertTrue(Files.isSymbolicLink(_a.toPath()));",
      "74:         assertTrue(Files.isSymbolicLink(_b.toPath()));",
      "77:         assertEquals(Util.resolveSymlinkToFile(_a), a);",
      "78:         assertEquals(Util.resolveSymlinkToFile(_b), b);",
      "81:         assertNull(Util.resolveSymlinkToFile(new File(_a, \"aa\")));",
      "82:         assertNull(Util.resolveSymlinkToFile(new File(_a, \"aa/aa.txt\")));",
      "83:     }",
      "84: }",
      "",
      "---------------"
    ],
    "core/src/test/java/jenkins/util/VirtualFileSEC904Test.java||core/src/test/java/jenkins/util/VirtualFileSEC904Test.java": [
      "File: core/src/test/java/jenkins/util/VirtualFileSEC904Test.java -> core/src/test/java/jenkins/util/VirtualFileSEC904Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "25: package jenkins.util;",
      "27: import hudson.FilePath;",
      "28: import hudson.model.TaskListener;",
      "29: import org.apache.commons.io.FileUtils;",
      "30: import org.junit.Rule;",
      "31: import org.junit.Test;",
      "32: import org.junit.rules.ExpectedException;",
      "33: import org.junit.rules.TemporaryFolder;",
      "34: import org.jvnet.hudson.test.Issue;",
      "36: import java.io.File;",
      "38: import static org.junit.Assert.assertFalse;",
      "39: import static org.junit.Assert.assertTrue;",
      "40: import static org.junit.Assert.fail;",
      "43: public class VirtualFileSEC904Test {",
      "45:     @Rule",
      "46:     public TemporaryFolder tmp = new TemporaryFolder();",
      "61:     private void prepareFileStructureForIsDescendant() throws Exception {",
      "62:         File root = tmp.getRoot();",
      "63:         File a = new File(root, \"a\");",
      "64:         File aa = new File(a, \"aa\");",
      "65:         File aaa = new File(aa, \"aaa\");",
      "66:         aaa.mkdirs();",
      "67:         File aaTxt = new File(aa, \"aa.txt\");",
      "68:         FileUtils.write(aaTxt, \"aa\");",
      "70:         File ab = new File(a, \"ab\");",
      "71:         ab.mkdirs();",
      "72:         File abTxt = new File(ab, \"ab.txt\");",
      "73:         FileUtils.write(abTxt, \"ab\");",
      "75:         File b = new File(root, \"b\");",
      "77:         File ba = new File(b, \"ba\");",
      "78:         ba.mkdirs();",
      "79:         File baTxt = new File(ba, \"ba.txt\");",
      "80:         FileUtils.write(baTxt, \"ba\");",
      "82:         File _a = new File(b, \"_a\");",
      "83:         new FilePath(_a).symlinkTo(a.getAbsolutePath(), TaskListener.NULL);",
      "85:         File _b = new File(a, \"_b\");",
      "86:         new FilePath(_b).symlinkTo(b.getAbsolutePath(), TaskListener.NULL);",
      "87:         File _b2 = new File(aaa, \"_b2\");",
      "88:         new FilePath(_b2).symlinkTo(b.getAbsolutePath(), TaskListener.NULL);",
      "89:     }",
      "91:     @Issue(\"SECURITY-904\")",
      "92:     @Test public void forFile_isDescendant() throws Exception {",
      "93:         this.prepareFileStructureForIsDescendant();",
      "95:         File root = tmp.getRoot();",
      "96:         File a = new File(root, \"a\");",
      "97:         File aa = new File(a, \"aa\");",
      "98:         VirtualFile virtualRoot = VirtualFile.forFile(root);",
      "100:         VirtualFile virtualRootChildA = virtualRoot.child(\"a\");",
      "101:         VirtualFile virtualFromA = VirtualFile.forFile(a);",
      "103:         checkCommonAssertionForIsDescendant(virtualRoot, virtualRootChildA, virtualFromA, aa.getAbsolutePath());",
      "104:     }",
      "106:     @Test",
      "107:     @Issue(\"SECURITY-904\")",
      "108:     public void forFilePath_isDescendant() throws Exception {",
      "109:         this.prepareFileStructureForIsDescendant();",
      "111:         File root = tmp.getRoot();",
      "112:         File a = new File(root, \"a\");",
      "113:         File aa = new File(a, \"aa\");",
      "114:         VirtualFile virtualRoot = VirtualFile.forFilePath(new FilePath(root));",
      "116:         VirtualFile virtualRootChildA = virtualRoot.child(\"a\");",
      "117:         VirtualFile virtualFromA = VirtualFile.forFilePath(new FilePath(a));",
      "119:         checkCommonAssertionForIsDescendant(virtualRoot, virtualRootChildA, virtualFromA, aa.getAbsolutePath());",
      "120:     }",
      "122:     private void checkCommonAssertionForIsDescendant(VirtualFile virtualRoot, VirtualFile virtualRootChildA, VirtualFile virtualFromA, String absolutePath) throws Exception {",
      "123:         try {",
      "124:             virtualRootChildA.isDescendant(absolutePath);",
      "125:             fail(\"isDescendant should have refused the absolute path\");",
      "126:         } catch (IllegalArgumentException e) {}",
      "128:         assertTrue(virtualRootChildA.isDescendant(\"aa\"));",
      "129:         assertTrue(virtualRootChildA.isDescendant(\"aa/aa.txt\"));",
      "130:         assertTrue(virtualRootChildA.isDescendant(\"aa\\\\aa.txt\"));",
      "131:         assertTrue(virtualRootChildA.isDescendant(\"ab\"));",
      "132:         assertTrue(virtualRootChildA.isDescendant(\"ab/ab.txt\"));",
      "133:         assertTrue(virtualRootChildA.isDescendant(\"ab//ab.txt\"));",
      "134:         assertTrue(virtualRootChildA.isDescendant(\"ab/nonExistingFile.txt\"));",
      "135:         assertTrue(virtualRootChildA.isDescendant(\"nonExistingFolder\"));",
      "136:         assertTrue(virtualRootChildA.isDescendant(\"nonExistingFolder/nonExistingFile.txt\"));",
      "138:         assertTrue(virtualRootChildA.isDescendant(\"_b\"));",
      "139:         assertTrue(virtualRootChildA.isDescendant(\"_b/ba\"));",
      "140:         assertTrue(virtualRootChildA.isDescendant(\"_b/ba/ba.txt\"));",
      "141:         assertTrue(virtualRootChildA.isDescendant(\"aa/aaa/_b2\"));",
      "142:         assertTrue(virtualRootChildA.isDescendant(\"aa/aaa/_b2/ba\"));",
      "143:         assertTrue(virtualRootChildA.isDescendant(\"aa/aaa/_b2/ba/ba.txt\"));",
      "146:         assertTrue(virtualRootChildA.isDescendant(\"_b/ba/ba-unexistingFile.txt\"));",
      "149:         assertTrue(virtualRootChildA.isDescendant(\"_b/_a\"));",
      "150:         assertTrue(virtualRootChildA.isDescendant(\"_b/_a/aa\"));",
      "151:         assertTrue(virtualRootChildA.isDescendant(\"_b/_a/aa/aa.txt\"));",
      "153:         assertTrue(virtualFromA.isDescendant(\"aa\"));",
      "154:         assertFalse(virtualFromA.isDescendant(\"_b\"));",
      "155:         assertFalse(virtualFromA.isDescendant(\"_b/ba/ba-unexistingFile.txt\"));",
      "156:         assertFalse(virtualFromA.isDescendant(\"_b/_a\"));",
      "157:         assertFalse(virtualFromA.isDescendant(\"_b/_a/aa\"));",
      "158:         assertFalse(virtualFromA.isDescendant(\"_b/_a/aa/aa.txt\"));",
      "159:         assertFalse(virtualFromA.isDescendant(\"aa/aaa/_b2\"));",
      "160:         assertFalse(virtualFromA.isDescendant(\"aa/aaa/_b2/ba\"));",
      "161:         assertFalse(virtualFromA.isDescendant(\"aa/aaa/_b2/ba/ba.txt\"));",
      "163:         assertTrue(virtualRoot.isDescendant(\"aa\"));",
      "164:         assertTrue(virtualRoot.isDescendant(\"aa/aa.txt\"));",
      "165:         assertTrue(virtualRoot.isDescendant(\"ab\"));",
      "166:         assertTrue(virtualRoot.isDescendant(\"ab/ab.txt\"));",
      "167:         assertTrue(virtualRoot.isDescendant(\"ab/nonExistingFile.txt\"));",
      "168:         assertTrue(virtualRoot.isDescendant(\"nonExistingFolder\"));",
      "169:         assertTrue(virtualRoot.isDescendant(\"nonExistingFolder/nonExistingFile.txt\"));",
      "171:         assertTrue(virtualRoot.isDescendant(\"_b\"));",
      "172:         assertTrue(virtualRoot.isDescendant(\"_b/ba\"));",
      "173:         assertTrue(virtualRoot.isDescendant(\"_b/ba/ba.txt\"));",
      "174:         assertTrue(virtualRoot.isDescendant(\"_b/_a\"));",
      "175:         assertTrue(virtualRoot.isDescendant(\"_b/_a/aa\"));",
      "176:         assertTrue(virtualRoot.isDescendant(\"_b/_a/aa/\"));",
      "177:         assertTrue(virtualRoot.isDescendant(\"_b/_a/aa/../ab/ab.txt\"));",
      "178:         assertTrue(virtualRoot.isDescendant(\"_b/_a/aa/aa.txt\"));",
      "179:     }",
      "180: }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/model/DirectoryBrowserSupportSEC904Test.java||test/src/test/java/hudson/model/DirectoryBrowserSupportSEC904Test.java": [
      "File: test/src/test/java/hudson/model/DirectoryBrowserSupportSEC904Test.java -> test/src/test/java/hudson/model/DirectoryBrowserSupportSEC904Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "24: package hudson.model;",
      "26: import com.gargoylesoftware.htmlunit.Page;",
      "27: import com.gargoylesoftware.htmlunit.UnexpectedPage;",
      "28: import hudson.FilePath;",
      "29: import hudson.Functions;",
      "30: import hudson.tasks.BatchFile;",
      "31: import hudson.tasks.Shell;",
      "32: import org.apache.commons.io.FileUtils;",
      "33: import org.apache.commons.io.IOUtils;",
      "34: import org.junit.Assume;",
      "35: import org.junit.Rule;",
      "36: import org.junit.Test;",
      "37: import org.jvnet.hudson.test.Issue;",
      "38: import org.jvnet.hudson.test.JenkinsRule;",
      "40: import java.io.File;",
      "41: import java.io.IOException;",
      "42: import java.io.InputStream;",
      "43: import java.io.OutputStream;",
      "44: import java.net.HttpURLConnection;",
      "45: import java.net.URI;",
      "46: import java.net.URISyntaxException;",
      "47: import java.net.URL;",
      "48: import java.nio.file.Files;",
      "49: import java.util.List;",
      "50: import java.util.stream.Collectors;",
      "51: import java.util.zip.ZipEntry;",
      "52: import java.util.zip.ZipFile;",
      "54: import static org.hamcrest.CoreMatchers.allOf;",
      "55: import static org.hamcrest.CoreMatchers.containsString;",
      "56: import static org.hamcrest.CoreMatchers.equalTo;",
      "57: import static org.hamcrest.CoreMatchers.not;",
      "58: import static org.hamcrest.Matchers.contains;",
      "59: import static org.hamcrest.Matchers.containsInAnyOrder;",
      "60: import static org.hamcrest.Matchers.hasSize;",
      "61: import static org.junit.Assert.assertEquals;",
      "62: import static org.junit.Assert.assertThat;",
      "63: import static org.junit.Assert.fail;",
      "65: public class DirectoryBrowserSupportSEC904Test {",
      "67:     @Rule",
      "68:     public JenkinsRule j = new JenkinsRule();",
      "70:     @Test",
      "71:     @Issue(\"SECURITY-904\")",
      "72:     public void symlink_outsideWorkspace_areNotAllowed() throws Exception {",
      "73:         FreeStyleProject p = j.createFreeStyleProject();",
      "75:         File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");",
      "76:         File secretTarget = new File(secretsFolder, \"goal.txt\");",
      "77:         String secretContent = \"secret\";",
      "78:         FileUtils.write(secretTarget, secretContent);",
      "95:         if (Functions.isWindows()) {",
      "99:             String script = loadContentFromResource(\"outsideWorkspaceStructure.bat\");",
      "100:             p.getBuildersList().add(new BatchFile(script));",
      "101:         } else {",
      "102:             String script = loadContentFromResource(\"outsideWorkspaceStructure.sh\");",
      "103:             p.getBuildersList().add(new Shell(script));",
      "104:         }",
      "106:         assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());",
      "108:         JenkinsRule.WebClient wc = j.createWebClient();",
      "109:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
      "110:         { // workspace root must be reachable (regular case)",
      "111:             Page page = wc.goTo(p.getUrl() + \"ws/\", null);",
      "112:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "113:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "114:             assertThat(workspaceContent, allOf(",
      "115:                     containsString(\"public1.key\"),",
      "116:                     containsString(\"intermediateFolder\"),",
      "117:                     containsString(\"to_secrets1\"),",
      "118:                     containsString(\"to_secrets_goal1\"),",
      "119:                     not(containsString(\"to_secrets2\")),",
      "120:                     not(containsString(\"to_secrets_goal2\"))",
      "121:             ));",
      "122:         }",
      "123:         { // to_secrets1 not reachable",
      "124:             Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1/\", null);",
      "125:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "126:         }",
      "127:         { // to_secrets_goal1 not reachable",
      "128:             Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);",
      "129:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "130:         }",
      "131:         { // intermediateFolder must be reachable (regular case)",
      "132:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);",
      "133:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "134:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "135:             assertThat(workspaceContent, allOf(",
      "136:                     not(containsString(\"to_secrets1\")),",
      "137:                     not(containsString(\"to_secrets_goal1\")),",
      "138:                     containsString(\"to_secrets2\"),",
      "139:                     containsString(\"to_secrets_goal2\")",
      "140:             ));",
      "141:         }",
      "142:         { // to_secrets2 not reachable",
      "143:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\", null);",
      "144:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "145:         }",
      "146:         { // using symbolic in the intermediate path",
      "147:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\", null);",
      "148:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "149:         }",
      "150:         { // to_secrets_goal2 not reachable",
      "151:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);",
      "152:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "153:         }",
      "156:         { // the pattern allow us to search inside the files / folders,",
      "158:             Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);",
      "159:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "160:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "161:             assertThat(workspaceContent, allOf(",
      "162:                     not(containsString(\"master.key\")),",
      "163:                     containsString(\"public1.key\"),",
      "164:                     containsString(\"public2.key\")",
      "165:             ));",
      "166:         }",
      "169:         { // all the outside folders / files are not included in the zip",
      "170:             Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);",
      "171:             assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "173:             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);",
      "174:             assertThat(entryNames, containsInAnyOrder(",
      "175:                     p.getName() + \"/intermediateFolder/public2.key\",",
      "176:                     p.getName() + \"/public1.key\"",
      "177:             ));",
      "178:         }",
      "179:         { // all the outside folders / files are not included in the zip",
      "180:             Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);",
      "181:             assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "183:             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);",
      "184:             assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));",
      "185:         }",
      "186:     }",
      "192:     @Test",
      "193:     @Issue(\"SECURITY-904\")",
      "194:     public void symlink_avoidLeakingInformation_aboutIllegalFolder() throws Exception {",
      "195:         FreeStyleProject p = j.createFreeStyleProject();",
      "197:         File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");",
      "198:         File secretTarget = new File(secretsFolder, \"goal.txt\");",
      "199:         String secretContent = \"secret\";",
      "200:         FileUtils.write(secretTarget, secretContent);",
      "201:         FileUtils.write(new File(secretsFolder, \"public_fake1.key\"), secretContent);",
      "202:         FileUtils.write(new File(secretsFolder, \"public_fake2.key\"), secretContent);",
      "203:         FileUtils.write(new File(secretsFolder, \"public_fake3.key\"), secretContent);",
      "223:         if (Functions.isWindows()) {",
      "227:             String script = loadContentFromResource(\"outsideWorkspaceStructure.bat\");",
      "228:             p.getBuildersList().add(new BatchFile(script));",
      "229:         } else {",
      "230:             String script = loadContentFromResource(\"outsideWorkspaceStructure.sh\");",
      "231:             p.getBuildersList().add(new Shell(script));",
      "232:         }",
      "234:         assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());",
      "236:         JenkinsRule.WebClient wc = j.createWebClient();",
      "237:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
      "242:         { // without the patch the otherFolder and to_secrets[1,2,3] will appear in the results (once)",
      "243:             Page page = wc.goTo(p.getUrl() + \"ws/**/goal.txt\", null);",
      "244:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "245:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "246:             assertThat(workspaceContent, allOf(",
      "248:                     not(containsString(\"public1.key\")),",
      "249:                     not(containsString(\"public2.key\")),",
      "251:                     not(containsString(\"to_secrets\")),",
      "252:                     not(containsString(\"to_secrets2\")),",
      "253:                     not(containsString(\"to_secrets3\"))",
      "254:             ));",
      "255:         }",
      "256:         { // without the patch the otherFolder and to_secrets[1,2,3] will appear in the results (3 times each)",
      "257:             Page page = wc.goTo(p.getUrl() + \"ws/**/public*.key\", null);",
      "258:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "259:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "260:             assertThat(workspaceContent, allOf(",
      "261:                     containsString(\"public1.key\"),",
      "262:                     containsString(\"public2.key\"),",
      "264:                     not(containsString(\"otherFolder\")),",
      "265:                     not(containsString(\"to_secrets\")),",
      "266:                     not(containsString(\"to_secrets2\")),",
      "267:                     not(containsString(\"to_secrets3\"))",
      "268:             ));",
      "269:         }",
      "270:     }",
      "274:     @Test",
      "275:     @Issue(\"SECURITY-904\")",
      "276:     public void junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction() throws Exception {",
      "277:         Assume.assumeTrue(Functions.isWindows());",
      "279:         FreeStyleProject p = j.createFreeStyleProject();",
      "281:         File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");",
      "282:         File secretTarget = new File(secretsFolder, \"goal.txt\");",
      "283:         String secretContent = \"secret\";",
      "284:         FileUtils.write(secretTarget, secretContent);",
      "304:         String script = loadContentFromResource(\"outsideWorkspaceStructureWithJunctions.bat\");",
      "305:         p.getBuildersList().add(new BatchFile(script));",
      "307:         assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());",
      "309:         JenkinsRule.WebClient wc = j.createWebClient();",
      "310:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
      "311:         { // workspace root must be reachable (regular case)",
      "312:             Page page = wc.goTo(p.getUrl() + \"ws/\", null);",
      "313:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "314:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "315:             assertThat(workspaceContent, allOf(",
      "316:                     containsString(\"public1.key\"),",
      "317:                     containsString(\"intermediateFolder\"),",
      "318:                     containsString(\"to_secrets1j\"),",
      "319:                     containsString(\"to_secrets1s\"),",
      "320:                     containsString(\"to_secrets_goal1\"),",
      "321:                     not(containsString(\"to_secrets2\")),",
      "322:                     not(containsString(\"to_secrets_goal2\"))",
      "323:             ));",
      "324:         }",
      "325:         { // to_secrets1s not reachable",
      "326:             Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1s/\", null);",
      "327:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "328:         }",
      "329:         { // to_secrets1j not reachable",
      "330:             Page page = wc.goTo(p.getUrl() + \"ws/to_secrets1j/\", null);",
      "331:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "332:         }",
      "333:         { // to_secrets_goal1 not reachable",
      "334:             Page page = wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);",
      "335:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "336:         }",
      "337:         { // intermediateFolder must be reachable (regular case)",
      "338:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);",
      "339:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "340:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "341:             assertThat(workspaceContent, allOf(",
      "342:                     not(containsString(\"to_secrets1\")),",
      "343:                     not(containsString(\"to_secrets_goal1\")),",
      "344:                     containsString(\"to_secrets2s\"),",
      "345:                     containsString(\"to_secrets2j\"),",
      "346:                     containsString(\"to_secrets_goal2\")",
      "347:             ));",
      "348:         }",
      "349:         { // to_secrets2s not reachable",
      "350:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/\", null);",
      "351:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "352:         }",
      "353:         { // to_secrets2j not reachable",
      "354:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/\", null);",
      "355:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "356:         }",
      "357:         { // using symbolic in the intermediate path",
      "358:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/master.key\", null);",
      "359:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "360:         }",
      "361:         { // using symbolic in the intermediate path",
      "362:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/master.key\", null);",
      "363:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "364:         }",
      "365:         { // to_secrets_goal2 not reachable",
      "366:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);",
      "367:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_FORBIDDEN));",
      "368:         }",
      "371:         { // the pattern allow us to search inside the files / folders,",
      "373:             Page page = wc.goTo(p.getUrl() + \"ws/**/*.key\", null);",
      "374:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "375:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "376:             assertThat(workspaceContent, allOf(",
      "377:                     not(containsString(\"master.key\")),",
      "378:                     containsString(\"public1.key\"),",
      "379:                     containsString(\"public2.key\"),",
      "380:                     containsString(\"intermediateFolder\"),",
      "381:                     not(containsString(\"otherFolder\")),",
      "382:                     not(containsString(\"to_secrets3j\")),",
      "383:                     not(containsString(\"to_secrets3s\")),",
      "384:                     not(containsString(\"to_secrets2j\")),",
      "385:                     not(containsString(\"to_secrets2s\")),",
      "386:                     not(containsString(\"to_secrets1j\")),",
      "387:                     not(containsString(\"to_secrets1s\"))",
      "388:             ));",
      "389:         }",
      "392:         { // all the outside folders / files are not included in the zip",
      "393:             Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);",
      "394:             assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "396:             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);",
      "397:             assertThat(entryNames, containsInAnyOrder(",
      "398:                     p.getName() + \"/intermediateFolder/public2.key\",",
      "399:                     p.getName() + \"/public1.key\"",
      "400:             ));",
      "401:         }",
      "402:         { // all the outside folders / files are not included in the zip",
      "403:             Page zipPage = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);",
      "404:             assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "406:             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);",
      "407:             assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));",
      "408:         }",
      "409:     }",
      "411:     private List<String> getListOfEntriesInDownloadedZip(UnexpectedPage zipPage) throws Exception {",
      "412:         List<String> result;",
      "414:         File zipfile = null;",
      "415:         ZipFile readzip = null;",
      "416:         try {",
      "417:             zipfile = download(zipPage);",
      "419:             readzip = new ZipFile(zipfile);",
      "420:             result = readzip.stream().map(ZipEntry::getName).collect(Collectors.toList());",
      "421:         }",
      "422:         finally {",
      "423:             if (readzip != null) {",
      "424:                 readzip.close();",
      "425:             }",
      "426:             if (zipfile != null) {",
      "427:                 zipfile.delete();",
      "428:             }",
      "429:         }",
      "430:         return result;",
      "431:     }",
      "434:     private File download(UnexpectedPage page) throws IOException {",
      "435:         File file = File.createTempFile(\"DirectoryBrowserSupport\", \"zipDownload\");",
      "436:         file.delete();",
      "437:         try (InputStream is = page.getInputStream();",
      "438:              OutputStream os = Files.newOutputStream(file.toPath())) {",
      "439:             IOUtils.copy(is, os);",
      "440:         }",
      "442:         return file;",
      "443:     }",
      "445:     @Test",
      "446:     @Issue(\"SECURITY-904\")",
      "447:     public void directSymlink_forTestingZip() throws Exception {",
      "448:         FreeStyleProject p = j.createFreeStyleProject();",
      "450:         assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());",
      "451:         FilePath ws = p.getSomeWorkspace();",
      "461:         File secretsFolder = new File(j.jenkins.getRootDir(), \"secrets\");",
      "462:         FilePath a1 = ws.child(\"a1\");",
      "463:         a1.mkdirs();",
      "464:         a1.child(\"to_secrets1\").symlinkTo(secretsFolder.getAbsolutePath(), TaskListener.NULL);",
      "465:         FilePath b2 = ws.child(\"b1\").child(\"b2\");",
      "466:         b2.mkdirs();",
      "467:         b2.child(\"to_secrets2\").symlinkTo(secretsFolder.getAbsolutePath(), TaskListener.NULL);",
      "468:         FilePath c3 = ws.child(\"c1\").child(\"c2\").child(\"c3\");",
      "469:         c3.mkdirs();",
      "470:         c3.child(\"to_secrets3\").symlinkTo(secretsFolder.getAbsolutePath(), TaskListener.NULL);",
      "472:         JenkinsRule.WebClient wc = j.createWebClient();",
      "473:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
      "474:         {",
      "475:             Page zipPage = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);",
      "476:             assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "478:             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);",
      "479:             assertThat(entryNames, hasSize(0));",
      "480:         }",
      "481:         {",
      "482:             Page zipPage = wc.goTo(p.getUrl() + \"ws/a1/*zip*/a1.zip\", null);",
      "483:             assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "485:             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);",
      "486:             assertThat(entryNames, hasSize(0));",
      "487:         }",
      "488:         {",
      "489:             Page zipPage = wc.goTo(p.getUrl() + \"ws/b1/b2/*zip*/b2.zip\", null);",
      "490:             assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "492:             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);",
      "493:             assertThat(entryNames, hasSize(0));",
      "494:         }",
      "495:         {",
      "496:             Page zipPage = wc.goTo(p.getUrl() + \"ws/c1/c2/c3/*zip*/c3.zip\", null);",
      "497:             assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "499:             List<String> entryNames = getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);",
      "500:             assertThat(entryNames, hasSize(0));",
      "501:         }",
      "502:     }",
      "504:     @Test",
      "505:     @Issue(\"SECURITY-904\")",
      "506:     public void symlink_insideWorkspace_areStillAllowed() throws Exception {",
      "507:         FreeStyleProject p = j.createFreeStyleProject();",
      "510:         assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());",
      "512:         File jobWorkspaceFolder = new File(new File(j.jenkins.getRootDir(), \"workspace\"), p.name);",
      "513:         File folderInsideWorkspace = new File(jobWorkspaceFolder, \"asset\");",
      "514:         folderInsideWorkspace.mkdir();",
      "515:         File fileTarget = new File(folderInsideWorkspace, \"goal.txt\");",
      "516:         String publicContent = \"not-secret\";",
      "517:         FileUtils.write(fileTarget, publicContent);",
      "529:         if (Functions.isWindows()) {",
      "530:             String script = loadContentFromResource(\"insideWorkspaceStructure.bat\");",
      "531:             p.getBuildersList().add(new BatchFile(script));",
      "532:         } else {",
      "533:             String script = loadContentFromResource(\"insideWorkspaceStructure.sh\");",
      "534:             p.getBuildersList().add(new Shell(script));",
      "535:         }",
      "537:         assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());",
      "539:         JenkinsRule.WebClient wc = j.createWebClient();",
      "540:         wc.getOptions().setThrowExceptionOnFailingStatusCode(false);",
      "541:         { // workspace root must be reachable (regular case)",
      "542:             Page page = wc.goTo(p.getUrl() + \"ws/\", null);",
      "543:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "544:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "545:             assertThat(workspaceContent, allOf(",
      "546:                     containsString(\"asset\"),",
      "547:                     containsString(\"to_internal1\"),",
      "548:                     containsString(\"to_internal_goal1\"),",
      "549:                     containsString(\"intermediateFolder\"),",
      "550:                     not(containsString(\"to_internal2\")),",
      "551:                     not(containsString(\"to_internal_goal2\")",
      "552:             )));",
      "553:         }",
      "554:         { // to_internal1 reachable",
      "555:             Page page = wc.goTo(p.getUrl() + \"ws/to_internal1/\", null);",
      "556:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "557:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "558:             assertThat(workspaceContent, containsString(\"goal.txt\"));",
      "559:         }",
      "560:         { // to_internal_goal1 reachable",
      "561:             Page page = wc.goTo(p.getUrl() + \"ws/to_internal_goal1/\", null);",
      "562:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "563:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "564:             assertThat(workspaceContent, containsString(publicContent));",
      "565:         }",
      "566:         { // to_internal2 reachable",
      "567:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal2/\", null);",
      "568:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "569:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "570:             assertThat(workspaceContent, containsString(\"goal.txt\"));",
      "571:         }",
      "572:         { // to_internal_goal2 reachable",
      "573:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal_goal2/\", null);",
      "574:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "575:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "576:             assertThat(workspaceContent, containsString(publicContent));",
      "577:         }",
      "578:         { // direct to goal",
      "579:             Page page = wc.goTo(p.getUrl() + \"ws/asset/goal.txt/\", null);",
      "580:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "581:             String workspaceContent = page.getWebResponse().getContentAsString();",
      "582:             assertThat(workspaceContent, containsString(publicContent));",
      "583:         }",
      "584:         { // the zip will only contain folder from inside the workspace",
      "585:             Page page = wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);",
      "586:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "587:         }",
      "588:         { // the zip will only contain folder from inside the workspace",
      "589:             Page page = wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);",
      "590:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "591:         }",
      "592:         { // the zip will only contain folder from inside the workspace",
      "593:             Page page = wc.goTo(p.getUrl() + \"ws/asset/*zip*/asset.zip\", null);",
      "594:             assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));",
      "595:         }",
      "596:     }",
      "598:     private String loadContentFromResource(String fileNameInResources) throws IOException, URISyntaxException {",
      "599:         URL resourceUrl = DirectoryBrowserSupportSEC904Test.class.getResource(DirectoryBrowserSupportSEC904Test.class.getSimpleName() + \"/\" + fileNameInResources);",
      "600:         if (resourceUrl == null) {",
      "601:             fail(\"The resource with fileName \" + fileNameInResources + \" is not present in the resources of the test\");",
      "602:         }",
      "603:         File resourceFile = new File(resourceUrl.toURI());",
      "604:         return FileUtils.readFileToString(resourceFile);",
      "605:     }",
      "606: }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/tasks/ArtifactArchiverTest.java||test/src/test/java/hudson/tasks/ArtifactArchiverTest.java": [
      "File: test/src/test/java/hudson/tasks/ArtifactArchiverTest.java -> test/src/test/java/hudson/tasks/ArtifactArchiverTest.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "163:         assertFalse(kids[0].isDirectory());",
      "164:         assertFalse(kids[0].isFile());",
      "165:         assertFalse(kids[0].exists());",
      "167:     }",
      "169:     static class CreateArtifact extends TestBuilder {",
      "",
      "[Removed Lines]",
      "166:         j.createWebClient().assertFails(b.getUrl() + \"artifact/hack\", HttpURLConnection.HTTP_NOT_FOUND);",
      "",
      "[Added Lines]",
      "166:         j.createWebClient().assertFails(b.getUrl() + \"artifact/hack\", HttpURLConnection.HTTP_FORBIDDEN);",
      "",
      "---------------"
    ],
    "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.bat||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.bat": [
      "File: test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.bat -> test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.bat",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: mklink /D to_internal1 .\\asset",
      "2: mklink to_internal_goal1 .\\asset\\goal.txt",
      "4: mkdir intermediateFolder",
      "5: cd intermediateFolder",
      "6: mklink /D to_internal2 ..\\asset",
      "7: mklink to_internal_goal2 ..\\asset\\goal.txt",
      "",
      "---------------"
    ],
    "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.sh||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.sh": [
      "File: test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.sh -> test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/insideWorkspaceStructure.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #!/bin/sh",
      "2: ln -s ./asset to_internal1",
      "3: ln -s ./asset/goal.txt to_internal_goal1",
      "5: mkdir intermediateFolder",
      "6: cd intermediateFolder",
      "7: ln -s ../asset to_internal2",
      "8: ln -s ../asset/goal.txt to_internal_goal2",
      "",
      "---------------"
    ],
    "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.bat||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.bat": [
      "File: test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.bat -> test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.bat",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: echo public-1 > public1.key",
      "2: mklink /D to_secrets1 ..\\..\\secrets",
      "3: mklink to_secrets_goal1 ..\\..\\secrets\\goal.txt",
      "5: mkdir intermediateFolder",
      "6: cd intermediateFolder",
      "7: echo public-2 > public2.key",
      "8: mklink /D to_secrets2 ..\\..\\..\\secrets",
      "9: mklink to_secrets_goal2 ..\\..\\..\\secrets\\goal.txt",
      "11: mkdir otherFolder",
      "12: cd otherFolder",
      "13: mklink /D to_secrets3 ..\\..\\..\\..\\secrets",
      "",
      "---------------"
    ],
    "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.sh||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.sh": [
      "File: test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.sh -> test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructure.sh",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: #!/bin/sh",
      "2: echo 'public-1' > public1.key",
      "3: ln -s ../../secrets to_secrets1",
      "4: ln -s ../../secrets/goal.txt to_secrets_goal1",
      "6: mkdir intermediateFolder",
      "7: cd intermediateFolder",
      "8: echo 'public-2' > public2.key",
      "9: ln -s ../../../secrets to_secrets2",
      "10: ln -s ../../../secrets/goal.txt to_secrets_goal2",
      "12: mkdir otherFolder",
      "13: cd otherFolder",
      "14: ln -s ../../../../secrets to_secrets3",
      "",
      "---------------"
    ],
    "test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructureWithJunctions.bat||test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructureWithJunctions.bat": [
      "File: test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructureWithJunctions.bat -> test/src/test/resources/hudson/model/DirectoryBrowserSupportSEC904Test/outsideWorkspaceStructureWithJunctions.bat",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1: echo public-1 > public1.key",
      "2: mklink /D to_secrets1s ..\\..\\secrets",
      "3: mklink /J to_secrets1j ..\\..\\secrets",
      "4: mklink to_secrets_goal1 ..\\..\\secrets\\goal.txt",
      "6: mkdir intermediateFolder",
      "7: cd intermediateFolder",
      "8: echo public-2 > public2.key",
      "9: mklink /D to_secrets2s ..\\..\\..\\secrets",
      "10: mklink /J to_secrets2j ..\\..\\..\\secrets",
      "11: mklink to_secrets_goal2 ..\\..\\..\\secrets\\goal.txt",
      "13: mkdir otherFolder",
      "14: cd otherFolder",
      "15: mklink /D to_secrets3s ..\\..\\..\\..\\secrets",
      "16: mklink /J to_secrets3j ..\\..\\..\\..\\secrets",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "50df56352cd9be3691e4bdd4351891dedefcba31",
      "candidate_info": {
        "commit_hash": "50df56352cd9be3691e4bdd4351891dedefcba31",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/50df56352cd9be3691e4bdd4351891dedefcba31",
        "files": [
          "core/src/test/java/hudson/FilePathSEC904Test.java",
          "core/src/test/java/hudson/UtilTest.java",
          "test/src/test/java/hudson/PluginSEC925Test.java",
          "test/src/test/java/hudson/cli/CLITest.java",
          "test/src/test/java/hudson/util/AtomicFileWriterPerfTest.java"
        ],
        "message": "Suppressing some tests which fail in CI.",
        "before_after_code_files": [
          "core/src/test/java/hudson/FilePathSEC904Test.java||core/src/test/java/hudson/FilePathSEC904Test.java",
          "core/src/test/java/hudson/UtilTest.java||core/src/test/java/hudson/UtilTest.java",
          "test/src/test/java/hudson/PluginSEC925Test.java||test/src/test/java/hudson/PluginSEC925Test.java",
          "test/src/test/java/hudson/cli/CLITest.java||test/src/test/java/hudson/cli/CLITest.java",
          "test/src/test/java/hudson/util/AtomicFileWriterPerfTest.java||test/src/test/java/hudson/util/AtomicFileWriterPerfTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/test/java/hudson/FilePathSEC904Test.java||core/src/test/java/hudson/FilePathSEC904Test.java"
          ],
          "candidate": [
            "core/src/test/java/hudson/FilePathSEC904Test.java||core/src/test/java/hudson/FilePathSEC904Test.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/test/java/hudson/FilePathSEC904Test.java||core/src/test/java/hudson/FilePathSEC904Test.java": [
          "File: core/src/test/java/hudson/FilePathSEC904Test.java -> core/src/test/java/hudson/FilePathSEC904Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: import static org.junit.Assert.assertFalse;",
          "37: import static org.junit.Assert.assertTrue;",
          "38: import static org.junit.Assume.assumeTrue;",
          "41: public class FilePathSEC904Test {",
          "43:     @Rule",
          "44:     public TemporaryFolder temp = new TemporaryFolder();",
          "46:     @Test",
          "47:     @Issue(\"SECURITY-904\")",
          "48:     public void isDescendant_regularFiles() throws IOException, InterruptedException {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: import org.junit.Ignore;",
          "47:     @Ignore(\"./../workspace fails on CI\")",
          "",
          "---------------"
        ],
        "core/src/test/java/hudson/UtilTest.java||core/src/test/java/hudson/UtilTest.java": [
          "File: core/src/test/java/hudson/UtilTest.java -> core/src/test/java/hudson/UtilTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "352:         assertFalse(\"f1 exists\", f1.exists());",
          "353:     }",
          "355:     @Test",
          "356:     public void testDeleteContentsRecursive_onWindows() throws Exception {",
          "357:         Assume.assumeTrue(Functions.isWindows());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "355:     @Ignore(\"TODO often fails in CI\")",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/PluginSEC925Test.java||test/src/test/java/hudson/PluginSEC925Test.java": [
          "File: test/src/test/java/hudson/PluginSEC925Test.java -> test/src/test/java/hudson/PluginSEC925Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: import java.util.Arrays;",
          "12: import java.util.List;",
          "13: import java.util.concurrent.Future;",
          "16: public class PluginSEC925Test {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: import org.junit.Ignore;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18:     @Rule",
          "19:     public JenkinsRule r = new JenkinsRule();",
          "21:     @Test",
          "22:     @Issue(\"SECURITY-925\")",
          "23:     public void preventTimestamp2_toBeServed() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22:     @Ignore(\"TODO observed to fail in CI with 404\")",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/cli/CLITest.java||test/src/test/java/hudson/cli/CLITest.java": [
          "File: test/src/test/java/hudson/cli/CLITest.java -> test/src/test/java/hudson/cli/CLITest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "73: import javax.servlet.ServletException;",
          "74: import javax.servlet.http.HttpServletRequest;",
          "75: import javax.servlet.http.HttpServletResponse;",
          "77: public class CLITest {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: import org.junit.Ignore;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "256:         }",
          "257:     }",
          "259:     @Test",
          "260:     @Issue(\"JENKINS-54310\")",
          "261:     public void readInputAtOnce() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "260:     @Ignore(\"TODO sometimes fails, in CI & locally\")",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/util/AtomicFileWriterPerfTest.java||test/src/test/java/hudson/util/AtomicFileWriterPerfTest.java": [
          "File: test/src/test/java/hudson/util/AtomicFileWriterPerfTest.java -> test/src/test/java/hudson/util/AtomicFileWriterPerfTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package hudson.util;",
          "3: import org.junit.ClassRule;",
          "4: import org.junit.Test;",
          "5: import org.jvnet.hudson.test.Issue;",
          "6: import org.jvnet.hudson.test.JenkinsRule;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: import org.junit.Ignore;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "26:     @Issue(\"JENKINS-34855\")",
          "27:     @Test(timeout = 50 * 1000L)",
          "28:     public void poorManPerformanceTestBed() throws Exception {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:     @Ignore(\"TODO often fails in CI\")",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f8b557a3bac38af1c7f24d361c24f19ac9955b6",
      "candidate_info": {
        "commit_hash": "2f8b557a3bac38af1c7f24d361c24f19ac9955b6",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/2f8b557a3bac38af1c7f24d361c24f19ac9955b6",
        "files": [
          "core/src/main/java/hudson/FilePath.java",
          "core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
          "core/src/main/java/hudson/util/DirScanner.java",
          "core/src/main/java/jenkins/util/VirtualFile.java",
          "core/src/test/java/hudson/FilePathSEC904Test.java",
          "core/src/test/java/jenkins/util/VirtualFileSEC904Test.java"
        ],
        "message": "[JENKINS-55050] Reduce performance impact of SEC-904 (esp. zip) (#3861)\n\n* [JENKINS-55050] Reduce log impact on performance\n- especially in case of large / deep folder that is fully illegal\n- could reduce time by a factor of around 2.\n\n* Use SystemProperties\n\n* [JENKINS-55050] Reduce performance impact of the security release\n- SEC-904 increased the time taken to zip files from\nDirectoryBrowserSupport views (workspace / artifact)\n- This PR proposes a different approach for some of the highly impact scenario\n\n* Update core/src/main/java/jenkins/util/VirtualFile.java\n\nCo-Authored-By: Wadeck <Wadeck@users.noreply.github.com>\n\n* Return in case of interruption instead of continuing\n- The interruption status flag is not really respected otherwise\n\n* Update core/src/main/java/jenkins/util/VirtualFile.java\n\nCo-Authored-By: Wadeck <Wadeck@users.noreply.github.com>\n\n* Improve ZipEntry writing\n- Add logging on FileSystemException\n\n* Minor refactoring in DirScanner\n\n* Correct conjugation, size for arraylist and dead code removal\n\n* Adjust the PR using the feedbacks\n\n* Adjust the PR using the feedbacks (part 2)\n\n* Adjust the PR using the feedbacks (part 3)",
        "before_after_code_files": [
          "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java",
          "core/src/main/java/hudson/model/DirectoryBrowserSupport.java||core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
          "core/src/main/java/hudson/util/DirScanner.java||core/src/main/java/hudson/util/DirScanner.java",
          "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java",
          "core/src/test/java/hudson/FilePathSEC904Test.java||core/src/test/java/hudson/FilePathSEC904Test.java",
          "core/src/test/java/jenkins/util/VirtualFileSEC904Test.java||core/src/test/java/jenkins/util/VirtualFileSEC904Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java",
            "core/src/main/java/hudson/model/DirectoryBrowserSupport.java||core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
            "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java",
            "core/src/test/java/hudson/FilePathSEC904Test.java||core/src/test/java/hudson/FilePathSEC904Test.java",
            "core/src/test/java/jenkins/util/VirtualFileSEC904Test.java||core/src/test/java/jenkins/util/VirtualFileSEC904Test.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java",
            "core/src/main/java/hudson/model/DirectoryBrowserSupport.java||core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
            "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java",
            "core/src/test/java/hudson/FilePathSEC904Test.java||core/src/test/java/hudson/FilePathSEC904Test.java",
            "core/src/test/java/jenkins/util/VirtualFileSEC904Test.java||core/src/test/java/jenkins/util/VirtualFileSEC904Test.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java": [
          "File: core/src/main/java/hudson/FilePath.java -> core/src/main/java/hudson/FilePath.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "79: import java.net.URI;",
          "80: import java.net.URL;",
          "81: import java.net.URLConnection;",
          "82: import java.nio.file.FileSystems;",
          "83: import java.nio.file.Files;",
          "84: import java.nio.file.NoSuchFileException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "82: import java.nio.file.FileSystemException;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3266:                 parentRealPath = parentAbsolutePath.toRealPath();",
          "3267:             }",
          "3268:             catch(NoSuchFileException e) {",
          "3270:             }",
          "",
          "[Removed Lines]",
          "3269:                 throw new IllegalArgumentException(\"The parent does not exist\");",
          "",
          "[Added Lines]",
          "3270:                 return false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3307:                     Path child = currentFileAbsolutePath.normalize();",
          "3308:                     Path parent = parentAbsolutePath.normalize();",
          "3309:                     return child.startsWith(parent);",
          "3310:                 }",
          "3311:             }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3311:                 } catch(FileSystemException e) {",
          "3312:                     LOGGER.log(Level.WARNING, String.format(\"Problem during call to the method toRealPath on %s\", currentFileAbsolutePath), e);",
          "3313:                     return false;",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/DirectoryBrowserSupport.java||core/src/main/java/hudson/model/DirectoryBrowserSupport.java": [
          "File: core/src/main/java/hudson/model/DirectoryBrowserSupport.java -> core/src/main/java/hudson/model/DirectoryBrowserSupport.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: import java.util.Collections;",
          "40: import java.util.Comparator;",
          "41: import java.util.GregorianCalendar;",
          "42: import java.util.List;",
          "43: import java.util.Locale;",
          "44: import java.util.Objects;",
          "45: import java.util.StringTokenizer;",
          "46: import java.util.logging.Level;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "42: import java.util.LinkedHashMap;",
          "45: import java.util.Map;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "59: import org.kohsuke.accmod.Restricted;",
          "60: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "61: import org.kohsuke.stapler.HttpResponse;",
          "63: import org.kohsuke.stapler.StaplerRequest;",
          "64: import org.kohsuke.stapler.StaplerResponse;",
          "",
          "[Removed Lines]",
          "62: import org.kohsuke.stapler.HttpResponses;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "75: public final class DirectoryBrowserSupport implements HttpResponse {",
          "77:     @SuppressFBWarnings(value = \"MS_SHOULD_BE_FINAL\", justification = \"Accessible via System Groovy Scripts\")",
          "80:     public final ModelObject owner;",
          "",
          "[Removed Lines]",
          "78:     public static boolean ALLOW_SYMLINK_ESCAPE = Boolean.getBoolean(DirectoryBrowserSupport.class.getName() + \".allowSymlinkEscape\");",
          "",
          "[Added Lines]",
          "79:     public static boolean ALLOW_SYMLINK_ESCAPE = SystemProperties.getBoolean(DirectoryBrowserSupport.class.getName() + \".allowSymlinkEscape\");",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "436:         try (ZipOutputStream zos = new ZipOutputStream(outputStream)) {",
          "437:             zos.setEncoding(System.getProperty(\"file.encoding\")); // TODO JENKINS-20663 make this overridable via query parameter",
          "464:                 }",
          "465:             }",
          "466:         }",
          "467:     }",
          "",
          "[Removed Lines]",
          "439:             for (String n : dir.list(glob.isEmpty() ? \"**\" : glob, null, /* TODO what is the user expectation? */true)) {",
          "440:                 String relativePath;",
          "441:                 if (glob.length() == 0) {",
          "443:                     relativePath = dir.getName() + '/' + n;",
          "444:                 } else {",
          "445:                     relativePath = n;",
          "446:                 }",
          "448:                 String targetFile = dir.toString().substring(root.toString().length()) + n;",
          "449:                 if (!ALLOW_SYMLINK_ESCAPE && root.supportIsDescendant() && !root.isDescendant(targetFile)) {",
          "450:                     LOGGER.log(Level.INFO, \"Trying to access a file outside of the directory: \" + root + \", illicit target: \" + targetFile);",
          "451:                 } else {",
          "456:                     ZipEntry e = new ZipEntry(relativePath.replace('\\\\', '/'));",
          "457:                     VirtualFile f = dir.child(n);",
          "458:                     e.setTime(f.lastModified());",
          "459:                     zos.putNextEntry(e);",
          "460:                     try (InputStream in = f.open()) {",
          "461:                         IOUtils.copy(in, zos);",
          "462:                     }",
          "463:                     zos.closeEntry();",
          "",
          "[Added Lines]",
          "441:             if (glob.isEmpty()) {",
          "442:                 if (!root.supportsQuickRecursiveListing()) {",
          "444:                     glob = \"**\";",
          "448:             if (glob.isEmpty()) {",
          "449:                 Map<String, VirtualFile> nameToVirtualFiles = collectRecursivelyAllLegalChildren(dir);",
          "450:                 sendZipUsingMap(zos, dir, nameToVirtualFiles);",
          "451:             } else {",
          "452:                 Collection<String> listOfFile = dir.list(glob, null, /* TODO what is the user expectation? */true);",
          "453:                 sendZipUsingListOfNames(zos, dir, listOfFile);",
          "454:             }",
          "455:         }",
          "456:     }",
          "458:     private static void sendZipUsingMap(ZipOutputStream zos, VirtualFile dir, Map<String, VirtualFile> nameToVirtualFiles) throws IOException {",
          "459:         for (Map.Entry<String, VirtualFile> entry : nameToVirtualFiles.entrySet()) {",
          "460:             String n = entry.getKey();",
          "463:             String relativePath = dir.getName() + '/' + n;",
          "465:             VirtualFile f = entry.getValue();",
          "466:             sendOneZipEntry(zos, f, relativePath);",
          "467:         }",
          "468:     }",
          "470:     private static void sendZipUsingListOfNames(ZipOutputStream zos, VirtualFile dir, Collection<String> listOfFileNames) throws IOException {",
          "471:         for (String relativePath : listOfFileNames) {",
          "472:             VirtualFile f = dir.child(relativePath);",
          "473:             sendOneZipEntry(zos, f, relativePath);",
          "474:         }",
          "475:     }",
          "477:     private static void sendOneZipEntry(ZipOutputStream zos, VirtualFile vf, String relativePath) throws IOException {",
          "482:         ZipEntry e = new ZipEntry(relativePath.replace('\\\\', '/'));",
          "484:         e.setTime(vf.lastModified());",
          "485:         zos.putNextEntry(e);",
          "486:         try (InputStream in = vf.open()) {",
          "487:             IOUtils.copy(in, zos);",
          "488:         }",
          "489:         finally {",
          "490:             zos.closeEntry();",
          "491:         }",
          "492:     }",
          "494:     private static Map<String, VirtualFile> collectRecursivelyAllLegalChildren(VirtualFile dir) throws IOException {",
          "495:         Map<String, VirtualFile> nameToFiles = new LinkedHashMap<>();",
          "496:         collectRecursivelyAllLegalChildren(dir, \"\", nameToFiles);",
          "497:         return nameToFiles;",
          "498:     }",
          "500:     private static void collectRecursivelyAllLegalChildren(VirtualFile currentDir, String currentPrefix, Map<String, VirtualFile> nameToFiles) throws IOException {",
          "501:         if (currentDir.isFile()) {",
          "502:             if (currentDir.isDescendant(\"\")) {",
          "503:                 nameToFiles.put(currentPrefix, currentDir);",
          "504:             }",
          "505:         } else {",
          "506:             if (!currentPrefix.isEmpty()) {",
          "507:                 currentPrefix += \"/\";",
          "508:             }",
          "509:             List<VirtualFile> children = currentDir.listOnlyDescendants();",
          "510:             for (VirtualFile child : children) {",
          "511:                 collectRecursivelyAllLegalChildren(child, currentPrefix + child.getName(), nameToFiles);",
          "512:             }",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/util/DirScanner.java||core/src/main/java/hudson/util/DirScanner.java": [
          "File: core/src/main/java/hudson/util/DirScanner.java -> core/src/main/java/hudson/util/DirScanner.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: package hudson.util;",
          "3: import hudson.Util;",
          "4: import org.apache.tools.ant.DirectoryScanner;",
          "5: import org.apache.tools.ant.types.FileSet;",
          "7: import java.io.File;",
          "8: import java.io.FileFilter;",
          "9: import java.io.IOException;",
          "10: import java.io.Serializable;",
          "12: import static hudson.Util.fixEmpty;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: import hudson.FilePath;",
          "5: import org.apache.tools.ant.BuildException;",
          "8: import org.apache.tools.ant.types.selectors.FileSelector;",
          "14: import java.util.HashSet;",
          "15: import java.util.Set;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "119:             FileSet fs = Util.createFileSet(dir,includes,excludes);",
          "120:             fs.setDefaultexcludes(useDefaultExcludes);",
          "122:             if(dir.exists()) {",
          "123:                 DirectoryScanner ds = fs.getDirectoryScanner(new org.apache.tools.ant.Project());",
          "124:                 for( String f : ds.getIncludedFiles()) {",
          "125:                     File file = new File(dir, f);",
          "126:                     scanSingle(file, f, visitor);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "127:             fs.appendSelector(new DescendantFileSelector(fs.getDir()));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "131:         private static final long serialVersionUID = 1L;",
          "132:     }",
          "134:     private static final long serialVersionUID = 1L;",
          "135: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "143:     private static class DescendantFileSelector implements FileSelector{",
          "144:         private final Set<String> alreadyDeselected;",
          "145:         private final FilePath baseDirFP;",
          "146:         private final int baseDirPathLength;",
          "148:         private DescendantFileSelector(File basedir){",
          "149:             this.baseDirFP = new FilePath(basedir);",
          "150:             this.baseDirPathLength = basedir.getPath().length();",
          "151:             this.alreadyDeselected = new HashSet<>();",
          "152:         }",
          "154:         @Override",
          "155:         public boolean isSelected(File basedir, String filename, File file) throws BuildException {",
          "156:             String parentName = file.getParent();",
          "157:             if (parentName.length() > baseDirPathLength) {",
          "159:                 String parentRelativeName = parentName.substring(baseDirPathLength + 1);",
          "165:                 if (alreadyDeselected.contains(parentRelativeName)) {",
          "166:                     alreadyDeselected.add(filename);",
          "167:                     return false;",
          "168:                 }",
          "169:             }",
          "172:             if (file.isDirectory()) {",
          "173:                 try {",
          "174:                     if (baseDirFP.isDescendant(filename)) {",
          "175:                         return true;",
          "176:                     } else {",
          "177:                         alreadyDeselected.add(filename);",
          "178:                         return false;",
          "179:                     }",
          "180:                 }",
          "181:                 catch (IOException | InterruptedException e) {",
          "182:                     return true;",
          "183:                 }",
          "184:             } else {",
          "185:                 return true;",
          "186:             }",
          "187:         }",
          "188:     }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java": [
          "File: core/src/main/java/jenkins/util/VirtualFile.java -> core/src/main/java/jenkins/util/VirtualFile.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: import java.util.Deque;",
          "52: import java.util.LinkedList;",
          "53: import java.util.List;",
          "54: import java.util.logging.Level;",
          "55: import java.util.logging.Logger;",
          "56: import java.util.stream.Collectors;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "54: import java.util.Objects;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:     public abstract boolean exists() throws IOException;",
          "175:     public abstract @Nonnull VirtualFile[] list() throws IOException;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "179:     @Restricted(NoExternalUse.class)",
          "180:     public boolean supportsQuickRecursiveListing() {",
          "181:         return false;",
          "182:     }",
          "191:     @Restricted(NoExternalUse.class)",
          "192:     public @Nonnull List<VirtualFile> listOnlyDescendants() throws IOException {",
          "193:         VirtualFile[] children = list();",
          "194:         List<VirtualFile> result = new ArrayList<>();",
          "195:         for (int i = 0; i < children.length; i++) {",
          "196:             VirtualFile child = children[i];",
          "197:             if (child.isDescendant(\"\")) {",
          "198:                 result.add(child);",
          "199:             }",
          "200:         }",
          "201:         return result;",
          "202:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "379:     public boolean isDescendant(String childRelativePath) throws IOException {",
          "380:         return false;",
          "381:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "410:     String joinWithForwardSlashes(Collection<String> relativePath){",
          "413:         return String.join(\"/\", relativePath) + \"/\";",
          "414:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "391:     private static final class FileVF extends VirtualFile {",
          "392:         private final File f;",
          "393:         private final File root;",
          "394:         FileVF(File f, File root) {",
          "395:             this.f = f;",
          "396:             this.root = root;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:         private boolean cacheDescendant = false;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "442:                 }",
          "443:                 return vfs;",
          "444:             }",
          "445:             @Override",
          "446:             public Collection<String> list(String includes, String excludes, boolean useDefaultExcludes) throws IOException {",
          "447:                 if (isIllegalSymlink()) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "480:             @Override public boolean supportsQuickRecursiveListing() {",
          "481:                 return true;",
          "482:             }",
          "484:             @Override public @Nonnull List<VirtualFile> listOnlyDescendants() throws IOException {",
          "485:                 if (isIllegalSymlink()) {",
          "486:                     return Collections.emptyList();",
          "487:                 }",
          "488:                 File[] children = f.listFiles();",
          "489:                 if (children == null) {",
          "490:                     return Collections.emptyList();",
          "491:                 }",
          "492:                 List<VirtualFile> legalChildren = new ArrayList<>(children.length);",
          "493:                 for (File child : children) {",
          "494:                     if (isDescendant(child.getName())) {",
          "495:                         FileVF legalChild = new FileVF(child, root);",
          "496:                         legalChild.cacheDescendant = true;",
          "497:                         legalChildren.add(legalChild);",
          "498:                     }",
          "499:                 }",
          "500:                 return legalChildren;",
          "501:             }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "487:                 }",
          "488:             }",
          "491:             try {",
          "497:             } catch (IOException x) {",
          "498:                 Logger.getLogger(VirtualFile.class.getName()).log(Level.FINE, \"could not determine symlink status of \" + f, x);",
          "499:             } catch (InvalidPathException x2) {",
          "501:                 Logger.getLogger(VirtualFile.class.getName()).log(Level.FINE, \"Could not convert \" + f + \" to path\", x2);",
          "502:             }",
          "503:             return false;",
          "",
          "[Removed Lines]",
          "490:         private boolean isIllegalSymlink() { // TODO JENKINS-26838",
          "492:                 String myPath = f.toPath().toRealPath(new LinkOption[0]).toString();",
          "493:                 String rootPath = root.toPath().toRealPath(new LinkOption[0]).toString();",
          "494:                 if (!myPath.equals(rootPath) && !myPath.startsWith(rootPath + File.separatorChar)) {",
          "495:                     return true;",
          "496:                 }",
          "",
          "[Added Lines]",
          "547:         private boolean isIllegalSymlink() {",
          "549:                 return !this.isDescendant(\"\");",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "518:         @Override",
          "519:         @Restricted(NoExternalUse.class)",
          "520:         public boolean isDescendant(String potentialChildRelativePath) throws IOException {",
          "521:             if (new File(potentialChildRelativePath).isAbsolute()) {",
          "522:                 throw new IllegalArgumentException(\"Only a relative path is supported, the given path is absolute: \" + potentialChildRelativePath);",
          "523:             }",
          "525:             FilePath root = new FilePath(this.root);",
          "526:             String relativePath = computeRelativePathToRoot();",
          "528:             try {",
          "530:             }",
          "531:             catch (InterruptedException e) {",
          "532:                 return false;",
          "",
          "[Removed Lines]",
          "529:                 return root.isDescendant(relativePath + potentialChildRelativePath);",
          "",
          "[Added Lines]",
          "575:             if (potentialChildRelativePath.isEmpty() && cacheDescendant) {",
          "576:                 return true;",
          "577:             }",
          "586:             File directChild = new File(f, potentialChildRelativePath);",
          "587:             if (directChild.getParentFile().equals(f)) {",
          "589:                 if (!Util.isSymlink(directChild)) {",
          "590:                     return true;",
          "591:                 }",
          "592:             }",
          "598:                 boolean isDescendant = root.isDescendant(relativePath + potentialChildRelativePath);",
          "599:                 if (isDescendant && potentialChildRelativePath.isEmpty()) {",
          "601:                     cacheDescendant = true;",
          "602:                 }",
          "603:                 return isDescendant;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "547:                 relativePath.addFirst(current.getName());",
          "548:                 current = current.getParentFile();",
          "549:             }",
          "552:         }",
          "553:     }",
          "",
          "[Removed Lines]",
          "551:             return String.join(File.separator, relativePath) + File.separator;",
          "",
          "[Added Lines]",
          "625:             return joinWithForwardSlashes(relativePath);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "563:     private static final class FilePathVF extends VirtualFile {",
          "564:         private final FilePath f;",
          "565:         private final FilePath root;",
          "566:         FilePathVF(FilePath f, FilePath root) {",
          "567:             this.f = f;",
          "568:             this.root = root;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "640:         private boolean cacheDescendant = false;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "617:                     throw new IOException(x);",
          "618:                 }",
          "619:             }",
          "621:                 try {",
          "623:                 } catch (InterruptedException x) {",
          "624:                     throw new IOException(x);",
          "625:                 }",
          "626:             }",
          "627:             @Override public VirtualFile child(String name) {",
          "628:                 return new FilePathVF(f.child(name), this.root);",
          "629:             }",
          "",
          "[Removed Lines]",
          "620:             @Override public Collection<String> list(String includes, String excludes, boolean useDefaultExcludes) throws IOException {",
          "622:                     return f.act(new Scanner(includes, excludes, useDefaultExcludes));",
          "",
          "[Added Lines]",
          "696:             @Override public boolean supportsQuickRecursiveListing() {",
          "697:                 return this.f.getChannel() == FilePath.localChannel;",
          "698:             }",
          "700:             @Override public @Nonnull List<VirtualFile> listOnlyDescendants() throws IOException {",
          "702:                     if (!isDescendant(\"\")) {",
          "703:                         return Collections.emptyList();",
          "704:                     }",
          "706:                     List<FilePath> children = f.list();",
          "707:                     List<VirtualFile> legalChildren = new ArrayList<>(children.size());",
          "708:                     for (FilePath child : children){",
          "709:                         if (isDescendant(child.getName())) {",
          "710:                             FilePathVF legalChild = new FilePathVF(child, this.root);",
          "711:                             legalChild.cacheDescendant = true;",
          "712:                             legalChildren.add(legalChild);",
          "713:                         }",
          "714:                     }",
          "716:                     return legalChildren;",
          "722:         @Override public Collection<String> list(String includes, String excludes, boolean useDefaultExcludes) throws IOException {",
          "723:             try {",
          "724:                 return f.act(new Scanner(includes, excludes, useDefaultExcludes));",
          "725:             } catch (InterruptedException x) {",
          "726:                 throw new IOException(x);",
          "727:             }",
          "728:         }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "685:         @Override",
          "686:         @Restricted(NoExternalUse.class)",
          "687:         public boolean isDescendant(String potentialChildRelativePath) throws IOException {",
          "688:             if (new File(potentialChildRelativePath).isAbsolute()) {",
          "689:                 throw new IllegalArgumentException(\"Only a relative path is supported, the given path is absolute: \" + potentialChildRelativePath);",
          "690:             }",
          "692:             String relativePath = computeRelativePathToRoot();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "790:             if (potentialChildRelativePath.equals(\"\") && cacheDescendant) {",
          "791:                 return true;",
          "792:             }",
          "801:             FilePath directChild = this.f.child(potentialChildRelativePath);",
          "802:             if (Objects.equals(directChild.getParent(), this.f)) {",
          "803:                 try {",
          "804:                     boolean isDirectDescendant = this.f.isDescendant(potentialChildRelativePath);",
          "805:                     if (isDirectDescendant) {",
          "806:                         return true;",
          "807:                     }",
          "810:                 }",
          "811:                 catch (InterruptedException e) {",
          "812:                     return false;",
          "813:                 }",
          "814:             }",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "714:                 current = current.getParent();",
          "715:             }",
          "718:         }",
          "719:     }",
          "720:     private static final class Scanner extends MasterToSlaveFileCallable<List<String>> {",
          "",
          "[Removed Lines]",
          "717:             return String.join(File.separator, relativePath) + File.separator;",
          "",
          "[Added Lines]",
          "841:             return joinWithForwardSlashes(relativePath);",
          "",
          "---------------"
        ],
        "core/src/test/java/hudson/FilePathSEC904Test.java||core/src/test/java/hudson/FilePathSEC904Test.java": [
          "File: core/src/test/java/hudson/FilePathSEC904Test.java -> core/src/test/java/hudson/FilePathSEC904Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: import java.nio.charset.StandardCharsets;",
          "34: import java.util.concurrent.TimeUnit;",
          "36: import static org.junit.Assert.assertFalse;",
          "37: import static org.junit.Assert.assertTrue;",
          "38: import static org.junit.Assume.assumeTrue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "36: import static org.hamcrest.CoreMatchers.is;",
          "38: import static org.junit.Assert.assertThat;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "221:         p.waitFor(2, TimeUnit.SECONDS);",
          "222:     }",
          "225:     @Issue(\"SECURITY-904\")",
          "226:     public void isDescendant_throwIfParentDoesNotExist_symlink() throws Exception {",
          "227:         FilePath rootFolder = new FilePath(temp.newFolder(\"root\"));",
          "",
          "[Removed Lines]",
          "224:     @Test(expected = IllegalArgumentException.class)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "230:         FilePath linkToNonexistent = aFolder.child(\"linkToNonexistent\");",
          "231:         linkToNonexistent.symlinkTo(\"__nonexistent__\", null);",
          "234:     }",
          "237:     @Issue(\"SECURITY-904\")",
          "238:     public void isDescendant_throwIfParentDoesNotExist_directNonexistent() throws Exception {",
          "239:         FilePath rootFolder = new FilePath(temp.newFolder(\"root\"));",
          "240:         FilePath nonexistent = rootFolder.child(\"nonexistent\");",
          "242:     }",
          "244:     @Test(expected = IllegalArgumentException.class)",
          "",
          "[Removed Lines]",
          "233:         linkToNonexistent.isDescendant(\".\");",
          "236:     @Test(expected = IllegalArgumentException.class)",
          "241:         nonexistent.isDescendant(\".\");",
          "",
          "[Added Lines]",
          "234:         assertThat(linkToNonexistent.isDescendant(\".\"), is(false));",
          "241:         assertThat(nonexistent.isDescendant(\".\"), is(false));",
          "",
          "---------------"
        ],
        "core/src/test/java/jenkins/util/VirtualFileSEC904Test.java||core/src/test/java/jenkins/util/VirtualFileSEC904Test.java": [
          "File: core/src/test/java/jenkins/util/VirtualFileSEC904Test.java -> core/src/test/java/jenkins/util/VirtualFileSEC904Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "27: import hudson.FilePath;",
          "28: import hudson.model.TaskListener;",
          "29: import org.apache.commons.io.FileUtils;",
          "30: import org.junit.Rule;",
          "31: import org.junit.Test;",
          "33: import org.junit.rules.TemporaryFolder;",
          "34: import org.jvnet.hudson.test.Issue;",
          "36: import java.io.File;",
          "38: import static org.junit.Assert.assertFalse;",
          "39: import static org.junit.Assert.assertTrue;",
          "40: import static org.junit.Assert.fail;",
          "",
          "[Removed Lines]",
          "32: import org.junit.rules.ExpectedException;",
          "",
          "[Added Lines]",
          "30: import org.hamcrest.Description;",
          "31: import org.hamcrest.TypeSafeMatcher;",
          "39: import static org.hamcrest.Matchers.contains;",
          "40: import static org.hamcrest.Matchers.containsInAnyOrder;",
          "41: import static org.hamcrest.Matchers.hasSize;",
          "43: import static org.junit.Assert.assertThat;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "82:         File _a = new File(b, \"_a\");",
          "83:         new FilePath(_a).symlinkTo(a.getAbsolutePath(), TaskListener.NULL);",
          "85:         File _b = new File(a, \"_b\");",
          "86:         new FilePath(_b).symlinkTo(b.getAbsolutePath(), TaskListener.NULL);",
          "87:         File _b2 = new File(aaa, \"_b2\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "91:         File _aatxt = new File(b, \"_aatxt\");",
          "92:         new FilePath(_aatxt).symlinkTo(aaTxt.getAbsolutePath(), TaskListener.NULL);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "177:         assertTrue(virtualRoot.isDescendant(\"_b/_a/aa/../ab/ab.txt\"));",
          "178:         assertTrue(virtualRoot.isDescendant(\"_b/_a/aa/aa.txt\"));",
          "179:     }",
          "180: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "190:     @Test",
          "191:     @Issue(\"JENKINS-55050\")",
          "192:     public void forFile_listOnlyDescendants_withoutIllegal() throws Exception {",
          "193:         this.prepareFileStructureForIsDescendant();",
          "195:         File root = tmp.getRoot();",
          "196:         File a = new File(root, \"a\");",
          "197:         File b = new File(root, \"b\");",
          "198:         VirtualFile virtualRoot = VirtualFile.forFile(root);",
          "199:         VirtualFile virtualFromA = VirtualFile.forFile(a);",
          "200:         VirtualFile virtualFromB = VirtualFile.forFile(b);",
          "202:         checkCommonAssertionForList(virtualRoot, virtualFromA, virtualFromB);",
          "203:     }",
          "205:     @Test",
          "206:     @Issue(\"SECURITY-904\")",
          "207:     public void forFilePath_listOnlyDescendants_withoutIllegal() throws Exception {",
          "208:         this.prepareFileStructureForIsDescendant();",
          "210:         File root = tmp.getRoot();",
          "211:         File a = new File(root, \"a\");",
          "212:         File b = new File(root, \"b\");",
          "213:         VirtualFile virtualRoot = VirtualFile.forFilePath(new FilePath(root));",
          "214:         VirtualFile virtualFromA = VirtualFile.forFilePath(new FilePath(a));",
          "215:         VirtualFile virtualFromB = VirtualFile.forFilePath(new FilePath(b));",
          "217:         checkCommonAssertionForList(virtualRoot, virtualFromA, virtualFromB);",
          "218:     }",
          "220:     private void checkCommonAssertionForList(VirtualFile virtualRoot, VirtualFile virtualFromA, VirtualFile virtualFromB) throws Exception {",
          "222:         assertThat(virtualFromA.listOnlyDescendants(), containsInAnyOrder(",
          "223:                 VFMatcher.hasName(\"aa\"),",
          "224:                 VFMatcher.hasName(\"ab\")",
          "225:         ));",
          "228:         assertThat(virtualFromB.listOnlyDescendants(), contains(",
          "229:                 VFMatcher.hasName(\"ba\")",
          "230:         ));",
          "232:         assertThat(virtualFromA.child(\"_b\").listOnlyDescendants(), hasSize(0));",
          "234:         assertThat(virtualFromA.child(\"aa\").listOnlyDescendants(), containsInAnyOrder(",
          "235:                 VFMatcher.hasName(\"aaa\"),",
          "236:                 VFMatcher.hasName(\"aa.txt\")",
          "237:         ));",
          "240:         assertThat(virtualFromA.child(\"aa\").child(\"aaa\").listOnlyDescendants(), hasSize(0));",
          "243:         assertThat(virtualRoot.child(\"a\").listOnlyDescendants(), containsInAnyOrder(",
          "244:                 VFMatcher.hasName(\"aa\"),",
          "245:                 VFMatcher.hasName(\"ab\"),",
          "246:                 VFMatcher.hasName(\"_b\")",
          "247:         ));",
          "249:         assertThat(virtualRoot.child(\"a\").child(\"_b\").listOnlyDescendants(), containsInAnyOrder(",
          "250:                 VFMatcher.hasName(\"_a\"),",
          "251:                 VFMatcher.hasName(\"_aatxt\"),",
          "252:                 VFMatcher.hasName(\"ba\")",
          "253:         ));",
          "255:         assertThat(virtualRoot.child(\"a\").child(\"_b\").child(\"_a\").listOnlyDescendants(), containsInAnyOrder(",
          "256:                 VFMatcher.hasName(\"aa\"),",
          "257:                 VFMatcher.hasName(\"ab\"),",
          "258:                 VFMatcher.hasName(\"_b\")",
          "259:         ));",
          "260:     }",
          "262:     private abstract static class VFMatcher extends TypeSafeMatcher<VirtualFile> {",
          "263:         private final String description;",
          "265:         private VFMatcher(String description) {",
          "266:             this.description = description;",
          "267:         }",
          "269:         public void describeTo(Description description) {",
          "270:             description.appendText(this.description);",
          "271:         }",
          "273:         public static VFMatcher hasName(String expectedName) {",
          "274:             return new VFMatcher(\"Has name: \" + expectedName) {",
          "275:                 protected boolean matchesSafely(VirtualFile vf) {",
          "276:                     return expectedName.equals(vf.getName());",
          "277:                 }",
          "278:             };",
          "279:         }",
          "280:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5562b2fec6428b730a7b88ad6390a7ed741ba792",
      "candidate_info": {
        "commit_hash": "5562b2fec6428b730a7b88ad6390a7ed741ba792",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/5562b2fec6428b730a7b88ad6390a7ed741ba792",
        "files": [
          "core/src/main/java/hudson/FilePath.java",
          "core/src/main/java/jenkins/util/VirtualFile.java"
        ],
        "message": "[JENKINS-56114] Correct behavior for Windows Server 2016 with Docker (#3914)\n\n* [JENKINS-56114] Correct behavior for Windows Server 2016 with Docker\n- also adjust the symlink escape hatch\n\n* Correct missing space + retrigger build\n\n* Improve performance with a check on the logger level\n\n* Run the specific code only under Windows\n\n* Rename the method as it's used only for Windows",
        "before_after_code_files": [
          "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java",
          "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java",
            "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java",
            "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/FilePath.java||core/src/main/java/hudson/FilePath.java": [
          "File: core/src/main/java/hudson/FilePath.java -> core/src/main/java/hudson/FilePath.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "132: import org.jenkinsci.remoting.RoleSensitive;",
          "133: import org.kohsuke.accmod.Restricted;",
          "134: import org.kohsuke.accmod.restrictions.NoExternalUse;",
          "135: import org.kohsuke.stapler.Stapler;",
          "137: import static hudson.FilePath.TarCompression.GZIP;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135: import org.kohsuke.stapler.Function;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3262:             Path parentAbsolutePath = Util.fileToPath(parentFile.getAbsoluteFile());",
          "3263:             Path parentRealPath;",
          "3264:             try {",
          "3266:             }",
          "3268:                 return false;",
          "3269:             }",
          "",
          "[Removed Lines]",
          "3265:                 parentRealPath = parentAbsolutePath.toRealPath();",
          "3267:             catch(NoSuchFileException e) {",
          "",
          "[Added Lines]",
          "3266:                 if (Functions.isWindows()) {",
          "3267:                     parentRealPath = this.windowsToRealPath(parentAbsolutePath);",
          "3268:                 } else {",
          "3269:                     parentRealPath = parentAbsolutePath.toRealPath();",
          "3270:                 }",
          "3272:             catch (NoSuchFileException e) {",
          "3273:                 LOGGER.log(Level.FINE, String.format(\"Cannot find the real path to the parentFile: %s\", parentAbsolutePath), e);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3296:                 try{",
          "3297:                     Path child = currentFileAbsolutePath.toRealPath();",
          "3298:                     if (!child.startsWith(parentRealPath)) {",
          "3299:                         return false;",
          "3300:                     }",
          "3301:                 } catch (NoSuchFileException e) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3305:                         LOGGER.log(Level.FINE, \"Child [{0}] does not start with parent [{1}] => not descendant\", new Object[]{ child, parentRealPath });",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3322:             }",
          "3323:             return current;",
          "3324:         }",
          "3325:     }",
          "3327:     private static final SoloFilePathFilter UNRESTRICTED = SoloFilePathFilter.wrap(FilePathFilter.UNRESTRICTED);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3333:         private @Nonnull Path windowsToRealPath(@Nonnull Path path) throws IOException {",
          "3334:             try {",
          "3335:                 return path.toRealPath();",
          "3336:             }",
          "3337:             catch (IOException e) {",
          "3338:                 if (LOGGER.isLoggable(Level.FINE)) {",
          "3339:                     LOGGER.log(Level.FINE, String.format(\"relaxedToRealPath cannot use the regular toRealPath on %s, trying with toRealPath(LinkOption.NOFOLLOW_LINKS)\", path), e);",
          "3340:                 }",
          "3341:             }",
          "3345:             return path.toRealPath(LinkOption.NOFOLLOW_LINKS);",
          "3346:         }",
          "",
          "---------------"
        ],
        "core/src/main/java/jenkins/util/VirtualFile.java||core/src/main/java/jenkins/util/VirtualFile.java": [
          "File: core/src/main/java/jenkins/util/VirtualFile.java -> core/src/main/java/jenkins/util/VirtualFile.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:         private boolean isIllegalSymlink() {",
          "546:             try {",
          "548:             } catch (IOException x) {",
          "549:                 Logger.getLogger(VirtualFile.class.getName()).log(Level.FINE, \"could not determine symlink status of \" + f, x);",
          "550:             } catch (InvalidPathException x2) {",
          "",
          "[Removed Lines]",
          "547:                 return !this.isDescendant(\"\");",
          "",
          "[Added Lines]",
          "547:                 String myPath = f.toPath().toRealPath().toString();",
          "548:                 String rootPath = root.toPath().toRealPath().toString();",
          "549:                 if (!myPath.equals(rootPath) && !myPath.startsWith(rootPath + File.separatorChar)) {",
          "550:                     return true;",
          "551:                 }",
          "",
          "---------------"
        ]
      }
    }
  ]
}