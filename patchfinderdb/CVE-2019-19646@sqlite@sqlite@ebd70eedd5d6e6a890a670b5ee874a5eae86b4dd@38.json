{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "17df761a84c39af3ff7de311b872cfce59b7fb37",
      "candidate_info": {
        "commit_hash": "17df761a84c39af3ff7de311b872cfce59b7fb37",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/17df761a84c39af3ff7de311b872cfce59b7fb37",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/lemon.c"
        ],
        "message": "Fix harmless compiler warning in lemon.\n\nFossilOrigin-Name: 2da0eea02d128c37f2fbe764227ac526d3e993284516544adc0a216a035c5676",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e95138f5f4febde598f39e031d6e4f4d5ad0adbd8dcdd34fd0baaa78ab393417",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "48: #define MAXRHS 1000",
          "49: #endif",
          "51: static int showPrecedenceConflict = 0;",
          "52: static char *msort(char*,char**,int(*)(const char*,const char*));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "51: extern void memory_error();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4919:   char *s;",
          "4920:   s = (char*)calloc( size, 1);",
          "4921:   if( s==0 ){",
          "4923:     memory_error();",
          "4924:   }",
          "4925:   return s;",
          "",
          "[Removed Lines]",
          "4922:     extern void memory_error();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "61ad5513e05469c93546a3324f53e8ff0efa3b18",
      "candidate_info": {
        "commit_hash": "61ad5513e05469c93546a3324f53e8ff0efa3b18",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/61ad5513e05469c93546a3324f53e8ff0efa3b18",
        "files": [
          "Makefile.msc",
          "autoconf/Makefile.msc",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Support building the Tcl bindings DLL using MSVC.\n\nFossilOrigin-Name: b2011c13173114505705d2ff2ba6f476697d51aca0bddd585a9e5a639dca41e2",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "autoconf/Makefile.msc||autoconf/Makefile.msc",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "320: SQLITETCLDECLSH = sqlite_tclDecls.h",
          "321: !ENDIF",
          "323: # These are the additional targets that the targets that integrate with the",
          "324: # Tcl library should depend on when compiling, etc.",
          "325: #",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323: # This is the name to use for the dynamic link library (DLL) containing the",
          "324: # Tcl bindings for SQLite.",
          "325: #",
          "326: !IFNDEF SQLITE3TCLDLL",
          "327: SQLITE3TCLDLL = tclsqlite3.dll",
          "328: !ENDIF",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "495: # will run on the platform that is doing the build.",
          "496: #",
          "497: !IF $(USE_FULLWARN)!=0",
          "499: !ELSE",
          "501: !ENDIF",
          "503: # Check if assembly code listings should be generated for the source",
          "",
          "[Removed Lines]",
          "498: BCC = $(NCC) -nologo -W4 $(CCOPTS) $(BCCOPTS)",
          "500: BCC = $(NCC) -nologo -W3 $(CCOPTS) $(BCCOPTS)",
          "",
          "[Added Lines]",
          "505: BCC = $(NCC) -nologo -W4 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)",
          "507: BCC = $(NCC) -nologo -W3 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "853: # prior to running nmake in order to match the actual installed location and",
          "854: # version on this machine.",
          "855: #",
          "856: !IFNDEF TCLDIR",
          "857: TCLDIR = $(TOP)\\compat\\tcl",
          "858: !ENDIF",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "863: !IFNDEF TCLVERSION",
          "864: TCLVERSION = 86",
          "865: !ENDIF",
          "867: !IFNDEF TCLSUFFIX",
          "868: TCLSUFFIX =",
          "869: !ENDIF",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "866: !ENDIF",
          "868: !IFNDEF LIBTCL",
          "870: !ENDIF",
          "872: !IFNDEF LIBTCLSTUB",
          "874: !ENDIF",
          "876: !IFNDEF LIBTCLPATH",
          "",
          "[Removed Lines]",
          "869: LIBTCL = tcl86.lib",
          "873: LIBTCLSTUB = tclstub86.lib",
          "",
          "[Added Lines]",
          "884: LIBTCL = tcl$(TCLVERSION)$(TCLSUFFIX).lib",
          "888: LIBTCLSTUB = tclstub$(TCLVERSION)$(TCLSUFFIX).lib",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1063: # Command line prefixes for compiling code, compiling resources,",
          "1064: # linking, etc.",
          "1065: #",
          "1067: LTRCOMPILE = $(RCC) -r",
          "1068: LTLIB = lib.exe",
          "1069: LTLINK = $(TCC) -Fe$@",
          "",
          "[Removed Lines]",
          "1066: LTCOMPILE = $(TCC) -Fo$@",
          "",
          "[Added Lines]",
          "1081: LTCOMPILE = $(TCC) -Fo$@ -Fd$*.pdb",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1081: !IFDEF PLATFORM",
          "1082: LTLINKOPTS = /NOLOGO /MACHINE:$(PLATFORM)",
          "1083: LTLIBOPTS = /NOLOGO /MACHINE:$(PLATFORM)",
          "1084: !ELSE",
          "1085: LTLINKOPTS = /NOLOGO",
          "1086: LTLIBOPTS = /NOLOGO",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1099: !ELSEIF \"$(VISUALSTUDIOVERSION)\"==\"12.0\" || \\",
          "1100:         \"$(VISUALSTUDIOVERSION)\"==\"14.0\" || \\",
          "1101:         \"$(VISUALSTUDIOVERSION)\"==\"15.0\"",
          "1102: LTLINKOPTS = /NOLOGO /MACHINE:x86",
          "1103: LTLIBOPTS = /NOLOGO /MACHINE:x86",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1665: # Extra targets for the \"all\" target that require Tcl.",
          "1666: #",
          "1667: !IF $(NO_TCL)==0",
          "1669: !ELSE",
          "1670: ALL_TCL_TARGETS =",
          "1671: !ENDIF",
          "",
          "[Removed Lines]",
          "1668: ALL_TCL_TARGETS = libtclsqlite3.lib",
          "",
          "[Added Lines]",
          "1688: ALL_TCL_TARGETS = $(SQLITE3TCLDLL)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1697:  $(LTLIB) $(LTLIBOPTS) /OUT:$@ $(LIBOBJ) $(TLIBS)",
          "1699: libtclsqlite3.lib: tclsqlite.lo libsqlite3.lib",
          "1701: # <</mark>>",
          "1703: $(SQLITE3DLL): $(LIBOBJ) $(LIBRESOBJS) $(CORE_LINK_DEP)",
          "",
          "[Removed Lines]",
          "1700:  $(LTLIB) $(LTLIBOPTS) $(LTLIBPATHS) /OUT:$@ tclsqlite.lo libsqlite3.lib $(LIBTCLSTUB) $(TLIBS)",
          "",
          "[Added Lines]",
          "1720:  $(LTLIB) $(LTLIBOPTS) $(TCLLIBPATHS) $(LTLIBPATHS) /OUT:$@ tclsqlite.lo libsqlite3.lib $(LIBTCLSTUB) $(TLIBS)",
          "1722: tclsqlite3.def: tclsqlite.lo",
          "1723:  echo EXPORTS > tclsqlite3.def",
          "1724:  dumpbin /all tclsqlite.lo \\",
          "1725:   | $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl include \"^\\s+/EXPORT:_?((?:Sqlite3|Tclsqlite3)_[^@]*)(?:@\\d+)?$$\" \\1 \\",
          "1726:   | sort >> tclsqlite3.def",
          "1728: pkgIndex.tcl: $(TOP)\\VERSION",
          "1729:  for /F %%V in ('type \"$(TOP)\\VERSION\"') do ( \\",
          "1730:   echo package ifneeded sqlite3 @version@ [list load [file join $$dir $(SQLITE3TCLDLL)] sqlite3] \\",
          "1731:    | $(TCLSH_CMD) $(TOP)\\tool\\replace.tcl exact @version@ %%V > pkgIndex.tcl \\",
          "1732:  )",
          "1734: $(SQLITE3TCLDLL): libtclsqlite3.lib $(LIBRESOBJS) tclsqlite3.def pkgIndex.tcl",
          "1735:  $(LD) $(LDFLAGS) $(LTLINKOPTS) $(LTLIBPATHS) /DLL /DEF:tclsqlite3.def /OUT:$@ libtclsqlite3.lib $(LIBRESOBJS) $(LTLIBS) $(TLIBS)",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1837: #",
          "1838: !IF $(USE_RC)!=0",
          "1839: # <<block1>>",
          "1841:  echo #ifndef SQLITE_RESOURCE_VERSION > sqlite3rc.h",
          "1842:  for /F %%V in ('type \"$(TOP)\\VERSION\"') do ( \\",
          "1843:   echo #define SQLITE_RESOURCE_VERSION %%V \\",
          "",
          "[Removed Lines]",
          "1840: $(LIBRESOBJS): $(TOP)\\src\\sqlite3.rc $(SQLITE3H)",
          "",
          "[Added Lines]",
          "1875: $(LIBRESOBJS): $(TOP)\\src\\sqlite3.rc $(SQLITE3H) $(TOP)\\VERSION",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2514:  del /Q *.bsc *.def *.cod *.da *.bb *.bbg *.vc gmon.out 2>NUL",
          "2515:  del /Q $(SQLITE3EXE) $(SQLITE3DLL) Replace.exe 2>NUL",
          "2516: # <<mark>>",
          "2517:  del /Q opcodes.c opcodes.h 2>NUL",
          "2518:  del /Q lemon.* lempar.c parse.* 2>NUL",
          "2519:  del /Q mksourceid.* mkkeywordhash.* keywordhash.h 2>NUL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2552:  del /Q $(SQLITE3TCLDLL) pkgIndex.tcl 2>NUL",
          "",
          "---------------"
        ],
        "autoconf/Makefile.msc||autoconf/Makefile.msc": [
          "File: autoconf/Makefile.msc -> autoconf/Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "433: # will run on the platform that is doing the build.",
          "434: #",
          "435: !IF $(USE_FULLWARN)!=0",
          "437: !ELSE",
          "439: !ENDIF",
          "441: # Check if assembly code listings should be generated for the source",
          "",
          "[Removed Lines]",
          "436: BCC = $(NCC) -nologo -W4 $(CCOPTS) $(BCCOPTS)",
          "438: BCC = $(NCC) -nologo -W3 $(CCOPTS) $(BCCOPTS)",
          "",
          "[Added Lines]",
          "436: BCC = $(NCC) -nologo -W4 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)",
          "438: BCC = $(NCC) -nologo -W3 -Fd$*.pdb $(CCOPTS) $(BCCOPTS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "808: # Command line prefixes for compiling code, compiling resources,",
          "809: # linking, etc.",
          "810: #",
          "812: LTRCOMPILE = $(RCC) -r",
          "813: LTLIB = lib.exe",
          "814: LTLINK = $(TCC) -Fe$@",
          "",
          "[Removed Lines]",
          "811: LTCOMPILE = $(TCC) -Fo$@",
          "",
          "[Added Lines]",
          "811: LTCOMPILE = $(TCC) -Fo$@ -Fd$*.pdb",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "826: !IFDEF PLATFORM",
          "827: LTLINKOPTS = /NOLOGO /MACHINE:$(PLATFORM)",
          "828: LTLIBOPTS = /NOLOGO /MACHINE:$(PLATFORM)",
          "829: !ELSE",
          "830: LTLINKOPTS = /NOLOGO",
          "831: LTLIBOPTS = /NOLOGO",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "829: !ELSEIF \"$(VISUALSTUDIOVERSION)\"==\"12.0\" || \\",
          "830:         \"$(VISUALSTUDIOVERSION)\"==\"14.0\" || \\",
          "831:         \"$(VISUALSTUDIOVERSION)\"==\"15.0\"",
          "832: LTLINKOPTS = /NOLOGO /MACHINE:x86",
          "833: LTLIBOPTS = /NOLOGO /MACHINE:x86",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5be64ea8e33f632f9c337feac9b0663d8e6e59fc9a71e5d832d9fd905c06458e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0c8f40389ea950077ec8e265b4d9cb7a15e2bc58",
      "candidate_info": {
        "commit_hash": "0c8f40389ea950077ec8e265b4d9cb7a15e2bc58",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0c8f40389ea950077ec8e265b4d9cb7a15e2bc58",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/main.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/test1.c",
          "src/vdbeapi.c",
          "test/intreal.test"
        ],
        "message": "Add the SQLITE_TESTCTRL_RESULT_INTREAL test-control and use it to create the intreal() SQL function in testfixture.  Write a few simple tests to prove this all works.  TH3 will hold most of the INTREAL tests, probably.\n\nFossilOrigin-Name: c9838731325e0ca73bd8784c10c74ae043fed7861e6de269fd90e29fa4a19955",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/main.c||src/main.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/test1.c||src/test1.c",
          "src/vdbeapi.c||src/vdbeapi.c",
          "test/intreal.test||test/intreal.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f73a7de7a53f6aa6517221550a9c9882893206edfd7433e80e5fc0f441db9fc4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4104:       break;",
          "4105:     }",
          "4107:   }",
          "4108:   va_end(ap);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4118:     case SQLITE_TESTCTRL_RESULT_INTREAL: {",
          "4119:       sqlite3_context *pCtx = va_arg(ap, sqlite3_context*);",
          "4120:       sqlite3ResultIntReal(pCtx);",
          "4121:       break;",
          "4122:     }",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "7319: #define SQLITE_TESTCTRL_SORTER_MMAP             24",
          "7320: #define SQLITE_TESTCTRL_IMPOSTER                25",
          "7321: #define SQLITE_TESTCTRL_PARSER_COVERAGE         26",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7322: #define SQLITE_TESTCTRL_RESULT_INTREAL          27",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4272:                         void(*)(void*));",
          "4273: void sqlite3ValueSetNull(sqlite3_value*);",
          "4274: void sqlite3ValueFree(sqlite3_value*);",
          "4275: sqlite3_value *sqlite3ValueNew(sqlite3 *);",
          "4276: #ifndef SQLITE_OMIT_UTF16",
          "4277: char *sqlite3Utf16to8(sqlite3 *, const void*, int, u8);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4275: #ifndef SQLITE_UNTESTABLE",
          "4276: void sqlite3ResultIntReal(sqlite3_context*);",
          "4277: #endif",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "998:   sqlite3_result_int(context, cnt++);",
          "999: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1005: static void intrealFunction(",
          "1006:   sqlite3_context *context,",
          "1007:   int argc,",
          "1008:   sqlite3_value **argv",
          "1009: ){",
          "1010:   sqlite3_int64 v = sqlite3_value_int64(argv[0]);",
          "1011:   sqlite3_result_int64(context, v);",
          "1012:   sqlite3_test_control(SQLITE_TESTCTRL_RESULT_INTREAL, context);",
          "1013: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1062:           0, nondeterministicFunction, 0, 0);",
          "1063:   }",
          "1065: #ifndef SQLITE_OMIT_UTF16",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1082:   if( rc==SQLITE_OK ){",
          "1083:     rc = sqlite3_create_function(db, \"intreal\", 1, SQLITE_UTF8,",
          "1084:           0, intrealFunction, 0, 0);",
          "1085:   }",
          "",
          "---------------"
        ],
        "src/vdbeapi.c||src/vdbeapi.c": [
          "File: src/vdbeapi.c -> src/vdbeapi.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "563:   sqlite3OomFault(pCtx->pOut->db);",
          "564: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "566: #ifndef SQLITE_UNTESTABLE",
          "571: void sqlite3ResultIntReal(sqlite3_context *pCtx){",
          "572:   assert( sqlite3_mutex_held(pCtx->pOut->db->mutex) );",
          "573:   if( pCtx->pOut->flags & MEM_Int ){",
          "574:     pCtx->pOut->flags &= ~MEM_Int;",
          "575:     pCtx->pOut->flags |= MEM_IntReal;",
          "576:   }",
          "577: }",
          "578: #endif",
          "",
          "---------------"
        ],
        "test/intreal.test||test/intreal.test": [
          "File: test/intreal.test -> test/intreal.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-05-03",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # Tests to exercise the MEM_IntReal representation of Mem objects.",
          "12: #",
          "13: set testdir [file dirname $argv0]",
          "14: source $testdir/tester.tcl",
          "15: set ::testprefix intreal",
          "17: sqlite3_create_function db",
          "18: do_execsql_test 100 {",
          "19:   SELECT intreal(5);",
          "20: } {5.0}",
          "21: do_execsql_test 110 {",
          "22:   SELECT intreal(5)=5, 6=intreal(6);",
          "23: } {1 1}",
          "24: do_execsql_test 120 {",
          "25:   SELECT intreal(7)=7.0, 8.0=intreal(8);",
          "26: } {1 1}",
          "27: do_execsql_test 130 {",
          "28:   SELECT typeof(intreal(9));",
          "29: } {real}",
          "30: do_execsql_test 140 {",
          "31:   SELECT 'a'||intreal(11)||'z';",
          "32: } {a11.0z}",
          "34: do_execsql_test 150 {",
          "35:   SELECT max(1.0,intreal(2),3.0), max(1,intreal(2),3);",
          "36: } {3.0 3}",
          "37: do_execsql_test 160 {",
          "38:   SELECT max(1.0,intreal(4),3.0), max(1,intreal(4),3);",
          "39: } {4.0 4.0}",
          "40: do_execsql_test 170 {",
          "41:   SELECT max(1.0,intreal(2),intreal(3),4.0),",
          "42:          max(1,intreal(2),intreal(3),4);",
          "43: } {4.0 4}",
          "44: do_execsql_test 180 {",
          "45:   SELECT max(1.0,intreal(5),intreal(3),4.0),",
          "46:          max(1,intreal(5),intreal(3),4);",
          "47: } {5.0 5.0}",
          "52: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbda9c7ac79f8751e18fba943e30fd67f8c68b02",
      "candidate_info": {
        "commit_hash": "cbda9c7ac79f8751e18fba943e30fd67f8c68b02",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cbda9c7ac79f8751e18fba943e30fd67f8c68b02",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/insert.c"
        ],
        "message": "Performance optimization on sqlite3GenerateConstraintChecks() - bypass the loop that checks each column for NOT NULL constraints if it is known in advance that the table has no NOT NULL constraints.\n\nFossilOrigin-Name: e3c3f4d7872f431a95627d52553101388c1e39458cc7e7f93fc81255f49a89a5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/insert.c||src/insert.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8c0042bd5ccd83f8794d19cbb1ec7564584f0dce54bfebc0ada00b836aca065f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1836:         pTab->aCol[i].notNull = OE_Abort;",
          "1837:       }",
          "1838:     }",
          "1839:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1839:     pTab->tabFlags |= TF_HasNotNull;",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1385:         onError = OE_Abort;",
          "1388:       }",
          "1403:       }",
          "1409:       }",
          "1410:     }",
          "1411:   }",
          "1415: #ifndef SQLITE_OMIT_CHECK",
          "",
          "[Removed Lines]",
          "1355:   for(i=0; i<nCol; i++){",
          "1356:     if( i==pTab->iPKey ){",
          "1358:     }",
          "1359:     if( aiChng && aiChng[i]<0 ){",
          "1361:       continue;",
          "1362:     }",
          "1363:     onError = pTab->aCol[i].notNull;",
          "1365:     if( overrideError!=OE_Default ){",
          "1366:       onError = overrideError;",
          "1367:     }else if( onError==OE_Default ){",
          "1368:       onError = OE_Abort;",
          "1369:     }",
          "1370:     if( onError==OE_Replace && pTab->aCol[i].pDflt==0 ){",
          "1371:       onError = OE_Abort;",
          "1372:     }",
          "1373:     assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1374:         || onError==OE_Ignore || onError==OE_Replace );",
          "1375:     addr1 = 0;",
          "1376:     switch( onError ){",
          "1377:       case OE_Replace: {",
          "1378:         assert( onError==OE_Replace );",
          "1379:         addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1380:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1381:           VdbeCoverage(v);",
          "1382:         sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1383:         sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1384:           VdbeCoverage(v);",
          "1389:       case OE_Abort:",
          "1390:         sqlite3MayAbort(pParse);",
          "1392:       case OE_Rollback:",
          "1393:       case OE_Fail: {",
          "1394:         char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1395:                                     pTab->aCol[i].zName);",
          "1396:         sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL, onError,",
          "1397:                           regNewData+1+i);",
          "1398:         sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1399:         sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1400:         VdbeCoverage(v);",
          "1401:         if( addr1 ) sqlite3VdbeResolveLabel(v, addr1);",
          "1402:         break;",
          "1404:       default: {",
          "1405:         assert( onError==OE_Ignore );",
          "1406:         sqlite3VdbeAddOp2(v, OP_IsNull, regNewData+1+i, ignoreDest);",
          "1407:         VdbeCoverage(v);",
          "1408:         break;",
          "",
          "[Added Lines]",
          "1355:   if( pTab->tabFlags & TF_HasNotNull ){",
          "1356:     for(i=0; i<nCol; i++){",
          "1357:       onError = pTab->aCol[i].notNull;",
          "1359:       assert( pTab->tabFlags & TF_HasNotNull );",
          "1360:       if( i==pTab->iPKey ){",
          "1362:       }",
          "1363:       if( aiChng && aiChng[i]<0 ){",
          "1365:         continue;",
          "1366:       }",
          "1367:       if( overrideError!=OE_Default ){",
          "1368:         onError = overrideError;",
          "1369:       }else if( onError==OE_Default ){",
          "1372:       if( onError==OE_Replace && pTab->aCol[i].pDflt==0 ){",
          "1373:         onError = OE_Abort;",
          "1375:       assert( onError==OE_Rollback || onError==OE_Abort || onError==OE_Fail",
          "1376:           || onError==OE_Ignore || onError==OE_Replace );",
          "1377:       addr1 = 0;",
          "1378:       switch( onError ){",
          "1379:         case OE_Replace: {",
          "1380:           assert( onError==OE_Replace );",
          "1381:           addr1 = sqlite3VdbeMakeLabel(pParse);",
          "1382:           sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1383:             VdbeCoverage(v);",
          "1384:           sqlite3ExprCode(pParse, pTab->aCol[i].pDflt, regNewData+1+i);",
          "1385:           sqlite3VdbeAddOp2(v, OP_NotNull, regNewData+1+i, addr1);",
          "1386:             VdbeCoverage(v);",
          "1387:           onError = OE_Abort;",
          "1390:         }",
          "1391:         case OE_Abort:",
          "1392:           sqlite3MayAbort(pParse);",
          "1394:         case OE_Rollback:",
          "1395:         case OE_Fail: {",
          "1396:           char *zMsg = sqlite3MPrintf(db, \"%s.%s\", pTab->zName,",
          "1397:                                       pTab->aCol[i].zName);",
          "1398:           sqlite3VdbeAddOp3(v, OP_HaltIfNull, SQLITE_CONSTRAINT_NOTNULL,",
          "1399:                             onError, regNewData+1+i);",
          "1400:           sqlite3VdbeAppendP4(v, zMsg, P4_DYNAMIC);",
          "1401:           sqlite3VdbeChangeP5(v, P5_ConstraintNotNull);",
          "1402:           VdbeCoverage(v);",
          "1403:           if( addr1 ) sqlite3VdbeResolveLabel(v, addr1);",
          "1404:           break;",
          "1405:         }",
          "1406:         default: {",
          "1407:           assert( onError==OE_Ignore );",
          "1408:           sqlite3VdbeAddOp2(v, OP_IsNull, regNewData+1+i, ignoreDest);",
          "1409:           VdbeCoverage(v);",
          "1410:           break;",
          "1411:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "01fd42beef1c16b8998ca8dba0bbc43e97efe9fd",
      "candidate_info": {
        "commit_hash": "01fd42beef1c16b8998ca8dba0bbc43e97efe9fd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/01fd42beef1c16b8998ca8dba0bbc43e97efe9fd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/btree.c"
        ],
        "message": "Trivial performance improvement for balance().\n\nFossilOrigin-Name: c7920f5569022f645ec4dbfce8c228880263785c708c2c0ac065e770c438b1d9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 777fec84a5db968e033883920586ec0afef65578be0c1eb3021fce525111edde",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "8307:   VVA_ONLY( int balance_deeper_called = 0 );",
          "8309:   do {",
          "8311:     MemPage *pPage = pCur->pPage;",
          "8313:     if( NEVER(pPage->nFree<0) && btreeComputeFreeSpace(pPage) ) break;",
          "8315:       if( pPage->nOverflow ){",
          "",
          "[Removed Lines]",
          "8310:     int iPage = pCur->iPage;",
          "8314:     if( iPage==0 ){",
          "",
          "[Added Lines]",
          "8310:     int iPage;",
          "8314:     if( pPage->nOverflow==0 && pPage->nFree<=nMin ){",
          "8315:       break;",
          "8316:     }else if( (iPage = pCur->iPage)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8332:       }else{",
          "8333:         break;",
          "8334:       }",
          "8337:     }else{",
          "8338:       MemPage * const pParent = pCur->apPage[iPage-1];",
          "8339:       int const iIdx = pCur->aiIdx[iPage-1];",
          "",
          "[Removed Lines]",
          "8335:     }else if( pPage->nOverflow==0 && pPage->nFree<=nMin ){",
          "8336:       break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}