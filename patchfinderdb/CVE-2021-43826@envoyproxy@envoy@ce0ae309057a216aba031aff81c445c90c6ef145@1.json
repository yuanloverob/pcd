{
  "cve_id": "CVE-2021-43826",
  "cve_desc": "Envoy is an open source edge and service proxy, designed for cloud-native applications. In affected versions of Envoy a crash occurs when configured for :ref:`upstream tunneling <envoy_v3_api_field_extensions.filters.network.tcp_proxy.v3.TcpProxy.tunneling_config>` and the downstream connection disconnects while the the upstream connection or http/2 stream is still being established. There are no workarounds for this issue. Users are advised to upgrade.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "ce0ae309057a216aba031aff81c445c90c6ef145",
  "patch_info": {
    "commit_hash": "ce0ae309057a216aba031aff81c445c90c6ef145",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/ce0ae309057a216aba031aff81c445c90c6ef145",
    "files": [
      "docs/root/version_history/current.rst",
      "source/common/tcp_proxy/tcp_proxy.cc",
      "source/common/tcp_proxy/tcp_proxy.h",
      "test/integration/tcp_tunneling_integration_test.cc"
    ],
    "message": "CVE-2021-43826\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>",
    "before_after_code_files": [
      "source/common/tcp_proxy/tcp_proxy.cc||source/common/tcp_proxy/tcp_proxy.cc",
      "source/common/tcp_proxy/tcp_proxy.h||source/common/tcp_proxy/tcp_proxy.h",
      "test/integration/tcp_tunneling_integration_test.cc||test/integration/tcp_tunneling_integration_test.cc"
    ]
  },
  "patch_diff": {
    "source/common/tcp_proxy/tcp_proxy.cc||source/common/tcp_proxy/tcp_proxy.cc": [
      "File: source/common/tcp_proxy/tcp_proxy.cc -> source/common/tcp_proxy/tcp_proxy.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "520: }",
      "522: void Filter::onDownstreamEvent(Network::ConnectionEvent event) {",
      "523:   ENVOY_CONN_LOG(trace, \"on downstream event {}, has upstream = {}\", read_callbacks_->connection(),",
      "524:                  static_cast<int>(event), upstream_ == nullptr);",
      "525:   if (upstream_) {",
      "526:     Tcp::ConnectionPool::ConnectionDataPtr conn_data(upstream_->onDownstreamEvent(event));",
      "527:     if (conn_data != nullptr &&",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "523:   if (event == Network::ConnectionEvent::LocalClose ||",
      "524:       event == Network::ConnectionEvent::RemoteClose) {",
      "525:     downstream_closed_ = true;",
      "526:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "570:             Upstream::Outlier::Result::LocalOriginConnectFailed);",
      "571:       }",
      "574:     } else {",
      "575:       if (read_callbacks_->connection().state() == Network::Connection::State::Open) {",
      "576:         read_callbacks_->connection().close(Network::ConnectionCloseType::FlushWrite);",
      "",
      "[Removed Lines]",
      "573:       initializeUpstreamConnection();",
      "",
      "[Added Lines]",
      "579:       if (!downstream_closed_) {",
      "580:         initializeUpstreamConnection();",
      "581:       }",
      "",
      "---------------"
    ],
    "source/common/tcp_proxy/tcp_proxy.h||source/common/tcp_proxy/tcp_proxy.h": [
      "File: source/common/tcp_proxy/tcp_proxy.h -> source/common/tcp_proxy/tcp_proxy.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "401:   Network::Socket::OptionsSharedPtr upstream_options_;",
      "402:   uint32_t connect_attempts_{};",
      "403:   bool connecting_{};",
      "404: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "404:   bool downstream_closed_{};",
      "",
      "---------------"
    ],
    "test/integration/tcp_tunneling_integration_test.cc||test/integration/tcp_tunneling_integration_test.cc": [
      "File: test/integration/tcp_tunneling_integration_test.cc -> test/integration/tcp_tunneling_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "816:   tcp_client_->waitForDisconnect();",
      "817: }",
      "819: TEST_P(TcpTunnelingIntegrationTest, TestIdletimeoutWithLargeOutstandingData) {",
      "820:   enableHalfClose(false);",
      "821:   config_helper_.setBufferLimits(1024, 1024);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "819: TEST_P(TcpTunnelingIntegrationTest, UpstreamConnectingDownstreamDisconnect) {",
      "820:   if (upstreamProtocol() == Http::CodecType::HTTP1) {",
      "821:     return;",
      "822:   }",
      "824: #if defined(WIN32)",
      "830:   return;",
      "831: #endif",
      "833:   config_helper_.addConfigModifier([&](envoy::config::bootstrap::v3::Bootstrap& bootstrap) -> void {",
      "834:     envoy::extensions::filters::network::tcp_proxy::v3::TcpProxy proxy_config;",
      "835:     proxy_config.set_stat_prefix(\"tcp_stats\");",
      "836:     proxy_config.set_cluster(\"cluster_0\");",
      "837:     proxy_config.mutable_tunneling_config()->set_hostname(\"host.com:80\");",
      "841:     proxy_config.mutable_max_connect_attempts()->set_value(2);",
      "843:     auto* listeners = bootstrap.mutable_static_resources()->mutable_listeners();",
      "844:     for (auto& listener : *listeners) {",
      "845:       if (listener.name() != \"tcp_proxy\") {",
      "846:         continue;",
      "847:       }",
      "848:       auto* filter_chain = listener.mutable_filter_chains(0);",
      "849:       auto* filter = filter_chain->mutable_filters(0);",
      "850:       filter->mutable_typed_config()->PackFrom(proxy_config);",
      "854:       envoy::extensions::transport_sockets::tls::v3::DownstreamTlsContext tls_context;",
      "855:       ConfigHelper::initializeTls({}, *tls_context.mutable_common_tls_context());",
      "856:       filter_chain->mutable_transport_socket()->set_name(\"envoy.transport_sockets.tls\");",
      "857:       filter_chain->mutable_transport_socket()->mutable_typed_config()->PackFrom(tls_context);",
      "859:       break;",
      "860:     }",
      "861:   });",
      "863:   enableHalfClose(false);",
      "864:   initialize();",
      "866:   IntegrationTcpClientPtr tcp_client = makeTcpConnection(lookupPort(\"tcp_proxy\"));",
      "870:   ASSERT_TRUE(fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_));",
      "871:   ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request_));",
      "872:   ASSERT_TRUE(upstream_request_->waitForHeadersComplete());",
      "876:   tcp_client->close();",
      "878:   ASSERT_TRUE(upstream_request_->waitForReset());",
      "879:   ASSERT_TRUE(fake_upstream_connection_->close());",
      "880: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "a17cdcdfad24de101e95716b77549ba689824f25",
      "candidate_info": {
        "commit_hash": "a17cdcdfad24de101e95716b77549ba689824f25",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/a17cdcdfad24de101e95716b77549ba689824f25",
        "files": [
          "docs/root/version_history/current.rst",
          "source/common/tcp_proxy/tcp_proxy.cc",
          "source/common/tcp_proxy/tcp_proxy.h",
          "test/integration/tcp_tunneling_integration_test.cc"
        ],
        "message": "[1.19] CVE-2021-43826\n\ntcp_proxy: Fix crash when using upstream tunneling if client disconnects\nwhile connecting to the upstream\n\nSigned-off-by: Yan Avlasov <yavlasov@google.com>",
        "before_after_code_files": [
          "source/common/tcp_proxy/tcp_proxy.cc||source/common/tcp_proxy/tcp_proxy.cc",
          "source/common/tcp_proxy/tcp_proxy.h||source/common/tcp_proxy/tcp_proxy.h",
          "test/integration/tcp_tunneling_integration_test.cc||test/integration/tcp_tunneling_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/common/tcp_proxy/tcp_proxy.cc||source/common/tcp_proxy/tcp_proxy.cc",
            "source/common/tcp_proxy/tcp_proxy.h||source/common/tcp_proxy/tcp_proxy.h",
            "test/integration/tcp_tunneling_integration_test.cc||test/integration/tcp_tunneling_integration_test.cc"
          ],
          "candidate": [
            "source/common/tcp_proxy/tcp_proxy.cc||source/common/tcp_proxy/tcp_proxy.cc",
            "source/common/tcp_proxy/tcp_proxy.h||source/common/tcp_proxy/tcp_proxy.h",
            "test/integration/tcp_tunneling_integration_test.cc||test/integration/tcp_tunneling_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/tcp_proxy/tcp_proxy.cc||source/common/tcp_proxy/tcp_proxy.cc": [
          "File: source/common/tcp_proxy/tcp_proxy.cc -> source/common/tcp_proxy/tcp_proxy.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "589: }",
          "591: void Filter::onDownstreamEvent(Network::ConnectionEvent event) {",
          "592:   if (upstream_) {",
          "593:     Tcp::ConnectionPool::ConnectionDataPtr conn_data(upstream_->onDownstreamEvent(event));",
          "594:     if (conn_data != nullptr &&",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "592:   if (event == Network::ConnectionEvent::LocalClose ||",
          "593:       event == Network::ConnectionEvent::RemoteClose) {",
          "594:     downstream_closed_ = true;",
          "595:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "637:             Upstream::Outlier::Result::LocalOriginConnectFailed);",
          "638:       }",
          "641:     } else {",
          "642:       if (read_callbacks_->connection().state() == Network::Connection::State::Open) {",
          "643:         read_callbacks_->connection().close(Network::ConnectionCloseType::FlushWrite);",
          "",
          "[Removed Lines]",
          "640:       initializeUpstreamConnection();",
          "",
          "[Added Lines]",
          "645:       if (!downstream_closed_) {",
          "646:         initializeUpstreamConnection();",
          "647:       }",
          "",
          "---------------"
        ],
        "source/common/tcp_proxy/tcp_proxy.h||source/common/tcp_proxy/tcp_proxy.h": [
          "File: source/common/tcp_proxy/tcp_proxy.h -> source/common/tcp_proxy/tcp_proxy.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "384:   Network::Socket::OptionsSharedPtr upstream_options_;",
          "385:   uint32_t connect_attempts_{};",
          "386:   bool connecting_{};",
          "387: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "387:   bool downstream_closed_{};",
          "",
          "---------------"
        ],
        "test/integration/tcp_tunneling_integration_test.cc||test/integration/tcp_tunneling_integration_test.cc": [
          "File: test/integration/tcp_tunneling_integration_test.cc -> test/integration/tcp_tunneling_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "664:   tcp_client->waitForDisconnect();",
          "665: }",
          "667: TEST_P(TcpTunnelingIntegrationTest, TestIdletimeoutWithLargeOutstandingData) {",
          "668:   enableHalfClose(false);",
          "669:   config_helper_.setBufferLimits(1024, 1024);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "667: TEST_P(TcpTunnelingIntegrationTest, UpstreamConnectingDownstreamDisconnect) {",
          "668:   if (upstreamProtocol() == Http::CodecType::HTTP1) {",
          "669:     return;",
          "670:   }",
          "672: #if defined(WIN32)",
          "678:   return;",
          "679: #endif",
          "681:   config_helper_.addConfigModifier([&](envoy::config::bootstrap::v3::Bootstrap& bootstrap) -> void {",
          "682:     envoy::extensions::filters::network::tcp_proxy::v3::TcpProxy proxy_config;",
          "683:     proxy_config.set_stat_prefix(\"tcp_stats\");",
          "684:     proxy_config.set_cluster(\"cluster_0\");",
          "685:     proxy_config.mutable_tunneling_config()->set_hostname(\"host.com:80\");",
          "689:     proxy_config.mutable_max_connect_attempts()->set_value(2);",
          "691:     auto* listeners = bootstrap.mutable_static_resources()->mutable_listeners();",
          "692:     for (auto& listener : *listeners) {",
          "693:       if (listener.name() != \"tcp_proxy\") {",
          "694:         continue;",
          "695:       }",
          "696:       auto* filter_chain = listener.mutable_filter_chains(0);",
          "697:       auto* filter = filter_chain->mutable_filters(0);",
          "698:       filter->mutable_typed_config()->PackFrom(proxy_config);",
          "702:       envoy::extensions::transport_sockets::tls::v3::DownstreamTlsContext tls_context;",
          "703:       ConfigHelper::initializeTls({}, *tls_context.mutable_common_tls_context());",
          "704:       filter_chain->mutable_transport_socket()->set_name(\"envoy.transport_sockets.tls\");",
          "705:       filter_chain->mutable_transport_socket()->mutable_typed_config()->PackFrom(tls_context);",
          "707:       break;",
          "708:     }",
          "709:   });",
          "711:   enableHalfClose(false);",
          "712:   initialize();",
          "714:   IntegrationTcpClientPtr tcp_client = makeTcpConnection(lookupPort(\"tcp_proxy\"));",
          "718:   ASSERT_TRUE(fake_upstreams_[0]->waitForHttpConnection(*dispatcher_, fake_upstream_connection_));",
          "719:   ASSERT_TRUE(fake_upstream_connection_->waitForNewStream(*dispatcher_, upstream_request_));",
          "720:   ASSERT_TRUE(upstream_request_->waitForHeadersComplete());",
          "724:   tcp_client->close();",
          "726:   ASSERT_TRUE(upstream_request_->waitForReset());",
          "727:   ASSERT_TRUE(fake_upstream_connection_->close());",
          "728: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}