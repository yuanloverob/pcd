{
  "cve_id": "CVE-2015-7551",
  "cve_desc": "The Fiddle::Handle implementation in ext/fiddle/handle.c in Ruby before 2.0.0-p648, 2.1 before 2.1.8, and 2.2 before 2.2.4, as distributed in Apple OS X before 10.11.4 and other products, mishandles tainting, which allows context-dependent attackers to execute arbitrary code or cause a denial of service (application crash) via a crafted string, related to the DL module and the libffi library.  NOTE: this vulnerability exists because of a CVE-2009-5147 regression.",
  "repo": "ruby/ruby",
  "patch_hash": "339e11a7f178312d937b7c95dd3115ce7236597a",
  "patch_info": {
    "commit_hash": "339e11a7f178312d937b7c95dd3115ce7236597a",
    "repo": "ruby/ruby",
    "commit_url": "https://github.com/ruby/ruby/commit/339e11a7f178312d937b7c95dd3115ce7236597a",
    "files": [
      "ChangeLog",
      "ext/fiddle/handle.c",
      "test/fiddle/test_handle.rb",
      "version.h"
    ],
    "message": "merge revision(s): 53153 and 23405@ruby_1_9_1\n\n\t* ext/fiddle/handle.c: check tainted string arguments.\n\t  Patch provided by tenderlove and nobu.\n\n\t* test/fiddle/test_handle.rb (class TestHandle): add test for above.\n\n\t* ext/dl/handle.c (rb_dlhandle_initialize): prohibits DL::dlopen\n\t  with a tainted name of library.\n\t  Patch by sheepman <sheepman AT sheepman.sakura.ne.jp>.\n\n\t* ext/dl/handle.c (rb_dlhandle_sym): ditto\n\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@53156 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
    "before_after_code_files": [
      "ext/fiddle/handle.c||ext/fiddle/handle.c",
      "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb",
      "version.h||version.h"
    ]
  },
  "patch_diff": {
    "ext/fiddle/handle.c||ext/fiddle/handle.c": [
      "File: ext/fiddle/handle.c -> ext/fiddle/handle.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #include <ruby.h>",
      "2: #include <fiddle.h>",
      "4: VALUE rb_cHandle;",
      "6: struct dl_handle {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4: #define SafeStringValueCStr(v) (rb_check_safe_obj(rb_string_value(&v)), StringValueCStr(v))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "143:  cflag = RTLD_LAZY | RTLD_GLOBAL;",
      "144:  break;",
      "145:       case 1:",
      "147:  cflag = RTLD_LAZY | RTLD_GLOBAL;",
      "148:  break;",
      "149:       case 2:",
      "151:  cflag = NUM2INT(flag);",
      "152:  break;",
      "153:       default:",
      "",
      "[Removed Lines]",
      "146:  clib = NIL_P(lib) ? NULL : StringValuePtr(lib);",
      "150:  clib = NIL_P(lib) ? NULL : StringValuePtr(lib);",
      "",
      "[Added Lines]",
      "148:  clib = NIL_P(lib) ? NULL : SafeStringValueCStr(lib);",
      "152:  clib = NIL_P(lib) ? NULL : SafeStringValueCStr(lib);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "263:     return PTR2NUM(fiddle_handle);",
      "264: }",
      "",
      "[Removed Lines]",
      "266: static VALUE fiddle_handle_sym(void *handle, const char *symbol);",
      "",
      "[Added Lines]",
      "268: static VALUE fiddle_handle_sym(void *handle, VALUE symbol);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "282:  rb_raise(rb_eFiddleError, \"closed handle\");",
      "283:     }",
      "286: }",
      "288: #ifndef RTLD_NEXT",
      "",
      "[Removed Lines]",
      "285:     return fiddle_handle_sym(fiddle_handle->ptr, StringValueCStr(sym));",
      "",
      "[Added Lines]",
      "287:     return fiddle_handle_sym(fiddle_handle->ptr, sym);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "305: static VALUE",
      "306: rb_fiddle_handle_s_sym(VALUE self, VALUE sym)",
      "307: {",
      "309: }",
      "311: static VALUE",
      "313: {",
      "314: #if defined(HAVE_DLERROR)",
      "315:     const char *err;",
      "",
      "[Removed Lines]",
      "308:     return fiddle_handle_sym(RTLD_NEXT, StringValueCStr(sym));",
      "312: fiddle_handle_sym(void *handle, const char *name)",
      "",
      "[Added Lines]",
      "310:     return fiddle_handle_sym(RTLD_NEXT, sym);",
      "314: fiddle_handle_sym(void *handle, VALUE symbol)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "318: # define CHECK_DLERROR",
      "319: #endif",
      "320:     void (*func)();",
      "322:     rb_secure(2);",
      "323: #ifdef HAVE_DLERROR",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "323:     const char *name = SafeStringValueCStr(symbol);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "367:     }",
      "368: #endif",
      "369:     if( !func ){",
      "371:     }",
      "373:     return PTR2NUM(func);",
      "",
      "[Removed Lines]",
      "370:  rb_raise(rb_eFiddleError, \"unknown symbol \\\"%s\\\"\", name);",
      "",
      "[Added Lines]",
      "373:  rb_raise(rb_eFiddleError, \"unknown symbol \\\"%\"PRIsVALUE\"\\\"\", symbol);",
      "",
      "---------------"
    ],
    "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb": [
      "File: test/fiddle/test_handle.rb -> test/fiddle/test_handle.rb",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:     include Test::Unit::Assertions",
      "13:     def test_to_i",
      "14:       handle = Fiddle::Handle.new(LIBC_SO)",
      "15:       assert_kind_of Integer, handle.to_i",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "13:     def test_safe_handle_open",
      "14:       t = Thread.new do",
      "15:         $SAFE = 1",
      "16:         Fiddle::Handle.new(LIBC_SO.taint)",
      "17:       end",
      "18:       assert_raise(SecurityError) { t.value }",
      "19:     end",
      "21:     def test_safe_function_lookup",
      "22:       t = Thread.new do",
      "23:         h = Fiddle::Handle.new(LIBC_SO)",
      "24:         $SAFE = 1",
      "25:         h[\"qsort\".taint]",
      "26:       end",
      "27:       assert_raise(SecurityError) { t.value }",
      "28:     end",
      "",
      "---------------"
    ],
    "version.h||version.h": [
      "File: version.h -> version.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: #define RUBY_VERSION \"2.1.8\"",
      "2: #define RUBY_RELEASE_DATE \"2015-12-16\"",
      "5: #define RUBY_RELEASE_YEAR 2015",
      "6: #define RUBY_RELEASE_MONTH 12",
      "",
      "[Removed Lines]",
      "3: #define RUBY_PATCHLEVEL 438",
      "",
      "[Added Lines]",
      "3: #define RUBY_PATCHLEVEL 439",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "703a24a9478e83925e4275d126bb54848a72076b",
      "candidate_info": {
        "commit_hash": "703a24a9478e83925e4275d126bb54848a72076b",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/703a24a9478e83925e4275d126bb54848a72076b",
        "files": [
          "ChangeLog",
          "insns.def",
          "test/ruby/test_optimization.rb",
          "version.h"
        ],
        "message": "merge revision(s) 53039: [Backport #11804]\n\n\t* insns.def (opt_case_dispatch): avoid converting Infinity\n\n\t* test/ruby/test_optimization.rb (test_opt_case_dispatch_inf): new\n\t  [ruby-dev:49423] [Bug #11804]'\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@53147 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "insns.def||insns.def",
          "test/ruby/test_optimization.rb||test/ruby/test_optimization.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "insns.def||insns.def": [
          "File: insns.def -> insns.def",
          "--- Hunk 1 ---",
          "[Context before]",
          "1275:     switch(TYPE(key)) {",
          "1276:       case T_FLOAT: {",
          "1277:  double ival;",
          "1279:      key = FIXABLE(ival) ? LONG2FIX((long)ival) : rb_dbl2big(ival);",
          "1280:  }",
          "1281:       }",
          "",
          "[Removed Lines]",
          "1278:  if (modf(RFLOAT_VALUE(key), &ival) == 0.0) {",
          "",
          "[Added Lines]",
          "1278:  if (modf(RFLOAT_VALUE(key), &ival) == 0.0 && !isinf(ival)) {",
          "",
          "---------------"
        ],
        "test/ruby/test_optimization.rb||test/ruby/test_optimization.rb": [
          "File: test/ruby/test_optimization.rb -> test/ruby/test_optimization.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "242:       end;",
          "243:     end",
          "244:   end",
          "245: end",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "246:   def test_opt_case_dispatch_inf",
          "247:     inf = 1.0/0.0",
          "248:     result = case inf",
          "249:              when 1 then 1",
          "250:              when 0 then 0",
          "251:              else",
          "252:                inf.to_i rescue nil",
          "253:              end",
          "254:     assert_nil result, '[ruby-dev:49423] [Bug #11804]'",
          "255:   end",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.8\"",
          "2: #define RUBY_RELEASE_DATE \"2015-12-16\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 12",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 436",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 437",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d8edc3e477bd0ccee0d52014cefc00b1ba2c081d",
      "candidate_info": {
        "commit_hash": "d8edc3e477bd0ccee0d52014cefc00b1ba2c081d",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/d8edc3e477bd0ccee0d52014cefc00b1ba2c081d",
        "files": [
          "ChangeLog",
          "test/fiddle/test_handle.rb",
          "version.h"
        ],
        "message": "merge revision(s) r49157: [Backport #10384]\n\n\t* test/fiddle/test_handle.rb (test_NEXT): use -test-/dln/empty\n\t  which is always a shared object and is not used by others.\n\t  [ruby-dev:48629] [Bug #10384]\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@50129 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb",
            "version.h||version.h"
          ],
          "candidate": [
            "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb",
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb": [
          "File: test/fiddle/test_handle.rb -> test/fiddle/test_handle.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:         assert_equal Fiddle::Handle.sym('dlopen'), Fiddle::Handle['dlopen']",
          "38:       rescue",
          "39:         # NetBSD",
          "43:       end",
          "44:     end",
          "",
          "[Removed Lines]",
          "40:         require 'objspace'",
          "41:         refute_nil Fiddle::Handle.sym('Init_objspace')",
          "42:         assert_equal Fiddle::Handle.sym('Init_objspace'), Fiddle::Handle['Init_objspace']",
          "",
          "[Added Lines]",
          "40:         require '-test-/dln/empty'",
          "41:         refute_nil Fiddle::Handle.sym('Init_empty')",
          "42:         assert_equal Fiddle::Handle.sym('Init_empty'), Fiddle::Handle['Init_empty']",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "166:         # interface, below, should be used, since getpid() is a function and not a",
          "167:         # data object.)",
          "168:         # --- FreeBSD 8.0 dlsym(3)",
          "170:         handle = Handle::NEXT",
          "172:       end",
          "173:     end unless /mswin|mingw/ =~ RUBY_PLATFORM",
          "",
          "[Removed Lines]",
          "169:         require 'objspace'",
          "171:         refute_nil handle['Init_objspace']",
          "",
          "[Added Lines]",
          "169:         require '-test-/dln/empty'",
          "171:         refute_nil handle['Init_empty']",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.5\"",
          "2: #define RUBY_RELEASE_DATE \"2015-03-31\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "6: #define RUBY_RELEASE_MONTH 3",
          "",
          "[Removed Lines]",
          "3: #define RUBY_PATCHLEVEL 324",
          "",
          "[Added Lines]",
          "3: #define RUBY_PATCHLEVEL 325",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bcccff509d38fb162abda41df232e8f4f15821e9",
      "candidate_info": {
        "commit_hash": "bcccff509d38fb162abda41df232e8f4f15821e9",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/bcccff509d38fb162abda41df232e8f4f15821e9",
        "files": [
          "ChangeLog",
          "thread_pthread.c",
          "version.h"
        ],
        "message": "merge revision(s) 54256: [Backport #12118] [Backport #12218]\n\n\t* thread_pthread.c (reserve_stack): fix reserving position where\n\t  the stack growing bottom to top. [Bug #12118]\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_1@54394 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "thread_pthread.c||thread_pthread.c",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "version.h||version.h"
          ],
          "candidate": [
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "thread_pthread.c||thread_pthread.c": [
          "File: thread_pthread.c -> thread_pthread.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "675:  const volatile char *end = buf + sizeof(buf);",
          "676:  limit += size;",
          "677:  if (limit > end) {",
          "681:  }",
          "682:     }",
          "683:     else {",
          "684:  limit -= size;",
          "685:  if (buf > limit) {",
          "689:  }",
          "690:     }",
          "691: }",
          "",
          "[Removed Lines]",
          "678:      size = limit - end;",
          "679:      limit = alloca(size);",
          "680:      limit[stack_check_margin+size-1] = 0;",
          "686:      limit = alloca(buf - limit);",
          "688:      limit -= stack_check_margin;",
          "",
          "[Added Lines]",
          "685:      size_t sz = limit - end;",
          "686:      limit = alloca(sz);",
          "687:      limit[sz-1] = 0;",
          "700:      size_t sz = buf - limit;",
          "701:      limit = alloca(sz);",
          "702:      limit[0] = 0;",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.1.9\"",
          "5: #define RUBY_RELEASE_YEAR 2016",
          "6: #define RUBY_RELEASE_MONTH 3",
          "9: #include \"ruby/version.h\"",
          "",
          "[Removed Lines]",
          "2: #define RUBY_RELEASE_DATE \"2016-03-26\"",
          "3: #define RUBY_PATCHLEVEL 486",
          "7: #define RUBY_RELEASE_DAY 26",
          "",
          "[Added Lines]",
          "2: #define RUBY_RELEASE_DATE \"2016-03-29\"",
          "3: #define RUBY_PATCHLEVEL 487",
          "7: #define RUBY_RELEASE_DAY 29",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "073cc5e815fcf5178fe4e515fcde74dc3597adeb",
      "candidate_info": {
        "commit_hash": "073cc5e815fcf5178fe4e515fcde74dc3597adeb",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/073cc5e815fcf5178fe4e515fcde74dc3597adeb",
        "files": [
          "ChangeLog",
          "ext/dl/handle.c",
          "ext/fiddle/handle.c",
          "test/fiddle/test_handle.rb",
          "version.h"
        ],
        "message": "merge revision(s): 53153 and 23405@ruby_1_9_1\n\n\t* ext/fiddle/handle.c: check tainted string arguments.\n\t  Patch provided by tenderlove and nobu.\n\n\t* test/fiddle/test_handle.rb (class TestHandle): add test for above.\n\n\t* ext/dl/handle.c (rb_dlhandle_initialize): prohibits DL::dlopen\n\t  with a tainted name of library.\n\t  Patch by sheepman <sheepman AT sheepman.sakura.ne.jp>.\n\n\t* ext/dl/handle.c (rb_dlhandle_sym): ditto\n\n\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/branches/ruby_2_0_0@53161 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "ext/dl/handle.c||ext/dl/handle.c",
          "ext/fiddle/handle.c||ext/fiddle/handle.c",
          "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb",
          "version.h||version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "ext/fiddle/handle.c||ext/fiddle/handle.c",
            "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb",
            "version.h||version.h"
          ],
          "candidate": [
            "ext/fiddle/handle.c||ext/fiddle/handle.c",
            "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb",
            "version.h||version.h"
          ]
        }
      },
      "candidate_diff": {
        "ext/dl/handle.c||ext/dl/handle.c": [
          "File: ext/dl/handle.c -> ext/dl/handle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include <ruby.h>",
          "6: #include \"dl.h\"",
          "8: VALUE rb_cDLHandle;",
          "10: #ifdef _WIN32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #define SafeStringValuePtr(v) (rb_string_value(&v), rb_check_safe_obj(v), RSTRING_PTR(v))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "132:  cflag = RTLD_LAZY | RTLD_GLOBAL;",
          "133:  break;",
          "134:       case 1:",
          "136:  cflag = RTLD_LAZY | RTLD_GLOBAL;",
          "137:  break;",
          "138:       case 2:",
          "140:  cflag = NUM2INT(flag);",
          "141:  break;",
          "142:       default:",
          "",
          "[Removed Lines]",
          "135:  clib = NIL_P(lib) ? NULL : StringValuePtr(lib);",
          "139:  clib = NIL_P(lib) ? NULL : StringValuePtr(lib);",
          "",
          "[Added Lines]",
          "137:  clib = NIL_P(lib) ? NULL : SafeStringValuePtr(lib);",
          "141:  clib = NIL_P(lib) ? NULL : SafeStringValuePtr(lib);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "265: rb_dlhandle_sym(VALUE self, VALUE sym)",
          "266: {",
          "267:     struct dl_handle *dlhandle;",
          "269:     TypedData_Get_Struct(self, struct dl_handle, &dlhandle_data_type, dlhandle);",
          "270:     if( ! dlhandle->open ){",
          "271:  rb_raise(rb_eDLError, \"closed handle\");",
          "272:     }",
          "275: }",
          "277: #ifndef RTLD_NEXT",
          "",
          "[Removed Lines]",
          "274:     return dlhandle_sym(dlhandle->ptr, StringValueCStr(sym));",
          "",
          "[Added Lines]",
          "270:     const char *name;",
          "272:     name = SafeStringValuePtr(sym);",
          "279:     return dlhandle_sym(dlhandle->ptr, name);",
          "",
          "---------------"
        ],
        "ext/fiddle/handle.c||ext/fiddle/handle.c": [
          "File: ext/fiddle/handle.c -> ext/fiddle/handle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <ruby.h>",
          "2: #include <fiddle.h>",
          "4: VALUE rb_cHandle;",
          "6: struct dl_handle {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #define SafeStringValueCStr(v) (rb_check_safe_obj(rb_string_value(&v)), StringValueCStr(v))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:  cflag = RTLD_LAZY | RTLD_GLOBAL;",
          "136:  break;",
          "137:       case 1:",
          "139:  cflag = RTLD_LAZY | RTLD_GLOBAL;",
          "140:  break;",
          "141:       case 2:",
          "143:  cflag = NUM2INT(flag);",
          "144:  break;",
          "145:       default:",
          "",
          "[Removed Lines]",
          "138:  clib = NIL_P(lib) ? NULL : StringValuePtr(lib);",
          "142:  clib = NIL_P(lib) ? NULL : StringValuePtr(lib);",
          "",
          "[Added Lines]",
          "140:  clib = NIL_P(lib) ? NULL : SafeStringValueCStr(lib);",
          "144:  clib = NIL_P(lib) ? NULL : SafeStringValueCStr(lib);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "255:     return PTR2NUM(fiddle_handle);",
          "256: }",
          "",
          "[Removed Lines]",
          "258: static VALUE fiddle_handle_sym(void *handle, const char *symbol);",
          "",
          "[Added Lines]",
          "260: static VALUE fiddle_handle_sym(void *handle, VALUE symbol);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "274:  rb_raise(rb_eFiddleError, \"closed handle\");",
          "275:     }",
          "278: }",
          "280: #ifndef RTLD_NEXT",
          "",
          "[Removed Lines]",
          "277:     return fiddle_handle_sym(fiddle_handle->ptr, StringValueCStr(sym));",
          "",
          "[Added Lines]",
          "279:     return fiddle_handle_sym(fiddle_handle->ptr, sym);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "297: static VALUE",
          "298: rb_fiddle_handle_s_sym(VALUE self, VALUE sym)",
          "299: {",
          "301: }",
          "303: static VALUE",
          "305: {",
          "306: #if defined(HAVE_DLERROR)",
          "307:     const char *err;",
          "",
          "[Removed Lines]",
          "300:     return fiddle_handle_sym(RTLD_NEXT, StringValueCStr(sym));",
          "304: fiddle_handle_sym(void *handle, const char *name)",
          "",
          "[Added Lines]",
          "302:     return fiddle_handle_sym(RTLD_NEXT, sym);",
          "306: fiddle_handle_sym(void *handle, VALUE symbol)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "310: # define CHECK_DLERROR",
          "311: #endif",
          "312:     void (*func)();",
          "314:     rb_secure(2);",
          "315: #ifdef HAVE_DLERROR",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "315:     const char *name = SafeStringValueCStr(symbol);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "359:     }",
          "360: #endif",
          "361:     if( !func ){",
          "363:     }",
          "365:     return PTR2NUM(func);",
          "",
          "[Removed Lines]",
          "362:  rb_raise(rb_eFiddleError, \"unknown symbol \\\"%s\\\"\", name);",
          "",
          "[Added Lines]",
          "365:  rb_raise(rb_eFiddleError, \"unknown symbol \\\"%\"PRIsVALUE\"\\\"\", symbol);",
          "",
          "---------------"
        ],
        "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb": [
          "File: test/fiddle/test_handle.rb -> test/fiddle/test_handle.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     include Test::Unit::Assertions",
          "13:     def test_to_i",
          "14:       handle = Fiddle::Handle.new(LIBC_SO)",
          "15:       assert_kind_of Integer, handle.to_i",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:     def test_safe_handle_open",
          "14:       t = Thread.new do",
          "15:         $SAFE = 1",
          "16:         Fiddle::Handle.new(LIBC_SO.taint)",
          "17:       end",
          "18:       assert_raise(SecurityError) { t.value }",
          "19:     end",
          "21:     def test_safe_function_lookup",
          "22:       t = Thread.new do",
          "23:         h = Fiddle::Handle.new(LIBC_SO)",
          "24:         $SAFE = 1",
          "25:         h[\"qsort\".taint]",
          "26:       end",
          "27:       assert_raise(SecurityError) { t.value }",
          "28:     end",
          "",
          "---------------"
        ],
        "version.h||version.h": [
          "File: version.h -> version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #define RUBY_VERSION \"2.0.0\"",
          "5: #define RUBY_RELEASE_YEAR 2015",
          "9: #include \"ruby/version.h\"",
          "",
          "[Removed Lines]",
          "2: #define RUBY_RELEASE_DATE \"2015-08-18\"",
          "3: #define RUBY_PATCHLEVEL 647",
          "6: #define RUBY_RELEASE_MONTH 8",
          "7: #define RUBY_RELEASE_DAY 18",
          "",
          "[Added Lines]",
          "2: #define RUBY_RELEASE_DATE \"2015-12-16\"",
          "3: #define RUBY_PATCHLEVEL 648",
          "6: #define RUBY_RELEASE_MONTH 12",
          "7: #define RUBY_RELEASE_DAY 16",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79c7a51893e1c8b95d98728feb7c75bc31671ed8",
      "candidate_info": {
        "commit_hash": "79c7a51893e1c8b95d98728feb7c75bc31671ed8",
        "repo": "ruby/ruby",
        "commit_url": "https://github.com/ruby/ruby/commit/79c7a51893e1c8b95d98728feb7c75bc31671ed8",
        "files": [
          "ChangeLog",
          "ext/fiddle/handle.c",
          "test/fiddle/test_handle.rb"
        ],
        "message": "* ext/fiddle/handle.c: check tainted string arguments.   Patch provided by tenderlove and nobu.\n\n* test/fiddle/test_handle.rb (class TestHandle): add test for above.\n\ngit-svn-id: svn+ssh://ci.ruby-lang.org/ruby/trunk@53153 b2dd03c8-39d4-4d8f-98ff-823fe69b080e",
        "before_after_code_files": [
          "ext/fiddle/handle.c||ext/fiddle/handle.c",
          "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "ext/fiddle/handle.c||ext/fiddle/handle.c",
            "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb"
          ],
          "candidate": [
            "ext/fiddle/handle.c||ext/fiddle/handle.c",
            "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb"
          ]
        }
      },
      "candidate_diff": {
        "ext/fiddle/handle.c||ext/fiddle/handle.c": [
          "File: ext/fiddle/handle.c -> ext/fiddle/handle.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include <ruby.h>",
          "2: #include <fiddle.h>",
          "4: VALUE rb_cHandle;",
          "6: struct dl_handle {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #define SafeStringValueCStr(v) (rb_check_safe_obj(rb_string_value(&v)), StringValueCStr(v))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "143:  cflag = RTLD_LAZY | RTLD_GLOBAL;",
          "144:  break;",
          "145:       case 1:",
          "147:  cflag = RTLD_LAZY | RTLD_GLOBAL;",
          "148:  break;",
          "149:       case 2:",
          "151:  cflag = NUM2INT(flag);",
          "152:  break;",
          "153:       default:",
          "",
          "[Removed Lines]",
          "146:  clib = NIL_P(lib) ? NULL : StringValuePtr(lib);",
          "150:  clib = NIL_P(lib) ? NULL : StringValuePtr(lib);",
          "",
          "[Added Lines]",
          "148:  clib = NIL_P(lib) ? NULL : SafeStringValueCStr(lib);",
          "152:  clib = NIL_P(lib) ? NULL : SafeStringValueCStr(lib);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "262:     return PTR2NUM(fiddle_handle);",
          "263: }",
          "",
          "[Removed Lines]",
          "265: static VALUE fiddle_handle_sym(void *handle, const char *symbol);",
          "",
          "[Added Lines]",
          "267: static VALUE fiddle_handle_sym(void *handle, VALUE symbol);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "281:  rb_raise(rb_eFiddleError, \"closed handle\");",
          "282:     }",
          "285: }",
          "287: #ifndef RTLD_NEXT",
          "",
          "[Removed Lines]",
          "284:     return fiddle_handle_sym(fiddle_handle->ptr, StringValueCStr(sym));",
          "",
          "[Added Lines]",
          "286:     return fiddle_handle_sym(fiddle_handle->ptr, sym);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "304: static VALUE",
          "305: rb_fiddle_handle_s_sym(VALUE self, VALUE sym)",
          "306: {",
          "308: }",
          "310: static VALUE",
          "312: {",
          "313: #if defined(HAVE_DLERROR)",
          "314:     const char *err;",
          "",
          "[Removed Lines]",
          "307:     return fiddle_handle_sym(RTLD_NEXT, StringValueCStr(sym));",
          "311: fiddle_handle_sym(void *handle, const char *name)",
          "",
          "[Added Lines]",
          "309:     return fiddle_handle_sym(RTLD_NEXT, sym);",
          "313: fiddle_handle_sym(void *handle, VALUE symbol)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "317: # define CHECK_DLERROR",
          "318: #endif",
          "319:     void (*func)();",
          "321: #ifdef HAVE_DLERROR",
          "322:     dlerror();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "322:     const char *name = SafeStringValueCStr(symbol);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "365:     }",
          "366: #endif",
          "367:     if( !func ){",
          "369:     }",
          "371:     return PTR2NUM(func);",
          "",
          "[Removed Lines]",
          "368:  rb_raise(rb_eFiddleError, \"unknown symbol \\\"%s\\\"\", name);",
          "",
          "[Added Lines]",
          "371:  rb_raise(rb_eFiddleError, \"unknown symbol \\\"%\"PRIsVALUE\"\\\"\", symbol);",
          "",
          "---------------"
        ],
        "test/fiddle/test_handle.rb||test/fiddle/test_handle.rb": [
          "File: test/fiddle/test_handle.rb -> test/fiddle/test_handle.rb",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:     include Test::Unit::Assertions",
          "13:     def test_to_i",
          "14:       handle = Fiddle::Handle.new(LIBC_SO)",
          "15:       assert_kind_of Integer, handle.to_i",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13:     def test_safe_handle_open",
          "14:       t = Thread.new do",
          "15:         $SAFE = 1",
          "16:         Fiddle::Handle.new(LIBC_SO.taint)",
          "17:       end",
          "18:       assert_raise(SecurityError) { t.value }",
          "19:     end",
          "21:     def test_safe_function_lookup",
          "22:       t = Thread.new do",
          "23:         h = Fiddle::Handle.new(LIBC_SO)",
          "24:         $SAFE = 1",
          "25:         h[\"qsort\".taint]",
          "26:       end",
          "27:       assert_raise(SecurityError) { t.value }",
          "28:     end",
          "",
          "---------------"
        ]
      }
    }
  ]
}