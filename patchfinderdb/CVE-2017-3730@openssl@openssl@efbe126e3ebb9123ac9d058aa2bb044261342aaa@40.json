{
  "cve_id": "CVE-2017-3730",
  "cve_desc": "In OpenSSL 1.1.0 before 1.1.0d, if a malicious server supplies bad parameters for a DHE or ECDHE key exchange then this can result in the client attempting to dereference a NULL pointer leading to a client crash. This could be exploited in a Denial of Service attack.",
  "repo": "openssl/openssl",
  "patch_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
  "patch_info": {
    "commit_hash": "efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/efbe126e3ebb9123ac9d058aa2bb044261342aaa",
    "files": [
      "ssl/statem/statem_clnt.c"
    ],
    "message": "Fix missing NULL checks in CKE processing\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c"
    ]
  },
  "patch_diff": {
    "ssl/statem/statem_clnt.c||ssl/statem/statem_clnt.c": [
      "File: ssl/statem/statem_clnt.c -> ssl/statem/statem_clnt.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2258:         return 0;",
      "2259:     }",
      "2260:     ckey = ssl_generate_pkey(skey);",
      "2261:     dh_clnt = EVP_PKEY_get0_DH(ckey);",
      "2263:     if (dh_clnt == NULL || ssl_derive(s, ckey, skey) == 0) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2261:     if (ckey == NULL) {",
      "2262:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_DHE, ERR_R_INTERNAL_ERROR);",
      "2263:         return 0;",
      "2264:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2296:     }",
      "2298:     ckey = ssl_generate_pkey(skey);",
      "2300:     if (ssl_derive(s, ckey, skey) == 0) {",
      "2301:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_EVP_LIB);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2304:     if (ckey == NULL) {",
      "2305:         SSLerr(SSL_F_TLS_CONSTRUCT_CKE_ECDHE, ERR_R_INTERNAL_ERROR);",
      "2306:         goto err;",
      "2307:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "59e92f2371d7bf1dfd3bcaffc69c53f5a6ac8b5d",
      "candidate_info": {
        "commit_hash": "59e92f2371d7bf1dfd3bcaffc69c53f5a6ac8b5d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/59e92f2371d7bf1dfd3bcaffc69c53f5a6ac8b5d",
        "files": [
          "test/evptests.txt",
          "test/sslcorrupttest.c"
        ],
        "message": "test/evptests.txt: add negative tests for AEAD ciphers.\n\nThis is done by taking one vector, \"corrupting\" last bit of the\ntag value and verifying that decrypt fails.\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "test/sslcorrupttest.c||test/sslcorrupttest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/sslcorrupttest.c||test/sslcorrupttest.c": [
          "File: test/sslcorrupttest.c -> test/sslcorrupttest.c"
        ]
      }
    },
    {
      "candidate_hash": "f6a7505e64d06f9d41e01b763b684e4e2df34922",
      "candidate_info": {
        "commit_hash": "f6a7505e64d06f9d41e01b763b684e4e2df34922",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f6a7505e64d06f9d41e01b763b684e4e2df34922",
        "files": [
          "test/sslapitest.c"
        ],
        "message": "Add some more OCSP testing\n\nTest that the OCSP callbacks work as expected.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
        "before_after_code_files": [
          "test/sslapitest.c||test/sslapitest.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/sslapitest.c||test/sslapitest.c": [
          "File: test/sslapitest.c -> test/sslapitest.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include <openssl/opensslconf.h>",
          "11: #include <openssl/bio.h>",
          "12: #include <openssl/crypto.h>",
          "13: #include <openssl/ssl.h>",
          "15: #include \"ssltestlib.h\"",
          "16: #include \"testutil.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10: #include <string.h>",
          "16: #include <openssl/ocsp.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "18: static char *cert = NULL;",
          "19: static char *privkey = NULL;",
          "21: static int test_tlsext_status_type(void)",
          "22: {",
          "25:     int testresult = 0;",
          "31:         printf(\"Unexpected initial value for \"",
          "32:                \"SSL_CTX_get_tlsext_status_type()\\n\");",
          "33:         goto end;",
          "34:     }",
          "39:         printf(\"Unexpected initial value for SSL_get_tlsext_status_type()\\n\");",
          "40:         goto end;",
          "41:     }",
          "44:         printf(\"Unexpected fail for SSL_set_tlsext_status_type()\\n\");",
          "45:         goto end;",
          "46:     }",
          "49:         printf(\"Unexpected result for SSL_get_tlsext_status_type()\\n\");",
          "50:         goto end;",
          "51:     }",
          "57:         printf(\"Unexpected fail for SSL_CTX_set_tlsext_status_type()\\n\");",
          "58:         goto end;",
          "59:     }",
          "62:         printf(\"Unexpected result for SSL_CTX_get_tlsext_status_type()\\n\");",
          "63:         goto end;",
          "64:     }",
          "69:         printf(\"Unexpected result for SSL_get_tlsext_status_type() (test 2)\\n\");",
          "70:         goto end;",
          "71:     }",
          "73:     testresult = 1;",
          "75:  end:",
          "79:     return testresult;",
          "80: }",
          "",
          "[Removed Lines]",
          "23:     SSL_CTX *ctx = NULL;",
          "24:     SSL *con = NULL;",
          "28:     ctx = SSL_CTX_new(TLS_method());",
          "30:     if (SSL_CTX_get_tlsext_status_type(ctx) != -1) {",
          "36:     con = SSL_new(ctx);",
          "38:     if (SSL_get_tlsext_status_type(con) != -1) {",
          "43:     if (!SSL_set_tlsext_status_type(con, TLSEXT_STATUSTYPE_ocsp)) {",
          "48:     if (SSL_get_tlsext_status_type(con) != TLSEXT_STATUSTYPE_ocsp) {",
          "53:     SSL_free(con);",
          "54:     con = NULL;",
          "56:     if (!SSL_CTX_set_tlsext_status_type(ctx, TLSEXT_STATUSTYPE_ocsp)) {",
          "61:     if (SSL_CTX_get_tlsext_status_type(ctx) != TLSEXT_STATUSTYPE_ocsp) {",
          "66:     con = SSL_new(ctx);",
          "68:     if (SSL_get_tlsext_status_type(con) != TLSEXT_STATUSTYPE_ocsp) {",
          "76:     SSL_free(con);",
          "77:     SSL_CTX_free(ctx);",
          "",
          "[Added Lines]",
          "24: static const unsigned char orespder[] = \"Dummy OCSP Response\";",
          "25: static int ocsp_server_called = 0;",
          "26: static int ocsp_client_called = 0;",
          "28: static int cdummyarg = 1;",
          "29: static X509 *ocspcert = NULL;",
          "31: static int ocsp_server_cb(SSL *s, void *arg)",
          "32: {",
          "33:     int *argi = (int *)arg;",
          "34:     unsigned char *orespdercopy = NULL;",
          "35:     STACK_OF(OCSP_RESPID) *ids = NULL;",
          "36:     OCSP_RESPID *id = NULL;",
          "38:     if (*argi == 2) {",
          "40:         SSL_get_tlsext_status_ids(s, &ids);",
          "41:         if (ids == NULL || sk_OCSP_RESPID_num(ids) != 1)",
          "42:             return SSL_TLSEXT_ERR_ALERT_FATAL;",
          "44:         id = sk_OCSP_RESPID_value(ids, 0);",
          "45:         if (id == NULL || !OCSP_RESPID_match(id, ocspcert))",
          "46:             return SSL_TLSEXT_ERR_ALERT_FATAL;",
          "47:     } else if (*argi != 1) {",
          "48:         return SSL_TLSEXT_ERR_ALERT_FATAL;",
          "49:     }",
          "52:     orespdercopy = OPENSSL_memdup(orespder, sizeof(orespder));",
          "53:     if (orespdercopy == NULL)",
          "54:         return SSL_TLSEXT_ERR_ALERT_FATAL;",
          "56:     SSL_set_tlsext_status_ocsp_resp(s, orespdercopy, sizeof(orespder));",
          "58:     ocsp_server_called = 1;",
          "60:     return SSL_TLSEXT_ERR_OK;",
          "61: }",
          "63: static int ocsp_client_cb(SSL *s, void *arg)",
          "64: {",
          "65:     int *argi = (int *)arg;",
          "66:     const unsigned char *respderin;",
          "67:     size_t len;",
          "69:     if (*argi != 1 && *argi != 2)",
          "70:         return 0;",
          "72:     len = SSL_get_tlsext_status_ocsp_resp(s, &respderin);",
          "74:     if (memcmp(orespder, respderin, len) != 0)",
          "75:         return 0;",
          "77:     ocsp_client_called = 1;",
          "79:     return 1;",
          "80: }",
          "84:     SSL_CTX *cctx = NULL, *sctx = NULL;",
          "85:     SSL *clientssl = NULL, *serverssl = NULL;",
          "87:     STACK_OF(OCSP_RESPID) *ids = NULL;",
          "88:     OCSP_RESPID *id = NULL;",
          "89:     BIO *certbio = NULL;",
          "91:     if (!create_ssl_ctx_pair(TLS_server_method(), TLS_client_method(), &sctx,",
          "92:                              &cctx, cert, privkey)) {",
          "93:         printf(\"Unable to create SSL_CTX pair\\n\");",
          "94:         return 0;",
          "95:     }",
          "97:     if (SSL_CTX_get_tlsext_status_type(cctx) != -1) {",
          "105:     clientssl = SSL_new(cctx);",
          "106:     if (SSL_get_tlsext_status_type(clientssl) != -1) {",
          "111:     if (!SSL_set_tlsext_status_type(clientssl, TLSEXT_STATUSTYPE_ocsp)) {",
          "116:     if (SSL_get_tlsext_status_type(clientssl) != TLSEXT_STATUSTYPE_ocsp) {",
          "121:     SSL_free(clientssl);",
          "122:     clientssl = NULL;",
          "124:     if (!SSL_CTX_set_tlsext_status_type(cctx, TLSEXT_STATUSTYPE_ocsp)) {",
          "129:     if (SSL_CTX_get_tlsext_status_type(cctx) != TLSEXT_STATUSTYPE_ocsp) {",
          "134:     clientssl = SSL_new(cctx);",
          "136:     if (SSL_get_tlsext_status_type(clientssl) != TLSEXT_STATUSTYPE_ocsp) {",
          "141:     SSL_free(clientssl);",
          "142:     clientssl = NULL;",
          "149:     SSL_CTX_set_tlsext_status_cb(cctx, ocsp_client_cb);",
          "150:     SSL_CTX_set_tlsext_status_arg(cctx, &cdummyarg);",
          "151:     SSL_CTX_set_tlsext_status_cb(sctx, ocsp_server_cb);",
          "152:     SSL_CTX_set_tlsext_status_arg(sctx, &cdummyarg);",
          "154:     if (!create_ssl_objects(sctx, cctx, &serverssl, &clientssl, NULL, NULL)) {",
          "155:         printf(\"Unable to create SSL objects\\n\");",
          "156:         goto end;",
          "157:     }",
          "159:     if (!create_ssl_connection(serverssl, clientssl)) {",
          "160:         printf(\"Unable to create SSL connection\\n\");",
          "161:         goto end;",
          "162:     }",
          "164:     if (!ocsp_client_called || !ocsp_server_called) {",
          "165:         printf(\"OCSP callbacks not called\\n\");",
          "166:         goto end;",
          "167:     }",
          "169:     SSL_free(serverssl);",
          "170:     SSL_free(clientssl);",
          "171:     serverssl = NULL;",
          "172:     clientssl = NULL;",
          "175:     ocsp_client_called = 0;",
          "176:     ocsp_server_called = 0;",
          "177:     cdummyarg = 0;",
          "179:     if (!create_ssl_objects(sctx, cctx, &serverssl, &clientssl, NULL, NULL)) {",
          "180:         printf(\"Unable to create SSL objects\\n\");",
          "181:         goto end;",
          "182:     }",
          "185:     if (create_ssl_connection(serverssl, clientssl)) {",
          "186:         printf(\"Unexpected success creating the connection\\n\");",
          "187:         goto end;",
          "188:     }",
          "190:     if (ocsp_client_called || ocsp_server_called) {",
          "191:         printf(\"OCSP callbacks successfully called unexpectedly\\n\");",
          "192:         goto end;",
          "193:     }",
          "195:     SSL_free(serverssl);",
          "196:     SSL_free(clientssl);",
          "197:     serverssl = NULL;",
          "198:     clientssl = NULL;",
          "204:     ocsp_client_called = 0;",
          "205:     ocsp_server_called = 0;",
          "206:     cdummyarg = 2;",
          "208:     if (!create_ssl_objects(sctx, cctx, &serverssl, &clientssl, NULL, NULL)) {",
          "209:         printf(\"Unable to create SSL objects\\n\");",
          "210:         goto end;",
          "211:     }",
          "217:     certbio = BIO_new_file(cert, \"r\");",
          "218:     if (certbio == NULL) {",
          "219:         printf(\"Can't load the certficate file\\n\");",
          "220:         goto end;",
          "221:     }",
          "222:     id = OCSP_RESPID_new();",
          "223:     ids = sk_OCSP_RESPID_new_null();",
          "224:     ocspcert = PEM_read_bio_X509(certbio, NULL, NULL, NULL);",
          "225:     if (id == NULL || ids == NULL || ocspcert == NULL",
          "226:             || !OCSP_RESPID_set_by_key(id, ocspcert)",
          "227:             || !sk_OCSP_RESPID_push(ids, id)) {",
          "228:         printf(\"Unable to set OCSP_RESPIDs\\n\");",
          "229:         goto end;",
          "230:     }",
          "231:     id = NULL;",
          "232:     SSL_set_tlsext_status_ids(clientssl, ids);",
          "234:     ids = NULL;",
          "236:     BIO_free(certbio);",
          "237:     certbio = NULL;",
          "239:     if (!create_ssl_connection(serverssl, clientssl)) {",
          "240:         printf(\"Unable to create SSL connection\\n\");",
          "241:         goto end;",
          "242:     }",
          "244:     if (!ocsp_client_called || !ocsp_server_called) {",
          "245:         printf(\"OCSP callbacks not called\\n\");",
          "246:         goto end;",
          "247:     }",
          "252:     SSL_free(serverssl);",
          "253:     SSL_free(clientssl);",
          "254:     SSL_CTX_free(sctx);",
          "255:     SSL_CTX_free(cctx);",
          "256:     sk_OCSP_RESPID_pop_free(ids, OCSP_RESPID_free);",
          "257:     OCSP_RESPID_free(id);",
          "258:     BIO_free(certbio);",
          "259:     X509_free(ocspcert);",
          "260:     ocspcert = NULL;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6c8e02af7e8d789d2b3dd6efe937b8c64784643f",
      "candidate_info": {
        "commit_hash": "6c8e02af7e8d789d2b3dd6efe937b8c64784643f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6c8e02af7e8d789d2b3dd6efe937b8c64784643f",
        "files": [
          "engines/afalg/e_afalg.c"
        ],
        "message": "e_afalg: Don't warn about kernel version when pedantic\n\nWhen built with --strict-warnings and the Linux kernel headers don't\nmatch the kernel version, the preprocessor warnings in\nengines/afalg/e_afalg.c cause compilation errors.  Use the macro\nPEDANTIC to avoid those warnings in that case.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2095)\n(cherry picked from commit 97043e46aa7083c787a1efd72ac31ca97ed41610)",
        "before_after_code_files": [
          "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/afalg/e_afalg.c||engines/afalg/e_afalg.c": [
          "File: engines/afalg/e_afalg.c -> engines/afalg/e_afalg.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: #define K_MIN2  0",
          "27: #if LINUX_VERSION_CODE <= KERNEL_VERSION(K_MAJ, K_MIN1, K_MIN2) || \\",
          "28:     !defined(AF_ALG)",
          "31: void engine_load_afalg_int(void);",
          "32: void engine_load_afalg_int(void)",
          "33: {",
          "",
          "[Removed Lines]",
          "29: # warning \"AFALG ENGINE requires Kernel Headers >= 4.1.0\"",
          "30: # warning \"Skipping Compilation of AFALG engine\"",
          "",
          "[Added Lines]",
          "29: # ifndef PEDANTIC",
          "30: #  warning \"AFALG ENGINE requires Kernel Headers >= 4.1.0\"",
          "31: #  warning \"Skipping Compilation of AFALG engine\"",
          "32: # endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3a3f9ed140b0e1feeed1b9655091c270df05332f",
      "candidate_info": {
        "commit_hash": "3a3f9ed140b0e1feeed1b9655091c270df05332f",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/3a3f9ed140b0e1feeed1b9655091c270df05332f",
        "files": [
          "fuzz/conf.c"
        ],
        "message": "conf fuzzer: also check for an empty file\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n\nGH: #1828\n(cherry picked from commit ea6199ea91ac59ae53686335e436d554cdacd2dc)",
        "before_after_code_files": [
          "fuzz/conf.c||fuzz/conf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fuzz/conf.c||fuzz/conf.c": [
          "File: fuzz/conf.c -> fuzz/conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: }",
          "22: int FuzzerTestOneInput(const uint8_t *buf, size_t len) {",
          "25:     long eline;",
          "27:     OPENSSL_assert((size_t)BIO_write(in, buf, len) == len);",
          "28:     NCONF_load_bio(conf, in, &eline);",
          "29:     NCONF_free(conf);",
          "",
          "[Removed Lines]",
          "23:     CONF *conf = NCONF_new(NULL);",
          "24:     BIO *in = BIO_new(BIO_s_mem());",
          "",
          "[Added Lines]",
          "23:     CONF *conf;",
          "24:     BIO *in;",
          "27:     if (len == 0)",
          "28:         return 0;",
          "30:     conf = NCONF_new(NULL);",
          "31:     in = BIO_new(BIO_s_mem());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f1522af442d4154db28928ab178c258f07ed4c5e",
      "candidate_info": {
        "commit_hash": "f1522af442d4154db28928ab178c258f07ed4c5e",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f1522af442d4154db28928ab178c258f07ed4c5e",
        "files": [
          "test/README.ssltest.md",
          "test/handshake_helper.c",
          "test/ssl-tests/17-renegotiate.conf",
          "test/ssl-tests/17-renegotiate.conf.in",
          "test/ssl_test_ctx.c",
          "test/ssl_test_ctx.h"
        ],
        "message": "Extend the renegotiation tests\n\nAdd the ability to test both server initiated and client initiated reneg.\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(cherry picked from commit fe7dd5534176d1b04be046fcbaad24430c8727e0)",
        "before_after_code_files": [
          "test/handshake_helper.c||test/handshake_helper.c",
          "test/ssl-tests/17-renegotiate.conf||test/ssl-tests/17-renegotiate.conf",
          "test/ssl-tests/17-renegotiate.conf.in||test/ssl-tests/17-renegotiate.conf.in",
          "test/ssl_test_ctx.c||test/ssl_test_ctx.c",
          "test/ssl_test_ctx.h||test/ssl_test_ctx.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/handshake_helper.c||test/handshake_helper.c": [
          "File: test/handshake_helper.c -> test/handshake_helper.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "583:     }",
          "584: }",
          "587: {",
          "588:     int ret;",
          "589:     char buf;",
          "591:     TEST_check(peer->status == PEER_RETRY);",
          "610:     }",
          "",
          "[Removed Lines]",
          "586: static void do_reneg_setup_step(PEER *peer)",
          "594:     if (!SSL_is_server(peer->ssl)) {",
          "595:         ret = SSL_renegotiate(peer->ssl);",
          "596:         if (!ret) {",
          "597:             peer->status = PEER_ERROR;",
          "598:             return;",
          "599:         }",
          "600:         do_handshake_step(peer);",
          "607:         if (peer->status == PEER_RETRY)",
          "608:             peer->status = PEER_SUCCESS;",
          "609:         return;",
          "",
          "[Added Lines]",
          "586: static void do_reneg_setup_step(const SSL_TEST_CTX *test_ctx, PEER *peer)",
          "592:     TEST_check(test_ctx->handshake_mode == SSL_TEST_HANDSHAKE_RENEG_SERVER",
          "593:                 || test_ctx->handshake_mode == SSL_TEST_HANDSHAKE_RENEG_CLIENT);",
          "596:     if ((test_ctx->handshake_mode == SSL_TEST_HANDSHAKE_RENEG_SERVER",
          "597:                 && SSL_is_server(peer->ssl))",
          "598:             || (test_ctx->handshake_mode == SSL_TEST_HANDSHAKE_RENEG_CLIENT",
          "599:                 && !SSL_is_server(peer->ssl))) {",
          "604:         if (!SSL_renegotiate_pending(peer->ssl)) {",
          "610:             if (SSL_is_server(peer->ssl))",
          "611:                 ret = SSL_renegotiate(peer->ssl);",
          "612:             else",
          "613:                 ret = SSL_renegotiate_abbreviated(peer->ssl);",
          "614:             if (!ret) {",
          "615:                 peer->status = PEER_ERROR;",
          "616:                 return;",
          "617:             }",
          "618:             do_handshake_step(peer);",
          "629:             if (peer->status == PEER_RETRY)",
          "630:                 peer->status = PEER_SUCCESS;",
          "631:             else if (peer->status == PEER_SUCCESS)",
          "632:                 peer->status = PEER_RETRY;",
          "633:             return;",
          "634:         }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "617:     ret = SSL_read(peer->ssl, &buf, sizeof(buf));",
          "618:     if (ret >= 0) {",
          "620:         peer->status = PEER_ERROR;",
          "621:         return;",
          "622:     } else {",
          "623:         int error = SSL_get_error(peer->ssl, ret);",
          "625:             peer->status = PEER_ERROR;",
          "626:             return;",
          "627:         }",
          "628:     }",
          "630:     peer->status = PEER_SUCCESS;",
          "",
          "[Removed Lines]",
          "624:         if (error != SSL_ERROR_WANT_READ || !SSL_in_init(peer->ssl)) {",
          "",
          "[Added Lines]",
          "652:         if (error != SSL_ERROR_WANT_READ) {",
          "657:         if (!SSL_in_init(peer->ssl))",
          "658:             return;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "678: {",
          "679:     switch (phase) {",
          "680:     case HANDSHAKE:",
          "682:             return RENEG_APPLICATION_DATA;",
          "683:         return APPLICATION_DATA;",
          "684:     case RENEG_APPLICATION_DATA:",
          "",
          "[Removed Lines]",
          "681:         if (test_ctx->handshake_mode == SSL_TEST_HANDSHAKE_RENEGOTIATE)",
          "",
          "[Added Lines]",
          "712:         if (test_ctx->handshake_mode == SSL_TEST_HANDSHAKE_RENEG_SERVER",
          "713:                 || test_ctx->handshake_mode == SSL_TEST_HANDSHAKE_RENEG_CLIENT)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "696:     }",
          "697: }",
          "700: {",
          "701:     switch (phase) {",
          "702:     case HANDSHAKE:",
          "",
          "[Removed Lines]",
          "699: static void do_connect_step(PEER *peer, connect_phase_t phase)",
          "",
          "[Added Lines]",
          "731: static void do_connect_step(const SSL_TEST_CTX *test_ctx, PEER *peer,",
          "732:                             connect_phase_t phase)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "706:         do_app_data_step(peer);",
          "707:         break;",
          "708:     case RENEG_SETUP:",
          "710:         break;",
          "711:     case RENEG_HANDSHAKE:",
          "712:         do_handshake_step(peer);",
          "",
          "[Removed Lines]",
          "709:         do_reneg_setup_step(peer);",
          "",
          "[Added Lines]",
          "742:         do_reneg_setup_step(test_ctx, peer);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "913:     for(;;) {",
          "914:         if (client_turn) {",
          "916:             status = handshake_status(client.status, server.status,",
          "917:                                       1 /* client went last */);",
          "918:         } else {",
          "920:             status = handshake_status(server.status, client.status,",
          "921:                                       0 /* server went last */);",
          "922:         }",
          "",
          "[Removed Lines]",
          "915:             do_connect_step(&client, phase);",
          "919:             do_connect_step(&server, phase);",
          "",
          "[Added Lines]",
          "948:             do_connect_step(test_ctx, &client, phase);",
          "952:             do_connect_step(test_ctx, &server, phase);",
          "",
          "---------------"
        ],
        "test/ssl-tests/17-renegotiate.conf||test/ssl-tests/17-renegotiate.conf": [
          "File: test/ssl-tests/17-renegotiate.conf -> test/ssl-tests/17-renegotiate.conf",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: # Generated with generate_ssl_tests.pl",
          "6: # ===========================================================",
          "16: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "17: CipherString = DEFAULT",
          "18: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "21: CipherString = DEFAULT",
          "22: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "23: VerifyMode = Peer",
          "25: [test-0]",
          "26: ExpectedResult = Success",
          "28: Method = TLS",
          "",
          "[Removed Lines]",
          "3: num_tests = 1",
          "5: test-0 = 0-renegotiate",
          "8: [0-renegotiate]",
          "9: ssl_conf = 0-renegotiate-ssl",
          "11: [0-renegotiate-ssl]",
          "12: server = 0-renegotiate-server",
          "13: client = 0-renegotiate-client",
          "15: [0-renegotiate-server]",
          "20: [0-renegotiate-client]",
          "27: HandshakeMode = Renegotiate",
          "",
          "[Added Lines]",
          "3: num_tests = 4",
          "5: test-0 = 0-renegotiate-client-no-resume",
          "6: test-1 = 1-renegotiate-client-resume",
          "7: test-2 = 2-renegotiate-server-no-resume",
          "8: test-3 = 3-renegotiate-server-resume",
          "11: [0-renegotiate-client-no-resume]",
          "12: ssl_conf = 0-renegotiate-client-no-resume-ssl",
          "14: [0-renegotiate-client-no-resume-ssl]",
          "15: server = 0-renegotiate-client-no-resume-server",
          "16: client = 0-renegotiate-client-no-resume-client",
          "18: [0-renegotiate-client-no-resume-server]",
          "21: Options = NoResumptionOnRenegotiation",
          "24: [0-renegotiate-client-no-resume-client]",
          "31: HandshakeMode = RenegotiateClient",
          "33: ResumptionExpected = No",
          "36: # ===========================================================",
          "38: [1-renegotiate-client-resume]",
          "39: ssl_conf = 1-renegotiate-client-resume-ssl",
          "41: [1-renegotiate-client-resume-ssl]",
          "42: server = 1-renegotiate-client-resume-server",
          "43: client = 1-renegotiate-client-resume-client",
          "45: [1-renegotiate-client-resume-server]",
          "46: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "47: CipherString = DEFAULT",
          "48: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "50: [1-renegotiate-client-resume-client]",
          "51: CipherString = DEFAULT",
          "52: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "53: VerifyMode = Peer",
          "55: [test-1]",
          "56: ExpectedResult = Success",
          "57: HandshakeMode = RenegotiateClient",
          "58: Method = TLS",
          "59: ResumptionExpected = Yes",
          "62: # ===========================================================",
          "64: [2-renegotiate-server-no-resume]",
          "65: ssl_conf = 2-renegotiate-server-no-resume-ssl",
          "67: [2-renegotiate-server-no-resume-ssl]",
          "68: server = 2-renegotiate-server-no-resume-server",
          "69: client = 2-renegotiate-server-no-resume-client",
          "71: [2-renegotiate-server-no-resume-server]",
          "72: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "73: CipherString = DEFAULT",
          "74: Options = NoResumptionOnRenegotiation",
          "75: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "77: [2-renegotiate-server-no-resume-client]",
          "78: CipherString = DEFAULT",
          "79: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "80: VerifyMode = Peer",
          "82: [test-2]",
          "83: ExpectedResult = Success",
          "84: HandshakeMode = RenegotiateServer",
          "85: Method = TLS",
          "86: ResumptionExpected = No",
          "89: # ===========================================================",
          "91: [3-renegotiate-server-resume]",
          "92: ssl_conf = 3-renegotiate-server-resume-ssl",
          "94: [3-renegotiate-server-resume-ssl]",
          "95: server = 3-renegotiate-server-resume-server",
          "96: client = 3-renegotiate-server-resume-client",
          "98: [3-renegotiate-server-resume-server]",
          "99: Certificate = ${ENV::TEST_CERTS_DIR}/servercert.pem",
          "100: CipherString = DEFAULT",
          "101: PrivateKey = ${ENV::TEST_CERTS_DIR}/serverkey.pem",
          "103: [3-renegotiate-server-resume-client]",
          "104: CipherString = DEFAULT",
          "105: VerifyCAFile = ${ENV::TEST_CERTS_DIR}/rootcert.pem",
          "106: VerifyMode = Peer",
          "108: [test-3]",
          "109: ExpectedResult = Success",
          "110: HandshakeMode = RenegotiateServer",
          "111: Method = TLS",
          "112: ResumptionExpected = Yes",
          "",
          "---------------"
        ],
        "test/ssl-tests/17-renegotiate.conf.in||test/ssl-tests/17-renegotiate.conf.in": [
          "File: test/ssl-tests/17-renegotiate.conf.in -> test/ssl-tests/17-renegotiate.conf.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: our @tests = (",
          "19:     {",
          "21:         server => {},",
          "22:         client => {},",
          "23:         test => {",
          "24:             \"Method\" => \"TLS\",",
          "26:             \"ExpectedResult\" => \"Success\"",
          "27:         }",
          "28:     },",
          "",
          "[Removed Lines]",
          "20:         name => \"renegotiate\",",
          "25:             \"HandshakeMode\" => \"Renegotiate\",",
          "",
          "[Added Lines]",
          "20:         name => \"renegotiate-client-no-resume\",",
          "21:         server => {",
          "22:             \"Options\" => \"NoResumptionOnRenegotiation\"",
          "23:         },",
          "24:         client => {},",
          "25:         test => {",
          "26:             \"Method\" => \"TLS\",",
          "27:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "28:             \"ResumptionExpected\" => \"No\",",
          "29:             \"ExpectedResult\" => \"Success\"",
          "30:         }",
          "31:     },",
          "32:     {",
          "33:         name => \"renegotiate-client-resume\",",
          "34:         server => {},",
          "35:         client => {},",
          "36:         test => {",
          "37:             \"Method\" => \"TLS\",",
          "38:             \"HandshakeMode\" => \"RenegotiateClient\",",
          "39:             \"ResumptionExpected\" => \"Yes\",",
          "40:             \"ExpectedResult\" => \"Success\"",
          "41:         }",
          "42:     },",
          "43:     {",
          "44:         name => \"renegotiate-server-no-resume\",",
          "45:         server => {",
          "46:             \"Options\" => \"NoResumptionOnRenegotiation\"",
          "47:         },",
          "48:         client => {},",
          "49:         test => {",
          "50:             \"Method\" => \"TLS\",",
          "51:             \"HandshakeMode\" => \"RenegotiateServer\",",
          "52:             \"ResumptionExpected\" => \"No\",",
          "53:             \"ExpectedResult\" => \"Success\"",
          "54:         }",
          "55:     },",
          "56:     {",
          "57:         name => \"renegotiate-server-resume\",",
          "62:             \"HandshakeMode\" => \"RenegotiateServer\",",
          "63:             \"ResumptionExpected\" => \"Yes\",",
          "",
          "---------------"
        ],
        "test/ssl_test_ctx.c||test/ssl_test_ctx.c": [
          "File: test/ssl_test_ctx.c -> test/ssl_test_ctx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339: static const test_enum ssl_handshake_modes[] = {",
          "340:     {\"Simple\", SSL_TEST_HANDSHAKE_SIMPLE},",
          "341:     {\"Resume\", SSL_TEST_HANDSHAKE_RESUME},",
          "343: };",
          "345: __owur static int parse_handshake_mode(SSL_TEST_CTX *test_ctx, const char *value)",
          "",
          "[Removed Lines]",
          "342:     {\"Renegotiate\", SSL_TEST_HANDSHAKE_RENEGOTIATE},",
          "",
          "[Added Lines]",
          "342:     {\"RenegotiateServer\", SSL_TEST_HANDSHAKE_RENEG_SERVER},",
          "343:     {\"RenegotiateClient\", SSL_TEST_HANDSHAKE_RENEG_CLIENT},",
          "",
          "---------------"
        ],
        "test/ssl_test_ctx.h||test/ssl_test_ctx.h": [
          "File: test/ssl_test_ctx.h -> test/ssl_test_ctx.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: typedef enum {",
          "58:     SSL_TEST_HANDSHAKE_RESUME,",
          "60: } ssl_handshake_mode_t;",
          "62: typedef enum {",
          "",
          "[Removed Lines]",
          "59:     SSL_TEST_HANDSHAKE_RENEGOTIATE",
          "",
          "[Added Lines]",
          "59:     SSL_TEST_HANDSHAKE_RENEG_SERVER,",
          "60:     SSL_TEST_HANDSHAKE_RENEG_CLIENT",
          "",
          "---------------"
        ]
      }
    }
  ]
}