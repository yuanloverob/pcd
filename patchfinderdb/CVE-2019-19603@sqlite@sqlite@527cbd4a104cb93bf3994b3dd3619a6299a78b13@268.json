{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e087a7c35b1bedfb37c2b41baac77e794ed89f63",
      "candidate_info": {
        "commit_hash": "e087a7c35b1bedfb37c2b41baac77e794ed89f63",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e087a7c35b1bedfb37c2b41baac77e794ed89f63",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/windowB.test"
        ],
        "message": "Fix the windowB test module so that it works even if SQLite is built without JSON support.\n\nFossilOrigin-Name: 807975c76b36347f02aa0ce9661d608adbffe1f7e77c15f8da677e47e1187153",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/windowB.test||test/windowB.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ba2ebc3a348decc5cedaf14960e30e7ae26a26824cfa198727f2499162142ef3",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/windowB.test||test/windowB.test": [
          "File: test/windowB.test -> test/windowB.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "87:   INSERT INTO testjson VALUES(2, '{\"b\":2}');",
          "88: }",
          "102: }",
          "105: finish_test",
          "",
          "[Removed Lines]",
          "90: do_execsql_test 3.1 {",
          "91:   SELECT json_group_array(json(j)) FROM testjson;",
          "92: } {",
          "93:   {[{\"a\":1},{\"b\":2}]}",
          "94: }",
          "96: breakpoint",
          "97: do_execsql_test 3.2 {",
          "98:   SELECT json_group_array(json(j)) OVER (ORDER BY id) FROM testjson;",
          "99: } {",
          "100:   {[{\"a\":1}]}",
          "101:   {[{\"a\":1},{\"b\":2}]}",
          "",
          "[Added Lines]",
          "90: ifcapable json1 {",
          "91:   do_execsql_test 3.1 {",
          "92:     SELECT json_group_array(json(j)) FROM testjson;",
          "93:   } {",
          "94:     {[{\"a\":1},{\"b\":2}]}",
          "95:   }",
          "97:   do_execsql_test 3.2 {",
          "98:     SELECT json_group_array(json(j)) OVER (ORDER BY id) FROM testjson;",
          "99:   } {",
          "100:     {[{\"a\":1}]}",
          "101:     {[{\"a\":1},{\"b\":2}]}",
          "102:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ad35d980bd7cb4192cee33d173b229d69352ce9",
      "candidate_info": {
        "commit_hash": "2ad35d980bd7cb4192cee33d173b229d69352ce9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2ad35d980bd7cb4192cee33d173b229d69352ce9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/sqlite.h.in"
        ],
        "message": "Documentation updates for the SQLITE_DIRECTONLY flag.\n\nFossilOrigin-Name: 5beb6dc9bc2d3d0003e33488df9c01aaf28c41c30fd9ca35543cbe3ec5a8d9ce",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/sqlite.h.in||src/sqlite.h.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ca564d4b5b19fe56842a04f31bb61352e6ae9d72a7e7634eb27ebcf5f670545a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in"
        ]
      }
    },
    {
      "candidate_hash": "fb34559eb1dd48e005ea2e0cae568fdcf4d7aa1e",
      "candidate_info": {
        "commit_hash": "fb34559eb1dd48e005ea2e0cae568fdcf4d7aa1e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fb34559eb1dd48e005ea2e0cae568fdcf4d7aa1e",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/parse.y",
          "src/shell.c.in",
          "src/sqliteInt.h",
          "src/vacuum.c",
          "src/vdbe.c",
          "test/shell1.test",
          "test/vacuum-into.test"
        ],
        "message": "Add support for the VACUUM INTO command.\n\nFossilOrigin-Name: 77f150b8b46761f4f62f9d8926c10a95a70589a4525393fc16b321bd98c083a7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y",
          "src/shell.c.in||src/shell.c.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vacuum.c||src/vacuum.c",
          "src/vdbe.c||src/vdbe.c",
          "test/shell1.test||test/shell1.test",
          "test/vacuum-into.test||test/vacuum-into.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b7bf3c9832bde26b359f4d58ebcf7788c500586d311387d022192ed65a126252",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "1368: %ifndef SQLITE_OMIT_VACUUM",
          "1369: %ifndef SQLITE_OMIT_ATTACH",
          "1372: %endif  SQLITE_OMIT_ATTACH",
          "1373: %endif  SQLITE_OMIT_VACUUM",
          "",
          "[Removed Lines]",
          "1370: cmd ::= VACUUM.                {sqlite3Vacuum(pParse,0);}",
          "1371: cmd ::= VACUUM nm(X).          {sqlite3Vacuum(pParse,&X);}",
          "",
          "[Added Lines]",
          "1370: %type vinto {Expr*}",
          "1371: %destructor vinto {sqlite3ExprDelete(pParse->db, $$);}",
          "1372: cmd ::= VACUUM vinto(Y).                {sqlite3Vacuum(pParse,0,Y);}",
          "1373: cmd ::= VACUUM nm(X) vinto(Y).          {sqlite3Vacuum(pParse,&X,Y);}",
          "1374: vinto(A) ::= INTO expr(X).              {A = X;}",
          "1375: vinto(A) ::= .                          {A = 0;}",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3377: #endif",
          "3378:   \".backup ?DB? FILE        Backup DB (default \\\"main\\\") to FILE\",",
          "3379:   \"       --append            Use the appendvfs\",",
          "3380:   \".bail on|off             Stop after hitting an error.  Default OFF\",",
          "3381:   \".binary on|off           Turn binary output on or off.  Default OFF\",",
          "3382:   \".cd DIRECTORY            Change the working directory to DIRECTORY\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3380:   \"       --async             Write to FILE without a journal and without fsync()\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "5840:     sqlite3 *pDest;",
          "5841:     sqlite3_backup *pBackup;",
          "5842:     int j;",
          "5843:     const char *zVfs = 0;",
          "5844:     for(j=1; j<nArg; j++){",
          "5845:       const char *z = azArg[j];",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5844:     int bAsync = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5848:         if( strcmp(z, \"-append\")==0 ){",
          "5849:           zVfs = \"apndvfs\";",
          "5850:         }else",
          "5851:         {",
          "5852:           utf8_printf(stderr, \"unknown option: %s\\n\", azArg[j]);",
          "5853:           return 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5853:         if( strcmp(z, \"-async\")==0 ){",
          "5854:           bAsync = 1;",
          "5855:         }else",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5858:         zDb = zDestFile;",
          "5859:         zDestFile = azArg[j];",
          "5860:       }else{",
          "5862:         return 1;",
          "5863:       }",
          "5864:     }",
          "",
          "[Removed Lines]",
          "5861:         raw_printf(stderr, \"Usage: .backup ?DB? ?--append? FILENAME\\n\");",
          "",
          "[Added Lines]",
          "5866:         raw_printf(stderr, \"Usage: .backup ?DB? ?OPTIONS? FILENAME\\n\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5874:       close_db(pDest);",
          "5875:       return 1;",
          "5876:     }",
          "5877:     open_db(p, 0);",
          "5878:     pBackup = sqlite3_backup_init(pDest, \"main\", p->db, zDb);",
          "5879:     if( pBackup==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5882:     if( bAsync ){",
          "5883:       sqlite3_exec(pDest, \"PRAGMA synchronous=OFF; PRAGMA journal_mode=OFF;\",",
          "5884:                    0, 0, 0);",
          "5885:     }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "3985: Index *sqlite3FindIndex(sqlite3*,const char*, const char*);",
          "3986: void sqlite3UnlinkAndDeleteTable(sqlite3*,int,const char*);",
          "3987: void sqlite3UnlinkAndDeleteIndex(sqlite3*,int,const char*);",
          "3990: char *sqlite3NameFromToken(sqlite3*, Token*);",
          "3991: int sqlite3ExprCompare(Parse*,Expr*, Expr*, int);",
          "3992: int sqlite3ExprCompareSkip(Expr*, Expr*, int);",
          "",
          "[Removed Lines]",
          "3988: void sqlite3Vacuum(Parse*,Token*);",
          "3989: int sqlite3RunVacuum(char**, sqlite3*, int);",
          "",
          "[Added Lines]",
          "3988: void sqlite3Vacuum(Parse*,Token*,Expr*);",
          "3989: int sqlite3RunVacuum(char**, sqlite3*, int, sqlite3_value*);",
          "",
          "---------------"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "106:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "107:   int iDb = 0;",
          "109:   if( pNm ){",
          "110: #ifndef SQLITE_BUG_COMPATIBLE_20160819",
          "113:     iDb = sqlite3TwoPartName(pParse, pNm, pNm, &pNm);",
          "115: #else",
          "",
          "[Removed Lines]",
          "105: void sqlite3Vacuum(Parse *pParse, Token *pNm){",
          "108:   if( v==0 ) return;",
          "114:     if( iDb<0 ) return;",
          "",
          "[Added Lines]",
          "105: void sqlite3Vacuum(Parse *pParse, Token *pNm, Expr *pInto){",
          "108:   if( v==0 ) goto build_vacuum_end;",
          "114:     if( iDb<0 ) goto build_vacuum_end;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "123: #endif",
          "124:   }",
          "125:   if( iDb!=1 ){",
          "127:     sqlite3VdbeUsesBtree(v, iDb);",
          "128:   }",
          "129:   return;",
          "130: }",
          "",
          "[Removed Lines]",
          "126:     sqlite3VdbeAddOp1(v, OP_Vacuum, iDb);",
          "135: int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db, int iDb){",
          "",
          "[Added Lines]",
          "126:     int iIntoReg = 0;",
          "127:     if( pInto ){",
          "128:       iIntoReg = ++pParse->nMem;",
          "129:       sqlite3ExprCode(pParse, pInto, iIntoReg);",
          "130:     }",
          "131:     sqlite3VdbeAddOp2(v, OP_Vacuum, iDb, iIntoReg);",
          "134: build_vacuum_end:",
          "135:   sqlite3ExprDelete(pParse->db, pInto);",
          "142: int sqlite3RunVacuum(",
          "147: ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:     sqlite3SetString(pzErrMsg, db,\"cannot VACUUM - SQL statements in progress\");",
          "156:     return SQLITE_ERROR;",
          "157:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:   if( pOut ){",
          "172:     if( sqlite3_value_type(pOut)!=SQLITE_TEXT ){",
          "173:       sqlite3SetString(pzErrMsg, db, \"non-text filename\");",
          "174:       return SQLITE_ERROR;",
          "175:     }",
          "176:     zOut = (const char*)sqlite3_value_text(pOut);",
          "177:   }else{",
          "178:     zOut = \"\";",
          "179:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "191:   nDb = db->nDb;",
          "193:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "194:   assert( (db->nDb-1)==nDb );",
          "195:   pDb = &db->aDb[nDb];",
          "196:   assert( strcmp(pDb->zDbSName,\"vacuum_db\")==0 );",
          "197:   pTemp = pDb->pBt;",
          "198:   nRes = sqlite3BtreeGetOptimalReserve(pMain);",
          "",
          "[Removed Lines]",
          "192:   rc = execSql(db, pzErrMsg, \"ATTACH''AS vacuum_db\");",
          "",
          "[Added Lines]",
          "214:   rc = execSqlF(db, pzErrMsg, \"ATTACH %Q AS vacuum_db\", zOut);",
          "220:   if( pOut ){",
          "221:     sqlite3_file *id = sqlite3PagerFile(sqlite3BtreePager(pTemp));",
          "222:     i64 sz = 0;",
          "223:     if( id->pMethods!=0 && (sqlite3OsFileSize(id, &sz)!=SQLITE_OK || sz>0) ){",
          "224:       rc = SQLITE_ERROR;",
          "225:       sqlite3SetString(pzErrMsg, db, \"output file already exists\");",
          "226:       goto end_of_vacuum;",
          "227:     }",
          "228:   }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "219:   rc = execSql(db, pzErrMsg, \"BEGIN\");",
          "220:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "222:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "",
          "[Removed Lines]",
          "221:   rc = sqlite3BtreeBeginTrans(pMain, 2, 0);",
          "",
          "[Added Lines]",
          "252:   rc = sqlite3BtreeBeginTrans(pMain, pOut==0 ? 2 : 0, 0);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "313:     };",
          "315:     assert( 1==sqlite3BtreeIsInTrans(pTemp) );",
          "319:     for(i=0; i<ArraySize(aCopy); i+=2){",
          "",
          "[Removed Lines]",
          "316:     assert( 1==sqlite3BtreeIsInTrans(pMain) );",
          "",
          "[Added Lines]",
          "347:     assert( pOut!=0 || 1==sqlite3BtreeIsInTrans(pMain) );",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "324:       if( NEVER(rc!=SQLITE_OK) ) goto end_of_vacuum;",
          "325:     }",
          "328:     if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "329:     rc = sqlite3BtreeCommit(pTemp);",
          "330:     if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "331: #ifndef SQLITE_OMIT_AUTOVACUUM",
          "333: #endif",
          "334:   }",
          "336:   assert( rc==SQLITE_OK );",
          "339: end_of_vacuum:",
          "",
          "[Removed Lines]",
          "327:     rc = sqlite3BtreeCopyFile(pMain, pTemp);",
          "332:     sqlite3BtreeSetAutoVacuum(pMain, sqlite3BtreeGetAutoVacuum(pTemp));",
          "337:   rc = sqlite3BtreeSetPageSize(pMain, sqlite3BtreeGetPageSize(pTemp), nRes,1);",
          "",
          "[Added Lines]",
          "358:     if( pOut==0 ){",
          "359:       rc = sqlite3BtreeCopyFile(pMain, pTemp);",
          "360:     }",
          "365:     if( pOut==0 ){",
          "366:       sqlite3BtreeSetAutoVacuum(pMain, sqlite3BtreeGetAutoVacuum(pTemp));",
          "367:     }",
          "372:   if( pOut==0 ){",
          "373:     rc = sqlite3BtreeSetPageSize(pMain, sqlite3BtreeGetPageSize(pTemp), nRes,1);",
          "374:   }",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6686: #if !defined(SQLITE_OMIT_VACUUM) && !defined(SQLITE_OMIT_ATTACH)",
          "6692: case OP_Vacuum: {",
          "6693:   assert( p->readOnly==0 );",
          "6695:   if( rc ) goto abort_due_to_error;",
          "6696:   break;",
          "6697: }",
          "",
          "[Removed Lines]",
          "6694:   rc = sqlite3RunVacuum(&p->zErrMsg, db, pOp->p1);",
          "",
          "[Added Lines]",
          "6698:   rc = sqlite3RunVacuum(&p->zErrMsg, db, pOp->p1,",
          "6699:                         pOp->p2 ? &aMem[pOp->p2] : 0);",
          "",
          "---------------"
        ],
        "test/shell1.test||test/shell1.test": [
          "File: test/shell1.test -> test/shell1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "256: do_test shell1-3.1.4 {",
          "257:   # too many arguments",
          "258:   catchcmd \"test.db\" \".backup FOO BAR BAD\"",
          "261: # .bail ON|OFF           Stop after hitting an error.  Default OFF",
          "262: do_test shell1-3.2.1 {",
          "",
          "[Removed Lines]",
          "259: } {1 {Usage: .backup ?DB? ?--append? FILENAME}}",
          "",
          "[Added Lines]",
          "259: } {1 {Usage: .backup ?DB? ?OPTIONS? FILENAME}}",
          "",
          "---------------"
        ],
        "test/vacuum-into.test||test/vacuum-into.test": [
          "File: test/vacuum-into.test -> test/vacuum-into.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018-12-07",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is testing the VACUUM INTO statement.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "18: # If the VACUUM statement is disabled in the current build, skip all",
          "19: # the tests in this file.",
          "20: #",
          "21: ifcapable {!vacuum} {",
          "22:   omit_test vacuum.test {Compiled with SQLITE_OMIT_VACUUM}",
          "23:   finish_test",
          "24:   return",
          "25: }",
          "27: forcedelete out.db",
          "28: do_execsql_test vacuum-into-100 {",
          "29:   CREATE TABLE t1(a INTEGER PRIMARY KEY, b);",
          "30:   WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<100)",
          "31:   INSERT INTO t1(a,b) SELECT x, randomblob(600) FROM c;",
          "32:   CREATE INDEX t1b ON t1(b);",
          "33:   DELETE FROM t1 WHERE a%2;",
          "34:   SELECT count(*), sum(a), sum(length(b)) FROM t1;",
          "35: } {50 2550 30000}",
          "36: do_execsql_test vacuum-into-110 {",
          "37:   VACUUM main INTO 'out.db';",
          "38: } {}",
          "39: sqlite3 db2 out.db",
          "40: do_test vacuum-into-120 {",
          "41:   db2 eval {SELECT count(*), sum(a), sum(length(b)) FROM t1}",
          "42: } {50 2550 30000}",
          "43: do_catchsql_test vacuum-into-130 {",
          "44:   VACUUM INTO 'out.db';",
          "45: } {1 {output file already exists}}",
          "46: forcedelete out2.db",
          "47: do_catchsql_test vacuum-into-140 {",
          "48:   VACUUM INTO 'out2.db';",
          "49: } {0 {}}",
          "50: do_catchsql_test vacuum-into-150 {",
          "51:   VACUUM INTO 'out2.db';",
          "52: } {1 {output file already exists}}",
          "54: do_catchsql_test vacuum-into-200 {",
          "55:   VACUUM main INTO ':memory:';",
          "56: } {0 {}}",
          "58: # The INTO argument can be an arbitrary expression.",
          "59: #",
          "60: do_execsql_test vacuum-into-300 {",
          "61:   CREATE TABLE t2(name TEXT);",
          "62:   INSERT INTO t2 VALUES(':memory:');",
          "63:   VACUUM main INTO (SELECT name FROM t2);",
          "64: } {}",
          "65: do_catchsql_test vacuum-into-310 {",
          "66:   VACUUM INTO null;",
          "67: } {1 {non-text filename}}",
          "69: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "781b7ac3f6c61eb756740549ab10a14322210ad7",
      "candidate_info": {
        "commit_hash": "781b7ac3f6c61eb756740549ab10a14322210ad7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/781b7ac3f6c61eb756740549ab10a14322210ad7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/resolve.c",
          "test/window1.test"
        ],
        "message": "Fix a problem with a window function in a correlated sub-query where at least one reference to the outer SELECT appears in a FROM clause sub-select.\n\nFossilOrigin-Name: 9aca86f98388ff66b2bccb3fbfc486a3931398d2a8da139f905826ae2cdbb205",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/resolve.c||src/resolve.c",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c7b336181aac6785a515f275c0f50ad4bf2dee20abde959b56d968a7fdce3e5b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1425:     for(i=0; i<p->pSrc->nSrc; i++){",
          "1426:       struct SrcList_item *pItem = &p->pSrc->a[i];",
          "1430:         const char *zSavedContext = pParse->zAuthContext;",
          "",
          "[Removed Lines]",
          "1427:       if( pItem->pSelect ){",
          "",
          "[Added Lines]",
          "1427:       if( pItem->pSelect && (pItem->pSelect->selFlags & SF_Resolved)==0 ){",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "720:   ORDER BY 10+sum(a) OVER (ORDER BY a) DESC;",
          "721: } {16 13 11}",
          "750: #-------------------------------------------------------------------------",
          "751: # Test error cases from chaining window definitions.",
          "",
          "[Removed Lines]",
          "723: #-------------------------------------------------------------------------",
          "724: #",
          "725: reset_db",
          "726: do_execsql_test 18.0 {",
          "727:   CREATE TABLE t1 ( t1_id INTEGER PRIMARY KEY );",
          "728:   CREATE TABLE t2 ( t2_id INTEGER PRIMARY KEY );",
          "729:   CREATE TABLE t3 ( t3_id INTEGER PRIMARY KEY );",
          "731:   INSERT INTO t1 VALUES(1),  (3), (5);",
          "732:   INSERT INTO t2 VALUES      (3), (5);",
          "733:   INSERT INTO t3 VALUES(10), (11), (12);",
          "734: }",
          "736: do_execsql_test 18.1 {",
          "737:   SELECT t1.* FROM t1, t2 WHERE",
          "738:     t1_id=t2_id AND t1_id IN (",
          "739:         SELECT t1_id + row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "740:     )",
          "741: }",
          "743: do_execsql_test 18.2 {",
          "744:   SELECT t1.* FROM t1, t2 WHERE",
          "745:     t1_id=t2_id AND t1_id IN (",
          "746:         SELECT         row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "747:     )",
          "748: } {3}",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1035:   SELECT lead(44) OVER ()",
          "1036: } {{}}",
          "1039: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1012: #-------------------------------------------------------------------------",
          "1013: #",
          "1014: reset_db",
          "1015: do_execsql_test 25.0 {",
          "1016:   CREATE TABLE t1 ( t1_id INTEGER PRIMARY KEY );",
          "1017:   CREATE TABLE t2 ( t2_id INTEGER PRIMARY KEY );",
          "1018:   CREATE TABLE t3 ( t3_id INTEGER PRIMARY KEY );",
          "1020:   INSERT INTO t1 VALUES(1),  (3), (5);",
          "1021:   INSERT INTO t2 VALUES      (3), (5);",
          "1022:   INSERT INTO t3 VALUES(10), (11), (12);",
          "1023: }",
          "1025: do_execsql_test 25.1 {",
          "1026:   SELECT t1.* FROM t1, t2 WHERE",
          "1027:     t1_id=t2_id AND t1_id IN (",
          "1028:         SELECT t1_id + row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "1029:     )",
          "1030: }",
          "1032: do_execsql_test 25.2 {",
          "1033:   SELECT t1.* FROM t1, t2 WHERE",
          "1034:     t1_id=t2_id AND t1_id IN (",
          "1035:         SELECT         row_number() OVER ( ORDER BY t1_id ) FROM t3",
          "1036:     )",
          "1037: } {3}",
          "1039: #-------------------------------------------------------------------------",
          "1040: reset_db",
          "1041: do_execsql_test 26.0 {",
          "1042:   CREATE TABLE t1(x);",
          "1043:   CREATE TABLE t2(c);",
          "1044: }",
          "1046: do_execsql_test 26.1 {",
          "1047:   SELECT ( SELECT row_number() OVER () FROM ( SELECT c FROM t1 ) ) FROM t2",
          "1048: } {}",
          "1050: do_execsql_test 26.2 {",
          "1051:   INSERT INTO t1 VALUES(1), (2), (3), (4);",
          "1052:   INSERT INTO t2 VALUES(2), (6), (8), (4);",
          "1053:   SELECT c, c IN (",
          "1054:     SELECT row_number() OVER () FROM ( SELECT c FROM t1 )",
          "1055:   ) FROM t2",
          "1056: } {2 1  6 0  8 0  4 1}",
          "1058: do_execsql_test 26.3 {",
          "1059:   DELETE FROM t1;",
          "1060:   DELETE FROM t2;",
          "1062:   INSERT INTO t2 VALUES(1), (2), (3), (4);",
          "1063:   INSERT INTO t1 VALUES(1), (1), (2), (3), (3), (3), (3), (4), (4);",
          "1065:   SELECT c, c IN (",
          "1066:     SELECT row_number() OVER () FROM ( SELECT 1 FROM t1 WHERE x=c )",
          "1067:   ) FROM t2",
          "1068: } {1 1  2 0  3 1  4 0}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "79d8aa24f17b1d7f2743c1bcf823bc17489d14ec",
      "candidate_info": {
        "commit_hash": "79d8aa24f17b1d7f2743c1bcf823bc17489d14ec",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/79d8aa24f17b1d7f2743c1bcf823bc17489d14ec",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Fix a typo in the wapptest.tcl script.\n\nFossilOrigin-Name: 971b4422ae7a8eed67f5db62c0e1cc061faac9404ff5f7051d7e07decf2207a4",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d6131caf6471ad41fa5a28b0067d759ac1cc9dba1170678534488b416f9a1157",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "289:   wapptest_output $msg",
          "290:   if {[info exists G(test.$name.errmsg)] && $G(test.$name.errmsg)!=\"\"} {",
          "292:   }",
          "293: }",
          "",
          "[Removed Lines]",
          "291:     wapptest_output \"    $G(test.$config.errmsg)\"",
          "",
          "[Added Lines]",
          "291:     wapptest_output \"    $G(test.$name.errmsg)\"",
          "",
          "---------------"
        ]
      }
    }
  ]
}