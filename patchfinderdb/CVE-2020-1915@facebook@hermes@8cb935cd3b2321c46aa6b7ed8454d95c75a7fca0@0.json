{
  "cve_id": "CVE-2020-1915",
  "cve_desc": "An out-of-bounds read in the JavaScript Interpreter in Facebook Hermes prior to commit 8cb935cd3b2321c46aa6b7ed8454d95c75a7fca0 allows attackers to cause a denial of service attack or possible further memory corruption via crafted JavaScript. Note that this is only exploitable if the application using Hermes permits evaluation of untrusted JavaScript. Hence, most React Native applications are not affected.",
  "repo": "facebook/hermes",
  "patch_hash": "8cb935cd3b2321c46aa6b7ed8454d95c75a7fca0",
  "patch_info": {
    "commit_hash": "8cb935cd3b2321c46aa6b7ed8454d95c75a7fca0",
    "repo": "facebook/hermes",
    "commit_url": "https://github.com/facebook/hermes/commit/8cb935cd3b2321c46aa6b7ed8454d95c75a7fca0",
    "files": [
      "lib/VM/JSObject.cpp",
      "test/hermes/proxy.js"
    ],
    "message": "Handle set where internalSetter and Proxy are both true\n\nSummary:\nIf putComputed is called on a proxy whose target's prototype\nis an array with a propname of 'length', then internalSetter will be\ntrue, and the receiver will be a proxy.  In that case, proxy needs to\nwin; the behavior may assert or be UB otherwise.\n\nReviewed By: tmikov\n\nDifferential Revision: D23916279\n\nfbshipit-source-id: c760356d48a02ece565fb4bc1acdafd7ccad7c68",
    "before_after_code_files": [
      "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp",
      "test/hermes/proxy.js||test/hermes/proxy.js"
    ]
  },
  "patch_diff": {
    "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp": [
      "File: lib/VM/JSObject.cpp -> lib/VM/JSObject.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "1699:     if (LLVM_UNLIKELY(",
      "1700:             desc.flags.internalSetter || receiverHandle->isHostObject() ||",
      "1701:             receiverHandle->isProxyObject())) {",
      "1702:       SymbolID id{};",
      "1703:       LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, id);",
      "1704:       if (desc.flags.internalSetter) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1706:       if (receiverHandle->isProxyObject()) {",
      "1707:         if (*descDefinedRes) {",
      "1708:           dpf.setValue = 1;",
      "1709:         } else {",
      "1710:           dpf = DefinePropertyFlags::getDefaultNewPropertyFlags();",
      "1711:         }",
      "1712:         return JSProxy::defineOwnProperty(",
      "1713:             receiverHandle,",
      "1714:             runtime,",
      "1715:             nameValPrimitiveHandle,",
      "1716:             dpf,",
      "1717:             valueHandle,",
      "1718:             opFlags);",
      "1719:       }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1709:             desc.castToNamedPropertyDescriptorRef(),",
      "1710:             valueHandle,",
      "1711:             opFlags);",
      "1714:       }",
      "1715:       assert(",
      "1729:     }",
      "1730:   }",
      "",
      "[Removed Lines]",
      "1712:       } else if (receiverHandle->isHostObject()) {",
      "1713:         return vmcast<HostObject>(receiverHandle.get())->set(id, *valueHandle);",
      "1716:           receiverHandle->isProxyObject() && \"descriptor flags are impossible\");",
      "1717:       if (*descDefinedRes) {",
      "1718:         dpf.setValue = 1;",
      "1719:       } else {",
      "1720:         dpf = DefinePropertyFlags::getDefaultNewPropertyFlags();",
      "1721:       }",
      "1722:       return JSProxy::defineOwnProperty(",
      "1723:           receiverHandle,",
      "1724:           runtime,",
      "1725:           nameValPrimitiveHandle,",
      "1726:           dpf,",
      "1727:           valueHandle,",
      "1728:           opFlags);",
      "",
      "[Added Lines]",
      "1732:           receiverHandle->isHostObject() && \"descriptor flags are impossible\");",
      "1733:       return vmcast<HostObject>(receiverHandle.get())->set(id, *valueHandle);",
      "",
      "---------------"
    ],
    "test/hermes/proxy.js||test/hermes/proxy.js": [
      "File: test/hermes/proxy.js -> test/hermes/proxy.js",
      "--- Hunk 1 ---",
      "[Context before]",
      "2126: new Proxy([], {}).unshift(0);",
      "2128: print('done');",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2132: var p = new Proxy(Object.create([]), {});",
      "2134: p[String('length')] = 0x123;",
      "2135: p[0xABC] = 1111;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6b5284b263ea7ee2f4057c6d500b657ca9b51b34",
      "candidate_info": {
        "commit_hash": "6b5284b263ea7ee2f4057c6d500b657ca9b51b34",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/6b5284b263ea7ee2f4057c6d500b657ca9b51b34",
        "files": [
          "include/hermes/VM/JSObject.h",
          "lib/VM/JSObject.cpp"
        ],
        "message": "implement get and put receivers\n\nSummary:\nReceivers are a new concept which didn't exist in ES5.  Some\n(a lot) of the changes here are related changes to implement ES9\nOrdinarySet, which are a combination of adding support for Proxy and\nReceiver, and normative restructuring.  I'm convinced this is correct,\nbut it took me a while to convince myself.  This diff does have some\nperf impact.  I tried a bunch of things to improve it, and some are\nincluded, but I couldn't avoid some perf-impacting changes.  There are\nsome optimizations later in the stack to mitigate the perf impact\nhere.\n\nReviewed By: avp\n\nDifferential Revision: D18284966\n\nfbshipit-source-id: c22a34575eafa98c732f9193a62b2a5decb96140",
        "before_after_code_files": [
          "include/hermes/VM/JSObject.h||include/hermes/VM/JSObject.h",
          "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp"
          ],
          "candidate": [
            "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp"
          ]
        }
      },
      "candidate_diff": {
        "include/hermes/VM/JSObject.h||include/hermes/VM/JSObject.h": [
          "File: include/hermes/VM/JSObject.h -> include/hermes/VM/JSObject.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "733:       PropOpFlags opFlags = PropOpFlags(),",
          "734:       PropertyCacheEntry *cacheEntry = nullptr);",
          "738:   static CallResult<HermesValue> getNamedOrIndexed(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "742:   static CallResult<HermesValue> getNamedWithReceiver_RJS(",
          "743:       Handle<JSObject> selfHandle,",
          "744:       Runtime *runtime,",
          "745:       SymbolID name,",
          "746:       Handle<> receiver,",
          "747:       PropOpFlags opFlags = PropOpFlags(),",
          "748:       PropertyCacheEntry *cacheEntry = nullptr);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "748:       Runtime *runtime,",
          "749:       Handle<> nameValHandle);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "767:   static CallResult<HermesValue> getComputedWithReceiver_RJS(",
          "768:       Handle<JSObject> selfHandle,",
          "769:       Runtime *runtime,",
          "770:       Handle<> nameValHandle,",
          "771:       Handle<> receiver);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "778:       Handle<> valueHandle,",
          "779:       PropOpFlags opFlags = PropOpFlags());",
          "782:   static CallResult<bool> putNamedOrIndexed(",
          "783:       Handle<JSObject> selfHandle,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "804:   static CallResult<bool> putNamedWithReceiver_RJS(",
          "805:       Handle<JSObject> selfHandle,",
          "806:       Runtime *runtime,",
          "807:       SymbolID name,",
          "808:       Handle<> valueHandle,",
          "809:       Handle<> receiver,",
          "810:       PropOpFlags opFlags = PropOpFlags());",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "794:       Handle<> valueHandle,",
          "795:       PropOpFlags opFlags = PropOpFlags());",
          "798:   static CallResult<bool> deleteNamed(",
          "799:       Handle<JSObject> selfHandle,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "830:   static CallResult<bool> putComputedWithReceiver_RJS(",
          "831:       Handle<JSObject> selfHandle,",
          "832:       Runtime *runtime,",
          "833:       Handle<> nameValHandle,",
          "834:       Handle<> valueHandle,",
          "835:       Handle<> receiver,",
          "836:       PropOpFlags opFlags = PropOpFlags());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1391:       selfHandle, runtime, name, PropertyFlags::invalid(), desc);",
          "1392: }",
          "1394: inline std::pair<uint32_t, uint32_t> JSObject::getOwnIndexedRange(",
          "1395:     JSObject *self,",
          "1396:     Runtime *runtime) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1435: inline CallResult<HermesValue> JSObject::getNamed_RJS(",
          "1436:     Handle<JSObject> selfHandle,",
          "1437:     Runtime *runtime,",
          "1438:     SymbolID name,",
          "1439:     PropOpFlags opFlags,",
          "1440:     PropertyCacheEntry *cacheEntry) {",
          "1441:   return getNamedWithReceiver_RJS(",
          "1442:       selfHandle, runtime, name, selfHandle, opFlags, cacheEntry);",
          "1443: }",
          "1445: inline CallResult<HermesValue> JSObject::getComputed_RJS(",
          "1446:     Handle<JSObject> selfHandle,",
          "1447:     Runtime *runtime,",
          "1448:     Handle<> nameValHandle) {",
          "1449:   return getComputedWithReceiver_RJS(",
          "1450:       selfHandle, runtime, nameValHandle, selfHandle);",
          "1451: }",
          "1453: inline CallResult<bool> JSObject::putNamed_RJS(",
          "1454:     Handle<JSObject> selfHandle,",
          "1455:     Runtime *runtime,",
          "1456:     SymbolID name,",
          "1457:     Handle<> valueHandle,",
          "1458:     PropOpFlags opFlags) {",
          "1459:   return putNamedWithReceiver_RJS(",
          "1460:       selfHandle, runtime, name, valueHandle, selfHandle, opFlags);",
          "1461: }",
          "1463: inline CallResult<bool> JSObject::putComputed_RJS(",
          "1464:     Handle<JSObject> selfHandle,",
          "1465:     Runtime *runtime,",
          "1466:     Handle<> nameValHandle,",
          "1467:     Handle<> valueHandle,",
          "1468:     PropOpFlags opFlags) {",
          "1469:   return putComputedWithReceiver_RJS(",
          "1470:       selfHandle, runtime, nameValHandle, valueHandle, selfHandle, opFlags);",
          "1471: }",
          "",
          "---------------"
        ],
        "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp": [
          "File: lib/VM/JSObject.cpp -> lib/VM/JSObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:   return ExecutionStatus::RETURNED;",
          "935: }",
          "938:     Handle<JSObject> selfHandle,",
          "939:     Runtime *runtime,",
          "940:     SymbolID name,",
          "941:     PropOpFlags opFlags,",
          "942:     PropertyCacheEntry *cacheEntry) {",
          "943:   NamedPropertyDescriptor desc;",
          "947:   JSObject *propObj = getNamedDescriptor(selfHandle, runtime, name, desc);",
          "",
          "[Removed Lines]",
          "937: CallResult<HermesValue> JSObject::getNamed_RJS(",
          "",
          "[Added Lines]",
          "937: CallResult<HermesValue> JSObject::getNamedWithReceiver_RJS(",
          "941:     Handle<> receiver,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "974:     return Callable::executeCall0(",
          "976:   } else {",
          "977:     assert(desc.flags.hostObject && \"descriptor flags are impossible\");",
          "978:     return vmcast<HostObject>(propObj)->get(name);",
          "",
          "[Removed Lines]",
          "975:         runtime->makeHandle(accessor->getter), runtime, selfHandle);",
          "",
          "[Added Lines]",
          "975:         runtime->makeHandle(accessor->getter), runtime, receiver);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1001:   return getNamed_RJS(selfHandle, runtime, name, opFlags);",
          "1002: }",
          "1005:     Handle<JSObject> selfHandle,",
          "1006:     Runtime *runtime,",
          "1010:   if (selfHandle->flags_.fastIndexProperties) {",
          "",
          "[Removed Lines]",
          "1004: CallResult<HermesValue> JSObject::getComputed_RJS(",
          "1007:     Handle<> nameValHandle) {",
          "",
          "[Added Lines]",
          "1004: CallResult<HermesValue> JSObject::getComputedWithReceiver_RJS(",
          "1007:     Handle<> nameValHandle,",
          "1008:     Handle<> receiver) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1050:     return accessor->getter.get(runtime)->executeCall0(",
          "1052:   } else {",
          "1053:     assert(desc.flags.hostObject && \"descriptor flags are impossible\");",
          "1054:     MutableHandle<StringPrimitive> strPrim{runtime};",
          "",
          "[Removed Lines]",
          "1051:         runtime->makeHandle(accessor->getter), runtime, selfHandle);",
          "",
          "[Added Lines]",
          "1052:         runtime->makeHandle(accessor->getter), runtime, receiver);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1148:       TwineChar16(objName) + \".\" + TwineChar16(methodNameHnd.get()) + \"'\");",
          "1149: }",
          "1152:     Handle<JSObject> selfHandle,",
          "1153:     Runtime *runtime,",
          "1154:     SymbolID name,",
          "1155:     Handle<> valueHandle,",
          "1156:     PropOpFlags opFlags) {",
          "1157:   NamedPropertyDescriptor desc;",
          "",
          "[Removed Lines]",
          "1151: CallResult<bool> JSObject::putNamed_RJS(",
          "",
          "[Added Lines]",
          "1152: CallResult<bool> JSObject::putNamedWithReceiver_RJS(",
          "1157:     Handle<> receiver,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1184:       if (accessor->setter.get(runtime)->executeCall1(",
          "1185:               runtime->makeHandle(accessor->setter),",
          "1186:               runtime,",
          "1189:         return ExecutionStatus::EXCEPTION;",
          "1190:       }",
          "1191:       return true;",
          "1192:     }",
          "1194:     if (LLVM_UNLIKELY(!desc.flags.writable)) {",
          "1195:       if (desc.flags.staticBuiltin) {",
          "1196:         return raiseErrorForOverridingStaticBuiltin(",
          "",
          "[Removed Lines]",
          "1187:               selfHandle,",
          "",
          "[Added Lines]",
          "1189:               receiver,",
          "1201:     if (LLVM_LIKELY(",
          "1203:             selfHandle.getHermesValue().getRaw() == receiver->getRaw() &&",
          "1204:             !desc.flags.internalSetter && !desc.flags.hostObject &&",
          "1205:             desc.flags.writable)) {",
          "1206:       setNamedSlotValue(",
          "1208:       return true;",
          "1209:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1204:       return false;",
          "1205:     }",
          "1226:     }",
          "1227:   }",
          "1232:   if (LLVM_UNLIKELY(opFlags.getMustExist())) {",
          "",
          "[Removed Lines]",
          "1208:     if (propObj == *selfHandle) {",
          "1209:       if (LLVM_LIKELY(!desc.flags.internalSetter && !desc.flags.hostObject)) {",
          "1210:         setNamedSlotValue(*selfHandle, runtime, desc, *valueHandle);",
          "1211:         return true;",
          "1212:       }",
          "1213:       if (desc.flags.internalSetter) {",
          "1220:         return internalSetter(",
          "1221:             selfHandle, runtime, name, desc, valueHandle, opFlags);",
          "1222:       } else {",
          "1223:         assert(desc.flags.hostObject && \"descriptor flags are impossible\");",
          "1224:         return vmcast<HostObject>(selfHandle.get())->set(name, *valueHandle);",
          "1225:       }",
          "",
          "[Added Lines]",
          "1224:     if (*selfHandle == propObj && desc.flags.internalSetter) {",
          "1225:       return internalSetter(",
          "1226:           selfHandle, runtime, name, desc, valueHandle, opFlags);",
          "1233:   MutableHandle<JSObject> receiverHandle{runtime, *selfHandle};",
          "1234:   if (selfHandle.getHermesValue().getRaw() != receiver->getRaw() ||",
          "1235:       receiverHandle->isHostObject()) {",
          "1236:     if (selfHandle.getHermesValue().getRaw() != receiver->getRaw()) {",
          "1237:       receiverHandle = dyn_vmcast<JSObject>(*receiver);",
          "1238:     }",
          "1239:     if (!receiverHandle) {",
          "1240:       return false;",
          "1241:     }",
          "1243:     if (getOwnNamedDescriptor(receiverHandle, runtime, name, desc)) {",
          "1244:       if (LLVM_UNLIKELY(desc.flags.accessor || !desc.flags.writable)) {",
          "1245:         return false;",
          "1246:       }",
          "1248:       assert(",
          "1249:           !receiverHandle->isHostObject() &&",
          "1250:           \"getOwnNamedDescriptor never sets hostObject flag\");",
          "1252:       setNamedSlotValue(",
          "1254:       return true;",
          "1255:     }",
          "1260:     assert(desc.flags.hostObject && \"descriptor flags are impossible\");",
          "1261:     ComputedPropertyDescriptor desc;",
          "1262:     CallResult<bool> descDefinedRes = getOwnComputedPrimitiveDescriptor(",
          "1263:         receiverHandle,",
          "1264:         runtime,",
          "1265:         name.isUniqued() ? runtime->makeHandle(HermesValue::encodeStringValue(",
          "1266:                                runtime->getStringPrimFromSymbolID(name)))",
          "1267:                          : runtime->makeHandle(name),",
          "1268:         desc);",
          "1269:     if (LLVM_UNLIKELY(descDefinedRes == ExecutionStatus::EXCEPTION)) {",
          "1270:       return ExecutionStatus::EXCEPTION;",
          "1271:     }",
          "1273:     return vmcast<HostObject>(receiverHandle.get())->set(name, *valueHandle);",
          "1274:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1241:   return addOwnProperty(",
          "1243:       runtime,",
          "1244:       name,",
          "1245:       DefinePropertyFlags::getDefaultNewPropertyFlags(),",
          "",
          "[Removed Lines]",
          "1242:       selfHandle,",
          "",
          "[Added Lines]",
          "1287:       receiverHandle,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1272:   return putNamed_RJS(selfHandle, runtime, name, valueHandle, opFlags);",
          "1273: }",
          "1276:     Handle<JSObject> selfHandle,",
          "1277:     Runtime *runtime,",
          "1278:     Handle<> nameValHandle,",
          "1279:     Handle<> valueHandle,",
          "1280:     PropOpFlags opFlags) {",
          "1281:   assert(",
          "1282:       !opFlags.getMustExist() &&",
          "1283:       \"mustExist flag cannot be used with computed properties\");",
          "1287:   if (selfHandle->flags_.fastIndexProperties) {",
          "1288:     if (auto arrayIndex = toArrayIndexFastPath(*nameValHandle)) {",
          "1299:         }",
          "1301:       }",
          "1302:     }",
          "1303:   }",
          "",
          "[Removed Lines]",
          "1275: CallResult<bool> JSObject::putComputed_RJS(",
          "1289:       if (haveOwnIndexed(selfHandle.get(), runtime, *arrayIndex)) {",
          "1290:         auto result =",
          "1291:             setOwnIndexed(selfHandle, runtime, *arrayIndex, valueHandle);",
          "1292:         if (LLVM_UNLIKELY(result == ExecutionStatus::EXCEPTION))",
          "1293:           return ExecutionStatus::EXCEPTION;",
          "1294:         if (LLVM_LIKELY(*result))",
          "1295:           return true;",
          "1296:         if (opFlags.getThrowOnError()) {",
          "1298:           return runtime->raiseTypeError(\"Cannot assign to read-only property\");",
          "1300:         return false;",
          "",
          "[Added Lines]",
          "1320: CallResult<bool> JSObject::putComputedWithReceiver_RJS(",
          "1325:     Handle<> receiver,",
          "1336:       if (selfHandle.getHermesValue().getRaw() == receiver->getRaw()) {",
          "1337:         if (haveOwnIndexed(selfHandle.get(), runtime, *arrayIndex)) {",
          "1338:           auto result =",
          "1339:               setOwnIndexed(selfHandle, runtime, *arrayIndex, valueHandle);",
          "1340:           if (LLVM_UNLIKELY(result == ExecutionStatus::EXCEPTION))",
          "1341:             return ExecutionStatus::EXCEPTION;",
          "1342:           if (LLVM_LIKELY(*result))",
          "1343:             return true;",
          "1344:           if (opFlags.getThrowOnError()) {",
          "1346:             return runtime->raiseTypeError(",
          "1347:                 \"Cannot assign to read-only property\");",
          "1348:           }",
          "1349:           return false;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1338:       if (accessor->setter.get(runtime)->executeCall1(",
          "1339:               runtime->makeHandle(accessor->setter),",
          "1340:               runtime,",
          "1342:               valueHandle.get()) == ExecutionStatus::EXCEPTION) {",
          "1343:         return ExecutionStatus::EXCEPTION;",
          "1344:       }",
          "1345:       return true;",
          "1346:     }",
          "1348:     if (LLVM_UNLIKELY(!desc.flags.writable)) {",
          "1349:       if (desc.flags.staticBuiltin) {",
          "1350:         MutableHandle<StringPrimitive> strPrim{runtime};",
          "",
          "[Removed Lines]",
          "1341:               selfHandle,",
          "",
          "[Added Lines]",
          "1391:               receiver,",
          "1403:     if (LLVM_LIKELY(",
          "1404:             selfHandle == propObj &&",
          "1405:             selfHandle.getHermesValue().getRaw() == receiver->getRaw() &&",
          "1406:             !desc.flags.internalSetter && !desc.flags.hostObject &&",
          "1407:             desc.flags.writable)) {",
          "1408:       if (LLVM_UNLIKELY(",
          "1409:               setComputedSlotValue(selfHandle, runtime, desc, valueHandle) ==",
          "1410:               ExecutionStatus::EXCEPTION)) {",
          "1411:         return ExecutionStatus::EXCEPTION;",
          "1412:       }",
          "1413:       return true;",
          "1414:     }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1360:       return false;",
          "1361:     }",
          "1366:         if (LLVM_UNLIKELY(",
          "1368:                 ExecutionStatus::EXCEPTION)) {",
          "1369:           return ExecutionStatus::EXCEPTION;",
          "1370:         }",
          "1371:         return true;",
          "1372:       }",
          "1374:       MutableHandle<StringPrimitive> strPrim{runtime};",
          "1375:       SymbolID id{};",
          "1376:       LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, strPrim, id);",
          "1378:       if (desc.flags.internalSetter) {",
          "1379:         return internalSetter(",
          "1381:             runtime,",
          "1382:             id,",
          "1383:             desc.castToNamedPropertyDescriptorRef(),",
          "",
          "[Removed Lines]",
          "1364:     if (propObj == selfHandle) {",
          "1365:       if (LLVM_LIKELY(!desc.flags.internalSetter && !desc.flags.hostObject)) {",
          "1367:                 setComputedSlotValue(selfHandle, runtime, desc, valueHandle) ==",
          "1380:             selfHandle,",
          "",
          "[Added Lines]",
          "1431:     if (selfHandle == propObj && desc.flags.internalSetter) {",
          "1432:       MutableHandle<StringPrimitive> strPrim{runtime};",
          "1433:       SymbolID id{};",
          "1434:       LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, strPrim, id);",
          "1435:       return internalSetter(",
          "1436:           selfHandle,",
          "1437:           runtime,",
          "1438:           id,",
          "1439:           desc.castToNamedPropertyDescriptorRef(),",
          "1440:           valueHandle,",
          "1441:           opFlags);",
          "1442:     }",
          "1443:   }",
          "1448:   MutableHandle<JSObject> receiverHandle{runtime, *selfHandle};",
          "1449:   if (selfHandle.getHermesValue().getRaw() != receiver->getRaw() ||",
          "1450:       receiverHandle->isHostObject()) {",
          "1451:     if (selfHandle.getHermesValue().getRaw() != receiver->getRaw()) {",
          "1452:       receiverHandle = dyn_vmcast<JSObject>(*receiver);",
          "1453:     }",
          "1454:     if (!receiverHandle) {",
          "1455:       return false;",
          "1456:     }",
          "1457:     CallResult<bool> descDefinedRes = getOwnComputedPrimitiveDescriptor(",
          "1458:         receiverHandle, runtime, nameValPrimitiveHandle, desc);",
          "1459:     if (LLVM_UNLIKELY(descDefinedRes == ExecutionStatus::EXCEPTION)) {",
          "1460:       return ExecutionStatus::EXCEPTION;",
          "1461:     }",
          "1462:     if (*descDefinedRes) {",
          "1463:       if (LLVM_UNLIKELY(desc.flags.accessor || !desc.flags.writable)) {",
          "1464:         return false;",
          "1465:       }",
          "1467:       if (LLVM_LIKELY(",
          "1468:               !desc.flags.internalSetter && !receiverHandle->isHostObject())) {",
          "1470:                 setComputedSlotValue(",
          "1471:                     receiverHandle, runtime, desc, valueHandle) ==",
          "1477:     }",
          "1479:     if (LLVM_UNLIKELY(",
          "1480:             desc.flags.internalSetter || receiverHandle->isHostObject())) {",
          "1486:             receiverHandle,",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1385:             opFlags);",
          "1386:       } else {",
          "1387:         assert(desc.flags.hostObject && \"descriptor flags are impossible\");",
          "1389:       }",
          "1390:     }",
          "1391:   }",
          "1397:     if (opFlags.getThrowOnError()) {",
          "1398:       return runtime->raiseTypeError(",
          "1399:           \"cannot add a new property\"); // TODO: better message.",
          "",
          "[Removed Lines]",
          "1388:         return vmcast<HostObject>(selfHandle.get())->set(id, *valueHandle);",
          "1396:   if (!selfHandle->isExtensible()) {",
          "",
          "[Added Lines]",
          "1494:         return vmcast<HostObject>(receiverHandle.get())->set(id, *valueHandle);",
          "1500:   if (LLVM_UNLIKELY(!receiverHandle->isExtensible())) {",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1410:     OptValue<uint32_t> arrayIndex;",
          "1411:     TO_ARRAY_INDEX(runtime, nameValPrimitiveHandle, strPrim, arrayIndex);",
          "1412:     if (arrayIndex) {",
          "1415:         if (LLVM_UNLIKELY(*arrayIndex >= JSArray::getLength(array))) {",
          "1416:           auto cr = putNamed_RJS(",
          "1418:               runtime,",
          "1419:               Predefined::getSymbolID(Predefined::length),",
          "1420:               runtime->makeHandle(",
          "",
          "[Removed Lines]",
          "1409:   if (selfHandle->flags_.indexedStorage) {",
          "1414:       if (auto *array = dyn_vmcast<JSArray>(selfHandle.get())) {",
          "1417:               selfHandle,",
          "",
          "[Added Lines]",
          "1513:   if (receiverHandle->flags_.indexedStorage) {",
          "1518:       if (auto *array = dyn_vmcast<JSArray>(receiverHandle.get())) {",
          "1521:               receiverHandle,",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1428:       }",
          "1430:       auto result =",
          "1432:       if (LLVM_UNLIKELY(result == ExecutionStatus::EXCEPTION))",
          "1433:         return ExecutionStatus::EXCEPTION;",
          "1434:       if (LLVM_LIKELY(*result))",
          "",
          "[Removed Lines]",
          "1431:           setOwnIndexed(selfHandle, runtime, *arrayIndex, valueHandle);",
          "",
          "[Added Lines]",
          "1535:           setOwnIndexed(receiverHandle, runtime, *arrayIndex, valueHandle);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1448:   return addOwnProperty(",
          "1450:       runtime,",
          "1451:       id,",
          "1452:       DefinePropertyFlags::getDefaultNewPropertyFlags(),",
          "",
          "[Removed Lines]",
          "1449:       selfHandle,",
          "",
          "[Added Lines]",
          "1553:       receiverHandle,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d3aecf52f6636f9478e11aadcdd7a8f6556d9a99",
      "candidate_info": {
        "commit_hash": "d3aecf52f6636f9478e11aadcdd7a8f6556d9a99",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/d3aecf52f6636f9478e11aadcdd7a8f6556d9a99",
        "files": [
          "include/hermes/VM/JSObject.h",
          "lib/VM/JSObject.cpp"
        ],
        "message": "inline, save 160m insns\n\nSummary:\nThis one change, found while looking for inefficiencies in\nProxy, wins back any perf losses from Proxy itself.  I tried several\nways to avoid the copypasta, but all resulted in additional\nregressions.  I think this is the right tradeoff.\n\nReviewed By: tmikov\n\nDifferential Revision: D17968972\n\nfbshipit-source-id: dda9cb75a5f2c6dccea21528d442eb3aa3cd9c6b",
        "before_after_code_files": [
          "include/hermes/VM/JSObject.h||include/hermes/VM/JSObject.h",
          "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp"
          ],
          "candidate": [
            "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp"
          ]
        }
      },
      "candidate_diff": {
        "include/hermes/VM/JSObject.h||include/hermes/VM/JSObject.h": [
          "File: include/hermes/VM/JSObject.h -> include/hermes/VM/JSObject.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:       : JSObject(runtime, vtp, parent, clazz, GCPointerBase::NoBarriers()) {}",
          "341:  public:",
          "342: #ifdef HERMESVM_SERIALIZE",
          "344:   JSObject(Deserializer &d, const VTable *vtp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "347:   struct Helper;",
          "",
          "---------------"
        ],
        "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp": [
          "File: lib/VM/JSObject.cpp -> lib/VM/JSObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "713:   } while (0)",
          "",
          "[Removed Lines]",
          "699: #define LAZY_TO_IDENTIFIER(runtime, nameValHandle, str, id)           \\",
          "700:   do {                                                                \\",
          "701:     if (id.isInvalid()) {                                             \\",
          "702:       CallResult<Handle<SymbolID>> idRes{ExecutionStatus::EXCEPTION}; \\",
          "703:       if (str) {                                                      \\",
          "704:         idRes = stringToSymbolID(runtime, str);                       \\",
          "705:       } else {                                                        \\",
          "706:         idRes = valueToSymbolID(runtime, nameValHandle);              \\",
          "707:       }                                                               \\",
          "708:       if (LLVM_UNLIKELY(idRes == ExecutionStatus::EXCEPTION)) {       \\",
          "709:         return ExecutionStatus::EXCEPTION;                            \\",
          "710:       }                                                               \\",
          "711:       id = **idRes;                                                   \\",
          "712:     }                                                                 \\",
          "",
          "[Added Lines]",
          "697: #define LAZY_TO_IDENTIFIER(runtime, nameValHandle, id)          \\",
          "698:   do {                                                          \\",
          "699:     if (id.isInvalid()) {                                       \\",
          "700:       CallResult<Handle<SymbolID>> idRes =                      \\",
          "701:           valueToSymbolID(runtime, nameValHandle);              \\",
          "702:       if (LLVM_UNLIKELY(idRes == ExecutionStatus::EXCEPTION)) { \\",
          "703:         return ExecutionStatus::EXCEPTION;                      \\",
          "704:       }                                                         \\",
          "705:       id = **idRes;                                             \\",
          "706:     }                                                           \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "736:       !dpf.setSetter && !dpf.setGetter;",
          "737: }",
          "740:     Handle<JSObject> selfHandle,",
          "741:     Runtime *runtime,",
          "742:     Handle<> nameValHandle,",
          "743:     JSObject::IgnoreProxy ignoreProxy,",
          "744:     ComputedPropertyDescriptor &desc) {",
          "745:   assert(",
          "746:       !nameValHandle->isObject() &&",
          "",
          "[Removed Lines]",
          "739: CallResult<bool> JSObject::getOwnComputedPrimitiveDescriptor(",
          "",
          "[Added Lines]",
          "733: struct JSObject::Helper {",
          "734:  public:",
          "735:   LLVM_ATTRIBUTE_ALWAYS_INLINE",
          "736:   static ObjectFlags &flags(JSObject *self) {",
          "737:     return self->flags_;",
          "738:   }",
          "740:   LLVM_ATTRIBUTE_ALWAYS_INLINE",
          "741:   static OptValue<PropertyFlags>",
          "742:   getOwnIndexedPropertyFlags(JSObject *self, Runtime *runtime, uint32_t index) {",
          "743:     return JSObject::getOwnIndexedPropertyFlags(self, runtime, index);",
          "744:   }",
          "746:   LLVM_ATTRIBUTE_ALWAYS_INLINE",
          "747:   static NamedPropertyDescriptor &castToNamedPropertyDescriptorRef(",
          "748:       ComputedPropertyDescriptor &desc) {",
          "749:     return desc.castToNamedPropertyDescriptorRef();",
          "750:   }",
          "751: };",
          "753: namespace {",
          "763: LLVM_ATTRIBUTE_ALWAYS_INLINE",
          "764: CallResult<bool> getOwnComputedPrimitiveDescriptorImpl(",
          "769:     SymbolID &id,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "748:       \"getOwnComputedPrimitiveDescriptor \"",
          "749:       \"cannot be an object\");",
          "756:   if (auto arrayIndex = toArrayIndexFastPath(*nameValHandle)) {",
          "760:       if (res) {",
          "762:         desc.flags = *res;",
          "",
          "[Removed Lines]",
          "751:   MutableHandle<StringPrimitive> strPrim{runtime};",
          "752:   SymbolID id{};",
          "757:     if (selfHandle->flags_.fastIndexProperties) {",
          "758:       auto res =",
          "759:           getOwnIndexedPropertyFlags(selfHandle.get(), runtime, *arrayIndex);",
          "",
          "[Added Lines]",
          "780:     if (JSObject::Helper::flags(*selfHandle).fastIndexProperties) {",
          "781:       auto res = JSObject::Helper::getOwnIndexedPropertyFlags(",
          "782:           selfHandle.get(), runtime, *arrayIndex);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "771:     }",
          "773:     if (!selfHandle->getClass(runtime)->getHasIndexLikeProperties() &&",
          "",
          "[Removed Lines]",
          "774:         !selfHandle->flags_.hostObject && !selfHandle->flags_.lazyObject &&",
          "775:         !selfHandle->flags_.proxyObject) {",
          "",
          "[Added Lines]",
          "797:         !selfHandle->isHostObject() && !selfHandle->isLazy() &&",
          "798:         !selfHandle->isProxyObject()) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "780:     }",
          "781:   }",
          "787:   if (JSObject::getOwnNamedDescriptor(",
          "789:     return true;",
          "790:   }",
          "796:     OptValue<uint32_t> arrayIndex;",
          "",
          "[Removed Lines]",
          "784:   LAZY_TO_IDENTIFIER(runtime, nameValHandle, strPrim, id);",
          "788:           selfHandle, runtime, id, desc.castToNamedPropertyDescriptorRef())) {",
          "794:   if (selfHandle->flags_.indexedStorage) {",
          "",
          "[Added Lines]",
          "807:   LAZY_TO_IDENTIFIER(runtime, nameValHandle, id);",
          "811:           selfHandle,",
          "812:           runtime,",
          "813:           id,",
          "814:           JSObject::Helper::castToNamedPropertyDescriptorRef(desc))) {",
          "818:   if (LLVM_LIKELY(",
          "819:           !JSObject::Helper::flags(*selfHandle).indexedStorage &&",
          "820:           !selfHandle->isLazy() && !selfHandle->isProxyObject())) {",
          "821:     return false;",
          "822:   }",
          "823:   MutableHandle<StringPrimitive> strPrim{runtime};",
          "827:   if (JSObject::Helper::flags(*selfHandle).indexedStorage) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "799:     TO_ARRAY_INDEX(runtime, nameValHandle, strPrim, arrayIndex);",
          "801:     if (arrayIndex) {",
          "804:       if (res) {",
          "805:         desc.flags = *res;",
          "806:         desc.flags.indexed = 1;",
          "",
          "[Removed Lines]",
          "802:       auto res =",
          "803:           getOwnIndexedPropertyFlags(selfHandle.get(), runtime, *arrayIndex);",
          "",
          "[Added Lines]",
          "835:       auto res = JSObject::Helper::getOwnIndexedPropertyFlags(",
          "836:           selfHandle.get(), runtime, *arrayIndex);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "808:         return true;",
          "809:       }",
          "810:     }",
          "815:     return false;",
          "816:   }",
          "818:     JSObject::initializeLazyObject(runtime, selfHandle);",
          "820:         selfHandle, runtime, nameValHandle, ignoreProxy, desc);",
          "821:   }",
          "826:   }",
          "828: }",
          "830: CallResult<bool> JSObject::getOwnComputedDescriptor(",
          "",
          "[Removed Lines]",
          "811:   }",
          "813:   if (LLVM_LIKELY(",
          "814:           !selfHandle->flags_.lazyObject && !selfHandle->flags_.proxyObject)) {",
          "817:   if (selfHandle->flags_.lazyObject) {",
          "819:     return getOwnComputedPrimitiveDescriptor(",
          "822:   assert(selfHandle->flags_.proxyObject && \"descriptor flags are impossible\");",
          "823:   if (ignoreProxy == IgnoreProxy::No) {",
          "824:     return JSProxy::getOwnProperty(",
          "825:         selfHandle, runtime, nameValHandle, desc, nullptr);",
          "827:   return false;",
          "",
          "[Added Lines]",
          "847:   if (selfHandle->isLazy()) {",
          "849:     return JSObject::getOwnComputedPrimitiveDescriptor(",
          "853:   assert(selfHandle->isProxyObject() && \"descriptor flags are impossible\");",
          "854:   if (ignoreProxy == JSObject::IgnoreProxy::Yes) {",
          "855:     return false;",
          "857:   return JSProxy::getOwnProperty(",
          "858:       selfHandle, runtime, nameValHandle, desc, nullptr);",
          "859: }",
          "861: } // namespace",
          "863: CallResult<bool> JSObject::getOwnComputedPrimitiveDescriptor(",
          "864:     Handle<JSObject> selfHandle,",
          "865:     Runtime *runtime,",
          "866:     Handle<> nameValHandle,",
          "867:     JSObject::IgnoreProxy ignoreProxy,",
          "868:     ComputedPropertyDescriptor &desc) {",
          "869:   SymbolID id{};",
          "871:   return getOwnComputedPrimitiveDescriptorImpl(",
          "872:       selfHandle, runtime, nameValHandle, ignoreProxy, id, desc);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "965:   propObj = selfHandle.get();",
          "967:   GCScopeMarkerRAII marker{runtime};",
          "968:   do {",
          "975:       return ExecutionStatus::EXCEPTION;",
          "976:     }",
          "978:       return ExecutionStatus::RETURNED;",
          "979:     }",
          "",
          "[Removed Lines]",
          "972:     auto cr = getOwnComputedPrimitiveDescriptor(",
          "973:         propObj, runtime, nameValHandle, IgnoreProxy::Yes, desc);",
          "974:     if (cr == ExecutionStatus::EXCEPTION) {",
          "977:     if (*cr) {",
          "",
          "[Added Lines]",
          "1012:   SymbolID id{};",
          "1019:     Handle<JSObject> loopHandle = propObj;",
          "1021:     CallResult<bool> res = getOwnComputedPrimitiveDescriptorImpl(",
          "1022:         loopHandle, runtime, nameValHandle, IgnoreProxy::Yes, id, desc);",
          "1023:     if (LLVM_UNLIKELY(res == ExecutionStatus::EXCEPTION)) {",
          "1026:     if (*res) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1139:     return accessor->getter.get(runtime)->executeCall0(",
          "1140:         runtime->makeHandle(accessor->getter), runtime, receiver);",
          "1141:   } else if (desc.flags.hostObject) {",
          "1143:     SymbolID id{};",
          "1145:     auto propRes = vmcast<HostObject>(selfHandle.get())->get(id);",
          "1146:     if (propRes == ExecutionStatus::EXCEPTION)",
          "1147:       return ExecutionStatus::EXCEPTION;",
          "",
          "[Removed Lines]",
          "1142:     MutableHandle<StringPrimitive> strPrim{runtime};",
          "1144:     LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, strPrim, id);",
          "",
          "[Added Lines]",
          "1192:     LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, id);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1611:     if (LLVM_UNLIKELY(!desc.flags.writable)) {",
          "1612:       if (desc.flags.staticBuiltin) {",
          "1614:         SymbolID id{};",
          "1616:         return raiseErrorForOverridingStaticBuiltin(",
          "1617:             selfHandle, runtime, runtime->makeHandle(id));",
          "1618:       }",
          "",
          "[Removed Lines]",
          "1613:         MutableHandle<StringPrimitive> strPrim{runtime};",
          "1615:         LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, strPrim, id);",
          "",
          "[Added Lines]",
          "1662:         LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, id);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1624:     }",
          "1626:     if (selfHandle == propObj && desc.flags.internalSetter) {",
          "1628:       SymbolID id{};",
          "1630:       return internalSetter(",
          "1631:           selfHandle,",
          "1632:           runtime,",
          "",
          "[Removed Lines]",
          "1627:       MutableHandle<StringPrimitive> strPrim{runtime};",
          "1629:       LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, strPrim, id);",
          "",
          "[Added Lines]",
          "1675:       LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, id);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1676:     if (LLVM_UNLIKELY(",
          "1677:             desc.flags.internalSetter || receiverHandle->isHostObject() ||",
          "1678:             receiverHandle->isProxyObject())) {",
          "1680:       SymbolID id{};",
          "1682:       if (desc.flags.internalSetter) {",
          "1683:         return internalSetter(",
          "1684:             receiverHandle,",
          "",
          "[Removed Lines]",
          "1679:       MutableHandle<StringPrimitive> strPrim{runtime};",
          "1681:       LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, strPrim, id);",
          "",
          "[Added Lines]",
          "1726:       LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, id);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1711:     return false;",
          "1712:   }",
          "1719:   if (receiverHandle->flags_.indexedStorage) {",
          "1720:     OptValue<uint32_t> arrayIndex;",
          "1721:     TO_ARRAY_INDEX(runtime, nameValPrimitiveHandle, strPrim, arrayIndex);",
          "1722:     if (arrayIndex) {",
          "",
          "[Removed Lines]",
          "1714:   MutableHandle<StringPrimitive> strPrim{runtime};",
          "1715:   SymbolID id{};",
          "",
          "[Added Lines]",
          "1763:     MutableHandle<StringPrimitive> strPrim{runtime};",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1752:     }",
          "1753:   }",
          "1758:   return addOwnProperty(",
          "",
          "[Removed Lines]",
          "1755:   LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, strPrim, id);",
          "",
          "[Added Lines]",
          "1798:   SymbolID id{};",
          "1799:   LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, id);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1839:   auto nameValPrimitiveHandle = *converted;",
          "1844:   OptValue<uint32_t> arrayIndex;",
          "1849:     TO_ARRAY_INDEX(runtime, nameValPrimitiveHandle, strPrim, arrayIndex);",
          "",
          "[Removed Lines]",
          "1841:   MutableHandle<StringPrimitive> strPrim{runtime};",
          "1842:   SymbolID id;",
          "1848:   if (selfHandle->flags_.indexedStorage)",
          "",
          "[Added Lines]",
          "1890:   if (selfHandle->flags_.indexedStorage) {",
          "1891:     MutableHandle<StringPrimitive> strPrim{runtime};",
          "1893:   }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1871:   }",
          "1877:   NamedPropertyDescriptor desc;",
          "",
          "[Removed Lines]",
          "1874:   LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, strPrim, id);",
          "",
          "[Added Lines]",
          "1918:   SymbolID id;",
          "1919:   LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, id);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "2046:   }",
          "2047: #endif",
          "2052:   OptValue<uint32_t> arrayIndex;",
          "2057:     TO_ARRAY_INDEX(runtime, nameValHandle, strPrim, arrayIndex);",
          "2061:   if (!arrayIndex) {",
          "2063:     return defineOwnProperty(",
          "2064:         selfHandle, runtime, id, dpFlags, valueOrAccessor, opFlags);",
          "2065:   }",
          "",
          "[Removed Lines]",
          "2049:   MutableHandle<StringPrimitive> strPrim{runtime};",
          "2050:   SymbolID id{};",
          "2056:   if (selfHandle->flags_.indexedStorage)",
          "2062:     LAZY_TO_IDENTIFIER(runtime, nameValHandle, strPrim, id);",
          "",
          "[Added Lines]",
          "2099:   if (selfHandle->flags_.indexedStorage) {",
          "2100:     MutableHandle<StringPrimitive> strPrim{runtime};",
          "2102:   }",
          "2104:   SymbolID id{};",
          "2109:     LAZY_TO_IDENTIFIER(runtime, nameValHandle, id);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "2071:   if (selfHandle->clazz_.get(runtime)->getHasIndexLikeProperties()) {",
          "2074:     NamedPropertyDescriptor desc;",
          "2075:     auto pos = findProperty(selfHandle, runtime, id, desc);",
          "",
          "[Removed Lines]",
          "2072:     LAZY_TO_IDENTIFIER(runtime, nameValHandle, strPrim, id);",
          "",
          "[Added Lines]",
          "2119:     LAZY_TO_IDENTIFIER(runtime, nameValHandle, id);",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "2161:     }",
          "2165:     return addOwnProperty(selfHandle, runtime, id, dpFlags, value, opFlags);",
          "2166:   }",
          "",
          "[Removed Lines]",
          "2164:     LAZY_TO_IDENTIFIER(runtime, nameValHandle, strPrim, id);",
          "",
          "[Added Lines]",
          "2211:     LAZY_TO_IDENTIFIER(runtime, nameValHandle, id);",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "2233:     return true;",
          "2237:   return addOwnProperty(",
          "2238:       selfHandle, runtime, id, dpFlags, valueOrAccessor, opFlags);",
          "2239: }",
          "",
          "[Removed Lines]",
          "2236:   LAZY_TO_IDENTIFIER(runtime, nameValHandle, strPrim, id);",
          "",
          "[Added Lines]",
          "2283:   LAZY_TO_IDENTIFIER(runtime, nameValHandle, id);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7d33fdaa474a659614588bc2f7f4c7d714e1cfe6",
      "candidate_info": {
        "commit_hash": "7d33fdaa474a659614588bc2f7f4c7d714e1cfe6",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/7d33fdaa474a659614588bc2f7f4c7d714e1cfe6",
        "files": [
          "lib/VM/JSObject.cpp",
          "test/hermes/array-length.js"
        ],
        "message": "Fix setting array length as computed property\n\nSummary:\nputComputed() wasn't checking for internalSetter and consequently array\nlength wasn't being set correctly. It might appear correct at first\nglance because the property value changed, but the shadow value and the\narray capacity (if shrinking) didn't change. The new test demonstrates a\nfailure case.\n\nReviewed By: dulinriley\n\nDifferential Revision: D17622480\n\nfbshipit-source-id: 130eb61fa4d292eadc362cf9b039332fb59cbd58",
        "before_after_code_files": [
          "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp",
          "test/hermes/array-length.js||test/hermes/array-length.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp"
          ],
          "candidate": [
            "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp"
          ]
        }
      },
      "candidate_diff": {
        "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp": [
          "File: lib/VM/JSObject.cpp -> lib/VM/JSObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1328:     if (propObj == selfHandle) {",
          "1334:       }",
          "1339:       }",
          "1341:     }",
          "1342:   }",
          "",
          "[Removed Lines]",
          "1329:       if (LLVM_UNLIKELY(desc.flags.hostObject)) {",
          "1330:         MutableHandle<StringPrimitive> strPrim{runtime};",
          "1331:         SymbolID id{};",
          "1332:         LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, strPrim, id);",
          "1333:         return vmcast<HostObject>(selfHandle.get())->set(id, *valueHandle);",
          "1335:       if (LLVM_UNLIKELY(",
          "1336:               setComputedSlotValue(selfHandle, runtime, desc, valueHandle) ==",
          "1337:               ExecutionStatus::EXCEPTION)) {",
          "1338:         return ExecutionStatus::EXCEPTION;",
          "1340:       return true;",
          "",
          "[Added Lines]",
          "1329:       if (LLVM_LIKELY(!desc.flags.internalSetter && !desc.flags.hostObject)) {",
          "1330:         if (LLVM_UNLIKELY(",
          "1331:                 setComputedSlotValue(selfHandle, runtime, desc, valueHandle) ==",
          "1332:                 ExecutionStatus::EXCEPTION)) {",
          "1333:           return ExecutionStatus::EXCEPTION;",
          "1334:         }",
          "1335:         return true;",
          "1338:       MutableHandle<StringPrimitive> strPrim{runtime};",
          "1339:       SymbolID id{};",
          "1340:       LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, strPrim, id);",
          "1342:       if (desc.flags.internalSetter) {",
          "1343:         return internalSetter(",
          "1344:             selfHandle,",
          "1345:             runtime,",
          "1346:             id,",
          "1347:             desc.castToNamedPropertyDescriptorRef(),",
          "1348:             valueHandle,",
          "1349:             opFlags);",
          "1350:       } else {",
          "1351:         assert(desc.flags.hostObject && \"descriptor flags are impossible\");",
          "1352:         return vmcast<HostObject>(selfHandle.get())->set(id, *valueHandle);",
          "",
          "---------------"
        ],
        "test/hermes/array-length.js||test/hermes/array-length.js": [
          "File: test/hermes/array-length.js -> test/hermes/array-length.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "85: Object.defineProperty(a, \"length\", {value:2, writable: false});",
          "86: print(a.length);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "90: var a = [1, 2, 3, 4, 5]",
          "91: print(a);",
          "93: var t = \"length\";",
          "94: a[t] = 3;",
          "95: print(a);",
          "97: a[t] = 5;",
          "98: print(a);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d669aa02574ead4925ce992c29202723a4df8071",
      "candidate_info": {
        "commit_hash": "d669aa02574ead4925ce992c29202723a4df8071",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/d669aa02574ead4925ce992c29202723a4df8071",
        "files": [
          "lib/VM/JSObject.cpp",
          "test/hermes/proxy.js"
        ],
        "message": "Handle set where internalSetter and Proxy are both true\n\nSummary:\nIf putComputed is called on a proxy whose target's prototype\nis an array with a propname of 'length', then internalSetter will be\ntrue, and the receiver will be a proxy.  In that case, proxy needs to\nwin; the behavior may assert or be UB otherwise.\n\nReviewed By: tmikov\n\nDifferential Revision: D23916279\n\nfbshipit-source-id: c760356d48a02ece565fb4bc1acdafd7ccad7c68",
        "before_after_code_files": [
          "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp",
          "test/hermes/proxy.js||test/hermes/proxy.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp",
            "test/hermes/proxy.js||test/hermes/proxy.js"
          ],
          "candidate": [
            "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp",
            "test/hermes/proxy.js||test/hermes/proxy.js"
          ]
        }
      },
      "candidate_diff": {
        "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp": [
          "File: lib/VM/JSObject.cpp -> lib/VM/JSObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1700:     if (LLVM_UNLIKELY(",
          "1701:             desc.flags.internalSetter || receiverHandle->isHostObject() ||",
          "1702:             receiverHandle->isProxyObject())) {",
          "1703:       SymbolID id{};",
          "1704:       LAZY_TO_IDENTIFIER(runtime, nameValPrimitiveHandle, id);",
          "1705:       if (desc.flags.internalSetter) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1707:       if (receiverHandle->isProxyObject()) {",
          "1708:         if (*descDefinedRes) {",
          "1709:           dpf.setValue = 1;",
          "1710:         } else {",
          "1711:           dpf = DefinePropertyFlags::getDefaultNewPropertyFlags();",
          "1712:         }",
          "1713:         return JSProxy::defineOwnProperty(",
          "1714:             receiverHandle,",
          "1715:             runtime,",
          "1716:             nameValPrimitiveHandle,",
          "1717:             dpf,",
          "1718:             valueHandle,",
          "1719:             opFlags);",
          "1720:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1710:             desc.castToNamedPropertyDescriptorRef(),",
          "1711:             valueHandle,",
          "1712:             opFlags);",
          "1715:       }",
          "1716:       assert(",
          "1730:     }",
          "1731:   }",
          "",
          "[Removed Lines]",
          "1713:       } else if (receiverHandle->isHostObject()) {",
          "1714:         return vmcast<HostObject>(receiverHandle.get())->set(id, *valueHandle);",
          "1717:           receiverHandle->isProxyObject() && \"descriptor flags are impossible\");",
          "1718:       if (*descDefinedRes) {",
          "1719:         dpf.setValue = 1;",
          "1720:       } else {",
          "1721:         dpf = DefinePropertyFlags::getDefaultNewPropertyFlags();",
          "1722:       }",
          "1723:       return JSProxy::defineOwnProperty(",
          "1724:           receiverHandle,",
          "1725:           runtime,",
          "1726:           nameValPrimitiveHandle,",
          "1727:           dpf,",
          "1728:           valueHandle,",
          "1729:           opFlags);",
          "",
          "[Added Lines]",
          "1733:           receiverHandle->isHostObject() && \"descriptor flags are impossible\");",
          "1734:       return vmcast<HostObject>(receiverHandle.get())->set(id, *valueHandle);",
          "",
          "---------------"
        ],
        "test/hermes/proxy.js||test/hermes/proxy.js": [
          "File: test/hermes/proxy.js -> test/hermes/proxy.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2126: new Proxy([], {}).unshift(0);",
          "2128: print('done');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2132: var p = new Proxy(Object.create([]), {});",
          "2134: p[String('length')] = 0x123;",
          "2135: p[0xABC] = 1111;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3be4af210d7e1afe6f009a68a815cd48e7eb9867",
      "candidate_info": {
        "commit_hash": "3be4af210d7e1afe6f009a68a815cd48e7eb9867",
        "repo": "facebook/hermes",
        "commit_url": "https://github.com/facebook/hermes/commit/3be4af210d7e1afe6f009a68a815cd48e7eb9867",
        "files": [
          "include/hermes/VM/JSProxy.h",
          "lib/VM/JSObject.cpp",
          "lib/VM/JSProxy.cpp",
          "test/hermes/proxy.js"
        ],
        "message": "Avoid an assert when defining a prop on a Proxy array target\n\nSummary:\nJSProxy::defineOwnProperty was implemented to call\nJSObject::defineOwnProperty.  Recently, this would start to assert if\na prop which looks like an array index was used.  In order to avoid\nthis, change JSProxy::defineOwnProperty to take a Handle<> as the\nname, and call JSObject::defineOwnComputedProperty, which knows how to\nhandle index-ish properties.  This has the downside of converting a\nnamed property from SymbolID to Handle to SymbolID in some proxy\ncases, but the perf loss is preferable to writing a SymbolID overload\nof JSProxy::defineOwnProperty.\n\ncloses #371\n\nReviewed By: tmikov\n\nDifferential Revision: D23914310\n\nfbshipit-source-id: 633ad089bccf1aef559ffb95e05deaf6a22c52af",
        "before_after_code_files": [
          "include/hermes/VM/JSProxy.h||include/hermes/VM/JSProxy.h",
          "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp",
          "lib/VM/JSProxy.cpp||lib/VM/JSProxy.cpp",
          "test/hermes/proxy.js||test/hermes/proxy.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp",
            "test/hermes/proxy.js||test/hermes/proxy.js"
          ],
          "candidate": [
            "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp",
            "test/hermes/proxy.js||test/hermes/proxy.js"
          ]
        }
      },
      "candidate_diff": {
        "include/hermes/VM/JSProxy.h||include/hermes/VM/JSProxy.h": [
          "File: include/hermes/VM/JSProxy.h -> include/hermes/VM/JSProxy.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "113:   static CallResult<bool> defineOwnProperty(",
          "114:       Handle<JSObject> selfHandle,",
          "115:       Runtime *runtime,",
          "117:       DefinePropertyFlags dpFlags,",
          "118:       Handle<> valueOrAccessor,",
          "119:       PropOpFlags opFlags);",
          "",
          "[Removed Lines]",
          "116:       SymbolID name,",
          "",
          "[Added Lines]",
          "116:       Handle<> nameValHandle,",
          "",
          "---------------"
        ],
        "lib/VM/JSObject.cpp||lib/VM/JSObject.cpp": [
          "File: lib/VM/JSObject.cpp -> lib/VM/JSObject.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1448:             ->set(name, *valueHandle);",
          "1449:       }",
          "1450:       ComputedPropertyDescriptor desc;",
          "1451:       CallResult<bool> descDefinedRes = getOwnComputedPrimitiveDescriptor(",
          "1459:       if (LLVM_UNLIKELY(descDefinedRes == ExecutionStatus::EXCEPTION)) {",
          "1460:         return ExecutionStatus::EXCEPTION;",
          "1461:       }",
          "",
          "[Removed Lines]",
          "1452:           receiverHandle,",
          "1453:           runtime,",
          "1454:           name.isUniqued() ? runtime->makeHandle(HermesValue::encodeStringValue(",
          "1455:                                  runtime->getStringPrimFromSymbolID(name)))",
          "1456:                            : runtime->makeHandle(name),",
          "1457:           IgnoreProxy::No,",
          "1458:           desc);",
          "",
          "[Added Lines]",
          "1451:       Handle<> nameValHandle = runtime->makeHandle(name);",
          "1453:           receiverHandle, runtime, nameValHandle, IgnoreProxy::No, desc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1466:         dpf = DefinePropertyFlags::getDefaultNewPropertyFlags();",
          "1467:       }",
          "1468:       return JSProxy::defineOwnProperty(",
          "1470:     }",
          "1471:   }",
          "",
          "[Removed Lines]",
          "1469:           receiverHandle, runtime, name, dpf, valueHandle, opFlags);",
          "",
          "[Added Lines]",
          "1464:           receiverHandle, runtime, nameValHandle, dpf, valueHandle, opFlags);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1726:         dpf = DefinePropertyFlags::getDefaultNewPropertyFlags();",
          "1727:       }",
          "1728:       return JSProxy::defineOwnProperty(",
          "1730:     }",
          "1731:   }",
          "",
          "[Removed Lines]",
          "1729:           receiverHandle, runtime, id, dpf, valueHandle, opFlags);",
          "",
          "[Added Lines]",
          "1724:           receiverHandle,",
          "1725:           runtime,",
          "1726:           nameValPrimitiveHandle,",
          "1727:           dpf,",
          "1728:           valueHandle,",
          "1729:           opFlags);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2002:           selfHandle->flags_.lazyObject || selfHandle->flags_.proxyObject)) {",
          "2003:     if (selfHandle->flags_.proxyObject) {",
          "2004:       return JSProxy::defineOwnProperty(",
          "2006:     }",
          "2007:     assert(selfHandle->flags_.lazyObject && \"descriptor flags are impossible\");",
          "",
          "[Removed Lines]",
          "2005:           selfHandle, runtime, name, dpFlags, valueOrAccessor, opFlags);",
          "",
          "[Added Lines]",
          "2005:           selfHandle,",
          "2006:           runtime,",
          "2007:           name.isUniqued() ? runtime->makeHandle(HermesValue::encodeStringValue(",
          "2008:                                  runtime->getStringPrimFromSymbolID(name)))",
          "2009:                            : runtime->makeHandle(name),",
          "2010:           dpFlags,",
          "2011:           valueOrAccessor,",
          "2012:           opFlags);",
          "",
          "---------------"
        ],
        "lib/VM/JSProxy.cpp||lib/VM/JSProxy.cpp": [
          "File: lib/VM/JSProxy.cpp -> lib/VM/JSProxy.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "626: CallResult<bool> JSProxy::defineOwnProperty(",
          "627:     Handle<JSObject> selfHandle,",
          "628:     Runtime *runtime,",
          "630:     DefinePropertyFlags dpFlags,",
          "631:     Handle<> valueOrAccessor,",
          "632:     PropOpFlags opFlags) {",
          "",
          "[Removed Lines]",
          "629:     SymbolID name,",
          "",
          "[Added Lines]",
          "629:     Handle<> nameValHandle,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "642:   if (!*trapRes) {",
          "643:     GCScope gcScope(runtime);",
          "647:   }",
          "649:   ComputedPropertyDescriptor desc;",
          "",
          "[Removed Lines]",
          "645:     return JSObject::defineOwnProperty(",
          "646:         target, runtime, name, dpFlags, valueOrAccessor, opFlags);",
          "",
          "[Added Lines]",
          "645:     return JSObject::defineOwnComputedPrimitive(",
          "646:         target, runtime, nameValHandle, dpFlags, valueOrAccessor, opFlags);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "663:       runtime,",
          "664:       runtime->makeHandle(detail::slots(*selfHandle).handler),",
          "665:       target.getHermesValue(),",
          "668:   if (trapResultRes == ExecutionStatus::EXCEPTION) {",
          "669:     return ExecutionStatus::EXCEPTION;",
          "",
          "[Removed Lines]",
          "666:       HermesValue::encodeStringValue(runtime->getStringPrimFromSymbolID(name)),",
          "",
          "[Added Lines]",
          "666:       nameValHandle.getHermesValue(),",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "682:   ComputedPropertyDescriptor targetDesc;",
          "683:   MutableHandle<> targetDescValueOrAccessor{runtime};",
          "684:   CallResult<bool> targetDescRes = JSObject::getOwnComputedDescriptor(",
          "691:   if (targetDescRes == ExecutionStatus::EXCEPTION) {",
          "692:     return ExecutionStatus::EXCEPTION;",
          "693:   }",
          "",
          "[Removed Lines]",
          "685:       target,",
          "686:       runtime,",
          "687:       runtime->makeHandle(HermesValue::encodeStringValue(",
          "688:           runtime->getStringPrimFromSymbolID(name))),",
          "689:       targetDesc,",
          "690:       targetDescValueOrAccessor);",
          "",
          "[Added Lines]",
          "685:       target, runtime, nameValHandle, targetDesc, targetDescValueOrAccessor);",
          "",
          "---------------"
        ],
        "test/hermes/proxy.js||test/hermes/proxy.js": [
          "File: test/hermes/proxy.js -> test/hermes/proxy.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "2121: f.b = 2;",
          "2122: checkDeep({...f})(_ => ({a:1, b:2}))",
          "2124: print('done');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2126: new Proxy([], {}).unshift(0);",
          "",
          "---------------"
        ]
      }
    }
  ]
}