{
  "cve_id": "CVE-2019-20630",
  "cve_desc": "An issue was discovered in libgpac.a in GPAC before 0.8.0, as demonstrated by MP4Box. It contains a heap-based buffer over-read in BS_ReadByte (called from gf_bs_read_bit) in utils/bitstream.c that can cause a denial of service via a crafted MP4 file.",
  "repo": "gpac/gpac",
  "patch_hash": "1ab4860609f2e7a35634930571e7d0531297e090",
  "patch_info": {
    "commit_hash": "1ab4860609f2e7a35634930571e7d0531297e090",
    "repo": "gpac/gpac",
    "commit_url": "https://github.com/gpac/gpac/commit/1ab4860609f2e7a35634930571e7d0531297e090",
    "files": [
      "src/media_tools/mpegts.c"
    ],
    "message": "fixed potential crash on PMT IOD parse - cf #1268 #1269",
    "before_after_code_files": [
      "src/media_tools/mpegts.c||src/media_tools/mpegts.c"
    ]
  },
  "patch_diff": {
    "src/media_tools/mpegts.c||src/media_tools/mpegts.c": [
      "File: src/media_tools/mpegts.c -> src/media_tools/mpegts.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1152:  pmt->program->pcr_pid = ((data[0] & 0x1f) << 8) | data[1];",
      "1154:  info_length = ((data[2]&0xf)<<8) | data[3];",
      "1157:   u8 tag, len;",
      "1158:   u32 first_loop_len = 0;",
      "",
      "[Removed Lines]",
      "1155:  if (info_length != 0) {",
      "",
      "[Added Lines]",
      "1155:  if (info_length + 4 > data_size) {",
      "1156:   GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"Broken PMT first loop, %d bytes avail but first loop size %d\\n\", data_size, info_length));",
      "1157:   return;",
      "1158:  } else if (info_length != 0) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1160:   len = data[5];",
      "1161:   while (info_length > first_loop_len) {",
      "1162:    if (tag == GF_M2TS_MPEG4_IOD_DESCRIPTOR) {",
      "1176:      }",
      "1177:     }",
      "1178:    } else if (tag == GF_M2TS_METADATA_POINTER_DESCRIPTOR) {",
      "1179:     GF_BitStream *metadatapd_bs;",
      "",
      "[Removed Lines]",
      "1163:     u32 size;",
      "1164:     GF_BitStream *iod_bs;",
      "1165:     iod_bs = gf_bs_new((char *)data+8, len-2, GF_BITSTREAM_READ);",
      "1166:     if (pmt->program->pmt_iod) gf_odf_desc_del((GF_Descriptor *)pmt->program->pmt_iod);",
      "1167:     e = gf_odf_parse_descriptor(iod_bs , (GF_Descriptor **) &pmt->program->pmt_iod, &size);",
      "1168:     gf_bs_del(iod_bs );",
      "1169:     if (e==GF_OK) {",
      "1171:      if (pmt->program->pmt_iod) pmt->program->pmt_iod->ServiceID = pmt->program->number;",
      "1173:      if (!gf_list_count(pmt->program->pmt_iod->ESDescriptors)) {",
      "1174:       gf_odf_desc_del((GF_Descriptor *)pmt->program->pmt_iod);",
      "1175:       pmt->program->pmt_iod = NULL;",
      "",
      "[Added Lines]",
      "1166:     if ((len>2) && (len - 2 <= info_length)) {",
      "1167:      u32 size;",
      "1168:      GF_BitStream *iod_bs;",
      "1169:      iod_bs = gf_bs_new((char *)data+8, len-2, GF_BITSTREAM_READ);",
      "1170:      if (pmt->program->pmt_iod) gf_odf_desc_del((GF_Descriptor *)pmt->program->pmt_iod);",
      "1171:      e = gf_odf_parse_descriptor(iod_bs , (GF_Descriptor **) &pmt->program->pmt_iod, &size);",
      "1172:      gf_bs_del(iod_bs );",
      "1173:      if (e==GF_OK) {",
      "1175:       if (pmt->program->pmt_iod) pmt->program->pmt_iod->ServiceID = pmt->program->number;",
      "1177:       if (!gf_list_count(pmt->program->pmt_iod->ESDescriptors)) {",
      "1178:        gf_odf_desc_del((GF_Descriptor *)pmt->program->pmt_iod);",
      "1179:        pmt->program->pmt_iod = NULL;",
      "1180:       }",
      "1182:     } else {",
      "1183:      GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"Broken IOD! len %d less than 2 bytes to declare IOD\\n\", len));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "98b727637e32d1d4824101d8947e2dbd573d4fc8",
      "candidate_info": {
        "commit_hash": "98b727637e32d1d4824101d8947e2dbd573d4fc8",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/98b727637e32d1d4824101d8947e2dbd573d4fc8",
        "files": [
          "src/media_tools/mpegts.c"
        ],
        "message": "be stricter in PAT processing - cf #1269",
        "before_after_code_files": [
          "src/media_tools/mpegts.c||src/media_tools/mpegts.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [
            "src/media_tools/mpegts.c||src/media_tools/mpegts.c"
          ],
          "candidate": [
            "src/media_tools/mpegts.c||src/media_tools/mpegts.c"
          ]
        }
      },
      "candidate_diff": {
        "src/media_tools/mpegts.c||src/media_tools/mpegts.c": [
          "File: src/media_tools/mpegts.c -> src/media_tools/mpegts.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1667:    if (!ts->nit) {",
          "1668:     ts->nit = gf_m2ts_section_filter_new(gf_m2ts_process_nit, 0);",
          "1669:    }",
          "1671:    GF_SAFEALLOC(prog, GF_M2TS_Program);",
          "1672:    if (!prog) {",
          "1673:     GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"Fail to allocate program for pid %d\\n\", pid));",
          "",
          "[Removed Lines]",
          "1670:   } else {",
          "",
          "[Added Lines]",
          "1670:   } else if (!pid) {",
          "1671:    GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"Broken PAT found reserved PID 0, ignoring\\n\", pid));",
          "1672:   } else if (! ts->ess[pid]) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0bcea8c32bbd7af85d70112599e97c9adf418c25",
      "candidate_info": {
        "commit_hash": "0bcea8c32bbd7af85d70112599e97c9adf418c25",
        "repo": "gpac/gpac",
        "commit_url": "https://github.com/gpac/gpac/commit/0bcea8c32bbd7af85d70112599e97c9adf418c25",
        "files": [
          "src/bifs/bifs_codec.c",
          "src/filter_core/filter_pid.c",
          "src/filters/dmx_m2ts.c",
          "src/filters/reframe_nalu.c",
          "src/media_tools/mpegts.c",
          "tests/scripts/mpeg4on2.sh"
        ],
        "message": "fixed mpeg4on2 and added test",
        "before_after_code_files": [
          "src/bifs/bifs_codec.c||src/bifs/bifs_codec.c",
          "src/filter_core/filter_pid.c||src/filter_core/filter_pid.c",
          "src/filters/dmx_m2ts.c||src/filters/dmx_m2ts.c",
          "src/filters/reframe_nalu.c||src/filters/reframe_nalu.c",
          "src/media_tools/mpegts.c||src/media_tools/mpegts.c",
          "tests/scripts/mpeg4on2.sh||tests/scripts/mpeg4on2.sh"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/media_tools/mpegts.c||src/media_tools/mpegts.c"
          ],
          "candidate": [
            "src/media_tools/mpegts.c||src/media_tools/mpegts.c"
          ]
        }
      },
      "candidate_diff": {
        "src/bifs/bifs_codec.c||src/bifs/bifs_codec.c": [
          "File: src/bifs/bifs_codec.c -> src/bifs/bifs_codec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "249:  GF_Err e;",
          "251:  if (!codec || !data || codec->dec_memory_mode) return GF_BAD_PARAM;",
          "253:  codec->info = gf_bifs_dec_get_stream(codec, ESID);",
          "254:  if (!codec->info) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "252:  if (!data_length) return GF_OK;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "259:  codec->cts_offset = ts_offset;",
          "261:  bs = gf_bs_new(data, data_length, GF_BITSTREAM_READ);",
          "262:  gf_bs_set_eos_callback(bs, BD_EndOfStream, codec);",
          "264:  if (codec->info->config.elementaryMasks) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "263:  if (!bs) return GF_OUT_OF_MEM;",
          "",
          "---------------"
        ],
        "src/filter_core/filter_pid.c||src/filter_core/filter_pid.c": [
          "File: src/filter_core/filter_pid.c -> src/filter_core/filter_pid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3084:  return GF_TRUE;",
          "3085: }",
          "3087: static void gf_filter_pid_init_task(GF_FSTask *task)",
          "3088: {",
          "3089:  u32 i, count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3087: static void add_possible_link_destination(GF_List *possible_linked_resolutions, GF_List *force_link_resolutions, GF_Filter *filter_dst)",
          "3088: {",
          "3089:  u32 i;",
          "3091:  for (i=0; i<gf_list_count(possible_linked_resolutions); i++) {",
          "3092:   GF_Filter *parent = gf_list_get(possible_linked_resolutions, i);",
          "3093:   if (parent->max_extra_pids) continue;",
          "3095:   if ((gf_list_find(filter_dst->destination_links, parent)>=0) || (gf_list_find(filter_dst->destination_filters, parent)>=0)) {",
          "3096:    gf_list_rem(possible_linked_resolutions, i);",
          "3097:    gf_list_insert(possible_linked_resolutions, filter_dst, i);",
          "3098:    return;",
          "3099:   }",
          "3100:   if ((gf_list_find(parent->destination_links, filter_dst)>=0) || (gf_list_find(parent->destination_filters, filter_dst)>=0)) {",
          "3101:    return;",
          "3102:   }",
          "3103:  }",
          "3104:  gf_list_add(possible_linked_resolutions, filter_dst);",
          "3105: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3095:  GF_List *loaded_filters = NULL;",
          "3096:  GF_List *linked_dest_filters = NULL;",
          "3097:  GF_List *force_link_resolutions = NULL;",
          "3098:  GF_Filter *filter = task->filter;",
          "3099:  GF_FilterPid *pid = task->pid;",
          "3100:  GF_Filter *dynamic_filter_clone = NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3118:  GF_List *possible_linked_resolutions = NULL;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3136:  linked_dest_filters = gf_list_new();",
          "3137:  force_link_resolutions = gf_list_new();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3159:  possible_linked_resolutions = gf_list_new();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3143: restart:",
          "3146:   loaded_filters = gf_list_new();",
          "3148:  found_matching_sourceid = GF_FALSE;",
          "3150:  count = gf_list_count(filter->session->filters);",
          "",
          "[Removed Lines]",
          "3145:  if (num_pass)",
          "",
          "[Added Lines]",
          "3167:  if (num_pass) {",
          "3170:  }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3170:   if (gf_list_find(linked_dest_filters, filter_dst)>=0) {",
          "3171:    continue;",
          "3172:   }",
          "3174:   if (gf_list_count(pid->filter->destination_filters)) {",
          "3175:    s32 ours = gf_list_find(pid->filter->destination_filters, filter_dst);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3197:   if (num_pass && (gf_list_find(possible_linked_resolutions, filter_dst)<0) && (gf_list_find(force_link_resolutions, filter_dst)<0) )",
          "3198:    continue;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3332:     if (filter_dst->source_ids) {",
          "3333:      gf_list_add(force_link_resolutions, filter_dst);",
          "3334:     }",
          "3335:     continue;",
          "3336:    }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3360:     } else {",
          "3361:      add_possible_link_destination(possible_linked_resolutions, force_link_resolutions, filter_dst);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3360:      if (loaded_filters) gf_list_del(loaded_filters);",
          "3361:      gf_list_del(linked_dest_filters);",
          "3362:      gf_list_del(force_link_resolutions);",
          "3363:      return;",
          "3364:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3391:      gf_list_del(possible_linked_resolutions);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3383:        if (loaded_filters) gf_list_del(loaded_filters);",
          "3384:        gf_list_del(linked_dest_filters);",
          "3385:        gf_list_del(force_link_resolutions);",
          "3386:        return;",
          "3387:       } else {",
          "3388:        continue;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3415:        gf_list_del(possible_linked_resolutions);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3447:   pid->filter->disabled = GF_FALSE;",
          "3448:   gf_list_del(linked_dest_filters);",
          "3449:   gf_list_del(force_link_resolutions);",
          "3450:   return;",
          "3451:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3480:   gf_list_del(possible_linked_resolutions);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3484:  gf_list_del(linked_dest_filters);",
          "3485:  gf_list_del(force_link_resolutions);",
          "3486:  if (filter->session->filters_mx) gf_mx_v(filter->session->filters_mx);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3517:  gf_list_del(possible_linked_resolutions);",
          "",
          "---------------"
        ],
        "src/filters/dmx_m2ts.c||src/filters/dmx_m2ts.c": [
          "File: src/filters/dmx_m2ts.c -> src/filters/dmx_m2ts.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "277:   gf_filter_pid_set_property(opid, GF_PROP_PID_CODECID, &PROP_UINT(esd->decoderConfig ? esd->decoderConfig->objectTypeIndication : GF_CODECID_BIFS) );",
          "278:   gf_filter_pid_set_property(opid, GF_PROP_PID_CLOCK_ID, &PROP_UINT(esd->OCRESID ? esd->OCRESID : esd->ESID) );",
          "279:   gf_filter_pid_set_property(opid, GF_PROP_PID_DEPENDENCY_ID, &PROP_UINT(esd->dependsOnESID) );",
          "281:    gf_filter_pid_set_property(opid, GF_PROP_PID_DECODER_CONFIG, &PROP_DATA(esd->decoderConfig->decoderSpecificInfo->data, esd->decoderConfig->decoderSpecificInfo->dataLength) );",
          "283:   gf_filter_pid_set_property(opid, GF_PROP_PID_IN_IOD, &PROP_BOOL(m4sys_iod_stream) );",
          "",
          "[Removed Lines]",
          "280:   if (esd->decoderConfig && esd->decoderConfig->decoderSpecificInfo )",
          "",
          "[Added Lines]",
          "280:   if (esd->decoderConfig && esd->decoderConfig->decoderSpecificInfo  && esd->decoderConfig->decoderSpecificInfo->dataLength)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "303:   gf_filter_pid_set_property(opid, GF_PROP_PID_DURATION, &PROP_FRAC(ctx->duration) );",
          "310:   }",
          "311:  }",
          "313:  gf_m2ts_set_pes_framing((GF_M2TS_PES *)stream, GF_M2TS_PES_FRAMING_DEFAULT);",
          "314: }",
          "",
          "[Removed Lines]",
          "306:  if (stream->depends_on_pid) {",
          "307:   gf_filter_pid_set_property(opid, GF_PROP_PID_DEPENDENCY_ID, &PROP_UINT(stream->depends_on_pid) );",
          "308:   if ((stream->stream_type == GF_M2TS_VIDEO_HEVC_TEMPORAL) || (stream->stream_type == GF_M2TS_VIDEO_HEVC_MCTS)) {",
          "309:    gf_filter_pid_set_property(opid, GF_PROP_PID_SUBLAYER, &PROP_BOOL(GF_TRUE) );",
          "",
          "[Added Lines]",
          "306:  if (!m4sys_stream) {",
          "307:   if (stream->depends_on_pid) {",
          "308:    gf_filter_pid_set_property(opid, GF_PROP_PID_DEPENDENCY_ID, &PROP_UINT(stream->depends_on_pid) );",
          "309:    if ((stream->stream_type == GF_M2TS_VIDEO_HEVC_TEMPORAL) || (stream->stream_type == GF_M2TS_VIDEO_HEVC_MCTS)) {",
          "310:     gf_filter_pid_set_property(opid, GF_PROP_PID_SUBLAYER, &PROP_BOOL(GF_TRUE) );",
          "311:    }",
          "",
          "---------------"
        ],
        "src/filters/reframe_nalu.c||src/filters/reframe_nalu.c": [
          "File: src/filters/reframe_nalu.c -> src/filters/reframe_nalu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1971:   if (ctx->bytes_in_header) {",
          "1972:    Bool split_start_code=GF_FALSE;",
          "1977:     current = -1;",
          "",
          "[Removed Lines]",
          "1974:    memcpy(ctx->hdr_store + ctx->bytes_in_header, start, SAFETY_NAL_STORE - ctx->bytes_in_header);",
          "1975:    current = gf_media_nalu_next_start_code(ctx->hdr_store, SAFETY_NAL_STORE, &sc_size);",
          "1976:    if (current==SAFETY_NAL_STORE)",
          "",
          "[Added Lines]",
          "1973:    u32 copy_size = SAFETY_NAL_STORE - ctx->bytes_in_header;",
          "1974:    if (copy_size>remain)",
          "1975:     copy_size = remain;",
          "1977:    memcpy(ctx->hdr_store + ctx->bytes_in_header, start, copy_size);",
          "1978:    current = gf_media_nalu_next_start_code(ctx->hdr_store, copy_size + ctx->bytes_in_header, &sc_size);",
          "1979:    if (current==copy_size + ctx->bytes_in_header)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2108:    }",
          "2110:    if (bytes_from_store) {",
          "2114:     } else {",
          "",
          "[Removed Lines]",
          "2111:     if (bytes_from_store>=(u32) current) {",
          "",
          "[Added Lines]",
          "2114:     if (bytes_from_store> (u32) current) {",
          "",
          "---------------"
        ],
        "src/media_tools/mpegts.c||src/media_tools/mpegts.c": [
          "File: src/media_tools/mpegts.c -> src/media_tools/mpegts.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1428:   tag = data[4];",
          "1429:   len = data[5];",
          "1430:   while (info_length > first_loop_len) {",
          "1432:    if (tag == GF_M2TS_MPEG4_IOD_DESCRIPTOR) {",
          "1433:     u32 size;",
          "1434:     GF_BitStream *iod_bs;",
          "",
          "[Removed Lines]",
          "1431: #ifndef FORCE_DISABLE_MPEG4SL_OVER_MPEG2TS",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1461:      gf_m2ts_metadata_pointer_descriptor_del(metapd);",
          "1462:     }",
          "1463:    } else {",
          "1467:     GF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[MPEG-2 TS] Skipping descriptor (0x%x) and others not supported\\n\", tag));",
          "1468:    }",
          "1469:    first_loop_len += 2 + len;",
          "",
          "[Removed Lines]",
          "1464: #else",
          "1465:    {",
          "1466: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1629:   while (desc_len) {",
          "1630:    u8 tag = data[0];",
          "1631:    u32 len = data[1];",
          "1633:     switch (tag) {",
          "1634:     case GF_M2TS_ISO_639_LANGUAGE_DESCRIPTOR:",
          "1636:      break;",
          "1637:     case GF_M2TS_MPEG4_SL_DESCRIPTOR:",
          "1643:      es->flags |= GF_M2TS_ES_IS_SL;",
          "1644:      break;",
          "1645:     case GF_M2TS_REGISTRATION_DESCRIPTOR:",
          "",
          "[Removed Lines]",
          "1632:    if (es && pes) {",
          "1635:      pes->lang = GF_4CC(' ', data[2], data[3], data[4]);",
          "1638: #ifdef FORCE_DISABLE_MPEG4SL_OVER_MPEG2TS",
          "1639:      es->mpeg4_es_id = es->pid;",
          "1640: #else",
          "1641:      es->mpeg4_es_id = ((data[2] & 0x1f) << 8) | data[3];",
          "1642: #endif",
          "",
          "[Added Lines]",
          "1626:    if (es) {",
          "1629:      if (pes)",
          "1630:       pes->lang = GF_4CC(' ', data[2], data[3], data[4]);",
          "1633:      es->mpeg4_es_id = ( (u32) data[2] & 0x1f) << 8  | data[3];",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1675:     }",
          "1676:     break;",
          "1677:     case GF_M2TS_DVB_SUBTITLING_DESCRIPTOR:",
          "1685:      es->stream_type = GF_M2TS_DVB_SUBTITLE;",
          "1686:      break;",
          "1687:     case GF_M2TS_DVB_STREAM_IDENTIFIER_DESCRIPTOR:",
          "",
          "[Removed Lines]",
          "1678:      pes->sub.language[0] = data[2];",
          "1679:      pes->sub.language[1] = data[3];",
          "1680:      pes->sub.language[2] = data[4];",
          "1681:      pes->sub.type = data[5];",
          "1682:      pes->sub.composition_page_id = (data[6]<<8) | data[7];",
          "1683:      pes->sub.ancillary_page_id = (data[8]<<8) | data[9];",
          "",
          "[Added Lines]",
          "1669:      if (pes) {",
          "1670:       pes->sub.language[0] = data[2];",
          "1671:       pes->sub.language[1] = data[3];",
          "1672:       pes->sub.language[2] = data[4];",
          "1673:       pes->sub.type = data[5];",
          "1674:       pes->sub.composition_page_id = (data[6]<<8) | data[7];",
          "1675:       pes->sub.ancillary_page_id = (data[8]<<8) | data[9];",
          "1676:      }",
          "",
          "---------------"
        ],
        "tests/scripts/mpeg4on2.sh||tests/scripts/mpeg4on2.sh": [
          "File: tests/scripts/mpeg4on2.sh -> tests/scripts/mpeg4on2.sh",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #test mpeg4 over MPEG-2 TS",
          "3: test_begin \"mpeg4on2\"",
          "4: if [ $test_skip = 1 ] ; then",
          "5: return",
          "6: fi",
          "8: srcfile=$TEMP_DIR/source.mp4",
          "9: dstmux=$TEMP_DIR/mux.ts",
          "10: dstdmx=$TEMP_DIR/demux.mp4",
          "12: do_test \"$MP4BOX -mp4 $MEDIA_DIR/bifs/bifs-2D-background-background2D-movie.bt -out $srcfile\" \"bifsenc\"",
          "13: do_hash_test $srcfile \"bifsenc\"",
          "15: do_test \"$GPAC -i $srcfile -o $dstmux\" \"mux-ts\"",
          "16: do_hash_test $dstmux \"mux\"",
          "18: do_test \"$GPAC -i $dstmux -o $dstdmx\" \"demux-ts\"",
          "19: do_hash_test $dstdmx \"demux\"",
          "21: test_end",
          "",
          "---------------"
        ]
      }
    }
  ]
}