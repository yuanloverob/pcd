{
  "cve_id": "CVE-2019-10353",
  "cve_desc": "CSRF tokens in Jenkins 2.185 and earlier, LTS 2.176.1 and earlier did not expire, thereby allowing attackers able to obtain them to bypass CSRF protection.",
  "repo": "jenkinsci/jenkins",
  "patch_hash": "772152315aa0a9ba27b812a4ba0f3f9b64af78d9",
  "patch_info": {
    "commit_hash": "772152315aa0a9ba27b812a4ba0f3f9b64af78d9",
    "repo": "jenkinsci/jenkins",
    "commit_url": "https://github.com/jenkinsci/jenkins/commit/772152315aa0a9ba27b812a4ba0f3f9b64af78d9",
    "files": [
      "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
      "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java"
    ],
    "message": "[SECURITY-626]\n\nCo-Authored-By: Wadeck Follonier <wadeck.follonier@gmail.com>",
    "before_after_code_files": [
      "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
      "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java"
    ]
  },
  "patch_diff": {
    "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java": [
      "File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java -> core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "17: import jenkins.model.Jenkins;",
      "18: import hudson.model.ModelObject;",
      "20: import javax.servlet.ServletRequest;",
      "21: import javax.servlet.http.HttpServletRequest;",
      "22: import jenkins.security.HexStringConfidentialKey;",
      "24: import net.sf.json.JSONObject;",
      "26: import org.acegisecurity.Authentication;",
      "27: import org.jenkinsci.Symbol;",
      "28: import org.kohsuke.stapler.DataBoundConstructor;",
      "29: import org.kohsuke.stapler.StaplerRequest;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "20: import javax.annotation.Nonnull;",
      "23: import javax.servlet.http.HttpSession;",
      "31: import org.kohsuke.accmod.Restricted;",
      "32: import org.kohsuke.accmod.restrictions.NoExternalUse;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "38:     private transient MessageDigest md;",
      "39:     private boolean excludeClientIPFromCrumb;",
      "41:     @DataBoundConstructor",
      "42:     public DefaultCrumbIssuer(boolean excludeClientIPFromCrumb) {",
      "43:         try {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "46:     @Restricted(NoExternalUse.class)",
      "47:     public static /* non-final: Groovy Console */ boolean EXCLUDE_SESSION_ID = SystemProperties.getBoolean(DefaultCrumbIssuer.class.getName() + \".EXCLUDE_SESSION_ID\");",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "75:                 HttpServletRequest req = (HttpServletRequest) request;",
      "76:                 StringBuilder buffer = new StringBuilder();",
      "77:                 Authentication a = Jenkins.getAuthentication();",
      "81:                 buffer.append(';');",
      "82:                 if (!isExcludeClientIPFromCrumb()) {",
      "83:                     buffer.append(getClientIP(req));",
      "84:                 }",
      "86:                 md.update(buffer.toString().getBytes());",
      "87:                 return Util.toHexString(md.digest(salt.getBytes()));",
      "",
      "[Removed Lines]",
      "78:                 if (a != null) {",
      "79:                     buffer.append(a.getName());",
      "80:                 }",
      "",
      "[Added Lines]",
      "86:                 buffer.append(a.getName());",
      "91:                 if (!EXCLUDE_SESSION_ID) {",
      "92:                     buffer.append(';');",
      "93:                     buffer.append(getSessionId(req));",
      "94:                 }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "90:         return null;",
      "91:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "103:     private String getSessionId(@Nonnull HttpServletRequest request) {",
      "104:         HttpSession session = request.getSession(false);",
      "105:         if (session == null) {",
      "106:             return \"NO_SESSION\";",
      "107:         }",
      "108:         return session.getId();",
      "109:     }",
      "",
      "---------------"
    ],
    "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java": [
      "File: test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java -> test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "7: package hudson.security.csrf;",
      "9: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
      "10: import com.gargoylesoftware.htmlunit.html.DomElement;",
      "11: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
      "12: import hudson.model.User;",
      "13: import org.junit.Before;",
      "14: import org.junit.Rule;",
      "15: import org.junit.Test;",
      "16: import org.jvnet.hudson.test.Issue;",
      "17: import org.jvnet.hudson.test.JenkinsRule;",
      "18: import org.jvnet.hudson.test.JenkinsRule.WebClient;",
      "20: import static org.junit.Assert.assertEquals;",
      "21: import static org.junit.Assert.assertTrue;",
      "22: import static org.junit.Assert.fail;",
      "29: public class DefaultCrumbIssuerSEC626Test {",
      "31:     @Rule public JenkinsRule r = new JenkinsRule();",
      "33:     @Before public void setIssuer() {",
      "34:         r.jenkins.setCrumbIssuer(new DefaultCrumbIssuer(false));",
      "35:     }",
      "37:     @Test",
      "38:     @Issue(\"SECURITY-626\")",
      "39:     public void crumbOnlyValidForOneSession() throws Exception {",
      "40:         r.jenkins.setSecurityRealm(r.createDummySecurityRealm());",
      "41:         DefaultCrumbIssuer issuer = new DefaultCrumbIssuer(false);",
      "42:         r.jenkins.setCrumbIssuer(issuer);",
      "44:         User.getById(\"foo\", true);",
      "46:         DefaultCrumbIssuer.EXCLUDE_SESSION_ID = true;",
      "47:         compareDifferentSessions_tokenAreEqual(true);",
      "49:         DefaultCrumbIssuer.EXCLUDE_SESSION_ID = false;",
      "50:         compareDifferentSessions_tokenAreEqual(false);",
      "51:     }",
      "53:     private void compareDifferentSessions_tokenAreEqual(boolean areEqual) throws Exception {",
      "54:         WebClient wc = r.createWebClient();",
      "55:         wc.login(\"foo\");",
      "57:         HtmlPage p = wc.goTo(\"configure\");",
      "58:         String crumb1 = p.getElementByName(\"Jenkins-Crumb\").getAttribute(\"value\");",
      "59:         r.submit(p.getFormByName(\"config\"));",
      "61:         wc.goTo(\"logout\");",
      "62:         wc.login(\"foo\");",
      "64:         p = wc.goTo(\"configure\");",
      "65:         String crumb2 = p.getElementByName(\"Jenkins-Crumb\").getAttribute(\"value\");",
      "66:         r.submit(p.getFormByName(\"config\"));",
      "68:         assertEquals(crumb1.equals(crumb2), areEqual);",
      "70:         if (areEqual) {",
      "71:             r.submit(p.getFormByName(\"config\"));",
      "72:         } else {",
      "73:             replaceAllCrumbInPageBy(p, crumb1);",
      "74:             try {",
      "76:                 r.submit(p.getFormByName(\"config\"));",
      "77:                 fail();",
      "78:             } catch (FailingHttpStatusCodeException e) {",
      "79:                 assertTrue(e.getMessage().contains(\"No valid crumb\"));",
      "80:             }",
      "81:         }",
      "82:     }",
      "84:     private void replaceAllCrumbInPageBy(HtmlPage page, String newCrumb) {",
      "85:         for (DomElement el : page.getElementsByName(\"Jenkins-Crumb\")) {",
      "86:             el.setAttribute(\"value\", newCrumb);",
      "87:         }",
      "88:     }",
      "89: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "95d2f62ebd4ffd5294c3d20153a240720247939e",
      "candidate_info": {
        "commit_hash": "95d2f62ebd4ffd5294c3d20153a240720247939e",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/95d2f62ebd4ffd5294c3d20153a240720247939e",
        "files": [
          "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
          "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java"
        ],
        "message": "[SECURITY-1491]\n\nCo-Authored-By: Daniel Beck <daniel-beck@users.noreply.github.com>\n(cherry picked from commit ace5965b45ba77665e4dd168314665df63527a62)",
        "before_after_code_files": [
          "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
          "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java": [
          "File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java -> core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "88:                 }",
          "89:                 if (!EXCLUDE_SESSION_ID) {",
          "90:                     buffer.append(';');",
          "92:                 }",
          "94:                 md.update(buffer.toString().getBytes());",
          "",
          "[Removed Lines]",
          "91:                     buffer.append(getSessionId(req));",
          "",
          "[Added Lines]",
          "91:                     buffer.append(req.getSession().getId());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "98:         return null;",
          "99:     }",
          "",
          "[Removed Lines]",
          "101:     private String getSessionId(@Nonnull HttpServletRequest request) {",
          "102:         HttpSession session = request.getSession(false);",
          "103:         if (session == null) {",
          "104:             return \"NO_SESSION\";",
          "105:         }",
          "106:         return session.getId();",
          "107:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java": [
          "File: test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java -> test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package hudson.security.csrf;",
          "3: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
          "4: import com.gargoylesoftware.htmlunit.HttpMethod;",
          "5: import com.gargoylesoftware.htmlunit.WebRequest;",
          "6: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "7: import jenkins.model.Jenkins;",
          "8: import org.junit.Assert;",
          "9: import org.junit.Before;",
          "10: import org.junit.Rule;",
          "11: import org.junit.Test;",
          "12: import org.jvnet.hudson.test.Issue;",
          "13: import org.jvnet.hudson.test.JenkinsRule;",
          "14: import org.jvnet.hudson.test.MockAuthorizationStrategy;",
          "16: import java.net.HttpURLConnection;",
          "17: import java.net.URL;",
          "19: import static org.junit.Assert.assertEquals;",
          "20: import static org.junit.Assert.assertNotNull;",
          "21: import static org.junit.Assert.assertNull;",
          "22: import static org.junit.Assert.assertTrue;",
          "23: import static org.junit.Assert.fail;",
          "26: public class DefaultCrumbIssuerSEC1491Test {",
          "28:     @Rule",
          "29:     public JenkinsRule r = new JenkinsRule();",
          "31:     @Before public void setIssuer() {",
          "32:         r.jenkins.setCrumbIssuer(new DefaultCrumbIssuer(false));",
          "33:     }",
          "35:     @Test",
          "36:     @Issue(\"SECURITY-1491\")",
          "37:     public void sessionIncludedEvenForAnonymousCall() throws Exception {",
          "38:         boolean previousValue = DefaultCrumbIssuer.EXCLUDE_SESSION_ID;",
          "40:         try {",
          "41:             r.jenkins.setSecurityRealm(r.createDummySecurityRealm());",
          "44:             MockAuthorizationStrategy authorizationStrategy = new MockAuthorizationStrategy();",
          "45:             authorizationStrategy.grant(Jenkins.ADMINISTER).everywhere().toEveryone();",
          "46:             r.jenkins.setAuthorizationStrategy(authorizationStrategy);",
          "48:             DefaultCrumbIssuer issuer = new DefaultCrumbIssuer(true);",
          "49:             r.jenkins.setCrumbIssuer(issuer);",
          "51:             DefaultCrumbIssuer.EXCLUDE_SESSION_ID = true;",
          "52:             sameCrumbUsedOnDifferentAnonymousRequest_tokenAreEqual(true, \"job_noSession\");",
          "54:             DefaultCrumbIssuer.EXCLUDE_SESSION_ID = false;",
          "55:             sameCrumbUsedOnDifferentAnonymousRequest_tokenAreEqual(false, \"job_session\");",
          "56:         } finally {",
          "57:             DefaultCrumbIssuer.EXCLUDE_SESSION_ID = previousValue;",
          "58:         }",
          "59:     }",
          "61:     private void sameCrumbUsedOnDifferentAnonymousRequest_tokenAreEqual(boolean areEqual, String namePrefix) throws Exception {",
          "62:         String responseForCrumb = r.createWebClient().goTo(\"crumbIssuer/api/xml?xpath=concat(//crumbRequestField,'=',//crumb)\", \"text/plain\")",
          "63:                 .getWebResponse().getContentAsString();",
          "65:         String crumb1 = responseForCrumb.substring(CrumbIssuer.DEFAULT_CRUMB_NAME.length() + \"=\".length());",
          "67:         String jobName1 = namePrefix + \"-test1\";",
          "68:         String jobName2 = namePrefix + \"-test2\";",
          "70:         WebRequest request1 = createRequestForJobCreation(jobName1);",
          "71:         try {",
          "72:             r.createWebClient().getPage(request1);",
          "73:             fail();",
          "74:         } catch (FailingHttpStatusCodeException e) {",
          "75:             assertTrue(e.getMessage().contains(\"No valid crumb\"));",
          "76:         }",
          "78:         assertNull(r.jenkins.getItem(jobName1));",
          "80:         WebRequest request2 = createRequestForJobCreation(jobName2);",
          "81:         request2.setAdditionalHeader(CrumbIssuer.DEFAULT_CRUMB_NAME, crumb1);",
          "82:         if (areEqual) {",
          "83:             r.createWebClient().getPage(request2);",
          "85:             assertNotNull(r.jenkins.getItem(jobName2));",
          "86:         } else {",
          "87:             try {",
          "88:                 r.createWebClient().getPage(request2);",
          "89:                 fail(\"Should have failed due to invalid crumb\");",
          "90:             } catch (FailingHttpStatusCodeException e) {",
          "91:                 assertEquals(HttpURLConnection.HTTP_FORBIDDEN, e.getStatusCode());",
          "93:                 assertNull(r.jenkins.getItem(jobName2));",
          "94:             }",
          "95:         }",
          "96:     }",
          "98:     @Test",
          "99:     @Issue(\"SECURITY-1491\")",
          "100:     public void twoRequestsWithoutSessionGetDifferentCrumbs() throws Exception {",
          "101:         String responseForCrumb = r.createWebClient().goTo(\"crumbIssuer/api/xml?xpath=concat(//crumbRequestField,'=',//crumb)\", \"text/plain\")",
          "102:                 .getWebResponse().getContentAsString();",
          "104:         String crumb1 = responseForCrumb.substring(CrumbIssuer.DEFAULT_CRUMB_NAME.length() + \"=\".length());",
          "106:         responseForCrumb = r.createWebClient().goTo(\"crumbIssuer/api/xml?xpath=concat(//crumbRequestField,'=',//crumb)\", \"text/plain\")",
          "107:                 .getWebResponse().getContentAsString();",
          "109:         String crumb2 = responseForCrumb.substring(CrumbIssuer.DEFAULT_CRUMB_NAME.length() + \"=\".length());",
          "111:         Assert.assertNotEquals(\"should be different crumbs\", crumb1, crumb2);",
          "112:     }",
          "114:     private WebRequest createRequestForJobCreation(String jobName) throws Exception {",
          "115:         WebRequest req = new WebRequest(new URL(r.getURL() + \"createItem?name=\" + jobName), HttpMethod.POST);",
          "116:         req.setAdditionalHeader(\"Content-Type\", \"application/xml\");",
          "117:         req.setRequestBody(\"<project/>\");",
          "118:         return req;",
          "119:     }",
          "121:     @Test",
          "122:     public void anonCanStillPostRequestUsingBrowsers() throws Exception {",
          "123:         r.jenkins.setSecurityRealm(r.createDummySecurityRealm());",
          "125:         MockAuthorizationStrategy authorizationStrategy = new MockAuthorizationStrategy();",
          "126:         authorizationStrategy.grant(Jenkins.ADMINISTER).everywhere().toEveryone();",
          "127:         r.jenkins.setAuthorizationStrategy(authorizationStrategy);",
          "129:         DefaultCrumbIssuer issuer = new DefaultCrumbIssuer(true);",
          "130:         r.jenkins.setCrumbIssuer(issuer);",
          "132:         HtmlPage p = r.createWebClient().goTo(\"configure\");",
          "133:         r.submit(p.getFormByName(\"config\"));",
          "134:     }",
          "135: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ace5965b45ba77665e4dd168314665df63527a62",
      "candidate_info": {
        "commit_hash": "ace5965b45ba77665e4dd168314665df63527a62",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/ace5965b45ba77665e4dd168314665df63527a62",
        "files": [
          "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
          "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java"
        ],
        "message": "[SECURITY-1491]\n\nCo-Authored-By: Daniel Beck <daniel-beck@users.noreply.github.com>",
        "before_after_code_files": [
          "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
          "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java"
          ]
        }
      },
      "candidate_diff": {
        "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java": [
          "File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java -> core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:                 }",
          "91:                 if (!EXCLUDE_SESSION_ID) {",
          "92:                     buffer.append(';');",
          "94:                 }",
          "96:                 md.update(buffer.toString().getBytes());",
          "",
          "[Removed Lines]",
          "93:                     buffer.append(getSessionId(req));",
          "",
          "[Added Lines]",
          "93:                     buffer.append(req.getSession().getId());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "100:         return null;",
          "101:     }",
          "",
          "[Removed Lines]",
          "103:     private String getSessionId(@Nonnull HttpServletRequest request) {",
          "104:         HttpSession session = request.getSession(false);",
          "105:         if (session == null) {",
          "106:             return \"NO_SESSION\";",
          "107:         }",
          "108:         return session.getId();",
          "109:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java": [
          "File: test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java -> test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: package hudson.security.csrf;",
          "3: import com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;",
          "4: import com.gargoylesoftware.htmlunit.HttpMethod;",
          "5: import com.gargoylesoftware.htmlunit.WebRequest;",
          "6: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "7: import jenkins.model.Jenkins;",
          "8: import org.junit.Assert;",
          "9: import org.junit.Before;",
          "10: import org.junit.Rule;",
          "11: import org.junit.Test;",
          "12: import org.jvnet.hudson.test.Issue;",
          "13: import org.jvnet.hudson.test.JenkinsRule;",
          "14: import org.jvnet.hudson.test.MockAuthorizationStrategy;",
          "16: import java.net.HttpURLConnection;",
          "17: import java.net.URL;",
          "19: import static org.junit.Assert.assertEquals;",
          "20: import static org.junit.Assert.assertNotNull;",
          "21: import static org.junit.Assert.assertNull;",
          "22: import static org.junit.Assert.assertTrue;",
          "23: import static org.junit.Assert.fail;",
          "26: public class DefaultCrumbIssuerSEC1491Test {",
          "28:     @Rule",
          "29:     public JenkinsRule r = new JenkinsRule();",
          "31:     @Before public void setIssuer() {",
          "32:         r.jenkins.setCrumbIssuer(new DefaultCrumbIssuer(false));",
          "33:     }",
          "35:     @Test",
          "36:     @Issue(\"SECURITY-1491\")",
          "37:     public void sessionIncludedEvenForAnonymousCall() throws Exception {",
          "38:         boolean previousValue = DefaultCrumbIssuer.EXCLUDE_SESSION_ID;",
          "40:         try {",
          "41:             r.jenkins.setSecurityRealm(r.createDummySecurityRealm());",
          "44:             MockAuthorizationStrategy authorizationStrategy = new MockAuthorizationStrategy();",
          "45:             authorizationStrategy.grant(Jenkins.ADMINISTER).everywhere().toEveryone();",
          "46:             r.jenkins.setAuthorizationStrategy(authorizationStrategy);",
          "48:             DefaultCrumbIssuer issuer = new DefaultCrumbIssuer(true);",
          "49:             r.jenkins.setCrumbIssuer(issuer);",
          "51:             DefaultCrumbIssuer.EXCLUDE_SESSION_ID = true;",
          "52:             sameCrumbUsedOnDifferentAnonymousRequest_tokenAreEqual(true, \"job_noSession\");",
          "54:             DefaultCrumbIssuer.EXCLUDE_SESSION_ID = false;",
          "55:             sameCrumbUsedOnDifferentAnonymousRequest_tokenAreEqual(false, \"job_session\");",
          "56:         } finally {",
          "57:             DefaultCrumbIssuer.EXCLUDE_SESSION_ID = previousValue;",
          "58:         }",
          "59:     }",
          "61:     private void sameCrumbUsedOnDifferentAnonymousRequest_tokenAreEqual(boolean areEqual, String namePrefix) throws Exception {",
          "62:         String responseForCrumb = r.createWebClient().goTo(\"crumbIssuer/api/xml?xpath=concat(//crumbRequestField,'=',//crumb)\", \"text/plain\")",
          "63:                 .getWebResponse().getContentAsString();",
          "65:         String crumb1 = responseForCrumb.substring(CrumbIssuer.DEFAULT_CRUMB_NAME.length() + \"=\".length());",
          "67:         String jobName1 = namePrefix + \"-test1\";",
          "68:         String jobName2 = namePrefix + \"-test2\";",
          "70:         WebRequest request1 = createRequestForJobCreation(jobName1);",
          "71:         try {",
          "72:             r.createWebClient().getPage(request1);",
          "73:             fail();",
          "74:         } catch (FailingHttpStatusCodeException e) {",
          "75:             assertTrue(e.getMessage().contains(\"No valid crumb\"));",
          "76:         }",
          "78:         assertNull(r.jenkins.getItem(jobName1));",
          "80:         WebRequest request2 = createRequestForJobCreation(jobName2);",
          "81:         request2.setAdditionalHeader(CrumbIssuer.DEFAULT_CRUMB_NAME, crumb1);",
          "82:         if (areEqual) {",
          "83:             r.createWebClient().getPage(request2);",
          "85:             assertNotNull(r.jenkins.getItem(jobName2));",
          "86:         } else {",
          "87:             try {",
          "88:                 r.createWebClient().getPage(request2);",
          "89:                 fail(\"Should have failed due to invalid crumb\");",
          "90:             } catch (FailingHttpStatusCodeException e) {",
          "91:                 assertEquals(HttpURLConnection.HTTP_FORBIDDEN, e.getStatusCode());",
          "93:                 assertNull(r.jenkins.getItem(jobName2));",
          "94:             }",
          "95:         }",
          "96:     }",
          "98:     @Test",
          "99:     @Issue(\"SECURITY-1491\")",
          "100:     public void twoRequestsWithoutSessionGetDifferentCrumbs() throws Exception {",
          "101:         String responseForCrumb = r.createWebClient().goTo(\"crumbIssuer/api/xml?xpath=concat(//crumbRequestField,'=',//crumb)\", \"text/plain\")",
          "102:                 .getWebResponse().getContentAsString();",
          "104:         String crumb1 = responseForCrumb.substring(CrumbIssuer.DEFAULT_CRUMB_NAME.length() + \"=\".length());",
          "106:         responseForCrumb = r.createWebClient().goTo(\"crumbIssuer/api/xml?xpath=concat(//crumbRequestField,'=',//crumb)\", \"text/plain\")",
          "107:                 .getWebResponse().getContentAsString();",
          "109:         String crumb2 = responseForCrumb.substring(CrumbIssuer.DEFAULT_CRUMB_NAME.length() + \"=\".length());",
          "111:         Assert.assertNotEquals(\"should be different crumbs\", crumb1, crumb2);",
          "112:     }",
          "114:     private WebRequest createRequestForJobCreation(String jobName) throws Exception {",
          "115:         WebRequest req = new WebRequest(new URL(r.getURL() + \"createItem?name=\" + jobName), HttpMethod.POST);",
          "116:         req.setAdditionalHeader(\"Content-Type\", \"application/xml\");",
          "117:         req.setRequestBody(\"<project/>\");",
          "118:         return req;",
          "119:     }",
          "121:     @Test",
          "122:     public void anonCanStillPostRequestUsingBrowsers() throws Exception {",
          "123:         r.jenkins.setSecurityRealm(r.createDummySecurityRealm());",
          "125:         MockAuthorizationStrategy authorizationStrategy = new MockAuthorizationStrategy();",
          "126:         authorizationStrategy.grant(Jenkins.ADMINISTER).everywhere().toEveryone();",
          "127:         r.jenkins.setAuthorizationStrategy(authorizationStrategy);",
          "129:         DefaultCrumbIssuer issuer = new DefaultCrumbIssuer(true);",
          "130:         r.jenkins.setCrumbIssuer(issuer);",
          "132:         HtmlPage p = r.createWebClient().goTo(\"configure\");",
          "133:         r.submit(p.getFormByName(\"config\"));",
          "134:     }",
          "135: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "20786f087b6ab92e5667f7202ad743b51c14becd",
      "candidate_info": {
        "commit_hash": "20786f087b6ab92e5667f7202ad743b51c14becd",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/20786f087b6ab92e5667f7202ad743b51c14becd",
        "files": [
          "cli/src/main/java/hudson/util/QuotedStringTokenizer.java",
          "core/src/main/java/hudson/ClassicPluginStrategy.java",
          "core/src/main/java/hudson/model/AbstractItem.java",
          "core/src/main/java/hudson/model/DisplayNameListener.java",
          "core/src/main/java/hudson/model/Queue.java",
          "core/src/main/java/hudson/security/DeferredCreationLdapAuthoritiesPopulator.java",
          "core/src/main/java/hudson/security/csrf/CrumbExclusion.java",
          "core/src/main/java/hudson/security/csrf/CrumbFilter.java",
          "core/src/main/java/hudson/security/csrf/CrumbIssuer.java",
          "core/src/main/java/hudson/security/csrf/CrumbIssuerDescriptor.java",
          "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
          "core/src/main/java/hudson/util/MaskingClassLoader.java",
          "core/src/main/java/hudson/util/RobustReflectionConverter.java",
          "core/src/test/java/hudson/model/AbstractItemTest.java",
          "test/src/test/java/hudson/cli/CancelQuietDownCommandTest.java",
          "test/src/test/java/hudson/cli/ClearQueueCommandTest.java",
          "test/src/test/java/hudson/cli/ConnectNodeCommandTest.java",
          "test/src/test/java/hudson/cli/DeleteNodeCommandTest.java",
          "test/src/test/java/hudson/cli/DisconnectNodeCommandTest.java",
          "test/src/test/java/hudson/cli/OfflineNodeCommandTest.java",
          "test/src/test/java/hudson/cli/OnlineNodeCommandTest.java",
          "test/src/test/java/hudson/cli/QuietDownCommandTest.java",
          "test/src/test/java/hudson/cli/WaitNodeOfflineCommandTest.java",
          "test/src/test/java/hudson/cli/WaitNodeOnlineCommandTest.java",
          "test/src/test/java/hudson/model/ProjectTest.java",
          "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java",
          "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerTest.java"
        ],
        "message": "Fix dangling Javadocs",
        "before_after_code_files": [
          "cli/src/main/java/hudson/util/QuotedStringTokenizer.java||cli/src/main/java/hudson/util/QuotedStringTokenizer.java",
          "core/src/main/java/hudson/ClassicPluginStrategy.java||core/src/main/java/hudson/ClassicPluginStrategy.java",
          "core/src/main/java/hudson/model/AbstractItem.java||core/src/main/java/hudson/model/AbstractItem.java",
          "core/src/main/java/hudson/model/DisplayNameListener.java||core/src/main/java/hudson/model/DisplayNameListener.java",
          "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java",
          "core/src/main/java/hudson/security/DeferredCreationLdapAuthoritiesPopulator.java||core/src/main/java/hudson/security/DeferredCreationLdapAuthoritiesPopulator.java",
          "core/src/main/java/hudson/security/csrf/CrumbExclusion.java||core/src/main/java/hudson/security/csrf/CrumbExclusion.java",
          "core/src/main/java/hudson/security/csrf/CrumbFilter.java||core/src/main/java/hudson/security/csrf/CrumbFilter.java",
          "core/src/main/java/hudson/security/csrf/CrumbIssuer.java||core/src/main/java/hudson/security/csrf/CrumbIssuer.java",
          "core/src/main/java/hudson/security/csrf/CrumbIssuerDescriptor.java||core/src/main/java/hudson/security/csrf/CrumbIssuerDescriptor.java",
          "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
          "core/src/main/java/hudson/util/MaskingClassLoader.java||core/src/main/java/hudson/util/MaskingClassLoader.java",
          "core/src/main/java/hudson/util/RobustReflectionConverter.java||core/src/main/java/hudson/util/RobustReflectionConverter.java",
          "core/src/test/java/hudson/model/AbstractItemTest.java||core/src/test/java/hudson/model/AbstractItemTest.java",
          "test/src/test/java/hudson/cli/CancelQuietDownCommandTest.java||test/src/test/java/hudson/cli/CancelQuietDownCommandTest.java",
          "test/src/test/java/hudson/cli/ClearQueueCommandTest.java||test/src/test/java/hudson/cli/ClearQueueCommandTest.java",
          "test/src/test/java/hudson/cli/ConnectNodeCommandTest.java||test/src/test/java/hudson/cli/ConnectNodeCommandTest.java",
          "test/src/test/java/hudson/cli/DeleteNodeCommandTest.java||test/src/test/java/hudson/cli/DeleteNodeCommandTest.java",
          "test/src/test/java/hudson/cli/DisconnectNodeCommandTest.java||test/src/test/java/hudson/cli/DisconnectNodeCommandTest.java",
          "test/src/test/java/hudson/cli/OfflineNodeCommandTest.java||test/src/test/java/hudson/cli/OfflineNodeCommandTest.java",
          "test/src/test/java/hudson/cli/OnlineNodeCommandTest.java||test/src/test/java/hudson/cli/OnlineNodeCommandTest.java",
          "test/src/test/java/hudson/cli/QuietDownCommandTest.java||test/src/test/java/hudson/cli/QuietDownCommandTest.java",
          "test/src/test/java/hudson/cli/WaitNodeOfflineCommandTest.java||test/src/test/java/hudson/cli/WaitNodeOfflineCommandTest.java",
          "test/src/test/java/hudson/cli/WaitNodeOnlineCommandTest.java||test/src/test/java/hudson/cli/WaitNodeOnlineCommandTest.java",
          "test/src/test/java/hudson/model/ProjectTest.java||test/src/test/java/hudson/model/ProjectTest.java",
          "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java",
          "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerTest.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
            "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java"
          ],
          "candidate": [
            "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
            "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java"
          ]
        }
      },
      "candidate_diff": {
        "cli/src/main/java/hudson/util/QuotedStringTokenizer.java||cli/src/main/java/hudson/util/QuotedStringTokenizer.java": [
          "File: cli/src/main/java/hudson/util/QuotedStringTokenizer.java -> cli/src/main/java/hudson/util/QuotedStringTokenizer.java"
        ],
        "core/src/main/java/hudson/ClassicPluginStrategy.java||core/src/main/java/hudson/ClassicPluginStrategy.java": [
          "File: core/src/main/java/hudson/ClassicPluginStrategy.java -> core/src/main/java/hudson/ClassicPluginStrategy.java"
        ],
        "core/src/main/java/hudson/model/AbstractItem.java||core/src/main/java/hudson/model/AbstractItem.java": [
          "File: core/src/main/java/hudson/model/AbstractItem.java -> core/src/main/java/hudson/model/AbstractItem.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:         return AlternativeUiTextProvider.get(TASK_NOUN, this, Messages.AbstractItem_TaskNoun());",
          "156:     }",
          "163:     public String getDisplayName() {",
          "164:         if(null!=displayName) {",
          "165:             return displayName;",
          "",
          "[Removed Lines]",
          "158:     @Exported",
          "",
          "[Added Lines]",
          "162:     @Exported",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:         return getName();",
          "169:     }",
          "178:     public String getDisplayNameOrNull() {",
          "179:         return displayName;",
          "180:     }",
          "",
          "[Removed Lines]",
          "171:     @Exported",
          "",
          "[Added Lines]",
          "177:     @Exported",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/DisplayNameListener.java||core/src/main/java/hudson/model/DisplayNameListener.java": [
          "File: core/src/main/java/hudson/model/DisplayNameListener.java -> core/src/main/java/hudson/model/DisplayNameListener.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     private final static Logger LOGGER = Logger.getLogger(DisplayNameListener.class.getName());",
          "51:     public void onCopied(Item src, Item item) {",
          "53:         if(item instanceof AbstractItem && src.getParent() == item.getParent()) {",
          "",
          "[Removed Lines]",
          "44:     @Override",
          "",
          "[Added Lines]",
          "50:     @Override",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "60:         }",
          "61:     }",
          "",
          "[Removed Lines]",
          "63:     @Override",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:     public void onRenamed(Item item, String oldName, String newName) {",
          "74:         if(item instanceof AbstractItem) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "71:     @Override",
          "",
          "---------------"
        ],
        "core/src/main/java/hudson/model/Queue.java||core/src/main/java/hudson/model/Queue.java": [
          "File: core/src/main/java/hudson/model/Queue.java -> core/src/main/java/hudson/model/Queue.java"
        ],
        "core/src/main/java/hudson/security/DeferredCreationLdapAuthoritiesPopulator.java||core/src/main/java/hudson/security/DeferredCreationLdapAuthoritiesPopulator.java": [
          "File: core/src/main/java/hudson/security/DeferredCreationLdapAuthoritiesPopulator.java -> core/src/main/java/hudson/security/DeferredCreationLdapAuthoritiesPopulator.java"
        ],
        "core/src/main/java/hudson/security/csrf/CrumbExclusion.java||core/src/main/java/hudson/security/csrf/CrumbExclusion.java": [
          "File: core/src/main/java/hudson/security/csrf/CrumbExclusion.java -> core/src/main/java/hudson/security/csrf/CrumbExclusion.java"
        ],
        "core/src/main/java/hudson/security/csrf/CrumbFilter.java||core/src/main/java/hudson/security/csrf/CrumbFilter.java": [
          "File: core/src/main/java/hudson/security/csrf/CrumbFilter.java -> core/src/main/java/hudson/security/csrf/CrumbFilter.java"
        ],
        "core/src/main/java/hudson/security/csrf/CrumbIssuer.java||core/src/main/java/hudson/security/csrf/CrumbIssuer.java": [
          "File: core/src/main/java/hudson/security/csrf/CrumbIssuer.java -> core/src/main/java/hudson/security/csrf/CrumbIssuer.java"
        ],
        "core/src/main/java/hudson/security/csrf/CrumbIssuerDescriptor.java||core/src/main/java/hudson/security/csrf/CrumbIssuerDescriptor.java": [
          "File: core/src/main/java/hudson/security/csrf/CrumbIssuerDescriptor.java -> core/src/main/java/hudson/security/csrf/CrumbIssuerDescriptor.java"
        ],
        "core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java||core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java": [
          "File: core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java -> core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java"
        ],
        "core/src/main/java/hudson/util/MaskingClassLoader.java||core/src/main/java/hudson/util/MaskingClassLoader.java": [
          "File: core/src/main/java/hudson/util/MaskingClassLoader.java -> core/src/main/java/hudson/util/MaskingClassLoader.java"
        ],
        "core/src/main/java/hudson/util/RobustReflectionConverter.java||core/src/main/java/hudson/util/RobustReflectionConverter.java": [
          "File: core/src/main/java/hudson/util/RobustReflectionConverter.java -> core/src/main/java/hudson/util/RobustReflectionConverter.java"
        ],
        "core/src/test/java/hudson/model/AbstractItemTest.java||core/src/test/java/hudson/model/AbstractItemTest.java": [
          "File: core/src/test/java/hudson/model/AbstractItemTest.java -> core/src/test/java/hudson/model/AbstractItemTest.java"
        ],
        "test/src/test/java/hudson/cli/CancelQuietDownCommandTest.java||test/src/test/java/hudson/cli/CancelQuietDownCommandTest.java": [
          "File: test/src/test/java/hudson/cli/CancelQuietDownCommandTest.java -> test/src/test/java/hudson/cli/CancelQuietDownCommandTest.java"
        ],
        "test/src/test/java/hudson/cli/ClearQueueCommandTest.java||test/src/test/java/hudson/cli/ClearQueueCommandTest.java": [
          "File: test/src/test/java/hudson/cli/ClearQueueCommandTest.java -> test/src/test/java/hudson/cli/ClearQueueCommandTest.java"
        ],
        "test/src/test/java/hudson/cli/ConnectNodeCommandTest.java||test/src/test/java/hudson/cli/ConnectNodeCommandTest.java": [
          "File: test/src/test/java/hudson/cli/ConnectNodeCommandTest.java -> test/src/test/java/hudson/cli/ConnectNodeCommandTest.java"
        ],
        "test/src/test/java/hudson/cli/DeleteNodeCommandTest.java||test/src/test/java/hudson/cli/DeleteNodeCommandTest.java": [
          "File: test/src/test/java/hudson/cli/DeleteNodeCommandTest.java -> test/src/test/java/hudson/cli/DeleteNodeCommandTest.java"
        ],
        "test/src/test/java/hudson/cli/DisconnectNodeCommandTest.java||test/src/test/java/hudson/cli/DisconnectNodeCommandTest.java": [
          "File: test/src/test/java/hudson/cli/DisconnectNodeCommandTest.java -> test/src/test/java/hudson/cli/DisconnectNodeCommandTest.java"
        ],
        "test/src/test/java/hudson/cli/OfflineNodeCommandTest.java||test/src/test/java/hudson/cli/OfflineNodeCommandTest.java": [
          "File: test/src/test/java/hudson/cli/OfflineNodeCommandTest.java -> test/src/test/java/hudson/cli/OfflineNodeCommandTest.java"
        ],
        "test/src/test/java/hudson/cli/OnlineNodeCommandTest.java||test/src/test/java/hudson/cli/OnlineNodeCommandTest.java": [
          "File: test/src/test/java/hudson/cli/OnlineNodeCommandTest.java -> test/src/test/java/hudson/cli/OnlineNodeCommandTest.java"
        ],
        "test/src/test/java/hudson/cli/QuietDownCommandTest.java||test/src/test/java/hudson/cli/QuietDownCommandTest.java": [
          "File: test/src/test/java/hudson/cli/QuietDownCommandTest.java -> test/src/test/java/hudson/cli/QuietDownCommandTest.java"
        ],
        "test/src/test/java/hudson/cli/WaitNodeOfflineCommandTest.java||test/src/test/java/hudson/cli/WaitNodeOfflineCommandTest.java": [
          "File: test/src/test/java/hudson/cli/WaitNodeOfflineCommandTest.java -> test/src/test/java/hudson/cli/WaitNodeOfflineCommandTest.java"
        ],
        "test/src/test/java/hudson/cli/WaitNodeOnlineCommandTest.java||test/src/test/java/hudson/cli/WaitNodeOnlineCommandTest.java": [
          "File: test/src/test/java/hudson/cli/WaitNodeOnlineCommandTest.java -> test/src/test/java/hudson/cli/WaitNodeOnlineCommandTest.java"
        ],
        "test/src/test/java/hudson/model/ProjectTest.java||test/src/test/java/hudson/model/ProjectTest.java": [
          "File: test/src/test/java/hudson/model/ProjectTest.java -> test/src/test/java/hudson/model/ProjectTest.java"
        ],
        "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java": [
          "File: test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java -> test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: import static org.junit.Assert.fail;",
          "31:     @Rule public JenkinsRule r = new JenkinsRule();",
          "",
          "[Removed Lines]",
          "29: public class DefaultCrumbIssuerSEC626Test {",
          "",
          "[Added Lines]",
          "27: public class DefaultCrumbIssuerSEC626Test { //TODO merge back to DefaultCrumbIssuerTest",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerTest.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerTest.java": [
          "File: test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerTest.java -> test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerTest.java"
        ]
      }
    },
    {
      "candidate_hash": "f86cf08e1ee97af0c03d437f891420141f7be723",
      "candidate_info": {
        "commit_hash": "f86cf08e1ee97af0c03d437f891420141f7be723",
        "repo": "jenkinsci/jenkins",
        "commit_url": "https://github.com/jenkinsci/jenkins/commit/f86cf08e1ee97af0c03d437f891420141f7be723",
        "files": [
          "test-pom/pom.xml",
          "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java",
          "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java",
          "test/src/test/java/jenkins/security/ResourceDomainTest.java"
        ],
        "message": "Adapt some tests to newer Jetty.",
        "before_after_code_files": [
          "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java",
          "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java",
          "test/src/test/java/jenkins/security/ResourceDomainTest.java||test/src/test/java/jenkins/security/ResourceDomainTest.java"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java"
          ],
          "candidate": [
            "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java"
          ]
        }
      },
      "candidate_diff": {
        "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java": [
          "File: test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java -> test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC1491Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "4: import com.gargoylesoftware.htmlunit.HttpMethod;",
          "5: import com.gargoylesoftware.htmlunit.WebRequest;",
          "6: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "7: import jenkins.model.Jenkins;",
          "8: import org.junit.Assert;",
          "9: import org.junit.Before;",
          "10: import org.junit.Rule;",
          "11: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7: import java.net.HttpURLConnection;",
          "8: import java.net.URL;",
          "9: import javax.servlet.http.HttpServletResponse;",
          "11: import static org.hamcrest.Matchers.*;",
          "13: import static org.junit.Assert.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "13: import org.jvnet.hudson.test.JenkinsRule;",
          "14: import org.jvnet.hudson.test.MockAuthorizationStrategy;",
          "26: public class DefaultCrumbIssuerSEC1491Test {",
          "",
          "[Removed Lines]",
          "16: import java.net.HttpURLConnection;",
          "17: import java.net.URL;",
          "19: import static org.junit.Assert.assertEquals;",
          "20: import static org.junit.Assert.assertNotNull;",
          "21: import static org.junit.Assert.assertNull;",
          "22: import static org.junit.Assert.assertTrue;",
          "23: import static org.junit.Assert.fail;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "72:             r.createWebClient().getPage(request1);",
          "73:             fail();",
          "74:         } catch (FailingHttpStatusCodeException e) {",
          "76:         }",
          "78:         assertNull(r.jenkins.getItem(jobName1));",
          "",
          "[Removed Lines]",
          "75:             assertTrue(e.getMessage().contains(\"No valid crumb\"));",
          "",
          "[Added Lines]",
          "71:             assertEquals(HttpServletResponse.SC_FORBIDDEN, e.getStatusCode());",
          "72:             assertThat(e.getResponse().getContentAsString(), containsString(\"No valid crumb\"));",
          "",
          "---------------"
        ],
        "test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java||test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java": [
          "File: test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java -> test/src/test/java/hudson/security/csrf/DefaultCrumbIssuerSEC626Test.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import com.gargoylesoftware.htmlunit.html.DomElement;",
          "11: import com.gargoylesoftware.htmlunit.html.HtmlPage;",
          "12: import hudson.model.User;",
          "13: import org.junit.Before;",
          "14: import org.junit.Rule;",
          "15: import org.junit.Test;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: import javax.servlet.http.HttpServletResponse;",
          "14: import static org.hamcrest.Matchers.*;",
          "15: import static org.junit.Assert.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "17: import org.jvnet.hudson.test.JenkinsRule;",
          "18: import org.jvnet.hudson.test.JenkinsRule.WebClient;",
          "",
          "[Removed Lines]",
          "20: import static org.junit.Assert.assertEquals;",
          "21: import static org.junit.Assert.assertTrue;",
          "22: import static org.junit.Assert.fail;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "74:                 r.submit(p.getFormByName(\"config\"));",
          "75:                 fail();",
          "76:             } catch (FailingHttpStatusCodeException e) {",
          "78:             }",
          "79:         }",
          "80:     }",
          "",
          "[Removed Lines]",
          "77:                 assertTrue(e.getMessage().contains(\"No valid crumb\"));",
          "",
          "[Added Lines]",
          "76:                 assertEquals(HttpServletResponse.SC_FORBIDDEN, e.getStatusCode());",
          "77:                 assertThat(e.getResponse().getContentAsString(), containsString(\"No valid crumb\"));",
          "",
          "---------------"
        ],
        "test/src/test/java/jenkins/security/ResourceDomainTest.java||test/src/test/java/jenkins/security/ResourceDomainTest.java": [
          "File: test/src/test/java/jenkins/security/ResourceDomainTest.java -> test/src/test/java/jenkins/security/ResourceDomainTest.java",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: import hudson.model.UnprotectedRootAction;",
          "11: import jenkins.model.Jenkins;",
          "12: import jenkins.model.JenkinsLocationConfiguration;",
          "13: import org.junit.Assert;",
          "14: import org.junit.Before;",
          "15: import org.junit.Rule;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: import static org.hamcrest.Matchers.*;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "176:             String modifiedUrl = resourceResponseUrl.replaceAll(\"static[-]files[/]....\", \"static-files/aaaa\");",
          "177:             Page page = webClient.getPage(modifiedUrl);",
          "178:             Assert.assertEquals(\"resource not found\", 404, page.getWebResponse().getStatusCode());",
          "180:         }",
          "",
          "[Removed Lines]",
          "179:             Assert.assertEquals(\"resource not found\", ResourceDomainFilter.ERROR_RESPONSE, page.getWebResponse().getStatusMessage());",
          "",
          "[Added Lines]",
          "180:             Assert.assertThat(\"resource not found\", page.getWebResponse().getContentAsString(), containsString(ResourceDomainFilter.ERROR_RESPONSE));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:         page = webClient.getPage(anonUrl);",
          "221:         Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());",
          "225:         a = new MockAuthorizationStrategy();",
          "",
          "[Removed Lines]",
          "222:         Assert.assertTrue(\"Response mentions workspace permission\", page.getWebResponse().getStatusMessage().contains(\"Failed permission check: anonymous is missing the Job/Workspace permission\"));",
          "",
          "[Added Lines]",
          "223:         Assert.assertThat(\"Response mentions workspace permission\", page.getWebResponse().getContentAsString(), containsString(\"Failed permission check: anonymous is missing the Job/Workspace permission\"));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "231:         page = webClient.getPage(anonUrl);",
          "232:         Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());",
          "234:     }",
          "236:     @Test",
          "",
          "[Removed Lines]",
          "233:         Assert.assertTrue(\"Response mentions workspace permission\", page.getWebResponse().getStatusMessage().contains(\"Failed permission check: Please login to access job\"));",
          "",
          "[Added Lines]",
          "234:         Assert.assertThat(\"Response mentions workspace permission\", page.getWebResponse().getContentAsString(), containsString(\"Failed permission check: Please login to access job\"));",
          "",
          "---------------"
        ]
      }
    }
  ]
}