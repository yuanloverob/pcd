{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "2240bb88f81759cd975a0cfe377e7fcd6a6f501b",
      "candidate_info": {
        "commit_hash": "2240bb88f81759cd975a0cfe377e7fcd6a6f501b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2240bb88f81759cd975a0cfe377e7fcd6a6f501b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereInt.h",
          "tool/lemon.c"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: 956ca2a452aa3707bca553007a7ef221af3d4f6b0af747d17070926e000f2362",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereInt.h||src/whereInt.h",
          "tool/lemon.c||tool/lemon.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2846bc0429c0956473bfe99dde135f2c206720f0be4c2800118b280e446ce325",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #ifndef SQLITE_WHEREINT_H",
          "18: #define SQLITE_WHEREINT_H",
          "",
          "---------------"
        ],
        "tool/lemon.c||tool/lemon.c": [
          "File: tool/lemon.c -> tool/lemon.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "485: static struct action *Action_new(void){",
          "487:   struct action *newaction;",
          "490:     int i;",
          "491:     int amt = 100;",
          "494:       fprintf(stderr,\"Unable to allocate memory for a new parser action.\");",
          "495:       exit(1);",
          "496:     }",
          "499:   }",
          "502:   return newaction;",
          "503: }",
          "",
          "[Removed Lines]",
          "486:   static struct action *freelist = 0;",
          "489:   if( freelist==0 ){",
          "492:     freelist = (struct action *)calloc(amt, sizeof(struct action));",
          "493:     if( freelist==0 ){",
          "497:     for(i=0; i<amt-1; i++) freelist[i].next = &freelist[i+1];",
          "498:     freelist[amt-1].next = 0;",
          "500:   newaction = freelist;",
          "501:   freelist = freelist->next;",
          "",
          "[Added Lines]",
          "486:   static struct action *actionfreelist = 0;",
          "489:   if( actionfreelist==0 ){",
          "492:     actionfreelist = (struct action *)calloc(amt, sizeof(struct action));",
          "493:     if( actionfreelist==0 ){",
          "497:     for(i=0; i<amt-1; i++) actionfreelist[i].next = &actionfreelist[i+1];",
          "498:     actionfreelist[amt-1].next = 0;",
          "500:   newaction = actionfreelist;",
          "501:   actionfreelist = actionfreelist->next;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1907:   return ep;",
          "1908: }",
          "1911: static struct s_options *op;",
          "1912: static FILE *errstream;",
          "",
          "[Removed Lines]",
          "1910: static char **argv;",
          "",
          "[Added Lines]",
          "1910: static char **g_argv;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1920: static void errline(int n, int k, FILE *err)",
          "1921: {",
          "1922:   int spcnt, i;",
          "1928:   }",
          "1929:   spcnt += k;",
          "1931:   if( spcnt<20 ){",
          "1932:     fprintf(err,\"\\n%*s^-- here\\n\",spcnt,\"\");",
          "1933:   }else{",
          "",
          "[Removed Lines]",
          "1923:   if( argv[0] ) fprintf(err,\"%s\",argv[0]);",
          "1924:   spcnt = lemonStrlen(argv[0]) + 1;",
          "1925:   for(i=1; i<n && argv[i]; i++){",
          "1926:     fprintf(err,\" %s\",argv[i]);",
          "1927:     spcnt += lemonStrlen(argv[i])+1;",
          "1930:   for(; argv[i]; i++) fprintf(err,\" %s\",argv[i]);",
          "",
          "[Added Lines]",
          "1923:   if( g_argv[0] ) fprintf(err,\"%s\",g_argv[0]);",
          "1924:   spcnt = lemonStrlen(g_argv[0]) + 1;",
          "1925:   for(i=1; i<n && g_argv[i]; i++){",
          "1926:     fprintf(err,\" %s\",g_argv[i]);",
          "1927:     spcnt += lemonStrlen(g_argv[i])+1;",
          "1930:   for(; g_argv[i]; i++) fprintf(err,\" %s\",g_argv[i]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1943: {",
          "1944:   int i;",
          "1945:   int dashdash = 0;",
          "1949:         if( n==0 ) return i;",
          "1950:         n--;",
          "1951:       }",
          "1953:     }",
          "1954:   }",
          "1955:   return -1;",
          "",
          "[Removed Lines]",
          "1946:   if( argv!=0 && *argv!=0 ){",
          "1947:     for(i=1; argv[i]; i++){",
          "1948:       if( dashdash || !ISOPT(argv[i]) ){",
          "1952:       if( strcmp(argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "[Added Lines]",
          "1946:   if( g_argv!=0 && *g_argv!=0 ){",
          "1947:     for(i=1; g_argv[i]; i++){",
          "1948:       if( dashdash || !ISOPT(g_argv[i]) ){",
          "1952:       if( strcmp(g_argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1966:   int errcnt = 0;",
          "1967:   int j;",
          "1968:   for(j=0; op[j].label; j++){",
          "1970:   }",
          "1972:   if( op[j].label==0 ){",
          "1973:     if( err ){",
          "1974:       fprintf(err,\"%sundefined option.\\n\",emsg);",
          "",
          "[Removed Lines]",
          "1969:     if( strncmp(&argv[i][1],op[j].label,lemonStrlen(op[j].label))==0 ) break;",
          "1971:   v = argv[i][0]=='-' ? 1 : 0;",
          "",
          "[Added Lines]",
          "1969:     if( strncmp(&g_argv[i][1],op[j].label,lemonStrlen(op[j].label))==0 ) break;",
          "1971:   v = g_argv[i][0]=='-' ? 1 : 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1982:   }else if( op[j].type==OPT_FFLAG ){",
          "1983:     (*(void(*)(int))(op[j].arg))(v);",
          "1984:   }else if( op[j].type==OPT_FSTR ){",
          "1986:   }else{",
          "1987:     if( err ){",
          "1988:       fprintf(err,\"%smissing argument on switch.\\n\",emsg);",
          "",
          "[Removed Lines]",
          "1985:     (*(void(*)(char *))(op[j].arg))(&argv[i][2]);",
          "",
          "[Added Lines]",
          "1985:     (*(void(*)(char *))(op[j].arg))(&g_argv[i][2]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2004:   char *cp;",
          "2005:   int j;",
          "2006:   int errcnt = 0;",
          "2008:   assert( cp!=0 );",
          "2010:   for(j=0; op[j].label; j++){",
          "2012:   }",
          "2014:   if( op[j].label==0 ){",
          "",
          "[Removed Lines]",
          "2007:   cp = strchr(argv[i],'=');",
          "2011:     if( strcmp(argv[i],op[j].label)==0 ) break;",
          "",
          "[Added Lines]",
          "2007:   cp = strchr(g_argv[i],'=');",
          "2011:     if( strcmp(g_argv[i],op[j].label)==0 ) break;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2035:           if( err ){",
          "2036:             fprintf(err,",
          "2037:                \"%sillegal character in floating-point argument.\\n\",emsg);",
          "2039:           }",
          "2040:           errcnt++;",
          "2041:         }",
          "",
          "[Removed Lines]",
          "2038:             errline(i,(int)((char*)end-(char*)argv[i]),err);",
          "",
          "[Added Lines]",
          "2038:             errline(i,(int)((char*)end-(char*)g_argv[i]),err);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2046:         if( *end ){",
          "2047:           if( err ){",
          "2048:             fprintf(err,\"%sillegal character in integer argument.\\n\",emsg);",
          "2050:           }",
          "2051:           errcnt++;",
          "2052:         }",
          "",
          "[Removed Lines]",
          "2049:             errline(i,(int)((char*)end-(char*)argv[i]),err);",
          "",
          "[Added Lines]",
          "2049:             errline(i,(int)((char*)end-(char*)g_argv[i]),err);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2086: int OptInit(char **a, struct s_options *o, FILE *err)",
          "2087: {",
          "2088:   int errcnt = 0;",
          "2090:   op = o;",
          "2091:   errstream = err;",
          "2093:     int i;",
          "2096:         errcnt += handleflags(i,err);",
          "2098:         errcnt += handleswitch(i,err);",
          "2099:       }",
          "2100:     }",
          "",
          "[Removed Lines]",
          "2089:   argv = a;",
          "2092:   if( argv && *argv && op ){",
          "2094:     for(i=1; argv[i]; i++){",
          "2095:       if( argv[i][0]=='+' || argv[i][0]=='-' ){",
          "2097:       }else if( strchr(argv[i],'=') ){",
          "",
          "[Added Lines]",
          "2089:   g_argv = a;",
          "2092:   if( g_argv && *g_argv && op ){",
          "2094:     for(i=1; g_argv[i]; i++){",
          "2095:       if( g_argv[i][0]=='+' || g_argv[i][0]=='-' ){",
          "2097:       }else if( strchr(g_argv[i],'=') ){",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2111:   int cnt = 0;",
          "2112:   int dashdash = 0;",
          "2113:   int i;",
          "2118:     }",
          "2119:   }",
          "2120:   return cnt;",
          "",
          "[Removed Lines]",
          "2114:   if( argv!=0 && argv[0]!=0 ){",
          "2115:     for(i=1; argv[i]; i++){",
          "2116:       if( dashdash || !ISOPT(argv[i]) ) cnt++;",
          "2117:       if( strcmp(argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "[Added Lines]",
          "2114:   if( g_argv!=0 && g_argv[0]!=0 ){",
          "2115:     for(i=1; g_argv[i]; i++){",
          "2116:       if( dashdash || !ISOPT(g_argv[i]) ) cnt++;",
          "2117:       if( strcmp(g_argv[i],\"--\")==0 ) dashdash = 1;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "2124: {",
          "2125:   int i;",
          "2126:   i = argindex(n);",
          "2128: }",
          "2130: void OptErr(int n)",
          "",
          "[Removed Lines]",
          "2127:   return i>=0 ? argv[i] : 0;",
          "",
          "[Added Lines]",
          "2127:   return i>=0 ? g_argv[i] : 0;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "2728:     case WAITING_FOR_CLASS_ID:",
          "2729:       if( !ISLOWER(x[0]) ){",
          "2730:         ErrorMsg(psp->filename, psp->tokenlineno,",
          "2732:         psp->errorcnt++;",
          "2733:         psp->state = RESYNC_AFTER_DECL_ERROR;",
          "2734:      }else if( Symbol_find(x) ){",
          "",
          "[Removed Lines]",
          "2731:           \"%%token_class must be followed by an identifier: \", x);",
          "",
          "[Added Lines]",
          "2731:           \"%%token_class must be followed by an identifier: %s\", x);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e3b89d2c5ffbe633327c22bfd44ccf20197fe5a3",
      "candidate_info": {
        "commit_hash": "e3b89d2c5ffbe633327c22bfd44ccf20197fe5a3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e3b89d2c5ffbe633327c22bfd44ccf20197fe5a3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Handle oversize floating point values carefully when converting to integers for the '%' binary operator.\n\nFossilOrigin-Name: 048add13fc10e69ae504a49c4663612381d928b2cf1f9cdab4ff34bd40f601a3",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 64bec9e6214c6932fab5a3fb8c569ae14cd2d603bd0f8b26104815c3bb9d396a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1583:         break;",
          "1584:       }",
          "1585:       default: {",
          "1588:         if( iA==0 ) goto arithmetic_result_is_null;",
          "1589:         if( iA==-1 ) iA = 1;",
          "1590:         rB = (double)(iB % iA);",
          "",
          "[Removed Lines]",
          "1586:         iA = (i64)rA;",
          "1587:         iB = (i64)rB;",
          "",
          "[Added Lines]",
          "1586:         iA = sqlite3VdbeIntValue(pIn1);",
          "1587:         iB = sqlite3VdbeIntValue(pIn2);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9546c766567d11937cf1bccd98c80bc969fb9ae8",
      "candidate_info": {
        "commit_hash": "9546c766567d11937cf1bccd98c80bc969fb9ae8",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9546c766567d11937cf1bccd98c80bc969fb9ae8",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Fix harmless compiler warnings in the CLI.\n\nFossilOrigin-Name: 2846bc0429c0956473bfe99dde135f2c206720f0be4c2800118b280e446ce325",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: e6d5fee8cdbdce8515957e8288e4d1e7b06f417fd3f9deeeb636fbf5b995af51",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3955:   const unsigned char *pBlob;",
          "3956:   int nBlob;",
          "3957:   int iInt;",
          "3959:   nBlob = sqlite3_value_bytes(argv[0]);",
          "3960:   pBlob = (const unsigned char*)sqlite3_value_blob(argv[0]);",
          "3961:   iInt = sqlite3_value_int(argv[1]);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3959:   UNUSED_PARAMETER(argc);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3989:   sqlite3_value **argv",
          "3990: ){",
          "3991:   const char *zText = (const char*)sqlite3_value_text(argv[0]);",
          "3992:   if( zText[0]=='\\'' ){",
          "3993:     int nText = sqlite3_value_bytes(argv[0]);",
          "3994:     int i;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3993:   UNUSED_PARAMETER(argc);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5417:   }",
          "5418: }",
          "5421:   sqlite3 *db,",
          "5422:   int *pRc,",
          "5423:   sqlite3_stmt **ppStmt,",
          "",
          "[Removed Lines]",
          "5420: static void shellPreparePrintf(",
          "",
          "[Added Lines]",
          "5429: void shellPreparePrintf(",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "5440:   }",
          "5441: }",
          "5444:   int *pRc,",
          "5445:   sqlite3_stmt *pStmt",
          "5446: ){",
          "",
          "[Removed Lines]",
          "5443: static void shellFinalize(",
          "",
          "[Added Lines]",
          "5458: void shellFinalize(",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "5456:   }",
          "5457: }",
          "5460:   int *pRc,",
          "5461:   sqlite3_stmt *pStmt",
          "5462: ){",
          "",
          "[Removed Lines]",
          "5459: static void shellReset(",
          "",
          "[Added Lines]",
          "5480: void shellReset(",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ef2df8f3435edb6ad260ab6ebbf0f151bf0a2a48",
      "candidate_info": {
        "commit_hash": "ef2df8f3435edb6ad260ab6ebbf0f151bf0a2a48",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/ef2df8f3435edb6ad260ab6ebbf0f151bf0a2a48",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "In fts5, fix a case of overreading a buffer by 1 byte when counting characters in malformed utf-8. Fix for [dd1f67bf].\n\nFossilOrigin-Name: 8d964e1c21d4cea699023e02b0616a75c5859dd083c9365cdcbc0676ebbdaae4",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5318:   for(i=0; i<nChar; i++){",
          "5320:     if( (unsigned char)p[n++]>=0xc0 ){",
          "5321:       while( (p[n] & 0xc0)==0x80 ){",
          "5322:         n++;",
          "5323:         if( n>=nByte ) break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5321:       if( n>=nByte ) break;",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5misc.test||ext/fts5/test/fts5misc.test": [
          "File: ext/fts5/test/fts5misc.test -> ext/fts5/test/fts5misc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "218:   SELECT rowid FROM t1 WHERE rowid=2 AND t1 = 'hello';",
          "219: }",
          "222: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221: #-------------------------------------------------------------------------",
          "222: #",
          "223: reset_db",
          "224: do_execsql_test 8.0 {",
          "225:   CREATE VIRTUAL TABLE vt0 USING fts5(c0, tokenize = \"ascii\", prefix = 1);",
          "226:   INSERT INTO vt0(c0) VALUES (x'd1');",
          "227: }",
          "229: breakpoint",
          "230: do_execsql_test 8.1 {",
          "231:   INSERT INTO vt0(vt0) VALUES('integrity-check');",
          "232: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 521f1d36282549488a47a434484a24924ee970d29f05a8ae499b7d536bcd692b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b6ce71bd265314f65ad95ecdb2735af54121a4dd",
      "candidate_info": {
        "commit_hash": "b6ce71bd265314f65ad95ecdb2735af54121a4dd",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b6ce71bd265314f65ad95ecdb2735af54121a4dd",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c",
          "test/affinity2.test"
        ],
        "message": "Retain the affinity of an expression in a WHERE clause when it is transformed to a reference to an index column on the same expression. Fix for [f043b113].\n\nFossilOrigin-Name: 511da0815673ca4a176aa61dc23a8231b2ab77e8363fc184a78b6e17dba64d49",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c",
          "test/affinity2.test||test/affinity2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ec4c63e00c957f98d61ddc1b9d20406c7e1072d6ab0c12ac6939db6c63d90cb8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1117: static int whereIndexExprTransNode(Walker *p, Expr *pExpr){",
          "1118:   IdxExprTrans *pX = p->u.pIdxTrans;",
          "1119:   if( sqlite3ExprCompare(0, pExpr, pX->pIdxExpr, pX->iTabCur)==0 ){",
          "1120:     pExpr->op = TK_COLUMN;",
          "1121:     pExpr->iTable = pX->iIdxCur;",
          "1122:     pExpr->iColumn = pX->iIdxCol;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1120:     pExpr->affExpr = sqlite3ExprAffinity(pExpr);",
          "",
          "---------------"
        ],
        "test/affinity2.test||test/affinity2.test": [
          "File: test/affinity2.test -> test/affinity2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "18: do_execsql_test affinity2-100 {",
          "19:   CREATE TABLE t1(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: set testprefix affinity2",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "58:   SELECT rowid, xt==+xi, xt==xi, xt==xb FROM t1 ORDER BY rowid;",
          "59: } {1 1 1 0 2 1 1 1 3 0 1 1}",
          "61: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "62: #-------------------------------------------------------------------------",
          "63: do_execsql_test 400 {",
          "64:   CREATE TABLE ttt(c0, c1);",
          "65:   CREATE INDEX ii ON ttt(CAST(c0 AS NUMERIC));",
          "66:   INSERT INTO ttt VALUES('abc', '-1');",
          "67: }",
          "68: do_execsql_test 410 {",
          "69:   SELECT * FROM ttt WHERE CAST(c0 AS NUMERIC) > c1 GROUP BY rowid;",
          "70: } {abc -1}",
          "71: do_execsql_test 420 {",
          "72:   SELECT * FROM ttt INDEXED BY ii WHERE CAST(c0 AS NUMERIC) > c1 GROUP BY rowid;",
          "73: } {abc -1}",
          "75: do_execsql_test 430 {",
          "76:   CREATE TABLE t3(a, b, c INTEGER);",
          "77:   CREATE INDEX t3ac ON t3(a, c-1);",
          "78:   INSERT INTO t3 VALUES(1, 1, 1);",
          "79:   INSERT INTO t3 VALUES(2, 1, 0);",
          "80:   INSERT INTO t3 VALUES(3, 1, 1);",
          "81:   INSERT INTO t3 VALUES(4, 1, 0);",
          "82:   INSERT INTO t3 VALUES(5, 1, 1);",
          "83: }",
          "84: do_execsql_test 440 {",
          "85:   SELECT * FROM t3 WHERE c='0' ORDER BY a;",
          "86: } {2 1 0 4 1 0}",
          "",
          "---------------"
        ]
      }
    }
  ]
}