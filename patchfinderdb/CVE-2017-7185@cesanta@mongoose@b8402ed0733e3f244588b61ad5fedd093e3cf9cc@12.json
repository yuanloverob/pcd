{
  "cve_id": "CVE-2017-7185",
  "cve_desc": "Use-after-free vulnerability in the mg_http_multipart_wait_for_boundary function in mongoose.c in Cesanta Mongoose Embedded Web Server Library 6.7 and earlier and Mongoose OS 1.2 and earlier allows remote attackers to cause a denial of service (crash) via a multipart/form-data POST request without a MIME boundary string.",
  "repo": "cesanta/mongoose",
  "patch_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
  "patch_info": {
    "commit_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "repo": "cesanta/mongoose",
    "commit_url": "https://github.com/cesanta/mongoose/commit/b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "files": [
      "mongoose.c"
    ],
    "message": "Fix crash in multipart handling\n\nClose cesanta/dev#6974\n\nPUBLISHED_FROM=4d4e4a46eceba10aec8dacb7f8f58bd078c92307",
    "before_after_code_files": [
      "mongoose.c||mongoose.c"
    ]
  },
  "patch_diff": {
    "mongoose.c||mongoose.c": [
      "File: mongoose.c -> mongoose.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5961:   struct mbuf *io = &c->recv_mbuf;",
      "5962:   struct mg_http_proto_data *pd = mg_http_get_proto_data(c);",
      "5964:   if ((int) io->len < pd->mp_stream.boundary_len + 2) {",
      "5965:     return 0;",
      "5966:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5964:   if (pd->mp_stream.boundary == NULL) {",
      "5965:     pd->mp_stream.state = MPS_FINALIZE;",
      "5966:     DBG((\"Invalid request: boundary not initilaized\"));",
      "5967:     return 0;",
      "5968:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cfd28a4f7a7e5017feadddf9c66afeeaf7698322",
      "candidate_info": {
        "commit_hash": "cfd28a4f7a7e5017feadddf9c66afeeaf7698322",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/cfd28a4f7a7e5017feadddf9c66afeeaf7698322",
        "files": [
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Add mg_strchr\n\nWrite unit tests for some mg_str functions.\n\nPUBLISHED_FROM=1fc7e1d5d5ef259d4023f295aec8651caa3e7e86",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1446:   return mg_strdup_common(s, 1 /* NUL-terminate */);",
          "1447: }",
          "1449: int mg_strcmp(const struct mg_str str1, const struct mg_str str2) WEAK;",
          "1450: int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {",
          "1451:   size_t i = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1449: const char *mg_strchr(const struct mg_str s, int c) WEAK;",
          "1450: const char *mg_strchr(const struct mg_str s, int c) {",
          "1451:   size_t i;",
          "1452:   for (i = 0; i < s.len; i++) {",
          "1453:     if (s.p[i] == c) return &s.p[i];",
          "1454:   }",
          "1455:   return NULL;",
          "1456: }",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1802: struct mg_str mg_strdup_nul(const struct mg_str s);",
          "1804: int mg_strcmp(const struct mg_str str1, const struct mg_str str2);",
          "1805: int mg_strncmp(const struct mg_str str1, const struct mg_str str2, size_t n);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1807: const char *mg_strchr(const struct mg_str s, int c);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "49bbfaf130fa71ea886fba45908a4b488c854fb4",
      "candidate_info": {
        "commit_hash": "49bbfaf130fa71ea886fba45908a4b488c854fb4",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/49bbfaf130fa71ea886fba45908a4b488c854fb4",
        "files": [
          "mongoose.c"
        ],
        "message": "Fix mg_lwip_if_get_conn_addr when there's no pcb\n\nConnection may not (yet) have a TCP or UDP PCB associated with it.\nmg_lwip_if_get_conn_addr should not crash in this case.\n\nPUBLISHED_FROM=fd0ed683b18b3f549135c9d79eeadfc7348ab05a",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14562: void mg_lwip_if_get_conn_addr(struct mg_connection *nc, int remote,",
          "14563:                               union socket_address *sa) {",
          "14564:   memset(sa, 0, sizeof(*sa));",
          "14566:   struct mg_lwip_conn_state *cs = (struct mg_lwip_conn_state *) nc->sock;",
          "14567:   if (nc->flags & MG_F_UDP) {",
          "14568:     struct udp_pcb *upcb = cs->pcb.udp;",
          "14569:     if (remote) {",
          "14570:       memcpy(sa, &nc->sa, sizeof(*sa));",
          "14572:       sa->sin.sin_port = htons(upcb->local_port);",
          "14573:       SET_ADDR(sa, &upcb->local_ip);",
          "14574:     }",
          "14575:   } else {",
          "14576:     struct tcp_pcb *tpcb = cs->pcb.tcp;",
          "14577:     if (remote) {",
          "14581:       sa->sin.sin_port = htons(tpcb->local_port);",
          "14582:       SET_ADDR(sa, &tpcb->local_ip);",
          "14583:     }",
          "",
          "[Removed Lines]",
          "14565:   if (nc->sock == INVALID_SOCKET) return;",
          "14571:     } else {",
          "14578:       sa->sin.sin_port = htons(tpcb->remote_port);",
          "14579:       SET_ADDR(sa, &tpcb->remote_ip);",
          "14580:     } else {",
          "",
          "[Added Lines]",
          "14565:   if (nc == NULL || nc->sock == INVALID_SOCKET) return;",
          "14571:     } else if (upcb != NULL) {",
          "14578:       memcpy(sa, &nc->sa, sizeof(*sa));",
          "14579:     } else if (tpcb != NULL) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ce34af9f375ed082120b489394ac32c63832c5c",
      "candidate_info": {
        "commit_hash": "8ce34af9f375ed082120b489394ac32c63832c5c",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/8ce34af9f375ed082120b489394ac32c63832c5c",
        "files": [
          "mongoose.c"
        ],
        "message": "Clean send_mbuf in mg_if_sent_cb, fix hexdump\n\nPUBLISHED_FROM=3d222e548a3323b957376666e6702b408843b5a3",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2043: #if !defined(NO_LIBC) && MG_ENABLE_HEXDUMP",
          "2046:       ev != MG_EV_SEND /* handled separately */) {",
          "2053:   }",
          "2055: #endif",
          "",
          "[Removed Lines]",
          "2045:   if (nc->mgr->hexdump_file != NULL && ev != MG_EV_POLL &&",
          "2047:     if (ev == MG_EV_RECV) {",
          "2048:       mg_hexdump_connection(nc, nc->mgr->hexdump_file, nc->recv_mbuf.buf,",
          "2050:     } else {",
          "2051:       mg_hexdump_connection(nc, nc->mgr->hexdump_file, NULL, 0, ev);",
          "2052:     }",
          "",
          "[Added Lines]",
          "2045:   if (nc->mgr->hexdump_file != NULL && ev != MG_EV_POLL && ev != MG_EV_RECV &&",
          "2047:     mg_hexdump_connection(nc, nc->mgr->hexdump_file, NULL, 0, ev);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2480:   } else {",
          "2481:     nc->iface->vtable->tcp_send(nc, buf, len);",
          "2482:   }",
          "2483: #if !defined(NO_LIBC) && MG_ENABLE_HEXDUMP",
          "2484:   if (nc->mgr && nc->mgr->hexdump_file != NULL) {",
          "2486:   }",
          "2487: #endif",
          "2491:   if (num_sent < 0) {",
          "2492:     nc->flags |= MG_F_CLOSE_IMMEDIATELY;",
          "2493:   }",
          "2494:   mg_call(nc, NULL, nc->user_data, MG_EV_SEND, &num_sent);",
          "2495: }",
          "",
          "[Removed Lines]",
          "2485:     mg_hexdump_connection(nc, nc->mgr->hexdump_file, buf, len, MG_EV_SEND);",
          "2488: }",
          "2490: void mg_if_sent_cb(struct mg_connection *nc, int num_sent) {",
          "",
          "[Added Lines]",
          "2478: }",
          "2480: void mg_if_sent_cb(struct mg_connection *nc, int num_sent) {",
          "2483:     char *buf = nc->send_mbuf.buf;",
          "2484:     mg_hexdump_connection(nc, nc->mgr->hexdump_file, buf, num_sent, MG_EV_SEND);",
          "2489:   } else {",
          "2490:     mbuf_remove(&nc->send_mbuf, num_sent);",
          "2491:     mbuf_trim(&nc->send_mbuf);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2497: MG_INTERNAL void mg_recv_common(struct mg_connection *nc, void *buf, int len,",
          "2498:                                 int own) {",
          "2499:   DBG((\"%p %d %u\", nc, len, (unsigned int) nc->recv_mbuf.len));",
          "2500:   if (nc->flags & MG_F_CLOSE_IMMEDIATELY) {",
          "2501:     DBG((\"%p discarded %d bytes\", nc, len));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2500: #if !defined(NO_LIBC) && MG_ENABLE_HEXDUMP",
          "2501:   if (nc->mgr && nc->mgr->hexdump_file != NULL) {",
          "2502:     mg_hexdump_connection(nc, nc->mgr->hexdump_file, buf, len, MG_EV_RECV);",
          "2503:   }",
          "2504: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3134: #endif",
          "3135: }",
          "3138:   int err = mg_get_errno();",
          "3140: #ifndef WINCE",
          "3142: #endif",
          "3143: #ifdef _WIN32",
          "3146: #endif",
          "3148: }",
          "3150: void mg_socket_if_connect_tcp(struct mg_connection *nc,",
          "",
          "[Removed Lines]",
          "3137: static int mg_is_error(int n) {",
          "3139:   return (n < 0 && err != EINPROGRESS && err != EWOULDBLOCK",
          "3141:           && err != EAGAIN && err != EINTR",
          "3144:           && WSAGetLastError() != WSAEINTR &&",
          "3145:           WSAGetLastError() != WSAEWOULDBLOCK",
          "3147:           );",
          "",
          "[Added Lines]",
          "3143: static int mg_is_error(void) {",
          "3145:   return err != EINPROGRESS && err != EWOULDBLOCK",
          "3147:          && err != EAGAIN && err != EINTR",
          "3150:          && WSAGetLastError() != WSAEINTR && WSAGetLastError() != WSAEWOULDBLOCK",
          "3152:       ;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3159:   mg_set_non_blocking_mode(nc->sock);",
          "3160: #endif",
          "3161:   rc = connect(nc->sock, &sa->sa, sizeof(sa->sin));",
          "3163:   DBG((\"%p sock %d rc %d errno %d err %d\", nc, nc->sock, rc, mg_get_errno(),",
          "3164:        nc->err));",
          "3165: }",
          "",
          "[Removed Lines]",
          "3162:   nc->err = mg_is_error(rc) ? mg_get_errno() : 0;",
          "",
          "[Added Lines]",
          "3167:   nc->err = rc < 0 && mg_is_error() ? mg_get_errno() : 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3236:   sock_t sock = accept(lc->sock, &sa.sa, &sa_len);",
          "3237:   if (sock == INVALID_SOCKET) {",
          "3239:     return 0;",
          "3240:   }",
          "3241:   nc = mg_if_accept_new_conn(lc);",
          "",
          "[Removed Lines]",
          "3238:     if (mg_is_error(-1)) DBG((\"%p: failed to accept: %d\", lc, mg_get_errno()));",
          "",
          "[Added Lines]",
          "3243:     if (mg_is_error()) DBG((\"%p: failed to accept: %d\", lc, mg_get_errno()));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3320:         sendto(nc->sock, io->buf, io->len, 0, &nc->sa.sa, sizeof(nc->sa.sin));",
          "3321:     DBG((\"%p %d %d %d %s:%hu\", nc, nc->sock, n, mg_get_errno(),",
          "3322:          inet_ntoa(nc->sa.sin.sin_addr), ntohs(nc->sa.sin.sin_port)));",
          "3327:     return;",
          "3328:   }",
          "",
          "[Removed Lines]",
          "3323:     if (n > 0) {",
          "3324:       mbuf_remove(io, n);",
          "3325:       mg_if_sent_cb(nc, n);",
          "3326:     }",
          "",
          "[Added Lines]",
          "3328:     mg_if_sent_cb(nc, n);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3350:   {",
          "3351:     n = (int) MG_SEND_FUNC(nc->sock, io->buf, io->len, 0);",
          "3352:     DBG((\"%p %d bytes -> %d\", nc, n, nc->sock));",
          "3358:   }",
          "3364: }",
          "3366: MG_INTERNAL size_t recv_avail_size(struct mg_connection *conn, size_t max) {",
          "",
          "[Removed Lines]",
          "3353:     if (n < 0 && mg_is_error(n)) {",
          "3355:       nc->flags |= MG_F_CLOSE_IMMEDIATELY;",
          "3356:       return;",
          "3357:     }",
          "3360:   if (n > 0) {",
          "3361:     mbuf_remove(io, n);",
          "3362:     mg_if_sent_cb(nc, n);",
          "3363:   }",
          "",
          "[Added Lines]",
          "3357:   mg_if_sent_cb(nc, n);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3415:     if (n == 0) {",
          "3417:       conn->flags |= MG_F_SEND_AND_CLOSE;",
          "3419:       conn->flags |= MG_F_CLOSE_IMMEDIATELY;",
          "3420:     }",
          "3421:   }",
          "",
          "[Removed Lines]",
          "3418:     } else if (mg_is_error(n)) {",
          "",
          "[Added Lines]",
          "3412:     } else if (n < 0 && mg_is_error()) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "9549:   FILE *fp = NULL;",
          "9550:   char *hexbuf, src[60], dst[60];",
          "9551:   int buf_size = num_bytes * 5 + 100;",
          "9553:   if (strcmp(path, \"-\") == 0) {",
          "9554:     fp = stdout;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9546:   const char *tag = NULL;",
          "9547:   switch (ev) {",
          "9548:     case MG_EV_RECV:",
          "9549:       tag = \"<-\";",
          "9550:       break;",
          "9551:     case MG_EV_SEND:",
          "9552:       tag = \"->\";",
          "9553:       break;",
          "9554:     case MG_EV_ACCEPT:",
          "9555:       tag = \"<A\";",
          "9556:       break;",
          "9557:     case MG_EV_CONNECT:",
          "9558:       tag = \"C>\";",
          "9559:       break;",
          "9560:     case MG_EV_CLOSE:",
          "9561:       tag = \"XX\";",
          "9562:       break;",
          "9563:   }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "9566:   mg_conn_addr_to_str(nc, dst, sizeof(dst), MG_SOCK_STRINGIFY_IP |",
          "9567:                                                 MG_SOCK_STRINGIFY_PORT |",
          "9568:                                                 MG_SOCK_STRINGIFY_REMOTE);",
          "9577:   if (num_bytes > 0 && (hexbuf = (char *) MG_MALLOC(buf_size)) != NULL) {",
          "9578:     mg_hexdump(buf, num_bytes, hexbuf, buf_size);",
          "9579:     fprintf(fp, \"%s\", hexbuf);",
          "",
          "[Removed Lines]",
          "9569:   fprintf(",
          "9570:       fp, \"%lu %p %s %s %s %d\\n\", (unsigned long) mg_time(), (void *) nc, src,",
          "9571:       ev == MG_EV_RECV ? \"<-\" : ev == MG_EV_SEND",
          "9572:                                     ? \"->\"",
          "9573:                                     : ev == MG_EV_ACCEPT",
          "9574:                                           ? \"<A\"",
          "9575:                                           : ev == MG_EV_CONNECT ? \"C>\" : \"XX\",",
          "9576:       dst, num_bytes);",
          "",
          "[Added Lines]",
          "9582:   fprintf(fp, \"%lu %p %s %s %s %d\\n\", (unsigned long) mg_time(), (void *) nc,",
          "9583:           src, tag, dst, num_bytes);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "11991: }",
          "11993: void mg_sntp_send_request(struct mg_connection *c) {",
          "",
          "[Removed Lines]",
          "11994:   char buf[48] = {0};",
          "",
          "[Added Lines]",
          "12001:   uint8_t buf[48] = {0};",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "13373:   }",
          "13375:   if (n > 0) {",
          "13377:     mg_if_sent_cb(nc, n);",
          "13378:   } else if (n < 0 && mg_is_error(n)) {",
          "",
          "[Removed Lines]",
          "13376:     mbuf_remove(io, n);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "14399:   if (num_written < 0) {",
          "14400:     mg_lwip_post_signal(MG_SIG_CLOSE_CONN, nc);",
          "14401:   }",
          "14404: }",
          "14406: void mg_lwip_if_tcp_send(struct mg_connection *nc, const void *buf,",
          "",
          "[Removed Lines]",
          "14402:   mbuf_remove(&nc->send_mbuf, num_written);",
          "14403:   mbuf_trim(&nc->send_mbuf);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "14639:         break;",
          "14640:       }",
          "14641:       case MG_SIG_SENT_CB: {",
          "14643:         cs->num_sent = 0;",
          "14645:         if (nc->send_mbuf.len == 0 && (nc->flags & MG_F_SEND_AND_CLOSE) &&",
          "",
          "[Removed Lines]",
          "14642:         if (cs->num_sent > 0) mg_if_sent_cb(nc, cs->num_sent);",
          "",
          "[Added Lines]",
          "14646:         mg_if_sent_cb(nc, cs->num_sent);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "15268:     }",
          "15269:   }",
          "15275: }",
          "15277: static void mg_handle_recv(struct mg_connection *nc) {",
          "",
          "[Removed Lines]",
          "15271:   if (bytes_written != 0) {",
          "15272:     mbuf_remove(&nc->send_mbuf, bytes_written);",
          "15273:     mg_if_sent_cb(nc, bytes_written);",
          "15274:   }",
          "",
          "[Added Lines]",
          "15275:   mg_if_sent_cb(nc, bytes_written);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3d6b568c6e7ddb05a76c336069d6e7ed75cc178b",
      "candidate_info": {
        "commit_hash": "3d6b568c6e7ddb05a76c336069d6e7ed75cc178b",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/3d6b568c6e7ddb05a76c336069d6e7ed75cc178b",
        "files": [
          "mongoose.c"
        ],
        "message": "Prefer ECDHE with CBC over DHE ciphersuites\n\nPUBLISHED_FROM=4ddfc25af77247fac7e7d04cc0e56d6f3800f87b",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4899: static const int mg_s_cipher_list[] = {",
          "4900:     MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,",
          "4901:     MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,",
          "4902:     MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,",
          "4903:     MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,",
          "4904:     MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4901:     MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,",
          "4903:     MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "02707364f00d95f507f2bf9683372700f0d71e9e",
      "candidate_info": {
        "commit_hash": "02707364f00d95f507f2bf9683372700f0d71e9e",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/02707364f00d95f507f2bf9683372700f0d71e9e",
        "files": [
          "mongoose.c"
        ],
        "message": "Lower conn accept message verbosity to DEBUG\n\nRaised in previous commit by mistake\n\nPUBLISHED_FROM=31a73fb610c34ed0c85d081bfa11a8067f216696",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "14484:   struct mg_connection *lc = (struct mg_connection *) arg, *nc;",
          "14485:   struct mg_lwip_conn_state *lcs, *cs;",
          "14486:   struct tcp_pcb_listen *lpcb;",
          "14488:       (\"%p conn %p from %s:%u\", lc, newtpcb,",
          "14489:        IPADDR_NTOA(ipX_2_ip(&newtpcb->remote_ip)), newtpcb->remote_port));",
          "14490:   if (lc == NULL) {",
          "",
          "[Removed Lines]",
          "14487:   LOG(LL_INFO,",
          "",
          "[Added Lines]",
          "14487:   LOG(LL_DEBUG,",
          "",
          "---------------"
        ]
      }
    }
  ]
}