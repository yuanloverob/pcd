{
  "cve_id": "CVE-2016-2152",
  "cve_desc": "Multiple cross-site scripting (XSS) vulnerabilities in auth/db/auth.php in Moodle through 2.6.11, 2.7.x before 2.7.13, 2.8.x before 2.8.11, 2.9.x before 2.9.5, and 3.0.x before 3.0.3 allow remote attackers to inject arbitrary web script or HTML via an external DB profile field.",
  "repo": "moodle/moodle",
  "patch_hash": "ce597604763272396e5cb8ec93859a8568020b8b",
  "patch_info": {
    "commit_hash": "ce597604763272396e5cb8ec93859a8568020b8b",
    "repo": "moodle/moodle",
    "commit_url": "https://github.com/moodle/moodle/commit/ce597604763272396e5cb8ec93859a8568020b8b",
    "files": [
      "auth/db/auth.php",
      "auth/db/tests/db_test.php"
    ],
    "message": "MDL-50705 auth_db: apply standard cleaning to all fields\n\n    Also unit tests were added to cover the new clean_data() method.",
    "before_after_code_files": [
      "auth/db/auth.php||auth/db/auth.php",
      "auth/db/tests/db_test.php||auth/db/tests/db_test.php"
    ]
  },
  "patch_diff": {
    "auth/db/auth.php||auth/db/auth.php": [
      "File: auth/db/auth.php -> auth/db/auth.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:                         $updateuser = new stdClass();",
      "329:                         $updateuser->id   = $user->id;",
      "330:                         $updateuser->suspended = 1;",
      "331:                         user_update_user($updateuser, false);",
      "332:                         $trace->output(get_string('auth_dbsuspenduser', 'auth_db', array('name'=>$user->username, 'id'=>$user->id)), 1);",
      "333:                     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331:                         $updateuser = $this->clean_data($updateuser);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "414:                         $updateuser = new stdClass();",
      "415:                         $updateuser->id = $olduser->id;",
      "416:                         $updateuser->suspended = 0;",
      "417:                         user_update_user($updateuser);",
      "418:                         $trace->output(get_string('auth_dbreviveduser', 'auth_db', array('name' => $username,",
      "419:                             'id' => $olduser->id)), 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "418:                         $updateuser = $this->clean_data($updateuser);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "436:                     $trace->output(get_string('auth_dbinsertuserduplicate', 'auth_db', array('username'=>$user->username, 'auth'=>$collision->auth)), 1);",
      "437:                     continue;",
      "438:                 }",
      "439:                 try {",
      "440:                     $id = user_create_user($user, false); // It is truly a new user.",
      "441:                     $trace->output(get_string('auth_dbinsertuser', 'auth_db', array('name'=>$user->username, 'id'=>$id)), 1);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "441:                 $user = $this->clean_data($user);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "577:         }",
      "578:         if ($needsupdate) {",
      "579:             require_once($CFG->dirroot . '/user/lib.php');",
      "580:             user_update_user($updateuser);",
      "581:         }",
      "582:         return $DB->get_record('user', array('id'=>$userid, 'deleted'=>0));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "583:             $updateuser = $this->clean_data($updateuser);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "906:         error_reporting($CFG->debug);",
      "907:         ob_end_flush();",
      "908:     }",
      "909: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "920:     public function clean_data($user) {",
      "921:         if (empty($user)) {",
      "922:             return $user;",
      "923:         }",
      "925:         foreach ($user as $field => $value) {",
      "927:             try {",
      "928:                 $property = core_user::get_property_definition($field);",
      "929:                 $user->$field = clean_param($value, $property['type']);",
      "930:             } catch (coding_exception $e) {",
      "931:                 debugging(\"The property '$field' could not be cleaned.\", DEBUG_DEVELOPER);",
      "932:             }",
      "933:         }",
      "935:         return $user;",
      "936:     }",
      "",
      "---------------"
    ],
    "auth/db/tests/db_test.php||auth/db/tests/db_test.php": [
      "File: auth/db/tests/db_test.php -> auth/db/tests/db_test.php",
      "--- Hunk 1 ---",
      "[Context before]",
      "399:         $this->assertEquals(\"select * from table WHERE column=? AND anothercolumn > ?\", $sqlout);",
      "400:         $this->assertEquals(array(1, 'b'), $arrout);",
      "401:     }",
      "402: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "406:     public function test_clean_data() {",
      "407:         global $DB;",
      "409:         $this->resetAfterTest(false);",
      "410:         $this->preventResetByRollback();",
      "411:         $this->init_auth_database();",
      "412:         $auth = get_auth_plugin('db');",
      "413:         $auth->db_init();",
      "416:         $extdbuser1 = (object)array('name'=>'u1', 'pass'=>'heslo', 'email'=>'u1@example.com');",
      "417:         $extdbuser1->id = $DB->insert_record('auth_db_users', $extdbuser1);",
      "420:         $extdbuser2 = (object)array('name'=>'user<script>alert(1);</script>xss', 'pass'=>'heslo', 'email'=>'xssuser@example.com');",
      "421:         $extdbuser2->id = $DB->insert_record('auth_db_users', $extdbuser2);",
      "423:         $trace = new null_progress_trace();",
      "426:         $auth->sync_users($trace, true);",
      "429:         $user2 = $DB->get_record('user', array('email'=> $extdbuser2->email, 'auth'=>'db'));",
      "432:         $this->assertEquals($user2->username, 'userscriptalert1scriptxss');",
      "433:         $this->assertNotEquals($user2->username, $extdbuser2->name);",
      "436:         $user1 = $DB->get_record('user', array('email'=> $extdbuser1->email, 'auth'=>'db'));",
      "437:         $this->assertEquals($extdbuser1->name, $user1->username);",
      "438:         $this->assertEquals($extdbuser1->email, $user1->email);",
      "441:         $extdbuser2->name = 'user no xss anymore';",
      "442:         $DB->update_record('auth_db_users', $extdbuser2);",
      "445:         $auth->sync_users($trace, true);",
      "448:         $user2 = $DB->get_record('user', array('username' => 'usernoxssanymore', 'auth' => 'db'));",
      "450:         $this->assertEquals($user2->username, 'usernoxssanymore');",
      "454:         $user3 = new stdClass();",
      "455:         $user3->firstname = 'John <script>alert(1)</script> Doe';",
      "456:         $user3->username = 'john%#&~%*_doe';",
      "457:         $user3->email = ' john@testing.com ';",
      "458:         $user3->deleted = 'no';",
      "459:         $user3->description = '<b>A description <script>alert(123)</script>about myself.</b>';",
      "460:         $user3cleaned = $auth->clean_data($user3);",
      "463:         $this->assertEquals($user3cleaned->firstname, 'John alert(1) Doe');",
      "464:         $this->assertEquals($user3cleaned->email, 'john@testing.com');",
      "465:         $this->assertEquals($user3cleaned->deleted, 0);",
      "466:         $this->assertEquals($user3->description, '<b>A description about myself.</b>');",
      "467:         $this->assertEquals($user3->username, 'john_doe');",
      "470:         $user3->fullname = 'John Doe';",
      "471:         $auth->clean_data($user3);",
      "472:         $this->assertDebuggingCalled(\"The property 'fullname' could not be cleaned.\");",
      "473:         $this->cleanup_auth_database();",
      "474:     }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5e60be8aafa664bda543318943d0a025595c73a8",
      "candidate_info": {
        "commit_hash": "5e60be8aafa664bda543318943d0a025595c73a8",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/5e60be8aafa664bda543318943d0a025595c73a8",
        "files": [
          "auth/db/auth.php",
          "auth/db/tests/db_test.php"
        ],
        "message": "MDL-52781 auth_db: deprecate clean_data method.\n\n    The old clean_data method has been deprecated as the user_create_user and user_updated user\n    will be responsible by validating the user data.",
        "before_after_code_files": [
          "auth/db/auth.php||auth/db/auth.php",
          "auth/db/tests/db_test.php||auth/db/tests/db_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "auth/db/auth.php||auth/db/auth.php",
            "auth/db/tests/db_test.php||auth/db/tests/db_test.php"
          ],
          "candidate": [
            "auth/db/auth.php||auth/db/auth.php",
            "auth/db/tests/db_test.php||auth/db/tests/db_test.php"
          ]
        }
      },
      "candidate_diff": {
        "auth/db/auth.php||auth/db/auth.php": [
          "File: auth/db/auth.php -> auth/db/auth.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:                         $updateuser = new stdClass();",
          "329:                         $updateuser->id   = $user->id;",
          "330:                         $updateuser->suspended = 1;",
          "332:                         user_update_user($updateuser, false);",
          "333:                         $trace->output(get_string('auth_dbsuspenduser', 'auth_db', array('name'=>$user->username, 'id'=>$user->id)), 1);",
          "334:                     }",
          "",
          "[Removed Lines]",
          "331:                         $updateuser = $this->clean_data($updateuser);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "415:                         $updateuser = new stdClass();",
          "416:                         $updateuser->id = $olduser->id;",
          "417:                         $updateuser->suspended = 0;",
          "419:                         user_update_user($updateuser);",
          "420:                         $trace->output(get_string('auth_dbreviveduser', 'auth_db', array('name' => $username,",
          "421:                             'id' => $olduser->id)), 1);",
          "",
          "[Removed Lines]",
          "418:                         $updateuser = $this->clean_data($updateuser);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "438:                     $trace->output(get_string('auth_dbinsertuserduplicate', 'auth_db', array('username'=>$user->username, 'auth'=>$collision->auth)), 1);",
          "439:                     continue;",
          "440:                 }",
          "442:                 try {",
          "443:                     $id = user_create_user($user, false); // It is truly a new user.",
          "444:                     $trace->output(get_string('auth_dbinsertuser', 'auth_db', array('name'=>$user->username, 'id'=>$id)), 1);",
          "",
          "[Removed Lines]",
          "441:                 $user = $this->clean_data($user);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "580:         }",
          "581:         if ($needsupdate) {",
          "582:             require_once($CFG->dirroot . '/user/lib.php');",
          "584:             user_update_user($updateuser);",
          "585:         }",
          "586:         return $DB->get_record('user', array('id'=>$userid, 'deleted'=>0));",
          "",
          "[Removed Lines]",
          "583:             $updateuser = $this->clean_data($updateuser);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "920:     public function clean_data($user) {",
          "936:     }",
          "937: }",
          "",
          "[Removed Lines]",
          "921:         if (empty($user)) {",
          "922:             return $user;",
          "923:         }",
          "925:         foreach ($user as $field => $value) {",
          "927:             try {",
          "928:                 $property = core_user::get_property_definition($field);",
          "929:                 $user->$field = clean_param($value, $property['type']);",
          "930:             } catch (coding_exception $e) {",
          "931:                 debugging(\"The property '$field' could not be cleaned.\", DEBUG_DEVELOPER);",
          "932:             }",
          "933:         }",
          "935:         return $user;",
          "",
          "[Added Lines]",
          "917:         debugging('The method clean_data() has been deprecated, please use core_user::clean_data() instead.',",
          "918:             DEBUG_DEVELOPER);",
          "919:         return core_user::clean_data($user);",
          "",
          "---------------"
        ],
        "auth/db/tests/db_test.php||auth/db/tests/db_test.php": [
          "File: auth/db/tests/db_test.php -> auth/db/tests/db_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "121:         set_config('table', $CFG->prefix.'auth_db_users', 'auth/db');",
          "122:         set_config('fielduser', 'name', 'auth/db');",
          "123:         set_config('fieldpass', 'pass', 'auth/db');",
          "127:         set_config('field_map_email', 'email', 'auth/db');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "124:         set_config('field_map_lastname', 'lastname', 'auth/db');",
          "125:         set_config('field_updatelocal_lastname', 'oncreate', 'auth/db');",
          "126:         set_config('field_lock_lastname', 'unlocked', 'auth/db');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "149:     public function test_plugin() {",
          "150:         global $DB, $CFG;",
          "",
          "[Removed Lines]",
          "152:         $this->resetAfterTest(false);",
          "",
          "[Added Lines]",
          "154:         $this->resetAfterTest(true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "416:         $extdbuser1 = (object)array('name'=>'u1', 'pass'=>'heslo', 'email'=>'u1@example.com');",
          "417:         $extdbuser1->id = $DB->insert_record('auth_db_users', $extdbuser1);",
          "420:         $extdbuser2 = (object)array('name'=>'user<script>alert(1);</script>xss', 'pass'=>'heslo', 'email'=>'xssuser@example.com');",
          "421:         $extdbuser2->id = $DB->insert_record('auth_db_users', $extdbuser2);",
          "423:         $trace = new null_progress_trace();",
          "426:         $auth->sync_users($trace, true);",
          "436:         $user1 = $DB->get_record('user', array('email'=> $extdbuser1->email, 'auth'=>'db'));",
          "437:         $this->assertEquals($extdbuser1->name, $user1->username);",
          "438:         $this->assertEquals($extdbuser1->email, $user1->email);",
          "473:         $this->cleanup_auth_database();",
          "474:     }",
          "475: }",
          "",
          "[Removed Lines]",
          "429:         $user2 = $DB->get_record('user', array('email'=> $extdbuser2->email, 'auth'=>'db'));",
          "432:         $this->assertEquals($user2->username, 'userscriptalert1scriptxss');",
          "433:         $this->assertNotEquals($user2->username, $extdbuser2->name);",
          "441:         $extdbuser2->name = 'user no xss anymore';",
          "442:         $DB->update_record('auth_db_users', $extdbuser2);",
          "445:         $auth->sync_users($trace, true);",
          "448:         $user2 = $DB->get_record('user', array('username' => 'usernoxssanymore', 'auth' => 'db'));",
          "450:         $this->assertEquals($user2->username, 'usernoxssanymore');",
          "454:         $user3 = new stdClass();",
          "455:         $user3->firstname = 'John <script>alert(1)</script> Doe';",
          "456:         $user3->username = 'john%#&~%*_doe';",
          "457:         $user3->email = ' john@testing.com ';",
          "458:         $user3->deleted = 'no';",
          "459:         $user3->description = '<b>A description <script>alert(123)</script>about myself.</b>';",
          "460:         $user3cleaned = $auth->clean_data($user3);",
          "463:         $this->assertEquals($user3cleaned->firstname, 'John alert(1) Doe');",
          "464:         $this->assertEquals($user3cleaned->email, 'john@testing.com');",
          "465:         $this->assertEquals($user3cleaned->deleted, 0);",
          "466:         $this->assertEquals($user3->description, '<b>A description about myself.</b>');",
          "467:         $this->assertEquals($user3->username, 'john_doe');",
          "470:         $user3->fullname = 'John Doe';",
          "471:         $auth->clean_data($user3);",
          "472:         $this->assertDebuggingCalled(\"The property 'fullname' could not be cleaned.\");",
          "",
          "[Added Lines]",
          "425:         $extdbuser3 = (object)array('name'=>'u3', 'pass'=>'heslo', 'email'=>'u3@example.com',",
          "426:                 'lastname' => 'user<script>alert(1);</script>xss');",
          "427:         $extdbuser3->id = $DB->insert_record('auth_db_users', $extdbuser3);",
          "432:         $this->assertDebuggingCalled(\"The property 'lastname' has invalid data and has been cleaned.\");",
          "439:         $user2 = $DB->get_record('user', array('email'=> $extdbuser2->email, 'auth'=>'db'));",
          "440:         $user3 = $DB->get_record('user', array('email'=> $extdbuser3->email, 'auth'=>'db'));",
          "442:         $this->assertEmpty($user2);",
          "443:         $this->assertEquals($extdbuser3->name, $user3->username);",
          "444:         $this->assertEquals('useralert(1);xss', $user3->lastname);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4db8407d3eaba17a8d3f81957b8e93e9f2554055",
      "candidate_info": {
        "commit_hash": "4db8407d3eaba17a8d3f81957b8e93e9f2554055",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/4db8407d3eaba17a8d3f81957b8e93e9f2554055",
        "files": [
          "auth/db/auth.php",
          "auth/db/tests/db_test.php"
        ],
        "message": "MDL-50705 auth_db: apply standard cleaning to all fields\n\n    Also unit tests were added to cover the new clean_data() method.",
        "before_after_code_files": [
          "auth/db/auth.php||auth/db/auth.php",
          "auth/db/tests/db_test.php||auth/db/tests/db_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "auth/db/auth.php||auth/db/auth.php",
            "auth/db/tests/db_test.php||auth/db/tests/db_test.php"
          ],
          "candidate": [
            "auth/db/auth.php||auth/db/auth.php",
            "auth/db/tests/db_test.php||auth/db/tests/db_test.php"
          ]
        }
      },
      "candidate_diff": {
        "auth/db/auth.php||auth/db/auth.php": [
          "File: auth/db/auth.php -> auth/db/auth.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:                         $updateuser = new stdClass();",
          "329:                         $updateuser->id   = $user->id;",
          "330:                         $updateuser->suspended = 1;",
          "331:                         user_update_user($updateuser, false);",
          "332:                         $trace->output(get_string('auth_dbsuspenduser', 'auth_db', array('name'=>$user->username, 'id'=>$user->id)), 1);",
          "333:                     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:                         $updateuser = $this->clean_data($updateuser);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "414:                         $updateuser = new stdClass();",
          "415:                         $updateuser->id = $olduser->id;",
          "416:                         $updateuser->suspended = 0;",
          "417:                         user_update_user($updateuser);",
          "418:                         $trace->output(get_string('auth_dbreviveduser', 'auth_db', array('name' => $username,",
          "419:                             'id' => $olduser->id)), 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:                         $updateuser = $this->clean_data($updateuser);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "436:                     $trace->output(get_string('auth_dbinsertuserduplicate', 'auth_db', array('username'=>$user->username, 'auth'=>$collision->auth)), 1);",
          "437:                     continue;",
          "438:                 }",
          "439:                 try {",
          "440:                     $id = user_create_user($user, false); // It is truly a new user.",
          "441:                     $trace->output(get_string('auth_dbinsertuser', 'auth_db', array('name'=>$user->username, 'id'=>$id)), 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:                 $user = $this->clean_data($user);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "577:         }",
          "578:         if ($needsupdate) {",
          "579:             require_once($CFG->dirroot . '/user/lib.php');",
          "580:             user_update_user($updateuser);",
          "581:         }",
          "582:         return $DB->get_record('user', array('id'=>$userid, 'deleted'=>0));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "583:             $updateuser = $this->clean_data($updateuser);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "906:         error_reporting($CFG->debug);",
          "907:         ob_end_flush();",
          "908:     }",
          "909: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "920:     public function clean_data($user) {",
          "921:         if (empty($user)) {",
          "922:             return $user;",
          "923:         }",
          "925:         foreach ($user as $field => $value) {",
          "927:             try {",
          "928:                 $property = core_user::get_property_definition($field);",
          "929:                 $user->$field = clean_param($value, $property['type']);",
          "930:             } catch (coding_exception $e) {",
          "931:                 debugging(\"The property '$field' could not be cleaned.\", DEBUG_DEVELOPER);",
          "932:             }",
          "933:         }",
          "935:         return $user;",
          "936:     }",
          "",
          "---------------"
        ],
        "auth/db/tests/db_test.php||auth/db/tests/db_test.php": [
          "File: auth/db/tests/db_test.php -> auth/db/tests/db_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "399:         $this->assertEquals(\"select * from table WHERE column=? AND anothercolumn > ?\", $sqlout);",
          "400:         $this->assertEquals(array(1, 'b'), $arrout);",
          "401:     }",
          "402: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "406:     public function test_clean_data() {",
          "407:         global $DB;",
          "409:         $this->resetAfterTest(false);",
          "410:         $this->preventResetByRollback();",
          "411:         $this->init_auth_database();",
          "412:         $auth = get_auth_plugin('db');",
          "413:         $auth->db_init();",
          "416:         $extdbuser1 = (object)array('name'=>'u1', 'pass'=>'heslo', 'email'=>'u1@example.com');",
          "417:         $extdbuser1->id = $DB->insert_record('auth_db_users', $extdbuser1);",
          "420:         $extdbuser2 = (object)array('name'=>'user<script>alert(1);</script>xss', 'pass'=>'heslo', 'email'=>'xssuser@example.com');",
          "421:         $extdbuser2->id = $DB->insert_record('auth_db_users', $extdbuser2);",
          "423:         $trace = new null_progress_trace();",
          "426:         $auth->sync_users($trace, true);",
          "429:         $user2 = $DB->get_record('user', array('email'=> $extdbuser2->email, 'auth'=>'db'));",
          "432:         $this->assertEquals($user2->username, 'userscriptalert1scriptxss');",
          "433:         $this->assertNotEquals($user2->username, $extdbuser2->name);",
          "436:         $user1 = $DB->get_record('user', array('email'=> $extdbuser1->email, 'auth'=>'db'));",
          "437:         $this->assertEquals($extdbuser1->name, $user1->username);",
          "438:         $this->assertEquals($extdbuser1->email, $user1->email);",
          "441:         $extdbuser2->name = 'user no xss anymore';",
          "442:         $DB->update_record('auth_db_users', $extdbuser2);",
          "445:         $auth->sync_users($trace, true);",
          "448:         $user2 = $DB->get_record('user', array('username' => 'usernoxssanymore', 'auth' => 'db'));",
          "450:         $this->assertEquals($user2->username, 'usernoxssanymore');",
          "454:         $user3 = new stdClass();",
          "455:         $user3->firstname = 'John <script>alert(1)</script> Doe';",
          "456:         $user3->username = 'john%#&~%*_doe';",
          "457:         $user3->email = ' john@testing.com ';",
          "458:         $user3->deleted = 'no';",
          "459:         $user3->description = '<b>A description <script>alert(123)</script>about myself.</b>';",
          "460:         $user3cleaned = $auth->clean_data($user3);",
          "463:         $this->assertEquals($user3cleaned->firstname, 'John alert(1) Doe');",
          "464:         $this->assertEquals($user3cleaned->email, 'john@testing.com');",
          "465:         $this->assertEquals($user3cleaned->deleted, 0);",
          "466:         $this->assertEquals($user3->description, '<b>A description about myself.</b>');",
          "467:         $this->assertEquals($user3->username, 'john_doe');",
          "470:         $user3->fullname = 'John Doe';",
          "471:         $auth->clean_data($user3);",
          "472:         $this->assertDebuggingCalled(\"The property 'fullname' could not be cleaned.\");",
          "473:         $this->cleanup_auth_database();",
          "474:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82d0c0b5218e9ceb35a4e24b4a4e1e2e9cfc840c",
      "candidate_info": {
        "commit_hash": "82d0c0b5218e9ceb35a4e24b4a4e1e2e9cfc840c",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/82d0c0b5218e9ceb35a4e24b4a4e1e2e9cfc840c",
        "files": [
          "auth/db/auth.php",
          "auth/db/tests/db_test.php"
        ],
        "message": "MDL-50705 auth_db: apply standard cleaning to all fields\n\n    Also unit tests were added to cover the new clean_data() method.",
        "before_after_code_files": [
          "auth/db/auth.php||auth/db/auth.php",
          "auth/db/tests/db_test.php||auth/db/tests/db_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "auth/db/auth.php||auth/db/auth.php",
            "auth/db/tests/db_test.php||auth/db/tests/db_test.php"
          ],
          "candidate": [
            "auth/db/auth.php||auth/db/auth.php",
            "auth/db/tests/db_test.php||auth/db/tests/db_test.php"
          ]
        }
      },
      "candidate_diff": {
        "auth/db/auth.php||auth/db/auth.php": [
          "File: auth/db/auth.php -> auth/db/auth.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "328:                         $updateuser = new stdClass();",
          "329:                         $updateuser->id   = $user->id;",
          "330:                         $updateuser->suspended = 1;",
          "331:                         user_update_user($updateuser, false);",
          "332:                         $trace->output(get_string('auth_dbsuspenduser', 'auth_db', array('name'=>$user->username, 'id'=>$user->id)), 1);",
          "333:                     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "331:                         $updateuser = $this->clean_data($updateuser);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "414:                         $updateuser = new stdClass();",
          "415:                         $updateuser->id = $olduser->id;",
          "416:                         $updateuser->suspended = 0;",
          "417:                         user_update_user($updateuser);",
          "418:                         $trace->output(get_string('auth_dbreviveduser', 'auth_db', array('name' => $username,",
          "419:                             'id' => $olduser->id)), 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:                         $updateuser = $this->clean_data($updateuser);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "436:                     $trace->output(get_string('auth_dbinsertuserduplicate', 'auth_db', array('username'=>$user->username, 'auth'=>$collision->auth)), 1);",
          "437:                     continue;",
          "438:                 }",
          "439:                 try {",
          "440:                     $id = user_create_user($user, false); // It is truly a new user.",
          "441:                     $trace->output(get_string('auth_dbinsertuser', 'auth_db', array('name'=>$user->username, 'id'=>$id)), 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:                 $user = $this->clean_data($user);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "577:         }",
          "578:         if ($needsupdate) {",
          "579:             require_once($CFG->dirroot . '/user/lib.php');",
          "580:             user_update_user($updateuser);",
          "581:         }",
          "582:         return $DB->get_record('user', array('id'=>$userid, 'deleted'=>0));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "583:             $updateuser = $this->clean_data($updateuser);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "906:         error_reporting($CFG->debug);",
          "907:         ob_end_flush();",
          "908:     }",
          "909: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "920:     public function clean_data($user) {",
          "921:         if (empty($user)) {",
          "922:             return $user;",
          "923:         }",
          "925:         foreach ($user as $field => $value) {",
          "927:             try {",
          "928:                 $property = core_user::get_property_definition($field);",
          "929:                 $user->$field = clean_param($value, $property['type']);",
          "930:             } catch (coding_exception $e) {",
          "931:                 debugging(\"The property '$field' could not be cleaned.\", DEBUG_DEVELOPER);",
          "932:             }",
          "933:         }",
          "935:         return $user;",
          "936:     }",
          "",
          "---------------"
        ],
        "auth/db/tests/db_test.php||auth/db/tests/db_test.php": [
          "File: auth/db/tests/db_test.php -> auth/db/tests/db_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "382:         $this->cleanup_auth_database();",
          "383:     }",
          "384: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "388:     public function test_clean_data() {",
          "389:         global $DB;",
          "391:         $this->resetAfterTest(false);",
          "392:         $this->preventResetByRollback();",
          "393:         $this->init_auth_database();",
          "394:         $auth = get_auth_plugin('db');",
          "395:         $auth->db_init();",
          "398:         $extdbuser1 = (object)array('name'=>'u1', 'pass'=>'heslo', 'email'=>'u1@example.com');",
          "399:         $extdbuser1->id = $DB->insert_record('auth_db_users', $extdbuser1);",
          "402:         $extdbuser2 = (object)array('name'=>'user<script>alert(1);</script>xss', 'pass'=>'heslo', 'email'=>'xssuser@example.com');",
          "403:         $extdbuser2->id = $DB->insert_record('auth_db_users', $extdbuser2);",
          "405:         $trace = new null_progress_trace();",
          "408:         $auth->sync_users($trace, true);",
          "411:         $user2 = $DB->get_record('user', array('email'=> $extdbuser2->email, 'auth'=>'db'));",
          "414:         $this->assertEquals($user2->username, 'userscriptalert1scriptxss');",
          "415:         $this->assertNotEquals($user2->username, $extdbuser2->name);",
          "418:         $user1 = $DB->get_record('user', array('email'=> $extdbuser1->email, 'auth'=>'db'));",
          "419:         $this->assertEquals($extdbuser1->name, $user1->username);",
          "420:         $this->assertEquals($extdbuser1->email, $user1->email);",
          "423:         $extdbuser2->name = 'user no xss anymore';",
          "424:         $DB->update_record('auth_db_users', $extdbuser2);",
          "427:         $auth->sync_users($trace, true);",
          "430:         $user2 = $DB->get_record('user', array('username' => 'usernoxssanymore', 'auth' => 'db'));",
          "432:         $this->assertEquals($user2->username, 'usernoxssanymore');",
          "436:         $user3 = new stdClass();",
          "437:         $user3->firstname = 'John <script>alert(1)</script> Doe';",
          "438:         $user3->username = 'john%#&~%*_doe';",
          "439:         $user3->email = ' john@testing.com ';",
          "440:         $user3->deleted = 'no';",
          "441:         $user3->description = '<b>A description <script>alert(123)</script>about myself.</b>';",
          "442:         $user3cleaned = $auth->clean_data($user3);",
          "445:         $this->assertEquals($user3cleaned->firstname, 'John alert(1) Doe');",
          "446:         $this->assertEquals($user3cleaned->email, 'john@testing.com');",
          "447:         $this->assertEquals($user3cleaned->deleted, 0);",
          "448:         $this->assertEquals($user3->description, '<b>A description about myself.</b>');",
          "449:         $this->assertEquals($user3->username, 'john_doe');",
          "452:         $user3->fullname = 'John Doe';",
          "453:         $auth->clean_data($user3);",
          "454:         $this->assertDebuggingCalled(\"The property 'fullname' could not be cleaned.\");",
          "455:         $this->cleanup_auth_database();",
          "456:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4fcb1c4f76488d4571d3d265efce3813676c45d",
      "candidate_info": {
        "commit_hash": "f4fcb1c4f76488d4571d3d265efce3813676c45d",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/f4fcb1c4f76488d4571d3d265efce3813676c45d",
        "files": [
          "auth/db/auth.php",
          "auth/db/tests/db_test.php"
        ],
        "message": "MDL-50705 auth_db: apply standard cleaning to all fields\n\n    Also unit tests were added to cover the new clean_data() method.",
        "before_after_code_files": [
          "auth/db/auth.php||auth/db/auth.php",
          "auth/db/tests/db_test.php||auth/db/tests/db_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "auth/db/auth.php||auth/db/auth.php",
            "auth/db/tests/db_test.php||auth/db/tests/db_test.php"
          ],
          "candidate": [
            "auth/db/auth.php||auth/db/auth.php",
            "auth/db/tests/db_test.php||auth/db/tests/db_test.php"
          ]
        }
      },
      "candidate_diff": {
        "auth/db/auth.php||auth/db/auth.php": [
          "File: auth/db/auth.php -> auth/db/auth.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "300:                         $updateuser = new stdClass();",
          "301:                         $updateuser->id   = $user->id;",
          "302:                         $updateuser->suspended = 1;",
          "303:                         user_update_user($updateuser, false);",
          "304:                         $trace->output(get_string('auth_dbsuspenduser', 'auth_db', array('name'=>$user->username, 'id'=>$user->id)), 1);",
          "305:                     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "303:                         $updateuser = $this->clean_data($updateuser);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "412:                     $trace->output(get_string('auth_dbinsertuserduplicate', 'auth_db', array('username'=>$user->username, 'auth'=>$collision->auth)), 1);",
          "413:                     continue;",
          "414:                 }",
          "415:                 try {",
          "416:                     $id = $DB->insert_record ('user', $user); // it is truly a new user",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "417:                 $user = $this->clean_data($user);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "870:         error_reporting($CFG->debug);",
          "871:         ob_end_flush();",
          "872:     }",
          "873: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "884:     public function clean_data($user) {",
          "885:         if (empty($user)) {",
          "886:             return $user;",
          "887:         }",
          "889:         foreach ($user as $field => $value) {",
          "891:             try {",
          "892:                 $property = core_user::get_property_definition($field);",
          "893:                 $user->$field = clean_param($value, $property['type']);",
          "894:             } catch (coding_exception $e) {",
          "895:                 debugging(\"The property '$field' could not be cleaned.\", DEBUG_DEVELOPER);",
          "896:             }",
          "897:         }",
          "899:         return $user;",
          "900:     }",
          "",
          "---------------"
        ],
        "auth/db/tests/db_test.php||auth/db/tests/db_test.php": [
          "File: auth/db/tests/db_test.php -> auth/db/tests/db_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "375:         $this->cleanup_auth_database();",
          "376:     }",
          "377: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:     public function test_clean_data() {",
          "382:         global $DB;",
          "384:         $this->resetAfterTest(false);",
          "385:         $this->preventResetByRollback();",
          "386:         $this->init_auth_database();",
          "387:         $auth = get_auth_plugin('db');",
          "388:         $auth->db_init();",
          "391:         $extdbuser1 = (object)array('name'=>'u1', 'pass'=>'heslo', 'email'=>'u1@example.com');",
          "392:         $extdbuser1->id = $DB->insert_record('auth_db_users', $extdbuser1);",
          "395:         $extdbuser2 = (object)array('name'=>'user<script>alert(1);</script>xss', 'pass'=>'heslo', 'email'=>'xssuser@example.com');",
          "396:         $extdbuser2->id = $DB->insert_record('auth_db_users', $extdbuser2);",
          "398:         $trace = new null_progress_trace();",
          "401:         $auth->sync_users($trace, true);",
          "404:         $user2 = $DB->get_record('user', array('email'=> $extdbuser2->email, 'auth'=>'db'));",
          "407:         $this->assertEquals($user2->username, 'userscriptalert1scriptxss');",
          "408:         $this->assertNotEquals($user2->username, $extdbuser2->name);",
          "411:         $user1 = $DB->get_record('user', array('email'=> $extdbuser1->email, 'auth'=>'db'));",
          "412:         $this->assertEquals($extdbuser1->name, $user1->username);",
          "413:         $this->assertEquals($extdbuser1->email, $user1->email);",
          "416:         $extdbuser2->name = 'user no xss anymore';",
          "417:         $DB->update_record('auth_db_users', $extdbuser2);",
          "420:         $auth->sync_users($trace, true);",
          "423:         $user2 = $DB->get_record('user', array('username' => 'usernoxssanymore', 'auth' => 'db'));",
          "425:         $this->assertEquals($user2->username, 'usernoxssanymore');",
          "429:         $user3 = new stdClass();",
          "430:         $user3->firstname = 'John <script>alert(1)</script> Doe';",
          "431:         $user3->username = 'john%#&~%*_doe';",
          "432:         $user3->email = ' john@testing.com ';",
          "433:         $user3->deleted = 'no';",
          "434:         $user3->description = '<b>A description <script>alert(123)</script>about myself.</b>';",
          "435:         $user3cleaned = $auth->clean_data($user3);",
          "438:         $this->assertEquals($user3cleaned->firstname, 'John alert(1) Doe');",
          "439:         $this->assertEquals($user3cleaned->email, 'john@testing.com');",
          "440:         $this->assertEquals($user3cleaned->deleted, 0);",
          "441:         $this->assertEquals($user3->description, '<b>A description about myself.</b>');",
          "442:         $this->assertEquals($user3->username, 'john_doe');",
          "445:         $user3->fullname = 'John Doe';",
          "446:         $auth->clean_data($user3);",
          "447:         $this->assertDebuggingCalled(\"The property 'fullname' could not be cleaned.\");",
          "448:         $this->cleanup_auth_database();",
          "449:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d9d8e9c3fe92c5f25e319a38fe5617088965ad20",
      "candidate_info": {
        "commit_hash": "d9d8e9c3fe92c5f25e319a38fe5617088965ad20",
        "repo": "moodle/moodle",
        "commit_url": "https://github.com/moodle/moodle/commit/d9d8e9c3fe92c5f25e319a38fe5617088965ad20",
        "files": [
          "auth/db/auth.php",
          "auth/db/tests/db_test.php"
        ],
        "message": "MDL-50705 auth_db: apply standard cleaning to all fields\n\n    Also unit tests were added to cover the new clean_data() method.",
        "before_after_code_files": [
          "auth/db/auth.php||auth/db/auth.php",
          "auth/db/tests/db_test.php||auth/db/tests/db_test.php"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "auth/db/auth.php||auth/db/auth.php",
            "auth/db/tests/db_test.php||auth/db/tests/db_test.php"
          ],
          "candidate": [
            "auth/db/auth.php||auth/db/auth.php",
            "auth/db/tests/db_test.php||auth/db/tests/db_test.php"
          ]
        }
      },
      "candidate_diff": {
        "auth/db/auth.php||auth/db/auth.php": [
          "File: auth/db/auth.php -> auth/db/auth.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "314:                         $updateuser = new stdClass();",
          "315:                         $updateuser->id   = $user->id;",
          "316:                         $updateuser->suspended = 1;",
          "317:                         user_update_user($updateuser, false);",
          "318:                         $trace->output(get_string('auth_dbsuspenduser', 'auth_db', array('name'=>$user->username, 'id'=>$user->id)), 1);",
          "319:                     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "317:                         $updateuser = $this->clean_data($updateuser);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "400:                         $updateuser = new stdClass();",
          "401:                         $updateuser->id = $olduser->id;",
          "402:                         $updateuser->suspended = 0;",
          "403:                         user_update_user($updateuser);",
          "404:                         $trace->output(get_string('auth_dbreviveduser', 'auth_db', array('name' => $username,",
          "405:                             'id' => $olduser->id)), 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "404:                         $updateuser = $this->clean_data($updateuser);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "422:                     $trace->output(get_string('auth_dbinsertuserduplicate', 'auth_db', array('username'=>$user->username, 'auth'=>$collision->auth)), 1);",
          "423:                     continue;",
          "424:                 }",
          "425:                 try {",
          "426:                     $id = user_create_user($user, false); // It is truly a new user.",
          "427:                     $trace->output(get_string('auth_dbinsertuser', 'auth_db', array('name'=>$user->username, 'id'=>$id)), 1);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "427:                 $user = $this->clean_data($user);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "563:         }",
          "564:         if ($needsupdate) {",
          "565:             require_once($CFG->dirroot . '/user/lib.php');",
          "566:             user_update_user($updateuser);",
          "567:         }",
          "568:         return $DB->get_record('user', array('id'=>$userid, 'deleted'=>0));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "569:             $updateuser = $this->clean_data($updateuser);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "888:         error_reporting($CFG->debug);",
          "889:         ob_end_flush();",
          "890:     }",
          "891: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "902:     public function clean_data($user) {",
          "903:         if (empty($user)) {",
          "904:             return $user;",
          "905:         }",
          "907:         foreach ($user as $field => $value) {",
          "909:             try {",
          "910:                 $property = core_user::get_property_definition($field);",
          "911:                 $user->$field = clean_param($value, $property['type']);",
          "912:             } catch (coding_exception $e) {",
          "913:                 debugging(\"The property '$field' could not be cleaned.\", DEBUG_DEVELOPER);",
          "914:             }",
          "915:         }",
          "917:         return $user;",
          "918:     }",
          "",
          "---------------"
        ],
        "auth/db/tests/db_test.php||auth/db/tests/db_test.php": [
          "File: auth/db/tests/db_test.php -> auth/db/tests/db_test.php",
          "--- Hunk 1 ---",
          "[Context before]",
          "375:         $this->cleanup_auth_database();",
          "376:     }",
          "377: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:     public function test_clean_data() {",
          "382:         global $DB;",
          "384:         $this->resetAfterTest(false);",
          "385:         $this->preventResetByRollback();",
          "386:         $this->init_auth_database();",
          "387:         $auth = get_auth_plugin('db');",
          "388:         $auth->db_init();",
          "391:         $extdbuser1 = (object)array('name'=>'u1', 'pass'=>'heslo', 'email'=>'u1@example.com');",
          "392:         $extdbuser1->id = $DB->insert_record('auth_db_users', $extdbuser1);",
          "395:         $extdbuser2 = (object)array('name'=>'user<script>alert(1);</script>xss', 'pass'=>'heslo', 'email'=>'xssuser@example.com');",
          "396:         $extdbuser2->id = $DB->insert_record('auth_db_users', $extdbuser2);",
          "398:         $trace = new null_progress_trace();",
          "401:         $auth->sync_users($trace, true);",
          "404:         $user2 = $DB->get_record('user', array('email'=> $extdbuser2->email, 'auth'=>'db'));",
          "407:         $this->assertEquals($user2->username, 'userscriptalert1scriptxss');",
          "408:         $this->assertNotEquals($user2->username, $extdbuser2->name);",
          "411:         $user1 = $DB->get_record('user', array('email'=> $extdbuser1->email, 'auth'=>'db'));",
          "412:         $this->assertEquals($extdbuser1->name, $user1->username);",
          "413:         $this->assertEquals($extdbuser1->email, $user1->email);",
          "416:         $extdbuser2->name = 'user no xss anymore';",
          "417:         $DB->update_record('auth_db_users', $extdbuser2);",
          "420:         $auth->sync_users($trace, true);",
          "423:         $user2 = $DB->get_record('user', array('username' => 'usernoxssanymore', 'auth' => 'db'));",
          "425:         $this->assertEquals($user2->username, 'usernoxssanymore');",
          "429:         $user3 = new stdClass();",
          "430:         $user3->firstname = 'John <script>alert(1)</script> Doe';",
          "431:         $user3->username = 'john%#&~%*_doe';",
          "432:         $user3->email = ' john@testing.com ';",
          "433:         $user3->deleted = 'no';",
          "434:         $user3->description = '<b>A description <script>alert(123)</script>about myself.</b>';",
          "435:         $user3cleaned = $auth->clean_data($user3);",
          "438:         $this->assertEquals($user3cleaned->firstname, 'John alert(1) Doe');",
          "439:         $this->assertEquals($user3cleaned->email, 'john@testing.com');",
          "440:         $this->assertEquals($user3cleaned->deleted, 0);",
          "441:         $this->assertEquals($user3->description, '<b>A description about myself.</b>');",
          "442:         $this->assertEquals($user3->username, 'john_doe');",
          "445:         $user3->fullname = 'John Doe';",
          "446:         $auth->clean_data($user3);",
          "447:         $this->assertDebuggingCalled(\"The property 'fullname' could not be cleaned.\");",
          "448:         $this->cleanup_auth_database();",
          "449:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}