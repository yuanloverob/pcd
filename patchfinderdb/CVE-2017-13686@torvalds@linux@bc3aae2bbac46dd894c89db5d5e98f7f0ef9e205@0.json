{
  "cve_id": "CVE-2017-13686",
  "cve_desc": "net/ipv4/route.c in the Linux kernel 4.13-rc1 through 4.13-rc6 is too late to check for a NULL fi field when RTM_F_FIB_MATCH is set, which allows local users to cause a denial of service (NULL pointer dereference) or possibly have unspecified other impact via crafted system calls. NOTE: this does not affect any stable release.",
  "repo": "torvalds/linux",
  "patch_hash": "bc3aae2bbac46dd894c89db5d5e98f7f0ef9e205",
  "patch_info": {
    "commit_hash": "bc3aae2bbac46dd894c89db5d5e98f7f0ef9e205",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/bc3aae2bbac46dd894c89db5d5e98f7f0ef9e205",
    "files": [
      "net/ipv4/route.c"
    ],
    "message": "net: check and errout if res->fi is NULL when RTM_F_FIB_MATCH is set\n\nSyzkaller hit 'general protection fault in fib_dump_info' bug on\ncommit 4.13-rc5..\n\nGuilty file: net/ipv4/fib_semantics.c\n\nkasan: GPF could be caused by NULL-ptr deref or user memory access\ngeneral protection fault: 0000 [#1] SMP KASAN\nModules linked in:\nCPU: 0 PID: 2808 Comm: syz-executor0 Not tainted 4.13.0-rc5 #1\nHardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS\nUbuntu-1.8.2-1ubuntu1 04/01/2014\ntask: ffff880078562700 task.stack: ffff880078110000\nRIP: 0010:fib_dump_info+0x388/0x1170 net/ipv4/fib_semantics.c:1314\nRSP: 0018:ffff880078117010 EFLAGS: 00010206\nRAX: dffffc0000000000 RBX: 00000000000000fe RCX: 0000000000000002\nRDX: 0000000000000006 RSI: ffff880078117084 RDI: 0000000000000030\nRBP: ffff880078117268 R08: 000000000000000c R09: ffff8800780d80c8\nR10: 0000000058d629b4 R11: 0000000067fce681 R12: 0000000000000000\nR13: ffff8800784bd540 R14: ffff8800780d80b5 R15: ffff8800780d80a4\nFS:  00000000022fa940(0000) GS:ffff88007fc00000(0000)\nknlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 00000000004387d0 CR3: 0000000079135000 CR4: 00000000000006f0\nCall Trace:\n  inet_rtm_getroute+0xc89/0x1f50 net/ipv4/route.c:2766\n  rtnetlink_rcv_msg+0x288/0x680 net/core/rtnetlink.c:4217\n  netlink_rcv_skb+0x340/0x470 net/netlink/af_netlink.c:2397\n  rtnetlink_rcv+0x28/0x30 net/core/rtnetlink.c:4223\n  netlink_unicast_kernel net/netlink/af_netlink.c:1265 [inline]\n  netlink_unicast+0x4c4/0x6e0 net/netlink/af_netlink.c:1291\n  netlink_sendmsg+0x8c4/0xca0 net/netlink/af_netlink.c:1854\n  sock_sendmsg_nosec net/socket.c:633 [inline]\n  sock_sendmsg+0xca/0x110 net/socket.c:643\n  ___sys_sendmsg+0x779/0x8d0 net/socket.c:2035\n  __sys_sendmsg+0xd1/0x170 net/socket.c:2069\n  SYSC_sendmsg net/socket.c:2080 [inline]\n  SyS_sendmsg+0x2d/0x50 net/socket.c:2076\n  entry_SYSCALL_64_fastpath+0x1a/0xa5\n  RIP: 0033:0x4512e9\n  RSP: 002b:00007ffc75584cc8 EFLAGS: 00000216 ORIG_RAX:\n  000000000000002e\n  RAX: ffffffffffffffda RBX: 0000000000000002 RCX: 00000000004512e9\n  RDX: 0000000000000000 RSI: 0000000020f2cfc8 RDI: 0000000000000003\n  RBP: 000000000000000e R08: 0000000000000000 R09: 0000000000000000\n  R10: 0000000000000000 R11: 0000000000000216 R12: fffffffffffffffe\n  R13: 0000000000718000 R14: 0000000020c44ff0 R15: 0000000000000000\n  Code: 00 0f b6 8d ec fd ff ff 48 8b 85 f0 fd ff ff 88 48 17 48 8b 45\n  28 48 8d 78 30 48 b8 00 00 00 00 00 fc ff df 48 89 fa 48 c1 ea 03\n  <0f>\n  b6 04 02 84 c0 74 08 3c 03 0f 8e cb 0c 00 00 48 8b 45 28 44\n  RIP: fib_dump_info+0x388/0x1170 net/ipv4/fib_semantics.c:1314 RSP:\n  ffff880078117010\n---[ end trace 254a7af28348f88b ]---\n\nThis patch adds a res->fi NULL check.\n\nexample run:\n$ip route get 0.0.0.0 iif virt1-0\nbroadcast 0.0.0.0 dev lo\n    cache <local,brd> iif virt1-0\n\n$ip route get 0.0.0.0 iif virt1-0 fibmatch\nRTNETLINK answers: No route to host\n\nReported-by: idaifish <idaifish@gmail.com>\nReported-by: Dmitry Vyukov <dvyukov@google.com>\nFixes: b61798130f1b (\"net: ipv4: RTM_GETROUTE: return matched fib result when requested\")\nSigned-off-by: Roopa Prabhu <roopa@cumulusnetworks.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
    "before_after_code_files": [
      "net/ipv4/route.c||net/ipv4/route.c"
    ]
  },
  "patch_diff": {
    "net/ipv4/route.c||net/ipv4/route.c": [
      "File: net/ipv4/route.c -> net/ipv4/route.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2763:  if (rtm->rtm_flags & RTM_F_LOOKUP_TABLE)",
      "2764:   table_id = rt->rt_table_id;",
      "2767:   err = fib_dump_info(skb, NETLINK_CB(in_skb).portid,",
      "2768:         nlh->nlmsg_seq, RTM_NEWROUTE, table_id,",
      "2769:         rt->rt_type, res.prefix, res.prefixlen,",
      "2770:         fl4.flowi4_tos, res.fi, 0);",
      "2772:   err = rt_fill_info(net, dst, src, table_id, &fl4, skb,",
      "2773:        NETLINK_CB(in_skb).portid, nlh->nlmsg_seq);",
      "2774:  if (err < 0)",
      "2775:   goto errout_free;",
      "",
      "[Removed Lines]",
      "2766:  if (rtm->rtm_flags & RTM_F_FIB_MATCH)",
      "2771:  else",
      "",
      "[Added Lines]",
      "2766:  if (rtm->rtm_flags & RTM_F_FIB_MATCH) {",
      "2767:   if (!res.fi) {",
      "2768:    err = fib_props[res.type].error;",
      "2769:    if (!err)",
      "2770:     err = -EHOSTUNREACH;",
      "2771:    goto errout_free;",
      "2772:   }",
      "2777:  } else {",
      "2780:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "475fb533fb7d3dcf009a434f9b9ea238b93f4cb8",
      "candidate_info": {
        "commit_hash": "475fb533fb7d3dcf009a434f9b9ea238b93f4cb8",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/475fb533fb7d3dcf009a434f9b9ea238b93f4cb8",
        "files": [
          "tools/perf/tests/openat-syscall-all-cpus.c",
          "tools/perf/tests/openat-syscall.c",
          "tools/perf/util/evlist.c",
          "tools/perf/util/evsel.c",
          "tools/perf/util/evsel.h"
        ],
        "message": "perf evsel: Fix buffer overflow while freeing events\n\nFix buffer overflow for:\n\n  % perf stat -e msr/tsc/,cstate_core/c7-residency/ true\n\nthat causes glibc free list corruption. For some reason it doesn't\ntrigger in valgrind, but it is visible in AS:\n\n  =================================================================\n  ==32681==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x603000003f5c at pc 0x0000005671ef bp 0x7ffdaaac9ac0 sp 0x7ffdaaac9ab0\n  READ of size 4 at 0x603000003f5c thread T0\n    #0 0x5671ee in perf_evsel__close_fd util/evsel.c:1196\n    #1 0x56c57a in perf_evsel__close util/evsel.c:1717\n    #2 0x55ed5f in perf_evlist__close util/evlist.c:1631\n    #3 0x4647e1 in __run_perf_stat /home/ak/hle/linux-hle-2.6/tools/perf/builtin-stat.c:749\n    #4 0x4648e3 in run_perf_stat /home/ak/hle/linux-hle-2.6/tools/perf/builtin-stat.c:767\n    #5 0x46e1bc in cmd_stat /home/ak/hle/linux-hle-2.6/tools/perf/builtin-stat.c:2785\n    #6 0x52f83d in run_builtin /home/ak/hle/linux-hle-2.6/tools/perf/perf.c:296\n    #7 0x52fd49 in handle_internal_command /home/ak/hle/linux-hle-2.6/tools/perf/perf.c:348\n    #8 0x5300de in run_argv /home/ak/hle/linux-hle-2.6/tools/perf/perf.c:392\n    #9 0x5308f3 in main /home/ak/hle/linux-hle-2.6/tools/perf/perf.c:530\n    #10 0x7f0672d13400 in __libc_start_main (/lib64/libc.so.6+0x20400)\n    #11 0x428419 in _start (/home/ak/hle/obj-perf/perf+0x428419)\n\n  0x603000003f5c is located 0 bytes to the right of 28-byte region [0x603000003f40,0x603000003f5c)\n  allocated by thread T0 here:\n    #0 0x7f0675139020 in calloc (/lib64/libasan.so.3+0xc7020)\n    #1 0x648a2d in zalloc util/util.h:23\n    #2 0x648a88 in xyarray__new util/xyarray.c:9\n    #3 0x566419 in perf_evsel__alloc_fd util/evsel.c:1039\n    #4 0x56b427 in perf_evsel__open util/evsel.c:1529\n    #5 0x56c620 in perf_evsel__open_per_thread util/evsel.c:1730\n    #6 0x461dea in create_perf_stat_counter /home/ak/hle/linux-hle-2.6/tools/perf/builtin-stat.c:263\n    #7 0x4637d7 in __run_perf_stat /home/ak/hle/linux-hle-2.6/tools/perf/builtin-stat.c:600\n    #8 0x4648e3 in run_perf_stat /home/ak/hle/linux-hle-2.6/tools/perf/builtin-stat.c:767\n    #9 0x46e1bc in cmd_stat /home/ak/hle/linux-hle-2.6/tools/perf/builtin-stat.c:2785\n    #10 0x52f83d in run_builtin /home/ak/hle/linux-hle-2.6/tools/perf/perf.c:296\n    #11 0x52fd49 in handle_internal_command /home/ak/hle/linux-hle-2.6/tools/perf/perf.c:348\n    #12 0x5300de in run_argv /home/ak/hle/linux-hle-2.6/tools/perf/perf.c:392\n    #13 0x5308f3 in main /home/ak/hle/linux-hle-2.6/tools/perf/perf.c:530\n    #14 0x7f0672d13400 in __libc_start_main (/lib64/libc.so.6+0x20400)\n\nThe event is allocated with cpus == 1, but freed with cpus == real number\nWhen the evsel close function walks the file descriptors it exceeds the\nfd xyarray boundaries and reads random memory.\n\nv2:\n\nNow that xyarrays save their original dimensions we can use these to\niterate the two dimensional fd arrays. Fix some users (close, ioctl) in\nevsel.c to use these fields directly. This allows simplifying the code\nand dropping quite a few function arguments. Adjust all callers by\nremoving the unneeded arguments.\n\nThe actual perf event reading still uses the original values from the\nevsel list.\n\nSigned-off-by: Andi Kleen <ak@linux.intel.com>\nAcked-by: Jiri Olsa <jolsa@kernel.org>\nLink: http://lkml.kernel.org/r/20170811232634.30465-2-andi@firstfloor.org\n[ Fix up xy_max_[xy]() -> xyarray__max_[xy]() ]\nSigned-off-by: Arnaldo Carvalho de Melo <acme@redhat.com>",
        "before_after_code_files": [
          "tools/perf/tests/openat-syscall-all-cpus.c||tools/perf/tests/openat-syscall-all-cpus.c",
          "tools/perf/tests/openat-syscall.c||tools/perf/tests/openat-syscall.c",
          "tools/perf/util/evlist.c||tools/perf/util/evlist.c",
          "tools/perf/util/evsel.c||tools/perf/util/evsel.c",
          "tools/perf/util/evsel.h||tools/perf/util/evsel.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "tools/perf/tests/openat-syscall-all-cpus.c||tools/perf/tests/openat-syscall-all-cpus.c": [
          "File: tools/perf/tests/openat-syscall-all-cpus.c -> tools/perf/tests/openat-syscall-all-cpus.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "116:  perf_evsel__free_counts(evsel);",
          "117: out_close_fd:",
          "119: out_evsel_delete:",
          "120:  perf_evsel__delete(evsel);",
          "121: out_thread_map_delete:",
          "",
          "[Removed Lines]",
          "118:  perf_evsel__close_fd(evsel, 1, threads->nr);",
          "",
          "[Added Lines]",
          "118:  perf_evsel__close_fd(evsel);",
          "",
          "---------------"
        ],
        "tools/perf/tests/openat-syscall.c||tools/perf/tests/openat-syscall.c": [
          "File: tools/perf/tests/openat-syscall.c -> tools/perf/tests/openat-syscall.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "57:  err = 0;",
          "58: out_close_fd:",
          "60: out_evsel_delete:",
          "61:  perf_evsel__delete(evsel);",
          "62: out_thread_map_delete:",
          "",
          "[Removed Lines]",
          "59:  perf_evsel__close_fd(evsel, 1, threads->nr);",
          "",
          "[Added Lines]",
          "59:  perf_evsel__close_fd(evsel);",
          "",
          "---------------"
        ],
        "tools/perf/util/evlist.c||tools/perf/util/evlist.c": [
          "File: tools/perf/util/evlist.c -> tools/perf/util/evlist.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1419: {",
          "1420:  struct perf_evsel *evsel;",
          "1421:  int err = 0;",
          "1425:  evlist__for_each_entry(evlist, evsel) {",
          "1426:   if (evsel->filter == NULL)",
          "",
          "[Removed Lines]",
          "1422:  const int ncpus = cpu_map__nr(evlist->cpus),",
          "1423:     nthreads = thread_map__nr(evlist->threads);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1434:   if (err) {",
          "1436:    break;",
          "",
          "[Removed Lines]",
          "1433:   err = perf_evsel__apply_filter(evsel, ncpus, nthreads, evsel->filter);",
          "",
          "[Added Lines]",
          "1431:   err = perf_evsel__apply_filter(evsel, evsel->filter);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1623: void perf_evlist__close(struct perf_evlist *evlist)",
          "1624: {",
          "1625:  struct perf_evsel *evsel;",
          "1633: }",
          "1635: static int perf_evlist__create_syswide_maps(struct perf_evlist *evlist)",
          "",
          "[Removed Lines]",
          "1626:  int ncpus = cpu_map__nr(evlist->cpus);",
          "1627:  int nthreads = thread_map__nr(evlist->threads);",
          "1629:  evlist__for_each_entry_reverse(evlist, evsel) {",
          "1630:   int n = evsel->cpus ? evsel->cpus->nr : ncpus;",
          "1631:   perf_evsel__close(evsel, n, nthreads);",
          "1632:  }",
          "",
          "[Added Lines]",
          "1625:  evlist__for_each_entry_reverse(evlist, evsel)",
          "1626:   perf_evsel__close(evsel);",
          "",
          "---------------"
        ],
        "tools/perf/util/evsel.c||tools/perf/util/evsel.c": [
          "File: tools/perf/util/evsel.c -> tools/perf/util/evsel.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1051:  return evsel->fd != NULL ? 0 : -ENOMEM;",
          "1052: }",
          "1055:      int ioc,  void *arg)",
          "1056: {",
          "1057:  int cpu, thread;",
          "1064:    int fd = FD(evsel, cpu, thread),",
          "1065:        err = ioctl(fd, ioc, arg);",
          "",
          "[Removed Lines]",
          "1054: static int perf_evsel__run_ioctl(struct perf_evsel *evsel, int ncpus, int nthreads,",
          "1059:  if (evsel->system_wide)",
          "1060:   nthreads = 1;",
          "1062:  for (cpu = 0; cpu < ncpus; cpu++) {",
          "1063:   for (thread = 0; thread < nthreads; thread++) {",
          "",
          "[Added Lines]",
          "1054: static int perf_evsel__run_ioctl(struct perf_evsel *evsel,",
          "1059:  for (cpu = 0; cpu < xyarray__max_x(evsel->fd); cpu++) {",
          "1060:   for (thread = 0; thread < xyarray__max_y(evsel->fd); thread++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1072:  return 0;",
          "1073: }",
          "1077: {",
          "1079:          PERF_EVENT_IOC_SET_FILTER,",
          "1080:          (void *)filter);",
          "1081: }",
          "",
          "[Removed Lines]",
          "1075: int perf_evsel__apply_filter(struct perf_evsel *evsel, int ncpus, int nthreads,",
          "1076:         const char *filter)",
          "1078:  return perf_evsel__run_ioctl(evsel, ncpus, nthreads,",
          "",
          "[Added Lines]",
          "1072: int perf_evsel__apply_filter(struct perf_evsel *evsel, const char *filter)",
          "1074:  return perf_evsel__run_ioctl(evsel,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1123: int perf_evsel__enable(struct perf_evsel *evsel)",
          "1124: {",
          "1129:          PERF_EVENT_IOC_ENABLE,",
          "1130:          0);",
          "1131: }",
          "1133: int perf_evsel__disable(struct perf_evsel *evsel)",
          "1134: {",
          "1139:          PERF_EVENT_IOC_DISABLE,",
          "1140:          0);",
          "1141: }",
          "",
          "[Removed Lines]",
          "1125:  int nthreads = thread_map__nr(evsel->threads);",
          "1126:  int ncpus = cpu_map__nr(evsel->cpus);",
          "1128:  return perf_evsel__run_ioctl(evsel, ncpus, nthreads,",
          "1135:  int nthreads = thread_map__nr(evsel->threads);",
          "1136:  int ncpus = cpu_map__nr(evsel->cpus);",
          "1138:  return perf_evsel__run_ioctl(evsel, ncpus, nthreads,",
          "",
          "[Added Lines]",
          "1121:  return perf_evsel__run_ioctl(evsel,",
          "1128:  return perf_evsel__run_ioctl(evsel,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1185:  }",
          "1186: }",
          "1189: {",
          "1190:  int cpu, thread;",
          "1197:    close(FD(evsel, cpu, thread));",
          "1198:    FD(evsel, cpu, thread) = -1;",
          "1199:   }",
          "",
          "[Removed Lines]",
          "1188: void perf_evsel__close_fd(struct perf_evsel *evsel, int ncpus, int nthreads)",
          "1192:  if (evsel->system_wide)",
          "1193:   nthreads = 1;",
          "1195:  for (cpu = 0; cpu < ncpus; cpu++)",
          "1196:   for (thread = 0; thread < nthreads; ++thread) {",
          "",
          "[Added Lines]",
          "1178: void perf_evsel__close_fd(struct perf_evsel *evsel)",
          "1182:  for (cpu = 0; cpu < xyarray__max_x(evsel->fd); cpu++)",
          "1183:   for (thread = 0; thread < xyarray__max_y(evsel->fd); ++thread) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1854:  return err;",
          "1855: }",
          "1858: {",
          "1859:  if (evsel->fd == NULL)",
          "1860:   return;",
          "1863:  perf_evsel__free_fd(evsel);",
          "1864: }",
          "",
          "[Removed Lines]",
          "1857: void perf_evsel__close(struct perf_evsel *evsel, int ncpus, int nthreads)",
          "1862:  perf_evsel__close_fd(evsel, ncpus, nthreads);",
          "",
          "[Added Lines]",
          "1844: void perf_evsel__close(struct perf_evsel *evsel)",
          "1849:  perf_evsel__close_fd(evsel);",
          "",
          "---------------"
        ],
        "tools/perf/util/evsel.h||tools/perf/util/evsel.h": [
          "File: tools/perf/util/evsel.h -> tools/perf/util/evsel.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "226: int perf_evsel__group_desc(struct perf_evsel *evsel, char *buf, size_t size);",
          "228: int perf_evsel__alloc_id(struct perf_evsel *evsel, int ncpus, int nthreads);",
          "231: void __perf_evsel__set_sample_bit(struct perf_evsel *evsel,",
          "232:       enum perf_event_sample_format bit);",
          "",
          "[Removed Lines]",
          "229: void perf_evsel__close_fd(struct perf_evsel *evsel, int ncpus, int nthreads);",
          "",
          "[Added Lines]",
          "229: void perf_evsel__close_fd(struct perf_evsel *evsel);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246: int perf_evsel__append_tp_filter(struct perf_evsel *evsel, const char *filter);",
          "247: int perf_evsel__append_addr_filter(struct perf_evsel *evsel,",
          "248:        const char *filter);",
          "251: int perf_evsel__enable(struct perf_evsel *evsel);",
          "252: int perf_evsel__disable(struct perf_evsel *evsel);",
          "",
          "[Removed Lines]",
          "249: int perf_evsel__apply_filter(struct perf_evsel *evsel, int ncpus, int nthreads,",
          "250:         const char *filter);",
          "",
          "[Added Lines]",
          "249: int perf_evsel__apply_filter(struct perf_evsel *evsel, const char *filter);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "257:     struct thread_map *threads);",
          "258: int perf_evsel__open(struct perf_evsel *evsel, struct cpu_map *cpus,",
          "259:        struct thread_map *threads);",
          "262: struct perf_sample;",
          "",
          "[Removed Lines]",
          "260: void perf_evsel__close(struct perf_evsel *evsel, int ncpus, int nthreads);",
          "",
          "[Added Lines]",
          "259: void perf_evsel__close(struct perf_evsel *evsel);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e28e6f75667d68cd36f1ef312c3d988795fee331",
      "candidate_info": {
        "commit_hash": "e28e6f75667d68cd36f1ef312c3d988795fee331",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/e28e6f75667d68cd36f1ef312c3d988795fee331",
        "files": [
          "drivers/media/platform/s5p-jpeg/jpeg-core.c"
        ],
        "message": "media: s5p-jpeg: Fix crash in jpeg isr due to multiple interrupts\n\nIn case of corrupt images, multiple interrupts may occur\ndue to different error scenarios.\n\nSince we are removing the src and dest buffers in the first\ninterrupt itself, crash occurs in the second error interrupts.\n\nDisable the global interrupt before we start processing\nthe interrupt to avoid the crash.\n\nDisable System interrupt in isr to avoid the crash below.\n\nUnable to handle kernel NULL pointer dereference at virtual address 000000c8\npgd = ffffffc0007db000\n[000000c8] *pgd=00000000fb006003, *pud=00000000fb006003, *pmd=00000000fb007003, *pte=0060000011001707\nInternal error: Oops: 96000007 [#1] PREEMPT SMP\nModules linked in:\nCPU: 0 PID: 0 Comm: swapper/0 Not tainted 3.18.0-next-20141210+ #22\nHardware name: Samsung Exynos7 Espresso board based on EXYNOS7 (DT)\ntask: ffffffc00075e5c0 ti: ffffffc00074c000 task.ti: ffffffc00074c000\nPC is at exynos4_jpeg_irq+0x30/0x15c\nLR is at exynos4_jpeg_irq+0x2c/0x15c\npc : [<ffffffc00040873c>] lr : [<ffffffc000408738>] pstate: 800001c5\nsp : ffffffc00074fc60\nx29: ffffffc00074fc60 x28: 0000004040000000\nx27: ffffffc000673928 x26: ffffffc000673940\nx25: ffffffc0007a030c x24: ffffffc0bb20a400\nx23: 0000000000000030 x22: ffffffc0ba56ba40\nx21: 0000000000000000 x20: 0000000000000000\nx19: ffffffc0ba56ba18 x18: 0000000000000000\nx17: 0000000000000000 x16: ffffffc00018b508\nx15: 0000000000000000 x14: 0000000000000000\nx13: 0098968000000000 x12: 0000000000989680\nx11: 0000000000000004 x10: 0101010101010101\nx9 : 00000020a285a9ea x8 : ffffffc0007af880\nx7 : ffffffc0bac001a8 x6 : ffffffc0bac00000\nx5 : 00000000fffffffa x4 : ffffffc00040870c\nx3 : 0000000000000003 x2 : 0000000000010003\nx1 : 0000000000010002 x0 : 0000000000000000\n\nProcess swapper/0 (pid: 0, stack limit = 0xffffffc00074c058)\nStack: (0xffffffc00074fc60 to 0xffffffc000750000)\nfc60: 0074fca0 ffffffc0 000e4508 ffffffc0 bb225300 ffffffc0 bb20a494 ffffffc0\nfc80: 00000000 00000000 00000000 00000000 00000030 00000000 000f8c6c ffffffc0\nfca0: 0074fd00 ffffffc0 000e4644 ffffffc0 bb20a400 ffffffc0 bb20a494 ffffffc0\nfcc0: 00776a00 ffffffc0 00670da8 ffffffc0 00000000 00000000 00000001 00000000\nfce0: bb008000 ffffffc0 407db000 00000000 00081230 ffffffc0 000e4638 ffffffc0\nfd00: 0074fd40 ffffffc0 000e7338 ffffffc0 bb20a400 ffffffc0 bb20a494 ffffffc0\nfd20: 00776a00 ffffffc0 000e7280 ffffffc0 bb225300 ffffffc0 000e72e0 ffffffc0\nfd40: 0074fd70 ffffffc0 000e3d60 ffffffc0 00000030 00000000 00743000 ffffffc0\nfd60: 0066e000 ffffffc0 006c2000 ffffffc0 0074fd90 ffffffc0 000e3e90 ffffffc0\nfd80: 007437c8 ffffffc0 000e3e6c ffffffc0 0074fdf0 ffffffc0 00082404 ffffffc0\nfda0: 0074fe20 ffffffc0 0075a000 ffffffc0 0000200c ffffff80 00002010 ffffff80\nfdc0: 60000145 00000000 00672cc8 ffffffc0 407d9000 00000000 befb9b40 ffffffc0\nfde0: 0074fe20 ffffffc0 000001d2 00000000 0074ff40 ffffffc0 00085da8 ffffffc0\nfe00: 00758584 ffffffc0 0052c000 ffffffc0 0074ff40 ffffffc0 00087114 ffffffc0\nfe20: 00000000 00000000 0074ff50 ffffffc0 0067d760 ffffffc0 befb9adc ffffffc0\nfe40: 00000001 00000000 d4414200 00000020 d6a39c00 00000020 007a6a18 ffffffc0\nfe60: 0075eb00 ffffffc0 0074fd60 ffffffc0 ffffc185 00000000 00000020 00000000\nfe80: 0052d340 ffffffc0 00000030 00000000 fffffffe 0fffffff 00000000 00000000\nfea0: 0018b508 ffffffc0 00000000 00000000 00000000 00000000 00758584 ffffffc0\nfec0: 0052c000 ffffffc0 006c24e8 ffffffc0 007a030a ffffffc0 00000001 00000000\nfee0: 00672cc8 ffffffc0 407d9000 00000000 407db000 00000000 00081230 ffffffc0\nff00: 40000000 00000040 0074ff40 ffffffc0 00087110 ffffffc0 0074ff40 ffffffc0\nff20: 00087114 ffffffc0 60000145 00000000 00758584 ffffffc0 0052c000 ffffffc0\nff40: 0074ff50 ffffffc0 000db568 ffffffc0 0074ff90 ffffffc0 00515fdc ffffffc0\nff60: 00758000 ffffffc0 007a3000 ffffffc0 007a3000 ffffffc0 befc8940 ffffffc0\nff80: 40760000 00000000 40000000 00000000 0074ffb0 ffffffc0 006ff998 ffffffc0\nffa0: 00000002 00000000 006ff988 ffffffc0 00000000 00000000 400826c0 00000000\nffc0: 8f03a688 00000000 00000e11 00000000 48000000 00000000 410fd030 00000000\nffe0: 0072c250 ffffffc0 00000000 00000000 00000000 00000000 00000000 00000000\nCall trace:\n[<ffffffc00040873c>] exynos4_jpeg_irq+0x30/0x15c\n[<ffffffc0000e4504>] handle_irq_event_percpu+0x6c/0x160\n[<ffffffc0000e4640>] handle_irq_event+0x48/0x78\n[<ffffffc0000e7334>] handle_fasteoi_irq+0xe0/0x198\n[<ffffffc0000e3d5c>] generic_handle_irq+0x24/0x40\n[<ffffffc0000e3e8c>] __handle_domain_irq+0x80/0xf0\n[<ffffffc000082400>] gic_handle_irq+0x30/0x80\nException stack(0xffffffc00074fe00 to 0xffffffc00074ff20)\nfe00: 00758584 ffffffc0 0052c000 ffffffc0 0074ff40 ffffffc0 00087114 ffffffc0\nfe20: 00000000 00000000 0074ff50 ffffffc0 0067d760 ffffffc0 befb9adc ffffffc0\nfe40: 00000001 00000000 d4414200 00000020 d6a39c00 00000020 007a6a18 ffffffc0\nfe60: 0075eb00 ffffffc0 0074fd60 ffffffc0 ffffc185 00000000 00000020 00000000\nfe80: 0052d340 ffffffc0 00000030 00000000 fffffffe 0fffffff 00000000 00000000\nfea0: 0018b508 ffffffc0 00000000 00000000 00000000 00000000 00758584 ffffffc0\nfec0: 0052c000 ffffffc0 006c24e8 ffffffc0 007a030a ffffffc0 00000001 00000000\nfee0: 00672cc8 ffffffc0 407d9000 00000000 407db000 00000000 00081230 ffffffc0\nff00: 40000000 00000040 0074ff40 ffffffc0 00087110 ffffffc0 0074ff40 ffffffc0\n[<ffffffc000085da4>] el1_irq+0x64/0xd8\n[<ffffffc0000db564>] cpu_startup_entry+0x118/0x168\n[<ffffffc000515fd8>] rest_init+0x7c/0x88\n[<ffffffc0006ff994>] start_kernel+0x3a8/0x3bc\nCode: 94045c34 f9406e60 97ffdc74 aa0003f4 (f9406400)\n---[ end trace fa6dc0ea2efad21f ]---\nKernel panic - not syncing: Fatal exception in interrupt\n---[ end Kernel panic - not syncing: Fatal exception in interrupt\n\nSigned-off-by: Tony K Nadackal <tony.kn@samsung.com>\nSigned-off-by: Sylwester Nawrocki <s.nawrocki@samsung.com>\n\nSigned-off-by: Mauro Carvalho Chehab <mchehab@s-opensource.com>",
        "before_after_code_files": [
          "drivers/mediplatform/s5p-jpeg/jpeg-core.c||drivers/media/platform/s5p-jpeg/jpeg-core.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/mediplatform/s5p-jpeg/jpeg-core.c||drivers/media/platform/s5p-jpeg/jpeg-core.c": [
          "File: drivers/mediplatform/s5p-jpeg/jpeg-core.c -> drivers/media/platform/s5p-jpeg/jpeg-core.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2306:  exynos4_jpeg_set_sys_int_enable(jpeg->regs, 1);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2759:  exynos4_jpeg_set_sys_int_enable(jpeg->regs, 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6399fb5a0b69a9cc73aa84767954366d867b145d",
      "candidate_info": {
        "commit_hash": "6399fb5a0b69a9cc73aa84767954366d867b145d",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6399fb5a0b69a9cc73aa84767954366d867b145d",
        "files": [
          "fs/btrfs/tree-log.c"
        ],
        "message": "Btrfs: fix assertion failure during fsync in no-holes mode\n\nWhen logging an inode in full mode that has an inline compressed extent\nthat represents a range with a size matching the sector size (currently\nthe same as the page size), has a trailing hole and the no-holes feature\nis enabled, we end up failing an assertion leading to a trace like the\nfollowing:\n\n[141812.031528] assertion failed: len == i_size, file: fs/btrfs/tree-log.c, line: 4453\n[141812.033069] ------------[ cut here ]------------\n[141812.034330] kernel BUG at fs/btrfs/ctree.h:3452!\n[141812.035137] invalid opcode: 0000 [#1] PREEMPT SMP\n[141812.035932] Modules linked in: btrfs dm_thin_pool dm_persistent_data dm_bio_prison dm_bufio dm_flakey dm_mod dax ppdev evdev ghash_clmulni_intel pcbc aesni_intel aes_x86_64 tpm_tis psmouse crypto_simd parport_pc sg pcspkr tpm_tis_core cryptd parport serio_raw glue_helper tpm i2c_piix4 i2c_core button sunrpc loop autofs4 ext4 crc16 jbd2 mbcache raid10 raid456 async_raid6_recov async_memcpy async_pq async_xor async_tx xor raid6_pq libcrc32c crc32c_generic raid1 raid0 multipath linear md_mod sd_mod ata_generic virtio_scsi ata_piix floppy crc32c_intel libata scsi_mod virtio_pci virtio_ring e1000 virtio [last unloaded: btrfs]\n[141812.036790] CPU: 3 PID: 845 Comm: fdm-stress Tainted: G    B   W       4.12.3-btrfs-next-52+ #1\n[141812.036790] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.10.2-0-g5f4c7b1-prebuilt.qemu-project.org 04/01/2014\n[141812.036790] task: ffff8801e6694180 task.stack: ffffc90009004000\n[141812.036790] RIP: 0010:assfail.constprop.18+0x1c/0x1e [btrfs]\n[141812.036790] RSP: 0018:ffffc90009007bc0 EFLAGS: 00010282\n[141812.036790] RAX: 0000000000000046 RBX: ffff88017512c008 RCX: 0000000000000001\n[141812.036790] RDX: ffff88023fd95201 RSI: ffffffff8182264c RDI: 00000000ffffffff\n[141812.036790] RBP: ffffc90009007bc0 R08: 0000000000000001 R09: 0000000000000001\n[141812.036790] R10: 0000000000001000 R11: ffffffff82f5a0c9 R12: ffff88014e5947e8\n[141812.036790] R13: 00000000000b4000 R14: ffff8801b234d008 R15: 0000000000000000\n[141812.036790] FS:  00007fdba6ffd700(0000) GS:ffff88023fd80000(0000) knlGS:0000000000000000\n[141812.036790] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n[141812.036790] CR2: 00007fdb9c000010 CR3: 000000016efa2000 CR4: 00000000001406e0\n[141812.036790] Call Trace:\n[141812.036790]  btrfs_log_inode+0x9f0/0xd3d [btrfs]\n[141812.036790]  ? __mutex_lock+0x120/0x3ce\n[141812.036790]  btrfs_log_inode_parent+0x224/0x685 [btrfs]\n[141812.036790]  ? lock_acquire+0x16b/0x1af\n[141812.036790]  btrfs_log_dentry_safe+0x60/0x7b [btrfs]\n[141812.036790]  btrfs_sync_file+0x32e/0x3f8 [btrfs]\n[141812.036790]  vfs_fsync_range+0x8a/0x9d\n[141812.036790]  vfs_fsync+0x1c/0x1e\n[141812.036790]  do_fsync+0x31/0x4a\n[141812.036790]  SyS_fdatasync+0x13/0x17\n[141812.036790]  entry_SYSCALL_64_fastpath+0x18/0xad\n[141812.036790] RIP: 0033:0x7fdbac41a47d\n[141812.036790] RSP: 002b:00007fdba6ffce30 EFLAGS: 00000293 ORIG_RAX: 000000000000004b\n[141812.036790] RAX: ffffffffffffffda RBX: ffffffff81092c9f RCX: 00007fdbac41a47d\n[141812.036790] RDX: 0000004cf0160a40 RSI: 0000000000000000 RDI: 0000000000000006\n[141812.036790] RBP: ffffc90009007f98 R08: 0000000000000000 R09: 0000000000000010\n[141812.036790] R10: 00000000000002e8 R11: 0000000000000293 R12: ffffffff8110cd90\n[141812.036790] R13: ffffc90009007f78 R14: 0000000000000000 R15: 0000000000000000\n[141812.036790]  ? time_hardirqs_off+0x9/0x14\n[141812.036790]  ? trace_hardirqs_off_caller+0x1f/0xa3\n[141812.036790] Code: c7 d6 61 6b a0 48 89 e5 e8 ba ef a8 e0 0f 0b 55 89 f1 48 c7 c2 6d 65 6b a0 48 89 fe 48 c7 c7 81 65 6b a0 48 89 e5 e8 9c ef a8 e0 <0f> 0b 0f 1f 44 00 00 55 48 89 e5 41 57 41 56 41 55 41 54 49 89\n[141812.036790] RIP: assfail.constprop.18+0x1c/0x1e [btrfs] RSP: ffffc90009007bc0\n[141812.084448] ---[ end trace 44e472684c7a32cc ]---\n\nWhich happens because the code that logs a trailing hole when the no-holes\nfeature is enabled, did not consider that a compressed inline extent can\nrepresent a range with a size matching the sector size, in which case\nexpanding the inode's i_size, through a truncate operation, won't lead\nto padding with zeroes the page that represents the inline extent, and\ntherefore the inline extent remains after the truncation.\n\nFix this by adapting the assertion to accept inline extents representing\ndata with a sector size length if, and only if, the inline extents are\ncompressed.\n\nA sample and trivial reproducer (for systems with a 4K page size) for this\nissue:\n\n  mkfs.btrfs -O no-holes -f /dev/sdc\n  mount -o compress /dev/sdc /mnt\n  xfs_io -f -c \"pwrite -S 0xab 0 4K\" /mnt/foobar\n  sync\n  xfs_io -c \"truncate 32K\" /mnt/foobar\n  xfs_io -c \"fsync\" /mnt/foobar\n\nSigned-off-by: Filipe Manana <fdmanana@suse.com>\nSigned-off-by: Chris Mason <clm@fb.com>\nSigned-off-by: David Sterba <dsterba@suse.com>",
        "before_after_code_files": [
          "fs/btrfs/tree-log.c||fs/btrfs/tree-log.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "fs/btrfs/tree-log.c||fs/btrfs/tree-log.c": [
          "File: fs/btrfs/tree-log.c -> fs/btrfs/tree-log.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4448:    len = btrfs_file_extent_inline_len(leaf,",
          "4449:           path->slots[0],",
          "4450:           extent);",
          "4452:    return 0;",
          "4453:   }",
          "",
          "[Removed Lines]",
          "4451:    ASSERT(len == i_size);",
          "",
          "[Added Lines]",
          "4451:    ASSERT(len == i_size ||",
          "4452:           (len == fs_info->sectorsize &&",
          "4453:     btrfs_file_extent_compression(leaf, extent) !=",
          "4454:     BTRFS_COMPRESS_NONE));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb371933cf4d3495d0899880b2e0e252ce9db517",
      "candidate_info": {
        "commit_hash": "eb371933cf4d3495d0899880b2e0e252ce9db517",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/eb371933cf4d3495d0899880b2e0e252ce9db517",
        "files": [
          "drivers/gpu/drm/i915/i915_drv.c"
        ],
        "message": "drm/i915/cfl: Coffee Lake works on Kaby Lake PCH.\n\nCoffee Lake CPU on Kaby Lake PCH is possible.\nIt does exist, and it does work.\n\nThe only missed case was this warning here noticed\nby Wendy who could get one system with this configuration\nand reported the issue for us:\n\nHardware Configuration\nBoard ID KBL S DDR4 UDIMM EV CRB\nProcessor    Intel\u00ae Processor code named Coffee Lake S, (6+2), 6 cores 12 threads, GT2, A0 (Internal) (QNJ4)\n\n[ 3.220585] WARNING: CPU: 10 PID: 206 at drivers/gpu/drm/i915/i915_drv.c:340 i915_driver_load+0x1210/0x1660 [i915]\n[ 3.221312] Modules linked in: hid_generic usbhid i915 i2c_algo_bit drm_kms_helper e1000e syscopyarea sysfillrect sysimgblt nvme fb_sys_fops ptp ahci i2c_hid drm pps_core nvme_core libahci wmi hid video\n[ 3.222050] CPU: 10 PID: 206 Comm: systemd-udevd Not tainted 4.13.0-rc5-intel-next+ #1\n[ 3.222706] Hardware name: Intel Corporation Kabylake Client platform/KBL S DDR4 UDIMM EV CRB, BIOS KBLSE2R1.R00.X089.P00.1705051000 05/05/2017\n\nCc: Wendy Wang <wendy.wang@intel.com>\nCc: Dhinakaran Pandiyan <dhinakaran.pandiyan@intel.com>\nSigned-off-by: Rodrigo Vivi <rodrigo.vivi@intel.com>\nReviewed-by: Dhinakaran Pandiyan <dhinakaran.pandiyan@intel.com>\nLink: https://patchwork.freedesktop.org/patch/msgid/20170821235056.9015-1-rodrigo.vivi@intel.com",
        "before_after_code_files": [
          "drivers/gpu/drm/i915/i915_drv.c||drivers/gpu/drm/i915/i915_drv.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "drivers/gpu/drm/i915/i915_drv.c||drivers/gpu/drm/i915/i915_drv.c": [
          "File: drivers/gpu/drm/i915/i915_drv.c -> drivers/gpu/drm/i915/i915_drv.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "239:     dev_priv->pch_type = PCH_KBP;",
          "240:     DRM_DEBUG_KMS(\"Found Kaby Lake PCH (KBP)\\n\");",
          "241:     WARN_ON(!IS_SKYLAKE(dev_priv) &&",
          "243:    } else if (id == INTEL_PCH_CNP_DEVICE_ID_TYPE) {",
          "244:     dev_priv->pch_type = PCH_CNP;",
          "245:     DRM_DEBUG_KMS(\"Found Cannon Lake PCH (CNP)\\n\");",
          "",
          "[Removed Lines]",
          "242:      !IS_KABYLAKE(dev_priv));",
          "",
          "[Added Lines]",
          "242:      !IS_KABYLAKE(dev_priv) &&",
          "243:      !IS_COFFEELAKE(dev_priv));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9a19bad70cf16b0cdf3576efda7deb490e7aa529",
      "candidate_info": {
        "commit_hash": "9a19bad70cf16b0cdf3576efda7deb490e7aa529",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/9a19bad70cf16b0cdf3576efda7deb490e7aa529",
        "files": [
          "net/rxrpc/call_accept.c"
        ],
        "message": "rxrpc: Fix oops when discarding a preallocated service call\n\nrxrpc_service_prealloc_one() doesn't set the socket pointer on any new call\nit preallocates, but does add it to the rxrpc net namespace call list.\nThis, however, causes rxrpc_put_call() to oops when the call is discarded\nwhen the socket is closed.  rxrpc_put_call() needs the socket to be able to\nreach the namespace so that it can use a lock held therein.\n\nFix this by setting a call's socket pointer immediately before discarding\nit.\n\nThis can be triggered by unloading the kafs module, resulting in an oops\nlike the following:\n\nBUG: unable to handle kernel NULL pointer dereference at 0000000000000030\nIP: rxrpc_put_call+0x1e2/0x32d\nPGD 0\nP4D 0\nOops: 0000 [#1] SMP\nModules linked in: kafs(E-)\nCPU: 3 PID: 3037 Comm: rmmod Tainted: G            E   4.12.0-fscache+ #213\nHardware name: ASUS All Series/H97-PLUS, BIOS 2306 10/09/2014\ntask: ffff8803fc92e2c0 task.stack: ffff8803fef74000\nRIP: 0010:rxrpc_put_call+0x1e2/0x32d\nRSP: 0018:ffff8803fef77e08 EFLAGS: 00010282\nRAX: 0000000000000000 RBX: ffff8803fab99ac0 RCX: 000000000000000f\nRDX: ffffffff81c50a40 RSI: 000000000000000c RDI: ffff8803fc92ea88\nRBP: ffff8803fef77e30 R08: ffff8803fc87b941 R09: ffffffff82946d20\nR10: ffff8803fef77d10 R11: 00000000000076fc R12: 0000000000000005\nR13: ffff8803fab99c20 R14: 0000000000000001 R15: ffffffff816c6aee\nFS:  00007f915a059700(0000) GS:ffff88041fb80000(0000) knlGS:0000000000000000\nCS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\nCR2: 0000000000000030 CR3: 00000003fef39000 CR4: 00000000001406e0\nCall Trace:\n rxrpc_discard_prealloc+0x325/0x341\n rxrpc_listen+0xf9/0x146\n kernel_listen+0xb/0xd\n afs_close_socket+0x3e/0x173 [kafs]\n afs_exit+0x1f/0x57 [kafs]\n SyS_delete_module+0x10f/0x19a\n do_syscall_64+0x8a/0x149\n entry_SYSCALL64_slow_path+0x25/0x25\n\nFixes: 2baec2c3f854 (\"rxrpc: Support network namespacing\")\nSigned-off-by: David Howells <dhowells@redhat.com>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "net/rxrpc/call_accept.c||net/rxrpc/call_accept.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "net/rxrpc/call_accept.c||net/rxrpc/call_accept.c": [
          "File: net/rxrpc/call_accept.c -> net/rxrpc/call_accept.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "223:  tail = b->call_backlog_tail;",
          "224:  while (CIRC_CNT(head, tail, size) > 0) {",
          "225:   struct rxrpc_call *call = b->call_backlog[tail];",
          "226:   if (rx->discard_new_call) {",
          "227:    _debug(\"discard %lx\", call->user_call_ID);",
          "228:    rx->discard_new_call(call, call->user_call_ID);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:   call->socket = rx;",
          "",
          "---------------"
        ]
      }
    }
  ]
}