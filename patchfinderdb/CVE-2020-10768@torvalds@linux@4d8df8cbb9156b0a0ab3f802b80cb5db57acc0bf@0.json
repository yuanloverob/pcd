{
  "cve_id": "CVE-2020-10768",
  "cve_desc": "A flaw was found in the Linux Kernel before 5.8-rc1 in the prctl() function, where it can be used to enable indirect branch speculation after it has been disabled. This call incorrectly reports it as being 'force disabled' when it is not and opens the system to Spectre v2 attacks. The highest threat from this vulnerability is to confidentiality.",
  "repo": "torvalds/linux",
  "patch_hash": "4d8df8cbb9156b0a0ab3f802b80cb5db57acc0bf",
  "patch_info": {
    "commit_hash": "4d8df8cbb9156b0a0ab3f802b80cb5db57acc0bf",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/4d8df8cbb9156b0a0ab3f802b80cb5db57acc0bf",
    "files": [
      "arch/x86/kernel/cpu/bugs.c"
    ],
    "message": "x86/speculation: PR_SPEC_FORCE_DISABLE enforcement for indirect branches.\n\nCurrently, it is possible to enable indirect branch speculation even after\nit was force-disabled using the PR_SPEC_FORCE_DISABLE option. Moreover, the\nPR_GET_SPECULATION_CTRL command gives afterwards an incorrect result\n(force-disabled when it is in fact enabled). This also is inconsistent\nvs. STIBP and the documention which cleary states that\nPR_SPEC_FORCE_DISABLE cannot be undone.\n\nFix this by actually enforcing force-disabled indirect branch\nspeculation. PR_SPEC_ENABLE called after PR_SPEC_FORCE_DISABLE now fails\nwith -EPERM as described in the documentation.\n\nFixes: 9137bb27e60e (\"x86/speculation: Add prctl() control for indirect branch speculation\")\nSigned-off-by: Anthony Steinhauser <asteinhauser@google.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: stable@vger.kernel.org",
    "before_after_code_files": [
      "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
    ]
  },
  "patch_diff": {
    "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c": [
      "File: arch/x86/kernel/cpu/bugs.c -> arch/x86/kernel/cpu/bugs.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1175:    return 0;",
      "1180:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||",
      "1181:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||",
      "1183:    return -EPERM;",
      "1184:   task_clear_spec_ib_disable(task);",
      "1185:   task_update_spec_tif(task);",
      "",
      "[Removed Lines]",
      "1182:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED)",
      "",
      "[Added Lines]",
      "1184:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED ||",
      "1185:       task_spec_ib_force_disable(task))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "1978b3a53a74e3230cd46932b149c6e62e832e9a",
      "candidate_info": {
        "commit_hash": "1978b3a53a74e3230cd46932b149c6e62e832e9a",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/1978b3a53a74e3230cd46932b149c6e62e832e9a",
        "files": [
          "arch/x86/kernel/cpu/bugs.c"
        ],
        "message": "x86/speculation: Allow IBPB to be conditionally enabled on CPUs with always-on STIBP\n\nOn AMD CPUs which have the feature X86_FEATURE_AMD_STIBP_ALWAYS_ON,\nSTIBP is set to on and\n\n  spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED\n\nAt the same time, IBPB can be set to conditional.\n\nHowever, this leads to the case where it's impossible to turn on IBPB\nfor a process because in the PR_SPEC_DISABLE case in ib_prctl_set() the\n\n  spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED\n\ncondition leads to a return before the task flag is set. Similarly,\nib_prctl_get() will return PR_SPEC_DISABLE even though IBPB is set to\nconditional.\n\nMore generally, the following cases are possible:\n\n1. STIBP = conditional && IBPB = on for spectre_v2_user=seccomp,ibpb\n2. STIBP = on && IBPB = conditional for AMD CPUs with\n   X86_FEATURE_AMD_STIBP_ALWAYS_ON\n\nThe first case functions correctly today, but only because\nspectre_v2_user_ibpb isn't updated to reflect the IBPB mode.\n\nAt a high level, this change does one thing. If either STIBP or IBPB\nis set to conditional, allow the prctl to change the task flag.\nAlso, reflect that capability when querying the state. This isn't\nperfect since it doesn't take into account if only STIBP or IBPB is\nunconditionally on. But it allows the conditional feature to work as\nexpected, without affecting the unconditional one.\n\n [ bp: Massage commit message and comment; space out statements for\n   better readability. ]\n\nFixes: 21998a351512 (\"x86/speculation: Avoid force-disabling IBPB based on STIBP and enhanced IBRS.\")\nSigned-off-by: Anand K Mistry <amistry@google.com>\nSigned-off-by: Borislav Petkov <bp@suse.de>\nAcked-by: Thomas Gleixner <tglx@linutronix.de>\nAcked-by: Tom Lendacky <thomas.lendacky@amd.com>\nLink: https://lkml.kernel.org/r/20201105163246.v2.1.Ifd7243cd3e2c2206a893ad0a5b9a4f19549e22c6@changeid",
        "before_after_code_files": [
          "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ],
          "candidate": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c": [
          "File: arch/x86/kernel/cpu/bugs.c -> arch/x86/kernel/cpu/bugs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1254:  return 0;",
          "1255: }",
          "1257: static int ib_prctl_set(struct task_struct *task, unsigned long ctrl)",
          "1258: {",
          "1259:  switch (ctrl) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1257: static bool is_spec_ib_user_controlled(void)",
          "1258: {",
          "1259:  return spectre_v2_user_ibpb == SPECTRE_V2_USER_PRCTL ||",
          "1260:   spectre_v2_user_ibpb == SPECTRE_V2_USER_SECCOMP ||",
          "1261:   spectre_v2_user_stibp == SPECTRE_V2_USER_PRCTL ||",
          "1262:   spectre_v2_user_stibp == SPECTRE_V2_USER_SECCOMP;",
          "1263: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1261:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_NONE &&",
          "1262:       spectre_v2_user_stibp == SPECTRE_V2_USER_NONE)",
          "1263:    return 0;",
          "1272:       task_spec_ib_force_disable(task))",
          "1273:    return -EPERM;",
          "1274:   task_clear_spec_ib_disable(task);",
          "1275:   task_update_spec_tif(task);",
          "1276:   break;",
          "",
          "[Removed Lines]",
          "1269:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||",
          "1270:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||",
          "1271:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED ||",
          "",
          "[Added Lines]",
          "1288:   if (!is_spec_ib_user_controlled() ||",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1283:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_NONE &&",
          "1284:       spectre_v2_user_stibp == SPECTRE_V2_USER_NONE)",
          "1285:    return -EPERM;",
          "1289:    return 0;",
          "1290:   task_set_spec_ib_disable(task);",
          "1291:   if (ctrl == PR_SPEC_FORCE_DISABLE)",
          "1292:    task_set_spec_ib_force_disable(task);",
          "",
          "[Removed Lines]",
          "1286:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||",
          "1287:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||",
          "1288:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED)",
          "",
          "[Added Lines]",
          "1305:   if (!is_spec_ib_user_controlled())",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1351:  if (spectre_v2_user_ibpb == SPECTRE_V2_USER_NONE &&",
          "1352:      spectre_v2_user_stibp == SPECTRE_V2_USER_NONE)",
          "1353:   return PR_SPEC_ENABLE;",
          "1362:   if (task_spec_ib_force_disable(task))",
          "1363:    return PR_SPEC_PRCTL | PR_SPEC_FORCE_DISABLE;",
          "1364:   if (task_spec_ib_disable(task))",
          "1365:    return PR_SPEC_PRCTL | PR_SPEC_DISABLE;",
          "1366:   return PR_SPEC_PRCTL | PR_SPEC_ENABLE;",
          "1368:   return PR_SPEC_NOT_AFFECTED;",
          "1369: }",
          "",
          "[Removed Lines]",
          "1354:  else if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||",
          "1355:      spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||",
          "1356:      spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED)",
          "1357:   return PR_SPEC_DISABLE;",
          "1358:  else if (spectre_v2_user_ibpb == SPECTRE_V2_USER_PRCTL ||",
          "1359:      spectre_v2_user_ibpb == SPECTRE_V2_USER_SECCOMP ||",
          "1360:      spectre_v2_user_stibp == SPECTRE_V2_USER_PRCTL ||",
          "1361:      spectre_v2_user_stibp == SPECTRE_V2_USER_SECCOMP) {",
          "1367:  } else",
          "",
          "[Added Lines]",
          "1372:  else if (is_spec_ib_user_controlled()) {",
          "1378:  } else if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||",
          "1379:      spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||",
          "1380:      spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED)",
          "1381:   return PR_SPEC_DISABLE;",
          "1382:  else",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "21998a351512eba4ed5969006f0c55882d995ada",
      "candidate_info": {
        "commit_hash": "21998a351512eba4ed5969006f0c55882d995ada",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/21998a351512eba4ed5969006f0c55882d995ada",
        "files": [
          "arch/x86/kernel/cpu/bugs.c"
        ],
        "message": "x86/speculation: Avoid force-disabling IBPB based on STIBP and enhanced IBRS.\n\nWhen STIBP is unavailable or enhanced IBRS is available, Linux\nforce-disables the IBPB mitigation of Spectre-BTB even when simultaneous\nmultithreading is disabled. While attempts to enable IBPB using\nprctl(PR_SET_SPECULATION_CTRL, PR_SPEC_INDIRECT_BRANCH, ...) fail with\nEPERM, the seccomp syscall (or its prctl(PR_SET_SECCOMP, ...) equivalent)\nwhich are used e.g. by Chromium or OpenSSH succeed with no errors but the\napplication remains silently vulnerable to cross-process Spectre v2 attacks\n(classical BTB poisoning). At the same time the SYSFS reporting\n(/sys/devices/system/cpu/vulnerabilities/spectre_v2) displays that IBPB is\nconditionally enabled when in fact it is unconditionally disabled.\n\nSTIBP is useful only when SMT is enabled. When SMT is disabled and STIBP is\nunavailable, it makes no sense to force-disable also IBPB, because IBPB\nprotects against cross-process Spectre-BTB attacks regardless of the SMT\nstate. At the same time since missing STIBP was only observed on AMD CPUs,\nAMD does not recommend using STIBP, but recommends using IBPB, so disabling\nIBPB because of missing STIBP goes directly against AMD's advice:\nhttps://developer.amd.com/wp-content/resources/Architecture_Guidelines_Update_Indirect_Branch_Control.pdf\n\nSimilarly, enhanced IBRS is designed to protect cross-core BTB poisoning\nand BTB-poisoning attacks from user space against kernel (and\nBTB-poisoning attacks from guest against hypervisor), it is not designed\nto prevent cross-process (or cross-VM) BTB poisoning between processes (or\nVMs) running on the same core. Therefore, even with enhanced IBRS it is\nnecessary to flush the BTB during context-switches, so there is no reason\nto force disable IBPB when enhanced IBRS is available.\n\nEnable the prctl control of IBPB even when STIBP is unavailable or enhanced\nIBRS is available.\n\nFixes: 7cc765a67d8e (\"x86/speculation: Enable prctl mode for spectre_v2_user\")\nSigned-off-by: Anthony Steinhauser <asteinhauser@google.com>\nSigned-off-by: Thomas Gleixner <tglx@linutronix.de>\nCc: stable@vger.kernel.org",
        "before_after_code_files": [
          "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ],
          "candidate": [
            "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c"
          ]
        }
      },
      "candidate_diff": {
        "arch/x86/kernel/cpu/bugs.c||arch/x86/kernel/cpu/bugs.c": [
          "File: arch/x86/kernel/cpu/bugs.c -> arch/x86/kernel/cpu/bugs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "495: static enum spectre_v2_mitigation spectre_v2_enabled __ro_after_init =",
          "496:  SPECTRE_V2_NONE;",
          "499:  SPECTRE_V2_USER_NONE;",
          "501: #ifdef CONFIG_RETPOLINE",
          "",
          "[Removed Lines]",
          "498: static enum spectre_v2_user_mitigation spectre_v2_user __ro_after_init =",
          "",
          "[Added Lines]",
          "498: static enum spectre_v2_user_mitigation spectre_v2_user_stibp __ro_after_init =",
          "499:  SPECTRE_V2_USER_NONE;",
          "500: static enum spectre_v2_user_mitigation spectre_v2_user_ibpb __ro_after_init =",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "641:   break;",
          "642:  }",
          "654:  if (boot_cpu_has(X86_FEATURE_IBPB)) {",
          "655:   setup_force_cpu_cap(X86_FEATURE_USE_IBPB);",
          "",
          "[Removed Lines]",
          "649:  if (mode != SPECTRE_V2_USER_STRICT &&",
          "650:      boot_cpu_has(X86_FEATURE_AMD_STIBP_ALWAYS_ON))",
          "651:   mode = SPECTRE_V2_USER_STRICT_PREFERRED;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "672:   pr_info(\"mitigation: Enabling %s Indirect Branch Prediction Barrier\\n\",",
          "673:    static_key_enabled(&switch_mm_always_ibpb) ?",
          "674:    \"always-on\" : \"conditional\");",
          "675:  }",
          "679:   return;",
          "686:   mode = SPECTRE_V2_USER_NONE;",
          "687: set_mode:",
          "692: }",
          "694: static const char * const spectre_v2_strings[] = {",
          "",
          "[Removed Lines]",
          "678:  if (spectre_v2_enabled == SPECTRE_V2_IBRS_ENHANCED)",
          "685:  if (!smt_possible || !boot_cpu_has(X86_FEATURE_STIBP))",
          "688:  spectre_v2_user = mode;",
          "690:  if (smt_possible)",
          "691:   pr_info(\"%s\\n\", spectre_v2_user_strings[mode]);",
          "",
          "[Added Lines]",
          "669:   spectre_v2_user_ibpb = mode;",
          "676:  if (!smt_possible || spectre_v2_enabled == SPECTRE_V2_IBRS_ENHANCED)",
          "684:  if (mode != SPECTRE_V2_USER_STRICT &&",
          "685:      boot_cpu_has(X86_FEATURE_AMD_STIBP_ALWAYS_ON))",
          "686:   mode = SPECTRE_V2_USER_STRICT_PREFERRED;",
          "691:  if (!boot_cpu_has(X86_FEATURE_STIBP))",
          "694:  spectre_v2_user_stibp = mode;",
          "697:  pr_info(\"%s\\n\", spectre_v2_user_strings[mode]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "921: {",
          "922:  mutex_lock(&spec_ctrl_mutex);",
          "925:  case SPECTRE_V2_USER_NONE:",
          "926:   break;",
          "927:  case SPECTRE_V2_USER_STRICT:",
          "",
          "[Removed Lines]",
          "924:  switch (spectre_v2_user) {",
          "",
          "[Added Lines]",
          "930:  switch (spectre_v2_user_stibp) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1164: {",
          "1165:  switch (ctrl) {",
          "1166:  case PR_SPEC_ENABLE:",
          "1168:    return 0;",
          "1175:    return -EPERM;",
          "1176:   task_clear_spec_ib_disable(task);",
          "1177:   task_update_spec_tif(task);",
          "",
          "[Removed Lines]",
          "1167:   if (spectre_v2_user == SPECTRE_V2_USER_NONE)",
          "1173:   if (spectre_v2_user == SPECTRE_V2_USER_STRICT ||",
          "1174:       spectre_v2_user == SPECTRE_V2_USER_STRICT_PREFERRED)",
          "",
          "[Added Lines]",
          "1173:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_NONE &&",
          "1174:       spectre_v2_user_stibp == SPECTRE_V2_USER_NONE)",
          "1180:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||",
          "1181:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||",
          "1182:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1186:    return -EPERM;",
          "1189:    return 0;",
          "1190:   task_set_spec_ib_disable(task);",
          "1191:   if (ctrl == PR_SPEC_FORCE_DISABLE)",
          "",
          "[Removed Lines]",
          "1185:   if (spectre_v2_user == SPECTRE_V2_USER_NONE)",
          "1187:   if (spectre_v2_user == SPECTRE_V2_USER_STRICT ||",
          "1188:       spectre_v2_user == SPECTRE_V2_USER_STRICT_PREFERRED)",
          "",
          "[Added Lines]",
          "1193:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_NONE &&",
          "1194:       spectre_v2_user_stibp == SPECTRE_V2_USER_NONE)",
          "1196:   if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||",
          "1197:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||",
          "1198:       spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1216: {",
          "1217:  if (ssb_mode == SPEC_STORE_BYPASS_SECCOMP)",
          "1218:   ssb_prctl_set(task, PR_SPEC_FORCE_DISABLE);",
          "1220:   ib_prctl_set(task, PR_SPEC_FORCE_DISABLE);",
          "1221: }",
          "1222: #endif",
          "",
          "[Removed Lines]",
          "1219:  if (spectre_v2_user == SPECTRE_V2_USER_SECCOMP)",
          "",
          "[Added Lines]",
          "1229:  if (spectre_v2_user_ibpb == SPECTRE_V2_USER_SECCOMP ||",
          "1230:      spectre_v2_user_stibp == SPECTRE_V2_USER_SECCOMP)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1247:  if (!boot_cpu_has_bug(X86_BUG_SPECTRE_V2))",
          "1248:   return PR_SPEC_NOT_AFFECTED;",
          "1252:   return PR_SPEC_ENABLE;",
          "1255:   if (task_spec_ib_force_disable(task))",
          "1256:    return PR_SPEC_PRCTL | PR_SPEC_FORCE_DISABLE;",
          "1257:   if (task_spec_ib_disable(task))",
          "1258:    return PR_SPEC_PRCTL | PR_SPEC_DISABLE;",
          "1259:   return PR_SPEC_PRCTL | PR_SPEC_ENABLE;",
          "1264:   return PR_SPEC_NOT_AFFECTED;",
          "1266: }",
          "1268: int arch_prctl_spec_ctrl_get(struct task_struct *task, unsigned long which)",
          "",
          "[Removed Lines]",
          "1250:  switch (spectre_v2_user) {",
          "1251:  case SPECTRE_V2_USER_NONE:",
          "1253:  case SPECTRE_V2_USER_PRCTL:",
          "1254:  case SPECTRE_V2_USER_SECCOMP:",
          "1260:  case SPECTRE_V2_USER_STRICT:",
          "1261:  case SPECTRE_V2_USER_STRICT_PREFERRED:",
          "1262:   return PR_SPEC_DISABLE;",
          "1263:  default:",
          "1265:  }",
          "",
          "[Added Lines]",
          "1261:  if (spectre_v2_user_ibpb == SPECTRE_V2_USER_NONE &&",
          "1262:      spectre_v2_user_stibp == SPECTRE_V2_USER_NONE)",
          "1264:  else if (spectre_v2_user_ibpb == SPECTRE_V2_USER_STRICT ||",
          "1265:      spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT ||",
          "1266:      spectre_v2_user_stibp == SPECTRE_V2_USER_STRICT_PREFERRED)",
          "1267:   return PR_SPEC_DISABLE;",
          "1268:  else if (spectre_v2_user_ibpb == SPECTRE_V2_USER_PRCTL ||",
          "1269:      spectre_v2_user_ibpb == SPECTRE_V2_USER_SECCOMP ||",
          "1270:      spectre_v2_user_stibp == SPECTRE_V2_USER_PRCTL ||",
          "1271:      spectre_v2_user_stibp == SPECTRE_V2_USER_SECCOMP) {",
          "1277:  } else",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1501:  if (spectre_v2_enabled == SPECTRE_V2_IBRS_ENHANCED)",
          "1502:   return \"\";",
          "1505:  case SPECTRE_V2_USER_NONE:",
          "1506:   return \", STIBP: disabled\";",
          "1507:  case SPECTRE_V2_USER_STRICT:",
          "",
          "[Removed Lines]",
          "1504:  switch (spectre_v2_user) {",
          "",
          "[Added Lines]",
          "1517:  switch (spectre_v2_user_stibp) {",
          "",
          "---------------"
        ]
      }
    }
  ]
}