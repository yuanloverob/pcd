{
  "cve_id": "CVE-2021-36084",
  "cve_desc": "The CIL compiler in SELinux 3.2 has a use-after-free in __cil_verify_classperms (called from __cil_verify_classpermission and __cil_pre_verify_helper).",
  "repo": "SELinuxProject/selinux",
  "patch_hash": "f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
  "patch_info": {
    "commit_hash": "f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
    "repo": "SELinuxProject/selinux",
    "commit_url": "https://github.com/SELinuxProject/selinux/commit/f34d3d30c8325e4847a6b696fe7a3936a8a361f3",
    "files": [
      "libsepol/cil/src/cil_reset_ast.c"
    ],
    "message": "libsepol/cil: Destroy classperms list when resetting classpermission\n\nNicolas Iooss reports:\n  A few months ago, OSS-Fuzz found a crash in the CIL compiler, which\n  got reported as\n  https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28648 (the title\n  is misleading, or is caused by another issue that conflicts with the\n  one I report in this message). Here is a minimized CIL policy which\n  reproduces the issue:\n\n  (class CLASS (PERM))\n  (classorder (CLASS))\n  (sid SID)\n  (sidorder (SID))\n  (user USER)\n  (role ROLE)\n  (type TYPE)\n  (category CAT)\n  (categoryorder (CAT))\n  (sensitivity SENS)\n  (sensitivityorder (SENS))\n  (sensitivitycategory SENS (CAT))\n  (allow TYPE self (CLASS (PERM)))\n  (roletype ROLE TYPE)\n  (userrole USER ROLE)\n  (userlevel USER (SENS))\n  (userrange USER ((SENS)(SENS (CAT))))\n  (sidcontext SID (USER ROLE TYPE ((SENS)(SENS))))\n\n  (classpermission CLAPERM)\n\n  (optional OPT\n      (roletype nonexistingrole nonexistingtype)\n      (classpermissionset CLAPERM (CLASS (PERM)))\n  )\n\n  The CIL policy fuzzer (which mimics secilc built with clang Address\n  Sanitizer) reports:\n\n  ==36541==ERROR: AddressSanitizer: heap-use-after-free on address\n  0x603000004f98 at pc 0x56445134c842 bp 0x7ffe2a256590 sp\n  0x7ffe2a256588\n  READ of size 8 at 0x603000004f98 thread T0\n      #0 0x56445134c841 in __cil_verify_classperms\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1620:8\n      #1 0x56445134a43e in __cil_verify_classpermission\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1650:9\n      #2 0x56445134a43e in __cil_pre_verify_helper\n  /selinux/libsepol/src/../cil/src/cil_verify.c:1715:8\n      #3 0x5644513225ac in cil_tree_walk_core\n  /selinux/libsepol/src/../cil/src/cil_tree.c:272:9\n      #4 0x564451322ab1 in cil_tree_walk\n  /selinux/libsepol/src/../cil/src/cil_tree.c:316:7\n      #5 0x5644513226af in cil_tree_walk_core\n  /selinux/libsepol/src/../cil/src/cil_tree.c:284:9\n      #6 0x564451322ab1 in cil_tree_walk\n  /selinux/libsepol/src/../cil/src/cil_tree.c:316:7\n      #7 0x5644512b88fd in cil_pre_verify\n  /selinux/libsepol/src/../cil/src/cil_post.c:2510:7\n      #8 0x5644512b88fd in cil_post_process\n  /selinux/libsepol/src/../cil/src/cil_post.c:2524:7\n      #9 0x5644511856ff in cil_compile\n  /selinux/libsepol/src/../cil/src/cil.c:564:7\n\nThe classperms list of a classpermission rule is created and filled\nin when classpermissionset rules are processed, so it doesn't own any\npart of the list and shouldn't retain any of it when it is reset.\n\nDestroy the classperms list (without destroying the data in it)  when\nresetting a classpermission rule.\n\nReported-by: Nicolas Iooss <nicolas.iooss@m4x.org>\nSigned-off-by: James Carter <jwcart2@gmail.com>",
    "before_after_code_files": [
      "libsepol/cil/src/cil_reset_ast.c||libsepol/cil/src/cil_reset_ast.c"
    ]
  },
  "patch_diff": {
    "libsepol/cil/src/cil_reset_ast.c||libsepol/cil/src/cil_reset_ast.c": [
      "File: libsepol/cil/src/cil_reset_ast.c -> libsepol/cil/src/cil_reset_ast.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:   return;",
      "55:  }",
      "58: }",
      "60: static void cil_reset_classperms_set(struct cil_classperms_set *cp_set)",
      "",
      "[Removed Lines]",
      "57:  cil_reset_classperms_list(cp->classperms);",
      "",
      "[Added Lines]",
      "57:  cil_list_destroy(&cp->classperms, CIL_FALSE);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6b5610585845d64bd9878616d984885bbd08cdbe",
      "candidate_info": {
        "commit_hash": "6b5610585845d64bd9878616d984885bbd08cdbe",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/6b5610585845d64bd9878616d984885bbd08cdbe",
        "files": [
          "libsepol/cil/src/cil_resolve_ast.c"
        ],
        "message": "libsepol/cil: fix NULL pointer dereference with empty macro argument\n\nOSS-Fuzz found a Null-dereference READ in the CIL compiler when trying\nto compile the following policy:\n\n    (macro m((name n))) (call m(()))\n\nWhen calling the macro, the name (in variable \"pc\") is NULL, which\ntriggers a NULL pointer dereference when using it as a key in\n__cil_insert_name(). The stack trace is:\n\n    #0 0x7f4662655a85 in __strlen_avx2 (/usr/lib/libc.so.6+0x162a85)\n    #1 0x556d0b6d150c in __interceptor_strlen.part.0 (/selinux/libsepol/fuzz/fuzz-secilc+0x44850c)\n    #2 0x556d0ba74ed6 in symhash /selinux/libsepol/src/symtab.c:22:9\n    #3 0x556d0b9ef50d in hashtab_search /selinux/libsepol/src/hashtab.c:186:11\n    #4 0x556d0b928e1f in cil_symtab_get_datum /selinux/libsepol/src/../cil/src/cil_symtab.c:121:37\n    #5 0x556d0b8f28f4 in __cil_insert_name /selinux/libsepol/src/../cil/src/cil_resolve_ast.c:96:2\n    #6 0x556d0b908184 in cil_resolve_call1 /selinux/libsepol/src/../cil/src/cil_resolve_ast.c:2835:12\n    #7 0x556d0b91b404 in __cil_resolve_ast_node /selinux/libsepol/src/../cil/src/cil_resolve_ast.c\n    #8 0x556d0b91380f in __cil_resolve_ast_node_helper /selinux/libsepol/src/../cil/src/cil_resolve_ast.c:3773:7\n    #9 0x556d0b932230 in cil_tree_walk_core /selinux/libsepol/src/../cil/src/cil_tree.c:263:9\n    #10 0x556d0b932230 in cil_tree_walk /selinux/libsepol/src/../cil/src/cil_tree.c:307:7\n    #11 0x556d0b932326 in cil_tree_walk_core /selinux/libsepol/src/../cil/src/cil_tree.c:275:9\n    #12 0x556d0b932326 in cil_tree_walk /selinux/libsepol/src/../cil/src/cil_tree.c:307:7\n    #13 0x556d0b911189 in cil_resolve_ast /selinux/libsepol/src/../cil/src/cil_resolve_ast.c:3941:8\n    #14 0x556d0b798729 in cil_compile /selinux/libsepol/src/../cil/src/cil.c:550:7\n\nFixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=28544\nSigned-off-by: Nicolas Iooss <nicolas.iooss@m4x.org>",
        "before_after_code_files": [
          "libsepol/cil/src/cil_resolve_ast.c||libsepol/cil/src/cil_resolve_ast.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/cil/src/cil_resolve_ast.c||libsepol/cil/src/cil_resolve_ast.c": [
          "File: libsepol/cil/src/cil_resolve_ast.c -> libsepol/cil/src/cil_resolve_ast.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2828:    switch (flavor) {",
          "2829:    case CIL_NAME: {",
          "2830:     struct cil_name *name;",
          "2831:     name = __cil_insert_name(args->db, pc->data, current);",
          "2832:     if (name != NULL) {",
          "2833:      new_arg->arg = (struct cil_symtab_datum *)name;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2831:     if (pc->data == NULL) {",
          "2832:      cil_tree_log(current, CIL_ERR, \"Invalid macro parameter\");",
          "2833:      cil_destroy_args(new_arg);",
          "2834:      rc = SEPOL_ERR;",
          "2835:      goto exit;",
          "2836:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2837:    }",
          "2838:     break;",
          "2839:    case CIL_TYPE:",
          "2840:     new_arg->arg_str = pc->data;",
          "2841:     break;",
          "2842:    case CIL_ROLE:",
          "2843:     new_arg->arg_str = pc->data;",
          "2844:     break;",
          "2845:    case CIL_USER:",
          "2846:     new_arg->arg_str = pc->data;",
          "2847:     break;",
          "2848:    case CIL_SENS:",
          "2849:     new_arg->arg_str = pc->data;",
          "2850:     break;",
          "2851:    case CIL_CAT:",
          "2852:     new_arg->arg_str = pc->data;",
          "2853:     break;",
          "2854:    case CIL_BOOL:",
          "2855:     new_arg->arg_str = pc->data;",
          "2856:     break;",
          "2857:    case CIL_CATSET: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2846:     if (pc->data == NULL) {",
          "2847:      cil_tree_log(current, CIL_ERR, \"Invalid macro parameter\");",
          "2848:      cil_destroy_args(new_arg);",
          "2849:      rc = SEPOL_ERR;",
          "2850:      goto exit;",
          "2851:     }",
          "2855:     if (pc->data == NULL) {",
          "2856:      cil_tree_log(current, CIL_ERR, \"Invalid macro parameter\");",
          "2857:      cil_destroy_args(new_arg);",
          "2858:      rc = SEPOL_ERR;",
          "2859:      goto exit;",
          "2860:     }",
          "2864:     if (pc->data == NULL) {",
          "2865:      cil_tree_log(current, CIL_ERR, \"Invalid macro parameter\");",
          "2866:      cil_destroy_args(new_arg);",
          "2867:      rc = SEPOL_ERR;",
          "2868:      goto exit;",
          "2869:     }",
          "2873:     if (pc->data == NULL) {",
          "2874:      cil_tree_log(current, CIL_ERR, \"Invalid macro parameter\");",
          "2875:      cil_destroy_args(new_arg);",
          "2876:      rc = SEPOL_ERR;",
          "2877:      goto exit;",
          "2878:     }",
          "2882:     if (pc->data == NULL) {",
          "2883:      cil_tree_log(current, CIL_ERR, \"Invalid macro parameter\");",
          "2884:      cil_destroy_args(new_arg);",
          "2885:      rc = SEPOL_ERR;",
          "2886:      goto exit;",
          "2887:     }",
          "2891:     if (pc->data == NULL) {",
          "2892:      cil_tree_log(current, CIL_ERR, \"Invalid macro parameter\");",
          "2893:      cil_destroy_args(new_arg);",
          "2894:      rc = SEPOL_ERR;",
          "2895:      goto exit;",
          "2896:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2871:      cil_list_append(((struct cil_symtab_datum*)catset)->nodes,",
          "2872:          CIL_LIST_ITEM, cat_node);",
          "2873:      new_arg->arg = (struct cil_symtab_datum*)catset;",
          "2874:     } else {",
          "2875:      new_arg->arg_str = pc->data;",
          "2876:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2916:     } else if (pc->data == NULL) {",
          "2917:      cil_tree_log(current, CIL_ERR, \"Invalid macro parameter\");",
          "2918:      cil_destroy_args(new_arg);",
          "2919:      rc = SEPOL_ERR;",
          "2920:      goto exit;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2896:      cil_list_append(((struct cil_symtab_datum*)level)->nodes,",
          "2897:          CIL_LIST_ITEM, lvl_node);",
          "2898:      new_arg->arg = (struct cil_symtab_datum*)level;",
          "2899:     } else {",
          "2900:      new_arg->arg_str = pc->data;",
          "2901:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2946:     } else if (pc->data == NULL) {",
          "2947:      cil_tree_log(current, CIL_ERR, \"Invalid macro parameter\");",
          "2948:      cil_destroy_args(new_arg);",
          "2949:      rc = SEPOL_ERR;",
          "2950:      goto exit;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2921:      cil_list_append(((struct cil_symtab_datum*)range)->nodes,",
          "2922:          CIL_LIST_ITEM, range_node);",
          "2923:      new_arg->arg = (struct cil_symtab_datum*)range;",
          "2924:     } else {",
          "2925:      new_arg->arg_str = pc->data;",
          "2926:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2976:     } else if (pc->data == NULL) {",
          "2977:      cil_tree_log(current, CIL_ERR, \"Invalid macro parameter\");",
          "2978:      cil_destroy_args(new_arg);",
          "2979:      rc = SEPOL_ERR;",
          "2980:      goto exit;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2946:      cil_list_append(((struct cil_symtab_datum*)ipaddr)->nodes,",
          "2947:          CIL_LIST_ITEM, addr_node);",
          "2948:      new_arg->arg = (struct cil_symtab_datum*)ipaddr;",
          "2949:     } else {",
          "2950:      new_arg->arg_str = pc->data;",
          "2951:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3006:     } else if (pc->data == NULL) {",
          "3007:      cil_tree_log(current, CIL_ERR, \"Invalid macro parameter\");",
          "3008:      cil_destroy_args(new_arg);",
          "3009:      rc = SEPOL_ERR;",
          "3010:      goto exit;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2953:     break;",
          "2954:    }",
          "2955:    case CIL_CLASS:",
          "2956:     new_arg->arg_str = pc->data;",
          "2957:     break;",
          "2958:    case CIL_MAP_CLASS:",
          "2959:     new_arg->arg_str = pc->data;",
          "2960:     break;",
          "2961:    case CIL_CLASSPERMISSION: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3018:     if (pc->data == NULL) {",
          "3019:      cil_tree_log(current, CIL_ERR, \"Invalid macro parameter\");",
          "3020:      cil_destroy_args(new_arg);",
          "3021:      rc = SEPOL_ERR;",
          "3022:      goto exit;",
          "3023:     }",
          "3027:     if (pc->data == NULL) {",
          "3028:      cil_tree_log(current, CIL_ERR, \"Invalid macro parameter\");",
          "3029:      cil_destroy_args(new_arg);",
          "3030:      rc = SEPOL_ERR;",
          "3031:      goto exit;",
          "3032:     }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2976:      cp_node->data = cp;",
          "2977:      cil_list_append(cp->datum.nodes, CIL_LIST_ITEM, cp_node);",
          "2978:      new_arg->arg = (struct cil_symtab_datum*)cp;",
          "2979:     } else {",
          "2980:      new_arg->arg_str = pc->data;",
          "2981:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3053:     } else if (pc->data == NULL) {",
          "3054:      cil_tree_log(current, CIL_ERR, \"Invalid macro parameter\");",
          "3055:      cil_destroy_args(new_arg);",
          "3056:      rc = SEPOL_ERR;",
          "3057:      goto exit;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b76eda527fcb0f878ab2d9a9fa7cf94a09be347f",
      "candidate_info": {
        "commit_hash": "b76eda527fcb0f878ab2d9a9fa7cf94a09be347f",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/b76eda527fcb0f878ab2d9a9fa7cf94a09be347f",
        "files": [
          "libsepol/src/kernel_to_cil.c",
          "libsepol/src/kernel_to_conf.c"
        ],
        "message": "libsepol: do not crash on class gaps\n\nHandle gaps in the class table while printing a policy configuration.\n\n    ==21763==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000028 (pc 0x00000055b696 bp 0x7ffe69e8ab50 sp 0x7ffe69e8aa60 T0)\n    ==21763==The signal is caused by a READ memory access.\n    ==21763==Hint: address points to the zero page.\n        #0 0x55b696 in constraint_rules_to_strs ./libsepol/src/kernel_to_conf.c:361:14\n        #1 0x55ac80 in sepol_kernel_policydb_to_conf ./libsepol/src/kernel_to_conf.c:3063:7\n        #2 0x55a34f in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:38:9\n        #3 0x45aed3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n        #4 0x446a12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n        #5 0x44c93b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n        #6 0x475dd2 in main (./out/binpolicy-fuzzer+0x475dd2)\n        #7 0x7fc60d39e7ec in __libc_start_main csu/../csu/libc-start.c:332:16\n        #8 0x423689 in _start (./out/binpolicy-fuzzer+0x423689)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/kernel_to_cil.c||libsepol/src/kernel_to_cil.c",
          "libsepol/src/kernel_to_conf.c||libsepol/src/kernel_to_conf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/kernel_to_cil.c||libsepol/src/kernel_to_cil.c": [
          "File: libsepol/src/kernel_to_cil.c -> libsepol/src/kernel_to_cil.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "359:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "360:   class = pdb->class_val_to_struct[i];",
          "361:   if (class->constraints) {",
          "362:    name = pdb->p_class_val_to_name[i];",
          "363:    rc = class_constraint_rules_to_strs(pdb, name, class, class->constraints, mls_strs, non_mls_strs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "361:   if (!class) continue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "384:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "385:   class = pdb->class_val_to_struct[i];",
          "386:   if (class->validatetrans) {",
          "387:    name = pdb->p_class_val_to_name[i];",
          "388:    rc = class_validatetrans_rules_to_strs(pdb, name, class->validatetrans, mls_strs, non_mls_strs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "387:   if (!class) continue;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "462:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "463:   class = pdb->class_val_to_struct[i];",
          "464:   name = pdb->p_class_val_to_name[i];",
          "465:   perms = class_or_common_perms_to_str(&class->permissions);",
          "466:   if (perms) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:   if (!class) continue;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "489:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "490:   class = pdb->class_val_to_struct[i];",
          "491:   name = pdb->p_class_val_to_name[i];",
          "492:   if (class->comkey != NULL) {",
          "493:    sepol_printf(out, \"(classcommon %s %s)\\n\", name, class->comkey);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "494:   if (!class) continue;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "503:  }",
          "504:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "505:   class = pdb->class_val_to_struct[i];",
          "506:   name = class->comkey;",
          "507:   if (name != NULL) {",
          "508:    common = hashtab_search(pdb->p_commons.table, name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "510:   if (!class) continue;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "728:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "729:   class = pdb->class_val_to_struct[i];",
          "730:   if (class->default_user != 0) {",
          "731:    rc = write_default_user_to_cil(out, pdb->p_class_val_to_name[i], class);",
          "732:    if (rc != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "735:   if (!class) continue;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "739:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "740:   class = pdb->class_val_to_struct[i];",
          "741:   if (class->default_role != 0) {",
          "742:    rc = write_default_role_to_cil(out, pdb->p_class_val_to_name[i], class);",
          "743:    if (rc != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "747:   if (!class) continue;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "750:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "751:   class = pdb->class_val_to_struct[i];",
          "752:   if (class->default_type != 0) {",
          "753:    rc = write_default_type_to_cil(out, pdb->p_class_val_to_name[i], class);",
          "754:    if (rc != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "759:   if (!class) continue;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "765:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "766:   class = pdb->class_val_to_struct[i];",
          "767:   if (class->default_range) {",
          "768:    rc = write_default_range_to_cil(out, pdb->p_class_val_to_name[i], class);",
          "769:    if (rc != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "775:   if (!class) continue;",
          "",
          "---------------"
        ],
        "libsepol/src/kernel_to_conf.c||libsepol/src/kernel_to_conf.c": [
          "File: libsepol/src/kernel_to_conf.c -> libsepol/src/kernel_to_conf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "363:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "364:   class = pdb->class_val_to_struct[i];",
          "366:    name = pdb->p_class_val_to_name[i];",
          "367:    rc = class_constraint_rules_to_strs(pdb, name, class, class->constraints, mls_strs, non_mls_strs);",
          "368:    if (rc != 0) {",
          "",
          "[Removed Lines]",
          "365:   if (class->constraints) {",
          "",
          "[Added Lines]",
          "365:   if (class && class->constraints) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "388:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "389:   class = pdb->class_val_to_struct[i];",
          "391:    name = pdb->p_class_val_to_name[i];",
          "392:    rc = class_validatetrans_rules_to_strs(pdb, name, class->validatetrans, mls_strs, non_mls_strs);",
          "393:    if (rc != 0) {",
          "",
          "[Removed Lines]",
          "390:   if (class->validatetrans) {",
          "",
          "[Added Lines]",
          "390:   if (class && class->validatetrans) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "555:  }",
          "556:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "557:   class = pdb->class_val_to_struct[i];",
          "558:   name = class->comkey;",
          "559:   if (!name) continue;",
          "560:   common = hashtab_search(pdb->p_commons.table, name);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "558:   if (!class) continue;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "582:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "583:   class = pdb->class_val_to_struct[i];",
          "584:   name = pdb->p_class_val_to_name[i];",
          "585:   sepol_printf(out, \"class %s\", name);",
          "586:   if (class->comkey) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "585:   if (!class) continue;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "707:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "708:   class = pdb->class_val_to_struct[i];",
          "709:   if (class->default_user != 0) {",
          "710:    rc = write_default_user_to_conf(out, pdb->p_class_val_to_name[i], class);",
          "711:    if (rc != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "711:   if (!class) continue;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "718:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "719:   class = pdb->class_val_to_struct[i];",
          "720:   if (class->default_role != 0) {",
          "721:    rc = write_default_role_to_conf(out, pdb->p_class_val_to_name[i], class);",
          "722:    if (rc != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "723:   if (!class) continue;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "729:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "730:   class = pdb->class_val_to_struct[i];",
          "731:   if (class->default_type != 0) {",
          "732:    rc = write_default_type_to_conf(out, pdb->p_class_val_to_name[i], class);",
          "733:    if (rc != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "735:   if (!class) continue;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "744:  for (i=0; i < pdb->p_classes.nprim; i++) {",
          "745:   class = pdb->class_val_to_struct[i];",
          "746:   if (class->default_range != 0) {",
          "747:    rc = write_default_range_to_conf(out, pdb->p_class_val_to_name[i], class);",
          "748:    if (rc != 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "751:   if (!class) continue;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "51394330563f542679e2842d8849ef9bd41708db",
      "candidate_info": {
        "commit_hash": "51394330563f542679e2842d8849ef9bd41708db",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/51394330563f542679e2842d8849ef9bd41708db",
        "files": [
          "libsepol/src/private.h"
        ],
        "message": "libsepol/fuzz: limit element sizes for fuzzing\n\nLimit the maximum length of read sizes, like string length of module\nversion and name or keys and number of symtab entries.  This avoids the\nfuzzer to report oom events for huge allocations (it also improves the\nnumber of executions per seconds of the fuzzer).\n\nThis change only affects the fuzzer build.\n\n    ==15211== ERROR: libFuzzer: out-of-memory (malloc(3115956666))\n       To change the out-of-memory limit use -rss_limit_mb=<N>\n\n        #0 0x52dc61 in __sanitizer_print_stack_trace (./out/binpolicy-fuzzer+0x52dc61)\n        #1 0x475618 in fuzzer::PrintStackTrace() fuzzer.o\n        #2 0x458855 in fuzzer::Fuzzer::HandleMalloc(unsigned long) fuzzer.o\n        #3 0x45876a in fuzzer::MallocHook(void const volatile*, unsigned long) fuzzer.o\n        #4 0x534557 in __sanitizer::RunMallocHooks(void const*, unsigned long) (./out/binpolicy-fuzzer+0x534557)\n        #5 0x4aa7d7 in __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool) (./out/binpolicy-fuzzer+0x4aa7d7)\n        #6 0x4aa143 in __asan::asan_malloc(unsigned long, __sanitizer::BufferedStackTrace*) (./out/binpolicy-fuzzer+0x4aa143)\n        #7 0x5259cb in malloc (./out/binpolicy-fuzzer+0x5259cb)\n        #8 0x59d307 in str_read ./libsepol/src/services.c:1746:8\n        #9 0x585b97 in perm_read ./libsepol/src/policydb.c:2063:5\n        #10 0x581f8a in common_read ./libsepol/src/policydb.c:2119:7\n        #11 0x576681 in policydb_read ./libsepol/src/policydb.c:4417:8\n        #12 0x55a214 in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:26:6\n        #13 0x45aed3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n        #14 0x446a12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n        #15 0x44c93b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n        #16 0x475dd2 in main (./out/binpolicy-fuzzer+0x475dd2)\n        #17 0x7fe1ec88a7ec in __libc_start_main csu/../csu/libc-start.c:332:16\n        #18 0x423689 in _start (./out/binpolicy-fuzzer+0x423689)\n\n    ==12683== ERROR: libFuzzer: out-of-memory (malloc(2526451450))\n       To change the out-of-memory limit use -rss_limit_mb=<N>\n\n        #0 0x52dc61 in __sanitizer_print_stack_trace (./out/binpolicy-fuzzer+0x52dc61)\n        #1 0x475618 in fuzzer::PrintStackTrace() fuzzer.o\n        #2 0x458855 in fuzzer::Fuzzer::HandleMalloc(unsigned long) fuzzer.o\n        #3 0x45876a in fuzzer::MallocHook(void const volatile*, unsigned long) fuzzer.o\n        #4 0x534557 in __sanitizer::RunMallocHooks(void const*, unsigned long) (./out/binpolicy-fuzzer+0x534557)\n        #5 0x4aa7d7 in __asan::Allocator::Allocate(unsigned long, unsigned long, __sanitizer::BufferedStackTrace*, __asan::AllocType, bool) (./out/binpolicy-fuzzer+0x4aa7d7)\n        #6 0x4aa143 in __asan::asan_malloc(unsigned long, __sanitizer::BufferedStackTrace*) (./out/binpolicy-fuzzer+0x4aa143)\n        #7 0x5259cb in malloc (./out/binpolicy-fuzzer+0x5259cb)\n        #8 0x575f8a in policydb_read ./libsepol/src/policydb.c:4356:18\n        #9 0x55a214 in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:26:6\n        #10 0x45aed3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n        #11 0x446a12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n        #12 0x44c93b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n        #13 0x475dd2 in main (./out/binpolicy-fuzzer+0x475dd2)\n        #14 0x7fa737b377ec in __libc_start_main csu/../csu/libc-start.c:332:16\n        #15 0x423689 in _start (./out/binpolicy-fuzzer+0x423689)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/private.h||libsepol/src/private.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/private.h||libsepol/src/private.h": [
          "File: libsepol/src/private.h -> libsepol/src/private.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: #define ARRAY_SIZE(x) (sizeof(x)/sizeof((x)[0]))",
          "48: #define zero_or_saturated(x) ((x == 0) || is_saturated(x))",
          "50: #define spaceship_cmp(a, b) (((a) > (b)) - ((a) < (b)))",
          "",
          "[Removed Lines]",
          "47: #define is_saturated(x) (x == (typeof(x))-1)",
          "",
          "[Added Lines]",
          "47: #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION",
          "48: # define is_saturated(x) (x == (typeof(x))-1 || (x) > (1U << 16))",
          "49: #else",
          "50: # define is_saturated(x) (x == (typeof(x))-1)",
          "51: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "58443a00db3d9df150667cc48ccdd599549025c6",
      "candidate_info": {
        "commit_hash": "58443a00db3d9df150667cc48ccdd599549025c6",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/58443a00db3d9df150667cc48ccdd599549025c6",
        "files": [
          "libsepol/src/kernel_to_common.c"
        ],
        "message": "libsepol: do not add gaps to string list\n\nWhen converting an ebitmap into a string list, skip potential gaps in\nebitmap_to_strs(). All converting functions like strs_to_str(),\nstrs_write_each() and strs_write_each_indented() do already skip NULL\nelements, but sorting such a list will lead to a NULL dereference.\n\n    #0 0x432ce5 in strcmp /src/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:462:25\n    #1 0x4f4893 in strs_cmp selinux/libsepol/src/kernel_to_common.c:258:9\n    #2 0x47b74b in qsort_r /src/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:9994:7\n    #3 0x4f481d in strs_sort selinux/libsepol/src/kernel_to_common.c:266:2\n    #4 0x4fe781 in attrmap_to_str selinux/libsepol/src/kernel_to_conf.c:1560:2\n    #5 0x4fe781 in write_type_attribute_sets_to_conf selinux/libsepol/src/kernel_to_conf.c:1599:11\n    #6 0x4f8098 in sepol_kernel_policydb_to_conf selinux/libsepol/src/kernel_to_conf.c:3182:7\n    #7 0x4e0277 in LLVMFuzzerTestOneInput selinux/libsepol/fuzz/binpolicy-fuzzer.c:50:9\n    #8 0x4d613b in main\n    #9 0x7fa2d50260b2 in __libc_start_main /build/glibc-eX1tMB/glibc-2.31/csu/libc-start.c:308:16\n    #10 0x41d4ed in _start\n\nFound by oss-fuzz (#44170)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/kernel_to_common.c||libsepol/src/kernel_to_common.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/kernel_to_common.c||libsepol/src/kernel_to_common.c": [
          "File: libsepol/src/kernel_to_common.c -> libsepol/src/kernel_to_common.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "366:  int rc;",
          "368:  ebitmap_for_each_positive_bit(map, node, i) {",
          "369:   rc = strs_add(strs, val_to_name[i]);",
          "370:   if (rc != 0) {",
          "371:    return -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "369:   if (!val_to_name[i])",
          "370:    continue;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8628133757c2100118ef5bd2f135eb1bc4a6f33c",
      "candidate_info": {
        "commit_hash": "8628133757c2100118ef5bd2f135eb1bc4a6f33c",
        "repo": "SELinuxProject/selinux",
        "commit_url": "https://github.com/SELinuxProject/selinux/commit/8628133757c2100118ef5bd2f135eb1bc4a6f33c",
        "files": [
          "libsepol/src/policydb_validate.c"
        ],
        "message": "libsepol: validate ocontexts\n\nCheck the literal contexts in ocontext statements are defined.\n\n    ==91274==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7f60b0afe8c6 bp 0x7ffd42edc990 sp 0x7ffd42edc148 T0)\n    ==91274==The signal is caused by a READ memory access.\n    ==91274==Hint: address points to the zero page.\n        #0 0x7f60b0afe8c6  string/../sysdeps/x86_64/multiarch/../strlen.S:120\n        #1 0x4bd128 in __interceptor_strlen (./out/binpolicy-fuzzer+0x4bd128)\n        #2 0x5eb387 in create_str_helper ./libsepol/src/kernel_to_common.c:69:10\n        #3 0x5eb11e in create_str ./libsepol/src/kernel_to_common.c:99:8\n        #4 0x56ad7b in context_to_str ./libsepol/src/kernel_to_conf.c:2408:9\n        #5 0x56a717 in write_sid_context_rules_to_conf ./libsepol/src/kernel_to_conf.c:2441:9\n        #6 0x55b26c in write_selinux_isid_rules_to_conf ./libsepol/src/kernel_to_conf.c:2476:9\n        #7 0x55b26c in sepol_kernel_policydb_to_conf ./libsepol/src/kernel_to_conf.c:3206:8\n        #8 0x55a34f in LLVMFuzzerTestOneInput ./libsepol/fuzz/binpolicy-fuzzer.c:38:9\n        #9 0x45aed3 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) fuzzer.o\n        #10 0x446a12 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) fuzzer.o\n        #11 0x44c93b in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) fuzzer.o\n        #12 0x475dd2 in main (./out/binpolicy-fuzzer+0x475dd2)\n        #13 0x7f60b0a887ec in __libc_start_main csu/../csu/libc-start.c:332:16\n        #14 0x423689 in _start (./out/binpolicy-fuzzer+0x423689)\n\nSigned-off-by: Christian G\u00f6ttsche <cgzones@googlemail.com>",
        "before_after_code_files": [
          "libsepol/src/policydb_validate.c||libsepol/src/policydb_validate.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_issue": 1,
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libsepol/src/policydb_validate.c||libsepol/src/policydb_validate.c": [
          "File: libsepol/src/policydb_validate.c -> libsepol/src/policydb_validate.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "736:  return 0;",
          "737: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "739: static int validate_context(context_struct_t *con, validate_t flavors[], int mls)",
          "740: {",
          "741:  if (validate_value(con->user, &flavors[SYM_USERS]))",
          "742:   return -1;",
          "743:  if (validate_value(con->role, &flavors[SYM_ROLES]))",
          "744:   return -1;",
          "745:  if (validate_value(con->type, &flavors[SYM_TYPES]))",
          "746:   return -1;",
          "747:  if (mls && validate_mls_range(&con->range, &flavors[SYM_LEVELS], &flavors[SYM_CATS]))",
          "748:   return -1;",
          "750:  return 0;",
          "751: }",
          "753: static int validate_ocontexts(sepol_handle_t *handle, policydb_t *p, validate_t flavors[])",
          "754: {",
          "755:  ocontext_t *octx;",
          "756:  unsigned int i;",
          "758:  for (i = 0; i < OCON_NUM; i++) {",
          "759:   for (octx = p->ocontexts[i]; octx; octx = octx->next) {",
          "760:    if (validate_context(&octx->context[0], flavors, p->mls))",
          "761:     goto bad;",
          "763:    if (p->target_platform == SEPOL_TARGET_SELINUX) {",
          "764:     switch (i) {",
          "765:     case OCON_FS:",
          "766:     case OCON_NETIF:",
          "767:      if (validate_context(&octx->context[1], flavors, p->mls))",
          "768:       goto bad;",
          "769:      break;",
          "770:     }",
          "771:    }",
          "772:   }",
          "773:  }",
          "775:  return 0;",
          "777: bad:",
          "778:  ERR(handle, \"Invalid ocontext\");",
          "779:  return -1;",
          "780: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "936:    goto bad;",
          "937:  }",
          "939:  if (validate_scopes(handle, p->scope, p->global))",
          "940:   goto bad;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "982:  if (validate_ocontexts(handle, p, flavors))",
          "983:   goto bad;",
          "",
          "---------------"
        ]
      }
    }
  ]
}