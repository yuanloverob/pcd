{
  "cve_id": "CVE-2021-21378",
  "cve_desc": "Envoy is a cloud-native high-performance edge/middle/service proxy. In Envoy version 1.17.0 an attacker can bypass authentication by presenting a JWT token with an issuer that is not in the provider list when Envoy's JWT Authentication filter is configured with the `allow_missing` requirement under `requires_any` due to a mistake in implementation. Envoy's JWT Authentication filter can be configured with the `allow_missing` requirement that will be satisfied if JWT is missing (JwtMissed error) and fail if JWT is presented or invalid. Due to a mistake in implementation, a JwtUnknownIssuer error was mistakenly converted to JwtMissed when `requires_any` was configured. So if `allow_missing` was configured under `requires_any`, an attacker can bypass authentication by presenting a JWT token with an issuer that is not in the provider list. Integrity may be impacted depending on configuration if the JWT token is used to protect against writes or modifications. This regression was introduced on 2020/11/12 in PR 13839 which fixed handling `allow_missing` under RequiresAny in a JwtRequirement (see issue 13458). The AnyVerifier aggregates the children verifiers' results into a final status where JwtMissing is the default error. However, a JwtUnknownIssuer was mistakenly treated the same as a JwtMissing error and the resulting final aggregation was the default JwtMissing. As a result, `allow_missing` would allow a JWT token with an unknown issuer status. This is fixed in version 1.17.1 by PR 15194. The fix works by preferring JwtUnknownIssuer over a JwtMissing error, fixing the accidental conversion and bypass with `allow_missing`. A user could detect whether a bypass occurred if they have Envoy logs enabled with debug verbosity. Users can enable component level debug logs for JWT. The JWT filter logs will indicate that there is a request with a JWT token and a failure that the JWT token is missing.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "ea39e3cba652bcc4b11bb0d5c62b017e584d2e5a",
  "patch_info": {
    "commit_hash": "ea39e3cba652bcc4b11bb0d5c62b017e584d2e5a",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/ea39e3cba652bcc4b11bb0d5c62b017e584d2e5a",
    "files": [
      "docs/root/version_history/current.rst",
      "source/extensions/filters/http/jwt_authn/verifier.cc",
      "test/extensions/filters/http/jwt_authn/all_verifier_test.cc",
      "test/extensions/filters/http/jwt_authn/group_verifier_test.cc"
    ],
    "message": "jwt_authn: fix a bug where JWT with wrong issuer is allowed in allow_missing case (#15194)\n\n[jwt] When allow_missing is used inside RequiresAny, the requests with JWT with wrong issuer are accepted. This is a bug, allow_missing should only allow requests without any JWT. This change fixed the above issue by preserving JwtUnknownIssuer in allow_missing case.\n\nSigned-off-by: Wayne Zhang <qiwzhang@google.com>",
    "before_after_code_files": [
      "source/extensions/filters/http/jwt_authn/verifier.cc||source/extensions/filters/http/jwt_authn/verifier.cc",
      "test/extensions/filters/http/jwt_authn/all_verifier_test.cc||test/extensions/filters/http/jwt_authn/all_verifier_test.cc",
      "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc"
    ]
  },
  "patch_diff": {
    "source/extensions/filters/http/jwt_authn/verifier.cc||source/extensions/filters/http/jwt_authn/verifier.cc": [
      "File: source/extensions/filters/http/jwt_authn/verifier.cc -> source/extensions/filters/http/jwt_authn/verifier.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "302:     if (++completion_state.number_completed_children_ == verifiers_.size()) {",
      "308:       Status final_status = Status::JwtMissed;",
      "309:       for (const auto& it : verifiers_) {",
      "313:         Status child_status = context.getCompletionState(it.get()).status_;",
      "315:           final_status = child_status;",
      "316:         }",
      "317:       }",
      "",
      "[Removed Lines]",
      "314:         if (child_status != Status::JwtMissed && child_status != Status::JwtUnknownIssuer) {",
      "",
      "[Added Lines]",
      "312:         if ((child_status != Status::JwtMissed && child_status != Status::JwtUnknownIssuer) ||",
      "313:             final_status == Status::JwtMissed) {",
      "",
      "---------------"
    ],
    "test/extensions/filters/http/jwt_authn/all_verifier_test.cc||test/extensions/filters/http/jwt_authn/all_verifier_test.cc": [
      "File: test/extensions/filters/http/jwt_authn/all_verifier_test.cc -> test/extensions/filters/http/jwt_authn/all_verifier_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "197: }",
      "199: TEST_F(SingleAllowMissingInOrListTest, MissingIssToken) {",
      "201:   auto headers = Http::TestRequestHeaderMapImpl{{kExampleHeader, ES256WithoutIssToken}};",
      "202:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
      "203:   verifier_->verify(context_);",
      "",
      "[Removed Lines]",
      "200:   EXPECT_CALL(mock_cb_, onComplete(Status::Ok));",
      "",
      "[Added Lines]",
      "200:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtUnknownIssuer));",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "471:   EXPECT_THAT(headers, JwtOutputFailedOrIgnore(kOtherHeader));",
      "472: }",
      "474: TEST_F(AllowMissingInOrListTest, BadAndGoodJwts) {",
      "475:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtVerificationFail));",
      "476:   auto headers = Http::TestRequestHeaderMapImpl{{kExampleHeader, NonExistKidToken},",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "474: TEST_F(AllowMissingInOrListTest, WrongIssuer) {",
      "475:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtUnknownIssuer));",
      "476:   auto headers = Http::TestRequestHeaderMapImpl{{kExampleHeader, OtherGoodToken}};",
      "477:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
      "478:   verifier_->verify(context_);",
      "480:   EXPECT_THAT(headers, JwtOutputFailedOrIgnore(kOtherHeader));",
      "481: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "589: }",
      "591: TEST_F(AllowMissingInAndOfOrListTest, GoodAndBadJwts) {",
      "594:   auto headers =",
      "595:       Http::TestRequestHeaderMapImpl{{kExampleHeader, GoodToken}, {kOtherHeader, GoodToken}};",
      "",
      "[Removed Lines]",
      "592:   EXPECT_CALL(mock_cb_, onComplete(Status::Ok));",
      "",
      "[Added Lines]",
      "601:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtUnknownIssuer));",
      "",
      "---------------"
    ],
    "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc": [
      "File: test/extensions/filters/http/jwt_authn/group_verifier_test.cc -> test/extensions/filters/http/jwt_authn/group_verifier_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "582:   callbacks_[\"other_provider\"](Status::JwtExpired);",
      "583: }",
      "587:   TestUtility::loadFromYaml(RequiresAnyConfig, proto_config_);",
      "588:   proto_config_.mutable_rules(0)",
      "589:       ->mutable_requires()",
      "",
      "[Removed Lines]",
      "586: TEST_F(GroupVerifierTest, TestRequiresAnyWithAllowMissingButOk) {",
      "",
      "[Added Lines]",
      "586: TEST_F(GroupVerifierTest, TestRequiresAnyWithAllowMissingButUnknownIssuer) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "592:       ->mutable_allow_missing();",
      "594:   createAsyncMockAuthsAndVerifier(std::vector<std::string>{\"example_provider\", \"other_provider\"});",
      "597:   auto headers = Http::TestRequestHeaderMapImpl{};",
      "598:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
      "",
      "[Removed Lines]",
      "595:   EXPECT_CALL(mock_cb_, onComplete(Status::Ok));",
      "",
      "[Added Lines]",
      "595:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtUnknownIssuer));",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "fca28f0e4025d723510bcbf4fd5c784968eba791",
      "candidate_info": {
        "commit_hash": "fca28f0e4025d723510bcbf4fd5c784968eba791",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/fca28f0e4025d723510bcbf4fd5c784968eba791",
        "files": [
          "source/extensions/filters/http/jwt_authn/verifier.cc",
          "test/extensions/filters/http/jwt_authn/group_verifier_test.cc"
        ],
        "message": "jwt_authn: return a valid error message for require_any (#10385)\n\nSigned-off-by: Wayne Zhang <qiwzhang@google.com>",
        "before_after_code_files": [
          "source/extensions/filters/http/jwt_authn/verifier.cc||source/extensions/filters/http/jwt_authn/verifier.cc",
          "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/http/jwt_authn/verifier.cc||source/extensions/filters/http/jwt_authn/verifier.cc",
            "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc"
          ],
          "candidate": [
            "source/extensions/filters/http/jwt_authn/verifier.cc||source/extensions/filters/http/jwt_authn/verifier.cc",
            "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/http/jwt_authn/verifier.cc||source/extensions/filters/http/jwt_authn/verifier.cc": [
          "File: source/extensions/filters/http/jwt_authn/verifier.cc -> source/extensions/filters/http/jwt_authn/verifier.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "25:   bool is_completed_{false};",
          "27:   std::size_t number_completed_children_{0};",
          "28: };",
          "30: class ContextImpl : public Verifier::Context {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29:   Status any_valid_error_{Status::Ok};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "297:     if (completion_state.is_completed_) {",
          "298:       return;",
          "299:     }",
          "300:     if (++completion_state.number_completed_children_ == verifiers_.size() ||",
          "301:         Status::Ok == status) {",
          "302:       completion_state.is_completed_ = true;",
          "304:     }",
          "305:   }",
          "306: };",
          "",
          "[Removed Lines]",
          "303:       completeWithStatus(status, context);",
          "",
          "[Added Lines]",
          "305:     if (status != Status::Ok && status != Status::JwtMissed && status != Status::JwtUnknownIssuer) {",
          "306:       completion_state.any_valid_error_ = status;",
          "307:     }",
          "311:       Status final_status = status;",
          "312:       if (status != Status::Ok && completion_state.any_valid_error_ != Status::Ok) {",
          "313:         final_status = completion_state.any_valid_error_;",
          "314:       }",
          "315:       completeWithStatus(final_status, context);",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc": [
          "File: test/extensions/filters/http/jwt_authn/group_verifier_test.cc -> test/extensions/filters/http/jwt_authn/group_verifier_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "353: TEST_F(GroupVerifierTest, TestRequiresAnyAllAuthFailed) {",
          "354:   TestUtility::loadFromYaml(RequiresAnyConfig, proto_config_);",
          "355:   auto mock_auth = std::make_unique<MockAuthenticator>();",
          "356:   createSyncMockAuthsAndVerifier(StatusMap{{\"example_provider\", Status::JwtHeaderBadKid},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "354:   TestUtility::loadFromYaml(RequiresAnyConfig, proto_config_);",
          "355:   auto mock_auth = std::make_unique<MockAuthenticator>();",
          "356:   createSyncMockAuthsAndVerifier(StatusMap{{\"example_provider\", Status::JwtMissed},",
          "357:                                            {\"other_provider\", Status::JwtHeaderBadKid}});",
          "360:   EXPECT_CALL(mock_cb_, setPayload(_)).Times(0);",
          "361:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtHeaderBadKid)).Times(1);",
          "362:   auto headers = Http::TestRequestHeaderMapImpl{",
          "363:       {\"example-auth-userinfo\", \"\"},",
          "364:       {\"other-auth-userinfo\", \"\"},",
          "365:   };",
          "366:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "367:   verifier_->verify(context_);",
          "368:   EXPECT_FALSE(headers.has(\"example-auth-userinfo\"));",
          "369:   EXPECT_FALSE(headers.has(\"other-auth-userinfo\"));",
          "370: }",
          "377: TEST_F(GroupVerifierTest, TestRequiresAnyLastIsJwtMissed) {",
          "378:   TestUtility::loadFromYaml(RequiresAnyConfig, proto_config_);",
          "379:   auto mock_auth = std::make_unique<MockAuthenticator>();",
          "380:   createSyncMockAuthsAndVerifier(StatusMap{{\"example_provider\", Status::JwtHeaderBadKid},",
          "381:                                            {\"other_provider\", Status::JwtMissed}});",
          "384:   EXPECT_CALL(mock_cb_, setPayload(_)).Times(0);",
          "385:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtHeaderBadKid)).Times(1);",
          "386:   auto headers = Http::TestRequestHeaderMapImpl{",
          "387:       {\"example-auth-userinfo\", \"\"},",
          "388:       {\"other-auth-userinfo\", \"\"},",
          "389:   };",
          "390:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "391:   verifier_->verify(context_);",
          "392:   EXPECT_FALSE(headers.has(\"example-auth-userinfo\"));",
          "393:   EXPECT_FALSE(headers.has(\"other-auth-userinfo\"));",
          "394: }",
          "398: TEST_F(GroupVerifierTest, TestRequiresAnyLastIsJwtUnknownIssuer) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "360:   EXPECT_CALL(mock_cb_, setPayload(_)).Times(0);",
          "362:   auto headers = Http::TestRequestHeaderMapImpl{",
          "363:       {\"example-auth-userinfo\", \"\"},",
          "364:       {\"other-auth-userinfo\", \"\"},",
          "",
          "[Removed Lines]",
          "361:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtUnknownIssuer)).Times(1);",
          "",
          "[Added Lines]",
          "406:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtHeaderBadKid)).Times(1);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9270506f9f2b6786c21719bed3a97a6e0e71a760",
      "candidate_info": {
        "commit_hash": "9270506f9f2b6786c21719bed3a97a6e0e71a760",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/9270506f9f2b6786c21719bed3a97a6e0e71a760",
        "files": [
          "source/extensions/filters/http/jwt_authn/verifier.cc",
          "test/extensions/filters/http/jwt_authn/all_verifier_test.cc",
          "test/extensions/filters/http/jwt_authn/group_verifier_test.cc"
        ],
        "message": "jwt_authn: change allow_missing implementation under RequiresAny (#13839)\n\nSigned-off-by: Wayne Zhang <qiwzhang@google.com>",
        "before_after_code_files": [
          "source/extensions/filters/http/jwt_authn/verifier.cc||source/extensions/filters/http/jwt_authn/verifier.cc",
          "test/extensions/filters/http/jwt_authn/all_verifier_test.cc||test/extensions/filters/http/jwt_authn/all_verifier_test.cc",
          "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/http/jwt_authn/verifier.cc||source/extensions/filters/http/jwt_authn/verifier.cc",
            "test/extensions/filters/http/jwt_authn/all_verifier_test.cc||test/extensions/filters/http/jwt_authn/all_verifier_test.cc",
            "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc"
          ],
          "candidate": [
            "source/extensions/filters/http/jwt_authn/verifier.cc||source/extensions/filters/http/jwt_authn/verifier.cc",
            "test/extensions/filters/http/jwt_authn/all_verifier_test.cc||test/extensions/filters/http/jwt_authn/all_verifier_test.cc",
            "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/http/jwt_authn/verifier.cc||source/extensions/filters/http/jwt_authn/verifier.cc": [
          "File: source/extensions/filters/http/jwt_authn/verifier.cc -> source/extensions/filters/http/jwt_authn/verifier.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "27:   std::size_t number_completed_children_{0};",
          "30: };",
          "32: class ContextImpl : public Verifier::Context {",
          "",
          "[Removed Lines]",
          "29:   Status any_valid_error_{Status::Ok};",
          "",
          "[Added Lines]",
          "29:   Status status_;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "83:   void completeWithStatus(Status status, ContextImpl& context) const {",
          "84:     if (parent_ != nullptr) {",
          "85:       return parent_->onComplete(status, context);",
          "86:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "85:       auto& completion_state = context.getCompletionState(this);",
          "86:       completion_state.status_ = status;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "113:   ProviderVerifierImpl(const std::string& provider_name, const AuthFactory& factory,",
          "114:                        const JwtProvider& provider, const BaseVerifierImpl* parent)",
          "115:       : BaseVerifierImpl(parent), auth_factory_(factory), extractor_(Extractor::create(provider)),",
          "118:   void verify(ContextSharedPtr context) const override {",
          "119:     auto& ctximpl = static_cast<ContextImpl&>(*context);",
          "",
          "[Removed Lines]",
          "116:         provider_name_(absl::make_optional<std::string>(provider_name)) {}",
          "",
          "[Added Lines]",
          "118:         provider_name_(provider_name) {}",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "140: private:",
          "141:   const AuthFactory& auth_factory_;",
          "142:   const ExtractorConstPtr extractor_;",
          "144: };",
          "146: class ProviderAndAudienceVerifierImpl : public ProviderVerifierImpl {",
          "",
          "[Removed Lines]",
          "143:   const absl::optional<std::string> provider_name_;",
          "",
          "[Added Lines]",
          "145:   const std::string provider_name_;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "228: VerifierConstPtr innerCreate(const JwtRequirement& requirement,",
          "229:                              const Protobuf::Map<std::string, JwtProvider>& providers,",
          "235: class BaseGroupVerifierImpl : public BaseVerifierImpl {",
          "",
          "[Removed Lines]",
          "230:                              const AuthFactory& factory,",
          "231:                              const std::vector<std::string> parent_provider_names,",
          "232:                              const BaseVerifierImpl* parent);",
          "",
          "[Added Lines]",
          "232:                              const AuthFactory& factory, const BaseVerifierImpl* parent);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "258:                   const Protobuf::Map<std::string, JwtProvider>& providers,",
          "259:                   const BaseVerifierImpl* parent)",
          "260:       : BaseGroupVerifierImpl(parent) {",
          "263:     for (const auto& it : or_list.requirements()) {",
          "265:       switch (it.requires_type_case()) {",
          "272:       case JwtRequirement::RequiresTypeCase::kAllowMissingOrFailed:",
          "273:       case JwtRequirement::RequiresTypeCase::kAllowMissing:",
          "283:       default:",
          "284:         break;",
          "285:       }",
          "290:     }",
          "294:     }",
          "295:   }",
          "",
          "[Removed Lines]",
          "261:     const JwtRequirement* by_pass_type_requirement = nullptr;",
          "262:     std::vector<std::string> used_providers;",
          "264:       bool is_regular_requirement = true;",
          "266:       case JwtRequirement::RequiresTypeCase::kProviderName:",
          "267:         used_providers.emplace_back(it.provider_name());",
          "268:         break;",
          "269:       case JwtRequirement::RequiresTypeCase::kProviderAndAudiences:",
          "270:         used_providers.emplace_back(it.provider_and_audiences().provider_name());",
          "271:         break;",
          "274:         is_regular_requirement = false;",
          "275:         if (by_pass_type_requirement == nullptr ||",
          "276:             by_pass_type_requirement->requires_type_case() ==",
          "277:                 JwtRequirement::RequiresTypeCase::kAllowMissing) {",
          "281:           by_pass_type_requirement = &it;",
          "282:         }",
          "286:       if (is_regular_requirement) {",
          "287:         verifiers_.emplace_back(",
          "288:             innerCreate(it, providers, factory, std::vector<std::string>{}, this));",
          "289:       }",
          "291:     if (by_pass_type_requirement) {",
          "292:       verifiers_.emplace_back(",
          "293:           innerCreate(*by_pass_type_requirement, providers, factory, used_providers, this));",
          "",
          "[Added Lines]",
          "265:         is_allow_missing_or_failed_ = true;",
          "266:         break;",
          "268:         is_allow_missing_ = true;",
          "269:         break;",
          "271:         verifiers_.emplace_back(innerCreate(it, providers, factory, this));",
          "277:     if (verifiers_.empty() && (is_allow_missing_or_failed_ || is_allow_missing_)) {",
          "278:       JwtRequirement requirement;",
          "279:       if (is_allow_missing_or_failed_) {",
          "280:         requirement.mutable_allow_missing_or_failed();",
          "281:       } else {",
          "282:         requirement.mutable_allow_missing();",
          "283:       }",
          "284:       verifiers_.emplace_back(innerCreate(requirement, providers, factory, this));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "299:     if (completion_state.is_completed_) {",
          "300:       return;",
          "301:     }",
          "310:       completion_state.is_completed_ = true;",
          "314:       }",
          "315:       completeWithStatus(final_status, context);",
          "316:     }",
          "317:   }",
          "318: };",
          "",
          "[Removed Lines]",
          "305:     if (status != Status::Ok && status != Status::JwtMissed && status != Status::JwtUnknownIssuer) {",
          "306:       completion_state.any_valid_error_ = status;",
          "307:     }",
          "308:     if (++completion_state.number_completed_children_ == verifiers_.size() ||",
          "309:         Status::Ok == status) {",
          "311:       Status final_status = status;",
          "312:       if (status != Status::Ok && completion_state.any_valid_error_ != Status::Ok) {",
          "313:         final_status = completion_state.any_valid_error_;",
          "",
          "[Added Lines]",
          "295:     if (Status::Ok == status) {",
          "297:       completeWithStatus(status, context);",
          "298:       return;",
          "299:     }",
          "302:     if (++completion_state.number_completed_children_ == verifiers_.size()) {",
          "308:       Status final_status = Status::JwtMissed;",
          "309:       for (const auto& it : verifiers_) {",
          "313:         Status child_status = context.getCompletionState(it.get()).status_;",
          "314:         if (child_status != Status::JwtMissed && child_status != Status::JwtUnknownIssuer) {",
          "315:           final_status = child_status;",
          "316:         }",
          "319:       if (is_allow_missing_or_failed_) {",
          "320:         final_status = Status::Ok;",
          "321:       } else if (is_allow_missing_ && final_status == Status::JwtMissed) {",
          "322:         final_status = Status::Ok;",
          "323:       }",
          "324:       completion_state.is_completed_ = true;",
          "329: private:",
          "330:   bool is_allow_missing_or_failed_{false};",
          "331:   bool is_allow_missing_{false};",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "326:                   const BaseVerifierImpl* parent)",
          "327:       : BaseGroupVerifierImpl(parent) {",
          "328:     for (const auto& it : and_list.requirements()) {",
          "331:     }",
          "332:   }",
          "",
          "[Removed Lines]",
          "329:       verifiers_.emplace_back(",
          "330:           innerCreate(it, providers, factory, std::vector<std::string>{}, this));",
          "",
          "[Added Lines]",
          "343:       verifiers_.emplace_back(innerCreate(it, providers, factory, this));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "354:   }",
          "355: };",
          "357: VerifierConstPtr innerCreate(const JwtRequirement& requirement,",
          "358:                              const Protobuf::Map<std::string, JwtProvider>& providers,",
          "362:   std::string provider_name;",
          "363:   std::vector<std::string> audiences;",
          "372:   switch (requirement.requires_type_case()) {",
          "373:   case JwtRequirement::RequiresTypeCase::kProviderName:",
          "374:     provider_name = requirement.provider_name();",
          "",
          "[Removed Lines]",
          "359:                              const AuthFactory& factory,",
          "360:                              const std::vector<std::string> parent_provider_names,",
          "361:                              const BaseVerifierImpl* parent) {",
          "364:   JwtProviderList parent_providers;",
          "365:   for (const auto& name : parent_provider_names) {",
          "366:     const auto& it = providers.find(name);",
          "367:     if (it == providers.end()) {",
          "368:       throw EnvoyException(fmt::format(\"Required provider ['{}'] is not configured.\", name));",
          "369:     }",
          "370:     parent_providers.emplace_back(&it->second);",
          "371:   }",
          "",
          "[Added Lines]",
          "370: JwtProviderList getAllProvidersAsList(const Protobuf::Map<std::string, JwtProvider>& providers) {",
          "371:   JwtProviderList list;",
          "372:   for (const auto& it : providers) {",
          "373:     list.emplace_back(&it.second);",
          "374:   }",
          "375:   return list;",
          "376: }",
          "380:                              const AuthFactory& factory, const BaseVerifierImpl* parent) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "386:     return std::make_unique<AllVerifierImpl>(requirement.requires_all(), factory, providers,",
          "387:                                              parent);",
          "388:   case JwtRequirement::RequiresTypeCase::kAllowMissingOrFailed:",
          "390:   case JwtRequirement::RequiresTypeCase::kAllowMissing:",
          "392:   case JwtRequirement::RequiresTypeCase::REQUIRES_TYPE_NOT_SET:",
          "393:     return std::make_unique<AllowAllVerifierImpl>(parent);",
          "394:   default:",
          "",
          "[Removed Lines]",
          "389:     return std::make_unique<AllowFailedVerifierImpl>(factory, parent_providers, parent);",
          "391:     return std::make_unique<AllowMissingVerifierImpl>(factory, parent_providers, parent);",
          "",
          "[Added Lines]",
          "400:     return std::make_unique<AllowFailedVerifierImpl>(factory, getAllProvidersAsList(providers),",
          "401:                                                      parent);",
          "403:     return std::make_unique<AllowMissingVerifierImpl>(factory, getAllProvidersAsList(providers),",
          "404:                                                       parent);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "416: VerifierConstPtr Verifier::create(const JwtRequirement& requirement,",
          "417:                                   const Protobuf::Map<std::string, JwtProvider>& providers,",
          "418:                                   const AuthFactory& factory) {",
          "420: }",
          "422: } // namespace JwtAuthn",
          "",
          "[Removed Lines]",
          "419:   return innerCreate(requirement, providers, factory, std::vector<std::string>{}, nullptr);",
          "",
          "[Added Lines]",
          "432:   return innerCreate(requirement, providers, factory, nullptr);",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/jwt_authn/all_verifier_test.cc||test/extensions/filters/http/jwt_authn/all_verifier_test.cc": [
          "File: test/extensions/filters/http/jwt_authn/all_verifier_test.cc -> test/extensions/filters/http/jwt_authn/all_verifier_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "29:     - name: \"x-example\"",
          "30:       value_prefix: \"\"",
          "31:     forward_payload_header: \"x-example-payload\"",
          "32:     local_jwks:",
          "33:       inline_string: \"\"",
          "34:   other_provider:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32:     forward: true",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37:     - name: \"x-other\"",
          "38:       value_prefix: \"\"",
          "39:     forward_payload_header: \"x-other-payload\"",
          "40:     local_jwks:",
          "41:       inline_string: \"\"",
          "42: rules:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     forward: true",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47: constexpr char kExampleHeader[] = \"x-example\";",
          "48: constexpr char kOtherHeader[] = \"x-other\";",
          "53: MATCHER_P(JwtOutputSuccess, jwt_header, \"\") {",
          "54:   auto payload_header = absl::StrCat(jwt_header, \"-payload\");",
          "56: }",
          "61: MATCHER_P(JwtOutputFailedOrIgnore, jwt_header, \"\") {",
          "62:   auto payload_header = absl::StrCat(jwt_header, \"-payload\");",
          "64: }",
          "66: class AllVerifierTest : public testing::Test {",
          "",
          "[Removed Lines]",
          "55:   return !arg.has(std::string(jwt_header)) && arg.has(payload_header);",
          "63:   return arg.has(std::string(jwt_header)) && !arg.has(payload_header);",
          "",
          "[Added Lines]",
          "56:   return arg.has(payload_header);",
          "63:   return !arg.has(payload_header);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "143:   auto headers = Http::TestRequestHeaderMapImpl{{kExampleHeader, GoodToken}};",
          "144:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "145:   verifier_->verify(context_);",
          "149: }",
          "151: TEST_F(AllowFailedInSingleRequirementTest, TwoGoodJwts) {",
          "",
          "[Removed Lines]",
          "148:   EXPECT_THAT(headers, JwtOutputFailedOrIgnore(kExampleHeader));",
          "",
          "[Added Lines]",
          "146:   EXPECT_THAT(headers, JwtOutputSuccess(kExampleHeader));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "154:       Http::TestRequestHeaderMapImpl{{kExampleHeader, GoodToken}, {kOtherHeader, OtherGoodToken}};",
          "155:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "156:   verifier_->verify(context_);",
          "159: }",
          "161: TEST_F(AllowFailedInSingleRequirementTest, GoodAndBadJwts) {",
          "",
          "[Removed Lines]",
          "157:   EXPECT_THAT(headers, JwtOutputFailedOrIgnore(kExampleHeader));",
          "158:   EXPECT_THAT(headers, JwtOutputFailedOrIgnore(kOtherHeader));",
          "",
          "[Added Lines]",
          "155:   EXPECT_THAT(headers, JwtOutputSuccess(kExampleHeader));",
          "156:   EXPECT_THAT(headers, JwtOutputSuccess(kOtherHeader));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "164:       Http::TestRequestHeaderMapImpl{{kExampleHeader, GoodToken}, {kOtherHeader, ExpiredToken}};",
          "165:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "166:   verifier_->verify(context_);",
          "167:   EXPECT_THAT(headers, JwtOutputFailedOrIgnore(kExampleHeader));",
          "168:   EXPECT_THAT(headers, JwtOutputFailedOrIgnore(kOtherHeader));",
          "169: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:   EXPECT_THAT(headers, JwtOutputSuccess(kExampleHeader));",
          "166:   EXPECT_THAT(headers, JwtOutputFailedOrIgnore(kOtherHeader));",
          "167: }",
          "170: class SingleAllowMissingInOrListTest : public AllVerifierTest {",
          "171: protected:",
          "172:   void SetUp() override {",
          "173:     AllVerifierTest::SetUp();",
          "174:     const char allow_missing_yaml[] = R\"(",
          "175: requires_any:",
          "176:   requirements:",
          "177:   - allow_missing: {}",
          "178: )\";",
          "179:     modifyRequirement(allow_missing_yaml);",
          "180:     createVerifier();",
          "181:   }",
          "182: };",
          "184: TEST_F(SingleAllowMissingInOrListTest, NoJwt) {",
          "185:   EXPECT_CALL(mock_cb_, onComplete(Status::Ok)).Times(1);",
          "186:   auto headers = Http::TestRequestHeaderMapImpl{};",
          "187:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "188:   verifier_->verify(context_);",
          "189: }",
          "191: TEST_F(SingleAllowMissingInOrListTest, BadJwt) {",
          "192:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtExpired)).Times(1);",
          "193:   auto headers = Http::TestRequestHeaderMapImpl{{kExampleHeader, ExpiredToken}};",
          "194:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "195:   verifier_->verify(context_);",
          "197: }",
          "199: TEST_F(SingleAllowMissingInOrListTest, MissingIssToken) {",
          "200:   EXPECT_CALL(mock_cb_, onComplete(Status::Ok)).Times(1);",
          "201:   auto headers = Http::TestRequestHeaderMapImpl{{kExampleHeader, ES256WithoutIssToken}};",
          "202:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "203:   verifier_->verify(context_);",
          "204:   EXPECT_THAT(headers, JwtOutputFailedOrIgnore(kExampleHeader));",
          "205: }",
          "207: TEST_F(SingleAllowMissingInOrListTest, OneGoodJwt) {",
          "208:   EXPECT_CALL(mock_cb_, onComplete(Status::Ok)).Times(1);",
          "209:   auto headers = Http::TestRequestHeaderMapImpl{{kExampleHeader, GoodToken}};",
          "210:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "211:   verifier_->verify(context_);",
          "212:   EXPECT_THAT(headers, JwtOutputSuccess(kExampleHeader));",
          "213: }",
          "215: TEST_F(SingleAllowMissingInOrListTest, TwoGoodJwts) {",
          "216:   EXPECT_CALL(mock_cb_, onComplete(Status::Ok)).Times(1);",
          "217:   auto headers =",
          "218:       Http::TestRequestHeaderMapImpl{{kExampleHeader, GoodToken}, {kOtherHeader, OtherGoodToken}};",
          "219:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "220:   verifier_->verify(context_);",
          "221:   EXPECT_THAT(headers, JwtOutputSuccess(kExampleHeader));",
          "222:   EXPECT_THAT(headers, JwtOutputSuccess(kOtherHeader));",
          "223: }",
          "225: TEST_F(SingleAllowMissingInOrListTest, GoodAndBadJwts) {",
          "226:   EXPECT_CALL(mock_cb_, onComplete(Status::Ok)).Times(1);",
          "227:   auto headers =",
          "228:       Http::TestRequestHeaderMapImpl{{kExampleHeader, GoodToken}, {kOtherHeader, ExpiredToken}};",
          "229:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "230:   verifier_->verify(context_);",
          "231:   EXPECT_THAT(headers, JwtOutputSuccess(kExampleHeader));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "291:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "292:   verifier_->verify(context_);",
          "293:   EXPECT_THAT(headers, JwtOutputSuccess(kExampleHeader));",
          "296: }",
          "298: class AllowFailedInAndOfOrListTest : public AllVerifierTest {",
          "",
          "[Removed Lines]",
          "295:   EXPECT_THAT(headers, JwtOutputFailedOrIgnore(kOtherHeader));",
          "",
          "[Added Lines]",
          "358:   EXPECT_THAT(headers, JwtOutputSuccess(kOtherHeader));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "467:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "468:   verifier_->verify(context_);",
          "469:   EXPECT_THAT(headers, JwtOutputSuccess(kExampleHeader));",
          "471: }",
          "473: class AllowMissingInAndOfOrListTest : public AllVerifierTest {",
          "",
          "[Removed Lines]",
          "470:   EXPECT_THAT(headers, JwtOutputFailedOrIgnore(kOtherHeader));",
          "",
          "[Added Lines]",
          "533:   EXPECT_THAT(headers, JwtOutputSuccess(kOtherHeader));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "526: }",
          "528: TEST_F(AllowMissingInAndOfOrListTest, GoodAndBadJwts) {",
          "531:   auto headers =",
          "532:       Http::TestRequestHeaderMapImpl{{kExampleHeader, GoodToken}, {kOtherHeader, GoodToken}};",
          "",
          "[Removed Lines]",
          "529:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtUnknownIssuer)).Times(1);",
          "",
          "[Added Lines]",
          "592:   EXPECT_CALL(mock_cb_, onComplete(Status::Ok)).Times(1);",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc": [
          "File: test/extensions/filters/http/jwt_authn/group_verifier_test.cc -> test/extensions/filters/http/jwt_authn/group_verifier_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "544:   callbacks_[\"provider_4\"](Status::Ok);",
          "545: }",
          "549:   TestUtility::loadFromYaml(RequiresAnyConfig, proto_config_);",
          "550:   proto_config_.mutable_rules(0)",
          "551:       ->mutable_requires()",
          "",
          "[Removed Lines]",
          "548: TEST_F(GroupVerifierTest, TestRequiresAnyWithAllowAll) {",
          "",
          "[Added Lines]",
          "548: TEST_F(GroupVerifierTest, TestRequiresAnyWithAllowFailed) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "554:       ->mutable_allow_missing_or_failed();",
          "556:   createAsyncMockAuthsAndVerifier(std::vector<std::string>{\"example_provider\", \"other_provider\"});",
          "565:   EXPECT_CALL(mock_cb_, onComplete(Status::Ok)).Times(1);",
          "567:   auto headers = Http::TestRequestHeaderMapImpl{};",
          "568:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "569:   verifier_->verify(context_);",
          "572: }",
          "574: } // namespace",
          "",
          "[Removed Lines]",
          "557:   auto mock_auth = std::make_unique<MockAuthenticator>();",
          "558:   EXPECT_CALL(*mock_auth, doVerify(_, _, _, _, _))",
          "559:       .WillOnce(Invoke([&](Http::HeaderMap&, Tracing::Span&, std::vector<JwtLocationConstPtr>*,",
          "560:                            SetPayloadCallback, AuthenticatorCallback callback) {",
          "561:         callbacks_[allowfailed] = std::move(callback);",
          "562:       }));",
          "563:   EXPECT_CALL(*mock_auth, onDestroy()).Times(1);",
          "564:   mock_auths_[allowfailed] = std::move(mock_auth);",
          "570:   callbacks_[allowfailed](Status::Ok);",
          "",
          "[Added Lines]",
          "562:   callbacks_[\"example_provider\"](Status::JwtMissed);",
          "563:   callbacks_[\"other_provider\"](Status::JwtExpired);",
          "564: }",
          "567: TEST_F(GroupVerifierTest, TestRequiresAnyWithAllowMissingButFailed) {",
          "568:   TestUtility::loadFromYaml(RequiresAnyConfig, proto_config_);",
          "569:   proto_config_.mutable_rules(0)",
          "570:       ->mutable_requires()",
          "571:       ->mutable_requires_any()",
          "572:       ->add_requirements()",
          "573:       ->mutable_allow_missing();",
          "575:   createAsyncMockAuthsAndVerifier(std::vector<std::string>{\"example_provider\", \"other_provider\"});",
          "576:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtExpired)).Times(1);",
          "578:   auto headers = Http::TestRequestHeaderMapImpl{};",
          "579:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "580:   verifier_->verify(context_);",
          "581:   callbacks_[\"example_provider\"](Status::JwtMissed);",
          "582:   callbacks_[\"other_provider\"](Status::JwtExpired);",
          "583: }",
          "586: TEST_F(GroupVerifierTest, TestRequiresAnyWithAllowMissingButOk) {",
          "587:   TestUtility::loadFromYaml(RequiresAnyConfig, proto_config_);",
          "588:   proto_config_.mutable_rules(0)",
          "589:       ->mutable_requires()",
          "590:       ->mutable_requires_any()",
          "591:       ->add_requirements()",
          "592:       ->mutable_allow_missing();",
          "594:   createAsyncMockAuthsAndVerifier(std::vector<std::string>{\"example_provider\", \"other_provider\"});",
          "595:   EXPECT_CALL(mock_cb_, onComplete(Status::Ok)).Times(1);",
          "597:   auto headers = Http::TestRequestHeaderMapImpl{};",
          "598:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "599:   verifier_->verify(context_);",
          "600:   callbacks_[\"example_provider\"](Status::JwtMissed);",
          "601:   callbacks_[\"other_provider\"](Status::JwtUnknownIssuer);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8774b21a2897939814a6c09ab11295899df1db52",
      "candidate_info": {
        "commit_hash": "8774b21a2897939814a6c09ab11295899df1db52",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/8774b21a2897939814a6c09ab11295899df1db52",
        "files": [
          "test/extensions/filters/http/jwt_authn/BUILD",
          "test/extensions/filters/http/jwt_authn/group_verifier_test.cc",
          "test/extensions/quic_listeners/quiche/integration/BUILD",
          "test/extensions/stats_sinks/hystrix/BUILD",
          "test/extensions/stats_sinks/hystrix/hystrix_test.cc"
        ],
        "message": "Windows: Fix tests failing on msvc-cl fastbuild mode (#13713)\n\nWindows: Fix tests tailing on msvc-cl fastbuild mode\n\nSigned-off-by: Sunjay Bhatia <sunjayb@vmware.com>\nCo-authored-by: William A Rowe Jr <wrowe@vmware.com>",
        "before_after_code_files": [
          "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc",
          "test/extensions/stats_sinks/hystrix/hystrix_test.cc||test/extensions/stats_sinks/hystrix/hystrix_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc"
          ],
          "candidate": [
            "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc": [
          "File: test/extensions/filters/http/jwt_authn/group_verifier_test.cc -> test/extensions/filters/http/jwt_authn/group_verifier_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "109:     return struct_obj;",
          "110:   }",
          "115:     for (const auto& provider : providers) {",
          "116:       auto mock_auth = std::make_unique<MockAuthenticator>();",
          "117:       EXPECT_CALL(*mock_auth, doVerify(_, _, _, _, _))",
          "122:           }));",
          "123:       EXPECT_CALL(*mock_auth, onDestroy()).Times(1);",
          "124:       mock_auths_[provider] = std::move(mock_auth);",
          "125:     }",
          "126:     createVerifier();",
          "128:   }",
          "130:   JwtAuthentication proto_config_;",
          "",
          "[Removed Lines]",
          "112:   absl::node_hash_map<std::string, AuthenticatorCallback>",
          "113:   createAsyncMockAuthsAndVerifier(const std::vector<std::string>& providers) {",
          "114:     absl::node_hash_map<std::string, AuthenticatorCallback> callbacks;",
          "118:           .WillOnce(Invoke([&callbacks, iss = provider](",
          "119:                                Http::HeaderMap&, Tracing::Span&, std::vector<JwtLocationConstPtr>*,",
          "120:                                SetPayloadCallback, AuthenticatorCallback callback) {",
          "121:             callbacks[iss] = std::move(callback);",
          "127:     return callbacks;",
          "",
          "[Added Lines]",
          "112:   void createAsyncMockAuthsAndVerifier(const std::vector<std::string>& providers) {",
          "116:           .WillOnce(Invoke([&, iss = provider](Http::HeaderMap&, Tracing::Span&,",
          "117:                                                std::vector<JwtLocationConstPtr>*,",
          "118:                                                SetPayloadCallback, AuthenticatorCallback callback) {",
          "119:             callbacks_[iss] = std::move(callback);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "134:   NiceMock<MockAuthFactory> mock_factory_;",
          "135:   ContextSharedPtr context_;",
          "136:   NiceMock<Tracing::MockSpan> parent_span_;",
          "137: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "134:   absl::node_hash_map<std::string, AuthenticatorCallback> callbacks_;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242: TEST_F(GroupVerifierTest, TestRequiresAllBadFormat) {",
          "243:   TestUtility::loadFromYaml(RequiresAllConfig, proto_config_);",
          "248:   EXPECT_CALL(mock_cb_, setPayload(_)).Times(0);",
          "",
          "[Removed Lines]",
          "244:   auto callbacks = createAsyncMockAuthsAndVerifier(",
          "245:       std::vector<std::string>{\"example_provider\", \"other_provider\"});",
          "",
          "[Added Lines]",
          "242:   createAsyncMockAuthsAndVerifier(std::vector<std::string>{\"example_provider\", \"other_provider\"});",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "253:   };",
          "254:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "255:   verifier_->verify(context_);",
          "261:   EXPECT_FALSE(headers.has(\"example-auth-userinfo\"));",
          "262:   EXPECT_FALSE(headers.has(\"other-auth-userinfo\"));",
          "263: }",
          "",
          "[Removed Lines]",
          "256:   callbacks[\"example_provider\"](Status::JwtBadFormat);",
          "258:   callbacks[\"other_provider\"](Status::Ok);",
          "259:   callbacks[\"example_provider\"](Status::Ok);",
          "260:   callbacks[\"other_provider\"](Status::Ok);",
          "",
          "[Added Lines]",
          "253:   callbacks_[\"example_provider\"](Status::JwtBadFormat);",
          "255:   callbacks_[\"other_provider\"](Status::Ok);",
          "256:   callbacks_[\"example_provider\"](Status::Ok);",
          "257:   callbacks_[\"other_provider\"](Status::Ok);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "266: TEST_F(GroupVerifierTest, TestRequiresAllMissing) {",
          "267:   TestUtility::loadFromYaml(RequiresAllConfig, proto_config_);",
          "272:   EXPECT_CALL(mock_cb_, setPayload(_)).Times(0);",
          "",
          "[Removed Lines]",
          "268:   auto callbacks = createAsyncMockAuthsAndVerifier(",
          "269:       std::vector<std::string>{\"example_provider\", \"other_provider\"});",
          "",
          "[Added Lines]",
          "265:   createAsyncMockAuthsAndVerifier(std::vector<std::string>{\"example_provider\", \"other_provider\"});",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "277:   };",
          "278:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "279:   verifier_->verify(context_);",
          "285:   EXPECT_FALSE(headers.has(\"example-auth-userinfo\"));",
          "286:   EXPECT_FALSE(headers.has(\"other-auth-userinfo\"));",
          "287: }",
          "",
          "[Removed Lines]",
          "280:   callbacks[\"example_provider\"](Status::Ok);",
          "281:   callbacks[\"other_provider\"](Status::JwtMissed);",
          "283:   callbacks[\"example_provider\"](Status::Ok);",
          "284:   callbacks[\"other_provider\"](Status::Ok);",
          "",
          "[Added Lines]",
          "276:   callbacks_[\"example_provider\"](Status::Ok);",
          "277:   callbacks_[\"other_provider\"](Status::JwtMissed);",
          "279:   callbacks_[\"example_provider\"](Status::Ok);",
          "280:   callbacks_[\"other_provider\"](Status::Ok);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "290: TEST_F(GroupVerifierTest, TestRequiresAllBothFailed) {",
          "291:   TestUtility::loadFromYaml(RequiresAllConfig, proto_config_);",
          "296:   EXPECT_CALL(mock_cb_, setPayload(_)).Times(0);",
          "",
          "[Removed Lines]",
          "292:   auto callbacks = createAsyncMockAuthsAndVerifier(",
          "293:       std::vector<std::string>{\"example_provider\", \"other_provider\"});",
          "",
          "[Added Lines]",
          "288:   createAsyncMockAuthsAndVerifier(std::vector<std::string>{\"example_provider\", \"other_provider\"});",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "303:   verifier_->verify(context_);",
          "304:   EXPECT_FALSE(headers.has(\"example-auth-userinfo\"));",
          "305:   EXPECT_FALSE(headers.has(\"other-auth-userinfo\"));",
          "308: }",
          "",
          "[Removed Lines]",
          "306:   callbacks[\"example_provider\"](Status::JwtUnknownIssuer);",
          "307:   callbacks[\"other_provider\"](Status::JwtUnknownIssuer);",
          "",
          "[Added Lines]",
          "301:   callbacks_[\"example_provider\"](Status::JwtUnknownIssuer);",
          "302:   callbacks_[\"other_provider\"](Status::JwtUnknownIssuer);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "453: TEST_F(GroupVerifierTest, TestAnyInAllBothInRequireAnyIsOk) {",
          "454:   TestUtility::loadFromYaml(AllWithAny, proto_config_);",
          "456:       std::vector<std::string>{\"provider_1\", \"provider_2\", \"provider_3\"});",
          "",
          "[Removed Lines]",
          "455:   auto callbacks = createAsyncMockAuthsAndVerifier(",
          "",
          "[Added Lines]",
          "450:   createAsyncMockAuthsAndVerifier(",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "461:   auto headers = Http::TestRequestHeaderMapImpl{};",
          "462:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "463:   verifier_->verify(context_);",
          "467: }",
          "471: TEST_F(GroupVerifierTest, TestAnyInAllBothInRequireAnyFailed) {",
          "472:   TestUtility::loadFromYaml(AllWithAny, proto_config_);",
          "474:       std::vector<std::string>{\"provider_1\", \"provider_2\", \"provider_3\"});",
          "476:   EXPECT_CALL(mock_cb_, setPayload(_)).Times(0);",
          "",
          "[Removed Lines]",
          "464:   callbacks[\"provider_1\"](Status::Ok);",
          "465:   callbacks[\"provider_2\"](Status::Ok);",
          "466:   callbacks[\"provider_3\"](Status::Ok);",
          "473:   auto callbacks = createAsyncMockAuthsAndVerifier(",
          "",
          "[Added Lines]",
          "459:   callbacks_[\"provider_1\"](Status::Ok);",
          "460:   callbacks_[\"provider_2\"](Status::Ok);",
          "461:   callbacks_[\"provider_3\"](Status::Ok);",
          "468:   createAsyncMockAuthsAndVerifier(",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "478:   auto headers = Http::TestRequestHeaderMapImpl{};",
          "479:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "480:   verifier_->verify(context_);",
          "484: }",
          "",
          "[Removed Lines]",
          "481:   callbacks[\"provider_1\"](Status::JwksFetchFail);",
          "482:   callbacks[\"provider_2\"](Status::JwksFetchFail);",
          "483:   callbacks[\"provider_3\"](Status::Ok);",
          "",
          "[Added Lines]",
          "476:   callbacks_[\"provider_1\"](Status::JwksFetchFail);",
          "477:   callbacks_[\"provider_2\"](Status::JwksFetchFail);",
          "478:   callbacks_[\"provider_3\"](Status::Ok);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "503: TEST_F(GroupVerifierTest, TestAllInAnyFirstAllIsOk) {",
          "504:   TestUtility::loadFromYaml(AnyWithAll, proto_config_);",
          "506:       std::vector<std::string>{\"provider_1\", \"provider_2\", \"provider_3\", \"provider_4\"});",
          "",
          "[Removed Lines]",
          "505:   auto callbacks = createAsyncMockAuthsAndVerifier(",
          "",
          "[Added Lines]",
          "500:   createAsyncMockAuthsAndVerifier(",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "511:   auto headers = Http::TestRequestHeaderMapImpl{};",
          "512:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "513:   verifier_->verify(context_);",
          "517: }",
          "521: TEST_F(GroupVerifierTest, TestAllInAnyLastAllIsOk) {",
          "522:   TestUtility::loadFromYaml(AnyWithAll, proto_config_);",
          "524:       std::vector<std::string>{\"provider_1\", \"provider_2\", \"provider_3\", \"provider_4\"});",
          "526:   EXPECT_CALL(mock_cb_, onComplete(Status::Ok)).Times(1);",
          "527:   auto headers = Http::TestRequestHeaderMapImpl{};",
          "528:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "529:   verifier_->verify(context_);",
          "533: }",
          "537: TEST_F(GroupVerifierTest, TestAllInAnyBothRequireAllAreOk) {",
          "538:   TestUtility::loadFromYaml(AnyWithAll, proto_config_);",
          "540:       std::vector<std::string>{\"provider_1\", \"provider_2\", \"provider_3\", \"provider_4\"});",
          "542:   EXPECT_CALL(mock_cb_, onComplete(Status::Ok)).Times(1);",
          "543:   auto headers = Http::TestRequestHeaderMapImpl{};",
          "544:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "545:   verifier_->verify(context_);",
          "550: }",
          "",
          "[Removed Lines]",
          "514:   callbacks[\"provider_2\"](Status::Ok);",
          "515:   callbacks[\"provider_3\"](Status::JwtMissed);",
          "516:   callbacks[\"provider_1\"](Status::Ok);",
          "523:   auto callbacks = createAsyncMockAuthsAndVerifier(",
          "530:   callbacks[\"provider_3\"](Status::Ok);",
          "531:   callbacks[\"provider_4\"](Status::Ok);",
          "532:   callbacks[\"provider_2\"](Status::JwtExpired);",
          "539:   auto callbacks = createAsyncMockAuthsAndVerifier(",
          "546:   callbacks[\"provider_1\"](Status::Ok);",
          "547:   callbacks[\"provider_2\"](Status::Ok);",
          "548:   callbacks[\"provider_3\"](Status::Ok);",
          "549:   callbacks[\"provider_4\"](Status::Ok);",
          "",
          "[Added Lines]",
          "509:   callbacks_[\"provider_2\"](Status::Ok);",
          "510:   callbacks_[\"provider_3\"](Status::JwtMissed);",
          "511:   callbacks_[\"provider_1\"](Status::Ok);",
          "518:   createAsyncMockAuthsAndVerifier(",
          "525:   callbacks_[\"provider_3\"](Status::Ok);",
          "526:   callbacks_[\"provider_4\"](Status::Ok);",
          "527:   callbacks_[\"provider_2\"](Status::JwtExpired);",
          "534:   createAsyncMockAuthsAndVerifier(",
          "541:   callbacks_[\"provider_1\"](Status::Ok);",
          "542:   callbacks_[\"provider_2\"](Status::Ok);",
          "543:   callbacks_[\"provider_3\"](Status::Ok);",
          "544:   callbacks_[\"provider_4\"](Status::Ok);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "558:       ->add_requirements()",
          "559:       ->mutable_allow_missing_or_failed();",
          "563:   auto mock_auth = std::make_unique<MockAuthenticator>();",
          "564:   EXPECT_CALL(*mock_auth, doVerify(_, _, _, _, _))",
          "565:       .WillOnce(Invoke([&](Http::HeaderMap&, Tracing::Span&, std::vector<JwtLocationConstPtr>*,",
          "566:                            SetPayloadCallback, AuthenticatorCallback callback) {",
          "568:       }));",
          "569:   EXPECT_CALL(*mock_auth, onDestroy()).Times(1);",
          "570:   mock_auths_[allowfailed] = std::move(mock_auth);",
          "",
          "[Removed Lines]",
          "561:   auto callbacks = createAsyncMockAuthsAndVerifier(",
          "562:       std::vector<std::string>{\"example_provider\", \"other_provider\"});",
          "567:         callbacks[allowfailed] = std::move(callback);",
          "",
          "[Added Lines]",
          "556:   createAsyncMockAuthsAndVerifier(std::vector<std::string>{\"example_provider\", \"other_provider\"});",
          "561:         callbacks_[allowfailed] = std::move(callback);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "573:   auto headers = Http::TestRequestHeaderMapImpl{};",
          "574:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "575:   verifier_->verify(context_);",
          "578: }",
          "",
          "[Removed Lines]",
          "576:   callbacks[allowfailed](Status::Ok);",
          "",
          "[Added Lines]",
          "570:   callbacks_[allowfailed](Status::Ok);",
          "",
          "---------------"
        ],
        "test/extensions/stats_sinks/hystrix/hystrix_test.cc||test/extensions/stats_sinks/hystrix/hystrix_test.cc": [
          "File: test/extensions/stats_sinks/hystrix/hystrix_test.cc -> test/extensions/stats_sinks/hystrix/hystrix_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: public:",
          "127:   HystrixSinkTest() { sink_ = std::make_unique<HystrixSink>(server_, window_size_); }",
          "131:     cluster_map_.emplace(cluster1_name_, cluster1_.cluster_);",
          "132:     ON_CALL(server_, clusterManager()).WillByDefault(ReturnRef(cluster_manager_));",
          "133:     ON_CALL(cluster_manager_, clusters()).WillByDefault(Return(cluster_map_));",
          "143:   }",
          "145:   void addClusterToMap(const std::string& cluster_name,",
          "",
          "[Removed Lines]",
          "129:   Buffer::OwnedImpl createClusterAndCallbacks() {",
          "135:     Buffer::OwnedImpl buffer;",
          "136:     auto encode_callback = [&buffer](Buffer::Instance& data, bool) {",
          "139:       buffer.add(data);",
          "140:     };",
          "141:     ON_CALL(callbacks_, encodeData(_, _)).WillByDefault(Invoke(encode_callback));",
          "142:     return buffer;",
          "",
          "[Added Lines]",
          "129:   void createClusterAndCallbacks() {",
          "135:     ON_CALL(callbacks_, encodeData(_, _)).WillByDefault(Invoke([&](Buffer::Instance& data, bool) {",
          "138:       cluster_stats_buffer_.add(data);",
          "139:     }));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "249:   NiceMock<Http::MockStreamDecoderFilterCallbacks> callbacks_;",
          "250:   NiceMock<Server::Configuration::MockServerFactoryContext> server_;",
          "251:   Upstream::ClusterManager::ClusterInfoMap cluster_map_;",
          "253:   std::unique_ptr<HystrixSink> sink_;",
          "254:   NiceMock<Stats::MockMetricSnapshot> snapshot_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "249:   Buffer::OwnedImpl cluster_stats_buffer_;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "258: TEST_F(HystrixSinkTest, EmptyFlush) {",
          "259:   InSequence s;",
          "262:   sink_->registerConnection(&callbacks_);",
          "263:   sink_->flush(snapshot_);",
          "264:   absl::node_hash_map<std::string, std::string> cluster_message_map =",
          "266:   validateResults(cluster_message_map[cluster1_name_], 0, 0, 0, 0, 0, window_size_);",
          "267: }",
          "269: TEST_F(HystrixSinkTest, BasicFlow) {",
          "270:   InSequence s;",
          "273:   sink_->registerConnection(&callbacks_);",
          "",
          "[Removed Lines]",
          "260:   Buffer::OwnedImpl buffer = createClusterAndCallbacks();",
          "265:       buildClusterMap(buffer.toString());",
          "271:   Buffer::OwnedImpl buffer = createClusterAndCallbacks();",
          "",
          "[Added Lines]",
          "258:   createClusterAndCallbacks();",
          "263:       buildClusterMap(cluster_stats_buffer_.toString());",
          "269:   createClusterAndCallbacks();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "279:   sink_->flush(snapshot_); // init window with 0",
          "280:   for (uint64_t i = 0; i < (window_size_ - 1); i++) {",
          "282:     traffic_counter += rand_.random() % 1000;",
          "283:     ON_CALL(cluster1_.success_counter_, value()).WillByDefault(Return(traffic_counter));",
          "284:     sink_->flush(snapshot_);",
          "285:   }",
          "287:   absl::node_hash_map<std::string, std::string> cluster_message_map =",
          "290:   Json::ObjectSharedPtr json_buffer =",
          "291:       Json::Factory::loadFromString(cluster_message_map[cluster1_name_]);",
          "",
          "[Removed Lines]",
          "281:     buffer.drain(buffer.length());",
          "288:       buildClusterMap(buffer.toString());",
          "",
          "[Added Lines]",
          "279:     cluster_stats_buffer_.drain(cluster_stats_buffer_.length());",
          "286:       buildClusterMap(cluster_stats_buffer_.toString());",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "309:   const uint64_t rejected_step = 6;",
          "311:   for (uint64_t i = 0; i < (window_size_ + 1); i++) {",
          "313:     cluster1_.setCounterReturnValues(i, success_step, error_4xx_step, error_4xx_retry_step,",
          "314:                                      error_5xx_step, error_5xx_retry_step, timeout_step,",
          "315:                                      timeout_retry_step, rejected_step);",
          "",
          "[Removed Lines]",
          "312:     buffer.drain(buffer.length());",
          "",
          "[Added Lines]",
          "310:     cluster_stats_buffer_.drain(cluster_stats_buffer_.length());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "320:   EXPECT_NE(std::string::npos, rolling_map.find(cluster1_name_ + \".total\"))",
          "321:       << \"cluster1_name = \" << cluster1_name_;",
          "326:   validateResults(cluster_message_map[cluster1_name_], success_step,",
          "",
          "[Removed Lines]",
          "323:   cluster_message_map = buildClusterMap(buffer.toString());",
          "",
          "[Added Lines]",
          "321:   cluster_message_map = buildClusterMap(cluster_stats_buffer_.toString());",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "328:                   timeout_step, timeout_retry_step, rejected_step, window_size_);",
          "332:   sink_->resetRollingWindow();",
          "333:   sink_->flush(snapshot_);",
          "335:   validateResults(cluster_message_map[cluster1_name_], 0, 0, 0, 0, 0, window_size_);",
          "336: }",
          "339: TEST_F(HystrixSinkTest, Disconnect) {",
          "340:   InSequence s;",
          "343:   sink_->flush(snapshot_);",
          "347:   sink_->registerConnection(&callbacks_);",
          "",
          "[Removed Lines]",
          "331:   buffer.drain(buffer.length());",
          "334:   cluster_message_map = buildClusterMap(buffer.toString());",
          "341:   Buffer::OwnedImpl buffer = createClusterAndCallbacks();",
          "344:   EXPECT_EQ(buffer.length(), 0);",
          "",
          "[Added Lines]",
          "329:   cluster_stats_buffer_.drain(cluster_stats_buffer_.length());",
          "332:   cluster_message_map = buildClusterMap(cluster_stats_buffer_.toString());",
          "339:   createClusterAndCallbacks();",
          "342:   EXPECT_EQ(cluster_stats_buffer_.length(), 0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "350:   uint64_t success_step = 1;",
          "352:   for (uint64_t i = 0; i < (window_size_ + 1); i++) {",
          "354:     ON_CALL(cluster1_.success_counter_, value()).WillByDefault(Return((i + 1) * success_step));",
          "355:     sink_->flush(snapshot_);",
          "356:   }",
          "359:   absl::node_hash_map<std::string, std::string> cluster_message_map =",
          "361:   Json::ObjectSharedPtr json_buffer =",
          "362:       Json::Factory::loadFromString(cluster_message_map[cluster1_name_]);",
          "363:   EXPECT_EQ(json_buffer->getInteger(\"rollingCountSuccess\"), (success_step * window_size_));",
          "367:   sink_->unregisterConnection(&callbacks_);",
          "368:   sink_->flush(snapshot_);",
          "373:   sink_->registerConnection(&callbacks_);",
          "374:   ON_CALL(cluster1_.success_counter_, value()).WillByDefault(Return(success_step));",
          "375:   sink_->flush(snapshot_);",
          "378:   json_buffer = Json::Factory::loadFromString(cluster_message_map[cluster1_name_]);",
          "379:   EXPECT_EQ(json_buffer->getInteger(\"rollingCountSuccess\"), 0);",
          "380: }",
          "",
          "[Removed Lines]",
          "353:     buffer.drain(buffer.length());",
          "358:   EXPECT_NE(buffer.length(), 0);",
          "360:       buildClusterMap(buffer.toString());",
          "366:   buffer.drain(buffer.length());",
          "369:   EXPECT_EQ(buffer.length(), 0);",
          "372:   buffer.drain(buffer.length());",
          "376:   EXPECT_NE(buffer.length(), 0);",
          "377:   cluster_message_map = buildClusterMap(buffer.toString());",
          "",
          "[Added Lines]",
          "351:     cluster_stats_buffer_.drain(cluster_stats_buffer_.length());",
          "356:   EXPECT_NE(cluster_stats_buffer_.length(), 0);",
          "358:       buildClusterMap(cluster_stats_buffer_.toString());",
          "364:   cluster_stats_buffer_.drain(cluster_stats_buffer_.length());",
          "367:   EXPECT_EQ(cluster_stats_buffer_.length(), 0);",
          "370:   cluster_stats_buffer_.drain(cluster_stats_buffer_.length());",
          "374:   EXPECT_NE(cluster_stats_buffer_.length(), 0);",
          "375:   cluster_message_map = buildClusterMap(cluster_stats_buffer_.toString());",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "393:   const uint64_t error_step2 = 33;",
          "394:   const uint64_t timeout_step2 = 22;",
          "399:   absl::node_hash_map<std::string, std::string> cluster_message_map =",
          "404:   ASSERT_NE(cluster_message_map.find(cluster1_name_), cluster_message_map.end())",
          "",
          "[Removed Lines]",
          "396:   Buffer::OwnedImpl buffer = createClusterAndCallbacks();",
          "400:       addSecondClusterAndSendDataHelper(buffer, success_step, error_step, timeout_step,",
          "401:                                         success_step2, error_step2, timeout_step2);",
          "",
          "[Added Lines]",
          "394:   createClusterAndCallbacks();",
          "398:       addSecondClusterAndSendDataHelper(cluster_stats_buffer_, success_step, error_step,",
          "399:                                         timeout_step, success_step2, error_step2, timeout_step2);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "427:   const uint64_t error_step2 = 934;",
          "428:   const uint64_t timeout_step2 = 212;",
          "440:   absl::node_hash_map<std::string, std::string> cluster_message_map =",
          "442:   ASSERT_NE(cluster_message_map.find(cluster1_name_), cluster_message_map.end())",
          "443:       << \"cluster1_name = \" << cluster1_name_;",
          "444:   ASSERT_EQ(cluster_message_map.find(cluster2_name_), cluster_message_map.end())",
          "445:       << \"cluster2_name = \" << cluster2_name_;",
          "450:   sink_->flush(snapshot_);",
          "454:   ASSERT_NE(cluster_message_map.find(cluster1_name_), cluster_message_map.end())",
          "455:       << \"cluster1_name = \" << cluster1_name_;",
          "456:   ASSERT_NE(cluster_message_map.find(cluster2_name_), cluster_message_map.end())",
          "",
          "[Removed Lines]",
          "430:   Buffer::OwnedImpl buffer = createClusterAndCallbacks();",
          "433:   addSecondClusterAndSendDataHelper(buffer, success_step, error_step, timeout_step, success_step2,",
          "434:                                     error_step2, timeout_step2);",
          "437:   removeSecondClusterHelper(buffer);",
          "441:       buildClusterMap(buffer.toString());",
          "448:   addSecondClusterHelper(buffer);",
          "453:   cluster_message_map = buildClusterMap(buffer.toString());",
          "",
          "[Added Lines]",
          "428:   createClusterAndCallbacks();",
          "431:   addSecondClusterAndSendDataHelper(cluster_stats_buffer_, success_step, error_step, timeout_step,",
          "432:                                     success_step2, error_step2, timeout_step2);",
          "435:   removeSecondClusterHelper(cluster_stats_buffer_);",
          "439:       buildClusterMap(cluster_stats_buffer_.toString());",
          "446:   addSecondClusterHelper(cluster_stats_buffer_);",
          "451:   cluster_message_map = buildClusterMap(cluster_stats_buffer_.toString());",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "484:       .WillByDefault(testing::ReturnRef(h1_interval_statistics));",
          "485:   snapshot_.histograms_.push_back(*histogram);",
          "489:   sink_->registerConnection(&callbacks_);",
          "490:   sink_->flush(snapshot_);",
          "492:   absl::node_hash_map<std::string, std::string> cluster_message_map =",
          "495:   Json::ObjectSharedPtr latency = Json::Factory::loadFromString(cluster_message_map[cluster1_name_])",
          "496:                                       ->getObject(\"latencyExecute\");",
          "",
          "[Removed Lines]",
          "487:   Buffer::OwnedImpl buffer = createClusterAndCallbacks();",
          "493:       buildClusterMap(buffer.toString());",
          "",
          "[Added Lines]",
          "485:   createClusterAndCallbacks();",
          "491:       buildClusterMap(cluster_stats_buffer_.toString());",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "506: TEST_F(HystrixSinkTest, HystrixEventStreamHandler) {",
          "507:   InSequence s;",
          "510:   sink_->registerConnection(&callbacks_);",
          "",
          "[Removed Lines]",
          "508:   Buffer::OwnedImpl buffer = createClusterAndCallbacks();",
          "",
          "[Added Lines]",
          "506:   createClusterAndCallbacks();",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "527:   ON_CALL(connection_mock, remoteAddress()).WillByDefault(ReturnRef(addr_instance_));",
          "529:   EXPECT_CALL(stream_encoder_options, disableChunkEncoding());",
          "535:   EXPECT_EQ(response_headers.ContentType()->value(), \"text/event-stream\");",
          "",
          "[Removed Lines]",
          "530:   ASSERT_EQ(",
          "531:       sink_->handlerHystrixEventStream(path_and_query, response_headers, buffer, admin_stream_mock),",
          "532:       Http::Code::OK);",
          "",
          "[Added Lines]",
          "528:   ASSERT_EQ(sink_->handlerHystrixEventStream(path_and_query, response_headers,",
          "529:                                              cluster_stats_buffer_, admin_stream_mock),",
          "530:             Http::Code::OK);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d6a4496e712d7a2335b26e2f76210d5904002c26",
      "candidate_info": {
        "commit_hash": "d6a4496e712d7a2335b26e2f76210d5904002c26",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/d6a4496e712d7a2335b26e2f76210d5904002c26",
        "files": [
          "VERSION",
          "docs/root/version_history/current.rst",
          "source/extensions/filters/http/jwt_authn/verifier.cc",
          "test/extensions/filters/http/jwt_authn/all_verifier_test.cc",
          "test/extensions/filters/http/jwt_authn/group_verifier_test.cc"
        ],
        "message": "backport retain JwtUnknownIssuer error for allow_missing (#15199)\n\nSigned-off-by: Asra Ali <asraa@google.com>",
        "before_after_code_files": [
          "source/extensions/filters/http/jwt_authn/verifier.cc||source/extensions/filters/http/jwt_authn/verifier.cc",
          "test/extensions/filters/http/jwt_authn/all_verifier_test.cc||test/extensions/filters/http/jwt_authn/all_verifier_test.cc",
          "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_olp_changes": 1,
        "olp_code_files": {
          "patch": [
            "source/extensions/filters/http/jwt_authn/verifier.cc||source/extensions/filters/http/jwt_authn/verifier.cc",
            "test/extensions/filters/http/jwt_authn/all_verifier_test.cc||test/extensions/filters/http/jwt_authn/all_verifier_test.cc",
            "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc"
          ],
          "candidate": [
            "source/extensions/filters/http/jwt_authn/verifier.cc||source/extensions/filters/http/jwt_authn/verifier.cc",
            "test/extensions/filters/http/jwt_authn/all_verifier_test.cc||test/extensions/filters/http/jwt_authn/all_verifier_test.cc",
            "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/extensions/filters/http/jwt_authn/verifier.cc||source/extensions/filters/http/jwt_authn/verifier.cc": [
          "File: source/extensions/filters/http/jwt_authn/verifier.cc -> source/extensions/filters/http/jwt_authn/verifier.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "302:     if (++completion_state.number_completed_children_ == verifiers_.size()) {",
          "308:       Status final_status = Status::JwtMissed;",
          "309:       for (const auto& it : verifiers_) {",
          "313:         Status child_status = context.getCompletionState(it.get()).status_;",
          "315:           final_status = child_status;",
          "316:         }",
          "317:       }",
          "",
          "[Removed Lines]",
          "314:         if (child_status != Status::JwtMissed && child_status != Status::JwtUnknownIssuer) {",
          "",
          "[Added Lines]",
          "312:         if ((child_status != Status::JwtMissed && child_status != Status::JwtUnknownIssuer) ||",
          "313:             final_status == Status::JwtMissed) {",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/jwt_authn/all_verifier_test.cc||test/extensions/filters/http/jwt_authn/all_verifier_test.cc": [
          "File: test/extensions/filters/http/jwt_authn/all_verifier_test.cc -> test/extensions/filters/http/jwt_authn/all_verifier_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "197: }",
          "199: TEST_F(SingleAllowMissingInOrListTest, MissingIssToken) {",
          "201:   auto headers = Http::TestRequestHeaderMapImpl{{kExampleHeader, ES256WithoutIssToken}};",
          "202:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "203:   verifier_->verify(context_);",
          "",
          "[Removed Lines]",
          "200:   EXPECT_CALL(mock_cb_, onComplete(Status::Ok));",
          "",
          "[Added Lines]",
          "200:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtUnknownIssuer));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "471:   EXPECT_THAT(headers, JwtOutputFailedOrIgnore(kOtherHeader));",
          "472: }",
          "474: TEST_F(AllowMissingInOrListTest, BadAndGoodJwts) {",
          "475:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtVerificationFail));",
          "476:   auto headers = Http::TestRequestHeaderMapImpl{{kExampleHeader, NonExistKidToken},",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "474: TEST_F(AllowMissingInOrListTest, WrongIssuer) {",
          "475:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtUnknownIssuer));",
          "476:   auto headers = Http::TestRequestHeaderMapImpl{{kExampleHeader, OtherGoodToken}};",
          "477:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "478:   verifier_->verify(context_);",
          "480:   EXPECT_THAT(headers, JwtOutputFailedOrIgnore(kOtherHeader));",
          "481: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "589: }",
          "591: TEST_F(AllowMissingInAndOfOrListTest, GoodAndBadJwts) {",
          "594:   auto headers =",
          "595:       Http::TestRequestHeaderMapImpl{{kExampleHeader, GoodToken}, {kOtherHeader, GoodToken}};",
          "",
          "[Removed Lines]",
          "592:   EXPECT_CALL(mock_cb_, onComplete(Status::Ok));",
          "",
          "[Added Lines]",
          "601:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtUnknownIssuer));",
          "",
          "---------------"
        ],
        "test/extensions/filters/http/jwt_authn/group_verifier_test.cc||test/extensions/filters/http/jwt_authn/group_verifier_test.cc": [
          "File: test/extensions/filters/http/jwt_authn/group_verifier_test.cc -> test/extensions/filters/http/jwt_authn/group_verifier_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "582:   callbacks_[\"other_provider\"](Status::JwtExpired);",
          "583: }",
          "587:   TestUtility::loadFromYaml(RequiresAnyConfig, proto_config_);",
          "588:   proto_config_.mutable_rules(0)",
          "589:       ->mutable_requires()",
          "",
          "[Removed Lines]",
          "586: TEST_F(GroupVerifierTest, TestRequiresAnyWithAllowMissingButOk) {",
          "",
          "[Added Lines]",
          "586: TEST_F(GroupVerifierTest, TestRequiresAnyWithAllowMissingButUnknownIssuer) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "592:       ->mutable_allow_missing();",
          "594:   createAsyncMockAuthsAndVerifier(std::vector<std::string>{\"example_provider\", \"other_provider\"});",
          "597:   auto headers = Http::TestRequestHeaderMapImpl{};",
          "598:   context_ = Verifier::createContext(headers, parent_span_, &mock_cb_);",
          "",
          "[Removed Lines]",
          "595:   EXPECT_CALL(mock_cb_, onComplete(Status::Ok));",
          "",
          "[Added Lines]",
          "595:   EXPECT_CALL(mock_cb_, onComplete(Status::JwtUnknownIssuer));",
          "",
          "---------------"
        ]
      }
    }
  ]
}