{
  "cve_id": "CVE-2017-7524",
  "cve_desc": "tpm2-tools versions before 1.1.1 are vulnerable to a password leak due to transmitting password in plaintext from client to server when generating HMAC.",
  "repo": "01org/tpm2.0-tools",
  "patch_hash": "c5d72beaab1cbbbe68271f4bc4b6670d69985157",
  "patch_info": {
    "commit_hash": "c5d72beaab1cbbbe68271f4bc4b6670d69985157",
    "repo": "01org/tpm2.0-tools",
    "commit_url": "https://github.com/01org/tpm2.0-tools/commit/c5d72beaab1cbbbe68271f4bc4b6670d69985157",
    "files": [
      "Makefile.am",
      "configure.ac",
      "lib/tpm_kdfa.c",
      "lib/tpm_kdfa.h",
      "lib/tpm_session.c"
    ],
    "message": "kdfa: use openssl for hmac not tpm\n\nWhile not reachable in the current code base tools, a potential\nsecurity bug lurked in tpm_kdfa().\n\nIf using that routine for an hmac authorization, the hmac was\ncalculated using the tpm. A user of an object wishing to\nauthenticate via hmac, would expect that the password is never\nsent to the tpm. However, since the hmac calculation relies on\npassword, and is performed by the tpm, the password ends up\nbeing sent in plain text to the tpm.\n\nThe fix is to use openssl to generate the hmac on the host.\n\nFixes: CVE-2017-7524\n\nSigned-off-by: William Roberts <william.c.roberts@intel.com>",
    "before_after_code_files": [
      "Makefile.am||Makefile.am",
      "configure.ac||configure.ac",
      "lib/tpm_kdfa.c||lib/tpm_kdfa.c",
      "lib/tpm_kdfa.h||lib/tpm_kdfa.h",
      "lib/tpm_session.c||lib/tpm_session.c"
    ]
  },
  "patch_diff": {
    "Makefile.am||Makefile.am": [
      "File: Makefile.am -> Makefile.am",
      "--- Hunk 1 ---",
      "[Context before]",
      "35: INCLUDE_DIRS = -I$(srcdir)/src -I$(srcdir)/lib",
      "36: LIB_COMMON := lib/libcommon.a",
      "39: AM_LDFLAGS   := $(EXTRA_LDFLAGS)",
      "43: sbin_PROGRAMS = \\",
      "44:     tools/tpm2_create \\",
      "",
      "[Removed Lines]",
      "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(TCTI_TABRMD_CFLAGS)",
      "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(TCTI_TABRMD_LIBS)",
      "",
      "[Added Lines]",
      "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(TCTI_TABRMD_CFLAGS) $(CRYPTO_CFLAGS)",
      "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(TCTI_TABRMD_LIBS) $(CRYPTO_LIBS)",
      "",
      "---------------"
    ],
    "configure.ac||configure.ac": [
      "File: configure.ac -> configure.ac",
      "--- Hunk 1 ---",
      "[Context before]",
      "69:     [AC_MSG_ERROR(",
      "70:         [no TCTIs: at least one TCTI library must be enabled],",
      "71:         [1])])",
      "73: AC_ARG_ENABLE([unit],",
      "74:             [AS_HELP_STRING([--enable-unit],",
      "75:                             [build cmocka unit tests (default is no)])],",
      "",
      "[Removed Lines]",
      "72: PKG_CHECK_MODULES([CURL],[libcurl libcrypto])",
      "",
      "[Added Lines]",
      "72: PKG_CHECK_MODULES([CRYPTO],[libcrypto])",
      "73: PKG_CHECK_MODULES([CURL],[libcurl])",
      "",
      "---------------"
    ],
    "lib/tpm_kdfa.c||lib/tpm_kdfa.c": [
      "File: lib/tpm_kdfa.c -> lib/tpm_kdfa.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "28: #include <sapi/tpm20.h>",
      "30: #include \"string-bytes.h\"",
      "31: #include \"tpm_hmac.h\"",
      "34:         TPM2B *key, char *label, TPM2B *contextU, TPM2B *contextV, UINT16 bits,",
      "35:         TPM2B_MAX_BUFFER  *resultKey )",
      "36: {",
      "38:     TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2;",
      "39:     UINT8 *tpm2bBitsPtr = &tpm2bBits.t.buffer[0];",
      "40:     UINT8 *tpm2b_i_2Ptr = &tpm2b_i_2.t.buffer[0];",
      "41:     TPM2B_DIGEST *bufferList[8];",
      "42:     UINT32 bitsSwizzled, i_Swizzled;",
      "44:     int i, j;",
      "45:     UINT16 bytes = bits / 8;",
      "",
      "[Removed Lines]",
      "33: TPM_RC tpm_kdfa(TSS2_SYS_CONTEXT *sapi_context, TPMI_ALG_HASH hashAlg,",
      "37:     TPM2B_DIGEST tmpResult;",
      "43:     TPM_RC rval;",
      "",
      "[Added Lines]",
      "30:  #include <openssl/err.h>",
      "31: #include <openssl/hmac.h>",
      "35: #include \"log.h\"",
      "37: static const EVP_MD *tpm_algorithm_to_openssl_digest(TPMI_ALG_HASH algorithm) {",
      "39:     switch(algorithm) {",
      "40:     case TPM_ALG_SHA1:",
      "41:         return EVP_sha1();",
      "42:     case ALG_SHA256_VALUE:",
      "43:         return EVP_sha256();",
      "44:     case TPM_ALG_SHA384:",
      "45:         return EVP_sha384();",
      "46:     case TPM_ALG_SHA512:",
      "47:         return EVP_sha512();",
      "48:     default:",
      "49:         return NULL;",
      "50:     }",
      "52: }",
      "54: TPM_RC tpm_kdfa(TPMI_ALG_HASH hashAlg,",
      "63:     TPM_RC rval = TPM_RC_SUCCESS;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "65:     i = 1;",
      "67:     while( resultKey->t.size < bytes )",
      "68:     {",
      "71:         i_Swizzled = string_bytes_endian_convert_32( i );",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "87:     const EVP_MD *md = tpm_algorithm_to_openssl_digest(hashAlg);",
      "88:     if (!md) {",
      "89:         LOG_ERR(\"Algorithm not supported for hmac: %x\", hashAlg);",
      "90:         return TPM_RC_HASH;",
      "91:     }",
      "93:     HMAC_CTX ctx;",
      "94:     HMAC_CTX_init(&ctx);",
      "95:     int rc = HMAC_Init_ex(&ctx, key->buffer, key->size, md, NULL);",
      "96:     if (!rc) {",
      "97:         LOG_ERR(\"HMAC Init failed: %s\", ERR_error_string(rc, NULL));",
      "98:         return TPM_RC_MEMORY;",
      "99:     }",
      "104:         TPM2B_DIGEST tmpResult;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "77:         bufferList[j++] = (TPM2B_DIGEST *)contextU;",
      "78:         bufferList[j++] = (TPM2B_DIGEST *)contextV;",
      "79:         bufferList[j++] = (TPM2B_DIGEST *)&(tpm2bBits.b);",
      "85:         }",
      "87:         bool res = string_bytes_concat_buffer(resultKey, &(tmpResult.b));",
      "88:         if (!res) {",
      "90:         }",
      "91:     }",
      "94:     resultKey->t.size = bytes;",
      "97: }",
      "",
      "[Removed Lines]",
      "80:         bufferList[j++] = (TPM2B_DIGEST *)0;",
      "81:         rval = tpm_hmac(sapi_context, hashAlg, key, (TPM2B **)&( bufferList[0] ), &tmpResult );",
      "82:         if( rval != TPM_RC_SUCCESS )",
      "83:         {",
      "84:             return( rval );",
      "89:             return TSS2_SYS_RC_BAD_VALUE;",
      "96:     return TPM_RC_SUCCESS;",
      "",
      "[Added Lines]",
      "116:         bufferList[j] = (TPM2B_DIGEST *)0;",
      "118:         int c;",
      "119:         for(c=0; c < j; c++) {",
      "120:             TPM2B_DIGEST *digest = bufferList[c];",
      "121:             int rc =  HMAC_Update(&ctx, digest->b.buffer, digest->b.size);",
      "122:             if (!rc) {",
      "123:                 LOG_ERR(\"HMAC Update failed: %s\", ERR_error_string(rc, NULL));",
      "124:                 rval = TPM_RC_MEMORY;",
      "125:                 goto err;",
      "126:             }",
      "127:         }",
      "129:         unsigned size = sizeof(tmpResult.t.buffer);",
      "130:         int rc = HMAC_Final(&ctx, tmpResult.t.buffer, &size);",
      "131:         if (!rc) {",
      "132:             LOG_ERR(\"HMAC Final failed: %s\", ERR_error_string(rc, NULL));",
      "133:             rval = TPM_RC_MEMORY;",
      "134:             goto err;",
      "137:         tmpResult.t.size = size;",
      "141:             rval = TSS2_SYS_RC_BAD_VALUE;",
      "142:             goto err;",
      "149: err:",
      "150:     HMAC_CTX_cleanup(&ctx);",
      "152:     return rval;",
      "",
      "---------------"
    ],
    "lib/tpm_kdfa.h||lib/tpm_kdfa.h": [
      "File: lib/tpm_kdfa.h -> lib/tpm_kdfa.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "46:         TPM2B *key, char *label, TPM2B *contextU, TPM2B *contextV,",
      "47:         UINT16 bits, TPM2B_MAX_BUFFER *resultKey );",
      "",
      "[Removed Lines]",
      "45: TPM_RC tpm_kdfa(TSS2_SYS_CONTEXT *sapi_context, TPMI_ALG_HASH hashAlg,",
      "",
      "[Added Lines]",
      "45: TPM_RC tpm_kdfa(TPMI_ALG_HASH hashAlg,",
      "",
      "---------------"
    ],
    "lib/tpm_session.c||lib/tpm_session.c": [
      "File: lib/tpm_session.c -> lib/tpm_session.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "198:             }",
      "199:             else",
      "200:             {",
      "202:                         &( session->nonceOlder.b ), bytes * 8, (TPM2B_MAX_BUFFER *)&( session->sessionKey ) );",
      "203:             }",
      "",
      "[Removed Lines]",
      "201:                 rval = tpm_kdfa(sapi_context, session->authHash, &(key.b), label, &( session->nonceNewer.b ),",
      "",
      "[Added Lines]",
      "201:                 rval = tpm_kdfa(session->authHash, &(key.b), label, &( session->nonceNewer.b ),",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "db3b898ec4b4408fd590964af52c838f15e1d9dc",
      "candidate_info": {
        "commit_hash": "db3b898ec4b4408fd590964af52c838f15e1d9dc",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/db3b898ec4b4408fd590964af52c838f15e1d9dc",
        "files": [
          "Makefile.am",
          "lib/context-util.c",
          "lib/context-util.h",
          "lib/files.c",
          "lib/files.h",
          "lib/log.c",
          "lib/log.h",
          "lib/options.c",
          "lib/options.h",
          "lib/password_util.c",
          "lib/password_util.h",
          "lib/pcr.c",
          "lib/pcr.h",
          "lib/rc-decode.c",
          "lib/rc-decode.h",
          "lib/string-bytes.c",
          "lib/string-bytes.h",
          "lib/syscontext.c",
          "lib/syscontext.h",
          "lib/tpm2-header.c",
          "lib/tpm2-header.h",
          "lib/tpm_hash.c",
          "lib/tpm_hash.h",
          "lib/tpm_hmac.c",
          "lib/tpm_hmac.h",
          "lib/tpm_kdfa.c",
          "lib/tpm_kdfa.h",
          "lib/tpm_session.c",
          "lib/tpm_session.h"
        ],
        "message": "Makefile: move libcode to lib and organize\n\nMove libcommon source files to lib and organize the makefile\nfor locality.\n\nTrim any whitespace errors during the move as reported by:\ngit diff --check\n\nSigned-off-by: William Roberts <william.c.roberts@intel.com>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "src/syscontext.c||lib/syscontext.c",
          "src/syscontext.h||lib/syscontext.h",
          "src/tpm2-header.c||lib/tpm2-header.c",
          "src/tpm_session.c||lib/tpm_session.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am"
          ],
          "candidate": [
            "Makefile.am||Makefile.am"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: # Copyright (c) 2015, Intel Corporation",
          "4: # All rights reserved.",
          "5: #",
          "7: # modification, are permitted provided that the following conditions are met:",
          "10: # this list of conditions and the following disclaimer.",
          "14: # and/or other materials provided with the distribution.",
          "15: #",
          "16: # 3. Neither the name of Intel Corporation nor the names of its contributors",
          "17: # may be used to endorse or promote products derived from this software without",
          "18: # specific prior written permission.",
          "30: # THE POSSIBILITY OF SUCH DAMAGE.",
          "31: #;**********************************************************************;",
          "33: ACLOCAL_AMFLAGS = -I m4",
          "37: AM_CFLAGS   = -DSAPI_CLIENT $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS)",
          "43: sbin_PROGRAMS = \\",
          "44:     src/tpm2_create \\",
          "45:     src/tpm2_createprimary \\",
          "",
          "[Removed Lines]",
          "6: # Redistribution and use in source and binary forms, with or without",
          "8: #",
          "9: # 1. Redistributions of source code must retain the above copyright notice,",
          "11: #",
          "12: # 2. Redistributions in binary form must reproduce the above copyright notice,",
          "13: # this list of conditions and the following disclaimer in the documentation",
          "19: #",
          "20: # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",
          "21: # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",
          "22: # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",
          "23: # ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE",
          "24: # LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR",
          "25: # CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",
          "26: # SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",
          "27: # INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN",
          "28: # CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)",
          "29: # ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
          "35: INCLUDE_DIRS = -I$(srcdir)/src",
          "38: CLEANFILES  = $(man8_MANS)",
          "39: LDADD = src/libcommon.a $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS)",
          "40: TESTS = $(check_PROGRAMS)",
          "42: noinst_LIBRARIES = src/libcommon.a",
          "",
          "[Added Lines]",
          "6: # Redistribution and use in source and binary forms, with or without",
          "8: #",
          "9: # 1. Redistributions of source code must retain the above copyright notice,",
          "11: #",
          "12: # 2. Redistributions in binary form must reproduce the above copyright notice,",
          "13: # this list of conditions and the following disclaimer in the documentation",
          "19: #",
          "20: # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"",
          "21: # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE",
          "22: # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE",
          "23: # ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE",
          "24: # LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR",
          "25: # CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF",
          "26: # SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS",
          "27: # INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN",
          "28: # CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)",
          "29: # ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",
          "35: INCLUDE_DIRS = -I$(srcdir)/src -I$(srcdir)/lib",
          "36: LIB_COMMON := lib/libcommon.a",
          "38: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "78:     src/tpm2_sign \\",
          "79:     src/tpm2_unseal",
          "134: src_tpm2_create_SOURCES = src/tpm2_create.c src/main.c",
          "135: src_tpm2_createprimary_SOURCES = src/tpm2_createprimary.c src/main.c",
          "136: src_tpm2_dump_capability_SOURCES = src/tpm2_dump_capability.c src/main.c",
          "",
          "[Removed Lines]",
          "81: COMMON_SRC = \\",
          "82:     src/context-util.c \\",
          "83:     src/files.c \\",
          "84:     src/log.c \\",
          "85:     src/options.c \\",
          "86:     src/pcr.c \\",
          "87:     src/string-bytes.c \\",
          "88:     src/tpm2-header.c \\",
          "89:     src/tpm_hash.c \\",
          "90:     src/password_util.c \\",
          "91:     src/tpm_kdfa.c \\",
          "92:     src/tpm_hmac.c \\",
          "93:     src/tpm_session.c",
          "95: man8_MANS = \\",
          "96:     man/man8/tpm2_createprimary.8 \\",
          "97:     man/man8/tpm2_dump_capability.8 \\",
          "98:     man/man8/tpm2_send_command.8 \\",
          "99:     man/man8/tpm2_startup.8 \\",
          "100:     man/man8/tpm2_listpcrs.8 \\",
          "101:     man/man8/tpm2_quote.8 \\",
          "102:     man/man8/tpm2_takeownership.8 \\",
          "103:     man/man8/tpm2_getpubek.8 \\",
          "104:     man/man8/tpm2_getpubak.8 \\",
          "105:     man/man8/tpm2_getmanufec.8 \\",
          "106:     man/man8/tpm2_akparse.8 \\",
          "107:     man/man8/tpm2_makecredential.8 \\",
          "108:     man/man8/tpm2_activatecredential.8 \\",
          "109:     man/man8/tpm2_hash.8 \\",
          "110:     man/man8/tpm2_nvlist.8 \\",
          "111:     man/man8/tpm2_nvread.8 \\",
          "112:     man/man8/tpm2_nvreadlock.8 \\",
          "113:     man/man8/tpm2_nvwrite.8 \\",
          "114:     man/man8/tpm2_nvdefine.8 \\",
          "115:     man/man8/tpm2_nvrelease.8 \\",
          "116:     man/man8/tpm2_create.8 \\",
          "117:     man/man8/tpm2_hmac.8 \\",
          "118:     man/man8/tpm2_certify.8 \\",
          "119:     man/man8/tpm2_readpublic.8 \\",
          "120:     man/man8/tpm2_getrandom.8 \\",
          "121:     man/man8/tpm2_encryptdecrypt.8 \\",
          "122:     man/man8/tpm2_evictcontrol.8 \\",
          "123:     man/man8/tpm2_load.8 \\",
          "124:     man/man8/tpm2_loadexternal.8 \\",
          "125:     man/man8/tpm2_rsadecrypt.8 \\",
          "126:     man/man8/tpm2_rsaencrypt.8 \\",
          "127:     man/man8/tpm2_sign.8 \\",
          "128:     man/man8/tpm2_unseal.8 \\",
          "129:     man/man8/tpm2_verifysignature.8 \\",
          "130:     man/man8/tpm2_listpersistent.8 \\",
          "131:     man/man8/tpm2_rc_decode.8",
          "133: src_libcommon_a_SOURCES = $(COMMON_SRC)",
          "",
          "[Added Lines]",
          "78: noinst_LIBRARIES = $(LIB_COMMON)",
          "79: lib_libcommon_a_SOURCES = \\",
          "80:     lib/context-util.c \\",
          "81:     lib/files.c \\",
          "82:     lib/log.c \\",
          "83:     lib/options.c \\",
          "84:     lib/password_util.c \\",
          "85:     lib/pcr.c \\",
          "86:     lib/rc-decode.c \\",
          "87:     lib/string-bytes.c \\",
          "88:     lib/tpm2-header.c \\",
          "89:     lib/tpm_hash.c \\",
          "90:     lib/tpm_hmac.c \\",
          "91:     lib/tpm_kdfa.c \\",
          "92:     lib/tpm_session.c",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170: src_tpm2_unseal_SOURCES = src/tpm2_unseal.c src/main.c",
          "172: # rc_decode does not use common main, since it does not need a dynamic TCTI.",
          "175: if UNIT",
          "176: test_unit_tpm2_rc_decode_unit_CFLAGS  = $(AM_CFLAGS) $(CMOCKA_CFLAGS)",
          "178: test_unit_tpm2_rc_decode_unit_SOURCES = test/unit/tpm2-rc-decode_unit.c",
          "180: test_unit_tpm2_rc_entry_unit_CFLAGS   = $(AM_CFLAGS) $(CMOCKA_CFLAGS)",
          "184: test_unit_test_string_bytes_CFLAGS   = $(AM_CFLAGS) $(CMOCKA_CFLAGS)",
          "186: test_unit_test_string_bytes_SOURCES  = test/unit/test_string_bytes.c",
          "188: test_unit_test_files_CFLAGS   = $(AM_CFLAGS) $(CMOCKA_CFLAGS)",
          "190: test_unit_test_files_SOURCES  = test/unit/test_files.c",
          "197: endif",
          "199: man/man8/%.8 : man/%.8.in man/tcti-options.troff man/tcti-environment.troff",
          "200:  rm -f $@",
          "201:  mkdir -p man/man8",
          "",
          "[Removed Lines]",
          "173: src_tpm2_rc_decode_SOURCES = src/rc-decode.c src/tpm2_rc_decode.c",
          "177: test_unit_tpm2_rc_decode_unit_LDADD   = $(CMOCKA_LIBS)",
          "181: test_unit_tpm2_rc_entry_unit_LDADD    = $(CMOCKA_LIBS)",
          "182: test_unit_tpm2_rc_entry_unit_SOURCES  = src/rc-decode.c test/unit/tpm2-rc-entry_unit.c",
          "185: test_unit_test_string_bytes_LDADD    = $(CMOCKA_LIBS) src/libcommon.a",
          "189: test_unit_test_files_LDADD    = src/libcommon.a $(CMOCKA_LIBS) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS)",
          "192: check_PROGRAMS = \\",
          "193:     test/unit/tpm2-rc-decode_unit \\",
          "194:     test/unit/tpm2-rc-entry_unit \\",
          "195:     test/unit/test_string_bytes \\",
          "196:     test/unit/test_files",
          "",
          "[Added Lines]",
          "133: src_tpm2_rc_decode_SOURCES = lib/rc-decode.c src/tpm2_rc_decode.c",
          "136: TESTS = $(check_PROGRAMS)",
          "137: check_PROGRAMS = \\",
          "138:     test/unit/tpm2-rc-decode_unit \\",
          "139:     test/unit/tpm2-rc-entry_unit \\",
          "140:     test/unit/test_string_bytes \\",
          "141:     test/unit/test_files",
          "144: test_unit_tpm2_rc_decode_unit_LDADD   = $(CMOCKA_LIBS) $(LIB_COMMON)",
          "148: test_unit_tpm2_rc_entry_unit_LDADD    = $(CMOCKA_LIBS) $(LIB_COMMON)",
          "149: test_unit_tpm2_rc_entry_unit_SOURCES  = test/unit/tpm2-rc-entry_unit.c",
          "152: test_unit_test_string_bytes_LDADD    = $(CMOCKA_LIBS) $(LIB_COMMON)",
          "156: test_unit_test_files_LDADD    = $(LIB_COMMON) $(CMOCKA_LIBS) $(TPM20_TSS_LIBS) \\",
          "157:  $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS)",
          "162: man8_MANS = \\",
          "163:     man/man8/tpm2_createprimary.8 \\",
          "164:     man/man8/tpm2_dump_capability.8 \\",
          "165:     man/man8/tpm2_send_command.8 \\",
          "166:     man/man8/tpm2_startup.8 \\",
          "167:     man/man8/tpm2_listpcrs.8 \\",
          "168:     man/man8/tpm2_quote.8 \\",
          "169:     man/man8/tpm2_takeownership.8 \\",
          "170:     man/man8/tpm2_getpubek.8 \\",
          "171:     man/man8/tpm2_getpubak.8 \\",
          "172:     man/man8/tpm2_getmanufec.8 \\",
          "173:     man/man8/tpm2_akparse.8 \\",
          "174:     man/man8/tpm2_makecredential.8 \\",
          "175:     man/man8/tpm2_activatecredential.8 \\",
          "176:     man/man8/tpm2_hash.8 \\",
          "177:     man/man8/tpm2_nvlist.8 \\",
          "178:     man/man8/tpm2_nvread.8 \\",
          "179:     man/man8/tpm2_nvreadlock.8 \\",
          "180:     man/man8/tpm2_nvwrite.8 \\",
          "181:     man/man8/tpm2_nvdefine.8 \\",
          "182:     man/man8/tpm2_nvrelease.8 \\",
          "183:     man/man8/tpm2_create.8 \\",
          "184:     man/man8/tpm2_hmac.8 \\",
          "185:     man/man8/tpm2_certify.8 \\",
          "186:     man/man8/tpm2_readpublic.8 \\",
          "187:     man/man8/tpm2_getrandom.8 \\",
          "188:     man/man8/tpm2_encryptdecrypt.8 \\",
          "189:     man/man8/tpm2_evictcontrol.8 \\",
          "190:     man/man8/tpm2_load.8 \\",
          "191:     man/man8/tpm2_loadexternal.8 \\",
          "192:     man/man8/tpm2_rsadecrypt.8 \\",
          "193:     man/man8/tpm2_rsaencrypt.8 \\",
          "194:     man/man8/tpm2_sign.8 \\",
          "195:     man/man8/tpm2_unseal.8 \\",
          "196:     man/man8/tpm2_verifysignature.8 \\",
          "197:     man/man8/tpm2_listpersistent.8 \\",
          "198:     man/man8/tpm2_rc_decode.8",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "212:      -e '/@TCTI_ENVIRONMENT_INCLUDE@/r man/tcti-environment.troff' \\",
          "213:      -e '/@TCTI_ENVIRONMENT_INCLUDE@/d' \\",
          "214:      < $< >> $@",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "217: CLEANFILES = $(man8_MANS)",
          "",
          "---------------"
        ],
        "src/syscontext.c||lib/syscontext.c": [
          "File: src/syscontext.c -> lib/syscontext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "39: TSS2_SYS_CONTEXT *InitSysContext(",
          "40:     UINT16 maxCommandSize,",
          "42:     TSS2_ABI_VERSION *abiVersion",
          "43:  )",
          "44: {",
          "",
          "[Removed Lines]",
          "41:     TSS2_TCTI_CONTEXT *tctiContext,",
          "",
          "[Added Lines]",
          "41:     TSS2_TCTI_CONTEXT *tctiContext,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:         free(*sysContext);",
          "79:     }",
          "",
          "[Removed Lines]",
          "80: }",
          "",
          "[Added Lines]",
          "80: }",
          "",
          "---------------"
        ],
        "src/syscontext.h||lib/syscontext.h": [
          "File: src/syscontext.h -> lib/syscontext.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: TSS2_SYS_CONTEXT *InitSysContext(",
          "36:     UINT16 maxCommandSize,",
          "38:     TSS2_ABI_VERSION *abiVersion",
          "39:  );",
          "",
          "[Removed Lines]",
          "37:     TSS2_TCTI_CONTEXT *tctiContext,",
          "",
          "[Added Lines]",
          "37:     TSS2_TCTI_CONTEXT *tctiContext,",
          "",
          "---------------"
        ],
        "src/tpm2-header.c||lib/tpm2-header.c": [
          "File: src/tpm2-header.c -> lib/tpm2-header.c"
        ],
        "src/tpm_session.c||lib/tpm_session.c": [
          "File: src/tpm_session.c -> lib/tpm_session.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:     {",
          "66:         return TSS2_APP_RC_SESSION_SLOT_NOT_FOUND;",
          "67:     }",
          "71: static void DeleteSession( SESSION *session )",
          "",
          "[Removed Lines]",
          "68: }",
          "",
          "[Added Lines]",
          "68: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "117:         session->nonceOlder.t.size = GetDigestSize( TPM_ALG_SHA1 );",
          "118:         for( i = 0; i < session->nonceOlder.t.size; i++ )",
          "120:     }",
          "122:     session->nonceNewer.t.size = session->nonceOlder.t.size;",
          "",
          "[Removed Lines]",
          "119:             session->nonceOlder.t.buffer[i] = 0;",
          "",
          "[Added Lines]",
          "119:             session->nonceOlder.t.buffer[i] = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "199: TPM_RC tpm_session_start_auth_with_params(TSS2_SYS_CONTEXT *sapi_context, SESSION **session,",
          "201:     TPMI_DH_ENTITY bind, TPM2B_AUTH *bindAuth, TPM2B_NONCE *nonceCaller,",
          "202:     TPM2B_ENCRYPTED_SECRET *encryptedSalt,",
          "203:     TPM_SE sessionType, TPMT_SYM_DEF *symmetric, TPMI_ALG_HASH algId )",
          "204: {",
          "205:     TPM_RC rval;",
          "206:     SESSION_LIST_ENTRY *sessionEntry;",
          "208:     rval = AddSession( &sessionEntry );",
          "209:     if( rval == TSS2_RC_SUCCESS )",
          "210:     {",
          "214:         (*session)->bind = bind;",
          "215:         (*session)->tpmKey = tpmKey;",
          "",
          "[Removed Lines]",
          "200:     TPMI_DH_OBJECT tpmKey, TPM2B_MAX_BUFFER *salt,",
          "",
          "[Added Lines]",
          "200:     TPMI_DH_OBJECT tpmKey, TPM2B_MAX_BUFFER *salt,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "235:         if( bindAuth == 0 )",
          "236:         {",
          "238:         }",
          "239:         else",
          "240:         {",
          "",
          "[Removed Lines]",
          "237:             (*session)->authValueBind.b.size = 0;",
          "",
          "[Added Lines]",
          "237:             (*session)->authValueBind.b.size = 0;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b8755dcbbee0a8ea488a3bd42b416956e1c96abb",
      "candidate_info": {
        "commit_hash": "b8755dcbbee0a8ea488a3bd42b416956e1c96abb",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/b8755dcbbee0a8ea488a3bd42b416956e1c96abb",
        "files": [
          "configure.ac"
        ],
        "message": "configure: require tss2-sys 2.0.0 or greater\n\nThe API has changed considerably and the headers have moved around,\nso the tools won't build against an older version of the TSS.\n\nSigned-off-by: Joshua Lock <joshua.g.lock@intel.com>",
        "before_after_code_files": [
          "configure.ac||configure.ac"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "18: AM_CONDITIONAL(",
          "19:     [HAVE_MAN_PAGES],",
          "20:     [test -d \"${srcdir}/man/man1\" -o \"x${PANDOC}\" = \"xyes\"])",
          "22: PKG_CHECK_MODULES([CRYPTO], [libcrypto >= 1.0.2g])",
          "25: AC_ARG_ENABLE([unit],",
          "26:             [AS_HELP_STRING([--enable-unit],",
          "",
          "[Removed Lines]",
          "21: PKG_CHECK_MODULES([TSS2_SYS],[tss2-sys])",
          "23: PKG_CHECK_MODULES([CURL],[libcurl])",
          "",
          "[Added Lines]",
          "21: PKG_CHECK_MODULES([TSS2_SYS], [tss2-sys >= 2.0.0])",
          "23: PKG_CHECK_MODULES([CURL], [libcurl])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "312928f21d93800042ac925a9b3e5ad0c803902b",
      "candidate_info": {
        "commit_hash": "312928f21d93800042ac925a9b3e5ad0c803902b",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/312928f21d93800042ac925a9b3e5ad0c803902b",
        "files": [
          ".gitignore",
          "Makefile.am",
          "configure.ac",
          "src/rc-decode.h",
          "test/tpm2-rc-decode_unit.c"
        ],
        "message": "rc-decode: Add header with simple functions to decode TPM_RCs.\n\nUse cmocka to unit test it. Add .gitignore rules to ignore test logs.\n\nSigned-off-by: Philip Tricca <flihp@twobit.us>",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac",
          "src/rc-decode.h||src/rc-decode.h",
          "test/tpm2-rc-decode_unit.c||test/tpm2-rc-decode_unit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "33: ACLOCAL_AMFLAGS = -I m4",
          "37: AM_CFLAGS   = -DSAPI_CLIENT $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS)",
          "38: AM_CXXFLAGS = -DSAPI_CLIENT $(INCLUDE_DIRS) $(TPM20_TSS_CXXFLAGS)",
          "39: LDADD = src/libcommon.a $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS)",
          "41: noinst_LIBRARIES = src/libcommon.a",
          "42: sbin_PROGRAMS = src/tpm2_listpcrs \\",
          "",
          "[Removed Lines]",
          "35: INCLUDE_DIRS = -I$(srcdir)",
          "",
          "[Added Lines]",
          "35: INCLUDE_DIRS = -I$(srcdir)/src",
          "40: TESTS = $(check_PROGRAMS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "72:     src/tpm2_verifysignature \\",
          "73:     src/tpm2_listpersistent",
          "75: COMMON_SRC = \\",
          "76:     src/common.c \\",
          "77:     src/debug.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: check_PROGRAMS = test/tpm2-rc-decode_unit",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124: src_tpm2_unseal_SOURCES = src/tpm2_unseal.cpp",
          "125: src_tpm2_verifysignature_SOURCES = src/tpm2_verifysignature.cpp",
          "126: src_tpm2_listpersistent_SOURCES = src/tpm2_listpersistent.cpp",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131: test_tpm2_rc_decode_unit_CFLAGS  = $(AM_CXXFLAGS) $(CMOCKA_CFLAGS)",
          "132: test_tpm2_rc_decode_unit_LDADD   = $(CMOCKA_LIBS)",
          "133: test_tpm2_rc_decode_unit_SOURCES = test/tpm2-rc-decode_unit.c",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: PKG_CHECK_MODULES([TCTI_SOCK],[tcti-socket])",
          "11: PKG_CHECK_MODULES([TCTI_DEV],[tcti-device])",
          "12: PKG_CHECK_MODULES([CURL],[libcurl libcrypto])",
          "13: AC_OUTPUT",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: PKG_CHECK_MODULES([CMOCKA],[cmocka])",
          "",
          "---------------"
        ],
        "src/rc-decode.h||src/rc-decode.h": [
          "File: src/rc-decode.h -> src/rc-decode.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #ifndef RC_DECODE_H",
          "29: #define RC_DECODE_H",
          "31: #include <sapi/tpm20.h>",
          "32: #include <stdbool.h>",
          "46: #define IS_BIT_SET(var, pos) ((1 << (pos)) & (var))",
          "47: #define IS_BIT_CLEAR(var, pos) !IS_BIT_SET(var, pos)",
          "51: #define TPM_RC_7BIT_ERROR_MASK  0x7f",
          "53: #define TPM_RC_6BIT_ERROR_MASK  0x3f",
          "55: #define TPM_RC_PARAMETER_MASK  0xf00",
          "57: #define TPM_RC_HANDLE_MASK     0x700",
          "58: #define TPM_RC_SESSION_MASK    0x700",
          "67: static inline bool",
          "68: tpm2_rc_is_format_zero (TPM_RC response_code)",
          "69: {",
          "70:     if (IS_BIT_CLEAR (response_code, 7))",
          "71:         return true;",
          "72:     else",
          "73:         return false;",
          "74: }",
          "81: static inline int",
          "82: tpm2_rc_is_format_one (TPM_RC response_code)",
          "83: {",
          "84:     if (IS_BIT_SET (response_code, 7))",
          "85:         return true;",
          "86:     else",
          "87:         return false;",
          "88: }",
          "92: static inline bool",
          "93: tpm2_rc_is_tpm2 (TPM_RC response_code)",
          "94: {",
          "96:     if (IS_BIT_CLEAR (response_code, 7) && IS_BIT_CLEAR (response_code, 8))",
          "97:         return false;",
          "98:     else",
          "99:         return true;",
          "100: }",
          "101: static inline bool",
          "102: tpm2_rc_is_tpm12 (TPM_RC response_code)",
          "103: {",
          "104:     if (!tpm2_rc_is_tpm2 (response_code))",
          "105:         return true;",
          "106:     else",
          "107:         return false;",
          "108: }",
          "112: static inline bool",
          "113: tpm2_rc_is_vendor_defined (TPM_RC response_code)",
          "114: {",
          "115:     if (IS_BIT_CLEAR (response_code,  7) &&",
          "116:         IS_BIT_SET   (response_code,  8) &&",
          "117:         IS_BIT_SET   (response_code, 10))",
          "118:     {",
          "119:         return true;",
          "120:     } else {",
          "121:         return false;",
          "122:     }",
          "123: }",
          "127: static inline bool",
          "128: tpm2_rc_is_warning_code (TPM_RC response_code)",
          "129: {",
          "130:     if (IS_BIT_CLEAR (response_code,  7) &&",
          "131:         IS_BIT_SET   (response_code,  8) &&",
          "132:         IS_BIT_CLEAR (response_code, 10) &&",
          "133:         IS_BIT_SET   (response_code, 11))",
          "134:     {",
          "135:         return true;",
          "136:     } else {",
          "137:         return false;",
          "138:     }",
          "139: }",
          "143: static inline bool",
          "144: tpm2_rc_is_error_code (TPM_RC response_code)",
          "145: {",
          "146:     if (IS_BIT_CLEAR (response_code,  7) &&",
          "147:         IS_BIT_SET   (response_code,  8) &&",
          "148:         IS_BIT_CLEAR (response_code, 10) &&",
          "149:         IS_BIT_CLEAR (response_code, 11))",
          "150:     {",
          "151:         return 1;",
          "152:     } else {",
          "153:         return 0;",
          "154:     }",
          "155: }",
          "160: static inline bool",
          "161: tpm2_rc_is_error_code_with_parameter (TPM_RC response_code)",
          "162: {",
          "163:     if (IS_BIT_SET (response_code, 6) && IS_BIT_SET (response_code, 7))",
          "164:         return true;",
          "165:     else",
          "166:         return false;",
          "167: }",
          "172: static inline bool",
          "173: tpm2_rc_is_error_code_with_handle (TPM_RC response_code)",
          "174: {",
          "175:     if (IS_BIT_CLEAR (response_code,  6) &&",
          "176:         IS_BIT_SET   (response_code,  7) &&",
          "177:         IS_BIT_CLEAR (response_code, 11))",
          "178:     {",
          "179:         return true;",
          "180:     } else {",
          "181:         return false;",
          "182:     }",
          "183: }",
          "188: static inline bool",
          "189: tpm2_rc_is_error_code_with_session (TPM_RC response_code)",
          "190: {",
          "191:     if (IS_BIT_CLEAR (response_code,  6) &&",
          "192:         IS_BIT_SET   (response_code,  7) &&",
          "193:         IS_BIT_SET   (response_code, 11))",
          "194:     {",
          "195:         return true;",
          "196:     } else {",
          "197:         return false;",
          "198:     }",
          "199: }",
          "204: static inline UINT32",
          "205: tpm2_rc_get_code_7bit (TPM_RC response_code)",
          "206: {",
          "207:     return TPM_RC_7BIT_ERROR_MASK & response_code;",
          "208: }",
          "212: static inline UINT32",
          "213: tpm2_rc_get_code_6bit (TPM_RC response_code)",
          "214: {",
          "215:     return TPM_RC_6BIT_ERROR_MASK & response_code;",
          "216: }",
          "222: static inline UINT32",
          "223: tpm2_rc_get_parameter_number (TPM_RC response_code)",
          "224: {",
          "225:     return TPM_RC_PARAMETER_MASK & response_code;",
          "226: }",
          "231: static inline UINT32",
          "232: tpm2_rc_get_handle_number (TPM_RC response_code)",
          "233: {",
          "234:     return TPM_RC_HANDLE_MASK & response_code;",
          "235: }",
          "236: static inline UINT32",
          "237: tpm2_rc_get_session_number (TPM_RC response_code)",
          "238: {",
          "239:     return TPM_RC_SESSION_MASK & response_code;",
          "240: }",
          "242: static inline UINT32",
          "243: tpm2_rc_get_layer (TPM_RC response_code)",
          "244: {",
          "245:     return TSS2_ERROR_LEVEL_MASK & response_code;",
          "246: }",
          "250: static inline bool",
          "251: tpm2_rc_is_from_tss (TPM_RC response_code)",
          "252: {",
          "253:     if (tpm2_rc_get_layer (response_code))",
          "254:         return true;",
          "255:     else",
          "256:         return false;",
          "257: }",
          "265: static inline UINT32",
          "266: tpm2_rc_get_tss_err_code (TPM_RC response_code)",
          "267: {",
          "268:     return 0X0000ffff & response_code;",
          "269: }",
          "",
          "---------------"
        ],
        "test/tpm2-rc-decode_unit.c||test/tpm2-rc-decode_unit.c": [
          "File: test/tpm2-rc-decode_unit.c -> test/tpm2-rc-decode_unit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "28: #include <stdarg.h>",
          "29: #include <stddef.h>",
          "31: #include <setjmp.h>",
          "32: #include <cmocka.h>",
          "34: #include <sapi/tpm20.h>",
          "35: #include \"rc-decode.h\"",
          "37: #define TPM_RC_ALL_1 0xffffffff",
          "43: static void",
          "44: tpm2_rc_is_format_zero_true (void **state)",
          "45: {",
          "46:     TPM_RC rc = 0xffffff7f;",
          "48:     assert_true (tpm2_rc_is_format_zero (rc));",
          "49: }",
          "50: static void",
          "51: tpm2_rc_is_format_zero_false (void **state)",
          "52: {",
          "53:     TPM_RC rc = TPM_RC_ALL_1;",
          "55:     assert_false (tpm2_rc_is_format_zero (rc));",
          "56: }",
          "57: static void",
          "58: tpm2_rc_is_format_one_true (void **state)",
          "59: {",
          "60:     TPM_RC rc = TPM_RC_ALL_1;",
          "62:     assert_true (tpm2_rc_is_format_one (rc));",
          "63: }",
          "64: static void",
          "65: tpm2_rc_is_format_one_false (void **state)",
          "66: {",
          "67:     TPM_RC rc = 0xffffff7f;",
          "69:     assert_false (tpm2_rc_is_format_one (rc));",
          "70: }",
          "76: static void",
          "77: tpm2_rc_is_tpm12_true (void **state)",
          "78: {",
          "80:     TPM_RC rc = 0xfffffe7f;",
          "82:     assert_true (tpm2_rc_is_tpm12 (rc));",
          "83: }",
          "84: static void",
          "85: tpm2_rc_is_tpm12_false (void **state)",
          "86: {",
          "87:     TPM_RC rc = 0xfffffe7f;",
          "89:     assert_false (tpm2_rc_is_tpm2 (rc));",
          "90: }",
          "95: static void",
          "96: tpm2_rc_is_tpm2_01 (void **state)",
          "97: {",
          "99:     TPM_RC rc = 0xfffffeff;",
          "101:     assert_true (tpm2_rc_is_tpm2 (rc));",
          "102: }",
          "103: static void",
          "104: tpm2_rc_is_tpm2_10 (void **state)",
          "105: {",
          "107:     TPM_RC rc = 0xffffff7f;",
          "109:     assert_true (tpm2_rc_is_tpm2 (rc));",
          "110: }",
          "111: static void",
          "112: tpm2_rc_is_tpm2_11 (void **state)",
          "113: {",
          "115:     TPM_RC rc = TPM_RC_ALL_1;",
          "117:     assert_true (tpm2_rc_is_tpm2 (rc));",
          "118: }",
          "121: static void",
          "122: tpm2_rc_is_vendor_defined_code_all_but_7 (void **state)",
          "123: {",
          "125:     TPM_RC rc = 0xffffff7f;",
          "127:     assert_true (tpm2_rc_is_vendor_defined (rc));",
          "128: }",
          "130: static void",
          "131: tpm2_rc_is_vendor_defined_code_7_set (void **state)",
          "132: {",
          "134:     TPM_RC rc = TPM_RC_ALL_1;",
          "136:     assert_false (tpm2_rc_is_vendor_defined (rc));",
          "137: }",
          "139: static void",
          "140: tpm2_rc_is_vendor_defined_code_8_unset (void **state)",
          "141: {",
          "143:     TPM_RC rc = 0xfffffe7f;",
          "145:     assert_false (tpm2_rc_is_vendor_defined (rc));",
          "146: }",
          "148: static void",
          "149: tpm2_rc_is_vendor_defined_code_10_unset (void **state)",
          "150: {",
          "152:     TPM_RC rc = 0xfffffb7f;",
          "154:     assert_false (tpm2_rc_is_vendor_defined (rc));",
          "155: }",
          "157: static void",
          "158: tpm2_rc_is_vendor_defined_code_no_9 (void **state)",
          "159: {",
          "161:     TPM_RC rc = 0xfffffd7f;",
          "163:     assert_true (tpm2_rc_is_vendor_defined (rc));",
          "164: }",
          "167: static void",
          "168: tpm2_rc_is_warning_code_success (void **state)",
          "169: {",
          "171:     TPM_RC rc = 0xfffff97f;",
          "173:     assert_true (tpm2_rc_is_warning_code (rc));",
          "174: }",
          "176: static void",
          "177: tpm2_rc_is_warning_code_8_unset (void **state)",
          "178: {",
          "180:     TPM_RC rc = 0xfffffa7f;",
          "182:     assert_false (tpm2_rc_is_warning_code (rc));",
          "183: }",
          "185: static void",
          "186: tpm2_rc_is_warning_code_7_set (void **state)",
          "187: {",
          "189:     TPM_RC rc = 0xfffff9ff;",
          "191:     assert_false (tpm2_rc_is_warning_code (rc));",
          "192: }",
          "194: static void",
          "195: tpm2_rc_is_warning_code_10_set (void **state)",
          "196: {",
          "198:     TPM_RC rc = 0xfffff7f;",
          "200:     assert_false (tpm2_rc_is_warning_code (rc));",
          "201: }",
          "204: static void",
          "205: tpm2_rc_is_warning_code_11_unset (void **state)",
          "206: {",
          "208:     TPM_RC rc = 0xfffff37f;",
          "210:     assert_false (tpm2_rc_is_warning_code (rc));",
          "211: }",
          "214: static void",
          "215: tpm2_rc_is_error_code_success (void **state)",
          "216: {",
          "217:     TPM_RC rc = 0xfffff37f;",
          "219:     assert_true (tpm2_rc_is_error_code (rc));",
          "220: }",
          "222: static void",
          "223: tpm2_rc_is_error_code_8_unset (void **state)",
          "224: {",
          "226:     TPM_RC rc = 0xfffff27f;",
          "228:     assert_false (tpm2_rc_is_error_code (rc));",
          "229: }",
          "231: static void",
          "232: tpm2_rc_is_error_code_7_set (void **state)",
          "233: {",
          "235:     TPM_RC rc = 0xfffff3ff;",
          "237:     assert_false (tpm2_rc_is_error_code (rc));",
          "238: }",
          "240: static void",
          "241: tpm2_rc_is_error_code_10_set (void **state)",
          "242: {",
          "244:     TPM_RC rc = 0xfffff77f;",
          "246:     assert_false (tpm2_rc_is_error_code (rc));",
          "247: }",
          "249: static void",
          "250: tpm2_rc_is_error_code_11_set (void **state)",
          "251: {",
          "253:     TPM_RC rc = 0xfffffb7f;",
          "255:     assert_false (tpm2_rc_is_error_code (rc));",
          "256: }",
          "260: static void",
          "261: tpm2_rc_is_error_code_with_parameter_success (void **state)",
          "262: {",
          "263:     TPM_RC rc = TPM_RC_ALL_1;",
          "265:     assert_true (tpm2_rc_is_error_code_with_parameter (rc));",
          "266: }",
          "268: static void",
          "269: tpm2_rc_is_error_code_with_parameter_6_unset (void **state)",
          "270: {",
          "272:     TPM_RC rc = 0xffffffbf;",
          "274:     assert_false (tpm2_rc_is_error_code_with_parameter (rc));",
          "275: }",
          "277: static void",
          "278: tpm2_rc_is_error_code_with_parameter_7_unset (void **state)",
          "279: {",
          "281:     TPM_RC rc = 0xffffff7f;",
          "283:     assert_false (tpm2_rc_is_error_code_with_parameter (rc));",
          "284: }",
          "288: static void",
          "289: tpm2_rc_is_error_code_with_handle_success (void **state)",
          "290: {",
          "291:     TPM_RC rc = 0xfffff7bf;",
          "293:     assert_true (tpm2_rc_is_error_code_with_handle (rc));",
          "294: }",
          "296: static void",
          "297: tpm2_rc_is_error_code_with_handle_6_set (void **state)",
          "298: {",
          "300:     TPM_RC rc = 0xfffff7ff;",
          "302:     assert_false (tpm2_rc_is_error_code_with_handle (rc));",
          "303: }",
          "305: static void",
          "306: tpm2_rc_is_error_code_with_handle_7_unset (void **state)",
          "307: {",
          "309:     TPM_RC rc = 0xfffff73f;",
          "311:     assert_false (tpm2_rc_is_error_code_with_handle (rc));",
          "312: }",
          "314: static void",
          "315: tpm2_rc_is_error_code_with_handle_11_set (void **state)",
          "316: {",
          "318:     TPM_RC rc = 0xffffffbf;",
          "320:     assert_false (tpm2_rc_is_error_code_with_handle (rc));",
          "321: }",
          "325: static void",
          "326: tpm2_rc_is_error_code_with_session_success (void **state)",
          "327: {",
          "329:     TPM_RC rc = 0xffffffbf;",
          "331:     assert_true (tpm2_rc_is_error_code_with_session (rc));",
          "332: }",
          "334: static void",
          "335: tpm2_rc_is_error_code_with_session_6_set (void **state)",
          "336: {",
          "338:     TPM_RC rc = TPM_RC_ALL_1;",
          "340:     assert_false (tpm2_rc_is_error_code_with_session (rc));",
          "341: }",
          "343: static void",
          "344: tpm2_rc_is_error_code_with_session_7_unset (void **state)",
          "345: {",
          "347:     TPM_RC rc = 0xffffff3f;",
          "349:     assert_false (tpm2_rc_is_error_code_with_session (rc));",
          "350: }",
          "352: static void",
          "353: tpm2_rc_is_error_code_with_session_11_unset (void **state)",
          "354: {",
          "356:     TPM_RC rc = 0xfffff7bf;",
          "358:     assert_false (tpm2_rc_is_error_code_with_session (rc));",
          "359: }",
          "364: static void",
          "365: tpm2_rc_get_code_7bit_all (void **state)",
          "366: {",
          "367:     TPM_RC rc = TPM_RC_ALL_1;",
          "369:     assert_int_equal (tpm2_rc_get_code_6bit (rc), 0x0000003f);",
          "370: }",
          "371: static void",
          "372: tpm2_rc_get_code_7bit_general_failure (void **state)",
          "373: {",
          "374:     TPM_RC rc = ~TPM_RC_6BIT_ERROR_MASK | TSS2_BASE_RC_GENERAL_FAILURE;",
          "376:     assert_int_equal (tpm2_rc_get_code_6bit (rc), TSS2_BASE_RC_GENERAL_FAILURE);",
          "377: }",
          "382: static void",
          "383: tpm2_rc_get_code_6bit_all (void **state)",
          "384: {",
          "385:     TPM_RC rc = TPM_RC_ALL_1;",
          "387:     assert_int_equal (tpm2_rc_get_code_6bit (rc), 0x0000003f);",
          "388: }",
          "389: static void",
          "390: tpm2_rc_get_code_6bit_general_failure (void **state)",
          "391: {",
          "392:     TPM_RC rc = ~TPM_RC_6BIT_ERROR_MASK | TSS2_BASE_RC_GENERAL_FAILURE;",
          "394:     assert_int_equal (tpm2_rc_get_code_6bit (rc), TSS2_BASE_RC_GENERAL_FAILURE);",
          "395: }",
          "398: static void",
          "399: tpm2_rc_get_parameter_number_f (void **state)",
          "400: {",
          "401:     TPM_RC rc = ~TPM_RC_PARAMETER_MASK | TPM_RC_F;",
          "403:     assert_int_equal (tpm2_rc_get_parameter_number (rc), TPM_RC_F);",
          "404: }",
          "405: static void",
          "406: tpm2_rc_get_parameter_number_9 (void **state)",
          "407: {",
          "408:     TPM_RC rc = ~TPM_RC_PARAMETER_MASK | TPM_RC_9;",
          "410:     assert_int_equal (tpm2_rc_get_parameter_number (rc), TPM_RC_9);",
          "411: }",
          "414: static void",
          "415: tpm2_rc_get_handle_number_1 (void **state)",
          "416: {",
          "417:     TPM_RC rc = ~TPM_RC_HANDLE_MASK | TPM_RC_1;",
          "419:     assert_int_equal (tpm2_rc_get_handle_number (rc), TPM_RC_1);",
          "420: }",
          "422: static void",
          "423: tpm2_rc_get_handle_number_7 (void **state)",
          "424: {",
          "425:     TPM_RC rc = ~TPM_RC_HANDLE_MASK | TPM_RC_7;",
          "427:     assert_int_equal (tpm2_rc_get_handle_number (rc), TPM_RC_7);",
          "428: }",
          "430: static void",
          "431: tpm2_rc_get_handle_number_f (void **state)",
          "432: {",
          "433:     TPM_RC rc = ~TPM_RC_HANDLE_MASK | TPM_RC_F;",
          "435:     assert_int_not_equal (tpm2_rc_get_handle_number (rc), TPM_RC_F);",
          "436: }",
          "440: static void",
          "441: tpm2_rc_get_session_number_1 (void **state)",
          "442: {",
          "443:     TPM_RC rc = ~TPM_RC_SESSION_MASK | TPM_RC_1;",
          "445:     assert_int_equal (tpm2_rc_get_session_number (rc), TPM_RC_1);",
          "446: }",
          "447: static void",
          "448: tpm2_rc_get_session_number_7 (void **state)",
          "449: {",
          "450:     TPM_RC rc = ~TPM_RC_SESSION_MASK | TPM_RC_7;",
          "452:     assert_int_equal (tpm2_rc_get_session_number (rc), TPM_RC_7);",
          "453: }",
          "454: static void",
          "455: tpm2_rc_get_session_number_f (void **state)",
          "456: {",
          "457:     TPM_RC rc = ~TPM_RC_SESSION_MASK | TPM_RC_F;",
          "459:     assert_int_not_equal (tpm2_rc_get_session_number (rc), TPM_RC_F);",
          "460: }",
          "467: static void",
          "468: tpm2_rc_get_layer_tpm (void **state)",
          "469: {",
          "470:     TPM_RC rc = ~TSS2_ERROR_LEVEL_MASK | TSS2_TPM_ERROR_LEVEL;",
          "472:     assert_int_equal (tpm2_rc_get_layer (rc), TSS2_TPM_ERROR_LEVEL);",
          "473: }",
          "474: static void",
          "475: tpm2_rc_get_layer_sys (void **state)",
          "476: {",
          "477:     TPM_RC rc = ~TSS2_ERROR_LEVEL_MASK | TSS2_SYS_ERROR_LEVEL;",
          "479:     assert_int_equal (tpm2_rc_get_layer (rc), TSS2_SYS_ERROR_LEVEL);",
          "480: }",
          "481: static void",
          "482: tpm2_rc_get_layer_tcti (void **state)",
          "483: {",
          "484:     TPM_RC rc = ~TSS2_ERROR_LEVEL_MASK | TSS2_TCTI_ERROR_LEVEL;",
          "486:     assert_int_equal (tpm2_rc_get_layer (rc), TSS2_TCTI_ERROR_LEVEL);",
          "487: }",
          "490: static void",
          "491: tpm2_rc_is_from_tss_sys (void **state)",
          "492: {",
          "493:     TPM_RC rc = ~TSS2_ERROR_LEVEL_MASK | TSS2_SYS_ERROR_LEVEL;",
          "495:     assert_true (tpm2_rc_is_from_tss (rc));",
          "496: }",
          "497: static void",
          "498: tpm2_rc_is_from_tss_tpm (void **state)",
          "499: {",
          "500:     TPM_RC rc = ~TSS2_ERROR_LEVEL_MASK | TSS2_TPM_ERROR_LEVEL;",
          "502:     assert_false (tpm2_rc_is_from_tss (rc));",
          "503: }",
          "504: static void",
          "505: tpm2_rc_is_from_tss_tcti (void **state)",
          "506: {",
          "507:     TPM_RC rc = ~TSS2_ERROR_LEVEL_MASK | TSS2_TCTI_ERROR_LEVEL;",
          "509:     assert_true (tpm2_rc_is_from_tss (rc));",
          "510: }",
          "513: static void",
          "514: tpm2_rc_get_tss_err_code_general_from_tcti (void **state)",
          "515: {",
          "516:     TPM_RC rc = TSS2_TCTI_RC_GENERAL_FAILURE;",
          "518:     assert_int_equal (TSS2_BASE_RC_GENERAL_FAILURE,",
          "519:                       tpm2_rc_get_tss_err_code (rc));",
          "520: }",
          "521: static void",
          "522: tpm2_rc_get_tss_err_code_try_again_from_tcti (void **state)",
          "523: {",
          "524:     TPM_RC rc = TSS2_TCTI_RC_TRY_AGAIN;",
          "526:     assert_int_equal (TSS2_BASE_RC_TRY_AGAIN,",
          "527:                       tpm2_rc_get_tss_err_code (rc));",
          "528: }",
          "529: static void",
          "530: tpm2_rc_get_tss_err_code_abi_mismatch_from_sys (void **state)",
          "531: {",
          "532:     TPM_RC rc = TSS2_SYS_RC_ABI_MISMATCH;",
          "534:     assert_int_equal (TSS2_BASE_RC_ABI_MISMATCH,",
          "535:                       tpm2_rc_get_tss_err_code (rc));",
          "536: }",
          "537: static void",
          "538: tpm2_rc_get_tss_err_code_bad_size_from_sys (void **state)",
          "539: {",
          "540:     TPM_RC rc = TSS2_SYS_RC_BAD_SIZE;",
          "542:     assert_int_equal (TSS2_BASE_RC_BAD_SIZE,",
          "543:                       tpm2_rc_get_tss_err_code (rc));",
          "544: }",
          "545: int",
          "546: main (int argc, char* argv[])",
          "547: {",
          "548:     const UnitTest tests[] = {",
          "549:         unit_test (tpm2_rc_is_format_zero_true),",
          "550:         unit_test (tpm2_rc_is_format_zero_false),",
          "551:         unit_test (tpm2_rc_is_format_one_true),",
          "552:         unit_test (tpm2_rc_is_format_one_false),",
          "553:         unit_test (tpm2_rc_is_tpm12_true),",
          "554:         unit_test (tpm2_rc_is_tpm12_false),",
          "555:         unit_test (tpm2_rc_is_tpm2_01),",
          "556:         unit_test (tpm2_rc_is_tpm2_10),",
          "557:         unit_test (tpm2_rc_is_tpm2_11),",
          "558:         unit_test (tpm2_rc_is_vendor_defined_code_all_but_7),",
          "559:         unit_test (tpm2_rc_is_vendor_defined_code_7_set),",
          "560:         unit_test (tpm2_rc_is_vendor_defined_code_8_unset),",
          "561:         unit_test (tpm2_rc_is_vendor_defined_code_10_unset),",
          "562:         unit_test (tpm2_rc_is_vendor_defined_code_no_9),",
          "563:         unit_test (tpm2_rc_is_warning_code_success),",
          "564:         unit_test (tpm2_rc_is_warning_code_8_unset),",
          "565:         unit_test (tpm2_rc_is_warning_code_7_set),",
          "566:         unit_test (tpm2_rc_is_warning_code_10_set),",
          "567:         unit_test (tpm2_rc_is_warning_code_11_unset),",
          "568:         unit_test (tpm2_rc_is_error_code_success),",
          "569:         unit_test (tpm2_rc_is_error_code_8_unset),",
          "570:         unit_test (tpm2_rc_is_error_code_7_set),",
          "571:         unit_test (tpm2_rc_is_error_code_10_set),",
          "572:         unit_test (tpm2_rc_is_error_code_11_set),",
          "573:         unit_test (tpm2_rc_is_error_code_with_parameter_success),",
          "574:         unit_test (tpm2_rc_is_error_code_with_parameter_6_unset),",
          "575:         unit_test (tpm2_rc_is_error_code_with_parameter_7_unset),",
          "576:         unit_test (tpm2_rc_is_error_code_with_handle_success),",
          "577:         unit_test (tpm2_rc_is_error_code_with_handle_6_set),",
          "578:         unit_test (tpm2_rc_is_error_code_with_handle_7_unset),",
          "579:         unit_test (tpm2_rc_is_error_code_with_handle_11_set),",
          "580:         unit_test (tpm2_rc_is_error_code_with_session_success),",
          "581:         unit_test (tpm2_rc_is_error_code_with_session_6_set),",
          "582:         unit_test (tpm2_rc_is_error_code_with_session_7_unset),",
          "583:         unit_test (tpm2_rc_is_error_code_with_session_11_unset),",
          "584:         unit_test (tpm2_rc_get_code_7bit_all),",
          "585:         unit_test (tpm2_rc_get_code_7bit_general_failure),",
          "586:         unit_test (tpm2_rc_get_code_6bit_all),",
          "587:         unit_test (tpm2_rc_get_code_6bit_general_failure),",
          "588:         unit_test (tpm2_rc_get_parameter_number_f),",
          "589:         unit_test (tpm2_rc_get_parameter_number_9),",
          "590:         unit_test (tpm2_rc_get_handle_number_1),",
          "591:         unit_test (tpm2_rc_get_handle_number_7),",
          "592:         unit_test (tpm2_rc_get_handle_number_f),",
          "593:         unit_test (tpm2_rc_get_session_number_1),",
          "594:         unit_test (tpm2_rc_get_session_number_7),",
          "595:         unit_test (tpm2_rc_get_session_number_f),",
          "596:         unit_test (tpm2_rc_get_layer_tpm),",
          "597:         unit_test (tpm2_rc_get_layer_sys),",
          "598:         unit_test (tpm2_rc_get_layer_tcti),",
          "599:         unit_test (tpm2_rc_is_from_tss_tpm),",
          "600:         unit_test (tpm2_rc_is_from_tss_sys),",
          "601:         unit_test (tpm2_rc_is_from_tss_tcti),",
          "602:         unit_test (tpm2_rc_get_tss_err_code_general_from_tcti),",
          "603:         unit_test (tpm2_rc_get_tss_err_code_try_again_from_tcti),",
          "604:         unit_test (tpm2_rc_get_tss_err_code_abi_mismatch_from_sys),",
          "605:         unit_test (tpm2_rc_get_tss_err_code_bad_size_from_sys),",
          "606:     };",
          "607:     return run_tests (tests);",
          "608: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "215bd6142143520833d7111097cac039eece4590",
      "candidate_info": {
        "commit_hash": "215bd6142143520833d7111097cac039eece4590",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/215bd6142143520833d7111097cac039eece4590",
        "files": [
          "Makefile.am",
          "configure.ac",
          "lib/context-util.c",
          "lib/options.c",
          "lib/options.h",
          "man/tcti-options.troff"
        ],
        "message": "Revert \"Revert \"Add support for the tpm2-abrmd TCTI & make it the default.\"\"\n\nThis reverts commit 3b75a9fca41b5bf36124266521473a787e31607c.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac",
          "lib/context-util.c||lib/context-util.c",
          "lib/options.c||lib/options.c",
          "lib/options.h||lib/options.h",
          "man/tcti-options.troff||man/tcti-options.troff"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: INCLUDE_DIRS = -I$(srcdir)/src -I$(srcdir)/lib",
          "36: LIB_COMMON := lib/libcommon.a",
          "39: AM_LDFLAGS   := $(EXTRA_LDFLAGS)",
          "43: sbin_PROGRAMS = \\",
          "44:     tools/tpm2_create \\",
          "",
          "[Removed Lines]",
          "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS)",
          "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS)",
          "",
          "[Added Lines]",
          "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(TCTI_TABRMD_CFLAGS)",
          "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(TCTI_TABRMD_LIBS)",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:              AC_MSG_FAILURE([--with-tcti-socket option provided but libtcti-socket not detected.])",
          "44:          fi])])",
          "45: AM_CONDITIONAL([HAVE_TCTI_SOCK],[test \"x$with_tcti_socket\" = \"xyes\"])",
          "46: # ensure we have at least one TCTI enabled, can't do much without one",
          "47: AS_IF(",
          "49:     [AC_MSG_ERROR(",
          "50:         [no TCTIs: at least one TCTI library must be enabled],",
          "51:         [1])])",
          "",
          "[Removed Lines]",
          "48:     [test \"x$with_tcti_device\" != \"xyes\" -a \"x$with_tcti_socket\" != \"xyes\"],",
          "",
          "[Added Lines]",
          "46: # selectively disable libtcti-tabrmd",
          "47: AC_ARG_WITH(",
          "48:     [tcti-tabrmd],",
          "49:     [AS_HELP_STRING([--with-tcti-tabrmd],",
          "50:         [Build tools with support for the tabrmd TCTI.])],",
          "51:     [],",
          "52:     [with_tcti_tabrmd=check])",
          "53: AS_IF(",
          "54:     [test \"x$with_tcti_tabrmd\" != \"xno\"],",
          "55:     [PKG_CHECK_MODULES(",
          "56:         [TCTI_TABRMD],",
          "57:         [tcti-tabrmd],",
          "58:         [AC_DEFINE([HAVE_TCTI_TABRMD], [1])",
          "59:          with_tcti_tabrmd=yes],",
          "60:         [if test \"x$with_tcti_tabrmd\" = \"xyes\"; then",
          "61:              AC_MSG_FAILURE([--with-tcti-tabrmd option provided but libtcti-tabrmd not detected.])",
          "62:          fi])])",
          "63: AM_CONDITIONAL([HAVE_TCTI_TABRMD],[test \"x$with_tcti_tabrmd\" = \"xyes\"])",
          "66:     [test \"x$with_tcti_device\" != \"xyes\" -a \\",
          "67:           \"x$with_tcti_socket\" != \"xyes\" -a \\",
          "68:           \"x$with_tcti_tabrmd\" != \"xyes\"],",
          "",
          "---------------"
        ],
        "lib/context-util.c||lib/context-util.c": [
          "File: lib/context-util.c -> lib/context-util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <errno.h>",
          "32: #include <string.h>",
          "33: #ifdef HAVE_TCTI_DEV",
          "34: #include <tcti/tcti_device.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "32: #include <inttypes.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36: #ifdef HAVE_TCTI_SOCK",
          "37: #include <tcti/tcti_socket.h>",
          "38: #endif",
          "40: #include \"context-util.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "40: #ifdef HAVE_TCTI_TABRMD",
          "41: #include <tcti/tcti-tabrmd.h>",
          "42: #endif",
          "45: #include \"log.h\"",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "124:     return tcti_ctx;",
          "125: }",
          "126: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "132: #ifdef HAVE_TCTI_TABRMD",
          "133: TSS2_TCTI_CONTEXT*",
          "134: tcti_tabrmd_init (void)",
          "135: {",
          "136:     TSS2_TCTI_CONTEXT *tcti_ctx;",
          "137:     TSS2_RC rc;",
          "138:     size_t size;",
          "140:     rc = tss2_tcti_tabrmd_init(NULL, &size);",
          "141:     if (rc != TSS2_RC_SUCCESS) {",
          "142:         LOG_ERR (\"Failed to get size for TABRMD TCTI context: 0x%\" PRIx32, rc);",
          "143:         return NULL;",
          "144:     }",
          "145:     tcti_ctx = (TSS2_TCTI_CONTEXT*)calloc (1, size);",
          "146:     if (tcti_ctx == NULL) {",
          "147:         LOG_ERR (\"Allocation for TABRMD TCTI context failed: %s\",",
          "148:                  strerror (errno));",
          "149:         return NULL;",
          "150:     }",
          "151:     rc = tss2_tcti_tabrmd_init (tcti_ctx, &size);",
          "152:     if (rc != TSS2_RC_SUCCESS) {",
          "153:         LOG_ERR (\"Failed to initialize TABRMD TCTI context: 0x%\" PRIx32, rc);",
          "154:         free (tcti_ctx);",
          "155:         return NULL;",
          "156:     }",
          "157:     return tcti_ctx;",
          "158: }",
          "159: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "193:     case SOCKET_TCTI:",
          "194:         return tcti_socket_init (options->socket_address,",
          "195:                                  options->socket_port);",
          "196: #endif",
          "197:     default:",
          "198:         return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229: #endif",
          "230: #ifdef HAVE_TCTI_TABRMD",
          "231:     case TABRMD_TCTI:",
          "232:         return tcti_tabrmd_init ();",
          "",
          "---------------"
        ],
        "lib/options.c||lib/options.c": [
          "File: lib/options.c -> lib/options.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:         .name = \"socket\",",
          "67:         .type = SOCKET_TCTI,",
          "68:     },",
          "69: #endif",
          "70:     {",
          "71:         .name = \"unknown\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "69: #endif",
          "70: #ifdef HAVE_TCTI_TABRMD",
          "71:     {",
          "72:         .name = \"tabrmd\",",
          "73:         .type = TABRMD_TCTI,",
          "74:     },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "135:             return 2;",
          "136:         }",
          "137:         break;",
          "138: #endif",
          "139:     default:",
          "140:         fprintf (stderr, \"invalid TCTI, see --help\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "144: #endif",
          "145: #ifdef HAVE_TCTI_TABRMD",
          "146:     case TABRMD_TCTI:",
          "148:         break;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "243:             .flag    = NULL,",
          "244:             .val     = 'p',",
          "245:         },",
          "246: #endif",
          "247:         {",
          "248:             .name    = \"help\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "257: #endif",
          "258: #ifdef HAVE_TCTI_TABRMD",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "321:                 return 2;",
          "322:             }",
          "323:         }   break;",
          "324: #endif",
          "325:         case 'h':",
          "326:             common_opts->help = true;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "338: #endif",
          "339: #ifdef HAVE_TCTI_TABRMD",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "362: #ifdef HAVE_TCTI_SOCK",
          "363:     printf (\"  address:          %s\\n\", opts->socket_address);",
          "364:     printf (\"  port:             %d\\n\", opts->socket_port);",
          "365: #endif",
          "366:     printf (\"  help:             %s\\n\", opts->help    ? \"true\" : \"false\");",
          "367:     printf (\"  verbose:          %s\\n\", opts->verbose ? \"true\" : \"false\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "382: #endif",
          "383: #ifdef HAVE_TCTI_TABRMD",
          "",
          "---------------"
        ],
        "lib/options.h||lib/options.h": [
          "File: lib/options.h -> lib/options.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   #define TCTI_DEFAULT      SOCKET_TCTI",
          "49:   #define TCTI_DEFAULT_STR  \"socket\"",
          "50: #elif  HAVE_TCTI_DEV",
          "",
          "[Removed Lines]",
          "47: #ifdef HAVE_TCTI_SOCK",
          "",
          "[Added Lines]",
          "47: #ifdef HAVE_TCTI_TABRMD",
          "48:   #define TCTI_DEFAULT      TABRMD_TCTI",
          "49:   #define TCTI_DEFAULT_STR  \"tabrmd\"",
          "50: #elif HAVE_TCTI_SOCK",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "81: #endif",
          "82: #ifdef HAVE_TCTI_SOCK",
          "83:     SOCKET_TCTI,",
          "84: #endif",
          "85:     UNKNOWN_TCTI,",
          "86:     N_TCTI,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87: #endif",
          "88: #ifdef HAVE_TCTI_TABRMD",
          "89:     TABRMD_TCTI,",
          "",
          "---------------"
        ],
        "man/tcti-options.troff||man/tcti-options.troff": [
          "File: man/tcti-options.troff -> man/tcti-options.troff",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: Supported TCTIs are",
          "12: .if (\\n[HAVE_TCTI_DEV]) or \\fB\\*(lqdevice\\*(rq\\fR",
          "13: .if (\\n[HAVE_TCTI_SOCK]) or \\fB\\*(lqsocket\\*(rq\\fR",
          "14: \\[char46]",
          "15: .TP",
          "16: .if (\\n[HAVE_TCTI_DEV]) \\{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14: .if (\\n[HAVE_TCTI_TABRMD]) or \\fB\\*(lqtabrmd\\*(rq\\fR",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c11f75dbcb04bd569d4d65b04625dc18dc4d009e",
      "candidate_info": {
        "commit_hash": "c11f75dbcb04bd569d4d65b04625dc18dc4d009e",
        "repo": "01org/tpm2.0-tools",
        "commit_url": "https://github.com/01org/tpm2.0-tools/commit/c11f75dbcb04bd569d4d65b04625dc18dc4d009e",
        "files": [
          "Makefile.am",
          "configure.ac",
          "lib/context-util.c",
          "lib/options.c",
          "lib/options.h",
          "man/tcti-options.troff"
        ],
        "message": "Revert \"Add support for the tpm2-abrmd TCTI & make it the default.\"\n\nThis reverts commit 51f36286546c944c6e4041c34bad88353539cf46.",
        "before_after_code_files": [
          "Makefile.am||Makefile.am",
          "configure.ac||configure.ac",
          "lib/context-util.c||lib/context-util.c",
          "lib/options.c||lib/options.c",
          "lib/options.h||lib/options.h",
          "man/tcti-options.troff||man/tcti-options.troff"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ],
          "candidate": [
            "Makefile.am||Makefile.am",
            "configure.ac||configure.ac"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.am||Makefile.am": [
          "File: Makefile.am -> Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: INCLUDE_DIRS = -I$(srcdir)/src -I$(srcdir)/lib",
          "36: LIB_COMMON := lib/libcommon.a",
          "39: AM_LDFLAGS   := $(EXTRA_LDFLAGS)",
          "43: sbin_PROGRAMS = \\",
          "44:     tools/tpm2_create \\",
          "",
          "[Removed Lines]",
          "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS) $(TCTI_TABRMD_CFLAGS)",
          "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS) $(TCTI_TABRMD_LIBS)",
          "",
          "[Added Lines]",
          "38: AM_CFLAGS    := $(INCLUDE_DIRS) $(TPM20_TSS_CFLAGS) $(EXTRA_CFLAGS)",
          "41: LDADD = $(LIB_COMMON) $(TPM20_TSS_LIBS) $(TCTI_SOCK_LIBS) $(TCTI_DEV_LIBS)",
          "",
          "---------------"
        ],
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "43:              AC_MSG_FAILURE([--with-tcti-socket option provided but libtcti-socket not detected.])",
          "44:          fi])])",
          "45: AM_CONDITIONAL([HAVE_TCTI_SOCK],[test \"x$with_tcti_socket\" = \"xyes\"])",
          "64: # ensure we have at least one TCTI enabled, can't do much without one",
          "65: AS_IF(",
          "69:     [AC_MSG_ERROR(",
          "70:         [no TCTIs: at least one TCTI library must be enabled],",
          "71:         [1])])",
          "",
          "[Removed Lines]",
          "46: # selectively disable libtcti-tabrmd",
          "47: AC_ARG_WITH(",
          "48:     [tcti-tabrmd],",
          "49:     [AS_HELP_STRING([--with-tcti-tabrmd],",
          "50:         [Build tools with support for the tabrmd TCTI.])],",
          "51:     [],",
          "52:     [with_tcti_tabrmd=check])",
          "53: AS_IF(",
          "54:     [test \"x$with_tcti_tabrmd\" != \"xno\"],",
          "55:     [PKG_CHECK_MODULES(",
          "56:         [TCTI_TABRMD],",
          "57:         [tcti-tabrmd],",
          "58:         [AC_DEFINE([HAVE_TCTI_TABRMD], [1])",
          "59:          with_tcti_tabrmd=yes],",
          "60:         [if test \"x$with_tcti_tabrmd\" = \"xyes\"; then",
          "61:              AC_MSG_FAILURE([--with-tcti-tabrmd option provided but libtcti-tabrmd not detected.])",
          "62:          fi])])",
          "63: AM_CONDITIONAL([HAVE_TCTI_TABRMD],[test \"x$with_tcti_tabrmd\" = \"xyes\"])",
          "66:     [test \"x$with_tcti_device\" != \"xyes\" -a \\",
          "67:           \"x$with_tcti_socket\" != \"xyes\" -a \\",
          "68:           \"x$with_tcti_tabrmd\" != \"xyes\"],",
          "",
          "[Added Lines]",
          "48:     [test \"x$with_tcti_device\" != \"xyes\" -a \"x$with_tcti_socket\" != \"xyes\"],",
          "",
          "---------------"
        ],
        "lib/context-util.c||lib/context-util.c": [
          "File: lib/context-util.c -> lib/context-util.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: #include <errno.h>",
          "33: #include <string.h>",
          "34: #ifdef HAVE_TCTI_DEV",
          "35: #include <tcti/tcti_device.h>",
          "",
          "[Removed Lines]",
          "32: #include <inttypes.h>",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "37: #ifdef HAVE_TCTI_SOCK",
          "38: #include <tcti/tcti_socket.h>",
          "39: #endif",
          "44: #include \"context-util.h\"",
          "",
          "[Removed Lines]",
          "40: #ifdef HAVE_TCTI_TABRMD",
          "41: #include <tcti/tcti-tabrmd.h>",
          "42: #endif",
          "45: #include \"log.h\"",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "129:     return tcti_ctx;",
          "130: }",
          "131: #endif",
          "",
          "[Removed Lines]",
          "132: #ifdef HAVE_TCTI_TABRMD",
          "133: TSS2_TCTI_CONTEXT*",
          "134: tcti_tabrmd_init (void)",
          "135: {",
          "136:     TSS2_TCTI_CONTEXT *tcti_ctx;",
          "137:     TSS2_RC rc;",
          "138:     size_t size;",
          "140:     rc = tss2_tcti_tabrmd_init(NULL, &size);",
          "141:     if (rc != TSS2_RC_SUCCESS) {",
          "142:         LOG_ERR (\"Failed to get size for TABRMD TCTI context: 0x%\" PRIx32, rc);",
          "143:         return NULL;",
          "144:     }",
          "145:     tcti_ctx = (TSS2_TCTI_CONTEXT*)calloc (1, size);",
          "146:     if (tcti_ctx == NULL) {",
          "147:         LOG_ERR (\"Allocation for TABRMD TCTI context failed: %s\",",
          "148:                  strerror (errno));",
          "149:         return NULL;",
          "150:     }",
          "151:     rc = tss2_tcti_tabrmd_init (tcti_ctx, &size);",
          "152:     if (rc != TSS2_RC_SUCCESS) {",
          "153:         LOG_ERR (\"Failed to initialize TABRMD TCTI context: 0x%\" PRIx32, rc);",
          "154:         free (tcti_ctx);",
          "155:         return NULL;",
          "156:     }",
          "157:     return tcti_ctx;",
          "158: }",
          "159: #endif",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "226:     case SOCKET_TCTI:",
          "227:         return tcti_socket_init (options->socket_address,",
          "228:                                  options->socket_port);",
          "233: #endif",
          "234:     default:",
          "235:         return NULL;",
          "",
          "[Removed Lines]",
          "229: #endif",
          "230: #ifdef HAVE_TCTI_TABRMD",
          "231:     case TABRMD_TCTI:",
          "232:         return tcti_tabrmd_init ();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/options.c||lib/options.c": [
          "File: lib/options.c -> lib/options.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:         .name = \"socket\",",
          "67:         .type = SOCKET_TCTI,",
          "68:     },",
          "75: #endif",
          "76:     {",
          "77:         .name = \"unknown\",",
          "",
          "[Removed Lines]",
          "69: #endif",
          "70: #ifdef HAVE_TCTI_TABRMD",
          "71:     {",
          "72:         .name = \"tabrmd\",",
          "73:         .type = TABRMD_TCTI,",
          "74:     },",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "141:             return 2;",
          "142:         }",
          "143:         break;",
          "149: #endif",
          "150:     default:",
          "151:         fprintf (stderr, \"invalid TCTI, see --help\\n\");",
          "",
          "[Removed Lines]",
          "144: #endif",
          "145: #ifdef HAVE_TCTI_TABRMD",
          "146:     case TABRMD_TCTI:",
          "148:         break;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "254:             .flag    = NULL,",
          "255:             .val     = 'p',",
          "256:         },",
          "260: #endif",
          "261:         {",
          "262:             .name    = \"help\",",
          "",
          "[Removed Lines]",
          "257: #endif",
          "258: #ifdef HAVE_TCTI_TABRMD",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "335:                 return 2;",
          "336:             }",
          "337:         }   break;",
          "341: #endif",
          "342:         case 'h':",
          "343:             common_opts->help = true;",
          "",
          "[Removed Lines]",
          "338: #endif",
          "339: #ifdef HAVE_TCTI_TABRMD",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "379: #ifdef HAVE_TCTI_SOCK",
          "380:     printf (\"  address:          %s\\n\", opts->socket_address);",
          "381:     printf (\"  port:             %d\\n\", opts->socket_port);",
          "385: #endif",
          "386:     printf (\"  help:             %s\\n\", opts->help    ? \"true\" : \"false\");",
          "387:     printf (\"  verbose:          %s\\n\", opts->verbose ? \"true\" : \"false\");",
          "",
          "[Removed Lines]",
          "382: #endif",
          "383: #ifdef HAVE_TCTI_TABRMD",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "lib/options.h||lib/options.h": [
          "File: lib/options.h -> lib/options.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "51:   #define TCTI_DEFAULT      SOCKET_TCTI",
          "52:   #define TCTI_DEFAULT_STR  \"socket\"",
          "53: #elif  HAVE_TCTI_DEV",
          "",
          "[Removed Lines]",
          "47: #ifdef HAVE_TCTI_TABRMD",
          "48:   #define TCTI_DEFAULT      TABRMD_TCTI",
          "49:   #define TCTI_DEFAULT_STR  \"tabrmd\"",
          "50: #elif HAVE_TCTI_SOCK",
          "",
          "[Added Lines]",
          "47: #ifdef HAVE_TCTI_SOCK",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84: #endif",
          "85: #ifdef HAVE_TCTI_SOCK",
          "86:     SOCKET_TCTI,",
          "90: #endif",
          "91:     UNKNOWN_TCTI,",
          "92:     N_TCTI,",
          "",
          "[Removed Lines]",
          "87: #endif",
          "88: #ifdef HAVE_TCTI_TABRMD",
          "89:     TABRMD_TCTI,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "man/tcti-options.troff||man/tcti-options.troff": [
          "File: man/tcti-options.troff -> man/tcti-options.troff",
          "--- Hunk 1 ---",
          "[Context before]",
          "11: Supported TCTIs are",
          "12: .if (\\n[HAVE_TCTI_DEV]) or \\fB\\*(lqdevice\\*(rq\\fR",
          "13: .if (\\n[HAVE_TCTI_SOCK]) or \\fB\\*(lqsocket\\*(rq\\fR",
          "15: \\[char46]",
          "16: .TP",
          "17: .if (\\n[HAVE_TCTI_DEV]) \\{",
          "",
          "[Removed Lines]",
          "14: .if (\\n[HAVE_TCTI_TABRMD]) or \\fB\\*(lqtabrmd\\*(rq\\fR",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}