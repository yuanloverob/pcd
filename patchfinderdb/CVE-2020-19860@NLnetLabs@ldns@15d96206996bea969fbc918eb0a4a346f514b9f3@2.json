{
  "cve_id": "CVE-2020-19860",
  "cve_desc": "When ldns version 1.7.1 verifies a zone file, the ldns_rr_new_frm_str_internal function has a heap out of bounds read vulnerability. An attacker can leak information on the heap by constructing a zone file payload.",
  "repo": "NLnetLabs/ldns",
  "patch_hash": "15d96206996bea969fbc918eb0a4a346f514b9f3",
  "patch_info": {
    "commit_hash": "15d96206996bea969fbc918eb0a4a346f514b9f3",
    "repo": "NLnetLabs/ldns",
    "commit_url": "https://github.com/NLnetLabs/ldns/commit/15d96206996bea969fbc918eb0a4a346f514b9f3",
    "files": [
      "Changelog",
      "rr.c"
    ],
    "message": "* bugfix #70: heap Out-of-bound Read vulnerability in   rr_frm_str_internal reported by pokerfacett.",
    "before_after_code_files": [
      "rr.c||rr.c"
    ]
  },
  "patch_diff": {
    "rr.c||rr.c": [
      "File: rr.c -> rr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "365:     ldns_buffer_remaining(rd_buf) > 0){",
      "369:     ldns_buffer_skip(rd_buf, 1);",
      "370:    }",
      "373:     delimiters = \"\\\"\\0\";",
      "374:     ldns_buffer_skip(rd_buf, 1);",
      "375:     quoted = true;",
      "377:      == LDNS_RDF_TYPE_LONG_STR) {",
      "379:     status = LDNS_STATUS_SYNTAX_RDATA_ERR;",
      "",
      "[Removed Lines]",
      "368:    while (*(ldns_buffer_current(rd_buf)) == ' ') {",
      "372:    if (*(ldns_buffer_current(rd_buf)) == '\\\"') {",
      "376:    } else if (ldns_rr_descriptor_field_type(desc, r_cnt)",
      "",
      "[Added Lines]",
      "368:    while (sldns_buffer_remaining(strbuf) > 0 &&",
      "373:    if (sldns_buffer_remaining(strbuf) > 0 &&",
      "378:    }",
      "379:    if (!quoted && ldns_rr_descriptor_field_type(desc, r_cnt)",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "44f6700bb619c87078403e3b5f1eba6fe5f994c5",
      "candidate_info": {
        "commit_hash": "44f6700bb619c87078403e3b5f1eba6fe5f994c5",
        "repo": "NLnetLabs/ldns",
        "commit_url": "https://github.com/NLnetLabs/ldns/commit/44f6700bb619c87078403e3b5f1eba6fe5f994c5",
        "files": [
          "test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.Makefile.in",
          "test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.c",
          "test/13-unit-tests-base.tpkg/13-unit-tests-base.Makefile.in",
          "test/13-unit-tests-base.tpkg/13-unit-tests-base.c",
          "test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.Makefile.in",
          "test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.c"
        ],
        "message": "Try to get rid of all warnings and errors in the travis tests",
        "before_after_code_files": [
          "test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.Makefile.in||test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.Makefile.in",
          "test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.c||test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.c",
          "test/13-unit-tests-base.tpkg/13-unit-tests-base.Makefile.in||test/13-unit-tests-base.tpkg/13-unit-tests-base.Makefile.in",
          "test/13-unit-tests-base.tpkg/13-unit-tests-base.c||test/13-unit-tests-base.tpkg/13-unit-tests-base.c",
          "test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.Makefile.in||test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.Makefile.in",
          "test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.c||test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NLnetLabs/ldns/pull/144"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.Makefile.in||test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.Makefile.in": [
          "File: test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.Makefile.in -> test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: exec_prefix = @exec_prefix@",
          "9: bindir = @bindir@",
          "10: mandir = @mandir@",
          "12: CC = @CC@",
          "13: CFLAGS = @CFLAGS@",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: datarootdir = @datarootdir@",
          "",
          "---------------"
        ],
        "test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.c||test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.c": [
          "File: test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.c -> test/12-unit-tests-dnssec.tpkg/12-unit-tests-dnssec.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: }",
          "39: ldns_status",
          "41: {",
          "42:  const char *key_str;",
          "43:  uint16_t expected_keytag;",
          "",
          "[Removed Lines]",
          "40: check_ldns_calc_keytag()",
          "",
          "[Added Lines]",
          "40: check_ldns_calc_keytag(void)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: }",
          "76: ldns_status",
          "78: {",
          "79:  const char rr_str1[] = \"bla.nl. 1000 IN NS ns1.bla.nl.\";",
          "80:  const char rr_str2[] = \"BLA.NL. 1000 IN NS NS1.BlA.Nl.\";",
          "",
          "[Removed Lines]",
          "77: check_ldns_canonicalization()",
          "",
          "[Added Lines]",
          "77: check_ldns_canonicalization(void)",
          "",
          "---------------"
        ],
        "test/13-unit-tests-base.tpkg/13-unit-tests-base.Makefile.in||test/13-unit-tests-base.tpkg/13-unit-tests-base.Makefile.in": [
          "File: test/13-unit-tests-base.tpkg/13-unit-tests-base.Makefile.in -> test/13-unit-tests-base.tpkg/13-unit-tests-base.Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: exec_prefix = @exec_prefix@",
          "9: bindir = @bindir@",
          "10: mandir = @mandir@",
          "12: CC = @CC@",
          "13: CFLAGS = @CFLAGS@",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: dataroot = @dataroot@",
          "",
          "---------------"
        ],
        "test/13-unit-tests-base.tpkg/13-unit-tests-base.c||test/13-unit-tests-base.tpkg/13-unit-tests-base.c": [
          "File: test/13-unit-tests-base.tpkg/13-unit-tests-base.c -> test/13-unit-tests-base.tpkg/13-unit-tests-base.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:  data_len = ldns_b64_pton_calculate_size(strlen(str));",
          "70:  result = ldns_b64_pton(str, data, data_len);",
          "",
          "[Removed Lines]",
          "68:  data = malloc(data_len);",
          "",
          "[Added Lines]",
          "68:  if(!(data = malloc(data_len)))",
          "69:   return -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:    }",
          "103:   }",
          "104:  }",
          "106:  return result;",
          "107: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:  free(data);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "156:  data_len = ldns_b32_pton_calculate_size(strlen(str))  +  10;",
          "160:  result = ldns_b32_pton(str, strlen(str), data, data_len);",
          "",
          "[Removed Lines]",
          "158:  data = malloc(data_len);",
          "",
          "[Added Lines]",
          "159:  if (!(data = malloc(data_len)))",
          "160:   return -1;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "192:    }",
          "193:   }",
          "194:  }",
          "196:  return result;",
          "197: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "197:  free(data);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "248:  data_len = ldns_b32_pton_calculate_size(strlen(str)) + 10;",
          "252:  result = ldns_b32_pton_extended_hex(str, strlen(str), data, data_len);",
          "",
          "[Removed Lines]",
          "250:  data = malloc(data_len);",
          "",
          "[Added Lines]",
          "252:  if (!(data = malloc(data_len)))",
          "253:   return -1;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "284:    }",
          "285:   }",
          "286:  }",
          "288:  return result;",
          "289: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "290:  free(data);",
          "",
          "---------------"
        ],
        "test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.Makefile.in||test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.Makefile.in": [
          "File: test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.Makefile.in -> test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: exec_prefix = @exec_prefix@",
          "9: bindir = @bindir@",
          "10: mandir = @mandir@",
          "12: CC = @CC@",
          "13: CFLAGS = @CFLAGS@",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "11: dataroot = @dataroot@",
          "",
          "---------------"
        ],
        "test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.c||test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.c": [
          "File: test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.c -> test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13: }",
          "15: static int",
          "17: {",
          "18:  int i;",
          "19:  int dcount = 0;",
          "",
          "[Removed Lines]",
          "16: check_desc(const ldns_rr_descriptor* desc, int type)",
          "",
          "[Added Lines]",
          "16: check_desc(const ldns_rr_descriptor* desc, ldns_rr_type type)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "49: }",
          "51: static int",
          "53: {",
          "57:  for(i=start; i<end; i++) {",
          "58:   if(!check_desc(ldns_rr_descript(i), i)) {",
          "60:    return 0;",
          "61:   }",
          "62:  }",
          "",
          "[Removed Lines]",
          "52: check_descriptors()",
          "54:  int start = 0;",
          "55:  int end = LDNS_RDATA_FIELD_DESCRIPTORS_COMMON /* 250 */;",
          "56:  int i;",
          "59:    printf(\"Type %d failed\\n\", i);",
          "",
          "[Added Lines]",
          "52: check_descriptors(void)",
          "54:  ldns_rr_type start = LDNS_RR_TYPE_FIRST;",
          "55:  ldns_rr_type end = LDNS_RDATA_FIELD_DESCRIPTORS_COMMON /* 250 */;",
          "56:  ldns_rr_type i;",
          "59:    printf(\"Type %d failed\\n\", (int)i);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af391bada57346f777bf141c370d2708a444ba82",
      "candidate_info": {
        "commit_hash": "af391bada57346f777bf141c370d2708a444ba82",
        "repo": "NLnetLabs/ldns",
        "commit_url": "https://github.com/NLnetLabs/ldns/commit/af391bada57346f777bf141c370d2708a444ba82",
        "files": [
          "test/13-unit-tests-base.tpkg/13-unit-tests-base.Makefile.in",
          "test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.Makefile.in"
        ],
        "message": "Fix last warnings",
        "before_after_code_files": [
          "test/13-unit-tests-base.tpkg/13-unit-tests-base.Makefile.in||test/13-unit-tests-base.tpkg/13-unit-tests-base.Makefile.in",
          "test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.Makefile.in||test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.Makefile.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NLnetLabs/ldns/pull/144"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/13-unit-tests-base.tpkg/13-unit-tests-base.Makefile.in||test/13-unit-tests-base.tpkg/13-unit-tests-base.Makefile.in": [
          "File: test/13-unit-tests-base.tpkg/13-unit-tests-base.Makefile.in -> test/13-unit-tests-base.tpkg/13-unit-tests-base.Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: exec_prefix = @exec_prefix@",
          "9: bindir = @bindir@",
          "10: mandir = @mandir@",
          "13: CC = @CC@",
          "14: CFLAGS = @CFLAGS@",
          "",
          "[Removed Lines]",
          "11: dataroot = @dataroot@",
          "",
          "[Added Lines]",
          "11: datarootdir = @datarootdir@",
          "",
          "---------------"
        ],
        "test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.Makefile.in||test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.Makefile.in": [
          "File: test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.Makefile.in -> test/15-unit-tests-rrtypes.tpkg/15-unit-tests-rrtypes.Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "8: exec_prefix = @exec_prefix@",
          "9: bindir = @bindir@",
          "10: mandir = @mandir@",
          "13: CC = @CC@",
          "14: CFLAGS = @CFLAGS@",
          "",
          "[Removed Lines]",
          "11: dataroot = @dataroot@",
          "",
          "[Added Lines]",
          "11: datarootdir = @datarootdir@",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9073d9fc313b19f51a5aa160584f2bdccda637a",
      "candidate_info": {
        "commit_hash": "f9073d9fc313b19f51a5aa160584f2bdccda637a",
        "repo": "NLnetLabs/ldns",
        "commit_url": "https://github.com/NLnetLabs/ldns/commit/f9073d9fc313b19f51a5aa160584f2bdccda637a",
        "files": [
          "Changelog",
          "configure.ac",
          "tsig.c"
        ],
        "message": "* Detect fixed time memory compare for openssl 0.9.8.",
        "before_after_code_files": [
          "configure.ac||configure.ac",
          "tsig.c||tsig.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NLnetLabs/ldns/pull/144"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "configure.ac||configure.ac": [
          "File: configure.ac -> configure.ac",
          "--- Hunk 1 ---",
          "[Context before]",
          "332: else",
          "333:  AC_MSG_RESULT([no])",
          "334: fi",
          "337: # for macosx, see if glibtool exists and use that",
          "338: # BSD's need to know the version...",
          "",
          "[Removed Lines]",
          "335: AC_CHECK_FUNCS([EVP_sha256 EVP_sha384 EVP_sha512 ENGINE_load_cryptodev EVP_PKEY_keygen ECDSA_SIG_get0 EVP_MD_CTX_new EVP_PKEY_base_id DSA_SIG_set0 DSA_SIG_get0 EVP_dss1 DSA_get0_pqg DSA_get0_key OPENSSL_init_ssl OPENSSL_init_crypto ERR_load_crypto_strings])",
          "",
          "[Added Lines]",
          "335: AC_CHECK_FUNCS([EVP_sha256 EVP_sha384 EVP_sha512 ENGINE_load_cryptodev EVP_PKEY_keygen ECDSA_SIG_get0 EVP_MD_CTX_new EVP_PKEY_base_id DSA_SIG_set0 DSA_SIG_get0 EVP_dss1 DSA_get0_pqg DSA_get0_key OPENSSL_init_ssl OPENSSL_init_crypto ERR_load_crypto_strings CRYPTO_memcmp])",
          "",
          "---------------"
        ],
        "tsig.c||tsig.c": [
          "File: tsig.c -> tsig.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "354:   return false;",
          "355:  }",
          "358:   ldns_rdf_size(my_mac_rdf)) == 0) {",
          "359:   ldns_rdf_deep_free(my_mac_rdf);",
          "360:   return true;",
          "",
          "[Removed Lines]",
          "357:  if(CRYPTO_memcmp(ldns_rdf_data(pkt_mac_rdf), ldns_rdf_data(my_mac_rdf),",
          "",
          "[Added Lines]",
          "357:  if(",
          "358: #ifdef HAVE_CRYPTO_MEMCMP",
          "359:      CRYPTO_memcmp",
          "360: #else",
          "361:      memcmp",
          "362: #endif",
          "363:   (ldns_rdf_data(pkt_mac_rdf), ldns_rdf_data(my_mac_rdf),",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85732f000f73ba71f7b62e374891acd2fc70c334",
      "candidate_info": {
        "commit_hash": "85732f000f73ba71f7b62e374891acd2fc70c334",
        "repo": "NLnetLabs/ldns",
        "commit_url": "https://github.com/NLnetLabs/ldns/commit/85732f000f73ba71f7b62e374891acd2fc70c334",
        "files": [
          "Changelog",
          "examples/ldns-compare-zones.c",
          "examples/ldns-gen-zone.c",
          "examples/ldns-read-zone.c",
          "examples/ldns-verify-zone.c"
        ],
        "message": "Issue #38 Unclear error message from ldns-read-zone",
        "before_after_code_files": [
          "examples/ldns-compare-zones.c||examples/ldns-compare-zones.c",
          "examples/ldns-gen-zone.c||examples/ldns-gen-zone.c",
          "examples/ldns-read-zone.c||examples/ldns-read-zone.c",
          "examples/ldns-verify-zone.c||examples/ldns-verify-zone.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NLnetLabs/ldns/pull/144"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/ldns-compare-zones.c||examples/ldns-compare-zones.c": [
          "File: examples/ldns-compare-zones.c -> examples/ldns-compare-zones.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:         LDNS_RR_CLASS_IN, &line_nr1);",
          "134:  if (s != LDNS_STATUS_OK) {",
          "135:   fclose(fp1);",
          "137:       fn1,",
          "138:       ldns_get_errorstr_by_id(s),",
          "139:       line_nr1);",
          "",
          "[Removed Lines]",
          "136:   fprintf(stderr, \"%s: %s at %d\\n\",",
          "",
          "[Added Lines]",
          "136:   fprintf(stderr, \"%s: %s at line %d\\n\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "153:  if (s != LDNS_STATUS_OK) {",
          "154:   ldns_zone_deep_free(z1);",
          "155:   fclose(fp2);",
          "157:       fn2,",
          "158:       ldns_get_errorstr_by_id(s),",
          "159:       line_nr2);",
          "",
          "[Removed Lines]",
          "156:   fprintf(stderr, \"%s: %s at %d\\n\",",
          "",
          "[Added Lines]",
          "156:   fprintf(stderr, \"%s: %s at line %d\\n\",",
          "",
          "---------------"
        ],
        "examples/ldns-gen-zone.c||examples/ldns-gen-zone.c": [
          "File: examples/ldns-gen-zone.c -> examples/ldns-gen-zone.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "169:         }",
          "170:         s = ldns_zone_new_frm_fp_l(&z, fp, origin, 0, LDNS_RR_CLASS_IN, &line_nr);",
          "171:         if (s != LDNS_STATUS_OK) {",
          "173:                 exit(EXIT_FAILURE);",
          "174:         }",
          "175:         if (!ldns_zone_soa(z)) {",
          "",
          "[Removed Lines]",
          "172:                 fprintf(stderr, \"%s at %d\\n\", ldns_get_errorstr_by_id(s), line_nr);",
          "",
          "[Added Lines]",
          "172:                 fprintf(stderr, \"%s at line %d\\n\", ldns_get_errorstr_by_id(s), line_nr);",
          "",
          "---------------"
        ],
        "examples/ldns-read-zone.c||examples/ldns-read-zone.c": [
          "File: examples/ldns-read-zone.c -> examples/ldns-read-zone.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "259:  fclose(fp);",
          "260:  if (s != LDNS_STATUS_OK) {",
          "262:     ldns_get_errorstr_by_id(s),",
          "263:     line_nr);",
          "264:                 exit(EXIT_FAILURE);",
          "",
          "[Removed Lines]",
          "261:   fprintf(stderr, \"%s at %d\\n\",",
          "",
          "[Added Lines]",
          "261:   fprintf(stderr, \"%s at line %d\\n\",",
          "",
          "---------------"
        ],
        "examples/ldns-verify-zone.c||examples/ldns-verify-zone.c": [
          "File: examples/ldns-verify-zone.c -> examples/ldns-verify-zone.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "935:   ldns_dnssec_zone_deep_free(dnssec_zone);",
          "936:  } else {",
          "937:   if (verbosity > 0) {",
          "939:     ldns_get_errorstr_by_id(s), line_nr);",
          "940:   }",
          "941:                 exit(EXIT_FAILURE);",
          "",
          "[Removed Lines]",
          "938:    fprintf(myerr, \"%s at %d\\n\",",
          "",
          "[Added Lines]",
          "938:    fprintf(myerr, \"%s at line %d\\n\",",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ea926ab90860e9a95c70751dc405e4ef859e2abf",
      "candidate_info": {
        "commit_hash": "ea926ab90860e9a95c70751dc405e4ef859e2abf",
        "repo": "NLnetLabs/ldns",
        "commit_url": "https://github.com/NLnetLabs/ldns/commit/ea926ab90860e9a95c70751dc405e4ef859e2abf",
        "files": [
          "Changelog",
          "examples/ldns-testpkts.c"
        ],
        "message": "* Fix memory leak in examples/ldns-testns handle_tcp routine.",
        "before_after_code_files": [
          "examples/ldns-testpkts.c||examples/ldns-testpkts.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/NLnetLabs/ldns/pull/144"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/ldns-testpkts.c||examples/ldns-testpkts.c": [
          "File: examples/ldns-testpkts.c -> examples/ldns-testpkts.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "834:  status = ldns_wire2pkt(&query_pkt, inbuf, (size_t)inlen);",
          "835:  if (status != LDNS_STATUS_OK) {",
          "836:   verbose(1, \"Got bad packet: %s\\n\", ldns_get_errorstr_by_id(status));",
          "838:   return;",
          "839:  }",
          "",
          "[Removed Lines]",
          "837:   ldns_rdf_free(stop_command);",
          "",
          "[Added Lines]",
          "837:   ldns_rdf_deep_free(stop_command);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "855:  if(!entry || !entry->reply_list) {",
          "856:   verbose(1, \"no answer packet for this query, no reply.\\n\");",
          "857:   ldns_pkt_free(query_pkt);",
          "859:   return;",
          "860:  }",
          "861:  for(p = entry->reply_list; p; p = p->next)",
          "",
          "[Removed Lines]",
          "858:   ldns_rdf_free(stop_command);",
          "",
          "[Added Lines]",
          "858:   ldns_rdf_deep_free(stop_command);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "874:     if (status != LDNS_STATUS_OK) {",
          "875:      verbose(1, \"Error creating answer: %s\\n\", ldns_get_errorstr_by_id(status));",
          "876:      ldns_pkt_free(query_pkt);",
          "878:      return;",
          "879:     }",
          "880:     ldns_pkt_free(answer_pkt);",
          "",
          "[Removed Lines]",
          "877:      ldns_rdf_free(stop_command);",
          "",
          "[Added Lines]",
          "877:      ldns_rdf_deep_free(stop_command);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "899:    if (status != LDNS_STATUS_OK) {",
          "900:     verbose(1, \"Error creating answer: %s\\n\", ldns_get_errorstr_by_id(status));",
          "901:     ldns_pkt_free(query_pkt);",
          "903:     return;",
          "904:    }",
          "905:    ldns_pkt_free(answer_pkt);",
          "",
          "[Removed Lines]",
          "902:     ldns_rdf_free(stop_command);",
          "",
          "[Added Lines]",
          "902:     ldns_rdf_deep_free(stop_command);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "922:   answer_size = 0;",
          "923:  }",
          "924:  ldns_pkt_free(query_pkt);",
          "926: }",
          "",
          "[Removed Lines]",
          "925:  ldns_rdf_free(stop_command);",
          "",
          "[Added Lines]",
          "925:  ldns_rdf_deep_free(stop_command);",
          "",
          "---------------"
        ]
      }
    }
  ]
}