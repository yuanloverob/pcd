{
  "cve_id": "CVE-2022-21733",
  "cve_desc": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `StringNGrams` can be used to trigger a denial of service attack by causing an out of memory condition after an integer overflow. We are missing a validation on `pad_witdh` and that result in computing a negative value for `ngram_width` which is later used to allocate parts of the output. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.",
  "repo": "tensorflow/tensorflow",
  "patch_hash": "f68fdab93fb7f4ddb4eb438c8fe052753c9413e8",
  "patch_info": {
    "commit_hash": "f68fdab93fb7f4ddb4eb438c8fe052753c9413e8",
    "repo": "tensorflow/tensorflow",
    "commit_url": "https://github.com/tensorflow/tensorflow/commit/f68fdab93fb7f4ddb4eb438c8fe052753c9413e8",
    "files": [
      "tensorflow/core/kernels/string_ngrams_op.cc",
      "tensorflow/python/ops/raw_ops_test.py"
    ],
    "message": "Add a check for pad width to be a positive value.\n\nPiperOrigin-RevId: 413275853\nChange-Id: I261a8db9dabf5ce48a806a9e58129080c9fac619",
    "before_after_code_files": [
      "tensorflow/core/kernels/string_ngrams_op.cc||tensorflow/core/kernels/string_ngrams_op.cc",
      "tensorflow/python/ops/raw_ops_test.py||tensorflow/python/ops/raw_ops_test.py"
    ]
  },
  "patch_diff": {
    "tensorflow/core/kernels/string_ngrams_op.cc||tensorflow/core/kernels/string_ngrams_op.cc": [
      "File: tensorflow/core/kernels/string_ngrams_op.cc -> tensorflow/core/kernels/string_ngrams_op.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "155:         int ngram_width = data_length + 2 * pad_width_;",
      "156:         auto output_start = &ngrams_data[output_start_idx];",
      "157:         int num_ngrams = 1;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "159:         OP_REQUIRES(",
      "160:             context, pad_width_ >= 0,",
      "161:             errors::InvalidArgument(\"Pad width should be >= 0 when \"",
      "162:                                     \"preserve_short_sequences is True and \"",
      "163:                                     \"ngram_widths are not provided, got \",",
      "164:                                     pad_width_));",
      "",
      "---------------"
    ],
    "tensorflow/python/ops/raw_ops_test.py||tensorflow/python/ops/raw_ops_test.py": [
      "File: tensorflow/python/ops/raw_ops_test.py -> tensorflow/python/ops/raw_ops_test.py",
      "--- Hunk 1 ---",
      "[Context before]",
      "30: @test_util.run_all_in_graph_and_eager_modes",
      "32: class RawOpsTest(test.TestCase, parameterized.TestCase):",
      "34:   def testSimple(self):",
      "",
      "[Removed Lines]",
      "31: @test_util.disable_tfrt",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "63:   @parameterized.parameters([[0, 8]], [[-1, 6]])",
      "64:   def testStringNGramsBadDataSplits(self, splits):",
      "65:     data = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"]",
      "68:       self.evaluate(",
      "69:           gen_string_ops.string_n_grams(",
      "70:               data=data,",
      "",
      "[Removed Lines]",
      "66:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
      "67:                                 \"Invalid split value\"):",
      "",
      "[Added Lines]",
      "65:     with self.assertRaisesRegex(",
      "66:         errors.InvalidArgumentError,",
      "67:         r\"Invalid split value|First split value must be 0\"):",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "76:               pad_width=0,",
      "77:               preserve_short_sequences=False))",
      "79:   def testGetSessionHandle(self):",
      "80:     if context.executing_eagerly():",
      "81:       with self.assertRaisesRegex(",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "79:   def testStringSplit(self):",
      "80:     data = [\"123456\"]",
      "81:     data_splits = [0, 1]",
      "82:     separator = \"a\" * 15",
      "83:     ngram_widths = []",
      "84:     pad_width = -5",
      "85:     left_pad = right_pad = \"\"",
      "86:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
      "87:                                 \"Pad width should be >= 0\"):",
      "88:       self.evaluate(gen_string_ops.string_n_grams(",
      "89:           data=data,",
      "90:           data_splits=data_splits,",
      "91:           separator=separator,",
      "92:           ngram_widths=ngram_widths,",
      "93:           left_pad=left_pad,",
      "94:           right_pad=right_pad,",
      "95:           pad_width=pad_width,",
      "96:           preserve_short_sequences=True))",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "07c5033762afc037e4cdc60fb72812f48cf79c34",
      "candidate_info": {
        "commit_hash": "07c5033762afc037e4cdc60fb72812f48cf79c34",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/07c5033762afc037e4cdc60fb72812f48cf79c34",
        "files": [
          "tensorflow/core/kernels/string_ngrams_op.cc",
          "tensorflow/python/ops/raw_ops_test.py"
        ],
        "message": "Add a check for pad width to be a positive value.\n\nPiperOrigin-RevId: 413275853\nChange-Id: I261a8db9dabf5ce48a806a9e58129080c9fac619",
        "before_after_code_files": [
          "tensorflow/core/kernels/string_ngrams_op.cc||tensorflow/core/kernels/string_ngrams_op.cc",
          "tensorflow/python/ops/raw_ops_test.py||tensorflow/python/ops/raw_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/string_ngrams_op.cc||tensorflow/core/kernels/string_ngrams_op.cc",
            "tensorflow/python/ops/raw_ops_test.py||tensorflow/python/ops/raw_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/string_ngrams_op.cc||tensorflow/core/kernels/string_ngrams_op.cc",
            "tensorflow/python/ops/raw_ops_test.py||tensorflow/python/ops/raw_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/string_ngrams_op.cc||tensorflow/core/kernels/string_ngrams_op.cc": [
          "File: tensorflow/core/kernels/string_ngrams_op.cc -> tensorflow/core/kernels/string_ngrams_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:         int ngram_width = data_length + 2 * pad_width_;",
          "156:         auto output_start = &ngrams_data[output_start_idx];",
          "157:         int num_ngrams = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:         OP_REQUIRES(",
          "160:             context, pad_width_ >= 0,",
          "161:             errors::InvalidArgument(\"Pad width should be >= 0 when \"",
          "162:                                     \"preserve_short_sequences is True and \"",
          "163:                                     \"ngram_widths are not provided, got \",",
          "164:                                     pad_width_));",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/raw_ops_test.py||tensorflow/python/ops/raw_ops_test.py": [
          "File: tensorflow/python/ops/raw_ops_test.py -> tensorflow/python/ops/raw_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: @test_util.run_all_in_graph_and_eager_modes",
          "36: class RawOpsTest(test.TestCase, parameterized.TestCase):",
          "38:   def testSimple(self):",
          "",
          "[Removed Lines]",
          "35: @test_util.disable_tfrt",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   @parameterized.parameters([[0, 8]], [[-1, 6]])",
          "68:   def testStringNGramsBadDataSplits(self, splits):",
          "69:     data = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"]",
          "72:       self.evaluate(",
          "73:           gen_string_ops.string_n_grams(",
          "74:               data=data,",
          "",
          "[Removed Lines]",
          "70:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "71:                                 \"Invalid split value\"):",
          "",
          "[Added Lines]",
          "69:     with self.assertRaisesRegex(",
          "70:         errors.InvalidArgumentError,",
          "71:         r\"Invalid split value|First split value must be 0\"):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:               pad_width=0,",
          "81:               preserve_short_sequences=False))",
          "83:   def testGetSessionHandle(self):",
          "84:     if context.executing_eagerly():",
          "85:       with self.assertRaisesRegex(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:   def testStringSplit(self):",
          "84:     data = [\"123456\"]",
          "85:     data_splits = [0, 1]",
          "86:     separator = \"a\" * 15",
          "87:     ngram_widths = []",
          "88:     pad_width = -5",
          "89:     left_pad = right_pad = \"\"",
          "90:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "91:                                 \"Pad width should be >= 0\"):",
          "92:       self.evaluate(gen_string_ops.string_n_grams(",
          "93:           data=data,",
          "94:           data_splits=data_splits,",
          "95:           separator=separator,",
          "96:           ngram_widths=ngram_widths,",
          "97:           left_pad=left_pad,",
          "98:           right_pad=right_pad,",
          "99:           pad_width=pad_width,",
          "100:           preserve_short_sequences=True))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c61b184b358b574f7ac9e3f587d3ee71fbc1d2d7",
      "candidate_info": {
        "commit_hash": "c61b184b358b574f7ac9e3f587d3ee71fbc1d2d7",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/c61b184b358b574f7ac9e3f587d3ee71fbc1d2d7",
        "files": [
          "tensorflow/core/kernels/string_ngrams_op.cc",
          "tensorflow/python/ops/raw_ops_test.py"
        ],
        "message": "Add a check for pad width to be a positive value.\n\nPiperOrigin-RevId: 413275853\nChange-Id: I261a8db9dabf5ce48a806a9e58129080c9fac619",
        "before_after_code_files": [
          "tensorflow/core/kernels/string_ngrams_op.cc||tensorflow/core/kernels/string_ngrams_op.cc",
          "tensorflow/python/ops/raw_ops_test.py||tensorflow/python/ops/raw_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/string_ngrams_op.cc||tensorflow/core/kernels/string_ngrams_op.cc",
            "tensorflow/python/ops/raw_ops_test.py||tensorflow/python/ops/raw_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/string_ngrams_op.cc||tensorflow/core/kernels/string_ngrams_op.cc",
            "tensorflow/python/ops/raw_ops_test.py||tensorflow/python/ops/raw_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/string_ngrams_op.cc||tensorflow/core/kernels/string_ngrams_op.cc": [
          "File: tensorflow/core/kernels/string_ngrams_op.cc -> tensorflow/core/kernels/string_ngrams_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:         int ngram_width = data_length + 2 * pad_width_;",
          "156:         auto output_start = &ngrams_data[output_start_idx];",
          "157:         int num_ngrams = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:         OP_REQUIRES(",
          "160:             context, pad_width_ >= 0,",
          "161:             errors::InvalidArgument(\"Pad width should be >= 0 when \"",
          "162:                                     \"preserve_short_sequences is True and \"",
          "163:                                     \"ngram_widths are not provided, got \",",
          "164:                                     pad_width_));",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/raw_ops_test.py||tensorflow/python/ops/raw_ops_test.py": [
          "File: tensorflow/python/ops/raw_ops_test.py -> tensorflow/python/ops/raw_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: @test_util.run_all_in_graph_and_eager_modes",
          "36: class RawOpsTest(test.TestCase, parameterized.TestCase):",
          "38:   def testSimple(self):",
          "",
          "[Removed Lines]",
          "35: @test_util.disable_tfrt",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   @parameterized.parameters([[0, 8]], [[-1, 6]])",
          "68:   def testStringNGramsBadDataSplits(self, splits):",
          "69:     data = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"]",
          "72:       self.evaluate(",
          "73:           gen_string_ops.string_n_grams(",
          "74:               data=data,",
          "",
          "[Removed Lines]",
          "70:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "71:                                 \"Invalid split value\"):",
          "",
          "[Added Lines]",
          "69:     with self.assertRaisesRegex(",
          "70:         errors.InvalidArgumentError,",
          "71:         r\"Invalid split value|First split value must be 0\"):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:               pad_width=0,",
          "81:               preserve_short_sequences=False))",
          "83:   def testGetSessionHandle(self):",
          "84:     if context.executing_eagerly():",
          "85:       with self.assertRaisesRegex(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:   def testStringSplit(self):",
          "84:     data = [\"123456\"]",
          "85:     data_splits = [0, 1]",
          "86:     separator = \"a\" * 15",
          "87:     ngram_widths = []",
          "88:     pad_width = -5",
          "89:     left_pad = right_pad = \"\"",
          "90:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "91:                                 \"Pad width should be >= 0\"):",
          "92:       self.evaluate(gen_string_ops.string_n_grams(",
          "93:           data=data,",
          "94:           data_splits=data_splits,",
          "95:           separator=separator,",
          "96:           ngram_widths=ngram_widths,",
          "97:           left_pad=left_pad,",
          "98:           right_pad=right_pad,",
          "99:           pad_width=pad_width,",
          "100:           preserve_short_sequences=True))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0cc666d294ebc3e0b65c4ffe1dc4a9e8bd4f2edf",
      "candidate_info": {
        "commit_hash": "0cc666d294ebc3e0b65c4ffe1dc4a9e8bd4f2edf",
        "repo": "tensorflow/tensorflow",
        "commit_url": "https://github.com/tensorflow/tensorflow/commit/0cc666d294ebc3e0b65c4ffe1dc4a9e8bd4f2edf",
        "files": [
          "tensorflow/core/kernels/string_ngrams_op.cc",
          "tensorflow/python/ops/raw_ops_test.py"
        ],
        "message": "Add a check for pad width to be a positive value.\n\nPiperOrigin-RevId: 413275853\nChange-Id: I261a8db9dabf5ce48a806a9e58129080c9fac619",
        "before_after_code_files": [
          "tensorflow/core/kernels/string_ngrams_op.cc||tensorflow/core/kernels/string_ngrams_op.cc",
          "tensorflow/python/ops/raw_ops_test.py||tensorflow/python/ops/raw_ops_test.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "tensorflow/core/kernels/string_ngrams_op.cc||tensorflow/core/kernels/string_ngrams_op.cc",
            "tensorflow/python/ops/raw_ops_test.py||tensorflow/python/ops/raw_ops_test.py"
          ],
          "candidate": [
            "tensorflow/core/kernels/string_ngrams_op.cc||tensorflow/core/kernels/string_ngrams_op.cc",
            "tensorflow/python/ops/raw_ops_test.py||tensorflow/python/ops/raw_ops_test.py"
          ]
        }
      },
      "candidate_diff": {
        "tensorflow/core/kernels/string_ngrams_op.cc||tensorflow/core/kernels/string_ngrams_op.cc": [
          "File: tensorflow/core/kernels/string_ngrams_op.cc -> tensorflow/core/kernels/string_ngrams_op.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:         int ngram_width = data_length + 2 * pad_width_;",
          "156:         auto output_start = &ngrams_data[output_start_idx];",
          "157:         int num_ngrams = 1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "159:         OP_REQUIRES(",
          "160:             context, pad_width_ >= 0,",
          "161:             errors::InvalidArgument(\"Pad width should be >= 0 when \"",
          "162:                                     \"preserve_short_sequences is True and \"",
          "163:                                     \"ngram_widths are not provided, got \",",
          "164:                                     pad_width_));",
          "",
          "---------------"
        ],
        "tensorflow/python/ops/raw_ops_test.py||tensorflow/python/ops/raw_ops_test.py": [
          "File: tensorflow/python/ops/raw_ops_test.py -> tensorflow/python/ops/raw_ops_test.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: @test_util.run_all_in_graph_and_eager_modes",
          "36: class RawOpsTest(test.TestCase, parameterized.TestCase):",
          "38:   def testSimple(self):",
          "",
          "[Removed Lines]",
          "35: @test_util.disable_tfrt",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "67:   @parameterized.parameters([[0, 8]], [[-1, 6]])",
          "68:   def testStringNGramsBadDataSplits(self, splits):",
          "69:     data = [\"aa\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\"]",
          "72:       self.evaluate(",
          "73:           gen_string_ops.string_n_grams(",
          "74:               data=data,",
          "",
          "[Removed Lines]",
          "70:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "71:                                 \"Invalid split value\"):",
          "",
          "[Added Lines]",
          "69:     with self.assertRaisesRegex(",
          "70:         errors.InvalidArgumentError,",
          "71:         r\"Invalid split value|First split value must be 0\"):",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "80:               pad_width=0,",
          "81:               preserve_short_sequences=False))",
          "83:   def testGetSessionHandle(self):",
          "84:     if context.executing_eagerly():",
          "85:       with self.assertRaisesRegex(",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "83:   def testStringSplit(self):",
          "84:     data = [\"123456\"]",
          "85:     data_splits = [0, 1]",
          "86:     separator = \"a\" * 15",
          "87:     ngram_widths = []",
          "88:     pad_width = -5",
          "89:     left_pad = right_pad = \"\"",
          "90:     with self.assertRaisesRegex(errors.InvalidArgumentError,",
          "91:                                 \"Pad width should be >= 0\"):",
          "92:       self.evaluate(gen_string_ops.string_n_grams(",
          "93:           data=data,",
          "94:           data_splits=data_splits,",
          "95:           separator=separator,",
          "96:           ngram_widths=ngram_widths,",
          "97:           left_pad=left_pad,",
          "98:           right_pad=right_pad,",
          "99:           pad_width=pad_width,",
          "100:           preserve_short_sequences=True))",
          "",
          "---------------"
        ]
      }
    }
  ]
}