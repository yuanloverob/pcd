{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "725dd72400872da94dcfb6af48128905b93d57fe",
      "candidate_info": {
        "commit_hash": "725dd72400872da94dcfb6af48128905b93d57fe",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/725dd72400872da94dcfb6af48128905b93d57fe",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/where.c",
          "test/analyzeC.test"
        ],
        "message": "Ensure that the optional \"sz=N\" parameter that can be manually added to the end of an sqlite_stat1 entry does not have an N value that is too small. Ticket [e4598ecbdd18bd82]\n\nFossilOrigin-Name: 98357d8c1263920b33a3648ef9214a63c99728bafa7a8d3dd6a1241b2303fd42",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/where.c||src/where.c",
          "test/analyzeC.test||test/analyzeC.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 4f5b2d938194fab7627486e2ced633def2c90d9d3328e3700612feb9dbfa3d9a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1450:       if( sqlite3_strglob(\"unordered*\", z)==0 ){",
          "1451:         pIndex->bUnordered = 1;",
          "1452:       }else if( sqlite3_strglob(\"sz=[0-9]*\", z)==0 ){",
          "1454:       }else if( sqlite3_strglob(\"noskipscan*\", z)==0 ){",
          "1455:         pIndex->noSkipScan = 1;",
          "1456:       }",
          "",
          "[Removed Lines]",
          "1453:         pIndex->szIdxRow = sqlite3LogEst(sqlite3Atoi(z+3));",
          "",
          "[Added Lines]",
          "1453:         int sz = sqlite3Atoi(z+3);",
          "1454:         if( sz<2 ) sz = 2;",
          "1455:         pIndex->szIdxRow = sqlite3LogEst(sz);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2673:     rCostIdx = pNew->nOut + 1 + (15*pProbe->szIdxRow)/pSrc->pTab->szTabRow;",
          "2674:     pNew->rRun = sqlite3LogEstAdd(rLogSize, rCostIdx);",
          "2675:     if( (pNew->wsFlags & (WHERE_IDX_ONLY|WHERE_IPK))==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2673:     assert( pSrc->pTab->szTabRow>0 );",
          "",
          "---------------"
        ],
        "test/analyzeC.test||test/analyzeC.test": [
          "File: test/analyzeC.test -> test/analyzeC.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "132:   SELECT count(a) FROM t1;",
          "133: } {/.*INDEX t1ca.*/}",
          "136: # The sz=NNN parameter works even if there is other extraneous text",
          "137: # in the sqlite_stat1.stat column.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "135: # 2019-08-15.",
          "136: # Ticket https://www.sqlite.org/src/tktview/e4598ecbdd18bd82945f602901",
          "137: # The sz=N parameter in the sqlite_stat1 table needs to have a value of",
          "138: # 2 or more to avoid a division by zero in the query planner.",
          "139: #",
          "140: do_execsql_test 4.4 {",
          "141:   DROP TABLE IF EXISTS t44;",
          "142:   CREATE TABLE t44(a PRIMARY KEY);",
          "143:   INSERT INTO sqlite_stat1 VALUES('t44',null,'sz=0');",
          "144:   ANALYZE sqlite_master;",
          "145:   SELECT 0 FROM t44 WHERE a IN(1,2,3);",
          "146: } {}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8b738d086584191e8d2f44165f9f380610690e7f",
      "candidate_info": {
        "commit_hash": "8b738d086584191e8d2f44165f9f380610690e7f",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/8b738d086584191e8d2f44165f9f380610690e7f",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Enhance the command-line shell to accept bound parameters, using the TEMP table named \"$Parameters\" to look up the values for bound parameters.\n\nFossilOrigin-Name: 7c941ce5bcc872ec92cbe0e409fd773f44a5ab1f814e689ad57f756b911e2b96",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9da4fb59b28686630d63a79988b458726332cf06cc0e6e84d7c0a7600f5fcab0",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "2747: #endif",
          "2748: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2751: #define BIND_PARAM_TABLE \"$Parameters\"",
          "2765: static void bind_prepared_stmt(ShellState *pArg, sqlite3_stmt *pStmt){",
          "2766:   int nVar;",
          "2767:   int i;",
          "2768:   int rc;",
          "2769:   sqlite3_stmt *pQ = 0;",
          "2771:   nVar = sqlite3_bind_parameter_count(pStmt);",
          "2773:   if( sqlite3_table_column_metadata(pArg->db, \"TEMP\", BIND_PARAM_TABLE,",
          "2774:                                     \"key\", 0, 0, 0, 0, 0)!=SQLITE_OK ){",
          "2776:   }",
          "2777:   rc = sqlite3_prepare_v2(pArg->db,",
          "2778:           \"SELECT value FROM temp.\\\"\" BIND_PARAM_TABLE \"\\\"\"",
          "2779:           \" WHERE key=?1\", -1, &pQ, 0);",
          "2780:   if( rc || pQ==0 ) return;",
          "2781:   for(i=1; i<=nVar; i++){",
          "2782:     char zNum[30];",
          "2783:     const char *zVar = sqlite3_bind_parameter_name(pStmt, i);",
          "2784:     if( zVar==0 ){",
          "2785:       sqlite3_snprintf(sizeof(zNum),zNum,\"?%d\",i);",
          "2786:       zVar = zNum;",
          "2787:     }",
          "2788:     sqlite3_bind_text(pQ, 1, zVar, -1, SQLITE_STATIC);",
          "2789:     if( sqlite3_step(pQ)==SQLITE_ROW ){",
          "2790:       sqlite3_bind_value(pStmt, i, sqlite3_column_value(pQ, 0));",
          "2791:     }else{",
          "2792:       sqlite3_bind_null(pStmt, i);",
          "2793:     }",
          "2794:     sqlite3_reset(pQ);",
          "2795:   }",
          "2796:   sqlite3_finalize(pQ);",
          "2797: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3066:         }",
          "3067:       }",
          "3069:       exec_prepared_stmt(pArg, pStmt);",
          "3070:       explain_data_delete(pArg);",
          "3071:       eqp_render(pArg);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3118:       bind_prepared_stmt(pArg, pStmt);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "93673620ec4e31cc71443ec46889bb8f695d6548",
      "candidate_info": {
        "commit_hash": "93673620ec4e31cc71443ec46889bb8f695d6548",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/93673620ec4e31cc71443ec46889bb8f695d6548",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/wapptest.tcl"
        ],
        "message": "Have wapptest.tcl display the name, OS and architecture of the host.\n\nFossilOrigin-Name: c47e53b4d0f29628bd20ba3daf7e759c4bfed07710d982c095445c01376d57f5",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/wapptest.tcl||test/wapptest.tcl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cbf423656047f0cb5200be6981a205e0ae206eef8263aa686f4a3621fb07fb57",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/wapptest.tcl||test/wapptest.tcl": [
          "File: test/wapptest.tcl -> test/wapptest.tcl",
          "--- Hunk 1 ---",
          "[Context before]",
          "44:   # Either \"config\", \"running\" or \"stopped\":",
          "45:   set G(state) \"config\"",
          "46: }",
          "48: # Check to see if there are uncommitted changes in the SQLite source",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "47:   set G(host) \"(unknown host)\"",
          "48:   catch { set G(host) [exec hostname] }",
          "49:   append G(host) \" $::tcl_platform(os) $::tcl_platform(osVersion)\"",
          "50:   append G(host) \" $::tcl_platform(machine) $::tcl_platform(byteOrder)\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "283:     }",
          "284:   }",
          "286:   wapp-trim {",
          "287:       <div class=div id=controls>",
          "288:       <form action=\"control\" method=\"post\" name=\"control\">",
          "289:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291:   set host $G(host)",
          "293:       <div class=div>%string($host)</div>",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c04131ca7e485cd6e6f0741c14b2c570c65122c",
      "candidate_info": {
        "commit_hash": "2c04131ca7e485cd6e6f0741c14b2c570c65122c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2c04131ca7e485cd6e6f0741c14b2c570c65122c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/sqliteInt.h",
          "src/vdbe.c",
          "src/where.c",
          "src/wherecode.c"
        ],
        "message": "Experimental code that tries to put the computation of subqueries inside a subroutine, and reuse that subroutine if the same subquery is evaluated more than once.  Current code does not work for CHECK constraints.\n\nFossilOrigin-Name: 6c44838adbe5dc482bc010e91a6dd7a0f777c989f443dd600740d2c783208e0d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vdbe.c||src/vdbe.c",
          "src/where.c||src/where.c",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2b6494b1509f0d0189f98aa34c990eee99c775ff57826e79b2c5b0a12b4c97ad",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2544:     }",
          "2545:     assert( pX->op==TK_IN );",
          "2547:     if( rMayHaveNull ){",
          "2549:     }",
          "2550:     pParse->nQueryLoop = savedNQueryLoop;",
          "2553:   }",
          "2555:   if( aiMap && eType!=IN_INDEX_INDEX_ASC && eType!=IN_INDEX_INDEX_DESC ){",
          "",
          "[Removed Lines]",
          "2546:     sqlite3CodeRhsOfIN(pParse, pX, eType==IN_INDEX_ROWID);",
          "2548:       sqlite3SetHasNullFlag(v, pX->iTable, rMayHaveNull);",
          "2551:   }else{",
          "2552:     pX->iTable = iTab;",
          "",
          "[Added Lines]",
          "2547:     sqlite3CodeRhsOfIN(pParse, pX, iTab, eType==IN_INDEX_ROWID);",
          "2549:       sqlite3SetHasNullFlag(v, iTab, rMayHaveNull);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2658: void sqlite3CodeRhsOfIN(",
          "2662: ){",
          "2671:   assert( v!=0 );",
          "2683:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "2685:   }",
          "",
          "[Removed Lines]",
          "2670:   v = sqlite3GetVdbe(pParse);",
          "2684:     jmpIfDynamic = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2675:   v = pParse->pVdbe;",
          "2693:     if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2694:       sqlite3VdbeAddOp2(v, OP_Once, 0, sqlite3VdbeCurrentAddr(v)+3);",
          "2695:       sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn,",
          "2696:                         pExpr->y.sub.iAddr);",
          "2697:       sqlite3VdbeAddOp2(v, OP_OpenDup, iTab, pExpr->iTable);",
          "2698:       return;",
          "2699:     }",
          "2702:     ExprSetProperty(pExpr, EP_Subrtn);",
          "2703:     pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2704:     pExpr->y.sub.iAddr =",
          "2705:       sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2706:     VdbeComment((v, \"return address\"));",
          "2708:     addrOnce = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2696:   addr = sqlite3VdbeAddOp2(v, OP_OpenEphemeral,",
          "2697:       pExpr->iTable, (isRowid?0:nVal));",
          "2698:   pKeyInfo = isRowid ? 0 : sqlite3KeyInfoAlloc(pParse->db, nVal, 1);",
          "2700:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "",
          "[Removed Lines]",
          "2695:   pExpr->iTable = pParse->nTab++;",
          "",
          "[Added Lines]",
          "2719:   pExpr->iTable = iTab;",
          "2722: #ifdef SQLITE_ENABLE_EXPLAIN_COMMENTS",
          "2723:   if( ExprHasProperty(pExpr, EP_xIsSelect) ){",
          "2724:     VdbeComment((v, \"Result of SELECT %u\", pExpr->x.pSelect->selId));",
          "2725:   }else{",
          "2726:     VdbeComment((v, \"RHS of IN operator\"));",
          "2727:   }",
          "2728: #endif",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2706:     Select *pSelect = pExpr->x.pSelect;",
          "2707:     ExprList *pEList = pSelect->pEList;",
          "2711:     ));",
          "2712:     assert( !isRowid );",
          "",
          "[Removed Lines]",
          "2709:     ExplainQueryPlan((pParse, 1, \"%sLIST SUBQUERY\",",
          "2710:         jmpIfDynamic>=0?\"\":\"CORRELATED \"",
          "",
          "[Added Lines]",
          "2740:     ExplainQueryPlan((pParse, 1, \"%sLIST SUBQUERY %d\",",
          "2741:         addrOnce?\"\":\"CORRELATED \", pSelect->selId",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2778:       }",
          "",
          "[Removed Lines]",
          "2775:       if( jmpIfDynamic>=0 && !sqlite3ExprIsConstant(pE2) ){",
          "2776:         sqlite3VdbeChangeToNoop(v, jmpIfDynamic);",
          "2777:         jmpIfDynamic = -1;",
          "",
          "[Added Lines]",
          "2806:       if( addrOnce && !sqlite3ExprIsConstant(pE2) ){",
          "2807:         sqlite3VdbeChangeToNoop(v, addrOnce);",
          "2808:         addrOnce = 0;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2799:   if( pKeyInfo ){",
          "2800:     sqlite3VdbeChangeP4(v, addr, (void *)pKeyInfo, P4_KEYINFO);",
          "2801:   }",
          "2804:   }",
          "2805: }",
          "",
          "[Removed Lines]",
          "2802:   if( jmpIfDynamic>=0 ){",
          "2803:     sqlite3VdbeJumpHere(v, jmpIfDynamic);",
          "",
          "[Added Lines]",
          "2833:   if( addrOnce ){",
          "2834:     sqlite3VdbeJumpHere(v, addrOnce);",
          "2836:     sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2837:     sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2822: #ifndef SQLITE_OMIT_SUBQUERY",
          "2823: int sqlite3CodeSubselect(Parse *pParse, Expr *pExpr){",
          "2831:   assert( v!=0 );",
          "",
          "[Removed Lines]",
          "2830:   Vdbe *v = sqlite3GetVdbe(pParse);",
          "",
          "[Added Lines]",
          "2865:   Vdbe *v = pParse->pVdbe;",
          "2869:   if( ExprHasProperty(pExpr, EP_Subrtn) ){",
          "2870:     sqlite3VdbeAddOp2(v, OP_Gosub, pExpr->y.sub.regReturn, pExpr->y.sub.iAddr);",
          "2871:     return pExpr->iTable;",
          "2872:   }",
          "2875:   ExprSetProperty(pExpr, EP_Subrtn);",
          "2876:   pExpr->y.sub.regReturn = ++pParse->nMem;",
          "2877:   pExpr->y.sub.iAddr =",
          "2878:     sqlite3VdbeAddOp2(v, OP_Integer, 0, pExpr->y.sub.regReturn) + 1;",
          "2879:   VdbeComment((v, \"return address\"));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2843:   if( !ExprHasProperty(pExpr, EP_VarSelect) ){",
          "2845:   }",
          "",
          "[Removed Lines]",
          "2844:     jmpIfDynamic = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "[Added Lines]",
          "2892:     addrOnce = sqlite3VdbeAddOp0(v, OP_Once); VdbeCoverage(v);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2862:   pSel = pExpr->x.pSelect;",
          "2863:   ExplainQueryPlan((pParse, 1, \"%sSCALAR SUBQUERY\",",
          "2865:   nReg = pExpr->op==TK_SELECT ? pSel->pEList->nExpr : 1;",
          "2866:   sqlite3SelectDestInit(&dest, 0, pParse->nMem+1);",
          "2867:   pParse->nMem += nReg;",
          "",
          "[Removed Lines]",
          "2864:         jmpIfDynamic>=0?\"\":\"CORRELATED \"));",
          "",
          "[Added Lines]",
          "2912:         addrOnce?\"\":\"CORRELATED \"));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2887:   if( sqlite3Select(pParse, pSel, &dest) ){",
          "2888:     return 0;",
          "2889:   }",
          "2891:   ExprSetVVAProperty(pExpr, EP_NoReduce);",
          "2895:   }",
          "2897:   return rReg;",
          "2898: }",
          "",
          "[Removed Lines]",
          "2890:   rReg = dest.iSDParm;",
          "2893:   if( jmpIfDynamic>=0 ){",
          "2894:     sqlite3VdbeJumpHere(v, jmpIfDynamic);",
          "",
          "[Added Lines]",
          "2938:   pExpr->iTable = rReg = dest.iSDParm;",
          "2940:   if( addrOnce ){",
          "2941:     sqlite3VdbeJumpHere(v, addrOnce);",
          "2945:   sqlite3VdbeAddOp1(v, OP_Return, pExpr->y.sub.regReturn);",
          "2946:   sqlite3VdbeChangeP1(v, pExpr->y.sub.iAddr-1, sqlite3VdbeCurrentAddr(v)-1);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2987:   VdbeNoopComment((v, \"begin IN expr\"));",
          "2988:   eType = sqlite3FindInIndex(pParse, pExpr,",
          "2989:                              IN_INDEX_MEMBERSHIP | IN_INDEX_NOOP_OK,",
          "2992:   assert( pParse->nErr || nVector==1 || eType==IN_INDEX_EPH",
          "2993:        || eType==IN_INDEX_INDEX_ASC || eType==IN_INDEX_INDEX_DESC",
          "",
          "[Removed Lines]",
          "2990:                              destIfFalse==destIfNull ? 0 : &rRhsHasNull, aiMap);",
          "",
          "[Added Lines]",
          "3042:                              destIfFalse==destIfNull ? 0 : &rRhsHasNull,",
          "3043:                              aiMap, &iTab);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3099:     VdbeCoverage(v);",
          "3101:   }else{",
          "3102:     sqlite3VdbeAddOp4(v, OP_Affinity, rLhs, nVector, 0, zAff, nVector);",
          "3103:     if( destIfFalse==destIfNull ){",
          "3106:                            rLhs, nVector); VdbeCoverage(v);",
          "3107:       goto sqlite3ExprCodeIN_finished;",
          "3108:     }",
          "3111:                                       rLhs, nVector); VdbeCoverage(v);",
          "3112:   }",
          "",
          "[Removed Lines]",
          "3098:     sqlite3VdbeAddOp3(v, OP_SeekRowid, pExpr->iTable, destIfFalse, rLhs);",
          "3105:       sqlite3VdbeAddOp4Int(v, OP_NotFound, pExpr->iTable, destIfFalse,",
          "3110:     addrTruthOp = sqlite3VdbeAddOp4Int(v, OP_Found, pExpr->iTable, 0,",
          "",
          "[Added Lines]",
          "3151:     sqlite3VdbeAddOp3(v, OP_SeekRowid, iTab, destIfFalse, rLhs);",
          "3158:       sqlite3VdbeAddOp4Int(v, OP_NotFound, iTab, destIfFalse,",
          "3163:     addrTruthOp = sqlite3VdbeAddOp4Int(v, OP_Found, iTab, 0,",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3134:   if( destStep6 ) sqlite3VdbeResolveLabel(v, destStep6);",
          "3136:   VdbeCoverage(v);",
          "3137:   if( nVector>1 ){",
          "3138:     destNotNull = sqlite3VdbeMakeLabel(v);",
          "",
          "[Removed Lines]",
          "3135:   addrTop = sqlite3VdbeAddOp2(v, OP_Rewind, pExpr->iTable, destIfFalse);",
          "",
          "[Added Lines]",
          "3188:   addrTop = sqlite3VdbeAddOp2(v, OP_Rewind, iTab, destIfFalse);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3147:     int r3 = sqlite3GetTempReg(pParse);",
          "3148:     p = sqlite3VectorFieldSubexpr(pLeft, i);",
          "3149:     pColl = sqlite3ExprCollSeq(pParse, p);",
          "3151:     sqlite3VdbeAddOp4(v, OP_Ne, rLhs+i, destNotNull, r3,",
          "3152:                       (void*)pColl, P4_COLLSEQ);",
          "3153:     VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "3150:     sqlite3VdbeAddOp3(v, OP_Column, pExpr->iTable, i, r3);",
          "",
          "[Added Lines]",
          "3203:     sqlite3VdbeAddOp3(v, OP_Column, iTab, i, r3);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3156:   sqlite3VdbeAddOp2(v, OP_Goto, 0, destIfNull);",
          "3157:   if( nVector>1 ){",
          "3158:     sqlite3VdbeResolveLabel(v, destNotNull);",
          "3160:     VdbeCoverage(v);",
          "",
          "[Removed Lines]",
          "3159:     sqlite3VdbeAddOp2(v, OP_Next, pExpr->iTable, addrTop+1);",
          "",
          "[Added Lines]",
          "3212:     sqlite3VdbeAddOp2(v, OP_Next, iTab, addrTop+1);",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2485:     Table *pTab;           /* TK_COLUMN: Table containing column. Can be NULL",
          "2488:   } y;",
          "2489: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2491:     } sub;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4258: int sqlite3GetToken(const unsigned char *, int *);",
          "4259: void sqlite3NestedParse(Parse*, const char*, ...);",
          "4260: void sqlite3ExpirePreparedStatements(sqlite3*, int);",
          "4262: int sqlite3CodeSubselect(Parse*, Expr*);",
          "4263: void sqlite3SelectPrep(Parse*, Select*, NameContext*);",
          "4264: void sqlite3SelectWrongNumTermsError(Parse *pParse, Select *p);",
          "",
          "[Removed Lines]",
          "4261: void sqlite3CodeRhsOfIN(Parse*, Expr*, int);",
          "",
          "[Added Lines]",
          "4266: void sqlite3CodeRhsOfIN(Parse*, Expr*, int, int);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4516: int sqlite3JournalOpen(sqlite3_vfs *, const char *, sqlite3_file *, int, int);",
          "4517: int sqlite3JournalSize(sqlite3_vfs *);",
          "",
          "[Removed Lines]",
          "4514: int sqlite3FindInIndex(Parse *, Expr *, u32, int*, int*);",
          "",
          "[Added Lines]",
          "4519: int sqlite3FindInIndex(Parse *, Expr *, u32, int*, int*, int*);",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3610:   pCx->isEphemeral = 1;",
          "3611:   pCx->pKeyInfo = pOrig->pKeyInfo;",
          "3612:   pCx->isTable = pOrig->isTable;",
          "3614:                           pCx->pKeyInfo, pCx->uc.pCursor);",
          "",
          "[Removed Lines]",
          "3613:   rc = sqlite3BtreeCursor(pOrig->pBtx, MASTER_ROOT, BTREE_WRCSR,",
          "",
          "[Added Lines]",
          "3613:   pCx->pgnoRoot = pOrig->pgnoRoot;",
          "3614:   rc = sqlite3BtreeCursor(pOrig->pBtx, pCx->pgnoRoot, BTREE_WRCSR,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3682:         assert( pgno==MASTER_ROOT+1 );",
          "3683:         assert( pKeyInfo->db==db );",
          "3684:         assert( pKeyInfo->enc==ENC(db) );",
          "3685:         rc = sqlite3BtreeCursor(pCx->pBtx, pgno, BTREE_WRCSR,",
          "3686:                                 pKeyInfo, pCx->uc.pCursor);",
          "3687:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3686:         pCx->pgnoRoot = pgno;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3690:       rc = sqlite3BtreeCursor(pCx->pBtx, MASTER_ROOT, BTREE_WRCSR,",
          "3691:                               0, pCx->uc.pCursor);",
          "3692:       pCx->isTable = 1;",
          "3693:     }",
          "3694:   }",
          "3695:   if( rc ) goto abort_due_to_error;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3695:       pCx->pgnoRoot = MASTER_ROOT;",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "854:     translateColumnToCopy(pParse, addrTop, pLevel->iTabCur,",
          "855:                           pTabItem->regResult, 1);",
          "856:     sqlite3VdbeGoto(v, addrTop);",
          "857:   }else{",
          "858:     sqlite3VdbeAddOp2(v, OP_Next, pLevel->iTabCur, addrTop+1); VdbeCoverage(v);",
          "859:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "857:     pTabItem->fg.viaCoroutine = 0;",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "538:       if( pLoop->aLTerm[i]->pExpr==pX ) nEq++;",
          "539:     }",
          "541:     if( (pX->flags & EP_xIsSelect)==0 || pX->x.pSelect->pEList->nExpr==1 ){",
          "543:     }else{",
          "544:       sqlite3 *db = pParse->db;",
          "545:       pX = removeUnindexableInClauseTerms(pParse, iEq, pLoop, pX);",
          "547:       if( !db->mallocFailed ){",
          "548:         aiMap = (int*)sqlite3DbMallocZero(pParse->db, sizeof(int)*nEq);",
          "551:       }",
          "552:       sqlite3ExprDelete(db, pX);",
          "553:       pX = pTerm->pExpr;",
          "",
          "[Removed Lines]",
          "542:       eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, 0);",
          "549:         eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, aiMap);",
          "550:         pTerm->pExpr->iTable = pX->iTable;",
          "",
          "[Added Lines]",
          "541:     iTab = 0;",
          "543:       eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, 0, &iTab);",
          "550:         eType = sqlite3FindInIndex(pParse, pX, IN_INDEX_LOOP, 0, aiMap, &iTab);",
          "551:         pTerm->pExpr->iTable = iTab;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "557:       testcase( bRev );",
          "558:       bRev = !bRev;",
          "559:     }",
          "561:     sqlite3VdbeAddOp2(v, bRev ? OP_Last : OP_Rewind, iTab, 0);",
          "562:     VdbeCoverageIf(v, bRev);",
          "563:     VdbeCoverageIf(v, !bRev);",
          "",
          "[Removed Lines]",
          "560:     iTab = pX->iTable;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2197:     if( pAlt->wtFlags & (TERM_CODED) ) continue;",
          "2198:     if( (pAlt->eOperator & WO_IN)",
          "2199:      && (pAlt->pExpr->flags & EP_xIsSelect)",
          "2201:     ){",
          "2202:       continue;",
          "2203:     }",
          "",
          "[Removed Lines]",
          "2200:      && (pAlt->pExpr->x.pSelect->pEList->nExpr>1)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "62e009f3d89c837d83a366215332f0a0d04bfd04",
      "candidate_info": {
        "commit_hash": "62e009f3d89c837d83a366215332f0a0d04bfd04",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/62e009f3d89c837d83a366215332f0a0d04bfd04",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/fuzzdata8.db"
        ],
        "message": "New test cases in test/fuzzdata8.db.\n\nFossilOrigin-Name: ab2356f580384e4b40d128fc04fd6bc4dfcf50109df77d05d59adcc20f339066",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 177f5f40eabfcfd229ac7f291dfed9e9ee35762e86923a0f356915f389da177d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}