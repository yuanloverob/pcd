{
  "cve_id": "CVE-2009-3627",
  "cve_desc": "The decode_entities function in util.c in HTML-Parser before 3.63 allows context-dependent attackers to cause a denial of service (infinite loop) via an incomplete SGML numeric character reference, which triggers generation of an invalid UTF-8 character.",
  "repo": "gisle/html-parser",
  "patch_hash": "b9aae1e43eb2c8e989510187cff0ba3e996f9a4c",
  "patch_info": {
    "commit_hash": "b9aae1e43eb2c8e989510187cff0ba3e996f9a4c",
    "repo": "gisle/html-parser",
    "commit_url": "https://github.com/gisle/html-parser/commit/b9aae1e43eb2c8e989510187cff0ba3e996f9a4c",
    "files": [
      "t/entities.t",
      "util.c"
    ],
    "message": "decode_entities confused by trailing incomplete entity\n\nMark Martinec reported crashed when running SpamAssassin, given a\nparticular HTML junk mail to parse.  The problem was caused by\nHTML::Parsers decode_entities function confusing itself when it\nencountered strings with incomplete entities at the end of the string.",
    "before_after_code_files": [
      "t/entities.t||t/entities.t",
      "util.c||util.c"
    ]
  },
  "patch_diff": {
    "t/entities.t||t/entities.t": [
      "File: t/entities.t -> t/entities.t",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: use HTML::Entities qw(decode_entities encode_entities encode_entities_numeric);",
      "5: $a = \"V&aring;re norske tegn b&oslash;r &#230res\";",
      "",
      "[Removed Lines]",
      "3: use Test::More tests => 16;",
      "",
      "[Added Lines]",
      "3: use Test::More tests => 17;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "71: is(decode_entities(\"&apos;\"), \"'\");",
      "72: is(encode_entities(\"'\", \"'\"), \"&#39;\");",
      "75: __END__",
      "76: # Quoted from rfc1866.txt",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "74: is(decode_entities(\"Attention Home&#959&#969n&#1257rs...1&#1109t T&#1110&#1084e E&#957&#1257&#1075\"),",
      "75:   \"Attention Home\\x{3BF}\\x{3C9}n\\x{4E9}rs...1\\x{455}t T\\x{456}\\x{43C}e E\\x{3BD}\\x{4E9}\\x{433}\");",
      "",
      "---------------"
    ],
    "util.c||util.c": [
      "File: util.c -> util.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "94:  ent_start = s;",
      "95:  repl = 0;",
      "98:      UV num = 0;",
      "99:      UV prev = 0;",
      "100:      int ok = 0;",
      "101:      s++;",
      "103:   s++;",
      "105:       char *tmp = strchr(PL_hexdigit, *s);",
      "106:       if (!tmp)",
      "107:    break;",
      "",
      "[Removed Lines]",
      "97:  if (*s == '#') {",
      "102:      if (*s == 'x' || *s == 'X') {",
      "104:   while (*s) {",
      "",
      "[Added Lines]",
      "97:  if (s < end && *s == '#') {",
      "102:      if (s < end && (*s == 'x' || *s == 'X')) {",
      "104:   while (s < end) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "117:   }",
      "118:      }",
      "119:      else {",
      "121:       num = num * 10 + (*s - '0');",
      "122:       if (prev && num < prev) {",
      "",
      "[Removed Lines]",
      "120:   while (isDIGIT(*s)) {",
      "",
      "[Added Lines]",
      "120:   while (s < end && isDIGIT(*s)) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "180:  }",
      "181:  else {",
      "182:      char *ent_name = s;",
      "184:   s++;",
      "185:      if (ent_name != s && entity2char) {",
      "186:   SV** svp;",
      "",
      "[Removed Lines]",
      "183:      while (isALNUM(*s))",
      "",
      "[Added Lines]",
      "183:      while (s < end && isALNUM(*s))",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "217:  if (repl) {",
      "218:      char *repl_allocated = 0;",
      "220:   s++;",
      "",
      "[Removed Lines]",
      "219:      if (*s == ';')",
      "",
      "[Added Lines]",
      "219:      if (s < end && *s == ';')",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e7b94315d8e51076dc39b9d41828f9fcfc33b432",
      "candidate_info": {
        "commit_hash": "e7b94315d8e51076dc39b9d41828f9fcfc33b432",
        "repo": "gisle/html-parser",
        "commit_url": "https://github.com/gisle/html-parser/commit/e7b94315d8e51076dc39b9d41828f9fcfc33b432",
        "files": [
          "lib/HTML/Entities.pm",
          "t/entities.t"
        ],
        "message": "Eliminate buggy entities_decode_old\n\nSean M. Burke says: But the (never ever documented?)\nHTML::Entities::decode_old is broken.\n\nIn it, &-entities are decoded in three passes: &#__; things, then &#x__;\nthings, then &named; things.  But decoding should always be in one pass,\nor else... well, see below.\n\nTest data: the string \"{&#38;amp;&#x26;amp;&amp; also &#x42f;&#339;}\"\ndecode_entities_old: {&&& also &#x42f;&#339;}",
        "before_after_code_files": [
          "lib/HTML/Entities.pm||liHTML/Entities.pm",
          "t/entities.t||t/entities.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "t/entities.t||t/entities.t"
          ],
          "candidate": [
            "t/entities.t||t/entities.t"
          ]
        }
      },
      "candidate_diff": {
        "lib/HTML/Entities.pm||liHTML/Entities.pm": [
          "File: lib/HTML/Entities.pm -> liHTML/Entities.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "435: my %subst;  # compiled encoding regexps",
          "454: sub encode_entities",
          "455: {",
          "456:     return undef unless defined $_[0];",
          "",
          "[Removed Lines]",
          "437: sub decode_entities_old",
          "438: {",
          "439:     my $array;",
          "440:     if (defined wantarray) {",
          "441:  $array = [@_]; # copy",
          "442:     } else {",
          "443:  $array = \\@_;  # modify in-place",
          "444:     }",
          "445:     my $c;",
          "446:     for (@$array) {",
          "447:  s/(&\\#(\\d+);?)/$2 < 256 ? chr($2) : $1/eg;",
          "448:  s/(&\\#[xX]([0-9a-fA-F]+);?)/$c = hex($2); $c < 256 ? chr($c) : $1/eg;",
          "449:  s/(&(\\w+);?)/$entity2char{$2} || $1/eg;",
          "450:     }",
          "451:     wantarray ? @$array : $array->[0];",
          "452: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "t/entities.t||t/entities.t": [
          "File: t/entities.t -> t/entities.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use HTML::Entities qw(decode_entities encode_entities encode_entities_numeric);",
          "5: $a = \"V&aring;re norske tegn b&oslash;r &#230res\";",
          "",
          "[Removed Lines]",
          "3: use Test::More tests => 17;",
          "",
          "[Added Lines]",
          "3: use Test::More tests => 18;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "74: is(decode_entities(\"Attention Home&#959&#969n&#1257rs...1&#1109t T&#1110&#1084e E&#957&#1257&#1075\"),",
          "75:   \"Attention Home\\x{3BF}\\x{3C9}n\\x{4E9}rs...1\\x{455}t T\\x{456}\\x{43C}e E\\x{3BD}\\x{4E9}\\x{433}\");",
          "77: __END__",
          "78: # Quoted from rfc1866.txt",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "76: is(decode_entities(\"{&#38;amp;&#x26;amp;&amp; also &#x42f;&#339;}\"),",
          "77:     \"{&amp;&amp;& also \\x{42F}\\x{153}}\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e91cf4085db4f8518d7979aef4ae9b22551ad39",
      "candidate_info": {
        "commit_hash": "6e91cf4085db4f8518d7979aef4ae9b22551ad39",
        "repo": "gisle/html-parser",
        "commit_url": "https://github.com/gisle/html-parser/commit/6e91cf4085db4f8518d7979aef4ae9b22551ad39",
        "files": [
          "lib/HTML/Entities.pm",
          "t/entities.t"
        ],
        "message": "Take more care to prepare the char range for encode_entities [RT#50170]\n\nAlso document that the passed in $unsafe is in fact a regular expression\ncharacter class specification.",
        "before_after_code_files": [
          "lib/HTML/Entities.pm||liHTML/Entities.pm",
          "t/entities.t||t/entities.t"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "t/entities.t||t/entities.t"
          ],
          "candidate": [
            "t/entities.t||t/entities.t"
          ]
        }
      },
      "candidate_diff": {
        "lib/HTML/Entities.pm||liHTML/Entities.pm": [
          "File: lib/HTML/Entities.pm -> liHTML/Entities.pm",
          "--- Hunk 1 ---",
          "[Context before]",
          "77: =item encode_entities( $string, $unsafe_chars )",
          "79: This routine replaces unsafe characters in $string with their entity",
          "87:   $encoded = encode_entities($input, '<>&\"');",
          "89: This routine is exported by default.",
          "91: =item encode_entities_numeric( $string )",
          "",
          "[Removed Lines]",
          "80: representation. A second argument can be given to specify which",
          "81: characters to consider unsafe (i.e., which to escape). The default set",
          "82: of characters to encode are control chars, high-bit chars, and the",
          "83: C<< < >>, C<< & >>, C<< > >>, C<< ' >> and C<< \" >>",
          "84: characters.  But this, for example, would encode I<just> the",
          "85: C<< < >>, C<< & >>, C<< > >>, and C<< \" >> characters:",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "457:     if (defined $_[1] and length $_[1]) {",
          "458:  unless (exists $subst{$_[1]}) {",
          "459:      # Because we can't compile regex we fake it with a cached sub",
          "461:      $subst{$_[1]} = eval $code;",
          "462:      die( $@ . \" while trying to turn range: \\\"$_[1]\\\"\\n \"",
          "463:        . \"into code: $code\\n \"",
          "",
          "[Removed Lines]",
          "460:      my $code = \"sub {\\$_[0] =~ s/([$_[1]])/\\$char2entity{\\$1} || num_entity(\\$1)/ge; }\";",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "t/entities.t||t/entities.t": [
          "File: t/entities.t -> t/entities.t",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: use HTML::Entities qw(decode_entities encode_entities encode_entities_numeric);",
          "5: $a = \"V&aring;re norske tegn b&oslash;r &#230res\";",
          "",
          "[Removed Lines]",
          "3: use Test::More tests => 12;",
          "",
          "[Added Lines]",
          "3: use Test::More tests => 16;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24: $a = \"abcdef\";",
          "25: is(encode_entities($a, 'a-c'), \"&#97;&#98;&#99;def\");",
          "28: # See how well it does against rfc1866...",
          "29: $ent = $plain = \"\";",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27: $a = \"[24/7]\\\\\";",
          "28: is(encode_entities($a, '/'), \"[24&#47;7]\\\\\");",
          "29: is(encode_entities($a, '\\\\/'), \"[24&#47;7]\\\\\");",
          "30: is(encode_entities($a, '\\\\'), \"[24/7]&#92;\");",
          "31: is(encode_entities($a, ']\\\\'), \"[24/7&#93;&#92;\");",
          "",
          "---------------"
        ]
      }
    }
  ]
}