{
  "cve_id": "CVE-2022-29967",
  "cve_desc": "static_compressed_inmemory_website_callback.c in Glewlwyd through 2.6.2 allows directory traversal.",
  "repo": "babelouest/glewlwyd",
  "patch_hash": "e3f7245c33897bf9b3a75acfcdb8b7b93974bf11",
  "patch_info": {
    "commit_hash": "e3f7245c33897bf9b3a75acfcdb8b7b93974bf11",
    "repo": "babelouest/glewlwyd",
    "commit_url": "https://github.com/babelouest/glewlwyd/commit/e3f7245c33897bf9b3a75acfcdb8b7b93974bf11",
    "files": [
      "src/static_compressed_inmemory_website_callback.c",
      "src/static_compressed_inmemory_website_callback.h"
    ],
    "message": "Fix file access check for directory traversal, and fix call for callback_static_file_uncompressed if header not set",
    "before_after_code_files": [
      "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
      "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
    ]
  },
  "patch_diff": {
    "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c": [
      "File: src/static_compressed_inmemory_website_callback.c -> src/static_compressed_inmemory_website_callback.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "90: #include <pthread.h>",
      "91: #include <zlib.h>",
      "92: #include <string.h>",
      "93: #include <ulfius.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "92: #include <limits.h>",
      "93: #include <stdlib.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "158: static int callback_static_file_uncompressed (const struct _u_request * request, struct _u_response * response, void * user_data) {",
      "159:   size_t length;",
      "160:   FILE * f;",
      "162:   const char * content_type;",
      "163:   int ret = U_CALLBACK_CONTINUE;",
      "",
      "[Removed Lines]",
      "161:   char * file_requested, * file_path, * url_dup_save;",
      "",
      "[Added Lines]",
      "163:   char * file_requested, * file_path, * url_dup_save, * real_path = NULL;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "185:     }",
      "187:     file_path = msprintf(\"%s/%s\", ((struct _u_compressed_inmemory_website_config *)user_data)->files_path, file_requested);",
      "209:       } else {",
      "212:       }",
      "213:     }",
      "214:     o_free(file_path);",
      "216:   } else {",
      "217:     y_log_message(Y_LOG_LEVEL_ERROR, \"Static File Server - Error, user_data is NULL or inconsistent\");",
      "218:     ret = U_CALLBACK_ERROR;",
      "",
      "[Removed Lines]",
      "189:     f = fopen (file_path, \"rb\");",
      "190:     if (f) {",
      "191:       fseek (f, 0, SEEK_END);",
      "192:       length = ftell (f);",
      "193:       fseek (f, 0, SEEK_SET);",
      "195:       content_type = u_map_get_case(&((struct _u_compressed_inmemory_website_config *)user_data)->mime_types, get_filename_ext(file_requested));",
      "196:       if (content_type == NULL) {",
      "197:         content_type = u_map_get(&((struct _u_compressed_inmemory_website_config *)user_data)->mime_types, \"*\");",
      "198:         y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
      "199:       }",
      "200:       u_map_put(response->map_header, \"Content-Type\", content_type);",
      "201:       u_map_copy_into(response->map_header, &((struct _u_compressed_inmemory_website_config *)user_data)->map_header);",
      "203:       if (ulfius_set_stream_response(response, 200, callback_static_file_uncompressed_stream, callback_static_file_uncompressed_stream_free, length, CHUNK, f) != U_OK) {",
      "204:         y_log_message(Y_LOG_LEVEL_ERROR, \"Static File Server - Error ulfius_set_stream_response\");",
      "205:       }",
      "206:     } else {",
      "207:       if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
      "208:         ret = U_CALLBACK_IGNORE;",
      "210:         ulfius_add_header_to_response(response, \"Location\", ((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404);",
      "211:         response->status = 302;",
      "215:     o_free(url_dup_save);",
      "",
      "[Added Lines]",
      "190:     real_path = realpath(file_path, NULL);",
      "191:     if (0 == o_strncmp(((struct _u_compressed_inmemory_website_config *)user_data)->files_path, real_path, o_strlen(((struct _u_compressed_inmemory_website_config *)user_data)->files_path))) {",
      "192:       f = fopen (file_path, \"rb\");",
      "193:       if (f) {",
      "194:         fseek (f, 0, SEEK_END);",
      "195:         length = ftell (f);",
      "196:         fseek (f, 0, SEEK_SET);",
      "198:         content_type = u_map_get_case(&((struct _u_compressed_inmemory_website_config *)user_data)->mime_types, get_filename_ext(file_requested));",
      "199:         if (content_type == NULL) {",
      "200:           content_type = u_map_get(&((struct _u_compressed_inmemory_website_config *)user_data)->mime_types, \"*\");",
      "201:           y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
      "202:         }",
      "203:         u_map_put(response->map_header, \"Content-Type\", content_type);",
      "204:         u_map_copy_into(response->map_header, &((struct _u_compressed_inmemory_website_config *)user_data)->map_header);",
      "206:         if (ulfius_set_stream_response(response, 200, callback_static_file_uncompressed_stream, callback_static_file_uncompressed_stream_free, length, CHUNK, f) != U_OK) {",
      "207:           y_log_message(Y_LOG_LEVEL_ERROR, \"Static File Server - Error ulfius_set_stream_response\");",
      "208:         }",
      "210:         if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
      "211:           ret = U_CALLBACK_IGNORE;",
      "212:         } else {",
      "213:           ulfius_add_header_to_response(response, \"Location\", ((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404);",
      "214:           response->status = 302;",
      "215:         }",
      "217:       o_free(url_dup_save);",
      "218:     } else {",
      "219:       response->status = 403;",
      "222:     free(real_path); // realpath uses malloc",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "290:   unsigned char * file_content, * file_content_orig = NULL;",
      "291:   size_t length, read_length, offset, data_zip_len = 0;",
      "292:   FILE * f;",
      "294:   const char * content_type;",
      "",
      "[Removed Lines]",
      "293:   char * file_requested, * file_path, * url_dup_save, * data_zip = NULL;",
      "",
      "[Added Lines]",
      "301:   char * file_requested, * file_path, * url_dup_save, * data_zip = NULL, * real_path = NULL;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "352:             u_map_copy_into(response->map_header, &config->map_header);",
      "353:           } else {",
      "354:             file_path = msprintf(\"%s/%s\", ((struct _u_compressed_inmemory_website_config *)user_data)->files_path, file_requested);",
      "401:                       }",
      "421:                           ret = U_CALLBACK_ERROR;",
      "422:                         }",
      "425:                       if (ret == U_CALLBACK_CONTINUE) {",
      "429:                           }",
      "434:                           }",
      "436:                         }",
      "438:                       }",
      "439:                     }",
      "442:                   } else {",
      "445:                   }",
      "447:                 }",
      "449:               } else {",
      "456:               }",
      "458:             } else {",
      "461:             }",
      "462:             o_free(file_path);",
      "463:           }",
      "464:         } else {",
      "465:           ret = callback_static_file_uncompressed(request, response, user_data);",
      "466:         }",
      "467:         free_string_array(accept_list);",
      "468:       }",
      "469:     }",
      "470:     o_free(url_dup_save);",
      "471:   }",
      "",
      "[Removed Lines]",
      "356:             if (!pthread_mutex_lock(&config->lock)) {",
      "357:               f = fopen (file_path, \"rb\");",
      "358:               if (f) {",
      "359:                 content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));",
      "360:                 if (content_type == NULL) {",
      "361:                   content_type = u_map_get(&config->mime_types, \"*\");",
      "362:                   y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
      "363:                 }",
      "364:                 if (!string_array_has_value((const char **)config->mime_types_compressed, content_type)) {",
      "365:                   compress_mode = U_COMPRESS_NONE;",
      "366:                 }",
      "368:                 u_map_put(response->map_header, \"Content-Type\", content_type);",
      "369:                 u_map_copy_into(response->map_header, &config->map_header);",
      "371:                 fseek (f, 0, SEEK_END);",
      "372:                 offset = length = ftell (f);",
      "373:                 fseek (f, 0, SEEK_SET);",
      "375:                 if (length) {",
      "376:                   if ((file_content_orig = file_content = o_malloc(length)) != NULL && (data_zip = o_malloc((2*length)+20)) != NULL) {",
      "377:                     defstream.zalloc = u_zalloc;",
      "378:                     defstream.zfree = u_zfree;",
      "379:                     defstream.opaque = Z_NULL;",
      "380:                     defstream.avail_in = (uInt)length;",
      "381:                     defstream.next_in = (Bytef *)file_content;",
      "382:                     while ((read_length = fread(file_content, sizeof(char), offset, f))) {",
      "383:                       file_content += read_length;",
      "384:                       offset -= read_length;",
      "385:                     }",
      "387:                     if (compress_mode == U_COMPRESS_GZIP) {",
      "388:                       if (deflateInit2(&defstream,",
      "389:                                        Z_DEFAULT_COMPRESSION,",
      "390:                                        Z_DEFLATED,",
      "391:                                        U_GZIP_WINDOW_BITS | U_GZIP_ENCODING,",
      "392:                                        8,",
      "393:                                        Z_DEFAULT_STRATEGY) != Z_OK) {",
      "394:                         y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (gzip)\");",
      "395:                         ret = U_CALLBACK_ERROR;",
      "396:                       }",
      "397:                     } else {",
      "398:                       if (deflateInit(&defstream, Z_BEST_COMPRESSION) != Z_OK) {",
      "399:                         y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (deflate)\");",
      "400:                         ret = U_CALLBACK_ERROR;",
      "402:                     }",
      "403:                     if (ret == U_CALLBACK_CONTINUE) {",
      "404:                       do {",
      "405:                         if ((data_zip = o_realloc(data_zip, data_zip_len+_U_W_BLOCK_SIZE)) != NULL) {",
      "406:                           defstream.avail_out = _U_W_BLOCK_SIZE;",
      "407:                           defstream.next_out = ((Bytef *)data_zip)+data_zip_len;",
      "408:                           switch ((res = deflate(&defstream, Z_FINISH))) {",
      "409:                             case Z_OK:",
      "410:                             case Z_STREAM_END:",
      "411:                             case Z_BUF_ERROR:",
      "412:                               break;",
      "413:                             default:",
      "414:                               y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflate %d\", res);",
      "415:                               ret = U_CALLBACK_ERROR;",
      "416:                               break;",
      "417:                           }",
      "418:                           data_zip_len += _U_W_BLOCK_SIZE - defstream.avail_out;",
      "419:                         } else {",
      "420:                           y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resources for data_zip\");",
      "423:                       } while (U_CALLBACK_CONTINUE == ret && defstream.avail_out == 0);",
      "426:                         if (compress_mode == U_COMPRESS_GZIP) {",
      "427:                           if (config->allow_cache_compressed) {",
      "428:                             u_map_put_binary(&config->gzip_files, file_requested, data_zip, 0, defstream.total_out);",
      "430:                           ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
      "431:                         } else {",
      "432:                           if (config->allow_cache_compressed) {",
      "433:                             u_map_put_binary(&config->deflate_files, file_requested, data_zip, 0, defstream.total_out);",
      "435:                           ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
      "437:                         u_map_put(response->map_header, U_CONTENT_HEADER, compress_mode==U_COMPRESS_GZIP?U_ACCEPT_GZIP:U_ACCEPT_DEFLATE);",
      "440:                     deflateEnd(&defstream);",
      "441:                     o_free(data_zip);",
      "443:                     y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resource for file_content or data_zip\");",
      "444:                     ret = U_CALLBACK_ERROR;",
      "446:                   o_free(file_content_orig);",
      "448:                 fclose(f);",
      "450:                 if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
      "451:                   ret = U_CALLBACK_IGNORE;",
      "452:                 } else {",
      "453:                   ulfius_add_header_to_response(response, \"Location\", ((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404);",
      "454:                   response->status = 302;",
      "455:                 }",
      "457:               pthread_mutex_unlock(&config->lock);",
      "459:               y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error pthread_lock_mutex\");",
      "460:               ret = U_CALLBACK_ERROR;",
      "",
      "[Added Lines]",
      "362:             real_path = realpath(file_path, NULL);",
      "363:             if (0 == o_strncmp(((struct _u_compressed_inmemory_website_config *)user_data)->files_path, real_path, o_strlen(((struct _u_compressed_inmemory_website_config *)user_data)->files_path))) {",
      "364:               if (!pthread_mutex_lock(&config->lock)) {",
      "365:                 f = fopen (file_path, \"rb\");",
      "366:                 if (f) {",
      "367:                   content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));",
      "368:                   if (content_type == NULL) {",
      "369:                     content_type = u_map_get(&config->mime_types, \"*\");",
      "370:                     y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
      "371:                   }",
      "372:                   if (!string_array_has_value((const char **)config->mime_types_compressed, content_type)) {",
      "373:                     compress_mode = U_COMPRESS_NONE;",
      "374:                   }",
      "376:                   u_map_put(response->map_header, \"Content-Type\", content_type);",
      "377:                   u_map_copy_into(response->map_header, &config->map_header);",
      "379:                   fseek (f, 0, SEEK_END);",
      "380:                   offset = length = ftell (f);",
      "381:                   fseek (f, 0, SEEK_SET);",
      "383:                   if (length) {",
      "384:                     if ((file_content_orig = file_content = o_malloc(length)) != NULL && (data_zip = o_malloc((2*length)+20)) != NULL) {",
      "385:                       defstream.zalloc = u_zalloc;",
      "386:                       defstream.zfree = u_zfree;",
      "387:                       defstream.opaque = Z_NULL;",
      "388:                       defstream.avail_in = (uInt)length;",
      "389:                       defstream.next_in = (Bytef *)file_content;",
      "390:                       while ((read_length = fread(file_content, sizeof(char), offset, f))) {",
      "391:                         file_content += read_length;",
      "392:                         offset -= read_length;",
      "395:                       if (compress_mode == U_COMPRESS_GZIP) {",
      "396:                         if (deflateInit2(&defstream,",
      "397:                                          Z_DEFAULT_COMPRESSION,",
      "398:                                          Z_DEFLATED,",
      "399:                                          U_GZIP_WINDOW_BITS | U_GZIP_ENCODING,",
      "400:                                          8,",
      "401:                                          Z_DEFAULT_STRATEGY) != Z_OK) {",
      "402:                           y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (gzip)\");",
      "405:                       } else {",
      "406:                         if (deflateInit(&defstream, Z_BEST_COMPRESSION) != Z_OK) {",
      "407:                           y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (deflate)\");",
      "408:                           ret = U_CALLBACK_ERROR;",
      "409:                         }",
      "410:                       }",
      "412:                         do {",
      "413:                           if ((data_zip = o_realloc(data_zip, data_zip_len+_U_W_BLOCK_SIZE)) != NULL) {",
      "414:                             defstream.avail_out = _U_W_BLOCK_SIZE;",
      "415:                             defstream.next_out = ((Bytef *)data_zip)+data_zip_len;",
      "416:                             switch ((res = deflate(&defstream, Z_FINISH))) {",
      "417:                               case Z_OK:",
      "418:                               case Z_STREAM_END:",
      "419:                               case Z_BUF_ERROR:",
      "420:                                 break;",
      "421:                               default:",
      "422:                                 y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflate %d\", res);",
      "423:                                 ret = U_CALLBACK_ERROR;",
      "424:                                 break;",
      "425:                             }",
      "426:                             data_zip_len += _U_W_BLOCK_SIZE - defstream.avail_out;",
      "427:                           } else {",
      "428:                             y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resources for data_zip\");",
      "429:                             ret = U_CALLBACK_ERROR;",
      "431:                         } while (U_CALLBACK_CONTINUE == ret && defstream.avail_out == 0);",
      "433:                         if (ret == U_CALLBACK_CONTINUE) {",
      "434:                           if (compress_mode == U_COMPRESS_GZIP) {",
      "435:                             if (config->allow_cache_compressed) {",
      "436:                               u_map_put_binary(&config->gzip_files, file_requested, data_zip, 0, defstream.total_out);",
      "437:                             }",
      "438:                             ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
      "439:                           } else {",
      "440:                             if (config->allow_cache_compressed) {",
      "441:                               u_map_put_binary(&config->deflate_files, file_requested, data_zip, 0, defstream.total_out);",
      "442:                             }",
      "443:                             ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
      "445:                           u_map_put(response->map_header, U_CONTENT_HEADER, compress_mode==U_COMPRESS_GZIP?U_ACCEPT_GZIP:U_ACCEPT_DEFLATE);",
      "448:                       deflateEnd(&defstream);",
      "449:                       o_free(data_zip);",
      "450:                     } else {",
      "451:                       y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resource for file_content or data_zip\");",
      "452:                       ret = U_CALLBACK_ERROR;",
      "454:                     o_free(file_content_orig);",
      "455:                   }",
      "456:                   fclose(f);",
      "457:                 } else {",
      "458:                   if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
      "459:                     ret = U_CALLBACK_IGNORE;",
      "461:                     ulfius_add_header_to_response(response, \"Location\", ((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404);",
      "462:                     response->status = 302;",
      "465:                 pthread_mutex_unlock(&config->lock);",
      "467:                 y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error pthread_lock_mutex\");",
      "468:                 ret = U_CALLBACK_ERROR;",
      "471:               response->status = 403;",
      "474:             free(real_path); // realpath uses malloc",
      "480:       } else {",
      "481:         ret = callback_static_file_uncompressed(request, response, user_data);",
      "483:     } else {",
      "484:       ret = callback_static_file_uncompressed(request, response, user_data);",
      "",
      "---------------"
    ],
    "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h": [
      "File: src/static_compressed_inmemory_website_callback.h -> src/static_compressed_inmemory_website_callback.h"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "109cbc1c6ef79ba5b40b428c3a0bd47dbe71fd01",
      "candidate_info": {
        "commit_hash": "109cbc1c6ef79ba5b40b428c3a0bd47dbe71fd01",
        "repo": "babelouest/glewlwyd",
        "commit_url": "https://github.com/babelouest/glewlwyd/commit/109cbc1c6ef79ba5b40b428c3a0bd47dbe71fd01",
        "files": [
          "src/static_compressed_inmemory_website_callback.c",
          "src/static_compressed_inmemory_website_callback.h"
        ],
        "message": "Remove call to access, assume fopen is enough",
        "before_after_code_files": [
          "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
          "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
            "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
          ],
          "candidate": [
            "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
            "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
          ]
        }
      },
      "candidate_diff": {
        "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c": [
          "File: src/static_compressed_inmemory_website_callback.c -> src/static_compressed_inmemory_website_callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:     file_requested = o_strdup(request->http_url);",
          "167:     url_dup_save = file_requested;",
          "169:     file_requested += o_strlen(((struct _u_compressed_inmemory_website_config *)user_data)->url_prefix);",
          "170:     while (file_requested[0] == '/') {",
          "171:       file_requested++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "169:     while (file_requested[0] == '/') {",
          "170:       file_requested++;",
          "171:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "187:     file_path = msprintf(\"%s/%s\", ((struct _u_compressed_inmemory_website_config *)user_data)->files_path, file_requested);",
          "207:       }",
          "208:     } else {",
          "209:       if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
          "",
          "[Removed Lines]",
          "189:     if (access(file_path, F_OK) != -1) {",
          "190:       f = fopen (file_path, \"rb\");",
          "191:       if (f) {",
          "192:         fseek (f, 0, SEEK_END);",
          "193:         length = ftell (f);",
          "194:         fseek (f, 0, SEEK_SET);",
          "196:         content_type = u_map_get_case(&((struct _u_compressed_inmemory_website_config *)user_data)->mime_types, get_filename_ext(file_requested));",
          "197:         if (content_type == NULL) {",
          "198:           content_type = u_map_get(&((struct _u_compressed_inmemory_website_config *)user_data)->mime_types, \"*\");",
          "199:           y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
          "200:         }",
          "201:         u_map_put(response->map_header, \"Content-Type\", content_type);",
          "202:         u_map_copy_into(response->map_header, &((struct _u_compressed_inmemory_website_config *)user_data)->map_header);",
          "204:         if (ulfius_set_stream_response(response, 200, callback_static_file_uncompressed_stream, callback_static_file_uncompressed_stream_free, length, CHUNK, f) != U_OK) {",
          "205:           y_log_message(Y_LOG_LEVEL_ERROR, \"Static File Server - Error ulfius_set_stream_response\");",
          "206:         }",
          "",
          "[Added Lines]",
          "192:     f = fopen (file_path, \"rb\");",
          "193:     if (f) {",
          "194:       fseek (f, 0, SEEK_END);",
          "195:       length = ftell (f);",
          "196:       fseek (f, 0, SEEK_SET);",
          "198:       content_type = u_map_get_case(&((struct _u_compressed_inmemory_website_config *)user_data)->mime_types, get_filename_ext(file_requested));",
          "199:       if (content_type == NULL) {",
          "200:         content_type = u_map_get(&((struct _u_compressed_inmemory_website_config *)user_data)->mime_types, \"*\");",
          "201:         y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
          "202:       }",
          "203:       u_map_put(response->map_header, \"Content-Type\", content_type);",
          "204:       u_map_copy_into(response->map_header, &((struct _u_compressed_inmemory_website_config *)user_data)->map_header);",
          "206:       if (ulfius_set_stream_response(response, 200, callback_static_file_uncompressed_stream, callback_static_file_uncompressed_stream_free, length, CHUNK, f) != U_OK) {",
          "207:         y_log_message(Y_LOG_LEVEL_ERROR, \"Static File Server - Error ulfius_set_stream_response\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "304:     file_requested = o_strdup(request->http_url);",
          "305:     url_dup_save = file_requested;",
          "307:     file_requested += o_strlen((config->url_prefix));",
          "308:     while (file_requested[0] == '/') {",
          "309:       file_requested++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308:     while (file_requested[0] == '/') {",
          "309:       file_requested++;",
          "310:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "321:       o_free(url_dup_save);",
          "322:       url_dup_save = file_requested = o_strdup(\"index.html\");",
          "323:     }",
          "371:                     }",
          "386:                         ret = U_CALLBACK_ERROR;",
          "387:                       }",
          "389:                     if (ret == U_CALLBACK_CONTINUE) {",
          "408:                         }",
          "422:                         }",
          "424:                       }",
          "425:                     }",
          "431:                   }",
          "434:                 }",
          "436:               } else {",
          "439:               }",
          "440:             }",
          "443:           }",
          "445:         }",
          "453:       }",
          "454:     }",
          "457:     o_free(url_dup_save);",
          "458:   }",
          "",
          "[Removed Lines]",
          "324:     file_path = msprintf(\"%s/%s\", ((struct _u_compressed_inmemory_website_config *)user_data)->files_path, file_requested);",
          "326:     if (access(file_path, F_OK) != -1) {",
          "327:       if (!u_map_has_key_case(response->map_header, U_CONTENT_HEADER)) {",
          "328:         if (split_string(u_map_get_case(request->map_header, U_ACCEPT_HEADER), \",\", &accept_list)) {",
          "329:           if (config->allow_gzip && string_array_has_trimmed_value((const char **)accept_list, U_ACCEPT_GZIP)) {",
          "330:             compress_mode = U_COMPRESS_GZIP;",
          "331:           } else if (config->allow_deflate && string_array_has_trimmed_value((const char **)accept_list, U_ACCEPT_DEFLATE)) {",
          "332:             compress_mode = U_COMPRESS_DEFL;",
          "333:           }",
          "335:           content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));",
          "336:           if (content_type == NULL) {",
          "337:             content_type = u_map_get(&config->mime_types, \"*\");",
          "338:             y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
          "339:           }",
          "340:           if (!string_array_has_value((const char **)config->mime_types_compressed, content_type)) {",
          "341:             compress_mode = U_COMPRESS_NONE;",
          "342:           }",
          "344:           u_map_put(response->map_header, \"Content-Type\", content_type);",
          "345:           u_map_copy_into(response->map_header, &config->map_header);",
          "347:           if (compress_mode != U_COMPRESS_NONE) {",
          "348:             if (compress_mode == U_COMPRESS_GZIP && config->allow_cache_compressed && u_map_has_key(&config->gzip_files, file_requested)) {",
          "349:               ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
          "350:               u_map_put(response->map_header, U_CONTENT_HEADER, U_ACCEPT_GZIP);",
          "351:             } else if (compress_mode == U_COMPRESS_DEFL && config->allow_cache_compressed && u_map_has_key(&config->deflate_files, file_requested)) {",
          "352:               ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
          "353:               u_map_put(response->map_header, U_CONTENT_HEADER, U_ACCEPT_DEFLATE);",
          "354:             } else {",
          "355:               if (!pthread_mutex_lock(&config->lock)) {",
          "356:                 f = fopen (file_path, \"rb\");",
          "357:                 if (f) {",
          "358:                   fseek (f, 0, SEEK_END);",
          "359:                   offset = length = ftell (f);",
          "360:                   fseek (f, 0, SEEK_SET);",
          "362:                   if ((file_content_orig = file_content = o_malloc(length)) != NULL && (data_zip = o_malloc((2*length)+20)) != NULL) {",
          "363:                     defstream.zalloc = u_zalloc;",
          "364:                     defstream.zfree = u_zfree;",
          "365:                     defstream.opaque = Z_NULL;",
          "366:                     defstream.avail_in = (uInt)length;",
          "367:                     defstream.next_in = (Bytef *)file_content;",
          "368:                     while ((read_length = fread(file_content, sizeof(char), offset, f))) {",
          "369:                       file_content += read_length;",
          "370:                       offset -= read_length;",
          "373:                     if (compress_mode == U_COMPRESS_GZIP) {",
          "374:                       if (deflateInit2(&defstream,",
          "375:                                        Z_DEFAULT_COMPRESSION,",
          "376:                                        Z_DEFLATED,",
          "377:                                        U_GZIP_WINDOW_BITS | U_GZIP_ENCODING,",
          "378:                                        8,",
          "379:                                        Z_DEFAULT_STRATEGY) != Z_OK) {",
          "380:                         y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (gzip)\");",
          "381:                         ret = U_CALLBACK_ERROR;",
          "382:                       }",
          "383:                     } else {",
          "384:                       if (deflateInit(&defstream, Z_BEST_COMPRESSION) != Z_OK) {",
          "385:                         y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (deflate)\");",
          "388:                     }",
          "390:                       do {",
          "391:                         if ((data_zip = o_realloc(data_zip, data_zip_len+_U_W_BLOCK_SIZE)) != NULL) {",
          "392:                           defstream.avail_out = _U_W_BLOCK_SIZE;",
          "393:                           defstream.next_out = ((Bytef *)data_zip)+data_zip_len;",
          "394:                           switch ((res = deflate(&defstream, Z_FINISH))) {",
          "395:                             case Z_OK:",
          "396:                             case Z_STREAM_END:",
          "397:                             case Z_BUF_ERROR:",
          "398:                               break;",
          "399:                             default:",
          "400:                               y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflate %d\", res);",
          "401:                               ret = U_CALLBACK_ERROR;",
          "402:                               break;",
          "403:                           }",
          "404:                           data_zip_len += _U_W_BLOCK_SIZE - defstream.avail_out;",
          "405:                         } else {",
          "406:                           y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resources for data_zip\");",
          "407:                           ret = U_CALLBACK_ERROR;",
          "409:                       } while (U_CALLBACK_CONTINUE == ret && defstream.avail_out == 0);",
          "411:                       if (ret == U_CALLBACK_CONTINUE) {",
          "412:                         if (compress_mode == U_COMPRESS_GZIP) {",
          "413:                           if (config->allow_cache_compressed) {",
          "414:                             u_map_put_binary(&config->gzip_files, file_requested, data_zip, 0, defstream.total_out);",
          "415:                           }",
          "416:                           ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
          "417:                         } else {",
          "418:                           if (config->allow_cache_compressed) {",
          "419:                             u_map_put_binary(&config->deflate_files, file_requested, data_zip, 0, defstream.total_out);",
          "420:                           }",
          "421:                           ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
          "423:                         u_map_put(response->map_header, U_CONTENT_HEADER, compress_mode==U_COMPRESS_GZIP?U_ACCEPT_GZIP:U_ACCEPT_DEFLATE);",
          "426:                     deflateEnd(&defstream);",
          "427:                     o_free(data_zip);",
          "428:                   } else {",
          "429:                     y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resource for file_content or data_zip\");",
          "430:                     ret = U_CALLBACK_ERROR;",
          "432:                   o_free(file_content_orig);",
          "433:                   fclose(f);",
          "435:                 pthread_mutex_unlock(&config->lock);",
          "437:                 y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error pthread_lock_mutex\");",
          "438:                 ret = U_CALLBACK_ERROR;",
          "441:           } else {",
          "442:             ret = callback_static_file_uncompressed(request, response, user_data);",
          "444:           free_string_array(accept_list);",
          "446:       }",
          "447:     } else {",
          "448:       if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
          "449:         ret = U_CALLBACK_IGNORE;",
          "450:       } else {",
          "451:         ulfius_add_header_to_response(response, \"Location\", ((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404);",
          "452:         response->status = 302;",
          "455:     o_free(file_path);",
          "",
          "[Added Lines]",
          "329:     if (!u_map_has_key_case(response->map_header, U_CONTENT_HEADER)) {",
          "330:       if (split_string(u_map_get_case(request->map_header, U_ACCEPT_HEADER), \",\", &accept_list)) {",
          "331:         if (config->allow_gzip && string_array_has_trimmed_value((const char **)accept_list, U_ACCEPT_GZIP)) {",
          "332:           compress_mode = U_COMPRESS_GZIP;",
          "333:         } else if (config->allow_deflate && string_array_has_trimmed_value((const char **)accept_list, U_ACCEPT_DEFLATE)) {",
          "334:           compress_mode = U_COMPRESS_DEFL;",
          "335:         }",
          "337:         content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));",
          "338:         if (content_type == NULL) {",
          "339:           content_type = u_map_get(&config->mime_types, \"*\");",
          "340:           y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
          "341:         }",
          "342:         if (!string_array_has_value((const char **)config->mime_types_compressed, content_type)) {",
          "343:           compress_mode = U_COMPRESS_NONE;",
          "344:         }",
          "346:         u_map_put(response->map_header, \"Content-Type\", content_type);",
          "347:         u_map_copy_into(response->map_header, &config->map_header);",
          "349:         if (compress_mode != U_COMPRESS_NONE) {",
          "350:           if (compress_mode == U_COMPRESS_GZIP && config->allow_cache_compressed && u_map_has_key(&config->gzip_files, file_requested)) {",
          "351:             ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
          "352:             u_map_put(response->map_header, U_CONTENT_HEADER, U_ACCEPT_GZIP);",
          "353:           } else if (compress_mode == U_COMPRESS_DEFL && config->allow_cache_compressed && u_map_has_key(&config->deflate_files, file_requested)) {",
          "354:             ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
          "355:             u_map_put(response->map_header, U_CONTENT_HEADER, U_ACCEPT_DEFLATE);",
          "356:           } else {",
          "357:             file_path = msprintf(\"%s/%s\", ((struct _u_compressed_inmemory_website_config *)user_data)->files_path, file_requested);",
          "359:             if (!pthread_mutex_lock(&config->lock)) {",
          "360:               f = fopen (file_path, \"rb\");",
          "361:               if (f) {",
          "362:                 fseek (f, 0, SEEK_END);",
          "363:                 offset = length = ftell (f);",
          "364:                 fseek (f, 0, SEEK_SET);",
          "366:                 if ((file_content_orig = file_content = o_malloc(length)) != NULL && (data_zip = o_malloc((2*length)+20)) != NULL) {",
          "367:                   defstream.zalloc = u_zalloc;",
          "368:                   defstream.zfree = u_zfree;",
          "369:                   defstream.opaque = Z_NULL;",
          "370:                   defstream.avail_in = (uInt)length;",
          "371:                   defstream.next_in = (Bytef *)file_content;",
          "372:                   while ((read_length = fread(file_content, sizeof(char), offset, f))) {",
          "373:                     file_content += read_length;",
          "374:                     offset -= read_length;",
          "375:                   }",
          "377:                   if (compress_mode == U_COMPRESS_GZIP) {",
          "378:                     if (deflateInit2(&defstream,",
          "379:                                      Z_DEFAULT_COMPRESSION,",
          "380:                                      Z_DEFLATED,",
          "381:                                      U_GZIP_WINDOW_BITS | U_GZIP_ENCODING,",
          "382:                                      8,",
          "383:                                      Z_DEFAULT_STRATEGY) != Z_OK) {",
          "384:                       y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (gzip)\");",
          "385:                       ret = U_CALLBACK_ERROR;",
          "387:                   } else {",
          "388:                     if (deflateInit(&defstream, Z_BEST_COMPRESSION) != Z_OK) {",
          "389:                       y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflateInit (deflate)\");",
          "390:                       ret = U_CALLBACK_ERROR;",
          "391:                     }",
          "392:                   }",
          "393:                   if (ret == U_CALLBACK_CONTINUE) {",
          "394:                     do {",
          "395:                       if ((data_zip = o_realloc(data_zip, data_zip_len+_U_W_BLOCK_SIZE)) != NULL) {",
          "396:                         defstream.avail_out = _U_W_BLOCK_SIZE;",
          "397:                         defstream.next_out = ((Bytef *)data_zip)+data_zip_len;",
          "398:                         switch ((res = deflate(&defstream, Z_FINISH))) {",
          "399:                           case Z_OK:",
          "400:                           case Z_STREAM_END:",
          "401:                           case Z_BUF_ERROR:",
          "402:                             break;",
          "403:                           default:",
          "404:                             y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error deflate %d\", res);",
          "405:                             ret = U_CALLBACK_ERROR;",
          "406:                             break;",
          "407:                         }",
          "408:                         data_zip_len += _U_W_BLOCK_SIZE - defstream.avail_out;",
          "409:                       } else {",
          "410:                         y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resources for data_zip\");",
          "413:                     } while (U_CALLBACK_CONTINUE == ret && defstream.avail_out == 0);",
          "416:                       if (compress_mode == U_COMPRESS_GZIP) {",
          "417:                         if (config->allow_cache_compressed) {",
          "418:                           u_map_put_binary(&config->gzip_files, file_requested, data_zip, 0, defstream.total_out);",
          "420:                         ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
          "421:                       } else {",
          "422:                         if (config->allow_cache_compressed) {",
          "423:                           u_map_put_binary(&config->deflate_files, file_requested, data_zip, 0, defstream.total_out);",
          "425:                         ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
          "427:                       u_map_put(response->map_header, U_CONTENT_HEADER, compress_mode==U_COMPRESS_GZIP?U_ACCEPT_GZIP:U_ACCEPT_DEFLATE);",
          "430:                   deflateEnd(&defstream);",
          "431:                   o_free(data_zip);",
          "432:                 } else {",
          "433:                   y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error allocating resource for file_content or data_zip\");",
          "434:                   ret = U_CALLBACK_ERROR;",
          "436:                 o_free(file_content_orig);",
          "437:                 fclose(f);",
          "439:                 if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
          "440:                   ret = U_CALLBACK_IGNORE;",
          "441:                 } else {",
          "442:                   ulfius_add_header_to_response(response, \"Location\", ((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404);",
          "443:                   response->status = 302;",
          "444:                 }",
          "446:               pthread_mutex_unlock(&config->lock);",
          "447:             } else {",
          "448:               y_log_message(Y_LOG_LEVEL_ERROR, \"callback_static_compressed_inmemory_website - Error pthread_lock_mutex\");",
          "449:               ret = U_CALLBACK_ERROR;",
          "451:             o_free(file_path);",
          "453:         } else {",
          "454:           ret = callback_static_file_uncompressed(request, response, user_data);",
          "456:         free_string_array(accept_list);",
          "",
          "---------------"
        ],
        "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h": [
          "File: src/static_compressed_inmemory_website_callback.h -> src/static_compressed_inmemory_website_callback.h"
        ]
      }
    },
    {
      "candidate_hash": "8d23001548393e3b1aac61d9e6c7dd472eb9c5b0",
      "candidate_info": {
        "commit_hash": "8d23001548393e3b1aac61d9e6c7dd472eb9c5b0",
        "repo": "babelouest/glewlwyd",
        "commit_url": "https://github.com/babelouest/glewlwyd/commit/8d23001548393e3b1aac61d9e6c7dd472eb9c5b0",
        "files": [
          "src/static_compressed_inmemory_website_callback.c"
        ],
        "message": "Replace error 403 with inconfig 404 behavior",
        "before_after_code_files": [
          "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c"
          ],
          "candidate": [
            "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c"
          ]
        }
      },
      "candidate_diff": {
        "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c": [
          "File: src/static_compressed_inmemory_website_callback.c -> src/static_compressed_inmemory_website_callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:         }",
          "216:       }",
          "217:     } else {",
          "219:     }",
          "220:     o_free(url_dup_save);",
          "221:     o_free(file_path);",
          "",
          "[Removed Lines]",
          "218:       response->status = 403;",
          "",
          "[Added Lines]",
          "218:       if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
          "219:         ret = U_CALLBACK_IGNORE;",
          "220:       } else {",
          "221:         ulfius_add_header_to_response(response, \"Location\", ((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404);",
          "222:         response->status = 302;",
          "223:       }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "468:                 ret = U_CALLBACK_ERROR;",
          "469:               }",
          "470:             } else {",
          "472:             }",
          "473:             o_free(file_path);",
          "474:             free(real_path); // realpath uses malloc",
          "",
          "[Removed Lines]",
          "471:               response->status = 403;",
          "",
          "[Added Lines]",
          "476:               if (((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404 == NULL) {",
          "477:                 ret = U_CALLBACK_IGNORE;",
          "478:               } else {",
          "479:                 ulfius_add_header_to_response(response, \"Location\", ((struct _u_compressed_inmemory_website_config *)user_data)->redirect_on_404);",
          "480:                 response->status = 302;",
          "481:               }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "85012ca46a704dd9ad122f6cfa10bbf0b5df856b",
      "candidate_info": {
        "commit_hash": "85012ca46a704dd9ad122f6cfa10bbf0b5df856b",
        "repo": "babelouest/glewlwyd",
        "commit_url": "https://github.com/babelouest/glewlwyd/commit/85012ca46a704dd9ad122f6cfa10bbf0b5df856b",
        "files": [
          "src/static_compressed_inmemory_website_callback.c",
          "src/static_compressed_inmemory_website_callback.h"
        ],
        "message": "Fix static_compressed_inmemory_website_callback mime type",
        "before_after_code_files": [
          "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
          "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
            "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
          ],
          "candidate": [
            "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
            "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
          ]
        }
      },
      "candidate_diff": {
        "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c": [
          "File: src/static_compressed_inmemory_website_callback.c -> src/static_compressed_inmemory_website_callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "336:           if (compress_mode == U_COMPRESS_GZIP && config->allow_cache_compressed && u_map_has_key(&config->gzip_files, file_requested)) {",
          "337:             ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
          "338:             u_map_put(response->map_header, U_CONTENT_HEADER, U_ACCEPT_GZIP);",
          "339:           } else if (compress_mode == U_COMPRESS_DEFL && config->allow_cache_compressed && u_map_has_key(&config->deflate_files, file_requested)) {",
          "340:             ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
          "341:             u_map_put(response->map_header, U_CONTENT_HEADER, U_ACCEPT_DEFLATE);",
          "342:           } else {",
          "343:             file_path = msprintf(\"%s/%s\", ((struct _u_compressed_inmemory_website_config *)user_data)->files_path, file_requested);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "340:             content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));",
          "341:             if (content_type == NULL) {",
          "342:               content_type = u_map_get(&config->mime_types, \"*\");",
          "343:             }",
          "344:             u_map_put(response->map_header, \"Content-Type\", content_type);",
          "345:             u_map_copy_into(response->map_header, &config->map_header);",
          "350:             content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));",
          "351:             if (content_type == NULL) {",
          "352:               content_type = u_map_get(&config->mime_types, \"*\");",
          "353:             }",
          "354:             u_map_put(response->map_header, \"Content-Type\", content_type);",
          "355:             u_map_copy_into(response->map_header, &config->map_header);",
          "",
          "---------------"
        ],
        "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h": [
          "File: src/static_compressed_inmemory_website_callback.h -> src/static_compressed_inmemory_website_callback.h"
        ]
      }
    },
    {
      "candidate_hash": "1f5bcad3c4cf7df7c0ccc6d16d58f1632f603801",
      "candidate_info": {
        "commit_hash": "1f5bcad3c4cf7df7c0ccc6d16d58f1632f603801",
        "repo": "babelouest/glewlwyd",
        "commit_url": "https://github.com/babelouest/glewlwyd/commit/1f5bcad3c4cf7df7c0ccc6d16d58f1632f603801",
        "files": [
          "src/static_compressed_inmemory_website_callback.c",
          "src/static_compressed_inmemory_website_callback.h"
        ],
        "message": "Fix static_compressed_inmemory_website_callback",
        "before_after_code_files": [
          "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
          "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
            "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
          ],
          "candidate": [
            "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
            "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
          ]
        }
      },
      "candidate_diff": {
        "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c": [
          "File: src/static_compressed_inmemory_website_callback.c -> src/static_compressed_inmemory_website_callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "285: int callback_static_compressed_inmemory_website (const struct _u_request * request, struct _u_response * response, void * user_data) {",
          "286:   struct _u_compressed_inmemory_website_config * config = (struct _u_compressed_inmemory_website_config *)user_data;",
          "287:   char ** accept_list = NULL;",
          "289:   z_stream defstream;",
          "290:   unsigned char * file_content, * file_content_orig = NULL;",
          "291:   size_t length, read_length, offset, data_zip_len = 0;",
          "",
          "[Removed Lines]",
          "288:   int ret = U_CALLBACK_CONTINUE, compress_mode = U_COMPRESS_NONE, res;",
          "",
          "[Added Lines]",
          "292:   int ret = U_CALLBACK_CONTINUE, compress_mode = U_COMPRESS_NONE, res, unknown_mime_type = 0;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "323:       url_dup_save = file_requested = o_strdup(\"index.html\");",
          "324:     }",
          "326:     if (!u_map_has_key_case(response->map_header, U_CONTENT_HEADER)) {",
          "327:       if (split_string(u_map_get_case(request->map_header, U_ACCEPT_HEADER), \",\", &accept_list)) {",
          "328:         if (config->allow_gzip && string_array_has_trimmed_value((const char **)accept_list, U_ACCEPT_GZIP)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:     content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));",
          "331:     if (content_type == NULL) {",
          "332:       content_type = u_map_get(&config->mime_types, \"*\");",
          "333:       unknown_mime_type = 1;",
          "334:     }",
          "335:     u_map_copy_into(response->map_header, &config->map_header);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "331:           compress_mode = U_COMPRESS_DEFL;",
          "332:         }",
          "346:         if (compress_mode != U_COMPRESS_NONE) {",
          "347:           if (compress_mode == U_COMPRESS_GZIP && config->allow_cache_compressed && u_map_has_key(&config->gzip_files, file_requested)) {",
          "348:             ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
          "349:             u_map_put(response->map_header, U_CONTENT_HEADER, U_ACCEPT_GZIP);",
          "350:           } else if (compress_mode == U_COMPRESS_DEFL && config->allow_cache_compressed && u_map_has_key(&config->deflate_files, file_requested)) {",
          "351:             ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
          "352:             u_map_put(response->map_header, U_CONTENT_HEADER, U_ACCEPT_DEFLATE);",
          "353:           } else {",
          "354:             file_path = msprintf(\"%s/%s\", ((struct _u_compressed_inmemory_website_config *)user_data)->files_path, file_requested);",
          "356:             if (!pthread_mutex_lock(&config->lock)) {",
          "357:               f = fopen (file_path, \"rb\");",
          "358:               if (f) {",
          "359:                 fseek (f, 0, SEEK_END);",
          "360:                 offset = length = ftell (f);",
          "361:                 fseek (f, 0, SEEK_SET);",
          "",
          "[Removed Lines]",
          "334:         content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));",
          "335:         if (content_type == NULL) {",
          "336:           content_type = u_map_get(&config->mime_types, \"*\");",
          "337:           y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
          "338:         }",
          "339:         if (!string_array_has_value((const char **)config->mime_types_compressed, content_type)) {",
          "340:           compress_mode = U_COMPRESS_NONE;",
          "341:         }",
          "343:         u_map_put(response->map_header, \"Content-Type\", content_type);",
          "344:         u_map_copy_into(response->map_header, &config->map_header);",
          "",
          "[Added Lines]",
          "349:             u_map_put(response->map_header, \"Content-Type\", content_type);",
          "353:             u_map_put(response->map_header, \"Content-Type\", content_type);",
          "360:                 if (unknown_mime_type) {",
          "361:                   y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
          "362:                 }",
          "363:                 if (!string_array_has_value((const char **)config->mime_types_compressed, content_type)) {",
          "364:                   compress_mode = U_COMPRESS_NONE;",
          "365:                 }",
          "367:                 u_map_put(response->map_header, \"Content-Type\", content_type);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "372:                   }",
          "374:                   if (compress_mode == U_COMPRESS_GZIP) {",
          "377:                                      Z_DEFLATED,",
          "378:                                      U_GZIP_WINDOW_BITS | U_GZIP_ENCODING,",
          "379:                                      8,",
          "",
          "[Removed Lines]",
          "375:                     if (deflateInit2(&defstream,",
          "376:                                      Z_DEFAULT_COMPRESSION,",
          "",
          "[Added Lines]",
          "385:                     if (deflateInit2(&defstream,",
          "386:                                      Z_DEFAULT_COMPRESSION,",
          "",
          "---------------"
        ],
        "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h": [
          "File: src/static_compressed_inmemory_website_callback.h -> src/static_compressed_inmemory_website_callback.h"
        ]
      }
    },
    {
      "candidate_hash": "d991c540b137f1dc80988e7c985032d34a83b1b8",
      "candidate_info": {
        "commit_hash": "d991c540b137f1dc80988e7c985032d34a83b1b8",
        "repo": "babelouest/glewlwyd",
        "commit_url": "https://github.com/babelouest/glewlwyd/commit/d991c540b137f1dc80988e7c985032d34a83b1b8",
        "files": [
          "src/static_compressed_inmemory_website_callback.c",
          "src/static_compressed_inmemory_website_callback.h"
        ],
        "message": "Update static_compressed_inmemory_website_callback",
        "before_after_code_files": [
          "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
          "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
            "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
          ],
          "candidate": [
            "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c",
            "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h"
          ]
        }
      },
      "candidate_diff": {
        "src/static_compressed_inmemory_website_callback.c||src/static_compressed_inmemory_website_callback.c": [
          "File: src/static_compressed_inmemory_website_callback.c -> src/static_compressed_inmemory_website_callback.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "289: int callback_static_compressed_inmemory_website (const struct _u_request * request, struct _u_response * response, void * user_data) {",
          "290:   struct _u_compressed_inmemory_website_config * config = (struct _u_compressed_inmemory_website_config *)user_data;",
          "291:   char ** accept_list = NULL;",
          "293:   z_stream defstream;",
          "294:   unsigned char * file_content, * file_content_orig = NULL;",
          "295:   size_t length, read_length, offset, data_zip_len = 0;",
          "",
          "[Removed Lines]",
          "292:   int ret = U_CALLBACK_CONTINUE, compress_mode = U_COMPRESS_NONE, res, unknown_mime_type = 0;",
          "",
          "[Added Lines]",
          "288:   int ret = U_CALLBACK_CONTINUE, compress_mode = U_COMPRESS_NONE, res;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "309:     while (file_requested[0] == '/') {",
          "310:       file_requested++;",
          "311:     }",
          "313:     while (file_requested[0] == '/') {",
          "314:       file_requested++;",
          "315:     }",
          "",
          "[Removed Lines]",
          "312:     file_requested += !o_strnullempty((config->url_prefix));",
          "",
          "[Added Lines]",
          "308:     file_requested += o_strlen((config->url_prefix));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "327:       url_dup_save = file_requested = o_strdup(\"index.html\");",
          "328:     }",
          "337:     if (!u_map_has_key_case(response->map_header, U_CONTENT_HEADER)) {",
          "338:       if (split_string(u_map_get_case(request->map_header, U_ACCEPT_HEADER), \",\", &accept_list)) {",
          "339:         if (config->allow_gzip && string_array_has_trimmed_value((const char **)accept_list, U_ACCEPT_GZIP)) {",
          "",
          "[Removed Lines]",
          "330:     content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));",
          "331:     if (content_type == NULL) {",
          "332:       content_type = u_map_get(&config->mime_types, \"*\");",
          "333:       unknown_mime_type = 1;",
          "334:     }",
          "335:     u_map_copy_into(response->map_header, &config->map_header);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "342:           compress_mode = U_COMPRESS_DEFL;",
          "343:         }",
          "345:         if (compress_mode != U_COMPRESS_NONE) {",
          "346:           if (compress_mode == U_COMPRESS_GZIP && config->allow_cache_compressed && u_map_has_key(&config->gzip_files, file_requested)) {",
          "347:             ulfius_set_binary_body_response(response, 200, u_map_get(&config->gzip_files, file_requested), u_map_get_length(&config->gzip_files, file_requested));",
          "348:             u_map_put(response->map_header, U_CONTENT_HEADER, U_ACCEPT_GZIP);",
          "350:           } else if (compress_mode == U_COMPRESS_DEFL && config->allow_cache_compressed && u_map_has_key(&config->deflate_files, file_requested)) {",
          "351:             ulfius_set_binary_body_response(response, 200, u_map_get(&config->deflate_files, file_requested), u_map_get_length(&config->deflate_files, file_requested));",
          "352:             u_map_put(response->map_header, U_CONTENT_HEADER, U_ACCEPT_DEFLATE);",
          "354:           } else {",
          "355:             file_path = msprintf(\"%s/%s\", ((struct _u_compressed_inmemory_website_config *)user_data)->files_path, file_requested);",
          "357:             if (!pthread_mutex_lock(&config->lock)) {",
          "358:               f = fopen (file_path, \"rb\");",
          "359:               if (f) {",
          "361:                   y_log_message(Y_LOG_LEVEL_WARNING, \"Static File Server - Unknown mime type for extension %s\", get_filename_ext(file_requested));",
          "362:                 }",
          "363:                 if (!string_array_has_value((const char **)config->mime_types_compressed, content_type)) {",
          "",
          "[Removed Lines]",
          "349:             u_map_put(response->map_header, \"Content-Type\", content_type);",
          "353:             u_map_put(response->map_header, \"Content-Type\", content_type);",
          "360:                 if (unknown_mime_type) {",
          "",
          "[Added Lines]",
          "348:                 content_type = u_map_get_case(&config->mime_types, get_filename_ext(file_requested));",
          "349:                 if (content_type == NULL) {",
          "350:                   content_type = u_map_get(&config->mime_types, \"*\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "365:                 }",
          "367:                 u_map_put(response->map_header, \"Content-Type\", content_type);",
          "369:                 fseek (f, 0, SEEK_END);",
          "370:                 offset = length = ftell (f);",
          "371:                 fseek (f, 0, SEEK_SET);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "358:                 u_map_copy_into(response->map_header, &config->map_header);",
          "",
          "---------------"
        ],
        "src/static_compressed_inmemory_website_callback.h||src/static_compressed_inmemory_website_callback.h": [
          "File: src/static_compressed_inmemory_website_callback.h -> src/static_compressed_inmemory_website_callback.h"
        ]
      }
    }
  ]
}