{
  "cve_id": "CVE-2019-15226",
  "cve_desc": "Upon receiving each incoming request header data, Envoy will iterate over existing request headers to verify that the total size of the headers stays below a maximum limit. The implementation in versions 1.10.0 through 1.11.1 for HTTP/1.x traffic and all versions of Envoy for HTTP/2 traffic had O(n^2) performance characteristics. A remote attacker may craft a request that stays below the maximum request header size but consists of many thousands of small headers to consume CPU and result in a denial-of-service attack.",
  "repo": "envoyproxy/envoy",
  "patch_hash": "afc39bea36fd436e54262f150c009e8d72db5014",
  "patch_info": {
    "commit_hash": "afc39bea36fd436e54262f150c009e8d72db5014",
    "repo": "envoyproxy/envoy",
    "commit_url": "https://github.com/envoyproxy/envoy/commit/afc39bea36fd436e54262f150c009e8d72db5014",
    "files": [
      "docs/root/intro/version_history.rst",
      "include/envoy/access_log/access_log.h",
      "include/envoy/http/header_map.h",
      "source/common/http/conn_manager_impl.cc",
      "source/common/http/header_map_impl.cc",
      "source/common/http/header_map_impl.h",
      "source/common/http/http1/codec_impl.cc",
      "source/common/http/http2/codec_impl.cc",
      "source/common/router/router.cc",
      "source/extensions/access_loggers/common/access_log_base.h",
      "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
      "source/extensions/filters/common/expr/context.cc",
      "source/extensions/filters/http/rbac/rbac_filter.cc",
      "test/common/http/conn_manager_impl_test.cc",
      "test/common/http/header_map_impl_speed_test.cc",
      "test/common/http/header_map_impl_test.cc",
      "test/common/http/http2/codec_impl_test.cc",
      "test/integration/http2_integration_test.cc",
      "test/integration/http_integration.cc",
      "test/integration/http_integration.h",
      "test/integration/protocol_integration_test.cc"
    ],
    "message": "Track byteSize of HeaderMap internally.\n\nIntroduces a cached byte size updated internally in HeaderMap. The value\nis stored as an optional, and is cleared whenever a non-const pointer or\nreference to a HeaderEntry is accessed. The cached value can be set with\nrefreshByteSize() which performs an iteration over the HeaderMap to sum\nthe size of each key and value in the HeaderMap.\n\nSigned-off-by: Asra Ali <asraa@google.com>",
    "before_after_code_files": [
      "include/envoy/access_log/access_log.h||include/envoy/access_log/access_log.h",
      "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
      "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
      "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
      "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
      "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
      "source/common/http/http2/codec_impl.cc||source/common/http/http2/codec_impl.cc",
      "source/common/router/router.cc||source/common/router/router.cc",
      "source/extensions/access_loggers/common/access_log_base.h||source/extensions/access_loggers/common/access_log_base.h",
      "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
      "source/extensions/filters/common/expr/context.cc||source/extensions/filters/common/expr/context.cc",
      "source/extensions/filters/http/rbac/rbac_filter.cc||source/extensions/filters/http/rbac/rbac_filter.cc",
      "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc",
      "test/common/http/header_map_impl_speed_test.cc||test/common/http/header_map_impl_speed_test.cc",
      "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc",
      "test/common/http/http2/codec_impl_test.cc||test/common/http/http2/codec_impl_test.cc",
      "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc",
      "test/integration/http_integration.cc||test/integration/http_integration.cc",
      "test/integration/http_integration.h||test/integration/http_integration.h",
      "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
    ]
  },
  "patch_diff": {
    "include/envoy/access_log/access_log.h||include/envoy/access_log/access_log.h": [
      "File: include/envoy/access_log/access_log.h -> include/envoy/access_log/access_log.h"
    ],
    "include/envoy/http/header_map.h||include/envoy/http/header_map.h": [
      "File: include/envoy/http/header_map.h -> include/envoy/http/header_map.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "457:   virtual void setReferenceKey(const LowerCaseString& key, const std::string& value) PURE;",
      "",
      "[Removed Lines]",
      "462:   virtual uint64_t byteSize() const PURE;",
      "",
      "[Added Lines]",
      "473:   virtual absl::optional<uint64_t> byteSize() const PURE;",
      "484:   virtual uint64_t refreshByteSize() PURE;",
      "494:   virtual uint64_t byteSizeInternal() const PURE;",
      "",
      "---------------"
    ],
    "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
      "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "506:   }",
      "508:   connection_manager_.stats_.named_.downstream_rq_active_.dec();",
      "509:   for (const AccessLog::InstanceSharedPtr& access_log : connection_manager_.config_.accessLogs()) {",
      "510:     access_log->log(request_headers_.get(), response_headers_.get(), response_trailers_.get(),",
      "511:                     stream_info_);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "512:   if (request_headers_ != nullptr) {",
      "513:     request_headers_->refreshByteSize();",
      "514:   }",
      "515:   if (response_headers_ != nullptr) {",
      "516:     response_headers_->refreshByteSize();",
      "517:   }",
      "518:   if (response_trailers_ != nullptr) {",
      "519:     response_trailers_->refreshByteSize();",
      "520:   }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "719:     }",
      "720:   }",
      "",
      "[Removed Lines]",
      "722:   ASSERT(connection_manager_.config_.maxRequestHeadersKb() > 0);",
      "723:   if (request_headers_->byteSize() > (connection_manager_.config_.maxRequestHeadersKb() * 1024)) {",
      "724:     sendLocalReply(Grpc::Common::hasGrpcContentType(*request_headers_),",
      "725:                    Code::RequestHeaderFieldsTooLarge, \"\", nullptr, is_head_request_, absl::nullopt,",
      "726:                    StreamInfo::ResponseCodeDetails::get().RequestHeadersTooLarge);",
      "727:     return;",
      "728:   }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc": [
      "File: source/common/http/header_map_impl.cc -> source/common/http/header_map_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "295:   }",
      "296: };",
      "299:   if (data.empty()) {",
      "301:   }",
      "302:   if (!header.empty()) {",
      "303:     header.append(\",\", 1);",
      "304:   }",
      "305:   header.append(data.data(), data.size());",
      "306: }",
      "308: HeaderMapImpl::HeaderMapImpl() { memset(&inline_headers_, 0, sizeof(inline_headers_)); }",
      "",
      "[Removed Lines]",
      "298: void HeaderMapImpl::appendToHeader(HeaderString& header, absl::string_view data) {",
      "300:     return;",
      "",
      "[Added Lines]",
      "298: uint64_t HeaderMapImpl::appendToHeader(HeaderString& header, absl::string_view data) {",
      "300:     return 0;",
      "302:   uint64_t byte_size = 0;",
      "305:     byte_size += 1;",
      "308:   return data.size() + byte_size;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "319:   }",
      "320: }",
      "322: void HeaderMapImpl::copyFrom(const HeaderMap& header_map) {",
      "323:   header_map.iterate(",
      "324:       [](const HeaderEntry& header, void* context) -> HeaderMap::Iterate {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "325: void HeaderMapImpl::addSize(uint64_t size) {",
      "327:   if (cached_byte_size_.has_value()) {",
      "328:     cached_byte_size_.value() += size;",
      "329:   }",
      "330: }",
      "332: void HeaderMapImpl::subtractSize(uint64_t size) {",
      "333:   if (cached_byte_size_.has_value()) {",
      "334:     ASSERT(cached_byte_size_ >= size);",
      "335:     cached_byte_size_.value() -= size;",
      "336:   }",
      "337: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "359:     if (*ref_lookup_response.entry_ == nullptr) {",
      "360:       maybeCreateInline(ref_lookup_response.entry_, *ref_lookup_response.key_, std::move(value));",
      "361:     } else {",
      "363:       value.clear();",
      "364:     }",
      "365:   } else {",
      "366:     std::list<HeaderEntryImpl>::iterator i = headers_.insert(std::move(key), std::move(value));",
      "367:     i->entry_ = i;",
      "368:   }",
      "",
      "[Removed Lines]",
      "362:       appendToHeader((*ref_lookup_response.entry_)->value(), value.getStringView());",
      "",
      "[Added Lines]",
      "379:       const uint64_t added_size =",
      "380:           appendToHeader((*ref_lookup_response.entry_)->value(), value.getStringView());",
      "381:       addSize(added_size);",
      "385:     addSize(key.size() + value.size());",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "374:   auto* entry = getExistingInline(key.getStringView());",
      "375:   if (entry != nullptr) {",
      "377:     key.clear();",
      "378:     value.clear();",
      "379:   } else {",
      "",
      "[Removed Lines]",
      "376:     appendToHeader(entry->value(), value.getStringView());",
      "",
      "[Added Lines]",
      "396:     const uint64_t added_size = appendToHeader(entry->value(), value.getStringView());",
      "397:     addSize(added_size);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "408:   if (entry != nullptr) {",
      "409:     char buf[32];",
      "410:     StringUtil::itoa(buf, sizeof(buf), value);",
      "412:     return;",
      "413:   }",
      "414:   HeaderString new_key;",
      "",
      "[Removed Lines]",
      "411:     appendToHeader(entry->value(), buf);",
      "",
      "[Added Lines]",
      "432:     const uint64_t added_size = appendToHeader(entry->value(), buf);",
      "433:     addSize(added_size);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "423: void HeaderMapImpl::addCopy(const LowerCaseString& key, const std::string& value) {",
      "424:   auto* entry = getExistingInline(key.get());",
      "425:   if (entry != nullptr) {",
      "427:     return;",
      "428:   }",
      "429:   HeaderString new_key;",
      "",
      "[Removed Lines]",
      "426:     appendToHeader(entry->value(), value);",
      "",
      "[Added Lines]",
      "448:     const uint64_t added_size = appendToHeader(entry->value(), value);",
      "449:     addSize(added_size);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "451:   ASSERT(new_value.empty()); // NOLINT(bugprone-use-after-move)",
      "452: }",
      "455:   uint64_t byte_size = 0;",
      "456:   for (const HeaderEntryImpl& header : headers_) {",
      "457:     byte_size += header.key().size();",
      "458:     byte_size += header.value().size();",
      "459:   }",
      "461:   return byte_size;",
      "462: }",
      "",
      "[Removed Lines]",
      "454: uint64_t HeaderMapImpl::byteSize() const {",
      "",
      "[Added Lines]",
      "477: absl::optional<uint64_t> HeaderMapImpl::byteSize() const { return cached_byte_size_; }",
      "479: uint64_t HeaderMapImpl::refreshByteSize() {",
      "480:   if (!cached_byte_size_.has_value()) {",
      "483:     cached_byte_size_ = byteSizeInternal();",
      "484:   }",
      "485:   return cached_byte_size_.value();",
      "486: }",
      "488: uint64_t HeaderMapImpl::byteSizeInternal() const {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "474: HeaderEntry* HeaderMapImpl::get(const LowerCaseString& key) {",
      "475:   for (HeaderEntryImpl& header : headers_) {",
      "476:     if (header.key() == key.get().c_str()) {",
      "477:       return &header;",
      "478:     }",
      "479:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "511:       cached_byte_size_.reset();",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "528:   } else {",
      "529:     for (auto i = headers_.begin(); i != headers_.end();) {",
      "530:       if (i->key() == key.get().c_str()) {",
      "531:         i = headers_.erase(i);",
      "532:       } else {",
      "533:         ++i;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "566:         subtractSize(i->key().size() + i->value().size());",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "537: }",
      "539: void HeaderMapImpl::removePrefix(const LowerCaseString& prefix) {",
      "541:     bool to_remove = absl::StartsWith(entry.key().getStringView(), prefix.get());",
      "542:     if (to_remove) {",
      "",
      "[Removed Lines]",
      "540:   headers_.remove_if([&](const HeaderEntryImpl& entry) {",
      "",
      "[Added Lines]",
      "576:   headers_.remove_if([&prefix, this](const HeaderEntryImpl& entry) {",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "546:       if (cb) {",
      "547:         StaticLookupResponse ref_lookup_response = cb(*this);",
      "548:         if (ref_lookup_response.entry_) {",
      "550:         }",
      "551:       }",
      "552:     }",
      "553:     return to_remove;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "585:           const uint32_t key_value_size = (*ref_lookup_response.entry_)->key().size() +",
      "586:                                           (*ref_lookup_response.entry_)->value().size();",
      "587:           subtractSize(key_value_size);",
      "590:       } else {",
      "591:         subtractSize(entry.key().size() + entry.value().size());",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "571: HeaderMapImpl::HeaderEntryImpl& HeaderMapImpl::maybeCreateInline(HeaderEntryImpl** entry,",
      "572:                                                                  const LowerCaseString& key) {",
      "573:   if (*entry) {",
      "574:     return **entry;",
      "575:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "614:   cached_byte_size_.reset();",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "588:     return **entry;",
      "589:   }",
      "591:   std::list<HeaderEntryImpl>::iterator i = headers_.insert(key, std::move(value));",
      "592:   i->entry_ = i;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "633:   addSize(key.get().size() + value.size());",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "609:   }",
      "611:   HeaderEntryImpl* entry = *ptr_to_entry;",
      "613:   headers_.erase(entry->entry_);",
      "614: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "655:   const uint64_t size_to_subtract = entry->entry_->key().size() + entry->entry_->value().size();",
      "656:   subtractSize(size_to_subtract);",
      "",
      "---------------"
    ],
    "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h": [
      "File: source/common/http/header_map_impl.h -> source/common/http/header_map_impl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "20: #define DEFINE_INLINE_HEADER_FUNCS(name)                                                           \\",
      "21: public:                                                                                            \\",
      "22:   const HeaderEntry* name() const override { return inline_headers_.name##_; }                     \\",
      "24:   HeaderEntry& insert##name() override {                                                           \\",
      "25:     return maybeCreateInline(&inline_headers_.name##_, Headers::get().name);                       \\",
      "26:   }                                                                                                \\",
      "27:   void remove##name() override { removeInline(&inline_headers_.name##_); }",
      "",
      "[Removed Lines]",
      "23:   HeaderEntry* name() override { return inline_headers_.name##_; }                                 \\",
      "",
      "[Added Lines]",
      "28:   HeaderEntry* name() override {                                                                   \\",
      "29:     cached_byte_size_.reset();                                                                     \\",
      "30:     return inline_headers_.name##_;                                                                \\",
      "31:   }                                                                                                \\",
      "33:     cached_byte_size_.reset();                                                                     \\",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "48:   HeaderMapImpl();",
      "49:   explicit HeaderMapImpl(",
      "",
      "[Removed Lines]",
      "46:   static void appendToHeader(HeaderString& header, absl::string_view data);",
      "",
      "[Added Lines]",
      "55:   static uint64_t appendToHeader(HeaderString& header, absl::string_view data);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "71:   void addCopy(const LowerCaseString& key, const std::string& value) override;",
      "72:   void setReference(const LowerCaseString& key, const std::string& value) override;",
      "73:   void setReferenceKey(const LowerCaseString& key, const std::string& value) override;",
      "75:   const HeaderEntry* get(const LowerCaseString& key) const override;",
      "76:   HeaderEntry* get(const LowerCaseString& key) override;",
      "77:   void iterate(ConstIterateCb cb, void* context) const override;",
      "",
      "[Removed Lines]",
      "74:   uint64_t byteSize() const override;",
      "",
      "[Added Lines]",
      "83:   absl::optional<uint64_t> byteSize() const override;",
      "84:   uint64_t refreshByteSize() override;",
      "85:   uint64_t byteSizeInternal() const override;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "195:   HeaderEntryImpl* getExistingInline(absl::string_view key);",
      "197:   void removeInline(HeaderEntryImpl** entry);",
      "199:   AllInlineHeaders inline_headers_;",
      "200:   HeaderList headers_;",
      "202:   ALL_INLINE_HEADERS(DEFINE_INLINE_HEADER_FUNCS)",
      "203: };",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "209:   void addSize(uint64_t size);",
      "210:   void subtractSize(uint64_t size);",
      "217:   absl::optional<uint64_t> cached_byte_size_ = 0;",
      "",
      "---------------"
    ],
    "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc": [
      "File: source/common/http/http1/codec_impl.cc -> source/common/http/http1/codec_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "460:   header_parsing_state_ = HeaderParsingState::Value;",
      "461:   current_header_value_.append(data, length);",
      "465:   if (total > (max_request_headers_kb_ * 1024)) {",
      "466:     error_code_ = Http::Code::RequestHeaderFieldsTooLarge;",
      "467:     sendProtocolError();",
      "",
      "[Removed Lines]",
      "463:   const uint32_t total =",
      "464:       current_header_field_.size() + current_header_value_.size() + current_header_map_->byteSize();",
      "",
      "[Added Lines]",
      "464:   ASSERT(current_header_map_->byteSize().has_value());",
      "465:   const uint32_t total = current_header_field_.size() + current_header_value_.size() +",
      "466:                          current_header_map_->byteSize().value();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "472: int ConnectionImpl::onHeadersCompleteBase() {",
      "473:   ENVOY_CONN_LOG(trace, \"headers complete\", connection_);",
      "474:   completeLastHeader();",
      "475:   if (!(parser_.http_major == 1 && parser_.http_minor == 1)) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "479:   ASSERT(current_header_map_->byteSize().has_value() &&",
      "480:          current_header_map_->byteSize() == current_header_map_->byteSizeInternal());",
      "",
      "---------------"
    ],
    "source/common/http/http2/codec_impl.cc||source/common/http/http2/codec_impl.cc": [
      "File: source/common/http/http2/codec_impl.cc -> source/common/http/http2/codec_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "510:   switch (frame->hd.type) {",
      "511:   case NGHTTP2_HEADERS: {",
      "512:     stream->remote_end_stream_ = frame->hd.flags & NGHTTP2_FLAG_END_STREAM;",
      "513:     if (!stream->cookies_.empty()) {",
      "514:       HeaderString key(Headers::get().Cookie);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "514:     ASSERT(stream->headers_->byteSize().has_value() &&",
      "515:            stream->headers_->byteSize().value() == stream->headers_->byteSizeInternal());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "620:   case NGHTTP2_HEADERS:",
      "621:   case NGHTTP2_DATA: {",
      "622:     StreamImpl* stream = getStream(frame->hd.stream_id);",
      "623:     stream->local_end_stream_sent_ = frame->hd.flags & NGHTTP2_FLAG_END_STREAM;",
      "624:     break;",
      "625:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "627:     if (stream->headers_) {",
      "630:       ASSERT(stream->headers_->byteSize().has_value() &&",
      "631:              stream->headers_->byteSize().value() == stream->headers_->byteSizeInternal());",
      "632:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "808:     stats_.headers_cb_no_stream_.inc();",
      "809:     return 0;",
      "810:   }",
      "812:   stream->saveHeader(std::move(name), std::move(value));",
      "815:     stats_.header_overflow_.inc();",
      "816:     return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE;",
      "",
      "[Removed Lines]",
      "813:   if (stream->headers_->byteSize() > max_request_headers_kb_ * 1024) {",
      "",
      "[Added Lines]",
      "823:   ASSERT(stream->headers_->byteSize().has_value());",
      "824:   if (stream->headers_->byteSize().value() > max_request_headers_kb_ * 1024) {",
      "",
      "---------------"
    ],
    "source/common/router/router.cc||source/common/router/router.cc": [
      "File: source/common/router/router.cc -> source/common/router/router.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1399:   stream_info_.setUpstreamTiming(upstream_timing_);",
      "1400:   stream_info_.onRequestComplete();",
      "1401:   for (const auto& upstream_log : parent_.config_.upstream_logs_) {",
      "1402:     upstream_log->log(parent_.downstream_headers_, upstream_headers_.get(),",
      "1403:                       upstream_trailers_.get(), stream_info_);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1404:   if (upstream_headers_ != nullptr) {",
      "1405:     upstream_headers_->refreshByteSize();",
      "1406:   }",
      "1407:   if (upstream_trailers_ != nullptr) {",
      "1408:     upstream_trailers_->refreshByteSize();",
      "1409:   }",
      "",
      "---------------"
    ],
    "source/extensions/access_loggers/common/access_log_base.h||source/extensions/access_loggers/common/access_log_base.h": [
      "File: source/extensions/access_loggers/common/access_log_base.h -> source/extensions/access_loggers/common/access_log_base.h"
    ],
    "source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc||source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc": [
      "File: source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc -> source/extensions/access_loggers/grpc/http_grpc_access_log_impl.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "95:     request_properties->set_original_path(",
      "96:         std::string(request_headers.EnvoyOriginalPath()->value().getStringView()));",
      "97:   }",
      "99:   request_properties->set_request_body_bytes(stream_info.bytesReceived());",
      "100:   if (request_headers.Method() != nullptr) {",
      "101:     envoy::api::v2::core::RequestMethod method =",
      "",
      "[Removed Lines]",
      "98:   request_properties->set_request_headers_bytes(request_headers.byteSize());",
      "",
      "[Added Lines]",
      "98:   request_properties->set_request_headers_bytes(request_headers.byteSize().value());",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "123:   if (stream_info.responseCodeDetails()) {",
      "124:     response_properties->set_response_code_details(stream_info.responseCodeDetails().value());",
      "125:   }",
      "127:   response_properties->set_response_body_bytes(stream_info.bytesSent());",
      "128:   if (!response_headers_to_log_.empty()) {",
      "129:     auto* logged_headers = response_properties->mutable_response_headers();",
      "",
      "[Removed Lines]",
      "126:   response_properties->set_response_headers_bytes(response_headers.byteSize());",
      "",
      "[Added Lines]",
      "126:   response_properties->set_response_headers_bytes(response_headers.byteSize().value());",
      "",
      "---------------"
    ],
    "source/extensions/filters/common/expr/context.cc||source/extensions/filters/common/expr/context.cc": [
      "File: source/extensions/filters/common/expr/context.cc -> source/extensions/filters/common/expr/context.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "79:     } else if (value == UserAgent) {",
      "80:       return convertHeaderEntry(headers_.value_->UserAgent());",
      "81:     } else if (value == TotalSize) {",
      "83:     }",
      "84:   }",
      "85:   return {};",
      "",
      "[Removed Lines]",
      "82:       return CelValue::CreateInt64(info_.bytesReceived() + headers_.value_->byteSize());",
      "",
      "[Added Lines]",
      "82:       return CelValue::CreateInt64(info_.bytesReceived() + headers_.value_->byteSize().value());",
      "",
      "---------------"
    ],
    "source/extensions/filters/http/rbac/rbac_filter.cc||source/extensions/filters/http/rbac/rbac_filter.cc": [
      "File: source/extensions/filters/http/rbac/rbac_filter.cc -> source/extensions/filters/http/rbac/rbac_filter.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "76:   if (shadow_engine != nullptr) {",
      "77:     std::string shadow_resp_code =",
      "78:         Filters::Common::RBAC::DynamicMetadataKeysSingleton::get().EngineResultAllowed;",
      "79:     if (shadow_engine->allowed(*callbacks_->connection(), headers, callbacks_->streamInfo(),",
      "80:                                &effective_policy_id)) {",
      "81:       ENVOY_LOG(debug, \"shadow allowed\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "82:     headers.refreshByteSize();",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:   const auto engine =",
      "106:       config_->engine(callbacks_->route(), Filters::Common::RBAC::EnforcementMode::Enforced);",
      "107:   if (engine != nullptr) {",
      "108:     if (engine->allowed(*callbacks_->connection(), headers, callbacks_->streamInfo(), nullptr)) {",
      "109:       ENVOY_LOG(debug, \"enforced allowed\");",
      "110:       config_->stats().allowed_.inc();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "115:     headers.refreshByteSize();",
      "",
      "---------------"
    ],
    "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc": [
      "File: test/common/http/conn_manager_impl_test.cc -> test/common/http/conn_manager_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "4409:   EXPECT_EQ(1U, stats_.named_.downstream_cx_overload_disable_keepalive_.value());",
      "4410: }",
      "4457: TEST_F(HttpConnectionManagerImplTest, TestStopAllIterationAndBufferOnDecodingPathFirstFilter) {",
      "4458:   setup(false, \"envoy-custom-server\", false);",
      "4459:   setUpEncoderAndDecoder(true, true);",
      "",
      "[Removed Lines]",
      "4412: TEST_F(HttpConnectionManagerImplTest, OverlyLongHeadersRejected) {",
      "4413:   setup(false, \"\");",
      "4415:   std::string response_code;",
      "4416:   std::string response_body;",
      "4417:   EXPECT_CALL(*codec_, dispatch(_)).WillOnce(Invoke([&](Buffer::Instance&) -> void {",
      "4418:     StreamDecoder* decoder = &conn_manager_->newStream(response_encoder_);",
      "4419:     HeaderMapPtr headers{",
      "4420:         new TestHeaderMapImpl{{\":authority\", \"host\"}, {\":path\", \"/\"}, {\":method\", \"GET\"}}};",
      "4421:     headers->addCopy(LowerCaseString(\"Foo\"), std::string(60 * 1024, 'a'));",
      "4423:     EXPECT_CALL(response_encoder_, encodeHeaders(_, true))",
      "4424:         .WillOnce(Invoke([&response_code](const HeaderMap& headers, bool) -> void {",
      "4425:           response_code = std::string(headers.Status()->value().getStringView());",
      "4426:         }));",
      "4427:     decoder->decodeHeaders(std::move(headers), true);",
      "4428:     conn_manager_->newStream(response_encoder_);",
      "4429:   }));",
      "4431:   Buffer::OwnedImpl fake_input(\"1234\");",
      "4432:   conn_manager_->onData(fake_input, false); // kick off request",
      "4434:   EXPECT_EQ(\"431\", response_code);",
      "4435:   EXPECT_EQ(\"\", response_body);",
      "4436: }",
      "4438: TEST_F(HttpConnectionManagerImplTest, OverlyLongHeadersAcceptedIfConfigured) {",
      "4439:   max_request_headers_kb_ = 62;",
      "4440:   setup(false, \"\");",
      "4442:   EXPECT_CALL(*codec_, dispatch(_)).WillOnce(Invoke([&](Buffer::Instance&) -> void {",
      "4443:     StreamDecoder* decoder = &conn_manager_->newStream(response_encoder_);",
      "4444:     HeaderMapPtr headers{",
      "4445:         new TestHeaderMapImpl{{\":authority\", \"host\"}, {\":path\", \"/\"}, {\":method\", \"GET\"}}};",
      "4446:     headers->addCopy(LowerCaseString(\"Foo\"), std::string(60 * 1024, 'a'));",
      "4448:     EXPECT_CALL(response_encoder_, encodeHeaders(_, _)).Times(0);",
      "4449:     decoder->decodeHeaders(std::move(headers), true);",
      "4450:     conn_manager_->newStream(response_encoder_);",
      "4451:   }));",
      "4453:   Buffer::OwnedImpl fake_input(\"1234\");",
      "4454:   conn_manager_->onData(fake_input, false); // kick off request",
      "4455: }",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/common/http/header_map_impl_speed_test.cc||test/common/http/header_map_impl_speed_test.cc": [
      "File: test/common/http/header_map_impl_speed_test.cc -> test/common/http/header_map_impl_speed_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "104:   addDummyHeaders(headers, state.range(0));",
      "105:   uint64_t size = 0;",
      "106:   for (auto _ : state) {",
      "108:   }",
      "109:   benchmark::DoNotOptimize(size);",
      "110: }",
      "",
      "[Removed Lines]",
      "107:     size += headers.byteSize();",
      "",
      "[Added Lines]",
      "107:     size += headers.byteSize().value();",
      "",
      "---------------"
    ],
    "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc": [
      "File: test/common/http/header_map_impl_test.cc -> test/common/http/header_map_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "366:   HeaderMapImpl headers;",
      "367:   EXPECT_TRUE(headers.empty());",
      "368:   EXPECT_EQ(0, headers.size());",
      "369:   EXPECT_EQ(nullptr, headers.Host());",
      "370:   headers.insertHost().value(std::string(\"hello\"));",
      "371:   EXPECT_FALSE(headers.empty());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "369:   EXPECT_EQ(headers.byteSize().value(), 0);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "375:   EXPECT_EQ(\"hello\", headers.get(Headers::get().Host)->value().getStringView());",
      "376: }",
      "378: TEST(HeaderMapImplTest, MoveIntoInline) {",
      "379:   HeaderMapImpl headers;",
      "380:   HeaderString key;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "380: uint64_t countBytesForTest(const HeaderMapImpl& headers) {",
      "381:   uint64_t byte_size = 0;",
      "382:   headers.iterate(",
      "383:       [](const Http::HeaderEntry& header, void* context) -> Http::HeaderMap::Iterate {",
      "384:         auto* byte_size = static_cast<uint64_t*>(context);",
      "386:         return Http::HeaderMap::Iterate::Continue;",
      "387:       },",
      "388:       &byte_size);",
      "389:   return byte_size;",
      "390: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "392:   headers.addViaMove(std::move(key2), std::move(value2));",
      "393:   EXPECT_EQ(\"cache-control\", headers.CacheControl()->key().getStringView());",
      "394:   EXPECT_EQ(\"hello,there\", headers.CacheControl()->value().getStringView());",
      "395: }",
      "397: TEST(HeaderMapImplTest, Remove) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "409:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "401:   LowerCaseString static_key(\"hello\");",
      "402:   std::string ref_value(\"value\");",
      "403:   headers.addReference(static_key, ref_value);",
      "404:   EXPECT_EQ(\"value\", headers.get(static_key)->value().getStringView());",
      "405:   EXPECT_EQ(HeaderString::Type::Reference, headers.get(static_key)->value().type());",
      "406:   EXPECT_EQ(1UL, headers.size());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "419:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "409:   EXPECT_EQ(nullptr, headers.get(static_key));",
      "410:   EXPECT_EQ(0UL, headers.size());",
      "411:   EXPECT_TRUE(headers.empty());",
      "414:   headers.insertContentLength().value(5);",
      "415:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
      "416:   EXPECT_EQ(1UL, headers.size());",
      "417:   EXPECT_FALSE(headers.empty());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "428:   EXPECT_EQ(headers.refreshByteSize(), 0);",
      "432:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "419:   EXPECT_EQ(nullptr, headers.ContentLength());",
      "420:   EXPECT_EQ(0UL, headers.size());",
      "421:   EXPECT_TRUE(headers.empty());",
      "424:   headers.insertContentLength().value(5);",
      "425:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
      "426:   EXPECT_EQ(1UL, headers.size());",
      "427:   EXPECT_FALSE(headers.empty());",
      "428:   headers.remove(Headers::get().ContentLength);",
      "429:   EXPECT_EQ(nullptr, headers.ContentLength());",
      "430:   EXPECT_EQ(0UL, headers.size());",
      "431:   EXPECT_TRUE(headers.empty());",
      "432: }",
      "434: TEST(HeaderMapImplTest, RemoveRegex) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "440:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "447:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "452:   EXPECT_EQ(headers.refreshByteSize(), 0);",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "446:   headers.addReference(key3, \"value\");",
      "447:   headers.addReference(key4, \"value\");",
      "448:   headers.addReference(key5, \"value\");",
      "451:   headers.removePrefix(LowerCaseString(\"x-prefix-\"));",
      "452:   EXPECT_EQ(nullptr, headers.get(key1));",
      "453:   EXPECT_NE(nullptr, headers.get(key2));",
      "454:   EXPECT_EQ(nullptr, headers.get(key3));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "470:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "474:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "456:   EXPECT_EQ(nullptr, headers.get(key5));",
      "459:   headers.removePrefix(LowerCaseString(\"\"));",
      "460:   EXPECT_EQ(nullptr, headers.get(key2));",
      "461:   EXPECT_EQ(nullptr, headers.get(key4));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "482:   headers.refreshByteSize();",
      "484:   EXPECT_EQ(headers.byteSize().value(), 0);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "465:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
      "466:   EXPECT_EQ(1UL, headers.size());",
      "467:   EXPECT_FALSE(headers.empty());",
      "468:   headers.removePrefix(LowerCaseString(\"content\"));",
      "469:   EXPECT_EQ(nullptr, headers.ContentLength());",
      "470: }",
      "472: TEST(HeaderMapImplTest, SetRemovesAllValues) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "493:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "496:   EXPECT_EQ(headers.refreshByteSize(), 0);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "484:   headers.addReference(key2, ref_value2);",
      "485:   headers.addReference(key1, ref_value3);",
      "486:   headers.addReference(key1, ref_value4);",
      "488:   using MockCb = testing::MockFunction<void(const std::string&, const std::string&)>;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "514:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "531:     const std::string bar(\"bar\");",
      "532:     headers.addReference(Headers::get().ContentLength, foo);",
      "533:     headers.addReference(Headers::get().ContentLength, bar);",
      "534:     EXPECT_EQ(\"foo,bar\", headers.ContentLength()->value().getStringView());",
      "535:     EXPECT_EQ(1UL, headers.size());",
      "536:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "562:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "538:     HeaderMapImpl headers;",
      "539:     headers.addReferenceKey(Headers::get().ContentLength, \"foo\");",
      "540:     headers.addReferenceKey(Headers::get().ContentLength, \"bar\");",
      "541:     EXPECT_EQ(\"foo,bar\", headers.ContentLength()->value().getStringView());",
      "542:     EXPECT_EQ(1UL, headers.size());",
      "543:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "570:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "545:     HeaderMapImpl headers;",
      "546:     headers.addReferenceKey(Headers::get().ContentLength, 5);",
      "547:     headers.addReferenceKey(Headers::get().ContentLength, 6);",
      "548:     EXPECT_EQ(\"5,6\", headers.ContentLength()->value().getStringView());",
      "549:     EXPECT_EQ(1UL, headers.size());",
      "550:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "578:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "553:     const std::string foo(\"foo\");",
      "554:     headers.addReference(Headers::get().ContentLength, foo);",
      "555:     headers.addReferenceKey(Headers::get().ContentLength, 6);",
      "556:     EXPECT_EQ(\"foo,6\", headers.ContentLength()->value().getStringView());",
      "557:     EXPECT_EQ(1UL, headers.size());",
      "558:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "587:     EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "568:   headers.addReference(set_cookie, foo);",
      "569:   headers.addReference(set_cookie, bar);",
      "570:   EXPECT_EQ(2UL, headers.size());",
      "572:   std::vector<absl::string_view> out;",
      "573:   Http::HeaderUtility::getAllOfHeader(headers, \"set-cookie\", out);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "603:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "580:   HeaderMapImpl headers;",
      "581:   headers.setReferenceKey(Headers::get().ContentType, \"blah\");",
      "582:   headers.setReferenceKey(Headers::get().ContentType, \"text/html\");",
      "583:   EXPECT_EQ(\"text/html\", headers.ContentType()->value().getStringView());",
      "584:   EXPECT_EQ(1UL, headers.size());",
      "585: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "616:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "588:   HeaderMapImpl headers;",
      "589:   LowerCaseString foo(\"hello\");",
      "590:   headers.addReferenceKey(foo, \"world\");",
      "591:   EXPECT_NE(\"world\", headers.get(foo)->value().getStringView().data());",
      "592:   EXPECT_EQ(\"world\", headers.get(foo)->value().getStringView());",
      "593: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "625:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "596:   HeaderMapImpl headers;",
      "597:   LowerCaseString foo(\"hello\");",
      "598:   headers.setReferenceKey(foo, \"world\");",
      "599:   EXPECT_NE(\"world\", headers.get(foo)->value().getStringView().data());",
      "600:   EXPECT_EQ(\"world\", headers.get(foo)->value().getStringView());",
      "602:   headers.setReferenceKey(foo, \"monde\");",
      "603:   EXPECT_NE(\"monde\", headers.get(foo)->value().getStringView().data());",
      "604:   EXPECT_EQ(\"monde\", headers.get(foo)->value().getStringView());",
      "605: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "634:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "637:   headers.refreshByteSize();",
      "640:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "611:   std::unique_ptr<LowerCaseString> lcKeyPtr(new LowerCaseString(\"hello\"));",
      "612:   headers.addCopy(*lcKeyPtr, \"world\");",
      "614:   const HeaderString& value = headers.get(*lcKeyPtr)->value();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "651:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "632:   headers.remove(LowerCaseString(\"hello\"));",
      "636:   lcKeyPtr = std::make_unique<LowerCaseString>(std::string(\"he\") + \"llo\");",
      "637:   EXPECT_STREQ(\"hello\", lcKeyPtr->get().c_str());",
      "639:   headers.addCopy(*lcKeyPtr, 42);",
      "641:   const HeaderString& value3 = headers.get(*lcKeyPtr)->value();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:   headers.refreshByteSize();",
      "674:   EXPECT_EQ(headers.byteSize().value(), 0);",
      "681:   headers.refreshByteSize();",
      "683:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "662:   headers.addCopy(cache_control, \"max-age=1345\");",
      "663:   EXPECT_EQ(\"max-age=1345\", headers.get(cache_control)->value().getStringView());",
      "664:   EXPECT_EQ(\"max-age=1345\", headers.CacheControl()->value().getStringView());",
      "665:   headers.addCopy(cache_control, \"public\");",
      "666:   EXPECT_EQ(\"max-age=1345,public\", headers.get(cache_control)->value().getStringView());",
      "667:   headers.addCopy(cache_control, \"\");",
      "668:   EXPECT_EQ(\"max-age=1345,public\", headers.get(cache_control)->value().getStringView());",
      "669:   headers.addCopy(cache_control, 123);",
      "670:   EXPECT_EQ(\"max-age=1345,public,123\", headers.get(cache_control)->value().getStringView());",
      "671:   headers.addCopy(cache_control, std::numeric_limits<uint64_t>::max());",
      "672:   EXPECT_EQ(\"max-age=1345,public,123,18446744073709551615\",",
      "673:             headers.get(cache_control)->value().getStringView());",
      "674: }",
      "676: TEST(HeaderMapImplTest, Equality) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "709:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "711:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "714:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "717:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "722:   EXPECT_EQ(headers.refreshByteSize(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "690:   LowerCaseString static_key(\"\\x90hello\");",
      "691:   std::string ref_value(\"value\");",
      "692:   headers.addReference(static_key, ref_value);",
      "693:   EXPECT_EQ(\"value\", headers.get(static_key)->value().getStringView());",
      "694: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "742:   EXPECT_EQ(headers.byteSize().value(), countBytesForTest(headers));",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "844:   {",
      "845:     LowerCaseString foo(\"hello\");",
      "846:     Http::TestHeaderMapImpl headers{};",
      "847:     EXPECT_EQ(0UL, headers.size());",
      "848:     EXPECT_TRUE(headers.empty());",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "897:     EXPECT_EQ(headers.refreshByteSize(), 0);",
      "",
      "---------------"
    ],
    "test/common/http/http2/codec_impl_test.cc||test/common/http/http2/codec_impl_test.cc": [
      "File: test/common/http/http2/codec_impl_test.cc -> test/common/http/http2/codec_impl_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "1090:   TestHeaderMapImpl request_headers;",
      "1091:   HttpTestUtility::addDefaultHeaders(request_headers);",
      "1092:   std::string key = \"big\";",
      "1093:   uint32_t head_room = 77;",
      "1094:   uint32_t long_string_length =",
      "1096:   std::string long_string = std::string(long_string_length, 'q');",
      "1097:   request_headers.addCopy(key, long_string);",
      "1104:   EXPECT_CALL(request_decoder_, decodeHeaders_(_, _));",
      "1105:   request_encoder_->encodeHeaders(request_headers, true);",
      "",
      "[Removed Lines]",
      "1095:       codec_limit_kb * 1024 - request_headers.byteSize() - key.length() - head_room;",
      "1102:   ASSERT_EQ(request_headers.byteSize() + head_room, codec_limit_kb * 1024);",
      "",
      "[Added Lines]",
      "1093:   request_headers.refreshByteSize();",
      "1097:       codec_limit_kb * 1024 - request_headers.byteSize().value() - key.length() - head_room;",
      "1104:   ASSERT_EQ(request_headers.byteSize().value() + head_room, codec_limit_kb * 1024);",
      "",
      "---------------"
    ],
    "test/integration/http2_integration_test.cc||test/integration/http2_integration_test.cc": [
      "File: test/integration/http2_integration_test.cc -> test/integration/http2_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "65: TEST_P(Http2IntegrationTest, RetryAttemptCount) { testRetryAttemptCountHeader(); }",
      "67: static std::string response_metadata_filter = R\"EOF(",
      "68: name: response-metadata-filter",
      "69: config: {}",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "67: TEST_P(Http2IntegrationTest, LargeRequestTrailersRejected) { testLargeRequestTrailers(66, 60); }",
      "",
      "---------------"
    ],
    "test/integration/http_integration.cc||test/integration/http_integration.cc": [
      "File: test/integration/http_integration.cc -> test/integration/http_integration.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "261: IntegrationStreamDecoderPtr HttpIntegrationTest::sendRequestAndWaitForResponse(",
      "262:     const Http::TestHeaderMapImpl& request_headers, uint32_t request_body_size,",
      "264:   ASSERT(codec_client_ != nullptr);",
      "266:   IntegrationStreamDecoderPtr response;",
      "",
      "[Removed Lines]",
      "263:     const Http::TestHeaderMapImpl& response_headers, uint32_t response_size, int upstream_index) {",
      "",
      "[Added Lines]",
      "263:     const Http::TestHeaderMapImpl& response_headers, uint32_t response_size, int upstream_index,",
      "264:     std::chrono::milliseconds time) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "269:   } else {",
      "270:     response = codec_client_->makeHeaderOnlyRequest(request_headers);",
      "271:   }",
      "274:   upstream_request_->encodeHeaders(response_headers, response_size == 0);",
      "",
      "[Removed Lines]",
      "272:   waitForNextUpstreamRequest(upstream_index);",
      "",
      "[Added Lines]",
      "273:   waitForNextUpstreamRequest(upstream_index, time);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "333: }",
      "335: uint64_t",
      "337:   uint64_t upstream_with_request;",
      "339:   if (!fake_upstream_connection_) {",
      "",
      "[Removed Lines]",
      "336: HttpIntegrationTest::waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices) {",
      "",
      "[Added Lines]",
      "337: HttpIntegrationTest::waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices,",
      "338:                                                 std::chrono::milliseconds connection_wait_timeout) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "361:   return upstream_with_request;",
      "362: }",
      "366: }",
      "368: void HttpIntegrationTest::checkSimpleRequestSuccess(uint64_t expected_request_size,",
      "",
      "[Removed Lines]",
      "364: void HttpIntegrationTest::waitForNextUpstreamRequest(uint64_t upstream_index) {",
      "365:   waitForNextUpstreamRequest(std::vector<uint64_t>({upstream_index}));",
      "",
      "[Added Lines]",
      "366: void HttpIntegrationTest::waitForNextUpstreamRequest(",
      "367:     uint64_t upstream_index, std::chrono::milliseconds connection_wait_timeout) {",
      "368:   waitForNextUpstreamRequest(std::vector<uint64_t>({upstream_index}), connection_wait_timeout);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "916:   }",
      "917: }",
      "919: void HttpIntegrationTest::testDownstreamResetBeforeResponseComplete() {",
      "920:   initialize();",
      "921:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "922: void HttpIntegrationTest::testLargeRequestTrailers(uint32_t size, uint32_t max_size) {",
      "927:   config_helper_.addConfigModifier(",
      "928:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
      "929:           -> void { hcm.mutable_max_request_headers_kb()->set_value(max_size); });",
      "930:   max_request_headers_kb_ = max_size;",
      "931:   Http::TestHeaderMapImpl request_trailers{{\"trailer\", \"trailer\"}};",
      "932:   request_trailers.addCopy(\"big\", std::string(size * 1024, 'a'));",
      "934:   initialize();",
      "936:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "937:   fake_upstreams_[0]->set_allow_unexpected_disconnects(true);",
      "939:   auto encoder_decoder = codec_client_->startRequest(default_request_headers_);",
      "940:   request_encoder_ = &encoder_decoder.first;",
      "941:   auto response = std::move(encoder_decoder.second);",
      "942:   codec_client_->sendData(*request_encoder_, 10, false);",
      "943:   codec_client_->sendTrailers(*request_encoder_, request_trailers);",
      "945:   if (size >= max_size && downstream_protocol_ == Http::CodecClient::Type::HTTP2) {",
      "948:     response->waitForReset();",
      "949:     codec_client_->close();",
      "950:     EXPECT_FALSE(response->complete());",
      "952:   } else {",
      "953:     waitForNextUpstreamRequest();",
      "954:     upstream_request_->encodeHeaders(default_response_headers_, true);",
      "955:     response->waitForEndStream();",
      "956:     EXPECT_TRUE(response->complete());",
      "957:   }",
      "958: }",
      "960: void HttpIntegrationTest::testManyRequestHeaders(std::chrono::milliseconds time) {",
      "961:   config_helper_.addConfigModifier(",
      "962:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
      "963:           -> void { hcm.mutable_max_request_headers_kb()->set_value(96); });",
      "964:   max_request_headers_kb_ = 96;",
      "966:   Http::TestHeaderMapImpl big_headers{",
      "967:       {\":method\", \"GET\"}, {\":path\", \"/test/long/url\"}, {\":scheme\", \"http\"}, {\":authority\", \"host\"}};",
      "969:   for (int i = 0; i < 20000; i++) {",
      "970:     big_headers.addCopy(std::to_string(i), std::string(0, 'a'));",
      "971:   }",
      "972:   initialize();",
      "974:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "976:   auto response =",
      "977:       sendRequestAndWaitForResponse(big_headers, 0, default_response_headers_, 0, 0, time);",
      "979:   EXPECT_TRUE(response->complete());",
      "980:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "981: }",
      "",
      "---------------"
    ],
    "test/integration/http_integration.h||test/integration/http_integration.h": [
      "File: test/integration/http_integration.h -> test/integration/http_integration.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "139:   void cleanupUpstreamAndDownstream();",
      "",
      "[Removed Lines]",
      "125:   IntegrationStreamDecoderPtr",
      "126:   sendRequestAndWaitForResponse(const Http::TestHeaderMapImpl& request_headers,",
      "127:                                 uint32_t request_body_size,",
      "128:                                 const Http::TestHeaderMapImpl& response_headers,",
      "129:                                 uint32_t response_body_size, int upstream_index = 0);",
      "135:   uint64_t waitForNextUpstreamRequest(const std::vector<uint64_t>& upstream_indices);",
      "136:   void waitForNextUpstreamRequest(uint64_t upstream_index = 0);",
      "",
      "[Added Lines]",
      "125:   IntegrationStreamDecoderPtr sendRequestAndWaitForResponse(",
      "126:       const Http::TestHeaderMapImpl& request_headers, uint32_t request_body_size,",
      "127:       const Http::TestHeaderMapImpl& response_headers, uint32_t response_body_size,",
      "128:       int upstream_index = 0, std::chrono::milliseconds time = TestUtility::DefaultTimeout);",
      "134:   uint64_t waitForNextUpstreamRequest(",
      "135:       const std::vector<uint64_t>& upstream_indices,",
      "136:       std::chrono::milliseconds connection_wait_timeout = TestUtility::DefaultTimeout);",
      "137:   void waitForNextUpstreamRequest(",
      "138:       uint64_t upstream_index = 0,",
      "139:       std::chrono::milliseconds connection_wait_timeout = TestUtility::DefaultTimeout);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "185:   void testRouterUpstreamResponseBeforeRequestComplete();",
      "187:   void testTwoRequests(bool force_network_backup = false);",
      "188:   void testLargeRequestHeaders(uint32_t size, uint32_t max_size = 60);",
      "190:   void testAddEncodedTrailers();",
      "191:   void testRetry();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "191:   void testLargeHeaders(Http::TestHeaderMapImpl request_headers,",
      "192:                         Http::TestHeaderMapImpl request_trailers, uint32_t size, uint32_t max_size);",
      "194:   void testLargeRequestTrailers(uint32_t size, uint32_t max_size = 60);",
      "195:   void testManyRequestHeaders(std::chrono::milliseconds time = TestUtility::DefaultTimeout);",
      "",
      "---------------"
    ],
    "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
      "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "576:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "577: }",
      "579: TEST_P(DownstreamProtocolIntegrationTest, InvalidContentLength) {",
      "580:   initialize();",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "580: TEST_P(DownstreamProtocolIntegrationTest, LargeCookieParsingConcatenated) {",
      "581:   initialize();",
      "583:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "584:   Http::TestHeaderMapImpl request_headers{{\":method\", \"POST\"},",
      "585:                                           {\":path\", \"/test/long/url\"},",
      "586:                                           {\":scheme\", \"http\"},",
      "587:                                           {\":authority\", \"host\"},",
      "588:                                           {\"content-length\", \"0\"}};",
      "589:   std::vector<std::string> cookie_pieces;",
      "590:   for (int i = 0; i < 7000; i++) {",
      "591:     cookie_pieces.push_back(fmt::sprintf(\"a%x=b\", i));",
      "592:   }",
      "593:   request_headers.addCopy(\"cookie\", absl::StrJoin(cookie_pieces, \"; \"));",
      "594:   auto response = sendRequestAndWaitForResponse(request_headers, 0, default_response_headers_, 0);",
      "596:   ASSERT_TRUE(response->complete());",
      "597:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "598: }",
      "601: TEST_P(DownstreamProtocolIntegrationTest, LargeCookieParsingMany) {",
      "602:   initialize();",
      "604:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "605:   Http::TestHeaderMapImpl request_headers{{\":method\", \"POST\"},",
      "606:                                           {\":path\", \"/test/long/url\"},",
      "607:                                           {\":scheme\", \"http\"},",
      "608:                                           {\":authority\", \"host\"},",
      "609:                                           {\"content-length\", \"0\"}};",
      "610:   for (int i = 0; i < 2000; i++) {",
      "611:     request_headers.addCopy(\"cookie\", fmt::sprintf(\"a%x=b\", i));",
      "612:   }",
      "613:   auto response = sendRequestAndWaitForResponse(request_headers, 0, default_response_headers_, 0);",
      "615:   ASSERT_TRUE(response->complete());",
      "616:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "617: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "850:   testLargeRequestHeaders(95, 96);",
      "851: }",
      "855: TEST_P(DownstreamProtocolIntegrationTest, testDecodeHeadersReturnsStopAll) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "893: TEST_P(DownstreamProtocolIntegrationTest, ManyRequestHeadersTimeout) {",
      "895:   testManyRequestHeaders(std::chrono::milliseconds(5000));",
      "896: }",
      "898: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestTrailersAccepted) {",
      "899:   testLargeRequestTrailers(60, 96);",
      "900: }",
      "902: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestTrailersRejected) {",
      "903:   testLargeRequestTrailers(66, 60);",
      "904: }",
      "906: TEST_P(DownstreamProtocolIntegrationTest, ManyTrailerHeaders) {",
      "907:   config_helper_.addConfigModifier(",
      "908:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
      "909:           -> void { hcm.mutable_max_request_headers_kb()->set_value(96); });",
      "911:   Http::TestHeaderMapImpl request_trailers{};",
      "912:   for (int i = 0; i < 20000; i++) {",
      "913:     request_trailers.addCopy(std::to_string(i), \"\");",
      "914:   }",
      "916:   initialize();",
      "917:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
      "918:   auto encoder_decoder =",
      "919:       codec_client_->startRequest(Http::TestHeaderMapImpl{{\":method\", \"POST\"},",
      "920:                                                           {\":path\", \"/test/long/url\"},",
      "921:                                                           {\":scheme\", \"http\"},",
      "922:                                                           {\":authority\", \"host\"}});",
      "923:   request_encoder_ = &encoder_decoder.first;",
      "924:   auto response = std::move(encoder_decoder.second);",
      "925:   codec_client_->sendTrailers(*request_encoder_, request_trailers);",
      "926:   waitForNextUpstreamRequest();",
      "927:   upstream_request_->encodeHeaders(default_response_headers_, true);",
      "928:   response->waitForEndStream();",
      "930:   EXPECT_TRUE(upstream_request_->complete());",
      "931:   EXPECT_TRUE(response->complete());",
      "932:   EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
      "933: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "57c99205f97933b5e387220cabd72e8696f9b63e",
      "candidate_info": {
        "commit_hash": "57c99205f97933b5e387220cabd72e8696f9b63e",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/57c99205f97933b5e387220cabd72e8696f9b63e",
        "files": [
          "source/common/http/http1/codec_impl.cc",
          "source/common/http/http1/codec_impl.h",
          "test/common/http/http1/codec_impl_test.cc",
          "test/integration/http_integration.cc",
          "test/integration/http_integration.h",
          "test/integration/protocol_integration_test.cc"
        ],
        "message": "[http1] Include request URL in request header size computation, and reject partial headers that exceed configured limits (#145)\n\nSigned-off-by: Antonio Vicente <avd@google.com>",
        "before_after_code_files": [
          "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
          "source/common/http/http1/codec_impl.h||source/common/http/http1/codec_impl.h",
          "test/common/http/http1/codec_impl_test.cc||test/common/http/http1/codec_impl_test.cc",
          "test/integration/http_integration.cc||test/integration/http_integration.cc",
          "test/integration/http_integration.h||test/integration/http_integration.h",
          "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "test/integration/http_integration.cc||test/integration/http_integration.cc",
            "test/integration/http_integration.h||test/integration/http_integration.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ],
          "candidate": [
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "test/integration/http_integration.cc||test/integration/http_integration.cc",
            "test/integration/http_integration.h||test/integration/http_integration.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc": [
          "File: source/common/http/http1/codec_impl.cc -> source/common/http/http1/codec_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "454:   ASSERT(current_header_value_.empty());",
          "455: }",
          "457: bool ConnectionImpl::maybeDirectDispatch(Buffer::Instance& data) {",
          "458:   if (!handling_upgrade_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "457: uint32_t ConnectionImpl::getHeadersSize() {",
          "458:   return current_header_field_.size() + current_header_value_.size() +",
          "459:          headersOrTrailers().byteSize();",
          "460: }",
          "462: void ConnectionImpl::checkMaxHeadersSize() {",
          "463:   const uint32_t total = getHeadersSize();",
          "464:   if (total > (max_headers_kb_ * 1024)) {",
          "465:     const absl::string_view header_type =",
          "466:         processing_trailers_ ? Http1HeaderTypes::get().Trailers : Http1HeaderTypes::get().Headers;",
          "467:     error_code_ = Http::Code::RequestHeaderFieldsTooLarge;",
          "468:     sendProtocolError(Http1ResponseCodeDetails::get().HeadersTooLarge);",
          "469:     throw CodecProtocolException(absl::StrCat(header_type, \" size exceeds limit\"));",
          "470:   }",
          "471: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "523:     }",
          "524:     processing_trailers_ = true;",
          "525:     header_parsing_state_ = HeaderParsingState::Field;",
          "526:   }",
          "527:   if (header_parsing_state_ == HeaderParsingState::Value) {",
          "528:     completeLastHeader();",
          "529:   }",
          "531:   current_header_field_.append(data, length);",
          "532: }",
          "534: void ConnectionImpl::onHeaderValue(const char* data, size_t length) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "542:     allocTrailers();",
          "550:   checkMaxHeadersSize();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "537:     return;",
          "538:   }",
          "546:   const absl::string_view header_value = StringUtil::trim(absl::string_view(data, length));",
          "",
          "[Removed Lines]",
          "540:   if (processing_trailers_) {",
          "541:     maybeAllocTrailers();",
          "542:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "557:   header_parsing_state_ = HeaderParsingState::Value;",
          "558:   current_header_value_.append(header_value.data(), header_value.length());",
          "569: }",
          "571: int ConnectionImpl::onHeadersCompleteBase() {",
          "",
          "[Removed Lines]",
          "560:   const uint32_t total =",
          "561:       current_header_field_.size() + current_header_value_.size() + headersOrTrailers().byteSize();",
          "562:   if (total > (max_headers_kb_ * 1024)) {",
          "563:     const absl::string_view header_type =",
          "564:         processing_trailers_ ? Http1HeaderTypes::get().Trailers : Http1HeaderTypes::get().Headers;",
          "565:     error_code_ = Http::Code::RequestHeaderFieldsTooLarge;",
          "566:     sendProtocolError(Http1ResponseCodeDetails::get().HeadersTooLarge);",
          "567:     throw CodecProtocolException(absl::StrCat(header_type, \" size exceeds limit\"));",
          "568:   }",
          "",
          "[Added Lines]",
          "575:   checkMaxHeadersSize();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "708:           Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.http1_flood_protection\")),",
          "709:       headers_with_underscores_action_(headers_with_underscores_action) {}",
          "711: void ServerConnectionImpl::onEncodeComplete() {",
          "712:   if (active_request_.value().remote_complete_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718: uint32_t ServerConnectionImpl::getHeadersSize() {",
          "720:   const uint32_t url_size = (!processing_trailers_ && active_request_.has_value())",
          "721:                                 ? active_request_.value().request_url_.size()",
          "722:                                 : 0;",
          "723:   return url_size + ConnectionImpl::getHeadersSize();",
          "724: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "842: void ServerConnectionImpl::onUrl(const char* data, size_t length) {",
          "843:   if (active_request_.has_value()) {",
          "844:     active_request_.value().request_url_.append(data, length);",
          "845:   }",
          "846: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "861:     checkMaxHeadersSize();",
          "",
          "---------------"
        ],
        "source/common/http/http1/codec_impl.h||source/common/http/http1/codec_impl.h": [
          "File: source/common/http/http1/codec_impl.h -> source/common/http/http1/codec_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "215:   bool resetStreamCalled() { return reset_stream_called_; }",
          "217:   Network::Connection& connection_;",
          "218:   CodecStats stats_;",
          "219:   http_parser parser_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "222:   virtual uint32_t getHeadersSize();",
          "229:   void checkMaxHeadersSize();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "239:   virtual HeaderMap& headersOrTrailers() PURE;",
          "240:   virtual RequestOrResponseHeaderMap& requestOrResponseHeaders() PURE;",
          "241:   virtual void allocHeaders() PURE;",
          "",
          "[Removed Lines]",
          "242:   virtual void maybeAllocTrailers() PURE;",
          "",
          "[Added Lines]",
          "256:   virtual void allocTrailers() PURE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "392:   bool supports_http_10() override { return codec_settings_.accept_http_10_; }",
          "394: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "408: protected:",
          "410:   uint32_t getHeadersSize() override;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "438:   }",
          "439:   void allocHeaders() override {",
          "440:     ASSERT(nullptr == absl::get<RequestHeaderMapPtr>(headers_or_trailers_));",
          "441:     headers_or_trailers_.emplace<RequestHeaderMapPtr>(std::make_unique<RequestHeaderMapImpl>());",
          "442:   }",
          "444:     ASSERT(processing_trailers_);",
          "445:     if (!absl::holds_alternative<RequestTrailerMapPtr>(headers_or_trailers_)) {",
          "446:       headers_or_trailers_.emplace<RequestTrailerMapPtr>(std::make_unique<RequestTrailerMapImpl>());",
          "",
          "[Removed Lines]",
          "443:   void maybeAllocTrailers() override {",
          "",
          "[Added Lines]",
          "459:     ASSERT(!processing_trailers_);",
          "462:   void allocTrailers() override {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "520:   }",
          "521:   void allocHeaders() override {",
          "522:     ASSERT(nullptr == absl::get<ResponseHeaderMapPtr>(headers_or_trailers_));",
          "523:     headers_or_trailers_.emplace<ResponseHeaderMapPtr>(std::make_unique<ResponseHeaderMapImpl>());",
          "524:   }",
          "526:     ASSERT(processing_trailers_);",
          "527:     if (!absl::holds_alternative<ResponseTrailerMapPtr>(headers_or_trailers_)) {",
          "528:       headers_or_trailers_.emplace<ResponseTrailerMapPtr>(",
          "",
          "[Removed Lines]",
          "525:   void maybeAllocTrailers() override {",
          "",
          "[Added Lines]",
          "542:     ASSERT(!processing_trailers_);",
          "545:   void allocTrailers() override {",
          "",
          "---------------"
        ],
        "test/common/http/http1/codec_impl_test.cc||test/common/http/http1/codec_impl_test.cc": [
          "File: test/common/http/http1/codec_impl_test.cc -> test/common/http/http1/codec_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:                            \"Transfer-Encoding: chunked\\r\\n\\r\\n\"",
          "217:                            \"4\\r\\n\"",
          "218:                            \"body\\r\\n0\\r\\n\");",
          "219:   codec_->dispatch(buffer);",
          "221:   if (enable_trailers) {",
          "222:     EXPECT_THROW_WITH_MESSAGE(codec_->dispatch(buffer), EnvoyException,",
          "223:                               \"trailers size exceeds limit\");",
          "",
          "[Removed Lines]",
          "220:   buffer = Buffer::OwnedImpl(trailer_string + \"\\r\\n\\r\\n\");",
          "",
          "[Added Lines]",
          "221:   buffer = Buffer::OwnedImpl(trailer_string);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1965: TEST_F(Http1ServerConnectionImplTest, LargeTrailersRejected) {",
          "1968:   testTrailersExceedLimit(long_string, true);",
          "1969: }",
          "1972: TEST_F(Http1ServerConnectionImplTest, ManyTrailersRejected) {",
          "1975: }",
          "1977: TEST_F(Http1ServerConnectionImplTest, LargeTrailersRejectedIgnored) {",
          "1980:   testTrailersExceedLimit(long_string, false);",
          "1981: }",
          "1984: TEST_F(Http1ServerConnectionImplTest, ManyTrailersIgnored) {",
          "1987: }",
          "1989: TEST_F(Http1ServerConnectionImplTest, LargeRequestHeadersRejected) {",
          "",
          "[Removed Lines]",
          "1967:   std::string long_string = \"big: \" + std::string(60 * 1024, 'q') + \"\\r\\n\";",
          "1974:   testTrailersExceedLimit(createHeaderFragment(101), true);",
          "1979:   std::string long_string = \"big: \" + std::string(60 * 1024, 'q') + \"\\r\\n\";",
          "1986:   testTrailersExceedLimit(createHeaderFragment(101), false);",
          "",
          "[Added Lines]",
          "1969:   std::string long_string = \"big: \" + std::string(60 * 1024, 'q') + \"\\r\\n\\r\\n\\r\\n\";",
          "1970:   testTrailersExceedLimit(long_string, true);",
          "1971: }",
          "1973: TEST_F(Http1ServerConnectionImplTest, LargeTrailerFieldRejected) {",
          "1975:   std::string long_string = \"bigfield\" + std::string(60 * 1024, 'q');",
          "1982:   testTrailersExceedLimit(createHeaderFragment(101) + \"\\r\\n\\r\\n\", true);",
          "1987:   std::string long_string = \"big: \" + std::string(60 * 1024, 'q') + \"\\r\\n\\r\\n\\r\\n\";",
          "1988:   testTrailersExceedLimit(long_string, false);",
          "1989: }",
          "1991: TEST_F(Http1ServerConnectionImplTest, LargeTrailerFieldRejectedIgnored) {",
          "1993:   std::string long_string = \"bigfield\" + std::string(60 * 1024, 'q') + \": value\\r\\n\\r\\n\\r\\n\";",
          "2000:   testTrailersExceedLimit(createHeaderFragment(101) + \"\\r\\n\\r\\n\", false);",
          "2001: }",
          "2003: TEST_F(Http1ServerConnectionImplTest, LargeRequestUrlRejected) {",
          "2004:   initialize();",
          "2006:   std::string exception_reason;",
          "2007:   NiceMock<MockRequestDecoder> decoder;",
          "2008:   Http::ResponseEncoder* response_encoder = nullptr;",
          "2009:   EXPECT_CALL(callbacks_, newStream(_, _))",
          "2010:       .WillOnce(Invoke([&](ResponseEncoder& encoder, bool) -> RequestDecoder& {",
          "2011:         response_encoder = &encoder;",
          "2012:         return decoder;",
          "2013:       }));",
          "2016:   std::string long_url = \"/\" + std::string(60 * 1024, 'q');",
          "2017:   Buffer::OwnedImpl buffer(\"GET \" + long_url + \" HTTP/1.1\\r\\n\");",
          "2018:   EXPECT_THROW_WITH_MESSAGE(codec_->dispatch(buffer), EnvoyException, \"headers size exceeds limit\");",
          "2019:   EXPECT_EQ(\"http1.headers_too_large\", response_encoder->getStream().responseDetails());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2069:   testRequestHeadersAccepted(createHeaderFragment(150));",
          "2070: }",
          "2074:   initialize();",
          "2076:   NiceMock<MockResponseDecoder> response_decoder;",
          "",
          "[Removed Lines]",
          "2073: TEST_F(Http1ClientConnectionImplTest, LargeResponseHeadersRejected) {",
          "",
          "[Added Lines]",
          "2106: TEST_F(Http1ClientConnectionImplTest, ResponseHeadersWithLargeValueRejected) {",
          "2107:   initialize();",
          "2109:   NiceMock<MockResponseDecoder> response_decoder;",
          "2110:   Http::RequestEncoder& request_encoder = codec_->newStream(response_decoder);",
          "2111:   TestRequestHeaderMapImpl headers{{\":method\", \"GET\"}, {\":path\", \"/\"}, {\":authority\", \"host\"}};",
          "2112:   request_encoder.encodeHeaders(headers, true);",
          "2114:   Buffer::OwnedImpl buffer(\"HTTP/1.1 200 OK\\r\\nContent-Length: 0\\r\\n\");",
          "2115:   codec_->dispatch(buffer);",
          "2116:   std::string long_header = \"big: \" + std::string(80 * 1024, 'q');",
          "2117:   buffer = Buffer::OwnedImpl(long_header);",
          "2118:   EXPECT_THROW_WITH_MESSAGE(codec_->dispatch(buffer), EnvoyException, \"headers size exceeds limit\");",
          "2119: }",
          "2122: TEST_F(Http1ClientConnectionImplTest, ResponseHeadersWithLargeFieldRejected) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2081:   Buffer::OwnedImpl buffer(\"HTTP/1.1 200 OK\\r\\nContent-Length: 0\\r\\n\");",
          "2082:   codec_->dispatch(buffer);",
          "2084:   buffer = Buffer::OwnedImpl(long_header);",
          "2085:   EXPECT_THROW_WITH_MESSAGE(codec_->dispatch(buffer), EnvoyException, \"headers size exceeds limit\");",
          "2086: }",
          "",
          "[Removed Lines]",
          "2083:   std::string long_header = \"big: \" + std::string(80 * 1024, 'q') + \"\\r\\n\";",
          "",
          "[Added Lines]",
          "2132:   std::string long_header = \"big: \" + std::string(80 * 1024, 'q');",
          "",
          "---------------"
        ],
        "test/integration/http_integration.cc||test/integration/http_integration.cc": [
          "File: test/integration/http_integration.cc -> test/integration/http_integration.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "959:   EXPECT_EQ(1024U, response->body().size());",
          "960: }",
          "962: void HttpIntegrationTest::testLargeRequestHeaders(uint32_t size, uint32_t count, uint32_t max_size,",
          "963:                                                   uint32_t max_count) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "962: void HttpIntegrationTest::testLargeRequestUrl(uint32_t url_size, uint32_t max_headers_size) {",
          "968:   config_helper_.addConfigModifier(",
          "969:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "970:               hcm) -> void { hcm.mutable_max_request_headers_kb()->set_value(max_headers_size); });",
          "971:   max_request_headers_kb_ = max_headers_size;",
          "973:   Http::TestRequestHeaderMapImpl big_headers{{\":method\", \"GET\"},",
          "974:                                              {\":path\", \"/\" + std::string(url_size * 1024, 'a')},",
          "975:                                              {\":scheme\", \"http\"},",
          "976:                                              {\":authority\", \"host\"}};",
          "978:   initialize();",
          "979:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "980:   if (url_size >= max_headers_size) {",
          "982:     auto encoder_decoder = codec_client_->startRequest(big_headers);",
          "983:     auto response = std::move(encoder_decoder.second);",
          "985:     if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "986:       codec_client_->waitForDisconnect();",
          "987:       EXPECT_TRUE(response->complete());",
          "988:       EXPECT_EQ(\"431\", response->headers().Status()->value().getStringView());",
          "989:     } else {",
          "990:       response->waitForReset();",
          "991:       codec_client_->close();",
          "992:     }",
          "993:   } else {",
          "994:     auto response = sendRequestAndWaitForResponse(big_headers, 0, default_response_headers_, 0);",
          "995:     EXPECT_TRUE(response->complete());",
          "996:     EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
          "997:   }",
          "998: }",
          "",
          "---------------"
        ],
        "test/integration/http_integration.h||test/integration/http_integration.h": [
          "File: test/integration/http_integration.h -> test/integration/http_integration.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "195:   void testLargeHeaders(Http::TestRequestHeaderMapImpl request_headers,",
          "196:                         Http::TestRequestTrailerMapImpl request_trailers, uint32_t size,",
          "197:                         uint32_t max_size);",
          "198:   void testLargeRequestHeaders(uint32_t size, uint32_t count, uint32_t max_size = 60,",
          "199:                                uint32_t max_count = 100);",
          "200:   void testLargeRequestTrailers(uint32_t size, uint32_t max_size = 60);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "198:   void testLargeRequestUrl(uint32_t url_size, uint32_t max_headers_size);",
          "",
          "---------------"
        ],
        "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
          "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1047:   EXPECT_EQ(0, upstream_request_->body().length());",
          "1048: }",
          "1050: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestHeadersRejected) {",
          "1052:   testLargeRequestHeaders(95, 1, 60, 100);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1050: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestUrlRejected) {",
          "1052:   testLargeRequestUrl(95, 60);",
          "1053: }",
          "1055: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestUrlAccepted) {",
          "1057:   testLargeRequestUrl(95, 96);",
          "1058: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7c627275f9de3e59990a85b24d240e67a8197131",
      "candidate_info": {
        "commit_hash": "7c627275f9de3e59990a85b24d240e67a8197131",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/7c627275f9de3e59990a85b24d240e67a8197131",
        "files": [
          "include/envoy/http/filter.h",
          "source/common/http/conn_manager_impl.cc",
          "source/common/http/conn_manager_impl.h",
          "test/common/http/conn_manager_impl_test.cc",
          "test/integration/BUILD",
          "test/integration/filters/BUILD",
          "test/integration/filters/call_decodedata_once_filter.cc",
          "test/integration/filters/decode_headers_return_stop_all_filter.cc",
          "test/integration/filters/encode_headers_return_stop_all_filter.cc",
          "test/integration/protocol_integration_test.cc"
        ],
        "message": "Common: Introduce StopAllIteration filter status for decoding and encoding filters (#5954)\n\nSigned-off-by: Yang Song <yasong@google.com>",
        "before_after_code_files": [
          "include/envoy/http/filter.h||include/envoy/http/filter.h",
          "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
          "source/common/http/conn_manager_impl.h||source/common/http/conn_manager_impl.h",
          "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc",
          "test/integration/filters/call_decodedata_once_filter.cc||test/integration/filters/call_decodedata_once_filter.cc",
          "test/integration/filters/decode_headers_return_stop_all_filter.cc||test/integration/filters/decode_headers_return_stop_all_filter.cc",
          "test/integration/filters/encode_headers_return_stop_all_filter.cc||test/integration/filters/encode_headers_return_stop_all_filter.cc",
          "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ],
          "candidate": [
            "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc",
            "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "include/envoy/http/filter.h||include/envoy/http/filter.h": [
          "File: include/envoy/http/filter.h -> include/envoy/http/filter.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:   StopIteration,",
          "37: };",
          "",
          "[Removed Lines]",
          "36:   ContinueAndEndStream",
          "",
          "[Added Lines]",
          "36:   ContinueAndEndStream,",
          "48:   StopAllIterationAndBuffer,",
          "59:   StopAllIterationAndWatermark,",
          "",
          "---------------"
        ],
        "source/common/http/conn_manager_impl.cc||source/common/http/conn_manager_impl.cc": [
          "File: source/common/http/conn_manager_impl.cc -> source/common/http/conn_manager_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "794: void ConnectionManagerImpl::ActiveStream::decodeHeaders(ActiveStreamDecoderFilter* filter,",
          "795:                                                         HeaderMap& headers, bool end_stream) {",
          "797:   std::list<ActiveStreamDecoderFilterPtr>::iterator continue_data_entry = decoder_filters_.end();",
          "804:   for (; entry != decoder_filters_.end(); entry++) {",
          "805:     ASSERT(!(state_.filter_call_state_ & FilterCallState::DecodeHeaders));",
          "",
          "[Removed Lines]",
          "796:   std::list<ActiveStreamDecoderFilterPtr>::iterator entry;",
          "798:   if (!filter) {",
          "799:     entry = decoder_filters_.begin();",
          "800:   } else {",
          "801:     entry = std::next(filter->entry());",
          "802:   }",
          "",
          "[Added Lines]",
          "797:   std::list<ActiveStreamDecoderFilterPtr>::iterator entry =",
          "798:       commonDecodePrefix(filter, FilterIterationStartState::AlwaysStartFromNext);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "831:   if (continue_data_entry != decoder_filters_.end()) {",
          "834:     ASSERT(buffered_request_data_);",
          "836:     (*continue_data_entry)->continueDecoding();",
          "837:   }",
          "",
          "[Removed Lines]",
          "835:     (*continue_data_entry)->stopped_ = true;",
          "",
          "[Added Lines]",
          "833:     (*continue_data_entry)->iteration_state_ =",
          "834:         ActiveStreamFilterBase::IterationState::StopSingleIteration;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "845:   maybeEndDecode(end_stream);",
          "846:   stream_info_.addBytesReceived(data.length());",
          "849: }",
          "853:   resetIdleTimer();",
          "",
          "[Removed Lines]",
          "848:   decodeData(nullptr, data, end_stream);",
          "851: void ConnectionManagerImpl::ActiveStream::decodeData(ActiveStreamDecoderFilter* filter,",
          "852:                                                      Buffer::Instance& data, bool end_stream) {",
          "",
          "[Added Lines]",
          "847:   decodeData(nullptr, data, end_stream, FilterIterationStartState::CanStartFromCurrent);",
          "850: void ConnectionManagerImpl::ActiveStream::decodeData(",
          "851:     ActiveStreamDecoderFilter* filter, Buffer::Instance& data, bool end_stream,",
          "852:     FilterIterationStartState filter_iteration_start_state) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "863:     return;",
          "864:   }",
          "867:   auto trailers_added_entry = decoder_filters_.end();",
          "868:   const bool trailers_exists_at_start = request_trailers_ != nullptr;",
          "875:   for (; entry != decoder_filters_.end(); entry++) {",
          "",
          "[Removed Lines]",
          "866:   std::list<ActiveStreamDecoderFilterPtr>::iterator entry;",
          "869:   if (!filter) {",
          "870:     entry = decoder_filters_.begin();",
          "871:   } else {",
          "872:     entry = std::next(filter->entry());",
          "873:   }",
          "",
          "[Added Lines]",
          "869:   std::list<ActiveStreamDecoderFilterPtr>::iterator entry =",
          "870:       commonDecodePrefix(filter, filter_iteration_start_state);",
          "874:     if (handleDataIfStopAll(**entry, data, state_.decoder_filters_streaming_)) {",
          "875:       return;",
          "876:     }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "979:   } else if (state_.filter_call_state_ & FilterCallState::DecodeTrailers) {",
          "983:   } else {",
          "",
          "[Removed Lines]",
          "982:     decodeData(&filter, data, false);",
          "",
          "[Added Lines]",
          "983:     decodeData(&filter, data, false, FilterIterationStartState::AlwaysStartFromNext);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1006:     return;",
          "1007:   }",
          "1016:   for (; entry != decoder_filters_.end(); entry++) {",
          "1017:     ASSERT(!(state_.filter_call_state_ & FilterCallState::DecodeTrailers));",
          "1018:     state_.filter_call_state_ |= FilterCallState::DecodeTrailers;",
          "1019:     FilterTrailersStatus status = (*entry)->handle_->decodeTrailers(trailers);",
          "",
          "[Removed Lines]",
          "1009:   std::list<ActiveStreamDecoderFilterPtr>::iterator entry;",
          "1010:   if (!filter) {",
          "1011:     entry = decoder_filters_.begin();",
          "1012:   } else {",
          "1013:     entry = std::next(filter->entry());",
          "1014:   }",
          "",
          "[Added Lines]",
          "1011:   std::list<ActiveStreamDecoderFilterPtr>::iterator entry =",
          "1012:       commonDecodePrefix(filter, FilterIterationStartState::CanStartFromCurrent);",
          "1016:     if ((*entry)->stoppedAll()) {",
          "1017:       return;",
          "1018:     }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1045: }",
          "1047: std::list<ConnectionManagerImpl::ActiveStreamEncoderFilterPtr>::iterator",
          "1052:   if (filter == nullptr) {",
          "1053:     ASSERT(!state_.local_complete_);",
          "1054:     state_.local_complete_ = end_stream;",
          "1055:   }",
          "1057:   if (!filter) {",
          "1061:   }",
          "1062: }",
          "1064: void ConnectionManagerImpl::startDrainSequence() {",
          "",
          "[Removed Lines]",
          "1048: ConnectionManagerImpl::ActiveStream::commonEncodePrefix(ActiveStreamEncoderFilter* filter,",
          "1049:                                                         bool end_stream) {",
          "1058:     return encoder_filters_.begin();",
          "1059:   } else {",
          "1060:     return std::next(filter->entry());",
          "",
          "[Added Lines]",
          "1051: ConnectionManagerImpl::ActiveStream::commonEncodePrefix(",
          "1052:     ActiveStreamEncoderFilter* filter, bool end_stream,",
          "1053:     FilterIterationStartState filter_iteration_start_state) {",
          "1059:     return encoder_filters_.begin();",
          "1060:   }",
          "1062:   if (filter_iteration_start_state == FilterIterationStartState::CanStartFromCurrent &&",
          "1063:       (*(filter->entry()))->iterate_from_current_filter_) {",
          "1066:     return filter->entry();",
          "1068:   return std::next(filter->entry());",
          "1069: }",
          "1071: std::list<ConnectionManagerImpl::ActiveStreamDecoderFilterPtr>::iterator",
          "1072: ConnectionManagerImpl::ActiveStream::commonDecodePrefix(",
          "1073:     ActiveStreamDecoderFilter* filter, FilterIterationStartState filter_iteration_start_state) {",
          "1075:     return decoder_filters_.begin();",
          "1077:   if (filter_iteration_start_state == FilterIterationStartState::CanStartFromCurrent &&",
          "1078:       (*(filter->entry()))->iterate_from_current_filter_) {",
          "1081:     return filter->entry();",
          "1082:   }",
          "1083:   return std::next(filter->entry());",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1109:                           [this](Buffer::Instance& data, bool end_stream) -> void {",
          "1113:                           },",
          "1114:                           state_.destroyed_, code, body, grpc_status, is_head_request);",
          "1115: }",
          "",
          "[Removed Lines]",
          "1112:                             encodeData(nullptr, data, end_stream);",
          "",
          "[Added Lines]",
          "1134:                             encodeData(nullptr, data, end_stream,",
          "1135:                                        FilterIterationStartState::CanStartFromCurrent);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1129:   for (; entry != encoder_filters_.end(); entry++) {",
          "1130:     ASSERT(!(state_.filter_call_state_ & FilterCallState::Encode100ContinueHeaders));",
          "1131:     state_.filter_call_state_ |= FilterCallState::Encode100ContinueHeaders;",
          "",
          "[Removed Lines]",
          "1128:   std::list<ActiveStreamEncoderFilterPtr>::iterator entry = commonEncodePrefix(filter, false);",
          "",
          "[Added Lines]",
          "1152:   std::list<ActiveStreamEncoderFilterPtr>::iterator entry =",
          "1153:       commonEncodePrefix(filter, false, FilterIterationStartState::AlwaysStartFromNext);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1156:   resetIdleTimer();",
          "1157:   disarmRequestTimeout();",
          "1160:   std::list<ActiveStreamEncoderFilterPtr>::iterator continue_data_entry = encoder_filters_.end();",
          "1162:   for (; entry != encoder_filters_.end(); entry++) {",
          "",
          "[Removed Lines]",
          "1159:   std::list<ActiveStreamEncoderFilterPtr>::iterator entry = commonEncodePrefix(filter, end_stream);",
          "",
          "[Added Lines]",
          "1185:   std::list<ActiveStreamEncoderFilterPtr>::iterator entry =",
          "1186:       commonEncodePrefix(filter, end_stream, FilterIterationStartState::AlwaysStartFromNext);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1284:       encoding_headers_only_ || (end_stream && continue_data_entry == encoder_filters_.end()));",
          "1285:   if (continue_data_entry != encoder_filters_.end()) {",
          "1288:     ASSERT(buffered_response_data_);",
          "1290:     (*continue_data_entry)->continueEncoding();",
          "1291:   } else {",
          "",
          "[Removed Lines]",
          "1289:     (*continue_data_entry)->stopped_ = true;",
          "",
          "[Added Lines]",
          "1317:     (*continue_data_entry)->iteration_state_ =",
          "1318:         ActiveStreamFilterBase::IterationState::StopSingleIteration;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1342:   } else if (state_.filter_call_state_ & FilterCallState::EncodeTrailers) {",
          "1346:   } else {",
          "",
          "[Removed Lines]",
          "1345:     encodeData(&filter, data, false);",
          "",
          "[Added Lines]",
          "1374:     encodeData(&filter, data, false, FilterIterationStartState::AlwaysStartFromNext);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1350:   }",
          "1351: }",
          "1355:   resetIdleTimer();",
          "",
          "[Removed Lines]",
          "1353: void ConnectionManagerImpl::ActiveStream::encodeData(ActiveStreamEncoderFilter* filter,",
          "1354:                                                      Buffer::Instance& data, bool end_stream) {",
          "",
          "[Added Lines]",
          "1382: void ConnectionManagerImpl::ActiveStream::encodeData(",
          "1383:     ActiveStreamEncoderFilter* filter, Buffer::Instance& data, bool end_stream,",
          "1384:     FilterIterationStartState filter_iteration_start_state) {",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1359:     return;",
          "1360:   }",
          "1363:   auto trailers_added_entry = encoder_filters_.end();",
          "1365:   const bool trailers_exists_at_start = response_trailers_ != nullptr;",
          "1366:   for (; entry != encoder_filters_.end(); entry++) {",
          "1369:     if ((*entry)->end_stream_) {",
          "",
          "[Removed Lines]",
          "1362:   std::list<ActiveStreamEncoderFilterPtr>::iterator entry = commonEncodePrefix(filter, end_stream);",
          "",
          "[Added Lines]",
          "1393:   std::list<ActiveStreamEncoderFilterPtr>::iterator entry =",
          "1394:       commonEncodePrefix(filter, end_stream, filter_iteration_start_state);",
          "1400:     if (handleDataIfStopAll(**entry, data, state_.encoder_filters_streaming_)) {",
          "1401:       return;",
          "1402:     }",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1428:     return;",
          "1429:   }",
          "1432:   for (; entry != encoder_filters_.end(); entry++) {",
          "1433:     ASSERT(!(state_.filter_call_state_ & FilterCallState::EncodeTrailers));",
          "1434:     state_.filter_call_state_ |= FilterCallState::EncodeTrailers;",
          "1435:     FilterTrailersStatus status = (*entry)->handle_->encodeTrailers(trailers);",
          "",
          "[Removed Lines]",
          "1431:   std::list<ActiveStreamEncoderFilterPtr>::iterator entry = commonEncodePrefix(filter, true);",
          "",
          "[Added Lines]",
          "1468:   std::list<ActiveStreamEncoderFilterPtr>::iterator entry =",
          "1469:       commonEncodePrefix(filter, true, FilterIterationStartState::CanStartFromCurrent);",
          "1472:     if ((*entry)->stoppedAll()) {",
          "1473:       return;",
          "1474:     }",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1457:   }",
          "1458: }",
          "1460: void ConnectionManagerImpl::ActiveStream::onResetStream(StreamResetReason, absl::string_view) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1502: bool ConnectionManagerImpl::ActiveStream::handleDataIfStopAll(ActiveStreamFilterBase& filter,",
          "1503:                                                               Buffer::Instance& data,",
          "1504:                                                               bool& filter_streaming) {",
          "1505:   if (filter.stoppedAll()) {",
          "1506:     ASSERT(!filter.canIterate());",
          "1507:     filter_streaming =",
          "1508:         filter.iteration_state_ == ActiveStreamFilterBase::IterationState::StopAllWatermark;",
          "1509:     filter.commonHandleBufferData(data);",
          "1510:     return true;",
          "1511:   }",
          "1512:   return false;",
          "1513: }",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1560:   ENVOY_STREAM_LOG(trace, \"continuing filter chain: filter={}\", parent_,",
          "1561:                    static_cast<const void*>(this));",
          "1566:   if (parent_.has_continue_headers_ && !continue_headers_continued_) {",
          "",
          "[Removed Lines]",
          "1562:   ASSERT(stopped_);",
          "1563:   stopped_ = false;",
          "",
          "[Added Lines]",
          "1617:   ASSERT(!canIterate());",
          "1620:   if (stoppedAll()) {",
          "1621:     iterate_from_current_filter_ = true;",
          "1622:   }",
          "1623:   allowIteration();",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1590:   if (trailers()) {",
          "1591:     doTrailers();",
          "1592:   }",
          "1593: }",
          "1595: bool ConnectionManagerImpl::ActiveStreamFilterBase::commonHandleAfter100ContinueHeadersCallback(",
          "1596:     FilterHeadersStatus status) {",
          "1597:   ASSERT(parent_.has_continue_headers_);",
          "1598:   ASSERT(!continue_headers_continued_);",
          "1601:   if (status == FilterHeadersStatus::StopIteration) {",
          "1603:     return false;",
          "1604:   } else {",
          "1605:     ASSERT(status == FilterHeadersStatus::Continue);",
          "",
          "[Removed Lines]",
          "1599:   ASSERT(!stopped_);",
          "1602:     stopped_ = true;",
          "",
          "[Added Lines]",
          "1654:   iterate_from_current_filter_ = false;",
          "1661:   ASSERT(canIterate());",
          "1664:     iteration_state_ = IterationState::StopSingleIteration;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1611: bool ConnectionManagerImpl::ActiveStreamFilterBase::commonHandleAfterHeadersCallback(",
          "1612:     FilterHeadersStatus status, bool& headers_only) {",
          "1613:   ASSERT(!headers_continued_);",
          "1616:   if (status == FilterHeadersStatus::StopIteration) {",
          "1618:     return false;",
          "1619:   } else if (status == FilterHeadersStatus::ContinueAndEndStream) {",
          "",
          "[Removed Lines]",
          "1614:   ASSERT(!stopped_);",
          "1617:     stopped_ = true;",
          "",
          "[Added Lines]",
          "1676:   ASSERT(canIterate());",
          "1679:     iteration_state_ = IterationState::StopSingleIteration;",
          "1680:     return false;",
          "1681:   } else if (status == FilterHeadersStatus::StopAllIterationAndBuffer) {",
          "1682:     iteration_state_ = IterationState::StopAllBuffer;",
          "1683:     return false;",
          "1684:   } else if (status == FilterHeadersStatus::StopAllIterationAndWatermark) {",
          "1685:     iteration_state_ = IterationState::StopAllWatermark;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1650:     FilterDataStatus status, Buffer::Instance& provided_data, bool& buffer_was_streaming) {",
          "1652:   if (status == FilterDataStatus::Continue) {",
          "1654:       commonHandleBufferData(provided_data);",
          "1655:       commonContinue();",
          "1656:       return false;",
          "",
          "[Removed Lines]",
          "1653:     if (stopped_) {",
          "",
          "[Added Lines]",
          "1721:     if (iteration_state_ == IterationState::StopSingleIteration) {",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1658:       ASSERT(headers_continued_);",
          "1659:     }",
          "1660:   } else {",
          "1662:     if (status == FilterDataStatus::StopIterationAndBuffer ||",
          "1663:         status == FilterDataStatus::StopIterationAndWatermark) {",
          "1664:       buffer_was_streaming = status == FilterDataStatus::StopIterationAndWatermark;",
          "",
          "[Removed Lines]",
          "1661:     stopped_ = true;",
          "",
          "[Added Lines]",
          "1729:     iteration_state_ = IterationState::StopSingleIteration;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1675:     FilterTrailersStatus status) {",
          "1677:   if (status == FilterTrailersStatus::Continue) {",
          "1679:       commonContinue();",
          "1680:       return false;",
          "1681:     } else {",
          "",
          "[Removed Lines]",
          "1678:     if (stopped_) {",
          "",
          "[Added Lines]",
          "1746:     if (iteration_state_ == IterationState::StopSingleIteration) {",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1752: void ConnectionManagerImpl::ActiveStreamDecoderFilter::injectDecodedDataToFilterChain(",
          "1753:     Buffer::Instance& data, bool end_stream) {",
          "1755: }",
          "1757: void ConnectionManagerImpl::ActiveStreamDecoderFilter::continueDecoding() { commonContinue(); }",
          "",
          "[Removed Lines]",
          "1754:   parent_.decodeData(this, data, end_stream);",
          "",
          "[Added Lines]",
          "1822:   parent_.decodeData(this, data, end_stream,",
          "1823:                      ActiveStream::FilterIterationStartState::CanStartFromCurrent);",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1776: void ConnectionManagerImpl::ActiveStreamDecoderFilter::encodeData(Buffer::Instance& data,",
          "1777:                                                                   bool end_stream) {",
          "1779: }",
          "1781: void ConnectionManagerImpl::ActiveStreamDecoderFilter::encodeTrailers(HeaderMapPtr&& trailers) {",
          "",
          "[Removed Lines]",
          "1778:   parent_.encodeData(nullptr, data, end_stream);",
          "",
          "[Added Lines]",
          "1847:   parent_.encodeData(nullptr, data, end_stream,",
          "1848:                      ActiveStream::FilterIterationStartState::CanStartFromCurrent);",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1873: void ConnectionManagerImpl::ActiveStreamEncoderFilter::injectEncodedDataToFilterChain(",
          "1874:     Buffer::Instance& data, bool end_stream) {",
          "1876: }",
          "1878: HeaderMap& ConnectionManagerImpl::ActiveStreamEncoderFilter::addEncodedTrailers() {",
          "",
          "[Removed Lines]",
          "1875:   parent_.encodeData(this, data, end_stream);",
          "",
          "[Added Lines]",
          "1945:   parent_.encodeData(this, data, end_stream,",
          "1946:                      ActiveStream::FilterIterationStartState::CanStartFromCurrent);",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1903:     if (!headers_continued_) {",
          "1905:       parent_.state_.encoder_filters_streaming_ = true;",
          "1908:       Http::Utility::sendLocalReply(",
          "1909:           Grpc::Common::hasGrpcContentType(*parent_.request_headers_),",
          "",
          "[Removed Lines]",
          "1906:       stopped_ = false;",
          "",
          "[Added Lines]",
          "1977:       allowIteration();",
          "",
          "---------------"
        ],
        "source/common/http/conn_manager_impl.h||source/common/http/conn_manager_impl.h": [
          "File: source/common/http/conn_manager_impl.h -> source/common/http/conn_manager_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:   struct ActiveStreamFilterBase : public virtual StreamFilterCallbacks {",
          "97:     ActiveStreamFilterBase(ActiveStream& parent, bool dual_filter)",
          "101:     bool commonHandleAfter100ContinueHeadersCallback(FilterHeadersStatus status);",
          "102:     bool commonHandleAfterHeadersCallback(FilterHeadersStatus status, bool& headers_only);",
          "104:     bool commonHandleAfterDataCallback(FilterDataStatus status, Buffer::Instance& provided_data,",
          "105:                                        bool& buffer_was_streaming);",
          "106:     bool commonHandleAfterTrailersCallback(FilterTrailersStatus status);",
          "108:     void commonContinue();",
          "109:     virtual bool canContinue() PURE;",
          "110:     virtual Buffer::WatermarkBufferPtr createBuffer() PURE;",
          "",
          "[Removed Lines]",
          "98:         : parent_(parent), headers_continued_(false), continue_headers_continued_(false),",
          "99:           stopped_(false), end_stream_(false), dual_filter_(dual_filter) {}",
          "103:     void commonHandleBufferData(Buffer::Instance& provided_data);",
          "",
          "[Added Lines]",
          "98:         : iteration_state_(IterationState::Continue), iterate_from_current_filter_(false),",
          "99:           parent_(parent), headers_continued_(false), continue_headers_continued_(false),",
          "100:           end_stream_(false), dual_filter_(dual_filter) {}",
          "112:     void commonHandleBufferData(Buffer::Instance& provided_data);",
          "116:     void commonBufferDataIfStopAll(Buffer::Instance& provided_data, bool& buffer_was_streaming);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "128:     Tracing::Span& activeSpan() override;",
          "129:     Tracing::Config& tracingConfig() override;",
          "131:     ActiveStream& parent_;",
          "132:     bool headers_continued_ : 1;",
          "133:     bool continue_headers_continued_ : 1;",
          "136:     bool end_stream_ : 1;",
          "137:     const bool dual_filter_ : 1;",
          "",
          "[Removed Lines]",
          "134:     bool stopped_ : 1;",
          "",
          "[Added Lines]",
          "142:     bool canIterate() { return iteration_state_ == IterationState::Continue; }",
          "143:     bool stoppedAll() {",
          "144:       return iteration_state_ == IterationState::StopAllBuffer ||",
          "145:              iteration_state_ == IterationState::StopAllWatermark;",
          "146:     }",
          "147:     void allowIteration() {",
          "148:       ASSERT(iteration_state_ != IterationState::Continue);",
          "149:       iteration_state_ = IterationState::Continue;",
          "150:     }",
          "153:     enum class IterationState {",
          "154:       Continue,            // Iteration has not stopped for any frame type.",
          "155:       StopSingleIteration, // Iteration has stopped for headers, 100-continue, or data.",
          "156:       StopAllBuffer,       // Iteration has stopped for all frame types, and following data should",
          "158:       StopAllWatermark,    // Iteration has stopped for all frame types, and following data should",
          "160:     };",
          "161:     IterationState iteration_state_;",
          "166:     bool iterate_from_current_filter_;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "164:       parent_.decodeHeaders(this, *parent_.request_headers_, end_stream);",
          "165:     }",
          "166:     void doData(bool end_stream) override {",
          "168:     }",
          "169:     void doTrailers() override { parent_.decodeTrailers(this, *parent_.request_trailers_); }",
          "170:     const HeaderMapPtr& trailers() override { return parent_.request_trailers_; }",
          "",
          "[Removed Lines]",
          "167:       parent_.decodeData(this, *parent_.buffered_request_data_, end_stream);",
          "",
          "[Added Lines]",
          "202:       parent_.decodeData(this, *parent_.buffered_request_data_, end_stream,",
          "203:                          ActiveStream::FilterIterationStartState::CanStartFromCurrent);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "247:       parent_.encodeHeaders(this, *parent_.response_headers_, end_stream);",
          "248:     }",
          "249:     void doData(bool end_stream) override {",
          "251:     }",
          "252:     void doTrailers() override { parent_.encodeTrailers(this, *parent_.response_trailers_); }",
          "253:     const HeaderMapPtr& trailers() override { return parent_.response_trailers_; }",
          "",
          "[Removed Lines]",
          "250:       parent_.encodeData(this, *parent_.buffered_response_data_, end_stream);",
          "",
          "[Added Lines]",
          "286:       parent_.encodeData(this, *parent_.buffered_response_data_, end_stream,",
          "287:                          ActiveStream::FilterIterationStartState::CanStartFromCurrent);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "290:     ActiveStream(ConnectionManagerImpl& connection_manager);",
          "291:     ~ActiveStream();",
          "293:     void addStreamDecoderFilterWorker(StreamDecoderFilterSharedPtr filter, bool dual_filter);",
          "294:     void addStreamEncoderFilterWorker(StreamEncoderFilterSharedPtr filter, bool dual_filter);",
          "295:     void chargeStats(const HeaderMap& headers);",
          "296:     std::list<ActiveStreamEncoderFilterPtr>::iterator",
          "298:     const Network::Connection* connection();",
          "299:     void addDecodedData(ActiveStreamDecoderFilter& filter, Buffer::Instance& data, bool streaming);",
          "300:     HeaderMap& addDecodedTrailers();",
          "301:     void decodeHeaders(ActiveStreamDecoderFilter* filter, HeaderMap& headers, bool end_stream);",
          "303:     void decodeTrailers(ActiveStreamDecoderFilter* filter, HeaderMap& trailers);",
          "304:     void disarmRequestTimeout();",
          "305:     void maybeEndDecode(bool end_stream);",
          "",
          "[Removed Lines]",
          "297:     commonEncodePrefix(ActiveStreamEncoderFilter* filter, bool end_stream);",
          "302:     void decodeData(ActiveStreamDecoderFilter* filter, Buffer::Instance& data, bool end_stream);",
          "",
          "[Added Lines]",
          "331:     enum class FilterIterationStartState { AlwaysStartFromNext, CanStartFromCurrent };",
          "338:     commonEncodePrefix(ActiveStreamEncoderFilter* filter, bool end_stream,",
          "339:                        FilterIterationStartState filter_iteration_start_state);",
          "341:     std::list<ActiveStreamDecoderFilterPtr>::iterator",
          "342:     commonDecodePrefix(ActiveStreamDecoderFilter* filter,",
          "343:                        FilterIterationStartState filter_iteration_start_state);",
          "350:     void decodeData(ActiveStreamDecoderFilter* filter, Buffer::Instance& data, bool end_stream,",
          "351:                     FilterIterationStartState filter_iteration_start_state);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "311:                         const absl::optional<Grpc::Status::GrpcStatus> grpc_status);",
          "312:     void encode100ContinueHeaders(ActiveStreamEncoderFilter* filter, HeaderMap& headers);",
          "313:     void encodeHeaders(ActiveStreamEncoderFilter* filter, HeaderMap& headers, bool end_stream);",
          "315:     void encodeTrailers(ActiveStreamEncoderFilter* filter, HeaderMap& trailers);",
          "316:     void encodeMetadata(ActiveStreamEncoderFilter* filter, MetadataMapPtr&& metadata_map_ptr);",
          "317:     void maybeEndEncode(bool end_stream);",
          "318:     uint64_t streamId() { return stream_id_; }",
          "321:     void onResetStream(StreamResetReason reason,",
          "",
          "[Removed Lines]",
          "314:     void encodeData(ActiveStreamEncoderFilter* filter, Buffer::Instance& data, bool end_stream);",
          "",
          "[Added Lines]",
          "365:     void encodeData(ActiveStreamEncoderFilter* filter, Buffer::Instance& data, bool end_stream,",
          "366:                     FilterIterationStartState filter_iteration_start_state);",
          "374:     bool handleDataIfStopAll(ActiveStreamFilterBase& filter, Buffer::Instance& data,",
          "375:                              bool& filter_streaming);",
          "",
          "---------------"
        ],
        "test/common/http/conn_manager_impl_test.cc||test/common/http/conn_manager_impl_test.cc": [
          "File: test/common/http/conn_manager_impl_test.cc -> test/common/http/conn_manager_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "168:     EXPECT_CALL(stream_, bufferLimit()).WillOnce(Return(initial_buffer_limit_));",
          "169:   }",
          "172:     setUpBufferLimits();",
          "180:     setupFilterChain(2, 2);",
          "184:           Buffer::OwnedImpl data(\"hello\");",
          "185:           decoder_filters_[0]->callbacks_->addDecodedData(data, true);",
          "187:         }));",
          "188:     EXPECT_CALL(*decoder_filters_[0], decodeComplete());",
          "189:   }",
          "",
          "[Removed Lines]",
          "171:   void setUpEncoderAndDecoder() {",
          "173:     EXPECT_CALL(*codec_, dispatch(_)).WillOnce(Invoke([&](Buffer::Instance&) -> void {",
          "174:       StreamDecoder* decoder = &conn_manager_->newStream(response_encoder_);",
          "175:       HeaderMapPtr headers{",
          "176:           new TestHeaderMapImpl{{\":authority\", \"host\"}, {\":path\", \"/\"}, {\":method\", \"GET\"}}};",
          "177:       decoder->decodeHeaders(std::move(headers), true);",
          "178:     }));",
          "182:     EXPECT_CALL(*decoder_filters_[0], decodeHeaders(_, true))",
          "183:         .WillOnce(InvokeWithoutArgs([&]() -> FilterHeadersStatus {",
          "186:           return FilterHeadersStatus::Continue;",
          "",
          "[Added Lines]",
          "174:   void setUpEncoderAndDecoder(bool request_with_data_and_trailers, bool decode_headers_stop_all) {",
          "176:     EXPECT_CALL(*codec_, dispatch(_))",
          "177:         .WillOnce(Invoke([&, request_with_data_and_trailers](Buffer::Instance&) -> void {",
          "178:           StreamDecoder* decoder = &conn_manager_->newStream(response_encoder_);",
          "179:           HeaderMapPtr headers{",
          "180:               new TestHeaderMapImpl{{\":authority\", \"host\"}, {\":path\", \"/\"}, {\":method\", \"GET\"}}};",
          "181:           if (request_with_data_and_trailers) {",
          "182:             decoder->decodeHeaders(std::move(headers), false);",
          "184:             Buffer::OwnedImpl fake_data(\"12345\");",
          "185:             decoder->decodeData(fake_data, false);",
          "187:             HeaderMapPtr trailers{new TestHeaderMapImpl{{\"foo\", \"bar\"}}};",
          "188:             decoder->decodeTrailers(std::move(trailers));",
          "189:           } else {",
          "190:             decoder->decodeHeaders(std::move(headers), true);",
          "191:           }",
          "192:         }));",
          "196:     EXPECT_CALL(*decoder_filters_[0], decodeHeaders(_, _))",
          "197:         .WillOnce(InvokeWithoutArgs([&, decode_headers_stop_all]() -> FilterHeadersStatus {",
          "200:           if (decode_headers_stop_all) {",
          "201:             return FilterHeadersStatus::StopAllIterationAndBuffer;",
          "202:           } else {",
          "203:             return FilterHeadersStatus::Continue;",
          "204:           }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "436: TEST_F(HttpConnectionManagerImplTest, 100ContinueResponseWithEncoderFiltersProxyingDisabled) {",
          "437:   proxy_100_continue_ = false;",
          "438:   setup(false, \"envoy-custom-server\", false);",
          "440:   sendRequestHeadersAndData();",
          "",
          "[Removed Lines]",
          "439:   setUpEncoderAndDecoder();",
          "",
          "[Added Lines]",
          "457:   setUpEncoderAndDecoder(false, false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "460: TEST_F(HttpConnectionManagerImplTest, 100ContinueResponseWithEncoderFilters) {",
          "461:   proxy_100_continue_ = true;",
          "462:   setup(false, \"envoy-custom-server\", false);",
          "464:   sendRequestHeadersAndData();",
          "466:   EXPECT_CALL(*encoder_filters_[0], encode100ContinueHeaders(_))",
          "",
          "[Removed Lines]",
          "463:   setUpEncoderAndDecoder();",
          "",
          "[Added Lines]",
          "481:   setUpEncoderAndDecoder(false, false);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "483: TEST_F(HttpConnectionManagerImplTest, PauseResume100Continue) {",
          "484:   proxy_100_continue_ = true;",
          "485:   setup(false, \"envoy-custom-server\", false);",
          "487:   sendRequestHeadersAndData();",
          "",
          "[Removed Lines]",
          "486:   setUpEncoderAndDecoder();",
          "",
          "[Added Lines]",
          "504:   setUpEncoderAndDecoder(false, false);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2854: TEST_F(HttpConnectionManagerImplTest, UpstreamWatermarkCallbacks) {",
          "2855:   setup(false, \"\");",
          "2857:   sendRequestHeadersAndData();",
          "",
          "[Removed Lines]",
          "2856:   setUpEncoderAndDecoder();",
          "",
          "[Added Lines]",
          "2874:   setUpEncoderAndDecoder(false, false);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "3018: TEST_F(HttpConnectionManagerImplTest, AlterFilterWatermarkLimits) {",
          "3019:   initial_buffer_limit_ = 100;",
          "3020:   setup(false, \"\");",
          "3022:   sendRequestHeadersAndData();",
          "",
          "[Removed Lines]",
          "3021:   setUpEncoderAndDecoder();",
          "",
          "[Added Lines]",
          "3039:   setUpEncoderAndDecoder(false, false);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3047:   initial_buffer_limit_ = 1;",
          "3048:   streaming_filter_ = true;",
          "3049:   setup(false, \"\");",
          "",
          "[Removed Lines]",
          "3050:   setUpEncoderAndDecoder();",
          "",
          "[Added Lines]",
          "3068:   setUpEncoderAndDecoder(false, false);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3087:   initial_buffer_limit_ = 10;",
          "3088:   streaming_filter_ = false;",
          "3089:   setup(false, \"\");",
          "3091:   sendRequestHeadersAndData();",
          "",
          "[Removed Lines]",
          "3090:   setUpEncoderAndDecoder();",
          "",
          "[Added Lines]",
          "3108:   setUpEncoderAndDecoder(false, false);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "3148: TEST_F(HttpConnectionManagerImplTest, HitResponseBufferLimitsBeforeHeaders) {",
          "3149:   initial_buffer_limit_ = 10;",
          "3150:   setup(false, \"\");",
          "3152:   sendRequestHeadersAndData();",
          "",
          "[Removed Lines]",
          "3151:   setUpEncoderAndDecoder();",
          "",
          "[Added Lines]",
          "3169:   setUpEncoderAndDecoder(false, false);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3182: TEST_F(HttpConnectionManagerImplTest, HitResponseBufferLimitsAfterHeaders) {",
          "3183:   initial_buffer_limit_ = 10;",
          "3184:   setup(false, \"\");",
          "3186:   sendRequestHeadersAndData();",
          "",
          "[Removed Lines]",
          "3185:   setUpEncoderAndDecoder();",
          "",
          "[Added Lines]",
          "3203:   setUpEncoderAndDecoder(false, false);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "4016:   Buffer::OwnedImpl fake_input(\"1234\");",
          "4017:   conn_manager_->onData(fake_input, false); // kick off request",
          "4018: }",
          "4019: } // namespace Http",
          "4020: } // namespace Envoy",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4038: TEST_F(HttpConnectionManagerImplTest, TestStopAllIterationAndBufferOnDecodingPathFirstFilter) {",
          "4039:   setup(false, \"envoy-custom-server\", false);",
          "4040:   setUpEncoderAndDecoder(true, true);",
          "4043:   Buffer::OwnedImpl fake_input(\"1234\");",
          "4044:   conn_manager_->onData(fake_input, false);",
          "4048:   EXPECT_CALL(*decoder_filters_[1], decodeHeaders(_, _))",
          "4049:       .WillOnce(Return(FilterHeadersStatus::Continue));",
          "4050:   EXPECT_CALL(*decoder_filters_[0], decodeData(_, _)).WillOnce(Return(FilterDataStatus::Continue));",
          "4051:   EXPECT_CALL(*decoder_filters_[1], decodeData(_, _)).WillOnce(Return(FilterDataStatus::Continue));",
          "4052:   EXPECT_CALL(*decoder_filters_[0], decodeTrailers(_))",
          "4053:       .WillOnce(Return(FilterTrailersStatus::Continue));",
          "4054:   EXPECT_CALL(*decoder_filters_[1], decodeTrailers(_))",
          "4055:       .WillOnce(Return(FilterTrailersStatus::Continue));",
          "4056:   EXPECT_CALL(*decoder_filters_[1], decodeComplete());",
          "4057:   decoder_filters_[0]->callbacks_->continueDecoding();",
          "4058: }",
          "4060: TEST_F(HttpConnectionManagerImplTest, TestStopAllIterationAndBufferOnDecodingPathSecondFilter) {",
          "4061:   setup(false, \"envoy-custom-server\", false);",
          "4062:   setUpEncoderAndDecoder(true, false);",
          "4065:   EXPECT_CALL(*decoder_filters_[1], decodeHeaders(_, _))",
          "4066:       .WillOnce(Return(FilterHeadersStatus::StopAllIterationAndBuffer));",
          "4067:   EXPECT_CALL(*decoder_filters_[0], decodeData(_, _)).WillOnce(Return(FilterDataStatus::Continue));",
          "4068:   EXPECT_CALL(*decoder_filters_[0], decodeTrailers(_))",
          "4069:       .WillOnce(Return(FilterTrailersStatus::Continue));",
          "4071:   Buffer::OwnedImpl fake_input(\"1234\");",
          "4072:   conn_manager_->onData(fake_input, false);",
          "4076:   EXPECT_CALL(*decoder_filters_[1], decodeData(_, _)).WillOnce(Return(FilterDataStatus::Continue));",
          "4077:   EXPECT_CALL(*decoder_filters_[1], decodeTrailers(_))",
          "4078:       .WillOnce(Return(FilterTrailersStatus::Continue));",
          "4079:   EXPECT_CALL(*decoder_filters_[1], decodeComplete());",
          "4080:   decoder_filters_[1]->callbacks_->continueDecoding();",
          "4081: }",
          "4083: TEST_F(HttpConnectionManagerImplTest, TestStopAllIterationAndBufferOnEncodingPath) {",
          "4084:   setup(false, \"envoy-custom-server\", false);",
          "4085:   setUpEncoderAndDecoder(false, false);",
          "4086:   sendRequestHeadersAndData();",
          "4089:   EXPECT_CALL(*encoder_filters_[1], encodeHeaders(_, false))",
          "4090:       .WillOnce(Invoke([&](HeaderMap&, bool) -> FilterHeadersStatus {",
          "4091:         return FilterHeadersStatus::StopAllIterationAndBuffer;",
          "4092:       }));",
          "4093:   HeaderMapPtr response_headers{new TestHeaderMapImpl{{\":status\", \"200\"}}};",
          "4094:   decoder_filters_[0]->callbacks_->encodeHeaders(std::move(response_headers), false);",
          "4098:   EXPECT_CALL(*encoder_filters_[0], encodeData(_, _)).Times(0);",
          "4099:   EXPECT_CALL(*encoder_filters_[1], encodeData(_, _)).Times(0);",
          "4100:   Buffer::OwnedImpl response_body(\"response\");",
          "4101:   decoder_filters_[0]->callbacks_->encodeData(response_body, false);",
          "4102:   decoder_filters_[0]->callbacks_->encodeTrailers(",
          "4103:       HeaderMapPtr{new TestHeaderMapImpl{{\"some\", \"trailer\"}}});",
          "4107:   EXPECT_CALL(*encoder_filters_[0], encodeHeaders(_, _))",
          "4108:       .WillOnce(Return(FilterHeadersStatus::Continue));",
          "4109:   EXPECT_CALL(response_encoder_, encodeHeaders(_, false));",
          "4110:   EXPECT_CALL(*encoder_filters_[1], encodeData(_, _)).WillOnce(Return(FilterDataStatus::Continue));",
          "4111:   EXPECT_CALL(*encoder_filters_[0], encodeData(_, _)).WillOnce(Return(FilterDataStatus::Continue));",
          "4112:   EXPECT_CALL(response_encoder_, encodeData(_, _));",
          "4113:   EXPECT_CALL(*encoder_filters_[1], encodeTrailers(_))",
          "4114:       .WillOnce(Return(FilterTrailersStatus::Continue));",
          "4115:   EXPECT_CALL(*encoder_filters_[0], encodeTrailers(_))",
          "4116:       .WillOnce(Return(FilterTrailersStatus::Continue));",
          "4117:   EXPECT_CALL(response_encoder_, encodeTrailers(_));",
          "4118:   EXPECT_CALL(*encoder_filters_[0], encodeComplete());",
          "4119:   EXPECT_CALL(*encoder_filters_[1], encodeComplete());",
          "4120:   expectOnDestroy();",
          "4121:   encoder_filters_[1]->callbacks_->continueEncoding();",
          "4122: }",
          "",
          "---------------"
        ],
        "test/integration/filters/call_decodedata_once_filter.cc||test/integration/filters/call_decodedata_once_filter.cc": [
          "File: test/integration/filters/call_decodedata_once_filter.cc -> test/integration/filters/call_decodedata_once_filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include \"envoy/registry/registry.h\"",
          "2: #include \"envoy/server/filter_config.h\"",
          "4: #include \"extensions/filters/http/common/empty_http_filter_config.h\"",
          "5: #include \"extensions/filters/http/common/pass_through_filter.h\"",
          "7: #include \"test/integration/filters/common.h\"",
          "9: #include \"gtest/gtest.h\"",
          "11: namespace Envoy {",
          "14: class CallDecodeDataOnceFilter : public Http::PassThroughFilter {",
          "15: public:",
          "16:   constexpr static char name[] = \"call-decodedata-once-filter\";",
          "18:   Http::FilterHeadersStatus decodeHeaders(Http::HeaderMap& header_map, bool) override {",
          "19:     Http::HeaderEntry* entry_content = header_map.get(Envoy::Http::LowerCaseString(\"content_size\"));",
          "20:     Http::HeaderEntry* entry_added = header_map.get(Envoy::Http::LowerCaseString(\"added_size\"));",
          "21:     ASSERT(entry_content != nullptr && entry_added != nullptr);",
          "22:     content_size_ = std::stoul(std::string(entry_content->value().getStringView()));",
          "23:     added_size_ = std::stoul(std::string(entry_added->value().getStringView()));",
          "24:     return Http::FilterHeadersStatus::Continue;",
          "25:   }",
          "27:   Http::FilterDataStatus decodeData(Buffer::Instance& data, bool) override {",
          "30:     EXPECT_TRUE(data.length() == content_size_ + added_size_ || data.length() == added_size_);",
          "31:     return Http::FilterDataStatus::Continue;",
          "32:   }",
          "34:   Http::FilterTrailersStatus decodeTrailers(Http::HeaderMap&) override {",
          "35:     return Http::FilterTrailersStatus::Continue;",
          "36:   }",
          "38: private:",
          "39:   size_t content_size_ = 0;",
          "40:   size_t added_size_ = 0;",
          "41: };",
          "43: constexpr char CallDecodeDataOnceFilter::name[];",
          "44: static Registry::RegisterFactory<SimpleFilterConfig<CallDecodeDataOnceFilter>,",
          "45:                                  Server::Configuration::NamedHttpFilterConfigFactory>",
          "46:     register_;",
          "48: } // namespace Envoy",
          "",
          "---------------"
        ],
        "test/integration/filters/decode_headers_return_stop_all_filter.cc||test/integration/filters/decode_headers_return_stop_all_filter.cc": [
          "File: test/integration/filters/decode_headers_return_stop_all_filter.cc -> test/integration/filters/decode_headers_return_stop_all_filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <chrono>",
          "2: #include <string>",
          "4: #include \"envoy/event/timer.h\"",
          "5: #include \"envoy/http/filter.h\"",
          "6: #include \"envoy/registry/registry.h\"",
          "7: #include \"envoy/server/filter_config.h\"",
          "9: #include \"common/buffer/buffer_impl.h\"",
          "11: #include \"extensions/filters/http/common/empty_http_filter_config.h\"",
          "12: #include \"extensions/filters/http/common/pass_through_filter.h\"",
          "14: #include \"test/integration/filters/common.h\"",
          "16: #include \"gtest/gtest.h\"",
          "18: namespace Envoy {",
          "22: class DecodeHeadersReturnStopAllFilter : public Http::PassThroughFilter {",
          "23: public:",
          "24:   constexpr static char name[] = \"decode-headers-return-stop-all-filter\";",
          "29:   Http::FilterHeadersStatus decodeHeaders(Http::HeaderMap& header_map, bool) override {",
          "30:     Http::HeaderEntry* entry_content = header_map.get(Envoy::Http::LowerCaseString(\"content_size\"));",
          "31:     Http::HeaderEntry* entry_added = header_map.get(Envoy::Http::LowerCaseString(\"added_size\"));",
          "32:     ASSERT(entry_content != nullptr && entry_added != nullptr);",
          "33:     content_size_ = std::stoul(std::string(entry_content->value().getStringView()));",
          "34:     added_size_ = std::stoul(std::string(entry_added->value().getStringView()));",
          "35:     Http::HeaderEntry* entry_is_first_trigger =",
          "36:         header_map.get(Envoy::Http::LowerCaseString(\"is_first_trigger\"));",
          "37:     is_first_trigger_ = entry_is_first_trigger != nullptr;",
          "40:     header_map.remove(Http::LowerCaseString(\"is_first_trigger\"));",
          "42:     createTimerForContinue();",
          "44:     Http::HeaderEntry* entry_buffer = header_map.get(Envoy::Http::LowerCaseString(\"buffer_limit\"));",
          "45:     if (entry_buffer == nullptr || !is_first_trigger_) {",
          "46:       return Http::FilterHeadersStatus::StopAllIterationAndBuffer;",
          "47:     } else {",
          "48:       watermark_enabled_ = true;",
          "49:       buffer_limit_ = std::stoul(std::string(entry_buffer->value().getStringView()));",
          "50:       decoder_callbacks_->setDecoderBufferLimit(buffer_limit_);",
          "51:       header_map.remove(Http::LowerCaseString(\"buffer_limit\"));",
          "52:       return Http::FilterHeadersStatus::StopAllIterationAndWatermark;",
          "53:     }",
          "54:   }",
          "56:   Http::FilterDataStatus decodeData(Buffer::Instance& data, bool) override {",
          "57:     ASSERT(timer_triggered_);",
          "58:     if (is_first_trigger_) {",
          "59:       if (watermark_enabled_) {",
          "62:         EXPECT_LT(data.length(), content_size_);",
          "63:       } else {",
          "65:         EXPECT_EQ(data.length(), content_size_);",
          "66:       }",
          "67:       Buffer::OwnedImpl added_data(std::string(added_size_, 'a'));",
          "68:       decoder_callbacks_->addDecodedData(added_data, false);",
          "69:     } else {",
          "70:       EXPECT_TRUE(data.length() == content_size_ + added_size_ ||",
          "71:                   data.length() == content_size_ + added_size_ * 2);",
          "72:     }",
          "73:     return Http::FilterDataStatus::Continue;",
          "74:   }",
          "76:   Http::FilterTrailersStatus decodeTrailers(Http::HeaderMap&) override {",
          "77:     ASSERT(timer_triggered_);",
          "78:     if (is_first_trigger_) {",
          "79:       Buffer::OwnedImpl data(std::string(added_size_, 'a'));",
          "80:       decoder_callbacks_->addDecodedData(data, false);",
          "81:     }",
          "82:     return Http::FilterTrailersStatus::Continue;",
          "83:   }",
          "85: private:",
          "87:   void createTimerForContinue() {",
          "88:     delay_timer_ = decoder_callbacks_->dispatcher().createTimer([this]() -> void {",
          "92:       if ((content_size_ > 0 &&",
          "93:            decoder_callbacks_->streamInfo().bytesReceived() >= content_size_) ||",
          "94:           (watermark_enabled_ && buffer_limit_ > 0 &&",
          "95:            decoder_callbacks_->streamInfo().bytesReceived() >= buffer_limit_)) {",
          "96:         timer_triggered_ = true;",
          "97:         decoder_callbacks_->continueDecoding();",
          "98:       } else {",
          "100:         createTimerForContinue();",
          "101:       }",
          "102:     });",
          "103:     delay_timer_->enableTimer(std::chrono::milliseconds(500));",
          "104:   }",
          "106:   Event::TimerPtr delay_timer_;",
          "107:   bool timer_triggered_ = false;",
          "108:   size_t content_size_ = 0;",
          "109:   size_t added_size_ = 0;",
          "110:   size_t buffer_limit_ = 0;",
          "111:   bool watermark_enabled_ = false;",
          "112:   bool is_first_trigger_ = false;",
          "113: };",
          "115: constexpr char DecodeHeadersReturnStopAllFilter::name[];",
          "116: static Registry::RegisterFactory<SimpleFilterConfig<DecodeHeadersReturnStopAllFilter>,",
          "117:                                  Server::Configuration::NamedHttpFilterConfigFactory>",
          "118:     register_;",
          "120: } // namespace Envoy",
          "",
          "---------------"
        ],
        "test/integration/filters/encode_headers_return_stop_all_filter.cc||test/integration/filters/encode_headers_return_stop_all_filter.cc": [
          "File: test/integration/filters/encode_headers_return_stop_all_filter.cc -> test/integration/filters/encode_headers_return_stop_all_filter.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <chrono>",
          "2: #include <string>",
          "4: #include \"envoy/event/timer.h\"",
          "5: #include \"envoy/http/filter.h\"",
          "6: #include \"envoy/registry/registry.h\"",
          "7: #include \"envoy/server/filter_config.h\"",
          "9: #include \"common/buffer/buffer_impl.h\"",
          "11: #include \"extensions/filters/http/common/empty_http_filter_config.h\"",
          "12: #include \"extensions/filters/http/common/pass_through_filter.h\"",
          "14: #include \"test/integration/filters/common.h\"",
          "16: #include \"gtest/gtest.h\"",
          "18: namespace Envoy {",
          "22: class EncodeHeadersReturnStopAllFilter : public Http::PassThroughFilter {",
          "23: public:",
          "24:   constexpr static char name[] = \"encode-headers-return-stop-all-filter\";",
          "29:   Http::FilterHeadersStatus encodeHeaders(Http::HeaderMap& header_map, bool) override {",
          "30:     Http::HeaderEntry* entry_content = header_map.get(Envoy::Http::LowerCaseString(\"content_size\"));",
          "31:     Http::HeaderEntry* entry_added = header_map.get(Envoy::Http::LowerCaseString(\"added_size\"));",
          "32:     ASSERT(entry_content != nullptr && entry_added != nullptr);",
          "33:     content_size_ = std::stoul(std::string(entry_content->value().getStringView()));",
          "34:     added_size_ = std::stoul(std::string(entry_added->value().getStringView()));",
          "36:     createTimerForContinue();",
          "38:     Http::HeaderEntry* entry_buffer = header_map.get(Envoy::Http::LowerCaseString(\"buffer_limit\"));",
          "39:     if (entry_buffer == nullptr) {",
          "40:       return Http::FilterHeadersStatus::StopAllIterationAndBuffer;",
          "41:     } else {",
          "42:       watermark_enabled_ = true;",
          "43:       encoder_callbacks_->setEncoderBufferLimit(",
          "44:           std::stoul(std::string(entry_buffer->value().getStringView())));",
          "45:       return Http::FilterHeadersStatus::StopAllIterationAndWatermark;",
          "46:     }",
          "47:   }",
          "49:   Http::FilterDataStatus encodeData(Buffer::Instance& data, bool) override {",
          "50:     ASSERT(timer_triggered_);",
          "51:     if (watermark_enabled_) {",
          "54:       EXPECT_LT(data.length(), content_size_);",
          "55:     } else {",
          "57:       EXPECT_EQ(data.length(), content_size_);",
          "58:     }",
          "59:     Buffer::OwnedImpl added_data(std::string(added_size_, 'a'));",
          "60:     encoder_callbacks_->addEncodedData(added_data, false);",
          "61:     return Http::FilterDataStatus::Continue;",
          "62:   }",
          "64:   Http::FilterTrailersStatus encodeTrailers(Http::HeaderMap&) override {",
          "65:     ASSERT(timer_triggered_);",
          "66:     Buffer::OwnedImpl data(std::string(added_size_, 'a'));",
          "67:     encoder_callbacks_->addEncodedData(data, false);",
          "68:     return Http::FilterTrailersStatus::Continue;",
          "69:   }",
          "71: private:",
          "73:   void createTimerForContinue() {",
          "74:     delay_timer_ = encoder_callbacks_->dispatcher().createTimer([this]() -> void {",
          "75:       timer_triggered_ = true;",
          "76:       encoder_callbacks_->continueEncoding();",
          "77:     });",
          "78:     delay_timer_->enableTimer(std::chrono::seconds(5));",
          "79:   }",
          "81:   Event::TimerPtr delay_timer_;",
          "82:   bool timer_triggered_ = false;",
          "83:   size_t added_size_ = 0;",
          "84:   size_t content_size_ = 0;",
          "85:   bool watermark_enabled_ = false;",
          "86: };",
          "88: constexpr char EncodeHeadersReturnStopAllFilter::name[];",
          "89: static Registry::RegisterFactory<SimpleFilterConfig<EncodeHeadersReturnStopAllFilter>,",
          "90:                                  Server::Configuration::NamedHttpFilterConfigFactory>",
          "91:     register_;",
          "93: } // namespace Envoy",
          "",
          "---------------"
        ],
        "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
          "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "56: typedef HttpProtocolIntegrationTest DownstreamProtocolIntegrationTest;",
          "",
          "[Added Lines]",
          "56: class DownstreamProtocolIntegrationTest : public HttpProtocolIntegrationTest {",
          "57: protected:",
          "58:   void changeHeadersForStopAllTests(Http::TestHeaderMapImpl& headers, bool set_buffer_limit) {",
          "59:     headers.addCopy(\"content_size\", std::to_string(count_ * size_));",
          "60:     headers.addCopy(\"added_size\", std::to_string(added_decoded_data_size_));",
          "61:     headers.addCopy(\"is_first_trigger\", \"value\");",
          "62:     if (set_buffer_limit) {",
          "63:       headers.addCopy(\"buffer_limit\", std::to_string(buffer_limit_));",
          "64:     }",
          "65:   }",
          "67:   void verifyUpStreamRequestAfterStopAllFilter() {",
          "68:     if (downstreamProtocol() == Http::CodecClient::Type::HTTP2) {",
          "71:       EXPECT_EQ(count_ * size_ + added_decoded_data_size_ * 2, upstream_request_->bodyLength());",
          "72:     } else {",
          "73:       EXPECT_EQ(count_ * size_ + added_decoded_data_size_ * 1, upstream_request_->bodyLength());",
          "74:     }",
          "75:     EXPECT_EQ(true, upstream_request_->complete());",
          "76:   }",
          "78:   const int count_ = 70;",
          "79:   const int size_ = 1000;",
          "80:   const int added_decoded_data_size_ = 1;",
          "81:   const int buffer_limit_ = 100;",
          "82: };",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "755:   testLargeRequestHeaders(95, 96);",
          "756: }",
          "760: INSTANTIATE_TEST_SUITE_P(Protocols, DownstreamProtocolIntegrationTest,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "786: TEST_P(DownstreamProtocolIntegrationTest, testDecodeHeadersReturnsStopAll) {",
          "787:   config_helper_.addFilter(R\"EOF(",
          "788: name: call-decodedata-once-filter",
          "789: )EOF\");",
          "790:   config_helper_.addFilter(R\"EOF(",
          "791: name: decode-headers-return-stop-all-filter",
          "792: )EOF\");",
          "793:   config_helper_.addFilter(R\"EOF(",
          "794: name: passthrough-filter",
          "795: )EOF\");",
          "797:   initialize();",
          "798:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "801:   changeHeadersForStopAllTests(default_request_headers_, false);",
          "802:   auto encoder_decoder = codec_client_->startRequest(default_request_headers_);",
          "803:   request_encoder_ = &encoder_decoder.first;",
          "804:   auto response = std::move(encoder_decoder.second);",
          "805:   for (int i = 0; i < count_ - 1; i++) {",
          "806:     codec_client_->sendData(*request_encoder_, size_, false);",
          "807:   }",
          "809:   sleep(1);",
          "810:   codec_client_->sendData(*request_encoder_, size_, true);",
          "811:   waitForNextUpstreamRequest();",
          "813:   upstream_request_->encodeHeaders(default_response_headers_, true);",
          "814:   response->waitForEndStream();",
          "815:   ASSERT_TRUE(response->complete());",
          "816:   EXPECT_EQ(count_ * size_ + added_decoded_data_size_, upstream_request_->bodyLength());",
          "817:   EXPECT_EQ(true, upstream_request_->complete());",
          "820:   auto encoder_decoder_2 = codec_client_->startRequest(default_request_headers_);",
          "821:   request_encoder_ = &encoder_decoder_2.first;",
          "822:   response = std::move(encoder_decoder_2.second);",
          "823:   for (int i = 0; i < count_; i++) {",
          "824:     codec_client_->sendData(*request_encoder_, size_, false);",
          "825:   }",
          "826:   Http::TestHeaderMapImpl request_trailers{{\"trailer\", \"trailer\"}};",
          "827:   codec_client_->sendTrailers(*request_encoder_, request_trailers);",
          "828:   waitForNextUpstreamRequest();",
          "830:   upstream_request_->encodeHeaders(default_response_headers_, true);",
          "831:   response->waitForEndStream();",
          "832:   verifyUpStreamRequestAfterStopAllFilter();",
          "833: }",
          "837: TEST_P(DownstreamProtocolIntegrationTest, testDecodeHeadersReturnsStopAllWatermark) {",
          "838:   config_helper_.addFilter(R\"EOF(",
          "839: name: decode-headers-return-stop-all-filter",
          "840: )EOF\");",
          "841:   config_helper_.addFilter(R\"EOF(",
          "842: name: passthrough-filter",
          "843: )EOF\");",
          "846:   config_helper_.addConfigModifier(",
          "847:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
          "848:           -> void {",
          "849:         hcm.mutable_http2_protocol_options()->mutable_initial_stream_window_size()->set_value(",
          "850:             Http::Http2Settings::MIN_INITIAL_STREAM_WINDOW_SIZE);",
          "851:       });",
          "853:   initialize();",
          "854:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "857:   changeHeadersForStopAllTests(default_request_headers_, true);",
          "858:   auto encoder_decoder = codec_client_->startRequest(default_request_headers_);",
          "859:   request_encoder_ = &encoder_decoder.first;",
          "860:   auto response = std::move(encoder_decoder.second);",
          "861:   for (int i = 0; i < count_ - 1; i++) {",
          "862:     codec_client_->sendData(*request_encoder_, size_, false);",
          "863:   }",
          "865:   sleep(1);",
          "866:   codec_client_->sendData(*request_encoder_, size_, true);",
          "867:   waitForNextUpstreamRequest();",
          "869:   upstream_request_->encodeHeaders(default_response_headers_, true);",
          "870:   response->waitForEndStream();",
          "871:   ASSERT_TRUE(response->complete());",
          "872:   EXPECT_EQ(count_ * size_ + added_decoded_data_size_, upstream_request_->bodyLength());",
          "873:   EXPECT_EQ(true, upstream_request_->complete());",
          "876:   auto encoder_decoder_2 = codec_client_->startRequest(default_request_headers_);",
          "877:   request_encoder_ = &encoder_decoder_2.first;",
          "878:   response = std::move(encoder_decoder_2.second);",
          "879:   for (int i = 0; i < count_ - 1; i++) {",
          "880:     codec_client_->sendData(*request_encoder_, size_, false);",
          "881:   }",
          "883:   sleep(1);",
          "884:   codec_client_->sendData(*request_encoder_, size_, false);",
          "885:   Http::TestHeaderMapImpl request_trailers{{\"trailer\", \"trailer\"}};",
          "886:   codec_client_->sendTrailers(*request_encoder_, request_trailers);",
          "887:   waitForNextUpstreamRequest();",
          "889:   upstream_request_->encodeHeaders(default_response_headers_, true);",
          "890:   response->waitForEndStream();",
          "891:   verifyUpStreamRequestAfterStopAllFilter();",
          "892: }",
          "895: TEST_P(DownstreamProtocolIntegrationTest, testTwoFiltersDecodeHeadersReturnsStopAll) {",
          "896:   config_helper_.addFilter(R\"EOF(",
          "897: name: decode-headers-return-stop-all-filter",
          "898: )EOF\");",
          "899:   config_helper_.addFilter(R\"EOF(",
          "900: name: decode-headers-return-stop-all-filter",
          "901: )EOF\");",
          "902:   config_helper_.addFilter(R\"EOF(",
          "903: name: passthrough-filter",
          "904: )EOF\");",
          "906:   initialize();",
          "907:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "910:   changeHeadersForStopAllTests(default_request_headers_, false);",
          "911:   auto encoder_decoder = codec_client_->startRequest(default_request_headers_);",
          "912:   request_encoder_ = &encoder_decoder.first;",
          "913:   auto response = std::move(encoder_decoder.second);",
          "914:   for (int i = 0; i < count_ - 1; i++) {",
          "915:     codec_client_->sendData(*request_encoder_, size_, false);",
          "916:   }",
          "917:   codec_client_->sendData(*request_encoder_, size_, true);",
          "918:   waitForNextUpstreamRequest();",
          "920:   upstream_request_->encodeHeaders(default_response_headers_, true);",
          "921:   response->waitForEndStream();",
          "922:   ASSERT_TRUE(response->complete());",
          "923:   EXPECT_EQ(count_ * size_ + added_decoded_data_size_, upstream_request_->bodyLength());",
          "924:   EXPECT_EQ(true, upstream_request_->complete());",
          "927:   auto encoder_decoder_2 = codec_client_->startRequest(default_request_headers_);",
          "928:   request_encoder_ = &encoder_decoder_2.first;",
          "929:   response = std::move(encoder_decoder_2.second);",
          "930:   for (int i = 0; i < count_; i++) {",
          "931:     codec_client_->sendData(*request_encoder_, size_, false);",
          "932:   }",
          "933:   Http::TestHeaderMapImpl request_trailers{{\"trailer\", \"trailer\"}};",
          "934:   codec_client_->sendTrailers(*request_encoder_, request_trailers);",
          "935:   waitForNextUpstreamRequest();",
          "937:   upstream_request_->encodeHeaders(default_response_headers_, true);",
          "938:   response->waitForEndStream();",
          "939:   verifyUpStreamRequestAfterStopAllFilter();",
          "940: }",
          "943: TEST_P(DownstreamProtocolIntegrationTest, testEncodeHeadersReturnsStopAll) {",
          "944:   config_helper_.addFilter(R\"EOF(",
          "945: name: encode-headers-return-stop-all-filter",
          "946: )EOF\");",
          "948:   initialize();",
          "949:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "952:   auto response = codec_client_->makeRequestWithBody(default_request_headers_, 10);",
          "953:   waitForNextUpstreamRequest();",
          "955:   changeHeadersForStopAllTests(default_response_headers_, false);",
          "956:   upstream_request_->encodeHeaders(default_response_headers_, false);",
          "957:   for (int i = 0; i < count_ - 1; i++) {",
          "958:     upstream_request_->encodeData(size_, false);",
          "959:   }",
          "961:   sleep(1);",
          "962:   upstream_request_->encodeData(size_, false);",
          "963:   Http::TestHeaderMapImpl response_trailers{{\"response\", \"trailer\"}};",
          "964:   upstream_request_->encodeTrailers(response_trailers);",
          "966:   response->waitForEndStream();",
          "967:   ASSERT_TRUE(response->complete());",
          "968:   EXPECT_EQ(count_ * size_ + added_decoded_data_size_, response->body().size());",
          "969: }",
          "972: TEST_P(DownstreamProtocolIntegrationTest, testEncodeHeadersReturnsStopAllWatermark) {",
          "973:   config_helper_.addFilter(R\"EOF(",
          "974: name: encode-headers-return-stop-all-filter",
          "975: )EOF\");",
          "978:   config_helper_.addConfigModifier(",
          "979:       [&](envoy::config::filter::network::http_connection_manager::v2::HttpConnectionManager& hcm)",
          "980:           -> void {",
          "981:         hcm.mutable_http2_protocol_options()->mutable_initial_stream_window_size()->set_value(",
          "982:             Http::Http2Settings::MIN_INITIAL_STREAM_WINDOW_SIZE);",
          "983:       });",
          "985:   initialize();",
          "986:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "989:   auto response = codec_client_->makeRequestWithBody(default_request_headers_, 10);",
          "990:   waitForNextUpstreamRequest();",
          "992:   changeHeadersForStopAllTests(default_response_headers_, true);",
          "993:   upstream_request_->encodeHeaders(default_response_headers_, false);",
          "994:   for (int i = 0; i < count_ - 1; i++) {",
          "995:     upstream_request_->encodeData(size_, false);",
          "996:   }",
          "998:   sleep(1);",
          "999:   upstream_request_->encodeData(size_, false);",
          "1000:   Http::TestHeaderMapImpl response_trailers{{\"response\", \"trailer\"}};",
          "1001:   upstream_request_->encodeTrailers(response_trailers);",
          "1003:   response->waitForEndStream();",
          "1004:   ASSERT_TRUE(response->complete());",
          "1005:   EXPECT_EQ(count_ * size_ + added_decoded_data_size_, response->body().size());",
          "1006: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5dde5d97b90aa6f6cbe7a8dc3ac13a650fa6cbf7",
      "candidate_info": {
        "commit_hash": "5dde5d97b90aa6f6cbe7a8dc3ac13a650fa6cbf7",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/5dde5d97b90aa6f6cbe7a8dc3ac13a650fa6cbf7",
        "files": [
          "include/envoy/http/header_map.h",
          "source/common/http/header_map_impl.cc",
          "source/common/http/header_map_impl.h",
          "test/common/http/header_map_impl_test.cc",
          "test/test_common/utility.h"
        ],
        "message": "headers: Return number of header removals (#10295)\n\nSigned-off-by: Lisa Lu <lisalu@lyft.com>",
        "before_after_code_files": [
          "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
          "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
          "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
          "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc",
          "test/test_common/utility.h||test/test_common/utility.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
            "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
            "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
            "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc"
          ],
          "candidate": [
            "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
            "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
            "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
            "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "include/envoy/http/header_map.h||include/envoy/http/header_map.h": [
          "File: include/envoy/http/header_map.h -> include/envoy/http/header_map.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "381:   virtual void setReference##name(absl::string_view value) PURE;                                   \\",
          "382:   virtual void set##name(absl::string_view value) PURE;                                            \\",
          "383:   virtual void set##name(uint64_t value) PURE;                                                     \\",
          "",
          "[Removed Lines]",
          "384:   virtual void remove##name() PURE;",
          "",
          "[Added Lines]",
          "384:   virtual size_t remove##name() PURE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "587:   virtual void remove(const LowerCaseString& key) PURE;",
          "593:   virtual void removePrefix(const LowerCaseString& prefix) PURE;",
          "",
          "[Added Lines]",
          "588:   virtual size_t remove(const LowerCaseString& key) PURE;",
          "595:   virtual size_t removePrefix(const LowerCaseString& prefix) PURE;",
          "",
          "---------------"
        ],
        "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc": [
          "File: source/common/http/header_map_impl.cc -> source/common/http/header_map_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "501:   cached_byte_size_ = 0;",
          "502: }",
          "505:   auto lookup = staticLookup(key.get());",
          "506:   if (lookup.has_value()) {",
          "507:     removeInline(lookup.value().entry_);",
          "",
          "[Removed Lines]",
          "504: void HeaderMapImpl::remove(const LowerCaseString& key) {",
          "",
          "[Added Lines]",
          "504: size_t HeaderMapImpl::remove(const LowerCaseString& key) {",
          "505:   const size_t old_size = headers_.size();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "515:       }",
          "516:     }",
          "517:   }",
          "518: }",
          "521:   headers_.remove_if([&prefix, this](const HeaderEntryImpl& entry) {",
          "522:     bool to_remove = absl::StartsWith(entry.key().getStringView(), prefix.get());",
          "523:     if (to_remove) {",
          "",
          "[Removed Lines]",
          "520: void HeaderMapImpl::removePrefix(const LowerCaseString& prefix) {",
          "",
          "[Added Lines]",
          "519:   return old_size - headers_.size();",
          "522: size_t HeaderMapImpl::removePrefix(const LowerCaseString& prefix) {",
          "523:   const size_t old_size = headers_.size();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "537:     }",
          "538:     return to_remove;",
          "539:   });",
          "540: }",
          "542: void HeaderMapImpl::dumpState(std::ostream& os, int indent_level) const {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "543:   return old_size - headers_.size();",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "589:   return nullptr;",
          "590: }",
          "593:   if (!*ptr_to_entry) {",
          "595:   }",
          "597:   HeaderEntryImpl* entry = *ptr_to_entry;",
          "",
          "[Removed Lines]",
          "592: void HeaderMapImpl::removeInline(HeaderEntryImpl** ptr_to_entry) {",
          "594:     return;",
          "",
          "[Added Lines]",
          "596: size_t HeaderMapImpl::removeInline(HeaderEntryImpl** ptr_to_entry) {",
          "598:     return 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "599:   subtractSize(size_to_subtract);",
          "601:   headers_.erase(entry->entry_);",
          "602: }",
          "604: } // namespace Http",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "606:   return 1;",
          "",
          "---------------"
        ],
        "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h": [
          "File: source/common/http/header_map_impl.h -> source/common/http/header_map_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     entry.value().setInteger(value);                                                               \\",
          "43:     addSize(inline_headers_.name##_->value().size());                                              \\",
          "44:   }                                                                                                \\",
          "47: #define DEFINE_INLINE_HEADER_STRUCT(name) HeaderEntryImpl* name##_;",
          "",
          "[Removed Lines]",
          "45:   void remove##name() override { removeInline(&inline_headers_.name##_); }",
          "",
          "[Added Lines]",
          "45:   size_t remove##name() override { return removeInline(&inline_headers_.name##_); }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:   void iterateReverse(ConstIterateCb cb, void* context) const override;",
          "87:   Lookup lookup(const LowerCaseString& key, const HeaderEntry** entry) const override;",
          "88:   void clear() override;",
          "91:   size_t size() const override { return headers_.size(); }",
          "92:   bool empty() const override { return headers_.empty(); }",
          "93:   void dumpState(std::ostream& os, int indent_level = 0) const override;",
          "",
          "[Removed Lines]",
          "89:   void remove(const LowerCaseString& key) override;",
          "90:   void removePrefix(const LowerCaseString& key) override;",
          "",
          "[Added Lines]",
          "89:   size_t remove(const LowerCaseString& key) override;",
          "90:   size_t removePrefix(const LowerCaseString& key) override;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "215:                                      HeaderString&& value);",
          "216:   HeaderEntry* getExisting(const LowerCaseString& key);",
          "217:   HeaderEntryImpl* getExistingInline(absl::string_view key);",
          "219:   void updateSize(uint64_t from_size, uint64_t to_size);",
          "220:   void addSize(uint64_t size);",
          "221:   void subtractSize(uint64_t size);",
          "",
          "[Removed Lines]",
          "218:   void removeInline(HeaderEntryImpl** entry);",
          "",
          "[Added Lines]",
          "218:   size_t removeInline(HeaderEntryImpl** entry);",
          "",
          "---------------"
        ],
        "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc": [
          "File: test/common/http/header_map_impl_test.cc -> test/common/http/header_map_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "456:   EXPECT_TRUE(headers.get(static_key)->value().isReference());",
          "457:   EXPECT_EQ(1UL, headers.size());",
          "458:   EXPECT_FALSE(headers.empty());",
          "460:   EXPECT_EQ(nullptr, headers.get(static_key));",
          "461:   EXPECT_EQ(0UL, headers.size());",
          "462:   EXPECT_TRUE(headers.empty());",
          "465:   headers.setContentLength(5);",
          "466:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
          "467:   EXPECT_EQ(1UL, headers.size());",
          "468:   EXPECT_FALSE(headers.empty());",
          "470:   EXPECT_EQ(nullptr, headers.ContentLength());",
          "471:   EXPECT_EQ(0UL, headers.size());",
          "472:   EXPECT_TRUE(headers.empty());",
          "",
          "[Removed Lines]",
          "459:   headers.remove(static_key);",
          "469:   headers.removeContentLength();",
          "",
          "[Added Lines]",
          "459:   EXPECT_EQ(1UL, headers.remove(static_key));",
          "465:   EXPECT_EQ(0UL, headers.removeContentLength());",
          "470:   EXPECT_EQ(1UL, headers.removeContentLength());",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "476:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
          "477:   EXPECT_EQ(1UL, headers.size());",
          "478:   EXPECT_FALSE(headers.empty());",
          "480:   EXPECT_EQ(nullptr, headers.ContentLength());",
          "481:   EXPECT_EQ(0UL, headers.size());",
          "482:   EXPECT_TRUE(headers.empty());",
          "483: }",
          "485: TEST(HeaderMapImplTest, RemoveRegex) {",
          "",
          "[Removed Lines]",
          "479:   headers.remove(Headers::get().ContentLength);",
          "",
          "[Added Lines]",
          "480:   EXPECT_EQ(1UL, headers.remove(Headers::get().ContentLength));",
          "486:   EXPECT_EQ(0UL, headers.remove(static_key));",
          "487:   EXPECT_EQ(0UL, headers.remove(Headers::get().ContentLength));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "499:   headers.addReference(key5, \"value\");",
          "503:   EXPECT_EQ(nullptr, headers.get(key1));",
          "504:   EXPECT_NE(nullptr, headers.get(key2));",
          "505:   EXPECT_EQ(nullptr, headers.get(key3));",
          "506:   EXPECT_NE(nullptr, headers.get(key4));",
          "507:   EXPECT_EQ(nullptr, headers.get(key5));",
          "511:   EXPECT_EQ(nullptr, headers.get(key2));",
          "512:   EXPECT_EQ(nullptr, headers.get(key4));",
          "",
          "[Removed Lines]",
          "502:   headers.removePrefix(LowerCaseString(\"x-prefix-\"));",
          "510:   headers.removePrefix(LowerCaseString(\"\"));",
          "",
          "[Added Lines]",
          "507:   EXPECT_EQ(3UL, headers.removePrefix(LowerCaseString(\"x-prefix-\")));",
          "515:   EXPECT_EQ(0UL, headers.removePrefix(LowerCaseString(\"foo\")));",
          "518:   EXPECT_EQ(2UL, headers.removePrefix(LowerCaseString(\"\")));",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "516:   EXPECT_EQ(\"5\", headers.ContentLength()->value().getStringView());",
          "517:   EXPECT_EQ(1UL, headers.size());",
          "518:   EXPECT_FALSE(headers.empty());",
          "520:   EXPECT_EQ(nullptr, headers.ContentLength());",
          "521: }",
          "",
          "[Removed Lines]",
          "519:   headers.removePrefix(LowerCaseString(\"content\"));",
          "",
          "[Added Lines]",
          "527:   EXPECT_EQ(1UL, headers.removePrefix(LowerCaseString(\"content\")));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "688:       &cb);",
          "692:   EXPECT_EQ(headers.size(), 0);",
          "693:   const std::string empty;",
          "694:   headers.setCopy(foo, empty);",
          "",
          "[Removed Lines]",
          "691:   headers.remove(foo);",
          "",
          "[Added Lines]",
          "699:   EXPECT_EQ(2UL, headers.remove(foo));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "737:   EXPECT_EQ(headers.byteSize(), 0);",
          "",
          "[Removed Lines]",
          "736:   headers.remove(LowerCaseString(\"hello\"));",
          "",
          "[Added Lines]",
          "744:   EXPECT_EQ(1UL, headers.remove(LowerCaseString(\"hello\")));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1000:         &cb);",
          "1004:     EXPECT_EQ(2UL, headers.size());",
          "1005:     EXPECT_FALSE(headers.empty());",
          "",
          "[Removed Lines]",
          "1003:     headers.remove(foo);",
          "",
          "[Added Lines]",
          "1011:     EXPECT_EQ(1UL, headers.remove(foo));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1033:         &cb);",
          "1037:     EXPECT_EQ(2UL, headers.size());",
          "1038:     EXPECT_FALSE(headers.empty());",
          "",
          "[Removed Lines]",
          "1036:     headers.remove(Headers::get().ContentType);",
          "",
          "[Added Lines]",
          "1044:     EXPECT_EQ(1UL, headers.remove(Headers::get().ContentType));",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1084:         &cb);",
          "1090:     EXPECT_EQ(1UL, headers.size());",
          "1091:     EXPECT_FALSE(headers.empty());",
          "",
          "[Removed Lines]",
          "1087:     headers.remove(Headers::get().Path);",
          "1088:     headers.remove(Headers::get().Method);",
          "1089:     headers.remove(Headers::get().Host);",
          "",
          "[Added Lines]",
          "1095:     EXPECT_EQ(1UL, headers.remove(Headers::get().Path));",
          "1096:     EXPECT_EQ(1UL, headers.remove(Headers::get().Method));",
          "1097:     EXPECT_EQ(1UL, headers.remove(Headers::get().Host));",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1101:         &cb);",
          "1105:     EXPECT_EQ(0UL, headers.size());",
          "1106:     EXPECT_TRUE(headers.empty());",
          "",
          "[Removed Lines]",
          "1104:     headers.remove(Headers::get().ContentType);",
          "",
          "[Added Lines]",
          "1112:     EXPECT_EQ(1UL, headers.remove(Headers::get().ContentType));",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1275:     TestRequestHeaderMapImpl headers;",
          "1276:     std::string foo = \"foo\";",
          "1277:     headers.setHost(foo);",
          "1278:     std::string big_foo = \"big_foo\";",
          "1279:     headers.setReferenceHost(big_foo);",
          "1280:     EXPECT_EQ(headers.byteSize(), 17);",
          "1282:     EXPECT_EQ(headers.byteSize(), 0);",
          "1283:   }",
          "1284:   {",
          "",
          "[Removed Lines]",
          "1281:     headers.removeHost();",
          "",
          "[Added Lines]",
          "1286:     EXPECT_EQ(headers.byteSize(), 13);",
          "1290:     EXPECT_EQ(1UL, headers.removeHost());",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1290:     uint64_t newStatus = 500;",
          "1291:     headers.setStatus(newStatus);",
          "1292:     EXPECT_EQ(headers.byteSize(), 10);",
          "1294:     EXPECT_EQ(headers.byteSize(), 0);",
          "1295:   }",
          "1296:   {",
          "",
          "[Removed Lines]",
          "1293:     headers.removeStatus();",
          "",
          "[Added Lines]",
          "1302:     EXPECT_EQ(1UL, headers.removeStatus());",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1299:     uint64_t status = 200;",
          "1300:     headers.setStatus(status);",
          "1301:     EXPECT_EQ(headers.byteSize(), 10);",
          "1303:     EXPECT_EQ(headers.byteSize(), 0);",
          "1304:     uint64_t newStatus = 500;",
          "1305:     headers.setStatus(newStatus);",
          "",
          "[Removed Lines]",
          "1302:     headers.removeStatus();",
          "",
          "[Added Lines]",
          "1311:     EXPECT_EQ(1UL, headers.removeStatus());",
          "",
          "---------------"
        ],
        "test/test_common/utility.h||test/test_common/utility.h": [
          "File: test/test_common/utility.h -> test/test_common/utility.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "642:     header_map_.set##name(value);                                                                  \\",
          "643:     header_map_.verifyByteSizeInternalForTest();                                                   \\",
          "644:   }                                                                                                \\",
          "647:     header_map_.verifyByteSizeInternalForTest();                                                   \\",
          "648:   }",
          "",
          "[Removed Lines]",
          "645:   void remove##name() override {                                                                   \\",
          "646:     header_map_.remove##name();                                                                    \\",
          "",
          "[Added Lines]",
          "645:   size_t remove##name() override {                                                                 \\",
          "646:     size_t headers_removed = header_map_.remove##name();                                           \\",
          "648:     return headers_removed;                                                                        \\",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "694:   }",
          "695:   bool has(const std::string& key) const { return get(LowerCaseString(key)) != nullptr; }",
          "696:   bool has(const LowerCaseString& key) const { return get(key) != nullptr; }",
          "700:   bool operator==(const HeaderMap& rhs) const override { return header_map_.operator==(rhs); }",
          "",
          "[Removed Lines]",
          "697:   void remove(const std::string& key) { remove(LowerCaseString(key)); }",
          "",
          "[Added Lines]",
          "698:   size_t remove(const std::string& key) { return remove(LowerCaseString(key)); }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "753:     header_map_.clear();",
          "754:     header_map_.verifyByteSizeInternalForTest();",
          "755:   }",
          "758:     header_map_.verifyByteSizeInternalForTest();",
          "759:   }",
          "762:     header_map_.verifyByteSizeInternalForTest();",
          "763:   }",
          "764:   size_t size() const override { return header_map_.size(); }",
          "765:   bool empty() const override { return header_map_.empty(); }",
          "",
          "[Removed Lines]",
          "756:   void remove(const LowerCaseString& key) override {",
          "757:     header_map_.remove(key);",
          "760:   void removePrefix(const LowerCaseString& key) override {",
          "761:     header_map_.removePrefix(key);",
          "",
          "[Added Lines]",
          "757:   size_t remove(const LowerCaseString& key) override {",
          "758:     size_t headers_removed = header_map_.remove(key);",
          "760:     return headers_removed;",
          "762:   size_t removePrefix(const LowerCaseString& key) override {",
          "763:     size_t headers_removed = header_map_.removePrefix(key);",
          "765:     return headers_removed;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "10fed474642a90760b2a73f866087ef12d67e542",
      "candidate_info": {
        "commit_hash": "10fed474642a90760b2a73f866087ef12d67e542",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/10fed474642a90760b2a73f866087ef12d67e542",
        "files": [
          "include/envoy/http/header_map.h",
          "source/common/http/header_map_impl.cc",
          "source/common/http/header_map_impl.h",
          "test/common/http/header_map_impl_test.cc",
          "test/test_common/utility.h"
        ],
        "message": "http: add removeIf() header map function (#12160)\n\nTo be used by out of tree extensions.\n\nSigned-off-by: Matt Klein <mklein@lyft.com>",
        "before_after_code_files": [
          "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
          "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
          "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
          "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc",
          "test/test_common/utility.h||test/test_common/utility.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
            "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
            "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
            "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc"
          ],
          "candidate": [
            "include/envoy/http/header_map.h||include/envoy/http/header_map.h",
            "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc",
            "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h",
            "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "include/envoy/http/header_map.h||include/envoy/http/header_map.h": [
          "File: include/envoy/http/header_map.h -> include/envoy/http/header_map.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "548:   virtual size_t remove(const LowerCaseString& key) PURE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "555:   using HeaderMatchPredicate = std::function<bool(const HeaderEntry&)>;",
          "556:   virtual size_t removeIf(const HeaderMatchPredicate& predicate) PURE;",
          "",
          "---------------"
        ],
        "source/common/http/header_map_impl.cc||source/common/http/header_map_impl.cc": [
          "File: source/common/http/header_map_impl.cc -> source/common/http/header_map_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "483:   cached_byte_size_ = 0;",
          "484: }",
          "487:   const size_t old_size = headers_.size();",
          "508:     if (to_remove) {",
          "",
          "[Removed Lines]",
          "486: size_t HeaderMapImpl::remove(const LowerCaseString& key) {",
          "488:   auto lookup = staticLookup(key.get());",
          "489:   if (lookup.has_value()) {",
          "490:     removeInline(lookup.value().entry_);",
          "491:   } else {",
          "492:     for (auto i = headers_.begin(); i != headers_.end();) {",
          "493:       if (i->key() == key.get().c_str()) {",
          "494:         subtractSize(i->key().size() + i->value().size());",
          "495:         i = headers_.erase(i);",
          "496:       } else {",
          "497:         ++i;",
          "498:       }",
          "499:     }",
          "500:   }",
          "501:   return old_size - headers_.size();",
          "502: }",
          "504: size_t HeaderMapImpl::removePrefix(const LowerCaseString& prefix) {",
          "505:   const size_t old_size = headers_.size();",
          "506:   headers_.remove_if([&prefix, this](const HeaderEntryImpl& entry) {",
          "507:     bool to_remove = absl::StartsWith(entry.key().getStringView(), prefix.get());",
          "",
          "[Added Lines]",
          "486: size_t HeaderMapImpl::removeIf(const HeaderMap::HeaderMatchPredicate& predicate) {",
          "488:   headers_.remove_if([&predicate, this](const HeaderEntryImpl& entry) {",
          "489:     const bool to_remove = predicate(entry);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "525:   return old_size - headers_.size();",
          "526: }",
          "528: void HeaderMapImpl::dumpState(std::ostream& os, int indent_level) const {",
          "529:   iterate([&os,",
          "530:            spaces = spacesForLevel(indent_level)](const HeaderEntry& header) -> HeaderMap::Iterate {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "510: size_t HeaderMapImpl::remove(const LowerCaseString& key) {",
          "512:   return HeaderMapImpl::removeIf([&key](const HeaderEntry& entry) -> bool {",
          "513:     return key.get() == entry.key().getStringView();",
          "514:   });",
          "515: }",
          "517: size_t HeaderMapImpl::removePrefix(const LowerCaseString& prefix) {",
          "518:   return HeaderMapImpl::removeIf([&prefix](const HeaderEntry& entry) -> bool {",
          "519:     return absl::StartsWith(entry.key().getStringView(), prefix.get());",
          "520:   });",
          "521: }",
          "",
          "---------------"
        ],
        "source/common/http/header_map_impl.h||source/common/http/header_map_impl.h": [
          "File: source/common/http/header_map_impl.h -> source/common/http/header_map_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "90:   void iterateReverse(HeaderMap::ConstIterateCb cb) const;",
          "91:   void clear();",
          "92:   size_t remove(const LowerCaseString& key);",
          "93:   size_t removePrefix(const LowerCaseString& key);",
          "94:   size_t size() const { return headers_.size(); }",
          "95:   bool empty() const { return headers_.empty(); }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "93:   size_t removeIf(const HeaderMap::HeaderMatchPredicate& predicate);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "304:   }",
          "305:   void clear() override { HeaderMapImpl::clear(); }",
          "306:   size_t remove(const LowerCaseString& key) override { return HeaderMapImpl::remove(key); }",
          "307:   size_t removePrefix(const LowerCaseString& key) override {",
          "308:     return HeaderMapImpl::removePrefix(key);",
          "309:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "308:   size_t removeIf(const HeaderMap::HeaderMatchPredicate& predicate) override {",
          "309:     return HeaderMapImpl::removeIf(predicate);",
          "310:   }",
          "",
          "---------------"
        ],
        "test/common/http/header_map_impl_test.cc||test/common/http/header_map_impl_test.cc": [
          "File: test/common/http/header_map_impl_test.cc -> test/common/http/header_map_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "520:   EXPECT_EQ(0UL, headers.remove(Headers::get().ContentLength));",
          "521: }",
          "525:   LowerCaseString key1 = LowerCaseString(\"X-prefix-foo\");",
          "526:   LowerCaseString key3 = LowerCaseString(\"X-Prefix-\");",
          "",
          "[Removed Lines]",
          "523: TEST(HeaderMapImplTest, RemoveRegex) {",
          "",
          "[Added Lines]",
          "523: TEST(HeaderMapImplTest, RemoveIf) {",
          "524:   LowerCaseString key1 = LowerCaseString(\"X-postfix-foo\");",
          "525:   LowerCaseString key2 = LowerCaseString(\"X-postfix-\");",
          "526:   LowerCaseString key3 = LowerCaseString(\"x-postfix-eep\");",
          "528:   TestRequestHeaderMapImpl headers;",
          "529:   headers.addReference(key1, \"value\");",
          "530:   headers.addReference(key2, \"value\");",
          "531:   headers.addReference(key3, \"value\");",
          "533:   EXPECT_EQ(0UL, headers.removeIf([](const HeaderEntry&) -> bool { return false; }));",
          "535:   EXPECT_EQ(2UL, headers.removeIf([](const HeaderEntry& entry) -> bool {",
          "536:     return absl::EndsWith(entry.key().getStringView(), \"foo\") ||",
          "537:            absl::EndsWith(entry.key().getStringView(), \"eep\");",
          "538:   }));",
          "540:   TestRequestHeaderMapImpl expected{{\"X-postfix-\", \"value\"}};",
          "541:   EXPECT_EQ(expected, headers);",
          "542: }",
          "544: TEST(HeaderMapImplTest, RemovePrefix) {",
          "",
          "---------------"
        ],
        "test/test_common/utility.h||test/test_common/utility.h": [
          "File: test/test_common/utility.h -> test/test_common/utility.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "920:     header_map_->verifyByteSizeInternalForTest();",
          "921:     return headers_removed;",
          "922:   }",
          "923:   size_t removePrefix(const LowerCaseString& key) override {",
          "924:     size_t headers_removed = header_map_->removePrefix(key);",
          "925:     header_map_->verifyByteSizeInternalForTest();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "923:   size_t removeIf(const HeaderMap::HeaderMatchPredicate& predicate) override {",
          "924:     size_t headers_removed = header_map_->removeIf(predicate);",
          "925:     header_map_->verifyByteSizeInternalForTest();",
          "926:     return headers_removed;",
          "927:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7ca28ff7d46454ae930e193d97b7d08156b1ba59",
      "candidate_info": {
        "commit_hash": "7ca28ff7d46454ae930e193d97b7d08156b1ba59",
        "repo": "envoyproxy/envoy",
        "commit_url": "https://github.com/envoyproxy/envoy/commit/7ca28ff7d46454ae930e193d97b7d08156b1ba59",
        "files": [
          "source/common/http/http1/codec_impl.cc",
          "source/common/http/http1/codec_impl.h",
          "test/common/http/http1/codec_impl_test.cc",
          "test/integration/http_integration.cc",
          "test/integration/http_integration.h",
          "test/integration/protocol_integration_test.cc"
        ],
        "message": "[http1] Include request URL in request header size computation, and reject partial headers that exceed configured limits (#145)\n\nSigned-off-by: antonio <avd@google.com>",
        "before_after_code_files": [
          "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
          "source/common/http/http1/codec_impl.h||source/common/http/http1/codec_impl.h",
          "test/common/http/http1/codec_impl_test.cc||test/common/http/http1/codec_impl_test.cc",
          "test/integration/http_integration.cc||test/integration/http_integration.cc",
          "test/integration/http_integration.h||test/integration/http_integration.h",
          "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "test/integration/http_integration.cc||test/integration/http_integration.cc",
            "test/integration/http_integration.h||test/integration/http_integration.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ],
          "candidate": [
            "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc",
            "test/integration/http_integration.cc||test/integration/http_integration.cc",
            "test/integration/http_integration.h||test/integration/http_integration.h",
            "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc"
          ]
        }
      },
      "candidate_diff": {
        "source/common/http/http1/codec_impl.cc||source/common/http/http1/codec_impl.cc": [
          "File: source/common/http/http1/codec_impl.cc -> source/common/http/http1/codec_impl.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "503:   ASSERT(current_header_value_.empty());",
          "504: }",
          "506: bool ConnectionImpl::maybeDirectDispatch(Buffer::Instance& data) {",
          "507:   if (!handling_upgrade_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "506: uint32_t ConnectionImpl::getHeadersSize() {",
          "507:   return current_header_field_.size() + current_header_value_.size() +",
          "508:          headersOrTrailers().byteSize();",
          "509: }",
          "511: void ConnectionImpl::checkMaxHeadersSize() {",
          "512:   const uint32_t total = getHeadersSize();",
          "513:   if (total > (max_headers_kb_ * 1024)) {",
          "514:     const absl::string_view header_type =",
          "515:         processing_trailers_ ? Http1HeaderTypes::get().Trailers : Http1HeaderTypes::get().Headers;",
          "516:     error_code_ = Http::Code::RequestHeaderFieldsTooLarge;",
          "517:     sendProtocolError(Http1ResponseCodeDetails::get().HeadersTooLarge);",
          "518:     throw CodecProtocolException(absl::StrCat(header_type, \" size exceeds limit\"));",
          "519:   }",
          "520: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "581:     }",
          "582:     processing_trailers_ = true;",
          "583:     header_parsing_state_ = HeaderParsingState::Field;",
          "584:   }",
          "585:   if (header_parsing_state_ == HeaderParsingState::Value) {",
          "586:     completeLastHeader();",
          "587:   }",
          "589:   current_header_field_.append(data, length);",
          "590: }",
          "592: void ConnectionImpl::onHeaderValue(const char* data, size_t length) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "600:     allocTrailers();",
          "608:   checkMaxHeadersSize();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "595:     return;",
          "596:   }",
          "602:   absl::string_view header_value{data, length};",
          "604:   if (strict_header_validation_) {",
          "605:     if (!Http::HeaderUtility::headerValueIsValid(header_value)) {",
          "606:       ENVOY_CONN_LOG(debug, \"invalid header value: {}\", connection_, header_value);",
          "",
          "[Removed Lines]",
          "598:   if (processing_trailers_) {",
          "599:     maybeAllocTrailers();",
          "600:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "620:   }",
          "621:   current_header_value_.append(header_value.data(), header_value.length());",
          "632: }",
          "634: int ConnectionImpl::onHeadersCompleteBase() {",
          "",
          "[Removed Lines]",
          "623:   const uint32_t total =",
          "624:       current_header_field_.size() + current_header_value_.size() + headersOrTrailers().byteSize();",
          "625:   if (total > (max_headers_kb_ * 1024)) {",
          "626:     const absl::string_view header_type =",
          "627:         processing_trailers_ ? Http1HeaderTypes::get().Trailers : Http1HeaderTypes::get().Headers;",
          "628:     error_code_ = Http::Code::RequestHeaderFieldsTooLarge;",
          "629:     sendProtocolError(Http1ResponseCodeDetails::get().HeadersTooLarge);",
          "630:     throw CodecProtocolException(absl::StrCat(header_type, \" size exceeds limit\"));",
          "631:   }",
          "",
          "[Added Lines]",
          "637:   checkMaxHeadersSize();",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "786:           Runtime::runtimeFeatureEnabled(\"envoy.reloadable_features.http1_flood_protection\")),",
          "787:       headers_with_underscores_action_(headers_with_underscores_action) {}",
          "789: void ServerConnectionImpl::onEncodeComplete() {",
          "790:   if (active_request_.value().remote_complete_) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "795: uint32_t ServerConnectionImpl::getHeadersSize() {",
          "797:   const uint32_t url_size = (!processing_trailers_ && active_request_.has_value())",
          "798:                                 ? active_request_.value().request_url_.size()",
          "799:                                 : 0;",
          "800:   return url_size + ConnectionImpl::getHeadersSize();",
          "801: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "918: void ServerConnectionImpl::onUrl(const char* data, size_t length) {",
          "919:   if (active_request_.has_value()) {",
          "920:     active_request_.value().request_url_.append(data, length);",
          "921:   }",
          "922: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "936:     checkMaxHeadersSize();",
          "",
          "---------------"
        ],
        "source/common/http/http1/codec_impl.h||source/common/http/http1/codec_impl.h": [
          "File: source/common/http/http1/codec_impl.h -> source/common/http/http1/codec_impl.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "220:   bool resetStreamCalled() { return reset_stream_called_; }",
          "221:   void onMessageBeginBase();",
          "223:   Network::Connection& connection_;",
          "224:   CodecStats& stats_;",
          "225:   http_parser parser_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228:   virtual uint32_t getHeadersSize();",
          "235:   void checkMaxHeadersSize();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "246:   virtual HeaderMap& headersOrTrailers() PURE;",
          "247:   virtual RequestOrResponseHeaderMap& requestOrResponseHeaders() PURE;",
          "248:   virtual void allocHeaders() PURE;",
          "",
          "[Removed Lines]",
          "249:   virtual void maybeAllocTrailers() PURE;",
          "",
          "[Added Lines]",
          "263:   virtual void allocTrailers() PURE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "426:   absl::optional<ActiveRequest>& activeRequest() { return active_request_; }",
          "428:   void onMessageComplete() override;",
          "430: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "444:   uint32_t getHeadersSize() override;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "462:   }",
          "463:   void allocHeaders() override {",
          "464:     ASSERT(nullptr == absl::get<RequestHeaderMapPtr>(headers_or_trailers_));",
          "465:     headers_or_trailers_.emplace<RequestHeaderMapPtr>(RequestHeaderMapImpl::create());",
          "466:   }",
          "468:     ASSERT(processing_trailers_);",
          "469:     if (!absl::holds_alternative<RequestTrailerMapPtr>(headers_or_trailers_)) {",
          "470:       headers_or_trailers_.emplace<RequestTrailerMapPtr>(RequestTrailerMapImpl::create());",
          "",
          "[Removed Lines]",
          "467:   void maybeAllocTrailers() override {",
          "",
          "[Added Lines]",
          "481:     ASSERT(!processing_trailers_);",
          "484:   void allocTrailers() override {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "547:   }",
          "548:   void allocHeaders() override {",
          "549:     ASSERT(nullptr == absl::get<ResponseHeaderMapPtr>(headers_or_trailers_));",
          "550:     headers_or_trailers_.emplace<ResponseHeaderMapPtr>(ResponseHeaderMapImpl::create());",
          "551:   }",
          "553:     ASSERT(processing_trailers_);",
          "554:     if (!absl::holds_alternative<ResponseTrailerMapPtr>(headers_or_trailers_)) {",
          "555:       headers_or_trailers_.emplace<ResponseTrailerMapPtr>(ResponseTrailerMapImpl::create());",
          "",
          "[Removed Lines]",
          "552:   void maybeAllocTrailers() override {",
          "",
          "[Added Lines]",
          "567:     ASSERT(!processing_trailers_);",
          "570:   void allocTrailers() override {",
          "",
          "---------------"
        ],
        "test/common/http/http1/codec_impl_test.cc||test/common/http/http1/codec_impl_test.cc": [
          "File: test/common/http/http1/codec_impl_test.cc -> test/common/http/http1/codec_impl_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "238:                            \"body\\r\\n0\\r\\n\");",
          "239:   auto status = codec_->dispatch(buffer);",
          "240:   EXPECT_TRUE(status.ok());",
          "242:   if (enable_trailers) {",
          "243:     EXPECT_CALL(decoder, sendLocalReply(_, _, _, _, _, _, _));",
          "244:     status = codec_->dispatch(buffer);",
          "",
          "[Removed Lines]",
          "241:   buffer = Buffer::OwnedImpl(trailer_string + \"\\r\\n\\r\\n\");",
          "",
          "[Added Lines]",
          "241:   buffer = Buffer::OwnedImpl(trailer_string);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2521: TEST_F(Http1ServerConnectionImplTest, LargeTrailersRejected) {",
          "2524:   testTrailersExceedLimit(long_string, true);",
          "2525: }",
          "2528: TEST_F(Http1ServerConnectionImplTest, ManyTrailersRejected) {",
          "2531: }",
          "2533: TEST_F(Http1ServerConnectionImplTest, LargeTrailersRejectedIgnored) {",
          "2536:   testTrailersExceedLimit(long_string, false);",
          "2537: }",
          "2540: TEST_F(Http1ServerConnectionImplTest, ManyTrailersIgnored) {",
          "2543: }",
          "2545: TEST_F(Http1ServerConnectionImplTest, LargeRequestHeadersRejected) {",
          "",
          "[Removed Lines]",
          "2523:   std::string long_string = \"big: \" + std::string(60 * 1024, 'q') + \"\\r\\n\";",
          "2530:   testTrailersExceedLimit(createHeaderFragment(101), true);",
          "2535:   std::string long_string = \"big: \" + std::string(60 * 1024, 'q') + \"\\r\\n\";",
          "2542:   testTrailersExceedLimit(createHeaderFragment(101), false);",
          "",
          "[Added Lines]",
          "2523:   std::string long_string = \"big: \" + std::string(60 * 1024, 'q') + \"\\r\\n\\r\\n\\r\\n\";",
          "2524:   testTrailersExceedLimit(long_string, true);",
          "2525: }",
          "2527: TEST_F(Http1ServerConnectionImplTest, LargeTrailerFieldRejected) {",
          "2529:   std::string long_string = \"bigfield\" + std::string(60 * 1024, 'q');",
          "2536:   testTrailersExceedLimit(createHeaderFragment(101) + \"\\r\\n\\r\\n\", true);",
          "2541:   std::string long_string = \"big: \" + std::string(60 * 1024, 'q') + \"\\r\\n\\r\\n\\r\\n\";",
          "2542:   testTrailersExceedLimit(long_string, false);",
          "2543: }",
          "2545: TEST_F(Http1ServerConnectionImplTest, LargeTrailerFieldRejectedIgnored) {",
          "2547:   std::string long_string = \"bigfield\" + std::string(60 * 1024, 'q') + \": value\\r\\n\\r\\n\\r\\n\";",
          "2554:   testTrailersExceedLimit(createHeaderFragment(101) + \"\\r\\n\\r\\n\", false);",
          "2555: }",
          "2557: TEST_F(Http1ServerConnectionImplTest, LargeRequestUrlRejected) {",
          "2558:   initialize();",
          "2560:   std::string exception_reason;",
          "2561:   NiceMock<MockRequestDecoder> decoder;",
          "2562:   Http::ResponseEncoder* response_encoder = nullptr;",
          "2563:   EXPECT_CALL(callbacks_, newStream(_, _))",
          "2564:       .WillOnce(Invoke([&](ResponseEncoder& encoder, bool) -> RequestDecoder& {",
          "2565:         response_encoder = &encoder;",
          "2566:         return decoder;",
          "2567:       }));",
          "2570:   std::string long_url = \"/\" + std::string(60 * 1024, 'q');",
          "2571:   Buffer::OwnedImpl buffer(\"GET \" + long_url + \" HTTP/1.1\\r\\n\");",
          "2573:   auto status = codec_->dispatch(buffer);",
          "2574:   EXPECT_TRUE(isCodecProtocolError(status));",
          "2575:   EXPECT_EQ(status.message(), \"headers size exceeds limit\");",
          "2576:   EXPECT_EQ(\"http1.headers_too_large\", response_encoder->getStream().responseDetails());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2631:   testRequestHeadersAccepted(createHeaderFragment(150));",
          "2632: }",
          "2636:   initialize();",
          "2638:   NiceMock<MockRequestDecoder> decoder;",
          "",
          "[Removed Lines]",
          "2635: TEST_F(Http1ClientConnectionImplTest, LargeResponseHeadersRejected) {",
          "",
          "[Added Lines]",
          "2669: TEST_F(Http1ClientConnectionImplTest, ResponseHeadersWithLargeValueRejected) {",
          "2670:   initialize();",
          "2672:   NiceMock<MockResponseDecoder> response_decoder;",
          "2673:   Http::RequestEncoder& request_encoder = codec_->newStream(response_decoder);",
          "2674:   TestRequestHeaderMapImpl headers{{\":method\", \"GET\"}, {\":path\", \"/\"}, {\":authority\", \"host\"}};",
          "2675:   request_encoder.encodeHeaders(headers, true);",
          "2677:   Buffer::OwnedImpl buffer(\"HTTP/1.1 200 OK\\r\\nContent-Length: 0\\r\\n\");",
          "2678:   auto status = codec_->dispatch(buffer);",
          "2679:   EXPECT_TRUE(status.ok());",
          "2680:   std::string long_header = \"big: \" + std::string(80 * 1024, 'q');",
          "2681:   buffer = Buffer::OwnedImpl(long_header);",
          "2682:   status = codec_->dispatch(buffer);",
          "2683:   EXPECT_TRUE(isCodecProtocolError(status));",
          "2684:   EXPECT_EQ(status.message(), \"headers size exceeds limit\");",
          "2685: }",
          "2688: TEST_F(Http1ClientConnectionImplTest, ResponseHeadersWithLargeFieldRejected) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2644:   Buffer::OwnedImpl buffer(\"HTTP/1.1 200 OK\\r\\nContent-Length: 0\\r\\n\");",
          "2645:   auto status = codec_->dispatch(buffer);",
          "2646:   EXPECT_TRUE(status.ok());",
          "2648:   buffer = Buffer::OwnedImpl(long_header);",
          "2649:   status = codec_->dispatch(buffer);",
          "2650:   EXPECT_TRUE(isCodecProtocolError(status));",
          "",
          "[Removed Lines]",
          "2647:   std::string long_header = \"big: \" + std::string(80 * 1024, 'q') + \"\\r\\n\";",
          "",
          "[Added Lines]",
          "2700:   std::string long_header = \"big: \" + std::string(80 * 1024, 'q');",
          "",
          "---------------"
        ],
        "test/integration/http_integration.cc||test/integration/http_integration.cc": [
          "File: test/integration/http_integration.cc -> test/integration/http_integration.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "958:   EXPECT_EQ(1024U, response->body().size());",
          "959: }",
          "961: void HttpIntegrationTest::testLargeRequestHeaders(uint32_t size, uint32_t count, uint32_t max_size,",
          "962:                                                   uint32_t max_count) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "961: void HttpIntegrationTest::testLargeRequestUrl(uint32_t url_size, uint32_t max_headers_size) {",
          "967:   config_helper_.addConfigModifier(",
          "968:       [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&",
          "969:               hcm) -> void { hcm.mutable_max_request_headers_kb()->set_value(max_headers_size); });",
          "970:   max_request_headers_kb_ = max_headers_size;",
          "972:   Http::TestRequestHeaderMapImpl big_headers{{\":method\", \"GET\"},",
          "973:                                              {\":path\", \"/\" + std::string(url_size * 1024, 'a')},",
          "974:                                              {\":scheme\", \"http\"},",
          "975:                                              {\":authority\", \"host\"}};",
          "977:   initialize();",
          "978:   codec_client_ = makeHttpConnection(lookupPort(\"http\"));",
          "979:   if (url_size >= max_headers_size) {",
          "981:     auto encoder_decoder = codec_client_->startRequest(big_headers);",
          "982:     auto response = std::move(encoder_decoder.second);",
          "984:     if (downstream_protocol_ == Http::CodecClient::Type::HTTP1) {",
          "985:       codec_client_->waitForDisconnect();",
          "986:       EXPECT_TRUE(response->complete());",
          "987:       EXPECT_EQ(\"431\", response->headers().Status()->value().getStringView());",
          "988:     } else {",
          "989:       response->waitForReset();",
          "990:       codec_client_->close();",
          "991:     }",
          "992:   } else {",
          "993:     auto response = sendRequestAndWaitForResponse(big_headers, 0, default_response_headers_, 0);",
          "994:     EXPECT_TRUE(response->complete());",
          "995:     EXPECT_EQ(\"200\", response->headers().Status()->value().getStringView());",
          "996:   }",
          "997: }",
          "",
          "---------------"
        ],
        "test/integration/http_integration.h||test/integration/http_integration.h": [
          "File: test/integration/http_integration.h -> test/integration/http_integration.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:   void testLargeHeaders(Http::TestRequestHeaderMapImpl request_headers,",
          "197:                         Http::TestRequestTrailerMapImpl request_trailers, uint32_t size,",
          "198:                         uint32_t max_size);",
          "199:   void testLargeRequestHeaders(uint32_t size, uint32_t count, uint32_t max_size = 60,",
          "200:                                uint32_t max_count = 100);",
          "201:   void testLargeRequestTrailers(uint32_t size, uint32_t max_size = 60);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "199:   void testLargeRequestUrl(uint32_t url_size, uint32_t max_headers_size);",
          "",
          "---------------"
        ],
        "test/integration/protocol_integration_test.cc||test/integration/protocol_integration_test.cc": [
          "File: test/integration/protocol_integration_test.cc -> test/integration/protocol_integration_test.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1352:   EXPECT_EQ(0, upstream_request_->body().length());",
          "1353: }",
          "1355: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestHeadersRejected) {",
          "1357:   testLargeRequestHeaders(95, 1, 60, 100);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1355: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestUrlRejected) {",
          "1357:   testLargeRequestUrl(95, 60);",
          "1358: }",
          "1360: TEST_P(DownstreamProtocolIntegrationTest, LargeRequestUrlAccepted) {",
          "1362:   testLargeRequestUrl(95, 96);",
          "1363: }",
          "",
          "---------------"
        ]
      }
    }
  ]
}