{
  "cve_id": "CVE-2018-11595",
  "cve_desc": "Espruino before 1.99 allows attackers to cause a denial of service (application crash) and a potential Escalation of Privileges with a user crafted input file via a Buffer Overflow during syntax parsing, because strncat is misused.",
  "repo": "espruino/Espruino",
  "patch_hash": "0a7619875bf79877907205f6bee08465b89ff10b",
  "patch_info": {
    "commit_hash": "0a7619875bf79877907205f6bee08465b89ff10b",
    "repo": "espruino/Espruino",
    "commit_url": "https://github.com/espruino/Espruino/commit/0a7619875bf79877907205f6bee08465b89ff10b",
    "files": [
      "ChangeLog",
      "src/jslex.c",
      "src/jspin.c",
      "src/jsutils.c",
      "src/jsvar.c"
    ],
    "message": "Fix strncat/cpy bounding issues (fix #1425)",
    "before_after_code_files": [
      "src/jslex.c||src/jslex.c",
      "src/jspin.c||src/jspin.c",
      "src/jsutils.c||src/jsutils.c",
      "src/jsvar.c||src/jsvar.c"
    ]
  },
  "patch_diff": {
    "src/jslex.c||src/jslex.c": [
      "File: src/jslex.c -> src/jslex.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "814:   }",
      "816:   assert(len>=10);",
      "820: }",
      "822: void jslGetTokenString(char *str, size_t len) {",
      "823:   if (lex->tk == LEX_ID) {",
      "826:   } else if (lex->tk == LEX_STR) {",
      "830:   } else",
      "831:     jslTokenAsString(lex->tk, str, len);",
      "832: }",
      "",
      "[Removed Lines]",
      "817:   strncpy(str, \"?[\",len);",
      "818:   itostr(token, &str[2], 10);",
      "819:   strncat(str, \"]\",len);",
      "824:     strncpy(str, \"ID:\", len);",
      "825:     strncat(str, jslGetTokenValueAsString(), len);",
      "827:     strncpy(str, \"String:'\", len);",
      "828:     strncat(str, jslGetTokenValueAsString(), len);",
      "829:     strncat(str, \"'\", len);",
      "",
      "[Added Lines]",
      "817:   espruino_snprintf(str, len, \"?[%d]\", token);",
      "822:     espruino_snprintf(str, len, \"ID:%s\", jslGetTokenValueAsString());",
      "824:     espruino_snprintf(str, len, \"String:'%s'\", jslGetTokenValueAsString());",
      "",
      "---------------"
    ],
    "src/jspin.c||src/jspin.c": [
      "File: src/jspin.c -> src/jspin.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "179: #endif",
      "180: #endif",
      "181:     } else {",
      "183:     }",
      "184:   }",
      "",
      "[Removed Lines]",
      "182:       strncpy(result, \"undefined\", 10);",
      "",
      "[Added Lines]",
      "182:       strcpy(result, \"undefined\");",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "379:     jsiConsolePrintf(\"Couldn't convert pin function %d\\n\", pinFunc);",
      "380:     return;",
      "381:   }",
      "383:   if (flags & JSPFTS_DEVICE_NUMBER) itostr(devIdx, &buf[strlen(buf)], 10);",
      "386: }",
      "",
      "[Removed Lines]",
      "382:   if (flags & JSPFTS_DEVICE) strncat(buf, devStr, bufSize);",
      "384:   if (flags & JSPFTS_SPACE) strncat(buf, \" \", bufSize);",
      "385:   if (infoStr && (flags & JSPFTS_TYPE)) strncat(buf, infoStr, bufSize);",
      "",
      "[Added Lines]",
      "382:   if (flags & JSPFTS_DEVICE) strncat(buf, devStr, bufSize-1);",
      "384:   if (flags & JSPFTS_SPACE) strncat(buf, \" \", bufSize-(strlen(buf)+1));",
      "385:   if (infoStr && (flags & JSPFTS_TYPE)) strncat(buf, infoStr, bufSize-(strlen(buf)+1));",
      "",
      "---------------"
    ],
    "src/jsutils.c||src/jsutils.c": [
      "File: src/jsutils.c -> src/jsutils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "604: }",
      "606: void ftoa_bounded_extra(JsVarFloat val,char *str, size_t len, int radix, int fractionalDigits) {",
      "607:   const JsVarFloat stopAtError = 0.0000001;",
      "609:   else if (!isfinite(val)) {",
      "612:   } else {",
      "613:     if (val<0) {",
      "614:       if (--len <= 0) { *str=0; return; } // bounds check",
      "",
      "[Removed Lines]",
      "608:   if (isnan(val)) strncpy(str,\"NaN\",len);",
      "610:     if (val<0) strncpy(str,\"-Infinity\",len);",
      "611:     else strncpy(str,\"Infinity\",len);",
      "",
      "[Added Lines]",
      "607:   assert(len>9); // in case if strcpy",
      "609:   if (isnan(val)) strcpy(str,\"NaN\");",
      "611:     if (val<0) strcpy(str,\"-Infinity\");",
      "612:     else strcpy(str,\"Infinity\");",
      "",
      "---------------"
    ],
    "src/jsvar.c||src/jsvar.c": [
      "File: src/jsvar.c -> src/jsvar.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1186:   const char *s = jsvGetConstString(v);",
      "1187:   if (s) {",
      "1188:     strncpy(str, s, len);",
      "1189:     return strlen(s);",
      "1190:   } else if (jsvIsInt(v)) {",
      "1191:     itostr(v->varData.integer, str, 10);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1189:     str[len-1] = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1218:       jsvUnLock(stringVar);",
      "1219:       return l;",
      "1220:     } else {",
      "1222:       jsExceptionHere(JSET_INTERNALERROR, \"Variable type cannot be converted to string\");",
      "1223:       return 0;",
      "1224:     }",
      "",
      "[Removed Lines]",
      "1221:       strncpy(str, \"\", len);",
      "",
      "[Added Lines]",
      "1222:       str[0] = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "5aad237f72c891d4abe34438dda91ff4ac2d9f31",
      "candidate_info": {
        "commit_hash": "5aad237f72c891d4abe34438dda91ff4ac2d9f31",
        "repo": "espruino/Espruino",
        "commit_url": "https://github.com/espruino/Espruino/commit/5aad237f72c891d4abe34438dda91ff4ac2d9f31",
        "files": [
          "ChangeLog",
          "src/jsparse.c",
          "src/jsparse.h",
          "src/jsvar.c",
          "src/jsvar.h",
          "src/jsvariterator.c",
          "src/jswrap_json.c",
          "src/jswrap_object.c",
          "src/jswrap_process.c",
          "tests/test_getter.js",
          "tests/test_setter.js"
        ],
        "message": "Added getter and setter support",
        "before_after_code_files": [
          "src/jsparse.c||src/jsparse.c",
          "src/jsparse.h||src/jsparse.h",
          "src/jsvar.c||src/jsvar.c",
          "src/jsvar.h||src/jsvar.h",
          "src/jsvariterator.c||src/jsvariterator.c",
          "src/jswrap_json.c||src/jswrap_json.c",
          "src/jswrap_object.c||src/jswrap_object.c",
          "src/jswrap_process.c||src/jswrap_process.c",
          "tests/test_getter.js||tests/test_getter.js",
          "tests/test_setter.js||tests/test_setter.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsvar.c||src/jsvar.c"
          ],
          "candidate": [
            "src/jsvar.c||src/jsvar.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsparse.c||src/jsparse.c": [
          "File: src/jsparse.c -> src/jsparse.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "81:   return JSP_HAS_ERROR;",
          "82: }",
          "135: bool jspeiAddScope(JsVar *scope) {",
          "136:   if (execInfo.scopeCount >= JSPARSE_MAX_SCOPES) {",
          "137:     jsExceptionHere(JSET_ERROR, \"Maximum number of scopes exceeded\");",
          "",
          "[Removed Lines]",
          "84: void jspReplaceWith(JsVar *dst, JsVar *src) {",
          "86:   if (jsvIsArrayBufferName(dst)) {",
          "87:     size_t idx = (size_t)jsvGetInteger(dst);",
          "88:     JsVar *arrayBuffer = jsvLock(jsvGetFirstChild(dst));",
          "89:     jsvArrayBufferSet(arrayBuffer, idx, src);",
          "90:     jsvUnLock(arrayBuffer);",
          "91:     return;",
          "92:   }",
          "94:   if (!jsvIsName(dst)) {",
          "95:     jsExceptionHere(JSET_ERROR, \"Unable to assign value to non-reference %t\", dst);",
          "96:     return;",
          "97:   }",
          "98:   jsvSetValueOfName(dst, src);",
          "103:   if (jsvIsNewChild(dst)) {",
          "105:     JsVar *parent = jsvLock(jsvGetNextSibling(dst));",
          "106:     if (!jsvIsString(parent)) {",
          "109:       if (!jsvHasChildren(parent)) {",
          "110:         jsExceptionHere(JSET_ERROR, \"Field or method \\\"%s\\\" does not already exist, and can't create it on %t\", dst, parent);",
          "111:       } else {",
          "113:         jsvUnRef(parent);",
          "114:         jsvSetNextSibling(dst, 0);",
          "115:         jsvUnRef(parent);",
          "116:         jsvSetPrevSibling(dst, 0);",
          "118:         jsvAddName(parent, dst);",
          "119:       }",
          "120:     }",
          "121:     jsvUnLock(parent);",
          "122:   }",
          "123: }",
          "125: void jspReplaceWithOrAddToRoot(JsVar *dst, JsVar *src) {",
          "128:   if (!jsvGetRefs(dst) && jsvIsName(dst)) {",
          "129:     if (!jsvIsArrayBufferName(dst) && !jsvIsNewChild(dst))",
          "130:       jsvAddName(execInfo.root, dst);",
          "131:   }",
          "132:   jspReplaceWith(dst, src);",
          "133: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1273:       } else {",
          "1274:         JSP_MATCH_WITH_RETURN(LEX_ID, contents);",
          "1275:       }",
          "1283:         }",
          "1284:       }",
          "1285:       jsvUnLock(varName);",
          "",
          "[Removed Lines]",
          "1276:       JSP_MATCH_WITH_CLEANUP_AND_RETURN(':', jsvUnLock(varName), contents);",
          "1277:       if (JSP_SHOULD_EXECUTE) {",
          "1278:         varName = jsvAsArrayIndexAndUnLock(varName);",
          "1279:         JsVar *contentsName = jsvFindChildFromVar(contents, varName, true);",
          "1280:         if (contentsName) {",
          "1281:           JsVar *value = jsvSkipNameAndUnLock(jspeAssignmentExpression()); // value can be 0 (could be undefined!)",
          "1282:           jsvUnLock2(jsvSetValueOfName(contentsName, value), value);",
          "",
          "[Added Lines]",
          "1225: #ifndef SAVE_ON_FLASH",
          "1226:       bool isGetter, isSetter;",
          "1227:       if (lex->tk==LEX_ID && jsvIsString(varName)) {",
          "1228:         isGetter = jsvIsStringEqual(varName, \"get\");",
          "1229:         isSetter = jsvIsStringEqual(varName, \"set\");",
          "1230:         if (isGetter || isSetter) {",
          "1231:           jsvUnLock(varName);",
          "1232:           varName = jslGetTokenValueAsVar(lex);",
          "1233:           JSP_ASSERT_MATCH(LEX_ID);",
          "1234:           JsVar *method = jspeFunctionDefinition(false);",
          "1235:           jsvAddGetterOrSetter(contents, varName, isGetter, method);",
          "1236:           jsvUnLock(method);",
          "1237:         }",
          "1238:       } else",
          "1239: #endif",
          "1240:       {",
          "1241:         JSP_MATCH_WITH_CLEANUP_AND_RETURN(':', jsvUnLock(varName), contents);",
          "1242:         if (JSP_SHOULD_EXECUTE) {",
          "1243:           varName = jsvAsArrayIndexAndUnLock(varName);",
          "1244:           JsVar *contentsName = jsvFindChildFromVar(contents, varName, true);",
          "1245:           if (contentsName) {",
          "1246:             JsVar *value = jsvSkipNameAndUnLock(jspeAssignmentExpression()); // value can be 0 (could be undefined!)",
          "1247:             jsvUnLock2(jsvSetValueOfName(contentsName, value), value);",
          "1248:           }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1551:     if (isStatic) JSP_ASSERT_MATCH(LEX_R_STATIC);",
          "1553:     JsVar *funcName = jslGetTokenValueAsVar(lex);",
          "1555:     JsVar *method = jspeFunctionDefinition(false);",
          "1556:     if (classFunction && classPrototype) {",
          "1560:         jswrap_function_replaceWith(classFunction, method);",
          "1561:       } else {",
          "1562:         funcName = jsvMakeIntoVariableName(funcName, 0);",
          "1563:         jsvSetValueOfName(funcName, method);",
          "1565:       }",
          "1566:     }",
          "1567:     jsvUnLock2(method,funcName);",
          "1568:   }",
          "",
          "[Removed Lines]",
          "1554:     JSP_MATCH_WITH_CLEANUP_AND_RETURN(LEX_ID,jsvUnLock3(classFunction,classInternalName,classPrototype),0);",
          "1557:       if (jsvIsStringEqual(funcName, \"get\") || jsvIsStringEqual(funcName, \"set\")) {",
          "1558:         jsExceptionHere(JSET_SYNTAXERROR, \"'get' and 'set' and not supported in Espruino\");",
          "1559:       } else if (jsvIsStringEqual(funcName, \"constructor\")) {",
          "1564:         jsvAddName(isStatic ? classFunction : classPrototype, funcName);",
          "",
          "[Added Lines]",
          "1520:     JSP_MATCH_WITH_CLEANUP_AND_RETURN(LEX_ID,jsvUnLock4(funcName,classFunction,classInternalName,classPrototype),0);",
          "1521: #ifndef SAVE_ON_FLASH",
          "1522:     bool isGetter, isSetter;",
          "1523:     if (lex->tk==LEX_ID) {",
          "1524:       isGetter = jsvIsStringEqual(funcName, \"get\");",
          "1525:       isSetter = jsvIsStringEqual(funcName, \"set\");",
          "1526:       if (isGetter || isSetter) {",
          "1527:         jsvUnLock(funcName);",
          "1528:         funcName = jslGetTokenValueAsVar(lex);",
          "1529:         JSP_ASSERT_MATCH(LEX_ID);",
          "1530:       }",
          "1531:     }",
          "1532: #endif",
          "1536:       JsVar *obj = isStatic ? classFunction : classPrototype;",
          "1537:       if (jsvIsStringEqual(funcName, \"constructor\")) {",
          "1539: #ifndef SAVE_ON_FLASH",
          "1540:       } else if (isGetter || isSetter) {",
          "1541:         jsvAddGetterOrSetter(obj, funcName, isGetter, method);",
          "1542: #endif",
          "1546:         jsvAddName(obj, funcName);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1748:       jsvUnLock(one);",
          "1752:       jsvUnLock(res);",
          "1754:       jsvUnLock(a);",
          "",
          "[Removed Lines]",
          "1751:       jspReplaceWith(a, res);",
          "",
          "[Added Lines]",
          "1734:       jsvReplaceWith(a, res);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1770:       JsVar *res = jsvMathsOpSkipNames(a, one, op==LEX_PLUSPLUS ? '+' : '-');",
          "1771:       jsvUnLock(one);",
          "1774:       jsvUnLock(res);",
          "1775:     }",
          "1776:   } else",
          "",
          "[Removed Lines]",
          "1773:       jspReplaceWith(a, res);",
          "",
          "[Added Lines]",
          "1756:       jsvReplaceWith(a, res);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1983:     if (JSP_SHOULD_EXECUTE && lhs) {",
          "1984:       if (op=='=') {",
          "1986:       } else {",
          "1987:         if (op==LEX_PLUSEQUAL) op='+';",
          "1988:         else if (op==LEX_MINUSEQUAL) op='-';",
          "",
          "[Removed Lines]",
          "1985:         jspReplaceWithOrAddToRoot(lhs, rhs);",
          "",
          "[Added Lines]",
          "1968:         jsvReplaceWithOrAddToRoot(lhs, rhs);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2011:         if (op) {",
          "2013:           JsVar *res = jsvMathsOpSkipNames(lhs,rhs,op);",
          "2015:           jsvUnLock(res);",
          "2016:         }",
          "2017:       }",
          "",
          "[Removed Lines]",
          "2014:           jspReplaceWith(lhs, res);",
          "",
          "[Added Lines]",
          "1997:           jsvReplaceWith(lhs, res);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2127:       JSP_MATCH_WITH_CLEANUP_AND_RETURN('=', jsvUnLock(a), lastDefined);",
          "2128:       var = jsvSkipNameAndUnLock(jspeAssignmentExpression());",
          "2129:       if (JSP_SHOULD_EXECUTE)",
          "2131:       jsvUnLock(var);",
          "2132:     }",
          "2133:     jsvUnLock(lastDefined);",
          "",
          "[Removed Lines]",
          "2130:         jspReplaceWith(a, var);",
          "",
          "[Added Lines]",
          "2113:         jsvReplaceWith(a, var);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2400:             }",
          "2401:             if (isForOf || iteratorValue) { // could be out of memory",
          "2402:               assert(!jsvIsName(iteratorValue));",
          "2404:               if (iteratorValue!=loopIndexVar) jsvUnLock(iteratorValue);",
          "2406:               jslSeekToP(&forBodyStart);",
          "",
          "[Removed Lines]",
          "2403:               jspReplaceWithOrAddToRoot(forStatement, iteratorValue);",
          "",
          "[Added Lines]",
          "2386:               jsvReplaceWithOrAddToRoot(forStatement, iteratorValue);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2600:   if (JSP_SHOULD_EXECUTE) {",
          "2601:     JsVar *resultVar = jspeiFindInScopes(JSPARSE_RETURN_VAR);",
          "2602:     if (resultVar) {",
          "2604:       jsvUnLock(resultVar);",
          "2605:       execInfo.execute |= EXEC_RETURN; // Stop anything else in this function executing",
          "2606:     } else {",
          "",
          "[Removed Lines]",
          "2603:       jspReplaceWith(resultVar, result);",
          "",
          "[Added Lines]",
          "2586:       jsvReplaceWith(resultVar, result);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "2655:       funcVar = jsvSkipNameAndUnLock(funcVar);",
          "2656:       jswrap_function_replaceWith(existingFunc, funcVar);",
          "2657:     } else {",
          "2659:     }",
          "2660:     jsvUnLock(funcName);",
          "2661:     funcName = existingName;",
          "",
          "[Removed Lines]",
          "2658:       jspReplaceWith(existingName, funcVar);",
          "",
          "[Added Lines]",
          "2641:       jsvReplaceWith(existingName, funcVar);",
          "",
          "---------------"
        ],
        "src/jsparse.h||src/jsparse.h": [
          "File: src/jsparse.h -> src/jsparse.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "194: JsVar *jspeiFindInScopes(const char *name);",
          "",
          "[Removed Lines]",
          "195: void jspReplaceWith(JsVar *dst, JsVar *src);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/jsvar.c||src/jsvar.c": [
          "File: src/jsvar.c -> src/jsvar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "91: bool jsvIsNameIntBool(const JsVar *v) { return v && (v->flags&JSV_VARTYPEMASK)==JSV_NAME_INT_BOOL; }",
          "93: bool jsvIsNewChild(const JsVar *v) { return jsvIsName(v) && jsvGetNextSibling(v) && jsvGetNextSibling(v)==jsvGetPrevSibling(v); }",
          "95: bool jsvIsRefUsedForData(const JsVar *v) { return jsvIsStringExt(v) || (jsvIsString(v)&&!jsvIsName(v)) ||  jsvIsFloat(v) || jsvIsNativeFunction(v) || jsvIsArrayBuffer(v) || jsvIsArrayBufferName(v); }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "95: bool jsvIsGetterOrSetter(const JsVar *v) {",
          "96: #ifdef SAVE_ON_FLASH",
          "97:   return false;",
          "98: #else",
          "99:   return v && (v->flags&JSV_VARTYPEMASK)==JSV_GET_SET;",
          "100: #endif",
          "101: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "359: }",
          "361: bool jsvHasChildren(const JsVar *v) {",
          "363: }",
          "",
          "[Removed Lines]",
          "362:   return jsvIsFunction(v) || jsvIsObject(v) || jsvIsArray(v) || jsvIsRoot(v);",
          "",
          "[Added Lines]",
          "370:   return jsvIsFunction(v) || jsvIsObject(v) || jsvIsArray(v) || jsvIsRoot(v) || jsvIsGetterOrSetter(v);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "641:   return var;",
          "642: }",
          "645: ALWAYS_INLINE JsVar *jsvLockAgain(JsVar *var) {",
          "646:   assert(var);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "653: JsVar *jsvLockSafe(JsVarRef ref) {",
          "654:   if (!ref) return 0;",
          "655:   return jsvLock(ref);",
          "656: }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1192:     len--;",
          "1194:     while (s[l] && l<len) {",
          "1195:       str[l] = s[l];",
          "1196:       l++;",
          "",
          "[Removed Lines]",
          "1193:     int l = 0;",
          "",
          "[Added Lines]",
          "1207:     size_t l = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1410:     jsvUnLock(newVar); // note use of if (ref), not var",
          "1412:   }",
          "1413:   jsvUnLock(newVar); // note use of if (ref), not var",
          "1414:   return strLength;",
          "",
          "[Removed Lines]",
          "1411:     var = newVar = ref ? jsvLock(ref) : 0;",
          "",
          "[Added Lines]",
          "1425:     var = newVar = jsvLockSafe(ref);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1863: JsVarFloat jsvGetFloatAndUnLock(JsVar *v) { return _jsvGetFloatAndUnLock(v); }",
          "1864: bool jsvGetBoolAndUnLock(JsVar *v) { return _jsvGetBoolAndUnLock(v); }",
          "1867: size_t jsvGetArrayBufferLength(const JsVar *arrayBuffer) {",
          "1868:   assert(jsvIsArrayBuffer(arrayBuffer));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1881: #ifndef SAVE_ON_FLASH",
          "1883: JsVar *jsvExecuteGetter(JsVar *getset) {",
          "1884:   assert(jsvIsGetterOrSetter(getset));",
          "1885:   if (!jsvIsGetterOrSetter(getset)) return 0; // wasn't an object?",
          "1886:   JsVar *fn = jsvObjectGetChild(getset, \"get\", 0);",
          "1887:   if (!jsvIsFunction(fn)) {",
          "1888:     jsvUnLock(fn);",
          "1889:     return 0;",
          "1890:   }",
          "1891:   JsVar *this = jsvObjectGetChild(getset, \"this\", 0);",
          "1892:   JsVar *result = jspExecuteFunction(fn, this, 0, NULL);",
          "1893:   jsvUnLock2(fn, this);",
          "1894:   return result;",
          "1895: }",
          "1898: void jsvExecuteSetter(JsVar *getset, JsVar *value) {",
          "1899:   assert(jsvIsGetterOrSetter(getset));",
          "1900:   if (!jsvIsGetterOrSetter(getset)) return; // wasn't an object?",
          "1901:   JsVar *fn = jsvObjectGetChild(getset, \"set\", 0);",
          "1902:   if (!jsvIsFunction(fn)) {",
          "1903:     jsvUnLock(fn);",
          "1904:     return;",
          "1905:   }",
          "1906:   if (!fn) return;",
          "1907:   JsVar *this = jsvObjectGetChild(getset, \"this\", 0);",
          "1908:   jsvUnLock3(jspExecuteFunction(fn, this, 1, &value), fn, this);",
          "1909: }",
          "1912: void jsvAddGetterOrSetter(JsVar *obj, JsVar *varName, bool isGetter, JsVar *method) {",
          "1914:   JsVar *getsetName = jsvFindChildFromVar(obj, varName, true);",
          "1915:   if (jsvIsName(getsetName)) {",
          "1916:     JsVar *getset = jsvGetValueOfName(getsetName);",
          "1917:     if (!jsvIsGetterOrSetter(getset)) {",
          "1918:       jsvUnLock(getset);",
          "1919:       getset = jsvNewWithFlags(JSV_GET_SET);",
          "1920:       jsvSetValueOfName(getsetName, getset);",
          "1921:     }",
          "1922:     if (jsvIsGetterOrSetter(getset)) {",
          "1923:       jsvObjectSetChild(getset, \"this\", obj);",
          "1924:       jsvObjectSetChild(getset, isGetter?\"get\":\"set\", method);",
          "1925:     }",
          "1926:     jsvUnLock(getset);",
          "1927:   }",
          "1928:   jsvUnLock(getsetName);",
          "1929: }",
          "1930: #endif",
          "1938: void jsvReplaceWith(JsVar *dst, JsVar *src) {",
          "1940:   if (jsvIsArrayBufferName(dst)) {",
          "1941:     size_t idx = (size_t)jsvGetInteger(dst);",
          "1942:     JsVar *arrayBuffer = jsvLock(jsvGetFirstChild(dst));",
          "1943:     jsvArrayBufferSet(arrayBuffer, idx, src);",
          "1944:     jsvUnLock(arrayBuffer);",
          "1945:     return;",
          "1946:   }",
          "1948:   if (!jsvIsName(dst)) {",
          "1949:     jsExceptionHere(JSET_ERROR, \"Unable to assign value to non-reference %t\", dst);",
          "1950:     return;",
          "1951:   }",
          "1952:   bool setValue = true;",
          "1953: #ifndef SAVE_ON_FLASH",
          "1954:   JsVar *v = jsvGetValueOfName(dst);",
          "1955:   if (jsvIsGetterOrSetter(v)) {",
          "1956:     jsvExecuteSetter(v,src);",
          "1957:     setValue = false;",
          "1958:   }",
          "1959:   jsvUnLock(v);",
          "1960: #endif",
          "1961:   if (setValue) jsvSetValueOfName(dst, src);",
          "1966:   if (jsvIsNewChild(dst)) {",
          "1968:     JsVar *parent = jsvLock(jsvGetNextSibling(dst));",
          "1969:     if (!jsvIsString(parent)) {",
          "1972:       if (!jsvHasChildren(parent)) {",
          "1973:         jsExceptionHere(JSET_ERROR, \"Field or method \\\"%s\\\" does not already exist, and can't create it on %t\", dst, parent);",
          "1974:       } else {",
          "1976:         jsvUnRef(parent);",
          "1977:         jsvSetNextSibling(dst, 0);",
          "1978:         jsvUnRef(parent);",
          "1979:         jsvSetPrevSibling(dst, 0);",
          "1981:         jsvAddName(parent, dst);",
          "1982:       }",
          "1983:     }",
          "1984:     jsvUnLock(parent);",
          "1985:   }",
          "1986: }",
          "1991: void jsvReplaceWithOrAddToRoot(JsVar *dst, JsVar *src) {",
          "1994:   if (!jsvGetRefs(dst) && jsvIsName(dst)) {",
          "1995:     if (!jsvIsArrayBufferName(dst) && !jsvIsNewChild(dst))",
          "1996:       jsvAddName(execInfo.root, dst);",
          "1997:   }",
          "1998:   jsvReplaceWith(dst, src);",
          "1999: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1939:          (jsvGetFirstChild(a)!=0);",
          "1940: }",
          "1943: void jsvCheckReferenceError(JsVar *a) {",
          "1944:   if (jsvIsName(a) && jsvGetRefs(a)==0 && !jsvIsNewChild(a) && !jsvGetFirstChild(a))",
          "1945:     jsExceptionHere(JSET_REFERENCEERROR, \"%q is not defined\", a);",
          "1946: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2079: JsVar *jsvGetValueOfName(JsVar *a) {",
          "2080:   if (!a) return 0;",
          "2081:   if (jsvIsArrayBufferName(a)) return jsvArrayBufferGetFromName(a);",
          "2082:   if (jsvIsNameInt(a)) return jsvNewFromInteger((JsVarInt)jsvGetFirstChildSigned(a));",
          "2083:   if (jsvIsNameIntBool(a)) return jsvNewFromBool(jsvGetFirstChild(a)!=0);",
          "2084:   assert(!jsvIsNameWithValue(a));",
          "2085:   if (jsvIsName(a))",
          "2086:     return jsvLockSafe(jsvGetFirstChild(a));",
          "2087:   return 0;",
          "2088: }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1965:     }",
          "1966:     pa = jsvLock(n);",
          "1967:     assert(pa!=a);",
          "1968:     if (!repeat) return pa;",
          "1969:   }",
          "1970:   return pa;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2118: #ifndef SAVE_ON_FLASH",
          "2119:     if (jsvIsGetterOrSetter(pa)) {",
          "2120:       JsVar *v = jsvExecuteGetter(pa);",
          "2121:       jsvUnLock(pa);",
          "2122:       pa = v;",
          "2123:     }",
          "2124: #endif",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2289:       while (insertAfter && jsvCompareInteger(namedChild, insertAfter)<0) {",
          "2290:         JsVarRef prev = jsvGetPrevSibling(insertAfter);",
          "2291:         jsvUnLock(insertAfter);",
          "2293:       }",
          "2294:     }",
          "",
          "[Removed Lines]",
          "2292:         insertAfter = prev ? jsvLock(prev) : 0;",
          "",
          "[Added Lines]",
          "2449:         insertAfter = jsvLockSafe(prev);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3310:   char endBracket = ' ';",
          "3311:   if (jsvIsObject(var)) { jsiConsolePrint(\"Object { \"); endBracket = '}'; }",
          "3312:   else if (jsvIsArray(var)) { jsiConsolePrintf(\"Array(%d) [ \", var->varData.integer); endBracket = ']'; }",
          "3313:   else if (jsvIsNativeFunction(var)) { jsiConsolePrintf(\"NativeFunction 0x%x (%d) { \", var->varData.native.ptr, var->varData.native.argTypes); endBracket = '}'; }",
          "3314:   else if (jsvIsFunction(var)) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3469:   else if (jsvIsGetterOrSetter(var)) { jsiConsolePrint(\"Getter/Setter { \"); endBracket = '}'; }",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3347:   }",
          "3349:   if (jsvHasSingleChild(var)) {",
          "3351:     _jsvTrace(child, indent+2, baseVar, level+1);",
          "3352:     jsvUnLock(child);",
          "3353:   } else if (jsvHasChildren(var)) {",
          "",
          "[Removed Lines]",
          "3350:     JsVar *child = jsvGetFirstChild(var) ? jsvLock(jsvGetFirstChild(var)) : 0;",
          "",
          "[Added Lines]",
          "3508:     JsVar *child = jsvLockSafe(jsvGetFirstChild(var));",
          "",
          "---------------"
        ],
        "src/jsvar.h||src/jsvar.h": [
          "File: src/jsvar.h -> src/jsvar.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     JSV_NULL        = JSV_ROOT+1, ///< it seems null is its own data type",
          "41:   _JSV_NUMERIC_START = JSV_INTEGER, ///< --------- Start of numeric variable types",
          "42:     JSV_FLOAT       = JSV_INTEGER+1, ///< floating point double (note JSV_NUMERICMASK)",
          "43:     JSV_BOOLEAN     = JSV_FLOAT+1, ///< boolean (note JSV_NUMERICMASK)",
          "",
          "[Removed Lines]",
          "35:     JSV_ARRAY = JSV_NULL+1, ///< A JavaScript Array Buffer - Implemented just like a String at the moment",
          "36:     JSV_ARRAYBUFFER  = JSV_ARRAY+1,",
          "37:     JSV_OBJECT      = JSV_ARRAYBUFFER+1,",
          "38:     JSV_FUNCTION    = JSV_OBJECT+1,",
          "39:     JSV_FUNCTION_RETURN    = JSV_FUNCTION+1, ///< A simple function that starts with `return` (which is implicit)",
          "40:     JSV_INTEGER     = JSV_FUNCTION_RETURN+1, ///< integer number (note JSV_NUMERICMASK)",
          "",
          "[Added Lines]",
          "35:     JSV_ARRAY,           ///< A JavaScript Array Buffer - Implemented just like a String at the moment",
          "36:     JSV_ARRAYBUFFER,     ///< An arraybuffer (see varData.arraybuffer)",
          "37:     JSV_OBJECT,",
          "38: #ifndef SAVE_ON_FLASH",
          "39:     JSV_GET_SET,         ///< Getter/setter (an object with get/set fields)",
          "40: #endif",
          "41:     JSV_FUNCTION,",
          "42:     JSV_FUNCTION_RETURN, ///< A simple function that starts with `return` (which is implicit)",
          "43:     JSV_INTEGER,         ///< integer number (note JSV_NUMERICMASK)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "345: ALWAYS_INLINE JsVar *jsvLock(JsVarRef ref);",
          "348: ALWAYS_INLINE JsVar *jsvLockAgain(JsVar *var);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "351: JsVar *jsvLockSafe(JsVarRef ref);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "407: extern bool jsvIsNameIntBool(const JsVar *v);",
          "409: extern bool jsvIsNewChild(const JsVar *v);",
          "412: extern bool jsvIsRefUsedForData(const JsVar *v);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "417: extern bool jsvIsGetterOrSetter(const JsVar *v);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "524: static ALWAYS_INLINE char jsvStringCharToUpper(char ch) { return (char)((ch >= 97 && ch <= 122) ? ch - 32 : ch); } // a-z",
          "525: static ALWAYS_INLINE char jsvStringCharToLower(char ch) { return (char)((ch >= 65 && ch <= 90)  ? ch + 32 : ch); } // A-Z",
          "530: size_t jsvGetArrayBufferLength(const JsVar *arrayBuffer);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "535: #ifndef SAVE_ON_FLASH",
          "537: JsVar *jsvExecuteGetter(JsVar *getset);",
          "539: void jsvExecuteSetter(JsVar *getset, JsVar *value);",
          "541: void jsvAddGetterOrSetter(JsVar *obj, JsVar *varName, bool isGetter, JsVar *method);",
          "542: #endif",
          "549: void jsvReplaceWith(JsVar *dst, JsVar *src);",
          "554: void jsvReplaceWithOrAddToRoot(JsVar *dst, JsVar *src);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "547: bool jsvIsVariableDefined(JsVar *a);",
          "550: void jsvCheckReferenceError(JsVar *a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "578: JsVar *jsvGetValueOfName(JsVar *name);",
          "",
          "---------------"
        ],
        "src/jsvariterator.c||src/jsvariterator.c": [
          "File: src/jsvariterator.c -> src/jsvariterator.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "265: void jsvObjectIteratorNew(JsvObjectIterator *it, JsVar *obj) {",
          "268: }",
          "",
          "[Removed Lines]",
          "266:   assert(jsvIsArray(obj) || jsvIsObject(obj) || jsvIsFunction(obj));",
          "267:   it->var = jsvGetFirstChild(obj) ? jsvLock(jsvGetFirstChild(obj)) : 0;",
          "",
          "[Added Lines]",
          "266:   assert(jsvIsArray(obj) || jsvIsObject(obj) || jsvIsFunction(obj) || jsvIsGetterOrSetter(obj));",
          "267:   it->var = jsvLockSafe(jsvGetFirstChild(obj));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "279:   if (it->var) {",
          "280:     JsVarRef next = jsvGetNextSibling(it->var);",
          "281:     jsvUnLock(it->var);",
          "283:   }",
          "284: }",
          "",
          "[Removed Lines]",
          "282:     it->var = next ? jsvLock(next) : 0;",
          "",
          "[Added Lines]",
          "282:     it->var = jsvLockSafe(next);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "293:     JsVarRef next = jsvGetNextSibling(it->var);",
          "294:     jsvRemoveChild(parent, it->var);",
          "295:     jsvUnLock(it->var);",
          "297:   }",
          "298: }",
          "",
          "[Removed Lines]",
          "296:     it->var = next ? jsvLock(next) : 0;",
          "",
          "[Added Lines]",
          "296:     it->var = jsvLockSafe(next);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "523: void jsvIteratorNew(JsvIterator *it, JsVar *obj, JsvIteratorFlags flags) {",
          "525:     it->type = JSVI_OBJECT;",
          "526:     if (jsvIsArray(obj) && (flags&JSIF_EVERY_ARRAY_ELEMENT)) {",
          "527:       it->type = JSVI_FULLARRAY;",
          "",
          "[Removed Lines]",
          "524:   if (jsvIsArray(obj) || jsvIsObject(obj) || jsvIsFunction(obj)) {",
          "",
          "[Added Lines]",
          "524:   if (jsvIsArray(obj) || jsvIsObject(obj) || jsvIsFunction(obj) || jsvIsGetterOrSetter(obj)) {",
          "",
          "---------------"
        ],
        "src/jswrap_json.c||src/jswrap_json.c": [
          "File: src/jswrap_json.c -> src/jswrap_json.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "275:   size_t sinceNewLine = 0;",
          "276:   while (jsvObjectIteratorHasValue(it) && !jspIsInterrupted()) {",
          "277:     JsVar *index = jsvObjectIteratorGetKey(it);",
          "279:     bool hidden = jsvIsInternalObjectKey(index) ||",
          "280:         ((flags & JSON_IGNORE_FUNCTIONS) && jsvIsFunction(item)) ||",
          "282:     if (!hidden) {",
          "283:       sinceNewLine++;",
          "284:       if (!first) cbprintf(user_callback, user_data, (flags&JSON_PRETTY)?\", \":\",\");",
          "",
          "[Removed Lines]",
          "278:     JsVar *item = jsvObjectIteratorGetValue(it);",
          "281:         ((flags&JSON_NO_UNDEFINED) && jsvIsUndefined(item));",
          "",
          "[Added Lines]",
          "278:     JsVar *item = jsvGetValueOfName(index);",
          "281:         ((flags&JSON_NO_UNDEFINED) && jsvIsUndefined(item)) ||",
          "282:         jsvIsGetterOrSetter(item);",
          "",
          "---------------"
        ],
        "src/jswrap_object.c||src/jswrap_object.c": [
          "File: src/jswrap_object.c -> src/jswrap_object.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "356:     return 0;",
          "357:   }",
          "362:   bool isBuiltIn = jsvIsNewChild(varName);",
          "363:   JsvIsInternalChecker checkerFunction = jsvGetInternalFunctionCheckerFor(parent);",
          "366:   jsvObjectSetChildAndUnLock(obj, \"writable\", jsvNewFromBool(true));",
          "367:   jsvObjectSetChildAndUnLock(obj, \"enumerable\", jsvNewFromBool(!checkerFunction || !checkerFunction(varName)));",
          "368:   jsvObjectSetChildAndUnLock(obj, \"configurable\", jsvNewFromBool(!isBuiltIn));",
          "371:   return obj;",
          "372: }",
          "",
          "[Removed Lines]",
          "360:   JsVar *var = jsvSkipName(varName);",
          "365:   jsvObjectSetChild(obj, \"value\", var);",
          "370:   jsvUnLock2(var, varName);",
          "",
          "[Added Lines]",
          "366: #ifndef SAVE_ON_FLASH",
          "367:   JsVar *getset = jsvGetValueOfName(varName);",
          "368:   if (jsvIsGetterOrSetter(getset)) {",
          "369:     jsvObjectSetChildAndUnLock(obj, \"get\", jsvObjectGetChild(getset,\"get\",0));",
          "370:     jsvObjectSetChildAndUnLock(obj, \"set\", jsvObjectGetChild(getset,\"set\",0));",
          "371:   } else {",
          "372: #endif",
          "373:     jsvObjectSetChildAndUnLock(obj, \"value\", jsvSkipName(varName));",
          "374: #ifndef SAVE_ON_FLASH",
          "375:   }",
          "376:   jsvUnLock(getset);",
          "377: #endif",
          "379:   jsvUnLock(varName);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "450:   }",
          "452:   JsVar *name = jsvAsArrayIndex(propName);",
          "454:   jsvObjectSetChildVar(parent, name, value);",
          "455:   jsvUnLock2(name, value);",
          "",
          "[Removed Lines]",
          "453:   JsVar *value = jsvObjectGetChild(desc, \"value\", 0);",
          "",
          "[Added Lines]",
          "462:   JsVar *value = 0;",
          "464:   JsVar *getter = jsvObjectGetChild(desc, \"get\", 0);",
          "465:   JsVar *setter = jsvObjectGetChild(desc, \"set\", 0);",
          "466:   if (getter || setter) {",
          "467: #ifdef SAVE_ON_FLASH",
          "468:     jsExceptionHere(JSET_ERROR, \"get/set unsupported in this build\");",
          "469: #else",
          "471:     value = jsvNewWithFlags(JSV_GET_SET);",
          "472:     if (value) {",
          "473:       if (getter) jsvObjectSetChild(value, \"get\", getter);",
          "474:       if (setter) jsvObjectSetChild(value, \"set\", setter);",
          "475:       jsvObjectSetChild(value, \"this\", parent);",
          "476:     }",
          "477: #endif",
          "478:     jsvUnLock2(getter,setter);",
          "479:   }",
          "480:   if (!value) value = jsvObjectGetChild(desc, \"value\", 0);",
          "",
          "---------------"
        ],
        "src/jswrap_process.c||src/jswrap_process.c": [
          "File: src/jswrap_process.c -> src/jswrap_process.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "66:     jsvGetFloat,",
          "67:     jsvGetInteger,",
          "68:     jsvGetBool,",
          "70:     jspeFunctionCall,",
          "71:     jspGetNamedVariable,",
          "72:     jspGetNamedField,",
          "",
          "[Removed Lines]",
          "69:     jspReplaceWith,",
          "",
          "[Added Lines]",
          "69:     jsvReplaceWith,",
          "",
          "---------------"
        ],
        "tests/test_getter.js||tests/test_getter.js": [
          "File: tests/test_getter.js -> tests/test_getter.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: var results = [];",
          "5: var obj = {",
          "6:   log: ['a', 'b', 'c'],",
          "7:   get latest() {",
          "8:     if (this.log.length == 0) {",
          "9:       return undefined;",
          "10:     }",
          "11:     return this.log[this.log.length - 1];",
          "12:   }",
          "13: }",
          "15: results.push(obj.latest);",
          "18: var obj = {",
          "19:   log: ['example','test'],",
          "20:   get latest() {",
          "21:     if (this.log.length == 0) return undefined;",
          "22:     return this.log[this.log.length - 1];",
          "23:   }",
          "24: }",
          "25: results.push(obj.latest); // \"test\".",
          "27: delete obj.latest;",
          "28: results.push(obj.latest); // undefined",
          "30: var o = {a: 0};",
          "32: Object.defineProperty(o, 'b', { get: function() { return this.a + 1; } });",
          "34: results.push(o.b) // Runs the getter, which yields a + 1 (which is 1)",
          "36: result = results==\"c,test,,1\";",
          "",
          "---------------"
        ],
        "tests/test_setter.js||tests/test_setter.js": [
          "File: tests/test_setter.js -> tests/test_setter.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3: var results = [];",
          "5: var language = {",
          "6:   set current(name) {",
          "7:     this.log.push(name);",
          "8:   },",
          "9:   log: []",
          "10: }",
          "12: language.current = 'EN';",
          "13: language.current = 'FA';",
          "15: results.push(JSON.stringify(language.log));",
          "18: var language = {",
          "19:   set current(name) {",
          "20:     this.log.push(name);",
          "21:   },",
          "22:   log: []",
          "23: }",
          "25: language.current = 'EN';",
          "26: results.push(JSON.stringify(language.log)); // ['EN']",
          "28: language.current = 'FA';",
          "29: results.push(JSON.stringify(language.log)); // ['EN', 'FA']",
          "31: delete language.current;",
          "32: language.current = 'EN';",
          "33: results.push(JSON.stringify(language.log)); // ['EN', 'FA']",
          "35: var o = {a: 0};",
          "37: Object.defineProperty(o, 'b', { set: function(x) { this.a = x / 2; } });",
          "39: o.b = 10; // Runs the setter, which assigns 10 / 2 (5) to the 'a' property",
          "40: results.push(o.a) // 5",
          "42: print(results+\"\");",
          "43: result = results=='[\"EN\",\"FA\"],[\"EN\"],[\"EN\",\"FA\"],[\"EN\",\"FA\"],5';",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ce1924193862d58cb43d3d4d9dada710a8361b89",
      "candidate_info": {
        "commit_hash": "ce1924193862d58cb43d3d4d9dada710a8361b89",
        "repo": "espruino/Espruino",
        "commit_url": "https://github.com/espruino/Espruino/commit/ce1924193862d58cb43d3d4d9dada710a8361b89",
        "files": [
          "src/jsvar.c"
        ],
        "message": "fix jsvGetString regression",
        "before_after_code_files": [
          "src/jsvar.c||src/jsvar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsvar.c||src/jsvar.c"
          ],
          "candidate": [
            "src/jsvar.c||src/jsvar.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsvar.c||src/jsvar.c": [
          "File: src/jsvar.c -> src/jsvar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1191:     len--;",
          "1192:     int l = 0;",
          "1194:       str[l] = s[l];",
          "1195:       l++;",
          "1196:     }",
          "",
          "[Removed Lines]",
          "1193:     while (*s && l<len) {",
          "",
          "[Added Lines]",
          "1193:     while (s[l] && l<len) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e6a19a7d77a6e1374a7adb4e56a6563a2222a332",
      "candidate_info": {
        "commit_hash": "e6a19a7d77a6e1374a7adb4e56a6563a2222a332",
        "repo": "espruino/Espruino",
        "commit_url": "https://github.com/espruino/Espruino/commit/e6a19a7d77a6e1374a7adb4e56a6563a2222a332",
        "files": [
          "src/jsvar.c"
        ],
        "message": "remove strncpy - turns out it'll have been padding out whole buffers with 0",
        "before_after_code_files": [
          "src/jsvar.c||src/jsvar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/jsvar.c||src/jsvar.c"
          ],
          "candidate": [
            "src/jsvar.c||src/jsvar.c"
          ]
        }
      },
      "candidate_diff": {
        "src/jsvar.c||src/jsvar.c": [
          "File: src/jsvar.c -> src/jsvar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1185: size_t jsvGetString(const JsVar *v, char *str, size_t len) {",
          "1186:   const char *s = jsvGetConstString(v);",
          "1187:   if (s) {",
          "1191:   } else if (jsvIsInt(v)) {",
          "1192:     itostr(v->varData.integer, str, 10);",
          "1193:     return strlen(str);",
          "",
          "[Removed Lines]",
          "1188:     strncpy(str, s, len);",
          "1189:     str[len-1] = 0;",
          "1190:     return strlen(s);",
          "",
          "[Added Lines]",
          "1186:   assert(len>0);",
          "1191:     len--;",
          "1192:     int l = 0;",
          "1193:     while (*s && l<len) {",
          "1194:       str[l] = s[l];",
          "1195:       l++;",
          "1196:     }",
          "1197:     str[l] = 0;",
          "1198:     return l;",
          "",
          "---------------"
        ]
      }
    }
  ]
}