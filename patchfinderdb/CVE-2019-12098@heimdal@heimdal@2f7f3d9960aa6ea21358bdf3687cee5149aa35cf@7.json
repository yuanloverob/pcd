{
  "cve_id": "CVE-2019-12098",
  "cve_desc": "In the client side of Heimdal before 7.6.0, failure to verify anonymous PKINIT PA-PKINIT-KX key exchange permits a man-in-the-middle attack. This issue is in krb5_init_creds_step in lib/krb5/init_creds_pw.c.",
  "repo": "heimdal/heimdal",
  "patch_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
  "patch_info": {
    "commit_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "repo": "heimdal/heimdal",
    "commit_url": "https://github.com/heimdal/heimdal/commit/2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "files": [
      "lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c"
    ],
    "message": "CVE-2019-12098: krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>\n(cherry picked from commit 38c797e1ae9b9c8f99ae4aa2e73957679031fd2b)",
    "before_after_code_files": [
      "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
    ]
  },
  "patch_diff": {
    "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
      "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2267:            &ctx->req_buffer,",
      "2268:            NULL,",
      "2269:            NULL);",
      "2270:      if (ret == 0)",
      "2271:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2270:      if (ret == 0 && ctx->pk_init_ctx) {",
      "2271:   PA_DATA *pa_pkinit_kx;",
      "2272:   int idx = 0;",
      "2274:   pa_pkinit_kx =",
      "2275:       krb5_find_padata(rep.kdc_rep.padata->val,",
      "2276:          rep.kdc_rep.padata->len,",
      "2277:          KRB5_PADATA_PKINIT_KX,",
      "2278:          &idx);",
      "2280:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
      "2281:        ctx->fast_state.reply_key,",
      "2282:        &ctx->cred.session,",
      "2283:        pa_pkinit_kx);",
      "2284:   if (ret)",
      "2285:       krb5_set_error_message(context, ret,",
      "2286:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
      "2287:   else if (pa_pkinit_kx != NULL)",
      "2288:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
      "2289:      }",
      "",
      "---------------"
    ],
    "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
      "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "208: #define KRB5_INIT_CREDS_CANONICALIZE  1",
      "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
      "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
      "211:     struct {",
      "212:         krb5_gic_process_last_req func;",
      "213:         void *ctx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
      "",
      "---------------"
    ],
    "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
      "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     return ret;",
      "1221: }",
      "1223: static krb5_error_code",
      "1224: pk_rd_pa_reply_dh(krb5_context context,",
      "1225:     const heim_octet_string *indata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
      "1231: _krb5_pk_kx_confirm(krb5_context context,",
      "1232:       krb5_pk_init_ctx ctx,",
      "1233:       krb5_keyblock *reply_key,",
      "1234:       krb5_keyblock *session_key,",
      "1235:       PA_DATA *pa_pkinit_kx)",
      "1236: {",
      "1237:     krb5_error_code ret;",
      "1238:     EncryptedData ed;",
      "1239:     krb5_keyblock ck, sk_verify;",
      "1240:     krb5_crypto ck_crypto = NULL;",
      "1241:     krb5_crypto rk_crypto = NULL;",
      "1242:     size_t len;",
      "1243:     krb5_data data;",
      "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
      "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
      "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
      "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
      "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
      "1252:     if (pa_pkinit_kx == NULL)",
      "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
      "1255:     memset(&ed, 0, sizeof(ed));",
      "1256:     krb5_keyblock_zero(&ck);",
      "1257:     krb5_keyblock_zero(&sk_verify);",
      "1258:     krb5_data_zero(&data);",
      "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
      "1261:           pa_pkinit_kx->padata_value.length,",
      "1262:           &ed, &len);",
      "1263:     if (ret)",
      "1264:  goto out;",
      "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
      "1267:  ret = KRB5_KDCREP_MODIFIED;",
      "1268:  goto out;",
      "1269:     }",
      "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
      "1272:     if (ret)",
      "1273:  goto out;",
      "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
      "1276:          KRB5_KU_PA_PKINIT_KX,",
      "1277:          &ed, &data);",
      "1278:     if (ret)",
      "1279:  goto out;",
      "1281:     ret = decode_EncryptionKey(data.data, data.length,",
      "1282:           &ck, &len);",
      "1283:     if (ret)",
      "1284:  goto out;",
      "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
      "1287:     if (ret)",
      "1288:  goto out;",
      "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
      "1291:         &p1, &p2, session_key->keytype,",
      "1292:         &sk_verify);",
      "1293:     if (ret)",
      "1294:  goto out;",
      "1296:     if (sk_verify.keytype != session_key->keytype ||",
      "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
      "1298:  ret = KRB5_KDCREP_MODIFIED;",
      "1299:  goto out;",
      "1300:     }",
      "1302: out:",
      "1303:     free_EncryptedData(&ed);",
      "1304:     krb5_free_keyblock_contents(context, &ck);",
      "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
      "1306:     if (ck_crypto)",
      "1307:  krb5_crypto_destroy(context, ck_crypto);",
      "1308:     if (rk_crypto)",
      "1309:  krb5_crypto_destroy(context, rk_crypto);",
      "1310:     krb5_data_free(&data);",
      "1312:     return ret;",
      "1313: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d6e29b2c13591a5e807a448e6de5dbebbdcbac50",
      "candidate_info": {
        "commit_hash": "d6e29b2c13591a5e807a448e6de5dbebbdcbac50",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/d6e29b2c13591a5e807a448e6de5dbebbdcbac50",
        "files": [
          "kdc/kerberos5.c"
        ],
        "message": "kdc: do not include PAC for anonymous AS requests\n\nThe PAC will typically contain information that may reveal the identity of a\nprincipal. Do not include it for anonymous requests, at least until such time\nas the PAC plugin API supports indicating that the request was anonymous.\n\n(cherry picked from commit 7a7eb9de2fc93e54362b4c8b9ecc15294bc1c762)",
        "before_after_code_files": [
          "kdc/kerberos5.c||kdc/kerberos5.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/kerberos5.c||kdc/kerberos5.c": [
          "File: kdc/kerberos5.c -> kdc/kerberos5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2161:     }",
          "2165:  generate_pac(r, skey);",
          "2166:     }",
          "",
          "[Removed Lines]",
          "2164:     if (send_pac_p(context, req)) {",
          "",
          "[Added Lines]",
          "2164:     if (send_pac_p(context, req) && !_kdc_is_anon_request(b)) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f2ee12e91deece93540d1240d516e80d6305bf0e",
      "candidate_info": {
        "commit_hash": "f2ee12e91deece93540d1240d516e80d6305bf0e",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/f2ee12e91deece93540d1240d516e80d6305bf0e",
        "files": [
          "kdc/connect.c"
        ],
        "message": "Fixes https://github.com/heimdal/heimdal/issues/310, use PF_UNIX instead of PF_LOCAL\n\n(cherry picked from commit e7879208e47f60bf88f6a2dad00fb77075843f2c)",
        "before_after_code_files": [
          "kdc/connect.c||kdc/connect.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/connect.c||kdc/connect.c": [
          "File: kdc/connect.c -> kdc/connect.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1136:  krb5_errx(context, 1, \"socketpair\");",
          "1137:     socket_set_nonblocking(islive[1], 1);",
          "1138: #endif",
          "",
          "[Removed Lines]",
          "1135:     if (socketpair(PF_LOCAL, SOCK_STREAM, 0, islive) == -1)",
          "",
          "[Added Lines]",
          "1135:     if (socketpair(PF_UNIX, SOCK_STREAM, 0, islive) == -1)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bb2fe326066de3dd093768347a54ae3f6ee3a4e9",
      "candidate_info": {
        "commit_hash": "bb2fe326066de3dd093768347a54ae3f6ee3a4e9",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/bb2fe326066de3dd093768347a54ae3f6ee3a4e9",
        "files": [
          "lib/kadm5/Makefile.am",
          "lib/kadm5/ipropd_master.c",
          "lib/kadm5/libkadm5srv-exports.def",
          "lib/kadm5/log.c",
          "lib/kadm5/version-script.map"
        ],
        "message": "Refactor send_diffs making it progressive\n\nWhen a slave is many diffs behind, send these in batches of up to\n50, then handle other slaves.\n\nThis also implements a fast-path that makes incremental diffs faster\nwhen the log has not rolled over.\n\nRelated code cleanup.",
        "before_after_code_files": [
          "lib/kadm5/Makefile.am||lib/kadm5/Makefile.am",
          "lib/kadm5/ipropd_master.c||lib/kadm5/ipropd_master.c",
          "lib/kadm5/libkadm5srv-exports.def||lib/kadm5/libkadm5srv-exports.def",
          "lib/kadm5/log.c||lib/kadm5/log.c",
          "lib/kadm5/version-script.map||lib/kadm5/version-script.map"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/kadm5/Makefile.am||lib/kadm5/Makefile.am": [
          "File: lib/kadm5/Makefile.am -> lib/kadm5/Makefile.am",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: include $(top_srcdir)/Makefile.am.common",
          "5: libkadm5srv_la_CPPFLAGS = -I$(srcdir)/../krb5",
          "7: lib_LTLIBRARIES = libkadm5srv.la libkadm5clnt.la",
          "8: libkadm5srv_la_LDFLAGS = -version-info 8:1:0",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: ipropd_master_CPPFLAGS = -I$(srcdir)/../krb5",
          "",
          "---------------"
        ],
        "lib/kadm5/ipropd_master.c||lib/kadm5/ipropd_master.c": [
          "File: lib/kadm5/ipropd_master.c -> lib/kadm5/ipropd_master.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: #include \"iprop.h\"",
          "35: #include <rtbl.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "34: #include <krb5_locl.h>",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "158:         size_t          offset;",
          "159:         int             hlen;",
          "160:     } input;",
          "161:     struct slave *next;",
          "162: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "165:     struct {",
          "169:         uint32_t    last_version_sent;",
          "171:     } next_diff;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "540:     return s->tail.header.length || s->tail.packet.length || s->tail.dump;",
          "541: }",
          "543: #define SEND_COMPLETE_MAX_RECORDS 50",
          "545: static int",
          "546: send_tail(krb5_context context, slave *s)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "554: static int",
          "555: more_diffs(slave *s)",
          "556: {",
          "557:     return s->next_diff.more;",
          "558: }",
          "561: #define SEND_DIFFS_MAX_RECORDS 50",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "644: }",
          "646: static int",
          "650: {",
          "651:     krb5_error_code ret;",
          "652:     krb5_storage *dump = NULL;",
          "",
          "[Removed Lines]",
          "647: send_complete (krb5_context context, slave *s, const char *database,",
          "648:         uint32_t current_version, uint32_t oldest_version,",
          "649:         uint32_t initial_log_tstamp)",
          "",
          "[Added Lines]",
          "665: send_complete(krb5_context context, slave *s, const char *database,",
          "666:        uint32_t current_version, uint32_t oldest_version,",
          "667:               uint32_t initial_log_tstamp)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "839: }",
          "841: static int",
          "845: {",
          "",
          "[Removed Lines]",
          "842: send_diffs (kadm5_server_context *server_context, slave *s, int log_fd,",
          "843:      const char *database, uint32_t current_version,",
          "844:      uint32_t current_tstamp)",
          "846:     krb5_context context = server_context->context;",
          "847:     krb5_storage *sp;",
          "848:     uint32_t ver, initial_version, initial_version2;",
          "849:     uint32_t initial_tstamp, initial_tstamp2;",
          "850:     enum kadm_ops op;",
          "851:     uint32_t len;",
          "852:     off_t right, left;",
          "853:     krb5_ssize_t bytes;",
          "854:     krb5_data data;",
          "855:     int ret = 0;",
          "",
          "[Added Lines]",
          "860: diffready(krb5_context context, slave *s)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "862:         return 0;",
          "864:     if (s->flags & SLAVE_F_DEAD) {",
          "866:         return 0;",
          "867:     }",
          "878:         krb5_warnx(context, \"slave %s version %ld already sent\", s->name,",
          "879:                    (long)s->version);",
          "892:     }",
          "903:     if (flock(log_fd, LOCK_SH) == -1) {",
          "904:         krb5_warn(context, errno, \"could not obtain shared lock on log file\");",
          "907:     }",
          "908:     ret = kadm5_log_get_version_fd(server_context, log_fd, LOG_VERSION_FIRST,",
          "936:     }",
          "937:     for (;;) {",
          "947:         }",
          "965:         }",
          "977:     }",
          "992:     }",
          "1000:     }",
          "1011:     }",
          "1020:     }",
          "1027:     }",
          "1030:     if (sp == NULL) {",
          "1034:     }",
          "1036:     krb5_storage_free(sp);",
          "1038:     ret = mk_priv_tail(context, s, &data);",
          "1039:     krb5_data_free(&data);",
          "1041:         ret = send_tail(context, s);",
          "1043:     if (ret && ret != EWOULDBLOCK) {",
          "1045:                   \"KRB-PRIV message\");",
          "1048:     }",
          "1049:     slave_seen(s);",
          "1056: }",
          "",
          "[Removed Lines]",
          "865:         krb5_warnx(context, \"not sending diffs to dead slave %s\", s->name);",
          "873:     ret = send_tail(context, s);",
          "874:     if (ret)",
          "875:         return ret;",
          "877:     if (s->version == current_version) {",
          "880:  sp = krb5_storage_emem();",
          "881:  if (sp == NULL)",
          "882:      krb5_errx(context, IPROPD_RESTART, \"krb5_storage_from_mem\");",
          "883:  ret = krb5_store_uint32(sp, YOU_HAVE_LAST_VERSION);",
          "884:         if (ret == 0)",
          "885:             ret = krb5_storage_to_data(sp, &data);",
          "886:  krb5_storage_free(sp);",
          "887:         if (ret == 0)",
          "888:             ret = mk_priv_tail(context, s, &data);",
          "889:         if (ret == 0)",
          "890:             ret = send_tail(context, s);",
          "891:  return ret;",
          "894:     if (verbose)",
          "895:         krb5_warnx(context, \"sending diffs to live-seeming slave %s\", s->name);",
          "905:         send_are_you_there(context, s);",
          "906:         return errno;",
          "909:                                    &initial_version, &initial_tstamp);",
          "910:     sp = kadm5_log_goto_end(server_context, log_fd);",
          "911:     flock(log_fd, LOCK_UN);",
          "912:     if (ret) {",
          "913:         if (sp != NULL)",
          "914:             krb5_storage_free(sp);",
          "915:         krb5_warn(context, ret, \"send_diffs: failed to read log\");",
          "916:         send_are_you_there(context, s);",
          "917:         return ret;",
          "918:     }",
          "919:     if (sp == NULL) {",
          "920:         send_are_you_there(context, s);",
          "921:         krb5_warn(context, errno ? errno : EINVAL,",
          "922:                   \"send_diffs: failed to read log\");",
          "923:         return errno ? errno : EINVAL;",
          "924:     }",
          "931:     right = krb5_storage_seek(sp, 0, SEEK_CUR);",
          "932:     if (right == (off_t)-1) {",
          "933:         krb5_storage_free(sp);",
          "934:         send_are_you_there(context, s);",
          "935:         return errno;",
          "938:  ret = kadm5_log_previous (context, sp, &ver, NULL, &op, &len);",
          "939:  if (ret)",
          "940:      krb5_err(context, IPROPD_RESTART, ret,",
          "941:        \"send_diffs: failed to find previous entry\");",
          "942:  left = krb5_storage_seek(sp, -16, SEEK_CUR);",
          "943:         if (left == (off_t)-1) {",
          "944:             krb5_storage_free(sp);",
          "945:             send_are_you_there(context, s);",
          "946:             return errno;",
          "948:  if (ver == s->version + 1)",
          "949:      break;",
          "955:  if (ver == s->version && !(ver == 0 && op == kadm_nop)) {",
          "960:             krb5_storage_free(sp);",
          "961:             krb5_warnx(context, \"iprop log truncated while sending diffs to \"",
          "962:                        \"slave??  ver = %lu\", (unsigned long)ver);",
          "963:             send_are_you_there(context, s);",
          "964:             return 0;",
          "968:  if (left == 0 || (ver == 0 && op == kadm_nop)) {",
          "969:      krb5_storage_free(sp);",
          "970:      krb5_warnx(context,",
          "971:          \"slave %s (version %lu) out of sync with master \"",
          "972:          \"(first version in log %lu), sending complete database\",",
          "973:          s->name, (unsigned long)s->version, (unsigned long)ver);",
          "974:      return send_complete (context, s, database, current_version, ver,",
          "975:                                   initial_tstamp);",
          "976:  }",
          "979:     assert(ver == s->version + 1);",
          "981:     krb5_warnx(context,",
          "982:         \"syncing slave %s from version %lu to version %lu\",",
          "983:         s->name, (unsigned long)s->version,",
          "984:         (unsigned long)current_version);",
          "986:     ret = krb5_data_alloc (&data, right - left + 4);",
          "987:     if (ret) {",
          "988:  krb5_storage_free(sp);",
          "989:  krb5_warn (context, ret, \"send_diffs: krb5_data_alloc\");",
          "990:         send_are_you_there(context, s);",
          "991:  return 1;",
          "993:     bytes = krb5_storage_read(sp, (char *)data.data + 4, data.length - 4);",
          "994:     krb5_storage_free(sp);",
          "995:     if (bytes != data.length - 4) {",
          "996:         krb5_warnx(context, \"iprop log truncated while sending diffs to \"",
          "997:                    \"slave??  ver = %lu\", (unsigned long)ver);",
          "998:         send_are_you_there(context, s);",
          "999:         return 1;",
          "1007:     if (flock(log_fd, LOCK_SH) == -1) {",
          "1008:         krb5_warn(context, errno, \"could not obtain shared lock on log file\");",
          "1009:         send_are_you_there(context, s);",
          "1010:         return 1;",
          "1012:     ret = kadm5_log_get_version_fd(server_context, log_fd, LOG_VERSION_FIRST,",
          "1013:                                    &initial_version2, &initial_tstamp2);",
          "1014:     flock(log_fd, LOCK_UN);",
          "1015:     if (ret) {",
          "1016:         krb5_warn(context, ret,",
          "1017:                    \"send_diffs: failed to read log while producing diffs\");",
          "1018:         send_are_you_there(context, s);",
          "1019:         return 1;",
          "1021:     if (initial_version != initial_version2 ||",
          "1022:         initial_tstamp != initial_tstamp2) {",
          "1023:         krb5_warn(context, ret,",
          "1024:                    \"send_diffs: log truncated while producing diffs\");",
          "1025:         send_are_you_there(context, s);",
          "1026:         return 1;",
          "1029:     sp = krb5_storage_from_data (&data);",
          "1031:  krb5_warnx (context, \"send_diffs: krb5_storage_from_data\");",
          "1032:         send_are_you_there(context, s);",
          "1033:  return 1;",
          "1035:     krb5_store_uint32 (sp, FOR_YOU);",
          "1040:     if (ret == 0)",
          "1044:  krb5_warn(context, ret, \"send_diffs: making or sending \"",
          "1046:  slave_dead(context, s);",
          "1047:  return 1;",
          "1051:     s->version = current_version;",
          "1053:     krb5_warnx(context, \"slave %s is now up to date (%u)\", s->name, s->version);",
          "1055:     return 0;",
          "",
          "[Added Lines]",
          "870:         if (verbose)",
          "871:             krb5_warnx(context, \"not sending diffs to dead slave %s\", s->name);",
          "876:     if (send_tail(context, s) != 0)",
          "877:         return 0;",
          "879:     return 1;",
          "880: }",
          "882: static int",
          "883: nodiffs(krb5_context context, slave *s, uint32_t current_version)",
          "884: {",
          "885:     krb5_storage *sp;",
          "886:     krb5_data data;",
          "887:     int ret;",
          "889:     if (s->version < current_version)",
          "890:         return 0;",
          "896:     s->next_diff.more = 0;",
          "898:     if (verbose)",
          "901:     sp = krb5_storage_emem();",
          "902:     if (sp == NULL)",
          "903:         krb5_errx(context, IPROPD_RESTART, \"krb5_storage_from_mem\");",
          "905:     ret = krb5_store_uint32(sp, YOU_HAVE_LAST_VERSION);",
          "906:     if (ret == 0) {",
          "907:         krb5_data_zero(&data);",
          "908:         ret = krb5_storage_to_data(sp, &data);",
          "910:     krb5_storage_free(sp);",
          "911:     if (ret == 0) {",
          "912:         ret = mk_priv_tail(context, s, &data);",
          "913:         krb5_data_free(&data);",
          "914:     }",
          "915:     if (ret == 0)",
          "916:         send_tail(context, s);",
          "918:     return 1;",
          "919: }",
          "924: static int",
          "925: get_first(kadm5_server_context *server_context, int log_fd,",
          "926:           uint32_t *initial_verp, uint32_t *initial_timep)",
          "927: {",
          "928:     krb5_context context = server_context->context;",
          "929:     int ret;",
          "937:         return -1;",
          "941:                                    initial_verp, initial_timep);",
          "942:     if (ret != 0) {",
          "943:         flock(log_fd, LOCK_UN);",
          "944:         krb5_warnx(context, \"could not read initial log entry\");",
          "945:         return -1;",
          "948:     return 0;",
          "949: }",
          "961: static off_t",
          "962: get_left(kadm5_server_context *server_context, slave *s, krb5_storage *sp,",
          "963:          int log_fd, uint32_t current_version,",
          "964:          uint32_t *initial_verp, uint32_t *initial_timep)",
          "965: {",
          "966:     krb5_context context = server_context->context;",
          "967:     off_t pos;",
          "968:     off_t left;",
          "969:     int ret;",
          "972:         uint32_t ver = s->version;",
          "975:         ret = get_first(server_context, log_fd,",
          "976:                         initial_verp, initial_timep);",
          "977:         if (ret != 0)",
          "978:             return -1;",
          "981:         if (ver == 0 || ver < *initial_verp || ver > current_version) {",
          "982:             flock(log_fd, LOCK_UN);",
          "983:             return 0;",
          "987:         if (kadm5_log_goto_end(server_context, sp) != 0 ||",
          "988:             (pos = krb5_storage_seek(sp, 0, SEEK_CUR)) < 0)",
          "989:             goto err;",
          "995:         if (s->next_diff.last_version_sent > 0 &&",
          "996:             s->next_diff.off_next_version > 0 &&",
          "997:             s->next_diff.off_next_version < pos &&",
          "998:             s->next_diff.initial_version == *initial_verp &&",
          "999:             s->next_diff.initial_tstamp == *initial_timep) {",
          "1004:             left = s->next_diff.off_next_version;",
          "1005:             if (krb5_storage_seek(sp, left, SEEK_SET) != left)",
          "1006:                 goto err;",
          "1007:             if (kadm5_log_next(context, sp, &ver, NULL, NULL, NULL) == 0 &&",
          "1008:                 ver == s->next_diff.last_version_sent + 1)",
          "1009:                 return left;",
          "1012:         if (krb5_storage_seek(sp, pos, SEEK_SET) != pos)",
          "1013:             goto err;",
          "1020:         flock(log_fd, LOCK_UN);",
          "1023:         for (;;) {",
          "1024:             enum kadm_ops op;",
          "1025:             uint32_t len;",
          "1027:             ret = kadm5_log_previous(context, sp, &ver, NULL, &op, &len);",
          "1028:             if (ret)",
          "1029:                 return -1;",
          "1030:             left = krb5_storage_seek(sp, -16, SEEK_CUR);",
          "1031:             if (left < 0)",
          "1032:                 return left;",
          "1033:             if (ver == s->version + 1)",
          "1034:                 break;",
          "1040:             if (ver == s->version) {",
          "1041:                 krb5_warnx(context, \"iprop log truncated while sending diffs \"",
          "1042:                            \"to slave??  ver = %lu\", (unsigned long)ver);",
          "1043:                 return -1;",
          "1044:             }",
          "1047:             if (left == 0 || (ver == 0 && op == kadm_nop))",
          "1048:                 return 0;",
          "1049:         }",
          "1050:         assert(ver == s->version + 1);",
          "1053:         s->next_diff.last_version_sent = s->version;",
          "1054:         s->next_diff.off_next_version = left;",
          "1055:         s->next_diff.initial_version = *initial_verp;",
          "1056:         s->next_diff.initial_tstamp = *initial_timep;",
          "1069:     return left;",
          "1071:  err:",
          "1072:     flock(log_fd, LOCK_UN);",
          "1073:     return -1;",
          "1074: }",
          "1076: static off_t",
          "1077: get_right(krb5_context context, int log_fd, krb5_storage *sp,",
          "1078:           int lastver, slave *s, off_t left, uint32_t *verp)",
          "1079: {",
          "1080:     int ret = 0;",
          "1081:     int i = 0;",
          "1082:     uint32_t ver = s->version;",
          "1083:     off_t right = krb5_storage_seek(sp, left, SEEK_SET);",
          "1085:     if (right <= 0) {",
          "1086:         flock(log_fd, LOCK_UN);",
          "1087:         return -1;",
          "1091:     for (; ret == 0 && i < SEND_DIFFS_MAX_RECORDS && ver < lastver; ++i) {",
          "1092:         uint32_t logver;",
          "1094:         ret = kadm5_log_next(context, sp, &logver, NULL, NULL, NULL);",
          "1095:         if (logver != ++ver)",
          "1096:             ret = KADM5_LOG_CORRUPT;",
          "1099:     if (ret == 0)",
          "1100:         right = krb5_storage_seek(sp, 0, SEEK_CUR);",
          "1101:     else",
          "1102:         right = -1;",
          "1103:     if (right <= 0) {",
          "1104:         flock(log_fd, LOCK_UN);",
          "1105:         return -1;",
          "1108:     return right;",
          "1109: }",
          "1111: static void",
          "1112: send_diffs(kadm5_server_context *server_context, slave *s, int log_fd,",
          "1113:            const char *database, uint32_t current_version)",
          "1114: {",
          "1115:     krb5_context context = server_context->context;",
          "1116:     krb5_storage *sp;",
          "1117:     uint32_t initial_version;",
          "1118:     uint32_t initial_tstamp;",
          "1119:     uint32_t ver;",
          "1120:     off_t left = 0;",
          "1121:     off_t right = 0;",
          "1122:     krb5_ssize_t bytes;",
          "1123:     krb5_data data;",
          "1124:     int ret = 0;",
          "1126:     if (!diffready(context, s) || nodiffs(context, s, current_version))",
          "1127:         return;",
          "1129:     if (verbose)",
          "1130:         krb5_warnx(context, \"sending diffs to live-seeming slave %s\", s->name);",
          "1132:     sp = krb5_storage_from_fd(log_fd);",
          "1133:     if (sp == NULL)",
          "1134:         krb5_err(context, IPROPD_RESTART_SLOW, ENOMEM,",
          "1135:                  \"send_diffs: out of memory\");",
          "1137:     left = get_left(server_context, s, sp, log_fd, current_version,",
          "1138:                     &initial_version, &initial_tstamp);",
          "1139:     if (left < 0) {",
          "1140:         krb5_storage_free(sp);",
          "1141:         slave_dead(context, s);",
          "1142:         return;",
          "1143:     }",
          "1145:     if (left == 0) {",
          "1147:         krb5_storage_free(sp);",
          "1148:         send_complete(context, s, database, current_version,",
          "1149:                       initial_version, initial_tstamp);",
          "1150:         return;",
          "1154:     right = get_right(server_context->context, log_fd, sp, current_version,",
          "1155:                       s, left, &ver);",
          "1156:     if (right == left) {",
          "1157:         flock(log_fd, LOCK_UN);",
          "1158:         krb5_storage_free(sp);",
          "1159:         return;",
          "1160:     }",
          "1161:     if (right < left) {",
          "1162:         assert(right < 0);",
          "1163:         krb5_storage_free(sp);",
          "1164:         slave_dead(context, s);",
          "1165:         return;",
          "1168:     if (krb5_storage_seek(sp, left, SEEK_SET) != left) {",
          "1169:         ret = errno ? errno : EIO;",
          "1170:         flock(log_fd, LOCK_UN);",
          "1171:         krb5_warn(context, ret, \"send_diffs: krb5_storage_seek\");",
          "1172:         krb5_storage_free(sp);",
          "1173:         slave_dead(context, s);",
          "1174:         return;",
          "1175:     }",
          "1177:     ret = krb5_data_alloc(&data, right - left + 4);",
          "1178:     if (ret) {",
          "1179:         flock(log_fd, LOCK_UN);",
          "1180:         krb5_warn(context, ret, \"send_diffs: krb5_data_alloc\");",
          "1181:         krb5_storage_free(sp);",
          "1182:         slave_dead(context, s);",
          "1183:         return;",
          "1184:     }",
          "1186:     bytes = krb5_storage_read(sp, (char *)data.data + 4, data.length - 4);",
          "1187:     flock(log_fd, LOCK_UN);",
          "1188:     krb5_storage_free(sp);",
          "1189:     if (bytes != data.length - 4)",
          "1190:         krb5_errx(context, IPROPD_RESTART, \"locked log truncated???\");",
          "1192:     sp = krb5_storage_from_data(&data);",
          "1194:         krb5_err(context, IPROPD_RESTART_SLOW, ENOMEM, \"out of memory\");",
          "1195:         krb5_warnx(context, \"send_diffs: krb5_storage_from_data\");",
          "1196:         return;",
          "1198:     krb5_store_uint32(sp, FOR_YOU);",
          "1203:     if (ret == 0) {",
          "1205:         s->next_diff.last_version_sent = ver;",
          "1206:         s->next_diff.off_next_version = right;",
          "1207:         s->next_diff.initial_version = initial_version;",
          "1208:         s->next_diff.initial_tstamp = initial_tstamp;",
          "1209:         s->next_diff.more = ver < current_version;",
          "1212:         krb5_warnx(context,",
          "1213:                    \"syncing slave %s from version %lu to version %lu\",",
          "1214:                    s->name, (unsigned long)s->version,",
          "1215:                    (unsigned long)ver);",
          "1216:         s->version = ver;",
          "1217:     }",
          "1220:         krb5_warn(context, ret, \"send_diffs: making or sending \"",
          "1222:         slave_dead(context, s);",
          "1223:         return;",
          "1226:     return;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1126: }",
          "1128: static int",
          "1132: {",
          "1133:     krb5_context context = server_context->context;",
          "1134:     int ret = 0;",
          "",
          "[Removed Lines]",
          "1129: process_msg (kadm5_server_context *server_context, slave *s, int log_fd,",
          "1130:       const char *database, uint32_t current_version,",
          "1131:              uint32_t current_tstamp)",
          "",
          "[Added Lines]",
          "1300: process_msg(kadm5_server_context *server_context, slave *s, int log_fd,",
          "1301:      const char *database, uint32_t current_version)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1202:  }",
          "1203:         if ((s->version_ack = tmp) < s->version)",
          "1204:             break;",
          "1207:         break;",
          "1208:     case I_AM_HERE :",
          "1209:         if (verbose)",
          "",
          "[Removed Lines]",
          "1205:         ret = send_diffs(server_context, s, log_fd, database, current_version,",
          "1206:                          current_tstamp);",
          "",
          "[Added Lines]",
          "1375:         send_diffs(server_context, s, log_fd, database, current_version);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1389:     int log_fd;",
          "1390:     slave *slaves = NULL;",
          "1391:     uint32_t current_version = 0, old_version = 0;",
          "1393:     krb5_keytab keytab;",
          "1394:     char **files;",
          "1395:     int aret;",
          "",
          "[Removed Lines]",
          "1392:     uint32_t current_tstamp = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1482:         krb5_err(context, 1, errno, \"shared flock %s\",",
          "1483:                  server_context->log_context.log_file);",
          "1484:     kadm5_log_get_version_fd(server_context, log_fd, LOG_VERSION_LAST,",
          "1486:     flock(log_fd, LOCK_UN);",
          "1488:     signal_fd = make_signal_socket (context);",
          "",
          "[Removed Lines]",
          "1485:                              &current_version, &current_tstamp);",
          "",
          "[Added Lines]",
          "1653:                              &current_version, NULL);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1523:      if (p->flags & SLAVE_F_DEAD)",
          "1524:   continue;",
          "1525:      FD_SET(p->fd, &readset);",
          "1527:                 FD_SET(p->fd, &writeset);",
          "1528:      max_fd = max(max_fd, p->fd);",
          "1529:  }",
          "",
          "[Removed Lines]",
          "1526:             if (have_tail(p))",
          "",
          "[Added Lines]",
          "1694:             if (have_tail(p) || more_diffs(p))",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1557:                 krb5_err(context, IPROPD_RESTART, errno, \"shared flock %s\",",
          "1558:                          server_context->log_context.log_file);",
          "1559:             kadm5_log_get_version_fd(server_context, log_fd, LOG_VERSION_LAST,",
          "1561:             flock(log_fd, LOCK_UN);",
          "1562:         }",
          "",
          "[Removed Lines]",
          "1560:                                      &current_version, &current_tstamp);",
          "",
          "[Added Lines]",
          "1728:                                      &current_version, NULL);",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1570:                 krb5_err(context, IPROPD_RESTART, errno,",
          "1571:                          \"could not lock log file\");",
          "1572:      kadm5_log_get_version_fd(server_context, log_fd, LOG_VERSION_LAST,",
          "1574:      flock(log_fd, LOCK_UN);",
          "1576:      if (current_version > old_version) {",
          "",
          "[Removed Lines]",
          "1573:                                      &current_version, &current_tstamp);",
          "",
          "[Added Lines]",
          "1741:                                      &current_version, NULL);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1582:   for (p = slaves; p != NULL; p = p->next) {",
          "1583:       if (p->flags & SLAVE_F_DEAD)",
          "1584:    continue;",
          "1587:   }",
          "1588:                 old_version = current_version;",
          "1589:      }",
          "",
          "[Removed Lines]",
          "1585:       send_diffs (server_context, p, log_fd, database,",
          "1586:                                 current_version, current_tstamp);",
          "",
          "[Added Lines]",
          "1753:       send_diffs(server_context, p, log_fd, database,",
          "1754:                                current_version);",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1614:                 krb5_err(context, IPROPD_RESTART, errno, \"shared flock %s\",",
          "1615:                          server_context->log_context.log_file);",
          "1616:      kadm5_log_get_version_fd(server_context, log_fd, LOG_VERSION_LAST,",
          "1618:      flock(log_fd, LOCK_UN);",
          "1619:      if (current_version != old_version) {",
          "",
          "[Removed Lines]",
          "1617:                                      &current_version, &current_tstamp);",
          "",
          "[Added Lines]",
          "1785:                                      &current_version, NULL);",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1637:   for (p = slaves; p != NULL; p = p->next) {",
          "1638:       if (p->flags & SLAVE_F_DEAD)",
          "1639:    continue;",
          "1642:   }",
          "1643:      } else {",
          "1644:                 if (verbose)",
          "",
          "[Removed Lines]",
          "1640:       send_diffs (server_context, p, log_fd, database,",
          "1641:                                 current_version, current_tstamp);",
          "",
          "[Added Lines]",
          "1808:       send_diffs(server_context, p, log_fd, database,",
          "1809:                                current_version);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1651:  for (p = slaves; p != NULL; p = p->next) {",
          "1652:             if (!(p->flags & SLAVE_F_DEAD) &&",
          "1653:                 FD_ISSET(p->fd, &writeset) &&",
          "1658:             }",
          "1659:         }",
          "",
          "[Removed Lines]",
          "1654:                 have_tail(p) &&",
          "1655:                 send_tail(context, p) == 0) {",
          "1656:                 (void) send_diffs(server_context, p, log_fd, database,",
          "1657:                                   current_version, current_tstamp);",
          "",
          "[Added Lines]",
          "1822:                 ((have_tail(p) && send_tail(context, p) == 0) ||",
          "1823:                  (!have_tail(p) && more_diffs(p)))) {",
          "1824:                 send_diffs(server_context, p, log_fd, database,",
          "1825:                            current_version);",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1665:   --ret;",
          "1666:   assert(ret >= 0);",
          "1667:                 ret = process_msg(server_context, p, log_fd, database,",
          "1669:                 if (ret && ret != EWOULDBLOCK)",
          "1670:       slave_dead(context, p);",
          "1671:      } else if (slave_gone_p (p))",
          "",
          "[Removed Lines]",
          "1668:                                   current_version, current_tstamp);",
          "",
          "[Added Lines]",
          "1836:                                   current_version);",
          "",
          "---------------"
        ],
        "lib/kadm5/libkadm5srv-exports.def||lib/kadm5/libkadm5srv-exports.def": [
          "File: lib/kadm5/libkadm5srv-exports.def -> lib/kadm5/libkadm5srv-exports.def",
          "--- Hunk 1 ---",
          "[Context before]",
          "63: ;! kadm5_log_signal_socket",
          "64:  kadm5_log_signal_socket_info    ;!",
          "65:  kadm5_log_previous",
          "66:  kadm5_log_goto_end",
          "67:  kadm5_log_foreach",
          "68:  kadm5_log_get_version_fd",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "66:  kadm5_log_goto_first",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "75:  kadm5_log_init_nb",
          "76:  kadm5_log_init_nolock",
          "77:  kadm5_log_init_sharedlock",
          "78:  kadm5_log_nop",
          "79:  kadm5_log_truncate",
          "80:  kadm5_log_modify",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "79:  kadm5_log_next",
          "",
          "---------------"
        ],
        "lib/kadm5/log.c||lib/kadm5/log.c": [
          "File: lib/kadm5/log.c -> lib/kadm5/log.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "464: }",
          "466: static kadm5_ret_t truncate_if_needed(kadm5_server_context *);",
          "",
          "[Removed Lines]",
          "467: static krb5_storage *log_goto_first(kadm5_server_context *, int);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "507:     switch (which) {",
          "508:     case LOG_VERSION_LAST:",
          "514:         break;",
          "515:     case LOG_VERSION_FIRST:",
          "521:         break;",
          "522:     case LOG_VERSION_UBER:",
          "526:         if (krb5_storage_seek(sp, 0, SEEK_SET) == 0)",
          "527:             ret = get_header(sp, LOG_DOPEEK, ver, tstamp, &op, &len);",
          "528:         else",
          "529:             ret = errno;",
          "530:         if (ret == 0 && (op != kadm_nop || len != LOG_UBER_LEN || *ver != 0))",
          "531:             ret = KADM5_LOG_NEEDS_UPGRADE;",
          "533:         break;",
          "534:     default:",
          "536:     }",
          "538:     return ret;",
          "539: }",
          "",
          "[Removed Lines]",
          "509:         sp = kadm5_log_goto_end(server_context, fd);",
          "510:         if (sp == NULL)",
          "511:             return errno;",
          "512:         ret = get_version_prev(sp, ver, tstamp);",
          "513:         krb5_storage_free(sp);",
          "516:         sp = log_goto_first(server_context, fd);",
          "517:         if (sp == NULL)",
          "518:             return errno;",
          "519:         ret = get_header(sp, LOG_DOPEEK, ver, tstamp, NULL, NULL);",
          "520:         krb5_storage_free(sp);",
          "523:         sp = krb5_storage_from_fd(server_context->log_context.log_fd);",
          "524:         if (sp == NULL)",
          "525:             return errno;",
          "532:         krb5_storage_free(sp);",
          "535:         return ENOTSUP;",
          "",
          "[Added Lines]",
          "506:     sp = krb5_storage_from_fd(fd);",
          "507:     if (sp == NULL)",
          "508:         return errno ? errno : ENOMEM;",
          "512:         ret = kadm5_log_goto_end(server_context, sp);",
          "513:         if (ret == 0)",
          "514:             ret = get_version_prev(sp, ver, tstamp);",
          "517:         ret = kadm5_log_goto_first(server_context, sp);",
          "518:         if (ret == 0)",
          "519:             ret = get_header(sp, LOG_DOPEEK, ver, tstamp, NULL, NULL);",
          "530:         ret = ENOTSUP;",
          "531:         break;",
          "534:     krb5_storage_free(sp);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1828:     replay_data.ver = 0;",
          "1829:     replay_data.mode = mode;",
          "1832:     if (sp == NULL)",
          "1833:         return errno ? errno : EIO;",
          "1837:     if (ret == 0 && mode == kadm_recover_commit && replay_data.count != 1)",
          "1838:         ret = KADM5_LOG_CORRUPT;",
          "1839:     krb5_storage_free(sp);",
          "",
          "[Removed Lines]",
          "1831:     sp = kadm5_log_goto_end(context, context->log_context.log_fd);",
          "1835:     ret = kadm5_log_foreach(context, kadm_forward | kadm_unconfirmed,",
          "1836:                             NULL, recover_replay, &replay_data);",
          "",
          "[Added Lines]",
          "1828:     sp = krb5_storage_from_fd(context->log_context.log_fd);",
          "1831:     ret = kadm5_log_goto_end(context, sp);",
          "1833:     if (ret == 0)",
          "1834:         ret = kadm5_log_foreach(context, kadm_forward | kadm_unconfirmed,",
          "1835:                                 NULL, recover_replay, &replay_data);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1886:         sp = krb5_storage_from_fd(fd);",
          "1887:         if (sp == NULL)",
          "1890:         log_end = krb5_storage_seek(sp, 0, SEEK_END);",
          "1891:         if (log_end == -1 ||",
          "",
          "[Removed Lines]",
          "1888:             return errno;",
          "",
          "[Added Lines]",
          "1887:             return errno ? errno : ENOMEM;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1896:         }",
          "1897:     } else {",
          "1900:         if (sp == NULL)",
          "1902:         log_end = krb5_storage_seek(sp, 0, SEEK_CUR);",
          "1903:     }",
          "",
          "[Removed Lines]",
          "1899:         sp = kadm5_log_goto_end(context, fd);",
          "1901:             return errno;",
          "",
          "[Added Lines]",
          "1898:         sp = krb5_storage_from_fd(fd);",
          "1900:             return errno ? errno : ENOMEM;",
          "1901:         ret = kadm5_log_goto_end(context, sp);",
          "1902:         if (ret != 0)",
          "1903:             return ret;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2047: }",
          "2055: {",
          "2057:     enum kadm_ops op;",
          "2058:     uint32_t ver, len;",
          "2059:     kadm5_ret_t ret;",
          "2070:     if (krb5_storage_seek(sp, 0, SEEK_SET) == -1)",
          "2073:     ret = get_header(sp, LOG_DOPEEK, &ver, NULL, &op, &len);",
          "2084: }",
          "2095: {",
          "2096:     krb5_error_code ret = 0;",
          "2098:     enum kadm_ops op;",
          "2099:     uint32_t ver, len;",
          "2100:     uint32_t tstamp;",
          "2101:     uint64_t off;",
          "2116:     ret = get_header(sp, LOG_NOPEEK, &ver, &tstamp, &op, &len);",
          "2117:     if (ret == HEIM_ERR_EOF) {",
          "2118:         (void) krb5_storage_seek(sp, 0, SEEK_SET);",
          "2120:     }",
          "2121:     if (ret == KADM5_LOG_CORRUPT)",
          "2122:         goto truncate;",
          "2123:     if (ret)",
          "2126:     if (op == kadm_nop && len == LOG_UBER_LEN) {",
          "",
          "[Removed Lines]",
          "2053: static krb5_storage *",
          "2054: log_goto_first(kadm5_server_context *server_context, int fd)",
          "2056:     krb5_storage *sp;",
          "2061:     if (fd == -1) {",
          "2062:         errno = EINVAL;",
          "2063:         return NULL;",
          "2064:     }",
          "2066:     sp = krb5_storage_from_fd(fd);",
          "2067:     if (sp == NULL)",
          "2068:         return NULL;",
          "2071:         return NULL;",
          "2074:     if (ret) {",
          "2075:         krb5_storage_free(sp);",
          "2076:         errno = ret;",
          "2077:         return NULL;",
          "2078:     }",
          "2079:     if (op == kadm_nop && len == LOG_UBER_LEN && seek_next(sp) == -1) {",
          "2080:         krb5_storage_free(sp);",
          "2081:         return NULL;",
          "2082:     }",
          "2083:     return sp;",
          "2093: krb5_storage *",
          "2094: kadm5_log_goto_end(kadm5_server_context *server_context, int fd)",
          "2097:     krb5_storage *sp;",
          "2103:     if (fd == -1) {",
          "2104:         errno = EINVAL;",
          "2105:         return NULL;",
          "2106:     }",
          "2108:     sp = krb5_storage_from_fd(fd);",
          "2109:     if (sp == NULL)",
          "2110:         return NULL;",
          "2112:     if (krb5_storage_seek(sp, 0, SEEK_SET) == -1) {",
          "2113:         ret = errno;",
          "2114:         goto fail;",
          "2115:     }",
          "2119:         return sp;",
          "2124:         goto fail;",
          "",
          "[Added Lines]",
          "2055: kadm5_ret_t",
          "2056: kadm5_log_goto_first(kadm5_server_context *server_context, krb5_storage *sp)",
          "2063:         return KADM5_LOG_CORRUPT;",
          "2066:     if (ret)",
          "2067:         return ret;",
          "2068:     if (op == kadm_nop && len == LOG_UBER_LEN && seek_next(sp) == -1)",
          "2069:         return KADM5_LOG_CORRUPT;",
          "2070:     return 0;",
          "2076: kadm5_ret_t",
          "2077: kadm5_log_goto_end(kadm5_server_context *server_context, krb5_storage *sp)",
          "2085:     if (krb5_storage_seek(sp, 0, SEEK_SET) == -1)",
          "2086:         return errno;",
          "2090:         return 0;",
          "2095:         return ret;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2130:             goto truncate;",
          "2132:         if (krb5_storage_seek(sp, off, SEEK_SET) == -1)",
          "2135:         if (off >= LOG_UBER_SZ) {",
          "2136:             ret = get_version_prev(sp, &ver, NULL);",
          "2137:             if (ret == 0)",
          "2139:         }",
          "2141:         goto truncate;",
          "",
          "[Removed Lines]",
          "2133:             goto fail;",
          "2138:                 return sp;",
          "",
          "[Added Lines]",
          "2104:             return ret;",
          "2109:                 return 0;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2153:     ret = get_version_prev(sp, &ver, NULL);",
          "2154:     if (ret)",
          "2155:         goto truncate;",
          "2158: truncate:",
          "",
          "[Removed Lines]",
          "2156:     return sp;",
          "",
          "[Added Lines]",
          "2127:     return 0;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2162:         if (ret == 0) {",
          "2163:             krb5_warn(server_context->context, ret,",
          "2164:                       \"Invalid log; truncating to recover\");",
          "2168:         }",
          "2169:     }",
          "2170:     krb5_warn(server_context->context, ret,",
          "2171:               \"Invalid log; truncate to recover\");",
          "2177: }",
          "",
          "[Removed Lines]",
          "2165:             if (krb5_storage_seek(sp, 0, SEEK_END) == -1)",
          "2166:                 return NULL;",
          "2167:             return sp;",
          "2173: fail:",
          "2174:     errno = ret;",
          "2175:     krb5_storage_free(sp);",
          "2176:     return NULL;",
          "",
          "[Added Lines]",
          "2136:             if (krb5_storage_seek(sp, 0, SEEK_END) >= 0)",
          "2137:                 return 0;",
          "2140:     ret = KADM5_LOG_CORRUPT;",
          "2143:     return ret;",
          "2144: }",
          "2153: kadm5_ret_t",
          "2154: kadm5_log_next(krb5_context context,",
          "2155:                krb5_storage *sp,",
          "2156:                uint32_t *verp,",
          "2157:                time_t *tstampp,",
          "2158:                enum kadm_ops *opp,",
          "2159:                uint32_t *lenp)",
          "2160: {",
          "2161:     uint32_t len = 0;",
          "2162:     uint32_t len2 = 0;",
          "2163:     uint32_t ver = verp ? *verp : 0;",
          "2164:     uint32_t ver2;",
          "2165:     uint32_t tstamp = tstampp ? *tstampp : 0;",
          "2166:     enum kadm_ops op = kadm_nop;",
          "2167:     off_t off = krb5_storage_seek(sp, 0, SEEK_CUR);",
          "2168:     kadm5_ret_t ret = get_header(sp, LOG_NOPEEK, &ver, &tstamp, &op, &len);",
          "2171:     if (ret == 0 && krb5_storage_seek(sp, len, SEEK_CUR) == -1)",
          "2172:         ret = errno;",
          "2174:     if (ret == 0)",
          "2175:         ret = krb5_ret_uint32(sp, &len2);",
          "2176:     if (ret == 0)",
          "2177:         ret = krb5_ret_uint32(sp, &ver2);",
          "2178:     if (ret == 0 && (len != len2 || ver != ver2))",
          "2179:         ret = KADM5_LOG_CORRUPT;",
          "2180:     if (ret != 0) {",
          "2181:         (void) krb5_storage_seek(sp, off, SEEK_SET);",
          "2182:         return ret;",
          "2183:     }",
          "2185:     if (verp)",
          "2187:     if (tstampp)",
          "2189:     if (opp)",
          "2191:     if (lenp)",
          "2193:     return 0;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "2549:     (void) lseek(context->log_context.log_fd, off, SEEK_SET);",
          "2551:     if (sp == NULL)",
          "2555:     krb5_storage_free(sp);",
          "2556:     return ret;",
          "2557: }",
          "",
          "[Removed Lines]",
          "2550:     sp = kadm5_log_goto_end(context, context->log_context.log_fd);",
          "2552:         return ENOMEM;",
          "2553:     ret = get_version_prev(sp, &context->log_context.version, &last_tstamp);",
          "2554:     context->log_context.last_time = last_tstamp;",
          "",
          "[Added Lines]",
          "2567:     sp = krb5_storage_from_fd(context->log_context.log_fd);",
          "2569:  return errno ? errno : krb5_enomem(context->context);",
          "2570:     ret = kadm5_log_goto_end(context, sp);",
          "2571:     if (ret == 0) {",
          "2572:         ret = get_version_prev(sp, &context->log_context.version, &last_tstamp);",
          "2573:         if (ret == 0)",
          "2574:             context->log_context.last_time = last_tstamp;",
          "2575:     }",
          "",
          "---------------"
        ],
        "lib/kadm5/version-script.map||lib/kadm5/version-script.map": [
          "File: lib/kadm5/version-script.map -> lib/kadm5/version-script.map",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   kadm5_log_signal_master;",
          "66:   kadm5_log_signal_socket;",
          "67:   kadm5_log_previous;",
          "68:   kadm5_log_goto_end;",
          "69:   kadm5_log_foreach;",
          "70:   kadm5_log_get_version_fd;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:   kadm5_log_goto_first;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "77:   kadm5_log_init_nb;",
          "78:   kadm5_log_init_nolock;",
          "79:   kadm5_log_init_sharedlock;",
          "80:   kadm5_log_nop;",
          "81:   kadm5_log_truncate;",
          "82:   kadm5_log_modify;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "81:   kadm5_log_next;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0972c7f4932fdb632f6b9029598bf90248f723bc",
      "candidate_info": {
        "commit_hash": "0972c7f4932fdb632f6b9029598bf90248f723bc",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/0972c7f4932fdb632f6b9029598bf90248f723bc",
        "files": [
          "lib/krb5/get_cred.c",
          "lib/krb5/krb5.h",
          "lib/krb5/ticket.c"
        ],
        "message": "krb5: support for anonymous TGS requests\n\nAdd support to krb5_get_creds() for requesting anonymous service tickets using\na TGT, using the flag KRB5_GC_ANONYMOUS.\n\n(cherry picked from commit 55ee6c12825aec0f4c557946c2e7e029484054db)",
        "before_after_code_files": [
          "lib/krb5/get_cred.c||lib/krb5/get_cred.c",
          "lib/krb5/krb5.h||lib/krb5/krb5.h",
          "lib/krb5/ticket.c||lib/krb5/ticket.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/krb5/get_cred.c||lib/krb5/get_cred.c": [
          "File: lib/krb5/get_cred.c -> lib/krb5/get_cred.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1185: {",
          "1186:     krb5_error_code ret;",
          "1187:     krb5_timestamp now;",
          "1191:     krb5_timeofday(context, &now);",
          "1193:     if (!(options & KRB5_GC_EXPIRED_OK) &&",
          "1197:  options |= KRB5_TC_MATCH_TIMES;",
          "1198:     }",
          "1203:     }",
          "1205:     ret = krb5_cc_retrieve_cred(context, ccache,",
          "",
          "[Removed Lines]",
          "1188:     krb5_times save_times = in_creds->times;",
          "1189:     NAME_TYPE save_type = in_creds->server->name.name_type;",
          "1194:  in_creds->times.endtime < now) {",
          "1195:  in_creds->times.renew_till = 0;",
          "1196:  krb5_timeofday(context, &in_creds->times.endtime);",
          "1200:     if (save_type == KRB5_NT_SRV_HST_NEEDS_CANON) {",
          "1202:         krb5_principal_set_type(context, in_creds->server, KRB5_NT_SRV_HST);",
          "",
          "[Added Lines]",
          "1188:     krb5_creds mcreds = *in_creds;",
          "1193:  mcreds.times.endtime < now) {",
          "1194:  mcreds.times.renew_till = 0;",
          "1195:  krb5_timeofday(context, &mcreds.times.endtime);",
          "1199:     if (mcreds.server->name.name_type == KRB5_NT_SRV_HST_NEEDS_CANON) {",
          "1201:         krb5_principal_set_type(context, mcreds.server, KRB5_NT_SRV_HST);",
          "1202:     }",
          "1204:     if (options & KRB5_GC_ANONYMOUS) {",
          "1205:  ret = krb5_make_principal(context,",
          "1206:       &mcreds.client,",
          "1207:       krb5_principal_get_realm(context, mcreds.client),",
          "1208:       KRB5_WELLKNOWN_NAME,",
          "1209:       KRB5_ANON_NAME,",
          "1210:       NULL);",
          "1211:  if (ret)",
          "1212:      return ret;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1207:      (KRB5_TC_DONT_MATCH_REALM |",
          "1208:                                   KRB5_TC_MATCH_KEYTYPE |",
          "1209:       KRB5_TC_MATCH_TIMES)),",
          "1214:     return ret;",
          "1215: }",
          "",
          "[Removed Lines]",
          "1210:     in_creds, out_creds);",
          "1212:     in_creds->server->name.name_type = save_type;",
          "1213:     in_creds->times = save_times;",
          "",
          "[Added Lines]",
          "1220:     &mcreds, out_creds);",
          "1222:     if (options & KRB5_GC_ANONYMOUS)",
          "1223:  krb5_free_principal(context, mcreds.client);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1579:  flags.b.constrained_delegation = 1;",
          "1580:     }",
          "1582:     tgts = NULL;",
          "1583:     ret = _krb5_get_cred_kdc_any(context, flags, ccache,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1592:     if (options & KRB5_GC_ANONYMOUS)",
          "1593:  flags.b.request_anonymous = 1;",
          "",
          "---------------"
        ],
        "lib/krb5/krb5.h||lib/krb5/krb5.h": [
          "File: lib/krb5/krb5.h -> lib/krb5/krb5.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "448: #define KRB5_GC_NO_TRANSIT_CHECK (1U << 5)",
          "449: #define KRB5_GC_CONSTRAINED_DELEGATION (1U << 6)",
          "450: #define KRB5_GC_CANONICALIZE  (1U << 7)",
          "453: #define KRB5_TC_DONT_MATCH_REALM (1U << 31)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451: #define KRB5_GC_ANONYMOUS  (1U << 8)",
          "",
          "---------------"
        ],
        "lib/krb5/ticket.c||lib/krb5/ticket.c": [
          "File: lib/krb5/ticket.c -> lib/krb5/ticket.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "527: }",
          "535: static krb5_error_code",
          "537:         krb5_kdc_rep *rep,",
          "538:         krb5_const_principal requested,",
          "539:         krb5_const_principal mapped,",
          "540:         krb5_keyblock const * key)",
          "541: {",
          "549:     }",
          "550:     return 0;",
          "551: }",
          "",
          "[Removed Lines]",
          "536: check_client_referral(krb5_context context,",
          "542:     if (krb5_principal_compare(context, requested, mapped) == FALSE &&",
          "543:  !rep->enc_part.flags.enc_pa_rep)",
          "544:     {",
          "545:  krb5_set_error_message(context, KRB5KRB_AP_ERR_MODIFIED,",
          "546:           N_(\"Not same client principal returned \"",
          "547:       \"as requested\", \"\"));",
          "548:  return KRB5KRB_AP_ERR_MODIFIED;",
          "",
          "[Added Lines]",
          "530: static krb5_boolean",
          "531: is_anonymous_principal(krb5_context context, krb5_const_principal principal)",
          "532: {",
          "533:     if ((principal->name.name_type != KRB5_NT_WELLKNOWN &&",
          "534:          principal->name.name_type != KRB5_NT_UNKNOWN) ||",
          "535:         principal->name.name_string.len != 2 ||",
          "536:         strcmp(principal->name.name_string.val[0], KRB5_WELLKNOWN_NAME) != 0 ||",
          "537:         strcmp(principal->name.name_string.val[1], KRB5_ANON_NAME) != 0)",
          "538:         return 0;",
          "539:     return 1;",
          "540: }",
          "547: check_client_mismatch(krb5_context context,",
          "553:     if (rep->enc_part.flags.anonymous) {",
          "554:  if (!is_anonymous_principal(context, mapped)) {",
          "555:      krb5_set_error_message(context, KRB5KRB_AP_ERR_MODIFIED,",
          "556:        N_(\"Anonymous ticket does not contain anonymous \"",
          "557:           \"principal\", \"\"));",
          "558:      return KRB5KRB_AP_ERR_MODIFIED;",
          "559:  }",
          "560:     } else {",
          "561:  if (krb5_principal_compare(context, requested, mapped) == FALSE &&",
          "562:      !rep->enc_part.flags.enc_pa_rep) {",
          "563:      krb5_set_error_message(context, KRB5KRB_AP_ERR_MODIFIED,",
          "564:        N_(\"Not same client principal returned \"",
          "565:        \"as requested\", \"\"));",
          "566:      return KRB5KRB_AP_ERR_MODIFIED;",
          "567:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "692:     if((flags & EXTRACT_TICKET_ALLOW_CNAME_MISMATCH) == 0) {",
          "694:         creds->client,",
          "695:         tmp_principal,",
          "696:         &creds->session);",
          "",
          "[Removed Lines]",
          "693:  ret = check_client_referral(context, rep,",
          "",
          "[Added Lines]",
          "713:  ret = check_client_mismatch(context, rep,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3363caec5348d81f5bbb4123fd1e493773421c79",
      "candidate_info": {
        "commit_hash": "3363caec5348d81f5bbb4123fd1e493773421c79",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/3363caec5348d81f5bbb4123fd1e493773421c79",
        "files": [
          "lib/wind/gen-map.py"
        ],
        "message": "PY3: xrange->range\n\nSigned-off-by: Noel Power <noel.power@suse.com>\nReviewed-by: Andrew Bartlett <abartlet@samba.org>\n(cherry picked from Samba commit e2c0af6bcdf271ff75c455695c129bc18322bd5a)\n(cherry picked from commit 06143cc12bbd377172203c032491b58ee7c4c6b2)",
        "before_after_code_files": [
          "lib/wind/gen-map.py||lib/wind/gen-map.py"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/wind/gen-map.py||lib/wind/gen-map.py": [
          "File: lib/wind/gen-map.py -> lib/wind/gen-map.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:             end   = int(m.group(2), 0x10)",
          "97:             value = m.group(3)",
          "98:             desc  = m.group(4)",
          "100:                 trans.append((key, value, desc, [t]))",
          "101:             continue",
          "102:         m = re.search('^ *([^;]+); *([^;]+); *(.*) *$', l)",
          "",
          "[Removed Lines]",
          "99:             for key in xrange(start,end,1):",
          "",
          "[Added Lines]",
          "99:             for key in range(start,end,1):",
          "",
          "---------------"
        ]
      }
    }
  ]
}