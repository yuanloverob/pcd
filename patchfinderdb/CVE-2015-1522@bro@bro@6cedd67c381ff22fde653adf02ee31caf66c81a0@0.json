{
  "cve_id": "CVE-2015-1522",
  "cve_desc": "analyzer/protocol/dnp3/DNP3.cc in Bro before 2.3.2 does not reject certain non-zero values of a packet length, which allows remote attackers to cause a denial of service (buffer overflow or buffer over-read) via a crafted DNP3 packet.",
  "repo": "bro/bro",
  "patch_hash": "6cedd67c381ff22fde653adf02ee31caf66c81a0",
  "patch_info": {
    "commit_hash": "6cedd67c381ff22fde653adf02ee31caf66c81a0",
    "repo": "bro/bro",
    "commit_url": "https://github.com/bro/bro/commit/6cedd67c381ff22fde653adf02ee31caf66c81a0",
    "files": [
      "CHANGES",
      "VERSION",
      "src/analyzer/protocol/dnp3/DNP3.cc",
      "src/analyzer/protocol/dnp3/DNP3.h"
    ],
    "message": "DNP3: fix reachable assertion and buffer over-read/overflow.\n\nA DNP3 packet using a link layer header that specifies a zero length can\ntrigger an assertion failure if assertions are enabled.  Assertions are\nenabled unless Bro is compiled with the NDEBUG preprocessor macro\ndefined.  The default configuration of Bro will define this macro and so\ndisables assertions, but using the --enable-debug option in the\nconfigure script will enable assertions.  When assertions are disabled,\nor also for certain length values, the DNP3 parser may attempt to pass a\nnegative value as the third argument to memcpy (number of bytes to copy)\nand result in a buffer over-read or overflow.\n\nReported by Travis Emmert.",
    "before_after_code_files": [
      "src/analyzer/protocol/dnp3/DNP3.cc||src/analyzer/protocol/dnp3/DNP3.cc",
      "src/analyzer/protocol/dnp3/DNP3.h||src/analyzer/protocol/dnp3/DNP3.h"
    ]
  },
  "patch_diff": {
    "src/analyzer/protocol/dnp3/DNP3.cc||src/analyzer/protocol/dnp3/DNP3.cc": [
      "File: src/analyzer/protocol/dnp3/DNP3.cc -> src/analyzer/protocol/dnp3/DNP3.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "138:   if ( endp->in_hdr )",
      "139:    {",
      "142:     return true;",
      "145:    if( endp->buffer[0] != 0x05 || endp->buffer[1] != 0x64 )",
      "146:     {",
      "",
      "[Removed Lines]",
      "141:    if ( ! AddToBuffer(endp, PSEUDO_APP_LAYER_INDEX, &data, &len) )",
      "",
      "[Added Lines]",
      "141:    int res = AddToBuffer(endp, PSEUDO_APP_LAYER_INDEX, &data, &len);",
      "143:    if ( res == 0 )",
      "146:    if ( res < 0 )",
      "147:     return false;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "187:   if ( ! endp->in_hdr )",
      "188:    {",
      "",
      "[Removed Lines]",
      "189:    assert(endp->pkt_length);",
      "",
      "[Added Lines]",
      "194:    if ( endp->pkt_length <= 0 )",
      "195:     {",
      "196:     analyzer->Weird(\"dnp3_negative_or_zero_length_link_layer\");",
      "197:     return false;",
      "198:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "197:    int n = PSEUDO_APP_LAYER_INDEX + (endp->pkt_length - 5) + ((endp->pkt_length - 5) / 16) * 2",
      "198:      + 2 * ( ((endp->pkt_length - 5) % 16 == 0) ? 0 : 1) - 1 ;",
      "201:     return true;",
      "204:    if ( ! ParseAppLayer(endp) )",
      "205:     return false;",
      "",
      "[Removed Lines]",
      "200:    if ( ! AddToBuffer(endp, n, &data, &len) )",
      "",
      "[Added Lines]",
      "209:    int res = AddToBuffer(endp, n, &data, &len);",
      "211:    if ( res == 0 )",
      "214:    if ( res < 0 )",
      "215:     return false;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "213:  return true;",
      "214:  }",
      "217:  {",
      "218:  if ( ! target_len )",
      "221:  int to_copy = min(*len, target_len - endp->buffer_len);",
      "223:  memcpy(endp->buffer + endp->buffer_len, *data, to_copy);",
      "226:  endp->buffer_len += to_copy;",
      "229:  }",
      "231: bool DNP3_Base::ParseAppLayer(Endpoint* endp)",
      "",
      "[Removed Lines]",
      "216: bool DNP3_Base::AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len)",
      "219:   return true;",
      "228:  return endp->buffer_len == target_len;",
      "",
      "[Added Lines]",
      "230: int DNP3_Base::AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len)",
      "233:   return 1;",
      "235:  if ( *len < 0 )",
      "236:   {",
      "237:   reporter->AnalyzerError(analyzer, \"dnp3 negative input length: %d\", *len);",
      "238:   return -1;",
      "239:   }",
      "241:  if ( target_len < endp->buffer_len )",
      "242:   {",
      "243:   reporter->AnalyzerError(analyzer, \"dnp3 invalid target length: %d - %d\",",
      "244:                           target_len, endp->buffer_len);",
      "245:   return -1;",
      "246:   }",
      "250:  if ( endp->buffer_len + to_copy > MAX_BUFFER_SIZE )",
      "251:   {",
      "252:   reporter->AnalyzerError(analyzer, \"dnp3 buffer length exceeded: %d + %d\",",
      "253:                           endp->buffer_len, to_copy);",
      "254:   return -1;",
      "255:   }",
      "262:  if ( endp->buffer_len == target_len )",
      "263:   return 1;",
      "265:  return 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "256:   if ( ! CheckCRC(n, data, data + n, \"app_chunk\") )",
      "257:    return false;",
      "261:   flow->flow_buffer()->BufferData(data + transport, data + n);",
      "262:   transport = 0;",
      "",
      "[Removed Lines]",
      "260:   assert(data + n < endp->buffer + endp->buffer_len);",
      "",
      "[Added Lines]",
      "296:   if ( data + n >= endp->buffer + endp->buffer_len )",
      "297:    {",
      "298:    reporter->AnalyzerError(analyzer,",
      "299:                            \"dnp3 app layer parsing overflow %d - %d\",",
      "300:                            endp->buffer_len, n);",
      "301:    return false;",
      "302:    }",
      "",
      "---------------"
    ],
    "src/analyzer/protocol/dnp3/DNP3.h||src/analyzer/protocol/dnp3/DNP3.h": [
      "File: src/analyzer/protocol/dnp3/DNP3.h -> src/analyzer/protocol/dnp3/DNP3.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "32:  bool ProcessData(int len, const u_char* data, bool orig);",
      "33:  void ClearEndpointState(bool orig);",
      "35:  bool ParseAppLayer(Endpoint* endp);",
      "36:  bool CheckCRC(int len, const u_char* data, const u_char* crc16, const char* where);",
      "37:  unsigned int CalcCRC(int len, const u_char* data);",
      "",
      "[Removed Lines]",
      "34:  bool AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len);",
      "",
      "[Added Lines]",
      "47:  int AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "23989678c487073f4ed14c847e978cfe2a5f0899",
      "candidate_info": {
        "commit_hash": "23989678c487073f4ed14c847e978cfe2a5f0899",
        "repo": "bro/bro",
        "commit_url": "https://github.com/bro/bro/commit/23989678c487073f4ed14c847e978cfe2a5f0899",
        "files": [
          "CHANGES",
          "VERSION",
          "src/analyzer/protocol/dnp3/DNP3.cc",
          "src/analyzer/protocol/dnp3/DNP3.h"
        ],
        "message": "DNP3: fix reachable assertion and buffer over-read/overflow.\n\nA DNP3 packet using a link layer header that specifies a zero length can\ntrigger an assertion failure if assertions are enabled.  Assertions are\nenabled unless Bro is compiled with the NDEBUG preprocessor macro\ndefined.  The default configuration of Bro will define this macro and so\ndisables assertions, but using the --enable-debug option in the\nconfigure script will enable assertions.  When assertions are disabled,\nor also for certain length values, the DNP3 parser may attempt to pass a\nnegative value as the third argument to memcpy (number of bytes to copy)\nand result in a buffer over-read or overflow.\n\nReported by Travis Emmert.",
        "before_after_code_files": [
          "src/analyzer/protocol/dnp3/DNP3.cc||src/analyzer/protocol/dnp3/DNP3.cc",
          "src/analyzer/protocol/dnp3/DNP3.h||src/analyzer/protocol/dnp3/DNP3.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_message": 1,
        "olp_code_files": {
          "patch": [
            "src/analyzer/protocol/dnp3/DNP3.cc||src/analyzer/protocol/dnp3/DNP3.cc",
            "src/analyzer/protocol/dnp3/DNP3.h||src/analyzer/protocol/dnp3/DNP3.h"
          ],
          "candidate": [
            "src/analyzer/protocol/dnp3/DNP3.cc||src/analyzer/protocol/dnp3/DNP3.cc",
            "src/analyzer/protocol/dnp3/DNP3.h||src/analyzer/protocol/dnp3/DNP3.h"
          ]
        }
      },
      "candidate_diff": {
        "src/analyzer/protocol/dnp3/DNP3.cc||src/analyzer/protocol/dnp3/DNP3.cc": [
          "File: src/analyzer/protocol/dnp3/DNP3.cc -> src/analyzer/protocol/dnp3/DNP3.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "174:   if ( endp->in_hdr )",
          "175:    {",
          "178:     return true;",
          "181:    if( endp->buffer[0] != 0x05 || endp->buffer[1] != 0x64 )",
          "182:     {",
          "",
          "[Removed Lines]",
          "177:    if ( ! AddToBuffer(endp, PSEUDO_APP_LAYER_INDEX, &data, &len) )",
          "",
          "[Added Lines]",
          "177:    int res = AddToBuffer(endp, PSEUDO_APP_LAYER_INDEX, &data, &len);",
          "179:    if ( res == 0 )",
          "182:    if ( res < 0 )",
          "183:     return false;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "223:   if ( ! endp->in_hdr )",
          "224:    {",
          "",
          "[Removed Lines]",
          "225:    assert(endp->pkt_length);",
          "",
          "[Added Lines]",
          "230:    if ( endp->pkt_length <= 0 )",
          "231:     {",
          "232:     Weird(\"dnp3_negative_or_zero_length_link_layer\");",
          "233:     return false;",
          "234:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "233:    int n = PSEUDO_APP_LAYER_INDEX + (endp->pkt_length - 5) + ((endp->pkt_length - 5) / 16) * 2 + 2 - 1;",
          "236:     return true;",
          "239:    if ( ! ParseAppLayer(endp) )",
          "240:     return false;",
          "",
          "[Removed Lines]",
          "235:    if ( ! AddToBuffer(endp, n, &data, &len) )",
          "",
          "[Added Lines]",
          "244:    int res = AddToBuffer(endp, n, &data, &len);",
          "246:    if ( res == 0 )",
          "249:    if ( res < 0 )",
          "250:     return false;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "248:  return true;",
          "249:  }",
          "252:  {",
          "253:  if ( ! target_len )",
          "256:  int to_copy = min(*len, target_len - endp->buffer_len);",
          "258:  memcpy(endp->buffer + endp->buffer_len, *data, to_copy);",
          "261:  endp->buffer_len += to_copy;",
          "264:  }",
          "266: bool DNP3_Analyzer::ParseAppLayer(Endpoint* endp)",
          "",
          "[Removed Lines]",
          "251: bool DNP3_Analyzer::AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len)",
          "254:   return true;",
          "263:  return endp->buffer_len == target_len;",
          "",
          "[Added Lines]",
          "265: int DNP3_Analyzer::AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len)",
          "268:   return 1;",
          "270:  if ( *len < 0 )",
          "271:   {",
          "272:   reporter->AnalyzerError(this, \"dnp3 negative input length: %d\", *len);",
          "273:   return -1;",
          "274:   }",
          "276:  if ( target_len < endp->buffer_len )",
          "277:   {",
          "278:   reporter->AnalyzerError(this, \"dnp3 invalid target length: %d - %d\",",
          "279:                           target_len, endp->buffer_len);",
          "280:   return -1;",
          "281:   }",
          "285:  if ( endp->buffer_len + to_copy > MAX_BUFFER_SIZE )",
          "286:   {",
          "287:   reporter->AnalyzerError(this, \"dnp3 buffer length exceeded: %d + %d\",",
          "288:                           endp->buffer_len, to_copy);",
          "289:   return -1;",
          "290:   }",
          "297:  if ( endp->buffer_len == target_len )",
          "298:   return 1;",
          "300:  return 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "291:   if ( ! CheckCRC(n, data, data + n, \"app_chunk\") )",
          "292:    return false;",
          "296:   flow->flow_buffer()->BufferData(data + transport, data + n);",
          "297:   transport = 0;",
          "",
          "[Removed Lines]",
          "295:   assert(data + n < endp->buffer + endp->buffer_len);",
          "",
          "[Added Lines]",
          "331:   if ( data + n >= endp->buffer + endp->buffer_len )",
          "332:    {",
          "333:    reporter->AnalyzerError(this,",
          "334:                            \"dnp3 app layer parsing overflow %d - %d\",",
          "335:                            endp->buffer_len, n);",
          "336:    return false;",
          "337:    }",
          "",
          "---------------"
        ],
        "src/analyzer/protocol/dnp3/DNP3.h||src/analyzer/protocol/dnp3/DNP3.h": [
          "File: src/analyzer/protocol/dnp3/DNP3.h -> src/analyzer/protocol/dnp3/DNP3.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "36:  bool ProcessData(int len, const u_char* data, bool orig);",
          "37:  void ClearEndpointState(bool orig);",
          "39:  bool ParseAppLayer(Endpoint* endp);",
          "40:  bool CheckCRC(int len, const u_char* data, const u_char* crc16, const char* where);",
          "41:  unsigned int CalcCRC(int len, const u_char* data);",
          "",
          "[Removed Lines]",
          "38:  bool AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len);",
          "",
          "[Added Lines]",
          "51:  int AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len);",
          "",
          "---------------"
        ]
      }
    }
  ]
}