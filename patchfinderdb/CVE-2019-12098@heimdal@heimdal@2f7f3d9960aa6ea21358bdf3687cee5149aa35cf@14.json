{
  "cve_id": "CVE-2019-12098",
  "cve_desc": "In the client side of Heimdal before 7.6.0, failure to verify anonymous PKINIT PA-PKINIT-KX key exchange permits a man-in-the-middle attack. This issue is in krb5_init_creds_step in lib/krb5/init_creds_pw.c.",
  "repo": "heimdal/heimdal",
  "patch_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
  "patch_info": {
    "commit_hash": "2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "repo": "heimdal/heimdal",
    "commit_url": "https://github.com/heimdal/heimdal/commit/2f7f3d9960aa6ea21358bdf3687cee5149aa35cf",
    "files": [
      "lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c"
    ],
    "message": "CVE-2019-12098: krb5: always confirm PA-PKINIT-KX for anon PKINIT\n\nRFC8062 Section 7 requires verification of the PA-PKINIT-KX key excahnge\nwhen anonymous PKINIT is used.  Failure to do so can permit an active\nattacker to become a man-in-the-middle.\n\nIntroduced by a1ef548600c5bb51cf52a9a9ea12676506ede19f.  First tagged\nrelease Heimdal 1.4.0.\n\nCVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N (4.8)\n\nChange-Id: I6cc1c0c24985936468af08693839ac6c3edda133\nSigned-off-by: Jeffrey Altman <jaltman@auristor.com>\nApproved-by: Jeffrey Altman <jaltman@auritor.com>\n(cherry picked from commit 38c797e1ae9b9c8f99ae4aa2e73957679031fd2b)",
    "before_after_code_files": [
      "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c",
      "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h",
      "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
    ]
  },
  "patch_diff": {
    "lib/krb5/init_creds_pw.c||lib/krb5/init_creds_pw.c": [
      "File: lib/krb5/init_creds_pw.c -> lib/krb5/init_creds_pw.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2267:            &ctx->req_buffer,",
      "2268:            NULL,",
      "2269:            NULL);",
      "2270:      if (ret == 0)",
      "2271:   ret = copy_EncKDCRepPart(&rep.enc_part, &ctx->enc_part);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2270:      if (ret == 0 && ctx->pk_init_ctx) {",
      "2271:   PA_DATA *pa_pkinit_kx;",
      "2272:   int idx = 0;",
      "2274:   pa_pkinit_kx =",
      "2275:       krb5_find_padata(rep.kdc_rep.padata->val,",
      "2276:          rep.kdc_rep.padata->len,",
      "2277:          KRB5_PADATA_PKINIT_KX,",
      "2278:          &idx);",
      "2280:   ret = _krb5_pk_kx_confirm(context, ctx->pk_init_ctx,",
      "2281:        ctx->fast_state.reply_key,",
      "2282:        &ctx->cred.session,",
      "2283:        pa_pkinit_kx);",
      "2284:   if (ret)",
      "2285:       krb5_set_error_message(context, ret,",
      "2286:         N_(\"Failed to confirm PA-PKINIT-KX\", \"\"));",
      "2287:   else if (pa_pkinit_kx != NULL)",
      "2288:       ctx->ic_flags |= KRB5_INIT_CREDS_PKINIT_KX_VALID;",
      "2289:      }",
      "",
      "---------------"
    ],
    "lib/krb5/krb5_locl.h||lib/krb5/krb5_locl.h": [
      "File: lib/krb5/krb5_locl.h -> lib/krb5/krb5_locl.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "208: #define KRB5_INIT_CREDS_CANONICALIZE  1",
      "209: #define KRB5_INIT_CREDS_NO_C_CANON_CHECK 2",
      "210: #define KRB5_INIT_CREDS_NO_C_NO_EKU_CHECK 4",
      "211:     struct {",
      "212:         krb5_gic_process_last_req func;",
      "213:         void *ctx;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "211: #define KRB5_INIT_CREDS_PKINIT_KX_VALID  32",
      "",
      "---------------"
    ],
    "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
      "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1220:     return ret;",
      "1221: }",
      "1223: static krb5_error_code",
      "1224: pk_rd_pa_reply_dh(krb5_context context,",
      "1225:     const heim_octet_string *indata,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1230: KRB5_LIB_FUNCTION krb5_error_code KRB5_LIB_CALL",
      "1231: _krb5_pk_kx_confirm(krb5_context context,",
      "1232:       krb5_pk_init_ctx ctx,",
      "1233:       krb5_keyblock *reply_key,",
      "1234:       krb5_keyblock *session_key,",
      "1235:       PA_DATA *pa_pkinit_kx)",
      "1236: {",
      "1237:     krb5_error_code ret;",
      "1238:     EncryptedData ed;",
      "1239:     krb5_keyblock ck, sk_verify;",
      "1240:     krb5_crypto ck_crypto = NULL;",
      "1241:     krb5_crypto rk_crypto = NULL;",
      "1242:     size_t len;",
      "1243:     krb5_data data;",
      "1244:     krb5_data p1 = { sizeof(\"PKINIT\") - 1, \"PKINIT\" };",
      "1245:     krb5_data p2 = { sizeof(\"KEYEXCHANGE\") - 1, \"KEYEXCHANGE\" };",
      "1247:     heim_assert(ctx != NULL, \"PKINIT context is non-NULL\");",
      "1248:     heim_assert(reply_key != NULL, \"reply key is non-NULL\");",
      "1249:     heim_assert(session_key != NULL, \"session key is non-NULL\");",
      "1252:     if (pa_pkinit_kx == NULL)",
      "1253:  return ctx->anonymous ? KRB5_KDCREP_MODIFIED : 0;",
      "1255:     memset(&ed, 0, sizeof(ed));",
      "1256:     krb5_keyblock_zero(&ck);",
      "1257:     krb5_keyblock_zero(&sk_verify);",
      "1258:     krb5_data_zero(&data);",
      "1260:     ret = decode_EncryptedData(pa_pkinit_kx->padata_value.data,",
      "1261:           pa_pkinit_kx->padata_value.length,",
      "1262:           &ed, &len);",
      "1263:     if (ret)",
      "1264:  goto out;",
      "1266:     if (len != pa_pkinit_kx->padata_value.length) {",
      "1267:  ret = KRB5_KDCREP_MODIFIED;",
      "1268:  goto out;",
      "1269:     }",
      "1271:     ret = krb5_crypto_init(context, reply_key, 0, &rk_crypto);",
      "1272:     if (ret)",
      "1273:  goto out;",
      "1275:     ret = krb5_decrypt_EncryptedData(context, rk_crypto,",
      "1276:          KRB5_KU_PA_PKINIT_KX,",
      "1277:          &ed, &data);",
      "1278:     if (ret)",
      "1279:  goto out;",
      "1281:     ret = decode_EncryptionKey(data.data, data.length,",
      "1282:           &ck, &len);",
      "1283:     if (ret)",
      "1284:  goto out;",
      "1286:     ret = krb5_crypto_init(context, &ck, 0, &ck_crypto);",
      "1287:     if (ret)",
      "1288:  goto out;",
      "1290:     ret = krb5_crypto_fx_cf2(context, ck_crypto, rk_crypto,",
      "1291:         &p1, &p2, session_key->keytype,",
      "1292:         &sk_verify);",
      "1293:     if (ret)",
      "1294:  goto out;",
      "1296:     if (sk_verify.keytype != session_key->keytype ||",
      "1297:  krb5_data_ct_cmp(&sk_verify.keyvalue, &session_key->keyvalue) != 0) {",
      "1298:  ret = KRB5_KDCREP_MODIFIED;",
      "1299:  goto out;",
      "1300:     }",
      "1302: out:",
      "1303:     free_EncryptedData(&ed);",
      "1304:     krb5_free_keyblock_contents(context, &ck);",
      "1305:     krb5_free_keyblock_contents(context, &sk_verify);",
      "1306:     if (ck_crypto)",
      "1307:  krb5_crypto_destroy(context, ck_crypto);",
      "1308:     if (rk_crypto)",
      "1309:  krb5_crypto_destroy(context, rk_crypto);",
      "1310:     krb5_data_free(&data);",
      "1312:     return ret;",
      "1313: }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bc45c4de721a81af14789a7ca55e3336be6458a6",
      "candidate_info": {
        "commit_hash": "bc45c4de721a81af14789a7ca55e3336be6458a6",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/bc45c4de721a81af14789a7ca55e3336be6458a6",
        "files": [
          "lib/kadm5/ipropd_slave.c"
        ],
        "message": "Disable sync during iprop receive_everything()\n\nDoing an fsync per-record when receiving the complete HDB is a performance\ndisaster.  Among other things, if the HDB is very large, then one slave\nreceving a full HDB can cause other slaves to timeout and, if HDB write\nactivity is high enough to cause iprop log truncation, then also need full\nsyncs, which leads to a cycle of full syncs for all slaves until HDB write\nactivity drops.\n\nAllowing the iprop log to be larger helps, but improving receive_everything()\nperformance helps even more.\n\n(cherry picked from commit 305dc816525f461f9bfe640d87f671f53f0e0fc6)",
        "before_after_code_files": [
          "lib/kadm5/ipropd_slave.c||lib/kadm5/ipropd_slave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/kadm5/ipropd_slave.c||lib/kadm5/ipropd_slave.c": [
          "File: lib/kadm5/ipropd_slave.c -> lib/kadm5/ipropd_slave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "512:     if (ret)",
          "513:         krb5_err(context, IPROPD_RESTART, ret, \"db->open\");",
          "515:     sp = NULL;",
          "516:     krb5_data_zero(&data);",
          "517:     do {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "515:     (void) mydb->hdb_set_sync(context, mydb, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "564:     reinit_log(context, server_context, vno);",
          "566:     ret = mydb->hdb_close(context, mydb);",
          "567:     if (ret)",
          "568:         krb5_err(context, IPROPD_RESTART_SLOW, ret, \"db->close\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "568:     ret = mydb->hdb_set_sync(context, mydb, 1);",
          "569:     if (ret)",
          "570:         krb5_err(context, IPROPD_RESTART_SLOW, ret, \"failed to sync the received HDB\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3cfcab2d4fce29ba562fd15038e913bcdb68214c",
      "candidate_info": {
        "commit_hash": "3cfcab2d4fce29ba562fd15038e913bcdb68214c",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/3cfcab2d4fce29ba562fd15038e913bcdb68214c",
        "files": [
          "kuser/kinit.c",
          "lib/krb5/krb5.h",
          "lib/krb5/pkinit.c"
        ],
        "message": "krb5: krb5_get_init_creds_opt_set_pkinit flag names\n\nAdd macros to give symbolic names to the flags which can be passed to\nkrb5_get_init_creds_opt_set_pkinit(). Reserve flags for BTMM and not validating\nKDC anchors.\n\n(cherry picked from commit 5ca229e0d9c19699eb39345a2a8513a956518cb7)",
        "before_after_code_files": [
          "kuser/kinit.c||kuser/kinit.c",
          "lib/krb5/krb5.h||lib/krb5/krb5.h",
          "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [
            "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
          ],
          "candidate": [
            "lib/krb5/pkinit.c||lib/krb5/pkinit.c"
          ]
        }
      },
      "candidate_diff": {
        "kuser/kinit.c||kuser/kinit.c": [
          "File: kuser/kinit.c -> kuser/kinit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "536:        pk_x509_anchors,",
          "537:        NULL,",
          "538:        NULL,",
          "541:        prompter,",
          "542:        NULL,",
          "543:        passwd);",
          "",
          "[Removed Lines]",
          "539:        pk_use_enckey ? 2 : 0 |",
          "540:        anonymous_pkinit ? 4 : 0,",
          "",
          "[Added Lines]",
          "539:        pk_use_enckey ? KRB5_GIC_OPT_PKINIT_USE_ENCKEY : 0 |",
          "540:        anonymous_pkinit ? KRB5_GIC_OPT_PKINIT_ANONYMOUS : 0,",
          "",
          "---------------"
        ],
        "lib/krb5/krb5.h||lib/krb5/krb5.h": [
          "File: lib/krb5/krb5.h -> lib/krb5/krb5.h"
        ],
        "lib/krb5/pkinit.c||lib/krb5/pkinit.c": [
          "File: lib/krb5/pkinit.c -> lib/krb5/pkinit.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2269:  x509_anchors = anchors;",
          "2270:     }",
          "2273:  opt->opt_private->pk_init_ctx->anonymous = 1;",
          "2275:     ret = _krb5_pk_load_id(context,",
          "",
          "[Removed Lines]",
          "2272:     if (flags & 4)",
          "",
          "[Added Lines]",
          "2272:     if (flags & KRB5_GIC_OPT_PKINIT_ANONYMOUS)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2295:     } else",
          "2296:  opt->opt_private->pk_init_ctx->id->cert = NULL;",
          "2299:  hx509_context hx509ctx = context->hx509ctx;",
          "2300:  hx509_cert cert = opt->opt_private->pk_init_ctx->id->cert;",
          "",
          "[Removed Lines]",
          "2298:     if ((flags & 2) == 0) {",
          "",
          "[Added Lines]",
          "2298:     if ((flags & KRB5_GIC_OPT_PKINIT_USE_ENCKEY) == 0) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7f54b116df1d9a5eb22b1e0da094c4280a24a937",
      "candidate_info": {
        "commit_hash": "7f54b116df1d9a5eb22b1e0da094c4280a24a937",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/7f54b116df1d9a5eb22b1e0da094c4280a24a937",
        "files": [
          "kdc/kerberos5.c"
        ],
        "message": "kdc: conform _kdc_make_anonymous_principalname() to RFC8062\n\nThe utility function _kdc_make_anonymous_principalname() previously returned a\nprincipal of \"anonymous\" rather than \"WELLKNOWN/ANONYMOUS\", as specified by\nRFC8062. This is not used by the AS-REQ code.\n\n(cherry picked from commit 5c8f48495eab08736fc4f12a8fff0786303af1a7)",
        "before_after_code_files": [
          "kdc/kerberos5.c||kdc/kerberos5.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041",
          "https://github.com/heimdal/heimdal/pull/556"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "kdc/kerberos5.c||kdc/kerberos5.c": [
          "File: kdc/kerberos5.c -> kdc/kerberos5.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248: krb5_error_code",
          "249: _kdc_make_anonymous_principalname (PrincipalName *pn)",
          "250: {",
          "254:     if (pn->name_string.val == NULL)",
          "262:     return 0;",
          "263: }",
          "265: static void",
          "",
          "[Removed Lines]",
          "251:     pn->name_type = KRB5_NT_PRINCIPAL;",
          "252:     pn->name_string.len = 1;",
          "253:     pn->name_string.val = malloc(sizeof(*pn->name_string.val));",
          "255:  return ENOMEM;",
          "256:     pn->name_string.val[0] = strdup(\"anonymous\");",
          "257:     if (pn->name_string.val[0] == NULL) {",
          "258:  free(pn->name_string.val);",
          "259:  pn->name_string.val = NULL;",
          "260:  return ENOMEM;",
          "261:     }",
          "",
          "[Added Lines]",
          "251:     pn->name_type = KRB5_NT_WELLKNOWN;",
          "252:     pn->name_string.len = 2;",
          "253:     pn->name_string.val = calloc(2, sizeof(*pn->name_string.val));",
          "255:  goto failed;",
          "257:     pn->name_string.val[0] = strdup(KRB5_WELLKNOWN_NAME);",
          "258:     if (pn->name_string.val[0] == NULL)",
          "259:  goto failed;",
          "261:     pn->name_string.val[1] = strdup(KRB5_ANON_NAME);",
          "262:     if (pn->name_string.val[1] == NULL)",
          "263:  goto failed;",
          "267: failed:",
          "268:     free_PrincipalName(pn);",
          "270:     pn->name_type = KRB5_NT_UNKNOWN;",
          "271:     pn->name_string.len = 0;",
          "272:     pn->name_string.val = NULL;",
          "274:     return ENOMEM;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a028bfbf830c42068f2b440d391a5bab332b236c",
      "candidate_info": {
        "commit_hash": "a028bfbf830c42068f2b440d391a5bab332b236c",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/a028bfbf830c42068f2b440d391a5bab332b236c",
        "files": [
          "lib/krb5/mcache.c"
        ],
        "message": "Deadlock in lib/krb5/mcache.c #432\n\n(cherry picked from commit becb0b03aed50f71a6a20ac88009b63e92115688)",
        "before_after_code_files": [
          "lib/krb5/mcache.c||lib/krb5/mcache.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/krb5/mcache.c||lib/krb5/mcache.c": [
          "File: lib/krb5/mcache.c -> lib/krb5/mcache.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "248: {",
          "249:     krb5_mcache **n, *m = MCACHE(id);",
          "251:     HEIMDAL_MUTEX_lock(&(m->mutex));",
          "252:     if (m->refcnt == 0)",
          "253:     {",
          "254:      HEIMDAL_MUTEX_unlock(&(m->mutex));",
          "255:      krb5_abortx(context, \"mcc_destroy: refcnt already 0\");",
          "256:     }",
          "258:     if (!MISDEAD(m)) {",
          "262:  for(n = &mcc_head; n && *n; n = &(*n)->next) {",
          "263:      if(m == *n) {",
          "265:   break;",
          "266:      }",
          "267:  }",
          "269:  mcc_destroy_internal(context, m);",
          "270:     }",
          "271:     HEIMDAL_MUTEX_unlock(&(m->mutex));",
          "272:     return 0;",
          "273: }",
          "",
          "[Removed Lines]",
          "261:  HEIMDAL_MUTEX_lock(&mcc_mutex);",
          "268:  HEIMDAL_MUTEX_unlock(&mcc_mutex);",
          "",
          "[Added Lines]",
          "251:     HEIMDAL_MUTEX_lock(&mcc_mutex);",
          "256:  HEIMDAL_MUTEX_unlock(&mcc_mutex);",
          "272:     HEIMDAL_MUTEX_unlock(&mcc_mutex);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "91d4920b3c08f4253aba489af5b1d08fdf08abac",
      "candidate_info": {
        "commit_hash": "91d4920b3c08f4253aba489af5b1d08fdf08abac",
        "repo": "heimdal/heimdal",
        "commit_url": "https://github.com/heimdal/heimdal/commit/91d4920b3c08f4253aba489af5b1d08fdf08abac",
        "files": [
          "lib/krb5/get_cred.c"
        ],
        "message": "Do not set anonymous flag in S4U2Proxy request\n\nIt is not specified in MS-SFU, Apple dropped it as well and\nit now breaks master branch.\n\nSigned-off-by: Isaac Boukris <iboukris@gmail.com>\n(cherry picked from commit ea7615ade3af28843f358e715703226b760db73b)",
        "before_after_code_files": [
          "lib/krb5/get_cred.c||lib/krb5/get_cred.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/heimdal/heimdal/pull/1222",
          "https://github.com/heimdal/heimdal/pull/1041"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/krb5/get_cred.c||lib/krb5/get_cred.c": [
          "File: lib/krb5/get_cred.c -> lib/krb5/get_cred.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1587:  flags.b.forwardable = 1;",
          "1588:     if (options & KRB5_GC_NO_TRANSIT_CHECK)",
          "1589:  flags.b.disable_transited_check = 1;",
          "1592:  flags.b.constrained_delegation = 1;",
          "1594:     if (options & KRB5_GC_ANONYMOUS)",
          "1595:  flags.b.request_anonymous = 1;",
          "",
          "[Removed Lines]",
          "1590:     if (options & KRB5_GC_CONSTRAINED_DELEGATION) {",
          "1593:     }",
          "",
          "[Added Lines]",
          "1590:     if (options & KRB5_GC_CONSTRAINED_DELEGATION)",
          "",
          "---------------"
        ]
      }
    }
  ]
}