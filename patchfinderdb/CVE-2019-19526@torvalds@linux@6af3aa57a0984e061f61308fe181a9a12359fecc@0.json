{
  "cve_id": "CVE-2019-19526",
  "cve_desc": "In the Linux kernel before 5.3.9, there is a use-after-free bug that can be caused by a malicious USB device in the drivers/nfc/pn533/usb.c driver, aka CID-6af3aa57a098.",
  "repo": "torvalds/linux",
  "patch_hash": "6af3aa57a0984e061f61308fe181a9a12359fecc",
  "patch_info": {
    "commit_hash": "6af3aa57a0984e061f61308fe181a9a12359fecc",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/6af3aa57a0984e061f61308fe181a9a12359fecc",
    "files": [
      "drivers/nfc/pn533/usb.c"
    ],
    "message": "NFC: pn533: fix use-after-free and memleaks\n\nThe driver would fail to deregister and its class device and free\nrelated resources on late probe errors.\n\nReported-by: syzbot+cb035c75c03dbe34b796@syzkaller.appspotmail.com\nFixes: 32ecc75ded72 (\"NFC: pn533: change order operations in dev registation\")\nSigned-off-by: Johan Hovold <johan@kernel.org>\nSigned-off-by: Jakub Kicinski <jakub.kicinski@netronome.com>",
    "before_after_code_files": [
      "drivers/nfc/pn533/usb.c||drivers/nfc/pn533/usb.c"
    ]
  },
  "patch_diff": {
    "drivers/nfc/pn533/usb.c||drivers/nfc/pn533/usb.c": [
      "File: drivers/nfc/pn533/usb.c -> drivers/nfc/pn533/usb.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "548:  rc = pn533_finalize_setup(priv);",
      "549:  if (rc)",
      "552:  usb_set_intfdata(interface, phy);",
      "554:  return 0;",
      "556: error:",
      "557:  usb_free_urb(phy->in_urb);",
      "558:  usb_free_urb(phy->out_urb);",
      "559:  usb_free_urb(phy->ack_urb);",
      "560:  usb_put_dev(phy->udev);",
      "561:  kfree(in_buf);",
      "563:  return rc;",
      "564: }",
      "",
      "[Removed Lines]",
      "550:   goto error;",
      "",
      "[Added Lines]",
      "550:   goto err_deregister;",
      "556: err_deregister:",
      "557:  pn533_unregister_device(phy->priv);",
      "559:  usb_kill_urb(phy->in_urb);",
      "560:  usb_kill_urb(phy->out_urb);",
      "561:  usb_kill_urb(phy->ack_urb);",
      "568:  kfree(phy->ack_buffer);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "843cc92ed323692943c94d7e6ce97a0353b8c2d7",
      "candidate_info": {
        "commit_hash": "843cc92ed323692943c94d7e6ce97a0353b8c2d7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/843cc92ed323692943c94d7e6ce97a0353b8c2d7",
        "files": [
          "drivers/nfc/pn533/i2c.c",
          "drivers/nfc/pn533/pn533.c",
          "drivers/nfc/pn533/pn533.h",
          "drivers/nfc/pn533/usb.c"
        ],
        "message": "nfc: pn533: Split pn533 init & nfc_register\n\nThere is a problem in the initialisation and setup of the pn533: It\nregisters with nfc too early. It could happen, that it finished\nregistering with nfc and someone starts using it. But setup of the pn533\nis not yet finished. Bad or at least unintended things could happen.\nSo I split out nfc registering (and unregistering) to seperate functions\nthat have to be called late in probe then.\ni2c requires a bit more love: i2c requests an irq in it's probe\nfunction. 'Commit 32ecc75ded72 (\"NFC: pn533: change order operations in\ndev registation\")' shows, this can not happen too early. An irq can be\nserved before structs are fully initialized. The way chosen to prevent\nthis is to request the irq after nfc_alloc_device initialized the\nstructs, but before nfc_register_device. So there is now this\npn532_i2c_nfc_alloc function.\n\nCc: Johan Hovold <johan@kernel.org>\nCc: Claudiu Beznea <Claudiu.Beznea@microchip.com>\nCc: Jakub Kicinski <jakub.kicinski@netronome.com>\nSigned-off-by: Lars Poeschel <poeschel@lemonage.de>\nSigned-off-by: David S. Miller <davem@davemloft.net>",
        "before_after_code_files": [
          "drivers/nfc/pn533/i2c.c||drivers/nfc/pn533/i2c.c",
          "drivers/nfc/pn533/pn533.c||drivers/nfc/pn533/pn533.c",
          "drivers/nfc/pn533/pn533.h||drivers/nfc/pn533/pn533.h",
          "drivers/nfc/pn533/usb.c||drivers/nfc/pn533/usb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/nfc/pn533/usb.c||drivers/nfc/pn533/usb.c"
          ],
          "candidate": [
            "drivers/nfc/pn533/usb.c||drivers/nfc/pn533/usb.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/nfc/pn533/i2c.c||drivers/nfc/pn533/i2c.c": [
          "File: drivers/nfc/pn533/i2c.c -> drivers/nfc/pn533/i2c.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "193:  phy->i2c_dev = client;",
          "194:  i2c_set_clientdata(client, phy);",
          "203:  if (IS_ERR(priv)) {",
          "204:   r = PTR_ERR(priv);",
          "",
          "[Removed Lines]",
          "196:  priv = pn533_register_device(PN533_DEVICE_PN532,",
          "197:          PN533_NO_TYPE_B_PROTOCOLS,",
          "198:          PN533_PROTO_REQ_ACK_RESP,",
          "199:          phy, &i2c_phy_ops, NULL,",
          "200:          &phy->i2c_dev->dev,",
          "201:          &client->dev);",
          "",
          "[Added Lines]",
          "196:  priv = pn53x_common_init(PN533_DEVICE_PN532,",
          "197:     PN533_PROTO_REQ_ACK_RESP,",
          "198:     phy, &i2c_phy_ops, NULL,",
          "199:     &phy->i2c_dev->dev);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "206:  }",
          "208:  phy->priv = priv;",
          "210:  r = request_threaded_irq(client->irq, NULL, pn533_i2c_irq_thread_fn,",
          "211:     IRQF_TRIGGER_FALLING |",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "207:  r = pn532_i2c_nfc_alloc(priv, PN533_NO_TYPE_B_PROTOCOLS, &client->dev);",
          "208:  if (r)",
          "209:   goto nfc_alloc_err;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "220:  if (r)",
          "221:   goto fn_setup_err;",
          "225: fn_setup_err:",
          "226:  free_irq(client->irq, phy);",
          "228: irq_rqst_err:",
          "231:  return r;",
          "232: }",
          "",
          "[Removed Lines]",
          "223:  return 0;",
          "229:  pn533_unregister_device(phy->priv);",
          "",
          "[Added Lines]",
          "224:  r = nfc_register_device(priv->nfc_dev);",
          "225:  if (r)",
          "226:   goto fn_setup_err;",
          "228:  return r;",
          "234:  nfc_free_device(priv->nfc_dev);",
          "236: nfc_alloc_err:",
          "237:  pn53x_common_clean(phy->priv);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "240:  free_irq(client->irq, phy);",
          "244:  return 0;",
          "245: }",
          "",
          "[Removed Lines]",
          "242:  pn533_unregister_device(phy->priv);",
          "",
          "[Added Lines]",
          "250:  pn53x_unregister_nfc(phy->priv);",
          "251:  pn53x_common_clean(phy->priv);",
          "",
          "---------------"
        ],
        "drivers/nfc/pn533/pn533.c||drivers/nfc/pn533/pn533.c": [
          "File: drivers/nfc/pn533/pn533.c -> drivers/nfc/pn533/pn533.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2590: }",
          "2591: EXPORT_SYMBOL_GPL(pn533_finalize_setup);",
          "2595:     enum pn533_protocol_type protocol_type,",
          "2596:     void *phy,",
          "2597:     struct pn533_phy_ops *phy_ops,",
          "2598:     struct pn533_frame_ops *fops,",
          "2601: {",
          "2602:  struct pn533 *priv;",
          "2603:  int rc = -ENOMEM;",
          "",
          "[Removed Lines]",
          "2593: struct pn533 *pn533_register_device(u32 device_type,",
          "2594:     u32 protocols,",
          "2599:     struct device *dev,",
          "2600:     struct device *parent)",
          "",
          "[Added Lines]",
          "2593: struct pn533 *pn53x_common_init(u32 device_type,",
          "2598:     struct device *dev)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2638:  skb_queue_head_init(&priv->fragment_skb);",
          "2640:  INIT_LIST_HEAD(&priv->cmd_queue);",
          "2658:  return priv;",
          "2665: error:",
          "2666:  kfree(priv);",
          "2667:  return ERR_PTR(rc);",
          "2668: }",
          "2672: {",
          "2673:  struct pn533_cmd *cmd, *n;",
          "2678:  flush_delayed_work(&priv->poll_work);",
          "2679:  destroy_workqueue(priv->wq);",
          "",
          "[Removed Lines]",
          "2642:  priv->nfc_dev = nfc_allocate_device(&pn533_nfc_ops, protocols,",
          "2643:         priv->ops->tx_header_len +",
          "2644:         PN533_CMD_DATAEXCH_HEAD_LEN,",
          "2645:         priv->ops->tx_tail_len);",
          "2646:  if (!priv->nfc_dev) {",
          "2647:   rc = -ENOMEM;",
          "2648:   goto destroy_wq;",
          "2649:  }",
          "2651:  nfc_set_parent_dev(priv->nfc_dev, parent);",
          "2652:  nfc_set_drvdata(priv->nfc_dev, priv);",
          "2654:  rc = nfc_register_device(priv->nfc_dev);",
          "2655:  if (rc)",
          "2656:   goto free_nfc_dev;",
          "2660: free_nfc_dev:",
          "2661:  nfc_free_device(priv->nfc_dev);",
          "2663: destroy_wq:",
          "2664:  destroy_workqueue(priv->wq);",
          "2669: EXPORT_SYMBOL_GPL(pn533_register_device);",
          "2671: void pn533_unregister_device(struct pn533 *priv)",
          "2675:  nfc_unregister_device(priv->nfc_dev);",
          "2676:  nfc_free_device(priv->nfc_dev);",
          "",
          "[Added Lines]",
          "2645: EXPORT_SYMBOL_GPL(pn53x_common_init);",
          "2647: void pn53x_common_clean(struct pn533 *priv)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2690:  kfree(priv);",
          "2691: }",
          "2695: MODULE_AUTHOR(\"Lauro Ramos Venancio <lauro.venancio@openbossa.org>\");",
          "2696: MODULE_AUTHOR(\"Aloisio Almeida Jr <aloisio.almeida@openbossa.org>\");",
          "",
          "[Removed Lines]",
          "2692: EXPORT_SYMBOL_GPL(pn533_unregister_device);",
          "",
          "[Added Lines]",
          "2665: EXPORT_SYMBOL_GPL(pn53x_common_clean);",
          "2667: int pn532_i2c_nfc_alloc(struct pn533 *priv, u32 protocols,",
          "2668:    struct device *parent)",
          "2669: {",
          "2670:  priv->nfc_dev = nfc_allocate_device(&pn533_nfc_ops, protocols,",
          "2671:         priv->ops->tx_header_len +",
          "2672:         PN533_CMD_DATAEXCH_HEAD_LEN,",
          "2673:         priv->ops->tx_tail_len);",
          "2674:  if (!priv->nfc_dev)",
          "2675:   return -ENOMEM;",
          "2677:  nfc_set_parent_dev(priv->nfc_dev, parent);",
          "2678:  nfc_set_drvdata(priv->nfc_dev, priv);",
          "2679:  return 0;",
          "2680: }",
          "2681: EXPORT_SYMBOL_GPL(pn532_i2c_nfc_alloc);",
          "2683: int pn53x_register_nfc(struct pn533 *priv, u32 protocols,",
          "2684:    struct device *parent)",
          "2685: {",
          "2686:  int rc;",
          "2688:  rc = pn532_i2c_nfc_alloc(priv, protocols, parent);",
          "2689:  if (rc)",
          "2690:   return rc;",
          "2692:  rc = nfc_register_device(priv->nfc_dev);",
          "2693:  if (rc)",
          "2694:   nfc_free_device(priv->nfc_dev);",
          "2696:  return rc;",
          "2697: }",
          "2698: EXPORT_SYMBOL_GPL(pn53x_register_nfc);",
          "2700: void pn53x_unregister_nfc(struct pn533 *priv)",
          "2701: {",
          "2702:  nfc_unregister_device(priv->nfc_dev);",
          "2703:  nfc_free_device(priv->nfc_dev);",
          "2704: }",
          "2705: EXPORT_SYMBOL_GPL(pn53x_unregister_nfc);",
          "",
          "---------------"
        ],
        "drivers/nfc/pn533/pn533.h||drivers/nfc/pn533/pn533.h": [
          "File: drivers/nfc/pn533/pn533.h -> drivers/nfc/pn533/pn533.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "219: };",
          "224:     enum pn533_protocol_type protocol_type,",
          "225:     void *phy,",
          "226:     struct pn533_phy_ops *phy_ops,",
          "227:     struct pn533_frame_ops *fops,",
          "231: int pn533_finalize_setup(struct pn533 *dev);",
          "233: void pn533_recv_frame(struct pn533 *dev, struct sk_buff *skb, int status);",
          "235: bool pn533_rx_frame_is_cmd_response(struct pn533 *dev, void *frame);",
          "236: bool pn533_rx_frame_is_ack(void *_frame);",
          "",
          "[Removed Lines]",
          "222: struct pn533 *pn533_register_device(u32 device_type,",
          "223:     u32 protocols,",
          "228:     struct device *dev,",
          "229:     struct device *parent);",
          "232: void pn533_unregister_device(struct pn533 *priv);",
          "",
          "[Added Lines]",
          "222: struct pn533 *pn53x_common_init(u32 device_type,",
          "227:     struct device *dev);",
          "230: void pn53x_common_clean(struct pn533 *priv);",
          "232: int pn532_i2c_nfc_alloc(struct pn533 *priv, u32 protocols,",
          "233:    struct device *parent);",
          "234: int pn53x_register_nfc(struct pn533 *priv, u32 protocols,",
          "235:    struct device *parent);",
          "236: void pn53x_unregister_nfc(struct pn533 *priv);",
          "",
          "---------------"
        ],
        "drivers/nfc/pn533/usb.c||drivers/nfc/pn533/usb.c": [
          "File: drivers/nfc/pn533/usb.c -> drivers/nfc/pn533/usb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "534:   goto error;",
          "535:  }",
          "538:      phy, &usb_phy_ops, fops,",
          "541:  if (IS_ERR(priv)) {",
          "542:   rc = PTR_ERR(priv);",
          "",
          "[Removed Lines]",
          "537:  priv = pn533_register_device(id->driver_info, protocols, protocol_type,",
          "539:      &phy->udev->dev, &interface->dev);",
          "",
          "[Added Lines]",
          "537:  priv = pn53x_common_init(id->driver_info, protocol_type,",
          "539:      &phy->udev->dev);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "548:  rc = pn533_finalize_setup(priv);",
          "549:  if (rc)",
          "552:  usb_set_intfdata(interface, phy);",
          "554:  return 0;",
          "558: error:",
          "559:  usb_kill_urb(phy->in_urb);",
          "560:  usb_kill_urb(phy->out_urb);",
          "",
          "[Removed Lines]",
          "550:   goto err_deregister;",
          "556: err_deregister:",
          "557:  pn533_unregister_device(phy->priv);",
          "",
          "[Added Lines]",
          "550:   goto err_clean;",
          "553:  rc = pn53x_register_nfc(priv, protocols, &interface->dev);",
          "554:  if (rc)",
          "555:   goto err_clean;",
          "559: err_clean:",
          "560:  pn53x_common_clean(priv);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "577:  if (!phy)",
          "578:   return;",
          "582:  usb_set_intfdata(interface, NULL);",
          "",
          "[Removed Lines]",
          "580:  pn533_unregister_device(phy->priv);",
          "",
          "[Added Lines]",
          "583:  pn53x_unregister_nfc(phy->priv);",
          "584:  pn53x_common_clean(phy->priv);",
          "",
          "---------------"
        ]
      }
    }
  ]
}