{
  "cve_id": "CVE-2022-36039",
  "cve_desc": "Rizin is a UNIX-like reverse engineering framework and command-line toolset. Versions 0.4.0 and prior are vulnerable to out-of-bounds write when parsing DEX files. A user opening a malicious DEX file could be affected by this vulnerability, allowing an attacker to execute code on the user's machine. A patch is available on the `dev` branch of the repository.",
  "repo": "rizinorg/rizin",
  "patch_hash": "1524f85211445e41506f98180f8f69f7bf115406",
  "patch_info": {
    "commit_hash": "1524f85211445e41506f98180f8f69f7bf115406",
    "repo": "rizinorg/rizin",
    "commit_url": "https://github.com/rizinorg/rizin/commit/1524f85211445e41506f98180f8f69f7bf115406",
    "files": [
      "librz/bin/format/dex/dex.c"
    ],
    "message": "fix #2969 - oob write (1 byte) in dex.c",
    "before_after_code_files": [
      "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c"
    ]
  },
  "patch_diff": {
    "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c": [
      "File: librz/bin/format/dex/dex.c -> librz/bin/format/dex/dex.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "81:  DexString *string = NULL;",
      "83:  read = rz_buf_uleb128(buf, &size);",
      "84:  data = malloc(size + 1);",
      "85:  if (!data || rz_buf_read(buf, (ut8 *)data, size) != size) {",
      "86:   free(data);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "84:  if (UT64_ADD_OVFCHK(size, 1)) {",
      "85:   return NULL;",
      "86:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "905:  }",
      "906:  char *demangled = strdup(library + 1);",
      "907:  rz_str_replace_ch(demangled, '/', '.', 1);",
      "909:  return demangled;",
      "910: }",
      "",
      "[Removed Lines]",
      "908:  demangled[strlen(demangled) - 1] = 0;",
      "",
      "[Added Lines]",
      "912:  if (RZ_STR_ISNOTEMPTY(demangled)) {",
      "913:   demangled[strlen(demangled) - 1] = 0;",
      "914:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "e2c92e2f8a7fb63c6220f803a91893c4dba6a52e",
      "candidate_info": {
        "commit_hash": "e2c92e2f8a7fb63c6220f803a91893c4dba6a52e",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/e2c92e2f8a7fb63c6220f803a91893c4dba6a52e",
        "files": [
          "librz/bin/dwarf.c"
        ],
        "message": "fix #2958 #2960 #2973 - oob read in dwarf.c",
        "before_after_code_files": [
          "librz/bin/dwarf.c||librz/bin/dwarf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rizinorg/rizin/pull/2977"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "librz/bin/dwarf.c||librz/bin/dwarf.c": [
          "File: librz/bin/dwarf.c -> librz/bin/dwarf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1776: static const ut8 *parse_comp_unit(RzBinDwarfDebugInfo *info, const ut8 *buf_start,",
          "1778:  size_t first_abbr_idx, const ut8 *debug_str, size_t debug_str_len, bool big_endian) {",
          "1780:  const ut8 *buf = buf_start;",
          "1783:  while (buf && buf < buf_end && buf >= buf_start) {",
          "1784:   if (unit->count && unit->capacity == unit->count) {",
          "",
          "[Removed Lines]",
          "1777:  RzBinDwarfCompUnit *unit, const RzBinDwarfDebugAbbrev *abbrevs,",
          "1781:  const ut8 *buf_end = buf_start + unit->hdr.length - unit->hdr.header_size;",
          "",
          "[Added Lines]",
          "1777:  size_t buf_len, RzBinDwarfCompUnit *unit, const RzBinDwarfDebugAbbrev *abbrevs,",
          "1781:  const ut8 *buf_end = buf_start + RZ_MIN(buf_len, unit->hdr.length - unit->hdr.header_size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1953:   size_t first_abbr_idx = abbrev_start - da->decls;",
          "1957:   if (!buf) {",
          "1958:    goto cleanup;",
          "",
          "[Removed Lines]",
          "1955:   buf = parse_comp_unit(info, buf, unit, da, first_abbr_idx, debug_str, debug_str_len, big_endian);",
          "",
          "[Added Lines]",
          "1955:   buf = parse_comp_unit(info, buf, buf_end - buf, unit, da, first_abbr_idx, debug_str, debug_str_len, big_endian);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6e80054f34101f9f4b6bb5441f463149fef64b87",
      "candidate_info": {
        "commit_hash": "6e80054f34101f9f4b6bb5441f463149fef64b87",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/6e80054f34101f9f4b6bb5441f463149fef64b87",
        "files": [
          "librz/bin/format/dex/dex.c"
        ],
        "message": "fix #2955 - oob read in dex.c",
        "before_after_code_files": [
          "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rizinorg/rizin/pull/2977"
        ],
        "olp_code_files": {
          "patch": [
            "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c"
          ],
          "candidate": [
            "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c"
          ]
        }
      },
      "candidate_diff": {
        "librz/bin/format/dex/dex.c||librz/bin/format/dex/dex.c": [
          "File: librz/bin/format/dex/dex.c -> librz/bin/format/dex/dex.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1432:   }",
          "1434:   char *object = dex_resolve_type_id(dex, field_id->class_idx);",
          "1436:    free(import);",
          "1437:    break;",
          "1438:   }",
          "",
          "[Removed Lines]",
          "1435:   if (!object) {",
          "",
          "[Added Lines]",
          "1435:   if (RZ_STR_ISEMPTY(object)) {",
          "1436:    free(object);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1479:   }",
          "1481:   char *object = dex_resolve_type_id(dex, method_id->class_idx);",
          "1483:    rz_bin_import_free(import);",
          "1484:    break;",
          "1485:   }",
          "",
          "[Removed Lines]",
          "1482:   if (!object) {",
          "",
          "[Added Lines]",
          "1483:   if (RZ_STR_ISEMPTY(object)) {",
          "1484:    free(object);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "924cb9ea3ad0c0915378ddea74d44db3b9f46cf9",
      "candidate_info": {
        "commit_hash": "924cb9ea3ad0c0915378ddea74d44db3b9f46cf9",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/924cb9ea3ad0c0915378ddea74d44db3b9f46cf9",
        "files": [
          "librz/bin/format/pe/pe_security.c",
          "librz/core/cmd/cmd_print.c",
          "librz/include/rz_util/rz_asn1.h",
          "librz/util/asn1.c",
          "librz/util/pkcs7.c",
          "librz/util/x509.c"
        ],
        "message": "fix #2966 #2967 #2974 - oob read in asn1.c",
        "before_after_code_files": [
          "librz/bin/format/pe/pe_security.c||librz/bin/format/pe/pe_security.c",
          "librz/core/cmd/cmd_print.c||librz/core/cmd/cmd_print.c",
          "librz/include/rz_util/rz_asn1.h||librz/include/rz_util/rz_asn1.h",
          "librz/util/asn1.c||librz/util/asn1.c",
          "librz/util/pkcs7.c||librz/util/pkcs7.c",
          "librz/util/x509.c||librz/util/x509.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rizinorg/rizin/pull/2977"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "librz/bin/format/pe/pe_security.c||librz/bin/format/pe/pe_security.c": [
          "File: librz/bin/format/pe/pe_security.c -> librz/bin/format/pe/pe_security.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "11:   return NULL;",
          "12:  }",
          "13:  RASN1Binary *digest = bin->spcinfo->messageDigest.digest;",
          "14:  return rz_hex_bin2strdup(digest->binary, digest->length);",
          "15: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "14:  if (!digest) {",
          "15:   return NULL;",
          "16:  }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "19: }",
          "21: char *PE_(bin_pe_compute_authentihash)(RzBinPEObj *bin) {",
          "23:   return NULL;",
          "24:  }",
          "",
          "[Removed Lines]",
          "22:  if (!bin->spcinfo) {",
          "",
          "[Added Lines]",
          "25:  if (!bin->spcinfo || !bin->spcinfo->messageDigest.digestAlgorithm.algorithm) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "132:   if (!bin->cms && cert->wCertificateType == PE_WIN_CERT_TYPE_PKCS_SIGNED_DATA) {",
          "133:    bin->cms = rz_pkcs7_parse_cms(cert->bCertificate, cert->dwLength - 6);",
          "135:   }",
          "137:   security_directory->certificates[security_directory->length] = cert;",
          "",
          "[Removed Lines]",
          "134:    bin->spcinfo = rz_pkcs7_parse_spcinfo(bin->cms);",
          "",
          "[Added Lines]",
          "137:    bin->spcinfo = bin->cms ? rz_pkcs7_parse_spcinfo(bin->cms) : NULL;",
          "138:   }",
          "139:   if (!bin->cms || !bin->spcinfo) {",
          "140:    RZ_FREE(cert->bCertificate);",
          "141:    RZ_FREE(cert);",
          "142:    return false;",
          "",
          "---------------"
        ],
        "librz/core/cmd/cmd_print.c||librz/core/cmd/cmd_print.c": [
          "File: librz/core/cmd/cmd_print.c -> librz/core/cmd/cmd_print.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1074:  switch (*input) {",
          "1075:  case 'a': {",
          "1076:   asn1_setformat(input[1] != 'q');",
          "1078:   if (asn1) {",
          "1079:    char *res = rz_asn1_to_string(asn1, 0, NULL);",
          "1080:    rz_asn1_free_object(asn1);",
          "",
          "[Removed Lines]",
          "1077:   RASN1Object *asn1 = rz_asn1_create_object(data, size, data);",
          "",
          "[Added Lines]",
          "1077:   RASN1Object *asn1 = rz_asn1_create_object(data, size);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1088:  } break;",
          "1089:  case 'x': // \"pFx\" x509",
          "1090:  {",
          "1092:   if (x509) {",
          "1093:    RzStrBuf *sb = rz_strbuf_new(\"\");",
          "1094:    rz_x509_certificate_dump(x509, NULL, sb);",
          "",
          "[Removed Lines]",
          "1091:   RX509Certificate *x509 = rz_x509_parse_certificate(rz_asn1_create_object(data, size, data));",
          "",
          "[Added Lines]",
          "1091:   RASN1Object *object = rz_asn1_create_object(data, size);",
          "1092:   RX509Certificate *x509 = rz_x509_parse_certificate(object);",
          "",
          "---------------"
        ],
        "librz/include/rz_util/rz_asn1.h||librz/include/rz_util/rz_asn1.h": [
          "File: librz/include/rz_util/rz_asn1.h -> librz/include/rz_util/rz_asn1.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "87: } RASN1Object;",
          "90: RZ_API RASN1Binary *rz_asn1_create_binary(const ut8 *buffer, ut32 length);",
          "91: RZ_API RASN1String *rz_asn1_create_string(const char *string, bool allocated, ut32 length);",
          "92: RZ_API RASN1String *rz_asn1_stringify_bits(const ut8 *buffer, ut32 length);",
          "",
          "[Removed Lines]",
          "89: RZ_API RASN1Object *rz_asn1_create_object(const ut8 *buffer, ut32 length, const ut8 *start_pointer);",
          "",
          "[Added Lines]",
          "89: RZ_API RZ_OWN RASN1Object *rz_asn1_create_object(RZ_NONNULL const ut8 *buffer, ut32 length);",
          "",
          "---------------"
        ],
        "librz/util/asn1.c||librz/util/asn1.c": [
          "File: librz/util/asn1.c -> librz/util/asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "13:  ASN1_STD_FORMAT = fmt;",
          "14: }",
          "17:  if (!buffer || length < 3) {",
          "18:   return 0;",
          "19:  }",
          "",
          "[Removed Lines]",
          "16: static ut32 asn1_ber_indefinite(const ut8 *buffer, ut32 length) {",
          "",
          "[Added Lines]",
          "16: static ut64 asn1_ber_indefinite(const ut8 *buffer, ut64 length) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "25:   }",
          "26:   if (next[0] == 0x80 && (next[-1] & ASN1_FORM) == FORM_CONSTRUCTED) {",
          "27:    next--;",
          "30:     break;",
          "31:    }",
          "32:    next += sz;",
          "",
          "[Removed Lines]",
          "28:    int sz = asn1_ber_indefinite(next, end - next);",
          "29:    if (sz < 1) {",
          "",
          "[Added Lines]",
          "28:    st64 sz = (st64)asn1_ber_indefinite(next, end - next);",
          "29:    if (sz < (st64)1) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "36:  return (next - buffer) + 2;",
          "37: }",
          "40:  ut8 head, length8, byte;",
          "42:  if (!buffer || length < 2) {",
          "43:   return NULL;",
          "44:  }",
          "",
          "[Removed Lines]",
          "39: static RASN1Object *asn1_parse_header(const ut8 *buffer, ut32 length, const ut8 *start_pointer) {",
          "41:  ut64 length64;",
          "",
          "[Added Lines]",
          "39: static RASN1Object *asn1_parse_header(const ut8 *buffer, ut64 length, const ut8 *start_pointer) {",
          "41:  ut64 length64, remaining;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "48:   return NULL;",
          "49:  }",
          "50:  head = buffer[0];",
          "52:  object->klass = head & ASN1_CLASS;",
          "53:  object->form = head & ASN1_FORM;",
          "54:  object->tag = head & ASN1_TAG;",
          "55:  length8 = buffer[1];",
          "56:  if (length8 & ASN1_LENLONG) {",
          "57:   length64 = 0;",
          "58:   length8 &= ASN1_LENSHORT;",
          "59:   object->sector = buffer + 2;",
          "64:     byte = buffer[2 + i8];",
          "65:     length64 <<= 8;",
          "66:     length64 |= byte;",
          "68:      goto out_error;",
          "69:     }",
          "70:    }",
          "71:    object->sector += length8;",
          "72:   } else {",
          "74:   }",
          "75:   object->length = (ut32)length64;",
          "76:  } else {",
          "77:   object->length = (ut32)length8;",
          "78:   object->sector = buffer + 2;",
          "79:  }",
          "89:   goto out_error;",
          "90:  }",
          "91:  return object;",
          "92: out_error:",
          "93:  free(object);",
          "94:  return NULL;",
          "95: }",
          "99:   return 0;",
          "100:  }",
          "101:  ut32 counter = 0;",
          "103:  const ut8 *next = buffer;",
          "104:  const ut8 *end = buffer + length;",
          "105:  while (next >= buffer && next < end) {",
          "110:    break;",
          "111:   }",
          "113:   counter++;",
          "115:  }",
          "117:  return counter;",
          "118: }",
          "121:  RASN1Object *object = asn1_parse_header(buffer, length, start_pointer);",
          "122:  if (object && (object->form == FORM_CONSTRUCTED || object->tag == TAG_BITSTRING || object->tag == TAG_OCTETSTRING)) {",
          "123:   const ut8 *next = object->sector;",
          "",
          "[Removed Lines]",
          "51:  object->offset = start_pointer ? (buffer - start_pointer) : 0;",
          "60:   if (length8 && length8 < length - 2) {",
          "61:    ut8 i8;",
          "63:    for (i8 = 0; i8 < length8; i8++) {",
          "67:     if (length64 > length) {",
          "73:    length64 = asn1_ber_indefinite(object->sector, length - 2);",
          "81:  if (object->tag == TAG_BITSTRING && object->sector[0] == 0) {",
          "82:   if (object->length > 0) {",
          "83:    object->sector++; // real sector starts + 1",
          "84:    object->length--;",
          "85:   }",
          "86:  }",
          "87:  if (object->length > length) {",
          "97: static ut32 rz_asn1_count_objects(const ut8 *buffer, ut32 length) {",
          "98:  if (!buffer || !length) {",
          "102:  RASN1Object *object = NULL;",
          "107:   object = asn1_parse_header(next, end - next, 0);",
          "108:   if (!object || next == object->sector) {",
          "109:    RZ_FREE(object);",
          "112:   next = object->sector + object->length;",
          "114:   RZ_FREE(object);",
          "116:  RZ_FREE(object);",
          "120: RZ_API RASN1Object *rz_asn1_create_object(const ut8 *buffer, ut32 length, const ut8 *start_pointer) {",
          "",
          "[Added Lines]",
          "51:  object->offset = buffer - start_pointer;",
          "56:  remaining = length - 2;",
          "61:   if (length8 && length8 < remaining) {",
          "62:    remaining -= length8;",
          "64:    for (ut8 i8 = 0; i8 < length8; i8++) {",
          "68:     if (length64 > remaining) {",
          "75:    length64 = asn1_ber_indefinite(object->sector, remaining);",
          "76:    if (length64 > remaining) {",
          "78:     goto out_error;",
          "79:    }",
          "83:   if (length8 > remaining) {",
          "85:    goto out_error;",
          "86:   }",
          "90:  if (object->sector >= (buffer + length)) {",
          "95:  if (object->tag == TAG_BITSTRING && !object->sector[0] && object->length > 0) {",
          "96:   object->sector++; // real sector starts + 1",
          "97:   object->length--;",
          "98:  }",
          "105: static ut32 asn1_count_objects(RASN1Object *object) {",
          "106:  if (!object) {",
          "109:  const ut8 *buffer = object->sector;",
          "110:  ut64 length = object->length;",
          "112:  RASN1Object *tmp = NULL;",
          "117:   tmp = asn1_parse_header(next, end - next, buffer);",
          "118:   if (!tmp || next == tmp->sector) {",
          "119:    RZ_FREE(tmp);",
          "122:   next = tmp->sector + tmp->length;",
          "124:   RZ_FREE(tmp);",
          "126:  RZ_FREE(tmp);",
          "130: static RASN1Object *asn1_create_object(const ut8 *buffer, ut64 length, const ut8 *start_pointer) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "126:    free(object);",
          "127:    return NULL;",
          "128:   }",
          "130:   if (count > 0) {",
          "131:    object->list.length = count;",
          "132:    object->list.objects = RZ_NEWS0(RASN1Object *, count);",
          "",
          "[Removed Lines]",
          "129:   ut32 count = rz_asn1_count_objects(object->sector, object->length);",
          "",
          "[Added Lines]",
          "139:   ut64 count = asn1_count_objects(object);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "134:     rz_asn1_free_object(object);",
          "135:     return NULL;",
          "136:    }",
          "140:     if (!inner || next == inner->sector) {",
          "141:      rz_asn1_free_object(inner);",
          "142:      break;",
          "",
          "[Removed Lines]",
          "137:    ut32 i;",
          "138:    for (i = 0; next >= buffer && next < end && i < count; i++) {",
          "139:     RASN1Object *inner = rz_asn1_create_object(next, end - next, start_pointer);",
          "",
          "[Added Lines]",
          "147:    for (ut32 i = 0; next >= buffer && next < end && i < count; i++) {",
          "148:     RASN1Object *inner = asn1_create_object(next, end - next, start_pointer);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "149:  return object;",
          "150: }",
          "152: RZ_API RASN1Binary *rz_asn1_create_binary(const ut8 *buffer, ut32 length) {",
          "153:  if (!buffer || !length) {",
          "154:   return NULL;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "161: RZ_API RZ_OWN RASN1Object *rz_asn1_create_object(RZ_NONNULL const ut8 *buffer, ut32 length) {",
          "162:  rz_return_val_if_fail(buffer && length > 0, NULL);",
          "163:  return asn1_create_object(buffer, length, buffer);",
          "164: }",
          "",
          "---------------"
        ],
        "librz/util/pkcs7.c||librz/util/pkcs7.c": [
          "File: librz/util/pkcs7.c -> librz/util/pkcs7.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "315:  if (!container) {",
          "316:   return NULL;",
          "317:  }",
          "319:  if (!object || object->list.length < 2 || !object->list.objects ||",
          "320:   !object->list.objects[0] || !object->list.objects[1] ||",
          "321:   object->list.objects[1]->list.length < 1) {",
          "",
          "[Removed Lines]",
          "318:  object = rz_asn1_create_object(buffer, length, buffer);",
          "",
          "[Added Lines]",
          "318:  object = rz_asn1_create_object(buffer, length);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "689:   free(spcinfo);",
          "690:   return NULL;",
          "691:  }",
          "693:  if (!object || object->list.length < 2 || !object->list.objects ||",
          "694:   !object->list.objects[0] || !object->list.objects[1]) {",
          "695:   RZ_FREE_CUSTOM(spcinfo, rz_pkcs7_free_spcinfo);",
          "",
          "[Removed Lines]",
          "692:  RASN1Object *object = rz_asn1_create_object(content->binary, content->length, content->binary);",
          "",
          "[Added Lines]",
          "692:  RASN1Object *object = rz_asn1_create_object(content->binary, content->length);",
          "",
          "---------------"
        ],
        "librz/util/x509.c||librz/util/x509.c": [
          "File: librz/util/x509.c -> librz/util/x509.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "16:   object->tag == TAG_SEQUENCE &&",
          "17:   object->form == FORM_CONSTRUCTED) {",
          "18:   o = object->list.objects[0];",
          "20:    if (o->tag == TAG_UTCTIME) {",
          "21:     validity->notBefore = rz_asn1_stringify_utctime(o->sector, o->length);",
          "22:    } else if (o->tag == TAG_GENERALIZEDTIME) {",
          "",
          "[Removed Lines]",
          "19:   if (o->klass == CLASS_UNIVERSAL && o->form == FORM_PRIMITIVE) {",
          "",
          "[Added Lines]",
          "19:   if (o && o->klass == CLASS_UNIVERSAL && o->form == FORM_PRIMITIVE) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "24:    }",
          "25:   }",
          "26:   o = object->list.objects[1];",
          "28:    if (o->tag == TAG_UTCTIME) {",
          "29:     validity->notAfter = rz_asn1_stringify_utctime(o->sector, o->length);",
          "30:    } else if (o->tag == TAG_GENERALIZEDTIME) {",
          "",
          "[Removed Lines]",
          "27:   if (o->klass == CLASS_UNIVERSAL && o->form == FORM_PRIMITIVE) {",
          "",
          "[Added Lines]",
          "27:   if (o && o->klass == CLASS_UNIVERSAL && o->form == FORM_PRIMITIVE) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "128:  if (o && o->tag == TAG_OID) {",
          "129:   ext->extnID = rz_asn1_stringify_oid(o->sector, o->length);",
          "130:   o = object->list.objects[1];",
          "133:    ext->critical = o->sector[0] != 0;",
          "134:    o = object->list.objects[2];",
          "135:   }",
          "137:    ext->extnValue = rz_asn1_create_binary(o->sector, o->length);",
          "138:   }",
          "139:  }",
          "",
          "[Removed Lines]",
          "131:   if (o->tag == TAG_BOOLEAN && object->list.length > 2) {",
          "136:   if (o->tag == TAG_OCTETSTRING) {",
          "",
          "[Added Lines]",
          "131:   if (o && o->tag == TAG_BOOLEAN && object->list.length > 2) {",
          "136:   if (o && o->tag == TAG_OCTETSTRING) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "170:  }",
          "171:  elems = object->list.objects;",
          "174:   elems[0]->klass == CLASS_CONTEXT &&",
          "175:   elems[0]->form == FORM_CONSTRUCTED &&",
          "176:   elems[0]->list.objects[0]->tag == TAG_INTEGER &&",
          "177:   elems[0]->list.objects[0]->length == 1) {",
          "178:   if (object->list.length < 7) {",
          "",
          "[Removed Lines]",
          "173:  if (elems[0]->list.length == 1 &&",
          "",
          "[Added Lines]",
          "173:  if (elems[0] &&",
          "174:   elems[0]->list.length == 1 &&",
          "177:   elems[0]->list.objects[0] &&",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "185:  } else {",
          "186:   tbsc->version = 0;",
          "187:  }",
          "189:   tbsc->serialNumber = rz_asn1_stringify_integer(elems[shift]->sector, elems[shift]->length);",
          "190:  }",
          "191:  rz_x509_parse_algorithmidentifier(&tbsc->signature, elems[shift + 1]);",
          "",
          "[Removed Lines]",
          "188:  if (shift < object->list.length && elems[shift]->klass == CLASS_UNIVERSAL && elems[shift]->tag == TAG_INTEGER) {",
          "",
          "[Added Lines]",
          "190:  if (elems[shift] && elems[shift]->klass == CLASS_UNIVERSAL && elems[shift]->tag == TAG_INTEGER) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "199:     continue;",
          "200:    }",
          "201:    if (elems[i]->tag == 1) {",
          "206:    }",
          "207:    if (elems[i]->tag == 2) {",
          "212:    }",
          "213:    if (tbsc->version == 2 && elems[i]->tag == 3 && elems[i]->form == FORM_CONSTRUCTED) {",
          "214:     rz_x509_parse_extensions(&tbsc->extensions, elems[i]);",
          "",
          "[Removed Lines]",
          "202:     tbsc->issuerUniqueID = rz_asn1_create_binary(object->list.objects[i]->sector, object->list.objects[i]->length);",
          "203:    }",
          "204:    if (!elems[i]) {",
          "205:     continue;",
          "208:     tbsc->subjectUniqueID = rz_asn1_create_binary(object->list.objects[i]->sector, object->list.objects[i]->length);",
          "209:    }",
          "210:    if (!elems[i]) {",
          "211:     continue;",
          "",
          "[Added Lines]",
          "204:     tbsc->issuerUniqueID = rz_asn1_create_binary(elems[i]->sector, elems[i]->length);",
          "207:     tbsc->subjectUniqueID = rz_asn1_create_binary(elems[i]->sector, elems[i]->length);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "226:  if (!cert) {",
          "227:   goto fail;",
          "228:  }",
          "230:   RZ_FREE(cert);",
          "231:   goto fail;",
          "232:  }",
          "",
          "[Removed Lines]",
          "229:  if (object->klass != CLASS_UNIVERSAL || object->form != FORM_CONSTRUCTED || object->list.length != 3) {",
          "",
          "[Added Lines]",
          "225:  if (object->klass != CLASS_UNIVERSAL ||",
          "226:   object->form != FORM_CONSTRUCTED ||",
          "227:   object->list.length != 3 ||",
          "228:   !object->list.objects[0] ||",
          "229:   !object->list.objects[1] ||",
          "230:   !object->list.objects[2]) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "256:  if (!buffer || !length) {",
          "257:   return NULL;",
          "258:  }",
          "260:  certificate = rz_x509_parse_certificate(object);",
          "262:  return certificate;",
          "",
          "[Removed Lines]",
          "259:  object = rz_asn1_create_object(buffer, length, buffer);",
          "",
          "[Added Lines]",
          "260:  object = rz_asn1_create_object(buffer, length);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "265: RZ_API RX509CRLEntry *rz_x509_parse_crlentry(RASN1Object *object) {",
          "266:  RX509CRLEntry *entry;",
          "268:   return NULL;",
          "269:  }",
          "271:  if (!entry) {",
          "272:   return NULL;",
          "273:  }",
          "",
          "[Removed Lines]",
          "267:  if (!object || object->list.length != 2) {",
          "270:  entry = (RX509CRLEntry *)malloc(sizeof(RX509CRLEntry));",
          "",
          "[Added Lines]",
          "268:  if (!object ||",
          "269:   object->list.length != 2 ||",
          "270:   !object->list.objects[1] ||",
          "271:   !object->list.objects[0]) {",
          "274:  entry = RZ_NEW0(RX509CRLEntry);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "282:  if (!object || object->list.length < 4) {",
          "283:   return NULL;",
          "284:  }",
          "286:  if (!crl) {",
          "287:   return NULL;",
          "288:  }",
          "290:  elems = object->list.objects;",
          "291:  rz_x509_parse_algorithmidentifier(&crl->signature, elems[0]);",
          "292:  rz_x509_parse_name(&crl->issuer, elems[1]);",
          "293:  crl->lastUpdate = rz_asn1_stringify_utctime(elems[2]->sector, elems[2]->length);",
          "",
          "[Removed Lines]",
          "285:  crl = (RX509CertificateRevocationList *)malloc(sizeof(RX509CertificateRevocationList));",
          "289:  memset(crl, 0, sizeof(RX509CertificateRevocationList));",
          "",
          "[Added Lines]",
          "289:  crl = RZ_NEW0(RX509CertificateRevocationList);",
          "294:  if (!elems || !elems[0] || !elems[1] || !elems[2] || !elems[3]) {",
          "295:   free(crl);",
          "296:   return NULL;",
          "297:  }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "348b1447d1452f978b69631d6de5b08dd3bdf79d",
      "candidate_info": {
        "commit_hash": "348b1447d1452f978b69631d6de5b08dd3bdf79d",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/348b1447d1452f978b69631d6de5b08dd3bdf79d",
        "files": [
          "librz/bin/format/mach0/mach0.c"
        ],
        "message": "fix #2956 - oob write in mach0.c",
        "before_after_code_files": [
          "librz/bin/format/mach0/mach0.c||librz/bin/format/mach0/mach0.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rizinorg/rizin/pull/2977"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "librz/bin/format/mach0/mach0.c||librz/bin/format/mach0/mach0.c": [
          "File: librz/bin/format/mach0/mach0.c -> librz/bin/format/mach0/mach0.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1597:       cur_seg->page_size = ps;",
          "1598:       cur_seg->page_count = ((bin->segs[seg_idx].vmsize + (ps - 1)) & ~(ps - 1)) / ps;",
          "1599:       if (cur_seg->page_count > 0) {",
          "1601:        if (!cur_seg->page_start) {",
          "1602:         break;",
          "1603:        }",
          "",
          "[Removed Lines]",
          "1600:        cur_seg->page_start = malloc(sizeof(ut16) * cur_seg->page_count);",
          "",
          "[Added Lines]",
          "1600:        cur_seg->page_start = RZ_NEWS0(ut16, cur_seg->page_count);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1607:     }",
          "1608:     if (cur_seg) {",
          "1609:      ut32 page_index = (ut32)(seg_off / ps);",
          "1612:       cur_seg->page_start[page_index] = seg_off & 0xfff;",
          "1613:      }",
          "1614:     }",
          "",
          "[Removed Lines]",
          "1610:      size_t maxsize = cur_seg->page_count * sizeof(ut16);",
          "1611:      if (page_index < maxsize) {",
          "",
          "[Added Lines]",
          "1610:      if (page_index < cur_seg->page_count) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f8ff18f992173804639199c0aff324065853418f",
      "candidate_info": {
        "commit_hash": "f8ff18f992173804639199c0aff324065853418f",
        "repo": "rizinorg/rizin",
        "commit_url": "https://github.com/rizinorg/rizin/commit/f8ff18f992173804639199c0aff324065853418f",
        "files": [
          "librz/bin/format/mach0/coresymbolication.c"
        ],
        "message": "fix #2961 - oob read in coresymbolication.c",
        "before_after_code_files": [
          "librz/bin/format/mach0/coresymbolication.c||librz/bin/format/mach0/coresymbolication.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/rizinorg/rizin/pull/2977"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "librz/bin/format/mach0/coresymbolication.c||librz/bin/format/mach0/coresymbolication.c": [
          "File: librz/bin/format/mach0/coresymbolication.c -> librz/bin/format/mach0/coresymbolication.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "118: static char *str_dup_safe(const ut8 *b, const ut8 *str, const ut8 *end) {",
          "119:  if (str >= b && str < end) {",
          "124:  }",
          "125:  return NULL;",
          "126: }",
          "129:  if (str >= b && str + len < end) {",
          "135:  }",
          "136:  return NULL;",
          "137: }",
          "",
          "[Removed Lines]",
          "120:   int len = rz_str_nlen((const char *)str, end - str);",
          "121:   if (len) {",
          "122:    return rz_str_ndup((const char *)str, len);",
          "123:   }",
          "128: static char *str_dup_safe_fixed(const ut8 *b, const ut8 *str, ut64 len, const ut8 *end) {",
          "130:   char *result = calloc(1, len + 1);",
          "131:   if (result) {",
          "132:    rz_str_ncpy(result, (const char *)str, len);",
          "133:    return result;",
          "134:   }",
          "",
          "[Added Lines]",
          "120:   return rz_str_ndup((const char *)str, end - str);",
          "125: static char *str_ndup_safe(const ut8 *b, const ut8 *str, ut64 len, const ut8 *end) {",
          "127:   return rz_str_ndup((const char *)str, len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "214:    if (cursor >= end) {",
          "215:     goto beach;",
          "216:    }",
          "218:    cursor += 16;",
          "219:    if (!seg->name) {",
          "220:     goto beach;",
          "",
          "[Removed Lines]",
          "217:    seg->name = str_dup_safe_fixed(b, cursor, 16, end);",
          "",
          "[Added Lines]",
          "210:    seg->name = str_ndup_safe(b, cursor, 16, end);",
          "",
          "---------------"
        ]
      }
    }
  ]
}