{
  "cve_id": "CVE-2017-3731",
  "cve_desc": "If an SSL/TLS server or client is running on a 32-bit host, and a specific cipher is being used, then a truncated packet can cause that server or client to perform an out-of-bounds read, usually resulting in a crash. For OpenSSL 1.1.0, the crash can be triggered when using CHACHA20/POLY1305; users should upgrade to 1.1.0d. For Openssl 1.0.2, the crash can be triggered when using RC4-MD5; users who have not disabled that algorithm should update to 1.0.2k.",
  "repo": "openssl/openssl",
  "patch_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
  "patch_info": {
    "commit_hash": "00d965474b22b54e4275232bc71ee0c699c5cd21",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/00d965474b22b54e4275232bc71ee0c699c5cd21",
    "files": [
      "crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "message": "crypto/evp: harden AEAD ciphers.\n\nOriginally a crash in 32-bit build was reported CHACHA20-POLY1305\ncipher. The crash is triggered by truncated packet and is result\nof excessive hashing to the edge of accessible memory. Since hash\noperation is read-only it is not considered to be exploitable\nbeyond a DoS condition. Other ciphers were hardened.\n\nThanks to Robert \u015awi\u0119cki for report.\n\nCVE-2017-3731\n\nReviewed-by: Rich Salz <rsalz@openssl.org>",
    "before_after_code_files": [
      "crypto/evp/e_aes.c||crypto/evp/e_aes.c",
      "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
    ]
  },
  "patch_diff": {
    "crypto/evp/e_aes.c||crypto/evp/e_aes.c": [
      "File: crypto/evp/e_aes.c -> crypto/evp/e_aes.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1388:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1389:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1391:             len -= EVP_GCM_TLS_EXPLICIT_IV_LEN;",
      "1394:                 len -= EVP_GCM_TLS_TAG_LEN;",
      "1395:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1396:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1397:         }",
      "",
      "[Removed Lines]",
      "1393:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1391:             if (len < EVP_GCM_TLS_EXPLICIT_IV_LEN)",
      "1392:                 return 0;",
      "1395:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1396:                 if (len < EVP_GCM_TLS_TAG_LEN)",
      "1397:                     return 0;",
      "1399:             }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1946:                 EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] << 8",
      "1947:                 | EVP_CIPHER_CTX_buf_noconst(c)[arg - 1];",
      "1949:             len -= EVP_CCM_TLS_EXPLICIT_IV_LEN;",
      "1952:                 len -= cctx->M;",
      "1953:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 2] = len >> 8;",
      "1954:             EVP_CIPHER_CTX_buf_noconst(c)[arg - 1] = len & 0xff;",
      "1955:         }",
      "",
      "[Removed Lines]",
      "1951:             if (!EVP_CIPHER_CTX_encrypting(c))",
      "",
      "[Added Lines]",
      "1954:             if (len < EVP_CCM_TLS_EXPLICIT_IV_LEN)",
      "1955:                 return 0;",
      "1958:             if (!EVP_CIPHER_CTX_encrypting(c)) {",
      "1959:                 if (len < cctx->M)",
      "1960:                     return 0;",
      "1962:             }",
      "",
      "---------------"
    ],
    "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
      "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "398:             len = aad[EVP_AEAD_TLS1_AAD_LEN - 2] << 8 |",
      "399:                   aad[EVP_AEAD_TLS1_AAD_LEN - 1];",
      "400:             if (!ctx->encrypt) {",
      "402:                 memcpy(temp, aad, EVP_AEAD_TLS1_AAD_LEN - 2);",
      "403:                 aad = temp;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "401:                 if (len < POLY1305_BLOCK_SIZE)",
      "402:                     return 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0de0fb887b464a9f0f20ddcf98e7980ae4b0fd9c",
      "candidate_info": {
        "commit_hash": "0de0fb887b464a9f0f20ddcf98e7980ae4b0fd9c",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/0de0fb887b464a9f0f20ddcf98e7980ae4b0fd9c",
        "files": [
          "crypto/evp/e_chacha20_poly1305.c"
        ],
        "message": "Add missing flags for EVP_chacha20()\n\nChaCha20 code uses its own custom cipher_data. Add EVP_CIPH_CUSTOM_IV\nand EVP_CIPH_ALWAYS_CALL_INIT so that the key and the iv can be set by\ndifferent calls of EVP_CipherInit_ex().\n\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2156)\n(cherry picked from commit c83680a04aac7a15e6ac48ed732b8322c4c9d49a)",
        "before_after_code_files": [
          "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
          ],
          "candidate": [
            "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c"
          ]
        }
      },
      "candidate_diff": {
        "crypto/evp/e_chacha20_poly1305.c||crypto/evp/e_chacha20_poly1305.c": [
          "File: crypto/evp/e_chacha20_poly1305.c -> crypto/evp/e_chacha20_poly1305.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "131:     chacha_init_key,",
          "132:     chacha_cipher,",
          "133:     NULL,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "130:     EVP_CIPH_CUSTOM_IV | EVP_CIPH_ALWAYS_CALL_INIT,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6d1584aebae9e6f34b80fef4fb147c298cc723d2",
      "candidate_info": {
        "commit_hash": "6d1584aebae9e6f34b80fef4fb147c298cc723d2",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/6d1584aebae9e6f34b80fef4fb147c298cc723d2",
        "files": [
          "crypto/ct/ct_policy.c"
        ],
        "message": "Don't check for time() failing in CT_POLICY_EVAL_CTX_new\n\nSee https://github.com/openssl/openssl/pull/1554#issuecomment-246354677.\n\nReviewed-by: Viktor Dukhovni <viktor@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1554)\n(cherry picked from commit f0f535e92b096db4a308ecc49ba7f0fd3f0f7945)",
        "before_after_code_files": [
          "crypto/ct/ct_policy.c||crypto/ct/ct_policy.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "crypto/ct/ct_policy.c||crypto/ct/ct_policy.c": [
          "File: crypto/ct/ct_policy.c -> crypto/ct/ct_policy.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "20: CT_POLICY_EVAL_CTX *CT_POLICY_EVAL_CTX_new(void)",
          "21: {",
          "22:     CT_POLICY_EVAL_CTX *ctx = OPENSSL_zalloc(sizeof(CT_POLICY_EVAL_CTX));",
          "25:     if (ctx == NULL) {",
          "26:         CTerr(CT_F_CT_POLICY_EVAL_CTX_NEW, ERR_R_MALLOC_FAILURE);",
          "27:         return NULL;",
          "28:     }",
          "35:     return ctx;",
          "36: }",
          "",
          "[Removed Lines]",
          "23:     time_t epoch_time_in_s;",
          "31:     time(&epoch_time_in_s);",
          "32:     if (epoch_time_in_s != -1)",
          "33:         ctx->epoch_time_in_ms = epoch_time_in_s * 1000;",
          "",
          "[Added Lines]",
          "30:     ctx->epoch_time_in_ms = time(NULL) * 1000;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "231fa2b76667c6e9cdf0d57991c1ab05b82a36bc",
      "candidate_info": {
        "commit_hash": "231fa2b76667c6e9cdf0d57991c1ab05b82a36bc",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/231fa2b76667c6e9cdf0d57991c1ab05b82a36bc",
        "files": [
          "include/openssl/x509_vfy.h"
        ],
        "message": "Remove redundant decl of 509_STORE_set_flags\n\na47bc283 accidentally adds another define for X509_STORE_set_flags\nIt is already defined 5lines prior\n\nCLA: trivial\n\nReviewed-by: Tim Hudson <tjh@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/3047)\n\n(cherry picked from commit feb891990a5137bbe11768a11100d2b423a6b11e)",
        "before_after_code_files": [
          "include/openssl/x509_vfy.h||include/openssl/x509_vfy.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/openssl/x509_vfy.h||include/openssl/x509_vfy.h": [
          "File: include/openssl/x509_vfy.h -> include/openssl/x509_vfy.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "272: int X509_STORE_set_trust(X509_STORE *ctx, int trust);",
          "273: int X509_STORE_set1_param(X509_STORE *ctx, X509_VERIFY_PARAM *pm);",
          "274: X509_VERIFY_PARAM *X509_STORE_get0_param(X509_STORE *ctx);",
          "277: void X509_STORE_set_verify(X509_STORE *ctx, X509_STORE_CTX_verify_fn verify);",
          "278: #define X509_STORE_set_verify_func(ctx, func) \\",
          "",
          "[Removed Lines]",
          "275: int X509_STORE_set_flags(X509_STORE *ctx, unsigned long flags);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bc931874e97db89284175e11761cee777b29928d",
      "candidate_info": {
        "commit_hash": "bc931874e97db89284175e11761cee777b29928d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/bc931874e97db89284175e11761cee777b29928d",
        "files": [
          "ssl/ssl_asn1.c"
        ],
        "message": "Fix i2d_SSL_SESSION pp output parameter should point to end of asn1 data.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Rich Salz <rsalz@openssl.org>\nReviewed-by: Richard Levitte <levitte@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/2607)\n(cherry picked from commit a0179d0afb621a0875ddcfd939719a9628ac4444)",
        "before_after_code_files": [
          "ssl/ssl_asn1.c||ssl/ssl_asn1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "ssl/ssl_asn1.c||ssl/ssl_asn1.c": [
          "File: ssl/ssl_asn1.c -> ssl/ssl_asn1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:         goto err;",
          "279:     }",
          "284:     ret->cipher = NULL;",
          "285:     ret->cipher_id = id;",
          "",
          "[Removed Lines]",
          "281:     p = as->cipher->data;",
          "282:     id = 0x03000000L | ((unsigned long)p[0] << 8L) | (unsigned long)p[1];",
          "",
          "[Added Lines]",
          "281:     id = 0x03000000L | ((unsigned long)as->cipher->data[0] << 8L)",
          "282:                      | (unsigned long)as->cipher->data[1];",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5be6f71858a66060c7dcb46d0c015a55fc0b569d",
      "candidate_info": {
        "commit_hash": "5be6f71858a66060c7dcb46d0c015a55fc0b569d",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/5be6f71858a66060c7dcb46d0c015a55fc0b569d",
        "files": [
          "Configure",
          "engines/e_padlock.c"
        ],
        "message": "Only build the body of e_padlock when there are lower level routines\n\nengines/e_padlock.c assumes that for all x86 and x86_64 platforms, the\nlower level routines will be present.  However, that's not always\ntrue, for example for solaris-x86-cc, and that leads to build errors.\n\nThe better solution is to have configure detect if the lower level\npadlock routines are being built, and define the macro PADLOCK_ASM if\nthey are, and use that macro in our C code.\n\nReviewed-by: Andy Polyakov <appro@openssl.org>\n(Merged from https://github.com/openssl/openssl/pull/1510)\n(cherry picked from commit 7b176a549ea374fc9b64c3fa7f0812239528b696)",
        "before_after_code_files": [
          "engines/e_padlock.c||engines/e_padlock.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/EktapopaT/openssl/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "engines/e_padlock.c||engines/e_padlock.c": [
          "File: engines/e_padlock.c -> engines/e_padlock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "43: #  undef COMPILE_HW_PADLOCK",
          "50: static ENGINE *ENGINE_padlock(void);",
          "52: #   endif",
          "53: #  endif",
          "",
          "[Removed Lines]",
          "44: #  if !defined(I386_ONLY) && !defined(OPENSSL_NO_ASM)",
          "45: #   if    defined(__i386__) || defined(__i386) ||    \\",
          "46:         defined(__x86_64__) || defined(__x86_64) || \\",
          "47:         defined(_M_IX86) || defined(_M_AMD64) || defined(_M_X64)",
          "48: #    define COMPILE_HW_PADLOCK",
          "49: #    ifdef OPENSSL_NO_DYNAMIC_ENGINE",
          "51: #    endif",
          "",
          "[Added Lines]",
          "44: #  if !defined(I386_ONLY) && defined(PADLOCK_ASM)",
          "45: #   define COMPILE_HW_PADLOCK",
          "46: #   ifdef OPENSSL_NO_DYNAMIC_ENGINE",
          "",
          "---------------"
        ]
      }
    }
  ]
}