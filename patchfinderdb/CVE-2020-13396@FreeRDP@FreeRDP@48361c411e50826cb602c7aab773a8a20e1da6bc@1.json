{
  "cve_id": "CVE-2020-13396",
  "cve_desc": "An issue was discovered in FreeRDP before 2.1.1. An out-of-bounds (OOB) read vulnerability has been detected in ntlm_read_ChallengeMessage in winpr/libwinpr/sspi/NTLM/ntlm_message.c.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
  "patch_info": {
    "commit_hash": "48361c411e50826cb602c7aab773a8a20e1da6bc",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/48361c411e50826cb602c7aab773a8a20e1da6bc",
    "files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ],
    "message": "Fixed GHSL-2020-100: oob read in ntlm_read_ChallengeMessage\n\n* Added length checks for data read from stream\n* Unified function resource cleanup\n\n(cherry picked from commit 8357dedbbf7213b7d0d18f1026145b9a5b92235a)",
    "before_after_code_files": [
      "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c"
    ]
  },
  "patch_diff": {
    "winpr/libwinpr/sspi/NTLM/ntlm_message.c||winpr/libwinpr/sspi/NTLM/ntlm_message.c": [
      "File: winpr/libwinpr/sspi/NTLM/ntlm_message.c -> winpr/libwinpr/sspi/NTLM/ntlm_message.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "368: SECURITY_STATUS ntlm_read_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "369: {",
      "370:  wStream* s;",
      "374:  NTLM_AV_PAIR* AvTimestamp;",
      "375:  NTLM_CHALLENGE_MESSAGE* message;",
      "376:  ntlm_generate_client_challenge(context);",
      "377:  message = &context->CHALLENGE_MESSAGE;",
      "378:  ZeroMemory(message, sizeof(NTLM_CHALLENGE_MESSAGE));",
      "",
      "[Removed Lines]",
      "371:  int length;",
      "372:  PBYTE StartOffset;",
      "373:  PBYTE PayloadOffset;",
      "",
      "[Added Lines]",
      "370:  SECURITY_STATUS status = SEC_E_INVALID_TOKEN;",
      "372:  size_t length;",
      "373:  size_t StartOffset;",
      "374:  size_t PayloadOffset;",
      "377:  if (!context || !buffer)",
      "378:   return SEC_E_INTERNAL_ERROR;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "381:  if (!s)",
      "382:   return SEC_E_INTERNAL_ERROR;",
      "386:  if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)",
      "392:  if (message->MessageType != MESSAGE_TYPE_CHALLENGE)",
      "404:  if (Stream_GetRemainingLength(s) < 4)",
      "411:  context->NegotiateFlags = message->NegotiateFlags;",
      "413:  if (Stream_GetRemainingLength(s) < 8)",
      "420:  CopyMemory(context->ServerChallenge, message->ServerChallenge, 8);",
      "422:  if (Stream_GetRemainingLength(s) < 8)",
      "436:  if (context->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)",
      "437:  {",
      "443:  }",
      "448:  if (message->TargetName.Len > 0)",
      "449:  {",
      "450:   if (ntlm_read_message_fields_buffer(s, &(message->TargetName)) < 0)",
      "455:  }",
      "457:  if (message->TargetInfo.Len > 0)",
      "",
      "[Removed Lines]",
      "384:  StartOffset = Stream_Pointer(s);",
      "387:  {",
      "388:   Stream_Free(s, FALSE);",
      "389:   return SEC_E_INVALID_TOKEN;",
      "390:  }",
      "393:  {",
      "394:   Stream_Free(s, FALSE);",
      "395:   return SEC_E_INVALID_TOKEN;",
      "396:  }",
      "399:  {",
      "400:   Stream_Free(s, FALSE);",
      "401:   return SEC_E_INVALID_TOKEN;",
      "402:  }",
      "405:  {",
      "406:   Stream_Free(s, FALSE);",
      "407:   return SEC_E_INVALID_TOKEN;",
      "408:  }",
      "414:  {",
      "415:   Stream_Free(s, FALSE);",
      "416:   return SEC_E_INVALID_TOKEN;",
      "417:  }",
      "423:  {",
      "424:   Stream_Free(s, FALSE);",
      "425:   return SEC_E_INVALID_TOKEN;",
      "426:  }",
      "431:  {",
      "432:   Stream_Free(s, FALSE);",
      "433:   return SEC_E_INVALID_TOKEN;",
      "434:  }",
      "439:   {",
      "440:    Stream_Free(s, FALSE);",
      "441:    return SEC_E_INVALID_TOKEN;",
      "442:   }",
      "446:  PayloadOffset = Stream_Pointer(s);",
      "451:   {",
      "452:    Stream_Free(s, FALSE);",
      "453:    return SEC_E_INTERNAL_ERROR;",
      "454:   }",
      "",
      "[Added Lines]",
      "388:  StartOffset = Stream_GetPosition(s);",
      "391:   goto fail;",
      "394:   goto fail;",
      "397:   goto fail;",
      "400:   goto fail;",
      "406:   goto fail;",
      "412:   goto fail;",
      "417:   goto fail;",
      "422:    goto fail;",
      "426:  PayloadOffset = Stream_GetPosition(s);",
      "428:  status = SEC_E_INTERNAL_ERROR;",
      "432:    goto fail;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "459:   size_t cbAvTimestamp;",
      "461:   if (ntlm_read_message_fields_buffer(s, &(message->TargetInfo)) < 0)",
      "467:   context->ChallengeTargetInfo.pvBuffer = message->TargetInfo.Buffer;",
      "468:   context->ChallengeTargetInfo.cbBuffer = message->TargetInfo.Len;",
      "",
      "[Removed Lines]",
      "462:   {",
      "463:    Stream_Free(s, FALSE);",
      "464:    return SEC_E_INTERNAL_ERROR;",
      "465:   }",
      "",
      "[Added Lines]",
      "440:    goto fail;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "474:    PBYTE ptr = ntlm_av_pair_get_value_pointer(AvTimestamp);",
      "476:    if (!ptr)",
      "479:    if (context->NTLMv2)",
      "480:     context->UseMIC = TRUE;",
      "",
      "[Removed Lines]",
      "477:     return SEC_E_INTERNAL_ERROR;",
      "",
      "[Added Lines]",
      "452:     goto fail;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "484:  }",
      "486:  length = (PayloadOffset - StartOffset) + message->TargetName.Len + message->TargetInfo.Len;",
      "488:  if (!sspi_SecBufferAlloc(&context->ChallengeMessage, length))",
      "495: #ifdef WITH_DEBUG_NTLM",
      "496:  WLog_DBG(TAG, \"CHALLENGE_MESSAGE (length = %d)\", length);",
      "497:  winpr_HexDump(TAG, WLOG_DEBUG, context->ChallengeMessage.pvBuffer,",
      "",
      "[Removed Lines]",
      "489:  {",
      "490:   Stream_Free(s, FALSE);",
      "491:   return SEC_E_INTERNAL_ERROR;",
      "492:  }",
      "494:  CopyMemory(context->ChallengeMessage.pvBuffer, StartOffset, length);",
      "",
      "[Added Lines]",
      "462:  if (length > buffer->cbBuffer)",
      "463:   goto fail;",
      "466:   goto fail;",
      "468:  if (context->ChallengeMessage.pvBuffer)",
      "469:   CopyMemory(context->ChallengeMessage.pvBuffer, Stream_Buffer(s) + StartOffset, length);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "517:  if (context->NTLMv2)",
      "518:  {",
      "519:   if (ntlm_construct_authenticate_target_info(context) < 0)",
      "525:   sspi_SecBufferFree(&context->ChallengeTargetInfo);",
      "526:   context->ChallengeTargetInfo.pvBuffer = context->AuthenticateTargetInfo.pvBuffer;",
      "",
      "[Removed Lines]",
      "520:   {",
      "521:    Stream_Free(s, FALSE);",
      "522:    return SEC_E_INTERNAL_ERROR;",
      "523:   }",
      "",
      "[Added Lines]",
      "495:    goto fail;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "533:  {",
      "534:   Stream_Free(s, FALSE);",
      "535:   return SEC_E_INTERNAL_ERROR;",
      "536:  }",
      "539:  {",
      "540:   Stream_Free(s, FALSE);",
      "541:   return SEC_E_INTERNAL_ERROR;",
      "542:  }",
      "",
      "[Added Lines]",
      "505:   goto fail;",
      "508:   goto fail;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "579: #endif",
      "580:  context->state = NTLM_STATE_AUTHENTICATE;",
      "581:  ntlm_free_message_fields_buffer(&(message->TargetName));",
      "582:  Stream_Free(s, FALSE);",
      "584: }",
      "586: SECURITY_STATUS ntlm_write_ChallengeMessage(NTLM_CONTEXT* context, PSecBuffer buffer)",
      "",
      "[Removed Lines]",
      "583:  return SEC_I_CONTINUE_NEEDED;",
      "",
      "[Added Lines]",
      "548:  status = SEC_I_CONTINUE_NEEDED;",
      "549: fail:",
      "551:  return status;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "7ab56ab14c8b3e5416eee1777d5c47333dfea852",
      "candidate_info": {
        "commit_hash": "7ab56ab14c8b3e5416eee1777d5c47333dfea852",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/7ab56ab14c8b3e5416eee1777d5c47333dfea852",
        "files": [
          "winpr/libwinpr/utils/collections/PubSub.c"
        ],
        "message": "Fixed #6201: event handler count check\n\n(cherry picked from commit 018eaa44f52b3e9e33bfa80493faf9be57713a3d)",
        "before_after_code_files": [
          "winpr/libwinpr/utils/collections/PubSub.c||winpr/libwinpr/utils/collections/PubSub.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/utils/collections/PubSub.c||winpr/libwinpr/utils/collections/PubSub.c": [
          "File: winpr/libwinpr/utils/collections/PubSub.c -> winpr/libwinpr/utils/collections/PubSub.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "112:  {",
          "113:   status = 0;",
          "120:   else",
          "122:    status = -1;",
          "124:  }",
          "126:  if (pubSub->synchronized)",
          "",
          "[Removed Lines]",
          "115:   if (event->EventHandlerCount <= MAX_EVENT_HANDLERS)",
          "116:   {",
          "117:    event->EventHandlers[event->EventHandlerCount] = EventHandler;",
          "118:    event->EventHandlerCount++;",
          "119:   }",
          "121:   {",
          "123:   }",
          "",
          "[Added Lines]",
          "115:   if (event->EventHandlerCount < MAX_EVENT_HANDLERS)",
          "116:    event->EventHandlers[event->EventHandlerCount++] = EventHandler;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "819aa2a1645be3a28857023cf167f23f8a5e6038",
      "candidate_info": {
        "commit_hash": "819aa2a1645be3a28857023cf167f23f8a5e6038",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/819aa2a1645be3a28857023cf167f23f8a5e6038",
        "files": [
          "winpr/libwinpr/sspi/sspi_winpr.c"
        ],
        "message": "Fixed BehaviorSanitizer warnings\n\n(cherry picked from commit 0d28390319025c86e7e9d7cc776d88ef24f9db0e)",
        "before_after_code_files": [
          "winpr/libwinpr/sspi/sspi_winpr.c||winpr/libwinpr/sspi/sspi_winpr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "winpr/libwinpr/sspi/sspi_winpr.c||winpr/libwinpr/sspi/sspi_winpr.c": [
          "File: winpr/libwinpr/sspi/sspi_winpr.c -> winpr/libwinpr/sspi/sspi_winpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "241:   passwordLength *= 2;",
          "242:  }",
          "247:  free(credentials->identity.User);",
          "248:  free(credentials->identity.Domain);",
          "249:  free(credentials->identity.Password);",
          "",
          "[Removed Lines]",
          "244:  memset(credentials->identity.User, 0, userLength);",
          "245:  memset(credentials->identity.Domain, 0, domainLength);",
          "246:  memset(credentials->identity.Password, 0, passwordLength);",
          "",
          "[Added Lines]",
          "244:  if (credentials->identity.User)",
          "245:   memset(credentials->identity.User, 0, userLength);",
          "246:  if (credentials->identity.Domain)",
          "247:   memset(credentials->identity.Domain, 0, domainLength);",
          "248:  if (credentials->identity.Password)",
          "249:   memset(credentials->identity.Password, 0, passwordLength);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "5cf27e3969d3e89419cbc0c174b67ffbfa881321",
      "candidate_info": {
        "commit_hash": "5cf27e3969d3e89419cbc0c174b67ffbfa881321",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/5cf27e3969d3e89419cbc0c174b67ffbfa881321",
        "files": [
          "libfreerdp/core/info.c"
        ],
        "message": "Rewritten check to satisfy BehaviouralSanitizer\n\n(cherry picked from commit 14829de866b43e7f2740b46f0c736b9adf5067eb)",
        "before_after_code_files": [
          "libfreerdp/core/info.c||libfreerdp/core/info.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/core/info.c||libfreerdp/core/info.c": [
          "File: libfreerdp/core/info.c -> libfreerdp/core/info.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1142:  if (cbDomain)",
          "1143:  {",
          "1145:   {",
          "1146:    WLog_ERR(TAG, \"protocol error: invalid cbDomain value: %\" PRIu32 \"\", cbDomain);",
          "1147:    goto fail;",
          "",
          "[Removed Lines]",
          "1144:   if ((cbDomain % 2) || cbDomain > 52)",
          "",
          "[Added Lines]",
          "1144:   if ((cbDomain % 2) || (cbDomain > 52))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1156:   ptrconv.bp = Stream_Pointer(s);",
          "1159:   {",
          "1160:    WLog_ERR(TAG, \"protocol error: Domain field must be null terminated\");",
          "1161:    goto fail;",
          "",
          "[Removed Lines]",
          "1158:   if (ptrconv.wp[cbDomain / 2 - 1])",
          "",
          "[Added Lines]",
          "1158:   if (ptrconv.bp[cbDomain - 1] || ptrconv.bp[cbDomain - 2])",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "899df25246746373b5585e2f890d1c0be498ff76",
      "candidate_info": {
        "commit_hash": "899df25246746373b5585e2f890d1c0be498ff76",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/899df25246746373b5585e2f890d1c0be498ff76",
        "files": [
          "client/Windows/wf_client.c"
        ],
        "message": "Windows Authentication - Then launced with username argument prefill the name in the authentication box.\n\n(cherry picked from commit 318075676b5ea610b1ba47da600eb418812951cb)",
        "before_after_code_files": [
          "client/Windows/wf_client.c||client/Windows/wf_client.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "client/Windows/wf_client.c||client/Windows/wf_client.c": [
          "File: client/Windows/wf_client.c -> client/Windows/wf_client.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "438:  fSave = FALSE;",
          "439:  dwFlags = CREDUI_FLAGS_DO_NOT_PERSIST | CREDUI_FLAGS_EXCLUDE_CERTIFICATES;",
          "441:  if (wfc->isConsole)",
          "442:   status = CredUICmdLinePromptForCredentialsA(",
          "443:       title, NULL, 0, UserName, CREDUI_MAX_USERNAME_LENGTH + 1, Password,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "441:  if (username && *username)",
          "442:   strncpy(UserName, *username, CREDUI_MAX_USERNAME_LENGTH);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "37158cd17f02c64177c8047ca283d1fa22026c7e",
      "candidate_info": {
        "commit_hash": "37158cd17f02c64177c8047ca283d1fa22026c7e",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/37158cd17f02c64177c8047ca283d1fa22026c7e",
        "files": [
          "libfreerdp/codec/planar.c"
        ],
        "message": "Fixed UndefinedBehaviour in planar left shift\n\n(cherry picked from commit 328691c46597c194f01a77a9d33d58b2faa88c9d)",
        "before_after_code_files": [
          "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/6212"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/planar.c||libfreerdp/codec/planar.c": [
          "File: libfreerdp/codec/planar.c -> libfreerdp/codec/planar.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1170:                                                BYTE* outPlane)",
          "1171: {",
          "1172:  char s2c;",
          "1174:  UINT32 y, x;",
          "1175:  BYTE* outPtr;",
          "1176:  const BYTE *srcPtr, *prevLinePtr;",
          "",
          "[Removed Lines]",
          "1173:  INT32 delta;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1194:  {",
          "1195:   for (x = 0; x < width; x++, outPtr++, srcPtr++, prevLinePtr++)",
          "1196:   {",
          "1198:    s2c = (delta >= 0) ? (char)delta : (char)(~((BYTE)(-delta)) + 1);",
          "1201:   }",
          "1202:  }",
          "",
          "[Removed Lines]",
          "1197:    delta = *srcPtr - *prevLinePtr;",
          "1199:    s2c = (s2c >= 0) ? (s2c << 1) : (char)(((~((BYTE)s2c) + 1) << 1) - 1);",
          "",
          "[Added Lines]",
          "1196:    INT32 delta = *srcPtr - *prevLinePtr;",
          "1198:    s2c = (s2c >= 0) ? ((UINT32)s2c << 1) : (char)(((UINT32)(~((BYTE)s2c) + 1) << 1) - 1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}