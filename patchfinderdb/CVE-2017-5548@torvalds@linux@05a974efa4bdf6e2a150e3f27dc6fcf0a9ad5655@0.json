{
  "cve_id": "CVE-2017-5548",
  "cve_desc": "drivers/net/ieee802154/atusb.c in the Linux kernel 4.9.x before 4.9.6 interacts incorrectly with the CONFIG_VMAP_STACK option, which allows local users to cause a denial of service (system crash or memory corruption) or possibly have unspecified other impact by leveraging use of more than one virtual page for a DMA scatterlist.",
  "repo": "torvalds/linux",
  "patch_hash": "05a974efa4bdf6e2a150e3f27dc6fcf0a9ad5655",
  "patch_info": {
    "commit_hash": "05a974efa4bdf6e2a150e3f27dc6fcf0a9ad5655",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/05a974efa4bdf6e2a150e3f27dc6fcf0a9ad5655",
    "files": [
      "drivers/net/ieee802154/atusb.c"
    ],
    "message": "ieee802154: atusb: do not use the stack for buffers to make them DMA able\n\nFrom 4.9 we should really avoid using the stack here as this will not be DMA\nable on various platforms. This changes the buffers already being present in\ntime of 4.9 being released. This should go into stable as well.\n\nReported-by: Dan Carpenter <dan.carpenter@oracle.com>\nCc: stable@vger.kernel.org\nSigned-off-by: Stefan Schmidt <stefan@osg.samsung.com>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>",
    "before_after_code_files": [
      "drivers/net/ieee802154/atusb.c||drivers/net/ieee802154/atusb.c"
    ]
  },
  "patch_diff": {
    "drivers/net/ieee802154/atusb.c||drivers/net/ieee802154/atusb.c": [
      "File: drivers/net/ieee802154/atusb.c -> drivers/net/ieee802154/atusb.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "117: {",
      "118:  struct usb_device *usb_dev = atusb->usb_dev;",
      "119:  int ret;",
      "120:  uint8_t value;",
      "122:  dev_dbg(&usb_dev->dev, \"atusb: reg = 0x%x\\n\", reg);",
      "123:  ret = atusb_control_msg(atusb, usb_rcvctrlpipe(usb_dev, 0),",
      "124:     ATUSB_REG_READ, ATUSB_REQ_FROM_DEV,",
      "127: }",
      "129: static int atusb_write_subreg(struct atusb *atusb, uint8_t reg, uint8_t mask,",
      "",
      "[Removed Lines]",
      "125:     0, reg, &value, 1, 1000);",
      "126:  return ret >= 0 ? value : ret;",
      "",
      "[Added Lines]",
      "120:  uint8_t *buffer;",
      "123:  buffer = kmalloc(1, GFP_KERNEL);",
      "124:  if (!buffer)",
      "125:   return -ENOMEM;",
      "130:     0, reg, buffer, 1, 1000);",
      "132:  if (ret >= 0) {",
      "133:   value = buffer[0];",
      "134:   kfree(buffer);",
      "135:   return value;",
      "136:  } else {",
      "137:   kfree(buffer);",
      "138:   return ret;",
      "139:  }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "608: static int atusb_get_and_show_revision(struct atusb *atusb)",
      "609: {",
      "610:  struct usb_device *usb_dev = atusb->usb_dev;",
      "612:  int ret;",
      "615:  ret = atusb_control_msg(atusb, usb_rcvctrlpipe(usb_dev, 0),",
      "616:     ATUSB_ID, ATUSB_REQ_FROM_DEV, 0, 0,",
      "",
      "[Removed Lines]",
      "611:  unsigned char buffer[3];",
      "",
      "[Added Lines]",
      "624:  unsigned char *buffer;",
      "627:  buffer = kmalloc(3, GFP_KERNEL);",
      "628:  if (!buffer)",
      "629:   return -ENOMEM;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "631:   dev_info(&usb_dev->dev, \"Please update to version 0.2 or newer\");",
      "632:  }",
      "634:  return ret;",
      "635: }",
      "637: static int atusb_get_and_show_build(struct atusb *atusb)",
      "638: {",
      "639:  struct usb_device *usb_dev = atusb->usb_dev;",
      "641:  int ret;",
      "643:  ret = atusb_control_msg(atusb, usb_rcvctrlpipe(usb_dev, 0),",
      "644:     ATUSB_BUILD, ATUSB_REQ_FROM_DEV, 0, 0,",
      "645:     build, ATUSB_BUILD_SIZE, 1000);",
      "",
      "[Removed Lines]",
      "640:  char build[ATUSB_BUILD_SIZE + 1];",
      "",
      "[Added Lines]",
      "651:  kfree(buffer);",
      "658:  char *build;",
      "661:  build = kmalloc(ATUSB_BUILD_SIZE + 1, GFP_KERNEL);",
      "662:  if (!build)",
      "663:   return -ENOMEM;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "648:   dev_info(&usb_dev->dev, \"Firmware: build %s\\n\", build);",
      "649:  }",
      "651:  return ret;",
      "652: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "673:  kfree(build);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "909dcf9b16738d2dee46b688378d64fc771712b8",
      "candidate_info": {
        "commit_hash": "909dcf9b16738d2dee46b688378d64fc771712b8",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/909dcf9b16738d2dee46b688378d64fc771712b8",
        "files": [
          "drivers/net/ieee802154/atusb.c"
        ],
        "message": "ieee802154: atusb: switch from uint8_t to u8\n\nSwitch top the preferred kernel type naming.\nFound by checkpatch.\n\nSigned-off-by: Stefan Schmidt <stefan@osg.samsung.com>",
        "before_after_code_files": [
          "drivers/net/ieee802154/atusb.c||drivers/net/ieee802154/atusb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "drivers/net/ieee802154/atusb.c||drivers/net/ieee802154/atusb.c"
          ],
          "candidate": [
            "drivers/net/ieee802154/atusb.c||drivers/net/ieee802154/atusb.c"
          ]
        }
      },
      "candidate_diff": {
        "drivers/net/ieee802154/atusb.c||drivers/net/ieee802154/atusb.c": [
          "File: drivers/net/ieee802154/atusb.c -> drivers/net/ieee802154/atusb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "105:  return ret;",
          "106: }",
          "109: {",
          "110:  struct usb_device *usb_dev = atusb->usb_dev;",
          "",
          "[Removed Lines]",
          "108: static int atusb_command(struct atusb *atusb, uint8_t cmd, uint8_t arg)",
          "",
          "[Added Lines]",
          "108: static int atusb_command(struct atusb *atusb, u8 cmd, u8 arg)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "114:      cmd, ATUSB_REQ_TO_DEV, arg, 0, NULL, 0, 1000);",
          "115: }",
          "118: {",
          "119:  struct usb_device *usb_dev = atusb->usb_dev;",
          "",
          "[Removed Lines]",
          "117: static int atusb_write_reg(struct atusb *atusb, uint8_t reg, uint8_t value)",
          "",
          "[Added Lines]",
          "117: static int atusb_write_reg(struct atusb *atusb, u8 reg, u8 value)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "125:      value, reg, NULL, 0, 1000);",
          "126: }",
          "129: {",
          "130:  struct usb_device *usb_dev = atusb->usb_dev;",
          "131:  int ret;",
          "135:  buffer = kmalloc(1, GFP_KERNEL);",
          "136:  if (!buffer)",
          "",
          "[Removed Lines]",
          "128: static int atusb_read_reg(struct atusb *atusb, uint8_t reg)",
          "132:  uint8_t *buffer;",
          "133:  uint8_t value;",
          "",
          "[Added Lines]",
          "128: static int atusb_read_reg(struct atusb *atusb, u8 reg)",
          "132:  u8 *buffer;",
          "133:  u8 value;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "151:  }",
          "152: }",
          "156: {",
          "157:  struct usb_device *usb_dev = atusb->usb_dev;",
          "159:  int ret = 0;",
          "161:  dev_dbg(&usb_dev->dev, \"atusb_write_subreg: 0x%02x <- 0x%02x\\n\",",
          "",
          "[Removed Lines]",
          "154: static int atusb_write_subreg(struct atusb *atusb, uint8_t reg, uint8_t mask,",
          "155:          uint8_t shift, uint8_t value)",
          "158:  uint8_t orig, tmp;",
          "",
          "[Added Lines]",
          "154: static int atusb_write_subreg(struct atusb *atusb, u8 reg, u8 mask,",
          "155:          u8 shift, u8 value)",
          "158:  u8 orig, tmp;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "265: {",
          "266:  struct usb_device *usb_dev = atusb->usb_dev;",
          "269:  dev_dbg(&usb_dev->dev, \"atusb_tx_done (0x%02x/0x%02x)\\n\", seq, expect);",
          "270:  if (seq == expect) {",
          "",
          "[Removed Lines]",
          "264: static void atusb_tx_done(struct atusb *atusb, uint8_t seq)",
          "267:  uint8_t expect = atusb->tx_ack_seq;",
          "",
          "[Added Lines]",
          "264: static void atusb_tx_done(struct atusb *atusb, u8 seq)",
          "267:  u8 expect = atusb->tx_ack_seq;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "287:  struct usb_device *usb_dev = urb->dev;",
          "288:  struct sk_buff *skb = urb->context;",
          "289:  struct atusb *atusb = SKB_ATUSB(skb);",
          "292:  if (!urb->actual_length) {",
          "293:   dev_dbg(&usb_dev->dev, \"atusb_in: zero-sized URB ?\\n\");",
          "",
          "[Removed Lines]",
          "290:  uint8_t len, lqi;",
          "",
          "[Added Lines]",
          "290:  u8 len, lqi;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "880: static int atusb_get_and_conf_chip(struct atusb *atusb)",
          "881: {",
          "882:  struct usb_device *usb_dev = atusb->usb_dev;",
          "884:  const char *chip;",
          "885:  struct ieee802154_hw *hw = atusb->hw;",
          "",
          "[Removed Lines]",
          "883:  uint8_t man_id_0, man_id_1, part_num, version_num;",
          "",
          "[Added Lines]",
          "883:  u8 man_id_0, man_id_1, part_num, version_num;",
          "",
          "---------------"
        ]
      }
    }
  ]
}