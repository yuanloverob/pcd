{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "16d7e87caa1e02fabf6c226f1c0cf89c820c6a73",
      "candidate_info": {
        "commit_hash": "16d7e87caa1e02fabf6c226f1c0cf89c820c6a73",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/16d7e87caa1e02fabf6c226f1c0cf89c820c6a73",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c"
        ],
        "message": "Further simplifications to sqlite3VdbeMemSetStr().\n\nFossilOrigin-Name: 1d212957079a2caa30f3c9d80f43464781bc9634c2b5181a5814efbddae31711",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 5c499da8a4d0babc56883aa362ae124772fd9214a51169a88a5dee523d051658",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1045:     assert( enc!=0 );",
          "1046:     if( enc==SQLITE_UTF8 ){",
          "1047:       nByte = 0x7fffffff & (int)strlen(z);",
          "1049:     }else{",
          "1050:       for(nByte=0; nByte<=iLimit && (z[nByte] | z[nByte+1]); nByte+=2){}",
          "1051:     }",
          "",
          "[Removed Lines]",
          "1048:       if( nByte>iLimit ) nByte = iLimit+1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1059:   if( xDel==SQLITE_TRANSIENT ){",
          "1061:     if( flags&MEM_Term ){",
          "1062:       nAlloc += (enc==SQLITE_UTF8?1:2);",
          "1063:     }",
          "",
          "[Removed Lines]",
          "1060:     int nAlloc = nByte;",
          "",
          "[Added Lines]",
          "1059:     u32 nAlloc = nByte;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1067:     testcase( nAlloc==0 );",
          "1068:     testcase( nAlloc==31 );",
          "1069:     testcase( nAlloc==32 );",
          "1071:       return SQLITE_NOMEM_BKPT;",
          "1072:     }",
          "1073:     memcpy(pMem->z, z, nAlloc);",
          "1078:   }else{",
          "1079:     sqlite3VdbeMemRelease(pMem);",
          "1080:     pMem->z = (char *)z;",
          "1083:   }",
          "1085:   pMem->n = nByte;",
          "",
          "[Removed Lines]",
          "1070:     if( sqlite3VdbeMemClearAndResize(pMem, MAX(nAlloc,32)) ){",
          "1074:   }else if( xDel==SQLITE_DYNAMIC ){",
          "1075:     sqlite3VdbeMemRelease(pMem);",
          "1076:     pMem->zMalloc = pMem->z = (char *)z;",
          "1077:     pMem->szMalloc = sqlite3DbMallocSize(pMem->db, pMem->zMalloc);",
          "1081:     pMem->xDel = xDel;",
          "1082:     flags |= ((xDel==SQLITE_STATIC)?MEM_Static:MEM_Dyn);",
          "",
          "[Added Lines]",
          "1069:     if( sqlite3VdbeMemClearAndResize(pMem, (int)MAX(nAlloc,32)) ){",
          "1076:     if( xDel==SQLITE_DYNAMIC ){",
          "1077:       pMem->zMalloc = pMem->z;",
          "1078:       pMem->szMalloc = sqlite3DbMallocSize(pMem->db, pMem->zMalloc);",
          "1079:     }else{",
          "1080:       pMem->xDel = xDel;",
          "1081:       flags |= ((xDel==SQLITE_STATIC)?MEM_Static:MEM_Dyn);",
          "1082:     }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2a0c16f27653982880ab76714b5aaae65db43315",
      "candidate_info": {
        "commit_hash": "2a0c16f27653982880ab76714b5aaae65db43315",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2a0c16f27653982880ab76714b5aaae65db43315",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/nulls1.test"
        ],
        "message": "Add tests for sort-by-index cases that use IN() and non-default NULL handling.\n\nFossilOrigin-Name: 09d660ecde723fb30f3bb3684bbb7f95825d78da6a6f33ddf57846054cd563e0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/nulls1.test||test/nulls1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a9a82ee88d2d12209a674bd19167277aa91a6912e7a8bbf3714f90d559307fee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "119: }",
          "121: #-------------------------------------------------------------------------",
          "122: ifcapable vtab {",
          "123:   register_echo_module db",
          "124:   do_execsql_test 4.0 {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "122: #",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:   } {1 1 1  3 3 3  5 5 5  2 {} 2  4 {} 4}",
          "148: }",
          "150: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151: #-------------------------------------------------------------------------",
          "152: #",
          "153: do_execsql_test 5.0 {",
          "154:   CREATE TABLE t4(a, b, c);",
          "155:   INSERT INTO t4 VALUES(1, 1, 11);",
          "156:   INSERT INTO t4 VALUES(1, 2, 12);",
          "157:   INSERT INTO t4 VALUES(1, NULL, 1);",
          "159:   INSERT INTO t4 VALUES(2, NULL, 1);",
          "160:   INSERT INTO t4 VALUES(2, 2, 12);",
          "161:   INSERT INTO t4 VALUES(2, 1, 11);",
          "163:   INSERT INTO t4 VALUES(3, NULL, 1);",
          "164:   INSERT INTO t4 VALUES(3, 2, 12);",
          "165:   INSERT INTO t4 VALUES(3, NULL, 3);",
          "166: }",
          "168: do_execsql_test 5.1 {",
          "169:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a, b NULLS LAST",
          "170: } {",
          "171:   1 1 11   1 2 12   1 {} 1",
          "172:   2 1 11   2 2 12   2 {} 1",
          "173:   3 2 12   3 {} 1   3 {} 3",
          "174: }",
          "175: do_execsql_test 5.2 {",
          "176:   CREATE INDEX t4ab ON t4(a, b);",
          "177:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a, b NULLS LAST",
          "178: } {",
          "179:   1 1 11   1 2 12   1 {} 1",
          "180:   2 1 11   2 2 12   2 {} 1",
          "181:   3 2 12   3 {} 1   3 {} 3",
          "182: }",
          "183: do_eqp_test 5.3 {",
          "184:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a, b NULLS LAST",
          "185: } {",
          "186:   QUERY PLAN",
          "187:   `--SEARCH TABLE t4 USING INDEX t4ab (a=?)",
          "188: }",
          "190: do_execsql_test 5.4 {",
          "191:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a DESC, b DESC NULLS FIRST",
          "192: } {",
          "193:   3 {} 3   3 {} 1   3 2 12",
          "194:   2 {} 1   2 2 12   2 1 11",
          "195:   1 {} 1   1 2 12   1 1 11",
          "196: }",
          "197: do_eqp_test 5.5 {",
          "198:   SELECT * FROM t4 WHERE a IN (1, 2, 3) ORDER BY a DESC, b DESC NULLS FIRST",
          "199: } {",
          "200:   QUERY PLAN",
          "201:   `--SEARCH TABLE t4 USING INDEX t4ab (a=?)",
          "202: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "07eb7f89a048bc368a7d9df764f05f8e101d7aa6",
      "candidate_info": {
        "commit_hash": "07eb7f89a048bc368a7d9df764f05f8e101d7aa6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/07eb7f89a048bc368a7d9df764f05f8e101d7aa6",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "main.mk",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Remove the obsolete \"fastfuzztest\" target from the makefiles.\n\nFossilOrigin-Name: 3d44f1ee0f606409bc9c091dae2c9d2e78ada318a0de08437f4f4835a1a5d203",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1242:  ./fuzzcheck$(TEXE) $(FUZZDATA)",
          "1243:  ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "1249: valgrindfuzz: fuzzcheck$(TEXT) $(FUZZDATA) sessionfuzz$(TEXE) $(TOP)/test/sessionfuzz-data1.db",
          "1250:  valgrind ./fuzzcheck$(TEXE) --cell-size-check --limit-mem 10M --timeout 600 $(FUZZDATA)",
          "1251:  valgrind ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Removed Lines]",
          "1245: fastfuzztest: fuzzcheck$(TEXE) $(FUZZDATA) sessionfuzz$(TEXE) $(TOP)/test/sessionfuzz-data1.db",
          "1246:  ./fuzzcheck$(TEXE) --limit-mem 100M $(FUZZDATA)",
          "1247:  ./sessionfuzz$(TEXE) run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2404: fuzztest: fuzzcheck.exe",
          "2405:  .\\fuzzcheck.exe $(FUZZDATA)",
          "2410: # Minimal testing that runs in less than 3 minutes (on a fast machine)",
          "2411: #",
          "2412: quicktest: testfixture.exe sourcetest",
          "",
          "[Removed Lines]",
          "2407: fastfuzztest: fuzzcheck.exe",
          "2408:  .\\fuzzcheck.exe --limit-mem 100M $(FUZZDATA)",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "934:  ./fuzzcheck$(EXE) $(FUZZDATA)",
          "935:  ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "941: valgrindfuzz: fuzzcheck$(EXE) $(FUZZDATA) sessionfuzz$(EXE) $(TOP)/test/sessionfuzz-data1.db",
          "942:  valgrind ./fuzzcheck$(EXE) --cell-size-check --limit-mem 10M --timeout 600 $(FUZZDATA)",
          "943:  valgrind ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Removed Lines]",
          "937: fastfuzztest: fuzzcheck$(EXE) $(FUZZDATA) sessionfuzz$(EXE) $(TOP)/test/sessionfuzz-data1.db",
          "938:  ./fuzzcheck$(EXE) --limit-mem 100M $(FUZZDATA)",
          "939:  ./sessionfuzz run $(TOP)/test/sessionfuzz-data1.db",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1ca5ef84506aac3e2f08baa36095b3befdeedf2a3443fcd9154a277b55cbf64b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "822bc969f65f9d4dfb77df8c9221c058d16c9580",
      "candidate_info": {
        "commit_hash": "822bc969f65f9d4dfb77df8c9221c058d16c9580",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/822bc969f65f9d4dfb77df8c9221c058d16c9580",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/skipscan1.test"
        ],
        "message": "Disable the skip-scan optimization for DISTINCT queries. Fix for ticket [ced41c7c7d6b4d36]\n\nFossilOrigin-Name: a871d69c6de65038360aa6142fbad22689fb347e526cca56bb83e695c1441fbe",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/skipscan1.test||test/skipscan1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 48b518eb6f76fb0beb161d1ebcf3b793efc36262d6d77a1ad5906b6501138e28",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2723:    && pProbe->noSkipScan==0",
          "2724:    && OptimizationEnabled(db, SQLITE_SkipScan)",
          "2726:    && (rc = whereLoopResize(db, pNew, pNew->nLTerm+1))==SQLITE_OK",
          "2727:   ){",
          "2728:     LogEst nIter;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2726:    && (pWInfo->wctrlFlags & (WHERE_WANT_DISTINCT|WHERE_DISTINCTBY))==0",
          "",
          "---------------"
        ],
        "test/skipscan1.test||test/skipscan1.test": [
          "File: test/skipscan1.test -> test/skipscan1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "373:   SELECT a,b,c,d,'|' FROM t6 WHERE d<>99 AND b=345 ORDER BY a DESC;",
          "374: } {}",
          "376: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "376: # 2019-07-29 Ticket ced41c7c7d6b4d36",
          "377: # Skip-scan is disabled for DISTINCT queries",
          "378: #",
          "379: db close",
          "380: sqlite3 db :memory:",
          "381: do_execsql_test skipscan1-3.1 {",
          "382:   CREATE TABLE t1 (c1, c2, c3, c4, PRIMARY KEY(c4, c3));",
          "383:   INSERT INTO t1 VALUES(NULL,0,1,NULL);",
          "384:   INSERT INTO t1 VALUES(0,NULL,1,NULL);",
          "385:   INSERT INTO t1 VALUES(NULL,NULL,1,NULL);",
          "386:   ANALYZE sqlite_master;",
          "387:   INSERT INTO sqlite_stat1 VALUES('t1','sqlite_autoindex_t1_1','18 18 6');",
          "388:   ANALYZE sqlite_master;",
          "389:   SELECT DISTINCT quote(c1), quote(c2), quote(c3), quote(c4), '|'",
          "390:     FROM t1 WHERE t1.c3 = 1;",
          "391: } {NULL 0 1 NULL | 0 NULL 1 NULL | NULL NULL 1 NULL |}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f9b0c45161346f64478167a599f0bbcec7801a4d",
      "candidate_info": {
        "commit_hash": "f9b0c45161346f64478167a599f0bbcec7801a4d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/f9b0c45161346f64478167a599f0bbcec7801a4d",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "test/altertab.test"
        ],
        "message": "Fix a problem with renaming an INTEGER PRIMARY KEY column of a WITHOUT ROWID table using ALTER TABLE.\n\nFossilOrigin-Name: 91f701d39852ef1ddb29d1527d1520867c5efea110333315c55d8b08084384e7",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "test/altertab.test||test/altertab.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c2e439bccc40825e211bfa9a88e6a251ff066ca7453d4e7cb5eab56ce7332635",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1859:     pList = sqlite3ExprListAppend(pParse, 0,",
          "1860:                   sqlite3ExprAlloc(db, TK_ID, &ipkToken, 0));",
          "1861:     if( pList==0 ) return;",
          "1862:     pList->a[0].sortOrder = pParse->iPkSortOrder;",
          "1863:     assert( pParse->pNewTable==pTab );",
          "1864:     sqlite3CreateIndex(pParse, 0, 0, 0, pList, pTab->keyConf, 0, 0, 0, 0,",
          "1865:                        SQLITE_IDXTYPE_PRIMARYKEY);",
          "1866:     if( db->mallocFailed || pParse->nErr ) return;",
          "1867:     pPk = sqlite3PrimaryKeyIndex(pTab);",
          "1869:   }else{",
          "1870:     pPk = sqlite3PrimaryKeyIndex(pTab);",
          "1871:     assert( pPk!=0 );",
          "",
          "[Removed Lines]",
          "1868:     pTab->iPKey = -1;",
          "",
          "[Added Lines]",
          "1862:     if( IN_RENAME_OBJECT ){",
          "1863:       sqlite3RenameTokenRemap(pParse, pList->a[0].pExpr, &pTab->iPKey);",
          "1864:     }",
          "1867:     pTab->iPKey = -1;",
          "",
          "---------------"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "569:   User {CREATE TABLE \"User\" (id integer)}",
          "570: }",
          "572: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "572: #-------------------------------------------------------------------------",
          "573: reset_db",
          "574: do_execsql_test 18.1.0 {",
          "575:   CREATE TABLE t0 (c0 INTEGER, PRIMARY KEY(c0)) WITHOUT ROWID;",
          "576: }",
          "577: breakpoint",
          "578: do_execsql_test 18.1.1 {",
          "579:   ALTER TABLE t0 RENAME COLUMN c0 TO c1;",
          "580: }",
          "581: do_execsql_test 18.1.2 {",
          "582:   SELECT sql FROM sqlite_master;",
          "583: } {{CREATE TABLE t0 (c1 INTEGER, PRIMARY KEY(c1)) WITHOUT ROWID}}",
          "585: reset_db",
          "586: do_execsql_test 18.2.0 {",
          "587:   CREATE TABLE t0 (c0 INTEGER, PRIMARY KEY(c0));",
          "588: }",
          "589: do_execsql_test 18.2.1 {",
          "590:   ALTER TABLE t0 RENAME COLUMN c0 TO c1;",
          "591: }",
          "592: do_execsql_test 18.2.2 {",
          "593:   SELECT sql FROM sqlite_master;",
          "594: } {{CREATE TABLE t0 (c1 INTEGER, PRIMARY KEY(c1))}}",
          "",
          "---------------"
        ]
      }
    }
  ]
}