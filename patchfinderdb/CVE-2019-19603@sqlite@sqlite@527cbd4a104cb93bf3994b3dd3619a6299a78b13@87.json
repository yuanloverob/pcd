{
  "cve_id": "CVE-2019-19603",
  "cve_desc": "SQLite 3.30.1 mishandles certain SELECT statements with a nonexistent VIEW, leading to an application crash.",
  "repo": "sqlite/sqlite",
  "patch_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
  "patch_info": {
    "commit_hash": "527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/527cbd4a104cb93bf3994b3dd3619a6299a78b13",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/build.c",
      "src/sqliteInt.h",
      "test/altertab.test"
    ],
    "message": "Do not allow CREATE TABLE or CREATE VIEW of an object with a name that looks like a shadow table name.\n\nFossilOrigin-Name: 6aef58b629d89955f85f65191ba2be67b2adfac4f0327fe9a7141cb2705dbc00",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/build.c||src/build.c",
      "src/sqliteInt.h||src/sqliteInt.h",
      "test/altertab.test||test/altertab.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8ad34d36a141fa8f5d9bd784dfeb892c983897a6dc6b867607cc668508acf944",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/build.c||src/build.c": [
      "File: src/build.c -> src/build.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "856:       }",
      "857:     }",
      "858:   }else{",
      "861:     ){",
      "862:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
      "863:                       zName);",
      "864:       return SQLITE_ERROR;",
      "865:     }",
      "866:   }",
      "867:   return SQLITE_OK;",
      "868: }",
      "",
      "[Removed Lines]",
      "859:     if( pParse->nested==0",
      "860:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
      "",
      "[Added Lines]",
      "859:     if( (pParse->nested==0 && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7))",
      "860:      || (sqlite3ReadOnlyShadowTables(db) && sqlite3ShadowTableName(db, zName))",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "2132: static int isShadowTableName(sqlite3 *db, char *zName){",
      "",
      "[Added Lines]",
      "2133: int sqlite3ShadowTableName(sqlite3 *db, const char *zName){",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2147:   if( pMod->pModule->xShadowName==0 ) return 0;",
      "2148:   return pMod->pModule->xShadowName(zTail+1);",
      "2149: }",
      "",
      "[Removed Lines]",
      "2150: #else",
      "2151: # define isShadowTableName(x,y) 0",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2190:   p = pParse->pNewTable;",
      "2191:   if( p==0 ) return;",
      "2194:     p->tabFlags |= TF_Shadow;",
      "2195:   }",
      "",
      "[Removed Lines]",
      "2193:   if( pSelect==0 && isShadowTableName(db, p->zName) ){",
      "",
      "[Added Lines]",
      "2192:   if( pSelect==0 && sqlite3ShadowTableName(db, p->zName) ){",
      "",
      "---------------"
    ],
    "src/sqliteInt.h||src/sqliteInt.h": [
      "File: src/sqliteInt.h -> src/sqliteInt.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "4548: #  define sqlite3VtabInSync(db) ((db)->nVTrans>0 && (db)->aVTrans==0)",
      "4549: #endif",
      "4550: int sqlite3ReadOnlyShadowTables(sqlite3 *db);",
      "4551: int sqlite3VtabEponymousTableInit(Parse*,Module*);",
      "4552: void sqlite3VtabEponymousTableClear(sqlite3*,Module*);",
      "4553: void sqlite3VtabMakeWritable(Parse*,Table*);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "4551: #ifndef SQLITE_OMIT_VIRTUALTABLE",
      "4552:   int sqlite3ShadowTableName(sqlite3 *db, const char *zName);",
      "4553: #else",
      "4554: # define sqlite3ShadowTableName(A,B) 0",
      "4555: #endif",
      "",
      "---------------"
    ],
    "test/altertab.test||test/altertab.test": [
      "File: test/altertab.test -> test/altertab.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "547:   } {1 {table y1_segments may not be modified}}",
      "549:   do_catchsql_test 16.20 {",
      "554:     DROP TABLE y1_segments;",
      "555:   } {1 {table y1_segments may not be dropped}}",
      "557:   do_execsql_test 16.30 {",
      "558:     ALTER TABLE y1 RENAME TO z1;",
      "559:   }",
      "",
      "[Removed Lines]",
      "550:     ALTER TABLE y1_segments RENAME TO abc;",
      "551:   } {1 {table y1_segments may not be altered}}",
      "553:   do_catchsql_test 16.21 {",
      "",
      "[Added Lines]",
      "553:   do_catchsql_test 16.20 {",
      "554:     ALTER TABLE y1_segments RENAME TO abc;",
      "555:   } {1 {table y1_segments may not be altered}}",
      "556:   sqlite3_db_config db DEFENSIVE 0",
      "557:   do_catchsql_test 16.22 {",
      "558:     ALTER TABLE y1_segments RENAME TO abc;",
      "559:   } {0 {}}",
      "560:   sqlite3_db_config db DEFENSIVE 1",
      "561:   do_catchsql_test 16.23 {",
      "562:     CREATE TABLE y1_segments AS SELECT * FROM abc;",
      "563:   } {1 {object name reserved for internal use: y1_segments}}",
      "564:   do_catchsql_test 16.24 {",
      "565:     CREATE VIEW y1_segments AS SELECT * FROM abc;",
      "566:   } {1 {object name reserved for internal use: y1_segments}}",
      "567:   sqlite3_db_config db DEFENSIVE 0",
      "568:   do_catchsql_test 16.25 {",
      "569:     ALTER TABLE abc RENAME TO y1_segments;",
      "570:   } {0 {}}",
      "571:   sqlite3_db_config db DEFENSIVE 1",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "32dcc847b5173d211bec344c89f8c535034a26fc",
      "candidate_info": {
        "commit_hash": "32dcc847b5173d211bec344c89f8c535034a26fc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/32dcc847b5173d211bec344c89f8c535034a26fc",
        "files": [
          "ext/misc/fileio.c",
          "manifest",
          "manifest.uuid",
          "src/where.c",
          "test/bestindex4.test"
        ],
        "message": "Enhance the xBestIndex interface of virtual table so that if the xBestIndex method returns SQLITE_CONSTRAINT then that particular combination of constraints is considered unusable and does not participate further in query planning.\n\nFossilOrigin-Name: 684013cef6bfcfd920a4aec645df9f5d41ace8b34e75fca61759c1b4f82cc89e",
        "before_after_code_files": [
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "manifest.uuid||manifest.uuid",
          "src/where.c||src/where.c",
          "test/bestindex4.test||test/bestindex4.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "846:   sqlite3_index_info *pIdxInfo",
          "847: ){",
          "851:   const struct sqlite3_index_constraint *pConstraint;",
          "853:   (void)tab;",
          "854:   pConstraint = pIdxInfo->aConstraint;",
          "855:   for(i=0; i<pIdxInfo->nConstraint; i++, pConstraint++){",
          "856:     if( pConstraint->op!=SQLITE_INDEX_CONSTRAINT_EQ ) continue;",
          "859:   }",
          "862:     pIdxInfo->idxNum = 0;",
          "864:   }else{",
          "870:       pIdxInfo->idxNum = 2;",
          "871:       pIdxInfo->estimatedCost = 10.0;",
          "872:     }else{",
          "",
          "[Removed Lines]",
          "857:     if( pConstraint->iColumn==4 && pConstraint->usable ) idx4 = i;",
          "858:     if( pConstraint->iColumn==5 ) idx5 = i;",
          "861:   if( idx4<0 || (idx5>=0 && pIdxInfo->aConstraint[idx5].usable==0) ){",
          "863:     pIdxInfo->estimatedCost = (double)(((sqlite3_int64)1) << 60);",
          "865:     pIdxInfo->aConstraintUsage[idx4].omit = 1;",
          "866:     pIdxInfo->aConstraintUsage[idx4].argvIndex = 1;",
          "867:     if( idx5>=0 ){",
          "868:       pIdxInfo->aConstraintUsage[idx5].omit = 1;",
          "869:       pIdxInfo->aConstraintUsage[idx5].argvIndex = 2;",
          "",
          "[Added Lines]",
          "859:     switch( pConstraint->iColumn ){",
          "860:       case FSDIR_COLUMN_PATH: {",
          "861:         if( pConstraint->usable ){",
          "862:           idxPath = i;",
          "863:           seenPath = 0;",
          "864:         }else if( idxPath<0 ){",
          "865:           seenPath = 1;",
          "866:         }",
          "867:         break;",
          "868:       }",
          "869:       case FSDIR_COLUMN_DIR: {",
          "870:         if( pConstraint->usable ){",
          "871:           idxDir = i;",
          "872:           seenDir = 0;",
          "873:         }else if( idxDir<0 ){",
          "874:           seenDir = 1;",
          "875:         }",
          "876:         break;",
          "877:       }",
          "878:     }",
          "879:   }",
          "880:   if( seenPath || seenDir ){",
          "882:     return SQLITE_CONSTRAINT;",
          "885:   if( idxPath<0 ){",
          "889:     pIdxInfo->estimatedRows = 0x7fffffff;",
          "891:     pIdxInfo->aConstraintUsage[idxPath].omit = 1;",
          "892:     pIdxInfo->aConstraintUsage[idxPath].argvIndex = 1;",
          "893:     if( idxDir>=0 ){",
          "894:       pIdxInfo->aConstraintUsage[idxDir].omit = 1;",
          "895:       pIdxInfo->aConstraintUsage[idxDir].argvIndex = 2;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c537c9c3630ca979bdccab977275bfc11cce33ea54adb71a4bd4f46c85f65c6f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1047:   rc = pVtab->pModule->xBestIndex(pVtab, p);",
          "1048:   TRACE_IDX_OUTPUTS(p);",
          "1051:     if( rc==SQLITE_NOMEM ){",
          "1052:       sqlite3OomFault(pParse->db);",
          "1053:     }else if( !pVtab->zErrMsg ){",
          "",
          "[Removed Lines]",
          "1050:   if( rc!=SQLITE_OK ){",
          "",
          "[Added Lines]",
          "1052:   if( rc!=SQLITE_OK && rc!=SQLITE_CONSTRAINT ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1058:   }",
          "1059:   sqlite3_free(pVtab->zErrMsg);",
          "1060:   pVtab->zErrMsg = 0;",
          "1074: }",
          "",
          "[Removed Lines]",
          "1062: #if 0",
          "1065:   for(i=0; i<p->nConstraint; i++){",
          "1066:     if( !p->aConstraint[i].usable && p->aConstraintUsage[i].argvIndex>0 ){",
          "1067:       sqlite3ErrorMsg(pParse,",
          "1068:           \"table %s: xBestIndex returned an invalid plan\", pTab->zName);",
          "1069:     }",
          "1070:   }",
          "1071: #endif",
          "1073:   return pParse->nErr;",
          "",
          "[Added Lines]",
          "1064:   return rc;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3145:   rc = vtabBestIndex(pParse, pSrc->pTab, pIdxInfo);",
          "3148:   mxTerm = -1;",
          "3149:   assert( pNew->nLSlot>=nConstraint );",
          "",
          "[Removed Lines]",
          "3146:   if( rc ) return rc;",
          "",
          "[Added Lines]",
          "3137:   if( rc ){",
          "3138:     if( rc==SQLITE_CONSTRAINT ){",
          "3143:       return SQLITE_OK;",
          "3144:     }",
          "3145:     return rc;",
          "3146:   }",
          "",
          "---------------"
        ],
        "test/bestindex4.test||test/bestindex4.test": [
          "File: test/bestindex4.test -> test/bestindex4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:   CREATE TABLE t1 (x INT PRIMARY KEY);",
          "156: } {}",
          "160: } {",
          "163: }",
          "167: } {",
          "170: }",
          "",
          "[Removed Lines]",
          "158: do_execsql_test 2.1 {",
          "159:   EXPLAIN QUERY PLAN SELECT * FROM t1, x1 WHERE x1.d=t1.x;",
          "161:   3 0 0 {SCAN TABLE x1 VIRTUAL TABLE INDEX 0:}",
          "162:   7 0 0 {SEARCH TABLE t1 USING COVERING INDEX sqlite_autoindex_t1_1 (x=?)}",
          "165: do_execsql_test 2.2 {",
          "166:   EXPLAIN QUERY PLAN SELECT * FROM t1, x1(t1.x)",
          "168:   3 0 0 {SCAN TABLE t1}",
          "169:   5 0 0 {SCAN TABLE x1 VIRTUAL TABLE INDEX 555:}",
          "",
          "[Added Lines]",
          "158: do_eqp_test 2.1 {",
          "159:   SELECT * FROM t1, x1 WHERE x1.d=t1.x;",
          "161:   QUERY PLAN",
          "162:   |--SCAN TABLE x1 VIRTUAL TABLE INDEX 0:",
          "163:   `--SEARCH TABLE t1 USING COVERING INDEX sqlite_autoindex_t1_1 (x=?)",
          "166: do_eqp_test 2.2 {",
          "167:   SELECT * FROM t1, x1(t1.x)",
          "169:   QUERY PLAN",
          "170:   |--SCAN TABLE t1",
          "171:   `--SCAN TABLE x1 VIRTUAL TABLE INDEX 555:",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "cbfaa076d70dd0ec0110bcc24c32e2ae11d633e0",
      "candidate_info": {
        "commit_hash": "cbfaa076d70dd0ec0110bcc24c32e2ae11d633e0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/cbfaa076d70dd0ec0110bcc24c32e2ae11d633e0",
        "files": [
          "ext/misc/fileio.c",
          "manifest",
          "manifest.uuid",
          "test/zipfile.test"
        ],
        "message": "Fix a problem with virtual table \"fsdir\" and some join queries.\n\nFossilOrigin-Name: 7fffcee0fc3fe8d036f0d93ec17673992c3edcf2bb454dc90d80142435b37946",
        "before_after_code_files": [
          "ext/misc/fileio.c||ext/misc/fileio.c",
          "manifest.uuid||manifest.uuid",
          "test/zipfile.test||test/zipfile.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/fileio.c||ext/misc/fileio.c": [
          "File: ext/misc/fileio.c -> ext/misc/fileio.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "835:   (void)tab;",
          "836:   pConstraint = pIdxInfo->aConstraint;",
          "837:   for(i=0; i<pIdxInfo->nConstraint; i++, pConstraint++){",
          "839:     if( pConstraint->op!=SQLITE_INDEX_CONSTRAINT_EQ ) continue;",
          "841:     if( pConstraint->iColumn==5 ) idx5 = i;",
          "842:   }",
          "845:     pIdxInfo->idxNum = 0;",
          "847:   }else{",
          "848:     pIdxInfo->aConstraintUsage[idx4].omit = 1;",
          "849:     pIdxInfo->aConstraintUsage[idx4].argvIndex = 1;",
          "",
          "[Removed Lines]",
          "838:     if( pConstraint->usable==0 ) continue;",
          "840:     if( pConstraint->iColumn==4 ) idx4 = i;",
          "844:   if( idx4<0 ){",
          "846:     pIdxInfo->estimatedCost = (double)(((sqlite3_int64)1) << 50);",
          "",
          "[Added Lines]",
          "839:     if( pConstraint->iColumn==4 && pConstraint->usable ) idx4 = i;",
          "843:   if( idx4<0 || (idx5>=0 && pIdxInfo->aConstraint[idx5].usable==0) ){",
          "845:     pIdxInfo->estimatedCost = (double)(((sqlite3_int64)1) << 60);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 0406ecbbe75513e342040b71fdd342462222dbb3820486b5f745d7865805c00b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/zipfile.test||test/zipfile.test": [
          "File: test/zipfile.test -> test/zipfile.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "761:   SELECT name, data FROM z ORDER BY name;",
          "762: } {b0suffix two b2suffix one}",
          "764: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "765: if {$tcl_platform(platform)!=\"windows\"} {",
          "766:   do_test 12.0 {",
          "767:     catch { file delete -force subdir }",
          "768:     foreach {path sz} {",
          "769:       subdir/x1.txt     143",
          "770:       subdir/x2.txt     153",
          "771:     } {",
          "772:       set dir [file dirname $path]",
          "773:       catch { file mkdir $dir }",
          "774:       set fd [open $path w]",
          "775:       puts -nonewline $fd [string repeat 1 $sz]",
          "776:       close $fd",
          "777:     }",
          "778:   } {}",
          "780:   do_execsql_test 12.1 {",
          "781:     SELECT name FROM fsdir('subdir') ORDER BY 1;",
          "782:   } {subdir subdir/x1.txt subdir/x2.txt}",
          "784:   do_execsql_test 12.2 {",
          "785:     CREATE TABLE d AS SELECT 'subdir' d;",
          "786:     CREATE TABLE x AS SELECT 1 x;",
          "787:   }",
          "789:   do_execsql_test 12.4 {",
          "790:     SELECT name FROM d JOIN x JOIN fsdir(d) ORDER BY 1;",
          "791:   } {subdir subdir/x1.txt subdir/x2.txt}",
          "793:   do_execsql_test 12.5 {",
          "794:     SELECT name FROM d JOIN x JOIN fsdir('.', d) ORDER BY 1;",
          "795:   } {. ./x1.txt ./x2.txt}",
          "796: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e2d3d40dcc32a70d3a481bae9a5707fc93237fc",
      "candidate_info": {
        "commit_hash": "4e2d3d40dcc32a70d3a481bae9a5707fc93237fc",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4e2d3d40dcc32a70d3a481bae9a5707fc93237fc",
        "files": [
          "Makefile.msc",
          "ext/session/changesetfuzz.c",
          "manifest",
          "manifest.uuid",
          "src/btree.c",
          "tool/dbtotxt.c"
        ],
        "message": "Fix harmless compiler warnings seen with MSVC.\n\nFossilOrigin-Name: 6cf8b18ec20f11c25ff7396f29c742404d3a88d5e97a5fd53ccfaff51dec3f33",
        "before_after_code_files": [
          "Makefile.msc||Makefile.msc",
          "ext/session/changesetfuzz.c||ext/session/changesetfuzz.c",
          "manifest.uuid||manifest.uuid",
          "src/btree.c||src/btree.c",
          "tool/dbtotxt.c||tool/dbtotxt.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "2560:  del /Q .target_source 2>NUL",
          "2561:  del /Q tclsqlite3.exe $(SQLITETCLH) $(SQLITETCLDECLSH) 2>NUL",
          "2562:  del /Q lsm.dll lsmtest.exe 2>NUL",
          "2563:  del /Q testloadext.dll 2>NUL",
          "2564:  del /Q testfixture.exe test.db 2>NUL",
          "2565:  del /Q LogEst.exe fts3view.exe rollback-test.exe showdb.exe dbdump.exe 2>NUL",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2563:  del /Q atrc.exe changesetfuzz.exe dbtotxt.exe index_usage.exe 2>NUL",
          "",
          "---------------"
        ],
        "ext/session/changesetfuzz.c||ext/session/changesetfuzz.c": [
          "File: ext/session/changesetfuzz.c -> ext/session/changesetfuzz.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "154:   pBuf = sqlite3_malloc64( sz ? sz : 1 );",
          "155:   if( pBuf==0 ){",
          "156:     fprintf(stderr, \"cannot allocate %d to hold content of \\\"%s\\\"\\n\",",
          "158:     exit(1);",
          "159:   }",
          "160:   if( sz>0 ){",
          "163:       exit(1);",
          "164:     }",
          "165:     fclose(f);",
          "166:   }",
          "169: }",
          "",
          "[Removed Lines]",
          "157:             sz, zFilename);",
          "161:     if( fread(pBuf, sz, 1, f)!=1 ){",
          "162:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\", sz, zFilename);",
          "",
          "[Added Lines]",
          "157:             (int)sz, zFilename);",
          "161:     if( fread(pBuf, (size_t)sz, 1, f)!=1 ){",
          "162:       fprintf(stderr, \"cannot read all %d bytes of \\\"%s\\\"\\n\",",
          "163:               (int)sz, zFilename);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "343: static void *fuzzMalloc(sqlite3_int64 nByte){",
          "344:   void *pRet = sqlite3_malloc64(nByte);",
          "345:   if( pRet ){",
          "347:   }",
          "348:   return pRet;",
          "349: }",
          "",
          "[Removed Lines]",
          "346:     memset(pRet, 0, nByte);",
          "",
          "[Added Lines]",
          "347:     memset(pRet, 0, (size_t)nByte);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384: static int fuzzPutVarint(u8 *p, int nVal){",
          "385:   assert( nVal>0 && nVal<2097152 );",
          "386:   if( nVal<128 ){",
          "388:     return 1;",
          "389:   }",
          "390:   if( nVal<16384 ){",
          "",
          "[Removed Lines]",
          "387:     p[0] = nVal;",
          "",
          "[Added Lines]",
          "388:     p[0] = (u8)nVal;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "459:       pGrp->aPK = p;",
          "460:       p += pGrp->nCol;",
          "461:       pGrp->zTab = (const char*)p;",
          "464:       if( p>=pEnd ){",
          "465:         rc = fuzzCorrupt();",
          "",
          "[Removed Lines]",
          "462:       p = &p[strlen(p)+1];",
          "",
          "[Added Lines]",
          "463:       p = &p[strlen((const char*)p)+1];",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "697:           int nTxt;",
          "700:           p += fuzzGetVarint(p, &nTxt);",
          "701:           printf(\"%s%s\", zPre, eType==0x03 ? \"'\" : \"X'\");",
          "702:           for(i=0; i<nTxt; i++){",
          "",
          "[Removed Lines]",
          "698:           int sz;",
          "699:           int i;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "861:           int nByte = fuzzRandomInt(48);",
          "863:           fuzzRandomBlob(nByte, &pChange->aSub[2]);",
          "864:           if( pChange->aSub[0]==0x03 ){",
          "865:             int i;",
          "",
          "[Removed Lines]",
          "862:           pChange->aSub[1] = nByte;",
          "",
          "[Added Lines]",
          "861:           pChange->aSub[1] = (u8)nByte;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1004:       }else if( p==pFuzz->pSub2 ){",
          "1005:         pCopy = pFuzz->pSub1;",
          "1006:       }else if( i==iUndef ){",
          "1008:       }",
          "1010:       if( pCopy[0]==0x00 && eNew!=eType && eType==SQLITE_UPDATE && iRec==0 ){",
          "",
          "[Removed Lines]",
          "1007:         pCopy = \"\\0\";",
          "",
          "[Added Lines]",
          "1006:         pCopy = (u8*)\"\\0\";",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1067:       for(i=0; i<pGrp->nCol; i++){",
          "1068:         int sz;",
          "1069:         u8 *pCopy = pCsr;",
          "1071:         fuzzChangeSize(pCopy, &sz);",
          "1072:         memcpy(pOut, pCopy, sz);",
          "1073:         pOut += sz;",
          "",
          "[Removed Lines]",
          "1070:         if( pGrp->aPK[i] ) pCopy = \"\\0\";",
          "",
          "[Added Lines]",
          "1069:         if( pGrp->aPK[i] ) pCopy = (u8*)\"\\0\";",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8af0caeb6d1e55f66ad2f12af94845dccfe1d0420faf326f5917fc07f8aa6050",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/btree.c||src/btree.c": [
          "File: src/btree.c -> src/btree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "834: static int btreeRestoreCursorPosition(BtCursor *pCur){",
          "835:   int rc;",
          "837:   assert( cursorOwnsBtShared(pCur) );",
          "838:   assert( pCur->eState>=CURSOR_REQUIRESEEK );",
          "839:   if( pCur->eState==CURSOR_FAULT ){",
          "",
          "[Removed Lines]",
          "836:   int skipNext;",
          "",
          "[Added Lines]",
          "836:   int skipNext = 0;",
          "",
          "---------------"
        ],
        "tool/dbtotxt.c||tool/dbtotxt.c": [
          "File: tool/dbtotxt.c -> tool/dbtotxt.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "52:   memset(bShow, '.', sizeof(bShow));",
          "53:   for(i=' '; i<='~'; i++){",
          "55:   }",
          "56:   for(i=1; i<argc; i++){",
          "57:     if( argv[i][0]=='-' ){",
          "",
          "[Removed Lines]",
          "54:     if( i!='{' && i!='}' && i!='\"' && i!='\\\\' ) bShow[i] = i;",
          "",
          "[Added Lines]",
          "54:     if( i!='{' && i!='}' && i!='\"' && i!='\\\\' ) bShow[i] = (unsigned char)i;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e0155b7af92be5eacd49d1ab94b3d8c20a3d6450",
      "candidate_info": {
        "commit_hash": "e0155b7af92be5eacd49d1ab94b3d8c20a3d6450",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e0155b7af92be5eacd49d1ab94b3d8c20a3d6450",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/windowfault.test"
        ],
        "message": "Fix a test script problem in windowfault.test.\n\nFossilOrigin-Name: 47010bf17cb080cc1c693c84d16b986ea4addf9c54bd7e22de1e0f6b555ea9d1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/windowfault.test||test/windowfault.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36295dcebcb5487f2a462eabb41900ac28b8e839898ef0fae0aa4730bf9b0671",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/windowfault.test||test/windowfault.test": [
          "File: test/windowfault.test -> test/windowfault.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:   return $ret",
          "210: }",
          "212: do_faultsim_test 9 -end 25 -faults tmpread -body {",
          "213:   execsql {",
          "214:     SELECT sum(y) OVER win FROM t",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "212: set L [db eval {SELECT 0.0 FROM t}]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "217:     )",
          "218:   }",
          "219: } -test {",
          "221: }",
          "223: catch {db close}",
          "",
          "[Removed Lines]",
          "220:   faultsim_test_result {0 {}}",
          "",
          "[Added Lines]",
          "221:   faultsim_test_result [list 0 $::L]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31f69626df74d7f5d011cee54da6a05acd32970c",
      "candidate_info": {
        "commit_hash": "31f69626df74d7f5d011cee54da6a05acd32970c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/31f69626df74d7f5d011cee54da6a05acd32970c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/analyze.c",
          "src/build.c",
          "src/fkey.c",
          "src/main.c",
          "src/malloc.c",
          "src/parse.y",
          "src/prepare.c",
          "src/sqliteInt.h"
        ],
        "message": "Performance optimization to the lookaside-memory disabling mechanism.\n\nFossilOrigin-Name: 17ce1c49cb0ed6fdd8c7c33431bc2afa217f1092c99b8dd608890a8e7aec7fb1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/analyze.c||src/analyze.c",
          "src/build.c||src/build.c",
          "src/fkey.c||src/fkey.c",
          "src/main.c||src/main.c",
          "src/malloc.c||src/malloc.c",
          "src/parse.y||src/parse.y",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/build.c||src/build.c",
            "src/sqliteInt.h||src/sqliteInt.h"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c20a35336432025445f9f7e289d0cc3e4003fb17f45a4ce74c6269c407c6e09f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/analyze.c||src/analyze.c": [
          "File: src/analyze.c -> src/analyze.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1855: #ifdef SQLITE_ENABLE_STAT4",
          "1856:   if( rc==SQLITE_OK ){",
          "1858:     rc = loadStat4(db, sInfo.zDatabase);",
          "1860:   }",
          "1861:   for(i=sqliteHashFirst(&pSchema->idxHash); i; i=sqliteHashNext(i)){",
          "1862:     Index *pIdx = sqliteHashData(i);",
          "",
          "[Removed Lines]",
          "1857:     db->lookaside.bDisable++;",
          "1859:     db->lookaside.bDisable--;",
          "",
          "[Added Lines]",
          "1857:     DisableLookaside;",
          "1859:     EnableLookaside;",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2447:     n = pParse->nTab;",
          "2448:     sqlite3SrcListAssignCursors(pParse, pSel->pSrc);",
          "2449:     pTable->nCol = -1;",
          "2451: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "2452:     xAuth = db->xAuth;",
          "2453:     db->xAuth = 0;",
          "",
          "[Removed Lines]",
          "2450:     db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "2450:     DisableLookaside;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2489:     }",
          "2490:     sqlite3DeleteTable(db, pSelTab);",
          "2491:     sqlite3SelectDelete(db, pSel);",
          "2493: #ifndef SQLITE_OMIT_ALTERTABLE",
          "2494:     pParse->eParseMode = eParseMode;",
          "2495: #endif",
          "",
          "[Removed Lines]",
          "2492:     db->lookaside.bDisable--;",
          "",
          "[Added Lines]",
          "2492:     EnableLookaside;",
          "",
          "---------------"
        ],
        "src/fkey.c||src/fkey.c": [
          "File: src/fkey.c -> src/fkey.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1299:     }",
          "1304:     pTrigger = (Trigger *)sqlite3DbMallocZero(db,",
          "",
          "[Removed Lines]",
          "1302:     db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "1302:     DisableLookaside;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1321:     }",
          "1326:     sqlite3ExprDelete(db, pWhere);",
          "1327:     sqlite3ExprDelete(db, pWhen);",
          "",
          "[Removed Lines]",
          "1324:     db->lookaside.bDisable--;",
          "",
          "[Added Lines]",
          "1324:     EnableLookaside;",
          "",
          "---------------"
        ],
        "src/main.c||src/main.c": [
          "File: src/main.c -> src/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "715:   db->lookaside.pInit = 0;",
          "716:   db->lookaside.pFree = 0;",
          "717:   db->lookaside.sz = (u16)sz;",
          "718:   if( pStart ){",
          "719:     int i;",
          "720:     LookasideSlot *p;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "718:   db->lookaside.szTrue = (u16)sz;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "733:     db->lookaside.pStart = db;",
          "734:     db->lookaside.pEnd = db;",
          "735:     db->lookaside.bDisable = 1;",
          "736:     db->lookaside.bMalloced = 0;",
          "737:     db->lookaside.nSlot = 0;",
          "738:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "737:     db->lookaside.sz = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3064:   db->magic = SQLITE_MAGIC_BUSY;",
          "3065:   db->aDb = db->aDbStatic;",
          "3066:   db->lookaside.bDisable = 1;",
          "3068:   assert( sizeof(db->aLimit)==sizeof(aHardLimit) );",
          "3069:   memcpy(db->aLimit, aHardLimit, sizeof(db->aLimit));",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3069:   db->lookaside.sz = 0;",
          "",
          "---------------"
        ],
        "src/malloc.c||src/malloc.c": [
          "File: src/malloc.c -> src/malloc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "298:     return sqlite3GlobalConfig.m.xSize(p);",
          "299:   }else{",
          "300:     assert( sqlite3_mutex_held(db->mutex) );",
          "302:   }",
          "303: }",
          "304: sqlite3_uint64 sqlite3_msize(void *p){",
          "",
          "[Removed Lines]",
          "301:     return db->lookaside.sz;",
          "",
          "[Added Lines]",
          "301:     return db->lookaside.szTrue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "350:       LookasideSlot *pBuf = (LookasideSlot*)p;",
          "351: #ifdef SQLITE_DEBUG",
          "354: #endif",
          "355:       pBuf->pNext = db->lookaside.pFree;",
          "356:       db->lookaside.pFree = pBuf;",
          "",
          "[Removed Lines]",
          "353:       memset(p, 0xaa, db->lookaside.sz);",
          "",
          "[Added Lines]",
          "353:       memset(p, 0xaa, db->lookaside.szTrue);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "510:   assert( db!=0 );",
          "511:   assert( sqlite3_mutex_held(db->mutex) );",
          "512:   assert( db->pnBytesFreed==0 );",
          "527:     }",
          "530:   }",
          "531: #else",
          "532:   assert( db!=0 );",
          "",
          "[Removed Lines]",
          "513:   if( db->lookaside.bDisable==0 ){",
          "514:     assert( db->mallocFailed==0 );",
          "515:     if( n>db->lookaside.sz ){",
          "516:       db->lookaside.anStat[1]++;",
          "517:     }else if( (pBuf = db->lookaside.pFree)!=0 ){",
          "518:       db->lookaside.pFree = pBuf->pNext;",
          "519:       db->lookaside.anStat[0]++;",
          "520:       return (void*)pBuf;",
          "521:     }else if( (pBuf = db->lookaside.pInit)!=0 ){",
          "522:       db->lookaside.pInit = pBuf->pNext;",
          "523:       db->lookaside.anStat[0]++;",
          "524:       return (void*)pBuf;",
          "525:     }else{",
          "526:       db->lookaside.anStat[2]++;",
          "528:   }else if( db->mallocFailed ){",
          "529:     return 0;",
          "",
          "[Added Lines]",
          "513:   if( n>db->lookaside.sz ){",
          "514:     if( db->lookaside.bDisable ){",
          "515:       return db->mallocFailed ? 0 : dbMallocRawFinish(db, n);",
          "517:     db->lookaside.anStat[1]++;",
          "518:   }else if( (pBuf = db->lookaside.pFree)!=0 ){",
          "519:     db->lookaside.pFree = pBuf->pNext;",
          "520:     db->lookaside.anStat[0]++;",
          "521:     return (void*)pBuf;",
          "522:   }else if( (pBuf = db->lookaside.pInit)!=0 ){",
          "523:     db->lookaside.pInit = pBuf->pNext;",
          "524:     db->lookaside.anStat[0]++;",
          "525:     return (void*)pBuf;",
          "526:   }else{",
          "527:     db->lookaside.anStat[2]++;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "550:   assert( db!=0 );",
          "551:   if( p==0 ) return sqlite3DbMallocRawNN(db, n);",
          "552:   assert( sqlite3_mutex_held(db->mutex) );",
          "554:   return dbReallocFinish(db, p, n);",
          "555: }",
          "556: static SQLITE_NOINLINE void *dbReallocFinish(sqlite3 *db, void *p, u64 n){",
          "",
          "[Removed Lines]",
          "553:   if( isLookaside(db,p) && n<=db->lookaside.sz ) return p;",
          "",
          "[Added Lines]",
          "551:   if( isLookaside(db,p) && n<=db->lookaside.szTrue ) return p;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "561:     if( isLookaside(db, p) ){",
          "562:       pNew = sqlite3DbMallocRawNN(db, n);",
          "563:       if( pNew ){",
          "565:         sqlite3DbFree(db, p);",
          "566:       }",
          "567:     }else{",
          "",
          "[Removed Lines]",
          "564:         memcpy(pNew, p, db->lookaside.sz);",
          "",
          "[Added Lines]",
          "562:         memcpy(pNew, p, db->lookaside.szTrue);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "660:     if( db->nVdbeExec>0 ){",
          "661:       db->u1.isInterrupted = 1;",
          "662:     }",
          "664:     if( db->pParse ){",
          "665:       db->pParse->rc = SQLITE_NOMEM_BKPT;",
          "666:     }",
          "",
          "[Removed Lines]",
          "663:     db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "661:     DisableLookaside;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "679:     db->mallocFailed = 0;",
          "680:     db->u1.isInterrupted = 0;",
          "681:     assert( db->lookaside.bDisable>0 );",
          "683:   }",
          "684: }",
          "",
          "[Removed Lines]",
          "682:     db->lookaside.bDisable--;",
          "",
          "[Added Lines]",
          "680:     EnableLookaside;",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y",
          "--- Hunk 1 ---",
          "[Context before]",
          "108: static void disableLookaside(Parse *pParse){",
          "109:   pParse->disableLookaside++;",
          "111: }",
          "113: } // end %include",
          "",
          "[Removed Lines]",
          "110:   pParse->db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "109:   sqlite3 *db = pParse->db;",
          "111:   DisableLookaside;",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "527:   if( db ){",
          "528:     assert( db->lookaside.bDisable >= pParse->disableLookaside );",
          "529:     db->lookaside.bDisable -= pParse->disableLookaside;",
          "530:   }",
          "531:   pParse->disableLookaside = 0;",
          "532: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "530:     db->lookaside.sz = db->lookaside.bDisable ? 0 : db->lookaside.szTrue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "561:   if( prepFlags & SQLITE_PREPARE_PERSISTENT ){",
          "562:     sParse.disableLookaside++;",
          "564:   }",
          "565:   sParse.disableVtab = (prepFlags & SQLITE_PREPARE_NO_VTAB)!=0;",
          "",
          "[Removed Lines]",
          "563:     db->lookaside.bDisable++;",
          "",
          "[Added Lines]",
          "564:     DisableLookaside;",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1288: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1297: #define DisableLookaside  db->lookaside.bDisable++;db->lookaside.sz=0",
          "1298: #define EnableLookaside   db->lookaside.bDisable--;\\",
          "1299:    db->lookaside.sz=db->lookaside.bDisable?0:db->lookaside.szTrue",
          "",
          "---------------"
        ]
      }
    }
  ]
}