{
  "cve_id": "CVE-2017-11411",
  "cve_desc": "In Wireshark through 2.0.13 and 2.2.x through 2.2.7, the openSAFETY dissector could crash or exhaust system memory. This was addressed in epan/dissectors/packet-opensafety.c by adding length validation. NOTE: this vulnerability exists because of an incomplete fix for CVE-2017-9350.",
  "repo": "wireshark/wireshark",
  "patch_hash": "66c50585e5c10764d0b8a850fd49fa7012346560",
  "patch_info": {
    "commit_hash": "66c50585e5c10764d0b8a850fd49fa7012346560",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/66c50585e5c10764d0b8a850fd49fa7012346560",
    "files": [
      "epan/dissectors/packet-opensafety.c"
    ],
    "message": "OpenSafety: sanity check calculated length.\n\nOriginal sanity check was missed for fragmentation\n\nBug: 13755\nChange-Id: If9e24e01a119c869b02f198456776c8e6c6f2ad0\nReviewed-on: https://code.wireshark.org/review/22193\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Roland Knall <rknall@gmail.com>",
    "before_after_code_files": [
      "epan/dissectors/packet-opensafety.c||epan/dissectors/packet-opensafety.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-opensafety.c||epan/dissectors/packet-opensafety.c": [
      "File: epan/dissectors/packet-opensafety.c -> epan/dissectors/packet-opensafety.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1278:                 item = proto_tree_add_uint_format_value(ssdo_tree, hf_oss_ssdo_payload_size, message_tvb, payloadOffset - 4, 4,",
      "1279:                         payloadSize, \"%d octets total (%d octets in this frame)\", payloadSize, calcDataLength);",
      "1282:                 {",
      "1289:                     {",
      "1295:                     }",
      "1300:                     proto_tree_add_item(ssdo_tree, hf_oss_ssdo_payload, message_tvb, payloadOffset, calcDataLength, ENC_NA );",
      "1301:                 } else {",
      "1302:                     if ( global_opensafety_debug_verbose )",
      "",
      "[Removed Lines]",
      "1281:                 if ( fragmentId != 0 && packet->payload.ssdo->sacmd.segmented )",
      "1283:                     pinfo->fragmented = TRUE;",
      "1284:                     frag_msg = fragment_add_seq_check(&os_reassembly_table, message_tvb, payloadOffset, pinfo,",
      "1285:                                                       fragmentId, NULL, 0, calcDataLength, TRUE );",
      "1286:                     fragment_add_seq_offset ( &os_reassembly_table, pinfo, fragmentId, NULL, ct );",
      "1288:                     if ( frag_msg != NULL )",
      "1290:                         item = proto_tree_add_bytes_format_value(ssdo_tree, hf_oss_ssdo_payload, message_tvb, 0, 0, NULL, \"Reassembled\" );",
      "1291:                         PROTO_ITEM_SET_GENERATED(item);",
      "1293:                         ssdo_payload = proto_item_add_subtree(item, ett_opensafety_ssdo_payload);",
      "1294:                         process_reassembled_data(message_tvb, 0, pinfo, \"Reassembled Message\", frag_msg, &oss_frag_items, NULL, ssdo_payload );",
      "1296:                 }",
      "1298:                 if ( (gint) calcDataLength >= (gint) 0 )",
      "1299:                 {",
      "",
      "[Added Lines]",
      "1281:                 if ( calcDataLength >= 0 )",
      "1283:                     if ( fragmentId != 0 && packet->payload.ssdo->sacmd.segmented )",
      "1285:                         pinfo->fragmented = TRUE;",
      "1286:                         frag_msg = fragment_add_seq_check(&os_reassembly_table, message_tvb, payloadOffset, pinfo,",
      "1287:                                                           fragmentId, NULL, 0, calcDataLength, TRUE );",
      "1288:                         fragment_add_seq_offset ( &os_reassembly_table, pinfo, fragmentId, NULL, ct );",
      "1290:                         if ( frag_msg != NULL )",
      "1291:                         {",
      "1292:                             item = proto_tree_add_bytes_format_value(ssdo_tree, hf_oss_ssdo_payload, message_tvb, 0, 0, NULL, \"Reassembled\" );",
      "1293:                             PROTO_ITEM_SET_GENERATED(item);",
      "1295:                             ssdo_payload = proto_item_add_subtree(item, ett_opensafety_ssdo_payload);",
      "1296:                             process_reassembled_data(message_tvb, 0, pinfo, \"Reassembled Message\", frag_msg, &oss_frag_items, NULL, ssdo_payload );",
      "1297:                         }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "54acd9ba706c2e563714f3e1162ab0d60b0f79eb",
      "candidate_info": {
        "commit_hash": "54acd9ba706c2e563714f3e1162ab0d60b0f79eb",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/54acd9ba706c2e563714f3e1162ab0d60b0f79eb",
        "files": [
          "epan/dissectors/packet-opensafety.c"
        ],
        "message": "OpenSafety: sanity check calculated length.\n\nOriginal sanity check was missed for fragmentation\n\nBug: 13755\nChange-Id: If9e24e01a119c869b02f198456776c8e6c6f2ad0\nReviewed-on: https://code.wireshark.org/review/22193\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Roland Knall <rknall@gmail.com>\n(cherry picked from commit 66c50585e5c10764d0b8a850fd49fa7012346560)\nReviewed-on: https://code.wireshark.org/review/22209\nReviewed-by: Peter Wu <peter@lekensteyn.nl>",
        "before_after_code_files": [
          "epan/dissectors/packet-opensafety.c||epan/dissectors/packet-opensafety.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-opensafety.c||epan/dissectors/packet-opensafety.c"
          ],
          "candidate": [
            "epan/dissectors/packet-opensafety.c||epan/dissectors/packet-opensafety.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-opensafety.c||epan/dissectors/packet-opensafety.c": [
          "File: epan/dissectors/packet-opensafety.c -> epan/dissectors/packet-opensafety.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1264:                 item = proto_tree_add_uint_format_value(ssdo_tree, hf_oss_ssdo_payload_size, message_tvb, payloadOffset - 4, 4,",
          "1265:                         payloadSize, \"%d octets total (%d octets in this frame)\", payloadSize, calcDataLength);",
          "1268:                 {",
          "1275:                     {",
          "1281:                     }",
          "1286:                     proto_tree_add_item(ssdo_tree, hf_oss_ssdo_payload, message_tvb, payloadOffset, calcDataLength, ENC_NA );",
          "1287:                 } else {",
          "1288:                     if ( global_opensafety_debug_verbose )",
          "",
          "[Removed Lines]",
          "1267:                 if ( fragmentId != 0 && packet->payload.ssdo->sacmd.segmented )",
          "1269:                     pinfo->fragmented = TRUE;",
          "1270:                     frag_msg = fragment_add_seq_check(&os_reassembly_table, message_tvb, payloadOffset, pinfo,",
          "1271:                                                       fragmentId, NULL, 0, calcDataLength, TRUE );",
          "1272:                     fragment_add_seq_offset ( &os_reassembly_table, pinfo, fragmentId, NULL, ct );",
          "1274:                     if ( frag_msg != NULL )",
          "1276:                         item = proto_tree_add_bytes_format_value(ssdo_tree, hf_oss_ssdo_payload, message_tvb, 0, 0, NULL, \"Reassembled\" );",
          "1277:                         PROTO_ITEM_SET_GENERATED(item);",
          "1279:                         ssdo_payload = proto_item_add_subtree(item, ett_opensafety_ssdo_payload);",
          "1280:                         process_reassembled_data(message_tvb, 0, pinfo, \"Reassembled Message\", frag_msg, &oss_frag_items, NULL, ssdo_payload );",
          "1282:                 }",
          "1284:                 if ( (gint) calcDataLength >= (gint) 0 )",
          "1285:                 {",
          "",
          "[Added Lines]",
          "1267:                 if ( calcDataLength >= 0 )",
          "1269:                     if ( fragmentId != 0 && packet->payload.ssdo->sacmd.segmented )",
          "1271:                         pinfo->fragmented = TRUE;",
          "1272:                         frag_msg = fragment_add_seq_check(&os_reassembly_table, message_tvb, payloadOffset, pinfo,",
          "1273:                                                           fragmentId, NULL, 0, calcDataLength, TRUE );",
          "1274:                         fragment_add_seq_offset ( &os_reassembly_table, pinfo, fragmentId, NULL, ct );",
          "1276:                         if ( frag_msg != NULL )",
          "1277:                         {",
          "1278:                             item = proto_tree_add_bytes_format_value(ssdo_tree, hf_oss_ssdo_payload, message_tvb, 0, 0, NULL, \"Reassembled\" );",
          "1279:                             PROTO_ITEM_SET_GENERATED(item);",
          "1281:                             ssdo_payload = proto_item_add_subtree(item, ett_opensafety_ssdo_payload);",
          "1282:                             process_reassembled_data(message_tvb, 0, pinfo, \"Reassembled Message\", frag_msg, &oss_frag_items, NULL, ssdo_payload );",
          "1283:                         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a83a324acdfc07a0ca8b65e6ebaba3374ab19c76",
      "candidate_info": {
        "commit_hash": "a83a324acdfc07a0ca8b65e6ebaba3374ab19c76",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a83a324acdfc07a0ca8b65e6ebaba3374ab19c76",
        "files": [
          "epan/dissectors/packet-opensafety.c"
        ],
        "message": "OpenSafety: sanity check calculated length.\n\nOriginal sanity check was missed for fragmentation\n\nBug: 13755\nChange-Id: If9e24e01a119c869b02f198456776c8e6c6f2ad0\nReviewed-on: https://code.wireshark.org/review/22193\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Roland Knall <rknall@gmail.com>\n(cherry picked from commit 66c50585e5c10764d0b8a850fd49fa7012346560)\nReviewed-on: https://code.wireshark.org/review/22680\nReviewed-by: Gerald Combs <gerald@wireshark.org>",
        "before_after_code_files": [
          "epan/dissectors/packet-opensafety.c||epan/dissectors/packet-opensafety.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-opensafety.c||epan/dissectors/packet-opensafety.c"
          ],
          "candidate": [
            "epan/dissectors/packet-opensafety.c||epan/dissectors/packet-opensafety.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-opensafety.c||epan/dissectors/packet-opensafety.c": [
          "File: epan/dissectors/packet-opensafety.c -> epan/dissectors/packet-opensafety.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1262:                 item = proto_tree_add_uint_format_value(ssdo_tree, hf_oss_ssdo_payload_size, message_tvb, payloadOffset - 4, 4,",
          "1263:                         payloadSize, \"%d octets total (%d octets in this frame)\", payloadSize, calcDataLength);",
          "1266:                 {",
          "1273:                     {",
          "1279:                     }",
          "1284:                     proto_tree_add_item(ssdo_tree, hf_oss_ssdo_payload, message_tvb, payloadOffset, calcDataLength, ENC_NA );",
          "1285:                 } else {",
          "1286:                     expert_add_info_format(pinfo, item, &ei_payload_length_not_positive,",
          "",
          "[Removed Lines]",
          "1265:                 if ( fragmentId != 0 && packet->payload.ssdo->sacmd.segmented )",
          "1267:                     pinfo->fragmented = TRUE;",
          "1268:                     frag_msg = fragment_add_seq_check(&os_reassembly_table, message_tvb, payloadOffset, pinfo,",
          "1269:                                                       fragmentId, NULL, 0, calcDataLength, TRUE );",
          "1270:                     fragment_add_seq_offset ( &os_reassembly_table, pinfo, fragmentId, NULL, ct );",
          "1272:                     if ( frag_msg != NULL )",
          "1274:                         item = proto_tree_add_bytes_format_value(ssdo_tree, hf_oss_ssdo_payload, message_tvb, 0, 0, NULL, \"Reassembled\" );",
          "1275:                         PROTO_ITEM_SET_GENERATED(item);",
          "1277:                         ssdo_payload = proto_item_add_subtree(item, ett_opensafety_ssdo_payload);",
          "1278:                         process_reassembled_data(message_tvb, 0, pinfo, \"Reassembled Message\", frag_msg, &oss_frag_items, NULL, ssdo_payload );",
          "1280:                 }",
          "1282:                 if ( (gint) calcDataLength >= (gint) 0 )",
          "1283:                 {",
          "",
          "[Added Lines]",
          "1265:                 if ( calcDataLength >= 0 )",
          "1267:                     if ( fragmentId != 0 && packet->payload.ssdo->sacmd.segmented )",
          "1269:                         pinfo->fragmented = TRUE;",
          "1270:                         frag_msg = fragment_add_seq_check(&os_reassembly_table, message_tvb, payloadOffset, pinfo,",
          "1271:                                                           fragmentId, NULL, 0, calcDataLength, TRUE );",
          "1272:                         fragment_add_seq_offset ( &os_reassembly_table, pinfo, fragmentId, NULL, ct );",
          "1274:                         if ( frag_msg != NULL )",
          "1275:                         {",
          "1276:                             item = proto_tree_add_bytes_format_value(ssdo_tree, hf_oss_ssdo_payload, message_tvb, 0, 0, NULL, \"Reassembled\" );",
          "1277:                             PROTO_ITEM_SET_GENERATED(item);",
          "1279:                             ssdo_payload = proto_item_add_subtree(item, ett_opensafety_ssdo_payload);",
          "1280:                             process_reassembled_data(message_tvb, 0, pinfo, \"Reassembled Message\", frag_msg, &oss_frag_items, NULL, ssdo_payload );",
          "1281:                         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "74bf217c75ad7f6738e2580971a391b1f38bfd0f",
      "candidate_info": {
        "commit_hash": "74bf217c75ad7f6738e2580971a391b1f38bfd0f",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/74bf217c75ad7f6738e2580971a391b1f38bfd0f",
        "files": [
          "epan/dissectors/packet-opensafety.c"
        ],
        "message": "OpenSafety: sanity check calculated length.\n\nOriginal sanity check was missed for fragmentation\n\nBug: 13755\nChange-Id: If9e24e01a119c869b02f198456776c8e6c6f2ad0\nReviewed-on: https://code.wireshark.org/review/22193\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Roland Knall <rknall@gmail.com>\n(cherry picked from commit 66c50585e5c10764d0b8a850fd49fa7012346560)\nReviewed-on: https://code.wireshark.org/review/22208\nReviewed-by: Peter Wu <peter@lekensteyn.nl>",
        "before_after_code_files": [
          "epan/dissectors/packet-opensafety.c||epan/dissectors/packet-opensafety.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-opensafety.c||epan/dissectors/packet-opensafety.c"
          ],
          "candidate": [
            "epan/dissectors/packet-opensafety.c||epan/dissectors/packet-opensafety.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-opensafety.c||epan/dissectors/packet-opensafety.c": [
          "File: epan/dissectors/packet-opensafety.c -> epan/dissectors/packet-opensafety.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1278:                 item = proto_tree_add_uint_format_value(ssdo_tree, hf_oss_ssdo_payload_size, message_tvb, payloadOffset - 4, 4,",
          "1279:                         payloadSize, \"%d octets total (%d octets in this frame)\", payloadSize, calcDataLength);",
          "1282:                 {",
          "1289:                     {",
          "1295:                     }",
          "1300:                     proto_tree_add_item(ssdo_tree, hf_oss_ssdo_payload, message_tvb, payloadOffset, calcDataLength, ENC_NA );",
          "1301:                 } else {",
          "1302:                     if ( global_opensafety_debug_verbose )",
          "",
          "[Removed Lines]",
          "1281:                 if ( fragmentId != 0 && packet->payload.ssdo->sacmd.segmented )",
          "1283:                     pinfo->fragmented = TRUE;",
          "1284:                     frag_msg = fragment_add_seq_check(&os_reassembly_table, message_tvb, payloadOffset, pinfo,",
          "1285:                                                       fragmentId, NULL, 0, calcDataLength, TRUE );",
          "1286:                     fragment_add_seq_offset ( &os_reassembly_table, pinfo, fragmentId, NULL, ct );",
          "1288:                     if ( frag_msg != NULL )",
          "1290:                         item = proto_tree_add_bytes_format_value(ssdo_tree, hf_oss_ssdo_payload, message_tvb, 0, 0, NULL, \"Reassembled\" );",
          "1291:                         PROTO_ITEM_SET_GENERATED(item);",
          "1293:                         ssdo_payload = proto_item_add_subtree(item, ett_opensafety_ssdo_payload);",
          "1294:                         process_reassembled_data(message_tvb, 0, pinfo, \"Reassembled Message\", frag_msg, &oss_frag_items, NULL, ssdo_payload );",
          "1296:                 }",
          "1298:                 if ( (gint) calcDataLength >= (gint) 0 )",
          "1299:                 {",
          "",
          "[Added Lines]",
          "1281:                 if ( calcDataLength >= 0 )",
          "1283:                     if ( fragmentId != 0 && packet->payload.ssdo->sacmd.segmented )",
          "1285:                         pinfo->fragmented = TRUE;",
          "1286:                         frag_msg = fragment_add_seq_check(&os_reassembly_table, message_tvb, payloadOffset, pinfo,",
          "1287:                                                           fragmentId, NULL, 0, calcDataLength, TRUE );",
          "1288:                         fragment_add_seq_offset ( &os_reassembly_table, pinfo, fragmentId, NULL, ct );",
          "1290:                         if ( frag_msg != NULL )",
          "1291:                         {",
          "1292:                             item = proto_tree_add_bytes_format_value(ssdo_tree, hf_oss_ssdo_payload, message_tvb, 0, 0, NULL, \"Reassembled\" );",
          "1293:                             PROTO_ITEM_SET_GENERATED(item);",
          "1295:                             ssdo_payload = proto_item_add_subtree(item, ett_opensafety_ssdo_payload);",
          "1296:                             process_reassembled_data(message_tvb, 0, pinfo, \"Reassembled Message\", frag_msg, &oss_frag_items, NULL, ssdo_payload );",
          "1297:                         }",
          "",
          "---------------"
        ]
      }
    }
  ]
}