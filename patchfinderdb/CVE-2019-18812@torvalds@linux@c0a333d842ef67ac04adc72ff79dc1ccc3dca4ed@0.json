{
  "cve_id": "CVE-2019-18812",
  "cve_desc": "A memory leak in the sof_dfsentry_write() function in sound/soc/sof/debug.c in the Linux kernel through 5.3.9 allows attackers to cause a denial of service (memory consumption), aka CID-c0a333d842ef.",
  "repo": "torvalds/linux",
  "patch_hash": "c0a333d842ef67ac04adc72ff79dc1ccc3dca4ed",
  "patch_info": {
    "commit_hash": "c0a333d842ef67ac04adc72ff79dc1ccc3dca4ed",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/c0a333d842ef67ac04adc72ff79dc1ccc3dca4ed",
    "files": [
      "sound/soc/sof/debug.c"
    ],
    "message": "ASoC: SOF: Fix memory leak in sof_dfsentry_write\n\nIn the implementation of sof_dfsentry_write() memory allocated for\nstring is leaked in case of an error. Go to error handling path if the\nd_name.name is not valid.\n\nFixes: 091c12e1f50c (\"ASoC: SOF: debug: add new debugfs entries for IPC flood test\")\nSigned-off-by: Navid Emamdoost <navid.emamdoost@gmail.com>\nLink: https://lore.kernel.org/r/20191027194856.4056-1-navid.emamdoost@gmail.com\nSigned-off-by: Mark Brown <broonie@kernel.org>",
    "before_after_code_files": [
      "sound/soc/sof/debug.c||sound/soc/sof/debug.c"
    ]
  },
  "patch_diff": {
    "sound/soc/sof/debug.c||sound/soc/sof/debug.c": [
      "File: sound/soc/sof/debug.c -> sound/soc/sof/debug.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "153:  dentry = file->f_path.dentry;",
      "154:  if (strcmp(dentry->d_name.name, \"ipc_flood_count\") &&",
      "158:  if (!strcmp(dentry->d_name.name, \"ipc_flood_duration_ms\"))",
      "159:   flood_duration_test = true;",
      "",
      "[Removed Lines]",
      "155:      strcmp(dentry->d_name.name, \"ipc_flood_duration_ms\"))",
      "156:   return -EINVAL;",
      "",
      "[Added Lines]",
      "155:      strcmp(dentry->d_name.name, \"ipc_flood_duration_ms\")) {",
      "156:   ret = -EINVAL;",
      "157:   goto out;",
      "158:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3ff3a4f657b3fab2d56247983c2ebed180ef2fbb",
      "candidate_info": {
        "commit_hash": "3ff3a4f657b3fab2d56247983c2ebed180ef2fbb",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/3ff3a4f657b3fab2d56247983c2ebed180ef2fbb",
        "files": [
          "sound/soc/sof/debug.c",
          "sound/soc/sof/sof-priv.h",
          "sound/soc/sof/trace.c"
        ],
        "message": "ASoC: SOF: no need to check return value of debugfs_create functions\n\nWhen calling debugfs functions, there is no need to ever check the\nreturn value.  The function can work or not, but the code logic should\nnever do something different based on this.\n\nAlso, if a debugfs call fails, userspace is notified with an error in\nthe log, so no need to log the error again.\n\nBecause we no longer need to check the return value, there's no need to\nsave the dentry returned by debugfs.  Just use the dentry in the file\npointer if we really need to figure out the \"name\" of the file being\nopened.\n\nCc: Liam Girdwood <lgirdwood@gmail.com>\nCc: Mark Brown <broonie@kernel.org>\nCc: Jaroslav Kysela <perex@perex.cz>\nCc: Takashi Iwai <tiwai@suse.com>\nCc: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>\nCc: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>\nCc: alsa-devel@alsa-project.org\nSigned-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>\nReviewed-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>\nLink: https://lore.kernel.org/r/20190731131716.9764-3-gregkh@linuxfoundation.org\nSigned-off-by: Mark Brown <broonie@kernel.org>",
        "before_after_code_files": [
          "sound/soc/sof/debug.c||sound/soc/sof/debug.c",
          "sound/soc/sof/sof-priv.h||sound/soc/sof/sof-priv.h",
          "sound/soc/sof/trace.c||sound/soc/sof/trace.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sound/soc/sof/debug.c||sound/soc/sof/debug.c"
          ],
          "candidate": [
            "sound/soc/sof/debug.c||sound/soc/sof/debug.c"
          ]
        }
      },
      "candidate_diff": {
        "sound/soc/sof/debug.c||sound/soc/sof/debug.c": [
          "File: sound/soc/sof/debug.c -> sound/soc/sof/debug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "128:  unsigned long ipc_duration_ms = 0;",
          "129:  bool flood_duration_test = false;",
          "130:  unsigned long ipc_count = 0;",
          "131:  int err;",
          "132: #endif",
          "133:  size_t size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "131:  struct dentry *dentry;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "154:   return -EINVAL;",
          "157:   flood_duration_test = true;",
          "",
          "[Removed Lines]",
          "152:  if (strcmp(dfse->dfsentry->d_name.name, \"ipc_flood_count\") &&",
          "153:      strcmp(dfse->dfsentry->d_name.name, \"ipc_flood_duration_ms\"))",
          "156:  if (!strcmp(dfse->dfsentry->d_name.name, \"ipc_flood_duration_ms\"))",
          "",
          "[Added Lines]",
          "153:  dentry = file->f_path.dentry;",
          "154:  if (strcmp(dentry->d_name.name, \"ipc_flood_count\") &&",
          "155:      strcmp(dentry->d_name.name, \"ipc_flood_duration_ms\"))",
          "158:  if (!strcmp(dentry->d_name.name, \"ipc_flood_duration_ms\"))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "219: {",
          "220:  struct snd_sof_dfsentry *dfse = file->private_data;",
          "221:  struct snd_sof_dev *sdev = dfse->sdev;",
          "222:  loff_t pos = *ppos;",
          "223:  size_t size_ret;",
          "224:  int skip = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "224:  struct dentry *dentry;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "226:  u8 *buf;",
          "228: #if IS_ENABLED(CONFIG_SND_SOC_SOF_DEBUG_IPC_FLOOD_TEST)",
          "231:      dfse->cache_buf) {",
          "232:   if (*ppos)",
          "233:    return 0;",
          "",
          "[Removed Lines]",
          "229:  if ((!strcmp(dfse->dfsentry->d_name.name, \"ipc_flood_count\") ||",
          "230:       !strcmp(dfse->dfsentry->d_name.name, \"ipc_flood_duration_ms\")) &&",
          "",
          "[Added Lines]",
          "232:  dentry = file->f_path.dentry;",
          "233:  if ((!strcmp(dentry->d_name.name, \"ipc_flood_count\") ||",
          "234:       !strcmp(dentry->d_name.name, \"ipc_flood_duration_ms\")) &&",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "290:   if (!pm_runtime_active(sdev->dev) &&",
          "291:       dfse->access_type == SOF_DEBUGFS_ACCESS_D0_ONLY) {",
          "292:    dev_err(sdev->dev,",
          "295:    kfree(buf);",
          "296:    return -EINVAL;",
          "297:   }",
          "",
          "[Removed Lines]",
          "293:     \"error: debugfs entry %s cannot be read in DSP D3\\n\",",
          "294:     dfse->dfsentry->d_name.name);",
          "",
          "[Added Lines]",
          "297:     \"error: debugfs entry cannot be read in DSP D3\\n\");",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "356:  }",
          "357: #endif",
          "371:  return 0;",
          "372: }",
          "",
          "[Removed Lines]",
          "359:  dfse->dfsentry = debugfs_create_file(name, 0444, sdev->debugfs_root,",
          "360:           dfse, &sof_dfs_fops);",
          "361:  if (!dfse->dfsentry) {",
          "363:   dev_err(sdev->dev, \"error: cannot create debugfs entry %s\\n\",",
          "364:    name);",
          "365:  } else {",
          "367:   list_add(&dfse->list, &sdev->dfsentry_list);",
          "369:  }",
          "",
          "[Added Lines]",
          "362:  debugfs_create_file(name, 0444, sdev->debugfs_root, dfse,",
          "363:        &sof_dfs_fops);",
          "366:  list_add(&dfse->list, &sdev->dfsentry_list);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "402:   return -ENOMEM;",
          "403: #endif",
          "416:  return 0;",
          "417: }",
          "",
          "[Removed Lines]",
          "405:  dfse->dfsentry = debugfs_create_file(name, mode, sdev->debugfs_root,",
          "406:           dfse, &sof_dfs_fops);",
          "407:  if (!dfse->dfsentry) {",
          "409:   dev_err(sdev->dev, \"error: cannot create debugfs entry %s\\n\",",
          "410:    name);",
          "411:  } else {",
          "413:   list_add(&dfse->list, &sdev->dfsentry_list);",
          "414:  }",
          "",
          "[Added Lines]",
          "402:  debugfs_create_file(name, mode, sdev->debugfs_root, dfse,",
          "403:        &sof_dfs_fops);",
          "405:  list_add(&dfse->list, &sdev->dfsentry_list);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "428:  sdev->debugfs_root = debugfs_create_dir(\"sof\", NULL);",
          "435:  INIT_LIST_HEAD(&sdev->dfsentry_list);",
          "",
          "[Removed Lines]",
          "429:  if (IS_ERR_OR_NULL(sdev->debugfs_root)) {",
          "430:   dev_err(sdev->dev, \"error: failed to create debugfs directory\\n\");",
          "431:   return 0;",
          "432:  }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "sound/soc/sof/sof-priv.h||sound/soc/sof/sof-priv.h": [
          "File: sound/soc/sof/sof-priv.h -> sound/soc/sof/sof-priv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "232: struct snd_sof_dfsentry {",
          "234:  size_t size;",
          "235:  enum sof_dfsentry_type type;",
          "",
          "[Removed Lines]",
          "233:  struct dentry *dfsentry;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "sound/soc/sof/trace.c||sound/soc/sof/trace.c": [
          "File: sound/soc/sof/trace.c -> sound/soc/sof/trace.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "148:  dfse->size = sdev->dmatb.bytes;",
          "149:  dfse->sdev = sdev;",
          "159:  return 0;",
          "160: }",
          "",
          "[Removed Lines]",
          "151:  dfse->dfsentry = debugfs_create_file(\"trace\", 0444, sdev->debugfs_root,",
          "152:           dfse, &sof_dfs_trace_fops);",
          "153:  if (!dfse->dfsentry) {",
          "155:   dev_err(sdev->dev,",
          "156:    \"error: cannot create debugfs entry for trace\\n\");",
          "157:  }",
          "",
          "[Added Lines]",
          "151:  debugfs_create_file(\"trace\", 0444, sdev->debugfs_root, dfse,",
          "152:        &sof_dfs_trace_fops);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "091c12e1f50cce93b1af90e56cad88787ec86dfb",
      "candidate_info": {
        "commit_hash": "091c12e1f50cce93b1af90e56cad88787ec86dfb",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/091c12e1f50cce93b1af90e56cad88787ec86dfb",
        "files": [
          "sound/soc/sof/Kconfig",
          "sound/soc/sof/debug.c",
          "sound/soc/sof/sof-priv.h"
        ],
        "message": "ASoC: SOF: debug: add new debugfs entries for IPC flood test\n\nAdd a couple of new debugfs entries \"ipc_flood_count\"\nand \"ipc_flood_duration_ms\" that can be used to\nexecute the IPC flood test. \"ipc_flood_count\" floods the DSP\nwith the number of test IPCs specified and ipc_flood_duration_ms\nfloods the DSP with test IPC's for the duration(in ms) specified.\nThe test stats such as average, min and max IPC response times\nare logged in the dmesg and saved in the debugfs entry cache buffer.\n\nSigned-off-by: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>\nSigned-off-by: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>\nSigned-off-by: Mark Brown <broonie@kernel.org>",
        "before_after_code_files": [
          "sound/soc/sof/debug.c||sound/soc/sof/debug.c",
          "sound/soc/sof/sof-priv.h||sound/soc/sof/sof-priv.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "sound/soc/sof/debug.c||sound/soc/sof/debug.c"
          ],
          "candidate": [
            "sound/soc/sof/debug.c||sound/soc/sof/debug.c"
          ]
        }
      },
      "candidate_diff": {
        "sound/soc/sof/debug.c||sound/soc/sof/debug.c": [
          "File: sound/soc/sof/debug.c -> sound/soc/sof/debug.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "17: #include \"sof-priv.h\"",
          "18: #include \"ops.h\"",
          "20: static ssize_t sof_dfsentry_read(struct file *file, char __user *buffer,",
          "21:      size_t count, loff_t *ppos)",
          "22: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "20: #if IS_ENABLED(CONFIG_SND_SOC_SOF_DEBUG_IPC_FLOOD_TEST)",
          "21: #define MAX_IPC_FLOOD_DURATION_MS 1000",
          "22: #define MAX_IPC_FLOOD_COUNT 10000",
          "23: #define IPC_FLOOD_TEST_RESULT_LEN 512",
          "25: static int sof_debug_ipc_flood_test(struct snd_sof_dev *sdev,",
          "26:         struct snd_sof_dfsentry *dfse,",
          "27:         bool flood_duration_test,",
          "28:         unsigned long ipc_duration_ms,",
          "29:         unsigned long ipc_count)",
          "30: {",
          "31:  struct sof_ipc_cmd_hdr hdr;",
          "32:  struct sof_ipc_reply reply;",
          "33:  u64 min_response_time = U64_MAX;",
          "34:  ktime_t start, end, test_end;",
          "35:  u64 avg_response_time = 0;",
          "36:  u64 max_response_time = 0;",
          "37:  u64 ipc_response_time;",
          "38:  int i = 0;",
          "39:  int ret;",
          "42:  hdr.cmd = SOF_IPC_GLB_TEST_MSG | SOF_IPC_TEST_IPC_FLOOD;",
          "43:  hdr.size = sizeof(hdr);",
          "46:  if (flood_duration_test)",
          "47:   test_end = ktime_get_ns() + ipc_duration_ms * NSEC_PER_MSEC;",
          "50:  while (1) {",
          "51:   start = ktime_get();",
          "52:   ret = sof_ipc_tx_message(sdev->ipc, hdr.cmd, &hdr, hdr.size,",
          "53:       &reply, sizeof(reply));",
          "54:   end = ktime_get();",
          "56:   if (ret < 0)",
          "57:    break;",
          "60:   ipc_response_time = ktime_to_ns(ktime_sub(end, start));",
          "61:   min_response_time = min(min_response_time, ipc_response_time);",
          "62:   max_response_time = max(max_response_time, ipc_response_time);",
          "65:   avg_response_time += ipc_response_time;",
          "66:   i++;",
          "69:   if (flood_duration_test) {",
          "70:    if (ktime_to_ns(end) >= test_end)",
          "71:     break;",
          "72:   } else {",
          "73:    if (i == ipc_count)",
          "74:     break;",
          "75:   }",
          "76:  }",
          "78:  if (ret < 0)",
          "79:   dev_err(sdev->dev,",
          "80:    \"error: ipc flood test failed at %d iterations\\n\", i);",
          "83:  if (!i)",
          "84:   return ret;",
          "87:  do_div(avg_response_time, i);",
          "90:  memset(dfse->cache_buf, 0, IPC_FLOOD_TEST_RESULT_LEN);",
          "92:  if (flood_duration_test) {",
          "93:   dev_dbg(sdev->dev, \"IPC Flood test duration: %lums\\n\",",
          "94:    ipc_duration_ms);",
          "95:   snprintf(dfse->cache_buf, IPC_FLOOD_TEST_RESULT_LEN,",
          "96:     \"IPC Flood test duration: %lums\\n\", ipc_duration_ms);",
          "97:  }",
          "99:  dev_dbg(sdev->dev,",
          "100:   \"IPC Flood count: %d, Avg response time: %lluns\\n\",",
          "101:   i, avg_response_time);",
          "102:  dev_dbg(sdev->dev, \"Max response time: %lluns\\n\",",
          "103:   max_response_time);",
          "104:  dev_dbg(sdev->dev, \"Min response time: %lluns\\n\",",
          "105:   min_response_time);",
          "108:  snprintf(dfse->cache_buf + strlen(dfse->cache_buf),",
          "109:    IPC_FLOOD_TEST_RESULT_LEN - strlen(dfse->cache_buf),",
          "110:    \"IPC Flood count: %d\\nAvg response time: %lluns\\n\",",
          "111:    i, avg_response_time);",
          "113:  snprintf(dfse->cache_buf + strlen(dfse->cache_buf),",
          "114:    IPC_FLOOD_TEST_RESULT_LEN - strlen(dfse->cache_buf),",
          "115:    \"Max response time: %lluns\\nMin response time: %lluns\\n\",",
          "116:    max_response_time, min_response_time);",
          "118:  return ret;",
          "119: }",
          "120: #endif",
          "122: static ssize_t sof_dfsentry_write(struct file *file, const char __user *buffer,",
          "123:       size_t count, loff_t *ppos)",
          "124: {",
          "125: #if IS_ENABLED(CONFIG_SND_SOC_SOF_DEBUG_IPC_FLOOD_TEST)",
          "126:  struct snd_sof_dfsentry *dfse = file->private_data;",
          "127:  struct snd_sof_dev *sdev = dfse->sdev;",
          "128:  unsigned long ipc_duration_ms = 0;",
          "129:  bool flood_duration_test = false;",
          "130:  unsigned long ipc_count = 0;",
          "131:  int err;",
          "132: #endif",
          "133:  size_t size;",
          "134:  char *string;",
          "135:  int ret;",
          "137:  string = kzalloc(count, GFP_KERNEL);",
          "138:  if (!string)",
          "139:   return -ENOMEM;",
          "141:  size = simple_write_to_buffer(string, count, ppos, buffer, count);",
          "142:  ret = size;",
          "144: #if IS_ENABLED(CONFIG_SND_SOC_SOF_DEBUG_IPC_FLOOD_TEST)",
          "152:  if (strcmp(dfse->dfsentry->d_name.name, \"ipc_flood_count\") &&",
          "153:      strcmp(dfse->dfsentry->d_name.name, \"ipc_flood_duration_ms\"))",
          "154:   return -EINVAL;",
          "156:  if (!strcmp(dfse->dfsentry->d_name.name, \"ipc_flood_duration_ms\"))",
          "157:   flood_duration_test = true;",
          "160:  if (flood_duration_test)",
          "161:   ret = kstrtoul(string, 0, &ipc_duration_ms);",
          "162:  else",
          "163:   ret = kstrtoul(string, 0, &ipc_count);",
          "164:  if (ret < 0)",
          "165:   return ret;",
          "168:  if (flood_duration_test) {",
          "169:   if (!ipc_duration_ms) {",
          "170:    ret = size;",
          "171:    goto out;",
          "172:   }",
          "175:   if (ipc_duration_ms > MAX_IPC_FLOOD_DURATION_MS)",
          "176:    ipc_duration_ms = MAX_IPC_FLOOD_DURATION_MS;",
          "177:  } else {",
          "178:   if (!ipc_count) {",
          "179:    ret = size;",
          "180:    goto out;",
          "181:   }",
          "184:   if (ipc_count > MAX_IPC_FLOOD_COUNT)",
          "185:    ipc_count = MAX_IPC_FLOOD_COUNT;",
          "186:  }",
          "188:  ret = pm_runtime_get_sync(sdev->dev);",
          "189:  if (ret < 0) {",
          "190:   dev_err_ratelimited(sdev->dev,",
          "191:         \"error: debugfs write failed to resume %d\\n\",",
          "192:         ret);",
          "193:   pm_runtime_put_noidle(sdev->dev);",
          "194:   return ret;",
          "195:  }",
          "198:  ret = sof_debug_ipc_flood_test(sdev, dfse, flood_duration_test,",
          "199:            ipc_duration_ms, ipc_count);",
          "201:  pm_runtime_mark_last_busy(sdev->dev);",
          "202:  err = pm_runtime_put_autosuspend(sdev->dev);",
          "203:  if (err < 0)",
          "204:   dev_err_ratelimited(sdev->dev,",
          "205:         \"error: debugfs write failed to idle %d\\n\",",
          "206:         err);",
          "209:  if (ret >= 0)",
          "210:   ret = size;",
          "211: out:",
          "212: #endif",
          "213:  kfree(string);",
          "214:  return ret;",
          "215: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "28:  int size;",
          "29:  u8 *buf;",
          "31:  size = dfse->size;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "228: #if IS_ENABLED(CONFIG_SND_SOC_SOF_DEBUG_IPC_FLOOD_TEST)",
          "229:  if ((!strcmp(dfse->dfsentry->d_name.name, \"ipc_flood_count\") ||",
          "230:       !strcmp(dfse->dfsentry->d_name.name, \"ipc_flood_duration_ms\")) &&",
          "231:      dfse->cache_buf) {",
          "232:   if (*ppos)",
          "233:    return 0;",
          "235:   count = strlen(dfse->cache_buf);",
          "236:   size_ret = copy_to_user(buffer, dfse->cache_buf, count);",
          "237:   if (size_ret)",
          "238:    return -EFAULT;",
          "241:   return count;",
          "242:  }",
          "243: #endif",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "107:  .open = simple_open,",
          "108:  .read = sof_dfsentry_read,",
          "109:  .llseek = default_llseek,",
          "110: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "323:  .write = sof_dfsentry_write,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "177:  dfse->size = size;",
          "178:  dfse->sdev = sdev;",
          "180:  dfse->dfsentry = debugfs_create_file(name, mode, sdev->debugfs_root,",
          "181:           dfse, &sof_dfs_fops);",
          "182:  if (!dfse->dfsentry) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "394: #if IS_ENABLED(CONFIG_SND_SOC_SOF_DEBUG_IPC_FLOOD_TEST)",
          "399:  dfse->cache_buf = devm_kzalloc(sdev->dev, IPC_FLOOD_TEST_RESULT_LEN,",
          "400:            GFP_KERNEL);",
          "401:  if (!dfse->cache_buf)",
          "402:   return -ENOMEM;",
          "403: #endif",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "221:    return err;",
          "222:  }",
          "224:  return 0;",
          "225: }",
          "226: EXPORT_SYMBOL_GPL(snd_sof_dbg_init);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "449: #if IS_ENABLED(CONFIG_SND_SOC_SOF_DEBUG_IPC_FLOOD_TEST)",
          "451:  err = snd_sof_debugfs_buf_item(sdev, NULL, 0,",
          "452:            \"ipc_flood_count\", 0666);",
          "455:  if (err < 0)",
          "456:   return err;",
          "459:  err = snd_sof_debugfs_buf_item(sdev, NULL, 0,",
          "460:            \"ipc_flood_duration_ms\", 0666);",
          "463:  if (err < 0)",
          "464:   return err;",
          "465: #endif",
          "",
          "---------------"
        ],
        "sound/soc/sof/sof-priv.h||sound/soc/sof/sof-priv.h": [
          "File: sound/soc/sof/sof-priv.h -> sound/soc/sof/sof-priv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "56: #define SOF_FORMATS (SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S24_LE | \\",
          "57:  SNDRV_PCM_FMTBIT_S32_LE | SNDRV_PCM_FMTBIT_FLOAT)",
          "59: struct snd_sof_dev;",
          "60: struct snd_sof_ipc_msg;",
          "61: struct snd_sof_ipc;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "59: #define ENABLE_DEBUGFS_CACHEBUF \\",
          "60:  (IS_ENABLED(CONFIG_SND_SOC_SOF_DEBUG_ENABLE_DEBUGFS_CACHE) || \\",
          "61:   IS_ENABLED(CONFIG_SND_SOC_SOF_DEBUG_IPC_FLOOD_TEST))",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "228:  enum sof_debugfs_access_type access_type;",
          "231: #endif",
          "232:  struct snd_sof_dev *sdev;",
          "",
          "[Removed Lines]",
          "229: #if IS_ENABLED(CONFIG_SND_SOC_SOF_DEBUG_ENABLE_DEBUGFS_CACHE)",
          "",
          "[Added Lines]",
          "233: #if ENABLE_DEBUGFS_CACHEBUF",
          "",
          "---------------"
        ]
      }
    }
  ]
}