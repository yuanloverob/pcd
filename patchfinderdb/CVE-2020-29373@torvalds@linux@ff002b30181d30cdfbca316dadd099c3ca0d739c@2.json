{
  "cve_id": "CVE-2020-29373",
  "cve_desc": "An issue was discovered in fs/io_uring.c in the Linux kernel before 5.6. It unsafely handles the root directory during path lookups, and thus a process inside a mount namespace can escape to unintended filesystem locations, aka CID-ff002b30181d.",
  "repo": "torvalds/linux",
  "patch_hash": "ff002b30181d30cdfbca316dadd099c3ca0d739c",
  "patch_info": {
    "commit_hash": "ff002b30181d30cdfbca316dadd099c3ca0d739c",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/ff002b30181d30cdfbca316dadd099c3ca0d739c",
    "files": [
      "fs/io_uring.c"
    ],
    "message": "io_uring: grab ->fs as part of async preparation\n\nThis passes it in to io-wq, so it assumes the right fs_struct when\nexecuting async work that may need to do lookups.\n\nCc: stable@vger.kernel.org # 5.3+\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
    "before_after_code_files": [
      "fs/io_uring.c||fs/io_uring.c"
    ]
  },
  "patch_diff": {
    "fs/io_uring.c||fs/io_uring.c": [
      "File: fs/io_uring.c -> fs/io_uring.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "75: #include <linux/fsnotify.h>",
      "76: #include <linux/fadvise.h>",
      "77: #include <linux/eventpoll.h>",
      "79: #define CREATE_TRACE_POINTS",
      "80: #include <trace/events/io_uring.h>",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "78: #include <linux/fs_struct.h>",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "611:  unsigned  not_supported : 1;",
      "613:  unsigned  file_table : 1;",
      "614: };",
      "616: static const struct io_op_def io_op_defs[] = {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "616:  unsigned  needs_fs : 1;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "653:   .needs_mm  = 1,",
      "654:   .needs_file  = 1,",
      "655:   .unbound_nonreg_file = 1,",
      "656:  },",
      "657:  [IORING_OP_RECVMSG] = {",
      "658:   .async_ctx  = 1,",
      "659:   .needs_mm  = 1,",
      "660:   .needs_file  = 1,",
      "661:   .unbound_nonreg_file = 1,",
      "662:  },",
      "663:  [IORING_OP_TIMEOUT] = {",
      "664:   .async_ctx  = 1,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "659:   .needs_fs  = 1,",
      "666:   .needs_fs  = 1,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "689:   .needs_file  = 1,",
      "690:   .fd_non_neg  = 1,",
      "691:   .file_table  = 1,",
      "692:  },",
      "693:  [IORING_OP_CLOSE] = {",
      "694:   .needs_file  = 1,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "697:   .needs_fs  = 1,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "702:   .needs_mm  = 1,",
      "703:   .needs_file  = 1,",
      "704:   .fd_non_neg  = 1,",
      "705:  },",
      "706:  [IORING_OP_READ] = {",
      "707:   .needs_mm  = 1,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "711:   .needs_fs  = 1,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "733:   .needs_file  = 1,",
      "734:   .fd_non_neg  = 1,",
      "735:   .file_table  = 1,",
      "736:  },",
      "737:  [IORING_OP_EPOLL_CTL] = {",
      "738:   .unbound_nonreg_file = 1,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "743:   .needs_fs  = 1,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "907:  }",
      "908:  if (!req->work.creds)",
      "909:   req->work.creds = get_current_cred();",
      "910: }",
      "912: static inline void io_req_work_drop_env(struct io_kiocb *req)",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "918:  if (!req->work.fs && def->needs_fs) {",
      "919:   spin_lock(&current->fs->lock);",
      "920:   if (!current->fs->in_exec) {",
      "921:    req->work.fs = current->fs;",
      "922:    req->work.fs->users++;",
      "923:   } else {",
      "924:    req->work.flags |= IO_WQ_WORK_CANCEL;",
      "925:   }",
      "926:   spin_unlock(&current->fs->lock);",
      "927:  }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "919:   put_cred(req->work.creds);",
      "920:   req->work.creds = NULL;",
      "921:  }",
      "922: }",
      "924: static inline bool io_prep_async_work(struct io_kiocb *req,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "940:  if (req->work.fs) {",
      "941:   struct fs_struct *fs = req->work.fs;",
      "943:   spin_lock(&req->work.fs->lock);",
      "944:   if (--fs->users)",
      "945:    fs = NULL;",
      "946:   spin_unlock(&req->work.fs->lock);",
      "947:   if (fs)",
      "948:    free_fs_struct(fs);",
      "949:  }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "6ab231448fdc5e37c15a94a4700fca11e80007f7",
      "candidate_info": {
        "commit_hash": "6ab231448fdc5e37c15a94a4700fca11e80007f7",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/6ab231448fdc5e37c15a94a4700fca11e80007f7",
        "files": [
          "fs/io_uring.c"
        ],
        "message": "io_uring: cancel pending async work if task exits\n\nNormally we cancel all work we track, but for untracked work we could\nleave the async worker behind until that work completes. This is totally\nfine, but does leave resources pending after the task is gone until that\nwork completes.\n\nCancel work that this task queued up when it goes away.\n\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io_uring.c||fs/io_uring.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/io_uring.c||fs/io_uring.c"
          ],
          "candidate": [
            "fs/io_uring.c||fs/io_uring.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "925:   }",
          "926:   spin_unlock(&current->fs->lock);",
          "927:  }",
          "928: }",
          "930: static inline void io_req_work_drop_env(struct io_kiocb *req)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "928:  if (!req->work.task_pid)",
          "929:   req->work.task_pid = task_pid_vnr(current);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6474:  struct io_ring_ctx *ctx = file->private_data;",
          "6476:  io_uring_cancel_files(ctx, data);",
          "6477:  return 0;",
          "6478: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6483:  if (fatal_signal_pending(current) || (current->flags & PF_EXITING))",
          "6484:   io_wq_cancel_pid(ctx->io_wq, task_pid_vnr(current));",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "351fd53595a3ceb88756a005e3b864f7c8cb86e4",
      "candidate_info": {
        "commit_hash": "351fd53595a3ceb88756a005e3b864f7c8cb86e4",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/351fd53595a3ceb88756a005e3b864f7c8cb86e4",
        "files": [
          "fs/io_uring.c"
        ],
        "message": "io_uring: don't pass def into io_req_work_grab_env\n\nRemove struct io_op_def *def parameter from io_req_work_grab_env(),\nit's trivially deducible from req->opcode and fast. The API is\ncleaner this way, and also helps the complier to understand\nthat it's a real constant and could be register-cached.\n\nSigned-off-by: Pavel Begunkov <asml.silence@gmail.com>\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io_uring.c||fs/io_uring.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/io_uring.c||fs/io_uring.c"
          ],
          "candidate": [
            "fs/io_uring.c||fs/io_uring.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1101:  }",
          "1102: }",
          "1106: {",
          "1107:  if (!req->work.mm && def->needs_mm) {",
          "1108:   mmgrab(current->mm);",
          "1109:   req->work.mm = current->mm;",
          "",
          "[Removed Lines]",
          "1104: static inline void io_req_work_grab_env(struct io_kiocb *req,",
          "1105:      const struct io_op_def *def)",
          "",
          "[Added Lines]",
          "1104: static inline void io_req_work_grab_env(struct io_kiocb *req)",
          "1106:  const struct io_op_def *def = &io_op_defs[req->opcode];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1161:  }",
          "1163:  io_req_init_async(req);",
          "1167: }",
          "",
          "[Removed Lines]",
          "1164:  io_req_work_grab_env(req, def);",
          "",
          "[Added Lines]",
          "1165:  io_req_work_grab_env(req);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "5256:  if (for_async || (req->flags & REQ_F_WORK_INITIALIZED)) {",
          "5257:   io_req_init_async(req);",
          "5259:  }",
          "5261:  switch (req->opcode) {",
          "",
          "[Removed Lines]",
          "5258:   io_req_work_grab_env(req, &io_op_defs[req->opcode]);",
          "",
          "[Added Lines]",
          "5259:   io_req_work_grab_env(req);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "dfead8a8e2c494b947480bac90a6f9792f08bc12",
      "candidate_info": {
        "commit_hash": "dfead8a8e2c494b947480bac90a6f9792f08bc12",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/dfead8a8e2c494b947480bac90a6f9792f08bc12",
        "files": [
          "fs/io-wq.c",
          "fs/io_uring.c"
        ],
        "message": "io_uring: rely solely on work flags to determine personality.\n\nWe solely rely on work->work_flags now, so use that for proper checking\nand clearing/dropping of various identity items.\n\nSigned-off-by: Jens Axboe <axboe@kernel.dk>",
        "before_after_code_files": [
          "fs/io-wq.c||fs/io-wq.c",
          "fs/io_uring.c||fs/io_uring.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "fs/io_uring.c||fs/io_uring.c"
          ],
          "candidate": [
            "fs/io_uring.c||fs/io_uring.c"
          ]
        }
      },
      "candidate_diff": {
        "fs/io-wq.c||fs/io-wq.c": [
          "File: fs/io-wq.c -> fs/io-wq.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "429:   mmput(worker->mm);",
          "430:   worker->mm = NULL;",
          "431:  }",
          "435:  if (mmget_not_zero(work->mm)) {",
          "436:   kthread_use_mm(work->mm);",
          "437:   worker->mm = work->mm;",
          "440:   return;",
          "441:  }",
          "",
          "[Removed Lines]",
          "432:  if (!work->mm)",
          "433:   return;",
          "439:   work->mm = NULL;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "fs/io_uring.c||fs/io_uring.c": [
          "File: fs/io_uring.c -> fs/io_uring.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1163:  req->flags &= ~REQ_F_WORK_INITIALIZED;",
          "1166:   mmdrop(req->work.mm);",
          "1168:  }",
          "1169: #ifdef CONFIG_BLK_CGROUP",
          "1171:   css_put(req->work.blkcg_css);",
          "1172: #endif",
          "1174:   put_cred(req->work.creds);",
          "1176:  }",
          "1178:   struct fs_struct *fs = req->work.fs;",
          "1180:   spin_lock(&req->work.fs->lock);",
          "",
          "[Removed Lines]",
          "1165:  if (req->work.mm) {",
          "1167:   req->work.mm = NULL;",
          "1170:  if (req->work.blkcg_css)",
          "1173:  if (req->work.creds) {",
          "1175:   req->work.creds = NULL;",
          "1177:  if (req->work.fs) {",
          "",
          "[Added Lines]",
          "1165:  if (req->work.flags & IO_WQ_WORK_MM) {",
          "1167:   req->work.flags &= ~IO_WQ_WORK_MM;",
          "1170:  if (req->work.flags & IO_WQ_WORK_BLKCG) {",
          "1172:   req->work.flags &= ~IO_WQ_WORK_BLKCG;",
          "1173:  }",
          "1175:  if (req->work.flags & IO_WQ_WORK_CREDS) {",
          "1177:   req->work.flags &= ~IO_WQ_WORK_CREDS;",
          "1179:  if (req->work.flags & IO_WQ_WORK_FS) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1183:   spin_unlock(&req->work.fs->lock);",
          "1184:   if (fs)",
          "1185:    free_fs_struct(fs);",
          "1187:  }",
          "1188: }",
          "",
          "[Removed Lines]",
          "1186:   req->work.fs = NULL;",
          "",
          "[Added Lines]",
          "1188:   req->work.flags &= ~IO_WQ_WORK_FS;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1201:   if (def->unbound_nonreg_file)",
          "1202:    req->work.flags |= IO_WQ_WORK_UNBOUND;",
          "1203:  }",
          "1205:      (io_op_defs[req->opcode].work_flags & IO_WQ_WORK_FILES) &&",
          "1206:      !(req->flags & REQ_F_NO_FILE_TABLE)) {",
          "1207:   req->work.files = get_files_struct(current);",
          "",
          "[Removed Lines]",
          "1204:  if (!req->work.files &&",
          "",
          "[Added Lines]",
          "1206:  if (!(req->work.flags & IO_WQ_WORK_FILES) &&",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1212:   spin_lock_irq(&ctx->inflight_lock);",
          "1213:   list_add(&req->inflight_entry, &ctx->inflight_list);",
          "1214:   spin_unlock_irq(&ctx->inflight_lock);",
          "1215:  }",
          "1217:   mmgrab(current->mm);",
          "1218:   req->work.mm = current->mm;",
          "1219:  }",
          "1220: #ifdef CONFIG_BLK_CGROUP",
          "1222:   rcu_read_lock();",
          "1223:   req->work.blkcg_css = blkcg_css();",
          "",
          "[Removed Lines]",
          "1216:  if (!req->work.mm && (def->work_flags & IO_WQ_WORK_MM)) {",
          "1221:  if (!req->work.blkcg_css && (def->work_flags & IO_WQ_WORK_BLKCG)) {",
          "",
          "[Added Lines]",
          "1217:   req->work.flags |= IO_WQ_WORK_FILES;",
          "1219:  if (!(req->work.flags & IO_WQ_WORK_MM) &&",
          "1220:      (def->work_flags & IO_WQ_WORK_MM)) {",
          "1223:   req->work.flags |= IO_WQ_WORK_MM;",
          "1226:  if (!(req->work.flags & IO_WQ_WORK_BLKCG) &&",
          "1227:      (def->work_flags & IO_WQ_WORK_BLKCG)) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1228:   if (!css_tryget_online(req->work.blkcg_css))",
          "1229:    req->work.blkcg_css = NULL;",
          "1230:   rcu_read_unlock();",
          "1231:  }",
          "1232: #endif",
          "1234:   req->work.creds = get_current_cred();",
          "1236:   spin_lock(&current->fs->lock);",
          "1237:   if (!current->fs->in_exec) {",
          "1238:    req->work.fs = current->fs;",
          "1239:    req->work.fs->users++;",
          "1240:   } else {",
          "1241:    req->work.flags |= IO_WQ_WORK_CANCEL;",
          "1242:   }",
          "",
          "[Removed Lines]",
          "1233:  if (!req->work.creds)",
          "1235:  if (!req->work.fs && (def->work_flags & IO_WQ_WORK_FS)) {",
          "",
          "[Added Lines]",
          "1236:   else",
          "1237:    req->work.flags |= IO_WQ_WORK_BLKCG;",
          "1241:  if (!(req->work.flags & IO_WQ_WORK_CREDS)) {",
          "1243:   req->work.flags |= IO_WQ_WORK_CREDS;",
          "1244:  }",
          "1245:  if (!(req->work.flags & IO_WQ_WORK_FS) &&",
          "1246:      (def->work_flags & IO_WQ_WORK_FS)) {",
          "1251:    req->work.flags |= IO_WQ_WORK_FS;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1246:   req->work.fsize = rlimit(RLIMIT_FSIZE);",
          "1247:  else",
          "1248:   req->work.fsize = RLIM_INFINITY;",
          "1251: }",
          "1253: static void io_prep_async_link(struct io_kiocb *req)",
          "",
          "[Removed Lines]",
          "1250:  req->work.flags |= def->work_flags;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1437: {",
          "1438:  if (!files)",
          "1439:   return true;",
          "1441:   return req->work.files == files;",
          "1442:  return false;",
          "1443: }",
          "",
          "[Removed Lines]",
          "1440:  if (req->flags & REQ_F_WORK_INITIALIZED)",
          "",
          "[Added Lines]",
          "1450:  if ((req->flags & REQ_F_WORK_INITIALIZED) &&",
          "1451:      (req->work.flags & IO_WQ_WORK_FILES))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "5694:  req->flags &= ~REQ_F_INFLIGHT;",
          "5695:  put_files_struct(req->work.files);",
          "5696:  put_nsproxy(req->work.nsproxy);",
          "5698: }",
          "5700: static void __io_clean_op(struct io_kiocb *req)",
          "",
          "[Removed Lines]",
          "5697:  req->work.files = NULL;",
          "",
          "[Added Lines]",
          "5708:  req->work.flags &= ~IO_WQ_WORK_FILES;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6061:   else",
          "6062:    old_creds = override_creds(req->work.creds);",
          "6063:  }",
          "6065:  ret = io_issue_sqe(req, true, cs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6074:   req->work.flags |= IO_WQ_WORK_CREDS;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6367:   if (unlikely(!req->work.creds))",
          "6368:    return -EINVAL;",
          "6369:   get_cred(req->work.creds);",
          "6370:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6382:   req->work.flags |= IO_WQ_WORK_CREDS;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "8234: {",
          "8235:  struct files_struct *files = data;",
          "8238: }",
          "",
          "[Removed Lines]",
          "8237:  return !files || work->files == files;",
          "",
          "[Added Lines]",
          "8250:  return !files || ((work->flags & IO_WQ_WORK_FILES) &&",
          "8251:     work->files == files);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "8390:   spin_lock_irq(&ctx->inflight_lock);",
          "8391:   list_for_each_entry(req, &ctx->inflight_list, inflight_entry) {",
          "8393:     continue;",
          "8395:    if (!refcount_inc_not_zero(&req->refs))",
          "",
          "[Removed Lines]",
          "8392:    if (files && req->work.files != files)",
          "",
          "[Added Lines]",
          "8406:    if (files && (req->work.flags & IO_WQ_WORK_FILES) &&",
          "8407:        req->work.files != files)",
          "",
          "---------------"
        ]
      }
    }
  ]
}