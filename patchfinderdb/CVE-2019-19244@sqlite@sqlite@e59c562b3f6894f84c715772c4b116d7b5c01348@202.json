{
  "cve_id": "CVE-2019-19244",
  "cve_desc": "sqlite3Select in select.c in SQLite 3.30.1 allows a crash if a sub-select uses both DISTINCT and window functions, and also has certain ORDER BY usage.",
  "repo": "sqlite/sqlite",
  "patch_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
  "patch_info": {
    "commit_hash": "e59c562b3f6894f84c715772c4b116d7b5c01348",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/e59c562b3f6894f84c715772c4b116d7b5c01348",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/window1.test"
    ],
    "message": "Fix a crash that could occur if a sub-select that uses both DISTINCT and window functions also used an ORDER BY that is the same as its select list.\n\nFossilOrigin-Name: bcdd66c1691955c697f3d756c2b035acfe98f6aad72e90b0021bab6e9023b3ba",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/window1.test||test/window1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 6a64fb6a2da6c98f1e87b55ad5689967e1db4eae2e08345471d95e28cd567e0f",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "6065:   if( (p->selFlags & (SF_Distinct|SF_Aggregate))==SF_Distinct",
      "6066:    && sqlite3ExprListCompare(sSort.pOrderBy, pEList, -1)==0",
      "6067:   ){",
      "6068:     p->selFlags &= ~SF_Distinct;",
      "6069:     pGroupBy = p->pGroupBy = sqlite3ExprListDup(db, pEList, 0);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6067:    && p->pWin==0",
      "",
      "---------------"
    ],
    "test/window1.test||test/window1.test": [
      "File: test/window1.test -> test/window1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "1243:   ALTER TABLE a0 RENAME TO S;",
      "1244: } {1 {error in view a: 1st ORDER BY term does not match any column in the result set}}",
      "1246: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1246: reset_db",
      "1247: do_execsql_test 33.1 {",
      "1248:   CREATE TABLE t1(aa, bb);",
      "1249:   INSERT INTO t1 VALUES(1, 2);",
      "1250:   INSERT INTO t1 VALUES(5, 6);",
      "1251:   CREATE TABLE t2(x);",
      "1252:   INSERT INTO t2 VALUES(1);",
      "1253: }",
      "1254: do_execsql_test 33.2 {",
      "1255:   SELECT (SELECT DISTINCT sum(aa) OVER() FROM t1 ORDER BY 1), x FROM t2",
      "1256:   ORDER BY 1;",
      "1257: } {6 1}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "898c527eafd8bf263a3c3626ff421804558132f9",
      "candidate_info": {
        "commit_hash": "898c527eafd8bf263a3c3626ff421804558132f9",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/898c527eafd8bf263a3c3626ff421804558132f9",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/select.c",
          "src/sqliteInt.h",
          "src/where.c",
          "src/whereInt.h",
          "src/whereexpr.c"
        ],
        "message": "When flipping (\"commuting\") a comparison operator, set the new EP_Commuted bit rather than adding extra EP_Collate bits, to single later processing that the order of precedence for COLLATE operators is inverted. Fix for ticket [b47e3627ecaadbde]\n\nFossilOrigin-Name: 90f7c477354d67d22d5eb0da22dac579f384ab44743fdc19887220e32203ebc2",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/select.c||src/select.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/where.c||src/where.c",
          "src/whereInt.h||src/whereInt.h",
          "src/whereexpr.c||src/whereexpr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cd2317d04c1c4bcf5fe63aa02a6051bdfae8f5566a098e3f45bf9ec1dd0c3ea6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "339:   return pColl;",
          "340: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "350: CollSeq *sqlite3ExprCompareCollSeq(Parse *pParse, Expr *p){",
          "351:   if( ExprHasProperty(p, EP_Commuted) ){",
          "352:     return sqlite3BinaryCompareCollSeq(pParse, p->pRight, p->pLeft);",
          "353:   }else{",
          "354:     return sqlite3BinaryCompareCollSeq(pParse, p->pLeft, p->pRight);",
          "355:   }",
          "356: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353: ){",
          "354:   int p5;",
          "355:   int addr;",
          "356:   CollSeq *p4;",
          "359:   p5 = binaryCompareP5(pLeft, pRight, jumpIfNull);",
          "360:   addr = sqlite3VdbeAddOp4(pParse->pVdbe, opcode, in2, dest, in1,",
          "361:                            (void*)p4, P4_COLLSEQ);",
          "",
          "[Removed Lines]",
          "358:   p4 = sqlite3BinaryCompareCollSeq(pParse, pLeft, pRight);",
          "",
          "[Added Lines]",
          "375:   if( isCommuted ){",
          "376:     p4 = sqlite3BinaryCompareCollSeq(pParse, pRight, pLeft);",
          "377:   }else{",
          "378:     p4 = sqlite3BinaryCompareCollSeq(pParse, pLeft, pRight);",
          "379:   }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "566:   int regRight = 0;",
          "567:   u8 opx = op;",
          "568:   int addrDone = sqlite3VdbeMakeLabel(pParse);",
          "570:   if( nLeft!=sqlite3ExprVectorSize(pRight) ){",
          "571:     sqlite3ErrorMsg(pParse, \"row value misused\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "590:   int isCommuted = ExprHasProperty(pExpr,EP_Commuted);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "595:     assert( i>=0 && i<nLeft );",
          "596:     r1 = exprVectorRegister(pParse, pLeft, i, regLeft, &pL, &regFree1);",
          "597:     r2 = exprVectorRegister(pParse, pRight, i, regRight, &pR, &regFree2);",
          "599:     testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "600:     testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "601:     testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "598:     codeCompare(pParse, pL, pR, opx, r1, r2, dest, p5);",
          "",
          "[Added Lines]",
          "620:     codeCompare(pParse, pL, pR, opx, r1, r2, dest, p5, isCommuted);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3665:         r1 = sqlite3ExprCodeTemp(pParse, pLeft, &regFree1);",
          "3666:         r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);",
          "3667:         codeCompare(pParse, pLeft, pExpr->pRight, op,",
          "3669:         assert(TK_LT==OP_Lt); testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "3670:         assert(TK_LE==OP_Le); testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "3671:         assert(TK_GT==OP_Gt); testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "3668:             r1, r2, inReg, SQLITE_STOREP2 | p5);",
          "",
          "[Added Lines]",
          "3690:             r1, r2, inReg, SQLITE_STOREP2 | p5,",
          "3691:             ExprHasProperty(pExpr,EP_Commuted));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "4585:       r1 = sqlite3ExprCodeTemp(pParse, pExpr->pLeft, &regFree1);",
          "4586:       r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);",
          "4587:       codeCompare(pParse, pExpr->pLeft, pExpr->pRight, op,",
          "4589:       assert(TK_LT==OP_Lt); testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "4590:       assert(TK_LE==OP_Le); testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "4591:       assert(TK_GT==OP_Gt); testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "4588:                   r1, r2, dest, jumpIfNull);",
          "",
          "[Added Lines]",
          "4611:                   r1, r2, dest, jumpIfNull, ExprHasProperty(pExpr,EP_Commuted));",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4760:       r1 = sqlite3ExprCodeTemp(pParse, pExpr->pLeft, &regFree1);",
          "4761:       r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);",
          "4762:       codeCompare(pParse, pExpr->pLeft, pExpr->pRight, op,",
          "4764:       assert(TK_LT==OP_Lt); testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);",
          "4765:       assert(TK_LE==OP_Le); testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);",
          "4766:       assert(TK_GT==OP_Gt); testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);",
          "",
          "[Removed Lines]",
          "4763:                   r1, r2, dest, jumpIfNull);",
          "",
          "[Added Lines]",
          "4786:                   r1, r2, dest, jumpIfNull,ExprHasProperty(pExpr,EP_Commuted));",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "4946:       return 2;",
          "4947:     }",
          "4948:   }",
          "4950:   if( (combinedFlags & EP_TokenOnly)==0 ){",
          "4951:     if( combinedFlags & EP_xIsSelect ) return 2;",
          "4952:     if( (combinedFlags & EP_FixedCol)==0",
          "",
          "[Removed Lines]",
          "4949:   if( (pA->flags & EP_Distinct)!=(pB->flags & EP_Distinct) ) return 2;",
          "",
          "[Added Lines]",
          "4972:   if( (pA->flags & (EP_Distinct|EP_Commuted))",
          "4973:      != (pB->flags & (EP_Distinct|EP_Commuted)) ) return 2;",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4170:   if( pRight->op==TK_COLUMN",
          "4171:    && !ExprHasProperty(pRight, EP_FixedCol)",
          "4172:    && sqlite3ExprIsConstant(pLeft)",
          "4174:   ){",
          "4175:     constInsert(pConst, pRight, pLeft);",
          "4176:   }else",
          "4177:   if( pLeft->op==TK_COLUMN",
          "4178:    && !ExprHasProperty(pLeft, EP_FixedCol)",
          "4179:    && sqlite3ExprIsConstant(pRight)",
          "4181:   ){",
          "4182:     constInsert(pConst, pLeft, pRight);",
          "4183:   }",
          "",
          "[Removed Lines]",
          "4173:    && sqlite3IsBinary(sqlite3BinaryCompareCollSeq(pConst->pParse,pLeft,pRight))",
          "4180:    && sqlite3IsBinary(sqlite3BinaryCompareCollSeq(pConst->pParse,pLeft,pRight))",
          "",
          "[Added Lines]",
          "4173:    && sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr))",
          "4180:    && sqlite3IsBinary(sqlite3ExprCompareCollSeq(pConst->pParse,pExpr))",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4517: #endif",
          "4518: int sqlite3Reprepare(Vdbe*);",
          "4519: void sqlite3ExprListCheckLength(Parse*, ExprList*, const char*);",
          "4520: CollSeq *sqlite3BinaryCompareCollSeq(Parse *, Expr *, Expr *);",
          "4521: int sqlite3TempInMemory(const sqlite3*);",
          "4522: const char *sqlite3JournalModename(int);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4520: CollSeq *sqlite3ExprCompareCollSeq(Parse*,Expr*);",
          "",
          "---------------"
        ],
        "src/where.c||src/where.c": [
          "File: src/where.c -> src/where.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "279:                 continue;",
          "280:               }",
          "281:               assert(pX->pLeft);",
          "284:               if( pColl==0 ) pColl = pParse->db->pDfltColl;",
          "285:               if( sqlite3StrICmp(pColl->zName, pScan->zCollName) ){",
          "286:                 continue;",
          "",
          "[Removed Lines]",
          "282:               pColl = sqlite3BinaryCompareCollSeq(pParse,",
          "283:                                                   pX->pLeft, pX->pRight);",
          "",
          "[Added Lines]",
          "282:               pColl = sqlite3ExprCompareCollSeq(pParse, pX);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "801:         Expr *pX = pTerm->pExpr;",
          "802:         idxCols |= cMask;",
          "803:         pIdx->aiColumn[n] = pTerm->u.leftColumn;",
          "806:         n++;",
          "807:       }",
          "808:     }",
          "",
          "[Removed Lines]",
          "804:         pColl = sqlite3BinaryCompareCollSeq(pParse, pX->pLeft, pX->pRight);",
          "805:         pIdx->azColl[n] = pColl ? pColl->zName : sqlite3StrBINARY;",
          "",
          "[Added Lines]",
          "803:         pColl = sqlite3ExprCompareCollSeq(pParse, pX);",
          "804:         pIdx->azColl[n] = ALWAYS(pColl) ? pColl->zName : sqlite3StrBINARY;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2802:   if( pParse->db->flags & SQLITE_EnableQPSG ) pParse = 0;",
          "2803:   for(i=0, pTerm=pWC->a; i<pWC->nTerm; i++, pTerm++){",
          "2804:     Expr *pExpr;",
          "2806:     pExpr = pTerm->pExpr;",
          "2807:     if( (!ExprHasProperty(pExpr, EP_FromJoin) || pExpr->iRightJoinTable==iTab)",
          "2808:      && sqlite3ExprImpliesExpr(pParse, pExpr, pWhere, iTab)",
          "",
          "[Removed Lines]",
          "2805:     if( pTerm->wtFlags & TERM_NOPARTIDX ) continue;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3265:     int iTerm = pIdxInfo->aConstraint[iCons].iTermOffset;",
          "3266:     Expr *pX = pHidden->pWC->a[iTerm].pExpr;",
          "3267:     if( pX->pLeft ){",
          "3269:     }",
          "3270:     zRet = (pC ? pC->zName : sqlite3StrBINARY);",
          "3271:   }",
          "",
          "[Removed Lines]",
          "3268:       pC = sqlite3BinaryCompareCollSeq(pHidden->pParse, pX->pLeft, pX->pRight);",
          "",
          "[Added Lines]",
          "3266:       pC = sqlite3ExprCompareCollSeq(pHidden->pParse, pX);",
          "",
          "---------------"
        ],
        "src/whereInt.h||src/whereInt.h": [
          "File: src/whereInt.h -> src/whereInt.h"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "126: static u16 exprCommute(Parse *pParse, Expr *pExpr){",
          "145:   }",
          "146:   SWAP(Expr*,pExpr->pRight,pExpr->pLeft);",
          "147:   if( pExpr->op>=TK_GT ){",
          "",
          "[Removed Lines]",
          "127:   u16 expRight = (pExpr->pRight->flags & EP_Collate);",
          "128:   u16 expLeft = (pExpr->pLeft->flags & EP_Collate);",
          "129:   u16 wtFlags = 0;",
          "130:   assert( allowedOp(pExpr->op) && pExpr->op!=TK_IN );",
          "131:   if( expRight==expLeft ){",
          "133:     if( expRight ){",
          "136:       pExpr->pRight->flags &= ~EP_Collate;",
          "137:       wtFlags |= TERM_NOPARTIDX;",
          "138:     }else if( sqlite3ExprCollSeq(pParse, pExpr->pLeft)!=0 ){",
          "142:       pExpr->pLeft->flags |= EP_Collate;",
          "143:       wtFlags |= TERM_NOPARTIDX;",
          "144:     }",
          "",
          "[Added Lines]",
          "114:   if( sqlite3BinaryCompareCollSeq(pParse, pExpr->pLeft, pExpr->pRight) !=",
          "115:       sqlite3BinaryCompareCollSeq(pParse, pExpr->pRight, pExpr->pLeft) ){",
          "116:     pExpr->flags ^= EP_Commuted;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "152:     assert( pExpr->op>=TK_GT && pExpr->op<=TK_GE );",
          "153:     pExpr->op = ((pExpr->op-TK_GT)^2)+TK_GT;",
          "154:   }",
          "156: }",
          "",
          "[Removed Lines]",
          "155:   return wtFlags;",
          "",
          "[Added Lines]",
          "127:   return 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "930:   ){",
          "931:     return 0;",
          "932:   }",
          "934:   if( sqlite3IsBinary(pColl) ) return 1;",
          "935:   return sqlite3ExprCollSeqMatch(pParse, pExpr->pLeft, pExpr->pRight);",
          "936: }",
          "",
          "[Removed Lines]",
          "933:   pColl = sqlite3BinaryCompareCollSeq(pParse, pExpr->pLeft, pExpr->pRight);",
          "",
          "[Added Lines]",
          "905:   pColl = sqlite3ExprCompareCollSeq(pParse, pExpr);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a0fe5fe54fe57b4f1c8011d420c5775cc6f94968",
      "candidate_info": {
        "commit_hash": "a0fe5fe54fe57b4f1c8011d420c5775cc6f94968",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a0fe5fe54fe57b4f1c8011d420c5775cc6f94968",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "When Select-Trace is enabled (in debugging builds only) do not show the result of Window function tree rewrites if there are no window functions.\n\nFossilOrigin-Name: d1acf72ae1ea7484bb9c3a8630094f1a3a9597578c7b9d6e02fc0a4e3f59c57d",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid",
            "src/select.c||src/select.c"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f5ee30426e8876e70304f852153b56991a2a66e0f6a82597e9dcccf49163272d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5727:     goto select_end;",
          "5728:   }",
          "5729: #if SELECTTRACE_ENABLED",
          "5731:     SELECTTRACE(0x104,pParse,p, (\"after window rewrite:\\n\"));",
          "5732:     sqlite3TreeViewSelect(0, p, 0);",
          "5733:   }",
          "",
          "[Removed Lines]",
          "5730:   if( sqlite3SelectTrace & 0x108 ){",
          "",
          "[Added Lines]",
          "5730:   if( p->pWin && (sqlite3SelectTrace & 0x108)!=0 ){",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3e08ba4521c29df5c8b64692548ecdbe33ebf888",
      "candidate_info": {
        "commit_hash": "3e08ba4521c29df5c8b64692548ecdbe33ebf888",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3e08ba4521c29df5c8b64692548ecdbe33ebf888",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/dbstat.c"
        ],
        "message": "Small simplification to the dbstat virtual table.\n\nFossilOrigin-Name: 9d4c156fa26f80bb8f88b6ad8f24520a15af296de9c110604f6bd42c257455a0",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/dbstat.c||src/dbstat.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f09aa3248e2b4a32ff5b5d37084cb2a27445322cb06a3354cef723f4f0b2cd34",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/dbstat.c||src/dbstat.c": [
          "File: src/dbstat.c -> src/dbstat.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "602:   StatTable *pTab = (StatTable*)(pCursor->pVtab);",
          "603:   char *zSql;",
          "604:   int rc = SQLITE_OK;",
          "607:   if( idxNum==1 ){",
          "608:     const char *zDbase = (const char*)sqlite3_value_text(argv[0]);",
          "",
          "[Removed Lines]",
          "605:   char *zMaster;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "618:   statResetCsr(pCsr);",
          "619:   sqlite3_finalize(pCsr->pStmt);",
          "620:   pCsr->pStmt = 0;",
          "622:   zSql = sqlite3_mprintf(",
          "623:       \"SELECT 'sqlite_master' AS name, 1 AS rootpage, 'table' AS type\"",
          "624:       \"  UNION ALL  \"",
          "625:       \"SELECT name, rootpage, type\"",
          "628:   if( zSql==0 ){",
          "629:     return SQLITE_NOMEM_BKPT;",
          "630:   }else{",
          "",
          "[Removed Lines]",
          "621:   zMaster = pCsr->iDb==1 ? \"sqlite_temp_master\" : \"sqlite_master\";",
          "626:       \"  FROM \\\"%w\\\".%s WHERE rootpage!=0\"",
          "627:       \"  ORDER BY name\", pTab->db->aDb[pCsr->iDb].zDbSName, zMaster);",
          "",
          "[Added Lines]",
          "624:       \"  FROM \\\"%w\\\".sqlite_master WHERE rootpage!=0\"",
          "625:       \"  ORDER BY name\", pTab->db->aDb[pCsr->iDb].zDbSName);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7a231b49738d82582d9f4c31da18da90928d6f10",
      "candidate_info": {
        "commit_hash": "7a231b49738d82582d9f4c31da18da90928d6f10",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7a231b49738d82582d9f4c31da18da90928d6f10",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/index6.test"
        ],
        "message": "The expression \"(X IS FALSE) BETWEEN FALSE AND TRUE\" does not implie that X is not NULL.  Ticket [fba33c8b1df6a915]\n\nFossilOrigin-Name: 057fb8b1809b8b9c8fff0fd0804153b9644f0545c23c6ddc4758bda3381094b9",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/index6.test||test/index6.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 45ff2b1f2693bb0231a864a511bb82cf2a5945ab3d806a5bbaf1517ecb287883",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4999:       assert( pList!=0 );",
          "5000:       assert( pList->nExpr==2 );",
          "5001:       if( seenNot ) return 0;",
          "5004:       ){",
          "5005:         return 1;",
          "5006:       }",
          "5008:     }",
          "5009:     case TK_EQ:",
          "5010:     case TK_NE:",
          "",
          "[Removed Lines]",
          "5002:       if( exprImpliesNotNull(pParse, pList->a[0].pExpr, pNN, iTab, seenNot)",
          "5003:        || exprImpliesNotNull(pParse, pList->a[1].pExpr, pNN, iTab, seenNot)",
          "5007:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, seenNot);",
          "",
          "[Added Lines]",
          "5005:       if( exprImpliesNotNull(pParse, pList->a[0].pExpr, pNN, iTab, 1)",
          "5006:        || exprImpliesNotNull(pParse, pList->a[1].pExpr, pNN, iTab, 1)",
          "5010:       return exprImpliesNotNull(pParse, p->pLeft, pNN, iTab, 1);",
          "",
          "---------------"
        ],
        "test/index6.test||test/index6.test": [
          "File: test/index6.test -> test/index6.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "440: # 2019-08-30",
          "441: # Ticket https://www.sqlite.org/src/info/a6408d42b9f44462",
          "442: #",
          "443: do_execsql_test index6-15.1 {",
          "444:   DROP TABLE t0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "442: # Ticket https://www.sqlite.org/src/info/fba33c8b1df6a915",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "447:   CREATE INDEX i0 ON t0(1) WHERE c0 NOT NULL;",
          "448:   SELECT 1 FROM t0 WHERE (t0.c0 IS FALSE) IS FALSE;",
          "449: } {1}",
          "451: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "451: do_execsql_test index6-15.2 {",
          "452:   SELECT 1 FROM t0 WHERE (t0.c0 IS FALSE) BETWEEN FALSE AND TRUE;",
          "453: } {1}",
          "454: do_execsql_test index6-15.3 {",
          "455:   SELECT 1 FROM t0 WHERE TRUE BETWEEN (t0.c0 IS FALSE) AND TRUE;",
          "456: } {1}",
          "457: do_execsql_test index6-15.4 {",
          "458:   SELECT 1 FROM t0 WHERE FALSE BETWEEN FALSE AND (t0.c0 IS FALSE);",
          "459: } {1}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9e9a67adb059733e05e0791f2ec519985eaa333c",
      "candidate_info": {
        "commit_hash": "9e9a67adb059733e05e0791f2ec519985eaa333c",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9e9a67adb059733e05e0791f2ec519985eaa333c",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "test/join.test"
        ],
        "message": "Ensure the functions that appear to be constant are not factored out of expression that originate on the right-hand side of a LEFT JOIN. Ticket [6710d2f7a13a2997]\n\nFossilOrigin-Name: 500c9152daaf11cf69d778aa8592175f6088337c6667c59af6df3a24cd81eb0e",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "test/join.test||test/join.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9c4bca64fb5f635296a8d7d7c1bf2808e02ca734a9983e5cee9132f5352a9a6d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3994:       break;",
          "3995:     }",
          "3997:     case TK_IF_NULL_ROW: {",
          "3998:       int addrINR;",
          "3999:       addrINR = sqlite3VdbeAddOp1(v, OP_IfNullRow, pExpr->iTable);",
          "4000:       inReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft, target);",
          "4001:       sqlite3VdbeJumpHere(v, addrINR);",
          "4002:       sqlite3VdbeChangeP3(v, addrINR, inReg);",
          "4003:       break;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4005:       u8 okConstFactor = pParse->okConstFactor;",
          "4011:       pParse->okConstFactor = 0;",
          "4013:       pParse->okConstFactor = okConstFactor;",
          "",
          "---------------"
        ],
        "test/join.test||test/join.test": [
          "File: test/join.test -> test/join.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "864:    WHERE (b IS NOT NULL)=0;",
          "865: } {1 {}}",
          "867: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "867: # 2019-08-17 ticket https://sqlite.org/src/tktview/6710d2f7a13a299728ab",
          "868: # Ensure that constants that derive from the right-hand table of a LEFT JOIN",
          "869: # are never factored out, since they are not really constant.",
          "870: #",
          "871: do_execsql_test join-17.100 {",
          "872:   DROP TABLE IF EXISTS t1;",
          "873:   CREATE TABLE t1(x);",
          "874:   INSERT INTO t1(x) VALUES(0),(1);",
          "875:   SELECT * FROM t1 LEFT JOIN (SELECT abs(1) AS y FROM t1) ON x WHERE NOT(y='a');",
          "876: } {1 1 1 1}",
          "877: do_execsql_test join-17.110 {",
          "878:   SELECT * FROM t1 LEFT JOIN (SELECT abs(1)+2 AS y FROM t1) ON x",
          "879:    WHERE NOT(y='a');",
          "880: } {1 3 1 3}",
          "",
          "---------------"
        ]
      }
    }
  ]
}