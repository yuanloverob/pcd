{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0b5235e68c7f62116a27ea27d4aeb4fc6b211cf4",
      "candidate_info": {
        "commit_hash": "0b5235e68c7f62116a27ea27d4aeb4fc6b211cf4",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0b5235e68c7f62116a27ea27d4aeb4fc6b211cf4",
        "files": [
          "src/node.js"
        ],
        "message": "process: make --eval and reading scripts from stdin act the same\n\nReusing the same logic for both places for the behavior is consistent.\n\nFor example:\n\n  $ ./node -p -e \"'Hello World'\"\n  Hello World\n\n  $ echo \"'Hello World'\" | ./node -p\n  Hello World",
        "before_after_code_files": [
          "src/node.js||src/node.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "68:     } else if (process._eval != null) {",
          "79:     } else if (process.argv[1]) {",
          "81:       var path = NativeModule.require('path');",
          "",
          "[Removed Lines]",
          "70:       var Module = NativeModule.require('module');",
          "71:       var path = NativeModule.require('path');",
          "72:       var cwd = process.cwd();",
          "74:       var module = new Module('eval');",
          "75:       module.filename = path.join(cwd, 'eval');",
          "76:       module.paths = Module._nodeModulePaths(cwd);",
          "77:       var result = module._compile('return eval(process._eval)', 'eval');",
          "78:       if (process._print_eval) console.log(result);",
          "",
          "[Added Lines]",
          "70:       evalScript('eval');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "147:         });",
          "149:         process.stdin.on('end', function() {",
          "151:         });",
          "152:       }",
          "153:     }",
          "",
          "[Removed Lines]",
          "150:           new Module()._compile(code, '[stdin]');",
          "",
          "[Added Lines]",
          "142:           process._eval = code;",
          "143:           evalScript('[stdin]');",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "265:     };",
          "266:   };",
          "268:   function errnoException(errorno, syscall) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "261:   function evalScript(name) {",
          "262:     var Module = NativeModule.require('module');",
          "263:     var path = NativeModule.require('path');",
          "264:     var cwd = process.cwd();",
          "266:     var module = new Module(name);",
          "267:     module.filename = path.join(cwd, name);",
          "268:     module.paths = Module._nodeModulePaths(cwd);",
          "269:     var result = module._compile('return eval(process._eval)',  name);",
          "270:     if (process._print_eval) console.log(result);",
          "271:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7864bb9eb8211a6b5dfdaa65456ba05b393a6161",
      "candidate_info": {
        "commit_hash": "7864bb9eb8211a6b5dfdaa65456ba05b393a6161",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/7864bb9eb8211a6b5dfdaa65456ba05b393a6161",
        "files": [
          "common.gypi"
        ],
        "message": "build: disable -fomit-frame-pointer on solaris\n\nThis \"optimization\" cripples debuggability and has dubious performance value,\nso we want to disable it at least on SmartOS.",
        "before_after_code_files": [
          "common.gypi||common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:         },",
          "35:       },",
          "36:       'Release': {",
          "37:         # 'defines': [ 'NDEBUG' ],",
          "39:         'conditions': [",
          "40:           ['target_arch==\"x64\"', {",
          "41:             'msvs_configuration_platform': 'x64',",
          "",
          "[Removed Lines]",
          "38:         'cflags': [ '-O3', '-fomit-frame-pointer', '-fdata-sections', '-ffunction-sections' ],",
          "",
          "[Added Lines]",
          "37:         'conditions': [",
          "38:           [ 'OS!=\"solaris\"', {",
          "39:             'cflags': [ '-fomit-frame-pointer' ]",
          "40:           }],",
          "41:         ],",
          "43:         'cflags': [ '-O3', '-fdata-sections', '-ffunction-sections' ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a74354735ab5d5b0fa35a1e4ff7e653757d2069b",
      "candidate_info": {
        "commit_hash": "a74354735ab5d5b0fa35a1e4ff7e653757d2069b",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/a74354735ab5d5b0fa35a1e4ff7e653757d2069b",
        "files": [
          "ChangeLog",
          "doc/index.html",
          "doc/logos/index.html",
          "doc/template.html",
          "src/node_version.h"
        ],
        "message": "2012.01.23, Version 0.7.1 (unstable)\n\n* Update V8 to 3.8.8\n\n* Install node-waf by default (Fedor Indutny)\n\n* crypto: Add ability to turn off PKCS padding (Ingmar Runge)\n\n* v8: implement VirtualMemory class on SunOS (Ben Noordhuis)\n\n* Add cluster.setupMaster (Andreas Madsen)\n\n* move `path.exists*` to `fs.exists*` (Maciej Ma\u0142ecki)\n\n* typed arrays: set class name (Ben Noordhuis)\n\n* libuv bug fixes (Igor Zinkovsky, Ben Noordhuis, Dan VerWeire)",
        "before_after_code_files": [
          "src/node_version.h||src/node_version.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node_version.h||src/node_version.h": [
          "File: src/node_version.h -> src/node_version.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #define NODE_MAJOR_VERSION 0",
          "30: #define NODE_MINOR_VERSION 7",
          "31: #define NODE_PATCH_VERSION 1",
          "34: #ifndef NODE_STRINGIFY",
          "35: #define NODE_STRINGIFY(n) NODE_STRINGIFY_HELPER(n)",
          "",
          "[Removed Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "32: #define NODE_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "db8940dae2b545347b918e141dec6a699750be43",
      "candidate_info": {
        "commit_hash": "db8940dae2b545347b918e141dec6a699750be43",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/db8940dae2b545347b918e141dec6a699750be43",
        "files": [
          "lib/events.js",
          "test/simple/test-event-emitter-add-listeners.js"
        ],
        "message": "`newListener` emits correct fn when using `once`\n\nFixes #2826.",
        "before_after_code_files": [
          "lib/events.js||lievents.js",
          "test/simple/test-event-emitter-add-listeners.js||test/simple/test-event-emitter-add-listeners.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/events.js||lievents.js": [
          "File: lib/events.js -> lievents.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "110:   if (!this._events[type]) {",
          "",
          "[Removed Lines]",
          "108:   this.emit('newListener', type, listener);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-event-emitter-add-listeners.js||test/simple/test-event-emitter-add-listeners.js": [
          "File: test/simple/test-event-emitter-add-listeners.js -> test/simple/test-event-emitter-add-listeners.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: var e = new events.EventEmitter();",
          "28: var events_new_listener_emited = [];",
          "29: var times_hello_emited = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "29: var listeners_new_listener_emited = [];",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "34: e.on('newListener', function(event, listener) {",
          "35:   console.log('newListener: ' + event);",
          "36:   events_new_listener_emited.push(event);",
          "37: });",
          "40:   console.log('hello');",
          "41:   times_hello_emited += 1;",
          "42:   assert.equal('a', a);",
          "43:   assert.equal('b', b);",
          "46: console.log('start');",
          "",
          "[Removed Lines]",
          "39: e.on('hello', function(a, b) {",
          "44: });",
          "",
          "[Added Lines]",
          "38:   listeners_new_listener_emited.push(listener);",
          "41: function hello(a, b) {",
          "46: }",
          "47: e.on('hello', hello);",
          "49: var foo = function() {};",
          "50: e.once('foo', foo);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "56: process.on('exit', function() {",
          "58:   assert.equal(1, times_hello_emited);",
          "59: });",
          "",
          "[Removed Lines]",
          "57:   assert.deepEqual(['hello'], events_new_listener_emited);",
          "",
          "[Added Lines]",
          "63:   assert.deepEqual(['hello', 'foo'], events_new_listener_emited);",
          "64:   assert.deepEqual([hello, foo], listeners_new_listener_emited);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "ee437c0557c9f3a6a1960d3a8d64e09166d7048d",
      "candidate_info": {
        "commit_hash": "ee437c0557c9f3a6a1960d3a8d64e09166d7048d",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/ee437c0557c9f3a6a1960d3a8d64e09166d7048d",
        "files": [
          "lib/zlib.js",
          "src/node_zlib.cc",
          "test/simple/test-zlib-invalid-input.js",
          "test/simple/test-zlib-random-byte-pipes.js"
        ],
        "message": "zlib: fix error reporting\n\nThis commit is a back-port of the changes on the master branch.\n\nFixes #3230.",
        "before_after_code_files": [
          "lib/zlib.js||lizlib.js",
          "src/node_zlib.cc||src/node_zlib.cc",
          "test/simple/test-zlib-invalid-input.js||test/simple/test-zlib-invalid-input.js",
          "test/simple/test-zlib-random-byte-pipes.js||test/simple/test-zlib-random-byte-pipes.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/zlib.js||lizlib.js": [
          "File: lib/zlib.js -> lizlib.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   if (k.match(/^Z/)) exports[k] = binding[k];",
          "51: });",
          "54: exports.Deflate = Deflate;",
          "55: exports.Inflate = Inflate;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "136:   function onEnd() {",
          "137:     var buffer;",
          "139:       case 0:",
          "140:         buffer = new Buffer(0);",
          "141:         break;",
          "",
          "[Removed Lines]",
          "138:     switch(buffers.length) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "170: function Deflate(opts) {",
          "171:   if (!(this instanceof Deflate)) return new Deflate(opts);",
          "173: }",
          "175: function Inflate(opts) {",
          "176:   if (!(this instanceof Inflate)) return new Inflate(opts);",
          "178: }",
          "",
          "[Removed Lines]",
          "172:   Zlib.call(this, opts, binding.Deflate);",
          "177:   Zlib.call(this, opts, binding.Inflate);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "183: function Gzip(opts) {",
          "184:   if (!(this instanceof Gzip)) return new Gzip(opts);",
          "186: }",
          "188: function Gunzip(opts) {",
          "189:   if (!(this instanceof Gunzip)) return new Gunzip(opts);",
          "191: }",
          "",
          "[Removed Lines]",
          "185:   Zlib.call(this, opts, binding.Gzip);",
          "190:   Zlib.call(this, opts, binding.Gunzip);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "196: function DeflateRaw(opts) {",
          "197:   if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);",
          "199: }",
          "201: function InflateRaw(opts) {",
          "202:   if (!(this instanceof InflateRaw)) return new InflateRaw(opts);",
          "204: }",
          "208: function Unzip(opts) {",
          "209:   if (!(this instanceof Unzip)) return new Unzip(opts);",
          "211: }",
          "",
          "[Removed Lines]",
          "198:   Zlib.call(this, opts, binding.DeflateRaw);",
          "203:   Zlib.call(this, opts, binding.InflateRaw);",
          "210:   Zlib.call(this, opts, binding.Unzip);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "220:   this._opts = opts = opts || {};",
          "221:   this._queue = [];",
          "222:   this._processing = false;",
          "",
          "[Removed Lines]",
          "219: function Zlib(opts, Binding) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "263:     }",
          "264:   }",
          "267:   this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS,",
          "268:                      opts.level || exports.Z_DEFAULT_COMPRESSION,",
          "269:                      opts.memLevel || exports.Z_DEFAULT_MEMLEVEL,",
          "",
          "[Removed Lines]",
          "266:   this._binding = new Binding();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "278: util.inherits(Zlib, stream.Stream);",
          "280: Zlib.prototype.write = function write(chunk, cb) {",
          "281:   if (this._ended) {",
          "282:     return this.emit('error', new Error('Cannot write after end'));",
          "283:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "306:   return empty;",
          "307: };",
          "309: Zlib.prototype.flush = function flush(cb) {",
          "310:   this._flush = binding.Z_SYNC_FLUSH;",
          "311:   return this.write(cb);",
          "312: };",
          "314: Zlib.prototype.end = function end(chunk, cb) {",
          "315:   var self = this;",
          "316:   this._ending = true;",
          "317:   var ret = this.write(chunk, function() {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "323: };",
          "325: Zlib.prototype._process = function() {",
          "326:   if (this._processing || this._paused) return;",
          "328:   if (this._queue.length === 0) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "360:   this._processing = req;",
          "362:   function callback(availInAfter, availOutAfter, buffer) {",
          "363:     var have = availOutBefore - availOutAfter;",
          "365:     assert(have >= 0, 'have should not go down');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "416:   this._process();",
          "417: };",
          "419: util.inherits(Deflate, Zlib);",
          "420: util.inherits(Inflate, Zlib);",
          "421: util.inherits(Gzip, Zlib);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/node_zlib.cc||src/node_zlib.cc": [
          "File: src/node_zlib.cc -> src/node_zlib.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: #include <errno.h>",
          "25: #include <string.h>",
          "26: #include <stdlib.h>",
          "27: #include <sys/types.h>",
          "34: namespace node {",
          "",
          "[Removed Lines]",
          "23: #include <v8.h>",
          "28: #include <zlib.h>",
          "30: #include <node.h>",
          "31: #include <node_buffer.h>",
          "",
          "[Added Lines]",
          "23: #include \"v8.h\"",
          "29: #include \"zlib.h\"",
          "30: #include \"node.h\"",
          "31: #include \"node_buffer.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "38: static Persistent<String> callback_sym;",
          "40: enum node_zlib_mode {",
          "41:   DEFLATE = 1,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39: static Persistent<String> onerror_sym;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "47:   UNZIP",
          "48: };",
          "53: void InitZlib(v8::Handle<v8::Object> target);",
          "",
          "[Removed Lines]",
          "50: template <node_zlib_mode mode> class ZCtx;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "60:  public:",
          "65:   ~ZCtx() {",
          "67:       (void)deflateEnd(&strm_);",
          "69:       (void)inflateEnd(&strm_);",
          "70:     }",
          "71:   }",
          "",
          "[Removed Lines]",
          "59: template <node_zlib_mode mode> class ZCtx : public ObjectWrap {",
          "62:   ZCtx() : ObjectWrap() {",
          "63:   }",
          "66:     if (mode == DEFLATE || mode == GZIP || mode == DEFLATERAW) {",
          "68:     } else if (mode == INFLATE || mode == GUNZIP || mode == INFLATERAW) {",
          "",
          "[Added Lines]",
          "58: class ZCtx : public ObjectWrap {",
          "61:   ZCtx(node_zlib_mode mode) : ObjectWrap(), dictionary_(NULL), mode_(mode) {}",
          "64:     if (mode_ == DEFLATE || mode_ == GZIP || mode_ == DEFLATERAW) {",
          "66:     } else if (mode_ == INFLATE || mode_ == GUNZIP || mode_ == INFLATERAW) {",
          "70:     if (dictionary_ != NULL) delete[] dictionary_;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "75:     HandleScope scope;",
          "76:     assert(args.Length() == 7);",
          "79:     assert(ctx->init_done_ && \"write before init\");",
          "81:     assert(!ctx->write_in_progress_ && \"write already in progress\");",
          "",
          "[Removed Lines]",
          "78:     ZCtx<mode> *ctx = ObjectWrap::Unwrap< ZCtx<mode> >(args.This());",
          "",
          "[Added Lines]",
          "78:     ZCtx *ctx = ObjectWrap::Unwrap<ZCtx>(args.This());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "125:     uv_queue_work(uv_default_loop(),",
          "126:                   work_req,",
          "130:     ctx->Ref();",
          "",
          "[Removed Lines]",
          "127:                   ZCtx<mode>::Process,",
          "128:                   ZCtx<mode>::After);",
          "",
          "[Added Lines]",
          "127:                   ZCtx::Process,",
          "128:                   ZCtx::After);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "140:   static void Process(uv_work_t* work_req) {",
          "148:       case DEFLATE:",
          "149:       case GZIP:",
          "150:       case DEFLATERAW:",
          "152:         break;",
          "153:       case UNZIP:",
          "154:       case INFLATE:",
          "155:       case GUNZIP:",
          "156:       case INFLATERAW:",
          "158:         break;",
          "159:       default:",
          "160:         assert(0 && \"wtf?\");",
          "161:     }",
          "",
          "[Removed Lines]",
          "141:     ZCtx<mode> *ctx = container_of(work_req, ZCtx<mode>, work_req_);",
          "146:     int err;",
          "147:     switch (mode) {",
          "151:         err = deflate(&ctx->strm_, ctx->flush_);",
          "157:         err = inflate(&ctx->strm_, ctx->flush_);",
          "162:     assert(err != Z_STREAM_ERROR);",
          "",
          "[Added Lines]",
          "141:     ZCtx *ctx = container_of(work_req, ZCtx, work_req_);",
          "146:     switch (ctx->mode_) {",
          "150:         ctx->err_ = deflate(&ctx->strm_, ctx->flush_);",
          "156:         ctx->err_ = inflate(&ctx->strm_, ctx->flush_);",
          "159:         if (ctx->err_ == Z_NEED_DICT) {",
          "160:           assert(ctx->dictionary_ != NULL && \"Stream has no dictionary\");",
          "161:           if (ctx->dictionary_ != NULL) {",
          "164:             ctx->err_ = inflateSetDictionary(&ctx->strm_,",
          "165:                                              ctx->dictionary_,",
          "166:                                              ctx->dictionary_len_);",
          "167:             assert(ctx->err_ == Z_OK && \"Failed to set dictionary\");",
          "168:             if (ctx->err_ == Z_OK) {",
          "171:               ctx->err_ = inflate(&ctx->strm_, ctx->flush_);",
          "172:             }",
          "173:           }",
          "174:         }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "170:   static void After(uv_work_t* work_req) {",
          "171:     HandleScope scope;",
          "174:     Local<Integer> avail_out = Integer::New(ctx->strm_.avail_out);",
          "175:     Local<Integer> avail_in = Integer::New(ctx->strm_.avail_in);",
          "",
          "[Removed Lines]",
          "172:     ZCtx<mode> *ctx = container_of(work_req, ZCtx<mode>, work_req_);",
          "",
          "[Added Lines]",
          "190:     ZCtx *ctx = container_of(work_req, ZCtx, work_req_);",
          "193:     switch (ctx->err_) {",
          "194:       case Z_OK:",
          "195:       case Z_STREAM_END:",
          "196:       case Z_BUF_ERROR:",
          "198:         break;",
          "199:       default:",
          "201:         ZCtx::Error(ctx, \"Zlib error\");",
          "202:         return;",
          "203:     }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "185:     ctx->Unref();",
          "186:   }",
          "188:   static Handle<Value> New(const Arguments& args) {",
          "189:     HandleScope scope;",
          "191:     ctx->Wrap(args.This());",
          "192:     return args.This();",
          "193:   }",
          "",
          "[Removed Lines]",
          "190:     ZCtx<mode> *ctx = new ZCtx<mode>();",
          "",
          "[Added Lines]",
          "219:   static void Error(ZCtx *ctx, const char *msg_) {",
          "220:     const char *msg;",
          "221:     if (ctx->strm_.msg != NULL) {",
          "222:       msg = ctx->strm_.msg;",
          "223:     } else {",
          "224:       msg = msg_;",
          "225:     }",
          "227:     assert(ctx->handle_->Get(onerror_sym)->IsFunction() &&",
          "228:            \"Invalid error handler\");",
          "229:     HandleScope scope;",
          "230:     Local<Value> args[2] = { String::New(msg),",
          "231:                              Local<Value>::New(Number::New(ctx->err_)) };",
          "232:     MakeCallback(ctx->handle_, \"onerror\", ARRAY_SIZE(args), args);",
          "235:     ctx->Unref();",
          "236:   }",
          "240:     if (args.Length() < 1 || !args[0]->IsInt32()) {",
          "241:       return ThrowException(Exception::TypeError(String::New(\"Bad argument\")));",
          "242:     }",
          "243:     node_zlib_mode mode = (node_zlib_mode) args[0]->Int32Value();",
          "245:     if (mode < DEFLATE || mode > UNZIP) {",
          "246:       return ThrowException(Exception::TypeError(String::New(\"Bad argument\")));",
          "247:     }",
          "249:     ZCtx *ctx = new ZCtx(mode);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "196:   static Handle<Value> Init(const Arguments& args) {",
          "197:     HandleScope scope;",
          "204:     int windowBits = args[0]->Uint32Value();",
          "205:     assert((windowBits >= 8 && windowBits <= 15) && \"invalid windowBits\");",
          "",
          "[Removed Lines]",
          "199:     assert(args.Length() == 4 &&",
          "200:            \"init(windowBits, level, memLevel, strategy)\");",
          "202:     ZCtx<mode> *ctx = ObjectWrap::Unwrap< ZCtx<mode> >(args.This());",
          "",
          "[Added Lines]",
          "258:     assert((args.Length() == 4 || args.Length() == 5) &&",
          "259:            \"init(windowBits, level, memLevel, strategy, [dictionary])\");",
          "261:     ZCtx *ctx = ObjectWrap::Unwrap<ZCtx>(args.This());",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "217:             strategy == Z_FIXED ||",
          "218:             strategy == Z_DEFAULT_STRATEGY) && \"invalid strategy\");",
          "221:     return Undefined();",
          "222:   }",
          "224:   static void Init(ZCtx *ctx, int level, int windowBits, int memLevel,",
          "226:     ctx->level_ = level;",
          "227:     ctx->windowBits_ = windowBits;",
          "228:     ctx->memLevel_ = memLevel;",
          "",
          "[Removed Lines]",
          "220:     Init(ctx, level, windowBits, memLevel, strategy);",
          "225:                    int strategy) {",
          "",
          "[Added Lines]",
          "279:     char* dictionary = NULL;",
          "280:     size_t dictionary_len = 0;",
          "281:     if (args.Length() >= 5 && Buffer::HasInstance(args[4])) {",
          "282:       Local<Object> dictionary_ = args[4]->ToObject();",
          "284:       dictionary_len = Buffer::Length(dictionary_);",
          "285:       dictionary = new char[dictionary_len];",
          "287:       memcpy(dictionary, Buffer::Data(dictionary_), dictionary_len);",
          "288:     }",
          "290:     Init(ctx, level, windowBits, memLevel, strategy,",
          "291:          dictionary, dictionary_len);",
          "292:     SetDictionary(ctx);",
          "293:     return Undefined();",
          "294:   }",
          "296:   static Handle<Value> Reset(const Arguments &args) {",
          "297:     HandleScope scope;",
          "299:     ZCtx *ctx = ObjectWrap::Unwrap<ZCtx>(args.This());",
          "301:     Reset(ctx);",
          "302:     SetDictionary(ctx);",
          "307:                    int strategy, char* dictionary, size_t dictionary_len) {",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "235:     ctx->flush_ = Z_NO_FLUSH;",
          "238:       ctx->windowBits_ += 16;",
          "239:     }",
          "242:       ctx->windowBits_ += 32;",
          "243:     }",
          "246:       ctx->windowBits_ *= -1;",
          "247:     }",
          "251:       case DEFLATE:",
          "252:       case GZIP:",
          "253:       case DEFLATERAW:",
          "260:         break;",
          "261:       case INFLATE:",
          "262:       case GUNZIP:",
          "263:       case INFLATERAW:",
          "264:       case UNZIP:",
          "266:         break;",
          "267:       default:",
          "268:         assert(0 && \"wtf?\");",
          "269:     }",
          "271:     ctx->write_in_progress_ = false;",
          "272:     ctx->init_done_ = true;",
          "274:   }",
          "276:  private:",
          "",
          "[Removed Lines]",
          "237:     if (mode == GZIP || mode == GUNZIP) {",
          "241:     if (mode == UNZIP) {",
          "245:     if (mode == DEFLATERAW || mode == INFLATERAW) {",
          "249:     int err;",
          "250:     switch (mode) {",
          "254:         err = deflateInit2(&(ctx->strm_),",
          "255:                            ctx->level_,",
          "256:                            Z_DEFLATED,",
          "257:                            ctx->windowBits_,",
          "258:                            ctx->memLevel_,",
          "259:                            ctx->strategy_);",
          "265:         err = inflateInit2(&(ctx->strm_), ctx->windowBits_);",
          "273:     assert(err == Z_OK);",
          "",
          "[Added Lines]",
          "319:     ctx->err_ = Z_OK;",
          "321:     if (ctx->mode_ == GZIP || ctx->mode_ == GUNZIP) {",
          "325:     if (ctx->mode_ == UNZIP) {",
          "329:     if (ctx->mode_ == DEFLATERAW || ctx->mode_ == INFLATERAW) {",
          "333:     switch (ctx->mode_) {",
          "337:         ctx->err_ = deflateInit2(&ctx->strm_,",
          "338:                                  ctx->level_,",
          "339:                                  Z_DEFLATED,",
          "340:                                  ctx->windowBits_,",
          "341:                                  ctx->memLevel_,",
          "342:                                  ctx->strategy_);",
          "348:         ctx->err_ = inflateInit2(&ctx->strm_, ctx->windowBits_);",
          "354:     if (ctx->err_ != Z_OK) {",
          "355:       ZCtx::Error(ctx, \"Init error\");",
          "356:     }",
          "359:     ctx->dictionary_ = reinterpret_cast<Bytef *>(dictionary);",
          "360:     ctx->dictionary_len_ = dictionary_len;",
          "364:   }",
          "366:   static void SetDictionary(ZCtx* ctx) {",
          "367:     if (ctx->dictionary_ == NULL) return;",
          "369:     ctx->err_ = Z_OK;",
          "371:     switch (ctx->mode_) {",
          "372:       case DEFLATE:",
          "373:       case DEFLATERAW:",
          "374:         ctx->err_ = deflateSetDictionary(&ctx->strm_,",
          "375:                                          ctx->dictionary_,",
          "376:                                          ctx->dictionary_len_);",
          "377:         break;",
          "378:       default:",
          "379:         break;",
          "380:     }",
          "382:     if (ctx->err_ != Z_OK) {",
          "383:       ZCtx::Error(ctx, \"Failed to set dictionary\");",
          "384:     }",
          "385:   }",
          "387:   static void Reset(ZCtx* ctx) {",
          "388:     ctx->err_ = Z_OK;",
          "390:     switch (ctx->mode_) {",
          "391:       case DEFLATE:",
          "392:       case DEFLATERAW:",
          "393:         ctx->err_ = deflateReset(&ctx->strm_);",
          "394:         break;",
          "395:       case INFLATE:",
          "396:       case INFLATERAW:",
          "397:         ctx->err_ = inflateReset(&ctx->strm_);",
          "398:         break;",
          "399:       default:",
          "400:         break;",
          "401:     }",
          "403:     if (ctx->err_ != Z_OK) {",
          "404:       ZCtx::Error(ctx, \"Failed to reset stream\");",
          "405:     }",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "283:   int memLevel_;",
          "284:   int strategy_;",
          "286:   int flush_;",
          "288:   int chunk_size_;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "418:   int err_;",
          "420:   Bytef* dictionary_;",
          "421:   size_t dictionary_len_;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "290:   bool write_in_progress_;",
          "292:   uv_work_t work_req_;",
          "293: };",
          "306: void InitZlib(Handle<Object> target) {",
          "307:   HandleScope scope;",
          "317:   callback_sym = NODE_PSYMBOL(\"callback\");",
          "319:   NODE_DEFINE_CONSTANT(target, Z_NO_FLUSH);",
          "320:   NODE_DEFINE_CONSTANT(target, Z_PARTIAL_FLUSH);",
          "",
          "[Removed Lines]",
          "296: #define NODE_ZLIB_CLASS(mode, name)   \\",
          "297:   { \\",
          "298:     Local<FunctionTemplate> z = FunctionTemplate::New(ZCtx<mode>::New); \\",
          "299:     z->InstanceTemplate()->SetInternalFieldCount(1); \\",
          "300:     NODE_SET_PROTOTYPE_METHOD(z, \"write\", ZCtx<mode>::Write); \\",
          "301:     NODE_SET_PROTOTYPE_METHOD(z, \"init\", ZCtx<mode>::Init); \\",
          "302:     z->SetClassName(String::NewSymbol(name)); \\",
          "303:     target->Set(String::NewSymbol(name), z->GetFunction()); \\",
          "304:   }",
          "309:   NODE_ZLIB_CLASS(INFLATE, \"Inflate\")",
          "310:   NODE_ZLIB_CLASS(DEFLATE, \"Deflate\")",
          "311:   NODE_ZLIB_CLASS(INFLATERAW, \"InflateRaw\")",
          "312:   NODE_ZLIB_CLASS(DEFLATERAW, \"DeflateRaw\")",
          "313:   NODE_ZLIB_CLASS(GZIP, \"Gzip\")",
          "314:   NODE_ZLIB_CLASS(GUNZIP, \"Gunzip\")",
          "315:   NODE_ZLIB_CLASS(UNZIP, \"Unzip\")",
          "",
          "[Added Lines]",
          "430:   node_zlib_mode mode_;",
          "437:   Local<FunctionTemplate> z = FunctionTemplate::New(ZCtx::New);",
          "439:   z->InstanceTemplate()->SetInternalFieldCount(1);",
          "441:   NODE_SET_PROTOTYPE_METHOD(z, \"write\", ZCtx::Write);",
          "442:   NODE_SET_PROTOTYPE_METHOD(z, \"init\", ZCtx::Init);",
          "443:   NODE_SET_PROTOTYPE_METHOD(z, \"reset\", ZCtx::Reset);",
          "445:   z->SetClassName(String::NewSymbol(\"Zlib\"));",
          "446:   target->Set(String::NewSymbol(\"Zlib\"), z->GetFunction());",
          "449:   onerror_sym = NODE_PSYMBOL(\"onerror\");",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "342:   NODE_DEFINE_CONSTANT(target, Z_DEFAULT_STRATEGY);",
          "343:   NODE_DEFINE_CONSTANT(target, ZLIB_VERNUM);",
          "345:   target->Set(String::NewSymbol(\"ZLIB_VERSION\"), String::New(ZLIB_VERSION));",
          "346: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "480:   NODE_DEFINE_CONSTANT(target, DEFLATE);",
          "481:   NODE_DEFINE_CONSTANT(target, INFLATE);",
          "482:   NODE_DEFINE_CONSTANT(target, GZIP);",
          "483:   NODE_DEFINE_CONSTANT(target, GUNZIP);",
          "484:   NODE_DEFINE_CONSTANT(target, DEFLATERAW);",
          "485:   NODE_DEFINE_CONSTANT(target, INFLATERAW);",
          "486:   NODE_DEFINE_CONSTANT(target, UNZIP);",
          "",
          "---------------"
        ],
        "test/simple/test-zlib-invalid-input.js||test/simple/test-zlib-invalid-input.js": [
          "File: test/simple/test-zlib-invalid-input.js -> test/simple/test-zlib-invalid-input.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "28: var nonStringInputs = [1, true, {a: 1}, ['a']];",
          "30: nonStringInputs.forEach(function(input) {",
          "35:       assert.ok(err);",
          "36:     });",
          "37:   });",
          "38: });",
          "",
          "[Removed Lines]",
          "32:   assert.doesNotThrow(function () {",
          "33:     zlib.gunzip(input, function (err, buffer) {",
          "",
          "[Added Lines]",
          "30: console.error('Doing the non-strings');",
          "33:   assert.doesNotThrow(function() {",
          "34:     zlib.gunzip(input, function(err, buffer) {",
          "41: console.error('Doing the unzips');",
          "43: var unzips = [ zlib.Unzip(),",
          "44:                zlib.Gunzip(),",
          "45:                zlib.Inflate(),",
          "46:                zlib.InflateRaw() ];",
          "47: var hadError = [];",
          "48: unzips.forEach(function (uz, i) {",
          "49:   console.error('Error for '+uz.constructor.name);",
          "50:   uz.on('error', function(er) {",
          "51:     console.error('Error event', er);",
          "52:     hadError[i] = true;",
          "58:     assert.equal(uz.write('also invalid'), true);",
          "59:     assert.equal(uz.end(), true);",
          "60:   });",
          "62:   uz.on('end', function(er) {",
          "63:     throw new Error('end event should not be emitted '+uz.constructor.name);",
          "64:   });",
          "67:   uz.write('this is not valid compressed data.');",
          "68: });",
          "70: process.on('exit', function() {",
          "71:   assert.deepEqual(hadError, [true, true, true, true], 'expect 4 errors');",
          "72: });",
          "",
          "---------------"
        ],
        "test/simple/test-zlib-random-byte-pipes.js||test/simple/test-zlib-random-byte-pipes.js": [
          "File: test/simple/test-zlib-random-byte-pipes.js -> test/simple/test-zlib-random-byte-pipes.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "22: var crypto = require('crypto');",
          "23: var stream = require('stream');",
          "24: var Stream = stream.Stream;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "",
          "---------------"
        ]
      }
    }
  ]
}