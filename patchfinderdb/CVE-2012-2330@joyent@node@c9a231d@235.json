{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "08a91acd76cd107dc2f3914f9ea7e277bb85206e",
      "candidate_info": {
        "commit_hash": "08a91acd76cd107dc2f3914f9ea7e277bb85206e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/08a91acd76cd107dc2f3914f9ea7e277bb85206e",
        "files": [
          "doc/api/http.markdown",
          "lib/http.js",
          "test/simple/test-http-connect.js"
        ],
        "message": "http: better support for CONNECT method.\n\nIntroduces 'connect' event on both client (http.ClientRequest) and\nserver (http.Server).\n\nRefs: #2259, #2474.\nFixes #1576.",
        "before_after_code_files": [
          "lib/http.js||lihttp.js",
          "test/simple/test-http-connect.js||test/simple/test-http-connect.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "96:     parser.incoming.upgrade = info.upgrade;",
          "100:     if (!info.upgrade) {",
          "104:     }",
          "107:   };",
          "109:   parser.onBody = function(b, start, len) {",
          "",
          "[Removed Lines]",
          "98:     var isHeadResponse = false;",
          "103:       isHeadResponse = parser.onIncoming(parser.incoming, info.shouldKeepAlive);",
          "106:     return isHeadResponse;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1072:                    new Buffer(options.auth).toString('base64'));",
          "1073:   }",
          "1076:     self.useChunkedEncodingByDefault = false;",
          "1077:   } else {",
          "1078:     self.useChunkedEncodingByDefault = true;",
          "",
          "[Removed Lines]",
          "1075:   if (method === 'GET' || method === 'HEAD') {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1174:         debug('parse error');",
          "1175:         socket.destroy(ret);",
          "1176:       } else if (parser.incoming && parser.incoming.upgrade) {",
          "1177:         var bytesParsed = ret;",
          "1181:         var res = parser.incoming;",
          "1182:         req.res = res;",
          "1190:           socket.emit('agentRemove');",
          "1191:         } else {",
          "1193:           socket.destroy();",
          "1194:         }",
          "1195:       }",
          "",
          "[Removed Lines]",
          "1178:         socket.ondata = null;",
          "1179:         socket.onend = null;",
          "1185:         var upgradeHead = d.slice(start + bytesParsed, end);",
          "1186:         if (req.listeners('upgrade').length) {",
          "1188:           req.upgraded = true;",
          "1189:           req.emit('upgrade', res, socket, upgradeHead);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1235:       }",
          "1236:       req.res = res;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1250:         return true;",
          "1251:       }",
          "",
          "[Removed Lines]",
          "1253:       if (req.shouldKeepAlive && res.headers.connection !== 'keep-alive' && !req.upgraded) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1401:   }",
          "1403:   debug('SERVER new http connection');",
          "1405:   httpSocketSetup(socket);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1424:       debug('parse error');",
          "1425:       socket.destroy(ret);",
          "1426:     } else if (parser.incoming && parser.incoming.upgrade) {",
          "1427:       var bytesParsed = ret;",
          "1428:       socket.ondata = null;",
          "1429:       socket.onend = null;",
          "1438:       } else {",
          "1440:         socket.destroy();",
          "1441:       }",
          "1442:     }",
          "",
          "[Removed Lines]",
          "1431:       var req = parser.incoming;",
          "1434:       var upgradeHead = d.slice(start + bytesParsed, end);",
          "1436:       if (self.listeners('upgrade').length) {",
          "1437:         self.emit('upgrade', req, req.socket, upgradeHead);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1463:     }",
          "1464:   };",
          "",
          "[Removed Lines]",
          "1466:   socket.addListener('close', function() {",
          "1467:     debug('server socket close');",
          "1469:     parsers.free(parser);",
          "1471:     abortIncoming();",
          "1472:   });",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-http-connect.js||test/simple/test-http-connect.js": [
          "File: test/simple/test-http-connect.js -> test/simple/test-http-connect.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "22: var common = require('../common');",
          "23: var assert = require('assert');",
          "24: var http = require('http');",
          "26: var serverGotConnect = false;",
          "27: var clientGotConnect = false;",
          "29: var server = http.createServer(function(req, res) {",
          "30:   assert(false);",
          "31: });",
          "32: server.on('connect', function(req, socket, firstBodyChunk) {",
          "33:   assert.equal(req.method, 'CONNECT');",
          "34:   assert.equal(req.url, 'google.com:443');",
          "35:   common.debug('Server got CONNECT request');",
          "36:   serverGotConnect = true;",
          "38:   socket.write('HTTP/1.1 200 Connection established\\r\\n\\r\\n');",
          "40:   var data = firstBodyChunk.toString();",
          "41:   socket.on('data', function(buf) {",
          "42:     data += buf.toString();",
          "43:   });",
          "44:   socket.on('end', function() {",
          "45:     socket.end(data);",
          "46:   });",
          "47: });",
          "48: server.listen(common.PORT, function() {",
          "49:   var req = http.request({",
          "50:     port: common.PORT,",
          "51:     method: 'CONNECT',",
          "52:     path: 'google.com:443'",
          "53:   }, function(res) {",
          "54:     assert(false);",
          "55:   });",
          "56:   req.on('connect', function(res, socket, firstBodyChunk) {",
          "57:     common.debug('Client got CONNECT request');",
          "58:     clientGotConnect = true;",
          "60:     var data = firstBodyChunk.toString();",
          "61:     socket.on('data', function(buf) {",
          "62:       data += buf.toString();",
          "63:     });",
          "64:     socket.on('end', function() {",
          "65:       assert.equal(data, 'HeadBody');",
          "66:       server.close();",
          "67:     });",
          "68:     socket.write('Body');",
          "69:     socket.end();",
          "70:   });",
          "75:   req.write('Head');",
          "76:   req.end();",
          "77: });",
          "79: process.on('exit', function() {",
          "80:   assert.ok(serverGotConnect);",
          "81:   assert.ok(clientGotConnect);",
          "84:   var name = 'localhost:' + common.PORT;",
          "85:   assert(!http.globalAgent.sockets.hasOwnProperty(name));",
          "86:   assert(!http.globalAgent.requests.hasOwnProperty(name));",
          "87: });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2c560c5405c3b5fba9e37fb0c3d722421f1447ec",
      "candidate_info": {
        "commit_hash": "2c560c5405c3b5fba9e37fb0c3d722421f1447ec",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/2c560c5405c3b5fba9e37fb0c3d722421f1447ec",
        "files": [
          "test/simple/test-isolates.js"
        ],
        "message": "Change isolate test to demo EIO bug",
        "before_after_code_files": [
          "test/simple/test-isolates.js||test/simple/test-isolates.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-isolates.js||test/simple/test-isolates.js": [
          "File: test/simple/test-isolates.js -> test/simple/test-isolates.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: var fs = require('fs');",
          "3: console.log(\"count: %d\", process._countIsolate());",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2: var http = require('http');",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "8:   console.error(\"master\");",
          "9:   fs.stat(__dirname, function(err, stat) {",
          "15:   });",
          "16:   console.log(\"thread 1 count: %d\", process._countIsolate());",
          "17: } else {",
          "18:   console.error(\"slave\");",
          "19:   fs.stat(__dirname, function(err, stat) {",
          "25:   });",
          "26:   console.error(\"thread 2 count: %d\", process._countIsolate());",
          "27: }",
          "",
          "[Removed Lines]",
          "10:     if (err) {",
          "11:       console.error(\"thread 1 error!\");",
          "12:       throw err;",
          "13:     }",
          "14:     console.error('thread 1', stat);",
          "20:     if (err) {",
          "21:       console.error(\"thread 2 error!\");",
          "22:       throw err;",
          "23:     }",
          "24:     console.error('thread 2', stat);",
          "",
          "[Added Lines]",
          "11:     if (err) throw err;",
          "12:     console.error('thread 1', stat.mtime);",
          "15:   setTimeout(function() {",
          "16:     fs.stat(__dirname, function(err, stat) {",
          "17:       if (err) throw err;",
          "18:       console.error('thread 1', stat.mtime);",
          "19:     });",
          "20:   }, 500);",
          "26:     if (err) throw err;",
          "27:     console.error('thread 2', stat.mtime);",
          "30:   setTimeout(function() {",
          "31:     fs.stat(__dirname, function(err, stat) {",
          "32:       if (err) throw err;",
          "33:       console.error('thread 2', stat.mtime);",
          "34:     });",
          "35:   }, 500);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "268476549eeef01e9876ca3f1c58af61be414d75",
      "candidate_info": {
        "commit_hash": "268476549eeef01e9876ca3f1c58af61be414d75",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/268476549eeef01e9876ca3f1c58af61be414d75",
        "files": [
          "src/node.cc",
          "src/node_isolate.cc",
          "src/node_isolate.h",
          "test/simple/test-isolates.js"
        ],
        "message": "Join all threads at end of main thread\n\nRequire reorganizing the isolates somewhat.\n\nAdd a very simple test.",
        "before_after_code_files": [
          "src/node.cc||src/node.cc",
          "src/node_isolate.cc||src/node_isolate.cc",
          "src/node_isolate.h||src/node_isolate.h",
          "test/simple/test-isolates.js||test/simple/test-isolates.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.cc||src/node.cc": [
          "File: src/node.cc -> src/node.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1849: }",
          "1891: static void RunIsolate(void* arg) {",
          "1897:   isolate->Dispose();",
          "1900:   delete isolate;",
          "1901: }",
          "",
          "[Removed Lines]",
          "1852: struct ThreadInfo {",
          "1853:   uv_thread_t thread_;",
          "1854:   char** argv_;",
          "1855:   int argc_;",
          "1857:   ThreadInfo(int argc, char** argv) {",
          "1858:     argc_ = argc;",
          "1859:     argv_ = new char*[argc_ + 1];",
          "1861:     for (int i = 0; i < argc_; ++i) {",
          "1862:       size_t size = 1 + strlen(argv[i]);",
          "1863:       argv_[i] = new char[size];",
          "1864:       memcpy(argv_[i], argv[i], size);",
          "1865:     }",
          "1866:     argv_[argc_] = NULL;",
          "1867:   }",
          "1869:   ThreadInfo(Handle<Array> args) {",
          "1870:     argc_ = args->Length();",
          "1871:     argv_ = new char*[argc_ + 1];",
          "1873:     for (int i = 0; i < argc_; ++i) {",
          "1874:       String::Utf8Value str(args->Get(i));",
          "1875:       size_t size = 1 + strlen(*str);",
          "1876:       argv_[i] = new char[size];",
          "1877:       memcpy(argv_[i], *str, size);",
          "1878:     }",
          "1879:     argv_[argc_] = NULL;",
          "1880:   }",
          "1882:   ~ThreadInfo() {",
          "1883:     for (int i = 0; i < argc_; ++i) {",
          "1884:       delete[] argv_[i];",
          "1885:     }",
          "1886:     delete argv_;",
          "1887:   }",
          "1888: };",
          "1892:   ThreadInfo* ti = reinterpret_cast<ThreadInfo*>(arg);",
          "1894:   Isolate* isolate = Isolate::New();",
          "1896:   StartThread(isolate, ti->argc_, ti->argv_);",
          "1899:   delete ti;",
          "",
          "[Added Lines]",
          "1853:   node::Isolate* isolate = reinterpret_cast<node::Isolate*>(arg);",
          "1854:   isolate->Enter();",
          "1855:   StartThread(isolate, isolate->argc_, isolate->argv_);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1912:   Local<Array> argv = args[0].As<Array>();",
          "1913:   assert(argv->Length() >= 2);",
          "1919:     return Null();",
          "1920:   }",
          "",
          "[Removed Lines]",
          "1915:   ThreadInfo* ti = new ThreadInfo(argv);",
          "1917:   if (uv_thread_create(&ti->thread_, RunIsolate, ti)) {",
          "1918:     delete ti;",
          "",
          "[Added Lines]",
          "1874:   Isolate* isolate = new node::Isolate();",
          "1877:   isolate->argc_ = argv->Length();",
          "1878:   isolate->argv_ = new char*[isolate->argc_ + 1];",
          "1879:   for (int i = 0; i < isolate->argc_; ++i) {",
          "1880:     String::Utf8Value str(argv->Get(i));",
          "1881:     size_t size = 1 + strlen(*str);",
          "1882:     isolate->argv_[i] = new char[size];",
          "1883:     memcpy(isolate->argv_[i], *str, size);",
          "1884:   }",
          "1885:   isolate->argv_[isolate->argc_] = NULL;",
          "1887:   if (uv_thread_create(&isolate->tid_, RunIsolate, isolate)) {",
          "1888:     delete isolate;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1925:   Local<Object> obj = tpl->NewInstance();",
          "1926:   obj->SetPointerInInternalField(0, magic_isolate_cookie_);",
          "1929:   return scope.Close(obj);",
          "1930: }",
          "",
          "[Removed Lines]",
          "1927:   obj->SetPointerInInternalField(1, ti);",
          "",
          "[Added Lines]",
          "1897:   obj->SetPointerInInternalField(1, isolate);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1945:   assert(obj->InternalFieldCount() == 2);",
          "1946:   assert(obj->GetPointerFromInternalField(0) == magic_isolate_cookie_);",
          "1949:       obj->GetPointerFromInternalField(1));",
          "1952:     return False(); // error",
          "1953:   else",
          "1954:     return True();  // ok",
          "",
          "[Removed Lines]",
          "1948:   ThreadInfo* ti = reinterpret_cast<ThreadInfo*>(",
          "1951:   if (uv_thread_join(&ti->thread_))",
          "",
          "[Added Lines]",
          "1918:   Isolate* ti = reinterpret_cast<Isolate*>(",
          "1921:   if (uv_thread_join(&ti->tid_))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2700:                  char** argv) {",
          "2701:   HandleScope scope;",
          "2706:   uv_loop_t* loop = isolate->GetLoop();",
          "2707:   uv_prepare_init(loop, &prepare_tick_watcher);",
          "",
          "[Removed Lines]",
          "2703:   v8::Isolate::Scope isolate_scope(isolate->GetV8Isolate());",
          "2704:   v8::Context::Scope context_scope(isolate->GetV8Context());",
          "",
          "[Added Lines]",
          "2673:   assert(node::Isolate::GetCurrent() == isolate);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2787:   v8::V8::Initialize();",
          "2788:   v8::HandleScope handle_scope;",
          "2791:   node::Isolate::Initialize();",
          "2793:   StartThread(isolate, argc, argv);",
          "2794:   isolate->Dispose();",
          "2796: #ifndef NDEBUG",
          "2798:   V8::Dispose();",
          "",
          "[Removed Lines]",
          "2792:   Isolate* isolate = node::Isolate::New();",
          "",
          "[Added Lines]",
          "2760:   uv_thread_t tid = uv_thread_self();",
          "2764:   Isolate* isolate = new node::Isolate();",
          "2765:   isolate->tid_ = tid;",
          "2766:   isolate->Enter();",
          "2772:   node::Isolate::JoinAll();",
          "",
          "---------------"
        ],
        "src/node_isolate.cc||src/node_isolate.cc": [
          "File: src/node_isolate.cc -> src/node_isolate.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "46: }",
          "51: }",
          "56: }",
          "",
          "[Removed Lines]",
          "49: Isolate* Isolate::New() {",
          "50:   return new Isolate();",
          "54: int Isolate::Count() {",
          "55:   return isolate_count;",
          "",
          "[Added Lines]",
          "49: int Isolate::Count() {",
          "50:   return isolate_count;",
          "54: void Isolate::JoinAll() {",
          "55:   uv_mutex_lock(&list_lock);",
          "57:   while (ngx_queue_empty(&list_head) == false) {",
          "58:     ngx_queue_t* q = ngx_queue_head(&list_head);",
          "59:     assert(q);",
          "60:     Isolate* isolate = ngx_queue_data(q, Isolate, list_member_);",
          "61:     assert(isolate);",
          "64:     uv_mutex_unlock(&list_lock);",
          "66:     uv_thread_join(&isolate->tid_);",
          "69:     uv_mutex_lock(&list_lock);",
          "70:   }",
          "73:   uv_mutex_unlock(&list_lock);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "80:   uv_mutex_unlock(&list_lock);",
          "88:   assert(v8_isolate_->GetData() == NULL);",
          "89:   v8_isolate_->SetData(this);",
          "95: }",
          "",
          "[Removed Lines]",
          "82:   v8_isolate_ = v8::Isolate::GetCurrent();",
          "83:   if (v8_isolate_ == NULL) {",
          "84:     v8_isolate_ = v8::Isolate::New();",
          "85:     v8_isolate_->Enter();",
          "86:   }",
          "91:   v8_context_ = v8::Context::New();",
          "92:   v8_context_->Enter();",
          "94:   globals_init(&globals_);",
          "",
          "[Added Lines]",
          "100:   v8_isolate_ = v8::Isolate::New();",
          "104:   globals_init_ = false;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112: }",
          "115: void Isolate::Dispose() {",
          "116:   uv_mutex_lock(&list_lock);",
          "118:   struct AtExitCallbackInfo* it;",
          "119:   ngx_queue_t* q;",
          "130:   assert(v8_context_->InContext());",
          "131:   v8_context_->Exit();",
          "",
          "[Removed Lines]",
          "121:   NODE_ISOLATE_CHECK(this);",
          "123:   ngx_queue_foreach(q, &at_exit_callbacks_) {",
          "124:     it = ngx_queue_data(q, struct AtExitCallbackInfo, at_exit_callbacks_);",
          "125:     it->callback_(it->arg_);",
          "126:     delete it;",
          "127:   }",
          "128:   ngx_queue_init(&at_exit_callbacks_);",
          "",
          "[Added Lines]",
          "125: void Isolate::Enter() {",
          "126:   v8_isolate_->Enter();",
          "128:   if (v8_context_.IsEmpty()) {",
          "129:     v8_context_ = v8::Context::New();",
          "130:   }",
          "131:   v8_context_->Enter();",
          "133:   if (!globals_init_) {",
          "134:     globals_init_ = true;",
          "135:     globals_init(&globals_);",
          "136:   }",
          "138:   NODE_ISOLATE_CHECK(this);",
          "139: }",
          "145:   NODE_ISOLATE_CHECK(this);",
          "",
          "---------------"
        ],
        "src/node_isolate.h||src/node_isolate.h": [
          "File: src/node_isolate.h -> src/node_isolate.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "44: class Isolate {",
          "45: public:",
          "47:   static void Initialize();",
          "48:   static int Count();",
          "50:   typedef void (*AtExitCallback)(void* arg);",
          "54:   static Isolate* GetCurrent() {",
          "55:     return reinterpret_cast<Isolate*>(v8::Isolate::GetCurrent()->GetData());",
          "",
          "[Removed Lines]",
          "52:   static Isolate* New();",
          "",
          "[Added Lines]",
          "46:   char** argv_;",
          "47:   int argc_;",
          "48:   uv_thread_t tid_;",
          "56:   static void JoinAll();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:   void AtExit(AtExitCallback callback, void *arg);",
          "81:   struct globals* Globals();",
          "83:   unsigned int id_;",
          "86:   Isolate();",
          "88:   struct AtExitCallbackInfo {",
          "89:     ngx_queue_t at_exit_callbacks_;",
          "90:     AtExitCallback callback_;",
          "",
          "[Removed Lines]",
          "79:   void Dispose();",
          "85: private:",
          "",
          "[Added Lines]",
          "89:   ~Isolate() {",
          "90:     if (argv_) {",
          "91:       delete argv_;",
          "92:     }",
          "93:   }",
          "95:   void Enter();",
          "98:   void Dispose();",
          "100: private:",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "103:   struct globals globals_;",
          "104: };",
          "106: } // namespace node",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "118:   bool globals_init_;",
          "",
          "---------------"
        ],
        "test/simple/test-isolates.js||test/simple/test-isolates.js": [
          "File: test/simple/test-isolates.js -> test/simple/test-isolates.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: console.log(\"count: %d\", process._countIsolate());",
          "3: if (process.tid === 1) {",
          "4:   var isolate = process._newIsolate(process.argv);",
          "6:   console.error(\"master\");",
          "7:   console.log(\"count: %d\", process._countIsolate());",
          "8: } else {",
          "9:   console.error(\"FUCK YEAH!\");",
          "10:   console.log(\"count: %d\", process._countIsolate());",
          "11: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0dcc43316fa2b90572affb1091f8e6246340fd9e",
      "candidate_info": {
        "commit_hash": "0dcc43316fa2b90572affb1091f8e6246340fd9e",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0dcc43316fa2b90572affb1091f8e6246340fd9e",
        "files": [
          "lib/net.js",
          "test/simple/test-net-write-after-close.js"
        ],
        "message": "don't crash when queued write fails",
        "before_after_code_files": [
          "lib/net.js||linet.js",
          "test/simple/test-net-write-after-close.js||test/simple/test-net-write-after-close.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/net.js||linet.js": [
          "File: lib/net.js -> linet.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   self._flags = 0;",
          "85:   self._connectQueueSize = 0;",
          "86:   self.destroyed = false;",
          "87:   self.bytesRead = 0;",
          "88:   self.bytesWritten = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "244:     var shutdownReq = this._handle.shutdown();",
          "246:     if (!shutdownReq) {",
          "248:       return false;",
          "249:     }",
          "",
          "[Removed Lines]",
          "247:       this.destroy(errnoException(errno, 'shutdown'));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "267:   }",
          "269:   if (self._flags & FLAG_GOT_EOF || !self.readable) {",
          "271:   } else {",
          "272:   }",
          "273: }",
          "",
          "[Removed Lines]",
          "270:     self.destroy();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "278:   this._flags |= FLAG_DESTROY_SOON;",
          "280:   if (this._pendingWriteReqs == 0) {",
          "282:   }",
          "283: };",
          "",
          "[Removed Lines]",
          "281:     this.destroy();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "290: };",
          "296:   var self = this;",
          "298:   self._connectQueueCleanUp();",
          "300:   debug('destroy');",
          "",
          "[Removed Lines]",
          "293: Socket.prototype.destroy = function(exception) {",
          "294:   if (this.destroyed) return;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "315:     this._handle = null;",
          "316:   }",
          "318:   process.nextTick(function() {",
          "320:     self.emit('close', exception ? true : false);",
          "321:   });",
          "",
          "[Removed Lines]",
          "319:     if (exception) self.emit('error', exception);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "324: };",
          "327: function onread(buffer, offset, length) {",
          "328:   var handle = this;",
          "329:   var self = handle.socket;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "367:     if (!self.allowHalfOpen) self.end();",
          "368:     if (self._events && self._events['end']) self.emit('end');",
          "",
          "[Removed Lines]",
          "365:     if (!self.writable) self.destroy();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "370:   } else {",
          "372:     if (errno == 'ECONNRESET') {",
          "374:     } else {",
          "376:     }",
          "377:   }",
          "378: }",
          "",
          "[Removed Lines]",
          "373:       self.destroy();",
          "375:       self.destroy(errnoException(errno, 'read'));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "450: Socket.prototype._write = function(data, encoding, cb) {",
          "451:   timers.active(this);",
          "456:   var writeReq = this._handle.write(data);",
          "458:   if (!writeReq) {",
          "460:     return false;",
          "461:   }",
          "",
          "[Removed Lines]",
          "453:   if (!this._handle) throw new Error('This socket is closed.');",
          "459:     this.destroy(errnoException(errno, 'write'));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "477:   }",
          "479:   if (status) {",
          "481:     return;",
          "482:   }",
          "",
          "[Removed Lines]",
          "480:     self.destroy(errnoException(errno, 'write'));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "494:   if (req.cb) req.cb();",
          "496:   if (self._pendingWriteReqs == 0 && self._flags & FLAG_DESTROY_SOON) {",
          "498:   }",
          "499: }",
          "",
          "[Removed Lines]",
          "497:     self.destroy();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "522:   if (connectReq !== null) {",
          "523:     connectReq.oncomplete = afterConnect;",
          "524:   } else {",
          "526:   }",
          "527: }",
          "",
          "[Removed Lines]",
          "525:     self.destroy(errnoException(errno, 'connect'));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "571:         process.nextTick(function() {",
          "572:           self.emit('error', err);",
          "574:         });",
          "575:       } else {",
          "576:         timers.active(self);",
          "",
          "[Removed Lines]",
          "573:           self.destroy();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "620:     if (self._connectQueue) {",
          "621:       debug('Drain the connect queue');",
          "624:       }",
          "625:       self._connectQueueCleanUp();",
          "626:     }",
          "",
          "[Removed Lines]",
          "622:       for (var i = 0; i < self._connectQueue.length; i++) {",
          "623:         self._write.apply(self, self._connectQueue[i]);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "634:     }",
          "635:   } else {",
          "636:     self._connectQueueCleanUp();",
          "638:   }",
          "639: }",
          "",
          "[Removed Lines]",
          "637:     self.destroy(errnoException(errno, 'connect'));",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-net-write-after-close.js||test/simple/test-net-write-after-close.js": [
          "File: test/simple/test-net-write-after-close.js -> test/simple/test-net-write-after-close.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "24: var net = require('net');",
          "26: var gotError = false;",
          "28: process.on('exit', function() {",
          "29:   assert(gotError);",
          "30: });",
          "32: var server = net.createServer(function(socket) {",
          "40:     server.close();",
          "41:     gotError = true;",
          "42:   }, 250);",
          "43: });",
          "",
          "[Removed Lines]",
          "33:   setTimeout(function() {",
          "34:     assert.throws(",
          "35:       function() {",
          "36:         socket.write('test');",
          "37:       },",
          "38:       /This socket is closed/",
          "39:     );",
          "",
          "[Added Lines]",
          "27: var gotWriteCB = false;",
          "31:   assert(gotWriteCB);",
          "35:   socket.on('error', function(error) {",
          "38:   });",
          "40:   setTimeout(function() {",
          "41:     socket.write('test', function(e) {",
          "42:       gotWriteCB = true;",
          "43:     });",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e67a0f80e0184e2884fdf5c1c44a9b4df601d325",
      "candidate_info": {
        "commit_hash": "e67a0f80e0184e2884fdf5c1c44a9b4df601d325",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/e67a0f80e0184e2884fdf5c1c44a9b4df601d325",
        "files": [
          "lib/readline.js"
        ],
        "message": "readline: _normalWrite() doesn't take a key modifier arg",
        "before_after_code_files": [
          "lib/readline.js||lireadline.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/readline.js||lireadline.js": [
          "File: lib/readline.js -> lireadline.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "268: Interface.prototype.write = function(d, key) {",
          "269:   if (this.paused) this.resume();",
          "271: };",
          "273: Interface.prototype._normalWrite = function(b) {",
          "",
          "[Removed Lines]",
          "270:   this.terminal ? this._ttyWrite(d, key) : this._normalWrite(d, key);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}