{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "55c21970fd7c180ebcaa4da2f9894bc76f7ca7bb",
      "candidate_info": {
        "commit_hash": "55c21970fd7c180ebcaa4da2f9894bc76f7ca7bb",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/55c21970fd7c180ebcaa4da2f9894bc76f7ca7bb",
        "files": [
          "common.gypi"
        ],
        "message": "build: compile without -fvisibility=hidden\n\nFixes symbol lookup errors when loading an addon module on Linux.",
        "before_after_code_files": [
          "common.gypi||common.gypi"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "common.gypi||common.gypi": [
          "File: common.gypi -> common.gypi",
          "--- Hunk 1 ---",
          "[Context before]",
          "127:           }],",
          "128:           [ 'OS==\"linux\"', {",
          "129:             'cflags': [ '-ansi' ],",
          "133:           }],",
          "134:         ],",
          "135:       }],",
          "",
          "[Removed Lines]",
          "130:           }],",
          "131:           [ 'visibility==\"hidden\"', {",
          "132:             'cflags': [ '-fvisibility=hidden' ],",
          "",
          "[Added Lines]",
          "130:             'ldflags': [ '-rdynamic' ],",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8a9e8d60d2ef1ca434fee2a4e2fdfc77813f83c1",
      "candidate_info": {
        "commit_hash": "8a9e8d60d2ef1ca434fee2a4e2fdfc77813f83c1",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8a9e8d60d2ef1ca434fee2a4e2fdfc77813f83c1",
        "files": [
          "lib/readline.js"
        ],
        "message": "readline: don't use Function#call()\n\nIt wasn't necessary.",
        "before_after_code_files": [
          "lib/readline.js||lireadline.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/readline.js||lireadline.js": [
          "File: lib/readline.js -> lireadline.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:         for (var i = 0, compLen = completions.length; i < compLen; i++) {",
          "351:           c = completions[i];",
          "352:           if (c === '') {",
          "354:             group = [];",
          "355:           } else {",
          "356:             group.push(c);",
          "357:           }",
          "358:         }",
          "",
          "[Removed Lines]",
          "353:             handleGroup.call(self, group, width, maxColumns);",
          "359:         handleGroup.call(self, group, width, maxColumns);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "373: };",
          "378:   if (group.length == 0) {",
          "379:     return;",
          "380:   }",
          "",
          "[Removed Lines]",
          "376: function handleGroup(group, width, maxColumns) {",
          "377:   var self = this;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "279e7e7341dcbc9e3464ffaa0e41f3c8c1eb465a",
      "candidate_info": {
        "commit_hash": "279e7e7341dcbc9e3464ffaa0e41f3c8c1eb465a",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/279e7e7341dcbc9e3464ffaa0e41f3c8c1eb465a",
        "files": [
          "doc/api/fs.markdown",
          "lib/fs.js",
          "test/simple/test-fs-open-flags.js"
        ],
        "message": "fs: add O_EXCL support, exclusive open file",
        "before_after_code_files": [
          "lib/fs.js||lifs.js",
          "test/simple/test-fs-open-flags.js||test/simple/test-fs-open-flags.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/fs.js||lifs.js": [
          "File: lib/fs.js -> lifs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: var kMinPoolSpace = 128;",
          "38: var kPoolSize = 40 * 1024;",
          "40: fs.Stats = binding.Stats;",
          "42: fs.Stats.prototype._checkModeProperty = function(property) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:   if (typeof flag !== 'string') {",
          "179:     return flag;",
          "180:   }",
          "202:   }",
          "203: }",
          "",
          "[Removed Lines]",
          "181:   switch (flag) {",
          "182:     case 'r':",
          "183:       return constants.O_RDONLY;",
          "185:     case 'r+':",
          "186:       return constants.O_RDWR;",
          "188:     case 'w':",
          "189:       return constants.O_CREAT | constants.O_TRUNC | constants.O_WRONLY;",
          "191:     case 'w+':",
          "192:       return constants.O_CREAT | constants.O_TRUNC | constants.O_RDWR;",
          "194:     case 'a':",
          "195:       return constants.O_APPEND | constants.O_CREAT | constants.O_WRONLY;",
          "197:     case 'a+':",
          "198:       return constants.O_APPEND | constants.O_CREAT | constants.O_RDWR;",
          "200:     default:",
          "201:       throw new Error('Unknown file open flag: ' + flag);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/simple/test-fs-open-flags.js||test/simple/test-fs-open-flags.js": [
          "File: test/simple/test-fs-open-flags.js -> test/simple/test-fs-open-flags.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: assert.equal(fs._stringToFlags('a'),  O_APPEND|O_CREAT|O_WRONLY);",
          "46: assert.equal(fs._stringToFlags('a+'), O_APPEND|O_CREAT|O_RDWR);",
          "49:   assert.throws(function() { fs._stringToFlags(flags); });",
          "50: });",
          "",
          "[Removed Lines]",
          "48: '+ +a +r +w rw wa war raw r++ a++ w++'.split(' ').forEach(function(flags) {",
          "",
          "[Added Lines]",
          "48: assert.equal(fs._stringToFlags('wx'),  O_TRUNC|O_CREAT|O_WRONLY|O_EXCL);",
          "49: assert.equal(fs._stringToFlags('xw'),  O_TRUNC|O_CREAT|O_WRONLY|O_EXCL);",
          "50: assert.equal(fs._stringToFlags('wx+'), O_TRUNC|O_CREAT|O_RDWR|O_EXCL);",
          "51: assert.equal(fs._stringToFlags('xw+'), O_TRUNC|O_CREAT|O_RDWR|O_EXCL);",
          "52: assert.equal(fs._stringToFlags('ax'),  O_APPEND|O_CREAT|O_WRONLY|O_EXCL);",
          "53: assert.equal(fs._stringToFlags('xa'),  O_APPEND|O_CREAT|O_WRONLY|O_EXCL);",
          "54: assert.equal(fs._stringToFlags('ax+'), O_APPEND|O_CREAT|O_RDWR|O_EXCL);",
          "55: assert.equal(fs._stringToFlags('xa+'), O_APPEND|O_CREAT|O_RDWR|O_EXCL);",
          "57: ('+ +a +r +w rw wa war raw r++ a++ w++' +",
          "58:  'x +x x+ rx rx+ wxx wax xwx xxx').split(' ').forEach(function(flags) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "8ccb3cbdbaa7302f9f1745b3878e604f8edaa073",
      "candidate_info": {
        "commit_hash": "8ccb3cbdbaa7302f9f1745b3878e604f8edaa073",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/8ccb3cbdbaa7302f9f1745b3878e604f8edaa073",
        "files": [
          "test/simple/test-domain-implicit-fs.js"
        ],
        "message": "test-domain-implicit-fs: make it pass on windows\n\nThe error message is slightly different on windows. However there was no\nneed to verify the exact error message - there are assert()s that check\nall the properties of the error object.",
        "before_after_code_files": [
          "test/simple/test-domain-implicit-fs.js||test/simple/test-domain-implicit-fs.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-domain-implicit-fs.js||test/simple/test-domain-implicit-fs.js": [
          "File: test/simple/test-domain-implicit-fs.js -> test/simple/test-domain-implicit-fs.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "35: d.on('error', function(er) {",
          "36:   console.error('caught', er);",
          "52:   caught++;",
          "53: });",
          "",
          "[Removed Lines]",
          "37:   switch (er.message) {",
          "38:     case \"ENOENT, open 'this file does not exist'\":",
          "39:       assert.equal(er.domain, d);",
          "40:       assert.equal(er.domain_thrown, true);",
          "41:       assert.ok(!er.domain_emitter);",
          "42:       assert.equal(er.code, 'ENOENT');",
          "43:       assert.equal(er.path, 'this file does not exist');",
          "44:       assert.equal(typeof er.errno, 'number');",
          "45:       break;",
          "47:     default:",
          "48:       console.error('unexpected error, throwing %j', er.message);",
          "49:       throw er;",
          "50:   }",
          "",
          "[Added Lines]",
          "38:   assert.strictEqual(er.domain, d);",
          "39:   assert.strictEqual(er.domain_thrown, true);",
          "40:   assert.ok(!er.domain_emitter);",
          "41:   assert.strictEqual(er.code, 'ENOENT');",
          "42:   assert.ok(/\\bthis file does not exist\\b/i.test(er.path));",
          "43:   assert.strictEqual(typeof er.errno, 'number');",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "1a49df5fa94364ea133ef719b33263f90d113757",
      "candidate_info": {
        "commit_hash": "1a49df5fa94364ea133ef719b33263f90d113757",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/1a49df5fa94364ea133ef719b33263f90d113757",
        "files": [
          "src/node_http_parser.cc"
        ],
        "message": "http: root JS objects in HandleScope with Local<>",
        "before_after_code_files": [
          "src/node_http_parser.cc||src/node_http_parser.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [
            "src/node_http_parser.cc||src/node_http_parser.cc"
          ],
          "candidate": [
            "src/node_http_parser.cc||src/node_http_parser.cc"
          ]
        }
      },
      "candidate_diff": {
        "src/node_http_parser.cc||src/node_http_parser.cc": [
          "File: src/node_http_parser.cc -> src/node_http_parser.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "166:   }",
          "170:     if (str_)",
          "171:       return String::New(str_, size_);",
          "172:     else",
          "",
          "[Removed Lines]",
          "169:   Handle<String> ToString() const {",
          "",
          "[Added Lines]",
          "169:   Local<String> ToString() const {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "302:     if (!cb->IsFunction())",
          "303:       return 0;",
          "307:       Integer::New(at - current_buffer_data),",
          "308:       Integer::New(length)",
          "",
          "[Removed Lines]",
          "305:     Handle<Value> argv[3] = {",
          "",
          "[Added Lines]",
          "305:     Local<Value> argv[3] = {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "514:     if (!cb->IsFunction())",
          "515:       return;",
          "518:       CreateHeaders(),",
          "519:       url_.ToString()",
          "520:     };",
          "",
          "[Removed Lines]",
          "517:     Handle<Value> argv[2] = {",
          "",
          "[Added Lines]",
          "517:     Local<Value> argv[2] = {",
          "",
          "---------------"
        ]
      }
    }
  ]
}