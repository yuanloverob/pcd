{
  "cve_id": "CVE-2019-20218",
  "cve_desc": "selectExpander in select.c in SQLite 3.30.1 proceeds with WITH stack unwinding even after a parsing error.",
  "repo": "sqlite/sqlite",
  "patch_hash": "a6c1a71cde082e09750465d5675699062922e387",
  "patch_info": {
    "commit_hash": "a6c1a71cde082e09750465d5675699062922e387",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/a6c1a71cde082e09750465d5675699062922e387",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c",
      "test/altertab3.test"
    ],
    "message": "Do not attempt to unwind the WITH stack in the Parse object following an error. This fixes a separate case to [de6e6d68].\n\nFossilOrigin-Name: d29edef93451cc67a5d69c1cce1b1832d9ca8fff1f600afdd51338b74d077b92",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c",
      "test/altertab3.test||test/altertab3.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 597896ed0ae9e2960a8f39576bd7f77a11dccc1da84b6a44ebb5c38d90ebc330",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "4982:     return WRC_Abort;",
      "4983:   }",
      "",
      "[Removed Lines]",
      "4981:   if( db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "[Added Lines]",
      "4981:   if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){",
      "",
      "---------------"
    ],
    "test/altertab3.test||test/altertab3.test": [
      "File: test/altertab3.test -> test/altertab3.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "531:   ALTER TABLE t1 RENAME TO t1x;",
      "532: } {1 {error in trigger r1: no such table: main.t2}}",
      "534: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "534: #------------------------------------------------------------------------",
      "535: #",
      "536: reset_db",
      "537: do_execsql_test 23.1 {",
      "538:   CREATE TABLE v0 (a);",
      "539:   CREATE VIEW v2 (v3) AS",
      "540:     WITH x1 AS (SELECT * FROM v2)",
      "541:     SELECT v3 AS x, v3 AS y FROM v2;",
      "542: }",
      "544: do_catchsql_test 23.2 {",
      "545:   SELECT * FROM v2",
      "546: } {1 {view v2 is circularly defined}}",
      "548: db close",
      "549: sqlite3 db test.db",
      "551: do_catchsql_test 23.3 {",
      "552:   ALTER TABLE v0 RENAME TO t3 ;",
      "553: } {1 {error in view v2: view v2 is circularly defined}}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "35a38e0836e64f9df6ab487a6844724e94fadce3",
      "candidate_info": {
        "commit_hash": "35a38e0836e64f9df6ab487a6844724e94fadce3",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/35a38e0836e64f9df6ab487a6844724e94fadce3",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c"
        ],
        "message": "Fix a harmless compiler warning.\n\nFossilOrigin-Name: 63c67a54b4d3e501f3059dcdfc6bb50c6b8dad63a34eb773e4408d9e4e780d7a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 83c2adffbfb6dcdddb38ad9f888647b0e39fa24dc0bff344238e1f75a6c7d2ed",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c"
        ]
      }
    },
    {
      "candidate_hash": "879f1a1ea6fa4a18219e5c3270f036be26409f6d",
      "candidate_info": {
        "commit_hash": "879f1a1ea6fa4a18219e5c3270f036be26409f6d",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/879f1a1ea6fa4a18219e5c3270f036be26409f6d",
        "files": [
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid",
          "src/pager.c"
        ],
        "message": "Fix a bad interaction between RBU and [df51ae19].\n\nFossilOrigin-Name: 0b9d8a1202c4220fd2ef299b6194533c1bf4018a0cd2d13da7e22c1a7de05ffa",
        "before_after_code_files": [
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid",
          "src/pager.c||src/pager.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4959:   }else{",
          "4960:     while( *z==0 ) z++;",
          "4961:   }",
          "4963:   return z;",
          "4964: }",
          "",
          "[Removed Lines]",
          "4962:   z += (n + 8 + 1);",
          "",
          "[Added Lines]",
          "4962:   z += (n + 8 + 2);",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a1ba9a37d7a68a6d31f8197c6350589ebe6a12f4e3c193a178dd7ead8bcd565a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4813:       z += strlen(z)+1;",
          "4814:       nUri++;",
          "4815:     }",
          "4817:     assert( nUriByte>=1 );",
          "4818:     if( rc==SQLITE_OK && nPathname+8>pVfs->mxPathname ){",
          "",
          "[Removed Lines]",
          "4816:     nUriByte = (int)(&z[2] - zUri);",
          "",
          "[Added Lines]",
          "4816:     nUriByte = (int)(&z[1] - zUri);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a8614259c17898e60a8f8da73d14bc404c0ebded",
      "candidate_info": {
        "commit_hash": "a8614259c17898e60a8f8da73d14bc404c0ebded",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a8614259c17898e60a8f8da73d14bc404c0ebded",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/index_usage.c"
        ],
        "message": "Add the --progress, --using, and -q options to the index_usage utility program.\n\nFossilOrigin-Name: a5e6be7cbc5d931308ddcc073c9cd6275c9711cae055d72a7c4aa71c1d15914c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/index_usage.c||tool/index_usage.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 19c739b4a8a43d894e37a99fa34838f3e3fa1fe0d019aefbc33f1d38d76af1a4",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/index_usage.c||tool/index_usage.c": [
          "File: tool/index_usage.c -> tool/index_usage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "21: #include <string.h>",
          "23: static void usage(const char *argv0){",
          "25:   printf(",
          "26:     \"DATABASE is an SQLite database against which various statements\\n\"",
          "27:     \"have been run.  The SQL text is stored in LOG.  LOG is an SQLite\\n\"",
          "",
          "[Removed Lines]",
          "24:   printf(\"Usage: %s DATABASE LOG\\n\\n\", argv0);",
          "",
          "[Added Lines]",
          "24:   printf(\"Usage: %s [OPTIONS] DATABASE LOG\\n\\n\", argv0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "36:     \"DATABASE only needs to contain the schema used by the statements in\\n\"",
          "37:     \"LOG. The content can be removed from DATABASE.\\n\"",
          "38:   );",
          "39:   printf(\"\\nAnalysis will be done by SQLite version %s dated %.20s\\n\"",
          "40:          \"checkin number %.40s. Different versions\\n\"",
          "41:          \"of SQLite might use different indexes.\\n\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "39:   printf(",
          "40:     \"\\nOPTIONS:\\n\\n\"",
          "41:     \"    --progress N   Show a progress message after every N input rows\\n\"",
          "42:     \"    -q             Omit error message when parsing log entries\\n\"",
          "43:     \"    --using NAME   Print SQL statements that use index NAME\\n\"",
          "44:   );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "49:   char *zSql;",
          "50:   int nErr = 0;",
          "51:   int rc;",
          "53:   if( argc!=3 ) usage(argv[0]);",
          "54:   rc = sqlite3_open_v2(argv[1], &db, SQLITE_OPEN_READONLY, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "58:   int bQuiet = 0;",
          "59:   int i, j;",
          "60:   const char *zUsing = 0;",
          "61:   sqlite3_stmt *pIncrCnt = 0;",
          "62:   int nRow = 0;",
          "63:   int iProgress = 0;",
          "65:   for(i=j=1; i<argc; i++){",
          "66:     const char *z = argv[i];",
          "67:     if( z[0]=='-' ){",
          "68:       z++;",
          "69:       if( z[0]=='-' ) z++;",
          "70:       if( strcmp(z,\"progress\")==0 ){",
          "71:         if( i+1<argc ){",
          "72:           iProgress = strtol(argv[++i],0,0);",
          "73:           continue;",
          "74:         }",
          "75:         printf(\"The --progress option requires an argument\\n\");",
          "76:         exit(0);",
          "77:       }",
          "78:       if( strcmp(z,\"q\")==0 ){",
          "79:         bQuiet = 1;",
          "80:         continue;",
          "81:       }",
          "82:       if( strcmp(z,\"using\")==0 ){",
          "83:         if( i+1<argc ){",
          "84:           zUsing = argv[++i];",
          "85:           continue;",
          "86:         }",
          "87:         printf(\"The --using option requires an argument\\n\");",
          "88:         exit(0);",
          "89:       }",
          "90:       if( strcmp(z, \"help\")==0 || strcmp(z, \"?\")==0 ){",
          "91:         usage(argv[0]);",
          "92:       }",
          "93:       printf(\"Unknown command-line option: \\\"%s\\\"\\n\", argv[i]);",
          "94:       exit(0);",
          "95:     }else{",
          "96:       if( j<i ) argv[j++] = argv[i];",
          "97:     }",
          "98:   }",
          "99:   argc = j;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "66:   pStmt = 0;",
          "67:   rc = sqlite3_exec(db,",
          "68:      \"CREATE TABLE temp.idxu(\\n\"",
          "71:      \"  cnt INT,\\n\"",
          "72:      \"  PRIMARY KEY(idx)\\n\"",
          "73:      \") WITHOUT ROWID;\", 0, 0, 0);",
          "",
          "[Removed Lines]",
          "69:      \"  tbl TEXT,\\n\"",
          "70:      \"  idx TEXT,\\n\"",
          "",
          "[Added Lines]",
          "117:      \"  tbl TEXT COLLATE nocase,\\n\"",
          "118:      \"  idx TEXT COLLATE nocase,\\n\"",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "100:     goto errorOut;",
          "101:   }",
          "104:   while( sqlite3_step(pStmt)==SQLITE_ROW ){",
          "105:     const char *zLog = (const char*)sqlite3_column_text(pStmt, 0);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "151:   rc = sqlite3_prepare_v2(db,",
          "152:     \"UPDATE temp.idxu SET cnt=cnt+1 WHERE idx=?1\",",
          "153:     -1, &pIncrCnt, 0);",
          "154:   if( rc ){",
          "155:     printf(\"Cannot prepare a statement to increment a counter for \"",
          "156:            \"indexes used\\n\");",
          "157:     goto errorOut;",
          "158:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "109:     rc = sqlite3_prepare_v2(db, zSql, -1, &pS2, 0);",
          "110:     sqlite3_free(zSql);",
          "111:     if( rc ){",
          "113:              sqlite3_column_int(pStmt, 1), zLog, sqlite3_errmsg(db));",
          "114:       nErr++;",
          "115:     }else{",
          "116:       while( sqlite3_step(pS2)==SQLITE_ROW ){",
          "117:         const char *zExplain = (const char*)sqlite3_column_text(pS2,3);",
          "118:         const char *z1, *z2;",
          "",
          "[Removed Lines]",
          "112:       printf(\"Cannot compile LOG entry %d (%s): %s\\n\",",
          "",
          "[Added Lines]",
          "169:       if( !bQuiet ){",
          "170:         printf(\"Cannot compile LOG entry %d (%s): %s\\n\",",
          "172:         fflush(stdout);",
          "173:       }",
          "176:       nRow++;",
          "177:       if( iProgress>0 && (nRow%iProgress)==0 ){",
          "178:         printf(\"%d...\\n\", nRow);",
          "179:         fflush(stdout);",
          "180:       }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "123:         z1 += 13;",
          "124:         for(z2=z1+1; z2[1] && z2[1]!='('; z2++){}",
          "125:         n = z2 - z1;",
          "132:       }",
          "133:     }",
          "134:     sqlite3_finalize(pS2);",
          "",
          "[Removed Lines]",
          "126:         zSql = sqlite3_mprintf(",
          "127:           \"UPDATE temp.idxu SET cnt=cnt+1 WHERE idx='%.*q'\", n, z1",
          "128:         );",
          "130:         sqlite3_exec(db, zSql, 0, 0, 0);",
          "131:         sqlite3_free(zSql);",
          "",
          "[Added Lines]",
          "191:         if( zUsing && sqlite3_strnicmp(zUsing, z1, n)==0 ){",
          "192:           printf(\"Using %s:\\n%s\\n\", zUsing, zLog);",
          "193:           fflush(stdout);",
          "194:         }",
          "195:         sqlite3_bind_text(pIncrCnt,1,z1,n,SQLITE_STATIC);",
          "196:         sqlite3_step(pIncrCnt);",
          "197:         sqlite3_reset(pIncrCnt);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "160:   pStmt = 0;",
          "162: errorOut:",
          "163:   sqlite3_finalize(pStmt);",
          "164:   sqlite3_close(db);",
          "165:   return nErr;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "229:   sqlite3_finalize(pIncrCnt);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0086e078656bbdfebffdbea67f3f0131aa677b08",
      "candidate_info": {
        "commit_hash": "0086e078656bbdfebffdbea67f3f0131aa677b08",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0086e078656bbdfebffdbea67f3f0131aa677b08",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/wherecode.c"
        ],
        "message": "Simplification of the WHERE loop code generator for NULLS LAST saves a few CPU cycles and about a hundred bytes of code space.\n\nFossilOrigin-Name: e3ed2f496f51234a8f81d90d47ba603b06dbed38b8bd8f1934294379cde74d3a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/wherecode.c||src/wherecode.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: bf875e1a259a4167694e06349458452dc36c1d38aa6843518d9ae46ce74e5559",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/wherecode.c||src/wherecode.c": [
          "File: src/wherecode.c -> src/wherecode.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1671:       }",
          "1672:       bSeekPastNull = 0;",
          "1673:     }else if( bSeekPastNull ){",
          "1676:       startEq = 0;",
          "1677:       start_constraints = 1;",
          "1678:     }else if( regBignull ){",
          "1679:       sqlite3VdbeAddOp2(v, OP_Null, 0, regBase+nEq);",
          "1680:       start_constraints = 1;",
          "",
          "[Removed Lines]",
          "1674:       sqlite3VdbeAddOp2(v, OP_Null, 0, regBase+nEq);",
          "1675:       nConstraint++;",
          "",
          "[Added Lines]",
          "1675:       sqlite3VdbeAddOp2(v, OP_Null, 0, regBase+nEq);",
          "1677:       nConstraint++;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1705:       VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1706:       VdbeCoverageIf(v, op==OP_SeekLT);  testcase( op==OP_SeekLT );",
          "1708:       if( regBignull ){",
          "1709:         sqlite3VdbeAddOp2(v, OP_Goto, 0, sqlite3VdbeCurrentAddr(v)+2);",
          "1732:       }",
          "1733:     }",
          "",
          "[Removed Lines]",
          "1710:         if( bStopAtNull ){",
          "1711:           start_constraints = (nConstraint>1);",
          "1712:           op = aStartOp[(start_constraints<<2) + (startEq<<1) + bRev];",
          "1713:           sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint-1);",
          "1714:           VdbeCoverage(v);",
          "1715:           VdbeCoverageIf(v, op==OP_Rewind);  testcase( op==OP_Rewind );",
          "1716:           VdbeCoverageIf(v, op==OP_Last);    testcase( op==OP_Last );",
          "1717:           VdbeCoverageIf(v, op==OP_SeekGT);  testcase( op==OP_SeekGT );",
          "1718:           VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1719:           VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1720:           VdbeCoverageIf(v, op==OP_SeekLT);  testcase( op==OP_SeekLT );",
          "1721:         }else{",
          "1722:           op = aStartOp[(start_constraints<<2) + ((!startEq)<<1) + bRev];",
          "1723:           sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase, nConstraint);",
          "1724:           VdbeCoverage(v);",
          "1725:           VdbeCoverageIf(v, op==OP_Rewind);  testcase( op==OP_Rewind );",
          "1726:           VdbeCoverageIf(v, op==OP_Last);    testcase( op==OP_Last );",
          "1727:           VdbeCoverageIf(v, op==OP_SeekGT);  testcase( op==OP_SeekGT );",
          "1728:           VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1729:           VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1730:           VdbeCoverageIf(v, op==OP_SeekLT);  testcase( op==OP_SeekLT );",
          "1731:         }",
          "",
          "[Added Lines]",
          "1708:       assert( bSeekPastNull==0 || bStopAtNull==0 );",
          "1710:         assert( bSeekPastNull==1 || bStopAtNull==1 );",
          "1711:         assert( bStopAtNull==startEq );",
          "1713:         op = aStartOp[(nConstraint>1)*4 + 2 + bRev];",
          "1714:         sqlite3VdbeAddOp4Int(v, op, iIdxCur, addrNxt, regBase,",
          "1715:                              nConstraint-startEq);",
          "1716:         VdbeCoverage(v);",
          "1717:         VdbeCoverageIf(v, op==OP_Rewind);  testcase( op==OP_Rewind );",
          "1718:         VdbeCoverageIf(v, op==OP_Last);    testcase( op==OP_Last );",
          "1719:         VdbeCoverageIf(v, op==OP_SeekGE);  testcase( op==OP_SeekGE );",
          "1720:         VdbeCoverageIf(v, op==OP_SeekLE);  testcase( op==OP_SeekLE );",
          "1721:         assert( op==OP_Rewind || op==OP_Last || op==OP_SeekGE || op==OP_SeekLE);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "42e84ae1ab2774a881aa271660ec79889bf761d4",
      "candidate_info": {
        "commit_hash": "42e84ae1ab2774a881aa271660ec79889bf761d4",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/42e84ae1ab2774a881aa271660ec79889bf761d4",
        "files": [
          "ext/rbu/rbufault3.test",
          "ext/rbu/rbumisc.test",
          "ext/rbu/rbutemplimit.test",
          "ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add tests to improve code coverage of the RBU module.\n\nFossilOrigin-Name: ecb56b75a0e66462acdcce285b93f9fc56944c42902d886d6bada419059519a9",
        "before_after_code_files": [
          "ext/rbu/rbufault3.test||ext/rbu/rbufault3.test",
          "ext/rbu/rbumisc.test||ext/rbu/rbumisc.test",
          "ext/rbu/rbutemplimit.test||ext/rbu/rbutemplimit.test",
          "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test",
          "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/rbu/rbufault3.test||ext/rbu/rbufault3.test": [
          "File: ext/rbu/rbufault3.test -> ext/rbu/rbufault3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "84:   do_faultsim_test 3 -faults $fault -prep {",
          "85:     faultsim_restore_and_reopen",
          "87:   } -body {",
          "88:     sqlite3rbu_vacuum rbu test.db test.db2",
          "89:     rbu step",
          "",
          "[Removed Lines]",
          "86:     forcedelete test.db2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ext/rbu/rbumisc.test||ext/rbu/rbumisc.test": [
          "File: ext/rbu/rbumisc.test -> ext/rbu/rbumisc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2014 August 30",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "13: source [file join [file dirname [info script]] rbu_common.tcl]",
          "14: set ::testprefix rbumisc",
          "16: db close",
          "17: sqlite3_shutdown",
          "18: sqlite3_config_uri 1",
          "19: reset_db",
          "21: #-------------------------------------------------------------------------",
          "22: # Ensure that RBU is not confused by oddly named tables in an RBU",
          "23: # database.",
          "24: #",
          "25: do_execsql_test 1.0 {",
          "26:   CREATE TABLE x1(a, b, c INTEGER PRIMARY KEY);",
          "27: }",
          "28: do_test 1.1 {",
          "29:   forcedelete rbu.db",
          "30:   sqlite3 rbu rbu.db",
          "31:   rbu eval {",
          "32:     CREATE TABLE data_x1(a, b, c, rbu_control);",
          "33:     INSERT INTO data_x1 VALUES(1, 1, 1, 0);",
          "34:     INSERT INTO data_x1 VALUES(2, 2, 2, 0);",
          "36:     CREATE TABLE dat(a, b, c, rbu_control);",
          "37:     CREATE TABLE \"data x1\"(a, b, c, rbu_control);",
          "38:     CREATE TABLE datax1(a, b, c, rbu_control);",
          "39:     CREATE TABLE data_(a, b, c, rbu_control);",
          "41:     INSERT INTO \"data x1\" VALUES(3, 3, 3, 0);",
          "42:     INSERT INTO datax1 VALUES(3, 3, 3, 0);",
          "43:     INSERT INTO data_ VALUES(3, 3, 3, 0);",
          "44:     INSERT INTO dat VALUES(3, 3, 3, 0);",
          "45:   }",
          "46: } {}",
          "48: do_test 1.2 {",
          "49:   step_rbu test.db rbu.db",
          "50:   db eval { SELECT * FROM x1 }",
          "51: } {1 1 1 2 2 2}",
          "53: finish_test",
          "",
          "---------------"
        ],
        "ext/rbu/rbutemplimit.test||ext/rbu/rbutemplimit.test": [
          "File: ext/rbu/rbutemplimit.test -> ext/rbu/rbutemplimit.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "65:   while 1 {",
          "66:     sqlite3rbu rbu $target $rbu",
          "67:     rbu temp_size_limit $temp_limit",
          "68:     sqlite3_exec_nr [rbu db 1] \"PRAGMA cache_size = $cachesize\"",
          "69:     for {set i 0} {$i < $stepsize} {incr i} {",
          "70:       set rc [rbu step]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "68:     if { [rbu temp_size_limit -1]!=$temp_limit } { error \"round trip problem!\" }",
          "",
          "---------------"
        ],
        "ext/rbu/rbuvacuum4.test||ext/rbu/rbuvacuum4.test": [
          "File: ext/rbu/rbuvacuum4.test -> ext/rbu/rbuvacuum4.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "50:   INSERT INTO t1 VALUES(1, 2, 3);",
          "51:   INSERT INTO t1 VALUES(4, 5, 6);",
          "52:   INSERT INTO t1 VALUES(7, 8, 9);",
          "53: }",
          "55: do_rbu_vacuum_test 3.1 1",
          "57: do_execsql_test 3.2 {",
          "58:   SELECT * FROM t1;",
          "61: #-------------------------------------------------------------------------",
          "62: reset_db",
          "",
          "[Removed Lines]",
          "59: } {1 2 3 4 5 6 7 8 9}",
          "",
          "[Added Lines]",
          "54:   CREATE TABLE t2(a, b, c INTEGER, PRIMARY KEY(c));",
          "55:   CREATE INDEX i2 oN t2(b, a);",
          "56:   INSERT INTO t2 VALUES('a', 'b', -1);",
          "57:   INSERT INTO t2 VALUES('c', 'd', -2);",
          "58:   INSERT INTO t2 VALUES('e', 'f', -3);",
          "65:   SELECT * FROM t2;",
          "66: } {1 2 3 4 5 6 7 8 9 e f -3 c d -2 a b -1}",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "96:   INSERT INTO \"a b c\" VALUES(3, 9, 1);",
          "97:   INSERT INTO \"a b c\" VALUES('aaa', 'bbb', 'ccc');",
          "99:   CREATE TABLE x(a);",
          "100:   INSERT INTO x VALUES('a'), ('b'), ('d');",
          "101:   CREATE UNIQUE INDEX y ON x(a);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:   CREATE INDEX abc2 ON \"a b c\"(\"c c\" DESC, a);",
          "",
          "---------------"
        ],
        "ext/rbu/sqlite3rbu.c||ext/rbu/sqlite3rbu.c": [
          "File: ext/rbu/sqlite3rbu.c -> ext/rbu/sqlite3rbu.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1546:   char *zVector = 0;",
          "1547:   char *zRet = 0;",
          "1548:   int bFailed = 0;",
          "1575:       }else{",
          "1577:       }",
          "1590:     }",
          "1592:   }",
          "1593:   if( bFailed ) goto index_start_out;",
          "1595:   if( p->rc==SQLITE_OK ){",
          "1597:     sqlite3_stmt *pSel = 0;",
          "1606:     if( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pSel) ){",
          "1608:       for(iCol=0; iCol<pIter->nCol; iCol++){",
          "1609:         const char *zQuoted = (const char*)sqlite3_column_text(pSel, iCol);",
          "1610:         if( zQuoted[0]=='N' ){",
          "",
          "[Removed Lines]",
          "1550:   if( p->rc==SQLITE_OK ){",
          "1551:     const char *zSep = \"\";",
          "1552:     int iCol = 0;",
          "1553:     sqlite3_stmt *pXInfo = 0;",
          "1554:     p->rc = prepareFreeAndCollectError(p->dbMain, &pXInfo, &p->zErrmsg,",
          "1555:         sqlite3_mprintf(\"PRAGMA main.index_xinfo = %Q\", pIter->zIdx)",
          "1556:     );",
          "1557:     while( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pXInfo) ){",
          "1558:       int iCid = sqlite3_column_int(pXInfo, 1);",
          "1559:       const char *zCollate = (const char*)sqlite3_column_text(pXInfo, 4);",
          "1560:       const char *zCol;",
          "1561:       if( sqlite3_column_int(pXInfo, 3) ){",
          "1562:         bFailed = 1;",
          "1563:         break;",
          "1564:       }",
          "1566:       if( iCid<0 ){",
          "1567:         if( pIter->eType==RBU_PK_IPK ){",
          "1568:           int i;",
          "1569:           for(i=0; pIter->abTblPk[i]==0; i++);",
          "1570:           assert( i<pIter->nTblCol );",
          "1571:           zCol = pIter->azTblCol[i];",
          "1572:         }else{",
          "1573:           zCol = \"_rowid_\";",
          "1574:         }",
          "1576:         zCol = pIter->azTblCol[iCid];",
          "1579:       zLhs = rbuMPrintf(p, \"%z%s \\\"%w\\\" COLLATE %Q\",",
          "1580:           zLhs, zSep, zCol, zCollate",
          "1581:       );",
          "1582:       zOrder = rbuMPrintf(p, \"%z%s \\\"rbu_imp_%d%w\\\" COLLATE %Q DESC\",",
          "1583:           zOrder, zSep, iCol, zCol, zCollate",
          "1584:       );",
          "1585:       zSelect = rbuMPrintf(p, \"%z%s quote(\\\"rbu_imp_%d%w\\\")\",",
          "1586:           zSelect, zSep, iCol, zCol",
          "1587:       );",
          "1588:       zSep = \", \";",
          "1589:       iCol++;",
          "1591:     rbuFinalize(p, pXInfo);",
          "1596:     int iCol;",
          "1599:     if( p->rc==SQLITE_OK ){",
          "1600:       p->rc = prepareFreeAndCollectError(p->dbMain, &pSel, &p->zErrmsg,",
          "1601:           sqlite3_mprintf(\"SELECT %s FROM \\\"rbu_imp_%w\\\" ORDER BY %s LIMIT 1\",",
          "1602:             zSelect, pIter->zTbl, zOrder",
          "1603:           )",
          "1604:       );",
          "1605:     }",
          "1607:       const char *zSep = \"\";",
          "",
          "[Added Lines]",
          "1549:   const char *zSep = \"\";",
          "1550:   int iCol = 0;",
          "1551:   sqlite3_stmt *pXInfo = 0;",
          "1553:   p->rc = prepareFreeAndCollectError(p->dbMain, &pXInfo, &p->zErrmsg,",
          "1554:       sqlite3_mprintf(\"PRAGMA main.index_xinfo = %Q\", pIter->zIdx)",
          "1555:   );",
          "1556:   while( p->rc==SQLITE_OK && SQLITE_ROW==sqlite3_step(pXInfo) ){",
          "1557:     int iCid = sqlite3_column_int(pXInfo, 1);",
          "1558:     const char *zCollate = (const char*)sqlite3_column_text(pXInfo, 4);",
          "1559:     const char *zCol;",
          "1560:     if( sqlite3_column_int(pXInfo, 3) ){",
          "1561:       bFailed = 1;",
          "1562:       break;",
          "1563:     }",
          "1565:     if( iCid<0 ){",
          "1566:       if( pIter->eType==RBU_PK_IPK ){",
          "1567:         int i;",
          "1568:         for(i=0; pIter->abTblPk[i]==0; i++);",
          "1569:         assert( i<pIter->nTblCol );",
          "1570:         zCol = pIter->azTblCol[i];",
          "1572:         zCol = \"_rowid_\";",
          "1574:     }else{",
          "1575:       zCol = pIter->azTblCol[iCid];",
          "1578:     zLhs = rbuMPrintf(p, \"%z%s \\\"%w\\\" COLLATE %Q\",",
          "1579:         zLhs, zSep, zCol, zCollate",
          "1580:         );",
          "1581:     zOrder = rbuMPrintf(p, \"%z%s \\\"rbu_imp_%d%w\\\" COLLATE %Q DESC\",",
          "1582:         zOrder, zSep, iCol, zCol, zCollate",
          "1583:         );",
          "1584:     zSelect = rbuMPrintf(p, \"%z%s quote(\\\"rbu_imp_%d%w\\\")\",",
          "1585:         zSelect, zSep, iCol, zCol",
          "1586:         );",
          "1587:     zSep = \", \";",
          "1588:     iCol++;",
          "1590:   rbuFinalize(p, pXInfo);",
          "1596:     p->rc = prepareFreeAndCollectError(p->dbMain, &pSel, &p->zErrmsg,",
          "1597:         sqlite3_mprintf(\"SELECT %s FROM \\\"rbu_imp_%w\\\" ORDER BY %s LIMIT 1\",",
          "1598:           zSelect, pIter->zTbl, zOrder",
          "1599:         )",
          "1600:     );",
          "1602:       zSep = \"\";",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: eabe7f2d4ff0e0dd868dcab7ec1d4a9168a25f80d3a52f0eeea2f90bd33782f2",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}