{
  "cve_id": "CVE-2019-16930",
  "cve_desc": "Zcashd in Zcash before 2.0.7-3 allows discovery of the IP address of a full node that owns a shielded address, related to mishandling of exceptions during deserialization of note plaintexts. This affects anyone who has disclosed their zaddr to a third party.",
  "repo": "zcash/zcash",
  "patch_hash": "c1fbf8ab5d73cff5e1f45236995857c75ba4128d",
  "patch_info": {
    "commit_hash": "c1fbf8ab5d73cff5e1f45236995857c75ba4128d",
    "repo": "zcash/zcash",
    "commit_url": "https://github.com/zcash/zcash/commit/c1fbf8ab5d73cff5e1f45236995857c75ba4128d",
    "files": [
      "src/zcash/Note.cpp"
    ],
    "message": "Ignore exceptions when deserializing note plaintexts",
    "before_after_code_files": [
      "src/zcash/Note.cpp||src/zcash/Note.cpp"
    ]
  },
  "patch_diff": {
    "src/zcash/Note.cpp||src/zcash/Note.cpp": [
      "File: src/zcash/Note.cpp -> src/zcash/Note.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "173:     }",
      "185: }",
      "187: boost::optional<SaplingNotePlaintext> SaplingNotePlaintext::decrypt(",
      "",
      "[Removed Lines]",
      "176:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "177:     ss << pt.get();",
      "179:     SaplingOutgoingPlaintext ret;",
      "180:     ss >> ret;",
      "182:     assert(ss.size() == 0);",
      "184:     return ret;",
      "",
      "[Added Lines]",
      "176:     try {",
      "177:         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "178:         ss << pt.get();",
      "180:         SaplingOutgoingPlaintext ret;",
      "181:         ss >> ret;",
      "183:         assert(ss.size() == 0);",
      "185:         return ret;",
      "186:     } catch (const boost::thread_interrupted&) {",
      "187:         throw;",
      "188:     } catch (...) {",
      "189:         return boost::none;",
      "190:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "197:     }",
      "203:     SaplingNotePlaintext ret;",
      "208:     uint256 pk_d;",
      "209:     if (!librustzcash_ivk_to_pkd(ivk.begin(), ret.d.data(), pk_d.begin())) {",
      "",
      "[Removed Lines]",
      "200:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "201:     ss << pt.get();",
      "204:     ss >> ret;",
      "206:     assert(ss.size() == 0);",
      "",
      "[Added Lines]",
      "207:     try {",
      "208:         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "209:         ss << pt.get();",
      "210:         ss >> ret;",
      "211:         assert(ss.size() == 0);",
      "212:     } catch (const boost::thread_interrupted&) {",
      "213:         throw;",
      "214:     } catch (...) {",
      "215:         return boost::none;",
      "216:     }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "243:     }",
      "249:     SaplingNotePlaintext ret;",
      "252:     uint256 cmu_expected;",
      "253:     if (!librustzcash_sapling_compute_cm(",
      "",
      "[Removed Lines]",
      "246:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "247:     ss << pt.get();",
      "250:     ss >> ret;",
      "",
      "[Added Lines]",
      "257:     try {",
      "258:         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
      "259:         ss << pt.get();",
      "260:         ss >> ret;",
      "261:         assert(ss.size() == 0);",
      "262:     } catch (const boost::thread_interrupted&) {",
      "263:         throw;",
      "264:     } catch (...) {",
      "265:         return boost::none;",
      "266:     }",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "265:         return boost::none;",
      "266:     }",
      "270:     return ret;",
      "271: }",
      "",
      "[Removed Lines]",
      "268:     assert(ss.size() == 0);",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "3ff68c50528dedcc0122f5922df8bfe4c9959bf6",
      "candidate_info": {
        "commit_hash": "3ff68c50528dedcc0122f5922df8bfe4c9959bf6",
        "repo": "zcash/zcash",
        "commit_url": "https://github.com/zcash/zcash/commit/3ff68c50528dedcc0122f5922df8bfe4c9959bf6",
        "files": [
          "src/init.cpp",
          "src/main.cpp",
          "src/txmempool.cpp",
          "src/txmempool.h",
          "src/wallet/wallet.cpp"
        ],
        "message": "Move mempool SyncWithWallets call into its own thread",
        "before_after_code_files": [
          "src/init.cpp||src/init.cpp",
          "src/main.cpp||src/main.cpp",
          "src/txmempool.cpp||src/txmempool.cpp",
          "src/txmempool.h||src/txmempool.h",
          "src/wallet/wallet.cpp||src/wallet/wallet.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/zcash/zcash/pull/4144"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/init.cpp||src/init.cpp": [
          "File: src/init.cpp -> src/init.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "663:     }",
          "664: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "666: void ThreadNotifyRecentlyAdded()",
          "667: {",
          "668:     while (true) {",
          "670:         auto now = std::chrono::steady_clock::now().time_since_epoch();",
          "671:         auto nextFire = std::chrono::duration_cast<std::chrono::seconds>(",
          "672:             now + std::chrono::seconds(1));",
          "673:         std::this_thread::sleep_until(",
          "674:             std::chrono::time_point<std::chrono::steady_clock>(nextFire));",
          "676:         boost::this_thread::interruption_point();",
          "678:         mempool.NotifyRecentlyAdded();",
          "679:     }",
          "680: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1859:     LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);",
          "1860: #endif",
          "1862:     if (GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))",
          "1863:         StartTorControl(threadGroup, scheduler);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1880:     threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"txnotify\", &ThreadNotifyRecentlyAdded));",
          "",
          "---------------"
        ],
        "src/main.cpp||src/main.cpp": [
          "File: src/main.cpp -> src/main.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1612:         }",
          "1613:     }",
          "1617:     return true;",
          "1618: }",
          "",
          "[Removed Lines]",
          "1615:     SyncWithWallets(tx, NULL);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/txmempool.cpp||src/txmempool.cpp": [
          "File: src/txmempool.cpp -> src/txmempool.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "14: #include \"timedata.h\"",
          "15: #include \"util.h\"",
          "16: #include \"utilmoneystr.h\"",
          "17: #include \"version.h\"",
          "19: using namespace std;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "17: #include \"validationinterface.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "103:     LOCK(cs);",
          "104:     mapTx.insert(entry);",
          "105:     const CTransaction& tx = mapTx.find(hash)->GetTx();",
          "106:     for (unsigned int i = 0; i < tx.vin.size(); i++)",
          "107:         mapNextTx[tx.vin[i].prevout] = CInPoint(&tx, i);",
          "108:     BOOST_FOREACH(const JSDescription &joinsplit, tx.vJoinSplit) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "107:     mapRecentlyAddedTx[tx.GetHash()] = &tx;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "262:                     txToRemove.push_back(it->second.ptx->GetHash());",
          "263:                 }",
          "264:             }",
          "265:             BOOST_FOREACH(const CTxIn& txin, tx.vin)",
          "266:                 mapNextTx.erase(txin.prevout);",
          "267:             BOOST_FOREACH(const JSDescription& joinsplit, tx.vJoinSplit) {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "267:             mapRecentlyAddedTx.erase(hash);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "724:     }",
          "725: }",
          "727: CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView *baseIn, CTxMemPool &mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }",
          "729: bool CCoinsViewMemPool::GetNullifier(const uint256 &nf, ShieldedType type) const",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "730: void CTxMemPool::NotifyRecentlyAdded()",
          "731: {",
          "732:     std::vector<CTransaction> txs;",
          "733:     {",
          "734:         LOCK(cs);",
          "735:         for (const auto& kv : mapRecentlyAddedTx) {",
          "736:             txs.push_back(*(kv.second));",
          "737:         }",
          "738:         mapRecentlyAddedTx.clear();",
          "739:     }",
          "745:     for (auto tx : txs) {",
          "746:         try {",
          "747:             SyncWithWallets(tx, NULL);",
          "748:         } catch (const boost::thread_interrupted&) {",
          "749:             throw;",
          "750:         } catch (const std::exception& e) {",
          "751:             PrintExceptionContinue(&e, \"CTxMemPool::NotifyRecentlyAdded()\");",
          "752:         } catch (...) {",
          "753:             PrintExceptionContinue(NULL, \"CTxMemPool::NotifyRecentlyAdded()\");",
          "754:         }",
          "755:     }",
          "756: }",
          "",
          "---------------"
        ],
        "src/txmempool.h||src/txmempool.h": [
          "File: src/txmempool.h -> src/txmempool.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:     uint64_t totalTxSize = 0;  //!< sum of all mempool tx' byte sizes",
          "134:     uint64_t cachedInnerUsage; //!< sum of dynamic memory usage of all the map elements (NOT the maps themselves)",
          "136:     std::map<uint256, const CTransaction*> mapSproutNullifiers;",
          "137:     std::map<uint256, const CTransaction*> mapSaplingNullifiers;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136:     std::map<uint256, const CTransaction*> mapRecentlyAddedTx;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "218:     bool nullifierExists(const uint256& nullifier, ShieldedType type) const;",
          "220:     unsigned long size()",
          "221:     {",
          "222:         LOCK(cs);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "221:     void NotifyRecentlyAdded();",
          "",
          "---------------"
        ],
        "src/wallet/wallet.cpp||src/wallet/wallet.cpp": [
          "File: src/wallet/wallet.cpp -> src/wallet/wallet.cpp"
        ]
      }
    },
    {
      "candidate_hash": "e060d598901f815d06b35debbad4a6a6d3ca0834",
      "candidate_info": {
        "commit_hash": "e060d598901f815d06b35debbad4a6a6d3ca0834",
        "repo": "zcash/zcash",
        "commit_url": "https://github.com/zcash/zcash/commit/e060d598901f815d06b35debbad4a6a6d3ca0834",
        "files": [
          "src/consensus/consensus.h",
          "src/gtest/test_noteencryption.cpp",
          "src/main.cpp",
          "src/transaction_builder.cpp",
          "src/wallet/gtest/test_wallet.cpp",
          "src/wallet/rpcwallet.cpp",
          "src/wallet/wallet.cpp",
          "src/wallet/wallet.h",
          "src/zcash/Note.cpp",
          "src/zcash/Note.hpp"
        ],
        "message": "Reject v1 plaintexts after grace period\n\nSaplingNotePlaintext::decrypt() now has to be aware of consensus params and blockheight. Its callers in wallet, rpcwallet, and tests are updated accordingly.\n\nTransactionBuilder is also modified to reject invalid leadBytes.\n\nCo-authored by Daira Hopwood (daira@jacaranda.org)",
        "before_after_code_files": [
          "src/consensus/consensus.h||src/consensus/consensus.h",
          "src/gtest/test_noteencryption.cpp||src/gtest/test_noteencryption.cpp",
          "src/main.cpp||src/main.cpp",
          "src/transaction_builder.cpp||src/transaction_builder.cpp",
          "src/wallet/gtest/test_wallet.cpp||src/wallet/gtest/test_wallet.cpp",
          "src/wallet/rpcwallet.cpp||src/wallet/rpcwallet.cpp",
          "src/wallet/wallet.cpp||src/wallet/wallet.cpp",
          "src/wallet/wallet.h||src/wallet/wallet.h",
          "src/zcash/Note.cpp||src/zcash/Note.cpp",
          "src/zcash/Note.hpp||src/zcash/Note.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/zcash/Note.cpp||src/zcash/Note.cpp"
          ],
          "candidate": [
            "src/zcash/Note.cpp||src/zcash/Note.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/consensus/consensus.h||src/consensus/consensus.h": [
          "File: src/consensus/consensus.h -> src/consensus/consensus.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "31: static const int COINBASE_MATURITY = 100;",
          "33: static constexpr uint32_t TX_EXPIRY_HEIGHT_THRESHOLD = 500000000;",
          "36: enum {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "35: static const unsigned int ZIP212_GRACE_PERIOD = 32256;",
          "",
          "---------------"
        ],
        "src/gtest/test_noteencryption.cpp||src/gtest/test_noteencryption.cpp": [
          "File: src/gtest/test_noteencryption.cpp -> src/gtest/test_noteencryption.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "10: #include \"zcash/Address.hpp\"",
          "11: #include \"crypto/sha256.h\"",
          "12: #include \"librustzcash.h\"",
          "14: class TestNoteDecryption : public ZCNoteDecryption {",
          "15: public:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "13: #include \"consensus/params.h\"",
          "14: #include \"utiltest.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "23: TEST(noteencryption, NotePlaintext)",
          "24: {",
          "25:     using namespace libzcash;",
          "26:     auto xsk = SaplingSpendingKey(uint256()).expanded_spending_key();",
          "27:     auto fvk = xsk.full_viewing_key();",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "27:     SelectParams(CBaseChainParams::REGTEST);",
          "28:     const Consensus::Params& params = Params().GetConsensus();",
          "29:     int overwinterActivationHeight = 5;",
          "30:     int saplingActivationHeight = 30;",
          "31:     UpdateNetworkUpgradeParameters(Consensus::UPGRADE_OVERWINTER, overwinterActivationHeight);",
          "32:     UpdateNetworkUpgradeParameters(Consensus::UPGRADE_SAPLING, saplingActivationHeight);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "57:     ASSERT_FALSE(SaplingNotePlaintext::decrypt(",
          "58:         ct,",
          "59:         ivk,",
          "60:         epk,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "67:         params,",
          "68:         saplingActivationHeight,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "65:     auto foo = SaplingNotePlaintext::decrypt(",
          "66:         ct,",
          "67:         ivk,",
          "68:         epk,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "77:         params,",
          "78:         saplingActivationHeight,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "130:     ASSERT_FALSE(",
          "131:         SaplingNotePlaintext::decrypt(",
          "132:             ct,",
          "133:             epk,",
          "134:             decrypted_out_ct_unwrapped.esk,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "145:             params,",
          "146:             saplingActivationHeight,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "141:     foo = SaplingNotePlaintext::decrypt(",
          "142:         ct,",
          "143:         epk,",
          "144:         decrypted_out_ct_unwrapped.esk,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157:         params,",
          "158:         saplingActivationHeight,",
          "",
          "---------------"
        ],
        "src/main.cpp||src/main.cpp": [
          "File: src/main.cpp -> src/main.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "923:                 auto encPlaintext = SaplingNotePlaintext::decrypt(",
          "924:                     output.encCiphertext,",
          "925:                     output.ephemeralKey,",
          "926:                     outPlaintext->esk,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "924:                     chainparams.GetConsensus(),",
          "925:                     nHeight,",
          "",
          "---------------"
        ],
        "src/transaction_builder.cpp||src/transaction_builder.cpp": [
          "File: src/transaction_builder.cpp -> src/transaction_builder.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "9: #include \"rpc/protocol.h\"",
          "10: #include \"script/sign.h\"",
          "11: #include \"utilmoneystr.h\"",
          "13: #include <boost/variant.hpp>",
          "14: #include <librustzcash.h>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "12: #include \"zcash/Note.hpp\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "142:         throw std::runtime_error(\"TransactionBuilder cannot add Sapling spend to pre-Sapling transaction\");",
          "143:     }",
          "146:     if (spends.size() > 0 && spends[0].anchor != anchor) {",
          "147:         throw JSONRPCError(RPC_WALLET_ERROR, \"Anchor does not match previously-added Sapling spends.\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "147:     if (!libzcash::plaintext_version_is_valid(consensusParams, nHeight + 1, note.get_lead_byte())) {",
          "148:         throw std::runtime_error(\"TransactionBuilder: invalid note plaintext version\");",
          "149:     }",
          "",
          "---------------"
        ],
        "src/wallet/gtest/test_wallet.cpp||src/wallet/gtest/test_wallet.cpp": [
          "File: src/wallet/gtest/test_wallet.cpp -> src/wallet/gtest/test_wallet.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "700:     auto maybe_pt = libzcash::SaplingNotePlaintext::decrypt(",
          "701:             wtx.vShieldedOutput[0].encCiphertext,",
          "702:             ivk,",
          "703:             wtx.vShieldedOutput[0].ephemeralKey,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "701:             consensusParams,",
          "702:             wtx.nExpiryHeight,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1077:     auto maybe_pt = libzcash::SaplingNotePlaintext::decrypt(",
          "1078:         wtx.vShieldedOutput[0].encCiphertext,",
          "1079:         ivk,",
          "1080:         wtx.vShieldedOutput[0].ephemeralKey,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1080:         consensusParams,",
          "1081:         wtx.nExpiryHeight,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2005:     wtx = wallet.mapWallet[hash];",
          "2010:     ASSERT_EQ(static_cast<bool>(maybe_pt), true);",
          "2011:     auto maybe_note = maybe_pt.get().note(ivk);",
          "2012:     ASSERT_EQ(static_cast<bool>(maybe_note), true);",
          "",
          "[Removed Lines]",
          "2008:     auto maybe_pt = libzcash::SaplingNotePlaintext::decrypt(",
          "2009:             tx1.vShieldedOutput[0].encCiphertext, ivk, tx1.vShieldedOutput[0].ephemeralKey, tx1.vShieldedOutput[0].cmu);",
          "",
          "[Added Lines]",
          "2012:     auto maybe_pt = libzcash::SaplingNotePlaintext::decrypt(consensusParams, fakeIndex.nHeight, tx1.vShieldedOutput[0].encCiphertext, ivk, tx1.vShieldedOutput[0].ephemeralKey, tx1.vShieldedOutput[0].cmu);",
          "",
          "---------------"
        ],
        "src/wallet/rpcwallet.cpp||src/wallet/rpcwallet.cpp": [
          "File: src/wallet/rpcwallet.cpp -> src/wallet/rpcwallet.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "6: #include \"amount.h\"",
          "7: #include \"consensus/upgrades.h\"",
          "8: #include \"core_io.h\"",
          "9: #include \"experimental_features.h\"",
          "10: #include \"init.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #include \"consensus/params.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3768:         auto op = res->second;",
          "3769:         auto wtxPrev = pwalletMain->mapWallet.at(op.hash);",
          "3772:         auto notePt = decrypted.first;",
          "3773:         auto pa = decrypted.second;",
          "",
          "[Removed Lines]",
          "3771:         auto decrypted = wtxPrev.DecryptSaplingNote(op).get();",
          "",
          "[Added Lines]",
          "3773:         auto decrypted = wtxPrev.DecryptSaplingNote(Params().GetConsensus(), wtxPrev.nExpiryHeight, op).get();",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3796:         SaplingPaymentAddress pa;",
          "3797:         bool isOutgoing;",
          "3800:         if (decrypted) {",
          "3801:             notePt = decrypted->first;",
          "3802:             pa = decrypted->second;",
          "3803:             isOutgoing = false;",
          "3804:         } else {",
          "3807:             if (recovered) {",
          "3808:                 notePt = recovered->first;",
          "3809:                 pa = recovered->second;",
          "",
          "[Removed Lines]",
          "3799:         auto decrypted = wtx.DecryptSaplingNote(op);",
          "3806:             auto recovered = wtx.RecoverSaplingNote(op, ovks);",
          "",
          "[Added Lines]",
          "3802:         auto decrypted = wtx.DecryptSaplingNote(Params().GetConsensus(), wtx.nExpiryHeight, op);",
          "3810:             auto recovered = wtx.RecoverSaplingNote(Params().GetConsensus(), wtx.nExpiryHeight, op, ovks);",
          "",
          "---------------"
        ],
        "src/wallet/wallet.cpp||src/wallet/wallet.cpp": [
          "File: src/wallet/wallet.cpp -> src/wallet/wallet.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1495:             uint64_t position = nd.witnesses.front().position();",
          "1496:             auto extfvk = mapSaplingFullViewingKeys.at(nd.ivk);",
          "1497:             OutputDescription output = wtx.vShieldedOutput[op.n];",
          "1499:             if (!optPlaintext) {",
          "",
          "[Removed Lines]",
          "1498:             auto optPlaintext = SaplingNotePlaintext::decrypt(output.encCiphertext, nd.ivk, output.ephemeralKey, output.cmu);",
          "",
          "[Added Lines]",
          "1500:             auto optPlaintext = SaplingNotePlaintext::decrypt(Params().GetConsensus(), wtx.nExpiryHeight, output.encCiphertext, nd.ivk, output.ephemeralKey, output.cmu);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1901:         const OutputDescription output = tx.vShieldedOutput[i];",
          "1902:         for (auto it = mapSaplingFullViewingKeys.begin(); it != mapSaplingFullViewingKeys.end(); ++it) {",
          "1903:             SaplingIncomingViewingKey ivk = it->first;",
          "1905:             if (!result) {",
          "1906:                 continue;",
          "1907:             }",
          "",
          "[Removed Lines]",
          "1904:             auto result = SaplingNotePlaintext::decrypt(output.encCiphertext, ivk, output.ephemeralKey, output.cmu);",
          "",
          "[Added Lines]",
          "1908:             auto result = SaplingNotePlaintext::decrypt(Params().GetConsensus(), tx.nExpiryHeight, output.encCiphertext, ivk, output.ephemeralKey, output.cmu);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2301: boost::optional<std::pair<",
          "2302:     SaplingNotePlaintext,",
          "2304: {",
          "2306:     if (this->mapSaplingNoteData.count(op) == 0) {",
          "",
          "[Removed Lines]",
          "2303:     SaplingPaymentAddress>> CWalletTx::DecryptSaplingNote(SaplingOutPoint op) const",
          "",
          "[Added Lines]",
          "2307:     SaplingPaymentAddress>> CWalletTx::DecryptSaplingNote(const Consensus::Params& params, int height, SaplingOutPoint op) const",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2311:     auto nd = this->mapSaplingNoteData.at(op);",
          "2313:     auto maybe_pt = SaplingNotePlaintext::decrypt(",
          "2314:         output.encCiphertext,",
          "2315:         nd.ivk,",
          "2316:         output.ephemeralKey,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2318:         params,",
          "2319:         height,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2328: boost::optional<std::pair<",
          "2329:     SaplingNotePlaintext,",
          "2332: {",
          "2333:     auto output = this->vShieldedOutput[op.n];",
          "",
          "[Removed Lines]",
          "2330:     SaplingPaymentAddress>> CWalletTx::RecoverSaplingNote(",
          "2331:         SaplingOutPoint op, std::set<uint256>& ovks) const",
          "",
          "[Added Lines]",
          "2336:     SaplingPaymentAddress>> CWalletTx::RecoverSaplingNote(const Consensus::Params& params, int height, SaplingOutPoint op, std::set<uint256>& ovks) const",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2344:         }",
          "2346:         auto maybe_pt = SaplingNotePlaintext::decrypt(",
          "2347:             output.encCiphertext,",
          "2348:             output.ephemeralKey,",
          "2349:             outPt->esk,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2352:             params,",
          "2353:             height,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4975:             SaplingOutPoint op = pair.first;",
          "4976:             SaplingNoteData nd = pair.second;",
          "4978:             auto maybe_pt = SaplingNotePlaintext::decrypt(",
          "4979:                 wtx.vShieldedOutput[op.n].encCiphertext,",
          "4980:                 nd.ivk,",
          "4981:                 wtx.vShieldedOutput[op.n].ephemeralKey,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4987:                 Params().GetConsensus(),",
          "4988:                 wtx.nExpiryHeight,",
          "",
          "---------------"
        ],
        "src/wallet/wallet.h||src/wallet/wallet.h": [
          "File: src/wallet/wallet.h -> src/wallet/wallet.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "566:         JSOutPoint jsop) const;",
          "567:     boost::optional<std::pair<",
          "568:         libzcash::SaplingNotePlaintext,",
          "570:     boost::optional<std::pair<",
          "571:         libzcash::SaplingNotePlaintext,",
          "573:             SaplingOutPoint op, std::set<uint256>& ovks) const;",
          "",
          "[Removed Lines]",
          "569:         libzcash::SaplingPaymentAddress>> DecryptSaplingNote(SaplingOutPoint op) const;",
          "572:         libzcash::SaplingPaymentAddress>> RecoverSaplingNote(",
          "",
          "[Added Lines]",
          "569:         libzcash::SaplingPaymentAddress>> DecryptSaplingNote(const Consensus::Params& params, int height, SaplingOutPoint op) const;",
          "572:         libzcash::SaplingPaymentAddress>> RecoverSaplingNote(const Consensus::Params& params, int height,",
          "",
          "---------------"
        ],
        "src/zcash/Note.cpp||src/zcash/Note.cpp": [
          "File: src/zcash/Note.cpp -> src/zcash/Note.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1: #include \"Note.hpp\"",
          "2: #include \"prf.h\"",
          "3: #include \"crypto/sha256.h\"",
          "5: #include \"random.h\"",
          "6: #include \"version.h\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4: #include \"consensus/consensus.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:     }",
          "206: }",
          "208: boost::optional<SaplingNotePlaintext> SaplingNotePlaintext::decrypt(",
          "209:     const SaplingEncCiphertext &ciphertext,",
          "210:     const uint256 &ivk,",
          "211:     const uint256 &epk,",
          "",
          "[Removed Lines]",
          "191:     try {",
          "192:         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
          "193:         ss << pt.get();",
          "195:         SaplingOutgoingPlaintext ret;",
          "196:         ss >> ret;",
          "198:         assert(ss.size() == 0);",
          "200:         return ret;",
          "201:     } catch (const boost::thread_interrupted&) {",
          "202:         throw;",
          "203:     } catch (...) {",
          "204:         return boost::none;",
          "205:     }",
          "",
          "[Added Lines]",
          "192:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
          "193:     ss << pt.get();",
          "195:     SaplingOutgoingPlaintext ret;",
          "196:     ss >> ret;",
          "198:     assert(ss.size() == 0);",
          "200:     return ret;",
          "204:     const Consensus::Params& params,",
          "205:     int height,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "221:     SaplingNotePlaintext ret;",
          "230:         return boost::none;",
          "231:     }",
          "",
          "[Removed Lines]",
          "222:     try {",
          "223:         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
          "224:         ss << pt.get();",
          "225:         ss >> ret;",
          "226:         assert(ss.size() == 0);",
          "227:     } catch (const boost::thread_interrupted&) {",
          "228:         throw;",
          "229:     } catch (...) {",
          "",
          "[Added Lines]",
          "219:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
          "220:     ss << pt.get();",
          "221:     ss >> ret;",
          "222:     assert(ss.size() == 0);",
          "225:     if (!plaintext_version_valid(params, height, ret.leadByte)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "269: }",
          "271: boost::optional<SaplingNotePlaintext> SaplingNotePlaintext::decrypt(",
          "272:     const SaplingEncCiphertext &ciphertext,",
          "273:     const uint256 &epk,",
          "274:     const uint256 &esk,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "268:     const Consensus::Params& params,",
          "269:     int height,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "285:     SaplingNotePlaintext ret;",
          "294:         return boost::none;",
          "295:     }",
          "",
          "[Removed Lines]",
          "286:     try {",
          "287:         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
          "288:         ss << pt.get();",
          "289:         ss >> ret;",
          "290:         assert(ss.size() == 0);",
          "291:     } catch (const boost::thread_interrupted&) {",
          "292:         throw;",
          "293:     } catch (...) {",
          "",
          "[Added Lines]",
          "284:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
          "285:     ss << pt.get();",
          "286:     ss >> ret;",
          "287:     assert(ss.size() == 0);",
          "290:     if (!plaintext_version_valid(params, height, ret.leadByte)) {",
          "",
          "---------------"
        ],
        "src/zcash/Note.hpp||src/zcash/Note.hpp": [
          "File: src/zcash/Note.hpp -> src/zcash/Note.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "5: #include \"Zcash.h\"",
          "6: #include \"Address.hpp\"",
          "7: #include \"NoteEncryption.hpp\"",
          "9: #include <array>",
          "10: #include <boost/optional.hpp>",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8: #include \"consensus/params.h\"",
          "9: #include \"consensus/consensus.h\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "40:     uint256 nullifier(const SproutSpendingKey& a_sk) const;",
          "41: };",
          "44: class SaplingNote : public BaseNote {",
          "45: private:",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "45: inline bool plaintext_version_is_valid(const Consensus::Params& params, int height, unsigned char leadByte) {",
          "46:     int canopyActivationHeight = params.vUpgrades[Consensus::UPGRADE_CANOPY].nActivationHeight;",
          "48:     if (height < canopyActivationHeight && leadByte != 0x01) {",
          "50:         return false;",
          "51:     }",
          "52:     if (height >= canopyActivationHeight",
          "53:         && height < canopyActivationHeight + ZIP212_GRACE_PERIOD",
          "54:         && leadByte != 0x01",
          "55:         && leadByte != 0x02)",
          "56:     {",
          "58:         return false;",
          "59:     }",
          "60:     if (height >= canopyActivationHeight + ZIP212_GRACE_PERIOD && leadByte != 0x02) {",
          "62:         return false;",
          "63:     }",
          "64:     return true;",
          "65: };",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:     boost::optional<uint256> cmu() const;",
          "61:     boost::optional<uint256> nullifier(const SaplingFullViewingKey &vk, const uint64_t position) const;",
          "62:     uint256 rcm() const;",
          "63: };",
          "65: class BaseNotePlaintext {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "87:     unsigned char get_lead_byte() const {",
          "88:         return leadByte;",
          "89:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "132:     SaplingNotePlaintext(const SaplingNote& note, std::array<unsigned char, ZC_MEMO_SIZE> memo);",
          "134:     static boost::optional<SaplingNotePlaintext> decrypt(",
          "135:         const SaplingEncCiphertext &ciphertext,",
          "136:         const uint256 &ivk,",
          "137:         const uint256 &epk,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "162:         const Consensus::Params& params,",
          "163:         int height,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "139:     );",
          "141:     static boost::optional<SaplingNotePlaintext> decrypt(",
          "142:         const SaplingEncCiphertext &ciphertext,",
          "143:         const uint256 &epk,",
          "144:         const uint256 &esk,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "171:         const Consensus::Params& params,",
          "172:         int height,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "155:     template <typename Stream, typename Operation>",
          "156:     inline void SerializationOp(Stream& s, Operation ser_action) {",
          "164:         READWRITE(d);           // 11 bytes",
          "165:         READWRITE(value_);      // 8 bytes",
          "166:         READWRITE(rseed);       // 32 bytes",
          "",
          "[Removed Lines]",
          "157:         READWRITE(leadByte);",
          "159:         if (leadByte != 0x01 && leadByte != 0x02) {",
          "160:             printf(\"leadByte: %x\\n\", leadByte);",
          "161:             throw std::ios_base::failure(\"lead byte of SaplingNotePlaintext is not recognized\");",
          "162:         }",
          "",
          "[Added Lines]",
          "188:         READWRITE(leadByte);    // 1 byte",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "172:     uint256 rcm() const;",
          "173:     uint256 generate_esk() const;",
          "175:         return leadByte;",
          "176:     }",
          "177: };",
          "",
          "[Removed Lines]",
          "174:     bool get_lead_byte() const {",
          "",
          "[Added Lines]",
          "199:     unsigned char get_lead_byte() const {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f24e706079972225c048ca55a8dd700c59a2e939",
      "candidate_info": {
        "commit_hash": "f24e706079972225c048ca55a8dd700c59a2e939",
        "repo": "zcash/zcash",
        "commit_url": "https://github.com/zcash/zcash/commit/f24e706079972225c048ca55a8dd700c59a2e939",
        "files": [
          "qa/rpc-tests/test_framework/util.py",
          "src/gtest/test_checktransaction.cpp",
          "src/gtest/test_noteencryption.cpp",
          "src/gtest/test_sapling_note.cpp",
          "src/gtest/test_transaction_builder.cpp",
          "src/main.cpp",
          "src/miner.cpp",
          "src/transaction_builder.cpp",
          "src/utiltest.cpp",
          "src/wallet/gtest/test_wallet.cpp",
          "src/wallet/wallet.cpp",
          "src/zcash/Note.cpp",
          "src/zcash/Note.hpp",
          "src/zcbenchmarks.cpp"
        ],
        "message": "Replace leadByte in SaplingNote with is_zip_212",
        "before_after_code_files": [
          "qrpc-tests/test_framework/util.py||qa/rpc-tests/test_framework/util.py",
          "src/gtest/test_checktransaction.cpp||src/gtest/test_checktransaction.cpp",
          "src/gtest/test_noteencryption.cpp||src/gtest/test_noteencryption.cpp",
          "src/gtest/test_sapling_note.cpp||src/gtest/test_sapling_note.cpp",
          "src/gtest/test_transaction_builder.cpp||src/gtest/test_transaction_builder.cpp",
          "src/main.cpp||src/main.cpp",
          "src/miner.cpp||src/miner.cpp",
          "src/transaction_builder.cpp||src/transaction_builder.cpp",
          "src/utiltest.cpp||src/utiltest.cpp",
          "src/wallet/gtest/test_wallet.cpp||src/wallet/gtest/test_wallet.cpp",
          "src/wallet/wallet.cpp||src/wallet/wallet.cpp",
          "src/zcash/Note.cpp||src/zcash/Note.cpp",
          "src/zcash/Note.hpp||src/zcash/Note.hpp",
          "src/zcbenchmarks.cpp||src/zcbenchmarks.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/zcash/Note.cpp||src/zcash/Note.cpp"
          ],
          "candidate": [
            "src/zcash/Note.cpp||src/zcash/Note.cpp"
          ]
        }
      },
      "candidate_diff": {
        "qrpc-tests/test_framework/util.py||qa/rpc-tests/test_framework/util.py": [
          "File: qrpc-tests/test_framework/util.py -> qa/rpc-tests/test_framework/util.py",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "226:                 print(\"initialize_chain: RPC successfully started\")",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "316:         print(\"start_node: RPC successfully started\")",
          "",
          "---------------"
        ],
        "src/gtest/test_checktransaction.cpp||src/gtest/test_checktransaction.cpp": [
          "File: src/gtest/test_checktransaction.cpp -> src/gtest/test_checktransaction.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1135:     uint256 ovk;",
          "1136:     auto note = libzcash::SaplingNote(",
          "1138:     auto output = OutputDescriptionInfo(ovk, note, {{0xF6}});",
          "1140:     auto ctx = librustzcash_sapling_proving_ctx_init();",
          "",
          "[Removed Lines]",
          "1137:         libzcash::SaplingSpendingKey::random().default_address(), CAmount(123456), 0x01);",
          "",
          "[Added Lines]",
          "1137:         libzcash::SaplingSpendingKey::random().default_address(), CAmount(123456), false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1218:     uint256 ovk;",
          "1219:     auto note = libzcash::SaplingNote(",
          "1221:     auto output = OutputDescriptionInfo(ovk, note, {{0xF6}});",
          "1223:     CMutableTransaction mtx = GetValidTransaction();",
          "",
          "[Removed Lines]",
          "1220:         libzcash::SaplingSpendingKey::random().default_address(), CAmount(123456), 0x01);",
          "",
          "[Added Lines]",
          "1220:         libzcash::SaplingSpendingKey::random().default_address(), CAmount(123456), false);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1295:     uint256 ovk;",
          "1296:     auto note = libzcash::SaplingNote(",
          "1298:     auto output = OutputDescriptionInfo(ovk, note, {{0xF6}});",
          "1300:     CMutableTransaction mtx = GetValidTransaction();",
          "",
          "[Removed Lines]",
          "1297:         libzcash::SaplingSpendingKey::random().default_address(), CAmount(123456), 0x02);",
          "",
          "[Added Lines]",
          "1297:         libzcash::SaplingSpendingKey::random().default_address(), CAmount(123456), true);",
          "",
          "---------------"
        ],
        "src/gtest/test_noteencryption.cpp||src/gtest/test_noteencryption.cpp": [
          "File: src/gtest/test_noteencryption.cpp -> src/gtest/test_noteencryption.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "33:     UpdateNetworkUpgradeParameters(Consensus::UPGRADE_CANOPY, canopyActivationHeight);",
          "34:     auto params = Params().GetConsensus();",
          "37:     int decryptionHeights[] = {saplingActivationHeight, canopyActivationHeight};",
          "39:     using namespace libzcash;",
          "",
          "[Removed Lines]",
          "36:     unsigned char leadBytes[] = {0x01, 0x02};",
          "",
          "[Added Lines]",
          "36:     bool is_zip_212[] = {false, true};",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "48:         memo[i] = (unsigned char) i;",
          "49:     }",
          "53:         auto cmu_opt = note.cmu();",
          "54:         if (!cmu_opt) {",
          "55:             FAIL();",
          "",
          "[Removed Lines]",
          "51:     for (int ver = 0; ver < sizeof(leadBytes); ver++){",
          "52:         SaplingNote note(addr, 39393, leadBytes[ver]);",
          "",
          "[Added Lines]",
          "51:     for (int ver = 0; ver < sizeof(is_zip_212); ver++){",
          "52:         SaplingNote note(addr, 39393, is_zip_212[ver]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "213:     {",
          "216:         auto cmu_opt = note.cmu();",
          "217:         if (!cmu_opt) {",
          "218:             FAIL();",
          "",
          "[Removed Lines]",
          "215:         SaplingNote note(addr, 39393, 0x02);",
          "",
          "[Added Lines]",
          "215:         SaplingNote note(addr, 39393, true);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "241:         ));",
          "242:     }",
          "281:     {",
          "284:         auto cmu_opt = note.cmu();",
          "285:         if (!cmu_opt) {",
          "286:             FAIL();",
          "",
          "[Removed Lines]",
          "244:     {",
          "246:         SaplingNote note(addr, 39393, 0x03);",
          "247:         int height1 = canopyActivationHeight;",
          "248:         int height2 = canopyActivationHeight + (ZIP212_GRACE_PERIOD) - 1;",
          "249:         int heights[] = {height1, height2};",
          "251:         for (int j = 0; j < sizeof(heights) / sizeof(int); j++) {",
          "252:             auto cmu_opt = note.cmu();",
          "253:             if (!cmu_opt) {",
          "254:                 FAIL();",
          "255:             }",
          "256:             uint256 cmu = cmu_opt.get();",
          "257:             SaplingNotePlaintext pt(note, memo);",
          "259:             auto res = pt.encrypt(addr.pk_d);",
          "260:             if (!res) {",
          "261:                 FAIL();",
          "262:             }",
          "264:             auto enc = res.get();",
          "266:             auto ct = enc.first;",
          "267:             auto encryptor = enc.second;",
          "268:             auto epk = encryptor.get_epk();",
          "270:             ASSERT_FALSE(SaplingNotePlaintext::decrypt(",
          "271:                 params,",
          "272:                 heights[j],",
          "273:                 ct,",
          "274:                 ivk,",
          "275:                 epk,",
          "276:                 cmu",
          "277:             ));",
          "278:         }",
          "279:     }",
          "283:         SaplingNote note(addr, 39393, 0x01);",
          "",
          "[Added Lines]",
          "246:         SaplingNote note(addr, 39393, false);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "341:     {",
          "344:         auto cmu_opt = note.cmu();",
          "345:         if (!cmu_opt) {",
          "346:             FAIL();",
          "",
          "[Removed Lines]",
          "343:         SaplingNote note(addr, 39393, 0x01);",
          "",
          "[Added Lines]",
          "306:         SaplingNote note(addr, 39393, false);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "376:     {",
          "379:         int height1 = canopyActivationHeight;",
          "380:         int height2 = canopyActivationHeight + (ZIP212_GRACE_PERIOD) - 1;",
          "381:         int heights[] = {height1, height2};",
          "384:             for (int j = 0; j < sizeof(heights) / sizeof(int); j++) {",
          "386:                 auto cmu_opt = note.cmu();",
          "387:                 if (!cmu_opt) {",
          "388:                     FAIL();",
          "",
          "[Removed Lines]",
          "378:         unsigned char leadBytes[] = {0x01, 0x02};",
          "383:         for (int i = 0; i < sizeof(leadBytes); i++) {",
          "385:                 SaplingNote note(addr, 39393, leadBytes[i]);",
          "",
          "[Added Lines]",
          "341:         bool is_zip_212[] = {false, true};",
          "346:         for (int i = 0; i < sizeof(is_zip_212); i++) {",
          "348:                 SaplingNote note(addr, 39393, is_zip_212[i]);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "420:     {",
          "423:         auto cmu_opt = note.cmu();",
          "424:         if (!cmu_opt) {",
          "425:             FAIL();",
          "",
          "[Removed Lines]",
          "422:         SaplingNote note(addr, 39393, 0x02);",
          "",
          "[Added Lines]",
          "385:         SaplingNote note(addr, 39393, true);",
          "",
          "---------------"
        ],
        "src/gtest/test_sapling_note.cpp||src/gtest/test_sapling_note.cpp": [
          "File: src/gtest/test_sapling_note.cpp -> src/gtest/test_sapling_note.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "57: {",
          "59:     auto address = SaplingSpendingKey::random().default_address();",
          "63:     ASSERT_EQ(note1.d, note2.d);",
          "64:     ASSERT_EQ(note1.pk_d, note2.pk_d);",
          "",
          "[Removed Lines]",
          "60:     SaplingNote note1(address, GetRand(MAX_MONEY), 0x01);",
          "61:     SaplingNote note2(address, GetRand(MAX_MONEY), 0x01);",
          "",
          "[Added Lines]",
          "60:     SaplingNote note1(address, GetRand(MAX_MONEY), false);",
          "61:     SaplingNote note2(address, GetRand(MAX_MONEY), false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "66:     ASSERT_NE(note1.rcm(), note2.rcm());",
          "70:     ASSERT_NE(note1.d, note3.d);",
          "71:     ASSERT_NE(note1.pk_d, note3.pk_d);",
          "72: }",
          "",
          "[Removed Lines]",
          "69:     SaplingNote note3(SaplingSpendingKey::random().default_address(), GetRand(MAX_MONEY), 0x01);",
          "",
          "[Added Lines]",
          "69:     SaplingNote note3(SaplingSpendingKey::random().default_address(), GetRand(MAX_MONEY), false);",
          "",
          "---------------"
        ],
        "src/gtest/test_transaction_builder.cpp||src/gtest/test_transaction_builder.cpp": [
          "File: src/gtest/test_transaction_builder.cpp -> src/gtest/test_transaction_builder.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "483:     }",
          "487:     SaplingMerkleTree tree;",
          "488:     try {",
          "489:         builder.AddSaplingSpend(expsk, note, uint256(), tree.witness());",
          "",
          "[Removed Lines]",
          "486:     libzcash::SaplingNote note(pk, 50000, 0x01);",
          "",
          "[Added Lines]",
          "486:     libzcash::SaplingNote note(pk, 50000, false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "517:     {",
          "519:         auto builder = TransactionBuilder(consensusParams, canopyActivationHeight - 1);",
          "521:         try {",
          "522:             builder.AddSaplingSpend(expsk, note, uint256(), tree.witness());",
          "523:         } catch (std::runtime_error const & err) {",
          "",
          "[Removed Lines]",
          "520:         libzcash::SaplingNote note(pk, 50000, 0x02);",
          "",
          "[Added Lines]",
          "520:         libzcash::SaplingNote note(pk, 50000, true);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "527:         }",
          "528:     }",
          "549:     {",
          "551:         auto builder = TransactionBuilder(consensusParams, canopyActivationHeight + ZIP212_GRACE_PERIOD);",
          "553:         try {",
          "554:             builder.AddSaplingSpend(expsk, note, uint256(), tree.witness());",
          "555:         } catch (std::runtime_error const & err) {",
          "",
          "[Removed Lines]",
          "530:     {",
          "532:         libzcash::SaplingNote note(pk, 50000, 0x03);",
          "533:         int height1 = canopyActivationHeight - 1;",
          "534:         int height2 = canopyActivationHeight + (ZIP212_GRACE_PERIOD) - 2;",
          "535:         int heights[] = {height1, height2};",
          "537:         for (int j = 0; j < sizeof(heights) / sizeof(int); j++) {",
          "538:             auto builder = TransactionBuilder(consensusParams, heights[j]);",
          "539:             try {",
          "540:                 builder.AddSaplingSpend(expsk, note, uint256(), tree.witness());",
          "541:             } catch (std::runtime_error const & err) {",
          "542:                 EXPECT_EQ(err.what(), std::string(\"TransactionBuilder: invalid note plaintext version\"));",
          "543:             } catch(...) {",
          "544:                 FAIL() << \"Expected std::runtime_error\";",
          "545:             }",
          "546:         }",
          "547:     }",
          "552:         libzcash::SaplingNote note(pk, 50000, 0x01);",
          "",
          "[Added Lines]",
          "533:         libzcash::SaplingNote note(pk, 50000, false);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "584:     {",
          "586:         auto builder = TransactionBuilder(consensusParams, canopyActivationHeight - 1);",
          "588:         ASSERT_NO_THROW(builder.AddSaplingSpend(expsk, note, uint256(), tree.witness()));",
          "589:     }",
          "591:     {",
          "594:         int height1 = canopyActivationHeight - 1;",
          "595:         int height2 = canopyActivationHeight + (ZIP212_GRACE_PERIOD) - 2;",
          "596:         int heights[] = {height1, height2};",
          "599:             for (int j = 0; j < sizeof(heights) / sizeof(int); j++) {",
          "601:                 auto builder = TransactionBuilder(consensusParams, heights[j]);",
          "603:                 ASSERT_NO_THROW(builder.AddSaplingSpend(expsk, note, uint256(), tree.witness()));",
          "604:             }",
          "605:         }",
          "",
          "[Removed Lines]",
          "587:         libzcash::SaplingNote note(pk, 50000, 0x01);",
          "593:         unsigned char leadBytes[] = {0x01, 0x02};",
          "598:         for (int i = 0; i < sizeof(leadBytes); i++) {",
          "600:                 printf(\"height %d: %d\\n\", j, heights[j]);",
          "602:                 libzcash::SaplingNote note(pk, 50000, leadBytes[i]);",
          "",
          "[Added Lines]",
          "568:         libzcash::SaplingNote note(pk, 50000, false);",
          "574:         unsigned char is_zip_212[] = {false, true};",
          "579:         for (int i = 0; i < sizeof(is_zip_212); i++) {",
          "582:                 libzcash::SaplingNote note(pk, 50000, is_zip_212[i]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "608:     {",
          "610:         auto builder = TransactionBuilder(consensusParams, canopyActivationHeight + ZIP212_GRACE_PERIOD - 1);",
          "612:         ASSERT_NO_THROW(builder.AddSaplingSpend(expsk, note, uint256(), tree.witness()));",
          "613:     }",
          "",
          "[Removed Lines]",
          "611:         libzcash::SaplingNote note(pk, 50000, 0x02);",
          "",
          "[Added Lines]",
          "591:         libzcash::SaplingNote note(pk, 50000, true);",
          "",
          "---------------"
        ],
        "src/main.cpp||src/main.cpp": [
          "File: src/main.cpp -> src/main.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "942:                     return state.DoS(",
          "943:                         DOS_LEVEL_BLOCK,",
          "944:                         error(\"CheckTransaction(): coinbase output description has invalid note plaintext version\"),",
          "",
          "[Removed Lines]",
          "941:                 if (canopyActive != (encPlaintext->get_lead_byte() == 0x02)) {",
          "",
          "[Added Lines]",
          "941:                 if (canopyActive != (encPlaintext->get_leadbyte() == 0x02)) {",
          "",
          "---------------"
        ],
        "src/miner.cpp||src/miner.cpp": [
          "File: src/miner.cpp -> src/miner.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "157:         mtx.valueBalance = -value;",
          "159:         uint256 ovk;",
          "165:         auto output = OutputDescriptionInfo(ovk, note, {{0xF6}});",
          "167:         auto ctx = librustzcash_sapling_proving_ctx_init();",
          "",
          "[Removed Lines]",
          "160:         unsigned char leadByte = 0x01;",
          "161:         if (Params().GetConsensus().NetworkUpgradeActive(nHeight, Consensus::UPGRADE_CANOPY)) {",
          "162:             leadByte = 0x02;",
          "163:         }",
          "164:         auto note = libzcash::SaplingNote(pa, value, leadByte);",
          "",
          "[Added Lines]",
          "160:         auto note = libzcash::SaplingNote(pa, value, (Params().GetConsensus().NetworkUpgradeActive(nHeight, Consensus::UPGRADE_CANOPY)));",
          "",
          "---------------"
        ],
        "src/transaction_builder.cpp||src/transaction_builder.cpp": [
          "File: src/transaction_builder.cpp -> src/transaction_builder.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "143:         throw std::runtime_error(\"TransactionBuilder cannot add Sapling spend to pre-Sapling transaction\");",
          "144:     }",
          "148:         throw std::runtime_error(\"TransactionBuilder: invalid note plaintext version\");",
          "149:     }",
          "",
          "[Removed Lines]",
          "147:     if (!libzcash::plaintext_version_is_valid(consensusParams, nHeight + 1, note.get_lead_byte())) {",
          "",
          "[Added Lines]",
          "146:     unsigned char leadbyte = 0x01;",
          "147:     if (note.get_is_zip_212() == true) {",
          "148:         leadbyte = 0x02;",
          "149:     }",
          "152:     if (!libzcash::plaintext_version_is_valid(consensusParams, nHeight + 1, leadbyte)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "168:         throw std::runtime_error(\"TransactionBuilder cannot add Sapling output to pre-Sapling transaction\");",
          "169:     }",
          "172:     if (Params().GetConsensus().NetworkUpgradeActive(nHeight + 1, Consensus::UPGRADE_CANOPY)) {",
          "174:     }",
          "176:     outputs.emplace_back(ovk, note, memo);",
          "177:     mtx.valueBalance -= value;",
          "178: }",
          "",
          "[Removed Lines]",
          "171:     unsigned char leadByte = 0x01;",
          "173:         leadByte = 0x02;",
          "175:     auto note = libzcash::SaplingNote(to, value, leadByte);",
          "",
          "[Added Lines]",
          "176:     bool is_zip_212 = false;",
          "178:         is_zip_212 = true;",
          "180:     auto note = libzcash::SaplingNote(to, value, is_zip_212);",
          "",
          "---------------"
        ],
        "src/utiltest.cpp||src/utiltest.cpp": [
          "File: src/utiltest.cpp -> src/utiltest.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "290: TestSaplingNote GetTestSaplingNote(const libzcash::SaplingPaymentAddress& pa, CAmount value) {",
          "293:     uint256 cm = note.cmu().get();",
          "294:     SaplingMerkleTree tree;",
          "295:     tree.append(cm);",
          "",
          "[Removed Lines]",
          "292:     libzcash::SaplingNote note(pa, value, 0x01);",
          "",
          "[Added Lines]",
          "292:     libzcash::SaplingNote note(pa, value, false);",
          "",
          "---------------"
        ],
        "src/wallet/gtest/test_wallet.cpp||src/wallet/gtest/test_wallet.cpp": [
          "File: src/wallet/gtest/test_wallet.cpp -> src/wallet/gtest/test_wallet.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "385:     UpdateNetworkUpgradeParameters(Consensus::UPGRADE_CANOPY, canopyActivationHeight);",
          "386:     auto consensusParams = Params().GetConsensus();",
          "389:     int builderHeights[] = {saplingActivationHeight, canopyActivationHeight};",
          "392:         TestWallet wallet;",
          "393:         LOCK(wallet.cs_wallet);",
          "",
          "[Removed Lines]",
          "388:     unsigned char leadBytes[] = {0x01, 0x02};",
          "391:     for (int ver = 0; ver < sizeof(leadBytes); ver++) {",
          "",
          "[Added Lines]",
          "388:     bool is_zip_212[] = {false, true};",
          "391:     for (int ver = 0; ver < sizeof(is_zip_212); ver++) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "398:         auto ivk = fvk.in_viewing_key();",
          "399:         auto pk = sk.DefaultAddress();",
          "402:         auto cm = note.cmu().get();",
          "403:         SaplingMerkleTree tree;",
          "404:         tree.append(cm);",
          "",
          "[Removed Lines]",
          "401:         libzcash::SaplingNote note(pk, 50000, leadBytes[ver]);",
          "",
          "[Added Lines]",
          "401:         libzcash::SaplingNote note(pk, 50000, is_zip_212[ver]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "660:     UpdateNetworkUpgradeParameters(Consensus::UPGRADE_CANOPY, canopyActivationHeight);",
          "661:     auto consensusParams = Params().GetConsensus();",
          "664:     int builderHeights[] = {saplingActivationHeight, canopyActivationHeight};",
          "667:         TestWallet wallet;",
          "668:         LOCK2(cs_main, wallet.cs_wallet);",
          "",
          "[Removed Lines]",
          "663:     unsigned char leadBytes[] = {0x01, 0x02};",
          "666:     for (int ver = 0; ver < sizeof(leadBytes); ver++) {",
          "",
          "[Added Lines]",
          "663:     bool is_zip_212[] = {false, true};",
          "666:     for (int ver = 0; ver < sizeof(is_zip_212); ver++) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "678:         ASSERT_TRUE(wallet.HaveSaplingSpendingKey(extfvk));",
          "682:         auto cm = note.cmu().get();",
          "683:         SaplingMerkleTree saplingTree;",
          "684:         saplingTree.append(cm);",
          "",
          "[Removed Lines]",
          "681:         libzcash::SaplingNote note(pk, 50000, leadBytes[ver]);",
          "",
          "[Added Lines]",
          "681:         libzcash::SaplingNote note(pk, 50000, is_zip_212[ver]);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1042:     UpdateNetworkUpgradeParameters(Consensus::UPGRADE_CANOPY, canopyActivationHeight);",
          "1043:     auto consensusParams = Params().GetConsensus();",
          "1046:     int builderHeights[] = {saplingActivationHeight, canopyActivationHeight};",
          "1049:         TestWallet wallet;",
          "1050:         LOCK2(cs_main, wallet.cs_wallet);",
          "",
          "[Removed Lines]",
          "1045:     unsigned char leadBytes[] = {0x01, 0x02};",
          "1048:     for (int ver = 0; ver < sizeof(leadBytes); ver++) {",
          "",
          "[Added Lines]",
          "1045:     bool is_zip_212[] = {false, true};",
          "1048:     for (int ver = 0; ver < sizeof(is_zip_212); ver++) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1057:         auto pk = sk.DefaultAddress();",
          "1061:         auto cm = note.cmu().get();",
          "1062:         SaplingMerkleTree saplingTree;",
          "1063:         saplingTree.append(cm);",
          "",
          "[Removed Lines]",
          "1060:         libzcash::SaplingNote note(pk, 50000, leadBytes[ver]);",
          "",
          "[Added Lines]",
          "1060:         libzcash::SaplingNote note(pk, 50000, is_zip_212[ver]);",
          "",
          "---------------"
        ],
        "src/wallet/wallet.cpp||src/wallet/wallet.cpp": [
          "File: src/wallet/wallet.cpp -> src/wallet/wallet.cpp"
        ],
        "src/zcash/Note.cpp||src/zcash/Note.cpp": [
          "File: src/zcash/Note.cpp -> src/zcash/Note.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "45: SaplingNote::SaplingNote(",
          "46:     const SaplingPaymentAddress& address,",
          "47:     const uint64_t value,",
          "49: ) : BaseNote(value) {",
          "50:     d = address.d;",
          "51:     pk_d = address.pk_d;",
          "55:         rseed = random_uint256();",
          "56:     } else {",
          "",
          "[Removed Lines]",
          "48:     unsigned char _leadByte",
          "52:     leadByte = _leadByte;",
          "53:     if (leadByte == 0x02) {",
          "",
          "[Added Lines]",
          "48:     bool _is_zip_212",
          "52:     is_zip_212 = _is_zip_212;",
          "53:     if (is_zip_212) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "159: {",
          "160:     d = note.d;",
          "161:     rseed = note.rseed;",
          "163: }",
          "",
          "[Removed Lines]",
          "162:     leadByte = note.leadByte;",
          "",
          "[Added Lines]",
          "162:     if (note.get_is_zip_212()) {",
          "163:         leadbyte = 0x02;",
          "164:     } else {",
          "165:         leadbyte = 0x01;",
          "166:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "168:     auto addr = ivk.address(d);",
          "169:     if (addr) {",
          "170:         auto tmp = SaplingNote(d, addr.get().pk_d, value_, rseed);",
          "172:         return tmp;",
          "173:     } else {",
          "174:         return boost::none;",
          "",
          "[Removed Lines]",
          "171:         tmp.leadByte = leadByte;",
          "",
          "[Added Lines]",
          "175:         tmp.is_zip_212 = false;",
          "176:         if (leadbyte == 0x02) {",
          "177:             tmp.is_zip_212 = true;",
          "178:         }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "217:         const SaplingNotePlaintext plaintext = *ret;",
          "221:             return boost::none;",
          "222:         }",
          "",
          "[Removed Lines]",
          "220:         if (!plaintext_version_is_valid(params, height, plaintext.leadByte)) {",
          "",
          "[Added Lines]",
          "227:         if (!plaintext_version_is_valid(params, height, plaintext.get_leadbyte())) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "254:         return boost::none;",
          "255:     }",
          "260:         uint256 expected_epk;",
          "",
          "[Removed Lines]",
          "257:     if (plaintext.leadByte == 0x02) {",
          "",
          "[Added Lines]",
          "264:     if (plaintext.get_leadbyte() == 0x02) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "310:         SaplingNotePlaintext plaintext = *ret;",
          "314:             return boost::none;",
          "315:         }",
          "",
          "[Removed Lines]",
          "313:         if (!plaintext_version_is_valid(params, height, plaintext.leadByte)) {",
          "",
          "[Added Lines]",
          "320:         if (!plaintext_version_is_valid(params, height, plaintext.get_leadbyte())) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "352:         return boost::none;",
          "353:     }",
          "358:         if (esk != plaintext.generate_esk()) {",
          "",
          "[Removed Lines]",
          "355:     if (plaintext.leadByte == 0x02) {",
          "",
          "[Added Lines]",
          "362:     if (plaintext.get_leadbyte() == 0x02) {",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "429: }",
          "431: uint256 SaplingNotePlaintext::rcm() const {",
          "433:         return PRF_rcm(rseed);",
          "434:     } else {",
          "435:         return rseed;",
          "",
          "[Removed Lines]",
          "432:     if (leadByte == 0x02) {",
          "",
          "[Added Lines]",
          "439:     if (leadbyte == 0x02) {",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "437: }",
          "439: uint256 SaplingNote::rcm() const {",
          "441:         return PRF_rcm(rseed);",
          "442:     } else {",
          "443:         return rseed;",
          "",
          "[Removed Lines]",
          "440:     if (leadByte == 0x02) {",
          "",
          "[Added Lines]",
          "447:     if (SaplingNote::get_is_zip_212()) {",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "445: }",
          "447: uint256 SaplingNotePlaintext::generate_esk() const {",
          "449:         return PRF_esk(rseed);",
          "450:     } else {",
          "451:         uint256 esk;",
          "",
          "[Removed Lines]",
          "448:     if (leadByte == 0x02) {",
          "",
          "[Added Lines]",
          "455:     if (leadbyte == 0x02) {",
          "",
          "---------------"
        ],
        "src/zcash/Note.hpp||src/zcash/Note.hpp": [
          "File: src/zcash/Note.hpp -> src/zcash/Note.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "42:     uint256 nullifier(const SproutSpendingKey& a_sk) const;",
          "43: };",
          "46:     int canopyActivationHeight = params.vUpgrades[Consensus::UPGRADE_CANOPY].nActivationHeight;",
          "50:         return false;",
          "51:     }",
          "52:     if (height >= canopyActivationHeight",
          "53:         && height < canopyActivationHeight + ZIP212_GRACE_PERIOD",
          "56:     {",
          "58:         return false;",
          "59:     }",
          "62:         return false;",
          "63:     }",
          "",
          "[Removed Lines]",
          "45: inline bool plaintext_version_is_valid(const Consensus::Params& params, int height, unsigned char leadByte) {",
          "48:     if (height < canopyActivationHeight && leadByte != 0x01) {",
          "54:         && leadByte != 0x01",
          "55:         && leadByte != 0x02)",
          "60:     if (height >= canopyActivationHeight + ZIP212_GRACE_PERIOD && leadByte != 0x02) {",
          "",
          "[Added Lines]",
          "45: inline bool plaintext_version_is_valid(const Consensus::Params& params, int height, unsigned char leadbyte) {",
          "48:     if (height < canopyActivationHeight && leadbyte != 0x01) {",
          "54:         && leadbyte != 0x01",
          "55:         && leadbyte != 0x02)",
          "60:     if (height >= canopyActivationHeight + ZIP212_GRACE_PERIOD && leadbyte != 0x02) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "68: private:",
          "69:     uint256 rseed;",
          "70:     friend class SaplingNotePlaintext;",
          "72: public:",
          "73:     diversifier_t d;",
          "74:     uint256 pk_d;",
          "",
          "[Removed Lines]",
          "71:     unsigned char leadByte;",
          "",
          "[Added Lines]",
          "71:     bool is_zip_212 = false; // whether the note was generated using ZIP 212 (activated at Canopy)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "76:     SaplingNote(diversifier_t d, uint256 pk_d, uint64_t value, uint256 rseed)",
          "77:             : BaseNote(value), d(d), pk_d(pk_d), rseed(rseed) {}",
          "81:     virtual ~SaplingNote() {};",
          "",
          "[Removed Lines]",
          "79:     SaplingNote(const SaplingPaymentAddress &address, uint64_t value, unsigned char leadByte);",
          "",
          "[Added Lines]",
          "79:     SaplingNote(const SaplingPaymentAddress &address, uint64_t value, bool is_zip_212);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "84:     boost::optional<uint256> nullifier(const SaplingFullViewingKey &vk, const uint64_t position) const;",
          "85:     uint256 rcm() const;",
          "89:     }",
          "90: };",
          "",
          "[Removed Lines]",
          "87:     unsigned char get_lead_byte() const {",
          "88:         return leadByte;",
          "",
          "[Added Lines]",
          "87:     bool get_is_zip_212() const {",
          "88:         return is_zip_212;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "121:     template <typename Stream, typename Operation>",
          "122:     inline void SerializationOp(Stream& s, Operation ser_action) {",
          "127:             throw std::ios_base::failure(\"lead byte of SproutNotePlaintext is not recognized\");",
          "128:         }",
          "",
          "[Removed Lines]",
          "123:         unsigned char leadByte = 0x00;",
          "124:         READWRITE(leadByte);",
          "126:         if (leadByte != 0x00) {",
          "",
          "[Added Lines]",
          "123:         unsigned char leadbyte = 0x00;",
          "124:         READWRITE(leadbyte);",
          "126:         if (leadbyte != 0x00) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "150: class SaplingNotePlaintext : public BaseNotePlaintext {",
          "151: private:",
          "152:     uint256 rseed;",
          "154: public:",
          "155:     diversifier_t d;",
          "",
          "[Removed Lines]",
          "153:     unsigned char leadByte;",
          "",
          "[Added Lines]",
          "153:     unsigned char leadbyte;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "214:     template <typename Stream, typename Operation>",
          "215:     inline void SerializationOp(Stream& s, Operation ser_action) {",
          "217:         READWRITE(d);           // 11 bytes",
          "218:         READWRITE(value_);      // 8 bytes",
          "219:         READWRITE(rseed);       // 32 bytes",
          "",
          "[Removed Lines]",
          "216:         READWRITE(leadByte);    // 1 byte",
          "",
          "[Added Lines]",
          "216:         READWRITE(leadbyte);    // 1 byte",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "225:     uint256 rcm() const;",
          "226:     uint256 generate_esk() const;",
          "229:     }",
          "230: };",
          "",
          "[Removed Lines]",
          "227:     unsigned char get_lead_byte() const {",
          "228:         return leadByte;",
          "",
          "[Added Lines]",
          "227:     unsigned char get_leadbyte() const {",
          "228:         return leadbyte;",
          "",
          "---------------"
        ],
        "src/zcbenchmarks.cpp||src/zcbenchmarks.cpp": [
          "File: src/zcbenchmarks.cpp -> src/zcbenchmarks.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "594:     auto sk = libzcash::SaplingSpendingKey::random();",
          "595:     auto expsk = sk.expanded_spending_key();",
          "596:     auto address = sk.default_address();",
          "598:     SaplingMerkleTree tree;",
          "599:     auto maybe_cmu = note.cmu();",
          "600:     tree.append(maybe_cmu.get());",
          "",
          "[Removed Lines]",
          "597:     SaplingNote note(address, GetRand(MAX_MONEY), 0x01);",
          "",
          "[Added Lines]",
          "597:     SaplingNote note(address, GetRand(MAX_MONEY), false);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "647:     auto address = sk.default_address();",
          "649:     std::array<unsigned char, ZC_MEMO_SIZE> memo;",
          "652:     libzcash::SaplingNotePlaintext notePlaintext(note, memo);",
          "653:     auto res = notePlaintext.encrypt(note.pk_d);",
          "",
          "[Removed Lines]",
          "650:     SaplingNote note(address, GetRand(MAX_MONEY), 0x01);",
          "",
          "[Added Lines]",
          "650:     SaplingNote note(address, GetRand(MAX_MONEY), false);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2f4d7e35c93cbf62dc3b8c703e063e6069e7c8cb",
      "candidate_info": {
        "commit_hash": "2f4d7e35c93cbf62dc3b8c703e063e6069e7c8cb",
        "repo": "zcash/zcash",
        "commit_url": "https://github.com/zcash/zcash/commit/2f4d7e35c93cbf62dc3b8c703e063e6069e7c8cb",
        "files": [
          "src/zcash/Note.cpp",
          "src/zcash/Note.hpp"
        ],
        "message": "Throw error in plaintext deserialization",
        "before_after_code_files": [
          "src/zcash/Note.cpp||src/zcash/Note.cpp",
          "src/zcash/Note.hpp||src/zcash/Note.hpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/zcash/Note.cpp||src/zcash/Note.cpp"
          ],
          "candidate": [
            "src/zcash/Note.cpp||src/zcash/Note.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/zcash/Note.cpp||src/zcash/Note.cpp": [
          "File: src/zcash/Note.cpp -> src/zcash/Note.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "196:     }",
          "208: }",
          "210: boost::optional<SaplingNotePlaintext> SaplingNotePlaintext::decrypt(",
          "",
          "[Removed Lines]",
          "199:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
          "200:     ss << pt.get();",
          "202:     SaplingOutgoingPlaintext ret;",
          "203:     ss >> ret;",
          "205:     assert(ss.size() == 0);",
          "207:     return ret;",
          "",
          "[Added Lines]",
          "199:     try {",
          "200:         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
          "201:         ss << pt.get();",
          "202:         SaplingOutgoingPlaintext ret;",
          "203:         ss >> ret;",
          "204:         assert(ss.size() == 0);",
          "205:         return ret;",
          "206:     } catch (const boost::thread_interrupted&) {",
          "207:         throw;",
          "208:     } catch (...) {",
          "209:         return boost::none;",
          "210:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "290:     };",
          "300: }",
          "302: boost::optional<SaplingNotePlaintext> SaplingNotePlaintext::decrypt(",
          "",
          "[Removed Lines]",
          "293:     SaplingNotePlaintext plaintext;",
          "294:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
          "295:     ss << encPlaintext.get();",
          "296:     ss >> plaintext;",
          "297:     assert(ss.size() == 0);",
          "299:     return plaintext;",
          "",
          "[Added Lines]",
          "296:     SaplingNotePlaintext ret;",
          "297:     try {",
          "298:         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
          "299:         ss << encPlaintext.get();",
          "300:         ss >> ret;",
          "301:         assert(ss.size() == 0);",
          "302:         return ret;",
          "303:     } catch (const boost::thread_interrupted&) {",
          "304:         throw;",
          "305:     } catch (...) {",
          "306:         return boost::none;",
          "307:     }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "384:     };",
          "394: }",
          "396: boost::optional<SaplingNotePlaintextEncryptionResult> SaplingNotePlaintext::encrypt(const uint256& pk_d) const",
          "",
          "[Removed Lines]",
          "387:     SaplingNotePlaintext plaintext;",
          "388:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
          "389:     ss << encPlaintext.get();",
          "390:     ss >> plaintext;",
          "391:     assert(ss.size() == 0);",
          "393:     return plaintext;",
          "",
          "[Added Lines]",
          "395:     SaplingNotePlaintext ret;",
          "396:     try {",
          "397:         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
          "398:         ss << encPlaintext.get();",
          "399:         ss >> ret;",
          "400:         assert(ss.size() == 0);",
          "401:         return ret;",
          "402:     } catch (const boost::thread_interrupted&) {",
          "403:         throw;",
          "404:     } catch (...) {",
          "405:         return boost::none;",
          "406:     }",
          "",
          "---------------"
        ],
        "src/zcash/Note.hpp||src/zcash/Note.hpp": [
          "File: src/zcash/Note.hpp -> src/zcash/Note.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "214:     template <typename Stream, typename Operation>",
          "215:     inline void SerializationOp(Stream& s, Operation ser_action) {",
          "217:         READWRITE(d);           // 11 bytes",
          "218:         READWRITE(value_);      // 8 bytes",
          "219:         READWRITE(rseed);       // 32 bytes",
          "",
          "[Removed Lines]",
          "216:         READWRITE(leadbyte);    // 1 byte",
          "",
          "[Added Lines]",
          "216:         READWRITE(leadbyte);",
          "218:         if (leadbyte != 0x01 && leadbyte != 0x02) {",
          "219:             throw std::ios_base::failure(\"lead byte of SaplingNotePlaintext is not recognized\");",
          "220:         }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6402c589c6cb00185e14d4f8c4b6bb9acc981489",
      "candidate_info": {
        "commit_hash": "6402c589c6cb00185e14d4f8c4b6bb9acc981489",
        "repo": "zcash/zcash",
        "commit_url": "https://github.com/zcash/zcash/commit/6402c589c6cb00185e14d4f8c4b6bb9acc981489",
        "files": [
          "src/wallet/rpcwallet.cpp",
          "src/wallet/wallet.cpp",
          "src/wallet/wallet.h",
          "src/zcash/Note.cpp",
          "src/zcash/Note.hpp",
          "src/zcbenchmarks.cpp"
        ],
        "message": "Refactor SaplingNotePlaintext::decrypt\n\nBreak up plaintext decryption into height-dependent and non-height-dependent parts.",
        "before_after_code_files": [
          "src/wallet/rpcwallet.cpp||src/wallet/rpcwallet.cpp",
          "src/wallet/wallet.cpp||src/wallet/wallet.cpp",
          "src/wallet/wallet.h||src/wallet/wallet.h",
          "src/zcash/Note.cpp||src/zcash/Note.cpp",
          "src/zcash/Note.hpp||src/zcash/Note.hpp",
          "src/zcbenchmarks.cpp||src/zcbenchmarks.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/zcash/Note.cpp||src/zcash/Note.cpp"
          ],
          "candidate": [
            "src/zcash/Note.cpp||src/zcash/Note.cpp"
          ]
        }
      },
      "candidate_diff": {
        "src/wallet/rpcwallet.cpp||src/wallet/rpcwallet.cpp": [
          "File: src/wallet/rpcwallet.cpp -> src/wallet/rpcwallet.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "3769:         auto op = res->second;",
          "3770:         auto wtxPrev = pwalletMain->mapWallet.at(op.hash);",
          "3774:         auto notePt = decrypted.first;",
          "3775:         auto pa = decrypted.second;",
          "",
          "[Removed Lines]",
          "3773:         auto decrypted = wtxPrev.DecryptSaplingNote(Params().GetConsensus(), wtxPrev.nExpiryHeight, op).get();",
          "",
          "[Added Lines]",
          "3774:         auto decrypted = wtxPrev.DecryptSaplingNoteWithoutLeadByteCheck(op).get();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3798:         SaplingPaymentAddress pa;",
          "3799:         bool isOutgoing;",
          "3803:         if (decrypted) {",
          "3804:             notePt = decrypted->first;",
          "3805:             pa = decrypted->second;",
          "3806:             isOutgoing = false;",
          "3807:         } else {",
          "3811:             if (recovered) {",
          "3812:                 notePt = recovered->first;",
          "3813:                 pa = recovered->second;",
          "",
          "[Removed Lines]",
          "3802:         auto decrypted = wtx.DecryptSaplingNote(Params().GetConsensus(), wtx.nExpiryHeight, op);",
          "3810:             auto recovered = wtx.RecoverSaplingNote(Params().GetConsensus(), wtx.nExpiryHeight, op, ovks);",
          "",
          "[Added Lines]",
          "3804:         auto decrypted = wtx.DecryptSaplingNoteWithoutLeadByteCheck(op);",
          "3811:             auto recovered = wtx.RecoverSaplingNoteWithoutLeadByteCheck(op, ovks);",
          "",
          "---------------"
        ],
        "src/wallet/wallet.cpp||src/wallet/wallet.cpp": [
          "File: src/wallet/wallet.cpp -> src/wallet/wallet.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "1496:             auto extfvk = mapSaplingFullViewingKeys.at(nd.ivk);",
          "1497:             OutputDescription output = wtx.vShieldedOutput[op.n];",
          "1501:             if (!optPlaintext) {",
          "",
          "[Removed Lines]",
          "1500:             auto optPlaintext = SaplingNotePlaintext::decrypt(Params().GetConsensus(), wtx.nExpiryHeight, output.encCiphertext, nd.ivk, output.ephemeralKey, output.cmu);",
          "",
          "[Added Lines]",
          "1499:             auto optDeserialized = SaplingNotePlaintext::attempt_sapling_enc_decryption_deserialization(output.encCiphertext, nd.ivk, output.ephemeralKey);",
          "1501:             if (!optDeserialized) {",
          "1504:                 assert(false);",
          "1505:             }",
          "1507:             auto optPlaintext = SaplingNotePlaintext::plaintext_checks_without_height(*optDeserialized, nd.ivk, output.ephemeralKey, output.cmu);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1716:         bool fExisted = mapWallet.count(tx.GetHash()) != 0;",
          "1717:         if (fExisted && !fUpdate) return false;",
          "1718:         auto sproutNoteData = FindMySproutNotes(tx);",
          "1720:         auto saplingNoteData = saplingNoteDataAndAddressesToAdd.first;",
          "1721:         auto addressesToAdd = saplingNoteDataAndAddressesToAdd.second;",
          "1722:         for (const auto &addressToAdd : addressesToAdd) {",
          "",
          "[Removed Lines]",
          "1719:         auto saplingNoteDataAndAddressesToAdd = FindMySaplingNotes(tx);",
          "",
          "[Added Lines]",
          "1726:         auto saplingNoteDataAndAddressesToAdd = FindMySaplingNotes(tx, chainActive.Height());",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1894: {",
          "1895:     LOCK(cs_KeyStore);",
          "1896:     uint256 hash = tx.GetHash();",
          "",
          "[Removed Lines]",
          "1893: std::pair<mapSaplingNoteData_t, SaplingIncomingViewingKeyMap> CWallet::FindMySaplingNotes(const CTransaction &tx) const",
          "",
          "[Added Lines]",
          "1900: std::pair<mapSaplingNoteData_t, SaplingIncomingViewingKeyMap> CWallet::FindMySaplingNotes(const CTransaction &tx, int height) const",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1904:         for (auto it = mapSaplingFullViewingKeys.begin(); it != mapSaplingFullViewingKeys.end(); ++it) {",
          "1905:             SaplingIncomingViewingKey ivk = it->first;",
          "1909:             if (!result) {",
          "1910:                 continue;",
          "1911:             }",
          "",
          "[Removed Lines]",
          "1908:             auto result = SaplingNotePlaintext::decrypt(Params().GetConsensus(), tx.nExpiryHeight, output.encCiphertext, ivk, output.ephemeralKey, output.cmu);",
          "",
          "[Added Lines]",
          "1914:             auto result = SaplingNotePlaintext::decrypt(Params().GetConsensus(), height, output.encCiphertext, ivk, output.ephemeralKey, output.cmu);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2331:     return std::make_pair(notePt, pa);",
          "2332: }",
          "2334: boost::optional<std::pair<",
          "2335:     SaplingNotePlaintext,",
          "2336:     SaplingPaymentAddress>> CWalletTx::RecoverSaplingNote(const Consensus::Params& params, int height, SaplingOutPoint op, std::set<uint256>& ovks) const",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2340: boost::optional<std::pair<",
          "2341:     SaplingNotePlaintext,",
          "2342:     SaplingPaymentAddress>> CWalletTx::DecryptSaplingNoteWithoutLeadByteCheck(SaplingOutPoint op) const",
          "2343: {",
          "2345:     if (this->mapSaplingNoteData.count(op) == 0) {",
          "2346:         return boost::none;",
          "2347:     }",
          "2349:     auto output = this->vShieldedOutput[op.n];",
          "2350:     auto nd = this->mapSaplingNoteData.at(op);",
          "2352:     auto optDeserialized = SaplingNotePlaintext::attempt_sapling_enc_decryption_deserialization(output.encCiphertext, nd.ivk, output.ephemeralKey);",
          "2354:     if (!optDeserialized) {",
          "2357:         assert(false);",
          "2358:     }",
          "2360:     auto maybe_pt = SaplingNotePlaintext::plaintext_checks_without_height(",
          "2362:         nd.ivk,",
          "2363:         output.ephemeralKey,",
          "2364:         output.cmu);",
          "2365:     assert(static_cast<bool>(maybe_pt));",
          "2366:     auto notePt = maybe_pt.get();",
          "2368:     auto maybe_pa = nd.ivk.address(notePt.d);",
          "2369:     assert(static_cast<bool>(maybe_pa));",
          "2370:     auto pa = maybe_pa.get();",
          "2372:     return std::make_pair(notePt, pa);",
          "2373: }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "2366:     return boost::none;",
          "2367: }",
          "2369: int64_t CWalletTx::GetTxTime() const",
          "2370: {",
          "2371:     int64_t n = nTimeSmart;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2410: boost::optional<std::pair<",
          "2411:     SaplingNotePlaintext,",
          "2412:     SaplingPaymentAddress>> CWalletTx::RecoverSaplingNoteWithoutLeadByteCheck(SaplingOutPoint op, std::set<uint256>& ovks) const",
          "2413: {",
          "2414:     auto output = this->vShieldedOutput[op.n];",
          "2416:     for (auto ovk : ovks) {",
          "2417:         auto outPt = SaplingOutgoingPlaintext::decrypt(",
          "2418:             output.outCiphertext,",
          "2419:             ovk,",
          "2420:             output.cv,",
          "2421:             output.cmu,",
          "2422:             output.ephemeralKey);",
          "2423:         if (!outPt) {",
          "2424:             continue;",
          "2425:         }",
          "2427:         auto optDeserialized = SaplingNotePlaintext::attempt_sapling_enc_decryption_deserialization(output.encCiphertext, output.ephemeralKey, outPt->esk, outPt->pk_d);",
          "2429:         if (!optDeserialized) {",
          "2432:             assert(false);",
          "2433:         }",
          "2435:         auto maybe_pt = SaplingNotePlaintext::plaintext_checks_without_height(",
          "2437:             output.ephemeralKey,",
          "2438:             outPt->esk,",
          "2439:             outPt->pk_d,",
          "2440:             output.cmu);",
          "2441:         assert(static_cast<bool>(maybe_pt));",
          "2442:         auto notePt = maybe_pt.get();",
          "2444:         return std::make_pair(notePt, SaplingPaymentAddress(notePt.d, outPt->pk_d));",
          "2445:     }",
          "2448:     return boost::none;",
          "2449: }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "4982:             SaplingOutPoint op = pair.first;",
          "4983:             SaplingNoteData nd = pair.second;",
          "4990:                 nd.ivk,",
          "4991:                 wtx.vShieldedOutput[op.n].ephemeralKey,",
          "4992:                 wtx.vShieldedOutput[op.n].cmu);",
          "",
          "[Removed Lines]",
          "4986:             auto maybe_pt = SaplingNotePlaintext::decrypt(",
          "4987:                 Params().GetConsensus(),",
          "4988:                 wtx.nExpiryHeight,",
          "4989:                 wtx.vShieldedOutput[op.n].encCiphertext,",
          "",
          "[Added Lines]",
          "5067:             auto optDeserialized = SaplingNotePlaintext::attempt_sapling_enc_decryption_deserialization(wtx.vShieldedOutput[op.n].encCiphertext, nd.ivk, wtx.vShieldedOutput[op.n].ephemeralKey);",
          "5069:             if (!optDeserialized) {",
          "5072:                 assert(false);",
          "5073:             }",
          "5076:             auto maybe_pt = SaplingNotePlaintext::plaintext_checks_without_height(",
          "",
          "---------------"
        ],
        "src/wallet/wallet.h||src/wallet/wallet.h": [
          "File: src/wallet/wallet.h -> src/wallet/wallet.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "567:     boost::optional<std::pair<",
          "568:         libzcash::SaplingNotePlaintext,",
          "569:         libzcash::SaplingPaymentAddress>> DecryptSaplingNote(const Consensus::Params& params, int height, SaplingOutPoint op) const;",
          "570:     boost::optional<std::pair<",
          "571:         libzcash::SaplingNotePlaintext,",
          "572:         libzcash::SaplingPaymentAddress>> RecoverSaplingNote(const Consensus::Params& params, int height,",
          "573:             SaplingOutPoint op, std::set<uint256>& ovks) const;",
          "576:     CAmount GetDebit(const isminefilter& filter) const;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "570:     boost::optional<std::pair<",
          "571:         libzcash::SaplingNotePlaintext,",
          "572:         libzcash::SaplingPaymentAddress>> DecryptSaplingNoteWithoutLeadByteCheck(SaplingOutPoint op) const;",
          "577:     boost::optional<std::pair<",
          "578:         libzcash::SaplingNotePlaintext,",
          "579:         libzcash::SaplingPaymentAddress>> RecoverSaplingNoteWithoutLeadByteCheck(SaplingOutPoint op, std::set<uint256>& ovks) const;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1221:         const uint256& hSig,",
          "1222:         uint8_t n) const;",
          "1223:     mapSproutNoteData_t FindMySproutNotes(const CTransaction& tx) const;",
          "1225:     bool IsSproutNullifierFromMe(const uint256& nullifier) const;",
          "1226:     bool IsSaplingNullifierFromMe(const uint256& nullifier) const;",
          "",
          "[Removed Lines]",
          "1224:     std::pair<mapSaplingNoteData_t, SaplingIncomingViewingKeyMap> FindMySaplingNotes(const CTransaction& tx) const;",
          "",
          "[Added Lines]",
          "1230:     std::pair<mapSaplingNoteData_t, SaplingIncomingViewingKeyMap> FindMySaplingNotes(const CTransaction& tx, int height) const;",
          "",
          "---------------"
        ],
        "src/zcash/Note.cpp||src/zcash/Note.cpp": [
          "File: src/zcash/Note.cpp -> src/zcash/Note.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "209:     const uint256 &cmu",
          "210: )",
          "211: {",
          "214:         return boost::none;",
          "227:     }",
          "229:     uint256 pk_d;",
          "231:         return boost::none;",
          "232:     }",
          "234:     uint256 cmu_expected;",
          "236:     if (!librustzcash_sapling_compute_cm(",
          "238:         pk_d.begin(),",
          "240:         rcm.begin(),",
          "241:         cmu_expected.begin()",
          "242:     ))",
          "",
          "[Removed Lines]",
          "212:     auto pt = AttemptSaplingEncDecryption(ciphertext, ivk, epk);",
          "213:     if (!pt) {",
          "215:     }",
          "218:     SaplingNotePlaintext ret;",
          "219:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
          "220:     ss << pt.get();",
          "221:     ss >> ret;",
          "222:     assert(ss.size() == 0);",
          "225:     if (!plaintext_version_is_valid(params, height, ret.leadByte)) {",
          "226:         return boost::none;",
          "230:     if (!librustzcash_ivk_to_pkd(ivk.begin(), ret.d.data(), pk_d.begin())) {",
          "235:     uint256 rcm = ret.rcm();",
          "237:         ret.d.data(),",
          "239:         ret.value(),",
          "",
          "[Added Lines]",
          "212:     auto ret = attempt_sapling_enc_decryption_deserialization(ciphertext, ivk, epk);",
          "214:     if (!ret) {",
          "216:     } else {",
          "217:         const SaplingNotePlaintext plaintext = *ret;",
          "220:         if (!plaintext_version_is_valid(params, height, plaintext.leadByte)) {",
          "221:             return boost::none;",
          "222:         }",
          "224:         return plaintext_checks_without_height(plaintext, ivk, epk, cmu);",
          "226: }",
          "228: boost::optional<SaplingNotePlaintext> SaplingNotePlaintext::plaintext_checks_without_height(",
          "229:     const SaplingNotePlaintext &plaintext,",
          "230:     const uint256 &ivk,",
          "231:     const uint256 &epk,",
          "232:     const uint256 &cmu",
          "233: )",
          "234: {",
          "236:     if (!librustzcash_ivk_to_pkd(ivk.begin(), plaintext.d.data(), pk_d.begin())) {",
          "241:     uint256 rcm = plaintext.rcm();",
          "243:         plaintext.d.data(),",
          "245:         plaintext.value(),",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:         return boost::none;",
          "249:     }",
          "254:         uint256 expected_epk;",
          "257:             return boost::none;",
          "258:         }",
          "259:         if (expected_epk != epk) {",
          "",
          "[Removed Lines]",
          "251:     if (ret.leadByte == 0x02) {",
          "255:         uint256 esk = ret.generate_esk();",
          "256:         if (!librustzcash_sapling_ka_derivepublic(ret.d.data(), esk.begin(), expected_epk.begin())) {",
          "",
          "[Added Lines]",
          "257:     if (plaintext.leadByte == 0x02) {",
          "261:         uint256 esk = plaintext.generate_esk();",
          "262:         if (!librustzcash_sapling_ka_derivepublic(plaintext.d.data(), esk.begin(), expected_epk.begin())) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "261:         }",
          "262:     }",
          "265: }",
          "267: boost::optional<SaplingNotePlaintext> SaplingNotePlaintext::decrypt(",
          "",
          "[Removed Lines]",
          "264:     return ret;",
          "",
          "[Added Lines]",
          "270:     return plaintext;",
          "271: }",
          "273: boost::optional<SaplingNotePlaintext> SaplingNotePlaintext::attempt_sapling_enc_decryption_deserialization(",
          "274:     const SaplingEncCiphertext &ciphertext,",
          "275:     const uint256 &ivk,",
          "276:     const uint256 &epk",
          "277: )",
          "278: {",
          "279:     auto encPlaintext = AttemptSaplingEncDecryption(ciphertext, ivk, epk);",
          "281:     if (!encPlaintext) {",
          "282:         return boost::none;",
          "283:     };",
          "286:     SaplingNotePlaintext plaintext;",
          "287:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
          "288:     ss << encPlaintext.get();",
          "289:     ss >> plaintext;",
          "290:     assert(ss.size() == 0);",
          "292:     return plaintext;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "274:     const uint256 &cmu",
          "275: )",
          "276: {",
          "279:         return boost::none;",
          "292:     }",
          "295:     uint256 expected_epk;",
          "297:         return boost::none;",
          "298:     }",
          "299:     if (expected_epk != epk) {",
          "",
          "[Removed Lines]",
          "277:     auto pt = AttemptSaplingEncDecryption(ciphertext, epk, esk, pk_d);",
          "278:     if (!pt) {",
          "280:     }",
          "283:     SaplingNotePlaintext ret;",
          "284:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
          "285:     ss << pt.get();",
          "286:     ss >> ret;",
          "287:     assert(ss.size() == 0);",
          "290:     if (!plaintext_version_is_valid(params, height, ret.leadByte)) {",
          "291:         return boost::none;",
          "296:     if (!librustzcash_sapling_ka_derivepublic(ret.d.data(), esk.begin(), expected_epk.begin())) {",
          "",
          "[Added Lines]",
          "305:     auto ret = attempt_sapling_enc_decryption_deserialization(ciphertext, epk, esk, pk_d);",
          "307:     if (!ret) {",
          "309:     } else {",
          "310:         SaplingNotePlaintext plaintext = *ret;",
          "313:         if (!plaintext_version_is_valid(params, height, plaintext.leadByte)) {",
          "314:             return boost::none;",
          "315:         }",
          "317:         return plaintext_checks_without_height(plaintext, epk, esk, pk_d, cmu);",
          "319: }",
          "321: boost::optional<SaplingNotePlaintext> SaplingNotePlaintext::plaintext_checks_without_height(",
          "322:     const SaplingNotePlaintext &plaintext,",
          "323:     const uint256 &epk,",
          "324:     const uint256 &esk,",
          "325:     const uint256 &pk_d,",
          "326:     const uint256 &cmu",
          "327: )",
          "328: {",
          "331:     if (!librustzcash_sapling_ka_derivepublic(plaintext.d.data(), esk.begin(), expected_epk.begin())) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "301:     }",
          "303:     uint256 cmu_expected;",
          "305:     if (!librustzcash_sapling_compute_cm(",
          "307:         pk_d.begin(),",
          "309:         rcm.begin(),",
          "310:         cmu_expected.begin()",
          "311:     ))",
          "",
          "[Removed Lines]",
          "304:     uint256 rcm = ret.rcm();",
          "306:         ret.d.data(),",
          "308:         ret.value(),",
          "",
          "[Added Lines]",
          "339:     uint256 rcm = plaintext.rcm();",
          "341:         plaintext.d.data(),",
          "343:         plaintext.value(),",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "317:         return boost::none;",
          "318:     }",
          "324:             return boost::none;",
          "325:         }",
          "326:     }",
          "329: }",
          "331: boost::optional<SaplingNotePlaintextEncryptionResult> SaplingNotePlaintext::encrypt(const uint256& pk_d) const",
          "",
          "[Removed Lines]",
          "320:     if (ret.leadByte == 0x02) {",
          "323:         if (esk != ret.generate_esk()) {",
          "328:     return ret;",
          "",
          "[Added Lines]",
          "355:     if (plaintext.leadByte == 0x02) {",
          "358:         if (esk != plaintext.generate_esk()) {",
          "363:     return plaintext;",
          "364: }",
          "366: boost::optional<SaplingNotePlaintext> SaplingNotePlaintext::attempt_sapling_enc_decryption_deserialization(",
          "367:     const SaplingEncCiphertext &ciphertext,",
          "368:     const uint256 &epk,",
          "369:     const uint256 &esk,",
          "370:     const uint256 &pk_d",
          "371: )",
          "372: {",
          "373:     auto encPlaintext = AttemptSaplingEncDecryption(ciphertext, epk, esk, pk_d);",
          "375:     if (!encPlaintext) {",
          "376:         return boost::none;",
          "377:     };",
          "380:     SaplingNotePlaintext plaintext;",
          "381:     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);",
          "382:     ss << encPlaintext.get();",
          "383:     ss >> plaintext;",
          "384:     assert(ss.size() == 0);",
          "386:     return plaintext;",
          "",
          "---------------"
        ],
        "src/zcash/Note.hpp||src/zcash/Note.hpp": [
          "File: src/zcash/Note.hpp -> src/zcash/Note.hpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "167:         const uint256 &cmu",
          "168:     );",
          "170:     static boost::optional<SaplingNotePlaintext> decrypt(",
          "171:         const Consensus::Params& params,",
          "172:         int height,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "170:     static boost::optional<SaplingNotePlaintext> plaintext_checks_without_height(",
          "171:         const SaplingNotePlaintext &plaintext,",
          "172:         const uint256 &ivk,",
          "173:         const uint256 &epk,",
          "174:         const uint256 &cmu",
          "175:     );",
          "177:     static boost::optional<SaplingNotePlaintext> attempt_sapling_enc_decryption_deserialization(",
          "178:         const SaplingEncCiphertext &ciphertext,",
          "179:         const uint256 &ivk,",
          "180:         const uint256 &epk",
          "181:     );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "177:         const uint256 &cmu",
          "178:     );",
          "180:     boost::optional<SaplingNote> note(const SaplingIncomingViewingKey& ivk) const;",
          "182:     virtual ~SaplingNotePlaintext() {}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "193:     static boost::optional<SaplingNotePlaintext> plaintext_checks_without_height(",
          "194:         const SaplingNotePlaintext &plaintext,",
          "195:         const uint256 &epk,",
          "196:         const uint256 &esk,",
          "197:         const uint256 &pk_d,",
          "198:         const uint256 &cmu",
          "199:     );",
          "201:     static boost::optional<SaplingNotePlaintext> attempt_sapling_enc_decryption_deserialization(",
          "202:         const SaplingEncCiphertext &ciphertext,",
          "203:         const uint256 &epk,",
          "204:         const uint256 &esk,",
          "205:         const uint256 &pk_d",
          "206:     );",
          "",
          "---------------"
        ],
        "src/zcbenchmarks.cpp||src/zcbenchmarks.cpp": [
          "File: src/zcbenchmarks.cpp -> src/zcbenchmarks.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "308:     struct timeval tv_start;",
          "309:     timer_start(tv_start);",
          "311:     assert(noteDataMapAndAddressesToAdd.first.empty());",
          "312:     return timer_stop(tv_start);",
          "313: }",
          "",
          "[Removed Lines]",
          "310:     auto noteDataMapAndAddressesToAdd = wallet.FindMySaplingNotes(tx);",
          "",
          "[Added Lines]",
          "310:     auto noteDataMapAndAddressesToAdd = wallet.FindMySaplingNotes(tx, 1);",
          "",
          "---------------"
        ]
      }
    }
  ]
}