{
  "cve_id": "CVE-2020-29367",
  "cve_desc": "blosc2.c in Blosc C-Blosc2 through 2.0.0.beta.5 has a heap-based buffer overflow when there is a lack of space to write compressed data.",
  "repo": "Blosc/c-blosc2",
  "patch_hash": "c4c6470e88210afc95262c8b9fcc27e30ca043ee",
  "patch_info": {
    "commit_hash": "c4c6470e88210afc95262c8b9fcc27e30ca043ee",
    "repo": "Blosc/c-blosc2",
    "commit_url": "https://github.com/Blosc/c-blosc2/commit/c4c6470e88210afc95262c8b9fcc27e30ca043ee",
    "files": [
      "blosc/blosc2.c"
    ],
    "message": "Fixed asan heap buffer overflow when not enough space to write compressed block size.",
    "before_after_code_files": [
      "blosc/blosc2.c||blosc/blosc2.c"
    ]
  },
  "patch_diff": {
    "blosc/blosc2.c||blosc/blosc2.c": [
      "File: blosc/blosc2.c -> blosc/blosc2.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "708: static int blosc_c(struct thread_context* thread_context, int32_t bsize,",
      "710:                    const uint8_t* src, const int32_t offset, uint8_t* dest,",
      "711:                    uint8_t* tmp, uint8_t* tmp2) {",
      "712:   blosc2_context* context = thread_context->parent_context;",
      "",
      "[Removed Lines]",
      "709:                    int32_t leftoverblock, int32_t ntbytes, int32_t maxbytes,",
      "",
      "[Added Lines]",
      "709:                    int32_t leftoverblock, int32_t ntbytes, int32_t destsize,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "772:     if (get_run(ip, ipbound)) {",
      "774:       int32_t value = _src[j * neblock];",
      "775:       _sw32(dest - 4, -value);",
      "776:       continue;",
      "777:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "775:       if (ntbytes > destsize) {",
      "777:         return -1;",
      "778:       }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "782:       maxout = (int32_t)snappy_max_compressed_length((size_t)neblock);",
      "783:     }",
      "788:       if (maxout <= 0) {",
      "790:       }",
      "",
      "[Removed Lines]",
      "785:     if (ntbytes + maxout > maxbytes) {",
      "787:       maxout = (int64_t)maxbytes - (int64_t)ntbytes;",
      "",
      "[Added Lines]",
      "789:     if (ntbytes + maxout > destsize) {",
      "791:       maxout = (int64_t)destsize - (int64_t)ntbytes;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "864:         }",
      "865:         memcpy(dest, _src + j * neblock, (unsigned int)neblock);",
      "",
      "[Removed Lines]",
      "862:         if ((ntbytes + neblock) > maxbytes) {",
      "",
      "[Added Lines]",
      "866:         if ((ntbytes + neblock) > destsize) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "cb15f1b2904c0c4087bb5422cf18a7091fc5ac82",
      "candidate_info": {
        "commit_hash": "cb15f1b2904c0c4087bb5422cf18a7091fc5ac82",
        "repo": "Blosc/c-blosc2",
        "commit_url": "https://github.com/Blosc/c-blosc2/commit/cb15f1b2904c0c4087bb5422cf18a7091fc5ac82",
        "files": [
          "README_CHUNK_FORMAT.rst",
          "blosc/blosc2.c"
        ],
        "message": "New token for encoding more meanings for csize in chunks",
        "before_after_code_files": [
          "blosc/blosc2.c||blosc/blosc2.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "blosc/blosc2.c||blosc/blosc2.c"
          ],
          "candidate": [
            "blosc/blosc2.c||blosc/blosc2.c"
          ]
        }
      },
      "candidate_diff": {
        "blosc/blosc2.c||blosc/blosc2.c": [
          "File: blosc/blosc2.c -> blosc/blosc2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "765:       dest += sizeof(int32_t);",
          "766:       ntbytes += sizeof(int32_t);",
          "767:       ctbytes += sizeof(int32_t);",
          "779:       }",
          "782:     }",
          "784:     maxout = neblock;",
          "",
          "[Removed Lines]",
          "768:     }",
          "771:     const uint8_t* ip = (uint8_t*)_src + j * neblock;",
          "772:     const uint8_t* ipbound = (uint8_t*)_src + (j + 1) * neblock;",
          "773:     if (get_run(ip, ipbound)) {",
          "775:       int32_t value = _src[j * neblock];",
          "776:       if (ntbytes > destsize) {",
          "778:         return -1;",
          "780:       _sw32(dest - 4, -value);",
          "781:       continue;",
          "",
          "[Added Lines]",
          "770:       const uint8_t* ip = (uint8_t*)_src + j * neblock;",
          "771:       const uint8_t* ipbound = (uint8_t*)_src + (j + 1) * neblock;",
          "772:       if (get_run(ip, ipbound)) {",
          "774:         int32_t value = _src[j * neblock];",
          "775:         if (ntbytes > destsize) {",
          "777:           return -1;",
          "778:         }",
          "780:         _sw32(dest - 4, -value);    // write the value in two's complement",
          "781:         if (value > 0) {",
          "783:           ntbytes += 1;",
          "784:           ctbytes += 1;",
          "785:           if (ntbytes > destsize) {",
          "787:             return -1;",
          "788:           }",
          "791:           dest[0] = 0x1;   // set run-length bit (0) in token",
          "792:           dest += 1;",
          "793:         }",
          "794:         continue;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1088:     ctbytes += (int32_t)sizeof(int32_t);",
          "1099:       nbytes = neblock;",
          "1101:     }",
          "1102:     else if (cbytes == neblock) {",
          "1103:       memcpy(_dest, src, (unsigned int)neblock);",
          "",
          "[Removed Lines]",
          "1091:     if (cbytes <= 0) {",
          "1093:       if (cbytes < -255) {",
          "1095:         return -2;",
          "1096:       }",
          "1097:       uint8_t value = -cbytes;",
          "1098:       memset(_dest, value, (unsigned int)neblock);",
          "1100:       cbytes = 0;  // everything is encoded in the cbytes token",
          "",
          "[Added Lines]",
          "1105:     if (cbytes == 0) {",
          "1107:       memset(_dest, 0, (unsigned int)neblock);",
          "1109:     }",
          "1110:     else if (cbytes < 0) {",
          "1112:       uint8_t token = src[0];",
          "1113:       src += 1;",
          "1114:       ctbytes += 1;",
          "1115:       if (token & 0x1) {",
          "1117:         if (cbytes < -255) {",
          "1119:           return -2;",
          "1120:         }",
          "1121:         uint8_t value = -cbytes;",
          "1122:         memset(_dest, value, (unsigned int) neblock);",
          "1123:         nbytes = neblock;",
          "1124:         cbytes = 0;  // everything is encoded in the cbytes token",
          "1125:       }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "90391b2b306dc0cf6cd6cf6ba07089b717525266",
      "candidate_info": {
        "commit_hash": "90391b2b306dc0cf6cd6cf6ba07089b717525266",
        "repo": "Blosc/c-blosc2",
        "commit_url": "https://github.com/Blosc/c-blosc2/commit/90391b2b306dc0cf6cd6cf6ba07089b717525266",
        "files": [
          "blosc/blosc2.c",
          "blosc/blosc2.h",
          "blosc/directories.c",
          "blosc/eframe.c",
          "blosc/frame.c",
          "blosc/schunk.c",
          "examples/frame_simple.c"
        ],
        "message": "Added custom BLOSC2 error codes.",
        "before_after_code_files": [
          "blosc/blosc2.c||blosc/blosc2.c",
          "blosc/blosc2.h||blosc/blosc2.h",
          "blosc/directories.c||blosc/directories.c",
          "blosc/eframe.c||blosc/eframe.c",
          "blosc/frame.c||blosc/frame.c",
          "blosc/schunk.c||blosc/schunk.c",
          "examples/frame_simple.c||examples/frame_simple.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "blosc/blosc2.c||blosc/blosc2.c"
          ],
          "candidate": [
            "blosc/blosc2.c||blosc/blosc2.c"
          ]
        }
      },
      "candidate_diff": {
        "blosc/blosc2.c||blosc/blosc2.c": [
          "File: blosc/blosc2.c -> blosc/blosc2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "216:     return BLOSC_ZLIB_LIB;",
          "217:   if (strcmp(compname, BLOSC_ZSTD_COMPNAME) == 0)",
          "218:     return BLOSC_ZSTD_LIB;",
          "220: }",
          "",
          "[Removed Lines]",
          "219:   return -1;",
          "",
          "[Added Lines]",
          "219:   return BLOSC2_ERROR_NOT_FOUND;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "334:   int cbytes;",
          "335: #ifdef HAVE_IPP",
          "336:   if (hash_table == NULL) {",
          "338:   }",
          "339:   int outlen = (int)maxout;",
          "340:   int inlen = (int)input_length;",
          "",
          "[Removed Lines]",
          "337:     return -1;  // the hash table should always be initialized",
          "",
          "[Added Lines]",
          "337:     return BLOSC2_ERROR_INVALID_PARAM;  // the hash table should always be initialized",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "346:     return 0;  // we cannot compress in required outlen",
          "347:   }",
          "348:   else if (status != ippStsNoErr) {",
          "350:   }",
          "351:   cbytes = outlen;",
          "352: #else",
          "",
          "[Removed Lines]",
          "349:     return -1;  // an unexpected error happened",
          "",
          "[Added Lines]",
          "349:     return BLOSC2_ERROR_FAILURE;  // an unexpected error happened",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "362:                                char* output, size_t maxout, int clevel) {",
          "363:   int cbytes;",
          "364:   if (input_length > (size_t)(UINT32_C(2) << 30))",
          "368:   cbytes = LZ4_compress_HC(input, output, (int)input_length, (int)maxout,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365:     return BLOSC2_ERROR_2GB_LIMIT;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "734:       _src = pipeline_c(thread_context, bsize, src, offset, dest, _tmp2, _tmp3);",
          "736:       if (_src == NULL) {",
          "738:       }",
          "739:       return bsize;",
          "740:     }",
          "",
          "[Removed Lines]",
          "737:         return -9;  // signals a problem with the filter pipeline",
          "",
          "[Added Lines]",
          "737:         return BLOSC2_ERROR_FILTER_PIPELINE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "742:     _src = pipeline_c(thread_context, bsize, src, offset, _tmp, _tmp2, _tmp3);",
          "744:     if (_src == NULL) {",
          "746:     }",
          "747:   } else {",
          "748:     _src = src + offset;",
          "",
          "[Removed Lines]",
          "745:       return -9;  // signals a problem with the filter pipeline",
          "",
          "[Added Lines]",
          "745:       return BLOSC2_ERROR_FILTER_PIPELINE;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "776:         int32_t value = _src[j * neblock];",
          "777:         if (ntbytes > destsize) {",
          "780:         }",
          "782:         _sw32(dest - 4, -value);    // write the value in two's complement",
          "",
          "[Removed Lines]",
          "779:           return -1;",
          "",
          "[Added Lines]",
          "779:           return BLOSC2_ERROR_WRITE_BUFFER;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "786:           ctbytes += 1;",
          "787:           if (ntbytes > destsize) {",
          "790:           }",
          "",
          "[Removed Lines]",
          "789:             return -1;",
          "",
          "[Added Lines]",
          "789:             return BLOSC2_ERROR_WRITE_BUFFER;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "864:       blosc_compcode_to_compname(context->compcode, &compname);",
          "865:       BLOSC_TRACE_ERROR(\"Blosc has not been compiled with '%s' compression support.\"",
          "866:                         \"Please use one having it.\", compname);",
          "868:     }",
          "870:     if (cbytes > maxout) {",
          "873:     }",
          "874:     if (cbytes < 0) {",
          "877:     }",
          "878:     if (!dict_training) {",
          "879:       if (cbytes == 0 || cbytes == neblock) {",
          "",
          "[Removed Lines]",
          "872:       return -1;",
          "876:       return -2;",
          "",
          "[Added Lines]",
          "867:       return BLOSC2_ERROR_CODEC_SUPPORT;",
          "872:       return BLOSC2_ERROR_WRITE_BUFFER;",
          "876:       return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "1025:     if (context->schunk == NULL) {",
          "1026:       BLOSC_TRACE_ERROR(\"Lazy chunk needs an associated super-chunk.\");",
          "1028:     }",
          "1029:     if (context->schunk->frame == NULL) {",
          "1030:       BLOSC_TRACE_ERROR(\"Lazy chunk needs an associated frame.\");",
          "1032:     }",
          "1033:     char* urlpath = context->schunk->frame->urlpath;",
          "1034:     int32_t trailer_len = sizeof(int32_t) + sizeof(int64_t) + context->nblocks * sizeof(int32_t);",
          "",
          "[Removed Lines]",
          "1027:       return -11;",
          "1031:       return -12;",
          "",
          "[Added Lines]",
          "1027:       return BLOSC2_ERROR_INVALID_PARAM;",
          "1031:       return BLOSC2_ERROR_INVALID_PARAM;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "1062:     fclose(fp);",
          "1063:     if ((int32_t)rbytes != block_csize) {",
          "1064:       BLOSC_TRACE_ERROR(\"Cannot read the (lazy) block out of the fileframe.\");",
          "1066:     }",
          "1067:     src = tmp3;",
          "1068:     src_offset = 0;",
          "",
          "[Removed Lines]",
          "1065:       return -13;",
          "",
          "[Added Lines]",
          "1065:       return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "1073:   if (memcpyed) {",
          "1074:     if (chunk_nbytes + context->header_overhead != chunk_cbytes) {",
          "1076:     }",
          "1077:     int bsize_ = leftoverblock ? chunk_nbytes % context->blocksize : bsize;",
          "1078:     if (chunk_cbytes < context->header_overhead + (nblock * context->blocksize) + bsize_) {",
          "1081:     }",
          "1082:     if (!is_lazy) {",
          "1083:       src += context->header_overhead + nblock * context->blocksize;",
          "",
          "[Removed Lines]",
          "1075:       return -1;",
          "1080:       return -1;",
          "",
          "[Added Lines]",
          "1075:       return BLOSC2_ERROR_WRITE_BUFFER;",
          "1080:       return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "1089:   if (!is_lazy && (src_offset <= 0 || src_offset >= srcsize)) {",
          "1092:   }",
          "1094:   src += src_offset;",
          "",
          "[Removed Lines]",
          "1091:     return -1;",
          "",
          "[Added Lines]",
          "1091:     return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "1118:   for (int j = 0; j < nstreams; j++) {",
          "1119:     if (srcsize < (signed)sizeof(int32_t)) {",
          "1122:     }",
          "1123:     srcsize -= sizeof(int32_t);",
          "1125:     if (cbytes > 0) {",
          "1126:       if (srcsize < cbytes) {",
          "1129:       }",
          "1130:       srcsize -= cbytes;",
          "1131:     }",
          "",
          "[Removed Lines]",
          "1121:       return -1;",
          "1128:         return -1;",
          "",
          "[Added Lines]",
          "1121:       return BLOSC2_ERROR_READ_BUFFER;",
          "1128:         return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "1145:       if (srcsize < (signed)sizeof(uint8_t)) {",
          "1148:       }",
          "1149:       srcsize -= sizeof(uint8_t);",
          "",
          "[Removed Lines]",
          "1147:         return -1;",
          "",
          "[Added Lines]",
          "1147:         return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "1157:         if (cbytes < -255) {",
          "1160:         }",
          "1161:         uint8_t value = -cbytes;",
          "1162:         memset(_dest, value, (unsigned int) neblock);",
          "",
          "[Removed Lines]",
          "1159:           return -2;",
          "",
          "[Added Lines]",
          "1159:           return BLOSC2_ERROR_RUN_LENGTH;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "1209:                 \"Blosc has not been compiled with decompression \"",
          "1210:                 \"support for '%s' format.  \"",
          "1211:                 \"Please recompile for adding this support.\", compname);",
          "1213:       }",
          "1216:       if (nbytes != neblock) {",
          "1218:       }",
          "1220:     }",
          "",
          "[Removed Lines]",
          "1217:         return -2;",
          "",
          "[Added Lines]",
          "1212:         return BLOSC2_ERROR_CODEC_SUPPORT;",
          "1217:         return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "1401: int check_nthreads(blosc2_context* context) {",
          "1402:   if (context->nthreads <= 0) {",
          "1403:     BLOSC_TRACE_ERROR(\"nthreads must be a positive integer.\");",
          "1405:   }",
          "1407:   if (context->new_nthreads != context->nthreads) {",
          "",
          "[Removed Lines]",
          "1404:     return -1;",
          "",
          "[Added Lines]",
          "1404:     return BLOSC2_ERROR_INVALID_PARAM;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1544:     return 0;",
          "1545:   }",
          "1561:   if (clevel < 0 || clevel > 9) {",
          "1563:     BLOSC_TRACE_ERROR(\"`clevel` parameter must be between 0 and 9!.\");",
          "1565:   }",
          "",
          "[Removed Lines]",
          "1547:   if (destsize < BLOSC_MAX_OVERHEAD) {",
          "1548:     if (warnlvl > 0) {",
          "1549:       BLOSC_TRACE_ERROR(\"Output buffer size should be larger than %d bytes.\",",
          "1550:                         BLOSC_MAX_OVERHEAD);",
          "1551:     }",
          "1552:     return -2;",
          "1553:   }",
          "1554:   if (destsize < BLOSC_MAX_OVERHEAD) {",
          "1555:     BLOSC_TRACE_ERROR(\"Output buffer size should be larger than %d bytes.\",",
          "1556:                       BLOSC_MAX_OVERHEAD);",
          "1557:     return -1;",
          "1558:   }",
          "1564:     return -10;",
          "",
          "[Added Lines]",
          "1551:     return BLOSC2_ERROR_CODEC_PARAM;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1617:   if (context->srcsize < BLOSC_MIN_HEADER_LENGTH) {",
          "1620:   }",
          "1622:   context->header_flags = context->src[BLOSC2_CHUNK_FLAGS];",
          "",
          "[Removed Lines]",
          "1619:     return -1;",
          "",
          "[Added Lines]",
          "1605:     return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1629:   if (context->sourcesize > (int32_t)destsize) {",
          "1631:   }",
          "",
          "[Removed Lines]",
          "1630:     return -1;",
          "",
          "[Added Lines]",
          "1616:     return BLOSC2_ERROR_WRITE_BUFFER;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1640:     BLOSC_TRACE_ERROR(\"The number of items in block_maskout (%d) must match the number\"",
          "1641:                       \" of blocks in chunk (%d).\",",
          "1642:                       context->block_maskout_nitems, context->nblocks);",
          "1644:   }",
          "1646:   bool is_lazy = false;",
          "",
          "[Removed Lines]",
          "1643:     return -2;",
          "",
          "[Added Lines]",
          "1629:     return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1650:     if (context->srcsize < BLOSC_EXTENDED_HEADER_LENGTH) {",
          "1653:     }",
          "1654:     context->header_overhead = BLOSC_EXTENDED_HEADER_LENGTH;",
          "1655:     uint8_t* filters = (uint8_t*)(context->src + BLOSC_MIN_HEADER_LENGTH);",
          "",
          "[Removed Lines]",
          "1652:       return -1;",
          "",
          "[Added Lines]",
          "1638:       return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1677:   if (context->blocksize <= 0 || context->blocksize > destsize ||",
          "1678:       context->typesize <= 0 || context->typesize > BLOSC_MAX_TYPESIZE ||",
          "1679:       (!is_lazy && cbytes > srcsize)) {",
          "1681:   }",
          "1683:   context->bstarts = (int32_t*)(context->src + context->header_overhead);",
          "",
          "[Removed Lines]",
          "1680:     return -1;",
          "",
          "[Added Lines]",
          "1666:     return BLOSC2_ERROR_INVALID_HEADER;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1689:   }",
          "1691:   if (srcsize < bstarts_end) {",
          "1694:   }",
          "1695:   srcsize -= bstarts_end;",
          "",
          "[Removed Lines]",
          "1693:     return -1;",
          "",
          "[Added Lines]",
          "1678:     BLOSC_TRACE_ERROR(\"`bstarts` exceeds length of source buffer.\");",
          "1679:     return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1704:     }",
          "1706:     if (srcsize < (signed)sizeof(int32_t)) {",
          "1709:     }",
          "1710:     srcsize -= sizeof(int32_t);",
          "1711:     context->dict_size = (size_t)sw32_(context->src + bstarts_end);",
          "1712:     if (context->dict_size <= 0 || context->dict_size > BLOSC2_MAXDICTSIZE) {",
          "1715:     }",
          "1716:     if (srcsize < (int32_t)context->dict_size) {",
          "1719:     }",
          "1720:     srcsize -= context->dict_size;",
          "1721:     context->dict_buffer = (void*)(context->src + bstarts_end + sizeof(int32_t));",
          "",
          "[Removed Lines]",
          "1708:       return -1;",
          "1714:       return -1;",
          "1718:       return -1;",
          "",
          "[Added Lines]",
          "1693:       BLOSC_TRACE_ERROR(\"Not enough space to read size of dictionary.\");",
          "1694:       return BLOSC2_ERROR_READ_BUFFER;",
          "1699:       BLOSC_TRACE_ERROR(\"Dictionary size is smaller than minimum or larger than maximum allowed.\");",
          "1700:       return BLOSC2_ERROR_CODEC_DICT;",
          "1703:       BLOSC_TRACE_ERROR(\"Not enough space to read entire dictionary.\");",
          "1704:       return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1798:       BLOSC_TRACE_ERROR(\"Blosc has not been compiled with '%s' \"",
          "1799:                         \"compression support.  Please use one having it.\",",
          "1800:                         compname);",
          "1802:       break;",
          "1803:     }",
          "1804:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1787:       return BLOSC2_ERROR_CODEC_SUPPORT;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1894:     ntbytes = do_job(context);",
          "1895:     if (ntbytes < 0) {",
          "1897:     }",
          "1898:     if (ntbytes == 0) {",
          "",
          "[Removed Lines]",
          "1896:       return -1;",
          "",
          "[Added Lines]",
          "1882:       return ntbytes;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1911:       context->output_bytes = context->header_overhead;",
          "1912:       ntbytes = do_job(context);",
          "1913:       if (ntbytes < 0) {",
          "1915:       }",
          "1917:       context->dest[BLOSC2_CHUNK_FLAGS] = context->header_flags;",
          "",
          "[Removed Lines]",
          "1914:         return -1;",
          "",
          "[Added Lines]",
          "1900:         return ntbytes;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1963:   if (context->do_compress != 1) {",
          "1964:     BLOSC_TRACE_ERROR(\"Context is not meant for compression.  Giving up.\");",
          "1966:   }",
          "1968:   error = initialize_context_compression(",
          "",
          "[Removed Lines]",
          "1965:     return -10;",
          "",
          "[Added Lines]",
          "1951:     return BLOSC2_ERROR_INVALID_PARAM;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1992:       compname = clibcode_to_clibname(context->compcode);",
          "1993:       BLOSC_TRACE_ERROR(\"Codec %s does not support dicts.  Giving up.\",",
          "1994:                         compname);",
          "1996:     }",
          "1998: #ifdef HAVE_ZSTD",
          "",
          "[Removed Lines]",
          "1995:       return -20;",
          "",
          "[Added Lines]",
          "1981:       return BLOSC2_ERROR_CODEC_DICT;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "2029:     if (ZDICT_isError(dict_actual_size) != ZSTD_error_no_error) {",
          "2030:       BLOSC_TRACE_ERROR(\"Error in ZDICT_trainFromBuffer(): '%s'.\"",
          "2031:                         \"  Giving up.\", ZDICT_getErrorName(dict_actual_size));",
          "2033:     }",
          "2034:     assert(dict_actual_size > 0);",
          "2035:     free(samples_sizes);",
          "",
          "[Removed Lines]",
          "2032:       return -20;",
          "",
          "[Added Lines]",
          "2018:       return BLOSC2_ERROR_CODEC_DICT;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "2231: int set_nans(uint8_t* src, int32_t nitems, uint8_t* dest, int32_t destsize) {",
          "2232:   int32_t typesize = src[BLOSC2_CHUNK_TYPESIZE];",
          "2234:   int32_t nbytes = nitems * typesize;",
          "2236:   if (nbytes_chunk % typesize != 0) {",
          "2237:     BLOSC_TRACE_ERROR(\"nbytes is not a multiple of typesize\");",
          "2239:   }",
          "2240:   if (cbytes_chunk < BLOSC_EXTENDED_HEADER_LENGTH) {",
          "2241:     BLOSC_TRACE_ERROR(\"Not enough space in src\");",
          "2243:   }",
          "2244:   if (nbytes > destsize) {",
          "2245:     BLOSC_TRACE_ERROR(\"Not enough space in dest\");",
          "2247:   }",
          "2248:   if (typesize == 4) {",
          "2249:     float* dest_ = (float*)dest;",
          "2250:     for (int i = 0; i < nitems; i++) {",
          "",
          "[Removed Lines]",
          "2233:   int32_t nbytes_chunk = sw32_(src + BLOSC2_CHUNK_NBYTES);;",
          "2235:   int32_t cbytes_chunk = sw32_(src + BLOSC2_CHUNK_CBYTES);;",
          "2238:     return -1;",
          "2242:     return -1;",
          "2246:     return -1;",
          "",
          "[Added Lines]",
          "2219:   int32_t nbytes_chunk = sw32_(src + BLOSC2_CHUNK_NBYTES);",
          "2221:   int32_t cbytes_chunk = sw32_(src + BLOSC2_CHUNK_CBYTES);",
          "2225:     return BLOSC2_ERROR_DATA;",
          "2229:     return BLOSC2_ERROR_READ_BUFFER;",
          "2233:     return BLOSC2_ERROR_WRITE_BUFFER;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "2261:   }",
          "2263:   BLOSC_TRACE_ERROR(\"Unsupported typesize for NaN\");",
          "2265: }",
          "",
          "[Removed Lines]",
          "2264:   return -1;",
          "",
          "[Added Lines]",
          "2252:   return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "2270:   int32_t nbytes_chunk = sw32_(src + BLOSC2_CHUNK_NBYTES);;",
          "2271:   int32_t nbytes = nitems * typesize;",
          "2272:   int32_t cbytes_chunk = sw32_(src + BLOSC2_CHUNK_CBYTES);;",
          "2273:   if (nbytes_chunk % typesize != 0) {",
          "2274:     BLOSC_TRACE_ERROR(\"nbytes is not a multiple of typesize\");",
          "2276:   }",
          "2277:   if (cbytes_chunk < BLOSC_EXTENDED_HEADER_LENGTH + typesize) {",
          "2278:     BLOSC_TRACE_ERROR(\"Not enough space in src\");",
          "2280:   }",
          "2281:   if (nbytes > destsize) {",
          "2282:     BLOSC_TRACE_ERROR(\"Not enough space in dest\");",
          "2284:   }",
          "",
          "[Removed Lines]",
          "2275:     return -1;",
          "2279:     return -1;",
          "2283:     return -1;",
          "",
          "[Added Lines]",
          "2264:     return BLOSC2_ERROR_DATA;",
          "2268:     return BLOSC2_ERROR_READ_BUFFER;",
          "2272:     return BLOSC2_ERROR_WRITE_BUFFER;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "2309:   int32_t typesize = src[BLOSC2_CHUNK_TYPESIZE];",
          "2311:   if (typesize <= 0 || typesize > BLOSC_MAX_TYPESIZE) {",
          "2313:   }",
          "2314:   bool all_zeros = src[BLOSC2_CHUNK_BLOSC2_FLAGS] & (BLOSC2_ZERO_RUNLEN << 4);",
          "2315:   bool all_nans = src[BLOSC2_CHUNK_BLOSC2_FLAGS] & (BLOSC2_NAN_RUNLEN << 4);",
          "",
          "[Removed Lines]",
          "2312:     return -1;",
          "",
          "[Added Lines]",
          "2301:     return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "2348:   if (srcsize <= 0) {",
          "2351:   }",
          "2353:   if (version > BLOSC_VERSION_FORMAT) {",
          "2356:   }",
          "2358:   ntbytes = sw32_(_src + BLOSC2_CHUNK_NBYTES);",
          "2359:   if (ntbytes > destsize) {",
          "2362:   }",
          "2365:   int rc = handle_runlen(context, _src, ntbytes, dest, destsize);",
          "2366:   if (rc < 0) {",
          "2368:   }",
          "2369:   if (rc > 0) {",
          "",
          "[Removed Lines]",
          "2350:     return -1;",
          "2355:     return -1;",
          "2361:     return -1;",
          "2367:     return -1;",
          "",
          "[Added Lines]",
          "2339:     return BLOSC2_ERROR_INVALID_PARAM;",
          "2344:     return BLOSC2_ERROR_VERSION_SUPPORT;",
          "2350:     return BLOSC2_ERROR_WRITE_BUFFER;",
          "2356:     return rc;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "2380:   ntbytes = do_job(context);",
          "2381:   if (ntbytes < 0) {",
          "2383:   }",
          "2385:   assert(ntbytes <= (int32_t)destsize);",
          "",
          "[Removed Lines]",
          "2382:     return -1;",
          "",
          "[Added Lines]",
          "2371:     return ntbytes;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "2395:   if (context->do_compress != 0) {",
          "2396:     BLOSC_TRACE_ERROR(\"Context is not meant for decompression.  Giving up.\");",
          "2398:   }",
          "2400:   result = blosc_run_decompression_with_context(context, src, srcsize, dest, destsize);",
          "",
          "[Removed Lines]",
          "2397:     return -10;",
          "",
          "[Added Lines]",
          "2386:     return BLOSC2_ERROR_INVALID_PARAM;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2484:   }",
          "2486:   if (srcsize < BLOSC_MIN_HEADER_LENGTH) {",
          "2489:   }",
          "2490:   _src = (uint8_t*)(src);",
          "",
          "[Removed Lines]",
          "2488:     return -1;",
          "",
          "[Added Lines]",
          "2476:     BLOSC_TRACE_ERROR(\"Not enough space to read Blosc1 header.\");",
          "2477:     return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2502:   int rc = handle_runlen(context, _src, nitems * typesize, dest, nitems * typesize);",
          "2503:   if (rc < 0) {",
          "2505:   }",
          "2506:   if (rc > 0) {",
          "",
          "[Removed Lines]",
          "2504:     return -1;",
          "",
          "[Added Lines]",
          "2493:     return rc;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2511:   if (blocksize <= 0) {",
          "2514:   }",
          "",
          "[Removed Lines]",
          "2513:     return -1;",
          "",
          "[Added Lines]",
          "2502:     return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2521:   if (srcsize < context->header_overhead) {",
          "2524:   }",
          "2526:   if (context->header_overhead == BLOSC_EXTENDED_HEADER_LENGTH) {",
          "",
          "[Removed Lines]",
          "2523:     return -1;",
          "",
          "[Added Lines]",
          "2512:     return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2545:   if (blocksize <= 0 || blocksize > nbytes || typesize <= 0 || typesize > BLOSC_MAX_TYPESIZE) {",
          "2547:   }",
          "2550:   if ((start < 0) || (start * typesize > nbytes)) {",
          "2551:     BLOSC_TRACE_ERROR(\"`start` out of bounds.\");",
          "2553:   }",
          "2555:   if ((stop < 0) || (stop * typesize > nbytes)) {",
          "2556:     BLOSC_TRACE_ERROR(\"`start`+`nitems` out of bounds.\");",
          "2558:   }",
          "2560:   if (_src + srcsize < (uint8_t *)(bstarts + nblocks)) {",
          "2563:   }",
          "2565:   for (j = 0; j < nblocks; j++) {",
          "",
          "[Removed Lines]",
          "2546:     return -1;",
          "2552:     return -1;",
          "2557:     return -1;",
          "2562:     return -1;",
          "",
          "[Added Lines]",
          "2535:     return BLOSC2_ERROR_INVALID_HEADER;",
          "2541:     return BLOSC2_ERROR_DATA;",
          "2546:     return BLOSC2_ERROR_DATA;",
          "2550:     BLOSC_TRACE_ERROR(\"`bstarts` out of bounds.\");",
          "2551:     return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2638:   if (version > BLOSC_VERSION_FORMAT) {",
          "2641:   }",
          "",
          "[Removed Lines]",
          "2640:     return -1;",
          "",
          "[Added Lines]",
          "2629:     return BLOSC2_ERROR_VERSION_SUPPORT;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2658:     context.header_overhead = BLOSC_EXTENDED_HEADER_LENGTH;",
          "2659:     if (context.blosc2_flags & 0x08) {",
          "2660:       BLOSC_TRACE_ERROR(\"blosc_getitem does not support lazy chunks.  Use blosc2_getitem_ctx instead.\");",
          "2662:     }",
          "2663:   }",
          "2664:   else {",
          "",
          "[Removed Lines]",
          "2661:       return -2;",
          "",
          "[Added Lines]",
          "2650:       return BLOSC2_ERROR_INVALID_PARAM;",
          "",
          "---------------",
          "--- Hunk 47 ---",
          "[Context before]",
          "2679:   int result;",
          "2681:   if (srcsize < BLOSC_MIN_HEADER_LENGTH) {",
          "2684:   }",
          "",
          "[Removed Lines]",
          "2683:     return -1;",
          "",
          "[Added Lines]",
          "2671:     BLOSC_TRACE_ERROR(\"Not enough space to read Blosc1 header.\");",
          "2672:     return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 48 ---",
          "[Context before]",
          "3156:   if (cbytes < BLOSC_MIN_HEADER_LENGTH) {",
          "3160:   }",
          "3161:   blosc_cbuffer_sizes(cbuffer, nbytes, &header_cbytes, &header_blocksize);",
          "3162:   if (header_cbytes != cbytes) {",
          "3166:   }",
          "3167:   if (*nbytes > BLOSC_MAX_BUFFERSIZE) {",
          "3170:   }",
          "3171:   return 0;",
          "3172: }",
          "",
          "[Removed Lines]",
          "3159:     return -1;",
          "3165:     return -1;",
          "3169:     return -1;",
          "",
          "[Added Lines]",
          "3148:     return BLOSC2_ERROR_WRITE_BUFFER;",
          "3154:     return BLOSC2_ERROR_INVALID_HEADER;",
          "3158:     return BLOSC2_ERROR_MEMORY_ALLOC;",
          "",
          "---------------",
          "--- Hunk 49 ---",
          "[Context before]",
          "3322: int blosc_free_resources(void) {",
          "3326:   return release_threadpool(g_global_context);",
          "3327: }",
          "",
          "[Removed Lines]",
          "3324:   if (!g_initlib) return -1;",
          "",
          "[Added Lines]",
          "3313:   if (!g_initlib) return BLOSC2_ERROR_FAILURE;",
          "",
          "---------------",
          "--- Hunk 50 ---",
          "[Context before]",
          "3433:   if (typesize == 0 || typesize > BLOSC_MAX_TYPESIZE) {",
          "3434:     BLOSC_TRACE_ERROR(\"typesize cannot be larger than %d bytes\", BLOSC_MAX_TYPESIZE);",
          "3436:   }",
          "3438:   if (nbytes % typesize != 0) {",
          "3439:     BLOSC_TRACE_ERROR(\"nbytes is not a multiple of typesize\");",
          "3441:   }",
          "3443:   if (destsize < BLOSC_EXTENDED_HEADER_LENGTH) {",
          "3444:     BLOSC_TRACE_ERROR(\"dest buffer is not long enough\");",
          "3446:   }",
          "3448:   memset(dest, 0, BLOSC_EXTENDED_HEADER_LENGTH);",
          "",
          "[Removed Lines]",
          "3435:     return -1;",
          "3440:     return -1;",
          "3445:     return -1;",
          "",
          "[Added Lines]",
          "3424:     return BLOSC2_ERROR_DATA;",
          "3429:     return BLOSC2_ERROR_DATA;",
          "3434:     return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 51 ---",
          "[Context before]",
          "3467:   if (typesize == 0 || typesize > BLOSC_MAX_TYPESIZE) {",
          "3468:     BLOSC_TRACE_ERROR(\"typesize cannot be larger than %d bytes\", BLOSC_MAX_TYPESIZE);",
          "3470:   }",
          "3472:   if (nbytes % typesize != 0) {",
          "3473:     BLOSC_TRACE_ERROR(\"nbytes is not a multiple of typesize\");",
          "3475:   }",
          "3477:   if (destsize < BLOSC_EXTENDED_HEADER_LENGTH) {",
          "3478:     BLOSC_TRACE_ERROR(\"dest buffer is not long enough\");",
          "3480:   }",
          "3482:   memset(dest, 0, BLOSC_EXTENDED_HEADER_LENGTH);",
          "",
          "[Removed Lines]",
          "3469:     return -1;",
          "3474:     return -1;",
          "3479:     return -1;",
          "",
          "[Added Lines]",
          "3458:     return BLOSC2_ERROR_DATA;",
          "3463:     return BLOSC2_ERROR_DATA;",
          "3468:     return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 52 ---",
          "[Context before]",
          "3502:   if (typesize == 0 || typesize > BLOSC_MAX_TYPESIZE) {",
          "3503:     BLOSC_TRACE_ERROR(\"typesize cannot be larger than %d bytes\", BLOSC_MAX_TYPESIZE);",
          "3505:   }",
          "3507:   if (nbytes % typesize != 0) {",
          "3508:     BLOSC_TRACE_ERROR(\"nbytes is not a multiple of typesize\");",
          "3510:   }",
          "3512:   if (destsize < BLOSC_EXTENDED_HEADER_LENGTH + typesize) {",
          "3513:     BLOSC_TRACE_ERROR(\"dest buffer is not long enough\");",
          "3515:   }",
          "3517:   memset(dest, 0, BLOSC_EXTENDED_HEADER_LENGTH);",
          "",
          "[Removed Lines]",
          "3504:     return -1;",
          "3509:     return -1;",
          "3514:     return -1;",
          "",
          "[Added Lines]",
          "3493:     return BLOSC2_ERROR_DATA;",
          "3498:     return BLOSC2_ERROR_DATA;",
          "3503:     return BLOSC2_ERROR_DATA;",
          "",
          "---------------"
        ],
        "blosc/blosc2.h||blosc/blosc2.h": [
          "File: blosc/blosc2.h -> blosc/blosc2.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:     BLOSC2_VALUE_RUNLEN = 0x3,    //!< generic value run-length",
          "251: };",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "256: enum {",
          "257:   BLOSC2_ERROR_SUCCESS = 0,           //<! Success",
          "258:   BLOSC2_ERROR_FAILURE = -1,          //<! Generic failure",
          "259:   BLOSC2_ERROR_STREAM = 2,            //<! Bad stream",
          "260:   BLOSC2_ERROR_DATA = -3,             //<! Invalid data",
          "261:   BLOSC2_ERROR_MEMORY_ALLOC = -4,     //<! Memory alloc/realloc failure",
          "262:   BLOSC2_ERROR_READ_BUFFER = -5,      //!< Not enough space to read",
          "263:   BLOSC2_ERROR_WRITE_BUFFER = -6,     //!< Not enough space to write",
          "264:   BLOSC2_ERROR_CODEC_SUPPORT = -7,    //!< Codec not supported",
          "265:   BLOSC2_ERROR_CODEC_PARAM = -8,      //!< Invalid parameter supplied to codec",
          "266:   BLOSC2_ERROR_CODEC_DICT = -9,       //!< Codec dictionary error",
          "267:   BLOSC2_ERROR_VERSION_SUPPORT = -10, //!< Version not supported",
          "268:   BLOSC2_ERROR_INVALID_HEADER = -11,  //!< Invalid value in header",
          "269:   BLOSC2_ERROR_INVALID_PARAM = -12,   //!< Invalid parameter supplied to function",
          "270:   BLOSC2_ERROR_FILE_READ = -13,       //!< File read failure",
          "271:   BLOSC2_ERROR_FILE_WRITE = -14,      //!< File write failure",
          "272:   BLOSC2_ERROR_FILE_OPEN = -15,       //!< File open failure",
          "273:   BLOSC2_ERROR_NOT_FOUND = -16,       //!< Not found",
          "274:   BLOSC2_ERROR_RUN_LENGTH = -17,      //!< Bad run length encoding",
          "275:   BLOSC2_ERROR_FILTER_PIPELINE = -18, //!< Filter pipeline error",
          "276:   BLOSC2_ERROR_CHUNK_INSERT = -19,    //!< Chunk insert failure",
          "277:   BLOSC2_ERROR_CHUNK_APPEND = -20,    //!< Chunk append failure",
          "278:   BLOSC2_ERROR_CHUNK_UPDATE = -21,    //!< Chunk update failure",
          "279:   BLOSC2_ERROR_2GB_LIMIT = -22,       //!< Sizes larger than 2gb not supported",
          "280: };",
          "",
          "---------------"
        ],
        "blosc/directories.c||blosc/directories.c": [
          "File: blosc/directories.c -> blosc/directories.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34:     if (file == -1) {",
          "35:       BLOSC_TRACE_ERROR(\"Could not open the file.\");",
          "37:     }",
          "38:     int ret;",
          "",
          "[Removed Lines]",
          "36:       return -1;",
          "",
          "[Added Lines]",
          "36:       return BLOSC2_ERROR_FILE_OPEN;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "50:         BLOSC_TRACE_ERROR(\"Could not remove file %s\", fname);",
          "51:         free(path);",
          "52:         _findclose(file);",
          "54:       }",
          "55:     }",
          "",
          "[Removed Lines]",
          "53:         return -1;",
          "",
          "[Added Lines]",
          "53:         return BLOSC2_ERROR_FAILURE;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "83:   if (dr == NULL) {",
          "84:     BLOSC_TRACE_ERROR(\"No file or directory found.\");",
          "85:     free(path);",
          "87:   }",
          "88:   struct dirent *de;",
          "89:   int ret;",
          "",
          "[Removed Lines]",
          "86:     return -1;",
          "",
          "[Added Lines]",
          "86:     return BLOSC2_ERROR_NOT_FOUND;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "102:         free(fname);",
          "103:         closedir(dr);",
          "104:         free(path);",
          "106:       }",
          "107:     }",
          "108:     free(fname);",
          "",
          "[Removed Lines]",
          "105:         return -1;",
          "",
          "[Added Lines]",
          "105:         return BLOSC2_ERROR_FAILURE;",
          "",
          "---------------"
        ],
        "blosc/eframe.c||blosc/eframe.c": [
          "File: blosc/eframe.c -> blosc/eframe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:   free(chunkpath);",
          "65:   if(fpc == NULL){",
          "66:     BLOSC_TRACE_ERROR(\"Cannot open the chunkfile.\");",
          "68:   }",
          "70:   fseek(fpc, 0L, SEEK_END);",
          "",
          "[Removed Lines]",
          "67:     return -1;",
          "",
          "[Added Lines]",
          "67:     return BLOSC2_ERROR_FILE_OPEN;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "76:   fclose(fpc);",
          "77:   if (rbytes != (size_t)chunk_cbytes) {",
          "78:     BLOSC_TRACE_ERROR(\"Cannot read the chunk out of the chunkfile.\");",
          "80:   }",
          "",
          "[Removed Lines]",
          "79:     return -1;",
          "",
          "[Added Lines]",
          "79:     return BLOSC2_ERROR_FILE_READ;",
          "",
          "---------------"
        ],
        "blosc/frame.c||blosc/frame.c": [
          "File: blosc/frame.c -> blosc/frame.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "390:   uint8_t header[FRAME_HEADER_MINLEN];",
          "392:   if (frame->len <= 0) {",
          "394:   }",
          "396:   if (frame->sdata == NULL) {",
          "",
          "[Removed Lines]",
          "393:     return -1;",
          "",
          "[Added Lines]",
          "393:     return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "411:     }",
          "412:     (void) rbytes;",
          "413:     if (rbytes != FRAME_HEADER_MINLEN) {",
          "415:     }",
          "416:     framep = header;",
          "417:   }",
          "",
          "[Removed Lines]",
          "414:       return -1;",
          "",
          "[Added Lines]",
          "414:       return BLOSC2_ERROR_FILE_READ;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "429:   if (*header_len <= 0 || *header_len > *frame_len) {",
          "430:     BLOSC_TRACE_ERROR(\"Header length is invalid or exceeds length of the frame.\");",
          "432:   }",
          "",
          "[Removed Lines]",
          "431:     return -1;",
          "",
          "[Added Lines]",
          "431:     return BLOSC2_ERROR_INVALID_HEADER;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "445:     uint8_t nfilters = framep[FRAME_FILTER_PIPELINE];",
          "446:     if (nfilters > BLOSC2_MAX_FILTERS) {",
          "447:       BLOSC_TRACE_ERROR(\"The number of filters in frame header are too large for Blosc2.\");",
          "449:     }",
          "450:     uint8_t *filters_ = framep + FRAME_FILTER_PIPELINE + 1;",
          "451:     uint8_t *filters_meta_ = framep + FRAME_FILTER_PIPELINE + 1 + FRAME_FILTER_PIPELINE_MAX;",
          "",
          "[Removed Lines]",
          "448:       return -1;",
          "",
          "[Added Lines]",
          "448:       return BLOSC2_ERROR_INVALID_HEADER;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "461:     if (*nbytes % *chunksize > 0) {",
          "462:       if (*nchunks == INT32_MAX) {",
          "463:         BLOSC_TRACE_ERROR(\"Number of chunks exceeds maximum allowed.\");",
          "465:       }",
          "467:     }",
          "",
          "[Removed Lines]",
          "464:         return -1;",
          "",
          "[Added Lines]",
          "464:         return BLOSC2_ERROR_INVALID_HEADER;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "470:     if ((*cbytes < 0) || ((int64_t)*nchunks * *chunksize < *nbytes)) {",
          "471:       BLOSC_TRACE_ERROR(\"Invalid compressed size in frame header.\");",
          "473:     }",
          "474:   } else {",
          "",
          "[Removed Lines]",
          "472:       return -1;",
          "",
          "[Added Lines]",
          "472:       return BLOSC2_ERROR_INVALID_HEADER;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "512:     fclose(fp);",
          "513:     if (wbytes != sizeof(int64_t)) {",
          "514:       BLOSC_TRACE_ERROR(\"Cannot write the frame length in header.\");",
          "516:     }",
          "517:   }",
          "518:   return rc;",
          "",
          "[Removed Lines]",
          "515:       return -1;",
          "",
          "[Added Lines]",
          "515:       return BLOSC2_ERROR_FILE_WRITE;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "557:   ptrailer += 16;",
          "559:   if (ptrailer - trailer != trailer_len) {",
          "561:   }",
          "562:   int32_t header_len;",
          "563:   int64_t frame_len;",
          "",
          "[Removed Lines]",
          "560:     return -1;",
          "",
          "[Added Lines]",
          "560:     return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "569:                             NULL, NULL, NULL, NULL, NULL);",
          "570:   if (ret < 0) {",
          "571:     BLOSC_TRACE_ERROR(\"Unable to get meta info from frame.\");",
          "573:   }",
          "575:   int64_t trailer_offset = get_trailer_offset(frame, header_len, nbytes > 0);",
          "",
          "[Removed Lines]",
          "572:     return -1;",
          "",
          "[Added Lines]",
          "572:     return ret;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "581:     frame->sdata = realloc(frame->sdata, (size_t)(trailer_offset + trailer_len));",
          "582:     if (frame->sdata == NULL) {",
          "583:       BLOSC_TRACE_ERROR(\"Cannot realloc space for the frame.\");",
          "585:     }",
          "586:     memcpy(frame->sdata + trailer_offset, trailer, trailer_len);",
          "587:   }",
          "",
          "[Removed Lines]",
          "584:       return -1;",
          "",
          "[Added Lines]",
          "584:       return BLOSC2_ERROR_MEMORY_ALLOC;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "601:     fclose(fp);",
          "602:     if (wbytes != (size_t)trailer_len) {",
          "603:       BLOSC_TRACE_ERROR(\"Cannot write the trailer length in trailer.\");",
          "605:     }",
          "606:   }",
          "607:   free(trailer);",
          "",
          "[Removed Lines]",
          "604:       return -2;",
          "",
          "[Added Lines]",
          "604:       return BLOSC2_ERROR_FILE_WRITE;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "626:   uint8_t* h2 = new_header_frame(schunk, frame);",
          "627:   if (h2 == NULL) {",
          "629:   }",
          "630:   uint32_t h2len;",
          "631:   swap_store(&h2len, h2 + FRAME_HEADER_LEN, sizeof(h2len));",
          "",
          "[Removed Lines]",
          "628:     return -1;",
          "",
          "[Added Lines]",
          "628:     return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "661:   }",
          "662:   if ((int64_t)coffset != cbytes) {",
          "663:     free(data_tmp);",
          "665:   }",
          "666:   uint8_t *off_chunk = NULL;",
          "667:   if (nchunks > 0) {",
          "",
          "[Removed Lines]",
          "664:     return -1;",
          "",
          "[Added Lines]",
          "664:     return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "675:     if (off_cbytes < 0) {",
          "676:       free(off_chunk);",
          "677:       free(h2);",
          "679:     }",
          "680:   }",
          "681:   else {",
          "",
          "[Removed Lines]",
          "678:       return -1;",
          "",
          "[Added Lines]",
          "678:       return off_cbytes;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "726:       coffset += chunk_cbytes;",
          "727:     }",
          "728:     if ((int64_t)coffset != cbytes) {",
          "730:     }",
          "731:   }",
          "",
          "[Removed Lines]",
          "729:       return -1;",
          "",
          "[Added Lines]",
          "729:       return BLOSC2_ERROR_FAILURE;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "784:   if (frame->urlpath != NULL) {",
          "785:     BLOSC_TRACE_ERROR(\"The original frame must be in-memory.\");",
          "787:   }",
          "788:   FILE* fp = fopen(urlpath, \"wb\");",
          "789:   fwrite(frame->sdata, (size_t)frame->len, 1, fp);",
          "",
          "[Removed Lines]",
          "786:     return -1;",
          "",
          "[Added Lines]",
          "786:     return BLOSC2_ERROR_INVALID_PARAM;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "972:   uint8_t header[FRAME_HEADER_MINLEN];",
          "974:   if (frame->len <= 0) {",
          "976:   }",
          "978:   if (new && schunk->cbytes > 0) {",
          "979:     BLOSC_TRACE_ERROR(\"New metalayers cannot be added after actual data \"",
          "980:                       \"has been appended.\");",
          "982:   }",
          "984:   if (frame->sdata == NULL) {",
          "",
          "[Removed Lines]",
          "975:     return -1;",
          "981:     return -1;",
          "",
          "[Added Lines]",
          "975:     return BLOSC2_ERROR_INVALID_PARAM;",
          "981:     return BLOSC2_ERROR_INVALID_PARAM;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "999:     }",
          "1000:     (void) rbytes;",
          "1001:     if (rbytes != FRAME_HEADER_MINLEN) {",
          "1003:     }",
          "1004:     framep = header;",
          "1005:   }",
          "",
          "[Removed Lines]",
          "1002:       return -1;",
          "",
          "[Added Lines]",
          "1002:       return BLOSC2_ERROR_FILE_WRITE;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "1021:   if (!new && prev_h2len != h2len) {",
          "1022:     BLOSC_TRACE_ERROR(\"The new metalayer sizes should be equal the existing ones.\");",
          "1024:   }",
          "1026:   FILE* fp = NULL;",
          "",
          "[Removed Lines]",
          "1023:     return -2;",
          "",
          "[Added Lines]",
          "1023:     return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "1064:                             NULL, NULL, NULL, NULL, NULL);",
          "1065:   if (ret < 0) {",
          "1066:     BLOSC_TRACE_ERROR(\"Unable to get the header info from frame.\");",
          "1068:   }",
          "1069:   int64_t trailer_offset = get_trailer_offset(frame, header_len, nbytes > 0);",
          "1070:   if (trailer_offset < 0) {",
          "1071:     BLOSC_TRACE_ERROR(\"Unable to get the trailer offset from frame.\");",
          "1073:   }",
          "1074:   if (trailer_offset + FRAME_TRAILER_USERMETA_LEN_OFFSET + (signed)sizeof(int32_t) > frame_len) {",
          "1075:     BLOSC_TRACE_ERROR(\"Invalid trailer offset exceeds frame length.\");",
          "1077:   }",
          "",
          "[Removed Lines]",
          "1067:     return -1;",
          "1072:     return -1;",
          "1076:     return -1;",
          "",
          "[Added Lines]",
          "1067:     return ret;",
          "1072:     return (int32_t)trailer_offset;",
          "1076:     return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "1097:     fclose(fp);",
          "1098:     if (rbytes != sizeof(int32_t)) {",
          "1099:       BLOSC_TRACE_ERROR(\"Cannot access the usermeta_len out of the fileframe.\");",
          "1101:     }",
          "1102:   }",
          "1103:   int32_t usermeta_len;",
          "",
          "[Removed Lines]",
          "1100:       return -1;",
          "",
          "[Added Lines]",
          "1100:       return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "1106:   if (usermeta_len < 0) {",
          "1107:     BLOSC_TRACE_ERROR(\"Invalid usermeta length.\");",
          "1109:   }",
          "1110:   if (usermeta_len == 0) {",
          "",
          "[Removed Lines]",
          "1108:     return -1;",
          "",
          "[Added Lines]",
          "1108:     return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "1133:     if (rbytes != (size_t)usermeta_len) {",
          "1134:       BLOSC_TRACE_ERROR(\"Cannot read the complete usermeta chunk in frame. %ld != %ld.\",",
          "1135:               (long)rbytes, (long)usermeta_len);",
          "1137:     }",
          "1138:   }",
          "",
          "[Removed Lines]",
          "1136:       return -1;",
          "",
          "[Added Lines]",
          "1136:       return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "1148:   uint16_t idx_size;",
          "1149:   header_pos += sizeof(idx_size);",
          "1150:   if (header_len < header_pos) {",
          "1152:   }",
          "1153:   swap_store(&idx_size, header + FRAME_IDX_SIZE, sizeof(idx_size));",
          "",
          "[Removed Lines]",
          "1151:     return -1;",
          "",
          "[Added Lines]",
          "1151:     return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "1156:   uint8_t* metalayers_idx = header + FRAME_IDX_SIZE + 2;",
          "1157:   header_pos += 1;",
          "1158:   if (header_len < header_pos) {",
          "1160:   }",
          "1161:   if (metalayers_idx[0] != 0xde) {   // sanity check",
          "1163:   }",
          "1164:   uint8_t* idxp = metalayers_idx + 1;",
          "1165:   uint16_t nmetalayers;",
          "1166:   header_pos += sizeof(nmetalayers);",
          "1167:   if (header_len < header_pos) {",
          "1169:   }",
          "1170:   swap_store(&nmetalayers, idxp, sizeof(uint16_t));",
          "1171:   idxp += 2;",
          "1172:   if (nmetalayers < 0 || nmetalayers > BLOSC2_MAX_METALAYERS) {",
          "1174:   }",
          "1175:   schunk->nmetalayers = nmetalayers;",
          "",
          "[Removed Lines]",
          "1159:     return -1;",
          "1162:     return -1;",
          "1168:     return -1;",
          "1173:     return -1;",
          "",
          "[Added Lines]",
          "1159:     return BLOSC2_ERROR_READ_BUFFER;",
          "1162:     return BLOSC2_ERROR_DATA;",
          "1168:     return BLOSC2_ERROR_READ_BUFFER;",
          "1173:     return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 26 ---",
          "[Context before]",
          "1178:   for (int nmetalayer = 0; nmetalayer < nmetalayers; nmetalayer++) {",
          "1179:     header_pos += 1;",
          "1180:     if (header_len < header_pos) {",
          "1182:     }",
          "1183:     if ((*idxp & 0xe0u) != 0xa0u) {   // sanity check",
          "1185:     }",
          "1186:     blosc2_metalayer* metalayer = calloc(sizeof(blosc2_metalayer), 1);",
          "1187:     schunk->metalayers[nmetalayer] = metalayer;",
          "",
          "[Removed Lines]",
          "1181:       return -1;",
          "1184:       return -1;",
          "",
          "[Added Lines]",
          "1181:       return BLOSC2_ERROR_READ_BUFFER;",
          "1184:       return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 27 ---",
          "[Context before]",
          "1191:     idxp += 1;",
          "1192:     header_pos += nslen;",
          "1193:     if (header_len < header_pos) {",
          "1195:     }",
          "1196:     char* ns = malloc((size_t)nslen + 1);",
          "1197:     memcpy(ns, idxp, nslen);",
          "",
          "[Removed Lines]",
          "1194:       return -1;",
          "",
          "[Added Lines]",
          "1194:       return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 28 ---",
          "[Context before]",
          "1204:     header_pos += 1;",
          "1205:     if (header_len < header_pos) {",
          "1207:     }",
          "1208:     if ((*idxp & 0xffu) != 0xd2u) {   // sanity check",
          "1210:     }",
          "1211:     idxp += 1;",
          "1212:     int32_t offset;",
          "1213:     header_pos += sizeof(offset);",
          "1214:     if (header_len < header_pos) {",
          "1216:     }",
          "1217:     swap_store(&offset, idxp, sizeof(offset));",
          "1218:     idxp += 4;",
          "1219:     if (offset < 0 || offset >= header_len) {",
          "1222:     }",
          "1224:     uint8_t* content_marker = header + offset;",
          "1225:     if (*content_marker != 0xc6) {",
          "1227:     }",
          "1230:     int32_t content_len;",
          "1231:     header_pos += sizeof(content_len);",
          "1232:     if (header_len < header_pos) {",
          "1234:     }",
          "1235:     swap_store(&content_len, content_marker + 1, sizeof(content_len));",
          "1236:     metalayer->content_len = content_len;",
          "",
          "[Removed Lines]",
          "1206:       return -1;",
          "1209:       return -1;",
          "1215:       return -1;",
          "1221:       return -1;",
          "1226:       return -1;",
          "1233:       return -1;",
          "",
          "[Added Lines]",
          "1206:       return BLOSC2_ERROR_READ_BUFFER;",
          "1209:       return BLOSC2_ERROR_DATA;",
          "1215:       return BLOSC2_ERROR_READ_BUFFER;",
          "1221:       return BLOSC2_ERROR_DATA;",
          "1226:       return BLOSC2_ERROR_DATA;",
          "1233:       return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 29 ---",
          "[Context before]",
          "1239:     header_pos += content_len;",
          "1240:     if (header_len < header_pos) {",
          "1242:     }",
          "1243:     char* content = malloc((size_t)content_len);",
          "1244:     memcpy(content, content_marker + 1 + 4, (size_t)content_len);",
          "",
          "[Removed Lines]",
          "1241:       return -1;",
          "",
          "[Added Lines]",
          "1241:       return BLOSC2_ERROR_READ_BUFFER;",
          "",
          "---------------",
          "--- Hunk 30 ---",
          "[Context before]",
          "1259:                             NULL, NULL, NULL, NULL, NULL);",
          "1260:   if (ret < 0) {",
          "1261:     BLOSC_TRACE_ERROR(\"Unable to get the header info from frame.\");",
          "1263:   }",
          "",
          "[Removed Lines]",
          "1262:     return -1;",
          "",
          "[Added Lines]",
          "1262:     return ret;",
          "",
          "---------------",
          "--- Hunk 31 ---",
          "[Context before]",
          "1286:     if (rbytes != (size_t) header_len) {",
          "1287:       BLOSC_TRACE_ERROR(\"Cannot access the header out of the fileframe.\");",
          "1288:       free(header);",
          "1290:     }",
          "1291:   }",
          "",
          "[Removed Lines]",
          "1289:       return -2;",
          "",
          "[Added Lines]",
          "1289:       return BLOSC2_ERROR_FILE_READ;",
          "",
          "---------------",
          "--- Hunk 32 ---",
          "[Context before]",
          "1507:   uint8_t *coffsets = get_coffsets(frame, header_len, cbytes, NULL);",
          "1508:   if (coffsets == NULL) {",
          "1509:     BLOSC_TRACE_ERROR(\"Cannot get the offset for chunk %d for the frame.\", nchunk);",
          "1511:   }",
          "1514:   int rc = blosc_getitem(coffsets, nchunk, 1, &offset);",
          "1515:   if (rc < 0) {",
          "1516:     BLOSC_TRACE_ERROR(\"Problems retrieving a chunk offset.\");",
          "1518:   }",
          "1519:   return offset;",
          "1520: }",
          "",
          "[Removed Lines]",
          "1510:     return -3;",
          "1517:     return -4;",
          "",
          "[Added Lines]",
          "1510:     return BLOSC2_ERROR_DATA;",
          "1517:     return rc;",
          "",
          "---------------",
          "--- Hunk 33 ---",
          "[Context before]",
          "1533:     int rc = blosc2_chunk_zeros(nbytes, typesize, *chunk, cbytes);",
          "1534:     if (rc < 0) {",
          "1535:       BLOSC_TRACE_ERROR(\"Error creating a zero chunk\");",
          "1537:     }",
          "1538:   }",
          "1539:   else if (special_value & nans_mask) {",
          "1540:     int rc = blosc2_chunk_nans(nbytes, typesize, *chunk, cbytes);",
          "1541:     if (rc < 0) {",
          "1542:       BLOSC_TRACE_ERROR(\"Error creating a nan chunk\");",
          "1544:     }",
          "1545:   }",
          "1546:   else {",
          "1547:     BLOSC_TRACE_ERROR(\"Special value not recognized: %lld\", special_value);",
          "1549:   }",
          "1551:   return 0;",
          "",
          "[Removed Lines]",
          "1536:       return -1;",
          "1543:       return -1;",
          "1548:     return -1;",
          "",
          "[Added Lines]",
          "1536:       return rc;",
          "1543:       return rc;",
          "1548:     return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 34 ---",
          "[Context before]",
          "1578:                             &typesize, NULL, NULL, NULL, NULL);",
          "1579:   if (ret < 0) {",
          "1580:     BLOSC_TRACE_ERROR(\"Unable to get meta info from frame.\");",
          "1582:   }",
          "1584:   if (nchunk >= nchunks) {",
          "1585:     BLOSC_TRACE_ERROR(\"nchunk ('%d') exceeds the number of chunks \"",
          "1586:                     \"('%d') in frame.\", nchunk, nchunks);",
          "1588:   }",
          "",
          "[Removed Lines]",
          "1581:     return -1;",
          "1587:     return -2;",
          "",
          "[Added Lines]",
          "1581:     return ret;",
          "1587:     return BLOSC2_ERROR_INVALID_PARAM;",
          "",
          "---------------",
          "--- Hunk 35 ---",
          "[Context before]",
          "1612:     if (rbytes != sizeof(chunk_cbytes)) {",
          "1613:       BLOSC_TRACE_ERROR(\"Cannot read the cbytes for chunk in the fileframe.\");",
          "1614:       fclose(fp);",
          "1616:     }",
          "1617:     chunk_cbytes = sw32_(&chunk_cbytes);",
          "",
          "[Removed Lines]",
          "1615:       return -5;",
          "",
          "[Added Lines]",
          "1615:       return BLOSC2_ERROR_FILE_READ;",
          "",
          "---------------",
          "--- Hunk 36 ---",
          "[Context before]",
          "1621:     fclose(fp);",
          "1622:     if (rbytes != (size_t)chunk_cbytes) {",
          "1623:       BLOSC_TRACE_ERROR(\"Cannot read the chunk out of the fileframe.\");",
          "1625:     }",
          "1627:   } else {",
          "",
          "[Removed Lines]",
          "1624:       return -6;",
          "",
          "[Added Lines]",
          "1624:       return BLOSC2_ERROR_FILE_READ;",
          "",
          "---------------",
          "--- Hunk 37 ---",
          "[Context before]",
          "1661:                             &typesize, NULL, NULL, NULL, NULL);",
          "1662:   if (ret < 0) {",
          "1663:     BLOSC_TRACE_ERROR(\"Unable to get meta info from frame.\");",
          "1665:   }",
          "1667:   if (nchunk >= nchunks) {",
          "1668:     BLOSC_TRACE_ERROR(\"nchunk ('%d') exceeds the number of chunks \"",
          "1669:                       \"('%d') in frame.\", nchunk, nchunks);",
          "1671:   }",
          "",
          "[Removed Lines]",
          "1664:     return -1;",
          "1670:     return -2;",
          "",
          "[Added Lines]",
          "1664:     return ret;",
          "1670:     return BLOSC2_ERROR_INVALID_PARAM;",
          "",
          "---------------",
          "--- Hunk 38 ---",
          "[Context before]",
          "1707:     if (rbytes != BLOSC_MIN_HEADER_LENGTH) {",
          "1708:       BLOSC_TRACE_ERROR(\"Cannot read the header for chunk in the fileframe.\");",
          "1709:       fclose(fp);",
          "1711:     }",
          "1712:     blosc_cbuffer_sizes(header, &chunk_nbytes, &chunk_cbytes, &chunk_blocksize);",
          "1713:     size_t nblocks = chunk_nbytes / chunk_blocksize;",
          "",
          "[Removed Lines]",
          "1710:       return -5;",
          "",
          "[Added Lines]",
          "1710:       return BLOSC2_ERROR_FILE_READ;",
          "",
          "---------------",
          "--- Hunk 39 ---",
          "[Context before]",
          "1730:     fclose(fp);",
          "1731:     if (rbytes != trailer_offset) {",
          "1732:       BLOSC_TRACE_ERROR(\"Cannot read the (lazy) chunk out of the fileframe.\");",
          "1734:     }",
          "",
          "[Removed Lines]",
          "1733:       return -6;",
          "",
          "[Added Lines]",
          "1733:       return BLOSC2_ERROR_FILE_READ;",
          "",
          "---------------",
          "--- Hunk 40 ---",
          "[Context before]",
          "2352:   if (coffsets == NULL) {",
          "2353:     BLOSC_TRACE_ERROR(\"Cannot get the offsets for the frame.\");",
          "2354:     free(offsets);",
          "2356:   }",
          "",
          "[Removed Lines]",
          "2355:     return -1;",
          "",
          "[Added Lines]",
          "2355:     return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 41 ---",
          "[Context before]",
          "2364:   if (prev_nbytes < 0) {",
          "2365:     free(offsets);",
          "2366:     BLOSC_TRACE_ERROR(\"Cannot decompress the offsets chunk.\");",
          "2368:   }",
          "",
          "[Removed Lines]",
          "2367:     return -1;",
          "",
          "[Added Lines]",
          "2367:     return prev_nbytes;",
          "",
          "---------------",
          "--- Hunk 42 ---",
          "[Context before]",
          "2387:   if (new_off_cbytes < 0) {",
          "2388:     free(offsets);",
          "2389:     free(off_chunk);",
          "2391:   }",
          "2392:   free(offsets);",
          "2393:   int64_t new_frame_len;",
          "",
          "[Removed Lines]",
          "2390:     return -1;",
          "",
          "[Added Lines]",
          "2390:     return new_off_cbytes;",
          "",
          "---------------",
          "--- Hunk 43 ---",
          "[Context before]",
          "2405:     frame->sdata = framep = realloc(framep, (size_t)new_frame_len);",
          "2406:     if (framep == NULL) {",
          "2407:       BLOSC_TRACE_ERROR(\"Cannot realloc space for the frame.\");",
          "2409:     }",
          "2411:     memcpy(framep + header_len + cbytes, off_chunk, (size_t)new_off_cbytes);",
          "",
          "[Removed Lines]",
          "2408:       return -1;",
          "",
          "[Added Lines]",
          "2408:       return BLOSC2_ERROR_MEMORY_ALLOC;",
          "",
          "---------------",
          "--- Hunk 44 ---",
          "[Context before]",
          "2429:     fclose(fp);",
          "2430:     if (wbytes != (size_t)new_off_cbytes) {",
          "2431:       BLOSC_TRACE_ERROR(\"Cannot write the offsets to fileframe.\");",
          "2433:     }",
          "2434:   }",
          "",
          "[Removed Lines]",
          "2432:       return -1;",
          "",
          "[Added Lines]",
          "2432:       return BLOSC2_ERROR_FILE_WRITE;",
          "",
          "---------------",
          "--- Hunk 45 ---",
          "[Context before]",
          "2443:   frame->len = new_frame_len;",
          "2444:   int rc = frame_update_header(frame, schunk, false);",
          "2445:   if (rc < 0) {",
          "2447:   }",
          "2449:   rc = frame_update_trailer(frame, schunk);",
          "2450:   if (rc < 0) {",
          "2452:   }",
          "2454:   return 0;",
          "",
          "[Removed Lines]",
          "2446:     return -1;",
          "2451:     return -1;",
          "",
          "[Added Lines]",
          "2446:     return rc;",
          "2451:     return rc;",
          "",
          "---------------",
          "--- Hunk 46 ---",
          "[Context before]",
          "2469:   }",
          "2470:   if (chunk_cbytes < 0) {",
          "2471:     BLOSC_TRACE_ERROR(\"Cannot get the chunk in position %d.\", nchunk);",
          "2473:   }",
          "2474:   if (chunk_cbytes < (signed)sizeof(int32_t)) {",
          "2477:   }",
          "2480:   int32_t nbytes_ = sw32_(src + BLOSC2_CHUNK_NBYTES);",
          "2481:   if (nbytes_ > (int32_t)nbytes) {",
          "2482:     BLOSC_TRACE_ERROR(\"Not enough space for decompressing in dest.\");",
          "2484:   }",
          "2486:   dctx->header_overhead = BLOSC_EXTENDED_HEADER_LENGTH;",
          "2487:   int32_t chunksize = blosc2_decompress_ctx(dctx, src, chunk_cbytes, dest, nbytes);",
          "2488:   if (chunksize < 0 || chunksize != nbytes_) {",
          "2489:     BLOSC_TRACE_ERROR(\"Error in decompressing chunk.\");",
          "2491:   }",
          "2493:   if (needs_free) {",
          "",
          "[Removed Lines]",
          "2472:     return -1;",
          "2476:     return -1;",
          "2483:     return -1;",
          "2490:     return -11;",
          "",
          "[Added Lines]",
          "2472:     return BLOSC2_ERROR_DATA;",
          "2476:     return BLOSC2_ERROR_READ_BUFFER;",
          "2483:     return BLOSC2_ERROR_WRITE_BUFFER;",
          "2490:     if (chunksize < 0)",
          "2491:       return chunksize;",
          "2492:     return BLOSC2_ERROR_FAILURE;",
          "",
          "---------------"
        ],
        "blosc/schunk.c||blosc/schunk.c": [
          "File: blosc/schunk.c -> blosc/schunk.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "313:   if (nbytes > schunk->chunksize) {",
          "314:     BLOSC_TRACE_ERROR(\"Appending chunks that have different lengths in the same schunk \"",
          "315:                       \"is not supported yet: %d > %d.\", nbytes, schunk->chunksize);",
          "317:   }",
          "",
          "[Removed Lines]",
          "316:     return -1;",
          "",
          "[Added Lines]",
          "316:     return BLOSC2_ERROR_CHUNK_APPEND;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "353:         BLOSC_TRACE_ERROR(",
          "354:                 \"Appending two consecutive chunks with a chunksize smaller than the schunk chunksize \"",
          "355:                 \"is not allowed yet: %d != %d.\", nbytes, schunk->chunksize);",
          "357:       }",
          "358:     }",
          "",
          "[Removed Lines]",
          "356:         return -1;",
          "",
          "[Added Lines]",
          "356:         return BLOSC2_ERROR_CHUNK_APPEND;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "373:   else {",
          "374:     if (frame_append_chunk(schunk->frame, chunk, schunk) == NULL) {",
          "375:       BLOSC_TRACE_ERROR(\"Problems appending a chunk.\");",
          "377:     }",
          "378:   }",
          "379:   return schunk->nchunks;",
          "",
          "[Removed Lines]",
          "376:       return -1;",
          "",
          "[Added Lines]",
          "376:       return BLOSC2_ERROR_CHUNK_APPEND;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "393:   if (nbytes > schunk->chunksize) {",
          "394:     BLOSC_TRACE_ERROR(\"Inserting chunks that have different lengths in the same schunk \"",
          "395:                       \"is not supported yet: %d > %d.\", nbytes, schunk->chunksize);",
          "397:   }",
          "",
          "[Removed Lines]",
          "396:     return -1;",
          "",
          "[Added Lines]",
          "396:     return BLOSC2_ERROR_CHUNK_INSERT;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "433:         BLOSC_TRACE_ERROR(\"Appending two consecutive chunks with a chunksize smaller \"",
          "434:                           \"than the schunk chunksize is not allowed yet:  %d != %d\",",
          "435:                           nbytes, schunk->chunksize);",
          "437:       }",
          "438:     }",
          "",
          "[Removed Lines]",
          "436:         return -1;",
          "",
          "[Added Lines]",
          "436:         return BLOSC2_ERROR_CHUNK_APPEND;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "459:   else {",
          "460:     if (frame_insert_chunk(schunk->frame, nchunk, chunk, schunk) == NULL) {",
          "463:     }",
          "464:   }",
          "465:   return schunk->nchunks;",
          "",
          "[Removed Lines]",
          "461:       BLOSC_TRACE_ERROR(\"Problems updating a chunk in a frame.\");",
          "462:       return -1;",
          "",
          "[Added Lines]",
          "461:       BLOSC_TRACE_ERROR(\"Problems inserting a chunk in a frame.\");",
          "462:       return BLOSC2_ERROR_CHUNK_INSERT;",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "477:   if ((schunk->chunksize != 0) && (nbytes != schunk->chunksize)) {",
          "478:     BLOSC_TRACE_ERROR(\"Inserting chunks that have different lengths in the same schunk \"",
          "479:                       \"is not supported yet: %d > %d.\", nbytes, schunk->chunksize);",
          "481:   }",
          "483:   bool needs_free;",
          "",
          "[Removed Lines]",
          "480:     return -1;",
          "",
          "[Added Lines]",
          "480:     return BLOSC2_ERROR_CHUNK_INSERT;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "561:   else {",
          "562:     if (frame_update_chunk(schunk->frame, nchunk, chunk, schunk) == NULL) {",
          "563:         BLOSC_TRACE_ERROR(\"Problems updating a chunk in a frame.\");",
          "565:     }",
          "566:   }",
          "",
          "[Removed Lines]",
          "564:         return -1;",
          "",
          "[Added Lines]",
          "564:         return BLOSC2_ERROR_CHUNK_UPDATE;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "597:     if (nchunk >= schunk->nchunks) {",
          "598:       BLOSC_TRACE_ERROR(\"nchunk ('%d') exceeds the number of chunks \"",
          "599:                         \"('%d') in super-chunk.\", nchunk, schunk->nchunks);",
          "601:     }",
          "602:     uint8_t* src = schunk->data[nchunk];",
          "603:     if (src == 0) {",
          "",
          "[Removed Lines]",
          "600:       return -11;",
          "",
          "[Added Lines]",
          "600:       return BLOSC2_ERROR_INVALID_PARAM;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "608:     if (nbytes < nbytes_) {",
          "609:       BLOSC_TRACE_ERROR(\"Buffer size is too small for the decompressed buffer \"",
          "610:                         \"('%d' bytes, but '%d' are needed).\", nbytes, nbytes_);",
          "612:     }",
          "613:     int cbytes = sw32_(src + BLOSC2_CHUNK_CBYTES);",
          "614:     chunksize = blosc2_decompress_ctx(schunk->dctx, src, cbytes, dest, nbytes);",
          "615:     if (chunksize < 0 || chunksize != nbytes_) {",
          "616:       BLOSC_TRACE_ERROR(\"Error in decompressing chunk.\");",
          "618:     }",
          "619:   } else {",
          "620:     chunksize = frame_decompress_chunk(schunk->dctx, schunk->frame, nchunk, dest, nbytes);",
          "621:     if (chunksize < 0) {",
          "623:     }",
          "624:   }",
          "625:   return chunksize;",
          "",
          "[Removed Lines]",
          "611:       return -11;",
          "617:       return -11;",
          "622:       return -10;",
          "",
          "[Added Lines]",
          "611:       return BLOSC2_ERROR_INVALID_PARAM;",
          "617:       if (chunksize < 0)",
          "618:         return chunksize;",
          "619:       return BLOSC2_ERROR_FAILURE;",
          "624:       return chunksize;",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "643:   if (nchunk >= schunk->nchunks) {",
          "644:     BLOSC_TRACE_ERROR(\"nchunk ('%d') exceeds the number of chunks \"",
          "645:                       \"('%d') in schunk.\", nchunk, schunk->nchunks);",
          "647:   }",
          "",
          "[Removed Lines]",
          "646:     return -2;",
          "",
          "[Added Lines]",
          "648:     return BLOSC2_ERROR_INVALID_PARAM;",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "675:   if (nchunk >= schunk->nchunks) {",
          "676:     BLOSC_TRACE_ERROR(\"nchunk ('%d') exceeds the number of chunks \"",
          "677:                       \"('%d') in schunk.\", nchunk, schunk->nchunks);",
          "679:   }",
          "",
          "[Removed Lines]",
          "678:     return -2;",
          "",
          "[Added Lines]",
          "680:     return BLOSC2_ERROR_INVALID_PARAM;",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "696: int blosc2_has_metalayer(blosc2_schunk *schunk, const char *name) {",
          "697:   if (strlen(name) > BLOSC2_METALAYER_NAME_MAXLEN) {",
          "698:     BLOSC_TRACE_ERROR(\"Metalayers cannot be larger than %d chars.\", BLOSC2_METALAYER_NAME_MAXLEN);",
          "700:   }",
          "702:   for (int nmetalayer = 0; nmetalayer < schunk->nmetalayers; nmetalayer++) {",
          "703:     if (strcmp(name, schunk->metalayers[nmetalayer]->name) == 0) {",
          "705:     }",
          "706:   }",
          "708: }",
          "",
          "[Removed Lines]",
          "699:     return -1;",
          "704:       return nmetalayer;  // Found",
          "707:   return -1;  // Not found",
          "",
          "[Added Lines]",
          "701:     return BLOSC2_ERROR_INVALID_PARAM;",
          "706:       return nmetalayer;",
          "709:   return BLOSC2_ERROR_NOT_FOUND;",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "716:     if (index >= schunk->nchunks) {",
          "717:       BLOSC_TRACE_ERROR(\"Index is bigger than the number of chunks.\");",
          "718:       free(index_check);",
          "720:     }",
          "721:     if (index_check[index] == false) {",
          "722:       index_check[index] = true;",
          "723:     } else {",
          "724:       BLOSC_TRACE_ERROR(\"Index is yet used.\");",
          "725:       free(index_check);",
          "727:     }",
          "728:   }",
          "729:   free(index_check);",
          "",
          "[Removed Lines]",
          "719:       return -1;",
          "726:       return -1;",
          "",
          "[Added Lines]",
          "721:       return BLOSC2_ERROR_DATA;",
          "728:       return BLOSC2_ERROR_DATA;",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "766:   rc = frame_update_header(schunk->frame, schunk, true);",
          "767:   if (rc < 0) {",
          "768:     BLOSC_TRACE_ERROR(\"Unable to update metalayers into frame.\");",
          "770:   }",
          "771:   rc = frame_update_trailer(schunk->frame, schunk);",
          "772:   if (rc < 0) {",
          "773:     BLOSC_TRACE_ERROR(\"Unable to update trailer into frame.\");",
          "775:   }",
          "776:   return rc;",
          "777: }",
          "",
          "[Removed Lines]",
          "769:     return -1;",
          "774:     return -2;",
          "",
          "[Added Lines]",
          "771:     return rc;",
          "776:     return rc;",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "785:   int nmetalayer = blosc2_has_metalayer(schunk, name);",
          "786:   if (nmetalayer >= 0) {",
          "787:     BLOSC_TRACE_ERROR(\"Metalayer \\\"%s\\\" already exists.\", name);",
          "789:   }",
          "",
          "[Removed Lines]",
          "788:     return -2;",
          "",
          "[Added Lines]",
          "790:     return BLOSC2_ERROR_INVALID_PARAM;",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "803:   int rc = metalayer_flush(schunk);",
          "804:   if (rc < 0) {",
          "806:   }",
          "808:   return schunk->nmetalayers - 1;",
          "",
          "[Removed Lines]",
          "805:     return -1;",
          "",
          "[Added Lines]",
          "807:     return rc;",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "834:     int rc = frame_update_header(schunk->frame, schunk, false);",
          "835:     if (rc < 0) {",
          "836:       BLOSC_TRACE_ERROR(\"Unable to update meta info from frame.\");",
          "838:     }",
          "839:   }",
          "",
          "[Removed Lines]",
          "837:       return -1;",
          "",
          "[Added Lines]",
          "839:       return rc;",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "867:                            blosc2_cparams cparams) {",
          "868:   if ((uint32_t) content_len > (1u << 31u)) {",
          "869:     BLOSC_TRACE_ERROR(\"content_len cannot exceed 2 GB.\");",
          "871:   }",
          "",
          "[Removed Lines]",
          "870:     return -1;",
          "",
          "[Added Lines]",
          "872:     return BLOSC2_ERROR_2GB_LIMIT;",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "878:   blosc2_free_ctx(cctx);",
          "879:   if (usermeta_cbytes < 0) {",
          "880:     free(usermeta_chunk);",
          "882:   }",
          "",
          "[Removed Lines]",
          "881:     return -1;",
          "",
          "[Added Lines]",
          "883:     return usermeta_cbytes;",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "910:   int usermeta_nbytes = blosc2_decompress_ctx(dctx, schunk->usermeta, schunk->usermeta_len, *content, (int32_t)nbytes);",
          "911:   blosc2_free_ctx(dctx);",
          "912:   if (usermeta_nbytes < 0) {",
          "914:   }",
          "915:   return (int32_t)nbytes;",
          "916: }",
          "",
          "[Removed Lines]",
          "913:     return -1;",
          "",
          "[Added Lines]",
          "915:     return usermeta_nbytes;",
          "",
          "---------------"
        ],
        "examples/frame_simple.c||examples/frame_simple.c": [
          "File: examples/frame_simple.c -> examples/frame_simple.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "79:                                      BLOSC2_CPARAMS_DEFAULTS);",
          "80:   if (umlen < 0) {",
          "81:     printf(\"Cannot write usermeta chunk\");",
          "83:   }",
          "",
          "[Removed Lines]",
          "82:     return -1;",
          "",
          "[Added Lines]",
          "82:     return umlen;",
          "",
          "---------------"
        ]
      }
    }
  ]
}