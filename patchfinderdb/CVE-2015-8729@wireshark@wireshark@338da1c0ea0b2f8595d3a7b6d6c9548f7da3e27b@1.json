{
  "cve_id": "CVE-2015-8729",
  "cve_desc": "The ascend_seek function in wiretap/ascendtext.c in the Ascend file parser in Wireshark 1.12.x before 1.12.9 and 2.0.x before 2.0.1 does not ensure the presence of a '\\0' character at the end of a date string, which allows remote attackers to cause a denial of service (out-of-bounds read and application crash) via a crafted file.",
  "repo": "wireshark/wireshark",
  "patch_hash": "338da1c0ea0b2f8595d3a7b6d6c9548f7da3e27b",
  "patch_info": {
    "commit_hash": "338da1c0ea0b2f8595d3a7b6d6c9548f7da3e27b",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/338da1c0ea0b2f8595d3a7b6d6c9548f7da3e27b",
    "files": [
      "wiretap/ascendtext.c"
    ],
    "message": "Fix out-of-bounds read in ascend_seek.\n\nBug: 11794\nChange-Id: I74517806b119729ae6d9780bbd4bb094701ff05e\nReviewed-on: https://code.wireshark.org/review/12266\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot <buildbot-no-reply@wireshark.org>\nReviewed-by: Michael Mann <mmann78@netscape.net>",
    "before_after_code_files": [
      "wiretap/ascendtext.c||wiretap/ascendtext.c"
    ]
  },
  "patch_diff": {
    "wiretap/ascendtext.c||wiretap/ascendtext.c": [
      "File: wiretap/ascendtext.c -> wiretap/ascendtext.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "117:           if (strcmp(strptr, ASCEND_DATE) == 0) {",
      "118:             date_off = cur_off - len;",
      "119:           } else {",
      "120:             if (date_off == -1) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "119:             string_level[string_i] = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "019446a474253b79eb75790c4fed85f383bb9c37",
      "candidate_info": {
        "commit_hash": "019446a474253b79eb75790c4fed85f383bb9c37",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/019446a474253b79eb75790c4fed85f383bb9c37",
        "files": [
          "wiretap/ascendtext.c"
        ],
        "message": "Handle Date: headers differently from other headers.\n\nHandle Date: outside the \"loop over magic strings\" loop; that way, we\ndon't have to compare against \"Date:\" twice.\n\nDon't use strlen() on constant strings - sizeof string - 1 lets us\ncalculate the length at compile time.\n\nChange-Id: I7e4ff2f9762f96749a39609efa76430e5915d4f4\nReviewed-on: https://code.wireshark.org/review/12302\nReviewed-by: Guy Harris <guy@alum.mit.edu>",
        "before_after_code_files": [
          "wiretap/ascendtext.c||wiretap/ascendtext.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "wiretap/ascendtext.c||wiretap/ascendtext.c"
          ],
          "candidate": [
            "wiretap/ascendtext.c||wiretap/ascendtext.c"
          ]
        }
      },
      "candidate_diff": {
        "wiretap/ascendtext.c||wiretap/ascendtext.c": [
          "File: wiretap/ascendtext.c -> wiretap/ascendtext.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "51: typedef struct _ascend_magic_string {",
          "52:   guint        type;",
          "54: } ascend_magic_string;",
          "60: static const ascend_magic_string ascend_magic[] = {",
          "72: };",
          "74: static gboolean ascend_read(wtap *wth, int *err, gchar **err_info,",
          "75:         gint64 *data_offset);",
          "76: static gboolean ascend_seek_read(wtap *wth, gint64 seek_off,",
          "",
          "[Removed Lines]",
          "53:   const gchar   *strptr;",
          "56: #define ASCEND_MAGIC_STRINGS    11",
          "57: #define ASCEND_DATE             \"Date:\"",
          "61:   { ASCEND_PFX_ISDN_X,  \"PRI-XMIT-\" },",
          "62:   { ASCEND_PFX_ISDN_R,  \"PRI-RCV-\" },",
          "63:   { ASCEND_PFX_WDS_X,   \"XMIT-\" },",
          "64:   { ASCEND_PFX_WDS_R,   \"RECV-\" },",
          "65:   { ASCEND_PFX_WDS_X,   \"XMIT:\" },",
          "66:   { ASCEND_PFX_WDS_R,   \"RECV:\" },",
          "67:   { ASCEND_PFX_WDS_X,   \"PPP-OUT\" },",
          "68:   { ASCEND_PFX_WDS_R,   \"PPP-IN\" },",
          "69:   { ASCEND_PFX_WDD,     ASCEND_DATE },",
          "70:   { ASCEND_PFX_WDD,     \"WD_DIALOUT_DISP:\" },",
          "71:   { ASCEND_PFX_ETHER,   \"ETHER\" },",
          "",
          "[Added Lines]",
          "53:   const gchar *strptr;",
          "54:   size_t       strlength;",
          "58: #define ASCEND_MAGIC_ENTRY(type, string) \\",
          "61:   ASCEND_MAGIC_ENTRY(ASCEND_PFX_ISDN_X,  \"PRI-XMIT-\"),",
          "62:   ASCEND_MAGIC_ENTRY(ASCEND_PFX_ISDN_R,  \"PRI-RCV-\"),",
          "63:   ASCEND_MAGIC_ENTRY(ASCEND_PFX_WDS_X,   \"XMIT-\"),",
          "64:   ASCEND_MAGIC_ENTRY(ASCEND_PFX_WDS_R,   \"RECV-\"),",
          "65:   ASCEND_MAGIC_ENTRY(ASCEND_PFX_WDS_X,   \"XMIT:\"),",
          "66:   ASCEND_MAGIC_ENTRY(ASCEND_PFX_WDS_R,   \"RECV:\"),",
          "67:   ASCEND_MAGIC_ENTRY(ASCEND_PFX_WDS_X,   \"PPP-OUT\"),",
          "68:   ASCEND_MAGIC_ENTRY(ASCEND_PFX_WDS_R,   \"PPP-IN\"),",
          "69:   ASCEND_MAGIC_ENTRY(ASCEND_PFX_WDD,     \"WD_DIALOUT_DISP:\"),",
          "70:   ASCEND_MAGIC_ENTRY(ASCEND_PFX_ETHER,   \"ETHER\"),",
          "73: #define ASCEND_MAGIC_STRINGS    G_N_ELEMENTS(ascend_magic)",
          "75: #define ASCEND_DATE             \"Date:\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "86:   gint64 date_off = -1, cur_off, packet_off;",
          "87:   size_t string_level[ASCEND_MAGIC_STRINGS];",
          "88:   guint string_i = 0, type = 0;",
          "89:   guint excessive_read_count = 262144;",
          "91:   memset(&string_level, 0, sizeof(string_level));",
          "93:   while (((byte = file_getc(wth->fh)) != EOF)) {",
          "94:     excessive_read_count--;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "92:   static const gchar ascend_date[] = ASCEND_DATE;",
          "94:   size_t ascend_date_string_level;",
          "98:   ascend_date_string_level = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105:     for (string_i = 0; string_i < ASCEND_MAGIC_STRINGS; string_i++) {",
          "106:       const gchar *strptr = ascend_magic[string_i].strptr;",
          "109:       if (byte == *(strptr + string_level[string_i])) {",
          "",
          "[Removed Lines]",
          "107:       size_t len          = strlen(strptr);",
          "",
          "[Added Lines]",
          "114:       size_t len          = ascend_magic[string_i].strlength;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "127:             return -1;",
          "128:           }",
          "142:           } else {",
          "158:           }",
          "159:         }",
          "160:       } else {",
          "161:         string_level[string_i] = 0;",
          "162:       }",
          "163:     }",
          "164:   }",
          "",
          "[Removed Lines]",
          "132:           if (strcmp(strptr, ASCEND_DATE) == 0) {",
          "134:                Reset the amount of Date: header that we've matched,",
          "135:                so that we start the process of matching a Date:",
          "136:                header all over again.",
          "138:                XXX - what if we match multiple Date: headers before",
          "140:             date_off = cur_off - len;",
          "141:             string_level[string_i] = 0;",
          "144:             if (date_off == -1) {",
          "146:                  doesn't have one.",
          "147:                  Back up over the header we just read; that's where a read",
          "149:               packet_off = cur_off - len;",
          "150:             } else {",
          "153:               packet_off = date_off;",
          "154:             }",
          "156:             type = ascend_magic[string_i].type;",
          "157:             goto found;",
          "",
          "[Added Lines]",
          "138:           if (date_off == -1) {",
          "140:                doesn't have one.",
          "141:                Back up over the header we just read; that's where a read",
          "143:             packet_off = cur_off - len;",
          "147:             packet_off = date_off;",
          "150:           type = ascend_magic[string_i].type;",
          "151:           goto found;",
          "165:     if (byte == *(ascend_date + ascend_date_string_level)) {",
          "170:       ascend_date_string_level++;",
          "175:       if (ascend_date_string_level >= ascend_date_len) {",
          "177:            remember the offset, but keep looking for other",
          "178:            headers.",
          "180:            Reset the amount of Date: header that we've matched,",
          "181:            so that we start the process of matching a Date:",
          "182:            header all over again.",
          "184:            XXX - what if we match multiple Date: headers before",
          "186:         cur_off = file_tell(wth->fh);",
          "187:         if (cur_off == -1) {",
          "190:           return -1;",
          "191:         }",
          "193:         date_off = cur_off - ascend_date_len;",
          "194:         ascend_date_string_level = 0;",
          "195:       }",
          "196:     } else {",
          "200:       ascend_date_string_level = 0;",
          "201:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}