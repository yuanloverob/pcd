{
  "cve_id": "CVE-2017-7185",
  "cve_desc": "Use-after-free vulnerability in the mg_http_multipart_wait_for_boundary function in mongoose.c in Cesanta Mongoose Embedded Web Server Library 6.7 and earlier and Mongoose OS 1.2 and earlier allows remote attackers to cause a denial of service (crash) via a multipart/form-data POST request without a MIME boundary string.",
  "repo": "cesanta/mongoose",
  "patch_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
  "patch_info": {
    "commit_hash": "b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "repo": "cesanta/mongoose",
    "commit_url": "https://github.com/cesanta/mongoose/commit/b8402ed0733e3f244588b61ad5fedd093e3cf9cc",
    "files": [
      "mongoose.c"
    ],
    "message": "Fix crash in multipart handling\n\nClose cesanta/dev#6974\n\nPUBLISHED_FROM=4d4e4a46eceba10aec8dacb7f8f58bd078c92307",
    "before_after_code_files": [
      "mongoose.c||mongoose.c"
    ]
  },
  "patch_diff": {
    "mongoose.c||mongoose.c": [
      "File: mongoose.c -> mongoose.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "5961:   struct mbuf *io = &c->recv_mbuf;",
      "5962:   struct mg_http_proto_data *pd = mg_http_get_proto_data(c);",
      "5964:   if ((int) io->len < pd->mp_stream.boundary_len + 2) {",
      "5965:     return 0;",
      "5966:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "5964:   if (pd->mp_stream.boundary == NULL) {",
      "5965:     pd->mp_stream.state = MPS_FINALIZE;",
      "5966:     DBG((\"Invalid request: boundary not initilaized\"));",
      "5967:     return 0;",
      "5968:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0fba87c755a4dd23bfa5e538480db9d0e955793b",
      "candidate_info": {
        "commit_hash": "0fba87c755a4dd23bfa5e538480db9d0e955793b",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/0fba87c755a4dd23bfa5e538480db9d0e955793b",
        "files": [
          "docs/c-api/util.h/intro.md",
          "docs/c-api/util.h/mg_url_encode.md",
          "mongoose.c",
          "mongoose.h"
        ],
        "message": "Make mg_url_encode public\n\nChange the API to heap-allocate the string and get rid of a bunch of fat stack buffers.\n\nPUBLISHED_FROM=c793dc64a9a044a9769d92ea16859f5d704a2181",
        "before_after_code_files": [
          "mongoose.c||mongoose.c",
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7033: #endif",
          "7035: #if MG_ENABLE_DIRECTORY_LISTING",
          "7058: static void mg_escape(const char *src, char *dst, size_t dst_len) {",
          "7059:   size_t n = 0;",
          "7060:   while (*src != '\\0' && n + 5 < dst_len) {",
          "",
          "[Removed Lines]",
          "7036: static size_t mg_url_encode(const char *src, size_t s_len, char *dst,",
          "7037:                             size_t dst_len) {",
          "7038:   static const char *dont_escape = \"._-$,;~()/\";",
          "7039:   static const char *hex = \"0123456789abcdef\";",
          "7040:   size_t i = 0, j = 0;",
          "7042:   for (i = j = 0; dst_len > 0 && i < s_len && j + 2 < dst_len - 1; i++, j++) {",
          "7043:     if (isalnum(*(const unsigned char *) (src + i)) ||",
          "7044:         strchr(dont_escape, *(const unsigned char *) (src + i)) != NULL) {",
          "7045:       dst[j] = src[i];",
          "7046:     } else if (j + 3 < dst_len) {",
          "7047:       dst[j] = '%';",
          "7048:       dst[j + 1] = hex[(*(const unsigned char *) (src + i)) >> 4];",
          "7049:       dst[j + 2] = hex[(*(const unsigned char *) (src + i)) & 0xf];",
          "7050:       j += 2;",
          "7051:     }",
          "7052:   }",
          "7054:   dst[j] = '\\0';",
          "7055:   return j;",
          "7056: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7071: static void mg_print_dir_entry(struct mg_connection *nc, const char *file_name,",
          "7072:                                cs_stat_t *stp) {",
          "7074:   int64_t fsize = stp->st_size;",
          "7075:   int is_dir = S_ISDIR(stp->st_mode);",
          "7076:   const char *slash = is_dir ? \"/\" : \"\";",
          "7078:   if (is_dir) {",
          "7079:     snprintf(size, sizeof(size), \"%s\", \"[DIRECTORY]\");",
          "",
          "[Removed Lines]",
          "7073:   char size[64], mod[64], href[MG_MAX_PATH * 3], path[MG_MAX_PATH];",
          "",
          "[Added Lines]",
          "7051:   char size[64], mod[64], path[MG_MAX_PATH];",
          "7055:   struct mg_str href;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "7094:   }",
          "7095:   strftime(mod, sizeof(mod), \"%d-%b-%Y %H:%M\", localtime(&stp->st_mtime));",
          "7096:   mg_escape(file_name, path, sizeof(path));",
          "7098:   mg_printf_http_chunk(nc,",
          "7099:                        \"<tr><td><a href=\\\"%s%s\\\">%s%s</a></td>\"",
          "7100:                        \"<td>%s</td><td name=%\" INT64_FMT \">%s</td></tr>\\n\",",
          "7102:                        size);",
          "7103: }",
          "7105: static void mg_scan_directory(struct mg_connection *nc, const char *dir,",
          "",
          "[Removed Lines]",
          "7097:   mg_url_encode(file_name, strlen(file_name), href, sizeof(href));",
          "7101:                        href, slash, path, slash, mod, is_dir ? -1 : fsize,",
          "",
          "[Added Lines]",
          "7076:   href = mg_url_encode(mg_mk_str(file_name));",
          "7080:                        href.p, slash, path, slash, mod, is_dir ? -1 : fsize,",
          "7082:   free((void *) href.p);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8866: static void mg_print_props(struct mg_connection *nc, const char *name,",
          "8867:                            cs_stat_t *stp) {",
          "8870:   mg_gmt_time_string(mtime, sizeof(mtime), &t);",
          "8872:   mg_printf(nc,",
          "8873:             \"<d:response>\"",
          "8874:             \"<d:href>%s</d:href>\"",
          "",
          "[Removed Lines]",
          "8868:   char mtime[64], buf[MG_MAX_PATH * 3];",
          "8871:   mg_url_encode(name, strlen(name), buf, sizeof(buf));",
          "",
          "[Added Lines]",
          "8848:   char mtime[64];",
          "8850:   struct mg_str name_esc = mg_url_encode(mg_mk_str(name));",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8882:             \"<d:status>HTTP/1.1 200 OK</d:status>\"",
          "8883:             \"</d:propstat>\"",
          "8884:             \"</d:response>\\n\",",
          "8886:             (int64_t) stp->st_size, mtime);",
          "8887: }",
          "8889: MG_INTERNAL void mg_handle_propfind(struct mg_connection *nc, const char *path,",
          "",
          "[Removed Lines]",
          "8885:             buf, S_ISDIR(stp->st_mode) ? \"<d:collection/>\" : \"\",",
          "",
          "[Added Lines]",
          "8865:             name_esc.p, S_ISDIR(stp->st_mode) ? \"<d:collection/>\" : \"\",",
          "8867:   free((void *) name_esc.p);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9823:   cs_base64_finish(&ctx);",
          "9824:   mbuf_append(buf, header_suffix, strlen(header_suffix));",
          "9825: }",
          "9826: #ifdef MG_MODULE_LINES",
          "9827: #line 1 \"mongoose/src/mqtt.c\"",
          "9828: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9808: struct mg_str mg_url_encode(const struct mg_str src) {",
          "9809:   static const char *dont_escape = \"._-$,;~()/\";",
          "9810:   static const char *hex = \"0123456789abcdef\";",
          "9811:   size_t i = 0;",
          "9812:   struct mbuf mb;",
          "9813:   mbuf_init(&mb, src.len);",
          "9815:   for (i = 0; i < src.len; i++) {",
          "9816:     const unsigned char c = *((const unsigned char *) src.p + i);",
          "9817:     if (isalnum(c) || strchr(dont_escape, c) != NULL) {",
          "9818:       mbuf_append(&mb, &c, 1);",
          "9819:     } else {",
          "9820:       mbuf_append(&mb, \"%\", 1);",
          "9821:       mbuf_append(&mb, &hex[c >> 4], 1);",
          "9822:       mbuf_append(&mb, &hex[c & 15], 1);",
          "9823:     }",
          "9824:   }",
          "9825:   mbuf_append(&mb, \"\", 1);",
          "9826:   mbuf_trim(&mb);",
          "9827:   return mg_mk_str_n(mb.buf, mb.len - 1);",
          "9828: }",
          "",
          "---------------"
        ],
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4077: void mg_basic_auth_header(const struct mg_str user, const struct mg_str pass,",
          "4078:                           struct mbuf *buf);",
          "4080: #ifdef __cplusplus",
          "4081: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4086: struct mg_str mg_url_encode(const struct mg_str src);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "511c9a6d4a47447eb493707c6cc5e58b1759ae49",
      "candidate_info": {
        "commit_hash": "511c9a6d4a47447eb493707c6cc5e58b1759ae49",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/511c9a6d4a47447eb493707c6cc5e58b1759ae49",
        "files": [
          "examples/ESP32_IDF/Makefile",
          "examples/ESP32_IDF/Makefile.build",
          "examples/ESP32_IDF/README.md",
          "examples/ESP32_IDF/main/component.mk",
          "examples/ESP32_IDF/main/main.c",
          "examples/ESP32_IDF/sdk.version",
          "examples/Makefile"
        ],
        "message": "Add simple mongoose/esp32 example (w/out mOS)\n\nPUBLISHED_FROM=0e407a2fb328107540d753123fe027f43860d0ef",
        "before_after_code_files": [
          "examples/ESP32_IDF/Makefile.build||examples/ESP32_IDF/Makefile.build",
          "examples/ESP32_IDF/main/component.mk||examples/ESP32_IDF/main/component.mk",
          "examples/ESP32_IDF/main/main.c||examples/ESP32_IDF/main/main.c",
          "examples/ESP32_IDF/sdk.version||examples/ESP32_IDF/sdk.version"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "examples/ESP32_IDF/Makefile.build||examples/ESP32_IDF/Makefile.build": [
          "File: examples/ESP32_IDF/Makefile.build -> examples/ESP32_IDF/Makefile.build",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #",
          "2: # This is a project Makefile. It is assumed the directory this Makefile resides in is a",
          "3: # project subdirectory.",
          "4: #",
          "6: PROJECT_NAME := esp32_idf",
          "8: include $(IDF_PATH)/make/project.mk",
          "",
          "---------------"
        ],
        "examples/ESP32_IDF/main/component.mk||examples/ESP32_IDF/main/component.mk": [
          "File: examples/ESP32_IDF/main/component.mk -> examples/ESP32_IDF/main/component.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #",
          "2: # Main component makefile.",
          "3: #",
          "4: # This Makefile can be left empty. By default, it will take the sources in the",
          "5: # src/ directory, compile them and link them into lib(subdirectory_name).a",
          "6: # in the build directory. This behaviour is entirely configurable,",
          "7: # please read the ESP-IDF documents if you need to do this.",
          "8: #",
          "10: COMPONENT_OBJS = main.o mongoose.o",
          "12: mongoose.o: ../../../../mongoose.c",
          "13:  $(summary) \"CC $@\"",
          "14:  $(CC) $(CFLAGS) $(CPPFLAGS) \\",
          "15:    $(addprefix -I ,$(COMPONENT_INCLUDES)) \\",
          "16:    $(addprefix -I ,$(COMPONENT_EXTRA_INCLUDES)) \\",
          "17:    -c $< -o $@",
          "",
          "---------------"
        ],
        "examples/ESP32_IDF/main/main.c||examples/ESP32_IDF/main/main.c": [
          "File: examples/ESP32_IDF/main/main.c -> examples/ESP32_IDF/main/main.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: #include <string.h>",
          "3: #include \"freertos/FreeRTOS.h\"",
          "5: #include \"esp_event.h\"",
          "6: #include \"esp_event_loop.h\"",
          "7: #include \"esp_system.h\"",
          "8: #include \"esp_wifi.h\"",
          "9: #include \"nvs_flash.h\"",
          "11: #include \"./../../../mongoose.h\"",
          "13: #define WIFI_SSID \"ssid\"",
          "14: #define WIFI_PASS \"pass\"",
          "16: #define MG_LISTEN_ADDR \"80\"",
          "18: static esp_err_t event_handler(void *ctx, system_event_t *event) {",
          "19:   (void) ctx;",
          "20:   (void) event;",
          "21:   return ESP_OK;",
          "22: }",
          "24: static void mg_ev_handler(struct mg_connection *nc, int ev, void *p) {",
          "25:   static const char *reply_fmt =",
          "26:       \"HTTP/1.0 200 OK\\r\\n\"",
          "27:       \"Connection: close\\r\\n\"",
          "28:       \"Content-Type: text/plain\\r\\n\"",
          "29:       \"\\r\\n\"",
          "30:       \"Hello %s\\n\";",
          "32:   switch (ev) {",
          "33:     case MG_EV_ACCEPT: {",
          "34:       char addr[32];",
          "35:       mg_sock_addr_to_str(&nc->sa, addr, sizeof(addr),",
          "36:                           MG_SOCK_STRINGIFY_IP | MG_SOCK_STRINGIFY_PORT);",
          "37:       printf(\"Connection %p from %s\\n\", nc, addr);",
          "38:       break;",
          "39:     }",
          "40:     case MG_EV_HTTP_REQUEST: {",
          "41:       char addr[32];",
          "42:       struct http_message *hm = (struct http_message *) p;",
          "43:       mg_sock_addr_to_str(&nc->sa, addr, sizeof(addr),",
          "44:                           MG_SOCK_STRINGIFY_IP | MG_SOCK_STRINGIFY_PORT);",
          "45:       printf(\"HTTP request from %s: %.*s %.*s\\n\", addr, (int) hm->method.len,",
          "46:              hm->method.p, (int) hm->uri.len, hm->uri.p);",
          "47:       mg_printf(nc, reply_fmt, addr);",
          "48:       nc->flags |= MG_F_SEND_AND_CLOSE;",
          "49:       break;",
          "50:     }",
          "51:     case MG_EV_CLOSE: {",
          "52:       printf(\"Connection %p closed\\n\", nc);",
          "53:       break;",
          "54:     }",
          "55:   }",
          "56: }",
          "58: void app_main(void) {",
          "59:   nvs_flash_init();",
          "60:   tcpip_adapter_init();",
          "61:   ESP_ERROR_CHECK(esp_event_loop_init(event_handler, NULL));",
          "64:   wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();",
          "65:   ESP_ERROR_CHECK(esp_wifi_init(&cfg));",
          "66:   ESP_ERROR_CHECK(esp_wifi_set_storage(WIFI_STORAGE_RAM));",
          "67:   ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));",
          "68:   wifi_config_t sta_config = {",
          "69:       .sta = {.ssid = WIFI_SSID, .password = WIFI_PASS, .bssid_set = false}};",
          "70:   ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &sta_config));",
          "71:   ESP_ERROR_CHECK(esp_wifi_start());",
          "72:   ESP_ERROR_CHECK(esp_wifi_connect());",
          "75:   struct mg_mgr mgr;",
          "76:   struct mg_connection *nc;",
          "78:   printf(\"Starting web-server on port %s\\n\", MG_LISTEN_ADDR);",
          "80:   mg_mgr_init(&mgr, NULL);",
          "82:   nc = mg_bind(&mgr, MG_LISTEN_ADDR, mg_ev_handler);",
          "83:   if (nc == NULL) {",
          "84:     printf(\"Error setting up listener!\\n\");",
          "85:     return;",
          "86:   }",
          "87:   mg_set_protocol_http_websocket(nc);",
          "90:   while (1) {",
          "91:     mg_mgr_poll(&mgr, 1000);",
          "92:   }",
          "93: }",
          "",
          "---------------"
        ],
        "examples/ESP32_IDF/sdk.version||examples/ESP32_IDF/sdk.version": [
          "File: examples/ESP32_IDF/sdk.version -> examples/ESP32_IDF/sdk.version",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: docker.cesanta.com/esp32-build:1.0-r13",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2e65ce8272d85ae4325cbf3476e0ab0d90dd95a0",
      "candidate_info": {
        "commit_hash": "2e65ce8272d85ae4325cbf3476e0ab0d90dd95a0",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/2e65ce8272d85ae4325cbf3476e0ab0d90dd95a0",
        "files": [
          "mongoose.c"
        ],
        "message": "Fix mg_parse_uri for URIs with fragment but no qs\n\nPUBLISHED_FROM=8fb53581e8979c28026f9c2bcacb89de740c18cf",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4848:   res->p = *p;",
          "4849:   for (; *p < end; (*p)++) {",
          "4852:     }",
          "4853:   }",
          "4854:   res->len = (*p) - res->p;",
          "4855:   if (*p < end) (*p)++;",
          "",
          "[Removed Lines]",
          "4846: static void parse_uri_component(const char **p, const char *end, char sep,",
          "4847:                                 struct mg_str *res) {",
          "4850:     if (**p == sep) {",
          "4851:       break;",
          "",
          "[Added Lines]",
          "4847: static void parse_uri_component(const char **p, const char *end,",
          "4848:                                 const char *seps, struct mg_str *res) {",
          "4849:   const char *q;",
          "4852:     for (q = seps; *q != '\\0'; q++) {",
          "4853:       if (**p == *q) break;",
          "4855:     if (*q != '\\0') break;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4964:         break;",
          "4965:       case P_REST:",
          "4970:         break;",
          "4971:     }",
          "4972:   }",
          "",
          "[Removed Lines]",
          "4967:         parse_uri_component(&p, end, '?', &rpath);",
          "4968:         parse_uri_component(&p, end, '#', &rquery);",
          "4969:         parse_uri_component(&p, end, '\\0', &rfragment);",
          "",
          "[Added Lines]",
          "4970:         parse_uri_component(&p, end, \"?#\", &rpath);",
          "4971:         if (p < end && *(p - 1) == '?') {",
          "4972:           parse_uri_component(&p, end, \"#\", &rquery);",
          "4973:         }",
          "4974:         parse_uri_component(&p, end, \"\", &rfragment);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4997:   while (s < se) {",
          "4998:     const char *next = s;",
          "4999:     struct mg_str component;",
          "5001:     if (mg_vcmp(&component, \".\") == 0) {",
          "5003:     } else if (mg_vcmp(&component, \"..\") == 0) {",
          "",
          "[Removed Lines]",
          "5000:     parse_uri_component(&next, se, '/', &component);",
          "",
          "[Added Lines]",
          "5005:     parse_uri_component(&next, se, \"/\", &component);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "7282:         }",
          "7283:       }",
          "7284:       if (u >= cp_end) break;",
          "7286:       if (component.len > 0) {",
          "7287:         int len;",
          "7288:         memmove(p + 1, component.p, component.len);",
          "",
          "[Removed Lines]",
          "7285:       parse_uri_component((const char **) &next, cp_end, '/', &component);",
          "",
          "[Added Lines]",
          "7290:       parse_uri_component((const char **) &next, cp_end, \"/\", &component);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "af22fb7a0695e0112b4bcf1fae1729b78cbe1c10",
      "candidate_info": {
        "commit_hash": "af22fb7a0695e0112b4bcf1fae1729b78cbe1c10",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/af22fb7a0695e0112b4bcf1fae1729b78cbe1c10",
        "files": [
          "mongoose.c"
        ],
        "message": "Include mg_mem.h into str_util\n\nPUBLISHED_FROM=990564aa54946b2a5b52d3a9c31f80b8e93c6b44",
        "before_after_code_files": [
          "mongoose.c||mongoose.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [
            "mongoose.c||mongoose.c"
          ],
          "candidate": [
            "mongoose.c||mongoose.c"
          ]
        }
      },
      "candidate_diff": {
        "mongoose.c||mongoose.c": [
          "File: mongoose.c -> mongoose.c"
        ]
      }
    },
    {
      "candidate_hash": "cd9c7dcbec9059ab02b5b87893fbbe1e1ffe3b6b",
      "candidate_info": {
        "commit_hash": "cd9c7dcbec9059ab02b5b87893fbbe1e1ffe3b6b",
        "repo": "cesanta/mongoose",
        "commit_url": "https://github.com/cesanta/mongoose/commit/cd9c7dcbec9059ab02b5b87893fbbe1e1ffe3b6b",
        "files": [
          "mongoose.h"
        ],
        "message": "Correct negative AAAA answer with NSEC RR\n\nPUBLISHED_FROM=c7e3132d55e603f159019e3f0290e01b189e75e0",
        "before_after_code_files": [
          "mongoose.h||mongoose.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/cesanta/mongoose/pull/855"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "mongoose.h||mongoose.h": [
          "File: mongoose.h -> mongoose.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "5366: #define MG_MAX_DNS_QUESTIONS 32",
          "5367: #define MG_MAX_DNS_ANSWERS 32",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5365: #define MG_DNS_ANY_RECORD 0xff",
          "5366: #define MG_DNS_NSEC_RECORD 0x2f",
          "",
          "---------------"
        ]
      }
    }
  ]
}