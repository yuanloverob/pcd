{
  "cve_id": "CVE-2014-0195",
  "cve_desc": "The dtls1_reassemble_fragment function in d1_both.c in OpenSSL before 0.9.8za, 1.0.0 before 1.0.0m, and 1.0.1 before 1.0.1h does not properly validate fragment lengths in DTLS ClientHello messages, which allows remote attackers to execute arbitrary code or cause a denial of service (buffer overflow and application crash) via a long non-initial fragment.",
  "repo": "openssl/openssl",
  "patch_hash": "410e444b71bca5af929fe82162cbe37e31c82083",
  "patch_info": {
    "commit_hash": "410e444b71bca5af929fe82162cbe37e31c82083",
    "repo": "openssl/openssl",
    "commit_url": "https://github.com/openssl/openssl/commit/410e444b71bca5af929fe82162cbe37e31c82083",
    "files": [
      "ssl/d1_both.c"
    ],
    "message": "Fix for CVE-2014-0195\n\nA buffer overrun attack can be triggered by sending invalid DTLS fragments\nto an OpenSSL DTLS client or server. This is potentially exploitable to\nrun arbitrary code on a vulnerable client or server.\n\nFixed by adding consistency check for DTLS fragments.\n\nThanks to J\u00fcri Aedla for reporting this issue.\n(cherry picked from commit 1632ef744872edc2aa2a53d487d3e79c965a4ad3)",
    "before_after_code_files": [
      "ssl/d1_both.c||ssl/d1_both.c"
    ]
  },
  "patch_diff": {
    "ssl/d1_both.c||ssl/d1_both.c": [
      "File: ssl/d1_both.c -> ssl/d1_both.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "632:   frag->msg_header.frag_off = 0;",
      "633:   }",
      "634:  else",
      "635:   frag = (hm_fragment*) item->data;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "635:   {",
      "637:   if (frag->msg_header.msg_len != msg_hdr->msg_len)",
      "638:    {",
      "639:    item = NULL;",
      "640:    frag = NULL;",
      "641:    goto err;",
      "642:    }",
      "643:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "f6663338cb0f5c21b8635d0b84d69554b0f51b56",
      "candidate_info": {
        "commit_hash": "f6663338cb0f5c21b8635d0b84d69554b0f51b56",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f6663338cb0f5c21b8635d0b84d69554b0f51b56",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Applying same fix as in dtls1_process_out_of_seq_message. A truncated DTLS fragment would cause *ok to be clear, but the return value would still be the number of bytes read.\n\nProblem identified by Emilia K\u00e4sper, based on previous issue/patch by Adam\nLangley.\n\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "669:  i = s->method->ssl_read_bytes(s,SSL3_RT_HANDSHAKE,",
          "670:   frag->fragment + msg_hdr->frag_off,frag_len,0);",
          "672:   goto err;",
          "674:  RSMBLY_BITMASK_MARK(frag->reassembly, (long)msg_hdr->frag_off,",
          "",
          "[Removed Lines]",
          "671:  if (i<=0 || (unsigned long)i!=frag_len)",
          "",
          "[Added Lines]",
          "671:  if ((unsigned long)i!=frag_len)",
          "672:   i=-1;",
          "673:  if (i<=0)",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4f2011d981c2489b10e174cbda28a20303f655d1",
      "candidate_info": {
        "commit_hash": "4f2011d981c2489b10e174cbda28a20303f655d1",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/4f2011d981c2489b10e174cbda28a20303f655d1",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Remove some duplicate DTLS code.\n\nIn a couple of functions, a sequence number would be calculated twice.\n\nAdditionally, in |dtls1_process_out_of_seq_message|, we know that\n|frag_len| <= |msg_hdr->msg_len| so the later tests for |frag_len <\nmsg_hdr->msg_len| can be more clearly written as |frag_len !=\nmsg_hdr->msg_len|, since that's the only remaining case.\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "604:  }",
          "606: static int",
          "608:  {",
          "609:  hm_fragment *frag = NULL;",
          "610:  pitem *item = NULL;",
          "",
          "[Removed Lines]",
          "607: dtls1_reassemble_fragment(SSL *s, struct hm_header_st* msg_hdr, int *ok)",
          "",
          "[Added Lines]",
          "607: dtls1_reassemble_fragment(SSL *s, const struct hm_header_st* msg_hdr, int *ok)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "688:  if (item == NULL)",
          "689:   {",
          "694:   item = pitem_new(seq64be, frag);",
          "695:   if (item == NULL)",
          "696:    {",
          "",
          "[Removed Lines]",
          "690:   memset(seq64be,0,sizeof(seq64be));",
          "691:   seq64be[6] = (unsigned char)(msg_hdr->seq>>8);",
          "692:   seq64be[7] = (unsigned char)(msg_hdr->seq);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "718: static int",
          "720: {",
          "721:  int i=-1;",
          "722:  hm_fragment *frag = NULL;",
          "",
          "[Removed Lines]",
          "719: dtls1_process_out_of_seq_message(SSL *s, struct hm_header_st* msg_hdr, int *ok)",
          "",
          "[Added Lines]",
          "715: dtls1_process_out_of_seq_message(SSL *s, const struct hm_header_st* msg_hdr, int *ok)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "740:   item = NULL;",
          "",
          "[Removed Lines]",
          "739:  if (item != NULL && frag_len < msg_hdr->msg_len)",
          "",
          "[Added Lines]",
          "735:  if (item != NULL && frag_len != msg_hdr->msg_len)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "761:   }",
          "762:  else",
          "763:   {",
          "765:    return dtls1_reassemble_fragment(s, msg_hdr, ok);",
          "767:   if (frag_len > dtls1_max_handshake_message_len(s))",
          "",
          "[Removed Lines]",
          "764:   if (frag_len < msg_hdr->msg_len)",
          "",
          "[Added Lines]",
          "760:   if (frag_len != msg_hdr->msg_len)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "784:     goto err;",
          "785:    }",
          "791:   item = pitem_new(seq64be, frag);",
          "792:   if ( item == NULL)",
          "793:    goto err;",
          "",
          "[Removed Lines]",
          "787:   memset(seq64be,0,sizeof(seq64be));",
          "788:   seq64be[6] = (unsigned char)(msg_hdr->seq>>8);",
          "789:   seq64be[7] = (unsigned char)(msg_hdr->seq);",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bff1ce4e6a1c57c3d0a5f9e4f85ba6385fccfe8b",
      "candidate_info": {
        "commit_hash": "bff1ce4e6a1c57c3d0a5f9e4f85ba6385fccfe8b",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/bff1ce4e6a1c57c3d0a5f9e4f85ba6385fccfe8b",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Avoid double free when processing DTLS packets.\n\nThe |item| variable, in both of these cases, may contain a pointer to a\n|pitem| structure within |s->d1->buffered_messages|. It was being freed\nin the error case while still being in |buffered_messages|. When the\nerror later caused the |SSL*| to be destroyed, the item would be double\nfreed.\n\nThanks to Wah-Teh Chang for spotting that the fix in 1632ef74 was\ninconsistent with the other error paths (but correct).\n\nFixes CVE-2014-3505\n\nReviewed-by: Matt Caswell <matt@openssl.org>\nReviewed-by: Emilia K\u00e4sper <emilia@openssl.org>",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "698:  return DTLS1_HM_FRAGMENT_RETRY;",
          "700: err:",
          "704:  return i;",
          "705:  }",
          "",
          "[Removed Lines]",
          "701:  if (frag != NULL) dtls1_hm_fragment_free(frag);",
          "702:  if (item != NULL) OPENSSL_free(item);",
          "",
          "[Added Lines]",
          "701:  if (frag != NULL && item == NULL) dtls1_hm_fragment_free(frag);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "783:  return DTLS1_HM_FRAGMENT_RETRY;",
          "785: err:",
          "789:  return i;",
          "790:  }",
          "",
          "[Removed Lines]",
          "786:  if ( frag != NULL) dtls1_hm_fragment_free(frag);",
          "787:  if ( item != NULL) OPENSSL_free(item);",
          "",
          "[Added Lines]",
          "785:  if (frag != NULL && item == NULL) dtls1_hm_fragment_free(frag);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f4e6ed09e48348f4766eb9f03727326ce6c0b1a3",
      "candidate_info": {
        "commit_hash": "f4e6ed09e48348f4766eb9f03727326ce6c0b1a3",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/f4e6ed09e48348f4766eb9f03727326ce6c0b1a3",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Fix for CVE-2014-0195\n\nA buffer overrun attack can be triggered by sending invalid DTLS fragments\nto an OpenSSL DTLS client or server. This is potentially exploitable to\nrun arbitrary code on a vulnerable client or server.\n\nFixed by adding consistency check for DTLS fragments.\n\nThanks to J\u00fcri Aedla for reporting this issue.",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "627:   frag->msg_header.frag_off = 0;",
          "628:   }",
          "629:  else",
          "630:   frag = (hm_fragment*) item->data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "630:   {",
          "632:   if (frag->msg_header.msg_len != msg_hdr->msg_len)",
          "633:    {",
          "634:    item = NULL;",
          "635:    frag = NULL;",
          "636:    goto err;",
          "637:    }",
          "638:   }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "82ba68c42d6a9cf245afa489471005b2a0377c10",
      "candidate_info": {
        "commit_hash": "82ba68c42d6a9cf245afa489471005b2a0377c10",
        "repo": "openssl/openssl",
        "commit_url": "https://github.com/openssl/openssl/commit/82ba68c42d6a9cf245afa489471005b2a0377c10",
        "files": [
          "ssl/d1_both.c"
        ],
        "message": "Fix for CVE-2014-0195\n\nA buffer overrun attack can be triggered by sending invalid DTLS fragments\nto an OpenSSL DTLS client or server. This is potentially exploitable to\nrun arbitrary code on a vulnerable client or server.\n\nFixed by adding consistency check for DTLS fragments.\n\nThanks to J\u00fcri Aedla for reporting this issue.",
        "before_after_code_files": [
          "ssl/d1_both.c||ssl/d1_both.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ],
          "candidate": [
            "ssl/d1_both.c||ssl/d1_both.c"
          ]
        }
      },
      "candidate_diff": {
        "ssl/d1_both.c||ssl/d1_both.c": [
          "File: ssl/d1_both.c -> ssl/d1_both.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "621:   frag->msg_header.frag_off = 0;",
          "622:   }",
          "623:  else",
          "624:   frag = (hm_fragment*) item->data;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "624:   {",
          "626:   if (frag->msg_header.msg_len != msg_hdr->msg_len)",
          "627:    {",
          "628:    item = NULL;",
          "629:    frag = NULL;",
          "630:    goto err;",
          "631:    }",
          "632:   }",
          "",
          "---------------"
        ]
      }
    }
  ]
}