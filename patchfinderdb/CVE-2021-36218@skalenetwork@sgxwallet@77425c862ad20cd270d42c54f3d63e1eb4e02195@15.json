{
  "cve_id": "CVE-2021-36218",
  "cve_desc": "An issue was discovered in SKALE sgxwallet 1.58.3. sgx_disp_ippsAES_GCMEncrypt allows an out-of-bounds write, resulting in a segfault and compromised enclave. This issue describes a buffer overflow, which was resolved prior to v1.77.0 and not reproducible in latest sgxwallet v1.77.0",
  "repo": "skalenetwork/sgxwallet",
  "patch_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
  "patch_info": {
    "commit_hash": "77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "repo": "skalenetwork/sgxwallet",
    "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/77425c862ad20cd270d42c54f3d63e1eb4e02195",
    "files": [
      "BLSCrypto.cpp",
      "DKGCrypto.cpp",
      "ECDSACrypto.cpp",
      "SEKManager.cpp",
      "SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl",
      "testw.cpp"
    ],
    "message": "SKALE-3205-restart",
    "before_after_code_files": [
      "BLSCrypto.cpp||BLSCrypto.cpp",
      "DKGCrypto.cpp||DKGCrypto.cpp",
      "ECDSACrypto.cpp||ECDSACrypto.cpp",
      "SEKManager.cpp||SEKManager.cpp",
      "SGXWalletServer.cpp||SGXWalletServer.cpp",
      "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
      "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h",
      "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
      "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
      "testw.cpp||testw.cpp"
    ]
  },
  "patch_diff": {
    "BLSCrypto.cpp||BLSCrypto.cpp": [
      "File: BLSCrypto.cpp -> BLSCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "87:     CHECK_STATE(_hexArrayLen > 2 * _len);",
      "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
      "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
      "92:     }",
      "",
      "[Removed Lines]",
      "89:     for (int j = 0; j < _len; j++) {",
      "",
      "[Added Lines]",
      "89:     for (uint64_t j = 0; j < _len; j++) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "105:     CHECK_STATE(_bin_len)",
      "110:     CHECK_STATE(len != 2 * _max_length + 1);",
      "",
      "[Removed Lines]",
      "108:     int len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "[Added Lines]",
      "108:     uint64_t len = strnlen(_hex, 2 * _max_length + 1);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "121:         int high = char2int((char) _hex[i * 2]);",
      "122:         int low = char2int((char) _hex[i * 2 + 1]);",
      "",
      "[Removed Lines]",
      "120:     for (int i = 0; i < len / 2; i++) {",
      "",
      "[Added Lines]",
      "120:     for (uint64_t i = 0; i < len / 2; i++) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "248:     strncpy(keyArray->data(), _key, BUF_LEN);",
      "252:     sgx_status_t status = trustedEncryptKeyAES(eid, errStatus, errMsg.data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
      "",
      "[Removed Lines]",
      "250:     unsigned int encryptedLen = 0;",
      "",
      "[Added Lines]",
      "251:     uint64_t encryptedLen = 0;",
      "",
      "---------------"
    ],
    "DKGCrypto.cpp||DKGCrypto.cpp": [
      "File: DKGCrypto.cpp -> DKGCrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "135: string gen_dkg_poly(int _t) {",
      "136:     vector<char> errMsg(BUF_LEN, 0);",
      "137:     int errStatus = 0;",
      "140:     vector <uint8_t> encrypted_dkg_secret(BUF_LEN, 0);",
      "145:     HANDLE_TRUSTED_FUNCTION_ERROR(status, errStatus, errMsg.data());",
      "147:     uint64_t length = enc_len;;",
      "",
      "[Removed Lines]",
      "138:     uint32_t enc_len = 0;",
      "144:     sgx_status_t status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "[Added Lines]",
      "138:     uint64_t enc_len = 0;",
      "142:     sgx_status_t status = trustedGenDkgSecretAES(",
      "143:             eid, &errStatus,errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "215:     for (int i = 0; i < _n; i++) {",
      "216:         vector <uint8_t> encryptedSkey(BUF_LEN, 0);",
      "218:         vector<char> currentShare(193, 0);",
      "219:         vector<char> sShareG2(320, 0);",
      "",
      "[Removed Lines]",
      "217:         uint32_t decLen;",
      "",
      "[Added Lines]",
      "217:         uint64_t decLen;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "300:         throw SGXException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
      "301:     }",
      "305:     sgx_status_t status = trustedCreateBlsKeyAES(eid, &errStatus, errMsg.data(), s_shares, encr_key, decKeyLen, encr_bls_key,",
      "306:                                                  &enc_bls_len);",
      "",
      "[Removed Lines]",
      "303:     uint32_t enc_bls_len = 0;",
      "",
      "[Added Lines]",
      "303:     uint64_t enc_bls_len = 0;",
      "",
      "---------------"
    ],
    "ECDSACrypto.cpp||ECDSACrypto.cpp": [
      "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "54:     vector<char> pub_key_x(BUF_LEN, 0);",
      "55:     vector<char> pub_key_y(BUF_LEN, 0);",
      "59:     sgx_status_t status = trustedGenerateEcdsaKeyAES(eid, &errStatus,",
      "60:                                         errMsg.data(), encr_pr_key.data(), &enc_len,",
      "",
      "[Removed Lines]",
      "57:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "57:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SEKManager.cpp||SEKManager.cpp": [
      "File: SEKManager.cpp -> SEKManager.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "52: void create_test_key() {",
      "53:     int errStatus = 0;",
      "54:     vector<char> errMsg(1024, 0);",
      "57:     SAFE_UINT8_BUF(encrypted_key, BUF_LEN);",
      "",
      "[Removed Lines]",
      "55:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "55:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "110:     auto encrypted_SEK = make_shared < vector < uint8_t >> (BUF_LEN, 0);",
      "114:     sgx_status_t status = trustedSetSEK_backup(eid, &err_status, errMsg.data(), encrypted_SEK->data(), &l,",
      "115:                                                SEK.c_str());",
      "",
      "[Removed Lines]",
      "112:     uint32_t l = 0;",
      "",
      "[Added Lines]",
      "112:     uint64_t l = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "127:     vector<char> errMsg(1024, 0);",
      "128:     int err_status = 0;",
      "129:     vector <uint8_t> encrypted_SEK(1024, 0);",
      "132:     SAFE_CHAR_BUF(SEK, 65);",
      "",
      "[Removed Lines]",
      "130:     uint32_t enc_len = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t enc_len = 0;",
      "",
      "---------------"
    ],
    "SGXWalletServer.cpp||SGXWalletServer.cpp": [
      "File: SGXWalletServer.cpp -> SGXWalletServer.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "564:         vector<string> public_keys = calculateAllBlsPublicKeys(public_shares);",
      "567:             throw SGXException(UNKNOWN_ERROR, \"\");",
      "568:         }",
      "",
      "[Removed Lines]",
      "566:         if (public_keys.size() != n) {",
      "",
      "[Added Lines]",
      "566:         if (public_keys.size() != (uint64_t)n) {",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
      "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: #include \"stdlib.h\"",
      "28: #include <string.h>",
      "30: #include \"AESUtils.h\"",
      "32: sgx_aes_gcm_128bit_key_t AES_key;",
      "33: sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "37:     if (!message) {",
      "38:         LOG_ERROR(\"Null message in AES_encrypt\");",
      "",
      "[Removed Lines]",
      "35: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "",
      "[Added Lines]",
      "37: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
      "39: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
      "40:                 unsigned char decryptable, uint64_t* resultLen) {",
      "44:     if (!type) {",
      "45:         LOG_ERROR(\"Null type in AES_encrypt\");",
      "46:         return -1;",
      "47:     }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "47:     uint64_t len = strlen(message) + 1;",
      "50:         LOG_ERROR(\"Output buffer too small\");",
      "51:         return -3;",
      "52:     }",
      "54:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "57:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "58:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "59:                                                      NULL, 0,",
      "60:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "62:     return status;",
      "63: }",
      "",
      "[Removed Lines]",
      "49:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "56:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, strlen(message),",
      "",
      "[Added Lines]",
      "61:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
      "66:     SAFE_CHAR_BUF(fullMessage, len + 2);",
      "68:     fullMessage[0] = type;",
      "69:     fullMessage[1] = decryptable;",
      "71:     strncpy(fullMessage + 2, message, len );",
      "73:     len = len + 2;",
      "74:     message = fullMessage;",
      "78:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_key, (uint8_t*)message, len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "96:                                                    NULL, 0,",
      "97:                                                    (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "133: }",
      "",
      "[Removed Lines]",
      "99:   return status;",
      "100: }",
      "105: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen) {",
      "107:     if (!message) {",
      "108:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "109:         return -1;",
      "110:     }",
      "112:     if (!encr_message) {",
      "113:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "114:         return -2;",
      "115:     }",
      "117:     uint64_t len = strlen(message) + 1;",
      "119:     if (len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrLen ) {",
      "120:         LOG_ERROR(\"Output buffer too small\");",
      "121:         return -3;",
      "122:     }",
      "124:     sgx_read_rand(encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE);",
      "126:     sgx_status_t status = sgx_rijndael128GCM_encrypt(&AES_DH_key, (uint8_t*)message, strlen(message),",
      "127:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE,",
      "128:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "129:                                                      NULL, 0,",
      "130:                                                      (sgx_aes_gcm_128bit_tag_t *) encr_message);",
      "132:     return status;",
      "135: int AES_decrypt_DH(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) {",
      "137:     if (!message) {",
      "138:         LOG_ERROR(\"Null message in AES_encrypt_DH\");",
      "139:         return -1;",
      "140:     }",
      "142:     if (!encr_message) {",
      "143:         LOG_ERROR(\"Null encr message in AES_encrypt_DH\");",
      "144:         return -2;",
      "145:     }",
      "148:     if (length < SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE) {",
      "149:         LOG_ERROR(\"length < SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE\");",
      "150:         return -1;",
      "151:     }",
      "155:     uint64_t len = length - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE;",
      "157:     if (msgLen < len) {",
      "158:         LOG_ERROR(\"Output buffer not large enough\");",
      "159:         return -2;",
      "160:     }",
      "162:     sgx_status_t status = sgx_rijndael128GCM_decrypt(&AES_DH_key,",
      "163:                                                      encr_message + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE, len,",
      "164:                                                      (unsigned char*) message,",
      "165:                                                      encr_message + SGX_AESGCM_MAC_SIZE, SGX_AESGCM_IV_SIZE,",
      "166:                                                      NULL, 0,",
      "167:                                                      (sgx_aes_gcm_128bit_tag_t *)encr_message);",
      "169:     return status;",
      "170: }",
      "",
      "[Added Lines]",
      "123:   for (int i = 2; i < strlen(message) + 1; i++) {",
      "124:       message[i - 2 ] = message[i];",
      "125:   }",
      "127:   return status;",
      "",
      "---------------"
    ],
    "secure_enclave/AESUtils.h||secure_enclave/AESUtils.h": [
      "File: secure_enclave/AESUtils.h -> secure_enclave/AESUtils.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "27: extern sgx_aes_gcm_128bit_key_t AES_key;",
      "28: extern sgx_aes_gcm_128bit_key_t AES_DH_key;",
      "31: int AES_decrypt(uint8_t *encr_message, uint64_t length, char *message, uint64_t msgLen) ;",
      "33: int AES_encrypt_DH(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Removed Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen);",
      "",
      "[Added Lines]",
      "30: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrLen,",
      "31:                 unsigned char type, unsigned char decryptable, uint64_t* resultLen);",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "36: void derive_DH_Key();",
      "39: #endif //SGXD_AESUTILS_H",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "39: #define ECDSA '1'",
      "40: #define BLS '2'",
      "41: #define DKG '3'",
      "43: #define DECRYPTABLE '1'",
      "44: #define NON_DECRYPTABLE '2'",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
      "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "122:         abort(); \\",
      "123:     } else {called = true;};",
      "126:     CALL_ONCE",
      "127:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "125: void trustedEnclaveInit(uint32_t _logLevel) {",
      "",
      "[Added Lines]",
      "125: void trustedEnclaveInit(uint64_t _logLevel) {",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "234: void sealHexSEK(int *errStatus, char *errString,",
      "236:     CALL_ONCE",
      "237:     LOG_INFO(__FUNCTION__);",
      "238:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "235:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "235:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "255:                                            (sgx_sealed_data_t *) encrypted_sek);",
      "256:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
      "260:     CHECK_STATE(encrypt_text_length = plaintextLen);",
      "",
      "[Removed Lines]",
      "258:     uint32_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "258:     uint64_t encrypt_text_length = sgx_get_encrypt_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "263:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
      "264:     uint32_t decLen = BUF_LEN;",
      "267:     CHECK_STATE(add_text_length == 0);",
      "268:     CHECK_STATE(sgx_is_within_enclave(encrypted_sek,sizeof(sgx_sealed_data_t)));",
      "269:     status = sgx_unseal_data((const sgx_sealed_data_t *)encrypted_sek, NULL, NULL,",
      "",
      "[Removed Lines]",
      "266:     uint32_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "[Added Lines]",
      "266:     uint64_t add_text_length = sgx_get_add_mac_txt_len((const sgx_sealed_data_t *)encrypted_sek);",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "279: }",
      "281: void trustedGenerateSEK(int *errStatus, char *errString,",
      "283:     CALL_ONCE",
      "284:     LOG_INFO(__FUNCTION__);",
      "285:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "282:                         uint8_t *encrypted_sek, uint32_t *enc_len, char *sek_hex) {",
      "",
      "[Added Lines]",
      "282:                         uint8_t *encrypted_sek, uint64_t *enc_len, char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "341: }",
      "343: void trustedSetSEK_backup(int *errStatus, char *errString,",
      "345:     CALL_ONCE",
      "346:     LOG_INFO(__FUNCTION__);",
      "347:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "344:                           uint8_t *encrypted_sek, uint32_t *enc_len, const char *sek_hex) {",
      "",
      "[Added Lines]",
      "344:                           uint8_t *encrypted_sek, uint64_t *enc_len, const char *sek_hex) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "372: void trustedGenerateEcdsaKeyAES(int *errStatus, char *errString,",
      "374:     LOG_INFO(__FUNCTION__);",
      "375:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint32_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "[Added Lines]",
      "373:                                 uint8_t *encryptedPrivateKey, uint64_t *enc_len, char *pub_key_x, char *pub_key_y) {",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "410:     }",
      "411:     strncpy(pub_key_y + n_zeroes, arr_y, 1024 - n_zeroes);",
      "414:     mpz_get_str(arr_skey_str, ECDSA_SKEY_BASE, skey);",
      "415:     n_zeroes = 64 - strlen(arr_skey_str);",
      "416:     for (int i = 0; i < n_zeroes; i++) {",
      "417:         skey_str[i] = '0';",
      "418:     }",
      "419:     strncpy(skey_str + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "421:     snprintf(errString, BUF_LEN, \"skey len is %d\\n\", (int) strlen(skey_str));",
      "424:     CHECK_STATUS(\"ecdsa private key encryption failed\");",
      "430:     CHECK_STATUS2(\"ecdsa private key decr failed with status %d\");",
      "",
      "[Removed Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, ECDSA_SKEY_LEN);SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "420:     skey_str[ECDSA_SKEY_LEN - 1] = 0;",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN);",
      "428:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "413:     SAFE_CHAR_BUF(skey_str, BUF_LEN);",
      "414:     SAFE_CHAR_BUF(arr_skey_str, mpz_sizeinbase(skey, ECDSA_SKEY_BASE) + 2);",
      "423:     int status = AES_encrypt((char *) skey_str, encryptedPrivateKey, BUF_LEN,",
      "424:                              ECDSA, NON_DECRYPTABLE, enc_len);",
      "427:     status = AES_decrypt(encryptedPrivateKey, *enc_len, skey_str, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "439: }",
      "441: void trustedGetPublicEcdsaKeyAES(int *errStatus, char *errString,",
      "443:     LOG_DEBUG(__FUNCTION__);",
      "444:     INIT_ERROR_STATE",
      "448:     mpz_t privateKeyMpz;",
      "449:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "442:                                  uint8_t *encryptedPrivateKey, uint32_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "446:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "441:                                  uint8_t *encryptedPrivateKey, uint64_t enc_len, char *pub_key_x, char *pub_key_y) {",
      "445:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "455:     CHECK_STATE(pub_key_x);",
      "456:     CHECK_STATE(pub_key_y);",
      "459:     CHECK_STATUS2(\"AES_decrypt failed with status %d\");",
      "461:     skey[enc_len - SGX_AESGCM_MAC_SIZE - SGX_AESGCM_IV_SIZE] = '\\0';",
      "",
      "[Removed Lines]",
      "458:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "457:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 11 ---",
      "[Context before]",
      "516: static uint64_t sigCounter = 0;",
      "519:                          const char *hash, char *sigR, char *sigS, uint8_t *sig_v, int base) {",
      "520:     LOG_DEBUG(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "518: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "517: void trustedEcdsaSignAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 12 ---",
      "[Context before]",
      "526:     CHECK_STATE(sigR);",
      "527:     CHECK_STATE(sigS);",
      "531:     mpz_t privateKeyMpz;",
      "532:     mpz_init(privateKeyMpz);",
      "",
      "[Removed Lines]",
      "529:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "528:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 13 ---",
      "[Context before]",
      "534:     mpz_init(msgMpz);",
      "535:     signature sign = signature_init();",
      "539:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "",
      "[Removed Lines]",
      "537:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "536:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 14 ---",
      "[Context before]",
      "602: void trustedDecryptKeyAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "605:     LOG_DEBUG(__FUNCTION__);",
      "606:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "603:                           uint32_t enc_len, char *key) {",
      "",
      "[Added Lines]",
      "602:                           uint64_t enc_len, char *key) {",
      "",
      "---------------",
      "--- Hunk 15 ---",
      "[Context before]",
      "615:     if (status != 0) {",
      "",
      "[Removed Lines]",
      "613:     int status = AES_decrypt_DH(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "[Added Lines]",
      "612:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 3072);",
      "",
      "---------------",
      "--- Hunk 16 ---",
      "[Context before]",
      "638: void trustedEncryptKeyAES(int *errStatus, char *errString, const char *key,",
      "640:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "639:                           uint8_t *encryptedPrivateKey, uint32_t *enc_len) {",
      "",
      "[Added Lines]",
      "638:                           uint8_t *encryptedPrivateKey, uint64_t *enc_len) {",
      "",
      "---------------",
      "--- Hunk 17 ---",
      "[Context before]",
      "652:     CHECK_STATUS2(\"AES encrypt failed with status %d\");",
      "656:     SAFE_CHAR_BUF(decryptedKey, BUF_LEN);",
      "660:     CHECK_STATUS2(\"trustedDecryptKey failed with status %d\");",
      "",
      "[Removed Lines]",
      "650:     int status = AES_encrypt_DH((char *)key, encryptedPrivateKey, BUF_LEN);",
      "658:     status = AES_decrypt_DH(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "[Added Lines]",
      "649:     int status = AES_encrypt((char *)key, encryptedPrivateKey, BUF_LEN,",
      "650:                              DKG, DECRYPTABLE, enc_len);",
      "656:     status = AES_decrypt(encryptedPrivateKey, *enc_len, decryptedKey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 18 ---",
      "[Context before]",
      "672:     if (strncmp(key, decryptedKey, MAX_KEY_LENGTH) != 0) {",
      "673:         snprintf(errString, BUF_LEN, \"Decrypted key does not match original key\");",
      "674:         LOG_ERROR(errString);",
      "675:         goto clean;",
      "676:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "672:         LOG_ERROR(key);",
      "673:         LOG_ERROR(decryptedKey);",
      "",
      "---------------",
      "--- Hunk 19 ---",
      "[Context before]",
      "686: void trustedBlsSignMessageAES(int *errStatus, char *errString, uint8_t *encryptedPrivateKey,",
      "688:                               char *_hashY, char *signature) {",
      "689:     LOG_DEBUG(__FUNCTION__);",
      "690:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "687:                               uint32_t enc_len, char *_hashX,",
      "",
      "[Added Lines]",
      "687:                               uint64_t enc_len, char *_hashX,",
      "",
      "---------------",
      "--- Hunk 20 ---",
      "[Context before]",
      "726: }",
      "728: void",
      "730:     LOG_INFO(__FUNCTION__);",
      "731:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t *enc_len, size_t _t) {",
      "",
      "[Added Lines]",
      "729: trustedGenDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t *enc_len, size_t _t) {",
      "",
      "---------------",
      "--- Hunk 21 ---",
      "[Context before]",
      "739:     CHECK_STATUS(\"gen_dkg_poly failed\")",
      "743:     CHECK_STATUS(\"SGX AES encrypt DKG poly failed\");",
      "747:     SAFE_CHAR_BUF(decr_dkg_secret, DKG_BUFER_LENGTH);",
      "",
      "[Removed Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN);",
      "",
      "[Added Lines]",
      "741:     status = AES_encrypt(dkg_secret, encrypted_dkg_secret, 3 * BUF_LEN,",
      "742:                          DKG, DECRYPTABLE, enc_len);",
      "",
      "---------------",
      "--- Hunk 22 ---",
      "[Context before]",
      "769: void",
      "770: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
      "772:                            uint8_t *decrypted_dkg_secret) {",
      "773:     LOG_INFO(__FUNCTION__);",
      "774:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "771:                            uint32_t enc_len,",
      "",
      "[Added Lines]",
      "772:                            uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 23 ---",
      "[Context before]",
      "790: }",
      "794:     LOG_INFO(__FUNCTION__);",
      "795:     INIT_ERROR_STATE",
      "",
      "[Removed Lines]",
      "793: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint32_t enc_len) {",
      "",
      "[Added Lines]",
      "794: void trustedSetEncryptedDkgPolyAES(int *errStatus, char *errString, uint8_t *encrypted_poly, uint64_t enc_len) {",
      "",
      "---------------",
      "--- Hunk 24 ---",
      "[Context before]",
      "810:     LOG_INFO(\"SGX call completed\");",
      "811: }",
      "814:                                        char *result_str, char *s_shareG2, char *pub_keyB, uint8_t _t, uint8_t _n,",
      "815:                                        uint8_t ind) {",
      "817:     LOG_INFO(__FUNCTION__);",
      "818:     INIT_ERROR_STATE",
      "821:     int status;",
      "823:     CHECK_STATE(encrypted_skey);",
      "",
      "[Removed Lines]",
      "813: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint32_t *dec_len,",
      "820:     uint32_t enc_len;",
      "",
      "[Added Lines]",
      "814: void trustedGetEncryptedSecretShareAES(int *errStatus, char *errString, uint8_t *encrypted_skey, uint64_t *dec_len,",
      "821:     uint64_t enc_len;",
      "",
      "---------------",
      "--- Hunk 25 ---",
      "[Context before]",
      "828:     LOG_DEBUG(__FUNCTION__);",
      "832:     SAFE_CHAR_BUF(pub_key_x, BUF_LEN);SAFE_CHAR_BUF(pub_key_y, BUF_LEN);",
      "",
      "[Removed Lines]",
      "830:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "831:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 26 ---",
      "[Context before]",
      "836:     CHECK_STATUS(\"trustedGenerateEcdsaKeyAES failed\");",
      "840:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "838:     status = AES_decrypt(encrypted_skey, enc_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "839:     status = AES_decrypt(encrypted_skey, enc_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 27 ---",
      "[Context before]",
      "848:     status = gen_session_key(skey, pub_keyB, common_key);",
      "850:     CHECK_STATUS(\"gen_session_key failed\")",
      "854:     status = calc_secret_share(getThreadLocalDecryptedDkgPoly(), s_share, _t, _n, ind);",
      "855:     CHECK_STATUS(\"calc secret share failed\")",
      "",
      "[Removed Lines]",
      "846:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "852:     SAFE_CHAR_BUF(s_share, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "847:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "853:     SAFE_CHAR_BUF(s_share, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 28 ---",
      "[Context before]",
      "858:     status = calc_secret_shareG2(s_share, s_shareG2);",
      "859:     CHECK_STATUS(\"invalid decr secret share\");",
      "862:     status=xor_encrypt(common_key, s_share, cypher);",
      "864:     CHECK_STATUS(\"xor_encrypt failed\")",
      "",
      "[Removed Lines]",
      "861:     SAFE_CHAR_BUF(cypher, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "862:     SAFE_CHAR_BUF(cypher, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 29 ---",
      "[Context before]",
      "875:     LOG_INFO(\"SGX call completed\");",
      "876: }",
      "879:                                char *public_shares,",
      "880:                                unsigned _t, unsigned _n) {",
      "881:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "878: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint32_t enc_len,",
      "",
      "[Added Lines]",
      "879: void trustedGetPublicSharesAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret, uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 30 ---",
      "[Context before]",
      "913:     CHECK_STATE(s_share);",
      "914:     CHECK_STATE(encryptedPrivateKey);",
      "918:     mpz_t s;",
      "919:     mpz_init(s);",
      "923:     CHECK_STATUS2(\"AES_decrypt failed (in trustedDkgVerifyAES) with status %d\");",
      "927:     strncpy(encr_sshare, s_share, ECDSA_SKEY_LEN - 1);",
      "931:     status = session_key_recover(skey, s_share, common_key);",
      "933:     CHECK_STATUS(\"session_key_recover failed\");",
      "937:     status=xor_decrypt(common_key, encr_sshare, decr_sshare);",
      "",
      "[Removed Lines]",
      "916:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "921:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, ECDSA_SKEY_LEN);",
      "925:     SAFE_CHAR_BUF(encr_sshare, ECDSA_SKEY_LEN);",
      "929:     SAFE_CHAR_BUF(common_key, ECDSA_SKEY_LEN);",
      "935:     SAFE_CHAR_BUF(decr_sshare, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "917:     SAFE_CHAR_BUF(skey,BUF_LEN);",
      "922:     int status = AES_decrypt(encryptedPrivateKey, enc_len, skey, BUF_LEN);",
      "926:     SAFE_CHAR_BUF(encr_sshare, BUF_LEN);",
      "930:     SAFE_CHAR_BUF(common_key, BUF_LEN);",
      "936:     SAFE_CHAR_BUF(decr_sshare, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 31 ---",
      "[Context before]",
      "955: void trustedCreateBlsKeyAES(int *errStatus, char *errString, const char *s_shares,",
      "956:                             uint8_t *encryptedPrivateKey, uint64_t key_len, uint8_t *encr_bls_key,",
      "959:     LOG_INFO(__FUNCTION__);",
      "",
      "[Removed Lines]",
      "957:                             uint32_t *enc_bls_key_len) {",
      "",
      "[Added Lines]",
      "958:                             uint64_t *enc_bls_key_len) {",
      "",
      "---------------",
      "--- Hunk 32 ---",
      "[Context before]",
      "964:     CHECK_STATE(encryptedPrivateKey);",
      "965:     CHECK_STATE(encr_bls_key);",
      "969:     mpz_t sum;",
      "970:     mpz_init(sum);",
      "",
      "[Removed Lines]",
      "967:     SAFE_CHAR_BUF(skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "968:     SAFE_CHAR_BUF(skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 33 ---",
      "[Context before]",
      "978:     mpz_init(bls_key);",
      "982:     CHECK_STATUS2(\"aes decrypt failed with status %d\");",
      "984:     skey[ECDSA_SKEY_LEN - 1] = 0;",
      "",
      "[Removed Lines]",
      "981:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "982:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey, BUF_LEN);",
      "",
      "---------------",
      "--- Hunk 34 ---",
      "[Context before]",
      "1038:     strncpy(key_share + n_zeroes, arr_skey_str, 65 - n_zeroes);",
      "1039:     key_share[BLS_KEY_LENGTH - 1] = 0;",
      "1043:     CHECK_STATUS2(\"aes encrypt bls private key failed with status %d \");",
      "1047:     SET_SUCCESS",
      "1048:     clean:",
      "",
      "[Removed Lines]",
      "1041:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN);",
      "",
      "[Added Lines]",
      "1042:     status = AES_encrypt(key_share, encr_bls_key, BUF_LEN, BLS, NON_DECRYPTABLE, enc_bls_key_len);",
      "",
      "---------------",
      "--- Hunk 35 ---",
      "[Context before]",
      "1064:     CHECK_STATE(bls_pub_key);",
      "1065:     CHECK_STATE(encryptedPrivateKey);",
      "1071:     CHECK_STATUS2(\"AES decrypt failed %d\");",
      "",
      "[Removed Lines]",
      "1067:     SAFE_CHAR_BUF(skey_hex, ECDSA_SKEY_LEN);",
      "1069:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, ECDSA_SKEY_LEN);",
      "",
      "[Added Lines]",
      "1066:     SAFE_CHAR_BUF(skey_hex, BUF_LEN);",
      "1068:     int status = AES_decrypt(encryptedPrivateKey, key_len, skey_hex, BUF_LEN);",
      "",
      "---------------"
    ],
    "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
      "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
      "--- Hunk 1 ---",
      "[Context before]",
      "11:  trusted {",
      "12:   include \"sgx_tgmp.h\"",
      "17:         public void trustedGenerateSEK(",
      "18:                                 [out] int *errStatus,",
      "19:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "20:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "22:                                 [out, count = 65] char* hex_SEK);",
      "24:         public void trustedSetSEK(",
      "",
      "[Removed Lines]",
      "14:   public void trustedEnclaveInit(uint32_t _logLevel);",
      "21:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "14:   public void trustedEnclaveInit(uint64_t _logLevel);",
      "21:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "30:                                 [out] int *errStatus,",
      "31:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "32:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
      "34:                                 [in, string] const char* SEK_hex);",
      "36:         public void trustedGenerateEcdsaKeyAES (",
      "37:                                 [out] int *errStatus,",
      "38:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "39:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "41:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "42:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "33:                                 [out] uint32_t *enc_len,",
      "40:                                 [out] uint32_t *enc_len,",
      "",
      "[Added Lines]",
      "33:                                 [out] uint64_t *enc_len,",
      "40:                                 [out] uint64_t *enc_len,",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "45:                                 [out] int *errStatus,",
      "46:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "47:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "49:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_x,",
      "50:                                 [out, count = SMALL_BUF_SIZE] char * pub_key_y);",
      "",
      "[Removed Lines]",
      "48:                                 uint32_t dec_len,",
      "",
      "[Added Lines]",
      "48:                                 uint64_t dec_len,",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "53:                                 [out] int *errStatus,",
      "54:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "55:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "57:                                 [in, string] const char* hash,",
      "58:                                 [out, count = SMALL_BUF_SIZE] char* sig_r,",
      "59:                                 [out, count = SMALL_BUF_SIZE] char* sig_s,",
      "",
      "[Removed Lines]",
      "56:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "56:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "65:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "66:                                 [in, count = SMALL_BUF_SIZE] const char* key,",
      "67:                                 [out, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "70:         public void trustedDecryptKeyAES (",
      "71:                                 [out] int *errStatus,",
      "72:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "73:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "75:                                 [out, count = SMALL_BUF_SIZE] char* key );",
      "77:         public void trustedGenDkgSecretAES (",
      "78:                                 [out] int *errStatus,",
      "79:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "80:                                 [out, count = 3072] uint8_t* encrypted_dkg_secret,",
      "83:         public void trustedDecryptDkgSecretAES (",
      "84:                                 [out] int *errStatus,",
      "85:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "86:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "88:                                 [out, count = 3072] uint8_t* decrypted_dkg_secret",
      "89:                                 );",
      "",
      "[Removed Lines]",
      "68:                                 [out] uint32_t *enc_len);",
      "74:                                 uint32_t enc_len,",
      "81:                                 [out] uint32_t * enc_len, size_t _t);",
      "87:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "68:                                 [out] uint64_t *enc_len);",
      "74:                                 uint64_t enc_len,",
      "81:                                 [out] uint64_t * enc_len, size_t _t);",
      "87:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "92:                                 [out] int *errStatus,",
      "93:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "94:                                 [in, count = 3050] uint8_t* encrypted_poly,",
      "97:         public void trustedGetEncryptedSecretShareAES(",
      "98:                                 [out]int *errStatus,",
      "99:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
      "100:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
      "102:                                 [out, count = 193] char* result_str,",
      "103:                                 [out, count = 320] char* s_shareG2,",
      "104:                                 [in, string] char* pub_keyB,",
      "",
      "[Removed Lines]",
      "95:                                 uint32_t enc_len);",
      "101:                                 [out] uint32_t* dec_len,",
      "",
      "[Added Lines]",
      "95:                                 uint64_t enc_len);",
      "101:                                 [out] uint64_t* dec_len,",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "110:                                 [out] int *errStatus,",
      "111:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
      "112:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
      "114:                                 [out, count = 10000] char* public_shares,",
      "115:                                 unsigned _t,",
      "116:                                 unsigned _n);",
      "",
      "[Removed Lines]",
      "113:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "113:                                 uint64_t enc_len,",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "133:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
      "134:                                 uint64_t key_len,",
      "135:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
      "138:         public void trustedBlsSignMessageAES (",
      "139:                                 [out] int *errStatus,",
      "140:                                 [out, count = TINY_BUF_SIZE] char* err_string,",
      "141:                                 [in, count = TINY_BUF_SIZE] uint8_t* encrypted_key,",
      "143:                                 [in, string] char* hashX ,",
      "144:                                 [in, string] char* hashY,",
      "145:                                 [out, count = SMALL_BUF_SIZE] char* signature);",
      "",
      "[Removed Lines]",
      "136:                                 [out] uint32_t *enc_bls_key_len);",
      "142:                                 uint32_t enc_len,",
      "",
      "[Added Lines]",
      "136:                                 [out] uint64_t *enc_bls_key_len);",
      "142:                                 uint64_t enc_len,",
      "",
      "---------------"
    ],
    "testw.cpp||testw.cpp": [
      "File: testw.cpp -> testw.cpp",
      "--- Hunk 1 ---",
      "[Context before]",
      "127:     vector<char> pubKeyX(BUF_LEN, 0);",
      "128:     vector<char> pubKeyY(BUF_LEN, 0);",
      "131:     PRINT_SRC_LINE",
      "132:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "133:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "130:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "130:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "160:     vector <uint8_t> encrPrivKey(BUF_LEN, 0);",
      "161:     vector<char> pubKeyX(BUF_LEN, 0);",
      "162:     vector<char> pubKeyY(BUF_LEN, 0);",
      "164:     PRINT_SRC_LINE",
      "165:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encrPrivKey.data(), &encLen,",
      "166:                                              pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "163:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "163:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "177:     vector <uint8_t> encPrivKey(BUF_LEN, 0);",
      "178:     vector<char> pubKeyX(BUF_LEN, 0);",
      "179:     vector<char> pubKeyY(BUF_LEN, 0);",
      "182:     PRINT_SRC_LINE",
      "183:     auto status = trustedGenerateEcdsaKeyAES(eid, &errStatus, errMsg.data(), encPrivKey.data(), &encLen, pubKeyX.data(),",
      "",
      "[Removed Lines]",
      "180:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "181:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "291:     vector<char> errMsg(BUF_LEN, 0);",
      "293:     int errStatus = 0;",
      "296:     PRINT_SRC_LINE",
      "297:     auto status = trustedGenDkgSecretAES(eid, &errStatus, errMsg.data(), encryptedDKGSecret.data(), &encLen, 32);",
      "",
      "[Removed Lines]",
      "294:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "295:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "314:     vector<char> errMsg(BUF_LEN, 0);",
      "316:     int errStatus = 0;",
      "319:     unsigned t = 32, n = 32;",
      "320:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "317:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "318:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "363:     vector<char> result(BUF_LEN, 0);",
      "365:     int errStatus = 0;",
      "368:     vector <uint8_t> encryptedDKGSecret(BUF_LEN, 0);",
      "369:     PRINT_SRC_LINE",
      "",
      "[Removed Lines]",
      "366:     uint32_t encLen = 0;",
      "",
      "[Added Lines]",
      "367:     uint64_t encLen = 0;",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "694: TEST_CASE_METHOD(TestFixture, \"AES encrypt/decrypt\", \"[aes-encrypt-decrypt]\") {",
      "695:     int errStatus = 0;",
      "696:     vector<char> errMsg(BUF_LEN, 0);",
      "698:     string key = SAMPLE_AES_KEY;",
      "699:     vector <uint8_t> encrypted_key(BUF_LEN, 0);",
      "",
      "[Removed Lines]",
      "697:     uint32_t encLen;",
      "",
      "[Added Lines]",
      "698:     uint64_t encLen;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "aa034c4c645c897e98f6a255e193d22de7094873",
      "candidate_info": {
        "commit_hash": "aa034c4c645c897e98f6a255e193d22de7094873",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/aa034c4c645c897e98f6a255e193d22de7094873",
        "files": [
          "intel_sgx_sdk_developer_reference_for_linux_os_pdf.pdf",
          "run_sgx_sim/docker-compose.yml",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "Added manual",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "219:     sgx_status_t status = sgx_seal_data_ex(SGX_KEYPOLICY_MRENCLAVE, attribute_mask, misc, 0, NULL, hex_aes_key_length + 1, (uint8_t *) SEK_hex, sealedLen,",
          "220:                                         (sgx_sealed_data_t *) encrypted_SEK);",
          "",
          "[Removed Lines]",
          "221:     CHECK_STATUS(\"seal SEK failed\");",
          "",
          "[Added Lines]",
          "221:     CHECK_STATUS(\"seal SEK failed after SEK generation\");",
          "223:     int len = 0;",
          "225:     SAFE_CHAR_BUF(unsealedKey, BUF_LEN);",
          "226:     int decLen;",
          "228:     status = sgx_unseal_data(encrypted_SEK, NULL, NULL, unsealedKey, &decLen );",
          "230:     SAFE_CHAR_BUF(errS, BUF_LEN);",
          "232:     sprintf(errS, \"status $d\", status);",
          "234:     LOG_ERROR(errS);",
          "236:     CHECK_STATUS(\"seal/unseal SEK failed after SEK generation in unseal\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2b3422d050170fc122497310ce87de2bada774cd",
      "candidate_info": {
        "commit_hash": "2b3422d050170fc122497310ce87de2bada774cd",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/2b3422d050170fc122497310ce87de2bada774cd",
        "files": [
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl"
        ],
        "message": "SKALE-3067-cleanup-sgx",
        "before_after_code_files": [
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1341: void",
          "1342: trustedDecryptDkgSecretAES(int *errStatus, char *errString, uint8_t *encrypted_dkg_secret,",
          "1345:     LOG_DEBUG(__FUNCTION__);",
          "1347:     int status = AES_decrypt(encrypted_dkg_secret, *dec_len, (char *) decrypted_dkg_secret);",
          "",
          "[Removed Lines]",
          "1343:                            uint8_t *decrypted_dkg_secret,",
          "1344:                            uint32_t *dec_len) {",
          "",
          "[Added Lines]",
          "1343:                            uint8_t *decrypted_dkg_secret, uint32_t *dec_len) {",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "3: #define ECDSA_ENCR_LEN 93",
          "4: #define ECDSA_BIN_LEN 33",
          "5: #define SMALL_BUF_SIZE 1024",
          "6: enclave {",
          "8:  trusted {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6: #define SMALL_BUF_SIZE3 3072",
          "7: #define SMALL_BUF_SIZE10 10240",
          "8: #define SMALL_BUF_SIZE7 7168",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:         public void trustedGenDkgSecret (",
          "54:                                 [out] int *errStatus,",
          "55:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "57:                                 [out] uint32_t * enc_len,",
          "58:                                 size_t _t);",
          "60:         public void trustedDecryptDkgSecret (",
          "61:                              [out] int *errStatus,",
          "62:                              [out, count = SMALL_BUF_SIZE] char* err_string,",
          "65:                              [out] uint32_t* dec_len);",
          "67:         public void trustedGetSecretShares (",
          "68:                                 [out] int *errStatus,",
          "69:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "71:                                 [out] uint32_t* dec_len,",
          "73:                                 unsigned _t,",
          "74:                                 unsigned _n);",
          "76:         public void trustedGetPublicShares (",
          "77:                                 [out] int *errStatus,",
          "78:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "80:                                 uint32_t enc_len,",
          "82:                                 unsigned _t,",
          "83:                                 unsigned _n);",
          "",
          "[Removed Lines]",
          "56:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "63:                              [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "64:                              [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "70:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "72:                                 [out, count = 2490] char* secret_shares,",
          "79:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "81:                                 [out, count = 10000] char* public_shares,",
          "",
          "[Added Lines]",
          "59:                                 [out, count = SMALL_BUF_SIZE3] uint8_t* encrypted_dkg_secret,",
          "66:                              [in, count = SMALL_BUF_SIZE3] uint8_t* encrypted_dkg_secret,",
          "67:                              [out, count = SMALL_BUF_SIZE3] uint8_t* decrypted_dkg_secret,",
          "73:                                 [in, count = SMALL_BUF_SIZE3] uint8_t* encrypted_dkg_secret,",
          "75:                                 [out, count = SMALL_BUF_SIZE3] char* secret_shares,",
          "82:                                 [in, count = SMALL_BUF_SIZE3] uint8_t* encrypted_dkg_secret,",
          "84:                                 [out, count = SMALL_BUF_SIZE10] char* public_shares,",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "96:         public void trustedSetEncryptedDkgPoly( [out] int *errStatus,",
          "97:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "100:         public void trustedGetEncryptedSecretShare(",
          "101:                                 [out]int *errStatus,",
          "102:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "103:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
          "104:                                 [out] uint32_t* dec_len,",
          "107:                                 [in, string] char* pub_keyB,",
          "108:                                 uint8_t _t,",
          "109:                                 uint8_t _n,",
          "",
          "[Removed Lines]",
          "98:                                 [in, count = 3050] uint8_t* encrypted_poly);",
          "105:                                 [out, count = 193] char* result_str,",
          "106:                                 [out, count = 320] char* s_shareG2,",
          "",
          "[Added Lines]",
          "101:                                 [in, count = SMALL_BUF_SIZE3] uint8_t* encrypted_poly);",
          "108:                                 [out, count = SMALL_BUF_SIZE3] char* result_str,",
          "109:                                 [out, count = SMALL_BUF_SIZE3] char* s_shareG2,",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "134:                                 [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "135:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "136:                                 uint64_t key_len,",
          "139:         public void trustedComplaintResponse(",
          "140:                                 [out] int *errStatus,",
          "141:                                 [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "143:                                 [out] uint32_t* dec_len,",
          "145:                                 uint8_t _t,",
          "146:                                 uint8_t _n,",
          "147:                                 uint8_t ind1);",
          "",
          "[Removed Lines]",
          "137:                                 [out, count = 320] char* bls_pub_key);",
          "142:                                 [in, count = 3050] uint8_t *encrypted_dkg_secret,",
          "144:                                 [out, count = 320] char* s_shareG2,",
          "",
          "[Added Lines]",
          "140:                                 [out, count = SMALL_BUF_SIZE] char* bls_pub_key);",
          "145:                                 [in, count = SMALL_BUF_SIZE] uint8_t *encrypted_dkg_secret,",
          "147:                                 [out, count = SMALL_BUF_SIZE] char* s_shareG2,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "151:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "152:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_SEK,",
          "153:                                 [out] uint32_t *enc_len,",
          "156:         public void trustedSetSEK(",
          "157:                                 [out] int *errStatus,",
          "",
          "[Removed Lines]",
          "154:                                 [out, count = 65] char* hex_SEK);",
          "",
          "[Added Lines]",
          "157:                                 [out, count = SMALL_BUF_SIZE] char* hex_SEK);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "210:         public void trustedGenDkgSecretAES (",
          "211:                                 [out] int *errStatus,",
          "212:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "214:                                 [out] uint32_t * enc_len, size_t _t);",
          "216:         public void trustedDecryptDkgSecretAES (",
          "217:                                 [out] int *errStatus,",
          "218:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "221:                                 [user_check] uint32_t* dec_len);",
          "223:         public void trustedSetEncryptedDkgPolyAES(",
          "224:                                 [out] int *errStatus,",
          "225:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "227:                                 [out] uint64_t* enc_len);",
          "229:         public void trustedGetEncryptedSecretShareAES(",
          "",
          "[Removed Lines]",
          "213:                                 [out, count = 3050] uint8_t* encrypted_dkg_secret,",
          "219:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "220:                                 [out, count = 2490] uint8_t* decrypted_dkg_secret,",
          "226:                                 [in, count = 3050] uint8_t* encrypted_poly,",
          "",
          "[Added Lines]",
          "216:                                 [out, count = SMALL_BUF_SIZE3] uint8_t* encrypted_dkg_secret,",
          "222:                                 [in, count = SMALL_BUF_SIZE3] uint8_t* encrypted_dkg_secret,",
          "223:                                 [out, count = SMALL_BUF_SIZE3] uint8_t* decrypted_dkg_secret,",
          "229:                                 [in, count = SMALL_BUF_SIZE3] uint8_t* encrypted_poly,",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "231:                                 [out, count = SMALL_BUF_SIZE] char *err_string,",
          "232:                                 [out, count = SMALL_BUF_SIZE] uint8_t *encrypted_skey,",
          "233:                                 [out] uint32_t* dec_len,",
          "236:                                 [in, string] char* pub_keyB,",
          "237:                                 uint8_t _t,",
          "238:                                 uint8_t _n,",
          "",
          "[Removed Lines]",
          "234:                                 [out, count = 193] char* result_str,",
          "235:                                 [out, count = 320] char* s_shareG2,",
          "",
          "[Added Lines]",
          "237:                                 [out, count = SMALL_BUF_SIZE] char* result_str,",
          "238:                                 [out, count = SMALL_BUF_SIZE] char* s_shareG2,",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "241:         public void trustedGetPublicSharesAES(",
          "242:                                 [out] int *errStatus,",
          "243:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "245:                                 uint32_t enc_len,",
          "247:                                 unsigned _t,",
          "248:                                 unsigned _n);",
          "",
          "[Removed Lines]",
          "244:                                 [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "246:                                 [out, count = 10000] char* public_shares,",
          "",
          "[Added Lines]",
          "247:                                 [in, count = SMALL_BUF_SIZE3] uint8_t* encrypted_dkg_secret,",
          "249:                                 [out, count = SMALL_BUF_SIZE10] char* public_shares,",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "261:         public void trustedCreateBlsKeyAES(",
          "262:                                 [out]int *errStatus,",
          "263:                                 [out, count = SMALL_BUF_SIZE] char* err_string,",
          "265:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "266:                                 uint64_t key_len,",
          "267:                                 [out, count = SMALL_BUF_SIZE] uint8_t * encr_bls_key,",
          "",
          "[Removed Lines]",
          "264:                                 [in, count = 6145] const char* s_shares,",
          "",
          "[Added Lines]",
          "267:                                 [in, count = SMALL_BUF_SIZE7] const char* s_shares,",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "281:                                 [out, count = SMALL_BUF_SIZE]  char* err_string,",
          "282:                                 [in, count = SMALL_BUF_SIZE] uint8_t* encrypted_key,",
          "283:                                 uint64_t key_len,",
          "285:  };",
          "287:  untrusted {",
          "",
          "[Removed Lines]",
          "284:                                 [out, count = 320] char* bls_pub_key);",
          "",
          "[Added Lines]",
          "287:                                 [out, count = SMALL_BUF_SIZE] char* bls_pub_key);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c85d8c7040fd5b0cc4cf7cf0470fee1fdca8ddd6",
      "candidate_info": {
        "commit_hash": "c85d8c7040fd5b0cc4cf7cf0470fee1fdca8ddd6",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/c85d8c7040fd5b0cc4cf7cf0470fee1fdca8ddd6",
        "files": [
          "secure_enclave/AESUtils.c",
          "secure_enclave/secure_enclave.c"
        ],
        "message": "SKALE-4523 format code",
        "before_after_code_files": [
          "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ],
          "candidate": [
            "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c"
          ]
        }
      },
      "candidate_diff": {
        "secure_enclave/AESUtils.c||secure_enclave/AESUtils.c": [
          "File: secure_enclave/AESUtils.c -> secure_enclave/AESUtils.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #define SAFE_CHAR_BUF(__X__, __Y__)  ;char __X__ [ __Y__ ]; memset(__X__, 0, __Y__);",
          "39:                 unsigned char exportable, uint64_t* resultLen) {",
          "43:     if (!type) {",
          "44:         LOG_ERROR(\"Null type in AES_encrypt\");",
          "45:         return -1;",
          "",
          "[Removed Lines]",
          "38: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned  char type,",
          "",
          "[Added Lines]",
          "38: int AES_encrypt(char *message, uint8_t *encr_message, uint64_t encrBufLen, unsigned char type,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "55:         return -2;",
          "56:     }",
          "58:     uint64_t len = strlen(message) + 1;",
          "60:     if (2 + len + SGX_AESGCM_MAC_SIZE + SGX_AESGCM_IV_SIZE > encrBufLen ) {",
          "61:         LOG_ERROR(\"Output buffer too small\");",
          "63:     }",
          "65:     SAFE_CHAR_BUF(fullMessage, len + 2);",
          "",
          "[Removed Lines]",
          "62:         return -3;",
          "",
          "[Added Lines]",
          "55:     if (!resultLen) {",
          "56:         LOG_ERROR(\"Null resultLen in AES_encrypt\");",
          "57:         return -3;",
          "58:     }",
          "64:         return -4;",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "615:     uint8_t type = 0;",
          "616:     uint8_t exportable = 0;",
          "621:     if (exportable != EXPORTABLE) {",
          "622:         while (*key != '\\0') {",
          "",
          "[Removed Lines]",
          "618:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 1024,",
          "619:                              &type, &exportable);",
          "",
          "[Added Lines]",
          "618:     int status = AES_decrypt(encryptedPrivateKey, enc_len, key, 1024, &type, &exportable);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "635:         goto clean;",
          "636:     }",
          "642:     if (keyLen == MAX_KEY_LENGTH) {",
          "643:         snprintf(errString, BUF_LEN, \"Key is not null terminated\");",
          "644:         LOG_ERROR(errString);",
          "645:         goto clean;",
          "",
          "[Removed Lines]",
          "640:     uint64_t keyLen = strnlen(key, MAX_KEY_LENGTH);",
          "",
          "[Added Lines]",
          "637:     size_t keyLen = strnlen(key, MAX_KEY_LENGTH);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e97a9fc51090efdc828df39500ae6385349599ff",
      "candidate_info": {
        "commit_hash": "e97a9fc51090efdc828df39500ae6385349599ff",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/e97a9fc51090efdc828df39500ae6385349599ff",
        "files": [
          "ECDSACrypto.cpp",
          "secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl",
          "secure_enclave/secure_enclave.i"
        ],
        "message": "SKALE-2454-add-logs-to-enclave",
        "before_after_code_files": [
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
          "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl",
          "secure_enclave/secure_enclave.i||secure_enclave/secure_enclave.i"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ],
          "candidate": [
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c",
            "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl"
          ]
        }
      },
      "candidate_diff": {
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "159:         status = ecdsa_sign1(eid, &err_status, errMsg, encr_key, ECDSA_ENCR_LEN, (unsigned char *) hashHex, signature_r,",
          "160:                              signature_s, &signature_v, base);",
          "161:     else",
          "163:                                 signature_s, &signature_v, base);",
          "164:     if (err_status != 0) {",
          "165:         throw SGXException(-666, errMsg);",
          "",
          "[Removed Lines]",
          "162:         status = ecdsa_sign_aes(eid, &err_status, errMsg, encr_key, dec_len, (unsigned char *) hashHex, signature_r,",
          "",
          "[Added Lines]",
          "162:         status = trustedEcdsaSignAES(eid, &err_status, errMsg, encr_key, dec_len, (unsigned char *) hashHex, signature_r,",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.c||secure_enclave/secure_enclave.c": [
          "File: secure_enclave/secure_enclave.c -> secure_enclave/secure_enclave.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "273:     point_clear(Pkey);",
          "274: }",
          "277:                  unsigned char *hash, char *sig_r, char *sig_s, uint8_t *sig_v, int base) {",
          "279:     char* arr_m = NULL;",
          "",
          "[Removed Lines]",
          "276: void ecdsa_sign1(int *err_status, char *err_string, uint8_t *encrypted_key, uint32_t dec_len,",
          "",
          "[Added Lines]",
          "276: void trustedEcdsaSign(int *err_status, char *err_string, uint8_t *encrypted_key, uint32_t dec_len,",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1140:     point_clear(Pkey);",
          "1141: }",
          "1144:                     unsigned char *hash, char *sig_r, char *sig_s, uint8_t *sig_v, int base) {",
          "1146:     domain_parameters curve = domain_parameters_init();",
          "",
          "[Removed Lines]",
          "1143: void ecdsa_sign_aes(int *err_status, char *err_string, uint8_t *encrypted_key, uint32_t enc_len,",
          "",
          "[Added Lines]",
          "1143: void trustedEcdsaSignAES(int *err_status, char *err_string, uint8_t *encrypted_key, uint32_t enc_len,",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.edl||secure_enclave/secure_enclave.edl": [
          "File: secure_enclave/secure_enclave.edl -> secure_enclave/secure_enclave.edl",
          "--- Hunk 1 ---",
          "[Context before]",
          "99:                                 unsigned _t,",
          "100:                                 unsigned _n);",
          "103:                                  [user_check] int *err_status,",
          "104:                                  [out, count = 1024] char* err_string,",
          "105:                                  [in, count = 1024] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "102:                 public void ecdsa_sign1(",
          "",
          "[Added Lines]",
          "102:                 public void trustedEcdsaSign(",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "201:                                 [out, count = 1024] char * pub_key_x,",
          "202:                                 [out, count = 1024] char * pub_key_y);",
          "205:                                 [user_check] int *err_status,",
          "206:                                 [out, count = 1024] char* err_string,",
          "207:                                 [in, count = 1024] uint8_t* encrypted_key,",
          "",
          "[Removed Lines]",
          "204:                 public void ecdsa_sign_aes(",
          "",
          "[Added Lines]",
          "204:                 public void trustedEcdsaSignAES(",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "259:                               uint8_t _n,",
          "260:                               uint8_t ind);",
          "263:                             [user_check] int *err_status,",
          "264:                             [out, count = 1024] char* err_string,",
          "265:                             [in, count = 3050] uint8_t* encrypted_dkg_secret,",
          "",
          "[Removed Lines]",
          "262:                 public void trustedGetPublicShares_aes (",
          "",
          "[Added Lines]",
          "262:                 public void trustedGetPublicShares_aes(",
          "",
          "---------------"
        ],
        "secure_enclave/secure_enclave.i||secure_enclave/secure_enclave.i": [
          "File: secure_enclave/secure_enclave.i -> secure_enclave/secure_enclave.i",
          "--- Hunk 1 ---",
          "[Context before]",
          "5476: void trustedDecryptDkgSecret(int* err_status, char* err_string, uint8_t* encrypted_dkg_secret, uint8_t* decrypted_dkg_secret, uint32_t enc_len);",
          "5477: void trustedGetSecretShares(int* err_status, char* err_string, uint8_t* decrypted_dkg_secret, uint32_t enc_len, char* secret_shares, unsigned int _t, unsigned int _n);",
          "5478: void trustedGetPublicShares(int* err_status, char* err_string, uint8_t* decrypted_dkg_secret, uint32_t enc_len, char* public_shares, unsigned int _t, unsigned int _n);",
          "5481: sgx_status_t oc_realloc(uint64_t* retval, void* optr, size_t osz, size_t nsz);",
          "5482: sgx_status_t oc_free(void* optr, size_t sz);",
          "",
          "[Removed Lines]",
          "5479: void ecdsa_sign1(int* err_status, char* err_string, uint8_t* encrypted_key, uint32_t dec_len, unsigned char* hash, char* signature, int test_len);",
          "",
          "[Added Lines]",
          "5479: void trustedEcdsaSign(int* err_status, char* err_string, uint8_t* encrypted_key, uint32_t dec_len, unsigned char* hash, char* signature, int test_len);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "6940:   mpz_t s;",
          "6941: };",
          "6944:                         uint32_t dec_len, unsigned char* hash, char * signature, int test_len) {",
          "6946:   domain_parameters curve = domain_parameters_init();",
          "",
          "[Removed Lines]",
          "6943: void ecdsa_sign1(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "[Added Lines]",
          "6943: void trustedEcdsaSign(int *err_status, char *err_string, uint8_t *encrypted_key,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a2fdbcb7e30fa4de0d39ec69ab3572655e6b21f0",
      "candidate_info": {
        "commit_hash": "a2fdbcb7e30fa4de0d39ec69ab3572655e6b21f0",
        "repo": "skalenetwork/sgxwallet",
        "commit_url": "https://github.com/skalenetwork/sgxwallet/commit/a2fdbcb7e30fa4de0d39ec69ab3572655e6b21f0",
        "files": [
          "BLSCrypto.cpp",
          "DKGCrypto.cpp",
          "ECDSACrypto.cpp",
          "LevelDB.cpp",
          "SEKManager.cpp",
          "ServerInit.cpp"
        ],
        "message": "SKALE-2341 Added tags for older commits",
        "before_after_code_files": [
          "BLSCrypto.cpp||BLSCrypto.cpp",
          "DKGCrypto.cpp||DKGCrypto.cpp",
          "ECDSACrypto.cpp||ECDSACrypto.cpp",
          "LevelDB.cpp||LevelDB.cpp",
          "SEKManager.cpp||SEKManager.cpp",
          "ServerInit.cpp||ServerInit.cpp"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp"
          ],
          "candidate": [
            "BLSCrypto.cpp||BLSCrypto.cpp",
            "DKGCrypto.cpp||DKGCrypto.cpp",
            "ECDSACrypto.cpp||ECDSACrypto.cpp",
            "SEKManager.cpp||SEKManager.cpp"
          ]
        }
      },
      "candidate_diff": {
        "BLSCrypto.cpp||BLSCrypto.cpp": [
          "File: BLSCrypto.cpp -> BLSCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "55: #include \"common.h\"",
          "71: }",
          "73: int char2int(char _input) {",
          "81: }",
          "97: }",
          "124: }",
          "129:     int len = strnlen(_hex, _max_length);//2 * BUF_LEN);",
          "",
          "[Removed Lines]",
          "58: std::string *FqToString(libff::alt_bn128_Fq*_fq) {",
          "60:   mpz_t t;",
          "61:   mpz_init(t);",
          "63:   _fq->as_bigint().to_mpz(t);",
          "65:   char arr[mpz_sizeinbase(t, 10) + 2];",
          "67:   char *tmp = mpz_get_str(arr, 10, t);",
          "68:   mpz_clear(t);",
          "70:   return new std::string(tmp);",
          "74:   if (_input >= '0' && _input <= '9')",
          "75:     return _input - '0';",
          "76:   if (_input >= 'A' && _input <= 'F')",
          "77:     return _input - 'A' + 10;",
          "78:   if (_input >= 'a' && _input <= 'f')",
          "79:     return _input - 'a' + 10;",
          "80:   return -1;",
          "85: void  carray2Hex(const unsigned char *d, int _len, char* _hexArray) {",
          "87:   char hexval[16] = {'0', '1', '2', '3', '4', '5', '6', '7',",
          "88:                      '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};",
          "90:   for (int j = 0; j < _len; j++) {",
          "91:     _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
          "92:     _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
          "93:   }",
          "95:   _hexArray[_len * 2] = 0;",
          "100: bool hex2carray(const char * _hex, uint64_t  *_bin_len,",
          "101:                 uint8_t* _bin ) {",
          "103:   int len = strnlen(_hex, 2 * BUF_LEN);",
          "106:   if (len == 0 && len % 2 == 1)",
          "107:     return false;",
          "111:   for (int i = 0; i < len / 2; i++) {",
          "112:     int high = char2int((char)_hex[i * 2]);",
          "113:     int low = char2int((char)_hex[i * 2 + 1]);",
          "115:     if (high < 0 || low < 0) {",
          "116:       return false;",
          "117:     }",
          "119:     _bin[i] = (unsigned char) (high * 16 + low);",
          "120:   }",
          "122:   return true;",
          "126: bool hex2carray2(const char * _hex, uint64_t  *_bin_len,",
          "127:                 uint8_t* _bin, const int _max_length ) {",
          "",
          "[Added Lines]",
          "58: std::string *FqToString(libff::alt_bn128_Fq *_fq) {",
          "60:     mpz_t t;",
          "61:     mpz_init(t);",
          "63:     _fq->as_bigint().to_mpz(t);",
          "65:     char arr[mpz_sizeinbase(t, 10) + 2];",
          "67:     char *tmp = mpz_get_str(arr, 10, t);",
          "68:     mpz_clear(t);",
          "70:     return new std::string(tmp);",
          "74:     if (_input >= '0' && _input <= '9')",
          "75:         return _input - '0';",
          "76:     if (_input >= 'A' && _input <= 'F')",
          "77:         return _input - 'A' + 10;",
          "78:     if (_input >= 'a' && _input <= 'f')",
          "79:         return _input - 'a' + 10;",
          "80:     return -1;",
          "84: void carray2Hex(const unsigned char *d, int _len, char *_hexArray) {",
          "86:     char hexval[16] = {'0', '1', '2', '3', '4', '5', '6', '7',",
          "87:                        '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};",
          "89:     for (int j = 0; j < _len; j++) {",
          "90:         _hexArray[j * 2] = hexval[((d[j] >> 4) & 0xF)];",
          "91:         _hexArray[j * 2 + 1] = hexval[(d[j]) & 0x0F];",
          "92:     }",
          "94:     _hexArray[_len * 2] = 0;",
          "99: bool hex2carray(const char *_hex, uint64_t *_bin_len,",
          "100:                 uint8_t *_bin) {",
          "102:     int len = strnlen(_hex, 2 * BUF_LEN);",
          "105:     if (len == 0 && len % 2 == 1)",
          "106:         return false;",
          "110:     for (int i = 0; i < len / 2; i++) {",
          "111:         int high = char2int((char) _hex[i * 2]);",
          "112:         int low = char2int((char) _hex[i * 2 + 1]);",
          "114:         if (high < 0 || low < 0) {",
          "115:             return false;",
          "116:         }",
          "118:         _bin[i] = (unsigned char) (high * 16 + low);",
          "119:     }",
          "121:     return true;",
          "125: bool hex2carray2(const char *_hex, uint64_t *_bin_len,",
          "126:                  uint8_t *_bin, const int _max_length) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "137:     for (int i = 0; i < len / 2; i++) {",
          "141:         if (high < 0 || low < 0) {",
          "142:             return false;",
          "",
          "[Removed Lines]",
          "138:         int high = char2int((char)_hex[i * 2]);",
          "139:         int low = char2int((char)_hex[i * 2 + 1]);",
          "",
          "[Added Lines]",
          "137:         int high = char2int((char) _hex[i * 2]);",
          "138:         int low = char2int((char) _hex[i * 2 + 1]);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "150: }",
          "174:     auto sigShare = keyShare->signWithHelperSGX(hash, _signerIndex);",
          "191: }",
          "",
          "[Removed Lines]",
          "152: bool sign(const char* _encryptedKeyHex, const char* _hashHex, size_t _t, size_t _n, size_t _signerIndex,",
          "153:     char* _sig) {",
          "157:   auto keyStr = make_shared<string>(_encryptedKeyHex);",
          "159:   auto hash = make_shared<array<uint8_t, 32>>();",
          "161:   uint64_t binLen;",
          "163:   if (!hex2carray(_hashHex, &binLen, hash->data())){",
          "164:       throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "165:   }",
          "170:   auto keyShare = make_shared<BLSPrivateKeyShareSGX>(keyStr, _t, _n);",
          "177:   auto sigShareStr = sigShare->toString();",
          "179:   strncpy(_sig, sigShareStr->c_str(), BUF_LEN);",
          "190:   return true;",
          "193: bool sign_aes(const char* _encryptedKeyHex, const char* _hashHex, size_t _t, size_t _n, size_t _signerIndex,",
          "194:           char* _sig) {",
          "198:   auto keyStr = make_shared<string>(_encryptedKeyHex);",
          "200:   auto hash = make_shared<array<uint8_t, 32>>();",
          "202:   uint64_t binLen;",
          "204:   if (!hex2carray(_hashHex, &binLen, hash->data())){",
          "205:     throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "206:   }",
          "",
          "[Added Lines]",
          "151: bool sign(const char *_encryptedKeyHex, const char *_hashHex, size_t _t, size_t _n, size_t _signerIndex,",
          "152:           char *_sig) {",
          "156:     auto keyStr = make_shared<string>(_encryptedKeyHex);",
          "158:     auto hash = make_shared<array<uint8_t, 32>>();",
          "160:     uint64_t binLen;",
          "162:     if (!hex2carray(_hashHex, &binLen, hash->data())) {",
          "163:         throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "164:     }",
          "169:     auto keyShare = make_shared<BLSPrivateKeyShareSGX>(keyStr, _t, _n);",
          "176:     auto sigShareStr = sigShare->toString();",
          "178:     strncpy(_sig, sigShareStr->c_str(), BUF_LEN);",
          "189:     return true;",
          "192: bool sign_aes(const char *_encryptedKeyHex, const char *_hashHex, size_t _t, size_t _n, size_t _signerIndex,",
          "193:               char *_sig) {",
          "197:     auto keyStr = make_shared<string>(_encryptedKeyHex);",
          "199:     auto hash = make_shared<array<uint8_t, 32>>();",
          "201:     uint64_t binLen;",
          "203:     if (!hex2carray(_hashHex, &binLen, hash->data())) {",
          "204:         throw RPCException(INVALID_HEX, \"Invalid hash\");",
          "205:     }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "304: }",
          "315: }",
          "318:     auto keyArray = make_shared<vector<char>>(BUF_LEN, 0);",
          "319:     auto encryptedKey = make_shared<vector<uint8_t>>(BUF_LEN, 0);",
          "320:     auto errMsg = make_shared<vector<char>>(BUF_LEN, 0);",
          "",
          "[Removed Lines]",
          "221:   shared_ptr<signatures::Bls> obj;",
          "222:   obj = make_shared<signatures::Bls>(signatures::Bls(_t, _n));",
          "224:   std::pair<libff::alt_bn128_G1, std::string> hash_with_hint =",
          "225:       obj->HashtoG1withHint(hash);",
          "227:   int errStatus = 0;",
          "230:   string* xStr = FqToString(&(hash_with_hint.first.X));",
          "232:   if (xStr == nullptr) {",
          "233:     std::cerr <<   \"Null xStr\" << std::endl;",
          "234:     BOOST_THROW_EXCEPTION(runtime_error(\"Null xStr\"));",
          "235:   }",
          "237:   string* yStr = FqToString(&(hash_with_hint.first.Y));",
          "239:   if (yStr == nullptr) {",
          "240:     std::cerr <<   \"Null yStr\" << std::endl;",
          "241:     BOOST_THROW_EXCEPTION(runtime_error(\"Null yStr\"));",
          "242:   }",
          "245:   char errMsg[BUF_LEN];",
          "246:   memset(errMsg, 0, BUF_LEN);",
          "248:   char xStrArg[BUF_LEN];",
          "249:   char yStrArg[BUF_LEN];",
          "250:   char signature [BUF_LEN];",
          "252:   memset(xStrArg, 0, BUF_LEN);",
          "253:   memset(yStrArg, 0, BUF_LEN);",
          "255:   strncpy(xStrArg, xStr->c_str(), BUF_LEN);",
          "256:   strncpy(yStrArg, yStr->c_str(), BUF_LEN);",
          "258:   size_t sz = 0;",
          "261:   uint8_t encryptedKey[BUF_LEN];",
          "263:   bool result = hex2carray(_encryptedKeyHex, &sz, encryptedKey);",
          "265:   if (!result) {",
          "266:     cerr <<   \"Invalid hex encrypted key\" << endl;",
          "267:     BOOST_THROW_EXCEPTION(std::invalid_argument(\"Invalid hex encrypted key\"));",
          "268:   }",
          "270:   sgx_status_t status =",
          "271:       bls_sign_message_aes(eid, &errStatus, errMsg, encryptedKey,",
          "272:                        sz, xStrArg, yStrArg, signature);",
          "275:   if (status != SGX_SUCCESS) {",
          "276:     cerr <<\"SGX enclave call  to bls_sign_message failed:\" << status << std::endl;",
          "277:     BOOST_THROW_EXCEPTION(runtime_error(\"SGX enclave call  to bls_sign_message failed\"));",
          "278:   }",
          "281:   std::string hint = BLSutils::ConvertToString(hash_with_hint.first.Y) + \":\" +",
          "282:                      hash_with_hint.second;",
          "285:   std::string sig = signature;",
          "287:   sig.append(\":\");",
          "288:   sig.append(hint);",
          "290:   strncpy(_sig, sig.c_str(), BUF_LEN);",
          "292:   printf(\"_sig is: %s\\n\", sig.c_str());",
          "303:   return true;",
          "306: bool bls_sign(const char* _encryptedKeyHex, const char* _hashHex, size_t _t, size_t _n, size_t _signerIndex,",
          "307:               char* _sig) {",
          "309:   if (!encryptKeys){",
          "310:     return sign(_encryptedKeyHex, _hashHex, _t, _n, _signerIndex, _sig);",
          "311:   }",
          "312:   else{",
          "313:     return sign_aes(_encryptedKeyHex, _hashHex, _t, _n, _signerIndex, _sig);",
          "314:   }",
          "317: char* encryptBLSKeyShare2Hex(int *errStatus, char *err_string, const char *_key) {",
          "",
          "[Added Lines]",
          "220:     shared_ptr<signatures::Bls> obj;",
          "221:     obj = make_shared<signatures::Bls>(signatures::Bls(_t, _n));",
          "223:     std::pair<libff::alt_bn128_G1, std::string> hash_with_hint =",
          "224:             obj->HashtoG1withHint(hash);",
          "226:     int errStatus = 0;",
          "229:     string *xStr = FqToString(&(hash_with_hint.first.X));",
          "231:     if (xStr == nullptr) {",
          "232:         std::cerr << \"Null xStr\" << std::endl;",
          "233:         BOOST_THROW_EXCEPTION(runtime_error(\"Null xStr\"));",
          "234:     }",
          "236:     string *yStr = FqToString(&(hash_with_hint.first.Y));",
          "238:     if (yStr == nullptr) {",
          "239:         std::cerr << \"Null yStr\" << std::endl;",
          "240:         BOOST_THROW_EXCEPTION(runtime_error(\"Null yStr\"));",
          "241:     }",
          "244:     char errMsg[BUF_LEN];",
          "245:     memset(errMsg, 0, BUF_LEN);",
          "247:     char xStrArg[BUF_LEN];",
          "248:     char yStrArg[BUF_LEN];",
          "249:     char signature[BUF_LEN];",
          "251:     memset(xStrArg, 0, BUF_LEN);",
          "252:     memset(yStrArg, 0, BUF_LEN);",
          "254:     strncpy(xStrArg, xStr->c_str(), BUF_LEN);",
          "255:     strncpy(yStrArg, yStr->c_str(), BUF_LEN);",
          "257:     size_t sz = 0;",
          "260:     uint8_t encryptedKey[BUF_LEN];",
          "262:     bool result = hex2carray(_encryptedKeyHex, &sz, encryptedKey);",
          "264:     if (!result) {",
          "265:         cerr << \"Invalid hex encrypted key\" << endl;",
          "266:         BOOST_THROW_EXCEPTION(std::invalid_argument(\"Invalid hex encrypted key\"));",
          "267:     }",
          "269:     sgx_status_t status =",
          "270:             bls_sign_message_aes(eid, &errStatus, errMsg, encryptedKey,",
          "271:                                  sz, xStrArg, yStrArg, signature);",
          "274:     if (status != SGX_SUCCESS) {",
          "275:         cerr << \"SGX enclave call  to bls_sign_message failed:\" << status << std::endl;",
          "276:         BOOST_THROW_EXCEPTION(runtime_error(\"SGX enclave call  to bls_sign_message failed\"));",
          "277:     }",
          "280:     std::string hint = BLSutils::ConvertToString(hash_with_hint.first.Y) + \":\" +",
          "281:                        hash_with_hint.second;",
          "284:     std::string sig = signature;",
          "286:     sig.append(\":\");",
          "287:     sig.append(hint);",
          "289:     strncpy(_sig, sig.c_str(), BUF_LEN);",
          "291:     printf(\"_sig is: %s\\n\", sig.c_str());",
          "302:     return true;",
          "305: bool bls_sign(const char *_encryptedKeyHex, const char *_hashHex, size_t _t, size_t _n, size_t _signerIndex,",
          "306:               char *_sig) {",
          "308:     if (!encryptKeys) {",
          "309:         return sign(_encryptedKeyHex, _hashHex, _t, _n, _signerIndex, _sig);",
          "310:     } else {",
          "311:         return sign_aes(_encryptedKeyHex, _hashHex, _t, _n, _signerIndex, _sig);",
          "312:     }",
          "315: char *encryptBLSKeyShare2Hex(int *errStatus, char *err_string, const char *_key) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "327:     status = encrypt_key_aes(eid, errStatus, errMsg->data(), keyArray->data(), encryptedKey->data(), &encryptedLen);",
          "334:     if (status != SGX_SUCCESS) {",
          "",
          "[Removed Lines]",
          "329:     if (printDebugInfo) {",
          "330:       spdlog::debug(\"errStatus is {}\",*errStatus);",
          "331:       spdlog::debug(\" errMsg is \", errMsg->data() );",
          "332:     }",
          "",
          "[Added Lines]",
          "327:     spdlog::debug(\"errStatus is {}\", *errStatus);",
          "328:     spdlog::debug(\" errMsg is \", errMsg->data());",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "365:     char *plaintextKey = (char *) calloc(BUF_LEN, 1);",
          "370:     if (status != SGX_SUCCESS) {",
          "371:         return nullptr;",
          "",
          "[Removed Lines]",
          "368:      status = decrypt_key_aes(eid, errStatus, errMsg, decoded, decodedLen, plaintextKey);",
          "",
          "[Added Lines]",
          "365:     status = decrypt_key_aes(eid, errStatus, errMsg, decoded, decodedLen, plaintextKey);",
          "",
          "---------------"
        ],
        "DKGCrypto.cpp||DKGCrypto.cpp": [
          "File: DKGCrypto.cpp -> DKGCrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "36: #include \"spdlog/spdlog.h\"",
          "37: #include \"common.h\"",
          "59: }",
          "61: template<class T>",
          "62: string ConvertToString(T field_elem, int base = 10) {",
          "76: }",
          "79:     vector<char> errMsg(1024, 0);",
          "80:     int err_status = 0;",
          "",
          "[Removed Lines]",
          "39: vector<string> SplitString(const char* koefs, const char symbol){",
          "40:   string str(koefs);",
          "41:   string delim;",
          "42:   delim.push_back(symbol);",
          "43:   vector<string> G2_strings;",
          "44:   size_t prev = 0, pos = 0;",
          "45:   do",
          "46:   {",
          "47:     pos = str.find(delim, prev);",
          "48:     if (pos == string::npos) pos = str.length();",
          "49:     string token = str.substr(prev, pos-prev);",
          "50:     if (!token.empty()) {",
          "51:       string koef(token.c_str());",
          "52:       G2_strings.push_back(koef);",
          "53:     }",
          "54:     prev = pos + delim.length();",
          "55:   }",
          "56:   while (pos < str.length() && prev < str.length());",
          "58:   return G2_strings;",
          "63:   mpz_t t;",
          "64:   mpz_init(t);",
          "66:   field_elem.as_bigint().to_mpz(t);",
          "68:   char arr[mpz_sizeinbase (t, base) + 2];",
          "70:   char * tmp = mpz_get_str(arr, base, t);",
          "71:   mpz_clear(t);",
          "73:   string output = tmp;",
          "75:   return output;",
          "78: string gen_dkg_poly( int _t){",
          "",
          "[Added Lines]",
          "39: vector<string> SplitString(const char *koefs, const char symbol) {",
          "40:     string str(koefs);",
          "41:     string delim;",
          "42:     delim.push_back(symbol);",
          "43:     vector<string> G2_strings;",
          "44:     size_t prev = 0, pos = 0;",
          "45:     do {",
          "46:         pos = str.find(delim, prev);",
          "47:         if (pos == string::npos) pos = str.length();",
          "48:         string token = str.substr(prev, pos - prev);",
          "49:         if (!token.empty()) {",
          "50:             string koef(token.c_str());",
          "51:             G2_strings.push_back(koef);",
          "52:         }",
          "53:         prev = pos + delim.length();",
          "54:     } while (pos < str.length() && prev < str.length());",
          "56:     return G2_strings;",
          "61:     mpz_t t;",
          "62:     mpz_init(t);",
          "64:     field_elem.as_bigint().to_mpz(t);",
          "66:     char arr[mpz_sizeinbase(t, base) + 2];",
          "68:     char *tmp = mpz_get_str(arr, base, t);",
          "69:     mpz_clear(t);",
          "71:     string output = tmp;",
          "73:     return output;",
          "76: string gen_dkg_poly(int _t) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     uint32_t enc_len = 0;",
          "86:     if (!encryptKeys)",
          "88:     else",
          "92:     }",
          "99:     uint64_t length = DKG_MAX_SEALED_LEN;",
          "102:     }",
          "106:     vector<char> hexEncrPoly(2 * length + 1, 0);",
          "109:     carray2Hex(encrypted_dkg_secret.data(), length, hexEncrPoly.data());",
          "110:     string result(hexEncrPoly.data());",
          "",
          "[Removed Lines]",
          "87:       status = gen_dkg_secret (eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "89:       status = gen_dkg_secret_aes (eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "90:     if ( err_status != 0){",
          "91:         throw RPCException(-666, errMsg.data() ) ;",
          "94:     if (printDebugInfo) {",
          "95:       spdlog::debug(\"gen_dkg_secret, status {}\", err_status, \" err msg \", errMsg.data());",
          "96:       spdlog::debug(\"in DKGCrypto encr len is {}\", enc_len);",
          "97:     }",
          "100:     if (encryptKeys){",
          "101:       length = enc_len;",
          "107:     assert( encrypted_dkg_secret.size() >= length);",
          "",
          "[Added Lines]",
          "85:         status = gen_dkg_secret(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "87:         status = gen_dkg_secret_aes(eid, &err_status, errMsg.data(), encrypted_dkg_secret.data(), &enc_len, _t);",
          "88:     if (err_status != 0) {",
          "89:         throw RPCException(-666, errMsg.data());",
          "92:     spdlog::debug(\"gen_dkg_secret, status {}\", err_status, \" err msg \", errMsg.data());",
          "93:     spdlog::debug(\"in DKGCrypto encr len is {}\", enc_len);",
          "96:     if (encryptKeys) {",
          "97:         length = enc_len;",
          "103:     assert(encrypted_dkg_secret.size() >= length);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "112:     return result;",
          "113: }",
          "123:     spdlog::debug(\"got encr poly size {}\", char_traits<char>::length(encryptedPolyHex));",
          "142:     spdlog::debug(\"hex_encr_poly length is {}\", strlen(encryptedPolyHex));",
          "143:     spdlog::debug(\"enc len {}\", enc_len);",
          "162:     spdlog::debug(\"err msg is {}\", errMsg1);",
          "164:     spdlog::debug(\"public_shares:\");",
          "168:     spdlog::debug(\"get_public_shares status: {}\", err_status);",
          "184: }",
          "231:     }",
          "233:     if (!encryptKeys)",
          "236:     else",
          "244:     }",
          "275:     }",
          "284: }",
          "288:     char errMsg1[BUF_LEN];",
          "289:     int err_status = 0;",
          "292:     uint8_t encr_key[BUF_LEN];",
          "293:     memset(encr_key, 0, BUF_LEN);",
          "295:         throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "296:     }",
          "297:     int result;",
          "305:     char pshares[8193];",
          "306:     memset(pshares, 0, 8193);",
          "310:     if (!encryptKeys)",
          "312:     else",
          "317:     }",
          "326:     return result;",
          "327: }",
          "331:     spdlog::debug(\"ENTER CreateBLSShare\");",
          "372:     }",
          "377: }",
          "381:     char errMsg1[BUF_LEN];",
          "383:     int err_status = 0;",
          "386:     uint8_t encr_key[BUF_LEN];",
          "388:         throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "389:     }",
          "391:     char pub_key[320];",
          "396:     if (!encryptKeys)",
          "398:     else",
          "403:     }",
          "404:     vector<string> pub_key_vect = SplitString(pub_key, ':');",
          "410:         spdlog::debug(\"{}\", pub_key_vect.at(i));",
          "412:     return pub_key_vect;",
          "413: }",
          "423:     spdlog::debug(\"encr DH key is {}\", *hexEncrKey_ptr);",
          "434:     spdlog::debug(\"encr DH key length is {}\", DH_enc_len);",
          "435:     spdlog::debug(\"hex encr DH key length is {}\", hexEncrKey_ptr->length());",
          "449: }",
          "452:     vector<string> result(4);",
          "453:     libff::init_alt_bn128_params();",
          "454:     libff::alt_bn128_Fr el(x.c_str());",
          "",
          "[Removed Lines]",
          "115: vector <vector<string>> get_verif_vect(const char* encryptedPolyHex, int t, int n){",
          "117:   char* errMsg1 = (char*) calloc(1024,1);",
          "119:   int err_status = 0;",
          "121:   if (printDebugInfo) {",
          "124:   }",
          "126:   char* public_shares = (char*)calloc(10000, 1);",
          "127:   memset(public_shares, 0, 10000);",
          "130:   uint64_t enc_len = 0;",
          "132:   uint8_t* encr_dkg_poly = (uint8_t*) calloc(DKG_MAX_SEALED_LEN * 2, 1);",
          "133:   memset(encr_dkg_poly, 0, DKG_MAX_SEALED_LEN * 2);",
          "136:   if (!hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100)){",
          "137:       throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "138:   }",
          "140:   if (printDebugInfo) {",
          "147:   }",
          "149:   uint32_t len = 0;",
          "151:   if (!encryptKeys)",
          "152:     status = get_public_shares(eid, &err_status, errMsg1, encr_dkg_poly, len, public_shares, t, n);",
          "153:   else {",
          "155:     status = get_public_shares_aes(eid, &err_status, errMsg1, encr_dkg_poly, enc_len, public_shares, t, n);",
          "156:   }",
          "157:   if ( err_status != 0){",
          "158:     throw RPCException(-666, errMsg1 );",
          "159:   }",
          "161:   if (printDebugInfo) {",
          "165:     spdlog::debug(\"{}\", public_shares);",
          "170:   }",
          "172:   vector <string> G2_strings = SplitString( public_shares, ',');",
          "173:   vector <vector <string>> pub_shares_vect;",
          "174:   for ( uint64_t i = 0; i < G2_strings.size(); i++){",
          "175:     vector <string> koef_str = SplitString(G2_strings.at(i).c_str(), ':');",
          "176:     pub_shares_vect.push_back(koef_str);",
          "177:   }",
          "179:   free(errMsg1);",
          "180:   free(public_shares);",
          "181:   free(encr_dkg_poly);",
          "183:   return pub_shares_vect;",
          "186: string get_secret_shares(const string& polyName, const char* encryptedPolyHex, const vector<string>& publicKeys, int t, int n){",
          "188:   char errMsg1[BUF_LEN];",
          "189:   int err_status = 0;",
          "190:   char hexEncrKey[BUF_LEN];",
          "191:   memset(hexEncrKey, 0, BUF_LEN);",
          "192:   uint64_t enc_len = 0;",
          "195:   uint8_t encr_dkg_poly[DKG_MAX_SEALED_LEN];",
          "196:   memset(encr_dkg_poly, 0, DKG_MAX_SEALED_LEN);",
          "197:   if(!hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100)){",
          "198:       throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "199:   }",
          "201:   std::cerr << \"enc_len is \" << enc_len << std::endl;",
          "203:   if (!encryptKeys)",
          "204:     status = set_encrypted_dkg_poly(eid, &err_status, errMsg1, encr_dkg_poly);",
          "205:   else",
          "206:     status = set_encrypted_dkg_poly_aes(eid, &err_status, errMsg1, encr_dkg_poly, &enc_len);",
          "208:   if ( status != SGX_SUCCESS || err_status != 0){",
          "209:     throw RPCException(-666, errMsg1 );",
          "210:   }",
          "212:   string result;",
          "215:   for ( int i = 0; i < n; i++){",
          "216:     uint8_t encryptedSkey[BUF_LEN];",
          "217:     memset(encryptedSkey, 0, BUF_LEN);",
          "218:     uint32_t dec_len;",
          "220:     char cur_share[193];",
          "221:     char s_shareG2[320];",
          "222:     string pub_keyB = publicKeys.at(i);//publicKeys.substr(128*i, 128*i + 128);",
          "226:     char pubKeyB[129];",
          "227:     strncpy(pubKeyB, pub_keyB.c_str(), 128);",
          "228:     pubKeyB[128] = 0;",
          "229:     if (printDebugInfo) {",
          "230:       spdlog::debug(\"pubKeyB is {}\", pub_keyB);",
          "234:       get_encr_sshare(eid, &err_status, errMsg1, encryptedSkey, &dec_len,",
          "235:                       cur_share, s_shareG2, pubKeyB, t, n, i + 1 );",
          "237:       get_encr_sshare_aes(eid, &err_status, errMsg1, encryptedSkey, &dec_len,",
          "238:                           cur_share, s_shareG2, pubKeyB, t, n, i + 1 );",
          "239:     if (err_status != 0){",
          "240:       throw RPCException(-666, errMsg1);",
          "241:     }",
          "242:     if (printDebugInfo) {",
          "243:       spdlog::debug(\"cur_share is {}\", cur_share);",
          "246:     result += cur_share;",
          "249:     if (printDebugInfo) {",
          "250:       spdlog::debug(\"dec len is {}\", dec_len);",
          "251:     }",
          "254:     carray2Hex(encryptedSkey, dec_len, hexEncrKey);",
          "257:     string dhKeyName = \"DKG_DH_KEY_\" + polyName + \"_\" + to_string(i) + \":\";",
          "259:     spdlog::debug(\"hexEncr DH Key: { }\" , hexEncrKey);",
          "260:     SGXWalletServer::writeDataToDB(dhKeyName, hexEncrKey);",
          "262:     string shareG2_name = \"shareG2_\" + polyName + \"_\" + to_string(i) + \":\";",
          "263:     if (printDebugInfo) {",
          "264:       spdlog::debug(\"name to write to db is {}\", dhKeyName);",
          "265:       spdlog::debug(\"name to write to db is {}\", shareG2_name);",
          "266:       spdlog::debug(\"s_shareG2: {}\", s_shareG2);",
          "267:     }",
          "268:     SGXWalletServer::writeDataToDB(shareG2_name, s_shareG2);",
          "270:     if (printDebugInfo) {",
          "271:       spdlog::debug(\"errMsg: {}\", errMsg1);",
          "276:   }",
          "283:   return result;",
          "286: bool VerifyShares(const char* publicShares, const char* encr_sshare, const char * encryptedKeyHex, int t, int n, int ind ){",
          "291:     uint64_t dec_key_len ;",
          "294:     if (!hex2carray(encryptedKeyHex, &dec_key_len, encr_key)){",
          "298:     if (printDebugInfo) {",
          "299:       cerr << \"encryptedKeyHex \" << encryptedKeyHex << endl;",
          "300:       cerr << \"dec_key_len \" << dec_key_len << endl;",
          "301:       cerr << \"encr_sshare length is \" << strlen(encr_sshare) << endl;",
          "303:       spdlog::debug(\"publicShares length is {}\", char_traits<char>::length(publicShares));",
          "304:     }",
          "307:     strncpy(pshares, publicShares, strlen(publicShares) );",
          "311:       dkg_verification(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "313:       dkg_verification_aes(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "315:     if (result == 2){",
          "316:       throw RPCException(INVALID_HEX, \"Invalid public shares\");",
          "319:     if (printDebugInfo) {",
          "320:       spdlog::debug(\"errMsg1: {}\", errMsg1);",
          "321:       spdlog::debug(\"result is: {}\", result);",
          "322:     }",
          "329: bool CreateBLSShare( const string& blsKeyName, const char * s_shares, const char * encryptedKeyHex){",
          "330:   if (printDebugInfo) {",
          "332:   }",
          "334:   char errMsg1[BUF_LEN];",
          "335:   int err_status = 0;",
          "337:   uint64_t dec_key_len ;",
          "338:   uint8_t encr_bls_key[BUF_LEN];",
          "339:   memset(encr_bls_key, 0, BUF_LEN);",
          "340:   uint8_t encr_key[BUF_LEN];",
          "341:   memset(encr_key, 0, BUF_LEN);",
          "342:   if (!hex2carray(encryptedKeyHex, &dec_key_len, encr_key)){",
          "343:       throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "344:   }",
          "346:   uint32_t enc_bls_len = 0;",
          "349:   if (!encryptKeys)",
          "350:     create_bls_key(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "351:   else",
          "352:     create_bls_key_aes(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "354:   if ( err_status != 0){",
          "356:      spdlog::error(errMsg1);",
          "357:      spdlog::error(\"status {}\", err_status);",
          "358:      throw RPCException(ERROR_IN_ENCLAVE, \"Create BLS private key failed in enclave\");",
          "359:   }",
          "360:   else {",
          "362:     char hexBLSKey[2 * BUF_LEN];",
          "366:     carray2Hex(encr_bls_key, enc_bls_len, hexBLSKey);",
          "368:     SGXWalletServer::writeDataToDB(blsKeyName, hexBLSKey);",
          "369:     if (printDebugInfo) {",
          "370:       spdlog::debug(\"hexBLSKey length is {}\", char_traits<char>::length(hexBLSKey));",
          "371:       spdlog::debug(\"bls key {}\", blsKeyName, \" is \", hexBLSKey );",
          "374:     return true;",
          "375:   }",
          "379: vector<string> GetBLSPubKey(const char * encryptedKeyHex){",
          "385:     uint64_t dec_key_len ;",
          "387:     if (!hex2carray(encryptedKeyHex, &dec_key_len, encr_key)){",
          "392:     if (printDebugInfo) {",
          "393:       spdlog::debug(\"dec_key_len is {}\", dec_key_len);",
          "394:     }",
          "397:       get_bls_pub_key(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "399:       get_bls_pub_key_aes(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "400:     if ( err_status != 0){",
          "401:       std::cerr <<  errMsg1 << \" status is \" << err_status << std::endl;",
          "402:       throw RPCException(ERROR_IN_ENCLAVE, \"Failed to get BLS public key in enclave\");",
          "406:     if (printDebugInfo) {",
          "407:       spdlog::debug(\"errMsg1 is {}\", errMsg1);",
          "408:       spdlog::debug(\"pub key is \");",
          "409:       for (int i = 0; i < 4; i++)",
          "411:     }",
          "415: string decrypt_DHKey(const string& polyName, int ind){",
          "417:   vector<char> errMsg1(1024,0);",
          "418:   int err_status = 0;",
          "420:   string DH_key_name = polyName + \"_\" + to_string(ind) + \":\";",
          "421:   shared_ptr<string> hexEncrKey_ptr = SGXWalletServer::readFromDb(DH_key_name, \"DKG_DH_KEY_\");",
          "422:   if (printDebugInfo) {",
          "424:   }",
          "426:   vector<char> hexEncrKey(2 * BUF_LEN, 0);",
          "428:   uint64_t DH_enc_len = 0;",
          "429:   uint8_t encrypted_DHkey[BUF_LEN];",
          "430:   if (!hex2carray(hexEncrKey_ptr->c_str(), &DH_enc_len, encrypted_DHkey)){",
          "431:      throw RPCException(INVALID_HEX, \"Invalid hexEncrKey\");",
          "432:   }",
          "433:   if (printDebugInfo) {",
          "436:   }",
          "438:   char DHKey[ECDSA_SKEY_LEN];",
          "440:   if ( !encryptKeys)",
          "441:     decrypt_key(eid, &err_status, errMsg1.data(), encrypted_DHkey, DH_enc_len, DHKey);",
          "442:   else",
          "443:     decrypt_key_aes(eid, &err_status, errMsg1.data(), encrypted_DHkey, DH_enc_len, DHKey);",
          "444:   if (err_status != 0){",
          "445:     throw RPCException(/*ERROR_IN_ENCLAVE*/ err_status, \"decrypt key failed in enclave\");",
          "446:   }",
          "448:   return DHKey;",
          "451: vector<string> mult_G2(const string& x){",
          "",
          "[Added Lines]",
          "111: vector<vector<string>> get_verif_vect(const char *encryptedPolyHex, int t, int n) {",
          "113:     char *errMsg1 = (char *) calloc(1024, 1);",
          "115:     int err_status = 0;",
          "121:     char *public_shares = (char *) calloc(10000, 1);",
          "122:     memset(public_shares, 0, 10000);",
          "125:     uint64_t enc_len = 0;",
          "127:     uint8_t *encr_dkg_poly = (uint8_t *) calloc(DKG_MAX_SEALED_LEN * 2, 1);",
          "128:     memset(encr_dkg_poly, 0, DKG_MAX_SEALED_LEN * 2);",
          "131:     if (!hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100)) {",
          "132:         throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "133:     }",
          "140:     uint32_t len = 0;",
          "142:     if (!encryptKeys)",
          "143:         status = get_public_shares(eid, &err_status, errMsg1, encr_dkg_poly, len, public_shares, t, n);",
          "144:     else {",
          "146:         status = get_public_shares_aes(eid, &err_status, errMsg1, encr_dkg_poly, enc_len, public_shares, t, n);",
          "147:     }",
          "148:     if (err_status != 0) {",
          "149:         throw RPCException(-666, errMsg1);",
          "150:     }",
          "156:     spdlog::debug(\"{}\", public_shares);;",
          "159:     vector<string> G2_strings = SplitString(public_shares, ',');",
          "160:     vector<vector<string>> pub_shares_vect;",
          "161:     for (uint64_t i = 0; i < G2_strings.size(); i++) {",
          "162:         vector<string> koef_str = SplitString(G2_strings.at(i).c_str(), ':');",
          "163:         pub_shares_vect.push_back(koef_str);",
          "164:     }",
          "166:     free(errMsg1);",
          "167:     free(public_shares);",
          "168:     free(encr_dkg_poly);",
          "170:     return pub_shares_vect;",
          "173: string get_secret_shares(const string &polyName, const char *encryptedPolyHex, const vector<string> &publicKeys, int t,",
          "174:                          int n) {",
          "176:     char errMsg1[BUF_LEN];",
          "177:     int err_status = 0;",
          "178:     char hexEncrKey[BUF_LEN];",
          "179:     memset(hexEncrKey, 0, BUF_LEN);",
          "180:     uint64_t enc_len = 0;",
          "183:     uint8_t encr_dkg_poly[DKG_MAX_SEALED_LEN];",
          "184:     memset(encr_dkg_poly, 0, DKG_MAX_SEALED_LEN);",
          "185:     if (!hex2carray2(encryptedPolyHex, &enc_len, encr_dkg_poly, 6100)) {",
          "186:         throw RPCException(INVALID_HEX, \"Invalid encryptedPolyHex\");",
          "189:     std::cerr << \"enc_len is \" << enc_len << std::endl;",
          "192:         status = set_encrypted_dkg_poly(eid, &err_status, errMsg1, encr_dkg_poly);",
          "194:         status = set_encrypted_dkg_poly_aes(eid, &err_status, errMsg1, encr_dkg_poly, &enc_len);",
          "196:     if (status != SGX_SUCCESS || err_status != 0) {",
          "197:         throw RPCException(-666, errMsg1);",
          "200:     string result;",
          "203:     for (int i = 0; i < n; i++) {",
          "204:         uint8_t encryptedSkey[BUF_LEN];",
          "205:         memset(encryptedSkey, 0, BUF_LEN);",
          "206:         uint32_t dec_len;",
          "208:         char cur_share[193];",
          "209:         char s_shareG2[320];",
          "210:         string pub_keyB = publicKeys.at(i);//publicKeys.substr(128*i, 128*i + 128);",
          "214:         char pubKeyB[129];",
          "215:         strncpy(pubKeyB, pub_keyB.c_str(), 128);",
          "216:         pubKeyB[128] = 0;",
          "218:         spdlog::debug(\"pubKeyB is {}\", pub_keyB);",
          "221:         if (!encryptKeys)",
          "222:             get_encr_sshare(eid, &err_status, errMsg1, encryptedSkey, &dec_len,",
          "223:                             cur_share, s_shareG2, pubKeyB, t, n, i + 1);",
          "224:         else",
          "225:             get_encr_sshare_aes(eid, &err_status, errMsg1, encryptedSkey, &dec_len,",
          "226:                                 cur_share, s_shareG2, pubKeyB, t, n, i + 1);",
          "227:         if (err_status != 0) {",
          "228:             throw RPCException(-666, errMsg1);",
          "229:         }",
          "231:         spdlog::debug(\"cur_share is {}\", cur_share);",
          "234:         result += cur_share;",
          "236:         spdlog::debug(\"dec len is {}\", dec_len);",
          "237:         carray2Hex(encryptedSkey, dec_len, hexEncrKey);",
          "238:         string dhKeyName = \"DKG_DH_KEY_\" + polyName + \"_\" + to_string(i) + \":\";",
          "240:         spdlog::debug(\"hexEncr DH Key: { }\", hexEncrKey);",
          "241:         SGXWalletServer::writeDataToDB(dhKeyName, hexEncrKey);",
          "243:         string shareG2_name = \"shareG2_\" + polyName + \"_\" + to_string(i) + \":\";",
          "244:         spdlog::debug(\"name to write to db is {}\", dhKeyName);",
          "245:         spdlog::debug(\"name to write to db is {}\", shareG2_name);",
          "246:         spdlog::debug(\"s_shareG2: {}\", s_shareG2);",
          "248:         SGXWalletServer::writeDataToDB(shareG2_name, s_shareG2);",
          "250:         spdlog::debug(\"errMsg: {}\", errMsg1);",
          "259:     return result;",
          "262: bool",
          "263: VerifyShares(const char *publicShares, const char *encr_sshare, const char *encryptedKeyHex, int t, int n, int ind) {",
          "268:     uint64_t dec_key_len;",
          "271:     if (!hex2carray(encryptedKeyHex, &dec_key_len, encr_key)) {",
          "275:     cerr << \"encryptedKeyHex \" << encryptedKeyHex << endl;",
          "276:     cerr << \"dec_key_len \" << dec_key_len << endl;",
          "277:     cerr << \"encr_sshare length is \" << strlen(encr_sshare) << endl;",
          "279:     spdlog::debug(\"publicShares length is {}\", char_traits<char>::length(publicShares));",
          "283:     strncpy(pshares, publicShares, strlen(publicShares));",
          "287:         dkg_verification(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "289:         dkg_verification_aes(eid, &err_status, errMsg1, pshares, encr_sshare, encr_key, dec_key_len, t, ind, &result);",
          "291:     if (result == 2) {",
          "292:         throw RPCException(INVALID_HEX, \"Invalid public shares\");",
          "295:     spdlog::debug(\"errMsg1: {}\", errMsg1);",
          "296:     spdlog::debug(\"result is: {}\", result);",
          "303: bool CreateBLSShare(const string &blsKeyName, const char *s_shares, const char *encryptedKeyHex) {",
          "308:     char errMsg1[BUF_LEN];",
          "309:     int err_status = 0;",
          "311:     uint64_t dec_key_len;",
          "312:     uint8_t encr_bls_key[BUF_LEN];",
          "313:     memset(encr_bls_key, 0, BUF_LEN);",
          "314:     uint8_t encr_key[BUF_LEN];",
          "315:     memset(encr_key, 0, BUF_LEN);",
          "316:     if (!hex2carray(encryptedKeyHex, &dec_key_len, encr_key)) {",
          "317:         throw RPCException(INVALID_HEX, \"Invalid encryptedKeyHex\");",
          "318:     }",
          "320:     uint32_t enc_bls_len = 0;",
          "323:     if (!encryptKeys)",
          "324:         create_bls_key(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "325:     else",
          "326:         create_bls_key_aes(eid, &err_status, errMsg1, s_shares, encr_key, dec_key_len, encr_bls_key, &enc_bls_len);",
          "328:     if (err_status != 0) {",
          "330:         spdlog::error(errMsg1);",
          "331:         spdlog::error(\"status {}\", err_status);",
          "332:         throw RPCException(ERROR_IN_ENCLAVE, \"Create BLS private key failed in enclave\");",
          "333:     } else {",
          "335:         char hexBLSKey[2 * BUF_LEN];",
          "339:         carray2Hex(encr_bls_key, enc_bls_len, hexBLSKey);",
          "341:         SGXWalletServer::writeDataToDB(blsKeyName, hexBLSKey);",
          "343:         spdlog::debug(\"hexBLSKey length is {}\", char_traits<char>::length(hexBLSKey));",
          "344:         spdlog::debug(\"bls key {}\", blsKeyName, \" is \", hexBLSKey);",
          "347:         return true;",
          "352: vector<string> GetBLSPubKey(const char *encryptedKeyHex) {",
          "358:     uint64_t dec_key_len;",
          "360:     if (!hex2carray(encryptedKeyHex, &dec_key_len, encr_key)) {",
          "365:     spdlog::debug(\"dec_key_len is {}\", dec_key_len);",
          "368:         get_bls_pub_key(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "370:         get_bls_pub_key_aes(eid, &err_status, errMsg1, encr_key, dec_key_len, pub_key);",
          "371:     if (err_status != 0) {",
          "372:         std::cerr << errMsg1 << \" status is \" << err_status << std::endl;",
          "373:         throw RPCException(ERROR_IN_ENCLAVE, \"Failed to get BLS public key in enclave\");",
          "377:     spdlog::debug(\"errMsg1 is {}\", errMsg1);",
          "378:     spdlog::debug(\"pub key is \");",
          "379:     for (int i = 0; i < 4; i++)",
          "385: string decrypt_DHKey(const string &polyName, int ind) {",
          "387:     vector<char> errMsg1(1024, 0);",
          "388:     int err_status = 0;",
          "390:     string DH_key_name = polyName + \"_\" + to_string(ind) + \":\";",
          "391:     shared_ptr<string> hexEncrKey_ptr = SGXWalletServer::readFromDb(DH_key_name, \"DKG_DH_KEY_\");",
          "395:     vector<char> hexEncrKey(2 * BUF_LEN, 0);",
          "397:     uint64_t DH_enc_len = 0;",
          "398:     uint8_t encrypted_DHkey[BUF_LEN];",
          "399:     if (!hex2carray(hexEncrKey_ptr->c_str(), &DH_enc_len, encrypted_DHkey)) {",
          "400:         throw RPCException(INVALID_HEX, \"Invalid hexEncrKey\");",
          "401:     }",
          "406:     char DHKey[ECDSA_SKEY_LEN];",
          "408:     if (!encryptKeys)",
          "409:         decrypt_key(eid, &err_status, errMsg1.data(), encrypted_DHkey, DH_enc_len, DHKey);",
          "410:     else",
          "411:         decrypt_key_aes(eid, &err_status, errMsg1.data(), encrypted_DHkey, DH_enc_len, DHKey);",
          "412:     if (err_status != 0) {",
          "413:         throw RPCException(/*ERROR_IN_ENCLAVE*/ err_status, \"decrypt key failed in enclave\");",
          "414:     }",
          "416:     return DHKey;",
          "419: vector<string> mult_G2(const string &x) {",
          "",
          "---------------"
        ],
        "ECDSACrypto.cpp||ECDSACrypto.cpp": [
          "File: ECDSACrypto.cpp -> ECDSACrypto.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "61:         throw RPCException(status, errMsg);",
          "62:     }",
          "63:     std::vector<std::string> keys(3);",
          "65:         std::cerr << \"account key is \" << errMsg << std::endl;",
          "66:         std::cerr << \"enc_len is \" << enc_len << std::endl;",
          "71:     char *hexEncrKey = (char *) calloc(BUF_LEN * 2, 1);",
          "72:     carray2Hex(encr_pr_key, enc_len, hexEncrKey);",
          "73:     keys.at(0) = hexEncrKey;",
          "",
          "[Removed Lines]",
          "64:     if (printDebugInfo) {",
          "70:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "79:     unsigned long seed = randGen();",
          "81:         spdlog::debug(\"seed is {}\", seed);",
          "82:         std::cerr << \"strlen is \" << strlen(hexEncrKey) << std::endl;",
          "84:     gmp_randstate_t state;",
          "85:     gmp_randinit_default(state);",
          "",
          "[Removed Lines]",
          "80:     if (printDebugInfo) {",
          "83:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "133:     }",
          "134:     string pubKey = string(pubKeyX.data()) + string(pubKeyY.data());//concatPubKeyWith0x(pub_key_x, pub_key_y);//",
          "137:         spdlog::debug(\"enc_len is {}\", enc_len);",
          "138:         spdlog::debug(\"pubkey is {}\", pubKey);",
          "139:         spdlog::debug(\"pubkey length is {}\", pubKey.length());",
          "140:         spdlog::debug(\"err str is {}\", errMsg.data());",
          "141:         spdlog::debug(\"err status is {}\", err_status);",
          "144:     return pubKey;",
          "145: }",
          "",
          "[Removed Lines]",
          "136:     if (printDebugInfo) {",
          "142:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "LevelDB.cpp||LevelDB.cpp": [
          "File: LevelDB.cpp -> LevelDB.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "63:     auto status = db->Get(readOptions, _key, &*result);",
          "66:       spdlog::debug(\"key to read from db: {}\",_key );",
          "70:     throwExceptionOnError(status);",
          "",
          "[Removed Lines]",
          "65:     if (printDebugInfo) {",
          "68:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "84:     throwExceptionOnError(status);",
          "87:         spdlog::debug(\"written key: {}\",_key );",
          "90: }",
          "",
          "[Removed Lines]",
          "86:     if (printDebugInfo) {",
          "89:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "101:     throwExceptionOnError(status);",
          "104:       spdlog::debug(\"key deleted: {}\",full_key );",
          "107: }",
          "109: void LevelDB::deleteTempNEK(const string &_key){",
          "",
          "[Removed Lines]",
          "103:     if (printDebugInfo) {",
          "106:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "131:     throwExceptionOnError(status);",
          "134:       spdlog::debug(\"key deleted: {}\",_key );",
          "137: }",
          "",
          "[Removed Lines]",
          "133:     if (printDebugInfo) {",
          "136:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "219:   }",
          "221:   writeString(key, value);",
          "223:       spdlog::debug(\"{}\",Name, \" is written to db\");",
          "226: }",
          "",
          "[Removed Lines]",
          "222:   if (printDebugInfo) {",
          "225:   }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "SEKManager.cpp||SEKManager.cpp": [
          "File: SEKManager.cpp -> SEKManager.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "231:     gen_SEK();",
          "232:   }",
          "233:   else{",
          "236:     set_SEK(encr_SEK_ptr);",
          "237:   }",
          "238: }",
          "",
          "[Removed Lines]",
          "234:     if (printDebugInfo)",
          "235:       spdlog::info(\"going to set SEK from db\" );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "ServerInit.cpp||ServerInit.cpp": [
          "File: ServerInit.cpp -> ServerInit.cpp",
          "--- Hunk 1 ---",
          "[Context before]",
          "77:     }",
          "78: #endif",
          "81:         spdlog::debug(\"SGX_DEBUG_FLAG = {}\", SGX_DEBUG_FLAG);",
          "84:     status = sgx_create_enclave_search(ENCLAVE_NAME, SGX_DEBUG_FLAG, &token,",
          "85:                                        &updated, &eid, 0);",
          "",
          "[Removed Lines]",
          "80:     if (printDebugInfo) {",
          "82:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}