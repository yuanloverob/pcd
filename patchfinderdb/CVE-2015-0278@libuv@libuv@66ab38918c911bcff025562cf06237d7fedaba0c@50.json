{
  "cve_id": "CVE-2015-0278",
  "cve_desc": "libuv before 0.10.34 does not properly drop group privileges, which allows context-dependent attackers to gain privileges via unspecified vectors.",
  "repo": "libuv/libuv",
  "patch_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
  "patch_info": {
    "commit_hash": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "repo": "libuv/libuv",
    "commit_url": "https://github.com/libuv/libuv/commit/66ab38918c911bcff025562cf06237d7fedaba0c",
    "files": [
      "src/unix/process.c"
    ],
    "message": "unix: call setgoups before calling setuid/setgid\n\nPartial fix for #1093",
    "before_after_code_files": [
      "src/unix/process.c||src/unix/process.c"
    ]
  },
  "patch_diff": {
    "src/unix/process.c||src/unix/process.c": [
      "File: src/unix/process.c -> src/unix/process.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "330:     _exit(127);",
      "331:   }",
      "333:   if ((options->flags & UV_PROCESS_SETGID) && setgid(options->gid)) {",
      "334:     uv__write_int(error_fd, -errno);",
      "335:     perror(\"setgid()\");",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "333:   if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID)) {",
      "341:     SAVE_ERRNO(setgroups(0, NULL));",
      "342:   }",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0ee3ce98e49d9a674305a70b169ee44ec134ecc9",
      "candidate_info": {
        "commit_hash": "0ee3ce98e49d9a674305a70b169ee44ec134ecc9",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/0ee3ce98e49d9a674305a70b169ee44ec134ecc9",
        "files": [
          "src/unix/fsevents.c",
          "src/unix/stream.c"
        ],
        "message": "osx: fix compilation warning\n\nRemove leftover status argument uv_async_t callbacks",
        "before_after_code_files": [
          "src/unix/fsevents.c||src/unix/fsevents.c",
          "src/unix/stream.c||src/unix/stream.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/unix/fsevents.c||src/unix/fsevents.c": [
          "File: src/unix/fsevents.c -> src/unix/fsevents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "181:   uv_fs_event_t* handle;",
          "183:   handle = cb->data;",
          "",
          "[Removed Lines]",
          "180: static void uv__fsevents_cb(uv_async_t* cb, int status) {",
          "",
          "[Added Lines]",
          "180: static void uv__fsevents_cb(uv_async_t* cb) {",
          "",
          "---------------"
        ],
        "src/unix/stream.c||src/unix/stream.c": [
          "File: src/unix/stream.c -> src/unix/stream.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "224: }",
          "228:   uv__stream_select_t* s;",
          "229:   uv_stream_t* stream;",
          "230:   int events;",
          "",
          "[Removed Lines]",
          "227: static void uv__stream_osx_select_cb(uv_async_t* handle, int status) {",
          "",
          "[Added Lines]",
          "227: static void uv__stream_osx_select_cb(uv_async_t* handle) {",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "416b7335fcc089b15eec6221b3d2f8c7108c6ce7",
      "candidate_info": {
        "commit_hash": "416b7335fcc089b15eec6221b3d2f8c7108c6ce7",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/416b7335fcc089b15eec6221b3d2f8c7108c6ce7",
        "files": [
          "src/win/poll.c"
        ],
        "message": "windows: return libuv error codes in uv_poll_init()\n\nCloses #1518",
        "before_after_code_files": [
          "src/win/poll.c||src/win/poll.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/win/poll.c||src/win/poll.c": [
          "File: src/win/poll.c -> src/win/poll.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "530:                  SO_PROTOCOL_INFOW,",
          "531:                  (char*) &protocol_info,",
          "532:                  &len) != 0) {",
          "534:   }",
          "",
          "[Removed Lines]",
          "533:     return WSAGetLastError();",
          "",
          "[Added Lines]",
          "533:     return uv_translate_sys_error(WSAGetLastError());",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "589c224d4c2e79fec65db01d361948f1e4976858",
      "candidate_info": {
        "commit_hash": "589c224d4c2e79fec65db01d361948f1e4976858",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/589c224d4c2e79fec65db01d361948f1e4976858",
        "files": [
          ".mailmap",
          "AUTHORS",
          "ChangeLog",
          "src/version.c"
        ],
        "message": "2013.12.32, Version 0.11.17 (Unstable)\n\nChanges since version 0.11.16:\n\n* stream: allow multiple buffers for uv_try_write (Fedor Indutny)\n\n* unix: fix a possible memory leak in uv_fs_readdir (Alex Crichton)\n\n* unix, windows: add uv_loop_alive() function (Sam Roberts)\n\n* windows: avoid assertion failure when pipe server is closed (Bert\n  Belder)\n\n* osx: Fix a possible segfault in uv__io_poll (Alex Crichton)\n\n* stream: fix uv__stream_osx_select (Fedor Indutny)",
        "before_after_code_files": [
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "32: #define UV_VERSION_MAJOR 0",
          "33: #define UV_VERSION_MINOR 11",
          "34: #define UV_VERSION_PATCH 17",
          "38: #define UV_VERSION  ((UV_VERSION_MAJOR << 16) | \\",
          "",
          "[Removed Lines]",
          "35: #define UV_VERSION_IS_RELEASE 0",
          "",
          "[Added Lines]",
          "35: #define UV_VERSION_IS_RELEASE 1",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9d44d786ada6cf94e1bdcee7d777c790ca712a78",
      "candidate_info": {
        "commit_hash": "9d44d786ada6cf94e1bdcee7d777c790ca712a78",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/9d44d786ada6cf94e1bdcee7d777c790ca712a78",
        "files": [
          "include/uv.h",
          "src/unix/aix.c",
          "src/unix/fsevents.c",
          "src/unix/kqueue.c",
          "src/unix/linux-inotify.c",
          "src/unix/sunos.c",
          "src/win/fs-event.c",
          "test/test-fs-event.c",
          "test/test-ref.c"
        ],
        "message": "unix, windows: add uv_fs_event_start/stop functions\n\nMake uv_fs_event behave like other handles, that is, it's inactive after\ninit, and it's active between start and stop.",
        "before_after_code_files": [
          "include/uv.h||include/uv.h",
          "src/unix/aix.c||src/unix/aix.c",
          "src/unix/fsevents.c||src/unix/fsevents.c",
          "src/unix/kqueue.c||src/unix/kqueue.c",
          "src/unix/linux-inotify.c||src/unix/linux-inotify.c",
          "src/unix/sunos.c||src/unix/sunos.c",
          "src/win/fs-event.c||src/win/fs-event.c",
          "test/test-fs-event.c||test/test-fs-event.c",
          "test/test-ref.c||test/test-ref.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "include/uv.h||include/uv.h": [
          "File: include/uv.h -> include/uv.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "1880: };",
          "",
          "[Removed Lines]",
          "1883: UV_EXTERN int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle,",
          "1884:     const char* filename, uv_fs_event_cb cb, int flags);",
          "",
          "[Added Lines]",
          "1880: UV_EXTERN int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle);",
          "1882: UV_EXTERN int uv_fs_event_start(uv_fs_event_t* handle,",
          "1883:                                 uv_fs_event_cb cb,",
          "1884:                                 const char* filename,",
          "1885:                                 unsigned int flags);",
          "1887: UV_EXTERN int uv_fs_event_stop(uv_fs_event_t* handle);",
          "",
          "---------------"
        ],
        "src/unix/aix.c||src/unix/aix.c": [
          "File: src/unix/aix.c -> src/unix/aix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "128: }",
          "137:   return -ENOSYS;",
          "138: }",
          "",
          "[Removed Lines]",
          "131: int uv_fs_event_init(uv_loop_t* loop,",
          "132:                      uv_fs_event_t* handle,",
          "133:                      const char* filename,",
          "134:                      uv_fs_event_cb cb,",
          "135:                      int flags) {",
          "136:   loop->counters.fs_event_init++;",
          "",
          "[Added Lines]",
          "131: int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle) {",
          "132:   return -ENOSYS;",
          "133: }",
          "136: int uv_fs_event_start(uv_fs_event_t* handle,",
          "137:                       uv_fs_event_cb cb,",
          "138:                       const char* filename,",
          "139:                       unsigned int flags) {",
          "140:   return -ENOSYS;",
          "141: }",
          "144: int uv_fs_event_stop(uv_fs_event_t* handle) {",
          "",
          "---------------"
        ],
        "src/unix/fsevents.c||src/unix/fsevents.c": [
          "File: src/unix/fsevents.c -> src/unix/fsevents.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "414:     uv_sem_post(&state->fsevent_sem);",
          "415: }",
          "",
          "[Removed Lines]",
          "413:   if (uv__is_closing(handle))",
          "",
          "[Added Lines]",
          "413:   if (!uv__is_active(handle))",
          "",
          "---------------"
        ],
        "src/unix/kqueue.c||src/unix/kqueue.c": [
          "File: src/unix/kqueue.c -> src/unix/kqueue.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "296: }",
          "304: #if defined(__APPLE__)",
          "305:   struct stat statbuf;",
          "307:   int fd;",
          "310:   fd = open(filename, O_RDONLY);",
          "311:   if (fd == -1)",
          "312:     return -errno;",
          "316:   uv__io_init(&handle->event_watcher, uv__fs_event, fd);",
          "317:   handle->filename = strdup(filename);",
          "318:   handle->cb = cb;",
          "",
          "[Removed Lines]",
          "299: int uv_fs_event_init(uv_loop_t* loop,",
          "300:                      uv_fs_event_t* handle,",
          "301:                      const char* filename,",
          "302:                      uv_fs_event_cb cb,",
          "303:                      int flags) {",
          "314:   uv__handle_init(loop, (uv_handle_t*)handle, UV_FS_EVENT);",
          "",
          "[Added Lines]",
          "299: int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle) {",
          "300:   uv__handle_init(loop, (uv_handle_t*)handle, UV_FS_EVENT);",
          "301:   return 0;",
          "302: }",
          "305: int uv_fs_event_start(uv_fs_event_t* handle,",
          "306:                       uv_fs_event_cb cb,",
          "307:                       const char* filename,",
          "308:                       unsigned int flags) {",
          "314:   if (uv__is_active(handle))",
          "315:     return -EINVAL;",
          "322:   uv__handle_start(handle);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "335: fallback:",
          "340:   return 0;",
          "341: }",
          "345: #if defined(__APPLE__)",
          "346:   if (uv__fsevents_close(handle))",
          "347:     uv__io_stop(handle->loop, &handle->event_watcher, UV__POLLIN);",
          "",
          "[Removed Lines]",
          "338:   uv__io_start(loop, &handle->event_watcher, UV__POLLIN);",
          "344: void uv__fs_event_close(uv_fs_event_t* handle) {",
          "",
          "[Added Lines]",
          "345:   uv__io_start(handle->loop, &handle->event_watcher, UV__POLLIN);",
          "351: int uv_fs_event_stop(uv_fs_event_t* handle) {",
          "352:   if (!uv__is_active(handle))",
          "353:     return -EINVAL;",
          "355:   uv__handle_stop(handle);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "349:   uv__io_stop(handle->loop, &handle->event_watcher, UV__POLLIN);",
          "354:   free(handle->filename);",
          "355:   handle->filename = NULL;",
          "357:   uv__close(handle->event_watcher.fd);",
          "358:   handle->event_watcher.fd = -1;",
          "359: }",
          "",
          "[Removed Lines]",
          "352:   uv__handle_stop(handle);",
          "",
          "[Added Lines]",
          "370:   return 0;",
          "371: }",
          "374: void uv__fs_event_close(uv_fs_event_t* handle) {",
          "375:   uv_fs_event_stop(handle);",
          "",
          "---------------"
        ],
        "src/unix/linux-inotify.c||src/unix/linux-inotify.c": [
          "File: src/unix/linux-inotify.c -> src/unix/linux-inotify.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "168: }",
          "176:   struct watcher_list* w;",
          "177:   int events;",
          "178:   int err;",
          "179:   int wd;",
          "182:   if (err)",
          "183:     return err;",
          "",
          "[Removed Lines]",
          "171: int uv_fs_event_init(uv_loop_t* loop,",
          "172:                      uv_fs_event_t* handle,",
          "173:                      const char* path,",
          "174:                      uv_fs_event_cb cb,",
          "175:                      int flags) {",
          "181:   err = init_inotify(loop);",
          "",
          "[Added Lines]",
          "171: int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle) {",
          "172:   uv__handle_init(loop, (uv_handle_t*)handle, UV_FS_EVENT);",
          "173:   return 0;",
          "174: }",
          "177: int uv_fs_event_start(uv_fs_event_t* handle,",
          "178:                       uv_fs_event_cb cb,",
          "179:                       const char* path,",
          "180:                       unsigned int flags) {",
          "186:   if (uv__is_active(handle))",
          "187:     return -EINVAL;",
          "189:   err = init_inotify(handle->loop);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "191:          | UV__IN_MOVED_FROM",
          "192:          | UV__IN_MOVED_TO;",
          "195:   if (wd == -1)",
          "196:     return -errno;",
          "199:   if (w)",
          "200:     goto no_insert;",
          "",
          "[Removed Lines]",
          "194:   wd = uv__inotify_add_watch(loop->inotify_fd, path, events);",
          "198:   w = find_watcher(loop, wd);",
          "",
          "[Added Lines]",
          "202:   wd = uv__inotify_add_watch(handle->loop->inotify_fd, path, events);",
          "206:   w = find_watcher(handle->loop, wd);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "206:   w->wd = wd;",
          "207:   w->path = strcpy((char*)(w + 1), path);",
          "208:   QUEUE_INIT(&w->watchers);",
          "211: no_insert:",
          "214:   QUEUE_INSERT_TAIL(&w->watchers, &handle->watchers);",
          "215:   handle->filename = w->path;",
          "216:   handle->cb = cb;",
          "",
          "[Removed Lines]",
          "209:   RB_INSERT(watcher_root, CAST(&loop->inotify_watchers), w);",
          "212:   uv__handle_init(loop, (uv_handle_t*)handle, UV_FS_EVENT);",
          "",
          "[Added Lines]",
          "217:   RB_INSERT(watcher_root, CAST(&handle->loop->inotify_watchers), w);",
          "220:   uv__handle_start(handle);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "220: }",
          "224:   struct watcher_list* w;",
          "226:   w = find_watcher(handle->loop, handle->wd);",
          "227:   assert(w != NULL);",
          "",
          "[Removed Lines]",
          "223: void uv__fs_event_close(uv_fs_event_t* handle) {",
          "",
          "[Added Lines]",
          "230: int uv_fs_event_stop(uv_fs_event_t* handle) {",
          "233:   if (!uv__is_active(handle))",
          "234:     return -EINVAL;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "237:     uv__inotify_rm_watch(handle->loop->inotify_fd, w->wd);",
          "238:     free(w);",
          "239:   }",
          "240: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251:   return 0;",
          "252: }",
          "255: void uv__fs_event_close(uv_fs_event_t* handle) {",
          "256:   uv_fs_event_stop(handle);",
          "",
          "---------------"
        ],
        "src/unix/sunos.c||src/unix/sunos.c": [
          "File: src/unix/sunos.c -> src/unix/sunos.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "352: }",
          "360:   int portfd;",
          "364:     portfd = port_create();",
          "365:     if (portfd == -1)",
          "366:       return -errno;",
          "368:     first_run = 1;",
          "369:   }",
          "373:   handle->filename = strdup(filename);",
          "374:   handle->fd = PORT_UNUSED;",
          "375:   handle->cb = cb;",
          "",
          "[Removed Lines]",
          "355: int uv_fs_event_init(uv_loop_t* loop,",
          "356:                      uv_fs_event_t* handle,",
          "357:                      const char* filename,",
          "358:                      uv_fs_event_cb cb,",
          "359:                      int flags) {",
          "361:   int first_run = 0;",
          "363:   if (loop->fs_fd == -1) {",
          "367:     loop->fs_fd = portfd;",
          "371:   uv__handle_init(loop, (uv_handle_t*)handle, UV_FS_EVENT);",
          "",
          "[Added Lines]",
          "355: int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle) {",
          "356:   uv__handle_init(loop, (uv_handle_t*)handle, UV_FS_EVENT);",
          "357:   return 0;",
          "358: }",
          "361: int uv_fs_event_start(uv_fs_event_t* handle,",
          "362:                       uv_fs_event_cb cb,",
          "363:                       const char* filename,",
          "364:                       unsigned int flags) {",
          "366:   int first_run;",
          "368:   if (uv__is_active(handle))",
          "369:     return -EINVAL;",
          "371:   first_run = 0;",
          "372:   if (handle->loop->fs_fd == -1) {",
          "376:     handle->loop->fs_fd = portfd;",
          "380:   uv__handle_start(handle);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "381:   if (first_run) {",
          "384:   }",
          "386:   return 0;",
          "387: }",
          "391:   if (handle->fd == PORT_FIRED || handle->fd == PORT_LOADED) {",
          "392:     port_dissociate(handle->loop->fs_fd,",
          "393:                     PORT_SOURCE_FILE,",
          "394:                     (uintptr_t) &handle->fo);",
          "395:   }",
          "396:   handle->fd = PORT_DELETED;",
          "397:   free(handle->filename);",
          "398:   handle->filename = NULL;",
          "399:   handle->fo.fo_name = NULL;",
          "400:   uv__handle_stop(handle);",
          "401: }",
          "410:   return -ENOSYS;",
          "411: }",
          "",
          "[Removed Lines]",
          "382:     uv__io_init(&loop->fs_event_watcher, uv__fs_event_read, portfd);",
          "383:     uv__io_start(loop, &loop->fs_event_watcher, UV__POLLIN);",
          "390: void uv__fs_event_close(uv_fs_event_t* handle) {",
          "405: int uv_fs_event_init(uv_loop_t* loop,",
          "406:                      uv_fs_event_t* handle,",
          "407:                      const char* filename,",
          "408:                      uv_fs_event_cb cb,",
          "409:                      int flags) {",
          "",
          "[Added Lines]",
          "390:     uv__io_init(&handle->loop->fs_event_watcher, uv__fs_event_read, portfd);",
          "391:     uv__io_start(handle->loop, &handle->loop->fs_event_watcher, UV__POLLIN);",
          "398: int uv_fs_event_stop(uv_fs_event_t* handle) {",
          "399:   if (!uv__is_active(handle))",
          "400:     return -EINVAL;",
          "414:   return 0;",
          "415: }",
          "417: void uv__fs_event_close(uv_fs_event_t* handle) {",
          "418:   uv_fs_event_stop(handle);",
          "423: int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle) {",
          "424:   return -ENOSYS;",
          "425: }",
          "428: int uv_fs_event_start(uv_fs_event_t* handle,",
          "429:                       uv_fs_event_cb cb,",
          "430:                       const char* filename,",
          "431:                       unsigned int flags) {",
          "432:   return -ENOSYS;",
          "433: }",
          "436: int uv_fs_event_stop(uv_fs_event_t* handle) {",
          "",
          "---------------"
        ],
        "src/win/fs-event.c||src/win/fs-event.c": [
          "File: src/win/fs-event.c -> src/win/fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "34: const unsigned int uv_directory_watcher_buffer_size = 4096;",
          "61: static void uv_fs_event_queue_readdirchanges(uv_loop_t* loop,",
          "62:     uv_fs_event_t* handle) {",
          "63:   assert(handle->dir_handle != INVALID_HANDLE_VALUE);",
          "",
          "[Removed Lines]",
          "37: static void uv_fs_event_init_handle(uv_loop_t* loop, uv_fs_event_t* handle,",
          "38:     const char* filename, uv_fs_event_cb cb) {",
          "39:   uv__handle_init(loop, (uv_handle_t*) handle, UV_FS_EVENT);",
          "40:   handle->cb = cb;",
          "41:   handle->dir_handle = INVALID_HANDLE_VALUE;",
          "42:   handle->buffer = NULL;",
          "43:   handle->req_pending = 0;",
          "44:   handle->filew = NULL;",
          "45:   handle->short_filew = NULL;",
          "46:   handle->dirw = NULL;",
          "48:   uv_req_init(loop, (uv_req_t*)&handle->req);",
          "49:   handle->req.type = UV_FS_EVENT_REQ;",
          "50:   handle->req.data = (void*)handle;",
          "52:   handle->filename = strdup(filename);",
          "53:   if (!handle->filename) {",
          "54:     uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "55:   }",
          "57:   uv__handle_start(handle);",
          "58: }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "131: }",
          "136:   int name_size, is_path_dir;",
          "137:   DWORD attr, last_error;",
          "138:   WCHAR* dir = NULL, *dir_to_watch, *filenamew = NULL;",
          "139:   WCHAR short_path[MAX_PATH];",
          "144:   name_size = uv_utf8_to_utf16(filename, NULL, 0) * sizeof(WCHAR);",
          "",
          "[Removed Lines]",
          "134: int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle,",
          "135:     const char* filename, uv_fs_event_cb cb, int flags) {",
          "141:   uv_fs_event_init_handle(loop, handle, filename, cb);",
          "",
          "[Added Lines]",
          "110: int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle) {",
          "111:   uv__handle_init(loop, (uv_handle_t*) handle, UV_FS_EVENT);",
          "112:   handle->dir_handle = INVALID_HANDLE_VALUE;",
          "113:   handle->buffer = NULL;",
          "114:   handle->req_pending = 0;",
          "115:   handle->filew = NULL;",
          "116:   handle->short_filew = NULL;",
          "117:   handle->dirw = NULL;",
          "119:   uv_req_init(loop, (uv_req_t*)&handle->req);",
          "120:   handle->req.type = UV_FS_EVENT_REQ;",
          "121:   handle->req.data = handle;",
          "123:   return 0;",
          "124: }",
          "127: int uv_fs_event_start(uv_fs_event_t* handle,",
          "128:                       uv_fs_event_cb cb,",
          "129:                       const char* filename,",
          "130:                       unsigned int flags) {",
          "136:   if (uv__is_active(handle))",
          "137:     return UV_EINVAL;",
          "139:   handle->cb = cb;",
          "140:   handle->filename = strdup(filename);",
          "141:   if (!handle->filename) {",
          "142:     uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "143:   }",
          "145:   uv__handle_start(handle);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "213:   }",
          "215:   if (CreateIoCompletionPort(handle->dir_handle,",
          "217:                              (ULONG_PTR)handle,",
          "218:                              0) == NULL) {",
          "219:     last_error = GetLastError();",
          "220:     goto error;",
          "221:   }",
          "225:   if (!handle->buffer) {",
          "226:     uv_fatal_error(ERROR_OUTOFMEMORY, \"malloc\");",
          "227:   }",
          "",
          "[Removed Lines]",
          "216:                              loop->iocp,",
          "223:   handle->buffer = (char*)_aligned_malloc(uv_directory_watcher_buffer_size,",
          "224:     sizeof(DWORD));",
          "",
          "[Added Lines]",
          "220:                              handle->loop->iocp,",
          "227:   if (!handle->buffer) {",
          "228:     handle->buffer = (char*)_aligned_malloc(uv_directory_watcher_buffer_size,",
          "229:                                             sizeof(DWORD));",
          "230:   }",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "282: }",
          "285: void uv_process_fs_event_req(uv_loop_t* loop, uv_req_t* req,",
          "286:     uv_fs_event_t* handle) {",
          "287:   FILE_NOTIFY_INFORMATION* file_info;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "291: int uv_fs_event_stop(uv_fs_event_t* handle) {",
          "292:   if (!uv__is_active(handle))",
          "293:     return UV_EINVAL;",
          "295:   if (handle->dir_handle != INVALID_HANDLE_VALUE) {",
          "296:     CloseHandle(handle->dir_handle);",
          "297:     handle->dir_handle = INVALID_HANDLE_VALUE;",
          "298:   }",
          "300:   uv__handle_stop(handle);",
          "302:   if (handle->filew) {",
          "303:     free(handle->filew);",
          "304:     handle->filew = NULL;",
          "305:   }",
          "307:   if (handle->short_filew) {",
          "308:     free(handle->short_filew);",
          "309:     handle->short_filew = NULL;",
          "310:   }",
          "312:   if (handle->filename) {",
          "313:     free(handle->filename);",
          "314:     handle->filename = NULL;",
          "315:   }",
          "317:   if (handle->dirw) {",
          "318:     free(handle->dirw);",
          "319:     handle->dirw = NULL;",
          "320:   }",
          "322:   return 0;",
          "323: }",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "294:   assert(handle->req_pending);",
          "295:   handle->req_pending = 0;",
          "301:     return;",
          "304:   file_info = (FILE_NOTIFY_INFORMATION*)(handle->buffer + offset);",
          "",
          "[Removed Lines]",
          "299:   if (handle->flags & UV__HANDLE_CLOSING) {",
          "300:     uv_want_endgame(loop, (uv_handle_t*) handle);",
          "302:   };",
          "",
          "[Added Lines]",
          "342:   if (!uv__is_active(handle)) {",
          "343:     if (handle->flags & UV__HANDLE_CLOSING) {",
          "344:       uv_want_endgame(loop, (uv_handle_t*) handle);",
          "345:     }",
          "347:   }",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "458: void uv_fs_event_close(uv_loop_t* loop, uv_fs_event_t* handle) {",
          "464:   if (!handle->req_pending) {",
          "465:     uv_want_endgame(loop, (uv_handle_t*)handle);",
          "466:   }",
          "469: }",
          "472: void uv_fs_event_endgame(uv_loop_t* loop, uv_fs_event_t* handle) {",
          "475:     assert(!(handle->flags & UV_HANDLE_CLOSED));",
          "477:     if (handle->buffer) {",
          "",
          "[Removed Lines]",
          "459:   if (handle->dir_handle != INVALID_HANDLE_VALUE) {",
          "460:     CloseHandle(handle->dir_handle);",
          "461:     handle->dir_handle = INVALID_HANDLE_VALUE;",
          "462:   }",
          "468:   uv__handle_closing(handle);",
          "473:   if (handle->flags & UV__HANDLE_CLOSING &&",
          "474:       !handle->req_pending) {",
          "",
          "[Added Lines]",
          "504:   uv_fs_event_stop(handle);",
          "506:   uv__handle_closing(handle);",
          "516:   if ((handle->flags & UV__HANDLE_CLOSING) && !handle->req_pending) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "479:       handle->buffer = NULL;",
          "480:     }",
          "502:     uv__handle_close(handle);",
          "503:   }",
          "504: }",
          "",
          "[Removed Lines]",
          "482:     if (handle->filew) {",
          "483:       free(handle->filew);",
          "484:       handle->filew = NULL;",
          "485:     }",
          "487:     if (handle->short_filew) {",
          "488:       free(handle->short_filew);",
          "489:       handle->short_filew = NULL;",
          "490:     }",
          "492:     if (handle->filename) {",
          "493:       free(handle->filename);",
          "494:       handle->filename = NULL;",
          "495:     }",
          "497:     if (handle->dirw) {",
          "498:       free(handle->dirw);",
          "499:       handle->dirw = NULL;",
          "500:     }",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/test-fs-event.c||test/test-fs-event.c": [
          "File: test/test-fs-event.c -> test/test-fs-event.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "103:   ASSERT(status == 0);",
          "104:   ASSERT(events == UV_RENAME);",
          "105:   ASSERT(filename == NULL || strcmp(filename, \"file1\") == 0);",
          "106:   uv_close((uv_handle_t*)handle, close_cb);",
          "107: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "106:   ASSERT(0 == uv_fs_event_stop(handle));",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "113:   ASSERT(status == 0);",
          "114:   ASSERT(events == UV_CHANGE);",
          "115:   ASSERT(filename == NULL || strcmp(filename, \"file2\") == 0);",
          "116:   uv_close((uv_handle_t*)handle, close_cb);",
          "117: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "117:   ASSERT(0 == uv_fs_event_stop(handle));",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "187:   remove(\"watch_dir/\");",
          "188:   create_dir(loop, \"watch_dir\");",
          "191:   ASSERT(r == 0);",
          "192:   r = uv_timer_init(loop, &timer);",
          "193:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "190:   r = uv_fs_event_init(loop, &fs_event, \"watch_dir\", fs_event_cb_dir, 0);",
          "",
          "[Added Lines]",
          "192:   r = uv_fs_event_init(loop, &fs_event);",
          "193:   ASSERT(r == 0);",
          "194:   r = uv_fs_event_start(&fs_event, fs_event_cb_dir, \"watch_dir\", 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "221:   create_file(loop, \"watch_dir/file1\");",
          "222:   create_file(loop, \"watch_dir/file2\");",
          "225:   ASSERT(r == 0);",
          "226:   r = uv_timer_init(loop, &timer);",
          "227:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "224:   r = uv_fs_event_init(loop, &fs_event, \"watch_dir/file2\", fs_event_cb_file, 0);",
          "",
          "[Added Lines]",
          "228:   r = uv_fs_event_init(loop, &fs_event);",
          "229:   ASSERT(r == 0);",
          "230:   r = uv_fs_event_start(&fs_event, fs_event_cb_file, \"watch_dir/file2\", 0);",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "252:   loop = uv_default_loop();",
          "253:   timer.data = watchers;",
          "257:   ASSERT(0 == uv_timer_init(loop, &timer));",
          "258:   ASSERT(0 == uv_timer_start(&timer, timer_cb_watch_twice, 10, 0));",
          "259:   ASSERT(0 == uv_run(loop, UV_RUN_DEFAULT));",
          "",
          "[Removed Lines]",
          "255:   ASSERT(0 == uv_fs_event_init(loop, watchers + 0, path, fail_cb, 0));",
          "256:   ASSERT(0 == uv_fs_event_init(loop, watchers + 1, path, fail_cb, 0));",
          "",
          "[Added Lines]",
          "261:   ASSERT(0 == uv_fs_event_init(loop, watchers + 0));",
          "262:   ASSERT(0 == uv_fs_event_start(watchers + 0, fail_cb, path, 0));",
          "263:   ASSERT(0 == uv_fs_event_init(loop, watchers + 1));",
          "264:   ASSERT(0 == uv_fs_event_start(watchers + 1, fail_cb, path, 0));",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "273:   remove(\"watch_file\");",
          "274:   create_file(loop, \"watch_file\");",
          "278:   ASSERT(r == 0);",
          "280:   r = uv_timer_init(loop, &timer);",
          "281:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "276:   r = uv_fs_event_init(loop, &fs_event, \"watch_file\",",
          "277:     fs_event_cb_file_current_dir, 0);",
          "",
          "[Added Lines]",
          "284:   r = uv_fs_event_init(loop, &fs_event);",
          "285:   ASSERT(r == 0);",
          "286:   r = uv_fs_event_start(&fs_event,",
          "287:                         fs_event_cb_file_current_dir,",
          "288:                         \"watch_file\",",
          "289:                         0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "310:   create_dir(loop, \"watch_dir\");",
          "311:   create_file(loop, \"watch_dir/file1\");",
          "318:   ASSERT(r == 0);",
          "320:   uv_close((uv_handle_t*)&fs_event, close_cb);",
          "321:   touch_file(loop, \"watch_dir/file1\");",
          "322:   uv_run(loop, UV_RUN_DEFAULT);",
          "",
          "[Removed Lines]",
          "313:   r = uv_fs_event_init(loop,",
          "314:                        &fs_event,",
          "315:                        \"watch_dir/file1\",",
          "316:                        fs_event_cb_file,",
          "317:                        0);",
          "",
          "[Added Lines]",
          "326:   r = uv_fs_event_init(loop, &fs_event);",
          "327:   ASSERT(r == 0);",
          "328:   r = uv_fs_event_start(&fs_event,",
          "329:                         fs_event_cb_file,",
          "330:                         \"watch_dir/file1\",",
          "331:                         0);",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "342:   create_dir(loop, \"watch_dir\");",
          "343:   create_file(loop, \"watch_dir/file1\");",
          "350:   ASSERT(r == 0);",
          "352:   uv_close((uv_handle_t*)&fs_event, close_cb);",
          "",
          "[Removed Lines]",
          "345:   r = uv_fs_event_init(loop,",
          "346:                        &fs_event,",
          "347:                        \"watch_dir/file1\",",
          "348:                        fs_event_cb_file,",
          "349:                        0);",
          "",
          "[Added Lines]",
          "360:   r = uv_fs_event_init(loop, &fs_event);",
          "361:   ASSERT(r == 0);",
          "362:   r = uv_fs_event_start(&fs_event,",
          "363:                         fs_event_cb_file,",
          "364:                         \"watch_dir/file1\",",
          "365:                         0);",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "377:   ASSERT(status == 0);",
          "380:   ASSERT(r == 0);",
          "382:   uv_close((uv_handle_t*)&fs_event, close_cb);",
          "",
          "[Removed Lines]",
          "379:   r = uv_fs_event_init(handle->loop, &fs_event, \".\", fs_event_fail, 0);",
          "",
          "[Added Lines]",
          "395:   r = uv_fs_event_init(handle->loop, &fs_event);",
          "396:   ASSERT(r == 0);",
          "397:   r = uv_fs_event_start(&fs_event, fs_event_fail, \".\", 0);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "415:   create_dir(loop, \"watch_dir\");",
          "416:   create_file(loop, \"watch_dir/file\");",
          "419:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "418:   r = uv_fs_event_init(loop, &fs_event, \"watch_dir\", fs_event_fail, 0);",
          "",
          "[Added Lines]",
          "436:   r = uv_fs_event_init(loop, &fs_event);",
          "437:   ASSERT(r == 0);",
          "438:   r = uv_fs_event_start(&fs_event, fs_event_fail, \"watch_dir\", 0);",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "474:   create_file(loop, \"watch_dir/file4\");",
          "475:   create_file(loop, \"watch_dir/file5\");",
          "478:   ASSERT(r == 0);",
          "",
          "[Removed Lines]",
          "477:   r = uv_fs_event_init(loop, &fs_event, \"watch_dir\", fs_event_cb_close, 0);",
          "",
          "[Added Lines]",
          "497:   r = uv_fs_event_init(loop, &fs_event);",
          "498:   ASSERT(r == 0);",
          "499:   r = uv_fs_event_start(&fs_event, fs_event_cb_close, \"watch_dir\", 0);",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "514:   create_dir(loop, \"watch_dir\");",
          "517:   ASSERT(r == 0);",
          "520:   ASSERT(r == 0);",
          "522:   uv_close((uv_handle_t*) &fs_event2, close_cb);",
          "",
          "[Removed Lines]",
          "516:   r = uv_fs_event_init(loop, &fs_event1, \"watch_dir\", fs_event_cb_dir, 0);",
          "519:   r = uv_fs_event_init(loop, &fs_event2, \"watch_dir\", fs_event_cb_dir, 0);",
          "",
          "[Added Lines]",
          "538:   r = uv_fs_event_init(loop, &fs_event1);",
          "539:   ASSERT(r == 0);",
          "540:   r = uv_fs_event_start(&fs_event1, fs_event_cb_dir, \"watch_dir\", 0);",
          "543:   r = uv_fs_event_init(loop, &fs_event2);",
          "544:   ASSERT(r == 0);",
          "545:   r = uv_fs_event_start(&fs_event2, fs_event_cb_dir, \"watch_dir\", 0);",
          "",
          "---------------"
        ],
        "test/test-ref.c||test/test-ref.c": [
          "File: test/test-ref.c -> test/test-ref.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "197: TEST_IMPL(fs_event_ref) {",
          "198:   uv_fs_event_t h;",
          "200:   uv_unref((uv_handle_t*)&h);",
          "201:   uv_run(uv_default_loop(), UV_RUN_DEFAULT);",
          "202:   do_close(&h);",
          "",
          "[Removed Lines]",
          "199:   uv_fs_event_init(uv_default_loop(), &h, \".\", (uv_fs_event_cb)fail_cb, 0);",
          "",
          "[Added Lines]",
          "199:   uv_fs_event_init(uv_default_loop(), &h);",
          "200:   uv_fs_event_start(&h, (uv_fs_event_cb)fail_cb, \".\", 0);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "756087e0171b33da512e1939290e24e1cc93d9a9",
      "candidate_info": {
        "commit_hash": "756087e0171b33da512e1939290e24e1cc93d9a9",
        "repo": "libuv/libuv",
        "commit_url": "https://github.com/libuv/libuv/commit/756087e0171b33da512e1939290e24e1cc93d9a9",
        "files": [
          "test/run-benchmarks.c",
          "test/run-tests.c",
          "test/runner.c",
          "test/runner.h",
          "test/test-list.h"
        ],
        "message": "test: support flexibly setting custom task options\n\nAdd a single TEST_ENTRY_CUSTOM hook that can be used to override task\nentry defaults. Different tests can have different timeouts depending on\nwhat is appropriate for each test. A separate TEST_OUTPUT_ENTRY hook is\nno longer necessary.\n\nIn order to support per-task timeouts, the timeout field has been moved\ninto the task_entry_t struct. The default (5000) is now set as part of\nTEST_ENTRY.",
        "before_after_code_files": [
          "test/run-benchmarks.c||test/run-benchmarks.c",
          "test/run-tests.c||test/run-tests.c",
          "test/runner.c||test/runner.c",
          "test/runner.h||test/runner.h",
          "test/test-list.h||test/test-list.h"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/libuv/libuv/pull/41"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/run-benchmarks.c||test/run-benchmarks.c": [
          "File: test/run-benchmarks.c -> test/run-benchmarks.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "29: #include \"benchmark-list.h\"",
          "35: static int maybe_run_test(int argc, char **argv);",
          "",
          "[Removed Lines]",
          "33: #define BENCHMARK_TIMEOUT  60000",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "39:   platform_init(argc, argv);",
          "41:   switch (argc) {",
          "43:   case 2: return maybe_run_test(argc, argv);",
          "44:   case 3: return run_test_part(argv[1], argv[2]);",
          "45:   default:",
          "",
          "[Removed Lines]",
          "42:   case 1: return run_tests(BENCHMARK_TIMEOUT, 1);",
          "",
          "[Added Lines]",
          "39:   case 1: return run_tests(1);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "60:     return 42;",
          "61:   }",
          "64: }",
          "",
          "[Removed Lines]",
          "63:   return run_test(argv[1], BENCHMARK_TIMEOUT, 1, 1);",
          "",
          "[Added Lines]",
          "60:   return run_test(argv[1], 1, 1);",
          "",
          "---------------"
        ],
        "test/run-tests.c||test/run-tests.c": [
          "File: test/run-tests.c -> test/run-tests.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "37: #include \"test-list.h\"",
          "42: int ipc_helper(int listen_after_write);",
          "43: int ipc_helper_tcp_connection(void);",
          "44: int ipc_send_recv_helper(void);",
          "",
          "[Removed Lines]",
          "40: #define TEST_TIMEOUT  5000",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "53:   argv = uv_setup_args(argc, argv);",
          "55:   switch (argc) {",
          "57:   case 2: return maybe_run_test(argc, argv);",
          "58:   case 3: return run_test_part(argv[1], argv[2]);",
          "59:   default:",
          "",
          "[Removed Lines]",
          "56:   case 1: return run_tests(TEST_TIMEOUT, 0);",
          "",
          "[Added Lines]",
          "53:   case 1: return run_tests(0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "155:     return 1;",
          "156:   }",
          "159: }",
          "",
          "[Removed Lines]",
          "158:   return run_test(argv[1], TEST_TIMEOUT, 0, 1);",
          "",
          "[Added Lines]",
          "155:   return run_test(argv[1], 0, 1);",
          "",
          "---------------"
        ],
        "test/runner.c||test/runner.c": [
          "File: test/runner.c -> test/runner.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "90: }",
          "94:   int total;",
          "95:   int passed;",
          "96:   int failed;",
          "",
          "[Removed Lines]",
          "93: int run_tests(int timeout, int benchmark_output) {",
          "",
          "[Added Lines]",
          "93: int run_tests(int benchmark_output) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "130:       log_progress(total, passed, failed, todos, skipped, task->task_name);",
          "131:     }",
          "134:     switch (test_result) {",
          "135:     case TEST_OK: passed++; break;",
          "136:     case TEST_TODO: todos++; break;",
          "",
          "[Removed Lines]",
          "133:     test_result = run_test(task->task_name, timeout, benchmark_output, current);",
          "",
          "[Added Lines]",
          "133:     test_result = run_test(task->task_name, benchmark_output, current);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "191: int run_test(const char* test,",
          "193:              int benchmark_output,",
          "194:              int test_count) {",
          "195:   char errmsg[1024] = \"no error\";",
          "",
          "[Removed Lines]",
          "192:              int timeout,",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "279:     goto out;",
          "280:   }",
          "283:   if (result == -1) {",
          "284:     FATAL(\"process_wait failed\");",
          "285:   } else if (result == -2) {",
          "",
          "[Removed Lines]",
          "282:   result = process_wait(main_proc, 1, timeout);",
          "",
          "[Added Lines]",
          "281:   result = process_wait(main_proc, 1, task->timeout);",
          "",
          "---------------"
        ],
        "test/runner.h||test/runner.h": [
          "File: test/runner.h -> test/runner.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "41:   int (*main)(void);",
          "42:   int is_helper;",
          "43:   int show_output;",
          "44: } task_entry_t, bench_entry_t;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "48:   int timeout;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "51:   task_entry_t TASKS[] = {",
          "53: #define TASK_LIST_END                               \\",
          "55:   };",
          "57: #define TEST_DECLARE(name)                          \\",
          "58:   int run_test_##name(void);",
          "60: #define TEST_ENTRY(name)                            \\",
          "66: #define BENCHMARK_DECLARE(name)                     \\",
          "67:   int run_benchmark_##name(void);",
          "69: #define BENCHMARK_ENTRY(name)                       \\",
          "72: #define HELPER_DECLARE(name)                        \\",
          "73:   int run_helper_##name(void);",
          "75: #define HELPER_ENTRY(task_name, name)               \\",
          "78: #define TEST_HELPER       HELPER_ENTRY",
          "79: #define BENCHMARK_HELPER  HELPER_ENTRY",
          "",
          "[Removed Lines]",
          "54:     { 0, 0, 0, 0, 0 }                               \\",
          "61:     { #name, #name, &run_test_##name, 0, 0 },",
          "63: #define TEST_OUTPUT_ENTRY(name)                     \\",
          "64:     { #name, #name, &run_test_##name, 0, 1 },",
          "70:     { #name, #name, &run_benchmark_##name, 0, 0 },",
          "76:     { #task_name, #name, &run_helper_##name, 1, 0 },",
          "",
          "[Added Lines]",
          "59:     { 0, 0, 0, 0, 0, 0 }                               \\",
          "66:     { #name, #name, &run_test_##name, 0, 0, 5000 },",
          "68: #define TEST_ENTRY_CUSTOM(name, is_helper, show_output, timeout) \\",
          "69:     { #name, #name, &run_test_##name, is_helper, show_output, timeout },",
          "75:     { #name, #name, &run_benchmark_##name, 0, 0, 60000 },",
          "81:     { #task_name, #name, &run_helper_##name, 1, 0, 0 },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "105: int run_test(const char* test,",
          "107:              int benchmark_output,",
          "108:              int test_count);",
          "",
          "[Removed Lines]",
          "100: int run_tests(int timeout, int benchmark_output);",
          "106:              int timeout,",
          "",
          "[Added Lines]",
          "105: int run_tests(int benchmark_output);",
          "",
          "---------------"
        ],
        "test/test-list.h||test/test-list.h": [
          "File: test/test-list.h -> test/test-list.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "250: TASK_LIST_START",
          "253: #if 0",
          "254:   TEST_ENTRY  (callback_order)",
          "",
          "[Removed Lines]",
          "251:   TEST_OUTPUT_ENTRY  (platform_output)",
          "",
          "[Added Lines]",
          "251:   TEST_ENTRY_CUSTOM (platform_output, 0, 1, 5000)",
          "",
          "---------------"
        ]
      }
    }
  ]
}