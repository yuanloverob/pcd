{
  "cve_id": "CVE-2019-19242",
  "cve_desc": "SQLite 3.30.1 mishandles pExpr->y.pTab, as demonstrated by the TK_COLUMN case in sqlite3ExprCodeTarget in expr.c.",
  "repo": "sqlite/sqlite",
  "patch_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
  "patch_info": {
    "commit_hash": "57f7ece78410a8aae86aa4625fb7556897db384c",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/57f7ece78410a8aae86aa4625fb7556897db384c",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/expr.c",
      "src/wherecode.c",
      "test/gencol1.test"
    ],
    "message": "Fix a problem that comes up when using generated columns that evaluate to a constant in an index and then making use of that index in a join.\n\nFossilOrigin-Name: 8b12e95fec7ce6e0de82a04ca3dfcf1a8e62e233b7382aa28a8a9be6e862b1af",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/expr.c||src/expr.c",
      "src/wherecode.c||src/wherecode.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 2d53a30cc23e53033af8e8666457654db5dcc453ed6cd176ce1d0bff4f528159",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/expr.c||src/expr.c": [
      "File: src/expr.c -> src/expr.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3607:         int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);",
      "3609:         if( aff>SQLITE_AFF_BLOB ){",
      "3610:           static const char zAff[] = \"B\\000C\\000D\\000E\";",
      "3611:           assert( SQLITE_AFF_BLOB=='A' );",
      "",
      "[Removed Lines]",
      "3608:         int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "",
      "[Added Lines]",
      "3608:         int aff;",
      "3609:         if( pExpr->y.pTab ){",
      "3610:           aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);",
      "3611:         }else{",
      "3612:           aff = pExpr->affExpr;",
      "3613:         }",
      "",
      "---------------"
    ],
    "src/wherecode.c||src/wherecode.c": [
      "File: src/wherecode.c -> src/wherecode.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1141:   if( pExpr->op==TK_COLUMN ){",
      "1142:     IdxExprTrans *pX = p->u.pIdxTrans;",
      "1143:     if( pExpr->iTable==pX->iTabCur && pExpr->iColumn==pX->iTabCol ){",
      "1144:       pExpr->iTable = pX->iIdxCur;",
      "1145:       pExpr->iColumn = pX->iIdxCol;",
      "1146:       pExpr->y.pTab = 0;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1144:       assert( pExpr->y.pTab!=0 );",
      "1145:       pExpr->affExpr = sqlite3TableColumnAffinity(pExpr->y.pTab,pExpr->iColumn);",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "243:   UPDATE t0 SET c0 = NULL;",
      "244: } {1 {generated column loop on \"c2\"}}",
      "247: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "246: # 2019-11-21 Problems in the new generated column logic",
      "247: # reported by Yongheng Chen and Rui Zhong",
      "248: do_execsql_test gencol1-9.10 {",
      "249:   DROP TABLE IF EXISTS t1;",
      "250:   DROP TABLE IF EXISTS t2;",
      "251:   CREATE TABLE t1(aa , bb AS (17) UNIQUE);",
      "252:   INSERT INTO t1 VALUES(17);",
      "253:   CREATE TABLE t2(cc);",
      "254:   INSERT INTO t2 VALUES(41);",
      "255:   SELECT * FROM t2 JOIN t1 WHERE t1.bb=t1.aa AND t1.bb=17;",
      "256: } {41 17 17}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "0933aad72c5ac1a763891c03b231ce72b1d19b03",
      "candidate_info": {
        "commit_hash": "0933aad72c5ac1a763891c03b231ce72b1d19b03",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/0933aad72c5ac1a763891c03b231ce72b1d19b03",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/os_unix.c",
          "src/os_win.c",
          "src/pager.c",
          "src/shell.c.in",
          "src/sqlite.h.in",
          "src/tclsqlite.c",
          "src/test_demovfs.c",
          "src/test_vfs.c",
          "test/symlink.test",
          "test/tclsqlite.test"
        ],
        "message": "Add support for SQLITE_OPEN_NOFOLLOW.\n\nFossilOrigin-Name: cb79c828496a703f1410f61458ebc1e15a92a63412b36f51945b2b5a32ec6e88",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/os_unix.c||src/os_unix.c",
          "src/os_win.c||src/os_win.c",
          "src/pager.c||src/pager.c",
          "src/shell.c.in||src/shell.c.in",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/tclsqlite.c||src/tclsqlite.c",
          "src/test_demovfs.c||src/test_demovfs.c",
          "src/test_vfs.c||src/test_vfs.c",
          "test/symlink.test||test/symlink.test",
          "test/tclsqlite.test||test/tclsqlite.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6b67eba54e7b4887a8cdab7537b12a95e9f17bcdaa0b423af5ed5bd91f69f2c6",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/os_unix.c||src/os_unix.c": [
          "File: src/os_unix.c -> src/os_unix.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6251:   SimulateIOError( return SQLITE_IOERR_ACCESS; );",
          "6252:   assert( pResOut!=0 );",
          "6258:   if( flags==SQLITE_ACCESS_EXISTS ){",
          "6259:     struct stat buf;",
          "6263:   }",
          "6264:   return SQLITE_OK;",
          "6265: }",
          "",
          "[Removed Lines]",
          "6256:   assert( flags==SQLITE_ACCESS_EXISTS || flags==SQLITE_ACCESS_READWRITE );",
          "6261:   }else{",
          "",
          "[Added Lines]",
          "6256:   assert( flags==SQLITE_ACCESS_EXISTS",
          "6257:        || flags==SQLITE_ACCESS_READWRITE",
          "6258:        || flags==SQLITE_ACCESS_SYMLINK );",
          "6263:   }else if( flags==SQLITE_ACCESS_READWRITE ){",
          "6265:   }else{",
          "6266: #if !defined(HAVE_LSTAT)",
          "6268: #else",
          "6269:     struct stat buf;",
          "6271: #endif",
          "6272:     assert( flags==SQLITE_ACCESS_SYMLINK );",
          "",
          "---------------"
        ],
        "src/os_win.c||src/os_win.c": [
          "File: src/os_win.c -> src/os_win.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5472:       rc = attr!=INVALID_FILE_ATTRIBUTES &&",
          "5473:              (attr & FILE_ATTRIBUTE_READONLY)==0;",
          "5474:       break;",
          "5475:     default:",
          "5476:       assert(!\"Invalid flags argument\");",
          "5477:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5475:     case SQLITE_ACCESS_SYMLINK:",
          "5477:       break;",
          "",
          "---------------"
        ],
        "src/pager.c||src/pager.c": [
          "File: src/pager.c -> src/pager.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "4789:   if( zFilename && zFilename[0] ){",
          "4790:     const char *z;",
          "4791:     nPathname = pVfs->mxPathname+1;",
          "4792:     zPathname = sqlite3DbMallocRaw(0, nPathname*2);",
          "4793:     if( zPathname==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4791:     if( (vfsFlags & SQLITE_OPEN_NOFOLLOW)!=0 ){",
          "4792:       int isLink = 0;",
          "4793:       if( sqlite3OsAccess(pVfs, zFilename, SQLITE_ACCESS_SYMLINK, &isLink)==0",
          "4794:        && isLink",
          "4795:       ){",
          "4796:         return SQLITE_CANTOPEN_SYMLINK;",
          "4797:       }",
          "4798:     }",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3562:   \"        --maxsize N     Maximum size for --hexdb or --deserialized database\",",
          "3563: #endif",
          "3564:   \"        --new           Initialize FILE to an empty database\",",
          "3565:   \"        --readonly      Open FILE readonly\",",
          "3566:   \"        --zip           FILE is a ZIP archive\",",
          "3567:   \".output ?FILE?           Send output to FILE or stdout if FILE is omitted\",",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3566:   \"        --nofollow      Do not follow symbolic links\",",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4126:     switch( p->openMode ){",
          "4127:       case SHELL_OPEN_APPENDVFS: {",
          "4128:         sqlite3_open_v2(p->zDbFilename, &p->db,",
          "4130:         break;",
          "4131:       }",
          "4132:       case SHELL_OPEN_HEXDB:",
          "",
          "[Removed Lines]",
          "4129:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE, \"apndvfs\");",
          "",
          "[Added Lines]",
          "4131:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE|p->openFlags, \"apndvfs\");",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4139:         break;",
          "4140:       }",
          "4141:       case SHELL_OPEN_READONLY: {",
          "4143:         break;",
          "4144:       }",
          "4145:       case SHELL_OPEN_UNSPEC:",
          "4146:       case SHELL_OPEN_NORMAL: {",
          "4148:         break;",
          "4149:       }",
          "4150:     }",
          "",
          "[Removed Lines]",
          "4142:         sqlite3_open_v2(p->zDbFilename, &p->db, SQLITE_OPEN_READONLY, 0);",
          "4147:         sqlite3_open(p->zDbFilename, &p->db);",
          "",
          "[Added Lines]",
          "4144:         sqlite3_open_v2(p->zDbFilename, &p->db,",
          "4145:             SQLITE_OPEN_READONLY|p->openFlags, 0);",
          "4150:         sqlite3_open_v2(p->zDbFilename, &p->db,",
          "4151:            SQLITE_OPEN_READWRITE|SQLITE_OPEN_CREATE|p->openFlags, 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "8042:     sqlite3_free(p->zFreeOnClose);",
          "8043:     p->zFreeOnClose = 0;",
          "8044:     p->openMode = SHELL_OPEN_UNSPEC;",
          "8045:     p->szMax = 0;",
          "8047:     for(iName=1; iName<nArg && azArg[iName][0]=='-'; iName++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8049:     p->openFlags = 0;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "8056:         p->openMode = SHELL_OPEN_APPENDVFS;",
          "8057:       }else if( optionMatch(z, \"readonly\") ){",
          "8058:         p->openMode = SHELL_OPEN_READONLY;",
          "8059: #ifdef SQLITE_ENABLE_DESERIALIZE",
          "8060:       }else if( optionMatch(z, \"deserialize\") ){",
          "8061:         p->openMode = SHELL_OPEN_DESERIALIZE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "8064:       }else if( optionMatch(z, \"nofollow\") ){",
          "8065:         p->openFlags |= SQLITE_OPEN_NOFOLLOW;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "9976:   \"   -multiplex           enable the multiplexor VFS\\n\"",
          "9977: #endif",
          "9978:   \"   -newline SEP         set output row separator. Default: '\\\\n'\\n\"",
          "9979:   \"   -nullvalue TEXT      set text string for NULL values. Default ''\\n\"",
          "9980:   \"   -pagecache SIZE N    use N slots of SZ bytes each for page cache memory\\n\"",
          "9981:   \"   -quote               set output mode to 'quote'\\n\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "9986:   \"   -nofollow            refuse to open symbolic links to database files\\n\"",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "10286: #endif",
          "10287:     }else if( strcmp(z,\"-readonly\")==0 ){",
          "10288:       data.openMode = SHELL_OPEN_READONLY;",
          "10289: #if !defined(SQLITE_OMIT_VIRTUALTABLE) && defined(SQLITE_HAVE_ZLIB)",
          "10290:     }else if( strncmp(z, \"-A\",2)==0 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10297:     }else if( strcmp(z,\"-nofollow\")==0 ){",
          "10298:       data.openFlags = SQLITE_OPEN_NOFOLLOW;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "10389: #endif",
          "10390:     }else if( strcmp(z,\"-readonly\")==0 ){",
          "10391:       data.openMode = SHELL_OPEN_READONLY;",
          "10392:     }else if( strcmp(z,\"-ascii\")==0 ){",
          "10393:       data.mode = MODE_Ascii;",
          "10394:       sqlite3_snprintf(sizeof(data.colSeparator), data.colSeparator,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "10402:     }else if( strcmp(z,\"-nofollow\")==0 ){",
          "10403:       data.openFlags |= SQLITE_OPEN_NOFOLLOW;",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "516: #define SQLITE_CANTOPEN_FULLPATH       (SQLITE_CANTOPEN | (3<<8))",
          "517: #define SQLITE_CANTOPEN_CONVPATH       (SQLITE_CANTOPEN | (4<<8))",
          "519: #define SQLITE_CORRUPT_VTAB            (SQLITE_CORRUPT | (1<<8))",
          "520: #define SQLITE_CORRUPT_SEQUENCE        (SQLITE_CORRUPT | (2<<8))",
          "521: #define SQLITE_READONLY_RECOVERY       (SQLITE_READONLY | (1<<8))",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "519: #define SQLITE_CANTOPEN_SYMLINK        (SQLITE_CANTOPEN | (6<<8))",
          "",
          "---------------"
        ],
        "src/tclsqlite.c||src/tclsqlite.c": [
          "File: src/tclsqlite.c -> src/tclsqlite.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3670: ){",
          "3671:   Tcl_WrongNumArgs(interp, 1, objv,",
          "3672:     \"HANDLE ?FILENAME? ?-vfs VFSNAME? ?-readonly BOOLEAN? ?-create BOOLEAN?\"",
          "3673:     \" ?-nomutex BOOLEAN? ?-fullmutex BOOLEAN? ?-uri BOOLEAN?\"",
          "3674: #if defined(SQLITE_HAS_CODEC) && !defined(SQLITE_OMIT_CODEC_FROM_TCL)",
          "3675:     \" ?-key CODECKEY?\"",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3673:     \" ?-nofollow BOOLEAN?\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3779:       }else{",
          "3780:         flags &= ~SQLITE_OPEN_CREATE;",
          "3781:       }",
          "3782:     }else if( strcmp(zArg, \"-nomutex\")==0 ){",
          "3783:       int b;",
          "3784:       if( Tcl_GetBooleanFromObj(interp, objv[i], &b) ) return TCL_ERROR;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3784:     }else if( strcmp(zArg, \"-nofollow\")==0 ){",
          "3785:       int b;",
          "3786:       if( Tcl_GetBooleanFromObj(interp, objv[i], &b) ) return TCL_ERROR;",
          "3787:       if( b ){",
          "3788:         flags |= SQLITE_OPEN_NOFOLLOW;",
          "3789:       }else{",
          "3790:         flags &= ~SQLITE_OPEN_NOFOLLOW;",
          "3791:       }",
          "",
          "---------------"
        ],
        "src/test_demovfs.c||src/test_demovfs.c": [
          "File: src/test_demovfs.c -> src/test_demovfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "511:   );",
          "513:   if( flags==SQLITE_ACCESS_READWRITE ) eAccess = R_OK|W_OK;",
          "514:   if( flags==SQLITE_ACCESS_READ )      eAccess = R_OK;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "514:   if( flags==SQLITE_ACCESS_SYMLINK ){",
          "517:     return SQLITE_OK;",
          "518:   }",
          "",
          "---------------"
        ],
        "src/test_vfs.c||src/test_vfs.c": [
          "File: src/test_vfs.c -> src/test_vfs.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "732:     if( flags==SQLITE_ACCESS_EXISTS ) zArg = \"SQLITE_ACCESS_EXISTS\";",
          "733:     if( flags==SQLITE_ACCESS_READWRITE ) zArg = \"SQLITE_ACCESS_READWRITE\";",
          "734:     if( flags==SQLITE_ACCESS_READ ) zArg = \"SQLITE_ACCESS_READ\";",
          "735:     tvfsExecTcl(p, \"xAccess\",",
          "736:         Tcl_NewStringObj(zPath, -1), Tcl_NewStringObj(zArg, -1), 0, 0",
          "737:     );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "735:     if( flags==SQLITE_ACCESS_SYMLINK ) zArg = \"SQLITE_ACCESS_SYMLINK\";",
          "",
          "---------------"
        ],
        "test/symlink.test||test/symlink.test": [
          "File: test/symlink.test -> test/symlink.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "37:   sqlite3_db_filename db2 main",
          "38: } [file join [pwd] test.db]",
          "40: # Test that if the symlink points to a file that does not exists, it is",
          "41: # created when it is opened.",
          "42: #",
          "43: do_test 1.2.1 {",
          "45:   db close",
          "46:   forcedelete test.db",
          "47:   file exists test.db",
          "",
          "[Removed Lines]",
          "44:   db2 close",
          "",
          "[Added Lines]",
          "40: # But not with the -nofollow flag",
          "41: #",
          "42: do_test 1.1.2 {",
          "43:   db2 close",
          "44:   set rc [catch {sqlite3 db2 test.db2 -nofollow 1} msg]",
          "45:   lappend rc $msg",
          "46: } {1 {unable to open database file}}",
          "48: # If the main database is successfully opened with -nofollow, then -nofollow",
          "49: # is also used for ATTACH.",
          "50: #",
          "51: do_test 1.1.3 {",
          "52:   catch {db2 close}",
          "53:   sqlite3 db2 test.db -nofollow 1",
          "54: } {}",
          "55: do_test 1.1.4 {",
          "56:   catchsql {ATTACH 'test.db2' AS aux1;} db2",
          "57: } {1 {unable to open database: test.db2}}",
          "63:   catch {db2 close}",
          "",
          "---------------"
        ],
        "test/tclsqlite.test||test/tclsqlite.test": [
          "File: test/tclsqlite.test -> test/tclsqlite.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "26: # Check the error messages generated by tclsqlite",
          "27: #",
          "29: if {[sqlite3 -has-codec]} {",
          "30:   append r \" ?-key CODECKEY?\"",
          "31: }",
          "",
          "[Removed Lines]",
          "28: set r \"sqlite_orig HANDLE ?FILENAME? ?-vfs VFSNAME? ?-readonly BOOLEAN? ?-create BOOLEAN? ?-nomutex BOOLEAN? ?-fullmutex BOOLEAN? ?-uri BOOLEAN?\"",
          "",
          "[Added Lines]",
          "28: set r \"sqlite_orig HANDLE ?FILENAME? ?-vfs VFSNAME? ?-readonly BOOLEAN? ?-create BOOLEAN? ?-nofollow BOOLEAN? ?-nomutex BOOLEAN? ?-fullmutex BOOLEAN? ?-uri BOOLEAN?\"",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "2ce9b6bcd500c8836748aa5b34bcb02b7f145e90",
      "candidate_info": {
        "commit_hash": "2ce9b6bcd500c8836748aa5b34bcb02b7f145e90",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/2ce9b6bcd500c8836748aa5b34bcb02b7f145e90",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbe.c"
        ],
        "message": "Improved comments and extra assert() statements on the OP_Savepoint opcode, just to make the code a little easier to read and reason about.\n\nFossilOrigin-Name: e80b2d9fcbc82ae5dc8a1fc13196f9a30bdb504eb5a5c131d136a78bbd5bbe7b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbe.c||src/vdbe.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 3cc55e09e6c1de2059d97bdddf2fdfbdcc62c584b513f56faf9d3a39ef80cddd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3099:       }",
          "3100:     }",
          "3101:   }else{",
          "3102:     iSavepoint = 0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3103:     assert( p1==SAVEPOINT_RELEASE || p1==SAVEPOINT_ROLLBACK );",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3152:             if( rc!=SQLITE_OK ) goto abort_due_to_error;",
          "3153:           }",
          "3154:         }else{",
          "3155:           isSchemaChange = 0;",
          "3156:         }",
          "3157:         for(ii=0; ii<db->nDb; ii++){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3157:           assert( p1==SAVEPOINT_RELEASE );",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3188:           db->nSavepoint--;",
          "3189:         }",
          "3190:       }else{",
          "3191:         db->nDeferredCons = pSavepoint->nDeferredCons;",
          "3192:         db->nDeferredImmCons = pSavepoint->nDeferredImmCons;",
          "3193:       }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3194:         assert( p1==SAVEPOINT_ROLLBACK );",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4e61e88348693cde472989b3dc1a06b5ff9dd9c0",
      "candidate_info": {
        "commit_hash": "4e61e88348693cde472989b3dc1a06b5ff9dd9c0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4e61e88348693cde472989b3dc1a06b5ff9dd9c0",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/vacuum.c",
          "test/e_vacuum.test"
        ],
        "message": "Only preserve rowid values for VACUUM INTO.  Keep the legacy behavior of renumbering rowids for ordinary VACUUM.\n\nFossilOrigin-Name: 13a0ea6466b051ea5281865ed5285b8b5a99ec4307f400c5f7b03692723f1cd1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/vacuum.c||src/vacuum.c",
          "test/e_vacuum.test||test/e_vacuum.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 8d3af2010f4f652865f5c0d18e3bc793de05f8e75e75cc77786f61004b2ad28f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2352:       sqlite3RowidConstraint(pParse, onError, pDest);",
          "2353:       sqlite3VdbeJumpHere(v, addr2);",
          "2354:       autoIncStep(pParse, regAutoinc, regRowid);",
          "2356:       addr1 = sqlite3VdbeAddOp2(v, OP_NewRowid, iDest, regRowid);",
          "2357:     }else{",
          "2358:       addr1 = sqlite3VdbeAddOp2(v, OP_Rowid, iSrc, regRowid);",
          "",
          "[Removed Lines]",
          "2355:     }else if( pDest->pIndex==0 && !(db->mDbFlags & DBFLAG_Vacuum) ){",
          "",
          "[Added Lines]",
          "2355:     }else if( pDest->pIndex==0 && !(db->mDbFlags & DBFLAG_VacuumInto) ){",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/vacuum.c||src/vacuum.c": [
          "File: src/vacuum.c -> src/vacuum.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "170:     return SQLITE_ERROR;",
          "171:   }",
          "172:   saved_openFlags = db->openFlags;",
          "173:   if( pOut ){",
          "174:     if( sqlite3_value_type(pOut)!=SQLITE_TEXT ){",
          "175:       sqlite3SetString(pzErrMsg, db, \"non-text filename\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "173:   saved_mDbFlags = db->mDbFlags;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "178:     zOut = (const char*)sqlite3_value_text(pOut);",
          "179:     db->openFlags &= ~SQLITE_OPEN_READONLY;",
          "180:     db->openFlags |= SQLITE_OPEN_CREATE|SQLITE_OPEN_READWRITE;",
          "181:   }else{",
          "182:     zOut = \"\";",
          "183:   }",
          "188:   saved_flags = db->flags;",
          "190:   saved_nChange = db->nChange;",
          "191:   saved_nTotalChange = db->nTotalChange;",
          "192:   saved_mTrace = db->mTrace;",
          "193:   db->flags |= SQLITE_WriteSchema | SQLITE_IgnoreChecks;",
          "195:   db->flags &= ~(u64)(SQLITE_ForeignKeys | SQLITE_ReverseOrder",
          "196:                    | SQLITE_Defensive | SQLITE_CountRows);",
          "197:   db->mTrace = 0;",
          "",
          "[Removed Lines]",
          "189:   saved_mDbFlags = db->mDbFlags;",
          "194:   db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum;",
          "",
          "[Added Lines]",
          "182:     db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum | DBFLAG_VacuumInto;",
          "185:     db->mDbFlags |= DBFLAG_PreferBuiltin | DBFLAG_Vacuum;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "307:       zDbMain",
          "308:   );",
          "309:   assert( (db->mDbFlags & DBFLAG_Vacuum)!=0 );",
          "311:   if( rc!=SQLITE_OK ) goto end_of_vacuum;",
          "",
          "[Removed Lines]",
          "310:   db->mDbFlags &= ~DBFLAG_Vacuum;",
          "",
          "[Added Lines]",
          "311:   db->mDbFlags &= ~(DBFLAG_Vacuum|DBFLAG_VacuumInto);",
          "",
          "---------------"
        ],
        "test/e_vacuum.test||test/e_vacuum.test": [
          "File: test/e_vacuum.test -> test/e_vacuum.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "232: do_execsql_test e_vacuum-3.1.2 {",
          "233:   VACUUM;",
          "234:   SELECT rowid, x FROM t4;",
          "238: do_execsql_test e_vacuum-3.1.3 {",
          "239:   CREATE TABLE t5(x, y INTEGER PRIMARY KEY);",
          "240:   INSERT INTO t5(x) VALUES('x');",
          "",
          "[Removed Lines]",
          "235: } {1 x 3 z}",
          "236: # Was: {1 x 2 z}",
          "",
          "[Added Lines]",
          "235: } {1 x 2 z}",
          "237: # Rowids are preserved if an INTEGER PRIMARY KEY is used",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "248:   SELECT rowid, x FROM t5;",
          "249: } {1 x 3 z}",
          "251: # EVIDENCE-OF: R-49563-33883 A VACUUM will fail if there is an open",
          "252: # transaction, or if there are one or more active SQL statements when it",
          "253: # is run.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "251: # Rowid is preserved for VACUUM INTO",
          "252: do_execsql_test e_vacuum-3.1.5 {",
          "253:   DROP TABLE t5;",
          "254:   CREATE TABLE t5(x);",
          "255:   INSERT INTO t5(x) VALUES('x');",
          "256:   INSERT INTO t5(x) VALUES('y');",
          "257:   INSERT INTO t5(x) VALUES('z');",
          "258:   DELETE FROM t5 WHERE x = 'y';",
          "259:   SELECT rowid, x FROM t5;",
          "260: } {1 x 3 z}",
          "261: forcedelete test2.db",
          "262: do_execsql_test e_vacuum-3.1.6 {",
          "263:   VACUUM INTO 'test2.db';",
          "264:   ATTACH 'test2.db' AS aux1;",
          "265:   SELECT rowid, x FROM aux1.t5;",
          "266:   DETACH aux1;",
          "267: } {1 x 3 z}",
          "269: # Rowids are renumbered even if the table being vacuumed",
          "270: # has indexes.",
          "271: do_execsql_test e_vacuum-3.1.7 {",
          "272:   DROP TABLE t5;",
          "273:   CREATE TABLE t5(x,y,z);",
          "274:   INSERT INTO t5(x) VALUES('x');",
          "275:   INSERT INTO t5(x) VALUES('y');",
          "276:   INSERT INTO t5(x) VALUES('z');",
          "277:   UPDATE t5 SET y=x, z=random();",
          "278:   DELETE FROM t5 WHERE x = 'y';",
          "279:   CREATE INDEX t5x ON t5(x);",
          "280:   CREATE UNIQUE INDEX t5y ON t5(y);",
          "281:   CREATE INDEX t5zxy ON t5(z,x,y);",
          "282:   SELECT rowid, x FROM t5;",
          "283: } {1 x 3 z}",
          "284: do_execsql_test e_vacuum-3.1.8 {",
          "285:   VACUUM;",
          "286:   SELECT rowid, x FROM t5;",
          "287: } {1 x 3 z}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a1ac03590baf0fffea9437436adeaf4a1db64a65",
      "candidate_info": {
        "commit_hash": "a1ac03590baf0fffea9437436adeaf4a1db64a65",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/a1ac03590baf0fffea9437436adeaf4a1db64a65",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/walker.c",
          "test/altertab3.test"
        ],
        "message": "Fix a faulty assert() in walker.c that could fail when processing an ALTER TABLE statement on a schema containing invalid table references that are part of a WINDOW definition.\n\nFossilOrigin-Name: ee076c28d8ee0f5b099cdef83ae6cea6ef5aa209ab528d7c49949dd653ce019c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/walker.c||src/walker.c",
          "test/altertab3.test||test/altertab3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 47e23064ba0205148f89e12803a62d5a4d6d2054f593f60c031e815112170b9b",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/walker.c||src/walker.c": [
          "File: src/walker.c -> src/walker.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "120:   {",
          "121:     Parse *pParse = pWalker->pParse;",
          "122:     if( pParse && IN_RENAME_OBJECT ){",
          "123:       int rc = walkWindowList(pWalker, p->pWinDefn);",
          "125:       return rc;",
          "126:     }",
          "127:   }",
          "",
          "[Removed Lines]",
          "124:       assert( rc==WRC_Continue );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/altertab3.test||test/altertab3.test": [
          "File: test/altertab3.test -> test/altertab3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "237:   ) IN () OR t1.a=5}",
          "238: }",
          "241: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "240: #-------------------------------------------------------------------------",
          "241: reset_db",
          "242: do_execsql_test 11.1 {",
          "243:   CREATE TABLE t1(",
          "244:       a,b,c,d,e,f,g,h,j,jj,jjb,k,aa,bb,cc,dd,ee DEFAULT 3.14,",
          "245:       ff DEFAULT('hiccup'),Wg NOD NULL DEFAULT(false)",
          "246:   );",
          "248:   CREATE TRIGGER b AFTER INSERT ON t1 WHEN new.a BEGIN",
          "249:     SELECT a, sum() w3 FROM t1",
          "250:     WINDOW b AS (ORDER BY NOT EXISTS(SELECT 1 FROM abc));",
          "251:   END;",
          "252: }",
          "254: do_catchsql_test 11.2 {",
          "255:   ALTER TABLE t1 RENAME TO t1x;",
          "256: } {1 {error in trigger b: no such table: abc}}",
          "258: do_execsql_test 11.3 {",
          "259:   DROP TRIGGER b;",
          "260:   CREATE TRIGGER b AFTER INSERT ON t1 WHEN new.a BEGIN",
          "261:     SELECT a, sum() w3 FROM t1",
          "262:     WINDOW b AS (ORDER BY NOT EXISTS(SELECT 1 FROM t1));",
          "263:   END;",
          "264: } {}",
          "266: do_execsql_test 11.4 {",
          "267:   ALTER TABLE t1 RENAME TO t1x;",
          "268:   SELECT sql FROM sqlite_master WHERE name = 'b';",
          "269: } {",
          "270: {CREATE TRIGGER b AFTER INSERT ON \"t1x\" WHEN new.a BEGIN",
          "271:     SELECT a, sum() w3 FROM \"t1x\"",
          "272:     WINDOW b AS (ORDER BY NOT EXISTS(SELECT 1 FROM \"t1x\"));",
          "273:   END}",
          "274: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3bf0d7a8813a7e40f1ad37e10cad744bfd295e74",
      "candidate_info": {
        "commit_hash": "3bf0d7a8813a7e40f1ad37e10cad744bfd295e74",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/3bf0d7a8813a7e40f1ad37e10cad744bfd295e74",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/memdb.c"
        ],
        "message": "Remove an incorrect assert() from the deserialize in-memory database VFS.\n\nFossilOrigin-Name: 80151d7e3b9fd84086874a1cebed024b9e14005ea2d0108cf6efcd07373fcf51",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/memdb.c||src/memdb.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: cb72ee0478ce98c48aae059fd5de4e36caf2b8c953e08fcb799bfd119ad46b73",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/memdb.c||src/memdb.c": [
          "File: src/memdb.c -> src/memdb.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "306: ){",
          "307:   MemFile *p = (MemFile *)pFile;",
          "308:   if( iOfst+iAmt>p->sz ){",
          "311:   }else{",
          "312:     p->nMmap++;",
          "",
          "[Removed Lines]",
          "309:     assert( CORRUPT_DB );",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    }
  ]
}