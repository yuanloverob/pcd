{
  "cve_id": "CVE-2021-20223",
  "cve_desc": "",
  "repo": "sqlite/sqlite",
  "patch_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
  "patch_info": {
    "commit_hash": "d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/d1d43efa4fb0f2098c0e2c5bf2e807c58d5ec05b",
    "files": [
      "ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test",
      "manifest",
      "manifest.uuid"
    ],
    "message": "Prevent fts5 tokenizer unicode61 from considering '\\0' to be a token characters, even if other characters of class \"Cc\" are.\n\nFossilOrigin-Name: b7b7bde9b7a03665e3691c6d51118965f216d2dfb1617f138b9f9e60e418ed2f",
    "before_after_code_files": [
      "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c",
      "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test",
      "manifest.uuid||manifest.uuid"
    ]
  },
  "patch_diff": {
    "ext/fts5/fts5_unicode2.c||ext/fts5/fts5_unicode2.c": [
      "File: ext/fts5/fts5_unicode2.c -> ext/fts5/fts5_unicode2.c"
    ],
    "ext/fts5/test/fts5tok1.test||ext/fts5/test/fts5tok1.test": [
      "File: ext/fts5/test/fts5tok1.test -> ext/fts5/test/fts5tok1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "111:   SELECT * FROM t4;",
      "112: } {1 {SQL logic error}}",
      "115: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "114: #-------------------------------------------------------------------------",
      "115: # Embedded 0x00 characters.",
      "116: #",
      "117: reset_db",
      "118: do_execsql_test 3.1.0 {",
      "119:   CREATE VIRTUAL TABLE t1 USING fts5(z);",
      "120:   CREATE VIRTUAL TABLE tt USING fts5vocab(t1, 'instance');",
      "121:   INSERT INTO t1 VALUES('abc' || char(0) || 'def');",
      "122:   SELECT * FROM tt;",
      "123: } { abc 1 z 0 def 1 z 1 }",
      "124: do_execsql_test 3.1.1 {",
      "125:   SELECT hex(z) FROM t1;",
      "126: } {61626300646566}",
      "127: do_execsql_test 3.1.2 {",
      "128:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "129: } {}",
      "131: do_execsql_test 3.2.0 {",
      "132:   CREATE VIRTUAL TABLE t2 USING fts5(z,",
      "133:       tokenize=\"unicode61 categories 'L* N* Co Cc'\"",
      "134:   );",
      "135:   CREATE VIRTUAL TABLE tu USING fts5vocab(t2, 'instance');",
      "137:   INSERT INTO t2 VALUES('abc' || char(0) || 'def');",
      "138:   SELECT * FROM tu;",
      "139: } { abc 1 z 0 def 1 z 1 }",
      "141: do_execsql_test 3.2.1 {",
      "142:   SELECT hex(z) FROM t1;",
      "143: } {61626300646566}",
      "145: do_execsql_test 3.2.2 {",
      "146:   INSERT INTO t1(t1) VALUES('integrity-check');",
      "147: } {}",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 0e7e113d9f2c929c1f8a85e2cfad8e2e60f0e8770212b5e5320fb2a2c42911f8",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "baa3458920680941e93f9e9a382e9539fba44642",
      "candidate_info": {
        "commit_hash": "baa3458920680941e93f9e9a382e9539fba44642",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/baa3458920680941e93f9e9a382e9539fba44642",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/journal3.test"
        ],
        "message": "Modify journal3.test so that it can handle Tcl command \"file attr <file> -perm\" returning octal values in either \"00755\" or \"0o755\" format.\n\nFossilOrigin-Name: b0b655625cf491c832a259d29a67660b8d5943c201617900a83d0660b2673377",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/journal3.test||test/journal3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 75e31b1d56781fc4d28aea6c7f1393a18fd34870a5beb92df81c088d61351b4a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/journal3.test||test/journal3.test": [
          "File: test/journal3.test -> test/journal3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   } {",
          "39:     db close",
          "40:     #set effective [format %.5o [expr $permissions & ~$umask]]",
          "41:     if {$tcl_version>=8.7} {",
          "42:        regsub {^00} $permissions {0o} permissions",
          "43:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     set res \"/[regsub {^00} $permissions {0.}]/\"",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "46:       catch { forcedelete test.db-journal }",
          "47:       file attributes test.db -permissions $permissions",
          "48:       file attributes test.db -permissions",
          "50:     do_test journal3-1.2.$tn.2 { file exists test.db-journal } {0}",
          "51:     do_test journal3-1.2.$tn.3 {",
          "52:       sqlite3 db test.db",
          "",
          "[Removed Lines]",
          "49:     } $permissions",
          "",
          "[Added Lines]",
          "50:     } $res",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "58:     } {1}",
          "59:     do_test journal3-1.2.$tn.4 {",
          "60:       file attr test.db-journal -perm",
          "62:     do_execsql_test journal3-1.2.$tn.5 { ROLLBACK } {}",
          "63:   }",
          "",
          "[Removed Lines]",
          "61:     } $effective",
          "",
          "[Added Lines]",
          "62:     } $res",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "70d1a1a3ed64d7bd82fd90268e4c9cf208ca1be0",
      "candidate_info": {
        "commit_hash": "70d1a1a3ed64d7bd82fd90268e4c9cf208ca1be0",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/70d1a1a3ed64d7bd82fd90268e4c9cf208ca1be0",
        "files": [
          "ext/fts3/fts3.c",
          "ext/fts3/fts3_write.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Further improve detection of corrupt records in fts3.\n\nFossilOrigin-Name: a0f6d526baecd061a5e2bec5eb698fb5dfb10122ac79c853d7b3f4a48bc9f49b",
        "before_after_code_files": [
          "ext/fts3/fts3.c||ext/fts3/fts3.c",
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3.c||ext/fts3/fts3.c": [
          "File: ext/fts3/fts3.c -> ext/fts3/fts3.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2025:     if( rc==SQLITE_OK ){",
          "2026:       int iNewHeight = 0;",
          "2027:       fts3GetVarint32(zBlob, &iNewHeight);",
          "2029:         rc = FTS_CORRUPT_VTAB;",
          "2030:       }else{",
          "2031:         rc = fts3SelectLeaf(p, zTerm, nTerm, zBlob, nBlob, piLeaf, piLeaf2);",
          "",
          "[Removed Lines]",
          "2028:       if( iNewHeight<=iHeight ){",
          "",
          "[Added Lines]",
          "2028:       if( iNewHeight>=iHeight ){",
          "",
          "---------------"
        ],
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1379:   pNext += fts3GetVarint32(pNext, &nSuffix);",
          "1380:   if( nSuffix<=0",
          "1381:    || (&pReader->aNode[pReader->nNode] - pNext)<nSuffix",
          "1383:   ){",
          "1384:     return FTS_CORRUPT_VTAB;",
          "1385:   }",
          "",
          "[Removed Lines]",
          "1382:    || nPrefix>pReader->nTermAlloc",
          "",
          "[Added Lines]",
          "1382:    || nPrefix>pReader->nTerm",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2575a68c3965e72f2ab211d933012442755afe6a9b7de9e9e50cdd2155fd1ec8",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "acd3c8a995a73018c5feb99b29d544a3ef5d8f78",
      "candidate_info": {
        "commit_hash": "acd3c8a995a73018c5feb99b29d544a3ef5d8f78",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/acd3c8a995a73018c5feb99b29d544a3ef5d8f78",
        "files": [
          "ext/misc/zipfile.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a sanitizer warning in zipfile.c.\n\nFossilOrigin-Name: ded1a75b3cf39834d38a385f38ae969b296f6c9409856b7eea08645e861b1ac2",
        "before_after_code_files": [
          "ext/misc/zipfile.c||ext/misc/zipfile.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/zipfile.c||ext/misc/zipfile.c": [
          "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "523:   const u8 *aWrite,",
          "524:   int nWrite",
          "525: ){",
          "532:   }",
          "534:   return SQLITE_OK;",
          "535: }",
          "",
          "[Removed Lines]",
          "526:   size_t n;",
          "527:   fseek(pTab->pWriteFd, (long)pTab->szCurrent, SEEK_SET);",
          "528:   n = fwrite(aWrite, 1, nWrite, pTab->pWriteFd);",
          "529:   if( (int)n!=nWrite ){",
          "530:     pTab->base.zErrMsg = sqlite3_mprintf(\"error in fwrite()\");",
          "531:     return SQLITE_ERROR;",
          "533:   pTab->szCurrent += nWrite;",
          "",
          "[Added Lines]",
          "526:   if( nWrite>0 ){",
          "527:     size_t n = nWrite;",
          "528:     fseek(pTab->pWriteFd, (long)pTab->szCurrent, SEEK_SET);",
          "529:     n = fwrite(aWrite, 1, nWrite, pTab->pWriteFd);",
          "530:     if( (int)n!=nWrite ){",
          "531:       pTab->base.zErrMsg = sqlite3_mprintf(\"error in fwrite()\");",
          "532:       return SQLITE_ERROR;",
          "533:     }",
          "534:     pTab->szCurrent += nWrite;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: a1c19eea8f141b89a0921da0724096feb21a772ef6654f164e2c36ebf9f7871e",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "356cd76aa8bf20f3cc471da18b0ccb0370541565",
      "candidate_info": {
        "commit_hash": "356cd76aa8bf20f3cc471da18b0ccb0370541565",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/356cd76aa8bf20f3cc471da18b0ccb0370541565",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbeInt.h",
          "src/vdbeaux.c"
        ],
        "message": "Begin breaking appear the sqlite3VdbeList() routine into subroutines that can be reused by the bytecode() table.\n\nFossilOrigin-Name: 2c4dd79fbd4b9f72634a732abb9ed833cd8c9b05fe1e10af8f23e6d6ec023c7c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbeInt.h||src/vdbeInt.h",
          "src/vdbeaux.c||src/vdbeaux.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2795f0d633577e0de66b389d9e8e44c55e85975bdc62f1a0b8f93959d19b22bf",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbeInt.h||src/vdbeInt.h": [
          "File: src/vdbeInt.h -> src/vdbeInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "497: int sqlite3VdbeIdxRowid(sqlite3*, BtCursor*, i64*);",
          "498: int sqlite3VdbeExec(Vdbe*);",
          "499: #ifndef SQLITE_OMIT_EXPLAIN",
          "500: int sqlite3VdbeList(Vdbe*);",
          "501: #endif",
          "502: int sqlite3VdbeHalt(Vdbe*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "500: int sqlite3VdbeNextOpcode(Vdbe*,Mem*,int,int*,int*,Op**);",
          "",
          "---------------"
        ],
        "src/vdbeaux.c||src/vdbeaux.c": [
          "File: src/vdbeaux.c -> src/vdbeaux.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1943:   pFrame->v->pDelFrame = pFrame;",
          "1944: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1953: int sqlite3VdbeNextOpcode(",
          "1960: ){",
          "1976:   nRow = p->nOp;",
          "1977:   if( pSub!=0 ){",
          "1978:     if( pSub->flags&MEM_Blob ){",
          "1981:       nSub = pSub->n/sizeof(Vdbe*);",
          "1982:       apSub = (SubProgram **)pSub->z;",
          "1983:     }",
          "1984:     for(i=0; i<nSub; i++){",
          "1985:       nRow += apSub[i]->nOp;",
          "1986:     }",
          "1987:   }",
          "1988:   iPc = *piPc;",
          "1990:     i = iPc++;",
          "1991:     if( i>=nRow ){",
          "1992:       p->rc = SQLITE_OK;",
          "1993:       rc = SQLITE_DONE;",
          "1994:       break;",
          "1995:     }",
          "1996:     if( i<p->nOp ){",
          "1999:       aOp = p->aOp;",
          "2000:     }else{",
          "2003:       int j;",
          "2004:       i -= p->nOp;",
          "2005:       assert( apSub!=0 );",
          "2006:       assert( nSub>0 );",
          "2007:       for(j=0; i>=apSub[j]->nOp; j++){",
          "2008:         i -= apSub[j]->nOp;",
          "2009:         assert( i<apSub[j]->nOp || j+1<nSub );",
          "2010:       }",
          "2011:       aOp = apSub[j]->aOp;",
          "2012:     }",
          "2019:     if( pSub!=0 && aOp[i].p4type==P4_SUBPROGRAM ){",
          "2020:       int nByte = (nSub+1)*sizeof(SubProgram*);",
          "2021:       int j;",
          "2022:       for(j=0; j<nSub; j++){",
          "2023:         if( apSub[j]==aOp[i].p4.pProgram ) break;",
          "2024:       }",
          "2025:       if( j==nSub ){",
          "2026:         p->rc = sqlite3VdbeMemGrow(pSub, nByte, nSub!=0);",
          "2027:         if( p->rc!=SQLITE_OK ){",
          "2028:           rc = SQLITE_ERROR;",
          "2029:           break;",
          "2030:         }",
          "2031:         apSub = (SubProgram **)pSub->z;",
          "2032:         apSub[nSub++] = aOp[i].p4.pProgram;",
          "2033:         pSub->flags |= MEM_Blob;",
          "2034:         pSub->n = nSub*sizeof(SubProgram*);",
          "2035:         nRow += aOp[i].p4.pProgram->nOp;",
          "2036:       }",
          "2037:     }",
          "2038:     if( !bEqp ) break;",
          "2039:     if( aOp[i].opcode==OP_Explain ) break;",
          "2040:     if( aOp[i].opcode==OP_Init && p->pc>1 ) break;",
          "2041:   }",
          "2045:   return rc;",
          "2046: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1983: int sqlite3VdbeList(",
          "1985: ){",
          "1994:   int bListSubprogs = (p->explain==1 || (db->flags & SQLITE_TriggerEQP)!=0);",
          "1997:   assert( p->explain );",
          "1998:   assert( p->magic==VDBE_MAGIC_RUN );",
          "",
          "[Removed Lines]",
          "1995:   Op *pOp = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2012:     return SQLITE_ERROR;",
          "2013:   }",
          "2023:   if( bListSubprogs ){",
          "",
          "[Removed Lines]",
          "2022:   nRow = p->nOp;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2028:     assert( p->nMem>9 );",
          "2029:     pSub = &p->aMem[9];",
          "2039:   }",
          "2095:   if( rc==SQLITE_OK ){",
          "2096:     if( db->u1.isInterrupted ){",
          "2097:       p->rc = SQLITE_INTERRUPT;",
          "2098:       rc = SQLITE_ERROR;",
          "",
          "[Removed Lines]",
          "2030:     if( pSub->flags&MEM_Blob ){",
          "2033:       nSub = pSub->n/sizeof(Vdbe*);",
          "2034:       apSub = (SubProgram **)pSub->z;",
          "2035:     }",
          "2036:     for(i=0; i<nSub; i++){",
          "2037:       nRow += apSub[i]->nOp;",
          "2038:     }",
          "2042:     i = p->pc++;",
          "2043:     if( i>=nRow ){",
          "2044:       p->rc = SQLITE_OK;",
          "2045:       rc = SQLITE_DONE;",
          "2046:       break;",
          "2047:     }",
          "2048:     if( i<p->nOp ){",
          "2051:       pOp = &p->aOp[i];",
          "2052:     }else{",
          "2055:       int j;",
          "2056:       i -= p->nOp;",
          "2057:       assert( apSub!=0 );",
          "2058:       assert( nSub>0 );",
          "2059:       for(j=0; i>=apSub[j]->nOp; j++){",
          "2060:         i -= apSub[j]->nOp;",
          "2061:         assert( i<apSub[j]->nOp || j+1<nSub );",
          "2062:       }",
          "2063:       pOp = &apSub[j]->aOp[i];",
          "2064:     }",
          "2071:     if( bListSubprogs && pOp->p4type==P4_SUBPROGRAM ){",
          "2072:       int nByte = (nSub+1)*sizeof(SubProgram*);",
          "2073:       int j;",
          "2074:       for(j=0; j<nSub; j++){",
          "2075:         if( apSub[j]==pOp->p4.pProgram ) break;",
          "2076:       }",
          "2077:       if( j==nSub ){",
          "2078:         p->rc = sqlite3VdbeMemGrow(pSub, nByte, nSub!=0);",
          "2079:         if( p->rc!=SQLITE_OK ){",
          "2080:           rc = SQLITE_ERROR;",
          "2081:           break;",
          "2082:         }",
          "2083:         apSub = (SubProgram **)pSub->z;",
          "2084:         apSub[nSub++] = pOp->p4.pProgram;",
          "2085:         pSub->flags |= MEM_Blob;",
          "2086:         pSub->n = nSub*sizeof(SubProgram*);",
          "2087:         nRow += pOp->p4.pProgram->nOp;",
          "2088:       }",
          "2089:     }",
          "2090:     if( p->explain<2 ) break;",
          "2091:     if( pOp->opcode==OP_Explain ) break;",
          "2092:     if( pOp->opcode==OP_Init && p->pc>1 ) break;",
          "2093:   }",
          "",
          "[Added Lines]",
          "2122:   }else{",
          "2123:     pSub = 0;",
          "2127:   rc = sqlite3VdbeNextOpcode(p, pSub, p->explain==2, &p->pc, &i, &aOp);",
          "2130:     pOp = aOp + i;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "eb110d9687ca31df72a553012965b838235ed80b",
      "candidate_info": {
        "commit_hash": "eb110d9687ca31df72a553012965b838235ed80b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/eb110d9687ca31df72a553012965b838235ed80b",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/resolve.c",
          "src/select.c",
          "src/shell.c.in",
          "test/altertab.test",
          "test/window1.test"
        ],
        "message": "Merge updates from trunk.\n\nFossilOrigin-Name: 348c40136c8ec20f36ccdd4c8a6d4ec2d8274328b86b25b385813e3aae31ea8b",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/resolve.c||src/resolve.c",
          "src/select.c||src/select.c",
          "src/shell.c.in||src/shell.c.in",
          "test/altertab.test||test/altertab.test",
          "test/window1.test||test/window1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 6e11c03f84efa93b218b07e39b6b56b1d872639f39c18498ee54d8cd8364d4f5",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "755:   }",
          "756: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "761: static void unmapColumnIdlistNames(",
          "762:   Parse *pParse,",
          "763:   IdList *pIdList",
          "764: ){",
          "765:   if( pIdList ){",
          "766:     int ii;",
          "767:     for(ii=0; ii<pIdList->nId; ii++){",
          "768:       sqlite3RenameTokenRemap(pParse, 0, (void*)pIdList->a[ii].zName);",
          "769:     }",
          "770:   }",
          "771: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "776:     for(i=0; i<pSrc->nSrc; i++){",
          "777:       sqlite3RenameTokenRemap(pParse, 0, (void*)pSrc->a[i].zName);",
          "778:       if( sqlite3WalkExpr(pWalker, pSrc->a[i].pOn) ) return WRC_Abort;",
          "779:     }",
          "780:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "794:       unmapColumnIdlistNames(pParse, pSrc->a[i].pUsing);",
          "",
          "---------------"
        ],
        "src/resolve.c||src/resolve.c": [
          "File: src/resolve.c -> src/resolve.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1193:   nc.nErr = 0;",
          "1194:   db = pParse->db;",
          "1195:   savedSuppErr = db->suppressErr;",
          "1197:   rc = sqlite3ResolveExprNames(&nc, pE);",
          "1198:   db->suppressErr = savedSuppErr;",
          "1199:   if( rc ) return 0;",
          "",
          "[Removed Lines]",
          "1196:   db->suppressErr = 1;",
          "",
          "[Added Lines]",
          "1196:   if( IN_RENAME_OBJECT==0 ) db->suppressErr = 1;",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5388:   struct AggInfo_func *pFunc;",
          "5389:   int nReg = pAggInfo->nFunc + pAggInfo->nColumn;",
          "5390:   if( nReg==0 ) return;",
          "5391: #ifdef SQLITE_DEBUG",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5391:   if( pParse->nErr ) return;",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in"
        ],
        "test/altertab.test||test/altertab.test": [
          "File: test/altertab.test -> test/altertab.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "594: do_execsql_test 18.1.0 {",
          "595:   CREATE TABLE t0 (c0 INTEGER, PRIMARY KEY(c0)) WITHOUT ROWID;",
          "596: }",
          "598: do_execsql_test 18.1.1 {",
          "599:   ALTER TABLE t0 RENAME COLUMN c0 TO c1;",
          "600: }",
          "",
          "[Removed Lines]",
          "597: breakpoint",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "630:   SELECT * FROM t2;",
          "631: } {1 1 1 1 1 1 1 1}",
          "633: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "632: # Ticket 4722bdab08cb14",
          "633: reset_db",
          "634: do_execsql_test 20.0 {",
          "635:   CREATE TABLE a(a);",
          "636:   CREATE VIEW b AS SELECT(SELECT *FROM c JOIN a USING(d, a, a, a) JOIN a) IN();",
          "637: }",
          "638: do_execsql_test 20.1 {",
          "639:   ALTER TABLE a RENAME a TO e;",
          "640: } {}",
          "642: reset_db",
          "643: do_execsql_test 21.0 {",
          "644:   CREATE TABLE a(b);",
          "645:   CREATE VIEW c AS",
          "646:       SELECT NULL INTERSECT",
          "647:       SELECT NULL ORDER BY",
          "648:       likelihood(NULL, (d, (SELECT c)));",
          "649: } {}",
          "650: do_catchsql_test 21.1 {",
          "651:   SELECT likelihood(NULL, (d, (SELECT c)));",
          "652: } {1 {second argument to likelihood() must be a constant between 0.0 and 1.0}}",
          "653: do_catchsql_test 21.2 {",
          "654:   SELECT * FROM c;",
          "655: } {1 {1st ORDER BY term does not match any column in the result set}}",
          "657: do_catchsql_test 21.3 {",
          "658:   ALTER TABLE a RENAME TO e;",
          "659: } {1 {error in view c: 1st ORDER BY term does not match any column in the result set}}",
          "",
          "---------------"
        ],
        "test/window1.test||test/window1.test": [
          "File: test/window1.test -> test/window1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1653: SELECT * FROM (SELECT * FROM t1 NATURAL JOIN t1 WHERE a%1 OR ((SELECT sum(a)OVER(ORDER BY a)) AND a<=10)) NATURAL JOIN t1 WHERE a=1 OR ((SELECT sum((SELECT * FROM (SELECT * FROM (SELECT * FROM t1 NATURAL JOIN t1 WHERE a%1 OR ((SELECT sum(a)OVER(ORDER BY a)) AND a<=10)) NATURAL JOIN t1 WHERE a=1 OR ((SELECT sum((SELECT * FROM t1 NATURAL JOIN t1 WHERE a=1 OR ((SELECT sum(a)OVER(ORDER BY a)) AND a<=10)))OVER(ORDER BY a% 1 )) AND a<=10)) NATURAL JOIN t1 WHERE a=1 OR ((SELECT sum(a)OVER(ORDER BY a)) AND 10<=a)))OVER(ORDER BY a%5)) AND a<=10);",
          "1654: } {10.0}",
          "",
          "[Removed Lines]",
          "1656: finish_test",
          "",
          "[Added Lines]",
          "1656: # 2020-04-03 ticket af4556bb5c285c08",
          "1657: #",
          "1658: reset_db",
          "1659: do_catchsql_test 51.1 {",
          "1660:   CREATE TABLE a(b, c);",
          "1661:   SELECT c FROM a GROUP BY c",
          "1662:     HAVING(SELECT(sum(b) OVER(ORDER BY b),",
          "1663:                   sum(b) OVER(PARTITION BY min(DISTINCT c), c ORDER BY b)));",
          "1664: } {1 {row value misused}}",
          "1666: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}