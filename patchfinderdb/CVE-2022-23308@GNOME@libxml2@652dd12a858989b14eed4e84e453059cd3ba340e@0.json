{
  "cve_id": "CVE-2022-23308",
  "cve_desc": "valid.c in libxml2 before 2.9.13 has a use-after-free of ID and IDREF attributes.",
  "repo": "GNOME/libxml2",
  "patch_hash": "652dd12a858989b14eed4e84e453059cd3ba340e",
  "patch_info": {
    "commit_hash": "652dd12a858989b14eed4e84e453059cd3ba340e",
    "repo": "GNOME/libxml2",
    "commit_url": "https://github.com/GNOME/libxml2/commit/652dd12a858989b14eed4e84e453059cd3ba340e",
    "files": [
      "result/XInclude/ns1.xml.rdr",
      "valid.c"
    ],
    "message": "[CVE-2022-23308] Use-after-free of ID and IDREF attributes\n\nIf a document is parsed with XML_PARSE_DTDVALID and without\nXML_PARSE_NOENT, the value of ID attributes has to be normalized after\npotentially expanding entities in xmlRemoveID. Otherwise, later calls\nto xmlGetID can return a pointer to previously freed memory.\n\nID attributes which are empty or contain only whitespace after\nentity expansion are affected in a similar way. This is fixed by\nnot storing such attributes in the ID table.\n\nThe test to detect streaming mode when validating against a DTD was\nbroken. In connection with the defects above, this could result in a\nuse-after-free when using the xmlReader interface with validation.\nFix detection of streaming mode to avoid similar issues. (This changes\nthe expected result of a test case. But as far as I can tell, using the\nXML reader with XIncludes referencing the root document never worked\nproperly, anyway.)\n\nAll of these issues can result in denial of service. Using xmlReader\nwith validation could result in disclosure of memory via the error\nchannel, typically stderr. The security impact of xmlGetID returning\na pointer to freed memory depends on the application. The typical use\ncase of calling xmlGetID on an unmodified document is not affected.",
    "before_after_code_files": [
      "result/XInclude/ns1.xml.rdr||result/XInclude/ns1.xml.rdr",
      "valid.c||valid.c"
    ]
  },
  "patch_diff": {
    "result/XInclude/ns1.xml.rdr||result/XInclude/ns1.xml.rdr": [
      "File: result/XInclude/ns1.xml.rdr -> result/XInclude/ns1.xml.rdr",
      "--- Hunk 1 ---",
      "[Context before]",
      "1: 0 1 doc 0 0",
      "2: 1 14 #text 0 1",
      "5: 1 14 #text 0 1",
      "7: 1 1 elem 0 0",
      "",
      "[Removed Lines]",
      "4: 1 1 ns:elem 1 0",
      "",
      "[Added Lines]",
      "4: 1 1 xi:include 1 0",
      "",
      "---------------"
    ],
    "valid.c||valid.c": [
      "File: valid.c -> valid.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "479:     return (ret);",
      "480: }",
      "482: #ifdef DEBUG_VALID_ALGO",
      "483: static void",
      "484: xmlValidPrintNode(xmlNodePtr cur) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "488: static void",
      "489: xmlValidNormalizeString(xmlChar *str) {",
      "490:     xmlChar *dst;",
      "491:     const xmlChar *src;",
      "493:     if (str == NULL)",
      "494:         return;",
      "495:     src = str;",
      "496:     dst = str;",
      "498:     while (*src == 0x20) src++;",
      "499:     while (*src != 0) {",
      "500:  if (*src == 0x20) {",
      "501:      while (*src == 0x20) src++;",
      "502:      if (*src != 0)",
      "504:  } else {",
      "506:  }",
      "507:     }",
      "509: }",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "2607:      (xmlDictOwns(dict, (const xmlChar *)(str)) == 0))) \\",
      "2608:      xmlFree((char *)(str));",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2639: static int",
      "2640: xmlIsStreaming(xmlValidCtxtPtr ctxt) {",
      "2641:     xmlParserCtxtPtr pctxt;",
      "2643:     if (ctxt == NULL)",
      "2644:         return(0);",
      "2650:     if ((ctxt->finishDtd != XML_CTXT_FINISH_DTD_0) &&",
      "2651:         (ctxt->finishDtd != XML_CTXT_FINISH_DTD_1))",
      "2652:         return(0);",
      "2653:     pctxt = ctxt->userData;",
      "2654:     return(pctxt->parseMode == XML_PARSE_READER);",
      "2655: }",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "2650:     if (doc == NULL) {",
      "2651:  return(NULL);",
      "2652:     }",
      "2654:  return(NULL);",
      "2655:     }",
      "2656:     if (attr == NULL) {",
      "",
      "[Removed Lines]",
      "2653:     if (value == NULL) {",
      "",
      "[Added Lines]",
      "2700:     if ((value == NULL) || (value[0] == 0)) {",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "2682:     ret->value = xmlStrdup(value);",
      "2683:     ret->doc = doc;",
      "",
      "[Removed Lines]",
      "2684:     if ((ctxt != NULL) && (ctxt->vstateNr != 0)) {",
      "",
      "[Added Lines]",
      "2731:     if (xmlIsStreaming(ctxt)) {",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "2820:     ID = xmlNodeListGetString(doc, attr->children, 1);",
      "2821:     if (ID == NULL)",
      "2822:         return(-1);",
      "2824:     id = xmlHashLookup(table, ID);",
      "2825:     if (id == NULL || id->attr != attr) {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2870:     xmlValidNormalizeString(ID);",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "3011:     ret->value = xmlStrdup(value);",
      "",
      "[Removed Lines]",
      "3012:     if ((ctxt != NULL) && (ctxt->vstateNr != 0)) {",
      "",
      "[Added Lines]",
      "3060:     if (xmlIsStreaming(ctxt)) {",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "4028: xmlChar *",
      "4029: xmlValidCtxtNormalizeAttributeValue(xmlValidCtxtPtr ctxt, xmlDocPtr doc,",
      "4030:       xmlNodePtr elem, const xmlChar *name, const xmlChar *value) {",
      "4033:     xmlAttributePtr attrDecl = NULL;",
      "4034:     int extsubset = 0;",
      "",
      "[Removed Lines]",
      "4031:     xmlChar *ret, *dst;",
      "4032:     const xmlChar *src;",
      "",
      "[Added Lines]",
      "4079:     xmlChar *ret;",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "4070:     ret = xmlStrdup(value);",
      "4071:     if (ret == NULL)",
      "4072:  return(NULL);",
      "4086:     if ((doc->standalone) && (extsubset == 1) && (!xmlStrEqual(value, ret))) {",
      "4087:  xmlErrValidNode(ctxt, elem, XML_DTD_NOT_STANDALONE,",
      "4088: \"standalone: %s on %s value had to be normalized based on external subset declaration\\n\",",
      "",
      "[Removed Lines]",
      "4073:     src = value;",
      "4074:     dst = ret;",
      "4075:     while (*src == 0x20) src++;",
      "4076:     while (*src != 0) {",
      "4077:  if (*src == 0x20) {",
      "4078:      while (*src == 0x20) src++;",
      "4079:      if (*src != 0)",
      "4081:  } else {",
      "4083:  }",
      "4084:     }",
      "",
      "[Added Lines]",
      "4120:     xmlValidNormalizeString(ret);",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "4114: xmlChar *",
      "4115: xmlValidNormalizeAttributeValue(xmlDocPtr doc, xmlNodePtr elem,",
      "4116:            const xmlChar *name, const xmlChar *value) {",
      "4119:     xmlAttributePtr attrDecl = NULL;",
      "4121:     if (doc == NULL) return(NULL);",
      "",
      "[Removed Lines]",
      "4117:     xmlChar *ret, *dst;",
      "4118:     const xmlChar *src;",
      "",
      "[Added Lines]",
      "4152:     xmlChar *ret;",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "4145:     ret = xmlStrdup(value);",
      "4146:     if (ret == NULL)",
      "4147:  return(NULL);",
      "4161:     return(ret);",
      "4162: }",
      "",
      "[Removed Lines]",
      "4148:     src = value;",
      "4149:     dst = ret;",
      "4150:     while (*src == 0x20) src++;",
      "4151:     while (*src != 0) {",
      "4152:  if (*src == 0x20) {",
      "4153:      while (*src == 0x20) src++;",
      "4154:      if (*src != 0)",
      "4156:  } else {",
      "4158:  }",
      "4159:     }",
      "",
      "[Added Lines]",
      "4182:     xmlValidNormalizeString(ret);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "d7cb33cf44aa688f24215c9cd398c1a26f0d25ff",
      "candidate_info": {
        "commit_hash": "d7cb33cf44aa688f24215c9cd398c1a26f0d25ff",
        "repo": "GNOME/libxml2",
        "commit_url": "https://github.com/GNOME/libxml2/commit/d7cb33cf44aa688f24215c9cd398c1a26f0d25ff",
        "files": [
          "HTMLparser.c",
          "SAX2.c",
          "include/libxml/valid.h",
          "parserInternals.c",
          "valid.c"
        ],
        "message": "Rework validation context flags\n\nUse a bitmask instead of magic values to\n\n- keep track whether the validation context is part of a parser context\n- keep track whether xmlValidateDtdFinal was called\n\nThis allows to add addtional flags later.\n\nNote that this deliberately changes the name of a public struct member,\nassuming that this was always private data never to be used by client\ncode.",
        "before_after_code_files": [
          "HTMLparser.c||HTMLparser.c",
          "SAX2.c||SAX2.c",
          "include/libxml/valid.h||include/libxml/valid.h",
          "parserInternals.c||parserInternals.c",
          "valid.c||valid.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "valid.c||valid.c"
          ],
          "candidate": [
            "valid.c||valid.c"
          ]
        }
      },
      "candidate_diff": {
        "HTMLparser.c||HTMLparser.c": [
          "File: HTMLparser.c -> HTMLparser.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5118:     ctxt->linenumbers = xmlLineNumbersDefaultValue;",
          "5119:     ctxt->keepBlanks = xmlKeepBlanksDefaultValue;",
          "5120:     ctxt->html = 1;",
          "5122:     ctxt->vctxt.userData = ctxt;",
          "5123:     ctxt->vctxt.error = xmlParserValidityError;",
          "5124:     ctxt->vctxt.warning = xmlParserValidityWarning;",
          "",
          "[Removed Lines]",
          "5121:     ctxt->vctxt.finishDtd = XML_CTXT_FINISH_DTD_0;",
          "",
          "[Added Lines]",
          "5121:     ctxt->vctxt.flags = XML_VCTXT_USE_PCTXT;",
          "",
          "---------------"
        ],
        "SAX2.c||SAX2.c": [
          "File: SAX2.c -> SAX2.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1751:  int chk;",
          "1753:  chk = xmlValidateDtdFinal(&ctxt->vctxt, ctxt->myDoc);",
          "",
          "[Removed Lines]",
          "1750:     if ((ctxt->validate) && (ctxt->vctxt.finishDtd == XML_CTXT_FINISH_DTD_0)) {",
          "",
          "[Added Lines]",
          "1750:     if ((ctxt->validate) &&",
          "1751:         ((ctxt->vctxt.flags & XML_VCTXT_DTD_VALIDATED) == 0)) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1756:  if (chk < 0)",
          "1757:      ctxt->wellFormed = 0;",
          "1758:  ctxt->valid &= xmlValidateRoot(&ctxt->vctxt, ctxt->myDoc);",
          "1760:     }",
          "",
          "[Removed Lines]",
          "1759:  ctxt->vctxt.finishDtd = XML_CTXT_FINISH_DTD_1;",
          "",
          "[Added Lines]",
          "1760:  ctxt->vctxt.flags |= XML_VCTXT_DTD_VALIDATED;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2409:  int chk;",
          "2411:  chk = xmlValidateDtdFinal(&ctxt->vctxt, ctxt->myDoc);",
          "",
          "[Removed Lines]",
          "2408:     if ((ctxt->validate) && (ctxt->vctxt.finishDtd == XML_CTXT_FINISH_DTD_0)) {",
          "",
          "[Added Lines]",
          "2409:     if ((ctxt->validate) &&",
          "2410:         ((ctxt->vctxt.flags & XML_VCTXT_DTD_VALIDATED) == 0)) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2414:  if (chk < 0)",
          "2415:      ctxt->wellFormed = 0;",
          "2416:  ctxt->valid &= xmlValidateRoot(&ctxt->vctxt, ctxt->myDoc);",
          "2418:     }",
          "2420: }",
          "",
          "[Removed Lines]",
          "2417:  ctxt->vctxt.finishDtd = XML_CTXT_FINISH_DTD_1;",
          "",
          "[Added Lines]",
          "2419:  ctxt->vctxt.flags |= XML_VCTXT_DTD_VALIDATED;",
          "",
          "---------------"
        ],
        "include/libxml/valid.h||include/libxml/valid.h": [
          "File: include/libxml/valid.h -> include/libxml/valid.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "61: #ifdef IN_LIBXML",
          "74: #endif",
          "",
          "[Removed Lines]",
          "67: #define XML_CTXT_FINISH_DTD_0 0xabcd1234",
          "73: #define XML_CTXT_FINISH_DTD_1 0xabcd1235",
          "",
          "[Added Lines]",
          "67: #define XML_VCTXT_DTD_VALIDATED (1u << 0)",
          "73: #define XML_VCTXT_USE_PCTXT (1u << 1)",
          "",
          "---------------"
        ],
        "parserInternals.c||parserInternals.c": [
          "File: parserInternals.c -> parserInternals.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1733:  ctxt->options |= XML_PARSE_NOBLANKS;",
          "1734:     }",
          "1737:     ctxt->vctxt.userData = ctxt;",
          "1738:     ctxt->vctxt.error = xmlParserValidityError;",
          "1739:     ctxt->vctxt.warning = xmlParserValidityWarning;",
          "",
          "[Removed Lines]",
          "1736:     ctxt->vctxt.finishDtd = XML_CTXT_FINISH_DTD_0;",
          "",
          "[Added Lines]",
          "1736:     ctxt->vctxt.flags = XML_VCTXT_USE_PCTXT;",
          "",
          "---------------"
        ],
        "valid.c||valid.c": [
          "File: valid.c -> valid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "64:     if (ctxt != NULL) {",
          "65:         channel = ctxt->error;",
          "66:         data = ctxt->userData;",
          "71:      long delta = (char *) ctxt - (char *) ctxt->userData;",
          "72:      if ((delta > 0) && (delta < 250))",
          "73:   pctxt = ctxt->userData;",
          "",
          "[Removed Lines]",
          "69:  if ((ctxt->finishDtd == XML_CTXT_FINISH_DTD_0) ||",
          "70:      (ctxt->finishDtd == XML_CTXT_FINISH_DTD_1)) {",
          "",
          "[Added Lines]",
          "69:  if (ctxt->flags & XML_VCTXT_USE_PCTXT) {",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "104:     if (ctxt != NULL) {",
          "105:         channel = ctxt->error;",
          "106:         data = ctxt->userData;",
          "111:      long delta = (char *) ctxt - (char *) ctxt->userData;",
          "112:      if ((delta > 0) && (delta < 250))",
          "113:   pctxt = ctxt->userData;",
          "",
          "[Removed Lines]",
          "109:  if ((ctxt->finishDtd == XML_CTXT_FINISH_DTD_0) ||",
          "110:      (ctxt->finishDtd == XML_CTXT_FINISH_DTD_1)) {",
          "",
          "[Added Lines]",
          "108:  if (ctxt->flags & XML_VCTXT_USE_PCTXT) {",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "151:     if (ctxt != NULL) {",
          "152:         channel = ctxt->error;",
          "153:         data = ctxt->userData;",
          "158:      long delta = (char *) ctxt - (char *) ctxt->userData;",
          "159:      if ((delta > 0) && (delta < 250))",
          "160:   pctxt = ctxt->userData;",
          "",
          "[Removed Lines]",
          "156:  if ((ctxt->finishDtd == XML_CTXT_FINISH_DTD_0) ||",
          "157:      (ctxt->finishDtd == XML_CTXT_FINISH_DTD_1)) {",
          "",
          "[Added Lines]",
          "154:  if (ctxt->flags & XML_VCTXT_USE_PCTXT) {",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "194:     if (ctxt != NULL) {",
          "195:         channel = ctxt->error;",
          "196:         data = ctxt->userData;",
          "201:      long delta = (char *) ctxt - (char *) ctxt->userData;",
          "202:      if ((delta > 0) && (delta < 250))",
          "203:   pctxt = ctxt->userData;",
          "",
          "[Removed Lines]",
          "199:  if ((ctxt->finishDtd == XML_CTXT_FINISH_DTD_0) ||",
          "200:      (ctxt->finishDtd == XML_CTXT_FINISH_DTD_1)) {",
          "",
          "[Added Lines]",
          "196:  if (ctxt->flags & XML_VCTXT_USE_PCTXT) {",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "235:     if (ctxt != NULL) {",
          "236:         channel = ctxt->warning;",
          "237:         data = ctxt->userData;",
          "242:      long delta = (char *) ctxt - (char *) ctxt->userData;",
          "243:      if ((delta > 0) && (delta < 250))",
          "244:   pctxt = ctxt->userData;",
          "",
          "[Removed Lines]",
          "240:  if ((ctxt->finishDtd == XML_CTXT_FINISH_DTD_0) ||",
          "241:      (ctxt->finishDtd == XML_CTXT_FINISH_DTD_1)) {",
          "",
          "[Added Lines]",
          "236:  if (ctxt->flags & XML_VCTXT_USE_PCTXT) {",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1648:  ret->content = content;",
          "1649:  if (content != NULL)",
          "1650:      content->parent = (xmlElementContentPtr) 1;",
          "",
          "[Removed Lines]",
          "1645:     if ((ctxt != NULL) &&",
          "1646:         ((ctxt->finishDtd == XML_CTXT_FINISH_DTD_0) ||",
          "1647:          (ctxt->finishDtd == XML_CTXT_FINISH_DTD_1))) {",
          "",
          "[Added Lines]",
          "1640:     if ((ctxt != NULL) && (ctxt->flags & XML_VCTXT_USE_PCTXT)) {",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2643:     if (ctxt == NULL)",
          "2644:         return(0);",
          "2652:         return(0);",
          "2653:     pctxt = ctxt->userData;",
          "2654:     return(pctxt->parseMode == XML_PARSE_READER);",
          "",
          "[Removed Lines]",
          "2650:     if ((ctxt->finishDtd != XML_CTXT_FINISH_DTD_0) &&",
          "2651:         (ctxt->finishDtd != XML_CTXT_FINISH_DTD_1))",
          "",
          "[Added Lines]",
          "2638:     if ((ctxt->flags & XML_VCTXT_USE_PCTXT) == 0)",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "6677:     }",
          "",
          "[Removed Lines]",
          "6680:     save = ctxt->finishDtd;",
          "6681:     ctxt->finishDtd = 0;",
          "",
          "[Added Lines]",
          "6667:     save = ctxt->flags;",
          "6668:     ctxt->flags &= ~XML_VCTXT_USE_PCTXT;",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "6694:     ctxt->valid = 1;",
          "6695:     xmlHashScan(table, xmlValidateCheckRefCallback, ctxt);",
          "6698:     return(ctxt->valid);",
          "6699: }",
          "",
          "[Removed Lines]",
          "6697:     ctxt->finishDtd = save;",
          "",
          "[Added Lines]",
          "6684:     ctxt->flags = save;",
          "",
          "---------------"
        ]
      }
    }
  ]
}