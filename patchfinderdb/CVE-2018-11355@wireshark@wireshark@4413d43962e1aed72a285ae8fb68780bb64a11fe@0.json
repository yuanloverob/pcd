{
  "cve_id": "CVE-2018-11355",
  "cve_desc": "In Wireshark 2.6.0, the RTCP dissector could crash. This was addressed in epan/dissectors/packet-rtcp.c by avoiding a buffer overflow for packet status chunks.",
  "repo": "wireshark/wireshark",
  "patch_hash": "4413d43962e1aed72a285ae8fb68780bb64a11fe",
  "patch_info": {
    "commit_hash": "4413d43962e1aed72a285ae8fb68780bb64a11fe",
    "repo": "wireshark/wireshark",
    "commit_url": "https://github.com/wireshark/wireshark/commit/4413d43962e1aed72a285ae8fb68780bb64a11fe",
    "files": [
      "epan/dissectors/packet-rtcp.c"
    ],
    "message": "rtcp: fix buffer overflow in transport-cc dissection\n\nWhen the packet status chunks cover more packets than advertised in the\npacket status count field, fail rather than writing past the end.\nhttps://tools.ietf.org/html/draft-holmer-rmcat-transport-wide-cc-extensions-01#section-3.1.2\n\nBug: 14673\nChange-Id: If90baef3610d8f884b0772a4b81d6dcb4ebc9227\nFixes: v2.5.0rc0-2533-ga584eab239 (\"New RTCP dissector for transport-cc\")\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6464\nReviewed-on: https://code.wireshark.org/review/27527\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Rui Zhang <rzhang@grandstream.cn>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>",
    "before_after_code_files": [
      "epan/dissectors/packet-rtcp.c||epan/dissectors/packet-rtcp.c"
    ]
  },
  "patch_diff": {
    "epan/dissectors/packet-rtcp.c||epan/dissectors/packet-rtcp.c": [
      "File: epan/dissectors/packet-rtcp.c -> epan/dissectors/packet-rtcp.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "696: static expert_field ei_rtcp_missing_block_header = EI_INIT;",
      "697: static expert_field ei_rtcp_block_length = EI_INIT;",
      "698: static expert_field ei_srtcp_encrypted_payload = EI_INIT;",
      "701: static int dissect_rtcp( tvbuff_t *tvb, packet_info *pinfo,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "699: static expert_field ei_rtcp_rtpfb_transportcc_bad = EI_INIT;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "1111: #define RTCP_HEADER_LENGTH      12",
      "1113: static int",
      "1115: {",
      "1116:     proto_tree *fci_tree, *pkt_chunk_tree, *recv_delta_tree;",
      "1117:     proto_item *item       = NULL;",
      "1118:     guint8  *delta_array;",
      "1119:     guint16 *pkt_seq_array;",
      "1121:     gint fci_length        = pkt_len - RTCP_HEADER_LENGTH;",
      "1123:     int padding_length     = offset;",
      "1125:     fci_tree = proto_tree_add_subtree_format( rtcp_tree, tvb, offset, fci_length, ett_ssrc, NULL, \"Transport-cc\" );",
      "",
      "[Removed Lines]",
      "1114: dissect_rtcp_rtpfb_transport_cc( tvbuff_t *tvb, int offset, proto_tree *rtcp_tree, int pkt_len)",
      "1120:     guint32 i, pkt_base_seq, pkt_seq_num, pkt_count;",
      "1122:     int delta_index        = 0;",
      "",
      "[Added Lines]",
      "1115: dissect_rtcp_rtpfb_transport_cc( tvbuff_t *tvb, int offset, packet_info *pinfo, proto_tree *rtcp_tree, int pkt_len)",
      "1121:     guint32 i, pkt_base_seq, pkt_seq_num, pkt_count, delta_index = 0;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "1162:         if ( !(chunk & 0x8000) )",
      "1163:         {",
      "1168:             {",
      "1173:                 offset += 2;",
      "1174:                 return offset;",
      "1175:             }",
      "",
      "[Removed Lines]",
      "1165:             int length = chunk & 0x1FFF;",
      "1167:             if ( length <= 0 )",
      "1170:                 delta_array = NULL;",
      "1171:                 pkt_seq_array = NULL;",
      "",
      "[Added Lines]",
      "1165:             guint length = chunk & 0x1FFF;",
      "1167:             if ( length <= 0 || pkt_count - delta_index < length )",
      "1170:                 proto_tree_add_expert(pkt_chunk_tree, pinfo, &ei_rtcp_rtpfb_transportcc_bad, tvb, offset, 2);",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "1182:             else if ( chunk & 0x2000 )",
      "1183:             {",
      "1184:                 proto_item_append_text( item, \" [Run Length Chunk] Small Delta. Length : %d\", length);",
      "1186:                 {",
      "1188:                     delta_array[delta_index+j] = 1;",
      "",
      "[Removed Lines]",
      "1185:                 for (int j = 0; j < length; j++)",
      "",
      "[Added Lines]",
      "1183:                 for (guint j = 0; j < length; j++)",
      "",
      "---------------",
      "--- Hunk 5 ---",
      "[Context before]",
      "1193:             else if ( chunk & 0x4000 )",
      "1194:             {",
      "1195:                 proto_item_append_text( item, \" [Run Length Chunk] Large or Negative Delta. Length : %d\", length);",
      "1197:                 {",
      "1198:                     delta_array[delta_index+j] = 2;",
      "1199:                     pkt_seq_array[delta_index+j] = pkt_seq_num++;",
      "",
      "[Removed Lines]",
      "1196:                 for (int j = 0; j < length; j++)",
      "",
      "[Added Lines]",
      "1194:                 for (guint j = 0; j < length; j++)",
      "",
      "---------------",
      "--- Hunk 6 ---",
      "[Context before]",
      "1238:                     }",
      "1239:                     else",
      "1240:                     {",
      "1241:                         wmem_strbuf_append(status, \" R |\");",
      "1242:                         delta_array[delta_index] = 1;",
      "1243:                         pkt_seq_array[delta_index] = pkt_seq_num++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1239:                         if (delta_index >= pkt_count) {",
      "1241:                             proto_tree_add_expert(pkt_chunk_tree, pinfo, &ei_rtcp_rtpfb_transportcc_bad, tvb, offset, 2);",
      "1242:                             offset += 2;",
      "1243:                             return offset;",
      "1244:                         }",
      "",
      "---------------",
      "--- Hunk 7 ---",
      "[Context before]",
      "1271:                             break;",
      "1274:                             wmem_strbuf_append(status, \" SD |\");",
      "1275:                             delta_array[delta_index] = 1;",
      "1276:                             pkt_seq_array[delta_index] = pkt_seq_num++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1278:                             if (delta_index >= pkt_count) {",
      "1280:                                 proto_tree_add_expert(pkt_chunk_tree, pinfo, &ei_rtcp_rtpfb_transportcc_bad, tvb, offset, 2);",
      "1281:                                 offset += 2;",
      "1282:                                 return offset;",
      "1283:                             }",
      "",
      "---------------",
      "--- Hunk 8 ---",
      "[Context before]",
      "1278:                             break;",
      "1281:                             wmem_strbuf_append(status, \" LD |\");",
      "1282:                             delta_array[delta_index] = 2;",
      "1283:                             pkt_seq_array[delta_index] = pkt_seq_num++;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1291:                             if (delta_index >= pkt_count) {",
      "1293:                                 proto_tree_add_expert(pkt_chunk_tree, pinfo, &ei_rtcp_rtpfb_transportcc_bad, tvb, offset, 2);",
      "1294:                                 offset += 2;",
      "1295:                                 return offset;",
      "1296:                             }",
      "",
      "---------------",
      "--- Hunk 9 ---",
      "[Context before]",
      "1451:         offset = dissect_rtcp_rtpfb_tmmbr(tvb, offset, rtcp_tree, top_item, counter, 1);",
      "1452:       } else if (rtcp_rtpfb_fmt == 15) {",
      "1455:       } else {",
      "1457:         proto_tree_add_item(rtcp_tree, hf_rtcp_fci, tvb, offset, start_offset + packet_length - offset, ENC_NA );",
      "",
      "[Removed Lines]",
      "1454:         offset = dissect_rtcp_rtpfb_transport_cc( tvb, offset, rtcp_tree, packet_length);",
      "",
      "[Added Lines]",
      "1470:         offset = dissect_rtcp_rtpfb_transport_cc( tvb, offset, pinfo, rtcp_tree, packet_length);",
      "",
      "---------------",
      "--- Hunk 10 ---",
      "[Context before]",
      "6832:         { &ei_rtcp_missing_block_header, { \"rtcp.missing_block_header\", PI_PROTOCOL, PI_WARN, \"Missing Required Block Headers\", EXPFILL }},",
      "6833:         { &ei_rtcp_block_length, { \"rtcp.block_length.invalid\", PI_PROTOCOL, PI_WARN, \"Block length is greater than packet length\", EXPFILL }},",
      "6834:         { &ei_srtcp_encrypted_payload, { \"srtcp.encrypted_payload\", PI_UNDECODED, PI_WARN, \"Encrypted RTCP Payload - not dissected\", EXPFILL }},",
      "6835:     };",
      "6837:     module_t *rtcp_module;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "6851:         { &ei_rtcp_rtpfb_transportcc_bad, { \"rtcp.rtpfb.transportcc_bad\", PI_MALFORMED, PI_WARN, \"Too many packet chunks (more than packet status count)\", EXPFILL }},",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "99d27a5fd2c540f837154aca3b3647f5ccfa0c33",
      "candidate_info": {
        "commit_hash": "99d27a5fd2c540f837154aca3b3647f5ccfa0c33",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/99d27a5fd2c540f837154aca3b3647f5ccfa0c33",
        "files": [
          "epan/dissectors/packet-rtcp.c"
        ],
        "message": "rtcp: fix buffer overflow in transport-cc dissection\n\nWhen the packet status chunks cover more packets than advertised in the\npacket status count field, fail rather than writing past the end.\nhttps://tools.ietf.org/html/draft-holmer-rmcat-transport-wide-cc-extensions-01#section-3.1.2\n\nBug: 14673\nChange-Id: If90baef3610d8f884b0772a4b81d6dcb4ebc9227\nFixes: v2.5.0rc0-2533-ga584eab239 (\"New RTCP dissector for transport-cc\")\nLink: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=6464\nReviewed-on: https://code.wireshark.org/review/27527\nPetri-Dish: Peter Wu <peter@lekensteyn.nl>\nTested-by: Petri Dish Buildbot\nReviewed-by: Rui Zhang <rzhang@grandstream.cn>\nReviewed-by: Peter Wu <peter@lekensteyn.nl>\n(cherry picked from commit 4413d43962e1aed72a285ae8fb68780bb64a11fe)\nReviewed-on: https://code.wireshark.org/review/27536",
        "before_after_code_files": [
          "epan/dissectors/packet-rtcp.c||epan/dissectors/packet-rtcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "diff_branch_cherry_pick": 1,
        "diff_branch_same_aad": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-rtcp.c||epan/dissectors/packet-rtcp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-rtcp.c||epan/dissectors/packet-rtcp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-rtcp.c||epan/dissectors/packet-rtcp.c": [
          "File: epan/dissectors/packet-rtcp.c -> epan/dissectors/packet-rtcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "696: static expert_field ei_rtcp_missing_block_header = EI_INIT;",
          "697: static expert_field ei_rtcp_block_length = EI_INIT;",
          "698: static expert_field ei_srtcp_encrypted_payload = EI_INIT;",
          "701: static int dissect_rtcp( tvbuff_t *tvb, packet_info *pinfo,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "699: static expert_field ei_rtcp_rtpfb_transportcc_bad = EI_INIT;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1111: #define RTCP_HEADER_LENGTH      12",
          "1113: static int",
          "1115: {",
          "1116:     proto_tree *fci_tree, *pkt_chunk_tree, *recv_delta_tree;",
          "1117:     proto_item *item       = NULL;",
          "1118:     guint8  *delta_array;",
          "1119:     guint16 *pkt_seq_array;",
          "1121:     gint fci_length        = pkt_len - RTCP_HEADER_LENGTH;",
          "1123:     int padding_length     = offset;",
          "1125:     fci_tree = proto_tree_add_subtree_format( rtcp_tree, tvb, offset, fci_length, ett_ssrc, NULL, \"Transport-cc\" );",
          "",
          "[Removed Lines]",
          "1114: dissect_rtcp_rtpfb_transport_cc( tvbuff_t *tvb, int offset, proto_tree *rtcp_tree, int pkt_len)",
          "1120:     guint32 i, pkt_base_seq, pkt_seq_num, pkt_count;",
          "1122:     int delta_index        = 0;",
          "",
          "[Added Lines]",
          "1115: dissect_rtcp_rtpfb_transport_cc( tvbuff_t *tvb, int offset, packet_info *pinfo, proto_tree *rtcp_tree, int pkt_len)",
          "1121:     guint32 i, pkt_base_seq, pkt_seq_num, pkt_count, delta_index = 0;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1162:         if ( !(chunk & 0x8000) )",
          "1163:         {",
          "1168:             {",
          "1173:                 offset += 2;",
          "1174:                 return offset;",
          "1175:             }",
          "",
          "[Removed Lines]",
          "1165:             int length = chunk & 0x1FFF;",
          "1167:             if ( length <= 0 )",
          "1170:                 delta_array = NULL;",
          "1171:                 pkt_seq_array = NULL;",
          "",
          "[Added Lines]",
          "1165:             guint length = chunk & 0x1FFF;",
          "1167:             if ( length <= 0 || pkt_count - delta_index < length )",
          "1170:                 proto_tree_add_expert(pkt_chunk_tree, pinfo, &ei_rtcp_rtpfb_transportcc_bad, tvb, offset, 2);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1182:             else if ( chunk & 0x2000 )",
          "1183:             {",
          "1184:                 proto_item_append_text( item, \" [Run Length Chunk] Small Delta. Length : %d\", length);",
          "1186:                 {",
          "1188:                     delta_array[delta_index+j] = 1;",
          "",
          "[Removed Lines]",
          "1185:                 for (int j = 0; j < length; j++)",
          "",
          "[Added Lines]",
          "1183:                 for (guint j = 0; j < length; j++)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1193:             else if ( chunk & 0x4000 )",
          "1194:             {",
          "1195:                 proto_item_append_text( item, \" [Run Length Chunk] Large or Negative Delta. Length : %d\", length);",
          "1197:                 {",
          "1198:                     delta_array[delta_index+j] = 2;",
          "1199:                     pkt_seq_array[delta_index+j] = pkt_seq_num++;",
          "",
          "[Removed Lines]",
          "1196:                 for (int j = 0; j < length; j++)",
          "",
          "[Added Lines]",
          "1194:                 for (guint j = 0; j < length; j++)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1238:                     }",
          "1239:                     else",
          "1240:                     {",
          "1241:                         wmem_strbuf_append(status, \" R |\");",
          "1242:                         delta_array[delta_index] = 1;",
          "1243:                         pkt_seq_array[delta_index] = pkt_seq_num++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1239:                         if (delta_index >= pkt_count) {",
          "1241:                             proto_tree_add_expert(pkt_chunk_tree, pinfo, &ei_rtcp_rtpfb_transportcc_bad, tvb, offset, 2);",
          "1242:                             offset += 2;",
          "1243:                             return offset;",
          "1244:                         }",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "1271:                             break;",
          "1274:                             wmem_strbuf_append(status, \" SD |\");",
          "1275:                             delta_array[delta_index] = 1;",
          "1276:                             pkt_seq_array[delta_index] = pkt_seq_num++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1278:                             if (delta_index >= pkt_count) {",
          "1280:                                 proto_tree_add_expert(pkt_chunk_tree, pinfo, &ei_rtcp_rtpfb_transportcc_bad, tvb, offset, 2);",
          "1281:                                 offset += 2;",
          "1282:                                 return offset;",
          "1283:                             }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "1278:                             break;",
          "1281:                             wmem_strbuf_append(status, \" LD |\");",
          "1282:                             delta_array[delta_index] = 2;",
          "1283:                             pkt_seq_array[delta_index] = pkt_seq_num++;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1291:                             if (delta_index >= pkt_count) {",
          "1293:                                 proto_tree_add_expert(pkt_chunk_tree, pinfo, &ei_rtcp_rtpfb_transportcc_bad, tvb, offset, 2);",
          "1294:                                 offset += 2;",
          "1295:                                 return offset;",
          "1296:                             }",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "1451:         offset = dissect_rtcp_rtpfb_tmmbr(tvb, offset, rtcp_tree, top_item, counter, 1);",
          "1452:       } else if (rtcp_rtpfb_fmt == 15) {",
          "1455:       } else {",
          "1457:         proto_tree_add_item(rtcp_tree, hf_rtcp_fci, tvb, offset, start_offset + packet_length - offset, ENC_NA );",
          "",
          "[Removed Lines]",
          "1454:         offset = dissect_rtcp_rtpfb_transport_cc( tvb, offset, rtcp_tree, packet_length);",
          "",
          "[Added Lines]",
          "1470:         offset = dissect_rtcp_rtpfb_transport_cc( tvb, offset, pinfo, rtcp_tree, packet_length);",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "6832:         { &ei_rtcp_missing_block_header, { \"rtcp.missing_block_header\", PI_PROTOCOL, PI_WARN, \"Missing Required Block Headers\", EXPFILL }},",
          "6833:         { &ei_rtcp_block_length, { \"rtcp.block_length.invalid\", PI_PROTOCOL, PI_WARN, \"Block length is greater than packet length\", EXPFILL }},",
          "6834:         { &ei_srtcp_encrypted_payload, { \"srtcp.encrypted_payload\", PI_UNDECODED, PI_WARN, \"Encrypted RTCP Payload - not dissected\", EXPFILL }},",
          "6835:     };",
          "6837:     module_t *rtcp_module;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "6851:         { &ei_rtcp_rtpfb_transportcc_bad, { \"rtcp.rtpfb.transportcc_bad\", PI_MALFORMED, PI_WARN, \"Too many packet chunks (more than packet status count)\", EXPFILL }},",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "a584eab239d55e441433ead40c993e08a24c59fe",
      "candidate_info": {
        "commit_hash": "a584eab239d55e441433ead40c993e08a24c59fe",
        "repo": "wireshark/wireshark",
        "commit_url": "https://github.com/wireshark/wireshark/commit/a584eab239d55e441433ead40c993e08a24c59fe",
        "files": [
          "epan/dissectors/packet-rtcp.c"
        ],
        "message": "New RTCP dissector for transport-cc\n\nBug: 14332\nChange-Id: I49642a9880fc03d38942eebfd6b1015894fef23d\nReviewed-on: https://code.wireshark.org/review/25255\nReviewed-by: Michael Mann <mmann78@netscape.net>\nPetri-Dish: Michael Mann <mmann78@netscape.net>\nTested-by: Petri Dish Buildbot\nReviewed-by: Anders Broman <a.broman58@gmail.com>",
        "before_after_code_files": [
          "epan/dissectors/packet-rtcp.c||epan/dissectors/packet-rtcp.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "epan/dissectors/packet-rtcp.c||epan/dissectors/packet-rtcp.c"
          ],
          "candidate": [
            "epan/dissectors/packet-rtcp.c||epan/dissectors/packet-rtcp.c"
          ]
        }
      },
      "candidate_diff": {
        "epan/dissectors/packet-rtcp.c||epan/dissectors/packet-rtcp.c": [
          "File: epan/dissectors/packet-rtcp.c -> epan/dissectors/packet-rtcp.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "546: static int hf_rtcp_rtpfb_fmt = -1;",
          "547: static int hf_rtcp_rtpfb_nack_pid = -1;",
          "548: static int hf_rtcp_rtpfb_nack_blp = -1;",
          "549: static int hf_rtcp_psfb_fmt = -1;",
          "550: static int hf_rtcp_fci = -1;",
          "551: static int hf_rtcp_psfb_fir_fci_ssrc = -1;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "550: static int hf_rtcp_rtpfb_transport_cc_fci_base_seq = -1;",
          "551: static int hf_rtcp_rtpfb_transport_cc_fci_pkt_stats_cnt = -1;",
          "552: static int hf_rtcp_rtpfb_transport_cc_fci_ref_time = -1;",
          "553: static int hf_rtcp_rtpfb_transport_cc_fci_fb_pkt_cnt = -1;",
          "554: static int hf_rtcp_rtpfb_transport_cc_fci_pkt_chunk = -1;",
          "555: static int hf_rtcp_rtpfb_transport_cc_fci_recv_delta_1_byte = -1;",
          "556: static int hf_rtcp_rtpfb_transport_cc_fci_recv_delta_2_bytes = -1;",
          "557: static int hf_rtcp_rtpfb_transport_cc_fci_recv_delta_padding = -1;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1111:     return offset;",
          "1112: }",
          "1114: static int",
          "1115: dissect_rtcp_rtpfb_nack( tvbuff_t *tvb, int offset, proto_tree *rtcp_tree, proto_item *top_item)",
          "1116: {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1123: #define RTCP_HEADER_LENGTH      12",
          "1125: static int",
          "1126: dissect_rtcp_rtpfb_transport_cc( tvbuff_t *tvb, int offset, proto_tree *rtcp_tree, int pkt_len)",
          "1127: {",
          "1128:     proto_tree *fci_tree, *pkt_chunk_tree, *recv_delta_tree;",
          "1129:     proto_item *item       = NULL;",
          "1130:     guint8  *delta_array;",
          "1131:     guint16 *pkt_seq_array;",
          "1132:     guint32 i, pkt_base_seq, pkt_seq_num, pkt_count;",
          "1133:     gint fci_length        = pkt_len - RTCP_HEADER_LENGTH;",
          "1134:     int delta_index        = 0;",
          "1135:     int padding_length     = offset;",
          "1137:     fci_tree = proto_tree_add_subtree_format( rtcp_tree, tvb, offset, fci_length, ett_ssrc, NULL, \"Transport-cc\" );",
          "1140:     proto_tree_add_item_ret_uint( fci_tree, hf_rtcp_rtpfb_transport_cc_fci_base_seq, tvb, offset, 2, ENC_BIG_ENDIAN, &pkt_base_seq );",
          "1141:     offset += 2;",
          "1142:     pkt_seq_num = pkt_base_seq;",
          "1145:     proto_tree_add_item_ret_uint( fci_tree, hf_rtcp_rtpfb_transport_cc_fci_pkt_stats_cnt, tvb, offset, 2, ENC_BIG_ENDIAN, &pkt_count );",
          "1146:     offset += 2;",
          "1148:     delta_array   = wmem_alloc0_array( wmem_packet_scope(), gint8, pkt_count );",
          "1149:     pkt_seq_array = wmem_alloc0_array( wmem_packet_scope(), gint16, pkt_count );",
          "1152:     proto_tree_add_item( fci_tree, hf_rtcp_rtpfb_transport_cc_fci_ref_time, tvb, offset, 3, ENC_BIG_ENDIAN );",
          "1153:     offset += 3;",
          "1156:     proto_tree_add_item( fci_tree, hf_rtcp_rtpfb_transport_cc_fci_fb_pkt_cnt, tvb, offset, 1, ENC_BIG_ENDIAN );",
          "1157:     offset += 1;",
          "1160:     pkt_chunk_tree = proto_tree_add_subtree_format( fci_tree, tvb, offset, 0, ett_ssrc, NULL, \"Packet Chunks\" );",
          "1162:     for (i = 0; i < pkt_count; )",
          "1163:     {",
          "1164:         guint32 chunk = 0;",
          "1165:         item = proto_tree_add_item_ret_uint( pkt_chunk_tree, hf_rtcp_rtpfb_transport_cc_fci_pkt_chunk, tvb, offset, 2, ENC_BIG_ENDIAN, &chunk );",
          "1174:         if ( !(chunk & 0x8000) )",
          "1175:         {",
          "1177:             int length = chunk & 0x1FFF;",
          "1179:             if ( length <= 0 )",
          "1180:             {",
          "1182:                 delta_array = NULL;",
          "1183:                 pkt_seq_array = NULL;",
          "1185:                 offset += 2;",
          "1186:                 return offset;",
          "1187:             }",
          "1189:             if ( !(chunk & 0x6000) )",
          "1190:             {",
          "1191:                 proto_item_append_text( item, \" [Run Length Chunk] Packet not received. Length : %d\", length);",
          "1192:                 pkt_seq_num += length;",
          "1193:             }",
          "1194:             else if ( chunk & 0x2000 )",
          "1195:             {",
          "1196:                 proto_item_append_text( item, \" [Run Length Chunk] Small Delta. Length : %d\", length);",
          "1197:                 for (int j = 0; j < length; j++)",
          "1198:                 {",
          "1200:                     delta_array[delta_index+j] = 1;",
          "1201:                     pkt_seq_array[delta_index+j] = pkt_seq_num++;",
          "1202:                 }",
          "1203:                 delta_index += length;",
          "1204:             }",
          "1205:             else if ( chunk & 0x4000 )",
          "1206:             {",
          "1207:                 proto_item_append_text( item, \" [Run Length Chunk] Large or Negative Delta. Length : %d\", length);",
          "1208:                 for (int j = 0; j < length; j++)",
          "1209:                 {",
          "1210:                     delta_array[delta_index+j] = 2;",
          "1211:                     pkt_seq_array[delta_index+j] = pkt_seq_num++;",
          "1212:                 }",
          "1213:                 delta_index += length;",
          "1214:             }",
          "1215:             else",
          "1216:             {",
          "1217:                 proto_item_append_text( item, \" [Run Length Chunk] [Reserved]. Length : %d\", length);",
          "1218:                 pkt_seq_num += length;",
          "1219:             }",
          "1221:             i += length;",
          "1223:         }",
          "1224:         else",
          "1225:         {",
          "1226:             wmem_strbuf_t* status = wmem_strbuf_new(wmem_packet_scope(), \"|\");",
          "1229:             if ( !(chunk & 0x4000) )",
          "1230:             {",
          "1233:                 int data = chunk & 0x3FFF;",
          "1234:                 int chunk_count = 14;",
          "1236:                 for (int k = 0; k < chunk_count; k++)",
          "1237:                 {",
          "1238:                     if ( (data & (0x2000>>k)) == 0 )",
          "1239:                     {",
          "1240:                         if ( i + k < pkt_count )",
          "1241:                         {",
          "1242:                             wmem_strbuf_append(status, \" N |\");",
          "1243:                             pkt_seq_num++;",
          "1244:                         }",
          "1245:                         else",
          "1246:                         {",
          "1248:                             wmem_strbuf_append(status, \" _ |\");",
          "1249:                         }",
          "1250:                     }",
          "1251:                     else",
          "1252:                     {",
          "1253:                         wmem_strbuf_append(status, \" R |\");",
          "1254:                         delta_array[delta_index] = 1;",
          "1255:                         pkt_seq_array[delta_index] = pkt_seq_num++;",
          "1256:                         delta_index++;",
          "1257:                     }",
          "1258:                 }",
          "1259:                 proto_item_append_text( item, \" [1 bit Status Vector Chunk]: %s\", wmem_strbuf_get_str(status));",
          "1260:                 i += chunk_count;",
          "1261:             }",
          "1262:             else",
          "1263:             {",
          "1265:                 int chunk_count = 7;",
          "1266:                 int data = chunk & 0x3FFF;",
          "1268:                 for (int k = 0; k < chunk_count; k++)",
          "1269:                 {",
          "1270:                     switch ( (data & (0x3000 >> (2*k))) >> ( 2 * (6-k) ) )",
          "1271:                     {",
          "1273:                             if ( i + k < pkt_count )",
          "1274:                             {",
          "1275:                                 wmem_strbuf_append(status, \" NR |\");",
          "1276:                                 pkt_seq_num++;",
          "1277:                             }",
          "1278:                             else",
          "1279:                             {",
          "1281:                                 wmem_strbuf_append(status, \" __ |\");",
          "1282:                             }",
          "1283:                             break;",
          "1286:                             wmem_strbuf_append(status, \" SD |\");",
          "1287:                             delta_array[delta_index] = 1;",
          "1288:                             pkt_seq_array[delta_index] = pkt_seq_num++;",
          "1289:                             delta_index++;",
          "1290:                             break;",
          "1293:                             wmem_strbuf_append(status, \" LD |\");",
          "1294:                             delta_array[delta_index] = 2;",
          "1295:                             pkt_seq_array[delta_index] = pkt_seq_num++;",
          "1296:                             delta_index++;",
          "1297:                             break;",
          "1300:                         default:",
          "1302:                             wmem_strbuf_append(status, \" WO |\");",
          "1303:                             pkt_seq_num++;",
          "1304:                             break;",
          "1306:                     }",
          "1307:                 }",
          "1309:                 proto_item_append_text( item, \" [2 bits Status Vector Chunk]: %s\", wmem_strbuf_get_str(status));",
          "1310:                 i += chunk_count;",
          "1311:             }",
          "1313:         }",
          "1315:         offset += 2;",
          "1316:     }",
          "1319:     recv_delta_tree = proto_tree_add_subtree_format( fci_tree, tvb, offset, 0, ett_ssrc, NULL, \"Recv Delta\" );",
          "1320:     for (i = 0; i < pkt_count; i++ )",
          "1321:     {",
          "1322:         if ( delta_array[i] == 1 )",
          "1323:         {",
          "1325:             guint32 delta;",
          "1326:             item = proto_tree_add_item_ret_uint( recv_delta_tree, hf_rtcp_rtpfb_transport_cc_fci_recv_delta_1_byte, tvb, offset, 1, ENC_BIG_ENDIAN, &delta );",
          "1328:             proto_item_append_text( item, \" Small Delta: [seq: %d] %lf ms\", pkt_seq_array[i], delta*250.0/1000);",
          "1330:             offset += 1;",
          "1331:         }",
          "1332:         else if ( delta_array[i] == 2 )",
          "1333:         {",
          "1335:             gint16 delta;",
          "1336:             item = proto_tree_add_item( recv_delta_tree, hf_rtcp_rtpfb_transport_cc_fci_recv_delta_2_bytes, tvb, offset, 2, ENC_BIG_ENDIAN);",
          "1337:             delta = tvb_get_ntohs(tvb, offset);",
          "1339:             if ( delta < 0 )",
          "1340:             {",
          "1341:                 proto_item_append_text( item, \" Negative Delta: [seq: %d] %lf ms\", pkt_seq_array[i], delta*250.0/1000 );",
          "1342:             }",
          "1343:             else",
          "1344:             {",
          "1345:                 proto_item_append_text( item, \" Large Delta: [seq: %d] %lf ms\", pkt_seq_array[i], delta*250.0/1000 );",
          "1346:             }",
          "1348:             offset += 2;",
          "1349:         }",
          "1350:         else",
          "1351:         {",
          "1353:             break;",
          "1354:         }",
          "1355:     }",
          "1358:     padding_length = fci_length - (offset - padding_length);",
          "1359:     if ( padding_length > 0 )",
          "1360:     {",
          "1361:         proto_tree_add_item( recv_delta_tree, hf_rtcp_rtpfb_transport_cc_fci_recv_delta_padding, tvb, offset, padding_length, ENC_BIG_ENDIAN );",
          "1362:         offset += padding_length;",
          "1363:     }",
          "1366:     delta_array = NULL;",
          "1367:     pkt_seq_array = NULL;",
          "1369:     return offset;",
          "1370: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1203:         offset = dissect_rtcp_rtpfb_tmmbr(tvb, offset, rtcp_tree, top_item, counter, 0);",
          "1204:       } else if (rtcp_rtpfb_fmt == 4) {",
          "1205:         offset = dissect_rtcp_rtpfb_tmmbr(tvb, offset, rtcp_tree, top_item, counter, 1);",
          "1206:       } else {",
          "1208:         proto_tree_add_item(rtcp_tree, hf_rtcp_fci, tvb, offset, start_offset + packet_length - offset, ENC_NA );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1464:       } else if (rtcp_rtpfb_fmt == 15) {",
          "1466:         offset = dissect_rtcp_rtpfb_transport_cc( tvb, offset, rtcp_tree, packet_length);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "3574:     else if (offset == total_packet_length)",
          "3575:     {",
          "3577:                                             0, 0, TRUE, \"OK - %u bytes\",",
          "3578:                                             offset);",
          "",
          "[Removed Lines]",
          "3576:         ti = proto_tree_add_boolean_format_value(tree, hf_rtcp_length_check, tvb,",
          "",
          "[Added Lines]",
          "3837:         ti = proto_tree_add_boolean_format_value(rtcp_tree, hf_rtcp_length_check, tvb,",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "3581:     }",
          "3582:     else",
          "3583:     {",
          "3585:                                             0, 0, FALSE,",
          "3586:                                             \"Wrong (expected %u bytes, found %d)\",",
          "3587:                                             total_packet_length, offset);",
          "",
          "[Removed Lines]",
          "3584:         ti = proto_tree_add_boolean_format_value(tree, hf_rtcp_length_check, tvb,",
          "",
          "[Added Lines]",
          "3845:         ti = proto_tree_add_boolean_format_value(rtcp_tree, hf_rtcp_length_check, tvb,",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "5507:                 NULL, HFILL",
          "5508:             }",
          "5509:         },",
          "5512:         {",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5771:         {",
          "5772:             &hf_rtcp_rtpfb_transport_cc_fci_base_seq,",
          "5773:             {",
          "5774:                 \"Base Sequence Number\",",
          "5775:                 \"rtcp.rtpfb.transportcc.baseseq\",",
          "5776:                 FT_UINT16,",
          "5777:                 BASE_DEC_HEX,",
          "5778:                 NULL,",
          "5779:                 0x0,",
          "5780:                 NULL, HFILL",
          "5781:             }",
          "5782:         },",
          "5783:         {",
          "5784:             &hf_rtcp_rtpfb_transport_cc_fci_pkt_stats_cnt,",
          "5785:             {",
          "5786:                 \"Packet Status Count\",",
          "5787:                 \"rtcp.rtpfb.transportcc.statuscount\",",
          "5788:                 FT_UINT16,",
          "5789:                 BASE_DEC_HEX,",
          "5790:                 NULL,",
          "5791:                 0x0,",
          "5792:                 NULL, HFILL",
          "5793:             }",
          "5794:         },",
          "5795:         {",
          "5796:             &hf_rtcp_rtpfb_transport_cc_fci_ref_time,",
          "5797:             {",
          "5798:                 \"Reference Time\",",
          "5799:                 \"rtcp.rtpfb.transportcc.reftime\",",
          "5800:                 FT_UINT24,",
          "5801:                 BASE_DEC_HEX,",
          "5802:                 NULL,",
          "5803:                 0x0,",
          "5804:                 NULL, HFILL",
          "5805:             }",
          "5806:         },",
          "5807:         {",
          "5808:             &hf_rtcp_rtpfb_transport_cc_fci_fb_pkt_cnt,",
          "5809:             {",
          "5810:                 \"Feedback Packets Count\",",
          "5811:                 \"rtcp.rtpfb.transportcc.pktcount\",",
          "5812:                 FT_UINT8,",
          "5813:                 BASE_DEC_HEX,",
          "5814:                 NULL,",
          "5815:                 0x0,",
          "5816:                 NULL, HFILL",
          "5817:             }",
          "5818:         },",
          "5819:         {",
          "5820:             &hf_rtcp_rtpfb_transport_cc_fci_pkt_chunk,",
          "5821:             {",
          "5822:                 \"Packet Chunk\",",
          "5823:                 \"rtcp.rtpfb.transportcc.pktchunk\",",
          "5824:                 FT_UINT16,",
          "5825:                 BASE_DEC_HEX,",
          "5826:                 NULL,",
          "5827:                 0x0,",
          "5828:                 NULL, HFILL",
          "5829:             }",
          "5830:         },",
          "5831:         {",
          "5832:             &hf_rtcp_rtpfb_transport_cc_fci_recv_delta_1_byte,",
          "5833:             {",
          "5834:                 \"Recv Delta\",",
          "5835:                 \"rtcp.rtpfb.transportcc.recv_delta\",",
          "5836:                 FT_UINT8,",
          "5837:                 BASE_HEX,",
          "5838:                 NULL,",
          "5839:                 0x0,",
          "5840:                 NULL, HFILL",
          "5841:             }",
          "5842:         },",
          "5843:         {",
          "5844:             &hf_rtcp_rtpfb_transport_cc_fci_recv_delta_2_bytes,",
          "5845:             {",
          "5846:                 \"Recv Delta\",",
          "5847:                 \"rtcp.rtpfb.transportcc.recv_delta\",",
          "5848:                 FT_UINT16,",
          "5849:                 BASE_HEX,",
          "5850:                 NULL,",
          "5851:                 0x0,",
          "5852:                 NULL, HFILL",
          "5853:             }",
          "5854:         },",
          "5855:         {",
          "5856:             &hf_rtcp_rtpfb_transport_cc_fci_recv_delta_padding,",
          "5857:             {",
          "5858:                 \"Recv Delta Padding\",",
          "5859:                 \"rtcp.rtpfb.transportcc.recv_delta.padding\",",
          "5860:                 FT_UINT16,",
          "5861:                 BASE_HEX,",
          "5862:                 NULL,",
          "5863:                 0x0,",
          "5864:                 NULL, HFILL",
          "5865:             }",
          "5866:         },",
          "",
          "---------------"
        ]
      }
    }
  ]
}