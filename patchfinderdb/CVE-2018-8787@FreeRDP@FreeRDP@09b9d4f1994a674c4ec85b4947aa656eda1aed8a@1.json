{
  "cve_id": "CVE-2018-8787",
  "cve_desc": "FreeRDP prior to version 2.0.0-rc4 contains an Integer Overflow that leads to a Heap-Based Buffer Overflow in function gdi_Bitmap_Decompress() and results in a memory corruption and probably even a remote code execution.",
  "repo": "FreeRDP/FreeRDP",
  "patch_hash": "09b9d4f1994a674c4ec85b4947aa656eda1aed8a",
  "patch_info": {
    "commit_hash": "09b9d4f1994a674c4ec85b4947aa656eda1aed8a",
    "repo": "FreeRDP/FreeRDP",
    "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/09b9d4f1994a674c4ec85b4947aa656eda1aed8a",
    "files": [
      "libfreerdp/gdi/graphics.c"
    ],
    "message": "Fixed CVE-2018-8787\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
    "before_after_code_files": [
      "libfreerdp/gdi/graphics.c||libfreerdp/gdi/graphics.c"
    ]
  },
  "patch_diff": {
    "libfreerdp/gdi/graphics.c||libfreerdp/gdi/graphics.c": [
      "File: libfreerdp/gdi/graphics.c -> libfreerdp/gdi/graphics.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "141: {",
      "142:  UINT32 SrcSize = length;",
      "143:  rdpGdi* gdi = context->gdi;",
      "144:  bitmap->compressed = FALSE;",
      "145:  bitmap->format = gdi->dstFormat;",
      "147:  bitmap->data = (BYTE*) _aligned_malloc(bitmap->length, 16);",
      "149:  if (!bitmap->data)",
      "",
      "[Removed Lines]",
      "146:  bitmap->length = DstWidth * DstHeight * GetBytesPerPixel(bitmap->format);",
      "",
      "[Added Lines]",
      "144:  UINT32 size = DstWidth * DstHeight;",
      "148:  if ((GetBytesPerPixel(bitmap->format) == 0) ||",
      "149:      (DstWidth == 0) || (DstHeight == 0) || (DstWidth > UINT32_MAX / DstHeight) ||",
      "150:      (size > (UINT32_MAX / GetBytesPerPixel(bitmap->format))))",
      "151:   return FALSE;",
      "153:  size *= GetBytesPerPixel(bitmap->format);",
      "154:  bitmap->length = size;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "17c363a5162fd4dc77b1df54e48d7bd9bf6b3be7",
      "candidate_info": {
        "commit_hash": "17c363a5162fd4dc77b1df54e48d7bd9bf6b3be7",
        "repo": "FreeRDP/FreeRDP",
        "commit_url": "https://github.com/FreeRDP/FreeRDP/commit/17c363a5162fd4dc77b1df54e48d7bd9bf6b3be7",
        "files": [
          "libfreerdp/codec/zgfx.c"
        ],
        "message": "Fixed CVE-2018-8784\n\nThanks to Eyal Itkin from Check Point Software Technologies.",
        "before_after_code_files": [
          "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/FreeRDP/FreeRDP/pull/5031"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "libfreerdp/codec/zgfx.c||libfreerdp/codec/zgfx.c": [
          "File: libfreerdp/codec/zgfx.c -> libfreerdp/codec/zgfx.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "137:  _zgfx->cBitsCurrent -= _nbits;",
          "138:  _zgfx->bits = _zgfx->BitsCurrent >> _zgfx->cBitsCurrent;",
          "139:  _zgfx->BitsCurrent &= ((1 << _zgfx->cBitsCurrent) - 1);",
          "140: }",
          "142: static void zgfx_history_buffer_ring_write(ZGFX_CONTEXT* zgfx, const BYTE* src, size_t count)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "140:  return TRUE;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "229:  UINT32 count;",
          "230:  UINT32 distance;",
          "231:  BYTE* pbSegment;",
          "235:   return FALSE;",
          "",
          "[Removed Lines]",
          "232:  size_t cbSegment = segmentSize - 1;",
          "234:  if ((Stream_GetRemainingLength(stream) < segmentSize) || (segmentSize < 1))",
          "",
          "[Added Lines]",
          "233:  size_t cbSegment;",
          "235:  if (!zgfx || !stream)",
          "236:   return FALSE;",
          "238:  cbSegment = segmentSize - 1;",
          "240:  if ((Stream_GetRemainingLength(stream) < segmentSize) || (segmentSize < 1) ||",
          "241:      (segmentSize > UINT32_MAX))",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "242:  if (!(flags & PACKET_COMPRESSED))",
          "243:  {",
          "244:   zgfx_history_buffer_ring_write(zgfx, pbSegment, cbSegment);",
          "245:   CopyMemory(zgfx->OutputBuffer, pbSegment, cbSegment);",
          "246:   zgfx->OutputCount = cbSegment;",
          "247:   return TRUE;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253:   if (cbSegment > sizeof(zgfx->OutputBuffer))",
          "254:    return FALSE;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "280:      if (++zgfx->HistoryIndex == zgfx->HistoryBufferSize)",
          "281:       zgfx->HistoryIndex = 0;",
          "283:      zgfx->OutputBuffer[zgfx->OutputCount++] = c;",
          "284:     }",
          "285:     else",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "294:      if (zgfx->OutputCount >= sizeof(zgfx->OutputBuffer))",
          "295:       return FALSE;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "313:        count += zgfx->bits;",
          "314:       }",
          "316:       zgfx_history_buffer_ring_read(zgfx, distance, &(zgfx->OutputBuffer[zgfx->OutputCount]), count);",
          "317:       zgfx_history_buffer_ring_write(zgfx, &(zgfx->OutputBuffer[zgfx->OutputCount]), count);",
          "318:       zgfx->OutputCount += count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "330:       if (count > sizeof(zgfx->OutputBuffer) - zgfx->OutputCount)",
          "331:        return FALSE;",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "325:       zgfx->cBitsRemaining -= zgfx->cBitsCurrent;",
          "326:       zgfx->cBitsCurrent = 0;",
          "327:       zgfx->BitsCurrent = 0;",
          "328:       CopyMemory(&(zgfx->OutputBuffer[zgfx->OutputCount]), zgfx->pbInputCurrent, count);",
          "329:       zgfx_history_buffer_ring_write(zgfx, zgfx->pbInputCurrent, count);",
          "330:       zgfx->pbInputCurrent += count;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "346:       if (count > sizeof(zgfx->OutputBuffer) - zgfx->OutputCount)",
          "347:        return FALSE;",
          "",
          "---------------"
        ]
      }
    }
  ]
}