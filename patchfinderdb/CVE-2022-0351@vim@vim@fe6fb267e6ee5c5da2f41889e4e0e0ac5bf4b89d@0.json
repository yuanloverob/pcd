{
  "cve_id": "CVE-2022-0351",
  "cve_desc": "Access of Memory Location Before Start of Buffer in GitHub repository vim/vim prior to 8.2.",
  "repo": "vim/vim",
  "patch_hash": "fe6fb267e6ee5c5da2f41889e4e0e0ac5bf4b89d",
  "patch_info": {
    "commit_hash": "fe6fb267e6ee5c5da2f41889e4e0e0ac5bf4b89d",
    "repo": "vim/vim",
    "commit_url": "https://github.com/vim/vim/commit/fe6fb267e6ee5c5da2f41889e4e0e0ac5bf4b89d",
    "files": [
      "src/errors.h",
      "src/eval.c",
      "src/testdir/test_eval_stuff.vim",
      "src/version.c"
    ],
    "message": "patch 8.2.4206: condition with many \"(\" causes a crash\n\nProblem:    Condition with many \"(\" causes a crash.\nSolution:   Limit recursion to 1000.",
    "before_after_code_files": [
      "src/errors.h||src/errors.h",
      "src/eval.c||src/eval.c",
      "src/testdir/test_eval_stuff.vim||src/testdir/test_eval_stuff.vim",
      "src/version.c||src/version.c"
    ]
  },
  "patch_diff": {
    "src/errors.h||src/errors.h": [
      "File: src/errors.h -> src/errors.h",
      "--- Hunk 1 ---",
      "[Context before]",
      "2966:  INIT(= N_(\"E1167: Argument name shadows existing variable: %s\"));",
      "2967: EXTERN char e_argument_already_declared_in_script_str[]",
      "2968:  INIT(= N_(\"E1168: Argument already declared in the script: %s\"));",
      "2970: EXTERN char e_cannot_use_hash_curly_to_start_comment[]",
      "2971:  INIT(= N_(\"E1170: Cannot use #{ to start a comment\"));",
      "2972: EXTERN char e_missing_end_block[]",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2973: EXTERN char e_expression_too_recursive_str[]",
      "2974:  INIT(= N_(\"E1169: Expression too recursive: %s\"));",
      "",
      "---------------"
    ],
    "src/eval.c||src/eval.c": [
      "File: src/eval.c -> src/eval.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "3526:     char_u *start_leader, *end_leader;",
      "3527:     int  ret = OK;",
      "3528:     char_u *alias;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3529:     static int recurse = 0;",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "3552:  return FAIL;",
      "3553:     }",
      "3555:     switch (**arg)",
      "3556:     {",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3558:     if (recurse == 1000)",
      "3559:     {",
      "3560:  semsg(_(e_expression_too_recursive_str), *arg);",
      "3561:  return FAIL;",
      "3562:     }",
      "3563:     ++recurse;",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "3782:     if (ret == OK && evaluate && end_leader > start_leader)",
      "3783:  ret = eval7_leader(rettv, FALSE, start_leader, &end_leader);",
      "3784:     return ret;",
      "3785: }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "3795:     --recurse;",
      "",
      "---------------"
    ],
    "src/testdir/test_eval_stuff.vim||src/testdir/test_eval_stuff.vim": [
      "File: src/testdir/test_eval_stuff.vim -> src/testdir/test_eval_stuff.vim",
      "--- Hunk 1 ---",
      "[Context before]",
      "590:   unlet g:gvar",
      "591: endfunc",
      "593: \" vim: shiftwidth=2 sts=2 expandtab",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "593: func Test_deep_recursion()",
      "594:   \" this was running out of stack",
      "595:   call assert_fails(\"exe 'if ' .. repeat('(', 1002)\", 'E1169: Expression too recursive: ((')",
      "596: endfunc",
      "",
      "---------------"
    ],
    "src/version.c||src/version.c": [
      "File: src/version.c -> src/version.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "751: static int included_patches[] =",
      "754:     4205,",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "754:     4206,",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "bc510064027da8024d59460c9c816aea4ffac096",
      "candidate_info": {
        "commit_hash": "bc510064027da8024d59460c9c816aea4ffac096",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/bc510064027da8024d59460c9c816aea4ffac096",
        "files": [
          "src/errors.h",
          "src/ex_docmd.c",
          "src/testdir/test_vim9_assign.vim",
          "src/testdir/test_vim9_cmd.vim",
          "src/version.c",
          "src/vim9compile.c"
        ],
        "message": "patch 8.2.4384: Vim9: error message not tested, some code not tested\n\nProblem:    Vim9: error message not tested, some code not tested.\nSolution:   Add a couple of test cases.  Give an error for a command modifier\n            without a command.",
        "before_after_code_files": [
          "src/errors.h||src/errors.h",
          "src/ex_docmd.c||src/ex_docmd.c",
          "src/testdir/test_vim9_assign.vim||src/testdir/test_vim9_assign.vim",
          "src/testdir/test_vim9_cmd.vim||src/testdir/test_vim9_cmd.vim",
          "src/version.c||src/version.c",
          "src/vim9compile.c||src/vim9compile.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/errors.h||src/errors.h",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/errors.h||src/errors.h",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/errors.h||src/errors.h": [
          "File: src/errors.h -> src/errors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2792: EXTERN char e_cannot_unlet_str[]",
          "2793:  INIT(= N_(\"E1081: Cannot unlet %s\"));",
          "2795: EXTERN char e_missing_backtick[]",
          "2796:  INIT(= N_(\"E1083: Missing backtick\"));",
          "2797: EXTERN char e_cannot_delete_vim9_script_function_str[]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2794: EXTERN char e_command_modifier_without_command[]",
          "2795:  INIT(= N_(\"E1082: Command modifier without command\"));",
          "",
          "---------------"
        ],
        "src/ex_docmd.c||src/ex_docmd.c": [
          "File: src/ex_docmd.c -> src/ex_docmd.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2784: {",
          "2785:     char_u  *p;",
          "2786:     int     starts_with_colon = FALSE;",
          "2788:     CLEAR_POINTER(cmod);",
          "2789:     cmod->cmod_flags = sticky_cmdmod_flags;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2787:     int     vim9script = in_vim9script();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "2819:   if (eap->nextcmd != NULL)",
          "2820:       ++eap->nextcmd;",
          "2821:      }",
          "2822:      return FAIL;",
          "2823:  }",
          "2824:  if (*eap->cmd == NUL)",
          "2825:  {",
          "2826:      if (!skip_only)",
          "2827:   ex_pressedreturn = TRUE;",
          "2828:      return FAIL;",
          "2829:  }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2823:      if (vim9script && has_cmdmod(cmod, FALSE))",
          "2830:      {",
          "2832:   if (vim9script && has_cmdmod(cmod, FALSE))",
          "2834:      }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "2842:  {",
          "2843:      char_u *s, *n;",
          "",
          "[Removed Lines]",
          "2841:  if (in_vim9script())",
          "",
          "[Added Lines]",
          "2848:  if (vim9script)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "2915: #ifdef FEAT_EVAL",
          "2919: #endif",
          "2920:          ))",
          "2921:     break;",
          "",
          "[Removed Lines]",
          "2918:          && (!in_vim9script() || VIM_ISWHITE(p[1]))",
          "",
          "[Added Lines]",
          "2925:          && (!vim9script || VIM_ISWHITE(p[1]))",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "2928:        }",
          "2929: #ifdef FEAT_EVAL",
          "2932:     break;",
          "2933: #endif",
          "2934:        if (skip_only)",
          "",
          "[Removed Lines]",
          "2931:        if (in_vim9script() && !VIM_ISWHITE(p[-1]))",
          "",
          "[Added Lines]",
          "2938:        if (vim9script && !VIM_ISWHITE(p[-1]))",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_assign.vim||src/testdir/test_vim9_assign.vim": [
          "File: src/testdir/test_vim9_assign.vim -> src/testdir/test_vim9_assign.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "350:     assert_equal(1, v1)",
          "351:     assert_equal(2, v2)",
          "353:     var reslist = []",
          "354:     for text in ['aaa {bbb} ccc', 'ddd {eee} fff']",
          "355:       var before: string",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "353:     var _x: number",
          "354:     [_x, v2] = [6, 7]",
          "355:     assert_equal(6, _x)",
          "356:     assert_equal(7, v2)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1482:   v9.CheckDefFailure([\"var d: dict<number> = {a: '', b: true}\"], 'E1012: Type mismatch; expected dict<number> but got dict<any>', 1)",
          "1483:   v9.CheckDefFailure([\"var d: dict<dict<number>> = {x: {a: '', b: true}}\"], 'E1012: Type mismatch; expected dict<dict<number>> but got dict<dict<any>>', 1)",
          "1484: enddef",
          "1486: def Test_assign_dict_unknown_type()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1489:   v9.CheckDefFailure([\"var d = {x: 1}\", \"d[1 : 2] = {y: 2}\"], 'E1165: Cannot use a range with an assignment: d[1 : 2] =', 2)",
          "",
          "---------------"
        ],
        "src/testdir/test_vim9_cmd.vim||src/testdir/test_vim9_cmd.vim": [
          "File: src/testdir/test_vim9_cmd.vim -> src/testdir/test_vim9_cmd.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "1133:       silent endtry",
          "1134:   END",
          "1135:   v9.CheckDefAndScriptFailure(lines, 'E1176:', 3)",
          "1136: enddef",
          "1138: def Test_eval_command()",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1137:   lines =<< trim END",
          "1138:       leftabove",
          "1139:   END",
          "1140:   v9.CheckDefAndScriptFailure(lines, 'E1082:', 1)",
          "1142:   lines =<< trim END",
          "1143:       leftabove # comment",
          "1144:   END",
          "1145:   v9.CheckDefAndScriptFailure(lines, 'E1082:', 1)",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4383,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4384,",
          "",
          "---------------"
        ],
        "src/vim9compile.c||src/vim9compile.c": [
          "File: src/vim9compile.c -> src/vim9compile.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "2761:  cctx.ctx_has_cmdmod = FALSE;",
          "2762:  if (parse_command_modifiers(&ea, &errormsg, &local_cmdmod, FALSE)",
          "2763:                == FAIL)",
          "2771:  generate_cmdmods(&cctx, &local_cmdmod);",
          "2772:  undo_cmdmod(&local_cmdmod);",
          "",
          "[Removed Lines]",
          "2764:  {",
          "2765:      if (errormsg != NULL)",
          "2766:   goto erret;",
          "2768:      line = (char_u *)\"\";",
          "2769:      continue;",
          "2770:  }",
          "",
          "[Added Lines]",
          "2764:      goto erret;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "50e05254450954f04183efc7bc871527a67868b8",
      "candidate_info": {
        "commit_hash": "50e05254450954f04183efc7bc871527a67868b8",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/50e05254450954f04183efc7bc871527a67868b8",
        "files": [
          "src/eval.c",
          "src/version.c"
        ],
        "message": "patch 8.2.4207: recursion test fails with MSVC\n\nProblem:    Recursion test fails with MSVC.\nSolution:   Use a smaller limit for MSVC.",
        "before_after_code_files": [
          "src/eval.c||src/eval.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/eval.c||src/eval.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/eval.c||src/eval.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/eval.c||src/eval.c": [
          "File: src/eval.c -> src/eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3554:     }",
          "3559:     {",
          "3560:  semsg(_(e_expression_too_recursive_str), *arg);",
          "3561:  return FAIL;",
          "",
          "[Removed Lines]",
          "3558:     if (recurse == 1000)",
          "",
          "[Added Lines]",
          "3558:     if (recurse ==",
          "3559: #ifdef _MSC_VER",
          "3560:       300",
          "3561: #else",
          "3562:       1000",
          "3563: #endif",
          "3564:       )",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4206,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4207,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4525a57afbea3e0885642bbebbc24d5a25c97da9",
      "candidate_info": {
        "commit_hash": "4525a57afbea3e0885642bbebbc24d5a25c97da9",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/4525a57afbea3e0885642bbebbc24d5a25c97da9",
        "files": [
          "src/eval.c",
          "src/userfunc.c",
          "src/version.c"
        ],
        "message": "patch 8.2.4367: calling in_vim9script() multiple times\n\nProblem:    Calling in_vim9script() multiple times.\nSolution:   Call it once and keep the result.",
        "before_after_code_files": [
          "src/eval.c||src/eval.c",
          "src/userfunc.c||src/userfunc.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/eval.c||src/eval.c",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/eval.c||src/eval.c",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/eval.c||src/eval.c": [
          "File: src/eval.c -> src/eval.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "865:     hashtab_T *ht = NULL;",
          "866:     int  quiet = flags & GLV_QUIET;",
          "867:     int  writing;",
          "870:     CLEAR_POINTER(lp);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "868:     int  vim9script = in_vim9script();",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "879:     }",
          "883:     && name[0] == 's' && name[1] == ':' && !VIM_ISWHITE(name[2]))",
          "884:     {",
          "885:  semsg(_(e_cannot_use_s_colon_in_vim9_script_str), name);",
          "",
          "[Removed Lines]",
          "882:     if (in_vim9script() && at_script_level()",
          "",
          "[Added Lines]",
          "883:     if (vim9script && at_script_level()",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "918:     {",
          "919:  lp->ll_name = name;",
          "922:  {",
          "924:      if (p == name + 2 && p[-1] == ':')",
          "",
          "[Removed Lines]",
          "921:  if (in_vim9script())",
          "",
          "[Added Lines]",
          "922:  if (vim9script)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "996:     if ((*p != '[' && *p != '.'))",
          "997:  return p;",
          "1000:     {",
          "1002:  lp->ll_tv = lval_root;",
          "",
          "[Removed Lines]",
          "999:     if (in_vim9script() && lval_root != NULL)",
          "",
          "[Added Lines]",
          "1000:     if (vim9script && lval_root != NULL)",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1018:  lp->ll_tv = &v->di_tv;",
          "1019:     }",
          "1022:     {",
          "1023:  if (!quiet)",
          "1024:      semsg(_(e_variable_already_declared), lp->ll_name);",
          "",
          "[Removed Lines]",
          "1021:     if (in_vim9script() && (flags & GLV_NO_DECL) == 0)",
          "",
          "[Added Lines]",
          "1022:     if (vim9script && (flags & GLV_NO_DECL) == 0)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1061:      return NULL;",
          "1062:  }",
          "1065:   && v != NULL",
          "1066:   && lp->ll_tv == &v->di_tv",
          "1067:   && ht != NULL && ht == get_script_local_ht())",
          "",
          "[Removed Lines]",
          "1064:  if (in_vim9script() && lp->ll_valtype == NULL",
          "",
          "[Added Lines]",
          "1065:  if (vim9script && lp->ll_valtype == NULL",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "2613:      else",
          "2614:      {",
          "2616:   {",
          "2617:       error_white_both(p, 2);",
          "2618:       clear_tv(rettv);",
          "",
          "[Removed Lines]",
          "2615:   if (evaluate && in_vim9script() && !VIM_ISWHITE(p[-1]))",
          "",
          "[Added Lines]",
          "2616:   if (evaluate && vim9script && !VIM_ISWHITE(p[-1]))",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "2628:      {",
          "2629:   error_white_both(*arg, 2);",
          "2630:   clear_tv(rettv);",
          "",
          "[Removed Lines]",
          "2627:      if (evaluate && in_vim9script() && !IS_WHITE_OR_NUL((*arg)[2]))",
          "",
          "[Added Lines]",
          "2628:      if (evaluate && vim9script && !IS_WHITE_OR_NUL((*arg)[2]))",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "2754:      {",
          "2755:   error_white_both(*arg, 2);",
          "2756:   clear_tv(rettv);",
          "",
          "[Removed Lines]",
          "2753:      if (evaluate && in_vim9script() && !IS_WHITE_OR_NUL((*arg)[2]))",
          "",
          "[Added Lines]",
          "2754:      if (evaluate && vim9script && !IS_WHITE_OR_NUL((*arg)[2]))",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3527:     char_u *start_leader, *end_leader;",
          "3528:     int  ret = OK;",
          "3529:     char_u *alias;",
          "",
          "[Removed Lines]",
          "3530:     static int recurse = 0;",
          "",
          "[Added Lines]",
          "3531:     static int recurse = 0;",
          "3532:     int  vim9script = in_vim9script();",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3541:     start_leader = *arg;",
          "3543:  return FAIL;",
          "3544:     end_leader = *arg;",
          "",
          "[Removed Lines]",
          "3542:     if (eval_leader(arg, in_vim9script()) == FAIL)",
          "",
          "[Added Lines]",
          "3544:     if (eval_leader(arg, vim9script) == FAIL)",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3618:   {",
          "3619:       ret = vim9_bad_comment(*arg) ? FAIL : NOTDONE;",
          "3620:   }",
          "",
          "[Removed Lines]",
          "3617:     case '#': if (in_vim9script())",
          "",
          "[Added Lines]",
          "3619:     case '#': if (vim9script)",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3635:       ret = NOTDONE;",
          "3636:   else",
          "3638:   if (ret == NOTDONE)",
          "3639:       ret = eval_dict(arg, rettv, evalarg, FALSE);",
          "3640:   break;",
          "",
          "[Removed Lines]",
          "3634:     case '{': if (in_vim9script())",
          "3637:       ret = get_lambda_tv(arg, rettv, in_vim9script(), evalarg);",
          "",
          "[Added Lines]",
          "3636:     case '{': if (vim9script)",
          "3639:       ret = get_lambda_tv(arg, rettv, vim9script, evalarg);",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "3657:     case '@': ++*arg;",
          "3658:   if (evaluate)",
          "3659:   {",
          "3661:    semsg(_(e_syntax_error_at_str), *arg);",
          "3663:    emsg_invreg(**arg);",
          "3664:       else",
          "3665:       {",
          "",
          "[Removed Lines]",
          "3660:       if (in_vim9script() && IS_WHITE_OR_NUL(**arg))",
          "3662:       else if (in_vim9script() && !valid_yank_reg(**arg, FALSE))",
          "",
          "[Added Lines]",
          "3662:       if (vim9script && IS_WHITE_OR_NUL(**arg))",
          "3664:       else if (vim9script && !valid_yank_reg(**arg, FALSE))",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "3679:     case '(': ret = NOTDONE;",
          "3681:   {",
          "3682:       ret = get_lambda_tv(arg, rettv, TRUE, evalarg);",
          "3683:       if (ret == OK && evaluate)",
          "",
          "[Removed Lines]",
          "3680:   if (in_vim9script())",
          "",
          "[Added Lines]",
          "3682:   if (vim9script)",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "3735:  {",
          "3736:      int     flags = evalarg == NULL ? 0 : evalarg->eval_flags;",
          "3739:      {",
          "3740:   emsg(_(e_cannot_use_underscore_here));",
          "3741:   ret = FAIL;",
          "3742:      }",
          "3744:        && s[0] == 's' && s[1] == ':')",
          "3745:      {",
          "3746:   semsg(_(e_cannot_use_s_colon_in_vim9_script_str), s);",
          "3747:   ret = FAIL;",
          "3748:      }",
          "3750:      {",
          "",
          "[Removed Lines]",
          "3738:      if (evaluate && in_vim9script() && len == 1 && *s == '_')",
          "3743:      else if (evaluate && in_vim9script() && len > 2",
          "3749:      else if ((in_vim9script() ? **arg : *skipwhite(*arg)) == '(')",
          "",
          "[Added Lines]",
          "3740:      if (evaluate && vim9script && len == 1 && *s == '_')",
          "3745:      else if (evaluate && vim9script && len > 2",
          "3751:      else if ((vim9script ? **arg : *skipwhite(*arg)) == '(')",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "3757:      else if (evaluate)",
          "3758:      {",
          "3761:   {",
          "3762:       rettv->v_type = VAR_BOOL;",
          "3763:       rettv->vval.v_number = VVAL_TRUE;",
          "3764:       ret = OK;",
          "3765:   }",
          "3768:   {",
          "3769:       rettv->v_type = VAR_BOOL;",
          "3770:       rettv->vval.v_number = VVAL_FALSE;",
          "3771:       ret = OK;",
          "3772:   }",
          "3775:   {",
          "3776:       rettv->v_type = VAR_SPECIAL;",
          "3777:       rettv->vval.v_number = VVAL_NULL;",
          "",
          "[Removed Lines]",
          "3760:   if (len == 4 && in_vim9script() && STRNCMP(s, \"true\", 4) == 0)",
          "3766:   else if (len == 5 && in_vim9script()",
          "3767:       && STRNCMP(s, \"false\", 5) == 0)",
          "3773:   else if (len == 4 && in_vim9script()",
          "3774:       && STRNCMP(s, \"null\", 4) == 0)",
          "",
          "[Added Lines]",
          "3762:   if (len == 4 && vim9script && STRNCMP(s, \"true\", 4) == 0)",
          "3768:   else if (len == 5 && vim9script && STRNCMP(s, \"false\", 5) == 0)",
          "3774:   else if (len == 4 && vim9script && STRNCMP(s, \"null\", 4) == 0)",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "3826:     int  error = FALSE;",
          "3827:     varnumber_T val = 0;",
          "3828:     vartype_T type = rettv->v_type;",
          "3829: #ifdef FEAT_FLOAT",
          "3830:     float_T     f = 0.0;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3829:     int  vim9script = in_vim9script();",
          "",
          "---------------",
          "--- Hunk 19 ---",
          "[Context before]",
          "3836:     {",
          "3837:  while (VIM_ISWHITE(end_leader[-1]))",
          "3838:      --end_leader;",
          "3840:      val = tv2bool(rettv);",
          "3841:  else",
          "3842:      val = tv_get_number_chk(rettv, &error);",
          "",
          "[Removed Lines]",
          "3839:  if (in_vim9script() && end_leader[-1] == '!')",
          "",
          "[Added Lines]",
          "3840:  if (vim9script && end_leader[-1] == '!')",
          "",
          "---------------",
          "--- Hunk 20 ---",
          "[Context before]",
          "3861: #ifdef FEAT_FLOAT",
          "3862:   if (rettv->v_type == VAR_FLOAT)",
          "3863:   {",
          "3865:       {",
          "3866:    rettv->v_type = VAR_BOOL;",
          "3867:    val = f == 0.0 ? VVAL_TRUE : VVAL_FALSE;",
          "",
          "[Removed Lines]",
          "3864:       if (in_vim9script())",
          "",
          "[Added Lines]",
          "3865:       if (vim9script)",
          "",
          "---------------",
          "--- Hunk 21 ---",
          "[Context before]",
          "3899: #endif",
          "3900:  {",
          "3901:      clear_tv(rettv);",
          "3903:   rettv->v_type = type;",
          "3904:      else",
          "3905:   rettv->v_type = VAR_NUMBER;",
          "",
          "[Removed Lines]",
          "3902:      if (in_vim9script())",
          "",
          "[Added Lines]",
          "3903:      if (vim9script)",
          "",
          "---------------",
          "--- Hunk 22 ---",
          "[Context before]",
          "4151:     int  range = FALSE;",
          "4152:     char_u *key = NULL;",
          "4153:     int  keylen = -1;",
          "4156:     if (check_can_index(rettv, evaluate, verbose) == FAIL)",
          "4157:  return FAIL;",
          "",
          "[Removed Lines]",
          "4154:     int  vim9 = in_vim9script();",
          "",
          "[Added Lines]",
          "4155:     int  vim9script = in_vim9script();",
          "",
          "---------------",
          "--- Hunk 23 ---",
          "[Context before]",
          "4182:      empty1 = TRUE;",
          "4183:  else if (eval1(arg, &var1, evalarg) == FAIL) // recursive!",
          "4184:      return FAIL;",
          "4186:  {",
          "4187:      semsg(_(e_white_space_required_before_and_after_str_at_str),",
          "4188:             \":\", *arg);",
          "",
          "[Removed Lines]",
          "4185:  else if (vim9 && **arg == ':')",
          "",
          "[Added Lines]",
          "4186:  else if (vim9script && **arg == ':')",
          "",
          "---------------",
          "--- Hunk 24 ---",
          "[Context before]",
          "4196: #ifdef FEAT_FLOAT",
          "4199:          && var1.v_type == VAR_FLOAT)",
          "4200:      {",
          "4201:   var1.vval.v_string = typval_tostring(&var1, TRUE);",
          "4202:   var1.v_type = VAR_STRING;",
          "4203:      }",
          "4204: #endif",
          "4206:   tv_get_number_chk(&var1, &error);",
          "4207:      else",
          "4208:   error = tv_get_string_chk(&var1) == NULL;",
          "",
          "[Removed Lines]",
          "4198:      if (vim9 && rettv->v_type == VAR_DICT",
          "4205:      if (vim9 && rettv->v_type == VAR_LIST)",
          "",
          "[Added Lines]",
          "4199:      if (vim9script && rettv->v_type == VAR_DICT",
          "4206:      if (vim9script && rettv->v_type == VAR_LIST)",
          "",
          "---------------",
          "--- Hunk 25 ---",
          "[Context before]",
          "4222:  {",
          "4223:      range = TRUE;",
          "4224:      ++*arg;",
          "4226:      {",
          "4227:   semsg(_(e_white_space_required_before_and_after_str_at_str),",
          "4228:         \":\", *arg - 1);",
          "",
          "[Removed Lines]",
          "4225:      if (vim9 && !IS_WHITE_OR_NUL(**arg) && **arg != ']')",
          "",
          "[Added Lines]",
          "4226:      if (vim9script && !IS_WHITE_OR_NUL(**arg) && **arg != ']')",
          "",
          "---------------"
        ],
        "src/userfunc.c||src/userfunc.c": [
          "File: src/userfunc.c -> src/userfunc.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1328:     int  equal_arrow = **arg == '(';",
          "1329:     int  white_error = FALSE;",
          "1330:     int  called_emsg_start = called_emsg;",
          "1333:  return NOTDONE;",
          "1335:     ga_init(&newargs);",
          "",
          "[Removed Lines]",
          "1332:     if (equal_arrow && !in_vim9script())",
          "",
          "[Added Lines]",
          "1331:     int  vim9script = in_vim9script();",
          "1333:     if (equal_arrow && !vim9script)",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1360:          FALSE, NULL, NULL);",
          "1361:     if (ret == FAIL",
          "1362:     || (s = skip_arrow(*arg, equal_arrow, &ret_type,",
          "1364:     {",
          "1365:  if (types_optional)",
          "1366:      ga_clear_strings(&argtypes);",
          "",
          "[Removed Lines]",
          "1363:   equal_arrow || in_vim9script() ? &white_error : NULL)) == NULL)",
          "",
          "[Added Lines]",
          "1364:   equal_arrow || vim9script ? &white_error : NULL)) == NULL)",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1485:  if (types_optional)",
          "1486:  {",
          "1487:      if (parse_argument_types(fp, &argtypes,",
          "1489:   goto errret;",
          "1490:      if (ret_type != NULL)",
          "1491:      {",
          "",
          "[Removed Lines]",
          "1488:         in_vim9script() && varargs) == FAIL)",
          "",
          "[Added Lines]",
          "1489:       vim9script && varargs) == FAIL)",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "1514:      flags |= FC_SANDBOX;",
          "1518:  fp->uf_flags = flags;",
          "1519:  fp->uf_calls = 0;",
          "1520:  fp->uf_script_ctx = current_sctx;",
          "",
          "[Removed Lines]",
          "1517:  fp->uf_varargs = !in_vim9script() || varargs;",
          "",
          "[Added Lines]",
          "1518:  fp->uf_varargs = !vim9script || varargs;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1779:  }",
          "1781:  ret = call_func(name, len, rettv, argcount, argvars, funcexe);",
          "1783:  {",
          "",
          "[Removed Lines]",
          "1782:  if (in_vim9script() && did_emsg > did_emsg_before)",
          "",
          "[Added Lines]",
          "1783:  if (vim9script && did_emsg > did_emsg_before)",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1800:     while (--argcount >= 0)",
          "1801:  clear_tv(&argvars[argcount]);",
          "1805:     else",
          "",
          "[Removed Lines]",
          "1803:     if (in_vim9script())",
          "",
          "[Added Lines]",
          "1804:     if (vim9script)",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "3714:     int  extra = 0;",
          "3715:     int  prefix_g = FALSE;",
          "3716:     lval_T lv;",
          "3719:     if (fdp != NULL)",
          "3720:  CLEAR_POINTER(fdp);",
          "",
          "[Removed Lines]",
          "3717:     int  vim9script;",
          "",
          "[Added Lines]",
          "3718:     int  vim9script = in_vim9script();",
          "3719:     int  vim9_local;",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "3740:     end = get_lval(start, NULL, &lv, FALSE, skip, flags | GLV_READ_ONLY,",
          "3741:            lead > 2 ? 0 : FNE_CHECK_START);",
          "3743:        && end[-1] == AUTOLOAD_CHAR && *end == '('))",
          "3744:     {",
          "3745:  if (!skip)",
          "",
          "[Removed Lines]",
          "3742:     if (end == start || (in_vim9script() && end != NULL",
          "",
          "[Added Lines]",
          "3744:     if (end == start || (vim9script && end != NULL",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "3908:     vim9script = ASCII_ISUPPER(*start) && in_vim9script();",
          "",
          "[Added Lines]",
          "3910:     vim9_local = ASCII_ISUPPER(*start) && vim9script;",
          "",
          "---------------",
          "--- Hunk 10 ---",
          "[Context before]",
          "3915:     if (skip)",
          "3916:  lead = 0; // do nothing",
          "3918:     {",
          "3920:  {",
          "3922:      {",
          "3924:       ? e_function_name_must_start_with_capital_str",
          "3925:       : e_function_name_must_start_with_capital_or_s_str),",
          "3926:          start);",
          "",
          "[Removed Lines]",
          "3917:     else if (lead > 0 || vim9script)",
          "3919:  if (!vim9script)",
          "3921:      if (in_vim9script() && lead == 2 && !ASCII_ISUPPER(*lv.ll_name))",
          "3923:   semsg(_(in_vim9script()",
          "",
          "[Added Lines]",
          "3919:     else if (lead > 0 || vim9_local)",
          "3921:  if (!vim9_local)",
          "3923:      if (vim9script && lead == 2 && !ASCII_ISUPPER(*lv.ll_name))",
          "3925:   semsg(_(vim9script",
          "",
          "---------------",
          "--- Hunk 11 ---",
          "[Context before]",
          "3928:      }",
          "3929:      lead = 3;",
          "3930:  }",
          "3932:           && eval_fname_sid(lv.ll_exp_name))",
          "3933:              || eval_fname_sid(*pp))",
          "3934:  {",
          "",
          "[Removed Lines]",
          "3931:  if (vim9script || (lv.ll_exp_name != NULL",
          "",
          "[Added Lines]",
          "3933:  if (vim9_local || (lv.ll_exp_name != NULL",
          "",
          "---------------",
          "--- Hunk 12 ---",
          "[Context before]",
          "3939:   goto theend;",
          "3940:      }",
          "3941:      sprintf((char *)sid_buf, \"%ld_\", (long)current_sctx.sc_sid);",
          "3943:   extra = 3 + (int)STRLEN(sid_buf);",
          "3944:      else",
          "3945:   lead += (int)STRLEN(sid_buf);",
          "3946:  }",
          "3947:     }",
          "3948:     else if (!(flags & TFN_INT) && (builtin_function(lv.ll_name, len)",
          "3950:     {",
          "3953:       : e_function_name_must_start_with_capital_or_s_str),",
          "3954:          start);",
          "3955:  goto theend;",
          "",
          "[Removed Lines]",
          "3942:      if (vim9script)",
          "3949:        || (in_vim9script() && *lv.ll_name == '_')))",
          "3951:  semsg(_(in_vim9script()",
          "3952:       ? e_function_name_must_start_with_capital_str",
          "",
          "[Added Lines]",
          "3944:      if (vim9_local)",
          "3951:        || (vim9script && *lv.ll_name == '_')))",
          "3953:  semsg(_(vim9script ? e_function_name_must_start_with_capital_str",
          "",
          "---------------",
          "--- Hunk 13 ---",
          "[Context before]",
          "3968:     name = alloc(len + lead + extra + 1);",
          "3969:     if (name != NULL)",
          "3970:     {",
          "3972:  {",
          "3973:      name[0] = K_SPECIAL;",
          "3974:      name[1] = KS_EXTRA;",
          "3975:      name[2] = (int)KE_SNR;",
          "3977:   STRCPY(name + 3, sid_buf);",
          "3978:  }",
          "3979:  else if (prefix_g)",
          "",
          "[Removed Lines]",
          "3971:  if (!skip && (lead > 0 || vim9script))",
          "3976:      if (vim9script || lead > 3) // If it's \"<SID>\"",
          "",
          "[Added Lines]",
          "3972:  if (!skip && (lead > 0 || vim9_local))",
          "3977:      if (vim9_local || lead > 3) // If it's \"<SID>\"",
          "",
          "---------------",
          "--- Hunk 14 ---",
          "[Context before]",
          "4546:  int  ffed_flags = is_global ? FFED_IS_GLOBAL : 0;",
          "4548:  v = find_var(name, &ht, TRUE);",
          "4550:      var_conflict = TRUE;",
          "4552:  if (SCRIPT_ID_VALID(current_sctx.sc_sid))",
          "",
          "[Removed Lines]",
          "4549:  if (v != NULL && (in_vim9script() || v->di_tv.v_type == VAR_FUNC))",
          "",
          "[Added Lines]",
          "4550:  if (v != NULL && (vim9script || v->di_tv.v_type == VAR_FUNC))",
          "",
          "---------------",
          "--- Hunk 15 ---",
          "[Context before]",
          "5299:     evalarg_T evalarg;",
          "5300:     type_T *type = NULL;",
          "5301:     int  found_var = FALSE;",
          "5303:     fill_evalarg_from_eap(&evalarg, eap, eap->skip);",
          "5304:     if (eap->skip)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5303:     int  vim9script = in_vim9script();",
          "",
          "---------------",
          "--- Hunk 16 ---",
          "[Context before]",
          "5315:     }",
          "5317:     tofree = trans_function_name(&arg, NULL, eap->skip, TFN_INT,",
          "5319:     if (fudi.fd_newkey != NULL)",
          "5320:     {",
          "",
          "[Removed Lines]",
          "5318:          &fudi, &partial, in_vim9script() ? &type : NULL);",
          "",
          "[Added Lines]",
          "5320:          &fudi, &partial, vim9script ? &type : NULL);",
          "",
          "---------------",
          "--- Hunk 17 ---",
          "[Context before]",
          "5336:     len = (int)STRLEN(tofree);",
          "5337:     name = deref_func_name(tofree, &len, partial != NULL ? NULL : &partial,",
          "5339:            FALSE, FALSE, &found_var);",
          "",
          "[Removed Lines]",
          "5338:      in_vim9script() && type == NULL ? &type : NULL,",
          "",
          "[Added Lines]",
          "5340:     vim9script && type == NULL ? &type : NULL,",
          "",
          "---------------",
          "--- Hunk 18 ---",
          "[Context before]",
          "5346:  semsg(_(e_missing_parenthesis_str), eap->arg);",
          "5347:  goto end;",
          "5348:     }",
          "5350:     {",
          "5351:  semsg(_(e_no_white_space_allowed_before_str_str), \"(\", eap->arg);",
          "5352:  goto end;",
          "",
          "[Removed Lines]",
          "5349:     if (in_vim9script() && startarg > arg)",
          "",
          "[Added Lines]",
          "5351:     if (vim9script && startarg > arg)",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4366,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4367,",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "b3d83980d2ac0f7a25314270416f17af874ca269",
      "candidate_info": {
        "commit_hash": "b3d83980d2ac0f7a25314270416f17af874ca269",
        "repo": "vim/vim",
        "commit_url": "https://github.com/vim/vim/commit/b3d83980d2ac0f7a25314270416f17af874ca269",
        "files": [
          "src/errors.h",
          "src/testdir/test_functions.vim",
          "src/testing.c",
          "src/version.c"
        ],
        "message": "patch 8.2.4234: test_garbagecollect_now() does not check v:testing\n\nProblem:    test_garbagecollect_now() does not check v:testing as documented.\nSolution:   Give an error if v:testing is not set.",
        "before_after_code_files": [
          "src/errors.h||src/errors.h",
          "src/testdir/test_functions.vim||src/testdir/test_functions.vim",
          "src/testing.c||src/testing.c",
          "src/version.c||src/version.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "src/errors.h||src/errors.h",
            "src/version.c||src/version.c"
          ],
          "candidate": [
            "src/errors.h||src/errors.h",
            "src/version.c||src/version.c"
          ]
        }
      },
      "candidate_diff": {
        "src/errors.h||src/errors.h": [
          "File: src/errors.h -> src/errors.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "2909:  INIT(= N_(\"E1140: :for argument must be a sequence of lists\"));",
          "2910: EXTERN char e_indexable_type_required[]",
          "2911:  INIT(= N_(\"E1141: Indexable type required\"));",
          "2913: EXTERN char e_empty_expression_str[]",
          "2914:  INIT(= N_(\"E1143: Empty expression: \\\"%s\\\"\"));",
          "2915: EXTERN char e_command_str_not_followed_by_white_space_str[]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2912: EXTERN char e_calling_test_garbagecollect_now_while_v_testing_is_not_set[]",
          "2913:  INIT(= N_(\"E1142: Calling test_garbagecollect_now() while v:testing is not set\"));",
          "",
          "---------------"
        ],
        "src/testdir/test_functions.vim||src/testdir/test_functions.vim": [
          "File: src/testdir/test_functions.vim -> src/testdir/test_functions.vim",
          "--- Hunk 1 ---",
          "[Context before]",
          "2663:   call assert_fails('let x=range(1, 4, [])', 'E745:')",
          "2664: endfunc",
          "2666: func Test_echoraw()",
          "2667:   CheckScreendump",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "2666: func Test_garbagecollect_now_fails()",
          "2667:   let v:testing = 0",
          "2668:   call assert_fails('call test_garbagecollect_now()', 'E1142:')",
          "2669:   let v:testing = 1",
          "2670: endfunc",
          "",
          "---------------"
        ],
        "src/testing.c||src/testing.c": [
          "File: src/testing.c -> src/testing.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1153: {",
          "1157: }",
          "",
          "[Removed Lines]",
          "1156:     garbage_collect(TRUE);",
          "",
          "[Added Lines]",
          "1156:     if (!get_vim_var_nr(VV_TESTING))",
          "1157:  emsg(_(e_calling_test_garbagecollect_now_while_v_testing_is_not_set));",
          "1158:     else",
          "1159:  garbage_collect(TRUE);",
          "",
          "---------------"
        ],
        "src/version.c||src/version.c": [
          "File: src/version.c -> src/version.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "751: static int included_patches[] =",
          "754:     4233,",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "754:     4234,",
          "",
          "---------------"
        ]
      }
    }
  ]
}