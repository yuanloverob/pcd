{
  "cve_id": "CVE-2019-19646",
  "cve_desc": "pragma.c in SQLite through 3.30.1 mishandles NOT NULL in an integrity_check PRAGMA command in certain cases of generated columns.",
  "repo": "sqlite/sqlite",
  "patch_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
  "patch_info": {
    "commit_hash": "ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/ebd70eedd5d6e6a890a670b5ee874a5eae86b4dd",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/pragma.c",
      "test/gencol1.test"
    ],
    "message": "Fix the NOT NULL verification logic in PRAGMA integrity_check so that it works for generated columns whose value is the result of a comparison operator. Ticket [bd8c280671ba44a7]\n\nFossilOrigin-Name: f3b39c71b88cb6721f443de56cdce4c08252453a5e340b00a2bd88dc10c42400",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/pragma.c||src/pragma.c",
      "test/gencol1.test||test/gencol1.test"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: e3398c5ffb060b2b26334b8598e2c63953741e2d6f5124dbd6bdfc8e94742539",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/pragma.c||src/pragma.c": [
      "File: src/pragma.c -> src/pragma.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1596:           if( j==pTab->iPKey ) continue;",
      "1597:           if( pTab->aCol[j].notNull==0 ) continue;",
      "1598:           sqlite3ExprCodeGetColumnOfTable(v, pTab, iDataCur, j, 3);",
      "1600:           jmp2 = sqlite3VdbeAddOp1(v, OP_NotNull, 3); VdbeCoverage(v);",
      "1601:           zErr = sqlite3MPrintf(db, \"NULL value in %s.%s\", pTab->zName,",
      "1602:                               pTab->aCol[j].zName);",
      "",
      "[Removed Lines]",
      "1599:           sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "",
      "[Added Lines]",
      "1599:           if( sqlite3VdbeGetOp(v,-1)->opcode==OP_Column ){",
      "1600:             sqlite3VdbeChangeP5(v, OPFLAG_TYPEOFARG);",
      "1601:           }",
      "",
      "---------------"
    ],
    "test/gencol1.test||test/gencol1.test": [
      "File: test/gencol1.test -> test/gencol1.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "328:   INSERT OR REPLACE INTO t0(c0, c1) VALUES (2, 1), (1, 0)",
      "329: } {1 {FOREIGN KEY constraint failed}}",
      "331: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "331: # 2019-12-09 ticket bd8c280671ba44a7",
      "332: # With generated columns, the sqlite3ExprGetColumnOfTable() routine might",
      "333: # generate a code sequence that does not end with OP_Column.  So check to",
      "334: # make sure that the last instruction generated is an OP_column prior to",
      "335: # applying the OPFLAG_TYPEOFARG optimization to NOT NULL checks in the",
      "336: # PRAGMA integrity_check code.",
      "337: #",
      "338: sqlite3 db :memory:",
      "339: do_execsql_test gencol1-12.10 {",
      "340:   CREATE TABLE t0 (c0, c1 NOT NULL AS (c0==0));",
      "341:   INSERT INTO t0(c0) VALUES (0);",
      "342:   PRAGMA integrity_check;",
      "343: } {ok}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "b4738ddb203867d9573555cb271463bab1e69a31",
      "candidate_info": {
        "commit_hash": "b4738ddb203867d9573555cb271463bab1e69a31",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/b4738ddb203867d9573555cb271463bab1e69a31",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/vdbemem.c",
          "test/corruptL.test"
        ],
        "message": "Fix an assert() in vdbemem.c that could fire if the database was corrupt.\n\nFossilOrigin-Name: a70958cd7d5cf750c293537856918e5789013b70f6a827f724d83559b38629c8",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/vdbemem.c||src/vdbemem.c",
          "test/corruptL.test||test/corruptL.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2ca6b8f84ec07e313aa4e1c0894827401b418dcc4221e9c54c384f1c3893952a",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/vdbemem.c||src/vdbemem.c": [
          "File: src/vdbemem.c -> src/vdbemem.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "245: int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){",
          "247:   assert( (pMem->flags & MEM_Dyn)==0 || pMem->szMalloc==0 );",
          "248:   if( pMem->szMalloc<szNew ){",
          "249:     return sqlite3VdbeMemGrow(pMem, szNew, 0);",
          "",
          "[Removed Lines]",
          "246:   assert( szNew>0 );",
          "",
          "[Added Lines]",
          "246:   assert( CORRUPT_DB || szNew>0 );",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "133:   REINDEX t1;",
          "134: } {1 {unable to identify the object to be reindexed}}",
          "136: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "136: #-------------------------------------------------------------------------",
          "137: reset_db",
          "138: do_test 2.0 {",
          "139:   sqlite3 db {}",
          "140:   db deserialize [decode_hexdb {",
          "141: | size 20480 pagesize 4096 filename crash.txt.db",
          "142: | page 1 offset 0",
          "143: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "144: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 05   .....@  ........",
          "145: |     32: 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00 04   ................",
          "146: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "147: |     96: 00 00 00 00 0d 00 00 00 05 0e 55 00 0f 74 0f 3c   ..........U..t.<",
          "148: |    112: 0e f9 0e d1 0e 55 00 00 00 00 00 00 00 00 00 00   .....U..........",
          "149: |   3664: 00 00 00 00 00 7a 05 07 15 11 11 08 81 63 76 69   .....z.......cvi",
          "150: |   3680: 65 77 76 31 76 31 43 52 45 41 54 45 20 56 49 45   ewv1v1CREATE VIE",
          "151: |   3696: 57 20 76 31 28 78 2c 79 29 20 41 53 0a 53 45 4c   W v1(x,y) AS.SEL",
          "152: |   3712: 45 43 54 20 74 31 2e 62 2c 74 32 2e 62 20 46 52   ECT t1.b,t2.b FR",
          "153: |   3728: 4f 4d 20 74 31 2c 74 32 20 57 48 45 52 45 20 74   OM t1,t2 WHERE t",
          "154: |   3744: 31 2e 61 3d 74 32 2e 61 20 47 52 4f 55 50 20 42   1.a=t2.a GROUP B",
          "155: |   3760: 59 20 31 20 48 41 56 49 4e 47 20 74 32 2e 63 20   Y 1 HAVING t2.c",
          "156: |   3776: 4e 4f 54 20 4e 55 4c 4c 0a 4c 49 4d 49 54 20 31   NOT NULL.LIMIT 1",
          "157: |   3792: 30 26 04 06 17 11 11 01 39 74 61 62 6c 65 74 32   0&......9tablet2",
          "158: |   3808: 74 32 05 43 52 45 41 54 45 20 54 41 42 4c 45 20   t2.CREATE TABLE",
          "159: |   3824: 74 32 28 61 2c 62 2c 63 29 41 03 06 17 15 11 01   t2(a,b,c)A......",
          "160: |   3840: 6b 69 6e 64 65 78 74 31 78 31 74 31 04 43 52 45   kindext1x1t1.CRE",
          "161: |   3856: 41 54 45 20 49 4e 44 45 58 20 73 31 78 31 20 4f   ATE INDEX s1x1 O",
          "162: |   3872: 4e 20 74 31 28 64 29 20 57 48 45 52 45 20 65 65   N t1(d) WHERE ee",
          "163: |   3888: 20 49 53 20 4e 4f 54 20 4e 55 4c 4c 36 02 06 17    IS NOT NULL6...",
          "164: |   3904: 17 11 01 53 69 6e 64 65 78 74 31 61 62 63 74 31   ...Sindext1abct1",
          "165: |   3920: 03 43 52 45 41 54 45 20 49 4e 44 45 58 20 74 31   .CREATE INDEX t1",
          "166: |   3936: 61 62 63 20 4f 4e 20 74 31 28 61 2c 62 2c 63 2b   abc ON t1(a,b,c+",
          "167: |   3952: 64 2b 65 29 81 09 01 07 17 11 11 01 81 7d 74 61   d+e)..........ta",
          "168: |   3968: 62 6c 65 74 31 74 31 02 43 52 45 41 54 45 20 54   blet1t1.CREATE T",
          "169: |   3984: 41 42 4c 45 20 74 31 28 61 2c 62 2c 63 2c 64 2c   ABLE t1(a,b,c,d,",
          "170: |   4000: 65 2c 66 2c 67 2c 68 2c 6a 2c 6a 6a 2c 6a 6a 6a   e,f,g,h,j,jj,jjj",
          "171: |   4016: 2c 6b 2c 61 61 2c 62 62 2c 63 63 2c 64 64 2c 65   ,k,aa,bb,cc,dd,e",
          "172: |   4032: 65 20 44 45 46 41 55 4c 54 20 33 2e 31 34 2c 0a   e DEFAULT 3.14,.",
          "173: |   4048: 66 66 20 44 45 46 41 55 4c 54 28 27 68 69 63 63   ff DEFAULT('hicc",
          "174: |   4064: 75 70 27 29 2c 67 67 20 4e 4f 54 20 4e 55 4c 4c   up'),gg NOT NULL",
          "175: |   4080: 20 44 45 46 41 55 4c 54 28 66 61 6c 73 65 29 29    DEFAULT(false))",
          "176: | page 2 offset 4096",
          "177: |      0: 0d 00 00 00 0a 0e 7b 00 0f dc 0f b6 0f 8f 0f 68   ...............h",
          "178: |     16: 0f 41 0f 1a 0e f3 0e cb 0e a3 0e 7b 00 00 00 00   .A..............",
          "179: |   3696: 00 00 00 00 00 00 00 00 00 00 00 26 0a 14 01 01   ...........&....",
          "180: |   3712: 02 08 00 00 00 00 00 00 00 00 00 00 00 00 07 19   ................",
          "181: |   3728: 08 09 5a 00 b4 40 09 1e b8 51 eb 85 1f 68 69 63   ..Z..@...Q...hic",
          "182: |   3744: 63 75 70 26 09 14 01 01 02 08 00 00 00 00 00 00   cup&............",
          "183: |   3760: 00 00 00 00 00 00 07 19 08 08 50 00 a0 40 09 1e   ..........P..@..",
          "184: |   3776: b8 51 eb 85 1f 68 69 63 63 75 70 26 08 14 01 01   .Q...hiccup&....",
          "185: |   3792: 02 08 00 00 00 00 00 00 00 00 00 00 00 00 07 19   ................",
          "186: |   3808: 08 07 46 00 8c 40 09 1e b8 51 eb 85 1f 68 69 63   ..F..@...Q...hic",
          "187: |   3824: 63 75 70 25 07 14 01 01 01 08 00 00 00 00 00 00   cup%............",
          "188: |   3840: 00 00 00 00 00 00 07 b9 08 06 3c 78 40 09 1e b8   ..........<x@...",
          "189: |   3856: 51 eb 85 1f 68 69 63 63 75 70 25 06 14 01 00 01   Q...hiccup%.....",
          "190: |   3872: 08 00 00 00 00 00 00 00 00 00 00 00 00 07 19 08   ................",
          "191: |   3888: 05 32 64 40 09 1e b8 51 eb 85 1f 68 69 63 63 75   .2d@...Q...hiccu",
          "192: |   3904: 70 25 05 14 01 01 01 08 00 00 00 00 00 00 00 00   p%..............",
          "193: |   3920: 00 00 00 00 07 19 08 04 28 50 40 09 1e b8 51 eb   ........(P@...Q.",
          "194: |   3936: 85 1f 68 69 63 63 75 70 25 04 14 01 01 01 08 00   ..hiccup%.......",
          "195: |   3952: 00 00 00 00 00 00 00 00 00 00 00 07 19 08 03 1e   ................",
          "196: |   3968: 3c 40 09 1e b8 51 eb 85 1f 68 69 63 63 75 70 25   <@...Q...hiccup%",
          "197: |   3984: 03 14 01 01 01 08 00 00 00 00 00 00 00 00 00 00   ................",
          "198: |   4000: 00 00 07 19 08 02 14 28 40 09 1e b8 51 eb 85 1f   .......(@...Q...",
          "199: |   4016: 68 69 63 63 75 70 24 02 14 09 01 01 08 00 00 00   hiccup$.........",
          "200: |   4032: 00 00 00 00 00 00 00 00 00 07 19 08 0a 14 40 09   ..............@.",
          "201: |   4048: 1e b8 51 eb 85 1f 68 69 63 63 75 70 22 01 14 08   ..Q...hiccup....",
          "202: |   4064: 08 08 07 ff ff ff ff ff ff 00 00 00 00 00 00 07   ................",
          "203: |   4080: 19 08 40 09 1e b8 51 eb 85 1f 68 69 63 63 75 70   ..@...Q...hiccup",
          "204: | page 3 offset 8192",
          "205: |      0: 0a 00 00 00 0a 0f aa 00 0f fa 0f f2 0f e9 0f e0   ................",
          "206: |     16: 0f d7 0f ce 0f c5 0f bc 0e b3 0f aa 00 00 00 00   ................",
          "207: |   4000: 00 00 00 00 00 00 00 00 00 00 08 05 01 01 00 01   ................",
          "208: |   4016: 09 5a 0a 08 05 01 01 00 01 08 50 09 08 05 01 01   .Z........P.....",
          "209: |   4032: 00 01 07 46 08 08 05 01 01 00 01 06 3c 07 08 05   ...F........<...",
          "210: |   4048: 01 01 00 01 05 32 06 08 05 01 01 00 01 04 28 05   .....2........(.",
          "211: |   4064: 08 05 01 01 00 01 03 1e 04 08 05 01 01 00 01 02   ................",
          "212: |   4080: 14 03 07 05 09 01 00 01 0a 02 05 05 08 08 00 09   ................",
          "213: | page 4 offset 12288",
          "214: |      0: 0a 00 00 00 0a 0f cf 00 0f fc 0f f7 0f f2 0f ed   ................",
          "215: |     16: 0f e8 0f e3 0f de 0f d9 0f d4 0f cf 00 00 00 00   ................",
          "216: |   4032: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04   ................",
          "217: |   4048: 03 08 01 0a 04 03 08 01 09 04 03 08 01 08 04 03   ................",
          "218: |   4064: 08 01 07 04 03 08 01 06 04 03 08 01 05 04 03 08   ................",
          "219: |   4080: 01 04 04 03 08 01 13 04 03 08 01 02 03 03 08 09   ................",
          "220: | page 5 offset 16384",
          "221: |      0: 0d 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00   ................",
          "222: | end crash.txt.db",
          "223: }]} {}",
          "225: do_execsql_test 2.1 {",
          "226:   INSERT INTO t1(b) VALUES(X'a0fee3669f9fddefc5cba913e4225d4b6ce2b04f26b87fad3ee6f9b7d90a1ea62a169bf41e5d32707a6ca5c3d05e4bde05c9d89eaaa8c50e74333d2e9fcd7dfe95528a3a016aac1102d825c5cd70cf99d8a88e0ea7f798d4334386518b7ad359beb168b93aba059a2a3bd93112d65b44c12b9904ea786b204d80531cdf0504bf9b203dbe927061974caf7b9f30cbc3397b61f802e732012a6663d41c3607d6f1c0dbcfd489adac05ca500c0b04439d894cd93a840159225ef73b627e178b9f84b3ffe66cf22a963a8368813ff7961fc47f573211ccec95e0220dcbb3bf429f4a50ba54d7a53784ac51bfef346e6ac8ae0d0e7c3175946e62ba2b');",
          "227: }",
          "229: do_catchsql_test 2.2 {",
          "230:   SELECT b,c FROM t1 ORDER BY a;",
          "231: } {1 {database disk image is malformed}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "7bbdc3c59722b6626efbbfe7ad1a23748477403a",
      "candidate_info": {
        "commit_hash": "7bbdc3c59722b6626efbbfe7ad1a23748477403a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/7bbdc3c59722b6626efbbfe7ad1a23748477403a",
        "files": [
          "README.md",
          "manifest",
          "manifest.uuid",
          "src/parse.y"
        ],
        "message": "Remove some stale references to the addopcodes.tcl script from documentation.\n\nFossilOrigin-Name: c0381b0bc90aa3c2415c4b3ac338cfe6d308bb5d4247bc6f2b6e919f549c254c",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/parse.y||src/parse.y"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d272819298083ebbde57962a2938925b1aaa1caf03e48bb3ea26ad91e0461d84",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/parse.y||src/parse.y": [
          "File: src/parse.y -> src/parse.y"
        ]
      }
    },
    {
      "candidate_hash": "9c039d9f2e8d0ed9645c7ea419e24f08a268fb95",
      "candidate_info": {
        "commit_hash": "9c039d9f2e8d0ed9645c7ea419e24f08a268fb95",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9c039d9f2e8d0ed9645c7ea419e24f08a268fb95",
        "files": [
          "Makefile.in",
          "Makefile.msc",
          "ext/misc/prefixes.c",
          "main.mk",
          "manifest",
          "manifest.uuid",
          "src/test1.c",
          "test/prefixes.test"
        ],
        "message": "Add scalar function \"prefix_length()\" to ext/misc/prefixes.c.\n\nFossilOrigin-Name: 0bf1550507d9d3c8a41f8a50db3a59bf808f0a4e24637dc0905d35579305eca7",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "Makefile.msc||Makefile.msc",
          "ext/misc/prefixes.c||ext/misc/prefixes.c",
          "main.mk||main.mk",
          "manifest.uuid||manifest.uuid",
          "src/test1.c||src/test1.c",
          "test/prefixes.test||test/prefixes.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "452:   $(TOP)/ext/misc/nextchar.c \\",
          "453:   $(TOP)/ext/misc/normalize.c \\",
          "454:   $(TOP)/ext/misc/percentile.c \\",
          "455:   $(TOP)/ext/misc/regexp.c \\",
          "456:   $(TOP)/ext/misc/remember.c \\",
          "457:   $(TOP)/ext/misc/series.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "455:   $(TOP)/ext/misc/prefixes.c \\",
          "",
          "---------------"
        ],
        "Makefile.msc||Makefile.msc": [
          "File: Makefile.msc -> Makefile.msc",
          "--- Hunk 1 ---",
          "[Context before]",
          "1527:   $(TOP)\\ext\\misc\\nextchar.c \\",
          "1528:   $(TOP)\\ext\\misc\\normalize.c \\",
          "1529:   $(TOP)\\ext\\misc\\percentile.c \\",
          "1530:   $(TOP)\\ext\\misc\\regexp.c \\",
          "1531:   $(TOP)\\ext\\misc\\remember.c \\",
          "1532:   $(TOP)\\ext\\misc\\series.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1530:   $(TOP)\\ext\\misc\\prefixes.c \\",
          "",
          "---------------"
        ],
        "ext/misc/prefixes.c||ext/misc/prefixes.c": [
          "File: ext/misc/prefixes.c -> ext/misc/prefixes.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "250: };",
          "253: #ifdef _WIN32",
          "254: __declspec(dllexport)",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "258: #define PREFIX_SKIP_UTF8(zIn) {                        \\",
          "259:   if( (*(zIn++))>=0xc0 ){                              \\",
          "260:     while( (*zIn & 0xc0)==0x80 ){ zIn++; }             \\",
          "261:   }                                                    \\",
          "262: }",
          "277: static void prefixLengthFunc(",
          "278:   sqlite3_context *ctx,",
          "279:   int nVal,",
          "280:   sqlite3_value **apVal",
          "281: ){",
          "284:   const unsigned char *zL = sqlite3_value_text(apVal[0]);",
          "285:   const unsigned char *zR = sqlite3_value_text(apVal[1]);",
          "286:   int nL = sqlite3_value_bytes(apVal[0]);",
          "287:   int nR = sqlite3_value_bytes(apVal[1]);",
          "288:   int i;",
          "290:   nByte = (nL > nR ? nL : nR);",
          "291:   for(i=0; i<nByte; i++){",
          "292:     if( zL[i]!=zR[i] ) break;",
          "293:     if( (zL[i] & 0xC0)!=0x80 ) nRet++;",
          "294:   }",
          "296:   if( (zL[i] & 0xC0)==0x80 ) nRet--;",
          "297:   sqlite3_result_int(ctx, nRet);",
          "298: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "261:   int rc = SQLITE_OK;",
          "262:   SQLITE_EXTENSION_INIT2(pApi);",
          "263:   rc = sqlite3_create_module(db, \"prefixes\", &prefixesModule, 0);",
          "264:   return rc;",
          "265: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "311:   if( rc==SQLITE_OK ){",
          "312:     rc = sqlite3_create_function(",
          "313:         db, \"prefix_length\", 2, SQLITE_UTF8, 0, prefixLengthFunc, 0, 0",
          "314:     );",
          "315:   }",
          "",
          "---------------"
        ],
        "main.mk||main.mk": [
          "File: main.mk -> main.mk",
          "--- Hunk 1 ---",
          "[Context before]",
          "369:   $(TOP)/ext/misc/nextchar.c \\",
          "370:   $(TOP)/ext/misc/normalize.c \\",
          "371:   $(TOP)/ext/misc/percentile.c \\",
          "372:   $(TOP)/ext/misc/regexp.c \\",
          "373:   $(TOP)/ext/misc/remember.c \\",
          "374:   $(TOP)/ext/misc/series.c \\",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "372:   $(TOP)/ext/misc/prefixes.c \\",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 11b8a4cba747ca214fe3506caa3b711c87be4d55412754e673cc0603afefb086",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7141:   extern int sqlite3_ieee_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7142:   extern int sqlite3_nextchar_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7143:   extern int sqlite3_percentile_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7144:   extern int sqlite3_regexp_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7145:   extern int sqlite3_remember_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "7146:   extern int sqlite3_series_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7144:   extern int sqlite3_prefixes_init(sqlite3*,char**,const sqlite3_api_routines*);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "7166:     { \"ieee754\",               sqlite3_ieee_init                 },",
          "7167:     { \"nextchar\",              sqlite3_nextchar_init             },",
          "7168:     { \"percentile\",            sqlite3_percentile_init           },",
          "7169:     { \"regexp\",                sqlite3_regexp_init               },",
          "7170:     { \"remember\",              sqlite3_remember_init             },",
          "7171:     { \"series\",                sqlite3_series_init               },",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7170:     { \"prefixes\",              sqlite3_prefixes_init             },",
          "",
          "---------------"
        ],
        "test/prefixes.test||test/prefixes.test": [
          "File: test/prefixes.test -> test/prefixes.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018-01-15",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this file is prefixes.c extension",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix unionvtab",
          "19: ifcapable !vtab {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: load_static_extension db prefixes",
          "26: foreach {tn zLeft zRight expected} {",
          "27:   1 abcdxxx abcyy    3",
          "28:   2 abcdxxx bcyyy    0",
          "29:   3 abcdxxx ab       2",
          "30:   4 ab      abcd     2",
          "32:   5 \"xyz\\u1234xz\" \"xyz\\u1234xy\" 5",
          "33:   6 \"xyz\\u1234\"   \"xyz\\u1234xy\" 4",
          "34:   7 \"xyz\\u1234\"   \"xyz\\u1234\"   4",
          "35:   8 \"xyz\\u1234xy\" \"xyz\\u1234\"   4",
          "36:   9 \"xyz\\u1234xy\" \"xyz\\u1233\"   3",
          "37:  10 \"xyz\\u1234xy\" \"xyz\\u1235\"   3",
          "38: } {",
          "39:   do_execsql_test 1.$tn { SELECT prefix_length($zLeft, $zRight) } $expected",
          "40: }",
          "43: do_execsql_test 2.0 {",
          "44:   CREATE TABLE t1(k TEXT UNIQUE, v INTEGER);",
          "45:   INSERT INTO t1 VALUES",
          "46:     ('aback', 1),",
          "47:     ('abaft', 2),",
          "48:     ('abandon', 3),",
          "49:     ('abandoned', 4),",
          "50:     ('abandoning', 5),",
          "51:     ('abandonment', 6),",
          "52:     ('abandons', 7),",
          "53:     ('abase', 8),",
          "54:     ('abased', 9),",
          "55:     ('abasement', 10),",
          "56:     ('abasements', 11),",
          "57:     ('abases', 12),",
          "58:     ('abash', 13),",
          "59:     ('abashed', 14),",
          "60:     ('abashes', 15),",
          "61:     ('abashing', 16),",
          "62:     ('abasing', 17),",
          "63:     ('abate', 18),",
          "64:     ('abated', 19),",
          "65:     ('abatement', 20),",
          "66:     ('abatements', 21);",
          "67: }",
          "69: foreach {tn INPUT expected} {",
          "70:   1 abatementt   abatement",
          "71:   2 abashet      abash",
          "72:   3 abandonio    abandon",
          "73:   4 abasemenu    abase",
          "74: } {",
          "75:   do_execsql_test 2.$tn {",
          "76:     WITH finder(str) AS (",
          "77:       SELECT (SELECT max(k) FROM t1 WHERE k<=$INPUT)",
          "78:         UNION ALL",
          "79:         SELECT (",
          "80:           SELECT max(k) FROM t1",
          "81:           WHERE k<=substr($INPUT, 1, prefix_length(finder.str, $INPUT))",
          "82:         ) FROM finder WHERE length(finder.str)>0",
          "83:       )",
          "84:     SELECT str FROM finder WHERE length(str)==prefix_length(str, $INPUT) LIMIT 1",
          "85:   } $expected",
          "86: }",
          "88: finish_test",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e7d9814fe4691bf75d5cb29ab9e7bea67e8159ef",
      "candidate_info": {
        "commit_hash": "e7d9814fe4691bf75d5cb29ab9e7bea67e8159ef",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e7d9814fe4691bf75d5cb29ab9e7bea67e8159ef",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/mkkeywordhash.c"
        ],
        "message": "Fix a potential array bounds overflow in the mkkeywordhash.c code generator. Also add marks to omit keywords specific to generated columns when building with -DSQLITE_OMIT_GENERATED_COLUMNS.\n\nFossilOrigin-Name: cc6a40818387f78f89499f09e3f1c4655c7396af1cba2596c7fb2f23f3e9755f",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f12e743e19a04ecbf7eb69b675082f2e4dda05b38cd81f6588a1ce95dfc57ada",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "154: #else",
          "155: #  define WINDOWFUNC 0x00100000",
          "156: #endif",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "157: #ifdef SQLITE_OMIT_GENERATED_COLUMNS",
          "158: #  define GENCOL 0",
          "159: #else",
          "160: #  define GENCOL 0x00200000",
          "161: #endif",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "165:   { \"AFTER\",            \"TK_AFTER\",        TRIGGER,          0      },",
          "166:   { \"ALL\",              \"TK_ALL\",          ALWAYS,           0      },",
          "167:   { \"ALTER\",            \"TK_ALTER\",        ALTER,            0      },",
          "169:   { \"ANALYZE\",          \"TK_ANALYZE\",      ANALYZE,          0      },",
          "170:   { \"AND\",              \"TK_AND\",          ALWAYS,           10     },",
          "171:   { \"AS\",               \"TK_AS\",           ALWAYS,           10     },",
          "",
          "[Removed Lines]",
          "168:   { \"ALWAYS\",           \"TK_ALWAYS\",       ALWAYS,           0      },",
          "",
          "[Added Lines]",
          "173:   { \"ALWAYS\",           \"TK_ALWAYS\",       GENCOL,           0      },",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "218:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY,             1      },",
          "219:   { \"FROM\",             \"TK_FROM\",         ALWAYS,           10     },",
          "220:   { \"FULL\",             \"TK_JOIN_KW\",      ALWAYS,           3      },",
          "222:   { \"GLOB\",             \"TK_LIKE_KW\",      ALWAYS,           3      },",
          "223:   { \"GROUP\",            \"TK_GROUP\",        ALWAYS,           5      },",
          "224:   { \"GROUPS\",           \"TK_GROUPS\",       WINDOWFUNC,       2      },",
          "",
          "[Removed Lines]",
          "221:   { \"GENERATED\",        \"TK_GENERATED\",    ALWAYS,           1      },",
          "",
          "[Added Lines]",
          "226:   { \"GENERATED\",        \"TK_GENERATED\",    GENCOL,           1      },",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "365: static void reorder(int *pFrom){",
          "366:   int i = *pFrom - 1;",
          "368:   if( j==0 ) return;",
          "369:   j--;",
          "370:   if( aKeywordTable[i].priority >= aKeywordTable[j].priority ) return;",
          "",
          "[Removed Lines]",
          "367:   int j = aKeywordTable[i].iNext;",
          "",
          "[Added Lines]",
          "372:   int j;",
          "373:   if( i<0 ) return;",
          "374:   j = aKeywordTable[i].iNext;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "d4de9f7b1e9a7864691f4b6a785628749d5c461a",
      "candidate_info": {
        "commit_hash": "d4de9f7b1e9a7864691f4b6a785628749d5c461a",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/d4de9f7b1e9a7864691f4b6a785628749d5c461a",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/expr.c",
          "src/pcache1.c",
          "src/utf.c"
        ],
        "message": "Fix an obsolete comment and other minor issues from code inspection.\n\nFossilOrigin-Name: cd084427319394386844d6651479256a2fd57a412fccb79ba53172ce76693eb1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/expr.c||src/expr.c",
          "src/pcache1.c||src/pcache1.c",
          "src/utf.c||src/utf.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: c3932e66040bf4c82727a26a976291fab219e8bc8a6d7579e19304538cc6df18",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1322: static With *withDup(sqlite3 *db, With *p){",
          "1323:   With *pRet = 0;",
          "1324:   if( p ){",
          "1326:     pRet = sqlite3DbMallocZero(db, nByte);",
          "1327:     if( pRet ){",
          "1328:       int i;",
          "",
          "[Removed Lines]",
          "1325:     int nByte = sizeof(*p) + sizeof(p->a[0]) * (p->nCte-1);",
          "",
          "[Added Lines]",
          "1325:     sqlite3_int64 nByte = sizeof(*p) + sizeof(p->a[0]) * (p->nCte-1);",
          "",
          "---------------"
        ],
        "src/pcache1.c||src/pcache1.c": [
          "File: src/pcache1.c -> src/pcache1.c"
        ],
        "src/utf.c||src/utf.c": [
          "File: src/utf.c -> src/utf.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "255:     pMem->n &= ~1;",
          "257:   }else{",
          "264:   }",
          "",
          "[Removed Lines]",
          "256:     len = pMem->n * 2 + 1;",
          "263:     len = pMem->n * 2 + 2;",
          "",
          "[Added Lines]",
          "256:     len = 2 * (sqlite3_int64)pMem->n + 1;",
          "263:     len = 2 * (sqlite3_int64)pMem->n + 2;",
          "",
          "---------------"
        ]
      }
    }
  ]
}