{
  "cve_id": "CVE-2019-19880",
  "cve_desc": "exprListAppendList in window.c in SQLite 3.30.1 allows attackers to trigger an invalid pointer dereference because constant integer values in ORDER BY clauses of window definitions are mishandled.",
  "repo": "sqlite/sqlite",
  "patch_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
  "patch_info": {
    "commit_hash": "75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/75e95e1fcd52d3ec8282edb75ac8cd0814095d54",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/window.c"
    ],
    "message": "When processing constant integer values in ORDER BY clauses of window definitions (see check-in [7e4809eadfe99ebf]) be sure to fully disable the constant value to avoid an invalid pointer dereference if the expression is ever duplicated. This fixes a crash report from Yongheng and Rui.\n\nFossilOrigin-Name: 1ca0bd982ab1183bbafce0d260e4dceda5eb766ed2e7793374a88d1ae0bdd2ca",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/window.c||src/window.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 8223e79f987feda5c8e51ec52cec6798cca16d070b10558939e2888ca1a25b8e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/window.c||src/window.c": [
      "File: src/window.c -> src/window.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "895:     int nInit = pList ? pList->nExpr : 0;",
      "896:     for(i=0; i<pAppend->nExpr; i++){",
      "897:       Expr *pDup = sqlite3ExprDup(pParse->db, pAppend->a[i].pExpr, 0);",
      "898:       if( bIntToNull && pDup && pDup->op==TK_INTEGER ){",
      "899:         pDup->op = TK_NULL;",
      "900:         pDup->flags &= ~(EP_IntValue|EP_IsTrue|EP_IsFalse);",
      "901:       }",
      "902:       pList = sqlite3ExprListAppend(pParse, pList, pDup);",
      "903:       if( pList ) pList->a[nInit+i].sortFlags = pAppend->a[i].sortFlags;",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "898:       assert( pDup==0 || !ExprHasProperty(pDup, EP_MemToken) );",
      "902:         pDup->u.zToken = 0;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "37f6ffb88734c385aa9afc983678867057d09f20",
      "candidate_info": {
        "commit_hash": "37f6ffb88734c385aa9afc983678867057d09f20",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/37f6ffb88734c385aa9afc983678867057d09f20",
        "files": [
          "Makefile.in",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a harmless bug in the Makefile.\n\nFossilOrigin-Name: 62ac9cb07f5f2d14e716cd0f99f3f2fd34f6c9b4303619be8dfbca2eecf5b727",
        "before_after_code_files": [
          "Makefile.in||Makefile.in",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "Makefile.in||Makefile.in": [
          "File: Makefile.in -> Makefile.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1149: rtree.lo: $(TOP)/ext/rtree/rtree.c $(HDR) $(EXTHDR)",
          "1150:  $(LTCOMPILE) -DSQLITE_CORE -c $(TOP)/ext/rtree/rtree.c",
          "1153:  $(LTCOMPILE) -DSQLITE_CORE -c $(TOP)/ext/userauth/userauth.c",
          "1156:  $(LTCOMPILE) -DSQLITE_CORE -c $(TOP)/ext/session/sqlite3session.c",
          "1158: json1.lo: $(TOP)/ext/misc/json1.c",
          "",
          "[Removed Lines]",
          "1152: sqlite3session.lo: $(TOP)/ext/userauth/userauth.c $(HDR) $(EXTHDR)",
          "1155: userauth.lo: $(TOP)/ext/session/sqlite3session.c $(HDR) $(EXTHDR)",
          "",
          "[Added Lines]",
          "1152: userauth.lo: $(TOP)/ext/userauth/userauth.c $(HDR) $(EXTHDR)",
          "1155: sqlite3session.lo: $(TOP)/ext/session/sqlite3session.c $(HDR) $(EXTHDR)",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 97bdc090f30610cc5dd29101452d1647550387f9c6f742e50f1e07c3cf68a147",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e2b7a7693e99dd70ff109b9ea7e52bc2eaaff071",
      "candidate_info": {
        "commit_hash": "e2b7a7693e99dd70ff109b9ea7e52bc2eaaff071",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e2b7a7693e99dd70ff109b9ea7e52bc2eaaff071",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/mutex.h",
          "src/shell.c.in",
          "src/test1.c"
        ],
        "message": "Disable sqlite3_drop_module() tests when virtual tables are omitted from the build.\n\nFossilOrigin-Name: 9f4035f91a9f914797c67afbf19139b2cd25aea48595f7254fe5d18cd693d972",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/mutex.h||src/mutex.h",
          "src/shell.c.in||src/shell.c.in",
          "src/test1.c||src/test1.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 2394879698107479270c9d899c704de3756ceae177a338b3c37844e2a31aa6dd",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/mutex.h||src/mutex.h": [
          "File: src/mutex.h -> src/mutex.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "67: #define MUTEX_LOGIC(X)",
          "68: #else",
          "69: #define MUTEX_LOGIC(X)            X",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "70: int sqlite3_mutex_held(sqlite3_mutex*);",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "9419:   }else",
          "9423:   if( c=='u' && strncmp(azArg[0], \"unmodule\", n)==0 ){",
          "9424:     int ii;",
          "9425:     int lenOpt;",
          "",
          "[Removed Lines]",
          "9422: #ifdef SQLITE_DEBUG",
          "",
          "[Added Lines]",
          "9422: #if defined(SQLITE_DEBUG) && !defined(SQLITE_OMIT_VIRTUALTABLE)",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1131:     return TCL_ERROR;",
          "1132:   }",
          "1133:   if( getDbPointer(interp, argv[1], &db) ) return TCL_ERROR;",
          "1134:   sqlite3_drop_modules(db, argc>2 ? (const char**)(argv+2) : 0);",
          "1135:   return TCL_OK;",
          "1136: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1134: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "1136: #endif",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "81d25cf53d27a4b352de086347850c69cf476aee",
      "candidate_info": {
        "commit_hash": "81d25cf53d27a4b352de086347850c69cf476aee",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/81d25cf53d27a4b352de086347850c69cf476aee",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/update.c"
        ],
        "message": "Mark new VDBE branches never taken.\n\nFossilOrigin-Name: 83c2adffbfb6dcdddb38ad9f888647b0e39fa24dc0bff344238e1f75a6c7d2ed",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/update.c||src/update.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: d768007473f4ed40abbdf2c7e501b580b1cc37c1620c7cb90af1f208a8c35145",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/update.c||src/update.c": [
          "File: src/update.c -> src/update.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "730:       }else{",
          "731:         sqlite3VdbeAddOp3(v, OP_NotExists, iDataCur, labelContinue,regOldRowid);",
          "732:       }",
          "733:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "733:       VdbeCoverageNeverTaken(v);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "6ba81ef1bf73dc9ba14094bcc9913601cfe9e475",
      "candidate_info": {
        "commit_hash": "6ba81ef1bf73dc9ba14094bcc9913601cfe9e475",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/6ba81ef1bf73dc9ba14094bcc9913601cfe9e475",
        "files": [
          "ext/fts3/fts3_write.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5circref.test",
          "ext/rtree/rtree.c",
          "ext/rtree/rtreecirc.test",
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/prepare.c",
          "src/sqlite.h.in",
          "src/sqliteInt.h",
          "src/trigger.c",
          "test/fts3aa.test"
        ],
        "message": "Add new sqlite3_prepare_v3() flag SQLITE_PREPARE_NO_VTAB, for preparing statements that are not allowed to use any virtual tables. Use this to prevent circular references in triggers on virtual table shadow tables from causing resource leaks.\n\nFossilOrigin-Name: da587d18575ac06a6b65fec1d106f0cc65bc10f493ca6c6b99117a2162d15a52",
        "before_after_code_files": [
          "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c",
          "ext/fts5/test/fts5circref.test||ext/fts5/test/fts5circref.test",
          "ext/rtree/rtree.c||ext/rtree/rtree.c",
          "ext/rtree/rtreecirc.test||ext/rtree/rtreecirc.test",
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/prepare.c||src/prepare.c",
          "src/sqlite.h.in||src/sqlite.h.in",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "test/fts3aa.test||test/fts3aa.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts3/fts3_write.c||ext/fts3/fts3_write.c": [
          "File: ext/fts3/fts3_write.c -> ext/fts3/fts3_write.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "397:   pStmt = p->aStmt[eStmt];",
          "398:   if( !pStmt ){",
          "399:     char *zSql;",
          "400:     if( eStmt==SQL_CONTENT_INSERT ){",
          "401:       zSql = sqlite3_mprintf(azSql[eStmt], p->zDb, p->zName, p->zWriteExprlist);",
          "402:     }else if( eStmt==SQL_SELECT_CONTENT_BY_ROWID ){",
          "403:       zSql = sqlite3_mprintf(azSql[eStmt], p->zReadExprlist);",
          "404:     }else{",
          "405:       zSql = sqlite3_mprintf(azSql[eStmt], p->zDb, p->zName);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "399:     int f = SQLITE_PREPARE_PERSISTENT|SQLITE_PREPARE_NO_VTAB;",
          "404:       f &= ~SQLITE_PREPARE_NO_VTAB;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "407:     if( !zSql ){",
          "408:       rc = SQLITE_NOMEM;",
          "409:     }else{",
          "412:       sqlite3_free(zSql);",
          "413:       assert( rc==SQLITE_OK || pStmt==0 );",
          "414:       p->aStmt[eStmt] = pStmt;",
          "",
          "[Removed Lines]",
          "410:       rc = sqlite3_prepare_v3(p->db, zSql, -1, SQLITE_PREPARE_PERSISTENT,",
          "411:                               &pStmt, NULL);",
          "",
          "[Added Lines]",
          "412:       rc = sqlite3_prepare_v3(p->db, zSql, -1, f, &pStmt, NULL);",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "729:   if( p->rc==SQLITE_OK ){",
          "730:     if( zSql ){",
          "731:       p->rc = sqlite3_prepare_v3(p->pConfig->db, zSql, -1,",
          "733:     }else{",
          "734:       p->rc = SQLITE_NOMEM;",
          "735:     }",
          "",
          "[Removed Lines]",
          "732:                                  SQLITE_PREPARE_PERSISTENT, ppStmt, 0);",
          "",
          "[Added Lines]",
          "732:           SQLITE_PREPARE_PERSISTENT|SQLITE_PREPARE_NO_VTAB,",
          "733:           ppStmt, 0);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "770:   if( p->rc!=SQLITE_OK ) return;",
          "772:   if( p->pDeleter==0 ){",
          "774:     Fts5Config *pConfig = p->pConfig;",
          "775:     char *zSql = sqlite3_mprintf(",
          "776:         \"DELETE FROM '%q'.'%q_data' WHERE id>=? AND id<=?\",",
          "777:           pConfig->zDb, pConfig->zName",
          "778:     );",
          "790:   }",
          "792:   sqlite3_bind_int64(p->pDeleter, 1, iFirst);",
          "",
          "[Removed Lines]",
          "773:     int rc;",
          "779:     if( zSql==0 ){",
          "780:       rc = SQLITE_NOMEM;",
          "781:     }else{",
          "782:       rc = sqlite3_prepare_v3(pConfig->db, zSql, -1,",
          "783:                               SQLITE_PREPARE_PERSISTENT, &p->pDeleter, 0);",
          "784:       sqlite3_free(zSql);",
          "785:     }",
          "786:     if( rc!=SQLITE_OK ){",
          "787:       p->rc = rc;",
          "788:       return;",
          "789:     }",
          "",
          "[Added Lines]",
          "779:     if( fts5IndexPrepareStmt(p, &p->pDeleter, zSql) ) return;",
          "",
          "---------------"
        ],
        "ext/fts5/fts5_storage.c||ext/fts5/fts5_storage.c": [
          "File: ext/fts5/fts5_storage.c -> ext/fts5/fts5_storage.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:     if( zSql==0 ){",
          "137:       rc = SQLITE_NOMEM;",
          "138:     }else{",
          "141:       sqlite3_free(zSql);",
          "142:       if( rc!=SQLITE_OK && pzErrMsg ){",
          "",
          "[Removed Lines]",
          "139:       rc = sqlite3_prepare_v3(pC->db, zSql, -1,",
          "140:                               SQLITE_PREPARE_PERSISTENT, &p->aStmt[eStmt], 0);",
          "",
          "[Added Lines]",
          "139:       int f = SQLITE_PREPARE_PERSISTENT;",
          "140:       if( eStmt>FTS5_STMT_LOOKUP ) f |= SQLITE_PREPARE_NO_VTAB;",
          "141:       rc = sqlite3_prepare_v3(pC->db, zSql, -1, f, &p->aStmt[eStmt], 0);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5circref.test||ext/fts5/test/fts5circref.test": [
          "File: ext/fts5/test/fts5circref.test -> ext/fts5/test/fts5circref.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 Dec 22",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: set testprefix fts5circref",
          "18: # If SQLITE_ENABLE_FTS5 is not defined, omit this file.",
          "19: ifcapable !fts5 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: do_execsql_test 1.0 {",
          "25:   CREATE VIRTUAL TABLE tt USING fts5(a);",
          "26:   SELECT name FROM sqlite_master ORDER BY 1;",
          "27: } {",
          "28:   tt tt_config tt_content tt_data tt_docsize tt_idx",
          "29: }",
          "30: db_save_and_close",
          "32: foreach {tn schema sql} {",
          "33:   1 {",
          "34:     CREATE TRIGGER tr1 AFTER INSERT ON tt_config BEGIN",
          "35:       SELECT * FROM tt;",
          "36:     END;",
          "37:   } {",
          "38:     INSERT INTO tt(tt, rank) VALUES('usermerge', 4);",
          "39:   }",
          "41:   2 {",
          "42:     CREATE TRIGGER tr1 AFTER INSERT ON tt_docsize BEGIN",
          "43:       SELECT * FROM tt;",
          "44:     END;",
          "45:   } {",
          "46:     INSERT INTO tt(a) VALUES('one two three');",
          "47:   }",
          "49:   3 {",
          "50:     CREATE TRIGGER tr1 AFTER INSERT ON tt_content BEGIN",
          "51:       SELECT * FROM tt;",
          "52:     END;",
          "53:   } {",
          "54:     INSERT INTO tt(a) VALUES('one two three');",
          "55:   }",
          "57:   4 {",
          "58:     CREATE TRIGGER tr1 AFTER INSERT ON tt_data BEGIN",
          "59:       SELECT * FROM tt;",
          "60:     END;",
          "61:   } {",
          "62:     INSERT INTO tt(a) VALUES('one two three');",
          "63:   }",
          "65:   5 {",
          "66:     CREATE TRIGGER tr1 AFTER INSERT ON tt_idx BEGIN",
          "67:       SELECT * FROM tt;",
          "68:     END;",
          "69:   } {",
          "70:     INSERT INTO tt(a) VALUES('one two three');",
          "71:   }",
          "72: } {",
          "73:   db_restore_and_reopen",
          "74:   do_execsql_test 1.1.$tn.1 $schema",
          "75:   do_catchsql_test 1.1.$tn.2 $sql {1 {SQL logic error}}",
          "76:   db close",
          "77: }",
          "80: finish_test",
          "",
          "---------------"
        ],
        "ext/rtree/rtree.c||ext/rtree/rtree.c": [
          "File: ext/rtree/rtree.c -> ext/rtree/rtree.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3423:   };",
          "3424:   sqlite3_stmt **appStmt[N_STATEMENT];",
          "3425:   int i;",
          "3427:   pRtree->db = db;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3426:   const int f = SQLITE_PREPARE_PERSISTENT|SQLITE_PREPARE_NO_VTAB;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3479:     }",
          "3480:     zSql = sqlite3_mprintf(zFormat, zDb, zPrefix);",
          "3481:     if( zSql ){",
          "3484:     }else{",
          "3485:       rc = SQLITE_NOMEM;",
          "3486:     }",
          "",
          "[Removed Lines]",
          "3482:       rc = sqlite3_prepare_v3(db, zSql, -1, SQLITE_PREPARE_PERSISTENT,",
          "3483:                               appStmt[i], 0);",
          "",
          "[Added Lines]",
          "3483:       rc = sqlite3_prepare_v3(db, zSql, -1, f, appStmt[i], 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3510:       if( zSql==0 ){",
          "3511:         rc = SQLITE_NOMEM;",
          "3512:       }else{",
          "3515:         sqlite3_free(zSql);",
          "3516:       }",
          "3517:     }",
          "",
          "[Removed Lines]",
          "3513:         rc = sqlite3_prepare_v3(db, zSql, -1, SQLITE_PREPARE_PERSISTENT,",
          "3514:                                 &pRtree->pWriteAux, 0);",
          "",
          "[Added Lines]",
          "3513:         rc = sqlite3_prepare_v3(db, zSql, -1, f, &pRtree->pWriteAux, 0);",
          "",
          "---------------"
        ],
        "ext/rtree/rtreecirc.test||ext/rtree/rtreecirc.test": [
          "File: ext/rtree/rtreecirc.test -> ext/rtree/rtreecirc.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2018 Dec 22",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: if {![info exists testdir]} {",
          "16:   set testdir [file join [file dirname [info script]] .. .. test]",
          "17: }",
          "18: source [file join [file dirname [info script]] rtree_util.tcl]",
          "19: source $testdir/tester.tcl",
          "20: set testprefix rtreecirc",
          "22: ifcapable !rtree {",
          "23:   finish_test",
          "24:   return",
          "25: }",
          "27: do_execsql_test 1.0 {",
          "28:   CREATE VIRTUAL TABLE rt USING rtree(id, x1, x2, y1, y2);",
          "29:   SELECT name FROM sqlite_master ORDER BY 1;",
          "30: } {",
          "31:   rt rt_node rt_parent rt_rowid",
          "32: }",
          "33: db_save_and_close",
          "35: foreach {tn schema sql} {",
          "36:   1 {",
          "37:     CREATE TRIGGER tr1 AFTER INSERT ON rt_node BEGIN",
          "38:       SELECT * FROM rt;",
          "39:     END;",
          "40:   } {",
          "41:     INSERT INTO rt VALUES(1, 2, 3, 4, 5);",
          "42:   }",
          "43:   2 {",
          "44:     CREATE TRIGGER tr1 AFTER INSERT ON rt_parent BEGIN",
          "45:       SELECT * FROM rt;",
          "46:     END;",
          "47:   } {",
          "48:     INSERT INTO rt VALUES(1, 2, 3, 4, 5);",
          "49:   }",
          "50:   3 {",
          "51:     CREATE TRIGGER tr1 AFTER INSERT ON rt_rowid BEGIN",
          "52:       SELECT * FROM rt;",
          "53:     END;",
          "54:   } {",
          "55:     INSERT INTO rt VALUES(1, 2, 3, 4, 5);",
          "56:   }",
          "57: } {",
          "58:   db_restore_and_reopen",
          "59:   do_execsql_test  1.1.$tn.1 $schema",
          "60:   do_catchsql_test 1.1.$tn.2 $sql {1 {no such table: main.rt}}",
          "61:   db close",
          "62: }",
          "65: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1abb83d29a06308c96bea379311b390240347c5f81824749348d18ad75840c96",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "355:   p = sqlite3FindTable(db, zName, zDbase);",
          "356:   if( p==0 ){",
          "358: #ifndef SQLITE_OMIT_VIRTUALTABLE",
          "368:     }",
          "369: #endif",
          "377:     }",
          "378:   }",
          "",
          "[Removed Lines]",
          "357:     const char *zMsg = flags & LOCATE_VIEW ? \"no such view\" : \"no such table\";",
          "362:     Module *pMod = (Module*)sqlite3HashFind(&db->aModule, zName);",
          "363:     if( pMod==0 && sqlite3_strnicmp(zName, \"pragma_\", 7)==0 ){",
          "364:       pMod = sqlite3PragmaVtabRegister(db, zName);",
          "365:     }",
          "366:     if( pMod && sqlite3VtabEponymousTableInit(pParse, pMod) ){",
          "367:       return pMod->pEpoTab;",
          "370:     if( (flags & LOCATE_NOERR)==0 ){",
          "371:       if( zDbase ){",
          "372:         sqlite3ErrorMsg(pParse, \"%s: %s.%s\", zMsg, zDbase, zName);",
          "373:       }else{",
          "374:         sqlite3ErrorMsg(pParse, \"%s: %s\", zMsg, zName);",
          "375:       }",
          "376:       pParse->checkSchema = 1;",
          "",
          "[Added Lines]",
          "361:     if( pParse->disableVtab==0 ){",
          "362:       Module *pMod = (Module*)sqlite3HashFind(&db->aModule, zName);",
          "363:       if( pMod==0 && sqlite3_strnicmp(zName, \"pragma_\", 7)==0 ){",
          "364:         pMod = sqlite3PragmaVtabRegister(db, zName);",
          "365:       }",
          "366:       if( pMod && sqlite3VtabEponymousTableInit(pParse, pMod) ){",
          "367:         return pMod->pEpoTab;",
          "368:       }",
          "371:     if( flags & LOCATE_NOERR ) return 0;",
          "372:     pParse->checkSchema = 1;",
          "373:   }else if( IsVirtual(p) && pParse->disableVtab ){",
          "374:     p = 0;",
          "375:   }",
          "377:   if( p==0 ){",
          "378:     const char *zMsg = flags & LOCATE_VIEW ? \"no such view\" : \"no such table\";",
          "379:     if( zDbase ){",
          "380:       sqlite3ErrorMsg(pParse, \"%s: %s.%s\", zMsg, zDbase, zName);",
          "381:     }else{",
          "382:       sqlite3ErrorMsg(pParse, \"%s: %s\", zMsg, zName);",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "545:     sParse.disableLookaside++;",
          "546:     db->lookaside.bDisable++;",
          "547:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "548:   sParse.disableVtab = (prepFlags & SQLITE_PREPARE_NO_VTAB)!=0;",
          "",
          "---------------"
        ],
        "src/sqlite.h.in||src/sqlite.h.in": [
          "File: src/sqlite.h.in -> src/sqlite.h.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "3641: #define SQLITE_PREPARE_PERSISTENT              0x01",
          "3642: #define SQLITE_PREPARE_NORMALIZE               0x02",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3648: #define SQLITE_PREPARE_NO_VTAB                 0x04",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "916:   pSubParse->zAuthContext = pTrigger->zName;",
          "917:   pSubParse->eTriggerOp = pTrigger->op;",
          "918:   pSubParse->nQueryLoop = pParse->nQueryLoop;",
          "920:   v = sqlite3GetVdbe(pSubParse);",
          "921:   if( v ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "919:   pSubParse->disableVtab = pParse->disableVtab;",
          "",
          "---------------"
        ],
        "test/fts3aa.test||test/fts3aa.test": [
          "File: test/fts3aa.test -> test/fts3aa.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "250:   CREATE VIRTUAL TABLE t10 USING fts3(<, b, c);",
          "251: }",
          "253: expand_all_sql db",
          "254: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "253: do_execsql_test 10.0 {",
          "254:   CREATE VIRTUAL TABLE z1 USING fts3;",
          "255:   INSERT INTO z1 VALUES('one two three'),('four one five'),('six two five');",
          "256:   CREATE TRIGGER z1r1 AFTER DELETE ON z1_content BEGIN",
          "257:     DELETE FROM z1;",
          "258:   END;",
          "259: }",
          "260: do_catchsql_test 10.1 {",
          "261:   DELETE FROM z1;",
          "262: } {1 {SQL logic error}}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "4d02b5f7d0e346ea8faeeb8d65d57f516d1def44",
      "candidate_info": {
        "commit_hash": "4d02b5f7d0e346ea8faeeb8d65d57f516d1def44",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4d02b5f7d0e346ea8faeeb8d65d57f516d1def44",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/shell.c.in"
        ],
        "message": "Add casts to shell.c.in to avoid warnings on systems where size_t is 32 bits.\n\nFossilOrigin-Name: fe014288ac03cdf0dc5410b7d45cad4768759b52746c0a22bce2fc03779c5d5a",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/shell.c.in||src/shell.c.in"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 9e66458592d40fbd96ea5f21339573110ca1cfe328238a020c9420a87d35dd72",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/shell.c.in||src/shell.c.in": [
          "File: src/shell.c.in -> src/shell.c.in",
          "--- Hunk 1 ---",
          "[Context before]",
          "1256:   }",
          "1257:   sz = sqlite3_value_bytes(argv[0]);",
          "1258:   if( bBin ){",
          "1260:   }else{",
          "1261:     const char *z = (const char*)sqlite3_value_text(argv[0]);",
          "1263:     if( z && strstr(z,\"\\r\\n\")!=0 ) hasCRNL = 1;",
          "1265:   }",
          "1266:   fclose(f);",
          "1267:   f = 0;",
          "",
          "[Removed Lines]",
          "1259:     x = fwrite(sqlite3_value_blob(argv[0]), 1, sz, f);",
          "1264:     x = fwrite(sqlite3_value_text(argv[0]), 1, sz, f);",
          "",
          "[Added Lines]",
          "1259:     x = fwrite(sqlite3_value_blob(argv[0]), 1, (size_t)sz, f);",
          "1264:     x = fwrite(sqlite3_value_text(argv[0]), 1, (size_t)sz, f);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1294:     sqlite3_result_error_nomem(context);",
          "1295:     goto edit_func_end;",
          "1296:   }",
          "1298:   fclose(f);",
          "1299:   f = 0;",
          "1300:   if( x!=sz ){",
          "",
          "[Removed Lines]",
          "1297:   x = fread(p, 1, sz, f);",
          "",
          "[Added Lines]",
          "1297:   x = fread(p, 1, (size_t)sz, f);",
          "",
          "---------------"
        ]
      }
    }
  ]
}