{
  "cve_id": "CVE-2019-19926",
  "cve_desc": "multiSelect in select.c in SQLite 3.30.1 mishandles certain errors during parsing, as demonstrated by errors from sqlite3WindowRewrite() calls. NOTE: this vulnerability exists because of an incomplete fix for CVE-2019-19880.",
  "repo": "sqlite/sqlite",
  "patch_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
  "patch_info": {
    "commit_hash": "8428b3b437569338a9d1e10c4cd8154acbe33089",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/8428b3b437569338a9d1e10c4cd8154acbe33089",
    "files": [
      "manifest",
      "manifest.uuid",
      "src/select.c"
    ],
    "message": "Continuation of [e2bddcd4c55ba3cb]: Add another spot where it is necessary to abort early due to prior errors in sqlite3WindowRewrite().\n\nFossilOrigin-Name: cba2a2a44cdf138a629109bb0ad088ed4ef67fc66bed3e0373554681a39615d2",
    "before_after_code_files": [
      "manifest.uuid||manifest.uuid",
      "src/select.c||src/select.c"
    ]
  },
  "patch_diff": {
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: 3d4c0bf8904135fa68c75801bfa738715cacc3b19dc8ad6ef550b11798d4b121",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "src/select.c||src/select.c": [
      "File: src/select.c -> src/select.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "2809:     }",
      "2810:   #endif",
      "2811:   }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "2812:   if( pParse->nErr ) goto multi_select_end;",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "4c7bdd159755ab03afff1825def5e7b88ac1ed4b",
      "candidate_info": {
        "commit_hash": "4c7bdd159755ab03afff1825def5e7b88ac1ed4b",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/4c7bdd159755ab03afff1825def5e7b88ac1ed4b",
        "files": [
          "ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix a buffer overwrite triggered by a prefix query on a corrupt fts5 table.\n\nFossilOrigin-Name: 1d8172a94bce2d067027685e5aa1dc8f5d5d55b5da0832ad2836f6939de68c8f",
        "before_after_code_files": [
          "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c",
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_buffer.c||ext/fts5/fts5_buffer.c": [
          "File: ext/fts5/fts5_buffer.c -> ext/fts5/fts5_buffer.c"
        ],
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5021:         fts5BufferSafeAppendBlob(&out, tmp.p, tmp.n);",
          "5022:         fts5DoclistIterNext(&i1);",
          "5023:         fts5DoclistIterNext(&i2);",
          "5024:         if( i1.aPoslist==0 || i2.aPoslist==0 ) break;",
          "5025:       }",
          "5026:     }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "5024:         assert( out.n<=(p1->n+p2->n+9) );",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5corrupt3.test||ext/fts5/test/fts5corrupt3.test": [
          "File: ext/fts5/test/fts5corrupt3.test -> ext/fts5/test/fts5corrupt3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "4896: do_catchsql_test 38.1 {",
          "4897:   UPDATE t1 SET b=quote(zeroblob(200)) WHERE t1 MATCH 'thread*';",
          "4902: sqlite3_fts5_may_be_corrupt 0",
          "",
          "[Removed Lines]",
          "4898: } {1 {database disk image is malformed}}",
          "",
          "[Added Lines]",
          "4898: } {0 {}}",
          "4900: #-------------------------------------------------------------------------",
          "4901: reset_db",
          "4902: do_test 39.0 {",
          "4903:   sqlite3 db {}",
          "4904:   db deserialize [decode_hexdb {",
          "4905: .open --hexdb",
          "4906: | size 24576 pagesize 4096 filename crash-e650fe95502908.db",
          "4907: | page 1 offset 0",
          "4908: |      0: 53 51 4c 69 74 65 20 66 6f 72 6d 61 74 20 33 00   SQLite format 3.",
          "4909: |     16: 10 00 01 01 00 40 20 20 00 00 00 00 00 00 00 06   .....@  ........",
          "4910: |     32: 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 04   ................",
          "4911: |     48: 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00 00   ................",
          "4912: |     96: 00 00 00 00 0d 00 00 00 06 0e 0f 00 0f aa 0f 53   ...............S",
          "4913: |    112: 0e e8 0e 8b 0e 33 0e 0f 00 00 00 00 00 00 00 00   .....3..........",
          "4914: |   3584: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 22   ................",
          "4915: |   3600: 06 06 17 11 11 01 31 74 61 62 6c 65 62 62 62 62   ......1tablebbbb",
          "4916: |   3616: 06 43 52 45 41 54 45 20 54 41 42 4c 45 20 62 62   .CREATE TABLE bb",
          "4917: |   3632: 28 61 29 56 05 06 17 1f 1f 01 7d 74 61 62 6c 65   (a)V.......table",
          "4918: |   3648: 74 31 5f 63 6f 6e 66 69 67 74 31 5f 63 6f 6e 66   t1_configt1_conf",
          "4919: |   3664: 69 67 05 43 52 45 41 54 45 20 54 41 42 4c 45 20   ig.CREATE TABLE",
          "4920: |   3680: 27 74 31 5f 63 6f 6e 66 69 67 27 28 6b 20 50 52   't1_config'(k PR",
          "4921: |   3696: 49 4d 41 52 59 20 4b 45 59 2c 20 76 29 20 57 49   IMARY KEY, v) WI",
          "4922: |   3712: 54 48 4f 55 54 20 52 4f 57 49 44 5b 04 07 17 21   THOUT ROWID[...!",
          "4923: |   3728: 21 01 81 01 74 61 62 6c 65 74 31 5f 64 6f 63 73   !...tablet1_docs",
          "4924: |   3744: 69 7a 65 74 31 5f 64 6f 63 73 69 7a 65 04 43 52   izet1_docsize.CR",
          "4925: |   3760: 45 41 54 45 20 54 41 42 4c 45 20 27 74 31 5f 64   EATE TABLE 't1_d",
          "4926: |   3776: 6f 63 73 69 7a 65 27 28 69 64 20 49 4e 54 45 47   ocsize'(id INTEG",
          "4927: |   3792: 45 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20   ER PRIMARY KEY,",
          "4928: |   3808: 73 7a 20 42 4c 4f 42 29 69 03 07 17 19 19 01 81   sz BLOB)i.......",
          "4929: |   3824: 2d 74 61 62 6c 65 74 31 5f 69 64 78 74 31 5f 69   -tablet1_idxt1_i",
          "4930: |   3840: 64 78 03 43 52 45 41 54 45 20 54 41 42 4c 45 20   dx.CREATE TABLE",
          "4931: |   3856: 27 74 31 5f 69 64 78 27 28 73 65 67 69 64 2c 20   't1_idx'(segid,",
          "4932: |   3872: 74 65 72 6d 2c 20 70 67 6e 6f 2c 20 50 52 49 4d   term, pgno, PRIM",
          "4933: |   3888: 41 52 59 20 4b 45 59 28 73 65 67 69 64 2c 20 74   ARY KEY(segid, t",
          "4934: |   3904: 65 72 6d 29 29 20 57 49 54 48 4f 55 54 20 52 4f   erm)) WITHOUT RO",
          "4935: |   3920: 57 49 44 55 02 07 17 1b 1b 01 81 01 74 61 62 6c   WIDU........tabl",
          "4936: |   3936: 65 74 31 5f 64 61 74 61 74 31 5f 64 61 74 61 02   et1_datat1_data.",
          "4937: |   3952: 43 52 45 41 54 45 20 54 41 42 4c 45 20 27 74 31   CREATE TABLE 't1",
          "4938: |   3968: 5f 64 61 74 61 27 28 69 64 20 49 4e 54 45 47 45   _data'(id INTEGE",
          "4939: |   3984: 52 20 50 52 49 4d 41 52 59 20 4b 45 59 2c 20 62   R PRIMARY KEY, b",
          "4940: |   4000: 6c 6f 63 6b 20 42 4c 4f 42 29 54 01 07 17 11 11   lock BLOB)T.....",
          "4941: |   4016: 08 81 15 74 61 62 6c 65 74 31 74 31 43 52 45 41   ...tablet1t1CREA",
          "4942: |   4032: 54 45 20 56 49 52 54 55 41 4c 20 54 41 42 4c 45   TE VIRTUAL TABLE",
          "4943: |   4048: 20 74 31 20 55 53 49 4e 47 20 66 74 73 35 28 61    t1 USING fts5(a",
          "4944: |   4064: 2c 62 2c 70 72 65 66 69 78 3d 22 32 2c 32 2c 33   ,b,prefix=.2,2,3",
          "4945: |   4080: 2c 34 22 2c 20 63 6f 6e 74 65 6e 74 3d 22 22 29   ,4., content=..)",
          "4946: | page 2 offset 4096",
          "4947: |      0: 0d 0b 6a 00 37 09 4c 02 0f e7 09 4c 0f c6 0f a4   ..j.7.L....L....",
          "4948: |     16: 0f 88 0f 6d 0f 4b 0f 2c 0f 0e 0e ec 0e cd 0e ad   ...m.K.,........",
          "4949: |     32: 0e 8e 0e 6c 0e 4b 0e 29 0e 08 0d e6 0d c4 0d b5   ...l.K.)........",
          "4950: |     48: 0d 97 0d 76 0d 54 0d 31 0d 15 0c f3 0c d3 0c b5   ...v.T.1........",
          "4951: |     64: 0c 95 0c 73 0c 54 0c 32 0c 10 0b ee 0b cc 0b b0   ...s.T.2........",
          "4952: |     80: 0b 8d 0b 7e 0b 48 0b 2e 0b 0b 0a ef 0a cc 0a ad   ...~.H..........",
          "4953: |     96: 0a 8c 0a 6d 0a 4d 0a 2b 0a 0c 09 ec 09 ca 09 a8   ...m.M.+........",
          "4954: |    112: 09 86 09 63 0f f1 00 00 00 00 00 00 00 00 00 00   ...c............",
          "4955: |   2368: 00 00 00 00 00 00 00 00 00 00 00 00 15 0a 03 00   ................",
          "4956: |   2384: 30 00 00 00 01 01 03 35 00 03 01 01 12 02 01 12   0......5........",
          "4957: |   2400: 03 01 11 1c 8c 80 80 80 80 10 03 00 3e 00 00 00   ............>...",
          "4958: |   2416: 17 01 05 05 34 74 61 62 6c 03 02 03 01 04 77 68   ....4tabl.....wh",
          "4959: |   2432: 65 72 03 02 06 09 1b 8c 80 80 80 80 0f 03 00 3c   er.............<",
          "4960: |   2448: 00 00 00 16 05 34 66 74 73 34 03 02 02 01 04 6e   .....4fts4.....n",
          "4961: |   2464: 75 6d 62 03 06 01 04 09 1b 8c 80 80 80 80 0e 03   umb.............",
          "4962: |   2480: 00 3c 00 00 00 16 04 33 74 68 65 03 06 01 01 04   .<.....3the.....",
          "4963: |   2496: 01 03 77 68 65 03 02 04 04 0a 1b 8c 80 80 80 80   ..whe...........",
          "4964: |   2512: 0d 03 00 3c 00 00 00 16 04 33 6e 75 6d 03 06 01   ...<.....3num...",
          "4965: |   2528: 01 05 01 03 74 61 62 03 02 03 04 0a 19 8c 80 80   ....tab.........",
          "4966: |   2544: 80 80 0c 03 00 38 00 00 00 14 03 32 77 68 03 02   .....8.....2wh..",
          "4967: |   2560: 04 00 04 33 66 74 73 03 02 02 04 07 18 8c 80 80   ...3fts.........",
          "4968: |   2576: 80 80 0b 03 00 36 00 00 00 13 03 32 74 61 03 02   .....6.....2ta..",
          "4969: |   2592: 03 02 01 68 03 06 01 01 04 04 07 1b 8c 80 80 80   ...h............",
          "4970: |   2608: 80 0a 03 00 3c 00 00 00 16 03 32 6e 75 03 06 01   ....<.....2nu...",
          "4971: |   2624: 01 05 01 02 6f 66 03 06 01 01 06 04 09 19 8c 80   ....of..........",
          "4972: |   2640: 80 80 80 09 03 00 38 00 00 00 14 03 32 66 74 03   ......8.....2ft.",
          "4973: |   2656: 02 02 01 02 69 73 03 06 01 01 03 04 07 18 8c 80   ....is..........",
          "4974: |   2672: 80 80 80 08 03 00 36 00 00 00 13 02 31 74 03 08   ......6.....1t..",
          "4975: |   2688: 03 01 01 04 01 01 77 03 02 04 04 09 1a 8c 80 80   ......w.........",
          "4976: |   2704: 80 80 07 03 00 3a ff 00 00 15 02 31 6e 03 08 01   .....:.....1n...",
          "4977: |   2720: 01 02 05 01 01 6f 03 06 01 01 06 04 09 18 8c 80   .....o..........",
          "4978: |   2736: 80 80 80 06 03 00 36 00 00 00 13 04 02 31 66 03   ......6......1f.",
          "4979: |   2752: 02 02 01 01 69 03 06 01 01 03 05 06 1c 8c 80 80   ....i...........",
          "4980: |   2768: 80 80 05 03 00 3e 00 00 00 17 04 30 74 68 65 03   .....>.....0the.",
          "4981: |   2784: 06 00 f1 04 01 05 77 68 65 72 65 03 02 04 0a 15   ......where.....",
          "4982: |   2800: 8c 80 80 80 80 04 03 00 30 00 00 00 11 01 01 06   ........0.......",
          "4983: |   2816: 06 30 74 61 62 6c 65 03 02 03 07 1c 8c 80 80 80   .0table.........",
          "4984: |   2832: 80 03 03 00 3e 00 00 00 17 07 30 6e 75 6d 62 65   ....>.....0numbe",
          "4985: |   2848: 72 03 06 01 01 05 01 02 6f 66 03 06 04 0d 13 8c   r.......of......",
          "4986: |   2864: 80 80 80 80 02 03 00 2c 00 00 00 0f 01 01 03 02   .......,........",
          "4987: |   2880: 30 6e 03 06 01 01 02 07 1b 8c 80 80 80 80 01 03   0n..............",
          "4988: |   2896: 00 3c 00 00 00 16 08 30 66 74 73 34 61 75 78 03   .<.....0fts4aux.",
          "4989: |   2912: 02 02 01 02 69 73 03 06 04 0c 00 00 00 14 2a 00   ....is........*.",
          "4990: |   2928: 00 00 01 01 02 24 00 02 01 01 12 02 01 12 08 88   .....$..........",
          "4991: |   2944: 80 80 80 80 12 03 00 16 00 00 00 05 02 1c 88 80   ................",
          "4992: |   2960: 80 80 80 11 03 00 3e 00 00 00 17 05 34 72 6f 77   ......>.....4row",
          "4993: |   2976: 73 02 06 01 01 05 01 04 74 68 65 72 02 02 04 0b   s.......ther....",
          "4994: |   2992: 15 88 80 80 80 80 10 03 00 30 00 00 00 11 02 01   .........0......",
          "4995: |   3008: 01 07 05 34 62 65 74 77 02 02 04 08 1b 88 80 80   ...4betw........",
          "4996: |   3024: 80 80 0f 03 00 3c 00 00 00 16 04 04 33 72 6f 77   .....<......3row",
          "4997: |   3040: 02 06 01 01 05 01 03 74 68 65 02 08 05 0a 1b 88   .......the......",
          "4998: |   3056: 80 80 80 80 0e 03 00 3c 00 00 00 16 01 01 02 04   .......<........",
          "4999: |   3072: 33 61 72 65 02 02 03 01 03 62 65 74 02 02 07 08   3are.....bet....",
          "5000: |   3088: 1b 88 80 80 80 80 0d 03 00 3c 00 00 00 16 03 32   .........<.....2",
          "5001: |   3104: 74 68 02 08 02 01 01 07 00 04 33 61 6e 64 02 06   th........3and..",
          "5002: |   3120: 04 0a 1b 88 80 80 80 80 0c 03 00 3c 00 00 00 16   ...........<....",
          "5003: |   3136: 03 32 69 6e 02 06 01 01 06 01 02 72 6f 02 06 01   .2in.......ro...",
          "5004: |   3152: 01 05 04 09 18 88 80 80 80 80 0b 03 00 36 00 00   .............6..",
          "5005: |   3168: 00 13 02 03 32 61 72 02 02 03 01 02 62 65 02 02   ....2ar.....be..",
          "5006: |   3184: 04 05 07 1b 88 80 80 80 80 0a 03 00 3c 00 00 00   ............<...",
          "5007: |   3200: 16 02 31 74 02 08 02 01 01 07 00 03 32 61 6e 02   ..1t........2an.",
          "5008: |   3216: 06 01 01 04 09 19 88 80 80 80 80 09 03 00 38 00   ..............8.",
          "5009: |   3232: 00 00 14 02 31 6e 02 06 01 01 03 01 01 72 02 06   ....1n.......r..",
          "5010: |   3248: 01 01 05 04 08 17 88 80 80 80 80 08 03 00 34 00   ..............4.",
          "5011: |   3264: 00 00 12 02 31 62 02 02 04 01 01 69 02 06 01 01   ....1b.....i....",
          "5012: |   3280: 06 04 06 19 88 80 80 80 80 07 03 00 38 00 00 00   ............8...",
          "5013: |   3296: 14 04 02 31 32 02 02 05 01 01 61 02 08 03 01 01   ...12.....a.....",
          "5014: |   3312: 02 05 06 1b 88 80 80 80 80 06 03 00 3c 00 00 00   ............<...",
          "5015: |   3328: 16 06 30 74 68 65 72 65 02 02 02 00 02 31 31 02   ..0there.....11.",
          "5016: |   3344: 06 01 01 04 0a 15 88 80 80 80 80 05 03 00 30 00   ..............0.",
          "5017: |   3360: 00 00 11 01 01 05 04 30 74 68 65 02 06 01 01 07   .......0the.....",
          "5018: |   3376: 07 1c 88 80 80 80 80 04 03 00 3e 00 00 00 17 01   ..........>.....",
          "5019: |   3392: 01 06 02 30 6e 02 06 01 01 03 01 04 72 6f 77 73   ...0n.......rows",
          "5020: |   3408: 02 06 07 08 1b 88 80 80 80 80 03 03 00 3c 00 00   .............<..",
          "5021: |   3424: 00 16 08 30 62 65 74 77 65 65 6e 02 02 04 01 02   ...0between.....",
          "5022: |   3440: 69 6e 02 06 04 0c 1a 88 80 80 80 80 02 03 00 3a   in.............:",
          "5023: |   3456: 00 00 00 15 04 30 61 6e 64 02 06 01 01 02 02 02   .....0and.......",
          "5024: |   3472: 72 65 02 02 03 04 0a 17 88 80 80 80 80 01 03 00   re..............",
          "5025: |   3488: 34 00 00 00 12 02 30 31 02 06 01 01 04 01 01 32   4.....01.......2",
          "5026: |   3504: 02 02 05 04 08 08 84 80 80 80 81 12 03 00 16 00   ................",
          "5027: |   3520: 00 00 05 04 1b 84 61 80 80 80 11 03 00 3c 00 00   ......a......<..",
          "5028: |   3536: 00 16 05 34 74 61 62 6c 01 06 01 01 05 02 03 65   ...4tabl.......e",
          "5029: |   3552: 72 6d 01 02 04 0b 1b 84 80 80 80 80 10 03 00 3c   rm.............<",
          "5030: |   3568: 00 00 00 16 05 34 65 61 63 68 01 02 03 01 04 70   .....4each.....p",
          "5031: |   3584: 72 65 73 01 02 05 04 09 1a 84 80 80 80 80 0f 03   res.............",
          "5032: |   3600: 00 3a 00 00 00 15 04 33 74 65 72 01 02 04 02 02   .:.....3ter.....",
          "5033: |   3616: 68 65 01 06 01 01 03 04 08 1b 84 80 80 80 80 0e   he..............",
          "5034: |   3632: 03 00 3c 00 00 00 16 04 33 70 72 65 01 02 05 01   ..<.....3pre....",
          "5035: |   3648: 03 74 61 62 01 06 01 01 05 04 08 1a 84 80 80 80   .tab............",
          "5036: |   3664: 80 0d 03 00 3a 00 00 00 15 04 33 66 6f 72 01 02   ....:.....3for..",
          "5037: |   3680: 02 02 02 74 73 01 06 01 01 04 04 08 1b 84 80 80   ...ts...........",
          "5038: |   3696: 80 80 0c 03 00 3c 00 00 00 16 03 32 74 68 01 06   .....<.....2th..",
          "5039: |   3712: 01 01 03 00 04 33 65 61 63 01 02 03 04 09 18 84   .....3eac.......",
          "5040: |   3728: 80 80 80 80 0b 03 00 36 00 00 00 13 03 32 74 71   .......6.....2tq",
          "5041: |   3744: 01 06 01 01 05 02 01 65 01 02 04 04 09 19 84 80   .......e........",
          "5042: |   3760: 80 80 80 0a 03 00 38 00 00 00 14 03 32 69 6e 01   ......8.....2in.",
          "5043: |   3776: 06 01 01 02 01 02 70 72 01 02 05 0b 89 18 84 80   ......pr........",
          "5044: |   3792: 80 80 80 09 03 00 36 00 00 00 13 03 32 66 6f 01   ......6.....2fo.",
          "5045: |   3808: 02 02 02 01 74 01 06 01 01 04 04 07 1b 84 80 80   ....t...........",
          "5046: |   3824: 80 80 08 03 00 3c 00 00 00 16 02 31 74 01 0a 04   .....<.....1t...",
          "5047: |   3840: 01 01 03 04 00 03 32 65 61 01 02 03 04 0a 17 84   ......2ea.......",
          "5048: |   3856: 80 80 80 80 07 03 00 34 00 00 00 12 02 31 69 01   .......4.....1i.",
          "5049: |   3872: 06 01 01 02 01 01 70 01 02 05 04 08 18 84 80 80   ......p.........",
          "5050: |   3888: 80 80 06 03 00 36 00 00 00 13 02 31 65 01 02 03   .....6.....1e...",
          "5051: |   3904: 01 01 66 01 08 02 01 01 04 04 06 1b 84 80 80 80   ..f.............",
          "5052: |   3920: 80 05 03 00 3c 00 00 00 16 05 30 74 65 72 6d 01   ....<.....0term.",
          "5053: |   3936: 02 04 02 02 68 65 01 06 01 01 03 04 09 14 84 80   ....he..........",
          "5054: |   3952: 80 80 80 04 03 00 2e 00 00 00 10 06 30 74 61 62   ............0tab",
          "5055: |   3968: 6c 65 01 06 01 01 05 04 15 84 80 80 80 80 03 03   le..............",
          "5056: |   3984: 00 30 00 00 00 11 02 08 30 70 72 65 73 65 6e 74   .0......0present",
          "5057: |   4000: 01 02 05 05 1b 84 80 80 80 80 02 03 00 3c 00 00   .............<..",
          "5058: |   4016: 00 16 04 30 66 74 73 01 06 01 01 04 01 02 69 6e   ...0fts.......in",
          "5059: |   4032: 01 06 01 01 04 0a 1a 84 80 80 80 80 01 03 00 3a   ...............:",
          "5060: |   4048: 00 00 00 15 05 30 65 61 63 f4 01 02 03 01 03 66   .....0eac......f",
          "5061: |   4064: 6f 72 01 02 02 04 09 06 01 03 00 12 03 0b 0f 00   or..............",
          "5062: |   4080: 00 08 8c 80 80 80 80 11 03 00 16 00 00 00 05 04   ................",
          "5063: | page 3 offset 8192",
          "5064: |      0: 0a 00 00 00 32 0e 4f 00 0f fa 0f f1 0f e9 0f e1   ....2.O.........",
          "5065: |     16: 0f d8 0f d1 0f c9 0f c1 0f b9 0f b1 0f a9 0f a0   ................",
          "5066: |     32: 0f 98 0f 90 0f 87 0f 80 0f 78 0f 71 0f 68 0f 5f   .........x.q.h._",
          "5067: |     48: 0f 56 0f 4d 0f 41 0f 38 0f 2f 0f 26 0f 1d 0f 13   .V.M.A.8./.&....",
          "5068: |     64: 0f 0a 0f 01 0e f7 0e ee 0e e6 0e dd 0e d6 0e cd   ................",
          "5069: |     80: 0e c3 0e ba 0e b0 0e a8 0e 9f 0e 96 0e 8e 0e 85   ................",
          "5070: |     96: 0e 7c 0e 73 0e 6a 0e 60 0e 58 0e 4f 00 00 00 00   .|.s.j.`.X.O....",
          "5071: |   3648: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 08   ................",
          "5072: |   3664: 04 01 10 01 03 34 74 20 07 04 01 0e 01 03 34 1e   .....4t ......4.",
          "5073: |   3680: 09 04 01 12 01 03 33 74 68 1c 08 04 01 10 01 03   ......3th.......",
          "5074: |   3696: 33 6e 1a 08 04 01 10 01 03 32 77 18 08 04 01 10   3n.......2w.....",
          "5075: |   3712: 01 03 32 74 16 08 04 01 10 01 03 32 6e 14 07 04   ..2t.......2n...",
          "5076: |   3728: 01 0e 01 03 32 12 08 04 01 10 01 03 31 74 10 08   ....2.......1t..",
          "5077: |   3744: 04 01 10 01 03 31 6e 0e 07 04 01 0e 01 03 31 0c   .....1n.......1.",
          "5078: |   3760: 09 04 01 12 01 03 30 74 68 0a 08 04 01 10 01 03   ......0th.......",
          "5079: |   3776: 30 74 08 09 04 01 12 01 03 30 6e 75 06 08 04 01   0t.......0nu....",
          "5080: |   3792: 10 01 03 30 6e 04 06 04 01 0c 01 03 02 08 04 01   ...0n...........",
          "5081: |   3808: 10 01 02 34 72 22 07 04 01 0e 01 02 34 20 08 04   ...4r.......4 ..",
          "5082: |   3824: 01 10 01 02 33 72 1e 09 04 01 12 01 02 33 61 72   ....3r.......3ar",
          "5083: |   3840: 1c 08 04 01 10 01 02 32 74 1a 08 04 01 10 b3 02   .......2t.......",
          "5084: |   3856: 32 69 18 09 04 01 12 01 02 32 61 72 16 08 04 01   2i.......2ar....",
          "5085: |   3872: 10 01 02 31 74 14 08 04 01 10 01 02 31 6e 12 08   ...1t.......1n..",
          "5086: |   3888: 04 01 10 01 02 31 62 10 08 04 01 10 01 02 31 32   .....1b.......12",
          "5087: |   3904: 0e 0b 04 01 16 01 02 30 74 68 65 72 0c 08 04 01   .......0ther....",
          "5088: |   3920: 10 01 02 30 74 0a 08 04 01 10 01 02 30 6e 08 08   ...0t.......0n..",
          "5089: |   3936: 04 01 10 01 02 30 62 06 08 04 01 10 01 02 30 61   .....0b.......0a",
          "5090: |   3952: 05 06 04 01 0c 01 02 02 07 04 09 10 01 34 74 22   .............4t.",
          "5091: |   3968: 06 04 09 0e 01 34 20 08 04 09 12 01 33 74 65 1e   .....4 .....3te.",
          "5092: |   3984: 07 04 09 10 01 33 70 1c 07 04 09 10 01 33 66 1a   .....3p......3f.",
          "5093: |   4000: 08 04 09 12 01 32 74 68 18 07 04 09 10 01 32 2d   .....2th......2-",
          "5094: |   4016: 16 07 04 09 10 01 32 69 14 07 04 09 10 01 32 66   ......2i......2f",
          "5095: |   4032: 12 07 04 09 10 01 31 74 10 07 04 09 10 01 31 69   ......1t......1i",
          "5096: |   4048: 0e 06 04 09 0e 01 31 0c 08 04 09 12 01 30 74 65   ......1......0te",
          "5097: |   4064: 0a 07 04 09 10 01 30 74 08 07 04 09 10 01 30 70   ......0t......0p",
          "5098: |   4080: 06 08 04 09 12 01 30 66 74 04 05 04 09 0c 01 02   ......0ft.......",
          "5099: | page 4 offset 12288",
          "5100: |      0: 0d 00 00 00 03 0f eb 00 0f f9 0f f2 0f eb 00 00   ................",
          "5101: |   4064: 00 00 00 00 00 00 00 00 00 00 00 05 03 03 00 10   ................",
          "5102: |   4080: 03 05 05 02 03 00 10 04 06 05 01 03 00 10 04 03   ................",
          "5103: | page 5 offset 16384",
          "5104: |      0: 0a 00 00 00 02 0f eb 00 0f eb 0f f4 00 00 00 00   ................",
          "5105: |   4064: 00 00 00 00 00 00 00 00 00 00 00 08 03 15 01 70   ...............p",
          "5106: |   4080: 67 73 7a 18 0b 03 1b 01 76 65 72 73 69 6f 6e 04   gsz.....version.",
          "5107: | page 6 offset 20480",
          "5108: |      0: 0d 00 00 00 03 0f f2 00 0f fc 0f f7 0f f2 00 00   ................",
          "5109: |   4080: 00 00 03 03 02 01 03 03 02 02 01 02 02 01 02 09   ................",
          "5110: | end crash-e650fe95502908.db",
          "5111: }]} {}",
          "5113: do_execsql_test 39.1 {",
          "5114:   SELECT rowid FROM t1('t*');",
          "5115: } {1 2 3}",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 1abc4415648e69362061e9f9a4f2c1d419ba33801999b377650d8b9a4d2d3a7c",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "bd0f0eb0374bbad12328507ab213d7a2bc53b056",
      "candidate_info": {
        "commit_hash": "bd0f0eb0374bbad12328507ab213d7a2bc53b056",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/bd0f0eb0374bbad12328507ab213d7a2bc53b056",
        "files": [
          "manifest",
          "manifest.uuid",
          "tool/mkkeywordhash.c"
        ],
        "message": "Slightly faster keyword hash table.\n\nFossilOrigin-Name: f12e743e19a04ecbf7eb69b675082f2e4dda05b38cd81f6588a1ce95dfc57ada",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "tool/mkkeywordhash.c||tool/mkkeywordhash.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 40d3282ec285d9f724f6548283f48b601510cf5284da17485723fd650a68f436",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "tool/mkkeywordhash.c||tool/mkkeywordhash.c": [
          "File: tool/mkkeywordhash.c -> tool/mkkeywordhash.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "160: static Keyword aKeywordTable[] = {",
          "306: };",
          "",
          "[Removed Lines]",
          "161:   { \"ABORT\",            \"TK_ABORT\",        CONFLICT|TRIGGER       },",
          "162:   { \"ACTION\",           \"TK_ACTION\",       FKEY                   },",
          "163:   { \"ADD\",              \"TK_ADD\",          ALTER                  },",
          "164:   { \"AFTER\",            \"TK_AFTER\",        TRIGGER                },",
          "165:   { \"ALL\",              \"TK_ALL\",          ALWAYS                 },",
          "166:   { \"ALTER\",            \"TK_ALTER\",        ALTER                  },",
          "167:   { \"ALWAYS\",           \"TK_ALWAYS\",       ALWAYS                 },",
          "168:   { \"ANALYZE\",          \"TK_ANALYZE\",      ANALYZE                },",
          "169:   { \"AND\",              \"TK_AND\",          ALWAYS                 },",
          "170:   { \"AS\",               \"TK_AS\",           ALWAYS                 },",
          "171:   { \"ASC\",              \"TK_ASC\",          ALWAYS                 },",
          "172:   { \"ATTACH\",           \"TK_ATTACH\",       ATTACH                 },",
          "173:   { \"AUTOINCREMENT\",    \"TK_AUTOINCR\",     AUTOINCR               },",
          "174:   { \"BEFORE\",           \"TK_BEFORE\",       TRIGGER                },",
          "175:   { \"BEGIN\",            \"TK_BEGIN\",        ALWAYS                 },",
          "176:   { \"BETWEEN\",          \"TK_BETWEEN\",      ALWAYS                 },",
          "177:   { \"BY\",               \"TK_BY\",           ALWAYS                 },",
          "178:   { \"CASCADE\",          \"TK_CASCADE\",      FKEY                   },",
          "179:   { \"CASE\",             \"TK_CASE\",         ALWAYS                 },",
          "180:   { \"CAST\",             \"TK_CAST\",         CAST                   },",
          "181:   { \"CHECK\",            \"TK_CHECK\",        ALWAYS                 },",
          "182:   { \"COLLATE\",          \"TK_COLLATE\",      ALWAYS                 },",
          "183:   { \"COLUMN\",           \"TK_COLUMNKW\",     ALTER                  },",
          "184:   { \"COMMIT\",           \"TK_COMMIT\",       ALWAYS                 },",
          "185:   { \"CONFLICT\",         \"TK_CONFLICT\",     CONFLICT               },",
          "186:   { \"CONSTRAINT\",       \"TK_CONSTRAINT\",   ALWAYS                 },",
          "187:   { \"CREATE\",           \"TK_CREATE\",       ALWAYS                 },",
          "188:   { \"CROSS\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "189:   { \"CURRENT\",          \"TK_CURRENT\",      WINDOWFUNC             },",
          "190:   { \"CURRENT_DATE\",     \"TK_CTIME_KW\",     ALWAYS                 },",
          "191:   { \"CURRENT_TIME\",     \"TK_CTIME_KW\",     ALWAYS                 },",
          "192:   { \"CURRENT_TIMESTAMP\",\"TK_CTIME_KW\",     ALWAYS                 },",
          "193:   { \"DATABASE\",         \"TK_DATABASE\",     ATTACH                 },",
          "194:   { \"DEFAULT\",          \"TK_DEFAULT\",      ALWAYS                 },",
          "195:   { \"DEFERRED\",         \"TK_DEFERRED\",     ALWAYS                 },",
          "196:   { \"DEFERRABLE\",       \"TK_DEFERRABLE\",   FKEY                   },",
          "197:   { \"DELETE\",           \"TK_DELETE\",       ALWAYS                 },",
          "198:   { \"DESC\",             \"TK_DESC\",         ALWAYS                 },",
          "199:   { \"DETACH\",           \"TK_DETACH\",       ATTACH                 },",
          "200:   { \"DISTINCT\",         \"TK_DISTINCT\",     ALWAYS                 },",
          "201:   { \"DO\",               \"TK_DO\",           UPSERT                 },",
          "202:   { \"DROP\",             \"TK_DROP\",         ALWAYS                 },",
          "203:   { \"END\",              \"TK_END\",          ALWAYS                 },",
          "204:   { \"EACH\",             \"TK_EACH\",         TRIGGER                },",
          "205:   { \"ELSE\",             \"TK_ELSE\",         ALWAYS                 },",
          "206:   { \"ESCAPE\",           \"TK_ESCAPE\",       ALWAYS                 },",
          "207:   { \"EXCEPT\",           \"TK_EXCEPT\",       COMPOUND               },",
          "208:   { \"EXCLUSIVE\",        \"TK_EXCLUSIVE\",    ALWAYS                 },",
          "209:   { \"EXCLUDE\",          \"TK_EXCLUDE\",      WINDOWFUNC             },",
          "210:   { \"EXISTS\",           \"TK_EXISTS\",       ALWAYS                 },",
          "211:   { \"EXPLAIN\",          \"TK_EXPLAIN\",      EXPLAIN                },",
          "212:   { \"FAIL\",             \"TK_FAIL\",         CONFLICT|TRIGGER       },",
          "213:   { \"FILTER\",           \"TK_FILTER\",       WINDOWFUNC             },",
          "214:   { \"FIRST\",            \"TK_FIRST\",        ALWAYS                 },",
          "215:   { \"FOLLOWING\",        \"TK_FOLLOWING\",    WINDOWFUNC             },",
          "216:   { \"FOR\",              \"TK_FOR\",          TRIGGER                },",
          "217:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY                   },",
          "218:   { \"FROM\",             \"TK_FROM\",         ALWAYS                 },",
          "219:   { \"FULL\",             \"TK_JOIN_KW\",      ALWAYS                 },",
          "220:   { \"GENERATED\",        \"TK_GENERATED\",    ALWAYS                 },",
          "221:   { \"GLOB\",             \"TK_LIKE_KW\",      ALWAYS                 },",
          "222:   { \"GROUP\",            \"TK_GROUP\",        ALWAYS                 },",
          "223:   { \"GROUPS\",           \"TK_GROUPS\",       WINDOWFUNC             },",
          "224:   { \"HAVING\",           \"TK_HAVING\",       ALWAYS                 },",
          "225:   { \"IF\",               \"TK_IF\",           ALWAYS                 },",
          "226:   { \"IGNORE\",           \"TK_IGNORE\",       CONFLICT|TRIGGER       },",
          "227:   { \"IMMEDIATE\",        \"TK_IMMEDIATE\",    ALWAYS                 },",
          "228:   { \"IN\",               \"TK_IN\",           ALWAYS                 },",
          "229:   { \"INDEX\",            \"TK_INDEX\",        ALWAYS                 },",
          "230:   { \"INDEXED\",          \"TK_INDEXED\",      ALWAYS                 },",
          "231:   { \"INITIALLY\",        \"TK_INITIALLY\",    FKEY                   },",
          "232:   { \"INNER\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "233:   { \"INSERT\",           \"TK_INSERT\",       ALWAYS                 },",
          "234:   { \"INSTEAD\",          \"TK_INSTEAD\",      TRIGGER                },",
          "235:   { \"INTERSECT\",        \"TK_INTERSECT\",    COMPOUND               },",
          "236:   { \"INTO\",             \"TK_INTO\",         ALWAYS                 },",
          "237:   { \"IS\",               \"TK_IS\",           ALWAYS                 },",
          "238:   { \"ISNULL\",           \"TK_ISNULL\",       ALWAYS                 },",
          "239:   { \"JOIN\",             \"TK_JOIN\",         ALWAYS                 },",
          "240:   { \"KEY\",              \"TK_KEY\",          ALWAYS                 },",
          "241:   { \"LAST\",             \"TK_LAST\",         ALWAYS                 },",
          "242:   { \"LEFT\",             \"TK_JOIN_KW\",      ALWAYS                 },",
          "243:   { \"LIKE\",             \"TK_LIKE_KW\",      ALWAYS                 },",
          "244:   { \"LIMIT\",            \"TK_LIMIT\",        ALWAYS                 },",
          "245:   { \"MATCH\",            \"TK_MATCH\",        ALWAYS                 },",
          "246:   { \"NATURAL\",          \"TK_JOIN_KW\",      ALWAYS                 },",
          "247:   { \"NO\",               \"TK_NO\",           FKEY|WINDOWFUNC        },",
          "248:   { \"NOT\",              \"TK_NOT\",          ALWAYS                 },",
          "249:   { \"NOTHING\",          \"TK_NOTHING\",      UPSERT                 },",
          "250:   { \"NOTNULL\",          \"TK_NOTNULL\",      ALWAYS                 },",
          "251:   { \"NULL\",             \"TK_NULL\",         ALWAYS                 },",
          "252:   { \"NULLS\",            \"TK_NULLS\",        ALWAYS                 },",
          "253:   { \"OF\",               \"TK_OF\",           ALWAYS                 },",
          "254:   { \"OFFSET\",           \"TK_OFFSET\",       ALWAYS                 },",
          "255:   { \"ON\",               \"TK_ON\",           ALWAYS                 },",
          "256:   { \"OR\",               \"TK_OR\",           ALWAYS                 },",
          "257:   { \"ORDER\",            \"TK_ORDER\",        ALWAYS                 },",
          "258:   { \"OTHERS\",           \"TK_OTHERS\",       WINDOWFUNC             },",
          "259:   { \"OUTER\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "260:   { \"OVER\",             \"TK_OVER\",         WINDOWFUNC             },",
          "261:   { \"PARTITION\",        \"TK_PARTITION\",    WINDOWFUNC             },",
          "262:   { \"PLAN\",             \"TK_PLAN\",         EXPLAIN                },",
          "263:   { \"PRAGMA\",           \"TK_PRAGMA\",       PRAGMA                 },",
          "264:   { \"PRECEDING\",        \"TK_PRECEDING\",    WINDOWFUNC             },",
          "265:   { \"PRIMARY\",          \"TK_PRIMARY\",      ALWAYS                 },",
          "266:   { \"QUERY\",            \"TK_QUERY\",        EXPLAIN                },",
          "267:   { \"RAISE\",            \"TK_RAISE\",        TRIGGER                },",
          "268:   { \"RANGE\",            \"TK_RANGE\",        WINDOWFUNC             },",
          "269:   { \"RECURSIVE\",        \"TK_RECURSIVE\",    CTE                    },",
          "270:   { \"REFERENCES\",       \"TK_REFERENCES\",   FKEY                   },",
          "271:   { \"REGEXP\",           \"TK_LIKE_KW\",      ALWAYS                 },",
          "272:   { \"REINDEX\",          \"TK_REINDEX\",      REINDEX                },",
          "273:   { \"RELEASE\",          \"TK_RELEASE\",      ALWAYS                 },",
          "274:   { \"RENAME\",           \"TK_RENAME\",       ALTER                  },",
          "275:   { \"REPLACE\",          \"TK_REPLACE\",      CONFLICT               },",
          "276:   { \"RESTRICT\",         \"TK_RESTRICT\",     FKEY                   },",
          "277:   { \"RIGHT\",            \"TK_JOIN_KW\",      ALWAYS                 },",
          "278:   { \"ROLLBACK\",         \"TK_ROLLBACK\",     ALWAYS                 },",
          "279:   { \"ROW\",              \"TK_ROW\",          TRIGGER                },",
          "280:   { \"ROWS\",             \"TK_ROWS\",         ALWAYS                 },",
          "281:   { \"SAVEPOINT\",        \"TK_SAVEPOINT\",    ALWAYS                 },",
          "282:   { \"SELECT\",           \"TK_SELECT\",       ALWAYS                 },",
          "283:   { \"SET\",              \"TK_SET\",          ALWAYS                 },",
          "284:   { \"TABLE\",            \"TK_TABLE\",        ALWAYS                 },",
          "285:   { \"TEMP\",             \"TK_TEMP\",         ALWAYS                 },",
          "286:   { \"TEMPORARY\",        \"TK_TEMP\",         ALWAYS                 },",
          "287:   { \"THEN\",             \"TK_THEN\",         ALWAYS                 },",
          "288:   { \"TIES\",             \"TK_TIES\",         WINDOWFUNC             },",
          "289:   { \"TO\",               \"TK_TO\",           ALWAYS                 },",
          "290:   { \"TRANSACTION\",      \"TK_TRANSACTION\",  ALWAYS                 },",
          "291:   { \"TRIGGER\",          \"TK_TRIGGER\",      TRIGGER                },",
          "292:   { \"UNBOUNDED\",        \"TK_UNBOUNDED\",    WINDOWFUNC             },",
          "293:   { \"UNION\",            \"TK_UNION\",        COMPOUND               },",
          "294:   { \"UNIQUE\",           \"TK_UNIQUE\",       ALWAYS                 },",
          "295:   { \"UPDATE\",           \"TK_UPDATE\",       ALWAYS                 },",
          "296:   { \"USING\",            \"TK_USING\",        ALWAYS                 },",
          "297:   { \"VACUUM\",           \"TK_VACUUM\",       VACUUM                 },",
          "298:   { \"VALUES\",           \"TK_VALUES\",       ALWAYS                 },",
          "299:   { \"VIEW\",             \"TK_VIEW\",         VIEW                   },",
          "300:   { \"VIRTUAL\",          \"TK_VIRTUAL\",      VTAB                   },",
          "301:   { \"WHEN\",             \"TK_WHEN\",         ALWAYS                 },",
          "302:   { \"WHERE\",            \"TK_WHERE\",        ALWAYS                 },",
          "303:   { \"WINDOW\",           \"TK_WINDOW\",       WINDOWFUNC             },",
          "304:   { \"WITH\",             \"TK_WITH\",         CTE                    },",
          "305:   { \"WITHOUT\",          \"TK_WITHOUT\",      ALWAYS                 },",
          "",
          "[Added Lines]",
          "162:   { \"ABORT\",            \"TK_ABORT\",        CONFLICT|TRIGGER, 0      },",
          "163:   { \"ACTION\",           \"TK_ACTION\",       FKEY,             0      },",
          "164:   { \"ADD\",              \"TK_ADD\",          ALTER,            1      },",
          "165:   { \"AFTER\",            \"TK_AFTER\",        TRIGGER,          0      },",
          "166:   { \"ALL\",              \"TK_ALL\",          ALWAYS,           0      },",
          "167:   { \"ALTER\",            \"TK_ALTER\",        ALTER,            0      },",
          "168:   { \"ALWAYS\",           \"TK_ALWAYS\",       ALWAYS,           0      },",
          "169:   { \"ANALYZE\",          \"TK_ANALYZE\",      ANALYZE,          0      },",
          "170:   { \"AND\",              \"TK_AND\",          ALWAYS,           10     },",
          "171:   { \"AS\",               \"TK_AS\",           ALWAYS,           10     },",
          "172:   { \"ASC\",              \"TK_ASC\",          ALWAYS,           0      },",
          "173:   { \"ATTACH\",           \"TK_ATTACH\",       ATTACH,           1      },",
          "174:   { \"AUTOINCREMENT\",    \"TK_AUTOINCR\",     AUTOINCR,         0      },",
          "175:   { \"BEFORE\",           \"TK_BEFORE\",       TRIGGER,          0      },",
          "176:   { \"BEGIN\",            \"TK_BEGIN\",        ALWAYS,           1      },",
          "177:   { \"BETWEEN\",          \"TK_BETWEEN\",      ALWAYS,           5      },",
          "178:   { \"BY\",               \"TK_BY\",           ALWAYS,           10     },",
          "179:   { \"CASCADE\",          \"TK_CASCADE\",      FKEY,             1      },",
          "180:   { \"CASE\",             \"TK_CASE\",         ALWAYS,           5      },",
          "181:   { \"CAST\",             \"TK_CAST\",         CAST,             5      },",
          "182:   { \"CHECK\",            \"TK_CHECK\",        ALWAYS,           1      },",
          "183:   { \"COLLATE\",          \"TK_COLLATE\",      ALWAYS,           1      },",
          "184:   { \"COLUMN\",           \"TK_COLUMNKW\",     ALTER,            1      },",
          "185:   { \"COMMIT\",           \"TK_COMMIT\",       ALWAYS,           1      },",
          "186:   { \"CONFLICT\",         \"TK_CONFLICT\",     CONFLICT,         0      },",
          "187:   { \"CONSTRAINT\",       \"TK_CONSTRAINT\",   ALWAYS,           1      },",
          "188:   { \"CREATE\",           \"TK_CREATE\",       ALWAYS,           2      },",
          "189:   { \"CROSS\",            \"TK_JOIN_KW\",      ALWAYS,           3      },",
          "190:   { \"CURRENT\",          \"TK_CURRENT\",      WINDOWFUNC,       1      },",
          "191:   { \"CURRENT_DATE\",     \"TK_CTIME_KW\",     ALWAYS,           1      },",
          "192:   { \"CURRENT_TIME\",     \"TK_CTIME_KW\",     ALWAYS,           1      },",
          "193:   { \"CURRENT_TIMESTAMP\",\"TK_CTIME_KW\",     ALWAYS,           1      },",
          "194:   { \"DATABASE\",         \"TK_DATABASE\",     ATTACH,           0      },",
          "195:   { \"DEFAULT\",          \"TK_DEFAULT\",      ALWAYS,           1      },",
          "196:   { \"DEFERRED\",         \"TK_DEFERRED\",     ALWAYS,           1      },",
          "197:   { \"DEFERRABLE\",       \"TK_DEFERRABLE\",   FKEY,             1      },",
          "198:   { \"DELETE\",           \"TK_DELETE\",       ALWAYS,           10     },",
          "199:   { \"DESC\",             \"TK_DESC\",         ALWAYS,           3      },",
          "200:   { \"DETACH\",           \"TK_DETACH\",       ATTACH,           0      },",
          "201:   { \"DISTINCT\",         \"TK_DISTINCT\",     ALWAYS,           5      },",
          "202:   { \"DO\",               \"TK_DO\",           UPSERT,           2      },",
          "203:   { \"DROP\",             \"TK_DROP\",         ALWAYS,           1      },",
          "204:   { \"END\",              \"TK_END\",          ALWAYS,           1      },",
          "205:   { \"EACH\",             \"TK_EACH\",         TRIGGER,          1      },",
          "206:   { \"ELSE\",             \"TK_ELSE\",         ALWAYS,           2      },",
          "207:   { \"ESCAPE\",           \"TK_ESCAPE\",       ALWAYS,           4      },",
          "208:   { \"EXCEPT\",           \"TK_EXCEPT\",       COMPOUND,         4      },",
          "209:   { \"EXCLUSIVE\",        \"TK_EXCLUSIVE\",    ALWAYS,           1      },",
          "210:   { \"EXCLUDE\",          \"TK_EXCLUDE\",      WINDOWFUNC,       1      },",
          "211:   { \"EXISTS\",           \"TK_EXISTS\",       ALWAYS,           4      },",
          "212:   { \"EXPLAIN\",          \"TK_EXPLAIN\",      EXPLAIN,          1      },",
          "213:   { \"FAIL\",             \"TK_FAIL\",         CONFLICT|TRIGGER, 1      },",
          "214:   { \"FILTER\",           \"TK_FILTER\",       WINDOWFUNC,       4      },",
          "215:   { \"FIRST\",            \"TK_FIRST\",        ALWAYS,           4      },",
          "216:   { \"FOLLOWING\",        \"TK_FOLLOWING\",    WINDOWFUNC,       4      },",
          "217:   { \"FOR\",              \"TK_FOR\",          TRIGGER,          2      },",
          "218:   { \"FOREIGN\",          \"TK_FOREIGN\",      FKEY,             1      },",
          "219:   { \"FROM\",             \"TK_FROM\",         ALWAYS,           10     },",
          "220:   { \"FULL\",             \"TK_JOIN_KW\",      ALWAYS,           3      },",
          "221:   { \"GENERATED\",        \"TK_GENERATED\",    ALWAYS,           1      },",
          "222:   { \"GLOB\",             \"TK_LIKE_KW\",      ALWAYS,           3      },",
          "223:   { \"GROUP\",            \"TK_GROUP\",        ALWAYS,           5      },",
          "224:   { \"GROUPS\",           \"TK_GROUPS\",       WINDOWFUNC,       2      },",
          "225:   { \"HAVING\",           \"TK_HAVING\",       ALWAYS,           5      },",
          "226:   { \"IF\",               \"TK_IF\",           ALWAYS,           2      },",
          "227:   { \"IGNORE\",           \"TK_IGNORE\",       CONFLICT|TRIGGER, 1      },",
          "228:   { \"IMMEDIATE\",        \"TK_IMMEDIATE\",    ALWAYS,           1      },",
          "229:   { \"IN\",               \"TK_IN\",           ALWAYS,           10     },",
          "230:   { \"INDEX\",            \"TK_INDEX\",        ALWAYS,           1      },",
          "231:   { \"INDEXED\",          \"TK_INDEXED\",      ALWAYS,           0      },",
          "232:   { \"INITIALLY\",        \"TK_INITIALLY\",    FKEY,             1      },",
          "233:   { \"INNER\",            \"TK_JOIN_KW\",      ALWAYS,           1      },",
          "234:   { \"INSERT\",           \"TK_INSERT\",       ALWAYS,           10     },",
          "235:   { \"INSTEAD\",          \"TK_INSTEAD\",      TRIGGER,          1      },",
          "236:   { \"INTERSECT\",        \"TK_INTERSECT\",    COMPOUND,         5      },",
          "237:   { \"INTO\",             \"TK_INTO\",         ALWAYS,           10     },",
          "238:   { \"IS\",               \"TK_IS\",           ALWAYS,           5      },",
          "239:   { \"ISNULL\",           \"TK_ISNULL\",       ALWAYS,           5      },",
          "240:   { \"JOIN\",             \"TK_JOIN\",         ALWAYS,           5      },",
          "241:   { \"KEY\",              \"TK_KEY\",          ALWAYS,           1      },",
          "242:   { \"LAST\",             \"TK_LAST\",         ALWAYS,           4      },",
          "243:   { \"LEFT\",             \"TK_JOIN_KW\",      ALWAYS,           5      },",
          "244:   { \"LIKE\",             \"TK_LIKE_KW\",      ALWAYS,           5      },",
          "245:   { \"LIMIT\",            \"TK_LIMIT\",        ALWAYS,           3      },",
          "246:   { \"MATCH\",            \"TK_MATCH\",        ALWAYS,           2      },",
          "247:   { \"NATURAL\",          \"TK_JOIN_KW\",      ALWAYS,           3      },",
          "248:   { \"NO\",               \"TK_NO\",           FKEY|WINDOWFUNC,  2      },",
          "249:   { \"NOT\",              \"TK_NOT\",          ALWAYS,           10     },",
          "250:   { \"NOTHING\",          \"TK_NOTHING\",      UPSERT,           1      },",
          "251:   { \"NOTNULL\",          \"TK_NOTNULL\",      ALWAYS,           3      },",
          "252:   { \"NULL\",             \"TK_NULL\",         ALWAYS,           10     },",
          "253:   { \"NULLS\",            \"TK_NULLS\",        ALWAYS,           3      },",
          "254:   { \"OF\",               \"TK_OF\",           ALWAYS,           3      },",
          "255:   { \"OFFSET\",           \"TK_OFFSET\",       ALWAYS,           1      },",
          "256:   { \"ON\",               \"TK_ON\",           ALWAYS,           1      },",
          "257:   { \"OR\",               \"TK_OR\",           ALWAYS,           9      },",
          "258:   { \"ORDER\",            \"TK_ORDER\",        ALWAYS,           10     },",
          "259:   { \"OTHERS\",           \"TK_OTHERS\",       WINDOWFUNC,       3      },",
          "260:   { \"OUTER\",            \"TK_JOIN_KW\",      ALWAYS,           5      },",
          "261:   { \"OVER\",             \"TK_OVER\",         WINDOWFUNC,       3      },",
          "262:   { \"PARTITION\",        \"TK_PARTITION\",    WINDOWFUNC,       3      },",
          "263:   { \"PLAN\",             \"TK_PLAN\",         EXPLAIN,          0      },",
          "264:   { \"PRAGMA\",           \"TK_PRAGMA\",       PRAGMA,           0      },",
          "265:   { \"PRECEDING\",        \"TK_PRECEDING\",    WINDOWFUNC,       3      },",
          "266:   { \"PRIMARY\",          \"TK_PRIMARY\",      ALWAYS,           1      },",
          "267:   { \"QUERY\",            \"TK_QUERY\",        EXPLAIN,          0      },",
          "268:   { \"RAISE\",            \"TK_RAISE\",        TRIGGER,          1      },",
          "269:   { \"RANGE\",            \"TK_RANGE\",        WINDOWFUNC,       3      },",
          "270:   { \"RECURSIVE\",        \"TK_RECURSIVE\",    CTE,              3      },",
          "271:   { \"REFERENCES\",       \"TK_REFERENCES\",   FKEY,             1      },",
          "272:   { \"REGEXP\",           \"TK_LIKE_KW\",      ALWAYS,           3      },",
          "273:   { \"REINDEX\",          \"TK_REINDEX\",      REINDEX,          1      },",
          "274:   { \"RELEASE\",          \"TK_RELEASE\",      ALWAYS,           1      },",
          "275:   { \"RENAME\",           \"TK_RENAME\",       ALTER,            1      },",
          "276:   { \"REPLACE\",          \"TK_REPLACE\",      CONFLICT,         10     },",
          "277:   { \"RESTRICT\",         \"TK_RESTRICT\",     FKEY,             1      },",
          "278:   { \"RIGHT\",            \"TK_JOIN_KW\",      ALWAYS,           0      },",
          "279:   { \"ROLLBACK\",         \"TK_ROLLBACK\",     ALWAYS,           1      },",
          "280:   { \"ROW\",              \"TK_ROW\",          TRIGGER,          1      },",
          "281:   { \"ROWS\",             \"TK_ROWS\",         ALWAYS,           1      },",
          "282:   { \"SAVEPOINT\",        \"TK_SAVEPOINT\",    ALWAYS,           1      },",
          "283:   { \"SELECT\",           \"TK_SELECT\",       ALWAYS,           10     },",
          "284:   { \"SET\",              \"TK_SET\",          ALWAYS,           10     },",
          "285:   { \"TABLE\",            \"TK_TABLE\",        ALWAYS,           1      },",
          "286:   { \"TEMP\",             \"TK_TEMP\",         ALWAYS,           1      },",
          "287:   { \"TEMPORARY\",        \"TK_TEMP\",         ALWAYS,           1      },",
          "288:   { \"THEN\",             \"TK_THEN\",         ALWAYS,           3      },",
          "289:   { \"TIES\",             \"TK_TIES\",         WINDOWFUNC,       3      },",
          "290:   { \"TO\",               \"TK_TO\",           ALWAYS,           3      },",
          "291:   { \"TRANSACTION\",      \"TK_TRANSACTION\",  ALWAYS,           1      },",
          "292:   { \"TRIGGER\",          \"TK_TRIGGER\",      TRIGGER,          1      },",
          "293:   { \"UNBOUNDED\",        \"TK_UNBOUNDED\",    WINDOWFUNC,       3      },",
          "294:   { \"UNION\",            \"TK_UNION\",        COMPOUND,         3      },",
          "295:   { \"UNIQUE\",           \"TK_UNIQUE\",       ALWAYS,           1      },",
          "296:   { \"UPDATE\",           \"TK_UPDATE\",       ALWAYS,           10     },",
          "297:   { \"USING\",            \"TK_USING\",        ALWAYS,           8      },",
          "298:   { \"VACUUM\",           \"TK_VACUUM\",       VACUUM,           1      },",
          "299:   { \"VALUES\",           \"TK_VALUES\",       ALWAYS,           10     },",
          "300:   { \"VIEW\",             \"TK_VIEW\",         VIEW,             1      },",
          "301:   { \"VIRTUAL\",          \"TK_VIRTUAL\",      VTAB,             1      },",
          "302:   { \"WHEN\",             \"TK_WHEN\",         ALWAYS,           1      },",
          "303:   { \"WHERE\",            \"TK_WHERE\",        ALWAYS,           10     },",
          "304:   { \"WINDOW\",           \"TK_WINDOW\",       WINDOWFUNC,       3      },",
          "305:   { \"WITH\",             \"TK_WITH\",         CTE,              4      },",
          "306:   { \"WITHOUT\",          \"TK_WITHOUT\",      ALWAYS,           1      },",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "357:   return &aKeywordTable[i];",
          "358: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "365: static void reorder(int *pFrom){",
          "366:   int i = *pFrom - 1;",
          "367:   int j = aKeywordTable[i].iNext;",
          "368:   if( j==0 ) return;",
          "369:   j--;",
          "370:   if( aKeywordTable[i].priority >= aKeywordTable[j].priority ) return;",
          "371:   aKeywordTable[i].iNext = aKeywordTable[j].iNext;",
          "372:   aKeywordTable[j].iNext = i+1;",
          "374:   reorder(&aKeywordTable[i].iNext);",
          "375: }",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "491:     h = aKeywordTable[i].hash % bestSize;",
          "492:     aKeywordTable[i].iNext = aKWHash[h];",
          "493:     aKWHash[h] = i+1;",
          "494:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "511:     reorder(&aKWHash[h]);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "605:     }",
          "606:   }",
          "607:   printf(\"%s};\\n\", j==0 ? \"\" : \"\\n\");",
          "608:   printf(\"/* Check to see if z[0..n-1] is a keyword. If it is, write the\\n\");",
          "609:   printf(\"** parser symbol code for that keyword into *pType.  Always\\n\");",
          "610:   printf(\"** return the integer n (the length of the token). */\\n\");",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "626:   printf(\"/* Hash table decoded:\\n\");",
          "627:   for(i=0; i<bestSize; i++){",
          "628:     j = aKWHash[i];",
          "629:     printf(\"** %3d:\", i);",
          "630:     while( j ){",
          "631:       printf(\" %s\", aKeywordTable[j-1].zOrigName);",
          "632:       j = aKeywordTable[j-1].iNext;",
          "633:     }",
          "634:     printf(\"\\n\");",
          "635:   }",
          "636:   printf(\"*/\\n\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "97afa309d7bf31ec6856a74c13d41f118c780809",
      "candidate_info": {
        "commit_hash": "97afa309d7bf31ec6856a74c13d41f118c780809",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/97afa309d7bf31ec6856a74c13d41f118c780809",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/whereexpr.c",
          "test/like3.test"
        ],
        "message": "Fix another pattern for which the LIKE optimization does not work for a non-TEXT affinity.  Case found by Manuel Rigger.\n\nFossilOrigin-Name: 740201107ae802c12b678e388ea524db01ad0eb70601c78490ad63eae0fe6cf1",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/whereexpr.c||src/whereexpr.c",
          "test/like3.test||test/like3.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: ef0015fde4c87e992ffd3d7dea8586951bdd65ff98d30d436b126b85b1cc9c74",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/whereexpr.c||src/whereexpr.c": [
          "File: src/whereexpr.c -> src/whereexpr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "278:         if( sqlite3Isdigit(zNew[0])",
          "279:          || zNew[0]=='-'",
          "280:          || zNew[0]=='+'",
          "282:         ){",
          "283:           if( pLeft->op!=TK_COLUMN",
          "284:            || sqlite3ExprAffinity(pLeft)!=SQLITE_AFF_TEXT",
          "",
          "[Removed Lines]",
          "281:          || (zNew[0]+1=='0' && iTo==1)",
          "",
          "[Added Lines]",
          "281:          || (iTo>0 && zNew[iTo-1]=='0'-1)",
          "",
          "---------------"
        ],
        "test/like3.test||test/like3.test": [
          "File: test/like3.test -> test/like3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "179: }",
          "181: # 2019-05-01",
          "183: #",
          "184: do_execsql_test like3-5.300 {",
          "185:   CREATE TABLE t5c (c0 REAL);",
          "",
          "[Removed Lines]",
          "182: # another case of the above reported on the mailing list by Manual Rigger.",
          "",
          "[Added Lines]",
          "182: # another case of the above reported on the mailing list by Manuel Rigger.",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "188:   SELECT * FROM t5c WHERE (c0 LIKE '+/');",
          "189: } {+/}",
          "191: # 2019-02-27",
          "192: # Verify that the LIKE optimization works with an ESCAPE clause when",
          "193: # using PRAGMA case_sensitive_like=ON.",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "191: # 2019-05-08",
          "192: # Yet another case for the above from Manuel Rigger.",
          "193: #",
          "194: do_execsql_test like3-5.400 {",
          "195:   DROP TABLE IF EXISTS t0;",
          "196:   CREATE TABLE t0(c0 INT UNIQUE COLLATE NOCASE);",
          "197:   INSERT INTO t0(c0) VALUES ('./');",
          "198:   SELECT * FROM t0 WHERE t0.c0 LIKE './';",
          "199: } {./}",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "9105fd51893062a8503c8850e5d88ad49de28495",
      "candidate_info": {
        "commit_hash": "9105fd51893062a8503c8850e5d88ad49de28495",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/9105fd51893062a8503c8850e5d88ad49de28495",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/build.c",
          "src/expr.c",
          "src/insert.c",
          "src/sqliteInt.h",
          "src/trigger.c",
          "test/nulls1.test"
        ],
        "message": "Prevent NULLS FIRST/LAST from being used in CREATE INDEX and other statements.\n\nFossilOrigin-Name: bb9767a287097a615aeb4abdba689b10e1a1c36c016c8e55905b508075e62c86",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/build.c||src/build.c",
          "src/expr.c||src/expr.c",
          "src/insert.c||src/insert.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "test/nulls1.test||test/nulls1.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: f892066425671a8a0ac923e3ad4744677f6434a66f97b91afa8141f11f179975",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3153:   return p;",
          "3154: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3161: int sqlite3HasExplicitNulls(Parse *pParse, ExprList *pList){",
          "3162:   if( pList ){",
          "3163:     int i;",
          "3164:     for(i=0; i<pList->nExpr; i++){",
          "3165:       if( pList->a[i].bNulls ){",
          "3166:         u8 sf = pList->a[i].sortFlags;",
          "3167:         sqlite3ErrorMsg(pParse, \"unsupported use of NULLS %s\",",
          "3168:             (sf==0 || sf==3) ? \"FIRST\" : \"LAST\"",
          "3169:         );",
          "3170:         return 1;",
          "3171:       }",
          "3172:     }",
          "3173:   }",
          "3174:   return 0;",
          "3175: }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3204:   if( SQLITE_OK!=sqlite3ReadSchema(pParse) ){",
          "3205:     goto exit_create_index;",
          "3206:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3228:   if( sqlite3HasExplicitNulls(pParse, pList) ){",
          "3229:     goto exit_create_index;",
          "3230:   }",
          "",
          "---------------"
        ],
        "src/expr.c||src/expr.c": [
          "File: src/expr.c -> src/expr.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1655: void sqlite3ExprListSetSortOrder(ExprList *p, int iSortOrder, int eNulls){",
          "1656:   if( p==0 ) return;",
          "1657:   assert( p->nExpr>0 );",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1656:   struct ExprList_item *pItem;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1666:        || eNulls==SQLITE_SO_DESC",
          "1667:   );",
          "1673:   }",
          "1674: }",
          "",
          "[Removed Lines]",
          "1669:   if( iSortOrder==SQLITE_SO_UNDEFINED ) iSortOrder = SQLITE_SO_ASC;",
          "1670:   p->a[p->nExpr-1].sortFlags = (u8)iSortOrder;",
          "1671:   if( eNulls!=SQLITE_SO_UNDEFINED && iSortOrder!=eNulls ){",
          "1672:     p->a[p->nExpr-1].sortFlags |= KEYINFO_ORDER_BIGNULL;",
          "",
          "[Added Lines]",
          "1670:   pItem = &p->a[p->nExpr-1];",
          "1671:   assert( pItem->bNulls==0 );",
          "1672:   if( iSortOrder==SQLITE_SO_UNDEFINED ){",
          "1673:     iSortOrder = SQLITE_SO_ASC;",
          "1674:   }",
          "1675:   pItem->sortFlags = (u8)iSortOrder;",
          "1677:   if( eNulls!=SQLITE_SO_UNDEFINED ){",
          "1678:     pItem->bNulls = 1;",
          "1679:     if( iSortOrder!=eNulls ){",
          "1680:       pItem->sortFlags |= KEYINFO_ORDER_BIGNULL;",
          "1681:     }",
          "",
          "---------------"
        ],
        "src/insert.c||src/insert.c": [
          "File: src/insert.c -> src/insert.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "833:               pTab->zName);",
          "834:       goto insert_cleanup;",
          "835:     }",
          "836:     pTabList->a[0].iCursor = iDataCur;",
          "837:     pUpsert->pUpsertSrc = pTabList;",
          "838:     pUpsert->regData = regData;",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "836:     if( sqlite3HasExplicitNulls(pParse, pUpsert->pUpsertTarget) ){",
          "837:       goto insert_cleanup;",
          "838:     }",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4366: KeyInfo *sqlite3KeyInfoRef(KeyInfo*);",
          "4367: KeyInfo *sqlite3KeyInfoOfIndex(Parse*, Index*);",
          "4368: KeyInfo *sqlite3KeyInfoFromExprList(Parse*, ExprList*, int, int);",
          "4370: #ifdef SQLITE_DEBUG",
          "4371: int sqlite3KeyInfoIsWriteable(KeyInfo*);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4370: int sqlite3HasExplicitNulls(Parse*, ExprList*);",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "463:     pTriggerStep->pIdList = pColumn;",
          "464:     pTriggerStep->pUpsert = pUpsert;",
          "465:     pTriggerStep->orconf = orconf;",
          "466:   }else{",
          "467:     testcase( pColumn );",
          "468:     sqlite3IdListDelete(db, pColumn);",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "466:     if( pUpsert ){",
          "467:       sqlite3HasExplicitNulls(pParse, pUpsert->pUpsertTarget);",
          "468:     }",
          "",
          "---------------"
        ],
        "test/nulls1.test||test/nulls1.test": [
          "File: test/nulls1.test -> test/nulls1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "83:   1 1 1",
          "84: }",
          "87: finish_test",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "86: #-------------------------------------------------------------------------",
          "87: reset_db",
          "88: do_execsql_test 3.0 {",
          "89:   CREATE TABLE t1(a, b, c, d, UNIQUE (b));",
          "90: }",
          "91: foreach {tn sql err}  {",
          "92:   1 { CREATE INDEX i1 ON t1(a ASC NULLS LAST) }           LAST",
          "93:   2 { CREATE INDEX i1 ON t1(a ASC NULLS FIRST) }          FIRST",
          "94:   3 { CREATE INDEX i1 ON t1(a, b ASC NULLS LAST) }        LAST",
          "95:   4 { CREATE INDEX i1 ON t1(a, b ASC NULLS FIRST) }       FIRST",
          "96:   5 { CREATE INDEX i1 ON t1(a DESC NULLS LAST) }          LAST",
          "97:   6 { CREATE INDEX i1 ON t1(a DESC NULLS FIRST) }         FIRST",
          "98:   7 { CREATE INDEX i1 ON t1(a, b DESC NULLS LAST) }       LAST",
          "99:   8 { CREATE INDEX i1 ON t1(a, b DESC NULLS FIRST) }      FIRST",
          "100:   9  { CREATE TABLE t2(a, b, PRIMARY KEY(a DESC, b NULLS FIRST)) } FIRST",
          "101:   10 { CREATE TABLE t2(a, b, UNIQUE(a DESC NULLS FIRST, b)) }      FIRST",
          "102:   11 { INSERT INTO t1 VALUES(1, 2, 3, 4)",
          "103:           ON CONFLICT (b DESC NULLS LAST) DO UPDATE SET a = a+1 } LAST",
          "104:   12 {",
          "105:     CREATE TRIGGER tr1 AFTER INSERT ON t1 BEGIN",
          "106:       INSERT INTO t1 VALUES(1, 2, 3, 4)",
          "107:       ON CONFLICT (b DESC NULLS FIRST) DO UPDATE SET a = a+1;",
          "108:     END",
          "109:   } FIRST",
          "110: } {",
          "111:   do_catchsql_test 3.1.$tn $sql \"1 {unsupported use of NULLS $err}\"",
          "112: }",
          "114: do_execsql_test 3.2 {",
          "115:   CREATE TABLE first(nulls, last);",
          "116:   INSERT INTO first(last, nulls) VALUES(100,200), (300,400), (200,300);",
          "117:   SELECT * FROM first ORDER BY nulls;",
          "118: } {",
          "119:   200 100",
          "120:   300 200",
          "121:   400 300",
          "122: }",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "c5a93d4c85ef5b7c4219ec251d60a37306b625a6",
      "candidate_info": {
        "commit_hash": "c5a93d4c85ef5b7c4219ec251d60a37306b625a6",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/c5a93d4c85ef5b7c4219ec251d60a37306b625a6",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/alter.c",
          "src/build.c",
          "src/prepare.c",
          "src/sqliteInt.h",
          "src/trigger.c",
          "src/vdbe.c",
          "test/corruptL.test",
          "test/corruptM.test",
          "test/dbfuzz001.test"
        ],
        "message": "Validate the type, name, and tbl_name fields of the sqlite_master table when loading the schema, unless writable_schema is engaged.\n\nFossilOrigin-Name: 724f4df9ccc2b683f7091a3f7a8c20ee210f44d7a610cd1b4c49da1c274add08",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/alter.c||src/alter.c",
          "src/build.c||src/build.c",
          "src/prepare.c||src/prepare.c",
          "src/sqliteInt.h||src/sqliteInt.h",
          "src/trigger.c||src/trigger.c",
          "src/vdbe.c||src/vdbe.c",
          "test/corruptL.test||test/corruptL.test",
          "test/corruptM.test||test/corruptM.test",
          "test/dbfuzz001.test||test/dbfuzz001.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: da01ba4fa47c6508b31533ccd769e637af04bd37f51463372fbc6c848d892a4d",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/alter.c||src/alter.c": [
          "File: src/alter.c -> src/alter.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "136:   if( SQLITE_OK!=isAlterableTable(pParse, pTab) ){",
          "137:     goto exit_rename_table;",
          "138:   }",
          "141:   }",
          "143: #ifndef SQLITE_OMIT_VIEW",
          "",
          "[Removed Lines]",
          "139:   if( SQLITE_OK!=sqlite3CheckObjectName(pParse, zName) ){ goto",
          "140:     exit_rename_table;",
          "",
          "[Added Lines]",
          "139:   if( SQLITE_OK!=sqlite3CheckObjectName(pParse,zName,\"table\",zName) ){",
          "140:     goto exit_rename_table;",
          "",
          "---------------"
        ],
        "src/build.c||src/build.c": [
          "File: src/build.c -> src/build.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "839:   }",
          "840:   return SQLITE_OK;",
          "841: }",
          "",
          "[Removed Lines]",
          "833: int sqlite3CheckObjectName(Parse *pParse, const char *zName){",
          "834:   if( !pParse->db->init.busy && pParse->nested==0",
          "835:           && sqlite3WritableSchema(pParse->db)==0",
          "836:           && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7) ){",
          "837:     sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\", zName);",
          "838:     return SQLITE_ERROR;",
          "",
          "[Added Lines]",
          "837: int sqlite3CheckObjectName(",
          "842: ){",
          "843:   sqlite3 *db = pParse->db;",
          "844:   if( sqlite3WritableSchema(db) || db->init.imposterTable ){",
          "846:     return SQLITE_OK;",
          "847:   }",
          "848:   if( db->init.busy ){",
          "849:     if( sqlite3_stricmp(zType, db->init.azInit[0])",
          "850:      || sqlite3_stricmp(zName, db->init.azInit[1])",
          "851:      || sqlite3_stricmp(zTblName, db->init.azInit[2])",
          "852:     ){",
          "854:       return SQLITE_ERROR;",
          "855:     }",
          "856:   }else{",
          "857:     if( pParse->nested==0",
          "858:      && 0==sqlite3StrNICmp(zName, \"sqlite_\", 7)",
          "859:     ){",
          "860:       sqlite3ErrorMsg(pParse, \"object name reserved for internal use: %s\",",
          "861:                       zName);",
          "862:       return SQLITE_ERROR;",
          "863:     }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "916:   }",
          "917:   pParse->sNameToken = *pName;",
          "918:   if( zName==0 ) return;",
          "920:     goto begin_table_error;",
          "921:   }",
          "922:   if( db->init.iDb==1 ) isTemp = 1;",
          "",
          "[Removed Lines]",
          "919:   if( SQLITE_OK!=sqlite3CheckObjectName(pParse, zName) ){",
          "",
          "[Added Lines]",
          "944:   if( sqlite3CheckObjectName(pParse, zName, isView?\"view\":\"table\", zName) ){",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3275:     zName = sqlite3NameFromToken(db, pName);",
          "3276:     if( zName==0 ) goto exit_create_index;",
          "3277:     assert( pName->z!=0 );",
          "3279:       goto exit_create_index;",
          "3280:     }",
          "3281:     if( !IN_RENAME_OBJECT ){",
          "",
          "[Removed Lines]",
          "3278:     if( SQLITE_OK!=sqlite3CheckObjectName(pParse, zName) ){",
          "",
          "[Added Lines]",
          "3303:     if( SQLITE_OK!=sqlite3CheckObjectName(pParse, zName,\"index\",pTab->zName) ){",
          "",
          "---------------"
        ],
        "src/prepare.c||src/prepare.c": [
          "File: src/prepare.c -> src/prepare.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "74:   sqlite3 *db = pData->db;",
          "75:   int iDb = pData->iDb;",
          "78:   UNUSED_PARAMETER2(NotUsed, argc);",
          "79:   assert( sqlite3_mutex_held(db->mutex) );",
          "80:   DbClearProperty(db, iDb, DB_Empty);",
          "81:   pData->nInitRow++;",
          "82:   if( db->mallocFailed ){",
          "84:     return 1;",
          "85:   }",
          "87:   assert( iDb>=0 && iDb<db->nDb );",
          "",
          "[Removed Lines]",
          "77:   assert( argc==3 );",
          "83:     corruptSchema(pData, argv[0], 0);",
          "89:   if( argv[1]==0 ){",
          "90:     corruptSchema(pData, argv[0], 0);",
          "91:   }else if( sqlite3_strnicmp(argv[2],\"create \",7)==0 ){",
          "",
          "[Added Lines]",
          "79:   assert( argc==5 );",
          "85:     corruptSchema(pData, argv[1], 0);",
          "91:   if( argv[3]==0 ){",
          "92:     corruptSchema(pData, argv[1], 0);",
          "93:   }else if( sqlite3_strnicmp(argv[4],\"create \",7)==0 ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "102:     assert( db->init.busy );",
          "103:     db->init.iDb = iDb;",
          "105:     db->init.orphanTrigger = 0;",
          "107:     rc = db->errCode;",
          "108:     assert( (rc&0xFF)==(rcp&0xFF) );",
          "109:     db->init.iDb = saved_iDb;",
          "",
          "[Removed Lines]",
          "104:     db->init.newTnum = sqlite3Atoi(argv[1]);",
          "106:     TESTONLY(rcp = ) sqlite3_prepare(db, argv[2], -1, &pStmt, 0);",
          "",
          "[Added Lines]",
          "106:     db->init.newTnum = sqlite3Atoi(argv[3]);",
          "108:     db->init.azInit = argv;",
          "109:     TESTONLY(rcp = ) sqlite3_prepare(db, argv[4], -1, &pStmt, 0);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "116:         if( rc==SQLITE_NOMEM ){",
          "117:           sqlite3OomFault(db);",
          "118:         }else if( rc!=SQLITE_INTERRUPT && (rc&0xFF)!=SQLITE_LOCKED ){",
          "120:         }",
          "121:       }",
          "122:     }",
          "123:     sqlite3_finalize(pStmt);",
          "126:   }else{",
          "",
          "[Removed Lines]",
          "119:           corruptSchema(pData, argv[0], sqlite3_errmsg(db));",
          "124:   }else if( argv[0]==0 || (argv[2]!=0 && argv[2][0]!=0) ){",
          "125:     corruptSchema(pData, argv[0], 0);",
          "",
          "[Added Lines]",
          "122:           corruptSchema(pData, argv[1], sqlite3_errmsg(db));",
          "127:   }else if( argv[1]==0 || (argv[4]!=0 && argv[4][0]!=0) ){",
          "128:     corruptSchema(pData, argv[1], 0);",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "133:     Index *pIndex;",
          "135:     if( pIndex==0",
          "137:      || pIndex->tnum<2",
          "138:      || sqlite3IndexHasDuplicateRootPage(pIndex)",
          "139:     ){",
          "141:     }",
          "142:   }",
          "143:   return 0;",
          "",
          "[Removed Lines]",
          "134:     pIndex = sqlite3FindIndex(db, argv[0], db->aDb[iDb].zDbSName);",
          "136:      || sqlite3GetInt32(argv[1],&pIndex->tnum)==0",
          "140:       corruptSchema(pData, argv[0], pIndex?\"invalid rootpage\":\"orphan index\");",
          "",
          "[Added Lines]",
          "137:     pIndex = sqlite3FindIndex(db, argv[1], db->aDb[iDb].zDbSName);",
          "139:      || sqlite3GetInt32(argv[3],&pIndex->tnum)==0",
          "143:       corruptSchema(pData, argv[1], pIndex?\"invalid rootpage\":\"orphan index\");",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "158:   int size;",
          "159: #endif",
          "160:   Db *pDb;",
          "162:   int meta[5];",
          "163:   InitData initData;",
          "164:   const char *zMasterName;",
          "",
          "[Removed Lines]",
          "161:   char const *azArg[4];",
          "",
          "[Added Lines]",
          "164:   char const *azArg[6];",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "183:                             \"rootpage int,sql text)\";",
          "185:   initData.db = db;",
          "186:   initData.iDb = iDb;",
          "187:   initData.rc = SQLITE_OK;",
          "188:   initData.pzErrMsg = pzErrMsg;",
          "189:   initData.mInitFlags = mFlags;",
          "190:   initData.nInitRow = 0;",
          "192:   if( initData.rc ){",
          "193:     rc = initData.rc;",
          "194:     goto error_out;",
          "",
          "[Removed Lines]",
          "180:   azArg[0] = zMasterName = SCHEMA_TABLE(iDb);",
          "181:   azArg[1] = \"1\";",
          "182:   azArg[2] = \"CREATE TABLE x(type text,name text,tbl_name text,\"",
          "184:   azArg[3] = 0;",
          "191:   sqlite3InitCallback(&initData, 3, (char **)azArg, 0);",
          "",
          "[Added Lines]",
          "183:   azArg[0] = \"table\";",
          "184:   azArg[1] = zMasterName = SCHEMA_TABLE(iDb);",
          "185:   azArg[2] = azArg[1];",
          "186:   azArg[3] = \"1\";",
          "187:   azArg[4] = \"CREATE TABLE x(type text,name text,tbl_name text,\"",
          "189:   azArg[5] = 0;",
          "196:   sqlite3InitCallback(&initData, 5, (char **)azArg, 0);",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "314:   {",
          "315:     char *zSql;",
          "316:     zSql = sqlite3MPrintf(db,",
          "318:         db->aDb[iDb].zDbSName, zMasterName);",
          "319: #ifndef SQLITE_OMIT_AUTHORIZATION",
          "320:     {",
          "",
          "[Removed Lines]",
          "317:         \"SELECT name, rootpage, sql FROM \\\"%w\\\".%s ORDER BY rowid\",",
          "",
          "[Added Lines]",
          "322:         \"SELECT*FROM\\\"%w\\\".%s ORDER BY rowid\",",
          "",
          "---------------"
        ],
        "src/sqliteInt.h||src/sqliteInt.h": [
          "File: src/sqliteInt.h -> src/sqliteInt.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "4268: Expr *sqlite3ExprSkipCollate(Expr*);",
          "4269: int sqlite3CheckCollSeq(Parse *, CollSeq *);",
          "4270: int sqlite3WritableSchema(sqlite3*);",
          "4272: void sqlite3VdbeSetChanges(sqlite3 *, int);",
          "4273: int sqlite3AddInt64(i64*,i64);",
          "4274: int sqlite3SubInt64(i64*,i64);",
          "",
          "[Removed Lines]",
          "4271: int sqlite3CheckObjectName(Parse *, const char *);",
          "",
          "[Added Lines]",
          "4272: int sqlite3CheckObjectName(Parse*, const char*,const char*,const char*);",
          "",
          "---------------"
        ],
        "src/trigger.c||src/trigger.c": [
          "File: src/trigger.c -> src/trigger.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "179:   zName = sqlite3NameFromToken(db, pName);",
          "181:     goto trigger_cleanup;",
          "182:   }",
          "183:   assert( sqlite3SchemaMutexHeld(db, iDb, 0) );",
          "",
          "[Removed Lines]",
          "180:   if( !zName || SQLITE_OK!=sqlite3CheckObjectName(pParse, zName) ){",
          "",
          "[Added Lines]",
          "180:   if( zName==0 ){",
          "181:     assert( db->mallocFailed );",
          "182:     goto trigger_cleanup;",
          "183:   }",
          "184:   if( sqlite3CheckObjectName(pParse, zName, \"trigger\", pTab->zName) ){",
          "",
          "---------------"
        ],
        "src/vdbe.c||src/vdbe.c": [
          "File: src/vdbe.c -> src/vdbe.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "5963:     initData.pzErrMsg = &p->zErrMsg;",
          "5964:     initData.mInitFlags = 0;",
          "5965:     zSql = sqlite3MPrintf(db,",
          "5967:        db->aDb[iDb].zDbSName, zMaster, pOp->p4.z);",
          "5968:     if( zSql==0 ){",
          "5969:       rc = SQLITE_NOMEM_BKPT;",
          "",
          "[Removed Lines]",
          "5966:        \"SELECT name, rootpage, sql FROM '%q'.%s WHERE %s ORDER BY rowid\",",
          "",
          "[Added Lines]",
          "5966:        \"SELECT*FROM\\\"%w\\\".%s WHERE %s ORDER BY rowid\",",
          "",
          "---------------"
        ],
        "test/corruptL.test||test/corruptL.test": [
          "File: test/corruptL.test -> test/corruptL.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "228: }]} {}",
          "230: do_execsql_test 2.1 {",
          "231:   INSERT INTO t1(b) VALUES(X'a0fee3669f9fddefc5cba913e4225d4b6ce2b04f26b87fad3ee6f9b7d90a1ea62a169bf41e5d32707a6ca5c3d05e4bde05c9d89eaaa8c50e74333d2e9fcd7dfe95528a3a016aac1102d825c5cd70cf99d8a88e0ea7f798d4334386518b7ad359beb168b93aba059a2a3bd93112d65b44c12b9904ea786b204d80531cdf0504bf9b203dbe927061974caf7b9f30cbc3397b61f802e732012a6663d41c3607d6f1c0dbcfd489adac05ca500c0b04439d894cd93a840159225ef73b627e178b9f84b3ffe66cf22a963a8368813ff7961fc47f573211ccec95e0220dcbb3bf429f4a50ba54d7a53784ac51bfef346e6ac8ae0d0e7c3175946e62ba2b');",
          "232: }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "231:   PRAGMA writable_schema=ON; -- bypass improved sqlite_master consistency checking",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "377: }]} {}",
          "379: do_catchsql_test 4.1 {",
          "380:   INSERT INTO t3 SELECT * FROM t2;",
          "381: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "381:   PRAGMA writable_schema=ON; -- bypass improved sqlite_master consistency checking",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "605: |   3872: 75 65 6e 63 65 04 43 52 45 41 54 45 20 54 41 42   uence.CREATE TAB",
          "606: |   3888: 4c 45 20 73 71 6c 69 74 65 5f 73 65 71 75 65 6e   LE sqlite_sequen",
          "607: |   3904: 63 65 28 6e 61 6d 65 2c 73 65 71 29 81 04 01 07   ce(name,seq)....",
          "609: |   3936: 43 52 45 41 54 45 20 54 41 42 4c 45 20 74 31 28   CREATE TABLE t1(",
          "610: |   3952: 61 20 52 45 41 4c 20 4e 4f 54 20 4e 55 4c 4c 20   a REAL NOT NULL",
          "611: |   3968: 44 45 46 41 55 4c 54 28 32 35 2b 33 32 29 2c 62   DEFAULT(25+32),b",
          "",
          "[Removed Lines]",
          "608: |   3920: 17 11 11 01 81 73 74 61 c2 6c 65 74 31 74 31 02   .....sta.let1t1.",
          "",
          "[Added Lines]",
          "610: |   3920: 17 11 11 01 81 73 74 61 62 6c 65 74 31 74 31 02   .....stablet1t1.",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "837: do_catchsql_test 8.1 {",
          "838:   INSERT INTO t3 SELECT * FROM t2;",
          "839: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "840:   PRAGMA writable_schema=ON; -- bypass improved sqlite_master consistency checking",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "1004: }]} {}",
          "1006: do_catchsql_test 10.1 {",
          "1007:   SELECT * FROM t1 WHERE a<='2019-05-09' ORDER BY a DESC;",
          "1008: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1010:   PRAGMA writable_schema=ON; -- bypass improved sqlite_master consistency checking",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "1057: }]} {}",
          "1059: do_catchsql_test 11.1 {",
          "1060:   DELETE FROM t3 WHERE x IN (SELECT x FROM t4);",
          "1061: } {1 {database disk image is malformed}}",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1064:   PRAGMA writable_schema=ON; -- bypass improved sqlite_master consistency checking",
          "",
          "---------------"
        ],
        "test/corruptM.test||test/corruptM.test": [
          "File: test/corruptM.test -> test/corruptM.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019-08-12",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: #",
          "12: # Check to ensure that the type, name, and tbl_name fields of the",
          "13: # sqlite_master table are validated and errors are reported if they",
          "14: # are inconsistent with the sql.",
          "15: #",
          "17: set testdir [file dirname $argv0]",
          "18: source $testdir/tester.tcl",
          "19: set testprefix corruptM",
          "21: # These tests deal with corrupt database files",
          "22: #",
          "23: database_may_be_corrupt",
          "25: db close",
          "26: forcedelete test.db",
          "27: sqlite3 db test.db",
          "28: do_execsql_test corruptM-100 {",
          "29:   CREATE TABLE t1(a,b,c);",
          "30:   INSERT INTO t1 VALUES(111,222,333);",
          "31:   CREATE INDEX i1 ON t1(b);",
          "32:   CREATE VIEW v2 AS SELECT 15,22;",
          "33:   CREATE TRIGGER r1 AFTER INSERT ON t1 BEGIN SELECT 5; END;",
          "34:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "35: } {table t1 t1 | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "36: do_execsql_test corruptM-101 {",
          "37:   PRAGMA writable_schema=on;",
          "38:   UPDATE sqlite_master SET tbl_name=NULL WHERE name='t1';",
          "39:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "40: } {table t1 {} | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "41: sqlite3 db2 test.db",
          "42: do_test corruptM-102 {",
          "43:   catchsql {",
          "44:     PRAGMA quick_check;",
          "45:   } db2",
          "46: } {1 {malformed database schema (t1)}}",
          "47: db2 close",
          "49: do_execsql_test corruptM-110 {",
          "50:   UPDATE sqlite_master SET tbl_name='tx' WHERE name='t1';",
          "51:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "52: } {table t1 tx | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "53: sqlite3 db2 test.db",
          "54: do_test corruptM-111 {",
          "55:   catchsql {",
          "56:     PRAGMA quick_check;",
          "57:   } db2",
          "58: } {1 {malformed database schema (t1)}}",
          "59: db2 close",
          "60: do_execsql_test corruptM-112 {",
          "61:   UPDATE sqlite_master SET tbl_name='t1', type='tabl' WHERE name='t1';",
          "62:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "63: } {tabl t1 t1 | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "64: sqlite3 db2 test.db",
          "65: do_test corruptM-113 {",
          "66:   catchsql {",
          "67:     PRAGMA quick_check;",
          "68:   } db2",
          "69: } {1 {malformed database schema (t1)}}",
          "70: db2 close",
          "71: do_execsql_test corruptM-114 {",
          "72:   UPDATE sqlite_master SET tbl_name='t9',type='table',name='t9'WHERE name='t1';",
          "73:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "74: } {table t9 t9 | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "75: sqlite3 db2 test.db",
          "76: do_test corruptM-114 {",
          "77:   catchsql {",
          "78:     PRAGMA quick_check;",
          "79:   } db2",
          "80: } {1 {malformed database schema (t9)}}",
          "81: db2 close",
          "83: do_execsql_test corruptM-120 {",
          "84:   UPDATE sqlite_master SET name='t1',tbl_name='T1' WHERE name='t9';",
          "85:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "86: } {table t1 T1 | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "87: sqlite3 db2 test.db",
          "88: do_test corruptM-121 {",
          "89:   catchsql {",
          "90:     PRAGMA quick_check;",
          "91:     SELECT * FROM t1, v2;",
          "92:   } db2",
          "93: } {0 {ok 111 222 333 15 22}}",
          "94: db2 close",
          "96: do_execsql_test corruptM-130 {",
          "97:   UPDATE sqlite_master SET type='view' WHERE name='t1';",
          "98:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "99: } {view t1 T1 | index i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "100: sqlite3 db2 test.db",
          "101: do_test corruptM-131 {",
          "102:   catchsql {",
          "103:     PRAGMA quick_check;",
          "104:     SELECT * FROM t1, v2;",
          "105:   } db2",
          "106: } {1 {malformed database schema (t1)}}",
          "107: db2 close",
          "109: do_execsql_test corruptM-140 {",
          "110:   UPDATE sqlite_master SET type='table', tbl_name='t1' WHERE name='t1';",
          "111:   UPDATE sqlite_master SET tbl_name='tx' WHERE name='i1';",
          "112:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "113: } {table t1 t1 | index i1 tx | view v2 v2 | trigger r1 t1 |}",
          "114: sqlite3 db2 test.db",
          "115: do_test corruptM-141 {",
          "116:   catchsql {",
          "117:     PRAGMA quick_check;",
          "118:     SELECT * FROM t1, v2;",
          "119:   } db2",
          "120: } {1 {malformed database schema (i1)}}",
          "121: db2 close",
          "123: do_execsql_test corruptM-150 {",
          "124:   UPDATE sqlite_master SET type='table', tbl_name='t1' WHERE name='i1';",
          "125:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "126: } {table t1 t1 | table i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "127: sqlite3 db2 test.db",
          "128: do_test corruptM-151 {",
          "129:   catchsql {",
          "130:     PRAGMA quick_check;",
          "131:     SELECT * FROM t1, v2;",
          "132:   } db2",
          "133: } {1 {malformed database schema (i1)}}",
          "134: db2 close",
          "136: do_execsql_test corruptM-160 {",
          "137:   UPDATE sqlite_master SET type='view', tbl_name='t1' WHERE name='i1';",
          "138:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "139: } {table t1 t1 | view i1 t1 | view v2 v2 | trigger r1 t1 |}",
          "140: sqlite3 db2 test.db",
          "141: do_test corruptM-161 {",
          "142:   catchsql {",
          "143:     PRAGMA quick_check;",
          "144:     SELECT * FROM t1, v2;",
          "145:   } db2",
          "146: } {1 {malformed database schema (i1)}}",
          "147: db2 close",
          "149: do_execsql_test corruptM-170 {",
          "150:   UPDATE sqlite_master SET type='index', tbl_name='t1' WHERE name='i1';",
          "151:   UPDATE sqlite_master SET type='table', tbl_name='v2' WHERE name='v2';",
          "152:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "153: } {table t1 t1 | index i1 t1 | table v2 v2 | trigger r1 t1 |}",
          "154: sqlite3 db2 test.db",
          "155: do_test corruptM-171 {",
          "156:   catchsql {",
          "157:     PRAGMA quick_check;",
          "158:     SELECT * FROM t1, v2;",
          "159:   } db2",
          "160: } {1 {malformed database schema (v2)}}",
          "161: db2 close",
          "163: do_execsql_test corruptM-180 {",
          "164:   UPDATE sqlite_master SET type='view',name='v3',tbl_name='v3' WHERE name='v2';",
          "165:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "166: } {table t1 t1 | index i1 t1 | view v3 v3 | trigger r1 t1 |}",
          "167: sqlite3 db2 test.db",
          "168: do_test corruptM-181 {",
          "169:   catchsql {",
          "170:     PRAGMA quick_check;",
          "171:     SELECT * FROM t1, v2;",
          "172:   } db2",
          "173: } {1 {malformed database schema (v3)}}",
          "174: db2 close",
          "176: do_execsql_test corruptM-190 {",
          "177:   UPDATE sqlite_master SET type='view',name='v2',tbl_name='v2' WHERE name='v3';",
          "178:   UPDATE sqlite_master SET type='view' WHERE name='r1';",
          "179:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "180: } {table t1 t1 | index i1 t1 | view v2 v2 | view r1 t1 |}",
          "181: sqlite3 db2 test.db",
          "182: do_test corruptM-191 {",
          "183:   catchsql {",
          "184:     PRAGMA quick_check;",
          "185:     SELECT * FROM t1, v2;",
          "186:   } db2",
          "187: } {1 {malformed database schema (r1)}}",
          "188: db2 close",
          "189: do_execsql_test corruptM-192 {",
          "190:   UPDATE sqlite_master SET type='trigger',tbl_name='v2' WHERE name='r1';",
          "191:   SELECT type, name, tbl_name, '|' FROM sqlite_master;",
          "192: } {table t1 t1 | index i1 t1 | view v2 v2 | trigger r1 v2 |}",
          "193: sqlite3 db2 test.db",
          "194: do_test corruptM-193 {",
          "195:   catchsql {",
          "196:     PRAGMA quick_check;",
          "197:     SELECT * FROM t1, v2;",
          "198:   } db2",
          "199: } {1 {malformed database schema (r1)}}",
          "200: db2 close",
          "202: finish_test",
          "",
          "---------------"
        ],
        "test/dbfuzz001.test||test/dbfuzz001.test": [
          "File: test/dbfuzz001.test -> test/dbfuzz001.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "305: |    384: 32 28 63 2c 64 29 28 05 06 17 11 11 01 3d 74 61   2(c,d)(......=ta",
          "306: |    400: 62 6c 65 74 33 74 33 07 43 52 45 41 54 45 20 54   blet3t3.CREATE T",
          "307: |    416: 41 42 4c 45 20 74 33 28 63 2c 78 2c 65 2c 66 29   ABLE t3(c,x,e,f)",
          "309: |    448: 32 32 43 52 45 41 54 45 20 54 41 42 4c 45 20 74   22CREATE TABLE t",
          "310: |    464: 32 28 63 2c 64 2c 65 2c 66 29 24 01 06 17 11 11   2(c,d,e,f)$.....",
          "311: |    480: 01 35 74 61 62 6c 65 74 31 74 31 02 43 52 45 41   .5tablet1t1.CREA",
          "",
          "[Removed Lines]",
          "308: |    432: 28 02 06 17 11 11 01 3d 74 61 74 65 6c 03 62 74   (......=tatel.bt",
          "",
          "[Added Lines]",
          "308: |    432: 28 02 06 17 11 11 01 3d 74 61 62 6c 65 74 32 74   (......=tablet2t",
          "",
          "---------------"
        ]
      }
    }
  ]
}