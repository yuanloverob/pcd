{
  "cve_id": "CVE-2019-19925",
  "cve_desc": "zipfileUpdate in ext/misc/zipfile.c in SQLite 3.30.1 mishandles a NULL pathname during an update of a ZIP archive.",
  "repo": "sqlite/sqlite",
  "patch_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
  "patch_info": {
    "commit_hash": "54d501092d88c0cf89bec4279951f548fb0b8618",
    "repo": "sqlite/sqlite",
    "commit_url": "https://github.com/sqlite/sqlite/commit/54d501092d88c0cf89bec4279951f548fb0b8618",
    "files": [
      "ext/misc/zipfile.c",
      "manifest",
      "manifest.uuid",
      "test/zipfile.test"
    ],
    "message": "Fix the zipfile extension so that INSERT works even if the pathname of the file being inserted is a NULL.  Bug discovered by the Yongheng and Rui fuzzer.\n\nFossilOrigin-Name: a80f84b511231204658304226de3e075a55afc2e3f39ac063716f7a57f585c06",
    "before_after_code_files": [
      "ext/misc/zipfile.c||ext/misc/zipfile.c",
      "manifest.uuid||manifest.uuid",
      "test/zipfile.test||test/zipfile.test"
    ]
  },
  "patch_diff": {
    "ext/misc/zipfile.c||ext/misc/zipfile.c": [
      "File: ext/misc/zipfile.c -> ext/misc/zipfile.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "1620:     if( rc==SQLITE_OK ){",
      "1621:       zPath = (const char*)sqlite3_value_text(apVal[2]);",
      "1622:       nPath = (int)strlen(zPath);",
      "1623:       mTime = zipfileGetTime(apVal[4]);",
      "1624:     }",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "1622:       if( zPath==0 ) zPath = \"\";",
      "",
      "---------------"
    ],
    "manifest.uuid||manifest.uuid": [
      "File: manifest.uuid -> manifest.uuid",
      "--- Hunk 1 ---",
      "[Context before]",
      "[No context available]",
      "",
      "[Removed Lines]",
      "1: fccfb8a9ed3c1df9f23762bb8df6fdf36a21118899e3fae41f451169a5f2c08e",
      "",
      "[Added Lines]",
      "[None]",
      "",
      "---------------"
    ],
    "test/zipfile.test||test/zipfile.test": [
      "File: test/zipfile.test -> test/zipfile.test",
      "--- Hunk 1 ---",
      "[Context before]",
      "795:   } {. ./x1.txt ./x2.txt}",
      "796: }",
      "798: finish_test",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "798: # 2019-12-18 Yongheng and Rui fuzzer",
      "799: #",
      "800: do_execsql_test 13.10 {",
      "801:   DROP TABLE IF EXISTS t0;",
      "802:   DROP TABLE IF EXISTS t1;",
      "803:   CREATE TABLE t0(a,b,c,d,e,f,g);",
      "804:   REPLACE INTO t0(c,b,f) VALUES(10,10,10);",
      "805:   CREATE VIRTUAL TABLE t1 USING zipfile('h.zip');",
      "806:   REPLACE INTO t1 SELECT * FROM t0;",
      "807:   SELECT quote(name),quote(mode),quote(mtime),quote(sz),quote(rawdata),",
      "808:          quote(data),quote(method) FROM t1;",
      "809: } {'' 10 10 2 X'3130' X'3130' 0}",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "158931ab640fe6b0d3829d0321d04a4315e6e6cb",
      "candidate_info": {
        "commit_hash": "158931ab640fe6b0d3829d0321d04a4315e6e6cb",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/158931ab640fe6b0d3829d0321d04a4315e6e6cb",
        "files": [
          "manifest",
          "manifest.uuid",
          "test/badutf2.test",
          "test/journal3.test",
          "test/shell1.test",
          "test/wal2.test"
        ],
        "message": "Test case changes so that they work with both Tcl8.6 and Tcl8.7.\n\nFossilOrigin-Name: 7b771405a9adc3ec191156be4ebe7122f4c698d88d69ae2134c75acb8d8feebb",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "test/badutf2.test||test/badutf2.test",
          "test/journal3.test||test/journal3.test",
          "test/shell1.test||test/shell1.test",
          "test/wal2.test||test/wal2.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: dd248c186a157b5ed60bbdae669b31237b8354c1a7e6ed64d377904043bd57ee",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "test/badutf2.test||test/badutf2.test": [
          "File: test/badutf2.test -> test/badutf2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "98:     } $uval",
          "99:   }",
          "108:   ifcapable debug {",
          "109:     do_test badutf2-5.1.$i {",
          "",
          "[Removed Lines]",
          "101:   do_test badutf2-4.1.$i {",
          "102:     sqlite3_reset $S",
          "103:     sqlite3_bind_text $S 1 $xstr $len",
          "104:     sqlite3_step $S",
          "105:     utf8_to_ustr2 [ sqlite3_column_text $S 0 ]",
          "106:   } $ustr",
          "",
          "[Added Lines]",
          "101:   # Tcl 8.7 and later do automatic bad-utf8 correction for",
          "102:   # characters 0x80 thru 0x9f so test case 5 does not work here.",
          "103:   if {$i==5 && $tcl_version>=8.7} {",
          "104:      # no-op",
          "105:   } else {",
          "106:     do_test badutf2-4.1.$i {",
          "107:       sqlite3_reset $S",
          "108:       sqlite3_bind_text $S 1 $xstr $len",
          "109:       sqlite3_step $S",
          "110:       utf8_to_ustr2 [ sqlite3_column_text $S 0 ]",
          "111:     } $ustr",
          "112:   }",
          "",
          "---------------"
        ],
        "test/journal3.test||test/journal3.test": [
          "File: test/journal3.test -> test/journal3.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "38:   } {",
          "39:     db close",
          "40:     #set effective [format %.5o [expr $permissions & ~$umask]]",
          "41:     set effective $permissions",
          "42:     do_test journal3-1.2.$tn.1 {",
          "43:       catch { forcedelete test.db-journal }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "41:     if {$tcl_version>=8.7} {",
          "42:        regsub {^00} $permissions {0o} permissions",
          "43:     }",
          "",
          "---------------"
        ],
        "test/shell1.test||test/shell1.test": [
          "File: test/shell1.test -> test/shell1.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1022:     if {$i==0x0D || ($tcl_platform(platform)==\"windows\" && $i==0x1A)} {",
          "1023:       continue",
          "1024:     }",
          "1025:     if {$i>=0xE0 && $tcl_platform(os)==\"OpenBSD\"}  continue",
          "1026:     if {$i>=0xE0 && $i<=0xEF && $tcl_platform(os)==\"Linux\"}  continue",
          "1027:     set hex [format %02X $i]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1025:     # Tcl 8.7 maps 0x80 through 0x9f into valid UTF8.  So skip those tests.",
          "1026:     if {$i>=0x80 && $i<=0x9f} continue",
          "",
          "---------------"
        ],
        "test/wal2.test||test/wal2.test": [
          "File: test/wal2.test -> test/wal2.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "1085:     set effective [format %.5o [expr $permissions & ~$umask]]",
          "1086:     do_test wal2-12.2.$tn.1 {",
          "1087:       file attributes test.db -permissions $permissions",
          "1089:     } $permissions",
          "1090:     do_test wal2-12.2.$tn.2 {",
          "1091:       list [file exists test.db-wal] [file exists test.db-shm]",
          "",
          "[Removed Lines]",
          "1088:       file attributes test.db -permissions",
          "",
          "[Added Lines]",
          "1088:       string map {o 0} [file attributes test.db -permissions]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "1096:       list [file exists test.db-wal] [file exists test.db-shm]",
          "1097:     } {1 1}",
          "1098:     do_test wal2-12.2.$tn.4 {",
          "1100:     } [list $effective $effective]",
          "1101:     do_test wal2-12.2.$tn.5 {",
          "1102:       db close",
          "",
          "[Removed Lines]",
          "1099:       list [file attr test.db-wal -perm] [file attr test.db-shm -perm]",
          "",
          "[Added Lines]",
          "1099:       set x [list [file attr test.db-wal -perm] [file attr test.db-shm -perm]]",
          "1100:       string map {o 0} $x",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "1154:       set     L [file attr test.db -perm]",
          "1155:       lappend L [file attr test.db-wal -perm]",
          "1156:       lappend L [file attr test.db-shm -perm]",
          "1157:     } [list $db_perm $wal_perm $shm_perm]",
          "1159:     # If $can_open is true, then it should be possible to open a database",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1158:       string map {o 0} $L",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e9ad07c0a3967aeed1003181626c10e298aa504e",
      "candidate_info": {
        "commit_hash": "e9ad07c0a3967aeed1003181626c10e298aa504e",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e9ad07c0a3967aeed1003181626c10e298aa504e",
        "files": [
          "ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5interrupt.test",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Fix some problems with sqlite3_interrupt() handling in fts5.\n\nFossilOrigin-Name: c0eb839a3c23612b93002d2e1fbc41bf5db140775267989f85db52146144750b",
        "before_after_code_files": [
          "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c",
          "ext/fts5/test/fts5interrupt.test||ext/fts5/test/fts5interrupt.test",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/fts5/fts5_index.c||ext/fts5/fts5_index.c": [
          "File: ext/fts5/fts5_index.c -> ext/fts5/fts5_index.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3759: ){",
          "3760:   fts5WriteFlushBtree(p, pWriter);",
          "3763: }",
          "",
          "[Removed Lines]",
          "3761:   fts5BufferSet(&p->rc, &pWriter->btterm, nTerm, pTerm);",
          "3762:   pWriter->iBtPage = pWriter->writer.pgno;",
          "",
          "[Added Lines]",
          "3761:   if( p->rc==SQLITE_OK ){",
          "3762:     fts5BufferSet(&p->rc, &pWriter->btterm, nTerm, pTerm);",
          "3763:     pWriter->iBtPage = pWriter->writer.pgno;",
          "3764:   }",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "3920:   if( (pPage->buf.n + pPgidx->n + nTerm + 2)>=p->pConfig->pgsz ){",
          "3921:     if( pPage->buf.n>4 ){",
          "3922:       fts5WriteFlushLeaf(p, pWriter);",
          "3923:     }",
          "3924:     fts5BufferGrow(&p->rc, &pPage->buf, nTerm+FTS5_DATA_PADDING);",
          "3925:   }",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3925:       if( p->rc!=SQLITE_OK ) return;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "3955:         n = 1 + fts5PrefixCompress(nMin, pPage->term.p, pTerm);",
          "3956:       }",
          "3957:       fts5WriteBtreeTerm(p, pWriter, n, pTerm);",
          "3958:       pPage = &pWriter->writer;",
          "3959:     }",
          "3960:   }else{",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "3961:       if( p->rc!=SQLITE_OK ) return;",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "4521:       sqlite3Fts5HashScanEntry(pHash, &zTerm, &pDoclist, &nDoclist);",
          "4522:       fts5WriteAppendTerm(p, &writer, (int)strlen(zTerm), (const u8*)zTerm);",
          "4524:       assert( writer.bFirstRowidInPage==0 );",
          "4525:       if( pgsz>=(pBuf->n + pPgidx->n + nDoclist + 1) ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "4527:       if( p->rc!=SQLITE_OK ) break;",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "4601:       assert( pBuf->n<=pBuf->nSpace );",
          "4603:     }",
          "4604:     sqlite3Fts5HashClear(pHash);",
          "4605:     fts5WriteFinish(p, &writer, &pgnoLast);",
          "",
          "[Removed Lines]",
          "4602:       sqlite3Fts5HashScanNext(pHash);",
          "",
          "[Added Lines]",
          "4607:       if( p->rc==SQLITE_OK ) sqlite3Fts5HashScanNext(pHash);",
          "",
          "---------------"
        ],
        "ext/fts5/test/fts5interrupt.test||ext/fts5/test/fts5interrupt.test": [
          "File: ext/fts5/test/fts5interrupt.test -> ext/fts5/test/fts5interrupt.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 Jan 4",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #*************************************************************************",
          "11: # This file implements regression tests for SQLite library.  The",
          "12: # focus of this script is testing the FTS5 module.",
          "13: #",
          "15: source [file join [file dirname [info script]] fts5_common.tcl]",
          "16: set testprefix fts5interrupt",
          "18: # If SQLITE_ENABLE_FTS5 is not defined, omit this file.",
          "19: ifcapable !fts5 {",
          "20:   finish_test",
          "21:   return",
          "22: }",
          "24: do_execsql_test 1.0 {",
          "25:   CREATE VIRTUAL TABLE t1 USING fts5(a);",
          "26:   INSERT INTO t1(t1, rank) VALUES('pgsz', 40);",
          "27: }",
          "28: db_save_and_close",
          "30: proc progress_handler {args} {",
          "31:   incr ::progress_handler_delay -1",
          "32:   if {$::progress_handler_delay<=0} { return 1 }",
          "33:   return 0",
          "34: }",
          "36: foreach {tn sql} {",
          "37:   1 { INSERT INTO t1(rowid, a) VALUES(0, 'z z z z') }",
          "38:   2 { COMMIT }",
          "39: } {",
          "40:   set bDone 0",
          "41:   for {set i 1} {$bDone==0} {incr i} {",
          "42:     do_test 1.$tn.$i {",
          "43:       db_restore_and_reopen",
          "44:       execsql {",
          "45:         BEGIN;",
          "46:           INSERT INTO t1(rowid, a) VALUES(1, 'a b c d');",
          "47:           INSERT INTO t1(rowid, a) VALUES(2, 'd e f g');",
          "48:           INSERT INTO t1(rowid, a) VALUES(3, 'h i j k');",
          "49:           INSERT INTO t1(rowid, a) VALUES(4, 'l m n o');",
          "50:       }",
          "52:       set ::progress_handler_delay $i",
          "53:       db progress 1 progress_handler",
          "54:       set res [catchsql $sql]",
          "55:       db close",
          "56:       if {$res==\"0 {}\"} {",
          "57:         set bDone 1",
          "58:       } else {",
          "59:         if {$res!=\"1 interrupted\"} { error \"got: $res\" }",
          "60:       }",
          "61:       set {} {}",
          "62:     } {}",
          "63:   }",
          "64: }",
          "66: finish_test",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 36eaf5a5e51b20699328aae67c2bfd325f81bea342e2b167fddd859a50a26e28",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "31269a9f5ff767cb1b9e910b41124fa11aca32f2",
      "candidate_info": {
        "commit_hash": "31269a9f5ff767cb1b9e910b41124fa11aca32f2",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/31269a9f5ff767cb1b9e910b41124fa11aca32f2",
        "files": [
          "ext/misc/uuid.c",
          "manifest",
          "manifest.uuid"
        ],
        "message": "Add an experimental set of UUID processing functions as the uuid.c extension in ext/misc/uuid.c.\n\nFossilOrigin-Name: 1a6e009372cf9571e540812c8607e95a86740112a1091f03e3f632339eccb629",
        "before_after_code_files": [
          "ext/misc/uuid.c||ext/misc/uuid.c",
          "manifest.uuid||manifest.uuid"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/uuid.c||ext/misc/uuid.c": [
          "File: ext/misc/uuid.c -> ext/misc/uuid.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "61: #include \"sqlite3ext.h\"",
          "62: SQLITE_EXTENSION_INIT1",
          "63: #include <assert.h>",
          "64: #include <string.h>",
          "65: #include <ctype.h>",
          "67: #if !defined(SQLITE_ASCII) && !defined(SQLITE_EBCDIC)",
          "68: # define SQLITE_ASCII 1",
          "69: #endif",
          "76: static unsigned char sqlite3UuidHexToInt(int h){",
          "77:   assert( (h>='0' && h<='9') ||  (h>='a' && h<='f') ||  (h>='A' && h<='F') );",
          "78: #ifdef SQLITE_ASCII",
          "79:   h += 9*(1&(h>>6));",
          "80: #endif",
          "81: #ifdef SQLITE_EBCDIC",
          "82:   h += 9*(1&~(h>>4));",
          "83: #endif",
          "84:   return (unsigned char)(h & 0xf);",
          "85: }",
          "92: static void sqlite3UuidBlobToStr(",
          "95: ){",
          "96:   static const char zDigits[] = \"0123456789abcdef\";",
          "97:   int i, k;",
          "98:   unsigned char x;",
          "99:   k = 0;",
          "100:   for(i=0, k=0x550; i<16; i++, k=k>>1){",
          "101:     if( k&1 ){",
          "102:       zStr[0] = '-';",
          "103:       zStr++;",
          "104:     }",
          "105:     x = aBlob[i];",
          "106:     zStr[0] = zDigits[x>>4];",
          "107:     zStr[1] = zDigits[x&0xf];",
          "108:     zStr += 2;",
          "109:   }",
          "111: }",
          "118: static int sqlite3UuidStrToBlob(",
          "121: ){",
          "122:   int i;",
          "123:   if( zStr[0]=='{' ) zStr++;",
          "124:   for(i=0; i<16; i++){",
          "125:     if( zStr[0]=='-' ) zStr++;",
          "126:     if( isxdigit(zStr[0]) && isxdigit(zStr[1]) ){",
          "127:       aBlob[i] = (sqlite3UuidHexToInt(zStr[0])<<4)",
          "128:                       + sqlite3UuidHexToInt(zStr[1]);",
          "129:       zStr += 2;",
          "130:     }else{",
          "131:       return 1;",
          "132:     }",
          "133:   }",
          "134:   if( zStr[0]=='}' ) zStr++;",
          "135:   return zStr[0]!=0;",
          "136: }",
          "142: static const unsigned char *sqlite3UuidInputToBlob(",
          "145: ){",
          "146:   switch( sqlite3_value_type(pIn) ){",
          "147:     case SQLITE_TEXT: {",
          "148:       const unsigned char *z = sqlite3_value_text(pIn);",
          "149:       if( sqlite3UuidStrToBlob(z, pBuf) ) return 0;",
          "150:       return pBuf;",
          "151:     }",
          "152:     case SQLITE_BLOB: {",
          "153:       int n = sqlite3_value_bytes(pIn);",
          "154:       return n==16 ? sqlite3_value_blob(pIn) : 0;",
          "155:     }",
          "156:     default: {",
          "157:       return 0;",
          "158:     }",
          "159:   }",
          "160: }",
          "163: static void sqlite3UuidFunc(",
          "164:   sqlite3_context *context,",
          "165:   int argc,",
          "166:   sqlite3_value **argv",
          "167: ){",
          "168:   unsigned char aBlob[16];",
          "169:   unsigned char zStr[37];",
          "170:   (void)argc;",
          "171:   (void)argv;",
          "172:   sqlite3_randomness(16, aBlob);",
          "173:   aBlob[6] = (aBlob[6]&0x0f) + 0x40;",
          "174:   aBlob[8] = (aBlob[8]&0x3f) + 0x80;",
          "175:   sqlite3UuidBlobToStr(aBlob, zStr);",
          "176:   sqlite3_result_text(context, (char*)zStr, 36, SQLITE_TRANSIENT);",
          "177: }",
          "180: static void sqlite3UuidStrFunc(",
          "181:   sqlite3_context *context,",
          "182:   int argc,",
          "183:   sqlite3_value **argv",
          "184: ){",
          "185:   unsigned char aBlob[16];",
          "186:   unsigned char zStr[37];",
          "187:   const unsigned char *pBlob;",
          "188:   (void)argc;",
          "189:   pBlob = sqlite3UuidInputToBlob(argv[0], aBlob);",
          "190:   if( pBlob==0 ) return;",
          "191:   sqlite3UuidBlobToStr(pBlob, zStr);",
          "192:   sqlite3_result_text(context, (char*)zStr, 36, SQLITE_TRANSIENT);",
          "193: }",
          "196: static void sqlite3UuidBlobFunc(",
          "197:   sqlite3_context *context,",
          "198:   int argc,",
          "199:   sqlite3_value **argv",
          "200: ){",
          "201:   unsigned char aBlob[16];",
          "202:   const unsigned char *pBlob;",
          "203:   (void)argc;",
          "204:   pBlob = sqlite3UuidInputToBlob(argv[0], aBlob);",
          "205:   if( pBlob==0 ) return;",
          "206:   sqlite3_result_blob(context, pBlob, 16, SQLITE_TRANSIENT);",
          "207: }",
          "209: #ifdef _WIN32",
          "210: __declspec(dllexport)",
          "211: #endif",
          "212: int sqlite3_uuid_init(",
          "213:   sqlite3 *db,",
          "214:   char **pzErrMsg,",
          "215:   const sqlite3_api_routines *pApi",
          "216: ){",
          "217:   int rc = SQLITE_OK;",
          "218:   SQLITE_EXTENSION_INIT2(pApi);",
          "220:   rc = sqlite3_create_function(db, \"uuid\", 0, SQLITE_UTF8, 0,",
          "221:                                sqlite3UuidFunc, 0, 0);",
          "222:   if( rc==SQLITE_OK ){",
          "223:     rc = sqlite3_create_function(db, \"uuid_str\", 1, SQLITE_UTF8, 0,",
          "224:                                  sqlite3UuidStrFunc, 0, 0);",
          "225:   }",
          "226:   if( rc==SQLITE_OK ){",
          "227:     rc = sqlite3_create_function(db, \"uuid_blob\", 1, SQLITE_UTF8, 0,",
          "228:                                  sqlite3UuidBlobFunc, 0, 0);",
          "229:   }",
          "230:   return rc;",
          "231: }",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 978b2d20cf95d0b7143e3104ce1e9d5c85002867b554dc6b21deb528b730bbc7",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "e39f388eb1b66df91a59038abaa6566306f1cbb7",
      "candidate_info": {
        "commit_hash": "e39f388eb1b66df91a59038abaa6566306f1cbb7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/e39f388eb1b66df91a59038abaa6566306f1cbb7",
        "files": [
          "ext/misc/json1.c",
          "manifest",
          "manifest.uuid",
          "src/select.c"
        ],
        "message": "Fix harmless compiler warnings.\n\nFossilOrigin-Name: 8ea1dc727d391b15d0c4fa858ff68d5b8a63dde46408f24027dac8d28f044cbd",
        "before_after_code_files": [
          "ext/misc/json1.c||ext/misc/json1.c",
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "ext/misc/json1.c||ext/misc/json1.c": [
          "File: ext/misc/json1.c -> ext/misc/json1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "1868:   int argc,",
          "1869:   sqlite3_value **argv",
          "1870: ){",
          "1872:   int inStr = 0;",
          "1873:   int nNest = 0;",
          "1874:   char *z;",
          "",
          "[Removed Lines]",
          "1871:   int i;",
          "",
          "[Added Lines]",
          "1871:   unsigned int i;",
          "",
          "---------------"
        ],
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: 20f7951bb238ddc0b8932a55145df426b6fdf7b8631e069345902c853c90f191",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "6235:       if( sSort.pOrderBy && pGroupBy->nExpr==sSort.pOrderBy->nExpr ){",
          "6245:         }",
          "6246:         if( sqlite3ExprListCompare(pGroupBy, sSort.pOrderBy, -1)==0 ){",
          "6247:           orderByGrp = 1;",
          "",
          "[Removed Lines]",
          "6236:         int i;",
          "6242:         for(i=0; i<pGroupBy->nExpr; i++){",
          "6243:           u8 sortFlags = sSort.pOrderBy->a[i].sortFlags & KEYINFO_ORDER_DESC;",
          "6244:           pGroupBy->a[i].sortFlags = sortFlags;",
          "",
          "[Added Lines]",
          "6236:         int ii;",
          "6242:         for(ii=0; ii<pGroupBy->nExpr; ii++){",
          "6243:           u8 sortFlags = sSort.pOrderBy->a[ii].sortFlags & KEYINFO_ORDER_DESC;",
          "6244:           pGroupBy->a[ii].sortFlags = sortFlags;",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "fa5083491497d7c3bfade8a115007a1f88bc7cc7",
      "candidate_info": {
        "commit_hash": "fa5083491497d7c3bfade8a115007a1f88bc7cc7",
        "repo": "sqlite/sqlite",
        "commit_url": "https://github.com/sqlite/sqlite/commit/fa5083491497d7c3bfade8a115007a1f88bc7cc7",
        "files": [
          "manifest",
          "manifest.uuid",
          "src/select.c",
          "src/test1.c",
          "test/tkt-18458b1a.test"
        ],
        "message": "Ensure the columns of views and sub-queries maintain their implicit collation sequences when the \"push-down\" optimization is applied. Fix for [18458b1a].\n\nFossilOrigin-Name: 36997c4ade2ef3a274cd1ac52b44118fb3a05325adb650b7b338ecb43d060575",
        "before_after_code_files": [
          "manifest.uuid||manifest.uuid",
          "src/select.c||src/select.c",
          "src/test1.c||src/test1.c",
          "test/tkt-18458b1a.test||test/tkt-18458b1a.test"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "manifest.uuid||manifest.uuid"
          ],
          "candidate": [
            "manifest.uuid||manifest.uuid"
          ]
        }
      },
      "candidate_diff": {
        "manifest.uuid||manifest.uuid": [
          "File: manifest.uuid -> manifest.uuid",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "1: b9ec72203c19c2b95e648ac1dfad74eec98d4ff82581cdc10dc4221ba551728f",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/select.c||src/select.c": [
          "File: src/select.c -> src/select.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "3480:         sqlite3ExprDelete(db, pExpr);",
          "3481:         pExpr = pNew;",
          "3486:           if( pExpr->op!=TK_COLUMN && pExpr->op!=TK_COLLATE ){",
          "3487:             CollSeq *pColl = sqlite3ExprCollSeq(pSubst->pParse, pExpr);",
          "3488:             pExpr = sqlite3ExprAddCollateString(pSubst->pParse, pExpr,",
          "",
          "[Removed Lines]",
          "3485:         if( pSubst->bFlattener && pExpr ){",
          "",
          "[Added Lines]",
          "3484:         if( pExpr ){",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "4056:       x.iNewTable = iNewParent;",
          "4057:       x.isLeftJoin = isLeftJoin;",
          "4058:       x.pEList = pSub->pEList;",
          "4060:       substSelect(&x, pParent, 0);",
          "4061:     }",
          "",
          "[Removed Lines]",
          "4059:       x.bFlattener = 1;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "4382:       x.iNewTable = iCursor;",
          "4383:       x.isLeftJoin = 0;",
          "4384:       x.pEList = pSubq->pEList;",
          "4386:       pNew = substExpr(&x, pNew);",
          "4387:       if( pSubq->selFlags & SF_Aggregate ){",
          "4388:         pSubq->pHaving = sqlite3ExprAnd(pParse, pSubq->pHaving, pNew);",
          "",
          "[Removed Lines]",
          "4385:       x.bFlattener = 0;",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ],
        "src/test1.c||src/test1.c": [
          "File: src/test1.c -> src/test1.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "7200:     { \"omit-noop-join\",      SQLITE_OmitNoopJoin   },",
          "7201:     { \"stat4\",               SQLITE_Stat4          },",
          "7202:     { \"skip-scan\",           SQLITE_SkipScan       },",
          "7203:   };",
          "7205:   if( objc!=4 ){",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "7203:     { \"push-down\",           SQLITE_PushDown       },",
          "",
          "---------------"
        ],
        "test/tkt-18458b1a.test||test/tkt-18458b1a.test": [
          "File: test/tkt-18458b1a.test -> test/tkt-18458b1a.test",
          "--- Hunk 1 ---",
          "[Context before]",
          "[No context available]",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "1: # 2019 September 10",
          "2: #",
          "3: # The author disclaims copyright to this source code.  In place of",
          "4: # a legal notice, here is a blessing:",
          "5: #",
          "6: #    May you do good and not evil.",
          "7: #    May you find forgiveness for yourself and forgive others.",
          "8: #    May you share freely, never taking more than you give.",
          "9: #",
          "10: #***********************************************************************",
          "11: # This file implements regression tests for SQLite library. In particular,",
          "12: # that problems related to ticket [18458b1a] have been fixed.",
          "13: #",
          "15: set testdir [file dirname $argv0]",
          "16: source $testdir/tester.tcl",
          "17: set testprefix tkt-18458b1a",
          "19: foreach tn {1 2} {",
          "20:   reset_db",
          "21:   if {$tn==1} {",
          "22:     # Disable the flattener and push-down optimizations",
          "23:     optimization_control db query-flattener 0",
          "24:     optimization_control db push-down 0",
          "25:   } else {",
          "26:     # Enable them",
          "27:     optimization_control db query-flattener 1",
          "28:     optimization_control db push-down 1",
          "29:   }",
          "31:   db cache size 0",
          "33:   do_execsql_test $tn.1.1 {",
          "34:     CREATE TABLE t0(c0 COLLATE NOCASE);",
          "35:     INSERT INTO t0(c0) VALUES ('B');",
          "36:     CREATE VIEW v0(c0, c1) AS SELECT DISTINCT t0.c0, 'a' FROM t0;",
          "37:   }",
          "39:   do_execsql_test $tn.1.2 {",
          "40:     SELECT count(*) FROM v0 WHERE c1 >= c0;",
          "41:   } 1",
          "43:   do_execsql_test $tn.1.3 {",
          "44:     SELECT count(*) FROM v0 WHERE NOT NOT (c1 >= c0);",
          "45:   } 1",
          "47:   do_execsql_test $tn.1.4 {",
          "48:     SELECT count(*) FROM v0 WHERE ((c1 >= c0) OR 0+0);",
          "49:   } 1",
          "50: }",
          "52: finish_test",
          "",
          "---------------"
        ]
      }
    }
  ]
}