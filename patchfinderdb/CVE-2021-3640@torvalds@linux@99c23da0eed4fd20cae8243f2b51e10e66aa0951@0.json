{
  "cve_id": "CVE-2021-3640",
  "cve_desc": "A flaw use-after-free in function sco_sock_sendmsg() of the Linux kernel HCI subsystem was found in the way user calls ioct UFFDIO_REGISTER or other way triggers race condition of the call sco_conn_del() together with the call sco_sock_sendmsg() with the expected controllable faulting memory page. A privileged local user could use this flaw to crash the system or escalate their privileges on the system.",
  "repo": "torvalds/linux",
  "patch_hash": "99c23da0eed4fd20cae8243f2b51e10e66aa0951",
  "patch_info": {
    "commit_hash": "99c23da0eed4fd20cae8243f2b51e10e66aa0951",
    "repo": "torvalds/linux",
    "commit_url": "https://github.com/torvalds/linux/commit/99c23da0eed4fd20cae8243f2b51e10e66aa0951",
    "files": [
      "net/bluetooth/sco.c"
    ],
    "message": "Bluetooth: sco: Fix lock_sock() blockage by memcpy_from_msg()\n\nThe sco_send_frame() also takes lock_sock() during memcpy_from_msg()\ncall that may be endlessly blocked by a task with userfaultd\ntechnique, and this will result in a hung task watchdog trigger.\n\nJust like the similar fix for hci_sock_sendmsg() in commit\n92c685dc5de0 (\"Bluetooth: reorganize functions...\"), this patch moves\nthe  memcpy_from_msg() out of lock_sock() for addressing the hang.\n\nThis should be the last piece for fixing CVE-2021-3640 after a few\nalready queued fixes.\n\nSigned-off-by: Takashi Iwai <tiwai@suse.de>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>",
    "before_after_code_files": [
      "net/bluetooth/sco.c||net/bluetooth/sco.c"
    ]
  },
  "patch_diff": {
    "net/bluetooth/sco.c||net/bluetooth/sco.c": [
      "File: net/bluetooth/sco.c -> net/bluetooth/sco.c",
      "--- Hunk 1 ---",
      "[Context before]",
      "280:  return err;",
      "281: }",
      "284: {",
      "285:  struct sco_conn *conn = sco_pi(sk)->conn;",
      "286:  struct sk_buff *skb;",
      "",
      "[Removed Lines]",
      "283: static int sco_send_frame(struct sock *sk, struct msghdr *msg, int len)",
      "",
      "[Added Lines]",
      "283: static int sco_send_frame(struct sock *sk, void *buf, int len,",
      "284:      unsigned int msg_flags)",
      "",
      "---------------",
      "--- Hunk 2 ---",
      "[Context before]",
      "293:  BT_DBG(\"sk %p len %d\", sk, len);",
      "296:  if (!skb)",
      "297:   return err;",
      "304:  hci_send_sco(conn->hcon, skb);",
      "306:  return len;",
      "",
      "[Removed Lines]",
      "295:  skb = bt_skb_send_alloc(sk, len, msg->msg_flags & MSG_DONTWAIT, &err);",
      "299:  if (memcpy_from_msg(skb_put(skb, len), msg, len)) {",
      "300:   kfree_skb(skb);",
      "301:   return -EFAULT;",
      "302:  }",
      "",
      "[Added Lines]",
      "296:  skb = bt_skb_send_alloc(sk, len, msg_flags & MSG_DONTWAIT, &err);",
      "300:  memcpy(skb_put(skb, len), buf, len);",
      "",
      "---------------",
      "--- Hunk 3 ---",
      "[Context before]",
      "725:        size_t len)",
      "726: {",
      "727:  struct sock *sk = sock->sk;",
      "728:  int err;",
      "730:  BT_DBG(\"sock %p, sk %p\", sock, sk);",
      "",
      "[Removed Lines]",
      "[None]",
      "",
      "[Added Lines]",
      "725:  void *buf;",
      "",
      "---------------",
      "--- Hunk 4 ---",
      "[Context before]",
      "736:  if (msg->msg_flags & MSG_OOB)",
      "737:   return -EOPNOTSUPP;",
      "739:  lock_sock(sk);",
      "741:  if (sk->sk_state == BT_CONNECTED)",
      "743:  else",
      "744:   err = -ENOTCONN;",
      "746:  release_sock(sk);",
      "747:  return err;",
      "748: }",
      "",
      "[Removed Lines]",
      "742:   err = sco_send_frame(sk, msg, len);",
      "",
      "[Added Lines]",
      "737:  buf = kmalloc(len, GFP_KERNEL);",
      "738:  if (!buf)",
      "739:   return -ENOMEM;",
      "741:  if (memcpy_from_msg(buf, msg, len)) {",
      "742:   kfree(buf);",
      "743:   return -EFAULT;",
      "744:  }",
      "749:   err = sco_send_frame(sk, buf, len, msg->msg_flags);",
      "754:  kfree(buf);",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "266191aa8d14b84958aaeb5e96ee4e97839e3d87",
      "candidate_info": {
        "commit_hash": "266191aa8d14b84958aaeb5e96ee4e97839e3d87",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/266191aa8d14b84958aaeb5e96ee4e97839e3d87",
        "files": [
          "include/net/bluetooth/bluetooth.h",
          "net/bluetooth/rfcomm/sock.c",
          "net/bluetooth/sco.c"
        ],
        "message": "Bluetooth: Fix passing NULL to PTR_ERR\n\nPassing NULL to PTR_ERR will result in 0 (success), also since the likes of\nbt_skb_sendmsg does never return NULL it is safe to replace the instances of\nIS_ERR_OR_NULL with IS_ERR when checking its return.\n\nReported-by: Dan Carpenter <dan.carpenter@oracle.com>\nTested-by: Tedd Ho-Jeong An <tedd.an@intel.com>\nSigned-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>",
        "before_after_code_files": [
          "include/net/bluetooth/bluetooth.h||include/net/bluetooth/bluetooth.h",
          "net/bluetooth/rfcomm/sock.c||net/bluetooth/rfcomm/sock.c",
          "net/bluetooth/sco.c||net/bluetooth/sco.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/bluetooth/sco.c||net/bluetooth/sco.c"
          ],
          "candidate": [
            "net/bluetooth/sco.c||net/bluetooth/sco.c"
          ]
        }
      },
      "candidate_diff": {
        "include/net/bluetooth/bluetooth.h||include/net/bluetooth/bluetooth.h": [
          "File: include/net/bluetooth/bluetooth.h -> include/net/bluetooth/bluetooth.h",
          "--- Hunk 1 ---",
          "[Context before]",
          "496:   struct sk_buff *tmp;",
          "498:   tmp = bt_skb_sendmsg(sk, msg, len, mtu, headroom, tailroom);",
          "500:    kfree_skb(skb);",
          "501:    return tmp;",
          "502:   }",
          "",
          "[Removed Lines]",
          "499:   if (IS_ERR_OR_NULL(tmp)) {",
          "",
          "[Added Lines]",
          "499:   if (IS_ERR(tmp)) {",
          "",
          "---------------"
        ],
        "net/bluetooth/rfcomm/sock.c||net/bluetooth/rfcomm/sock.c": [
          "File: net/bluetooth/rfcomm/sock.c -> net/bluetooth/rfcomm/sock.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "584:  skb = bt_skb_sendmmsg(sk, msg, len, d->mtu, RFCOMM_SKB_HEAD_RESERVE,",
          "585:          RFCOMM_SKB_TAIL_RESERVE);",
          "587:   return PTR_ERR(skb);",
          "589:  sent = rfcomm_dlc_send(d, skb);",
          "",
          "[Removed Lines]",
          "586:  if (IS_ERR_OR_NULL(skb))",
          "",
          "[Added Lines]",
          "586:  if (IS_ERR(skb))",
          "",
          "---------------"
        ],
        "net/bluetooth/sco.c||net/bluetooth/sco.c": [
          "File: net/bluetooth/sco.c -> net/bluetooth/sco.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "733:   return -EOPNOTSUPP;",
          "735:  skb = bt_skb_sendmsg(sk, msg, len, len, 0, 0);",
          "737:   return PTR_ERR(skb);",
          "739:  lock_sock(sk);",
          "",
          "[Removed Lines]",
          "736:  if (IS_ERR_OR_NULL(skb))",
          "",
          "[Added Lines]",
          "736:  if (IS_ERR(skb))",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0771cbb3b97d3c1d68eecd7f00055f599954c34e",
      "candidate_info": {
        "commit_hash": "0771cbb3b97d3c1d68eecd7f00055f599954c34e",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/0771cbb3b97d3c1d68eecd7f00055f599954c34e",
        "files": [
          "net/bluetooth/sco.c"
        ],
        "message": "Bluetooth: SCO: Replace use of memcpy_from_msg with bt_skb_sendmsg\n\nThis makes use of bt_skb_sendmsg instead of allocating a different\nbuffer to be used with memcpy_from_msg which cause one extra copy.\n\nSigned-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>",
        "before_after_code_files": [
          "net/bluetooth/sco.c||net/bluetooth/sco.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/bluetooth/sco.c||net/bluetooth/sco.c"
          ],
          "candidate": [
            "net/bluetooth/sco.c||net/bluetooth/sco.c"
          ]
        }
      },
      "candidate_diff": {
        "net/bluetooth/sco.c||net/bluetooth/sco.c": [
          "File: net/bluetooth/sco.c -> net/bluetooth/sco.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "281:  return err;",
          "282: }",
          "286: {",
          "287:  struct sco_conn *conn = sco_pi(sk)->conn;",
          "293:   return -EINVAL;",
          "302:  hci_send_sco(conn->hcon, skb);",
          "305: }",
          "307: static void sco_recv_frame(struct sco_conn *conn, struct sk_buff *skb)",
          "",
          "[Removed Lines]",
          "284: static int sco_send_frame(struct sock *sk, void *buf, int len,",
          "285:      unsigned int msg_flags)",
          "288:  struct sk_buff *skb;",
          "289:  int err;",
          "292:  if (len > conn->mtu)",
          "295:  BT_DBG(\"sk %p len %d\", sk, len);",
          "297:  skb = bt_skb_send_alloc(sk, len, msg_flags & MSG_DONTWAIT, &err);",
          "298:  if (!skb)",
          "299:   return err;",
          "301:  memcpy(skb_put(skb, len), buf, len);",
          "304:  return len;",
          "",
          "[Added Lines]",
          "284: static int sco_send_frame(struct sock *sk, struct sk_buff *skb)",
          "289:  if (skb->len > conn->mtu)",
          "292:  BT_DBG(\"sk %p len %d\", sk, skb->len);",
          "296:  return skb->len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "728:        size_t len)",
          "729: {",
          "730:  struct sock *sk = sock->sk;",
          "732:  int err;",
          "734:  BT_DBG(\"sock %p, sk %p\", sock, sk);",
          "",
          "[Removed Lines]",
          "731:  void *buf;",
          "",
          "[Added Lines]",
          "723:  struct sk_buff *skb;",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "740:  if (msg->msg_flags & MSG_OOB)",
          "741:   return -EOPNOTSUPP;",
          "752:  lock_sock(sk);",
          "754:  if (sk->sk_state == BT_CONNECTED)",
          "756:  else",
          "757:   err = -ENOTCONN;",
          "759:  release_sock(sk);",
          "761:  return err;",
          "762: }",
          "",
          "[Removed Lines]",
          "743:  buf = kmalloc(len, GFP_KERNEL);",
          "744:  if (!buf)",
          "745:   return -ENOMEM;",
          "747:  if (memcpy_from_msg(buf, msg, len)) {",
          "748:   kfree(buf);",
          "749:   return -EFAULT;",
          "750:  }",
          "755:   err = sco_send_frame(sk, buf, len, msg->msg_flags);",
          "760:  kfree(buf);",
          "",
          "[Added Lines]",
          "735:  skb = bt_skb_sendmsg(sk, msg, len, len, 0, 0);",
          "736:  if (IS_ERR_OR_NULL(skb))",
          "737:   return PTR_ERR(skb);",
          "742:   err = sco_send_frame(sk, skb);",
          "747:  if (err)",
          "748:   kfree_skb(skb);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "037ce005af6b8a3e40ee07c6e9266c8997e6a4d6",
      "candidate_info": {
        "commit_hash": "037ce005af6b8a3e40ee07c6e9266c8997e6a4d6",
        "repo": "torvalds/linux",
        "commit_url": "https://github.com/torvalds/linux/commit/037ce005af6b8a3e40ee07c6e9266c8997e6a4d6",
        "files": [
          "net/bluetooth/sco.c"
        ],
        "message": "Bluetooth: SCO: Fix sco_send_frame returning skb->len\n\nThe skb in modified by hci_send_sco which pushes SCO headers thus\nchanging skb->len causing sco_sock_sendmsg to fail.\n\nFixes: 0771cbb3b97d (\"Bluetooth: SCO: Replace use of memcpy_from_msg with bt_skb_sendmsg\")\nTested-by: Tedd Ho-Jeong An <tedd.an@intel.com>\nSigned-off-by: Luiz Augusto von Dentz <luiz.von.dentz@intel.com>\nSigned-off-by: Marcel Holtmann <marcel@holtmann.org>",
        "before_after_code_files": [
          "net/bluetooth/sco.c||net/bluetooth/sco.c"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_branch_evolution": 1,
        "olp_code_files": {
          "patch": [
            "net/bluetooth/sco.c||net/bluetooth/sco.c"
          ],
          "candidate": [
            "net/bluetooth/sco.c||net/bluetooth/sco.c"
          ]
        }
      },
      "candidate_diff": {
        "net/bluetooth/sco.c||net/bluetooth/sco.c": [
          "File: net/bluetooth/sco.c -> net/bluetooth/sco.c",
          "--- Hunk 1 ---",
          "[Context before]",
          "284: static int sco_send_frame(struct sock *sk, struct sk_buff *skb)",
          "285: {",
          "286:  struct sco_conn *conn = sco_pi(sk)->conn;",
          "290:   return -EINVAL;",
          "294:  hci_send_sco(conn->hcon, skb);",
          "297: }",
          "299: static void sco_recv_frame(struct sco_conn *conn, struct sk_buff *skb)",
          "",
          "[Removed Lines]",
          "289:  if (skb->len > conn->mtu)",
          "292:  BT_DBG(\"sk %p len %d\", sk, skb->len);",
          "296:  return skb->len;",
          "",
          "[Added Lines]",
          "287:  int len = skb->len;",
          "290:  if (len > conn->mtu)",
          "293:  BT_DBG(\"sk %p len %d\", sk, len);",
          "297:  return len;",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "744:   err = -ENOTCONN;",
          "746:  release_sock(sk);",
          "748:   kfree_skb(skb);",
          "749:  return err;",
          "750: }",
          "",
          "[Removed Lines]",
          "747:  if (err)",
          "",
          "[Added Lines]",
          "749:  if (err < 0)",
          "",
          "---------------"
        ]
      }
    }
  ]
}