{
  "cve_id": "CVE-2012-2330",
  "cve_desc": "The Update method in src/node_http_parser.cc in Node.js before 0.6.17 and 0.7 before 0.7.8 does not properly check the length of a string, which allows remote attackers to obtain sensitive information (request header contents) and possibly spoof HTTP headers via a zero length string.",
  "repo": "joyent/node",
  "patch_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
  "patch_info": {
    "commit_hash": "c9a231db0e59658be419d926b1dfa17b939ba158",
    "repo": "joyent/node",
    "commit_url": "https://github.com/joyent/node/commit/c9a231d",
    "files": [
      "src/node_http_parser.cc"
    ],
    "message": "typo in node_http_parser",
    "before_after_code_files": [
      "src/node_http_parser.cc||src/node_http_parser.cc"
    ]
  },
  "patch_diff": {
    "src/node_http_parser.cc||src/node_http_parser.cc": [
      "File: src/node_http_parser.cc -> src/node_http_parser.cc",
      "--- Hunk 1 ---",
      "[Context before]",
      "191:   void Update(const char* str, size_t size) {",
      "192:     if (str_ == NULL)",
      "193:       str_ = str;",
      "197:       char* s = new char[size_ + size];",
      "",
      "[Removed Lines]",
      "194:     else if (on_heap_ || str_ + size != str) {",
      "",
      "[Added Lines]",
      "194:     else if (on_heap_ || str_ + size_ != str) {",
      "",
      "---------------"
    ]
  },
  "candidates": [
    {
      "candidate_hash": "93298afc4e2835e5b526ab871922018999e98bcb",
      "candidate_info": {
        "commit_hash": "93298afc4e2835e5b526ab871922018999e98bcb",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/93298afc4e2835e5b526ab871922018999e98bcb",
        "files": [
          "test/simple/test-util-inspect.js"
        ],
        "message": "test: for #2109",
        "before_after_code_files": [
          "test/simple/test-util-inspect.js||test/simple/test-util-inspect.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-util-inspect.js||test/simple/test-util-inspect.js": [
          "File: test/simple/test-util-inspect.js -> test/simple/test-util-inspect.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "42: assert.equal(util.inspect(a, true), \"[ 'foo', , 'baz', [length]: 3 ]\");",
          "43: assert.equal(util.inspect(new Array(5)), '[ , , , ,  ]');",
          "46: assert.equal(util.inspect(new Error()), '[Error]');",
          "47: assert.equal(util.inspect(new Error('FAIL')), '[Error: FAIL]');",
          "",
          "[Removed Lines]",
          "[None]",
          "",
          "[Added Lines]",
          "46: var getter = Object.create(null, {",
          "47:   a: {",
          "48:     get: function() { return 'aaa'; }",
          "49:   }",
          "50: });",
          "51: var setter = Object.create(null, {",
          "52:   b: {",
          "53:     set: function() {}",
          "54:   },",
          "55: });",
          "56: var getterAndSetter = Object.create(null, {",
          "57:   c: {",
          "58:     get: function() { return 'ccc'; },",
          "59:     set: function() {}",
          "60:   }",
          "61: });",
          "62: assert.equal(util.inspect(getter, true), \"{ [a]: [Getter] }\");",
          "63: assert.equal(util.inspect(setter, true), \"{ [b]: [Setter] }\");",
          "64: assert.equal(util.inspect(getterAndSetter, true), \"{ [c]: [Getter/Setter] }\");",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "0abe42a0f4be80bd659411656503e7ac2c243813",
      "candidate_info": {
        "commit_hash": "0abe42a0f4be80bd659411656503e7ac2c243813",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/0abe42a0f4be80bd659411656503e7ac2c243813",
        "files": [
          "lib/http.js"
        ],
        "message": "http: .once() usage in setTimeout",
        "before_after_code_files": [
          "lib/http.js||lihttp.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "lib/http.js||lihttp.js": [
          "File: lib/http.js -> lihttp.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "1494:   }",
          "1496:   if (this.socket) {",
          "1498:       this.setTimeout(msecs, emitTimeout);",
          "1499:     });",
          "1500:     return;",
          "1501:   }",
          "1504:     this.setTimeout(msecs, emitTimeout);",
          "1505:   });",
          "1506: };",
          "",
          "[Removed Lines]",
          "1497:     this.socket.on('connect', function() {",
          "1503:   this.on('socket', function(sock) {",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "35b3d151949e023eee07c118bf89826519fee488",
      "candidate_info": {
        "commit_hash": "35b3d151949e023eee07c118bf89826519fee488",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/35b3d151949e023eee07c118bf89826519fee488",
        "files": [
          "test/simple/test-dgram-broadcast-multi-process.js",
          "test/simple/test-dgram-multicast-multi-process.js"
        ],
        "message": "test: dgram-{broadcast,multicast}-multi-process : prevent false failures\n\n* check exit code of child processes\n* wait 1000 ms to exit the child process\n* prefix log messages with [PARENT] or [CHILD] to help debugging\n* kill all child processes before exiting\n\nConflicts:\n\n\ttest/simple/test-dgram-multicast-multi-process.js",
        "before_after_code_files": [
          "test/simple/test-dgram-broadcast-multi-process.js||test/simple/test-dgram-broadcast-multi-process.js",
          "test/simple/test-dgram-multicast-multi-process.js||test/simple/test-dgram-multicast-multi-process.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "test/simple/test-dgram-broadcast-multi-process.js||test/simple/test-dgram-broadcast-multi-process.js": [
          "File: test/simple/test-dgram-broadcast-multi-process.js -> test/simple/test-dgram-broadcast-multi-process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   timer = setTimeout(function () {",
          "51:     process.exit(1);",
          "52:   }, TIMEOUT);",
          "",
          "[Removed Lines]",
          "49:     console.error('Responses were not received within %d ms.', TIMEOUT);",
          "50:     console.error('Fail');",
          "",
          "[Added Lines]",
          "49:     console.error('[PARENT] Responses were not received within %d ms.', TIMEOUT);",
          "50:     console.error('[PARENT] Fail');",
          "52:     killChildren(workers);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:       worker.on('exit', function (code, signal) {",
          "66:           return;",
          "67:         }",
          "69:         dead += 1;",
          "72:         if (dead === listeners) {",
          "75:           process.exit(1);",
          "76:         }",
          "77:       });",
          "",
          "[Removed Lines]",
          "65:         if (worker.isDone) {",
          "70:         console.error('Worker %d died. %d dead of %d', worker.pid, dead, listeners);",
          "73:           console.error('All workers have died.');",
          "74:           console.error('Fail');",
          "",
          "[Added Lines]",
          "69:         if (worker.isDone || code == 0) {",
          "74:         console.error('[PARENT] Worker %d died. %d dead of %d', worker.pid, dead, listeners);",
          "77:           console.error('[PARENT] All workers have died.');",
          "78:           console.error('[PARENT] Fail');",
          "80:           killChildren(workers);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:           if (worker.messagesReceived.length === messages.length) {",
          "92:             done += 1;",
          "93:             worker.isDone = true;",
          "95:                     worker.messagesReceived.length);",
          "96:           }",
          "98:           if (done === listeners) {",
          "100:                     + 'messages. Will now compare.');",
          "102:             Object.keys(workers).forEach(function (pid) {",
          "",
          "[Removed Lines]",
          "94:             console.error('%d received %d messages total.', worker.pid,",
          "99:             console.error('All workers have received the required number of '",
          "",
          "[Added Lines]",
          "101:             console.error('[PARENT] %d received %d messages total.', worker.pid,",
          "106:             console.error('[PARENT] All workers have received the required number of '",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:                 }",
          "114:               });",
          "117:                     , count);",
          "119:               assert.equal(count, messages.length",
          "",
          "[Removed Lines]",
          "116:               console.error('%d received %d matching messges.', worker.pid",
          "",
          "[Added Lines]",
          "123:               console.error('[PARENT] %d received %d matching messges.', worker.pid",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "121:             });",
          "123:             clearTimeout(timer);",
          "125:           }",
          "126:         }",
          "127:       });",
          "",
          "[Removed Lines]",
          "124:             console.error('Success');",
          "",
          "[Added Lines]",
          "131:             console.error('[PARENT] Success');",
          "132:             killChildren(workers);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "134:   sendSocket.setBroadcast(true);",
          "136:   sendSocket.on('close', function() {",
          "138:   });",
          "140:   sendSocket.sendNext = function() {",
          "",
          "[Removed Lines]",
          "137:     console.error('sendSocket closed');",
          "",
          "[Added Lines]",
          "145:     console.error('[PARENT] sendSocket closed');",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "151:       if (err) throw err;",
          "154:                 , LOCAL_BROADCAST_HOST, common.PORT);",
          "156:       process.nextTick(sendSocket.sendNext);",
          "157:     });",
          "158:   };",
          "159: }",
          "161: if (process.argv[2] === 'child') {",
          "",
          "[Removed Lines]",
          "153:       console.error('sent %s to %s:%s', util.inspect(buf.toString())",
          "",
          "[Added Lines]",
          "161:       console.error('[PARENT] sent %s to %s:%s', util.inspect(buf.toString())",
          "168:   function killChildren(children) {",
          "169:     Object.keys(children).forEach(function(key) {",
          "170:       var child = children[key];",
          "171:       child.kill();",
          "172:     });",
          "173:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "163:   var listenSocket = dgram.createSocket('udp4');",
          "165:   listenSocket.on('message', function(buf, rinfo) {",
          "167:                 , util.inspect(buf.toString()), rinfo);",
          "169:     receivedMessages.push(buf);",
          "",
          "[Removed Lines]",
          "166:     console.error('%s received %s from %j', process.pid",
          "",
          "[Added Lines]",
          "181:     console.error('[CHILD] %s received %s from %j', process.pid",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "171:     process.send({ message : buf.toString() });",
          "173:     if (receivedMessages.length == messages.length) {",
          "175:         listenSocket.close();",
          "176:       });",
          "177:     }",
          "178:   });",
          "180:   listenSocket.on('close', function() {",
          "182:   });",
          "184:   listenSocket.on('listening', function() {",
          "",
          "[Removed Lines]",
          "174:       process.nextTick(function() {",
          "181:     process.exit();",
          "",
          "[Added Lines]",
          "189:       process.nextTick(function () {",
          "199:     setTimeout(function() {",
          "200:       process.exit();",
          "201:     }, 1000);",
          "",
          "---------------"
        ],
        "test/simple/test-dgram-multicast-multi-process.js||test/simple/test-dgram-multicast-multi-process.js": [
          "File: test/simple/test-dgram-multicast-multi-process.js -> test/simple/test-dgram-multicast-multi-process.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "48:   timer = setTimeout(function () {",
          "51:     process.exit(1);",
          "52:   }, TIMEOUT);",
          "",
          "[Removed Lines]",
          "49:     console.error('Responses were not received within %d ms.', TIMEOUT);",
          "50:     console.error('Fail');",
          "",
          "[Added Lines]",
          "49:     console.error('[PARENT] Responses were not received within %d ms.', TIMEOUT);",
          "50:     console.error('[PARENT] Fail');",
          "52:     killChildren(workers);",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "63:       worker.on('exit', function (code, signal) {",
          "66:           return;",
          "67:         }",
          "69:         dead += 1;",
          "72:         if (dead === listeners) {",
          "75:           process.exit(1);",
          "76:         }",
          "77:       });",
          "",
          "[Removed Lines]",
          "65:         if (worker.isDone) {",
          "70:         console.error('Worker %d died. %d dead of %d', worker.pid, dead, listeners);",
          "73:           console.error('All workers have died.');",
          "74:           console.error('Fail');",
          "",
          "[Added Lines]",
          "70:         if (worker.isDone || code === 0) {",
          "75:         console.error('[PARENT] Worker %d died. %d dead of %d', worker.pid, dead, listeners);",
          "78:           console.error('[PARENT] All workers have died.');",
          "79:           console.error('[PARENT] Fail');",
          "81:           killChildren(workers);",
          "",
          "---------------",
          "--- Hunk 3 ---",
          "[Context before]",
          "91:           if (worker.messagesReceived.length === messages.length) {",
          "92:             done += 1;",
          "93:             worker.isDone = true;",
          "95:                     worker.messagesReceived.length);",
          "96:           }",
          "98:           if (done === listeners) {",
          "100:                     + 'messages. Will now compare.');",
          "102:             Object.keys(workers).forEach(function (pid) {",
          "",
          "[Removed Lines]",
          "94:             console.error('%d received %d messages total.', worker.pid,",
          "99:             console.error('All workers have received the required number of '",
          "",
          "[Added Lines]",
          "102:             console.error('[PARENT] %d received %d messages total.', worker.pid,",
          "107:             console.error('[PARENT] All workers have received the required number of '",
          "",
          "---------------",
          "--- Hunk 4 ---",
          "[Context before]",
          "113:                 }",
          "114:               });",
          "117:                     , count);",
          "119:               assert.equal(count, messages.length",
          "",
          "[Removed Lines]",
          "116:               console.error('%d received %d matching messages.', worker.pid",
          "",
          "[Added Lines]",
          "124:               console.error('[PARENT] %d received %d matching messages.', worker.pid",
          "",
          "---------------",
          "--- Hunk 5 ---",
          "[Context before]",
          "121:             });",
          "123:             clearTimeout(timer);",
          "125:           }",
          "126:         }",
          "127:       });",
          "",
          "[Removed Lines]",
          "124:             console.error('Success');",
          "",
          "[Added Lines]",
          "132:             console.error('[PARENT] Success');",
          "133:             killChildren(workers);",
          "",
          "---------------",
          "--- Hunk 6 ---",
          "[Context before]",
          "139:   sendSocket.setMulticastLoopback(true);",
          "141:   sendSocket.on('close', function() {",
          "143:   });",
          "145:   sendSocket.sendNext = function() {",
          "",
          "[Removed Lines]",
          "142:     console.error('sendSocket closed');",
          "",
          "[Added Lines]",
          "151:     console.error('[PARENT] sendSocket closed');",
          "",
          "---------------",
          "--- Hunk 7 ---",
          "[Context before]",
          "153:     sendSocket.send(buf, 0, buf.length,",
          "154:                 common.PORT, LOCAL_BROADCAST_HOST, function(err) {",
          "155:       if (err) throw err;",
          "157:                 LOCAL_BROADCAST_HOST, common.PORT);",
          "158:       process.nextTick(sendSocket.sendNext);",
          "159:     });",
          "160:   };",
          "161: }",
          "163: if (process.argv[2] === 'child') {",
          "",
          "[Removed Lines]",
          "156:       console.error('sent %s to %s:%s', util.inspect(buf.toString()),",
          "",
          "[Added Lines]",
          "165:       console.error('[PARENT] sent %s to %s:%s', util.inspect(buf.toString()),",
          "171:   function killChildren(children) {",
          "172:     Object.keys(children).forEach(function(key) {",
          "173:       var child = children[key];",
          "174:       child.kill();",
          "175:     });",
          "176:   }",
          "",
          "---------------",
          "--- Hunk 8 ---",
          "[Context before]",
          "165:   var listenSocket = dgram.createSocket('udp4');",
          "167:   listenSocket.on('message', function(buf, rinfo) {",
          "169:                 ,util.inspect(buf.toString()), rinfo);",
          "171:     receivedMessages.push(buf);",
          "",
          "[Removed Lines]",
          "168:     console.error('%s received %s from %j', process.pid",
          "",
          "[Added Lines]",
          "184:     console.error('[CHILD] %s received %s from %j', process.pid",
          "",
          "---------------",
          "--- Hunk 9 ---",
          "[Context before]",
          "182:   });",
          "184:   listenSocket.on('close', function() {",
          "186:   });",
          "188:   listenSocket.on('listening', function() {",
          "",
          "[Removed Lines]",
          "185:     process.exit();",
          "",
          "[Added Lines]",
          "205:     setTimeout(function () {",
          "206:       process.exit();",
          "207:  }, 1000);",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "3bc3af0276fd464cddec5118f750f92b4e667f9c",
      "candidate_info": {
        "commit_hash": "3bc3af0276fd464cddec5118f750f92b4e667f9c",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/3bc3af0276fd464cddec5118f750f92b4e667f9c",
        "files": [
          "src/node.js"
        ],
        "message": "process: remove old notices about removed methods\n\nThese methods were removed a long time ago. Keeping these notices here\nmakes no sense anymore.\n\nAlso, removing this part of code slightly speeds up the startup.",
        "before_after_code_files": [
          "src/node.js||src/node.js"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 1,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/node.js||src/node.js": [
          "File: src/node.js -> src/node.js",
          "--- Hunk 1 ---",
          "[Context before]",
          "47:     startup.processChannel();",
          "51:     startup.resolveArgv0();",
          "",
          "[Removed Lines]",
          "49:     startup.removedMethods();",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------",
          "--- Hunk 2 ---",
          "[Context before]",
          "431:     }",
          "432:   }",
          "465:   startup.resolveArgv0 = function() {",
          "466:     var cwd = process.cwd();",
          "467:     var isWindows = process.platform === 'win32';",
          "",
          "[Removed Lines]",
          "434:   startup._removedProcessMethods = {",
          "435:     'assert': 'process.assert() use require(\"assert\").ok() instead',",
          "436:     'debug': 'process.debug() use console.error() instead',",
          "437:     'error': 'process.error() use console.error() instead',",
          "438:     'watchFile': 'process.watchFile() has moved to fs.watchFile()',",
          "439:     'unwatchFile': 'process.unwatchFile() has moved to fs.unwatchFile()',",
          "440:     'mixin': 'process.mixin() has been removed.',",
          "441:     'createChildProcess': 'childProcess API has changed. See doc/api.txt.',",
          "442:     'inherits': 'process.inherits() has moved to util.inherits()',",
          "443:     '_byteLength': 'process._byteLength() has moved to Buffer.byteLength'",
          "444:   };",
          "446:   startup.removedMethods = function() {",
          "447:     var desc = {",
          "448:       configurable: true,",
          "449:       writable: true,",
          "450:       enumerable: false",
          "451:     };",
          "452:     for (var method in startup._removedProcessMethods) {",
          "453:       var reason = startup._removedProcessMethods[method];",
          "454:       desc.value = startup._removedMethod(reason);",
          "455:       Object.defineProperty(process, method, desc);",
          "456:     }",
          "457:   };",
          "459:   startup._removedMethod = function(reason) {",
          "460:     return function() {",
          "461:       throw new Error(reason);",
          "462:     };",
          "463:   };",
          "",
          "[Added Lines]",
          "[None]",
          "",
          "---------------"
        ]
      }
    },
    {
      "candidate_hash": "f48223666554e67421e77afe30c9c0368c361eb9",
      "candidate_info": {
        "commit_hash": "f48223666554e67421e77afe30c9c0368c361eb9",
        "repo": "joyent/node",
        "commit_url": "https://github.com/joyent/node/commit/f48223666554e67421e77afe30c9c0368c361eb9",
        "files": [
          "src/platform_win32.cc"
        ],
        "message": "windows: don't print error when GetConsoleTitleW returns an empty string",
        "before_after_code_files": [
          "src/platform_win32.cc||src/platform_win32.cc"
        ]
      },
      "candidate_patch_features": {
        "candidate_earlier_than_patch": 0,
        "same_pr": 1,
        "olp_pr_links": [
          "https://github.com/roamm/node/pull/1",
          "https://github.com/kingzone/node/pull/1",
          "https://github.com/OpenFPGAduino/node/pull/1"
        ],
        "olp_code_files": {
          "patch": [],
          "candidate": []
        }
      },
      "candidate_diff": {
        "src/platform_win32.cc||src/platform_win32.cc": [
          "File: src/platform_win32.cc -> src/platform_win32.cc",
          "--- Hunk 1 ---",
          "[Context before]",
          "155:   result = GetConsoleTitleW(title_w, sizeof(title_w) / sizeof(WCHAR));",
          "157:   if (result == 0) {",
          "159:     return NULL;",
          "160:   }",
          "",
          "[Removed Lines]",
          "158:     winapi_perror(\"GetConsoleTitleW\");",
          "",
          "[Added Lines]",
          "158:     if (GetLastError() != ERROR_SUCCESS) {",
          "159:       winapi_perror(\"GetConsoleTitleW\");",
          "160:     }",
          "",
          "---------------"
        ]
      }
    }
  ]
}